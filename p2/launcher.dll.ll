source_filename = "test"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%vtable_10022bd4_type = type { i32 (i32, i32)* }
%vtable_10022bf8_type = type { i32 ()* }
%vtable_10022ce4_type = type { i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 (i32, i32)*, i32 ()*, i32 (i32, i32, i8, i32, i32, i8)*, i32 (i32)* }
%vtable_10023154_type = type { i32 (i32, i32)*, i32 ()*, i32 ()*, i32 ()*, i32 ()* }
%vtable_1002367c_type = type { i32 (i32)* }
%vtable_10023ea8_type = type { i32 (i32, i32)* }
%vtable_10023eb0_type = type { i32 (i32)* }
%vtable_10023eb8_type = type { i32 (i32, i32)* }
%vtable_10023f50_type = type { i32 (i8)*, i32 ()*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 (i32, i32, i32)*, i32 ()* }
%vtable_10023ff4_type = type { i32 (i32)*, i32 ()*, i32 (i32)*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()* }
%vtable_1002401c_type = type { i32 (i8)*, i32 ()*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 (i32, i32, i32)*, i32 ()*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32, i32, i32, i32, i8, i32, i8, i32, i32)* }
%_IO_FILE = type { i32 }
%_SECURITY_ATTRIBUTES = type { i32, i32*, i1 }
%WSAData = type { i16, i16, i16, i16, i8*, [1 x i8], [1 x i8] }
%__locale_struct = type { [13 x %__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%__locale_data = type { i32 }
%_EXCEPTION_RECORD = type { i32, i32, %_EXCEPTION_RECORD*, i32*, i32, [1 x i32] }

@st7 = internal unnamed_addr global x86_fp80 0xK00000000000000000000
@fpu_stat_TOP = internal unnamed_addr global i3 0
@xmm0 = internal unnamed_addr global i128 0
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external local_unnamed_addr global i32
@1 = external local_unnamed_addr global i32
@2 = external local_unnamed_addr global i32
@3 = external local_unnamed_addr global i32
@4 = external local_unnamed_addr global i32
@global_var_100222bc.16 = constant [6 x i8] c"%s=%s\00"
@global_var_100222c8.17 = constant i32 92
@global_var_100222e0.18 = constant [6 x i8] c"-game\00"
@global_var_100222d4.19 = constant [10 x i8] c"-vproject\00"
@global_var_10028000.20 = local_unnamed_addr global i32 1
@global_var_10022370.22 = constant [9 x i8] c"VProject\00"
@global_var_10022364.23 = constant [12 x i8] c"%s%c..%cbin\00"
@global_var_10022360.24 = constant [4 x i8] c"bin\00"
@global_var_10022388.25 = constant [12 x i8] c"vconfig.exe\00"
@global_var_1002237c.26 = constant [12 x i8] c"-allowdebug\00"
@global_var_10029e60.27 = global i32 0
@global_var_100223a0.28 = constant [4 x i8] c"%s\0A\00"
@global_var_10022394.29 = constant [11 x i8] c"-NoVConfig\00"
@global_var_10022450.30 = constant [58 x i8] c"SetSteamInstallPath: FileSystem_GetExecutableDir failed.\0A\00"
@global_var_1002242c.31 = constant [36 x i8] c"FileSystem_GetExecutableDir failed.\00"
@global_var_10022420.32 = constant [10 x i8] c"steam.dll\00"
@global_var_10022410.33 = constant [13 x i8] c"steamapp.cfg\00"
@global_var_100223e0.34 = constant [48 x i8] c"Can't find %s relative to executable path: %s.\0A\00"
@global_var_100223dc.35 = constant i32 59
@global_var_100223d4.36 = constant [7 x i8] c"%s%s%s\00"
@global_var_100223a4.37 = constant [47 x i8] c"Can't find %s relative to executable path: %s.\00"
@global_var_1002248c.38 = constant [16 x i8] c"EXECUTABLE_PATH\00"
@global_var_1002249c.39 = constant [25 x i8] c"%s%cfilesystem_stdio.dll\00"
@global_var_100222f0.40 = constant [3 x i8] c"%s\00"
@global_var_100222c4.41 = constant [4 x i8] c"%s=\00"
@global_var_1002232c.42 = constant [13 x i8] c"GameInfo.txt\00"
@global_var_100224c0.43 = constant [10 x i8] c"/content/\00"
@global_var_100224b8.44 = constant [7 x i8] c"/game/\00"
@global_var_1002266c.45 = constant [49 x i8] c"bOnlyUseDirectoryName=1 and pDirectoryName=NULL.\00"
@global_var_10022608.46 = constant [99 x i8] c"Setup file '%s' doesn't exist in subdirectory '%s'.\0ACheck your -game parameter or VCONFIG setting.\00"
@global_var_10022600.47 = constant i32 0
@global_var_100225c0.49 = constant [64 x i8] c"Warning: falling back to auto detection of vproject directory.\0A\00"
@global_var_100225b8.50 = constant i32 46
@global_var_100224d0.51 = constant [232 x i8] c"Unable to find %s. Solutions:\0A\0A1. Read http://www.valve-erc.com/srcsdk/faq.html#NoGameDir\0A2. Run vconfig to specify which game you're working on.\0A3. Add -game <path> on the command line where <path> is the directory that %s is in.\0A\00"
@global_var_100226b8.52 = constant [3 x i8] c"rb\00"
@global_var_100226f0.53 = constant [15 x i8] c"%s is missing.\00"
@global_var_100226e4.54 = constant [11 x i8] c"FileSystem\00"
@global_var_100226c8.55 = constant [26 x i8] c"%s is not a valid format.\00"
@global_var_100226bc.56 = constant [12 x i8] c"SearchPaths\00"
@global_var_100226a8.57 = constant [13 x i8] c"SteamAppUser\00"
@global_var_10022758.58 = constant [24 x i8] c"config\5CSteamAppData.vdf\00"
@global_var_10022748.59 = constant [14 x i8] c"AutoLoginUser\00"
@global_var_10022728.60 = constant [32 x i8] c"Can't find steam app user info.\00"
@global_var_10022770.61 = constant [14 x i8] c"steaminfo.txt\00"
@global_var_100222f4.62 = constant [20 x i8] c"SteamUserPassphrase\00"
@global_var_1002233c.63 = constant [11 x i8] c"SteamAppId\00"
@global_var_1002230c.64 = constant [29 x i8] c"Missing SteamAppId in %s\5C%s.\00"
@global_var_10022308.65 = constant [3 x i8] c"%d\00"
@global_var_10022780.66 = constant [11 x i8] c"ToolsAppId\00"
@global_var_100226a0.67 = constant [5 x i8] c"path\00"
@global_var_1002279c.68 = constant [49 x i8] c"Unable to mount Steam content in the file system\00"
@global_var_10022708.69 = constant [30 x i8] c"FileSystem_GetBaseDir failed.\00"
@global_var_10029f81.72 = global i32 0
@global_var_10022804.74 = constant [9 x i8] c"-basedir\00"
@global_var_1002281c.76 = constant [7 x i8] c"CONIN$\00"
@global_var_10022818.77 = constant [3 x i8] c"wb\00"
@global_var_10022810.78 = constant [8 x i8] c"CONOUT$\00"
@global_var_10022b58.79 = constant [32 x i8] c"CSourceAppSystemGroup::Create()\00"
@global_var_1002278c.80 = constant [15 x i8] c"VFileSystem017\00"
@global_var_10022b50.81 = constant [6 x i8] c"-edit\00"
@global_var_10022b34.83 = constant [11 x i8] c"engine.dll\00"
@global_var_10022b24.84 = constant [14 x i8] c"datacache.dll\00"
@global_var_10022a78.93 = constant [19 x i8] c"VMaterialSystem080\00"
@global_var_10022964.109 = constant [32 x i8] c"VENGINE_LAUNCHER_API_VERSION004\00"
@global_var_1002295c.110 = constant [7 x i8] c"-tools\00"
@global_var_10022954.111 = constant [6 x i8] c"-nop4\00"
@global_var_10022950.112 = constant [4 x i8] c"-p4\00"
@global_var_10022944.113 = constant [10 x i8] c"p4lib.dll\00"
@global_var_1002293c.114 = constant [7 x i8] c"VP4002\00"
@global_var_10022700.115 = constant [7 x i8] c"-steam\00"
@global_var_10022930.116 = constant [12 x i8] c"vstdlib.dll\00"
@global_var_1002291c.117 = constant [17 x i8] c"VProcessUtils002\00"
@global_var_10022914.118 = constant [5 x i8] c"-dev\00"
@global_var_100228f8.119 = constant [26 x i8] c"VResourceAccessControl001\00"
@global_var_10029f7c.120 = local_unnamed_addr global i32 0
@global_var_100228e8.121 = constant [15 x i8] c"hammer_dll.dll\00"
@global_var_100228dc.122 = constant [10 x i8] c"Hammer001\00"
@global_var_10029f78.123 = local_unnamed_addr global i32 0
@global_var_100228c8.124 = constant [17 x i8] c"shaderapidx9.dll\00"
@global_var_100228b8.125 = constant [13 x i8] c"-noshaderapi\00"
@global_var_100228a4.126 = constant [19 x i8] c"shaderapiempty.dll\00"
@global_var_10022898.127 = constant [11 x i8] c"-shaderapi\00"
@global_var_10022840.128 = constant [86 x i8] c"CSourceAppSystemGroup::Create() - Took %.4f secs to load libraries and get factories.\00"
@global_var_1002b968.129 = local_unnamed_addr global i32 0
@global_var_1002a190.130 = local_unnamed_addr global i32 0
@global_var_10022b78.131 = constant [4 x i8] c"hl2\00"
@global_var_10022ba8.133 = constant [20 x i8] c"hl2_singleton_mutex\00"
@global_var_1002a194.134 = local_unnamed_addr global i32 0
@global_var_10022b9c.135 = constant [9 x i8] c"VPROJECT\00"
@global_var_10022b8c.136 = constant [15 x i8] c"-allowmultiple\00"
@global_var_10022bbc.137 = constant [5 x i8] c"\22%s\22\00"
@global_var_1002b410.138 = local_unnamed_addr global i32 0
@global_var_1002a410.139 = global i32 0
@global_var_100227f8.140 = constant [5 x i8] c".dem\00"
@global_var_100227ec.141 = constant [9 x i8] c"playdemo\00"
@global_var_100227e4.142 = constant [5 x i8] c".sav\00"
@global_var_100227dc.143 = constant [5 x i8] c"load\00"
@global_var_100227d4.144 = constant [5 x i8] c".bsp\00"
@global_var_100227d0.145 = constant [4 x i8] c"map\00"
@global_var_1002800c.147 = global [7 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100227f8.140, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_100227ec.141, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100227e4.142, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100227dc.143, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100227d4.144, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_100227d0.145, i32 0, i32 0), i8* bitcast (%vtable_10022bd4_type* @global_var_10022bd4.146 to i8*)]
@global_var_10022bcc.148 = constant [4 x i8] c"+%s\00"
@global_var_10028024.149 = global i32* bitcast (%vtable_10022bd4_type* @global_var_10022bd4.146 to i32*)
@global_var_1002b418.150 = global i32 0
@global_var_10022bc4.151 = constant [6 x i8] c"%s %s\00"
@global_var_1002a304.152 = local_unnamed_addr global i32 0
@global_var_10022be8.153 = constant [9 x i8] c"Warning!\00"
@global_var_10022be0.154 = constant [8 x i8] c"Assert!\00"
@global_var_10022bd8.155 = constant [7 x i8] c"Error!\00"
@global_var_1002b618.157 = local_unnamed_addr global i32 0
@global_var_1002b61c.159 = global i32 0
@global_var_1002b620.160 = local_unnamed_addr global i32 0
@global_var_1002b624.161 = local_unnamed_addr global i32 0
@global_var_1002b628.162 = local_unnamed_addr global i32 0
@global_var_10022c14.163 = constant [8 x i8] c"all.lst\00"
@global_var_10022c08.164 = constant [9 x i8] c"%s\5C%s\5C%s\00"
@global_var_1002b95c.165 = local_unnamed_addr global i32 0
@global_var_100222cc.166 = constant [5 x i8] c"GAME\00"
@global_var_10022c00.168 = constant i32 34
@global_var_10022bfc.169 = constant [3 x i8] c"\22\0A\00"
@global_var_10022c1c.170 = constant [22 x i8] c"CUtlRBTree overflow!\0A\00"
@global_var_1002b636.175 = local_unnamed_addr global i32 0
@global_var_1002b63c.177 = global i32 0
@global_var_1002b648.178 = local_unnamed_addr global i32 0
@global_var_1002b64c.179 = local_unnamed_addr global i32 0
@global_var_1002b650.180 = local_unnamed_addr global i32 0
@global_var_1002b65c.181 = local_unnamed_addr global i32 0
@global_var_1002b658.182 = local_unnamed_addr global i32 0
@global_var_10022c34.183 = constant [7 x i8] c"%s %s;\00"
@global_var_10022c3c.185 = constant [9 x i8] c"reslists\00"
@global_var_1002a1b0.186 = global i32 0
@global_var_10022c7c.187 = constant [14 x i8] c"-makereslists\00"
@global_var_10022c70.188 = constant [12 x i8] c"-reslistdir\00"
@global_var_10022c68.189 = constant [6 x i8] c"%s/%s\00"
@global_var_10022c60.190 = constant [6 x i8] c"%s\5C%s\00"
@global_var_10022c54.191 = constant [10 x i8] c"-startmap\00"
@global_var_10022c48.192 = constant [12 x i8] c"-startstage\00"
@global_var_10022c8c.193 = constant [11 x i8] c"engine.lst\00"
@global_var_10022c98.194 = constant [72 x i8] c"FileSystem_LoadFileSystemModule: no -defaultgamedir or -game specified.\00"
@global_var_10022348.195 = constant [9 x i8] c"PLATFORM\00"
@global_var_10022354.196 = constant [9 x i8] c"platform\00"
@global_var_1002b698.197 = global i32 0
@global_var_10028148.198 = local_unnamed_addr global i32* @global_var_1002b698.197
@global_var_100241dc.199 = constant i32 268505773
@global_var_10028154.200 = local_unnamed_addr global i32* @global_var_100241dc.199
@global_var_1002814c.202 = local_unnamed_addr global i32 2139095039
@global_var_100230f0.203 = constant [8 x i8] c"-dvddev\00"
@global_var_100230e4.204 = constant [9 x i8] c"-dllinfo\00"
@global_var_100230d8.205 = constant [11 x i8] c"-vxconsole\00"
@global_var_100230d0.206 = constant [8 x i8] c"portal2\00"
@global_var_100230c4.207 = constant [11 x i8] c"-nosixense\00"
@global_var_100230a4.208 = constant [29 x i8] c"portal2_sixense/gameinfo.txt\00"
@global_var_10023094.209 = constant [16 x i8] c"portal2_sixense\00"
@global_var_1002308c.210 = constant [8 x i8] c"-tslist\00"
@global_var_10023074.211 = constant [22 x i8] c"Running TSList tests\0A\00"
@global_var_1002305c.212 = constant [23 x i8] c"Running TSQueue tests\0A\00"
@global_var_10023040.213 = constant [27 x i8] c"Running Thread Pool tests\0A\00"
@global_var_10022824.214 = constant [24 x i8] c"GameOverlayRenderer.dll\00"
@global_var_10023004.215 = constant [57 x i8] c"Warning! Failed to start Winsock via WSAStartup = 0x%x.\0A\00"
@global_var_10022ff8.216 = constant [10 x i8] c"-textmode\00"
@global_var_10022ff0.217 = constant [5 x i8] c"-low\00"
@global_var_10022fe8.218 = constant [8 x i8] c"-hijack\00"
@global_var_10022fdc.219 = constant [9 x i8] c"Valve001\00"
@global_var_10022fc0.220 = constant [26 x i8] c"Source Engine Not Running\00"
@global_var_10022f48.221 = constant [119 x i8] c"The modified entity keyvalues could not be sent to the Source Engine because the engine does not appear to be running.\00"
@global_var_10022f24.222 = constant [31 x i8] c"Source Engine Declined Request\00"
@global_var_10022e78.223 = constant [169 x i8] c"The Source Engine was found running, but did not accept the request to load a savegame. It may be an old version of the engine that does not support this functionality.\00"
@global_var_10022e64.224 = constant [17 x i8] c"Source - Warning\00"
@global_var_10022e28.225 = constant [58 x i8] c"Only one instance of the game can be running at one time.\00"
@global_var_10022e20.226 = constant [6 x i8] c"-high\00"
@global_var_10022e14.227 = constant [10 x i8] c"-insecure\00"
@global_var_10022e04.228 = constant [15 x i8] c"-buildcubemaps\00"
@global_var_10022df8.229 = constant [9 x i8] c"-nosound\00"
@global_var_10022dec.230 = constant [9 x i8] c"-noasync\00"
@global_var_10022de0.231 = constant [11 x i8] c"-leakcheck\00"
@global_var_10028158.234 = local_unnamed_addr global i32 0
@global_var_10022ddc.235 = constant [3 x i8] c"-w\00"
@global_var_10022dd8.236 = constant [3 x i8] c"-h\00"
@global_var_10022dd0.237 = constant [7 x i8] c"-width\00"
@global_var_10022dc8.238 = constant [8 x i8] c"-height\00"
@global_var_10022dc4.239 = constant [4 x i8] c"-sw\00"
@global_var_10022db4.240 = constant [15 x i8] c"-startwindowed\00"
@global_var_10022da8.241 = constant [10 x i8] c"-windowed\00"
@global_var_10022da0.242 = constant [8 x i8] c"-window\00"
@global_var_10022d98.243 = constant [6 x i8] c"-full\00"
@global_var_10022d8c.244 = constant [12 x i8] c"-fullscreen\00"
@global_var_10022d80.245 = constant [12 x i8] c"-autoconfig\00"
@global_var_10022d70.246 = constant [15 x i8] c"+mat_hdr_level\00"
@global_var_10022d40.247 = constant [48 x i8] c"Warning! Failed to complete WSACleanup = 0x%x.\0A\00"
@global_var_10022d28.248 = constant [22 x i8] c"Software\5CValve\5CSource\00"
@global_var_10022d18.249 = constant [13 x i8] c"Relaunch URL\00"
@global_var_10022d10.250 = constant [5 x i8] c"open\00"
@global_var_10023120.251 = constant [3 x i8] c"wt\00"
@global_var_1002311c.252 = constant i32 10
@global_var_10023124.253 = constant [27 x i8] c"Unable to maplist file %s\0A\00"
@global_var_10023140.255 = constant [14 x i8] c"reslists_work\00"
@global_var_10023168.256 = constant [12 x i8] c"%s\5C%s\5C%s\5C%s\00"
@global_var_10023174.257 = constant [7 x i8] c"%s.lst\00"
@global_var_10023224.258 = constant [32 x i8] c"%s -reslistdir %s -rebuildaudio\00"
@global_var_10023214.259 = constant [16 x i8] c"-norebuildaudio\00"
@global_var_100231e4.260 = constant [47 x i8] c"Generating Caches: Setting command line:\0A'%s'\0A\00"
@global_var_100231cc.261 = constant [24 x i8] c"%s %s %s -reslistdir %s\00"
@global_var_100231bc.262 = constant [13 x i8] c"-xboxreslist\00"
@global_var_10023188.263 = constant [49 x i8] c"Generating Reslists: Setting command line:\0A'%s'\0A\00"
@global_var_1002317c.264 = constant [10 x i8] c"-autoquit\00"
@global_var_10023368.265 = constant [21 x i8] c"Unable to load '%s'\0A\00"
@global_var_10023340.266 = constant [37 x i8] c"Unable to parse keyvalues from '%s'\0A\00"
@global_var_10023334.267 = constant [12 x i8] c"maplist.txt\00"
@global_var_1002332c.268 = constant [8 x i8] c"maplist\00"
@global_var_10023304.269 = constant [39 x i8] c"Maplist file '%s' empty or missing!!!\0A\00"
@global_var_100232fc.270 = constant [5 x i8] c"+map\00"
@global_var_100232ec.271 = constant [16 x i8] c"basecommandline\00"
@global_var_100232e0.272 = constant [9 x i8] c"finaldir\00"
@global_var_100232d8.273 = constant [8 x i8] c"workdir\00"
@global_var_100232d0.274 = constant [5 x i8] c"xbox\00"
@global_var_100232cc.275 = constant [3 x i8] c"%i\00"
@global_var_100232c4.276 = constant [7 x i8] c"subdir\00"
@global_var_100232b8.277 = constant [12 x i8] c"addcommands\00"
@global_var_1002328c.278 = constant [44 x i8] c"%s: failed to specify 'subdir' for item %s\0A\00"
@global_var_10023280.279 = constant [9 x i8] c"-collate\00"
@global_var_10023244.280 = constant [60 x i8] c"CResListGenerator: Falling back to legacy reslists system.\0A\00"
@global_var_10023434.281 = constant [52 x i8] c"Encountered a circular dependency with library %s!\0A\00"
@global_var_10023468.282 = constant [42 x i8] c"AppFramework : Unable to load module %s!\0A\00"
@global_var_10023494.283 = constant [42 x i8] c"AppFramework : Unable to load module %p!\0A\00"
@global_var_100234e4.284 = constant [10 x i8] c"(Unknown)\00"
@global_var_100233e0.285 = constant [15 x i8] c"INITIALIZATION\00"
@global_var_100233cc.286 = constant [19 x i8] c"POSTINITIALIZATION\00"
@global_var_100233c4.287 = constant [8 x i8] c"RUNNING\00"
@global_var_100233b8.288 = constant [12 x i8] c"PRESHUTDOWN\00"
@global_var_100233ac.289 = constant [9 x i8] c"SHUTDOWN\00"
@global_var_1002339c.290 = constant [13 x i8] c"POSTSHUTDOWN\00"
@global_var_1002338c.291 = constant [14 x i8] c"DISCONNECTION\00"
@global_var_10023380.292 = constant [12 x i8] c"DESTRUCTION\00"
@global_var_100281a4.293 = local_unnamed_addr global [8 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_100233e0.285, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_100233cc.286, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_100233c4.287, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_100233b8.288, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_100233ac.289, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_1002339c.290, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_1002338c.291, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10023380.292, i32 0, i32 0)]
@global_var_100234c0.294 = constant [36 x i8] c"System (%s) failed during stage %s\0A\00"
@global_var_1002b754.295 = local_unnamed_addr global i32 0
@global_var_100281dc.297 = global i32* bitcast (%vtable_1002367c_type* @global_var_1002367c.296 to i32*)
@global_var_100281cc.298 = local_unnamed_addr global i32** @global_var_100281dc.297
@global_var_100234f4.299 = constant i32 268505806
@global_var_1002b750.300 = local_unnamed_addr global i32 0
@global_var_10023404.301 = constant [11 x i8] c"CONNECTION\00"
@global_var_100233f0.302 = constant [18 x i8] c"PREINITIALIZATION\00"
@global_var_1002819c.303 = local_unnamed_addr global [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_10023404.301, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @global_var_100233f0.302, i32 0, i32 0)]
@global_var_10023524.304 = constant i32 268505806
@global_var_10023580.305 = constant [78 x i8] c"AppFramework : Attempted to add two systems with the same interface name %s!\0A\00"
@global_var_10023550.306 = constant [44 x i8] c"AppFramework : Unable to create system %s!\0A\00"
@global_var_100235d0.307 = constant [58 x i8] c"Unable to load interface %s from %s, requested from EXE.\0A\00"
@global_var_1002360c.308 = constant [56 x i8] c"Unable to load interface %s from %s (Dependency of %s)\0A\00"
@global_var_1002364c.309 = constant [6 x i8] c"Error\00"
@global_var_1002b764.310 = local_unnamed_addr global i32 0
@global_var_10023668.311 = constant [15 x i8] c"VEngineCvar007\00"
@global_var_10023654.312 = constant [18 x i8] c"Unable to load %s\00"
@global_var_10023684.313 = constant i32 268472528
@global_var_1002ba10.314 = local_unnamed_addr global i32 0
@global_var_10023978.315 = constant [64 x i8] c"APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %d!\0A\00"
@global_var_1002825c = external global i32
@global_var_1002b934.318 = local_unnamed_addr global i32 0
@global_var_1002b954.331 = local_unnamed_addr global i32 0
@global_var_1002b9a0.358 = local_unnamed_addr global i32 0
@global_var_10028258.402 = global [15 x i8]* @global_var_10023668.311
@global_var_1002b778.403 = global i32 0
@global_var_1002b77c.404 = global i32 0
@global_var_10023b50.405 = constant [39 x i8] c"V_AppendSlash: ran out of space on %s.\00"
@global_var_10023b84.406 = constant [3 x i8] c"./\00"
@global_var_10023b80.407 = constant [3 x i8] c".\5C\00"
@global_var_10023b7c.408 = constant [4 x i8] c".%c\00"
@global_var_10023bbc.409 = constant [36 x i8] c"V_MakeAbsolutePath: _getcwd failed.\00"
@global_var_10023b88.410 = constant [49 x i8] c"V_MakeAbsolutePath: tried to \22..\22 past the root.\00"
@global_var_10023c10.411 = constant [32 x i8] c"KeyValues Error: %s in file %s\0A\00"
@global_var_10023c08.412 = constant [5 x i8] c"%s, \00"
@global_var_10023bfc.413 = constant [9 x i8] c"(*%s*), \00"
@global_var_10023c30.415 = constant [20 x i8] c" ReadToken overflow\00"
@global_var_10028448.416 = global i32 0
@global_var_1002ba29.417 = local_unnamed_addr global i32 0
@global_var_1002be40.418 = global i32 0
@global_var_10023c44.419 = constant [32 x i8] c"KV Conditional Evaluation Error\00"
@global_var_10023bf0.420 = constant [3 x i8] c"%f\00"
@global_var_10023be8.421 = constant [5 x i8] c"%lld\00"
@global_var_1002854c.422 = local_unnamed_addr global i32 0
@global_var_10028550.423 = local_unnamed_addr global i32 0
@global_var_10023d24.424 = constant [53 x i8] c"RecursiveLoadFromBuffer:  got EOF instead of keyname\00"
@global_var_10023cf8.425 = constant [44 x i8] c"RecursiveLoadFromBuffer:  got empty keyname\00"
@global_var_10023cd0.426 = constant [39 x i8] c"RecursiveLoadFromBuffer:  got NULL key\00"
@global_var_10023ca8.427 = constant [39 x i8] c"RecursiveLoadFromBuffer:  got } in key\00"
@global_var_10023c68.428 = constant [64 x i8] c"RecursiveLoadFromBuffer:  got conditional between key and value\00"
@global_var_10023be0.429 = constant [8 x i8] c"unknown\00"
@global_var_10028430.430 = local_unnamed_addr global [8 x i8]* @global_var_10023be0.429
@global_var_10023d60.431 = constant [71 x i8] c"KeyValues::ParseIncludedKeys: Couldn't load included keyvalue file %s\0A\00"
@global_var_1002be38.432 = global i32 0
@global_var_1002be3c.433 = local_unnamed_addr global i32 0
@global_var_10023bf4.434 = constant [5 x i8] c"NULL\00"
@global_var_10028548.435 = local_unnamed_addr global [5 x i8]* @global_var_10023bf4.434
@global_var_10023df0.436 = constant [9 x i8] c"#include\00"
@global_var_10023ddc.437 = constant [18 x i8] c"#include is NULL \00"
@global_var_10023dd4.438 = constant [6 x i8] c"#base\00"
@global_var_10023dc4.439 = constant [15 x i8] c"#base is NULL \00"
@global_var_10023da8.440 = constant [26 x i8] c"LoadFromBuffer: missing {\00"
@global_var_1002bedc.441 = local_unnamed_addr global i32 0
@global_var_10023dfc.442 = constant [5 x i8] c".dll\00"
@global_var_1002bee0.443 = local_unnamed_addr global i32 0
@global_var_10023e14.444 = constant [6 x i8] c"-xlsp\00"
@global_var_10023e0c.445 = constant [6 x i8] c"_xlsp\00"
@global_var_10023e08.446 = constant [4 x i8] c"-ds\00"
@global_var_10023e04.447 = constant [4 x i8] c"_ds\00"
@global_var_10023e68.448 = constant [5 x i8] c"bin/\00"
@global_var_10023e5c.449 = constant [10 x i8] c"%s/bin/%s\00"
@global_var_10023e50.450 = constant [11 x i8] c"BuiltDebug\00"
@global_var_10023e34.451 = constant [28 x i8] c"Module %s is a debug build\0A\00"
@global_var_10023e1c.453 = constant [24 x i8] c"VALVE-MODULE-DEBUG-%08X\00"
@global_var_10023e70.454 = constant [16 x i8] c"CreateInterface\00"
@global_var_1002bef8.455 = global i32 0
@global_var_1002c918.456 = global i32 0
@global_var_1002d348.459 = local_unnamed_addr global i32 0
@global_var_10028638.460 = local_unnamed_addr global i32 -1
@global_var_1002d344.461 = local_unnamed_addr global i32 0
@global_var_1002d340.463 = local_unnamed_addr global i32 0
@global_var_100286fc = external local_unnamed_addr global i32
@global_var_10023fa4.464 = constant [12 x i8] c"%i %i %i %i\00"
@global_var_10023fb4.465 = constant [50 x i8] c"Warning:  %s = '%s' is infinite, clamping value.\0A\00"
@global_var_10024068.468 = constant [51 x i8] c"ConVar(%s) defined with infinite float value (%s)\0A\00"
@global_var_10023f84.469 = constant i32 268505806
@global_var_10024110.472 = constant i32 48
@global_var_100240c4.473 = constant i32 268492288
@global_var_100240a0.474 = constant i32 268490928
@global_var_1002d3de.479 = local_unnamed_addr global i32 0
@global_var_10028788.480 = global i32 238
@global_var_1002415c.481 = constant [6 x i8] c"WIN32\00"
@global_var_10024154.482 = constant [8 x i8] c"WINDOWS\00"
@global_var_1002414c.483 = constant [5 x i8] c"X360\00"
@global_var_10024148.484 = constant [4 x i8] c"PS3\00"
@global_var_10024144.485 = constant [4 x i8] c"OSX\00"
@global_var_1002413c.486 = constant [6 x i8] c"LINUX\00"
@global_var_10024134.487 = constant [6 x i8] c"POSIX\00"
@global_var_10024128.488 = constant [12 x i8] c"GAMECONSOLE\00"
@global_var_10024120.489 = constant [5 x i8] c"DEMO\00"
@global_var_10024114.490 = constant [12 x i8] c"LOWVIOLENCE\00"
@global_var_10024164.491 = constant [23 x i8] c"Conditional Error: %s\0A\00"
@global_var_100241b8.492 = constant [25 x i8] c"Bad expression token: %c\00"
@global_var_1002417c.493 = constant [59 x i8] c"Bad expression operator: '%c%c', expected C style operator\00"
@global_var_1002d404.496 = global i32 0
@global_var_1002d424.497 = local_unnamed_addr global i32 0
@global_var_1002d444.498 = global i32 0
@global_var_1002e2a0.499 = global i32 0
@global_var_10028c68.500 = global i32* @global_var_1002e2a0.499
@global_var_10029a8c.501 = local_unnamed_addr global i32 -1
@global_var_1002d4c4.502 = local_unnamed_addr global i32 0
@global_var_100291b0.503 = local_unnamed_addr global i32 -1153374642
@global_var_100292d0.504 = global i32 -1
@global_var_1002e160.505 = global i32 0
@global_var_10024250.507 = constant i32 100663302
@global_var_10024234.508 = constant [7 x i16] %wide-string
@global_var_100291cc.509 = local_unnamed_addr global [7 x i16]* @global_var_10024234.508
@global_var_10024244.510 = constant [7 x i8] c"(null)\00"
@global_var_100291c8.511 = local_unnamed_addr global [7 x i8]* @global_var_10024244.510
@global_var_10029078.512 = local_unnamed_addr global i32 268547375
@global_var_10029084.513 = local_unnamed_addr global i32 268547375
@global_var_10029080.514 = local_unnamed_addr global i32 268547375
@global_var_1002e280.515 = local_unnamed_addr global i32 0
@global_var_1002dc48.516 = local_unnamed_addr global i32 0
@global_var_1002dc7c.517 = local_unnamed_addr global i32 0
@global_var_1002dc88.518 = local_unnamed_addr global i32 0
@global_var_1002dc94.519 = local_unnamed_addr global i32 0
@global_var_1002dc98.520 = local_unnamed_addr global i32 0
@global_var_1002e13c.521 = local_unnamed_addr global i32 0
@global_var_10029ac0.522 = global i32 429065504
@global_var_1002a2fc.523 = local_unnamed_addr global i32 0
@global_var_100230f8.524 = constant [21 x i8] c"EngineInitialization\00"
@global_var_1002b680.525 = local_unnamed_addr global i32 0
@global_var_10028558.526 = global i32 10
@global_var_1002c810.527 = global i32 0
@global_var_10023ea0.529 = constant i32 110
@global_var_1002855c.530 = global i32* @global_var_10023ea0.529
@global_var_100285b4.531 = global i32* @global_var_10022600.47
@global_var_100285b0.532 = global i32 127
@global_var_1002b644.534 = local_unnamed_addr global i32 0
@global_var_1002b640.535 = local_unnamed_addr global i32 0
@global_var_1002d384.536 = local_unnamed_addr global i32 0
@global_var_1002d360.537 = local_unnamed_addr global i32 0
@global_var_1002d378.538 = local_unnamed_addr global i32 0
@global_var_1002d3a4.539 = global i32 0
@global_var_1002d3c4.540 = local_unnamed_addr global i32 0
@5 = external global i32
@global_var_10029f60.21 = local_unnamed_addr global i8 0
@global_var_10029f70.48 = local_unnamed_addr global i8 0
@global_var_1002a308.70 = external global i8*
@global_var_10029f80.71 = external global i8*
@global_var_10029f7f.73 = external global i8*
@global_var_100024a0.75 = constant i1 (i32)* inttoptr (i32 369033834 to i1 (i32)*)
@global_var_1002b62c.158 = local_unnamed_addr global i8 0
@global_var_1002b638.171 = local_unnamed_addr global i8 0
@global_var_1002b630.172 = global i16* null
@global_var_1002b632.173 = local_unnamed_addr global i16 0
@global_var_1002b634.174 = local_unnamed_addr global i16 0
@global_var_1002b66c.176 = local_unnamed_addr global i8 0
@global_var_1002b651.184 = local_unnamed_addr global i8 0
@global_var_1002a18c.201 = local_unnamed_addr global i8 0
@global_var_1002a300.232 = local_unnamed_addr global i8 0
@global_var_1002ba0c.316 = local_unnamed_addr global i8 0
@global_var_1002ba28.414 = external global i8*
@global_var_1002bee4.452 = local_unnamed_addr global i8 0
@global_var_1002d34c.458 = local_unnamed_addr global i8 0
@global_var_1002d3e0.475 = local_unnamed_addr global i8 0
@global_var_1002d3d8.476 = global i16* null
@global_var_1002d3da.477 = local_unnamed_addr global i16 0
@global_var_1002d3dc.478 = local_unnamed_addr global i16 0
@global_var_1002d401.494 = local_unnamed_addr global i8 0
@global_var_1002d400.495 = local_unnamed_addr global i8 0
@global_var_10024230.506 = external constant i8*
@global_var_10022bd4.146 = constant %vtable_10022bd4_type { i32 (i32, i32)* @function_10002b40 }
@global_var_10022bf8.156 = constant %vtable_10022bf8_type { i32 ()* @function_10002bc0 }
@global_var_10022ce4.233 = constant %vtable_10022ce4_type { i32 ()* @function_10002520, i32 ()* @function_10004a30, i32 ()* @function_10004c60, i32 ()* @function_10002820, i32 ()* @__heap_term, i32 ()* @function_10004c30, i32 ()* @function_10002830, i32 (i32, i32)* @function_10009050, i32 ()* @function_10008b50, i32 (i32, i32, i8, i32, i32, i8)* @function_100070b0, i32 (i32)* @function_10007180 }
@global_var_10023154.254 = constant %vtable_10023154_type { i32 (i32, i32)* @function_10006f50, i32 ()* @__heap_term, i32 ()* @function_10005710, i32 ()* @function_100067a0, i32 ()* @function_10005730 }
@global_var_1002367c.296 = constant %vtable_1002367c_type { i32 (i32)* @function_10009240 }
@global_var_10023ea8.457 = constant %vtable_10023ea8_type { i32 (i32, i32)* @function_1000bea0 }
@global_var_10023eb0.533 = constant %vtable_10023eb0_type { i32 (i32)* @function_1000bf00 }
@global_var_10023eb8.528 = constant %vtable_10023eb8_type { i32 (i32, i32)* @function_1000bdf0 }
@global_var_10023f50.467 = constant %vtable_10023f50_type { i32 (i8)* @function_1000d8f0, i32 ()* @function_10004c60, i32 (i32)* @function_1000d350, i32 (i32)* @function_1000d360, i32 (i32)* @function_1000d370, i32 ()* @function_1000d380, i32 ()* @function_1000d340, i32 ()* @function_1000d390, i32 ()* @function_1000d3a0, i32 ()* @function_1000d2e0, i32 (i32, i32, i32)* @function_1000d2f0, i32 ()* @function_1000d450 }
@global_var_10023ff4.471 = constant %vtable_10023ff4_type { i32 (i32)* @function_1000d8b0, i32 ()* @function_1000d8a0, i32 (i32)* @function_1000d880, i32 ()* @function_1000d870, i32 ()* @function_1000daf0, i32 ()* @function_1000d420, i32 ()* @function_1000dae0, i32 ()* @__wcsdup }
@global_var_1002401c.470 = constant %vtable_1002401c_type { i32 (i8)* @function_1000de00, i32 ()* @function_1000d440, i32 (i32)* @function_1000d3b0, i32 (i32)* @function_1000d3f0, i32 (i32)* @function_1000d370, i32 ()* @function_1000d3d0, i32 ()* @function_1000d410, i32 ()* @function_1000d3e0, i32 ()* @function_1000d400, i32 ()* @function_1000d2e0, i32 (i32, i32, i32)* @function_1000d2f0, i32 ()* @function_1000d450, i32 (i32)* @function_1000d510, i32 (i32)* @function_1000d680, i32 (i32)* @function_1000d760, i32 (i32)* @function_1000d830, i32 (i32)* @function_1000d640, i32 (i32, i32)* @function_1000d9b0, i32 (i32, i32, i32, i32, i8, i32, i8, i32, i32)* @function_1000db00 }

define i32 @function_10001000(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001000:
  %stack_var_-8196 = alloca i32, align 4
  %stack_var_-4100 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %v0_10001008 = call i32 @__chkstk()
  store i32 %arg2, i32* @ecx, align 4
  %v6_10001021 = call i32 @function_10009ac0(i32* nonnull %stack_var_-4100, i32 4096, i32 %arg2, i32* nonnull %stack_var_12)
  store i32 %arg1, i32* @ecx, align 4
  %v2_10001039 = ptrtoint i32* %stack_var_-8196 to i32
  %v6_10001045 = call i32 @function_10009a90(i32* nonnull %stack_var_-8196, i32 4096, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100222bc.16, i32 0, i32 0))
  store i32 %v2_10001039, i32* @ecx, align 4
  %tmp21 = bitcast i32* %stack_var_-8196 to i8*
  %v3_10001051 = call i32 @__putenv(i8* %tmp21)
  ret i32 %v3_10001051
}

define i32 @function_10001060(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001060:
  %v0_10001063 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_10001067 = load i32, i32* @edi, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_1000106d = inttoptr i32 %arg1 to i8*
  %v3_1000106d = call i8* @__getcwd(i8* %v1_1000106d, i32 %arg2)
  %v0_10001074 = load i32, i32* @edi, align 4
  %v0_1000107a = load i32, i32* @esi, align 4
  %v5_1000107b = call i32 @function_10009650(i32 %v0_1000107a, i32* nonnull @global_var_100222c8.17, i32 %v0_10001074, i32 -1)
  %v0_10001082 = load i32, i32* @esi, align 4
  %v2_10001083 = call i32 @function_10009740(i32 %v0_10001082, i32 92)
  store i32 %v0_10001067, i32* @edi, align 4
  store i32 %v0_10001063, i32* @esi, align 4
  ret i32 %v2_10001083
}

define i32 @function_10001090(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001090:
  %eax.global-to-local = alloca i32, align 4
  %v0_10001090 = load i32, i32* @ecx, align 4
  store i32 %v0_10001090, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_10001094 = inttoptr i32 %v0_10001090 to i32*
  store i32 0, i32* %v2_10001094, align 4
  %v0_10001096 = load i32, i32* %eax.global-to-local, align 4
  %v1_10001096 = add i32 %v0_10001096, 4
  %v2_10001096 = inttoptr i32 %v1_10001096 to i16*
  store i16 256, i16* %v2_10001096, align 2
  %v0_1000109c = load i32, i32* @ecx, align 4
  %v1_1000109c = trunc i32 %v0_1000109c to i16
  %v2_1000109c = load i32, i32* %eax.global-to-local, align 4
  %v3_1000109c = add i32 %v2_1000109c, 7
  %v4_1000109c = inttoptr i32 %v3_1000109c to i16*
  store i16 %v1_1000109c, i16* %v4_1000109c, align 2
  %v0_100010a0 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100010a0
}

define i32 @function_100010b0() local_unnamed_addr {
dec_label_pc_100010b0:
  %eax.global-to-local = alloca i32, align 4
  %v0_100010b0 = load i32, i32* @ecx, align 4
  store i32 %v0_100010b0, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v1_100010b4 = inttoptr i32 %v0_100010b0 to i8*
  store i8 1, i8* %v1_100010b4, align 1
  %v0_100010b7 = load i32, i32* @ecx, align 4
  %v1_100010b7 = load i32, i32* %eax.global-to-local, align 4
  %v2_100010b7 = add i32 %v1_100010b7, 4
  %v3_100010b7 = inttoptr i32 %v2_100010b7 to i32*
  store i32 %v0_100010b7, i32* %v3_100010b7, align 4
  %v0_100010ba = load i32, i32* @ecx, align 4
  %v1_100010ba = load i32, i32* %eax.global-to-local, align 4
  %v2_100010ba = add i32 %v1_100010ba, 8
  %v3_100010ba = inttoptr i32 %v2_100010ba to i32*
  store i32 %v0_100010ba, i32* %v3_100010ba, align 4
  %v0_100010bd = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100010bd
}

define i32 @function_100010c0(i8* %arg1) local_unnamed_addr {
dec_label_pc_100010c0:
  %v0_100010c9 = call i32 @CommandLine()
  %v0_100010cd = call i32 @CommandLine()
  %v1_100010d1 = inttoptr i32 %v0_100010c9 to i32*
  %v2_100010d1 = load i32, i32* %v1_100010d1, align 4
  %v1_100010d6 = inttoptr i32 %v0_100010cd to i32*
  %v2_100010d6 = load i32, i32* %v1_100010d6, align 4
  store i32 %v0_100010c9, i32* @ecx, align 4
  %v1_100010e4 = add i32 %v2_100010d6, 32
  %v2_100010e4 = inttoptr i32 %v1_100010e4 to i32*
  %v3_100010e4 = load i32, i32* %v2_100010e4, align 4
  store i32 %v0_100010cd, i32* @ecx, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_100222d4.19 to i32), i32* @edi, align 4
  store i32 %v2_100010d1, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* @ebx, align 4
  ret i32 %v3_100010e4
}

define i32 @function_10001100(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001100:
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001100 = load i32, i32* @ebp, align 4
  store i32 %v0_10001100, i32* %stack_var_-4, align 4
  %v4_10001100 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001100, i32* @ebp, align 4
  %v16_10001106 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v16_10001106, i32* @ecx, align 4
  %v4_10001119 = call i32 @function_10009a60(i32* nonnull %stack_var_-264, i32 %arg1, i32 260)
  %v3_1000112a = call i32 @function_10009910(i32* nonnull %stack_var_-264, i32 260)
  store i32 %v16_10001106, i32* @ecx, align 4
  %v2_10001141 = inttoptr i32 %arg2 to i32*
  %v5_10001141 = call i32 @function_10009650(i32 %v16_10001106, i32* %v2_10001141, i32 260, i32 -1)
  store i32 %v16_10001106, i32* @edx, align 4
  %v2_1000114f = call i32 @function_10009740(i32 %v16_10001106, i32 92)
  %tmp22 = bitcast i32* %stack_var_-264 to i8*
  %v4_1000115d = call i32 @__access(i8* %tmp22, i32 0)
  %v1_10001165 = icmp eq i32 %v4_1000115d, 0
  %v1_10001167 = zext i1 %v1_10001165 to i32
  %v3_10001167 = and i32 %v4_1000115d, -256
  %v4_10001167 = or i32 %v1_10001167, %v3_10001167
  %v2_1000116c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000116c, i32* @ebp, align 4
  ret i32 %v4_10001167
}

define i32 @function_10001170(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001170:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-263 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-8456 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 8452, i32* %eax.global-to-local, align 4
  %v0_10001178 = call i32 @__chkstk()
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 8192, i32* %stack_var_-8, align 4
  %v2_10001186 = ptrtoint i32* %stack_var_-8456 to i32
  store i32 %v2_10001186, i32* @ecx, align 4
  %v4_1000118d = call i32 @function_10009a60(i32* nonnull %stack_var_-8456, i32 %arg1, i32 8192)
  store i32 %v4_1000118d, i32* %eax.global-to-local, align 4
  store i32 %v2_10001186, i32* @edx, align 4
  %v2_1000119b = call i32 @function_10009740(i32 %v2_10001186, i32 92)
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_100011a9 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_100011a9, i32* @ecx, align 4
  %v4_100011b0 = call i32 @function_10009a60(i32* nonnull %stack_var_-264, i32 %arg2, i32 260)
  store i32 %v4_100011b0, i32* %eax.global-to-local, align 4
  store i32 %v2_100011a9, i32* @edx, align 4
  %v2_100011be = call i32 @function_10009740(i32 %v2_100011a9, i32 92)
  store i32 %v2_100011a9, i32* %eax.global-to-local, align 4
  %v2_100011cc = ptrtoint i32* %stack_var_-263 to i32
  store i32 %v2_100011cc, i32* @edx, align 4
  %v4_100011d0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_100011d0

dec_label_pc_100011d0:                            ; preds = %dec_label_pc_100011d0, %dec_label_pc_10001170
  %v4_100011d0 = phi i32 [ %v6_100011d0, %dec_label_pc_100011d0 ], [ %v4_100011d0.pre, %dec_label_pc_10001170 ]
  %v0_100011d2 = phi i32 [ %v1_100011d2, %dec_label_pc_100011d0 ], [ %v2_100011a9, %dec_label_pc_10001170 ]
  %v1_100011d0 = inttoptr i32 %v0_100011d2 to i8*
  %v2_100011d0 = load i8, i8* %v1_100011d0, align 1
  %v3_100011d0 = zext i8 %v2_100011d0 to i32
  %v5_100011d0 = and i32 %v4_100011d0, -256
  %v6_100011d0 = or i32 %v3_100011d0, %v5_100011d0
  store i32 %v6_100011d0, i32* @ecx, align 4
  %v1_100011d2 = add i32 %v0_100011d2, 1
  store i32 %v1_100011d2, i32* %eax.global-to-local, align 4
  %v5_100011d3 = icmp eq i8 %v2_100011d0, 0
  %v1_100011d5 = icmp eq i1 %v5_100011d3, false
  br i1 %v1_100011d5, label %dec_label_pc_100011d0, label %dec_label_pc_100011d7

dec_label_pc_100011d7:                            ; preds = %dec_label_pc_100011d0
  %v3_10001180 = ptrtoint i32* %stack_var_-8 to i32
  %v2_100011d7 = sub i32 %v1_100011d2, %v2_100011cc
  %v12_100011d7 = icmp eq i32 %v2_100011d7, 0
  store i32 %v2_100011d7, i32* %eax.global-to-local, align 4
  br i1 %v12_100011d7, label %dec_label_pc_100011f4, label %dec_label_pc_100011db

dec_label_pc_100011db:                            ; preds = %dec_label_pc_100011d7
  %v0_100011db = load i32, i32* @ebp, align 4
  %v3_100011db = add i32 %v2_100011d7, -261
  %v4_100011db = add i32 %v3_100011db, %v0_100011db
  %v5_100011db = inttoptr i32 %v4_100011db to i8*
  %v6_100011db = load i8, i8* %v5_100011db, align 1
  %v16_100011db = icmp eq i8 %v6_100011db, 92
  store i32 %v4_100011db, i32* %eax.global-to-local, align 4
  br i1 %v16_100011db, label %dec_label_pc_100011f1, label %dec_label_pc_100011ec

dec_label_pc_100011ec:                            ; preds = %dec_label_pc_100011db
  %v2_100011ec = load i8, i8* %v5_100011db, align 1
  %v12_100011ec = icmp eq i8 %v2_100011ec, 47
  %v1_100011ef = icmp eq i1 %v12_100011ec, false
  br i1 %v1_100011ef, label %dec_label_pc_100011f4, label %dec_label_pc_100011f1

dec_label_pc_100011f1:                            ; preds = %dec_label_pc_100011db, %dec_label_pc_100011ec
  store i8 0, i8* %v5_100011db, align 1
  br label %dec_label_pc_100011f4

dec_label_pc_100011f4:                            ; preds = %dec_label_pc_100011f1, %dec_label_pc_100011ec, %dec_label_pc_100011d7
  %v0_100011f4 = load i32, i32* @esi, align 4
  store i32 %v0_100011f4, i32* %stack_var_-8, align 4
  store i32 %v2_100011a9, i32* %eax.global-to-local, align 4
  store i32 %v2_10001186, i32* @ecx, align 4
  %v4_10001203 = call i32 @function_10009580(i32* nonnull %stack_var_-8456, i32* nonnull %stack_var_-264)
  store i32 %v4_10001203, i32* %eax.global-to-local, align 4
  %v1_1000120b = icmp eq i32 %v4_10001203, 0
  br i1 %v1_1000120b, label %dec_label_pc_1000125a, label %dec_label_pc_10001210

dec_label_pc_10001210:                            ; preds = %dec_label_pc_100011f4, %dec_label_pc_10001246
  %v0_10001263 = phi i32 [ %v1_10001253, %dec_label_pc_10001246 ], [ %v3_10001180, %dec_label_pc_100011f4 ]
  %v0_10001229 = phi i32 [ %v0_1000124e, %dec_label_pc_10001246 ], [ %v4_10001203, %dec_label_pc_100011f4 ]
  store i32 %v2_100011a9, i32* @ecx, align 4
  store i32 %v2_100011cc, i32* @esi, align 4
  %v4_10001220.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_10001220

dec_label_pc_10001220:                            ; preds = %dec_label_pc_10001220, %dec_label_pc_10001210
  %v4_10001220 = phi i32 [ %v6_10001220, %dec_label_pc_10001220 ], [ %v4_10001220.pre, %dec_label_pc_10001210 ]
  %v0_10001222 = phi i32 [ %v1_10001222, %dec_label_pc_10001220 ], [ %v2_100011a9, %dec_label_pc_10001210 ]
  %v1_10001220 = inttoptr i32 %v0_10001222 to i8*
  %v2_10001220 = load i8, i8* %v1_10001220, align 1
  %v3_10001220 = zext i8 %v2_10001220 to i32
  %v5_10001220 = and i32 %v4_10001220, -256
  %v6_10001220 = or i32 %v3_10001220, %v5_10001220
  %v1_10001222 = add i32 %v0_10001222, 1
  store i32 %v1_10001222, i32* @ecx, align 4
  %v5_10001223 = icmp eq i8 %v2_10001220, 0
  %v1_10001225 = icmp eq i1 %v5_10001223, false
  br i1 %v1_10001225, label %dec_label_pc_10001220, label %dec_label_pc_10001227

dec_label_pc_10001227:                            ; preds = %dec_label_pc_10001220
  %v2_10001227 = sub i32 %v1_10001222, %v2_100011cc
  store i32 %v2_10001227, i32* @ecx, align 4
  %v2_10001229 = add i32 %v2_10001227, %v0_10001229
  store i32 %v2_10001229, i32* %eax.global-to-local, align 4
  %v1_1000122b = inttoptr i32 %v2_10001229 to i8*
  %v2_1000122b = load i8, i8* %v1_1000122b, align 1
  %v3_1000122b = zext i8 %v2_1000122b to i32
  %v5_1000122b = and i32 %v2_10001227, -256
  %v6_1000122b = or i32 %v3_1000122b, %v5_1000122b
  store i32 %v6_1000122b, i32* @ecx, align 4
  %v5_1000122d = icmp eq i8 %v2_1000122b, 0
  br i1 %v5_1000122d, label %dec_label_pc_10001261, label %dec_label_pc_10001231

dec_label_pc_10001231:                            ; preds = %dec_label_pc_10001227
  %v11_10001231 = icmp eq i8 %v2_1000122b, 59
  br i1 %v11_10001231, label %dec_label_pc_10001261, label %dec_label_pc_10001236

dec_label_pc_10001236:                            ; preds = %dec_label_pc_10001231
  %v11_10001236 = icmp eq i8 %v2_1000122b, 92
  br i1 %v11_10001236, label %dec_label_pc_10001240, label %dec_label_pc_1000123b

dec_label_pc_1000123b:                            ; preds = %dec_label_pc_10001236
  %v11_1000123b = icmp eq i8 %v2_1000122b, 47
  %v1_1000123e = icmp eq i1 %v11_1000123b, false
  br i1 %v1_1000123e, label %dec_label_pc_10001246, label %dec_label_pc_10001240

dec_label_pc_10001240:                            ; preds = %dec_label_pc_1000123b, %dec_label_pc_10001236
  %v1_10001240 = add i32 %v2_10001229, 1
  %v2_10001240 = inttoptr i32 %v1_10001240 to i8*
  %v3_10001240 = load i8, i8* %v2_10001240, align 1
  %v13_10001240 = icmp eq i8 %v3_10001240, 59
  br i1 %v13_10001240, label %dec_label_pc_10001261, label %dec_label_pc_10001246

dec_label_pc_10001246:                            ; preds = %dec_label_pc_10001240, %dec_label_pc_1000123b
  store i32 %v2_100011a9, i32* @edx, align 4
  %v2_1000124c = add i32 %v0_10001263, -4
  %v3_1000124c = inttoptr i32 %v2_1000124c to i32*
  store i32 %v2_100011a9, i32* %v3_1000124c, align 4
  %v0_1000124d = load i32, i32* %eax.global-to-local, align 4
  %v2_1000124d = add i32 %v0_10001263, -8
  %v3_1000124d = inttoptr i32 %v2_1000124d to i32*
  store i32 %v0_1000124d, i32* %v3_1000124d, align 4
  %v0_1000124e = call i32 @function_10009580(i32* nonnull @5, i32* nonnull @5)
  store i32 %v0_1000124e, i32* %eax.global-to-local, align 4
  %v0_10001253 = load i32, i32* @esp, align 4
  %v1_10001253 = add i32 %v0_10001253, 8
  %v1_10001256 = icmp eq i32 %v0_1000124e, 0
  %v1_10001258 = icmp eq i1 %v1_10001256, false
  br i1 %v1_10001258, label %dec_label_pc_10001210, label %dec_label_pc_1000125a.loopexit

dec_label_pc_1000125a.loopexit:                   ; preds = %dec_label_pc_10001246
  %phitmp = and i32 %v0_1000124e, -256
  br label %dec_label_pc_1000125a

dec_label_pc_1000125a:                            ; preds = %dec_label_pc_1000125a.loopexit, %dec_label_pc_100011f4
  %v0_1000125c = phi i32 [ %v1_10001253, %dec_label_pc_1000125a.loopexit ], [ %v3_10001180, %dec_label_pc_100011f4 ]
  %v11_1000125a = phi i32 [ %phitmp, %dec_label_pc_1000125a.loopexit ], [ 0, %dec_label_pc_100011f4 ]
  store i32 %v11_1000125a, i32* %eax.global-to-local, align 4
  %v1_1000125c = inttoptr i32 %v0_1000125c to i32*
  %v2_1000125c = load i32, i32* %v1_1000125c, align 4
  store i32 %v2_1000125c, i32* @esi, align 4
  ret i32 %v11_1000125a

dec_label_pc_10001261:                            ; preds = %dec_label_pc_10001240, %dec_label_pc_10001231, %dec_label_pc_10001227
  %v1_10001261 = and i32 %v2_10001229, -256
  %v2_10001261 = or i32 %v1_10001261, 1
  store i32 %v2_10001261, i32* %eax.global-to-local, align 4
  %v1_10001263 = inttoptr i32 %v0_10001263 to i32*
  %v2_10001263 = load i32, i32* %v1_10001263, align 4
  store i32 %v2_10001263, i32* @esi, align 4
  ret i32 %v2_10001261
}

define i32 @function_10001270(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001270:
  store i32 %arg1, i32* @global_var_10028000.20, align 4
  ret i32 %arg1
}

define i32 @function_10001280(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001280:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-263 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-284 = alloca i8*, align 4
  %stack_var_-264 = alloca i8, align 1
  %v0_10001289 = load i8, i8* @global_var_10029f60.21, align 1
  %v7_10001289 = icmp eq i8 %v0_10001289, 0
  store i32 %tmp, i32* @esi, align 4
  %v1_10001295 = bitcast i32* %arg1 to i8*
  store i8 0, i8* %v1_10001295, align 1
  br i1 %v7_10001289, label %dec_label_pc_10001307, label %dec_label_pc_1000129a

dec_label_pc_1000129a:                            ; preds = %dec_label_pc_10001280
  %v0_100012a1 = call i32 @CommandLine()
  %v0_100012a5 = call i32 @CommandLine()
  %v1_100012a7 = inttoptr i32 %v0_100012a5 to i32*
  %v2_100012a7 = load i32, i32* %v1_100012a7, align 4
  store i32 %v2_100012a7, i32* @edi, align 4
  %v1_100012ac = inttoptr i32 %v0_100012a1 to i32*
  %v2_100012ac = load i32, i32* %v1_100012ac, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100222e0.18, i32 0, i32 0), i8** %stack_var_-284, align 4
  store i32 %v0_100012a5, i32* @ecx, align 4
  store i32 %v2_100012ac, i32* %stack_var_-288, align 4
  %v1_100012c0 = add i32 %v2_100012a7, 32
  %v2_100012c0 = inttoptr i32 %v1_100012c0 to i32*
  %v3_100012c0 = load i32, i32* %v2_100012c0, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_100222d4.19 to i32), i32* @ebx, align 4
  %v1_100012cb = icmp eq i32 %v3_100012c0, 0
  %v1_100012cd = icmp eq i1 %v1_100012cb, false
  br i1 %v1_100012cd, label %dec_label_pc_100012e0, label %dec_label_pc_100012cf

dec_label_pc_100012cf:                            ; preds = %dec_label_pc_1000129a
  %v4_100012bf = ptrtoint i32* %stack_var_-288 to i32
  %v3_100012d4 = call i8* @_getenv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022370.22, i32 0, i32 0))
  %v1_100012dc = icmp eq i8* %v3_100012d4, null
  br i1 %v1_100012dc, label %dec_label_pc_100012ff, label %dec_label_pc_100012e0

dec_label_pc_100012e0:                            ; preds = %dec_label_pc_100012cf, %dec_label_pc_1000129a
  store i32 %arg2, i32* @ecx, align 4
  %v0_100012ee = load i32, i32* @esi, align 4
  %v1_100012ef = inttoptr i32 %v0_100012ee to i32*
  %v6_100012ef = call i32 @function_10009a90(i32* %v1_100012ef, i32 %arg2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10022364.23, i32 0, i32 0))
  %v2_100012f7 = load i32, i32* %stack_var_-288, align 4
  store i32 %v2_100012f7, i32* @edi, align 4
  %v1_100012f8 = and i32 %v6_100012ef, -256
  %v2_100012f8 = or i32 %v1_100012f8, 1
  %v2_100012fa = load i8*, i8** %stack_var_-284, align 4
  %v3_100012fa = ptrtoint i8* %v2_100012fa to i32
  store i32 %v3_100012fa, i32* @esi, align 4
  ret i32 %v2_100012f8

dec_label_pc_100012ff:                            ; preds = %dec_label_pc_10001307.dec_label_pc_100012ff_crit_edge, %dec_label_pc_100012cf
  %v0_100012ff = phi i32 [ %v0_100012ff.pre, %dec_label_pc_10001307.dec_label_pc_100012ff_crit_edge ], [ %v4_100012bf, %dec_label_pc_100012cf ]
  %v2_100012ff = load i32, i32* %stack_var_-288, align 4
  store i32 %v2_100012ff, i32* @edi, align 4
  %v3_100012ff = add i32 %v0_100012ff, 4
  %v1_10001302 = inttoptr i32 %v3_100012ff to i32*
  %v2_10001302 = load i32, i32* %v1_10001302, align 4
  store i32 %v2_10001302, i32* @esi, align 4
  ret i32 0

dec_label_pc_10001307:                            ; preds = %dec_label_pc_10001280
  store i32 %arg2, i32* @edi, align 4
  store i8* null, i8** %stack_var_-284, align 4
  %v3_1000130e = call i32* @GetModuleHandleA(i8* null)
  %v5_1000130e = ptrtoint i32* %v3_1000130e to i32
  store i32 %v5_1000130e, i32* %stack_var_-288, align 4
  %v4_10001315 = call i32 @GetModuleFileNameA(i32* %v3_1000130e, i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v1_1000131b = icmp eq i32 %v4_10001315, 0
  br i1 %v1_1000131b, label %dec_label_pc_10001307.dec_label_pc_100012ff_crit_edge, label %dec_label_pc_1000131f

dec_label_pc_10001307.dec_label_pc_100012ff_crit_edge: ; preds = %dec_label_pc_10001307
  %v0_100012ff.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100012ff

dec_label_pc_1000131f:                            ; preds = %dec_label_pc_10001307
  %v0_1000131f = load i32, i32* @esi, align 4
  %v2_10001320 = call i32 @function_10009700(i32 %v0_1000131f)
  %v0_10001327 = load i32, i32* @esi, align 4
  %v2_10001328 = call i32 @function_10009740(i32 %v0_10001327, i32 92)
  %v0_1000133b = load i32, i32* @esi, align 4
  %v4_1000133c = bitcast i8* %stack_var_-264 to i32*
  %v7_1000133c = call i32 @function_10009ff0(i32 %v0_1000133b, i32 4, i32* %v4_1000133c, i32 260)
  %v3_10001344 = load i8, i8* %stack_var_-264, align 1
  %v15_10001344 = icmp eq i8 %v3_10001344, 92
  %v1_1000134b = icmp eq i1 %v15_10001344, false
  br i1 %v1_1000134b, label %dec_label_pc_10001365, label %dec_label_pc_1000134d

dec_label_pc_1000134d:                            ; preds = %dec_label_pc_1000131f
  %v5_10001359 = call i32 @function_100094b0(i32* nonnull %stack_var_-263, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10022360.24, i32 0, i32 0))
  %v1_10001361 = icmp eq i32 %v5_10001359, 0
  br i1 %v1_10001361, label %dec_label_pc_1000138c, label %dec_label_pc_10001365

dec_label_pc_10001365:                            ; preds = %dec_label_pc_1000134d, %dec_label_pc_1000131f
  %v0_10001367 = load i32, i32* @edi, align 4
  %v0_1000136d = load i32, i32* @esi, align 4
  %v7_1000136e = call i32 @function_10009650(i32 %v0_1000136d, i32* nonnull @global_var_100222c8.17, i32 %v0_10001367, i32 -1)
  %v0_10001375 = load i32, i32* @edi, align 4
  %v0_1000137b = load i32, i32* @esi, align 4
  %v6_1000137c = call i32 @function_10009650(i32 %v0_1000137b, i32* bitcast ([4 x i8]* @global_var_10022360.24 to i32*), i32 %v0_10001375, i32 -1)
  %v0_10001383 = load i32, i32* @esi, align 4
  %v2_10001384 = call i32 @function_10009740(i32 %v0_10001383, i32 92)
  %phitmp = and i32 %v2_10001384, -256
  %phitmp11 = or i32 %phitmp, 1
  br label %dec_label_pc_1000138c

dec_label_pc_1000138c:                            ; preds = %dec_label_pc_10001365, %dec_label_pc_1000134d
  %v0_1000138d = phi i32 [ %phitmp11, %dec_label_pc_10001365 ], [ 1, %dec_label_pc_1000134d ]
  %v2_1000138c = load i32, i32* %stack_var_-288, align 4
  store i32 %v2_1000138c, i32* @edi, align 4
  %v2_1000138f = load i8*, i8** %stack_var_-284, align 4
  %v3_1000138f = ptrtoint i8* %v2_1000138f to i32
  store i32 %v3_1000138f, i32* @esi, align 4
  ret i32 %v0_1000138d
}

define i32 @function_100013a0() local_unnamed_addr {
dec_label_pc_100013a0:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100013a0 = load i32, i32* @ebp, align 4
  store i32 %v0_100013a0, i32* %stack_var_-4, align 4
  %v4_100013a0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100013a0, i32* @ebp, align 4
  %v15_100013a3 = ptrtoint i32* %stack_var_-276 to i32
  %v3_100013b5 = call i32 @function_10001280(i32* nonnull %stack_var_-276, i32 260)
  store i32 %v15_100013a3, i32* @ecx, align 4
  %v3_100013c6 = call i32 @function_10009910(i32* nonnull %stack_var_-276, i32 260)
  store i32 %v15_100013a3, i32* @edx, align 4
  %v6_100013de = call i32 @function_10009650(i32 %v15_100013a3, i32* bitcast ([12 x i8]* @global_var_10022388.25 to i32*), i32 260, i32 -1)
  %v2_100013e9 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_100013e9, i32* @ecx, align 4
  %tmp26 = bitcast i32* %stack_var_-16 to i8**
  %tmp27 = bitcast i32* %stack_var_-276 to i8*
  store i32 %v15_100013a3, i32* %stack_var_-16, align 4
  %v7_10001403 = call i32 @__spawnv(i32 1, i8* %tmp27, i8** %tmp26)
  ret i32 %v7_10001403
}

define i32 @function_10001410(i32 %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
dec_label_pc_10001410:
  %stack_var_16 = alloca i32, align 4
  %v4_10001413 = ptrtoint i8* %arg3 to i32
  store i32 %v4_10001413, i32* @ecx, align 4
  %v8_10001425 = call i32 @function_10009ac0(i32* nonnull @global_var_10029e60.27, i32 256, i32 %v4_10001413, i32* nonnull %stack_var_16)
  %v0_10001434 = call i32 @Warning()
  %v4_1000143d = trunc i32 %arg1 to i8
  %v11_1000143d = icmp eq i8 %v4_1000143d, 0
  br i1 %v11_1000143d, label %dec_label_pc_10001472, label %dec_label_pc_10001443

dec_label_pc_10001443:                            ; preds = %dec_label_pc_10001410
  %v0_10001443 = load i32, i32* @global_var_10028000.20, align 4
  %v10_10001443 = icmp eq i32 %v0_10001443, 1
  %v1_1000144a = icmp eq i1 %v10_10001443, false
  br i1 %v1_1000144a, label %dec_label_pc_10001472, label %dec_label_pc_1000144c

dec_label_pc_1000144c:                            ; preds = %dec_label_pc_10001443
  %v0_1000144c = call i32 @CommandLine()
  %v1_10001452 = inttoptr i32 %v0_1000144c to i32*
  %v2_10001452 = load i32, i32* %v1_10001452, align 4
  store i32 %v0_1000144c, i32* @ecx, align 4
  %v1_10001456 = add i32 %v2_10001452, 40
  %v2_10001456 = inttoptr i32 %v1_10001456 to i32*
  %v3_10001456 = load i32, i32* %v2_10001456, align 4
  %v1_10001460 = icmp eq i32 %v3_10001456, 0
  %v1_10001462 = icmp eq i1 %v1_10001460, false
  br i1 %v1_10001462, label %dec_label_pc_10001472, label %dec_label_pc_10001464

dec_label_pc_10001464:                            ; preds = %dec_label_pc_1000144c
  %v3_10001464 = call i32 @function_100010c0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_10022394.29, i32 0, i32 0))
  %v1_10001469 = icmp eq i32 %v3_10001464, 0
  %v1_1000146b = icmp eq i1 %v1_10001469, false
  br i1 %v1_1000146b, label %dec_label_pc_10001472, label %dec_label_pc_1000146d

dec_label_pc_1000146d:                            ; preds = %dec_label_pc_10001464
  %v0_1000146d = call i32 @function_100013a0()
  br label %dec_label_pc_10001472

dec_label_pc_10001472:                            ; preds = %dec_label_pc_1000146d, %dec_label_pc_10001464, %dec_label_pc_1000144c, %dec_label_pc_10001443, %dec_label_pc_10001410
  %v0_10001472 = load i32, i32* @global_var_10028000.20, align 4
  %v1_10001477 = icmp eq i32 %v0_10001472, 0
  br i1 %v1_10001477, label %dec_label_pc_10001480, label %dec_label_pc_1000147b

dec_label_pc_1000147b:                            ; preds = %dec_label_pc_10001472
  %v10_1000147b = icmp eq i32 %v0_10001472, 1
  %v1_1000147e = icmp eq i1 %v10_1000147b, false
  br i1 %v1_1000147e, label %dec_label_pc_1000147b.dec_label_pc_10001493_crit_edge, label %dec_label_pc_10001480

dec_label_pc_1000147b.dec_label_pc_10001493_crit_edge: ; preds = %dec_label_pc_1000147b
  %v0_10001496.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10001493

dec_label_pc_10001480:                            ; preds = %dec_label_pc_1000147b, %dec_label_pc_10001472
  %v0_10001480 = load i32, i32* @esp, align 4
  %v1_10001480 = add i32 %v0_10001480, -4
  %v2_10001480 = inttoptr i32 %v1_10001480 to i32*
  store i32 ptrtoint (i32* @global_var_10029e60.27 to i32), i32* %v2_10001480, align 4
  %v1_10001485 = add i32 %v0_10001480, -8
  %v2_10001485 = inttoptr i32 %v1_10001485 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_100223a0.28 to i32), i32* %v2_10001485, align 4
  %v0_1000148a = call i32 @Error()
  %v0_10001490 = load i32, i32* @esp, align 4
  %v1_10001490 = add i32 %v0_10001490, 8
  br label %dec_label_pc_10001493

dec_label_pc_10001493:                            ; preds = %dec_label_pc_1000147b.dec_label_pc_10001493_crit_edge, %dec_label_pc_10001480
  %v0_10001496 = phi i32 [ %v0_10001496.pre, %dec_label_pc_1000147b.dec_label_pc_10001493_crit_edge ], [ %v1_10001490, %dec_label_pc_10001480 ]
  %v1_10001496 = inttoptr i32 %v0_10001496 to i32*
  %v2_10001496 = load i32, i32* %v1_10001496, align 4
  store i32 %v2_10001496, i32* @ebp, align 4
  ret i32 %arg2
}

define i32 @function_100014a0(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_100014a0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8456 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  store i32 8452, i32* %eax.global-to-local, align 4
  %v0_100014a8 = call i32 @__chkstk()
  %v2_100014ad = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_100014ad, i32* %eax.global-to-local, align 4
  store i32 %v2_100014ad, i32* %stack_var_-12, align 4
  %v4_100014b9 = call i32 @function_10001280(i32* nonnull %stack_var_-264, i32 260)
  store i32 %v4_100014b9, i32* %eax.global-to-local, align 4
  %v4_100014c1 = trunc i32 %v4_100014b9 to i8
  %v5_100014c1 = icmp eq i8 %v4_100014c1, 0
  %v1_100014c3 = icmp eq i1 %v5_100014c1, false
  br i1 %v1_100014c3, label %dec_label_pc_100014f6, label %dec_label_pc_100014c5

dec_label_pc_100014c5:                            ; preds = %dec_label_pc_100014a0
  %v4_100014c5 = trunc i32 %arg4 to i8
  %v17_100014c5 = icmp eq i8 %v4_100014c5, %v4_100014c1
  br i1 %v17_100014c5, label %dec_label_pc_100014e1, label %dec_label_pc_100014ca

dec_label_pc_100014ca:                            ; preds = %dec_label_pc_100014c5
  %v0_100014cf = call i32 @Warning()
  store i32 3, i32* %eax.global-to-local, align 4
  ret i32 3

dec_label_pc_100014e1:                            ; preds = %dec_label_pc_100014c5
  store i32 3, i32* %stack_var_-12, align 4
  %v5_100014ea = call i32 @function_10001410(i32 0, i32 3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @global_var_1002242c.31, i32 0, i32 0))
  store i32 %v5_100014ea, i32* %eax.global-to-local, align 4
  ret i32 %v5_100014ea

dec_label_pc_100014f6:                            ; preds = %dec_label_pc_100014a0
  %v5_100014b8 = ptrtoint i32* %stack_var_-12 to i32
  %tmp29 = ptrtoint i32* %arg1 to i32
  store i32 %tmp29, i32* @esi, align 4
  %v0_100014fa = load i32, i32* @edi, align 4
  store i32 %v0_100014fa, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %v2_100014ad, i32* @ecx, align 4
  %v4_10001507 = call i32 @function_10009a60(i32* %arg1, i32 %v2_100014ad, i32 %arg2)
  store i32 %v4_10001507, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001510

dec_label_pc_10001510:                            ; preds = %dec_label_pc_10001534, %dec_label_pc_100014f6
  %v0_10001510 = phi i32 [ %v1_1000153b, %dec_label_pc_10001534 ], [ %v5_100014b8, %dec_label_pc_100014f6 ]
  %v1_10001510 = add i32 %v0_10001510, -4
  %v2_10001510 = inttoptr i32 %v1_10001510 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022420.32 to i32), i32* %v2_10001510, align 4
  %v0_10001515 = load i32, i32* @esi, align 4
  %v2_10001515 = add i32 %v0_10001510, -8
  %v3_10001515 = inttoptr i32 %v2_10001515 to i32*
  store i32 %v0_10001515, i32* %v3_10001515, align 4
  %v2_10001516 = call i32 @function_10001100(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001516, i32* @eax, align 4
  %v0_1000151b = load i32, i32* @esp, align 4
  %v4_1000151e = trunc i32 %v2_10001516 to i8
  %v5_1000151e = icmp eq i8 %v4_1000151e, 0
  br i1 %v5_1000151e, label %dec_label_pc_10001534, label %dec_label_pc_10001522

dec_label_pc_10001522:                            ; preds = %dec_label_pc_10001510
  %v1_10001522 = add i32 %v0_1000151b, 4
  %v2_10001522 = inttoptr i32 %v1_10001522 to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_10022410.33 to i32), i32* %v2_10001522, align 4
  %v0_10001527 = load i32, i32* @esi, align 4
  %v3_10001527 = inttoptr i32 %v0_1000151b to i32*
  store i32 %v0_10001527, i32* %v3_10001527, align 4
  %v2_10001528 = call i32 @function_10001100(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001528, i32* @eax, align 4
  %v0_1000152d = load i32, i32* @esp, align 4
  %v4_10001530 = trunc i32 %v2_10001528 to i8
  %v5_10001530 = icmp eq i8 %v4_10001530, 0
  br i1 %v5_10001530, label %dec_label_pc_1000156c, label %dec_label_pc_10001534

dec_label_pc_10001534:                            ; preds = %dec_label_pc_10001522, %dec_label_pc_10001510
  %v1_10001534.in = phi i32 [ %v0_1000152d, %dec_label_pc_10001522 ], [ %v0_1000151b, %dec_label_pc_10001510 ]
  %v0_10001534 = load i32, i32* @edi, align 4
  %v2_10001534 = add i32 %v1_10001534.in, 4
  %v3_10001534 = inttoptr i32 %v2_10001534 to i32*
  store i32 %v0_10001534, i32* %v3_10001534, align 4
  %v0_10001535 = load i32, i32* @esi, align 4
  %v3_10001535 = inttoptr i32 %v1_10001534.in to i32*
  store i32 %v0_10001535, i32* %v3_10001535, align 4
  %v2_10001536 = call i32 @function_10009c90(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001536, i32* %eax.global-to-local, align 4
  %v0_1000153b = load i32, i32* @esp, align 4
  %v1_1000153b = add i32 %v0_1000153b, 8
  %v4_1000153e = trunc i32 %v2_10001536 to i8
  %v5_1000153e = icmp eq i8 %v4_1000153e, 0
  %v1_10001540 = icmp eq i1 %v5_1000153e, false
  br i1 %v1_10001540, label %dec_label_pc_10001510, label %dec_label_pc_10001542

dec_label_pc_10001542:                            ; preds = %dec_label_pc_10001534
  %v4_10001542 = trunc i32 %arg4 to i8
  %v17_10001542 = icmp eq i8 %v4_10001542, %v4_1000153e
  br i1 %v17_10001542, label %dec_label_pc_100015bf, label %dec_label_pc_10001547

dec_label_pc_10001547:                            ; preds = %dec_label_pc_10001542
  store i32 %v2_100014ad, i32* %eax.global-to-local, align 4
  %v2_1000154d = add i32 %v0_1000153b, 4
  %v3_1000154d = inttoptr i32 %v2_1000154d to i32*
  store i32 %v2_100014ad, i32* %v3_1000154d, align 4
  %v2_1000154e = inttoptr i32 %v0_1000153b to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022420.32 to i32), i32* %v2_1000154e, align 4
  %v1_10001553 = add i32 %v0_1000153b, -4
  %v2_10001553 = inttoptr i32 %v1_10001553 to i32*
  store i32 ptrtoint ([48 x i8]* @global_var_100223e0.34 to i32), i32* %v2_10001553, align 4
  %v0_10001558 = call i32 @Warning()
  store i32 %v0_10001558, i32* %eax.global-to-local, align 4
  %v0_1000155e = load i32, i32* @esp, align 4
  %v1_1000155e = add i32 %v0_1000155e, 12
  %v1_10001561 = inttoptr i32 %v1_1000155e to i32*
  %v2_10001561 = load i32, i32* %v1_10001561, align 4
  store i32 %v2_10001561, i32* @edi, align 4
  %v3_10001561 = add i32 %v0_1000155e, 16
  store i32 5, i32* %eax.global-to-local, align 4
  %v1_10001567 = inttoptr i32 %v3_10001561 to i32*
  %v2_10001567 = load i32, i32* %v1_10001567, align 4
  store i32 %v2_10001567, i32* @esi, align 4
  ret i32 5

dec_label_pc_1000156c:                            ; preds = %dec_label_pc_10001522
  store i32 %arg3, i32* @edi, align 4
  %v1_1000156f = add i32 %arg3, 100
  %v2_1000156f = inttoptr i32 %v1_1000156f to i32*
  %v3_1000156f = load i32, i32* %v2_1000156f, align 4
  store i32 %v3_1000156f, i32* %eax.global-to-local, align 4
  %v1_10001572 = add i32 %v0_1000152d, 4
  %v2_10001572 = inttoptr i32 %v1_10001572 to i32*
  store i32 8192, i32* %v2_10001572, align 4
  %v2_10001577 = ptrtoint i32* %stack_var_-8456 to i32
  %v3_1000157d = inttoptr i32 %v0_1000152d to i32*
  store i32 %v2_10001577, i32* %v3_1000157d, align 4
  %v0_1000157e = load i32, i32* %eax.global-to-local, align 4
  %v2_1000157e = add i32 %v0_1000152d, -4
  %v3_1000157e = inttoptr i32 %v2_1000157e to i32*
  store i32 %v0_1000157e, i32* %v3_1000157e, align 4
  %v3_1000157f = call i32 @GetEnvironmentVariableA(i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_1000157f, i32* %eax.global-to-local, align 4
  store i32 %v2_10001577, i32* @ecx, align 4
  %v0_1000158b = load i32, i32* @esi, align 4
  %v1_1000158b = load i32, i32* @esp, align 4
  %v2_1000158b = add i32 %v1_1000158b, -4
  %v3_1000158b = inttoptr i32 %v2_1000158b to i32*
  store i32 %v0_1000158b, i32* %v3_1000158b, align 4
  %v2_1000158c = add i32 %v1_1000158b, -8
  %v3_1000158c = inttoptr i32 %v2_1000158c to i32*
  store i32 %v2_10001577, i32* %v3_1000158c, align 4
  %v2_1000158d = call i32 @function_10001170(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000158d, i32* %eax.global-to-local, align 4
  %v0_10001592 = load i32, i32* @esp, align 4
  %v1_10001592 = add i32 %v0_10001592, 8
  %v4_10001595 = trunc i32 %v2_1000158d to i8
  %v5_10001595 = icmp eq i8 %v4_10001595, 0
  %v1_10001597 = icmp eq i1 %v5_10001595, false
  br i1 %v1_10001597, label %dec_label_pc_100015b7, label %dec_label_pc_10001599

dec_label_pc_10001599:                            ; preds = %dec_label_pc_1000156c
  %v0_10001599 = load i32, i32* @esi, align 4
  %v2_10001599 = add i32 %v0_10001592, 4
  %v3_10001599 = inttoptr i32 %v2_10001599 to i32*
  store i32 %v0_10001599, i32* %v3_10001599, align 4
  %v2_1000159a = inttoptr i32 %v0_10001592 to i32*
  store i32 ptrtoint (i32* @global_var_100223dc.35 to i32), i32* %v2_1000159a, align 4
  %v2_100015a5 = add i32 %v0_10001592, -4
  %v3_100015a5 = inttoptr i32 %v2_100015a5 to i32*
  store i32 %v2_10001577, i32* %v3_100015a5, align 4
  %v1_100015a6 = add i32 %v0_10001592, -8
  %v2_100015a6 = inttoptr i32 %v1_100015a6 to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_100223d4.36 to i32), i32* %v2_100015a6, align 4
  %v0_100015ab = load i32, i32* @edi, align 4
  %v1_100015ab = add i32 %v0_100015ab, 96
  store i32 %v1_100015ab, i32* @edi, align 4
  %v2_100015ae = add i32 %v0_10001592, -12
  %v3_100015ae = inttoptr i32 %v2_100015ae to i32*
  store i32 %v1_100015ab, i32* %v3_100015ae, align 4
  %v2_100015af = call i32 @function_10001000(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100015af, i32* %eax.global-to-local, align 4
  %v0_100015b4 = load i32, i32* @esp, align 4
  %v1_100015b4 = add i32 %v0_100015b4, 20
  br label %dec_label_pc_100015b7

dec_label_pc_100015b7:                            ; preds = %dec_label_pc_10001599, %dec_label_pc_1000156c
  %v0_100015b7 = phi i32 [ %v1_100015b4, %dec_label_pc_10001599 ], [ %v1_10001592, %dec_label_pc_1000156c ]
  %v1_100015b7 = inttoptr i32 %v0_100015b7 to i32*
  %v2_100015b7 = load i32, i32* %v1_100015b7, align 4
  store i32 %v2_100015b7, i32* @edi, align 4
  %v3_100015b7 = add i32 %v0_100015b7, 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_100015ba = inttoptr i32 %v3_100015b7 to i32*
  %v2_100015ba = load i32, i32* %v1_100015ba, align 4
  store i32 %v2_100015ba, i32* @esi, align 4
  ret i32 0

dec_label_pc_100015bf:                            ; preds = %dec_label_pc_10001542
  store i32 %v2_100014ad, i32* @ecx, align 4
  %v2_100015c5 = add i32 %v0_1000153b, 4
  %v3_100015c5 = inttoptr i32 %v2_100015c5 to i32*
  store i32 %v2_100014ad, i32* %v3_100015c5, align 4
  %v2_100015c6 = inttoptr i32 %v0_1000153b to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022420.32 to i32), i32* %v2_100015c6, align 4
  %v1_100015cb = add i32 %v0_1000153b, -4
  %v2_100015cb = inttoptr i32 %v1_100015cb to i32*
  store i32 ptrtoint ([47 x i8]* @global_var_100223a4.37 to i32), i32* %v2_100015cb, align 4
  %v1_100015d0 = add i32 %v0_1000153b, -8
  %v2_100015d0 = inttoptr i32 %v1_100015d0 to i32*
  store i32 5, i32* %v2_100015d0, align 4
  %v1_100015d2 = add i32 %v0_1000153b, -12
  %v2_100015d2 = inttoptr i32 %v1_100015d2 to i32*
  store i32 0, i32* %v2_100015d2, align 4
  %v3_100015d4 = call i32 @function_10001410(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v3_100015d4, i32* %eax.global-to-local, align 4
  %v0_100015d9 = load i32, i32* @esp, align 4
  %v1_100015d9 = add i32 %v0_100015d9, 20
  %v1_100015dc = inttoptr i32 %v1_100015d9 to i32*
  %v2_100015dc = load i32, i32* %v1_100015dc, align 4
  store i32 %v2_100015dc, i32* @edi, align 4
  %v3_100015dc = add i32 %v0_100015d9, 24
  %v1_100015dd = inttoptr i32 %v3_100015dc to i32*
  %v2_100015dd = load i32, i32* %v1_100015dd, align 4
  store i32 %v2_100015dd, i32* @esi, align 4
  ret i32 %v3_100015d4
}

define i32 @function_100015f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100015f0:
  %stack_var_-272 = alloca i8*, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100015f0 = load i32, i32* @ebp, align 4
  store i32 %v0_100015f0, i32* %stack_var_-4, align 4
  %v4_100015f0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100015f0, i32* @ebp, align 4
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_1002248c.38, i32 0, i32 0), i8** %stack_var_-272, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v5_10001617 = call i32 @function_10001280(i32* nonnull %stack_var_-264, i32 260)
  %v4_1000161f = trunc i32 %v5_10001617 to i8
  %v5_1000161f = icmp eq i8 %v4_1000161f, 0
  %v1_10001621 = icmp eq i1 %v5_1000161f, false
  br i1 %v1_10001621, label %dec_label_pc_10001639, label %dec_label_pc_10001623

dec_label_pc_10001623:                            ; preds = %dec_label_pc_100015f0
  %v6_1000162c = call i32 @function_10001410(i32 0, i32 3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @global_var_1002242c.31, i32 0, i32 0))
  %v2_10001634 = load i8*, i8** %stack_var_-272, align 4
  %v3_10001634 = ptrtoint i8* %v2_10001634 to i32
  store i32 %v3_10001634, i32* @esi, align 4
  %v2_10001637 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001637, i32* @ebp, align 4
  ret i32 %v6_1000162c

dec_label_pc_10001639:                            ; preds = %dec_label_pc_100015f0
  %v16_100015f3 = ptrtoint i32* %stack_var_-264 to i32
  %v0_10001639 = load i32, i32* @esi, align 4
  store i32 %v0_10001639, i32* @ecx, align 4
  store i32 %v16_100015f3, i32* @esi, align 4
  %v2_10001655 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001655, i32* @ebp, align 4
  ret i32 0
}

define i32 @function_10001660(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10001660:
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001660 = load i32, i32* @ebp, align 4
  store i32 %v0_10001660, i32* %stack_var_-4, align 4
  %v4_10001660 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001660, i32* @ebp, align 4
  %v16_10001666 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v16_10001666, i32* @ecx, align 4
  store i32 %v16_10001666, i32* %stack_var_-272, align 4
  %v1_10001678 = inttoptr i32 %arg3 to i8*
  store i8 0, i8* %v1_10001678, align 1
  %v0_1000167b = load i32, i32* %stack_var_-272, align 4
  %v1_1000167b = inttoptr i32 %v0_1000167b to i32*
  %v4_1000167b = call i32 @function_10001280(i32* %v1_1000167b, i32 260)
  %v4_10001683 = trunc i32 %v4_1000167b to i8
  %v5_10001683 = icmp eq i8 %v4_10001683, 0
  %v1_10001685 = icmp eq i1 %v5_10001683, false
  br i1 %v1_10001685, label %dec_label_pc_1000169c, label %dec_label_pc_10001687

dec_label_pc_10001687:                            ; preds = %dec_label_pc_10001660
  store i32 3, i32* %stack_var_-272, align 4
  %v6_10001690 = call i32 @function_10001410(i32 0, i32 3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @global_var_1002242c.31, i32 0, i32 0))
  ret i32 %v6_10001690

dec_label_pc_1000169c:                            ; preds = %dec_label_pc_10001660
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v16_10001666, i32* %stack_var_-272, align 4
  %v1_100016b2 = inttoptr i32 %arg1 to i32*
  %v6_100016b2 = call i32 @function_10009a90(i32* %v1_100016b2, i32 %arg2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @global_var_1002249c.39, i32 0, i32 0))
  ret i32 0
}

define i32 @function_100016c0() local_unnamed_addr {
dec_label_pc_100016c0:
  %stack_var_-520 = alloca i32, align 4
  %stack_var_-516 = alloca i32, align 4
  %v0_100016c9 = load i32, i32* @esi, align 4
  store i32 %v0_100016c9, i32* %stack_var_-520, align 4
  %v0_100016ca = load i32, i32* @ecx, align 4
  store i32 %v0_100016ca, i32* @esi, align 4
  %tmp14 = trunc i32 %v0_100016ca to i8
  %v9_100016cc = icmp eq i8 %tmp14, 0
  br i1 %v9_100016cc, label %dec_label_pc_1000171f, label %dec_label_pc_100016d1

dec_label_pc_100016d1:                            ; preds = %dec_label_pc_100016c0
  %v1_100016d1 = add i32 %v0_100016ca, 8
  %v2_100016d1 = inttoptr i32 %v1_100016d1 to i8*
  %v3_100016d1 = load i8, i8* %v2_100016d1, align 1
  %v10_100016d1 = icmp eq i8 %v3_100016d1, 0
  br i1 %v10_100016d1, label %dec_label_pc_100016f6, label %dec_label_pc_100016d7

dec_label_pc_100016d7:                            ; preds = %dec_label_pc_100016d1
  %v3_100016e1 = call i32 @function_10001000(i32 %v0_100016ca, i32 ptrtoint ([3 x i8]* @global_var_100222f0.40 to i32))
  %v0_100016e9 = load i32, i32* @esi, align 4
  %v1_100016e9 = add i32 %v0_100016e9, 12
  store i32 %v1_100016e9, i32* @ecx, align 4
  %v0_100016ec = call i32 @function_1000da70()
  %v2_100016f1 = load i32, i32* %stack_var_-520, align 4
  store i32 %v2_100016f1, i32* @esi, align 4
  ret i32 %v0_100016ec

dec_label_pc_100016f6:                            ; preds = %dec_label_pc_100016d1
  %v1_100016f6 = add i32 %v0_100016ca, 4
  %v2_100016f6 = inttoptr i32 %v1_100016f6 to i32*
  %v3_100016f6 = load i32, i32* %v2_100016f6, align 4
  store i32 %v3_100016f6, i32* @ecx, align 4
  %v6_1000170b = call i32 @function_10009a90(i32* nonnull %stack_var_-516, i32 512, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_100222c4.41, i32 0, i32 0))
  %tmp16 = bitcast i32* %stack_var_-516 to i8*
  %v3_10001717 = call i32 @__putenv(i8* %tmp16)
  %v0_1000171f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000171f

dec_label_pc_1000171f:                            ; preds = %dec_label_pc_100016f6, %dec_label_pc_100016c0
  %v0_1000171f = phi i32 [ %v0_1000171f.pre, %dec_label_pc_100016f6 ], [ %v0_100016ca, %dec_label_pc_100016c0 ]
  %v1_1000171f = add i32 %v0_1000171f, 12
  store i32 %v1_1000171f, i32* @ecx, align 4
  %v0_10001722 = call i32 @function_1000da70()
  %v2_10001727 = load i32, i32* %stack_var_-520, align 4
  store i32 %v2_10001727, i32* @esi, align 4
  ret i32 %v0_10001722
}

define i32 @function_10001730(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001730:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001730 = load i32, i32* @ebp, align 4
  store i32 %v0_10001730, i32* %stack_var_-4, align 4
  %v4_10001730 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001730, i32* @ebp, align 4
  %v16_10001733 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %arg1, i32* @ebx, align 4
  %v1_1000173f = call i32 @__malloc_crt(i32 %arg1)
  store i32 %v1_1000173f, i32* %eax.global-to-local, align 4
  %v0_10001744 = load i32, i32* @ebx, align 4
  store i32 %v1_1000173f, i32* @edi, align 4
  %v0_10001747 = load i32, i32* @esi, align 4
  %v1_10001749 = inttoptr i32 %v1_1000173f to i32*
  %v4_10001749 = call i32 @function_10009a60(i32* %v1_10001749, i32 %v0_10001747, i32 %v0_10001744)
  %v0_1000174e = load i32, i32* @edi, align 4
  %v1_1000174e = load i32, i32* @ebx, align 4
  %v3_1000174e = add i32 %v1_1000174e, %v0_1000174e
  store i32 %v3_1000174e, i32* @ecx, align 4
  %v1_10001754 = add i32 %v3_1000174e, -1
  %v2_10001754 = inttoptr i32 %v1_10001754 to i8*
  store i8 0, i8* %v2_10001754, align 1
  %v0_10001758 = load i32, i32* @edi, align 4
  store i32 %v0_10001758, i32* %eax.global-to-local, align 4
  %v1_1000175a = load i32, i32* @ecx, align 4
  %v7_1000175a = icmp ult i32 %v0_10001758, %v1_1000175a
  %v1_1000175c = icmp eq i1 %v7_1000175a, false
  br i1 %v1_1000175c, label %dec_label_pc_10001770.preheader, label %dec_label_pc_10001760

dec_label_pc_10001760:                            ; preds = %dec_label_pc_10001730, %dec_label_pc_10001768
  %v1_100017697 = phi i32 [ %v1_10001769, %dec_label_pc_10001768 ], [ %v1_1000175a, %dec_label_pc_10001730 ]
  %v0_10001765 = phi i32 [ %v1_10001768, %dec_label_pc_10001768 ], [ %v0_10001758, %dec_label_pc_10001730 ]
  %v1_10001760 = inttoptr i32 %v0_10001765 to i8*
  %v2_10001760 = load i8, i8* %v1_10001760, align 1
  %v12_10001760 = icmp eq i8 %v2_10001760, 92
  %v1_10001763 = icmp eq i1 %v12_10001760, false
  br i1 %v1_10001763, label %dec_label_pc_10001768, label %dec_label_pc_10001765

dec_label_pc_10001765:                            ; preds = %dec_label_pc_10001760
  store i8 47, i8* %v1_10001760, align 1
  %v0_10001768.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_10001769.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10001768

dec_label_pc_10001768:                            ; preds = %dec_label_pc_10001765, %dec_label_pc_10001760
  %v1_10001769 = phi i32 [ %v1_10001769.pre, %dec_label_pc_10001765 ], [ %v1_100017697, %dec_label_pc_10001760 ]
  %v0_10001768 = phi i32 [ %v0_10001768.pre, %dec_label_pc_10001765 ], [ %v0_10001765, %dec_label_pc_10001760 ]
  %v1_10001768 = add i32 %v0_10001768, 1
  store i32 %v1_10001768, i32* %eax.global-to-local, align 4
  %v7_10001769 = icmp ult i32 %v1_10001768, %v1_10001769
  br i1 %v7_10001769, label %dec_label_pc_10001760, label %dec_label_pc_10001770.preheader

dec_label_pc_10001770.preheader:                  ; preds = %dec_label_pc_10001768, %dec_label_pc_10001730
  %v4_100017d2 = trunc i32 %arg2 to i8
  %v11_100017d2 = icmp eq i8 %v4_100017d2, 0
  %v0_10001770.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10001770

dec_label_pc_10001770:                            ; preds = %dec_label_pc_10001770.preheader, %dec_label_pc_100017d8
  %v0_10001770 = phi i32 [ %v0_10001770.pre, %dec_label_pc_10001770.preheader ], [ %v1_100017df, %dec_label_pc_100017d8 ]
  %v1_10001770 = add i32 %v0_10001770, -4
  %v2_10001770 = inttoptr i32 %v1_10001770 to i32*
  store i32 260, i32* %v2_10001770, align 4
  store i32 %v16_10001733, i32* %eax.global-to-local, align 4
  %v0_1000177b = load i32, i32* @esi, align 4
  %v2_1000177b = add i32 %v0_10001770, -8
  %v3_1000177b = inttoptr i32 %v2_1000177b to i32*
  store i32 %v0_1000177b, i32* %v3_1000177b, align 4
  %v2_1000177c = add i32 %v0_10001770, -12
  %v3_1000177c = inttoptr i32 %v2_1000177c to i32*
  store i32 %v16_10001733, i32* %v3_1000177c, align 4
  %v2_1000177d = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000177d, i32* %eax.global-to-local, align 4
  store i32 %v16_10001733, i32* @ecx, align 4
  %v0_10001788 = load i32, i32* @esp, align 4
  %v1_10001788 = add i32 %v0_10001788, -4
  %v2_10001788 = inttoptr i32 %v1_10001788 to i32*
  store i32 260, i32* %v2_10001788, align 4
  %v2_1000178d = add i32 %v0_10001788, -8
  %v3_1000178d = inttoptr i32 %v2_1000178d to i32*
  store i32 %v16_10001733, i32* %v3_1000178d, align 4
  %v1_1000178e = call i32 @function_10009910(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000178e, i32* %eax.global-to-local, align 4
  %v0_10001793 = load i32, i32* @esp, align 4
  %v1_10001793 = add i32 %v0_10001793, -4
  %v2_10001793 = inttoptr i32 %v1_10001793 to i32*
  store i32 -1, i32* %v2_10001793, align 4
  %v1_10001795 = add i32 %v0_10001793, -8
  %v2_10001795 = inttoptr i32 %v1_10001795 to i32*
  store i32 260, i32* %v2_10001795, align 4
  store i32 %v16_10001733, i32* @edx, align 4
  %v1_100017a0 = add i32 %v0_10001793, -12
  %v2_100017a0 = inttoptr i32 %v1_100017a0 to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_1002232c.42 to i32), i32* %v2_100017a0, align 4
  %v2_100017a5 = add i32 %v0_10001793, -16
  %v3_100017a5 = inttoptr i32 %v2_100017a5 to i32*
  store i32 %v16_10001733, i32* %v3_100017a5, align 4
  %v3_100017a6 = call i32 @function_10009650(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v16_10001733, i32* %eax.global-to-local, align 4
  %v0_100017b1 = load i32, i32* @esp, align 4
  %v1_100017b1 = add i32 %v0_100017b1, -4
  %v2_100017b1 = inttoptr i32 %v1_100017b1 to i32*
  store i32 92, i32* %v2_100017b1, align 4
  %v2_100017b3 = add i32 %v0_100017b1, -8
  %v3_100017b3 = inttoptr i32 %v2_100017b3 to i32*
  store i32 %v16_10001733, i32* %v3_100017b3, align 4
  %v2_100017b4 = call i32 @function_10009740(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100017b4, i32* %eax.global-to-local, align 4
  store i32 %v16_10001733, i32* @ecx, align 4
  %v0_100017bf = load i32, i32* @esp, align 4
  %v1_100017bf = add i32 %v0_100017bf, -4
  %v2_100017bf = inttoptr i32 %v1_100017bf to i32*
  store i32 0, i32* %v2_100017bf, align 4
  %v2_100017c1 = add i32 %v0_100017bf, -8
  %v3_100017c1 = inttoptr i32 %v2_100017c1 to i32*
  store i32 %v16_10001733, i32* %v3_100017c1, align 4
  %v2_100017c2 = call i32 @__access(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100017c2, i32* @eax, align 4
  %v0_100017c7 = load i32, i32* @esp, align 4
  %v1_100017c7 = add i32 %v0_100017c7, 52
  %v1_100017ca = icmp eq i32 %v2_100017c2, 0
  br i1 %v1_100017ca, label %dec_label_pc_100018c0, label %dec_label_pc_100017d2

dec_label_pc_100017d2:                            ; preds = %dec_label_pc_10001770
  br i1 %v11_100017d2, label %dec_label_pc_100017e6, label %dec_label_pc_100017d8

dec_label_pc_100017d8:                            ; preds = %dec_label_pc_100017d2
  %v0_100017d8 = load i32, i32* @ebx, align 4
  %v2_100017d8 = add i32 %v0_100017c7, 48
  %v3_100017d8 = inttoptr i32 %v2_100017d8 to i32*
  store i32 %v0_100017d8, i32* %v3_100017d8, align 4
  %v0_100017d9 = load i32, i32* @esi, align 4
  %v2_100017d9 = add i32 %v0_100017c7, 44
  %v3_100017d9 = inttoptr i32 %v2_100017d9 to i32*
  store i32 %v0_100017d9, i32* %v3_100017d9, align 4
  %v2_100017da = call i32 @function_10009c90(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100017da, i32* %eax.global-to-local, align 4
  %v0_100017df = load i32, i32* @esp, align 4
  %v1_100017df = add i32 %v0_100017df, 8
  %v4_100017e2 = trunc i32 %v2_100017da to i8
  %v5_100017e2 = icmp eq i8 %v4_100017e2, 0
  %v1_100017e4 = icmp eq i1 %v5_100017e2, false
  br i1 %v1_100017e4, label %dec_label_pc_10001770, label %dec_label_pc_100017e6

dec_label_pc_100017e6:                            ; preds = %dec_label_pc_100017d8, %dec_label_pc_100017d2
  %v1_100017e6 = phi i32 [ %v1_100017df, %dec_label_pc_100017d8 ], [ %v1_100017c7, %dec_label_pc_100017d2 ]
  %v0_100017e6 = load i32, i32* @ebx, align 4
  %v2_100017e6 = add i32 %v1_100017e6, -4
  %v3_100017e6 = inttoptr i32 %v2_100017e6 to i32*
  store i32 %v0_100017e6, i32* %v3_100017e6, align 4
  %v0_100017e7 = load i32, i32* @edi, align 4
  %v2_100017e7 = add i32 %v1_100017e6, -8
  %v3_100017e7 = inttoptr i32 %v2_100017e7 to i32*
  store i32 %v0_100017e7, i32* %v3_100017e7, align 4
  %v0_100017e8 = load i32, i32* @esi, align 4
  %v2_100017e8 = add i32 %v1_100017e6, -12
  %v3_100017e8 = inttoptr i32 %v2_100017e8 to i32*
  store i32 %v0_100017e8, i32* %v3_100017e8, align 4
  %v2_100017e9 = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100017e9, i32* %eax.global-to-local, align 4
  %v0_100017ee = load i32, i32* @esp, align 4
  %v1_100017ee = add i32 %v0_100017ee, -4
  %v2_100017ee = inttoptr i32 %v1_100017ee to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_100224c0.43 to i32), i32* %v2_100017ee, align 4
  %v0_100017f3 = load i32, i32* @esi, align 4
  %v2_100017f3 = add i32 %v0_100017ee, -8
  %v3_100017f3 = inttoptr i32 %v2_100017f3 to i32*
  store i32 %v0_100017f3, i32* %v3_100017f3, align 4
  %v0_100017f4 = load i32, i32* @esi, align 4
  %v1_100017f4 = load i32, i32* @ebx, align 4
  %v3_100017f4 = add i32 %v0_100017f4, -1
  %v4_100017f4 = add i32 %v3_100017f4, %v1_100017f4
  %v5_100017f4 = inttoptr i32 %v4_100017f4 to i8*
  store i8 0, i8* %v5_100017f4, align 1
  %v0_100017f9 = call i32 @function_10009640()
  store i32 %v0_100017f9, i32* %eax.global-to-local, align 4
  %v0_100017fe = load i32, i32* @esp, align 4
  %v1_100017fe = add i32 %v0_100017fe, 20
  %v1_10001804 = icmp eq i32 %v0_100017f9, 0
  br i1 %v1_10001804, label %dec_label_pc_100018a5, label %dec_label_pc_1000180c

dec_label_pc_1000180c:                            ; preds = %dec_label_pc_100017e6
  %v1_1000180c = add i32 %v0_100017fe, 16
  %v2_1000180c = inttoptr i32 %v1_1000180c to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_100224b8.44 to i32), i32* %v2_1000180c, align 4
  %v2_10001811 = add i32 %v0_100017fe, 12
  %v3_10001811 = inttoptr i32 %v2_10001811 to i32*
  store i32 %v0_100017f9, i32* %v3_10001811, align 4
  %v1_10001812 = inttoptr i32 %v0_100017f9 to i8*
  %v3_10001812 = call i32 (i8*, i8*, ...) @_sprintf(i8* %v1_10001812, i8* bitcast (i32* @5 to i8*))
  store i32 %v0_100017f9, i32* %eax.global-to-local, align 4
  %v0_1000181a = load i32, i32* @esi, align 4
  %v1_1000181e = load i32, i32* @ebx, align 4
  %v2_1000181c = sub i32 -9, %v0_100017f9
  %v3_1000181e = add i32 %v2_1000181c, %v0_1000181a
  %v4_1000181e = add i32 %v3_1000181e, %v1_1000181e
  store i32 %v4_1000181e, i32* @ecx, align 4
  %v1_10001822 = load i32, i32* @esp, align 4
  %v2_10001822 = add i32 %v1_10001822, -4
  %v3_10001822 = inttoptr i32 %v2_10001822 to i32*
  store i32 %v4_1000181e, i32* %v3_10001822, align 4
  %v0_10001823 = load i32, i32* %eax.global-to-local, align 4
  %v1_10001823 = add i32 %v0_10001823, 9
  %v2_10001826 = add i32 %v1_10001822, -8
  %v3_10001826 = inttoptr i32 %v2_10001826 to i32*
  store i32 %v1_10001823, i32* %v3_10001826, align 4
  %v0_10001827 = load i32, i32* %eax.global-to-local, align 4
  %v1_10001827 = add i32 %v0_10001827, 6
  store i32 %v1_10001827, i32* %eax.global-to-local, align 4
  %v2_1000182a = add i32 %v1_10001822, -12
  %v3_1000182a = inttoptr i32 %v2_1000182a to i32*
  store i32 %v1_10001827, i32* %v3_1000182a, align 4
  %v1_1000182b = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_1000182b = ptrtoint i32* %v1_1000182b to i32
  store i32 %v3_1000182b, i32* %eax.global-to-local, align 4
  %v0_10001830 = load i32, i32* @esp, align 4
  %v1_10001830 = add i32 %v0_10001830, 20
  br label %dec_label_pc_10001833

dec_label_pc_10001833:                            ; preds = %dec_label_pc_10001897, %dec_label_pc_1000180c
  %v0_10001833 = phi i32 [ %v1_1000189e, %dec_label_pc_10001897 ], [ %v1_10001830, %dec_label_pc_1000180c ]
  %v1_10001833 = add i32 %v0_10001833, -4
  %v2_10001833 = inttoptr i32 %v1_10001833 to i32*
  store i32 260, i32* %v2_10001833, align 4
  store i32 %v16_10001733, i32* %eax.global-to-local, align 4
  %v0_1000183e = load i32, i32* @esi, align 4
  %v2_1000183e = add i32 %v0_10001833, -8
  %v3_1000183e = inttoptr i32 %v2_1000183e to i32*
  store i32 %v0_1000183e, i32* %v3_1000183e, align 4
  %v2_1000183f = add i32 %v0_10001833, -12
  %v3_1000183f = inttoptr i32 %v2_1000183f to i32*
  store i32 %v16_10001733, i32* %v3_1000183f, align 4
  %v2_10001840 = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001840, i32* %eax.global-to-local, align 4
  store i32 %v16_10001733, i32* @ecx, align 4
  %v0_1000184b = load i32, i32* @esp, align 4
  %v1_1000184b = add i32 %v0_1000184b, -4
  %v2_1000184b = inttoptr i32 %v1_1000184b to i32*
  store i32 260, i32* %v2_1000184b, align 4
  %v2_10001850 = add i32 %v0_1000184b, -8
  %v3_10001850 = inttoptr i32 %v2_10001850 to i32*
  store i32 %v16_10001733, i32* %v3_10001850, align 4
  %v1_10001851 = call i32 @function_10009910(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10001851, i32* %eax.global-to-local, align 4
  %v0_10001856 = load i32, i32* @esp, align 4
  %v1_10001856 = add i32 %v0_10001856, -4
  %v2_10001856 = inttoptr i32 %v1_10001856 to i32*
  store i32 -1, i32* %v2_10001856, align 4
  %v1_10001858 = add i32 %v0_10001856, -8
  %v2_10001858 = inttoptr i32 %v1_10001858 to i32*
  store i32 260, i32* %v2_10001858, align 4
  store i32 %v16_10001733, i32* @edx, align 4
  %v1_10001863 = add i32 %v0_10001856, -12
  %v2_10001863 = inttoptr i32 %v1_10001863 to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_1002232c.42 to i32), i32* %v2_10001863, align 4
  %v2_10001868 = add i32 %v0_10001856, -16
  %v3_10001868 = inttoptr i32 %v2_10001868 to i32*
  store i32 %v16_10001733, i32* %v3_10001868, align 4
  %v3_10001869 = call i32 @function_10009650(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v16_10001733, i32* %eax.global-to-local, align 4
  %v0_10001874 = load i32, i32* @esp, align 4
  %v1_10001874 = add i32 %v0_10001874, -4
  %v2_10001874 = inttoptr i32 %v1_10001874 to i32*
  store i32 92, i32* %v2_10001874, align 4
  %v2_10001876 = add i32 %v0_10001874, -8
  %v3_10001876 = inttoptr i32 %v2_10001876 to i32*
  store i32 %v16_10001733, i32* %v3_10001876, align 4
  %v2_10001877 = call i32 @function_10009740(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001877, i32* %eax.global-to-local, align 4
  store i32 %v16_10001733, i32* @ecx, align 4
  %v0_10001882 = load i32, i32* @esp, align 4
  %v1_10001882 = add i32 %v0_10001882, -4
  %v2_10001882 = inttoptr i32 %v1_10001882 to i32*
  store i32 0, i32* %v2_10001882, align 4
  %v2_10001884 = add i32 %v0_10001882, -8
  %v3_10001884 = inttoptr i32 %v2_10001884 to i32*
  store i32 %v16_10001733, i32* %v3_10001884, align 4
  %v2_10001885 = call i32 @__access(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001885, i32* @eax, align 4
  %v0_1000188a = load i32, i32* @esp, align 4
  %v1_1000188a = add i32 %v0_1000188a, 52
  %v1_1000188d = icmp eq i32 %v2_10001885, 0
  br i1 %v1_1000188d, label %dec_label_pc_100018c0, label %dec_label_pc_10001891

dec_label_pc_10001891:                            ; preds = %dec_label_pc_10001833
  br i1 %v11_100017d2, label %dec_label_pc_100018a5, label %dec_label_pc_10001897

dec_label_pc_10001897:                            ; preds = %dec_label_pc_10001891
  %v0_10001897 = load i32, i32* @ebx, align 4
  %v2_10001897 = add i32 %v0_1000188a, 48
  %v3_10001897 = inttoptr i32 %v2_10001897 to i32*
  store i32 %v0_10001897, i32* %v3_10001897, align 4
  %v0_10001898 = load i32, i32* @esi, align 4
  %v2_10001898 = add i32 %v0_1000188a, 44
  %v3_10001898 = inttoptr i32 %v2_10001898 to i32*
  store i32 %v0_10001898, i32* %v3_10001898, align 4
  %v2_10001899 = call i32 @function_10009c90(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001899, i32* %eax.global-to-local, align 4
  %v0_1000189e = load i32, i32* @esp, align 4
  %v1_1000189e = add i32 %v0_1000189e, 8
  %v4_100018a1 = trunc i32 %v2_10001899 to i8
  %v5_100018a1 = icmp eq i8 %v4_100018a1, 0
  %v1_100018a3 = icmp eq i1 %v5_100018a1, false
  br i1 %v1_100018a3, label %dec_label_pc_10001833, label %dec_label_pc_100018a5

dec_label_pc_100018a5:                            ; preds = %dec_label_pc_10001897, %dec_label_pc_10001891, %dec_label_pc_100017e6
  %v1_100018a5 = phi i32 [ %v1_100017fe, %dec_label_pc_100017e6 ], [ %v1_1000189e, %dec_label_pc_10001897 ], [ %v1_1000188a, %dec_label_pc_10001891 ]
  %v0_100018a5 = load i32, i32* @edi, align 4
  %v2_100018a5 = add i32 %v1_100018a5, -4
  %v3_100018a5 = inttoptr i32 %v2_100018a5 to i32*
  store i32 %v0_100018a5, i32* %v3_100018a5, align 4
  %v1_100018a6 = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100018a6, i32* %eax.global-to-local, align 4
  %v0_100018ab = load i32, i32* @esp, align 4
  %v1_100018ab = add i32 %v0_100018ab, -4
  %v2_100018ab = inttoptr i32 %v1_100018ab to i32*
  store i32 0, i32* %v2_100018ab, align 4
  %v1_100018ad = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100018ad, i32* %eax.global-to-local, align 4
  %v0_100018b2 = load i32, i32* @esp, align 4
  %v1_100018b2 = add i32 %v0_100018b2, 8
  %v1_100018b5 = inttoptr i32 %v1_100018b2 to i32*
  %v2_100018b5 = load i32, i32* %v1_100018b5, align 4
  store i32 %v2_100018b5, i32* @edi, align 4
  %v3_100018b5 = add i32 %v0_100018b2, 12
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_100018bb = inttoptr i32 %v3_100018b5 to i32*
  %v2_100018bb = load i32, i32* %v1_100018bb, align 4
  store i32 %v2_100018bb, i32* @ebx, align 4
  %v2_100018be = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100018be, i32* @ebp, align 4
  ret i32 1

dec_label_pc_100018c0:                            ; preds = %dec_label_pc_10001770, %dec_label_pc_10001833
  %v1_100018c0 = phi i32 [ %v1_1000188a, %dec_label_pc_10001833 ], [ %v1_100017c7, %dec_label_pc_10001770 ]
  %v0_100018c0 = load i32, i32* @edi, align 4
  %v2_100018c0 = add i32 %v1_100018c0, -4
  %v3_100018c0 = inttoptr i32 %v2_100018c0 to i32*
  store i32 %v0_100018c0, i32* %v3_100018c0, align 4
  %v1_100018c1 = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100018c1, i32* %eax.global-to-local, align 4
  %v0_100018c6 = load i32, i32* @esp, align 4
  %v1_100018c6 = add i32 %v0_100018c6, -4
  %v2_100018c6 = inttoptr i32 %v1_100018c6 to i32*
  store i32 0, i32* %v2_100018c6, align 4
  %v1_100018c8 = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100018c8, i32* %eax.global-to-local, align 4
  %v0_100018cd = load i32, i32* @esp, align 4
  %v1_100018cd = add i32 %v0_100018cd, 8
  %v1_100018d0 = inttoptr i32 %v1_100018cd to i32*
  %v2_100018d0 = load i32, i32* %v1_100018d0, align 4
  store i32 %v2_100018d0, i32* @edi, align 4
  %v3_100018d0 = add i32 %v0_100018cd, 12
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_100018d3 = inttoptr i32 %v3_100018d0 to i32*
  %v2_100018d3 = load i32, i32* %v1_100018d3, align 4
  store i32 %v2_100018d3, i32* @ebx, align 4
  %v2_100018d6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100018d6, i32* @ebp, align 4
  ret i32 0
}

define i32 @function_100018e0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_100018e0:
  %stack_var_-32 = alloca i8*, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-24 = alloca i8*, align 4
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_100018e3 = load i32, i32* @esi, align 4
  store i32 %v0_100018e3, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_100018e7 = add i32 %arg1, 4
  %v2_100018e7 = inttoptr i32 %v1_100018e7 to i8*
  %v3_100018e7 = load i8, i8* %v2_100018e7, align 1
  %v10_100018e7 = icmp eq i8 %v3_100018e7, 0
  br i1 %v10_100018e7, label %dec_label_pc_1000194c, label %dec_label_pc_100018ed

dec_label_pc_100018ed:                            ; preds = %dec_label_pc_100018e0
  %v1_100018ed = inttoptr i32 %arg1 to i32*
  %v2_100018ed = load i32, i32* %v1_100018ed, align 4
  %v1_100018ef = icmp eq i32 %v2_100018ed, 0
  %v1_100018f1 = icmp eq i1 %v1_100018ef, false
  br i1 %v1_100018f1, label %dec_label_pc_10001906, label %dec_label_pc_100018f3

dec_label_pc_100018f3:                            ; preds = %dec_label_pc_100018ed
  %v4_100018fa = inttoptr i32 %v2_100018ed to i8*
  store i8* %v4_100018fa, i8** %stack_var_-20, align 4
  %v7_100018fb = call i32 @function_10001410(i32 %v2_100018ed, i32 1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @global_var_1002266c.45, i32 0, i32 0))
  %v2_10001903 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10001903, i32* @esi, align 4
  ret i32 %v7_100018fb

dec_label_pc_10001906:                            ; preds = %dec_label_pc_100018ed
  %v4_1000190c = call i32 @function_10001100(i32 %v2_100018ed, i32 ptrtoint ([13 x i8]* @global_var_1002232c.42 to i32))
  %v4_10001914 = trunc i32 %v4_1000190c to i8
  %v5_10001914 = icmp eq i8 %v4_10001914, 0
  %v1_10001916 = icmp eq i1 %v5_10001914, false
  br i1 %v1_10001916, label %dec_label_pc_10001934, label %dec_label_pc_10001918

dec_label_pc_10001918:                            ; preds = %dec_label_pc_10001906
  store i8* getelementptr inbounds ([99 x i8], [99 x i8]* @global_var_10022608.46, i32 0, i32 0), i8** %stack_var_-20, align 4
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-24, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v6_10001929 = call i32 @function_10001410(i32 1, i32 1, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @global_var_10022608.46, i32 0, i32 0))
  %v2_10001931 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10001931, i32* @esi, align 4
  ret i32 %v6_10001929

dec_label_pc_10001934:                            ; preds = %dec_label_pc_10001906
  store i32 %arg3, i32* @ecx, align 4
  %v0_10001937 = load i32, i32* @esi, align 4
  %v1_10001937 = inttoptr i32 %v0_10001937 to i32*
  %v2_10001937 = load i32, i32* %v1_10001937, align 4
  %v4_1000193e = inttoptr i32 %arg2 to i8*
  store i8* %v4_1000193e, i8** %stack_var_-20, align 4
  %tmp55 = inttoptr i32 %arg2 to i32*
  %v7_1000193f = call i32 @function_10009a60(i32* %tmp55, i32 %v2_10001937, i32 %arg3)
  %v2_10001949 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10001949, i32* @esi, align 4
  ret i32 0

dec_label_pc_1000194c:                            ; preds = %dec_label_pc_100018e0
  %v0_10001954 = call i32 @CommandLine()
  store i32 %v0_10001954, i32* @edi, align 4
  %v0_10001958 = call i32 @CommandLine()
  %v0_1000195a = load i32, i32* @edi, align 4
  %v1_1000195a = inttoptr i32 %v0_1000195a to i32*
  %v2_1000195a = load i32, i32* %v1_1000195a, align 4
  store i32 %v0_10001958, i32* @ebx, align 4
  %v1_1000195e = add i32 %v2_1000195a, 32
  %v2_1000195e = inttoptr i32 %v1_1000195e to i32*
  %v3_1000195e = load i32, i32* %v2_1000195e, align 4
  %v1_10001961 = inttoptr i32 %v0_10001958 to i32*
  %v2_10001961 = load i32, i32* %v1_10001961, align 4
  store i8* null, i8** %stack_var_-20, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100222e0.18, i32 0, i32 0), i8** %stack_var_-24, align 4
  store i32 %v0_1000195a, i32* @ecx, align 4
  %v1_1000196e = add i32 %v2_10001961, 32
  %v2_1000196e = inttoptr i32 %v1_1000196e to i32*
  %v3_1000196e = load i32, i32* %v2_1000196e, align 4
  store i32 %v3_1000196e, i32* @edx, align 4
  store i32 %v3_1000195e, i32* %stack_var_-28, align 4
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_100222d4.19, i32 0, i32 0), i8** %stack_var_-32, align 4
  %v4_10001972 = ptrtoint i8** %stack_var_-32 to i32
  store i32 %v0_10001958, i32* @ecx, align 4
  store i32 %v3_1000195e, i32* @esi, align 4
  %v1_1000197d = icmp eq i32 %v3_1000195e, 0
  br i1 %v1_1000197d, label %dec_label_pc_100019d6, label %dec_label_pc_10001981

dec_label_pc_10001981:                            ; preds = %dec_label_pc_1000194c
  %v4_10001987 = call i32 @function_10001100(i32 %v3_1000195e, i32 ptrtoint ([13 x i8]* @global_var_1002232c.42 to i32))
  %v4_1000198f = trunc i32 %v4_10001987 to i8
  %v5_1000198f = icmp eq i8 %v4_1000198f, 0
  br i1 %v5_1000198f, label %dec_label_pc_100019ad, label %dec_label_pc_10001993

dec_label_pc_10001993:                            ; preds = %dec_label_pc_10001981
  store i32 %arg3, i32* @eax, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v7_1000199e = call i32 @function_10009e40(i32 %arg2, i32 %arg3, i32 %v3_1000195e, i32 0)
  %v2_100019a6 = load i8*, i8** %stack_var_-32, align 4
  %v3_100019a6 = ptrtoint i8* %v2_100019a6 to i32
  store i32 %v3_100019a6, i32* @edi, align 4
  %v2_100019a7 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_100019a7, i32* @ebx, align 4
  %v2_100019aa = load i8*, i8** %stack_var_-24, align 4
  %v3_100019aa = ptrtoint i8* %v2_100019aa to i32
  store i32 %v3_100019aa, i32* @esi, align 4
  %v2_100019ab = load i8*, i8** %stack_var_-20, align 4
  %v3_100019ab = ptrtoint i8* %v2_100019ab to i32
  store i32 %v3_100019ab, i32* @ebp, align 4
  ret i32 0

dec_label_pc_100019ad:                            ; preds = %dec_label_pc_10001981
  %v3_100019ad = load i32, i32* %stack_var_4, align 4
  %v1_100019b0 = add i32 %v3_100019ad, 8
  %v2_100019b0 = inttoptr i32 %v1_100019b0 to i8*
  %v3_100019b0 = load i8, i8* %v2_100019b0, align 1
  %v10_100019b0 = icmp eq i8 %v3_100019b0, 0
  br i1 %v10_100019b0, label %dec_label_pc_10001aae, label %dec_label_pc_100019ba

dec_label_pc_100019ba:                            ; preds = %dec_label_pc_100019ad
  store i32 %arg2, i32* @ecx, align 4
  %tmp56 = inttoptr i32 %arg2 to i32*
  %v7_100019c7 = call i32 @function_10009a60(i32* %tmp56, i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32 %arg3)
  %v2_100019cf = load i8*, i8** %stack_var_-32, align 4
  %v3_100019cf = ptrtoint i8* %v2_100019cf to i32
  store i32 %v3_100019cf, i32* @edi, align 4
  %v2_100019d0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_100019d0, i32* @ebx, align 4
  %v2_100019d3 = load i8*, i8** %stack_var_-24, align 4
  %v3_100019d3 = ptrtoint i8* %v2_100019d3 to i32
  store i32 %v3_100019d3, i32* @esi, align 4
  %v2_100019d4 = load i8*, i8** %stack_var_-20, align 4
  %v3_100019d4 = ptrtoint i8* %v2_100019d4 to i32
  store i32 %v3_100019d4, i32* @ebp, align 4
  ret i32 0

dec_label_pc_100019d6:                            ; preds = %dec_label_pc_1000194c
  store i32 %arg1, i32* @ebx, align 4
  %v1_100019d9 = add i32 %arg1, 8
  %v2_100019d9 = inttoptr i32 %v1_100019d9 to i8*
  %v3_100019d9 = load i8, i8* %v2_100019d9, align 1
  %v10_100019d9 = icmp eq i8 %v3_100019d9, 0
  br i1 %v10_100019d9, label %dec_label_pc_100019fb, label %dec_label_pc_100019df

dec_label_pc_100019df:                            ; preds = %dec_label_pc_100019d6
  %tmp57 = inttoptr i32 %arg2 to i32*
  %v7_100019ec = call i32 @function_10009a60(i32* %tmp57, i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32 %arg3)
  br label %dec_label_pc_100019f4

dec_label_pc_100019f4:                            ; preds = %dec_label_pc_10001a94, %dec_label_pc_10001a59, %dec_label_pc_10001a40, %dec_label_pc_10001a1e, %dec_label_pc_100019df
  %v1_100019f4 = bitcast i8** %stack_var_-32 to i32*
  %v2_100019f4 = load i32, i32* %v1_100019f4, align 4
  store i32 %v2_100019f4, i32* @edi, align 4
  %v3_100019f4 = add i32 %v4_10001972, 4
  %v1_100019f5 = inttoptr i32 %v3_100019f4 to i32*
  %v2_100019f5 = load i32, i32* %v1_100019f5, align 4
  store i32 %v2_100019f5, i32* @ebx, align 4
  %v3_100019f5 = add i32 %v4_10001972, 8
  %v1_100019f8 = inttoptr i32 %v3_100019f5 to i32*
  %v2_100019f8 = load i32, i32* %v1_100019f8, align 4
  store i32 %v2_100019f8, i32* @esi, align 4
  %v3_100019f8 = add i32 %v4_10001972, 12
  %v1_100019f9 = inttoptr i32 %v3_100019f8 to i32*
  %v2_100019f9 = load i32, i32* %v1_100019f9, align 4
  store i32 %v2_100019f9, i32* @ebp, align 4
  ret i32 0

dec_label_pc_100019fb:                            ; preds = %dec_label_pc_100019d6
  %v0_100019fb = load i8, i8* @global_var_10029f70.48, align 1
  store i32 %arg3, i32* @edi, align 4
  store i32 %arg2, i32* @esi, align 4
  store i32 1, i32* %stack_var_4, align 4
  %v2_10001a0a = icmp eq i8 %v0_100019fb, 0
  br i1 %v2_10001a0a, label %dec_label_pc_10001a2f, label %dec_label_pc_10001a1e

dec_label_pc_10001a1e:                            ; preds = %dec_label_pc_100019fb
  %v2_10001a0e = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_10001a0e, i32* @ecx, align 4
  %v3_10001a23 = call i32 @function_10001730(i32 %arg1, i32 %arg2)
  %v1_10001a2b = icmp eq i32 %v3_10001a23, 0
  br i1 %v1_10001a2b, label %dec_label_pc_100019f4, label %dec_label_pc_10001a2f

dec_label_pc_10001a2f:                            ; preds = %dec_label_pc_100019fb, %dec_label_pc_10001a1e
  %v3_10001a34 = call i8* @_getenv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022370.22, i32 0, i32 0))
  %v4_10001a34 = ptrtoint i8* %v3_10001a34 to i32
  store i32 %v4_10001a34, i32* @eax, align 4
  %v1_10001a3c = icmp eq i8* %v3_10001a34, null
  br i1 %v1_10001a3c, label %dec_label_pc_10001a2f.dec_label_pc_10001a59_crit_edge, label %dec_label_pc_10001a40

dec_label_pc_10001a2f.dec_label_pc_10001a59_crit_edge: ; preds = %dec_label_pc_10001a2f
  br label %dec_label_pc_10001a59

dec_label_pc_10001a40:                            ; preds = %dec_label_pc_10001a2f
  %v0_10001a43 = load i32, i32* @edi, align 4
  %v0_10001a44 = load i32, i32* @esi, align 4
  %v7_10001a45 = call i32 @function_10009e40(i32 %v0_10001a44, i32 %v0_10001a43, i32 %v4_10001a34, i32 0)
  %v0_10001a4c = load i32, i32* @edi, align 4
  %v2_10001a4d = call i32 @function_10001730(i32 %v0_10001a4c, i32 0)
  %v1_10001a55 = icmp eq i32 %v2_10001a4d, 0
  br i1 %v1_10001a55, label %dec_label_pc_100019f4, label %dec_label_pc_10001a59

dec_label_pc_10001a59:                            ; preds = %dec_label_pc_10001a2f.dec_label_pc_10001a59_crit_edge, %dec_label_pc_10001a40
  %v0_10001a5e = call i32 @Warning()
  %v0_10001a64 = load i32, i32* @ebx, align 4
  %v1_10001a64 = inttoptr i32 %v0_10001a64 to i32*
  %v2_10001a64 = load i32, i32* %v1_10001a64, align 4
  store i32 %v2_10001a64, i32* @eax, align 4
  %v1_10001a6b = icmp eq i32 %v2_10001a64, 0
  %v0_10001a77 = load i32, i32* @edi, align 4
  %v0_10001a78 = load i32, i32* @esi, align 4
  %v4_10001a79 = select i1 %v1_10001a6b, i32 ptrtoint (i32* @global_var_100225b8.50 to i32), i32 %v2_10001a64
  %v7_10001a79 = call i32 @function_10009e40(i32 %v0_10001a78, i32 %v0_10001a77, i32 %v4_10001a79, i32 0)
  %v0_10001a83 = load i32, i32* @edi, align 4
  %v4_10001a84 = call i32 @function_10001730(i32 %v0_10001a83, i32 1)
  %v1_10001a8c = icmp eq i32 %v4_10001a84, 0
  br i1 %v1_10001a8c, label %dec_label_pc_100019f4, label %dec_label_pc_10001a94

dec_label_pc_10001a94:                            ; preds = %dec_label_pc_10001a59
  %v0_10001a94 = load i32, i32* @edi, align 4
  %v0_10001a95 = load i32, i32* @esi, align 4
  %v4_10001a96 = call i32 @function_10001060(i32 %v0_10001a95, i32 %v0_10001a94)
  %v0_10001a9d = load i32, i32* @edi, align 4
  %v3_10001a9e = call i32 @function_10001730(i32 %v0_10001a9d, i32 1)
  %v1_10001aa6 = icmp eq i32 %v3_10001a9e, 0
  br i1 %v1_10001aa6, label %dec_label_pc_100019f4, label %dec_label_pc_10001aae

dec_label_pc_10001aae:                            ; preds = %dec_label_pc_100019ad, %dec_label_pc_10001a94
  %v5_10001ac1 = call i32 @function_10001410(i32 1, i32 1, i8* getelementptr inbounds ([232 x i8], [232 x i8]* @global_var_100224d0.51, i32 0, i32 0))
  %v2_10001ac9 = load i8*, i8** %stack_var_-32, align 4
  %v3_10001ac9 = ptrtoint i8* %v2_10001ac9 to i32
  store i32 %v3_10001ac9, i32* @edi, align 4
  %v2_10001aca = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10001aca, i32* @ebx, align 4
  %v2_10001acb = load i8*, i8** %stack_var_-24, align 4
  %v3_10001acb = ptrtoint i8* %v2_10001acb to i32
  store i32 %v3_10001acb, i32* @esi, align 4
  %v2_10001acc = load i8*, i8** %stack_var_-20, align 4
  %v3_10001acc = ptrtoint i8* %v2_10001acc to i32
  store i32 %v3_10001acc, i32* @ebp, align 4
  ret i32 %v5_10001ac1
}

define i32 @function_10001ad0() local_unnamed_addr {
dec_label_pc_10001ad0:
  %stack_var_-4 = alloca i32, align 4
  %v0_10001ad0 = load i32, i32* @esi, align 4
  store i32 %v0_10001ad0, i32* %stack_var_-4, align 4
  %v0_10001ad1 = load i32, i32* @ecx, align 4
  store i32 %v0_10001ad1, i32* @esi, align 4
  %v1_10001ad3 = add i32 %v0_10001ad1, 96
  store i32 %v1_10001ad3, i32* @ecx, align 4
  %v0_10001ad6 = call i32 @function_100016c0()
  %v0_10001adb = load i32, i32* @esi, align 4
  %v1_10001adb = add i32 %v0_10001adb, 64
  store i32 %v1_10001adb, i32* @ecx, align 4
  %v0_10001ade = call i32 @function_100016c0()
  %v0_10001ae3 = load i32, i32* @esi, align 4
  %v1_10001ae3 = add i32 %v0_10001ae3, 32
  store i32 %v1_10001ae3, i32* @ecx, align 4
  %v0_10001ae6 = call i32 @function_100016c0()
  %v0_10001aeb = load i32, i32* @esi, align 4
  store i32 %v0_10001aeb, i32* @ecx, align 4
  %v2_10001aed = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001aed, i32* @esi, align 4
  %v0_10001aee = call i32 @function_100016c0()
  ret i32 %v0_10001aee
}

define i32 @function_10001b00(i8* %arg1) local_unnamed_addr {
dec_label_pc_10001b00:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4099 = alloca i32, align 4
  %stack_var_-24 = alloca i8*, align 4
  %stack_var_-4100 = alloca i32, align 4
  store i32 4096, i32* %eax.global-to-local, align 4
  %v0_10001b08 = call i32 @__chkstk()
  %v0_10001b0e = load i32, i32* @ecx, align 4
  store i32 %v0_10001b0e, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_10001b13 = add i32 %v0_10001b0e, 12
  %v3_10001b13 = inttoptr i32 %v2_10001b13 to i32*
  store i32 0, i32* %v3_10001b13, align 4
  %v0_10001b16 = load i32, i32* %eax.global-to-local, align 4
  %v1_10001b16 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10001b16 = add i32 %v1_10001b16, 16
  %v3_10001b16 = inttoptr i32 %v2_10001b16 to i32*
  store i32 %v0_10001b16, i32* %v3_10001b16, align 4
  %v0_10001b19 = load i32, i32* %eax.global-to-local, align 4
  %v1_10001b19 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10001b19 = add i32 %v1_10001b19, 20
  %v3_10001b19 = inttoptr i32 %v2_10001b19 to i32*
  store i32 %v0_10001b19, i32* %v3_10001b19, align 4
  %v0_10001b1c = load i32, i32* %eax.global-to-local, align 4
  %v1_10001b1c = load i32, i32* %ebx.global-to-local, align 4
  %v2_10001b1c = add i32 %v1_10001b1c, 24
  %v3_10001b1c = inttoptr i32 %v2_10001b1c to i32*
  store i32 %v0_10001b1c, i32* %v3_10001b1c, align 4
  %v0_10001b1f = load i32, i32* %eax.global-to-local, align 4
  %v1_10001b1f = load i32, i32* %ebx.global-to-local, align 4
  %v2_10001b1f = add i32 %v1_10001b1f, 28
  %v3_10001b1f = inttoptr i32 %v2_10001b1f to i32*
  store i32 %v0_10001b1f, i32* %v3_10001b1f, align 4
  %v4_10001b22 = ptrtoint i8* %arg1 to i32
  store i32 %v4_10001b22, i32* %eax.global-to-local, align 4
  %v2_10001b2a = ptrtoint i32* %stack_var_-4100 to i32
  store i32 %v2_10001b2a, i32* @ecx, align 4
  %tmp28 = bitcast i32* %stack_var_-4100 to i8*
  store i8* %arg1, i8** %stack_var_-24, align 4
  %v0_10001b32 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001b32 = inttoptr i32 %v0_10001b32 to i8*
  store i8 1, i8* %v1_10001b32, align 1
  %v0_10001b35 = load i32, i32* %eax.global-to-local, align 4
  %v1_10001b35 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10001b35 = add i32 %v1_10001b35, 4
  %v3_10001b35 = inttoptr i32 %v2_10001b35 to i32*
  store i32 %v0_10001b35, i32* %v3_10001b35, align 4
  %v0_10001b38 = load i8*, i8** %stack_var_-24, align 4
  %v7_10001b38 = call i32 @GetEnvironmentVariableA(i8* %v0_10001b38, i8* %tmp28, i32 4096)
  store i32 %v7_10001b38, i32* %eax.global-to-local, align 4
  %v1_10001b3e = icmp eq i32 %v7_10001b38, 0
  br i1 %v1_10001b3e, label %dec_label_pc_10001bc1, label %dec_label_pc_10001b42

dec_label_pc_10001b42:                            ; preds = %dec_label_pc_10001b00
  store i32 %v2_10001b2a, i32* %eax.global-to-local, align 4
  %v0_10001b48 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001b48 = add i32 %v0_10001b48, 8
  %v2_10001b48 = inttoptr i32 %v1_10001b48 to i8*
  store i8 1, i8* %v2_10001b48, align 1
  %v2_10001b4c = ptrtoint i32* %stack_var_-4099 to i32
  store i32 %v2_10001b4c, i32* %edx.global-to-local, align 4
  %v0_10001b50.pre = load i32, i32* %eax.global-to-local, align 4
  %v4_10001b50.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10001b50

dec_label_pc_10001b50:                            ; preds = %dec_label_pc_10001b50, %dec_label_pc_10001b42
  %v4_10001b50 = phi i32 [ %v6_10001b50, %dec_label_pc_10001b50 ], [ %v4_10001b50.pre, %dec_label_pc_10001b42 ]
  %v0_10001b52 = phi i32 [ %v1_10001b52, %dec_label_pc_10001b50 ], [ %v0_10001b50.pre, %dec_label_pc_10001b42 ]
  %v1_10001b50 = inttoptr i32 %v0_10001b52 to i8*
  %v2_10001b50 = load i8, i8* %v1_10001b50, align 1
  %v3_10001b50 = zext i8 %v2_10001b50 to i32
  %v5_10001b50 = and i32 %v4_10001b50, -256
  %v6_10001b50 = or i32 %v3_10001b50, %v5_10001b50
  store i32 %v6_10001b50, i32* @ecx, align 4
  %v1_10001b52 = add i32 %v0_10001b52, 1
  store i32 %v1_10001b52, i32* %eax.global-to-local, align 4
  %v5_10001b53 = icmp eq i8 %v2_10001b50, 0
  %v1_10001b55 = icmp eq i1 %v5_10001b53, false
  br i1 %v1_10001b55, label %dec_label_pc_10001b50, label %dec_label_pc_10001b57

dec_label_pc_10001b57:                            ; preds = %dec_label_pc_10001b50
  %v2_10001b57 = sub i32 %v1_10001b52, %v2_10001b4c
  store i32 %v2_10001b57, i32* %eax.global-to-local, align 4
  %v1_10001b5a = add i32 %v2_10001b57, 1
  store i32 %v1_10001b5a, i32* @edi, align 4
  %v0_10001b5d = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001b5d = add i32 %v0_10001b5d, 24
  %v2_10001b5d = inttoptr i32 %v1_10001b5d to i32*
  store i32 0, i32* %v2_10001b5d, align 4
  %v1_10001b64 = icmp eq i32 %v1_10001b5a, 0
  br i1 %v1_10001b64, label %dec_label_pc_10001b9f, label %dec_label_pc_10001b68

dec_label_pc_10001b68:                            ; preds = %dec_label_pc_10001b57
  %v0_10001b68 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001b68 = add i32 %v0_10001b68, 16
  %v2_10001b68 = inttoptr i32 %v1_10001b68 to i32*
  %v3_10001b68 = load i32, i32* %v2_10001b68, align 4
  store i32 %v3_10001b68, i32* @eax, align 4
  %v2_10001b6b = sub i32 %v1_10001b5a, %v3_10001b68
  %v7_10001b6d = icmp sgt i32 %v1_10001b5a, %v3_10001b68
  br i1 %v7_10001b6d, label %dec_label_pc_10001b6f, label %dec_label_pc_10001b7c

dec_label_pc_10001b6f:                            ; preds = %dec_label_pc_10001b68
  store i32 %v2_10001b6b, i32* %edx.global-to-local, align 4
  %v1_10001b74 = add i32 %v0_10001b68, 12
  store i32 %v1_10001b74, i32* @ecx, align 4
  %v1_10001b77 = call i32 @function_1000c180(i32 %v2_10001b6b)
  store i32 %v1_10001b77, i32* %eax.global-to-local, align 4
  %v0_10001b7c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10001b7c

dec_label_pc_10001b7c:                            ; preds = %dec_label_pc_10001b68, %dec_label_pc_10001b6f
  %v21_10001b7c = phi i32 [ %v0_10001b68, %dec_label_pc_10001b68 ], [ %v0_10001b7c.pre, %dec_label_pc_10001b6f ]
  %v1_10001b7c = add i32 %v21_10001b7c, 24
  %v2_10001b7c = inttoptr i32 %v1_10001b7c to i32*
  %v3_10001b7c = load i32, i32* %v2_10001b7c, align 4
  %v5_10001b7c = add i32 %v3_10001b7c, %v1_10001b5a
  store i32 %v5_10001b7c, i32* %v2_10001b7c, align 4
  %v0_10001b7f = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001b7f = add i32 %v0_10001b7f, 24
  %v2_10001b7f = inttoptr i32 %v1_10001b7f to i32*
  %v3_10001b7f = load i32, i32* %v2_10001b7f, align 4
  store i32 %v3_10001b7f, i32* %eax.global-to-local, align 4
  %v1_10001b82 = add i32 %v0_10001b7f, 12
  %v2_10001b82 = inttoptr i32 %v1_10001b82 to i32*
  %v3_10001b82 = load i32, i32* %v2_10001b82, align 4
  store i32 %v3_10001b82, i32* @ecx, align 4
  %v2_10001b85 = sub i32 %v3_10001b7f, %v1_10001b5a
  store i32 %v2_10001b85, i32* %eax.global-to-local, align 4
  %v2_10001b87 = add i32 %v0_10001b7f, 28
  %v3_10001b87 = inttoptr i32 %v2_10001b87 to i32*
  store i32 %v3_10001b82, i32* %v3_10001b87, align 4
  %tmp29 = icmp slt i32 %v2_10001b85, 1
  br i1 %tmp29, label %dec_label_pc_10001b9f, label %dec_label_pc_10001b8e

dec_label_pc_10001b8e:                            ; preds = %dec_label_pc_10001b7c
  %tmp30 = icmp slt i32 %v1_10001b5a, 1
  br i1 %tmp30, label %dec_label_pc_10001b9f, label %dec_label_pc_10001b92

dec_label_pc_10001b92:                            ; preds = %dec_label_pc_10001b8e
  %v1_10001b92 = load i32, i32* @esp, align 4
  %v2_10001b92 = add i32 %v1_10001b92, -4
  %v3_10001b92 = inttoptr i32 %v2_10001b92 to i32*
  store i32 %v2_10001b85, i32* %v3_10001b92, align 4
  %v0_10001b93 = load i32, i32* @ecx, align 4
  %v2_10001b93 = add i32 %v1_10001b92, -8
  %v3_10001b93 = inttoptr i32 %v2_10001b93 to i32*
  store i32 %v0_10001b93, i32* %v3_10001b93, align 4
  %v0_10001b94 = load i32, i32* @ecx, align 4
  %v2_10001b94 = add i32 %v0_10001b94, %v1_10001b5a
  store i32 %v2_10001b94, i32* @ecx, align 4
  %v2_10001b96 = add i32 %v1_10001b92, -12
  %v3_10001b96 = inttoptr i32 %v2_10001b96 to i32*
  store i32 %v2_10001b94, i32* %v3_10001b96, align 4
  %v1_10001b97 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_10001b97 = ptrtoint i32* %v1_10001b97 to i32
  store i32 %v3_10001b97, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001b9f

dec_label_pc_10001b9f:                            ; preds = %dec_label_pc_10001b92, %dec_label_pc_10001b8e, %dec_label_pc_10001b7c, %dec_label_pc_10001b57
  %v0_10001b9f = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001b9f = add i32 %v0_10001b9f, 24
  %v2_10001b9f = inttoptr i32 %v1_10001b9f to i32*
  %v3_10001b9f = load i32, i32* %v2_10001b9f, align 4
  store i32 %v3_10001b9f, i32* %eax.global-to-local, align 4
  %v1_10001ba2 = add i32 %v0_10001b9f, 12
  %v2_10001ba2 = inttoptr i32 %v1_10001ba2 to i32*
  %v3_10001ba2 = load i32, i32* %v2_10001ba2, align 4
  store i32 %v3_10001ba2, i32* %edx.global-to-local, align 4
  %v1_10001ba5 = load i32, i32* @esp, align 4
  %v2_10001ba5 = add i32 %v1_10001ba5, -4
  %v3_10001ba5 = inttoptr i32 %v2_10001ba5 to i32*
  store i32 %v3_10001b9f, i32* %v3_10001ba5, align 4
  store i32 %v2_10001b2a, i32* @ecx, align 4
  %v2_10001bac = add i32 %v1_10001ba5, -8
  %v3_10001bac = inttoptr i32 %v2_10001bac to i32*
  store i32 %v2_10001b2a, i32* %v3_10001bac, align 4
  %v0_10001bad = load i32, i32* %edx.global-to-local, align 4
  %v2_10001bad = add i32 %v1_10001ba5, -12
  %v3_10001bad = inttoptr i32 %v2_10001bad to i32*
  store i32 %v0_10001bad, i32* %v3_10001bad, align 4
  %v0_10001bae = call i32 @_memcpy.1()
  store i32 %v0_10001bae, i32* %eax.global-to-local, align 4
  %v0_10001bb3 = load i32, i32* @esp, align 4
  %v1_10001bb3 = add i32 %v0_10001bb3, 12
  %v1_10001bb6 = inttoptr i32 %v1_10001bb3 to i32*
  %v2_10001bb6 = load i32, i32* %v1_10001bb6, align 4
  store i32 %v2_10001bb6, i32* @edi, align 4
  %v3_10001bb6 = add i32 %v0_10001bb3, 16
  %v1_10001bb7 = inttoptr i32 %v3_10001bb6 to i32*
  %v2_10001bb7 = load i32, i32* %v1_10001bb7, align 4
  store i32 %v2_10001bb7, i32* @esi, align 4
  %v3_10001bb7 = add i32 %v0_10001bb3, 20
  %v0_10001bb8 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10001bb8, i32* %eax.global-to-local, align 4
  %v1_10001bba = inttoptr i32 %v3_10001bb7 to i32*
  %v2_10001bba = load i32, i32* %v1_10001bba, align 4
  store i32 %v2_10001bba, i32* @ebx, align 4
  ret i32 %v0_10001bb8

dec_label_pc_10001bc1:                            ; preds = %dec_label_pc_10001b00
  %v2_10001bc1 = load i8*, i8** %stack_var_-24, align 4
  %v3_10001bc1 = ptrtoint i8* %v2_10001bc1 to i32
  store i32 %v3_10001bc1, i32* @esi, align 4
  %v0_10001bc2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10001bc2 = add i32 %v0_10001bc2, 8
  %v2_10001bc2 = inttoptr i32 %v1_10001bc2 to i8*
  store i8 0, i8* %v2_10001bc2, align 1
  %v0_10001bc6 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10001bc6, i32* %eax.global-to-local, align 4
  store i32 %v2_10001b2a, i32* @ebx, align 4
  ret i32 %v0_10001bc6
}

define i32 @function_10001bd0(i32* %arg1) local_unnamed_addr {
dec_label_pc_10001bd0:
  %tmp10 = ptrtoint i32* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001bd0 = load i32, i32* @ebp, align 4
  store i32 %v0_10001bd0, i32* %stack_var_-4, align 4
  %v4_10001bd0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001bd0, i32* @ebp, align 4
  %v16_10001bd6 = ptrtoint i32* %stack_var_-24 to i32
  %v0_10001bd9 = load i32, i32* @ebx, align 4
  %v0_10001bda = load i32, i32* @edi, align 4
  store i32 %v0_10001bda, i32* %stack_var_-32, align 4
  %v6_10001be1 = call i32 @function_100110f4(i32 %tmp10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_100226b8.52, i32 0, i32 0), i32 %v0_10001bda, i32 %v0_10001bd9)
  store i32 %v6_10001be1, i32* @ebx, align 4
  store i32 0, i32* @edi, align 4
  %v12_10001bed = icmp eq i32 %v6_10001be1, 0
  %v1_10001bef = icmp eq i1 %v12_10001bed, false
  br i1 %v1_10001bef, label %dec_label_pc_10001bf9, label %dec_label_pc_10001bf1

dec_label_pc_10001bf1:                            ; preds = %dec_label_pc_10001bd0
  %v2_10001bf1 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10001bf1, i32* @edi, align 4
  store i32 %v0_10001bd9, i32* @ebx, align 4
  %v2_10001bf7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001bf7, i32* @ebp, align 4
  ret i32 0

dec_label_pc_10001bf9:                            ; preds = %dec_label_pc_10001bd0
  %v4_10001bfd = inttoptr i32 %v6_10001be1 to %_IO_FILE*
  store i32 0, i32* %stack_var_-24, align 4
  %v5_10001c0a = call i32 @_fseek(%_IO_FILE* %v4_10001bfd, i32 0, i32 2)
  %v0_10001c0f = load i32, i32* @ebx, align 4
  %v4_10001c0f = inttoptr i32 %v0_10001c0f to %_IO_FILE*
  %v3_10001c10 = call i32 @_ftell(%_IO_FILE* %v4_10001c0f)
  store i32 %v3_10001c10, i32* @eax, align 4
  %v1_10001c1a = add i32 %v3_10001c10, 1
  %v9_10001c1a = icmp eq i32 %v1_10001c1a, 0
  store i32 %v1_10001c1a, i32* @esi, align 4
  %v0_10001c1b = load i32, i32* @edi, align 4
  br i1 %v9_10001c1a, label %dec_label_pc_10001c53, label %dec_label_pc_10001c20

dec_label_pc_10001c20:                            ; preds = %dec_label_pc_10001bf9
  %tmp31 = icmp slt i32 %v1_10001c1a, 1
  br i1 %tmp31, label %dec_label_pc_10001c30, label %dec_label_pc_10001c24

dec_label_pc_10001c24:                            ; preds = %dec_label_pc_10001c20
  store i32 %v16_10001bd6, i32* @ecx, align 4
  %v1_10001c28 = call i32 @function_1000c180(i32 %v1_10001c1a)
  %v3_10001c2d = load i32, i32* %stack_var_-24, align 4
  store i32 %v3_10001c2d, i32* @edi, align 4
  br label %dec_label_pc_10001c30

dec_label_pc_10001c30:                            ; preds = %dec_label_pc_10001c24, %dec_label_pc_10001c20
  %v0_10001c3a = phi i32 [ %v3_10001c2d, %dec_label_pc_10001c24 ], [ %v0_10001c1b, %dec_label_pc_10001c20 ]
  %v2_10001c33 = add i32 %v0_10001c1b, %v1_10001c1a
  %tmp32 = icmp slt i32 %v0_10001c1b, 1
  br i1 %tmp32, label %dec_label_pc_10001c53, label %dec_label_pc_10001c41

dec_label_pc_10001c41:                            ; preds = %dec_label_pc_10001c30
  br i1 %tmp31, label %dec_label_pc_10001c53, label %dec_label_pc_10001c45

dec_label_pc_10001c45:                            ; preds = %dec_label_pc_10001c41
  %v1_10001c45 = load i32, i32* @esp, align 4
  %v2_10001c45 = add i32 %v1_10001c45, -4
  %v3_10001c45 = inttoptr i32 %v2_10001c45 to i32*
  store i32 %v0_10001c1b, i32* %v3_10001c45, align 4
  %v0_10001c46 = load i32, i32* @edi, align 4
  %v3_10001c46 = add i32 %v0_10001c46, %v1_10001c1a
  store i32 %v3_10001c46, i32* @ecx, align 4
  %v2_10001c49 = add i32 %v1_10001c45, -8
  %v3_10001c49 = inttoptr i32 %v2_10001c49 to i32*
  store i32 %v0_10001c46, i32* %v3_10001c49, align 4
  %v0_10001c4a = load i32, i32* @ecx, align 4
  %v2_10001c4a = add i32 %v1_10001c45, -12
  %v3_10001c4a = inttoptr i32 %v2_10001c4a to i32*
  store i32 %v0_10001c4a, i32* %v3_10001c4a, align 4
  %v1_10001c4b = inttoptr i32 %v2_10001c33 to i32*
  %v3_10001c4b = inttoptr i32 %v0_10001c3a to i32*
  %v5_10001c4b = call i32* @_memcpy(i32* %v1_10001c4b, i32* %v3_10001c4b, i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_10001c53

dec_label_pc_10001c53:                            ; preds = %dec_label_pc_10001c45, %dec_label_pc_10001c41, %dec_label_pc_10001c30, %dec_label_pc_10001bf9
  %stack_var_-12.0 = phi i32 [ %v0_10001c1b, %dec_label_pc_10001bf9 ], [ %v2_10001c33, %dec_label_pc_10001c30 ], [ %v2_10001c33, %dec_label_pc_10001c41 ], [ %v2_10001c33, %dec_label_pc_10001c45 ]
  %v0_10001c53 = load i32, i32* @esp, align 4
  %v1_10001c53 = add i32 %v0_10001c53, -4
  %v2_10001c53 = inttoptr i32 %v1_10001c53 to i32*
  store i32 0, i32* %v2_10001c53, align 4
  %v1_10001c55 = add i32 %v0_10001c53, -8
  %v2_10001c55 = inttoptr i32 %v1_10001c55 to i32*
  store i32 0, i32* %v2_10001c55, align 4
  %v0_10001c57 = load i32, i32* @ebx, align 4
  %v2_10001c57 = add i32 %v0_10001c53, -12
  %v3_10001c57 = inttoptr i32 %v2_10001c57 to i32*
  store i32 %v0_10001c57, i32* %v3_10001c57, align 4
  %v3_10001c58 = call i32 @_fseek(%_IO_FILE* bitcast (i32* @5 to %_IO_FILE*), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %stack_var_-12.0, i32* @esi, align 4
  %v0_10001c60 = load i32, i32* @ebx, align 4
  %v1_10001c60 = load i32, i32* @esp, align 4
  %v2_10001c60 = add i32 %v1_10001c60, -4
  %v3_10001c60 = inttoptr i32 %v2_10001c60 to i32*
  store i32 %v0_10001c60, i32* %v3_10001c60, align 4
  %v0_10001c61 = load i32, i32* @esi, align 4
  %v1_10001c61 = add i32 %v0_10001c61, -1
  %v2_10001c64 = add i32 %v1_10001c60, -8
  %v3_10001c64 = inttoptr i32 %v2_10001c64 to i32*
  store i32 %v1_10001c61, i32* %v3_10001c64, align 4
  %v1_10001c65 = add i32 %v1_10001c60, -12
  %v2_10001c65 = inttoptr i32 %v1_10001c65 to i32*
  store i32 1, i32* %v2_10001c65, align 4
  %v0_10001c67 = load i32, i32* @edi, align 4
  %v2_10001c67 = add i32 %v1_10001c60, -16
  %v3_10001c67 = inttoptr i32 %v2_10001c67 to i32*
  store i32 %v0_10001c67, i32* %v3_10001c67, align 4
  %v3_10001c68 = call i32 @_fread(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), %_IO_FILE* bitcast (i32* @5 to %_IO_FILE*))
  %v0_10001c6d = load i32, i32* @ebx, align 4
  %v1_10001c6d = load i32, i32* @esp, align 4
  %v2_10001c6d = add i32 %v1_10001c6d, -4
  %v3_10001c6d = inttoptr i32 %v2_10001c6d to i32*
  store i32 %v0_10001c6d, i32* %v3_10001c6d, align 4
  %v1_10001c6e = call i32 @_fclose(%_IO_FILE* bitcast (i32* @5 to %_IO_FILE*))
  %v0_10001c73 = load i32, i32* @esp, align 4
  %v1_10001c73 = add i32 %v0_10001c73, -4
  %v2_10001c73 = inttoptr i32 %v1_10001c73 to i32*
  store i32 36, i32* %v2_10001c73, align 4
  %v0_10001c75 = load i32, i32* @edi, align 4
  %v1_10001c75 = load i32, i32* @esi, align 4
  %v3_10001c75 = add i32 %v0_10001c75, -1
  %v4_10001c75 = add i32 %v3_10001c75, %v1_10001c75
  %v5_10001c75 = inttoptr i32 %v4_10001c75 to i8*
  store i8 0, i8* %v5_10001c75, align 1
  %v1_10001c7a = call i32 @function_1000a480(i32 ptrtoint (i32* @5 to i32))
  %v0_10001c7f = load i32, i32* @esp, align 4
  %v1_10001c82 = icmp eq i32 %v1_10001c7a, 0
  br i1 %v1_10001c82, label %dec_label_pc_10001c96, label %dec_label_pc_10001c86

dec_label_pc_10001c86:                            ; preds = %dec_label_pc_10001c53
  %v1_10001c86 = add i32 %v0_10001c7f, 32
  %v2_10001c86 = inttoptr i32 %v1_10001c86 to i32*
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %v2_10001c86, align 4
  store i32 %v1_10001c7a, i32* @ecx, align 4
  %v1_10001c8d = call i32 @function_1000a4a0(i32 ptrtoint (i32* @5 to i32))
  %v0_10001c9b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10001c98

dec_label_pc_10001c96:                            ; preds = %dec_label_pc_10001c53
  %v1_10001c7f = add i32 %v0_10001c7f, 36
  br label %dec_label_pc_10001c98

dec_label_pc_10001c98:                            ; preds = %dec_label_pc_10001c96, %dec_label_pc_10001c86
  %v0_10001c9b = phi i32 [ %v1_10001c7f, %dec_label_pc_10001c96 ], [ %v0_10001c9b.pre, %dec_label_pc_10001c86 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_10001c96 ], [ %v1_10001c8d, %dec_label_pc_10001c86 ]
  store i32 %storemerge, i32* @esi, align 4
  store i32 %tmp10, i32* @eax, align 4
  %v1_10001c9b = add i32 %v0_10001c9b, -4
  %v2_10001c9b = inttoptr i32 %v1_10001c9b to i32*
  store i32 0, i32* %v2_10001c9b, align 4
  %v1_10001c9d = add i32 %v0_10001c9b, -8
  %v2_10001c9d = inttoptr i32 %v1_10001c9d to i32*
  store i32 0, i32* %v2_10001c9d, align 4
  %v1_10001c9f = add i32 %v0_10001c9b, -12
  %v2_10001c9f = inttoptr i32 %v1_10001c9f to i32*
  store i32 0, i32* %v2_10001c9f, align 4
  %v0_10001ca1 = load i32, i32* @edi, align 4
  %v2_10001ca1 = add i32 %v0_10001c9b, -16
  %v3_10001ca1 = inttoptr i32 %v2_10001ca1 to i32*
  store i32 %v0_10001ca1, i32* %v3_10001ca1, align 4
  %v0_10001ca2 = load i32, i32* @eax, align 4
  %v2_10001ca2 = add i32 %v0_10001c9b, -20
  %v3_10001ca2 = inttoptr i32 %v2_10001ca2 to i32*
  store i32 %v0_10001ca2, i32* %v3_10001ca2, align 4
  %v0_10001ca3 = load i32, i32* @esi, align 4
  store i32 %v0_10001ca3, i32* @ecx, align 4
  %v5_10001ca5 = call i32 @function_1000b8a0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v5_10001ca5, i32* @eax, align 4
  %v4_10001caa = trunc i32 %v5_10001ca5 to i8
  %v5_10001caa = icmp eq i8 %v4_10001caa, 0
  %v1_10001cac = icmp eq i1 %v5_10001caa, false
  br i1 %v1_10001cac, label %dec_label_pc_10001cc6, label %dec_label_pc_10001cae

dec_label_pc_10001cae:                            ; preds = %dec_label_pc_10001c98
  %v0_10001cae = load i32, i32* @esi, align 4
  store i32 %v0_10001cae, i32* @ecx, align 4
  %v0_10001cb0 = call i32 @function_1000a8a0()
  store i32 %v16_10001bd6, i32* @ecx, align 4
  %v0_10001cb8 = call i32 @function_1000da70()
  %v0_10001cbd = load i32, i32* @esp, align 4
  %v1_10001cbd = inttoptr i32 %v0_10001cbd to i32*
  %v2_10001cbd = load i32, i32* %v1_10001cbd, align 4
  store i32 %v2_10001cbd, i32* @esi, align 4
  %v3_10001cbd = add i32 %v0_10001cbd, 4
  %v1_10001cbe = inttoptr i32 %v3_10001cbd to i32*
  %v2_10001cbe = load i32, i32* %v1_10001cbe, align 4
  store i32 %v2_10001cbe, i32* @edi, align 4
  %v3_10001cbe = add i32 %v0_10001cbd, 8
  %v1_10001cc1 = inttoptr i32 %v3_10001cbe to i32*
  %v2_10001cc1 = load i32, i32* %v1_10001cc1, align 4
  store i32 %v2_10001cc1, i32* @ebx, align 4
  %v2_10001cc4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001cc4, i32* @ebp, align 4
  ret i32 0

dec_label_pc_10001cc6:                            ; preds = %dec_label_pc_10001c98
  store i32 %v16_10001bd6, i32* @ecx, align 4
  %v0_10001cc9 = call i32 @function_1000da70()
  %v0_10001cce = load i32, i32* @esi, align 4
  %v0_10001cd0 = load i32, i32* @esp, align 4
  %v1_10001cd0 = inttoptr i32 %v0_10001cd0 to i32*
  %v2_10001cd0 = load i32, i32* %v1_10001cd0, align 4
  store i32 %v2_10001cd0, i32* @esi, align 4
  %v3_10001cd0 = add i32 %v0_10001cd0, 4
  %v1_10001cd1 = inttoptr i32 %v3_10001cd0 to i32*
  %v2_10001cd1 = load i32, i32* %v1_10001cd1, align 4
  store i32 %v2_10001cd1, i32* @edi, align 4
  %v3_10001cd1 = add i32 %v0_10001cd0, 8
  %v1_10001cd2 = inttoptr i32 %v3_10001cd1 to i32*
  %v2_10001cd2 = load i32, i32* %v1_10001cd2, align 4
  store i32 %v2_10001cd2, i32* @ebx, align 4
  %v2_10001cd5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001cd5, i32* @ebp, align 4
  ret i32 %v0_10001cce
}

define i32 @function_10001ce0(i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4) local_unnamed_addr {
dec_label_pc_10001ce0:
  %tmp6 = ptrtoint i32* %arg4 to i32
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-284 = alloca i8*, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001ce0 = load i32, i32* @ebp, align 4
  store i32 %v0_10001ce0, i32* %stack_var_-4, align 4
  %v4_10001ce0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001ce0, i32* @ebp, align 4
  %v16_10001ce6 = ptrtoint i32* %stack_var_-264 to i32
  %v0_10001cec = load i32, i32* @esi, align 4
  store i32 %v0_10001cec, i32* %stack_var_-268, align 4
  store i32 %v16_10001ce6, i32* @ecx, align 4
  %v5_10001cfa = call i32 @function_10009a60(i32* nonnull %stack_var_-264, i32 %arg1, i32 260)
  store i8* inttoptr (i32 260 to i8*), i8** %stack_var_-284, align 4
  %v4_10001d0b = call i32 @function_10009910(i32* nonnull %stack_var_-264, i32 260)
  %v6_10001d23 = call i32 @function_10009650(i32 %v16_10001ce6, i32* bitcast ([13 x i8]* @global_var_1002232c.42 to i32*), i32 260, i32 -1)
  store i32 %v16_10001ce6, i32* @ecx, align 4
  %v2_10001d31 = call i32 @function_10009740(i32 %v16_10001ce6, i32 92)
  %v2_10001d3d = call i32 @function_10001bd0(i32* nonnull %stack_var_-264)
  store i32 %tmp7, i32* @esi, align 4
  store i32 %v2_10001d3d, i32* %arg2, align 4
  %v1_10001d4a = icmp eq i32 %v2_10001d3d, 0
  %v1_10001d4c = icmp eq i1 %v1_10001d4a, false
  br i1 %v1_10001d4c, label %dec_label_pc_10001d6b, label %dec_label_pc_10001d4e

dec_label_pc_10001d4e:                            ; preds = %dec_label_pc_10001ce0
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-284, align 4
  %v6_10001d5e = call i32 @function_10001410(i32 1, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_100226f0.53, i32 0, i32 0))
  %v2_10001d66 = load i32, i32* %stack_var_-268, align 4
  store i32 %v2_10001d66, i32* @esi, align 4
  %v2_10001d69 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001d69, i32* @ebp, align 4
  ret i32 %v6_10001d5e

dec_label_pc_10001d6b:                            ; preds = %dec_label_pc_10001ce0
  %tmp33 = ptrtoint i32* %arg3 to i32
  store i32 %v2_10001d3d, i32* @ecx, align 4
  %v4_10001d74 = call i32 @function_1000a510(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_100226e4.54, i32 0, i32 0), i32 0)
  store i32 %v4_10001d74, i32* @eax, align 4
  store i32 %tmp33, i32* @ecx, align 4
  store i32 %v4_10001d74, i32* %arg3, align 4
  %v1_10001d7e = icmp eq i32 %v4_10001d74, 0
  %v1_10001d80 = icmp eq i1 %v1_10001d7e, false
  br i1 %v1_10001d80, label %dec_label_pc_10001da6, label %dec_label_pc_10001d82

dec_label_pc_10001d82:                            ; preds = %dec_label_pc_10001da6, %dec_label_pc_10001d6b
  %v0_10001d82 = load i32, i32* @esi, align 4
  %v1_10001d82 = inttoptr i32 %v0_10001d82 to i32*
  %v2_10001d82 = load i32, i32* %v1_10001d82, align 4
  store i32 %v2_10001d82, i32* @ecx, align 4
  %v0_10001d84 = call i32 @function_1000a8a0()
  %v1_10001d8f = load i32, i32* @esp, align 4
  %v2_10001d8f = add i32 %v1_10001d8f, -4
  %v3_10001d8f = inttoptr i32 %v2_10001d8f to i32*
  store i32 %v16_10001ce6, i32* %v3_10001d8f, align 4
  %v1_10001d90 = add i32 %v1_10001d8f, -8
  %v2_10001d90 = inttoptr i32 %v1_10001d90 to i32*
  store i32 ptrtoint ([26 x i8]* @global_var_100226c8.55 to i32), i32* %v2_10001d90, align 4
  %v1_10001d95 = add i32 %v1_10001d8f, -12
  %v2_10001d95 = inttoptr i32 %v1_10001d95 to i32*
  store i32 2, i32* %v2_10001d95, align 4
  %v1_10001d97 = add i32 %v1_10001d8f, -16
  %v2_10001d97 = inttoptr i32 %v1_10001d97 to i32*
  store i32 1, i32* %v2_10001d97, align 4
  %v3_10001d99 = call i32 @function_10001410(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  %v0_10001d9e = load i32, i32* @esp, align 4
  %v1_10001d9e = add i32 %v0_10001d9e, 16
  %v1_10001da1 = inttoptr i32 %v1_10001d9e to i32*
  %v2_10001da1 = load i32, i32* %v1_10001da1, align 4
  store i32 %v2_10001da1, i32* @esi, align 4
  %v2_10001da4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001da4, i32* @ebp, align 4
  ret i32 %v3_10001d99

dec_label_pc_10001da6:                            ; preds = %dec_label_pc_10001d6b
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_100226bc.56, i32 0, i32 0), i8** %stack_var_-284, align 4
  store i32 %v4_10001d74, i32* @ecx, align 4
  %v4_10001daf = call i32 @function_1000a510(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_100226bc.56, i32 0, i32 0), i32 0)
  store i32 %v4_10001daf, i32* @eax, align 4
  store i32 %tmp6, i32* @ecx, align 4
  store i32 %v4_10001daf, i32* %arg4, align 4
  %v1_10001db9 = icmp eq i32 %v4_10001daf, 0
  br i1 %v1_10001db9, label %dec_label_pc_10001d82, label %dec_label_pc_10001dbd

dec_label_pc_10001dbd:                            ; preds = %dec_label_pc_10001da6
  %v2_10001dbf = load i8*, i8** %stack_var_-284, align 4
  %v3_10001dbf = ptrtoint i8* %v2_10001dbf to i32
  store i32 %v3_10001dbf, i32* @esi, align 4
  %v2_10001dc2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001dc2, i32* @ebp, align 4
  ret i32 0
}

define i32 @function_10001dd0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10001dd0:
  %eax.global-to-local = alloca i32, align 4
  %tmp10 = ptrtoint i32* %arg2 to i32
  %stack_var_-552 = alloca i8*, align 4
  %stack_var_-544 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001dd0 = load i32, i32* @ebp, align 4
  store i32 %v0_10001dd0, i32* %stack_var_-4, align 4
  %v4_10001dd0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001dd0, i32* @ebp, align 4
  %v16_10001dd3 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %arg3, i32* @ebx, align 4
  %v1_10001ddd = add i32 %arg3, 68
  %v2_10001ddd = inttoptr i32 %v1_10001ddd to i32*
  %v3_10001ddd = load i32, i32* %v2_10001ddd, align 4
  store i32 %v3_10001ddd, i32* @ecx, align 4
  %v2_10001de5 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_10001de5, i32* %eax.global-to-local, align 4
  %tmp32 = bitcast i32* %stack_var_-264 to i8*
  %v4_10001dec = inttoptr i32 %v3_10001ddd to i8*
  %v7_10001ded = call i32 @GetEnvironmentVariableA(i8* %v4_10001dec, i8* %tmp32, i32 260)
  store i32 %v7_10001ded, i32* %eax.global-to-local, align 4
  %v1_10001df3 = icmp eq i32 %v7_10001ded, 0
  %v1_10001df5 = icmp eq i1 %v1_10001df3, false
  br i1 %v1_10001df5, label %dec_label_pc_10001dd0.dec_label_pc_10001ee8_crit_edge, label %dec_label_pc_10001dfb

dec_label_pc_10001dd0.dec_label_pc_10001ee8_crit_edge: ; preds = %dec_label_pc_10001dd0
  %v0_10001ee8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10001ee8

dec_label_pc_10001dfb:                            ; preds = %dec_label_pc_10001dd0
  store i32 %arg1, i32* @ecx, align 4
  %v0_10001dfe = load i32, i32* @esi, align 4
  store i32 %v0_10001dfe, i32* %stack_var_-544, align 4
  %v4_10001dfe = ptrtoint i32* %stack_var_-544 to i32
  store i32 0, i32* @esi, align 4
  %v1_10001e01 = icmp eq i32 %arg1, 0
  br i1 %v1_10001e01, label %dec_label_pc_10001e30, label %dec_label_pc_10001e05

dec_label_pc_10001e05:                            ; preds = %dec_label_pc_10001dfb
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_100226a8.57, i32 0, i32 0), i8** %stack_var_-552, align 4
  %v4_10001e0b = call i32 @function_1000aa00(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_100226a8.57, i32 0, i32 0), i32 0)
  store i32 %v4_10001e0b, i32* %eax.global-to-local, align 4
  store i32 %v4_10001e0b, i32* @esi, align 4
  %v1_10001e12 = icmp eq i32 %v4_10001e0b, 0
  br i1 %v1_10001e12, label %dec_label_pc_10001e05.dec_label_pc_10001e30_crit_edge, label %dec_label_pc_10001e16

dec_label_pc_10001e05.dec_label_pc_10001e30_crit_edge: ; preds = %dec_label_pc_10001e05
  %v1_10001e33.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10001e30

dec_label_pc_10001e16:                            ; preds = %dec_label_pc_10001e05
  %v4_10001e06 = ptrtoint i8** %stack_var_-552 to i32
  %v4_10001e23 = call i32 @function_10009a60(i32* nonnull %stack_var_-264, i32 %v4_10001e0b, i32 260)
  store i32 %v4_10001e23, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10001ec3

dec_label_pc_10001e30:                            ; preds = %dec_label_pc_10001e05.dec_label_pc_10001e30_crit_edge, %dec_label_pc_10001dfb
  %v1_10001e33 = phi i32 [ %v1_10001e33.pre, %dec_label_pc_10001e05.dec_label_pc_10001e30_crit_edge ], [ %v4_10001dfe, %dec_label_pc_10001dfb ]
  store i32 %tmp10, i32* %eax.global-to-local, align 4
  %v0_10001e33 = load i32, i32* @edi, align 4
  %v2_10001e33 = add i32 %v1_10001e33, -4
  %v3_10001e33 = inttoptr i32 %v2_10001e33 to i32*
  store i32 %v0_10001e33, i32* %v3_10001e33, align 4
  %v1_10001e34 = add i32 %v1_10001e33, -8
  %v2_10001e34 = inttoptr i32 %v1_10001e34 to i32*
  store i32 260, i32* %v2_10001e34, align 4
  %v0_10001e39 = load i32, i32* %eax.global-to-local, align 4
  %v2_10001e39 = add i32 %v1_10001e33, -12
  %v3_10001e39 = inttoptr i32 %v2_10001e39 to i32*
  store i32 %v0_10001e39, i32* %v3_10001e39, align 4
  store i32 %v16_10001dd3, i32* @ecx, align 4
  %v2_10001e40 = add i32 %v1_10001e33, -16
  %v3_10001e40 = inttoptr i32 %v2_10001e40 to i32*
  store i32 %v16_10001dd3, i32* %v3_10001e40, align 4
  %v2_10001e41 = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001e41, i32* %eax.global-to-local, align 4
  %v0_10001e4c = load i32, i32* @esp, align 4
  %v1_10001e4c = add i32 %v0_10001e4c, -4
  %v2_10001e4c = inttoptr i32 %v1_10001e4c to i32*
  store i32 260, i32* %v2_10001e4c, align 4
  %v2_10001e51 = add i32 %v0_10001e4c, -8
  %v3_10001e51 = inttoptr i32 %v2_10001e51 to i32*
  store i32 %v16_10001dd3, i32* %v3_10001e51, align 4
  %v1_10001e52 = call i32 @function_10009910(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v0_10001e57 = load i32, i32* @esp, align 4
  %v1_10001e57 = add i32 %v0_10001e57, -4
  %v2_10001e57 = inttoptr i32 %v1_10001e57 to i32*
  store i32 -1, i32* %v2_10001e57, align 4
  %v1_10001e59 = add i32 %v0_10001e57, -8
  %v2_10001e59 = inttoptr i32 %v1_10001e59 to i32*
  store i32 260, i32* %v2_10001e59, align 4
  store i32 %v16_10001dd3, i32* %eax.global-to-local, align 4
  %v1_10001e64 = add i32 %v0_10001e57, -12
  %v2_10001e64 = inttoptr i32 %v1_10001e64 to i32*
  store i32 ptrtoint ([24 x i8]* @global_var_10022758.58 to i32), i32* %v2_10001e64, align 4
  %v2_10001e69 = add i32 %v0_10001e57, -16
  %v3_10001e69 = inttoptr i32 %v2_10001e69 to i32*
  store i32 %v16_10001dd3, i32* %v3_10001e69, align 4
  %v3_10001e6a = call i32 @function_10009650(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_10001e6a, i32* %eax.global-to-local, align 4
  store i32 %v16_10001dd3, i32* @ecx, align 4
  %v1_10001e75 = load i32, i32* @esp, align 4
  %v2_10001e75 = add i32 %v1_10001e75, -4
  %v3_10001e75 = inttoptr i32 %v2_10001e75 to i32*
  store i32 %v16_10001dd3, i32* %v3_10001e75, align 4
  %v0_10001e76 = call i32 @function_10001bd0(i32* nonnull @5)
  store i32 %v0_10001e76, i32* %eax.global-to-local, align 4
  store i32 %v0_10001e76, i32* @edi, align 4
  %v0_10001e7d = load i32, i32* @esp, align 4
  %v1_10001e7d = add i32 %v0_10001e7d, 40
  %v1_10001e80 = icmp eq i32 %v0_10001e76, 0
  br i1 %v1_10001e80, label %dec_label_pc_10001e98, label %dec_label_pc_10001e84

dec_label_pc_10001e84:                            ; preds = %dec_label_pc_10001e30
  %v1_10001e84 = add i32 %v0_10001e7d, 36
  %v2_10001e84 = inttoptr i32 %v1_10001e84 to i32*
  store i32 0, i32* %v2_10001e84, align 4
  %v1_10001e86 = add i32 %v0_10001e7d, 32
  %v2_10001e86 = inttoptr i32 %v1_10001e86 to i32*
  store i32 ptrtoint ([14 x i8]* @global_var_10022748.59 to i32), i32* %v2_10001e86, align 4
  store i32 %v0_10001e76, i32* @ecx, align 4
  %v2_10001e8d = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001e8d, i32* %eax.global-to-local, align 4
  store i32 %v2_10001e8d, i32* @esi, align 4
  %v1_10001e94 = icmp eq i32 %v2_10001e8d, 0
  %v1_10001e96 = icmp eq i1 %v1_10001e94, false
  %v0_10001ea6.pre = load i32, i32* @esp, align 4
  br i1 %v1_10001e96, label %dec_label_pc_10001ea6, label %dec_label_pc_10001e98

dec_label_pc_10001e98:                            ; preds = %dec_label_pc_10001e84, %dec_label_pc_10001e30
  %v0_10001e98 = phi i32 [ %v1_10001e7d, %dec_label_pc_10001e30 ], [ %v0_10001ea6.pre, %dec_label_pc_10001e84 ]
  %v1_10001e98 = add i32 %v0_10001e98, -4
  %v2_10001e98 = inttoptr i32 %v1_10001e98 to i32*
  store i32 ptrtoint ([32 x i8]* @global_var_10022728.60 to i32), i32* %v2_10001e98, align 4
  %v0_10001e9d = call i32 @Error()
  store i32 %v0_10001e9d, i32* %eax.global-to-local, align 4
  %v0_10001ea3 = load i32, i32* @esp, align 4
  %v1_10001ea3 = add i32 %v0_10001ea3, 4
  br label %dec_label_pc_10001ea6

dec_label_pc_10001ea6:                            ; preds = %dec_label_pc_10001e84, %dec_label_pc_10001e98
  %v0_10001ea6 = phi i32 [ %v1_10001ea3, %dec_label_pc_10001e98 ], [ %v0_10001ea6.pre, %dec_label_pc_10001e84 ]
  %v1_10001ea6 = add i32 %v0_10001ea6, -4
  %v2_10001ea6 = inttoptr i32 %v1_10001ea6 to i32*
  store i32 260, i32* %v2_10001ea6, align 4
  %v0_10001eb1 = load i32, i32* @esi, align 4
  %v2_10001eb1 = add i32 %v0_10001ea6, -8
  %v3_10001eb1 = inttoptr i32 %v2_10001eb1 to i32*
  store i32 %v0_10001eb1, i32* %v3_10001eb1, align 4
  %v2_10001eb2 = add i32 %v0_10001ea6, -12
  %v3_10001eb2 = inttoptr i32 %v2_10001eb2 to i32*
  store i32 %v2_10001de5, i32* %v3_10001eb2, align 4
  %v2_10001eb3 = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001eb3, i32* @eax, align 4
  store i32 %v0_10001e76, i32* @ecx, align 4
  %v0_10001ebd = call i32 @function_1000a8a0()
  store i32 %v0_10001ebd, i32* %eax.global-to-local, align 4
  %v0_10001ec2 = load i32, i32* @esp, align 4
  %v1_10001ec2 = inttoptr i32 %v0_10001ec2 to i32*
  %v2_10001ec2 = load i32, i32* %v1_10001ec2, align 4
  store i32 %v2_10001ec2, i32* @edi, align 4
  %v3_10001ec2 = add i32 %v0_10001ec2, 4
  br label %dec_label_pc_10001ec3

dec_label_pc_10001ec3:                            ; preds = %dec_label_pc_10001ea6, %dec_label_pc_10001e16
  %storemerge = phi i32 [ %v3_10001ec2, %dec_label_pc_10001ea6 ], [ %v4_10001e06, %dec_label_pc_10001e16 ]
  store i32 %v2_10001de5, i32* %eax.global-to-local, align 4
  %v2_10001ec9 = add i32 %storemerge, -4
  %v3_10001ec9 = inttoptr i32 %v2_10001ec9 to i32*
  store i32 %v2_10001de5, i32* %v3_10001ec9, align 4
  %v1_10001eca = call i8* @__strlwr(i8* bitcast (i32* @5 to i8*))
  %v3_10001eca = ptrtoint i8* %v1_10001eca to i32
  store i32 %v3_10001eca, i32* %eax.global-to-local, align 4
  store i32 %v2_10001de5, i32* @ecx, align 4
  %v1_10001ed5 = load i32, i32* @esp, align 4
  %v2_10001ed5 = add i32 %v1_10001ed5, -4
  %v3_10001ed5 = inttoptr i32 %v2_10001ed5 to i32*
  store i32 %v2_10001de5, i32* %v3_10001ed5, align 4
  %v1_10001ed6 = add i32 %v1_10001ed5, -8
  %v2_10001ed6 = inttoptr i32 %v1_10001ed6 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_100222f0.40 to i32), i32* %v2_10001ed6, align 4
  %v0_10001edb = load i32, i32* @ebx, align 4
  %v1_10001edb = add i32 %v0_10001edb, 64
  %v2_10001ede = add i32 %v1_10001ed5, -12
  %v3_10001ede = inttoptr i32 %v2_10001ede to i32*
  store i32 %v1_10001edb, i32* %v3_10001ede, align 4
  %v2_10001edf = call i32 @function_10001000(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001edf, i32* %eax.global-to-local, align 4
  %v0_10001ee4 = load i32, i32* @esp, align 4
  %v1_10001ee4 = add i32 %v0_10001ee4, 16
  %v1_10001ee7 = inttoptr i32 %v1_10001ee4 to i32*
  %v2_10001ee7 = load i32, i32* %v1_10001ee7, align 4
  store i32 %v2_10001ee7, i32* @esi, align 4
  %v3_10001ee7 = add i32 %v0_10001ee4, 20
  br label %dec_label_pc_10001ee8

dec_label_pc_10001ee8:                            ; preds = %dec_label_pc_10001dd0.dec_label_pc_10001ee8_crit_edge, %dec_label_pc_10001ec3
  %v0_10001eec = phi i32 [ %v7_10001ded, %dec_label_pc_10001dd0.dec_label_pc_10001ee8_crit_edge ], [ %v2_10001edf, %dec_label_pc_10001ec3 ]
  %v0_10001ee8 = phi i32 [ %v0_10001ee8.pre, %dec_label_pc_10001dd0.dec_label_pc_10001ee8_crit_edge ], [ %v3_10001ee7, %dec_label_pc_10001ec3 ]
  %v1_10001ee8 = inttoptr i32 %v0_10001ee8 to i32*
  %v2_10001ee8 = load i32, i32* %v1_10001ee8, align 4
  store i32 %v2_10001ee8, i32* @ebx, align 4
  %v2_10001eeb = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10001eeb, i32* @ebp, align 4
  ret i32 %v0_10001eec
}

define i32 @function_10001ef0(i32 %arg1, i32 %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_10001ef0:
  %ebx.global-to-local = alloca i32, align 4
  %tmp16 = ptrtoint i32* %arg3 to i32
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-792 = alloca i32, align 4
  %stack_var_-784 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10001ef0 = load i32, i32* @ebp, align 4
  store i32 %v0_10001ef0, i32* %stack_var_-4, align 4
  %v4_10001ef0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10001ef0, i32* @ebp, align 4
  %v0_10001efd = load i32, i32* @edi, align 4
  store i32 %v0_10001efd, i32* %stack_var_-792, align 4
  %v4_10001efd = ptrtoint i32* %stack_var_-792 to i32
  %v2_10001f04 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_10001f04, i32* @ecx, align 4
  %v5_10001f0b = call i32 @function_10009a60(i32* nonnull %stack_var_-264, i32 %arg2, i32 260)
  %v4_10001f1c = call i32 @function_10009910(i32* nonnull %stack_var_-264, i32 260)
  %v7_10001f34 = call i32 @function_10009650(i32 %v2_10001f04, i32* bitcast ([14 x i8]* @global_var_10022770.61 to i32*), i32 260, i32 -1)
  store i32 %v2_10001f04, i32* @ecx, align 4
  %v2_10001f40 = call i32 @function_10001bd0(i32* nonnull %stack_var_-264)
  store i32 %tmp16, i32* @edi, align 4
  %v5_10001f59 = call i32 @function_100014a0(i32* nonnull %stack_var_-524, i32 260, i32 %tmp16, i32 0)
  %v1_10001f61 = icmp eq i32 %v5_10001f59, 0
  %v1_10001f63 = icmp eq i1 %v1_10001f61, false
  br i1 %v1_10001f63, label %dec_label_pc_10002006, label %dec_label_pc_10001f69

dec_label_pc_10001f69:                            ; preds = %dec_label_pc_10001ef0
  %v16_10001ef6 = ptrtoint i32* %stack_var_-784 to i32
  %v0_10001f69 = load i32, i32* @edi, align 4
  %v5_10001f72 = call i32 @function_10001dd0(i32 %v2_10001f40, i32* nonnull %stack_var_-524, i32 %v0_10001f69)
  %v0_10001f77 = load i32, i32* @edi, align 4
  %v1_10001f77 = add i32 %v0_10001f77, 36
  %v2_10001f77 = inttoptr i32 %v1_10001f77 to i32*
  %v3_10001f77 = load i32, i32* %v2_10001f77, align 4
  store i32 %v16_10001ef6, i32* @ecx, align 4
  %v4_10001f89 = inttoptr i32 %v3_10001f77 to i8*
  %v4_10001f8a = bitcast i32* %stack_var_-784 to i8*
  %v6_10001f8a = call i32 @GetEnvironmentVariableA(i8* %v4_10001f89, i8* %v4_10001f8a, i32 260)
  %v1_10001f90 = icmp eq i32 %v6_10001f8a, 0
  %v1_10001f92 = icmp eq i1 %v1_10001f90, false
  br i1 %v1_10001f92, label %dec_label_pc_10001fbb, label %dec_label_pc_10001f94

dec_label_pc_10001f94:                            ; preds = %dec_label_pc_10001f69
  %v2_10001f94 = icmp eq i32 %v2_10001f40, 0
  br i1 %v2_10001f94, label %dec_label_pc_10001fbb, label %dec_label_pc_10001f98

dec_label_pc_10001f98:                            ; preds = %dec_label_pc_10001f94
  store i32 %v2_10001f40, i32* @ecx, align 4
  %v4_10001fa0 = call i32 @function_1000aa00(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_100222f4.62, i32 0, i32 0), i32 %v6_10001f8a)
  %v1_10001fa5 = icmp eq i32 %v4_10001fa0, 0
  br i1 %v1_10001fa5, label %dec_label_pc_10001fbb, label %dec_label_pc_10001fa9

dec_label_pc_10001fa9:                            ; preds = %dec_label_pc_10001f98
  %v0_10001faa = load i32, i32* @edi, align 4
  %v1_10001faa = add i32 %v0_10001faa, 32
  %v4_10001fb3 = call i32 @function_10001000(i32 %v1_10001faa, i32 ptrtoint ([3 x i8]* @global_var_100222f0.40 to i32))
  br label %dec_label_pc_10001fbb

dec_label_pc_10001fbb:                            ; preds = %dec_label_pc_10001fa9, %dec_label_pc_10001f98, %dec_label_pc_10001f94, %dec_label_pc_10001f69
  store i32 %arg1, i32* @ecx, align 4
  %v0_10001fbe = load i32, i32* @ebx, align 4
  %v1_10001fbe = load i32, i32* @esp, align 4
  %v2_10001fbe = add i32 %v1_10001fbe, -4
  %v3_10001fbe = inttoptr i32 %v2_10001fbe to i32*
  store i32 %v0_10001fbe, i32* %v3_10001fbe, align 4
  %v1_10001fbf = add i32 %v1_10001fbe, -8
  %v2_10001fbf = inttoptr i32 %v1_10001fbf to i32*
  store i32 -1, i32* %v2_10001fbf, align 4
  %v1_10001fc1 = add i32 %v1_10001fbe, -12
  %v2_10001fc1 = inttoptr i32 %v1_10001fc1 to i32*
  store i32 ptrtoint ([11 x i8]* @global_var_1002233c.63 to i32), i32* %v2_10001fc1, align 4
  %v2_10001fc6 = call i32 @function_1000a660(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001fc6, i32* %ebx.global-to-local, align 4
  %v10_10001fcd = icmp eq i32 %v2_10001fc6, -1
  %v1_10001fd0 = icmp eq i1 %v10_10001fcd, false
  br i1 %v1_10001fd0, label %dec_label_pc_10001fbb.dec_label_pc_10001fe9_crit_edge, label %dec_label_pc_10001fd2

dec_label_pc_10001fbb.dec_label_pc_10001fe9_crit_edge: ; preds = %dec_label_pc_10001fbb
  %v1_10001fe9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10001fe9

dec_label_pc_10001fd2:                            ; preds = %dec_label_pc_10001fbb
  store i32 %arg2, i32* @ecx, align 4
  %v0_10001fd5 = load i32, i32* @esp, align 4
  %v1_10001fd5 = add i32 %v0_10001fd5, -4
  %v2_10001fd5 = inttoptr i32 %v1_10001fd5 to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_1002232c.42 to i32), i32* %v2_10001fd5, align 4
  %v0_10001fda = load i32, i32* @ecx, align 4
  %v2_10001fda = add i32 %v0_10001fd5, -8
  %v3_10001fda = inttoptr i32 %v2_10001fda to i32*
  store i32 %v0_10001fda, i32* %v3_10001fda, align 4
  %v1_10001fdb = add i32 %v0_10001fd5, -12
  %v2_10001fdb = inttoptr i32 %v1_10001fdb to i32*
  store i32 ptrtoint ([29 x i8]* @global_var_1002230c.64 to i32), i32* %v2_10001fdb, align 4
  %v0_10001fe0 = call i32 @Error()
  %v0_10001fe6 = load i32, i32* @esp, align 4
  %v1_10001fe6 = add i32 %v0_10001fe6, 12
  %v0_10001fe9.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10001fe9

dec_label_pc_10001fe9:                            ; preds = %dec_label_pc_10001fbb.dec_label_pc_10001fe9_crit_edge, %dec_label_pc_10001fd2
  %v1_10001fe9 = phi i32 [ %v1_10001fe6, %dec_label_pc_10001fd2 ], [ %v1_10001fe9.pre, %dec_label_pc_10001fbb.dec_label_pc_10001fe9_crit_edge ]
  %v0_10001fe9 = phi i32 [ %v0_10001fe9.pre, %dec_label_pc_10001fd2 ], [ %v2_10001fc6, %dec_label_pc_10001fbb.dec_label_pc_10001fe9_crit_edge ]
  %v2_10001fe9 = add i32 %v1_10001fe9, -4
  %v3_10001fe9 = inttoptr i32 %v2_10001fe9 to i32*
  store i32 %v0_10001fe9, i32* %v3_10001fe9, align 4
  %v1_10001fea = add i32 %v1_10001fe9, -8
  %v2_10001fea = inttoptr i32 %v1_10001fea to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_10022308.65 to i32), i32* %v2_10001fea, align 4
  %v0_10001fef = load i32, i32* @edi, align 4
  %v2_10001fef = add i32 %v1_10001fe9, -12
  %v3_10001fef = inttoptr i32 %v2_10001fef to i32*
  store i32 %v0_10001fef, i32* %v3_10001fef, align 4
  %v2_10001ff0 = call i32 @function_10001000(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10001ff0, i32* @eax, align 4
  %v0_10001ff5 = load i32, i32* @esp, align 4
  %v1_10001ff5 = add i32 %v0_10001ff5, 12
  %v1_10001ff8 = inttoptr i32 %v1_10001ff5 to i32*
  %v2_10001ff8 = load i32, i32* %v1_10001ff8, align 4
  store i32 %v2_10001ff8, i32* @ebx, align 4
  %v3_10001ff8 = add i32 %v0_10001ff5, 16
  %v2_10001ff9 = icmp eq i32 %v2_10001f40, 0
  br i1 %v2_10001ff9, label %dec_label_pc_10002004, label %dec_label_pc_10001ffd

dec_label_pc_10001ffd:                            ; preds = %dec_label_pc_10001fe9
  store i32 %v2_10001f40, i32* @ecx, align 4
  %v0_10001fff = call i32 @function_1000a8a0()
  %v0_10002006.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10002004

dec_label_pc_10002004:                            ; preds = %dec_label_pc_10001ffd, %dec_label_pc_10001fe9
  %v0_10002006.pre = phi i32 [ %v0_10002006.pre.pre, %dec_label_pc_10001ffd ], [ %v3_10001ff8, %dec_label_pc_10001fe9 ]
  br label %dec_label_pc_10002006

dec_label_pc_10002006:                            ; preds = %dec_label_pc_10002004, %dec_label_pc_10001ef0
  %v0_1000200b = phi i32 [ 0, %dec_label_pc_10002004 ], [ %v5_10001f59, %dec_label_pc_10001ef0 ]
  %v0_10002006 = phi i32 [ %v0_10002006.pre, %dec_label_pc_10002004 ], [ %v4_10001efd, %dec_label_pc_10001ef0 ]
  %v1_10002006 = inttoptr i32 %v0_10002006 to i32*
  %v2_10002006 = load i32, i32* %v1_10002006, align 4
  store i32 %v2_10002006, i32* @edi, align 4
  %v2_1000200a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000200a, i32* @ebp, align 4
  ret i32 %v0_1000200b
}

define i32 @function_10002010(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10002010:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002010 = load i32, i32* @ebp, align 4
  store i32 %v0_10002010, i32* %stack_var_-4, align 4
  %v4_10002010 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002010, i32* @ebp, align 4
  %v2_1000201d = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_1000201d, i32* @ecx, align 4
  store i32 0, i32* %stack_var_-12, align 4
  store i32 0, i32* %stack_var_-8, align 4
  store i32 0, i32* %stack_var_-16, align 4
  %v8_1000203b = call i32 @function_10001ce0(i32 %arg1, i32* nonnull %stack_var_-12, i32* nonnull %stack_var_-8, i32* nonnull %stack_var_-16)
  %v1_10002043 = icmp eq i32 %v8_1000203b, 0
  %v1_10002045 = icmp eq i1 %v1_10002043, false
  br i1 %v1_10002045, label %dec_label_pc_10002065, label %dec_label_pc_10002047

dec_label_pc_10002047:                            ; preds = %dec_label_pc_10002010
  %v3_10002047 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_10002047, i32* @ecx, align 4
  %v3_10002051 = call i32 @function_1000a660(i32 ptrtoint ([11 x i8]* @global_var_10022780.66 to i32), i32 -1)
  store i32 %v3_10002051, i32* @eax, align 4
  store i32 %v3_10002051, i32* %arg2, align 4
  %v3_1000205b = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1000205b, i32* @ecx, align 4
  %v0_1000205e = call i32 @function_1000a8a0()
  br label %dec_label_pc_10002065

dec_label_pc_10002065:                            ; preds = %dec_label_pc_10002047, %dec_label_pc_10002010
  %v0_10002068 = phi i32 [ 0, %dec_label_pc_10002047 ], [ %v8_1000203b, %dec_label_pc_10002010 ]
  %v2_10002067 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002067, i32* @ebp, align 4
  ret i32 %v0_10002068
}

define i32 @function_10002070(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10002070:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-412 = alloca i8*, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002070 = load i32, i32* @ebp, align 4
  store i32 %v0_10002070, i32* %stack_var_-4, align 4
  %v4_10002070 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002070, i32* @ebp, align 4
  %v16_10002073 = ptrtoint i32* %stack_var_-392 to i32
  %v2_1000207f = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_1000207f, i32* @ecx, align 4
  %v3_10002082 = call i32 @function_10001b00(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_1002233c.63, i32 0, i32 0))
  %v2_1000208c = ptrtoint i32* %stack_var_-100 to i32
  store i32 %v2_1000208c, i32* @ecx, align 4
  %v3_1000208f = call i32 @function_10001b00(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_100222f4.62, i32 0, i32 0))
  %v2_10002099 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_10002099, i32* @ecx, align 4
  %v3_1000209c = call i32 @function_10001b00(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_100226a8.57, i32 0, i32 0))
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100226a0.67, i32 0, i32 0), i8** %stack_var_-412, align 4
  %v2_100020a6 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_100020a6, i32* @ecx, align 4
  %v3_100020a9 = call i32 @function_10001b00(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100226a0.67, i32 0, i32 0))
  store i32 %v16_10002073, i32* @ecx, align 4
  %v5_100020c0 = call i32 @function_100014a0(i32* nonnull %stack_var_-392, i32 260, i32 %v2_1000207f, i32 1)
  store i32 %v2_100020a6, i32* @ecx, align 4
  store i32 %v5_100020c0, i32* @esi, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v0_100020d1 = call i32 @function_100016c0()
  store i32 %v2_10002099, i32* @ecx, align 4
  %v0_100020d9 = call i32 @function_100016c0()
  store i32 %v2_1000208c, i32* @ecx, align 4
  %v0_100020e1 = call i32 @function_100016c0()
  store i32 %v2_1000207f, i32* @ecx, align 4
  %v0_100020e9 = call i32 @function_100016c0()
  %v0_100020ee = load i32, i32* @esi, align 4
  %v2_100020f0 = load i8*, i8** %stack_var_-412, align 4
  %v3_100020f0 = ptrtoint i8* %v2_100020f0 to i32
  store i32 %v3_100020f0, i32* @esi, align 4
  %v2_100020f3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100020f3, i32* @ebp, align 4
  ret i32 %v0_100020ee
}

define i32 @function_10002100(i32 %arg1) local_unnamed_addr {
dec_label_pc_10002100:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-716 = alloca i8*, align 4
  %stack_var_-432 = alloca i32, align 4
  %stack_var_-712 = alloca i8*, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-700 = alloca i32, align 4
  %stack_var_-692 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002100 = load i32, i32* @ebp, align 4
  store i32 %v0_10002100, i32* %stack_var_-4, align 4
  %v4_10002100 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002100, i32* @ebp, align 4
  %v0_10002109 = load i32, i32* @esi, align 4
  %v0_1000210a = load i32, i32* @edi, align 4
  store i32 %v0_1000210a, i32* %stack_var_-700, align 4
  %v4_1000210a = ptrtoint i32* %stack_var_-700 to i32
  store i32 %arg1, i32* @edi, align 4
  %v1_10002113 = add i32 %arg1, 9
  store i32 %v1_10002113, i32* @esi, align 4
  %v4_10002117 = inttoptr i32 %arg1 to i8*
  store i8* %v4_10002117, i8** %stack_var_-712, align 4
  %v8_10002118 = call i32 @function_100018e0(i32 %arg1, i32 %v1_10002113, i32 512, i32 %v0_1000210a, i32 %v0_10002109)
  %v1_10002120 = icmp eq i32 %v8_10002118, 0
  %v1_10002122 = icmp eq i1 %v1_10002120, false
  br i1 %v1_10002122, label %dec_label_pc_10002252, label %dec_label_pc_10002128

dec_label_pc_10002128:                            ; preds = %dec_label_pc_10002100
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100222bc.16, i32 0, i32 0), i8** %stack_var_-712, align 4
  %v2_10002133 = ptrtoint i32* %stack_var_-432 to i32
  store i8* inttoptr (i32 292 to i8*), i8** %stack_var_-716, align 4
  %v7_1000213f = call i32 @function_10009a90(i32* nonnull %stack_var_-432, i32 292, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100222bc.16, i32 0, i32 0))
  store i32 %v2_10002133, i32* @ecx, align 4
  %tmp36 = bitcast i32* %stack_var_-432 to i8*
  %v3_1000214b = call i32 @__putenv(i8* %tmp36)
  %v2_10002158 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_10002158, i32* @ecx, align 4
  %v3_1000215e = call i32 @function_10001b00(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_1002233c.63, i32 0, i32 0))
  %v2_10002168 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_10002168, i32* @ecx, align 4
  %v3_1000216b = call i32 @function_10001b00(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_100222f4.62, i32 0, i32 0))
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_100226a8.57, i32 0, i32 0), i8** %stack_var_-712, align 4
  %v2_10002175 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_10002175, i32* @ecx, align 4
  %v3_10002178 = call i32 @function_10001b00(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_100226a8.57, i32 0, i32 0))
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100226a0.67, i32 0, i32 0), i8** %stack_var_-716, align 4
  %v2_10002182 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_10002182, i32* @ecx, align 4
  %v3_10002185 = call i32 @function_10001b00(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_100226a0.67, i32 0, i32 0))
  %v0_1000218a = load i32, i32* @edi, align 4
  %v1_1000218a = add i32 %v0_1000218a, 7
  %v2_1000218a = inttoptr i32 %v1_1000218a to i8*
  %v3_1000218a = load i8, i8* %v2_1000218a, align 1
  %v10_1000218a = icmp eq i8 %v3_1000218a, 0
  br i1 %v10_1000218a, label %dec_label_pc_1000222d, label %dec_label_pc_10002194

dec_label_pc_10002194:                            ; preds = %dec_label_pc_10002128
  %v1_10002194 = add i32 %v0_1000218a, 5
  %v2_10002194 = inttoptr i32 %v1_10002194 to i8*
  %v3_10002194 = load i8, i8* %v2_10002194, align 1
  %v10_10002194 = icmp eq i8 %v3_10002194, 0
  br i1 %v10_10002194, label %dec_label_pc_10002206, label %dec_label_pc_1000219a

dec_label_pc_1000219a:                            ; preds = %dec_label_pc_10002194
  %v2_100021a2 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_100021a2, i32* @ecx, align 4
  %v0_100021a6 = load i32, i32* @esi, align 4
  %v8_100021a7 = call i32 @function_10001ce0(i32 %v0_100021a6, i32* nonnull %stack_var_-8, i32* nonnull %stack_var_4, i32* nonnull %stack_var_-12)
  store i32 %v8_100021a7, i32* @edi, align 4
  %v1_100021b1 = icmp eq i32 %v8_100021a7, 0
  br i1 %v1_100021b1, label %dec_label_pc_100021c8, label %dec_label_pc_100021b5

dec_label_pc_100021b5:                            ; preds = %dec_label_pc_1000219a
  store i32 %v2_10002158, i32* @ecx, align 4
  %v0_100021bb = call i32 @function_10001ad0()
  %v2_100021c2 = load i8*, i8** %stack_var_-716, align 4
  %v3_100021c2 = ptrtoint i8* %v2_100021c2 to i32
  store i32 %v3_100021c2, i32* @edi, align 4
  %v2_100021c3 = load i8*, i8** %stack_var_-712, align 4
  %v3_100021c3 = ptrtoint i8* %v2_100021c3 to i32
  store i32 %v3_100021c3, i32* @esi, align 4
  %v2_100021c6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100021c6, i32* @ebp, align 4
  ret i32 %v8_100021a7

dec_label_pc_100021c8:                            ; preds = %dec_label_pc_1000219a
  %v3_100021c8 = load i32, i32* %stack_var_4, align 4
  %v0_100021d2 = load i32, i32* @esi, align 4
  %v5_100021d4 = call i32 @function_10001ef0(i32 %v3_100021c8, i32 %v0_100021d2, i32* nonnull %stack_var_-140)
  store i32 %v5_100021d4, i32* @eax, align 4
  store i32 %v5_100021d4, i32* @esi, align 4
  %v1_100021de = icmp eq i32 %v5_100021d4, 0
  br i1 %v1_100021de, label %dec_label_pc_100021f5, label %dec_label_pc_100021e2

dec_label_pc_100021e2:                            ; preds = %dec_label_pc_100021c8
  store i32 %v2_10002158, i32* @ecx, align 4
  %v0_100021e8 = call i32 @function_10001ad0()
  %v2_100021ed = load i8*, i8** %stack_var_-716, align 4
  %v3_100021ed = ptrtoint i8* %v2_100021ed to i32
  store i32 %v3_100021ed, i32* @edi, align 4
  %v2_100021f0 = load i8*, i8** %stack_var_-712, align 4
  %v3_100021f0 = ptrtoint i8* %v2_100021f0 to i32
  store i32 %v3_100021f0, i32* @esi, align 4
  %v2_100021f3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100021f3, i32* @ebp, align 4
  ret i32 %v5_100021d4

dec_label_pc_100021f5:                            ; preds = %dec_label_pc_100021c8
  %v3_100021f5 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_100021f5, i32* @ecx, align 4
  store i32 0, i32* %stack_var_-140, align 4
  %v0_100021ff = call i32 @function_1000a8a0()
  br label %dec_label_pc_1000222d

dec_label_pc_10002206:                            ; preds = %dec_label_pc_10002194
  %v1_10002206 = add i32 %v0_1000218a, 6
  %v2_10002206 = inttoptr i32 %v1_10002206 to i8*
  %v3_10002206 = load i8, i8* %v2_10002206, align 1
  %v10_10002206 = icmp eq i8 %v3_10002206, 0
  br i1 %v10_10002206, label %dec_label_pc_1000222d, label %dec_label_pc_1000220c

dec_label_pc_1000220c:                            ; preds = %dec_label_pc_10002206
  store i32 %v2_10002158, i32* @ecx, align 4
  %v6_10002221 = call i32 @function_100014a0(i32* nonnull %stack_var_-692, i32 260, i32 %v2_10002158, i32 1)
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_1000222d

dec_label_pc_1000222d:                            ; preds = %dec_label_pc_1000220c, %dec_label_pc_10002206, %dec_label_pc_100021f5, %dec_label_pc_10002128
  store i32 %v2_10002182, i32* @ecx, align 4
  %v0_10002230 = call i32 @function_100016c0()
  store i32 %v2_10002175, i32* @ecx, align 4
  %v0_10002238 = call i32 @function_100016c0()
  store i32 %v2_10002168, i32* @ecx, align 4
  %v0_10002240 = call i32 @function_100016c0()
  store i32 %v2_10002158, i32* @ecx, align 4
  %v0_1000224b = call i32 @function_100016c0()
  %v0_10002252.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10002252

dec_label_pc_10002252:                            ; preds = %dec_label_pc_1000222d, %dec_label_pc_10002100
  %v0_10002257 = phi i32 [ 0, %dec_label_pc_1000222d ], [ %v8_10002118, %dec_label_pc_10002100 ]
  %v0_10002252 = phi i32 [ %v0_10002252.pre, %dec_label_pc_1000222d ], [ %v4_1000210a, %dec_label_pc_10002100 ]
  %v1_10002252 = inttoptr i32 %v0_10002252 to i32*
  %v2_10002252 = load i32, i32* %v1_10002252, align 4
  store i32 %v2_10002252, i32* @edi, align 4
  %v3_10002252 = add i32 %v0_10002252, 4
  %v1_10002253 = inttoptr i32 %v3_10002252 to i32*
  %v2_10002253 = load i32, i32* %v1_10002253, align 4
  store i32 %v2_10002253, i32* @esi, align 4
  %v2_10002256 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002256, i32* @ebp, align 4
  ret i32 %v0_10002257
}

define i32 @function_10002260(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10002260:
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-532 = alloca i8*, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-528 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %v16_10002263 = ptrtoint i32* %stack_var_-524 to i32
  %v0_10002269 = load i32, i32* @esi, align 4
  store i32 %v0_10002269, i32* %stack_var_-528, align 4
  %v4_10002269 = ptrtoint i32* %stack_var_-528 to i32
  store i32 %arg1, i32* @esi, align 4
  %v1_1000226d = add i32 %arg1, 8
  %v2_1000226d = inttoptr i32 %v1_1000226d to i32*
  %v3_1000226d = load i32, i32* %v2_1000226d, align 4
  store i32 %v3_1000226d, i32* @ecx, align 4
  %v1_10002270 = inttoptr i32 %v3_1000226d to i32*
  %v2_10002270 = load i32, i32* %v1_10002270, align 4
  %v4_10002277 = trunc i32 %v2_10002270 to i8
  %v5_10002277 = icmp eq i8 %v4_10002277, 0
  br i1 %v5_10002277, label %dec_label_pc_10002365, label %dec_label_pc_1000227f

dec_label_pc_1000227f:                            ; preds = %dec_label_pc_10002260
  %v1_1000227f = inttoptr i32 %arg1 to i8*
  %v2_1000227f = load i8, i8* %v1_1000227f, align 1
  %v9_1000227f = icmp eq i8 %v2_1000227f, 0
  store i32 -1, i32* %stack_var_4, align 4
  br i1 %v9_1000227f, label %dec_label_pc_1000227f.dec_label_pc_100022a3_crit_edge, label %dec_label_pc_1000228b

dec_label_pc_1000227f.dec_label_pc_100022a3_crit_edge: ; preds = %dec_label_pc_1000227f
  br label %dec_label_pc_100022a3

dec_label_pc_1000228b:                            ; preds = %dec_label_pc_1000227f
  %v1_1000228b = add i32 %arg1, 4
  %v2_1000228b = inttoptr i32 %v1_1000228b to i32*
  %v3_1000228b = load i32, i32* %v2_1000228b, align 4
  store i32 %v3_1000228b, i32* @ecx, align 4
  %tmp32 = bitcast i32* %stack_var_4 to i8*
  store i8* %tmp32, i8** %stack_var_-532, align 4
  %v6_10002293 = call i32 @function_10002010(i32 %v3_1000228b, i32* nonnull %stack_var_4, i32 %v0_10002269)
  %v1_1000229b = icmp eq i32 %v6_10002293, 0
  %v1_1000229d = icmp eq i1 %v1_1000229b, false
  br i1 %v1_1000229d, label %dec_label_pc_10002371, label %dec_label_pc_100022a3

dec_label_pc_100022a3:                            ; preds = %dec_label_pc_1000227f.dec_label_pc_100022a3_crit_edge, %dec_label_pc_1000228b
  %v4_100022a9.pre-phi = ptrtoint i8** %stack_var_-532 to i32
  store i8* inttoptr (i32 260 to i8*), i8** %stack_var_-532, align 4
  %tmp33 = bitcast i32* %stack_var_-524 to i8*
  %v5_100022af = call i32 @function_10001280(i32* nonnull %stack_var_-524, i32 260)
  %v4_100022b7 = trunc i32 %v5_100022af to i8
  %v5_100022b7 = icmp eq i8 %v4_100022b7, 0
  br i1 %v5_100022b7, label %dec_label_pc_1000234f, label %dec_label_pc_100022bf

dec_label_pc_100022bf:                            ; preds = %dec_label_pc_100022a3
  store i8* %tmp33, i8** %stack_var_-532, align 4
  %v2_100022c6 = call i32 @function_10009700(i32 %v16_10002263)
  %v0_100022ce = load i32, i32* @edi, align 4
  %v4_100022ce = inttoptr i32 %v0_100022ce to i8*
  store i8* %v4_100022ce, i8** %stack_var_-532, align 4
  %v2_100022cf = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_100022cf, i32* @ecx, align 4
  %tmp35 = bitcast i32* %stack_var_-264 to i8*
  %v5_100022db = call i8* @__getcwd(i8* %tmp35, i32 260)
  store i32 %v2_100022cf, i32* @edx, align 4
  %v5_100022f3 = call i32 @function_10009650(i32 %v2_100022cf, i32* nonnull @global_var_100222c8.17, i32 260, i32 -1)
  %v2_10002301 = call i32 @function_10009740(i32 %v2_100022cf, i32 92)
  store i32 %v16_10002263, i32* @ecx, align 4
  %v3_1000230d = call i32 @__chdir(i8* %tmp33)
  %v0_10002312 = load i32, i32* @esi, align 4
  %v1_10002312 = add i32 %v0_10002312, 8
  %v2_10002312 = inttoptr i32 %v1_10002312 to i32*
  %v3_10002312 = load i32, i32* %v2_10002312, align 4
  store i32 %v3_10002312, i32* @ecx, align 4
  %v3_10002317 = load i32, i32* %stack_var_4, align 4
  %v3_1000232c = call i32 @__chdir(i8* %tmp35)
  %v1_10002334 = icmp eq i32 %v3_10002317, 0
  store i32 %v3_10002317, i32* @edi, align 4
  br i1 %v1_10002334, label %dec_label_pc_100022bf.dec_label_pc_10002365_crit_edge, label %dec_label_pc_10002339

dec_label_pc_100022bf.dec_label_pc_10002365_crit_edge: ; preds = %dec_label_pc_100022bf
  %v0_10002365.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10002365

dec_label_pc_10002339:                            ; preds = %dec_label_pc_100022bf
  %v6_10002342 = call i32 @function_10001410(i32 1, i32 4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @global_var_1002279c.68, i32 0, i32 0))
  %v2_1000234a = load i8*, i8** %stack_var_-532, align 4
  %v3_1000234a = ptrtoint i8* %v2_1000234a to i32
  store i32 %v3_1000234a, i32* @esi, align 4
  ret i32 %v6_10002342

dec_label_pc_1000234f:                            ; preds = %dec_label_pc_100022a3
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @global_var_10022708.69, i32 0, i32 0), i8** %stack_var_-532, align 4
  %v7_10002358 = call i32 @function_10001410(i32 0, i32 3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @global_var_10022708.69, i32 0, i32 0))
  %v2_10002360 = load i32, i32* %stack_var_-528, align 4
  store i32 %v2_10002360, i32* @esi, align 4
  ret i32 %v7_10002358

dec_label_pc_10002365:                            ; preds = %dec_label_pc_100022bf.dec_label_pc_10002365_crit_edge, %dec_label_pc_10002260
  %v1_10002368 = phi i32 [ %v4_100022a9.pre-phi, %dec_label_pc_100022bf.dec_label_pc_10002365_crit_edge ], [ %v4_10002269, %dec_label_pc_10002260 ]
  %v0_10002365 = phi i32 [ %v0_10002365.pre, %dec_label_pc_100022bf.dec_label_pc_10002365_crit_edge ], [ %arg1, %dec_label_pc_10002260 ]
  %v1_10002365 = add i32 %v0_10002365, 8
  %v2_10002365 = inttoptr i32 %v1_10002365 to i32*
  %v3_10002365 = load i32, i32* %v2_10002365, align 4
  store i32 %v3_10002365, i32* @ecx, align 4
  %v2_10002368 = add i32 %v1_10002368, -4
  %v3_10002368 = inttoptr i32 %v2_10002368 to i32*
  store i32 %v3_10002365, i32* %v3_10002368, align 4
  %v1_10002369 = call i32 @function_100015f0(i32 ptrtoint (i32* @5 to i32))
  %v0_1000236e = load i32, i32* @esp, align 4
  %v1_1000236e = add i32 %v0_1000236e, 4
  br label %dec_label_pc_10002371

dec_label_pc_10002371:                            ; preds = %dec_label_pc_10002365, %dec_label_pc_1000228b
  %v0_10002375 = phi i32 [ %v1_10002369, %dec_label_pc_10002365 ], [ %v6_10002293, %dec_label_pc_1000228b ]
  %v0_10002371 = phi i32 [ %v1_1000236e, %dec_label_pc_10002365 ], [ %v4_10002269, %dec_label_pc_1000228b ]
  %v1_10002371 = inttoptr i32 %v0_10002371 to i32*
  %v2_10002371 = load i32, i32* %v1_10002371, align 4
  store i32 %v2_10002371, i32* @esi, align 4
  ret i32 %v0_10002375
}

define i32 @function_10002380(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10002380:
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002380 = load i32, i32* @ebp, align 4
  store i32 %v0_10002380, i32* %stack_var_-4, align 4
  store i8 0, i8* bitcast (i8** @global_var_1002a308.70 to i8*), align 4
  %v3_1000239e = call i32* @GetModuleHandleA(i8* null)
  %v4_100023a5 = call i32 @GetModuleFileNameA(i32* %v3_1000239e, i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v1_100023ab = icmp eq i32 %v4_100023a5, 0
  br i1 %v1_100023ab, label %dec_label_pc_100023c9, label %dec_label_pc_100023af

dec_label_pc_100023af:                            ; preds = %dec_label_pc_10002380
  %v16_10002383 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v16_10002383, i32* @ecx, align 4
  %v9_100023c1 = call i32 @__splitpath(i32* nonnull %stack_var_-264, i32 0, i32 0, i32* bitcast (i8** @global_var_1002a308.70 to i32*), i32 0)
  br label %dec_label_pc_100023c9

dec_label_pc_100023c9:                            ; preds = %dec_label_pc_10002380, %dec_label_pc_100023af
  %v3_100023ce = call i8* @__strlwr(i8* bitcast (i8** @global_var_1002a308.70 to i8*))
  %v2_100023dd = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100023dd, i32* @ebp, align 4
  ret i32 ptrtoint (i8** @global_var_1002a308.70 to i32)
}

define i32 @function_100023e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100023e0:
  %eax.global-to-local = alloca i32, align 4
  store i8 0, i8* bitcast (i8** @global_var_10029f80.71 to i8*), align 4
  %v3_100023f3 = call i32* @GetModuleHandleA(i8* null)
  %v5_100023f3 = ptrtoint i32* %v3_100023f3 to i32
  store i32 %v5_100023f3, i32* %eax.global-to-local, align 4
  %v4_100023fa = call i32 @GetModuleFileNameA(i32* %v3_100023f3, i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v4_100023fa, i32* %eax.global-to-local, align 4
  %v1_10002400 = icmp eq i32 %v4_100023fa, 0
  br i1 %v1_10002400, label %dec_label_pc_100023e0.dec_label_pc_10002448_crit_edge, label %dec_label_pc_10002404

dec_label_pc_100023e0.dec_label_pc_10002448_crit_edge: ; preds = %dec_label_pc_100023e0
  br label %dec_label_pc_10002448

dec_label_pc_10002404:                            ; preds = %dec_label_pc_100023e0
  %v4_1000240b = call i8* @_strrchr(i8* bitcast (i8** @global_var_10029f80.71 to i8*), i32 92)
  %v6_1000240b = ptrtoint i8* %v4_1000240b to i32
  store i32 %v6_1000240b, i32* %eax.global-to-local, align 4
  %v2_10002413 = load i8, i8* %v4_1000240b, align 1
  %v9_10002413 = icmp eq i8 %v2_10002413, 0
  br i1 %v9_10002413, label %dec_label_pc_1000241c, label %dec_label_pc_10002418

dec_label_pc_10002418:                            ; preds = %dec_label_pc_10002404
  %v1_10002418 = add i32 %v6_1000240b, 1
  %v2_10002418 = inttoptr i32 %v1_10002418 to i8*
  store i8 0, i8* %v2_10002418, align 1
  br label %dec_label_pc_1000241c

dec_label_pc_1000241c:                            ; preds = %dec_label_pc_10002418, %dec_label_pc_10002404
  store i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32* %eax.global-to-local, align 4
  %v4_10002424.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10002424

dec_label_pc_10002424:                            ; preds = %dec_label_pc_10002424, %dec_label_pc_1000241c
  %v4_10002424 = phi i32 [ %v6_10002424, %dec_label_pc_10002424 ], [ %v4_10002424.pre, %dec_label_pc_1000241c ]
  %v0_10002426 = phi i32 [ %v1_10002426, %dec_label_pc_10002424 ], [ ptrtoint (i8** @global_var_10029f80.71 to i32), %dec_label_pc_1000241c ]
  %v1_10002424 = inttoptr i32 %v0_10002426 to i8*
  %v2_10002424 = load i8, i8* %v1_10002424, align 1
  %v3_10002424 = zext i8 %v2_10002424 to i32
  %v5_10002424 = and i32 %v4_10002424, -256
  %v6_10002424 = or i32 %v3_10002424, %v5_10002424
  store i32 %v6_10002424, i32* @ecx, align 4
  %v1_10002426 = add i32 %v0_10002426, 1
  store i32 %v1_10002426, i32* %eax.global-to-local, align 4
  %v5_10002427 = icmp eq i8 %v2_10002424, 0
  %v1_10002429 = icmp eq i1 %v5_10002427, false
  br i1 %v1_10002429, label %dec_label_pc_10002424, label %dec_label_pc_1000242b

dec_label_pc_1000242b:                            ; preds = %dec_label_pc_10002424
  %v2_1000242b = sub i32 %v1_10002426, ptrtoint (i32* @global_var_10029f81.72 to i32)
  store i32 %v2_1000242b, i32* %eax.global-to-local, align 4
  %tmp31 = icmp slt i32 %v2_1000242b, 1
  br i1 %tmp31, label %dec_label_pc_10002448, label %dec_label_pc_10002431

dec_label_pc_10002431:                            ; preds = %dec_label_pc_1000242b
  %v2_10002431 = add i32 %v2_1000242b, ptrtoint (i8** @global_var_10029f7f.73 to i32)
  %v3_10002431 = inttoptr i32 %v2_10002431 to i8*
  %v4_10002431 = load i8, i8* %v3_10002431, align 1
  %v5_10002431 = zext i8 %v4_10002431 to i32
  %v8_10002431 = or i32 %v5_10002431, %v5_10002424
  store i32 %v8_10002431, i32* @ecx, align 4
  %v11_10002437 = icmp eq i8 %v4_10002431, 92
  br i1 %v11_10002437, label %dec_label_pc_10002441, label %dec_label_pc_1000243c

dec_label_pc_1000243c:                            ; preds = %dec_label_pc_10002431
  %v11_1000243c = icmp eq i8 %v4_10002431, 47
  %v1_1000243f = icmp eq i1 %v11_1000243c, false
  br i1 %v1_1000243f, label %dec_label_pc_10002448, label %dec_label_pc_10002441

dec_label_pc_10002441:                            ; preds = %dec_label_pc_1000243c, %dec_label_pc_10002431
  store i8 0, i8* %v3_10002431, align 1
  br label %dec_label_pc_10002448

dec_label_pc_10002448:                            ; preds = %dec_label_pc_100023e0.dec_label_pc_10002448_crit_edge, %dec_label_pc_10002441, %dec_label_pc_1000243c, %dec_label_pc_1000242b
  %v0_10002448 = call i32 @CommandLine()
  store i32 %v0_10002448, i32* %eax.global-to-local, align 4
  %v1_1000244e = inttoptr i32 %v0_10002448 to i32*
  %v2_1000244e = load i32, i32* %v1_1000244e, align 4
  store i32 %v2_1000244e, i32* @edx, align 4
  store i32 %v0_10002448, i32* @ecx, align 4
  %v1_10002454 = add i32 %v2_1000244e, 12
  %v2_10002454 = inttoptr i32 %v1_10002454 to i32*
  %v3_10002454 = load i32, i32* %v2_10002454, align 4
  store i32 %v3_10002454, i32* %eax.global-to-local, align 4
  %v1_1000245e = icmp eq i32 %v3_10002454, 0
  br i1 %v1_1000245e, label %dec_label_pc_1000247a, label %dec_label_pc_10002462

dec_label_pc_10002462:                            ; preds = %dec_label_pc_10002448
  %v2_10002467 = sub i32 ptrtoint (i8** @global_var_10029f80.71 to i32), %v3_10002454
  store i32 %v2_10002467, i32* @edx, align 4
  br label %dec_label_pc_10002470

dec_label_pc_10002470:                            ; preds = %dec_label_pc_10002470.dec_label_pc_10002470_crit_edge, %dec_label_pc_10002462
  %v2_10002472 = phi i32 [ %v2_10002472.pre, %dec_label_pc_10002470.dec_label_pc_10002470_crit_edge ], [ %v2_10002467, %dec_label_pc_10002462 ]
  %v4_10002470 = phi i32 [ %v0_10002476, %dec_label_pc_10002470.dec_label_pc_10002470_crit_edge ], [ %v0_10002448, %dec_label_pc_10002462 ]
  %v3_10002472 = phi i32 [ %v1_10002475, %dec_label_pc_10002470.dec_label_pc_10002470_crit_edge ], [ %v3_10002454, %dec_label_pc_10002462 ]
  %v1_10002470 = inttoptr i32 %v3_10002472 to i8*
  %v2_10002470 = load i8, i8* %v1_10002470, align 1
  %v3_10002470 = zext i8 %v2_10002470 to i32
  %v5_10002470 = and i32 %v4_10002470, -256
  %v6_10002470 = or i32 %v3_10002470, %v5_10002470
  store i32 %v6_10002470, i32* @ecx, align 4
  %v5_10002472 = add i32 %v3_10002472, %v2_10002472
  %v6_10002472 = inttoptr i32 %v5_10002472 to i8*
  store i8 %v2_10002470, i8* %v6_10002472, align 1
  %v0_10002475 = load i32, i32* %eax.global-to-local, align 4
  %v1_10002475 = add i32 %v0_10002475, 1
  store i32 %v1_10002475, i32* %eax.global-to-local, align 4
  %v0_10002476 = load i32, i32* @ecx, align 4
  %v4_10002476 = trunc i32 %v0_10002476 to i8
  %v5_10002476 = icmp eq i8 %v4_10002476, 0
  %v1_10002478 = icmp eq i1 %v5_10002476, false
  br i1 %v1_10002478, label %dec_label_pc_10002470.dec_label_pc_10002470_crit_edge, label %dec_label_pc_1000247a

dec_label_pc_10002470.dec_label_pc_10002470_crit_edge: ; preds = %dec_label_pc_10002470
  %v2_10002472.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_10002470

dec_label_pc_1000247a:                            ; preds = %dec_label_pc_10002470, %dec_label_pc_10002448
  %v3_1000247f = call i8* @__strlwr(i8* bitcast (i8** @global_var_10029f80.71 to i8*))
  %v5_1000247f = ptrtoint i8* %v3_1000247f to i32
  store i32 %v5_1000247f, i32* %eax.global-to-local, align 4
  %v3_1000248b = call i32 @function_10009740(i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32 92)
  store i32 %v3_1000248b, i32* %eax.global-to-local, align 4
  ret i32 %v3_1000248b
}

define i32 @function_100024a0() local_unnamed_addr {
dec_label_pc_100024a0:
  %v0_100024a2 = call i32* @GetCurrentProcess()
  %v3_100024a9 = call i1 @TerminateProcess(i32* %v0_100024a2, i32 ptrtoint (i32* @5 to i32))
  ret i32 1
}

define i32 @function_100024c0() local_unnamed_addr {
dec_label_pc_100024c0:
  %v0_100024c0 = call i1 @AllocConsole()
  %v6_100024cd = call i1 @SetConsoleCtrlHandler(i1 (i32)* bitcast (i1 (i32)** @global_var_100024a0.75 to i1 (i32)*), i1 true)
  %v0_100024d3 = call i32 @___iob_func()
  %v4_100024d8 = inttoptr i32 %v0_100024d3 to %_IO_FILE*
  %v9_100024e3 = call %_IO_FILE* @_freopen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_1002281c.76, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_100226b8.52, i32 0, i32 0), %_IO_FILE* %v4_100024d8)
  %v0_100024e8 = call i32 @___iob_func()
  %v1_100024ed = add i32 %v0_100024e8, 32
  %v4_100024f0 = inttoptr i32 %v1_100024ed to %_IO_FILE*
  %v9_100024fb = call %_IO_FILE* @_freopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_10022810.78, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10022818.77, i32 0, i32 0), %_IO_FILE* %v4_100024f0)
  %v0_10002500 = call i32 @___iob_func()
  %v1_10002505 = add i32 %v0_10002500, 64
  %v4_10002508 = inttoptr i32 %v1_10002505 to %_IO_FILE*
  %v9_10002513 = call %_IO_FILE* @_freopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_10022810.78, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10022818.77, i32 0, i32 0), %_IO_FILE* %v4_10002508)
  %v11_10002513 = ptrtoint %_IO_FILE* %v9_10002513 to i32
  ret i32 %v11_10002513
}

define i32 @function_10002520() {
dec_label_pc_10002520:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st7.global-to-local = alloca x86_fp80, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-196 = alloca i8*, align 4
  %stack_var_-144 = alloca i8*, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002520 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_10002520, i32* %stack_var_-4, align 4
  %v4_10002520 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002520, i32* @ebp, align 4
  %v0_10002531 = load i32, i32* @ecx, align 4
  store i32 %v0_10002531, i32* @esi, align 4
  %v0_10002533 = call i32 @COM_TimestampedLog()
  store i32 %v0_10002533, i32* %eax.global-to-local, align 4
  %v0_1000253c = call i32 @Plat_FloatTime()
  store i32 %v0_1000253c, i32* %eax.global-to-local, align 4
  %v0_10002542 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_10002542 = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v9_10002542 = add i3 %v0_10002542, 1
  store i3 %v9_10002542, i3* %fpu_stat_TOP.global-to-local, align 1
  %v0_1000254d = load i32, i32* @esi, align 4
  store i32 %v0_1000254d, i32* @ecx, align 4
  %v3_1000254f = call i32 @function_10008400(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_1002278c.80, i32 0, i32 0))
  store i32 %v3_1000254f, i32* %eax.global-to-local, align 4
  %v1_10002554 = inttoptr i32 %v3_1000254f to i32*
  %v2_10002554 = load i32, i32* %v1_10002554, align 4
  store i32 %v3_1000254f, i32* @ecx, align 4
  %v1_10002558 = add i32 %v2_10002554, 408
  %v2_10002558 = inttoptr i32 %v1_10002558 to i32*
  %v3_10002558 = load i32, i32* %v2_10002558, align 4
  store i32 %v3_10002558, i32* %eax.global-to-local, align 4
  %v2_10002567 = call i32 @CoInitialize(i32* null)
  store i32 %v2_10002567, i32* %eax.global-to-local, align 4
  %v0_1000256d = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_1000256d, i32* @edi, align 4
  %v0_10002573 = call i32 @CommandLine()
  store i32 %v0_10002573, i32* %eax.global-to-local, align 4
  %v1_10002575 = inttoptr i32 %v0_10002573 to i32*
  %v2_10002575 = load i32, i32* %v1_10002575, align 4
  store i32 0, i32* %stack_var_-180, align 4
  store i32 %v0_10002573, i32* @ecx, align 4
  %v1_1000257b = add i32 %v2_10002575, 12
  %v2_1000257b = inttoptr i32 %v1_1000257b to i32*
  %v3_1000257b = load i32, i32* %v2_1000257b, align 4
  %v1_10002585 = icmp eq i32 %v3_1000257b, 0
  %v1_10002587 = icmp eq i1 %v1_10002585, false
  %v1_1000258a = zext i1 %v1_10002587 to i8
  %v2_1000258a = load i32, i32* @esi, align 4
  %v3_1000258a = add i32 %v2_1000258a, 364
  %v4_1000258a = inttoptr i32 %v3_1000258a to i8*
  store i8 %v1_1000258a, i8* %v4_1000258a, align 1
  store i32 ptrtoint ([14 x i8]* @global_var_10022b24.84 to i32), i32* @ebx, align 4
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %eax.global-to-local, align 4
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_10022b34.83, i32 0, i32 0), i8** %stack_var_-144, align 4
  %v0_100025ba = load i32, i32* @esi, align 4
  store i32 %v0_100025ba, i32* @ecx, align 4
  %v1_10002680 = bitcast i8** %stack_var_-144 to i32*
  %v5_10002680 = load i32, i32* %stack_var_-180, align 4
  %v6_10002680 = call i32 @function_10008d40(i32* %v1_10002680, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022b50.81, i32 0, i32 0), i32 %v5_10002680)
  store i32 %v6_10002680, i32* %eax.global-to-local, align 4
  %v4_10002685 = trunc i32 %v6_10002680 to i8
  %v5_10002685 = icmp eq i8 %v4_10002685, 0
  %v1_10002687 = icmp eq i1 %v5_10002685, false
  br i1 %v1_10002687, label %dec_label_pc_10002692, label %dec_label_pc_10002689

dec_label_pc_10002689:                            ; preds = %dec_label_pc_10002781, %dec_label_pc_10002751, %dec_label_pc_10002734, %dec_label_pc_100026ff, %dec_label_pc_100026eb, %dec_label_pc_10002520
  %v11_1000268b = phi i32 [ 0, %dec_label_pc_10002781 ], [ 0, %dec_label_pc_10002751 ], [ 0, %dec_label_pc_10002734 ], [ 0, %dec_label_pc_100026ff ], [ 0, %dec_label_pc_100026eb ], [ %v6_10002680, %dec_label_pc_10002520 ]
  %v0_10002689 = load i32, i32* @esp, align 4
  %v3_10002689 = add i32 %v0_10002689, 4
  %v1_1000268a = inttoptr i32 %v3_10002689 to i32*
  %v2_1000268a = load i32, i32* %v1_1000268a, align 4
  store i32 %v2_1000268a, i32* %esi.global-to-local, align 4
  %v12_1000268b = and i32 %v11_1000268b, -256
  store i32 %v12_1000268b, i32* %eax.global-to-local, align 4
  %v2_10002690 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002690, i32* %ebp.global-to-local, align 4
  ret i32 %v12_1000268b

dec_label_pc_10002692:                            ; preds = %dec_label_pc_10002520
  %v0_10002692 = call i32 @CommandLine()
  store i32 %v0_10002692, i32* %eax.global-to-local, align 4
  %v1_10002694 = inttoptr i32 %v0_10002692 to i32*
  %v2_10002694 = load i32, i32* %v1_10002694, align 4
  store i32 %v0_10002692, i32* @ecx, align 4
  %v1_10002698 = add i32 %v2_10002694, 40
  %v2_10002698 = inttoptr i32 %v1_10002698 to i32*
  %v3_10002698 = load i32, i32* %v2_10002698, align 4
  store i32 %v3_10002698, i32* %eax.global-to-local, align 4
  %v1_100026a2 = icmp eq i32 %v3_10002698, 0
  br i1 %v1_100026a2, label %dec_label_pc_100026ba, label %dec_label_pc_100026a6

dec_label_pc_100026a6:                            ; preds = %dec_label_pc_10002692
  %v0_100026a6 = call i32 @CommandLine()
  store i32 %v0_100026a6, i32* %eax.global-to-local, align 4
  %v1_100026a8 = inttoptr i32 %v0_100026a6 to i32*
  %v2_100026a8 = load i32, i32* %v1_100026a8, align 4
  store i32 %v0_100026a6, i32* @ecx, align 4
  %v1_100026ac = add i32 %v2_100026a8, 40
  %v2_100026ac = inttoptr i32 %v1_100026ac to i32*
  %v3_100026ac = load i32, i32* %v2_100026ac, align 4
  store i32 %v3_100026ac, i32* %eax.global-to-local, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022954.111, i32 0, i32 0), i8** %stack_var_-196, align 4
  %v4_100026af = ptrtoint i8** %stack_var_-196 to i32
  %v1_100026b6 = icmp eq i32 %v3_100026ac, 0
  br i1 %v1_100026b6, label %dec_label_pc_100026ce, label %dec_label_pc_100026ba

dec_label_pc_100026ba:                            ; preds = %dec_label_pc_100026a6, %dec_label_pc_10002692
  %v0_100026ba = call i32 @CommandLine()
  store i32 %v0_100026ba, i32* %eax.global-to-local, align 4
  %v1_100026bc = inttoptr i32 %v0_100026ba to i32*
  %v2_100026bc = load i32, i32* %v1_100026bc, align 4
  store i32 %v0_100026ba, i32* @ecx, align 4
  %v1_100026c0 = add i32 %v2_100026bc, 40
  %v2_100026c0 = inttoptr i32 %v1_100026c0 to i32*
  %v3_100026c0 = load i32, i32* %v2_100026c0, align 4
  store i32 %v3_100026c0, i32* %eax.global-to-local, align 4
  %v0_100026c3 = load i32, i32* @esp, align 4
  %v1_100026c3 = add i32 %v0_100026c3, -4
  %v2_100026c3 = inttoptr i32 %v1_100026c3 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_10022950.112 to i32), i32* %v2_100026c3, align 4
  %v1_100026ca = icmp eq i32 %v3_100026c0, 0
  br i1 %v1_100026ca, label %dec_label_pc_100026ff, label %dec_label_pc_100026ce

dec_label_pc_100026ce:                            ; preds = %dec_label_pc_100026ba, %dec_label_pc_100026a6
  %v0_100026ce = phi i32 [ %v1_100026c3, %dec_label_pc_100026ba ], [ %v4_100026af, %dec_label_pc_100026a6 ]
  %v1_100026ce = add i32 %v0_100026ce, -4
  %v2_100026ce = inttoptr i32 %v1_100026ce to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022944.113 to i32), i32* %v2_100026ce, align 4
  %v0_100026d3 = load i32, i32* @esi, align 4
  store i32 %v0_100026d3, i32* @ecx, align 4
  %v1_100026d5 = call i32 @function_10008260(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100026d5, i32* %eax.global-to-local, align 4
  %v0_100026da = load i32, i32* @esp, align 4
  %v1_100026da = add i32 %v0_100026da, -4
  %v2_100026da = inttoptr i32 %v1_100026da to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_1002293c.114 to i32), i32* %v2_100026da, align 4
  %v0_100026df = load i32, i32* %eax.global-to-local, align 4
  %v2_100026df = add i32 %v0_100026da, -8
  %v3_100026df = inttoptr i32 %v2_100026df to i32*
  store i32 %v0_100026df, i32* %v3_100026df, align 4
  %v0_100026e0 = load i32, i32* @esi, align 4
  store i32 %v0_100026e0, i32* @ecx, align 4
  %v2_100026e2 = call i32 @function_10008c00(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100026e2, i32* %eax.global-to-local, align 4
  %v1_100026e7 = icmp eq i32 %v2_100026e2, 0
  %v1_100026e9 = icmp eq i1 %v1_100026e7, false
  br i1 %v1_100026e9, label %dec_label_pc_100026ce.dec_label_pc_100026ff_crit_edge, label %dec_label_pc_100026eb

dec_label_pc_100026ce.dec_label_pc_100026ff_crit_edge: ; preds = %dec_label_pc_100026ce
  %v0_100026ff.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100026ff

dec_label_pc_100026eb:                            ; preds = %dec_label_pc_100026ce
  %v0_100026eb = call i32 @CommandLine()
  store i32 %v0_100026eb, i32* %eax.global-to-local, align 4
  %v1_100026ed = inttoptr i32 %v0_100026eb to i32*
  %v2_100026ed = load i32, i32* %v1_100026ed, align 4
  store i32 %v0_100026eb, i32* @ecx, align 4
  %v1_100026f1 = add i32 %v2_100026ed, 40
  %v2_100026f1 = inttoptr i32 %v1_100026f1 to i32*
  %v3_100026f1 = load i32, i32* %v2_100026f1, align 4
  store i32 %v3_100026f1, i32* %eax.global-to-local, align 4
  %v0_100026f4 = load i32, i32* @esp, align 4
  %v1_100026f4 = add i32 %v0_100026f4, -4
  %v2_100026f4 = inttoptr i32 %v1_100026f4 to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_10022700.115 to i32), i32* %v2_100026f4, align 4
  %v0_100026fb = load i32, i32* %eax.global-to-local, align 4
  %v1_100026fb = icmp eq i32 %v0_100026fb, 0
  br i1 %v1_100026fb, label %dec_label_pc_10002689, label %dec_label_pc_100026ff

dec_label_pc_100026ff:                            ; preds = %dec_label_pc_100026ce.dec_label_pc_100026ff_crit_edge, %dec_label_pc_100026eb, %dec_label_pc_100026ba
  %v0_100026ff = phi i32 [ %v0_100026ff.pre, %dec_label_pc_100026ce.dec_label_pc_100026ff_crit_edge ], [ %v1_100026f4, %dec_label_pc_100026eb ], [ %v1_100026c3, %dec_label_pc_100026ba ]
  %v1_100026ff = add i32 %v0_100026ff, -4
  %v2_100026ff = inttoptr i32 %v1_100026ff to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022930.116 to i32), i32* %v2_100026ff, align 4
  %v0_10002704 = load i32, i32* @esi, align 4
  store i32 %v0_10002704, i32* @ecx, align 4
  %v1_10002706 = call i32 @function_10008260(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10002706, i32* %eax.global-to-local, align 4
  %v0_1000270b = load i32, i32* @esp, align 4
  %v1_1000270b = add i32 %v0_1000270b, -4
  %v2_1000270b = inttoptr i32 %v1_1000270b to i32*
  store i32 ptrtoint ([17 x i8]* @global_var_1002291c.117 to i32), i32* %v2_1000270b, align 4
  %v0_10002710 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002710 = add i32 %v0_1000270b, -8
  %v3_10002710 = inttoptr i32 %v2_10002710 to i32*
  store i32 %v0_10002710, i32* %v3_10002710, align 4
  %v0_10002711 = load i32, i32* @esi, align 4
  store i32 %v0_10002711, i32* @ecx, align 4
  %v2_10002713 = call i32 @function_10008c00(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10002713, i32* %eax.global-to-local, align 4
  %v1_10002718 = icmp eq i32 %v2_10002713, 0
  br i1 %v1_10002718, label %dec_label_pc_10002689, label %dec_label_pc_10002720

dec_label_pc_10002720:                            ; preds = %dec_label_pc_100026ff
  %v0_10002720 = call i32 @CommandLine()
  store i32 %v0_10002720, i32* %eax.global-to-local, align 4
  %v1_10002722 = inttoptr i32 %v0_10002720 to i32*
  %v2_10002722 = load i32, i32* %v1_10002722, align 4
  store i32 %v0_10002720, i32* @ecx, align 4
  %v1_10002726 = add i32 %v2_10002722, 40
  %v2_10002726 = inttoptr i32 %v1_10002726 to i32*
  %v3_10002726 = load i32, i32* %v2_10002726, align 4
  store i32 %v3_10002726, i32* %eax.global-to-local, align 4
  %v0_10002729 = load i32, i32* @esp, align 4
  %v1_10002729 = add i32 %v0_10002729, -4
  %v2_10002729 = inttoptr i32 %v1_10002729 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_10022914.118 to i32), i32* %v2_10002729, align 4
  %v1_10002730 = icmp eq i32 %v3_10002726, 0
  br i1 %v1_10002730, label %dec_label_pc_10002751, label %dec_label_pc_10002734

dec_label_pc_10002734:                            ; preds = %dec_label_pc_10002720
  %v0_10002734 = load i32, i32* @ebx, align 4
  %v2_10002734 = add i32 %v0_10002729, -8
  %v3_10002734 = inttoptr i32 %v2_10002734 to i32*
  store i32 %v0_10002734, i32* %v3_10002734, align 4
  %v0_10002735 = load i32, i32* @esi, align 4
  store i32 %v0_10002735, i32* @ecx, align 4
  %v1_10002737 = call i32 @function_10008260(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10002737, i32* %eax.global-to-local, align 4
  %v0_1000273c = load i32, i32* @esp, align 4
  %v1_1000273c = add i32 %v0_1000273c, -4
  %v2_1000273c = inttoptr i32 %v1_1000273c to i32*
  store i32 ptrtoint ([26 x i8]* @global_var_100228f8.119 to i32), i32* %v2_1000273c, align 4
  %v0_10002741 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002741 = add i32 %v0_1000273c, -8
  %v3_10002741 = inttoptr i32 %v2_10002741 to i32*
  store i32 %v0_10002741, i32* %v3_10002741, align 4
  %v0_10002742 = load i32, i32* @esi, align 4
  store i32 %v0_10002742, i32* @ecx, align 4
  %v2_10002744 = call i32 @function_10008c00(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10002744, i32* %eax.global-to-local, align 4
  %v1_10002749 = icmp eq i32 %v2_10002744, 0
  br i1 %v1_10002749, label %dec_label_pc_10002689, label %dec_label_pc_10002734.dec_label_pc_10002751_crit_edge

dec_label_pc_10002734.dec_label_pc_10002751_crit_edge: ; preds = %dec_label_pc_10002734
  %v0_10002751.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10002751

dec_label_pc_10002751:                            ; preds = %dec_label_pc_10002734.dec_label_pc_10002751_crit_edge, %dec_label_pc_10002720
  %v0_10002751 = phi i32 [ %v0_10002751.pre, %dec_label_pc_10002734.dec_label_pc_10002751_crit_edge ], [ %v1_10002729, %dec_label_pc_10002720 ]
  %v1_10002751 = add i32 %v0_10002751, -4
  %v2_10002751 = inttoptr i32 %v1_10002751 to i32*
  store i32 ptrtoint ([19 x i8]* @global_var_10022a78.93 to i32), i32* %v2_10002751, align 4
  %v0_10002756 = load i32, i32* @esi, align 4
  store i32 %v0_10002756, i32* @ecx, align 4
  %v1_10002758 = call i32 @function_10008400(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10002758, i32* %eax.global-to-local, align 4
  store i32 %v1_10002758, i32* @ebx, align 4
  %v1_1000275f = icmp eq i32 %v1_10002758, 0
  br i1 %v1_1000275f, label %dec_label_pc_10002689, label %dec_label_pc_10002767

dec_label_pc_10002767:                            ; preds = %dec_label_pc_10002751
  %v0_10002767 = load i32, i32* @esp, align 4
  %v1_10002767 = add i32 %v0_10002767, -4
  %v2_10002767 = inttoptr i32 %v1_10002767 to i32*
  store i32 ptrtoint ([32 x i8]* @global_var_10022964.109 to i32), i32* %v2_10002767, align 4
  %v0_1000276c = load i32, i32* @esi, align 4
  store i32 %v0_1000276c, i32* @ecx, align 4
  %v1_1000276e = call i32 @function_10008400(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_1000276e, i32* %eax.global-to-local, align 4
  %v0_10002773 = load i32, i32* @esi, align 4
  %v1_10002773 = add i32 %v0_10002773, 364
  %v2_10002773 = inttoptr i32 %v1_10002773 to i8*
  %v3_10002773 = load i8, i8* %v2_10002773, align 1
  %v10_10002773 = icmp eq i8 %v3_10002773, 0
  store i32 %v1_1000276e, i32* @global_var_10029f7c.120, align 4
  br i1 %v10_10002773, label %dec_label_pc_100027a7, label %dec_label_pc_10002781

dec_label_pc_10002781:                            ; preds = %dec_label_pc_10002767
  %v0_10002781 = load i32, i32* @esp, align 4
  %v1_10002781 = add i32 %v0_10002781, -4
  %v2_10002781 = inttoptr i32 %v1_10002781 to i32*
  store i32 ptrtoint ([15 x i8]* @global_var_100228e8.121 to i32), i32* %v2_10002781, align 4
  %v0_10002786 = load i32, i32* @esi, align 4
  store i32 %v0_10002786, i32* @ecx, align 4
  %v1_10002788 = call i32 @function_10008260(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10002788, i32* %eax.global-to-local, align 4
  %v0_1000278d = load i32, i32* @esp, align 4
  %v1_1000278d = add i32 %v0_1000278d, -4
  %v2_1000278d = inttoptr i32 %v1_1000278d to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_100228dc.122 to i32), i32* %v2_1000278d, align 4
  %v0_10002792 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002792 = add i32 %v0_1000278d, -8
  %v3_10002792 = inttoptr i32 %v2_10002792 to i32*
  store i32 %v0_10002792, i32* %v3_10002792, align 4
  %v0_10002793 = load i32, i32* @esi, align 4
  store i32 %v0_10002793, i32* @ecx, align 4
  %v2_10002795 = call i32 @function_10008c00(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10002795, i32* %eax.global-to-local, align 4
  store i32 %v2_10002795, i32* @global_var_10029f78.123, align 4
  %v1_1000279f = icmp eq i32 %v2_10002795, 0
  br i1 %v1_1000279f, label %dec_label_pc_10002689, label %dec_label_pc_100027a7

dec_label_pc_100027a7:                            ; preds = %dec_label_pc_10002781, %dec_label_pc_10002767
  store i32 ptrtoint ([17 x i8]* @global_var_100228c8.124 to i32), i32* %esi.global-to-local, align 4
  store i32 0, i32* %stack_var_-8, align 4
  %v0_100027b3 = call i32 @CommandLine()
  store i32 %v0_100027b3, i32* %eax.global-to-local, align 4
  %v1_100027b5 = inttoptr i32 %v0_100027b3 to i32*
  %v2_100027b5 = load i32, i32* %v1_100027b5, align 4
  store i32 %v0_100027b3, i32* @ecx, align 4
  %v1_100027b9 = add i32 %v2_100027b5, 40
  %v2_100027b9 = inttoptr i32 %v1_100027b9 to i32*
  %v3_100027b9 = load i32, i32* %v2_100027b9, align 4
  store i32 %v3_100027b9, i32* %eax.global-to-local, align 4
  %v0_100027bc = load i32, i32* @esp, align 4
  %v1_100027bc = add i32 %v0_100027bc, -4
  %v2_100027bc = inttoptr i32 %v1_100027bc to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_100228b8.125 to i32), i32* %v2_100027bc, align 4
  %v1_100027c3 = icmp eq i32 %v3_100027b9, 0
  br i1 %v1_100027c3, label %dec_label_pc_100027cc, label %dec_label_pc_100027c7

dec_label_pc_100027c7:                            ; preds = %dec_label_pc_100027a7
  store i32 ptrtoint ([19 x i8]* @global_var_100228a4.126 to i32), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100027cc

dec_label_pc_100027cc:                            ; preds = %dec_label_pc_100027c7, %dec_label_pc_100027a7
  %v0_100027cc = call i32 @CommandLine()
  store i32 %v0_100027cc, i32* %eax.global-to-local, align 4
  %v2_100027d3 = ptrtoint i32* %stack_var_-8 to i32
  %v1_100027d6 = load i32, i32* @esp, align 4
  %v2_100027d6 = add i32 %v1_100027d6, -4
  %v3_100027d6 = inttoptr i32 %v2_100027d6 to i32*
  store i32 %v2_100027d3, i32* %v3_100027d6, align 4
  %v1_100027d7 = add i32 %v1_100027d6, -8
  %v2_100027d7 = inttoptr i32 %v1_100027d7 to i32*
  store i32 ptrtoint ([11 x i8]* @global_var_10022898.127 to i32), i32* %v2_100027d7, align 4
  store i32 %v0_100027cc, i32* @ecx, align 4
  %v1_100027e0 = icmp eq i32 %v0_100027cc, 0
  %v1_100027e2 = inttoptr i32 %v1_10002758 to i32*
  %v2_100027e2 = load i32, i32* %v1_100027e2, align 4
  store i32 %v2_100027e2, i32* %eax.global-to-local, align 4
  %v1_100027e4 = icmp eq i1 %v1_100027e0, false
  %v2_100027e4 = load i32, i32* %esi.global-to-local, align 4
  %v6_100027e4 = load i32, i32* %stack_var_-8, align 4
  %v7_100027e4 = select i1 %v1_100027e4, i32 %v6_100027e4, i32 %v2_100027e4
  store i32 %v7_100027e4, i32* %esi.global-to-local, align 4
  %v2_100027eb = add i32 %v1_100027d6, -12
  %v3_100027eb = inttoptr i32 %v2_100027eb to i32*
  store i32 %v7_100027e4, i32* %v3_100027eb, align 4
  store i32 %v1_10002758, i32* @ecx, align 4
  %v0_100027f0 = call i32 @Plat_FloatTime()
  store i32 %v0_100027f0, i32* %eax.global-to-local, align 4
  %v1_100027f6 = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v11_100027f6 = fsub x86_fp80 %v1_100027f6, %v1_10002542
  store x86_fp80 %v11_100027f6, x86_fp80* %st7.global-to-local, align 4
  %v0_100027fc = load i32, i32* @esp, align 4
  %v1_100027fc = add i32 %v0_100027fc, -8
  %v0_100027ff = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v3_100027ff = fptrunc x86_fp80 %v11_100027f6 to double
  %v4_100027ff = inttoptr i32 %v1_100027fc to double*
  store double %v3_100027ff, double* %v4_100027ff, align 4
  %v5_100027ff = add i3 %v0_100027ff, 1
  store i3 %v5_100027ff, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_10002802 = add i32 %v0_100027fc, -12
  %v2_10002802 = inttoptr i32 %v1_10002802 to i32*
  store i32 ptrtoint ([86 x i8]* @global_var_10022840.128 to i32), i32* %v2_10002802, align 4
  %v0_10002807 = call i32 @COM_TimestampedLog()
  store i32 %v0_10002807, i32* %eax.global-to-local, align 4
  %v0_1000280d = load i32, i32* @esp, align 4
  %v3_10002810 = add i32 %v0_1000280d, 16
  %v1_10002811 = inttoptr i32 %v3_10002810 to i32*
  %v2_10002811 = load i32, i32* %v1_10002811, align 4
  store i32 %v2_10002811, i32* %esi.global-to-local, align 4
  %v1_10002812 = and i32 %v0_10002807, -256
  %v2_10002812 = or i32 %v1_10002812, 1
  store i32 %v2_10002812, i32* %eax.global-to-local, align 4
  %v2_10002817 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002817, i32* %ebp.global-to-local, align 4
  ret i32 %v2_10002812
}

define i32 @function_10002820() {
dec_label_pc_10002820:
  %v0_10002820 = load i32, i32* @global_var_10029f7c.120, align 4
  store i32 %v0_10002820, i32* @ecx, align 4
  %v1_10002826 = inttoptr i32 %v0_10002820 to i32*
  %v2_10002826 = load i32, i32* %v1_10002826, align 4
  ret i32 %v2_10002826
}

define i32 @function_10002830() {
dec_label_pc_10002830:
  store i32 0, i32* @global_var_10029f7c.120, align 4
  store i32 0, i32* @global_var_1002b968.129, align 4
  store i32 0, i32* @global_var_10029f78.123, align 4
  store i32 0, i32* @global_var_1002a190.130, align 4
  call void @CoUninitialize()
  ret i32 ptrtoint (i32* @5 to i32)
}

define i32 @function_10002850(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10002850:
  %v0_10002850 = load i32, i32* @ecx, align 4
  %v1_10002850 = add i32 %v0_10002850, 364
  %v2_10002850 = inttoptr i32 %v1_10002850 to i8*
  %v3_10002850 = load i8, i8* %v2_10002850, align 1
  %v10_10002850 = icmp eq i8 %v3_10002850, 0
  %v1_10002857 = icmp eq i1 %v10_10002850, false
  br i1 %v1_10002857, label %dec_label_pc_10002873, label %dec_label_pc_10002859

dec_label_pc_10002859:                            ; preds = %dec_label_pc_10002850
  %v0_10002859 = call i32 @CommandLine()
  %v1_1000285f = inttoptr i32 %v0_10002859 to i32*
  %v2_1000285f = load i32, i32* %v1_1000285f, align 4
  store i32 %v0_10002859, i32* @ecx, align 4
  %v1_10002868 = add i32 %v2_1000285f, 32
  %v2_10002868 = inttoptr i32 %v1_10002868 to i32*
  %v3_10002868 = load i32, i32* %v2_10002868, align 4
  ret i32 %v3_10002868

dec_label_pc_10002873:                            ; preds = %dec_label_pc_10002850
  %v0_10002873 = load i32, i32* @global_var_10029f78.123, align 4
  store i32 %v0_10002873, i32* @ecx, align 4
  %v1_10002879 = inttoptr i32 %v0_10002873 to i32*
  %v2_10002879 = load i32, i32* %v1_10002879, align 4
  %v1_1000287b = add i32 %v2_10002879, 48
  %v2_1000287b = inttoptr i32 %v1_1000287b to i32*
  %v3_1000287b = load i32, i32* %v2_1000287b, align 4
  ret i32 %v3_1000287b
}

define i32 @function_10002880(i32 %arg1) local_unnamed_addr {
dec_label_pc_10002880:
  %v0_10002880 = load i32, i32* @ecx, align 4
  %v1_10002880 = add i32 %v0_10002880, 364
  %v2_10002880 = inttoptr i32 %v1_10002880 to i8*
  %v3_10002880 = load i8, i8* %v2_10002880, align 1
  %v10_10002880 = icmp eq i8 %v3_10002880, 0
  %v1_10002887 = icmp eq i1 %v10_10002880, false
  br i1 %v1_10002887, label %dec_label_pc_100028a3, label %dec_label_pc_10002889

dec_label_pc_10002889:                            ; preds = %dec_label_pc_10002880
  %v0_10002889 = call i32 @CommandLine()
  %v1_1000288f = inttoptr i32 %v0_10002889 to i32*
  %v2_1000288f = load i32, i32* %v1_1000288f, align 4
  store i32 %v0_10002889, i32* @ecx, align 4
  %v1_10002898 = add i32 %v2_1000288f, 32
  %v2_10002898 = inttoptr i32 %v1_10002898 to i32*
  %v3_10002898 = load i32, i32* %v2_10002898, align 4
  ret i32 %v3_10002898

dec_label_pc_100028a3:                            ; preds = %dec_label_pc_10002880
  %v0_100028a3 = load i32, i32* @global_var_10029f78.123, align 4
  store i32 %v0_100028a3, i32* @ecx, align 4
  %v1_100028a9 = inttoptr i32 %v0_100028a3 to i32*
  %v2_100028a9 = load i32, i32* %v1_100028a9, align 4
  %v1_100028ab = add i32 %v2_100028a9, 52
  %v2_100028ab = inttoptr i32 %v1_100028ab to i32*
  %v3_100028ab = load i32, i32* %v2_100028ab, align 4
  ret i32 %v3_100028ab
}

define i32 @function_100028b0() local_unnamed_addr {
dec_label_pc_100028b0:
  %v9_100028b9 = call i32* @CreateMutexA(%_SECURITY_ATTRIBUTES* null, i1 false, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_10022ba8.133, i32 0, i32 0))
  %v11_100028b9 = ptrtoint i32* %v9_100028b9 to i32
  store i32 %v11_100028b9, i32* @global_var_1002a194.134, align 4
  %v3_100028c7 = call i32 @WaitForSingleObject(i32* %v9_100028b9, i32 0)
  %v1_100028cd = icmp eq i32 %v3_100028c7, 0
  br i1 %v1_100028cd, label %dec_label_pc_10002910, label %dec_label_pc_100028d1

dec_label_pc_100028d1:                            ; preds = %dec_label_pc_100028b0
  %v9_100028d1 = icmp eq i32 %v3_100028c7, 128
  br i1 %v9_100028d1, label %dec_label_pc_10002910, label %dec_label_pc_100028d8

dec_label_pc_100028d8:                            ; preds = %dec_label_pc_100028d1
  %v0_100028d8 = load i32, i32* @global_var_1002a194.134, align 4
  %v1_100028de = inttoptr i32 %v0_100028d8 to i32*
  %v2_100028de = call i1 @CloseHandle(i32* %v1_100028de)
  %v3_100028e9 = call i8* @_getenv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022b9c.135, i32 0, i32 0))
  %v1_100028f1 = icmp eq i8* %v3_100028e9, null
  br i1 %v1_100028f1, label %dec_label_pc_1000290d, label %dec_label_pc_100028f5

dec_label_pc_100028f5:                            ; preds = %dec_label_pc_100028d8
  %v0_100028f5 = call i32 @CommandLine()
  %v1_100028fb = inttoptr i32 %v0_100028f5 to i32*
  %v2_100028fb = load i32, i32* %v1_100028fb, align 4
  store i32 %v0_100028f5, i32* @ecx, align 4
  %v1_100028ff = add i32 %v2_100028fb, 40
  %v2_100028ff = inttoptr i32 %v1_100028ff to i32*
  %v3_100028ff = load i32, i32* %v2_100028ff, align 4
  %v1_10002909 = icmp eq i32 %v3_100028ff, 0
  %v1_1000290b = icmp eq i1 %v1_10002909, false
  br i1 %v1_1000290b, label %dec_label_pc_10002910, label %dec_label_pc_1000290d

dec_label_pc_1000290d:                            ; preds = %dec_label_pc_100028f5, %dec_label_pc_100028d8
  %v11_1000290d = phi i32 [ %v3_100028ff, %dec_label_pc_100028f5 ], [ 0, %dec_label_pc_100028d8 ]
  %v12_1000290d = and i32 %v11_1000290d, -256
  ret i32 %v12_1000290d

dec_label_pc_10002910:                            ; preds = %dec_label_pc_100028f5, %dec_label_pc_100028d1, %dec_label_pc_100028b0
  %v0_10002910 = phi i32 [ %v3_100028ff, %dec_label_pc_100028f5 ], [ %v3_100028c7, %dec_label_pc_100028d1 ], [ 0, %dec_label_pc_100028b0 ]
  %v1_10002910 = and i32 %v0_10002910, -256
  %v2_10002910 = or i32 %v1_10002910, 1
  ret i32 %v2_10002910
}

define i32 @function_10002920() local_unnamed_addr {
dec_label_pc_10002920:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %v16_10002923 = ptrtoint i32* %stack_var_-264 to i32
  %v0_1000292c = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_1000292c, i32* @edi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  %v0_10002936 = call i32 @CommandLine()
  store i32 %v0_10002936, i32* %eax.global-to-local, align 4
  %v1_10002938 = inttoptr i32 %v0_10002936 to i32*
  %v2_10002938 = load i32, i32* %v1_10002938, align 4
  store i32 %v2_10002938, i32* %edx.global-to-local, align 4
  store i32 %v0_10002936, i32* @ecx, align 4
  %v1_1000293c = add i32 %v2_10002938, 36
  %v2_1000293c = inttoptr i32 %v1_1000293c to i32*
  %v3_1000293c = load i32, i32* %v2_1000293c, align 4
  %v1_10002941 = add i32 %v3_1000293c, -1
  store i32 %v1_10002941, i32* %eax.global-to-local, align 4
  %tmp12 = icmp slt i32 %v1_10002941, 1
  br i1 %tmp12, label %dec_label_pc_100029d3, label %dec_label_pc_10002950

dec_label_pc_10002950:                            ; preds = %dec_label_pc_10002920, %dec_label_pc_10002996
  %v0_10002950 = call i32 @CommandLine()
  store i32 %v0_10002950, i32* %eax.global-to-local, align 4
  %v1_10002952 = inttoptr i32 %v0_10002950 to i32*
  %v2_10002952 = load i32, i32* %v1_10002952, align 4
  store i32 %v2_10002952, i32* %edx.global-to-local, align 4
  %v0_10002954 = load i32, i32* @esp, align 4
  %v1_10002954 = add i32 %v0_10002954, -4
  %v2_10002954 = inttoptr i32 %v1_10002954 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_10002954, align 4
  %v0_10002959 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10002959, i32* @ecx, align 4
  %v0_1000295b = load i32, i32* %edx.global-to-local, align 4
  %v1_1000295b = add i32 %v0_1000295b, 44
  %v2_1000295b = inttoptr i32 %v1_1000295b to i32*
  %v3_1000295b = load i32, i32* %v2_1000295b, align 4
  store i32 %v3_1000295b, i32* %eax.global-to-local, align 4
  %v0_1000295e = load i32, i32* @esi, align 4
  %v2_1000295e = add i32 %v0_10002954, -8
  %v3_1000295e = inttoptr i32 %v2_1000295e to i32*
  store i32 %v0_1000295e, i32* %v3_1000295e, align 4
  %v0_10002961 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002961 = add i32 %v0_10002954, -12
  %v3_10002961 = inttoptr i32 %v2_10002961 to i32*
  store i32 %v0_10002961, i32* %v3_10002961, align 4
  %v1_10002962 = call i32 @function_100094b0(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10002962, i32* %eax.global-to-local, align 4
  %v1_1000296a = icmp eq i32 %v1_10002962, 0
  %v1_1000296c = icmp eq i1 %v1_1000296a, false
  br i1 %v1_1000296c, label %dec_label_pc_10002996, label %dec_label_pc_1000296e

dec_label_pc_1000296e:                            ; preds = %dec_label_pc_10002950
  %v0_1000296e = call i32 @CommandLine()
  store i32 %v0_1000296e, i32* %eax.global-to-local, align 4
  %v1_10002970 = inttoptr i32 %v0_1000296e to i32*
  %v2_10002970 = load i32, i32* %v1_10002970, align 4
  store i32 %v2_10002970, i32* %edx.global-to-local, align 4
  %v0_10002972 = load i32, i32* @esi, align 4
  %v1_10002972 = add i32 %v0_10002972, 1
  store i32 %v1_10002972, i32* @esi, align 4
  store i32 %v0_1000296e, i32* @ecx, align 4
  %v1_10002975 = add i32 %v2_10002970, 44
  %v2_10002975 = inttoptr i32 %v1_10002975 to i32*
  %v3_10002975 = load i32, i32* %v2_10002975, align 4
  store i32 %v3_10002975, i32* %eax.global-to-local, align 4
  %v1_10002978 = load i32, i32* @esp, align 4
  %v2_10002978 = add i32 %v1_10002978, -4
  %v3_10002978 = inttoptr i32 %v2_10002978 to i32*
  store i32 %v1_10002972, i32* %v3_10002978, align 4
  %v0_1000297b = load i32, i32* %eax.global-to-local, align 4
  %v2_1000297b = add i32 %v1_10002978, -8
  %v3_1000297b = inttoptr i32 %v2_1000297b to i32*
  store i32 %v0_1000297b, i32* %v3_1000297b, align 4
  %v1_1000297c = add i32 %v1_10002978, -12
  %v2_1000297c = inttoptr i32 %v1_1000297c to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_10022bbc.137 to i32), i32* %v2_1000297c, align 4
  store i32 %v16_10002923, i32* @ecx, align 4
  %v1_10002987 = add i32 %v1_10002978, -16
  %v2_10002987 = inttoptr i32 %v1_10002987 to i32*
  store i32 260, i32* %v2_10002987, align 4
  %v2_1000298c = add i32 %v1_10002978, -20
  %v3_1000298c = inttoptr i32 %v2_1000298c to i32*
  store i32 %v16_10002923, i32* %v3_1000298c, align 4
  %v2_1000298d = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_1000298d, i32* %eax.global-to-local, align 4
  %v0_10002995 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002995 = add i32 %v0_10002995, 1
  store i32 %v1_10002995, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10002996

dec_label_pc_10002996:                            ; preds = %dec_label_pc_1000296e, %dec_label_pc_10002950
  %v0_10002996 = load i32, i32* @esi, align 4
  %v1_10002996 = add i32 %v0_10002996, 1
  store i32 %v1_10002996, i32* @esi, align 4
  %v0_10002997 = call i32 @CommandLine()
  store i32 %v0_10002997, i32* %eax.global-to-local, align 4
  %v1_10002999 = inttoptr i32 %v0_10002997 to i32*
  %v2_10002999 = load i32, i32* %v1_10002999, align 4
  store i32 %v2_10002999, i32* %edx.global-to-local, align 4
  store i32 %v0_10002997, i32* @ecx, align 4
  %v1_1000299d = add i32 %v2_10002999, 36
  %v2_1000299d = inttoptr i32 %v1_1000299d to i32*
  %v3_1000299d = load i32, i32* %v2_1000299d, align 4
  %v1_100029a2 = add i32 %v3_1000299d, -1
  store i32 %v1_100029a2, i32* %eax.global-to-local, align 4
  %v0_100029a3 = load i32, i32* @esi, align 4
  %v5_100029a5 = icmp slt i32 %v0_100029a3, %v1_100029a2
  br i1 %v5_100029a5, label %dec_label_pc_10002950, label %dec_label_pc_100029a7

dec_label_pc_100029a7:                            ; preds = %dec_label_pc_10002996
  %v0_100029a7 = load i32, i32* %ebx.global-to-local, align 4
  %v7_100029aa = icmp sgt i32 %v0_100029a7, 1
  br i1 %v7_100029aa, label %dec_label_pc_100029ac, label %dec_label_pc_100029d3

dec_label_pc_100029ac:                            ; preds = %dec_label_pc_100029a7
  %v0_100029ac = call i32 @CommandLine()
  store i32 %v0_100029ac, i32* %eax.global-to-local, align 4
  %v1_100029ae = inttoptr i32 %v0_100029ac to i32*
  %v2_100029ae = load i32, i32* %v1_100029ae, align 4
  store i32 %v2_100029ae, i32* %edx.global-to-local, align 4
  store i32 %v0_100029ac, i32* @ecx, align 4
  %v1_100029b2 = add i32 %v2_100029ae, 16
  %v2_100029b2 = inttoptr i32 %v1_100029b2 to i32*
  %v3_100029b2 = load i32, i32* %v2_100029b2, align 4
  store i32 %v3_100029b2, i32* %eax.global-to-local, align 4
  %v0_100029b5 = load i32, i32* @esp, align 4
  %v1_100029b5 = add i32 %v0_100029b5, -4
  %v2_100029b5 = inttoptr i32 %v1_100029b5 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_100029b5, align 4
  %v0_100029bc = call i32 @CommandLine()
  store i32 %v0_100029bc, i32* %eax.global-to-local, align 4
  %v1_100029be = inttoptr i32 %v0_100029bc to i32*
  %v2_100029be = load i32, i32* %v1_100029be, align 4
  store i32 %v2_100029be, i32* %edx.global-to-local, align 4
  %v1_100029c0 = add i32 %v2_100029be, 20
  %v2_100029c0 = inttoptr i32 %v1_100029c0 to i32*
  %v3_100029c0 = load i32, i32* %v2_100029c0, align 4
  store i32 %v3_100029c0, i32* %edx.global-to-local, align 4
  %v1_100029c9 = load i32, i32* @esp, align 4
  %v2_100029c9 = add i32 %v1_100029c9, -4
  %v3_100029c9 = inttoptr i32 %v2_100029c9 to i32*
  store i32 %v16_10002923, i32* %v3_100029c9, align 4
  %v1_100029ca = add i32 %v1_100029c9, -8
  %v2_100029ca = inttoptr i32 %v1_100029ca to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_100029ca, align 4
  %v0_100029cf = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_100029cf, i32* @ecx, align 4
  br label %dec_label_pc_100029d3

dec_label_pc_100029d3:                            ; preds = %dec_label_pc_100029a7, %dec_label_pc_100029ac, %dec_label_pc_10002920
  %v0_100029d9 = phi i32 [ %v1_100029a2, %dec_label_pc_100029a7 ], [ %v0_100029cf, %dec_label_pc_100029ac ], [ %v1_10002941, %dec_label_pc_10002920 ]
  %v0_100029d3 = load i32, i32* @esp, align 4
  %v1_100029d3 = inttoptr i32 %v0_100029d3 to i32*
  %v2_100029d3 = load i32, i32* %v1_100029d3, align 4
  store i32 %v2_100029d3, i32* @edi, align 4
  %v3_100029d3 = add i32 %v0_100029d3, 4
  %v1_100029d4 = inttoptr i32 %v3_100029d3 to i32*
  %v2_100029d4 = load i32, i32* %v1_100029d4, align 4
  store i32 %v2_100029d4, i32* @esi, align 4
  %v3_100029d4 = add i32 %v0_100029d3, 8
  %v1_100029d5 = inttoptr i32 %v3_100029d4 to i32*
  %v2_100029d5 = load i32, i32* %v1_100029d5, align 4
  store i32 %v2_100029d5, i32* @ebx, align 4
  ret i32 %v0_100029d9
}

define i32 @function_100029e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100029e0:
  %stack_var_8 = alloca i32, align 4
  %v0_100029e3 = load i32, i32* @global_var_1002b410.138, align 4
  %v1_100029e8 = add i32 %v0_100029e3, 1
  %v1_100029e9 = and i32 %v1_100029e8, -2147483641
  %v3_100029e9 = icmp slt i32 %v1_100029e9, 0
  %v1_100029ee = icmp eq i1 %v3_100029e9, false
  br i1 %v1_100029ee, label %dec_label_pc_100029f5, label %dec_label_pc_100029f0

dec_label_pc_100029f0:                            ; preds = %dec_label_pc_100029e0
  %v1_100029f1 = or i32 %v0_100029e3, -8
  %v1_100029f4 = add nsw i32 %v1_100029f1, 1
  br label %dec_label_pc_100029f5

dec_label_pc_100029f5:                            ; preds = %dec_label_pc_100029f0, %dec_label_pc_100029e0
  %v0_100029fc = phi i32 [ %v1_100029f4, %dec_label_pc_100029f0 ], [ %v1_100029e9, %dec_label_pc_100029e0 ]
  store i32 %arg1, i32* @edx, align 4
  %v2_100029f8 = ptrtoint i32* %stack_var_8 to i32
  store i32 %v2_100029f8, i32* @ecx, align 4
  store i32 %v0_100029fc, i32* @global_var_1002b410.138, align 4
  %v2_10002a02 = mul i32 %v0_100029fc, 512
  %v1_10002a05 = add i32 %v2_10002a02, ptrtoint (i32* @global_var_1002a410.139 to i32)
  %v1_10002a10 = inttoptr i32 %v1_10002a05 to i32*
  %v6_10002a10 = call i32 @function_10009ac0(i32* %v1_10002a10, i32 512, i32 %arg1, i32* nonnull %stack_var_8)
  %v0_10002a15 = load i32, i32* @global_var_1002b410.138, align 4
  %v2_10002a1a = mul i32 %v0_10002a15, 512
  %v1_10002a20 = add i32 %v2_10002a1a, ptrtoint (i32* @global_var_1002a410.139 to i32)
  ret i32 %v1_10002a20
}

define i32 @function_10002a30() local_unnamed_addr {
dec_label_pc_10002a30:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-536 = alloca i32, align 4
  %stack_var_-528 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002a30 = load i32, i32* @ebp, align 4
  store i32 %v0_10002a30, i32* %stack_var_-4, align 4
  %v4_10002a30 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002a30, i32* @ebp, align 4
  %v16_10002a33 = ptrtoint i32* %stack_var_-524 to i32
  %v0_10002a39 = load i32, i32* @esi, align 4
  store i32 %v0_10002a39, i32* %stack_var_-528, align 4
  %v0_10002a3f = load i32, i32* @eax, align 4
  store i32 %v0_10002a3f, i32* %stack_var_-536, align 4
  store i32 %v16_10002a33, i32* @ecx, align 4
  %v4_10002a4e = call i32 @function_10009a60(i32* nonnull %stack_var_-524, i32 %v0_10002a3f, i32 512)
  store i32 %v4_10002a4e, i32* %eax.global-to-local, align 4
  store i32 %v16_10002a33, i32* @edx, align 4
  %v2_10002a5c = call i32 @function_10009740(i32 %v16_10002a33, i32 92)
  store i32 %v16_10002a33, i32* %eax.global-to-local, align 4
  %tmp26 = bitcast i32* %stack_var_-524 to i8*
  %v3_10002a68 = call i8* @__strlwr(i8* %tmp26)
  %v5_10002a68 = ptrtoint i8* %v3_10002a68 to i32
  store i32 %v5_10002a68, i32* %eax.global-to-local, align 4
  store i32 %v16_10002a33, i32* @ecx, align 4
  %v2_10002a74 = call i32 @function_10009770(i32* nonnull %stack_var_-524)
  store i32 %v2_10002a74, i32* @eax, align 4
  store i32 %v2_10002a74, i32* %esi.global-to-local, align 4
  %v1_10002a7e = icmp eq i32 %v2_10002a74, 0
  %v1_10002a80 = icmp eq i1 %v1_10002a7e, false
  br i1 %v1_10002a80, label %dec_label_pc_10002a87, label %dec_label_pc_10002a82

dec_label_pc_10002a82:                            ; preds = %dec_label_pc_10002a30
  %v2_10002a82 = load i32, i32* %stack_var_-528, align 4
  store i32 %v2_10002a82, i32* @esi, align 4
  %v2_10002a85 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002a85, i32* @ebp, align 4
  ret i32 %v2_10002a74

dec_label_pc_10002a87:                            ; preds = %dec_label_pc_10002a30
  %v4_10002a3f = ptrtoint i32* %stack_var_-536 to i32
  %v1_10002a88 = add i32 %v2_10002a74, -1
  store i32 %v1_10002a88, i32* %esi.global-to-local, align 4
  %v0_10002a89 = load i32, i32* @edi, align 4
  store i32 %v0_10002a89, i32* %stack_var_-536, align 4
  store i32 ptrtoint ([7 x i8*]* @global_var_1002800c.147 to i32), i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10002a92

dec_label_pc_10002a92:                            ; preds = %dec_label_pc_10002acc, %dec_label_pc_10002a87
  %v1_10002a94 = phi i32 [ %v0_10002ada, %dec_label_pc_10002acc ], [ %v4_10002a3f, %dec_label_pc_10002a87 ]
  %v0_10002a92 = phi i32 [ %v1_10002acc, %dec_label_pc_10002acc ], [ ptrtoint ([7 x i8*]* @global_var_1002800c.147 to i32), %dec_label_pc_10002a87 ]
  %v1_10002a92 = inttoptr i32 %v0_10002a92 to i32*
  %v2_10002a92 = load i32, i32* %v1_10002a92, align 4
  %v2_10002a94 = add i32 %v1_10002a94, -4
  %v3_10002a94 = inttoptr i32 %v2_10002a94 to i32*
  store i32 %v2_10002a92, i32* %v3_10002a94, align 4
  %v0_10002a95 = load i32, i32* %esi.global-to-local, align 4
  %v2_10002a95 = add i32 %v1_10002a94, -8
  %v3_10002a95 = inttoptr i32 %v2_10002a95 to i32*
  store i32 %v0_10002a95, i32* %v3_10002a95, align 4
  %v2_10002a96 = call i32 @function_10009470(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10002a96, i32* @eax, align 4
  %v0_10002a9b = load i32, i32* @esp, align 4
  %v1_10002a9b = add i32 %v0_10002a9b, 8
  %v1_10002a9e = icmp eq i32 %v2_10002a96, 0
  %v1_10002aa0 = icmp eq i1 %v1_10002a9e, false
  br i1 %v1_10002aa0, label %dec_label_pc_10002acc, label %dec_label_pc_10002aa2

dec_label_pc_10002aa2:                            ; preds = %dec_label_pc_10002a92
  %v0_10002aa2 = call i32 @CommandLine()
  store i32 %v0_10002aa2, i32* %eax.global-to-local, align 4
  store i32 %v0_10002aa2, i32* @edi, align 4
  %v0_10002aaa = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002aaa = add i32 %v0_10002aaa, 4
  %v2_10002aaa = inttoptr i32 %v1_10002aaa to i32*
  %v3_10002aaa = load i32, i32* %v2_10002aaa, align 4
  store i32 %v3_10002aaa, i32* %eax.global-to-local, align 4
  %v1_10002aad = inttoptr i32 %v0_10002aa2 to i32*
  %v2_10002aad = load i32, i32* %v1_10002aad, align 4
  store i32 %v2_10002aad, i32* @esi, align 4
  %v1_10002aaf = load i32, i32* @esp, align 4
  %v2_10002aaf = add i32 %v1_10002aaf, -4
  %v3_10002aaf = inttoptr i32 %v2_10002aaf to i32*
  store i32 %v3_10002aaa, i32* %v3_10002aaf, align 4
  %v1_10002ab0 = add i32 %v1_10002aaf, -8
  %v2_10002ab0 = inttoptr i32 %v1_10002ab0 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_10022bcc.148 to i32), i32* %v2_10002ab0, align 4
  %v1_10002ab5 = call i32 @function_100029e0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10002ab5, i32* @eax, align 4
  %v0_10002aba = load i32, i32* @esi, align 4
  %v1_10002aba = add i32 %v0_10002aba, 40
  %v2_10002aba = inttoptr i32 %v1_10002aba to i32*
  %v3_10002aba = load i32, i32* %v2_10002aba, align 4
  store i32 %v3_10002aba, i32* @edx, align 4
  %v0_10002abd = load i32, i32* @esp, align 4
  %v2_10002ac0 = add i32 %v0_10002abd, 4
  %v3_10002ac0 = inttoptr i32 %v2_10002ac0 to i32*
  store i32 %v1_10002ab5, i32* %v3_10002ac0, align 4
  %v0_10002ac1 = load i32, i32* @edi, align 4
  store i32 %v0_10002ac1, i32* @ecx, align 4
  %v1_10002ac5 = icmp eq i32 %v1_10002ab5, 0
  br i1 %v1_10002ac5, label %dec_label_pc_10002ae1, label %dec_label_pc_10002ac9

dec_label_pc_10002ac9:                            ; preds = %dec_label_pc_10002aa2
  store i32 %v1_10002a88, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10002acc

dec_label_pc_10002acc:                            ; preds = %dec_label_pc_10002ac9, %dec_label_pc_10002a92
  %v0_10002ada = phi i32 [ %v2_10002ac0, %dec_label_pc_10002ac9 ], [ %v1_10002a9b, %dec_label_pc_10002a92 ]
  %v0_10002acc = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002acc = add i32 %v0_10002acc, 8
  store i32 %v1_10002acc, i32* %ebx.global-to-local, align 4
  %v1_10002acf = inttoptr i32 %v1_10002acc to i8**
  %v7_10002ad5 = icmp slt i8** %v1_10002acf, bitcast (i32** @global_var_10028024.149 to i8**)
  br i1 %v7_10002ad5, label %dec_label_pc_10002a92, label %dec_label_pc_10002ad7

dec_label_pc_10002ad7:                            ; preds = %dec_label_pc_10002acc
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_10002ada = inttoptr i32 %v0_10002ada to i32*
  %v2_10002ada = load i32, i32* %v1_10002ada, align 4
  store i32 %v2_10002ada, i32* @edi, align 4
  %v3_10002ada = add i32 %v0_10002ada, 4
  %v1_10002adb = inttoptr i32 %v3_10002ada to i32*
  %v2_10002adb = load i32, i32* %v1_10002adb, align 4
  store i32 %v2_10002adb, i32* @ebx, align 4
  %v3_10002adb = add i32 %v0_10002ada, 8
  %v1_10002adc = inttoptr i32 %v3_10002adb to i32*
  %v2_10002adc = load i32, i32* %v1_10002adc, align 4
  store i32 %v2_10002adc, i32* @esi, align 4
  %v2_10002adf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002adf, i32* @ebp, align 4
  ret i32 0

dec_label_pc_10002ae1:                            ; preds = %dec_label_pc_10002aa2
  %v2_10002ae1 = inttoptr i32 %v0_10002abd to i32*
  store i32 512, i32* %v2_10002ae1, align 4
  store i32 %v16_10002a33, i32* %eax.global-to-local, align 4
  %v2_10002aec = add i32 %v0_10002abd, -4
  %v3_10002aec = inttoptr i32 %v2_10002aec to i32*
  store i32 %v16_10002a33, i32* %v3_10002aec, align 4
  %v1_10002aed = add i32 %v0_10002abd, -8
  %v2_10002aed = inttoptr i32 %v1_10002aed to i32*
  store i32 ptrtoint (i32* @global_var_1002b418.150 to i32), i32* %v2_10002aed, align 4
  %v2_10002af2 = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10002af2, i32* %eax.global-to-local, align 4
  %v0_10002af7 = load i32, i32* @esp, align 4
  %v1_10002af7 = add i32 %v0_10002af7, -4
  %v2_10002af7 = inttoptr i32 %v1_10002af7 to i32*
  store i32 512, i32* %v2_10002af7, align 4
  store i32 %v16_10002a33, i32* @ecx, align 4
  %v2_10002b02 = add i32 %v0_10002af7, -8
  %v3_10002b02 = inttoptr i32 %v2_10002b02 to i32*
  store i32 %v16_10002a33, i32* %v3_10002b02, align 4
  %v1_10002b03 = add i32 %v0_10002af7, -12
  %v2_10002b03 = inttoptr i32 %v1_10002b03 to i32*
  store i32 ptrtoint (i32* @global_var_1002b418.150 to i32), i32* %v2_10002b03, align 4
  %v3_10002b08 = call i32 @function_10009b30(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_10002b08, i32* %eax.global-to-local, align 4
  %v0_10002b0d = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002b0d = add i32 %v0_10002b0d, 4
  %v2_10002b0d = inttoptr i32 %v1_10002b0d to i32*
  %v3_10002b0d = load i32, i32* %v2_10002b0d, align 4
  store i32 %v3_10002b0d, i32* %eax.global-to-local, align 4
  store i32 %v16_10002a33, i32* @edx, align 4
  %v1_10002b16 = load i32, i32* @esp, align 4
  %v2_10002b16 = add i32 %v1_10002b16, -4
  %v3_10002b16 = inttoptr i32 %v2_10002b16 to i32*
  store i32 %v16_10002a33, i32* %v3_10002b16, align 4
  %v0_10002b17 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002b17 = add i32 %v1_10002b16, -8
  %v3_10002b17 = inttoptr i32 %v2_10002b17 to i32*
  store i32 %v0_10002b17, i32* %v3_10002b17, align 4
  %v1_10002b18 = add i32 %v1_10002b16, -12
  %v2_10002b18 = inttoptr i32 %v1_10002b18 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022bc4.151 to i32), i32* %v2_10002b18, align 4
  %v1_10002b1d = add i32 %v1_10002b16, -16
  %v2_10002b1d = inttoptr i32 %v1_10002b1d to i32*
  store i32 512, i32* %v2_10002b1d, align 4
  %v1_10002b22 = add i32 %v1_10002b16, -20
  %v2_10002b22 = inttoptr i32 %v1_10002b22 to i32*
  store i32 ptrtoint (i32* @global_var_1002b418.150 to i32), i32* %v2_10002b22, align 4
  %v2_10002b27 = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_10002b27, i32* %eax.global-to-local, align 4
  %v0_10002b2c = load i32, i32* @esp, align 4
  %v1_10002b2c = add i32 %v0_10002b2c, 44
  %v1_10002b2f = inttoptr i32 %v1_10002b2c to i32*
  %v2_10002b2f = load i32, i32* %v1_10002b2f, align 4
  store i32 %v2_10002b2f, i32* @edi, align 4
  %v3_10002b2f = add i32 %v0_10002b2c, 48
  store i32 ptrtoint (i32* @global_var_1002b418.150 to i32), i32* %eax.global-to-local, align 4
  %v1_10002b3a = inttoptr i32 %v3_10002b2f to i32*
  %v2_10002b3a = load i32, i32* %v1_10002b3a, align 4
  store i32 %v2_10002b3a, i32* @ebx, align 4
  %v3_10002b3a = add i32 %v0_10002b2c, 52
  %v1_10002b3b = inttoptr i32 %v3_10002b3a to i32*
  %v2_10002b3b = load i32, i32* %v1_10002b3b, align 4
  store i32 %v2_10002b3b, i32* @esi, align 4
  %v2_10002b3e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002b3e, i32* @ebp, align 4
  ret i32 ptrtoint (i32* @global_var_1002b418.150 to i32)
}

define i32 @function_10002b40(i32 %arg1, i32 %arg2) {
dec_label_pc_10002b40:
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_10002b40 = load i32, i32* %ebp.global-to-local, align 4
  %v0_10002b43 = load i32, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_10002b47 = add i32 %arg1, 8
  %v2_10002b47 = inttoptr i32 %v1_10002b47 to i32*
  %v3_10002b47 = load i32, i32* %v2_10002b47, align 4
  %v10_10002b4a = icmp eq i32 %v3_10002b47, 1
  %v1_10002b4d = icmp eq i1 %v10_10002b4a, false
  br i1 %v1_10002b4d, label %dec_label_pc_10002b74, label %dec_label_pc_10002b4f

dec_label_pc_10002b4f:                            ; preds = %dec_label_pc_10002b40
  %v1_10002b4f = inttoptr i32 %arg1 to i32*
  %v2_10002b4f = load i32, i32* %v1_10002b4f, align 4
  store i32 %v2_10002b4f, i32* @ecx, align 4
  %v1_10002b51 = load i32, i32* @global_var_1002a304.152, align 4
  %v12_10002b51 = icmp eq i32 %v2_10002b4f, %v1_10002b51
  %v1_10002b57 = icmp eq i1 %v12_10002b51, false
  br i1 %v1_10002b57, label %dec_label_pc_10002b74, label %dec_label_pc_10002b59

dec_label_pc_10002b59:                            ; preds = %dec_label_pc_10002b4f
  %v3_10002b69 = inttoptr i32 %arg2 to i8*
  %v8_10002b69 = call i32 @MessageBoxA(i32* null, i8* %v3_10002b69, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022be8.153, i32 0, i32 0), i32 4112)
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  ret i32 %v8_10002b69

dec_label_pc_10002b74:                            ; preds = %dec_label_pc_10002b4f, %dec_label_pc_10002b40
  %v10_10002b74 = icmp eq i32 %v3_10002b47, 2
  %v1_10002b77 = icmp eq i1 %v10_10002b74, false
  br i1 %v1_10002b77, label %dec_label_pc_10002b9e, label %dec_label_pc_10002b79

dec_label_pc_10002b79:                            ; preds = %dec_label_pc_10002b74
  %v2_10002b79 = call i32 @ShouldUseNewAssertDialog(i32 %v0_10002b43, i32 %v0_10002b40)
  %v4_10002b7f = trunc i32 %v2_10002b79 to i8
  %v5_10002b7f = icmp eq i8 %v4_10002b7f, 0
  %v1_10002b81 = icmp eq i1 %v5_10002b7f, false
  br i1 %v1_10002b81, label %dec_label_pc_10002b79.dec_label_pc_10002b9e_crit_edge, label %dec_label_pc_10002b83

dec_label_pc_10002b79.dec_label_pc_10002b9e_crit_edge: ; preds = %dec_label_pc_10002b79
  %v0_10002b9e.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10002b9e

dec_label_pc_10002b83:                            ; preds = %dec_label_pc_10002b79
  %v3_10002b93 = inttoptr i32 %arg2 to i8*
  %v8_10002b93 = call i32 @MessageBoxA(i32* null, i8* %v3_10002b93, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_10022be0.154, i32 0, i32 0), i32 4112)
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  ret i32 %v8_10002b93

dec_label_pc_10002b9e:                            ; preds = %dec_label_pc_10002b79.dec_label_pc_10002b9e_crit_edge, %dec_label_pc_10002b74
  %v0_10002bbc5 = phi i32 [ %v2_10002b79, %dec_label_pc_10002b79.dec_label_pc_10002b9e_crit_edge ], [ %v3_10002b47, %dec_label_pc_10002b74 ]
  %v0_10002b9e = phi i32 [ %v0_10002b9e.pre, %dec_label_pc_10002b79.dec_label_pc_10002b9e_crit_edge ], [ %arg1, %dec_label_pc_10002b74 ]
  %v1_10002b9e = add i32 %v0_10002b9e, 8
  %v2_10002b9e = inttoptr i32 %v1_10002b9e to i32*
  %v3_10002b9e = load i32, i32* %v2_10002b9e, align 4
  %v13_10002b9e = icmp eq i32 %v3_10002b9e, 3
  %v1_10002ba2 = icmp eq i1 %v13_10002b9e, false
  br i1 %v1_10002ba2, label %dec_label_pc_10002bba, label %dec_label_pc_10002ba4

dec_label_pc_10002ba4:                            ; preds = %dec_label_pc_10002b9e
  store i32 %arg2, i32* @ecx, align 4
  %v3_10002bb4 = inttoptr i32 %arg2 to i8*
  %v8_10002bb4 = call i32 @MessageBoxA(i32* null, i8* %v3_10002bb4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_10022bd8.155, i32 0, i32 0), i32 4112)
  br label %dec_label_pc_10002bba

dec_label_pc_10002bba:                            ; preds = %dec_label_pc_10002ba4, %dec_label_pc_10002b9e
  %v0_10002bbc = phi i32 [ %v8_10002bb4, %dec_label_pc_10002ba4 ], [ %v0_10002bbc5, %dec_label_pc_10002b9e ]
  %v0_10002bba = load i32, i32* @esp, align 4
  %v1_10002bba = inttoptr i32 %v0_10002bba to i32*
  %v2_10002bba = load i32, i32* %v1_10002bba, align 4
  store i32 %v2_10002bba, i32* %esi.global-to-local, align 4
  %v3_10002bba = add i32 %v0_10002bba, 4
  %v1_10002bbb = inttoptr i32 %v3_10002bba to i32*
  %v2_10002bbb = load i32, i32* %v1_10002bbb, align 4
  store i32 %v2_10002bbb, i32* %ebp.global-to-local, align 4
  ret i32 %v0_10002bbc
}

define i32 @function_10002bc0() {
dec_label_pc_10002bc0:
  %eax.global-to-local = alloca i32, align 4
  %v0_10002bc0 = load i32, i32* @ecx, align 4
  %v1_10002bc0 = add i32 %v0_10002bc0, 4
  %v2_10002bc0 = inttoptr i32 %v1_10002bc0 to i8*
  store i8 1, i8* %v2_10002bc0, align 1
  %v0_10002bc4 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10002bc4
}

define i32 @function_10002bd0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10002bd0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10002bd4 = load i32, i32* @edi, align 4
  store i32 %v0_10002bd4, i32* %stack_var_-12, align 4
  %v4_10002bd4 = ptrtoint i32* %stack_var_-12 to i32
  %v0_10002bd5 = load i32, i32* @ecx, align 4
  store i32 %v0_10002bd5, i32* %edi.global-to-local, align 4
  %v1_10002bd7 = add i32 %v0_10002bd5, 8
  %v2_10002bd7 = inttoptr i32 %v1_10002bd7 to i32*
  %v3_10002bd7 = load i32, i32* %v2_10002bd7, align 4
  %v4_10002bd7 = sext i32 %v3_10002bd7 to i64
  %v3_10002bda = icmp slt i32 %v3_10002bd7, 0
  br i1 %v3_10002bda, label %dec_label_pc_10002c59, label %dec_label_pc_10002bde

dec_label_pc_10002bde:                            ; preds = %dec_label_pc_10002bd0
  %v2_10002bda = icmp eq i32 %v3_10002bd7, 0
  %v1_10002bde = add i32 %v0_10002bd5, 4
  %v2_10002bde = inttoptr i32 %v1_10002bde to i32*
  %v3_10002bde = load i32, i32* %v2_10002bde, align 4
  store i32 %v3_10002bde, i32* %eax.global-to-local, align 4
  %v2_10002be4 = add i32 %v3_10002bde, %arg1
  %v12_10002be4 = icmp eq i32 %v2_10002be4, 0
  store i32 %v2_10002be4, i32* @ecx, align 4
  br i1 %v2_10002bda, label %dec_label_pc_10002bf6, label %dec_label_pc_10002bea

dec_label_pc_10002bea:                            ; preds = %dec_label_pc_10002bde
  %v1_10002bea = add i32 %v2_10002be4, -1
  %v1_10002bed = ashr i32 %v1_10002bea, 31
  %v3_10002bee = zext i32 %v1_10002bea to i64
  %v5_10002bee = zext i32 %v1_10002bed to i64
  %v6_10002bee = mul nuw i64 %v5_10002bee, 4294967296
  %v7_10002bee = or i64 %v6_10002bee, %v3_10002bee
  %v9_10002bee = sdiv i64 %v7_10002bee, %v4_10002bd7
  %v10_10002bee = trunc i64 %v9_10002bee to i32
  %v1_10002bf0 = add i32 %v10_10002bee, 1
  %v5_10002bf1 = mul i32 %v1_10002bf0, %v3_10002bd7
  br label %dec_label_pc_10002c09

dec_label_pc_10002bf6:                            ; preds = %dec_label_pc_10002bde
  %v1_10002bf6 = icmp eq i32 %v3_10002bde, 0
  %v1_10002bf8 = icmp eq i1 %v1_10002bf6, false
  br i1 %v1_10002bf8, label %dec_label_pc_10002bff, label %dec_label_pc_10002bfa

dec_label_pc_10002bfa:                            ; preds = %dec_label_pc_10002bf6
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10002bff

dec_label_pc_10002bff:                            ; preds = %dec_label_pc_10002bfa, %dec_label_pc_10002bf6
  %eax.promoted2 = phi i32 [ 1, %dec_label_pc_10002bfa ], [ %v3_10002bde, %dec_label_pc_10002bf6 ]
  %v5_10002c01 = icmp slt i32 %eax.promoted2, %v2_10002be4
  br i1 %v5_10002c01, label %dec_label_pc_10002c03, label %dec_label_pc_10002c2b

dec_label_pc_10002c03:                            ; preds = %dec_label_pc_10002bff, %dec_label_pc_10002c03
  %v2_10002c033 = phi i32 [ %v2_10002c03, %dec_label_pc_10002c03 ], [ %eax.promoted2, %dec_label_pc_10002bff ]
  %v2_10002c03 = mul i32 %v2_10002c033, 2
  %v5_10002c07 = icmp slt i32 %v2_10002c03, %v2_10002be4
  br i1 %v5_10002c07, label %dec_label_pc_10002c03, label %dec_label_pc_10002c09.loopexit

dec_label_pc_10002c09.loopexit:                   ; preds = %dec_label_pc_10002c03
  br label %dec_label_pc_10002c09

dec_label_pc_10002c09:                            ; preds = %dec_label_pc_10002c09.loopexit, %dec_label_pc_10002bea
  %eax.promoted = phi i32 [ %v2_10002c03, %dec_label_pc_10002c09.loopexit ], [ %v5_10002bf1, %dec_label_pc_10002bea ]
  %storemerge = phi i32 [ %v2_10002c03, %dec_label_pc_10002c09.loopexit ], [ %v5_10002bf1, %dec_label_pc_10002bea ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v5_10002c0b = icmp slt i32 %eax.promoted, %v2_10002be4
  br i1 %v5_10002c0b, label %dec_label_pc_10002c0d, label %dec_label_pc_10002c2b

dec_label_pc_10002c0d:                            ; preds = %dec_label_pc_10002c09
  %v1_10002c0d = icmp eq i32 %eax.promoted, 0
  %v1_10002c0f = icmp eq i1 %v1_10002c0d, false
  br i1 %v1_10002c0f, label %dec_label_pc_10002c20, label %dec_label_pc_10002c11

dec_label_pc_10002c11:                            ; preds = %dec_label_pc_10002c0d
  %v8_10002c14 = icmp sgt i32 %v2_10002be4, -1
  br i1 %v8_10002c14, label %dec_label_pc_10002c20, label %dec_label_pc_10002c16

dec_label_pc_10002c16:                            ; preds = %dec_label_pc_10002c11
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10002c2b

dec_label_pc_10002c20:                            ; preds = %dec_label_pc_10002c11, %dec_label_pc_10002c0d, %dec_label_pc_10002c20
  %v2_10002c251 = phi i32 [ %v2_10002c25, %dec_label_pc_10002c20 ], [ %eax.promoted, %dec_label_pc_10002c0d ], [ %eax.promoted, %dec_label_pc_10002c11 ]
  %v2_10002c20 = add i32 %v2_10002c251, %v2_10002be4
  %v1_10002c22 = ashr i32 %v2_10002c20, 31
  %v2_10002c23 = sub i32 %v2_10002c20, %v1_10002c22
  %v2_10002c25 = sdiv i32 %v2_10002c23, 2
  %v5_10002c29 = icmp slt i32 %v2_10002c25, %v2_10002be4
  br i1 %v5_10002c29, label %dec_label_pc_10002c20, label %dec_label_pc_10002c2b.loopexit

dec_label_pc_10002c2b.loopexit:                   ; preds = %dec_label_pc_10002c20
  store i32 %v2_10002c25, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10002c2b

dec_label_pc_10002c2b:                            ; preds = %dec_label_pc_10002c2b.loopexit, %dec_label_pc_10002bff, %dec_label_pc_10002c09, %dec_label_pc_10002c16
  %v0_10002c2d = phi i32 [ %v2_10002c25, %dec_label_pc_10002c2b.loopexit ], [ %eax.promoted2, %dec_label_pc_10002bff ], [ %eax.promoted, %dec_label_pc_10002c09 ], [ -1, %dec_label_pc_10002c16 ]
  store i32 %v0_10002c2d, i32* %v2_10002bde, align 4
  %v0_10002c30 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10002c30, i32* @ecx, align 4
  %v1_10002c36 = inttoptr i32 %v0_10002c30 to i32*
  %v2_10002c36 = load i32, i32* %v1_10002c36, align 4
  store i32 %v2_10002c36, i32* @ecx, align 4
  %v0_10002c38 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002c38 = mul i32 %v0_10002c38, 32
  store i32 %v2_10002c38, i32* %eax.global-to-local, align 4
  store i32 %v2_10002c38, i32* %stack_var_-16, align 4
  %v1_10002c50 = inttoptr i32 %v2_10002c36 to i32*
  %v2_10002c50 = load i32, i32* %v1_10002c50, align 4
  br i1 %v12_10002be4, label %dec_label_pc_10002c50, label %dec_label_pc_10002c40

dec_label_pc_10002c40:                            ; preds = %dec_label_pc_10002c2b
  store i32 %v2_10002be4, i32* %stack_var_-20, align 4
  %v1_10002c43 = add i32 %v2_10002c50, 12
  %v2_10002c43 = inttoptr i32 %v1_10002c43 to i32*
  %v3_10002c43 = load i32, i32* %v2_10002c43, align 4
  store i32 %v3_10002c43, i32* @edx, align 4
  %v1_10002c48 = load i32, i32* %edi.global-to-local, align 4
  %v2_10002c48 = inttoptr i32 %v1_10002c48 to i32*
  store i32 %v2_10002c38, i32* %v2_10002c48, align 4
  %v2_10002c4a = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10002c4a, i32* %edi.global-to-local, align 4
  %v2_10002c4b = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10002c4b, i32* @esi, align 4
  %v2_10002c4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10002c4c, i32* @ebp, align 4
  %v0_10002c4d = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10002c4d

dec_label_pc_10002c50:                            ; preds = %dec_label_pc_10002c2b
  store i32 %v2_10002c50, i32* @edx, align 4
  %v1_10002c52 = add i32 %v2_10002c50, 4
  %v2_10002c52 = inttoptr i32 %v1_10002c52 to i32*
  %v3_10002c52 = load i32, i32* %v2_10002c52, align 4
  store i32 %v3_10002c52, i32* @eax, align 4
  %v1_10002c57 = load i32, i32* %edi.global-to-local, align 4
  %v2_10002c57 = inttoptr i32 %v1_10002c57 to i32*
  store i32 %v3_10002c52, i32* %v2_10002c57, align 4
  %v0_10002c59.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10002c59

dec_label_pc_10002c59:                            ; preds = %dec_label_pc_10002c50, %dec_label_pc_10002bd0
  %v0_10002c59 = phi i32 [ %v0_10002c59.pre, %dec_label_pc_10002c50 ], [ %v4_10002bd4, %dec_label_pc_10002bd0 ]
  %v1_10002c59 = inttoptr i32 %v0_10002c59 to i32*
  %v2_10002c59 = load i32, i32* %v1_10002c59, align 4
  store i32 %v2_10002c59, i32* %edi.global-to-local, align 4
  %v3_10002c59 = add i32 %v0_10002c59, 4
  %v1_10002c5a = inttoptr i32 %v3_10002c59 to i32*
  %v2_10002c5a = load i32, i32* %v1_10002c5a, align 4
  store i32 %v2_10002c5a, i32* @esi, align 4
  %v3_10002c5a = add i32 %v0_10002c59, 8
  %v1_10002c5b = inttoptr i32 %v3_10002c5a to i32*
  %v2_10002c5b = load i32, i32* %v1_10002c5b, align 4
  store i32 %v2_10002c5b, i32* @ebp, align 4
  %v0_10002c5c = load i32, i32* @eax, align 4
  ret i32 %v0_10002c5c
}

define i32 @function_10002c60(i32* %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_10002c60:
  %eax.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_7 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002c60 = load i32, i32* @ebp, align 4
  store i32 %v0_10002c60, i32* %stack_var_-4, align 4
  %v4_10002c60 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002c60, i32* @ebp, align 4
  %v4_10002c63 = ptrtoint i8* %arg2 to i32
  store i32 %v4_10002c63, i32* @edx, align 4
  %v0_10002c66 = load i32, i32* @esi, align 4
  store i32 %tmp, i32* @esi, align 4
  %v0_10002c6a = load i32, i32* @edi, align 4
  store i32 %v0_10002c6a, i32* %stack_var_-12, align 4
  %v2_10002c6b = ptrtoint i8* %stack_var_7 to i32
  store i32 %v2_10002c6b, i32* %eax.global-to-local, align 4
  store i32 %v2_10002c6b, i32* %stack_var_-16, align 4
  %v2_10002c6f = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_10002c6f, i32* @ecx, align 4
  %v1_10002c74 = add i32 %tmp, 5
  store i32 %v1_10002c74, i32* @edi, align 4
  store i32 %v1_10002c74, i32* %stack_var_-32, align 4
  store i32 ptrtoint (%vtable_10022bf8_type* @global_var_10022bf8.156 to i32), i32* %arg1, align 4
  %v0_10002c83 = load i32, i32* @esi, align 4
  %v1_10002c83 = add i32 %v0_10002c83, 4
  %v2_10002c83 = inttoptr i32 %v1_10002c83 to i8*
  store i8 1, i8* %v2_10002c83, align 1
  store i8 0, i8* %stack_var_7, align 1
  %v0_10002c8b = load i32, i32* %stack_var_-32, align 4
  %v6_10002c8b = load i32, i32* %stack_var_-16, align 4
  %v7_10002c8b = inttoptr i32 %v6_10002c8b to i32*
  %v8_10002c8b = load i32, i32* %stack_var_-12, align 4
  %v10_10002c8b = load i32, i32* %stack_var_-4, align 4
  %v11_10002c8b = call i32 @function_10009af0(i32 %v0_10002c8b, i32 255, i32 %v4_10002c63, i32* nonnull %stack_var_12, i32* %v7_10002c8b, i32 %v8_10002c8b, i32 %v0_10002c66, i32 %v10_10002c8b)
  store i32 %v11_10002c8b, i32* %eax.global-to-local, align 4
  %v3_10002c93 = load i8, i8* %stack_var_7, align 1
  %v12_10002c93 = icmp eq i8 %v3_10002c93, 0
  store i1 %v12_10002c93, i1* %zf.global-to-local, align 1
  %v0_10002c97 = load i32, i32* @esi, align 4
  %v1_10002c97 = add i32 %v0_10002c97, 260
  %v2_10002c97 = inttoptr i32 %v1_10002c97 to i8*
  store i8 0, i8* %v2_10002c97, align 1
  %v0_10002c9e = load i1, i1* %zf.global-to-local, align 1
  %v1_10002cb6.pre = load i32, i32* @esi, align 4
  br i1 %v0_10002c9e, label %dec_label_pc_10002cb5, label %dec_label_pc_10002ca0

dec_label_pc_10002ca0:                            ; preds = %dec_label_pc_10002c60
  %v1_10002ca0 = add i32 %v1_10002cb6.pre, 4
  %v2_10002ca0 = inttoptr i32 %v1_10002ca0 to i8*
  %v3_10002ca0 = load i8, i8* %v2_10002ca0, align 1
  %v10_10002ca0 = icmp eq i8 %v3_10002ca0, 0
  store i1 %v10_10002ca0, i1* %zf.global-to-local, align 1
  %v1_10002ca4 = icmp eq i1 %v10_10002ca0, false
  br i1 %v1_10002ca4, label %dec_label_pc_10002cb5, label %dec_label_pc_10002ca6

dec_label_pc_10002ca6:                            ; preds = %dec_label_pc_10002ca0
  %v0_10002ca6 = load i32, i32* @global_var_1002b618.157, align 4
  %v10_10002ca6 = icmp eq i32 %v0_10002ca6, 5
  store i1 %v10_10002ca6, i1* %zf.global-to-local, align 1
  %v5_10002cad = icmp slt i32 %v0_10002ca6, 5
  br i1 %v5_10002cad, label %dec_label_pc_10002caf, label %dec_label_pc_10002cb5

dec_label_pc_10002caf:                            ; preds = %dec_label_pc_10002ca6
  %v1_10002caf = add i32 %v0_10002ca6, 1
  %v9_10002caf = icmp eq i32 %v1_10002caf, 0
  store i1 %v9_10002caf, i1* %zf.global-to-local, align 1
  store i32 %v1_10002caf, i32* @global_var_1002b618.157, align 4
  br label %dec_label_pc_10002cb5

dec_label_pc_10002cb5:                            ; preds = %dec_label_pc_10002c60, %dec_label_pc_10002ca6, %dec_label_pc_10002caf, %dec_label_pc_10002ca0
  %v0_10002cb5 = load i32, i32* @edi, align 4
  store i32 %v0_10002cb5, i32* %stack_var_-16, align 4
  %v0_10002cb6 = load i32, i32* %eax.global-to-local, align 4
  %v2_10002cb6 = add i32 %v1_10002cb6.pre, 264
  %v3_10002cb6 = inttoptr i32 %v2_10002cb6 to i32*
  store i32 %v0_10002cb6, i32* %v3_10002cb6, align 4
  %v0_10002cbc = load i32, i32* %stack_var_-16, align 4
  %v1_10002cbc = call i32 @function_10009450(i32 %v0_10002cbc)
  %v0_10002cc1 = load i32, i32* @esp, align 4
  %v10_10002cc1 = icmp eq i32 %v0_10002cc1, -4
  store i1 %v10_10002cc1, i1* %zf.global-to-local, align 1
  %v1_10002cc4 = load i32, i32* @esi, align 4
  %v2_10002cc4 = add i32 %v1_10002cc4, 264
  %v3_10002cc4 = inttoptr i32 %v2_10002cc4 to i32*
  store i32 %v1_10002cbc, i32* %v3_10002cc4, align 4
  %v2_10002cca = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10002cca, i32* @edi, align 4
  %v0_10002ccb = load i32, i32* @esi, align 4
  store i32 %v0_10002ccb, i32* %eax.global-to-local, align 4
  store i32 %v0_10002c66, i32* @esi, align 4
  %v2_10002cce = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10002cce, i32* @ebp, align 4
  ret i32 %v0_10002ccb
}

define i32 @function_10002cd0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10002cd0:
  %v0_10002cdb = load i8, i8* @global_var_1002b62c.158, align 1
  %v3_10002cdb = and i8 %v0_10002cdb, 1
  %v4_10002cdb = icmp eq i8 %v3_10002cdb, 0
  %v1_10002ce1 = icmp eq i1 %v4_10002cdb, false
  br i1 %v1_10002ce1, label %dec_label_pc_10002d00, label %dec_label_pc_10002ce3

dec_label_pc_10002ce3:                            ; preds = %dec_label_pc_10002cd0
  %v3_10002ce3 = or i8 %v0_10002cdb, 1
  store i8 %v3_10002ce3, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10002d00

dec_label_pc_10002d00:                            ; preds = %dec_label_pc_10002ce3, %dec_label_pc_10002cd0
  %v12_10002d03 = icmp eq i32 %arg1, -1
  br i1 %v12_10002d03, label %dec_label_pc_10002d14, label %dec_label_pc_10002d07

dec_label_pc_10002d07:                            ; preds = %dec_label_pc_10002d00
  %v2_10002d07 = mul i32 %arg1, 32
  %v1_10002d0a = load i32, i32* @ecx, align 4
  %v2_10002d0a = add i32 %v1_10002d0a, 4
  %v3_10002d0a = inttoptr i32 %v2_10002d0a to i32*
  %v4_10002d0a = load i32, i32* %v3_10002d0a, align 4
  %v5_10002d0a = add i32 %v4_10002d0a, %v2_10002d07
  %v1_10002d0d = add i32 %v5_10002d0a, 8
  %v2_10002d0d = inttoptr i32 %v1_10002d0d to i32*
  %v3_10002d0d = load i32, i32* %v2_10002d0d, align 4
  ret i32 %v3_10002d0d

dec_label_pc_10002d14:                            ; preds = %dec_label_pc_10002d00
  %v3_10002d19 = load i32, i32* @global_var_1002b624.161, align 4
  ret i32 %v3_10002d19
}

define i32 @function_10002d20(i32 %arg1) local_unnamed_addr {
dec_label_pc_10002d20:
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10002d20 = load i32, i32* @ebp, align 4
  store i32 %v0_10002d20, i32* %stack_var_-4, align 4
  %v4_10002d20 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10002d20, i32* @ebp, align 4
  %v0_10002d2a = load i32, i32* @ecx, align 4
  store i32 %v0_10002d2a, i32* @esi, align 4
  %v1_10002d2d = add i32 %v0_10002d2a, 300
  store i32 %v1_10002d2d, i32* @ecx, align 4
  %v0_10002d33 = call i32 @function_1000d070()
  %v0_10002d38 = load i32, i32* @esi, align 4
  %v1_10002d38 = add i32 %v0_10002d38, 316
  store i32 %v1_10002d38, i32* @ecx, align 4
  store i32 %v0_10002d33, i32* @edi, align 4
  %v0_10002d40 = call i32 @function_1000d070()
  %v5_10002d58 = call i32 @function_10002c60(i32* nonnull %stack_var_-272, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022c08.164, i32 0, i32 0))
  %v0_10002d5d = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10002d5d, i32* @ecx, align 4
  %v1_10002d63 = add i32 %v0_10002d5d, 4
  %v2_10002d63 = inttoptr i32 %v1_10002d63 to i32*
  %v3_10002d63 = load i32, i32* %v2_10002d63, align 4
  store i32 %v1_10002d63, i32* @ecx, align 4
  %v1_10002d7a = add i32 %v3_10002d63, 8
  %v2_10002d7a = inttoptr i32 %v1_10002d7a to i32*
  %v3_10002d7a = load i32, i32* %v2_10002d7a, align 4
  %v1_10002d81 = icmp eq i32 %v3_10002d7a, 0
  br i1 %v1_10002d81, label %dec_label_pc_10002df1, label %dec_label_pc_10002d85

dec_label_pc_10002d85:                            ; preds = %dec_label_pc_10002d20
  store i32 %v0_10002d5d, i32* @ecx, align 4
  %v1_10002dad = call i32 @function_10009450(i32 %arg1)
  %v0_10002db2 = load i32, i32* @global_var_1002b95c.165, align 4
  %v1_10002dc0 = add i32 %v0_10002db2, 4
  %v2_10002dcb = inttoptr i32 %v1_10002dc0 to i32*
  store i32 %v0_10002db2, i32* @ecx, align 4
  %v3_10002de4 = load i32, i32* %v2_10002dcb, align 4
  store i32 %v1_10002dc0, i32* @ecx, align 4
  br label %dec_label_pc_10002df1

dec_label_pc_10002df1:                            ; preds = %dec_label_pc_10002d85, %dec_label_pc_10002d20
  %v0_10002df6 = phi i32 [ %v3_10002de4, %dec_label_pc_10002d85 ], [ 0, %dec_label_pc_10002d20 ]
  ret i32 %v0_10002df6
}

define i32 @function_10002e00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10002e00:
  %v0_10002e06 = load i32, i32* @ecx, align 4
  store i32 %v0_10002e06, i32* @esi, align 4
  %v1_10002e08 = call i32 @function_1000c090(i32 1)
  %v4_10002e0d = trunc i32 %v1_10002e08 to i8
  %v5_10002e0d = icmp eq i8 %v4_10002e0d, 0
  br i1 %v5_10002e0d, label %dec_label_pc_10002e2d, label %dec_label_pc_10002e11

dec_label_pc_10002e11:                            ; preds = %dec_label_pc_10002e00
  %v0_10002e11 = load i32, i32* @esi, align 4
  %v1_10002e11 = add i32 %v0_10002e11, 16
  %v2_10002e11 = inttoptr i32 %v1_10002e11 to i32*
  %v3_10002e11 = load i32, i32* %v2_10002e11, align 4
  %v2_10002e14 = add i32 %v0_10002e11, 32
  %v3_10002e14 = inttoptr i32 %v2_10002e14 to i32*
  %v4_10002e14 = load i32, i32* %v3_10002e14, align 4
  %v5_10002e14 = sub i32 %v3_10002e11, %v4_10002e14
  %v1_10002e1c = trunc i32 %arg1 to i8
  %v3_10002e1c = load i32, i32* @ecx, align 4
  %v5_10002e1c = add i32 %v3_10002e1c, %v5_10002e14
  %v6_10002e1c = inttoptr i32 %v5_10002e1c to i8*
  store i8 %v1_10002e1c, i8* %v6_10002e1c, align 1
  %v0_10002e1f = load i32, i32* @esi, align 4
  %v1_10002e1f = add i32 %v0_10002e1f, 16
  %v2_10002e1f = inttoptr i32 %v1_10002e1f to i32*
  %v3_10002e1f = load i32, i32* %v2_10002e1f, align 4
  %v4_10002e1f = add i32 %v3_10002e1f, 1
  store i32 %v4_10002e1f, i32* %v2_10002e1f, align 4
  %v0_10002e22 = load i32, i32* @esi, align 4
  %v1_10002e22 = add i32 %v0_10002e22, 16
  %v2_10002e22 = inttoptr i32 %v1_10002e22 to i32*
  %v3_10002e22 = load i32, i32* %v2_10002e22, align 4
  store i32 %v3_10002e22, i32* @eax, align 4
  store i32 %v0_10002e22, i32* @ecx, align 4
  %v1_10002e28 = call i32 @function_1000c0e0(i32 %v3_10002e22)
  br label %dec_label_pc_10002e2d

dec_label_pc_10002e2d:                            ; preds = %dec_label_pc_10002e11, %dec_label_pc_10002e00
  %v0_10002e2f = phi i32 [ %v1_10002e28, %dec_label_pc_10002e11 ], [ %v1_10002e08, %dec_label_pc_10002e00 ]
  ret i32 %v0_10002e2f
}

define i32 @function_10002e40(i32 %arg1, i32* %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_10002e40:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp11 = ptrtoint i32* %arg2 to i32
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v0_10002e47 = load i32, i32* @ecx, align 4
  store i32 %v0_10002e47, i32* %ebx.global-to-local, align 4
  store i32 %tmp, i32* @ecx, align 4
  %v1_10002e4d = add i32 %v0_10002e47, 16
  %v2_10002e4d = inttoptr i32 %v1_10002e4d to i32*
  %v3_10002e4d = load i32, i32* %v2_10002e4d, align 4
  store i32 %v3_10002e4d, i32* %edi.global-to-local, align 4
  store i32 -1, i32* %arg2, align 4
  %v0_10002e56 = load i32, i32* @ecx, align 4
  %v1_10002e56 = inttoptr i32 %v0_10002e56 to i8*
  store i8 0, i8* %v1_10002e56, align 1
  %v0_10002e59 = load i32, i32* %edi.global-to-local, align 4
  %v10_10002e59 = icmp eq i32 %v0_10002e59, -1
  br i1 %v10_10002e59, label %dec_label_pc_10002e40.dec_label_pc_10002f24_crit_edge, label %dec_label_pc_10002e62

dec_label_pc_10002e40.dec_label_pc_10002f24_crit_edge: ; preds = %dec_label_pc_10002e40
  %v0_10002f24.pre = load i32, i32* @esp, align 4
  %v0_10002f27.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10002f24

dec_label_pc_10002e62:                            ; preds = %dec_label_pc_10002e40
  %v1_10002ed3 = bitcast i32* %arg3 to i8*
  br label %dec_label_pc_10002e63

dec_label_pc_10002e63:                            ; preds = %dec_label_pc_10002f1a, %dec_label_pc_10002e62
  %v0_10002e69 = phi i32 [ %v0_10002f1a, %dec_label_pc_10002f1a ], [ %v0_10002e59, %dec_label_pc_10002e62 ]
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v0_10002e69, i32* %arg2, align 4
  %v0_10002e6b = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002e6b = add i32 %v0_10002e6b, 4
  %v2_10002e6b = inttoptr i32 %v1_10002e6b to i32*
  %v3_10002e6b = load i32, i32* %v2_10002e6b, align 4
  %v0_10002e70 = load i32, i32* %edi.global-to-local, align 4
  %v2_10002e72 = mul i32 %v0_10002e70, 32
  store i32 %v2_10002e72, i32* %esi.global-to-local, align 4
  %v3_10002e75 = or i32 %v2_10002e72, 16
  %v4_10002e75 = add i32 %v3_10002e75, %v3_10002e6b
  store i32 %v4_10002e75, i32* %eax.global-to-local, align 4
  %v1_10002e79 = load i32, i32* @esp, align 4
  %v2_10002e79 = add i32 %v1_10002e79, -4
  %v3_10002e79 = inttoptr i32 %v2_10002e79 to i32*
  store i32 %v4_10002e75, i32* %v3_10002e79, align 4
  %v0_10002e7a = load i32, i32* @ecx, align 4
  %v2_10002e7a = add i32 %v1_10002e79, -8
  %v3_10002e7a = inttoptr i32 %v2_10002e7a to i32*
  store i32 %v0_10002e7a, i32* %v3_10002e7a, align 4
  %v0_10002e80 = load i32, i32* %eax.global-to-local, align 4
  %v4_10002e80 = trunc i32 %v0_10002e80 to i8
  %v5_10002e80 = icmp eq i8 %v4_10002e80, 0
  br i1 %v5_10002e80, label %dec_label_pc_10002ed0, label %dec_label_pc_10002e84

dec_label_pc_10002e84:                            ; preds = %dec_label_pc_10002e63
  store i32 %tmp, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v1_10002ed3, align 1
  %v0_10002e8a = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10002e8a = and i8 %v0_10002e8a, 1
  %v2_10002e8a = icmp eq i8 %v1_10002e8a, 0
  %v1_10002e91 = icmp eq i1 %v2_10002e8a, false
  br i1 %v1_10002e91, label %dec_label_pc_10002eb8, label %dec_label_pc_10002e93

dec_label_pc_10002e93:                            ; preds = %dec_label_pc_10002e84
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_10002e98 = or i8 %v0_10002e8a, 1
  store i8 %v3_10002e98, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @ecx, align 4
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10002eb8

dec_label_pc_10002eb8:                            ; preds = %dec_label_pc_10002e93, %dec_label_pc_10002e84
  %v0_10002eb8 = load i32, i32* %edi.global-to-local, align 4
  %v10_10002eb8 = icmp eq i32 %v0_10002eb8, -1
  br i1 %v10_10002eb8, label %dec_label_pc_10002ec7, label %dec_label_pc_10002ebd

dec_label_pc_10002ebd:                            ; preds = %dec_label_pc_10002eb8
  %v0_10002ebd = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002ebd = add i32 %v0_10002ebd, 4
  %v2_10002ebd = inttoptr i32 %v1_10002ebd to i32*
  %v3_10002ebd = load i32, i32* %v2_10002ebd, align 4
  store i32 %v3_10002ebd, i32* %eax.global-to-local, align 4
  %v1_10002ec0 = load i32, i32* %esi.global-to-local, align 4
  %v3_10002ec0 = add i32 %v1_10002ec0, %v3_10002ebd
  %v4_10002ec0 = inttoptr i32 %v3_10002ec0 to i32*
  %v5_10002ec0 = load i32, i32* %v4_10002ec0, align 4
  store i32 %v5_10002ec0, i32* %edi.global-to-local, align 4
  store i32 %v3_10002ec0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10002f1a

dec_label_pc_10002ec7:                            ; preds = %dec_label_pc_10002eb8
  store i32 ptrtoint (i32* @global_var_1002b61c.159 to i32), i32* %eax.global-to-local, align 4
  %v2_10002ecc = load i32, i32* @global_var_1002b61c.159, align 4
  store i32 %v2_10002ecc, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10002f1a

dec_label_pc_10002ed0:                            ; preds = %dec_label_pc_10002e63
  store i32 %tmp, i32* @ecx, align 4
  store i8 0, i8* %v1_10002ed3, align 1
  %v0_10002ed6 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10002ed6 = and i8 %v0_10002ed6, 1
  %v2_10002ed6 = icmp eq i8 %v1_10002ed6, 0
  %v1_10002edd = icmp eq i1 %v2_10002ed6, false
  br i1 %v1_10002edd, label %dec_label_pc_10002f04, label %dec_label_pc_10002edf

dec_label_pc_10002edf:                            ; preds = %dec_label_pc_10002ed0
  store i32 1, i32* @ecx, align 4
  %v3_10002ee4 = or i8 %v0_10002ed6, 1
  store i8 %v3_10002ee4, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10002f07

dec_label_pc_10002f04:                            ; preds = %dec_label_pc_10002ed0
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10002f07

dec_label_pc_10002f07:                            ; preds = %dec_label_pc_10002f04, %dec_label_pc_10002edf
  %v0_10002f07 = load i32, i32* %edi.global-to-local, align 4
  %v12_10002f07 = icmp eq i32 %v0_10002f07, -1
  br i1 %v12_10002f07, label %dec_label_pc_10002f17, label %dec_label_pc_10002f0b

dec_label_pc_10002f0b:                            ; preds = %dec_label_pc_10002f07
  %v0_10002f0b = load i32, i32* %ebx.global-to-local, align 4
  %v1_10002f0b = add i32 %v0_10002f0b, 4
  %v2_10002f0b = inttoptr i32 %v1_10002f0b to i32*
  %v3_10002f0b = load i32, i32* %v2_10002f0b, align 4
  store i32 %v3_10002f0b, i32* %eax.global-to-local, align 4
  %v1_10002f0e = load i32, i32* %esi.global-to-local, align 4
  %v2_10002f0e = add i32 %v1_10002f0e, %v3_10002f0b
  br label %dec_label_pc_10002f17

dec_label_pc_10002f17:                            ; preds = %dec_label_pc_10002f07, %dec_label_pc_10002f0b
  %storemerge = phi i32 [ %v2_10002f0e, %dec_label_pc_10002f0b ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10002f07 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_10002f17 = add i32 %storemerge, 4
  %v2_10002f17 = inttoptr i32 %v1_10002f17 to i32*
  %v3_10002f17 = load i32, i32* %v2_10002f17, align 4
  store i32 %v3_10002f17, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10002f1a

dec_label_pc_10002f1a:                            ; preds = %dec_label_pc_10002f17, %dec_label_pc_10002ec7, %dec_label_pc_10002ebd
  %v0_10002f278 = phi i32 [ %storemerge, %dec_label_pc_10002f17 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10002ec7 ], [ %v3_10002ec0, %dec_label_pc_10002ebd ]
  %v0_10002f1a = phi i32 [ %v3_10002f17, %dec_label_pc_10002f17 ], [ %v2_10002ecc, %dec_label_pc_10002ec7 ], [ %v5_10002ec0, %dec_label_pc_10002ebd ]
  %v10_10002f1a = icmp eq i32 %v0_10002f1a, -1
  %v1_10002f1d = icmp eq i1 %v10_10002f1a, false
  br i1 %v1_10002f1d, label %dec_label_pc_10002e63, label %dec_label_pc_10002f23

dec_label_pc_10002f23:                            ; preds = %dec_label_pc_10002f1a
  %v0_10002f23 = load i32, i32* @esp, align 4
  %v1_10002f23 = inttoptr i32 %v0_10002f23 to i32*
  %v2_10002f23 = load i32, i32* %v1_10002f23, align 4
  store i32 %v2_10002f23, i32* @esi, align 4
  %v3_10002f23 = add i32 %v0_10002f23, 4
  br label %dec_label_pc_10002f24

dec_label_pc_10002f24:                            ; preds = %dec_label_pc_10002e40.dec_label_pc_10002f24_crit_edge, %dec_label_pc_10002f23
  %v0_10002f27 = phi i32 [ %v0_10002f27.pre, %dec_label_pc_10002e40.dec_label_pc_10002f24_crit_edge ], [ %v0_10002f278, %dec_label_pc_10002f23 ]
  %v0_10002f24 = phi i32 [ %v0_10002f24.pre, %dec_label_pc_10002e40.dec_label_pc_10002f24_crit_edge ], [ %v3_10002f23, %dec_label_pc_10002f23 ]
  %v1_10002f24 = inttoptr i32 %v0_10002f24 to i32*
  %v2_10002f24 = load i32, i32* %v1_10002f24, align 4
  store i32 %v2_10002f24, i32* @edi, align 4
  %v3_10002f24 = add i32 %v0_10002f24, 4
  %v1_10002f25 = inttoptr i32 %v3_10002f24 to i32*
  %v2_10002f25 = load i32, i32* %v1_10002f25, align 4
  store i32 %v2_10002f25, i32* @ebx, align 4
  %v3_10002f25 = add i32 %v0_10002f24, 8
  %v1_10002f26 = inttoptr i32 %v3_10002f25 to i32*
  %v2_10002f26 = load i32, i32* %v1_10002f26, align 4
  store i32 %v2_10002f26, i32* @ebp, align 4
  ret i32 %v0_10002f27
}

define i32 @function_10002f30() local_unnamed_addr {
dec_label_pc_10002f30:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10002f30 = load i32, i32* @ebp, align 4
  %v0_10002f33 = load i32, i32* @ecx, align 4
  store i32 %v0_10002f33, i32* %stack_var_-8, align 4
  %v4_10002f33 = ptrtoint i32* %stack_var_-8 to i32
  %v0_10002f34 = load i32, i32* @esi, align 4
  store i32 %v0_10002f33, i32* @esi, align 4
  %v1_10002f37 = add i32 %v0_10002f33, 24
  %v2_10002f37 = inttoptr i32 %v1_10002f37 to i32*
  %v3_10002f37 = load i32, i32* %v2_10002f37, align 4
  store i32 %v3_10002f37, i32* %eax.global-to-local, align 4
  %v0_10002f3a = load i32, i32* @edi, align 4
  %v10_10002f3b = icmp eq i32 %v3_10002f37, -1
  %v1_10002f3e = icmp eq i1 %v10_10002f3b, false
  br i1 %v1_10002f3e, label %dec_label_pc_10002fcb, label %dec_label_pc_10002f44

dec_label_pc_10002f44:                            ; preds = %dec_label_pc_10002f30
  %v1_10002f44 = add i32 %v0_10002f33, 28
  %v2_10002f44 = inttoptr i32 %v1_10002f44 to i32*
  %v3_10002f44 = load i32, i32* %v2_10002f44, align 4
  store i32 %v3_10002f44, i32* @ecx, align 4
  %v2_10002f47 = icmp slt i32 %v3_10002f44, 0
  %.pre = add i32 %v0_10002f33, 8
  %.pre10 = inttoptr i32 %.pre to i32*
  br i1 %v2_10002f47, label %dec_label_pc_10002f5e, label %dec_label_pc_10002f4b

dec_label_pc_10002f4b:                            ; preds = %dec_label_pc_10002f44
  %v3_10002f4b = load i32, i32* %.pre10, align 4
  store i32 %v3_10002f4b, i32* @eax, align 4
  %v5_10002f50 = icmp slt i32 %v3_10002f44, %v3_10002f4b
  br i1 %v5_10002f50, label %dec_label_pc_10002f52, label %dec_label_pc_10002f5e

dec_label_pc_10002f52:                            ; preds = %dec_label_pc_10002f4b
  %v1_10002f52 = add i32 %v3_10002f44, 1
  %v10_10002f52 = icmp slt i32 %v1_10002f52, 0
  store i32 %v1_10002f52, i32* @ecx, align 4
  br i1 %v10_10002f52, label %dec_label_pc_10002f59, label %dec_label_pc_10002f55

dec_label_pc_10002f55:                            ; preds = %dec_label_pc_10002f52
  %v5_10002f57 = icmp slt i32 %v1_10002f52, %v3_10002f4b
  br i1 %v5_10002f57, label %dec_label_pc_10002f69, label %dec_label_pc_10002f59

dec_label_pc_10002f59:                            ; preds = %dec_label_pc_10002f55, %dec_label_pc_10002f52
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_10002f69

dec_label_pc_10002f5e:                            ; preds = %dec_label_pc_10002f44, %dec_label_pc_10002f4b
  %v3_10002f5e = load i32, i32* %.pre10, align 4
  store i32 %v3_10002f5e, i32* @eax, align 4
  %v1_10002f63 = icmp eq i32 %v3_10002f5e, 0
  %v2_10002f63 = icmp slt i32 %v3_10002f5e, 0
  %v3_10002f65 = icmp eq i1 %v2_10002f63, false
  %v4_10002f65 = icmp eq i1 %v1_10002f63, false
  %v5_10002f65 = icmp eq i1 %v3_10002f65, %v4_10002f65
  %not.v5_10002f6513 = icmp ne i1 %v5_10002f65, true
  %v1_10002f68 = sext i1 %not.v5_10002f6513 to i32
  store i32 %v1_10002f68, i32* @ecx, align 4
  br label %dec_label_pc_10002f69

dec_label_pc_10002f69:                            ; preds = %dec_label_pc_10002f55, %dec_label_pc_10002f5e, %dec_label_pc_10002f59
  %v1_10002f75 = phi i32 [ %v3_10002f5e, %dec_label_pc_10002f5e ], [ %v3_10002f4b, %dec_label_pc_10002f59 ], [ %v3_10002f4b, %dec_label_pc_10002f55 ]
  %v3_10002f7e = phi i32 [ %v1_10002f68, %dec_label_pc_10002f5e ], [ -1, %dec_label_pc_10002f59 ], [ %v1_10002f52, %dec_label_pc_10002f55 ]
  store i32 %v3_10002f7e, i32* %stack_var_-8, align 4
  store i32 %v4_10002f33, i32* @ecx, align 4
  store i32 %v3_10002f7e, i32* @edi, align 4
  %v2_10002f71 = icmp slt i32 %v3_10002f7e, 0
  br i1 %v2_10002f71, label %dec_label_pc_10002f79, label %dec_label_pc_10002f75

dec_label_pc_10002f75:                            ; preds = %dec_label_pc_10002f69
  %v5_10002f77 = icmp slt i32 %v3_10002f7e, %v1_10002f75
  br i1 %v5_10002f77, label %dec_label_pc_10002fc6, label %dec_label_pc_10002f79

dec_label_pc_10002f79:                            ; preds = %dec_label_pc_10002f75, %dec_label_pc_10002f69
  %v1_10002f7b = add i32 %v0_10002f33, 4
  store i32 %v1_10002f7b, i32* @ecx, align 4
  %v5_10002f7e = call i32 @function_10002bd0(i32 1, i32 %v0_10002f3a, i32 %v0_10002f34, i32 %v3_10002f7e, i32 %v0_10002f30)
  store i32 %v5_10002f7e, i32* %eax.global-to-local, align 4
  %v0_10002f83 = load i32, i32* @esi, align 4
  %v1_10002f83 = add i32 %v0_10002f83, 28
  %v2_10002f83 = inttoptr i32 %v1_10002f83 to i32*
  %v3_10002f83 = load i32, i32* %v2_10002f83, align 4
  store i32 %v3_10002f83, i32* @ecx, align 4
  %v2_10002f86 = icmp slt i32 %v3_10002f83, 0
  %.pre11 = add i32 %v0_10002f83, 8
  %.pre12 = inttoptr i32 %.pre11 to i32*
  br i1 %v2_10002f86, label %dec_label_pc_10002f9d, label %dec_label_pc_10002f8a

dec_label_pc_10002f8a:                            ; preds = %dec_label_pc_10002f79
  %v3_10002f8a = load i32, i32* %.pre12, align 4
  store i32 %v3_10002f8a, i32* %eax.global-to-local, align 4
  %v5_10002f8f = icmp slt i32 %v3_10002f83, %v3_10002f8a
  br i1 %v5_10002f8f, label %dec_label_pc_10002f91, label %dec_label_pc_10002f9d

dec_label_pc_10002f91:                            ; preds = %dec_label_pc_10002f8a
  %v1_10002f91 = add i32 %v3_10002f83, 1
  %v10_10002f91 = icmp slt i32 %v1_10002f91, 0
  store i32 %v1_10002f91, i32* @ecx, align 4
  br i1 %v10_10002f91, label %dec_label_pc_10002f98, label %dec_label_pc_10002f94

dec_label_pc_10002f94:                            ; preds = %dec_label_pc_10002f91
  %v5_10002f96 = icmp slt i32 %v1_10002f91, %v3_10002f8a
  br i1 %v5_10002f96, label %dec_label_pc_10002fa8, label %dec_label_pc_10002f98

dec_label_pc_10002f98:                            ; preds = %dec_label_pc_10002f94, %dec_label_pc_10002f91
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_10002fa8

dec_label_pc_10002f9d:                            ; preds = %dec_label_pc_10002f79, %dec_label_pc_10002f8a
  %v3_10002f9d = load i32, i32* %.pre12, align 4
  store i32 %v3_10002f9d, i32* %eax.global-to-local, align 4
  %v1_10002fa2 = icmp eq i32 %v3_10002f9d, 0
  %v2_10002fa2 = icmp slt i32 %v3_10002f9d, 0
  %v3_10002fa4 = icmp eq i1 %v2_10002fa2, false
  %v4_10002fa4 = icmp eq i1 %v1_10002fa2, false
  %v5_10002fa4 = icmp eq i1 %v3_10002fa4, %v4_10002fa4
  %not.v5_10002fa414 = icmp ne i1 %v5_10002fa4, true
  %v1_10002fa7 = sext i1 %not.v5_10002fa414 to i32
  store i32 %v1_10002fa7, i32* @ecx, align 4
  br label %dec_label_pc_10002fa8

dec_label_pc_10002fa8:                            ; preds = %dec_label_pc_10002f94, %dec_label_pc_10002f9d, %dec_label_pc_10002f98
  %v1_10002fb4 = phi i32 [ %v3_10002f9d, %dec_label_pc_10002f9d ], [ %v3_10002f8a, %dec_label_pc_10002f98 ], [ %v3_10002f8a, %dec_label_pc_10002f94 ]
  %v0_10002fb4 = phi i32 [ %v1_10002fa7, %dec_label_pc_10002f9d ], [ -1, %dec_label_pc_10002f98 ], [ %v1_10002f91, %dec_label_pc_10002f94 ]
  store i32 %v0_10002fb4, i32* %stack_var_-8, align 4
  store i32 %v4_10002f33, i32* @ecx, align 4
  store i32 %v0_10002fb4, i32* @edi, align 4
  %v2_10002fb0 = icmp slt i32 %v0_10002fb4, 0
  br i1 %v2_10002fb0, label %dec_label_pc_10002fb8, label %dec_label_pc_10002fb4

dec_label_pc_10002fb4:                            ; preds = %dec_label_pc_10002fa8
  %v5_10002fb6 = icmp slt i32 %v0_10002fb4, %v1_10002fb4
  br i1 %v5_10002fb6, label %dec_label_pc_10002fc6, label %dec_label_pc_10002fb8

dec_label_pc_10002fb8:                            ; preds = %dec_label_pc_10002fb4, %dec_label_pc_10002fa8
  %v0_10002fbd = call i32 @Error()
  store i32 %v0_10002fbd, i32* %eax.global-to-local, align 4
  %v0_10002fc6.pre = load i32, i32* @edi, align 4
  %v1_10002fc6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10002fc6

dec_label_pc_10002fc6:                            ; preds = %dec_label_pc_10002fb8, %dec_label_pc_10002fb4, %dec_label_pc_10002f75
  %v1_10002fc6 = phi i32 [ %v1_10002fc6.pre, %dec_label_pc_10002fb8 ], [ %v0_10002f83, %dec_label_pc_10002fb4 ], [ %v0_10002f33, %dec_label_pc_10002f75 ]
  %v0_10002fc6 = phi i32 [ %v0_10002fc6.pre, %dec_label_pc_10002fb8 ], [ %v0_10002fb4, %dec_label_pc_10002fb4 ], [ %v3_10002f7e, %dec_label_pc_10002f75 ]
  %v2_10002fc6 = add i32 %v1_10002fc6, 28
  %v3_10002fc6 = inttoptr i32 %v2_10002fc6 to i32*
  store i32 %v0_10002fc6, i32* %v3_10002fc6, align 4
  br label %dec_label_pc_10002fda

dec_label_pc_10002fcb:                            ; preds = %dec_label_pc_10002f30
  %v1_10002fcb = add i32 %v0_10002f33, 4
  %v2_10002fcb = inttoptr i32 %v1_10002fcb to i32*
  %v3_10002fcb = load i32, i32* %v2_10002fcb, align 4
  store i32 %v3_10002fcb, i32* @ecx, align 4
  store i32 %v3_10002f37, i32* @edi, align 4
  %v2_10002fd0 = mul i32 %v3_10002f37, 32
  store i32 %v2_10002fd0, i32* %eax.global-to-local, align 4
  %v3_10002fd3 = or i32 %v2_10002fd0, 4
  %v4_10002fd3 = add i32 %v3_10002fcb, %v3_10002fd3
  %v5_10002fd3 = inttoptr i32 %v4_10002fd3 to i32*
  %v6_10002fd3 = load i32, i32* %v5_10002fd3, align 4
  store i32 %v6_10002fd3, i32* %v2_10002f37, align 4
  br label %dec_label_pc_10002fda

dec_label_pc_10002fda:                            ; preds = %dec_label_pc_10002fcb, %dec_label_pc_10002fc6
  %v0_10002fda = load i32, i32* @esi, align 4
  %v1_10002fda = add i32 %v0_10002fda, 4
  %v2_10002fda = inttoptr i32 %v1_10002fda to i32*
  %v3_10002fda = load i32, i32* %v2_10002fda, align 4
  %v0_10002fdd = load i32, i32* @edi, align 4
  %v2_10002fdf = mul i32 %v0_10002fdd, 32
  store i32 %v2_10002fdf, i32* %eax.global-to-local, align 4
  %v3_10002fe2 = or i32 %v2_10002fdf, 16
  %v4_10002fe2 = add i32 %v3_10002fe2, %v3_10002fda
  store i32 %v4_10002fe2, i32* @ecx, align 4
  %v1_10002fe6 = icmp eq i32 %v4_10002fe2, 0
  br i1 %v1_10002fe6, label %dec_label_pc_10002fef, label %dec_label_pc_10002fea

dec_label_pc_10002fea:                            ; preds = %dec_label_pc_10002fda
  %v0_10002fea = call i32 @function_1000d140()
  store i32 %v0_10002fea, i32* %eax.global-to-local, align 4
  %v0_10002fef.pre = load i32, i32* @esi, align 4
  %v0_10002ff2.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10002fef

dec_label_pc_10002fef:                            ; preds = %dec_label_pc_10002fea, %dec_label_pc_10002fda
  %v0_10002ff2 = phi i32 [ %v0_10002ff2.pre, %dec_label_pc_10002fea ], [ %v0_10002fdd, %dec_label_pc_10002fda ]
  %v1_10002ff5 = phi i32 [ %v0_10002fef.pre, %dec_label_pc_10002fea ], [ %v0_10002fda, %dec_label_pc_10002fda ]
  %v1_10002fef = add i32 %v1_10002ff5, 4
  %v2_10002fef = inttoptr i32 %v1_10002fef to i32*
  %v3_10002fef = load i32, i32* %v2_10002fef, align 4
  store i32 %v0_10002ff2, i32* %eax.global-to-local, align 4
  %v2_10002ff5 = add i32 %v1_10002ff5, 32
  %v3_10002ff5 = inttoptr i32 %v2_10002ff5 to i32*
  store i32 %v3_10002fef, i32* %v3_10002ff5, align 4
  %v0_10002ff8 = load i32, i32* @esp, align 4
  %v1_10002ff8 = inttoptr i32 %v0_10002ff8 to i32*
  %v2_10002ff8 = load i32, i32* %v1_10002ff8, align 4
  store i32 %v2_10002ff8, i32* @esi, align 4
  %v0_10002ffc = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10002ffc
}

define i32 @function_10003000(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003000:
  %v0_10003003 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10003003 = sext i8 %v0_10003003 to i32
  %v0_1000300d = load i32, i32* @edi, align 4
  %v2_1000300e = and i32 %v1_10003003, 1
  %v3_1000300e = icmp eq i32 %v2_1000300e, 0
  %v1_10003011 = icmp eq i1 %v3_1000300e, false
  br i1 %v1_10003011, label %dec_label_pc_10003038, label %dec_label_pc_10003013

dec_label_pc_10003013:                            ; preds = %dec_label_pc_10003000
  %v1_10003013 = or i32 %v1_10003003, 1
  %v4_10003013 = trunc i32 %v1_10003013 to i8
  store i8 %v4_10003013, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003038

dec_label_pc_10003038:                            ; preds = %dec_label_pc_10003013, %dec_label_pc_10003000
  %v0_10003056 = phi i32 [ %v1_10003013, %dec_label_pc_10003013 ], [ %v1_10003003, %dec_label_pc_10003000 ]
  %v12_1000303b = icmp eq i32 %arg1, -1
  br i1 %v12_1000303b, label %dec_label_pc_1000304e, label %dec_label_pc_1000303f

dec_label_pc_1000303f:                            ; preds = %dec_label_pc_10003038
  %v2_10003041 = mul i32 %arg1, 32
  %v1_10003044 = load i32, i32* @ecx, align 4
  %v2_10003044 = add i32 %v1_10003044, 4
  %v3_10003044 = inttoptr i32 %v2_10003044 to i32*
  %v4_10003044 = load i32, i32* %v3_10003044, align 4
  %v5_10003044 = add i32 %v4_10003044, %v2_10003041
  br label %dec_label_pc_1000304e

dec_label_pc_1000304e:                            ; preds = %dec_label_pc_10003038, %dec_label_pc_1000303f
  %storemerge = phi i32 [ %v5_10003044, %dec_label_pc_1000303f ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003038 ]
  %v1_1000304e = add i32 %storemerge, 8
  %v2_1000304e = inttoptr i32 %v1_1000304e to i32*
  %v3_1000304e = load i32, i32* %v2_1000304e, align 4
  %v2_10003051 = and i32 %v0_10003056, 1
  %v3_10003051 = icmp eq i32 %v2_10003051, 0
  %v1_10003054 = icmp eq i1 %v3_10003051, false
  br i1 %v1_10003054, label %dec_label_pc_1000307b, label %dec_label_pc_10003056

dec_label_pc_10003056:                            ; preds = %dec_label_pc_1000304e
  %v1_10003056 = or i32 %v0_10003056, 1
  %v4_10003056 = trunc i32 %v1_10003056 to i8
  store i8 %v4_10003056, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000307b

dec_label_pc_1000307b:                            ; preds = %dec_label_pc_10003056, %dec_label_pc_1000304e
  %v12_1000307b = icmp eq i32 %v3_1000304e, -1
  br i1 %v12_1000307b, label %dec_label_pc_10003092, label %dec_label_pc_1000307f

dec_label_pc_1000307f:                            ; preds = %dec_label_pc_1000307b
  %v2_1000307f = mul i32 %v3_1000304e, 32
  %v1_10003082 = load i32, i32* @ecx, align 4
  %v2_10003082 = add i32 %v1_10003082, 4
  %v3_10003082 = inttoptr i32 %v2_10003082 to i32*
  %v4_10003082 = load i32, i32* %v3_10003082, align 4
  %v5_10003082 = add i32 %v4_10003082, %v2_1000307f
  store i32 0, i32* @ecx, align 4
  %v1_10003087 = inttoptr i32 %v5_10003082 to i32*
  %v2_10003087 = load i32, i32* %v1_10003087, align 4
  %v14_10003087 = icmp eq i32 %v2_10003087, %arg1
  store i32 %v0_1000300d, i32* @edi, align 4
  %v1_1000308a = zext i1 %v14_10003087 to i32
  %v3_1000308a = and i32 %v5_10003082, -256
  %v4_1000308a = or i32 %v1_1000308a, %v3_1000308a
  ret i32 %v4_1000308a

dec_label_pc_10003092:                            ; preds = %dec_label_pc_1000307b
  store i32 0, i32* @ecx, align 4
  %v2_10003099 = load i32, i32* @global_var_1002b61c.159, align 4
  %v14_10003099 = icmp eq i32 %v2_10003099, %arg1
  store i32 %v0_1000300d, i32* @edi, align 4
  %v1_1000309c = zext i1 %v14_10003099 to i32
  %v4_1000309c = or i32 %v1_1000309c, and (i32 ptrtoint (i32* @global_var_1002b61c.159 to i32), i32 -256)
  ret i32 %v4_1000309c
}

define i32 @function_100030b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100030b0:
  %v0_100030b3 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_100030b3 = sext i8 %v0_100030b3 to i32
  %v0_100030bd = load i32, i32* @edi, align 4
  %v2_100030be = and i32 %v1_100030b3, 1
  %v3_100030be = icmp eq i32 %v2_100030be, 0
  %v1_100030c1 = icmp eq i1 %v3_100030be, false
  br i1 %v1_100030c1, label %dec_label_pc_100030e8, label %dec_label_pc_100030c3

dec_label_pc_100030c3:                            ; preds = %dec_label_pc_100030b0
  %v1_100030c3 = or i32 %v1_100030b3, 1
  %v4_100030c3 = trunc i32 %v1_100030c3 to i8
  store i8 %v4_100030c3, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100030e8

dec_label_pc_100030e8:                            ; preds = %dec_label_pc_100030c3, %dec_label_pc_100030b0
  %v0_10003106 = phi i32 [ %v1_100030c3, %dec_label_pc_100030c3 ], [ %v1_100030b3, %dec_label_pc_100030b0 ]
  %v12_100030eb = icmp eq i32 %arg1, -1
  br i1 %v12_100030eb, label %dec_label_pc_100030fe, label %dec_label_pc_100030ef

dec_label_pc_100030ef:                            ; preds = %dec_label_pc_100030e8
  %v2_100030f1 = mul i32 %arg1, 32
  %v1_100030f4 = load i32, i32* @ecx, align 4
  %v2_100030f4 = add i32 %v1_100030f4, 4
  %v3_100030f4 = inttoptr i32 %v2_100030f4 to i32*
  %v4_100030f4 = load i32, i32* %v3_100030f4, align 4
  %v5_100030f4 = add i32 %v4_100030f4, %v2_100030f1
  br label %dec_label_pc_100030fe

dec_label_pc_100030fe:                            ; preds = %dec_label_pc_100030e8, %dec_label_pc_100030ef
  %storemerge = phi i32 [ %v5_100030f4, %dec_label_pc_100030ef ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100030e8 ]
  %v1_100030fe = add i32 %storemerge, 8
  %v2_100030fe = inttoptr i32 %v1_100030fe to i32*
  %v3_100030fe = load i32, i32* %v2_100030fe, align 4
  %v2_10003101 = and i32 %v0_10003106, 1
  %v3_10003101 = icmp eq i32 %v2_10003101, 0
  %v1_10003104 = icmp eq i1 %v3_10003101, false
  br i1 %v1_10003104, label %dec_label_pc_1000312b, label %dec_label_pc_10003106

dec_label_pc_10003106:                            ; preds = %dec_label_pc_100030fe
  %v1_10003106 = or i32 %v0_10003106, 1
  %v4_10003106 = trunc i32 %v1_10003106 to i8
  store i8 %v4_10003106, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000312b

dec_label_pc_1000312b:                            ; preds = %dec_label_pc_10003106, %dec_label_pc_100030fe
  %v12_1000312b = icmp eq i32 %v3_100030fe, -1
  br i1 %v12_1000312b, label %dec_label_pc_10003143, label %dec_label_pc_1000312f

dec_label_pc_1000312f:                            ; preds = %dec_label_pc_1000312b
  %v2_1000312f = mul i32 %v3_100030fe, 32
  %v1_10003132 = load i32, i32* @ecx, align 4
  %v2_10003132 = add i32 %v1_10003132, 4
  %v3_10003132 = inttoptr i32 %v2_10003132 to i32*
  %v4_10003132 = load i32, i32* %v3_10003132, align 4
  %v5_10003132 = add i32 %v4_10003132, %v2_1000312f
  store i32 0, i32* @ecx, align 4
  %v1_10003137 = add i32 %v5_10003132, 4
  %v2_10003137 = inttoptr i32 %v1_10003137 to i32*
  %v3_10003137 = load i32, i32* %v2_10003137, align 4
  %v15_10003137 = icmp eq i32 %v3_10003137, %arg1
  store i32 %v0_100030bd, i32* @edi, align 4
  %v1_1000313b = zext i1 %v15_10003137 to i32
  %v3_1000313b = and i32 %v5_10003132, -256
  %v4_1000313b = or i32 %v1_1000313b, %v3_1000313b
  ret i32 %v4_1000313b

dec_label_pc_10003143:                            ; preds = %dec_label_pc_1000312b
  store i32 0, i32* @ecx, align 4
  %v3_1000314a = load i32, i32* @global_var_1002b620.160, align 4
  %v15_1000314a = icmp eq i32 %v3_1000314a, %arg1
  store i32 %v0_100030bd, i32* @edi, align 4
  %v1_1000314e = zext i1 %v15_1000314a to i32
  %v4_1000314e = or i32 %v1_1000314e, and (i32 ptrtoint (i32* @global_var_1002b61c.159 to i32), i32 -256)
  ret i32 %v4_1000314e
}

define i32 @function_10003160(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003160:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10003164 = load i32, i32* @ecx, align 4
  store i32 %v0_10003164, i32* @esi, align 4
  %v0_10003166 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10003166 = sext i8 %v0_10003166 to i32
  store i32 %v1_10003166, i32* @ecx, align 4
  %v2_1000316d = and i8 %v0_10003166, 1
  %v3_1000316d = icmp eq i8 %v2_1000316d, 0
  %v1_10003170 = icmp eq i1 %v3_1000316d, false
  br i1 %v1_10003170, label %dec_label_pc_1000319c, label %dec_label_pc_10003172

dec_label_pc_10003172:                            ; preds = %dec_label_pc_10003160
  %v1_10003172 = or i32 %v1_10003166, 1
  %v4_10003172 = trunc i32 %v1_10003172 to i8
  store i32 %v1_10003172, i32* @ecx, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  store i8 %v4_10003172, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000319f

dec_label_pc_1000319c:                            ; preds = %dec_label_pc_10003160
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000319f

dec_label_pc_1000319f:                            ; preds = %dec_label_pc_1000319c, %dec_label_pc_10003172
  %v0_1000320410 = phi i8 [ %v0_10003166, %dec_label_pc_1000319c ], [ %v4_10003172, %dec_label_pc_10003172 ]
  %v0_100031be = phi i32 [ %v1_10003166, %dec_label_pc_1000319c ], [ %v1_10003172, %dec_label_pc_10003172 ]
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v12_100031a3 = icmp eq i32 %arg1, -1
  br i1 %v12_100031a3, label %dec_label_pc_100031b6, label %dec_label_pc_100031a7

dec_label_pc_100031a7:                            ; preds = %dec_label_pc_1000319f
  %v2_100031a9 = mul i32 %arg1, 32
  store i32 %v2_100031a9, i32* %eax.global-to-local, align 4
  %v2_100031ac = add i32 %v0_10003164, 4
  %v3_100031ac = inttoptr i32 %v2_100031ac to i32*
  %v4_100031ac = load i32, i32* %v3_100031ac, align 4
  %v5_100031ac = add i32 %v4_100031ac, %v2_100031a9
  br label %dec_label_pc_100031b6

dec_label_pc_100031b6:                            ; preds = %dec_label_pc_1000319f, %dec_label_pc_100031a7
  %storemerge5 = phi i32 [ %v5_100031ac, %dec_label_pc_100031a7 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000319f ]
  store i32 %storemerge5, i32* %eax.global-to-local, align 4
  %v1_100031b6 = add i32 %storemerge5, 4
  %v2_100031b6 = inttoptr i32 %v1_100031b6 to i32*
  %v3_100031b6 = load i32, i32* %v2_100031b6, align 4
  store i32 %v3_100031b6, i32* @edi, align 4
  %v2_100031b9 = and i32 %v0_100031be, 1
  %v3_100031b9 = icmp eq i32 %v2_100031b9, 0
  %v1_100031bc = icmp eq i1 %v3_100031b9, false
  br i1 %v1_100031bc, label %dec_label_pc_100031e3, label %dec_label_pc_100031be

dec_label_pc_100031be:                            ; preds = %dec_label_pc_100031b6
  %v1_100031be = or i32 %v0_100031be, 1
  %v4_100031be = trunc i32 %v1_100031be to i8
  store i32 %v1_100031be, i32* @ecx, align 4
  store i8 %v4_100031be, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100031e3

dec_label_pc_100031e3:                            ; preds = %dec_label_pc_100031be, %dec_label_pc_100031b6
  %v0_10003204 = phi i8 [ %v4_100031be, %dec_label_pc_100031be ], [ %v0_1000320410, %dec_label_pc_100031b6 ]
  %v12_100031e3 = icmp eq i32 %v3_100031b6, -1
  br i1 %v12_100031e3, label %dec_label_pc_100031e3.dec_label_pc_100031f6_crit_edge, label %dec_label_pc_100031e7

dec_label_pc_100031e3.dec_label_pc_100031f6_crit_edge: ; preds = %dec_label_pc_100031e3
  %.pre = add i32 %v0_10003164, 4
  %.pre24 = inttoptr i32 %.pre to i32*
  br label %dec_label_pc_100031f6

dec_label_pc_100031e7:                            ; preds = %dec_label_pc_100031e3
  %v2_100031e9 = mul i32 %v3_100031b6, 32
  store i32 %v2_100031e9, i32* %eax.global-to-local, align 4
  %v2_100031ec = add i32 %v0_10003164, 4
  %v3_100031ec = inttoptr i32 %v2_100031ec to i32*
  %v4_100031ec = load i32, i32* %v3_100031ec, align 4
  %v5_100031ec = add i32 %v4_100031ec, %v2_100031e9
  br label %dec_label_pc_100031f6

dec_label_pc_100031f6:                            ; preds = %dec_label_pc_100031e3.dec_label_pc_100031f6_crit_edge, %dec_label_pc_100031e7
  %v2_100031f6.pre-phi = phi i32* [ %.pre24, %dec_label_pc_100031e3.dec_label_pc_100031f6_crit_edge ], [ %v3_100031ec, %dec_label_pc_100031e7 ]
  %storemerge4 = phi i32 [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100031e3.dec_label_pc_100031f6_crit_edge ], [ %v5_100031ec, %dec_label_pc_100031e7 ]
  store i32 %storemerge4, i32* %eax.global-to-local, align 4
  %v3_100031f6 = load i32, i32* %v2_100031f6.pre-phi, align 4
  store i32 %v3_100031f6, i32* @ecx, align 4
  %v1_100031f9 = inttoptr i32 %storemerge4 to i32*
  %v2_100031f9 = load i32, i32* %v1_100031f9, align 4
  store i32 %v2_100031f9, i32* %eax.global-to-local, align 4
  %v2_100031fd = mul i32 %arg1, 32
  store i32 %v2_100031fd, i32* %edx.global-to-local, align 4
  %v4_10003200 = or i32 %v2_100031fd, 4
  %v5_10003200 = add i32 %v3_100031f6, %v4_10003200
  %v6_10003200 = inttoptr i32 %v5_10003200 to i32*
  store i32 %v2_100031f9, i32* %v6_10003200, align 4
  %v1_10003204 = sext i8 %v0_10003204 to i32
  store i32 %v1_10003204, i32* @ecx, align 4
  %v0_1000320a = load i32, i32* %edx.global-to-local, align 4
  %v2_1000320d = and i8 %v0_10003204, 1
  %v3_1000320d = icmp eq i8 %v2_1000320d, 0
  %v1_10003210 = icmp eq i1 %v3_1000320d, false
  br i1 %v1_10003210, label %dec_label_pc_10003239, label %dec_label_pc_10003212

dec_label_pc_10003212:                            ; preds = %dec_label_pc_100031f6
  %v1_10003212 = or i32 %v1_10003204, 1
  %v4_10003212 = trunc i32 %v1_10003212 to i8
  store i32 %v1_10003212, i32* @ecx, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i8 %v4_10003212, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000323c

dec_label_pc_10003239:                            ; preds = %dec_label_pc_100031f6
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000323c

dec_label_pc_1000323c:                            ; preds = %dec_label_pc_10003239, %dec_label_pc_10003212
  %v0_100032a217 = phi i8 [ %v0_10003204, %dec_label_pc_10003239 ], [ %v4_10003212, %dec_label_pc_10003212 ]
  %v0_10003259 = phi i32 [ %v1_10003204, %dec_label_pc_10003239 ], [ %v1_10003212, %dec_label_pc_10003212 ]
  %v0_1000323c = load i32, i32* @edi, align 4
  %v12_1000323c = icmp eq i32 %v0_1000323c, -1
  br i1 %v12_1000323c, label %dec_label_pc_1000324f, label %dec_label_pc_10003240

dec_label_pc_10003240:                            ; preds = %dec_label_pc_1000323c
  %v2_10003242 = mul i32 %v0_1000323c, 32
  store i32 %v2_10003242, i32* %eax.global-to-local, align 4
  %v1_10003245 = load i32, i32* @esi, align 4
  %v2_10003245 = add i32 %v1_10003245, 4
  %v3_10003245 = inttoptr i32 %v2_10003245 to i32*
  %v4_10003245 = load i32, i32* %v3_10003245, align 4
  %v5_10003245 = add i32 %v4_10003245, %v2_10003242
  br label %dec_label_pc_1000324f

dec_label_pc_1000324f:                            ; preds = %dec_label_pc_1000323c, %dec_label_pc_10003240
  %storemerge3 = phi i32 [ %v5_10003245, %dec_label_pc_10003240 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000323c ]
  store i32 %storemerge3, i32* %eax.global-to-local, align 4
  %v1_1000324f = inttoptr i32 %storemerge3 to i32*
  %v2_1000324f = load i32, i32* %v1_1000324f, align 4
  %v12_1000324f = icmp eq i32 %v2_1000324f, -1
  br i1 %v12_1000324f, label %dec_label_pc_100032a8, label %dec_label_pc_10003254

dec_label_pc_10003254:                            ; preds = %dec_label_pc_1000324f
  %v2_10003254 = and i32 %v0_10003259, 1
  %v3_10003254 = icmp eq i32 %v2_10003254, 0
  %v1_10003257 = icmp eq i1 %v3_10003254, false
  br i1 %v1_10003257, label %dec_label_pc_10003280, label %dec_label_pc_10003259

dec_label_pc_10003259:                            ; preds = %dec_label_pc_10003254
  %v1_10003259 = or i32 %v0_10003259, 1
  %v4_10003259 = trunc i32 %v1_10003259 to i8
  store i32 %v1_10003259, i32* @ecx, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i8 %v4_10003259, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003283

dec_label_pc_10003280:                            ; preds = %dec_label_pc_10003254
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003283

dec_label_pc_10003283:                            ; preds = %dec_label_pc_10003280, %dec_label_pc_10003259
  %v0_100032a2 = phi i8 [ %v0_100032a217, %dec_label_pc_10003280 ], [ %v4_10003259, %dec_label_pc_10003259 ]
  br i1 %v12_1000323c, label %dec_label_pc_10003283.dec_label_pc_10003296_crit_edge, label %dec_label_pc_10003287

dec_label_pc_10003283.dec_label_pc_10003296_crit_edge: ; preds = %dec_label_pc_10003283
  %v0_10003298.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10003296

dec_label_pc_10003287:                            ; preds = %dec_label_pc_10003283
  %v2_10003289 = mul i32 %v0_1000323c, 32
  store i32 %v2_10003289, i32* %eax.global-to-local, align 4
  %v1_1000328c = load i32, i32* @esi, align 4
  %v2_1000328c = add i32 %v1_1000328c, 4
  %v3_1000328c = inttoptr i32 %v2_1000328c to i32*
  %v4_1000328c = load i32, i32* %v3_1000328c, align 4
  %v5_1000328c = add i32 %v4_1000328c, %v2_10003289
  br label %dec_label_pc_10003296

dec_label_pc_10003296:                            ; preds = %dec_label_pc_10003283.dec_label_pc_10003296_crit_edge, %dec_label_pc_10003287
  %v0_10003298 = phi i32 [ %v1_1000328c, %dec_label_pc_10003287 ], [ %v0_10003298.pre, %dec_label_pc_10003283.dec_label_pc_10003296_crit_edge ]
  %storemerge2 = phi i32 [ %v5_1000328c, %dec_label_pc_10003287 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003283.dec_label_pc_10003296_crit_edge ]
  store i32 %storemerge2, i32* %eax.global-to-local, align 4
  %v1_10003296 = inttoptr i32 %storemerge2 to i32*
  %v2_10003296 = load i32, i32* %v1_10003296, align 4
  store i32 %v2_10003296, i32* @ecx, align 4
  %v1_10003298 = add i32 %v0_10003298, 4
  %v2_10003298 = inttoptr i32 %v1_10003298 to i32*
  %v3_10003298 = load i32, i32* %v2_10003298, align 4
  store i32 %v3_10003298, i32* %eax.global-to-local, align 4
  %v2_1000329b = mul i32 %v2_10003296, 32
  %v0_1000329e = load i32, i32* %ebx.global-to-local, align 4
  %v4_1000329e = or i32 %v2_1000329b, 8
  %v5_1000329e = add i32 %v3_10003298, %v4_1000329e
  %v6_1000329e = inttoptr i32 %v5_1000329e to i32*
  store i32 %v0_1000329e, i32* %v6_1000329e, align 4
  %v1_100032a2 = sext i8 %v0_100032a2 to i32
  store i32 %v1_100032a2, i32* @ecx, align 4
  %v0_100032ab.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_100032a8

dec_label_pc_100032a8:                            ; preds = %dec_label_pc_10003296, %dec_label_pc_1000324f
  %v0_100032b4 = phi i32 [ %v1_100032a2, %dec_label_pc_10003296 ], [ %v0_10003259, %dec_label_pc_1000324f ]
  %v0_100032ec = phi i32 [ %v0_100032ab.pre, %dec_label_pc_10003296 ], [ %v0_1000323c, %dec_label_pc_1000324f ]
  store i32 -1, i32* %eax.global-to-local, align 4
  %v12_100032ab = icmp eq i32 %v0_100032ec, -1
  br i1 %v12_100032ab, label %dec_label_pc_100032f8, label %dec_label_pc_100032af

dec_label_pc_100032af:                            ; preds = %dec_label_pc_100032a8
  %v2_100032af = and i32 %v0_100032b4, 1
  %v3_100032af = icmp eq i32 %v2_100032af, 0
  %v1_100032b2 = icmp eq i1 %v3_100032af, false
  br i1 %v1_100032b2, label %dec_label_pc_100032d6, label %dec_label_pc_100032b4

dec_label_pc_100032b4:                            ; preds = %dec_label_pc_100032af
  %v1_100032b4 = or i32 %v0_100032b4, 1
  %v4_100032b4 = trunc i32 %v1_100032b4 to i8
  store i32 %v1_100032b4, i32* @ecx, align 4
  store i8 %v4_100032b4, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100032d6

dec_label_pc_100032d6:                            ; preds = %dec_label_pc_100032b4, %dec_label_pc_100032af
  %v0_100032d6 = load i32, i32* %ebx.global-to-local, align 4
  %v12_100032d6 = icmp eq i32 %v0_100032d6, -1
  %v0_100032e6.pre = load i32, i32* @esi, align 4
  %.pre35 = add i32 %v0_100032e6.pre, 4
  %.pre36 = inttoptr i32 %.pre35 to i32*
  br i1 %v12_100032d6, label %dec_label_pc_100032e6, label %dec_label_pc_100032da

dec_label_pc_100032da:                            ; preds = %dec_label_pc_100032d6
  %v3_100032da = load i32, i32* %.pre36, align 4
  store i32 %v3_100032da, i32* %eax.global-to-local, align 4
  %v1_100032dd = load i32, i32* %edx.global-to-local, align 4
  %v2_100032dd = add i32 %v1_100032dd, %v3_100032da
  br label %dec_label_pc_100032e6

dec_label_pc_100032e6:                            ; preds = %dec_label_pc_100032d6, %dec_label_pc_100032da
  %storemerge = phi i32 [ %v2_100032dd, %dec_label_pc_100032da ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100032d6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v3_100032e6 = load i32, i32* %.pre36, align 4
  store i32 %v3_100032e6, i32* %edx.global-to-local, align 4
  %v1_100032e9 = add i32 %storemerge, 8
  %v2_100032e9 = inttoptr i32 %v1_100032e9 to i32*
  %v3_100032e9 = load i32, i32* %v2_100032e9, align 4
  store i32 %v3_100032e9, i32* %eax.global-to-local, align 4
  %v2_100032ee = mul i32 %v0_100032ec, 32
  store i32 %v2_100032ee, i32* @ecx, align 4
  %v4_100032f1 = or i32 %v2_100032ee, 8
  %v5_100032f1 = add i32 %v3_100032e6, %v4_100032f1
  %v6_100032f1 = inttoptr i32 %v5_100032f1 to i32*
  store i32 %v3_100032e9, i32* %v6_100032f1, align 4
  store i32 %v0_1000320a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_100032f8

dec_label_pc_100032f8:                            ; preds = %dec_label_pc_100032e6, %dec_label_pc_100032a8
  %v0_100032f8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100032f8 = load i32, i32* @esi, align 4
  %v2_100032f8 = add i32 %v1_100032f8, 16
  %v3_100032f8 = inttoptr i32 %v2_100032f8 to i32*
  %v4_100032f8 = load i32, i32* %v3_100032f8, align 4
  %v15_100032f8 = icmp eq i32 %v0_100032f8, %v4_100032f8
  br i1 %v15_100032f8, label %dec_label_pc_10003333, label %dec_label_pc_100032fd

dec_label_pc_100032fd:                            ; preds = %dec_label_pc_100032f8
  store i32 %v1_100032f8, i32* @ecx, align 4
  %v1_10003300 = call i32 @function_10003000(i32 %v0_100032f8)
  store i32 %v1_10003300, i32* %eax.global-to-local, align 4
  %v0_10003305 = load i32, i32* %ebx.global-to-local, align 4
  %v0_10003306 = load i32, i32* @esi, align 4
  store i32 %v0_10003306, i32* @ecx, align 4
  %v4_10003308 = trunc i32 %v1_10003300 to i8
  %v5_10003308 = icmp eq i8 %v4_10003308, 0
  %v1_1000331f = call i32 @function_10002cd0(i32 %v0_10003305)
  store i32 %v1_1000331f, i32* %eax.global-to-local, align 4
  %v0_10003324 = load i32, i32* @esi, align 4
  %v1_10003324 = add i32 %v0_10003324, 4
  %v2_10003324 = inttoptr i32 %v1_10003324 to i32*
  %v3_10003324 = load i32, i32* %v2_10003324, align 4
  br i1 %v5_10003308, label %dec_label_pc_1000331f, label %dec_label_pc_1000330c

dec_label_pc_1000330c:                            ; preds = %dec_label_pc_100032fd
  store i32 %v3_10003324, i32* @ecx, align 4
  store i32 %v0_1000320a, i32* %edx.global-to-local, align 4
  %v2_10003317 = mul i32 %v1_1000331f, 32
  store i32 %v2_10003317, i32* %eax.global-to-local, align 4
  %v0_1000331a = load i32, i32* @edi, align 4
  %v4_1000331a = add i32 %v3_10003324, %v2_10003317
  %v5_1000331a = inttoptr i32 %v4_1000331a to i32*
  store i32 %v0_1000331a, i32* %v5_1000331a, align 4
  br label %dec_label_pc_10003336

dec_label_pc_1000331f:                            ; preds = %dec_label_pc_100032fd
  %v2_10003327 = mul i32 %v1_1000331f, 32
  store i32 %v2_10003327, i32* %eax.global-to-local, align 4
  %v0_1000332a = load i32, i32* @edi, align 4
  %v4_1000332a = or i32 %v2_10003327, 4
  %v5_1000332a = add i32 %v3_10003324, %v4_1000332a
  %v6_1000332a = inttoptr i32 %v5_1000332a to i32*
  store i32 %v0_1000332a, i32* %v6_1000332a, align 4
  store i32 %v0_1000320a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10003336

dec_label_pc_10003333:                            ; preds = %dec_label_pc_100032f8
  %v0_10003333 = load i32, i32* @edi, align 4
  store i32 %v0_10003333, i32* %v3_100032f8, align 4
  br label %dec_label_pc_10003336

dec_label_pc_10003336:                            ; preds = %dec_label_pc_10003333, %dec_label_pc_1000331f, %dec_label_pc_1000330c
  %v0_10003336 = load i32, i32* @esi, align 4
  %v1_10003336 = add i32 %v0_10003336, 4
  %v2_10003336 = inttoptr i32 %v1_10003336 to i32*
  %v3_10003336 = load i32, i32* %v2_10003336, align 4
  store i32 %v3_10003336, i32* @ecx, align 4
  %v0_10003339 = load i32, i32* @edi, align 4
  %v2_1000333b = mul i32 %v0_10003339, 32
  store i32 %v2_1000333b, i32* %eax.global-to-local, align 4
  %v0_1000333e = load i32, i32* %ebx.global-to-local, align 4
  %v4_1000333e = add i32 %v2_1000333b, %v3_10003336
  %v5_1000333e = inttoptr i32 %v4_1000333e to i32*
  store i32 %v0_1000333e, i32* %v5_1000333e, align 4
  %v0_10003341 = load i32, i32* %ebx.global-to-local, align 4
  %v10_10003341 = icmp eq i32 %v0_10003341, -1
  %v0_10003344 = load i32, i32* @esp, align 4
  %v1_10003344 = inttoptr i32 %v0_10003344 to i32*
  %v2_10003344 = load i32, i32* %v1_10003344, align 4
  store i32 %v2_10003344, i32* %ebx.global-to-local, align 4
  %v3_10003344 = add i32 %v0_10003344, 4
  br i1 %v10_10003341, label %dec_label_pc_1000334e, label %dec_label_pc_10003347

dec_label_pc_10003347:                            ; preds = %dec_label_pc_10003336
  %v0_10003347 = load i32, i32* @esi, align 4
  %v1_10003347 = add i32 %v0_10003347, 4
  %v2_10003347 = inttoptr i32 %v1_10003347 to i32*
  %v3_10003347 = load i32, i32* %v2_10003347, align 4
  store i32 %v3_10003347, i32* %eax.global-to-local, align 4
  %v0_1000334a = load i32, i32* @edi, align 4
  %v1_1000334a = load i32, i32* %edx.global-to-local, align 4
  %v4_1000334a = add i32 %v3_10003347, 8
  %v5_1000334a = add i32 %v4_1000334a, %v1_1000334a
  %v6_1000334a = inttoptr i32 %v5_1000334a to i32*
  store i32 %v0_1000334a, i32* %v6_1000334a, align 4
  %v0_1000334e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000334e

dec_label_pc_1000334e:                            ; preds = %dec_label_pc_10003347, %dec_label_pc_10003336
  %v0_1000334e = phi i32 [ %v0_1000334e.pre, %dec_label_pc_10003347 ], [ %v3_10003344, %dec_label_pc_10003336 ]
  %v1_1000334e = inttoptr i32 %v0_1000334e to i32*
  %v2_1000334e = load i32, i32* %v1_1000334e, align 4
  store i32 %v2_1000334e, i32* @edi, align 4
  %v3_1000334e = add i32 %v0_1000334e, 4
  %v1_1000334f = inttoptr i32 %v3_1000334e to i32*
  %v2_1000334f = load i32, i32* %v1_1000334f, align 4
  store i32 %v2_1000334f, i32* @esi, align 4
  %v3_1000334f = add i32 %v0_1000334e, 8
  %v1_10003350 = inttoptr i32 %v3_1000334f to i32*
  %v2_10003350 = load i32, i32* %v1_10003350, align 4
  store i32 %v2_10003350, i32* @ebp, align 4
  %v0_10003351 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10003351
}

define i32 @function_10003360(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003360:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10003364 = load i32, i32* @ecx, align 4
  store i32 %v0_10003364, i32* @esi, align 4
  %v0_10003366 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10003366 = sext i8 %v0_10003366 to i32
  store i32 %v1_10003366, i32* @ecx, align 4
  %v2_1000336d = and i8 %v0_10003366, 1
  %v3_1000336d = icmp eq i8 %v2_1000336d, 0
  %v1_10003370 = icmp eq i1 %v3_1000336d, false
  br i1 %v1_10003370, label %dec_label_pc_1000339c, label %dec_label_pc_10003372

dec_label_pc_10003372:                            ; preds = %dec_label_pc_10003360
  %v1_10003372 = or i32 %v1_10003366, 1
  %v4_10003372 = trunc i32 %v1_10003372 to i8
  store i32 %v1_10003372, i32* @ecx, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  store i8 %v4_10003372, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000339f

dec_label_pc_1000339c:                            ; preds = %dec_label_pc_10003360
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000339f

dec_label_pc_1000339f:                            ; preds = %dec_label_pc_1000339c, %dec_label_pc_10003372
  %v0_1000340310 = phi i8 [ %v0_10003366, %dec_label_pc_1000339c ], [ %v4_10003372, %dec_label_pc_10003372 ]
  %v0_100033bd = phi i32 [ %v1_10003366, %dec_label_pc_1000339c ], [ %v1_10003372, %dec_label_pc_10003372 ]
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v12_100033a3 = icmp eq i32 %arg1, -1
  br i1 %v12_100033a3, label %dec_label_pc_100033b6, label %dec_label_pc_100033a7

dec_label_pc_100033a7:                            ; preds = %dec_label_pc_1000339f
  %v2_100033a9 = mul i32 %arg1, 32
  store i32 %v2_100033a9, i32* %eax.global-to-local, align 4
  %v2_100033ac = add i32 %v0_10003364, 4
  %v3_100033ac = inttoptr i32 %v2_100033ac to i32*
  %v4_100033ac = load i32, i32* %v3_100033ac, align 4
  %v5_100033ac = add i32 %v4_100033ac, %v2_100033a9
  br label %dec_label_pc_100033b6

dec_label_pc_100033b6:                            ; preds = %dec_label_pc_1000339f, %dec_label_pc_100033a7
  %storemerge5 = phi i32 [ %v5_100033ac, %dec_label_pc_100033a7 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000339f ]
  store i32 %storemerge5, i32* %eax.global-to-local, align 4
  %v1_100033b6 = inttoptr i32 %storemerge5 to i32*
  %v2_100033b6 = load i32, i32* %v1_100033b6, align 4
  store i32 %v2_100033b6, i32* @edi, align 4
  %v2_100033b8 = and i32 %v0_100033bd, 1
  %v3_100033b8 = icmp eq i32 %v2_100033b8, 0
  %v1_100033bb = icmp eq i1 %v3_100033b8, false
  br i1 %v1_100033bb, label %dec_label_pc_100033e2, label %dec_label_pc_100033bd

dec_label_pc_100033bd:                            ; preds = %dec_label_pc_100033b6
  %v1_100033bd = or i32 %v0_100033bd, 1
  %v4_100033bd = trunc i32 %v1_100033bd to i8
  store i32 %v1_100033bd, i32* @ecx, align 4
  store i8 %v4_100033bd, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100033e2

dec_label_pc_100033e2:                            ; preds = %dec_label_pc_100033bd, %dec_label_pc_100033b6
  %v0_10003403 = phi i8 [ %v4_100033bd, %dec_label_pc_100033bd ], [ %v0_1000340310, %dec_label_pc_100033b6 ]
  %v12_100033e2 = icmp eq i32 %v2_100033b6, -1
  br i1 %v12_100033e2, label %dec_label_pc_100033e2.dec_label_pc_100033f5_crit_edge, label %dec_label_pc_100033e6

dec_label_pc_100033e2.dec_label_pc_100033f5_crit_edge: ; preds = %dec_label_pc_100033e2
  %.pre = add i32 %v0_10003364, 4
  %.pre24 = inttoptr i32 %.pre to i32*
  br label %dec_label_pc_100033f5

dec_label_pc_100033e6:                            ; preds = %dec_label_pc_100033e2
  %v2_100033e8 = mul i32 %v2_100033b6, 32
  store i32 %v2_100033e8, i32* %eax.global-to-local, align 4
  %v2_100033eb = add i32 %v0_10003364, 4
  %v3_100033eb = inttoptr i32 %v2_100033eb to i32*
  %v4_100033eb = load i32, i32* %v3_100033eb, align 4
  %v5_100033eb = add i32 %v4_100033eb, %v2_100033e8
  br label %dec_label_pc_100033f5

dec_label_pc_100033f5:                            ; preds = %dec_label_pc_100033e2.dec_label_pc_100033f5_crit_edge, %dec_label_pc_100033e6
  %v2_100033f5.pre-phi = phi i32* [ %.pre24, %dec_label_pc_100033e2.dec_label_pc_100033f5_crit_edge ], [ %v3_100033eb, %dec_label_pc_100033e6 ]
  %storemerge4 = phi i32 [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100033e2.dec_label_pc_100033f5_crit_edge ], [ %v5_100033eb, %dec_label_pc_100033e6 ]
  store i32 %storemerge4, i32* %eax.global-to-local, align 4
  %v3_100033f5 = load i32, i32* %v2_100033f5.pre-phi, align 4
  store i32 %v3_100033f5, i32* @ecx, align 4
  %v1_100033f8 = add i32 %storemerge4, 4
  %v2_100033f8 = inttoptr i32 %v1_100033f8 to i32*
  %v3_100033f8 = load i32, i32* %v2_100033f8, align 4
  store i32 %v3_100033f8, i32* %eax.global-to-local, align 4
  %v2_100033fd = mul i32 %arg1, 32
  store i32 %v2_100033fd, i32* %edx.global-to-local, align 4
  %v4_10003400 = add i32 %v3_100033f5, %v2_100033fd
  %v5_10003400 = inttoptr i32 %v4_10003400 to i32*
  store i32 %v3_100033f8, i32* %v5_10003400, align 4
  %v1_10003403 = sext i8 %v0_10003403 to i32
  store i32 %v1_10003403, i32* @ecx, align 4
  %v0_10003409 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000340c = and i8 %v0_10003403, 1
  %v3_1000340c = icmp eq i8 %v2_1000340c, 0
  %v1_1000340f = icmp eq i1 %v3_1000340c, false
  br i1 %v1_1000340f, label %dec_label_pc_10003438, label %dec_label_pc_10003411

dec_label_pc_10003411:                            ; preds = %dec_label_pc_100033f5
  %v1_10003411 = or i32 %v1_10003403, 1
  %v4_10003411 = trunc i32 %v1_10003411 to i8
  store i32 %v1_10003411, i32* @ecx, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i8 %v4_10003411, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000343b

dec_label_pc_10003438:                            ; preds = %dec_label_pc_100033f5
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000343b

dec_label_pc_1000343b:                            ; preds = %dec_label_pc_10003438, %dec_label_pc_10003411
  %v0_100034a317 = phi i8 [ %v0_10003403, %dec_label_pc_10003438 ], [ %v4_10003411, %dec_label_pc_10003411 ]
  %v0_10003459 = phi i32 [ %v1_10003403, %dec_label_pc_10003438 ], [ %v1_10003411, %dec_label_pc_10003411 ]
  %v0_1000343b = load i32, i32* @edi, align 4
  %v12_1000343b = icmp eq i32 %v0_1000343b, -1
  br i1 %v12_1000343b, label %dec_label_pc_1000344e, label %dec_label_pc_1000343f

dec_label_pc_1000343f:                            ; preds = %dec_label_pc_1000343b
  %v2_10003441 = mul i32 %v0_1000343b, 32
  store i32 %v2_10003441, i32* %eax.global-to-local, align 4
  %v1_10003444 = load i32, i32* @esi, align 4
  %v2_10003444 = add i32 %v1_10003444, 4
  %v3_10003444 = inttoptr i32 %v2_10003444 to i32*
  %v4_10003444 = load i32, i32* %v3_10003444, align 4
  %v5_10003444 = add i32 %v4_10003444, %v2_10003441
  br label %dec_label_pc_1000344e

dec_label_pc_1000344e:                            ; preds = %dec_label_pc_1000343b, %dec_label_pc_1000343f
  %storemerge3 = phi i32 [ %v5_10003444, %dec_label_pc_1000343f ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000343b ]
  store i32 %storemerge3, i32* %eax.global-to-local, align 4
  %v1_1000344e = add i32 %storemerge3, 4
  %v2_1000344e = inttoptr i32 %v1_1000344e to i32*
  %v3_1000344e = load i32, i32* %v2_1000344e, align 4
  %v13_1000344e = icmp eq i32 %v3_1000344e, -1
  br i1 %v13_1000344e, label %dec_label_pc_100034a9, label %dec_label_pc_10003454

dec_label_pc_10003454:                            ; preds = %dec_label_pc_1000344e
  %v2_10003454 = and i32 %v0_10003459, 1
  %v3_10003454 = icmp eq i32 %v2_10003454, 0
  %v1_10003457 = icmp eq i1 %v3_10003454, false
  br i1 %v1_10003457, label %dec_label_pc_10003480, label %dec_label_pc_10003459

dec_label_pc_10003459:                            ; preds = %dec_label_pc_10003454
  %v1_10003459 = or i32 %v0_10003459, 1
  %v4_10003459 = trunc i32 %v1_10003459 to i8
  store i32 %v1_10003459, i32* @ecx, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i8 %v4_10003459, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003483

dec_label_pc_10003480:                            ; preds = %dec_label_pc_10003454
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003483

dec_label_pc_10003483:                            ; preds = %dec_label_pc_10003480, %dec_label_pc_10003459
  %v0_100034a3 = phi i8 [ %v0_100034a317, %dec_label_pc_10003480 ], [ %v4_10003459, %dec_label_pc_10003459 ]
  br i1 %v12_1000343b, label %dec_label_pc_10003483.dec_label_pc_10003496_crit_edge, label %dec_label_pc_10003487

dec_label_pc_10003483.dec_label_pc_10003496_crit_edge: ; preds = %dec_label_pc_10003483
  %v0_10003499.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10003496

dec_label_pc_10003487:                            ; preds = %dec_label_pc_10003483
  %v2_10003489 = mul i32 %v0_1000343b, 32
  store i32 %v2_10003489, i32* %eax.global-to-local, align 4
  %v1_1000348c = load i32, i32* @esi, align 4
  %v2_1000348c = add i32 %v1_1000348c, 4
  %v3_1000348c = inttoptr i32 %v2_1000348c to i32*
  %v4_1000348c = load i32, i32* %v3_1000348c, align 4
  %v5_1000348c = add i32 %v4_1000348c, %v2_10003489
  br label %dec_label_pc_10003496

dec_label_pc_10003496:                            ; preds = %dec_label_pc_10003483.dec_label_pc_10003496_crit_edge, %dec_label_pc_10003487
  %v0_10003499 = phi i32 [ %v1_1000348c, %dec_label_pc_10003487 ], [ %v0_10003499.pre, %dec_label_pc_10003483.dec_label_pc_10003496_crit_edge ]
  %storemerge2 = phi i32 [ %v5_1000348c, %dec_label_pc_10003487 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003483.dec_label_pc_10003496_crit_edge ]
  store i32 %storemerge2, i32* %eax.global-to-local, align 4
  %v1_10003496 = add i32 %storemerge2, 4
  %v2_10003496 = inttoptr i32 %v1_10003496 to i32*
  %v3_10003496 = load i32, i32* %v2_10003496, align 4
  store i32 %v3_10003496, i32* @ecx, align 4
  %v1_10003499 = add i32 %v0_10003499, 4
  %v2_10003499 = inttoptr i32 %v1_10003499 to i32*
  %v3_10003499 = load i32, i32* %v2_10003499, align 4
  store i32 %v3_10003499, i32* %eax.global-to-local, align 4
  %v2_1000349c = mul i32 %v3_10003496, 32
  %v0_1000349f = load i32, i32* %ebx.global-to-local, align 4
  %v4_1000349f = or i32 %v2_1000349c, 8
  %v5_1000349f = add i32 %v3_10003499, %v4_1000349f
  %v6_1000349f = inttoptr i32 %v5_1000349f to i32*
  store i32 %v0_1000349f, i32* %v6_1000349f, align 4
  %v1_100034a3 = sext i8 %v0_100034a3 to i32
  store i32 %v1_100034a3, i32* @ecx, align 4
  %v0_100034ac.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_100034a9

dec_label_pc_100034a9:                            ; preds = %dec_label_pc_10003496, %dec_label_pc_1000344e
  %v0_100034b5 = phi i32 [ %v1_100034a3, %dec_label_pc_10003496 ], [ %v0_10003459, %dec_label_pc_1000344e ]
  %v0_100034ed = phi i32 [ %v0_100034ac.pre, %dec_label_pc_10003496 ], [ %v0_1000343b, %dec_label_pc_1000344e ]
  store i32 -1, i32* %eax.global-to-local, align 4
  %v12_100034ac = icmp eq i32 %v0_100034ed, -1
  br i1 %v12_100034ac, label %dec_label_pc_100034f9, label %dec_label_pc_100034b0

dec_label_pc_100034b0:                            ; preds = %dec_label_pc_100034a9
  %v2_100034b0 = and i32 %v0_100034b5, 1
  %v3_100034b0 = icmp eq i32 %v2_100034b0, 0
  %v1_100034b3 = icmp eq i1 %v3_100034b0, false
  br i1 %v1_100034b3, label %dec_label_pc_100034d7, label %dec_label_pc_100034b5

dec_label_pc_100034b5:                            ; preds = %dec_label_pc_100034b0
  %v1_100034b5 = or i32 %v0_100034b5, 1
  %v4_100034b5 = trunc i32 %v1_100034b5 to i8
  store i32 %v1_100034b5, i32* @ecx, align 4
  store i8 %v4_100034b5, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100034d7

dec_label_pc_100034d7:                            ; preds = %dec_label_pc_100034b5, %dec_label_pc_100034b0
  %v0_100034d7 = load i32, i32* %ebx.global-to-local, align 4
  %v12_100034d7 = icmp eq i32 %v0_100034d7, -1
  %v0_100034e7.pre = load i32, i32* @esi, align 4
  %.pre35 = add i32 %v0_100034e7.pre, 4
  %.pre36 = inttoptr i32 %.pre35 to i32*
  br i1 %v12_100034d7, label %dec_label_pc_100034e7, label %dec_label_pc_100034db

dec_label_pc_100034db:                            ; preds = %dec_label_pc_100034d7
  %v3_100034db = load i32, i32* %.pre36, align 4
  store i32 %v3_100034db, i32* %eax.global-to-local, align 4
  %v1_100034de = load i32, i32* %edx.global-to-local, align 4
  %v2_100034de = add i32 %v1_100034de, %v3_100034db
  br label %dec_label_pc_100034e7

dec_label_pc_100034e7:                            ; preds = %dec_label_pc_100034d7, %dec_label_pc_100034db
  %storemerge = phi i32 [ %v2_100034de, %dec_label_pc_100034db ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100034d7 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v3_100034e7 = load i32, i32* %.pre36, align 4
  store i32 %v3_100034e7, i32* %edx.global-to-local, align 4
  %v1_100034ea = add i32 %storemerge, 8
  %v2_100034ea = inttoptr i32 %v1_100034ea to i32*
  %v3_100034ea = load i32, i32* %v2_100034ea, align 4
  store i32 %v3_100034ea, i32* %eax.global-to-local, align 4
  %v2_100034ef = mul i32 %v0_100034ed, 32
  store i32 %v2_100034ef, i32* @ecx, align 4
  %v4_100034f2 = or i32 %v2_100034ef, 8
  %v5_100034f2 = add i32 %v3_100034e7, %v4_100034f2
  %v6_100034f2 = inttoptr i32 %v5_100034f2 to i32*
  store i32 %v3_100034ea, i32* %v6_100034f2, align 4
  store i32 %v0_10003409, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_100034f9

dec_label_pc_100034f9:                            ; preds = %dec_label_pc_100034e7, %dec_label_pc_100034a9
  %v0_100034f9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100034f9 = load i32, i32* @esi, align 4
  %v2_100034f9 = add i32 %v1_100034f9, 16
  %v3_100034f9 = inttoptr i32 %v2_100034f9 to i32*
  %v4_100034f9 = load i32, i32* %v3_100034f9, align 4
  %v15_100034f9 = icmp eq i32 %v0_100034f9, %v4_100034f9
  br i1 %v15_100034f9, label %dec_label_pc_10003534, label %dec_label_pc_100034fe

dec_label_pc_100034fe:                            ; preds = %dec_label_pc_100034f9
  store i32 %v1_100034f9, i32* @ecx, align 4
  %v1_10003501 = call i32 @function_100030b0(i32 %v0_100034f9)
  store i32 %v1_10003501, i32* %eax.global-to-local, align 4
  %v0_10003506 = load i32, i32* %ebx.global-to-local, align 4
  %v0_10003507 = load i32, i32* @esi, align 4
  store i32 %v0_10003507, i32* @ecx, align 4
  %v4_10003509 = trunc i32 %v1_10003501 to i8
  %v5_10003509 = icmp eq i8 %v4_10003509, 0
  %v1_10003521 = call i32 @function_10002cd0(i32 %v0_10003506)
  store i32 %v1_10003521, i32* %eax.global-to-local, align 4
  %v0_10003526 = load i32, i32* @esi, align 4
  %v1_10003526 = add i32 %v0_10003526, 4
  %v2_10003526 = inttoptr i32 %v1_10003526 to i32*
  %v3_10003526 = load i32, i32* %v2_10003526, align 4
  br i1 %v5_10003509, label %dec_label_pc_10003521, label %dec_label_pc_1000350d

dec_label_pc_1000350d:                            ; preds = %dec_label_pc_100034fe
  store i32 %v3_10003526, i32* @ecx, align 4
  store i32 %v0_10003409, i32* %edx.global-to-local, align 4
  %v2_10003518 = mul i32 %v1_10003521, 32
  store i32 %v2_10003518, i32* %eax.global-to-local, align 4
  %v0_1000351b = load i32, i32* @edi, align 4
  %v4_1000351b = or i32 %v2_10003518, 4
  %v5_1000351b = add i32 %v3_10003526, %v4_1000351b
  %v6_1000351b = inttoptr i32 %v5_1000351b to i32*
  store i32 %v0_1000351b, i32* %v6_1000351b, align 4
  br label %dec_label_pc_10003537

dec_label_pc_10003521:                            ; preds = %dec_label_pc_100034fe
  %v2_10003529 = mul i32 %v1_10003521, 32
  store i32 %v2_10003529, i32* %eax.global-to-local, align 4
  %v0_1000352c = load i32, i32* @edi, align 4
  %v4_1000352c = add i32 %v3_10003526, %v2_10003529
  %v5_1000352c = inttoptr i32 %v4_1000352c to i32*
  store i32 %v0_1000352c, i32* %v5_1000352c, align 4
  store i32 %v0_10003409, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10003537

dec_label_pc_10003534:                            ; preds = %dec_label_pc_100034f9
  %v0_10003534 = load i32, i32* @edi, align 4
  store i32 %v0_10003534, i32* %v3_100034f9, align 4
  br label %dec_label_pc_10003537

dec_label_pc_10003537:                            ; preds = %dec_label_pc_10003534, %dec_label_pc_10003521, %dec_label_pc_1000350d
  %v0_10003537 = load i32, i32* @esi, align 4
  %v1_10003537 = add i32 %v0_10003537, 4
  %v2_10003537 = inttoptr i32 %v1_10003537 to i32*
  %v3_10003537 = load i32, i32* %v2_10003537, align 4
  store i32 %v3_10003537, i32* @ecx, align 4
  %v0_1000353a = load i32, i32* @edi, align 4
  %v2_1000353c = mul i32 %v0_1000353a, 32
  store i32 %v2_1000353c, i32* %eax.global-to-local, align 4
  %v0_1000353f = load i32, i32* %ebx.global-to-local, align 4
  %v4_1000353f = or i32 %v2_1000353c, 4
  %v5_1000353f = add i32 %v4_1000353f, %v3_10003537
  %v6_1000353f = inttoptr i32 %v5_1000353f to i32*
  store i32 %v0_1000353f, i32* %v6_1000353f, align 4
  %v0_10003543 = load i32, i32* %ebx.global-to-local, align 4
  %v10_10003543 = icmp eq i32 %v0_10003543, -1
  %v0_10003546 = load i32, i32* @esp, align 4
  %v1_10003546 = inttoptr i32 %v0_10003546 to i32*
  %v2_10003546 = load i32, i32* %v1_10003546, align 4
  store i32 %v2_10003546, i32* %ebx.global-to-local, align 4
  %v3_10003546 = add i32 %v0_10003546, 4
  br i1 %v10_10003543, label %dec_label_pc_10003550, label %dec_label_pc_10003549

dec_label_pc_10003549:                            ; preds = %dec_label_pc_10003537
  %v0_10003549 = load i32, i32* @esi, align 4
  %v1_10003549 = add i32 %v0_10003549, 4
  %v2_10003549 = inttoptr i32 %v1_10003549 to i32*
  %v3_10003549 = load i32, i32* %v2_10003549, align 4
  store i32 %v3_10003549, i32* %eax.global-to-local, align 4
  %v0_1000354c = load i32, i32* @edi, align 4
  %v1_1000354c = load i32, i32* %edx.global-to-local, align 4
  %v4_1000354c = add i32 %v3_10003549, 8
  %v5_1000354c = add i32 %v4_1000354c, %v1_1000354c
  %v6_1000354c = inttoptr i32 %v5_1000354c to i32*
  store i32 %v0_1000354c, i32* %v6_1000354c, align 4
  %v0_10003550.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10003550

dec_label_pc_10003550:                            ; preds = %dec_label_pc_10003549, %dec_label_pc_10003537
  %v0_10003550 = phi i32 [ %v0_10003550.pre, %dec_label_pc_10003549 ], [ %v3_10003546, %dec_label_pc_10003537 ]
  %v1_10003550 = inttoptr i32 %v0_10003550 to i32*
  %v2_10003550 = load i32, i32* %v1_10003550, align 4
  store i32 %v2_10003550, i32* @edi, align 4
  %v3_10003550 = add i32 %v0_10003550, 4
  %v1_10003551 = inttoptr i32 %v3_10003550 to i32*
  %v2_10003551 = load i32, i32* %v1_10003551, align 4
  store i32 %v2_10003551, i32* @esi, align 4
  %v3_10003551 = add i32 %v0_10003550, 8
  %v1_10003552 = inttoptr i32 %v3_10003551 to i32*
  %v2_10003552 = load i32, i32* %v1_10003552, align 4
  store i32 %v2_10003552, i32* @ebp, align 4
  %v0_10003553 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10003553
}

define i32 @function_10003560(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003560:
  %v0_10003568 = load i8, i8* @global_var_1002b638.171, align 1
  %v3_10003568 = and i8 %v0_10003568, 1
  %v4_10003568 = icmp eq i8 %v3_10003568, 0
  %v1_1000356e = icmp eq i1 %v4_10003568, false
  br i1 %v1_1000356e, label %dec_label_pc_10003593, label %dec_label_pc_10003570

dec_label_pc_10003570:                            ; preds = %dec_label_pc_10003560
  %v3_10003570 = or i8 %v0_10003568, 1
  store i8 %v3_10003570, i8* @global_var_1002b638.171, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10003593

dec_label_pc_10003593:                            ; preds = %dec_label_pc_10003570, %dec_label_pc_10003560
  %v1_1000359c = trunc i32 %arg1 to i16
  %v14_1000359c = icmp eq i16 %v1_1000359c, -1
  br i1 %v14_1000359c, label %dec_label_pc_100035b2, label %dec_label_pc_100035a1

dec_label_pc_100035a1:                            ; preds = %dec_label_pc_10003593
  %v5_10003593 = and i32 %arg1, 65535
  %v2_100035a4 = mul nuw nsw i32 %v5_10003593, 16
  %v1_100035a7 = load i32, i32* @ecx, align 4
  %v2_100035a7 = add i32 %v1_100035a7, 4
  %v3_100035a7 = inttoptr i32 %v2_100035a7 to i32*
  %v4_100035a7 = load i32, i32* %v3_100035a7, align 4
  %v5_100035a7 = add i32 %v4_100035a7, %v2_100035a4
  %v1_100035aa = add i32 %v5_100035a7, 4
  %v2_100035aa = inttoptr i32 %v1_100035aa to i16*
  %v3_100035aa = load i16, i16* %v2_100035aa, align 2
  %v4_100035aa = zext i16 %v3_100035aa to i32
  %v6_100035aa = and i32 %v5_100035a7, -65536
  %v7_100035aa = or i32 %v4_100035aa, %v6_100035aa
  ret i32 %v7_100035aa

dec_label_pc_100035b2:                            ; preds = %dec_label_pc_10003593
  %v3_100035b7 = load i16, i16* @global_var_1002b634.174, align 2
  %v4_100035b7 = zext i16 %v3_100035b7 to i32
  %v7_100035b7 = or i32 %v4_100035b7, and (i32 ptrtoint (i16** @global_var_1002b630.172 to i32), i32 -65536)
  ret i32 %v7_100035b7
}

define i32 @function_100035c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100035c0:
  %v0_100035c8 = load i8, i8* @global_var_1002b638.171, align 1
  %v3_100035c8 = and i8 %v0_100035c8, 1
  %v4_100035c8 = icmp eq i8 %v3_100035c8, 0
  %v1_100035ce = icmp eq i1 %v4_100035c8, false
  br i1 %v1_100035ce, label %dec_label_pc_100035f3, label %dec_label_pc_100035d0

dec_label_pc_100035d0:                            ; preds = %dec_label_pc_100035c0
  %v3_100035d0 = or i8 %v0_100035c8, 1
  store i8 %v3_100035d0, i8* @global_var_1002b638.171, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_100035f3

dec_label_pc_100035f3:                            ; preds = %dec_label_pc_100035d0, %dec_label_pc_100035c0
  %v1_100035fc = trunc i32 %arg1 to i16
  %v14_100035fc = icmp eq i16 %v1_100035fc, -1
  br i1 %v14_100035fc, label %dec_label_pc_10003611, label %dec_label_pc_10003601

dec_label_pc_10003601:                            ; preds = %dec_label_pc_100035f3
  %v5_100035f3 = and i32 %arg1, 65535
  %v2_10003604 = mul nuw nsw i32 %v5_100035f3, 16
  %v1_10003607 = load i32, i32* @ecx, align 4
  %v2_10003607 = add i32 %v1_10003607, 4
  %v3_10003607 = inttoptr i32 %v2_10003607 to i32*
  %v4_10003607 = load i32, i32* %v3_10003607, align 4
  %v5_10003607 = add i32 %v4_10003607, %v2_10003604
  %v1_1000360a = inttoptr i32 %v5_10003607 to i16*
  %v2_1000360a = load i16, i16* %v1_1000360a, align 2
  %v3_1000360a = zext i16 %v2_1000360a to i32
  %v5_1000360a = and i32 %v5_10003607, -65536
  %v6_1000360a = or i32 %v3_1000360a, %v5_1000360a
  ret i32 %v6_1000360a

dec_label_pc_10003611:                            ; preds = %dec_label_pc_100035f3
  %v2_10003616 = load i16, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  %v3_10003616 = zext i16 %v2_10003616 to i32
  %v6_10003616 = or i32 %v3_10003616, and (i32 ptrtoint (i16** @global_var_1002b630.172 to i32), i32 -65536)
  ret i32 %v6_10003616
}

define i32 @function_10003620(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003620:
  %v0_10003628 = load i8, i8* @global_var_1002b638.171, align 1
  %v3_10003628 = and i8 %v0_10003628, 1
  %v4_10003628 = icmp eq i8 %v3_10003628, 0
  %v1_1000362e = icmp eq i1 %v4_10003628, false
  br i1 %v1_1000362e, label %dec_label_pc_10003653, label %dec_label_pc_10003630

dec_label_pc_10003630:                            ; preds = %dec_label_pc_10003620
  %v3_10003630 = or i8 %v0_10003628, 1
  store i8 %v3_10003630, i8* @global_var_1002b638.171, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10003653

dec_label_pc_10003653:                            ; preds = %dec_label_pc_10003630, %dec_label_pc_10003620
  %v1_1000365c = trunc i32 %arg1 to i16
  %v14_1000365c = icmp eq i16 %v1_1000365c, -1
  br i1 %v14_1000365c, label %dec_label_pc_10003672, label %dec_label_pc_10003661

dec_label_pc_10003661:                            ; preds = %dec_label_pc_10003653
  %v5_10003653 = and i32 %arg1, 65535
  %v2_10003664 = mul nuw nsw i32 %v5_10003653, 16
  %v1_10003667 = load i32, i32* @ecx, align 4
  %v2_10003667 = add i32 %v1_10003667, 4
  %v3_10003667 = inttoptr i32 %v2_10003667 to i32*
  %v4_10003667 = load i32, i32* %v3_10003667, align 4
  %v5_10003667 = add i32 %v4_10003667, %v2_10003664
  %v1_1000366a = add i32 %v5_10003667, 2
  %v2_1000366a = inttoptr i32 %v1_1000366a to i16*
  %v3_1000366a = load i16, i16* %v2_1000366a, align 2
  %v4_1000366a = zext i16 %v3_1000366a to i32
  %v6_1000366a = and i32 %v5_10003667, -65536
  %v7_1000366a = or i32 %v4_1000366a, %v6_1000366a
  ret i32 %v7_1000366a

dec_label_pc_10003672:                            ; preds = %dec_label_pc_10003653
  %v3_10003677 = load i16, i16* @global_var_1002b632.173, align 2
  %v4_10003677 = zext i16 %v3_10003677 to i32
  %v7_10003677 = or i32 %v4_10003677, and (i32 ptrtoint (i16** @global_var_1002b630.172 to i32), i32 -65536)
  ret i32 %v7_10003677
}

define i32 @function_10003680() local_unnamed_addr {
dec_label_pc_10003680:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10003681 = load i32, i32* @esi, align 4
  store i32 %v0_10003681, i32* %stack_var_-8, align 4
  %v4_10003681 = ptrtoint i32* %stack_var_-8 to i32
  %v0_10003682 = load i32, i32* @ecx, align 4
  store i32 %v0_10003682, i32* @esi, align 4
  %v1_10003684 = add i32 %v0_10003682, 21
  %v2_10003684 = inttoptr i32 %v1_10003684 to i8*
  %v3_10003684 = load i8, i8* %v2_10003684, align 1
  %v4_10003684 = and i8 %v3_10003684, 16
  %v5_10003684 = icmp eq i8 %v4_10003684, 0
  br i1 %v5_10003684, label %dec_label_pc_1000368e, label %dec_label_pc_1000368a

dec_label_pc_1000368a:                            ; preds = %dec_label_pc_10003680
  br label %dec_label_pc_10003691

dec_label_pc_1000368e:                            ; preds = %dec_label_pc_10003680
  %v1_1000368e = add i32 %v0_10003682, 24
  %v2_1000368e = inttoptr i32 %v1_1000368e to i32*
  %v3_1000368e = load i32, i32* %v2_1000368e, align 4
  br label %dec_label_pc_10003691

dec_label_pc_10003691:                            ; preds = %dec_label_pc_1000368e, %dec_label_pc_1000368a
  %storemerge = phi i32 [ %v3_1000368e, %dec_label_pc_1000368e ], [ 0, %dec_label_pc_1000368a ]
  store i32 %storemerge, i32* @eax, align 4
  %v1_10003691 = add i32 %storemerge, -1
  store i32 %v1_10003691, i32* %ebx.global-to-local, align 4
  %v2_10003694 = icmp slt i32 %v1_10003691, 0
  br i1 %v2_10003694, label %dec_label_pc_100036ca, label %dec_label_pc_100036a0

dec_label_pc_100036a0:                            ; preds = %dec_label_pc_10003691, %dec_label_pc_100036c7
  %v0_100036a0 = phi i32 [ %v0_100036a0.pre, %dec_label_pc_100036c7 ], [ %v4_10003681, %dec_label_pc_10003691 ]
  %v1_100036a0 = add i32 %v0_100036a0, -4
  %v2_100036a0 = inttoptr i32 %v1_100036a0 to i32*
  store i32 1, i32* %v2_100036a0, align 4
  %v0_100036a2 = load i32, i32* @esi, align 4
  store i32 %v0_100036a2, i32* @ecx, align 4
  %v1_100036a4 = call i32 @function_1000c090(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100036a4, i32* @eax, align 4
  %v4_100036a9 = trunc i32 %v1_100036a4 to i8
  %v5_100036a9 = icmp eq i8 %v4_100036a9, 0
  br i1 %v5_100036a9, label %dec_label_pc_100036c7, label %dec_label_pc_100036ad

dec_label_pc_100036ad:                            ; preds = %dec_label_pc_100036a0
  %v2_100036ad = load i32, i32* @ecx, align 4
  %v1_100036af = load i32, i32* @esi, align 4
  %v2_100036af = add i32 %v1_100036af, 32
  %v3_100036af = inttoptr i32 %v2_100036af to i32*
  %v4_100036af = load i32, i32* %v3_100036af, align 4
  %v5_100036af = sub i32 %v2_100036ad, %v4_100036af
  %v1_100036b2 = add i32 %v1_100036af, 16
  %v2_100036b2 = inttoptr i32 %v1_100036b2 to i32*
  %v3_100036b2 = load i32, i32* %v2_100036b2, align 4
  store i32 %v3_100036b2, i32* @ecx, align 4
  %v3_100036b5 = add i32 %v3_100036b2, %v5_100036af
  %v4_100036b5 = inttoptr i32 %v3_100036b5 to i8*
  store i8 9, i8* %v4_100036b5, align 1
  %v0_100036b9 = load i32, i32* @esi, align 4
  %v1_100036b9 = add i32 %v0_100036b9, 16
  %v2_100036b9 = inttoptr i32 %v1_100036b9 to i32*
  %v3_100036b9 = load i32, i32* %v2_100036b9, align 4
  %v4_100036b9 = add i32 %v3_100036b9, 1
  store i32 %v4_100036b9, i32* %v2_100036b9, align 4
  %v0_100036bc = load i32, i32* @esi, align 4
  %v1_100036bc = add i32 %v0_100036bc, 16
  %v2_100036bc = inttoptr i32 %v1_100036bc to i32*
  %v3_100036bc = load i32, i32* %v2_100036bc, align 4
  store i32 %v3_100036bc, i32* @eax, align 4
  %v1_100036bf = load i32, i32* @esp, align 4
  %v2_100036bf = add i32 %v1_100036bf, -4
  %v3_100036bf = inttoptr i32 %v2_100036bf to i32*
  store i32 %v3_100036bc, i32* %v3_100036bf, align 4
  %v0_100036c0 = load i32, i32* @esi, align 4
  store i32 %v0_100036c0, i32* @ecx, align 4
  %v1_100036c2 = call i32 @function_1000c0e0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100036c2, i32* @eax, align 4
  br label %dec_label_pc_100036c7

dec_label_pc_100036c7:                            ; preds = %dec_label_pc_100036ad, %dec_label_pc_100036a0
  %v0_100036cc5 = phi i32 [ %v1_100036c2, %dec_label_pc_100036ad ], [ %v1_100036a4, %dec_label_pc_100036a0 ]
  %v0_100036c7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100036c7 = add i32 %v0_100036c7, -1
  %v10_100036c7 = icmp slt i32 %v1_100036c7, 0
  store i32 %v1_100036c7, i32* %ebx.global-to-local, align 4
  %v1_100036c8 = icmp eq i1 %v10_100036c7, false
  %v0_100036a0.pre = load i32, i32* @esp, align 4
  br i1 %v1_100036c8, label %dec_label_pc_100036a0, label %dec_label_pc_100036ca

dec_label_pc_100036ca:                            ; preds = %dec_label_pc_100036c7, %dec_label_pc_10003691
  %v0_100036cc = phi i32 [ %storemerge, %dec_label_pc_10003691 ], [ %v0_100036cc5, %dec_label_pc_100036c7 ]
  %v0_100036ca = phi i32 [ %v4_10003681, %dec_label_pc_10003691 ], [ %v0_100036a0.pre, %dec_label_pc_100036c7 ]
  %v1_100036ca = inttoptr i32 %v0_100036ca to i32*
  %v2_100036ca = load i32, i32* %v1_100036ca, align 4
  store i32 %v2_100036ca, i32* @esi, align 4
  %v3_100036ca = add i32 %v0_100036ca, 4
  %v1_100036cb = inttoptr i32 %v3_100036ca to i32*
  %v2_100036cb = load i32, i32* %v1_100036cb, align 4
  store i32 %v2_100036cb, i32* @ebx, align 4
  ret i32 %v0_100036cc
}

define i32 @function_100036d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100036d0:
  %v0_100036d4 = load i32, i32* @ecx, align 4
  store i32 %v0_100036d4, i32* @esi, align 4
  %v1_100036d6 = add i32 %v0_100036d4, 21
  %v2_100036d6 = inttoptr i32 %v1_100036d6 to i8*
  %v3_100036d6 = load i8, i8* %v2_100036d6, align 1
  %v4_100036d6 = and i8 %v3_100036d6, 1
  %v5_100036d6 = icmp eq i8 %v4_100036d6, 0
  br i1 %v5_100036d6, label %dec_label_pc_100036fb, label %dec_label_pc_100036dc

dec_label_pc_100036dc:                            ; preds = %dec_label_pc_100036d0
  %v1_100036dc = add i32 %v0_100036d4, 16
  %v2_100036dc = inttoptr i32 %v1_100036dc to i32*
  %v3_100036dc = load i32, i32* %v2_100036dc, align 4
  store i32 %v3_100036dc, i32* @eax, align 4
  %v1_100036df = icmp eq i32 %v3_100036dc, 0
  br i1 %v1_100036df, label %dec_label_pc_100036fb, label %dec_label_pc_100036e3

dec_label_pc_100036e3:                            ; preds = %dec_label_pc_100036dc
  %v2_100036e3 = add i32 %v0_100036d4, 32
  %v3_100036e3 = inttoptr i32 %v2_100036e3 to i32*
  %v4_100036e3 = load i32, i32* %v3_100036e3, align 4
  %v5_100036e3 = sub i32 %v3_100036dc, %v4_100036e3
  %v3_100036e8 = add i32 %v0_100036d4, -1
  %v4_100036e8 = add i32 %v3_100036e8, %v5_100036e3
  %v5_100036e8 = inttoptr i32 %v4_100036e8 to i8*
  %v6_100036e8 = load i8, i8* %v5_100036e8, align 1
  %v16_100036e8 = icmp eq i8 %v6_100036e8, 10
  %v1_100036ed = zext i1 %v16_100036e8 to i32
  %v3_100036ed = and i32 %v5_100036e3, -256
  %v4_100036ed = or i32 %v1_100036ed, %v3_100036ed
  store i32 %v4_100036ed, i32* @eax, align 4
  %v5_100036f0 = icmp eq i1 %v16_100036e8, false
  br i1 %v5_100036f0, label %dec_label_pc_100036fb, label %dec_label_pc_100036f4

dec_label_pc_100036f4:                            ; preds = %dec_label_pc_100036e3
  %v0_100036f6 = call i32 @function_10003680()
  store i32 %v0_100036f6, i32* @eax, align 4
  %v0_100036fd.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100036fb

dec_label_pc_100036fb:                            ; preds = %dec_label_pc_100036f4, %dec_label_pc_100036e3, %dec_label_pc_100036dc, %dec_label_pc_100036d0
  %v0_100036fd = phi i32 [ %v0_100036fd.pre, %dec_label_pc_100036f4 ], [ %v0_100036d4, %dec_label_pc_100036e3 ], [ %v0_100036d4, %dec_label_pc_100036dc ], [ %v0_100036d4, %dec_label_pc_100036d0 ]
  store i32 %v0_100036fd, i32* @ecx, align 4
  %v1_100036ff = call i32 @function_1000c090(i32 1)
  %v4_10003704 = trunc i32 %v1_100036ff to i8
  %v5_10003704 = icmp eq i8 %v4_10003704, 0
  br i1 %v5_10003704, label %dec_label_pc_10003724, label %dec_label_pc_10003708

dec_label_pc_10003708:                            ; preds = %dec_label_pc_100036fb
  %v0_10003708 = load i32, i32* @esi, align 4
  %v1_10003708 = add i32 %v0_10003708, 16
  %v2_10003708 = inttoptr i32 %v1_10003708 to i32*
  %v3_10003708 = load i32, i32* %v2_10003708, align 4
  %v2_1000370b = add i32 %v0_10003708, 32
  %v3_1000370b = inttoptr i32 %v2_1000370b to i32*
  %v4_1000370b = load i32, i32* %v3_1000370b, align 4
  %v5_1000370b = sub i32 %v3_10003708, %v4_1000370b
  %v2_1000370e = load i32, i32* @ecx, align 4
  %v5_10003710 = and i32 %arg1, 255
  %v7_10003710 = and i32 %v2_1000370e, -256
  %v8_10003710 = or i32 %v7_10003710, %v5_10003710
  store i32 %v8_10003710, i32* @ecx, align 4
  %v1_10003713 = trunc i32 %arg1 to i8
  %v5_10003713 = add i32 %v2_1000370e, %v5_1000370b
  %v6_10003713 = inttoptr i32 %v5_10003713 to i8*
  store i8 %v1_10003713, i8* %v6_10003713, align 1
  %v0_10003716 = load i32, i32* @esi, align 4
  %v1_10003716 = add i32 %v0_10003716, 16
  %v2_10003716 = inttoptr i32 %v1_10003716 to i32*
  %v3_10003716 = load i32, i32* %v2_10003716, align 4
  %v4_10003716 = add i32 %v3_10003716, 1
  store i32 %v4_10003716, i32* %v2_10003716, align 4
  %v0_10003719 = load i32, i32* @esi, align 4
  %v1_10003719 = add i32 %v0_10003719, 16
  %v2_10003719 = inttoptr i32 %v1_10003719 to i32*
  %v3_10003719 = load i32, i32* %v2_10003719, align 4
  store i32 %v3_10003719, i32* @eax, align 4
  store i32 %v0_10003719, i32* @ecx, align 4
  %v1_1000371f = call i32 @function_1000c0e0(i32 %v3_10003719)
  br label %dec_label_pc_10003724

dec_label_pc_10003724:                            ; preds = %dec_label_pc_10003708, %dec_label_pc_100036fb
  %v0_10003726 = phi i32 [ %v1_1000371f, %dec_label_pc_10003708 ], [ %v1_100036ff, %dec_label_pc_100036fb ]
  %v0_10003724 = load i32, i32* @esp, align 4
  %v3_10003724 = add i32 %v0_10003724, 4
  %v1_10003725 = inttoptr i32 %v3_10003724 to i32*
  %v2_10003725 = load i32, i32* %v1_10003725, align 4
  store i32 %v2_10003725, i32* @ebp, align 4
  ret i32 %v0_10003726
}

define i32 @function_10003730() local_unnamed_addr {
dec_label_pc_10003730:
  %esi.global-to-local = alloca i32, align 4
  %v0_10003731 = load i32, i32* @ecx, align 4
  store i32 %v0_10003731, i32* %esi.global-to-local, align 4
  %v1_10003733 = add i32 %v0_10003731, 8
  %v2_10003733 = inttoptr i32 %v1_10003733 to i32*
  %v3_10003733 = load i32, i32* %v2_10003733, align 4
  %v11_10003733 = icmp slt i32 %v3_10003733, 0
  %v1_10003737 = add i32 %v0_10003731, 12
  %v2_10003737 = inttoptr i32 %v1_10003737 to i32*
  store i32 0, i32* %v2_10003737, align 4
  %v2_1000373e = icmp eq i1 %v11_10003733, false
  br i1 %v2_1000373e, label %dec_label_pc_10003740, label %dec_label_pc_10003763

dec_label_pc_10003740:                            ; preds = %dec_label_pc_10003730
  %v2_10003740 = load i32, i32* @ecx, align 4
  store i32 %v2_10003740, i32* @eax, align 4
  %v1_10003742 = icmp eq i32 %v2_10003740, 0
  br i1 %v1_10003742, label %dec_label_pc_1000375c, label %dec_label_pc_10003746

dec_label_pc_10003746:                            ; preds = %dec_label_pc_10003740
  %v0_10003746 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10003746, i32* @ecx, align 4
  %v1_1000374c = inttoptr i32 %v0_10003746 to i32*
  %v2_1000374c = load i32, i32* %v1_1000374c, align 4
  store i32 %v2_1000374c, i32* @ecx, align 4
  %v1_1000374e = inttoptr i32 %v2_1000374c to i32*
  %v2_1000374e = load i32, i32* %v1_1000374e, align 4
  %v1_10003751 = add i32 %v2_1000374e, 20
  %v2_10003751 = inttoptr i32 %v1_10003751 to i32*
  %v3_10003751 = load i32, i32* %v2_10003751, align 4
  store i32 %v3_10003751, i32* @eax, align 4
  %v0_10003756 = load i32, i32* %esi.global-to-local, align 4
  %v1_10003756 = inttoptr i32 %v0_10003756 to i32*
  store i32 0, i32* %v1_10003756, align 4
  br label %dec_label_pc_1000375c

dec_label_pc_1000375c:                            ; preds = %dec_label_pc_10003746, %dec_label_pc_10003740
  %v0_1000375c = load i32, i32* %esi.global-to-local, align 4
  %v1_1000375c = add i32 %v0_1000375c, 4
  %v2_1000375c = inttoptr i32 %v1_1000375c to i32*
  store i32 0, i32* %v2_1000375c, align 4
  br label %dec_label_pc_10003763

dec_label_pc_10003763:                            ; preds = %dec_label_pc_10003730, %dec_label_pc_1000375c
  %v0_10003763 = load i32, i32* @esp, align 4
  %v1_10003763 = inttoptr i32 %v0_10003763 to i32*
  %v2_10003763 = load i32, i32* %v1_10003763, align 4
  store i32 %v2_10003763, i32* @esi, align 4
  %v0_10003764 = load i32, i32* @eax, align 4
  ret i32 %v0_10003764
}

define i32 @function_10003770() local_unnamed_addr {
dec_label_pc_10003770:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10003770 = load i32, i32* @esi, align 4
  store i32 %v0_10003770, i32* %stack_var_-4, align 4
  %v4_10003770 = ptrtoint i32* %stack_var_-4 to i32
  %v0_10003771 = load i32, i32* @ecx, align 4
  store i32 %v0_10003771, i32* %esi.global-to-local, align 4
  %v1_10003773 = add i32 %v0_10003771, 8
  %v2_10003773 = inttoptr i32 %v1_10003773 to i32*
  %v3_10003773 = load i32, i32* %v2_10003773, align 4
  %v11_10003773 = icmp slt i32 %v3_10003773, 0
  %v2_10003777 = icmp eq i1 %v11_10003773, false
  br i1 %v2_10003777, label %dec_label_pc_10003779, label %dec_label_pc_1000379c

dec_label_pc_10003779:                            ; preds = %dec_label_pc_10003770
  store i32 %v0_10003771, i32* @eax, align 4
  %v1_1000377b = icmp eq i32 %v0_10003771, 0
  br i1 %v1_1000377b, label %dec_label_pc_10003795, label %dec_label_pc_1000377f

dec_label_pc_1000377f:                            ; preds = %dec_label_pc_10003779
  %v0_1000377f = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000377f, i32* @ecx, align 4
  %v1_10003785 = inttoptr i32 %v0_1000377f to i32*
  %v2_10003785 = load i32, i32* %v1_10003785, align 4
  store i32 %v2_10003785, i32* @ecx, align 4
  %v1_10003787 = inttoptr i32 %v2_10003785 to i32*
  %v2_10003787 = load i32, i32* %v1_10003787, align 4
  %v1_1000378a = add i32 %v2_10003787, 20
  %v2_1000378a = inttoptr i32 %v1_1000378a to i32*
  %v3_1000378a = load i32, i32* %v2_1000378a, align 4
  store i32 %v3_1000378a, i32* @eax, align 4
  %v1_1000378f = inttoptr i32 %v0_10003771 to i32*
  store i32 0, i32* %v1_1000378f, align 4
  %v0_10003795.pre = load i32, i32* %esi.global-to-local, align 4
  %phitmp = add i32 %v0_10003795.pre, 4
  %phitmp3 = inttoptr i32 %phitmp to i32*
  br label %dec_label_pc_10003795

dec_label_pc_10003795:                            ; preds = %dec_label_pc_1000377f, %dec_label_pc_10003779
  %v0_10003795 = phi i32* [ %phitmp3, %dec_label_pc_1000377f ], [ inttoptr (i32 4 to i32*), %dec_label_pc_10003779 ]
  store i32 0, i32* %v0_10003795, align 4
  %v0_1000379c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000379c

dec_label_pc_1000379c:                            ; preds = %dec_label_pc_10003770, %dec_label_pc_10003795
  %v0_1000379c = phi i32 [ %v4_10003770, %dec_label_pc_10003770 ], [ %v0_1000379c.pre, %dec_label_pc_10003795 ]
  %v1_1000379c = inttoptr i32 %v0_1000379c to i32*
  %v2_1000379c = load i32, i32* %v1_1000379c, align 4
  store i32 %v2_1000379c, i32* %esi.global-to-local, align 4
  %v0_1000379d = load i32, i32* @eax, align 4
  ret i32 %v0_1000379d
}

define i32 @function_100037a0(i32* %arg1) local_unnamed_addr {
dec_label_pc_100037a0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_100037a0 = load i32, i32* @ebp, align 4
  %v0_100037a3 = load i32, i32* @ebx, align 4
  %v0_100037a4 = load i32, i32* @edi, align 4
  %v0_100037a5 = load i32, i32* @ecx, align 4
  store i32 %v0_100037a5, i32* %edi.global-to-local, align 4
  %v1_100037a7 = add i32 %v0_100037a5, 16
  %v2_100037a7 = inttoptr i32 %v1_100037a7 to i32*
  %v3_100037a7 = load i32, i32* %v2_100037a7, align 4
  store i32 %v3_100037a7, i32* %ebx.global-to-local, align 4
  %v10_100037aa = icmp eq i32 %v3_100037a7, -1
  br i1 %v10_100037aa, label %dec_label_pc_10003883, label %dec_label_pc_100037b3

dec_label_pc_100037b3:                            ; preds = %dec_label_pc_100037a0
  %v0_100037b3 = load i32, i32* @esi, align 4
  store i32 %v0_100037b3, i32* %stack_var_-16, align 4
  %v4_100037b3 = ptrtoint i32* %stack_var_-16 to i32
  %v2_100037c5 = add i32 %v4_100037b3, -4
  %v3_100037c5 = inttoptr i32 %v2_100037c5 to i32*
  %v2_100037c6 = add i32 %v4_100037b3, -8
  %v3_100037c6 = inttoptr i32 %v2_100037c6 to i32*
  br label %dec_label_pc_100037b4

dec_label_pc_100037b4:                            ; preds = %dec_label_pc_10003871.dec_label_pc_100037b4_crit_edge, %dec_label_pc_100037b3
  %v0_100037bc = phi i32 [ %v0_10003871, %dec_label_pc_10003871.dec_label_pc_100037b4_crit_edge ], [ %v3_100037a7, %dec_label_pc_100037b3 ]
  %v0_100037b4 = phi i32 [ %v0_100037b4.pre, %dec_label_pc_10003871.dec_label_pc_100037b4_crit_edge ], [ %v0_100037a5, %dec_label_pc_100037b3 ]
  %v1_100037b4 = add i32 %v0_100037b4, 4
  %v2_100037b4 = inttoptr i32 %v1_100037b4 to i32*
  %v3_100037b4 = load i32, i32* %v2_100037b4, align 4
  store i32 %tmp, i32* @ecx, align 4
  %v2_100037be = mul i32 %v0_100037bc, 32
  store i32 %v2_100037be, i32* %esi.global-to-local, align 4
  %v3_100037c1 = or i32 %v2_100037be, 16
  %v4_100037c1 = add i32 %v3_100037c1, %v3_100037b4
  store i32 %v4_100037c1, i32* %eax.global-to-local, align 4
  store i32 %v4_100037c1, i32* %v3_100037c5, align 4
  %v0_100037c6 = load i32, i32* @ecx, align 4
  store i32 %v0_100037c6, i32* %v3_100037c6, align 4
  %v0_100037cc = load i32, i32* %eax.global-to-local, align 4
  %v4_100037cc = trunc i32 %v0_100037cc to i8
  %v5_100037cc = icmp eq i8 %v4_100037cc, 0
  br i1 %v5_100037cc, label %dec_label_pc_10003816, label %dec_label_pc_100037d0

dec_label_pc_100037d0:                            ; preds = %dec_label_pc_100037b4
  %v0_100037d0 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_100037d0 = and i8 %v0_100037d0, 1
  %v2_100037d0 = icmp eq i8 %v1_100037d0, 0
  %v1_100037d7 = icmp eq i1 %v2_100037d0, false
  br i1 %v1_100037d7, label %dec_label_pc_100037fe, label %dec_label_pc_100037d9

dec_label_pc_100037d9:                            ; preds = %dec_label_pc_100037d0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_100037de = or i8 %v0_100037d0, 1
  store i8 %v3_100037de, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @ecx, align 4
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100037fe

dec_label_pc_100037fe:                            ; preds = %dec_label_pc_100037d9, %dec_label_pc_100037d0
  %v0_100037fe = load i32, i32* %ebx.global-to-local, align 4
  %v10_100037fe = icmp eq i32 %v0_100037fe, -1
  br i1 %v10_100037fe, label %dec_label_pc_1000380d, label %dec_label_pc_10003803

dec_label_pc_10003803:                            ; preds = %dec_label_pc_100037fe
  %v0_10003803 = load i32, i32* %edi.global-to-local, align 4
  %v1_10003803 = add i32 %v0_10003803, 4
  %v2_10003803 = inttoptr i32 %v1_10003803 to i32*
  %v3_10003803 = load i32, i32* %v2_10003803, align 4
  store i32 %v3_10003803, i32* %eax.global-to-local, align 4
  %v1_10003806 = load i32, i32* %esi.global-to-local, align 4
  %v3_10003806 = add i32 %v1_10003806, %v3_10003803
  %v4_10003806 = inttoptr i32 %v3_10003806 to i32*
  %v5_10003806 = load i32, i32* %v4_10003806, align 4
  store i32 %v5_10003806, i32* %ebx.global-to-local, align 4
  store i32 %v3_10003806, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003871

dec_label_pc_1000380d:                            ; preds = %dec_label_pc_100037fe
  store i32 ptrtoint (i32* @global_var_1002b61c.159 to i32), i32* %eax.global-to-local, align 4
  %v2_10003812 = load i32, i32* @global_var_1002b61c.159, align 4
  store i32 %v2_10003812, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10003871

dec_label_pc_10003816:                            ; preds = %dec_label_pc_100037b4
  %v0_10003816 = load i32, i32* %edi.global-to-local, align 4
  %v1_10003816 = add i32 %v0_10003816, 4
  %v2_10003816 = inttoptr i32 %v1_10003816 to i32*
  %v3_10003816 = load i32, i32* %v2_10003816, align 4
  store i32 %tmp, i32* @ecx, align 4
  %v1_1000381e = load i32, i32* %esi.global-to-local, align 4
  %v3_1000381e = add i32 %v3_10003816, 16
  %v4_1000381e = add i32 %v3_1000381e, %v1_1000381e
  store i32 %v4_1000381e, i32* %eax.global-to-local, align 4
  store i32 %tmp, i32* %v3_100037c5, align 4
  %v0_10003823 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10003823, i32* %v3_100037c6, align 4
  %v0_10003829 = load i32, i32* %eax.global-to-local, align 4
  %v4_10003829 = trunc i32 %v0_10003829 to i8
  %v5_10003829 = icmp eq i8 %v4_10003829, 0
  br i1 %v5_10003829, label %dec_label_pc_10003816.dec_label_pc_1000387a_crit_edge, label %dec_label_pc_1000382d

dec_label_pc_10003816.dec_label_pc_1000387a_crit_edge: ; preds = %dec_label_pc_10003816
  %v0_1000387c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000387a

dec_label_pc_1000382d:                            ; preds = %dec_label_pc_10003816
  %v0_1000382d = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_1000382d = and i8 %v0_1000382d, 1
  %v2_1000382d = icmp eq i8 %v1_1000382d, 0
  %v1_10003834 = icmp eq i1 %v2_1000382d, false
  br i1 %v1_10003834, label %dec_label_pc_1000385b, label %dec_label_pc_10003836

dec_label_pc_10003836:                            ; preds = %dec_label_pc_1000382d
  store i32 1, i32* @ecx, align 4
  %v3_1000383b = or i8 %v0_1000382d, 1
  store i8 %v3_1000383b, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000385e

dec_label_pc_1000385b:                            ; preds = %dec_label_pc_1000382d
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000385e

dec_label_pc_1000385e:                            ; preds = %dec_label_pc_1000385b, %dec_label_pc_10003836
  %v0_1000385e = load i32, i32* %ebx.global-to-local, align 4
  %v12_1000385e = icmp eq i32 %v0_1000385e, -1
  br i1 %v12_1000385e, label %dec_label_pc_1000386e, label %dec_label_pc_10003862

dec_label_pc_10003862:                            ; preds = %dec_label_pc_1000385e
  %v0_10003862 = load i32, i32* %edi.global-to-local, align 4
  %v1_10003862 = add i32 %v0_10003862, 4
  %v2_10003862 = inttoptr i32 %v1_10003862 to i32*
  %v3_10003862 = load i32, i32* %v2_10003862, align 4
  store i32 %v3_10003862, i32* %eax.global-to-local, align 4
  %v1_10003865 = load i32, i32* %esi.global-to-local, align 4
  %v2_10003865 = add i32 %v1_10003865, %v3_10003862
  br label %dec_label_pc_1000386e

dec_label_pc_1000386e:                            ; preds = %dec_label_pc_1000385e, %dec_label_pc_10003862
  %storemerge = phi i32 [ %v2_10003865, %dec_label_pc_10003862 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000385e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_1000386e = add i32 %storemerge, 4
  %v2_1000386e = inttoptr i32 %v1_1000386e to i32*
  %v3_1000386e = load i32, i32* %v2_1000386e, align 4
  store i32 %v3_1000386e, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10003871

dec_label_pc_10003871:                            ; preds = %dec_label_pc_1000386e, %dec_label_pc_1000380d, %dec_label_pc_10003803
  %v0_10003871 = phi i32 [ %v3_1000386e, %dec_label_pc_1000386e ], [ %v2_10003812, %dec_label_pc_1000380d ], [ %v5_10003806, %dec_label_pc_10003803 ]
  %v10_10003871 = icmp eq i32 %v0_10003871, -1
  %v1_10003874 = icmp eq i1 %v10_10003871, false
  br i1 %v1_10003874, label %dec_label_pc_10003871.dec_label_pc_100037b4_crit_edge, label %dec_label_pc_1000387a.loopexit

dec_label_pc_10003871.dec_label_pc_100037b4_crit_edge: ; preds = %dec_label_pc_10003871
  %v0_100037b4.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_100037b4

dec_label_pc_1000387a.loopexit:                   ; preds = %dec_label_pc_10003871
  br label %dec_label_pc_1000387a

dec_label_pc_1000387a:                            ; preds = %dec_label_pc_1000387a.loopexit, %dec_label_pc_10003816.dec_label_pc_1000387a_crit_edge
  %v0_1000387c = phi i32 [ %v0_1000387c.pre, %dec_label_pc_10003816.dec_label_pc_1000387a_crit_edge ], [ %v0_10003871, %dec_label_pc_1000387a.loopexit ]
  %v2_1000387a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000387a, i32* @esi, align 4
  %v3_1000387a = add i32 %v4_100037b3, 4
  %v1_1000387b = inttoptr i32 %v3_1000387a to i32*
  %v2_1000387b = load i32, i32* %v1_1000387b, align 4
  store i32 %v2_1000387b, i32* @edi, align 4
  %v3_1000387b = add i32 %v4_100037b3, 8
  store i32 %v0_1000387c, i32* %eax.global-to-local, align 4
  %v1_1000387e = inttoptr i32 %v3_1000387b to i32*
  %v2_1000387e = load i32, i32* %v1_1000387e, align 4
  store i32 %v2_1000387e, i32* @ebx, align 4
  %v3_1000387e = add i32 %v4_100037b3, 12
  %v1_1000387f = inttoptr i32 %v3_1000387e to i32*
  %v2_1000387f = load i32, i32* %v1_1000387f, align 4
  store i32 %v2_1000387f, i32* @ebp, align 4
  ret i32 %v0_1000387c

dec_label_pc_10003883:                            ; preds = %dec_label_pc_100037a0
  store i32 %v0_100037a4, i32* @edi, align 4
  store i32 %v3_100037a7, i32* %eax.global-to-local, align 4
  store i32 %v0_100037a3, i32* @ebx, align 4
  store i32 %v0_100037a0, i32* @ebp, align 4
  ret i32 %v3_100037a7
}

define i32 @function_10003890(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003890:
  %eax.global-to-local = alloca i32, align 4
  %v0_10003899 = load i32, i32* @ecx, align 4
  store i32 %v0_10003899, i32* @edi, align 4
  %v2_1000389b = add i32 %v0_10003899, 16
  %v3_1000389b = inttoptr i32 %v2_1000389b to i32*
  %v4_1000389b = load i32, i32* %v3_1000389b, align 4
  %v15_1000389b = icmp eq i32 %v4_1000389b, %arg1
  br i1 %v15_1000389b, label %dec_label_pc_10003cbd, label %dec_label_pc_100038b3

dec_label_pc_100038b0:                            ; preds = %dec_label_pc_10003cb1
  br label %dec_label_pc_100038b3

dec_label_pc_100038b3:                            ; preds = %dec_label_pc_10003890, %dec_label_pc_100038b0
  %v1_100039a9 = phi i32 [ %v1_10003cb4, %dec_label_pc_100038b0 ], [ %v0_10003899, %dec_label_pc_10003890 ]
  %v0_10003969 = phi i32 [ %stack_var_4.3, %dec_label_pc_100038b0 ], [ %arg1, %dec_label_pc_10003890 ]
  %v0_100038b3 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_100038b3 = sext i8 %v0_100038b3 to i32
  store i32 %v1_100038b3, i32* @ecx, align 4
  %v4_100038be = and i8 %v0_100038b3, 1
  %v5_100038be = icmp eq i8 %v4_100038be, 0
  %v1_100038c0 = icmp eq i1 %v5_100038be, false
  br i1 %v1_100038c0, label %dec_label_pc_100038e7, label %dec_label_pc_100038c2

dec_label_pc_100038c2:                            ; preds = %dec_label_pc_100038b3
  %v2_100038c2 = or i32 %v1_100038b3, 1
  %v5_100038c2 = trunc i32 %v2_100038c2 to i8
  store i32 %v2_100038c2, i32* @ecx, align 4
  store i8 %v5_100038c2, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100038ea

dec_label_pc_100038e7:                            ; preds = %dec_label_pc_100038b3
  br label %dec_label_pc_100038ea

dec_label_pc_100038ea:                            ; preds = %dec_label_pc_100038e7, %dec_label_pc_100038c2
  %v0_10003905 = phi i32 [ %v1_100038b3, %dec_label_pc_100038e7 ], [ %v2_100038c2, %dec_label_pc_100038c2 ]
  %v12_100038ea = icmp eq i32 %v0_10003969, -1
  br i1 %v12_100038ea, label %dec_label_pc_100038fd, label %dec_label_pc_100038ee

dec_label_pc_100038ee:                            ; preds = %dec_label_pc_100038ea
  %v2_100038f0 = mul i32 %v0_10003969, 32
  store i32 %v2_100038f0, i32* %eax.global-to-local, align 4
  %v2_100038f3 = add i32 %v1_100039a9, 4
  %v3_100038f3 = inttoptr i32 %v2_100038f3 to i32*
  %v4_100038f3 = load i32, i32* %v3_100038f3, align 4
  %v5_100038f3 = add i32 %v4_100038f3, %v2_100038f0
  br label %dec_label_pc_100038fd

dec_label_pc_100038fd:                            ; preds = %dec_label_pc_100038ea, %dec_label_pc_100038ee
  %storemerge14 = phi i32 [ %v5_100038f3, %dec_label_pc_100038ee ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100038ea ]
  store i32 %storemerge14, i32* %eax.global-to-local, align 4
  %v1_100038fd = add i32 %storemerge14, 8
  %v2_100038fd = inttoptr i32 %v1_100038fd to i32*
  %v3_100038fd = load i32, i32* %v2_100038fd, align 4
  store i32 %v3_100038fd, i32* %eax.global-to-local, align 4
  %v2_10003900 = and i32 %v0_10003905, 1
  %v3_10003900 = icmp eq i32 %v2_10003900, 0
  %v1_10003903 = icmp eq i1 %v3_10003900, false
  br i1 %v1_10003903, label %dec_label_pc_10003925, label %dec_label_pc_10003905

dec_label_pc_10003905:                            ; preds = %dec_label_pc_100038fd
  %v2_10003905 = or i32 %v0_10003905, 1
  %v5_10003905 = trunc i32 %v2_10003905 to i8
  store i32 %v2_10003905, i32* @ecx, align 4
  store i8 %v5_10003905, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003925

dec_label_pc_10003925:                            ; preds = %dec_label_pc_10003905, %dec_label_pc_100038fd
  %v0_10003945 = phi i32 [ %v2_10003905, %dec_label_pc_10003905 ], [ %v0_10003905, %dec_label_pc_100038fd ]
  %v12_10003925 = icmp eq i32 %v3_100038fd, -1
  br i1 %v12_10003925, label %dec_label_pc_10003936, label %dec_label_pc_10003929

dec_label_pc_10003929:                            ; preds = %dec_label_pc_10003925
  %v2_10003929 = mul i32 %v3_100038fd, 32
  store i32 %v2_10003929, i32* %eax.global-to-local, align 4
  %v2_1000392c = add i32 %v1_100039a9, 4
  %v3_1000392c = inttoptr i32 %v2_1000392c to i32*
  %v4_1000392c = load i32, i32* %v3_1000392c, align 4
  %v5_1000392c = add i32 %v4_1000392c, %v2_10003929
  br label %dec_label_pc_10003936

dec_label_pc_10003936:                            ; preds = %dec_label_pc_10003925, %dec_label_pc_10003929
  %storemerge13 = phi i32 [ %v5_1000392c, %dec_label_pc_10003929 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003925 ]
  store i32 %storemerge13, i32* @eax, align 4
  %v1_10003936 = add i32 %storemerge13, 12
  %v2_10003936 = inttoptr i32 %v1_10003936 to i32*
  %v3_10003936 = load i32, i32* %v2_10003936, align 4
  %v10_10003936 = icmp eq i32 %v3_10003936, 0
  %v1_1000393a = icmp eq i1 %v10_10003936, false
  br i1 %v1_1000393a, label %dec_label_pc_10003cc2, label %dec_label_pc_10003940

dec_label_pc_10003940:                            ; preds = %dec_label_pc_10003936
  %v2_10003940 = and i32 %v0_10003945, 1
  %v3_10003940 = icmp eq i32 %v2_10003940, 0
  %v1_10003943 = icmp eq i1 %v3_10003940, false
  br i1 %v1_10003943, label %dec_label_pc_10003965, label %dec_label_pc_10003945

dec_label_pc_10003945:                            ; preds = %dec_label_pc_10003940
  %v2_10003945 = or i32 %v0_10003945, 1
  %v5_10003945 = trunc i32 %v2_10003945 to i8
  store i32 %v2_10003945, i32* @ecx, align 4
  store i8 %v5_10003945, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003965

dec_label_pc_10003965:                            ; preds = %dec_label_pc_10003945, %dec_label_pc_10003940
  %v0_10003980 = phi i32 [ %v2_10003945, %dec_label_pc_10003945 ], [ %v0_10003945, %dec_label_pc_10003940 ]
  br i1 %v12_100038ea, label %dec_label_pc_10003978, label %dec_label_pc_10003969

dec_label_pc_10003969:                            ; preds = %dec_label_pc_10003965
  %v2_1000396b = mul i32 %v0_10003969, 32
  store i32 %v2_1000396b, i32* %eax.global-to-local, align 4
  %v2_1000396e = add i32 %v1_100039a9, 4
  %v3_1000396e = inttoptr i32 %v2_1000396e to i32*
  %v4_1000396e = load i32, i32* %v3_1000396e, align 4
  %v5_1000396e = add i32 %v4_1000396e, %v2_1000396b
  br label %dec_label_pc_10003978

dec_label_pc_10003978:                            ; preds = %dec_label_pc_10003965, %dec_label_pc_10003969
  %storemerge12 = phi i32 [ %v5_1000396e, %dec_label_pc_10003969 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003965 ]
  store i32 %storemerge12, i32* %eax.global-to-local, align 4
  %v1_10003978 = add i32 %storemerge12, 8
  %v2_10003978 = inttoptr i32 %v1_10003978 to i32*
  %v3_10003978 = load i32, i32* %v2_10003978, align 4
  store i32 %v3_10003978, i32* @esi, align 4
  %v2_1000397b = and i32 %v0_10003980, 1
  %v3_1000397b = icmp eq i32 %v2_1000397b, 0
  %v1_1000397e = icmp eq i1 %v3_1000397b, false
  br i1 %v1_1000397e, label %dec_label_pc_100039a0, label %dec_label_pc_10003980

dec_label_pc_10003980:                            ; preds = %dec_label_pc_10003978
  %v2_10003980 = or i32 %v0_10003980, 1
  %v5_10003980 = trunc i32 %v2_10003980 to i8
  store i32 %v2_10003980, i32* @ecx, align 4
  store i8 %v5_10003980, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100039a0

dec_label_pc_100039a0:                            ; preds = %dec_label_pc_10003980, %dec_label_pc_10003978
  %v12_100039a0 = icmp eq i32 %v3_10003978, -1
  br i1 %v12_100039a0, label %dec_label_pc_100039b3, label %dec_label_pc_100039a4

dec_label_pc_100039a4:                            ; preds = %dec_label_pc_100039a0
  %v2_100039a6 = mul i32 %v3_10003978, 32
  store i32 %v2_100039a6, i32* %eax.global-to-local, align 4
  %v2_100039a9 = add i32 %v1_100039a9, 4
  %v3_100039a9 = inttoptr i32 %v2_100039a9 to i32*
  %v4_100039a9 = load i32, i32* %v3_100039a9, align 4
  %v5_100039a9 = add i32 %v4_100039a9, %v2_100039a6
  br label %dec_label_pc_100039b3

dec_label_pc_100039b3:                            ; preds = %dec_label_pc_100039a0, %dec_label_pc_100039a4
  %storemerge11 = phi i32 [ %v5_100039a9, %dec_label_pc_100039a4 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100039a0 ]
  store i32 %storemerge11, i32* %eax.global-to-local, align 4
  %v1_100039b3 = add i32 %storemerge11, 8
  %v2_100039b3 = inttoptr i32 %v1_100039b3 to i32*
  %v3_100039b3 = load i32, i32* %v2_100039b3, align 4
  store i32 %v3_100039b3, i32* @ebx, align 4
  %v1_100039b6 = load i32, i32* @esp, align 4
  %v2_100039b6 = add i32 %v1_100039b6, -4
  %v3_100039b6 = inttoptr i32 %v2_100039b6 to i32*
  store i32 %v3_10003978, i32* %v3_100039b6, align 4
  %v0_100039b7 = load i32, i32* @edi, align 4
  store i32 %v0_100039b7, i32* @ecx, align 4
  %v1_100039b9 = call i32 @function_10003000(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100039b9, i32* %eax.global-to-local, align 4
  %v0_100039be = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_100039be = sext i8 %v0_100039be to i32
  store i32 %v1_100039be, i32* @ecx, align 4
  %v4_100039c4 = trunc i32 %v1_100039b9 to i8
  %v5_100039c4 = icmp eq i8 %v4_100039c4, 0
  %v2_10003b2b = and i32 %v1_100039be, 1
  %v3_10003b2b = icmp eq i32 %v2_10003b2b, 0
  %v1_10003b2e = icmp eq i1 %v3_10003b2b, false
  br i1 %v5_100039c4, label %dec_label_pc_10003b2b, label %dec_label_pc_100039cc

dec_label_pc_100039cc:                            ; preds = %dec_label_pc_100039b3
  br i1 %v1_10003b2e, label %dec_label_pc_100039fb, label %dec_label_pc_100039d1

dec_label_pc_100039d1:                            ; preds = %dec_label_pc_100039cc
  %v1_100039d1 = or i32 %v1_100039be, 1
  %v4_100039d1 = trunc i32 %v1_100039d1 to i8
  store i32 %v1_100039d1, i32* @ecx, align 4
  store i8 %v4_100039d1, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100039fe

dec_label_pc_100039fb:                            ; preds = %dec_label_pc_100039cc
  br label %dec_label_pc_100039fe

dec_label_pc_100039fe:                            ; preds = %dec_label_pc_100039fb, %dec_label_pc_100039d1
  %v0_10003a19 = phi i32 [ %v1_100039be, %dec_label_pc_100039fb ], [ %v1_100039d1, %dec_label_pc_100039d1 ]
  %v0_100039fe = load i32, i32* @ebx, align 4
  %v12_100039fe = icmp eq i32 %v0_100039fe, -1
  br i1 %v12_100039fe, label %dec_label_pc_10003a11, label %dec_label_pc_10003a02

dec_label_pc_10003a02:                            ; preds = %dec_label_pc_100039fe
  %v2_10003a04 = mul i32 %v0_100039fe, 32
  store i32 %v2_10003a04, i32* %eax.global-to-local, align 4
  %v1_10003a07 = load i32, i32* @edi, align 4
  %v2_10003a07 = add i32 %v1_10003a07, 4
  %v3_10003a07 = inttoptr i32 %v2_10003a07 to i32*
  %v4_10003a07 = load i32, i32* %v3_10003a07, align 4
  %v5_10003a07 = add i32 %v4_10003a07, %v2_10003a04
  br label %dec_label_pc_10003a11

dec_label_pc_10003a11:                            ; preds = %dec_label_pc_100039fe, %dec_label_pc_10003a02
  %storemerge5 = phi i32 [ %v5_10003a07, %dec_label_pc_10003a02 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100039fe ]
  store i32 %storemerge5, i32* %eax.global-to-local, align 4
  %v1_10003a11 = add i32 %storemerge5, 4
  %v2_10003a11 = inttoptr i32 %v1_10003a11 to i32*
  %v3_10003a11 = load i32, i32* %v2_10003a11, align 4
  store i32 %v3_10003a11, i32* %eax.global-to-local, align 4
  %v2_10003a14 = and i32 %v0_10003a19, 1
  %v3_10003a14 = icmp eq i32 %v2_10003a14, 0
  %v1_10003a17 = icmp eq i1 %v3_10003a14, false
  br i1 %v1_10003a17, label %dec_label_pc_10003a3e, label %dec_label_pc_10003a19

dec_label_pc_10003a19:                            ; preds = %dec_label_pc_10003a11
  %v1_10003a19 = or i32 %v0_10003a19, 1
  %v4_10003a19 = trunc i32 %v1_10003a19 to i8
  store i32 %v1_10003a19, i32* @ecx, align 4
  store i8 %v4_10003a19, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003a3e

dec_label_pc_10003a3e:                            ; preds = %dec_label_pc_10003a19, %dec_label_pc_10003a11
  %v12_10003a3e = icmp eq i32 %v3_10003a11, -1
  br i1 %v12_10003a3e, label %dec_label_pc_10003a51, label %dec_label_pc_10003a42

dec_label_pc_10003a42:                            ; preds = %dec_label_pc_10003a3e
  %v2_10003a44 = mul i32 %v3_10003a11, 32
  store i32 %v2_10003a44, i32* @ecx, align 4
  %v1_10003a47 = load i32, i32* @edi, align 4
  %v2_10003a47 = add i32 %v1_10003a47, 4
  %v3_10003a47 = inttoptr i32 %v2_10003a47 to i32*
  %v4_10003a47 = load i32, i32* %v3_10003a47, align 4
  %v5_10003a47 = add i32 %v4_10003a47, %v2_10003a44
  br label %dec_label_pc_10003a51

dec_label_pc_10003a51:                            ; preds = %dec_label_pc_10003a3e, %dec_label_pc_10003a42
  %storemerge4 = phi i32 [ %v5_10003a47, %dec_label_pc_10003a42 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003a3e ]
  store i32 %storemerge4, i32* @ecx, align 4
  %v1_10003a51 = add i32 %storemerge4, 12
  %v2_10003a51 = inttoptr i32 %v1_10003a51 to i32*
  %v3_10003a51 = load i32, i32* %v2_10003a51, align 4
  %v10_10003a51 = icmp eq i32 %v3_10003a51, 0
  br i1 %v10_10003a51, label %dec_label_pc_10003bb5, label %dec_label_pc_10003a5b

dec_label_pc_10003a5b:                            ; preds = %dec_label_pc_10003a51
  %v1_10003a5e = load i32, i32* @esp, align 4
  %v2_10003a5e = add i32 %v1_10003a5e, -4
  %v3_10003a5e = inttoptr i32 %v2_10003a5e to i32*
  store i32 %v0_10003969, i32* %v3_10003a5e, align 4
  %v0_10003a5f = load i32, i32* @edi, align 4
  store i32 %v0_10003a5f, i32* @ecx, align 4
  %v1_10003a61 = call i32 @function_100030b0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10003a61, i32* %eax.global-to-local, align 4
  %v4_10003a66 = trunc i32 %v1_10003a61 to i8
  %v5_10003a66 = icmp eq i8 %v4_10003a66, 0
  %v0_10003b03.pre = load i32, i32* @esi, align 4
  br i1 %v5_10003a66, label %dec_label_pc_10003b00, label %dec_label_pc_10003a6e

dec_label_pc_10003a6e:                            ; preds = %dec_label_pc_10003a5b
  %v1_10003a6e = load i32, i32* @esp, align 4
  %v2_10003a6e = add i32 %v1_10003a6e, -4
  %v3_10003a6e = inttoptr i32 %v2_10003a6e to i32*
  store i32 %v0_10003b03.pre, i32* %v3_10003a6e, align 4
  %v0_10003a6f = load i32, i32* @edi, align 4
  store i32 %v0_10003a6f, i32* @ecx, align 4
  %v0_10003a71 = load i32, i32* @esi, align 4
  %v1_10003a74 = call i32 @function_10003160(i32 %v0_10003a71)
  %v0_10003a79 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10003a79 = sext i8 %v0_10003a79 to i32
  store i32 %v1_10003a79, i32* %eax.global-to-local, align 4
  %v2_10003a7e = and i8 %v0_10003a79, 1
  %v3_10003a7e = icmp eq i8 %v2_10003a7e, 0
  %v1_10003a80 = icmp eq i1 %v3_10003a7e, false
  br i1 %v1_10003a80, label %dec_label_pc_10003aab, label %dec_label_pc_10003a82

dec_label_pc_10003a82:                            ; preds = %dec_label_pc_10003a6e
  %v1_10003a82 = or i32 %v1_10003a79, 1
  %v4_10003a82 = trunc i32 %v1_10003a82 to i8
  store i32 %v1_10003a82, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @ecx, align 4
  store i8 %v4_10003a82, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003aae

dec_label_pc_10003aab:                            ; preds = %dec_label_pc_10003a6e
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_10003aae

dec_label_pc_10003aae:                            ; preds = %dec_label_pc_10003aab, %dec_label_pc_10003a82
  %v0_10003ac6 = phi i32 [ %v1_10003a79, %dec_label_pc_10003aab ], [ %v1_10003a82, %dec_label_pc_10003a82 ]
  %v0_10003aae = load i32, i32* @esi, align 4
  %v12_10003aae = icmp eq i32 %v0_10003aae, -1
  br i1 %v12_10003aae, label %dec_label_pc_10003abf, label %dec_label_pc_10003ab2

dec_label_pc_10003ab2:                            ; preds = %dec_label_pc_10003aae
  %v2_10003ab2 = mul i32 %v0_10003aae, 32
  %v1_10003ab5 = load i32, i32* @edi, align 4
  %v2_10003ab5 = add i32 %v1_10003ab5, 4
  %v3_10003ab5 = inttoptr i32 %v2_10003ab5 to i32*
  %v4_10003ab5 = load i32, i32* %v3_10003ab5, align 4
  %v5_10003ab5 = add i32 %v4_10003ab5, %v2_10003ab2
  br label %dec_label_pc_10003abf

dec_label_pc_10003abf:                            ; preds = %dec_label_pc_10003aae, %dec_label_pc_10003ab2
  %storemerge3 = phi i32 [ %v5_10003ab5, %dec_label_pc_10003ab2 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003aae ]
  %v1_10003abf = add i32 %storemerge3, 8
  %v2_10003abf = inttoptr i32 %v1_10003abf to i32*
  %v3_10003abf = load i32, i32* %v2_10003abf, align 4
  %v2_10003ac2 = and i32 %v0_10003ac6, 1
  %v3_10003ac2 = icmp eq i32 %v2_10003ac2, 0
  %v1_10003ac4 = icmp eq i1 %v3_10003ac2, false
  br i1 %v1_10003ac4, label %dec_label_pc_10003aea, label %dec_label_pc_10003ac6

dec_label_pc_10003ac6:                            ; preds = %dec_label_pc_10003abf
  %v1_10003ac6 = or i32 %v0_10003ac6, 1
  %v4_10003ac6 = trunc i32 %v1_10003ac6 to i8
  store i32 %v1_10003ac6, i32* %eax.global-to-local, align 4
  store i8 %v4_10003ac6, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003aea

dec_label_pc_10003aea:                            ; preds = %dec_label_pc_10003ac6, %dec_label_pc_10003abf
  %v12_10003aea = icmp eq i32 %v3_10003abf, -1
  br i1 %v12_10003aea, label %dec_label_pc_10003afd, label %dec_label_pc_10003aee

dec_label_pc_10003aee:                            ; preds = %dec_label_pc_10003aea
  %v2_10003af0 = mul i32 %v3_10003abf, 32
  store i32 %v2_10003af0, i32* %eax.global-to-local, align 4
  %v1_10003af3 = load i32, i32* @edi, align 4
  %v2_10003af3 = add i32 %v1_10003af3, 4
  %v3_10003af3 = inttoptr i32 %v2_10003af3 to i32*
  %v4_10003af3 = load i32, i32* %v3_10003af3, align 4
  %v5_10003af3 = add i32 %v4_10003af3, %v2_10003af0
  br label %dec_label_pc_10003afd

dec_label_pc_10003afd:                            ; preds = %dec_label_pc_10003aea, %dec_label_pc_10003aee
  %storemerge = phi i32 [ %v5_10003af3, %dec_label_pc_10003aee ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003aea ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_10003afd = add i32 %storemerge, 8
  %v2_10003afd = inttoptr i32 %v1_10003afd to i32*
  %v3_10003afd = load i32, i32* %v2_10003afd, align 4
  store i32 %v3_10003afd, i32* @ebx, align 4
  br label %dec_label_pc_10003b00

dec_label_pc_10003b00:                            ; preds = %dec_label_pc_10003a5b, %dec_label_pc_10003afd
  %v0_10003b03 = phi i32 [ %v3_10003abf, %dec_label_pc_10003afd ], [ %v0_10003b03.pre, %dec_label_pc_10003a5b ]
  %stack_var_4.1 = phi i32 [ %v0_10003a71, %dec_label_pc_10003afd ], [ %v0_10003969, %dec_label_pc_10003a5b ]
  %v0_10003b00 = load i32, i32* @edi, align 4
  %v1_10003b00 = add i32 %v0_10003b00, 4
  %v2_10003b00 = inttoptr i32 %v1_10003b00 to i32*
  %v3_10003b00 = load i32, i32* %v2_10003b00, align 4
  store i32 %v3_10003b00, i32* %eax.global-to-local, align 4
  %v2_10003b03 = mul i32 %v0_10003b03, 32
  %v3_10003b06 = or i32 %v2_10003b03, 12
  %v4_10003b06 = add i32 %v3_10003b00, %v3_10003b06
  %v5_10003b06 = inttoptr i32 %v4_10003b06 to i32*
  store i32 1, i32* %v5_10003b06, align 4
  %v0_10003b0e = load i32, i32* @edi, align 4
  %v1_10003b0e = add i32 %v0_10003b0e, 4
  %v2_10003b0e = inttoptr i32 %v1_10003b0e to i32*
  %v3_10003b0e = load i32, i32* %v2_10003b0e, align 4
  %v0_10003b11 = load i32, i32* @ebx, align 4
  %v2_10003b13 = mul i32 %v0_10003b11, 32
  %v3_10003b16 = or i32 %v2_10003b13, 12
  %v4_10003b16 = add i32 %v3_10003b16, %v3_10003b0e
  %v5_10003b16 = inttoptr i32 %v4_10003b16 to i32*
  store i32 0, i32* %v5_10003b16, align 4
  %v0_10003b1e = load i32, i32* @ebx, align 4
  %v1_10003b1e = load i32, i32* @esp, align 4
  %v2_10003b1e = add i32 %v1_10003b1e, -4
  %v3_10003b1e = inttoptr i32 %v2_10003b1e to i32*
  store i32 %v0_10003b1e, i32* %v3_10003b1e, align 4
  %v0_10003b1f = load i32, i32* @edi, align 4
  store i32 %v0_10003b1f, i32* @ecx, align 4
  %v1_10003b21 = call i32 @function_10003360(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10003b21, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003cb1

dec_label_pc_10003b2b:                            ; preds = %dec_label_pc_100039b3
  br i1 %v1_10003b2e, label %dec_label_pc_10003b5a, label %dec_label_pc_10003b30

dec_label_pc_10003b30:                            ; preds = %dec_label_pc_10003b2b
  %v1_10003b30 = or i32 %v1_100039be, 1
  %v4_10003b30 = trunc i32 %v1_10003b30 to i8
  store i32 %v1_10003b30, i32* @ecx, align 4
  store i8 %v4_10003b30, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003b5d

dec_label_pc_10003b5a:                            ; preds = %dec_label_pc_10003b2b
  br label %dec_label_pc_10003b5d

dec_label_pc_10003b5d:                            ; preds = %dec_label_pc_10003b5a, %dec_label_pc_10003b30
  %v0_10003b77 = phi i32 [ %v1_100039be, %dec_label_pc_10003b5a ], [ %v1_10003b30, %dec_label_pc_10003b30 ]
  %v0_10003b5d = load i32, i32* @ebx, align 4
  %v12_10003b5d = icmp eq i32 %v0_10003b5d, -1
  br i1 %v12_10003b5d, label %dec_label_pc_10003b70, label %dec_label_pc_10003b61

dec_label_pc_10003b61:                            ; preds = %dec_label_pc_10003b5d
  %v2_10003b63 = mul i32 %v0_10003b5d, 32
  store i32 %v2_10003b63, i32* %eax.global-to-local, align 4
  %v1_10003b66 = load i32, i32* @edi, align 4
  %v2_10003b66 = add i32 %v1_10003b66, 4
  %v3_10003b66 = inttoptr i32 %v2_10003b66 to i32*
  %v4_10003b66 = load i32, i32* %v3_10003b66, align 4
  %v5_10003b66 = add i32 %v4_10003b66, %v2_10003b63
  br label %dec_label_pc_10003b70

dec_label_pc_10003b70:                            ; preds = %dec_label_pc_10003b5d, %dec_label_pc_10003b61
  %storemerge10 = phi i32 [ %v5_10003b66, %dec_label_pc_10003b61 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003b5d ]
  store i32 %storemerge10, i32* %eax.global-to-local, align 4
  %v1_10003b70 = inttoptr i32 %storemerge10 to i32*
  %v2_10003b70 = load i32, i32* %v1_10003b70, align 4
  store i32 %v2_10003b70, i32* %eax.global-to-local, align 4
  %v2_10003b72 = and i32 %v0_10003b77, 1
  %v3_10003b72 = icmp eq i32 %v2_10003b72, 0
  %v1_10003b75 = icmp eq i1 %v3_10003b72, false
  br i1 %v1_10003b75, label %dec_label_pc_10003b9c, label %dec_label_pc_10003b77

dec_label_pc_10003b77:                            ; preds = %dec_label_pc_10003b70
  %v1_10003b77 = or i32 %v0_10003b77, 1
  %v4_10003b77 = trunc i32 %v1_10003b77 to i8
  store i32 %v1_10003b77, i32* @ecx, align 4
  store i8 %v4_10003b77, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003b9c

dec_label_pc_10003b9c:                            ; preds = %dec_label_pc_10003b77, %dec_label_pc_10003b70
  %v12_10003b9c = icmp eq i32 %v2_10003b70, -1
  br i1 %v12_10003b9c, label %dec_label_pc_10003baf, label %dec_label_pc_10003ba0

dec_label_pc_10003ba0:                            ; preds = %dec_label_pc_10003b9c
  %v2_10003ba2 = mul i32 %v2_10003b70, 32
  store i32 %v2_10003ba2, i32* @ecx, align 4
  %v1_10003ba5 = load i32, i32* @edi, align 4
  %v2_10003ba5 = add i32 %v1_10003ba5, 4
  %v3_10003ba5 = inttoptr i32 %v2_10003ba5 to i32*
  %v4_10003ba5 = load i32, i32* %v3_10003ba5, align 4
  %v5_10003ba5 = add i32 %v4_10003ba5, %v2_10003ba2
  br label %dec_label_pc_10003baf

dec_label_pc_10003baf:                            ; preds = %dec_label_pc_10003b9c, %dec_label_pc_10003ba0
  %storemerge9 = phi i32 [ %v5_10003ba5, %dec_label_pc_10003ba0 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003b9c ]
  store i32 %storemerge9, i32* @ecx, align 4
  %v1_10003baf = add i32 %storemerge9, 12
  %v2_10003baf = inttoptr i32 %v1_10003baf to i32*
  %v3_10003baf = load i32, i32* %v2_10003baf, align 4
  %v10_10003baf = icmp eq i32 %v3_10003baf, 0
  %v1_10003bb3 = icmp eq i1 %v10_10003baf, false
  br i1 %v1_10003bb3, label %dec_label_pc_10003be6, label %dec_label_pc_10003bb5

dec_label_pc_10003bb5:                            ; preds = %dec_label_pc_10003baf, %dec_label_pc_10003a51
  %v0_10003bb5 = load i32, i32* @edi, align 4
  %v1_10003bb5 = add i32 %v0_10003bb5, 4
  %v2_10003bb5 = inttoptr i32 %v1_10003bb5 to i32*
  %v3_10003bb5 = load i32, i32* %v2_10003bb5, align 4
  store i32 1, i32* @ecx, align 4
  %v0_10003bbd = load i32, i32* @esi, align 4
  %v2_10003bbd = mul i32 %v0_10003bbd, 32
  %v4_10003bc0 = or i32 %v2_10003bbd, 12
  %v5_10003bc0 = add i32 %v4_10003bc0, %v3_10003bb5
  %v6_10003bc0 = inttoptr i32 %v5_10003bc0 to i32*
  store i32 1, i32* %v6_10003bc0, align 4
  %v0_10003bc4 = load i32, i32* @edi, align 4
  %v1_10003bc4 = add i32 %v0_10003bc4, 4
  %v2_10003bc4 = inttoptr i32 %v1_10003bc4 to i32*
  %v3_10003bc4 = load i32, i32* %v2_10003bc4, align 4
  %v0_10003bc7 = load i32, i32* %eax.global-to-local, align 4
  %v2_10003bc7 = mul i32 %v0_10003bc7, 32
  store i32 %v2_10003bc7, i32* %eax.global-to-local, align 4
  %v0_10003bca = load i32, i32* @ecx, align 4
  %v4_10003bca = or i32 %v2_10003bc7, 12
  %v5_10003bca = add i32 %v4_10003bca, %v3_10003bc4
  %v6_10003bca = inttoptr i32 %v5_10003bca to i32*
  store i32 %v0_10003bca, i32* %v6_10003bca, align 4
  %v0_10003bce = load i32, i32* @edi, align 4
  %v1_10003bce = add i32 %v0_10003bce, 4
  %v2_10003bce = inttoptr i32 %v1_10003bce to i32*
  %v3_10003bce = load i32, i32* %v2_10003bce, align 4
  store i32 %v3_10003bce, i32* @ecx, align 4
  %v0_10003bd1 = load i32, i32* @ebx, align 4
  %v2_10003bd3 = mul i32 %v0_10003bd1, 32
  store i32 %v2_10003bd3, i32* %eax.global-to-local, align 4
  %v3_10003bd6 = or i32 %v2_10003bd3, 12
  %v4_10003bd6 = add i32 %v3_10003bd6, %v3_10003bce
  %v5_10003bd6 = inttoptr i32 %v4_10003bd6 to i32*
  store i32 0, i32* %v5_10003bd6, align 4
  %v0_10003bde = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10003cb1

dec_label_pc_10003be6:                            ; preds = %dec_label_pc_10003baf
  %v1_10003be9 = load i32, i32* @esp, align 4
  %v2_10003be9 = add i32 %v1_10003be9, -4
  %v3_10003be9 = inttoptr i32 %v2_10003be9 to i32*
  store i32 %v0_10003969, i32* %v3_10003be9, align 4
  %v0_10003bea = load i32, i32* @edi, align 4
  store i32 %v0_10003bea, i32* @ecx, align 4
  %v1_10003bec = call i32 @function_10003000(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10003bec, i32* %eax.global-to-local, align 4
  %v4_10003bf1 = trunc i32 %v1_10003bec to i8
  %v5_10003bf1 = icmp eq i8 %v4_10003bf1, 0
  %v0_10003c8e.pre = load i32, i32* @esi, align 4
  br i1 %v5_10003bf1, label %dec_label_pc_10003c8b, label %dec_label_pc_10003bf9

dec_label_pc_10003bf9:                            ; preds = %dec_label_pc_10003be6
  %v1_10003bf9 = load i32, i32* @esp, align 4
  %v2_10003bf9 = add i32 %v1_10003bf9, -4
  %v3_10003bf9 = inttoptr i32 %v2_10003bf9 to i32*
  store i32 %v0_10003c8e.pre, i32* %v3_10003bf9, align 4
  %v0_10003bfa = load i32, i32* @edi, align 4
  store i32 %v0_10003bfa, i32* @ecx, align 4
  %v0_10003bfc = load i32, i32* @esi, align 4
  %v1_10003bff = call i32 @function_10003360(i32 %v0_10003bfc)
  %v0_10003c04 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10003c04 = sext i8 %v0_10003c04 to i32
  store i32 %v1_10003c04, i32* %eax.global-to-local, align 4
  %v2_10003c09 = and i8 %v0_10003c04, 1
  %v3_10003c09 = icmp eq i8 %v2_10003c09, 0
  %v1_10003c0b = icmp eq i1 %v3_10003c09, false
  br i1 %v1_10003c0b, label %dec_label_pc_10003c36, label %dec_label_pc_10003c0d

dec_label_pc_10003c0d:                            ; preds = %dec_label_pc_10003bf9
  %v1_10003c0d = or i32 %v1_10003c04, 1
  %v4_10003c0d = trunc i32 %v1_10003c0d to i8
  store i32 %v1_10003c0d, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @ecx, align 4
  store i8 %v4_10003c0d, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003c39

dec_label_pc_10003c36:                            ; preds = %dec_label_pc_10003bf9
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_10003c39

dec_label_pc_10003c39:                            ; preds = %dec_label_pc_10003c36, %dec_label_pc_10003c0d
  %v0_10003c51 = phi i32 [ %v1_10003c04, %dec_label_pc_10003c36 ], [ %v1_10003c0d, %dec_label_pc_10003c0d ]
  %v0_10003c39 = load i32, i32* @esi, align 4
  %v12_10003c39 = icmp eq i32 %v0_10003c39, -1
  br i1 %v12_10003c39, label %dec_label_pc_10003c4a, label %dec_label_pc_10003c3d

dec_label_pc_10003c3d:                            ; preds = %dec_label_pc_10003c39
  %v2_10003c3d = mul i32 %v0_10003c39, 32
  %v1_10003c40 = load i32, i32* @edi, align 4
  %v2_10003c40 = add i32 %v1_10003c40, 4
  %v3_10003c40 = inttoptr i32 %v2_10003c40 to i32*
  %v4_10003c40 = load i32, i32* %v3_10003c40, align 4
  %v5_10003c40 = add i32 %v4_10003c40, %v2_10003c3d
  br label %dec_label_pc_10003c4a

dec_label_pc_10003c4a:                            ; preds = %dec_label_pc_10003c39, %dec_label_pc_10003c3d
  %storemerge8 = phi i32 [ %v5_10003c40, %dec_label_pc_10003c3d ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003c39 ]
  %v1_10003c4a = add i32 %storemerge8, 8
  %v2_10003c4a = inttoptr i32 %v1_10003c4a to i32*
  %v3_10003c4a = load i32, i32* %v2_10003c4a, align 4
  %v2_10003c4d = and i32 %v0_10003c51, 1
  %v3_10003c4d = icmp eq i32 %v2_10003c4d, 0
  %v1_10003c4f = icmp eq i1 %v3_10003c4d, false
  br i1 %v1_10003c4f, label %dec_label_pc_10003c75, label %dec_label_pc_10003c51

dec_label_pc_10003c51:                            ; preds = %dec_label_pc_10003c4a
  %v1_10003c51 = or i32 %v0_10003c51, 1
  %v4_10003c51 = trunc i32 %v1_10003c51 to i8
  store i32 %v1_10003c51, i32* %eax.global-to-local, align 4
  store i8 %v4_10003c51, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10003c75

dec_label_pc_10003c75:                            ; preds = %dec_label_pc_10003c51, %dec_label_pc_10003c4a
  %v12_10003c75 = icmp eq i32 %v3_10003c4a, -1
  br i1 %v12_10003c75, label %dec_label_pc_10003c88, label %dec_label_pc_10003c79

dec_label_pc_10003c79:                            ; preds = %dec_label_pc_10003c75
  %v2_10003c7b = mul i32 %v3_10003c4a, 32
  store i32 %v2_10003c7b, i32* %eax.global-to-local, align 4
  %v1_10003c7e = load i32, i32* @edi, align 4
  %v2_10003c7e = add i32 %v1_10003c7e, 4
  %v3_10003c7e = inttoptr i32 %v2_10003c7e to i32*
  %v4_10003c7e = load i32, i32* %v3_10003c7e, align 4
  %v5_10003c7e = add i32 %v4_10003c7e, %v2_10003c7b
  br label %dec_label_pc_10003c88

dec_label_pc_10003c88:                            ; preds = %dec_label_pc_10003c75, %dec_label_pc_10003c79
  %storemerge7 = phi i32 [ %v5_10003c7e, %dec_label_pc_10003c79 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10003c75 ]
  store i32 %storemerge7, i32* %eax.global-to-local, align 4
  %v1_10003c88 = add i32 %storemerge7, 8
  %v2_10003c88 = inttoptr i32 %v1_10003c88 to i32*
  %v3_10003c88 = load i32, i32* %v2_10003c88, align 4
  store i32 %v3_10003c88, i32* @ebx, align 4
  br label %dec_label_pc_10003c8b

dec_label_pc_10003c8b:                            ; preds = %dec_label_pc_10003be6, %dec_label_pc_10003c88
  %v0_10003c8e = phi i32 [ %v3_10003c4a, %dec_label_pc_10003c88 ], [ %v0_10003c8e.pre, %dec_label_pc_10003be6 ]
  %stack_var_4.2 = phi i32 [ %v0_10003bfc, %dec_label_pc_10003c88 ], [ %v0_10003969, %dec_label_pc_10003be6 ]
  %v0_10003c8b = load i32, i32* @edi, align 4
  %v1_10003c8b = add i32 %v0_10003c8b, 4
  %v2_10003c8b = inttoptr i32 %v1_10003c8b to i32*
  %v3_10003c8b = load i32, i32* %v2_10003c8b, align 4
  store i32 %v3_10003c8b, i32* %eax.global-to-local, align 4
  %v2_10003c8e = mul i32 %v0_10003c8e, 32
  %v3_10003c91 = or i32 %v2_10003c8e, 12
  %v4_10003c91 = add i32 %v3_10003c8b, %v3_10003c91
  %v5_10003c91 = inttoptr i32 %v4_10003c91 to i32*
  store i32 1, i32* %v5_10003c91, align 4
  %v0_10003c99 = load i32, i32* @edi, align 4
  %v1_10003c99 = add i32 %v0_10003c99, 4
  %v2_10003c99 = inttoptr i32 %v1_10003c99 to i32*
  %v3_10003c99 = load i32, i32* %v2_10003c99, align 4
  %v0_10003c9c = load i32, i32* @ebx, align 4
  %v2_10003c9e = mul i32 %v0_10003c9c, 32
  %v3_10003ca1 = or i32 %v2_10003c9e, 12
  %v4_10003ca1 = add i32 %v3_10003ca1, %v3_10003c99
  %v5_10003ca1 = inttoptr i32 %v4_10003ca1 to i32*
  store i32 0, i32* %v5_10003ca1, align 4
  %v0_10003ca9 = load i32, i32* @ebx, align 4
  %v1_10003ca9 = load i32, i32* @esp, align 4
  %v2_10003ca9 = add i32 %v1_10003ca9, -4
  %v3_10003ca9 = inttoptr i32 %v2_10003ca9 to i32*
  store i32 %v0_10003ca9, i32* %v3_10003ca9, align 4
  %v0_10003caa = load i32, i32* @edi, align 4
  store i32 %v0_10003caa, i32* @ecx, align 4
  %v1_10003cac = call i32 @function_10003160(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10003cac, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003cb1

dec_label_pc_10003cb1:                            ; preds = %dec_label_pc_10003c8b, %dec_label_pc_10003bb5, %dec_label_pc_10003b00
  %stack_var_4.3 = phi i32 [ %stack_var_4.2, %dec_label_pc_10003c8b ], [ %v0_10003bde, %dec_label_pc_10003bb5 ], [ %stack_var_4.1, %dec_label_pc_10003b00 ]
  store i32 %stack_var_4.3, i32* @eax, align 4
  %v1_10003cb4 = load i32, i32* @edi, align 4
  %v2_10003cb4 = add i32 %v1_10003cb4, 16
  %v3_10003cb4 = inttoptr i32 %v2_10003cb4 to i32*
  %v4_10003cb4 = load i32, i32* %v3_10003cb4, align 4
  %v15_10003cb4 = icmp eq i32 %stack_var_4.3, %v4_10003cb4
  %v1_10003cb7 = icmp eq i1 %v15_10003cb4, false
  br i1 %v1_10003cb7, label %dec_label_pc_100038b0, label %dec_label_pc_10003cbd

dec_label_pc_10003cbd:                            ; preds = %dec_label_pc_10003cb1, %dec_label_pc_10003890
  %v0_10003cc236 = phi i32 [ %v0_10003899, %dec_label_pc_10003890 ], [ %v1_10003cb4, %dec_label_pc_10003cb1 ]
  br label %dec_label_pc_10003cc2

dec_label_pc_10003cc2:                            ; preds = %dec_label_pc_10003936, %dec_label_pc_10003cbd
  %v0_10003cc2 = phi i32 [ %v0_10003cc236, %dec_label_pc_10003cbd ], [ %v1_100039a9, %dec_label_pc_10003936 ]
  %v1_10003cc2 = add i32 %v0_10003cc2, 16
  %v2_10003cc2 = inttoptr i32 %v1_10003cc2 to i32*
  %v3_10003cc2 = load i32, i32* %v2_10003cc2, align 4
  store i32 %v3_10003cc2, i32* @ecx, align 4
  %v1_10003cc5 = add i32 %v0_10003cc2, 4
  %v2_10003cc5 = inttoptr i32 %v1_10003cc5 to i32*
  %v3_10003cc5 = load i32, i32* %v2_10003cc5, align 4
  %v0_10003cc8 = load i32, i32* @esp, align 4
  %v1_10003cc8 = inttoptr i32 %v0_10003cc8 to i32*
  %v2_10003cc8 = load i32, i32* %v1_10003cc8, align 4
  store i32 %v2_10003cc8, i32* @edi, align 4
  %v3_10003cc8 = add i32 %v0_10003cc8, 4
  %v2_10003cc9 = mul i32 %v3_10003cc2, 32
  store i32 %v2_10003cc9, i32* @ecx, align 4
  %v1_10003ccc = inttoptr i32 %v3_10003cc8 to i32*
  %v2_10003ccc = load i32, i32* %v1_10003ccc, align 4
  store i32 %v2_10003ccc, i32* @esi, align 4
  %v4_10003ccd = or i32 %v2_10003cc9, 12
  %v5_10003ccd = add i32 %v4_10003ccd, %v3_10003cc5
  %v6_10003ccd = inttoptr i32 %v5_10003ccd to i32*
  store i32 1, i32* %v6_10003ccd, align 4
  %v0_10003cd1 = load i32, i32* @esp, align 4
  %v1_10003cd1 = inttoptr i32 %v0_10003cd1 to i32*
  %v2_10003cd1 = load i32, i32* %v1_10003cd1, align 4
  store i32 %v2_10003cd1, i32* @ebx, align 4
  %v3_10003cd1 = add i32 %v0_10003cd1, 4
  %v1_10003cd2 = inttoptr i32 %v3_10003cd1 to i32*
  %v2_10003cd2 = load i32, i32* %v1_10003cd2, align 4
  store i32 %v2_10003cd2, i32* @ebp, align 4
  %v0_10003cd3 = load i32, i32* @eax, align 4
  ret i32 %v0_10003cd3
}

define i32 @function_10003ce0() local_unnamed_addr {
dec_label_pc_10003ce0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10003ce0 = load i32, i32* @ebp, align 4
  store i32 %v0_10003ce0, i32* %stack_var_-4, align 4
  %v0_10003ce3 = load i32, i32* @ecx, align 4
  %v0_10003ce4 = load i32, i32* @esi, align 4
  store i32 %v0_10003ce4, i32* %stack_var_-12, align 4
  %v4_10003ce4 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v0_10003ce3, i32* %esi.global-to-local, align 4
  %v1_10003ce7 = add i32 %v0_10003ce3, 22
  %v2_10003ce7 = inttoptr i32 %v1_10003ce7 to i16*
  %v3_10003ce7 = load i16, i16* %v2_10003ce7, align 2
  %v4_10003ce7 = zext i16 %v3_10003ce7 to i32
  store i32 %v4_10003ce7, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_10003cf0 = icmp eq i16 %v3_10003ce7, -1
  br i1 %v14_10003cf0, label %dec_label_pc_10003d8a, label %dec_label_pc_10003cf9

dec_label_pc_10003cf9:                            ; preds = %dec_label_pc_10003ce0
  %v1_10003cfb = add i32 %v0_10003ce3, 8
  %v2_10003cfb = inttoptr i32 %v1_10003cfb to i32*
  %v3_10003cfb = load i32, i32* %v2_10003cfb, align 4
  %v15_10003cfb = icmp eq i32 %v3_10003cfb, 0
  %v16_10003cfb = icmp slt i32 %v3_10003cfb, 0
  %v3_10003cff = icmp eq i1 %v16_10003cfb, false
  %v4_10003cff = icmp eq i1 %v15_10003cfb, false
  %v5_10003cff = icmp eq i1 %v3_10003cff, %v4_10003cff
  %v2_10003d05 = select i1 %v5_10003cff, i32 0, i32 65535
  store i32 %v2_10003d05, i32* %edi.global-to-local, align 4
  br i1 %v5_10003cff, label %dec_label_pc_10003d10, label %dec_label_pc_10003d82

dec_label_pc_10003d10:                            ; preds = %dec_label_pc_10003cf9
  br label %dec_label_pc_10003d11

dec_label_pc_10003d11:                            ; preds = %dec_label_pc_10003d73, %dec_label_pc_10003d10
  %stack_var_-8.0 = phi i32 [ %v2_10003d05, %dec_label_pc_10003d10 ], [ %v0_10003d78, %dec_label_pc_10003d73 ]
  %v2_10003d1d = phi i16 [ %v3_10003ce7, %dec_label_pc_10003d10 ], [ %v3_10003d52, %dec_label_pc_10003d73 ]
  %v1_10003d18 = phi i32 [ %v0_10003ce3, %dec_label_pc_10003d10 ], [ %v0_10003d52, %dec_label_pc_10003d73 ]
  %v1_10003d11 = and i32 %stack_var_-8.0, 65535
  %v2_10003d18 = add i32 %v1_10003d18, 8
  %v3_10003d18 = inttoptr i32 %v2_10003d18 to i32*
  %v4_10003d18 = load i32, i32* %v3_10003d18, align 4
  %v5_10003d1b = icmp slt i32 %v1_10003d11, %v4_10003d18
  br i1 %v5_10003d1b, label %dec_label_pc_10003d1d, label %dec_label_pc_10003d52

dec_label_pc_10003d1d:                            ; preds = %dec_label_pc_10003d11
  %v1_10003d1d = trunc i32 %stack_var_-8.0 to i16
  %tmp23 = icmp ugt i16 %v1_10003d1d, %v2_10003d1d
  br i1 %tmp23, label %dec_label_pc_10003d52, label %dec_label_pc_10003d22

dec_label_pc_10003d22:                            ; preds = %dec_label_pc_10003d1d
  %v1_10003d25 = load i32, i32* @esp, align 4
  %v2_10003d25 = add i32 %v1_10003d25, -4
  %v3_10003d25 = inttoptr i32 %v2_10003d25 to i32*
  store i32 %stack_var_-8.0, i32* %v3_10003d25, align 4
  %v0_10003d26 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10003d26, i32* @ecx, align 4
  %v1_10003d28 = call i32 @function_100035c0(i32 %stack_var_-8.0)
  %v1_10003d2d = trunc i32 %v1_10003d28 to i16
  %v2_10003d2d = load i32, i32* %edi.global-to-local, align 4
  %v3_10003d2d = trunc i32 %v2_10003d2d to i16
  %v14_10003d2d = icmp eq i16 %v1_10003d2d, %v3_10003d2d
  %v1_10003d30 = icmp eq i1 %v14_10003d2d, false
  %v2_10003d30 = zext i1 %v1_10003d30 to i32
  %v4_10003d30 = and i32 %v1_10003d28, -256
  %v5_10003d30 = or i32 %v2_10003d30, %v4_10003d30
  store i32 %v5_10003d30, i32* %eax.global-to-local, align 4
  %v5_10003d33 = icmp eq i1 %v1_10003d30, false
  br i1 %v5_10003d33, label %dec_label_pc_10003d52, label %dec_label_pc_10003d37

dec_label_pc_10003d37:                            ; preds = %dec_label_pc_10003d22
  %v0_10003d37 = load i32, i32* %esi.global-to-local, align 4
  %v1_10003d37 = add i32 %v0_10003d37, 4
  %v2_10003d37 = inttoptr i32 %v1_10003d37 to i32*
  %v3_10003d37 = load i32, i32* %v2_10003d37, align 4
  %v1_10003d3a = add i32 %v0_10003d37, 20
  %v2_10003d3a = inttoptr i32 %v1_10003d3a to i16*
  %v3_10003d3a = load i16, i16* %v2_10003d3a, align 2
  %v4_10003d3a = zext i16 %v3_10003d3a to i32
  %v5_10003d3a = load i32, i32* @ecx, align 4
  %v6_10003d3a = and i32 %v5_10003d3a, -65536
  %v7_10003d3a = or i32 %v6_10003d3a, %v4_10003d3a
  store i32 %v7_10003d3a, i32* @ecx, align 4
  %v2_10003d40 = mul nuw nsw i32 %v1_10003d11, 2
  store i32 %v2_10003d40, i32* %eax.global-to-local, align 4
  %v4_10003d42 = mul nuw nsw i32 %v1_10003d11, 16
  %v5_10003d42 = or i32 %v4_10003d42, 2
  %v6_10003d42 = add i32 %v3_10003d37, %v5_10003d42
  %v7_10003d42 = inttoptr i32 %v6_10003d42 to i16*
  store i16 %v3_10003d3a, i16* %v7_10003d42, align 2
  %v0_10003d47 = load i32, i32* %esi.global-to-local, align 4
  %v1_10003d47 = add i32 %v0_10003d47, 4
  %v2_10003d47 = inttoptr i32 %v1_10003d47 to i32*
  %v3_10003d47 = load i32, i32* %v2_10003d47, align 4
  %v0_10003d4a = load i32, i32* %edi.global-to-local, align 4
  %v1_10003d4a = trunc i32 %v0_10003d4a to i16
  %v3_10003d4a = load i32, i32* %eax.global-to-local, align 4
  %v4_10003d4a = mul i32 %v3_10003d4a, 8
  %v5_10003d4a = add i32 %v4_10003d4a, %v3_10003d47
  %v6_10003d4a = inttoptr i32 %v5_10003d4a to i16*
  store i16 %v1_10003d4a, i16* %v6_10003d4a, align 2
  %v0_10003d4e = load i32, i32* %edi.global-to-local, align 4
  %v1_10003d4e = trunc i32 %v0_10003d4e to i16
  %v2_10003d4e = load i32, i32* %esi.global-to-local, align 4
  %v3_10003d4e = add i32 %v2_10003d4e, 20
  %v4_10003d4e = inttoptr i32 %v3_10003d4e to i16*
  store i16 %v1_10003d4e, i16* %v4_10003d4e, align 2
  %v0_10003d56.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10003d52

dec_label_pc_10003d52:                            ; preds = %dec_label_pc_10003d1d, %dec_label_pc_10003d11, %dec_label_pc_10003d37, %dec_label_pc_10003d22
  %v0_10003d56 = phi i32 [ %stack_var_-8.0, %dec_label_pc_10003d1d ], [ %stack_var_-8.0, %dec_label_pc_10003d11 ], [ %v0_10003d56.pre, %dec_label_pc_10003d37 ], [ %v2_10003d2d, %dec_label_pc_10003d22 ]
  %v0_10003d52 = load i32, i32* %esi.global-to-local, align 4
  %v1_10003d52 = add i32 %v0_10003d52, 22
  %v2_10003d52 = inttoptr i32 %v1_10003d52 to i16*
  %v3_10003d52 = load i16, i16* %v2_10003d52, align 2
  %v4_10003d52 = zext i16 %v3_10003d52 to i32
  store i32 %v4_10003d52, i32* @ecx, align 4
  %v1_10003d56 = trunc i32 %v0_10003d56 to i16
  %v14_10003d56 = icmp eq i16 %v1_10003d56, %v3_10003d52
  br i1 %v14_10003d56, label %dec_label_pc_10003d81, label %dec_label_pc_10003d5b

dec_label_pc_10003d5b:                            ; preds = %dec_label_pc_10003d52
  %v1_10003d5e = add nsw i32 %stack_var_-8.0, 1
  %v1_10003d5f = and i32 %v1_10003d5e, 65535
  store i32 %v1_10003d5f, i32* %eax.global-to-local, align 4
  %v1_10003d66 = add nuw nsw i32 %v1_10003d11, 1
  store i32 %v1_10003d66, i32* %edi.global-to-local, align 4
  %v2_10003d69 = add i32 %v0_10003d52, 8
  %v3_10003d69 = inttoptr i32 %v2_10003d69 to i32*
  %v4_10003d69 = load i32, i32* %v3_10003d69, align 4
  %v5_10003d6c = icmp slt i32 %v1_10003d5f, %v4_10003d69
  br i1 %v5_10003d6c, label %dec_label_pc_10003d73, label %dec_label_pc_10003d6e

dec_label_pc_10003d6e:                            ; preds = %dec_label_pc_10003d5b
  store i32 65535, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10003d73

dec_label_pc_10003d73:                            ; preds = %dec_label_pc_10003d6e, %dec_label_pc_10003d5b
  %v0_10003d78 = phi i32 [ 65535, %dec_label_pc_10003d6e ], [ %v1_10003d66, %dec_label_pc_10003d5b ]
  %v1_10003d7c = trunc i32 %v0_10003d78 to i16
  %v14_10003d7c = icmp eq i16 %v1_10003d7c, -1
  %v1_10003d7f = icmp eq i1 %v14_10003d7c, false
  br i1 %v1_10003d7f, label %dec_label_pc_10003d11, label %dec_label_pc_10003d81

dec_label_pc_10003d81:                            ; preds = %dec_label_pc_10003d73, %dec_label_pc_10003d52
  %v0_10003d81 = load i32, i32* @esp, align 4
  %v1_10003d81 = inttoptr i32 %v0_10003d81 to i32*
  %v2_10003d81 = load i32, i32* %v1_10003d81, align 4
  store i32 %v2_10003d81, i32* @ebx, align 4
  br label %dec_label_pc_10003d82

dec_label_pc_10003d82:                            ; preds = %dec_label_pc_10003cf9, %dec_label_pc_10003d81
  %v0_10003d82 = phi i32 [ %v0_10003d52, %dec_label_pc_10003d81 ], [ %v0_10003ce3, %dec_label_pc_10003cf9 ]
  %v1_10003d82 = add i32 %v0_10003d82, 16
  %v2_10003d82 = inttoptr i32 %v1_10003d82 to i32*
  store i32 65535, i32* %v2_10003d82, align 4
  %v0_10003d89 = load i32, i32* @esp, align 4
  %v1_10003d89 = inttoptr i32 %v0_10003d89 to i32*
  %v2_10003d89 = load i32, i32* %v1_10003d89, align 4
  store i32 %v2_10003d89, i32* @edi, align 4
  %v3_10003d89 = add i32 %v0_10003d89, 4
  %v2_10003d8d.pre = load i32, i32* %stack_var_-4, align 4
  %v0_10003d8e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10003d8a

dec_label_pc_10003d8a:                            ; preds = %dec_label_pc_10003d82, %dec_label_pc_10003ce0
  %v0_10003d8e = phi i32 [ %v0_10003d8e.pre, %dec_label_pc_10003d82 ], [ 65535, %dec_label_pc_10003ce0 ]
  %v2_10003d8d = phi i32 [ %v2_10003d8d.pre, %dec_label_pc_10003d82 ], [ %v0_10003ce0, %dec_label_pc_10003ce0 ]
  %v0_10003d8a = phi i32 [ %v3_10003d89, %dec_label_pc_10003d82 ], [ %v4_10003ce4, %dec_label_pc_10003ce0 ]
  %v1_10003d8a = inttoptr i32 %v0_10003d8a to i32*
  %v2_10003d8a = load i32, i32* %v1_10003d8a, align 4
  store i32 %v2_10003d8a, i32* @esi, align 4
  store i32 %v2_10003d8d, i32* @ebp, align 4
  ret i32 %v0_10003d8e
}

define i32 @function_10003d90() local_unnamed_addr {
dec_label_pc_10003d90:
  %v0_10003d90 = load i32, i32* @ecx, align 4
  %v1_10003d90 = add i32 %v0_10003d90, 16
  %v2_10003d90 = inttoptr i32 %v1_10003d90 to i16*
  %v0_10003d95 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10003d95 = sext i8 %v0_10003d95 to i32
  %v0_10003d9b = load i32, i32* @esi, align 4
  %v2_10003e36 = add i32 %v0_10003d90, 4
  %v3_10003e36 = inttoptr i32 %v2_10003e36 to i32*
  br label %dec_label_pc_10003da0

dec_label_pc_10003da0:                            ; preds = %dec_label_pc_10003da0.backedge, %dec_label_pc_10003d90
  %v0_10003e50.in.in = phi i16* [ %storemerge2.in.in, %dec_label_pc_10003da0.backedge ], [ %v2_10003d90, %dec_label_pc_10003d90 ]
  %v0_10003dbf = phi i32 [ %v0_10003da04, %dec_label_pc_10003da0.backedge ], [ %v1_10003d95, %dec_label_pc_10003d90 ]
  %v0_10003e50.in = load i16, i16* %v0_10003e50.in.in, align 2
  %v0_10003e50 = zext i16 %v0_10003e50.in to i32
  %v2_10003da0 = and i32 %v0_10003dbf, 1
  %v3_10003da0 = icmp eq i32 %v2_10003da0, 0
  %v1_10003da3 = icmp eq i1 %v3_10003da0, false
  br i1 %v1_10003da3, label %dec_label_pc_10003dd4, label %dec_label_pc_10003da5

dec_label_pc_10003da5:                            ; preds = %dec_label_pc_10003da0
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10003dbf = or i32 %v0_10003dbf, 1
  %v4_10003dbf = trunc i32 %v1_10003dbf to i8
  store i8 %v4_10003dbf, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10003dd4

dec_label_pc_10003dd4:                            ; preds = %dec_label_pc_10003da5, %dec_label_pc_10003da0
  %v0_10003e14 = phi i32 [ %v1_10003dbf, %dec_label_pc_10003da5 ], [ %v0_10003dbf, %dec_label_pc_10003da0 ]
  %v14_10003dd9 = icmp eq i16 %v0_10003e50.in, -1
  br i1 %v14_10003dd9, label %dec_label_pc_10003dee, label %dec_label_pc_10003dde

dec_label_pc_10003dde:                            ; preds = %dec_label_pc_10003dd4
  %v1_10003dde = mul nuw nsw i32 %v0_10003e50, 16
  %v4_10003de4 = load i32, i32* %v3_10003e36, align 4
  %v5_10003de4 = add i32 %v4_10003de4, %v1_10003dde
  br label %dec_label_pc_10003dee

dec_label_pc_10003dee:                            ; preds = %dec_label_pc_10003dd4, %dec_label_pc_10003dde
  %storemerge = phi i32 [ %v5_10003de4, %dec_label_pc_10003dde ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10003dd4 ]
  %v1_10003df3 = inttoptr i32 %storemerge to i16*
  %v2_10003df3 = load i16, i16* %v1_10003df3, align 2
  %v15_10003df3 = icmp eq i16 %v2_10003df3, -1
  br i1 %v15_10003df3, label %dec_label_pc_10003e4e, label %dec_label_pc_10003df8

dec_label_pc_10003df8:                            ; preds = %dec_label_pc_10003dee
  %v2_10003df8 = and i32 %v0_10003e14, 1
  %v3_10003df8 = icmp eq i32 %v2_10003df8, 0
  %v1_10003dfb = icmp eq i1 %v3_10003df8, false
  br i1 %v1_10003dfb, label %dec_label_pc_10003e29, label %dec_label_pc_10003dfd

dec_label_pc_10003dfd:                            ; preds = %dec_label_pc_10003df8
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10003e14 = or i32 %v0_10003e14, 1
  %v4_10003e14 = trunc i32 %v1_10003e14 to i8
  store i8 %v4_10003e14, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10003e29

dec_label_pc_10003e29:                            ; preds = %dec_label_pc_10003dfd, %dec_label_pc_10003df8
  %v0_10003da04 = phi i32 [ %v1_10003e14, %dec_label_pc_10003dfd ], [ %v0_10003e14, %dec_label_pc_10003df8 ]
  br i1 %v14_10003dd9, label %dec_label_pc_10003e41, label %dec_label_pc_10003e30

dec_label_pc_10003e30:                            ; preds = %dec_label_pc_10003e29
  %v1_10003e30 = mul nuw nsw i32 %v0_10003e50, 16
  %v4_10003e36 = load i32, i32* %v3_10003e36, align 4
  %v5_10003e36 = add i32 %v4_10003e36, %v1_10003e30
  %v1_10003e39 = inttoptr i32 %v5_10003e36 to i16*
  br label %dec_label_pc_10003da0.backedge

dec_label_pc_10003da0.backedge:                   ; preds = %dec_label_pc_10003e30, %dec_label_pc_10003e41
  %storemerge2.in.in = phi i16* [ %v1_10003e39, %dec_label_pc_10003e30 ], [ bitcast (i16** @global_var_1002b630.172 to i16*), %dec_label_pc_10003e41 ]
  br label %dec_label_pc_10003da0

dec_label_pc_10003e41:                            ; preds = %dec_label_pc_10003e29
  br label %dec_label_pc_10003da0.backedge

dec_label_pc_10003e4e:                            ; preds = %dec_label_pc_10003dee
  store i32 %v0_10003d9b, i32* @esi, align 4
  ret i32 %v0_10003e50
}

define i32 @function_10003e60(i32 %arg1) local_unnamed_addr {
dec_label_pc_10003e60:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v0_10003e67 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v0_10003e69 = load i32, i32* @ecx, align 4
  store i32 %v0_10003e69, i32* %edi.global-to-local, align 4
  %v1_10003e6b = call i32 @function_10003620(i32 %arg1)
  %v1_10003e75 = trunc i32 %v1_10003e6b to i16
  %v14_10003e75 = icmp eq i16 %v1_10003e75, -1
  %v0_10003e78 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10003e78, i32* %stack_var_-20, align 4
  store i32 %v0_10003e69, i32* @ecx, align 4
  br i1 %v14_10003e75, label %dec_label_pc_10003f42, label %dec_label_pc_10003e81

dec_label_pc_10003e81:                            ; preds = %dec_label_pc_10003e60
  %v1_10003e81 = call i32 @function_10003620(i32 %v0_10003e78)
  %v0_10003e86 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10003e86 = sext i8 %v0_10003e86 to i32
  %v1_10003e8c = and i32 %v1_10003e81, 65535
  br label %dec_label_pc_10003e90

dec_label_pc_10003e90:                            ; preds = %dec_label_pc_10003e90.backedge, %dec_label_pc_10003e81
  %v0_10003eaf = phi i32 [ %v0_10003e9013, %dec_label_pc_10003e90.backedge ], [ %v1_10003e86, %dec_label_pc_10003e81 ]
  %v0_10003f24 = phi i32 [ %storemerge10, %dec_label_pc_10003e90.backedge ], [ %v1_10003e8c, %dec_label_pc_10003e81 ]
  %v2_10003e90 = and i32 %v0_10003eaf, 1
  %v3_10003e90 = icmp eq i32 %v2_10003e90, 0
  %v1_10003e93 = icmp eq i1 %v3_10003e90, false
  br i1 %v1_10003e93, label %dec_label_pc_10003ec4, label %dec_label_pc_10003e95

dec_label_pc_10003e95:                            ; preds = %dec_label_pc_10003e90
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10003eaf = or i32 %v0_10003eaf, 1
  %v4_10003eaf = trunc i32 %v1_10003eaf to i8
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10003eaf, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10003ec4

dec_label_pc_10003ec4:                            ; preds = %dec_label_pc_10003e95, %dec_label_pc_10003e90
  %v0_10003f08 = phi i32 [ %v1_10003eaf, %dec_label_pc_10003e95 ], [ %v0_10003eaf, %dec_label_pc_10003e90 ]
  store i32 65535, i32* @ecx, align 4
  %v14_10003ec9 = icmp eq i32 %v0_10003f24, 65535
  br i1 %v14_10003ec9, label %dec_label_pc_10003ede, label %dec_label_pc_10003ece

dec_label_pc_10003ece:                            ; preds = %dec_label_pc_10003ec4
  %v1_10003ece = mul nuw nsw i32 %v0_10003f24, 16
  store i32 %v1_10003ece, i32* @ecx, align 4
  %v1_10003ed4 = load i32, i32* %edi.global-to-local, align 4
  %v2_10003ed4 = add i32 %v1_10003ed4, 4
  %v3_10003ed4 = inttoptr i32 %v2_10003ed4 to i32*
  %v4_10003ed4 = load i32, i32* %v3_10003ed4, align 4
  %v5_10003ed4 = add i32 %v4_10003ed4, %v1_10003ece
  br label %dec_label_pc_10003ede

dec_label_pc_10003ede:                            ; preds = %dec_label_pc_10003ec4, %dec_label_pc_10003ece
  %storemerge = phi i32 [ %v5_10003ed4, %dec_label_pc_10003ece ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10003ec4 ]
  store i32 %storemerge, i32* @ecx, align 4
  store i32 65535, i32* %esi.global-to-local, align 4
  %v1_10003ee3 = inttoptr i32 %storemerge to i16*
  %v2_10003ee3 = load i16, i16* %v1_10003ee3, align 2
  %v15_10003ee3 = icmp eq i16 %v2_10003ee3, -1
  br i1 %v15_10003ee3, label %dec_label_pc_10004040.loopexit, label %dec_label_pc_10003eec

dec_label_pc_10003eec:                            ; preds = %dec_label_pc_10003ede
  %v2_10003eec = and i32 %v0_10003f08, 1
  %v3_10003eec = icmp eq i32 %v2_10003eec, 0
  %v1_10003eef = icmp eq i1 %v3_10003eec, false
  br i1 %v1_10003eef, label %dec_label_pc_10003f1d, label %dec_label_pc_10003ef1

dec_label_pc_10003ef1:                            ; preds = %dec_label_pc_10003eec
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10003f08 = or i32 %v0_10003f08, 1
  %v4_10003f08 = trunc i32 %v1_10003f08 to i8
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10003f08, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10003f1d

dec_label_pc_10003f1d:                            ; preds = %dec_label_pc_10003ef1, %dec_label_pc_10003eec
  %v0_10003e9013 = phi i32 [ %v1_10003f08, %dec_label_pc_10003ef1 ], [ %v0_10003f08, %dec_label_pc_10003eec ]
  store i32 65535, i32* @ecx, align 4
  br i1 %v14_10003ec9, label %dec_label_pc_10003f35, label %dec_label_pc_10003f24

dec_label_pc_10003f24:                            ; preds = %dec_label_pc_10003f1d
  %v1_10003f24 = mul nuw nsw i32 %v0_10003f24, 16
  %v1_10003f2a = load i32, i32* %edi.global-to-local, align 4
  %v2_10003f2a = add i32 %v1_10003f2a, 4
  %v3_10003f2a = inttoptr i32 %v2_10003f2a to i32*
  %v4_10003f2a = load i32, i32* %v3_10003f2a, align 4
  %v5_10003f2a = add i32 %v4_10003f2a, %v1_10003f24
  %v1_10003f2d = inttoptr i32 %v5_10003f2a to i16*
  br label %dec_label_pc_10003e90.backedge

dec_label_pc_10003e90.backedge:                   ; preds = %dec_label_pc_10003f24, %dec_label_pc_10003f35
  %storemerge10.in.in = phi i16* [ %v1_10003f2d, %dec_label_pc_10003f24 ], [ bitcast (i16** @global_var_1002b630.172 to i16*), %dec_label_pc_10003f35 ]
  %storemerge10.in = load i16, i16* %storemerge10.in.in, align 2
  %storemerge10 = zext i16 %storemerge10.in to i32
  br label %dec_label_pc_10003e90

dec_label_pc_10003f35:                            ; preds = %dec_label_pc_10003f1d
  br label %dec_label_pc_10003e90.backedge

dec_label_pc_10003f42:                            ; preds = %dec_label_pc_10003e60
  %v1_10003f42 = call i32 @function_10003560(i32 %v0_10003e78)
  %v0_10003f47 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10003f47 = sext i8 %v0_10003f47 to i32
  %v1_10003f4d = and i32 %v1_10003f42, 65535
  %v0_10003f50 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10003f51

dec_label_pc_10003f51:                            ; preds = %dec_label_pc_1000402d, %dec_label_pc_10003f42
  %v0_1000402d = phi i32 [ %v4_10004036, %dec_label_pc_1000402d ], [ %v1_10003f4d, %dec_label_pc_10003f42 ]
  %v0_10003f70 = phi i32 [ %v0_10003f5116, %dec_label_pc_1000402d ], [ %v1_10003f47, %dec_label_pc_10003f42 ]
  %v2_10003f51 = and i32 %v0_10003f70, 1
  %v3_10003f51 = icmp eq i32 %v2_10003f51, 0
  %v1_10003f54 = icmp eq i1 %v3_10003f51, false
  br i1 %v1_10003f54, label %dec_label_pc_10003f85, label %dec_label_pc_10003f56

dec_label_pc_10003f56:                            ; preds = %dec_label_pc_10003f51
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10003f70 = or i32 %v0_10003f70, 1
  %v4_10003f70 = trunc i32 %v1_10003f70 to i8
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10003f70, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10003f85

dec_label_pc_10003f85:                            ; preds = %dec_label_pc_10003f56, %dec_label_pc_10003f51
  %v0_10003fc2 = phi i32 [ %v1_10003f70, %dec_label_pc_10003f56 ], [ %v0_10003f70, %dec_label_pc_10003f51 ]
  store i32 65535, i32* @ecx, align 4
  %v0_10003f8a = load i32, i32* %esi.global-to-local, align 4
  %v1_10003f8a = trunc i32 %v0_10003f8a to i16
  %v14_10003f8a = icmp eq i16 %v1_10003f8a, -1
  br i1 %v14_10003f8a, label %dec_label_pc_10003f9f, label %dec_label_pc_10003f8f

dec_label_pc_10003f8f:                            ; preds = %dec_label_pc_10003f85
  %v1_10003f8f = mul i32 %v0_10003f8a, 16
  %v2_10003f92 = and i32 %v1_10003f8f, 1048560
  store i32 %v2_10003f92, i32* @ecx, align 4
  %v1_10003f95 = load i32, i32* %edi.global-to-local, align 4
  %v2_10003f95 = add i32 %v1_10003f95, 4
  %v3_10003f95 = inttoptr i32 %v2_10003f95 to i32*
  %v4_10003f95 = load i32, i32* %v3_10003f95, align 4
  %v5_10003f95 = add i32 %v4_10003f95, %v2_10003f92
  br label %dec_label_pc_10003f9f

dec_label_pc_10003f9f:                            ; preds = %dec_label_pc_10003f85, %dec_label_pc_10003f8f
  %storemerge4 = phi i32 [ %v5_10003f95, %dec_label_pc_10003f8f ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10003f85 ]
  store i32 %storemerge4, i32* @ecx, align 4
  %v1_10003f9f = add i32 %storemerge4, 4
  %v2_10003f9f = inttoptr i32 %v1_10003f9f to i16*
  %v3_10003f9f = load i16, i16* %v2_10003f9f, align 2
  %v4_10003f9f = zext i16 %v3_10003f9f to i32
  store i32 %v4_10003f9f, i32* @ecx, align 4
  %v2_10003fa3 = and i32 %v0_10003fc2, 1
  %v3_10003fa3 = icmp eq i32 %v2_10003fa3, 0
  %v1_10003fa6 = icmp eq i1 %v3_10003fa3, false
  br i1 %v1_10003fa6, label %dec_label_pc_10003fd7, label %dec_label_pc_10003fa8

dec_label_pc_10003fa8:                            ; preds = %dec_label_pc_10003f9f
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10003fc2 = or i32 %v0_10003fc2, 1
  %v4_10003fc2 = trunc i32 %v1_10003fc2 to i8
  store i8 %v4_10003fc2, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10003fd7

dec_label_pc_10003fd7:                            ; preds = %dec_label_pc_10003fa8, %dec_label_pc_10003f9f
  %v0_10004018 = phi i32 [ %v1_10003fc2, %dec_label_pc_10003fa8 ], [ %v0_10003fc2, %dec_label_pc_10003f9f ]
  %v14_10003fdc = icmp eq i16 %v3_10003f9f, -1
  br i1 %v14_10003fdc, label %dec_label_pc_10003fee, label %dec_label_pc_10003fe1

dec_label_pc_10003fe1:                            ; preds = %dec_label_pc_10003fd7
  %v2_10003fe1 = mul nuw nsw i32 %v4_10003f9f, 16
  store i32 %v2_10003fe1, i32* @ecx, align 4
  %v1_10003fe4 = load i32, i32* %edi.global-to-local, align 4
  %v2_10003fe4 = add i32 %v1_10003fe4, 4
  %v3_10003fe4 = inttoptr i32 %v2_10003fe4 to i32*
  %v4_10003fe4 = load i32, i32* %v3_10003fe4, align 4
  %v5_10003fe4 = add i32 %v4_10003fe4, %v2_10003fe1
  br label %dec_label_pc_10003fee

dec_label_pc_10003fee:                            ; preds = %dec_label_pc_10003fd7, %dec_label_pc_10003fe1
  %storemerge3 = phi i32 [ %v5_10003fe4, %dec_label_pc_10003fe1 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10003fd7 ]
  store i32 %storemerge3, i32* @ecx, align 4
  %v1_10003fee = add i32 %storemerge3, 2
  %v2_10003fee = inttoptr i32 %v1_10003fee to i16*
  %v3_10003fee = load i16, i16* %v2_10003fee, align 2
  %v16_10003fee = icmp eq i16 %v3_10003fee, %v1_10003f8a
  %v1_10003ff2 = icmp eq i1 %v16_10003fee, false
  br i1 %v1_10003ff2, label %dec_label_pc_1000403f, label %dec_label_pc_10003ff4

dec_label_pc_10003ff4:                            ; preds = %dec_label_pc_10003fee
  store i32 65535, i32* @ecx, align 4
  store i32 %v0_1000402d, i32* %esi.global-to-local, align 4
  %v14_10003ff9 = icmp eq i32 %v0_1000402d, 65535
  br i1 %v14_10003ff9, label %dec_label_pc_1000403f, label %dec_label_pc_10003ffe

dec_label_pc_10003ffe:                            ; preds = %dec_label_pc_10003ff4
  %v2_10003ffe = and i32 %v0_10004018, 1
  %v3_10003ffe = icmp eq i32 %v2_10003ffe, 0
  %v1_10004001 = icmp eq i1 %v3_10003ffe, false
  br i1 %v1_10004001, label %dec_label_pc_1000402d, label %dec_label_pc_10004003

dec_label_pc_10004003:                            ; preds = %dec_label_pc_10003ffe
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10004018 = or i32 %v0_10004018, 1
  %v4_10004018 = trunc i32 %v1_10004018 to i8
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10004018, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_1000402d

dec_label_pc_1000402d:                            ; preds = %dec_label_pc_10004003, %dec_label_pc_10003ffe
  %v0_10003f5116 = phi i32 [ %v1_10004018, %dec_label_pc_10004003 ], [ %v0_10004018, %dec_label_pc_10003ffe ]
  %v1_1000402d = mul nuw nsw i32 %v0_1000402d, 16
  %v1_10004033 = load i32, i32* %edi.global-to-local, align 4
  %v2_10004033 = add i32 %v1_10004033, 4
  %v3_10004033 = inttoptr i32 %v2_10004033 to i32*
  %v4_10004033 = load i32, i32* %v3_10004033, align 4
  %v5_10004033 = add i32 %v4_10004033, %v1_1000402d
  %v1_10004036 = add i32 %v5_10004033, 4
  %v2_10004036 = inttoptr i32 %v1_10004036 to i16*
  %v3_10004036 = load i16, i16* %v2_10004036, align 2
  %v4_10004036 = zext i16 %v3_10004036 to i32
  br label %dec_label_pc_10003f51

dec_label_pc_1000403f:                            ; preds = %dec_label_pc_10003ff4, %dec_label_pc_10003fee
  store i32 %v0_10003f50, i32* @ebx, align 4
  br label %dec_label_pc_10004040

dec_label_pc_10004040.loopexit:                   ; preds = %dec_label_pc_10003ede
  br label %dec_label_pc_10004040

dec_label_pc_10004040:                            ; preds = %dec_label_pc_10004040.loopexit, %dec_label_pc_1000403f
  %v0_10004043 = phi i32 [ %v0_10003f24, %dec_label_pc_10004040.loopexit ], [ %v0_1000402d, %dec_label_pc_1000403f ]
  %v2_10004040 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10004040, i32* @edi, align 4
  %v2_10004041 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10004041, i32* @esi, align 4
  store i32 %v0_10003e67, i32* @ebp, align 4
  ret i32 %v0_10004043
}

define i32 @function_10004050(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10004050:
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v0_10004056 = load i32, i32* @esi, align 4
  store i32 %v0_10004056, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v2_1000405c = mul i32 %arg1, 32
  %v1_1000405f = load i32, i32* @ecx, align 4
  %v2_1000405f = add i32 %v1_1000405f, 4
  %v3_1000405f = inttoptr i32 %v2_1000405f to i32*
  %v4_1000405f = load i32, i32* %v3_1000405f, align 4
  %v5_1000405f = add i32 %v4_1000405f, %v2_1000405c
  store i32 %v5_1000405f, i32* @eax, align 4
  %v2_10004062 = add i32 %v5_1000405f, 8
  %v3_10004062 = inttoptr i32 %v2_10004062 to i32*
  store i32 %arg2, i32* %v3_10004062, align 4
  %v0_10004065 = load i32, i32* @eax, align 4
  %v1_10004065 = add i32 %v0_10004065, 4
  %v2_10004065 = inttoptr i32 %v1_10004065 to i32*
  store i32 -1, i32* %v2_10004065, align 4
  %v0_1000406c = load i32, i32* @eax, align 4
  %v1_1000406c = inttoptr i32 %v0_1000406c to i32*
  store i32 -1, i32* %v1_1000406c, align 4
  %v0_10004072 = load i32, i32* @eax, align 4
  %v1_10004072 = add i32 %v0_10004072, 12
  %v2_10004072 = inttoptr i32 %v1_10004072 to i32*
  store i32 0, i32* %v2_10004072, align 4
  %v0_10004079 = load i32, i32* %edx.global-to-local, align 4
  %v10_10004079 = icmp eq i32 %v0_10004079, -1
  br i1 %v10_10004079, label %dec_label_pc_100040a7, label %dec_label_pc_1000407e

dec_label_pc_1000407e:                            ; preds = %dec_label_pc_10004050
  %v0_1000407e = load i32, i32* @ecx, align 4
  %v1_1000407e = add i32 %v0_1000407e, 4
  %v2_1000407e = inttoptr i32 %v1_1000407e to i32*
  %v3_1000407e = load i32, i32* %v2_1000407e, align 4
  store i32 %v3_1000407e, i32* @eax, align 4
  %v2_10004081 = mul i32 %v0_10004079, 32
  store i32 %v2_10004081, i32* %edx.global-to-local, align 4
  %v4_10004084 = trunc i32 %arg3 to i8
  %v11_10004084 = icmp eq i8 %v4_10004084, 0
  %v0_10004098 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10004098, i32* %stack_var_-12, align 4
  br i1 %v11_10004084, label %dec_label_pc_10004098, label %dec_label_pc_1000408a

dec_label_pc_1000408a:                            ; preds = %dec_label_pc_1000407e
  %v4_1000408b = add i32 %v3_1000407e, %v2_10004081
  %v5_1000408b = inttoptr i32 %v4_1000408b to i32*
  store i32 %v0_10004098, i32* %v5_1000408b, align 4
  %v0_1000408e = load i32, i32* %stack_var_-12, align 4
  %v1_1000408e = call i32 @function_10003890(i32 %v0_1000408e)
  store i32 %v0_1000408e, i32* @esi, align 4
  %v2_10004094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10004094, i32* @ebp, align 4
  ret i32 %v1_1000408e

dec_label_pc_10004098:                            ; preds = %dec_label_pc_1000407e
  %v4_10004099 = or i32 %v2_10004081, 4
  %v5_10004099 = add i32 %v3_1000407e, %v4_10004099
  %v6_10004099 = inttoptr i32 %v5_10004099 to i32*
  store i32 %v0_10004098, i32* %v6_10004099, align 4
  %v0_1000409d = load i32, i32* %stack_var_-12, align 4
  %v1_1000409d = call i32 @function_10003890(i32 %v0_1000409d)
  store i32 %v0_1000409d, i32* @esi, align 4
  %v2_100040a3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_100040a3, i32* @ebp, align 4
  ret i32 %v1_1000409d

dec_label_pc_100040a7:                            ; preds = %dec_label_pc_10004050
  %v0_100040a7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100040a7, i32* %stack_var_-12, align 4
  %v1_100040a8 = load i32, i32* @ecx, align 4
  %v2_100040a8 = add i32 %v1_100040a8, 16
  %v3_100040a8 = inttoptr i32 %v2_100040a8 to i32*
  store i32 %v0_100040a7, i32* %v3_100040a8, align 4
  %v0_100040ab = load i32, i32* %stack_var_-12, align 4
  %v1_100040ab = call i32 @function_10003890(i32 %v0_100040ab)
  store i32 %v0_100040ab, i32* @esi, align 4
  %v2_100040b1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_100040b1, i32* @ebp, align 4
  ret i32 %v1_100040ab
}

define i32 @function_100040c0() local_unnamed_addr {
dec_label_pc_100040c0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_100040c0 = load i8, i8* @global_var_1002b66c.176, align 1
  %v1_100040c0 = and i8 %v0_100040c0, 1
  %v2_100040c0 = icmp eq i8 %v1_100040c0, 0
  %v1_100040c7 = icmp eq i1 %v2_100040c0, false
  br i1 %v1_100040c7, label %dec_label_pc_100040ed, label %dec_label_pc_100040c9

dec_label_pc_100040c9:                            ; preds = %dec_label_pc_100040c0
  %v2_100040c9 = or i8 %v0_100040c0, 1
  store i8 %v2_100040c9, i8* @global_var_1002b66c.176, align 1
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v3_100040db = call i32 @function_1000c7c0(i32 0, i32 0, i32 1)
  store i32 %v3_100040db, i32* %eax.global-to-local, align 4
  %v3_100040e5 = call i32 @_atexit(void ()* inttoptr (i32 268572016 to void ()*))
  store i32 %v3_100040e5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100040ed

dec_label_pc_100040ed:                            ; preds = %dec_label_pc_100040c0, %dec_label_pc_100040c9
  store i32 0, i32* @eax, align 4
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  store i32 0, i32* @global_var_1002b648.178, align 4
  store i32 0, i32* @global_var_1002b64c.179, align 4
  store i8 0, i8* bitcast (i32* @global_var_1002b650.180 to i8*), align 4
  store i32 0, i32* @global_var_1002b65c.181, align 4
  store i32 -1, i32* @global_var_1002b658.182, align 4
  %v1_10004115 = call i32 @function_1000c0e0(i32 0)
  store i32 %v1_10004115, i32* %eax.global-to-local, align 4
  %v0_1000411a = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_1000411a, i32* @ebx, align 4
  store i32 1, i32* @edi, align 4
  %v0_10004125 = call i32 @CommandLine()
  store i32 %v0_10004125, i32* %eax.global-to-local, align 4
  %v1_10004127 = inttoptr i32 %v0_10004125 to i32*
  %v2_10004127 = load i32, i32* %v1_10004127, align 4
  store i32 %v2_10004127, i32* %edx.global-to-local, align 4
  store i32 %v0_10004125, i32* @ecx, align 4
  %v1_1000412b = add i32 %v2_10004127, 36
  %v2_1000412b = inttoptr i32 %v1_1000412b to i32*
  %v3_1000412b = load i32, i32* %v2_1000412b, align 4
  store i32 %v3_1000412b, i32* @eax, align 4
  %v1_10004130 = load i32, i32* @edi, align 4
  %v7_10004132 = icmp sgt i32 %v3_1000412b, %v1_10004130
  br i1 %v7_10004132, label %dec_label_pc_10004138, label %dec_label_pc_100040ed.dec_label_pc_100041e5_crit_edge

dec_label_pc_100040ed.dec_label_pc_100041e5_crit_edge: ; preds = %dec_label_pc_100040ed
  %v0_100041ec.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100041e5

dec_label_pc_10004138:                            ; preds = %dec_label_pc_100040ed
  br label %dec_label_pc_10004140

dec_label_pc_10004140:                            ; preds = %dec_label_pc_100041d0, %dec_label_pc_10004138
  %v0_10004140 = call i32 @CommandLine()
  store i32 %v0_10004140, i32* %eax.global-to-local, align 4
  %v1_10004142 = inttoptr i32 %v0_10004140 to i32*
  %v2_10004142 = load i32, i32* %v1_10004142, align 4
  store i32 %v2_10004142, i32* %edx.global-to-local, align 4
  store i32 %v0_10004140, i32* @ecx, align 4
  %v1_10004146 = add i32 %v2_10004142, 44
  %v2_10004146 = inttoptr i32 %v1_10004146 to i32*
  %v3_10004146 = load i32, i32* %v2_10004146, align 4
  store i32 %v3_10004146, i32* %eax.global-to-local, align 4
  %v0_10004149 = load i32, i32* @edi, align 4
  %v1_10004149 = load i32, i32* @esp, align 4
  %v2_10004149 = add i32 %v1_10004149, -4
  %v3_10004149 = inttoptr i32 %v2_10004149 to i32*
  store i32 %v0_10004149, i32* %v3_10004149, align 4
  %v0_1000414c = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000414c, i32* @esi, align 4
  %v2_1000414e = icmp eq i32 %v0_1000414c, 0
  br i1 %v2_1000414e, label %dec_label_pc_100041d0, label %dec_label_pc_10004152

dec_label_pc_10004152:                            ; preds = %dec_label_pc_10004140
  %v1_1000414c = inttoptr i32 %v0_1000414c to i8*
  %v3_10004152 = load i8, i8* %v1_1000414c, align 1
  %v4_10004152 = zext i8 %v3_10004152 to i32
  %v6_10004152 = and i32 %v0_1000414c, -256
  %v7_10004152 = or i32 %v4_10004152, %v6_10004152
  store i32 %v7_10004152, i32* %eax.global-to-local, align 4
  %v11_10004154 = icmp eq i8 %v3_10004152, 45
  %v1_10004156 = icmp eq i1 %v11_10004154, false
  br i1 %v1_10004156, label %dec_label_pc_1000416d, label %dec_label_pc_10004158

dec_label_pc_10004158:                            ; preds = %dec_label_pc_10004152
  %v0_10004158 = call i32 @CommandLine()
  store i32 %v0_10004158, i32* %eax.global-to-local, align 4
  %v1_1000415a = inttoptr i32 %v0_10004158 to i32*
  %v2_1000415a = load i32, i32* %v1_1000415a, align 4
  store i32 %v2_1000415a, i32* %edx.global-to-local, align 4
  %v0_1000415c = load i32, i32* @esp, align 4
  %v1_1000415c = add i32 %v0_1000415c, -4
  %v2_1000415c = inttoptr i32 %v1_1000415c to i32*
  store i32 0, i32* %v2_1000415c, align 4
  %v0_1000415e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000415e, i32* @ecx, align 4
  %v0_10004160 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004160 = add i32 %v0_10004160, 32
  %v2_10004160 = inttoptr i32 %v1_10004160 to i32*
  %v3_10004160 = load i32, i32* %v2_10004160, align 4
  store i32 %v3_10004160, i32* %eax.global-to-local, align 4
  %v3_10004163 = add i32 %v0_1000415c, -8
  %v4_10004163 = inttoptr i32 %v3_10004163 to i32*
  store i32 %v0_1000414c, i32* %v4_10004163, align 4
  %v1_10004166 = icmp eq i32 %v3_10004160, 0
  br i1 %v1_10004166, label %dec_label_pc_100041d0, label %dec_label_pc_1000416a

dec_label_pc_1000416a:                            ; preds = %dec_label_pc_10004158
  %v0_1000416a = load i32, i32* @edi, align 4
  %v1_1000416a = add i32 %v0_1000416a, 1
  store i32 %v1_1000416a, i32* @edi, align 4
  br label %dec_label_pc_100041d0

dec_label_pc_1000416d:                            ; preds = %dec_label_pc_10004152
  %v11_1000416d = icmp eq i8 %v3_10004152, 43
  %v1_1000416f = icmp eq i1 %v11_1000416d, false
  %v0_100041a4 = call i32 @CommandLine()
  store i32 %v0_100041a4, i32* %eax.global-to-local, align 4
  %v1_100041a6 = inttoptr i32 %v0_100041a4 to i32*
  %v2_100041a6 = load i32, i32* %v1_100041a6, align 4
  store i32 %v2_100041a6, i32* @edx, align 4
  br i1 %v1_1000416f, label %dec_label_pc_100041a4, label %dec_label_pc_10004171

dec_label_pc_10004171:                            ; preds = %dec_label_pc_1000416d
  %v0_10004175 = load i32, i32* @esp, align 4
  %v1_10004175 = add i32 %v0_10004175, -4
  %v2_10004175 = inttoptr i32 %v1_10004175 to i32*
  store i32 0, i32* %v2_10004175, align 4
  %v0_10004177 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004177, i32* @ecx, align 4
  %v0_10004179 = load i32, i32* @edx, align 4
  %v1_10004179 = add i32 %v0_10004179, 32
  %v2_10004179 = inttoptr i32 %v1_10004179 to i32*
  %v3_10004179 = load i32, i32* %v2_10004179, align 4
  store i32 %v3_10004179, i32* @eax, align 4
  %v3_1000417c = add i32 %v0_10004175, -8
  %v4_1000417c = inttoptr i32 %v3_1000417c to i32*
  store i32 %v0_1000414c, i32* %v4_1000417c, align 4
  %v2_1000417f = add i32 %v0_1000414c, 1
  store i32 %v2_1000417f, i32* @esi, align 4
  %v1_10004180 = icmp eq i32 %v3_10004179, 0
  %v2_100041a1 = add i32 %v0_10004175, -12
  %v3_100041a1 = inttoptr i32 %v2_100041a1 to i32*
  br i1 %v1_10004180, label %dec_label_pc_100041a1, label %dec_label_pc_10004184

dec_label_pc_10004184:                            ; preds = %dec_label_pc_10004171
  store i32 %v3_10004179, i32* %v3_100041a1, align 4
  %v0_10004185 = load i32, i32* @esi, align 4
  %v2_10004185 = add i32 %v0_10004175, -16
  %v3_10004185 = inttoptr i32 %v2_10004185 to i32*
  store i32 %v0_10004185, i32* %v3_10004185, align 4
  %v1_10004186 = add i32 %v0_10004175, -20
  %v2_10004186 = inttoptr i32 %v1_10004186 to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_10022c34.183 to i32), i32* %v2_10004186, align 4
  %v1_1000418b = call i32 @function_100029e0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000418b, i32* @eax, align 4
  %v0_10004190 = load i32, i32* @esp, align 4
  %v2_10004193 = add i32 %v0_10004190, 8
  %v3_10004193 = inttoptr i32 %v2_10004193 to i32*
  store i32 %v1_1000418b, i32* %v3_10004193, align 4
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v1_10004199 = call i32 @function_1000cf90(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10004199, i32* %eax.global-to-local, align 4
  %v0_1000419e = load i32, i32* @edi, align 4
  %v1_1000419e = add i32 %v0_1000419e, 1
  store i32 %v1_1000419e, i32* @edi, align 4
  br label %dec_label_pc_100041d0

dec_label_pc_100041a1:                            ; preds = %dec_label_pc_10004171
  store i32 %v2_1000417f, i32* %v3_100041a1, align 4
  br label %dec_label_pc_100041ba

dec_label_pc_100041a4:                            ; preds = %dec_label_pc_1000416d
  store i32 %v0_100041a4, i32* @ecx, align 4
  %v1_100041aa = add i32 %v2_100041a6, 44
  %v2_100041aa = inttoptr i32 %v1_100041aa to i32*
  %v3_100041aa = load i32, i32* %v2_100041aa, align 4
  store i32 %v3_100041aa, i32* @eax, align 4
  %v0_100041ad = load i32, i32* @edi, align 4
  %v1_100041ad = load i32, i32* @esp, align 4
  %v2_100041ad = add i32 %v1_100041ad, -4
  %v3_100041ad = inttoptr i32 %v2_100041ad to i32*
  store i32 %v0_100041ad, i32* %v3_100041ad, align 4
  %v0_100041b0 = call i32 @function_10002a30()
  store i32 %v0_100041b0, i32* @eax, align 4
  %v1_100041b5 = icmp eq i32 %v0_100041b0, 0
  br i1 %v1_100041b5, label %dec_label_pc_100041d0, label %dec_label_pc_100041b9

dec_label_pc_100041b9:                            ; preds = %dec_label_pc_100041a4
  %v1_100041b9 = load i32, i32* @esp, align 4
  %v2_100041b9 = add i32 %v1_100041b9, -4
  %v3_100041b9 = inttoptr i32 %v2_100041b9 to i32*
  store i32 %v0_100041b0, i32* %v3_100041b9, align 4
  br label %dec_label_pc_100041ba

dec_label_pc_100041ba:                            ; preds = %dec_label_pc_100041b9, %dec_label_pc_100041a1
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v1_100041bf = call i32 @function_1000cf90(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100041bf, i32* @eax, align 4
  %v0_100041c4 = load i32, i32* @esp, align 4
  %v1_100041c4 = add i32 %v0_100041c4, -4
  %v2_100041c4 = inttoptr i32 %v1_100041c4 to i32*
  store i32 59, i32* %v2_100041c4, align 4
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v1_100041cb = call i32 @function_100036d0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100041cb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100041d0

dec_label_pc_100041d0:                            ; preds = %dec_label_pc_100041ba, %dec_label_pc_100041a4, %dec_label_pc_10004184, %dec_label_pc_1000416a, %dec_label_pc_10004158, %dec_label_pc_10004140
  %v0_100041d0 = load i32, i32* @edi, align 4
  %v1_100041d0 = add i32 %v0_100041d0, 1
  store i32 %v1_100041d0, i32* @edi, align 4
  %v0_100041d1 = call i32 @CommandLine()
  store i32 %v0_100041d1, i32* %eax.global-to-local, align 4
  %v1_100041d3 = inttoptr i32 %v0_100041d1 to i32*
  %v2_100041d3 = load i32, i32* %v1_100041d3, align 4
  store i32 %v2_100041d3, i32* %edx.global-to-local, align 4
  store i32 %v0_100041d1, i32* @ecx, align 4
  %v1_100041d7 = add i32 %v2_100041d3, 36
  %v2_100041d7 = inttoptr i32 %v1_100041d7 to i32*
  %v3_100041d7 = load i32, i32* %v2_100041d7, align 4
  store i32 %v3_100041d7, i32* @eax, align 4
  %v0_100041dc = load i32, i32* @edi, align 4
  %v5_100041de = icmp slt i32 %v0_100041dc, %v3_100041d7
  br i1 %v5_100041de, label %dec_label_pc_10004140, label %dec_label_pc_100041e4

dec_label_pc_100041e4:                            ; preds = %dec_label_pc_100041d0
  %v0_100041e4 = load i32, i32* @esp, align 4
  %v1_100041e4 = inttoptr i32 %v0_100041e4 to i32*
  %v2_100041e4 = load i32, i32* %v1_100041e4, align 4
  store i32 %v2_100041e4, i32* @esi, align 4
  %v3_100041e4 = add i32 %v0_100041e4, 4
  br label %dec_label_pc_100041e5

dec_label_pc_100041e5:                            ; preds = %dec_label_pc_100040ed.dec_label_pc_100041e5_crit_edge, %dec_label_pc_100041e4
  %v0_100041ec = phi i32 [ %v0_100041ec.pre, %dec_label_pc_100040ed.dec_label_pc_100041e5_crit_edge ], [ %v3_100041e4, %dec_label_pc_100041e4 ]
  %v0_100041e5 = load i8, i8* @global_var_1002b651.184, align 1
  %v1_100041e5 = and i8 %v0_100041e5, 1
  %v2_100041e5 = icmp eq i8 %v1_100041e5, 0
  %v1_100041ec = inttoptr i32 %v0_100041ec to i32*
  %v2_100041ec = load i32, i32* %v1_100041ec, align 4
  store i32 %v2_100041ec, i32* @edi, align 4
  %v3_100041ec = add i32 %v0_100041ec, 4
  %v1_100041ed = inttoptr i32 %v3_100041ec to i32*
  %v2_100041ed = load i32, i32* %v1_100041ed, align 4
  store i32 %v2_100041ed, i32* @ebx, align 4
  %v3_100041ed = add i32 %v0_100041ec, 8
  br i1 %v2_100041e5, label %dec_label_pc_1000421b, label %dec_label_pc_100041f0

dec_label_pc_100041f0:                            ; preds = %dec_label_pc_100041e5
  %v0_100041f0 = load i32, i32* @global_var_1002b64c.179, align 4
  store i32 %v0_100041f0, i32* @eax, align 4
  %v1_100041f5 = icmp eq i32 %v0_100041f0, 0
  br i1 %v1_100041f5, label %dec_label_pc_1000421b, label %dec_label_pc_100041f9

dec_label_pc_100041f9:                            ; preds = %dec_label_pc_100041f0
  %v1_100041f9 = load i32, i32* @global_var_1002b65c.181, align 4
  %v2_100041f9 = sub i32 %v0_100041f0, %v1_100041f9
  store i32 %v2_100041f9, i32* %eax.global-to-local, align 4
  %v0_100041ff = load i32, i32* @global_var_1002b63c.177, align 4
  store i32 %v0_100041ff, i32* @ecx, align 4
  %v3_10004205 = add i32 %v2_100041f9, -1
  %v4_10004205 = add i32 %v3_10004205, %v0_100041ff
  %v5_10004205 = inttoptr i32 %v4_10004205 to i8*
  %v6_10004205 = load i8, i8* %v5_10004205, align 1
  %v16_10004205 = icmp eq i8 %v6_10004205, 10
  %v1_1000420a = zext i1 %v16_10004205 to i32
  %v3_1000420a = and i32 %v2_100041f9, -256
  %v4_1000420a = or i32 %v1_1000420a, %v3_1000420a
  store i32 %v4_1000420a, i32* @eax, align 4
  %v5_1000420d = icmp eq i1 %v16_10004205, false
  br i1 %v5_1000420d, label %dec_label_pc_1000421b, label %dec_label_pc_10004211

dec_label_pc_10004211:                            ; preds = %dec_label_pc_100041f9
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v0_10004216 = call i32 @function_10003680()
  store i32 %v0_10004216, i32* @eax, align 4
  %v0_1000421b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000421b

dec_label_pc_1000421b:                            ; preds = %dec_label_pc_10004211, %dec_label_pc_100041f9, %dec_label_pc_100041f0, %dec_label_pc_100041e5
  %v0_1000421b = phi i32 [ %v0_1000421b.pre, %dec_label_pc_10004211 ], [ %v3_100041ed, %dec_label_pc_100041f9 ], [ %v3_100041ed, %dec_label_pc_100041f0 ], [ %v3_100041ed, %dec_label_pc_100041e5 ]
  %v1_1000421b = add i32 %v0_1000421b, -4
  %v2_1000421b = inttoptr i32 %v1_1000421b to i32*
  store i32 1, i32* %v2_1000421b, align 4
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v1_10004222 = call i32 @function_1000c090(i32 ptrtoint (i32* @5 to i32))
  %v4_10004227 = trunc i32 %v1_10004222 to i8
  %v5_10004227 = icmp eq i8 %v4_10004227, 0
  %v0_10004229 = load i32, i32* @global_var_1002b63c.177, align 4
  store i32 %v0_10004229, i32* %eax.global-to-local, align 4
  br i1 %v5_10004227, label %dec_label_pc_1000425b, label %dec_label_pc_10004230

dec_label_pc_10004230:                            ; preds = %dec_label_pc_1000421b
  %v0_10004230 = load i32, i32* @global_var_1002b64c.179, align 4
  %v1_10004236 = load i32, i32* @global_var_1002b65c.181, align 4
  %v2_10004236 = sub i32 %v0_10004230, %v1_10004236
  store i32 %v2_10004236, i32* %edx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1002b63c.177 to i32), i32* @ecx, align 4
  %v3_10004241 = add i32 %v2_10004236, %v0_10004229
  %v4_10004241 = inttoptr i32 %v3_10004241 to i8*
  store i8 0, i8* %v4_10004241, align 1
  %v0_10004245 = load i32, i32* @global_var_1002b64c.179, align 4
  %v1_1000424a = add i32 %v0_10004245, 1
  store i32 %v1_1000424a, i32* @eax, align 4
  %v1_1000424b = load i32, i32* @esp, align 4
  %v2_1000424b = add i32 %v1_1000424b, -4
  %v3_1000424b = inttoptr i32 %v2_1000424b to i32*
  store i32 %v1_1000424a, i32* %v3_1000424b, align 4
  %v0_1000424c = load i32, i32* @eax, align 4
  store i32 %v0_1000424c, i32* @global_var_1002b64c.179, align 4
  %v1_10004251 = call i32 @function_1000c0e0(i32 ptrtoint (i32* @5 to i32))
  %v0_10004256 = load i32, i32* @global_var_1002b63c.177, align 4
  store i32 %v0_10004256, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000425b

dec_label_pc_1000425b:                            ; preds = %dec_label_pc_10004230, %dec_label_pc_1000421b
  %v0_1000425b = phi i32 [ %v0_10004256, %dec_label_pc_10004230 ], [ %v0_10004229, %dec_label_pc_1000421b ]
  ret i32 %v0_1000425b
}

define i32 @function_10004260() local_unnamed_addr {
dec_label_pc_10004260:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004260 = load i32, i32* @ebp, align 4
  store i32 %v0_10004260, i32* %stack_var_-4, align 4
  %v0_10004263 = load i32, i32* @ecx, align 4
  store i32 %v0_10004263, i32* %stack_var_-8, align 4
  %v1_10004264 = add i32 %v0_10004263, 28
  %v2_10004264 = inttoptr i32 %v1_10004264 to i32*
  %v3_10004264 = load i32, i32* %v2_10004264, align 4
  store i32 %v3_10004264, i32* %eax.global-to-local, align 4
  store i32 %v0_10004263, i32* %stack_var_-8, align 4
  %v10_1000426a = icmp eq i32 %v3_10004264, -1
  br i1 %v10_1000426a, label %dec_label_pc_10004362, label %dec_label_pc_10004273

dec_label_pc_10004273:                            ; preds = %dec_label_pc_10004260
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_10004278 = add i32 %v0_10004263, 8
  %v2_10004278 = inttoptr i32 %v1_10004278 to i32*
  %v3_10004278 = load i32, i32* %v2_10004278, align 4
  %v15_10004278 = icmp eq i32 %v3_10004278, 0
  %v16_10004278 = icmp slt i32 %v3_10004278, 0
  %v3_1000427c = icmp eq i1 %v16_10004278, false
  %v4_1000427c = icmp eq i1 %v15_10004278, false
  %v5_1000427c = icmp eq i1 %v3_1000427c, %v4_1000427c
  %v6_1000427c = zext i1 %v5_1000427c to i32
  store i32 %v6_1000427c, i32* %ebx.global-to-local, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %not.v5_1000427c = icmp ne i1 %v5_1000427c, true
  %v1_10004283 = sext i1 %not.v5_1000427c to i32
  store i32 %v1_10004283, i32* %esi.global-to-local, align 4
  %v12_10004286 = icmp eq i1 %v5_1000427c, false
  br i1 %v12_10004286, label %dec_label_pc_10004359, label %dec_label_pc_10004290

dec_label_pc_10004290:                            ; preds = %dec_label_pc_10004273, %dec_label_pc_10004351
  %v1_100042a1 = phi i32 [ %v3_1000433e, %dec_label_pc_10004351 ], [ %v3_10004264, %dec_label_pc_10004273 ]
  %v0_100042f0 = phi i32 [ %v1_1000434a, %dec_label_pc_10004351 ], [ %v0_10004263, %dec_label_pc_10004273 ]
  %v0_100042fc = phi i32 [ %v1_10004346, %dec_label_pc_10004351 ], [ 0, %dec_label_pc_10004273 ]
  %v0_100042f3 = phi i32 [ %v0_10004351, %dec_label_pc_10004351 ], [ %v1_10004283, %dec_label_pc_10004273 ]
  %v5_10004292 = icmp slt i32 %v0_100042f3, %v0_100042fc
  br i1 %v5_10004292, label %dec_label_pc_1000433e, label %dec_label_pc_10004298

dec_label_pc_10004298:                            ; preds = %dec_label_pc_10004290
  %v2_10004298 = add i32 %v0_100042f0, 8
  %v3_10004298 = inttoptr i32 %v2_10004298 to i32*
  %v4_10004298 = load i32, i32* %v3_10004298, align 4
  %v5_1000429b = icmp sge i32 %v0_100042f3, %v4_10004298
  %v8_100042a3 = icmp sgt i32 %v0_100042f3, %v1_100042a1
  %or.cond = or i1 %v8_100042a3, %v5_1000429b
  br i1 %or.cond, label %dec_label_pc_1000433e, label %dec_label_pc_100042a9

dec_label_pc_100042a9:                            ; preds = %dec_label_pc_10004298
  %v0_100042a9 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_100042a9 = and i8 %v0_100042a9, 1
  %v2_100042a9 = icmp eq i8 %v1_100042a9, 0
  %v1_100042b0 = icmp eq i1 %v2_100042a9, false
  br i1 %v1_100042b0, label %dec_label_pc_100042d4, label %dec_label_pc_100042b2

dec_label_pc_100042b2:                            ; preds = %dec_label_pc_100042a9
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_100042b7 = or i8 %v0_100042a9, 1
  store i8 %v3_100042b7, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100042d4

dec_label_pc_100042d4:                            ; preds = %dec_label_pc_100042b2, %dec_label_pc_100042a9
  %v12_100042d4 = icmp eq i32 %v0_100042f3, -1
  br i1 %v12_100042d4, label %dec_label_pc_100042e7, label %dec_label_pc_100042d8

dec_label_pc_100042d8:                            ; preds = %dec_label_pc_100042d4
  %v2_100042da = mul i32 %v0_100042f3, 32
  store i32 %v2_100042da, i32* %eax.global-to-local, align 4
  %v2_100042dd = add i32 %v0_100042f0, 4
  %v3_100042dd = inttoptr i32 %v2_100042dd to i32*
  %v4_100042dd = load i32, i32* %v3_100042dd, align 4
  %v5_100042dd = add i32 %v4_100042dd, %v2_100042da
  br label %dec_label_pc_100042e7

dec_label_pc_100042e7:                            ; preds = %dec_label_pc_100042d4, %dec_label_pc_100042d8
  %storemerge = phi i32 [ %v5_100042dd, %dec_label_pc_100042d8 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_100042d4 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_100042e7 = inttoptr i32 %storemerge to i32*
  %v2_100042e7 = load i32, i32* %v1_100042e7, align 4
  %v14_100042e7 = icmp eq i32 %v2_100042e7, %v0_100042f3
  %v1_100042e9 = icmp eq i1 %v14_100042e7, false
  %v2_100042e9 = zext i1 %v1_100042e9 to i32
  %v4_100042e9 = and i32 %storemerge, -256
  %v5_100042e9 = or i32 %v2_100042e9, %v4_100042e9
  store i32 %v5_100042e9, i32* %eax.global-to-local, align 4
  %v5_100042ec = icmp eq i1 %v1_100042e9, false
  br i1 %v5_100042ec, label %dec_label_pc_1000433e, label %dec_label_pc_100042f0

dec_label_pc_100042f0:                            ; preds = %dec_label_pc_100042e7
  %v1_100042f0 = add i32 %v0_100042f0, 4
  %v2_100042f0 = inttoptr i32 %v1_100042f0 to i32*
  %v3_100042f0 = load i32, i32* %v2_100042f0, align 4
  store i32 %v3_100042f0, i32* %eax.global-to-local, align 4
  %v2_100042f5 = mul i32 %v0_100042f3, 32
  store i32 %v2_100042f5, i32* %ebx.global-to-local, align 4
  %v3_100042f8 = or i32 %v2_100042f5, 16
  %v4_100042f8 = add i32 %v3_100042f0, %v3_100042f8
  store i32 %v4_100042f8, i32* %edi.global-to-local, align 4
  %v2_100042fc = add i32 %v4_100042f8, 12
  %v3_100042fc = inttoptr i32 %v2_100042fc to i32*
  store i32 %v0_100042fc, i32* %v3_100042fc, align 4
  %v0_100042ff = load i32, i32* %edi.global-to-local, align 4
  %v1_100042ff = add i32 %v0_100042ff, 8
  %v2_100042ff = inttoptr i32 %v1_100042ff to i32*
  %v3_100042ff = load i32, i32* %v2_100042ff, align 4
  %v4_100042ff = load i32, i32* %edx.global-to-local, align 4
  %v5_10004302 = icmp slt i32 %v3_100042ff, %v4_100042ff
  br i1 %v5_10004302, label %dec_label_pc_10004328, label %dec_label_pc_10004304

dec_label_pc_10004304:                            ; preds = %dec_label_pc_100042f0
  %v1_10004304 = inttoptr i32 %v0_100042ff to i32*
  %v2_10004304 = load i32, i32* %v1_10004304, align 4
  store i32 %v2_10004304, i32* %eax.global-to-local, align 4
  %v12_10004306 = icmp eq i32 %v2_10004304, %v4_100042ff
  br i1 %v12_10004306, label %dec_label_pc_10004325, label %dec_label_pc_1000430a

dec_label_pc_1000430a:                            ; preds = %dec_label_pc_10004304
  %v0_1000430a = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000430a, i32* @ecx, align 4
  %v1_10004310 = inttoptr i32 %v0_1000430a to i32*
  %v2_10004310 = load i32, i32* %v1_10004310, align 4
  store i32 %v2_10004310, i32* @ecx, align 4
  %v1_10004312 = inttoptr i32 %v2_10004310 to i32*
  %v2_10004312 = load i32, i32* %v1_10004312, align 4
  store i32 %v2_10004312, i32* %edx.global-to-local, align 4
  %v1_10004314 = load i32, i32* @esp, align 4
  %v2_10004314 = add i32 %v1_10004314, -4
  %v3_10004314 = inttoptr i32 %v2_10004314 to i32*
  store i32 %v2_10004304, i32* %v3_10004314, align 4
  %v0_10004315 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004315 = add i32 %v0_10004315, 20
  %v2_10004315 = inttoptr i32 %v1_10004315 to i32*
  %v3_10004315 = load i32, i32* %v2_10004315, align 4
  store i32 %v3_10004315, i32* %eax.global-to-local, align 4
  %v3_1000431a = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1000431a, i32* @ecx, align 4
  %v0_1000431d = load i32, i32* %edi.global-to-local, align 4
  %v1_1000431d = inttoptr i32 %v0_1000431d to i32*
  store i32 0, i32* %v1_1000431d, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_10004325.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10004325

dec_label_pc_10004325:                            ; preds = %dec_label_pc_1000430a, %dec_label_pc_10004304
  %v1_10004325 = phi i32 [ %v1_10004325.pre, %dec_label_pc_1000430a ], [ %v0_100042ff, %dec_label_pc_10004304 ]
  %v0_10004325 = phi i32 [ 0, %dec_label_pc_1000430a ], [ %v4_100042ff, %dec_label_pc_10004304 ]
  %v2_10004325 = add i32 %v1_10004325, 4
  %v3_10004325 = inttoptr i32 %v2_10004325 to i32*
  store i32 %v0_10004325, i32* %v3_10004325, align 4
  br label %dec_label_pc_10004328

dec_label_pc_10004328:                            ; preds = %dec_label_pc_10004325, %dec_label_pc_100042f0
  %v0_10004328 = load i32, i32* @ecx, align 4
  %v1_10004328 = add i32 %v0_10004328, 24
  %v2_10004328 = inttoptr i32 %v1_10004328 to i32*
  %v3_10004328 = load i32, i32* %v2_10004328, align 4
  store i32 %v3_10004328, i32* %edi.global-to-local, align 4
  %v1_1000432b = add i32 %v0_10004328, 4
  %v2_1000432b = inttoptr i32 %v1_1000432b to i32*
  %v3_1000432b = load i32, i32* %v2_1000432b, align 4
  store i32 %v3_1000432b, i32* %eax.global-to-local, align 4
  %v1_1000432e = load i32, i32* %ebx.global-to-local, align 4
  %v4_1000432e = add i32 %v3_1000432b, 4
  %v5_1000432e = add i32 %v4_1000432e, %v1_1000432e
  %v6_1000432e = inttoptr i32 %v5_1000432e to i32*
  store i32 %v3_10004328, i32* %v6_1000432e, align 4
  %v0_10004332 = load i32, i32* @ecx, align 4
  %v1_10004332 = add i32 %v0_10004332, 4
  %v2_10004332 = inttoptr i32 %v1_10004332 to i32*
  %v3_10004332 = load i32, i32* %v2_10004332, align 4
  store i32 %v3_10004332, i32* %eax.global-to-local, align 4
  %v0_10004335 = load i32, i32* %esi.global-to-local, align 4
  %v1_10004335 = load i32, i32* %ebx.global-to-local, align 4
  %v4_10004335 = add i32 %v1_10004335, %v3_10004332
  %v5_10004335 = inttoptr i32 %v4_10004335 to i32*
  store i32 %v0_10004335, i32* %v5_10004335, align 4
  %v0_10004338 = load i32, i32* %esi.global-to-local, align 4
  %v1_10004338 = load i32, i32* @ecx, align 4
  %v2_10004338 = add i32 %v1_10004338, 24
  %v3_10004338 = inttoptr i32 %v2_10004338 to i32*
  store i32 %v0_10004338, i32* %v3_10004338, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v0_1000433e.pre = load i32, i32* @ecx, align 4
  %v0_10004341.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000433e

dec_label_pc_1000433e:                            ; preds = %dec_label_pc_10004298, %dec_label_pc_10004328, %dec_label_pc_100042e7, %dec_label_pc_10004290
  %v0_10004345 = phi i32 [ %v0_100042f3, %dec_label_pc_10004298 ], [ %v0_10004341.pre, %dec_label_pc_10004328 ], [ %v0_100042f3, %dec_label_pc_100042e7 ], [ %v0_100042f3, %dec_label_pc_10004290 ]
  %v1_1000434a = phi i32 [ %v0_100042f0, %dec_label_pc_10004298 ], [ %v0_1000433e.pre, %dec_label_pc_10004328 ], [ %v0_100042f0, %dec_label_pc_100042e7 ], [ %v0_100042f0, %dec_label_pc_10004290 ]
  %v1_1000433e = add i32 %v1_1000434a, 28
  %v2_1000433e = inttoptr i32 %v1_1000433e to i32*
  %v3_1000433e = load i32, i32* %v2_1000433e, align 4
  store i32 %v3_1000433e, i32* %eax.global-to-local, align 4
  %v12_10004341 = icmp eq i32 %v0_10004345, %v3_1000433e
  br i1 %v12_10004341, label %dec_label_pc_10004359.loopexit, label %dec_label_pc_10004345

dec_label_pc_10004345:                            ; preds = %dec_label_pc_1000433e
  %v1_10004345 = add i32 %v0_10004345, 1
  store i32 %v1_10004345, i32* %esi.global-to-local, align 4
  %v1_10004346 = load i32, i32* %edx.global-to-local, align 4
  %v5_10004348 = icmp slt i32 %v1_10004345, %v1_10004346
  br i1 %v5_10004348, label %dec_label_pc_1000434f, label %dec_label_pc_1000434a

dec_label_pc_1000434a:                            ; preds = %dec_label_pc_10004345
  %v2_1000434a = add i32 %v1_1000434a, 8
  %v3_1000434a = inttoptr i32 %v2_1000434a to i32*
  %v4_1000434a = load i32, i32* %v3_1000434a, align 4
  %v5_1000434d = icmp slt i32 %v1_10004345, %v4_1000434a
  br i1 %v5_1000434d, label %dec_label_pc_10004351, label %dec_label_pc_1000434f

dec_label_pc_1000434f:                            ; preds = %dec_label_pc_1000434a, %dec_label_pc_10004345
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10004351

dec_label_pc_10004351:                            ; preds = %dec_label_pc_1000434f, %dec_label_pc_1000434a
  %v0_10004351 = phi i32 [ -1, %dec_label_pc_1000434f ], [ %v1_10004345, %dec_label_pc_1000434a ]
  %v12_10004351 = icmp eq i32 %v0_10004351, -1
  %v1_10004353 = icmp eq i1 %v12_10004351, false
  br i1 %v1_10004353, label %dec_label_pc_10004290, label %dec_label_pc_10004359.loopexit

dec_label_pc_10004359.loopexit:                   ; preds = %dec_label_pc_1000433e, %dec_label_pc_10004351
  br label %dec_label_pc_10004359

dec_label_pc_10004359:                            ; preds = %dec_label_pc_10004359.loopexit, %dec_label_pc_10004273
  %v1_10004359 = phi i32 [ %v1_1000434a, %dec_label_pc_10004359.loopexit ], [ %v0_10004263, %dec_label_pc_10004273 ]
  %v2_10004359 = add i32 %v1_10004359, 16
  %v3_10004359 = inttoptr i32 %v2_10004359 to i32*
  store i32 -1, i32* %v3_10004359, align 4
  %v0_1000435c = load i32, i32* @esp, align 4
  %v1_1000435c = inttoptr i32 %v0_1000435c to i32*
  %v2_1000435c = load i32, i32* %v1_1000435c, align 4
  store i32 %v2_1000435c, i32* @edi, align 4
  %v3_1000435c = add i32 %v0_1000435c, 4
  %v1_1000435d = inttoptr i32 %v3_1000435c to i32*
  %v2_1000435d = load i32, i32* %v1_1000435d, align 4
  store i32 %v2_1000435d, i32* @esi, align 4
  %v0_1000435e = load i32, i32* %edx.global-to-local, align 4
  %v1_1000435e = load i32, i32* @ecx, align 4
  %v2_1000435e = add i32 %v1_1000435e, 20
  %v3_1000435e = inttoptr i32 %v2_1000435e to i32*
  store i32 %v0_1000435e, i32* %v3_1000435e, align 4
  %v0_10004361 = load i32, i32* @esp, align 4
  %v1_10004361 = inttoptr i32 %v0_10004361 to i32*
  %v2_10004361 = load i32, i32* %v1_10004361, align 4
  store i32 %v2_10004361, i32* @ebx, align 4
  %v2_10004364.pre = load i32, i32* %stack_var_-4, align 4
  %v0_10004365.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004362

dec_label_pc_10004362:                            ; preds = %dec_label_pc_10004359, %dec_label_pc_10004260
  %v0_10004365 = phi i32 [ %v0_10004365.pre, %dec_label_pc_10004359 ], [ %v3_10004264, %dec_label_pc_10004260 ]
  %v2_10004364 = phi i32 [ %v2_10004364.pre, %dec_label_pc_10004359 ], [ %v0_10004260, %dec_label_pc_10004260 ]
  store i32 %v2_10004364, i32* @ebp, align 4
  ret i32 %v0_10004365
}

define i32 @function_10004370() local_unnamed_addr {
dec_label_pc_10004370:
  %stack_var_-12 = alloca i32, align 4
  %v0_10004372 = load i32, i32* @ecx, align 4
  store i32 %v0_10004372, i32* @edi, align 4
  %v0_10004374 = call i32 @function_10003d90()
  %v1_10004379 = and i32 %v0_10004374, 65535
  store i32 %v1_10004379, i32* @esi, align 4
  %v1_10004381 = trunc i32 %v0_10004374 to i16
  %v14_10004381 = icmp eq i16 %v1_10004381, -1
  br i1 %v14_10004381, label %dec_label_pc_10004370.dec_label_pc_100043c2_crit_edge, label %dec_label_pc_10004386

dec_label_pc_10004370.dec_label_pc_100043c2_crit_edge: ; preds = %dec_label_pc_10004370
  %v0_100043c4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100043c2

dec_label_pc_10004386:                            ; preds = %dec_label_pc_10004370
  %v0_10004386 = load i32, i32* @ebx, align 4
  store i32 %v0_10004386, i32* %stack_var_-12, align 4
  %v4_10004386 = ptrtoint i32* %stack_var_-12 to i32
  br label %dec_label_pc_10004390

dec_label_pc_10004390:                            ; preds = %dec_label_pc_10004390, %dec_label_pc_10004386
  %v1_100043a9 = phi i32 [ %v4_10004386, %dec_label_pc_10004386 ], [ %v1_100043a9.pre, %dec_label_pc_10004390 ]
  %v0_100043a0 = phi i32 [ %v1_10004379, %dec_label_pc_10004386 ], [ %v1_100043b4, %dec_label_pc_10004390 ]
  %v0_10004390 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10004390, i32* @ecx, align 4
  %v1_10004396 = inttoptr i32 %v0_10004390 to i32*
  %v2_10004396 = load i32, i32* %v1_10004396, align 4
  store i32 %v2_10004396, i32* @ecx, align 4
  %v0_10004398 = load i32, i32* @edi, align 4
  %v1_10004398 = add i32 %v0_10004398, 4
  %v2_10004398 = inttoptr i32 %v1_10004398 to i32*
  %v3_10004398 = load i32, i32* %v2_10004398, align 4
  store i32 %v3_10004398, i32* @ebx, align 4
  %v2_100043a5 = mul nuw nsw i32 %v0_100043a0, 16
  %v3_100043a5 = or i32 %v2_100043a5, 8
  %v4_100043a5 = add i32 %v3_10004398, %v3_100043a5
  %v5_100043a5 = inttoptr i32 %v4_100043a5 to i32*
  %v6_100043a5 = load i32, i32* %v5_100043a5, align 4
  %v2_100043a9 = add i32 %v1_100043a9, -4
  %v3_100043a9 = inttoptr i32 %v2_100043a9 to i32*
  store i32 %v6_100043a5, i32* %v3_100043a9, align 4
  %v0_100043ac = load i32, i32* @esi, align 4
  %v2_100043ac = add i32 %v1_100043a9, -8
  %v3_100043ac = inttoptr i32 %v2_100043ac to i32*
  store i32 %v0_100043ac, i32* %v3_100043ac, align 4
  %v0_100043ad = load i32, i32* @edi, align 4
  store i32 %v0_100043ad, i32* @ecx, align 4
  %v1_100043af = call i32 @function_10003e60(i32 ptrtoint (i32* @5 to i32))
  %v1_100043b4 = and i32 %v1_100043af, 65535
  store i32 %v1_100043b4, i32* @esi, align 4
  %v1_100043bc = trunc i32 %v1_100043af to i16
  %v14_100043bc = icmp eq i16 %v1_100043bc, -1
  %v1_100043bf = icmp eq i1 %v14_100043bc, false
  %v1_100043a9.pre = load i32, i32* @esp, align 4
  br i1 %v1_100043bf, label %dec_label_pc_10004390, label %dec_label_pc_100043c1

dec_label_pc_100043c1:                            ; preds = %dec_label_pc_10004390
  %v1_100043c1 = inttoptr i32 %v1_100043a9.pre to i32*
  %v2_100043c1 = load i32, i32* %v1_100043c1, align 4
  store i32 %v2_100043c1, i32* @ebx, align 4
  %v3_100043c1 = add i32 %v1_100043a9.pre, 4
  br label %dec_label_pc_100043c2

dec_label_pc_100043c2:                            ; preds = %dec_label_pc_10004370.dec_label_pc_100043c2_crit_edge, %dec_label_pc_100043c1
  %v0_100043c4 = phi i32 [ %v0_100043c4.pre, %dec_label_pc_10004370.dec_label_pc_100043c2_crit_edge ], [ %v3_100043c1, %dec_label_pc_100043c1 ]
  %v0_100043c2 = load i32, i32* @edi, align 4
  store i32 %v0_100043c2, i32* @ecx, align 4
  %v1_100043c4 = inttoptr i32 %v0_100043c4 to i32*
  %v2_100043c4 = load i32, i32* %v1_100043c4, align 4
  store i32 %v2_100043c4, i32* @edi, align 4
  %v3_100043c4 = add i32 %v0_100043c4, 4
  %v1_100043c5 = inttoptr i32 %v3_100043c4 to i32*
  %v2_100043c5 = load i32, i32* %v1_100043c5, align 4
  store i32 %v2_100043c5, i32* @esi, align 4
  %v0_100043c6 = call i32 @function_10003ce0()
  ret i32 %v0_100043c6
}

define i32 @function_100043d0() local_unnamed_addr {
dec_label_pc_100043d0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_100043d2 = load i32, i32* @ecx, align 4
  store i32 %v0_100043d2, i32* @esi, align 4
  %v0_100043d4 = call i32 @function_10004260()
  store i32 %v0_100043d4, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_100043db = load i32, i32* @esi, align 4
  %v1_100043db = add i32 %v0_100043db, 24
  %v2_100043db = inttoptr i32 %v1_100043db to i32*
  store i32 -1, i32* %v2_100043db, align 4
  %v0_100043e2 = load i32, i32* @esi, align 4
  %v1_100043e2 = add i32 %v0_100043e2, 12
  %v2_100043e2 = inttoptr i32 %v1_100043e2 to i32*
  %v3_100043e2 = load i32, i32* %v2_100043e2, align 4
  %v4_100043e2 = load i32, i32* %edi.global-to-local, align 4
  %v5_100043e5 = icmp slt i32 %v3_100043e2, %v4_100043e2
  br i1 %v5_100043e5, label %dec_label_pc_10004404, label %dec_label_pc_100043e7

dec_label_pc_100043e7:                            ; preds = %dec_label_pc_100043d0
  %v1_100043e7 = add i32 %v0_100043e2, 4
  %v2_100043e7 = inttoptr i32 %v1_100043e7 to i32*
  %v3_100043e7 = load i32, i32* %v2_100043e7, align 4
  store i32 %v3_100043e7, i32* %eax.global-to-local, align 4
  %v12_100043ea = icmp eq i32 %v3_100043e7, %v4_100043e2
  br i1 %v12_100043ea, label %dec_label_pc_10004401, label %dec_label_pc_100043ee

dec_label_pc_100043ee:                            ; preds = %dec_label_pc_100043e7
  %v0_100043ee = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100043ee, i32* @ecx, align 4
  %v1_100043f4 = inttoptr i32 %v0_100043ee to i32*
  %v2_100043f4 = load i32, i32* %v1_100043f4, align 4
  store i32 %v2_100043f4, i32* @ecx, align 4
  %v1_100043f6 = inttoptr i32 %v2_100043f4 to i32*
  %v2_100043f6 = load i32, i32* %v1_100043f6, align 4
  store i32 %v2_100043f6, i32* %edx.global-to-local, align 4
  %v1_100043f9 = add i32 %v2_100043f6, 20
  %v2_100043f9 = inttoptr i32 %v1_100043f9 to i32*
  %v3_100043f9 = load i32, i32* %v2_100043f9, align 4
  store i32 %v3_100043f9, i32* %eax.global-to-local, align 4
  store i32 %v4_100043e2, i32* %v2_100043e7, align 4
  %v0_10004401.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10004401.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10004401

dec_label_pc_10004401:                            ; preds = %dec_label_pc_100043ee, %dec_label_pc_100043e7
  %v1_10004401 = phi i32 [ %v1_10004401.pre, %dec_label_pc_100043ee ], [ %v0_100043e2, %dec_label_pc_100043e7 ]
  %v0_10004401 = phi i32 [ %v0_10004401.pre, %dec_label_pc_100043ee ], [ %v4_100043e2, %dec_label_pc_100043e7 ]
  %v2_10004401 = add i32 %v1_10004401, 8
  %v3_10004401 = inttoptr i32 %v2_10004401 to i32*
  store i32 %v0_10004401, i32* %v3_10004401, align 4
  %v0_10004404.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10004404

dec_label_pc_10004404:                            ; preds = %dec_label_pc_10004401, %dec_label_pc_100043d0
  %v0_10004404 = phi i32 [ %v0_10004404.pre, %dec_label_pc_10004401 ], [ %v0_100043e2, %dec_label_pc_100043d0 ]
  %v1_10004404 = add i32 %v0_10004404, 28
  %v2_10004404 = inttoptr i32 %v1_10004404 to i32*
  store i32 -1, i32* %v2_10004404, align 4
  %v0_1000440b = load i32, i32* @esi, align 4
  %v1_1000440b = add i32 %v0_1000440b, 12
  %v2_1000440b = inttoptr i32 %v1_1000440b to i32*
  %v3_1000440b = load i32, i32* %v2_1000440b, align 4
  %v4_1000440b = load i32, i32* %edi.global-to-local, align 4
  %v5_1000440e = icmp slt i32 %v3_1000440b, %v4_1000440b
  br i1 %v5_1000440e, label %dec_label_pc_1000442d, label %dec_label_pc_10004410

dec_label_pc_10004410:                            ; preds = %dec_label_pc_10004404
  %v1_10004410 = add i32 %v0_1000440b, 4
  %v2_10004410 = inttoptr i32 %v1_10004410 to i32*
  %v3_10004410 = load i32, i32* %v2_10004410, align 4
  store i32 %v3_10004410, i32* %eax.global-to-local, align 4
  %v12_10004413 = icmp eq i32 %v3_10004410, %v4_1000440b
  br i1 %v12_10004413, label %dec_label_pc_1000442a, label %dec_label_pc_10004417

dec_label_pc_10004417:                            ; preds = %dec_label_pc_10004410
  %v0_10004417 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10004417, i32* @ecx, align 4
  %v1_1000441d = inttoptr i32 %v0_10004417 to i32*
  %v2_1000441d = load i32, i32* %v1_1000441d, align 4
  store i32 %v2_1000441d, i32* @ecx, align 4
  %v1_1000441f = inttoptr i32 %v2_1000441d to i32*
  %v2_1000441f = load i32, i32* %v1_1000441f, align 4
  store i32 %v2_1000441f, i32* %edx.global-to-local, align 4
  %v1_10004421 = load i32, i32* @esp, align 4
  %v2_10004421 = add i32 %v1_10004421, -4
  %v3_10004421 = inttoptr i32 %v2_10004421 to i32*
  store i32 %v3_10004410, i32* %v3_10004421, align 4
  %v0_10004422 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004422 = add i32 %v0_10004422, 20
  %v2_10004422 = inttoptr i32 %v1_10004422 to i32*
  %v3_10004422 = load i32, i32* %v2_10004422, align 4
  store i32 %v3_10004422, i32* %eax.global-to-local, align 4
  %v0_10004427 = load i32, i32* %edi.global-to-local, align 4
  %v1_10004427 = load i32, i32* @esi, align 4
  %v2_10004427 = add i32 %v1_10004427, 4
  %v3_10004427 = inttoptr i32 %v2_10004427 to i32*
  store i32 %v0_10004427, i32* %v3_10004427, align 4
  %v0_1000442a.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000442a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000442a

dec_label_pc_1000442a:                            ; preds = %dec_label_pc_10004417, %dec_label_pc_10004410
  %v1_1000442a = phi i32 [ %v1_1000442a.pre, %dec_label_pc_10004417 ], [ %v0_1000440b, %dec_label_pc_10004410 ]
  %v0_1000442a = phi i32 [ %v0_1000442a.pre, %dec_label_pc_10004417 ], [ %v4_1000440b, %dec_label_pc_10004410 ]
  %v2_1000442a = add i32 %v1_1000442a, 8
  %v3_1000442a = inttoptr i32 %v2_1000442a to i32*
  store i32 %v0_1000442a, i32* %v3_1000442a, align 4
  br label %dec_label_pc_1000442d

dec_label_pc_1000442d:                            ; preds = %dec_label_pc_1000442a, %dec_label_pc_10004404
  %v0_1000442d = load i32, i32* @esp, align 4
  %v1_1000442d = inttoptr i32 %v0_1000442d to i32*
  %v2_1000442d = load i32, i32* %v1_1000442d, align 4
  store i32 %v2_1000442d, i32* %edi.global-to-local, align 4
  %v0_1000442f = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000442f
}

define i32 @function_10004430(i32 %arg1) local_unnamed_addr {
dec_label_pc_10004430:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004430 = load i32, i32* @ebp, align 4
  store i32 %v0_10004430, i32* %stack_var_-4, align 4
  %v4_10004430 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004430, i32* @ebp, align 4
  %v0_1000443c = load i32, i32* @ecx, align 4
  store i32 %v0_1000443c, i32* @esi, align 4
  store i32 -1, i32* %stack_var_-12, align 4
  store i32 0, i32* %stack_var_-8, align 4
  %v5_10004454 = call i32 @function_10002e40(i32 %arg1, i32* nonnull %stack_var_-12, i32* nonnull %stack_var_-8)
  %v0_10004459 = load i32, i32* @esi, align 4
  store i32 %v0_10004459, i32* @ecx, align 4
  %v0_1000445b = call i32 @function_10002f30()
  %v3_10004460 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_10004460, i32* %edx.global-to-local, align 4
  store i32 %v0_1000445b, i32* @edi, align 4
  %v3_10004465 = load i32, i32* %stack_var_-12, align 4
  %v0_1000446b = load i32, i32* @esi, align 4
  store i32 %v0_1000446b, i32* @ecx, align 4
  %v3_1000446d = call i32 @function_10004050(i32 %v0_1000445b, i32 %v3_10004465, i32 %v3_10004460)
  %v0_10004472 = load i32, i32* @esi, align 4
  %v1_10004472 = add i32 %v0_10004472, 4
  %v2_10004472 = inttoptr i32 %v1_10004472 to i32*
  %v3_10004472 = load i32, i32* %v2_10004472, align 4
  store i32 %v3_10004472, i32* %edx.global-to-local, align 4
  %v1_10004475 = add i32 %v0_10004472, 20
  %v2_10004475 = inttoptr i32 %v1_10004475 to i32*
  %v3_10004475 = load i32, i32* %v2_10004475, align 4
  %v4_10004475 = add i32 %v3_10004475, 1
  store i32 %v4_10004475, i32* %v2_10004475, align 4
  %v0_10004478 = load i32, i32* @edi, align 4
  %v2_1000447a = mul i32 %v0_10004478, 32
  %v1_1000447d = load i32, i32* %edx.global-to-local, align 4
  %v3_1000447d = or i32 %v2_1000447a, 16
  %v4_1000447d = add i32 %v3_1000447d, %v1_1000447d
  store i32 %v4_1000447d, i32* @ecx, align 4
  %v1_10004481 = icmp eq i32 %v4_1000447d, 0
  br i1 %v1_10004481, label %dec_label_pc_1000448b, label %dec_label_pc_10004485

dec_label_pc_10004485:                            ; preds = %dec_label_pc_10004430
  %v0_10004485 = load i32, i32* @ebx, align 4
  %v1_10004486 = call i32 @function_1000d190(i32 %v0_10004485)
  %v0_1000448b.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000448b

dec_label_pc_1000448b:                            ; preds = %dec_label_pc_10004485, %dec_label_pc_10004430
  %v0_1000448b = phi i32 [ %v0_1000448b.pre, %dec_label_pc_10004485 ], [ %v0_10004478, %dec_label_pc_10004430 ]
  %v0_1000448d = load i32, i32* @esp, align 4
  %v1_1000448d = inttoptr i32 %v0_1000448d to i32*
  %v2_1000448d = load i32, i32* %v1_1000448d, align 4
  store i32 %v2_1000448d, i32* @edi, align 4
  %v3_1000448d = add i32 %v0_1000448d, 4
  %v1_1000448e = inttoptr i32 %v3_1000448d to i32*
  %v2_1000448e = load i32, i32* %v1_1000448e, align 4
  store i32 %v2_1000448e, i32* @esi, align 4
  %v3_1000448e = add i32 %v0_1000448d, 8
  %v1_1000448f = inttoptr i32 %v3_1000448e to i32*
  %v2_1000448f = load i32, i32* %v1_1000448f, align 4
  store i32 %v2_1000448f, i32* @ebx, align 4
  %v2_10004492 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004492, i32* @ebp, align 4
  ret i32 %v0_1000448b
}

define i32 @function_100044a0() local_unnamed_addr {
dec_label_pc_100044a0:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_100044a2 = load i32, i32* @ecx, align 4
  store i32 %v0_100044a2, i32* %esi.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_100044a6 = add i32 %v0_100044a2, 328
  %v3_100044a6 = inttoptr i32 %v2_100044a6 to i32*
  store i32 0, i32* %v3_100044a6, align 4
  %v0_100044ac = load i32, i32* %esi.global-to-local, align 4
  %v1_100044ac = add i32 %v0_100044ac, 324
  %v2_100044ac = inttoptr i32 %v1_100044ac to i32*
  %v3_100044ac = load i32, i32* %v2_100044ac, align 4
  %v4_100044ac = load i32, i32* %edi.global-to-local, align 4
  %v5_100044b2 = icmp slt i32 %v3_100044ac, %v4_100044ac
  br i1 %v5_100044b2, label %dec_label_pc_100044da, label %dec_label_pc_100044b4

dec_label_pc_100044b4:                            ; preds = %dec_label_pc_100044a0
  %v1_100044b4 = add i32 %v0_100044ac, 316
  %v2_100044b4 = inttoptr i32 %v1_100044b4 to i32*
  %v3_100044b4 = load i32, i32* %v2_100044b4, align 4
  %v12_100044ba = icmp eq i32 %v3_100044b4, %v4_100044ac
  br i1 %v12_100044ba, label %dec_label_pc_100044d4, label %dec_label_pc_100044be

dec_label_pc_100044be:                            ; preds = %dec_label_pc_100044b4
  %v0_100044be = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100044be, i32* @ecx, align 4
  %v1_100044c4 = inttoptr i32 %v0_100044be to i32*
  %v2_100044c4 = load i32, i32* %v1_100044c4, align 4
  store i32 %v2_100044c4, i32* @ecx, align 4
  store i32 %v4_100044ac, i32* %v2_100044b4, align 4
  %v0_100044d4.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_100044d4.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100044d4

dec_label_pc_100044d4:                            ; preds = %dec_label_pc_100044be, %dec_label_pc_100044b4
  %v1_100044d4 = phi i32 [ %v1_100044d4.pre, %dec_label_pc_100044be ], [ %v0_100044ac, %dec_label_pc_100044b4 ]
  %v0_100044d4 = phi i32 [ %v0_100044d4.pre, %dec_label_pc_100044be ], [ %v4_100044ac, %dec_label_pc_100044b4 ]
  %v2_100044d4 = add i32 %v1_100044d4, 320
  %v3_100044d4 = inttoptr i32 %v2_100044d4 to i32*
  store i32 %v0_100044d4, i32* %v3_100044d4, align 4
  %v0_100044da.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_100044da.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100044da

dec_label_pc_100044da:                            ; preds = %dec_label_pc_100044d4, %dec_label_pc_100044a0
  %v1_100044da = phi i32 [ %v1_100044da.pre, %dec_label_pc_100044d4 ], [ %v0_100044ac, %dec_label_pc_100044a0 ]
  %v0_100044da = phi i32 [ %v0_100044da.pre, %dec_label_pc_100044d4 ], [ %v4_100044ac, %dec_label_pc_100044a0 ]
  %v2_100044da = add i32 %v1_100044da, 312
  %v3_100044da = inttoptr i32 %v2_100044da to i32*
  store i32 %v0_100044da, i32* %v3_100044da, align 4
  %v0_100044e0 = load i32, i32* %esi.global-to-local, align 4
  %v1_100044e0 = add i32 %v0_100044e0, 308
  %v2_100044e0 = inttoptr i32 %v1_100044e0 to i32*
  %v3_100044e0 = load i32, i32* %v2_100044e0, align 4
  %v4_100044e0 = load i32, i32* %edi.global-to-local, align 4
  %v5_100044e6 = icmp slt i32 %v3_100044e0, %v4_100044e0
  br i1 %v5_100044e6, label %dec_label_pc_1000450e, label %dec_label_pc_100044e8

dec_label_pc_100044e8:                            ; preds = %dec_label_pc_100044da
  %v1_100044e8 = add i32 %v0_100044e0, 300
  %v2_100044e8 = inttoptr i32 %v1_100044e8 to i32*
  %v3_100044e8 = load i32, i32* %v2_100044e8, align 4
  %v12_100044ee = icmp eq i32 %v3_100044e8, %v4_100044e0
  br i1 %v12_100044ee, label %dec_label_pc_10004508, label %dec_label_pc_100044f2

dec_label_pc_100044f2:                            ; preds = %dec_label_pc_100044e8
  %v0_100044f2 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100044f2, i32* @ecx, align 4
  %v1_100044f8 = inttoptr i32 %v0_100044f2 to i32*
  %v2_100044f8 = load i32, i32* %v1_100044f8, align 4
  store i32 %v2_100044f8, i32* @ecx, align 4
  %v1_100044fc = load i32, i32* @esp, align 4
  %v2_100044fc = add i32 %v1_100044fc, -4
  %v3_100044fc = inttoptr i32 %v2_100044fc to i32*
  store i32 %v3_100044e8, i32* %v3_100044fc, align 4
  %v0_10004502 = load i32, i32* %edi.global-to-local, align 4
  %v1_10004502 = load i32, i32* %esi.global-to-local, align 4
  %v2_10004502 = add i32 %v1_10004502, 300
  %v3_10004502 = inttoptr i32 %v2_10004502 to i32*
  store i32 %v0_10004502, i32* %v3_10004502, align 4
  %v0_10004508.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10004508.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10004508

dec_label_pc_10004508:                            ; preds = %dec_label_pc_100044f2, %dec_label_pc_100044e8
  %v1_10004508 = phi i32 [ %v1_10004508.pre, %dec_label_pc_100044f2 ], [ %v0_100044e0, %dec_label_pc_100044e8 ]
  %v0_10004508 = phi i32 [ %v0_10004508.pre, %dec_label_pc_100044f2 ], [ %v4_100044e0, %dec_label_pc_100044e8 ]
  %v2_10004508 = add i32 %v1_10004508, 304
  %v3_10004508 = inttoptr i32 %v2_10004508 to i32*
  store i32 %v0_10004508, i32* %v3_10004508, align 4
  %v0_1000450f.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000450e

dec_label_pc_1000450e:                            ; preds = %dec_label_pc_10004508, %dec_label_pc_100044da
  %v0_1000450f = phi i32 [ %v0_1000450f.pre, %dec_label_pc_10004508 ], [ %v0_100044e0, %dec_label_pc_100044da ]
  %v0_1000450e = load i32, i32* @esp, align 4
  %v1_1000450e = inttoptr i32 %v0_1000450e to i32*
  %v2_1000450e = load i32, i32* %v1_1000450e, align 4
  store i32 %v2_1000450e, i32* @edi, align 4
  %v3_1000450e = add i32 %v0_1000450e, 4
  %v1_1000450f = add i32 %v0_1000450f, 264
  store i32 %v1_1000450f, i32* @ecx, align 4
  %v1_10004515 = inttoptr i32 %v3_1000450e to i32*
  %v2_10004515 = load i32, i32* %v1_10004515, align 4
  store i32 %v2_10004515, i32* %esi.global-to-local, align 4
  %v0_10004516 = call i32 @function_100043d0()
  ret i32 %v0_10004516
}

define i32 @"??0_Init_locks@std@@QAE@XZ"() local_unnamed_addr {
dec_label_pc_10004520:
  %eax.global-to-local = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_10004523 = load i32, i32* @ecx, align 4
  store i32 %v0_10004523, i32* @esi, align 4
  %v3_10004525 = inttoptr i32 %v0_10004523 to i8*
  store i8 0, i8* %v3_10004525, align 1
  %v0_10004527 = load i32, i32* @esi, align 4
  %v1_10004527 = add i32 %v0_10004527, 264
  %v2_10004527 = inttoptr i32 %v1_10004527 to i32*
  store i32 268457680, i32* %v2_10004527, align 4
  %v0_10004531 = load i32, i32* %eax.global-to-local, align 4
  %v1_10004531 = load i32, i32* @esi, align 4
  %v2_10004531 = add i32 %v1_10004531, 268
  %v3_10004531 = inttoptr i32 %v2_10004531 to i32*
  store i32 %v0_10004531, i32* %v3_10004531, align 4
  %v0_10004537 = load i32, i32* %eax.global-to-local, align 4
  %v1_10004537 = load i32, i32* @esi, align 4
  %v2_10004537 = add i32 %v1_10004537, 272
  %v3_10004537 = inttoptr i32 %v2_10004537 to i32*
  store i32 %v0_10004537, i32* %v3_10004537, align 4
  %v0_1000453d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000453d = load i32, i32* @esi, align 4
  %v2_1000453d = add i32 %v1_1000453d, 276
  %v3_1000453d = inttoptr i32 %v2_1000453d to i32*
  store i32 %v0_1000453d, i32* %v3_1000453d, align 4
  store i32 -1, i32* @ecx, align 4
  %v1_10004546 = load i32, i32* @esi, align 4
  %v2_10004546 = add i32 %v1_10004546, 280
  %v3_10004546 = inttoptr i32 %v2_10004546 to i32*
  store i32 -1, i32* %v3_10004546, align 4
  %v0_1000454c = load i32, i32* %eax.global-to-local, align 4
  %v1_1000454c = load i32, i32* @esi, align 4
  %v2_1000454c = add i32 %v1_1000454c, 284
  %v3_1000454c = inttoptr i32 %v2_1000454c to i32*
  store i32 %v0_1000454c, i32* %v3_1000454c, align 4
  %v0_10004552 = load i32, i32* @ecx, align 4
  %v1_10004552 = load i32, i32* @esi, align 4
  %v2_10004552 = add i32 %v1_10004552, 288
  %v3_10004552 = inttoptr i32 %v2_10004552 to i32*
  store i32 %v0_10004552, i32* %v3_10004552, align 4
  %v0_10004558 = load i32, i32* @ecx, align 4
  %v1_10004558 = load i32, i32* @esi, align 4
  %v2_10004558 = add i32 %v1_10004558, 292
  %v3_10004558 = inttoptr i32 %v2_10004558 to i32*
  store i32 %v0_10004558, i32* %v3_10004558, align 4
  %v0_1000455e = load i32, i32* @esi, align 4
  %v1_1000455e = add i32 %v0_1000455e, 268
  %v2_1000455e = inttoptr i32 %v1_1000455e to i32*
  %v3_1000455e = load i32, i32* %v2_1000455e, align 4
  store i32 %v3_1000455e, i32* %eax.global-to-local, align 4
  %v1_10004565 = add i32 %v0_1000455e, 300
  store i32 %v1_10004565, i32* @ecx, align 4
  %v2_1000456b = add i32 %v0_1000455e, 296
  %v3_1000456b = inttoptr i32 %v2_1000456b to i32*
  store i32 %v3_1000455e, i32* %v3_1000456b, align 4
  %v0_10004571 = call i32 @function_1000d140()
  store i32 %v0_10004571, i32* %eax.global-to-local, align 4
  %v0_10004576 = load i32, i32* @esi, align 4
  %v1_10004576 = add i32 %v0_10004576, 316
  store i32 %v1_10004576, i32* @ecx, align 4
  %v0_1000457c = call i32 @function_1000d140()
  store i32 %v0_1000457c, i32* %eax.global-to-local, align 4
  %v0_10004586 = load i32, i32* @esi, align 4
  %v1_10004586 = add i32 %v0_10004586, 300
  store i32 %v1_10004586, i32* @ecx, align 4
  %v3_1000458c = call i32 @function_1000d100(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022c3c.185, i32 0, i32 0))
  %v0_10004592 = load i32, i32* @esi, align 4
  store i32 %v0_10004592, i32* %eax.global-to-local, align 4
  ret i32 %v0_10004592
}

define i32 @function_100045a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100045a0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100045a0 = load i32, i32* @ebp, align 4
  store i32 %v0_100045a0, i32* %stack_var_-4, align 4
  %v4_100045a0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100045a0, i32* @ebp, align 4
  %v16_100045a3 = ptrtoint i32* %stack_var_-280 to i32
  %v0_100045aa = load i32, i32* @ecx, align 4
  %tmp20 = trunc i32 %v0_100045aa to i8
  %v9_100045ac = icmp eq i8 %tmp20, 0
  br i1 %v9_100045ac, label %dec_label_pc_100045a0.dec_label_pc_100046a0_crit_edge, label %dec_label_pc_100045b5

dec_label_pc_100045a0.dec_label_pc_100046a0_crit_edge: ; preds = %dec_label_pc_100045a0
  %v0_100046a4.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_100046a0

dec_label_pc_100045b5:                            ; preds = %dec_label_pc_100045a0
  store i32 %arg1, i32* @edi, align 4
  %v2_100045bb = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_100045bb, i32* @ecx, align 4
  %v1_100045be = call i32 @function_1000d150(i32 %arg1)
  store i32 %v2_100045bb, i32* %eax.global-to-local, align 4
  %v0_100045c7 = load i32, i32* @ebx, align 4
  %v1_100045c7 = add i32 %v0_100045c7, 264
  store i32 %v1_100045c7, i32* @ecx, align 4
  %v2_100045cd = call i32 @function_100037a0(i32* nonnull %stack_var_-20)
  store i32 %v2_100045cd, i32* %eax.global-to-local, align 4
  %v11_100045d2 = icmp slt i32 %tmp10, 0
  %v2_100045e0 = icmp eq i1 %v11_100045d2, false
  br i1 %v2_100045e0, label %dec_label_pc_100045e2, label %dec_label_pc_100045f9

dec_label_pc_100045e2:                            ; preds = %dec_label_pc_100045b5
  %v3_100045e2 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_100045e2, i32* %eax.global-to-local, align 4
  %v1_100045e5 = icmp eq i32 %v3_100045e2, 0
  br i1 %v1_100045e5, label %dec_label_pc_100045f9, label %dec_label_pc_100045e9

dec_label_pc_100045e9:                            ; preds = %dec_label_pc_100045e2
  %v0_100045e9 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100045e9, i32* @ecx, align 4
  %v1_100045ef = inttoptr i32 %v0_100045e9 to i32*
  %v2_100045ef = load i32, i32* %v1_100045ef, align 4
  store i32 %v2_100045ef, i32* @ecx, align 4
  %v1_100045f1 = inttoptr i32 %v2_100045ef to i32*
  %v2_100045f1 = load i32, i32* %v1_100045f1, align 4
  store i32 %v2_100045f1, i32* %edx.global-to-local, align 4
  %v1_100045f4 = add i32 %v2_100045f1, 20
  %v2_100045f4 = inttoptr i32 %v1_100045f4 to i32*
  %v3_100045f4 = load i32, i32* %v2_100045f4, align 4
  store i32 %v3_100045f4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100045f9

dec_label_pc_100045f9:                            ; preds = %dec_label_pc_100045b5, %dec_label_pc_100045e9, %dec_label_pc_100045e2
  %v0_100046a45 = phi i32 [ %v2_100045cd, %dec_label_pc_100045b5 ], [ %v3_100045f4, %dec_label_pc_100045e9 ], [ 0, %dec_label_pc_100045e2 ]
  %v13_100045f9 = icmp eq i32 %v2_100045cd, -1
  %v1_100045fd = icmp eq i1 %v13_100045f9, false
  br i1 %v1_100045fd, label %dec_label_pc_1000469e, label %dec_label_pc_10004603

dec_label_pc_10004603:                            ; preds = %dec_label_pc_100045f9
  %v0_10004603 = load i32, i32* @edi, align 4
  %v1_10004603 = load i32, i32* @esp, align 4
  %v2_10004603 = add i32 %v1_10004603, -4
  %v3_10004603 = inttoptr i32 %v2_10004603 to i32*
  store i32 %v0_10004603, i32* %v3_10004603, align 4
  store i32 %v2_100045bb, i32* @ecx, align 4
  %v1_10004607 = call i32 @function_1000d150(i32 0)
  store i32 %v1_10004607, i32* %eax.global-to-local, align 4
  %v1_1000460f = load i32, i32* @esp, align 4
  %v2_1000460f = add i32 %v1_1000460f, -4
  %v3_1000460f = inttoptr i32 %v2_1000460f to i32*
  store i32 %v2_100045bb, i32* %v3_1000460f, align 4
  %v0_10004610 = load i32, i32* @ebx, align 4
  %v1_10004610 = add i32 %v0_10004610, 264
  store i32 %v1_10004610, i32* @ecx, align 4
  %v1_10004616 = call i32 @function_10004430(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10004616, i32* %eax.global-to-local, align 4
  br i1 %v2_100045e0, label %dec_label_pc_10004628, label %dec_label_pc_1000463f

dec_label_pc_10004628:                            ; preds = %dec_label_pc_10004603
  %v3_10004628 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_10004628, i32* %eax.global-to-local, align 4
  %v1_1000462b = icmp eq i32 %v3_10004628, 0
  br i1 %v1_1000462b, label %dec_label_pc_1000463f, label %dec_label_pc_1000462f

dec_label_pc_1000462f:                            ; preds = %dec_label_pc_10004628
  %v0_1000462f = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000462f, i32* %edx.global-to-local, align 4
  %v1_10004635 = inttoptr i32 %v0_1000462f to i32*
  %v2_10004635 = load i32, i32* %v1_10004635, align 4
  store i32 %v2_10004635, i32* @ecx, align 4
  %v1_10004637 = inttoptr i32 %v2_10004635 to i32*
  %v2_10004637 = load i32, i32* %v1_10004637, align 4
  store i32 %v2_10004637, i32* %edx.global-to-local, align 4
  %v1_10004639 = load i32, i32* @esp, align 4
  %v2_10004639 = add i32 %v1_10004639, -4
  %v3_10004639 = inttoptr i32 %v2_10004639 to i32*
  store i32 %v3_10004628, i32* %v3_10004639, align 4
  %v0_1000463a = load i32, i32* %edx.global-to-local, align 4
  %v1_1000463a = add i32 %v0_1000463a, 20
  %v2_1000463a = inttoptr i32 %v1_1000463a to i32*
  %v3_1000463a = load i32, i32* %v2_1000463a, align 4
  store i32 %v3_1000463a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000463f

dec_label_pc_1000463f:                            ; preds = %dec_label_pc_10004603, %dec_label_pc_1000462f, %dec_label_pc_10004628
  %v0_1000463f = load i32, i32* @esp, align 4
  %v1_1000463f = add i32 %v0_1000463f, -4
  %v2_1000463f = inttoptr i32 %v1_1000463f to i32*
  store i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32* %v2_1000463f, align 4
  %v0_10004644 = load i32, i32* @edi, align 4
  %v2_10004644 = add i32 %v0_1000463f, -8
  %v3_10004644 = inttoptr i32 %v2_10004644 to i32*
  store i32 %v0_10004644, i32* %v3_10004644, align 4
  %v2_10004645 = call i32 @function_10009580(i32* null, i32* nonnull @5)
  store i32 %v2_10004645, i32* %eax.global-to-local, align 4
  %v1_1000464f = icmp eq i32 %v2_10004645, 0
  br i1 %v1_1000464f, label %dec_label_pc_1000469e, label %dec_label_pc_10004653

dec_label_pc_10004653:                            ; preds = %dec_label_pc_1000463f
  %v0_1000464c = load i32, i32* @esp, align 4
  %v1_10004653 = add i32 %v0_1000464c, 4
  %v2_10004653 = inttoptr i32 %v1_10004653 to i32*
  store i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32* %v2_10004653, align 4
  %v1_10004658 = call i32 @function_10009450(i32 ptrtoint (i32* @5 to i32))
  %v3_1000465d = add i32 %v2_10004645, 1
  %v4_1000465d = add i32 %v3_1000465d, %v1_10004658
  store i32 %v4_1000465d, i32* %eax.global-to-local, align 4
  %v0_10004661 = load i32, i32* @esp, align 4
  %v1_10004661 = add i32 %v0_10004661, -4
  %v2_10004661 = inttoptr i32 %v1_10004661 to i32*
  store i32 260, i32* %v2_10004661, align 4
  %v0_10004666 = load i32, i32* %eax.global-to-local, align 4
  %v2_10004666 = add i32 %v0_10004661, -8
  %v3_10004666 = inttoptr i32 %v2_10004666 to i32*
  store i32 %v0_10004666, i32* %v3_10004666, align 4
  store i32 %v16_100045a3, i32* @ecx, align 4
  %v2_1000466d = add i32 %v0_10004661, -12
  %v3_1000466d = inttoptr i32 %v2_1000466d to i32*
  store i32 %v16_100045a3, i32* %v3_1000466d, align 4
  %v2_1000466e = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000466e, i32* %eax.global-to-local, align 4
  store i32 %v16_100045a3, i32* @edx, align 4
  %v1_10004679 = load i32, i32* @esp, align 4
  %v2_10004679 = add i32 %v1_10004679, -4
  %v3_10004679 = inttoptr i32 %v2_10004679 to i32*
  store i32 %v16_100045a3, i32* %v3_10004679, align 4
  %v1_1000467a = call i8* @__strlwr(i8* bitcast (i32* @5 to i8*))
  store i32 %v16_100045a3, i32* %eax.global-to-local, align 4
  %v0_10004685 = load i32, i32* @esp, align 4
  %v1_10004685 = add i32 %v0_10004685, -4
  %v2_10004685 = inttoptr i32 %v1_10004685 to i32*
  store i32 92, i32* %v2_10004685, align 4
  %v2_10004687 = add i32 %v0_10004685, -8
  %v3_10004687 = inttoptr i32 %v2_10004687 to i32*
  store i32 %v16_100045a3, i32* %v3_10004687, align 4
  %v2_10004688 = call i32 @function_10009740(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10004688, i32* %eax.global-to-local, align 4
  %v0_1000468d = load i32, i32* @esp, align 4
  %v2_10004696 = add i32 %v0_1000468d, 24
  %v3_10004696 = inttoptr i32 %v2_10004696 to i32*
  store i32 %v16_100045a3, i32* %v3_10004696, align 4
  %v0_10004697 = load i32, i32* @ebx, align 4
  store i32 %v0_10004697, i32* @ecx, align 4
  %v1_10004699 = call i32 @function_10002d20(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10004699, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000469e

dec_label_pc_1000469e:                            ; preds = %dec_label_pc_10004653, %dec_label_pc_1000463f, %dec_label_pc_100045f9
  %v0_100046a44 = phi i32 [ %v1_10004699, %dec_label_pc_10004653 ], [ 0, %dec_label_pc_1000463f ], [ %v0_100046a45, %dec_label_pc_100045f9 ]
  br label %dec_label_pc_100046a0

dec_label_pc_100046a0:                            ; preds = %dec_label_pc_100045a0.dec_label_pc_100046a0_crit_edge, %dec_label_pc_1000469e
  %v0_100046a4 = phi i32 [ %v0_100046a44, %dec_label_pc_1000469e ], [ %v0_100046a4.pre, %dec_label_pc_100045a0.dec_label_pc_100046a0_crit_edge ]
  ret i32 %v0_100046a4
}

define i32 @function_100046b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100046b0:
  %v0_100046b0 = load i32, i32* @ebp, align 4
  store i32 %arg2, i32* @eax, align 4
  store i32 ptrtoint (i32* @global_var_1002a1b0.186 to i32), i32* @ecx, align 4
  %v3_100046c0 = call i32 @function_100045a0(i32 %arg1, i32 %arg2, i32 %v0_100046b0)
  ret i32 %v3_100046c0
}

define i32 @function_100046d0() local_unnamed_addr {
dec_label_pc_100046d0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-536 = alloca i32, align 4
  %stack_var_-828 = alloca i8*, align 4
  %stack_var_-796 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100046d0 = load i32, i32* @ebp, align 4
  store i32 %v0_100046d0, i32* %stack_var_-4, align 4
  %v4_100046d0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100046d0, i32* @ebp, align 4
  %v16_100046d3 = ptrtoint i32* %stack_var_-796 to i32
  %v0_100046e1 = load i32, i32* @ecx, align 4
  store i32 %v0_100046e1, i32* @edi, align 4
  %v0_100046e3 = call i32 @CommandLine()
  store i32 %v0_100046e3, i32* %eax.global-to-local, align 4
  %v1_100046e5 = inttoptr i32 %v0_100046e3 to i32*
  %v2_100046e5 = load i32, i32* %v1_100046e5, align 4
  store i32 %v2_100046e5, i32* %edx.global-to-local, align 4
  store i32 %v0_100046e3, i32* @ecx, align 4
  %v1_100046eb = add i32 %v2_100046e5, 12
  %v2_100046eb = inttoptr i32 %v1_100046eb to i32*
  %v3_100046eb = load i32, i32* %v2_100046eb, align 4
  store i32 %v3_100046eb, i32* %eax.global-to-local, align 4
  %v1_100046f5 = icmp eq i32 %v3_100046eb, 0
  %v1_100046f7 = icmp eq i1 %v1_100046f5, false
  br i1 %v1_100046f7, label %dec_label_pc_10004902, label %dec_label_pc_100046fd

dec_label_pc_100046fd:                            ; preds = %dec_label_pc_100046d0
  %v0_100046fd = call i32 @CommandLine()
  store i32 %v0_100046fd, i32* %eax.global-to-local, align 4
  %v1_100046ff = inttoptr i32 %v0_100046fd to i32*
  %v2_100046ff = load i32, i32* %v1_100046ff, align 4
  store i32 %v2_100046ff, i32* %edx.global-to-local, align 4
  store i32 %v0_100046fd, i32* @ecx, align 4
  %v1_10004705 = add i32 %v2_100046ff, 12
  %v2_10004705 = inttoptr i32 %v1_10004705 to i32*
  %v3_10004705 = load i32, i32* %v2_10004705, align 4
  store i32 %v3_10004705, i32* %eax.global-to-local, align 4
  %v1_1000470f = icmp eq i32 %v3_10004705, 0
  br i1 %v1_1000470f, label %dec_label_pc_10004902, label %dec_label_pc_10004717

dec_label_pc_10004717:                            ; preds = %dec_label_pc_100046fd
  %v0_10004717 = load i32, i32* @edi, align 4
  %v1_10004717 = inttoptr i32 %v0_10004717 to i8*
  store i8 1, i8* %v1_10004717, align 1
  %v0_10004721 = call i32 @CommandLine()
  store i32 %v0_10004721, i32* %eax.global-to-local, align 4
  %v1_10004723 = inttoptr i32 %v0_10004721 to i32*
  %v2_10004723 = load i32, i32* %v1_10004723, align 4
  store i32 %v2_10004723, i32* %edx.global-to-local, align 4
  %v1_10004725 = add i32 %v2_10004723, 12
  %v2_10004725 = inttoptr i32 %v1_10004725 to i32*
  %v3_10004725 = load i32, i32* %v2_10004725, align 4
  store i32 %v3_10004725, i32* %edx.global-to-local, align 4
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10022c70.188, i32 0, i32 0), i8** %stack_var_-828, align 4
  %v4_1000472c = ptrtoint i8** %stack_var_-828 to i32
  store i32 %v0_10004721, i32* @ecx, align 4
  %v1_10004735 = icmp eq i32 %v0_10004721, 0
  br i1 %v1_10004735, label %dec_label_pc_1000479d, label %dec_label_pc_10004739

dec_label_pc_10004739:                            ; preds = %dec_label_pc_10004717
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000479d

dec_label_pc_1000479d:                            ; preds = %dec_label_pc_10004739, %dec_label_pc_10004717
  %v0_1000479d = load i32, i32* @esi, align 4
  %v2_1000479d = add i32 %v4_1000472c, -4
  %v3_1000479d = inttoptr i32 %v2_1000479d to i32*
  store i32 %v0_1000479d, i32* %v3_1000479d, align 4
  %v0_1000479e = call i32 @CommandLine()
  store i32 %v0_1000479e, i32* %eax.global-to-local, align 4
  %v1_100047a0 = inttoptr i32 %v0_1000479e to i32*
  %v2_100047a0 = load i32, i32* %v1_100047a0, align 4
  store i32 %v2_100047a0, i32* %edx.global-to-local, align 4
  %v0_100047a2 = load i32, i32* @esp, align 4
  %v1_100047a2 = add i32 %v0_100047a2, -4
  %v2_100047a2 = inttoptr i32 %v1_100047a2 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_10022b78.131 to i32), i32* %v2_100047a2, align 4
  %v0_100047a7 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_100047a7, i32* @ecx, align 4
  %v0_100047a9 = load i32, i32* %edx.global-to-local, align 4
  %v1_100047a9 = add i32 %v0_100047a9, 32
  %v2_100047a9 = inttoptr i32 %v1_100047a9 to i32*
  %v3_100047a9 = load i32, i32* %v2_100047a9, align 4
  store i32 %v3_100047a9, i32* %eax.global-to-local, align 4
  %v1_100047ac = add i32 %v0_100047a2, -8
  %v2_100047ac = inttoptr i32 %v1_100047ac to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_100047ac, align 4
  %v0_100047b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_100047b3 = add i32 %v0_100047a2, -12
  %v3_100047b3 = inttoptr i32 %v2_100047b3 to i32*
  store i32 %v0_100047b3, i32* %v3_100047b3, align 4
  %v1_100047b4 = add i32 %v0_100047a2, -16
  %v2_100047b4 = inttoptr i32 %v1_100047b4 to i32*
  store i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32* %v2_100047b4, align 4
  %v1_100047b9 = add i32 %v0_100047a2, -20
  %v2_100047b9 = inttoptr i32 %v1_100047b9 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022c68.189 to i32), i32* %v2_100047b9, align 4
  %v2_100047be = ptrtoint i32* %stack_var_-536 to i32
  store i32 %v2_100047be, i32* @ecx, align 4
  %v1_100047c4 = add i32 %v0_100047a2, -24
  %v2_100047c4 = inttoptr i32 %v1_100047c4 to i32*
  store i32 260, i32* %v2_100047c4, align 4
  %v2_100047c9 = add i32 %v0_100047a2, -28
  %v3_100047c9 = inttoptr i32 %v2_100047c9 to i32*
  store i32 %v2_100047be, i32* %v3_100047c9, align 4
  %v2_100047ca = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_100047ca, i32* %eax.global-to-local, align 4
  store i32 %v2_100047be, i32* @edx, align 4
  %v0_100047d5 = load i32, i32* @esp, align 4
  %v1_100047d5 = add i32 %v0_100047d5, -4
  %v2_100047d5 = inttoptr i32 %v1_100047d5 to i32*
  store i32 92, i32* %v2_100047d5, align 4
  %v2_100047d7 = add i32 %v0_100047d5, -8
  %v3_100047d7 = inttoptr i32 %v2_100047d7 to i32*
  store i32 %v2_100047be, i32* %v3_100047d7, align 4
  %v2_100047d8 = call i32 @function_10009740(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100047be, i32* %eax.global-to-local, align 4
  %v1_100047e3 = load i32, i32* @esp, align 4
  %v2_100047e3 = add i32 %v1_100047e3, -4
  %v3_100047e3 = inttoptr i32 %v2_100047e3 to i32*
  store i32 %v2_100047be, i32* %v3_100047e3, align 4
  %v1_100047e4 = call i8* @__strlwr(i8* bitcast (i32* @5 to i8*))
  %v3_100047e4 = ptrtoint i8* %v1_100047e4 to i32
  store i32 %v3_100047e4, i32* %eax.global-to-local, align 4
  %v0_100047e9 = load i32, i32* @esp, align 4
  %v2_100047f2 = add i32 %v0_100047e9, 28
  %v3_100047f2 = inttoptr i32 %v2_100047f2 to i32*
  store i32 %v2_100047be, i32* %v3_100047f2, align 4
  %v0_100047f3 = load i32, i32* @edi, align 4
  %v1_100047f3 = add i32 %v0_100047f3, 316
  store i32 %v1_100047f3, i32* @ecx, align 4
  %v1_100047f9 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_100047f9, i32* %eax.global-to-local, align 4
  %v0_100047fe = load i32, i32* @edi, align 4
  %v1_100047fe = add i32 %v0_100047fe, 300
  store i32 %v1_100047fe, i32* @ecx, align 4
  %v0_10004804 = call i32 @function_1000d070()
  store i32 %v0_10004804, i32* %eax.global-to-local, align 4
  %v1_10004809 = load i32, i32* @esp, align 4
  %v2_10004809 = add i32 %v1_10004809, -4
  %v3_10004809 = inttoptr i32 %v2_10004809 to i32*
  store i32 %v0_10004804, i32* %v3_10004809, align 4
  %v0_1000480a = load i32, i32* @edi, align 4
  %v1_1000480a = add i32 %v0_1000480a, 316
  store i32 %v1_1000480a, i32* @ecx, align 4
  %v0_10004810 = call i32 @function_1000d070()
  store i32 %v0_10004810, i32* %eax.global-to-local, align 4
  %v1_10004815 = load i32, i32* @esp, align 4
  %v2_10004815 = add i32 %v1_10004815, -4
  %v3_10004815 = inttoptr i32 %v2_10004815 to i32*
  store i32 %v0_10004810, i32* %v3_10004815, align 4
  %v1_10004816 = add i32 %v1_10004815, -8
  %v2_10004816 = inttoptr i32 %v1_10004816 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022c60.190 to i32), i32* %v2_10004816, align 4
  store i32 %v16_100046d3, i32* %edx.global-to-local, align 4
  %v1_10004821 = add i32 %v1_10004815, -12
  %v2_10004821 = inttoptr i32 %v1_10004821 to i32*
  store i32 260, i32* %v2_10004821, align 4
  %v2_10004826 = add i32 %v1_10004815, -16
  %v3_10004826 = inttoptr i32 %v2_10004826 to i32*
  store i32 %v16_100046d3, i32* %v3_10004826, align 4
  %v2_10004827 = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_10004827, i32* %eax.global-to-local, align 4
  %v0_1000482c = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_1000482c, i32* @ecx, align 4
  %v1_10004832 = inttoptr i32 %v0_1000482c to i32*
  %v2_10004832 = load i32, i32* %v1_10004832, align 4
  store i32 %v2_10004832, i32* %eax.global-to-local, align 4
  %v1_10004834 = add i32 %v2_10004832, 80
  %v2_10004834 = inttoptr i32 %v1_10004834 to i32*
  %v3_10004834 = load i32, i32* %v2_10004834, align 4
  store i32 %v3_10004834, i32* %eax.global-to-local, align 4
  %v0_10004837 = load i32, i32* @esp, align 4
  %v1_1000483a = add i32 %v0_10004837, 16
  %v2_1000483a = inttoptr i32 %v1_1000483a to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100222cc.166 to i32), i32* %v2_1000483a, align 4
  store i32 %v16_100046d3, i32* %edx.global-to-local, align 4
  %v2_10004845 = add i32 %v0_10004837, 12
  %v3_10004845 = inttoptr i32 %v2_10004845 to i32*
  store i32 %v16_100046d3, i32* %v3_10004845, align 4
  %v0_10004848 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10004848, i32* @ecx, align 4
  %v1_1000484e = inttoptr i32 %v0_10004848 to i32*
  %v2_1000484e = load i32, i32* %v1_1000484e, align 4
  store i32 %v2_1000484e, i32* %edx.global-to-local, align 4
  %v1_10004850 = add i32 %v2_1000484e, 272
  %v2_10004850 = inttoptr i32 %v1_10004850 to i32*
  %v3_10004850 = load i32, i32* %v2_10004850, align 4
  store i32 %v3_10004850, i32* %eax.global-to-local, align 4
  %v1_10004856 = add i32 %v0_10004837, 8
  %v2_10004856 = inttoptr i32 %v1_10004856 to i32*
  store i32 268453552, i32* %v2_10004856, align 4
  %v0_1000485d = call i32 @CommandLine()
  store i32 %v0_1000485d, i32* %eax.global-to-local, align 4
  %v1_1000485f = inttoptr i32 %v0_1000485d to i32*
  %v2_1000485f = load i32, i32* %v1_1000485f, align 4
  store i32 %v2_1000485f, i32* @edx, align 4
  store i32 %v0_1000485d, i32* @ecx, align 4
  %v1_10004863 = add i32 %v2_1000485f, 40
  %v2_10004863 = inttoptr i32 %v1_10004863 to i32*
  %v3_10004863 = load i32, i32* %v2_10004863, align 4
  store i32 %v3_10004863, i32* %eax.global-to-local, align 4
  %v0_10004866 = load i32, i32* @esp, align 4
  %v1_10004866 = add i32 %v0_10004866, -4
  %v2_10004866 = inttoptr i32 %v1_10004866 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022c54.191 to i32), i32* %v2_10004866, align 4
  %v1_1000486d = icmp eq i32 %v3_10004863, 0
  %v1_1000486f = icmp eq i1 %v1_1000486d, false
  br i1 %v1_1000486f, label %dec_label_pc_100048d9, label %dec_label_pc_10004871

dec_label_pc_10004871:                            ; preds = %dec_label_pc_1000479d
  %v0_10004871 = call i32 @CommandLine()
  store i32 %v0_10004871, i32* %eax.global-to-local, align 4
  %v1_10004873 = inttoptr i32 %v0_10004871 to i32*
  %v2_10004873 = load i32, i32* %v1_10004873, align 4
  store i32 %v2_10004873, i32* @edx, align 4
  store i32 %v0_10004871, i32* @ecx, align 4
  %v1_10004877 = add i32 %v2_10004873, 40
  %v2_10004877 = inttoptr i32 %v1_10004877 to i32*
  %v3_10004877 = load i32, i32* %v2_10004877, align 4
  store i32 %v3_10004877, i32* %eax.global-to-local, align 4
  %v0_1000487a = load i32, i32* @esp, align 4
  %v1_1000487a = add i32 %v0_1000487a, -4
  %v2_1000487a = inttoptr i32 %v1_1000487a to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022c48.192 to i32), i32* %v2_1000487a, align 4
  %v1_10004881 = icmp eq i32 %v3_10004877, 0
  %v1_10004883 = icmp eq i1 %v1_10004881, false
  br i1 %v1_10004883, label %dec_label_pc_100048d9, label %dec_label_pc_10004885

dec_label_pc_10004885:                            ; preds = %dec_label_pc_10004871
  %v0_10004885 = load i32, i32* @edi, align 4
  %v1_10004885 = add i32 %v0_10004885, 264
  store i32 %v1_10004885, i32* @ecx, align 4
  %v0_1000488b = call i32 @function_10004260()
  store i32 %v0_1000488b, i32* %eax.global-to-local, align 4
  %v0_10004890 = load i32, i32* @edi, align 4
  %v1_10004890 = add i32 %v0_10004890, 300
  store i32 %v1_10004890, i32* @ecx, align 4
  %v0_10004896 = call i32 @function_1000d070()
  store i32 %v0_10004896, i32* %eax.global-to-local, align 4
  %v0_1000489b = load i32, i32* @edi, align 4
  %v1_1000489b = add i32 %v0_1000489b, 316
  store i32 %v1_1000489b, i32* @ecx, align 4
  store i32 %v0_10004896, i32* @ebx, align 4
  %v0_100048a3 = call i32 @function_1000d070()
  store i32 %v0_100048a3, i32* %eax.global-to-local, align 4
  %v0_100048a8 = load i32, i32* @esp, align 4
  %v1_100048a8 = add i32 %v0_100048a8, -4
  %v2_100048a8 = inttoptr i32 %v1_100048a8 to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_10022c14.163 to i32), i32* %v2_100048a8, align 4
  %v0_100048ad = load i32, i32* @ebx, align 4
  %v2_100048ad = add i32 %v0_100048a8, -8
  %v3_100048ad = inttoptr i32 %v2_100048ad to i32*
  store i32 %v0_100048ad, i32* %v3_100048ad, align 4
  %v0_100048ae = load i32, i32* %eax.global-to-local, align 4
  %v2_100048ae = add i32 %v0_100048a8, -12
  %v3_100048ae = inttoptr i32 %v2_100048ae to i32*
  store i32 %v0_100048ae, i32* %v3_100048ae, align 4
  %v2_100048af = ptrtoint i32* %stack_var_-276 to i32
  store i32 %v2_100048af, i32* @ecx, align 4
  %v1_100048b5 = add i32 %v0_100048a8, -16
  %v2_100048b5 = inttoptr i32 %v1_100048b5 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022c08.164 to i32), i32* %v2_100048b5, align 4
  %v2_100048ba = add i32 %v0_100048a8, -20
  %v3_100048ba = inttoptr i32 %v2_100048ba to i32*
  store i32 %v2_100048af, i32* %v3_100048ba, align 4
  %v1_100048bb = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  store i32 %v1_100048bb, i32* %eax.global-to-local, align 4
  %v0_100048c0 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_100048c0, i32* @ecx, align 4
  %v1_100048c6 = inttoptr i32 %v0_100048c0 to i32*
  %v2_100048c6 = load i32, i32* %v1_100048c6, align 4
  store i32 %v2_100048c6, i32* @edx, align 4
  %v0_100048c8 = load i32, i32* @esp, align 4
  %v1_100048cb = add i32 %v1_100048bb, 5
  store i32 %v1_100048cb, i32* %eax.global-to-local, align 4
  %v1_100048ce = add i32 %v0_100048c8, 16
  %v2_100048ce = inttoptr i32 %v1_100048ce to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100222cc.166 to i32), i32* %v2_100048ce, align 4
  %v0_100048d3 = load i32, i32* %eax.global-to-local, align 4
  %v2_100048d3 = add i32 %v0_100048c8, 12
  %v3_100048d3 = inttoptr i32 %v2_100048d3 to i32*
  store i32 %v0_100048d3, i32* %v3_100048d3, align 4
  %v0_100048d4 = load i32, i32* @edx, align 4
  %v1_100048d4 = add i32 %v0_100048d4, 72
  %v2_100048d4 = inttoptr i32 %v1_100048d4 to i32*
  %v3_100048d4 = load i32, i32* %v2_100048d4, align 4
  store i32 %v3_100048d4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100048d9

dec_label_pc_100048d9:                            ; preds = %dec_label_pc_10004885, %dec_label_pc_10004871, %dec_label_pc_1000479d
  %v1_100048da = phi i32 [ %v2_100048d3, %dec_label_pc_10004885 ], [ %v1_1000487a, %dec_label_pc_10004871 ], [ %v1_10004866, %dec_label_pc_1000479d ]
  %v0_100048d9 = load i32, i32* @edi, align 4
  %v1_100048d9 = add i32 %v0_100048d9, 1
  store i32 %v1_100048d9, i32* @edi, align 4
  %v2_100048da = add i32 %v1_100048da, -4
  %v3_100048da = inttoptr i32 %v2_100048da to i32*
  store i32 %v1_100048d9, i32* %v3_100048da, align 4
  %v1_100048db = add i32 %v1_100048da, -8
  %v2_100048db = inttoptr i32 %v1_100048db to i32*
  store i32 260, i32* %v2_100048db, align 4
  %v2_100048e0 = call i32 @GetCurrentDirectoryA(i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_100048e0, i32* %eax.global-to-local, align 4
  %v0_100048e6 = load i32, i32* @esp, align 4
  %v1_100048e6 = add i32 %v0_100048e6, -4
  %v2_100048e6 = inttoptr i32 %v1_100048e6 to i32*
  store i32 1, i32* %v2_100048e6, align 4
  %v1_100048e8 = add i32 %v0_100048e6, -8
  %v2_100048e8 = inttoptr i32 %v1_100048e8 to i32*
  store i32 260, i32* %v2_100048e8, align 4
  %v1_100048ed = add i32 %v0_100048e6, -12
  %v2_100048ed = inttoptr i32 %v1_100048ed to i32*
  store i32 ptrtoint (i32* @global_var_100222c8.17 to i32), i32* %v2_100048ed, align 4
  %v0_100048f2 = load i32, i32* @edi, align 4
  %v2_100048f2 = add i32 %v0_100048e6, -16
  %v3_100048f2 = inttoptr i32 %v2_100048f2 to i32*
  store i32 %v0_100048f2, i32* %v3_100048f2, align 4
  %v3_100048f3 = call i32 @function_10009650(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_100048f3, i32* %eax.global-to-local, align 4
  %v0_100048f8 = load i32, i32* @edi, align 4
  %v1_100048f8 = load i32, i32* @esp, align 4
  %v2_100048f8 = add i32 %v1_100048f8, -4
  %v3_100048f8 = inttoptr i32 %v2_100048f8 to i32*
  store i32 %v0_100048f8, i32* %v3_100048f8, align 4
  %v1_100048f9 = call i8* @__strlwr(i8* bitcast (i32* @5 to i8*))
  %v3_100048f9 = ptrtoint i8* %v1_100048f9 to i32
  store i32 %v3_100048f9, i32* %eax.global-to-local, align 4
  %v0_100048fe = load i32, i32* @esp, align 4
  %v1_100048fe = add i32 %v0_100048fe, 20
  %v1_10004901 = inttoptr i32 %v1_100048fe to i32*
  %v2_10004901 = load i32, i32* %v1_10004901, align 4
  store i32 %v2_10004901, i32* @esi, align 4
  br label %dec_label_pc_10004902

dec_label_pc_10004902:                            ; preds = %dec_label_pc_100048d9, %dec_label_pc_100046fd, %dec_label_pc_100046d0
  %v0_10004907 = phi i32 [ %v3_100048f9, %dec_label_pc_100048d9 ], [ 0, %dec_label_pc_100046fd ], [ %v3_100046eb, %dec_label_pc_100046d0 ]
  ret i32 %v0_10004907
}

define i32 @function_10004910() local_unnamed_addr {
dec_label_pc_10004910:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-288 = alloca i8*, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004910 = load i32, i32* @ebp, align 4
  store i32 %v0_10004910, i32* %stack_var_-4, align 4
  %v4_10004910 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004910, i32* @ebp, align 4
  %v15_10004913 = ptrtoint i32* %stack_var_-276 to i32
  %v0_10004919 = load i32, i32* @esi, align 4
  store i32 %v0_10004919, i32* %stack_var_-280, align 4
  %v4_10004919 = ptrtoint i32* %stack_var_-280 to i32
  %v0_1000491a = load i32, i32* @ecx, align 4
  store i32 %v0_1000491a, i32* @esi, align 4
  %tmp19 = trunc i32 %v0_1000491a to i8
  %v9_1000491c = icmp eq i8 %tmp19, 0
  br i1 %v9_1000491c, label %dec_label_pc_10004a2b, label %dec_label_pc_10004925

dec_label_pc_10004925:                            ; preds = %dec_label_pc_10004910
  %v1_10004925 = inttoptr i32 %v0_1000491a to i8*
  store i8 0, i8* %v1_10004925, align 1
  %v0_10004928 = call i32 @CommandLine()
  store i32 %v0_10004928, i32* %eax.global-to-local, align 4
  %v1_1000492e = inttoptr i32 %v0_10004928 to i32*
  %v2_1000492e = load i32, i32* %v1_1000492e, align 4
  store i32 %v2_1000492e, i32* %edx.global-to-local, align 4
  store i32 %v0_10004928, i32* @ecx, align 4
  %v1_10004934 = add i32 %v2_1000492e, 12
  %v2_10004934 = inttoptr i32 %v1_10004934 to i32*
  %v3_10004934 = load i32, i32* %v2_10004934, align 4
  store i32 %v3_10004934, i32* %eax.global-to-local, align 4
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_10022c7c.187, i32 0, i32 0), i8** %stack_var_-288, align 4
  %v4_10004937 = ptrtoint i8** %stack_var_-288 to i32
  %v1_1000493e = icmp eq i32 %v3_10004934, 0
  br i1 %v1_1000493e, label %dec_label_pc_10004957, label %dec_label_pc_10004942

dec_label_pc_10004942:                            ; preds = %dec_label_pc_10004925
  %v0_10004942 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10004942, i32* @ecx, align 4
  %v1_10004948 = inttoptr i32 %v0_10004942 to i32*
  %v2_10004948 = load i32, i32* %v1_10004948, align 4
  store i32 %v2_10004948, i32* %edx.global-to-local, align 4
  %v1_1000494a = add i32 %v2_10004948, 276
  %v2_1000494a = inttoptr i32 %v1_1000494a to i32*
  %v3_1000494a = load i32, i32* %v2_1000494a, align 4
  store i32 %v3_1000494a, i32* %eax.global-to-local, align 4
  store i32 268453552, i32* %stack_var_-292, align 4
  %v3_10004950 = ptrtoint i32* %stack_var_-292 to i32
  br label %dec_label_pc_10004957

dec_label_pc_10004957:                            ; preds = %dec_label_pc_10004942, %dec_label_pc_10004925
  %v1_10004957 = phi i32 [ %v3_10004950, %dec_label_pc_10004942 ], [ %v4_10004937, %dec_label_pc_10004925 ]
  %v0_10004957 = load i32, i32* @ebx, align 4
  %v2_10004957 = add i32 %v1_10004957, -4
  %v3_10004957 = inttoptr i32 %v2_10004957 to i32*
  store i32 %v0_10004957, i32* %v3_10004957, align 4
  %v0_10004958 = load i32, i32* @edi, align 4
  %v2_10004958 = add i32 %v1_10004957, -8
  %v3_10004958 = inttoptr i32 %v2_10004958 to i32*
  store i32 %v0_10004958, i32* %v3_10004958, align 4
  %v0_10004959 = load i32, i32* @esi, align 4
  %v1_10004959 = add i32 %v0_10004959, 300
  store i32 %v1_10004959, i32* @ecx, align 4
  %v0_1000495f = call i32 @function_1000d070()
  store i32 %v0_1000495f, i32* %eax.global-to-local, align 4
  %v0_10004964 = load i32, i32* @esi, align 4
  %v1_10004964 = add i32 %v0_10004964, 316
  store i32 %v1_10004964, i32* @ecx, align 4
  %v0_1000496d = call i32 @function_1000d070()
  store i32 %v0_1000496d, i32* %eax.global-to-local, align 4
  store i32 %v0_1000495f, i32* @ecx, align 4
  %v0_10004975 = load i32, i32* @esp, align 4
  %v1_10004975 = add i32 %v0_10004975, -4
  %v2_10004975 = inttoptr i32 %v1_10004975 to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_10022c14.163 to i32), i32* %v2_10004975, align 4
  %v0_1000497a = load i32, i32* @ecx, align 4
  %v2_1000497a = add i32 %v0_10004975, -8
  %v3_1000497a = inttoptr i32 %v2_1000497a to i32*
  store i32 %v0_1000497a, i32* %v3_1000497a, align 4
  %v0_1000497b = load i32, i32* %eax.global-to-local, align 4
  %v2_1000497b = add i32 %v0_10004975, -12
  %v3_1000497b = inttoptr i32 %v2_1000497b to i32*
  store i32 %v0_1000497b, i32* %v3_1000497b, align 4
  store i32 %v15_10004913, i32* %edx.global-to-local, align 4
  %v1_10004982 = add i32 %v0_10004975, -16
  %v2_10004982 = inttoptr i32 %v1_10004982 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022c08.164 to i32), i32* %v2_10004982, align 4
  %v2_10004987 = add i32 %v0_10004975, -20
  %v3_10004987 = inttoptr i32 %v2_10004987 to i32*
  store i32 %v15_10004913, i32* %v3_10004987, align 4
  %v1_10004988 = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v1_1000498d = add i32 %v1_10004988, 5
  store i32 %v1_1000498d, i32* %eax.global-to-local, align 4
  %v0_10004990 = load i32, i32* @esp, align 4
  %v1_10004990 = add i32 %v0_10004990, -4
  %v2_10004990 = inttoptr i32 %v1_10004990 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100222cc.166 to i32), i32* %v2_10004990, align 4
  %v0_10004995 = load i32, i32* %eax.global-to-local, align 4
  %v2_10004995 = add i32 %v0_10004990, -8
  %v3_10004995 = inttoptr i32 %v2_10004995 to i32*
  store i32 %v0_10004995, i32* %v3_10004995, align 4
  %v2_10004996 = call i32 @function_10006220(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10004996, i32* %eax.global-to-local, align 4
  %v0_1000499e = load i32, i32* @esi, align 4
  %v1_1000499e = add i32 %v0_1000499e, 300
  store i32 %v1_1000499e, i32* @ecx, align 4
  %v0_100049a4 = call i32 @function_1000d070()
  store i32 %v0_100049a4, i32* %eax.global-to-local, align 4
  %v0_100049a9 = load i32, i32* @esi, align 4
  %v1_100049a9 = add i32 %v0_100049a9, 316
  store i32 %v1_100049a9, i32* @ecx, align 4
  store i32 %v0_100049a4, i32* @edi, align 4
  %v0_100049b1 = call i32 @function_1000d070()
  store i32 %v0_100049b1, i32* %eax.global-to-local, align 4
  %v0_100049b6 = load i32, i32* @esp, align 4
  %v1_100049b6 = add i32 %v0_100049b6, -4
  %v2_100049b6 = inttoptr i32 %v1_100049b6 to i32*
  store i32 ptrtoint ([11 x i8]* @global_var_10022c8c.193 to i32), i32* %v2_100049b6, align 4
  %v0_100049bb = load i32, i32* @edi, align 4
  %v2_100049bb = add i32 %v0_100049b6, -8
  %v3_100049bb = inttoptr i32 %v2_100049bb to i32*
  store i32 %v0_100049bb, i32* %v3_100049bb, align 4
  %v0_100049bc = load i32, i32* %eax.global-to-local, align 4
  %v2_100049bc = add i32 %v0_100049b6, -12
  %v3_100049bc = inttoptr i32 %v2_100049bc to i32*
  store i32 %v0_100049bc, i32* %v3_100049bc, align 4
  store i32 %v15_10004913, i32* %eax.global-to-local, align 4
  %v1_100049c3 = add i32 %v0_100049b6, -16
  %v2_100049c3 = inttoptr i32 %v1_100049c3 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022c08.164 to i32), i32* %v2_100049c3, align 4
  %v2_100049c8 = add i32 %v0_100049b6, -20
  %v3_100049c8 = inttoptr i32 %v2_100049c8 to i32*
  store i32 %v15_10004913, i32* %v3_100049c8, align 4
  %v1_100049c9 = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v1_100049ce = add i32 %v1_100049c9, 5
  store i32 %v1_100049ce, i32* %eax.global-to-local, align 4
  %v0_100049d1 = load i32, i32* @esp, align 4
  %v1_100049d1 = add i32 %v0_100049d1, -4
  %v2_100049d1 = inttoptr i32 %v1_100049d1 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100222cc.166 to i32), i32* %v2_100049d1, align 4
  %v0_100049d6 = load i32, i32* %eax.global-to-local, align 4
  %v2_100049d6 = add i32 %v0_100049d1, -8
  %v3_100049d6 = inttoptr i32 %v2_100049d6 to i32*
  store i32 %v0_100049d6, i32* %v3_100049d6, align 4
  %v2_100049d7 = call i32 @function_10006220(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100049d7, i32* %eax.global-to-local, align 4
  %v0_100049df = load i32, i32* @esi, align 4
  %v1_100049df = add i32 %v0_100049df, 264
  store i32 %v1_100049df, i32* @ecx, align 4
  %v0_100049e5 = call i32 @function_10004260()
  store i32 %v0_100049e5, i32* @eax, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_100049ef = load i32, i32* @esi, align 4
  %v2_100049ef = add i32 %v1_100049ef, 288
  %v3_100049ef = inttoptr i32 %v2_100049ef to i32*
  store i32 -1, i32* %v3_100049ef, align 4
  %v0_100049f5 = load i32, i32* @esi, align 4
  %v1_100049f5 = add i32 %v0_100049f5, 276
  %v2_100049f5 = inttoptr i32 %v1_100049f5 to i32*
  %v3_100049f5 = load i32, i32* %v2_100049f5, align 4
  %v4_100049f5 = load i32, i32* %ebx.global-to-local, align 4
  %v5_100049fb = icmp slt i32 %v3_100049f5, %v4_100049f5
  br i1 %v5_100049fb, label %dec_label_pc_10004a23, label %dec_label_pc_100049fd

dec_label_pc_100049fd:                            ; preds = %dec_label_pc_10004957
  %v1_100049fd = add i32 %v0_100049f5, 268
  %v2_100049fd = inttoptr i32 %v1_100049fd to i32*
  %v3_100049fd = load i32, i32* %v2_100049fd, align 4
  store i32 %v3_100049fd, i32* @eax, align 4
  %v12_10004a03 = icmp eq i32 %v3_100049fd, %v4_100049f5
  br i1 %v12_10004a03, label %dec_label_pc_10004a1d, label %dec_label_pc_10004a07

dec_label_pc_10004a07:                            ; preds = %dec_label_pc_100049fd
  %v0_10004a07 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10004a07, i32* @ecx, align 4
  %v1_10004a0d = inttoptr i32 %v0_10004a07 to i32*
  %v2_10004a0d = load i32, i32* %v1_10004a0d, align 4
  store i32 %v2_10004a0d, i32* @ecx, align 4
  %v1_10004a0f = inttoptr i32 %v2_10004a0d to i32*
  %v2_10004a0f = load i32, i32* %v1_10004a0f, align 4
  store i32 %v2_10004a0f, i32* %edx.global-to-local, align 4
  %v1_10004a11 = load i32, i32* @esp, align 4
  %v2_10004a11 = add i32 %v1_10004a11, -4
  %v3_10004a11 = inttoptr i32 %v2_10004a11 to i32*
  store i32 %v3_100049fd, i32* %v3_10004a11, align 4
  %v0_10004a12 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004a12 = add i32 %v0_10004a12, 20
  %v2_10004a12 = inttoptr i32 %v1_10004a12 to i32*
  %v3_10004a12 = load i32, i32* %v2_10004a12, align 4
  store i32 %v3_10004a12, i32* @eax, align 4
  %v0_10004a17 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10004a17 = load i32, i32* @esi, align 4
  %v2_10004a17 = add i32 %v1_10004a17, 268
  %v3_10004a17 = inttoptr i32 %v2_10004a17 to i32*
  store i32 %v0_10004a17, i32* %v3_10004a17, align 4
  %v0_10004a1d.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_10004a1d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10004a1d

dec_label_pc_10004a1d:                            ; preds = %dec_label_pc_10004a07, %dec_label_pc_100049fd
  %v1_10004a1d = phi i32 [ %v1_10004a1d.pre, %dec_label_pc_10004a07 ], [ %v0_100049f5, %dec_label_pc_100049fd ]
  %v0_10004a1d = phi i32 [ %v0_10004a1d.pre, %dec_label_pc_10004a07 ], [ %v4_100049f5, %dec_label_pc_100049fd ]
  %v2_10004a1d = add i32 %v1_10004a1d, 272
  %v3_10004a1d = inttoptr i32 %v2_10004a1d to i32*
  store i32 %v0_10004a1d, i32* %v3_10004a1d, align 4
  %v1_10004a23.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10004a23

dec_label_pc_10004a23:                            ; preds = %dec_label_pc_10004a1d, %dec_label_pc_10004957
  %v1_10004a23 = phi i32 [ %v1_10004a23.pre, %dec_label_pc_10004a1d ], [ %v0_100049f5, %dec_label_pc_10004957 ]
  %v0_10004a23 = load i32, i32* %edi.global-to-local, align 4
  %v2_10004a23 = add i32 %v1_10004a23, 292
  %v3_10004a23 = inttoptr i32 %v2_10004a23 to i32*
  store i32 %v0_10004a23, i32* %v3_10004a23, align 4
  %v0_10004a29 = load i32, i32* @esp, align 4
  %v1_10004a29 = inttoptr i32 %v0_10004a29 to i32*
  %v2_10004a29 = load i32, i32* %v1_10004a29, align 4
  store i32 %v2_10004a29, i32* %edi.global-to-local, align 4
  %v3_10004a29 = add i32 %v0_10004a29, 4
  %v1_10004a2a = inttoptr i32 %v3_10004a29 to i32*
  %v2_10004a2a = load i32, i32* %v1_10004a2a, align 4
  store i32 %v2_10004a2a, i32* %ebx.global-to-local, align 4
  %v3_10004a2a = add i32 %v0_10004a29, 8
  br label %dec_label_pc_10004a2b

dec_label_pc_10004a2b:                            ; preds = %dec_label_pc_10004a23, %dec_label_pc_10004910
  %v0_10004a2b = phi i32 [ %v3_10004a2a, %dec_label_pc_10004a23 ], [ %v4_10004919, %dec_label_pc_10004910 ]
  %v1_10004a2b = inttoptr i32 %v0_10004a2b to i32*
  %v2_10004a2b = load i32, i32* %v1_10004a2b, align 4
  store i32 %v2_10004a2b, i32* @esi, align 4
  %v0_10004a2f = load i32, i32* @eax, align 4
  ret i32 %v0_10004a2f
}

define i32 @function_10004a30() {
dec_label_pc_10004a30:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-559 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-572 = alloca i32, align 4
  %stack_var_-568 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004a30 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_10004a30, i32* %stack_var_-4, align 4
  %v4_10004a30 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004a30, i32* @ebp, align 4
  %v16_10004a33 = ptrtoint i32* %stack_var_-568 to i32
  %v0_10004a39 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10004a39, i32* %stack_var_-572, align 4
  %v0_10004a3a = load i32, i32* @ecx, align 4
  store i32 %v0_10004a3a, i32* @esi, align 4
  %v1_10004a3c = call i32 @function_10008620(i32 %v0_10004a39)
  store i32 %v1_10004a3c, i32* %stack_var_-8, align 4
  %v2_10004a44 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_10004a44, i32* %eax.global-to-local, align 4
  %v4_10004a4a = call i32 @function_1000de50(i32* nonnull %stack_var_-8, i32 1)
  store i32 %v4_10004a4a, i32* @eax, align 4
  %v3_10004a53 = call i32 @function_1000d1e0(i32 0, i32 0)
  store i32 %v3_10004a53, i32* @eax, align 4
  store i32 %v2_10004a44, i32* @ecx, align 4
  %v3_10004a5e = call i32 @function_1000f970(i32* nonnull %stack_var_-8, i32 1)
  store i32 %v3_10004a5e, i32* @eax, align 4
  store i32 %v2_10004a44, i32* %edx.global-to-local, align 4
  %v0_10004a69 = call i32 @__heap_term()
  store i32 %v0_10004a69, i32* %eax.global-to-local, align 4
  %v0_10004a71 = load i32, i32* @global_var_1002b95c.165, align 4
  %v7_10004a71 = icmp eq i32 %v0_10004a71, 0
  br i1 %v7_10004a71, label %dec_label_pc_10004c1c, label %dec_label_pc_10004a7e

dec_label_pc_10004a7e:                            ; preds = %dec_label_pc_10004a30
  %v0_10004a7e = load i32, i32* @global_var_1002b968.129, align 4
  %v7_10004a7e = icmp eq i32 %v0_10004a7e, 0
  br i1 %v7_10004a7e, label %dec_label_pc_10004c1c, label %dec_label_pc_10004a8b

dec_label_pc_10004a8b:                            ; preds = %dec_label_pc_10004a7e
  %v0_10004a8b = load i32, i32* @edi, align 4
  store i32 %v16_10004a33, i32* @ecx, align 4
  %v1_10004a92 = call i32 @function_10001090(i32 %v0_10004a8b)
  store i32 %v1_10004a92, i32* %eax.global-to-local, align 4
  %v0_10004a97 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10004a97, i32* @ecx, align 4
  %v1_10004aa6 = inttoptr i32 %v0_10004a97 to i32*
  %v2_10004aa6 = load i32, i32* %v1_10004aa6, align 4
  store i32 %v2_10004aa6, i32* %eax.global-to-local, align 4
  %v1_10004aa8 = add i32 %v2_10004aa6, 32
  %v2_10004aa8 = inttoptr i32 %v1_10004aa8 to i32*
  %v3_10004aa8 = load i32, i32* %v2_10004aa8, align 4
  store i32 %v3_10004aa8, i32* %edx.global-to-local, align 4
  %v0_10004aad = load i32, i32* @esi, align 4
  %v1_10004aad = add i32 %v0_10004aad, 364
  %v2_10004aad = inttoptr i32 %v1_10004aad to i8*
  %v3_10004aad = load i8, i8* %v2_10004aad, align 1
  %v10_10004aad = icmp eq i8 %v3_10004aad, 0
  %v0_10004ab4 = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_10004ab4, i32* @edi, align 4
  %v1_10004ac7 = icmp eq i1 %v10_10004aad, false
  br i1 %v1_10004ac7, label %dec_label_pc_10004ae0, label %dec_label_pc_10004ac9

dec_label_pc_10004ac9:                            ; preds = %dec_label_pc_10004a8b
  %v0_10004ac9 = call i32 @CommandLine()
  store i32 %v0_10004ac9, i32* %eax.global-to-local, align 4
  %v1_10004acb = inttoptr i32 %v0_10004ac9 to i32*
  %v2_10004acb = load i32, i32* %v1_10004acb, align 4
  store i32 %v2_10004acb, i32* %edx.global-to-local, align 4
  store i32 %v0_10004ac9, i32* @ecx, align 4
  %v1_10004ad4 = add i32 %v2_10004acb, 32
  %v2_10004ad4 = inttoptr i32 %v1_10004ad4 to i32*
  %v3_10004ad4 = load i32, i32* %v2_10004ad4, align 4
  br label %dec_label_pc_10004aed

dec_label_pc_10004ae0:                            ; preds = %dec_label_pc_10004a8b
  %v0_10004ae0 = load i32, i32* @global_var_10029f78.123, align 4
  store i32 %v0_10004ae0, i32* @ecx, align 4
  %v1_10004ae6 = inttoptr i32 %v0_10004ae0 to i32*
  %v2_10004ae6 = load i32, i32* %v1_10004ae6, align 4
  store i32 %v2_10004ae6, i32* %edx.global-to-local, align 4
  %v1_10004ae8 = add i32 %v2_10004ae6, 48
  %v2_10004ae8 = inttoptr i32 %v1_10004ae8 to i32*
  %v3_10004ae8 = load i32, i32* %v2_10004ae8, align 4
  br label %dec_label_pc_10004aed

dec_label_pc_10004aed:                            ; preds = %dec_label_pc_10004ae0, %dec_label_pc_10004ac9
  %storemerge = phi i32 [ %v3_10004ad4, %dec_label_pc_10004ac9 ], [ %v3_10004ae8, %dec_label_pc_10004ae0 ]
  %v0_10004af9 = phi i32 [ %v3_10004ad4, %dec_label_pc_10004ac9 ], [ %v3_10004ae8, %dec_label_pc_10004ae0 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_10004af9, i32* %stack_var_-568, align 4
  %v1_10004af3 = icmp eq i32 %v0_10004af9, 0
  %v1_10004af5 = icmp eq i1 %v1_10004af3, false
  br i1 %v1_10004af5, label %dec_label_pc_10004b16, label %dec_label_pc_10004af7

dec_label_pc_10004af7:                            ; preds = %dec_label_pc_10004aed
  %v0_10004af7 = load i32, i32* @esi, align 4
  store i32 %v0_10004af7, i32* @ecx, align 4
  %v1_10004af9 = call i32 @function_10002880(i32 %v0_10004af9)
  store i32 %v1_10004af9, i32* %eax.global-to-local, align 4
  store i32 %v1_10004af9, i32* %stack_var_-568, align 4
  %v1_10004b04 = icmp eq i32 %v1_10004af9, 0
  %v1_10004b06 = icmp eq i1 %v1_10004b04, false
  br i1 %v1_10004b06, label %dec_label_pc_10004b16, label %dec_label_pc_10004b08

dec_label_pc_10004b08:                            ; preds = %dec_label_pc_10004af7
  %v0_10004b08 = load i32, i32* @esp, align 4
  %v1_10004b08 = add i32 %v0_10004b08, -4
  %v2_10004b08 = inttoptr i32 %v1_10004b08 to i32*
  store i32 ptrtoint ([72 x i8]* @global_var_10022c98.194 to i32), i32* %v2_10004b08, align 4
  %v0_10004b0d = call i32 @Error()
  store i32 %v0_10004b0d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004b16

dec_label_pc_10004b16:                            ; preds = %dec_label_pc_10004b08, %dec_label_pc_10004af7, %dec_label_pc_10004aed
  store i32 %v16_10004a33, i32* @ecx, align 4
  %v1_10004b1c = load i32, i32* @esp, align 4
  %v2_10004b1c = add i32 %v1_10004b1c, -4
  %v3_10004b1c = inttoptr i32 %v2_10004b1c to i32*
  store i32 %v16_10004a33, i32* %v3_10004b1c, align 4
  %v1_10004b1d = call i32 @function_10002100(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10004b1d, i32* %eax.global-to-local, align 4
  %v0_10004b22 = load i32, i32* @esp, align 4
  %v1_10004b25 = icmp eq i32 %v1_10004b1d, 0
  %v1_10004b27 = icmp eq i1 %v1_10004b25, false
  br i1 %v1_10004b27, label %dec_label_pc_10004b5c, label %dec_label_pc_10004b29

dec_label_pc_10004b29:                            ; preds = %dec_label_pc_10004b16
  %v2_10004b29 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_10004b29, i32* @ecx, align 4
  %v0_10004b2c = call i32 @function_100010b0()
  store i32 %v0_10004b2c, i32* %eax.global-to-local, align 4
  %v0_10004b31 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10004b31, i32* %edx.global-to-local, align 4
  %v0_10004b37 = load i32, i32* @esi, align 4
  %v1_10004b37 = add i32 %v0_10004b37, 364
  %v2_10004b37 = inttoptr i32 %v1_10004b37 to i8*
  %v3_10004b37 = load i8, i8* %v2_10004b37, align 1
  %v4_10004b37 = zext i8 %v3_10004b37 to i32
  %v6_10004b37 = and i32 %v0_10004b2c, -256
  %v7_10004b37 = or i32 %v4_10004b37, %v6_10004b37
  store i32 %v7_10004b37, i32* %eax.global-to-local, align 4
  store i32 %v2_10004b29, i32* %edx.global-to-local, align 4
  %v2_10004b43 = ptrtoint i32* %stack_var_-559 to i32
  store i32 %v2_10004b43, i32* @ecx, align 4
  %v1_10004b49 = load i32, i32* @esp, align 4
  %v2_10004b49 = add i32 %v1_10004b49, -4
  %v3_10004b49 = inttoptr i32 %v2_10004b49 to i32*
  store i32 %v2_10004b29, i32* %v3_10004b49, align 4
  %v0_10004b4a = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004b4a, i32* %stack_var_-20, align 4
  %v4_10004b50 = call i32 @function_10002260(i32 %v0_10004b4a, i32* nonnull %stack_var_-559, i32 %v0_10004b31)
  store i32 %v4_10004b50, i32* %eax.global-to-local, align 4
  %v0_10004b55 = load i32, i32* @esp, align 4
  %v1_10004b58 = icmp eq i32 %v4_10004b50, 0
  br i1 %v1_10004b58, label %dec_label_pc_10004b64, label %dec_label_pc_10004b5c

dec_label_pc_10004b5c:                            ; preds = %dec_label_pc_10004b29, %dec_label_pc_10004b16
  %v11_10004b5d = phi i32 [ %v4_10004b50, %dec_label_pc_10004b29 ], [ %v1_10004b1d, %dec_label_pc_10004b16 ]
  %v0_10004b5c.in = phi i32 [ %v0_10004b55, %dec_label_pc_10004b29 ], [ %v0_10004b22, %dec_label_pc_10004b16 ]
  %v3_10004b5c = add i32 %v0_10004b5c.in, 8
  %v12_10004b5d = and i32 %v11_10004b5d, -256
  store i32 %v12_10004b5d, i32* %eax.global-to-local, align 4
  %v1_10004b5f = inttoptr i32 %v3_10004b5c to i32*
  %v2_10004b5f = load i32, i32* %v1_10004b5f, align 4
  store i32 %v2_10004b5f, i32* %esi.global-to-local, align 4
  %v2_10004b62 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004b62, i32* %ebp.global-to-local, align 4
  ret i32 %v12_10004b5d

dec_label_pc_10004b64:                            ; preds = %dec_label_pc_10004b29
  store i32 %v0_10004b31, i32* @ecx, align 4
  %v1_10004b67 = inttoptr i32 %v0_10004b31 to i32*
  %v2_10004b67 = load i32, i32* %v1_10004b67, align 4
  store i32 %v2_10004b67, i32* %eax.global-to-local, align 4
  %v1_10004b69 = add i32 %v2_10004b67, 40
  %v2_10004b69 = inttoptr i32 %v1_10004b69 to i32*
  %v3_10004b69 = load i32, i32* %v2_10004b69, align 4
  store i32 %v3_10004b69, i32* %edx.global-to-local, align 4
  %v2_10004b6c = inttoptr i32 %v0_10004b55 to i32*
  store i32 1, i32* %v2_10004b6c, align 4
  %v1_10004b6e = add i32 %v0_10004b55, -4
  %v2_10004b6e = inttoptr i32 %v1_10004b6e to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022348.195 to i32), i32* %v2_10004b6e, align 4
  %v1_10004b73 = add i32 %v0_10004b55, -8
  %v2_10004b73 = inttoptr i32 %v1_10004b73 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022354.196 to i32), i32* %v2_10004b73, align 4
  %v0_10004b7a = call i32 @CommandLine()
  store i32 %v0_10004b7a, i32* %eax.global-to-local, align 4
  %v0_10004b7c = load i32, i32* bitcast (i32** @global_var_10028148.198 to i32*), align 4
  store i32 %v0_10004b7c, i32* @ecx, align 4
  store i32 %v0_10004b7c, i32* @edi, align 4
  %v1_10004b84 = inttoptr i32 %v0_10004b7a to i32*
  %v2_10004b84 = load i32, i32* %v1_10004b84, align 4
  store i32 %v2_10004b84, i32* %edx.global-to-local, align 4
  %v0_10004b86 = load i32, i32* @esp, align 4
  %v1_10004b86 = add i32 %v0_10004b86, -4
  %v2_10004b86 = inttoptr i32 %v1_10004b86 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_10022b78.131 to i32), i32* %v2_10004b86, align 4
  %v0_10004b8b = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004b8b, i32* @ecx, align 4
  %v0_10004b8d = load i32, i32* %edx.global-to-local, align 4
  %v1_10004b8d = add i32 %v0_10004b8d, 32
  %v2_10004b8d = inttoptr i32 %v1_10004b8d to i32*
  %v3_10004b8d = load i32, i32* %v2_10004b8d, align 4
  store i32 %v3_10004b8d, i32* %eax.global-to-local, align 4
  %v1_10004b90 = add i32 %v0_10004b86, -8
  %v2_10004b90 = inttoptr i32 %v1_10004b90 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_10004b90, align 4
  %v0_10004b9f = load i32, i32* %eax.global-to-local, align 4
  %v2_10004b9f = add i32 %v0_10004b86, -12
  %v3_10004b9f = inttoptr i32 %v2_10004b9f to i32*
  store i32 %v0_10004b9f, i32* %v3_10004b9f, align 4
  %v1_10004ba0 = add i32 %v0_10004b86, -16
  %v2_10004ba0 = inttoptr i32 %v1_10004ba0 to i32*
  store i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32* %v2_10004ba0, align 4
  %v0_10004ba7 = load i32, i32* bitcast (i32** @global_var_10028148.198 to i32*), align 4
  store i32 %v0_10004ba7, i32* %eax.global-to-local, align 4
  %v3_10004baf = load i32, i32* bitcast (i32** @global_var_10028154.200 to i32*), align 4
  store i32 %v3_10004baf, i32* %edx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1002a1b0.186 to i32), i32* @ecx, align 4
  %v0_10004bb9 = call i32 @function_100046d0()
  store i32 %v0_10004bb9, i32* %eax.global-to-local, align 4
  %v0_10004bbe = load i32, i32* @esi, align 4
  %v1_10004bbe = add i32 %v0_10004bbe, 364
  %v2_10004bbe = inttoptr i32 %v1_10004bbe to i8*
  %v3_10004bbe = load i8, i8* %v2_10004bbe, align 1
  %v10_10004bbe = icmp eq i8 %v3_10004bbe, 0
  br i1 %v10_10004bbe, label %dec_label_pc_10004bd7, label %dec_label_pc_10004bc7

dec_label_pc_10004bc7:                            ; preds = %dec_label_pc_10004b64
  %v0_10004bc7 = load i32, i32* @global_var_1002b968.129, align 4
  store i32 %v0_10004bc7, i32* @ecx, align 4
  %v1_10004bcd = inttoptr i32 %v0_10004bc7 to i32*
  %v2_10004bcd = load i32, i32* %v1_10004bcd, align 4
  store i32 %v2_10004bcd, i32* %eax.global-to-local, align 4
  %v1_10004bcf = add i32 %v2_10004bcd, 268
  %v2_10004bcf = inttoptr i32 %v1_10004bcf to i32*
  %v3_10004bcf = load i32, i32* %v2_10004bcf, align 4
  store i32 %v3_10004bcf, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10004bd7

dec_label_pc_10004bd7:                            ; preds = %dec_label_pc_10004bc7, %dec_label_pc_10004b64
  %v0_10004bd7 = call i32 @function_100090b0()
  store i32 %v0_10004bd7, i32* %eax.global-to-local, align 4
  %v0_10004bdc = load i32, i32* @esi, align 4
  store i32 %v0_10004bdc, i32* @ecx, align 4
  store i32 %v0_10004bd7, i32* %stack_var_-44, align 4
  %v4_10004be8 = call i32 @function_10002850(i32 %v0_10004bd7, i32* bitcast (i8** @global_var_10029f80.71 to i32*))
  store i32 %v4_10004be8, i32* %eax.global-to-local, align 4
  %v0_10004bed = load i32, i32* @esi, align 4
  store i32 %v0_10004bed, i32* @ecx, align 4
  %v1_10004bf2 = call i32 @function_10002880(i32 %v4_10004be8)
  %v0_10004bf7 = load i32, i32* @global_var_10029f7c.120, align 4
  store i32 %v0_10004bf7, i32* @ecx, align 4
  %v0_10004c00 = load i8, i8* @global_var_1002a18c.201, align 1
  %v1_10004c00 = zext i8 %v0_10004c00 to i32
  %v3_10004c00 = and i32 %v1_10004bf2, -256
  %v4_10004c00 = or i32 %v1_10004c00, %v3_10004c00
  store i32 %v4_10004c00, i32* %eax.global-to-local, align 4
  %v1_10004c0b = inttoptr i32 %v0_10004bf7 to i32*
  %v2_10004c0b = load i32, i32* %v1_10004c0b, align 4
  store i32 %v2_10004c0b, i32* %edx.global-to-local, align 4
  %v1_10004c0d = add i32 %v2_10004c0b, 32
  %v2_10004c0d = inttoptr i32 %v1_10004c0d to i32*
  %v3_10004c0d = load i32, i32* %v2_10004c0d, align 4
  store i32 %v3_10004c0d, i32* %edx.global-to-local, align 4
  %v2_10004c10 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_10004c10, i32* %eax.global-to-local, align 4
  %v1_10004c13 = load i32, i32* @esp, align 4
  %v2_10004c13 = add i32 %v1_10004c13, -4
  %v3_10004c13 = inttoptr i32 %v2_10004c13 to i32*
  store i32 %v2_10004c10, i32* %v3_10004c13, align 4
  %v1_10004c17 = inttoptr i32 %v1_10004c13 to i32*
  %v2_10004c17 = load i32, i32* %v1_10004c17, align 4
  store i32 %v2_10004c17, i32* %esi.global-to-local, align 4
  %v2_10004c1a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004c1a, i32* %ebp.global-to-local, align 4
  %v0_10004c1b = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10004c1b

dec_label_pc_10004c1c:                            ; preds = %dec_label_pc_10004a7e, %dec_label_pc_10004a30
  %v12_10004c1c = and i32 %v0_10004a69, -256
  store i32 %v12_10004c1c, i32* %eax.global-to-local, align 4
  %v2_10004c1e = load i32, i32* %stack_var_-572, align 4
  store i32 %v2_10004c1e, i32* %esi.global-to-local, align 4
  %v2_10004c21 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004c21, i32* %ebp.global-to-local, align 4
  ret i32 %v12_10004c1c
}

define i32 @function_10004c30() {
dec_label_pc_10004c30:
  store i32 ptrtoint (i32* @global_var_1002a1b0.186 to i32), i32* @ecx, align 4
  %v0_10004c35 = call i32 @function_10004910()
  %v0_10004c3a = load i32, i32* bitcast (i32** @global_var_10028148.198 to i32*), align 4
  store i32 %v0_10004c3a, i32* @ecx, align 4
  store i32 %v0_10004c3a, i32* @eax, align 4
  %v0_10004c47 = call i32 @__heap_term()
  store i32 %v0_10004c47, i32* @eax, align 4
  %v0_10004c4c = call i32 @function_1000f9c0()
  store i32 %v0_10004c4c, i32* @eax, align 4
  %v0_10004c51 = call i32 @function_1000d290()
  store i32 %v0_10004c51, i32* @eax, align 4
  %v0_10004c56 = call i32 @function_1000de60()
  ret i32 %v0_10004c56
}

define i32 @function_10004c60() {
dec_label_pc_10004c60:
  %eax.global-to-local = alloca i32, align 4
  %v0_10004c60 = load i32, i32* %eax.global-to-local, align 4
  %v1_10004c60 = and i32 %v0_10004c60, -256
  %v2_10004c60 = or i32 %v1_10004c60, 1
  store i32 %v2_10004c60, i32* %eax.global-to-local, align 4
  ret i32 %v2_10004c60
}

define i32 @LauncherMain(i32 %arg1) local_unnamed_addr {
dec_label_pc_10004c80:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp288 = call i32 @__decompiler_undefined_function_0()
  %tmp290 = call i32 @__decompiler_undefined_function_0()
  %tmp293 = call i32 @__decompiler_undefined_function_0()
  %tmp295 = call i32 @__decompiler_undefined_function_0()
  %tmp298 = call i32 @__decompiler_undefined_function_0()
  %tmp300 = call i32 @__decompiler_undefined_function_0()
  %tmp303 = call i32 @__decompiler_undefined_function_0()
  %tmp305 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-448 = alloca i32, align 4
  %tmp309 = call i32 @__decompiler_undefined_function_0()
  %tmp311 = call i32 @__decompiler_undefined_function_0()
  %tmp314 = call i32 @__decompiler_undefined_function_0()
  %tmp316 = call i32 @__decompiler_undefined_function_0()
  %tmp319 = call i32 @__decompiler_undefined_function_0()
  %tmp321 = call i32 @__decompiler_undefined_function_0()
  %tmp324 = call i32 @__decompiler_undefined_function_0()
  %tmp326 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-544 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10004c80 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_10004c80, i32* %stack_var_-4, align 4
  %v4_10004c80 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10004c80, i32* @ebp, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v16_10004c86 = ptrtoint i32* %stack_var_-544 to i32
  %v1_10004c8d = call i32 @function_100090c0(i32 %arg1)
  store i32 %v1_10004c8d, i32* %eax.global-to-local, align 4
  %v3_10004c97 = call i32 @LoggingSystem_RegisterLoggingListener(i32** nonnull @global_var_10028024.149)
  store i32 %v3_10004c97, i32* %eax.global-to-local, align 4
  %v0_10004ca0 = call i32 @Plat_VerifyHardwareKeyPrompt()
  store i32 %v0_10004ca0, i32* %eax.global-to-local, align 4
  %v4_10004ca6 = trunc i32 %v0_10004ca0 to i8
  %v5_10004ca6 = icmp eq i8 %v4_10004ca6, 0
  %v1_10004ca8 = icmp eq i1 %v5_10004ca6, false
  br i1 %v1_10004ca8, label %dec_label_pc_10004cb1, label %dec_label_pc_10004caa

dec_label_pc_10004caa:                            ; preds = %dec_label_pc_10004c80
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_10004caf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004caf, i32* %ebp.global-to-local, align 4
  ret i32 -1

dec_label_pc_10004cb1:                            ; preds = %dec_label_pc_10004c80
  %v0_10004cb3 = call i8* @GetCommandLineA()
  %v2_10004cb3 = ptrtoint i8* %v0_10004cb3 to i32
  store i32 %v2_10004cb3, i32* %eax.global-to-local, align 4
  store i32 %v2_10004cb3, i32* %edi.global-to-local, align 4
  %v0_10004cc1 = call i32 @CommandLine()
  store i32 %v0_10004cc1, i32* %eax.global-to-local, align 4
  %v1_10004cc3 = inttoptr i32 %v0_10004cc1 to i32*
  %v2_10004cc3 = load i32, i32* %v1_10004cc3, align 4
  store i32 %v2_10004cc3, i32* %edx.global-to-local, align 4
  store i32 %v0_10004cc1, i32* @ecx, align 4
  %v1_10004cc7 = add i32 %v2_10004cc3, 4
  %v2_10004cc7 = inttoptr i32 %v1_10004cc7 to i32*
  %v3_10004cc7 = load i32, i32* %v2_10004cc7, align 4
  store i32 %v3_10004cc7, i32* %eax.global-to-local, align 4
  %v0_10004cca = load i32, i32* %edi.global-to-local, align 4
  %v1_10004ccd = call i32 @function_100023e0(i32 %v0_10004cca)
  store i32 %v1_10004ccd, i32* %eax.global-to-local, align 4
  %v0_10004cd2 = call i32 @CommandLine()
  store i32 %v0_10004cd2, i32* %eax.global-to-local, align 4
  %v1_10004cd4 = inttoptr i32 %v0_10004cd2 to i32*
  %v2_10004cd4 = load i32, i32* %v1_10004cd4, align 4
  store i32 %v2_10004cd4, i32* %edx.global-to-local, align 4
  store i32 %v0_10004cd2, i32* @ecx, align 4
  %v1_10004cda = add i32 %v2_10004cd4, 12
  %v2_10004cda = inttoptr i32 %v1_10004cda to i32*
  %v3_10004cda = load i32, i32* %v2_10004cda, align 4
  store i32 %v3_10004cda, i32* %eax.global-to-local, align 4
  %v0_10004ce4 = call i32 @CommandLine()
  store i32 %v0_10004ce4, i32* %eax.global-to-local, align 4
  %v1_10004ce6 = inttoptr i32 %v0_10004ce4 to i32*
  %v2_10004ce6 = load i32, i32* %v1_10004ce6, align 4
  store i32 %v2_10004ce6, i32* %edx.global-to-local, align 4
  store i32 %v0_10004ce4, i32* @ecx, align 4
  %v1_10004cec = add i32 %v2_10004ce6, 12
  %v2_10004cec = inttoptr i32 %v1_10004cec to i32*
  %v3_10004cec = load i32, i32* %v2_10004cec, align 4
  store i32 %v3_10004cec, i32* %eax.global-to-local, align 4
  %v0_10004cf6 = call i32 @CommandLine()
  store i32 %v0_10004cf6, i32* %eax.global-to-local, align 4
  %v1_10004cf8 = inttoptr i32 %v0_10004cf6 to i32*
  %v2_10004cf8 = load i32, i32* %v1_10004cf8, align 4
  store i32 %v2_10004cf8, i32* %edx.global-to-local, align 4
  store i32 %v0_10004cf6, i32* @ecx, align 4
  %v1_10004cfe = add i32 %v2_10004cf8, 12
  %v2_10004cfe = inttoptr i32 %v1_10004cfe to i32*
  %v3_10004cfe = load i32, i32* %v2_10004cfe, align 4
  store i32 %v3_10004cfe, i32* %eax.global-to-local, align 4
  %v4_10004d08 = call i32 @function_10002380(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_100230d8.205, i32 0, i32 0), i32 0)
  store i32 %v4_10004d08, i32* @eax, align 4
  store i32 %v4_10004d08, i32* @edi, align 4
  %v1_10004d0f = inttoptr i32 %v4_10004d08 to i8*
  %v2_10004d0f = load i8, i8* %v1_10004d0f, align 1
  %v9_10004d0f = icmp eq i8 %v2_10004d0f, 0
  br i1 %v9_10004d0f, label %dec_label_pc_10004d5b, label %dec_label_pc_10004d14

dec_label_pc_10004d14:                            ; preds = %dec_label_pc_10004cb1
  %v4_10004d1a = call i32 @function_10009470(i32 %v4_10004d08, i32 ptrtoint ([4 x i8]* @global_var_10022b78.131 to i32))
  store i32 %v4_10004d1a, i32* %eax.global-to-local, align 4
  %v1_10004d22 = icmp eq i32 %v4_10004d1a, 0
  br i1 %v1_10004d22, label %dec_label_pc_10004d5b, label %dec_label_pc_10004d26

dec_label_pc_10004d26:                            ; preds = %dec_label_pc_10004d14
  %v0_10004d26 = call i32 @CommandLine()
  store i32 %v0_10004d26, i32* %eax.global-to-local, align 4
  %v1_10004d28 = inttoptr i32 %v0_10004d26 to i32*
  %v2_10004d28 = load i32, i32* %v1_10004d28, align 4
  store i32 %v2_10004d28, i32* %edx.global-to-local, align 4
  store i32 %v0_10004d26, i32* @ecx, align 4
  %v1_10004d2c = add i32 %v2_10004d28, 40
  %v2_10004d2c = inttoptr i32 %v1_10004d2c to i32*
  %v3_10004d2c = load i32, i32* %v2_10004d2c, align 4
  store i32 %v3_10004d2c, i32* %eax.global-to-local, align 4
  %v1_10004d36 = icmp eq i32 %v3_10004d2c, 0
  %v1_10004d38 = icmp eq i1 %v1_10004d36, false
  br i1 %v1_10004d38, label %dec_label_pc_10004d5b, label %dec_label_pc_10004d3a

dec_label_pc_10004d3a:                            ; preds = %dec_label_pc_10004d26
  %v0_10004d3a = call i32 @CommandLine()
  store i32 %v0_10004d3a, i32* %eax.global-to-local, align 4
  %v1_10004d3c = inttoptr i32 %v0_10004d3a to i32*
  %v2_10004d3c = load i32, i32* %v1_10004d3c, align 4
  store i32 %v2_10004d3c, i32* %edx.global-to-local, align 4
  store i32 %v0_10004d3a, i32* @ecx, align 4
  %v1_10004d40 = add i32 %v2_10004d3c, 16
  %v2_10004d40 = inttoptr i32 %v1_10004d40 to i32*
  %v3_10004d40 = load i32, i32* %v2_10004d40, align 4
  store i32 %v3_10004d40, i32* %eax.global-to-local, align 4
  %v0_10004d4a = call i32 @CommandLine()
  store i32 %v0_10004d4a, i32* %eax.global-to-local, align 4
  %v1_10004d4c = inttoptr i32 %v0_10004d4a to i32*
  %v2_10004d4c = load i32, i32* %v1_10004d4c, align 4
  store i32 %v2_10004d4c, i32* %edx.global-to-local, align 4
  store i32 %v0_10004d4a, i32* @ecx, align 4
  %v1_10004d51 = add i32 %v2_10004d4c, 20
  %v2_10004d51 = inttoptr i32 %v1_10004d51 to i32*
  %v3_10004d51 = load i32, i32* %v2_10004d51, align 4
  store i32 %v3_10004d51, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004d5b

dec_label_pc_10004d5b:                            ; preds = %dec_label_pc_10004d3a, %dec_label_pc_10004d26, %dec_label_pc_10004d14, %dec_label_pc_10004cb1
  store i32 0, i32* %stack_var_-16, align 4
  %v0_10004d62 = call i32 @CommandLine()
  store i32 %v0_10004d62, i32* %eax.global-to-local, align 4
  %v1_10004d64 = inttoptr i32 %v0_10004d62 to i32*
  %v2_10004d64 = load i32, i32* %v1_10004d64, align 4
  store i32 %v2_10004d64, i32* %edx.global-to-local, align 4
  %v1_10004d66 = add i32 %v2_10004d64, 12
  %v2_10004d66 = inttoptr i32 %v1_10004d66 to i32*
  %v3_10004d66 = load i32, i32* %v2_10004d66, align 4
  store i32 %v3_10004d66, i32* %edx.global-to-local, align 4
  %v2_10004d69 = ptrtoint i32* %stack_var_-16 to i32
  %v1_10004d6c = load i32, i32* @esp, align 4
  %v2_10004d6c = add i32 %v1_10004d6c, -4
  %v3_10004d6c = inttoptr i32 %v2_10004d6c to i32*
  store i32 %v2_10004d69, i32* %v3_10004d6c, align 4
  %v1_10004d6d = add i32 %v1_10004d6c, -8
  %v2_10004d6d = inttoptr i32 %v1_10004d6d to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_10004d6d, align 4
  %v0_10004d72 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004d72, i32* @ecx, align 4
  %v3_10004d76 = load i32, i32* %stack_var_-16, align 4
  store i32 %v3_10004d76, i32* @eax, align 4
  %v1_10004d79 = icmp eq i32 %v3_10004d76, 0
  br i1 %v1_10004d79, label %dec_label_pc_10004de0, label %dec_label_pc_10004d7d

dec_label_pc_10004d7d:                            ; preds = %dec_label_pc_10004d5b
  %v1_10004d7d = add i32 %v1_10004d6c, -12
  %v2_10004d7d = inttoptr i32 %v1_10004d7d to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_100230d0.206 to i32), i32* %v2_10004d7d, align 4
  %v2_10004d82 = add i32 %v1_10004d6c, -16
  %v3_10004d82 = inttoptr i32 %v2_10004d82 to i32*
  store i32 %v3_10004d76, i32* %v3_10004d82, align 4
  %v2_10004d83 = call i32 @function_10009470(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10004d83, i32* %eax.global-to-local, align 4
  %v1_10004d8b = icmp eq i32 %v2_10004d83, 0
  %v1_10004d8d = icmp eq i1 %v1_10004d8b, false
  br i1 %v1_10004d8d, label %dec_label_pc_10004de0, label %dec_label_pc_10004d8f

dec_label_pc_10004d8f:                            ; preds = %dec_label_pc_10004d7d
  %v0_10004d8f = call i32 @CommandLine()
  store i32 %v0_10004d8f, i32* %eax.global-to-local, align 4
  %v1_10004d91 = inttoptr i32 %v0_10004d8f to i32*
  %v2_10004d91 = load i32, i32* %v1_10004d91, align 4
  store i32 %v2_10004d91, i32* %edx.global-to-local, align 4
  %v0_10004d93 = load i32, i32* @esp, align 4
  %v1_10004d93 = add i32 %v0_10004d93, -4
  %v2_10004d93 = inttoptr i32 %v1_10004d93 to i32*
  store i32 0, i32* %v2_10004d93, align 4
  %v0_10004d95 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004d95, i32* @ecx, align 4
  %v0_10004d97 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004d97 = add i32 %v0_10004d97, 12
  %v2_10004d97 = inttoptr i32 %v1_10004d97 to i32*
  %v3_10004d97 = load i32, i32* %v2_10004d97, align 4
  store i32 %v3_10004d97, i32* %eax.global-to-local, align 4
  %v1_10004d9a = add i32 %v0_10004d93, -8
  %v2_10004d9a = inttoptr i32 %v1_10004d9a to i32*
  store i32 ptrtoint ([11 x i8]* @global_var_100230c4.207 to i32), i32* %v2_10004d9a, align 4
  %v1_10004da1 = icmp eq i32 %v3_10004d97, 0
  %v1_10004da3 = icmp eq i1 %v1_10004da1, false
  br i1 %v1_10004da3, label %dec_label_pc_10004de0, label %dec_label_pc_10004da5

dec_label_pc_10004da5:                            ; preds = %dec_label_pc_10004d8f
  %v1_10004da5 = add i32 %v0_10004d93, -12
  %v2_10004da5 = inttoptr i32 %v1_10004da5 to i32*
  store i32 ptrtoint ([29 x i8]* @global_var_100230a4.208 to i32), i32* %v2_10004da5, align 4
  %v1_10004daa = add i32 %v0_10004d93, -16
  %v2_10004daa = inttoptr i32 %v1_10004daa to i32*
  store i32 ptrtoint (i32* @global_var_100225b8.50 to i32), i32* %v2_10004daa, align 4
  %v2_10004daf = call i32 @function_10001100(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10004daf, i32* %eax.global-to-local, align 4
  %v4_10004db7 = trunc i32 %v2_10004daf to i8
  %v5_10004db7 = icmp eq i8 %v4_10004db7, 0
  br i1 %v5_10004db7, label %dec_label_pc_10004de0, label %dec_label_pc_10004dbb

dec_label_pc_10004dbb:                            ; preds = %dec_label_pc_10004da5
  %v0_10004dbb = call i32 @CommandLine()
  store i32 %v0_10004dbb, i32* %eax.global-to-local, align 4
  %v1_10004dbd = inttoptr i32 %v0_10004dbb to i32*
  %v2_10004dbd = load i32, i32* %v1_10004dbd, align 4
  store i32 %v2_10004dbd, i32* %edx.global-to-local, align 4
  store i32 %v0_10004dbb, i32* @ecx, align 4
  %v1_10004dc1 = add i32 %v2_10004dbd, 16
  %v2_10004dc1 = inttoptr i32 %v1_10004dc1 to i32*
  %v3_10004dc1 = load i32, i32* %v2_10004dc1, align 4
  store i32 %v3_10004dc1, i32* %eax.global-to-local, align 4
  %v0_10004dc4 = load i32, i32* @esp, align 4
  %v1_10004dc4 = add i32 %v0_10004dc4, -4
  %v2_10004dc4 = inttoptr i32 %v1_10004dc4 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_10004dc4, align 4
  %v0_10004dcb = call i32 @CommandLine()
  store i32 %v0_10004dcb, i32* %eax.global-to-local, align 4
  %v1_10004dcd = inttoptr i32 %v0_10004dcb to i32*
  %v2_10004dcd = load i32, i32* %v1_10004dcd, align 4
  store i32 %v2_10004dcd, i32* %edx.global-to-local, align 4
  %v0_10004dcf = load i32, i32* @esp, align 4
  %v1_10004dcf = add i32 %v0_10004dcf, -4
  %v2_10004dcf = inttoptr i32 %v1_10004dcf to i32*
  store i32 ptrtoint ([16 x i8]* @global_var_10023094.209 to i32), i32* %v2_10004dcf, align 4
  %v0_10004dd4 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004dd4, i32* @ecx, align 4
  %v0_10004dd6 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004dd6 = add i32 %v0_10004dd6, 20
  %v2_10004dd6 = inttoptr i32 %v1_10004dd6 to i32*
  %v3_10004dd6 = load i32, i32* %v2_10004dd6, align 4
  store i32 %v3_10004dd6, i32* %eax.global-to-local, align 4
  %v1_10004dd9 = add i32 %v0_10004dcf, -8
  %v2_10004dd9 = inttoptr i32 %v1_10004dd9 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_100222e0.18 to i32), i32* %v2_10004dd9, align 4
  br label %dec_label_pc_10004de0

dec_label_pc_10004de0:                            ; preds = %dec_label_pc_10004dbb, %dec_label_pc_10004da5, %dec_label_pc_10004d8f, %dec_label_pc_10004d7d, %dec_label_pc_10004d5b
  %v0_10004de0 = call i32 @CommandLine()
  store i32 %v0_10004de0, i32* %eax.global-to-local, align 4
  %v1_10004de2 = inttoptr i32 %v0_10004de0 to i32*
  %v2_10004de2 = load i32, i32* %v1_10004de2, align 4
  store i32 %v2_10004de2, i32* %edx.global-to-local, align 4
  %v0_10004de4 = load i32, i32* @esp, align 4
  %v1_10004de4 = add i32 %v0_10004de4, -4
  %v2_10004de4 = inttoptr i32 %v1_10004de4 to i32*
  store i32 0, i32* %v2_10004de4, align 4
  %v0_10004de6 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004de6, i32* @ecx, align 4
  %v0_10004de8 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004de8 = add i32 %v0_10004de8, 12
  %v2_10004de8 = inttoptr i32 %v1_10004de8 to i32*
  %v3_10004de8 = load i32, i32* %v2_10004de8, align 4
  store i32 %v3_10004de8, i32* %eax.global-to-local, align 4
  %v1_10004deb = add i32 %v0_10004de4, -8
  %v2_10004deb = inttoptr i32 %v1_10004deb to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_1002308c.210 to i32), i32* %v2_10004deb, align 4
  %v1_10004df2 = icmp eq i32 %v3_10004de8, 0
  br i1 %v1_10004df2, label %dec_label_pc_10004e34, label %dec_label_pc_10004df6

dec_label_pc_10004df6:                            ; preds = %dec_label_pc_10004de0
  %v0_10004df6 = load i32, i32* inttoptr (i32 268575176 to i32*), align 8
  store i32 %v0_10004df6, i32* @edi, align 4
  %v1_10004dfc = add i32 %v0_10004de4, -12
  %v2_10004dfc = inttoptr i32 %v1_10004dfc to i32*
  store i32 ptrtoint ([22 x i8]* @global_var_10023074.211 to i32), i32* %v2_10004dfc, align 4
  %v0_10004e01 = call i32 @"?DevMsg@@YAXPBDZZ"()
  store i32 %v0_10004e01, i32* %eax.global-to-local, align 4
  %v0_10004e03 = load i32, i32* @esp, align 4
  %v1_10004e03 = add i32 %v0_10004e03, -4
  %v2_10004e03 = inttoptr i32 %v1_10004e03 to i32*
  store i32 1, i32* %v2_10004e03, align 4
  %v1_10004e05 = add i32 %v0_10004e03, -8
  %v2_10004e05 = inttoptr i32 %v1_10004e05 to i32*
  store i32 10000, i32* %v2_10004e05, align 4
  %v0_10004e0a = call i32 @RunTSListTests()
  store i32 %v0_10004e0a, i32* %eax.global-to-local, align 4
  %v0_10004e10 = load i32, i32* @esp, align 4
  %v1_10004e10 = add i32 %v0_10004e10, -4
  %v2_10004e10 = inttoptr i32 %v1_10004e10 to i32*
  store i32 ptrtoint ([23 x i8]* @global_var_1002305c.212 to i32), i32* %v2_10004e10, align 4
  %v0_10004e15 = call i32 @"?DevMsg@@YAXPBDZZ"()
  store i32 %v0_10004e15, i32* %eax.global-to-local, align 4
  %v0_10004e17 = load i32, i32* @esp, align 4
  %v1_10004e17 = add i32 %v0_10004e17, -4
  %v2_10004e17 = inttoptr i32 %v1_10004e17 to i32*
  store i32 1, i32* %v2_10004e17, align 4
  %v1_10004e19 = add i32 %v0_10004e17, -8
  %v2_10004e19 = inttoptr i32 %v1_10004e19 to i32*
  store i32 10000, i32* %v2_10004e19, align 4
  %v0_10004e1e = call i32 @RunTSQueueTests()
  store i32 %v0_10004e1e, i32* %eax.global-to-local, align 4
  %v0_10004e24 = load i32, i32* @esp, align 4
  %v1_10004e24 = add i32 %v0_10004e24, -4
  %v2_10004e24 = inttoptr i32 %v1_10004e24 to i32*
  store i32 ptrtoint ([27 x i8]* @global_var_10023040.213 to i32), i32* %v2_10004e24, align 4
  %v0_10004e29 = call i32 @"?DevMsg@@YAXPBDZZ"()
  store i32 %v0_10004e29, i32* %eax.global-to-local, align 4
  %v0_10004e2e = call i32 @RunThreadPoolTests()
  store i32 %v0_10004e2e, i32* %eax.global-to-local, align 4
  %v0_10004e34.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10004e34

dec_label_pc_10004e34:                            ; preds = %dec_label_pc_10004df6, %dec_label_pc_10004de0
  %v0_10004e34 = phi i32 [ %v0_10004e34.pre, %dec_label_pc_10004df6 ], [ %v1_10004deb, %dec_label_pc_10004de0 ]
  %v1_10004e34 = add i32 %v0_10004e34, -4
  %v2_10004e34 = inttoptr i32 %v1_10004e34 to i32*
  store i32 ptrtoint ([24 x i8]* @global_var_10022824.214 to i32), i32* %v2_10004e34, align 4
  %v1_10004e39 = call i32* @GetModuleHandleA(i8* bitcast (i32* @5 to i8*))
  %v3_10004e39 = ptrtoint i32* %v1_10004e39 to i32
  store i32 %v3_10004e39, i32* %eax.global-to-local, align 4
  %v1_10004e3f = icmp eq i32* %v1_10004e39, null
  %v1_10004e41 = icmp eq i1 %v1_10004e3f, false
  br i1 %v1_10004e41, label %dec_label_pc_10004e74, label %dec_label_pc_10004e43

dec_label_pc_10004e43:                            ; preds = %dec_label_pc_10004e34
  %v0_10004e43 = call i32 @SteamAPI_GetSteamInstallPath()
  store i32 %v0_10004e43, i32* %eax.global-to-local, align 4
  %v1_10004e49 = icmp eq i32 %v0_10004e43, 0
  br i1 %v1_10004e49, label %dec_label_pc_10004e74, label %dec_label_pc_10004e4d

dec_label_pc_10004e4d:                            ; preds = %dec_label_pc_10004e43
  %v0_10004e4d = load i32, i32* @esp, align 4
  %v1_10004e4d = add i32 %v0_10004e4d, -4
  %v2_10004e4d = inttoptr i32 %v1_10004e4d to i32*
  store i32 260, i32* %v2_10004e4d, align 4
  %v2_10004e52 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v2_10004e52, i32* @ecx, align 4
  %v2_10004e58 = add i32 %v0_10004e4d, -8
  %v3_10004e58 = inttoptr i32 %v2_10004e58 to i32*
  store i32 %v2_10004e52, i32* %v3_10004e58, align 4
  %v1_10004e59 = add i32 %v0_10004e4d, -12
  %v2_10004e59 = inttoptr i32 %v1_10004e59 to i32*
  store i32 ptrtoint ([24 x i8]* @global_var_10022824.214 to i32), i32* %v2_10004e59, align 4
  %v2_10004e5e = add i32 %v0_10004e4d, -16
  %v3_10004e5e = inttoptr i32 %v2_10004e5e to i32*
  store i32 %v0_10004e43, i32* %v3_10004e5e, align 4
  %v4_10004e5f = call i32 @function_10009d40(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v4_10004e5f, i32* %eax.global-to-local, align 4
  %v0_10004e64 = load i32, i32* @esp, align 4
  store i32 %v2_10004e52, i32* %edx.global-to-local, align 4
  %v2_10004e6d = add i32 %v0_10004e64, 12
  %v3_10004e6d = inttoptr i32 %v2_10004e6d to i32*
  store i32 %v2_10004e52, i32* %v3_10004e6d, align 4
  %v1_10004e6e = call i32* @LoadLibraryA(i8* bitcast (i32* @5 to i8*))
  %v3_10004e6e = ptrtoint i32* %v1_10004e6e to i32
  store i32 %v3_10004e6e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004e74

dec_label_pc_10004e74:                            ; preds = %dec_label_pc_10004e4d, %dec_label_pc_10004e43, %dec_label_pc_10004e34
  %v0_10004e74 = call i32 @function_10002920()
  store i32 %v16_10004c86, i32* %eax.global-to-local, align 4
  %v1_10004e7f = load i32, i32* @esp, align 4
  %v2_10004e7f = add i32 %v1_10004e7f, -4
  %v3_10004e7f = inttoptr i32 %v2_10004e7f to i32*
  store i32 %v16_10004c86, i32* %v3_10004e7f, align 4
  %v1_10004e80 = add i32 %v1_10004e7f, -8
  %v2_10004e80 = inttoptr i32 %v1_10004e80 to i32*
  store i32 2, i32* %v2_10004e80, align 4
  %v2_10004e82 = call i32 @WSAStartup(i16 ptrtoint (i32* @5 to i16), %WSAData* bitcast (i32* @5 to %WSAData*))
  store i32 %v2_10004e82, i32* %eax.global-to-local, align 4
  %v1_10004e87 = icmp eq i32 %v2_10004e82, 0
  %v1_10004e9a.pre = load i32, i32* @esp, align 4
  br i1 %v1_10004e87, label %dec_label_pc_10004e9a, label %dec_label_pc_10004e8b

dec_label_pc_10004e8b:                            ; preds = %dec_label_pc_10004e74
  %v2_10004e8b = add i32 %v1_10004e9a.pre, -4
  %v3_10004e8b = inttoptr i32 %v2_10004e8b to i32*
  store i32 %v2_10004e82, i32* %v3_10004e8b, align 4
  %v1_10004e8c = add i32 %v1_10004e9a.pre, -8
  %v2_10004e8c = inttoptr i32 %v1_10004e8c to i32*
  store i32 ptrtoint ([57 x i8]* @global_var_10023004.215 to i32), i32* %v2_10004e8c, align 4
  %v0_10004e91 = call i32 @Msg()
  store i32 %v0_10004e91, i32* %eax.global-to-local, align 4
  %v0_10004e97 = load i32, i32* @esp, align 4
  %v1_10004e97 = add i32 %v0_10004e97, 8
  br label %dec_label_pc_10004e9a

dec_label_pc_10004e9a:                            ; preds = %dec_label_pc_10004e74, %dec_label_pc_10004e8b
  %v1_10004e9a = phi i32 [ %v1_10004e97, %dec_label_pc_10004e8b ], [ %v1_10004e9a.pre, %dec_label_pc_10004e74 ]
  %v0_10004e9a = load i32, i32* @ebx, align 4
  %v2_10004e9a = add i32 %v1_10004e9a, -4
  %v3_10004e9a = inttoptr i32 %v2_10004e9a to i32*
  store i32 %v0_10004e9a, i32* %v3_10004e9a, align 4
  %v0_10004e9b = call i32 @CommandLine()
  store i32 %v0_10004e9b, i32* %eax.global-to-local, align 4
  %v1_10004e9d = inttoptr i32 %v0_10004e9b to i32*
  %v2_10004e9d = load i32, i32* %v1_10004e9d, align 4
  store i32 %v2_10004e9d, i32* %edx.global-to-local, align 4
  %v0_10004e9f = load i32, i32* @esp, align 4
  %v1_10004e9f = add i32 %v0_10004e9f, -4
  %v2_10004e9f = inttoptr i32 %v1_10004e9f to i32*
  store i32 0, i32* %v2_10004e9f, align 4
  %v0_10004ea1 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004ea1, i32* @ecx, align 4
  %v0_10004ea3 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004ea3 = add i32 %v0_10004ea3, 12
  %v2_10004ea3 = inttoptr i32 %v1_10004ea3 to i32*
  %v3_10004ea3 = load i32, i32* %v2_10004ea3, align 4
  store i32 %v3_10004ea3, i32* %eax.global-to-local, align 4
  %v1_10004ea6 = add i32 %v0_10004e9f, -8
  %v2_10004ea6 = inttoptr i32 %v1_10004ea6 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022ff8.216 to i32), i32* %v2_10004ea6, align 4
  %v1_10004ead = icmp eq i32 %v3_10004ea3, 0
  br i1 %v1_10004ead, label %dec_label_pc_10004ede, label %dec_label_pc_10004eb1

dec_label_pc_10004eb1:                            ; preds = %dec_label_pc_10004e9a
  store i8 1, i8* @global_var_1002a18c.201, align 1
  %v0_10004eb8 = call i32 @function_100024c0()
  store i32 %v0_10004eb8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004ebd

dec_label_pc_10004ebd:                            ; preds = %dec_label_pc_10004ede, %dec_label_pc_10004eb1
  %v0_10004ebd = call i32 @CommandLine()
  store i32 %v0_10004ebd, i32* %eax.global-to-local, align 4
  %v1_10004ebf = inttoptr i32 %v0_10004ebd to i32*
  %v2_10004ebf = load i32, i32* %v1_10004ebf, align 4
  store i32 %v2_10004ebf, i32* %edx.global-to-local, align 4
  %v0_10004ec1 = load i32, i32* @esp, align 4
  %v1_10004ec1 = add i32 %v0_10004ec1, -4
  %v2_10004ec1 = inttoptr i32 %v1_10004ec1 to i32*
  store i32 0, i32* %v2_10004ec1, align 4
  %v0_10004ec3 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004ec3, i32* @ecx, align 4
  %v0_10004ec5 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004ec5 = add i32 %v0_10004ec5, 12
  %v2_10004ec5 = inttoptr i32 %v1_10004ec5 to i32*
  %v3_10004ec5 = load i32, i32* %v2_10004ec5, align 4
  store i32 %v3_10004ec5, i32* %eax.global-to-local, align 4
  %v1_10004ec8 = add i32 %v0_10004ec1, -8
  %v2_10004ec8 = inttoptr i32 %v1_10004ec8 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_10022ff0.217 to i32), i32* %v2_10004ec8, align 4
  %v1_10004ecf = icmp eq i32 %v3_10004ec5, 0
  br i1 %v1_10004ecf, label %dec_label_pc_10004fc3, label %dec_label_pc_10004ed7

dec_label_pc_10004ed7:                            ; preds = %dec_label_pc_10004ebd
  %v1_10004ed7 = add i32 %v0_10004ec1, -12
  %v2_10004ed7 = inttoptr i32 %v1_10004ed7 to i32*
  store i32 64, i32* %v2_10004ed7, align 4
  br label %dec_label_pc_10004fde

dec_label_pc_10004ede:                            ; preds = %dec_label_pc_10004e9a
  store i32 -1, i32* @ebx, align 4
  %v0_10004ee1 = call i32 @function_100028b0()
  store i32 %v0_10004ee1, i32* %eax.global-to-local, align 4
  %v4_10004ee6 = trunc i32 %v0_10004ee1 to i8
  %v5_10004ee6 = icmp eq i8 %v4_10004ee6, 0
  %v1_10004ee8 = icmp eq i1 %v5_10004ee6, false
  br i1 %v1_10004ee8, label %dec_label_pc_10004ebd, label %dec_label_pc_10004eea

dec_label_pc_10004eea:                            ; preds = %dec_label_pc_10004ede
  %v0_10004eea = call i32 @CommandLine()
  store i32 %v0_10004eea, i32* %eax.global-to-local, align 4
  %v1_10004eec = inttoptr i32 %v0_10004eea to i32*
  %v2_10004eec = load i32, i32* %v1_10004eec, align 4
  store i32 %v2_10004eec, i32* %edx.global-to-local, align 4
  %v0_10004eee = load i32, i32* @esp, align 4
  %v1_10004eee = add i32 %v0_10004eee, -4
  %v2_10004eee = inttoptr i32 %v1_10004eee to i32*
  store i32 0, i32* %v2_10004eee, align 4
  %v0_10004ef0 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004ef0, i32* @ecx, align 4
  %v0_10004ef2 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004ef2 = add i32 %v0_10004ef2, 12
  %v2_10004ef2 = inttoptr i32 %v1_10004ef2 to i32*
  %v3_10004ef2 = load i32, i32* %v2_10004ef2, align 4
  store i32 %v3_10004ef2, i32* %eax.global-to-local, align 4
  %v1_10004ef5 = add i32 %v0_10004eee, -8
  %v2_10004ef5 = inttoptr i32 %v1_10004ef5 to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_10022fe8.218 to i32), i32* %v2_10004ef5, align 4
  %v1_10004efc = icmp eq i32 %v3_10004ef2, 0
  %v1_10004fa6 = add i32 %v0_10004eee, -12
  %v2_10004fa6 = inttoptr i32 %v1_10004fa6 to i32*
  br i1 %v1_10004efc, label %dec_label_pc_10004fa6, label %dec_label_pc_10004f04

dec_label_pc_10004f04:                            ; preds = %dec_label_pc_10004eea
  store i32 0, i32* %v2_10004fa6, align 4
  %v1_10004f06 = add i32 %v0_10004eee, -16
  %v2_10004f06 = inttoptr i32 %v1_10004f06 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022fdc.219 to i32), i32* %v2_10004f06, align 4
  %v2_10004f0b = call i32* @FindWindowA(i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*))
  %v4_10004f0b = ptrtoint i32* %v2_10004f0b to i32
  store i32 %v4_10004f0b, i32* @eax, align 4
  store i32 %v4_10004f0b, i32* @edi, align 4
  %v1_10004f13 = icmp eq i32* %v2_10004f0b, null
  %v1_10004f15 = icmp eq i1 %v1_10004f13, false
  br i1 %v1_10004f15, label %dec_label_pc_10004f33, label %dec_label_pc_10004f17

dec_label_pc_10004f17:                            ; preds = %dec_label_pc_10004f04
  %v0_10004f17 = load i32, i32* @esp, align 4
  %v1_10004f17 = add i32 %v0_10004f17, -4
  %v2_10004f17 = inttoptr i32 %v1_10004f17 to i32*
  store i32 48, i32* %v2_10004f17, align 4
  %v1_10004f19 = add i32 %v0_10004f17, -8
  %v2_10004f19 = inttoptr i32 %v1_10004f19 to i32*
  store i32 ptrtoint ([26 x i8]* @global_var_10022fc0.220 to i32), i32* %v2_10004f19, align 4
  %v1_10004f1e = add i32 %v0_10004f17, -12
  %v2_10004f1e = inttoptr i32 %v1_10004f1e to i32*
  store i32 ptrtoint ([119 x i8]* @global_var_10022f48.221 to i32), i32* %v2_10004f1e, align 4
  %v0_10004f23 = load i32, i32* @eax, align 4
  %v2_10004f23 = add i32 %v0_10004f17, -16
  %v3_10004f23 = inttoptr i32 %v2_10004f23 to i32*
  store i32 %v0_10004f23, i32* %v3_10004f23, align 4
  %v3_10004f24 = call i32 @MessageBoxA(i32* nonnull @5, i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v0_10004f2a = load i32, i32* @ebx, align 4
  store i32 %v0_10004f2a, i32* %eax.global-to-local, align 4
  %v0_10004f2c = load i32, i32* @esp, align 4
  %v3_10004f2c = add i32 %v0_10004f2c, 4
  %v1_10004f2d = inttoptr i32 %v3_10004f2c to i32*
  %v2_10004f2d = load i32, i32* %v1_10004f2d, align 4
  store i32 %v2_10004f2d, i32* %edi.global-to-local, align 4
  %v3_10004f2d = add i32 %v0_10004f2c, 8
  %v1_10004f2e = inttoptr i32 %v3_10004f2d to i32*
  %v2_10004f2e = load i32, i32* %v1_10004f2e, align 4
  store i32 %v2_10004f2e, i32* %esi.global-to-local, align 4
  %v2_10004f31 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004f31, i32* %ebp.global-to-local, align 4
  ret i32 %v0_10004f2a

dec_label_pc_10004f33:                            ; preds = %dec_label_pc_10004f04
  %v0_10004f33 = call i32 @function_100040c0()
  store i32 %v0_10004f33, i32* %eax.global-to-local, align 4
  store i32 %v0_10004f33, i32* %esi.global-to-local, align 4
  %v1_10004f3a = add i32 %v0_10004f33, 1
  store i32 %v1_10004f3a, i32* %edx.global-to-local, align 4
  %v4_10004f40.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10004f40

dec_label_pc_10004f40:                            ; preds = %dec_label_pc_10004f40, %dec_label_pc_10004f33
  %v4_10004f40 = phi i32 [ %v6_10004f40, %dec_label_pc_10004f40 ], [ %v4_10004f40.pre, %dec_label_pc_10004f33 ]
  %v0_10004f42 = phi i32 [ %v1_10004f42, %dec_label_pc_10004f40 ], [ %v0_10004f33, %dec_label_pc_10004f33 ]
  %v1_10004f40 = inttoptr i32 %v0_10004f42 to i8*
  %v2_10004f40 = load i8, i8* %v1_10004f40, align 1
  %v3_10004f40 = zext i8 %v2_10004f40 to i32
  %v5_10004f40 = and i32 %v4_10004f40, -256
  %v6_10004f40 = or i32 %v3_10004f40, %v5_10004f40
  store i32 %v6_10004f40, i32* @ecx, align 4
  %v1_10004f42 = add i32 %v0_10004f42, 1
  store i32 %v1_10004f42, i32* %eax.global-to-local, align 4
  %v5_10004f43 = icmp eq i8 %v2_10004f40, 0
  %v1_10004f45 = icmp eq i1 %v5_10004f43, false
  br i1 %v1_10004f45, label %dec_label_pc_10004f40, label %dec_label_pc_10004f47

dec_label_pc_10004f47:                            ; preds = %dec_label_pc_10004f40
  %v2_10004f47 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_10004f47, i32* @ecx, align 4
  %v1_10004f4d = load i32, i32* @esp, align 4
  %v2_10004f4d = add i32 %v1_10004f4d, -4
  %v3_10004f4d = inttoptr i32 %v2_10004f4d to i32*
  store i32 %v2_10004f47, i32* %v3_10004f4d, align 4
  %v1_10004f4e = add i32 %v1_10004f4d, -8
  %v2_10004f4e = inttoptr i32 %v1_10004f4e to i32*
  store i32 0, i32* %v2_10004f4e, align 4
  %v0_10004f50 = load i32, i32* %eax.global-to-local, align 4
  %v1_10004f50 = load i32, i32* %edx.global-to-local, align 4
  %v2_10004f50 = sub i32 %v0_10004f50, %v1_10004f50
  store i32 %v2_10004f50, i32* %eax.global-to-local, align 4
  %v1_10004f52 = add i32 %v1_10004f4d, -12
  %v2_10004f52 = inttoptr i32 %v1_10004f52 to i32*
  store i32 74, i32* %v2_10004f52, align 4
  %v0_10004f54 = load i32, i32* %eax.global-to-local, align 4
  %v1_10004f54 = add i32 %v0_10004f54, 1
  store i32 %v1_10004f54, i32* %eax.global-to-local, align 4
  %v2_10004f55 = add i32 %v1_10004f4d, -16
  %v3_10004f55 = inttoptr i32 %v2_10004f55 to i32*
  store i32 %v4_10004f0b, i32* %v3_10004f55, align 4
  %v0_10004f56 = load i32, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-144, align 4
  %v0_10004f66 = load i32, i32* %esi.global-to-local, align 4
  %v5_10004f6c = call i32 @SendMessageA(i32* null, i32 %v0_10004f56, i32 %v0_10004f66, i32 ptrtoint (i32* @5 to i32))
  store i32 %v5_10004f6c, i32* %eax.global-to-local, align 4
  %v1_10004f72 = icmp eq i32 %v5_10004f6c, 0
  %v1_10004f74 = icmp eq i1 %v1_10004f72, false
  br i1 %v1_10004f74, label %dec_label_pc_10004f8b, label %dec_label_pc_10004f76

dec_label_pc_10004f76:                            ; preds = %dec_label_pc_10004f47
  %v0_10004f76 = load i32, i32* @esp, align 4
  %v1_10004f76 = add i32 %v0_10004f76, -4
  %v2_10004f76 = inttoptr i32 %v1_10004f76 to i32*
  store i32 48, i32* %v2_10004f76, align 4
  %v1_10004f78 = add i32 %v0_10004f76, -8
  %v2_10004f78 = inttoptr i32 %v1_10004f78 to i32*
  store i32 ptrtoint ([31 x i8]* @global_var_10022f24.222 to i32), i32* %v2_10004f78, align 4
  %v1_10004f7d = add i32 %v0_10004f76, -12
  %v2_10004f7d = inttoptr i32 %v1_10004f7d to i32*
  store i32 ptrtoint ([169 x i8]* @global_var_10022e78.223 to i32), i32* %v2_10004f7d, align 4
  %v2_10004f82 = add i32 %v0_10004f76, -16
  %v3_10004f82 = inttoptr i32 %v2_10004f82 to i32*
  store i32 %v5_10004f6c, i32* %v3_10004f82, align 4
  %v3_10004f83 = call i32 @MessageBoxA(i32* nonnull @5, i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_10004f83, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004f8d

dec_label_pc_10004f8b:                            ; preds = %dec_label_pc_10004f47
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_10004f8d

dec_label_pc_10004f8d:                            ; preds = %dec_label_pc_10004f8b, %dec_label_pc_10004f76
  %v0_10004f8d = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10004f8d, i32* %edx.global-to-local, align 4
  %v1_10004f93 = inttoptr i32 %v0_10004f8d to i32*
  %v2_10004f93 = load i32, i32* %v1_10004f93, align 4
  store i32 %v2_10004f93, i32* @ecx, align 4
  %v1_10004f95 = inttoptr i32 %v2_10004f93 to i32*
  %v2_10004f95 = load i32, i32* %v1_10004f95, align 4
  store i32 %v2_10004f95, i32* %eax.global-to-local, align 4
  %v1_10004f97 = add i32 %v2_10004f95, 20
  %v2_10004f97 = inttoptr i32 %v1_10004f97 to i32*
  %v3_10004f97 = load i32, i32* %v2_10004f97, align 4
  store i32 %v3_10004f97, i32* %edx.global-to-local, align 4
  %v0_10004f9a = load i32, i32* %esi.global-to-local, align 4
  %v1_10004f9a = load i32, i32* @esp, align 4
  %v2_10004f9a = add i32 %v1_10004f9a, -4
  %v3_10004f9a = inttoptr i32 %v2_10004f9a to i32*
  store i32 %v0_10004f9a, i32* %v3_10004f9a, align 4
  %v0_10004f9d = load i32, i32* @ebx, align 4
  store i32 %v0_10004f9d, i32* %eax.global-to-local, align 4
  %v1_10004fa0 = inttoptr i32 %v1_10004f9a to i32*
  %v2_10004fa0 = load i32, i32* %v1_10004fa0, align 4
  store i32 %v2_10004fa0, i32* %edi.global-to-local, align 4
  %v3_10004fa0 = add i32 %v1_10004f9a, 4
  %v1_10004fa1 = inttoptr i32 %v3_10004fa0 to i32*
  %v2_10004fa1 = load i32, i32* %v1_10004fa1, align 4
  store i32 %v2_10004fa1, i32* %esi.global-to-local, align 4
  %v2_10004fa4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004fa4, i32* %ebp.global-to-local, align 4
  ret i32 %v0_10004f9d

dec_label_pc_10004fa6:                            ; preds = %dec_label_pc_10004eea
  store i32 64, i32* %v2_10004fa6, align 4
  %v1_10004fa8 = add i32 %v0_10004eee, -16
  %v2_10004fa8 = inttoptr i32 %v1_10004fa8 to i32*
  store i32 ptrtoint ([17 x i8]* @global_var_10022e64.224 to i32), i32* %v2_10004fa8, align 4
  %v1_10004fad = add i32 %v0_10004eee, -20
  %v2_10004fad = inttoptr i32 %v1_10004fad to i32*
  store i32 ptrtoint ([58 x i8]* @global_var_10022e28.225 to i32), i32* %v2_10004fad, align 4
  %v1_10004fb2 = add i32 %v0_10004eee, -24
  %v2_10004fb2 = inttoptr i32 %v1_10004fb2 to i32*
  store i32 0, i32* %v2_10004fb2, align 4
  %v3_10004fb4 = call i32 @MessageBoxA(i32* nonnull @5, i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v0_10004fba = load i32, i32* @ebx, align 4
  store i32 %v0_10004fba, i32* %eax.global-to-local, align 4
  %v0_10004fbc = load i32, i32* @esp, align 4
  %v3_10004fbc = add i32 %v0_10004fbc, 4
  %v1_10004fbd = inttoptr i32 %v3_10004fbc to i32*
  %v2_10004fbd = load i32, i32* %v1_10004fbd, align 4
  store i32 %v2_10004fbd, i32* %edi.global-to-local, align 4
  %v3_10004fbd = add i32 %v0_10004fbc, 8
  %v1_10004fbe = inttoptr i32 %v3_10004fbd to i32*
  %v2_10004fbe = load i32, i32* %v1_10004fbe, align 4
  store i32 %v2_10004fbe, i32* %esi.global-to-local, align 4
  %v2_10004fc1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10004fc1, i32* %ebp.global-to-local, align 4
  ret i32 %v0_10004fba

dec_label_pc_10004fc3:                            ; preds = %dec_label_pc_10004ebd
  %v0_10004fc3 = call i32 @CommandLine()
  store i32 %v0_10004fc3, i32* %eax.global-to-local, align 4
  %v1_10004fc5 = inttoptr i32 %v0_10004fc3 to i32*
  %v2_10004fc5 = load i32, i32* %v1_10004fc5, align 4
  store i32 %v2_10004fc5, i32* %edx.global-to-local, align 4
  %v0_10004fc7 = load i32, i32* @esp, align 4
  %v1_10004fc7 = add i32 %v0_10004fc7, -4
  %v2_10004fc7 = inttoptr i32 %v1_10004fc7 to i32*
  store i32 0, i32* %v2_10004fc7, align 4
  %v0_10004fc9 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004fc9, i32* @ecx, align 4
  %v0_10004fcb = load i32, i32* %edx.global-to-local, align 4
  %v1_10004fcb = add i32 %v0_10004fcb, 12
  %v2_10004fcb = inttoptr i32 %v1_10004fcb to i32*
  %v3_10004fcb = load i32, i32* %v2_10004fcb, align 4
  store i32 %v3_10004fcb, i32* %eax.global-to-local, align 4
  %v1_10004fce = add i32 %v0_10004fc7, -8
  %v2_10004fce = inttoptr i32 %v1_10004fce to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022e20.226 to i32), i32* %v2_10004fce, align 4
  %v1_10004fd5 = icmp eq i32 %v3_10004fcb, 0
  br i1 %v1_10004fd5, label %dec_label_pc_10004feb, label %dec_label_pc_10004fd9

dec_label_pc_10004fd9:                            ; preds = %dec_label_pc_10004fc3
  %v1_10004fd9 = add i32 %v0_10004fc7, -12
  %v2_10004fd9 = inttoptr i32 %v1_10004fd9 to i32*
  store i32 128, i32* %v2_10004fd9, align 4
  br label %dec_label_pc_10004fde

dec_label_pc_10004fde:                            ; preds = %dec_label_pc_10004fd9, %dec_label_pc_10004ed7
  %v0_10004fde = call i32* @GetCurrentProcess()
  %v2_10004fde = ptrtoint i32* %v0_10004fde to i32
  store i32 %v2_10004fde, i32* %eax.global-to-local, align 4
  %v1_10004fe4 = load i32, i32* @esp, align 4
  %v2_10004fe4 = add i32 %v1_10004fe4, -4
  %v3_10004fe4 = inttoptr i32 %v2_10004fe4 to i32*
  store i32 %v2_10004fde, i32* %v3_10004fe4, align 4
  %v1_10004fe5 = call i1 @SetPriorityClass(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_10004fe5 = sext i1 %v1_10004fe5 to i32
  store i32 %v3_10004fe5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10004feb

dec_label_pc_10004feb:                            ; preds = %dec_label_pc_10004fde, %dec_label_pc_10004fc3
  %v0_10004feb = call i32 @CommandLine()
  store i32 %v0_10004feb, i32* %eax.global-to-local, align 4
  %v1_10004fed = inttoptr i32 %v0_10004feb to i32*
  %v2_10004fed = load i32, i32* %v1_10004fed, align 4
  store i32 %v2_10004fed, i32* %edx.global-to-local, align 4
  %v0_10004fef = load i32, i32* @esp, align 4
  %v1_10004fef = add i32 %v0_10004fef, -4
  %v2_10004fef = inttoptr i32 %v1_10004fef to i32*
  store i32 0, i32* %v2_10004fef, align 4
  %v0_10004ff1 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10004ff1, i32* @ecx, align 4
  %v0_10004ff3 = load i32, i32* %edx.global-to-local, align 4
  %v1_10004ff3 = add i32 %v0_10004ff3, 12
  %v2_10004ff3 = inttoptr i32 %v1_10004ff3 to i32*
  %v3_10004ff3 = load i32, i32* %v2_10004ff3, align 4
  store i32 %v3_10004ff3, i32* %eax.global-to-local, align 4
  %v1_10004ff6 = add i32 %v0_10004fef, -8
  %v2_10004ff6 = inttoptr i32 %v1_10004ff6 to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_10022700.115 to i32), i32* %v2_10004ff6, align 4
  %v1_10004ffd = icmp eq i32 %v3_10004ff3, 0
  %v1_10004fff = icmp eq i1 %v1_10004ffd, false
  br i1 %v1_10004fff, label %dec_label_pc_10005013, label %dec_label_pc_10005001

dec_label_pc_10005001:                            ; preds = %dec_label_pc_10004feb
  %v0_10005001 = call i32 @CommandLine()
  store i32 %v0_10005001, i32* %eax.global-to-local, align 4
  %v1_10005003 = inttoptr i32 %v0_10005001 to i32*
  %v2_10005003 = load i32, i32* %v1_10005003, align 4
  store i32 %v2_10005003, i32* %edx.global-to-local, align 4
  %v0_10005005 = load i32, i32* @esp, align 4
  %v1_10005005 = add i32 %v0_10005005, -4
  %v2_10005005 = inttoptr i32 %v1_10005005 to i32*
  store i32 0, i32* %v2_10005005, align 4
  %v0_10005007 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10005007, i32* @ecx, align 4
  %v0_10005009 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005009 = add i32 %v0_10005009, 20
  %v2_10005009 = inttoptr i32 %v1_10005009 to i32*
  %v3_10005009 = load i32, i32* %v2_10005009, align 4
  store i32 %v3_10005009, i32* %eax.global-to-local, align 4
  %v1_1000500c = add i32 %v0_10005005, -8
  %v2_1000500c = inttoptr i32 %v1_1000500c to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022e14.227 to i32), i32* %v2_1000500c, align 4
  br label %dec_label_pc_10005013

dec_label_pc_10005013:                            ; preds = %dec_label_pc_10005001, %dec_label_pc_10004feb
  %v0_10005013 = phi i32 [ %v1_1000500c, %dec_label_pc_10005001 ], [ %v1_10004ff6, %dec_label_pc_10004feb ]
  %v1_10005013 = add i32 %v0_10005013, -4
  %v2_10005013 = inttoptr i32 %v1_10005013 to i32*
  store i32 ptrtoint (i8** @global_var_10029f80.71 to i32), i32* %v2_10005013, align 4
  %v1_10005018 = call i32 @__chdir(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10005018, i32* %eax.global-to-local, align 4
  %v0_10005020 = call i32 @CommandLine()
  store i32 %v0_10005020, i32* %eax.global-to-local, align 4
  %v1_10005022 = inttoptr i32 %v0_10005020 to i32*
  %v2_10005022 = load i32, i32* %v1_10005022, align 4
  store i32 %v2_10005022, i32* %edx.global-to-local, align 4
  %v0_10005024 = load i32, i32* @esp, align 4
  %v1_10005024 = add i32 %v0_10005024, -4
  %v2_10005024 = inttoptr i32 %v1_10005024 to i32*
  store i32 0, i32* %v2_10005024, align 4
  %v0_10005026 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10005026, i32* @ecx, align 4
  %v0_10005028 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005028 = add i32 %v0_10005028, 12
  %v2_10005028 = inttoptr i32 %v1_10005028 to i32*
  %v3_10005028 = load i32, i32* %v2_10005028, align 4
  store i32 %v3_10005028, i32* %eax.global-to-local, align 4
  %v1_1000502b = add i32 %v0_10005024, -8
  %v2_1000502b = inttoptr i32 %v1_1000502b to i32*
  store i32 ptrtoint ([15 x i8]* @global_var_10022e04.228 to i32), i32* %v2_1000502b, align 4
  %v1_10005032 = icmp eq i32 %v3_10005028, 0
  br i1 %v1_10005032, label %dec_label_pc_1000505a, label %dec_label_pc_10005036

dec_label_pc_10005036:                            ; preds = %dec_label_pc_10005013
  %v0_10005036 = call i32 @CommandLine()
  store i32 %v0_10005036, i32* %eax.global-to-local, align 4
  %v1_10005038 = inttoptr i32 %v0_10005036 to i32*
  %v2_10005038 = load i32, i32* %v1_10005038, align 4
  store i32 %v2_10005038, i32* %edx.global-to-local, align 4
  %v0_1000503a = load i32, i32* @esp, align 4
  %v1_1000503a = add i32 %v0_1000503a, -4
  %v2_1000503a = inttoptr i32 %v1_1000503a to i32*
  store i32 0, i32* %v2_1000503a, align 4
  %v0_1000503c = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000503c, i32* @ecx, align 4
  %v0_1000503e = load i32, i32* %edx.global-to-local, align 4
  %v1_1000503e = add i32 %v0_1000503e, 20
  %v2_1000503e = inttoptr i32 %v1_1000503e to i32*
  %v3_1000503e = load i32, i32* %v2_1000503e, align 4
  store i32 %v3_1000503e, i32* %eax.global-to-local, align 4
  %v1_10005041 = add i32 %v0_1000503a, -8
  %v2_10005041 = inttoptr i32 %v1_10005041 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022df8.229 to i32), i32* %v2_10005041, align 4
  %v0_10005048 = call i32 @CommandLine()
  store i32 %v0_10005048, i32* %eax.global-to-local, align 4
  %v1_1000504a = inttoptr i32 %v0_10005048 to i32*
  %v2_1000504a = load i32, i32* %v1_1000504a, align 4
  store i32 %v2_1000504a, i32* %edx.global-to-local, align 4
  %v0_1000504c = load i32, i32* @esp, align 4
  %v1_1000504c = add i32 %v0_1000504c, -4
  %v2_1000504c = inttoptr i32 %v1_1000504c to i32*
  store i32 0, i32* %v2_1000504c, align 4
  %v0_1000504e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000504e, i32* @ecx, align 4
  %v0_10005050 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005050 = add i32 %v0_10005050, 20
  %v2_10005050 = inttoptr i32 %v1_10005050 to i32*
  %v3_10005050 = load i32, i32* %v2_10005050, align 4
  store i32 %v3_10005050, i32* %eax.global-to-local, align 4
  %v1_10005053 = add i32 %v0_1000504c, -8
  %v2_10005053 = inttoptr i32 %v1_10005053 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022dec.230 to i32), i32* %v2_10005053, align 4
  br label %dec_label_pc_1000505a

dec_label_pc_1000505a:                            ; preds = %dec_label_pc_10005036, %dec_label_pc_10005013
  %v0_1000505a = call i32 @CommandLine()
  store i32 %v0_1000505a, i32* %eax.global-to-local, align 4
  %v1_1000505c = inttoptr i32 %v0_1000505a to i32*
  %v2_1000505c = load i32, i32* %v1_1000505c, align 4
  store i32 %v2_1000505c, i32* %edx.global-to-local, align 4
  %v0_1000505e = load i32, i32* @esp, align 4
  %v1_1000505e = add i32 %v0_1000505e, -4
  %v2_1000505e = inttoptr i32 %v1_1000505e to i32*
  store i32 0, i32* %v2_1000505e, align 4
  %v0_10005060 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10005060, i32* @ecx, align 4
  %v0_10005062 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005062 = add i32 %v0_10005062, 12
  %v2_10005062 = inttoptr i32 %v1_10005062 to i32*
  %v3_10005062 = load i32, i32* %v2_10005062, align 4
  store i32 %v3_10005062, i32* %eax.global-to-local, align 4
  %v1_10005065 = add i32 %v0_1000505e, -8
  %v2_10005065 = inttoptr i32 %v1_10005065 to i32*
  store i32 ptrtoint ([11 x i8]* @global_var_10022de0.231 to i32), i32* %v2_10005065, align 4
  %v1_1000506c = icmp eq i32 %v3_10005062, 0
  %v1_1000506e = icmp eq i1 %v1_1000506c, false
  %v2_1000506e = zext i1 %v1_1000506e to i32
  %v3_1000506e = load i32, i32* @ecx, align 4
  %v4_1000506e = and i32 %v3_1000506e, -256
  %v5_1000506e = or i32 %v4_1000506e, %v2_1000506e
  store i32 %v5_1000506e, i32* @ecx, align 4
  %v1_10005071 = zext i1 %v1_1000506e to i8
  store i8 %v1_10005071, i8* @global_var_1002a300.232, align 1
  store i32 0, i32* @ebx, align 4
  %v2_10005082 = ptrtoint i32* %stack_var_-512 to i32
  %v2_10005094 = ptrtoint i32* %stack_var_-132 to i32
  %v2_100051a6 = ptrtoint i32* %stack_var_-68 to i32
  %v2_100052e6 = ptrtoint i32* %stack_var_-448 to i32
  br label %dec_label_pc_10005080

dec_label_pc_10005080:                            ; preds = %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge, %dec_label_pc_1000505a
  %v1_10005080 = phi i32 [ %v1_10005065, %dec_label_pc_1000505a ], [ %v1_10005080.pre, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_10005080 = phi i32 [ 0, %dec_label_pc_1000505a ], [ %v5_1000548c, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_100051d5 = phi i32 [ %tmp326, %dec_label_pc_1000505a ], [ %stack_var_-64.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_10005224 = phi i32 [ %tmp321, %dec_label_pc_1000505a ], [ %stack_var_-88.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_1000526d = phi i32 [ %tmp316, %dec_label_pc_1000505a ], [ %stack_var_-108.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_100052b6 = phi i32 [ %tmp311, %dec_label_pc_1000505a ], [ %stack_var_-128.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_10005324 = phi i32 [ %tmp305, %dec_label_pc_1000505a ], [ %stack_var_-444.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_1000538e = phi i32 [ %tmp300, %dec_label_pc_1000505a ], [ %stack_var_-468.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_100053f2 = phi i32 [ %tmp295, %dec_label_pc_1000505a ], [ %stack_var_-488.2, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v0_10005456 = phi i32 [ %tmp290, %dec_label_pc_1000505a ], [ %v0_10005486, %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge ]
  %v2_10005080 = add i32 %v1_10005080, -4
  %v3_10005080 = inttoptr i32 %v2_10005080 to i32*
  store i32 %v0_10005080, i32* %v3_10005080, align 4
  %v0_10005081 = load i32, i32* @ebx, align 4
  %v2_10005081 = add i32 %v1_10005080, -8
  %v3_10005081 = inttoptr i32 %v2_10005081 to i32*
  store i32 %v0_10005081, i32* %v3_10005081, align 4
  store i32 %v2_10005082, i32* @ecx, align 4
  %v1_10005088 = call i32 @function_10008b60(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10005088, i32* %eax.global-to-local, align 4
  store i32 %v2_10005082, i32* %edx.global-to-local, align 4
  %v1_10005093 = load i32, i32* @esp, align 4
  %v2_10005093 = add i32 %v1_10005093, -4
  %v3_10005093 = inttoptr i32 %v2_10005093 to i32*
  store i32 %v2_10005082, i32* %v3_10005093, align 4
  store i32 %v2_10005094, i32* @ecx, align 4
  store i32 ptrtoint (%vtable_10022ce4_type* @global_var_10022ce4.233 to i32), i32* %stack_var_-512, align 4
  %v2_100050a1 = call i32 @function_10009280(i32* bitcast (%vtable_10022ce4_type* @global_var_10022ce4.233 to i32*))
  store i32 %v2_100050a1, i32* %eax.global-to-local, align 4
  store i32 %v2_10005094, i32* @ecx, align 4
  %v0_100050a9 = call i32 @function_10009010()
  store i32 %v0_100050a9, i32* %eax.global-to-local, align 4
  store i32 %v2_10005094, i32* @ecx, align 4
  store i32 %v0_100050a9, i32* @edi, align 4
  %v0_100050b3 = call i32 @function_10007150()
  store i32 %v0_100050b3, i32* %eax.global-to-local, align 4
  %v10_100050b8 = icmp eq i32 %v0_100050b3, 4
  %v1_100050bb = icmp eq i1 %v10_100050b8, false
  %v0_1000554e = load i32, i32* @edi, align 4
  br i1 %v1_100050bb, label %dec_label_pc_1000554e, label %dec_label_pc_100050c1

dec_label_pc_100050c1:                            ; preds = %dec_label_pc_10005080
  %v10_100050c1 = icmp eq i32 %v0_1000554e, 2
  %v1_100050c4 = zext i1 %v10_100050c1 to i32
  %v3_100050c4 = and i32 %v0_100050b3, -256
  %v4_100050c4 = or i32 %v1_100050c4, %v3_100050c4
  store i32 %v4_100050c4, i32* %eax.global-to-local, align 4
  %v5_100050c7 = inttoptr i32 %v1_100050c4 to i32*
  %v5_100050ca = icmp eq i1 %v10_100050c1, false
  %v1_100050cc = icmp eq i1 %v5_100050ca, false
  br i1 %v1_100050cc, label %dec_label_pc_100050e6, label %dec_label_pc_100050ce

dec_label_pc_100050ce:                            ; preds = %dec_label_pc_1000554e, %dec_label_pc_100050c1
  %v0_100050ce = load i32, i32* bitcast (i32** @global_var_10028148.198 to i32*), align 4
  store i32 %v0_100050ce, i32* @ecx, align 4
  store i32 %v0_100050ce, i32* %eax.global-to-local, align 4
  %v3_100050d6 = load i32, i32* @global_var_10028158.234, align 4
  store i32 %v3_100050d6, i32* %edx.global-to-local, align 4
  %tmp401 = and i32 %v0_100050ce, 255
  %v5_100050db = inttoptr i32 %tmp401 to i32*
  %v4_100050de = trunc i32 %v0_100050ce to i8
  %v5_100050de = icmp eq i8 %v4_100050de, 0
  %v1_100050e0 = icmp eq i1 %v5_100050de, false
  br i1 %v1_100050e0, label %dec_label_pc_100051a6, label %dec_label_pc_100050e6

dec_label_pc_100050e6:                            ; preds = %dec_label_pc_1000554e, %dec_label_pc_100050ce, %dec_label_pc_100050c1
  %stack_var_-5.0 = phi i32* [ %v5_100050db, %dec_label_pc_100050ce ], [ %v5_100050c7, %dec_label_pc_100050c1 ], [ inttoptr (i8 1 to i32*), %dec_label_pc_1000554e ]
  %v0_100050e6 = call i32 @CommandLine()
  store i32 %v0_100050e6, i32* %eax.global-to-local, align 4
  %v1_100050e8 = inttoptr i32 %v0_100050e6 to i32*
  %v2_100050e8 = load i32, i32* %v1_100050e8, align 4
  store i32 %v2_100050e8, i32* %edx.global-to-local, align 4
  store i32 %v0_100050e6, i32* @ecx, align 4
  %v1_100050ec = add i32 %v2_100050e8, 16
  %v2_100050ec = inttoptr i32 %v1_100050ec to i32*
  %v3_100050ec = load i32, i32* %v2_100050ec, align 4
  store i32 %v3_100050ec, i32* %eax.global-to-local, align 4
  %v0_100050ef = load i32, i32* @esp, align 4
  %v1_100050ef = add i32 %v0_100050ef, -4
  %v2_100050ef = inttoptr i32 %v1_100050ef to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_10022ddc.235 to i32), i32* %v2_100050ef, align 4
  %v0_100050f6 = call i32 @CommandLine()
  store i32 %v0_100050f6, i32* %eax.global-to-local, align 4
  %v1_100050f8 = inttoptr i32 %v0_100050f6 to i32*
  %v2_100050f8 = load i32, i32* %v1_100050f8, align 4
  store i32 %v2_100050f8, i32* %edx.global-to-local, align 4
  store i32 %v0_100050f6, i32* @ecx, align 4
  %v1_100050fc = add i32 %v2_100050f8, 16
  %v2_100050fc = inttoptr i32 %v1_100050fc to i32*
  %v3_100050fc = load i32, i32* %v2_100050fc, align 4
  store i32 %v3_100050fc, i32* %eax.global-to-local, align 4
  %v0_100050ff = load i32, i32* @esp, align 4
  %v1_100050ff = add i32 %v0_100050ff, -4
  %v2_100050ff = inttoptr i32 %v1_100050ff to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_10022dd8.236 to i32), i32* %v2_100050ff, align 4
  %v0_10005106 = call i32 @CommandLine()
  store i32 %v0_10005106, i32* %eax.global-to-local, align 4
  %v1_10005108 = inttoptr i32 %v0_10005106 to i32*
  %v2_10005108 = load i32, i32* %v1_10005108, align 4
  store i32 %v2_10005108, i32* %edx.global-to-local, align 4
  store i32 %v0_10005106, i32* @ecx, align 4
  %v1_1000510c = add i32 %v2_10005108, 16
  %v2_1000510c = inttoptr i32 %v1_1000510c to i32*
  %v3_1000510c = load i32, i32* %v2_1000510c, align 4
  store i32 %v3_1000510c, i32* %eax.global-to-local, align 4
  %v0_1000510f = load i32, i32* @esp, align 4
  %v1_1000510f = add i32 %v0_1000510f, -4
  %v2_1000510f = inttoptr i32 %v1_1000510f to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_10022dd0.237 to i32), i32* %v2_1000510f, align 4
  %v0_10005116 = call i32 @CommandLine()
  store i32 %v0_10005116, i32* %eax.global-to-local, align 4
  %v1_10005118 = inttoptr i32 %v0_10005116 to i32*
  %v2_10005118 = load i32, i32* %v1_10005118, align 4
  store i32 %v2_10005118, i32* %edx.global-to-local, align 4
  store i32 %v0_10005116, i32* @ecx, align 4
  %v1_1000511c = add i32 %v2_10005118, 16
  %v2_1000511c = inttoptr i32 %v1_1000511c to i32*
  %v3_1000511c = load i32, i32* %v2_1000511c, align 4
  store i32 %v3_1000511c, i32* %eax.global-to-local, align 4
  %v0_1000511f = load i32, i32* @esp, align 4
  %v1_1000511f = add i32 %v0_1000511f, -4
  %v2_1000511f = inttoptr i32 %v1_1000511f to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_10022dc8.238 to i32), i32* %v2_1000511f, align 4
  %v0_10005126 = call i32 @CommandLine()
  store i32 %v0_10005126, i32* %eax.global-to-local, align 4
  %v1_10005128 = inttoptr i32 %v0_10005126 to i32*
  %v2_10005128 = load i32, i32* %v1_10005128, align 4
  store i32 %v2_10005128, i32* %edx.global-to-local, align 4
  store i32 %v0_10005126, i32* @ecx, align 4
  %v1_1000512c = add i32 %v2_10005128, 16
  %v2_1000512c = inttoptr i32 %v1_1000512c to i32*
  %v3_1000512c = load i32, i32* %v2_1000512c, align 4
  store i32 %v3_1000512c, i32* %eax.global-to-local, align 4
  %v0_1000512f = load i32, i32* @esp, align 4
  %v1_1000512f = add i32 %v0_1000512f, -4
  %v2_1000512f = inttoptr i32 %v1_1000512f to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_10022dc4.239 to i32), i32* %v2_1000512f, align 4
  %v0_10005136 = call i32 @CommandLine()
  store i32 %v0_10005136, i32* %eax.global-to-local, align 4
  %v1_10005138 = inttoptr i32 %v0_10005136 to i32*
  %v2_10005138 = load i32, i32* %v1_10005138, align 4
  store i32 %v2_10005138, i32* %edx.global-to-local, align 4
  store i32 %v0_10005136, i32* @ecx, align 4
  %v1_1000513c = add i32 %v2_10005138, 16
  %v2_1000513c = inttoptr i32 %v1_1000513c to i32*
  %v3_1000513c = load i32, i32* %v2_1000513c, align 4
  store i32 %v3_1000513c, i32* %eax.global-to-local, align 4
  %v0_1000513f = load i32, i32* @esp, align 4
  %v1_1000513f = add i32 %v0_1000513f, -4
  %v2_1000513f = inttoptr i32 %v1_1000513f to i32*
  store i32 ptrtoint ([15 x i8]* @global_var_10022db4.240 to i32), i32* %v2_1000513f, align 4
  %v0_10005146 = call i32 @CommandLine()
  store i32 %v0_10005146, i32* %eax.global-to-local, align 4
  %v1_10005148 = inttoptr i32 %v0_10005146 to i32*
  %v2_10005148 = load i32, i32* %v1_10005148, align 4
  store i32 %v2_10005148, i32* %edx.global-to-local, align 4
  store i32 %v0_10005146, i32* @ecx, align 4
  %v1_1000514c = add i32 %v2_10005148, 16
  %v2_1000514c = inttoptr i32 %v1_1000514c to i32*
  %v3_1000514c = load i32, i32* %v2_1000514c, align 4
  store i32 %v3_1000514c, i32* %eax.global-to-local, align 4
  %v0_1000514f = load i32, i32* @esp, align 4
  %v1_1000514f = add i32 %v0_1000514f, -4
  %v2_1000514f = inttoptr i32 %v1_1000514f to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022da8.241 to i32), i32* %v2_1000514f, align 4
  %v0_10005156 = call i32 @CommandLine()
  store i32 %v0_10005156, i32* %eax.global-to-local, align 4
  %v1_10005158 = inttoptr i32 %v0_10005156 to i32*
  %v2_10005158 = load i32, i32* %v1_10005158, align 4
  store i32 %v2_10005158, i32* %edx.global-to-local, align 4
  store i32 %v0_10005156, i32* @ecx, align 4
  %v1_1000515c = add i32 %v2_10005158, 16
  %v2_1000515c = inttoptr i32 %v1_1000515c to i32*
  %v3_1000515c = load i32, i32* %v2_1000515c, align 4
  store i32 %v3_1000515c, i32* %eax.global-to-local, align 4
  %v0_1000515f = load i32, i32* @esp, align 4
  %v1_1000515f = add i32 %v0_1000515f, -4
  %v2_1000515f = inttoptr i32 %v1_1000515f to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_10022da0.242 to i32), i32* %v2_1000515f, align 4
  %v0_10005166 = call i32 @CommandLine()
  store i32 %v0_10005166, i32* %eax.global-to-local, align 4
  %v1_10005168 = inttoptr i32 %v0_10005166 to i32*
  %v2_10005168 = load i32, i32* %v1_10005168, align 4
  store i32 %v2_10005168, i32* %edx.global-to-local, align 4
  store i32 %v0_10005166, i32* @ecx, align 4
  %v1_1000516c = add i32 %v2_10005168, 16
  %v2_1000516c = inttoptr i32 %v1_1000516c to i32*
  %v3_1000516c = load i32, i32* %v2_1000516c, align 4
  store i32 %v3_1000516c, i32* %eax.global-to-local, align 4
  %v0_1000516f = load i32, i32* @esp, align 4
  %v1_1000516f = add i32 %v0_1000516f, -4
  %v2_1000516f = inttoptr i32 %v1_1000516f to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022d98.243 to i32), i32* %v2_1000516f, align 4
  %v0_10005176 = call i32 @CommandLine()
  store i32 %v0_10005176, i32* %eax.global-to-local, align 4
  %v1_10005178 = inttoptr i32 %v0_10005176 to i32*
  %v2_10005178 = load i32, i32* %v1_10005178, align 4
  store i32 %v2_10005178, i32* %edx.global-to-local, align 4
  store i32 %v0_10005176, i32* @ecx, align 4
  %v1_1000517c = add i32 %v2_10005178, 16
  %v2_1000517c = inttoptr i32 %v1_1000517c to i32*
  %v3_1000517c = load i32, i32* %v2_1000517c, align 4
  store i32 %v3_1000517c, i32* %eax.global-to-local, align 4
  %v0_1000517f = load i32, i32* @esp, align 4
  %v1_1000517f = add i32 %v0_1000517f, -4
  %v2_1000517f = inttoptr i32 %v1_1000517f to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022d8c.244 to i32), i32* %v2_1000517f, align 4
  %v0_10005186 = call i32 @CommandLine()
  store i32 %v0_10005186, i32* %eax.global-to-local, align 4
  %v1_10005188 = inttoptr i32 %v0_10005186 to i32*
  %v2_10005188 = load i32, i32* %v1_10005188, align 4
  store i32 %v2_10005188, i32* %edx.global-to-local, align 4
  store i32 %v0_10005186, i32* @ecx, align 4
  %v1_1000518c = add i32 %v2_10005188, 16
  %v2_1000518c = inttoptr i32 %v1_1000518c to i32*
  %v3_1000518c = load i32, i32* %v2_1000518c, align 4
  store i32 %v3_1000518c, i32* %eax.global-to-local, align 4
  %v0_1000518f = load i32, i32* @esp, align 4
  %v1_1000518f = add i32 %v0_1000518f, -4
  %v2_1000518f = inttoptr i32 %v1_1000518f to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022d80.245 to i32), i32* %v2_1000518f, align 4
  %v0_10005196 = call i32 @CommandLine()
  store i32 %v0_10005196, i32* %eax.global-to-local, align 4
  %v1_10005198 = inttoptr i32 %v0_10005196 to i32*
  %v2_10005198 = load i32, i32* %v1_10005198, align 4
  store i32 %v2_10005198, i32* %edx.global-to-local, align 4
  store i32 %v0_10005196, i32* @ecx, align 4
  %v1_1000519c = add i32 %v2_10005198, 16
  %v2_1000519c = inttoptr i32 %v1_1000519c to i32*
  %v3_1000519c = load i32, i32* %v2_1000519c, align 4
  store i32 %v3_1000519c, i32* %eax.global-to-local, align 4
  %v0_1000519f = load i32, i32* @esp, align 4
  %v1_1000519f = add i32 %v0_1000519f, -4
  %v2_1000519f = inttoptr i32 %v1_1000519f to i32*
  store i32 ptrtoint ([15 x i8]* @global_var_10022d70.246 to i32), i32* %v2_1000519f, align 4
  br label %dec_label_pc_100051a6

dec_label_pc_100051a6:                            ; preds = %dec_label_pc_100050e6, %dec_label_pc_100050ce
  %stack_var_-5.1 = phi i32* [ %v5_100050db, %dec_label_pc_100050ce ], [ %stack_var_-5.0, %dec_label_pc_100050e6 ]
  store i32 %v2_100051a6, i32* @ecx, align 4
  %v0_100051a9 = call i32 @function_10004370()
  store i32 %v0_100051a9, i32* %eax.global-to-local, align 4
  store i32 %v2_100051a6, i32* @ecx, align 4
  %v0_100051b1 = call i32 @function_10003ce0()
  store i32 %v0_100051d5, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v4_100051c2 = load i32, i32* @ebx, align 4
  %v5_100051c5 = icmp slt i32 %tmp324, %v4_100051c2
  br i1 %v5_100051c5, label %dec_label_pc_100051e3, label %dec_label_pc_100051c7

dec_label_pc_100051c7:                            ; preds = %dec_label_pc_100051a6
  %v12_100051c7 = icmp eq i32 %v0_100051d5, %v4_100051c2
  br i1 %v12_100051c7, label %dec_label_pc_100051e3, label %dec_label_pc_100051cb

dec_label_pc_100051cb:                            ; preds = %dec_label_pc_100051c7
  %v0_100051cb = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100051cb, i32* %edx.global-to-local, align 4
  %v1_100051d1 = inttoptr i32 %v0_100051cb to i32*
  %v2_100051d1 = load i32, i32* %v1_100051d1, align 4
  store i32 %v2_100051d1, i32* @ecx, align 4
  %v1_100051d3 = inttoptr i32 %v2_100051d1 to i32*
  %v2_100051d3 = load i32, i32* %v1_100051d3, align 4
  store i32 %v2_100051d3, i32* %edx.global-to-local, align 4
  %v1_100051d5 = load i32, i32* @esp, align 4
  %v2_100051d5 = add i32 %v1_100051d5, -4
  %v3_100051d5 = inttoptr i32 %v2_100051d5 to i32*
  store i32 %v0_100051d5, i32* %v3_100051d5, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_100051ec.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100051e3

dec_label_pc_100051e3:                            ; preds = %dec_label_pc_100051c7, %dec_label_pc_100051cb, %dec_label_pc_100051a6
  %v1_100051f1 = phi i32 [ %v4_100051c2, %dec_label_pc_100051a6 ], [ %v4_100051c2, %dec_label_pc_100051c7 ], [ %v4_100051ec.pre, %dec_label_pc_100051cb ]
  %v0_100051ff = phi i32 [ %v0_100051d5, %dec_label_pc_100051a6 ], [ %v0_100051d5, %dec_label_pc_100051c7 ], [ 0, %dec_label_pc_100051cb ]
  store i32 65535, i32* @ecx, align 4
  %v5_100051ef = icmp slt i32 %tmp324, %v1_100051f1
  br i1 %v5_100051ef, label %dec_label_pc_1000520b, label %dec_label_pc_100051f1

dec_label_pc_100051f1:                            ; preds = %dec_label_pc_100051e3
  %v12_100051f1 = icmp eq i32 %v0_100051ff, %v1_100051f1
  br i1 %v12_100051f1, label %dec_label_pc_1000520b, label %dec_label_pc_100051f5

dec_label_pc_100051f5:                            ; preds = %dec_label_pc_100051f1
  %v0_100051f5 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100051f5, i32* %edx.global-to-local, align 4
  %v1_100051fb = inttoptr i32 %v0_100051f5 to i32*
  %v2_100051fb = load i32, i32* %v1_100051fb, align 4
  store i32 %v2_100051fb, i32* @ecx, align 4
  %v1_100051fd = inttoptr i32 %v2_100051fb to i32*
  %v2_100051fd = load i32, i32* %v1_100051fd, align 4
  store i32 %v2_100051fd, i32* %edx.global-to-local, align 4
  %v1_100051ff = load i32, i32* @esp, align 4
  %v2_100051ff = add i32 %v1_100051ff, -4
  %v3_100051ff = inttoptr i32 %v2_100051ff to i32*
  store i32 %v0_100051ff, i32* %v3_100051ff, align 4
  %v0_10005200 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005200 = add i32 %v0_10005200, 20
  %v2_10005200 = inttoptr i32 %v1_10005200 to i32*
  %v3_10005200 = load i32, i32* %v2_10005200, align 4
  store i32 %v3_10005200, i32* %eax.global-to-local, align 4
  %v0_10005205 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000520b

dec_label_pc_1000520b:                            ; preds = %dec_label_pc_100051f1, %dec_label_pc_100051f5, %dec_label_pc_100051e3
  %v1_10005216 = phi i32 [ %v1_100051f1, %dec_label_pc_100051e3 ], [ %v1_100051f1, %dec_label_pc_100051f1 ], [ %v0_10005205, %dec_label_pc_100051f5 ]
  %stack_var_-64.2 = phi i32 [ %v0_100051ff, %dec_label_pc_100051e3 ], [ %v0_100051ff, %dec_label_pc_100051f1 ], [ %v0_10005205, %dec_label_pc_100051f5 ]
  store i32 %v0_10005224, i32* %eax.global-to-local, align 4
  %v5_10005214 = icmp slt i32 %tmp319, %v1_10005216
  br i1 %v5_10005214, label %dec_label_pc_10005232, label %dec_label_pc_10005216

dec_label_pc_10005216:                            ; preds = %dec_label_pc_1000520b
  %v12_10005216 = icmp eq i32 %v0_10005224, %v1_10005216
  br i1 %v12_10005216, label %dec_label_pc_10005232, label %dec_label_pc_1000521a

dec_label_pc_1000521a:                            ; preds = %dec_label_pc_10005216
  %v0_1000521a = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000521a, i32* @ecx, align 4
  %v1_10005220 = inttoptr i32 %v0_1000521a to i32*
  %v2_10005220 = load i32, i32* %v1_10005220, align 4
  store i32 %v2_10005220, i32* @ecx, align 4
  %v1_10005222 = inttoptr i32 %v2_10005220 to i32*
  %v2_10005222 = load i32, i32* %v1_10005222, align 4
  store i32 %v2_10005222, i32* %edx.global-to-local, align 4
  %v1_10005224 = load i32, i32* @esp, align 4
  %v2_10005224 = add i32 %v1_10005224, -4
  %v3_10005224 = inttoptr i32 %v2_10005224 to i32*
  store i32 %v0_10005224, i32* %v3_10005224, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_10005235.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10005232

dec_label_pc_10005232:                            ; preds = %dec_label_pc_10005216, %dec_label_pc_1000521a, %dec_label_pc_1000520b
  %v1_1000523a = phi i32 [ %v1_10005216, %dec_label_pc_1000520b ], [ %v1_10005216, %dec_label_pc_10005216 ], [ %v4_10005235.pre, %dec_label_pc_1000521a ]
  %v0_10005248 = phi i32 [ %v0_10005224, %dec_label_pc_1000520b ], [ %v0_10005224, %dec_label_pc_10005216 ], [ 0, %dec_label_pc_1000521a ]
  %v5_10005238 = icmp slt i32 %tmp319, %v1_1000523a
  br i1 %v5_10005238, label %dec_label_pc_10005254, label %dec_label_pc_1000523a

dec_label_pc_1000523a:                            ; preds = %dec_label_pc_10005232
  %v12_1000523a = icmp eq i32 %v0_10005248, %v1_1000523a
  br i1 %v12_1000523a, label %dec_label_pc_10005254, label %dec_label_pc_1000523e

dec_label_pc_1000523e:                            ; preds = %dec_label_pc_1000523a
  %v0_1000523e = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000523e, i32* @ecx, align 4
  %v1_10005244 = inttoptr i32 %v0_1000523e to i32*
  %v2_10005244 = load i32, i32* %v1_10005244, align 4
  store i32 %v2_10005244, i32* @ecx, align 4
  %v1_10005246 = inttoptr i32 %v2_10005244 to i32*
  %v2_10005246 = load i32, i32* %v1_10005246, align 4
  store i32 %v2_10005246, i32* %edx.global-to-local, align 4
  %v1_10005248 = load i32, i32* @esp, align 4
  %v2_10005248 = add i32 %v1_10005248, -4
  %v3_10005248 = inttoptr i32 %v2_10005248 to i32*
  store i32 %v0_10005248, i32* %v3_10005248, align 4
  %v0_10005249 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005249 = add i32 %v0_10005249, 20
  %v2_10005249 = inttoptr i32 %v1_10005249 to i32*
  %v3_10005249 = load i32, i32* %v2_10005249, align 4
  store i32 %v3_10005249, i32* %eax.global-to-local, align 4
  %v0_1000524e = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10005254

dec_label_pc_10005254:                            ; preds = %dec_label_pc_1000523a, %dec_label_pc_1000523e, %dec_label_pc_10005232
  %v1_1000525f = phi i32 [ %v1_1000523a, %dec_label_pc_10005232 ], [ %v1_1000523a, %dec_label_pc_1000523a ], [ %v0_1000524e, %dec_label_pc_1000523e ]
  %stack_var_-88.2 = phi i32 [ %v0_10005248, %dec_label_pc_10005232 ], [ %v0_10005248, %dec_label_pc_1000523a ], [ %v0_1000524e, %dec_label_pc_1000523e ]
  store i32 %v0_1000526d, i32* %eax.global-to-local, align 4
  %v5_1000525d = icmp slt i32 %tmp314, %v1_1000525f
  br i1 %v5_1000525d, label %dec_label_pc_1000527b, label %dec_label_pc_1000525f

dec_label_pc_1000525f:                            ; preds = %dec_label_pc_10005254
  %v12_1000525f = icmp eq i32 %v0_1000526d, %v1_1000525f
  br i1 %v12_1000525f, label %dec_label_pc_1000527b, label %dec_label_pc_10005263

dec_label_pc_10005263:                            ; preds = %dec_label_pc_1000525f
  %v0_10005263 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005263, i32* @ecx, align 4
  %v1_10005269 = inttoptr i32 %v0_10005263 to i32*
  %v2_10005269 = load i32, i32* %v1_10005269, align 4
  store i32 %v2_10005269, i32* @ecx, align 4
  %v1_1000526b = inttoptr i32 %v2_10005269 to i32*
  %v2_1000526b = load i32, i32* %v1_1000526b, align 4
  store i32 %v2_1000526b, i32* %edx.global-to-local, align 4
  %v1_1000526d = load i32, i32* @esp, align 4
  %v2_1000526d = add i32 %v1_1000526d, -4
  %v3_1000526d = inttoptr i32 %v2_1000526d to i32*
  store i32 %v0_1000526d, i32* %v3_1000526d, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_1000527e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000527b

dec_label_pc_1000527b:                            ; preds = %dec_label_pc_1000525f, %dec_label_pc_10005263, %dec_label_pc_10005254
  %v1_10005283 = phi i32 [ %v1_1000525f, %dec_label_pc_10005254 ], [ %v1_1000525f, %dec_label_pc_1000525f ], [ %v4_1000527e.pre, %dec_label_pc_10005263 ]
  %v0_10005291 = phi i32 [ %v0_1000526d, %dec_label_pc_10005254 ], [ %v0_1000526d, %dec_label_pc_1000525f ], [ 0, %dec_label_pc_10005263 ]
  %v5_10005281 = icmp slt i32 %tmp314, %v1_10005283
  br i1 %v5_10005281, label %dec_label_pc_1000529d, label %dec_label_pc_10005283

dec_label_pc_10005283:                            ; preds = %dec_label_pc_1000527b
  %v12_10005283 = icmp eq i32 %v0_10005291, %v1_10005283
  br i1 %v12_10005283, label %dec_label_pc_1000529d, label %dec_label_pc_10005287

dec_label_pc_10005287:                            ; preds = %dec_label_pc_10005283
  %v0_10005287 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005287, i32* @ecx, align 4
  %v1_1000528d = inttoptr i32 %v0_10005287 to i32*
  %v2_1000528d = load i32, i32* %v1_1000528d, align 4
  store i32 %v2_1000528d, i32* @ecx, align 4
  %v1_1000528f = inttoptr i32 %v2_1000528d to i32*
  %v2_1000528f = load i32, i32* %v1_1000528f, align 4
  store i32 %v2_1000528f, i32* %edx.global-to-local, align 4
  %v1_10005291 = load i32, i32* @esp, align 4
  %v2_10005291 = add i32 %v1_10005291, -4
  %v3_10005291 = inttoptr i32 %v2_10005291 to i32*
  store i32 %v0_10005291, i32* %v3_10005291, align 4
  %v0_10005292 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005292 = add i32 %v0_10005292, 20
  %v2_10005292 = inttoptr i32 %v1_10005292 to i32*
  %v3_10005292 = load i32, i32* %v2_10005292, align 4
  store i32 %v3_10005292, i32* %eax.global-to-local, align 4
  %v0_10005297 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000529d

dec_label_pc_1000529d:                            ; preds = %dec_label_pc_10005283, %dec_label_pc_10005287, %dec_label_pc_1000527b
  %v1_100052a8 = phi i32 [ %v1_10005283, %dec_label_pc_1000527b ], [ %v1_10005283, %dec_label_pc_10005283 ], [ %v0_10005297, %dec_label_pc_10005287 ]
  %stack_var_-108.2 = phi i32 [ %v0_10005291, %dec_label_pc_1000527b ], [ %v0_10005291, %dec_label_pc_10005283 ], [ %v0_10005297, %dec_label_pc_10005287 ]
  store i32 %v0_100052b6, i32* %eax.global-to-local, align 4
  %v5_100052a6 = icmp slt i32 %tmp309, %v1_100052a8
  br i1 %v5_100052a6, label %dec_label_pc_100052c4, label %dec_label_pc_100052a8

dec_label_pc_100052a8:                            ; preds = %dec_label_pc_1000529d
  %v12_100052a8 = icmp eq i32 %v0_100052b6, %v1_100052a8
  br i1 %v12_100052a8, label %dec_label_pc_100052c4, label %dec_label_pc_100052ac

dec_label_pc_100052ac:                            ; preds = %dec_label_pc_100052a8
  %v0_100052ac = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100052ac, i32* @ecx, align 4
  %v1_100052b2 = inttoptr i32 %v0_100052ac to i32*
  %v2_100052b2 = load i32, i32* %v1_100052b2, align 4
  store i32 %v2_100052b2, i32* @ecx, align 4
  %v1_100052b4 = inttoptr i32 %v2_100052b2 to i32*
  %v2_100052b4 = load i32, i32* %v1_100052b4, align 4
  store i32 %v2_100052b4, i32* %edx.global-to-local, align 4
  %v1_100052b6 = load i32, i32* @esp, align 4
  %v2_100052b6 = add i32 %v1_100052b6, -4
  %v3_100052b6 = inttoptr i32 %v2_100052b6 to i32*
  store i32 %v0_100052b6, i32* %v3_100052b6, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_100052c7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100052c4

dec_label_pc_100052c4:                            ; preds = %dec_label_pc_100052a8, %dec_label_pc_100052ac, %dec_label_pc_1000529d
  %v1_100052cc = phi i32 [ %v1_100052a8, %dec_label_pc_1000529d ], [ %v1_100052a8, %dec_label_pc_100052a8 ], [ %v4_100052c7.pre, %dec_label_pc_100052ac ]
  %v0_100052da = phi i32 [ %v0_100052b6, %dec_label_pc_1000529d ], [ %v0_100052b6, %dec_label_pc_100052a8 ], [ 0, %dec_label_pc_100052ac ]
  %v5_100052ca = icmp slt i32 %tmp309, %v1_100052cc
  br i1 %v5_100052ca, label %dec_label_pc_100052e6, label %dec_label_pc_100052cc

dec_label_pc_100052cc:                            ; preds = %dec_label_pc_100052c4
  %v12_100052cc = icmp eq i32 %v0_100052da, %v1_100052cc
  br i1 %v12_100052cc, label %dec_label_pc_100052e6, label %dec_label_pc_100052d0

dec_label_pc_100052d0:                            ; preds = %dec_label_pc_100052cc
  %v0_100052d0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100052d0, i32* @ecx, align 4
  %v1_100052d6 = inttoptr i32 %v0_100052d0 to i32*
  %v2_100052d6 = load i32, i32* %v1_100052d6, align 4
  store i32 %v2_100052d6, i32* @ecx, align 4
  %v1_100052d8 = inttoptr i32 %v2_100052d6 to i32*
  %v2_100052d8 = load i32, i32* %v1_100052d8, align 4
  store i32 %v2_100052d8, i32* %edx.global-to-local, align 4
  %v1_100052da = load i32, i32* @esp, align 4
  %v2_100052da = add i32 %v1_100052da, -4
  %v3_100052da = inttoptr i32 %v2_100052da to i32*
  store i32 %v0_100052da, i32* %v3_100052da, align 4
  %v0_100052db = load i32, i32* %edx.global-to-local, align 4
  %v1_100052db = add i32 %v0_100052db, 20
  %v2_100052db = inttoptr i32 %v1_100052db to i32*
  %v3_100052db = load i32, i32* %v2_100052db, align 4
  store i32 %v3_100052db, i32* %eax.global-to-local, align 4
  %v0_100052e0 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100052e6

dec_label_pc_100052e6:                            ; preds = %dec_label_pc_100052cc, %dec_label_pc_100052d0, %dec_label_pc_100052c4
  %stack_var_-128.2 = phi i32 [ %v0_100052da, %dec_label_pc_100052c4 ], [ %v0_100052da, %dec_label_pc_100052cc ], [ %v0_100052e0, %dec_label_pc_100052d0 ]
  store i32 %v2_100052e6, i32* @ecx, align 4
  %v0_100052ec = call i32 @function_10004370()
  store i32 %v0_100052ec, i32* %eax.global-to-local, align 4
  store i32 %v2_100052e6, i32* @ecx, align 4
  %v0_100052f7 = call i32 @function_10003ce0()
  store i32 %v0_10005324, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v4_1000530e = load i32, i32* @ebx, align 4
  %v5_10005314 = icmp slt i32 %tmp303, %v4_1000530e
  br i1 %v5_10005314, label %dec_label_pc_10005338, label %dec_label_pc_10005316

dec_label_pc_10005316:                            ; preds = %dec_label_pc_100052e6
  %v12_10005316 = icmp eq i32 %v0_10005324, %v4_1000530e
  br i1 %v12_10005316, label %dec_label_pc_10005338, label %dec_label_pc_1000531a

dec_label_pc_1000531a:                            ; preds = %dec_label_pc_10005316
  %v0_1000531a = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000531a, i32* %edx.global-to-local, align 4
  %v1_10005320 = inttoptr i32 %v0_1000531a to i32*
  %v2_10005320 = load i32, i32* %v1_10005320, align 4
  store i32 %v2_10005320, i32* @ecx, align 4
  %v1_10005322 = inttoptr i32 %v2_10005320 to i32*
  %v2_10005322 = load i32, i32* %v1_10005322, align 4
  store i32 %v2_10005322, i32* %edx.global-to-local, align 4
  %v1_10005324 = load i32, i32* @esp, align 4
  %v2_10005324 = add i32 %v1_10005324, -4
  %v3_10005324 = inttoptr i32 %v2_10005324 to i32*
  store i32 %v0_10005324, i32* %v3_10005324, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_10005344.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10005338

dec_label_pc_10005338:                            ; preds = %dec_label_pc_10005316, %dec_label_pc_1000531a, %dec_label_pc_100052e6
  %v1_1000534c = phi i32 [ %v4_1000530e, %dec_label_pc_100052e6 ], [ %v4_1000530e, %dec_label_pc_10005316 ], [ %v4_10005344.pre, %dec_label_pc_1000531a ]
  %v0_1000535a = phi i32 [ %v0_10005324, %dec_label_pc_100052e6 ], [ %v0_10005324, %dec_label_pc_10005316 ], [ 0, %dec_label_pc_1000531a ]
  store i32 65535, i32* @ecx, align 4
  %v5_1000534a = icmp slt i32 %tmp303, %v1_1000534c
  br i1 %v5_1000534a, label %dec_label_pc_1000536c, label %dec_label_pc_1000534c

dec_label_pc_1000534c:                            ; preds = %dec_label_pc_10005338
  %v12_1000534c = icmp eq i32 %v0_1000535a, %v1_1000534c
  br i1 %v12_1000534c, label %dec_label_pc_1000536c, label %dec_label_pc_10005350

dec_label_pc_10005350:                            ; preds = %dec_label_pc_1000534c
  %v0_10005350 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005350, i32* %edx.global-to-local, align 4
  %v1_10005356 = inttoptr i32 %v0_10005350 to i32*
  %v2_10005356 = load i32, i32* %v1_10005356, align 4
  store i32 %v2_10005356, i32* @ecx, align 4
  %v1_10005358 = inttoptr i32 %v2_10005356 to i32*
  %v2_10005358 = load i32, i32* %v1_10005358, align 4
  store i32 %v2_10005358, i32* %edx.global-to-local, align 4
  %v1_1000535a = load i32, i32* @esp, align 4
  %v2_1000535a = add i32 %v1_1000535a, -4
  %v3_1000535a = inttoptr i32 %v2_1000535a to i32*
  store i32 %v0_1000535a, i32* %v3_1000535a, align 4
  %v0_1000535b = load i32, i32* %edx.global-to-local, align 4
  %v1_1000535b = add i32 %v0_1000535b, 20
  %v2_1000535b = inttoptr i32 %v1_1000535b to i32*
  %v3_1000535b = load i32, i32* %v2_1000535b, align 4
  store i32 %v3_1000535b, i32* %eax.global-to-local, align 4
  %v0_10005360 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000536c

dec_label_pc_1000536c:                            ; preds = %dec_label_pc_1000534c, %dec_label_pc_10005350, %dec_label_pc_10005338
  %v1_10005380 = phi i32 [ %v1_1000534c, %dec_label_pc_10005338 ], [ %v1_1000534c, %dec_label_pc_1000534c ], [ %v0_10005360, %dec_label_pc_10005350 ]
  %stack_var_-444.2 = phi i32 [ %v0_1000535a, %dec_label_pc_10005338 ], [ %v0_1000535a, %dec_label_pc_1000534c ], [ %v0_10005360, %dec_label_pc_10005350 ]
  store i32 %v0_1000538e, i32* %eax.global-to-local, align 4
  %v5_1000537e = icmp slt i32 %tmp298, %v1_10005380
  br i1 %v5_1000537e, label %dec_label_pc_100053a2, label %dec_label_pc_10005380

dec_label_pc_10005380:                            ; preds = %dec_label_pc_1000536c
  %v12_10005380 = icmp eq i32 %v0_1000538e, %v1_10005380
  br i1 %v12_10005380, label %dec_label_pc_100053a2, label %dec_label_pc_10005384

dec_label_pc_10005384:                            ; preds = %dec_label_pc_10005380
  %v0_10005384 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005384, i32* @ecx, align 4
  %v1_1000538a = inttoptr i32 %v0_10005384 to i32*
  %v2_1000538a = load i32, i32* %v1_1000538a, align 4
  store i32 %v2_1000538a, i32* @ecx, align 4
  %v1_1000538c = inttoptr i32 %v2_1000538a to i32*
  %v2_1000538c = load i32, i32* %v1_1000538c, align 4
  store i32 %v2_1000538c, i32* %edx.global-to-local, align 4
  %v1_1000538e = load i32, i32* @esp, align 4
  %v2_1000538e = add i32 %v1_1000538e, -4
  %v3_1000538e = inttoptr i32 %v2_1000538e to i32*
  store i32 %v0_1000538e, i32* %v3_1000538e, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_100053a8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100053a2

dec_label_pc_100053a2:                            ; preds = %dec_label_pc_10005380, %dec_label_pc_10005384, %dec_label_pc_1000536c
  %v1_100053b0 = phi i32 [ %v1_10005380, %dec_label_pc_1000536c ], [ %v1_10005380, %dec_label_pc_10005380 ], [ %v4_100053a8.pre, %dec_label_pc_10005384 ]
  %v0_100053be = phi i32 [ %v0_1000538e, %dec_label_pc_1000536c ], [ %v0_1000538e, %dec_label_pc_10005380 ], [ 0, %dec_label_pc_10005384 ]
  %v5_100053ae = icmp slt i32 %tmp298, %v1_100053b0
  br i1 %v5_100053ae, label %dec_label_pc_100053d0, label %dec_label_pc_100053b0

dec_label_pc_100053b0:                            ; preds = %dec_label_pc_100053a2
  %v12_100053b0 = icmp eq i32 %v0_100053be, %v1_100053b0
  br i1 %v12_100053b0, label %dec_label_pc_100053d0, label %dec_label_pc_100053b4

dec_label_pc_100053b4:                            ; preds = %dec_label_pc_100053b0
  %v0_100053b4 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100053b4, i32* @ecx, align 4
  %v1_100053ba = inttoptr i32 %v0_100053b4 to i32*
  %v2_100053ba = load i32, i32* %v1_100053ba, align 4
  store i32 %v2_100053ba, i32* @ecx, align 4
  %v1_100053bc = inttoptr i32 %v2_100053ba to i32*
  %v2_100053bc = load i32, i32* %v1_100053bc, align 4
  store i32 %v2_100053bc, i32* %edx.global-to-local, align 4
  %v1_100053be = load i32, i32* @esp, align 4
  %v2_100053be = add i32 %v1_100053be, -4
  %v3_100053be = inttoptr i32 %v2_100053be to i32*
  store i32 %v0_100053be, i32* %v3_100053be, align 4
  %v0_100053bf = load i32, i32* %edx.global-to-local, align 4
  %v1_100053bf = add i32 %v0_100053bf, 20
  %v2_100053bf = inttoptr i32 %v1_100053bf to i32*
  %v3_100053bf = load i32, i32* %v2_100053bf, align 4
  store i32 %v3_100053bf, i32* %eax.global-to-local, align 4
  %v0_100053c4 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100053d0

dec_label_pc_100053d0:                            ; preds = %dec_label_pc_100053b0, %dec_label_pc_100053b4, %dec_label_pc_100053a2
  %v1_100053e4 = phi i32 [ %v1_100053b0, %dec_label_pc_100053a2 ], [ %v1_100053b0, %dec_label_pc_100053b0 ], [ %v0_100053c4, %dec_label_pc_100053b4 ]
  %stack_var_-468.2 = phi i32 [ %v0_100053be, %dec_label_pc_100053a2 ], [ %v0_100053be, %dec_label_pc_100053b0 ], [ %v0_100053c4, %dec_label_pc_100053b4 ]
  store i32 %v0_100053f2, i32* %eax.global-to-local, align 4
  %v5_100053e2 = icmp slt i32 %tmp293, %v1_100053e4
  br i1 %v5_100053e2, label %dec_label_pc_10005406, label %dec_label_pc_100053e4

dec_label_pc_100053e4:                            ; preds = %dec_label_pc_100053d0
  %v12_100053e4 = icmp eq i32 %v0_100053f2, %v1_100053e4
  br i1 %v12_100053e4, label %dec_label_pc_10005406, label %dec_label_pc_100053e8

dec_label_pc_100053e8:                            ; preds = %dec_label_pc_100053e4
  %v0_100053e8 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100053e8, i32* @ecx, align 4
  %v1_100053ee = inttoptr i32 %v0_100053e8 to i32*
  %v2_100053ee = load i32, i32* %v1_100053ee, align 4
  store i32 %v2_100053ee, i32* @ecx, align 4
  %v1_100053f0 = inttoptr i32 %v2_100053ee to i32*
  %v2_100053f0 = load i32, i32* %v1_100053f0, align 4
  store i32 %v2_100053f0, i32* %edx.global-to-local, align 4
  %v1_100053f2 = load i32, i32* @esp, align 4
  %v2_100053f2 = add i32 %v1_100053f2, -4
  %v3_100053f2 = inttoptr i32 %v2_100053f2 to i32*
  store i32 %v0_100053f2, i32* %v3_100053f2, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_1000540c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10005406

dec_label_pc_10005406:                            ; preds = %dec_label_pc_100053e4, %dec_label_pc_100053e8, %dec_label_pc_100053d0
  %v1_10005414 = phi i32 [ %v1_100053e4, %dec_label_pc_100053d0 ], [ %v1_100053e4, %dec_label_pc_100053e4 ], [ %v4_1000540c.pre, %dec_label_pc_100053e8 ]
  %v0_10005422 = phi i32 [ %v0_100053f2, %dec_label_pc_100053d0 ], [ %v0_100053f2, %dec_label_pc_100053e4 ], [ 0, %dec_label_pc_100053e8 ]
  %v5_10005412 = icmp slt i32 %tmp293, %v1_10005414
  br i1 %v5_10005412, label %dec_label_pc_10005434, label %dec_label_pc_10005414

dec_label_pc_10005414:                            ; preds = %dec_label_pc_10005406
  %v12_10005414 = icmp eq i32 %v0_10005422, %v1_10005414
  br i1 %v12_10005414, label %dec_label_pc_10005434, label %dec_label_pc_10005418

dec_label_pc_10005418:                            ; preds = %dec_label_pc_10005414
  %v0_10005418 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005418, i32* @ecx, align 4
  %v1_1000541e = inttoptr i32 %v0_10005418 to i32*
  %v2_1000541e = load i32, i32* %v1_1000541e, align 4
  store i32 %v2_1000541e, i32* @ecx, align 4
  %v1_10005420 = inttoptr i32 %v2_1000541e to i32*
  %v2_10005420 = load i32, i32* %v1_10005420, align 4
  store i32 %v2_10005420, i32* %edx.global-to-local, align 4
  %v1_10005422 = load i32, i32* @esp, align 4
  %v2_10005422 = add i32 %v1_10005422, -4
  %v3_10005422 = inttoptr i32 %v2_10005422 to i32*
  store i32 %v0_10005422, i32* %v3_10005422, align 4
  %v0_10005423 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005423 = add i32 %v0_10005423, 20
  %v2_10005423 = inttoptr i32 %v1_10005423 to i32*
  %v3_10005423 = load i32, i32* %v2_10005423, align 4
  store i32 %v3_10005423, i32* %eax.global-to-local, align 4
  %v0_10005428 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10005434

dec_label_pc_10005434:                            ; preds = %dec_label_pc_10005414, %dec_label_pc_10005418, %dec_label_pc_10005406
  %v1_10005448 = phi i32 [ %v1_10005414, %dec_label_pc_10005406 ], [ %v1_10005414, %dec_label_pc_10005414 ], [ %v0_10005428, %dec_label_pc_10005418 ]
  %stack_var_-488.2 = phi i32 [ %v0_10005422, %dec_label_pc_10005406 ], [ %v0_10005422, %dec_label_pc_10005414 ], [ %v0_10005428, %dec_label_pc_10005418 ]
  store i32 %v0_10005456, i32* %eax.global-to-local, align 4
  %v5_10005446 = icmp slt i32 %tmp288, %v1_10005448
  br i1 %v5_10005446, label %dec_label_pc_1000546a, label %dec_label_pc_10005448

dec_label_pc_10005448:                            ; preds = %dec_label_pc_10005434
  %v12_10005448 = icmp eq i32 %v0_10005456, %v1_10005448
  br i1 %v12_10005448, label %dec_label_pc_1000546a, label %dec_label_pc_1000544c

dec_label_pc_1000544c:                            ; preds = %dec_label_pc_10005448
  %v0_1000544c = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000544c, i32* @ecx, align 4
  %v1_10005452 = inttoptr i32 %v0_1000544c to i32*
  %v2_10005452 = load i32, i32* %v1_10005452, align 4
  store i32 %v2_10005452, i32* @ecx, align 4
  %v1_10005454 = inttoptr i32 %v2_10005452 to i32*
  %v2_10005454 = load i32, i32* %v1_10005454, align 4
  store i32 %v2_10005454, i32* %edx.global-to-local, align 4
  %v1_10005456 = load i32, i32* @esp, align 4
  %v2_10005456 = add i32 %v1_10005456, -4
  %v3_10005456 = inttoptr i32 %v2_10005456 to i32*
  store i32 %v0_10005456, i32* %v3_10005456, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_10005470.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000546a

dec_label_pc_1000546a:                            ; preds = %dec_label_pc_10005448, %dec_label_pc_1000544c, %dec_label_pc_10005434
  %v1_10005478 = phi i32 [ %v1_10005448, %dec_label_pc_10005434 ], [ %v1_10005448, %dec_label_pc_10005448 ], [ %v4_10005470.pre, %dec_label_pc_1000544c ]
  %v0_10005486 = phi i32 [ %v0_10005456, %dec_label_pc_10005434 ], [ %v0_10005456, %dec_label_pc_10005448 ], [ 0, %dec_label_pc_1000544c ]
  %v5_10005476 = icmp slt i32 %tmp288, %v1_10005478
  br i1 %v5_10005476, label %dec_label_pc_1000548c, label %dec_label_pc_10005478

dec_label_pc_10005478:                            ; preds = %dec_label_pc_1000546a
  %v12_10005478 = icmp eq i32 %v0_10005486, %v1_10005478
  br i1 %v12_10005478, label %dec_label_pc_1000548c, label %dec_label_pc_1000547c

dec_label_pc_1000547c:                            ; preds = %dec_label_pc_10005478
  %v0_1000547c = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000547c, i32* @ecx, align 4
  %v1_10005482 = inttoptr i32 %v0_1000547c to i32*
  %v2_10005482 = load i32, i32* %v1_10005482, align 4
  store i32 %v2_10005482, i32* @ecx, align 4
  %v1_10005484 = inttoptr i32 %v2_10005482 to i32*
  %v2_10005484 = load i32, i32* %v1_10005484, align 4
  store i32 %v2_10005484, i32* %edx.global-to-local, align 4
  %v1_10005486 = load i32, i32* @esp, align 4
  %v2_10005486 = add i32 %v1_10005486, -4
  %v3_10005486 = inttoptr i32 %v2_10005486 to i32*
  store i32 %v0_10005486, i32* %v3_10005486, align 4
  %v0_10005487 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005487 = add i32 %v0_10005487, 20
  %v2_10005487 = inttoptr i32 %v1_10005487 to i32*
  %v3_10005487 = load i32, i32* %v2_10005487, align 4
  store i32 %v3_10005487, i32* %eax.global-to-local, align 4
  %v5_1000548c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000548c

dec_label_pc_1000548c:                            ; preds = %dec_label_pc_1000547c, %dec_label_pc_10005478, %dec_label_pc_1000546a
  %v5_1000548c = phi i32 [ %v5_1000548c.pre, %dec_label_pc_1000547c ], [ %v1_10005478, %dec_label_pc_10005478 ], [ %v1_10005478, %dec_label_pc_1000546a ]
  %tmp402 = ptrtoint i32* %stack_var_-5.1 to i32
  %v4_1000548c = trunc i32 %tmp402 to i8
  %v6_1000548c = trunc i32 %v5_1000548c to i8
  %v17_1000548c = icmp eq i8 %v4_1000548c, %v6_1000548c
  %v1_1000548f = icmp eq i1 %v17_1000548c, false
  br i1 %v1_1000548f, label %dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge, label %dec_label_pc_10005495

dec_label_pc_1000548c.dec_label_pc_10005080_crit_edge: ; preds = %dec_label_pc_1000548c
  %v1_10005080.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10005080

dec_label_pc_10005495:                            ; preds = %dec_label_pc_1000548c
  %v0_10005495 = call i32 @WSACleanup()
  store i32 %v0_10005495, i32* %eax.global-to-local, align 4
  %v1_1000549a = load i32, i32* @ebx, align 4
  %v12_1000549a = icmp eq i32 %v0_10005495, %v1_1000549a
  br i1 %v12_1000549a, label %dec_label_pc_100054ad, label %dec_label_pc_1000549e

dec_label_pc_1000549e:                            ; preds = %dec_label_pc_10005495
  %v1_1000549e = load i32, i32* @esp, align 4
  %v2_1000549e = add i32 %v1_1000549e, -4
  %v3_1000549e = inttoptr i32 %v2_1000549e to i32*
  store i32 %v0_10005495, i32* %v3_1000549e, align 4
  %v1_1000549f = add i32 %v1_1000549e, -8
  %v2_1000549f = inttoptr i32 %v1_1000549f to i32*
  store i32 ptrtoint ([48 x i8]* @global_var_10022d40.247 to i32), i32* %v2_1000549f, align 4
  %v0_100054a4 = call i32 @Msg()
  store i32 %v0_100054a4, i32* %eax.global-to-local, align 4
  %v1_100054b2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100054ad

dec_label_pc_100054ad:                            ; preds = %dec_label_pc_1000549e, %dec_label_pc_10005495
  %v1_100054b2 = phi i32 [ %v1_100054b2.pre, %dec_label_pc_1000549e ], [ %v1_1000549a, %dec_label_pc_10005495 ]
  %v0_100054ad = load i32, i32* @global_var_1002a194.134, align 4
  store i32 %v0_100054ad, i32* %eax.global-to-local, align 4
  %v12_100054b2 = icmp eq i32 %v0_100054ad, %v1_100054b2
  br i1 %v12_100054b2, label %dec_label_pc_100054d0, label %dec_label_pc_100054b6

dec_label_pc_100054b6:                            ; preds = %dec_label_pc_100054ad
  %v1_100054b6 = load i32, i32* @esp, align 4
  %v2_100054b6 = add i32 %v1_100054b6, -4
  %v3_100054b6 = inttoptr i32 %v2_100054b6 to i32*
  store i32 %v0_100054ad, i32* %v3_100054b6, align 4
  %v0_100054b7 = call i1 @ReleaseMutex(i32* nonnull @5)
  %v2_100054b7 = sext i1 %v0_100054b7 to i32
  store i32 %v2_100054b7, i32* %eax.global-to-local, align 4
  %v0_100054bd = load i32, i32* @global_var_1002a194.134, align 4
  store i32 %v0_100054bd, i32* @ecx, align 4
  %v1_100054c3 = load i32, i32* @esp, align 4
  %v2_100054c3 = add i32 %v1_100054c3, -4
  %v3_100054c3 = inttoptr i32 %v2_100054c3 to i32*
  store i32 %v0_100054bd, i32* %v3_100054c3, align 4
  %v0_100054c4 = call i1 @CloseHandle(i32* nonnull @5)
  %v2_100054c4 = sext i1 %v0_100054c4 to i32
  store i32 %v2_100054c4, i32* %eax.global-to-local, align 4
  %v0_100054ca = load i32, i32* @ebx, align 4
  store i32 %v0_100054ca, i32* @global_var_1002a194.134, align 4
  br label %dec_label_pc_100054d0

dec_label_pc_100054d0:                            ; preds = %dec_label_pc_100054b6, %dec_label_pc_100054ad
  %v2_100054d0 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_100054d0, i32* %edx.global-to-local, align 4
  %v1_100054d3 = load i32, i32* @esp, align 4
  %v2_100054d3 = add i32 %v1_100054d3, -4
  %v3_100054d3 = inttoptr i32 %v2_100054d3 to i32*
  store i32 %v2_100054d0, i32* %v3_100054d3, align 4
  %v1_100054d4 = add i32 %v1_100054d3, -8
  %v2_100054d4 = inttoptr i32 %v1_100054d4 to i32*
  store i32 983103, i32* %v2_100054d4, align 4
  %v0_100054d9 = load i32, i32* @ebx, align 4
  %v2_100054d9 = add i32 %v1_100054d3, -12
  %v3_100054d9 = inttoptr i32 %v2_100054d9 to i32*
  store i32 %v0_100054d9, i32* %v3_100054d9, align 4
  %v1_100054da = add i32 %v1_100054d3, -16
  %v2_100054da = inttoptr i32 %v1_100054da to i32*
  store i32 ptrtoint ([22 x i8]* @global_var_10022d28.248 to i32), i32* %v2_100054da, align 4
  %v1_100054df = add i32 %v1_100054d3, -20
  %v2_100054df = inttoptr i32 %v1_100054df to i32*
  store i32 -2147483647, i32* %v2_100054df, align 4
  %v4_100054e4 = call i32 @RegOpenKeyExA(i32* nonnull @5, i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32** bitcast (i32* @5 to i32**))
  store i32 %v4_100054e4, i32* %eax.global-to-local, align 4
  %v1_100054ea = icmp eq i32 %v4_100054e4, 0
  %v1_100054ec = icmp eq i1 %v1_100054ea, false
  br i1 %v1_100054ec, label %dec_label_pc_10005545, label %dec_label_pc_100054ee

dec_label_pc_100054ee:                            ; preds = %dec_label_pc_100054d0
  %v3_100054ee = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_100054ee, i32* %edx.global-to-local, align 4
  %v2_100054f1 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_100054f1, i32* %eax.global-to-local, align 4
  %v1_100054f4 = load i32, i32* @esp, align 4
  %v2_100054f4 = add i32 %v1_100054f4, -4
  %v3_100054f4 = inttoptr i32 %v2_100054f4 to i32*
  store i32 %v2_100054f1, i32* %v3_100054f4, align 4
  %v2_100054f5 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v2_100054f5, i32* @ecx, align 4
  %v2_100054fb = add i32 %v1_100054f4, -8
  %v3_100054fb = inttoptr i32 %v2_100054fb to i32*
  store i32 %v2_100054f5, i32* %v3_100054fb, align 4
  %v0_100054fc = load i32, i32* @ebx, align 4
  %v2_100054fc = add i32 %v1_100054f4, -12
  %v3_100054fc = inttoptr i32 %v2_100054fc to i32*
  store i32 %v0_100054fc, i32* %v3_100054fc, align 4
  %v0_100054fd = load i32, i32* @ebx, align 4
  %v2_100054fd = add i32 %v1_100054f4, -16
  %v3_100054fd = inttoptr i32 %v2_100054fd to i32*
  store i32 %v0_100054fd, i32* %v3_100054fd, align 4
  %v1_100054fe = add i32 %v1_100054f4, -20
  %v2_100054fe = inttoptr i32 %v1_100054fe to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_10022d18.249 to i32), i32* %v2_100054fe, align 4
  %v0_10005503 = load i32, i32* %edx.global-to-local, align 4
  %v2_10005503 = add i32 %v1_100054f4, -24
  %v3_10005503 = inttoptr i32 %v2_10005503 to i32*
  store i32 %v0_10005503, i32* %v3_10005503, align 4
  store i32 260, i32* %stack_var_-20, align 4
  %v4_1000550b = call i32 @RegQueryValueExA(i32* inttoptr (i32 260 to i32*), i8* bitcast (i32* @5 to i8*), i32* nonnull @5, i32* nonnull @5, i8* bitcast (i32* @5 to i8*), i32* nonnull @5)
  store i32 %v4_1000550b, i32* %eax.global-to-local, align 4
  %v1_10005511 = icmp eq i32 %v4_1000550b, 0
  %v1_10005513 = icmp eq i1 %v1_10005511, false
  br i1 %v1_10005513, label %dec_label_pc_1000553b, label %dec_label_pc_10005515

dec_label_pc_10005515:                            ; preds = %dec_label_pc_100054ee
  %v0_10005515 = load i32, i32* @esp, align 4
  %v1_10005515 = add i32 %v0_10005515, -4
  %v2_10005515 = inttoptr i32 %v1_10005515 to i32*
  store i32 5, i32* %v2_10005515, align 4
  %v0_10005517 = load i32, i32* @ebx, align 4
  %v2_10005517 = add i32 %v0_10005515, -8
  %v3_10005517 = inttoptr i32 %v2_10005517 to i32*
  store i32 %v0_10005517, i32* %v3_10005517, align 4
  %v0_10005518 = load i32, i32* @ebx, align 4
  %v2_10005518 = add i32 %v0_10005515, -12
  %v3_10005518 = inttoptr i32 %v2_10005518 to i32*
  store i32 %v0_10005518, i32* %v3_10005518, align 4
  store i32 %v2_100054f5, i32* %eax.global-to-local, align 4
  %v2_1000551f = add i32 %v0_10005515, -16
  %v3_1000551f = inttoptr i32 %v2_1000551f to i32*
  store i32 %v2_100054f5, i32* %v3_1000551f, align 4
  %v1_10005520 = add i32 %v0_10005515, -20
  %v2_10005520 = inttoptr i32 %v1_10005520 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_10022d10.250 to i32), i32* %v2_10005520, align 4
  %v0_10005525 = load i32, i32* @ebx, align 4
  %v2_10005525 = add i32 %v0_10005515, -24
  %v3_10005525 = inttoptr i32 %v2_10005525 to i32*
  store i32 %v0_10005525, i32* %v3_10005525, align 4
  %v5_10005526 = call i32* @ShellExecuteA(i32* nonnull @5, i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v7_10005526 = ptrtoint i32* %v5_10005526 to i32
  store i32 %v7_10005526, i32* %eax.global-to-local, align 4
  %v3_1000552c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1000552c, i32* @ecx, align 4
  %v0_1000552f = load i32, i32* @esp, align 4
  %v1_1000552f = add i32 %v0_1000552f, -4
  %v2_1000552f = inttoptr i32 %v1_1000552f to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_10022d18.249 to i32), i32* %v2_1000552f, align 4
  %v0_10005534 = load i32, i32* @ecx, align 4
  %v2_10005534 = add i32 %v0_1000552f, -8
  %v3_10005534 = inttoptr i32 %v2_10005534 to i32*
  store i32 %v0_10005534, i32* %v3_10005534, align 4
  %v1_10005535 = call i32 @RegDeleteValueA(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10005535, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000553b

dec_label_pc_1000553b:                            ; preds = %dec_label_pc_10005515, %dec_label_pc_100054ee
  %v3_1000553b = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1000553b, i32* %edx.global-to-local, align 4
  %v1_1000553e = load i32, i32* @esp, align 4
  %v2_1000553e = add i32 %v1_1000553e, -4
  %v3_1000553e = inttoptr i32 %v2_1000553e to i32*
  store i32 %v3_1000553b, i32* %v3_1000553e, align 4
  %v0_1000553f = call i32 @RegCloseKey(i32* nonnull @5)
  store i32 %v0_1000553f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005545

dec_label_pc_10005545:                            ; preds = %dec_label_pc_1000553b, %dec_label_pc_100054d0
  %v0_10005545 = load i32, i32* @esp, align 4
  %v3_10005545 = add i32 %v0_10005545, 4
  %v1_10005546 = inttoptr i32 %v3_10005545 to i32*
  %v2_10005546 = load i32, i32* %v1_10005546, align 4
  store i32 %v2_10005546, i32* %edi.global-to-local, align 4
  %v3_10005546 = add i32 %v0_10005545, 8
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_10005549 = inttoptr i32 %v3_10005546 to i32*
  %v2_10005549 = load i32, i32* %v1_10005549, align 4
  store i32 %v2_10005549, i32* %esi.global-to-local, align 4
  %v2_1000554c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000554c, i32* %ebp.global-to-local, align 4
  ret i32 0

dec_label_pc_1000554e:                            ; preds = %dec_label_pc_10005080
  %v10_1000554e = icmp eq i32 %v0_1000554e, 4
  %v1_10005551 = icmp eq i1 %v10_1000554e, false
  br i1 %v1_10005551, label %dec_label_pc_100050ce, label %dec_label_pc_100050e6
}

define i32 @function_10005560() local_unnamed_addr {
dec_label_pc_10005560:
  %v0_10005560 = call i32 @Plat_IsInDebugSession()
  %v4_10005566 = trunc i32 %v0_10005560 to i8
  %v5_10005566 = icmp eq i8 %v4_10005566, 0
  br i1 %v5_10005566, label %dec_label_pc_1000556b, label %dec_label_pc_1000556a

dec_label_pc_1000556a:                            ; preds = %dec_label_pc_10005560
  %v0_1000556a = call i32 @__asm_int3()
  br label %dec_label_pc_1000556b

dec_label_pc_1000556b:                            ; preds = %dec_label_pc_1000556a, %dec_label_pc_10005560
  %v0_1000556b = call i32 @function_1000943e()
  %v1_10005572 = call i32 @Plat_ExitProcess(i32 1)
  store i32 1, i32* @ecx, align 4
  ret i32 %v1_10005572
}

define i32 @__malloc_crt(i32 %arg1) local_unnamed_addr {
dec_label_pc_10005580:
  %v0_10005583 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_10005588 = inttoptr i32 %v0_10005583 to i32*
  %v2_10005588 = load i32, i32* %v1_10005588, align 4
  store i32 %v2_10005588, i32* @ecx, align 4
  %v1_1000558a = inttoptr i32 %v2_10005588 to i32*
  %v2_1000558a = load i32, i32* %v1_1000558a, align 4
  %v1_1000558f = add i32 %v2_1000558a, 4
  %v2_1000558f = inttoptr i32 %v1_1000558f to i32*
  %v3_1000558f = load i32, i32* %v2_1000558f, align 4
  store i32 %v3_1000558f, i32* @edx, align 4
  store i32 %arg1, i32* @ebp, align 4
  ret i32 %arg1
}

define i32 @__calloc_crt(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100055a0:
  %v0_100055a3 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_100055a8 = inttoptr i32 %v0_100055a3 to i32*
  %v2_100055a8 = load i32, i32* %v1_100055a8, align 4
  store i32 %v2_100055a8, i32* @ecx, align 4
  %v1_100055aa = inttoptr i32 %v2_100055a8 to i32*
  %v2_100055aa = load i32, i32* %v1_100055aa, align 4
  %v1_100055ac = add i32 %v2_100055aa, 4
  %v2_100055ac = inttoptr i32 %v1_100055ac to i32*
  %v3_100055ac = load i32, i32* %v2_100055ac, align 4
  %v7_100055b3 = mul i32 %arg2, %arg1
  %v1_100055c1 = inttoptr i32 %v3_100055ac to i32*
  %v4_100055c1 = call i32* @_memset(i32* %v1_100055c1, i32 0, i32 %v7_100055b3)
  ret i32 %v3_100055ac
}

define i32 @__realloc_crt(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100055d0:
  %v0_100055d3 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_100055d8 = inttoptr i32 %v0_100055d3 to i32*
  %v2_100055d8 = load i32, i32* %v1_100055d8, align 4
  store i32 %v2_100055d8, i32* @ecx, align 4
  ret i32 %arg1
}

define i32 @__recalloc_crt(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100055f0:
  %v0_100055f3 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_100055f8 = inttoptr i32 %v0_100055f3 to i32*
  %v2_100055f8 = load i32, i32* %v1_100055f8, align 4
  store i32 %v2_100055f8, i32* @ecx, align 4
  %v7_10005606 = mul i32 %arg3, %arg2
  %v1_10005615 = inttoptr i32 %arg1 to i32*
  %v4_10005615 = call i32* @_memset(i32* %v1_10005615, i32 0, i32 %v7_10005606)
  ret i32 %arg1
}

define i32 @__msize(i32 %arg1) local_unnamed_addr {
dec_label_pc_10005630:
  %v0_10005633 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_10005638 = inttoptr i32 %v0_10005633 to i32*
  %v2_10005638 = load i32, i32* %v1_10005638, align 4
  store i32 %v2_10005638, i32* @ecx, align 4
  ret i32 %arg1
}

define i32 @__heap_init() local_unnamed_addr {
dec_label_pc_10005650:
  %v0_10005650 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005650, i32* @ecx, align 4
  %v1_10005658 = inttoptr i32 %v0_10005650 to i32*
  %v2_10005658 = load i32, i32* %v1_10005658, align 4
  %v14_10005658 = icmp eq i32 %v2_10005658, 0
  %v1_1000565a = icmp eq i1 %v14_10005658, false
  %v2_1000565a = zext i1 %v1_1000565a to i32
  ret i32 %v2_1000565a
}

define i32 @"??3@YAXPAX@Z"(i32 %arg1) local_unnamed_addr {
dec_label_pc_10005660:
  %v0_10005663 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_10005668 = inttoptr i32 %v0_10005663 to i32*
  %v2_10005668 = load i32, i32* %v1_10005668, align 4
  store i32 %v2_10005668, i32* @ecx, align 4
  %v1_1000566a = inttoptr i32 %v2_10005668 to i32*
  %v2_1000566a = load i32, i32* %v1_1000566a, align 4
  %v1_1000566f = add i32 %v2_1000566a, 20
  %v2_1000566f = inttoptr i32 %v1_1000566f to i32*
  %v3_1000566f = load i32, i32* %v2_1000566f, align 4
  store i32 %v3_1000566f, i32* @edx, align 4
  store i32 %arg1, i32* @ebp, align 4
  ret i32 %arg1
}

define i32 @__wcsdup.7(i32 %arg1) local_unnamed_addr {
dec_label_pc_10005680:
  %v4_10005690.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10005690

dec_label_pc_10005690:                            ; preds = %dec_label_pc_10005690, %dec_label_pc_10005680
  %v4_10005690 = phi i32 [ %v6_10005690, %dec_label_pc_10005690 ], [ %v4_10005690.pre, %dec_label_pc_10005680 ]
  %v0_10005692 = phi i32 [ %v1_10005692, %dec_label_pc_10005690 ], [ %arg1, %dec_label_pc_10005680 ]
  %v1_10005690 = inttoptr i32 %v0_10005692 to i8*
  %v2_10005690 = load i8, i8* %v1_10005690, align 1
  %v3_10005690 = zext i8 %v2_10005690 to i32
  %v5_10005690 = and i32 %v4_10005690, -256
  %v6_10005690 = or i32 %v3_10005690, %v5_10005690
  store i32 %v6_10005690, i32* @ecx, align 4
  %v1_10005692 = add i32 %v0_10005692, 1
  %v5_10005693 = icmp eq i8 %v2_10005690, 0
  %v1_10005695 = icmp eq i1 %v5_10005693, false
  br i1 %v1_10005695, label %dec_label_pc_10005690, label %dec_label_pc_10005697

dec_label_pc_10005697:                            ; preds = %dec_label_pc_10005690
  %v0_1000569c = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_100056a1 = inttoptr i32 %v0_1000569c to i32*
  %v2_100056a1 = load i32, i32* %v1_100056a1, align 4
  store i32 %v2_100056a1, i32* @ecx, align 4
  %v1_100056a3 = inttoptr i32 %v2_100056a1 to i32*
  %v2_100056a3 = load i32, i32* %v1_100056a3, align 4
  %v1_100056a5 = add i32 %v2_100056a3, 4
  %v2_100056a5 = inttoptr i32 %v1_100056a5 to i32*
  %v3_100056a5 = load i32, i32* %v2_100056a5, align 4
  %v1_100056ad = icmp eq i32 %v3_100056a5, 0
  br i1 %v1_100056ad, label %dec_label_pc_100056bc, label %dec_label_pc_100056b1

dec_label_pc_100056b1:                            ; preds = %dec_label_pc_10005697
  %v0_100056b4 = call i32 @_memcpy.1()
  br label %dec_label_pc_100056bc

dec_label_pc_100056bc:                            ; preds = %dec_label_pc_100056b1, %dec_label_pc_10005697
  ret i32 %v3_100056a5
}

define i32 @function_100056d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100056d0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v0_100056d6 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100056d6, i32* %stack_var_-8, align 4
  %v0_100056d7 = call i32 @function_1000d070()
  store i32 %arg1, i32* @ecx, align 4
  %v0_100056e1 = call i32 @function_1000d070()
  %v1_100056e6 = icmp eq i32 %v0_100056e1, 0
  %v1_100056e8 = icmp eq i1 %v1_100056e6, false
  br i1 %v1_100056e8, label %dec_label_pc_100056ef, label %dec_label_pc_100056ea

dec_label_pc_100056ea:                            ; preds = %dec_label_pc_100056d0
  %v12_100056ea = and i32 %v0_100056e1, -256
  %v2_100056ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_100056ec, i32* %esi.global-to-local, align 4
  ret i32 %v12_100056ea

dec_label_pc_100056ef:                            ; preds = %dec_label_pc_100056d0
  %v2_100056ef = icmp eq i32 %v0_100056d7, 0
  %v1_100056f1 = icmp eq i1 %v2_100056ef, false
  br i1 %v1_100056f1, label %dec_label_pc_100056f8, label %dec_label_pc_100056f3

dec_label_pc_100056f3:                            ; preds = %dec_label_pc_100056ef
  %v1_100056f3 = and i32 %v0_100056e1, -256
  %v2_100056f3 = or i32 %v1_100056f3, 1
  %v2_100056f5 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_100056f5, i32* %esi.global-to-local, align 4
  ret i32 %v2_100056f3

dec_label_pc_100056f8:                            ; preds = %dec_label_pc_100056ef
  %v1_100056fa = inttoptr i32 %v0_100056e1 to i32*
  %tmp241 = inttoptr i32 %v0_100056d7 to i8*
  %v5_100056fa = call i32 @function_100094b0(i32* %v1_100056fa, i8* %tmp241)
  %v2_10005702 = icmp slt i32 %v5_100056fa, 0
  %v1_10005704 = zext i1 %v2_10005702 to i32
  %v3_10005704 = and i32 %v5_100056fa, -256
  %v4_10005704 = or i32 %v1_10005704, %v3_10005704
  %v2_10005707 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10005707, i32* %esi.global-to-local, align 4
  ret i32 %v4_10005704
}

define i32 @function_10005710() {
dec_label_pc_10005710:
  %v0_10005710 = load i32, i32* @ecx, align 4
  %v1_10005710 = add i32 %v0_10005710, 4
  %v2_10005710 = inttoptr i32 %v1_10005710 to i8*
  %v3_10005710 = load i8, i8* %v2_10005710, align 1
  %v10_10005710 = icmp eq i8 %v3_10005710, 0
  br i1 %v10_10005710, label %dec_label_pc_10005722, label %dec_label_pc_10005716

dec_label_pc_10005716:                            ; preds = %dec_label_pc_10005710
  %v1_10005716 = add i32 %v0_10005710, 5
  %v2_10005716 = inttoptr i32 %v1_10005716 to i8*
  %v3_10005716 = load i8, i8* %v2_10005716, align 1
  %v10_10005716 = icmp eq i8 %v3_10005716, 0
  br i1 %v10_10005716, label %dec_label_pc_10005722, label %dec_label_pc_1000571c

dec_label_pc_1000571c:                            ; preds = %dec_label_pc_10005716
  ret i32 1

dec_label_pc_10005722:                            ; preds = %dec_label_pc_10005716, %dec_label_pc_10005710
  ret i32 0
}

define i32 @function_10005730() {
dec_label_pc_10005730:
  %eax.global-to-local = alloca i32, align 4
  %v0_10005730 = load i32, i32* @ecx, align 4
  %v1_10005730 = add i32 %v0_10005730, 5
  %v2_10005730 = inttoptr i32 %v1_10005730 to i8*
  %v3_10005730 = load i8, i8* %v2_10005730, align 1
  %v10_10005730 = icmp eq i8 %v3_10005730, 0
  br i1 %v10_10005730, label %dec_label_pc_10005742, label %dec_label_pc_10005736

dec_label_pc_10005736:                            ; preds = %dec_label_pc_10005730
  %v1_10005736 = add i32 %v0_10005730, 180
  %v2_10005736 = inttoptr i32 %v1_10005736 to i32*
  %v3_10005736 = load i32, i32* %v2_10005736, align 4
  %v5_1000573d = icmp slt i32 %v3_10005736, 3
  br i1 %v5_1000573d, label %dec_label_pc_1000573f, label %dec_label_pc_10005742

dec_label_pc_1000573f:                            ; preds = %dec_label_pc_10005736
  %v0_1000573f = load i32, i32* %eax.global-to-local, align 4
  %v1_1000573f = and i32 %v0_1000573f, -256
  %v2_1000573f = or i32 %v1_1000573f, 1
  store i32 %v2_1000573f, i32* %eax.global-to-local, align 4
  ret i32 %v2_1000573f

dec_label_pc_10005742:                            ; preds = %dec_label_pc_10005736, %dec_label_pc_10005730
  %v11_10005742 = load i32, i32* %eax.global-to-local, align 4
  %v12_10005742 = and i32 %v11_10005742, -256
  store i32 %v12_10005742, i32* %eax.global-to-local, align 4
  ret i32 %v12_10005742
}

define i32 @function_10005750(i32 %arg1) local_unnamed_addr {
dec_label_pc_10005750:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10005754 = load i32, i32* @edi, align 4
  store i32 %v0_10005754, i32* %stack_var_-12, align 4
  %v4_10005754 = ptrtoint i32* %stack_var_-12 to i32
  %v0_10005755 = load i32, i32* @ecx, align 4
  store i32 %v0_10005755, i32* %edi.global-to-local, align 4
  %v1_10005757 = add i32 %v0_10005755, 8
  %v2_10005757 = inttoptr i32 %v1_10005757 to i32*
  %v3_10005757 = load i32, i32* %v2_10005757, align 4
  %v4_10005757 = sext i32 %v3_10005757 to i64
  %v3_1000575a = icmp slt i32 %v3_10005757, 0
  br i1 %v3_1000575a, label %dec_label_pc_100057d9, label %dec_label_pc_1000575e

dec_label_pc_1000575e:                            ; preds = %dec_label_pc_10005750
  %v2_1000575a = icmp eq i32 %v3_10005757, 0
  %v1_1000575e = add i32 %v0_10005755, 4
  %v2_1000575e = inttoptr i32 %v1_1000575e to i32*
  %v3_1000575e = load i32, i32* %v2_1000575e, align 4
  store i32 %v3_1000575e, i32* %eax.global-to-local, align 4
  %v2_10005764 = add i32 %v3_1000575e, %arg1
  %v12_10005764 = icmp eq i32 %v2_10005764, 0
  store i32 %v2_10005764, i32* @ecx, align 4
  br i1 %v2_1000575a, label %dec_label_pc_10005776, label %dec_label_pc_1000576a

dec_label_pc_1000576a:                            ; preds = %dec_label_pc_1000575e
  %v1_1000576a = add i32 %v2_10005764, -1
  %v1_1000576d = ashr i32 %v1_1000576a, 31
  %v3_1000576e = zext i32 %v1_1000576a to i64
  %v5_1000576e = zext i32 %v1_1000576d to i64
  %v6_1000576e = mul nuw i64 %v5_1000576e, 4294967296
  %v7_1000576e = or i64 %v6_1000576e, %v3_1000576e
  %v9_1000576e = sdiv i64 %v7_1000576e, %v4_10005757
  %v10_1000576e = trunc i64 %v9_1000576e to i32
  %v1_10005770 = add i32 %v10_1000576e, 1
  %v5_10005771 = mul i32 %v1_10005770, %v3_10005757
  br label %dec_label_pc_10005789

dec_label_pc_10005776:                            ; preds = %dec_label_pc_1000575e
  %v1_10005776 = icmp eq i32 %v3_1000575e, 0
  %v1_10005778 = icmp eq i1 %v1_10005776, false
  br i1 %v1_10005778, label %dec_label_pc_1000577f, label %dec_label_pc_1000577a

dec_label_pc_1000577a:                            ; preds = %dec_label_pc_10005776
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000577f

dec_label_pc_1000577f:                            ; preds = %dec_label_pc_1000577a, %dec_label_pc_10005776
  %eax.promoted2 = phi i32 [ 2, %dec_label_pc_1000577a ], [ %v3_1000575e, %dec_label_pc_10005776 ]
  %v5_10005781 = icmp slt i32 %eax.promoted2, %v2_10005764
  br i1 %v5_10005781, label %dec_label_pc_10005783, label %dec_label_pc_100057ab

dec_label_pc_10005783:                            ; preds = %dec_label_pc_1000577f, %dec_label_pc_10005783
  %v2_100057833 = phi i32 [ %v2_10005783, %dec_label_pc_10005783 ], [ %eax.promoted2, %dec_label_pc_1000577f ]
  %v2_10005783 = mul i32 %v2_100057833, 2
  %v5_10005787 = icmp slt i32 %v2_10005783, %v2_10005764
  br i1 %v5_10005787, label %dec_label_pc_10005783, label %dec_label_pc_10005789.loopexit

dec_label_pc_10005789.loopexit:                   ; preds = %dec_label_pc_10005783
  br label %dec_label_pc_10005789

dec_label_pc_10005789:                            ; preds = %dec_label_pc_10005789.loopexit, %dec_label_pc_1000576a
  %eax.promoted = phi i32 [ %v2_10005783, %dec_label_pc_10005789.loopexit ], [ %v5_10005771, %dec_label_pc_1000576a ]
  %storemerge = phi i32 [ %v2_10005783, %dec_label_pc_10005789.loopexit ], [ %v5_10005771, %dec_label_pc_1000576a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v5_1000578b = icmp slt i32 %eax.promoted, %v2_10005764
  br i1 %v5_1000578b, label %dec_label_pc_1000578d, label %dec_label_pc_100057ab

dec_label_pc_1000578d:                            ; preds = %dec_label_pc_10005789
  %v1_1000578d = icmp eq i32 %eax.promoted, 0
  %v1_1000578f = icmp eq i1 %v1_1000578d, false
  br i1 %v1_1000578f, label %dec_label_pc_100057a0, label %dec_label_pc_10005791

dec_label_pc_10005791:                            ; preds = %dec_label_pc_1000578d
  %v8_10005794 = icmp sgt i32 %v2_10005764, -1
  br i1 %v8_10005794, label %dec_label_pc_100057a0, label %dec_label_pc_10005796

dec_label_pc_10005796:                            ; preds = %dec_label_pc_10005791
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100057ab

dec_label_pc_100057a0:                            ; preds = %dec_label_pc_10005791, %dec_label_pc_1000578d, %dec_label_pc_100057a0
  %v2_100057a51 = phi i32 [ %v2_100057a5, %dec_label_pc_100057a0 ], [ %eax.promoted, %dec_label_pc_1000578d ], [ %eax.promoted, %dec_label_pc_10005791 ]
  %v2_100057a0 = add i32 %v2_100057a51, %v2_10005764
  %v1_100057a2 = ashr i32 %v2_100057a0, 31
  %v2_100057a3 = sub i32 %v2_100057a0, %v1_100057a2
  %v2_100057a5 = sdiv i32 %v2_100057a3, 2
  %v5_100057a9 = icmp slt i32 %v2_100057a5, %v2_10005764
  br i1 %v5_100057a9, label %dec_label_pc_100057a0, label %dec_label_pc_100057ab.loopexit

dec_label_pc_100057ab.loopexit:                   ; preds = %dec_label_pc_100057a0
  store i32 %v2_100057a5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100057ab

dec_label_pc_100057ab:                            ; preds = %dec_label_pc_100057ab.loopexit, %dec_label_pc_1000577f, %dec_label_pc_10005789, %dec_label_pc_10005796
  %v0_100057ad = phi i32 [ %v2_100057a5, %dec_label_pc_100057ab.loopexit ], [ %eax.promoted2, %dec_label_pc_1000577f ], [ %eax.promoted, %dec_label_pc_10005789 ], [ -1, %dec_label_pc_10005796 ]
  store i32 %v0_100057ad, i32* %v2_1000575e, align 4
  %v0_100057b0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100057b0, i32* @ecx, align 4
  %v1_100057b6 = inttoptr i32 %v0_100057b0 to i32*
  %v2_100057b6 = load i32, i32* %v1_100057b6, align 4
  store i32 %v2_100057b6, i32* @ecx, align 4
  %v0_100057b8 = load i32, i32* %eax.global-to-local, align 4
  %v2_100057b8 = mul i32 %v0_100057b8, 16
  store i32 %v2_100057b8, i32* %eax.global-to-local, align 4
  store i32 %v2_100057b8, i32* %stack_var_-16, align 4
  br i1 %v12_10005764, label %dec_label_pc_100057d0, label %dec_label_pc_100057c0

dec_label_pc_100057c0:                            ; preds = %dec_label_pc_100057ab
  store i32 %v2_10005764, i32* %stack_var_-20, align 4
  %v1_100057c8 = load i32, i32* %edi.global-to-local, align 4
  %v2_100057c8 = inttoptr i32 %v1_100057c8 to i32*
  store i32 %v2_100057b8, i32* %v2_100057c8, align 4
  %v2_100057ca = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_100057ca, i32* @edi, align 4
  %v2_100057cb = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_100057cb, i32* @esi, align 4
  %v2_100057cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100057cc, i32* @ebp, align 4
  %v0_100057cd = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100057cd

dec_label_pc_100057d0:                            ; preds = %dec_label_pc_100057ab
  %v1_100057d0 = inttoptr i32 %v2_100057b6 to i32*
  %v2_100057d0 = load i32, i32* %v1_100057d0, align 4
  %v1_100057d2 = add i32 %v2_100057d0, 4
  %v2_100057d2 = inttoptr i32 %v1_100057d2 to i32*
  %v3_100057d2 = load i32, i32* %v2_100057d2, align 4
  store i32 %v3_100057d2, i32* @eax, align 4
  %v1_100057d7 = load i32, i32* %edi.global-to-local, align 4
  %v2_100057d7 = inttoptr i32 %v1_100057d7 to i32*
  store i32 %v3_100057d2, i32* %v2_100057d7, align 4
  %v0_100057d9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100057d9

dec_label_pc_100057d9:                            ; preds = %dec_label_pc_100057d0, %dec_label_pc_10005750
  %v0_100057d9 = phi i32 [ %v0_100057d9.pre, %dec_label_pc_100057d0 ], [ %v4_10005754, %dec_label_pc_10005750 ]
  %v1_100057d9 = inttoptr i32 %v0_100057d9 to i32*
  %v2_100057d9 = load i32, i32* %v1_100057d9, align 4
  store i32 %v2_100057d9, i32* @edi, align 4
  %v3_100057d9 = add i32 %v0_100057d9, 4
  %v1_100057da = inttoptr i32 %v3_100057d9 to i32*
  %v2_100057da = load i32, i32* %v1_100057da, align 4
  store i32 %v2_100057da, i32* @esi, align 4
  %v3_100057da = add i32 %v0_100057d9, 8
  %v1_100057db = inttoptr i32 %v3_100057da to i32*
  %v2_100057db = load i32, i32* %v1_100057db, align 4
  store i32 %v2_100057db, i32* @ebp, align 4
  %v0_100057dc = load i32, i32* @eax, align 4
  ret i32 %v0_100057dc
}

define i32 @function_100057e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100057e0:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_100057e2 = load i32, i32* @ecx, align 4
  store i32 %v0_100057e2, i32* %esi.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_100057e6 = add i32 %v0_100057e2, 28
  %v3_100057e6 = inttoptr i32 %v2_100057e6 to i32*
  store i32 0, i32* %v3_100057e6, align 4
  %v0_100057e9 = load i32, i32* %esi.global-to-local, align 4
  %v1_100057e9 = add i32 %v0_100057e9, 24
  %v2_100057e9 = inttoptr i32 %v1_100057e9 to i32*
  %v3_100057e9 = load i32, i32* %v2_100057e9, align 4
  %v4_100057e9 = load i32, i32* %edi.global-to-local, align 4
  %v5_100057ec = icmp slt i32 %v3_100057e9, %v4_100057e9
  br i1 %v5_100057ec, label %dec_label_pc_1000580b, label %dec_label_pc_100057ee

dec_label_pc_100057ee:                            ; preds = %dec_label_pc_100057e0
  %v1_100057ee = add i32 %v0_100057e9, 16
  %v2_100057ee = inttoptr i32 %v1_100057ee to i32*
  %v3_100057ee = load i32, i32* %v2_100057ee, align 4
  store i32 %v3_100057ee, i32* @eax, align 4
  %v12_100057f1 = icmp eq i32 %v3_100057ee, %v4_100057e9
  br i1 %v12_100057f1, label %dec_label_pc_10005808, label %dec_label_pc_100057f5

dec_label_pc_100057f5:                            ; preds = %dec_label_pc_100057ee
  %v0_100057f5 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100057f5, i32* @ecx, align 4
  %v1_100057fb = inttoptr i32 %v0_100057f5 to i32*
  %v2_100057fb = load i32, i32* %v1_100057fb, align 4
  store i32 %v2_100057fb, i32* @ecx, align 4
  %v1_100057fd = inttoptr i32 %v2_100057fb to i32*
  %v2_100057fd = load i32, i32* %v1_100057fd, align 4
  store i32 %v2_100057fd, i32* @edx, align 4
  %v1_10005800 = add i32 %v2_100057fd, 20
  %v2_10005800 = inttoptr i32 %v1_10005800 to i32*
  %v3_10005800 = load i32, i32* %v2_10005800, align 4
  store i32 %v3_10005800, i32* @eax, align 4
  store i32 %v4_100057e9, i32* %v2_100057ee, align 4
  %v0_10005808.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10005808.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10005808

dec_label_pc_10005808:                            ; preds = %dec_label_pc_100057f5, %dec_label_pc_100057ee
  %v1_10005808 = phi i32 [ %v1_10005808.pre, %dec_label_pc_100057f5 ], [ %v0_100057e9, %dec_label_pc_100057ee ]
  %v0_10005808 = phi i32 [ %v0_10005808.pre, %dec_label_pc_100057f5 ], [ %v4_100057e9, %dec_label_pc_100057ee ]
  %v2_10005808 = add i32 %v1_10005808, 20
  %v3_10005808 = inttoptr i32 %v2_10005808 to i32*
  store i32 %v0_10005808, i32* %v3_10005808, align 4
  %v0_1000580b.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000580b.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000580b

dec_label_pc_1000580b:                            ; preds = %dec_label_pc_10005808, %dec_label_pc_100057e0
  %v1_1000580b = phi i32 [ %v1_1000580b.pre, %dec_label_pc_10005808 ], [ %v0_100057e9, %dec_label_pc_100057e0 ]
  %v0_1000580b = phi i32 [ %v0_1000580b.pre, %dec_label_pc_10005808 ], [ %v4_100057e9, %dec_label_pc_100057e0 ]
  %v2_1000580b = add i32 %v1_1000580b, 12
  %v3_1000580b = inttoptr i32 %v2_1000580b to i32*
  store i32 %v0_1000580b, i32* %v3_1000580b, align 4
  %v0_1000580e = load i32, i32* %esi.global-to-local, align 4
  %v1_1000580e = add i32 %v0_1000580e, 8
  %v2_1000580e = inttoptr i32 %v1_1000580e to i32*
  %v3_1000580e = load i32, i32* %v2_1000580e, align 4
  %v4_1000580e = load i32, i32* %edi.global-to-local, align 4
  %v5_10005811 = icmp slt i32 %v3_1000580e, %v4_1000580e
  br i1 %v5_10005811, label %dec_label_pc_1000582e, label %dec_label_pc_10005813

dec_label_pc_10005813:                            ; preds = %dec_label_pc_1000580b
  %v2_10005813 = load i32, i32* @ecx, align 4
  store i32 %v2_10005813, i32* @eax, align 4
  %v12_10005815 = icmp eq i32 %v2_10005813, %v4_1000580e
  br i1 %v12_10005815, label %dec_label_pc_1000582b, label %dec_label_pc_10005819

dec_label_pc_10005819:                            ; preds = %dec_label_pc_10005813
  %v0_10005819 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005819, i32* @ecx, align 4
  %v1_1000581f = inttoptr i32 %v0_10005819 to i32*
  %v2_1000581f = load i32, i32* %v1_1000581f, align 4
  store i32 %v2_1000581f, i32* @ecx, align 4
  %v1_10005821 = inttoptr i32 %v2_1000581f to i32*
  %v2_10005821 = load i32, i32* %v1_10005821, align 4
  store i32 %v2_10005821, i32* @edx, align 4
  %v1_10005823 = load i32, i32* @esp, align 4
  %v2_10005823 = add i32 %v1_10005823, -4
  %v3_10005823 = inttoptr i32 %v2_10005823 to i32*
  store i32 %v2_10005813, i32* %v3_10005823, align 4
  %v0_10005824 = load i32, i32* @edx, align 4
  %v1_10005824 = add i32 %v0_10005824, 20
  %v2_10005824 = inttoptr i32 %v1_10005824 to i32*
  %v3_10005824 = load i32, i32* %v2_10005824, align 4
  store i32 %v3_10005824, i32* @eax, align 4
  %v0_10005829 = load i32, i32* %edi.global-to-local, align 4
  %v1_10005829 = load i32, i32* %esi.global-to-local, align 4
  %v2_10005829 = inttoptr i32 %v1_10005829 to i32*
  store i32 %v0_10005829, i32* %v2_10005829, align 4
  %v0_1000582b.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000582b.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000582b

dec_label_pc_1000582b:                            ; preds = %dec_label_pc_10005819, %dec_label_pc_10005813
  %v1_1000582b = phi i32 [ %v1_1000582b.pre, %dec_label_pc_10005819 ], [ %v0_1000580e, %dec_label_pc_10005813 ]
  %v0_1000582b = phi i32 [ %v0_1000582b.pre, %dec_label_pc_10005819 ], [ %v4_1000580e, %dec_label_pc_10005813 ]
  %v2_1000582b = add i32 %v1_1000582b, 4
  %v3_1000582b = inttoptr i32 %v2_1000582b to i32*
  store i32 %v0_1000582b, i32* %v3_1000582b, align 4
  br label %dec_label_pc_1000582e

dec_label_pc_1000582e:                            ; preds = %dec_label_pc_1000582b, %dec_label_pc_1000580b
  %v0_1000582e = load i32, i32* @esp, align 4
  %v1_1000582e = inttoptr i32 %v0_1000582e to i32*
  %v2_1000582e = load i32, i32* %v1_1000582e, align 4
  store i32 %v2_1000582e, i32* @edi, align 4
  %v3_1000582e = add i32 %v0_1000582e, 4
  %v1_1000582f = inttoptr i32 %v3_1000582e to i32*
  %v2_1000582f = load i32, i32* %v1_1000582f, align 4
  store i32 %v2_1000582f, i32* @esi, align 4
  %v0_10005830 = load i32, i32* @eax, align 4
  ret i32 %v0_10005830
}

define i32 @function_10005840(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10005840:
  %v0_10005841 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10005841 = sext i8 %v0_10005841 to i32
  %v0_10005849 = load i32, i32* @ecx, align 4
  %v1_1000584b = add i32 %v0_10005849, 16
  %v2_1000584b = inttoptr i32 %v1_1000584b to i32*
  %v3_1000584b = load i32, i32* %v2_1000584b, align 4
  store i32 1, i32* @ecx, align 4
  %v2_100058bc = add i32 %v0_10005849, 4
  %v3_100058bc = inttoptr i32 %v2_100058bc to i32*
  br label %dec_label_pc_10005856

dec_label_pc_10005856:                            ; preds = %dec_label_pc_10005856.backedge, %dec_label_pc_10005840
  %v0_100058cf = phi i32 [ %storemerge3, %dec_label_pc_10005856.backedge ], [ %v3_1000584b, %dec_label_pc_10005840 ]
  %v0_1000585a = phi i32 [ %v2_100058567, %dec_label_pc_10005856.backedge ], [ %v1_10005841, %dec_label_pc_10005840 ]
  %v4_10005856 = and i32 %v0_1000585a, 1
  %v5_10005856 = icmp eq i32 %v4_10005856, 0
  %v1_10005858 = icmp eq i1 %v5_10005856, false
  br i1 %v1_10005858, label %dec_label_pc_1000587a, label %dec_label_pc_1000585a

dec_label_pc_1000585a:                            ; preds = %dec_label_pc_10005856
  %v2_1000585a = or i32 %v0_1000585a, 1
  %v5_1000585a = trunc i32 %v2_1000585a to i8
  store i8 %v5_1000585a, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000587a

dec_label_pc_1000587a:                            ; preds = %dec_label_pc_1000585a, %dec_label_pc_10005856
  %v0_10005895 = phi i32 [ %v2_1000585a, %dec_label_pc_1000585a ], [ %v0_1000585a, %dec_label_pc_10005856 ]
  %v12_1000587a = icmp eq i32 %v0_100058cf, -1
  br i1 %v12_1000587a, label %dec_label_pc_1000588d, label %dec_label_pc_1000587e

dec_label_pc_1000587e:                            ; preds = %dec_label_pc_1000587a
  %v2_10005880 = mul i32 %v0_100058cf, 32
  %v4_10005883 = load i32, i32* %v3_100058bc, align 4
  %v5_10005883 = add i32 %v4_10005883, %v2_10005880
  br label %dec_label_pc_1000588d

dec_label_pc_1000588d:                            ; preds = %dec_label_pc_1000587a, %dec_label_pc_1000587e
  %storemerge = phi i32 [ %v5_10005883, %dec_label_pc_1000587e ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000587a ]
  %v1_1000588d = inttoptr i32 %storemerge to i32*
  %v2_1000588d = load i32, i32* %v1_1000588d, align 4
  %v14_1000588d = icmp eq i32 %v2_1000588d, -1
  br i1 %v14_1000588d, label %dec_label_pc_100058cc, label %dec_label_pc_10005891

dec_label_pc_10005891:                            ; preds = %dec_label_pc_1000588d
  %v4_10005891 = and i32 %v0_10005895, 1
  %v5_10005891 = icmp eq i32 %v4_10005891, 0
  %v1_10005893 = icmp eq i1 %v5_10005891, false
  br i1 %v1_10005893, label %dec_label_pc_100058b5, label %dec_label_pc_10005895

dec_label_pc_10005895:                            ; preds = %dec_label_pc_10005891
  %v2_10005895 = or i32 %v0_10005895, 1
  %v5_10005895 = trunc i32 %v2_10005895 to i8
  store i8 %v5_10005895, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100058b5

dec_label_pc_100058b5:                            ; preds = %dec_label_pc_10005895, %dec_label_pc_10005891
  %v2_100058567 = phi i32 [ %v2_10005895, %dec_label_pc_10005895 ], [ %v0_10005895, %dec_label_pc_10005891 ]
  br i1 %v12_1000587a, label %dec_label_pc_100058c3, label %dec_label_pc_100058b9

dec_label_pc_100058b9:                            ; preds = %dec_label_pc_100058b5
  %v2_100058b9 = mul i32 %v0_100058cf, 32
  %v4_100058bc = load i32, i32* %v3_100058bc, align 4
  %v5_100058bc = add i32 %v4_100058bc, %v2_100058b9
  %v1_100058bf = inttoptr i32 %v5_100058bc to i32*
  br label %dec_label_pc_10005856.backedge

dec_label_pc_10005856.backedge:                   ; preds = %dec_label_pc_100058b9, %dec_label_pc_100058c3
  %storemerge3.in = phi i32* [ %v1_100058bf, %dec_label_pc_100058b9 ], [ @global_var_1002b61c.159, %dec_label_pc_100058c3 ]
  %storemerge3 = load i32, i32* %storemerge3.in, align 4
  br label %dec_label_pc_10005856

dec_label_pc_100058c3:                            ; preds = %dec_label_pc_100058b5
  br label %dec_label_pc_10005856.backedge

dec_label_pc_100058cc:                            ; preds = %dec_label_pc_1000588d
  ret i32 %v0_100058cf
}

define i32 @function_100058d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100058d0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_100058d3 = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_100058d3 = sext i8 %v0_100058d3 to i32
  %v0_100058db = load i32, i32* @edi, align 4
  store i32 %v0_100058db, i32* %stack_var_-16, align 4
  %v4_100058db = ptrtoint i32* %stack_var_-16 to i32
  store i32 -1, i32* @edi, align 4
  %v0_100058df = load i32, i32* @ecx, align 4
  store i32 %v0_100058df, i32* %ebx.global-to-local, align 4
  %v2_100058e4 = and i32 %v1_100058d3, 1
  %v3_100058e4 = icmp eq i32 %v2_100058e4, 0
  %v1_100058e7 = icmp eq i1 %v3_100058e4, false
  br i1 %v1_100058e7, label %dec_label_pc_10005909, label %dec_label_pc_100058e9

dec_label_pc_100058e9:                            ; preds = %dec_label_pc_100058d0
  %v2_100058e9 = or i32 %v1_100058d3, 1
  %v5_100058e9 = trunc i32 %v2_100058e9 to i8
  store i8 %v5_100058e9, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10005909

dec_label_pc_10005909:                            ; preds = %dec_label_pc_100058e9, %dec_label_pc_100058d0
  %v0_100059e2 = phi i32 [ %v2_100058e9, %dec_label_pc_100058e9 ], [ %v1_100058d3, %dec_label_pc_100058d0 ]
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v12_1000590c = icmp eq i32 %arg1, -1
  br i1 %v12_1000590c, label %dec_label_pc_1000591f, label %dec_label_pc_10005910

dec_label_pc_10005910:                            ; preds = %dec_label_pc_10005909
  %v2_10005912 = mul i32 %arg1, 32
  store i32 %v2_10005912, i32* @ecx, align 4
  %v2_10005915 = add i32 %v0_100058df, 4
  %v3_10005915 = inttoptr i32 %v2_10005915 to i32*
  %v4_10005915 = load i32, i32* %v3_10005915, align 4
  %v5_10005915 = add i32 %v4_10005915, %v2_10005912
  br label %dec_label_pc_1000591f

dec_label_pc_1000591f:                            ; preds = %dec_label_pc_10005909, %dec_label_pc_10005910
  %storemerge5 = phi i32 [ %v5_10005915, %dec_label_pc_10005910 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10005909 ]
  store i32 %storemerge5, i32* @ecx, align 4
  %v1_1000591f = add i32 %storemerge5, 4
  %v2_1000591f = inttoptr i32 %v1_1000591f to i32*
  %v3_1000591f = load i32, i32* %v2_1000591f, align 4
  %v15_1000591f = icmp eq i32 %v3_1000591f, -1
  %v2_100059dd = and i32 %v0_100059e2, 1
  %v3_100059dd = icmp eq i32 %v2_100059dd, 0
  %v1_100059e0 = icmp eq i1 %v3_100059dd, false
  br i1 %v15_1000591f, label %dec_label_pc_100059dd, label %dec_label_pc_10005928

dec_label_pc_10005928:                            ; preds = %dec_label_pc_1000591f
  br i1 %v1_100059e0, label %dec_label_pc_1000594d, label %dec_label_pc_1000592d

dec_label_pc_1000592d:                            ; preds = %dec_label_pc_10005928
  %v2_1000592d = or i32 %v0_100059e2, 1
  %v5_1000592d = trunc i32 %v2_1000592d to i8
  store i8 %v5_1000592d, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_1000594d

dec_label_pc_1000594d:                            ; preds = %dec_label_pc_1000592d, %dec_label_pc_10005928
  %v0_1000596110 = phi i32 [ %v2_1000592d, %dec_label_pc_1000592d ], [ %v0_100059e2, %dec_label_pc_10005928 ]
  br i1 %v12_1000590c, label %dec_label_pc_1000594d.dec_label_pc_1000595e_crit_edge, label %dec_label_pc_10005951

dec_label_pc_1000594d.dec_label_pc_1000595e_crit_edge: ; preds = %dec_label_pc_1000594d
  %.pre = add i32 %v0_100058df, 4
  %.pre28 = inttoptr i32 %.pre to i32*
  br label %dec_label_pc_1000595e

dec_label_pc_10005951:                            ; preds = %dec_label_pc_1000594d
  %v2_10005951 = mul i32 %arg1, 32
  store i32 %v2_10005951, i32* %eax.global-to-local, align 4
  %v2_10005954 = add i32 %v0_100058df, 4
  %v3_10005954 = inttoptr i32 %v2_10005954 to i32*
  %v4_10005954 = load i32, i32* %v3_10005954, align 4
  %v5_10005954 = add i32 %v4_10005954, %v2_10005951
  br label %dec_label_pc_1000595e

dec_label_pc_1000595e:                            ; preds = %dec_label_pc_1000594d.dec_label_pc_1000595e_crit_edge, %dec_label_pc_10005951
  %v3_100059cd.pre-phi = phi i32* [ %.pre28, %dec_label_pc_1000594d.dec_label_pc_1000595e_crit_edge ], [ %v3_10005954, %dec_label_pc_10005951 ]
  %storemerge1 = phi i32 [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_1000594d.dec_label_pc_1000595e_crit_edge ], [ %v5_10005954, %dec_label_pc_10005951 ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  %v1_1000595e = add i32 %storemerge1, 4
  %v2_1000595e = inttoptr i32 %v1_1000595e to i32*
  br label %dec_label_pc_10005961

dec_label_pc_10005961:                            ; preds = %dec_label_pc_100059d4, %dec_label_pc_100059ca, %dec_label_pc_1000595e
  %v0_10005966 = phi i32 [ %v0_1000596110, %dec_label_pc_1000595e ], [ %v0_1000596111, %dec_label_pc_100059ca ], [ %v0_1000596111, %dec_label_pc_100059d4 ]
  %storemerge7.in = phi i32* [ %v2_1000595e, %dec_label_pc_1000595e ], [ %v1_100059d0, %dec_label_pc_100059ca ], [ @global_var_1002b61c.159, %dec_label_pc_100059d4 ]
  %storemerge7 = load i32, i32* %storemerge7.in, align 4
  store i32 %storemerge7, i32* %eax.global-to-local, align 4
  %v2_10005961 = and i32 %v0_10005966, 1
  %v3_10005961 = icmp eq i32 %v2_10005961, 0
  %v1_10005964 = icmp eq i1 %v3_10005961, false
  br i1 %v1_10005964, label %dec_label_pc_10005986, label %dec_label_pc_10005966

dec_label_pc_10005966:                            ; preds = %dec_label_pc_10005961
  %v2_10005966 = or i32 %v0_10005966, 1
  %v5_10005966 = trunc i32 %v2_10005966 to i8
  store i8 %v5_10005966, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10005986

dec_label_pc_10005986:                            ; preds = %dec_label_pc_10005966, %dec_label_pc_10005961
  %v0_100059a6 = phi i32 [ %v2_10005966, %dec_label_pc_10005966 ], [ %v0_10005966, %dec_label_pc_10005961 ]
  %v12_10005986 = icmp eq i32 %storemerge7, -1
  br i1 %v12_10005986, label %dec_label_pc_10005999, label %dec_label_pc_1000598a

dec_label_pc_1000598a:                            ; preds = %dec_label_pc_10005986
  %v2_1000598c = mul i32 %storemerge7, 32
  store i32 %v2_1000598c, i32* @ecx, align 4
  %v4_1000598f = load i32, i32* %v3_100059cd.pre-phi, align 4
  %v5_1000598f = add i32 %v4_1000598f, %v2_1000598c
  br label %dec_label_pc_10005999

dec_label_pc_10005999:                            ; preds = %dec_label_pc_10005986, %dec_label_pc_1000598a
  %storemerge = phi i32 [ %v5_1000598f, %dec_label_pc_1000598a ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10005986 ]
  store i32 %storemerge, i32* @ecx, align 4
  %v1_10005999 = inttoptr i32 %storemerge to i32*
  %v2_10005999 = load i32, i32* %v1_10005999, align 4
  %v14_10005999 = icmp eq i32 %v2_10005999, -1
  br i1 %v14_10005999, label %dec_label_pc_10005a6e.loopexit, label %dec_label_pc_100059a1

dec_label_pc_100059a1:                            ; preds = %dec_label_pc_10005999
  %v2_100059a1 = and i32 %v0_100059a6, 1
  %v3_100059a1 = icmp eq i32 %v2_100059a1, 0
  %v1_100059a4 = icmp eq i1 %v3_100059a1, false
  br i1 %v1_100059a4, label %dec_label_pc_100059c6, label %dec_label_pc_100059a6

dec_label_pc_100059a6:                            ; preds = %dec_label_pc_100059a1
  %v2_100059a6 = or i32 %v0_100059a6, 1
  %v5_100059a6 = trunc i32 %v2_100059a6 to i8
  store i8 %v5_100059a6, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_100059c6

dec_label_pc_100059c6:                            ; preds = %dec_label_pc_100059a6, %dec_label_pc_100059a1
  %v0_1000596111 = phi i32 [ %v2_100059a6, %dec_label_pc_100059a6 ], [ %v0_100059a6, %dec_label_pc_100059a1 ]
  br i1 %v12_10005986, label %dec_label_pc_100059d4, label %dec_label_pc_100059ca

dec_label_pc_100059ca:                            ; preds = %dec_label_pc_100059c6
  %v2_100059ca = mul i32 %storemerge7, 32
  store i32 %v2_100059ca, i32* %eax.global-to-local, align 4
  %v4_100059cd = load i32, i32* %v3_100059cd.pre-phi, align 4
  %v5_100059cd = add i32 %v4_100059cd, %v2_100059ca
  store i32 %v5_100059cd, i32* %eax.global-to-local, align 4
  %v1_100059d0 = inttoptr i32 %v5_100059cd to i32*
  br label %dec_label_pc_10005961

dec_label_pc_100059d4:                            ; preds = %dec_label_pc_100059c6
  store i32 ptrtoint (i32* @global_var_1002b61c.159 to i32), i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10005961

dec_label_pc_100059dd:                            ; preds = %dec_label_pc_1000591f
  br i1 %v1_100059e0, label %dec_label_pc_10005a02, label %dec_label_pc_100059e2

dec_label_pc_100059e2:                            ; preds = %dec_label_pc_100059dd
  %v2_100059e2 = or i32 %v0_100059e2, 1
  %v5_100059e2 = trunc i32 %v2_100059e2 to i8
  store i8 %v5_100059e2, i8* @global_var_1002b62c.158, align 1
  store i32 -1, i32* @global_var_1002b61c.159, align 4
  store i32 -1, i32* @global_var_1002b620.160, align 4
  store i32 -1, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10005a02

dec_label_pc_10005a02:                            ; preds = %dec_label_pc_100059e2, %dec_label_pc_100059dd
  br i1 %v12_1000590c, label %dec_label_pc_10005a15, label %dec_label_pc_10005a06

dec_label_pc_10005a06:                            ; preds = %dec_label_pc_10005a02
  %v2_10005a08 = mul i32 %arg1, 32
  store i32 %v2_10005a08, i32* @ecx, align 4
  %v2_10005a0b = add i32 %v0_100058df, 4
  %v3_10005a0b = inttoptr i32 %v2_10005a0b to i32*
  %v4_10005a0b = load i32, i32* %v3_10005a0b, align 4
  %v5_10005a0b = add i32 %v4_10005a0b, %v2_10005a08
  br label %dec_label_pc_10005a15

dec_label_pc_10005a15:                            ; preds = %dec_label_pc_10005a02, %dec_label_pc_10005a06
  %storemerge4 = phi i32 [ %v5_10005a0b, %dec_label_pc_10005a06 ], [ ptrtoint (i32* @global_var_1002b61c.159 to i32), %dec_label_pc_10005a02 ]
  store i32 %storemerge4, i32* @ecx, align 4
  %v1_10005a15 = add i32 %storemerge4, 8
  %v2_10005a15 = inttoptr i32 %v1_10005a15 to i32*
  %v3_10005a15 = load i32, i32* %v2_10005a15, align 4
  store i32 %v3_10005a15, i32* @esi, align 4
  store i32 %v0_100058df, i32* @ecx, align 4
  %v1_10005a1b = call i32 @function_100030b0(i32 %arg1)
  store i32 %v1_10005a1b, i32* %eax.global-to-local, align 4
  %v4_10005a20 = trunc i32 %v1_10005a1b to i8
  %v5_10005a20 = icmp eq i8 %v4_10005a20, 0
  br i1 %v5_10005a20, label %dec_label_pc_10005a6c, label %dec_label_pc_10005a24

dec_label_pc_10005a24:                            ; preds = %dec_label_pc_10005a15, %dec_label_pc_10005a55
  %v0_10005a24 = load i32, i32* @esi, align 4
  store i32 %v0_10005a24, i32* @ecx, align 4
  %v1_10005a26 = load i32, i32* @edi, align 4
  %v12_10005a26 = icmp eq i32 %v0_10005a24, %v1_10005a26
  br i1 %v12_10005a26, label %dec_label_pc_10005a6c, label %dec_label_pc_10005a2a

dec_label_pc_10005a2a:                            ; preds = %dec_label_pc_10005a24
  %v0_10005a2a = load i8, i8* @global_var_1002b62c.158, align 1
  %v1_10005a2a = and i8 %v0_10005a2a, 1
  %v2_10005a2a = icmp eq i8 %v1_10005a2a, 0
  %v1_10005a31 = icmp eq i1 %v2_10005a2a, false
  br i1 %v1_10005a31, label %dec_label_pc_10005a55, label %dec_label_pc_10005a33

dec_label_pc_10005a33:                            ; preds = %dec_label_pc_10005a2a
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_10005a38 = or i8 %v0_10005a2a, 1
  store i8 %v3_10005a38, i8* @global_var_1002b62c.158, align 1
  store i32 %v1_10005a26, i32* @global_var_1002b61c.159, align 4
  store i32 %v1_10005a26, i32* @global_var_1002b620.160, align 4
  store i32 %v1_10005a26, i32* @global_var_1002b624.161, align 4
  store i32 1, i32* @global_var_1002b628.162, align 4
  br label %dec_label_pc_10005a55

dec_label_pc_10005a55:                            ; preds = %dec_label_pc_10005a33, %dec_label_pc_10005a2a
  %v2_10005a57 = mul i32 %v0_10005a24, 32
  store i32 %v2_10005a57, i32* %eax.global-to-local, align 4
  %v1_10005a5a = load i32, i32* %ebx.global-to-local, align 4
  %v2_10005a5a = add i32 %v1_10005a5a, 4
  %v3_10005a5a = inttoptr i32 %v2_10005a5a to i32*
  %v4_10005a5a = load i32, i32* %v3_10005a5a, align 4
  %v5_10005a5a = add i32 %v4_10005a5a, %v2_10005a57
  store i32 %v5_10005a5a, i32* %eax.global-to-local, align 4
  %v1_10005a5d = load i32, i32* @esp, align 4
  %v2_10005a5d = add i32 %v1_10005a5d, -4
  %v3_10005a5d = inttoptr i32 %v2_10005a5d to i32*
  store i32 %v0_10005a24, i32* %v3_10005a5d, align 4
  %v0_10005a5e = load i32, i32* %eax.global-to-local, align 4
  %v1_10005a5e = add i32 %v0_10005a5e, 8
  %v2_10005a5e = inttoptr i32 %v1_10005a5e to i32*
  %v3_10005a5e = load i32, i32* %v2_10005a5e, align 4
  store i32 %v3_10005a5e, i32* @esi, align 4
  %v0_10005a61 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10005a61, i32* @ecx, align 4
  %v1_10005a63 = call i32 @function_100030b0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10005a63, i32* %eax.global-to-local, align 4
  %v4_10005a68 = trunc i32 %v1_10005a63 to i8
  %v5_10005a68 = icmp eq i8 %v4_10005a68, 0
  %v1_10005a6a = icmp eq i1 %v5_10005a68, false
  br i1 %v1_10005a6a, label %dec_label_pc_10005a24, label %dec_label_pc_10005a6c

dec_label_pc_10005a6c:                            ; preds = %dec_label_pc_10005a55, %dec_label_pc_10005a24, %dec_label_pc_10005a15
  %v0_10005a6c = load i32, i32* @esi, align 4
  store i32 %v0_10005a6c, i32* %eax.global-to-local, align 4
  %v0_10005a6e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10005a6e

dec_label_pc_10005a6e.loopexit:                   ; preds = %dec_label_pc_10005999
  br label %dec_label_pc_10005a6e

dec_label_pc_10005a6e:                            ; preds = %dec_label_pc_10005a6e.loopexit, %dec_label_pc_10005a6c
  %v0_10005a72 = phi i32 [ %storemerge7, %dec_label_pc_10005a6e.loopexit ], [ %v0_10005a6c, %dec_label_pc_10005a6c ]
  %v0_10005a6e = phi i32 [ %v4_100058db, %dec_label_pc_10005a6e.loopexit ], [ %v0_10005a6e.pre, %dec_label_pc_10005a6c ]
  %v3_10005a6f = add i32 %v0_10005a6e, 8
  %v1_10005a70 = inttoptr i32 %v3_10005a6f to i32*
  %v2_10005a70 = load i32, i32* %v1_10005a70, align 4
  store i32 %v2_10005a70, i32* @ebx, align 4
  %v3_10005a70 = add i32 %v0_10005a6e, 12
  %v1_10005a71 = inttoptr i32 %v3_10005a70 to i32*
  %v2_10005a71 = load i32, i32* %v1_10005a71, align 4
  store i32 %v2_10005a71, i32* @ebp, align 4
  ret i32 %v0_10005a72
}

define i32 @function_10005a80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10005a80:
  %v0_10005a84 = load i32, i32* @ecx, align 4
  store i32 %v0_10005a84, i32* @esi, align 4
  %v1_10005a86 = add i32 %v0_10005a84, 12
  %v2_10005a86 = inttoptr i32 %v1_10005a86 to i32*
  %v3_10005a86 = load i32, i32* %v2_10005a86, align 4
  %v1_10005a89 = add i32 %v0_10005a84, 4
  %v2_10005a89 = inttoptr i32 %v1_10005a89 to i32*
  %v3_10005a89 = load i32, i32* %v2_10005a89, align 4
  store i32 %v3_10005a89, i32* @ecx, align 4
  %v1_10005a8c = add i32 %v3_10005a86, 1
  %v7_10005a92 = icmp sgt i32 %v1_10005a8c, %v3_10005a89
  br i1 %v7_10005a92, label %dec_label_pc_10005a94, label %dec_label_pc_10005a9f

dec_label_pc_10005a94:                            ; preds = %dec_label_pc_10005a80
  %v2_10005a94 = sub i32 %v3_10005a86, %v3_10005a89
  %v1_10005a96 = add i32 %v2_10005a94, 1
  store i32 %v1_10005a96, i32* @eax, align 4
  store i32 %v0_10005a84, i32* @ecx, align 4
  %v1_10005a9a = call i32 @function_10005750(i32 %v1_10005a96)
  %v0_10005a9f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10005a9f

dec_label_pc_10005a9f:                            ; preds = %dec_label_pc_10005a80, %dec_label_pc_10005a94
  %v18_10005a9f = phi i32 [ %v0_10005a84, %dec_label_pc_10005a80 ], [ %v0_10005a9f.pre, %dec_label_pc_10005a94 ]
  %v1_10005a9f = add i32 %v18_10005a9f, 12
  %v2_10005a9f = inttoptr i32 %v1_10005a9f to i32*
  %v3_10005a9f = load i32, i32* %v2_10005a9f, align 4
  %v4_10005a9f = add i32 %v3_10005a9f, 1
  store i32 %v4_10005a9f, i32* %v2_10005a9f, align 4
  %v0_10005aa2 = load i32, i32* @esi, align 4
  %v1_10005aa2 = add i32 %v0_10005aa2, 12
  %v2_10005aa2 = inttoptr i32 %v1_10005aa2 to i32*
  %v3_10005aa2 = load i32, i32* %v2_10005aa2, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_10005aaa = sub i32 %v3_10005aa2, %arg1
  %v1_10005aac = add i32 %v2_10005aaa, -1
  %v0_10005aad = load i32, i32* @ecx, align 4
  %v2_10005aad = add i32 %v0_10005aa2, 16
  %v3_10005aad = inttoptr i32 %v2_10005aad to i32*
  store i32 %v0_10005aad, i32* %v3_10005aad, align 4
  %tmp13 = icmp slt i32 %v1_10005aac, 1
  br i1 %tmp13, label %dec_label_pc_10005acc, label %dec_label_pc_10005ab4

dec_label_pc_10005ab4:                            ; preds = %dec_label_pc_10005a9f
  %v0_10005ab4 = load i32, i32* @edi, align 4
  %v2_10005ab6 = mul i32 %v0_10005ab4, 16
  %v2_10005ab9 = mul i32 %v1_10005aac, 16
  %v0_10005abc = load i32, i32* @ecx, align 4
  %v2_10005abc = add i32 %v0_10005abc, %v2_10005ab6
  store i32 %v2_10005abc, i32* @ecx, align 4
  %v1_10005abe = load i32, i32* @esp, align 4
  %v2_10005abe = add i32 %v1_10005abe, -4
  %v3_10005abe = inttoptr i32 %v2_10005abe to i32*
  store i32 %v2_10005ab9, i32* %v3_10005abe, align 4
  %v0_10005abf = load i32, i32* @ecx, align 4
  %v2_10005abf = add i32 %v1_10005abe, -8
  %v3_10005abf = inttoptr i32 %v2_10005abf to i32*
  store i32 %v0_10005abf, i32* %v3_10005abf, align 4
  %v0_10005ac0 = load i32, i32* @ecx, align 4
  %v1_10005ac0 = add i32 %v0_10005ac0, 16
  store i32 %v1_10005ac0, i32* @ecx, align 4
  %v2_10005ac3 = add i32 %v1_10005abe, -12
  %v3_10005ac3 = inttoptr i32 %v2_10005ac3 to i32*
  store i32 %v1_10005ac0, i32* %v3_10005ac3, align 4
  %v1_10005ac4 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_10005acc

dec_label_pc_10005acc:                            ; preds = %dec_label_pc_10005ab4, %dec_label_pc_10005a9f
  %v0_10005acc = load i32, i32* @edi, align 4
  %v4_10005ad1 = mul i32 %v0_10005acc, 32
  %v14_10005ad1 = icmp eq i32 %v4_10005ad1, 0
  store i32 %v4_10005ad1, i32* @ecx, align 4
  br i1 %v14_10005ad1, label %dec_label_pc_10005ade, label %dec_label_pc_10005ad5

dec_label_pc_10005ad5:                            ; preds = %dec_label_pc_10005acc
  %v1_10005ad8 = load i32, i32* @esp, align 4
  %v2_10005ad8 = add i32 %v1_10005ad8, -4
  %v3_10005ad8 = inttoptr i32 %v2_10005ad8 to i32*
  store i32 %arg2, i32* %v3_10005ad8, align 4
  %v1_10005ad9 = call i32 @function_1000d190(i32 ptrtoint (i32* @5 to i32))
  %v0_10005ade.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10005ade

dec_label_pc_10005ade:                            ; preds = %dec_label_pc_10005ad5, %dec_label_pc_10005acc
  %v0_10005ade = phi i32 [ %v0_10005ade.pre, %dec_label_pc_10005ad5 ], [ %v0_10005acc, %dec_label_pc_10005acc ]
  %v0_10005ae0 = load i32, i32* @esp, align 4
  %v1_10005ae0 = inttoptr i32 %v0_10005ae0 to i32*
  %v2_10005ae0 = load i32, i32* %v1_10005ae0, align 4
  store i32 %v2_10005ae0, i32* @edi, align 4
  %v3_10005ae0 = add i32 %v0_10005ae0, 4
  %v1_10005ae1 = inttoptr i32 %v3_10005ae0 to i32*
  %v2_10005ae1 = load i32, i32* %v1_10005ae1, align 4
  store i32 %v2_10005ae1, i32* @esi, align 4
  %v3_10005ae1 = add i32 %v0_10005ae0, 8
  %v1_10005ae2 = inttoptr i32 %v3_10005ae1 to i32*
  %v2_10005ae2 = load i32, i32* %v1_10005ae2, align 4
  store i32 %v2_10005ae2, i32* @ebp, align 4
  ret i32 %v0_10005ade
}

define i32 @function_10005af0(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10005af0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_10005af0 = load i32, i32* @ebp, align 4
  %v0_10005af6 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10005af6, i32* @ecx, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_10005aff = add i32 %v0_10005af6, 4
  %v2_10005aff = inttoptr i32 %v1_10005aff to i32*
  %v3_10005aff = load i32, i32* %v2_10005aff, align 4
  store i32 %v3_10005aff, i32* %eax.global-to-local, align 4
  %v1_10005b02 = add i32 %v3_10005aff, 8
  %v2_10005b02 = inttoptr i32 %v1_10005b02 to i32*
  %v3_10005b02 = load i32, i32* %v2_10005b02, align 4
  store i32 %v3_10005b02, i32* %eax.global-to-local, align 4
  %v0_10005b05 = load i32, i32* @esi, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v1_10005aff, i32* @ecx, align 4
  store i32 %v3_10005b02, i32* @esi, align 4
  %v1_10005b1a = icmp eq i32 %v3_10005b02, 0
  br i1 %v1_10005b1a, label %dec_label_pc_10005bcc, label %dec_label_pc_10005b22

dec_label_pc_10005b22:                            ; preds = %dec_label_pc_10005af0
  %v0_10005b22 = load i32, i32* @ebx, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_10005b26 = load i32, i32* @edi, align 4
  store i32 %tmp, i32* @ecx, align 4
  %v8_10005b29 = call i32 @function_10005840(i32 %v0_10005b26, i32 %v0_10005b22, i32 %arg2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10023120.251, i32 0, i32 0), i32 %arg3, i32 %v0_10005b05)
  store i32 %v8_10005b29, i32* %eax.global-to-local, align 4
  store i32 %v8_10005b29, i32* @edi, align 4
  %v10_10005b30 = icmp eq i32 %v8_10005b29, -1
  br i1 %v10_10005b30, label %dec_label_pc_10005b22.dec_label_pc_10005bb1_crit_edge, label %dec_label_pc_10005b35

dec_label_pc_10005b22.dec_label_pc_10005bb1_crit_edge: ; preds = %dec_label_pc_10005b22
  %v0_10005bc0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10005bb1

dec_label_pc_10005b35:                            ; preds = %dec_label_pc_10005b22, %dec_label_pc_10005b35
  %v0_10005b38 = phi i32 [ %v1_10005ba2, %dec_label_pc_10005b35 ], [ %v8_10005b29, %dec_label_pc_10005b22 ]
  %v0_10005b35 = load i32, i32* @ebx, align 4
  %v1_10005b35 = add i32 %v0_10005b35, 4
  %v2_10005b35 = inttoptr i32 %v1_10005b35 to i32*
  %v3_10005b35 = load i32, i32* %v2_10005b35, align 4
  %v2_10005b3a = mul i32 %v0_10005b38, 32
  store i32 %v2_10005b3a, i32* %esi.global-to-local, align 4
  %v3_10005b3d = or i32 %v2_10005b3a, 16
  %v4_10005b3d = add i32 %v3_10005b3d, %v3_10005b35
  store i32 %v4_10005b3d, i32* @ecx, align 4
  %v0_10005b41 = call i32 @function_1000d070()
  store i32 %v0_10005b41, i32* %eax.global-to-local, align 4
  %v0_10005b46 = load i32, i32* @ebx, align 4
  %v1_10005b46 = add i32 %v0_10005b46, 4
  %v2_10005b46 = inttoptr i32 %v1_10005b46 to i32*
  %v3_10005b46 = load i32, i32* %v2_10005b46, align 4
  store i32 %v3_10005b46, i32* %edx.global-to-local, align 4
  %v1_10005b49 = load i32, i32* %esi.global-to-local, align 4
  %v3_10005b49 = add i32 %v3_10005b46, 16
  %v4_10005b49 = add i32 %v3_10005b49, %v1_10005b49
  store i32 %v4_10005b49, i32* @ecx, align 4
  %v0_10005b50 = call i32 @function_1000d070()
  store i32 %v3_10005b02, i32* @ecx, align 4
  store i32 %v0_10005b41, i32* %edx.global-to-local, align 4
  store i32 %v0_10005b50, i32* %stack_var_-16, align 4
  %v0_10005b5e = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10005b5e, i32* %eax.global-to-local, align 4
  %v1_10005b63 = add i32 %v0_10005b5e, 4
  %v2_10005b63 = inttoptr i32 %v1_10005b63 to i32*
  %v3_10005b63 = load i32, i32* %v2_10005b63, align 4
  store i32 %v3_10005b63, i32* %esi.global-to-local, align 4
  %v1_10005b66 = load i32, i32* @esp, align 4
  %v2_10005b66 = add i32 %v1_10005b66, -4
  %v3_10005b66 = inttoptr i32 %v2_10005b66 to i32*
  store i32 %v3_10005b02, i32* %v3_10005b66, align 4
  %v0_10005b67 = load i32, i32* %edx.global-to-local, align 4
  %v2_10005b67 = add i32 %v1_10005b66, -8
  %v3_10005b67 = inttoptr i32 %v2_10005b67 to i32*
  store i32 %v0_10005b67, i32* %v3_10005b67, align 4
  %v0_10005b68 = load i32, i32* %stack_var_-16, align 4
  %v1_10005b68 = call i32 @function_10009450(i32 %v0_10005b68)
  %v0_10005b76 = load i32, i32* @esp, align 4
  %v3_10005b79 = inttoptr i32 %v0_10005b76 to i32*
  store i32 %v1_10005b68, i32* %v3_10005b79, align 4
  %v3_10005b7a = load i32, i32* %stack_var_-16, align 4
  store i32 %v3_10005b7a, i32* %eax.global-to-local, align 4
  %v2_10005b7d = add i32 %v0_10005b76, -4
  %v3_10005b7d = inttoptr i32 %v2_10005b7d to i32*
  store i32 %v3_10005b7a, i32* %v3_10005b7d, align 4
  %v0_10005b83 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10005b83, i32* @ecx, align 4
  store i32 %v3_10005b02, i32* %edx.global-to-local, align 4
  %v1_10005b8c = add i32 %v0_10005b83, 4
  %v2_10005b8c = inttoptr i32 %v1_10005b8c to i32*
  %v3_10005b8c = load i32, i32* %v2_10005b8c, align 4
  store i32 %v3_10005b8c, i32* %eax.global-to-local, align 4
  %v1_10005b8f = add i32 %v3_10005b8c, 4
  %v2_10005b8f = inttoptr i32 %v1_10005b8f to i32*
  %v3_10005b8f = load i32, i32* %v2_10005b8f, align 4
  store i32 %v3_10005b8f, i32* %eax.global-to-local, align 4
  %v2_10005b92 = add i32 %v0_10005b76, -8
  %v3_10005b92 = inttoptr i32 %v2_10005b92 to i32*
  store i32 %v3_10005b02, i32* %v3_10005b92, align 4
  %v1_10005b96 = add i32 %v0_10005b76, -12
  %v2_10005b96 = inttoptr i32 %v1_10005b96 to i32*
  store i32 1, i32* %v2_10005b96, align 4
  %v1_10005b98 = add i32 %v0_10005b76, -16
  %v2_10005b98 = inttoptr i32 %v1_10005b98 to i32*
  store i32 ptrtoint (i32* @global_var_1002311c.252 to i32), i32* %v2_10005b98, align 4
  %v0_10005b9f = load i32, i32* @edi, align 4
  %v2_10005b9f = add i32 %v0_10005b76, -20
  %v3_10005b9f = inttoptr i32 %v2_10005b9f to i32*
  store i32 %v0_10005b9f, i32* %v3_10005b9f, align 4
  %v0_10005ba0 = load i32, i32* @ebx, align 4
  store i32 %v0_10005ba0, i32* @ecx, align 4
  %v1_10005ba2 = call i32 @function_100058d0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10005ba2, i32* %eax.global-to-local, align 4
  store i32 %v1_10005ba2, i32* @edi, align 4
  %v10_10005ba9 = icmp eq i32 %v1_10005ba2, -1
  %v1_10005bac = icmp eq i1 %v10_10005ba9, false
  br i1 %v1_10005bac, label %dec_label_pc_10005b35, label %dec_label_pc_10005bae

dec_label_pc_10005bae:                            ; preds = %dec_label_pc_10005b35
  store i32 %v3_10005b02, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10005bb1

dec_label_pc_10005bb1:                            ; preds = %dec_label_pc_10005b22.dec_label_pc_10005bb1_crit_edge, %dec_label_pc_10005bae
  %v0_10005bc0 = phi i32 [ %v0_10005bc0.pre, %dec_label_pc_10005b22.dec_label_pc_10005bb1_crit_edge ], [ %v3_10005b02, %dec_label_pc_10005bae ]
  %v0_10005bb1 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10005bb1, i32* @ecx, align 4
  %v1_10005bb7 = add i32 %v0_10005bb1, 4
  %v2_10005bb7 = inttoptr i32 %v1_10005bb7 to i32*
  %v3_10005bb7 = load i32, i32* %v2_10005bb7, align 4
  store i32 %v3_10005bb7, i32* %edx.global-to-local, align 4
  %v1_10005bba = add i32 %v3_10005bb7, 12
  %v2_10005bba = inttoptr i32 %v1_10005bba to i32*
  %v3_10005bba = load i32, i32* %v2_10005bba, align 4
  store i32 %v3_10005bba, i32* %eax.global-to-local, align 4
  store i32 %v1_10005bb7, i32* @ecx, align 4
  %v1_10005bc0 = load i32, i32* @esp, align 4
  %v2_10005bc0 = add i32 %v1_10005bc0, -4
  %v3_10005bc0 = inttoptr i32 %v2_10005bc0 to i32*
  store i32 %v0_10005bc0, i32* %v3_10005bc0, align 4
  store i32 %v0_10005bc0, i32* @edi, align 4
  %v1_10005bc4 = inttoptr i32 %v1_10005bc0 to i32*
  %v2_10005bc4 = load i32, i32* %v1_10005bc4, align 4
  store i32 %v2_10005bc4, i32* @ebx, align 4
  %v3_10005bc4 = add i32 %v1_10005bc0, 4
  %v0_10005bc5 = load i32, i32* %eax.global-to-local, align 4
  %v1_10005bc5 = and i32 %v0_10005bc5, -256
  %v2_10005bc5 = or i32 %v1_10005bc5, 1
  store i32 %v2_10005bc5, i32* %eax.global-to-local, align 4
  %v1_10005bc7 = inttoptr i32 %v3_10005bc4 to i32*
  %v2_10005bc7 = load i32, i32* %v1_10005bc7, align 4
  store i32 %v2_10005bc7, i32* %esi.global-to-local, align 4
  ret i32 %v2_10005bc5

dec_label_pc_10005bcc:                            ; preds = %dec_label_pc_10005af0
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %v0_10005af0, i32* @ebp, align 4
  ret i32 0
}

define i32 @function_10005be0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10005be0:
  %edx.global-to-local = alloca i32, align 4
  %tmp15 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-896 = alloca i32, align 4
  %stack_var_-328 = alloca i8, align 1
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-840 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10005be0 = load i32, i32* @ebp, align 4
  store i32 %v0_10005be0, i32* %stack_var_-4, align 4
  %v4_10005be0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10005be0, i32* @ebp, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v16_10005be9 = ptrtoint i32* %stack_var_-840 to i32
  store i32 %v16_10005be9, i32* %edx.global-to-local, align 4
  %v6_10005c02 = call i32 @function_10009a90(i32* nonnull %stack_var_-840, i32 512, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022c68.189, i32 0, i32 0))
  store i32 %v6_10005c02, i32* @eax, align 4
  %v2_10005c10 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_10005c10, i32* @ecx, align 4
  %v4_10005c13 = call i32 @function_1000c7c0(i32 0, i32 0, i32 1)
  %v0_10005c18 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10005c18, i32* @ecx, align 4
  %v1_10005c1e = add i32 %v0_10005c18, 4
  %v2_10005c1e = inttoptr i32 %v1_10005c1e to i32*
  %v3_10005c1e = load i32, i32* %v2_10005c1e, align 4
  %v1_10005c21 = add i32 %v3_10005c1e, 56
  %v2_10005c21 = inttoptr i32 %v1_10005c21 to i32*
  %v3_10005c21 = load i32, i32* %v2_10005c21, align 4
  store i32 %v1_10005c1e, i32* @ecx, align 4
  store i32 %v16_10005be9, i32* %edx.global-to-local, align 4
  %v4_10005c3f = trunc i32 %v3_10005c21 to i8
  %v5_10005c3f = icmp eq i8 %v4_10005c3f, 0
  br i1 %v5_10005c3f, label %dec_label_pc_10005d69, label %dec_label_pc_10005c47

dec_label_pc_10005c47:                            ; preds = %dec_label_pc_10005be0
  %v2_10005c4c = ptrtoint i8* %stack_var_-328 to i32
  store i32 %v2_10005c10, i32* @ecx, align 4
  %tmp51 = bitcast i8* %stack_var_-328 to i32*
  %v4_10005c56 = call i32 @function_1000c5d0(i32* %tmp51, i32 260)
  %v3_10005c5b = load i8, i8* %stack_var_-328, align 1
  %v12_10005c5b = icmp eq i8 %v3_10005c5b, 0
  br i1 %v12_10005c5b, label %dec_label_pc_10005d7e, label %dec_label_pc_10005c68

dec_label_pc_10005c68:                            ; preds = %dec_label_pc_10005c47
  %v0_10005c6a = load i32, i32* @edi, align 4
  store i32 %v0_10005c6a, i32* %stack_var_-896, align 4
  %v4_10005c6a = ptrtoint i32* %stack_var_-896 to i32
  store i32 %arg2, i32* @edi, align 4
  store i32 %v2_10005c4c, i32* @ebx, align 4
  %v2_10005ca4 = ptrtoint i32* %stack_var_-20 to i32
  %v11_10005d11 = icmp slt i32 %tmp18, 0
  %v2_10005d1c = icmp eq i1 %v11_10005d11, false
  br label %dec_label_pc_10005c74

dec_label_pc_10005c74:                            ; preds = %dec_label_pc_10005d43, %dec_label_pc_10005c68
  %v1_10005c7a = phi i32 [ %v4_10005c6a, %dec_label_pc_10005c68 ], [ %v1_10005c7a.pre, %dec_label_pc_10005d43 ]
  store i32 %v2_10005c4c, i32* %edx.global-to-local, align 4
  %v2_10005c7a = add i32 %v1_10005c7a, -4
  %v3_10005c7a = inttoptr i32 %v2_10005c7a to i32*
  store i32 %v2_10005c4c, i32* %v3_10005c7a, align 4
  br label %dec_label_pc_10005c7b

dec_label_pc_10005c7b:                            ; preds = %dec_label_pc_10005c96, %dec_label_pc_10005c74
  %v1_10005c7b = call i32 @function_10009450(i32 ptrtoint (i32* @5 to i32))
  %v1_10005c83 = add i32 %v1_10005c7b, -1
  %v5_10005c86 = icmp slt i32 %v1_10005c7b, 1
  %v0_10005c8f.pre = load i32, i32* @ebx, align 4
  %.pre = add i32 %v1_10005c83, %v0_10005c8f.pre
  %.pre60 = inttoptr i32 %.pre to i8*
  br i1 %v5_10005c86, label %dec_label_pc_10005c8f, label %dec_label_pc_10005c88

dec_label_pc_10005c88:                            ; preds = %dec_label_pc_10005c7b
  %v6_10005c88 = load i8, i8* %.pre60, align 1
  %v16_10005c88 = icmp eq i8 %v6_10005c88, 10
  br i1 %v16_10005c88, label %dec_label_pc_10005c96, label %dec_label_pc_10005c8f

dec_label_pc_10005c8f:                            ; preds = %dec_label_pc_10005c7b, %dec_label_pc_10005c88
  %v6_10005c8f = load i8, i8* %.pre60, align 1
  %v16_10005c8f = icmp eq i8 %v6_10005c8f, 13
  %v1_10005c94 = icmp eq i1 %v16_10005c8f, false
  br i1 %v1_10005c94, label %dec_label_pc_10005ca4, label %dec_label_pc_10005c96

dec_label_pc_10005c96:                            ; preds = %dec_label_pc_10005c8f, %dec_label_pc_10005c88
  store i8 0, i8* %.pre60, align 1
  %v1_10005ca1 = load i32, i32* @esp, align 4
  %v2_10005ca1 = add i32 %v1_10005ca1, -4
  %v3_10005ca1 = inttoptr i32 %v2_10005ca1 to i32*
  store i32 %v2_10005c4c, i32* %v3_10005ca1, align 4
  br label %dec_label_pc_10005c7b

dec_label_pc_10005ca4:                            ; preds = %dec_label_pc_10005c8f
  store i32 %v2_10005ca4, i32* @ecx, align 4
  %v0_10005ca7 = call i32 @function_1000d140()
  %v1_10005cb2 = load i32, i32* @esp, align 4
  %v2_10005cb2 = add i32 %v1_10005cb2, -4
  %v3_10005cb2 = inttoptr i32 %v2_10005cb2 to i32*
  store i32 %v2_10005c4c, i32* %v3_10005cb2, align 4
  store i32 %v2_10005ca4, i32* @ecx, align 4
  %v1_10005cb6 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  %v0_10005cbb = load i32, i32* @edi, align 4
  %v1_10005cbb = add i32 %v0_10005cbb, 12
  %v2_10005cbb = inttoptr i32 %v1_10005cbb to i32*
  %v3_10005cbb = load i32, i32* %v2_10005cbb, align 4
  store i32 %v3_10005cbb, i32* @esi, align 4
  %v1_10005cbe = add i32 %v0_10005cbb, 4
  %v2_10005cbe = inttoptr i32 %v1_10005cbe to i32*
  %v3_10005cbe = load i32, i32* %v2_10005cbe, align 4
  store i32 %v3_10005cbe, i32* @eax, align 4
  %v1_10005cc1 = add i32 %v3_10005cbb, 1
  store i32 %v1_10005cc1, i32* %edx.global-to-local, align 4
  %v7_10005cc6 = icmp sgt i32 %v1_10005cc1, %v3_10005cbe
  br i1 %v7_10005cc6, label %dec_label_pc_10005cc8, label %dec_label_pc_10005cd5

dec_label_pc_10005cc8:                            ; preds = %dec_label_pc_10005ca4
  %v2_10005cca = sub i32 %v3_10005cbb, %v3_10005cbe
  %v1_10005ccc = add i32 %v2_10005cca, 1
  %v1_10005ccd = load i32, i32* @esp, align 4
  %v2_10005ccd = add i32 %v1_10005ccd, -4
  %v3_10005ccd = inttoptr i32 %v2_10005ccd to i32*
  store i32 %v1_10005ccc, i32* %v3_10005ccd, align 4
  %v0_10005cce = load i32, i32* @edi, align 4
  store i32 %v0_10005cce, i32* @ecx, align 4
  %v1_10005cd0 = call i32 @function_10005750(i32 ptrtoint (i32* @5 to i32))
  %v0_10005cd5.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10005cd5

dec_label_pc_10005cd5:                            ; preds = %dec_label_pc_10005ca4, %dec_label_pc_10005cc8
  %v18_10005cd5 = phi i32 [ %v0_10005cbb, %dec_label_pc_10005ca4 ], [ %v0_10005cd5.pre, %dec_label_pc_10005cc8 ]
  %v1_10005cd5 = add i32 %v18_10005cd5, 12
  %v2_10005cd5 = inttoptr i32 %v1_10005cd5 to i32*
  %v3_10005cd5 = load i32, i32* %v2_10005cd5, align 4
  %v4_10005cd5 = add i32 %v3_10005cd5, 1
  store i32 %v4_10005cd5, i32* %v2_10005cd5, align 4
  %v0_10005cd8 = load i32, i32* @edi, align 4
  %v1_10005cd8 = add i32 %v0_10005cd8, 12
  %v2_10005cd8 = inttoptr i32 %v1_10005cd8 to i32*
  %v3_10005cd8 = load i32, i32* %v2_10005cd8, align 4
  %v1_10005cdb = inttoptr i32 %v0_10005cd8 to i32*
  %v2_10005cdb = load i32, i32* %v1_10005cdb, align 4
  store i32 %v2_10005cdb, i32* @ecx, align 4
  %v1_10005cdd = load i32, i32* @esi, align 4
  %v2_10005cdd = sub i32 %v3_10005cd8, %v1_10005cdd
  %v1_10005cdf = add i32 %v2_10005cdd, -1
  %v2_10005ce0 = add i32 %v0_10005cd8, 16
  %v3_10005ce0 = inttoptr i32 %v2_10005ce0 to i32*
  store i32 %v2_10005cdb, i32* %v3_10005ce0, align 4
  %tmp56 = icmp slt i32 %v1_10005cdf, 1
  br i1 %tmp56, label %dec_label_pc_10005cff, label %dec_label_pc_10005ce7

dec_label_pc_10005ce7:                            ; preds = %dec_label_pc_10005cd5
  %v0_10005ce7 = load i32, i32* @esi, align 4
  %v2_10005ce9 = mul i32 %v0_10005ce7, 16
  store i32 %v2_10005ce9, i32* %edx.global-to-local, align 4
  %v2_10005cec = mul i32 %v1_10005cdf, 16
  %v0_10005cef = load i32, i32* @ecx, align 4
  %v2_10005cef = add i32 %v0_10005cef, %v2_10005ce9
  store i32 %v2_10005cef, i32* @ecx, align 4
  %v1_10005cf1 = load i32, i32* @esp, align 4
  %v2_10005cf1 = add i32 %v1_10005cf1, -4
  %v3_10005cf1 = inttoptr i32 %v2_10005cf1 to i32*
  store i32 %v2_10005cec, i32* %v3_10005cf1, align 4
  %v0_10005cf2 = load i32, i32* @ecx, align 4
  %v2_10005cf2 = add i32 %v1_10005cf1, -8
  %v3_10005cf2 = inttoptr i32 %v2_10005cf2 to i32*
  store i32 %v0_10005cf2, i32* %v3_10005cf2, align 4
  %v0_10005cf3 = load i32, i32* @ecx, align 4
  %v1_10005cf3 = add i32 %v0_10005cf3, 16
  store i32 %v1_10005cf3, i32* @ecx, align 4
  %v2_10005cf6 = add i32 %v1_10005cf1, -12
  %v3_10005cf6 = inttoptr i32 %v2_10005cf6 to i32*
  store i32 %v1_10005cf3, i32* %v3_10005cf6, align 4
  %v1_10005cf7 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_10005cff

dec_label_pc_10005cff:                            ; preds = %dec_label_pc_10005ce7, %dec_label_pc_10005cd5
  %v0_10005cff = load i32, i32* @esi, align 4
  %v2_10005cff = mul i32 %v0_10005cff, 16
  %v1_10005d02 = load i32, i32* @edi, align 4
  %v2_10005d02 = inttoptr i32 %v1_10005d02 to i32*
  %v3_10005d02 = load i32, i32* %v2_10005d02, align 4
  %v4_10005d02 = add i32 %v3_10005d02, %v2_10005cff
  %v14_10005d02 = icmp eq i32 %v4_10005d02, 0
  store i32 %v4_10005d02, i32* @esi, align 4
  store i32 %v4_10005d02, i32* @ecx, align 4
  br i1 %v14_10005d02, label %dec_label_pc_10005d11, label %dec_label_pc_10005d08

dec_label_pc_10005d08:                            ; preds = %dec_label_pc_10005cff
  %v1_10005d0b = load i32, i32* @esp, align 4
  %v2_10005d0b = add i32 %v1_10005d0b, -4
  %v3_10005d0b = inttoptr i32 %v2_10005d0b to i32*
  store i32 %v2_10005ca4, i32* %v3_10005d0b, align 4
  %v1_10005d0c = call i32 @function_1000d190(i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_10005d11

dec_label_pc_10005d11:                            ; preds = %dec_label_pc_10005d08, %dec_label_pc_10005cff
  br i1 %v2_10005d1c, label %dec_label_pc_10005d1e, label %dec_label_pc_10005d43

dec_label_pc_10005d1e:                            ; preds = %dec_label_pc_10005d11
  %v3_10005d1e = load i32, i32* %stack_var_-20, align 4
  %v1_10005d21 = icmp eq i32 %v3_10005d1e, 0
  br i1 %v1_10005d21, label %dec_label_pc_10005d43, label %dec_label_pc_10005d25

dec_label_pc_10005d25:                            ; preds = %dec_label_pc_10005d1e
  %v0_10005d25 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005d25, i32* @ecx, align 4
  %v1_10005d2b = inttoptr i32 %v0_10005d25 to i32*
  %v2_10005d2b = load i32, i32* %v1_10005d2b, align 4
  store i32 %v2_10005d2b, i32* @ecx, align 4
  %v1_10005d2d = inttoptr i32 %v2_10005d2b to i32*
  %v2_10005d2d = load i32, i32* %v1_10005d2d, align 4
  store i32 %v2_10005d2d, i32* %edx.global-to-local, align 4
  %v1_10005d2f = load i32, i32* @esp, align 4
  %v2_10005d2f = add i32 %v1_10005d2f, -4
  %v3_10005d2f = inttoptr i32 %v2_10005d2f to i32*
  store i32 %v3_10005d1e, i32* %v3_10005d2f, align 4
  store i32 0, i32* %stack_var_-20, align 4
  br label %dec_label_pc_10005d43

dec_label_pc_10005d43:                            ; preds = %dec_label_pc_10005d1e, %dec_label_pc_10005d25, %dec_label_pc_10005d11
  %v0_10005d43 = load i32, i32* @esp, align 4
  %v1_10005d43 = add i32 %v0_10005d43, -4
  %v2_10005d43 = inttoptr i32 %v1_10005d43 to i32*
  store i32 260, i32* %v2_10005d43, align 4
  %v2_10005d4e = add i32 %v0_10005d43, -8
  %v3_10005d4e = inttoptr i32 %v2_10005d4e to i32*
  store i32 %v2_10005c4c, i32* %v3_10005d4e, align 4
  store i32 %v2_10005c10, i32* @ecx, align 4
  %v3_10005d52 = call i32 @function_1000c5d0(i32* null, i32 ptrtoint (i32* @5 to i32))
  %v3_10005d57 = load i8, i8* %stack_var_-328, align 1
  %v12_10005d57 = icmp eq i8 %v3_10005d57, 0
  %v1_10005d5e = icmp eq i1 %v12_10005d57, false
  %v1_10005c7a.pre = load i32, i32* @esp, align 4
  br i1 %v1_10005d5e, label %dec_label_pc_10005c74, label %dec_label_pc_10005d64

dec_label_pc_10005d64:                            ; preds = %dec_label_pc_10005d43
  %v1_10005d64 = inttoptr i32 %v1_10005c7a.pre to i32*
  %v2_10005d64 = load i32, i32* %v1_10005d64, align 4
  store i32 %v2_10005d64, i32* @edi, align 4
  %v3_10005d64 = add i32 %v1_10005c7a.pre, 4
  %v1_10005d65 = inttoptr i32 %v3_10005d64 to i32*
  %v2_10005d65 = load i32, i32* %v1_10005d65, align 4
  store i32 %v2_10005d65, i32* @esi, align 4
  %v3_10005d65 = add i32 %v1_10005c7a.pre, 8
  %v1_10005d66 = inttoptr i32 %v3_10005d65 to i32*
  %v2_10005d66 = load i32, i32* %v1_10005d66, align 4
  store i32 %v2_10005d66, i32* @ebx, align 4
  br label %dec_label_pc_10005d7e

dec_label_pc_10005d69:                            ; preds = %dec_label_pc_10005be0
  store i32 %v16_10005be9, i32* %edx.global-to-local, align 4
  %v0_10005d75 = call i32 @Error()
  br label %dec_label_pc_10005d7e

dec_label_pc_10005d7e:                            ; preds = %dec_label_pc_10005d69, %dec_label_pc_10005d64, %dec_label_pc_10005c47
  %v0_10005d9e12 = phi i32 [ %v0_10005d75, %dec_label_pc_10005d69 ], [ %v3_10005d52, %dec_label_pc_10005d64 ], [ %v4_10005c56, %dec_label_pc_10005c47 ]
  %v11_10005d7e = icmp slt i32 %tmp15, 0
  %v2_10005d82 = icmp eq i1 %v11_10005d7e, false
  br i1 %v2_10005d82, label %dec_label_pc_10005d84, label %dec_label_pc_10005d9b

dec_label_pc_10005d84:                            ; preds = %dec_label_pc_10005d7e
  %v3_10005d84 = load i32, i32* %stack_var_-68, align 4
  %v1_10005d87 = icmp eq i32 %v3_10005d84, 0
  br i1 %v1_10005d87, label %dec_label_pc_10005d9b, label %dec_label_pc_10005d8b

dec_label_pc_10005d8b:                            ; preds = %dec_label_pc_10005d84
  %v0_10005d8b = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005d8b, i32* @ecx, align 4
  %v1_10005d91 = inttoptr i32 %v0_10005d8b to i32*
  %v2_10005d91 = load i32, i32* %v1_10005d91, align 4
  store i32 %v2_10005d91, i32* @ecx, align 4
  %v1_10005d93 = inttoptr i32 %v2_10005d91 to i32*
  %v2_10005d93 = load i32, i32* %v1_10005d93, align 4
  store i32 %v2_10005d93, i32* %edx.global-to-local, align 4
  %v1_10005d95 = load i32, i32* @esp, align 4
  %v2_10005d95 = add i32 %v1_10005d95, -4
  %v3_10005d95 = inttoptr i32 %v2_10005d95 to i32*
  store i32 %v3_10005d84, i32* %v3_10005d95, align 4
  %v0_10005d96 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005d96 = add i32 %v0_10005d96, 20
  %v2_10005d96 = inttoptr i32 %v1_10005d96 to i32*
  %v3_10005d96 = load i32, i32* %v2_10005d96, align 4
  br label %dec_label_pc_10005d9b

dec_label_pc_10005d9b:                            ; preds = %dec_label_pc_10005d7e, %dec_label_pc_10005d8b, %dec_label_pc_10005d84
  %v0_10005d9e = phi i32 [ %v0_10005d9e12, %dec_label_pc_10005d7e ], [ %v3_10005d96, %dec_label_pc_10005d8b ], [ 0, %dec_label_pc_10005d84 ]
  %v2_10005d9d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10005d9d, i32* @ebp, align 4
  ret i32 %v0_10005d9e
}

define i32 @function_10005db0() local_unnamed_addr {
dec_label_pc_10005db0:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10005db3 = load i32, i32* @ecx, align 4
  %v0_10005db4 = load i32, i32* @edi, align 4
  store i32 %v0_10005db4, i32* %stack_var_-12, align 4
  %v1_10005db5 = add i32 %v0_10005db3, 12
  %v2_10005db5 = inttoptr i32 %v1_10005db5 to i32*
  %v3_10005db5 = load i32, i32* %v2_10005db5, align 4
  %v1_10005db8 = add i32 %v3_10005db5, -1
  %v10_10005db8 = icmp slt i32 %v1_10005db8, 0
  store i32 %v1_10005db8, i32* %edi.global-to-local, align 4
  br i1 %v10_10005db8, label %dec_label_pc_10005e09, label %dec_label_pc_10005dbe

dec_label_pc_10005dbe:                            ; preds = %dec_label_pc_10005db0
  %v2_10005dc2 = mul i32 %v1_10005db8, 16
  store i32 %v2_10005dc2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10005dc5

dec_label_pc_10005dc5:                            ; preds = %dec_label_pc_10005df7.dec_label_pc_10005dc5_crit_edge, %dec_label_pc_10005dbe
  %v1_10005dc7 = phi i32 [ %v1_10005df8, %dec_label_pc_10005df7.dec_label_pc_10005dc5_crit_edge ], [ %v2_10005dc2, %dec_label_pc_10005dbe ]
  %v2_10005dc5 = phi i32 [ %v2_10005dc5.pre, %dec_label_pc_10005df7.dec_label_pc_10005dc5_crit_edge ], [ %v0_10005db3, %dec_label_pc_10005dbe ]
  %v2_10005dc7 = add i32 %v2_10005dc5, %v1_10005dc7
  store i32 %v2_10005dc7, i32* %esi.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_10005dcb = add i32 %v2_10005dc7, 12
  %v3_10005dcb = inttoptr i32 %v2_10005dcb to i32*
  store i32 0, i32* %v3_10005dcb, align 4
  %v0_10005dce = load i32, i32* %esi.global-to-local, align 4
  %v1_10005dce = add i32 %v0_10005dce, 8
  %v2_10005dce = inttoptr i32 %v1_10005dce to i32*
  %v3_10005dce = load i32, i32* %v2_10005dce, align 4
  %v4_10005dce = load i32, i32* %edx.global-to-local, align 4
  %v5_10005dd1 = icmp slt i32 %v3_10005dce, %v4_10005dce
  br i1 %v5_10005dd1, label %dec_label_pc_10005df7, label %dec_label_pc_10005dd3

dec_label_pc_10005dd3:                            ; preds = %dec_label_pc_10005dc5
  %v1_10005dd3 = inttoptr i32 %v0_10005dce to i32*
  %v2_10005dd3 = load i32, i32* %v1_10005dd3, align 4
  store i32 %v2_10005dd3, i32* @eax, align 4
  %v12_10005dd5 = icmp eq i32 %v2_10005dd3, %v4_10005dce
  br i1 %v12_10005dd5, label %dec_label_pc_10005df4, label %dec_label_pc_10005dd9

dec_label_pc_10005dd9:                            ; preds = %dec_label_pc_10005dd3
  %v0_10005dd9 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005dd9, i32* @ecx, align 4
  %v1_10005ddf = inttoptr i32 %v0_10005dd9 to i32*
  %v2_10005ddf = load i32, i32* %v1_10005ddf, align 4
  store i32 %v2_10005ddf, i32* @ecx, align 4
  %v1_10005de1 = inttoptr i32 %v2_10005ddf to i32*
  %v2_10005de1 = load i32, i32* %v1_10005de1, align 4
  store i32 %v2_10005de1, i32* %edx.global-to-local, align 4
  %v1_10005de3 = load i32, i32* @esp, align 4
  %v2_10005de3 = add i32 %v1_10005de3, -4
  %v3_10005de3 = inttoptr i32 %v2_10005de3 to i32*
  store i32 %v2_10005dd3, i32* %v3_10005de3, align 4
  %v0_10005de4 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005de4 = add i32 %v0_10005de4, 20
  %v2_10005de4 = inttoptr i32 %v1_10005de4 to i32*
  %v3_10005de4 = load i32, i32* %v2_10005de4, align 4
  store i32 %v3_10005de4, i32* @eax, align 4
  store i32 %v0_10005db3, i32* @ecx, align 4
  %v0_10005dec = load i32, i32* %esi.global-to-local, align 4
  %v1_10005dec = inttoptr i32 %v0_10005dec to i32*
  store i32 0, i32* %v1_10005dec, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_10005df4.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10005df4

dec_label_pc_10005df4:                            ; preds = %dec_label_pc_10005dd9, %dec_label_pc_10005dd3
  %v1_10005df4 = phi i32 [ %v1_10005df4.pre, %dec_label_pc_10005dd9 ], [ %v0_10005dce, %dec_label_pc_10005dd3 ]
  %v0_10005df4 = phi i32 [ 0, %dec_label_pc_10005dd9 ], [ %v4_10005dce, %dec_label_pc_10005dd3 ]
  %v2_10005df4 = add i32 %v1_10005df4, 4
  %v3_10005df4 = inttoptr i32 %v2_10005df4 to i32*
  store i32 %v0_10005df4, i32* %v3_10005df4, align 4
  %v1_10005dfb.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10005df7

dec_label_pc_10005df7:                            ; preds = %dec_label_pc_10005df4, %dec_label_pc_10005dc5
  %v0_10005e01 = phi i32 [ %v1_10005dfb.pre, %dec_label_pc_10005df4 ], [ %v4_10005dce, %dec_label_pc_10005dc5 ]
  %v0_10005df7 = load i32, i32* %edi.global-to-local, align 4
  %v1_10005df7 = add i32 %v0_10005df7, -1
  store i32 %v1_10005df7, i32* %edi.global-to-local, align 4
  %v0_10005df8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10005df8 = add i32 %v0_10005df8, -16
  store i32 %v1_10005df8, i32* %ebx.global-to-local, align 4
  %v5_10005dfd = icmp slt i32 %v1_10005df7, %v0_10005e01
  br i1 %v5_10005dfd, label %dec_label_pc_10005dff, label %dec_label_pc_10005df7.dec_label_pc_10005dc5_crit_edge

dec_label_pc_10005df7.dec_label_pc_10005dc5_crit_edge: ; preds = %dec_label_pc_10005df7
  %v2_10005dc5.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10005dc5

dec_label_pc_10005dff:                            ; preds = %dec_label_pc_10005df7
  %v0_10005dff = load i32, i32* @esp, align 4
  %v1_10005dff = inttoptr i32 %v0_10005dff to i32*
  %v2_10005dff = load i32, i32* %v1_10005dff, align 4
  store i32 %v2_10005dff, i32* @esi, align 4
  %v3_10005dff = add i32 %v0_10005dff, 4
  %v1_10005e00 = inttoptr i32 %v3_10005dff to i32*
  %v2_10005e00 = load i32, i32* %v1_10005e00, align 4
  store i32 %v2_10005e00, i32* @ebx, align 4
  %v1_10005e01 = load i32, i32* @ecx, align 4
  %v2_10005e01 = add i32 %v1_10005e01, 12
  %v3_10005e01 = inttoptr i32 %v2_10005e01 to i32*
  store i32 %v0_10005e01, i32* %v3_10005e01, align 4
  %v0_10005e04 = load i32, i32* @esp, align 4
  %v1_10005e04 = inttoptr i32 %v0_10005e04 to i32*
  %v2_10005e04 = load i32, i32* %v1_10005e04, align 4
  store i32 %v2_10005e04, i32* @edi, align 4
  %v0_10005e08 = load i32, i32* @eax, align 4
  ret i32 %v0_10005e08

dec_label_pc_10005e09:                            ; preds = %dec_label_pc_10005db0
  store i32 0, i32* %v2_10005db5, align 4
  %v2_10005e10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10005e10, i32* @edi, align 4
  %v0_10005e14 = load i32, i32* @eax, align 4
  ret i32 %v0_10005e14
}

define i32 @function_10005e20(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10005e20:
  %ebx.global-to-local = alloca i32, align 4
  %v0_10005e20 = load i32, i32* @ebp, align 4
  %v0_10005e23 = load i32, i32* @ebx, align 4
  %v0_10005e24 = load i32, i32* @esi, align 4
  %v0_10005e25 = load i32, i32* @ecx, align 4
  store i32 %v0_10005e25, i32* @esi, align 4
  %v1_10005e27 = add i32 %v0_10005e25, 12
  %v2_10005e27 = inttoptr i32 %v1_10005e27 to i32*
  %v3_10005e27 = load i32, i32* %v2_10005e27, align 4
  %v1_10005e2a = add i32 %v0_10005e25, 4
  %v2_10005e2a = inttoptr i32 %v1_10005e2a to i32*
  %v3_10005e2a = load i32, i32* %v2_10005e2a, align 4
  store i32 %v3_10005e2a, i32* @ecx, align 4
  %v1_10005e2d = add i32 %v3_10005e27, 1
  store i32 %v1_10005e2d, i32* @edx, align 4
  %v7_10005e33 = icmp sgt i32 %v1_10005e2d, %v3_10005e2a
  br i1 %v7_10005e33, label %dec_label_pc_10005e35, label %dec_label_pc_10005e40

dec_label_pc_10005e35:                            ; preds = %dec_label_pc_10005e20
  %v0_10005e30 = load i32, i32* @edi, align 4
  %v2_10005e35 = sub i32 %v3_10005e27, %v3_10005e2a
  %v1_10005e37 = add i32 %v2_10005e35, 1
  store i32 %v1_10005e37, i32* @eax, align 4
  store i32 %v0_10005e25, i32* @ecx, align 4
  %v5_10005e3b = call i32 @function_10002bd0(i32 %v1_10005e37, i32 %v0_10005e30, i32 %v0_10005e24, i32 %v0_10005e23, i32 %v0_10005e20)
  %v0_10005e40.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10005e40

dec_label_pc_10005e40:                            ; preds = %dec_label_pc_10005e20, %dec_label_pc_10005e35
  %v18_10005e40 = phi i32 [ %v0_10005e25, %dec_label_pc_10005e20 ], [ %v0_10005e40.pre, %dec_label_pc_10005e35 ]
  %v1_10005e40 = add i32 %v18_10005e40, 12
  %v2_10005e40 = inttoptr i32 %v1_10005e40 to i32*
  %v3_10005e40 = load i32, i32* %v2_10005e40, align 4
  %v4_10005e40 = add i32 %v3_10005e40, 1
  store i32 %v4_10005e40, i32* %v2_10005e40, align 4
  %v0_10005e43 = load i32, i32* @esi, align 4
  %v1_10005e43 = add i32 %v0_10005e43, 12
  %v2_10005e43 = inttoptr i32 %v1_10005e43 to i32*
  %v3_10005e43 = load i32, i32* %v2_10005e43, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_10005e4b = sub i32 %v3_10005e43, %arg1
  %v1_10005e4d = add i32 %v2_10005e4b, -1
  %v0_10005e4e = load i32, i32* @ecx, align 4
  %v2_10005e4e = add i32 %v0_10005e43, 16
  %v3_10005e4e = inttoptr i32 %v2_10005e4e to i32*
  store i32 %v0_10005e4e, i32* %v3_10005e4e, align 4
  %tmp14 = icmp slt i32 %v1_10005e4d, 1
  br i1 %tmp14, label %dec_label_pc_10005e6d, label %dec_label_pc_10005e55

dec_label_pc_10005e55:                            ; preds = %dec_label_pc_10005e40
  %v0_10005e55 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10005e57 = mul i32 %v0_10005e55, 32
  store i32 %v2_10005e57, i32* @edx, align 4
  %v2_10005e5a = mul i32 %v1_10005e4d, 32
  %v0_10005e5d = load i32, i32* @ecx, align 4
  %v2_10005e5d = add i32 %v0_10005e5d, %v2_10005e57
  store i32 %v2_10005e5d, i32* @ecx, align 4
  %v1_10005e5f = load i32, i32* @esp, align 4
  %v2_10005e5f = add i32 %v1_10005e5f, -4
  %v3_10005e5f = inttoptr i32 %v2_10005e5f to i32*
  store i32 %v2_10005e5a, i32* %v3_10005e5f, align 4
  %v0_10005e60 = load i32, i32* @ecx, align 4
  %v2_10005e60 = add i32 %v1_10005e5f, -8
  %v3_10005e60 = inttoptr i32 %v2_10005e60 to i32*
  store i32 %v0_10005e60, i32* %v3_10005e60, align 4
  %v0_10005e61 = load i32, i32* @ecx, align 4
  %v1_10005e61 = add i32 %v0_10005e61, 32
  store i32 %v1_10005e61, i32* @ecx, align 4
  %v2_10005e64 = add i32 %v1_10005e5f, -12
  %v3_10005e64 = inttoptr i32 %v2_10005e64 to i32*
  store i32 %v1_10005e61, i32* %v3_10005e64, align 4
  %v1_10005e65 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_10005e6d

dec_label_pc_10005e6d:                            ; preds = %dec_label_pc_10005e55, %dec_label_pc_10005e40
  %v0_10005e6d = load i32, i32* %ebx.global-to-local, align 4
  %v2_10005e6f = mul i32 %v0_10005e6d, 32
  %v3_10005e72 = load i32, i32* @ecx, align 4
  %v4_10005e72 = add i32 %v3_10005e72, %v2_10005e6f
  %v14_10005e72 = icmp eq i32 %v4_10005e72, 0
  store i32 %v4_10005e72, i32* @edi, align 4
  br i1 %v14_10005e72, label %dec_label_pc_10005e8d, label %dec_label_pc_10005e76

dec_label_pc_10005e76:                            ; preds = %dec_label_pc_10005e6d
  store i32 %arg2, i32* @esi, align 4
  %v1_10005e79 = load i32, i32* @esp, align 4
  %v2_10005e79 = add i32 %v1_10005e79, -4
  %v3_10005e79 = inttoptr i32 %v2_10005e79 to i32*
  store i32 %arg2, i32* %v3_10005e79, align 4
  %v0_10005e7a = load i32, i32* @edi, align 4
  store i32 %v0_10005e7a, i32* @ecx, align 4
  %v1_10005e7c = call i32 @function_1000d190(i32 ptrtoint (i32* @5 to i32))
  %v0_10005e81 = load i32, i32* @esi, align 4
  %v1_10005e81 = add i32 %v0_10005e81, 16
  store i32 %v1_10005e81, i32* @esi, align 4
  %v1_10005e84 = load i32, i32* @esp, align 4
  %v2_10005e84 = add i32 %v1_10005e84, -4
  %v3_10005e84 = inttoptr i32 %v2_10005e84 to i32*
  store i32 %v1_10005e81, i32* %v3_10005e84, align 4
  %v0_10005e85 = load i32, i32* @edi, align 4
  %v1_10005e85 = add i32 %v0_10005e85, 16
  store i32 %v1_10005e85, i32* @ecx, align 4
  %v1_10005e88 = call i32 @function_1000d190(i32 ptrtoint (i32* @5 to i32))
  %v0_10005e8f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10005e8d

dec_label_pc_10005e8d:                            ; preds = %dec_label_pc_10005e76, %dec_label_pc_10005e6d
  %v0_10005e8f = phi i32 [ %v0_10005e8f.pre, %dec_label_pc_10005e76 ], [ %v0_10005e6d, %dec_label_pc_10005e6d ]
  %v0_10005e8d = load i32, i32* @esp, align 4
  %v3_10005e8e = add i32 %v0_10005e8d, 8
  %v1_10005e91 = inttoptr i32 %v3_10005e8e to i32*
  %v2_10005e91 = load i32, i32* %v1_10005e91, align 4
  store i32 %v2_10005e91, i32* @ebx, align 4
  %v3_10005e91 = add i32 %v0_10005e8d, 12
  %v1_10005e92 = inttoptr i32 %v3_10005e91 to i32*
  %v2_10005e92 = load i32, i32* %v1_10005e92, align 4
  store i32 %v2_10005e92, i32* @ebp, align 4
  ret i32 %v0_10005e8f
}

define i32 @function_10005ea0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10005ea0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_10005ea6 = load i32, i32* @ebx, align 4
  store i32 %v0_10005ea6, i32* %stack_var_-16, align 4
  %v0_10005ea7 = load i32, i32* @ecx, align 4
  %v1_10005ea7 = add i32 %v0_10005ea7, 12
  %v2_10005ea7 = inttoptr i32 %v1_10005ea7 to i32*
  %v3_10005ea7 = load i32, i32* %v2_10005ea7, align 4
  %v1_10005eaa = add i32 %v3_10005ea7, -1
  %v10_10005eaa = icmp slt i32 %v1_10005eaa, 0
  store i32 %v1_10005eaa, i32* %ebx.global-to-local, align 4
  br i1 %v10_10005eaa, label %dec_label_pc_10005f2a, label %dec_label_pc_10005eb0

dec_label_pc_10005eb0:                            ; preds = %dec_label_pc_10005ea0
  %v2_10005eb3 = mul i32 %v1_10005eaa, 32
  store i32 %v2_10005eb3, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10005ec0

dec_label_pc_10005ec0:                            ; preds = %dec_label_pc_10005f12.dec_label_pc_10005ec0_crit_edge, %dec_label_pc_10005eb0
  %stack_var_-12.0 = phi i32 [ %v2_10005eb3, %dec_label_pc_10005eb0 ], [ %v1_10005f16, %dec_label_pc_10005f12.dec_label_pc_10005ec0_crit_edge ]
  %v0_10005ec4 = phi i32 [ 0, %dec_label_pc_10005eb0 ], [ %v0_10005f20, %dec_label_pc_10005f12.dec_label_pc_10005ec0_crit_edge ]
  %v0_10005ec0 = phi i32 [ %v0_10005ea7, %dec_label_pc_10005eb0 ], [ %v0_10005ec0.pre, %dec_label_pc_10005f12.dec_label_pc_10005ec0_crit_edge ]
  %v1_10005ec0 = inttoptr i32 %v0_10005ec0 to i32*
  %v2_10005ec0 = load i32, i32* %v1_10005ec0, align 4
  %v2_10005ec2 = add i32 %v2_10005ec0, %stack_var_-12.0
  store i32 %v2_10005ec2, i32* %esi.global-to-local, align 4
  %v2_10005ec4 = add i32 %v2_10005ec2, 28
  %v3_10005ec4 = inttoptr i32 %v2_10005ec4 to i32*
  store i32 %v0_10005ec4, i32* %v3_10005ec4, align 4
  %v0_10005ec7 = load i32, i32* %esi.global-to-local, align 4
  %v1_10005ec7 = add i32 %v0_10005ec7, 24
  %v2_10005ec7 = inttoptr i32 %v1_10005ec7 to i32*
  %v3_10005ec7 = load i32, i32* %v2_10005ec7, align 4
  %v4_10005ec7 = load i32, i32* %edi.global-to-local, align 4
  %v5_10005eca = icmp slt i32 %v3_10005ec7, %v4_10005ec7
  br i1 %v5_10005eca, label %dec_label_pc_10005eec, label %dec_label_pc_10005ecc

dec_label_pc_10005ecc:                            ; preds = %dec_label_pc_10005ec0
  %v1_10005ecc = add i32 %v0_10005ec7, 16
  %v2_10005ecc = inttoptr i32 %v1_10005ecc to i32*
  %v3_10005ecc = load i32, i32* %v2_10005ecc, align 4
  store i32 %v3_10005ecc, i32* %eax.global-to-local, align 4
  %v12_10005ecf = icmp eq i32 %v3_10005ecc, %v4_10005ec7
  br i1 %v12_10005ecf, label %dec_label_pc_10005ee9, label %dec_label_pc_10005ed3

dec_label_pc_10005ed3:                            ; preds = %dec_label_pc_10005ecc
  %v0_10005ed3 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005ed3, i32* @ecx, align 4
  %v1_10005ed9 = inttoptr i32 %v0_10005ed3 to i32*
  %v2_10005ed9 = load i32, i32* %v1_10005ed9, align 4
  store i32 %v2_10005ed9, i32* @ecx, align 4
  %v1_10005edb = inttoptr i32 %v2_10005ed9 to i32*
  %v2_10005edb = load i32, i32* %v1_10005edb, align 4
  store i32 %v2_10005edb, i32* %edx.global-to-local, align 4
  %v1_10005edd = load i32, i32* @esp, align 4
  %v2_10005edd = add i32 %v1_10005edd, -4
  %v3_10005edd = inttoptr i32 %v2_10005edd to i32*
  store i32 %v3_10005ecc, i32* %v3_10005edd, align 4
  %v0_10005ede = load i32, i32* %edx.global-to-local, align 4
  %v1_10005ede = add i32 %v0_10005ede, 20
  %v2_10005ede = inttoptr i32 %v1_10005ede to i32*
  %v3_10005ede = load i32, i32* %v2_10005ede, align 4
  store i32 %v3_10005ede, i32* %eax.global-to-local, align 4
  store i32 %v0_10005ea7, i32* @ecx, align 4
  %v0_10005ee6 = load i32, i32* %edi.global-to-local, align 4
  %v1_10005ee6 = load i32, i32* %esi.global-to-local, align 4
  %v2_10005ee6 = add i32 %v1_10005ee6, 16
  %v3_10005ee6 = inttoptr i32 %v2_10005ee6 to i32*
  store i32 %v0_10005ee6, i32* %v3_10005ee6, align 4
  %v0_10005ee9.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10005ee9.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10005ee9

dec_label_pc_10005ee9:                            ; preds = %dec_label_pc_10005ed3, %dec_label_pc_10005ecc
  %v1_10005ee9 = phi i32 [ %v1_10005ee9.pre, %dec_label_pc_10005ed3 ], [ %v0_10005ec7, %dec_label_pc_10005ecc ]
  %v0_10005ee9 = phi i32 [ %v0_10005ee9.pre, %dec_label_pc_10005ed3 ], [ %v4_10005ec7, %dec_label_pc_10005ecc ]
  %v2_10005ee9 = add i32 %v1_10005ee9, 20
  %v3_10005ee9 = inttoptr i32 %v2_10005ee9 to i32*
  store i32 %v0_10005ee9, i32* %v3_10005ee9, align 4
  %v0_10005eec.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10005eec.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10005eec

dec_label_pc_10005eec:                            ; preds = %dec_label_pc_10005ee9, %dec_label_pc_10005ec0
  %v1_10005eec = phi i32 [ %v1_10005eec.pre, %dec_label_pc_10005ee9 ], [ %v0_10005ec7, %dec_label_pc_10005ec0 ]
  %v0_10005eec = phi i32 [ %v0_10005eec.pre, %dec_label_pc_10005ee9 ], [ %v4_10005ec7, %dec_label_pc_10005ec0 ]
  %v2_10005eec = add i32 %v1_10005eec, 12
  %v3_10005eec = inttoptr i32 %v2_10005eec to i32*
  store i32 %v0_10005eec, i32* %v3_10005eec, align 4
  %v0_10005eef = load i32, i32* %esi.global-to-local, align 4
  %v1_10005eef = add i32 %v0_10005eef, 8
  %v2_10005eef = inttoptr i32 %v1_10005eef to i32*
  %v3_10005eef = load i32, i32* %v2_10005eef, align 4
  %v4_10005eef = load i32, i32* %edi.global-to-local, align 4
  %v5_10005ef2 = icmp slt i32 %v3_10005eef, %v4_10005eef
  br i1 %v5_10005ef2, label %dec_label_pc_10005f12, label %dec_label_pc_10005ef4

dec_label_pc_10005ef4:                            ; preds = %dec_label_pc_10005eec
  %v1_10005ef4 = inttoptr i32 %v0_10005eef to i32*
  %v2_10005ef4 = load i32, i32* %v1_10005ef4, align 4
  store i32 %v2_10005ef4, i32* %eax.global-to-local, align 4
  %v12_10005ef6 = icmp eq i32 %v2_10005ef4, %v4_10005eef
  br i1 %v12_10005ef6, label %dec_label_pc_10005f0f, label %dec_label_pc_10005efa

dec_label_pc_10005efa:                            ; preds = %dec_label_pc_10005ef4
  %v0_10005efa = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005efa, i32* @ecx, align 4
  %v1_10005f00 = inttoptr i32 %v0_10005efa to i32*
  %v2_10005f00 = load i32, i32* %v1_10005f00, align 4
  store i32 %v2_10005f00, i32* @ecx, align 4
  %v1_10005f02 = inttoptr i32 %v2_10005f00 to i32*
  %v2_10005f02 = load i32, i32* %v1_10005f02, align 4
  store i32 %v2_10005f02, i32* %edx.global-to-local, align 4
  %v1_10005f04 = load i32, i32* @esp, align 4
  %v2_10005f04 = add i32 %v1_10005f04, -4
  %v3_10005f04 = inttoptr i32 %v2_10005f04 to i32*
  store i32 %v2_10005ef4, i32* %v3_10005f04, align 4
  %v0_10005f05 = load i32, i32* %edx.global-to-local, align 4
  %v1_10005f05 = add i32 %v0_10005f05, 20
  %v2_10005f05 = inttoptr i32 %v1_10005f05 to i32*
  %v3_10005f05 = load i32, i32* %v2_10005f05, align 4
  store i32 %v3_10005f05, i32* %eax.global-to-local, align 4
  store i32 %v0_10005ea7, i32* @ecx, align 4
  %v0_10005f0d = load i32, i32* %edi.global-to-local, align 4
  %v1_10005f0d = load i32, i32* %esi.global-to-local, align 4
  %v2_10005f0d = inttoptr i32 %v1_10005f0d to i32*
  store i32 %v0_10005f0d, i32* %v2_10005f0d, align 4
  %v0_10005f0f.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10005f0f.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10005f0f

dec_label_pc_10005f0f:                            ; preds = %dec_label_pc_10005efa, %dec_label_pc_10005ef4
  %v1_10005f0f = phi i32 [ %v1_10005f0f.pre, %dec_label_pc_10005efa ], [ %v0_10005eef, %dec_label_pc_10005ef4 ]
  %v0_10005f0f = phi i32 [ %v0_10005f0f.pre, %dec_label_pc_10005efa ], [ %v4_10005eef, %dec_label_pc_10005ef4 ]
  %v2_10005f0f = add i32 %v1_10005f0f, 4
  %v3_10005f0f = inttoptr i32 %v2_10005f0f to i32*
  store i32 %v0_10005f0f, i32* %v3_10005f0f, align 4
  %v1_10005f1c.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10005f12

dec_label_pc_10005f12:                            ; preds = %dec_label_pc_10005f0f, %dec_label_pc_10005eec
  %v0_10005f20 = phi i32 [ %v1_10005f1c.pre, %dec_label_pc_10005f0f ], [ %v4_10005eef, %dec_label_pc_10005eec ]
  %v0_10005f15 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10005f15 = add i32 %v0_10005f15, -1
  store i32 %v1_10005f15, i32* %ebx.global-to-local, align 4
  %v1_10005f16 = add i32 %stack_var_-12.0, -32
  store i32 %v1_10005f16, i32* %eax.global-to-local, align 4
  %v5_10005f1e = icmp slt i32 %v1_10005f15, %v0_10005f20
  br i1 %v5_10005f1e, label %dec_label_pc_10005f20, label %dec_label_pc_10005f12.dec_label_pc_10005ec0_crit_edge

dec_label_pc_10005f12.dec_label_pc_10005ec0_crit_edge: ; preds = %dec_label_pc_10005f12
  %v0_10005ec0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10005ec0

dec_label_pc_10005f20:                            ; preds = %dec_label_pc_10005f12
  %v1_10005f20 = load i32, i32* @ecx, align 4
  %v2_10005f20 = add i32 %v1_10005f20, 12
  %v3_10005f20 = inttoptr i32 %v2_10005f20 to i32*
  store i32 %v0_10005f20, i32* %v3_10005f20, align 4
  %v0_10005f23 = load i32, i32* @esp, align 4
  %v1_10005f23 = inttoptr i32 %v0_10005f23 to i32*
  %v2_10005f23 = load i32, i32* %v1_10005f23, align 4
  store i32 %v2_10005f23, i32* %edi.global-to-local, align 4
  %v3_10005f23 = add i32 %v0_10005f23, 4
  %v1_10005f24 = inttoptr i32 %v3_10005f23 to i32*
  %v2_10005f24 = load i32, i32* %v1_10005f24, align 4
  store i32 %v2_10005f24, i32* @esi, align 4
  %v3_10005f24 = add i32 %v0_10005f23, 8
  %v1_10005f25 = inttoptr i32 %v3_10005f24 to i32*
  %v2_10005f25 = load i32, i32* %v1_10005f25, align 4
  store i32 %v2_10005f25, i32* %ebx.global-to-local, align 4
  %v0_10005f29 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10005f29

dec_label_pc_10005f2a:                            ; preds = %dec_label_pc_10005ea0
  store i32 0, i32* %v2_10005ea7, align 4
  %v2_10005f31 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10005f31, i32* %ebx.global-to-local, align 4
  %v0_10005f35 = load i32, i32* @eax, align 4
  ret i32 %v0_10005f35
}

define i32 @function_10005f40() local_unnamed_addr {
dec_label_pc_10005f40:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10005f40 = load i32, i32* @esi, align 4
  store i32 %v0_10005f40, i32* %stack_var_-4, align 4
  %v0_10005f41 = load i32, i32* @ecx, align 4
  store i32 %v0_10005f41, i32* @esi, align 4
  %v0_10005f43 = call i32 @function_10005db0()
  store i32 %v0_10005f43, i32* %eax.global-to-local, align 4
  %v0_10005f48 = load i32, i32* @esi, align 4
  %v1_10005f48 = add i32 %v0_10005f48, 8
  %v2_10005f48 = inttoptr i32 %v1_10005f48 to i32*
  %v3_10005f48 = load i32, i32* %v2_10005f48, align 4
  %v11_10005f48 = icmp slt i32 %v3_10005f48, 0
  %v2_10005f4c = icmp eq i1 %v11_10005f48, false
  %v2_10005f4e = load i32, i32* @ecx, align 4
  br i1 %v2_10005f4c, label %dec_label_pc_10005f4e, label %dec_label_pc_10005f78

dec_label_pc_10005f4e:                            ; preds = %dec_label_pc_10005f40
  store i32 %v2_10005f4e, i32* %eax.global-to-local, align 4
  %v1_10005f50 = icmp eq i32 %v2_10005f4e, 0
  br i1 %v1_10005f50, label %dec_label_pc_10005f6a, label %dec_label_pc_10005f54

dec_label_pc_10005f54:                            ; preds = %dec_label_pc_10005f4e
  %v0_10005f54 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10005f54, i32* @ecx, align 4
  %v1_10005f5a = inttoptr i32 %v0_10005f54 to i32*
  %v2_10005f5a = load i32, i32* %v1_10005f5a, align 4
  store i32 %v2_10005f5a, i32* @ecx, align 4
  %v1_10005f5c = inttoptr i32 %v2_10005f5a to i32*
  %v2_10005f5c = load i32, i32* %v1_10005f5c, align 4
  %v1_10005f5f = add i32 %v2_10005f5c, 20
  %v2_10005f5f = inttoptr i32 %v1_10005f5f to i32*
  %v3_10005f5f = load i32, i32* %v2_10005f5f, align 4
  store i32 %v3_10005f5f, i32* %eax.global-to-local, align 4
  %v1_10005f64 = inttoptr i32 %v0_10005f48 to i32*
  store i32 0, i32* %v1_10005f64, align 4
  %v0_10005f6c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10005f6a

dec_label_pc_10005f6a:                            ; preds = %dec_label_pc_10005f54, %dec_label_pc_10005f4e
  %v0_10005f6c = phi i32 [ %v0_10005f6c.pre, %dec_label_pc_10005f54 ], [ %v0_10005f48, %dec_label_pc_10005f4e ]
  %v1_10005f6c = add i32 %v0_10005f6c, 4
  %v2_10005f6c = inttoptr i32 %v1_10005f6c to i32*
  store i32 0, i32* %v2_10005f6c, align 4
  %v0_10005f73 = load i32, i32* @ecx, align 4
  %v1_10005f73 = load i32, i32* @esi, align 4
  %v2_10005f73 = add i32 %v1_10005f73, 16
  %v3_10005f73 = inttoptr i32 %v2_10005f73 to i32*
  store i32 %v0_10005f73, i32* %v3_10005f73, align 4
  %v0_10005f76 = load i32, i32* @esp, align 4
  %v1_10005f76 = inttoptr i32 %v0_10005f76 to i32*
  %v2_10005f76 = load i32, i32* %v1_10005f76, align 4
  store i32 %v2_10005f76, i32* @esi, align 4
  %v0_10005f77 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10005f77

dec_label_pc_10005f78:                            ; preds = %dec_label_pc_10005f40
  %v2_10005f7a = add i32 %v0_10005f48, 16
  %v3_10005f7a = inttoptr i32 %v2_10005f7a to i32*
  store i32 %v2_10005f4e, i32* %v3_10005f7a, align 4
  %v2_10005f7d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10005f7d, i32* @esi, align 4
  %v0_10005f7e = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10005f7e
}

define i32 @function_10005f80(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10005f80:
  %edx.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-924 = alloca i32, align 4
  %stack_var_-336 = alloca i8, align 1
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-860 = alloca i32, align 4
  %v16_10005f83 = ptrtoint i32* %stack_var_-860 to i32
  %v2_10005f90 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_10005f90, i32* @ecx, align 4
  %v3_10005f93 = call i32 @function_1000c7c0(i32 0, i32 0, i32 1)
  %v0_10005f98 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10005f98, i32* @ecx, align 4
  %v1_10005f9e = add i32 %v0_10005f98, 4
  %v2_10005f9e = inttoptr i32 %v1_10005f9e to i32*
  %v3_10005f9e = load i32, i32* %v2_10005f9e, align 4
  %v1_10005fa1 = add i32 %v3_10005f9e, 56
  %v2_10005fa1 = inttoptr i32 %v1_10005fa1 to i32*
  %v3_10005fa1 = load i32, i32* %v2_10005fa1, align 4
  store i32 %v3_10005fa1, i32* @eax, align 4
  %v0_10005fa4 = load i32, i32* @ebx, align 4
  store i32 %v1_10005f9e, i32* @ecx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v4_10005fb8 = trunc i32 %v3_10005fa1 to i8
  %v5_10005fb8 = icmp eq i8 %v4_10005fb8, 0
  br i1 %v5_10005fb8, label %dec_label_pc_1000613a, label %dec_label_pc_10005fc0

dec_label_pc_10005fc0:                            ; preds = %dec_label_pc_10005f80
  %v2_10005fc0 = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_10005fc0, i32* @ecx, align 4
  %v11_10005fcc = call i32 @function_1000de70(i32* nonnull %stack_var_-592, i32* nonnull @global_var_10022600.47, i32 %arg2, i32 %arg3, i32* nonnull %stack_var_-76, i32 %v0_10005fa4, i32 %v0_10005fa4, i32 %v0_10005fa4)
  %v2_10005fdb = ptrtoint i8* %stack_var_-336 to i32
  store i32 %v2_10005fdb, i32* @edx, align 4
  store i32 %v2_10005fc0, i32* @eax, align 4
  store i32 %v2_10005f90, i32* @ecx, align 4
  %v3_10005fec = bitcast i8* %stack_var_-336 to i32*
  %v7_10005fec = call i32 @function_1000cdc0(i32* nonnull %stack_var_-592, i32* %v3_10005fec, i32 260, i32 1, i32 ptrtoint (i32* @5 to i32))
  %tmp46 = icmp slt i32 %v7_10005fec, 1
  br i1 %tmp46, label %dec_label_pc_1000613a, label %dec_label_pc_10005ff9

dec_label_pc_10005ff9:                            ; preds = %dec_label_pc_10005fc0
  store i32 %tmp, i32* @esi, align 4
  %v0_10005ffd = load i32, i32* @edi, align 4
  store i32 %v0_10005ffd, i32* %stack_var_-924, align 4
  %v4_10005ffd = ptrtoint i32* %stack_var_-924 to i32
  %v2_1000601d = ptrtoint i32* %stack_var_-28 to i32
  %v2_10006071 = ptrtoint i32* %stack_var_-5 to i32
  %v2_10006075 = ptrtoint i32* %stack_var_-12 to i32
  br label %dec_label_pc_10006000

dec_label_pc_10006000:                            ; preds = %dec_label_pc_10006113, %dec_label_pc_10005ff9
  %v1_10006006 = phi i32 [ %v4_10005ffd, %dec_label_pc_10005ff9 ], [ %v1_10006006.pre, %dec_label_pc_10006113 ]
  store i32 %v2_10005fdb, i32* @ecx, align 4
  %v2_10006006 = add i32 %v1_10006006, -4
  %v3_10006006 = inttoptr i32 %v2_10006006 to i32*
  store i32 %v2_10005fdb, i32* %v3_10006006, align 4
  %v1_10006007 = call i8* @__strlwr(i8* bitcast (i32* @5 to i8*))
  store i32 %v2_10005fdb, i32* @edx, align 4
  %v0_10006012 = load i32, i32* @esp, align 4
  %v1_10006012 = add i32 %v0_10006012, -4
  %v2_10006012 = inttoptr i32 %v1_10006012 to i32*
  store i32 92, i32* %v2_10006012, align 4
  %v2_10006014 = add i32 %v0_10006012, -8
  %v3_10006014 = inttoptr i32 %v2_10006014 to i32*
  store i32 %v2_10005fdb, i32* %v3_10006014, align 4
  %v2_10006015 = call i32 @function_10009740(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000601d, i32* @ecx, align 4
  %v0_10006020 = call i32 @function_1000d140()
  %v3_10006025 = load i8, i8* %stack_var_-336, align 1
  %v15_10006025 = icmp eq i8 %v3_10006025, 34
  %v1_1000602c = icmp eq i1 %v15_10006025, false
  br i1 %v1_1000602c, label %dec_label_pc_10006036, label %dec_label_pc_10006000.dec_label_pc_10006054_crit_edge

dec_label_pc_10006000.dec_label_pc_10006054_crit_edge: ; preds = %dec_label_pc_10006000
  %v1_10006054.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10006054

dec_label_pc_10006036:                            ; preds = %dec_label_pc_10006000
  store i32 %v2_10005fdb, i32* @ecx, align 4
  %v1_1000603c = load i32, i32* @esp, align 4
  %v2_1000603c = add i32 %v1_1000603c, -4
  %v3_1000603c = inttoptr i32 %v2_1000603c to i32*
  store i32 %v2_10005fdb, i32* %v3_1000603c, align 4
  store i32 %v16_10005f83, i32* %edx.global-to-local, align 4
  %v1_10006043 = add i32 %v1_1000603c, -8
  %v2_10006043 = inttoptr i32 %v1_10006043 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_10022bbc.137 to i32), i32* %v2_10006043, align 4
  %v2_10006048 = add i32 %v1_1000603c, -12
  %v3_10006048 = inttoptr i32 %v2_10006048 to i32*
  store i32 %v16_10005f83, i32* %v3_10006048, align 4
  %v1_10006049 = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v0_1000604e = load i32, i32* @esp, align 4
  %v1_1000604e = add i32 %v0_1000604e, 12
  %v1_10006051 = add i32 %v1_10006049, 5
  br label %dec_label_pc_10006054

dec_label_pc_10006054:                            ; preds = %dec_label_pc_10006000.dec_label_pc_10006054_crit_edge, %dec_label_pc_10006036
  %v1_10006054 = phi i32 [ %v1_1000604e, %dec_label_pc_10006036 ], [ %v1_10006054.pre, %dec_label_pc_10006000.dec_label_pc_10006054_crit_edge ]
  %storemerge = phi i32 [ %v1_10006051, %dec_label_pc_10006036 ], [ %v2_10005fdb, %dec_label_pc_10006000.dec_label_pc_10006054_crit_edge ]
  %v2_10006054 = add i32 %v1_10006054, -4
  %v3_10006054 = inttoptr i32 %v2_10006054 to i32*
  store i32 %storemerge, i32* %v3_10006054, align 4
  store i32 %v2_1000601d, i32* @ecx, align 4
  %v1_10006058 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  %v1_10006060 = load i32, i32* @esp, align 4
  %v2_10006060 = add i32 %v1_10006060, -4
  %v3_10006060 = inttoptr i32 %v2_10006060 to i32*
  store i32 %v2_1000601d, i32* %v3_10006060, align 4
  %v0_10006061 = load i32, i32* @esi, align 4
  store i32 %v0_10006061, i32* @ecx, align 4
  %v0_10006063 = call i32 @function_100037a0(i32* nonnull @5)
  store i32 %v0_10006063, i32* @eax, align 4
  %v10_10006068 = icmp eq i32 %v0_10006063, -1
  %v1_1000606b = icmp eq i1 %v10_10006068, false
  br i1 %v1_1000606b, label %dec_label_pc_100060ee, label %dec_label_pc_10006071

dec_label_pc_10006071:                            ; preds = %dec_label_pc_10006054
  %v1_10006074 = load i32, i32* @esp, align 4
  %v2_10006074 = add i32 %v1_10006074, -4
  %v3_10006074 = inttoptr i32 %v2_10006074 to i32*
  store i32 %v2_10006071, i32* %v3_10006074, align 4
  store i32 %v2_10006075, i32* %edx.global-to-local, align 4
  %v0_10006078 = load i32, i32* @eax, align 4
  store i32 %v0_10006078, i32* %stack_var_-12, align 4
  %v2_1000607b = add i32 %v1_10006074, -8
  %v3_1000607b = inttoptr i32 %v2_1000607b to i32*
  store i32 %v2_10006075, i32* %v3_1000607b, align 4
  %v2_1000607f = add i32 %v1_10006074, -12
  %v3_1000607f = inttoptr i32 %v2_1000607f to i32*
  store i32 %v2_1000601d, i32* %v3_1000607f, align 4
  %v0_10006080 = load i32, i32* @esi, align 4
  store i32 %v0_10006080, i32* @ecx, align 4
  %v0_10006082 = load i32, i32* @ebx, align 4
  store i32 %v0_10006082, i32* %stack_var_-5, align 4
  %v0_10006085 = load i32, i32* %stack_var_-12, align 4
  %v2_10006085 = inttoptr i32 %v0_10006082 to i32*
  %v3_10006085 = call i32 @function_10002e40(i32 %v0_10006085, i32* %v2_10006085, i32* nonnull @5)
  %v0_1000608a = load i32, i32* @esi, align 4
  store i32 %v0_1000608a, i32* @ecx, align 4
  %v0_1000608c = call i32 @function_10002f30()
  store i32 %v0_1000608c, i32* @eax, align 4
  %v0_10006091 = load i32, i32* @esi, align 4
  %v1_10006091 = add i32 %v0_10006091, 4
  %v2_10006091 = inttoptr i32 %v1_10006091 to i32*
  %v3_10006091 = load i32, i32* %v2_10006091, align 4
  %v3_10006094 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_10006094, i32* %edx.global-to-local, align 4
  %v2_10006099 = mul i32 %v0_1000608c, 32
  store i32 %v2_10006099, i32* @edi, align 4
  %v2_1000609c = add i32 %v3_10006091, %v2_10006099
  store i32 %v2_1000609c, i32* @ecx, align 4
  %v2_1000609e = add i32 %v2_1000609c, 8
  %v3_1000609e = inttoptr i32 %v2_1000609e to i32*
  store i32 %v3_10006094, i32* %v3_1000609e, align 4
  %v0_100060a1 = load i32, i32* @ecx, align 4
  %v1_100060a1 = add i32 %v0_100060a1, 4
  %v2_100060a1 = inttoptr i32 %v1_100060a1 to i32*
  store i32 -1, i32* %v2_100060a1, align 4
  %v0_100060a8 = load i32, i32* @ecx, align 4
  %v1_100060a8 = inttoptr i32 %v0_100060a8 to i32*
  store i32 -1, i32* %v1_100060a8, align 4
  %v0_100060ae = load i32, i32* @ebx, align 4
  %v1_100060ae = load i32, i32* @ecx, align 4
  %v2_100060ae = add i32 %v1_100060ae, 12
  %v3_100060ae = inttoptr i32 %v2_100060ae to i32*
  store i32 %v0_100060ae, i32* %v3_100060ae, align 4
  %v0_100060b1 = load i32, i32* %edx.global-to-local, align 4
  %v10_100060b1 = icmp eq i32 %v0_100060b1, -1
  br i1 %v10_100060b1, label %dec_label_pc_100060cc, label %dec_label_pc_100060b6

dec_label_pc_100060b6:                            ; preds = %dec_label_pc_10006071
  %v0_100060b6 = load i32, i32* @esi, align 4
  %v1_100060b6 = add i32 %v0_100060b6, 4
  %v2_100060b6 = inttoptr i32 %v1_100060b6 to i32*
  %v3_100060b6 = load i32, i32* %v2_100060b6, align 4
  store i32 %v3_100060b6, i32* @ecx, align 4
  %v2_100060b9 = mul i32 %v0_100060b1, 32
  store i32 %v2_100060b9, i32* %edx.global-to-local, align 4
  %v3_100060bc = load i32, i32* %stack_var_-5, align 4
  %v4_100060bc = trunc i32 %v3_100060bc to i8
  %v5_100060bc = load i32, i32* @ebx, align 4
  %v6_100060bc = trunc i32 %v5_100060bc to i8
  %v17_100060bc = icmp eq i8 %v4_100060bc, %v6_100060bc
  %v0_100060c6 = load i32, i32* @eax, align 4
  br i1 %v17_100060bc, label %dec_label_pc_100060c6, label %dec_label_pc_100060c1

dec_label_pc_100060c1:                            ; preds = %dec_label_pc_100060b6
  %v4_100060c1 = add i32 %v3_100060b6, %v2_100060b9
  %v5_100060c1 = inttoptr i32 %v4_100060c1 to i32*
  store i32 %v0_100060c6, i32* %v5_100060c1, align 4
  br label %dec_label_pc_100060cf

dec_label_pc_100060c6:                            ; preds = %dec_label_pc_100060b6
  %v4_100060c6 = or i32 %v2_100060b9, 4
  %v5_100060c6 = add i32 %v3_100060b6, %v4_100060c6
  %v6_100060c6 = inttoptr i32 %v5_100060c6 to i32*
  store i32 %v0_100060c6, i32* %v6_100060c6, align 4
  br label %dec_label_pc_100060cf

dec_label_pc_100060cc:                            ; preds = %dec_label_pc_10006071
  %v0_100060cc = load i32, i32* @eax, align 4
  %v1_100060cc = load i32, i32* @esi, align 4
  %v2_100060cc = add i32 %v1_100060cc, 16
  %v3_100060cc = inttoptr i32 %v2_100060cc to i32*
  store i32 %v0_100060cc, i32* %v3_100060cc, align 4
  br label %dec_label_pc_100060cf

dec_label_pc_100060cf:                            ; preds = %dec_label_pc_100060cc, %dec_label_pc_100060c6, %dec_label_pc_100060c1
  %v0_100060cf = load i32, i32* @eax, align 4
  %v1_100060cf = load i32, i32* @esp, align 4
  %v2_100060cf = add i32 %v1_100060cf, -4
  %v3_100060cf = inttoptr i32 %v2_100060cf to i32*
  store i32 %v0_100060cf, i32* %v3_100060cf, align 4
  %v0_100060d0 = load i32, i32* @esi, align 4
  store i32 %v0_100060d0, i32* @ecx, align 4
  %v1_100060d2 = call i32 @function_10003890(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100060d2, i32* @eax, align 4
  %v0_100060d7 = load i32, i32* @esi, align 4
  %v1_100060d7 = add i32 %v0_100060d7, 4
  %v2_100060d7 = inttoptr i32 %v1_100060d7 to i32*
  %v3_100060d7 = load i32, i32* %v2_100060d7, align 4
  store i32 %v3_100060d7, i32* %edx.global-to-local, align 4
  %v1_100060da = add i32 %v0_100060d7, 20
  %v2_100060da = inttoptr i32 %v1_100060da to i32*
  %v3_100060da = load i32, i32* %v2_100060da, align 4
  %v4_100060da = add i32 %v3_100060da, 1
  store i32 %v4_100060da, i32* %v2_100060da, align 4
  %v0_100060dd = load i32, i32* @edi, align 4
  %v1_100060dd = load i32, i32* %edx.global-to-local, align 4
  %v3_100060dd = add i32 %v0_100060dd, 16
  %v4_100060dd = add i32 %v3_100060dd, %v1_100060dd
  store i32 %v4_100060dd, i32* @ecx, align 4
  %v1_100060e1 = load i32, i32* @ebx, align 4
  %v12_100060e1 = icmp eq i32 %v4_100060dd, %v1_100060e1
  br i1 %v12_100060e1, label %dec_label_pc_100060ee, label %dec_label_pc_100060e5

dec_label_pc_100060e5:                            ; preds = %dec_label_pc_100060cf
  %v1_100060e8 = load i32, i32* @esp, align 4
  %v2_100060e8 = add i32 %v1_100060e8, -4
  %v3_100060e8 = inttoptr i32 %v2_100060e8 to i32*
  store i32 %v2_1000601d, i32* %v3_100060e8, align 4
  %v1_100060e9 = call i32 @function_1000d190(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100060e9, i32* @eax, align 4
  br label %dec_label_pc_100060ee

dec_label_pc_100060ee:                            ; preds = %dec_label_pc_100060e5, %dec_label_pc_100060cf, %dec_label_pc_10006054
  %v0_100060ee = load i32, i32* @ebx, align 4
  %v5_100060f4 = icmp slt i32 %tmp11, %v0_100060ee
  br i1 %v5_100060f4, label %dec_label_pc_10006113, label %dec_label_pc_100060f6

dec_label_pc_100060f6:                            ; preds = %dec_label_pc_100060ee
  %v3_100060f6 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_100060f6, i32* @eax, align 4
  %v12_100060f9 = icmp eq i32 %v3_100060f6, %v0_100060ee
  br i1 %v12_100060f9, label %dec_label_pc_10006113, label %dec_label_pc_100060fd

dec_label_pc_100060fd:                            ; preds = %dec_label_pc_100060f6
  %v0_100060fd = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100060fd, i32* @ecx, align 4
  %v1_10006103 = inttoptr i32 %v0_100060fd to i32*
  %v2_10006103 = load i32, i32* %v1_10006103, align 4
  store i32 %v2_10006103, i32* @ecx, align 4
  %v1_10006105 = inttoptr i32 %v2_10006103 to i32*
  %v2_10006105 = load i32, i32* %v1_10006105, align 4
  store i32 %v2_10006105, i32* %edx.global-to-local, align 4
  %v1_10006107 = load i32, i32* @esp, align 4
  %v2_10006107 = add i32 %v1_10006107, -4
  %v3_10006107 = inttoptr i32 %v2_10006107 to i32*
  store i32 %v3_100060f6, i32* %v3_10006107, align 4
  %v0_10006108 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006108 = add i32 %v0_10006108, 20
  %v2_10006108 = inttoptr i32 %v1_10006108 to i32*
  %v3_10006108 = load i32, i32* %v2_10006108, align 4
  store i32 %v3_10006108, i32* @eax, align 4
  %v0_1000610d = load i32, i32* @ebx, align 4
  store i32 %v0_1000610d, i32* %stack_var_-28, align 4
  br label %dec_label_pc_10006113

dec_label_pc_10006113:                            ; preds = %dec_label_pc_100060f6, %dec_label_pc_100060fd, %dec_label_pc_100060ee
  %v0_10006113 = load i32, i32* @esp, align 4
  %v1_10006113 = add i32 %v0_10006113, -4
  %v2_10006113 = inttoptr i32 %v1_10006113 to i32*
  store i32 1, i32* %v2_10006113, align 4
  %v1_10006115 = add i32 %v0_10006113, -8
  %v2_10006115 = inttoptr i32 %v1_10006115 to i32*
  store i32 260, i32* %v2_10006115, align 4
  %v2_10006120 = add i32 %v0_10006113, -12
  %v3_10006120 = inttoptr i32 %v2_10006120 to i32*
  store i32 %v2_10005fdb, i32* %v3_10006120, align 4
  store i32 %v2_10005fc0, i32* @edx, align 4
  %v2_10006127 = add i32 %v0_10006113, -16
  %v3_10006127 = inttoptr i32 %v2_10006127 to i32*
  store i32 %v2_10005fc0, i32* %v3_10006127, align 4
  store i32 %v2_10005f90, i32* @ecx, align 4
  %v1_1000612b = inttoptr i32 %v0_100060ee to i32*
  %v5_1000612b = call i32 @function_1000cdc0(i32* %v1_1000612b, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v1_10006130 = icmp eq i32 %v5_1000612b, 0
  %v2_10006130 = icmp slt i32 %v5_1000612b, 0
  %v3_10006132 = icmp eq i1 %v2_10006130, false
  %v4_10006132 = icmp eq i1 %v1_10006130, false
  %v5_10006132 = icmp eq i1 %v3_10006132, %v4_10006132
  %v1_10006006.pre = load i32, i32* @esp, align 4
  br i1 %v5_10006132, label %dec_label_pc_10006000, label %dec_label_pc_10006138

dec_label_pc_10006138:                            ; preds = %dec_label_pc_10006113
  %v1_10006138 = inttoptr i32 %v1_10006006.pre to i32*
  %v2_10006138 = load i32, i32* %v1_10006138, align 4
  store i32 %v2_10006138, i32* @edi, align 4
  %v3_10006138 = add i32 %v1_10006006.pre, 4
  %v1_10006139 = inttoptr i32 %v3_10006138 to i32*
  %v2_10006139 = load i32, i32* %v1_10006139, align 4
  store i32 %v2_10006139, i32* @esi, align 4
  br label %dec_label_pc_1000613a

dec_label_pc_1000613a:                            ; preds = %dec_label_pc_10006138, %dec_label_pc_10005fc0, %dec_label_pc_10005f80
  %v0_1000615a7 = phi i32 [ %v5_1000612b, %dec_label_pc_10006138 ], [ %v7_10005fec, %dec_label_pc_10005fc0 ], [ %v3_10005fa1, %dec_label_pc_10005f80 ]
  %v4_1000613a = load i32, i32* @ebx, align 4
  %v5_1000613d = icmp slt i32 %tmp9, %v4_1000613a
  br i1 %v5_1000613d, label %dec_label_pc_10006156, label %dec_label_pc_1000613f

dec_label_pc_1000613f:                            ; preds = %dec_label_pc_1000613a
  %v3_1000613f = load i32, i32* %stack_var_-76, align 4
  %v12_10006142 = icmp eq i32 %v3_1000613f, %v4_1000613a
  br i1 %v12_10006142, label %dec_label_pc_10006156, label %dec_label_pc_10006146

dec_label_pc_10006146:                            ; preds = %dec_label_pc_1000613f
  %v0_10006146 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006146, i32* @ecx, align 4
  %v1_1000614c = inttoptr i32 %v0_10006146 to i32*
  %v2_1000614c = load i32, i32* %v1_1000614c, align 4
  store i32 %v2_1000614c, i32* @ecx, align 4
  %v1_1000614e = inttoptr i32 %v2_1000614c to i32*
  %v2_1000614e = load i32, i32* %v1_1000614e, align 4
  store i32 %v2_1000614e, i32* %edx.global-to-local, align 4
  %v1_10006150 = load i32, i32* @esp, align 4
  %v2_10006150 = add i32 %v1_10006150, -4
  %v3_10006150 = inttoptr i32 %v2_10006150 to i32*
  store i32 %v3_1000613f, i32* %v3_10006150, align 4
  %v0_10006151 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006151 = add i32 %v0_10006151, 20
  %v2_10006151 = inttoptr i32 %v1_10006151 to i32*
  %v3_10006151 = load i32, i32* %v2_10006151, align 4
  br label %dec_label_pc_10006156

dec_label_pc_10006156:                            ; preds = %dec_label_pc_10006146, %dec_label_pc_1000613f, %dec_label_pc_1000613a
  %v0_1000615a = phi i32 [ %v3_10006151, %dec_label_pc_10006146 ], [ %v3_1000613f, %dec_label_pc_1000613f ], [ %v0_1000615a7, %dec_label_pc_1000613a ]
  %v0_10006156 = load i32, i32* @esp, align 4
  %v1_10006156 = inttoptr i32 %v0_10006156 to i32*
  %v2_10006156 = load i32, i32* %v1_10006156, align 4
  store i32 %v2_10006156, i32* @ebx, align 4
  ret i32 %v0_1000615a
}

define i32 @function_10006160(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10006160:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10006161 = load i32, i32* @ecx, align 4
  store i32 %v0_10006161, i32* @esi, align 4
  %v0_10006163 = call i32 @function_10005db0()
  store i32 %v0_10006163, i32* %eax.global-to-local, align 4
  %v0_10006168 = load i32, i32* @esi, align 4
  %v1_10006168 = add i32 %v0_10006168, 8
  %v2_10006168 = inttoptr i32 %v1_10006168 to i32*
  %v3_10006168 = load i32, i32* %v2_10006168, align 4
  %v11_10006168 = icmp slt i32 %v3_10006168, 0
  %v2_1000616c = icmp eq i1 %v11_10006168, false
  br i1 %v2_1000616c, label %dec_label_pc_1000616e, label %dec_label_pc_10006191

dec_label_pc_1000616e:                            ; preds = %dec_label_pc_10006160
  %v2_1000616e = load i32, i32* @ecx, align 4
  store i32 %v2_1000616e, i32* %eax.global-to-local, align 4
  %v1_10006170 = icmp eq i32 %v2_1000616e, 0
  br i1 %v1_10006170, label %dec_label_pc_1000618a, label %dec_label_pc_10006174

dec_label_pc_10006174:                            ; preds = %dec_label_pc_1000616e
  %v0_10006174 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006174, i32* @ecx, align 4
  %v1_1000617a = inttoptr i32 %v0_10006174 to i32*
  %v2_1000617a = load i32, i32* %v1_1000617a, align 4
  store i32 %v2_1000617a, i32* @ecx, align 4
  %v1_1000617c = inttoptr i32 %v2_1000617a to i32*
  %v2_1000617c = load i32, i32* %v1_1000617c, align 4
  store i32 %v2_1000617c, i32* %edx.global-to-local, align 4
  %v1_1000617f = add i32 %v2_1000617c, 20
  %v2_1000617f = inttoptr i32 %v1_1000617f to i32*
  %v3_1000617f = load i32, i32* %v2_1000617f, align 4
  store i32 %v3_1000617f, i32* %eax.global-to-local, align 4
  %v1_10006184 = inttoptr i32 %v0_10006168 to i32*
  store i32 0, i32* %v1_10006184, align 4
  %v0_1000618a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000618a

dec_label_pc_1000618a:                            ; preds = %dec_label_pc_10006174, %dec_label_pc_1000616e
  %v0_1000618a = phi i32 [ %v0_1000618a.pre, %dec_label_pc_10006174 ], [ %v0_10006168, %dec_label_pc_1000616e ]
  %v1_1000618a = add i32 %v0_1000618a, 4
  %v2_1000618a = inttoptr i32 %v1_1000618a to i32*
  store i32 0, i32* %v2_1000618a, align 4
  %v0_10006191.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006191

dec_label_pc_10006191:                            ; preds = %dec_label_pc_10006160, %dec_label_pc_1000618a
  %v1_10006197 = phi i32 [ %v0_10006168, %dec_label_pc_10006160 ], [ %v0_10006191.pre, %dec_label_pc_1000618a ]
  %v1_10006191 = add i32 %v1_10006197, 8
  %v2_10006191 = inttoptr i32 %v1_10006191 to i32*
  %v3_10006191 = load i32, i32* %v2_10006191, align 4
  %v11_10006191 = icmp slt i32 %v3_10006191, 0
  %v2_10006195 = load i32, i32* @ecx, align 4
  store i32 %v2_10006195, i32* %eax.global-to-local, align 4
  %v2_10006197 = add i32 %v1_10006197, 16
  %v3_10006197 = inttoptr i32 %v2_10006197 to i32*
  store i32 %v2_10006195, i32* %v3_10006197, align 4
  %v2_1000619a = icmp eq i1 %v11_10006191, false
  br i1 %v2_1000619a, label %dec_label_pc_1000619c, label %dec_label_pc_100061bd

dec_label_pc_1000619c:                            ; preds = %dec_label_pc_10006191
  %v0_1000619c = load i32, i32* %eax.global-to-local, align 4
  %v1_1000619c = icmp eq i32 %v0_1000619c, 0
  br i1 %v1_1000619c, label %dec_label_pc_100061b6, label %dec_label_pc_100061a0

dec_label_pc_100061a0:                            ; preds = %dec_label_pc_1000619c
  %v0_100061a0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100061a0, i32* @ecx, align 4
  %v1_100061a6 = inttoptr i32 %v0_100061a0 to i32*
  %v2_100061a6 = load i32, i32* %v1_100061a6, align 4
  store i32 %v2_100061a6, i32* @ecx, align 4
  %v1_100061a8 = inttoptr i32 %v2_100061a6 to i32*
  %v2_100061a8 = load i32, i32* %v1_100061a8, align 4
  store i32 %v2_100061a8, i32* %edx.global-to-local, align 4
  %v1_100061aa = load i32, i32* @esp, align 4
  %v2_100061aa = add i32 %v1_100061aa, -4
  %v3_100061aa = inttoptr i32 %v2_100061aa to i32*
  store i32 %v0_1000619c, i32* %v3_100061aa, align 4
  %v0_100061ab = load i32, i32* %edx.global-to-local, align 4
  %v1_100061ab = add i32 %v0_100061ab, 20
  %v2_100061ab = inttoptr i32 %v1_100061ab to i32*
  %v3_100061ab = load i32, i32* %v2_100061ab, align 4
  store i32 %v3_100061ab, i32* %eax.global-to-local, align 4
  %v0_100061b0 = load i32, i32* @esi, align 4
  %v1_100061b0 = inttoptr i32 %v0_100061b0 to i32*
  store i32 0, i32* %v1_100061b0, align 4
  br label %dec_label_pc_100061b6

dec_label_pc_100061b6:                            ; preds = %dec_label_pc_100061a0, %dec_label_pc_1000619c
  %v0_100061b6 = load i32, i32* @esi, align 4
  %v1_100061b6 = add i32 %v0_100061b6, 4
  %v2_100061b6 = inttoptr i32 %v1_100061b6 to i32*
  store i32 0, i32* %v2_100061b6, align 4
  br label %dec_label_pc_100061bd

dec_label_pc_100061bd:                            ; preds = %dec_label_pc_10006191, %dec_label_pc_100061b6
  %v0_100061bd = load i32, i32* @esp, align 4
  %v1_100061bd = inttoptr i32 %v0_100061bd to i32*
  %v2_100061bd = load i32, i32* %v1_100061bd, align 4
  store i32 %v2_100061bd, i32* @esi, align 4
  %v0_100061be = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100061be
}

define i32 @function_100061c0() local_unnamed_addr {
dec_label_pc_100061c0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_100061c0 = load i32, i32* @esi, align 4
  %v0_100061c1 = load i32, i32* @ecx, align 4
  store i32 %v0_100061c1, i32* @esi, align 4
  %v1_100061c3 = call i32 @function_10005ea0(i32 %v0_100061c0)
  store i32 %v1_100061c3, i32* %eax.global-to-local, align 4
  %v0_100061c8 = load i32, i32* @esi, align 4
  %v1_100061c8 = add i32 %v0_100061c8, 8
  %v2_100061c8 = inttoptr i32 %v1_100061c8 to i32*
  %v3_100061c8 = load i32, i32* %v2_100061c8, align 4
  %v11_100061c8 = icmp slt i32 %v3_100061c8, 0
  %v2_100061cc = icmp eq i1 %v11_100061c8, false
  br i1 %v2_100061cc, label %dec_label_pc_100061ce, label %dec_label_pc_100061f1

dec_label_pc_100061ce:                            ; preds = %dec_label_pc_100061c0
  %v2_100061ce = load i32, i32* @ecx, align 4
  store i32 %v2_100061ce, i32* %eax.global-to-local, align 4
  %v1_100061d0 = icmp eq i32 %v2_100061ce, 0
  br i1 %v1_100061d0, label %dec_label_pc_100061ea, label %dec_label_pc_100061d4

dec_label_pc_100061d4:                            ; preds = %dec_label_pc_100061ce
  %v0_100061d4 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100061d4, i32* @ecx, align 4
  %v1_100061da = inttoptr i32 %v0_100061d4 to i32*
  %v2_100061da = load i32, i32* %v1_100061da, align 4
  store i32 %v2_100061da, i32* @ecx, align 4
  %v1_100061dc = inttoptr i32 %v2_100061da to i32*
  %v2_100061dc = load i32, i32* %v1_100061dc, align 4
  store i32 %v2_100061dc, i32* %edx.global-to-local, align 4
  %v1_100061df = add i32 %v2_100061dc, 20
  %v2_100061df = inttoptr i32 %v1_100061df to i32*
  %v3_100061df = load i32, i32* %v2_100061df, align 4
  store i32 %v3_100061df, i32* %eax.global-to-local, align 4
  %v1_100061e4 = inttoptr i32 %v0_100061c8 to i32*
  store i32 0, i32* %v1_100061e4, align 4
  %v0_100061ea.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100061ea

dec_label_pc_100061ea:                            ; preds = %dec_label_pc_100061d4, %dec_label_pc_100061ce
  %v0_100061ea = phi i32 [ %v0_100061ea.pre, %dec_label_pc_100061d4 ], [ %v0_100061c8, %dec_label_pc_100061ce ]
  %v1_100061ea = add i32 %v0_100061ea, 4
  %v2_100061ea = inttoptr i32 %v1_100061ea to i32*
  store i32 0, i32* %v2_100061ea, align 4
  %v0_100061f1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100061f1

dec_label_pc_100061f1:                            ; preds = %dec_label_pc_100061c0, %dec_label_pc_100061ea
  %v1_100061f7 = phi i32 [ %v0_100061c8, %dec_label_pc_100061c0 ], [ %v0_100061f1.pre, %dec_label_pc_100061ea ]
  %v1_100061f1 = add i32 %v1_100061f7, 8
  %v2_100061f1 = inttoptr i32 %v1_100061f1 to i32*
  %v3_100061f1 = load i32, i32* %v2_100061f1, align 4
  %v11_100061f1 = icmp slt i32 %v3_100061f1, 0
  %v2_100061f5 = load i32, i32* @ecx, align 4
  store i32 %v2_100061f5, i32* %eax.global-to-local, align 4
  %v2_100061f7 = add i32 %v1_100061f7, 16
  %v3_100061f7 = inttoptr i32 %v2_100061f7 to i32*
  store i32 %v2_100061f5, i32* %v3_100061f7, align 4
  %v2_100061fa = icmp eq i1 %v11_100061f1, false
  br i1 %v2_100061fa, label %dec_label_pc_100061fc, label %dec_label_pc_1000621d

dec_label_pc_100061fc:                            ; preds = %dec_label_pc_100061f1
  %v0_100061fc = load i32, i32* %eax.global-to-local, align 4
  %v1_100061fc = icmp eq i32 %v0_100061fc, 0
  br i1 %v1_100061fc, label %dec_label_pc_10006216, label %dec_label_pc_10006200

dec_label_pc_10006200:                            ; preds = %dec_label_pc_100061fc
  %v0_10006200 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006200, i32* @ecx, align 4
  %v1_10006206 = inttoptr i32 %v0_10006200 to i32*
  %v2_10006206 = load i32, i32* %v1_10006206, align 4
  store i32 %v2_10006206, i32* @ecx, align 4
  %v1_10006208 = inttoptr i32 %v2_10006206 to i32*
  %v2_10006208 = load i32, i32* %v1_10006208, align 4
  store i32 %v2_10006208, i32* %edx.global-to-local, align 4
  %v1_1000620a = load i32, i32* @esp, align 4
  %v2_1000620a = add i32 %v1_1000620a, -4
  %v3_1000620a = inttoptr i32 %v2_1000620a to i32*
  store i32 %v0_100061fc, i32* %v3_1000620a, align 4
  %v0_1000620b = load i32, i32* %edx.global-to-local, align 4
  %v1_1000620b = add i32 %v0_1000620b, 20
  %v2_1000620b = inttoptr i32 %v1_1000620b to i32*
  %v3_1000620b = load i32, i32* %v2_1000620b, align 4
  store i32 %v3_1000620b, i32* %eax.global-to-local, align 4
  %v0_10006210 = load i32, i32* @esi, align 4
  %v1_10006210 = inttoptr i32 %v0_10006210 to i32*
  store i32 0, i32* %v1_10006210, align 4
  br label %dec_label_pc_10006216

dec_label_pc_10006216:                            ; preds = %dec_label_pc_10006200, %dec_label_pc_100061fc
  %v0_10006216 = load i32, i32* @esi, align 4
  %v1_10006216 = add i32 %v0_10006216, 4
  %v2_10006216 = inttoptr i32 %v1_10006216 to i32*
  store i32 0, i32* %v2_10006216, align 4
  br label %dec_label_pc_1000621d

dec_label_pc_1000621d:                            ; preds = %dec_label_pc_100061f1, %dec_label_pc_10006216
  %v0_1000621d = load i32, i32* @esp, align 4
  %v1_1000621d = inttoptr i32 %v0_1000621d to i32*
  %v2_1000621d = load i32, i32* %v1_1000621d, align 4
  store i32 %v2_1000621d, i32* @esi, align 4
  %v0_1000621e = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000621e
}

define i32 @function_10006220(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10006220:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v16_10006223 = ptrtoint i32* %stack_var_-40 to i32
  %v0_10006226 = load i32, i32* @esi, align 4
  store i32 %arg2, i32* @esi, align 4
  %v0_1000622c = load i32, i32* @edi, align 4
  store i32 %v0_1000622c, i32* %stack_var_-48, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 -1, i32* @ecx, align 4
  store i32 %v16_10006223, i32* @eax, align 4
  store i32 268457680, i32* %stack_var_-40, align 4
  %v4_10006258 = call i32 @function_10005f80(i32* nonnull %stack_var_-40, i32 %arg1, i32 %arg2)
  %v0_1000625d = load i32, i32* @esi, align 4
  store i32 %v16_10006223, i32* @ecx, align 4
  %v0_10006261 = load i32, i32* @edi, align 4
  %v4_10006263 = call i32 @function_10005af0(i32* nonnull %stack_var_-40, i32 %v0_10006261, i32 %v0_1000625d)
  store i32 %v16_10006223, i32* @ecx, align 4
  %v0_1000626e = call i32 @function_100043d0()
  %v2_10006273 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_10006273, i32* @edi, align 4
  store i32 %v0_10006226, i32* @esi, align 4
  ret i32 %v0_1000626e
}

define i32 @function_10006280(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10006280:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v16_10006283 = ptrtoint i32* %stack_var_-40 to i32
  store i32 0, i32* @esi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_1000628c = load i32, i32* @edi, align 4
  store i32 %v0_1000628c, i32* %stack_var_-48, align 4
  %v4_1000628c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %arg1, i32* @edi, align 4
  store i32 268457680, i32* %stack_var_-40, align 4
  %v1_100062af = add i32 %arg1, 12
  %v2_100062af = inttoptr i32 %v1_100062af to i32*
  %v3_100062af = load i32, i32* %v2_100062af, align 4
  %v7_100062b2 = icmp sgt i32 %v3_100062af, 0
  br i1 %v7_100062b2, label %dec_label_pc_100062b4, label %dec_label_pc_1000632c

dec_label_pc_100062b4:                            ; preds = %dec_label_pc_10006280
  %v0_100062b4 = load i32, i32* @ebx, align 4
  store i32 %v0_100062b4, i32* %stack_var_-52, align 4
  %v4_100062b4 = ptrtoint i32* %stack_var_-52 to i32
  br label %dec_label_pc_100062b7

dec_label_pc_100062b7:                            ; preds = %dec_label_pc_100062b7, %dec_label_pc_100062b4
  %v1_100062be = phi i32 [ %v1_100062cf, %dec_label_pc_100062b7 ], [ %v4_100062b4, %dec_label_pc_100062b4 ]
  %v1_100062bc = phi i32 [ %v1_100062d2, %dec_label_pc_100062b7 ], [ 0, %dec_label_pc_100062b4 ]
  %v0_100062b7 = phi i32 [ %v1_100062d5, %dec_label_pc_100062b7 ], [ %arg1, %dec_label_pc_100062b4 ]
  %v1_100062b7 = inttoptr i32 %v0_100062b7 to i32*
  %v2_100062b7 = load i32, i32* %v1_100062b7, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v2_100062bc = add i32 %v2_100062b7, %v1_100062bc
  store i32 %v2_100062bc, i32* @ecx, align 4
  %v2_100062be = add i32 %v1_100062be, -4
  %v3_100062be = inttoptr i32 %v2_100062be to i32*
  store i32 %arg3, i32* %v3_100062be, align 4
  %v0_100062bf = call i32 @function_1000d070()
  store i32 %v0_100062bf, i32* @eax, align 4
  %v1_100062c4 = load i32, i32* @esp, align 4
  %v2_100062c4 = add i32 %v1_100062c4, -4
  %v3_100062c4 = inttoptr i32 %v2_100062c4 to i32*
  store i32 %v0_100062bf, i32* %v3_100062c4, align 4
  store i32 %v16_10006283, i32* @ecx, align 4
  %v2_100062c8 = add i32 %v1_100062c4, -8
  %v3_100062c8 = inttoptr i32 %v2_100062c8 to i32*
  store i32 %v16_10006283, i32* %v3_100062c8, align 4
  %v2_100062c9 = call i32 @function_10005f80(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100062c9, i32* %eax.global-to-local, align 4
  %v0_100062ce = load i32, i32* @esi, align 4
  %v1_100062ce = add i32 %v0_100062ce, 1
  store i32 %v1_100062ce, i32* @esi, align 4
  %v0_100062cf = load i32, i32* @esp, align 4
  %v1_100062cf = add i32 %v0_100062cf, 12
  %v0_100062d2 = load i32, i32* @ebx, align 4
  %v1_100062d2 = add i32 %v0_100062d2, 16
  %v1_100062d5 = load i32, i32* @edi, align 4
  %v2_100062d5 = add i32 %v1_100062d5, 12
  %v3_100062d5 = inttoptr i32 %v2_100062d5 to i32*
  %v4_100062d5 = load i32, i32* %v3_100062d5, align 4
  %v5_100062d8 = icmp slt i32 %v1_100062ce, %v4_100062d5
  br i1 %v5_100062d8, label %dec_label_pc_100062b7, label %dec_label_pc_100062da

dec_label_pc_100062da:                            ; preds = %dec_label_pc_100062b7
  %v1_100062da = inttoptr i32 %v1_100062cf to i32*
  %v2_100062da = load i32, i32* %v1_100062da, align 4
  store i32 %v2_100062da, i32* @ebx, align 4
  %v3_100062da = add i32 %v0_100062cf, 16
  br label %dec_label_pc_1000632c

dec_label_pc_1000632c:                            ; preds = %dec_label_pc_10006280, %dec_label_pc_100062da
  %v1_100062e1 = phi i32 [ %v4_1000628c, %dec_label_pc_10006280 ], [ %v3_100062da, %dec_label_pc_100062da ]
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_100062e1 = add i32 %v1_100062e1, -4
  %v3_100062e1 = inttoptr i32 %v2_100062e1 to i32*
  store i32 %arg3, i32* %v3_100062e1, align 4
  %v0_100062e2 = load i32, i32* %eax.global-to-local, align 4
  %v2_100062e2 = add i32 %v1_100062e1, -8
  %v3_100062e2 = inttoptr i32 %v2_100062e2 to i32*
  store i32 %v0_100062e2, i32* %v3_100062e2, align 4
  store i32 %v16_10006283, i32* @ecx, align 4
  %v2_100062e6 = add i32 %v1_100062e1, -12
  %v3_100062e6 = inttoptr i32 %v2_100062e6 to i32*
  store i32 %v16_10006283, i32* %v3_100062e6, align 4
  %v2_100062e7 = call i32 @function_10005af0(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100062e7, i32* %eax.global-to-local, align 4
  store i32 %v16_10006283, i32* @ecx, align 4
  %v0_100062f2 = call i32 @function_10004260()
  store i32 %v0_100062f2, i32* %eax.global-to-local, align 4
  %v0_100062fb = load i32, i32* @esp, align 4
  %v1_100062fb = inttoptr i32 %v0_100062fb to i32*
  %v2_100062fb = load i32, i32* %v1_100062fb, align 4
  store i32 %v2_100062fb, i32* @edi, align 4
  %v3_100062fb = add i32 %v0_100062fb, 4
  %v1_100062fc = inttoptr i32 %v3_100062fb to i32*
  %v2_100062fc = load i32, i32* %v1_100062fc, align 4
  store i32 %v2_100062fc, i32* @esi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0
}

define i32 @function_10006330() local_unnamed_addr {
dec_label_pc_10006330:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10006330 = load i32, i32* @esi, align 4
  %v0_10006331 = load i32, i32* @ecx, align 4
  store i32 %v0_10006331, i32* @esi, align 4
  %v0_10006333 = load i32, i32* @edi, align 4
  %v1_10006334 = add i32 %v0_10006331, 160
  store i32 %v1_10006334, i32* @ecx, align 4
  %v2_1000633a = call i32 @function_10006160(i32 %v0_10006333, i32 %v0_10006330)
  store i32 %v2_1000633a, i32* @eax, align 4
  %v0_1000633f = load i32, i32* @esi, align 4
  %v1_1000633f = add i32 %v0_1000633f, 140
  store i32 %v1_1000633f, i32* @ecx, align 4
  %v0_10006345 = call i32 @function_100061c0()
  store i32 %v0_10006345, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v1_1000634c = load i32, i32* @esi, align 4
  %v2_1000634c = add i32 %v1_1000634c, 132
  %v3_1000634c = inttoptr i32 %v2_1000634c to i32*
  store i32 0, i32* %v3_1000634c, align 4
  %v0_10006352 = load i32, i32* @esi, align 4
  %v1_10006352 = add i32 %v0_10006352, 128
  %v2_10006352 = inttoptr i32 %v1_10006352 to i32*
  %v3_10006352 = load i32, i32* %v2_10006352, align 4
  %v4_10006352 = load i32, i32* %edi.global-to-local, align 4
  %v5_10006358 = icmp slt i32 %v3_10006352, %v4_10006352
  br i1 %v5_10006358, label %dec_label_pc_10006377, label %dec_label_pc_1000635a

dec_label_pc_1000635a:                            ; preds = %dec_label_pc_10006330
  %v1_1000635a = add i32 %v0_10006352, 120
  %v2_1000635a = inttoptr i32 %v1_1000635a to i32*
  %v3_1000635a = load i32, i32* %v2_1000635a, align 4
  store i32 %v3_1000635a, i32* %eax.global-to-local, align 4
  %v12_1000635d = icmp eq i32 %v3_1000635a, %v4_10006352
  br i1 %v12_1000635d, label %dec_label_pc_10006374, label %dec_label_pc_10006361

dec_label_pc_10006361:                            ; preds = %dec_label_pc_1000635a
  %v0_10006361 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006361, i32* @ecx, align 4
  %v1_10006367 = inttoptr i32 %v0_10006361 to i32*
  %v2_10006367 = load i32, i32* %v1_10006367, align 4
  store i32 %v2_10006367, i32* @ecx, align 4
  %v1_10006369 = inttoptr i32 %v2_10006367 to i32*
  %v2_10006369 = load i32, i32* %v1_10006369, align 4
  store i32 %v2_10006369, i32* %edx.global-to-local, align 4
  %v1_1000636c = add i32 %v2_10006369, 20
  %v2_1000636c = inttoptr i32 %v1_1000636c to i32*
  %v3_1000636c = load i32, i32* %v2_1000636c, align 4
  store i32 %v3_1000636c, i32* %eax.global-to-local, align 4
  store i32 %v4_10006352, i32* %v2_1000635a, align 4
  %v0_10006374.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006374.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006374

dec_label_pc_10006374:                            ; preds = %dec_label_pc_10006361, %dec_label_pc_1000635a
  %v1_10006374 = phi i32 [ %v1_10006374.pre, %dec_label_pc_10006361 ], [ %v0_10006352, %dec_label_pc_1000635a ]
  %v0_10006374 = phi i32 [ %v0_10006374.pre, %dec_label_pc_10006361 ], [ %v4_10006352, %dec_label_pc_1000635a ]
  %v2_10006374 = add i32 %v1_10006374, 124
  %v3_10006374 = inttoptr i32 %v2_10006374 to i32*
  store i32 %v0_10006374, i32* %v3_10006374, align 4
  %v0_10006377.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006377.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006377

dec_label_pc_10006377:                            ; preds = %dec_label_pc_10006374, %dec_label_pc_10006330
  %v1_10006377 = phi i32 [ %v1_10006377.pre, %dec_label_pc_10006374 ], [ %v0_10006352, %dec_label_pc_10006330 ]
  %v0_10006377 = phi i32 [ %v0_10006377.pre, %dec_label_pc_10006374 ], [ %v4_10006352, %dec_label_pc_10006330 ]
  %v2_10006377 = add i32 %v1_10006377, 116
  %v3_10006377 = inttoptr i32 %v2_10006377 to i32*
  store i32 %v0_10006377, i32* %v3_10006377, align 4
  %v0_1000637a = load i32, i32* @esi, align 4
  %v1_1000637a = add i32 %v0_1000637a, 112
  %v2_1000637a = inttoptr i32 %v1_1000637a to i32*
  %v3_1000637a = load i32, i32* %v2_1000637a, align 4
  %v4_1000637a = load i32, i32* %edi.global-to-local, align 4
  %v5_1000637d = icmp slt i32 %v3_1000637a, %v4_1000637a
  br i1 %v5_1000637d, label %dec_label_pc_1000639c, label %dec_label_pc_1000637f

dec_label_pc_1000637f:                            ; preds = %dec_label_pc_10006377
  %v1_1000637f = add i32 %v0_1000637a, 104
  %v2_1000637f = inttoptr i32 %v1_1000637f to i32*
  %v3_1000637f = load i32, i32* %v2_1000637f, align 4
  store i32 %v3_1000637f, i32* %eax.global-to-local, align 4
  %v12_10006382 = icmp eq i32 %v3_1000637f, %v4_1000637a
  br i1 %v12_10006382, label %dec_label_pc_10006399, label %dec_label_pc_10006386

dec_label_pc_10006386:                            ; preds = %dec_label_pc_1000637f
  %v0_10006386 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006386, i32* @ecx, align 4
  %v1_1000638c = inttoptr i32 %v0_10006386 to i32*
  %v2_1000638c = load i32, i32* %v1_1000638c, align 4
  store i32 %v2_1000638c, i32* @ecx, align 4
  %v1_1000638e = inttoptr i32 %v2_1000638c to i32*
  %v2_1000638e = load i32, i32* %v1_1000638e, align 4
  store i32 %v2_1000638e, i32* %edx.global-to-local, align 4
  %v1_10006390 = load i32, i32* @esp, align 4
  %v2_10006390 = add i32 %v1_10006390, -4
  %v3_10006390 = inttoptr i32 %v2_10006390 to i32*
  store i32 %v3_1000637f, i32* %v3_10006390, align 4
  %v0_10006391 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006391 = add i32 %v0_10006391, 20
  %v2_10006391 = inttoptr i32 %v1_10006391 to i32*
  %v3_10006391 = load i32, i32* %v2_10006391, align 4
  store i32 %v3_10006391, i32* %eax.global-to-local, align 4
  %v0_10006396 = load i32, i32* %edi.global-to-local, align 4
  %v1_10006396 = load i32, i32* @esi, align 4
  %v2_10006396 = add i32 %v1_10006396, 104
  %v3_10006396 = inttoptr i32 %v2_10006396 to i32*
  store i32 %v0_10006396, i32* %v3_10006396, align 4
  %v0_10006399.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006399.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006399

dec_label_pc_10006399:                            ; preds = %dec_label_pc_10006386, %dec_label_pc_1000637f
  %v1_10006399 = phi i32 [ %v1_10006399.pre, %dec_label_pc_10006386 ], [ %v0_1000637a, %dec_label_pc_1000637f ]
  %v0_10006399 = phi i32 [ %v0_10006399.pre, %dec_label_pc_10006386 ], [ %v4_1000637a, %dec_label_pc_1000637f ]
  %v2_10006399 = add i32 %v1_10006399, 108
  %v3_10006399 = inttoptr i32 %v2_10006399 to i32*
  store i32 %v0_10006399, i32* %v3_10006399, align 4
  %v0_1000639c.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000639c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000639c

dec_label_pc_1000639c:                            ; preds = %dec_label_pc_10006399, %dec_label_pc_10006377
  %v1_1000639c = phi i32 [ %v1_1000639c.pre, %dec_label_pc_10006399 ], [ %v0_1000637a, %dec_label_pc_10006377 ]
  %v0_1000639c = phi i32 [ %v0_1000639c.pre, %dec_label_pc_10006399 ], [ %v4_1000637a, %dec_label_pc_10006377 ]
  %v2_1000639c = add i32 %v1_1000639c, 100
  %v3_1000639c = inttoptr i32 %v2_1000639c to i32*
  store i32 %v0_1000639c, i32* %v3_1000639c, align 4
  %v0_1000639f = load i32, i32* @esi, align 4
  %v1_1000639f = add i32 %v0_1000639f, 96
  %v2_1000639f = inttoptr i32 %v1_1000639f to i32*
  %v3_1000639f = load i32, i32* %v2_1000639f, align 4
  %v4_1000639f = load i32, i32* %edi.global-to-local, align 4
  %v5_100063a2 = icmp slt i32 %v3_1000639f, %v4_1000639f
  br i1 %v5_100063a2, label %dec_label_pc_100063c1, label %dec_label_pc_100063a4

dec_label_pc_100063a4:                            ; preds = %dec_label_pc_1000639c
  %v1_100063a4 = add i32 %v0_1000639f, 88
  %v2_100063a4 = inttoptr i32 %v1_100063a4 to i32*
  %v3_100063a4 = load i32, i32* %v2_100063a4, align 4
  store i32 %v3_100063a4, i32* %eax.global-to-local, align 4
  %v12_100063a7 = icmp eq i32 %v3_100063a4, %v4_1000639f
  br i1 %v12_100063a7, label %dec_label_pc_100063be, label %dec_label_pc_100063ab

dec_label_pc_100063ab:                            ; preds = %dec_label_pc_100063a4
  %v0_100063ab = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100063ab, i32* @ecx, align 4
  %v1_100063b1 = inttoptr i32 %v0_100063ab to i32*
  %v2_100063b1 = load i32, i32* %v1_100063b1, align 4
  store i32 %v2_100063b1, i32* @ecx, align 4
  %v1_100063b3 = inttoptr i32 %v2_100063b1 to i32*
  %v2_100063b3 = load i32, i32* %v1_100063b3, align 4
  store i32 %v2_100063b3, i32* %edx.global-to-local, align 4
  %v1_100063b5 = load i32, i32* @esp, align 4
  %v2_100063b5 = add i32 %v1_100063b5, -4
  %v3_100063b5 = inttoptr i32 %v2_100063b5 to i32*
  store i32 %v3_100063a4, i32* %v3_100063b5, align 4
  %v0_100063b6 = load i32, i32* %edx.global-to-local, align 4
  %v1_100063b6 = add i32 %v0_100063b6, 20
  %v2_100063b6 = inttoptr i32 %v1_100063b6 to i32*
  %v3_100063b6 = load i32, i32* %v2_100063b6, align 4
  store i32 %v3_100063b6, i32* %eax.global-to-local, align 4
  %v0_100063bb = load i32, i32* %edi.global-to-local, align 4
  %v1_100063bb = load i32, i32* @esi, align 4
  %v2_100063bb = add i32 %v1_100063bb, 88
  %v3_100063bb = inttoptr i32 %v2_100063bb to i32*
  store i32 %v0_100063bb, i32* %v3_100063bb, align 4
  %v0_100063be.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_100063be.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100063be

dec_label_pc_100063be:                            ; preds = %dec_label_pc_100063ab, %dec_label_pc_100063a4
  %v1_100063be = phi i32 [ %v1_100063be.pre, %dec_label_pc_100063ab ], [ %v0_1000639f, %dec_label_pc_100063a4 ]
  %v0_100063be = phi i32 [ %v0_100063be.pre, %dec_label_pc_100063ab ], [ %v4_1000639f, %dec_label_pc_100063a4 ]
  %v2_100063be = add i32 %v1_100063be, 92
  %v3_100063be = inttoptr i32 %v2_100063be to i32*
  store i32 %v0_100063be, i32* %v3_100063be, align 4
  %v0_100063c1.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_100063c1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100063c1

dec_label_pc_100063c1:                            ; preds = %dec_label_pc_100063be, %dec_label_pc_1000639c
  %v1_100063c1 = phi i32 [ %v1_100063c1.pre, %dec_label_pc_100063be ], [ %v0_1000639f, %dec_label_pc_1000639c ]
  %v0_100063c1 = phi i32 [ %v0_100063c1.pre, %dec_label_pc_100063be ], [ %v4_1000639f, %dec_label_pc_1000639c ]
  %v2_100063c1 = add i32 %v1_100063c1, 84
  %v3_100063c1 = inttoptr i32 %v2_100063c1 to i32*
  store i32 %v0_100063c1, i32* %v3_100063c1, align 4
  %v0_100063c4 = load i32, i32* @esi, align 4
  %v1_100063c4 = add i32 %v0_100063c4, 80
  %v2_100063c4 = inttoptr i32 %v1_100063c4 to i32*
  %v3_100063c4 = load i32, i32* %v2_100063c4, align 4
  %v4_100063c4 = load i32, i32* %edi.global-to-local, align 4
  %v5_100063c7 = icmp slt i32 %v3_100063c4, %v4_100063c4
  br i1 %v5_100063c7, label %dec_label_pc_100063e6, label %dec_label_pc_100063c9

dec_label_pc_100063c9:                            ; preds = %dec_label_pc_100063c1
  %v1_100063c9 = add i32 %v0_100063c4, 72
  %v2_100063c9 = inttoptr i32 %v1_100063c9 to i32*
  %v3_100063c9 = load i32, i32* %v2_100063c9, align 4
  store i32 %v3_100063c9, i32* %eax.global-to-local, align 4
  %v12_100063cc = icmp eq i32 %v3_100063c9, %v4_100063c4
  br i1 %v12_100063cc, label %dec_label_pc_100063e3, label %dec_label_pc_100063d0

dec_label_pc_100063d0:                            ; preds = %dec_label_pc_100063c9
  %v0_100063d0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100063d0, i32* @ecx, align 4
  %v1_100063d6 = inttoptr i32 %v0_100063d0 to i32*
  %v2_100063d6 = load i32, i32* %v1_100063d6, align 4
  store i32 %v2_100063d6, i32* @ecx, align 4
  %v1_100063d8 = inttoptr i32 %v2_100063d6 to i32*
  %v2_100063d8 = load i32, i32* %v1_100063d8, align 4
  store i32 %v2_100063d8, i32* %edx.global-to-local, align 4
  %v1_100063da = load i32, i32* @esp, align 4
  %v2_100063da = add i32 %v1_100063da, -4
  %v3_100063da = inttoptr i32 %v2_100063da to i32*
  store i32 %v3_100063c9, i32* %v3_100063da, align 4
  %v0_100063db = load i32, i32* %edx.global-to-local, align 4
  %v1_100063db = add i32 %v0_100063db, 20
  %v2_100063db = inttoptr i32 %v1_100063db to i32*
  %v3_100063db = load i32, i32* %v2_100063db, align 4
  store i32 %v3_100063db, i32* %eax.global-to-local, align 4
  %v0_100063e0 = load i32, i32* %edi.global-to-local, align 4
  %v1_100063e0 = load i32, i32* @esi, align 4
  %v2_100063e0 = add i32 %v1_100063e0, 72
  %v3_100063e0 = inttoptr i32 %v2_100063e0 to i32*
  store i32 %v0_100063e0, i32* %v3_100063e0, align 4
  %v0_100063e3.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_100063e3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100063e3

dec_label_pc_100063e3:                            ; preds = %dec_label_pc_100063d0, %dec_label_pc_100063c9
  %v1_100063e3 = phi i32 [ %v1_100063e3.pre, %dec_label_pc_100063d0 ], [ %v0_100063c4, %dec_label_pc_100063c9 ]
  %v0_100063e3 = phi i32 [ %v0_100063e3.pre, %dec_label_pc_100063d0 ], [ %v4_100063c4, %dec_label_pc_100063c9 ]
  %v2_100063e3 = add i32 %v1_100063e3, 76
  %v3_100063e3 = inttoptr i32 %v2_100063e3 to i32*
  store i32 %v0_100063e3, i32* %v3_100063e3, align 4
  %v0_100063e6.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_100063e6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100063e6

dec_label_pc_100063e6:                            ; preds = %dec_label_pc_100063e3, %dec_label_pc_100063c1
  %v1_100063e6 = phi i32 [ %v1_100063e6.pre, %dec_label_pc_100063e3 ], [ %v0_100063c4, %dec_label_pc_100063c1 ]
  %v0_100063e6 = phi i32 [ %v0_100063e6.pre, %dec_label_pc_100063e3 ], [ %v4_100063c4, %dec_label_pc_100063c1 ]
  %v2_100063e6 = add i32 %v1_100063e6, 68
  %v3_100063e6 = inttoptr i32 %v2_100063e6 to i32*
  store i32 %v0_100063e6, i32* %v3_100063e6, align 4
  %v0_100063e9 = load i32, i32* @esi, align 4
  %v1_100063e9 = add i32 %v0_100063e9, 64
  %v2_100063e9 = inttoptr i32 %v1_100063e9 to i32*
  %v3_100063e9 = load i32, i32* %v2_100063e9, align 4
  %v4_100063e9 = load i32, i32* %edi.global-to-local, align 4
  %v5_100063ec = icmp slt i32 %v3_100063e9, %v4_100063e9
  br i1 %v5_100063ec, label %dec_label_pc_1000640b, label %dec_label_pc_100063ee

dec_label_pc_100063ee:                            ; preds = %dec_label_pc_100063e6
  %v1_100063ee = add i32 %v0_100063e9, 56
  %v2_100063ee = inttoptr i32 %v1_100063ee to i32*
  %v3_100063ee = load i32, i32* %v2_100063ee, align 4
  store i32 %v3_100063ee, i32* %eax.global-to-local, align 4
  %v12_100063f1 = icmp eq i32 %v3_100063ee, %v4_100063e9
  br i1 %v12_100063f1, label %dec_label_pc_10006408, label %dec_label_pc_100063f5

dec_label_pc_100063f5:                            ; preds = %dec_label_pc_100063ee
  %v0_100063f5 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100063f5, i32* @ecx, align 4
  %v1_100063fb = inttoptr i32 %v0_100063f5 to i32*
  %v2_100063fb = load i32, i32* %v1_100063fb, align 4
  store i32 %v2_100063fb, i32* @ecx, align 4
  %v1_100063fd = inttoptr i32 %v2_100063fb to i32*
  %v2_100063fd = load i32, i32* %v1_100063fd, align 4
  store i32 %v2_100063fd, i32* %edx.global-to-local, align 4
  %v1_100063ff = load i32, i32* @esp, align 4
  %v2_100063ff = add i32 %v1_100063ff, -4
  %v3_100063ff = inttoptr i32 %v2_100063ff to i32*
  store i32 %v3_100063ee, i32* %v3_100063ff, align 4
  %v0_10006400 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006400 = add i32 %v0_10006400, 20
  %v2_10006400 = inttoptr i32 %v1_10006400 to i32*
  %v3_10006400 = load i32, i32* %v2_10006400, align 4
  store i32 %v3_10006400, i32* %eax.global-to-local, align 4
  %v0_10006405 = load i32, i32* %edi.global-to-local, align 4
  %v1_10006405 = load i32, i32* @esi, align 4
  %v2_10006405 = add i32 %v1_10006405, 56
  %v3_10006405 = inttoptr i32 %v2_10006405 to i32*
  store i32 %v0_10006405, i32* %v3_10006405, align 4
  %v0_10006408.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006408.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006408

dec_label_pc_10006408:                            ; preds = %dec_label_pc_100063f5, %dec_label_pc_100063ee
  %v1_10006408 = phi i32 [ %v1_10006408.pre, %dec_label_pc_100063f5 ], [ %v0_100063e9, %dec_label_pc_100063ee ]
  %v0_10006408 = phi i32 [ %v0_10006408.pre, %dec_label_pc_100063f5 ], [ %v4_100063e9, %dec_label_pc_100063ee ]
  %v2_10006408 = add i32 %v1_10006408, 60
  %v3_10006408 = inttoptr i32 %v2_10006408 to i32*
  store i32 %v0_10006408, i32* %v3_10006408, align 4
  %v0_1000640b.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000640b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000640b

dec_label_pc_1000640b:                            ; preds = %dec_label_pc_10006408, %dec_label_pc_100063e6
  %v1_1000640b = phi i32 [ %v1_1000640b.pre, %dec_label_pc_10006408 ], [ %v0_100063e9, %dec_label_pc_100063e6 ]
  %v0_1000640b = phi i32 [ %v0_1000640b.pre, %dec_label_pc_10006408 ], [ %v4_100063e9, %dec_label_pc_100063e6 ]
  %v2_1000640b = add i32 %v1_1000640b, 52
  %v3_1000640b = inttoptr i32 %v2_1000640b to i32*
  store i32 %v0_1000640b, i32* %v3_1000640b, align 4
  %v0_1000640e = load i32, i32* @esi, align 4
  %v1_1000640e = add i32 %v0_1000640e, 48
  %v2_1000640e = inttoptr i32 %v1_1000640e to i32*
  %v3_1000640e = load i32, i32* %v2_1000640e, align 4
  %v4_1000640e = load i32, i32* %edi.global-to-local, align 4
  %v5_10006411 = icmp slt i32 %v3_1000640e, %v4_1000640e
  br i1 %v5_10006411, label %dec_label_pc_10006430, label %dec_label_pc_10006413

dec_label_pc_10006413:                            ; preds = %dec_label_pc_1000640b
  %v1_10006413 = add i32 %v0_1000640e, 40
  %v2_10006413 = inttoptr i32 %v1_10006413 to i32*
  %v3_10006413 = load i32, i32* %v2_10006413, align 4
  store i32 %v3_10006413, i32* %eax.global-to-local, align 4
  %v12_10006416 = icmp eq i32 %v3_10006413, %v4_1000640e
  br i1 %v12_10006416, label %dec_label_pc_1000642d, label %dec_label_pc_1000641a

dec_label_pc_1000641a:                            ; preds = %dec_label_pc_10006413
  %v0_1000641a = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000641a, i32* @ecx, align 4
  %v1_10006420 = inttoptr i32 %v0_1000641a to i32*
  %v2_10006420 = load i32, i32* %v1_10006420, align 4
  store i32 %v2_10006420, i32* @ecx, align 4
  %v1_10006422 = inttoptr i32 %v2_10006420 to i32*
  %v2_10006422 = load i32, i32* %v1_10006422, align 4
  store i32 %v2_10006422, i32* %edx.global-to-local, align 4
  %v1_10006424 = load i32, i32* @esp, align 4
  %v2_10006424 = add i32 %v1_10006424, -4
  %v3_10006424 = inttoptr i32 %v2_10006424 to i32*
  store i32 %v3_10006413, i32* %v3_10006424, align 4
  %v0_10006425 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006425 = add i32 %v0_10006425, 20
  %v2_10006425 = inttoptr i32 %v1_10006425 to i32*
  %v3_10006425 = load i32, i32* %v2_10006425, align 4
  store i32 %v3_10006425, i32* %eax.global-to-local, align 4
  %v0_1000642a = load i32, i32* %edi.global-to-local, align 4
  %v1_1000642a = load i32, i32* @esi, align 4
  %v2_1000642a = add i32 %v1_1000642a, 40
  %v3_1000642a = inttoptr i32 %v2_1000642a to i32*
  store i32 %v0_1000642a, i32* %v3_1000642a, align 4
  %v0_1000642d.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000642d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000642d

dec_label_pc_1000642d:                            ; preds = %dec_label_pc_1000641a, %dec_label_pc_10006413
  %v1_1000642d = phi i32 [ %v1_1000642d.pre, %dec_label_pc_1000641a ], [ %v0_1000640e, %dec_label_pc_10006413 ]
  %v0_1000642d = phi i32 [ %v0_1000642d.pre, %dec_label_pc_1000641a ], [ %v4_1000640e, %dec_label_pc_10006413 ]
  %v2_1000642d = add i32 %v1_1000642d, 44
  %v3_1000642d = inttoptr i32 %v2_1000642d to i32*
  store i32 %v0_1000642d, i32* %v3_1000642d, align 4
  %v0_10006430.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006430.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006430

dec_label_pc_10006430:                            ; preds = %dec_label_pc_1000642d, %dec_label_pc_1000640b
  %v1_10006430 = phi i32 [ %v1_10006430.pre, %dec_label_pc_1000642d ], [ %v0_1000640e, %dec_label_pc_1000640b ]
  %v0_10006430 = phi i32 [ %v0_10006430.pre, %dec_label_pc_1000642d ], [ %v4_1000640e, %dec_label_pc_1000640b ]
  %v2_10006430 = add i32 %v1_10006430, 36
  %v3_10006430 = inttoptr i32 %v2_10006430 to i32*
  store i32 %v0_10006430, i32* %v3_10006430, align 4
  %v0_10006433 = load i32, i32* @esi, align 4
  %v1_10006433 = add i32 %v0_10006433, 32
  %v2_10006433 = inttoptr i32 %v1_10006433 to i32*
  %v3_10006433 = load i32, i32* %v2_10006433, align 4
  %v4_10006433 = load i32, i32* %edi.global-to-local, align 4
  %v5_10006436 = icmp slt i32 %v3_10006433, %v4_10006433
  br i1 %v5_10006436, label %dec_label_pc_10006455, label %dec_label_pc_10006438

dec_label_pc_10006438:                            ; preds = %dec_label_pc_10006430
  %v1_10006438 = add i32 %v0_10006433, 24
  %v2_10006438 = inttoptr i32 %v1_10006438 to i32*
  %v3_10006438 = load i32, i32* %v2_10006438, align 4
  store i32 %v3_10006438, i32* %eax.global-to-local, align 4
  %v12_1000643b = icmp eq i32 %v3_10006438, %v4_10006433
  br i1 %v12_1000643b, label %dec_label_pc_10006452, label %dec_label_pc_1000643f

dec_label_pc_1000643f:                            ; preds = %dec_label_pc_10006438
  %v0_1000643f = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000643f, i32* @ecx, align 4
  %v1_10006445 = inttoptr i32 %v0_1000643f to i32*
  %v2_10006445 = load i32, i32* %v1_10006445, align 4
  store i32 %v2_10006445, i32* @ecx, align 4
  %v1_10006447 = inttoptr i32 %v2_10006445 to i32*
  %v2_10006447 = load i32, i32* %v1_10006447, align 4
  store i32 %v2_10006447, i32* %edx.global-to-local, align 4
  %v1_10006449 = load i32, i32* @esp, align 4
  %v2_10006449 = add i32 %v1_10006449, -4
  %v3_10006449 = inttoptr i32 %v2_10006449 to i32*
  store i32 %v3_10006438, i32* %v3_10006449, align 4
  %v0_1000644a = load i32, i32* %edx.global-to-local, align 4
  %v1_1000644a = add i32 %v0_1000644a, 20
  %v2_1000644a = inttoptr i32 %v1_1000644a to i32*
  %v3_1000644a = load i32, i32* %v2_1000644a, align 4
  store i32 %v3_1000644a, i32* %eax.global-to-local, align 4
  %v0_1000644f = load i32, i32* %edi.global-to-local, align 4
  %v1_1000644f = load i32, i32* @esi, align 4
  %v2_1000644f = add i32 %v1_1000644f, 24
  %v3_1000644f = inttoptr i32 %v2_1000644f to i32*
  store i32 %v0_1000644f, i32* %v3_1000644f, align 4
  %v0_10006452.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006452.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006452

dec_label_pc_10006452:                            ; preds = %dec_label_pc_1000643f, %dec_label_pc_10006438
  %v1_10006452 = phi i32 [ %v1_10006452.pre, %dec_label_pc_1000643f ], [ %v0_10006433, %dec_label_pc_10006438 ]
  %v0_10006452 = phi i32 [ %v0_10006452.pre, %dec_label_pc_1000643f ], [ %v4_10006433, %dec_label_pc_10006438 ]
  %v2_10006452 = add i32 %v1_10006452, 28
  %v3_10006452 = inttoptr i32 %v2_10006452 to i32*
  store i32 %v0_10006452, i32* %v3_10006452, align 4
  %v0_10006455.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006455.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006455

dec_label_pc_10006455:                            ; preds = %dec_label_pc_10006452, %dec_label_pc_10006430
  %v1_10006455 = phi i32 [ %v1_10006455.pre, %dec_label_pc_10006452 ], [ %v0_10006433, %dec_label_pc_10006430 ]
  %v0_10006455 = phi i32 [ %v0_10006455.pre, %dec_label_pc_10006452 ], [ %v4_10006433, %dec_label_pc_10006430 ]
  %v2_10006455 = add i32 %v1_10006455, 20
  %v3_10006455 = inttoptr i32 %v2_10006455 to i32*
  store i32 %v0_10006455, i32* %v3_10006455, align 4
  %v0_10006458 = load i32, i32* @esi, align 4
  %v1_10006458 = add i32 %v0_10006458, 16
  %v2_10006458 = inttoptr i32 %v1_10006458 to i32*
  %v3_10006458 = load i32, i32* %v2_10006458, align 4
  %v4_10006458 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000645b = icmp slt i32 %v3_10006458, %v4_10006458
  br i1 %v5_1000645b, label %dec_label_pc_1000647a, label %dec_label_pc_1000645d

dec_label_pc_1000645d:                            ; preds = %dec_label_pc_10006455
  %v1_1000645d = add i32 %v0_10006458, 8
  %v2_1000645d = inttoptr i32 %v1_1000645d to i32*
  %v3_1000645d = load i32, i32* %v2_1000645d, align 4
  store i32 %v3_1000645d, i32* %eax.global-to-local, align 4
  %v12_10006460 = icmp eq i32 %v3_1000645d, %v4_10006458
  br i1 %v12_10006460, label %dec_label_pc_10006477, label %dec_label_pc_10006464

dec_label_pc_10006464:                            ; preds = %dec_label_pc_1000645d
  %v0_10006464 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006464, i32* @ecx, align 4
  %v1_1000646a = inttoptr i32 %v0_10006464 to i32*
  %v2_1000646a = load i32, i32* %v1_1000646a, align 4
  store i32 %v2_1000646a, i32* @ecx, align 4
  %v1_1000646c = inttoptr i32 %v2_1000646a to i32*
  %v2_1000646c = load i32, i32* %v1_1000646c, align 4
  store i32 %v2_1000646c, i32* %edx.global-to-local, align 4
  %v1_1000646e = load i32, i32* @esp, align 4
  %v2_1000646e = add i32 %v1_1000646e, -4
  %v3_1000646e = inttoptr i32 %v2_1000646e to i32*
  store i32 %v3_1000645d, i32* %v3_1000646e, align 4
  %v0_1000646f = load i32, i32* %edx.global-to-local, align 4
  %v1_1000646f = add i32 %v0_1000646f, 20
  %v2_1000646f = inttoptr i32 %v1_1000646f to i32*
  %v3_1000646f = load i32, i32* %v2_1000646f, align 4
  store i32 %v3_1000646f, i32* %eax.global-to-local, align 4
  %v0_10006474 = load i32, i32* %edi.global-to-local, align 4
  %v1_10006474 = load i32, i32* @esi, align 4
  %v2_10006474 = add i32 %v1_10006474, 8
  %v3_10006474 = inttoptr i32 %v2_10006474 to i32*
  store i32 %v0_10006474, i32* %v3_10006474, align 4
  %v0_10006477.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10006477.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006477

dec_label_pc_10006477:                            ; preds = %dec_label_pc_10006464, %dec_label_pc_1000645d
  %v1_10006477 = phi i32 [ %v1_10006477.pre, %dec_label_pc_10006464 ], [ %v0_10006458, %dec_label_pc_1000645d ]
  %v0_10006477 = phi i32 [ %v0_10006477.pre, %dec_label_pc_10006464 ], [ %v4_10006458, %dec_label_pc_1000645d ]
  %v2_10006477 = add i32 %v1_10006477, 12
  %v3_10006477 = inttoptr i32 %v2_10006477 to i32*
  store i32 %v0_10006477, i32* %v3_10006477, align 4
  br label %dec_label_pc_1000647a

dec_label_pc_1000647a:                            ; preds = %dec_label_pc_10006477, %dec_label_pc_10006455
  %v0_1000647a = load i32, i32* @esp, align 4
  %v1_1000647a = inttoptr i32 %v0_1000647a to i32*
  %v2_1000647a = load i32, i32* %v1_1000647a, align 4
  store i32 %v2_1000647a, i32* %edi.global-to-local, align 4
  %v0_1000647c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000647c
}

define i32 @"??0_Init_locks@std@@QAE@XZ.8"() local_unnamed_addr {
dec_label_pc_10006480:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i8*, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10006482 = load i32, i32* @ecx, align 4
  store i32 %v0_10006482, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_10006486 = load i32, i32* @edi, align 4
  store i32 %v0_10006486, i32* %stack_var_-12, align 4
  %v1_10006487 = add i32 %v0_10006482, 8
  store i32 %v1_10006487, i32* @ecx, align 4
  %v1_1000648a = inttoptr i32 %v0_10006482 to i32*
  store i32 ptrtoint (%vtable_10023154_type* @global_var_10023154.254 to i32), i32* %v1_1000648a, align 4
  %v0_10006490 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10006490 = trunc i32 %v0_10006490 to i16
  %v2_10006490 = load i32, i32* @esi, align 4
  %v3_10006490 = add i32 %v2_10006490, 4
  %v4_10006490 = inttoptr i32 %v3_10006490 to i16*
  store i16 %v1_10006490, i16* %v4_10006490, align 2
  %v0_10006494 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10006494 = trunc i32 %v0_10006494 to i8
  %v2_10006494 = load i32, i32* @esi, align 4
  %v3_10006494 = add i32 %v2_10006494, 6
  %v4_10006494 = inttoptr i32 %v3_10006494 to i8*
  store i8 %v1_10006494, i8* %v4_10006494, align 1
  %v0_10006497 = call i32 @function_1000d140()
  %v0_1000649c = load i32, i32* @esi, align 4
  %v1_1000649c = add i32 %v0_1000649c, 24
  store i32 %v1_1000649c, i32* @ecx, align 4
  %v0_1000649f = call i32 @function_1000d140()
  %v0_100064a4 = load i32, i32* @esi, align 4
  %v1_100064a4 = add i32 %v0_100064a4, 40
  store i32 %v1_100064a4, i32* @ecx, align 4
  %v0_100064a7 = call i32 @function_1000d140()
  %v0_100064ac = load i32, i32* @esi, align 4
  %v1_100064ac = add i32 %v0_100064ac, 56
  store i32 %v1_100064ac, i32* @ecx, align 4
  %v0_100064af = call i32 @function_1000d140()
  %v0_100064b4 = load i32, i32* @esi, align 4
  %v1_100064b4 = add i32 %v0_100064b4, 72
  store i32 %v1_100064b4, i32* @ecx, align 4
  %v0_100064b7 = call i32 @function_1000d140()
  %v0_100064bc = load i32, i32* @esi, align 4
  %v1_100064bc = add i32 %v0_100064bc, 88
  store i32 %v1_100064bc, i32* @ecx, align 4
  %v0_100064bf = call i32 @function_1000d140()
  %v0_100064c4 = load i32, i32* @esi, align 4
  %v1_100064c4 = add i32 %v0_100064c4, 104
  store i32 %v1_100064c4, i32* @ecx, align 4
  %v0_100064c7 = call i32 @function_1000d140()
  %v0_100064cc = load i32, i32* @esi, align 4
  %v1_100064cc = add i32 %v0_100064cc, 120
  store i32 %v1_100064cc, i32* @ecx, align 4
  %v0_100064cf = call i32 @function_1000d140()
  %v0_100064d4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064d4 = load i32, i32* @esi, align 4
  %v2_100064d4 = add i32 %v1_100064d4, 136
  %v3_100064d4 = inttoptr i32 %v2_100064d4 to i32*
  store i32 %v0_100064d4, i32* %v3_100064d4, align 4
  %v0_100064da = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064da = load i32, i32* @esi, align 4
  %v2_100064da = add i32 %v1_100064da, 140
  %v3_100064da = inttoptr i32 %v2_100064da to i32*
  store i32 %v0_100064da, i32* %v3_100064da, align 4
  %v0_100064e0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064e0 = load i32, i32* @esi, align 4
  %v2_100064e0 = add i32 %v1_100064e0, 144
  %v3_100064e0 = inttoptr i32 %v2_100064e0 to i32*
  store i32 %v0_100064e0, i32* %v3_100064e0, align 4
  %v0_100064e6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064e6 = load i32, i32* @esi, align 4
  %v2_100064e6 = add i32 %v1_100064e6, 148
  %v3_100064e6 = inttoptr i32 %v2_100064e6 to i32*
  store i32 %v0_100064e6, i32* %v3_100064e6, align 4
  %v0_100064ec = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064ec = load i32, i32* @esi, align 4
  %v2_100064ec = add i32 %v1_100064ec, 152
  %v3_100064ec = inttoptr i32 %v2_100064ec to i32*
  store i32 %v0_100064ec, i32* %v3_100064ec, align 4
  %v0_100064f2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064f2 = load i32, i32* @esi, align 4
  %v2_100064f2 = add i32 %v1_100064f2, 156
  %v3_100064f2 = inttoptr i32 %v2_100064f2 to i32*
  store i32 %v0_100064f2, i32* %v3_100064f2, align 4
  %v0_100064f8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064f8 = load i32, i32* @esi, align 4
  %v2_100064f8 = add i32 %v1_100064f8, 160
  %v3_100064f8 = inttoptr i32 %v2_100064f8 to i32*
  store i32 %v0_100064f8, i32* %v3_100064f8, align 4
  %v0_100064fe = load i32, i32* %ebx.global-to-local, align 4
  %v1_100064fe = load i32, i32* @esi, align 4
  %v2_100064fe = add i32 %v1_100064fe, 164
  %v3_100064fe = inttoptr i32 %v2_100064fe to i32*
  store i32 %v0_100064fe, i32* %v3_100064fe, align 4
  %v0_10006504 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10006504 = load i32, i32* @esi, align 4
  %v2_10006504 = add i32 %v1_10006504, 168
  %v3_10006504 = inttoptr i32 %v2_10006504 to i32*
  store i32 %v0_10006504, i32* %v3_10006504, align 4
  %v0_1000650a = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000650a = load i32, i32* @esi, align 4
  %v2_1000650a = add i32 %v1_1000650a, 172
  %v3_1000650a = inttoptr i32 %v2_1000650a to i32*
  store i32 %v0_1000650a, i32* %v3_1000650a, align 4
  %v0_10006510 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10006510 = load i32, i32* @esi, align 4
  %v2_10006510 = add i32 %v1_10006510, 176
  %v3_10006510 = inttoptr i32 %v2_10006510 to i32*
  store i32 %v0_10006510, i32* %v3_10006510, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10022c3c.185, i32 0, i32 0), i8** %stack_var_-16, align 4
  %v0_1000651b = load i32, i32* @esi, align 4
  %v1_1000651b = add i32 %v0_1000651b, 56
  store i32 %v1_1000651b, i32* @ecx, align 4
  %v0_1000651e = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000651e = add i32 %v0_1000651b, 180
  %v3_1000651e = inttoptr i32 %v2_1000651e to i32*
  store i32 %v0_1000651e, i32* %v3_1000651e, align 4
  %v0_10006524 = load i8*, i8** %stack_var_-16, align 4
  %v3_10006524 = call i32 @function_1000d100(i8* %v0_10006524)
  %v0_1000652e = load i32, i32* @esi, align 4
  %v1_1000652e = add i32 %v0_1000652e, 72
  store i32 %v1_1000652e, i32* @ecx, align 4
  %v3_10006531 = call i32 @function_1000d100(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_10023140.255, i32 0, i32 0))
  %v0_10006537 = load i32, i32* @esi, align 4
  %v2_1000653a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000653a, i32* %ebx.global-to-local, align 4
  ret i32 %v0_10006537
}

define i32 @function_10006540(i8* %arg1) local_unnamed_addr {
dec_label_pc_10006540:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp15 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-308 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-316 = alloca i32, align 4
  %v16_10006543 = ptrtoint i32* %stack_var_-316 to i32
  store i32 0, i32* @esi, align 4
  %v0_1000654d = load i32, i32* @ecx, align 4
  store i32 %v0_1000654d, i32* @ebx, align 4
  store i32 0, i32* %stack_var_-28, align 4
  %v1_10006562 = add i32 %v0_1000654d, 152
  %v2_10006562 = inttoptr i32 %v1_10006562 to i32*
  %v3_10006562 = load i32, i32* %v2_10006562, align 4
  %v7_10006568 = icmp sgt i32 %v3_10006562, 0
  %v4_10006589 = ptrtoint i8* %arg1 to i32
  br i1 %v7_10006568, label %dec_label_pc_1000656e, label %dec_label_pc_10006540.dec_label_pc_10006666_crit_edge

dec_label_pc_10006540.dec_label_pc_10006666_crit_edge: ; preds = %dec_label_pc_10006540
  %.pre10 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_10006666

dec_label_pc_1000656e:                            ; preds = %dec_label_pc_10006540
  %v2_1000659d = ptrtoint i32* %stack_var_-308 to i32
  %v2_100065b8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_100065d0 = ptrtoint i32* %stack_var_-28 to i32
  %v11_1000661b = icmp slt i32 %tmp15, 0
  %v2_10006626 = icmp eq i1 %v11_1000661b, false
  br label %dec_label_pc_10006571

dec_label_pc_10006571:                            ; preds = %dec_label_pc_1000664d, %dec_label_pc_1000656e
  %v0_10006571 = phi i32 [ %v0_1000654d, %dec_label_pc_1000656e ], [ %v1_10006658, %dec_label_pc_1000664d ]
  %stack_var_-16.0 = phi i32 [ 0, %dec_label_pc_1000656e ], [ %v1_100065de, %dec_label_pc_1000664d ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_1000656e ], [ %v1_10006654, %dec_label_pc_1000664d ]
  %stack_var_-8.0 = phi i32 [ 0, %dec_label_pc_1000656e ], [ %v4_10006650, %dec_label_pc_1000664d ]
  %v1_10006571 = add i32 %v0_10006571, 140
  %v2_10006571 = inttoptr i32 %v1_10006571 to i32*
  %v3_10006571 = load i32, i32* %v2_10006571, align 4
  %v5_10006577 = add i32 %v3_10006571, %stack_var_-8.0
  store i32 %v5_10006577, i32* @ecx, align 4
  %v0_1000657a = call i32 @function_1000d070()
  store i32 %v0_1000657a, i32* %eax.global-to-local, align 4
  %v0_1000657f = load i32, i32* @ebx, align 4
  %v1_1000657f = add i32 %v0_1000657f, 72
  store i32 %v1_1000657f, i32* @ecx, align 4
  store i32 %v0_1000657a, i32* @edi, align 4
  %v0_10006584 = call i32 @function_1000d070()
  store i32 %v0_10006584, i32* %eax.global-to-local, align 4
  %v1_1000658c = load i32, i32* @esp, align 4
  %v2_1000658c = add i32 %v1_1000658c, -4
  %v3_1000658c = inttoptr i32 %v2_1000658c to i32*
  store i32 %v4_10006589, i32* %v3_1000658c, align 4
  %v0_1000658d = load i32, i32* @edi, align 4
  %v2_1000658d = add i32 %v1_1000658c, -8
  %v3_1000658d = inttoptr i32 %v2_1000658d to i32*
  store i32 %v0_1000658d, i32* %v3_1000658d, align 4
  %v0_1000658e = load i32, i32* %eax.global-to-local, align 4
  %v2_1000658e = add i32 %v1_1000658c, -12
  %v3_1000658e = inttoptr i32 %v2_1000658e to i32*
  store i32 %v0_1000658e, i32* %v3_1000658e, align 4
  %v0_1000658f = load i32, i32* @ebx, align 4
  %v1_1000658f = add i32 %v0_1000658f, 40
  store i32 %v1_1000658f, i32* @ecx, align 4
  %v0_10006592 = call i32 @function_1000d070()
  store i32 %v0_10006592, i32* %eax.global-to-local, align 4
  %v1_10006597 = load i32, i32* @esp, align 4
  %v2_10006597 = add i32 %v1_10006597, -4
  %v3_10006597 = inttoptr i32 %v2_10006597 to i32*
  store i32 %v0_10006592, i32* %v3_10006597, align 4
  %v1_10006598 = add i32 %v1_10006597, -8
  %v2_10006598 = inttoptr i32 %v1_10006598 to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10023168.256 to i32), i32* %v2_10006598, align 4
  store i32 %v2_1000659d, i32* %edx.global-to-local, align 4
  %v1_100065a3 = add i32 %v1_10006597, -12
  %v2_100065a3 = inttoptr i32 %v1_100065a3 to i32*
  store i32 260, i32* %v2_100065a3, align 4
  %v2_100065a8 = add i32 %v1_10006597, -16
  %v3_100065a8 = inttoptr i32 %v2_100065a8 to i32*
  store i32 %v2_1000659d, i32* %v3_100065a8, align 4
  %v2_100065a9 = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  %v0_100065ae = load i32, i32* @esp, align 4
  store i32 %v2_1000659d, i32* %eax.global-to-local, align 4
  %v2_100065b7 = add i32 %v0_100065ae, 24
  %v3_100065b7 = inttoptr i32 %v2_100065b7 to i32*
  store i32 %v2_1000659d, i32* %v3_100065b7, align 4
  store i32 %v2_100065b8, i32* @ecx, align 4
  %v1_100065bb = call i32 @function_1000d150(i32 ptrtoint (i32* @5 to i32))
  store i32 0, i32* @eax, align 4
  %v0_100065c3 = load i32, i32* @esi, align 4
  %v1_100065c3 = add i32 %v0_100065c3, 1
  store i32 %v1_100065c3, i32* @ecx, align 4
  store i32 %v0_100065c3, i32* @edi, align 4
  %v7_100065ca = icmp sgt i32 %v1_100065c3, 0
  br i1 %v7_100065ca, label %dec_label_pc_100065cc, label %dec_label_pc_100065db

dec_label_pc_100065cc:                            ; preds = %dec_label_pc_10006571
  store i32 %v1_100065c3, i32* @esi, align 4
  %v1_100065cf = load i32, i32* @esp, align 4
  %v2_100065cf = add i32 %v1_100065cf, -4
  %v3_100065cf = inttoptr i32 %v2_100065cf to i32*
  store i32 %v1_100065c3, i32* %v3_100065cf, align 4
  store i32 %v2_100065d0, i32* @ecx, align 4
  %v1_100065d3 = call i32 @function_10005750(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100065d3, i32* %eax.global-to-local, align 4
  %v1_100065e1.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_100065db

dec_label_pc_100065db:                            ; preds = %dec_label_pc_10006571, %dec_label_pc_100065cc
  %v0_100065de = phi i32 [ %v0_100065c3, %dec_label_pc_10006571 ], [ %stack_var_-16.0, %dec_label_pc_100065cc ]
  %v0_100065ee = phi i32 [ %v0_100065c3, %dec_label_pc_10006571 ], [ %v1_100065e1.pre, %dec_label_pc_100065cc ]
  %v3_100065db = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_100065db, i32* @ecx, align 4
  %v1_100065de = add i32 %v0_100065de, 1
  store i32 %v1_100065de, i32* @esi, align 4
  %v2_100065e1 = sub i32 %v1_100065de, %v0_100065ee
  %v1_100065e3 = add i32 %v2_100065e1, -1
  store i32 %v1_100065e3, i32* %eax.global-to-local, align 4
  %tmp42 = icmp slt i32 %v1_100065e3, 1
  br i1 %tmp42, label %dec_label_pc_10006609, label %dec_label_pc_100065ee

dec_label_pc_100065ee:                            ; preds = %dec_label_pc_100065db
  %v2_100065f0 = mul i32 %v0_100065ee, 16
  store i32 %v2_100065f0, i32* %edx.global-to-local, align 4
  %v2_100065f3 = mul i32 %v1_100065e3, 16
  store i32 %v2_100065f3, i32* %eax.global-to-local, align 4
  %v2_100065f6 = add i32 %v3_100065db, %v2_100065f0
  store i32 %v2_100065f6, i32* @ecx, align 4
  %v1_100065f8 = load i32, i32* @esp, align 4
  %v2_100065f8 = add i32 %v1_100065f8, -4
  %v3_100065f8 = inttoptr i32 %v2_100065f8 to i32*
  store i32 %v2_100065f3, i32* %v3_100065f8, align 4
  %v0_100065f9 = load i32, i32* @ecx, align 4
  %v2_100065f9 = add i32 %v1_100065f8, -8
  %v3_100065f9 = inttoptr i32 %v2_100065f9 to i32*
  store i32 %v0_100065f9, i32* %v3_100065f9, align 4
  %v0_100065fa = load i32, i32* @ecx, align 4
  %v1_100065fa = add i32 %v0_100065fa, 16
  store i32 %v1_100065fa, i32* @ecx, align 4
  %v2_100065fd = add i32 %v1_100065f8, -12
  %v3_100065fd = inttoptr i32 %v2_100065fd to i32*
  store i32 %v1_100065fa, i32* %v3_100065fd, align 4
  %v1_100065fe = inttoptr i32 %v1_100065de to i32*
  %v3_100065fe = inttoptr i32 %v3_100065db to i32*
  %v5_100065fe = call i32* @_memcpy(i32* %v1_100065fe, i32* %v3_100065fe, i32 ptrtoint (i32* @5 to i32))
  %v7_100065fe = ptrtoint i32* %v5_100065fe to i32
  store i32 %v7_100065fe, i32* %eax.global-to-local, align 4
  %v3_10006603 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_10006603, i32* @ecx, align 4
  %v0_10006609.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10006609

dec_label_pc_10006609:                            ; preds = %dec_label_pc_100065ee, %dec_label_pc_100065db
  %v1_1000660c = phi i32 [ %v3_10006603, %dec_label_pc_100065ee ], [ %v3_100065db, %dec_label_pc_100065db ]
  %v0_10006609 = phi i32 [ %v0_10006609.pre, %dec_label_pc_100065ee ], [ %v0_100065ee, %dec_label_pc_100065db ]
  %v2_10006609 = mul i32 %v0_10006609, 16
  %v2_1000660c = add i32 %v2_10006609, %v1_1000660c
  %v12_1000660c = icmp eq i32 %v2_1000660c, 0
  store i32 %v2_1000660c, i32* @edi, align 4
  br i1 %v12_1000660c, label %dec_label_pc_1000661b, label %dec_label_pc_10006610

dec_label_pc_10006610:                            ; preds = %dec_label_pc_10006609
  store i32 %v2_100065b8, i32* %eax.global-to-local, align 4
  %v1_10006613 = load i32, i32* @esp, align 4
  %v2_10006613 = add i32 %v1_10006613, -4
  %v3_10006613 = inttoptr i32 %v2_10006613 to i32*
  store i32 %v2_100065b8, i32* %v3_10006613, align 4
  %v0_10006614 = load i32, i32* @edi, align 4
  store i32 %v0_10006614, i32* @ecx, align 4
  %v1_10006616 = call i32 @function_1000d190(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10006616, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000661b

dec_label_pc_1000661b:                            ; preds = %dec_label_pc_10006610, %dec_label_pc_10006609
  br i1 %v2_10006626, label %dec_label_pc_10006628, label %dec_label_pc_1000664d

dec_label_pc_10006628:                            ; preds = %dec_label_pc_1000661b
  %v3_10006628 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10006628, i32* %eax.global-to-local, align 4
  %v1_1000662b = icmp eq i32 %v3_10006628, 0
  br i1 %v1_1000662b, label %dec_label_pc_1000664d, label %dec_label_pc_1000662f

dec_label_pc_1000662f:                            ; preds = %dec_label_pc_10006628
  %v0_1000662f = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000662f, i32* @ecx, align 4
  %v1_10006635 = inttoptr i32 %v0_1000662f to i32*
  %v2_10006635 = load i32, i32* %v1_10006635, align 4
  store i32 %v2_10006635, i32* @ecx, align 4
  %v1_10006637 = inttoptr i32 %v2_10006635 to i32*
  %v2_10006637 = load i32, i32* %v1_10006637, align 4
  store i32 %v2_10006637, i32* %edx.global-to-local, align 4
  %v1_10006639 = load i32, i32* @esp, align 4
  %v2_10006639 = add i32 %v1_10006639, -4
  %v3_10006639 = inttoptr i32 %v2_10006639 to i32*
  store i32 %v3_10006628, i32* %v3_10006639, align 4
  %v0_1000663a = load i32, i32* %edx.global-to-local, align 4
  %v1_1000663a = add i32 %v0_1000663a, 20
  %v2_1000663a = inttoptr i32 %v1_1000663a to i32*
  %v3_1000663a = load i32, i32* %v2_1000663a, align 4
  store i32 %v3_1000663a, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_1000664d

dec_label_pc_1000664d:                            ; preds = %dec_label_pc_10006628, %dec_label_pc_1000662f, %dec_label_pc_1000661b
  %v4_10006650 = add i32 %stack_var_-8.0, 32
  %v1_10006654 = add i32 %stack_var_-32.0, 1
  store i32 %v1_10006654, i32* %eax.global-to-local, align 4
  %v1_10006658 = load i32, i32* @ebx, align 4
  %v2_10006658 = add i32 %v1_10006658, 152
  %v3_10006658 = inttoptr i32 %v2_10006658 to i32*
  %v4_10006658 = load i32, i32* %v3_10006658, align 4
  %v5_1000665e = icmp slt i32 %v1_10006654, %v4_10006658
  br i1 %v5_1000665e, label %dec_label_pc_10006571, label %dec_label_pc_10006664

dec_label_pc_10006664:                            ; preds = %dec_label_pc_1000664d
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_10006666

dec_label_pc_10006666:                            ; preds = %dec_label_pc_10006540.dec_label_pc_10006666_crit_edge, %dec_label_pc_10006664
  %v2_10006698.pre-phi = phi i32 [ %.pre10, %dec_label_pc_10006540.dec_label_pc_10006666_crit_edge ], [ %v2_100065d0, %dec_label_pc_10006664 ]
  %v0_10006666 = phi i32 [ %v0_1000654d, %dec_label_pc_10006540.dec_label_pc_10006666_crit_edge ], [ %v1_10006658, %dec_label_pc_10006664 ]
  %v1_10006666 = add i32 %v0_10006666, 56
  store i32 %v1_10006666, i32* @ecx, align 4
  %v0_10006669 = call i32 @function_1000d070()
  store i32 %v0_10006669, i32* %eax.global-to-local, align 4
  %v0_1000666e = load i32, i32* @ebx, align 4
  %v1_1000666e = add i32 %v0_1000666e, 40
  store i32 %v1_1000666e, i32* @ecx, align 4
  store i32 %v0_10006669, i32* @edi, align 4
  %v0_10006673 = call i32 @function_1000d070()
  store i32 %v0_10006673, i32* %eax.global-to-local, align 4
  store i32 %v4_10006589, i32* @ecx, align 4
  %v1_1000667b = load i32, i32* @esp, align 4
  %v2_1000667b = add i32 %v1_1000667b, -4
  %v3_1000667b = inttoptr i32 %v2_1000667b to i32*
  store i32 %v4_10006589, i32* %v3_1000667b, align 4
  %v0_1000667c = load i32, i32* @edi, align 4
  %v2_1000667c = add i32 %v1_1000667b, -8
  %v3_1000667c = inttoptr i32 %v2_1000667c to i32*
  store i32 %v0_1000667c, i32* %v3_1000667c, align 4
  %v0_1000667d = load i32, i32* %eax.global-to-local, align 4
  %v2_1000667d = add i32 %v1_1000667b, -12
  %v3_1000667d = inttoptr i32 %v2_1000667d to i32*
  store i32 %v0_1000667d, i32* %v3_1000667d, align 4
  store i32 %v16_10006543, i32* %edx.global-to-local, align 4
  %v1_10006684 = add i32 %v1_1000667b, -16
  %v2_10006684 = inttoptr i32 %v1_10006684 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022c08.164 to i32), i32* %v2_10006684, align 4
  %v2_10006689 = add i32 %v1_1000667b, -20
  %v3_10006689 = inttoptr i32 %v2_10006689 to i32*
  store i32 %v16_10006543, i32* %v3_10006689, align 4
  %v1_1000668a = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v1_1000668f = add i32 %v1_1000668a, 5
  store i32 %v1_1000668f, i32* %eax.global-to-local, align 4
  %v0_10006692 = load i32, i32* @esp, align 4
  %v1_10006692 = add i32 %v0_10006692, -4
  %v2_10006692 = inttoptr i32 %v1_10006692 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100222cc.166 to i32), i32* %v2_10006692, align 4
  %v0_10006697 = load i32, i32* %eax.global-to-local, align 4
  %v2_10006697 = add i32 %v0_10006692, -8
  %v3_10006697 = inttoptr i32 %v2_10006697 to i32*
  store i32 %v0_10006697, i32* %v3_10006697, align 4
  store i32 %v2_10006698.pre-phi, i32* %eax.global-to-local, align 4
  %v2_1000669b = add i32 %v0_10006692, -12
  %v3_1000669b = inttoptr i32 %v2_1000669b to i32*
  store i32 %v2_10006698.pre-phi, i32* %v3_1000669b, align 4
  %v3_1000669c = call i32 @function_10006280(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_1000669c, i32* @eax, align 4
  store i32 %v2_10006698.pre-phi, i32* @ecx, align 4
  %v0_100066a7 = call i32 @function_10005db0()
  store i32 %v0_100066a7, i32* %eax.global-to-local, align 4
  %v4_100066ac = load i32, i32* @esi, align 4
  %v5_100066af = icmp sgt i32 %v4_100066ac, 0
  br i1 %v5_100066af, label %dec_label_pc_100066c8, label %dec_label_pc_100066b1

dec_label_pc_100066b1:                            ; preds = %dec_label_pc_10006666
  %v3_100066b1 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_100066b1, i32* %eax.global-to-local, align 4
  %v12_100066b4 = icmp eq i32 %v3_100066b1, %v4_100066ac
  br i1 %v12_100066b4, label %dec_label_pc_100066c8, label %dec_label_pc_100066b8

dec_label_pc_100066b8:                            ; preds = %dec_label_pc_100066b1
  %v0_100066b8 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100066b8, i32* @ecx, align 4
  %v1_100066be = inttoptr i32 %v0_100066b8 to i32*
  %v2_100066be = load i32, i32* %v1_100066be, align 4
  store i32 %v2_100066be, i32* @ecx, align 4
  %v1_100066c0 = inttoptr i32 %v2_100066be to i32*
  %v2_100066c0 = load i32, i32* %v1_100066c0, align 4
  store i32 %v2_100066c0, i32* %edx.global-to-local, align 4
  %v1_100066c2 = load i32, i32* @esp, align 4
  %v2_100066c2 = add i32 %v1_100066c2, -4
  %v3_100066c2 = inttoptr i32 %v2_100066c2 to i32*
  store i32 %v3_100066b1, i32* %v3_100066c2, align 4
  %v0_100066c3 = load i32, i32* %edx.global-to-local, align 4
  %v1_100066c3 = add i32 %v0_100066c3, 20
  %v2_100066c3 = inttoptr i32 %v1_100066c3 to i32*
  %v3_100066c3 = load i32, i32* %v2_100066c3, align 4
  store i32 %v3_100066c3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100066c8

dec_label_pc_100066c8:                            ; preds = %dec_label_pc_100066b8, %dec_label_pc_100066b1, %dec_label_pc_10006666
  %v0_100066ce = phi i32 [ %v3_100066c3, %dec_label_pc_100066b8 ], [ %v3_100066b1, %dec_label_pc_100066b1 ], [ %v0_100066a7, %dec_label_pc_10006666 ]
  %v0_100066c8 = load i32, i32* @esp, align 4
  %v1_100066c8 = inttoptr i32 %v0_100066c8 to i32*
  %v2_100066c8 = load i32, i32* %v1_100066c8, align 4
  store i32 %v2_100066c8, i32* @edi, align 4
  %v3_100066c8 = add i32 %v0_100066c8, 4
  %v1_100066c9 = inttoptr i32 %v3_100066c8 to i32*
  %v2_100066c9 = load i32, i32* %v1_100066c9, align 4
  store i32 %v2_100066c9, i32* @esi, align 4
  %v3_100066c9 = add i32 %v0_100066c8, 8
  %v1_100066ca = inttoptr i32 %v3_100066c9 to i32*
  %v2_100066ca = load i32, i32* %v1_100066ca, align 4
  store i32 %v2_100066ca, i32* @ebx, align 4
  ret i32 %v0_100066ce
}

define i32 @function_100066e0() local_unnamed_addr {
dec_label_pc_100066e0:
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-532 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100066e0 = load i32, i32* @ebp, align 4
  store i32 %v0_100066e0, i32* %stack_var_-4, align 4
  %v4_100066e0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100066e0, i32* @ebp, align 4
  %v15_100066e3 = ptrtoint i32* %stack_var_-532 to i32
  %v0_100066ea = load i32, i32* @ecx, align 4
  store i32 %v0_100066ea, i32* @esi, align 4
  %v1_100066ed = add i32 %v0_100066ea, 56
  store i32 %v1_100066ed, i32* @ecx, align 4
  %v0_100066f0 = call i32 @function_1000d070()
  %v0_100066f6 = load i32, i32* @esi, align 4
  %v1_100066f6 = add i32 %v0_100066f6, 40
  store i32 %v1_100066f6, i32* @ecx, align 4
  %v0_100066f9 = call i32 @function_1000d070()
  %v7_10006710 = call i32 @function_10009a90(i32* nonnull %stack_var_-264, i32 260, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022c60.190, i32 0, i32 0))
  %v0_10006715 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10006715, i32* @ecx, align 4
  %v0_10006736 = load i32, i32* @esi, align 4
  store i32 %v0_10006736, i32* @ecx, align 4
  %v3_10006738 = call i32 @function_10006540(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_10022c14.163, i32 0, i32 0))
  %v0_10006742 = load i32, i32* @esi, align 4
  store i32 %v0_10006742, i32* @ecx, align 4
  %v3_10006744 = call i32 @function_10006540(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_10022c8c.193, i32 0, i32 0))
  store i32 0, i32* @edi, align 4
  %v0_1000674b = load i32, i32* @esi, align 4
  %v1_1000674b = add i32 %v0_1000674b, 172
  %v2_1000674b = inttoptr i32 %v1_1000674b to i32*
  %v3_1000674b = load i32, i32* %v2_1000674b, align 4
  %v7_10006751 = icmp sgt i32 %v3_1000674b, 0
  br i1 %v7_10006751, label %dec_label_pc_10006753, label %dec_label_pc_100066e0.dec_label_pc_1000679a_crit_edge

dec_label_pc_100066e0.dec_label_pc_1000679a_crit_edge: ; preds = %dec_label_pc_100066e0
  %v0_1000679a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000679a

dec_label_pc_10006753:                            ; preds = %dec_label_pc_100066e0
  br label %dec_label_pc_10006760

dec_label_pc_10006760:                            ; preds = %dec_label_pc_10006760, %dec_label_pc_10006753
  %v1_10006766 = phi i32 [ %v1_1000678e, %dec_label_pc_10006760 ], [ 0, %dec_label_pc_10006753 ]
  %v0_10006760 = phi i32 [ %v1_10006791, %dec_label_pc_10006760 ], [ %v0_1000674b, %dec_label_pc_10006753 ]
  %v1_10006760 = add i32 %v0_10006760, 160
  %v2_10006760 = inttoptr i32 %v1_10006760 to i32*
  %v3_10006760 = load i32, i32* %v2_10006760, align 4
  %v2_10006766 = add i32 %v3_10006760, %v1_10006766
  store i32 %v2_10006766, i32* @ecx, align 4
  %v0_10006768 = call i32 @function_1000d070()
  %v1_1000676d = load i32, i32* @esp, align 4
  %v2_1000676d = add i32 %v1_1000676d, -4
  %v3_1000676d = inttoptr i32 %v2_1000676d to i32*
  store i32 %v0_10006768, i32* %v3_1000676d, align 4
  %v1_10006774 = add i32 %v1_1000676d, -8
  %v2_10006774 = inttoptr i32 %v1_10006774 to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_10023174.257 to i32), i32* %v2_10006774, align 4
  %v2_10006779 = add i32 %v1_1000676d, -12
  %v3_10006779 = inttoptr i32 %v2_10006779 to i32*
  store i32 %v15_100066e3, i32* %v3_10006779, align 4
  %v1_1000677a = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v0_1000677f = load i32, i32* @esp, align 4
  %v1_10006782 = add i32 %v1_1000677a, 5
  %v2_10006785 = add i32 %v0_1000677f, 8
  %v3_10006785 = inttoptr i32 %v2_10006785 to i32*
  store i32 %v1_10006782, i32* %v3_10006785, align 4
  %v0_10006786 = load i32, i32* @esi, align 4
  store i32 %v0_10006786, i32* @ecx, align 4
  %v1_10006788 = call i32 @function_10006540(i8* bitcast (i32* @5 to i8*))
  %v0_1000678d = load i32, i32* @edi, align 4
  %v1_1000678d = add i32 %v0_1000678d, 1
  store i32 %v1_1000678d, i32* @edi, align 4
  %v0_1000678e = load i32, i32* @ebx, align 4
  %v1_1000678e = add i32 %v0_1000678e, 16
  %v1_10006791 = load i32, i32* @esi, align 4
  %v2_10006791 = add i32 %v1_10006791, 172
  %v3_10006791 = inttoptr i32 %v2_10006791 to i32*
  %v4_10006791 = load i32, i32* %v3_10006791, align 4
  %v5_10006797 = icmp slt i32 %v1_1000678d, %v4_10006791
  br i1 %v5_10006797, label %dec_label_pc_10006760, label %dec_label_pc_10006799

dec_label_pc_10006799:                            ; preds = %dec_label_pc_10006760
  %v0_10006799 = load i32, i32* @esp, align 4
  %v1_10006799 = inttoptr i32 %v0_10006799 to i32*
  %v2_10006799 = load i32, i32* %v1_10006799, align 4
  store i32 %v2_10006799, i32* @ebx, align 4
  %v3_10006799 = add i32 %v0_10006799, 4
  br label %dec_label_pc_1000679a

dec_label_pc_1000679a:                            ; preds = %dec_label_pc_100066e0.dec_label_pc_1000679a_crit_edge, %dec_label_pc_10006799
  %v0_1000679f = phi i32 [ %v3_10006744, %dec_label_pc_100066e0.dec_label_pc_1000679a_crit_edge ], [ %v1_10006788, %dec_label_pc_10006799 ]
  %v0_1000679a = phi i32 [ %v0_1000679a.pre, %dec_label_pc_100066e0.dec_label_pc_1000679a_crit_edge ], [ %v3_10006799, %dec_label_pc_10006799 ]
  %v1_1000679a = inttoptr i32 %v0_1000679a to i32*
  %v2_1000679a = load i32, i32* %v1_1000679a, align 4
  store i32 %v2_1000679a, i32* @edi, align 4
  %v3_1000679a = add i32 %v0_1000679a, 4
  %v1_1000679b = inttoptr i32 %v3_1000679a to i32*
  %v2_1000679b = load i32, i32* %v1_1000679b, align 4
  store i32 %v2_1000679b, i32* @esi, align 4
  %v2_1000679e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000679e, i32* @ebp, align 4
  ret i32 %v0_1000679f
}

define i32 @function_100067a0() {
dec_label_pc_100067a0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-268 = alloca i32*, align 4
  %stack_var_-267 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-1040 = alloca i32, align 4
  %stack_var_-780 = alloca i32, align 4
  %stack_var_-1552 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100067a0 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_100067a0, i32* %stack_var_-4, align 4
  %v4_100067a0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100067a0, i32* @ebp, align 4
  %v16_100067a3 = ptrtoint i32* %stack_var_-1552 to i32
  %v0_100067a9 = load i32, i32* %esi.global-to-local, align 4
  %v0_100067aa = load i32, i32* @ecx, align 4
  store i32 %v0_100067aa, i32* @esi, align 4
  %v1_100067ac = add i32 %v0_100067aa, 5
  %v2_100067ac = inttoptr i32 %v1_100067ac to i8*
  %v3_100067ac = load i8, i8* %v2_100067ac, align 1
  %v10_100067ac = icmp eq i8 %v3_100067ac, 0
  %v1_100067b0 = icmp eq i1 %v10_100067ac, false
  br i1 %v1_100067b0, label %dec_label_pc_100067b9, label %dec_label_pc_100067b2

dec_label_pc_100067b2:                            ; preds = %dec_label_pc_100067a0
  %v0_100067b2 = load i32, i32* %eax.global-to-local, align 4
  %v1_100067b2 = and i32 %v0_100067b2, -256
  %v2_100067b2 = or i32 %v1_100067b2, 1
  store i32 %v2_100067b2, i32* %eax.global-to-local, align 4
  store i32 %v0_100067a9, i32* %esi.global-to-local, align 4
  store i32 %v0_100067a0, i32* %ebp.global-to-local, align 4
  ret i32 %v2_100067b2

dec_label_pc_100067b9:                            ; preds = %dec_label_pc_100067a0
  %v1_100067b9 = add i32 %v0_100067aa, 180
  %v2_100067b9 = inttoptr i32 %v1_100067b9 to i32*
  %v3_100067b9 = load i32, i32* %v2_100067b9, align 4
  %v7_100067bf = icmp eq i32 %v3_100067b9, 0
  store i32 %v3_100067b9, i32* %eax.global-to-local, align 4
  %v0_100067c4 = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_100067c4, i32* @edi, align 4
  store i32 1, i32* @ebx, align 4
  br i1 %v7_100067bf, label %dec_label_pc_1000681e, label %dec_label_pc_100067d1

dec_label_pc_100067d1:                            ; preds = %dec_label_pc_100067b9
  %v2_100067d1 = add i32 %v3_100067b9, -1
  %v12_100067d1 = icmp eq i32 %v2_100067d1, 0
  store i32 %v2_100067d1, i32* %eax.global-to-local, align 4
  br i1 %v12_100067d1, label %dec_label_pc_100067eb, label %dec_label_pc_100067d5

dec_label_pc_100067d5:                            ; preds = %dec_label_pc_100067d1
  %v2_100067d5 = add i32 %v3_100067b9, -2
  %v12_100067d5 = icmp eq i32 %v2_100067d5, 0
  store i32 %v2_100067d5, i32* %eax.global-to-local, align 4
  br i1 %v12_100067d5, label %dec_label_pc_100067df, label %dec_label_pc_100067d9

dec_label_pc_100067d9:                            ; preds = %dec_label_pc_100067d5
  store i8 0, i8* %v2_100067ac, align 1
  br label %dec_label_pc_10006824

dec_label_pc_100067df:                            ; preds = %dec_label_pc_100067d5
  store i32 3, i32* %v2_100067b9, align 4
  br label %dec_label_pc_10006824

dec_label_pc_100067eb:                            ; preds = %dec_label_pc_100067d1
  %v0_100067eb = call i32 @CommandLine()
  store i32 %v0_100067eb, i32* %eax.global-to-local, align 4
  %v1_100067ed = inttoptr i32 %v0_100067eb to i32*
  %v2_100067ed = load i32, i32* %v1_100067ed, align 4
  store i32 %v2_100067ed, i32* %edx.global-to-local, align 4
  store i32 %v0_100067eb, i32* @ecx, align 4
  %v1_100067f1 = add i32 %v2_100067ed, 16
  %v2_100067f1 = inttoptr i32 %v1_100067f1 to i32*
  %v3_100067f1 = load i32, i32* %v2_100067f1, align 4
  store i32 %v3_100067f1, i32* %eax.global-to-local, align 4
  %v0_100067fb = load i32, i32* @esi, align 4
  %v1_100067fb = add i32 %v0_100067fb, 136
  %v2_100067fb = inttoptr i32 %v1_100067fb to i32*
  %v3_100067fb = load i32, i32* %v2_100067fb, align 4
  %v4_100067fb = load i32, i32* @ebx, align 4
  %v5_100067fb = add i32 %v4_100067fb, %v3_100067fb
  store i32 %v5_100067fb, i32* %v2_100067fb, align 4
  %v0_10006801 = load i32, i32* @esi, align 4
  %v1_10006801 = add i32 %v0_10006801, 136
  %v2_10006801 = inttoptr i32 %v1_10006801 to i32*
  %v3_10006801 = load i32, i32* %v2_10006801, align 4
  store i32 %v3_10006801, i32* %eax.global-to-local, align 4
  %v2_10006807 = add i32 %v0_10006801, 152
  %v3_10006807 = inttoptr i32 %v2_10006807 to i32*
  %v4_10006807 = load i32, i32* %v3_10006807, align 4
  %v5_1000680d = icmp slt i32 %v3_10006801, %v4_10006807
  br i1 %v5_1000680d, label %dec_label_pc_10006824, label %dec_label_pc_1000680f

dec_label_pc_1000680f:                            ; preds = %dec_label_pc_100067eb
  store i32 %v0_10006801, i32* @ecx, align 4
  %v0_10006811 = call i32 @function_100066e0()
  store i32 %v0_10006811, i32* %eax.global-to-local, align 4
  %v0_10006816 = load i32, i32* @esi, align 4
  %v1_10006816 = add i32 %v0_10006816, 180
  %v2_10006816 = inttoptr i32 %v1_10006816 to i32*
  %v3_10006816 = load i32, i32* %v2_10006816, align 4
  %v4_10006816 = load i32, i32* @ebx, align 4
  %v5_10006816 = add i32 %v4_10006816, %v3_10006816
  store i32 %v5_10006816, i32* %v2_10006816, align 4
  br label %dec_label_pc_10006824

dec_label_pc_1000681e:                            ; preds = %dec_label_pc_100067b9
  store i32 1, i32* %v2_100067b9, align 4
  br label %dec_label_pc_10006824

dec_label_pc_10006824:                            ; preds = %dec_label_pc_1000681e, %dec_label_pc_1000680f, %dec_label_pc_100067eb, %dec_label_pc_100067df, %dec_label_pc_100067d9
  %v0_10006824 = load i32, i32* @esi, align 4
  %v1_10006824 = add i32 %v0_10006824, 180
  %v2_10006824 = inttoptr i32 %v1_10006824 to i32*
  %v3_10006824 = load i32, i32* %v2_10006824, align 4
  %v1_1000682a = load i32, i32* @ebx, align 4
  %v2_1000682a = sub i32 %v3_10006824, %v1_1000682a
  %v12_1000682a = icmp eq i32 %v2_1000682a, 0
  store i32 %v2_1000682a, i32* %eax.global-to-local, align 4
  br i1 %v12_1000682a, label %dec_label_pc_100068c1, label %dec_label_pc_10006832

dec_label_pc_10006832:                            ; preds = %dec_label_pc_10006824
  %v2_10006832 = sub i32 %v2_1000682a, %v1_1000682a
  %v12_10006832 = icmp eq i32 %v2_10006832, 0
  store i32 %v2_10006832, i32* %eax.global-to-local, align 4
  br i1 %v12_10006832, label %dec_label_pc_1000683f, label %dec_label_pc_10006836

dec_label_pc_10006836:                            ; preds = %dec_label_pc_10006832
  %v1_10006836 = add i32 %v0_10006824, 5
  %v2_10006836 = inttoptr i32 %v1_10006836 to i8*
  store i8 0, i8* %v2_10006836, align 1
  br label %dec_label_pc_10006a43

dec_label_pc_1000683f:                            ; preds = %dec_label_pc_10006832
  %v1_1000683f = add i32 %v0_10006824, 6
  %v2_1000683f = inttoptr i32 %v1_1000683f to i8*
  %v3_1000683f = load i8, i8* %v2_1000683f, align 1
  %v10_1000683f = icmp eq i8 %v3_1000683f, 0
  br i1 %v10_1000683f, label %dec_label_pc_1000684e, label %dec_label_pc_10006845

dec_label_pc_10006845:                            ; preds = %dec_label_pc_1000683f
  %v1_10006845 = add i32 %v0_10006824, 5
  %v2_10006845 = inttoptr i32 %v1_10006845 to i8*
  store i8 0, i8* %v2_10006845, align 1
  br label %dec_label_pc_10006a43

dec_label_pc_1000684e:                            ; preds = %dec_label_pc_1000683f
  %v1_1000684e = add i32 %v0_10006824, 56
  store i32 %v1_1000684e, i32* @ecx, align 4
  %v0_10006851 = call i32 @function_1000d070()
  store i32 %v0_10006851, i32* %eax.global-to-local, align 4
  %v1_10006856 = load i32, i32* @esp, align 4
  %v2_10006856 = add i32 %v1_10006856, -4
  %v3_10006856 = inttoptr i32 %v2_10006856 to i32*
  store i32 %v0_10006851, i32* %v3_10006856, align 4
  %v0_10006857 = load i32, i32* @esi, align 4
  %v1_10006857 = add i32 %v0_10006857, 104
  store i32 %v1_10006857, i32* @ecx, align 4
  %v0_1000685a = call i32 @function_1000d070()
  store i32 %v0_1000685a, i32* %eax.global-to-local, align 4
  %v1_1000685f = load i32, i32* @esp, align 4
  %v2_1000685f = add i32 %v1_1000685f, -4
  %v3_1000685f = inttoptr i32 %v2_1000685f to i32*
  store i32 %v0_1000685a, i32* %v3_1000685f, align 4
  %v1_10006860 = add i32 %v1_1000685f, -8
  %v2_10006860 = inttoptr i32 %v1_10006860 to i32*
  store i32 ptrtoint ([32 x i8]* @global_var_10023224.258 to i32), i32* %v2_10006860, align 4
  %v2_10006865 = ptrtoint i32* %stack_var_-780 to i32
  store i32 %v2_10006865, i32* @ecx, align 4
  %v1_1000686b = add i32 %v1_1000685f, -12
  %v2_1000686b = inttoptr i32 %v1_1000686b to i32*
  store i32 512, i32* %v2_1000686b, align 4
  %v2_10006870 = add i32 %v1_1000685f, -16
  %v3_10006870 = inttoptr i32 %v2_10006870 to i32*
  store i32 %v2_10006865, i32* %v3_10006870, align 4
  %v2_10006871 = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_10006871, i32* %eax.global-to-local, align 4
  %v0_10006879 = call i32 @CommandLine()
  store i32 %v0_10006879, i32* %eax.global-to-local, align 4
  %v1_1000687b = inttoptr i32 %v0_10006879 to i32*
  %v2_1000687b = load i32, i32* %v1_1000687b, align 4
  store i32 %v2_1000687b, i32* %edx.global-to-local, align 4
  %v1_1000687d = add i32 %v2_1000687b, 4
  %v2_1000687d = inttoptr i32 %v1_1000687d to i32*
  %v3_1000687d = load i32, i32* %v2_1000687d, align 4
  store i32 %v3_1000687d, i32* %edx.global-to-local, align 4
  %v1_10006886 = load i32, i32* @esp, align 4
  %v2_10006886 = add i32 %v1_10006886, -4
  %v3_10006886 = inttoptr i32 %v2_10006886 to i32*
  store i32 %v2_10006865, i32* %v3_10006886, align 4
  %v0_10006887 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006887, i32* @ecx, align 4
  %v0_1000688b = call i32 @CommandLine()
  store i32 %v0_1000688b, i32* %eax.global-to-local, align 4
  %v1_1000688d = inttoptr i32 %v0_1000688b to i32*
  %v2_1000688d = load i32, i32* %v1_1000688d, align 4
  store i32 %v2_1000688d, i32* %edx.global-to-local, align 4
  store i32 %v0_1000688b, i32* @ecx, align 4
  %v1_10006891 = add i32 %v2_1000688d, 16
  %v2_10006891 = inttoptr i32 %v1_10006891 to i32*
  %v3_10006891 = load i32, i32* %v2_10006891, align 4
  store i32 %v3_10006891, i32* %eax.global-to-local, align 4
  %v0_10006894 = load i32, i32* @esp, align 4
  %v1_10006894 = add i32 %v0_10006894, -4
  %v2_10006894 = inttoptr i32 %v1_10006894 to i32*
  store i32 ptrtoint ([16 x i8]* @global_var_10023214.259 to i32), i32* %v2_10006894, align 4
  %v0_1000689b = call i32 @CommandLine()
  store i32 %v0_1000689b, i32* %eax.global-to-local, align 4
  %v1_1000689d = inttoptr i32 %v0_1000689b to i32*
  %v2_1000689d = load i32, i32* %v1_1000689d, align 4
  store i32 %v2_1000689d, i32* %edx.global-to-local, align 4
  store i32 %v0_1000689b, i32* @ecx, align 4
  %v1_100068a1 = add i32 %v2_1000689d, 16
  %v2_100068a1 = inttoptr i32 %v1_100068a1 to i32*
  %v3_100068a1 = load i32, i32* %v2_100068a1, align 4
  store i32 %v3_100068a1, i32* %eax.global-to-local, align 4
  %v0_100068a4 = load i32, i32* @esp, align 4
  %v1_100068a4 = add i32 %v0_100068a4, -4
  %v2_100068a4 = inttoptr i32 %v1_100068a4 to i32*
  store i32 ptrtoint ([14 x i8]* @global_var_10022c7c.187 to i32), i32* %v2_100068a4, align 4
  %v0_100068ab = call i32 @CommandLine()
  store i32 %v0_100068ab, i32* %eax.global-to-local, align 4
  %v1_100068ad = inttoptr i32 %v0_100068ab to i32*
  %v2_100068ad = load i32, i32* %v1_100068ad, align 4
  store i32 %v2_100068ad, i32* %edx.global-to-local, align 4
  store i32 %v0_100068ab, i32* @ecx, align 4
  %v1_100068b1 = add i32 %v2_100068ad, 8
  %v2_100068b1 = inttoptr i32 %v1_100068b1 to i32*
  %v3_100068b1 = load i32, i32* %v2_100068b1, align 4
  store i32 %v3_100068b1, i32* %eax.global-to-local, align 4
  %v1_100068b6 = load i32, i32* @esp, align 4
  %v2_100068b6 = add i32 %v1_100068b6, -4
  %v3_100068b6 = inttoptr i32 %v2_100068b6 to i32*
  store i32 %v3_100068b1, i32* %v3_100068b6, align 4
  %v1_100068b7 = add i32 %v1_100068b6, -8
  %v2_100068b7 = inttoptr i32 %v1_100068b7 to i32*
  store i32 ptrtoint ([47 x i8]* @global_var_100231e4.260 to i32), i32* %v2_100068b7, align 4
  br label %dec_label_pc_10006a3a

dec_label_pc_100068c1:                            ; preds = %dec_label_pc_10006824
  %v1_100068c1 = add i32 %v0_10006824, 136
  %v2_100068c1 = inttoptr i32 %v1_100068c1 to i32*
  %v3_100068c1 = load i32, i32* %v2_100068c1, align 4
  %v2_100068c7 = mul i32 %v3_100068c1, 32
  store i32 %v2_100068c7, i32* %ebx.global-to-local, align 4
  %v2_100068ca = add i32 %v0_10006824, 140
  %v3_100068ca = inttoptr i32 %v2_100068ca to i32*
  %v4_100068ca = load i32, i32* %v3_100068ca, align 4
  %v5_100068ca = add i32 %v4_100068ca, %v2_100068c7
  store i32 %v5_100068ca, i32* %ebx.global-to-local, align 4
  store i32 %v5_100068ca, i32* @ecx, align 4
  %v0_100068d2 = call i32 @function_1000d070()
  store i32 %v0_100068d2, i32* %eax.global-to-local, align 4
  %v1_100068d7 = load i32, i32* @esp, align 4
  %v2_100068d7 = add i32 %v1_100068d7, -4
  %v3_100068d7 = inttoptr i32 %v2_100068d7 to i32*
  store i32 %v0_100068d2, i32* %v3_100068d7, align 4
  %v0_100068d8 = load i32, i32* @esi, align 4
  %v1_100068d8 = add i32 %v0_100068d8, 72
  store i32 %v1_100068d8, i32* @ecx, align 4
  %v0_100068db = call i32 @function_1000d070()
  store i32 %v0_100068db, i32* %eax.global-to-local, align 4
  %v1_100068e0 = load i32, i32* @esp, align 4
  %v2_100068e0 = add i32 %v1_100068e0, -4
  %v3_100068e0 = inttoptr i32 %v2_100068e0 to i32*
  store i32 %v0_100068db, i32* %v3_100068e0, align 4
  %v1_100068e1 = add i32 %v1_100068e0, -8
  %v2_100068e1 = inttoptr i32 %v1_100068e1 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022c60.190 to i32), i32* %v2_100068e1, align 4
  %v2_100068e6 = ptrtoint i32* %stack_var_-780 to i32
  store i32 %v2_100068e6, i32* @ecx, align 4
  %v1_100068ec = add i32 %v1_100068e0, -12
  %v2_100068ec = inttoptr i32 %v1_100068ec to i32*
  store i32 512, i32* %v2_100068ec, align 4
  %v2_100068f1 = add i32 %v1_100068e0, -16
  %v3_100068f1 = inttoptr i32 %v2_100068f1 to i32*
  store i32 %v2_100068e6, i32* %v3_100068f1, align 4
  %v2_100068f2 = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_100068f2, i32* %eax.global-to-local, align 4
  %v0_100068f7 = load i32, i32* @esp, align 4
  store i32 %v2_100068e6, i32* %edx.global-to-local, align 4
  %v2_10006900 = add i32 %v0_100068f7, 16
  %v3_10006900 = inttoptr i32 %v2_10006900 to i32*
  store i32 %v2_100068e6, i32* %v3_10006900, align 4
  %v0_10006901 = load i32, i32* @esi, align 4
  %v1_10006901 = add i32 %v0_10006901, 40
  store i32 %v1_10006901, i32* @ecx, align 4
  %v0_10006904 = call i32 @function_1000d070()
  %v1_10006909 = load i32, i32* @esp, align 4
  %v2_10006909 = add i32 %v1_10006909, -4
  %v3_10006909 = inttoptr i32 %v2_10006909 to i32*
  store i32 %v0_10006904, i32* %v3_10006909, align 4
  %v1_1000690a = add i32 %v1_10006909, -8
  %v2_1000690a = inttoptr i32 %v1_1000690a to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10022c60.190 to i32), i32* %v2_1000690a, align 4
  %v2_1000690f = ptrtoint i32* %stack_var_-1040 to i32
  store i32 %v2_1000690f, i32* %eax.global-to-local, align 4
  %v1_10006915 = add i32 %v1_10006909, -12
  %v2_10006915 = inttoptr i32 %v1_10006915 to i32*
  store i32 260, i32* %v2_10006915, align 4
  %v2_1000691a = add i32 %v1_10006909, -16
  %v3_1000691a = inttoptr i32 %v2_1000691a to i32*
  store i32 %v2_1000690f, i32* %v3_1000691a, align 4
  %v2_1000691b = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_1000691b, i32* %eax.global-to-local, align 4
  %v0_10006920 = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10006920, i32* @ecx, align 4
  %v1_10006926 = inttoptr i32 %v0_10006920 to i32*
  %v2_10006926 = load i32, i32* %v1_10006926, align 4
  store i32 %v2_10006926, i32* %edx.global-to-local, align 4
  %v1_10006928 = add i32 %v2_10006926, 80
  %v2_10006928 = inttoptr i32 %v1_10006928 to i32*
  %v3_10006928 = load i32, i32* %v2_10006928, align 4
  store i32 %v3_10006928, i32* %edx.global-to-local, align 4
  %v0_1000692b = load i32, i32* @esp, align 4
  %v1_1000692e = add i32 %v0_1000692b, 16
  %v2_1000692e = inttoptr i32 %v1_1000692e to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100222cc.166 to i32), i32* %v2_1000692e, align 4
  store i32 %v2_1000690f, i32* %eax.global-to-local, align 4
  %v2_10006939 = add i32 %v0_1000692b, 12
  %v3_10006939 = inttoptr i32 %v2_10006939 to i32*
  store i32 %v2_1000690f, i32* %v3_10006939, align 4
  store i32 0, i32* %stack_var_-8, align 4
  %v0_10006943 = call i32 @CommandLine()
  store i32 %v0_10006943, i32* %eax.global-to-local, align 4
  %v1_10006945 = inttoptr i32 %v0_10006943 to i32*
  %v2_10006945 = load i32, i32* %v1_10006945, align 4
  store i32 %v2_10006945, i32* %edx.global-to-local, align 4
  %v1_10006947 = add i32 %v2_10006945, 12
  %v2_10006947 = inttoptr i32 %v1_10006947 to i32*
  %v3_10006947 = load i32, i32* %v2_10006947, align 4
  store i32 %v3_10006947, i32* %edx.global-to-local, align 4
  %v2_1000694a = ptrtoint i32* %stack_var_-8 to i32
  %v1_1000694d = load i32, i32* @esp, align 4
  %v2_1000694d = add i32 %v1_1000694d, -4
  %v3_1000694d = inttoptr i32 %v2_1000694d to i32*
  store i32 %v2_1000694a, i32* %v3_1000694d, align 4
  %v1_1000694e = add i32 %v1_1000694d, -8
  %v2_1000694e = inttoptr i32 %v1_1000694e to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022c54.191 to i32), i32* %v2_1000694e, align 4
  %v0_10006953 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006953, i32* @ecx, align 4
  %v1_10006957 = add i32 %v1_1000694d, -12
  %v2_10006957 = inttoptr i32 %v1_10006957 to i32*
  store i32 259, i32* %v2_10006957, align 4
  %v2_1000695c = ptrtoint i32* %stack_var_-267 to i32
  store i32 %v2_1000695c, i32* %eax.global-to-local, align 4
  %v1_10006962 = add i32 %v1_1000694d, -16
  %v2_10006962 = inttoptr i32 %v1_10006962 to i32*
  store i32 0, i32* %v2_10006962, align 4
  %v2_10006964 = add i32 %v1_1000694d, -20
  %v3_10006964 = inttoptr i32 %v2_10006964 to i32*
  store i32 %v2_1000695c, i32* %v3_10006964, align 4
  store i32* null, i32** %stack_var_-268, align 4
  %v5_1000696c = call i32* @_memset(i32* null, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v3_10006971 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_10006971, i32* %eax.global-to-local, align 4
  %v0_10006974 = load i32, i32* @esp, align 4
  %v1_10006977 = icmp eq i32 %v3_10006971, 0
  br i1 %v1_10006977, label %dec_label_pc_10006990, label %dec_label_pc_1000697b

dec_label_pc_1000697b:                            ; preds = %dec_label_pc_100068c1
  %v1_1000697b = add i32 %v0_10006974, 8
  %v2_1000697b = inttoptr i32 %v1_1000697b to i32*
  store i32 260, i32* %v2_1000697b, align 4
  %v2_10006980 = add i32 %v0_10006974, 4
  %v3_10006980 = inttoptr i32 %v2_10006980 to i32*
  store i32 %v3_10006971, i32* %v3_10006980, align 4
  %v2_10006981 = ptrtoint i32** %stack_var_-268 to i32
  store i32 %v2_10006981, i32* @ecx, align 4
  %v3_10006987 = inttoptr i32 %v0_10006974 to i32*
  store i32 %v2_10006981, i32* %v3_10006987, align 4
  %v2_10006988 = call i32 @function_10009a60(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006988, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006990

dec_label_pc_10006990:                            ; preds = %dec_label_pc_1000697b, %dec_label_pc_100068c1
  %v0_10006990 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10006990 = add i32 %v0_10006990, 16
  store i32 %v1_10006990, i32* @ecx, align 4
  %v0_10006993 = call i32 @function_1000d070()
  store i32 %v0_10006993, i32* %eax.global-to-local, align 4
  %v0_10006998 = load i32, i32* @esi, align 4
  %v1_10006998 = add i32 %v0_10006998, 88
  store i32 %v1_10006998, i32* @ecx, align 4
  store i32 %v0_10006993, i32* %ebx.global-to-local, align 4
  %v0_1000699d = call i32 @function_1000d070()
  store i32 %v0_1000699d, i32* %eax.global-to-local, align 4
  store i32 %v2_100068e6, i32* %edx.global-to-local, align 4
  %v1_100069a8 = load i32, i32* @esp, align 4
  %v2_100069a8 = add i32 %v1_100069a8, -4
  %v3_100069a8 = inttoptr i32 %v2_100069a8 to i32*
  store i32 %v2_100068e6, i32* %v3_100069a8, align 4
  %v0_100069a9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_100069a9 = add i32 %v1_100069a8, -8
  %v3_100069a9 = inttoptr i32 %v2_100069a9 to i32*
  store i32 %v0_100069a9, i32* %v3_100069a9, align 4
  %v0_100069aa = load i32, i32* %eax.global-to-local, align 4
  %v2_100069aa = add i32 %v1_100069a8, -12
  %v3_100069aa = inttoptr i32 %v2_100069aa to i32*
  store i32 %v0_100069aa, i32* %v3_100069aa, align 4
  %v0_100069ab = load i32, i32* @esi, align 4
  %v1_100069ab = add i32 %v0_100069ab, 104
  store i32 %v1_100069ab, i32* @ecx, align 4
  %v0_100069ae = call i32 @function_1000d070()
  %v1_100069b3 = load i32, i32* @esp, align 4
  %v2_100069b3 = add i32 %v1_100069b3, -4
  %v3_100069b3 = inttoptr i32 %v2_100069b3 to i32*
  store i32 %v0_100069ae, i32* %v3_100069b3, align 4
  %v1_100069b4 = add i32 %v1_100069b3, -8
  %v2_100069b4 = inttoptr i32 %v1_100069b4 to i32*
  store i32 ptrtoint ([24 x i8]* @global_var_100231cc.261 to i32), i32* %v2_100069b4, align 4
  store i32 %v16_100067a3, i32* %eax.global-to-local, align 4
  %v1_100069bf = add i32 %v1_100069b3, -12
  %v2_100069bf = inttoptr i32 %v1_100069bf to i32*
  store i32 512, i32* %v2_100069bf, align 4
  %v2_100069c4 = add i32 %v1_100069b3, -16
  %v3_100069c4 = inttoptr i32 %v2_100069c4 to i32*
  store i32 %v16_100067a3, i32* %v3_100069c4, align 4
  %v2_100069c5 = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_100069c5, i32* %eax.global-to-local, align 4
  %v0_100069cd = call i32 @CommandLine()
  store i32 %v0_100069cd, i32* %eax.global-to-local, align 4
  %v1_100069cf = inttoptr i32 %v0_100069cd to i32*
  %v2_100069cf = load i32, i32* %v1_100069cf, align 4
  store i32 %v2_100069cf, i32* %edx.global-to-local, align 4
  %v1_100069d1 = add i32 %v2_100069cf, 4
  %v2_100069d1 = inttoptr i32 %v1_100069d1 to i32*
  %v3_100069d1 = load i32, i32* %v2_100069d1, align 4
  store i32 %v3_100069d1, i32* %edx.global-to-local, align 4
  %v1_100069da = load i32, i32* @esp, align 4
  %v2_100069da = add i32 %v1_100069da, -4
  %v3_100069da = inttoptr i32 %v2_100069da to i32*
  store i32 %v16_100067a3, i32* %v3_100069da, align 4
  %v0_100069db = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_100069db, i32* @ecx, align 4
  %v0_100069df = call i32 @CommandLine()
  store i32 %v0_100069df, i32* %eax.global-to-local, align 4
  %v1_100069e1 = inttoptr i32 %v0_100069df to i32*
  %v2_100069e1 = load i32, i32* %v1_100069e1, align 4
  store i32 %v2_100069e1, i32* %edx.global-to-local, align 4
  %v0_100069e3 = load i32, i32* @esp, align 4
  %v1_100069e3 = add i32 %v0_100069e3, -4
  %v2_100069e3 = inttoptr i32 %v1_100069e3 to i32*
  store i32 0, i32* %v2_100069e3, align 4
  %v0_100069e5 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_100069e5, i32* @ecx, align 4
  %v0_100069e7 = load i32, i32* %edx.global-to-local, align 4
  %v1_100069e7 = add i32 %v0_100069e7, 20
  %v2_100069e7 = inttoptr i32 %v1_100069e7 to i32*
  %v3_100069e7 = load i32, i32* %v2_100069e7, align 4
  store i32 %v3_100069e7, i32* %eax.global-to-local, align 4
  %v1_100069ea = add i32 %v0_100069e3, -8
  %v2_100069ea = inttoptr i32 %v1_100069ea to i32*
  store i32 ptrtoint ([16 x i8]* @global_var_10023214.259 to i32), i32* %v2_100069ea, align 4
  %v3_100069f1 = load i32*, i32** %stack_var_-268, align 4
  %tmp256 = ptrtoint i32* %v3_100069f1 to i32
  %v4_100069f1 = trunc i32 %tmp256 to i8
  %v11_100069f1 = icmp eq i8 %v4_100069f1, 0
  br i1 %v11_100069f1, label %dec_label_pc_10006a11, label %dec_label_pc_100069fa

dec_label_pc_100069fa:                            ; preds = %dec_label_pc_10006990
  %v0_100069fa = call i32 @CommandLine()
  store i32 %v0_100069fa, i32* %eax.global-to-local, align 4
  %v1_100069fc = inttoptr i32 %v0_100069fa to i32*
  %v2_100069fc = load i32, i32* %v1_100069fc, align 4
  store i32 %v2_100069fc, i32* %edx.global-to-local, align 4
  %v1_100069fe = add i32 %v2_100069fc, 20
  %v2_100069fe = inttoptr i32 %v1_100069fe to i32*
  %v3_100069fe = load i32, i32* %v2_100069fe, align 4
  store i32 %v3_100069fe, i32* %edx.global-to-local, align 4
  %v2_10006a01 = ptrtoint i32** %stack_var_-268 to i32
  %v1_10006a07 = load i32, i32* @esp, align 4
  %v2_10006a07 = add i32 %v1_10006a07, -4
  %v3_10006a07 = inttoptr i32 %v2_10006a07 to i32*
  store i32 %v2_10006a01, i32* %v3_10006a07, align 4
  %v1_10006a08 = add i32 %v1_10006a07, -8
  %v2_10006a08 = inttoptr i32 %v1_10006a08 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022c54.191 to i32), i32* %v2_10006a08, align 4
  %v0_10006a0d = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006a0d, i32* @ecx, align 4
  br label %dec_label_pc_10006a11

dec_label_pc_10006a11:                            ; preds = %dec_label_pc_100069fa, %dec_label_pc_10006990
  %v0_10006a11 = load i32, i32* @esi, align 4
  %v1_10006a11 = add i32 %v0_10006a11, 6
  %v2_10006a11 = inttoptr i32 %v1_10006a11 to i8*
  %v3_10006a11 = load i8, i8* %v2_10006a11, align 1
  %v10_10006a11 = icmp eq i8 %v3_10006a11, 0
  br i1 %v10_10006a11, label %dec_label_pc_10006a29, label %dec_label_pc_10006a17

dec_label_pc_10006a17:                            ; preds = %dec_label_pc_10006a11
  %v0_10006a17 = call i32 @CommandLine()
  store i32 %v0_10006a17, i32* %eax.global-to-local, align 4
  %v1_10006a19 = inttoptr i32 %v0_10006a17 to i32*
  %v2_10006a19 = load i32, i32* %v1_10006a19, align 4
  store i32 %v2_10006a19, i32* %edx.global-to-local, align 4
  %v0_10006a1b = load i32, i32* @esp, align 4
  %v1_10006a1b = add i32 %v0_10006a1b, -4
  %v2_10006a1b = inttoptr i32 %v1_10006a1b to i32*
  store i32 0, i32* %v2_10006a1b, align 4
  %v0_10006a1d = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006a1d, i32* @ecx, align 4
  %v0_10006a1f = load i32, i32* %edx.global-to-local, align 4
  %v1_10006a1f = add i32 %v0_10006a1f, 20
  %v2_10006a1f = inttoptr i32 %v1_10006a1f to i32*
  %v3_10006a1f = load i32, i32* %v2_10006a1f, align 4
  store i32 %v3_10006a1f, i32* %eax.global-to-local, align 4
  %v1_10006a22 = add i32 %v0_10006a1b, -8
  %v2_10006a22 = inttoptr i32 %v1_10006a22 to i32*
  store i32 ptrtoint ([13 x i8]* @global_var_100231bc.262 to i32), i32* %v2_10006a22, align 4
  br label %dec_label_pc_10006a29

dec_label_pc_10006a29:                            ; preds = %dec_label_pc_10006a17, %dec_label_pc_10006a11
  %v0_10006a29 = call i32 @CommandLine()
  store i32 %v0_10006a29, i32* %eax.global-to-local, align 4
  %v1_10006a2b = inttoptr i32 %v0_10006a29 to i32*
  %v2_10006a2b = load i32, i32* %v1_10006a2b, align 4
  store i32 %v2_10006a2b, i32* %edx.global-to-local, align 4
  store i32 %v0_10006a29, i32* @ecx, align 4
  %v1_10006a2f = add i32 %v2_10006a2b, 8
  %v2_10006a2f = inttoptr i32 %v1_10006a2f to i32*
  %v3_10006a2f = load i32, i32* %v2_10006a2f, align 4
  store i32 %v3_10006a2f, i32* %eax.global-to-local, align 4
  %v1_10006a34 = load i32, i32* @esp, align 4
  %v2_10006a34 = add i32 %v1_10006a34, -4
  %v3_10006a34 = inttoptr i32 %v2_10006a34 to i32*
  store i32 %v3_10006a2f, i32* %v3_10006a34, align 4
  %v1_10006a35 = add i32 %v1_10006a34, -8
  %v2_10006a35 = inttoptr i32 %v1_10006a35 to i32*
  store i32 ptrtoint ([49 x i8]* @global_var_10023188.263 to i32), i32* %v2_10006a35, align 4
  br label %dec_label_pc_10006a3a

dec_label_pc_10006a3a:                            ; preds = %dec_label_pc_10006a29, %dec_label_pc_1000684e
  %v0_10006a3a = call i32 @Warning()
  store i32 %v0_10006a3a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006a43

dec_label_pc_10006a43:                            ; preds = %dec_label_pc_10006a3a, %dec_label_pc_10006845, %dec_label_pc_10006836
  %v0_10006a43 = load i32, i32* @esi, align 4
  %v1_10006a43 = add i32 %v0_10006a43, 5
  %v2_10006a43 = inttoptr i32 %v1_10006a43 to i8*
  %v3_10006a43 = load i8, i8* %v2_10006a43, align 1
  %v10_10006a43 = icmp eq i8 %v3_10006a43, 0
  %v1_10006a47 = icmp eq i1 %v10_10006a43, false
  br i1 %v1_10006a47, label %dec_label_pc_10006a43.dec_label_pc_10006a6b_crit_edge, label %dec_label_pc_10006a49

dec_label_pc_10006a43.dec_label_pc_10006a6b_crit_edge: ; preds = %dec_label_pc_10006a43
  %v0_10006a6e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10006a6b

dec_label_pc_10006a49:                            ; preds = %dec_label_pc_10006a43
  %v0_10006a49 = call i32 @CommandLine()
  store i32 %v0_10006a49, i32* %eax.global-to-local, align 4
  %v1_10006a4b = inttoptr i32 %v0_10006a49 to i32*
  %v2_10006a4b = load i32, i32* %v1_10006a4b, align 4
  store i32 %v2_10006a4b, i32* %edx.global-to-local, align 4
  store i32 %v0_10006a49, i32* @ecx, align 4
  %v1_10006a4f = add i32 %v2_10006a4b, 16
  %v2_10006a4f = inttoptr i32 %v1_10006a4f to i32*
  %v3_10006a4f = load i32, i32* %v2_10006a4f, align 4
  store i32 %v3_10006a4f, i32* %eax.global-to-local, align 4
  %v0_10006a52 = load i32, i32* @esp, align 4
  %v1_10006a52 = add i32 %v0_10006a52, -4
  %v2_10006a52 = inttoptr i32 %v1_10006a52 to i32*
  store i32 ptrtoint ([14 x i8]* @global_var_10022c7c.187 to i32), i32* %v2_10006a52, align 4
  %v0_10006a59 = call i32 @CommandLine()
  store i32 %v0_10006a59, i32* %eax.global-to-local, align 4
  %v1_10006a5b = inttoptr i32 %v0_10006a59 to i32*
  %v2_10006a5b = load i32, i32* %v1_10006a5b, align 4
  store i32 %v2_10006a5b, i32* %edx.global-to-local, align 4
  %v0_10006a5d = load i32, i32* @esp, align 4
  %v1_10006a5d = add i32 %v0_10006a5d, -4
  %v2_10006a5d = inttoptr i32 %v1_10006a5d to i32*
  store i32 0, i32* %v2_10006a5d, align 4
  %v0_10006a5f = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006a5f, i32* @ecx, align 4
  %v0_10006a61 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006a61 = add i32 %v0_10006a61, 20
  %v2_10006a61 = inttoptr i32 %v1_10006a61 to i32*
  %v3_10006a61 = load i32, i32* %v2_10006a61, align 4
  store i32 %v3_10006a61, i32* %eax.global-to-local, align 4
  %v1_10006a64 = add i32 %v0_10006a5d, -8
  %v2_10006a64 = inttoptr i32 %v1_10006a64 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_1002317c.264 to i32), i32* %v2_10006a64, align 4
  %v0_10006a6b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10006a6b

dec_label_pc_10006a6b:                            ; preds = %dec_label_pc_10006a43.dec_label_pc_10006a6b_crit_edge, %dec_label_pc_10006a49
  %v0_10006a6e = phi i32 [ %v1_10006a64, %dec_label_pc_10006a49 ], [ %v0_10006a6e.pre, %dec_label_pc_10006a43.dec_label_pc_10006a6b_crit_edge ]
  %v0_10006a6b = phi i32 [ %v0_10006a6b.pre, %dec_label_pc_10006a49 ], [ %v0_10006a43, %dec_label_pc_10006a43.dec_label_pc_10006a6b_crit_edge ]
  %v1_10006a6b = add i32 %v0_10006a6b, 5
  %v2_10006a6b = inttoptr i32 %v1_10006a6b to i8*
  %v3_10006a6b = load i8, i8* %v2_10006a6b, align 1
  %v4_10006a6b = zext i8 %v3_10006a6b to i32
  %v5_10006a6b = load i32, i32* %eax.global-to-local, align 4
  %v6_10006a6b = and i32 %v5_10006a6b, -256
  %v7_10006a6b = or i32 %v6_10006a6b, %v4_10006a6b
  store i32 %v7_10006a6b, i32* %eax.global-to-local, align 4
  %v3_10006a6e = add i32 %v0_10006a6e, 4
  %v1_10006a6f = inttoptr i32 %v3_10006a6e to i32*
  %v2_10006a6f = load i32, i32* %v1_10006a6f, align 4
  store i32 %v2_10006a6f, i32* %ebx.global-to-local, align 4
  %v3_10006a6f = add i32 %v0_10006a6e, 8
  %v1_10006a70 = inttoptr i32 %v3_10006a6f to i32*
  %v2_10006a70 = load i32, i32* %v1_10006a70, align 4
  store i32 %v2_10006a70, i32* %esi.global-to-local, align 4
  %v2_10006a73 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10006a73, i32* %ebp.global-to-local, align 4
  ret i32 %v7_10006a6b
}

define i32 @function_10006a80(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10006a80:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp23 = ptrtoint i32* %arg1 to i32
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-696 = alloca i32, align 4
  %stack_var_-108 = alloca i8, align 1
  %stack_var_-652 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10006a80 = load i32, i32* @ebp, align 4
  store i32 %v0_10006a80, i32* %stack_var_-4, align 4
  %v4_10006a80 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10006a80, i32* @ebp, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v16_10006a86 = ptrtoint i32* %stack_var_-652 to i32
  %v0_10006a8d = load i32, i32* @ecx, align 4
  store i32 %v0_10006a8d, i32* @esi, align 4
  %v1_10006a8f = inttoptr i32 %arg2 to i8*
  %v2_10006a8f = load i8, i8* %v1_10006a8f, align 1
  %v3_10006a8f = zext i8 %v2_10006a8f to i32
  %v5_10006a8f = and i32 %v0_10006a8d, -256
  %v6_10006a8f = or i32 %v3_10006a8f, %v5_10006a8f
  store i32 %v6_10006a8f, i32* @ecx, align 4
  %v11_10006a91 = icmp eq i8 %v2_10006a8f, 43
  br i1 %v11_10006a91, label %dec_label_pc_10006f36, label %dec_label_pc_10006a9a

dec_label_pc_10006a9a:                            ; preds = %dec_label_pc_10006a80
  %v11_10006a9a = icmp eq i8 %v2_10006a8f, 45
  br i1 %v11_10006a9a, label %dec_label_pc_10006f36, label %dec_label_pc_10006aa3

dec_label_pc_10006aa3:                            ; preds = %dec_label_pc_10006a9a
  store i32 %tmp23, i32* %eax.global-to-local, align 4
  store i32 %v16_10006a86, i32* @ecx, align 4
  %v6_10006ab9 = call i32 @function_10009a90(i32* nonnull %stack_var_-652, i32 512, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022c68.189, i32 0, i32 0))
  store i32 %v6_10006ab9, i32* @eax, align 4
  %v2_10006ac7 = ptrtoint i8* %stack_var_-108 to i32
  store i32 %v2_10006ac7, i32* @ecx, align 4
  %v5_10006aca = call i32 @function_1000c7c0(i32 0, i32 0, i32 0)
  store i32 %v5_10006aca, i32* %eax.global-to-local, align 4
  %v0_10006acf = load i32, i32* @global_var_1002b95c.165, align 4
  store i32 %v0_10006acf, i32* @ecx, align 4
  %v1_10006ad5 = add i32 %v0_10006acf, 4
  %v2_10006ad5 = inttoptr i32 %v1_10006ad5 to i32*
  %v3_10006ad5 = load i32, i32* %v2_10006ad5, align 4
  store i32 %v3_10006ad5, i32* %edx.global-to-local, align 4
  %v1_10006ad8 = add i32 %v3_10006ad5, 56
  %v2_10006ad8 = inttoptr i32 %v1_10006ad8 to i32*
  %v3_10006ad8 = load i32, i32* %v2_10006ad8, align 4
  store i32 %v3_10006ad8, i32* %edx.global-to-local, align 4
  store i32 %v1_10006ad5, i32* @ecx, align 4
  store i32 %v16_10006a86, i32* %eax.global-to-local, align 4
  %v4_10006af6 = trunc i32 %v16_10006a86 to i8
  %v5_10006af6 = icmp eq i8 %v4_10006af6, 0
  %v1_10006af8 = icmp eq i1 %v5_10006af6, false
  br i1 %v1_10006af8, label %dec_label_pc_10006b35, label %dec_label_pc_10006afa

dec_label_pc_10006afa:                            ; preds = %dec_label_pc_10006aa3
  store i32 %v16_10006a86, i32* %eax.global-to-local, align 4
  store i32 %v16_10006a86, i32* %stack_var_-696, align 4
  %v0_10006b06 = call i32 @Error()
  store i32 %v0_10006b06, i32* %eax.global-to-local, align 4
  %v11_10006b0f = icmp slt i32 %tmp31, 0
  %v2_10006b13 = icmp eq i1 %v11_10006b0f, false
  br i1 %v2_10006b13, label %dec_label_pc_10006b15, label %dec_label_pc_10006b2c

dec_label_pc_10006b15:                            ; preds = %dec_label_pc_10006afa
  %v3_10006b15 = load i8, i8* %stack_var_-108, align 1
  %v4_10006b15 = sext i8 %v3_10006b15 to i32
  store i32 %v4_10006b15, i32* %eax.global-to-local, align 4
  %v1_10006b18 = icmp eq i8 %v3_10006b15, 0
  br i1 %v1_10006b18, label %dec_label_pc_10006b2c, label %dec_label_pc_10006b1c

dec_label_pc_10006b1c:                            ; preds = %dec_label_pc_10006b15
  %v0_10006b1c = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10006b1c, i32* @ecx, align 4
  %v1_10006b22 = inttoptr i32 %v0_10006b1c to i32*
  %v2_10006b22 = load i32, i32* %v1_10006b22, align 4
  store i32 %v2_10006b22, i32* @ecx, align 4
  %v1_10006b24 = inttoptr i32 %v2_10006b22 to i32*
  %v2_10006b24 = load i32, i32* %v1_10006b24, align 4
  store i32 %v2_10006b24, i32* %edx.global-to-local, align 4
  store i32 %v4_10006b15, i32* %stack_var_-696, align 4
  %v1_10006b27 = add i32 %v2_10006b24, 20
  %v2_10006b27 = inttoptr i32 %v1_10006b27 to i32*
  %v3_10006b27 = load i32, i32* %v2_10006b27, align 4
  store i32 %v3_10006b27, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006b2c

dec_label_pc_10006b2c:                            ; preds = %dec_label_pc_10006afa, %dec_label_pc_10006b1c, %dec_label_pc_10006b15
  %v11_10006b2c = phi i32 [ %v0_10006b06, %dec_label_pc_10006afa ], [ %v3_10006b27, %dec_label_pc_10006b1c ], [ %v4_10006b15, %dec_label_pc_10006b15 ]
  %v12_10006b2c = and i32 %v11_10006b2c, -256
  store i32 %v12_10006b2c, i32* %eax.global-to-local, align 4
  ret i32 %v12_10006b2c

dec_label_pc_10006b35:                            ; preds = %dec_label_pc_10006aa3
  %v0_10006b35 = load i32, i32* @edi, align 4
  store i32 %v0_10006b35, i32* %stack_var_-696, align 4
  %v4_10006b35 = ptrtoint i32* %stack_var_-696 to i32
  %v2_10006b38 = call i32 @function_1000a480(i32 36)
  store i32 %v2_10006b38, i32* @eax, align 4
  %v1_10006b40 = icmp eq i32 %v2_10006b38, 0
  br i1 %v1_10006b40, label %dec_label_pc_10006b61, label %dec_label_pc_10006b44

dec_label_pc_10006b44:                            ; preds = %dec_label_pc_10006b35
  store i32 %v2_10006b38, i32* @ecx, align 4
  %v2_10006b4b = call i32 @function_1000a4a0(i32 ptrtoint ([9 x i8]* @global_var_10022c3c.185 to i32))
  store i32 %v2_10006b4b, i32* @eax, align 4
  %v0_10006b64.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10006b61

dec_label_pc_10006b61:                            ; preds = %dec_label_pc_10006b35, %dec_label_pc_10006b44
  %v0_10006b64 = phi i32 [ %v0_10006b64.pre, %dec_label_pc_10006b44 ], [ %v4_10006b35, %dec_label_pc_10006b35 ]
  %storemerge = phi i32 [ %v2_10006b4b, %dec_label_pc_10006b44 ], [ 0, %dec_label_pc_10006b35 ]
  store i32 %storemerge, i32* @edi, align 4
  %v3_10006b61 = load i8, i8* %stack_var_-108, align 1
  %v4_10006b61 = sext i8 %v3_10006b61 to i32
  store i32 %v4_10006b61, i32* @ecx, align 4
  %v1_10006b64 = add i32 %v0_10006b64, -4
  %v2_10006b64 = inttoptr i32 %v1_10006b64 to i32*
  store i32 0, i32* %v2_10006b64, align 4
  %v1_10006b66 = add i32 %v0_10006b64, -8
  %v2_10006b66 = inttoptr i32 %v1_10006b66 to i32*
  store i32 0, i32* %v2_10006b66, align 4
  %v1_10006b68 = add i32 %v0_10006b64, -12
  %v2_10006b68 = inttoptr i32 %v1_10006b68 to i32*
  store i32 0, i32* %v2_10006b68, align 4
  %v0_10006b6a = load i32, i32* @ecx, align 4
  %v2_10006b6a = add i32 %v0_10006b64, -16
  %v3_10006b6a = inttoptr i32 %v2_10006b6a to i32*
  store i32 %v0_10006b6a, i32* %v3_10006b6a, align 4
  %v1_10006b6b = add i32 %v0_10006b64, -20
  %v2_10006b6b = inttoptr i32 %v1_10006b6b to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10022c3c.185 to i32), i32* %v2_10006b6b, align 4
  %v0_10006b70 = load i32, i32* @edi, align 4
  store i32 %v0_10006b70, i32* @ecx, align 4
  %v5_10006b72 = call i32 @function_1000b8a0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v5_10006b72, i32* %eax.global-to-local, align 4
  %v4_10006b77 = trunc i32 %v5_10006b72 to i8
  %v5_10006b77 = icmp eq i8 %v4_10006b77, 0
  %v1_10006b79 = icmp eq i1 %v5_10006b77, false
  br i1 %v1_10006b79, label %dec_label_pc_10006ba9, label %dec_label_pc_10006b7b

dec_label_pc_10006b7b:                            ; preds = %dec_label_pc_10006b61
  store i32 %v16_10006a86, i32* %edx.global-to-local, align 4
  %v1_10006b81 = load i32, i32* @esp, align 4
  %v2_10006b81 = add i32 %v1_10006b81, -4
  %v3_10006b81 = inttoptr i32 %v2_10006b81 to i32*
  store i32 %v16_10006a86, i32* %v3_10006b81, align 4
  %v1_10006b82 = add i32 %v1_10006b81, -8
  %v2_10006b82 = inttoptr i32 %v1_10006b82 to i32*
  store i32 ptrtoint ([37 x i8]* @global_var_10023340.266 to i32), i32* %v2_10006b82, align 4
  %v0_10006b87 = call i32 @Error()
  store i32 %v0_10006b87, i32* @eax, align 4
  %v0_10006b90 = load i32, i32* @edi, align 4
  store i32 %v0_10006b90, i32* @ecx, align 4
  %v0_10006b92 = call i32 @function_1000a8a0()
  store i32 %v0_10006b92, i32* @eax, align 4
  store i32 %v2_10006ac7, i32* @ecx, align 4
  %v0_10006b9a = call i32 @function_10003770()
  %v12_10006ba0 = and i32 %v0_10006b9a, -256
  store i32 %v12_10006ba0, i32* %eax.global-to-local, align 4
  ret i32 %v12_10006ba0

dec_label_pc_10006ba9:                            ; preds = %dec_label_pc_10006b61
  %v0_10006ba9 = load i32, i32* @ebx, align 4
  %v1_10006ba9 = load i32, i32* @esp, align 4
  %v2_10006ba9 = add i32 %v1_10006ba9, -4
  %v3_10006ba9 = inttoptr i32 %v2_10006ba9 to i32*
  store i32 %v0_10006ba9, i32* %v3_10006ba9, align 4
  %v1_10006baa = add i32 %v1_10006ba9, -8
  %v2_10006baa = inttoptr i32 %v1_10006baa to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10023334.267 to i32), i32* %v2_10006baa, align 4
  %v1_10006baf = add i32 %v1_10006ba9, -12
  %v2_10006baf = inttoptr i32 %v1_10006baf to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_1002332c.268 to i32), i32* %v2_10006baf, align 4
  %v0_10006bb4 = load i32, i32* @edi, align 4
  store i32 %v0_10006bb4, i32* @ecx, align 4
  %v2_10006bb6 = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006bb6, i32* %eax.global-to-local, align 4
  %v1_10006bbb = load i32, i32* @esp, align 4
  %v2_10006bbb = add i32 %v1_10006bbb, -4
  %v3_10006bbb = inttoptr i32 %v2_10006bbb to i32*
  store i32 %v2_10006bb6, i32* %v3_10006bbb, align 4
  %v2_10006bbc = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_10006bbc, i32* @ecx, align 4
  %v1_10006bbf = call i32 @function_1000d150(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10006bbf, i32* %eax.global-to-local, align 4
  store i32 %v2_10006bbc, i32* @ecx, align 4
  %v0_10006bc7 = load i32, i32* @esi, align 4
  %v1_10006bc7 = add i32 %v0_10006bc7, 160
  store i32 %v1_10006bc7, i32* %ebx.global-to-local, align 4
  %v0_10006bcd = call i32 @function_1000d070()
  %v1_10006bd2 = load i32, i32* @esp, align 4
  %v2_10006bd2 = add i32 %v1_10006bd2, -4
  %v3_10006bd2 = inttoptr i32 %v2_10006bd2 to i32*
  store i32 %v0_10006bcd, i32* %v3_10006bd2, align 4
  store i32 %tmp23, i32* %eax.global-to-local, align 4
  %v0_10006bd6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10006bd6 = add i32 %v1_10006bd2, -8
  %v3_10006bd6 = inttoptr i32 %v2_10006bd6 to i32*
  store i32 %v0_10006bd6, i32* %v3_10006bd6, align 4
  %v0_10006bd7 = load i32, i32* %eax.global-to-local, align 4
  %v2_10006bd7 = add i32 %v1_10006bd2, -12
  %v3_10006bd7 = inttoptr i32 %v2_10006bd7 to i32*
  store i32 %v0_10006bd7, i32* %v3_10006bd7, align 4
  %v0_10006bd8 = load i32, i32* @esi, align 4
  store i32 %v0_10006bd8, i32* @ecx, align 4
  %v3_10006bda = call i32 @function_10005be0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_10006bda, i32* %eax.global-to-local, align 4
  %v0_10006bdf = load i32, i32* @esi, align 4
  %v1_10006bdf = add i32 %v0_10006bdf, 172
  %v2_10006bdf = inttoptr i32 %v1_10006bdf to i32*
  %v3_10006bdf = load i32, i32* %v2_10006bdf, align 4
  %v10_10006bdf = icmp eq i32 %v3_10006bdf, 0
  %v11_10006bdf = icmp slt i32 %v3_10006bdf, 0
  %v3_10006be6 = icmp eq i1 %v11_10006bdf, false
  %v4_10006be6 = icmp eq i1 %v10_10006bdf, false
  %v5_10006be6 = icmp eq i1 %v3_10006be6, %v4_10006be6
  br i1 %v5_10006be6, label %dec_label_pc_10006c21, label %dec_label_pc_10006be8

dec_label_pc_10006be8:                            ; preds = %dec_label_pc_10006ba9
  store i32 %v2_10006bbc, i32* @ecx, align 4
  %v0_10006beb = call i32 @function_1000d070()
  store i32 %v0_10006beb, i32* %eax.global-to-local, align 4
  %v1_10006bf0 = load i32, i32* @esp, align 4
  %v2_10006bf0 = add i32 %v1_10006bf0, -4
  %v3_10006bf0 = inttoptr i32 %v2_10006bf0 to i32*
  store i32 %v0_10006beb, i32* %v3_10006bf0, align 4
  %v1_10006bf1 = add i32 %v1_10006bf0, -8
  %v2_10006bf1 = inttoptr i32 %v1_10006bf1 to i32*
  store i32 ptrtoint ([39 x i8]* @global_var_10023304.269 to i32), i32* %v2_10006bf1, align 4
  %v0_10006bf6 = call i32 @Error()
  store i32 %v0_10006bf6, i32* @eax, align 4
  %v0_10006bff = load i32, i32* @edi, align 4
  store i32 %v0_10006bff, i32* @ecx, align 4
  %v0_10006c01 = call i32 @function_1000a8a0()
  store i32 %v0_10006c01, i32* @eax, align 4
  store i32 %v2_10006bbc, i32* @ecx, align 4
  %v0_10006c09 = call i32 @function_10003730()
  store i32 %v0_10006c09, i32* @eax, align 4
  store i32 %v2_10006ac7, i32* @ecx, align 4
  %v0_10006c11 = call i32 @function_10003770()
  store i32 %v0_10006c11, i32* %eax.global-to-local, align 4
  %v0_10006c16 = load i32, i32* @esp, align 4
  %v1_10006c16 = inttoptr i32 %v0_10006c16 to i32*
  %v2_10006c16 = load i32, i32* %v1_10006c16, align 4
  store i32 %v2_10006c16, i32* %ebx.global-to-local, align 4
  %v12_10006c18 = and i32 %v0_10006c11, -256
  store i32 %v12_10006c18, i32* %eax.global-to-local, align 4
  ret i32 %v12_10006c18

dec_label_pc_10006c21:                            ; preds = %dec_label_pc_10006ba9
  %v0_10006c21 = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_10006c21, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %stack_var_-8, align 4
  %v0_10006c2e = call i32 @CommandLine()
  store i32 %v0_10006c2e, i32* @eax, align 4
  %v1_10006c30 = inttoptr i32 %v0_10006c2e to i32*
  %v2_10006c30 = load i32, i32* %v1_10006c30, align 4
  store i32 %v2_10006c30, i32* %edx.global-to-local, align 4
  %v1_10006c32 = add i32 %v2_10006c30, 12
  %v2_10006c32 = inttoptr i32 %v1_10006c32 to i32*
  %v3_10006c32 = load i32, i32* %v2_10006c32, align 4
  store i32 %v3_10006c32, i32* %edx.global-to-local, align 4
  %v2_10006c35 = ptrtoint i32* %stack_var_-8 to i32
  %v1_10006c38 = load i32, i32* @esp, align 4
  %v2_10006c38 = add i32 %v1_10006c38, -4
  %v3_10006c38 = inttoptr i32 %v2_10006c38 to i32*
  store i32 %v2_10006c35, i32* %v3_10006c38, align 4
  %v1_10006c39 = add i32 %v1_10006c38, -8
  %v2_10006c39 = inttoptr i32 %v1_10006c39 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100232fc.270 to i32), i32* %v2_10006c39, align 4
  store i32 %v0_10006c2e, i32* @ecx, align 4
  %v1_10006c42 = icmp eq i32 %v0_10006c2e, 0
  br i1 %v1_10006c42, label %dec_label_pc_10006c89, label %dec_label_pc_10006c46

dec_label_pc_10006c46:                            ; preds = %dec_label_pc_10006c21
  %v3_10006c46 = load i32, i32* %stack_var_-8, align 4
  %v10_10006c46 = icmp eq i32 %v3_10006c46, 0
  br i1 %v10_10006c46, label %dec_label_pc_10006c89, label %dec_label_pc_10006c4c

dec_label_pc_10006c4c:                            ; preds = %dec_label_pc_10006c46
  %v0_10006c4c = load i32, i32* @esi, align 4
  %v1_10006c4c = add i32 %v0_10006c4c, 160
  store i32 %v1_10006c4c, i32* @ecx, align 4
  %v0_10006c52 = call i32 @function_10005f40()
  store i32 %v0_10006c52, i32* %eax.global-to-local, align 4
  %v2_10006c57 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_10006c57, i32* @ecx, align 4
  %v0_10006c5a = call i32 @function_1000d140()
  %v3_10006c5f = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_10006c5f, i32* %eax.global-to-local, align 4
  %v1_10006c62 = load i32, i32* @esp, align 4
  %v2_10006c62 = add i32 %v1_10006c62, -4
  %v3_10006c62 = inttoptr i32 %v2_10006c62 to i32*
  store i32 %v3_10006c5f, i32* %v3_10006c62, align 4
  store i32 %v2_10006c57, i32* @ecx, align 4
  %v1_10006c66 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006c66, i32* %eax.global-to-local, align 4
  %v0_10006c6b = load i32, i32* @esi, align 4
  %v1_10006c6b = add i32 %v0_10006c6b, 172
  %v2_10006c6b = inttoptr i32 %v1_10006c6b to i32*
  %v3_10006c6b = load i32, i32* %v2_10006c6b, align 4
  store i32 %v3_10006c6b, i32* %edx.global-to-local, align 4
  %v1_10006c74 = load i32, i32* @esp, align 4
  %v2_10006c74 = add i32 %v1_10006c74, -4
  %v3_10006c74 = inttoptr i32 %v2_10006c74 to i32*
  store i32 %v2_10006c57, i32* %v3_10006c74, align 4
  %v0_10006c75 = load i32, i32* @esi, align 4
  %v1_10006c75 = add i32 %v0_10006c75, 160
  store i32 %v1_10006c75, i32* @ecx, align 4
  %v0_10006c7b = load i32, i32* %edx.global-to-local, align 4
  %v2_10006c7b = add i32 %v1_10006c74, -8
  %v3_10006c7b = inttoptr i32 %v2_10006c7b to i32*
  store i32 %v0_10006c7b, i32* %v3_10006c7b, align 4
  %v2_10006c7c = call i32 @function_10005a80(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006c7c, i32* @eax, align 4
  store i32 %v2_10006c57, i32* @ecx, align 4
  %v0_10006c84 = call i32 @function_10003730()
  store i32 %v0_10006c84, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006c89

dec_label_pc_10006c89:                            ; preds = %dec_label_pc_10006c4c, %dec_label_pc_10006c46, %dec_label_pc_10006c21
  %v0_10006c89 = call i32 @CommandLine()
  store i32 %v0_10006c89, i32* %eax.global-to-local, align 4
  %v1_10006c8b = inttoptr i32 %v0_10006c89 to i32*
  %v2_10006c8b = load i32, i32* %v1_10006c8b, align 4
  store i32 %v2_10006c8b, i32* %edx.global-to-local, align 4
  %v0_10006c8d = load i32, i32* @esp, align 4
  %v1_10006c8d = add i32 %v0_10006c8d, -4
  %v2_10006c8d = inttoptr i32 %v1_10006c8d to i32*
  store i32 0, i32* %v2_10006c8d, align 4
  %v0_10006c8f = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006c8f, i32* @ecx, align 4
  %v0_10006c91 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006c91 = add i32 %v0_10006c91, 28
  %v2_10006c91 = inttoptr i32 %v1_10006c91 to i32*
  %v3_10006c91 = load i32, i32* %v2_10006c91, align 4
  store i32 %v3_10006c91, i32* %eax.global-to-local, align 4
  %v1_10006c94 = add i32 %v0_10006c8d, -8
  %v2_10006c94 = inttoptr i32 %v1_10006c94 to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022c48.192 to i32), i32* %v2_10006c94, align 4
  %v0_10006c9b = load i32, i32* %eax.global-to-local, align 4
  %v1_10006c9b = load i32, i32* @esi, align 4
  %v2_10006c9b = add i32 %v1_10006c9b, 136
  %v3_10006c9b = inttoptr i32 %v2_10006c9b to i32*
  store i32 %v0_10006c9b, i32* %v3_10006c9b, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v0_10006ca8 = call i32 @CommandLine()
  store i32 %v0_10006ca8, i32* %eax.global-to-local, align 4
  %v1_10006caa = inttoptr i32 %v0_10006ca8 to i32*
  %v2_10006caa = load i32, i32* %v1_10006caa, align 4
  store i32 %v2_10006caa, i32* %edx.global-to-local, align 4
  %v1_10006cac = add i32 %v2_10006caa, 12
  %v2_10006cac = inttoptr i32 %v1_10006cac to i32*
  %v3_10006cac = load i32, i32* %v2_10006cac, align 4
  store i32 %v3_10006cac, i32* %edx.global-to-local, align 4
  %v2_10006caf = ptrtoint i32* %stack_var_-12 to i32
  %v1_10006cb2 = load i32, i32* @esp, align 4
  %v2_10006cb2 = add i32 %v1_10006cb2, -4
  %v3_10006cb2 = inttoptr i32 %v2_10006cb2 to i32*
  store i32 %v2_10006caf, i32* %v3_10006cb2, align 4
  %v1_10006cb3 = add i32 %v1_10006cb2, -8
  %v2_10006cb3 = inttoptr i32 %v1_10006cb3 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022c54.191 to i32), i32* %v2_10006cb3, align 4
  %v0_10006cb8 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006cb8, i32* @ecx, align 4
  %v3_10006cbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_10006cbc, i32* %eax.global-to-local, align 4
  %v1_10006cbf = icmp eq i32 %v3_10006cbc, 0
  br i1 %v1_10006cbf, label %dec_label_pc_10006ccc, label %dec_label_pc_10006cc3

dec_label_pc_10006cc3:                            ; preds = %dec_label_pc_10006c89
  %v2_10006cc3 = add i32 %v1_10006cb2, -12
  %v3_10006cc3 = inttoptr i32 %v2_10006cc3 to i32*
  store i32 %v3_10006cbc, i32* %v3_10006cc3, align 4
  %v0_10006cc4 = load i32, i32* @esi, align 4
  %v1_10006cc4 = add i32 %v0_10006cc4, 120
  store i32 %v1_10006cc4, i32* @ecx, align 4
  %v1_10006cc7 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006cc7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ccc

dec_label_pc_10006ccc:                            ; preds = %dec_label_pc_10006cc3, %dec_label_pc_10006c89
  %v0_10006ccc = call i32 @CommandLine()
  store i32 %v0_10006ccc, i32* %eax.global-to-local, align 4
  %v1_10006cce = inttoptr i32 %v0_10006ccc to i32*
  %v2_10006cce = load i32, i32* %v1_10006cce, align 4
  store i32 %v2_10006cce, i32* %edx.global-to-local, align 4
  store i32 %v0_10006ccc, i32* @ecx, align 4
  %v1_10006cd2 = add i32 %v2_10006cce, 16
  %v2_10006cd2 = inttoptr i32 %v1_10006cd2 to i32*
  %v3_10006cd2 = load i32, i32* %v2_10006cd2, align 4
  store i32 %v3_10006cd2, i32* %eax.global-to-local, align 4
  %v0_10006cd5 = load i32, i32* @esp, align 4
  %v1_10006cd5 = add i32 %v0_10006cd5, -4
  %v2_10006cd5 = inttoptr i32 %v1_10006cd5 to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022c48.192 to i32), i32* %v2_10006cd5, align 4
  %v0_10006cdc = call i32 @CommandLine()
  store i32 %v0_10006cdc, i32* %eax.global-to-local, align 4
  %v1_10006cde = inttoptr i32 %v0_10006cdc to i32*
  %v2_10006cde = load i32, i32* %v1_10006cde, align 4
  store i32 %v2_10006cde, i32* %edx.global-to-local, align 4
  store i32 %v0_10006cdc, i32* @ecx, align 4
  %v1_10006ce2 = add i32 %v2_10006cde, 16
  %v2_10006ce2 = inttoptr i32 %v1_10006ce2 to i32*
  %v3_10006ce2 = load i32, i32* %v2_10006ce2, align 4
  store i32 %v3_10006ce2, i32* %eax.global-to-local, align 4
  %v0_10006ce5 = load i32, i32* @esp, align 4
  %v1_10006ce5 = add i32 %v0_10006ce5, -4
  %v2_10006ce5 = inttoptr i32 %v1_10006ce5 to i32*
  store i32 ptrtoint ([14 x i8]* @global_var_10022c7c.187 to i32), i32* %v2_10006ce5, align 4
  %v0_10006cec = call i32 @CommandLine()
  store i32 %v0_10006cec, i32* %eax.global-to-local, align 4
  %v1_10006cee = inttoptr i32 %v0_10006cec to i32*
  %v2_10006cee = load i32, i32* %v1_10006cee, align 4
  store i32 %v2_10006cee, i32* %edx.global-to-local, align 4
  store i32 %v0_10006cec, i32* @ecx, align 4
  %v1_10006cf2 = add i32 %v2_10006cee, 16
  %v2_10006cf2 = inttoptr i32 %v1_10006cf2 to i32*
  %v3_10006cf2 = load i32, i32* %v2_10006cf2, align 4
  store i32 %v3_10006cf2, i32* %eax.global-to-local, align 4
  %v0_10006cf5 = load i32, i32* @esp, align 4
  %v1_10006cf5 = add i32 %v0_10006cf5, -4
  %v2_10006cf5 = inttoptr i32 %v1_10006cf5 to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_10022c70.188 to i32), i32* %v2_10006cf5, align 4
  %v0_10006cfc = call i32 @CommandLine()
  store i32 %v0_10006cfc, i32* %eax.global-to-local, align 4
  %v1_10006cfe = inttoptr i32 %v0_10006cfc to i32*
  %v2_10006cfe = load i32, i32* %v1_10006cfe, align 4
  store i32 %v2_10006cfe, i32* %edx.global-to-local, align 4
  store i32 %v0_10006cfc, i32* @ecx, align 4
  %v1_10006d02 = add i32 %v2_10006cfe, 16
  %v2_10006d02 = inttoptr i32 %v1_10006d02 to i32*
  %v3_10006d02 = load i32, i32* %v2_10006d02, align 4
  store i32 %v3_10006d02, i32* %eax.global-to-local, align 4
  %v0_10006d05 = load i32, i32* @esp, align 4
  %v1_10006d05 = add i32 %v0_10006d05, -4
  %v2_10006d05 = inttoptr i32 %v1_10006d05 to i32*
  store i32 ptrtoint ([16 x i8]* @global_var_10023214.259 to i32), i32* %v2_10006d05, align 4
  %v0_10006d0c = call i32 @CommandLine()
  store i32 %v0_10006d0c, i32* %eax.global-to-local, align 4
  %v1_10006d0e = inttoptr i32 %v0_10006d0c to i32*
  %v2_10006d0e = load i32, i32* %v1_10006d0e, align 4
  store i32 %v2_10006d0e, i32* %edx.global-to-local, align 4
  store i32 %v0_10006d0c, i32* @ecx, align 4
  %v1_10006d12 = add i32 %v2_10006d0e, 16
  %v2_10006d12 = inttoptr i32 %v1_10006d12 to i32*
  %v3_10006d12 = load i32, i32* %v2_10006d12, align 4
  store i32 %v3_10006d12, i32* %eax.global-to-local, align 4
  %v0_10006d15 = load i32, i32* @esp, align 4
  %v1_10006d15 = add i32 %v0_10006d15, -4
  %v2_10006d15 = inttoptr i32 %v1_10006d15 to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022c54.191 to i32), i32* %v2_10006d15, align 4
  %v0_10006d1c = call i32 @CommandLine()
  store i32 %v0_10006d1c, i32* %eax.global-to-local, align 4
  %v1_10006d1e = inttoptr i32 %v0_10006d1c to i32*
  %v2_10006d1e = load i32, i32* %v1_10006d1e, align 4
  store i32 %v2_10006d1e, i32* %edx.global-to-local, align 4
  store i32 %v0_10006d1c, i32* @ecx, align 4
  %v1_10006d22 = add i32 %v2_10006d1e, 8
  %v2_10006d22 = inttoptr i32 %v1_10006d22 to i32*
  %v3_10006d22 = load i32, i32* %v2_10006d22, align 4
  store i32 %v3_10006d22, i32* %eax.global-to-local, align 4
  %v1_10006d27 = load i32, i32* @esp, align 4
  %v2_10006d27 = add i32 %v1_10006d27, -4
  %v3_10006d27 = inttoptr i32 %v2_10006d27 to i32*
  store i32 %v3_10006d22, i32* %v3_10006d27, align 4
  %v0_10006d28 = load i32, i32* @esi, align 4
  %v1_10006d28 = add i32 %v0_10006d28, 104
  store i32 %v1_10006d28, i32* @ecx, align 4
  %v1_10006d2b = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006d2b, i32* %eax.global-to-local, align 4
  %v3_10006d30 = load i32, i32* %stack_var_-12, align 4
  %v10_10006d30 = icmp eq i32 %v3_10006d30, 0
  br i1 %v10_10006d30, label %dec_label_pc_10006ccc.dec_label_pc_10006d53_crit_edge, label %dec_label_pc_10006d36

dec_label_pc_10006ccc.dec_label_pc_10006d53_crit_edge: ; preds = %dec_label_pc_10006ccc
  %v0_10006d53.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10006d53

dec_label_pc_10006d36:                            ; preds = %dec_label_pc_10006ccc
  %v0_10006d36 = call i32 @CommandLine()
  store i32 %v0_10006d36, i32* %eax.global-to-local, align 4
  %v0_10006d38 = load i32, i32* @esi, align 4
  %v1_10006d38 = add i32 %v0_10006d38, 120
  store i32 %v1_10006d38, i32* @ecx, align 4
  %v0_10006d3e = call i32 @function_1000d070()
  store i32 %v0_10006d3e, i32* %eax.global-to-local, align 4
  store i32 %v0_10006d36, i32* @ecx, align 4
  %v1_10006d46 = inttoptr i32 %v0_10006d36 to i32*
  %v2_10006d46 = load i32, i32* %v1_10006d46, align 4
  store i32 %v2_10006d46, i32* %edx.global-to-local, align 4
  %v1_10006d48 = load i32, i32* @esp, align 4
  %v2_10006d48 = add i32 %v1_10006d48, -4
  %v3_10006d48 = inttoptr i32 %v2_10006d48 to i32*
  store i32 %v0_10006d3e, i32* %v3_10006d48, align 4
  %v0_10006d49 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006d49 = add i32 %v0_10006d49, 20
  %v2_10006d49 = inttoptr i32 %v1_10006d49 to i32*
  %v3_10006d49 = load i32, i32* %v2_10006d49, align 4
  store i32 %v3_10006d49, i32* %eax.global-to-local, align 4
  %v1_10006d4c = add i32 %v1_10006d48, -8
  %v2_10006d4c = inttoptr i32 %v1_10006d4c to i32*
  store i32 ptrtoint ([10 x i8]* @global_var_10022c54.191 to i32), i32* %v2_10006d4c, align 4
  br label %dec_label_pc_10006d53

dec_label_pc_10006d53:                            ; preds = %dec_label_pc_10006ccc.dec_label_pc_10006d53_crit_edge, %dec_label_pc_10006d36
  %v0_10006d53 = phi i32 [ %v0_10006d53.pre, %dec_label_pc_10006ccc.dec_label_pc_10006d53_crit_edge ], [ %v1_10006d4c, %dec_label_pc_10006d36 ]
  %v1_10006d53 = add i32 %v0_10006d53, -4
  %v2_10006d53 = inttoptr i32 %v1_10006d53 to i32*
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %v2_10006d53, align 4
  %v1_10006d58 = add i32 %v0_10006d53, -8
  %v2_10006d58 = inttoptr i32 %v1_10006d58 to i32*
  store i32 ptrtoint ([16 x i8]* @global_var_100232ec.271 to i32), i32* %v2_10006d58, align 4
  %v0_10006d5d = load i32, i32* @edi, align 4
  store i32 %v0_10006d5d, i32* @ecx, align 4
  %v2_10006d5f = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006d5f, i32* %eax.global-to-local, align 4
  %v1_10006d64 = load i32, i32* @esp, align 4
  %v2_10006d64 = add i32 %v1_10006d64, -4
  %v3_10006d64 = inttoptr i32 %v2_10006d64 to i32*
  store i32 %v2_10006d5f, i32* %v3_10006d64, align 4
  %v0_10006d65 = load i32, i32* @esi, align 4
  %v1_10006d65 = add i32 %v0_10006d65, 88
  store i32 %v1_10006d65, i32* @ecx, align 4
  %v1_10006d68 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006d68, i32* %eax.global-to-local, align 4
  %v0_10006d6d = load i32, i32* @esi, align 4
  %v1_10006d6d = add i32 %v0_10006d6d, 56
  store i32 %v1_10006d6d, i32* @ecx, align 4
  %v0_10006d70 = call i32 @function_1000d070()
  store i32 %v0_10006d70, i32* %eax.global-to-local, align 4
  %v1_10006d75 = load i32, i32* @esp, align 4
  %v2_10006d75 = add i32 %v1_10006d75, -4
  %v3_10006d75 = inttoptr i32 %v2_10006d75 to i32*
  store i32 %v0_10006d70, i32* %v3_10006d75, align 4
  %v1_10006d76 = add i32 %v1_10006d75, -8
  %v2_10006d76 = inttoptr i32 %v1_10006d76 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_100232e0.272 to i32), i32* %v2_10006d76, align 4
  %v0_10006d7b = load i32, i32* @edi, align 4
  store i32 %v0_10006d7b, i32* @ecx, align 4
  %v2_10006d7d = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006d7d, i32* %eax.global-to-local, align 4
  %v1_10006d82 = load i32, i32* @esp, align 4
  %v2_10006d82 = add i32 %v1_10006d82, -4
  %v3_10006d82 = inttoptr i32 %v2_10006d82 to i32*
  store i32 %v2_10006d7d, i32* %v3_10006d82, align 4
  %v0_10006d83 = load i32, i32* @esi, align 4
  %v1_10006d83 = add i32 %v0_10006d83, 56
  store i32 %v1_10006d83, i32* @ecx, align 4
  %v1_10006d86 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006d86, i32* %eax.global-to-local, align 4
  %v0_10006d8b = load i32, i32* @esi, align 4
  %v1_10006d8b = add i32 %v0_10006d8b, 72
  store i32 %v1_10006d8b, i32* @ecx, align 4
  %v0_10006d8e = call i32 @function_1000d070()
  store i32 %v0_10006d8e, i32* %eax.global-to-local, align 4
  %v1_10006d93 = load i32, i32* @esp, align 4
  %v2_10006d93 = add i32 %v1_10006d93, -4
  %v3_10006d93 = inttoptr i32 %v2_10006d93 to i32*
  store i32 %v0_10006d8e, i32* %v3_10006d93, align 4
  %v1_10006d94 = add i32 %v1_10006d93, -8
  %v2_10006d94 = inttoptr i32 %v1_10006d94 to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_100232d8.273 to i32), i32* %v2_10006d94, align 4
  %v0_10006d99 = load i32, i32* @edi, align 4
  store i32 %v0_10006d99, i32* @ecx, align 4
  %v2_10006d9b = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006d9b, i32* %eax.global-to-local, align 4
  %v1_10006da0 = load i32, i32* @esp, align 4
  %v2_10006da0 = add i32 %v1_10006da0, -4
  %v3_10006da0 = inttoptr i32 %v2_10006da0 to i32*
  store i32 %v2_10006d9b, i32* %v3_10006da0, align 4
  %v0_10006da1 = load i32, i32* @esi, align 4
  %v1_10006da1 = add i32 %v0_10006da1, 72
  store i32 %v1_10006da1, i32* @ecx, align 4
  %v1_10006da4 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006da4, i32* %eax.global-to-local, align 4
  %v0_10006da9 = load i32, i32* @esp, align 4
  %v1_10006da9 = add i32 %v0_10006da9, -4
  %v2_10006da9 = inttoptr i32 %v1_10006da9 to i32*
  store i32 0, i32* %v2_10006da9, align 4
  %v1_10006dab = add i32 %v0_10006da9, -8
  %v2_10006dab = inttoptr i32 %v1_10006dab to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_100232d0.274 to i32), i32* %v2_10006dab, align 4
  %v0_10006db0 = load i32, i32* @edi, align 4
  store i32 %v0_10006db0, i32* @ecx, align 4
  %v2_10006db2 = call i32 @function_1000a660(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006db2, i32* %eax.global-to-local, align 4
  %v0_10006db7 = load i32, i32* @esp, align 4
  %v1_10006db7 = add i32 %v0_10006db7, -4
  %v2_10006db7 = inttoptr i32 %v1_10006db7 to i32*
  store i32 0, i32* %v2_10006db7, align 4
  %v1_10006db9 = add i32 %v0_10006db7, -8
  %v2_10006db9 = inttoptr i32 %v1_10006db9 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_100232cc.275 to i32), i32* %v2_10006db9, align 4
  %v1_10006dbe = icmp eq i32 %v2_10006db2, 0
  %v2_10006dc0 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_10006dc0, i32* @edx, align 4
  %v1_10006dc6 = icmp eq i1 %v1_10006dbe, false
  %v2_10006dc6 = zext i1 %v1_10006dc6 to i32
  %v3_10006dc6 = load i32, i32* @ecx, align 4
  %v4_10006dc6 = and i32 %v3_10006dc6, -256
  %v5_10006dc6 = or i32 %v4_10006dc6, %v2_10006dc6
  store i32 %v5_10006dc6, i32* @ecx, align 4
  %v1_10006dc9 = add i32 %v0_10006db7, -12
  %v2_10006dc9 = inttoptr i32 %v1_10006dc9 to i32*
  store i32 32, i32* %v2_10006dc9, align 4
  %v2_10006dcb = add i32 %v0_10006db7, -16
  %v3_10006dcb = inttoptr i32 %v2_10006dcb to i32*
  store i32 %v2_10006dc0, i32* %v3_10006dcb, align 4
  %v0_10006dcc = load i32, i32* @ecx, align 4
  %v1_10006dcc = trunc i32 %v0_10006dcc to i8
  %v2_10006dcc = load i32, i32* @esi, align 4
  %v3_10006dcc = add i32 %v2_10006dcc, 6
  %v4_10006dcc = inttoptr i32 %v3_10006dcc to i8*
  store i8 %v1_10006dcc, i8* %v4_10006dcc, align 1
  %v4_10006dd6 = call i32 @function_10009a90(i32* null, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  %v0_10006ddb = load i32, i32* @esp, align 4
  %v1_10006dde = add i32 %v0_10006ddb, 12
  %v2_10006dde = inttoptr i32 %v1_10006dde to i32*
  store i32 0, i32* %v2_10006dde, align 4
  store i32 %v2_10006dc0, i32* %eax.global-to-local, align 4
  %v2_10006de6 = add i32 %v0_10006ddb, 8
  %v3_10006de6 = inttoptr i32 %v2_10006de6 to i32*
  store i32 %v2_10006dc0, i32* %v3_10006de6, align 4
  %v0_10006de7 = load i32, i32* @edi, align 4
  store i32 %v0_10006de7, i32* @ecx, align 4
  %v2_10006de9 = call i32 @function_1000a510(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006de9, i32* %eax.global-to-local, align 4
  store i32 %v2_10006de9, i32* @edi, align 4
  %v1_10006df0 = icmp eq i32 %v2_10006de9, 0
  br i1 %v1_10006df0, label %dec_label_pc_10006ebd, label %dec_label_pc_10006df8.preheader

dec_label_pc_10006df8.preheader:                  ; preds = %dec_label_pc_10006d53
  %v2_10006df8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_10006e00 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_10006df8

dec_label_pc_10006df8:                            ; preds = %dec_label_pc_10006df8.preheader, %dec_label_pc_10006e7c
  %stack_var_4.0 = phi i32 [ %v1_10006e7f, %dec_label_pc_10006e7c ], [ 0, %dec_label_pc_10006df8.preheader ]
  store i32 %v2_10006df8, i32* @ecx, align 4
  %v0_10006dfb = call i32 @function_1000d140()
  store i32 %v0_10006dfb, i32* %eax.global-to-local, align 4
  store i32 %v2_10006e00, i32* @ecx, align 4
  %v0_10006e03 = call i32 @function_1000d140()
  store i32 %v0_10006e03, i32* %eax.global-to-local, align 4
  %v0_10006e08 = load i32, i32* @esp, align 4
  %v1_10006e08 = add i32 %v0_10006e08, -4
  %v2_10006e08 = inttoptr i32 %v1_10006e08 to i32*
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %v2_10006e08, align 4
  %v1_10006e0d = add i32 %v0_10006e08, -8
  %v2_10006e0d = inttoptr i32 %v1_10006e0d to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_100232c4.276 to i32), i32* %v2_10006e0d, align 4
  %v0_10006e12 = load i32, i32* @edi, align 4
  store i32 %v0_10006e12, i32* @ecx, align 4
  %v2_10006e14 = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006e14, i32* %eax.global-to-local, align 4
  %v1_10006e19 = load i32, i32* @esp, align 4
  %v2_10006e19 = add i32 %v1_10006e19, -4
  %v3_10006e19 = inttoptr i32 %v2_10006e19 to i32*
  store i32 %v2_10006e14, i32* %v3_10006e19, align 4
  store i32 %v2_10006df8, i32* @ecx, align 4
  %v1_10006e1d = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006e1d, i32* %eax.global-to-local, align 4
  %v0_10006e22 = load i32, i32* @esp, align 4
  %v1_10006e22 = add i32 %v0_10006e22, -4
  %v2_10006e22 = inttoptr i32 %v1_10006e22 to i32*
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %v2_10006e22, align 4
  %v1_10006e27 = add i32 %v0_10006e22, -8
  %v2_10006e27 = inttoptr i32 %v1_10006e27 to i32*
  store i32 ptrtoint ([12 x i8]* @global_var_100232b8.277 to i32), i32* %v2_10006e27, align 4
  %v0_10006e2c = load i32, i32* @edi, align 4
  store i32 %v0_10006e2c, i32* @ecx, align 4
  %v2_10006e2e = call i32 @function_1000aa00(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006e2e, i32* %eax.global-to-local, align 4
  %v1_10006e33 = load i32, i32* @esp, align 4
  %v2_10006e33 = add i32 %v1_10006e33, -4
  %v3_10006e33 = inttoptr i32 %v2_10006e33 to i32*
  store i32 %v2_10006e2e, i32* %v3_10006e33, align 4
  store i32 %v2_10006e00, i32* @ecx, align 4
  %v1_10006e37 = call i32 @function_1000d100(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10006e37, i32* %eax.global-to-local, align 4
  store i32 %v2_10006df8, i32* @ecx, align 4
  %v0_10006e3f = call i32 @function_1000d060()
  store i32 %v0_10006e3f, i32* %eax.global-to-local, align 4
  %tmp63 = icmp slt i32 %v0_10006e3f, 1
  br i1 %tmp63, label %dec_label_pc_10006e60, label %dec_label_pc_10006e48

dec_label_pc_10006e48:                            ; preds = %dec_label_pc_10006df8
  %v0_10006e48 = load i32, i32* @esi, align 4
  %v1_10006e48 = add i32 %v0_10006e48, 152
  %v2_10006e48 = inttoptr i32 %v1_10006e48 to i32*
  %v3_10006e48 = load i32, i32* %v2_10006e48, align 4
  store i32 %v3_10006e48, i32* %eax.global-to-local, align 4
  %v1_10006e4e = add i32 %v0_10006e48, 140
  store i32 %v1_10006e4e, i32* @ecx, align 4
  store i32 %v2_10006df8, i32* %edx.global-to-local, align 4
  %v1_10006e57 = load i32, i32* @esp, align 4
  %v2_10006e57 = add i32 %v1_10006e57, -4
  %v3_10006e57 = inttoptr i32 %v2_10006e57 to i32*
  store i32 %v2_10006df8, i32* %v3_10006e57, align 4
  %v0_10006e58 = load i32, i32* %eax.global-to-local, align 4
  %v2_10006e58 = add i32 %v1_10006e57, -8
  %v3_10006e58 = inttoptr i32 %v2_10006e58 to i32*
  store i32 %v0_10006e58, i32* %v3_10006e58, align 4
  %v2_10006e59 = call i32 @function_10005e20(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_10006e7c

dec_label_pc_10006e60:                            ; preds = %dec_label_pc_10006df8
  store i32 %v2_10006dc0, i32* @ecx, align 4
  %v1_10006e66 = load i32, i32* @esp, align 4
  %v2_10006e66 = add i32 %v1_10006e66, -4
  %v3_10006e66 = inttoptr i32 %v2_10006e66 to i32*
  store i32 %v2_10006dc0, i32* %v3_10006e66, align 4
  store i32 %v16_10006a86, i32* @edx, align 4
  %v2_10006e6d = add i32 %v1_10006e66, -8
  %v3_10006e6d = inttoptr i32 %v2_10006e6d to i32*
  store i32 %v16_10006a86, i32* %v3_10006e6d, align 4
  %v1_10006e6e = add i32 %v1_10006e66, -12
  %v2_10006e6e = inttoptr i32 %v1_10006e6e to i32*
  store i32 ptrtoint ([44 x i8]* @global_var_1002328c.278 to i32), i32* %v2_10006e6e, align 4
  %v0_10006e73 = call i32 @Error()
  br label %dec_label_pc_10006e7c

dec_label_pc_10006e7c:                            ; preds = %dec_label_pc_10006e60, %dec_label_pc_10006e48
  %storemerge67 = phi i32 [ %v2_10006e59, %dec_label_pc_10006e48 ], [ %v0_10006e73, %dec_label_pc_10006e60 ]
  store i32 %storemerge67, i32* @eax, align 4
  %v1_10006e7f = add i32 %stack_var_4.0, 1
  store i32 %v1_10006e7f, i32* @edi, align 4
  store i32 %v2_10006df8, i32* @ecx, align 4
  %v1_10006e86 = call i32 @function_100057e0(i32 %v1_10006e7f)
  %v0_10006e8b = load i32, i32* @edi, align 4
  %v1_10006e8b = load i32, i32* @esp, align 4
  %v2_10006e8b = add i32 %v1_10006e8b, -4
  %v3_10006e8b = inttoptr i32 %v2_10006e8b to i32*
  store i32 %v0_10006e8b, i32* %v3_10006e8b, align 4
  %v1_10006e8c = add i32 %v1_10006e8b, -8
  %v2_10006e8c = inttoptr i32 %v1_10006e8c to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_100232cc.275 to i32), i32* %v2_10006e8c, align 4
  store i32 %v2_10006dc0, i32* %eax.global-to-local, align 4
  %v1_10006e97 = add i32 %v1_10006e8b, -12
  %v2_10006e97 = inttoptr i32 %v1_10006e97 to i32*
  store i32 32, i32* %v2_10006e97, align 4
  %v2_10006e99 = add i32 %v1_10006e8b, -16
  %v3_10006e99 = inttoptr i32 %v2_10006e99 to i32*
  store i32 %v2_10006dc0, i32* %v3_10006e99, align 4
  %v2_10006e9a = call i32 @function_10009a90(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  store i32 %v2_10006e9a, i32* %eax.global-to-local, align 4
  %v0_10006e9f = load i32, i32* @esp, align 4
  %v1_10006ea2 = add i32 %v0_10006e9f, 12
  %v2_10006ea2 = inttoptr i32 %v1_10006ea2 to i32*
  store i32 0, i32* %v2_10006ea2, align 4
  %v2_10006eaa = add i32 %v0_10006e9f, 8
  %v3_10006eaa = inttoptr i32 %v2_10006eaa to i32*
  store i32 %v2_10006dc0, i32* %v3_10006eaa, align 4
  store i32 %storemerge, i32* @ecx, align 4
  %v2_10006eae = call i32 @function_1000a510(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10006eae, i32* %eax.global-to-local, align 4
  store i32 %v2_10006eae, i32* @edi, align 4
  %v1_10006eb5 = icmp eq i32 %v2_10006eae, 0
  %v1_10006eb7 = icmp eq i1 %v1_10006eb5, false
  br i1 %v1_10006eb7, label %dec_label_pc_10006df8, label %dec_label_pc_10006ebd

dec_label_pc_10006ebd:                            ; preds = %dec_label_pc_10006e7c, %dec_label_pc_10006d53
  %v0_10006ebd = load i32, i32* @esi, align 4
  %v1_10006ebd = add i32 %v0_10006ebd, 152
  %v2_10006ebd = inttoptr i32 %v1_10006ebd to i32*
  %v3_10006ebd = load i32, i32* %v2_10006ebd, align 4
  store i32 %v3_10006ebd, i32* %eax.global-to-local, align 4
  %v1_10006ec3 = icmp eq i32 %v3_10006ebd, 0
  %v2_10006ec3 = icmp slt i32 %v3_10006ebd, 0
  %v3_10006ec5 = icmp eq i1 %v2_10006ec3, false
  %v4_10006ec5 = icmp eq i1 %v1_10006ec3, false
  %v5_10006ec5 = icmp eq i1 %v3_10006ec5, %v4_10006ec5
  %v6_10006ec5 = zext i1 %v5_10006ec5 to i32
  %v7_10006ec5 = load i32, i32* @edx, align 4
  %v8_10006ec5 = and i32 %v7_10006ec5, -256
  %v9_10006ec5 = or i32 %v6_10006ec5, %v8_10006ec5
  store i32 %v9_10006ec5, i32* %edx.global-to-local, align 4
  %v1_10006ec8 = zext i1 %v5_10006ec5 to i8
  %v3_10006ec8 = add i32 %v0_10006ebd, 5
  %v4_10006ec8 = inttoptr i32 %v3_10006ec8 to i8*
  store i8 %v1_10006ec8, i8* %v4_10006ec8, align 1
  %v1_10006ecb = add i32 %v3_10006ebd, -1
  store i32 %v1_10006ecb, i32* @ecx, align 4
  %v0_10006ece = load i32, i32* @esi, align 4
  %v1_10006ece = add i32 %v0_10006ece, 136
  %v2_10006ece = inttoptr i32 %v1_10006ece to i32*
  %v3_10006ece = load i32, i32* %v2_10006ece, align 4
  store i32 %v3_10006ece, i32* %eax.global-to-local, align 4
  %v2_10006ed4 = icmp slt i32 %v3_10006ece, 0
  %v1_10006ed6 = icmp eq i1 %v2_10006ed4, false
  br i1 %v1_10006ed6, label %dec_label_pc_10006edc, label %dec_label_pc_10006ed8

dec_label_pc_10006ed8:                            ; preds = %dec_label_pc_10006ebd
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ee2

dec_label_pc_10006edc:                            ; preds = %dec_label_pc_10006ebd
  %v7_10006ede = icmp sgt i32 %v3_10006ece, %v1_10006ecb
  br i1 %v7_10006ede, label %dec_label_pc_10006ee0, label %dec_label_pc_10006ee2

dec_label_pc_10006ee0:                            ; preds = %dec_label_pc_10006edc
  store i32 %v1_10006ecb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10006ee2

dec_label_pc_10006ee2:                            ; preds = %dec_label_pc_10006edc, %dec_label_pc_10006ee0, %dec_label_pc_10006ed8
  %v0_10006ee2 = phi i32 [ %v3_10006ece, %dec_label_pc_10006edc ], [ %v1_10006ecb, %dec_label_pc_10006ee0 ], [ 0, %dec_label_pc_10006ed8 ]
  store i32 %v0_10006ee2, i32* %v2_10006ece, align 4
  %v0_10006ee8 = call i32 @CommandLine()
  store i32 %v0_10006ee8, i32* %eax.global-to-local, align 4
  %v1_10006eea = inttoptr i32 %v0_10006ee8 to i32*
  %v2_10006eea = load i32, i32* %v1_10006eea, align 4
  store i32 %v2_10006eea, i32* %edx.global-to-local, align 4
  %v0_10006eec = load i32, i32* @esp, align 4
  %v1_10006eec = add i32 %v0_10006eec, -4
  %v2_10006eec = inttoptr i32 %v1_10006eec to i32*
  store i32 0, i32* %v2_10006eec, align 4
  %v0_10006eee = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10006eee, i32* @ecx, align 4
  %v0_10006ef0 = load i32, i32* %edx.global-to-local, align 4
  %v1_10006ef0 = add i32 %v0_10006ef0, 12
  %v2_10006ef0 = inttoptr i32 %v1_10006ef0 to i32*
  %v3_10006ef0 = load i32, i32* %v2_10006ef0, align 4
  store i32 %v3_10006ef0, i32* @eax, align 4
  %v1_10006ef3 = add i32 %v0_10006eec, -8
  %v2_10006ef3 = inttoptr i32 %v1_10006ef3 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10023280.279 to i32), i32* %v2_10006ef3, align 4
  %v1_10006efa = icmp eq i32 %v3_10006ef0, 0
  br i1 %v1_10006efa, label %dec_label_pc_10006f10, label %dec_label_pc_10006efe

dec_label_pc_10006efe:                            ; preds = %dec_label_pc_10006ee2
  %v0_10006efe = load i32, i32* @esi, align 4
  store i32 %v0_10006efe, i32* @ecx, align 4
  %v0_10006f00 = call i32 @function_100066e0()
  store i32 %v0_10006f00, i32* %eax.global-to-local, align 4
  %v0_10006f05 = load i32, i32* @esp, align 4
  %v1_10006f05 = add i32 %v0_10006f05, -4
  %v2_10006f05 = inttoptr i32 %v1_10006f05 to i32*
  store i32 -1, i32* %v2_10006f05, align 4
  %v0_10006f07 = load i32, i32* @esi, align 4
  %v1_10006f07 = add i32 %v0_10006f07, 5
  %v2_10006f07 = inttoptr i32 %v1_10006f07 to i8*
  store i8 0, i8* %v2_10006f07, align 1
  %v1_10006f0b = call i32 @function_10011fc6(i32 ptrtoint (i32* @5 to i32))
  unreachable

dec_label_pc_10006f10:                            ; preds = %dec_label_pc_10006ee2
  store i32 %storemerge, i32* @ecx, align 4
  %v0_10006f13 = call i32 @function_1000a8a0()
  store i32 %v0_10006f13, i32* @eax, align 4
  %v0_10006f18 = load i32, i32* @esi, align 4
  %v1_10006f18 = add i32 %v0_10006f18, 5
  %v2_10006f18 = inttoptr i32 %v1_10006f18 to i8*
  %v3_10006f18 = load i8, i8* %v2_10006f18, align 1
  %v4_10006f18 = zext i8 %v3_10006f18 to i32
  %v5_10006f18 = load i32, i32* @ebx, align 4
  %v6_10006f18 = and i32 %v5_10006f18, -256
  %v7_10006f18 = or i32 %v6_10006f18, %v4_10006f18
  store i32 %v7_10006f18, i32* %ebx.global-to-local, align 4
  store i32 %v2_10006bbc, i32* @ecx, align 4
  %v0_10006f1e = call i32 @function_10003730()
  store i32 %v0_10006f1e, i32* @eax, align 4
  store i32 %v2_10006ac7, i32* @ecx, align 4
  %v0_10006f26 = call i32 @function_10003770()
  %v3_10006f2b = and i32 %v0_10006f26, -256
  %v4_10006f2b = or i32 %v4_10006f18, %v3_10006f2b
  store i32 %v4_10006f2b, i32* %eax.global-to-local, align 4
  %v0_10006f2d = load i32, i32* @esp, align 4
  %v1_10006f2d = inttoptr i32 %v0_10006f2d to i32*
  %v2_10006f2d = load i32, i32* %v1_10006f2d, align 4
  store i32 %v2_10006f2d, i32* %ebx.global-to-local, align 4
  ret i32 %v4_10006f2b

dec_label_pc_10006f36:                            ; preds = %dec_label_pc_10006a9a, %dec_label_pc_10006a80
  %v0_10006f3b = call i32 @Msg()
  %v12_10006f44 = and i32 %v0_10006f3b, -256
  store i32 %v12_10006f44, i32* %eax.global-to-local, align 4
  ret i32 %v12_10006f44
}

define i32 @function_10006f50(i32 %arg1, i32 %arg2) {
dec_label_pc_10006f50:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-288 = alloca i8*, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10006f50 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_10006f50, i32* %stack_var_-4, align 4
  %v4_10006f50 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10006f50, i32* @ebp, align 4
  %v16_10006f53 = ptrtoint i32* %stack_var_-264 to i32
  %v0_10006f59 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10006f59, i32* %stack_var_-268, align 4
  %v0_10006f5a = load i32, i32* @ecx, align 4
  store i32 %v0_10006f5a, i32* @esi, align 4
  %v1_10006f5c = add i32 %v0_10006f5a, 4
  %v2_10006f5c = inttoptr i32 %v1_10006f5c to i8*
  %v3_10006f5c = load i8, i8* %v2_10006f5c, align 1
  %v10_10006f5c = icmp eq i8 %v3_10006f5c, 0
  %v1_10006f60 = icmp eq i1 %v10_10006f5c, false
  br i1 %v1_10006f60, label %dec_label_pc_10006f50.dec_label_pc_10007013_crit_edge, label %dec_label_pc_10006f66

dec_label_pc_10006f50.dec_label_pc_10007013_crit_edge: ; preds = %dec_label_pc_10006f50
  %v4_10006f59 = ptrtoint i32* %stack_var_-268 to i32
  %v0_10007017.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007013

dec_label_pc_10006f66:                            ; preds = %dec_label_pc_10006f50
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-280, align 4
  %v1_10006f6c = add i32 %v0_10006f5a, 8
  store i32 %v1_10006f6c, i32* @ecx, align 4
  store i8 1, i8* %v2_10006f5c, align 1
  %v0_10006f73 = load i32, i32* %stack_var_-280, align 4
  %v1_10006f73 = inttoptr i32 %v0_10006f73 to i8*
  %v2_10006f73 = call i32 @function_1000d100(i8* %v1_10006f73)
  store i32 %v2_10006f73, i32* %eax.global-to-local, align 4
  %v0_10006f7c = load i32, i32* @esi, align 4
  %v1_10006f7c = add i32 %v0_10006f7c, 24
  store i32 %v1_10006f7c, i32* @ecx, align 4
  %v1_10006f7f = inttoptr i32 %arg2 to i8*
  %v2_10006f7f = call i32 @function_1000d100(i8* %v1_10006f7f)
  store i32 %v2_10006f7f, i32* %eax.global-to-local, align 4
  %v0_10006f84 = load i32, i32* @esi, align 4
  %v1_10006f84 = add i32 %v0_10006f84, 24
  store i32 %v1_10006f84, i32* @ecx, align 4
  %v0_10006f87 = call i32 @function_1000d070()
  store i32 %v0_10006f87, i32* %eax.global-to-local, align 4
  %v4_10006f8c = inttoptr i32 %v0_10006f87 to i8*
  store i8* %v4_10006f8c, i8** %stack_var_-288, align 4
  %v5_10006f8c = ptrtoint i8** %stack_var_-288 to i32
  %v0_10006f8d = load i32, i32* @esi, align 4
  %v1_10006f8d = add i32 %v0_10006f8d, 8
  store i32 %v1_10006f8d, i32* @ecx, align 4
  %v0_10006f90 = call i32 @function_1000d070()
  store i32 %v0_10006f90, i32* %eax.global-to-local, align 4
  store i32 %v16_10006f53, i32* @edx, align 4
  %v6_10006fa7 = call i32 @function_10009a90(i32* nonnull %stack_var_-264, i32 260, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022c68.189, i32 0, i32 0))
  store i32 %v16_10006f53, i32* %eax.global-to-local, align 4
  %v2_10006fb5 = call i32 @function_10009740(i32 %v16_10006f53, i32 92)
  store i32 %v2_10006fb5, i32* %eax.global-to-local, align 4
  store i32 %v16_10006f53, i32* @ecx, align 4
  %tmp253 = bitcast i32* %stack_var_-264 to i8*
  %v3_10006fc1 = call i8* @__strlwr(i8* %tmp253)
  %v5_10006fc1 = ptrtoint i8* %v3_10006fc1 to i32
  store i32 %v5_10006fc1, i32* %eax.global-to-local, align 4
  store i8* %tmp253, i8** %stack_var_-288, align 4
  %v0_10006fd0 = load i32, i32* @esi, align 4
  %v1_10006fd0 = add i32 %v0_10006fd0, 40
  store i32 %v1_10006fd0, i32* @ecx, align 4
  %v3_10006fd3 = call i32 @function_1000d100(i8* %tmp253)
  store i32 %v3_10006fd3, i32* %eax.global-to-local, align 4
  %v0_10006fdf = call i32 @CommandLine()
  store i32 %v0_10006fdf, i32* %eax.global-to-local, align 4
  store i32 %v0_10006fdf, i32* @ecx, align 4
  %v1_10006ff9 = icmp eq i32 %v0_10006fdf, 0
  br i1 %v1_10006ff9, label %dec_label_pc_10007013, label %dec_label_pc_10006ffd

dec_label_pc_10006ffd:                            ; preds = %dec_label_pc_10006f66
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007013

dec_label_pc_10007013:                            ; preds = %dec_label_pc_10006ffd, %dec_label_pc_10006f50.dec_label_pc_10007013_crit_edge, %dec_label_pc_10006f66
  %v0_10007017 = phi i32 [ 0, %dec_label_pc_10006ffd ], [ 0, %dec_label_pc_10006f66 ], [ %v0_10007017.pre, %dec_label_pc_10006f50.dec_label_pc_10007013_crit_edge ]
  %v0_10007013 = phi i32 [ %v5_10006f8c, %dec_label_pc_10006ffd ], [ %v5_10006f8c, %dec_label_pc_10006f66 ], [ %v4_10006f59, %dec_label_pc_10006f50.dec_label_pc_10007013_crit_edge ]
  %v1_10007013 = inttoptr i32 %v0_10007013 to i32*
  %v2_10007013 = load i32, i32* %v1_10007013, align 4
  store i32 %v2_10007013, i32* %esi.global-to-local, align 4
  %v2_10007016 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10007016, i32* %ebp.global-to-local, align 4
  ret i32 %v0_10007017
}

define i32 @function_1000701a() local_unnamed_addr {
dec_label_pc_1000701a:
  %v0_1000701a = call i32 @WSACleanup()
  ret i32 %v0_1000701a
}

define i32 @function_10007020(i16 %wVersionRequested, %WSAData* %lpWSAData) local_unnamed_addr {
dec_label_pc_10007020:
  %v2_10007020 = call i32 @WSAStartup(i16 %wVersionRequested, %WSAData* %lpWSAData)
  ret i32 %v2_10007020
}

define i32 @function_10007030(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10007030:
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10007030 = load i32, i32* %ebp.global-to-local, align 4
  %v1_10007036 = inttoptr i32 %arg1 to i32*
  %v2_10007036 = load i32, i32* %v1_10007036, align 4
  %v1_10007038 = icmp eq i32 %v2_10007036, 0
  %v1_1000703a = icmp eq i1 %v1_10007038, false
  br i1 %v1_1000703a, label %dec_label_pc_10007040, label %dec_label_pc_1000703c

dec_label_pc_1000703c:                            ; preds = %dec_label_pc_10007030
  %v12_1000703c = and i32 %v2_10007036, -256
  store i32 %v0_10007030, i32* %ebp.global-to-local, align 4
  ret i32 %v12_1000703c

dec_label_pc_10007040:                            ; preds = %dec_label_pc_10007030
  store i32 %arg2, i32* @ecx, align 4
  %v1_10007043 = inttoptr i32 %arg2 to i32*
  %v2_10007043 = load i32, i32* %v1_10007043, align 4
  store i32 %v2_10007043, i32* @ecx, align 4
  %v1_10007045 = icmp eq i32 %v2_10007043, 0
  %v1_10007047 = icmp eq i1 %v1_10007045, false
  br i1 %v1_10007047, label %dec_label_pc_10007050.preheader, label %dec_label_pc_10007049

dec_label_pc_10007050.preheader:                  ; preds = %dec_label_pc_10007040
  %v4_10007050.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10007050

dec_label_pc_10007049:                            ; preds = %dec_label_pc_10007040
  %v1_10007049 = and i32 %v2_10007036, -256
  %v2_10007049 = or i32 %v1_10007049, 1
  store i32 %v0_10007030, i32* %ebp.global-to-local, align 4
  ret i32 %v2_10007049

dec_label_pc_10007050:                            ; preds = %dec_label_pc_10007050.preheader, %dec_label_pc_10007062
  %v0_10007065 = phi i32 [ %v2_10007043, %dec_label_pc_10007050.preheader ], [ %v1_10007065, %dec_label_pc_10007062 ]
  %v4_10007050 = phi i32 [ %v4_10007050.pre, %dec_label_pc_10007050.preheader ], [ %v7_1000705a, %dec_label_pc_10007062 ]
  %v0_10007077 = phi i32 [ %v2_10007036, %dec_label_pc_10007050.preheader ], [ %v1_10007062, %dec_label_pc_10007062 ]
  %v1_10007050 = inttoptr i32 %v0_10007077 to i8*
  %v2_10007050 = load i8, i8* %v1_10007050, align 1
  %v3_10007050 = zext i8 %v2_10007050 to i32
  %v5_10007050 = and i32 %v4_10007050, -256
  %v6_10007050 = or i32 %v3_10007050, %v5_10007050
  store i32 %v6_10007050, i32* %edx.global-to-local, align 4
  %v3_10007052 = inttoptr i32 %v0_10007065 to i8*
  %v4_10007052 = load i8, i8* %v3_10007052, align 1
  %v10_10007052 = icmp ult i8 %v2_10007050, %v4_10007052
  %v15_10007052 = icmp eq i8 %v2_10007050, %v4_10007052
  %v1_10007054 = icmp eq i1 %v15_10007052, false
  br i1 %v1_10007054, label %dec_label_pc_10007077, label %dec_label_pc_10007056

dec_label_pc_10007056:                            ; preds = %dec_label_pc_10007050
  %v5_10007056 = icmp eq i8 %v2_10007050, 0
  br i1 %v5_10007056, label %dec_label_pc_1000706c, label %dec_label_pc_1000705a

dec_label_pc_1000705a:                            ; preds = %dec_label_pc_10007056
  %v1_1000705a = add i32 %v0_10007077, 1
  %v2_1000705a = inttoptr i32 %v1_1000705a to i8*
  %v3_1000705a = load i8, i8* %v2_1000705a, align 1
  %v4_1000705a = zext i8 %v3_1000705a to i32
  %v7_1000705a = or i32 %v4_1000705a, %v5_10007050
  store i32 %v7_1000705a, i32* %edx.global-to-local, align 4
  %v3_1000705d = add i32 %v0_10007065, 1
  %v4_1000705d = inttoptr i32 %v3_1000705d to i8*
  %v5_1000705d = load i8, i8* %v4_1000705d, align 1
  %v11_1000705d = icmp ult i8 %v3_1000705a, %v5_1000705d
  %v16_1000705d = icmp eq i8 %v3_1000705a, %v5_1000705d
  %v1_10007060 = icmp eq i1 %v16_1000705d, false
  br i1 %v1_10007060, label %dec_label_pc_10007077, label %dec_label_pc_10007062

dec_label_pc_10007062:                            ; preds = %dec_label_pc_1000705a
  %v1_10007062 = add i32 %v0_10007077, 2
  %v1_10007065 = add i32 %v0_10007065, 2
  store i32 %v1_10007065, i32* @ecx, align 4
  %v5_10007068 = icmp eq i8 %v3_1000705a, 0
  %v1_1000706a = icmp eq i1 %v5_10007068, false
  br i1 %v1_1000706a, label %dec_label_pc_10007050, label %dec_label_pc_1000706c

dec_label_pc_1000706c:                            ; preds = %dec_label_pc_10007062, %dec_label_pc_10007056
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 %v0_10007030, i32* %ebp.global-to-local, align 4
  ret i32 0

dec_label_pc_10007077:                            ; preds = %dec_label_pc_1000705a, %dec_label_pc_10007050
  %v2_10007077 = phi i1 [ %v11_1000705d, %dec_label_pc_1000705a ], [ %v10_10007052, %dec_label_pc_10007050 ]
  %v3_10007077 = zext i1 %v2_10007077 to i32
  %v4_10007077 = add i32 %v3_10007077, %v0_10007077
  %v5_10007077 = sext i1 %v2_10007077 to i32
  %v15_10007077 = sub nsw i32 %v5_10007077, %v3_10007077
  %v16_10007077 = icmp ult i32 %v0_10007077, %v15_10007077
  %v17_10007077 = icmp ne i32 %v4_10007077, -1
  %v18_10007077 = or i1 %v16_10007077, %v17_10007077
  %v19_10007077 = icmp ult i32 %v0_10007077, %v4_10007077
  %v20_10007077 = select i1 %v2_10007077, i1 %v18_10007077, i1 %v19_10007077
  %not.v1_10007079 = icmp ne i1 %v20_10007077, true
  %v3_10007079 = sext i1 %not.v1_10007079 to i32
  %v4_10007079 = sub nsw i32 %v5_10007077, %v3_10007079
  %v28_10007079 = icmp slt i32 %v4_10007079, 0
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_10007080 = zext i1 %v28_10007079 to i32
  %v3_10007080 = and i32 %v4_10007079, -256
  %v4_10007080 = or i32 %v1_10007080, %v3_10007080
  store i32 %v0_10007030, i32* %ebp.global-to-local, align 4
  ret i32 %v4_10007080
}

define i32 @function_10007090(i32 %arg1) local_unnamed_addr {
dec_label_pc_10007090:
  %v0_10007090 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* @eax, align 4
  %v2_10007097 = call i32 @function_1000bbe0(i32 %arg1, i32 %v0_10007090)
  ret i32 %v2_10007097
}

define i32 @function_100070b0(i32 %arg1, i32 %arg2, i8 %arg3, i32 %arg4, i32 %arg5, i8 %arg6) {
dec_label_pc_100070b0:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_24 = alloca i8, align 1
  store i8 %arg6, i8* %stack_var_24, align 1
  %stack_var_12 = alloca i8, align 1
  store i8 %arg3, i8* %stack_var_12, align 1
  %v0_100070b0 = load i32, i32* %ebp.global-to-local, align 4
  %v16_100070b5 = icmp eq i8 %arg3, 0
  %v1_100070b8 = icmp eq i1 %v16_100070b5, false
  br i1 %v1_100070b8, label %dec_label_pc_100070bf, label %dec_label_pc_100070ba

dec_label_pc_100070ba:                            ; preds = %dec_label_pc_100070b0
  br label %dec_label_pc_100070bf

dec_label_pc_100070bf:                            ; preds = %dec_label_pc_100070ba, %dec_label_pc_100070b0
  %v0_100070c5 = phi i32 [ 1, %dec_label_pc_100070ba ], [ 0, %dec_label_pc_100070b0 ]
  %v10_100070bf = icmp eq i8 %arg6, 0
  br i1 %v10_100070bf, label %dec_label_pc_100070c8, label %dec_label_pc_100070c5

dec_label_pc_100070c5:                            ; preds = %dec_label_pc_100070bf
  %v1_100070c5 = or i32 %v0_100070c5, 2
  br label %dec_label_pc_100070c8

dec_label_pc_100070c8:                            ; preds = %dec_label_pc_100070c5, %dec_label_pc_100070bf
  %v0_100070d4 = phi i32 [ %v1_100070c5, %dec_label_pc_100070c5 ], [ %v0_100070c5, %dec_label_pc_100070bf ]
  store i32 %arg1, i32* @ecx, align 4
  %v0_100070cb = load i32, i32* %ebx.global-to-local, align 4
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  %v0_100070cf = load i32, i32* %esi.global-to-local, align 4
  %v0_100070d0 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_100070d0, i32* %stack_var_-16, align 4
  store i32 %arg5, i32* %edi.global-to-local, align 4
  %v10_100070dc = call i32 @Plat_CreateWindow(i32 %arg1, i32 %arg2, i32 %arg4, i32 %arg5, i32 %v0_100070d4, i32 %v0_100070d0, i32 %v0_100070cf, i32 %v0_100070cb, i32 %v0_100070b0)
  store i32 %v10_100070dc, i32* %esi.global-to-local, align 4
  %v1_100070e7 = icmp eq i32 %v10_100070dc, 0
  %v1_100070e9 = icmp eq i1 %v1_100070e7, false
  br i1 %v1_100070e9, label %dec_label_pc_100070f2, label %dec_label_pc_100070eb

dec_label_pc_100070eb:                            ; preds = %dec_label_pc_100070c8
  %v2_100070eb = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_100070eb, i32* %edi.global-to-local, align 4
  store i32 %v0_100070cf, i32* %esi.global-to-local, align 4
  store i32 %v0_100070cb, i32* %ebx.global-to-local, align 4
  ret i32 %v10_100070dc

dec_label_pc_100070f2:                            ; preds = %dec_label_pc_100070c8
  %v5_100070fa = call i32 @Plat_GetDesktopResolution(i8* nonnull %stack_var_12, i8* nonnull %stack_var_24)
  %v3_10007100 = load i8, i8* %stack_var_12, align 1
  %v4_10007100 = sext i8 %v3_10007100 to i32
  %v1_10007103 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10007103 = sub i32 %v4_10007100, %v1_10007103
  %v1_10007105 = ashr i32 %v2_10007103, 31
  %v2_10007106 = sub i32 %v2_10007103, %v1_10007105
  %v3_1000710a = load i8, i8* %stack_var_24, align 1
  %v4_1000710a = sext i8 %v3_1000710a to i32
  %v1_1000710d = load i32, i32* %edi.global-to-local, align 4
  %v2_1000710d = sub i32 %v4_1000710a, %v1_1000710d
  %v1_1000710f = ashr i32 %v2_1000710d, 31
  %v2_10007110 = sub i32 %v2_1000710d, %v1_1000710f
  %v2_10007114 = sdiv i32 %v2_10007106, 2
  %v4_10007114 = icmp slt i32 %v2_10007114, 0
  %v2_1000711a = select i1 %v4_10007114, i32 0, i32 %v2_10007114
  %v5_1000711a = trunc i32 %v2_1000711a to i8
  store i32 %v2_1000711a, i32* @ecx, align 4
  %v2_1000711e = sdiv i32 %v2_10007110, 2
  %v4_1000711e = icmp slt i32 %v2_10007110, -1
  store i8 %v5_1000711a, i8* %stack_var_12, align 1
  %v2_10007127 = select i1 %v4_1000711e, i32 0, i32 %v2_1000711e
  %v5_10007127 = trunc i32 %v2_10007127 to i8
  store i8 %v5_10007127, i8* %stack_var_24, align 1
  %v3_1000712f = call i32 @Plat_SetWindowPos(i32 %v10_100070dc, i32 %v2_1000711a, i32 %v2_10007127)
  %v2_10007138 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10007138, i32* %edi.global-to-local, align 4
  store i32 %v0_100070cf, i32* %esi.global-to-local, align 4
  store i32 %v0_100070cb, i32* %ebx.global-to-local, align 4
  ret i32 %v10_100070dc
}

define i32 @function_10007150() local_unnamed_addr {
dec_label_pc_10007150:
  %v0_10007150 = load i32, i32* @ecx, align 4
  %v1_10007150 = add i32 %v0_10007150, 96
  %v2_10007150 = inttoptr i32 %v1_10007150 to i32*
  %v3_10007150 = load i32, i32* %v2_10007150, align 4
  ret i32 %v3_10007150
}

define i32 @function_10007160(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10007160:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v1_10007169 = load i32, i32* @ecx, align 4
  %v2_10007169 = add i32 %v1_10007169, 100
  %v3_10007169 = inttoptr i32 %v2_10007169 to i32*
  store i32 %arg1, i32* %v3_10007169, align 4
  %v0_1000716c = load i32, i32* %edx.global-to-local, align 4
  %v1_1000716c = load i32, i32* @ecx, align 4
  %v2_1000716c = add i32 %v1_1000716c, 92
  %v3_1000716c = inttoptr i32 %v2_1000716c to i32*
  store i32 %v0_1000716c, i32* %v3_1000716c, align 4
  %v0_10007170 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10007170
}

define i32 @function_10007180(i32 %arg1) {
dec_label_pc_10007180:
  %v0_10007183 = load i32, i32* @ecx, align 4
  %v1_10007183 = add i32 %v0_10007183, 100
  %v2_10007183 = inttoptr i32 %v1_10007183 to i32*
  %v3_10007183 = load i32, i32* %v2_10007183, align 4
  store i32 %v3_10007183, i32* @ecx, align 4
  %v1_10007186 = inttoptr i32 %v3_10007183 to i32*
  %v2_10007186 = load i32, i32* %v1_10007186, align 4
  %v1_1000718b = add i32 %v2_10007186, 112
  %v2_1000718b = inttoptr i32 %v1_1000718b to i32*
  %v3_1000718b = load i32, i32* %v2_1000718b, align 4
  ret i32 %v3_1000718b
}

define i32 @function_100071a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_100071a0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_100071a4 = load i32, i32* @edi, align 4
  store i32 %v0_100071a4, i32* %stack_var_-12, align 4
  %v4_100071a4 = ptrtoint i32* %stack_var_-12 to i32
  %v0_100071a5 = load i32, i32* @ecx, align 4
  store i32 %v0_100071a5, i32* %edi.global-to-local, align 4
  %v1_100071a7 = add i32 %v0_100071a5, 8
  %v2_100071a7 = inttoptr i32 %v1_100071a7 to i32*
  %v3_100071a7 = load i32, i32* %v2_100071a7, align 4
  %v4_100071a7 = sext i32 %v3_100071a7 to i64
  %v3_100071aa = icmp slt i32 %v3_100071a7, 0
  br i1 %v3_100071aa, label %dec_label_pc_1000724e, label %dec_label_pc_100071b2

dec_label_pc_100071b2:                            ; preds = %dec_label_pc_100071a0
  %v2_100071aa = icmp eq i32 %v3_100071a7, 0
  %v1_100071b2 = add i32 %v0_100071a5, 4
  %v2_100071b2 = inttoptr i32 %v1_100071b2 to i32*
  %v3_100071b2 = load i32, i32* %v2_100071b2, align 4
  store i32 %v3_100071b2, i32* %eax.global-to-local, align 4
  %v2_100071b8 = add i32 %v3_100071b2, %arg1
  %v12_100071b8 = icmp eq i32 %v2_100071b8, 0
  store i32 %v2_100071b8, i32* @ecx, align 4
  br i1 %v2_100071aa, label %dec_label_pc_100071ca, label %dec_label_pc_100071be

dec_label_pc_100071be:                            ; preds = %dec_label_pc_100071b2
  %v1_100071be = add i32 %v2_100071b8, -1
  %v1_100071c1 = ashr i32 %v1_100071be, 31
  %v3_100071c2 = zext i32 %v1_100071be to i64
  %v5_100071c2 = zext i32 %v1_100071c1 to i64
  %v6_100071c2 = mul nuw i64 %v5_100071c2, 4294967296
  %v7_100071c2 = or i64 %v6_100071c2, %v3_100071c2
  %v9_100071c2 = sdiv i64 %v7_100071c2, %v4_100071a7
  %v10_100071c2 = trunc i64 %v9_100071c2 to i32
  %v1_100071c4 = add i32 %v10_100071c2, 1
  %v5_100071c5 = mul i32 %v1_100071c4, %v3_100071a7
  br label %dec_label_pc_100071dd

dec_label_pc_100071ca:                            ; preds = %dec_label_pc_100071b2
  %v1_100071ca = icmp eq i32 %v3_100071b2, 0
  %v1_100071cc = icmp eq i1 %v1_100071ca, false
  br i1 %v1_100071cc, label %dec_label_pc_100071d3, label %dec_label_pc_100071ce

dec_label_pc_100071ce:                            ; preds = %dec_label_pc_100071ca
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100071d3

dec_label_pc_100071d3:                            ; preds = %dec_label_pc_100071ce, %dec_label_pc_100071ca
  %eax.promoted2 = phi i32 [ 1, %dec_label_pc_100071ce ], [ %v3_100071b2, %dec_label_pc_100071ca ]
  %v5_100071d5 = icmp slt i32 %eax.promoted2, %v2_100071b8
  br i1 %v5_100071d5, label %dec_label_pc_100071d7, label %dec_label_pc_100071fb

dec_label_pc_100071d7:                            ; preds = %dec_label_pc_100071d3, %dec_label_pc_100071d7
  %v2_100071d73 = phi i32 [ %v2_100071d7, %dec_label_pc_100071d7 ], [ %eax.promoted2, %dec_label_pc_100071d3 ]
  %v2_100071d7 = mul i32 %v2_100071d73, 2
  %v5_100071db = icmp slt i32 %v2_100071d7, %v2_100071b8
  br i1 %v5_100071db, label %dec_label_pc_100071d7, label %dec_label_pc_100071dd.loopexit

dec_label_pc_100071dd.loopexit:                   ; preds = %dec_label_pc_100071d7
  br label %dec_label_pc_100071dd

dec_label_pc_100071dd:                            ; preds = %dec_label_pc_100071dd.loopexit, %dec_label_pc_100071be
  %eax.promoted = phi i32 [ %v2_100071d7, %dec_label_pc_100071dd.loopexit ], [ %v5_100071c5, %dec_label_pc_100071be ]
  %storemerge = phi i32 [ %v2_100071d7, %dec_label_pc_100071dd.loopexit ], [ %v5_100071c5, %dec_label_pc_100071be ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v5_100071df = icmp slt i32 %eax.promoted, %v2_100071b8
  br i1 %v5_100071df, label %dec_label_pc_100071e1, label %dec_label_pc_100071fb

dec_label_pc_100071e1:                            ; preds = %dec_label_pc_100071dd
  %v1_100071e1 = icmp eq i32 %eax.promoted, 0
  %v1_100071e3 = icmp eq i1 %v1_100071e1, false
  br i1 %v1_100071e3, label %dec_label_pc_100071f0, label %dec_label_pc_100071e5

dec_label_pc_100071e5:                            ; preds = %dec_label_pc_100071e1
  %v8_100071e8 = icmp sgt i32 %v2_100071b8, -1
  br i1 %v8_100071e8, label %dec_label_pc_100071f0, label %dec_label_pc_100071ea

dec_label_pc_100071ea:                            ; preds = %dec_label_pc_100071e5
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100071fb

dec_label_pc_100071f0:                            ; preds = %dec_label_pc_100071e5, %dec_label_pc_100071e1, %dec_label_pc_100071f0
  %v2_100071f51 = phi i32 [ %v2_100071f5, %dec_label_pc_100071f0 ], [ %eax.promoted, %dec_label_pc_100071e1 ], [ %eax.promoted, %dec_label_pc_100071e5 ]
  %v2_100071f0 = add i32 %v2_100071f51, %v2_100071b8
  %v1_100071f2 = ashr i32 %v2_100071f0, 31
  %v2_100071f3 = sub i32 %v2_100071f0, %v1_100071f2
  %v2_100071f5 = sdiv i32 %v2_100071f3, 2
  %v5_100071f9 = icmp slt i32 %v2_100071f5, %v2_100071b8
  br i1 %v5_100071f9, label %dec_label_pc_100071f0, label %dec_label_pc_100071fb.loopexit

dec_label_pc_100071fb.loopexit:                   ; preds = %dec_label_pc_100071f0
  store i32 %v2_100071f5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100071fb

dec_label_pc_100071fb:                            ; preds = %dec_label_pc_100071fb.loopexit, %dec_label_pc_100071d3, %dec_label_pc_100071dd, %dec_label_pc_100071ea
  %v0_100071fd = phi i32 [ %v2_100071f5, %dec_label_pc_100071fb.loopexit ], [ %eax.promoted2, %dec_label_pc_100071d3 ], [ %eax.promoted, %dec_label_pc_100071dd ], [ -1, %dec_label_pc_100071ea ]
  store i32 %v0_100071fd, i32* %v2_100071b2, align 4
  br i1 %v12_100071b8, label %dec_label_pc_1000722e, label %dec_label_pc_10007204

dec_label_pc_10007204:                            ; preds = %dec_label_pc_100071fb
  %v0_10007204 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10007204, i32* @ecx, align 4
  %v1_1000720a = inttoptr i32 %v0_10007204 to i32*
  %v2_1000720a = load i32, i32* %v1_1000720a, align 4
  store i32 %v2_1000720a, i32* @ecx, align 4
  %v0_1000720e = load i32, i32* @ebx, align 4
  store i32 %v0_1000720e, i32* %stack_var_-16, align 4
  %v0_1000720f = load i32, i32* %eax.global-to-local, align 4
  %v2_1000721c = mul i32 %v0_1000720f, 56
  store i32 %v2_100071b8, i32* @ebx, align 4
  %v1_10007226 = load i32, i32* %edi.global-to-local, align 4
  %v2_10007226 = inttoptr i32 %v1_10007226 to i32*
  store i32 %v0_1000720f, i32* %v2_10007226, align 4
  store i32 %v2_1000721c, i32* @edi, align 4
  %v2_10007229 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10007229, i32* @esi, align 4
  %v2_1000722a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000722a, i32* @ebp, align 4
  %v0_1000722b = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000722b

dec_label_pc_1000722e:                            ; preds = %dec_label_pc_100071fb
  %v0_1000722e = load i32, i32* %eax.global-to-local, align 4
  %v0_10007237 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10007237, i32* %eax.global-to-local, align 4
  %v1_1000723c = inttoptr i32 %v0_10007237 to i32*
  %v2_1000723c = load i32, i32* %v1_1000723c, align 4
  store i32 %v2_1000723c, i32* @ecx, align 4
  %v1_1000723e = inttoptr i32 %v2_1000723c to i32*
  %v2_1000723e = load i32, i32* %v1_1000723e, align 4
  store i32 %v2_1000723e, i32* @eax, align 4
  %v2_10007244 = mul i32 %v0_1000722e, 56
  store i32 %v2_10007244, i32* %stack_var_-16, align 4
  %v1_1000724c = load i32, i32* %edi.global-to-local, align 4
  %v2_1000724c = inttoptr i32 %v1_1000724c to i32*
  store i32 %v2_1000723e, i32* %v2_1000724c, align 4
  %v0_1000724e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000724e

dec_label_pc_1000724e:                            ; preds = %dec_label_pc_1000722e, %dec_label_pc_100071a0
  %v0_1000724e = phi i32 [ %v0_1000724e.pre, %dec_label_pc_1000722e ], [ %v4_100071a4, %dec_label_pc_100071a0 ]
  %v1_1000724e = inttoptr i32 %v0_1000724e to i32*
  %v2_1000724e = load i32, i32* %v1_1000724e, align 4
  store i32 %v2_1000724e, i32* @edi, align 4
  %v3_1000724e = add i32 %v0_1000724e, 4
  %v1_1000724f = inttoptr i32 %v3_1000724e to i32*
  %v2_1000724f = load i32, i32* %v1_1000724f, align 4
  store i32 %v2_1000724f, i32* @esi, align 4
  %v3_1000724f = add i32 %v0_1000724e, 8
  %v1_10007250 = inttoptr i32 %v3_1000724f to i32*
  %v2_10007250 = load i32, i32* %v1_10007250, align 4
  store i32 %v2_10007250, i32* @ebp, align 4
  %v0_10007251 = load i32, i32* @eax, align 4
  ret i32 %v0_10007251
}

define i32 @function_10007260(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10007260:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10007264 = load i32, i32* @edi, align 4
  store i32 %v0_10007264, i32* %stack_var_-12, align 4
  %v4_10007264 = ptrtoint i32* %stack_var_-12 to i32
  %v0_10007265 = load i32, i32* @ecx, align 4
  store i32 %v0_10007265, i32* %edi.global-to-local, align 4
  %v1_10007267 = add i32 %v0_10007265, 8
  %v2_10007267 = inttoptr i32 %v1_10007267 to i32*
  %v3_10007267 = load i32, i32* %v2_10007267, align 4
  %v4_10007267 = sext i32 %v3_10007267 to i64
  %v3_1000726a = icmp slt i32 %v3_10007267, 0
  br i1 %v3_1000726a, label %dec_label_pc_100072ed, label %dec_label_pc_1000726e

dec_label_pc_1000726e:                            ; preds = %dec_label_pc_10007260
  %v2_1000726a = icmp eq i32 %v3_10007267, 0
  %v1_1000726e = add i32 %v0_10007265, 4
  %v2_1000726e = inttoptr i32 %v1_1000726e to i32*
  %v3_1000726e = load i32, i32* %v2_1000726e, align 4
  store i32 %v3_1000726e, i32* %eax.global-to-local, align 4
  %v2_10007274 = add i32 %v3_1000726e, %arg1
  %v12_10007274 = icmp eq i32 %v2_10007274, 0
  store i32 %v2_10007274, i32* @ecx, align 4
  br i1 %v2_1000726a, label %dec_label_pc_10007286, label %dec_label_pc_1000727a

dec_label_pc_1000727a:                            ; preds = %dec_label_pc_1000726e
  %v1_1000727a = add i32 %v2_10007274, -1
  %v1_1000727d = ashr i32 %v1_1000727a, 31
  %v3_1000727e = zext i32 %v1_1000727a to i64
  %v5_1000727e = zext i32 %v1_1000727d to i64
  %v6_1000727e = mul nuw i64 %v5_1000727e, 4294967296
  %v7_1000727e = or i64 %v6_1000727e, %v3_1000727e
  %v9_1000727e = sdiv i64 %v7_1000727e, %v4_10007267
  %v10_1000727e = trunc i64 %v9_1000727e to i32
  %v1_10007280 = add i32 %v10_1000727e, 1
  %v5_10007281 = mul i32 %v1_10007280, %v3_10007267
  br label %dec_label_pc_10007299

dec_label_pc_10007286:                            ; preds = %dec_label_pc_1000726e
  %v1_10007286 = icmp eq i32 %v3_1000726e, 0
  %v1_10007288 = icmp eq i1 %v1_10007286, false
  br i1 %v1_10007288, label %dec_label_pc_1000728f, label %dec_label_pc_1000728a

dec_label_pc_1000728a:                            ; preds = %dec_label_pc_10007286
  store i32 3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000728f

dec_label_pc_1000728f:                            ; preds = %dec_label_pc_1000728a, %dec_label_pc_10007286
  %eax.promoted2 = phi i32 [ 3, %dec_label_pc_1000728a ], [ %v3_1000726e, %dec_label_pc_10007286 ]
  %v5_10007291 = icmp slt i32 %eax.promoted2, %v2_10007274
  br i1 %v5_10007291, label %dec_label_pc_10007293, label %dec_label_pc_100072bb

dec_label_pc_10007293:                            ; preds = %dec_label_pc_1000728f, %dec_label_pc_10007293
  %v2_100072933 = phi i32 [ %v2_10007293, %dec_label_pc_10007293 ], [ %eax.promoted2, %dec_label_pc_1000728f ]
  %v2_10007293 = mul i32 %v2_100072933, 2
  %v5_10007297 = icmp slt i32 %v2_10007293, %v2_10007274
  br i1 %v5_10007297, label %dec_label_pc_10007293, label %dec_label_pc_10007299.loopexit

dec_label_pc_10007299.loopexit:                   ; preds = %dec_label_pc_10007293
  br label %dec_label_pc_10007299

dec_label_pc_10007299:                            ; preds = %dec_label_pc_10007299.loopexit, %dec_label_pc_1000727a
  %eax.promoted = phi i32 [ %v2_10007293, %dec_label_pc_10007299.loopexit ], [ %v5_10007281, %dec_label_pc_1000727a ]
  %storemerge = phi i32 [ %v2_10007293, %dec_label_pc_10007299.loopexit ], [ %v5_10007281, %dec_label_pc_1000727a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v5_1000729b = icmp slt i32 %eax.promoted, %v2_10007274
  br i1 %v5_1000729b, label %dec_label_pc_1000729d, label %dec_label_pc_100072bb

dec_label_pc_1000729d:                            ; preds = %dec_label_pc_10007299
  %v1_1000729d = icmp eq i32 %eax.promoted, 0
  %v1_1000729f = icmp eq i1 %v1_1000729d, false
  br i1 %v1_1000729f, label %dec_label_pc_100072b0, label %dec_label_pc_100072a1

dec_label_pc_100072a1:                            ; preds = %dec_label_pc_1000729d
  %v8_100072a4 = icmp sgt i32 %v2_10007274, -1
  br i1 %v8_100072a4, label %dec_label_pc_100072b0, label %dec_label_pc_100072a6

dec_label_pc_100072a6:                            ; preds = %dec_label_pc_100072a1
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100072bb

dec_label_pc_100072b0:                            ; preds = %dec_label_pc_100072a1, %dec_label_pc_1000729d, %dec_label_pc_100072b0
  %v2_100072b51 = phi i32 [ %v2_100072b5, %dec_label_pc_100072b0 ], [ %eax.promoted, %dec_label_pc_1000729d ], [ %eax.promoted, %dec_label_pc_100072a1 ]
  %v2_100072b0 = add i32 %v2_100072b51, %v2_10007274
  %v1_100072b2 = ashr i32 %v2_100072b0, 31
  %v2_100072b3 = sub i32 %v2_100072b0, %v1_100072b2
  %v2_100072b5 = sdiv i32 %v2_100072b3, 2
  %v5_100072b9 = icmp slt i32 %v2_100072b5, %v2_10007274
  br i1 %v5_100072b9, label %dec_label_pc_100072b0, label %dec_label_pc_100072bb.loopexit

dec_label_pc_100072bb.loopexit:                   ; preds = %dec_label_pc_100072b0
  store i32 %v2_100072b5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100072bb

dec_label_pc_100072bb:                            ; preds = %dec_label_pc_100072bb.loopexit, %dec_label_pc_1000728f, %dec_label_pc_10007299, %dec_label_pc_100072a6
  %v0_100072bd = phi i32 [ %v2_100072b5, %dec_label_pc_100072bb.loopexit ], [ %eax.promoted2, %dec_label_pc_1000728f ], [ %eax.promoted, %dec_label_pc_10007299 ], [ -1, %dec_label_pc_100072a6 ]
  store i32 %v0_100072bd, i32* %v2_1000726e, align 4
  %v0_100072c0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100072c0, i32* @ecx, align 4
  %v1_100072c6 = inttoptr i32 %v0_100072c0 to i32*
  %v2_100072c6 = load i32, i32* %v1_100072c6, align 4
  store i32 %v2_100072c6, i32* @ecx, align 4
  %v0_100072c8 = load i32, i32* %eax.global-to-local, align 4
  %v2_100072cd = mul i32 %v0_100072c8, 12
  store i32 %v2_100072cd, i32* %eax.global-to-local, align 4
  store i32 %v2_100072cd, i32* %stack_var_-16, align 4
  br i1 %v12_10007274, label %dec_label_pc_100072e4, label %dec_label_pc_100072d4

dec_label_pc_100072d4:                            ; preds = %dec_label_pc_100072bb
  store i32 %v2_10007274, i32* %stack_var_-20, align 4
  %v1_100072dc = load i32, i32* %edi.global-to-local, align 4
  %v2_100072dc = inttoptr i32 %v1_100072dc to i32*
  store i32 %v2_100072cd, i32* %v2_100072dc, align 4
  %v2_100072de = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_100072de, i32* @edi, align 4
  %v2_100072df = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_100072df, i32* @esi, align 4
  %v2_100072e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100072e0, i32* @ebp, align 4
  %v0_100072e1 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100072e1

dec_label_pc_100072e4:                            ; preds = %dec_label_pc_100072bb
  %v1_100072e4 = inttoptr i32 %v2_100072c6 to i32*
  %v2_100072e4 = load i32, i32* %v1_100072e4, align 4
  %v1_100072e6 = add i32 %v2_100072e4, 4
  %v2_100072e6 = inttoptr i32 %v1_100072e6 to i32*
  %v3_100072e6 = load i32, i32* %v2_100072e6, align 4
  store i32 %v3_100072e6, i32* @eax, align 4
  %v1_100072eb = load i32, i32* %edi.global-to-local, align 4
  %v2_100072eb = inttoptr i32 %v1_100072eb to i32*
  store i32 %v3_100072e6, i32* %v2_100072eb, align 4
  %v0_100072ed.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100072ed

dec_label_pc_100072ed:                            ; preds = %dec_label_pc_100072e4, %dec_label_pc_10007260
  %v0_100072ed = phi i32 [ %v0_100072ed.pre, %dec_label_pc_100072e4 ], [ %v4_10007264, %dec_label_pc_10007260 ]
  %v1_100072ed = inttoptr i32 %v0_100072ed to i32*
  %v2_100072ed = load i32, i32* %v1_100072ed, align 4
  store i32 %v2_100072ed, i32* @edi, align 4
  %v3_100072ed = add i32 %v0_100072ed, 4
  %v1_100072ee = inttoptr i32 %v3_100072ed to i32*
  %v2_100072ee = load i32, i32* %v1_100072ee, align 4
  store i32 %v2_100072ee, i32* @esi, align 4
  %v3_100072ee = add i32 %v0_100072ed, 8
  %v1_100072ef = inttoptr i32 %v3_100072ee to i32*
  %v2_100072ef = load i32, i32* %v1_100072ef, align 4
  store i32 %v2_100072ef, i32* @ebp, align 4
  %v0_100072f0 = load i32, i32* @eax, align 4
  ret i32 %v0_100072f0
}

define i32 @function_10007300(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10007300:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10007304 = load i32, i32* @edi, align 4
  store i32 %v0_10007304, i32* %stack_var_-12, align 4
  %v4_10007304 = ptrtoint i32* %stack_var_-12 to i32
  %v0_10007305 = load i32, i32* @ecx, align 4
  store i32 %v0_10007305, i32* %edi.global-to-local, align 4
  %v1_10007307 = add i32 %v0_10007305, 8
  %v2_10007307 = inttoptr i32 %v1_10007307 to i32*
  %v3_10007307 = load i32, i32* %v2_10007307, align 4
  %v4_10007307 = sext i32 %v3_10007307 to i64
  %v3_1000730a = icmp slt i32 %v3_10007307, 0
  br i1 %v3_1000730a, label %dec_label_pc_1000739c, label %dec_label_pc_10007312

dec_label_pc_10007312:                            ; preds = %dec_label_pc_10007300
  %v2_1000730a = icmp eq i32 %v3_10007307, 0
  %v1_10007312 = add i32 %v0_10007305, 4
  %v2_10007312 = inttoptr i32 %v1_10007312 to i32*
  %v3_10007312 = load i32, i32* %v2_10007312, align 4
  store i32 %v3_10007312, i32* @eax, align 4
  %v2_10007318 = add i32 %v3_10007312, %arg1
  %v12_10007318 = icmp eq i32 %v2_10007318, 0
  store i32 %v2_10007318, i32* @ecx, align 4
  br i1 %v2_1000730a, label %dec_label_pc_1000732a, label %dec_label_pc_1000731e

dec_label_pc_1000731e:                            ; preds = %dec_label_pc_10007312
  %v1_1000731e = add i32 %v2_10007318, -1
  %v1_10007321 = ashr i32 %v1_1000731e, 31
  %v3_10007322 = zext i32 %v1_1000731e to i64
  %v5_10007322 = zext i32 %v1_10007321 to i64
  %v6_10007322 = mul nuw i64 %v5_10007322, 4294967296
  %v7_10007322 = or i64 %v6_10007322, %v3_10007322
  %v9_10007322 = sdiv i64 %v7_10007322, %v4_10007307
  %v10_10007322 = trunc i64 %v9_10007322 to i32
  %v1_10007324 = add i32 %v10_10007322, 1
  %v5_10007325 = mul i32 %v1_10007324, %v3_10007307
  store i32 %v5_10007325, i32* @eax, align 4
  br label %dec_label_pc_1000733d

dec_label_pc_1000732a:                            ; preds = %dec_label_pc_10007312
  %v1_1000732a = icmp eq i32 %v3_10007312, 0
  %v1_1000732c = icmp eq i1 %v1_1000732a, false
  br i1 %v1_1000732c, label %dec_label_pc_10007333, label %dec_label_pc_1000732e

dec_label_pc_1000732e:                            ; preds = %dec_label_pc_1000732a
  store i32 2, i32* @eax, align 4
  br label %dec_label_pc_10007333

dec_label_pc_10007333:                            ; preds = %dec_label_pc_1000732e, %dec_label_pc_1000732a
  %eax.promoted3 = phi i32 [ 2, %dec_label_pc_1000732e ], [ %v3_10007312, %dec_label_pc_1000732a ]
  %v5_10007335 = icmp slt i32 %eax.promoted3, %v2_10007318
  br i1 %v5_10007335, label %dec_label_pc_10007337, label %dec_label_pc_1000733d

dec_label_pc_10007337:                            ; preds = %dec_label_pc_10007333, %dec_label_pc_10007337
  %v2_100073374 = phi i32 [ %v2_10007337, %dec_label_pc_10007337 ], [ %eax.promoted3, %dec_label_pc_10007333 ]
  %v2_10007337 = mul i32 %v2_100073374, 2
  %v5_1000733b = icmp slt i32 %v2_10007337, %v2_10007318
  br i1 %v5_1000733b, label %dec_label_pc_10007337, label %dec_label_pc_1000733d.loopexit

dec_label_pc_1000733d.loopexit:                   ; preds = %dec_label_pc_10007337
  store i32 %v2_10007337, i32* @eax, align 4
  br label %dec_label_pc_1000733d

dec_label_pc_1000733d:                            ; preds = %dec_label_pc_1000733d.loopexit, %dec_label_pc_10007333, %dec_label_pc_1000731e
  %eax.promoted = phi i32 [ %v2_10007337, %dec_label_pc_1000733d.loopexit ], [ %eax.promoted3, %dec_label_pc_10007333 ], [ %v5_10007325, %dec_label_pc_1000731e ]
  %v1_1000733d = and i32 %eax.promoted, 65535
  %v5_10007342 = icmp slt i32 %v1_1000733d, %v2_10007318
  br i1 %v5_10007342, label %dec_label_pc_10007344, label %dec_label_pc_1000736e

dec_label_pc_10007344:                            ; preds = %dec_label_pc_1000733d
  %v4_10007344 = trunc i32 %eax.promoted to i16
  %v5_10007344 = icmp eq i16 %v4_10007344, 0
  %v1_10007347 = icmp eq i1 %v5_10007344, false
  br i1 %v1_10007347, label %dec_label_pc_10007354, label %dec_label_pc_10007349

dec_label_pc_10007349:                            ; preds = %dec_label_pc_10007344
  %v8_1000734f = icmp sgt i32 %v2_10007318, 65535
  br i1 %v8_1000734f, label %dec_label_pc_10007354, label %dec_label_pc_10007351

dec_label_pc_10007351:                            ; preds = %dec_label_pc_10007349
  %v1_10007351 = add i32 %eax.promoted, -1
  store i32 %v1_10007351, i32* @eax, align 4
  br label %dec_label_pc_1000736e

dec_label_pc_10007354:                            ; preds = %dec_label_pc_10007349, %dec_label_pc_10007344
  %v1_10007354 = and i32 %v2_10007318, 65535
  %v12_10007357 = icmp eq i32 %v1_10007354, %v2_10007318
  %v1_10007359 = icmp eq i1 %v12_10007357, false
  br i1 %v1_10007359, label %dec_label_pc_1000739c, label %dec_label_pc_10007360

dec_label_pc_10007360:                            ; preds = %dec_label_pc_10007354, %dec_label_pc_10007360
  %v2_100073652 = phi i32 [ %v2_10007365, %dec_label_pc_10007360 ], [ %eax.promoted, %dec_label_pc_10007354 ]
  %v2_10007360 = add i32 %v2_100073652, %v2_10007318
  %v1_10007362 = ashr i32 %v2_10007360, 31
  %v2_10007363 = sub i32 %v2_10007360, %v1_10007362
  %v2_10007365 = sdiv i32 %v2_10007363, 2
  %v1_10007367 = and i32 %v2_10007365, 65535
  %v5_1000736c = icmp slt i32 %v1_10007367, %v2_10007318
  br i1 %v5_1000736c, label %dec_label_pc_10007360, label %dec_label_pc_1000736e.loopexit

dec_label_pc_1000736e.loopexit:                   ; preds = %dec_label_pc_10007360
  store i32 %v2_10007365, i32* @eax, align 4
  br label %dec_label_pc_1000736e

dec_label_pc_1000736e:                            ; preds = %dec_label_pc_1000736e.loopexit, %dec_label_pc_1000733d, %dec_label_pc_10007351
  %v0_10007370 = phi i32 [ %v2_10007365, %dec_label_pc_1000736e.loopexit ], [ %eax.promoted, %dec_label_pc_1000733d ], [ %v1_10007351, %dec_label_pc_10007351 ]
  store i32 %v0_10007370, i32* %v2_10007312, align 4
  %v0_10007373 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10007373, i32* @ecx, align 4
  %v1_10007379 = inttoptr i32 %v0_10007373 to i32*
  %v2_10007379 = load i32, i32* %v1_10007379, align 4
  store i32 %v2_10007379, i32* @ecx, align 4
  %v0_1000737b = load i32, i32* @eax, align 4
  %v2_1000737b = mul i32 %v0_1000737b, 16
  store i32 %v2_1000737b, i32* %eax.global-to-local, align 4
  store i32 %v2_1000737b, i32* %stack_var_-16, align 4
  br i1 %v12_10007318, label %dec_label_pc_10007393, label %dec_label_pc_10007383

dec_label_pc_10007383:                            ; preds = %dec_label_pc_1000736e
  store i32 %v2_10007318, i32* %stack_var_-20, align 4
  %v1_1000738b = load i32, i32* %edi.global-to-local, align 4
  %v2_1000738b = inttoptr i32 %v1_1000738b to i32*
  store i32 %v2_1000737b, i32* %v2_1000738b, align 4
  %v2_1000738d = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000738d, i32* @edi, align 4
  %v2_1000738e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000738e, i32* @esi, align 4
  %v2_1000738f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000738f, i32* @ebp, align 4
  %v0_10007390 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10007390

dec_label_pc_10007393:                            ; preds = %dec_label_pc_1000736e
  %v1_10007393 = inttoptr i32 %v2_10007379 to i32*
  %v2_10007393 = load i32, i32* %v1_10007393, align 4
  %v1_10007395 = add i32 %v2_10007393, 4
  %v2_10007395 = inttoptr i32 %v1_10007395 to i32*
  %v3_10007395 = load i32, i32* %v2_10007395, align 4
  store i32 %v3_10007395, i32* @eax, align 4
  %v1_1000739a = load i32, i32* %edi.global-to-local, align 4
  %v2_1000739a = inttoptr i32 %v1_1000739a to i32*
  store i32 %v3_10007395, i32* %v2_1000739a, align 4
  %v0_1000739c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000739c

dec_label_pc_1000739c:                            ; preds = %dec_label_pc_10007393, %dec_label_pc_10007354, %dec_label_pc_10007300
  %v0_1000739c = phi i32 [ %v0_1000739c.pre, %dec_label_pc_10007393 ], [ %v4_10007304, %dec_label_pc_10007354 ], [ %v4_10007304, %dec_label_pc_10007300 ]
  %v1_1000739c = inttoptr i32 %v0_1000739c to i32*
  %v2_1000739c = load i32, i32* %v1_1000739c, align 4
  store i32 %v2_1000739c, i32* @edi, align 4
  %v3_1000739c = add i32 %v0_1000739c, 4
  %v1_1000739d = inttoptr i32 %v3_1000739c to i32*
  %v2_1000739d = load i32, i32* %v1_1000739d, align 4
  store i32 %v2_1000739d, i32* @esi, align 4
  %v3_1000739d = add i32 %v0_1000739c, 8
  %v1_1000739e = inttoptr i32 %v3_1000739d to i32*
  %v2_1000739e = load i32, i32* %v1_1000739e, align 4
  store i32 %v2_1000739e, i32* @ebp, align 4
  %v0_1000739f = load i32, i32* @eax, align 4
  ret i32 %v0_1000739f
}

define i32 @function_100073b0(i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i8 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_100073b0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp9 = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %edx.global-to-local, align 4
  %v0_100073b7 = load i32, i32* @ecx, align 4
  store i32 %v0_100073b7, i32* %ebx.global-to-local, align 4
  store i32 %tmp9, i32* @ecx, align 4
  %v1_100073bd = add i32 %v0_100073b7, 16
  %v2_100073bd = inttoptr i32 %v1_100073bd to i16*
  %v3_100073bd = load i16, i16* %v2_100073bd, align 2
  %v4_100073bd = zext i16 %v3_100073bd to i32
  store i32 %v4_100073bd, i32* %edi.global-to-local, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v3_100073c6 = bitcast i32* %arg2 to i16*
  store i16 -1, i16* %v3_100073c6, align 2
  %v0_100073c9 = load i32, i32* %edx.global-to-local, align 4
  %v1_100073c9 = inttoptr i32 %v0_100073c9 to i8*
  store i8 0, i8* %v1_100073c9, align 1
  %v0_100073cc = load i32, i32* %edi.global-to-local, align 4
  %v1_100073cc = trunc i32 %v0_100073cc to i16
  %v2_100073cc = load i32, i32* %eax.global-to-local, align 4
  %v3_100073cc = trunc i32 %v2_100073cc to i16
  %v14_100073cc = icmp eq i16 %v1_100073cc, %v3_100073cc
  br i1 %v14_100073cc, label %dec_label_pc_100073b0.dec_label_pc_10007492_crit_edge, label %dec_label_pc_100073d5

dec_label_pc_100073b0.dec_label_pc_10007492_crit_edge: ; preds = %dec_label_pc_100073b0
  %v0_10007492.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10007492

dec_label_pc_100073d5:                            ; preds = %dec_label_pc_100073b0
  %v1_10007442 = bitcast i32* %arg3 to i8*
  br label %dec_label_pc_100073d6

dec_label_pc_100073d6:                            ; preds = %dec_label_pc_10007483, %dec_label_pc_100073d5
  %v0_100073d9 = phi i32 [ %v0_10007488, %dec_label_pc_10007483 ], [ %v0_100073cc, %dec_label_pc_100073d5 ]
  store i32 %tmp9, i32* @ecx, align 4
  %v1_100073d9 = and i32 %v0_100073d9, 65535
  store i32 %v1_100073d9, i32* %esi.global-to-local, align 4
  %v1_100073dc = trunc i32 %v0_100073d9 to i16
  store i16 %v1_100073dc, i16* %v3_100073c6, align 2
  %v0_100073df = load i32, i32* %ebx.global-to-local, align 4
  %v1_100073df = add i32 %v0_100073df, 4
  %v2_100073df = inttoptr i32 %v1_100073df to i32*
  %v3_100073df = load i32, i32* %v2_100073df, align 4
  %v0_100073e4 = load i32, i32* %esi.global-to-local, align 4
  %v2_100073e4 = mul i32 %v0_100073e4, 16
  store i32 %v2_100073e4, i32* %esi.global-to-local, align 4
  %v3_100073e7 = or i32 %v2_100073e4, 8
  %v4_100073e7 = add i32 %v3_100073e7, %v3_100073df
  %v1_100073eb = load i32, i32* @esp, align 4
  %v2_100073eb = add i32 %v1_100073eb, -4
  %v3_100073eb = inttoptr i32 %v2_100073eb to i32*
  store i32 %v4_100073e7, i32* %v3_100073eb, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_100073ef = add i32 %v1_100073eb, -8
  %v3_100073ef = inttoptr i32 %v2_100073ef to i32*
  store i32 %arg1, i32* %v3_100073ef, align 4
  store i32 %tmp, i32* %edx.global-to-local, align 4
  %v0_100073f8 = load i32, i32* %eax.global-to-local, align 4
  %v4_100073f8 = trunc i32 %v0_100073f8 to i8
  %v5_100073f8 = icmp eq i8 %v4_100073f8, 0
  br i1 %v5_100073f8, label %dec_label_pc_10007442, label %dec_label_pc_100073fc

dec_label_pc_100073fc:                            ; preds = %dec_label_pc_100073d6
  store i8 1, i8* %v1_10007442, align 1
  %v0_100073ff = load i8, i8* @global_var_1002b638.171, align 1
  %v1_100073ff = and i8 %v0_100073ff, 1
  %v2_100073ff = icmp eq i8 %v1_100073ff, 0
  %v1_10007406 = icmp eq i1 %v2_100073ff, false
  br i1 %v1_10007406, label %dec_label_pc_10007423, label %dec_label_pc_10007408

dec_label_pc_10007408:                            ; preds = %dec_label_pc_100073fc
  %v2_10007408 = or i8 %v0_100073ff, 1
  store i8 %v2_10007408, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007423

dec_label_pc_10007423:                            ; preds = %dec_label_pc_10007408, %dec_label_pc_100073fc
  store i32 65535, i32* @ecx, align 4
  %v0_10007428 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007428 = trunc i32 %v0_10007428 to i16
  %v14_10007428 = icmp eq i16 %v1_10007428, -1
  br i1 %v14_10007428, label %dec_label_pc_10007438, label %dec_label_pc_1000742d

dec_label_pc_1000742d:                            ; preds = %dec_label_pc_10007423
  %v0_1000742d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000742d = add i32 %v0_1000742d, 4
  %v2_1000742d = inttoptr i32 %v1_1000742d to i32*
  %v3_1000742d = load i32, i32* %v2_1000742d, align 4
  store i32 %v3_1000742d, i32* %eax.global-to-local, align 4
  %v1_10007430 = load i32, i32* %esi.global-to-local, align 4
  %v3_10007430 = add i32 %v1_10007430, %v3_1000742d
  %v4_10007430 = inttoptr i32 %v3_10007430 to i16*
  %v5_10007430 = load i16, i16* %v4_10007430, align 2
  %v6_10007430 = zext i16 %v5_10007430 to i32
  store i32 %v6_10007430, i32* %edi.global-to-local, align 4
  store i32 %v3_10007430, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007483

dec_label_pc_10007438:                            ; preds = %dec_label_pc_10007423
  store i32 ptrtoint (i16** @global_var_1002b630.172 to i32), i32* %eax.global-to-local, align 4
  %v2_1000743d = load i16, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  %v3_1000743d = zext i16 %v2_1000743d to i32
  store i32 %v3_1000743d, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10007483

dec_label_pc_10007442:                            ; preds = %dec_label_pc_100073d6
  store i8 0, i8* %v1_10007442, align 1
  %v0_10007445 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10007445 = and i8 %v0_10007445, 1
  %v2_10007445 = icmp eq i8 %v1_10007445, 0
  %v1_1000744c = icmp eq i1 %v2_10007445, false
  br i1 %v1_1000744c, label %dec_label_pc_10007469, label %dec_label_pc_1000744e

dec_label_pc_1000744e:                            ; preds = %dec_label_pc_10007442
  %v2_1000744e = or i8 %v0_10007445, 1
  store i8 %v2_1000744e, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007469

dec_label_pc_10007469:                            ; preds = %dec_label_pc_1000744e, %dec_label_pc_10007442
  store i32 65535, i32* @ecx, align 4
  %v0_1000746e = load i32, i32* %edi.global-to-local, align 4
  %v1_1000746e = trunc i32 %v0_1000746e to i16
  %v14_1000746e = icmp eq i16 %v1_1000746e, -1
  br i1 %v14_1000746e, label %dec_label_pc_1000747f, label %dec_label_pc_10007473

dec_label_pc_10007473:                            ; preds = %dec_label_pc_10007469
  %v0_10007473 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007473 = add i32 %v0_10007473, 4
  %v2_10007473 = inttoptr i32 %v1_10007473 to i32*
  %v3_10007473 = load i32, i32* %v2_10007473, align 4
  store i32 %v3_10007473, i32* %eax.global-to-local, align 4
  %v1_10007476 = load i32, i32* %esi.global-to-local, align 4
  %v2_10007476 = add i32 %v1_10007476, %v3_10007473
  br label %dec_label_pc_1000747f

dec_label_pc_1000747f:                            ; preds = %dec_label_pc_10007469, %dec_label_pc_10007473
  %storemerge = phi i32 [ %v2_10007476, %dec_label_pc_10007473 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007469 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_1000747f = add i32 %storemerge, 2
  %v2_1000747f = inttoptr i32 %v1_1000747f to i16*
  %v3_1000747f = load i16, i16* %v2_1000747f, align 2
  %v4_1000747f = zext i16 %v3_1000747f to i32
  store i32 %v4_1000747f, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10007483

dec_label_pc_10007483:                            ; preds = %dec_label_pc_1000747f, %dec_label_pc_10007438, %dec_label_pc_1000742d
  %v0_100074958 = phi i32 [ %storemerge, %dec_label_pc_1000747f ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007438 ], [ %v3_10007430, %dec_label_pc_1000742d ]
  %v0_10007488 = phi i32 [ %v4_1000747f, %dec_label_pc_1000747f ], [ %v3_1000743d, %dec_label_pc_10007438 ], [ %v6_10007430, %dec_label_pc_1000742d ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_10007488 = icmp eq i32 %v0_10007488, 65535
  %v1_1000748b = icmp eq i1 %v14_10007488, false
  br i1 %v1_1000748b, label %dec_label_pc_100073d6, label %dec_label_pc_10007491

dec_label_pc_10007491:                            ; preds = %dec_label_pc_10007483
  %v0_10007491 = load i32, i32* @esp, align 4
  %v1_10007491 = inttoptr i32 %v0_10007491 to i32*
  %v2_10007491 = load i32, i32* %v1_10007491, align 4
  store i32 %v2_10007491, i32* @esi, align 4
  %v3_10007491 = add i32 %v0_10007491, 4
  br label %dec_label_pc_10007492

dec_label_pc_10007492:                            ; preds = %dec_label_pc_100073b0.dec_label_pc_10007492_crit_edge, %dec_label_pc_10007491
  %v0_10007495 = phi i32 [ %v2_100073cc, %dec_label_pc_100073b0.dec_label_pc_10007492_crit_edge ], [ %v0_100074958, %dec_label_pc_10007491 ]
  %v0_10007492 = phi i32 [ %v0_10007492.pre, %dec_label_pc_100073b0.dec_label_pc_10007492_crit_edge ], [ %v3_10007491, %dec_label_pc_10007491 ]
  %v1_10007492 = inttoptr i32 %v0_10007492 to i32*
  %v2_10007492 = load i32, i32* %v1_10007492, align 4
  store i32 %v2_10007492, i32* @edi, align 4
  %v3_10007492 = add i32 %v0_10007492, 4
  %v1_10007493 = inttoptr i32 %v3_10007492 to i32*
  %v2_10007493 = load i32, i32* %v1_10007493, align 4
  store i32 %v2_10007493, i32* @ebx, align 4
  %v3_10007493 = add i32 %v0_10007492, 8
  %v1_10007494 = inttoptr i32 %v3_10007493 to i32*
  %v2_10007494 = load i32, i32* %v1_10007494, align 4
  store i32 %v2_10007494, i32* @ebp, align 4
  ret i32 %v0_10007495
}

define i32 @function_100074a0() local_unnamed_addr {
dec_label_pc_100074a0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_100074a0 = load i32, i32* @ebp, align 4
  %v0_100074a3 = load i32, i32* @ecx, align 4
  %v0_100074a4 = load i32, i32* @esi, align 4
  store i32 %v0_100074a4, i32* %stack_var_-12, align 4
  store i32 %v0_100074a3, i32* @esi, align 4
  %v1_100074a7 = add i32 %v0_100074a3, 20
  %v2_100074a7 = inttoptr i32 %v1_100074a7 to i16*
  %v3_100074a7 = load i16, i16* %v2_100074a7, align 2
  %v4_100074a7 = zext i16 %v3_100074a7 to i32
  store i32 %v4_100074a7, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_100074b0 = icmp eq i16 %v3_100074a7, -1
  %v1_100074b3 = icmp eq i1 %v14_100074b0, false
  br i1 %v1_100074b3, label %dec_label_pc_10007587, label %dec_label_pc_100074b9

dec_label_pc_100074b9:                            ; preds = %dec_label_pc_100074a0
  %v1_100074b9 = add i32 %v0_100074a3, 22
  %v2_100074b9 = inttoptr i32 %v1_100074b9 to i16*
  %v3_100074b9 = load i16, i16* %v2_100074b9, align 2
  %v4_100074b9 = zext i16 %v3_100074b9 to i32
  store i32 %v4_100074b9, i32* @ecx, align 4
  %v1_100074c1 = add i32 %v0_100074a3, 8
  %v2_100074c1 = inttoptr i32 %v1_100074c1 to i32*
  %v3_100074c1 = load i32, i32* %v2_100074c1, align 4
  store i32 %v3_100074c1, i32* @eax, align 4
  %v5_100074c6 = icmp slt i32 %v4_100074b9, %v3_100074c1
  br i1 %v5_100074c6, label %dec_label_pc_100074c8, label %dec_label_pc_100074e4

dec_label_pc_100074c8:                            ; preds = %dec_label_pc_100074b9
  %v3_100074c8 = load i16, i16* %v2_100074b9, align 2
  %v4_100074c8 = zext i16 %v3_100074c8 to i32
  store i32 %v4_100074c8, i32* @ecx, align 4
  %v1_100074cc = add nuw nsw i32 %v4_100074c8, 1
  %v1_100074cf = and i32 %v1_100074cc, 65535
  store i32 %v1_100074cf, i32* %edx.global-to-local, align 4
  %v5_100074d8 = icmp slt i32 %v1_100074cf, %v3_100074c1
  br i1 %v5_100074d8, label %dec_label_pc_100074da, label %dec_label_pc_100074dd

dec_label_pc_100074da:                            ; preds = %dec_label_pc_100074c8
  store i32 %v1_100074cc, i32* @ecx, align 4
  br label %dec_label_pc_100074f5

dec_label_pc_100074dd:                            ; preds = %dec_label_pc_100074c8
  store i32 65535, i32* @ecx, align 4
  br label %dec_label_pc_100074f5

dec_label_pc_100074e4:                            ; preds = %dec_label_pc_100074b9
  %v3_100074e4 = load i32, i32* %v2_100074c1, align 4
  store i32 %v3_100074e4, i32* @eax, align 4
  %v1_100074e9 = icmp eq i32 %v3_100074e4, 0
  %v2_100074e9 = icmp slt i32 %v3_100074e4, 0
  %v3_100074eb = icmp eq i1 %v2_100074e9, false
  %v4_100074eb = icmp eq i1 %v1_100074e9, false
  %v5_100074eb = icmp eq i1 %v3_100074eb, %v4_100074eb
  %v1_100074ef = select i1 %v5_100074eb, i32 0, i32 65535
  store i32 %v1_100074ef, i32* @ecx, align 4
  br label %dec_label_pc_100074f5

dec_label_pc_100074f5:                            ; preds = %dec_label_pc_100074e4, %dec_label_pc_100074dd, %dec_label_pc_100074da
  %v1_10007507 = phi i32 [ %v3_100074e4, %dec_label_pc_100074e4 ], [ %v3_100074c1, %dec_label_pc_100074dd ], [ %v3_100074c1, %dec_label_pc_100074da ]
  %v0_100074f5 = phi i32 [ %v1_100074ef, %dec_label_pc_100074e4 ], [ 65535, %dec_label_pc_100074dd ], [ %v1_100074cc, %dec_label_pc_100074da ]
  %v0_100074fc = load i32, i32* @edi, align 4
  %v3_100074fd = and i32 %v0_100074f5, 65535
  %v5_100074fd = and i32 %v0_100074fc, -65536
  %v6_100074fd = or i32 %v5_100074fd, %v3_100074fd
  store i32 %v6_100074fd, i32* @edi, align 4
  store i32 %v3_100074fd, i32* @ecx, align 4
  %v5_10007509 = icmp slt i32 %v3_100074fd, %v1_10007507
  br i1 %v5_10007509, label %dec_label_pc_10007574, label %dec_label_pc_1000750b

dec_label_pc_1000750b:                            ; preds = %dec_label_pc_100074f5
  %v1_1000750d = add i32 %v0_100074a3, 4
  store i32 %v1_1000750d, i32* @ecx, align 4
  %sext = mul i32 %v0_100074f5, 65536
  %v5_10007510 = sdiv i32 %sext, 65536
  %v7_10007510 = call i32 @function_10007300(i32 1, i32 %v0_100074fc, i32 %v0_100074a4, i32 %v0_100074a3, i32 %v5_10007510, i32 %v0_100074a0)
  store i32 %v7_10007510, i32* %eax.global-to-local, align 4
  %v0_10007515 = load i32, i32* @esi, align 4
  %v1_10007515 = add i32 %v0_10007515, 22
  %v2_10007515 = inttoptr i32 %v1_10007515 to i16*
  %v3_10007515 = load i16, i16* %v2_10007515, align 2
  %v4_10007515 = zext i16 %v3_10007515 to i32
  store i32 %v4_10007515, i32* @ecx, align 4
  %v1_1000751d = add i32 %v0_10007515, 8
  %v2_1000751d = inttoptr i32 %v1_1000751d to i32*
  %v3_1000751d = load i32, i32* %v2_1000751d, align 4
  store i32 %v3_1000751d, i32* %eax.global-to-local, align 4
  %v5_10007522 = icmp slt i32 %v4_10007515, %v3_1000751d
  br i1 %v5_10007522, label %dec_label_pc_10007524, label %dec_label_pc_10007540

dec_label_pc_10007524:                            ; preds = %dec_label_pc_1000750b
  %v3_10007524 = load i16, i16* %v2_10007515, align 2
  %v4_10007524 = zext i16 %v3_10007524 to i32
  store i32 %v4_10007524, i32* @ecx, align 4
  %v1_10007528 = add nuw nsw i32 %v4_10007524, 1
  %v1_1000752b = and i32 %v1_10007528, 65535
  store i32 %v1_1000752b, i32* %edx.global-to-local, align 4
  %v5_10007534 = icmp slt i32 %v1_1000752b, %v3_1000751d
  br i1 %v5_10007534, label %dec_label_pc_10007536, label %dec_label_pc_10007539

dec_label_pc_10007536:                            ; preds = %dec_label_pc_10007524
  store i32 %v1_10007528, i32* @ecx, align 4
  br label %dec_label_pc_10007551

dec_label_pc_10007539:                            ; preds = %dec_label_pc_10007524
  store i32 65535, i32* @ecx, align 4
  br label %dec_label_pc_10007551

dec_label_pc_10007540:                            ; preds = %dec_label_pc_1000750b
  %v3_10007540 = load i32, i32* %v2_1000751d, align 4
  store i32 %v3_10007540, i32* %eax.global-to-local, align 4
  %v1_10007545 = icmp eq i32 %v3_10007540, 0
  %v2_10007545 = icmp slt i32 %v3_10007540, 0
  %v3_10007547 = icmp eq i1 %v2_10007545, false
  %v4_10007547 = icmp eq i1 %v1_10007545, false
  %v5_10007547 = icmp eq i1 %v3_10007547, %v4_10007547
  %v1_1000754b = select i1 %v5_10007547, i32 0, i32 65535
  store i32 %v1_1000754b, i32* @ecx, align 4
  br label %dec_label_pc_10007551

dec_label_pc_10007551:                            ; preds = %dec_label_pc_10007540, %dec_label_pc_10007539, %dec_label_pc_10007536
  %v1_10007562 = phi i32 [ %v3_10007540, %dec_label_pc_10007540 ], [ %v3_1000751d, %dec_label_pc_10007539 ], [ %v3_1000751d, %dec_label_pc_10007536 ]
  %v0_10007551 = phi i32 [ %v1_1000754b, %dec_label_pc_10007540 ], [ 65535, %dec_label_pc_10007539 ], [ %v1_10007528, %dec_label_pc_10007536 ]
  %v3_10007558 = and i32 %v0_10007551, 65535
  %v4_10007558 = load i32, i32* @edi, align 4
  %v5_10007558 = and i32 %v4_10007558, -65536
  %v6_10007558 = or i32 %v5_10007558, %v3_10007558
  store i32 %v6_10007558, i32* @edi, align 4
  store i32 %v3_10007558, i32* @ecx, align 4
  %v5_10007564 = icmp slt i32 %v3_10007558, %v1_10007562
  br i1 %v5_10007564, label %dec_label_pc_10007574, label %dec_label_pc_10007566

dec_label_pc_10007566:                            ; preds = %dec_label_pc_10007551
  %v0_1000756b = call i32 @Error()
  store i32 %v0_1000756b, i32* %eax.global-to-local, align 4
  %v0_10007574.pre = load i32, i32* @esi, align 4
  %v0_10007577.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10007574

dec_label_pc_10007574:                            ; preds = %dec_label_pc_10007566, %dec_label_pc_10007551, %dec_label_pc_100074f5
  %v0_10007577 = phi i32 [ %v0_10007577.pre, %dec_label_pc_10007566 ], [ %v6_10007558, %dec_label_pc_10007551 ], [ %v6_100074fd, %dec_label_pc_100074f5 ]
  %v2_10007577 = phi i32 [ %v0_10007574.pre, %dec_label_pc_10007566 ], [ %v0_10007515, %dec_label_pc_10007551 ], [ %v0_100074a3, %dec_label_pc_100074f5 ]
  %v1_10007574 = add i32 %v2_10007577, 4
  %v2_10007574 = inttoptr i32 %v1_10007574 to i32*
  %v3_10007574 = load i32, i32* %v2_10007574, align 4
  store i32 %v3_10007574, i32* %edx.global-to-local, align 4
  %v1_10007577 = trunc i32 %v0_10007577 to i16
  %v3_10007577 = add i32 %v2_10007577, 22
  %v4_10007577 = inttoptr i32 %v3_10007577 to i16*
  store i16 %v1_10007577, i16* %v4_10007577, align 2
  %v0_1000757b = load i32, i32* @edi, align 4
  %v1_1000757b = and i32 %v0_1000757b, 65535
  store i32 %v1_1000757b, i32* %eax.global-to-local, align 4
  %v0_1000757f = load i32, i32* %edx.global-to-local, align 4
  %v1_1000757f = load i32, i32* @esi, align 4
  %v2_1000757f = add i32 %v1_1000757f, 24
  %v3_1000757f = inttoptr i32 %v2_1000757f to i32*
  store i32 %v0_1000757f, i32* %v3_1000757f, align 4
  %v0_10007582 = load i32, i32* @esp, align 4
  %v1_10007582 = inttoptr i32 %v0_10007582 to i32*
  %v2_10007582 = load i32, i32* %v1_10007582, align 4
  store i32 %v2_10007582, i32* @esi, align 4
  %v0_10007586 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10007586

dec_label_pc_10007587:                            ; preds = %dec_label_pc_100074a0
  %v1_10007587 = add i32 %v0_100074a3, 4
  %v2_10007587 = inttoptr i32 %v1_10007587 to i32*
  %v3_10007587 = load i32, i32* %v2_10007587, align 4
  store i32 %v3_10007587, i32* %edx.global-to-local, align 4
  store i32 %v4_100074a7, i32* %eax.global-to-local, align 4
  %v2_1000758c = mul nuw nsw i32 %v4_100074a7, 2
  store i32 %v2_1000758c, i32* @ecx, align 4
  %v2_1000758e = mul nuw nsw i32 %v4_100074a7, 16
  %v3_1000758e = or i32 %v2_1000758e, 2
  %v4_1000758e = add i32 %v3_10007587, %v3_1000758e
  %v5_1000758e = inttoptr i32 %v4_1000758e to i16*
  %v6_1000758e = load i16, i16* %v5_1000758e, align 2
  %v7_1000758e = zext i16 %v6_1000758e to i32
  %v9_1000758e = and i32 %v2_1000758c, 65536
  %v10_1000758e = or i32 %v7_1000758e, %v9_1000758e
  store i32 %v10_1000758e, i32* @ecx, align 4
  store i16 %v6_1000758e, i16* %v2_100074a7, align 2
  %v0_10007597 = load i32, i32* %edx.global-to-local, align 4
  %v1_10007597 = load i32, i32* @esi, align 4
  %v2_10007597 = add i32 %v1_10007597, 24
  %v3_10007597 = inttoptr i32 %v2_10007597 to i32*
  store i32 %v0_10007597, i32* %v3_10007597, align 4
  %v2_1000759a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000759a, i32* @esi, align 4
  %v0_1000759e = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000759e
}

define i32 @function_100075a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100075a0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v0_100075aa = load i32, i32* @ecx, align 4
  store i32 %v0_100075aa, i32* %esi.global-to-local, align 4
  %v1_100075ac = call i32 @function_10003620(i32 %arg1)
  store i32 %v1_100075ac, i32* %eax.global-to-local, align 4
  %v1_100075b1 = and i32 %v1_100075ac, 65535
  store i32 %v1_100075b1, i32* %edi.global-to-local, align 4
  store i32 %v0_100075aa, i32* @ecx, align 4
  %v1_100075b7 = call i32 @function_100035c0(i32 %v1_100075b1)
  store i32 %v1_100075b7, i32* %eax.global-to-local, align 4
  %v0_100075bc = load i32, i32* %esi.global-to-local, align 4
  %v1_100075bc = add i32 %v0_100075bc, 4
  %v2_100075bc = inttoptr i32 %v1_100075bc to i32*
  %v3_100075bc = load i32, i32* %v2_100075bc, align 4
  %v0_100075c2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100075c2 = and i32 %v0_100075c2, 65535
  %v2_100075c5 = mul nuw nsw i32 %v1_100075c2, 16
  store i32 %v2_100075c5, i32* %eax.global-to-local, align 4
  %v1_100075c8 = trunc i32 %v1_100075b7 to i16
  %v5_100075c8 = or i32 %v2_100075c5, 2
  %v6_100075c8 = add i32 %v5_100075c8, %v3_100075bc
  %v7_100075c8 = inttoptr i32 %v6_100075c8 to i16*
  store i16 %v1_100075c8, i16* %v7_100075c8, align 2
  %v0_100075cd = load i32, i32* %edi.global-to-local, align 4
  %v0_100075ce = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100075ce, i32* @ecx, align 4
  %v0_100075d0 = load i32, i32* %eax.global-to-local, align 4
  %v1_100075d3 = call i32 @function_100035c0(i32 %v0_100075cd)
  store i32 %v1_100075d3, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_100075dd = trunc i32 %v1_100075d3 to i16
  %v14_100075dd = icmp eq i16 %v1_100075dd, -1
  br i1 %v14_100075dd, label %dec_label_pc_100075f7, label %dec_label_pc_100075e2

dec_label_pc_100075e2:                            ; preds = %dec_label_pc_100075a0
  %v0_100075e2 = load i32, i32* %edi.global-to-local, align 4
  %v0_100075e3 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100075e3, i32* @ecx, align 4
  %v1_100075e5 = call i32 @function_100035c0(i32 %v0_100075e2)
  store i32 %v1_100075e5, i32* %eax.global-to-local, align 4
  %v1_100075ea = and i32 %v1_100075e5, 65535
  %v1_100075ed = add i32 %v0_100075e3, 4
  %v2_100075ed = inttoptr i32 %v1_100075ed to i32*
  %v3_100075ed = load i32, i32* %v2_100075ed, align 4
  store i32 %v3_100075ed, i32* %eax.global-to-local, align 4
  %v0_100075f2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100075f2 = trunc i32 %v0_100075f2 to i16
  %v4_100075f2 = mul nuw nsw i32 %v1_100075ea, 16
  %v5_100075f2 = or i32 %v4_100075f2, 4
  %v6_100075f2 = add i32 %v3_100075ed, %v5_100075f2
  %v7_100075f2 = inttoptr i32 %v6_100075f2 to i16*
  store i16 %v1_100075f2, i16* %v7_100075f2, align 2
  br label %dec_label_pc_100075f7

dec_label_pc_100075f7:                            ; preds = %dec_label_pc_100075e2, %dec_label_pc_100075a0
  store i32 65535, i32* @ecx, align 4
  %v0_100075fc = load i32, i32* %edi.global-to-local, align 4
  %v1_100075fc = trunc i32 %v0_100075fc to i16
  %v14_100075fc = icmp eq i16 %v1_100075fc, -1
  br i1 %v14_100075fc, label %dec_label_pc_10007618, label %dec_label_pc_10007601

dec_label_pc_10007601:                            ; preds = %dec_label_pc_100075f7
  %v0_10007601 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007601 = load i32, i32* @esp, align 4
  %v2_10007601 = add i32 %v1_10007601, -4
  %v3_10007601 = inttoptr i32 %v2_10007601 to i32*
  store i32 %v0_10007601, i32* %v3_10007601, align 4
  %v0_10007602 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10007602, i32* @ecx, align 4
  %v1_10007604 = call i32 @function_10003560(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10007604, i32* %eax.global-to-local, align 4
  %v1_10007609 = add i32 %v0_10007602, 4
  %v2_10007609 = inttoptr i32 %v1_10007609 to i32*
  %v3_10007609 = load i32, i32* %v2_10007609, align 4
  store i32 %v3_10007609, i32* @ecx, align 4
  %v1_1000760c = and i32 %v1_10007604, 65535
  store i32 %v1_1000760c, i32* %eax.global-to-local, align 4
  %v0_1000760f = load i32, i32* %edi.global-to-local, align 4
  %v1_10007613 = trunc i32 %v1_10007604 to i16
  %v4_10007613 = mul i32 %v0_1000760f, 16
  %v5_10007613 = or i32 %v4_10007613, 4
  %v6_10007613 = add i32 %v5_10007613, %v3_10007609
  %v7_10007613 = inttoptr i32 %v6_10007613 to i16*
  store i16 %v1_10007613, i16* %v7_10007613, align 2
  br label %dec_label_pc_10007618

dec_label_pc_10007618:                            ; preds = %dec_label_pc_10007601, %dec_label_pc_100075f7
  %v0_10007618 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007618 = trunc i32 %v0_10007618 to i16
  %v2_10007618 = load i32, i32* %esi.global-to-local, align 4
  %v3_10007618 = add i32 %v2_10007618, 16
  %v4_10007618 = inttoptr i32 %v3_10007618 to i16*
  %v5_10007618 = load i16, i16* %v4_10007618, align 2
  %v16_10007618 = icmp eq i16 %v1_10007618, %v5_10007618
  br i1 %v16_10007618, label %dec_label_pc_10007660, label %dec_label_pc_1000761e

dec_label_pc_1000761e:                            ; preds = %dec_label_pc_10007618
  %v1_1000761e = load i32, i32* @esp, align 4
  %v2_1000761e = add i32 %v1_1000761e, -4
  %v3_1000761e = inttoptr i32 %v2_1000761e to i32*
  store i32 %v0_10007618, i32* %v3_1000761e, align 4
  %v0_1000761f = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000761f, i32* @ecx, align 4
  %v1_10007621 = call i32 @function_10003560(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10007621, i32* %eax.global-to-local, align 4
  %v1_10007626 = and i32 %v1_10007621, 65535
  %v1_10007629 = load i32, i32* @esp, align 4
  %v2_10007629 = add i32 %v1_10007629, -4
  %v3_10007629 = inttoptr i32 %v2_10007629 to i32*
  store i32 %v1_10007626, i32* %v3_10007629, align 4
  %v0_1000762a = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000762a, i32* @ecx, align 4
  %v1_1000762c = call i32 @function_100035c0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000762c, i32* %eax.global-to-local, align 4
  %v0_10007631 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007631 = load i32, i32* @esp, align 4
  %v2_10007631 = add i32 %v1_10007631, -4
  %v3_10007631 = inttoptr i32 %v2_10007631 to i32*
  store i32 %v0_10007631, i32* %v3_10007631, align 4
  %v0_10007632 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10007632, i32* @ecx, align 4
  %v0_10007634 = load i32, i32* %eax.global-to-local, align 4
  %v1_10007634 = trunc i32 %v0_10007634 to i16
  %v2_10007634 = load i32, i32* %ebx.global-to-local, align 4
  %v3_10007634 = trunc i32 %v2_10007634 to i16
  %v14_10007634 = icmp eq i16 %v1_10007634, %v3_10007634
  %v1_10007637 = icmp eq i1 %v14_10007634, false
  %v1_1000764c = call i32 @function_10003560(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000764c, i32* %eax.global-to-local, align 4
  br i1 %v1_10007637, label %dec_label_pc_1000764c, label %dec_label_pc_10007639

dec_label_pc_10007639:                            ; preds = %dec_label_pc_1000761e
  %v0_1000763e = load i32, i32* %esi.global-to-local, align 4
  %v1_1000763e = add i32 %v0_1000763e, 4
  %v2_1000763e = inttoptr i32 %v1_1000763e to i32*
  %v3_1000763e = load i32, i32* %v2_1000763e, align 4
  store i32 %v3_1000763e, i32* @ecx, align 4
  %v1_10007641 = and i32 %v1_1000764c, 65535
  %v2_10007644 = mul nuw nsw i32 %v1_10007641, 2
  store i32 %v2_10007644, i32* %eax.global-to-local, align 4
  %v0_10007646 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007646 = trunc i32 %v0_10007646 to i16
  %v4_10007646 = mul nuw nsw i32 %v1_10007641, 16
  %v5_10007646 = add i32 %v3_1000763e, %v4_10007646
  %v6_10007646 = inttoptr i32 %v5_10007646 to i16*
  store i16 %v1_10007646, i16* %v6_10007646, align 2
  br label %dec_label_pc_10007664

dec_label_pc_1000764c:                            ; preds = %dec_label_pc_1000761e
  %v1_10007651 = and i32 %v1_1000764c, 65535
  %v0_10007654 = load i32, i32* %esi.global-to-local, align 4
  %v1_10007654 = add i32 %v0_10007654, 4
  %v2_10007654 = inttoptr i32 %v1_10007654 to i32*
  %v3_10007654 = load i32, i32* %v2_10007654, align 4
  store i32 %v3_10007654, i32* %eax.global-to-local, align 4
  %v0_10007659 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007659 = trunc i32 %v0_10007659 to i16
  %v4_10007659 = mul nuw nsw i32 %v1_10007651, 16
  %v5_10007659 = or i32 %v4_10007659, 2
  %v6_10007659 = add i32 %v3_10007654, %v5_10007659
  %v7_10007659 = inttoptr i32 %v6_10007659 to i16*
  store i16 %v1_10007659, i16* %v7_10007659, align 2
  br label %dec_label_pc_10007664

dec_label_pc_10007660:                            ; preds = %dec_label_pc_10007618
  %v0_10007660 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007660 = trunc i32 %v0_10007660 to i16
  store i16 %v1_10007660, i16* %v4_10007618, align 2
  br label %dec_label_pc_10007664

dec_label_pc_10007664:                            ; preds = %dec_label_pc_10007660, %dec_label_pc_1000764c, %dec_label_pc_10007639
  %v0_10007664 = load i32, i32* %esi.global-to-local, align 4
  %v1_10007664 = add i32 %v0_10007664, 4
  %v2_10007664 = inttoptr i32 %v1_10007664 to i32*
  %v3_10007664 = load i32, i32* %v2_10007664, align 4
  store i32 %v3_10007664, i32* @edx, align 4
  %v0_10007667 = load i32, i32* %edi.global-to-local, align 4
  %v2_10007669 = mul i32 %v0_10007667, 2
  store i32 %v2_10007669, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v0_10007670 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007670 = trunc i32 %v0_10007670 to i16
  %v4_10007670 = mul i32 %v0_10007667, 16
  %v5_10007670 = add i32 %v4_10007670, %v3_10007664
  %v6_10007670 = inttoptr i32 %v5_10007670 to i16*
  store i16 %v1_10007670, i16* %v6_10007670, align 2
  %v0_10007674 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007674 = trunc i32 %v0_10007674 to i16
  %v2_10007674 = load i32, i32* %eax.global-to-local, align 4
  %v3_10007674 = trunc i32 %v2_10007674 to i16
  %v14_10007674 = icmp eq i16 %v1_10007674, %v3_10007674
  br i1 %v14_10007674, label %dec_label_pc_10007684, label %dec_label_pc_10007679

dec_label_pc_10007679:                            ; preds = %dec_label_pc_10007664
  %v0_10007679 = load i32, i32* %esi.global-to-local, align 4
  %v1_10007679 = add i32 %v0_10007679, 4
  %v2_10007679 = inttoptr i32 %v1_10007679 to i32*
  %v3_10007679 = load i32, i32* %v2_10007679, align 4
  store i32 %v3_10007679, i32* @ecx, align 4
  store i32 %v0_100075d0, i32* @edx, align 4
  %v0_1000767f = load i32, i32* %edi.global-to-local, align 4
  %v1_1000767f = trunc i32 %v0_1000767f to i16
  %v5_1000767f = add i32 %v0_100075d0, 4
  %v6_1000767f = add i32 %v5_1000767f, %v3_10007679
  %v7_1000767f = inttoptr i32 %v6_1000767f to i16*
  store i16 %v1_1000767f, i16* %v7_1000767f, align 2
  %v0_10007688.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007684

dec_label_pc_10007684:                            ; preds = %dec_label_pc_10007679, %dec_label_pc_10007664
  %v0_10007688 = phi i32 [ %v0_10007688.pre, %dec_label_pc_10007679 ], [ %v2_10007674, %dec_label_pc_10007664 ]
  %v0_10007684 = load i32, i32* @esp, align 4
  %v1_10007684 = inttoptr i32 %v0_10007684 to i32*
  %v2_10007684 = load i32, i32* %v1_10007684, align 4
  store i32 %v2_10007684, i32* @edi, align 4
  %v3_10007684 = add i32 %v0_10007684, 4
  %v1_10007685 = inttoptr i32 %v3_10007684 to i32*
  %v2_10007685 = load i32, i32* %v1_10007685, align 4
  store i32 %v2_10007685, i32* @esi, align 4
  %v3_10007685 = add i32 %v0_10007684, 8
  %v1_10007686 = inttoptr i32 %v3_10007685 to i32*
  %v2_10007686 = load i32, i32* %v1_10007686, align 4
  store i32 %v2_10007686, i32* %ebx.global-to-local, align 4
  %v3_10007686 = add i32 %v0_10007684, 12
  %v1_10007687 = inttoptr i32 %v3_10007686 to i32*
  %v2_10007687 = load i32, i32* %v1_10007687, align 4
  store i32 %v2_10007687, i32* @ebp, align 4
  ret i32 %v0_10007688
}

define i32 @function_10007690(i32 %arg1) local_unnamed_addr {
dec_label_pc_10007690:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v0_1000769a = load i32, i32* @ecx, align 4
  store i32 %v0_1000769a, i32* %esi.global-to-local, align 4
  %v1_1000769c = call i32 @function_100035c0(i32 %arg1)
  store i32 %v1_1000769c, i32* %eax.global-to-local, align 4
  %v1_100076a1 = and i32 %v1_1000769c, 65535
  store i32 %v1_100076a1, i32* %edi.global-to-local, align 4
  store i32 %v0_1000769a, i32* @ecx, align 4
  %v1_100076a7 = call i32 @function_10003620(i32 %v1_100076a1)
  store i32 %v1_100076a7, i32* %eax.global-to-local, align 4
  %v0_100076ac = load i32, i32* %esi.global-to-local, align 4
  %v1_100076ac = add i32 %v0_100076ac, 4
  %v2_100076ac = inttoptr i32 %v1_100076ac to i32*
  %v3_100076ac = load i32, i32* %v2_100076ac, align 4
  %v0_100076b2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100076b2 = and i32 %v0_100076b2, 65535
  %v2_100076b5 = mul nuw nsw i32 %v1_100076b2, 16
  store i32 %v2_100076b5, i32* %eax.global-to-local, align 4
  %v1_100076b8 = trunc i32 %v1_100076a7 to i16
  %v5_100076b8 = add i32 %v2_100076b5, %v3_100076ac
  %v6_100076b8 = inttoptr i32 %v5_100076b8 to i16*
  store i16 %v1_100076b8, i16* %v6_100076b8, align 2
  %v0_100076bc = load i32, i32* %edi.global-to-local, align 4
  %v0_100076bd = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100076bd, i32* @ecx, align 4
  %v0_100076bf = load i32, i32* %eax.global-to-local, align 4
  %v1_100076c2 = call i32 @function_10003620(i32 %v0_100076bc)
  store i32 %v1_100076c2, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_100076cc = trunc i32 %v1_100076c2 to i16
  %v14_100076cc = icmp eq i16 %v1_100076cc, -1
  br i1 %v14_100076cc, label %dec_label_pc_100076e6, label %dec_label_pc_100076d1

dec_label_pc_100076d1:                            ; preds = %dec_label_pc_10007690
  %v0_100076d1 = load i32, i32* %edi.global-to-local, align 4
  %v0_100076d2 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100076d2, i32* @ecx, align 4
  %v1_100076d4 = call i32 @function_10003620(i32 %v0_100076d1)
  store i32 %v1_100076d4, i32* %eax.global-to-local, align 4
  %v1_100076d9 = and i32 %v1_100076d4, 65535
  %v1_100076dc = add i32 %v0_100076d2, 4
  %v2_100076dc = inttoptr i32 %v1_100076dc to i32*
  %v3_100076dc = load i32, i32* %v2_100076dc, align 4
  store i32 %v3_100076dc, i32* %eax.global-to-local, align 4
  %v0_100076e1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100076e1 = trunc i32 %v0_100076e1 to i16
  %v4_100076e1 = mul nuw nsw i32 %v1_100076d9, 16
  %v5_100076e1 = or i32 %v4_100076e1, 4
  %v6_100076e1 = add i32 %v3_100076dc, %v5_100076e1
  %v7_100076e1 = inttoptr i32 %v6_100076e1 to i16*
  store i16 %v1_100076e1, i16* %v7_100076e1, align 2
  br label %dec_label_pc_100076e6

dec_label_pc_100076e6:                            ; preds = %dec_label_pc_100076d1, %dec_label_pc_10007690
  store i32 65535, i32* @ecx, align 4
  %v0_100076eb = load i32, i32* %edi.global-to-local, align 4
  %v1_100076eb = trunc i32 %v0_100076eb to i16
  %v14_100076eb = icmp eq i16 %v1_100076eb, -1
  br i1 %v14_100076eb, label %dec_label_pc_10007707, label %dec_label_pc_100076f0

dec_label_pc_100076f0:                            ; preds = %dec_label_pc_100076e6
  %v0_100076f0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100076f0 = load i32, i32* @esp, align 4
  %v2_100076f0 = add i32 %v1_100076f0, -4
  %v3_100076f0 = inttoptr i32 %v2_100076f0 to i32*
  store i32 %v0_100076f0, i32* %v3_100076f0, align 4
  %v0_100076f1 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100076f1, i32* @ecx, align 4
  %v1_100076f3 = call i32 @function_10003560(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_100076f3, i32* %eax.global-to-local, align 4
  %v1_100076f8 = add i32 %v0_100076f1, 4
  %v2_100076f8 = inttoptr i32 %v1_100076f8 to i32*
  %v3_100076f8 = load i32, i32* %v2_100076f8, align 4
  store i32 %v3_100076f8, i32* @ecx, align 4
  %v1_100076fb = and i32 %v1_100076f3, 65535
  store i32 %v1_100076fb, i32* %eax.global-to-local, align 4
  %v0_100076fe = load i32, i32* %edi.global-to-local, align 4
  %v1_10007702 = trunc i32 %v1_100076f3 to i16
  %v4_10007702 = mul i32 %v0_100076fe, 16
  %v5_10007702 = or i32 %v4_10007702, 4
  %v6_10007702 = add i32 %v5_10007702, %v3_100076f8
  %v7_10007702 = inttoptr i32 %v6_10007702 to i16*
  store i16 %v1_10007702, i16* %v7_10007702, align 2
  br label %dec_label_pc_10007707

dec_label_pc_10007707:                            ; preds = %dec_label_pc_100076f0, %dec_label_pc_100076e6
  %v0_10007707 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007707 = trunc i32 %v0_10007707 to i16
  %v2_10007707 = load i32, i32* %esi.global-to-local, align 4
  %v3_10007707 = add i32 %v2_10007707, 16
  %v4_10007707 = inttoptr i32 %v3_10007707 to i16*
  %v5_10007707 = load i16, i16* %v4_10007707, align 2
  %v16_10007707 = icmp eq i16 %v1_10007707, %v5_10007707
  br i1 %v16_10007707, label %dec_label_pc_1000774f, label %dec_label_pc_1000770d

dec_label_pc_1000770d:                            ; preds = %dec_label_pc_10007707
  %v1_1000770d = load i32, i32* @esp, align 4
  %v2_1000770d = add i32 %v1_1000770d, -4
  %v3_1000770d = inttoptr i32 %v2_1000770d to i32*
  store i32 %v0_10007707, i32* %v3_1000770d, align 4
  %v0_1000770e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000770e, i32* @ecx, align 4
  %v1_10007710 = call i32 @function_10003560(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10007710, i32* %eax.global-to-local, align 4
  %v1_10007715 = and i32 %v1_10007710, 65535
  %v1_10007718 = load i32, i32* @esp, align 4
  %v2_10007718 = add i32 %v1_10007718, -4
  %v3_10007718 = inttoptr i32 %v2_10007718 to i32*
  store i32 %v1_10007715, i32* %v3_10007718, align 4
  %v0_10007719 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10007719, i32* @ecx, align 4
  %v1_1000771b = call i32 @function_10003620(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000771b, i32* %eax.global-to-local, align 4
  %v0_10007720 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007720 = load i32, i32* @esp, align 4
  %v2_10007720 = add i32 %v1_10007720, -4
  %v3_10007720 = inttoptr i32 %v2_10007720 to i32*
  store i32 %v0_10007720, i32* %v3_10007720, align 4
  %v0_10007721 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10007721, i32* @ecx, align 4
  %v0_10007723 = load i32, i32* %eax.global-to-local, align 4
  %v1_10007723 = trunc i32 %v0_10007723 to i16
  %v2_10007723 = load i32, i32* %ebx.global-to-local, align 4
  %v3_10007723 = trunc i32 %v2_10007723 to i16
  %v14_10007723 = icmp eq i16 %v1_10007723, %v3_10007723
  %v1_10007726 = icmp eq i1 %v14_10007723, false
  %v1_1000773c = call i32 @function_10003560(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000773c, i32* %eax.global-to-local, align 4
  br i1 %v1_10007726, label %dec_label_pc_1000773c, label %dec_label_pc_10007728

dec_label_pc_10007728:                            ; preds = %dec_label_pc_1000770d
  %v0_1000772d = load i32, i32* %esi.global-to-local, align 4
  %v1_1000772d = add i32 %v0_1000772d, 4
  %v2_1000772d = inttoptr i32 %v1_1000772d to i32*
  %v3_1000772d = load i32, i32* %v2_1000772d, align 4
  store i32 %v3_1000772d, i32* @ecx, align 4
  %v1_10007730 = and i32 %v1_1000773c, 65535
  %v2_10007733 = mul nuw nsw i32 %v1_10007730, 2
  store i32 %v2_10007733, i32* %eax.global-to-local, align 4
  %v0_10007735 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007735 = trunc i32 %v0_10007735 to i16
  %v4_10007735 = mul nuw nsw i32 %v1_10007730, 16
  %v5_10007735 = or i32 %v4_10007735, 2
  %v6_10007735 = add i32 %v3_1000772d, %v5_10007735
  %v7_10007735 = inttoptr i32 %v6_10007735 to i16*
  store i16 %v1_10007735, i16* %v7_10007735, align 2
  br label %dec_label_pc_10007753

dec_label_pc_1000773c:                            ; preds = %dec_label_pc_1000770d
  %v1_10007741 = and i32 %v1_1000773c, 65535
  %v0_10007744 = load i32, i32* %esi.global-to-local, align 4
  %v1_10007744 = add i32 %v0_10007744, 4
  %v2_10007744 = inttoptr i32 %v1_10007744 to i32*
  %v3_10007744 = load i32, i32* %v2_10007744, align 4
  store i32 %v3_10007744, i32* %eax.global-to-local, align 4
  %v0_10007749 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007749 = trunc i32 %v0_10007749 to i16
  %v4_10007749 = mul nuw nsw i32 %v1_10007741, 16
  %v5_10007749 = add i32 %v3_10007744, %v4_10007749
  %v6_10007749 = inttoptr i32 %v5_10007749 to i16*
  store i16 %v1_10007749, i16* %v6_10007749, align 2
  br label %dec_label_pc_10007753

dec_label_pc_1000774f:                            ; preds = %dec_label_pc_10007707
  %v0_1000774f = load i32, i32* %edi.global-to-local, align 4
  %v1_1000774f = trunc i32 %v0_1000774f to i16
  store i16 %v1_1000774f, i16* %v4_10007707, align 2
  br label %dec_label_pc_10007753

dec_label_pc_10007753:                            ; preds = %dec_label_pc_1000774f, %dec_label_pc_1000773c, %dec_label_pc_10007728
  %v0_10007753 = load i32, i32* %esi.global-to-local, align 4
  %v1_10007753 = add i32 %v0_10007753, 4
  %v2_10007753 = inttoptr i32 %v1_10007753 to i32*
  %v3_10007753 = load i32, i32* %v2_10007753, align 4
  store i32 %v3_10007753, i32* @edx, align 4
  %v0_10007756 = load i32, i32* %edi.global-to-local, align 4
  %v2_10007758 = mul i32 %v0_10007756, 2
  store i32 %v2_10007758, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v0_1000775f = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000775f = trunc i32 %v0_1000775f to i16
  %v4_1000775f = mul i32 %v0_10007756, 16
  %v5_1000775f = or i32 %v4_1000775f, 2
  %v6_1000775f = add i32 %v5_1000775f, %v3_10007753
  %v7_1000775f = inttoptr i32 %v6_1000775f to i16*
  store i16 %v1_1000775f, i16* %v7_1000775f, align 2
  %v0_10007764 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007764 = trunc i32 %v0_10007764 to i16
  %v2_10007764 = load i32, i32* %eax.global-to-local, align 4
  %v3_10007764 = trunc i32 %v2_10007764 to i16
  %v14_10007764 = icmp eq i16 %v1_10007764, %v3_10007764
  br i1 %v14_10007764, label %dec_label_pc_10007774, label %dec_label_pc_10007769

dec_label_pc_10007769:                            ; preds = %dec_label_pc_10007753
  %v0_10007769 = load i32, i32* %esi.global-to-local, align 4
  %v1_10007769 = add i32 %v0_10007769, 4
  %v2_10007769 = inttoptr i32 %v1_10007769 to i32*
  %v3_10007769 = load i32, i32* %v2_10007769, align 4
  store i32 %v3_10007769, i32* @ecx, align 4
  store i32 %v0_100076bf, i32* @edx, align 4
  %v0_1000776f = load i32, i32* %edi.global-to-local, align 4
  %v1_1000776f = trunc i32 %v0_1000776f to i16
  %v5_1000776f = add i32 %v0_100076bf, 4
  %v6_1000776f = add i32 %v5_1000776f, %v3_10007769
  %v7_1000776f = inttoptr i32 %v6_1000776f to i16*
  store i16 %v1_1000776f, i16* %v7_1000776f, align 2
  %v0_10007778.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007774

dec_label_pc_10007774:                            ; preds = %dec_label_pc_10007769, %dec_label_pc_10007753
  %v0_10007778 = phi i32 [ %v0_10007778.pre, %dec_label_pc_10007769 ], [ %v2_10007764, %dec_label_pc_10007753 ]
  %v0_10007774 = load i32, i32* @esp, align 4
  %v1_10007774 = inttoptr i32 %v0_10007774 to i32*
  %v2_10007774 = load i32, i32* %v1_10007774, align 4
  store i32 %v2_10007774, i32* @edi, align 4
  %v3_10007774 = add i32 %v0_10007774, 4
  %v1_10007775 = inttoptr i32 %v3_10007774 to i32*
  %v2_10007775 = load i32, i32* %v1_10007775, align 4
  store i32 %v2_10007775, i32* @esi, align 4
  %v3_10007775 = add i32 %v0_10007774, 8
  %v1_10007776 = inttoptr i32 %v3_10007775 to i32*
  %v2_10007776 = load i32, i32* %v1_10007776, align 4
  store i32 %v2_10007776, i32* %ebx.global-to-local, align 4
  %v3_10007776 = add i32 %v0_10007774, 12
  %v1_10007777 = inttoptr i32 %v3_10007776 to i32*
  %v2_10007777 = load i32, i32* %v1_10007777, align 4
  store i32 %v2_10007777, i32* @ebp, align 4
  ret i32 %v0_10007778
}

define i32 @function_10007780() local_unnamed_addr {
dec_label_pc_10007780:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10007781 = load i32, i32* @edi, align 4
  store i32 %v0_10007781, i32* %stack_var_-8, align 4
  %v4_10007781 = ptrtoint i32* %stack_var_-8 to i32
  %v0_10007782 = load i32, i32* @ecx, align 4
  store i32 %v0_10007782, i32* %ebx.global-to-local, align 4
  %v1_10007784 = add i32 %v0_10007782, 16
  %v2_10007784 = inttoptr i32 %v1_10007784 to i32*
  %v3_10007784 = load i32, i32* %v2_10007784, align 4
  %v1_10007787 = add i32 %v3_10007784, -1
  %v10_10007787 = icmp slt i32 %v1_10007787, 0
  store i32 %v1_10007787, i32* %edi.global-to-local, align 4
  br i1 %v10_10007787, label %dec_label_pc_100077c7, label %dec_label_pc_1000778a

dec_label_pc_1000778a:                            ; preds = %dec_label_pc_10007780
  %v0_1000778a = load i32, i32* @esi, align 4
  store i32 %v0_1000778a, i32* %stack_var_-12, align 4
  %v4_1000778a = ptrtoint i32* %stack_var_-12 to i32
  %v2_10007790 = mul i32 %v1_10007787, 12
  store i32 %v2_10007790, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10007792

dec_label_pc_10007792:                            ; preds = %dec_label_pc_100077c0.dec_label_pc_10007792_crit_edge, %dec_label_pc_1000778a
  %v1_1000779c = phi i32 [ %v0_100077c6, %dec_label_pc_100077c0.dec_label_pc_10007792_crit_edge ], [ %v4_1000778a, %dec_label_pc_1000778a ]
  %v0_10007795 = phi i32 [ %v1_100077c0, %dec_label_pc_100077c0.dec_label_pc_10007792_crit_edge ], [ %v2_10007790, %dec_label_pc_1000778a ]
  %v0_10007792 = phi i32 [ %v0_10007792.pre, %dec_label_pc_100077c0.dec_label_pc_10007792_crit_edge ], [ %v0_10007782, %dec_label_pc_1000778a ]
  %v1_10007792 = add i32 %v0_10007792, 4
  %v2_10007792 = inttoptr i32 %v1_10007792 to i32*
  %v3_10007792 = load i32, i32* %v2_10007792, align 4
  %v3_10007795 = add i32 %v3_10007792, %v0_10007795
  %v4_10007795 = inttoptr i32 %v3_10007795 to i32*
  %v5_10007795 = load i32, i32* %v4_10007795, align 4
  %v1_10007798 = icmp eq i32 %v5_10007795, 0
  br i1 %v1_10007798, label %dec_label_pc_100077a5, label %dec_label_pc_1000779c

dec_label_pc_1000779c:                            ; preds = %dec_label_pc_10007792
  %v2_1000779c = add i32 %v1_1000779c, -4
  %v3_1000779c = inttoptr i32 %v2_1000779c to i32*
  store i32 %v5_10007795, i32* %v3_1000779c, align 4
  %v1_1000779d = call i32 @function_1000bd90(i32 ptrtoint (i32* @5 to i32))
  %v0_100077a2 = load i32, i32* @esp, align 4
  %v1_100077a2 = add i32 %v0_100077a2, 4
  %v0_100077a5.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_100077a8.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100077a5

dec_label_pc_100077a5:                            ; preds = %dec_label_pc_1000779c, %dec_label_pc_10007792
  %v1_100077a8 = phi i32 [ %v1_100077a8.pre, %dec_label_pc_1000779c ], [ %v0_10007795, %dec_label_pc_10007792 ]
  %v0_100077a5 = phi i32 [ %v0_100077a5.pre, %dec_label_pc_1000779c ], [ %v0_10007792, %dec_label_pc_10007792 ]
  %v1_100077ba = phi i32 [ %v1_100077a2, %dec_label_pc_1000779c ], [ %v1_1000779c, %dec_label_pc_10007792 ]
  %v1_100077a5 = add i32 %v0_100077a5, 4
  %v2_100077a5 = inttoptr i32 %v1_100077a5 to i32*
  %v3_100077a5 = load i32, i32* %v2_100077a5, align 4
  store i32 %v3_100077a5, i32* @ecx, align 4
  %v3_100077a8 = add i32 %v1_100077a8, 8
  %v4_100077a8 = add i32 %v3_100077a8, %v3_100077a5
  %v5_100077a8 = inttoptr i32 %v4_100077a8 to i32*
  %v6_100077a8 = load i32, i32* %v5_100077a8, align 4
  store i32 %v6_100077a8, i32* @eax, align 4
  %v1_100077ac = icmp eq i32 %v6_100077a8, 0
  br i1 %v1_100077ac, label %dec_label_pc_100077c0, label %dec_label_pc_100077b0

dec_label_pc_100077b0:                            ; preds = %dec_label_pc_100077a5
  %v0_100077b0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100077b0, i32* %edx.global-to-local, align 4
  %v1_100077b6 = inttoptr i32 %v0_100077b0 to i32*
  %v2_100077b6 = load i32, i32* %v1_100077b6, align 4
  store i32 %v2_100077b6, i32* @ecx, align 4
  %v1_100077b8 = inttoptr i32 %v2_100077b6 to i32*
  %v2_100077b8 = load i32, i32* %v1_100077b8, align 4
  store i32 %v2_100077b8, i32* %edx.global-to-local, align 4
  %v2_100077ba = add i32 %v1_100077ba, -4
  %v3_100077ba = inttoptr i32 %v2_100077ba to i32*
  store i32 %v6_100077a8, i32* %v3_100077ba, align 4
  %v0_100077bb = load i32, i32* %edx.global-to-local, align 4
  %v1_100077bb = add i32 %v0_100077bb, 20
  %v2_100077bb = inttoptr i32 %v1_100077bb to i32*
  %v3_100077bb = load i32, i32* %v2_100077bb, align 4
  store i32 %v3_100077bb, i32* @eax, align 4
  %v0_100077c0.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_100077c0

dec_label_pc_100077c0:                            ; preds = %dec_label_pc_100077b0, %dec_label_pc_100077a5
  %v0_100077c0 = phi i32 [ %v0_100077c0.pre, %dec_label_pc_100077b0 ], [ %v1_100077a8, %dec_label_pc_100077a5 ]
  %v0_100077c6 = phi i32 [ %v2_100077ba, %dec_label_pc_100077b0 ], [ %v1_100077ba, %dec_label_pc_100077a5 ]
  %v1_100077c0 = add i32 %v0_100077c0, -12
  store i32 %v1_100077c0, i32* %esi.global-to-local, align 4
  %v0_100077c3 = load i32, i32* %edi.global-to-local, align 4
  %v1_100077c3 = add i32 %v0_100077c3, -1
  %v10_100077c3 = icmp slt i32 %v1_100077c3, 0
  store i32 %v1_100077c3, i32* %edi.global-to-local, align 4
  %v1_100077c4 = icmp eq i1 %v10_100077c3, false
  br i1 %v1_100077c4, label %dec_label_pc_100077c0.dec_label_pc_10007792_crit_edge, label %dec_label_pc_100077c6

dec_label_pc_100077c0.dec_label_pc_10007792_crit_edge: ; preds = %dec_label_pc_100077c0
  %v0_10007792.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10007792

dec_label_pc_100077c6:                            ; preds = %dec_label_pc_100077c0
  %v1_100077c6 = inttoptr i32 %v0_100077c6 to i32*
  %v2_100077c6 = load i32, i32* %v1_100077c6, align 4
  store i32 %v2_100077c6, i32* @esi, align 4
  %v3_100077c6 = add i32 %v0_100077c6, 4
  %v0_100077c8.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100077c7

dec_label_pc_100077c7:                            ; preds = %dec_label_pc_100077c6, %dec_label_pc_10007780
  %v0_100077c8 = phi i32 [ %v0_100077c8.pre, %dec_label_pc_100077c6 ], [ %v0_10007782, %dec_label_pc_10007780 ]
  %v0_100077c7 = phi i32 [ %v3_100077c6, %dec_label_pc_100077c6 ], [ %v4_10007781, %dec_label_pc_10007780 ]
  %v1_100077c7 = inttoptr i32 %v0_100077c7 to i32*
  %v2_100077c7 = load i32, i32* %v1_100077c7, align 4
  store i32 %v2_100077c7, i32* %edi.global-to-local, align 4
  %v1_100077c8 = add i32 %v0_100077c8, 16
  %v2_100077c8 = inttoptr i32 %v1_100077c8 to i32*
  store i32 0, i32* %v2_100077c8, align 4
  %v0_100077cf = load i32, i32* @esp, align 4
  %v1_100077cf = inttoptr i32 %v0_100077cf to i32*
  %v2_100077cf = load i32, i32* %v1_100077cf, align 4
  store i32 %v2_100077cf, i32* @ebx, align 4
  %v0_100077d0 = load i32, i32* @eax, align 4
  ret i32 %v0_100077d0
}

define i32 @function_100077e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100077e0:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-10 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-6 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_10007850 = ptrtoint i32* %stack_var_-6 to i32
  %v2_100078bb = ptrtoint i32* %stack_var_-8 to i32
  %v2_10007903 = ptrtoint i32* %stack_var_-10 to i32
  %v1_100077f041 = add i32 %arg1, 38
  %v2_100077f042 = inttoptr i32 %v1_100077f041 to i16*
  %v3_100077f043 = load i16, i16* %v2_100077f042, align 2
  %v4_100077f044 = zext i16 %v3_100077f043 to i32
  store i32 %v4_100077f044, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v1_1000780045 = icmp eq i16 %v3_100077f043, 0
  br i1 %v1_1000780045, label %dec_label_pc_100077e0.dec_label_pc_100077f0.dec_label_pc_10007958_crit_edge_crit_edge, label %dec_label_pc_10007810.preheader

dec_label_pc_100077e0.dec_label_pc_100077f0.dec_label_pc_10007958_crit_edge_crit_edge: ; preds = %dec_label_pc_100077e0
  %v0_1000795e.pre.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_10007958

dec_label_pc_10007810.preheader:                  ; preds = %dec_label_pc_100077e0, %dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge
  %v4_100077f051 = phi i32 [ %v4_100077f0, %dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge ], [ %v4_100077f044, %dec_label_pc_100077e0 ]
  %v0_100077f050 = phi i32 [ %v0_100077f0.pre, %dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge ], [ %arg1, %dec_label_pc_100077e0 ]
  br label %dec_label_pc_10007810

dec_label_pc_10007810:                            ; preds = %dec_label_pc_10007810.preheader, %dec_label_pc_10007942.dec_label_pc_10007810_crit_edge
  %v0_1000781c = phi i32 [ %v0_1000781c.pre, %dec_label_pc_10007942.dec_label_pc_10007810_crit_edge ], [ %v0_100077f050, %dec_label_pc_10007810.preheader ]
  %stack_var_7.0 = phi i8 [ %stack_var_7.5, %dec_label_pc_10007942.dec_label_pc_10007810_crit_edge ], [ 1, %dec_label_pc_10007810.preheader ]
  %v0_10007942 = phi i32 [ %v1_10007942, %dec_label_pc_10007942.dec_label_pc_10007810_crit_edge ], [ 0, %dec_label_pc_10007810.preheader ]
  %v1_10007810 = and i32 %v0_10007942, 65535
  %v1_1000781c = inttoptr i32 %v0_1000781c to i32*
  %v2_1000781c = load i32, i32* %v1_1000781c, align 4
  %v2_10007822 = mul nuw nsw i32 %v1_10007810, 56
  store i32 %v2_10007822, i32* @ebx, align 4
  %v3_10007824 = add nuw nsw i32 %v2_10007822, 18
  %v4_10007824 = add i32 %v3_10007824, %v2_1000781c
  %v5_10007824 = inttoptr i32 %v4_10007824 to i16*
  %v6_10007824 = load i16, i16* %v5_10007824, align 2
  %v7_10007824 = zext i16 %v6_10007824 to i32
  store i32 0, i32* @edi, align 4
  %v1_10007831 = icmp eq i16 %v6_10007824, 0
  br i1 %v1_10007831, label %dec_label_pc_10007942, label %dec_label_pc_10007840

dec_label_pc_10007840:                            ; preds = %dec_label_pc_10007810, %dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge
  %v0_10007840 = phi i32 [ %v0_10007840.pre, %dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge ], [ %v0_10007942, %dec_label_pc_10007810 ]
  %stack_var_7.1 = phi i8 [ %stack_var_7.4, %dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge ], [ %stack_var_7.0, %dec_label_pc_10007810 ]
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.3, %dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge ], [ %v7_10007824, %dec_label_pc_10007810 ]
  %stack_var_-24.0 = phi i32 [ %v1_1000792f, %dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge ], [ 0, %dec_label_pc_10007810 ]
  %v1_10007840 = load i32, i32* @esp, align 4
  %v2_10007840 = add i32 %v1_10007840, -4
  %v3_10007840 = inttoptr i32 %v2_10007840 to i32*
  store i32 %v0_10007840, i32* %v3_10007840, align 4
  store i32 %v2_10007840, i32* @eax, align 4
  %v0_10007843 = load i32, i32* @edi, align 4
  %v1_10007843 = trunc i32 %v0_10007843 to i16
  %v3_10007843 = inttoptr i32 %v2_10007840 to i16*
  store i16 %v1_10007843, i16* %v3_10007843, align 2
  %v0_10007846 = load i32, i32* @esi, align 4
  %v1_10007846 = inttoptr i32 %v0_10007846 to i32*
  %v2_10007846 = load i32, i32* %v1_10007846, align 4
  %v1_10007848 = load i32, i32* @ebx, align 4
  %v2_10007848 = add i32 %v1_10007848, %v2_10007846
  store i32 %v2_10007848, i32* @ecx, align 4
  %sext = mul i32 %stack_var_-24.0, 65536
  %v1_1000784a = sdiv i32 %sext, 65536
  %v2_1000784a = call i32 @function_1000e5b0(i32 %v1_1000784a)
  %v1_1000784f = load i32, i32* @esp, align 4
  %v2_1000784f = add i32 %v1_1000784f, -4
  %v3_1000784f = inttoptr i32 %v2_1000784f to i32*
  store i32 %v2_1000784a, i32* %v3_1000784f, align 4
  %v2_10007853 = add i32 %v1_1000784f, -8
  %v3_10007853 = inttoptr i32 %v2_10007853 to i32*
  store i32 %v2_10007850, i32* %v3_10007853, align 4
  %v0_10007854 = load i32, i32* @esi, align 4
  %v1_10007854 = add i32 %v0_10007854, 20
  store i32 %v1_10007854, i32* @ecx, align 4
  %v2_10007857 = call i32 @function_1000ed60(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v1_1000785c = inttoptr i32 %v2_10007857 to i16*
  %v2_1000785c = load i16, i16* %v1_1000785c, align 2
  %v3_1000785c = zext i16 %v2_1000785c to i32
  %v10_1000785f = icmp eq i16 %v2_1000785c, -1
  br i1 %v10_1000785f, label %dec_label_pc_1000792f, label %dec_label_pc_1000786a

dec_label_pc_1000786a:                            ; preds = %dec_label_pc_10007840
  %v0_1000786a = load i32, i32* @esi, align 4
  %v1_1000786a = inttoptr i32 %v0_1000786a to i32*
  %v2_1000786a = load i32, i32* %v1_1000786a, align 4
  store i32 %v2_1000786a, i32* %edx.global-to-local, align 4
  store i32 %v3_1000785c, i32* @ecx, align 4
  %v2_1000787b = mul nuw nsw i32 %v3_1000785c, 56
  store i32 %v2_1000787b, i32* @eax, align 4
  %v3_1000787d = add nuw nsw i32 %v2_1000787b, 18
  %v4_1000787d = add i32 %v3_1000787d, %v2_1000786a
  %v5_1000787d = inttoptr i32 %v4_1000787d to i16*
  %v6_1000787d = load i16, i16* %v5_1000787d, align 2
  %v7_1000787d = zext i16 %v6_1000787d to i32
  store i32 %v7_1000787d, i32* @ecx, align 4
  %v1_1000788f = icmp eq i16 %v6_1000787d, 0
  br i1 %v1_1000788f, label %dec_label_pc_1000792f, label %dec_label_pc_100078a3.preheader

dec_label_pc_100078a3.preheader:                  ; preds = %dec_label_pc_1000786a
  br label %dec_label_pc_100078a3

dec_label_pc_100078a0:                            ; preds = %dec_label_pc_1000791c
  store i32 %v2_1000787b, i32* @eax, align 4
  %v5_100078a3.pre = load i32, i32* @edx, align 4
  %v0_100078a7.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_100078a3

dec_label_pc_100078a3:                            ; preds = %dec_label_pc_100078a3.preheader, %dec_label_pc_100078a0
  %v0_100078a7 = phi i32 [ %v0_100078a7.pre, %dec_label_pc_100078a0 ], [ %v7_1000787d, %dec_label_pc_100078a3.preheader ]
  %v5_100078a3 = phi i32 [ %v5_100078a3.pre, %dec_label_pc_100078a0 ], [ %v2_1000786a, %dec_label_pc_100078a3.preheader ]
  %stack_var_7.2 = phi i8 [ %stack_var_7.3, %dec_label_pc_100078a0 ], [ %stack_var_7.1, %dec_label_pc_100078a3.preheader ]
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.2, %dec_label_pc_100078a0 ], [ %stack_var_-28.0, %dec_label_pc_100078a3.preheader ]
  %stack_var_-16.0 = phi i32 [ %v1_1000791f, %dec_label_pc_100078a0 ], [ 0, %dec_label_pc_100078a3.preheader ]
  %v4_100078a3 = and i32 %stack_var_-16.0, 65535
  %v6_100078a3 = and i32 %v5_100078a3, -65536
  %v7_100078a3 = or i32 %v4_100078a3, %v6_100078a3
  store i32 %v7_100078a3, i32* %edx.global-to-local, align 4
  %v1_100078a7 = load i32, i32* @esp, align 4
  %v2_100078a7 = add i32 %v1_100078a7, -4
  %v3_100078a7 = inttoptr i32 %v2_100078a7 to i32*
  store i32 %v0_100078a7, i32* %v3_100078a7, align 4
  store i32 %v2_100078a7, i32* @ecx, align 4
  %v0_100078aa = load i32, i32* %edx.global-to-local, align 4
  %v1_100078aa = trunc i32 %v0_100078aa to i16
  %v3_100078aa = inttoptr i32 %v2_100078a7 to i16*
  store i16 %v1_100078aa, i16* %v3_100078aa, align 2
  %v0_100078ad = load i32, i32* @esi, align 4
  %v1_100078ad = inttoptr i32 %v0_100078ad to i32*
  %v2_100078ad = load i32, i32* %v1_100078ad, align 4
  %v1_100078af = load i32, i32* @eax, align 4
  %v2_100078af = add i32 %v1_100078af, %v2_100078ad
  store i32 %v2_100078af, i32* @ecx, align 4
  %v1_100078b1 = call i32 @function_1000e5b0(i32 %stack_var_-16.0)
  %v0_100078b6 = load i32, i32* @esi, align 4
  %v1_100078b6 = inttoptr i32 %v0_100078b6 to i32*
  %v2_100078b6 = load i32, i32* %v1_100078b6, align 4
  store i32 %v2_100078b6, i32* @ecx, align 4
  store i32 %v1_100078b1, i32* @edi, align 4
  %v1_100078ba = load i32, i32* @esp, align 4
  %v2_100078ba = add i32 %v1_100078ba, -4
  %v3_100078ba = inttoptr i32 %v2_100078ba to i32*
  store i32 %v1_100078b1, i32* %v3_100078ba, align 4
  %v0_100078be = load i32, i32* @ecx, align 4
  %v1_100078be = load i32, i32* @ebx, align 4
  %v2_100078be = add i32 %v1_100078be, %v0_100078be
  store i32 %v2_100078be, i32* @ecx, align 4
  %v2_100078c0 = add i32 %v1_100078ba, -8
  %v3_100078c0 = inttoptr i32 %v2_100078c0 to i32*
  store i32 %v2_100078bb, i32* %v3_100078c0, align 4
  %v2_100078c1 = call i32 @function_1000ed60(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 65535, i32* @ecx, align 4
  %v1_100078cb = inttoptr i32 %v2_100078c1 to i16*
  %v2_100078cb = load i16, i16* %v1_100078cb, align 2
  %v15_100078cb = icmp eq i16 %v2_100078cb, -1
  %v1_100078ce = icmp eq i1 %v15_100078cb, false
  br i1 %v1_100078ce, label %dec_label_pc_1000791c, label %dec_label_pc_100078d0

dec_label_pc_100078d0:                            ; preds = %dec_label_pc_100078a3
  store i32 %v1_10007810, i32* @eax, align 4
  %v1_100078d4 = load i32, i32* @esp, align 4
  %v2_100078d4 = add i32 %v1_100078d4, -4
  %v3_100078d4 = inttoptr i32 %v2_100078d4 to i32*
  store i32 65535, i32* %v3_100078d4, align 4
  %v0_100078d7 = load i32, i32* @eax, align 4
  %v1_100078d7 = trunc i32 %v0_100078d7 to i16
  %v3_100078d7 = inttoptr i32 %v2_100078d4 to i16*
  store i16 %v1_100078d7, i16* %v3_100078d7, align 2
  %v0_100078da = load i32, i32* @esi, align 4
  %v1_100078da = add i32 %v0_100078da, 20
  store i32 %v1_100078da, i32* @ecx, align 4
  %v1_100078dd = call i32 @function_1000e5b0(i32 ptrtoint (i32* @5 to i32))
  %v1_100078e2 = load i32, i32* @esp, align 4
  %v2_100078e2 = add i32 %v1_100078e2, -4
  %v3_100078e2 = inttoptr i32 %v2_100078e2 to i32*
  store i32 %v1_100078dd, i32* %v3_100078e2, align 4
  %v0_100078e3 = load i32, i32* @edi, align 4
  %v2_100078e3 = add i32 %v1_100078e2, -8
  %v3_100078e3 = inttoptr i32 %v2_100078e3 to i32*
  store i32 %v0_100078e3, i32* %v3_100078e3, align 4
  %v1_100078e4 = call i32 @function_100094b0(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v0_100078e9 = load i32, i32* @esp, align 4
  %v0_100078ec = load i32, i32* @edi, align 4
  %v2_100078ec = add i32 %v0_100078e9, 4
  %v3_100078ec = inttoptr i32 %v2_100078ec to i32*
  store i32 %v0_100078ec, i32* %v3_100078ec, align 4
  %v1_100078ed = icmp eq i32 %v1_100078e4, 0
  %v1_100078ef = icmp eq i1 %v1_100078ed, false
  br i1 %v1_100078ef, label %dec_label_pc_10007901, label %dec_label_pc_100078f1

dec_label_pc_100078f1:                            ; preds = %dec_label_pc_100078d0
  %v2_100078f1 = inttoptr i32 %v0_100078e9 to i32*
  store i32 ptrtoint ([52 x i8]* @global_var_10023434.281 to i32), i32* %v2_100078f1, align 4
  %v0_100078f6 = call i32 @Warning()
  br label %dec_label_pc_1000791c

dec_label_pc_10007901:                            ; preds = %dec_label_pc_100078d0
  %v0_10007901 = load i32, i32* @esi, align 4
  %v1_10007901 = inttoptr i32 %v0_10007901 to i32*
  %v2_10007901 = load i32, i32* %v1_10007901, align 4
  store i32 %v2_10007901, i32* @ecx, align 4
  store i32 %v2_10007903, i32* @edx, align 4
  %v3_10007906 = inttoptr i32 %v0_100078e9 to i32*
  store i32 %v2_10007903, i32* %v3_10007906, align 4
  %v0_10007907 = load i32, i32* @ecx, align 4
  %v1_10007907 = load i32, i32* @ebx, align 4
  %v2_10007907 = add i32 %v1_10007907, %v0_10007907
  store i32 %v2_10007907, i32* @ecx, align 4
  %v2_1000790d = call i32 @function_1000f030(i8 0, i32 ptrtoint (i32* @5 to i32))
  %v0_10007912 = load i32, i32* @esi, align 4
  %v1_10007912 = inttoptr i32 %v0_10007912 to i32*
  %v2_10007912 = load i32, i32* %v1_10007912, align 4
  %v0_10007914 = load i32, i32* @ebx, align 4
  %v3_10007914 = add i32 %v2_10007912, 18
  %v4_10007914 = add i32 %v3_10007914, %v0_10007914
  %v5_10007914 = inttoptr i32 %v4_10007914 to i16*
  %v6_10007914 = load i16, i16* %v5_10007914, align 2
  %v7_10007914 = zext i16 %v6_10007914 to i32
  store i32 %v7_10007914, i32* @ecx, align 4
  br label %dec_label_pc_1000791c

dec_label_pc_1000791c:                            ; preds = %dec_label_pc_10007901, %dec_label_pc_100078f1, %dec_label_pc_100078a3
  %stack_var_7.3 = phi i8 [ %stack_var_7.2, %dec_label_pc_100078a3 ], [ 0, %dec_label_pc_10007901 ], [ %stack_var_7.2, %dec_label_pc_100078f1 ]
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_100078a3 ], [ %v7_10007914, %dec_label_pc_10007901 ], [ %stack_var_-28.1, %dec_label_pc_100078f1 ]
  %v1_1000791f = add i32 %stack_var_-16.0, 1
  %v5_10007926 = icmp slt i32 %v1_1000791f, %v7_1000787d
  br i1 %v5_10007926, label %dec_label_pc_100078a0, label %dec_label_pc_1000792c

dec_label_pc_1000792c:                            ; preds = %dec_label_pc_1000791c
  store i32 %v1_1000784a, i32* @edi, align 4
  br label %dec_label_pc_1000792f

dec_label_pc_1000792f:                            ; preds = %dec_label_pc_1000792c, %dec_label_pc_1000786a, %dec_label_pc_10007840
  %v0_1000795e11 = phi i32 [ %v3_1000785c, %dec_label_pc_10007840 ], [ %v2_1000787b, %dec_label_pc_1000786a ], [ %v1_1000791f, %dec_label_pc_1000792c ]
  %stack_var_7.4 = phi i8 [ %stack_var_7.1, %dec_label_pc_10007840 ], [ %stack_var_7.1, %dec_label_pc_1000786a ], [ %stack_var_7.3, %dec_label_pc_1000792c ]
  %stack_var_-28.3 = phi i32 [ %stack_var_-28.0, %dec_label_pc_10007840 ], [ %stack_var_-28.0, %dec_label_pc_1000786a ], [ %stack_var_-28.2, %dec_label_pc_1000792c ]
  %v0_1000792f = load i32, i32* @edi, align 4
  %v1_1000792f = add i32 %v0_1000792f, 1
  store i32 %v1_1000792f, i32* @edi, align 4
  %v4_10007930 = trunc i32 %v1_1000792f to i16
  %v6_10007933 = trunc i32 %stack_var_-28.3 to i16
  %v7_10007936 = icmp slt i16 %v4_10007930, %v6_10007933
  br i1 %v7_10007936, label %dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge, label %dec_label_pc_1000793c

dec_label_pc_1000792f.dec_label_pc_10007840_crit_edge: ; preds = %dec_label_pc_1000792f
  %v0_10007840.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10007840

dec_label_pc_1000793c:                            ; preds = %dec_label_pc_1000792f
  store i32 %v0_10007942, i32* @ecx, align 4
  store i32 %v4_100077f051, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10007942

dec_label_pc_10007942:                            ; preds = %dec_label_pc_1000793c, %dec_label_pc_10007810
  %v0_1000795e.pre54 = phi i32 [ %v7_10007824, %dec_label_pc_10007810 ], [ %v0_1000795e11, %dec_label_pc_1000793c ]
  %v0_1000795e10 = phi i32 [ 0, %dec_label_pc_10007810 ], [ %v0_1000795e11, %dec_label_pc_1000793c ]
  %stack_var_7.5 = phi i8 [ %stack_var_7.0, %dec_label_pc_10007810 ], [ %stack_var_7.4, %dec_label_pc_1000793c ]
  %v1_10007942 = add i32 %v0_10007942, 1
  store i32 %v1_10007942, i32* @ecx, align 4
  %v5_10007948 = icmp slt i32 %v1_10007942, %v4_100077f051
  br i1 %v5_10007948, label %dec_label_pc_10007942.dec_label_pc_10007810_crit_edge, label %dec_label_pc_1000794e

dec_label_pc_10007942.dec_label_pc_10007810_crit_edge: ; preds = %dec_label_pc_10007942
  %v0_1000781c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10007810

dec_label_pc_1000794e:                            ; preds = %dec_label_pc_10007942
  %v10_1000794e = icmp eq i8 %stack_var_7.5, 0
  br i1 %v10_1000794e, label %dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge, label %dec_label_pc_10007958

dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge: ; preds = %dec_label_pc_1000794e
  %v0_100077f0.pre = load i32, i32* @esi, align 4
  %v1_100077f0 = add i32 %v0_100077f0.pre, 38
  %v2_100077f0 = inttoptr i32 %v1_100077f0 to i16*
  %v3_100077f0 = load i16, i16* %v2_100077f0, align 2
  %v4_100077f0 = zext i16 %v3_100077f0 to i32
  store i32 %v4_100077f0, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v1_10007800 = icmp eq i16 %v3_100077f0, 0
  br i1 %v1_10007800, label %dec_label_pc_10007958, label %dec_label_pc_10007810.preheader

dec_label_pc_10007958:                            ; preds = %dec_label_pc_1000794e, %dec_label_pc_100077e0.dec_label_pc_100077f0.dec_label_pc_10007958_crit_edge_crit_edge, %dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge
  %v0_1000795e = phi i32 [ %v0_1000795e.pre.pre, %dec_label_pc_100077e0.dec_label_pc_100077f0.dec_label_pc_10007958_crit_edge_crit_edge ], [ %v0_1000795e.pre54, %dec_label_pc_1000794e.dec_label_pc_100077f0_crit_edge ], [ %v0_1000795e10, %dec_label_pc_1000794e ]
  %v0_10007958 = load i32, i32* @esp, align 4
  %v1_10007958 = inttoptr i32 %v0_10007958 to i32*
  %v2_10007958 = load i32, i32* %v1_10007958, align 4
  store i32 %v2_10007958, i32* @edi, align 4
  %v3_10007958 = add i32 %v0_10007958, 4
  %v1_10007959 = inttoptr i32 %v3_10007958 to i32*
  %v2_10007959 = load i32, i32* %v1_10007959, align 4
  store i32 %v2_10007959, i32* @esi, align 4
  %v3_10007959 = add i32 %v0_10007958, 8
  %v1_1000795a = inttoptr i32 %v3_10007959 to i32*
  %v2_1000795a = load i32, i32* %v1_1000795a, align 4
  store i32 %v2_1000795a, i32* @ebx, align 4
  ret i32 %v0_1000795e
}

define i32 @function_10007970() local_unnamed_addr {
dec_label_pc_10007970:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_10007970 = load i32, i32* @esi, align 4
  %v0_10007972 = load i32, i32* @ecx, align 4
  store i32 %v0_10007972, i32* @edi, align 4
  %v1_10007974 = add i32 %v0_10007972, 12
  %v2_10007974 = inttoptr i32 %v1_10007974 to i32*
  %v3_10007974 = load i32, i32* %v2_10007974, align 4
  %v1_10007977 = add i32 %v3_10007974, -1
  %v10_10007977 = icmp slt i32 %v1_10007977, 0
  store i32 %v1_10007977, i32* @esi, align 4
  br i1 %v10_10007977, label %dec_label_pc_100079a0, label %dec_label_pc_1000797a

dec_label_pc_1000797a:                            ; preds = %dec_label_pc_10007970
  %v2_10007988 = mul i32 %v1_10007977, 56
  store i32 %v2_10007988, i32* @ebx, align 4
  br label %dec_label_pc_10007990

dec_label_pc_10007990:                            ; preds = %dec_label_pc_10007990.dec_label_pc_10007990_crit_edge, %dec_label_pc_1000797a
  %v1_10007992 = phi i32 [ %v1_10007999, %dec_label_pc_10007990.dec_label_pc_10007990_crit_edge ], [ %v2_10007988, %dec_label_pc_1000797a ]
  %v0_10007992 = phi i32 [ %v0_10007992.pre, %dec_label_pc_10007990.dec_label_pc_10007990_crit_edge ], [ %v0_10007972, %dec_label_pc_1000797a ]
  %v2_10007992 = add i32 %v0_10007992, %v1_10007992
  store i32 %v2_10007992, i32* @ecx, align 4
  %v0_10007994 = call i32 @function_1000ef30()
  store i32 %v0_10007994, i32* @eax, align 4
  %v0_10007999 = load i32, i32* @ebx, align 4
  %v1_10007999 = add i32 %v0_10007999, -56
  store i32 %v1_10007999, i32* @ebx, align 4
  %v0_1000799c = load i32, i32* @esi, align 4
  %v1_1000799c = add i32 %v0_1000799c, -1
  %v10_1000799c = icmp slt i32 %v1_1000799c, 0
  store i32 %v1_1000799c, i32* @esi, align 4
  %v1_1000799d = icmp eq i1 %v10_1000799c, false
  br i1 %v1_1000799d, label %dec_label_pc_10007990.dec_label_pc_10007990_crit_edge, label %dec_label_pc_1000799f

dec_label_pc_10007990.dec_label_pc_10007990_crit_edge: ; preds = %dec_label_pc_10007990
  %v0_10007992.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10007990

dec_label_pc_1000799f:                            ; preds = %dec_label_pc_10007990
  %v1_100079a2.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_100079a0

dec_label_pc_100079a0:                            ; preds = %dec_label_pc_1000799f, %dec_label_pc_10007970
  %v1_100079a2 = phi i32 [ %v1_100079a2.pre, %dec_label_pc_1000799f ], [ %v0_10007972, %dec_label_pc_10007970 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_100079a2 = add i32 %v1_100079a2, 12
  %v3_100079a2 = inttoptr i32 %v2_100079a2 to i32*
  store i32 0, i32* %v3_100079a2, align 4
  %v0_100079a5 = load i32, i32* @edi, align 4
  %v1_100079a5 = add i32 %v0_100079a5, 8
  %v2_100079a5 = inttoptr i32 %v1_100079a5 to i32*
  %v3_100079a5 = load i32, i32* %v2_100079a5, align 4
  %v4_100079a5 = load i32, i32* %esi.global-to-local, align 4
  %v5_100079a8 = icmp slt i32 %v3_100079a5, %v4_100079a5
  %v2_100079cd = load i32, i32* @ecx, align 4
  br i1 %v5_100079a8, label %dec_label_pc_100079cd, label %dec_label_pc_100079aa

dec_label_pc_100079aa:                            ; preds = %dec_label_pc_100079a0
  store i32 %v2_100079cd, i32* %eax.global-to-local, align 4
  %v12_100079ac = icmp eq i32 %v2_100079cd, %v4_100079a5
  br i1 %v12_100079ac, label %dec_label_pc_100079c2, label %dec_label_pc_100079b0

dec_label_pc_100079b0:                            ; preds = %dec_label_pc_100079aa
  %v0_100079b0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100079b0, i32* @ecx, align 4
  %v1_100079b6 = inttoptr i32 %v0_100079b0 to i32*
  %v2_100079b6 = load i32, i32* %v1_100079b6, align 4
  store i32 %v2_100079b6, i32* @ecx, align 4
  %v1_100079b8 = inttoptr i32 %v2_100079b6 to i32*
  %v2_100079b8 = load i32, i32* %v1_100079b8, align 4
  %v1_100079bb = add i32 %v2_100079b8, 20
  %v2_100079bb = inttoptr i32 %v1_100079bb to i32*
  %v3_100079bb = load i32, i32* %v2_100079bb, align 4
  store i32 %v3_100079bb, i32* %eax.global-to-local, align 4
  %v2_100079c0 = inttoptr i32 %v0_100079a5 to i32*
  store i32 %v4_100079a5, i32* %v2_100079c0, align 4
  %v0_100079c4.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_100079c4.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_100079c2

dec_label_pc_100079c2:                            ; preds = %dec_label_pc_100079b0, %dec_label_pc_100079aa
  %v1_100079c4 = phi i32 [ %v1_100079c4.pre, %dec_label_pc_100079b0 ], [ %v0_100079a5, %dec_label_pc_100079aa ]
  %v0_100079c4 = phi i32 [ %v0_100079c4.pre, %dec_label_pc_100079b0 ], [ %v4_100079a5, %dec_label_pc_100079aa ]
  %v2_100079c4 = add i32 %v1_100079c4, 4
  %v3_100079c4 = inttoptr i32 %v2_100079c4 to i32*
  store i32 %v0_100079c4, i32* %v3_100079c4, align 4
  %v0_100079c7 = load i32, i32* @ecx, align 4
  %v1_100079c7 = load i32, i32* @edi, align 4
  %v2_100079c7 = add i32 %v1_100079c7, 16
  %v3_100079c7 = inttoptr i32 %v2_100079c7 to i32*
  store i32 %v0_100079c7, i32* %v3_100079c7, align 4
  %v0_100079ca = load i32, i32* @esp, align 4
  %v3_100079ca = add i32 %v0_100079ca, 4
  %v1_100079cb = inttoptr i32 %v3_100079ca to i32*
  %v2_100079cb = load i32, i32* %v1_100079cb, align 4
  store i32 %v2_100079cb, i32* @esi, align 4
  %v0_100079cc = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100079cc

dec_label_pc_100079cd:                            ; preds = %dec_label_pc_100079a0
  %v2_100079cf = add i32 %v0_100079a5, 16
  %v3_100079cf = inttoptr i32 %v2_100079cf to i32*
  store i32 %v2_100079cd, i32* %v3_100079cf, align 4
  store i32 %v0_10007970, i32* @esi, align 4
  %v0_100079d4 = load i32, i32* @eax, align 4
  ret i32 %v0_100079d4
}

define i32 @function_100079e0(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_100079e0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_100079e0 = load i32, i32* @ebp, align 4
  %v0_100079e3 = load i32, i32* @ebx, align 4
  %v0_100079e4 = load i32, i32* @edi, align 4
  %v0_100079e5 = load i32, i32* @ecx, align 4
  store i32 %v0_100079e5, i32* %edi.global-to-local, align 4
  %v1_100079e7 = add i32 %v0_100079e5, 16
  %v2_100079e7 = inttoptr i32 %v1_100079e7 to i16*
  %v3_100079e7 = load i16, i16* %v2_100079e7, align 2
  %v4_100079e7 = zext i16 %v3_100079e7 to i32
  store i32 %v4_100079e7, i32* %ebx.global-to-local, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_100079f0 = icmp eq i16 %v3_100079e7, -1
  br i1 %v14_100079f0, label %dec_label_pc_10007acd, label %dec_label_pc_100079f9

dec_label_pc_100079f9:                            ; preds = %dec_label_pc_100079e0
  %v0_100079f9 = load i32, i32* @esi, align 4
  store i32 %v0_100079f9, i32* %stack_var_-16, align 4
  %v4_100079f9 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10007a10 = add i32 %v4_100079f9, -4
  %v3_10007a10 = inttoptr i32 %v2_10007a10 to i32*
  %v2_10007a13 = add i32 %v4_100079f9, -8
  %v3_10007a13 = inttoptr i32 %v2_10007a13 to i32*
  br label %dec_label_pc_10007a00

dec_label_pc_10007a00:                            ; preds = %dec_label_pc_10007ab5.dec_label_pc_10007a00_crit_edge, %dec_label_pc_100079f9
  %v0_10007a06 = phi i32 [ %v0_10007aba, %dec_label_pc_10007ab5.dec_label_pc_10007a00_crit_edge ], [ %v4_100079e7, %dec_label_pc_100079f9 ]
  %v0_10007a00 = phi i32 [ %v0_10007a00.pre, %dec_label_pc_10007ab5.dec_label_pc_10007a00_crit_edge ], [ %v0_100079e5, %dec_label_pc_100079f9 ]
  %v1_10007a00 = add i32 %v0_10007a00, 4
  %v2_10007a00 = inttoptr i32 %v1_10007a00 to i32*
  %v3_10007a00 = load i32, i32* %v2_10007a00, align 4
  store i32 %v3_10007a00, i32* @ecx, align 4
  store i32 %tmp, i32* %edx.global-to-local, align 4
  %v1_10007a06 = mul nsw i32 %v0_10007a06, 16
  %v2_10007a09 = and i32 %v1_10007a06, 1048560
  store i32 %v2_10007a09, i32* %esi.global-to-local, align 4
  %v3_10007a0c = or i32 %v2_10007a09, 8
  %v4_10007a0c = add i32 %v3_10007a0c, %v3_10007a00
  store i32 %v4_10007a0c, i32* %v3_10007a10, align 4
  %v2_10007a11 = load i32, i32* @ecx, align 4
  store i32 %v2_10007a11, i32* %eax.global-to-local, align 4
  %v0_10007a13 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_10007a13, i32* %v3_10007a13, align 4
  %v0_10007a19 = load i32, i32* %eax.global-to-local, align 4
  %v4_10007a19 = trunc i32 %v0_10007a19 to i8
  %v5_10007a19 = icmp eq i8 %v4_10007a19, 0
  br i1 %v5_10007a19, label %dec_label_pc_10007a60, label %dec_label_pc_10007a1d

dec_label_pc_10007a1d:                            ; preds = %dec_label_pc_10007a00
  %v0_10007a1d = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10007a1d = and i8 %v0_10007a1d, 1
  %v2_10007a1d = icmp eq i8 %v1_10007a1d, 0
  %v1_10007a24 = icmp eq i1 %v2_10007a1d, false
  br i1 %v1_10007a24, label %dec_label_pc_10007a41, label %dec_label_pc_10007a26

dec_label_pc_10007a26:                            ; preds = %dec_label_pc_10007a1d
  %v2_10007a26 = or i8 %v0_10007a1d, 1
  store i8 %v2_10007a26, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007a41

dec_label_pc_10007a41:                            ; preds = %dec_label_pc_10007a26, %dec_label_pc_10007a1d
  store i32 65535, i32* %edx.global-to-local, align 4
  %v0_10007a46 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007a46 = trunc i32 %v0_10007a46 to i16
  %v14_10007a46 = icmp eq i16 %v1_10007a46, -1
  br i1 %v14_10007a46, label %dec_label_pc_10007a56, label %dec_label_pc_10007a4b

dec_label_pc_10007a4b:                            ; preds = %dec_label_pc_10007a41
  %v0_10007a4b = load i32, i32* %edi.global-to-local, align 4
  %v1_10007a4b = add i32 %v0_10007a4b, 4
  %v2_10007a4b = inttoptr i32 %v1_10007a4b to i32*
  %v3_10007a4b = load i32, i32* %v2_10007a4b, align 4
  store i32 %v3_10007a4b, i32* %eax.global-to-local, align 4
  %v1_10007a4e = load i32, i32* %esi.global-to-local, align 4
  %v3_10007a4e = add i32 %v1_10007a4e, %v3_10007a4b
  %v4_10007a4e = inttoptr i32 %v3_10007a4e to i16*
  %v5_10007a4e = load i16, i16* %v4_10007a4e, align 2
  %v6_10007a4e = zext i16 %v5_10007a4e to i32
  store i32 %v6_10007a4e, i32* %ebx.global-to-local, align 4
  store i32 %v3_10007a4e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10007ab5

dec_label_pc_10007a56:                            ; preds = %dec_label_pc_10007a41
  store i32 ptrtoint (i16** @global_var_1002b630.172 to i32), i32* %eax.global-to-local, align 4
  %v2_10007a5b = load i16, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  %v3_10007a5b = zext i16 %v2_10007a5b to i32
  store i32 %v3_10007a5b, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10007ab5

dec_label_pc_10007a60:                            ; preds = %dec_label_pc_10007a00
  %v0_10007a60 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007a60 = add i32 %v0_10007a60, 4
  %v2_10007a60 = inttoptr i32 %v1_10007a60 to i32*
  %v3_10007a60 = load i32, i32* %v2_10007a60, align 4
  store i32 %tmp, i32* @ecx, align 4
  store i32 %tmp, i32* %edx.global-to-local, align 4
  %v1_10007a68 = load i32, i32* %esi.global-to-local, align 4
  %v3_10007a68 = add i32 %v3_10007a60, 8
  %v4_10007a68 = add i32 %v3_10007a68, %v1_10007a68
  store i32 %v4_10007a68, i32* %eax.global-to-local, align 4
  store i32 %tmp, i32* %v3_10007a10, align 4
  %v0_10007a6d = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_10007a6d, i32* %v3_10007a13, align 4
  %v0_10007a73 = load i32, i32* %eax.global-to-local, align 4
  %v4_10007a73 = trunc i32 %v0_10007a73 to i8
  %v5_10007a73 = icmp eq i8 %v4_10007a73, 0
  br i1 %v5_10007a73, label %dec_label_pc_10007a60.dec_label_pc_10007ac3_crit_edge, label %dec_label_pc_10007a77

dec_label_pc_10007a60.dec_label_pc_10007ac3_crit_edge: ; preds = %dec_label_pc_10007a60
  %v0_10007ac5.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10007ac3

dec_label_pc_10007a77:                            ; preds = %dec_label_pc_10007a60
  %v0_10007a77 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10007a77 = and i8 %v0_10007a77, 1
  %v2_10007a77 = icmp eq i8 %v1_10007a77, 0
  %v1_10007a7e = icmp eq i1 %v2_10007a77, false
  br i1 %v1_10007a7e, label %dec_label_pc_10007a9b, label %dec_label_pc_10007a80

dec_label_pc_10007a80:                            ; preds = %dec_label_pc_10007a77
  %v2_10007a80 = or i8 %v0_10007a77, 1
  store i8 %v2_10007a80, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007a9b

dec_label_pc_10007a9b:                            ; preds = %dec_label_pc_10007a80, %dec_label_pc_10007a77
  store i32 65535, i32* @ecx, align 4
  %v0_10007aa0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007aa0 = trunc i32 %v0_10007aa0 to i16
  %v14_10007aa0 = icmp eq i16 %v1_10007aa0, -1
  br i1 %v14_10007aa0, label %dec_label_pc_10007ab1, label %dec_label_pc_10007aa5

dec_label_pc_10007aa5:                            ; preds = %dec_label_pc_10007a9b
  %v0_10007aa5 = load i32, i32* %edi.global-to-local, align 4
  %v1_10007aa5 = add i32 %v0_10007aa5, 4
  %v2_10007aa5 = inttoptr i32 %v1_10007aa5 to i32*
  %v3_10007aa5 = load i32, i32* %v2_10007aa5, align 4
  store i32 %v3_10007aa5, i32* %eax.global-to-local, align 4
  %v1_10007aa8 = load i32, i32* %esi.global-to-local, align 4
  %v2_10007aa8 = add i32 %v1_10007aa8, %v3_10007aa5
  br label %dec_label_pc_10007ab1

dec_label_pc_10007ab1:                            ; preds = %dec_label_pc_10007a9b, %dec_label_pc_10007aa5
  %storemerge = phi i32 [ %v2_10007aa8, %dec_label_pc_10007aa5 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007a9b ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_10007ab1 = add i32 %storemerge, 2
  %v2_10007ab1 = inttoptr i32 %v1_10007ab1 to i16*
  %v3_10007ab1 = load i16, i16* %v2_10007ab1, align 2
  %v4_10007ab1 = zext i16 %v3_10007ab1 to i32
  store i32 %v4_10007ab1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10007ab5

dec_label_pc_10007ab5:                            ; preds = %dec_label_pc_10007ab1, %dec_label_pc_10007a56, %dec_label_pc_10007a4b
  %v2_10007ac521 = phi i32 [ %storemerge, %dec_label_pc_10007ab1 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007a56 ], [ %v3_10007a4e, %dec_label_pc_10007a4b ]
  %v0_10007aba = phi i32 [ %v4_10007ab1, %dec_label_pc_10007ab1 ], [ %v3_10007a5b, %dec_label_pc_10007a56 ], [ %v6_10007a4e, %dec_label_pc_10007a4b ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_10007aba = icmp eq i32 %v0_10007aba, 65535
  %v1_10007abd = icmp eq i1 %v14_10007aba, false
  br i1 %v1_10007abd, label %dec_label_pc_10007ab5.dec_label_pc_10007a00_crit_edge, label %dec_label_pc_10007ac3.loopexit

dec_label_pc_10007ab5.dec_label_pc_10007a00_crit_edge: ; preds = %dec_label_pc_10007ab5
  %v0_10007a00.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10007a00

dec_label_pc_10007ac3.loopexit:                   ; preds = %dec_label_pc_10007ab5
  br label %dec_label_pc_10007ac3

dec_label_pc_10007ac3:                            ; preds = %dec_label_pc_10007ac3.loopexit, %dec_label_pc_10007a60.dec_label_pc_10007ac3_crit_edge
  %v2_10007ac5 = phi i32 [ %v0_10007a73, %dec_label_pc_10007a60.dec_label_pc_10007ac3_crit_edge ], [ %v2_10007ac521, %dec_label_pc_10007ac3.loopexit ]
  %v0_10007ac5 = phi i32 [ %v0_10007ac5.pre, %dec_label_pc_10007a60.dec_label_pc_10007ac3_crit_edge ], [ %v0_10007aba, %dec_label_pc_10007ac3.loopexit ]
  %v2_10007ac3 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10007ac3, i32* @esi, align 4
  %v3_10007ac3 = add i32 %v4_100079f9, 4
  %v1_10007ac4 = inttoptr i32 %v3_10007ac3 to i32*
  %v2_10007ac4 = load i32, i32* %v1_10007ac4, align 4
  store i32 %v2_10007ac4, i32* @edi, align 4
  %v3_10007ac4 = add i32 %v4_100079f9, 8
  %v1_10007ac5 = and i32 %v0_10007ac5, 65535
  %v3_10007ac5 = and i32 %v2_10007ac5, -65536
  %v4_10007ac5 = or i32 %v1_10007ac5, %v3_10007ac5
  store i32 %v4_10007ac5, i32* %eax.global-to-local, align 4
  %v1_10007ac8 = inttoptr i32 %v3_10007ac4 to i32*
  %v2_10007ac8 = load i32, i32* %v1_10007ac8, align 4
  store i32 %v2_10007ac8, i32* @ebx, align 4
  %v3_10007ac8 = add i32 %v4_100079f9, 12
  %v1_10007ac9 = inttoptr i32 %v3_10007ac8 to i32*
  %v2_10007ac9 = load i32, i32* %v1_10007ac9, align 4
  store i32 %v2_10007ac9, i32* @ebp, align 4
  ret i32 %v4_10007ac5

dec_label_pc_10007acd:                            ; preds = %dec_label_pc_100079e0
  store i32 %v0_100079e4, i32* @edi, align 4
  store i32 %v4_100079e7, i32* %eax.global-to-local, align 4
  store i32 %v0_100079e3, i32* @ebx, align 4
  store i32 %v0_100079e0, i32* @ebp, align 4
  ret i32 %v4_100079e7
}

define i32 @function_10007ae0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10007ae0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10007ae0 = load i32, i32* @ebp, align 4
  %v0_10007ae3 = load i32, i32* @esi, align 4
  %v0_10007ae4 = load i32, i32* @edi, align 4
  store i32 %arg2, i32* @edi, align 4
  %v0_10007ae8 = load i32, i32* @ecx, align 4
  store i32 %v0_10007ae8, i32* @esi, align 4
  %v1_10007aea = icmp eq i32 %arg2, 0
  %v1_10007aec = icmp eq i1 %v1_10007aea, false
  br i1 %v1_10007aec, label %dec_label_pc_10007af7, label %dec_label_pc_10007aee

dec_label_pc_10007aee:                            ; preds = %dec_label_pc_10007ae0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %v0_10007ae4, i32* @edi, align 4
  store i32 %v0_10007ae3, i32* @esi, align 4
  store i32 %v0_10007ae0, i32* @ebp, align 4
  ret i32 %arg1

dec_label_pc_10007af7:                            ; preds = %dec_label_pc_10007ae0
  %v1_10007af7 = add i32 %v0_10007ae8, 12
  %v2_10007af7 = inttoptr i32 %v1_10007af7 to i32*
  %v3_10007af7 = load i32, i32* %v2_10007af7, align 4
  store i32 %v3_10007af7, i32* %eax.global-to-local, align 4
  %v1_10007afa = add i32 %v0_10007ae8, 4
  %v2_10007afa = inttoptr i32 %v1_10007afa to i32*
  %v3_10007afa = load i32, i32* %v2_10007afa, align 4
  store i32 %v3_10007afa, i32* @ecx, align 4
  %v3_10007afd = add i32 %v3_10007af7, %arg2
  store i32 %v3_10007afd, i32* %edx.global-to-local, align 4
  %v7_10007b02 = icmp sgt i32 %v3_10007afd, %v3_10007afa
  br i1 %v7_10007b02, label %dec_label_pc_10007b04, label %dec_label_pc_10007b10

dec_label_pc_10007b04:                            ; preds = %dec_label_pc_10007af7
  %v2_10007b04 = sub i32 %v3_10007af7, %v3_10007afa
  %v2_10007b06 = add i32 %v2_10007b04, %arg2
  store i32 %v2_10007b06, i32* @eax, align 4
  store i32 %v0_10007ae8, i32* @ecx, align 4
  %v4_10007b0b = call i32 @function_100071a0(i32 %v2_10007b06, i32 %v0_10007ae4, i32 %v0_10007ae3, i32 %v0_10007ae0)
  store i32 %v4_10007b0b, i32* %eax.global-to-local, align 4
  %v0_10007b10.pre = load i32, i32* @esi, align 4
  %v4_10007b10.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10007b10

dec_label_pc_10007b10:                            ; preds = %dec_label_pc_10007af7, %dec_label_pc_10007b04
  %v4_10007b10 = phi i32 [ %arg2, %dec_label_pc_10007af7 ], [ %v4_10007b10.pre, %dec_label_pc_10007b04 ]
  %v21_10007b10 = phi i32 [ %v0_10007ae8, %dec_label_pc_10007af7 ], [ %v0_10007b10.pre, %dec_label_pc_10007b04 ]
  %v1_10007b10 = add i32 %v21_10007b10, 12
  %v2_10007b10 = inttoptr i32 %v1_10007b10 to i32*
  %v3_10007b10 = load i32, i32* %v2_10007b10, align 4
  %v5_10007b10 = add i32 %v3_10007b10, %v4_10007b10
  store i32 %v5_10007b10, i32* %v2_10007b10, align 4
  %v0_10007b13 = load i32, i32* @esi, align 4
  %v1_10007b13 = add i32 %v0_10007b13, 12
  %v2_10007b13 = inttoptr i32 %v1_10007b13 to i32*
  %v3_10007b13 = load i32, i32* %v2_10007b13, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v2_10007b1b = sub i32 %v3_10007b13, %arg1
  %v1_10007b1d = load i32, i32* @edi, align 4
  %v2_10007b1d = sub i32 %v2_10007b1b, %v1_10007b1d
  store i32 %v2_10007b1d, i32* %eax.global-to-local, align 4
  %v0_10007b1f = load i32, i32* @ebx, align 4
  %v1_10007b1f = load i32, i32* @esp, align 4
  %v2_10007b1f = add i32 %v1_10007b1f, -4
  %v3_10007b1f = inttoptr i32 %v2_10007b1f to i32*
  store i32 %v0_10007b1f, i32* %v3_10007b1f, align 4
  %v0_10007b20 = load i32, i32* @ecx, align 4
  %v1_10007b20 = load i32, i32* @esi, align 4
  %v2_10007b20 = add i32 %v1_10007b20, 16
  %v3_10007b20 = inttoptr i32 %v2_10007b20 to i32*
  store i32 %v0_10007b20, i32* %v3_10007b20, align 4
  %tmp16 = icmp slt i32 %v2_10007b1d, 1
  br i1 %tmp16, label %dec_label_pc_10007b62, label %dec_label_pc_10007b27

dec_label_pc_10007b27:                            ; preds = %dec_label_pc_10007b10
  %v0_10007b27 = load i32, i32* @edi, align 4
  %tmp17 = icmp slt i32 %v0_10007b27, 1
  br i1 %tmp17, label %dec_label_pc_10007b8f, label %dec_label_pc_10007b2b

dec_label_pc_10007b2b:                            ; preds = %dec_label_pc_10007b27
  %v0_10007b36 = load i32, i32* %edx.global-to-local, align 4
  %v0_10007b41 = load i32, i32* @ecx, align 4
  %v2_10007b41 = mul i32 %v0_10007b36, 56
  %v3_10007b41 = add i32 %v2_10007b41, %v0_10007b41
  store i32 %v3_10007b41, i32* %eax.global-to-local, align 4
  %v2_10007b44 = mul i32 %v2_10007b1d, 56
  store i32 %v2_10007b44, i32* %ebx.global-to-local, align 4
  %v1_10007b46 = load i32, i32* @esp, align 4
  %v2_10007b46 = add i32 %v1_10007b46, -4
  %v3_10007b46 = inttoptr i32 %v2_10007b46 to i32*
  store i32 %v2_10007b44, i32* %v3_10007b46, align 4
  %v0_10007b47 = load i32, i32* %eax.global-to-local, align 4
  %v2_10007b47 = add i32 %v1_10007b46, -8
  %v3_10007b47 = inttoptr i32 %v2_10007b47 to i32*
  store i32 %v0_10007b47, i32* %v3_10007b47, align 4
  %v0_10007b48 = load i32, i32* %edx.global-to-local, align 4
  %v1_10007b48 = load i32, i32* @edi, align 4
  %v2_10007b48 = add i32 %v1_10007b48, %v0_10007b48
  store i32 %v2_10007b48, i32* %edx.global-to-local, align 4
  %v2_10007b51 = mul i32 %v2_10007b48, 7
  store i32 %v2_10007b51, i32* %eax.global-to-local, align 4
  %v0_10007b53 = load i32, i32* @ecx, align 4
  %v2_10007b53 = mul i32 %v2_10007b48, 56
  %v3_10007b53 = add i32 %v0_10007b53, %v2_10007b53
  store i32 %v3_10007b53, i32* @ecx, align 4
  %v2_10007b56 = add i32 %v1_10007b46, -12
  %v3_10007b56 = inttoptr i32 %v2_10007b56 to i32*
  store i32 %v3_10007b53, i32* %v3_10007b56, align 4
  %v1_10007b57 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_10007b57 = ptrtoint i32* %v1_10007b57 to i32
  store i32 %v3_10007b57, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10007b62

dec_label_pc_10007b62:                            ; preds = %dec_label_pc_10007b2b, %dec_label_pc_10007b10
  %v0_10007b62 = load i32, i32* @edi, align 4
  %tmp19 = icmp slt i32 %v0_10007b62, 1
  br i1 %tmp19, label %dec_label_pc_10007b8f, label %dec_label_pc_10007b66

dec_label_pc_10007b66:                            ; preds = %dec_label_pc_10007b62
  %v0_10007b66 = load i32, i32* %edx.global-to-local, align 4
  %v2_10007b73 = mul i32 %v0_10007b66, 56
  store i32 %v2_10007b73, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10007b75

dec_label_pc_10007b75:                            ; preds = %dec_label_pc_10007b89, %dec_label_pc_10007b66
  %v0_10007b8c5 = phi i32 [ %v1_10007b8c, %dec_label_pc_10007b89 ], [ %v0_10007b62, %dec_label_pc_10007b66 ]
  %v1_10007b77 = phi i32 [ %v1_10007b89, %dec_label_pc_10007b89 ], [ %v2_10007b73, %dec_label_pc_10007b66 ]
  %v0_10007b77 = load i32, i32* @ecx, align 4
  %v2_10007b77 = add i32 %v0_10007b77, %v1_10007b77
  %v12_10007b77 = icmp eq i32 %v2_10007b77, 0
  store i32 %v2_10007b77, i32* @ecx, align 4
  br i1 %v12_10007b77, label %dec_label_pc_10007b89, label %dec_label_pc_10007b7b

dec_label_pc_10007b7b:                            ; preds = %dec_label_pc_10007b75
  %v0_10007b7b = load i32, i32* @esp, align 4
  %v1_10007b7b = add i32 %v0_10007b7b, -4
  %v2_10007b7b = inttoptr i32 %v1_10007b7b to i32*
  store i32 0, i32* %v2_10007b7b, align 4
  %v1_10007b7d = add i32 %v0_10007b7b, -8
  %v2_10007b7d = inttoptr i32 %v1_10007b7d to i32*
  store i32 16, i32* %v2_10007b7d, align 4
  %v1_10007b7f = add i32 %v0_10007b7b, -12
  %v2_10007b7f = inttoptr i32 %v1_10007b7f to i32*
  store i32 0, i32* %v2_10007b7f, align 4
  %v3_10007b81 = call i32 @function_1000efc0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_10007b81, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v0_10007b89.pre = load i32, i32* %ebx.global-to-local, align 4
  %v0_10007b8c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10007b89

dec_label_pc_10007b89:                            ; preds = %dec_label_pc_10007b7b, %dec_label_pc_10007b75
  %v0_10007b8c = phi i32 [ %v0_10007b8c.pre, %dec_label_pc_10007b7b ], [ %v0_10007b8c5, %dec_label_pc_10007b75 ]
  %v0_10007b89 = phi i32 [ %v0_10007b89.pre, %dec_label_pc_10007b7b ], [ %v1_10007b77, %dec_label_pc_10007b75 ]
  %v1_10007b89 = add i32 %v0_10007b89, 56
  store i32 %v1_10007b89, i32* %ebx.global-to-local, align 4
  %v1_10007b8c = add i32 %v0_10007b8c, -1
  %v9_10007b8c = icmp eq i32 %v1_10007b8c, 0
  store i32 %v1_10007b8c, i32* @edi, align 4
  %v1_10007b8d = icmp eq i1 %v9_10007b8c, false
  br i1 %v1_10007b8d, label %dec_label_pc_10007b75, label %dec_label_pc_10007b8f

dec_label_pc_10007b8f:                            ; preds = %dec_label_pc_10007b89, %dec_label_pc_10007b62, %dec_label_pc_10007b27
  %v0_10007b8f = load i32, i32* @esp, align 4
  %v1_10007b8f = inttoptr i32 %v0_10007b8f to i32*
  %v2_10007b8f = load i32, i32* %v1_10007b8f, align 4
  store i32 %v2_10007b8f, i32* @ebx, align 4
  %v3_10007b8f = add i32 %v0_10007b8f, 4
  %v1_10007b90 = inttoptr i32 %v3_10007b8f to i32*
  %v2_10007b90 = load i32, i32* %v1_10007b90, align 4
  store i32 %v2_10007b90, i32* @edi, align 4
  %v3_10007b90 = add i32 %v0_10007b8f, 8
  %v0_10007b91 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_10007b91, i32* %eax.global-to-local, align 4
  %v1_10007b93 = inttoptr i32 %v3_10007b90 to i32*
  %v2_10007b93 = load i32, i32* %v1_10007b93, align 4
  store i32 %v2_10007b93, i32* @esi, align 4
  %v3_10007b93 = add i32 %v0_10007b8f, 12
  %v1_10007b94 = inttoptr i32 %v3_10007b93 to i32*
  %v2_10007b94 = load i32, i32* %v1_10007b94, align 4
  store i32 %v2_10007b94, i32* @ebp, align 4
  ret i32 %v0_10007b91
}

define i32 @function_10007ba0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10007ba0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v0_10007ba7 = load i32, i32* @ecx, align 4
  store i32 %v0_10007ba7, i32* @esi, align 4
  %v1_10007ba9 = trunc i32 %arg1 to i16
  %v3_10007ba9 = add i32 %v0_10007ba7, 16
  %v4_10007ba9 = inttoptr i32 %v3_10007ba9 to i16*
  %v5_10007ba9 = load i16, i16* %v4_10007ba9, align 2
  %v16_10007ba9 = icmp eq i16 %v1_10007ba9, %v5_10007ba9
  br i1 %v16_10007ba9, label %dec_label_pc_1000816e, label %dec_label_pc_10007bb3

dec_label_pc_10007bb3:                            ; preds = %dec_label_pc_10007ba0
  br label %dec_label_pc_10007bc3

dec_label_pc_10007bc0:                            ; preds = %dec_label_pc_1000815e
  store i32 %stack_var_4.3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10007bc3

dec_label_pc_10007bc3:                            ; preds = %dec_label_pc_10007bc0, %dec_label_pc_10007bb3
  %v1_10008094 = phi i32 [ %v0_10007ba7, %dec_label_pc_10007bb3 ], [ %v2_10008162, %dec_label_pc_10007bc0 ]
  %v3_1000809e = phi i32 [ %arg1, %dec_label_pc_10007bb3 ], [ %stack_var_4.3, %dec_label_pc_10007bc0 ]
  %v0_10007bc3 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10007bc3 = sext i8 %v0_10007bc3 to i32
  store i32 %v1_10007bc3, i32* %eax.global-to-local, align 4
  %v2_10007bc8 = and i8 %v0_10007bc3, 1
  %v3_10007bc8 = icmp eq i8 %v2_10007bc8, 0
  %v1_10007bca = icmp eq i1 %v3_10007bc8, false
  br i1 %v1_10007bca, label %dec_label_pc_10007bfa, label %dec_label_pc_10007bcc

dec_label_pc_10007bcc:                            ; preds = %dec_label_pc_10007bc3
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10007be6 = or i32 %v1_10007bc3, 1
  %v4_10007be6 = trunc i32 %v1_10007be6 to i8
  store i32 %v1_10007be6, i32* %eax.global-to-local, align 4
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10007be6, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007bfa

dec_label_pc_10007bfa:                            ; preds = %dec_label_pc_10007bcc, %dec_label_pc_10007bc3
  %v0_10007c36 = phi i32 [ %v1_10007be6, %dec_label_pc_10007bcc ], [ %v1_10007bc3, %dec_label_pc_10007bc3 ]
  store i32 65535, i32* @ecx, align 4
  %v1_10007bff = trunc i32 %v3_1000809e to i16
  %v14_10007bff = icmp eq i16 %v1_10007bff, -1
  br i1 %v14_10007bff, label %dec_label_pc_10007c14, label %dec_label_pc_10007c04

dec_label_pc_10007c04:                            ; preds = %dec_label_pc_10007bfa
  %v1_10007c04 = mul i32 %v3_1000809e, 16
  %v2_10007c07 = and i32 %v1_10007c04, 1048560
  store i32 %v2_10007c07, i32* @ecx, align 4
  %v2_10007c0a = add i32 %v1_10008094, 4
  %v3_10007c0a = inttoptr i32 %v2_10007c0a to i32*
  %v4_10007c0a = load i32, i32* %v3_10007c0a, align 4
  %v5_10007c0a = add i32 %v4_10007c0a, %v2_10007c07
  br label %dec_label_pc_10007c14

dec_label_pc_10007c14:                            ; preds = %dec_label_pc_10007bfa, %dec_label_pc_10007c04
  %storemerge23 = phi i32 [ %v5_10007c0a, %dec_label_pc_10007c04 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007bfa ]
  store i32 %storemerge23, i32* @ecx, align 4
  %v1_10007c14 = add i32 %storemerge23, 4
  %v2_10007c14 = inttoptr i32 %v1_10007c14 to i16*
  %v3_10007c14 = load i16, i16* %v2_10007c14, align 2
  %v4_10007c14 = zext i16 %v3_10007c14 to i32
  store i32 %v4_10007c14, i32* @ecx, align 4
  %v2_10007c18 = and i32 %v0_10007c36, 1
  %v3_10007c18 = icmp eq i32 %v2_10007c18, 0
  %v1_10007c1a = icmp eq i1 %v3_10007c18, false
  br i1 %v1_10007c1a, label %dec_label_pc_10007c4a, label %dec_label_pc_10007c1c

dec_label_pc_10007c1c:                            ; preds = %dec_label_pc_10007c14
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10007c36 = or i32 %v0_10007c36, 1
  %v4_10007c36 = trunc i32 %v1_10007c36 to i8
  store i32 %v1_10007c36, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  store i8 %v4_10007c36, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007c4a

dec_label_pc_10007c4a:                            ; preds = %dec_label_pc_10007c1c, %dec_label_pc_10007c14
  %v0_10007c87 = phi i32 [ %v1_10007c36, %dec_label_pc_10007c1c ], [ %v0_10007c36, %dec_label_pc_10007c14 ]
  store i32 65535, i32* %edi.global-to-local, align 4
  %v14_10007c4f = icmp eq i16 %v3_10007c14, -1
  br i1 %v14_10007c4f, label %dec_label_pc_10007c61, label %dec_label_pc_10007c54

dec_label_pc_10007c54:                            ; preds = %dec_label_pc_10007c4a
  %v2_10007c54 = mul nuw nsw i32 %v4_10007c14, 16
  store i32 %v2_10007c54, i32* @ecx, align 4
  %v2_10007c57 = add i32 %v1_10008094, 4
  %v3_10007c57 = inttoptr i32 %v2_10007c57 to i32*
  %v4_10007c57 = load i32, i32* %v3_10007c57, align 4
  %v5_10007c57 = add i32 %v4_10007c57, %v2_10007c54
  br label %dec_label_pc_10007c61

dec_label_pc_10007c61:                            ; preds = %dec_label_pc_10007c4a, %dec_label_pc_10007c54
  %storemerge22 = phi i32 [ %v5_10007c57, %dec_label_pc_10007c54 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007c4a ]
  store i32 %storemerge22, i32* @ecx, align 4
  %v1_10007c61 = add i32 %storemerge22, 6
  %v2_10007c61 = inttoptr i32 %v1_10007c61 to i16*
  %v3_10007c61 = load i16, i16* %v2_10007c61, align 2
  %v10_10007c61 = icmp eq i16 %v3_10007c61, 0
  %v1_10007c66 = icmp eq i1 %v10_10007c61, false
  br i1 %v1_10007c66, label %dec_label_pc_1000816c, label %dec_label_pc_10007c6c

dec_label_pc_10007c6c:                            ; preds = %dec_label_pc_10007c61
  %v2_10007c6c = and i32 %v0_10007c87, 1
  %v3_10007c6c = icmp eq i32 %v2_10007c6c, 0
  %v1_10007c6e = icmp eq i1 %v3_10007c6c, false
  br i1 %v1_10007c6e, label %dec_label_pc_10007c9b, label %dec_label_pc_10007c70

dec_label_pc_10007c70:                            ; preds = %dec_label_pc_10007c6c
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10007c87 = or i32 %v0_10007c87, 1
  %v4_10007c87 = trunc i32 %v1_10007c87 to i8
  store i32 %v1_10007c87, i32* %eax.global-to-local, align 4
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10007c87, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007c9b

dec_label_pc_10007c9b:                            ; preds = %dec_label_pc_10007c70, %dec_label_pc_10007c6c
  %v0_10007cba = phi i32 [ %v1_10007c87, %dec_label_pc_10007c70 ], [ %v0_10007c87, %dec_label_pc_10007c6c ]
  store i32 65535, i32* @ecx, align 4
  br i1 %v14_10007bff, label %dec_label_pc_10007cb2, label %dec_label_pc_10007ca2

dec_label_pc_10007ca2:                            ; preds = %dec_label_pc_10007c9b
  %v1_10007ca2 = mul i32 %v3_1000809e, 16
  %v2_10007ca5 = and i32 %v1_10007ca2, 1048560
  store i32 %v2_10007ca5, i32* @ecx, align 4
  %v2_10007ca8 = add i32 %v1_10008094, 4
  %v3_10007ca8 = inttoptr i32 %v2_10007ca8 to i32*
  %v4_10007ca8 = load i32, i32* %v3_10007ca8, align 4
  %v5_10007ca8 = add i32 %v4_10007ca8, %v2_10007ca5
  br label %dec_label_pc_10007cb2

dec_label_pc_10007cb2:                            ; preds = %dec_label_pc_10007c9b, %dec_label_pc_10007ca2
  %storemerge21 = phi i32 [ %v5_10007ca8, %dec_label_pc_10007ca2 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007c9b ]
  store i32 %storemerge21, i32* @ecx, align 4
  %v1_10007cb2 = add i32 %storemerge21, 4
  %v2_10007cb2 = inttoptr i32 %v1_10007cb2 to i16*
  %v3_10007cb2 = load i16, i16* %v2_10007cb2, align 2
  %v4_10007cb2 = zext i16 %v3_10007cb2 to i32
  store i32 %v4_10007cb2, i32* %edi.global-to-local, align 4
  %v2_10007cb6 = and i32 %v0_10007cba, 1
  %v3_10007cb6 = icmp eq i32 %v2_10007cb6, 0
  %v1_10007cb8 = icmp eq i1 %v3_10007cb6, false
  br i1 %v1_10007cb8, label %dec_label_pc_10007cd6, label %dec_label_pc_10007cba

dec_label_pc_10007cba:                            ; preds = %dec_label_pc_10007cb2
  %v1_10007cba = or i32 %v0_10007cba, 1
  %v4_10007cba = trunc i32 %v1_10007cba to i8
  store i32 %v1_10007cba, i32* %eax.global-to-local, align 4
  store i8 %v4_10007cba, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007cd6

dec_label_pc_10007cd6:                            ; preds = %dec_label_pc_10007cba, %dec_label_pc_10007cb2
  %v0_10007cf7 = phi i32 [ %v1_10007cba, %dec_label_pc_10007cba ], [ %v0_10007cba, %dec_label_pc_10007cb2 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_10007cdb = icmp eq i16 %v3_10007cb2, -1
  br i1 %v14_10007cdb, label %dec_label_pc_10007cef, label %dec_label_pc_10007ce0

dec_label_pc_10007ce0:                            ; preds = %dec_label_pc_10007cd6
  %v2_10007ce2 = mul nuw nsw i32 %v4_10007cb2, 16
  store i32 %v2_10007ce2, i32* @ecx, align 4
  %v2_10007ce5 = add i32 %v1_10008094, 4
  %v3_10007ce5 = inttoptr i32 %v2_10007ce5 to i32*
  %v4_10007ce5 = load i32, i32* %v3_10007ce5, align 4
  %v5_10007ce5 = add i32 %v4_10007ce5, %v2_10007ce2
  br label %dec_label_pc_10007cef

dec_label_pc_10007cef:                            ; preds = %dec_label_pc_10007cd6, %dec_label_pc_10007ce0
  %storemerge20 = phi i32 [ %v5_10007ce5, %dec_label_pc_10007ce0 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007cd6 ]
  store i32 %storemerge20, i32* @ecx, align 4
  %v1_10007cef = add i32 %storemerge20, 4
  %v2_10007cef = inttoptr i32 %v1_10007cef to i16*
  %v3_10007cef = load i16, i16* %v2_10007cef, align 2
  %v4_10007cef = zext i16 %v3_10007cef to i32
  store i32 %v4_10007cef, i32* %ebx.global-to-local, align 4
  %v2_10007cf3 = and i32 %v0_10007cf7, 1
  %v3_10007cf3 = icmp eq i32 %v2_10007cf3, 0
  %v1_10007cf5 = icmp eq i1 %v3_10007cf3, false
  br i1 %v1_10007cf5, label %dec_label_pc_10007d13, label %dec_label_pc_10007cf7

dec_label_pc_10007cf7:                            ; preds = %dec_label_pc_10007cef
  %v1_10007cf7 = or i32 %v0_10007cf7, 1
  %v4_10007cf7 = trunc i32 %v1_10007cf7 to i8
  store i32 %v1_10007cf7, i32* %eax.global-to-local, align 4
  store i8 %v4_10007cf7, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007d13

dec_label_pc_10007d13:                            ; preds = %dec_label_pc_10007cf7, %dec_label_pc_10007cef
  %v0_10007d46 = phi i32 [ %v1_10007cf7, %dec_label_pc_10007cf7 ], [ %v0_10007cf7, %dec_label_pc_10007cef ]
  store i32 65535, i32* @ecx, align 4
  br i1 %v14_10007cdb, label %dec_label_pc_10007d29, label %dec_label_pc_10007d1a

dec_label_pc_10007d1a:                            ; preds = %dec_label_pc_10007d13
  %v2_10007d1c = mul nuw nsw i32 %v4_10007cb2, 16
  store i32 %v2_10007d1c, i32* @ecx, align 4
  %v2_10007d1f = add i32 %v1_10008094, 4
  %v3_10007d1f = inttoptr i32 %v2_10007d1f to i32*
  %v4_10007d1f = load i32, i32* %v3_10007d1f, align 4
  %v5_10007d1f = add i32 %v4_10007d1f, %v2_10007d1c
  br label %dec_label_pc_10007d29

dec_label_pc_10007d29:                            ; preds = %dec_label_pc_10007d13, %dec_label_pc_10007d1a
  %storemerge19 = phi i32 [ %v5_10007d1f, %dec_label_pc_10007d1a ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007d13 ]
  store i32 %storemerge19, i32* @ecx, align 4
  %v1_10007d29 = add i32 %storemerge19, 4
  %v2_10007d29 = inttoptr i32 %v1_10007d29 to i16*
  %v3_10007d29 = load i16, i16* %v2_10007d29, align 2
  %v4_10007d29 = zext i16 %v3_10007d29 to i32
  store i32 %v4_10007d29, i32* @ecx, align 4
  %v2_10007d2d = and i32 %v0_10007d46, 1
  %v3_10007d2d = icmp eq i32 %v2_10007d2d, 0
  %v1_10007d2f = icmp eq i1 %v3_10007d2d, false
  br i1 %v1_10007d2f, label %dec_label_pc_10007d5a, label %dec_label_pc_10007d31

dec_label_pc_10007d31:                            ; preds = %dec_label_pc_10007d29
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10007d46 = or i32 %v0_10007d46, 1
  %v4_10007d46 = trunc i32 %v1_10007d46 to i8
  store i32 %v1_10007d46, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_10007d46, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007d5a

dec_label_pc_10007d5a:                            ; preds = %dec_label_pc_10007d31, %dec_label_pc_10007d29
  %v0_10007f5c = phi i32 [ %v1_10007d46, %dec_label_pc_10007d31 ], [ %v0_10007d46, %dec_label_pc_10007d29 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_10007d5f = icmp eq i16 %v3_10007d29, -1
  br i1 %v14_10007d5f, label %dec_label_pc_10007d71, label %dec_label_pc_10007d64

dec_label_pc_10007d64:                            ; preds = %dec_label_pc_10007d5a
  %v2_10007d64 = mul nuw nsw i32 %v4_10007d29, 16
  store i32 %v2_10007d64, i32* @ecx, align 4
  %v2_10007d67 = add i32 %v1_10008094, 4
  %v3_10007d67 = inttoptr i32 %v2_10007d67 to i32*
  %v4_10007d67 = load i32, i32* %v3_10007d67, align 4
  %v5_10007d67 = add i32 %v4_10007d67, %v2_10007d64
  br label %dec_label_pc_10007d71

dec_label_pc_10007d71:                            ; preds = %dec_label_pc_10007d5a, %dec_label_pc_10007d64
  %storemerge18 = phi i32 [ %v5_10007d67, %dec_label_pc_10007d64 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007d5a ]
  store i32 %storemerge18, i32* @ecx, align 4
  %v1_10007d71 = inttoptr i32 %storemerge18 to i16*
  %v2_10007d71 = load i16, i16* %v1_10007d71, align 2
  %v15_10007d71 = icmp eq i16 %v2_10007d71, %v3_10007cb2
  %v1_10007d74 = icmp eq i1 %v15_10007d71, false
  %v2_10007f58 = and i32 %v0_10007f5c, 1
  %v3_10007f58 = icmp eq i32 %v2_10007f58, 0
  %v1_10007f5a = icmp eq i1 %v3_10007f58, false
  br i1 %v1_10007d74, label %dec_label_pc_10007f58, label %dec_label_pc_10007d7a

dec_label_pc_10007d7a:                            ; preds = %dec_label_pc_10007d71
  br i1 %v1_10007f5a, label %dec_label_pc_10007d9a, label %dec_label_pc_10007d7e

dec_label_pc_10007d7e:                            ; preds = %dec_label_pc_10007d7a
  %v1_10007d7e = or i32 %v0_10007f5c, 1
  %v4_10007d7e = trunc i32 %v1_10007d7e to i8
  store i32 %v1_10007d7e, i32* %eax.global-to-local, align 4
  store i8 %v4_10007d7e, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007d9a

dec_label_pc_10007d9a:                            ; preds = %dec_label_pc_10007d7e, %dec_label_pc_10007d7a
  %v0_10007dd2 = phi i32 [ %v1_10007d7e, %dec_label_pc_10007d7e ], [ %v0_10007f5c, %dec_label_pc_10007d7a ]
  store i32 65535, i32* @ecx, align 4
  %v14_10007d9c = icmp eq i16 %v3_10007cef, -1
  br i1 %v14_10007d9c, label %dec_label_pc_10007db0, label %dec_label_pc_10007da1

dec_label_pc_10007da1:                            ; preds = %dec_label_pc_10007d9a
  %v2_10007da3 = mul nuw nsw i32 %v4_10007cef, 16
  store i32 %v2_10007da3, i32* @ecx, align 4
  %v2_10007da6 = add i32 %v1_10008094, 4
  %v3_10007da6 = inttoptr i32 %v2_10007da6 to i32*
  %v4_10007da6 = load i32, i32* %v3_10007da6, align 4
  %v5_10007da6 = add i32 %v4_10007da6, %v2_10007da3
  br label %dec_label_pc_10007db0

dec_label_pc_10007db0:                            ; preds = %dec_label_pc_10007d9a, %dec_label_pc_10007da1
  %storemerge9 = phi i32 [ %v5_10007da6, %dec_label_pc_10007da1 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007d9a ]
  store i32 %storemerge9, i32* @ecx, align 4
  %v1_10007db0 = add i32 %storemerge9, 2
  %v2_10007db0 = inttoptr i32 %v1_10007db0 to i16*
  %v3_10007db0 = load i16, i16* %v2_10007db0, align 2
  %v4_10007db0 = zext i16 %v3_10007db0 to i32
  store i32 %v4_10007db0, i32* %edx.global-to-local, align 4
  %v2_10007db4 = and i32 %v0_10007dd2, 1
  %v3_10007db4 = icmp eq i32 %v2_10007db4, 0
  %v1_10007db6 = icmp eq i1 %v3_10007db4, false
  br i1 %v1_10007db6, label %dec_label_pc_10007de6, label %dec_label_pc_10007db8

dec_label_pc_10007db8:                            ; preds = %dec_label_pc_10007db0
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10007dd2 = or i32 %v0_10007dd2, 1
  %v4_10007dd2 = trunc i32 %v1_10007dd2 to i8
  store i32 %v1_10007dd2, i32* %eax.global-to-local, align 4
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10007dd2, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007de6

dec_label_pc_10007de6:                            ; preds = %dec_label_pc_10007db8, %dec_label_pc_10007db0
  %v0_10007e0e = phi i32 [ %v1_10007dd2, %dec_label_pc_10007db8 ], [ %v0_10007dd2, %dec_label_pc_10007db0 ]
  store i32 65535, i32* @ecx, align 4
  %v14_10007deb = icmp eq i16 %v3_10007db0, -1
  br i1 %v14_10007deb, label %dec_label_pc_10007dff, label %dec_label_pc_10007df0

dec_label_pc_10007df0:                            ; preds = %dec_label_pc_10007de6
  %v2_10007df2 = mul nuw nsw i32 %v4_10007db0, 16
  store i32 %v2_10007df2, i32* @ecx, align 4
  %v2_10007df5 = add i32 %v1_10008094, 4
  %v3_10007df5 = inttoptr i32 %v2_10007df5 to i32*
  %v4_10007df5 = load i32, i32* %v3_10007df5, align 4
  %v5_10007df5 = add i32 %v4_10007df5, %v2_10007df2
  br label %dec_label_pc_10007dff

dec_label_pc_10007dff:                            ; preds = %dec_label_pc_10007de6, %dec_label_pc_10007df0
  %storemerge8 = phi i32 [ %v5_10007df5, %dec_label_pc_10007df0 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007de6 ]
  store i32 %storemerge8, i32* @ecx, align 4
  %v1_10007dff = add i32 %storemerge8, 6
  %v2_10007dff = inttoptr i32 %v1_10007dff to i16*
  %v3_10007dff = load i16, i16* %v2_10007dff, align 2
  %v10_10007dff = icmp eq i16 %v3_10007dff, 0
  br i1 %v10_10007dff, label %dec_label_pc_10007fe1, label %dec_label_pc_10007e0a

dec_label_pc_10007e0a:                            ; preds = %dec_label_pc_10007dff
  %v2_10007e0a = and i32 %v0_10007e0e, 1
  %v3_10007e0a = icmp eq i32 %v2_10007e0a, 0
  %v1_10007e0c = icmp eq i1 %v3_10007e0a, false
  br i1 %v1_10007e0c, label %dec_label_pc_10007e2a, label %dec_label_pc_10007e0e

dec_label_pc_10007e0e:                            ; preds = %dec_label_pc_10007e0a
  %v1_10007e0e = or i32 %v0_10007e0e, 1
  %v4_10007e0e = trunc i32 %v1_10007e0e to i8
  store i32 %v1_10007e0e, i32* %eax.global-to-local, align 4
  store i8 %v4_10007e0e, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007e2a

dec_label_pc_10007e2a:                            ; preds = %dec_label_pc_10007e0e, %dec_label_pc_10007e0a
  %v0_10007e4f = phi i32 [ %v1_10007e0e, %dec_label_pc_10007e0e ], [ %v0_10007e0e, %dec_label_pc_10007e0a ]
  store i32 %v3_1000809e, i32* %edx.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  br i1 %v14_10007bff, label %dec_label_pc_10007e47, label %dec_label_pc_10007e37

dec_label_pc_10007e37:                            ; preds = %dec_label_pc_10007e2a
  %v1_10007e37 = mul i32 %v3_1000809e, 16
  %v2_10007e3a = and i32 %v1_10007e37, 1048560
  store i32 %v2_10007e3a, i32* @ecx, align 4
  %v2_10007e3d = add i32 %v1_10008094, 4
  %v3_10007e3d = inttoptr i32 %v2_10007e3d to i32*
  %v4_10007e3d = load i32, i32* %v3_10007e3d, align 4
  %v5_10007e3d = add i32 %v4_10007e3d, %v2_10007e3a
  br label %dec_label_pc_10007e47

dec_label_pc_10007e47:                            ; preds = %dec_label_pc_10007e2a, %dec_label_pc_10007e37
  %storemerge7 = phi i32 [ %v5_10007e3d, %dec_label_pc_10007e37 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007e2a ]
  store i32 %storemerge7, i32* @ecx, align 4
  %v1_10007e47 = add i32 %storemerge7, 4
  %v2_10007e47 = inttoptr i32 %v1_10007e47 to i16*
  %v3_10007e47 = load i16, i16* %v2_10007e47, align 2
  %v4_10007e47 = zext i16 %v3_10007e47 to i32
  store i32 %v4_10007e47, i32* @ecx, align 4
  %v2_10007e4b = and i32 %v0_10007e4f, 1
  %v3_10007e4b = icmp eq i32 %v2_10007e4b, 0
  %v1_10007e4d = icmp eq i1 %v3_10007e4b, false
  br i1 %v1_10007e4d, label %dec_label_pc_10007e79, label %dec_label_pc_10007e4f

dec_label_pc_10007e4f:                            ; preds = %dec_label_pc_10007e47
  %v1_10007e4f = or i32 %v0_10007e4f, 1
  %v4_10007e4f = trunc i32 %v1_10007e4f to i8
  store i8 %v4_10007e4f, i8* @global_var_1002b638.171, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  store i32 1, i32* %eax.global-to-local, align 4
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007e79

dec_label_pc_10007e79:                            ; preds = %dec_label_pc_10007e4f, %dec_label_pc_10007e47
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_10007e7e = icmp eq i16 %v3_10007e47, -1
  br i1 %v14_10007e7e, label %dec_label_pc_10007e92, label %dec_label_pc_10007e83

dec_label_pc_10007e83:                            ; preds = %dec_label_pc_10007e79
  %v2_10007e85 = mul nuw nsw i32 %v4_10007e47, 16
  store i32 %v2_10007e85, i32* %eax.global-to-local, align 4
  %v2_10007e88 = add i32 %v1_10008094, 4
  %v3_10007e88 = inttoptr i32 %v2_10007e88 to i32*
  %v4_10007e88 = load i32, i32* %v3_10007e88, align 4
  %v5_10007e88 = add i32 %v4_10007e88, %v2_10007e85
  br label %dec_label_pc_10007e92

dec_label_pc_10007e92:                            ; preds = %dec_label_pc_10007e79, %dec_label_pc_10007e83
  %storemerge6 = phi i32 [ %v5_10007e88, %dec_label_pc_10007e83 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007e79 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v1_10007e92 = add i32 %storemerge6, 2
  %v2_10007e92 = inttoptr i32 %v1_10007e92 to i16*
  %v3_10007e92 = load i16, i16* %v2_10007e92, align 2
  %v16_10007e92 = icmp eq i16 %v3_10007e92, %v1_10007bff
  %v1_10007e96 = icmp eq i1 %v16_10007e92, false
  br i1 %v1_10007e96, label %dec_label_pc_10007f2a, label %dec_label_pc_10007e9c

dec_label_pc_10007e9c:                            ; preds = %dec_label_pc_10007e92
  %v1_10007ea1 = load i32, i32* @esp, align 4
  %v2_10007ea1 = add i32 %v1_10007ea1, -4
  %v3_10007ea1 = inttoptr i32 %v2_10007ea1 to i32*
  store i32 %v4_10007cb2, i32* %v3_10007ea1, align 4
  %v0_10007ea2 = load i32, i32* @esi, align 4
  store i32 %v0_10007ea2, i32* @ecx, align 4
  %v1_10007ea4 = call i32 @function_100075a0(i32 %v4_10007cb2)
  store i32 %v1_10007ea4, i32* %eax.global-to-local, align 4
  %v0_10007ea9 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_10007ea9 = sext i8 %v0_10007ea9 to i32
  store i32 %v1_10007ea9, i32* @ecx, align 4
  %v2_10007eaf = and i8 %v0_10007ea9, 1
  %v3_10007eaf = icmp eq i8 %v2_10007eaf, 0
  %v1_10007eb2 = icmp eq i1 %v3_10007eaf, false
  br i1 %v1_10007eb2, label %dec_label_pc_10007ed1, label %dec_label_pc_10007eb4

dec_label_pc_10007eb4:                            ; preds = %dec_label_pc_10007e9c
  %v1_10007eb4 = or i32 %v1_10007ea9, 1
  %v4_10007eb4 = trunc i32 %v1_10007eb4 to i8
  store i32 %v1_10007eb4, i32* @ecx, align 4
  store i8 %v4_10007eb4, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007ed1

dec_label_pc_10007ed1:                            ; preds = %dec_label_pc_10007eb4, %dec_label_pc_10007e9c
  %v0_10007ef3 = phi i32 [ %v1_10007eb4, %dec_label_pc_10007eb4 ], [ %v1_10007ea9, %dec_label_pc_10007e9c ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v0_10007ed6 = load i32, i32* @edi, align 4
  %v1_10007ed6 = trunc i32 %v0_10007ed6 to i16
  %v14_10007ed6 = icmp eq i16 %v1_10007ed6, -1
  br i1 %v14_10007ed6, label %dec_label_pc_10007eea, label %dec_label_pc_10007edb

dec_label_pc_10007edb:                            ; preds = %dec_label_pc_10007ed1
  %v2_10007edd = mul i32 %v0_10007ed6, 16
  store i32 %v2_10007edd, i32* %eax.global-to-local, align 4
  %v1_10007ee0 = load i32, i32* @esi, align 4
  %v2_10007ee0 = add i32 %v1_10007ee0, 4
  %v3_10007ee0 = inttoptr i32 %v2_10007ee0 to i32*
  %v4_10007ee0 = load i32, i32* %v3_10007ee0, align 4
  %v5_10007ee0 = add i32 %v4_10007ee0, %v2_10007edd
  br label %dec_label_pc_10007eea

dec_label_pc_10007eea:                            ; preds = %dec_label_pc_10007ed1, %dec_label_pc_10007edb
  %storemerge5 = phi i32 [ %v5_10007ee0, %dec_label_pc_10007edb ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007ed1 ]
  store i32 %storemerge5, i32* %eax.global-to-local, align 4
  %v1_10007eea = add i32 %storemerge5, 4
  %v2_10007eea = inttoptr i32 %v1_10007eea to i16*
  %v3_10007eea = load i16, i16* %v2_10007eea, align 2
  %v4_10007eea = zext i16 %v3_10007eea to i32
  store i32 %v4_10007eea, i32* %edi.global-to-local, align 4
  %v2_10007eee = and i32 %v0_10007ef3, 1
  %v3_10007eee = icmp eq i32 %v2_10007eee, 0
  %v1_10007ef1 = icmp eq i1 %v3_10007eee, false
  br i1 %v1_10007ef1, label %dec_label_pc_10007f10, label %dec_label_pc_10007ef3

dec_label_pc_10007ef3:                            ; preds = %dec_label_pc_10007eea
  %v1_10007ef3 = or i32 %v0_10007ef3, 1
  %v4_10007ef3 = trunc i32 %v1_10007ef3 to i8
  store i32 %v1_10007ef3, i32* @ecx, align 4
  store i8 %v4_10007ef3, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007f10

dec_label_pc_10007f10:                            ; preds = %dec_label_pc_10007ef3, %dec_label_pc_10007eea
  store i32 65535, i32* @ecx, align 4
  %v14_10007f12 = icmp eq i16 %v3_10007eea, -1
  br i1 %v14_10007f12, label %dec_label_pc_10007f10.dec_label_pc_10007f26_crit_edge, label %dec_label_pc_10007f17

dec_label_pc_10007f10.dec_label_pc_10007f26_crit_edge: ; preds = %dec_label_pc_10007f10
  %v0_10007f2a.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10007f26

dec_label_pc_10007f17:                            ; preds = %dec_label_pc_10007f10
  %v2_10007f19 = mul nuw nsw i32 %v4_10007eea, 16
  store i32 %v2_10007f19, i32* %eax.global-to-local, align 4
  %v1_10007f1c = load i32, i32* @esi, align 4
  %v2_10007f1c = add i32 %v1_10007f1c, 4
  %v3_10007f1c = inttoptr i32 %v2_10007f1c to i32*
  %v4_10007f1c = load i32, i32* %v3_10007f1c, align 4
  %v5_10007f1c = add i32 %v4_10007f1c, %v2_10007f19
  br label %dec_label_pc_10007f26

dec_label_pc_10007f26:                            ; preds = %dec_label_pc_10007f10.dec_label_pc_10007f26_crit_edge, %dec_label_pc_10007f17
  %v0_10007f2a.pre = phi i32 [ %v1_10007f1c, %dec_label_pc_10007f17 ], [ %v0_10007f2a.pre.pre, %dec_label_pc_10007f10.dec_label_pc_10007f26_crit_edge ]
  %storemerge = phi i32 [ %v5_10007f1c, %dec_label_pc_10007f17 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007f10.dec_label_pc_10007f26_crit_edge ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_10007f26 = add i32 %storemerge, 4
  %v2_10007f26 = inttoptr i32 %v1_10007f26 to i16*
  %v3_10007f26 = load i16, i16* %v2_10007f26, align 2
  %v4_10007f26 = zext i16 %v3_10007f26 to i32
  store i32 %v4_10007f26, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10007f2a

dec_label_pc_10007f2a:                            ; preds = %dec_label_pc_10007f26, %dec_label_pc_10007e92
  %stack_var_4.1 = phi i32 [ %v3_1000809e, %dec_label_pc_10007e92 ], [ %v4_10007cb2, %dec_label_pc_10007f26 ]
  %v0_10007f2d = phi i32 [ %v4_10007cb2, %dec_label_pc_10007e92 ], [ %v4_10007eea, %dec_label_pc_10007f26 ]
  %v0_10007f2a = phi i32 [ %v1_10008094, %dec_label_pc_10007e92 ], [ %v0_10007f2a.pre, %dec_label_pc_10007f26 ]
  %v1_10007f2a = add i32 %v0_10007f2a, 4
  %v2_10007f2a = inttoptr i32 %v1_10007f2a to i32*
  %v3_10007f2a = load i32, i32* %v2_10007f2a, align 4
  store i32 %v3_10007f2a, i32* %eax.global-to-local, align 4
  %v2_10007f30 = mul nuw nsw i32 %v0_10007f2d, 2
  store i32 %v2_10007f30, i32* %edx.global-to-local, align 4
  store i32 1, i32* @ecx, align 4
  %v4_10007f37 = mul nuw nsw i32 %v0_10007f2d, 16
  %v5_10007f37 = or i32 %v4_10007f37, 6
  %v6_10007f37 = add i32 %v3_10007f2a, %v5_10007f37
  %v7_10007f37 = inttoptr i32 %v6_10007f37 to i16*
  store i16 1, i16* %v7_10007f37, align 2
  %v0_10007f3c = load i32, i32* @esi, align 4
  %v1_10007f3c = add i32 %v0_10007f3c, 4
  %v2_10007f3c = inttoptr i32 %v1_10007f3c to i32*
  %v3_10007f3c = load i32, i32* %v2_10007f3c, align 4
  store i32 %v3_10007f3c, i32* %eax.global-to-local, align 4
  %v0_10007f3f = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007f3f = and i32 %v0_10007f3f, 65535
  %v2_10007f44 = mul nuw nsw i32 %v1_10007f3f, 2
  store i32 %v2_10007f44, i32* %edx.global-to-local, align 4
  %v4_10007f46 = mul nuw nsw i32 %v1_10007f3f, 16
  %v5_10007f46 = or i32 %v4_10007f46, 6
  %v6_10007f46 = add i32 %v5_10007f46, %v3_10007f3c
  %v7_10007f46 = inttoptr i32 %v6_10007f46 to i16*
  store i16 0, i16* %v7_10007f46, align 2
  %v0_10007f4b = load i32, i32* %ebx.global-to-local, align 4
  %v1_10007f4b = load i32, i32* @esp, align 4
  %v2_10007f4b = add i32 %v1_10007f4b, -4
  %v3_10007f4b = inttoptr i32 %v2_10007f4b to i32*
  store i32 %v0_10007f4b, i32* %v3_10007f4b, align 4
  %v0_10007f4c = load i32, i32* @esi, align 4
  store i32 %v0_10007f4c, i32* @ecx, align 4
  %v1_10007f4e = call i32 @function_10007690(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10007f4e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000815e

dec_label_pc_10007f58:                            ; preds = %dec_label_pc_10007d71
  br i1 %v1_10007f5a, label %dec_label_pc_10007f78, label %dec_label_pc_10007f5c

dec_label_pc_10007f5c:                            ; preds = %dec_label_pc_10007f58
  %v1_10007f5c = or i32 %v0_10007f5c, 1
  %v4_10007f5c = trunc i32 %v1_10007f5c to i8
  store i32 %v1_10007f5c, i32* %eax.global-to-local, align 4
  store i8 %v4_10007f5c, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10007f78

dec_label_pc_10007f78:                            ; preds = %dec_label_pc_10007f5c, %dec_label_pc_10007f58
  %v0_10007fad = phi i32 [ %v1_10007f5c, %dec_label_pc_10007f5c ], [ %v0_10007f5c, %dec_label_pc_10007f58 ]
  %v14_10007f78 = icmp eq i16 %v3_10007cef, -1
  br i1 %v14_10007f78, label %dec_label_pc_10007f8c, label %dec_label_pc_10007f7d

dec_label_pc_10007f7d:                            ; preds = %dec_label_pc_10007f78
  %v2_10007f7f = mul nuw nsw i32 %v4_10007cef, 16
  store i32 %v2_10007f7f, i32* @ecx, align 4
  %v2_10007f82 = add i32 %v1_10008094, 4
  %v3_10007f82 = inttoptr i32 %v2_10007f82 to i32*
  %v4_10007f82 = load i32, i32* %v3_10007f82, align 4
  %v5_10007f82 = add i32 %v4_10007f82, %v2_10007f7f
  br label %dec_label_pc_10007f8c

dec_label_pc_10007f8c:                            ; preds = %dec_label_pc_10007f78, %dec_label_pc_10007f7d
  %storemerge17 = phi i32 [ %v5_10007f82, %dec_label_pc_10007f7d ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007f78 ]
  store i32 %storemerge17, i32* @ecx, align 4
  %v1_10007f8c = inttoptr i32 %storemerge17 to i16*
  %v2_10007f8c = load i16, i16* %v1_10007f8c, align 2
  %v3_10007f8c = zext i16 %v2_10007f8c to i32
  store i32 %v3_10007f8c, i32* %edx.global-to-local, align 4
  %v2_10007f8f = and i32 %v0_10007fad, 1
  %v3_10007f8f = icmp eq i32 %v2_10007f8f, 0
  %v1_10007f91 = icmp eq i1 %v3_10007f8f, false
  br i1 %v1_10007f91, label %dec_label_pc_10007fc1, label %dec_label_pc_10007f93

dec_label_pc_10007f93:                            ; preds = %dec_label_pc_10007f8c
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  %v1_10007fad = or i32 %v0_10007fad, 1
  %v4_10007fad = trunc i32 %v1_10007fad to i8
  store i32 %v1_10007fad, i32* %eax.global-to-local, align 4
  store i32 1, i32* @ecx, align 4
  store i8 %v4_10007fad, i8* @global_var_1002b638.171, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10007fc1

dec_label_pc_10007fc1:                            ; preds = %dec_label_pc_10007f93, %dec_label_pc_10007f8c
  %v0_1000801a = phi i32 [ %v1_10007fad, %dec_label_pc_10007f93 ], [ %v0_10007fad, %dec_label_pc_10007f8c ]
  store i32 65535, i32* @ecx, align 4
  %v14_10007fc6 = icmp eq i16 %v2_10007f8c, -1
  br i1 %v14_10007fc6, label %dec_label_pc_10007fda, label %dec_label_pc_10007fcb

dec_label_pc_10007fcb:                            ; preds = %dec_label_pc_10007fc1
  %v2_10007fcd = mul nuw nsw i32 %v3_10007f8c, 16
  store i32 %v2_10007fcd, i32* @ecx, align 4
  %v2_10007fd0 = add i32 %v1_10008094, 4
  %v3_10007fd0 = inttoptr i32 %v2_10007fd0 to i32*
  %v4_10007fd0 = load i32, i32* %v3_10007fd0, align 4
  %v5_10007fd0 = add i32 %v4_10007fd0, %v2_10007fcd
  br label %dec_label_pc_10007fda

dec_label_pc_10007fda:                            ; preds = %dec_label_pc_10007fc1, %dec_label_pc_10007fcb
  %storemerge16 = phi i32 [ %v5_10007fd0, %dec_label_pc_10007fcb ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10007fc1 ]
  store i32 %storemerge16, i32* @ecx, align 4
  %v1_10007fda = add i32 %storemerge16, 6
  %v2_10007fda = inttoptr i32 %v1_10007fda to i16*
  %v3_10007fda = load i16, i16* %v2_10007fda, align 2
  %v10_10007fda = icmp eq i16 %v3_10007fda, 0
  %v1_10007fdf = icmp eq i1 %v10_10007fda, false
  br i1 %v1_10007fdf, label %dec_label_pc_10008016, label %dec_label_pc_10007fe1

dec_label_pc_10007fe1:                            ; preds = %dec_label_pc_10007fda, %dec_label_pc_10007dff
  %v1_10007fe1 = add i32 %v1_10008094, 4
  %v2_10007fe1 = inttoptr i32 %v1_10007fe1 to i32*
  %v3_10007fe1 = load i32, i32* %v2_10007fe1, align 4
  store i32 %v3_10007fe1, i32* @ecx, align 4
  %v2_10007fe6 = mul nuw nsw i32 %v4_10007cb2, 2
  store i32 %v2_10007fe6, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  %v4_10007fed = mul nuw nsw i32 %v4_10007cb2, 16
  %v5_10007fed = or i32 %v4_10007fed, 6
  %v6_10007fed = add i32 %v3_10007fe1, %v5_10007fed
  %v7_10007fed = inttoptr i32 %v6_10007fed to i16*
  store i16 1, i16* %v7_10007fed, align 2
  %v0_10007ff2 = load i32, i32* @esi, align 4
  %v1_10007ff2 = add i32 %v0_10007ff2, 4
  %v2_10007ff2 = inttoptr i32 %v1_10007ff2 to i32*
  %v3_10007ff2 = load i32, i32* %v2_10007ff2, align 4
  store i32 %v3_10007ff2, i32* %eax.global-to-local, align 4
  %v0_10007ff5 = load i32, i32* %edx.global-to-local, align 4
  %v2_10007ff5 = mul i32 %v0_10007ff5, 2
  store i32 %v2_10007ff5, i32* %edx.global-to-local, align 4
  %v0_10007ff7 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_10007ff7, i32* @ecx, align 4
  %v1_10007ff9 = trunc i32 %v0_10007ff7 to i16
  %v4_10007ff9 = mul i32 %v0_10007ff5, 16
  %v5_10007ff9 = or i32 %v4_10007ff9, 6
  %v6_10007ff9 = add i32 %v5_10007ff9, %v3_10007ff2
  %v7_10007ff9 = inttoptr i32 %v6_10007ff9 to i16*
  store i16 %v1_10007ff9, i16* %v7_10007ff9, align 2
  %v0_10007ffe = load i32, i32* @esi, align 4
  %v1_10007ffe = add i32 %v0_10007ffe, 4
  %v2_10007ffe = inttoptr i32 %v1_10007ffe to i32*
  %v3_10007ffe = load i32, i32* %v2_10007ffe, align 4
  store i32 %v3_10007ffe, i32* %eax.global-to-local, align 4
  %v0_10008001 = load i32, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v4_10008007 = mul i32 %v0_10008001, 16
  %v5_10008007 = add i32 %v3_10007ffe, 6
  %v6_10008007 = add i32 %v5_10008007, %v4_10008007
  %v7_10008007 = inttoptr i32 %v6_10008007 to i16*
  store i16 0, i16* %v7_10008007, align 2
  %v0_1000800c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000800c, i32* @edx, align 4
  br label %dec_label_pc_1000815e

dec_label_pc_10008016:                            ; preds = %dec_label_pc_10007fda
  %v2_10008016 = and i32 %v0_1000801a, 1
  %v3_10008016 = icmp eq i32 %v2_10008016, 0
  %v1_10008018 = icmp eq i1 %v3_10008016, false
  br i1 %v1_10008018, label %dec_label_pc_10008036, label %dec_label_pc_1000801a

dec_label_pc_1000801a:                            ; preds = %dec_label_pc_10008016
  %v1_1000801a = or i32 %v0_1000801a, 1
  %v4_1000801a = trunc i32 %v1_1000801a to i8
  store i32 %v1_1000801a, i32* %eax.global-to-local, align 4
  store i8 %v4_1000801a, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_10008036

dec_label_pc_10008036:                            ; preds = %dec_label_pc_1000801a, %dec_label_pc_10008016
  %v0_1000805b = phi i32 [ %v1_1000801a, %dec_label_pc_1000801a ], [ %v0_1000801a, %dec_label_pc_10008016 ]
  store i32 %v3_1000809e, i32* %edx.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  br i1 %v14_10007bff, label %dec_label_pc_10008053, label %dec_label_pc_10008043

dec_label_pc_10008043:                            ; preds = %dec_label_pc_10008036
  %v1_10008043 = mul i32 %v3_1000809e, 16
  %v2_10008046 = and i32 %v1_10008043, 1048560
  store i32 %v2_10008046, i32* @ecx, align 4
  %v2_10008049 = add i32 %v1_10008094, 4
  %v3_10008049 = inttoptr i32 %v2_10008049 to i32*
  %v4_10008049 = load i32, i32* %v3_10008049, align 4
  %v5_10008049 = add i32 %v4_10008049, %v2_10008046
  br label %dec_label_pc_10008053

dec_label_pc_10008053:                            ; preds = %dec_label_pc_10008036, %dec_label_pc_10008043
  %storemerge15 = phi i32 [ %v5_10008049, %dec_label_pc_10008043 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10008036 ]
  store i32 %storemerge15, i32* @ecx, align 4
  %v1_10008053 = add i32 %storemerge15, 4
  %v2_10008053 = inttoptr i32 %v1_10008053 to i16*
  %v3_10008053 = load i16, i16* %v2_10008053, align 2
  %v4_10008053 = zext i16 %v3_10008053 to i32
  store i32 %v4_10008053, i32* @ecx, align 4
  %v2_10008057 = and i32 %v0_1000805b, 1
  %v3_10008057 = icmp eq i32 %v2_10008057, 0
  %v1_10008059 = icmp eq i1 %v3_10008057, false
  br i1 %v1_10008059, label %dec_label_pc_10008085, label %dec_label_pc_1000805b

dec_label_pc_1000805b:                            ; preds = %dec_label_pc_10008053
  %v1_1000805b = or i32 %v0_1000805b, 1
  %v4_1000805b = trunc i32 %v1_1000805b to i8
  store i8 %v4_1000805b, i8* @global_var_1002b638.171, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002b630.172 to i16*), align 4
  store i16 -1, i16* @global_var_1002b632.173, align 2
  store i16 -1, i16* @global_var_1002b634.174, align 2
  store i32 1, i32* %eax.global-to-local, align 4
  store i16 1, i16* bitcast (i32* @global_var_1002b636.175 to i16*), align 4
  br label %dec_label_pc_10008085

dec_label_pc_10008085:                            ; preds = %dec_label_pc_1000805b, %dec_label_pc_10008053
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_1000808a = icmp eq i16 %v3_10008053, -1
  br i1 %v14_1000808a, label %dec_label_pc_1000809e, label %dec_label_pc_1000808f

dec_label_pc_1000808f:                            ; preds = %dec_label_pc_10008085
  %v2_10008091 = mul nuw nsw i32 %v4_10008053, 16
  store i32 %v2_10008091, i32* %eax.global-to-local, align 4
  %v2_10008094 = add i32 %v1_10008094, 4
  %v3_10008094 = inttoptr i32 %v2_10008094 to i32*
  %v4_10008094 = load i32, i32* %v3_10008094, align 4
  %v5_10008094 = add i32 %v4_10008094, %v2_10008091
  br label %dec_label_pc_1000809e

dec_label_pc_1000809e:                            ; preds = %dec_label_pc_10008085, %dec_label_pc_1000808f
  %storemerge14 = phi i32 [ %v5_10008094, %dec_label_pc_1000808f ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_10008085 ]
  store i32 %storemerge14, i32* %eax.global-to-local, align 4
  %v1_1000809e = inttoptr i32 %storemerge14 to i16*
  %v2_1000809e = load i16, i16* %v1_1000809e, align 2
  %v15_1000809e = icmp eq i16 %v2_1000809e, %v1_10007bff
  %v1_100080a1 = icmp eq i1 %v15_1000809e, false
  br i1 %v1_100080a1, label %dec_label_pc_10008135, label %dec_label_pc_100080a7

dec_label_pc_100080a7:                            ; preds = %dec_label_pc_1000809e
  %v1_100080ac = load i32, i32* @esp, align 4
  %v2_100080ac = add i32 %v1_100080ac, -4
  %v3_100080ac = inttoptr i32 %v2_100080ac to i32*
  store i32 %v4_10007cb2, i32* %v3_100080ac, align 4
  %v0_100080ad = load i32, i32* @esi, align 4
  store i32 %v0_100080ad, i32* @ecx, align 4
  %v1_100080af = call i32 @function_10007690(i32 %v4_10007cb2)
  store i32 %v1_100080af, i32* %eax.global-to-local, align 4
  %v0_100080b4 = load i8, i8* @global_var_1002b638.171, align 1
  %v1_100080b4 = sext i8 %v0_100080b4 to i32
  store i32 %v1_100080b4, i32* @ecx, align 4
  %v2_100080ba = and i8 %v0_100080b4, 1
  %v3_100080ba = icmp eq i8 %v2_100080ba, 0
  %v1_100080bd = icmp eq i1 %v3_100080ba, false
  br i1 %v1_100080bd, label %dec_label_pc_100080dc, label %dec_label_pc_100080bf

dec_label_pc_100080bf:                            ; preds = %dec_label_pc_100080a7
  %v1_100080bf = or i32 %v1_100080b4, 1
  %v4_100080bf = trunc i32 %v1_100080bf to i8
  store i32 %v1_100080bf, i32* @ecx, align 4
  store i8 %v4_100080bf, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_100080dc

dec_label_pc_100080dc:                            ; preds = %dec_label_pc_100080bf, %dec_label_pc_100080a7
  %v0_100080fe = phi i32 [ %v1_100080bf, %dec_label_pc_100080bf ], [ %v1_100080b4, %dec_label_pc_100080a7 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v0_100080e1 = load i32, i32* @edi, align 4
  %v1_100080e1 = trunc i32 %v0_100080e1 to i16
  %v14_100080e1 = icmp eq i16 %v1_100080e1, -1
  br i1 %v14_100080e1, label %dec_label_pc_100080f5, label %dec_label_pc_100080e6

dec_label_pc_100080e6:                            ; preds = %dec_label_pc_100080dc
  %v2_100080e8 = mul i32 %v0_100080e1, 16
  store i32 %v2_100080e8, i32* %eax.global-to-local, align 4
  %v1_100080eb = load i32, i32* @esi, align 4
  %v2_100080eb = add i32 %v1_100080eb, 4
  %v3_100080eb = inttoptr i32 %v2_100080eb to i32*
  %v4_100080eb = load i32, i32* %v3_100080eb, align 4
  %v5_100080eb = add i32 %v4_100080eb, %v2_100080e8
  br label %dec_label_pc_100080f5

dec_label_pc_100080f5:                            ; preds = %dec_label_pc_100080dc, %dec_label_pc_100080e6
  %storemerge13 = phi i32 [ %v5_100080eb, %dec_label_pc_100080e6 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_100080dc ]
  store i32 %storemerge13, i32* %eax.global-to-local, align 4
  %v1_100080f5 = add i32 %storemerge13, 4
  %v2_100080f5 = inttoptr i32 %v1_100080f5 to i16*
  %v3_100080f5 = load i16, i16* %v2_100080f5, align 2
  %v4_100080f5 = zext i16 %v3_100080f5 to i32
  store i32 %v4_100080f5, i32* %edi.global-to-local, align 4
  %v2_100080f9 = and i32 %v0_100080fe, 1
  %v3_100080f9 = icmp eq i32 %v2_100080f9, 0
  %v1_100080fc = icmp eq i1 %v3_100080f9, false
  br i1 %v1_100080fc, label %dec_label_pc_1000811b, label %dec_label_pc_100080fe

dec_label_pc_100080fe:                            ; preds = %dec_label_pc_100080f5
  %v1_100080fe = or i32 %v0_100080fe, 1
  %v4_100080fe = trunc i32 %v1_100080fe to i8
  store i32 %v1_100080fe, i32* @ecx, align 4
  store i8 %v4_100080fe, i8* @global_var_1002b638.171, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002b630.172, align 4
  store i16 -1, i16* @global_var_1002b634.174, align 2
  br label %dec_label_pc_1000811b

dec_label_pc_1000811b:                            ; preds = %dec_label_pc_100080fe, %dec_label_pc_100080f5
  store i32 65535, i32* @ecx, align 4
  %v14_1000811d = icmp eq i16 %v3_100080f5, -1
  br i1 %v14_1000811d, label %dec_label_pc_1000811b.dec_label_pc_10008131_crit_edge, label %dec_label_pc_10008122

dec_label_pc_1000811b.dec_label_pc_10008131_crit_edge: ; preds = %dec_label_pc_1000811b
  %v0_10008135.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10008131

dec_label_pc_10008122:                            ; preds = %dec_label_pc_1000811b
  %v2_10008124 = mul nuw nsw i32 %v4_100080f5, 16
  store i32 %v2_10008124, i32* %eax.global-to-local, align 4
  %v1_10008127 = load i32, i32* @esi, align 4
  %v2_10008127 = add i32 %v1_10008127, 4
  %v3_10008127 = inttoptr i32 %v2_10008127 to i32*
  %v4_10008127 = load i32, i32* %v3_10008127, align 4
  %v5_10008127 = add i32 %v4_10008127, %v2_10008124
  br label %dec_label_pc_10008131

dec_label_pc_10008131:                            ; preds = %dec_label_pc_1000811b.dec_label_pc_10008131_crit_edge, %dec_label_pc_10008122
  %v0_10008135.pre = phi i32 [ %v1_10008127, %dec_label_pc_10008122 ], [ %v0_10008135.pre.pre, %dec_label_pc_1000811b.dec_label_pc_10008131_crit_edge ]
  %storemerge12 = phi i32 [ %v5_10008127, %dec_label_pc_10008122 ], [ ptrtoint (i16** @global_var_1002b630.172 to i32), %dec_label_pc_1000811b.dec_label_pc_10008131_crit_edge ]
  store i32 %storemerge12, i32* %eax.global-to-local, align 4
  %v1_10008131 = add i32 %storemerge12, 4
  %v2_10008131 = inttoptr i32 %v1_10008131 to i16*
  %v3_10008131 = load i16, i16* %v2_10008131, align 2
  %v4_10008131 = zext i16 %v3_10008131 to i32
  store i32 %v4_10008131, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10008135

dec_label_pc_10008135:                            ; preds = %dec_label_pc_10008131, %dec_label_pc_1000809e
  %stack_var_4.2 = phi i32 [ %v3_1000809e, %dec_label_pc_1000809e ], [ %v4_10007cb2, %dec_label_pc_10008131 ]
  %v0_10008138 = phi i32 [ %v4_10007cb2, %dec_label_pc_1000809e ], [ %v4_100080f5, %dec_label_pc_10008131 ]
  %v0_10008135 = phi i32 [ %v1_10008094, %dec_label_pc_1000809e ], [ %v0_10008135.pre, %dec_label_pc_10008131 ]
  %v1_10008135 = add i32 %v0_10008135, 4
  %v2_10008135 = inttoptr i32 %v1_10008135 to i32*
  %v3_10008135 = load i32, i32* %v2_10008135, align 4
  store i32 %v3_10008135, i32* %eax.global-to-local, align 4
  %v2_1000813b = mul nuw nsw i32 %v0_10008138, 2
  store i32 %v2_1000813b, i32* %edx.global-to-local, align 4
  store i32 1, i32* @ecx, align 4
  %v4_10008142 = mul nuw nsw i32 %v0_10008138, 16
  %v5_10008142 = or i32 %v4_10008142, 6
  %v6_10008142 = add i32 %v3_10008135, %v5_10008142
  %v7_10008142 = inttoptr i32 %v6_10008142 to i16*
  store i16 1, i16* %v7_10008142, align 2
  %v0_10008147 = load i32, i32* @esi, align 4
  %v1_10008147 = add i32 %v0_10008147, 4
  %v2_10008147 = inttoptr i32 %v1_10008147 to i32*
  %v3_10008147 = load i32, i32* %v2_10008147, align 4
  store i32 %v3_10008147, i32* %eax.global-to-local, align 4
  %v0_1000814a = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000814a = and i32 %v0_1000814a, 65535
  %v2_1000814f = mul nuw nsw i32 %v1_1000814a, 2
  store i32 %v2_1000814f, i32* %edx.global-to-local, align 4
  %v4_10008151 = mul nuw nsw i32 %v1_1000814a, 16
  %v5_10008151 = or i32 %v4_10008151, 6
  %v6_10008151 = add i32 %v5_10008151, %v3_10008147
  %v7_10008151 = inttoptr i32 %v6_10008151 to i16*
  store i16 0, i16* %v7_10008151, align 2
  %v0_10008156 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10008156 = load i32, i32* @esp, align 4
  %v2_10008156 = add i32 %v1_10008156, -4
  %v3_10008156 = inttoptr i32 %v2_10008156 to i32*
  store i32 %v0_10008156, i32* %v3_10008156, align 4
  %v0_10008157 = load i32, i32* @esi, align 4
  store i32 %v0_10008157, i32* @ecx, align 4
  %v1_10008159 = call i32 @function_100075a0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10008159, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000815e

dec_label_pc_1000815e:                            ; preds = %dec_label_pc_10008135, %dec_label_pc_10007fe1, %dec_label_pc_10007f2a
  %stack_var_4.3 = phi i32 [ %stack_var_4.2, %dec_label_pc_10008135 ], [ %v0_1000800c, %dec_label_pc_10007fe1 ], [ %stack_var_4.1, %dec_label_pc_10007f2a ]
  %v4_1000815e = and i32 %stack_var_4.3, 65535
  %v5_1000815e = load i32, i32* @edx, align 4
  %v6_1000815e = and i32 %v5_1000815e, -65536
  %v7_1000815e = or i32 %v6_1000815e, %v4_1000815e
  store i32 %v7_1000815e, i32* %edx.global-to-local, align 4
  %v1_10008162 = trunc i32 %stack_var_4.3 to i16
  %v2_10008162 = load i32, i32* @esi, align 4
  %v3_10008162 = add i32 %v2_10008162, 16
  %v4_10008162 = inttoptr i32 %v3_10008162 to i16*
  %v5_10008162 = load i16, i16* %v4_10008162, align 2
  %v16_10008162 = icmp eq i16 %v1_10008162, %v5_10008162
  %v1_10008166 = icmp eq i1 %v16_10008162, false
  br i1 %v1_10008166, label %dec_label_pc_10007bc0, label %dec_label_pc_1000816c

dec_label_pc_1000816c:                            ; preds = %dec_label_pc_1000815e, %dec_label_pc_10007c61
  %v0_1000816e43 = phi i32 [ %v2_10008162, %dec_label_pc_1000815e ], [ %v1_10008094, %dec_label_pc_10007c61 ]
  %v0_1000816c = load i32, i32* @esp, align 4
  %v1_1000816c = inttoptr i32 %v0_1000816c to i32*
  %v2_1000816c = load i32, i32* %v1_1000816c, align 4
  store i32 %v2_1000816c, i32* %edi.global-to-local, align 4
  %v3_1000816c = add i32 %v0_1000816c, 4
  %v1_1000816d = inttoptr i32 %v3_1000816c to i32*
  %v2_1000816d = load i32, i32* %v1_1000816d, align 4
  store i32 %v2_1000816d, i32* @ebx, align 4
  br label %dec_label_pc_1000816e

dec_label_pc_1000816e:                            ; preds = %dec_label_pc_1000816c, %dec_label_pc_10007ba0
  %v0_1000816e = phi i32 [ %v0_1000816e43, %dec_label_pc_1000816c ], [ %v0_10007ba7, %dec_label_pc_10007ba0 ]
  %v1_1000816e = add i32 %v0_1000816e, 16
  %v2_1000816e = inttoptr i32 %v1_1000816e to i16*
  %v3_1000816e = load i16, i16* %v2_1000816e, align 2
  %v4_1000816e = zext i16 %v3_1000816e to i32
  store i32 %v4_1000816e, i32* %eax.global-to-local, align 4
  %v1_10008172 = add i32 %v0_1000816e, 4
  %v2_10008172 = inttoptr i32 %v1_10008172 to i32*
  %v3_10008172 = load i32, i32* %v2_10008172, align 4
  store i32 %v3_10008172, i32* @ecx, align 4
  %v2_10008175 = mul nuw nsw i32 %v4_1000816e, 2
  store i32 %v2_10008175, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v4_1000817c = mul nuw nsw i32 %v4_1000816e, 16
  %v5_1000817c = or i32 %v4_1000817c, 6
  %v6_1000817c = add i32 %v5_1000817c, %v3_10008172
  %v7_1000817c = inttoptr i32 %v6_1000817c to i16*
  store i16 1, i16* %v7_1000817c, align 2
  %v0_10008183 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10008183
}

define i32 @function_10008190() local_unnamed_addr {
dec_label_pc_10008190:
  %v0_10008190 = load i32, i32* @esi, align 4
  %v0_10008191 = load i32, i32* @ecx, align 4
  store i32 %v0_10008191, i32* @esi, align 4
  %v1_10008193 = add i32 %v0_10008191, 4
  %v2_10008193 = inttoptr i32 %v1_10008193 to i32*
  %v3_10008193 = load i32, i32* %v2_10008193, align 4
  store i32 %v3_10008193, i32* @eax, align 4
  %v0_10008196 = load i32, i32* @edi, align 4
  %v1_10008197 = add i32 %v0_10008191, 12
  %v2_10008197 = inttoptr i32 %v1_10008197 to i32*
  %v3_10008197 = load i32, i32* %v2_10008197, align 4
  store i32 %v3_10008197, i32* @edi, align 4
  %v1_1000819a = add i32 %v3_10008197, 1
  store i32 %v1_1000819a, i32* @ecx, align 4
  %v7_1000819f = icmp sgt i32 %v1_1000819a, %v3_10008193
  br i1 %v7_1000819f, label %dec_label_pc_100081a1, label %dec_label_pc_100081ae

dec_label_pc_100081a1:                            ; preds = %dec_label_pc_10008190
  %v2_100081a3 = sub i32 %v3_10008197, %v3_10008193
  %v1_100081a5 = add i32 %v2_100081a3, 1
  store i32 %v0_10008191, i32* @ecx, align 4
  %v3_100081a9 = call i32 @function_10007260(i32 %v1_100081a5, i32 %v0_10008196, i32 %v0_10008190)
  %v0_100081ae.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100081ae

dec_label_pc_100081ae:                            ; preds = %dec_label_pc_10008190, %dec_label_pc_100081a1
  %v18_100081ae = phi i32 [ %v0_10008191, %dec_label_pc_10008190 ], [ %v0_100081ae.pre, %dec_label_pc_100081a1 ]
  %v1_100081ae = add i32 %v18_100081ae, 12
  %v2_100081ae = inttoptr i32 %v1_100081ae to i32*
  %v3_100081ae = load i32, i32* %v2_100081ae, align 4
  %v4_100081ae = add i32 %v3_100081ae, 1
  store i32 %v4_100081ae, i32* %v2_100081ae, align 4
  %v0_100081b1 = load i32, i32* @esi, align 4
  %v1_100081b1 = add i32 %v0_100081b1, 12
  %v2_100081b1 = inttoptr i32 %v1_100081b1 to i32*
  %v3_100081b1 = load i32, i32* %v2_100081b1, align 4
  %v1_100081b6 = load i32, i32* @edi, align 4
  %v2_100081b6 = sub i32 %v3_100081b1, %v1_100081b6
  %v1_100081b8 = add i32 %v2_100081b6, -1
  %v0_100081b9 = load i32, i32* @ecx, align 4
  %v2_100081b9 = add i32 %v0_100081b1, 16
  %v3_100081b9 = inttoptr i32 %v2_100081b9 to i32*
  store i32 %v0_100081b9, i32* %v3_100081b9, align 4
  %tmp9 = icmp slt i32 %v1_100081b8, 1
  br i1 %tmp9, label %dec_label_pc_100081ae.dec_label_pc_100081db_crit_edge, label %dec_label_pc_100081c0

dec_label_pc_100081ae.dec_label_pc_100081db_crit_edge: ; preds = %dec_label_pc_100081ae
  %v0_100081dd.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_100081db

dec_label_pc_100081c0:                            ; preds = %dec_label_pc_100081ae
  %v0_100081c5 = load i32, i32* @edi, align 4
  %v2_100081c8 = mul i32 %v1_100081b8, 12
  %v0_100081ca = load i32, i32* @ecx, align 4
  %v2_100081ca = mul i32 %v0_100081c5, 12
  %v3_100081ca = add i32 %v0_100081ca, %v2_100081ca
  store i32 %v3_100081ca, i32* @ecx, align 4
  %v1_100081cd = load i32, i32* @esp, align 4
  %v2_100081cd = add i32 %v1_100081cd, -4
  %v3_100081cd = inttoptr i32 %v2_100081cd to i32*
  store i32 %v2_100081c8, i32* %v3_100081cd, align 4
  %v0_100081ce = load i32, i32* @ecx, align 4
  %v2_100081ce = add i32 %v1_100081cd, -8
  %v3_100081ce = inttoptr i32 %v2_100081ce to i32*
  store i32 %v0_100081ce, i32* %v3_100081ce, align 4
  %v0_100081cf = load i32, i32* @ecx, align 4
  %v1_100081cf = add i32 %v0_100081cf, 12
  store i32 %v1_100081cf, i32* @ecx, align 4
  %v2_100081d2 = add i32 %v1_100081cd, -12
  %v3_100081d2 = inttoptr i32 %v2_100081d2 to i32*
  store i32 %v1_100081cf, i32* %v3_100081d2, align 4
  %v1_100081d3 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v0_100081d8 = load i32, i32* @esp, align 4
  %v1_100081d8 = add i32 %v0_100081d8, 12
  br label %dec_label_pc_100081db

dec_label_pc_100081db:                            ; preds = %dec_label_pc_100081ae.dec_label_pc_100081db_crit_edge, %dec_label_pc_100081c0
  %v0_100081dd = phi i32 [ %v0_100081dd.pre, %dec_label_pc_100081ae.dec_label_pc_100081db_crit_edge ], [ %v1_100081d8, %dec_label_pc_100081c0 ]
  %v0_100081db = load i32, i32* @edi, align 4
  %v1_100081dd = inttoptr i32 %v0_100081dd to i32*
  %v2_100081dd = load i32, i32* %v1_100081dd, align 4
  store i32 %v2_100081dd, i32* @edi, align 4
  %v3_100081dd = add i32 %v0_100081dd, 4
  %v1_100081de = inttoptr i32 %v3_100081dd to i32*
  %v2_100081de = load i32, i32* %v1_100081de, align 4
  store i32 %v2_100081de, i32* @esi, align 4
  ret i32 %v0_100081db
}

define i32 @function_100081e0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100081e0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100081e0 = load i32, i32* @ebp, align 4
  store i32 %v0_100081e0, i32* %stack_var_-4, align 4
  %v4_100081e0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100081e0, i32* @ebp, align 4
  %v5_100081e3 = and i32 %arg2, 65535
  %v6_100081e3 = load i32, i32* @edx, align 4
  %v7_100081e3 = and i32 %v6_100081e3, -65536
  %v8_100081e3 = or i32 %v7_100081e3, %v5_100081e3
  store i32 %v8_100081e3, i32* %edx.global-to-local, align 4
  %v0_100081e7 = load i32, i32* @esi, align 4
  store i32 %v0_100081e7, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_100081eb = mul i32 %arg1, 16
  %v2_100081ee = and i32 %v1_100081eb, 1048560
  store i32 %v2_100081ee, i32* %eax.global-to-local, align 4
  %v1_100081f1 = load i32, i32* @ecx, align 4
  %v2_100081f1 = add i32 %v1_100081f1, 4
  %v3_100081f1 = inttoptr i32 %v2_100081f1 to i32*
  %v4_100081f1 = load i32, i32* %v3_100081f1, align 4
  %v5_100081f1 = add i32 %v4_100081f1, %v2_100081ee
  store i32 %v5_100081f1, i32* %eax.global-to-local, align 4
  %v0_100081f4 = load i32, i32* @edi, align 4
  store i32 %v0_100081f4, i32* %stack_var_-12, align 4
  store i32 65535, i32* %edi.global-to-local, align 4
  %v3_100081fa = add i32 %v5_100081f1, 2
  %v4_100081fa = inttoptr i32 %v3_100081fa to i16*
  store i16 -1, i16* %v4_100081fa, align 2
  %v0_100081fe = load i32, i32* %edi.global-to-local, align 4
  %v1_100081fe = trunc i32 %v0_100081fe to i16
  %v2_100081fe = load i32, i32* %eax.global-to-local, align 4
  %v3_100081fe = inttoptr i32 %v2_100081fe to i16*
  store i16 %v1_100081fe, i16* %v3_100081fe, align 2
  store i32 0, i32* @edi, align 4
  %v0_10008203 = load i32, i32* %edx.global-to-local, align 4
  %v1_10008203 = trunc i32 %v0_10008203 to i16
  %v2_10008203 = load i32, i32* %eax.global-to-local, align 4
  %v3_10008203 = add i32 %v2_10008203, 4
  %v4_10008203 = inttoptr i32 %v3_10008203 to i16*
  store i16 %v1_10008203, i16* %v4_10008203, align 2
  %v0_10008207 = load i32, i32* @edi, align 4
  %v1_10008207 = trunc i32 %v0_10008207 to i16
  %v2_10008207 = load i32, i32* %eax.global-to-local, align 4
  %v3_10008207 = add i32 %v2_10008207, 6
  %v4_10008207 = inttoptr i32 %v3_10008207 to i16*
  store i16 %v1_10008207, i16* %v4_10008207, align 2
  store i32 65535, i32* %eax.global-to-local, align 4
  %v0_10008210 = load i32, i32* %edx.global-to-local, align 4
  %v1_10008210 = trunc i32 %v0_10008210 to i16
  %v14_10008210 = icmp eq i16 %v1_10008210, -1
  br i1 %v14_10008210, label %dec_label_pc_10008244, label %dec_label_pc_10008215

dec_label_pc_10008215:                            ; preds = %dec_label_pc_100081e0
  %v0_10008215 = load i32, i32* @ecx, align 4
  %v1_10008215 = add i32 %v0_10008215, 4
  %v2_10008215 = inttoptr i32 %v1_10008215 to i32*
  %v3_10008215 = load i32, i32* %v2_10008215, align 4
  store i32 %v3_10008215, i32* %eax.global-to-local, align 4
  %v1_10008218 = and i32 %v0_10008210, 65535
  %v2_1000821b = mul nuw nsw i32 %v1_10008218, 2
  store i32 %v2_1000821b, i32* %edx.global-to-local, align 4
  %v4_1000821d = trunc i32 %arg3 to i8
  %v11_1000821d = icmp eq i8 %v4_1000821d, 0
  %v0_10008233 = load i32, i32* @esi, align 4
  store i32 %v0_10008233, i32* %stack_var_-16, align 4
  %v1_10008234 = trunc i32 %v0_10008233 to i16
  %v4_10008234 = mul nuw nsw i32 %v1_10008218, 16
  br i1 %v11_1000821d, label %dec_label_pc_10008233, label %dec_label_pc_10008223

dec_label_pc_10008223:                            ; preds = %dec_label_pc_10008215
  %v5_10008224 = add i32 %v3_10008215, %v4_10008234
  %v6_10008224 = inttoptr i32 %v5_10008224 to i16*
  store i16 %v1_10008234, i16* %v6_10008224, align 2
  %v0_10008228 = load i32, i32* %stack_var_-16, align 4
  %v1_10008228 = load i32, i32* %stack_var_-12, align 4
  %v2_10008228 = load i32, i32* %stack_var_-8, align 4
  %v3_10008228 = load i32, i32* %stack_var_-4, align 4
  %v4_10008228 = call i32 @function_10007ba0(i32 %v0_10008228, i32 %v1_10008228, i32 %v2_10008228, i32 %v3_10008228)
  store i32 %v4_10008228, i32* %eax.global-to-local, align 4
  store i32 %v0_10008228, i32* @edi, align 4
  store i32 %v1_10008228, i32* @esi, align 4
  ret i32 %v4_10008228

dec_label_pc_10008233:                            ; preds = %dec_label_pc_10008215
  %v5_10008234 = or i32 %v4_10008234, 2
  %v6_10008234 = add i32 %v5_10008234, %v3_10008215
  %v7_10008234 = inttoptr i32 %v6_10008234 to i16*
  store i16 %v1_10008234, i16* %v7_10008234, align 2
  %v0_10008239 = load i32, i32* %stack_var_-16, align 4
  %v1_10008239 = load i32, i32* %stack_var_-12, align 4
  %v2_10008239 = load i32, i32* %stack_var_-8, align 4
  %v3_10008239 = load i32, i32* %stack_var_-4, align 4
  %v4_10008239 = call i32 @function_10007ba0(i32 %v0_10008239, i32 %v1_10008239, i32 %v2_10008239, i32 %v3_10008239)
  store i32 %v4_10008239, i32* %eax.global-to-local, align 4
  store i32 %v0_10008239, i32* @edi, align 4
  store i32 %v1_10008239, i32* @esi, align 4
  ret i32 %v4_10008239

dec_label_pc_10008244:                            ; preds = %dec_label_pc_100081e0
  %v0_10008244 = load i32, i32* @esi, align 4
  store i32 %v0_10008244, i32* %stack_var_-16, align 4
  %v1_10008245 = trunc i32 %v0_10008244 to i16
  %v2_10008245 = load i32, i32* @ecx, align 4
  %v3_10008245 = add i32 %v2_10008245, 16
  %v4_10008245 = inttoptr i32 %v3_10008245 to i16*
  store i16 %v1_10008245, i16* %v4_10008245, align 2
  %v0_10008249 = load i32, i32* %stack_var_-16, align 4
  %v1_10008249 = load i32, i32* %stack_var_-12, align 4
  %v2_10008249 = load i32, i32* %stack_var_-8, align 4
  %v3_10008249 = load i32, i32* %stack_var_-4, align 4
  %v4_10008249 = call i32 @function_10007ba0(i32 %v0_10008249, i32 %v1_10008249, i32 %v2_10008249, i32 %v3_10008249)
  store i32 %v4_10008249, i32* %eax.global-to-local, align 4
  store i32 %v0_10008249, i32* @edi, align 4
  store i32 %v1_10008249, i32* @esi, align 4
  ret i32 %v4_10008249
}

define i32 @function_10008260(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008260:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10008260 = load i32, i32* @ebp, align 4
  store i32 %v0_10008260, i32* %stack_var_-4, align 4
  %v4_10008260 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008260, i32* @ebp, align 4
  %v0_10008266 = load i32, i32* @ebx, align 4
  %v0_10008267 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_1000826b = load i32, i32* @edi, align 4
  store i32 %v0_1000826b, i32* %stack_var_-24, align 4
  %v4_1000826b = ptrtoint i32* %stack_var_-24 to i32
  %v0_1000826d = load i32, i32* @ecx, align 4
  store i32 %v0_1000826d, i32* @edi, align 4
  %v1_1000826f = call i32 @function_10009450(i32 %arg1)
  %v1_10008274 = add i32 %v1_1000826f, 1
  store i32 %v1_10008274, i32* @ebx, align 4
  %v1_10008277 = add i32 %v1_1000826f, 16
  %v1_1000827d = and i32 %v1_10008277, -16
  store i32 %v1_1000827d, i32* %eax.global-to-local, align 4
  %v0_10008280 = call i32 @__alloca_probe_16()
  store i32 %v4_1000826b, i32* %eax.global-to-local, align 4
  %v0_10008287 = load i32, i32* @ebx, align 4
  %v0_10008289 = load i32, i32* @esi, align 4
  %v4_1000828d = call i32 @function_10009bf0(i32 %v0_10008289, i32* nonnull %stack_var_-24, i32 %v0_10008287)
  store i32 %v4_1000828d, i32* %eax.global-to-local, align 4
  %v0_10008292 = load i32, i32* @edi, align 4
  %v1_10008292 = add i32 %v0_10008292, 16
  %v2_10008292 = inttoptr i32 %v1_10008292 to i32*
  %v3_10008292 = load i32, i32* %v2_10008292, align 4
  %v1_10008298 = add i32 %v3_10008292, -1
  %v10_10008298 = icmp slt i32 %v1_10008298, 0
  store i32 %v1_10008298, i32* @esi, align 4
  br i1 %v10_10008298, label %dec_label_pc_100082d0, label %dec_label_pc_1000829b

dec_label_pc_1000829b:                            ; preds = %dec_label_pc_10008260
  %v2_100082a0 = mul i32 %v1_10008298, 12
  store i32 %v2_100082a0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100082a5

dec_label_pc_100082a5:                            ; preds = %dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge, %dec_label_pc_1000829b
  %v0_100082ca4 = phi i32 [ %v1_10008298, %dec_label_pc_1000829b ], [ %v1_100082ca, %dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge ]
  %v1_100082b6 = phi i32 [ %v4_1000826b, %dec_label_pc_1000829b ], [ %v1_100082b63, %dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge ]
  %v0_100082a5 = phi i32 [ %v0_10008292, %dec_label_pc_1000829b ], [ %v0_100082a5.pre, %dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge ]
  %v0_100082c7 = phi i32 [ %v2_100082a0, %dec_label_pc_1000829b ], [ %v1_100082c7, %dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge ]
  %v1_100082a5 = add i32 %v0_100082a5, 4
  %v2_100082a5 = inttoptr i32 %v1_100082a5 to i32*
  %v3_100082a5 = load i32, i32* %v2_100082a5, align 4
  store i32 %v3_100082a5, i32* @ecx, align 4
  %v3_100082a8 = add i32 %v0_100082c7, 8
  %v4_100082a8 = add i32 %v3_100082a8, %v3_100082a5
  %v5_100082a8 = inttoptr i32 %v4_100082a8 to i32*
  %v6_100082a8 = load i32, i32* %v5_100082a8, align 4
  %v13_100082a8 = icmp eq i32 %v6_100082a8, 0
  br i1 %v13_100082a8, label %dec_label_pc_100082c7, label %dec_label_pc_100082af

dec_label_pc_100082af:                            ; preds = %dec_label_pc_100082a5
  store i32 %v6_100082a8, i32* %edx.global-to-local, align 4
  store i32 %v4_1000826b, i32* %eax.global-to-local, align 4
  %v2_100082b6 = add i32 %v1_100082b6, -4
  %v3_100082b6 = inttoptr i32 %v2_100082b6 to i32*
  store i32 %v6_100082a8, i32* %v3_100082b6, align 4
  %v0_100082b7 = load i32, i32* %eax.global-to-local, align 4
  %v2_100082b7 = add i32 %v1_100082b6, -8
  %v3_100082b7 = inttoptr i32 %v2_100082b7 to i32*
  store i32 %v0_100082b7, i32* %v3_100082b7, align 4
  %v1_100082b8 = inttoptr i32 %v0_100082c7 to i32*
  %v3_100082b8 = call i32 @function_100094b0(i32* %v1_100082b8, i8* bitcast (i32* @5 to i8*))
  store i32 %v3_100082b8, i32* %eax.global-to-local, align 4
  %v1_100082c0 = icmp eq i32 %v3_100082b8, 0
  br i1 %v1_100082c0, label %dec_label_pc_10008302, label %dec_label_pc_100082c4

dec_label_pc_100082c4:                            ; preds = %dec_label_pc_100082af
  %v0_100082bd = load i32, i32* @esp, align 4
  %v1_100082bd = add i32 %v0_100082bd, 8
  store i32 %v0_100082c7, i32* %eax.global-to-local, align 4
  %v0_100082ca.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100082c7

dec_label_pc_100082c7:                            ; preds = %dec_label_pc_100082c4, %dec_label_pc_100082a5
  %v0_100082ca = phi i32 [ %v0_100082ca.pre, %dec_label_pc_100082c4 ], [ %v0_100082ca4, %dec_label_pc_100082a5 ]
  %v1_100082b63 = phi i32 [ %v1_100082bd, %dec_label_pc_100082c4 ], [ %v1_100082b6, %dec_label_pc_100082a5 ]
  %v1_100082c7 = add i32 %v0_100082c7, -12
  store i32 %v1_100082c7, i32* %eax.global-to-local, align 4
  %v1_100082ca = add i32 %v0_100082ca, -1
  %v10_100082ca = icmp slt i32 %v1_100082ca, 0
  store i32 %v1_100082ca, i32* @esi, align 4
  %v1_100082ce = icmp eq i1 %v10_100082ca, false
  br i1 %v1_100082ce, label %dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge, label %dec_label_pc_100082d0

dec_label_pc_100082c7.dec_label_pc_100082a5_crit_edge: ; preds = %dec_label_pc_100082c7
  %v0_100082a5.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_100082a5

dec_label_pc_100082d0:                            ; preds = %dec_label_pc_100082c7, %dec_label_pc_10008260
  %v1_100082d8 = phi i32 [ %v4_1000826b, %dec_label_pc_10008260 ], [ %v1_100082b63, %dec_label_pc_100082c7 ]
  %v2_100082d0 = load i32, i32* @ecx, align 4
  store i32 %v2_100082d0, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_100082d5 = add i32 %v2_100082d0, 40
  %v2_100082d5 = inttoptr i32 %v1_100082d5 to i32*
  %v3_100082d5 = load i32, i32* %v2_100082d5, align 4
  store i32 %v3_100082d5, i32* %eax.global-to-local, align 4
  %v2_100082d8 = add i32 %v1_100082d8, -4
  %v3_100082d8 = inttoptr i32 %v2_100082d8 to i32*
  store i32 %arg1, i32* %v3_100082d8, align 4
  %v0_100082d9 = load i32, i32* @edi, align 4
  store i32 %v0_100082d9, i32* @ecx, align 4
  %v1_100082e0 = icmp eq i32 %v3_100082d5, 0
  %v1_100082e2 = icmp eq i1 %v1_100082e0, false
  br i1 %v1_100082e2, label %dec_label_pc_10008310, label %dec_label_pc_100082e4

dec_label_pc_100082e4:                            ; preds = %dec_label_pc_100082d0
  %v0_100082e4 = load i32, i32* @esi, align 4
  %v2_100082e4 = add i32 %v1_100082d8, -8
  %v3_100082e4 = inttoptr i32 %v2_100082e4 to i32*
  store i32 %v0_100082e4, i32* %v3_100082e4, align 4
  %v1_100082e5 = add i32 %v1_100082d8, -12
  %v2_100082e5 = inttoptr i32 %v1_100082e5 to i32*
  store i32 ptrtoint ([42 x i8]* @global_var_10023468.282 to i32), i32* %v2_100082e5, align 4
  %v0_100082ea = call i32 @Warning()
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_100082f9 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_100082f9, i32* @edi, align 4
  store i32 %v0_10008267, i32* @esi, align 4
  store i32 %v0_10008266, i32* @ebx, align 4
  %v2_100082fe = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100082fe, i32* @ebp, align 4
  ret i32 -1

dec_label_pc_10008302:                            ; preds = %dec_label_pc_100082af
  %v0_10008302 = load i32, i32* @esi, align 4
  store i32 %v0_10008302, i32* %eax.global-to-local, align 4
  %v2_10008307 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10008307, i32* @edi, align 4
  store i32 %v0_10008267, i32* @esi, align 4
  store i32 %v0_10008266, i32* @ebx, align 4
  %v2_1000830c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000830c, i32* @ebp, align 4
  ret i32 %v0_10008302

dec_label_pc_10008310:                            ; preds = %dec_label_pc_100082d0
  %v1_10008310 = add i32 %v0_100082d9, 4
  store i32 %v1_10008310, i32* @ecx, align 4
  %v0_10008313 = call i32 @function_10008190()
  store i32 %v0_10008313, i32* %eax.global-to-local, align 4
  %v0_10008318 = load i32, i32* @edi, align 4
  %v1_10008318 = add i32 %v0_10008318, 4
  %v2_10008318 = inttoptr i32 %v1_10008318 to i32*
  %v3_10008318 = load i32, i32* %v2_10008318, align 4
  store i32 %v3_10008318, i32* @ecx, align 4
  store i32 %v3_100082d5, i32* %edx.global-to-local, align 4
  %v2_10008323 = mul i32 %v0_10008313, 12
  store i32 %v2_10008323, i32* @esi, align 4
  %v4_10008325 = add i32 %v3_10008318, %v2_10008323
  %v5_10008325 = inttoptr i32 %v4_10008325 to i32*
  store i32 %v3_100082d5, i32* %v5_10008325, align 4
  %v0_10008328 = load i32, i32* %eax.global-to-local, align 4
  %v0_1000832b = load i32, i32* @edi, align 4
  %v1_1000832b = add i32 %v0_1000832b, 4
  %v2_1000832b = inttoptr i32 %v1_1000832b to i32*
  %v3_1000832b = load i32, i32* %v2_1000832b, align 4
  store i32 %v3_1000832b, i32* %eax.global-to-local, align 4
  %v1_1000832e = load i32, i32* @esi, align 4
  %v3_1000832e = add i32 %v3_1000832b, 4
  %v4_1000832e = add i32 %v3_1000832e, %v1_1000832e
  %v5_1000832e = inttoptr i32 %v4_1000832e to i32*
  store i32 0, i32* %v5_1000832e, align 4
  %v0_10008336 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10008336, i32* @ecx, align 4
  %v1_1000833c = inttoptr i32 %v0_10008336 to i32*
  %v2_1000833c = load i32, i32* %v1_1000833c, align 4
  store i32 %v2_1000833c, i32* @ecx, align 4
  %v1_1000833e = inttoptr i32 %v2_1000833c to i32*
  %v2_1000833e = load i32, i32* %v1_1000833e, align 4
  store i32 %v2_1000833e, i32* %edx.global-to-local, align 4
  %v1_10008340 = add i32 %v2_1000833e, 4
  %v2_10008340 = inttoptr i32 %v1_10008340 to i32*
  %v3_10008340 = load i32, i32* %v2_10008340, align 4
  store i32 %v3_10008340, i32* %eax.global-to-local, align 4
  %v0_10008343 = load i32, i32* @ebx, align 4
  %v1_10008343 = load i32, i32* @esp, align 4
  %v2_10008343 = add i32 %v1_10008343, -4
  %v3_10008343 = inttoptr i32 %v2_10008343 to i32*
  store i32 %v0_10008343, i32* %v3_10008343, align 4
  %v0_10008346 = load i32, i32* @edi, align 4
  %v1_10008346 = add i32 %v0_10008346, 4
  %v2_10008346 = inttoptr i32 %v1_10008346 to i32*
  %v3_10008346 = load i32, i32* %v2_10008346, align 4
  store i32 %v3_10008346, i32* @ecx, align 4
  store i32 %v4_1000826b, i32* %edx.global-to-local, align 4
  %v0_1000834c = load i32, i32* %eax.global-to-local, align 4
  %v2_1000834c = load i32, i32* @esi, align 4
  %v4_1000834c = add i32 %v3_10008346, 8
  %v5_1000834c = add i32 %v4_1000834c, %v2_1000834c
  %v6_1000834c = inttoptr i32 %v5_1000834c to i32*
  store i32 %v0_1000834c, i32* %v6_1000834c, align 4
  %v0_10008350 = load i32, i32* @edi, align 4
  %v1_10008350 = add i32 %v0_10008350, 4
  %v2_10008350 = inttoptr i32 %v1_10008350 to i32*
  %v3_10008350 = load i32, i32* %v2_10008350, align 4
  store i32 %v3_10008350, i32* %eax.global-to-local, align 4
  %v1_10008353 = load i32, i32* @esi, align 4
  %v3_10008353 = add i32 %v3_10008350, 8
  %v4_10008353 = add i32 %v3_10008353, %v1_10008353
  %v5_10008353 = inttoptr i32 %v4_10008353 to i32*
  %v6_10008353 = load i32, i32* %v5_10008353, align 4
  store i32 %v6_10008353, i32* @ecx, align 4
  %v0_10008357 = load i32, i32* @ebx, align 4
  %v1_10008357 = load i32, i32* @esp, align 4
  %v2_10008357 = add i32 %v1_10008357, -4
  %v3_10008357 = inttoptr i32 %v2_10008357 to i32*
  store i32 %v0_10008357, i32* %v3_10008357, align 4
  %v0_10008358 = load i32, i32* %edx.global-to-local, align 4
  %v2_10008358 = add i32 %v1_10008357, -8
  %v3_10008358 = inttoptr i32 %v2_10008358 to i32*
  store i32 %v0_10008358, i32* %v3_10008358, align 4
  %v0_10008359 = load i32, i32* @ecx, align 4
  %v2_10008359 = add i32 %v1_10008357, -12
  %v3_10008359 = inttoptr i32 %v2_10008359 to i32*
  store i32 %v0_10008359, i32* %v3_10008359, align 4
  %v1_1000835a = inttoptr i32 %v0_10008328 to i32*
  %v4_1000835a = call i32 @function_10009a60(i32* %v1_1000835a, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v0_10008328, i32* %eax.global-to-local, align 4
  %v2_10008368 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10008368, i32* @edi, align 4
  store i32 %v0_10008267, i32* @esi, align 4
  store i32 %v0_10008266, i32* @ebx, align 4
  %v2_1000836d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000836d, i32* @ebp, align 4
  ret i32 %v0_10008328
}

define i32 @function_10008380(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008380:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10008380 = load i32, i32* @ebp, align 4
  store i32 %v0_10008380, i32* %stack_var_-4, align 4
  %v4_10008380 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008380, i32* @ebp, align 4
  %v0_10008383 = load i32, i32* @edi, align 4
  store i32 %v0_10008383, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_10008387 = icmp eq i32 %arg1, 0
  %v1_10008389 = icmp eq i1 %v1_10008387, false
  br i1 %v1_10008389, label %dec_label_pc_100083a2, label %dec_label_pc_1000838b

dec_label_pc_1000838b:                            ; preds = %dec_label_pc_10008380
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v0_10008391 = call i32 @Warning()
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_1000839d = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000839d, i32* @edi, align 4
  %v2_1000839e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000839e, i32* @ebp, align 4
  ret i32 -1

dec_label_pc_100083a2:                            ; preds = %dec_label_pc_10008380
  %v0_100083a2 = load i32, i32* @ecx, align 4
  %v1_100083a2 = add i32 %v0_100083a2, 16
  %v2_100083a2 = inttoptr i32 %v1_100083a2 to i32*
  %v3_100083a2 = load i32, i32* %v2_100083a2, align 4
  %v1_100083a5 = add i32 %v3_100083a2, -1
  %v10_100083a5 = icmp slt i32 %v1_100083a5, 0
  store i32 %v1_100083a5, i32* %eax.global-to-local, align 4
  %v0_100083a6 = load i32, i32* @esi, align 4
  store i32 %v0_100083a6, i32* %stack_var_-12, align 4
  %.pre = add i32 %v0_100083a2, 4
  br i1 %v10_100083a5, label %dec_label_pc_100083c3, label %dec_label_pc_100083a9

dec_label_pc_100083a9:                            ; preds = %dec_label_pc_100083a2
  %v2_100083a9 = inttoptr i32 %.pre to i32*
  %v3_100083a9 = load i32, i32* %v2_100083a9, align 4
  %v2_100083af = mul i32 %v1_100083a5, 12
  %v3_100083af = add i32 %v2_100083af, 4
  %v4_100083af = add i32 %v3_100083af, %v3_100083a9
  br label %dec_label_pc_100083b3

dec_label_pc_100083b3:                            ; preds = %dec_label_pc_100083bd, %dec_label_pc_100083a9
  %v0_100083c0 = phi i32 [ %v1_100083c0, %dec_label_pc_100083bd ], [ %v1_100083a5, %dec_label_pc_100083a9 ]
  %v0_100083bd = phi i32 [ %v1_100083bd, %dec_label_pc_100083bd ], [ %v4_100083af, %dec_label_pc_100083a9 ]
  %v1_100083b3 = inttoptr i32 %v0_100083bd to i32*
  %v2_100083b3 = load i32, i32* %v1_100083b3, align 4
  %v1_100083b5 = icmp ne i32 %v2_100083b3, 0
  %v12_100083b9 = icmp eq i32 %v2_100083b3, %arg1
  %or.cond = icmp eq i1 %v1_100083b5, %v12_100083b9
  br i1 %or.cond, label %dec_label_pc_100083ed.loopexit, label %dec_label_pc_100083bd

dec_label_pc_100083bd:                            ; preds = %dec_label_pc_100083b3
  %v1_100083bd = add i32 %v0_100083bd, -12
  %v1_100083c0 = add i32 %v0_100083c0, -1
  %v10_100083c0 = icmp slt i32 %v1_100083c0, 0
  store i32 %v1_100083c0, i32* %eax.global-to-local, align 4
  %v1_100083c1 = icmp eq i1 %v10_100083c0, false
  br i1 %v1_100083c1, label %dec_label_pc_100083b3, label %dec_label_pc_100083c3.loopexit

dec_label_pc_100083c3.loopexit:                   ; preds = %dec_label_pc_100083bd
  br label %dec_label_pc_100083c3

dec_label_pc_100083c3:                            ; preds = %dec_label_pc_100083a2, %dec_label_pc_100083c3.loopexit
  store i32 %.pre, i32* @esi, align 4
  store i32 %.pre, i32* @ecx, align 4
  %v0_100083c8 = call i32 @function_10008190()
  store i32 %v0_100083c8, i32* %eax.global-to-local, align 4
  %v0_100083cd = load i32, i32* @esi, align 4
  %v1_100083cd = inttoptr i32 %v0_100083cd to i32*
  %v2_100083cd = load i32, i32* %v1_100083cd, align 4
  %v2_100083d4 = mul i32 %v0_100083c8, 12
  store i32 %v2_100083d4, i32* @ecx, align 4
  %v3_100083d6 = add i32 %v2_100083cd, %v2_100083d4
  %v4_100083d6 = inttoptr i32 %v3_100083d6 to i32*
  store i32 0, i32* %v4_100083d6, align 4
  %v0_100083dd = load i32, i32* @esi, align 4
  %v1_100083dd = inttoptr i32 %v0_100083dd to i32*
  %v2_100083dd = load i32, i32* %v1_100083dd, align 4
  %v2_100083df = load i32, i32* @ecx, align 4
  %v4_100083df = add i32 %v2_100083dd, 4
  %v5_100083df = add i32 %v4_100083df, %v2_100083df
  %v6_100083df = inttoptr i32 %v5_100083df to i32*
  store i32 %arg1, i32* %v6_100083df, align 4
  %v0_100083e3 = load i32, i32* @esi, align 4
  %v1_100083e3 = inttoptr i32 %v0_100083e3 to i32*
  %v2_100083e3 = load i32, i32* %v1_100083e3, align 4
  %v1_100083e5 = load i32, i32* @ecx, align 4
  %v3_100083e5 = add i32 %v2_100083e3, 8
  %v4_100083e5 = add i32 %v3_100083e5, %v1_100083e5
  %v5_100083e5 = inttoptr i32 %v4_100083e5 to i32*
  store i32 0, i32* %v5_100083e5, align 4
  %v2_100083ed.pre = load i32, i32* %stack_var_-12, align 4
  %v2_100083ee.pre = load i32, i32* %stack_var_-8, align 4
  %v2_100083ef.pre = load i32, i32* %stack_var_-4, align 4
  %v0_100083f0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100083ed

dec_label_pc_100083ed.loopexit:                   ; preds = %dec_label_pc_100083b3
  br label %dec_label_pc_100083ed

dec_label_pc_100083ed:                            ; preds = %dec_label_pc_100083ed.loopexit, %dec_label_pc_100083c3
  %v0_100083f0 = phi i32 [ %v0_100083c0, %dec_label_pc_100083ed.loopexit ], [ %v0_100083f0.pre, %dec_label_pc_100083c3 ]
  %v2_100083ef = phi i32 [ %v0_10008380, %dec_label_pc_100083ed.loopexit ], [ %v2_100083ef.pre, %dec_label_pc_100083c3 ]
  %v2_100083ee = phi i32 [ %v0_10008383, %dec_label_pc_100083ed.loopexit ], [ %v2_100083ee.pre, %dec_label_pc_100083c3 ]
  %v2_100083ed = phi i32 [ %v0_100083a6, %dec_label_pc_100083ed.loopexit ], [ %v2_100083ed.pre, %dec_label_pc_100083c3 ]
  store i32 %v2_100083ed, i32* @esi, align 4
  store i32 %v2_100083ee, i32* @edi, align 4
  store i32 %v2_100083ef, i32* @ebp, align 4
  ret i32 %v0_100083f0
}

define i32 @function_10008400(i8* %arg1) local_unnamed_addr {
dec_label_pc_10008400:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i8*, align 4
  %v0_10008400 = load i32, i32* @ebp, align 4
  %v16_10008403 = ptrtoint i8** %stack_var_-12 to i32
  %v0_10008406 = load i32, i32* @esi, align 4
  %v0_10008407 = load i32, i32* @edi, align 4
  store i32 %v0_10008407, i32* %stack_var_-20, align 4
  %v4_10008407 = ptrtoint i32* %stack_var_-20 to i32
  %v4_10008408 = ptrtoint i8* %arg1 to i32
  store i32 %v4_10008408, i32* @edi, align 4
  %v0_1000840b = load i32, i32* @ecx, align 4
  store i32 %v0_1000840b, i32* @esi, align 4
  %v2_1000840d = icmp eq i8* %arg1, null
  br i1 %v2_1000840d, label %dec_label_pc_10008446, label %dec_label_pc_10008411

dec_label_pc_10008411:                            ; preds = %dec_label_pc_10008400
  store i32 %v16_10008403, i32* %eax.global-to-local, align 4
  store i32 %v16_10008403, i32* %stack_var_-24, align 4
  %v1_10008415 = add i32 %v0_1000840b, 64
  store i32 %v1_10008415, i32* @ecx, align 4
  %tmp42 = bitcast i8** %stack_var_-12 to i32*
  store i32 %v4_10008408, i32* %tmp42, align 4
  %v7_1000841b = call i32 @function_100079e0(i32* %tmp42, i32 %v0_10008407, i32 %v0_10008406, i32 %v4_10008408, i32 %v0_10008400)
  %v1_10008420 = and i32 %v7_1000841b, 65535
  store i32 %v1_10008420, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_10008428 = trunc i32 %v7_1000841b to i16
  %v14_10008428 = icmp eq i16 %v1_10008428, -1
  br i1 %v14_10008428, label %dec_label_pc_10008411.dec_label_pc_10008446_crit_edge, label %dec_label_pc_1000842d

dec_label_pc_10008411.dec_label_pc_10008446_crit_edge: ; preds = %dec_label_pc_10008411
  %v1_10008446.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10008446

dec_label_pc_1000842d:                            ; preds = %dec_label_pc_10008411
  %v0_1000842f = load i32, i32* @esi, align 4
  %v1_1000842f = add i32 %v0_1000842f, 68
  %v2_1000842f = inttoptr i32 %v1_1000842f to i32*
  %v3_1000842f = load i32, i32* %v2_1000842f, align 4
  store i32 %v3_1000842f, i32* %eax.global-to-local, align 4
  %v2_10008434 = mul nuw nsw i32 %v1_10008420, 16
  %v3_10008434 = or i32 %v2_10008434, 12
  %v4_10008434 = add i32 %v3_1000842f, %v3_10008434
  %v5_10008434 = inttoptr i32 %v4_10008434 to i32*
  %v6_10008434 = load i32, i32* %v5_10008434, align 4
  store i32 %v6_10008434, i32* @ecx, align 4
  %v1_10008438 = add i32 %v0_1000842f, 24
  %v2_10008438 = inttoptr i32 %v1_10008438 to i32*
  %v3_10008438 = load i32, i32* %v2_10008438, align 4
  %v2_1000843b = mul i32 %v6_10008434, 4
  %v3_1000843b = add i32 %v3_10008438, %v2_1000843b
  %v4_1000843b = inttoptr i32 %v3_1000843b to i32*
  %v5_1000843b = load i32, i32* %v4_1000843b, align 4
  store i32 %v5_1000843b, i32* %eax.global-to-local, align 4
  %v2_1000843e = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000843e, i32* @edi, align 4
  %v2_1000843f = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000843f, i32* @esi, align 4
  ret i32 %v5_1000843b

dec_label_pc_10008446:                            ; preds = %dec_label_pc_10008411.dec_label_pc_10008446_crit_edge, %dec_label_pc_10008400
  %v1_10008446 = phi i32 [ %v1_10008446.pre, %dec_label_pc_10008411.dec_label_pc_10008446_crit_edge ], [ %v4_10008407, %dec_label_pc_10008400 ]
  %v0_10008446 = load i32, i32* @ebx, align 4
  %v2_10008446 = add i32 %v1_10008446, -4
  %v3_10008446 = inttoptr i32 %v2_10008446 to i32*
  store i32 %v0_10008446, i32* %v3_10008446, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_10008449 = load i32, i32* @esi, align 4
  %v1_10008449 = add i32 %v0_10008449, 36
  %v2_10008449 = inttoptr i32 %v1_10008449 to i32*
  %v3_10008449 = load i32, i32* %v2_10008449, align 4
  %v7_1000844c = icmp sgt i32 %v3_10008449, 0
  br i1 %v7_1000844c, label %dec_label_pc_1000844e, label %dec_label_pc_1000846b

dec_label_pc_1000844e:                            ; preds = %dec_label_pc_10008446
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008450

dec_label_pc_10008450:                            ; preds = %dec_label_pc_10008462, %dec_label_pc_1000844e
  %v2_1000845b = phi i32 [ %v3_1000845b, %dec_label_pc_10008462 ], [ %v2_10008446, %dec_label_pc_1000844e ]
  %v1_10008453 = phi i32 [ %v1_10008463, %dec_label_pc_10008462 ], [ 0, %dec_label_pc_1000844e ]
  %v0_10008450 = phi i32 [ %v1_10008466, %dec_label_pc_10008462 ], [ %v0_10008449, %dec_label_pc_1000844e ]
  %v1_10008450 = add i32 %v0_10008450, 24
  %v2_10008450 = inttoptr i32 %v1_10008450 to i32*
  %v3_10008450 = load i32, i32* %v2_10008450, align 4
  store i32 %v3_10008450, i32* @ecx, align 4
  %v2_10008453 = mul nuw nsw i32 %v1_10008453, 4
  %v3_10008453 = add i32 %v3_10008450, %v2_10008453
  %v4_10008453 = inttoptr i32 %v3_10008453 to i32*
  %v5_10008453 = load i32, i32* %v4_10008453, align 4
  store i32 %v5_10008453, i32* @ecx, align 4
  %v1_10008456 = inttoptr i32 %v5_10008453 to i32*
  %v2_10008456 = load i32, i32* %v1_10008456, align 4
  %v1_10008458 = add i32 %v2_10008456, 8
  %v2_10008458 = inttoptr i32 %v1_10008458 to i32*
  %v3_10008458 = load i32, i32* %v2_10008458, align 4
  store i32 %v3_10008458, i32* %eax.global-to-local, align 4
  %v3_1000845b = add i32 %v2_1000845b, -4
  %v4_1000845b = inttoptr i32 %v3_1000845b to i32*
  store i32 %v4_10008408, i32* %v4_1000845b, align 4
  %v0_1000845e = load i32, i32* %eax.global-to-local, align 4
  %v1_1000845e = icmp eq i32 %v0_1000845e, 0
  %v1_10008460 = icmp eq i1 %v1_1000845e, false
  br i1 %v1_10008460, label %dec_label_pc_100084b3.loopexit4, label %dec_label_pc_10008462

dec_label_pc_10008462:                            ; preds = %dec_label_pc_10008450
  %v0_10008462 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10008462 = add i32 %v0_10008462, 1
  store i32 %v1_10008462, i32* %ebx.global-to-local, align 4
  %v1_10008463 = and i32 %v1_10008462, 65535
  store i32 %v1_10008463, i32* %eax.global-to-local, align 4
  %v1_10008466 = load i32, i32* @esi, align 4
  %v2_10008466 = add i32 %v1_10008466, 36
  %v3_10008466 = inttoptr i32 %v2_10008466 to i32*
  %v4_10008466 = load i32, i32* %v3_10008466, align 4
  %v5_10008469 = icmp slt i32 %v1_10008463, %v4_10008466
  br i1 %v5_10008469, label %dec_label_pc_10008450, label %dec_label_pc_1000846b.loopexit

dec_label_pc_1000846b.loopexit:                   ; preds = %dec_label_pc_10008462
  br label %dec_label_pc_1000846b

dec_label_pc_1000846b:                            ; preds = %dec_label_pc_1000846b.loopexit, %dec_label_pc_10008446
  %v0_1000848916 = phi i32 [ %v3_1000845b, %dec_label_pc_1000846b.loopexit ], [ %v2_10008446, %dec_label_pc_10008446 ]
  %v0_1000846b = phi i32 [ %v1_10008466, %dec_label_pc_1000846b.loopexit ], [ %v0_10008449, %dec_label_pc_10008446 ]
  %v1_1000846b = add i32 %v0_1000846b, 56
  %v2_1000846b = inttoptr i32 %v1_1000846b to i32*
  %v3_1000846b = load i32, i32* %v2_1000846b, align 4
  store i32 %v3_1000846b, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v4_10008470 = inttoptr i32 %v3_1000846b to i8*
  %tmp43 = icmp slt i32 %v3_1000846b, 1
  br i1 %tmp43, label %dec_label_pc_1000849e, label %dec_label_pc_10008477

dec_label_pc_10008477:                            ; preds = %dec_label_pc_1000846b
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_10008489 = add i32 %v0_1000848916, -4
  %v2_10008489 = inttoptr i32 %v1_10008489 to i32*
  %v3_1000848b = add i32 %v0_1000848916, -8
  %v4_1000848b = inttoptr i32 %v3_1000848b to i32*
  br label %dec_label_pc_10008480

dec_label_pc_10008480:                            ; preds = %dec_label_pc_10008495.dec_label_pc_10008480_crit_edge, %dec_label_pc_10008477
  %v1_10008486 = phi i32 [ %v1_10008496, %dec_label_pc_10008495.dec_label_pc_10008480_crit_edge ], [ 0, %dec_label_pc_10008477 ]
  %v0_10008480 = phi i32 [ %v0_10008480.pre, %dec_label_pc_10008495.dec_label_pc_10008480_crit_edge ], [ %v0_1000846b, %dec_label_pc_10008477 ]
  %v1_10008480 = add i32 %v0_10008480, 44
  %v2_10008480 = inttoptr i32 %v1_10008480 to i32*
  %v3_10008480 = load i32, i32* %v2_10008480, align 4
  store i32 %v3_10008480, i32* @ecx, align 4
  %v2_10008483 = mul nuw nsw i32 %v1_10008486, 4
  %v3_10008483 = add i32 %v3_10008480, %v2_10008483
  store i32 %v3_10008483, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v2_10008489, align 4
  store i32 %v4_10008408, i32* %v4_1000848b, align 4
  %v0_10008491 = load i32, i32* %eax.global-to-local, align 4
  %v1_10008491 = icmp eq i32 %v0_10008491, 0
  %v1_10008493 = icmp eq i1 %v1_10008491, false
  br i1 %v1_10008493, label %dec_label_pc_100084b3.loopexit, label %dec_label_pc_10008495

dec_label_pc_10008495:                            ; preds = %dec_label_pc_10008480
  %v0_10008495 = load i32, i32* @ebx, align 4
  %v1_10008495 = add i32 %v0_10008495, 1
  store i32 %v1_10008495, i32* @ebx, align 4
  %v1_10008496 = and i32 %v1_10008495, 65535
  store i32 %v1_10008496, i32* %eax.global-to-local, align 4
  %v6_10008499 = inttoptr i32 %v1_10008496 to i8*
  %v7_1000849c = icmp slt i8* %v6_10008499, %v4_10008470
  br i1 %v7_1000849c, label %dec_label_pc_10008495.dec_label_pc_10008480_crit_edge, label %dec_label_pc_1000849e.loopexit

dec_label_pc_10008495.dec_label_pc_10008480_crit_edge: ; preds = %dec_label_pc_10008495
  %v0_10008480.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10008480

dec_label_pc_1000849e.loopexit:                   ; preds = %dec_label_pc_10008495
  %v0_1000849e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000849e

dec_label_pc_1000849e:                            ; preds = %dec_label_pc_1000849e.loopexit, %dec_label_pc_1000846b
  %v0_1000849e = phi i32 [ %v0_1000849e.pre, %dec_label_pc_1000849e.loopexit ], [ %v0_1000846b, %dec_label_pc_1000846b ]
  %v1_1000849e = add i32 %v0_1000849e, 92
  %v2_1000849e = inttoptr i32 %v1_1000849e to i32*
  %v3_1000849e = load i32, i32* %v2_1000849e, align 4
  store i32 %v3_1000849e, i32* @esi, align 4
  %v1_100084a1 = icmp eq i32 %v3_1000849e, 0
  br i1 %v1_100084a1, label %dec_label_pc_100084b1, label %dec_label_pc_100084a5

dec_label_pc_100084a5:                            ; preds = %dec_label_pc_1000849e
  %v3_100084a5 = add i32 %v0_1000848916, -4
  %v4_100084a5 = inttoptr i32 %v3_100084a5 to i32*
  store i32 %v4_10008408, i32* %v4_100084a5, align 4
  store i32 %v3_1000849e, i32* @ecx, align 4
  %v1_100084a8 = call i32 @function_10008400(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_100084a8, i32* %eax.global-to-local, align 4
  %v1_100084ad = icmp eq i32 %v1_100084a8, 0
  %v1_100084af = icmp eq i1 %v1_100084ad, false
  br i1 %v1_100084af, label %dec_label_pc_100084b3, label %dec_label_pc_100084b1

dec_label_pc_100084b1:                            ; preds = %dec_label_pc_100084a5, %dec_label_pc_1000849e
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100084b3

dec_label_pc_100084b3.loopexit:                   ; preds = %dec_label_pc_10008480
  br label %dec_label_pc_100084b3

dec_label_pc_100084b3.loopexit4:                  ; preds = %dec_label_pc_10008450
  br label %dec_label_pc_100084b3

dec_label_pc_100084b3:                            ; preds = %dec_label_pc_100084b3.loopexit4, %dec_label_pc_100084b3.loopexit, %dec_label_pc_100084b1, %dec_label_pc_100084a5
  %v0_100084b9 = phi i32 [ %v0_1000845e, %dec_label_pc_100084b3.loopexit4 ], [ %v0_10008491, %dec_label_pc_100084b3.loopexit ], [ 0, %dec_label_pc_100084b1 ], [ %v1_100084a8, %dec_label_pc_100084a5 ]
  %v0_100084b3 = load i32, i32* @esp, align 4
  %v1_100084b3 = inttoptr i32 %v0_100084b3 to i32*
  %v2_100084b3 = load i32, i32* %v1_100084b3, align 4
  store i32 %v2_100084b3, i32* @ebx, align 4
  %v3_100084b3 = add i32 %v0_100084b3, 4
  %v1_100084b4 = inttoptr i32 %v3_100084b3 to i32*
  %v2_100084b4 = load i32, i32* %v1_100084b4, align 4
  store i32 %v2_100084b4, i32* @edi, align 4
  %v3_100084b4 = add i32 %v0_100084b3, 8
  %v1_100084b5 = inttoptr i32 %v3_100084b4 to i32*
  %v2_100084b5 = load i32, i32* %v1_100084b5, align 4
  store i32 %v2_100084b5, i32* @esi, align 4
  ret i32 %v0_100084b9
}

define i32 @function_100084c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100084c0:
  %v0_100084c5 = load i32, i32* @ecx, align 4
  store i32 %v0_100084c5, i32* @esi, align 4
  %v1_100084c8 = add i32 %v0_100084c5, 64
  store i32 %v1_100084c8, i32* @ecx, align 4
  %v0_100084cb = call i32 @function_10003d90()
  store i32 65535, i32* @ecx, align 4
  %v1_100084d8 = trunc i32 %v0_100084cb to i16
  %v14_100084d8 = icmp eq i16 %v1_100084d8, -1
  br i1 %v14_100084d8, label %dec_label_pc_10008504, label %dec_label_pc_100084dd

dec_label_pc_100084dd:                            ; preds = %dec_label_pc_100084c0
  store i32 %arg1, i32* @ebx, align 4
  br label %dec_label_pc_100084e0

dec_label_pc_100084e0:                            ; preds = %dec_label_pc_100084ee.dec_label_pc_100084e0_crit_edge, %dec_label_pc_100084dd
  %v7_100084e8 = phi i32 [ %v7_100084e8.pre, %dec_label_pc_100084ee.dec_label_pc_100084e0_crit_edge ], [ %arg1, %dec_label_pc_100084dd ]
  %v0_1000850d.in = phi i32 [ %v1_100084f2, %dec_label_pc_100084ee.dec_label_pc_100084e0_crit_edge ], [ %v0_100084cb, %dec_label_pc_100084dd ]
  %v0_1000850d = and i32 %v0_1000850d.in, 65535
  %v0_100084e0 = load i32, i32* @esi, align 4
  %v1_100084e0 = add i32 %v0_100084e0, 68
  %v2_100084e0 = inttoptr i32 %v1_100084e0 to i32*
  %v3_100084e0 = load i32, i32* %v2_100084e0, align 4
  store i32 %v3_100084e0, i32* @ecx, align 4
  %v2_100084e8 = mul nuw nsw i32 %v0_1000850d, 16
  %v3_100084e8 = or i32 %v2_100084e8, 12
  %v4_100084e8 = add i32 %v3_100084e8, %v3_100084e0
  %v5_100084e8 = inttoptr i32 %v4_100084e8 to i32*
  %v6_100084e8 = load i32, i32* %v5_100084e8, align 4
  %v18_100084e8 = icmp eq i32 %v6_100084e8, %v7_100084e8
  br i1 %v18_100084e8, label %dec_label_pc_1000850d, label %dec_label_pc_100084ee

dec_label_pc_100084ee:                            ; preds = %dec_label_pc_100084e0
  %v1_100084ee = load i32, i32* @esp, align 4
  %v2_100084ee = add i32 %v1_100084ee, -4
  %v3_100084ee = inttoptr i32 %v2_100084ee to i32*
  store i32 %v0_1000850d, i32* %v3_100084ee, align 4
  %v0_100084ef = load i32, i32* @esi, align 4
  %v1_100084ef = add i32 %v0_100084ef, 64
  store i32 %v1_100084ef, i32* @ecx, align 4
  %v1_100084f2 = call i32 @function_10003e60(i32 ptrtoint (i32* @5 to i32))
  %v1_100084ff = trunc i32 %v1_100084f2 to i16
  %v14_100084ff = icmp eq i16 %v1_100084ff, -1
  %v1_10008502 = icmp eq i1 %v14_100084ff, false
  br i1 %v1_10008502, label %dec_label_pc_100084ee.dec_label_pc_100084e0_crit_edge, label %dec_label_pc_10008504

dec_label_pc_100084ee.dec_label_pc_100084e0_crit_edge: ; preds = %dec_label_pc_100084ee
  %v7_100084e8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100084e0

dec_label_pc_10008504:                            ; preds = %dec_label_pc_100084ee, %dec_label_pc_100084c0
  %v0_10008504 = load i32, i32* @esp, align 4
  %v3_10008504 = add i32 %v0_10008504, 4
  %v1_10008505 = inttoptr i32 %v3_10008504 to i32*
  %v2_10008505 = load i32, i32* %v1_10008505, align 4
  store i32 %v2_10008505, i32* @esi, align 4
  %v3_10008505 = add i32 %v0_10008504, 8
  %v1_10008508 = inttoptr i32 %v3_10008505 to i32*
  %v2_10008508 = load i32, i32* %v1_10008508, align 4
  store i32 %v2_10008508, i32* @ebx, align 4
  %v3_10008508 = add i32 %v0_10008504, 12
  %v1_10008509 = inttoptr i32 %v3_10008508 to i32*
  %v2_10008509 = load i32, i32* %v1_10008509, align 4
  store i32 %v2_10008509, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000850d:                            ; preds = %dec_label_pc_100084e0
  %v0_10008510 = load i32, i32* @esp, align 4
  %v3_10008510 = add i32 %v0_10008510, 4
  %v3_10008513 = or i32 %v2_100084e8, 8
  %v4_10008513 = add i32 %v3_10008513, %v3_100084e0
  %v5_10008513 = inttoptr i32 %v4_10008513 to i32*
  %v6_10008513 = load i32, i32* %v5_10008513, align 4
  %v1_10008517 = inttoptr i32 %v3_10008510 to i32*
  %v2_10008517 = load i32, i32* %v1_10008517, align 4
  store i32 %v2_10008517, i32* @esi, align 4
  %v3_10008517 = add i32 %v0_10008510, 8
  %v1_10008518 = inttoptr i32 %v3_10008517 to i32*
  %v2_10008518 = load i32, i32* %v1_10008518, align 4
  store i32 %v2_10008518, i32* @ebx, align 4
  %v3_10008518 = add i32 %v0_10008510, 12
  %v1_10008519 = inttoptr i32 %v3_10008518 to i32*
  %v2_10008519 = load i32, i32* %v1_10008519, align 4
  store i32 %v2_10008519, i32* @ebp, align 4
  ret i32 %v6_10008513
}

define i32 @function_10008520() local_unnamed_addr {
dec_label_pc_10008520:
  %v0_10008520 = load i32, i32* @ebp, align 4
  %v0_10008526 = load i32, i32* @ebx, align 4
  %v0_10008527 = load i32, i32* @esi, align 4
  %v0_10008528 = load i32, i32* @ecx, align 4
  store i32 %v0_10008528, i32* @esi, align 4
  store i32 0, i32* @ebx, align 4
  %v1_1000852c = add i32 %v0_10008528, 36
  %v2_1000852c = inttoptr i32 %v1_1000852c to i32*
  %v3_1000852c = load i32, i32* %v2_1000852c, align 4
  %v7_1000852f = icmp sgt i32 %v3_1000852c, 0
  br i1 %v7_1000852f, label %dec_label_pc_10008531.preheader, label %dec_label_pc_1000854c

dec_label_pc_10008531.preheader:                  ; preds = %dec_label_pc_10008520
  %v1_10008531 = add i32 %v0_10008528, 24
  %v2_10008531 = inttoptr i32 %v1_10008531 to i32*
  br label %dec_label_pc_10008531

dec_label_pc_10008531:                            ; preds = %dec_label_pc_10008531.preheader, %dec_label_pc_10008546
  %v0_10008558 = phi i32 [ %v1_10008546, %dec_label_pc_10008546 ], [ 0, %dec_label_pc_10008531.preheader ]
  %v3_10008531 = load i32, i32* %v2_10008531, align 4
  %v2_10008534 = mul i32 %v0_10008558, 4
  %v3_10008534 = add i32 %v2_10008534, %v3_10008531
  %v4_10008534 = inttoptr i32 %v3_10008534 to i32*
  %v5_10008534 = load i32, i32* %v4_10008534, align 4
  store i32 %v5_10008534, i32* @ecx, align 4
  %v1_10008537 = inttoptr i32 %v5_10008534 to i32*
  %v2_10008537 = load i32, i32* %v1_10008537, align 4
  %v1_10008539 = add i32 %v2_10008537, 12
  %v2_10008539 = inttoptr i32 %v1_10008539 to i32*
  %v3_10008539 = load i32, i32* %v2_10008539, align 4
  %v10_10008541 = icmp eq i32 %v3_10008539, 1
  %v1_10008544 = icmp eq i1 %v10_10008541, false
  br i1 %v1_10008544, label %dec_label_pc_10008557, label %dec_label_pc_10008546

dec_label_pc_10008546:                            ; preds = %dec_label_pc_10008531
  %v1_10008546 = add i32 %v0_10008558, 1
  store i32 %v1_10008546, i32* @ebx, align 4
  %v4_10008547 = load i32, i32* %v2_1000852c, align 4
  %v5_1000854a = icmp slt i32 %v1_10008546, %v4_10008547
  br i1 %v5_1000854a, label %dec_label_pc_10008531, label %dec_label_pc_1000854c.loopexit

dec_label_pc_1000854c.loopexit:                   ; preds = %dec_label_pc_10008546
  br label %dec_label_pc_1000854c

dec_label_pc_1000854c:                            ; preds = %dec_label_pc_1000854c.loopexit, %dec_label_pc_10008520
  store i32 %v0_10008527, i32* @esi, align 4
  store i32 %v0_10008526, i32* @ebx, align 4
  store i32 %v0_10008520, i32* @ebp, align 4
  ret i32 1

dec_label_pc_10008557:                            ; preds = %dec_label_pc_10008531
  store i32 %v0_10008558, i32* @edi, align 4
  %tmp23 = icmp slt i32 %v0_10008558, 1
  br i1 %tmp23, label %dec_label_pc_10008573, label %dec_label_pc_10008560

dec_label_pc_10008560:                            ; preds = %dec_label_pc_10008557, %dec_label_pc_10008560
  %v0_1000856c = phi i32 [ %v1_1000856c, %dec_label_pc_10008560 ], [ %v0_10008558, %dec_label_pc_10008557 ]
  %v3_10008560 = load i32, i32* %v2_10008531, align 4
  store i32 %v3_10008560, i32* @ecx, align 4
  %v2_10008563 = mul i32 %v0_1000856c, 4
  %v3_10008563 = add i32 %v3_10008560, -4
  %v4_10008563 = add i32 %v3_10008563, %v2_10008563
  %v5_10008563 = inttoptr i32 %v4_10008563 to i32*
  %v6_10008563 = load i32, i32* %v5_10008563, align 4
  store i32 %v6_10008563, i32* @ecx, align 4
  %v1_1000856c = add i32 %v0_1000856c, -1
  %v9_1000856c = icmp eq i32 %v1_1000856c, 0
  %v10_1000856c = icmp slt i32 %v1_1000856c, 0
  store i32 %v1_1000856c, i32* @edi, align 4
  %v3_10008571 = icmp eq i1 %v10_1000856c, false
  %v4_10008571 = icmp eq i1 %v9_1000856c, false
  %v5_10008571 = icmp eq i1 %v3_10008571, %v4_10008571
  br i1 %v5_10008571, label %dec_label_pc_10008560, label %dec_label_pc_10008573.loopexit

dec_label_pc_10008573.loopexit:                   ; preds = %dec_label_pc_10008560
  br label %dec_label_pc_10008573

dec_label_pc_10008573:                            ; preds = %dec_label_pc_10008573.loopexit, %dec_label_pc_10008557
  %v1_10008573 = add i32 %v0_10008528, 64
  store i32 %v1_10008573, i32* @ecx, align 4
  %v0_1000857d = call i32 @function_10003d90()
  %v1_10008582 = and i32 %v0_1000857d, 65535
  %v10_10008585 = icmp eq i32 %v1_10008582, 65535
  br i1 %v10_10008585, label %dec_label_pc_100085bf, label %dec_label_pc_1000858c

dec_label_pc_1000858c:                            ; preds = %dec_label_pc_10008573
  br label %dec_label_pc_10008590

dec_label_pc_10008590:                            ; preds = %dec_label_pc_1000859e, %dec_label_pc_1000858c
  %v0_100085b3 = phi i32 [ %v1_100085a7, %dec_label_pc_1000859e ], [ %v1_10008582, %dec_label_pc_1000858c ]
  %v0_10008590 = load i32, i32* @esi, align 4
  %v1_10008590 = add i32 %v0_10008590, 68
  %v2_10008590 = inttoptr i32 %v1_10008590 to i32*
  %v3_10008590 = load i32, i32* %v2_10008590, align 4
  %v2_10008596 = mul nuw nsw i32 %v0_100085b3, 2
  store i32 %v2_10008596, i32* @ecx, align 4
  %v2_10008598 = mul nuw nsw i32 %v0_100085b3, 16
  %v3_10008598 = or i32 %v2_10008598, 12
  %v4_10008598 = add i32 %v3_10008598, %v3_10008590
  %v5_10008598 = inttoptr i32 %v4_10008598 to i32*
  %v6_10008598 = load i32, i32* %v5_10008598, align 4
  %v7_10008598 = load i32, i32* @ebx, align 4
  %v18_10008598 = icmp eq i32 %v6_10008598, %v7_10008598
  br i1 %v18_10008598, label %dec_label_pc_100085b3, label %dec_label_pc_1000859e

dec_label_pc_1000859e:                            ; preds = %dec_label_pc_10008590
  %v1_1000859e = load i32, i32* @esp, align 4
  %v2_1000859e = add i32 %v1_1000859e, -4
  %v3_1000859e = inttoptr i32 %v2_1000859e to i32*
  store i32 %v0_100085b3, i32* %v3_1000859e, align 4
  %v0_1000859f = load i32, i32* @esi, align 4
  %v1_1000859f = add i32 %v0_1000859f, 64
  store i32 %v1_1000859f, i32* @ecx, align 4
  %v1_100085a2 = call i32 @function_10003e60(i32 ptrtoint (i32* @5 to i32))
  %v1_100085a7 = and i32 %v1_100085a2, 65535
  %v10_100085aa = icmp eq i32 %v1_100085a7, 65535
  %v1_100085af = icmp eq i1 %v10_100085aa, false
  br i1 %v1_100085af, label %dec_label_pc_10008590, label %dec_label_pc_100085bf

dec_label_pc_100085b3:                            ; preds = %dec_label_pc_10008590
  %v3_100085b8 = or i32 %v2_10008598, 8
  %v4_100085b8 = add i32 %v3_100085b8, %v3_10008590
  %v5_100085b8 = inttoptr i32 %v4_100085b8 to i32*
  %v6_100085b8 = load i32, i32* %v5_100085b8, align 4
  %v4_100085bc = inttoptr i32 %v6_100085b8 to i8*
  br label %dec_label_pc_100085bf

dec_label_pc_100085bf:                            ; preds = %dec_label_pc_1000859e, %dec_label_pc_100085b3, %dec_label_pc_10008573
  %stack_var_-8.0 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_100234e4.284, i32 0, i32 0), %dec_label_pc_10008573 ], [ %v4_100085bc, %dec_label_pc_100085b3 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_100234e4.284, i32 0, i32 0), %dec_label_pc_1000859e ]
  %v0_100085bf = load i32, i32* bitcast ([8 x i8*]* @global_var_100281a4.293 to i32*), align 16
  %v4_100085c4 = ptrtoint i8* %stack_var_-8.0 to i32
  store i32 %v4_100085c4, i32* @ecx, align 4
  %v1_100085c7 = load i32, i32* @esp, align 4
  %v2_100085c7 = add i32 %v1_100085c7, -4
  %v3_100085c7 = inttoptr i32 %v2_100085c7 to i32*
  store i32 %v0_100085bf, i32* %v3_100085c7, align 4
  %v0_100085c8 = load i32, i32* @ecx, align 4
  %v2_100085c8 = add i32 %v1_100085c7, -8
  %v3_100085c8 = inttoptr i32 %v2_100085c8 to i32*
  store i32 %v0_100085c8, i32* %v3_100085c8, align 4
  %v1_100085c9 = add i32 %v1_100085c7, -12
  %v2_100085c9 = inttoptr i32 %v1_100085c9 to i32*
  store i32 ptrtoint ([36 x i8]* @global_var_100234c0.294 to i32), i32* %v2_100085c9, align 4
  %v0_100085ce = call i32 @Warning()
  %v0_100085d7 = load i32, i32* @esp, align 4
  %v3_100085da = add i32 %v0_100085d7, 16
  %v1_100085db = inttoptr i32 %v3_100085da to i32*
  %v2_100085db = load i32, i32* %v1_100085db, align 4
  store i32 %v2_100085db, i32* @esi, align 4
  %v3_100085db = add i32 %v0_100085d7, 20
  %v1_100085dc = inttoptr i32 %v3_100085db to i32*
  %v2_100085dc = load i32, i32* %v1_100085dc, align 4
  store i32 %v2_100085dc, i32* @ebx, align 4
  ret i32 %v3_10008539
}

define i32 @function_100085f0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100085f0:
  %stack_var_-8 = alloca i32, align 4
  %v0_100085f6 = load i32, i32* @global_var_1002b754.295, align 4
  store i32 %v0_100085f6, i32* @ecx, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v1_100085fd = inttoptr i32 %arg1 to i8*
  %v2_100085fd = call i32 @function_10008400(i8* %v1_100085fd)
  store i32 %arg2, i32* @ecx, align 4
  %v1_10008605 = icmp eq i32 %arg2, 0
  br i1 %v1_10008605, label %dec_label_pc_10008612, label %dec_label_pc_10008609

dec_label_pc_10008609:                            ; preds = %dec_label_pc_100085f0
  %v1_1000860b = icmp eq i32 %v2_100085fd, 0
  %v1_1000860d = zext i1 %v1_1000860b to i32
  %v2_10008610 = inttoptr i32 %arg2 to i32*
  store i32 %v1_1000860d, i32* %v2_10008610, align 4
  br label %dec_label_pc_10008612

dec_label_pc_10008612:                            ; preds = %dec_label_pc_10008609, %dec_label_pc_100085f0
  %v2_10008612 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10008612, i32* @ebp, align 4
  ret i32 %v2_100085fd
}

define i32 @function_10008620(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008620:
  ret i32 268469744
}

define i32 @function_10008630() local_unnamed_addr {
dec_label_pc_10008630:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10008630 = load i32, i32* @esi, align 4
  store i32 %v0_10008630, i32* %stack_var_-4, align 4
  %v0_10008631 = load i32, i32* @ecx, align 4
  store i32 %v0_10008631, i32* @esi, align 4
  store i32 %v0_10008631, i32* @global_var_1002b754.295, align 4
  %v1_10008639 = add i32 %v0_10008631, 96
  %v2_10008639 = inttoptr i32 %v1_10008639 to i32*
  %v3_10008639 = load i32, i32* %v2_10008639, align 4
  %v0_1000863c = load i32, i32* @edi, align 4
  store i32 %v0_1000863c, i32* %stack_var_-8, align 4
  store i32 %v3_10008639, i32* @0, align 4
  switch i32 %v3_10008639, label %dec_label_pc_10008649 [
    i32 0, label %dec_label_pc_100086a1
    i32 1, label %dec_label_pc_100086a1
    i32 2, label %dec_label_pc_100086a1
    i32 3, label %dec_label_pc_10008684
    i32 4, label %dec_label_pc_10008684
  ]

dec_label_pc_10008649:                            ; preds = %dec_label_pc_10008630
  store i32 7, i32* %v2_10008639, align 4
  %v0_10008657 = load i32, i32* @esi, align 4
  %v1_10008657 = add i32 %v0_10008657, 36
  %v2_10008657 = inttoptr i32 %v1_10008657 to i32*
  %v3_10008657 = load i32, i32* %v2_10008657, align 4
  %v1_1000865a = add i32 %v3_10008657, -1
  %v10_1000865a = icmp slt i32 %v1_1000865a, 0
  store i32 %v1_1000865a, i32* %edi.global-to-local, align 4
  %v1_1000865b = add i32 %v0_10008657, 96
  %v2_1000865b = inttoptr i32 %v1_1000865b to i32*
  store i32 8, i32* %v2_1000865b, align 4
  br i1 %v10_1000865a, label %dec_label_pc_10008649.dec_label_pc_10008674_crit_edge, label %dec_label_pc_10008664.preheader

dec_label_pc_10008649.dec_label_pc_10008674_crit_edge: ; preds = %dec_label_pc_10008649
  %v0_10008679.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10008674

dec_label_pc_10008664.preheader:                  ; preds = %dec_label_pc_10008649
  %v0_10008664.pre = load i32, i32* @esi, align 4
  %v1_10008667.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10008664 = add i32 %v0_10008664.pre, 24
  %v2_10008664 = inttoptr i32 %v1_10008664 to i32*
  br label %dec_label_pc_10008664

dec_label_pc_10008664:                            ; preds = %dec_label_pc_10008664.preheader, %dec_label_pc_10008664
  %v0_10008671 = phi i32 [ %v1_10008667.pre, %dec_label_pc_10008664.preheader ], [ %v1_10008671, %dec_label_pc_10008664 ]
  %v3_10008664 = load i32, i32* %v2_10008664, align 4
  %v2_10008667 = mul i32 %v0_10008671, 4
  %v3_10008667 = add i32 %v2_10008667, %v3_10008664
  %v4_10008667 = inttoptr i32 %v3_10008667 to i32*
  %v5_10008667 = load i32, i32* %v4_10008667, align 4
  store i32 %v5_10008667, i32* @ecx, align 4
  %v1_10008671 = add i32 %v0_10008671, -1
  %v10_10008671 = icmp slt i32 %v1_10008671, 0
  store i32 %v1_10008671, i32* %edi.global-to-local, align 4
  %v1_10008672 = icmp eq i1 %v10_10008671, false
  br i1 %v1_10008672, label %dec_label_pc_10008664, label %dec_label_pc_10008674.loopexit

dec_label_pc_10008674.loopexit:                   ; preds = %dec_label_pc_10008664
  br label %dec_label_pc_10008674

dec_label_pc_10008674:                            ; preds = %dec_label_pc_10008649.dec_label_pc_10008674_crit_edge, %dec_label_pc_10008674.loopexit
  %v0_10008679 = phi i32 [ %v0_10008679.pre, %dec_label_pc_10008649.dec_label_pc_10008674_crit_edge ], [ %v0_10008664.pre, %dec_label_pc_10008674.loopexit ]
  store i32 %v0_10008679, i32* @ecx, align 4
  %v1_1000867b = add i32 %v0_10008679, 96
  %v2_1000867b = inttoptr i32 %v1_1000867b to i32*
  store i32 9, i32* %v2_1000867b, align 4
  %v0_10008684.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10008684

dec_label_pc_10008684:                            ; preds = %dec_label_pc_10008674, %dec_label_pc_10008630, %dec_label_pc_10008630
  %v0_10008688 = phi i32 [ %v0_10008684.pre, %dec_label_pc_10008674 ], [ %v0_10008631, %dec_label_pc_10008630 ], [ %v0_10008631, %dec_label_pc_10008630 ]
  %v1_10008684 = add i32 %v0_10008688, 36
  %v2_10008684 = inttoptr i32 %v1_10008684 to i32*
  %v3_10008684 = load i32, i32* %v2_10008684, align 4
  %v1_10008687 = add i32 %v3_10008684, -1
  %v10_10008687 = icmp slt i32 %v1_10008687, 0
  store i32 %v1_10008687, i32* @edi, align 4
  %v1_10008688 = add i32 %v0_10008688, 96
  %v2_10008688 = inttoptr i32 %v1_10008688 to i32*
  store i32 10, i32* %v2_10008688, align 4
  %v0_100086a1.pre = load i32, i32* @esi, align 4
  br i1 %v10_10008687, label %dec_label_pc_100086a1, label %dec_label_pc_10008691.preheader

dec_label_pc_10008691.preheader:                  ; preds = %dec_label_pc_10008684
  %v1_10008694.pre = load i32, i32* @edi, align 4
  %v1_10008691 = add i32 %v0_100086a1.pre, 24
  %v2_10008691 = inttoptr i32 %v1_10008691 to i32*
  br label %dec_label_pc_10008691

dec_label_pc_10008691:                            ; preds = %dec_label_pc_10008691.preheader, %dec_label_pc_10008691
  %v0_1000869e = phi i32 [ %v1_10008694.pre, %dec_label_pc_10008691.preheader ], [ %v1_1000869e, %dec_label_pc_10008691 ]
  %v3_10008691 = load i32, i32* %v2_10008691, align 4
  store i32 %v3_10008691, i32* @ecx, align 4
  %v2_10008694 = mul i32 %v0_1000869e, 4
  %v3_10008694 = add i32 %v2_10008694, %v3_10008691
  %v4_10008694 = inttoptr i32 %v3_10008694 to i32*
  %v5_10008694 = load i32, i32* %v4_10008694, align 4
  store i32 %v5_10008694, i32* @ecx, align 4
  %v1_1000869e = add i32 %v0_1000869e, -1
  %v10_1000869e = icmp slt i32 %v1_1000869e, 0
  store i32 %v1_1000869e, i32* @edi, align 4
  %v1_1000869f = icmp eq i1 %v10_1000869e, false
  br i1 %v1_1000869f, label %dec_label_pc_10008691, label %dec_label_pc_100086a1.loopexit

dec_label_pc_100086a1.loopexit:                   ; preds = %dec_label_pc_10008691
  br label %dec_label_pc_100086a1

dec_label_pc_100086a1:                            ; preds = %dec_label_pc_10008684, %dec_label_pc_100086a1.loopexit, %dec_label_pc_10008630, %dec_label_pc_10008630, %dec_label_pc_10008630
  %v0_100086a1 = phi i32 [ %v0_100086a1.pre, %dec_label_pc_100086a1.loopexit ], [ %v0_10008631, %dec_label_pc_10008630 ], [ %v0_10008631, %dec_label_pc_10008630 ], [ %v0_10008631, %dec_label_pc_10008630 ], [ %v0_100086a1.pre, %dec_label_pc_10008684 ]
  %v1_100086a1 = add i32 %v0_100086a1, 96
  %v2_100086a1 = inttoptr i32 %v1_100086a1 to i32*
  store i32 11, i32* %v2_100086a1, align 4
  %v0_100086a8 = load i32, i32* @esi, align 4
  %v1_100086a8 = add i32 %v0_100086a8, 64
  store i32 %v1_100086a8, i32* @ecx, align 4
  %v1_100086ab = add i32 %v0_100086a8, 36
  %v2_100086ab = inttoptr i32 %v1_100086ab to i32*
  store i32 0, i32* %v2_100086ab, align 4
  %v0_100086b2 = call i32 @function_10004370()
  %v0_100086b7 = call i32 @LoggingSystem_ResetCurrentLoggingState()
  %v0_100086bd = load i32, i32* bitcast (i32*** @global_var_100281cc.298 to i32*), align 4
  store i32 %v0_100086bd, i32* @ecx, align 4
  %v4_100086c3 = inttoptr i32 %v0_100086bd to i32**
  %v3_100086c4 = call i32 @LoggingSystem_RegisterLoggingListener(i32** %v4_100086c3)
  store i32 %v3_100086c4, i32* @eax, align 4
  %v0_100086cd = load i32, i32* @esi, align 4
  store i32 %v0_100086cd, i32* @ecx, align 4
  %v0_100086cf = call i32 @function_10007780()
  %v2_100086d4 = load i32, i32* @ecx, align 4
  %v1_100086d6 = add i32 %v2_100086d4, 24
  %v2_100086d6 = inttoptr i32 %v1_100086d6 to i32*
  %v3_100086d6 = load i32, i32* %v2_100086d6, align 4
  %v2_100086d9 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_100086d9, i32* @edi, align 4
  %v0_100086da = load i32, i32* @esi, align 4
  store i32 %v0_100086da, i32* @ecx, align 4
  %v2_100086dc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100086dc, i32* @esi, align 4
  ret i32 %v3_100086d6
}

define i32 @function_10008700(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008700:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10008700 = load i32, i32* @ebp, align 4
  store i32 %v0_10008700, i32* %stack_var_-4, align 4
  %v4_10008700 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008700, i32* @ebp, align 4
  %v0_10008706 = load i32, i32* @ebx, align 4
  %v0_1000870a = load i32, i32* @esi, align 4
  %v0_1000870b = load i32, i32* @edi, align 4
  %v0_1000870c = load i32, i32* @ecx, align 4
  store i32 %v0_1000870c, i32* @esi, align 4
  store i32 65535, i32* %stack_var_-12, align 4
  store i8 0, i8* %stack_var_-8, align 1
  %v4_10008724 = bitcast i8* %stack_var_-8 to i32*
  %v13_10008724 = call i32 @function_100073b0(i32 %arg1, i32* nonnull %stack_var_-12, i32* %v4_10008724, i32 %v0_1000870b, i32 %v0_1000870a, i32 %v0_10008706, i32 65535, i8 0, i32 %v0_10008700)
  %v0_10008729 = load i32, i32* @esi, align 4
  store i32 %v0_10008729, i32* @ecx, align 4
  %v0_1000872b = call i32 @function_100074a0()
  %v3_10008730 = load i8, i8* %stack_var_-8, align 1
  %v4_10008730 = sext i8 %v3_10008730 to i32
  store i32 %v4_10008730, i32* @edx, align 4
  %v1_10008733 = and i32 %v0_1000872b, 65535
  store i32 %v1_10008733, i32* @edi, align 4
  %v3_10008736 = load i32, i32* %stack_var_-12, align 4
  %v0_1000873c = load i32, i32* @esi, align 4
  store i32 %v0_1000873c, i32* @ecx, align 4
  %v3_1000873e = call i32 @function_100081e0(i32 %v1_10008733, i32 %v3_10008736, i32 %v4_10008730)
  %v0_10008743 = load i32, i32* @esi, align 4
  %v1_10008743 = add i32 %v0_10008743, 4
  %v2_10008743 = inttoptr i32 %v1_10008743 to i32*
  %v3_10008743 = load i32, i32* %v2_10008743, align 4
  store i32 %v3_10008743, i32* %edx.global-to-local, align 4
  %v1_10008746 = add i32 %v0_10008743, 18
  %v2_10008746 = inttoptr i32 %v1_10008746 to i16*
  %v3_10008746 = load i16, i16* %v2_10008746, align 2
  %v4_10008746 = add i16 %v3_10008746, 1
  store i16 %v4_10008746, i16* %v2_10008746, align 2
  %v0_1000874a = load i32, i32* @edi, align 4
  %v2_1000874c = mul i32 %v0_1000874a, 2
  store i32 %v2_1000874c, i32* @ecx, align 4
  %v0_1000874e = load i32, i32* %edx.global-to-local, align 4
  %v2_1000874e = mul i32 %v0_1000874a, 16
  %v3_1000874e = or i32 %v2_1000874e, 8
  %v4_1000874e = add i32 %v3_1000874e, %v0_1000874e
  %v1_10008752 = icmp eq i32 %v4_1000874e, 0
  br i1 %v1_10008752, label %dec_label_pc_10008760, label %dec_label_pc_10008756

dec_label_pc_10008756:                            ; preds = %dec_label_pc_10008700
  %v0_10008756 = load i32, i32* @ebx, align 4
  %v1_10008756 = inttoptr i32 %v0_10008756 to i32*
  %v2_10008756 = load i32, i32* %v1_10008756, align 4
  store i32 %v2_10008756, i32* @ecx, align 4
  %v2_10008758 = inttoptr i32 %v4_1000874e to i32*
  store i32 %v2_10008756, i32* %v2_10008758, align 4
  %v0_1000875a = load i32, i32* @ebx, align 4
  %v1_1000875a = add i32 %v0_1000875a, 4
  %v2_1000875a = inttoptr i32 %v1_1000875a to i32*
  %v3_1000875a = load i32, i32* %v2_1000875a, align 4
  store i32 %v3_1000875a, i32* %edx.global-to-local, align 4
  %v2_1000875d = add i32 %v4_1000874e, 4
  %v3_1000875d = inttoptr i32 %v2_1000875d to i32*
  store i32 %v3_1000875a, i32* %v3_1000875d, align 4
  %v0_10008760.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10008760

dec_label_pc_10008760:                            ; preds = %dec_label_pc_10008756, %dec_label_pc_10008700
  %v0_10008760 = phi i32 [ %v0_10008760.pre, %dec_label_pc_10008756 ], [ %v0_1000874a, %dec_label_pc_10008700 ]
  %v1_10008760 = and i32 %v0_10008760, 65535
  %v3_10008760 = and i32 %v4_1000874e, -65536
  %v4_10008760 = or i32 %v1_10008760, %v3_10008760
  %v2_10008768 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10008768, i32* @ebp, align 4
  ret i32 %v4_10008760
}

define i32 @function_10008770(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10008770:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10008774 = load i32, i32* @ecx, align 4
  store i32 %v0_10008774, i32* %esi.global-to-local, align 4
  %v1_10008776 = inttoptr i32 %v0_10008774 to i32*
  store i32 ptrtoint (i32* @global_var_100234f4.299 to i32), i32* %v1_10008776, align 4
  %v0_1000877c = load i32, i32* @edi, align 4
  store i32 %v0_1000877c, i32* %stack_var_-12, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v1_1000877f = load i32, i32* %esi.global-to-local, align 4
  %v2_1000877f = add i32 %v1_1000877f, 4
  %v3_1000877f = inttoptr i32 %v2_1000877f to i32*
  store i32 0, i32* %v3_1000877f, align 4
  %v0_10008782 = load i32, i32* %edi.global-to-local, align 4
  %v1_10008782 = load i32, i32* %esi.global-to-local, align 4
  %v2_10008782 = add i32 %v1_10008782, 8
  %v3_10008782 = inttoptr i32 %v2_10008782 to i32*
  store i32 %v0_10008782, i32* %v3_10008782, align 4
  %v0_10008785 = load i32, i32* %edi.global-to-local, align 4
  %v1_10008785 = load i32, i32* %esi.global-to-local, align 4
  %v2_10008785 = add i32 %v1_10008785, 12
  %v3_10008785 = inttoptr i32 %v2_10008785 to i32*
  store i32 %v0_10008785, i32* %v3_10008785, align 4
  %v0_10008788 = load i32, i32* %edi.global-to-local, align 4
  %v1_10008788 = load i32, i32* %esi.global-to-local, align 4
  %v2_10008788 = add i32 %v1_10008788, 16
  %v3_10008788 = inttoptr i32 %v2_10008788 to i32*
  store i32 %v0_10008788, i32* %v3_10008788, align 4
  %v0_1000878b = load i32, i32* %edi.global-to-local, align 4
  %v1_1000878b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000878b = add i32 %v1_1000878b, 20
  %v3_1000878b = inttoptr i32 %v2_1000878b to i32*
  store i32 %v0_1000878b, i32* %v3_1000878b, align 4
  %v0_1000878e = load i32, i32* %edi.global-to-local, align 4
  %v1_1000878e = load i32, i32* %esi.global-to-local, align 4
  %v2_1000878e = add i32 %v1_1000878e, 24
  %v3_1000878e = inttoptr i32 %v2_1000878e to i32*
  store i32 %v0_1000878e, i32* %v3_1000878e, align 4
  %v0_10008791 = load i32, i32* %edi.global-to-local, align 4
  %v1_10008791 = load i32, i32* %esi.global-to-local, align 4
  %v2_10008791 = add i32 %v1_10008791, 28
  %v3_10008791 = inttoptr i32 %v2_10008791 to i32*
  store i32 %v0_10008791, i32* %v3_10008791, align 4
  %v0_10008794 = load i32, i32* %edi.global-to-local, align 4
  %v1_10008794 = load i32, i32* %esi.global-to-local, align 4
  %v2_10008794 = add i32 %v1_10008794, 32
  %v3_10008794 = inttoptr i32 %v2_10008794 to i32*
  store i32 %v0_10008794, i32* %v3_10008794, align 4
  %v0_10008797 = load i32, i32* %edi.global-to-local, align 4
  %v1_10008797 = load i32, i32* %esi.global-to-local, align 4
  %v2_10008797 = add i32 %v1_10008797, 36
  %v3_10008797 = inttoptr i32 %v2_10008797 to i32*
  store i32 %v0_10008797, i32* %v3_10008797, align 4
  %v0_1000879a = load i32, i32* %edi.global-to-local, align 4
  %v1_1000879a = load i32, i32* %esi.global-to-local, align 4
  %v2_1000879a = add i32 %v1_1000879a, 40
  %v3_1000879a = inttoptr i32 %v2_1000879a to i32*
  store i32 %v0_1000879a, i32* %v3_1000879a, align 4
  %v0_1000879d = load i32, i32* %edi.global-to-local, align 4
  %v1_1000879d = load i32, i32* %esi.global-to-local, align 4
  %v2_1000879d = add i32 %v1_1000879d, 44
  %v3_1000879d = inttoptr i32 %v2_1000879d to i32*
  store i32 %v0_1000879d, i32* %v3_1000879d, align 4
  %v0_100087a0 = load i32, i32* %edi.global-to-local, align 4
  %v1_100087a0 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087a0 = add i32 %v1_100087a0, 48
  %v3_100087a0 = inttoptr i32 %v2_100087a0 to i32*
  store i32 %v0_100087a0, i32* %v3_100087a0, align 4
  %v0_100087a3 = load i32, i32* %edi.global-to-local, align 4
  %v1_100087a3 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087a3 = add i32 %v1_100087a3, 52
  %v3_100087a3 = inttoptr i32 %v2_100087a3 to i32*
  store i32 %v0_100087a3, i32* %v3_100087a3, align 4
  %v0_100087a6 = load i32, i32* %edi.global-to-local, align 4
  %v1_100087a6 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087a6 = add i32 %v1_100087a6, 56
  %v3_100087a6 = inttoptr i32 %v2_100087a6 to i32*
  store i32 %v0_100087a6, i32* %v3_100087a6, align 4
  %v0_100087a9 = load i32, i32* %edi.global-to-local, align 4
  %v1_100087a9 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087a9 = add i32 %v1_100087a9, 60
  %v3_100087a9 = inttoptr i32 %v2_100087a9 to i32*
  store i32 %v0_100087a9, i32* %v3_100087a9, align 4
  %v0_100087ac = load i32, i32* %edi.global-to-local, align 4
  %v1_100087ac = load i32, i32* %esi.global-to-local, align 4
  %v2_100087ac = add i32 %v1_100087ac, 64
  %v3_100087ac = inttoptr i32 %v2_100087ac to i32*
  store i32 %v0_100087ac, i32* %v3_100087ac, align 4
  %v0_100087af = load i32, i32* %edi.global-to-local, align 4
  %v1_100087af = load i32, i32* %esi.global-to-local, align 4
  %v2_100087af = add i32 %v1_100087af, 68
  %v3_100087af = inttoptr i32 %v2_100087af to i32*
  store i32 %v0_100087af, i32* %v3_100087af, align 4
  %v0_100087b2 = load i32, i32* %esi.global-to-local, align 4
  %v1_100087b2 = add i32 %v0_100087b2, 72
  %v2_100087b2 = inttoptr i32 %v1_100087b2 to i32*
  store i32 16, i32* %v2_100087b2, align 4
  %v0_100087b9 = load i32, i32* %edi.global-to-local, align 4
  %v1_100087b9 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087b9 = add i32 %v1_100087b9, 76
  %v3_100087b9 = inttoptr i32 %v2_100087b9 to i32*
  store i32 %v0_100087b9, i32* %v3_100087b9, align 4
  %v0_100087bc = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_100087bc, i32* %eax.global-to-local, align 4
  %v1_100087c1 = inttoptr i32 %v0_100087bc to i32*
  %v2_100087c1 = load i32, i32* %v1_100087c1, align 4
  store i32 %v2_100087c1, i32* @ecx, align 4
  %v1_100087c3 = inttoptr i32 %v2_100087c1 to i32*
  %v2_100087c3 = load i32, i32* %v1_100087c3, align 4
  store i32 %v2_100087c3, i32* %edx.global-to-local, align 4
  %v1_100087c5 = add i32 %v2_100087c3, 4
  %v2_100087c5 = inttoptr i32 %v1_100087c5 to i32*
  %v3_100087c5 = load i32, i32* %v2_100087c5, align 4
  store i32 %v3_100087c5, i32* %eax.global-to-local, align 4
  store i32 256, i32* %stack_var_-16, align 4
  %v1_100087cf = load i32, i32* %esi.global-to-local, align 4
  %v2_100087cf = add i32 %v1_100087cf, 68
  %v3_100087cf = inttoptr i32 %v2_100087cf to i32*
  store i32 %v3_100087c5, i32* %v3_100087cf, align 4
  %v0_100087d2 = load i32, i32* %esi.global-to-local, align 4
  %v1_100087d2 = add i32 %v0_100087d2, 68
  %v2_100087d2 = inttoptr i32 %v1_100087d2 to i32*
  %v3_100087d2 = load i32, i32* %v2_100087d2, align 4
  store i32 %v3_100087d2, i32* %edx.global-to-local, align 4
  %v1_100087d5 = add i32 %v0_100087d2, 80
  %v2_100087d5 = inttoptr i32 %v1_100087d5 to i32*
  store i32 65535, i32* %v2_100087d5, align 4
  %v0_100087dc = load i32, i32* %esi.global-to-local, align 4
  %v1_100087dc = add i32 %v0_100087dc, 84
  %v2_100087dc = inttoptr i32 %v1_100087dc to i32*
  store i32 -1, i32* %v2_100087dc, align 4
  %v0_100087e3 = load i32, i32* %edx.global-to-local, align 4
  %v1_100087e3 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087e3 = add i32 %v1_100087e3, 88
  %v3_100087e3 = inttoptr i32 %v2_100087e3 to i32*
  store i32 %v0_100087e3, i32* %v3_100087e3, align 4
  %v0_100087e6 = load i32, i32* %esi.global-to-local, align 4
  %v1_100087e6 = add i32 %v0_100087e6, 64
  %v2_100087e6 = inttoptr i32 %v1_100087e6 to i32*
  %v3_100087e6 = load i32, i32* %v2_100087e6, align 4
  %v4_100087e6 = load i32, i32* %edi.global-to-local, align 4
  %v15_100087e6 = icmp eq i32 %v3_100087e6, %v4_100087e6
  %v1_100087e9 = icmp eq i1 %v15_100087e6, false
  br i1 %v1_100087e9, label %dec_label_pc_10008800, label %dec_label_pc_100087eb

dec_label_pc_100087eb:                            ; preds = %dec_label_pc_10008770
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 268464176, i32* %v2_100087e6, align 4
  %v0_100087f5 = load i32, i32* %eax.global-to-local, align 4
  %v1_100087f5 = load i32, i32* %esi.global-to-local, align 4
  %v2_100087f5 = add i32 %v1_100087f5, 92
  %v3_100087f5 = inttoptr i32 %v2_100087f5 to i32*
  store i32 %v0_100087f5, i32* %v3_100087f5, align 4
  %v2_100087f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_100087f8, i32* @edi, align 4
  %v0_100087f9 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100087f9, i32* %eax.global-to-local, align 4
  %v2_100087fb = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100087fb, i32* @esi, align 4
  ret i32 %v0_100087f9

dec_label_pc_10008800:                            ; preds = %dec_label_pc_10008770
  store i32 %arg1, i32* @ecx, align 4
  %v2_10008803 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10008803, i32* @edi, align 4
  %v2_10008804 = add i32 %v0_100087e6, 92
  %v3_10008804 = inttoptr i32 %v2_10008804 to i32*
  store i32 %arg1, i32* %v3_10008804, align 4
  %v0_10008807 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10008807, i32* %eax.global-to-local, align 4
  %v2_10008809 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10008809, i32* @esi, align 4
  ret i32 %v0_10008807
}

define i32 @function_10008810(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008810:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-14 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v0_10008816 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v0_1000881a = load i32, i32* @esi, align 4
  store i32 %v0_1000881a, i32* %stack_var_-48, align 4
  %v1_1000881b = add i32 %arg1, 38
  %v2_1000881b = inttoptr i32 %v1_1000881b to i16*
  %v3_1000881b = load i16, i16* %v2_1000881b, align 2
  %v4_1000881b = zext i16 %v3_1000881b to i32
  store i32 %v4_1000881b, i32* @esi, align 4
  %v1_1000881f = mul nuw nsw i32 %v4_1000881b, 4
  %v2_1000881f = add nuw nsw i32 %v1_1000881f, 15
  %v0_10008826 = load i32, i32* @edi, align 4
  store i32 %v0_10008826, i32* %stack_var_-52, align 4
  %v4_10008826 = ptrtoint i32* %stack_var_-52 to i32
  %v1_10008827 = and i32 %v2_1000881f, 1048560
  store i32 %v1_10008827, i32* %eax.global-to-local, align 4
  %v0_1000882a = load i32, i32* @ecx, align 4
  %v0_10008830 = call i32 @__alloca_probe_16()
  store i32 %v4_10008826, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_1000883c = load i32, i32* @esi, align 4
  %tmp74 = icmp slt i32 %v0_1000883c, 1
  br i1 %tmp74, label %dec_label_pc_10008848, label %dec_label_pc_10008840.preheader

dec_label_pc_10008840.preheader:                  ; preds = %dec_label_pc_10008810
  store i32 0, i32* %stack_var_-52, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v5_1000884691 = icmp eq i32 %v0_1000883c, 1
  br i1 %v5_1000884691, label %dec_label_pc_10008848.loopexit, label %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge

dec_label_pc_10008840.dec_label_pc_10008840_crit_edge: ; preds = %dec_label_pc_10008840.preheader, %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge.dec_label_pc_10008840.dec_label_pc_10008840_crit_edge_crit_edge
  %v1_10008840.pre = phi i32 [ %v1_10008840.pre.pre, %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge.dec_label_pc_10008840.dec_label_pc_10008840_crit_edge_crit_edge ], [ %v4_10008826, %dec_label_pc_10008840.preheader ]
  %v1_1000884392 = phi i32 [ %v1_10008843, %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge.dec_label_pc_10008840.dec_label_pc_10008840_crit_edge_crit_edge ], [ 1, %dec_label_pc_10008840.preheader ]
  %v3_10008840 = mul i32 %v1_1000884392, 4
  %v4_10008840 = add i32 %v3_10008840, %v1_10008840.pre
  %v5_10008840 = inttoptr i32 %v4_10008840 to i32*
  store i32 %v1_1000884392, i32* %v5_10008840, align 4
  %v0_10008843 = load i32, i32* %eax.global-to-local, align 4
  %v1_10008843 = add i32 %v0_10008843, 1
  store i32 %v1_10008843, i32* %eax.global-to-local, align 4
  %v1_10008844 = load i32, i32* @esi, align 4
  %v5_10008846 = icmp slt i32 %v1_10008843, %v1_10008844
  br i1 %v5_10008846, label %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge.dec_label_pc_10008840.dec_label_pc_10008840_crit_edge_crit_edge, label %dec_label_pc_10008840.dec_label_pc_10008848.loopexit_crit_edge

dec_label_pc_10008840.dec_label_pc_10008840_crit_edge.dec_label_pc_10008840.dec_label_pc_10008840_crit_edge_crit_edge: ; preds = %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge
  %v1_10008840.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge

dec_label_pc_10008840.dec_label_pc_10008848.loopexit_crit_edge: ; preds = %dec_label_pc_10008840.dec_label_pc_10008840_crit_edge
  br label %dec_label_pc_10008848.loopexit

dec_label_pc_10008848.loopexit:                   ; preds = %dec_label_pc_10008840.preheader, %dec_label_pc_10008840.dec_label_pc_10008848.loopexit_crit_edge
  %v1_10008844.lcssa = phi i32 [ %v1_10008844, %dec_label_pc_10008840.dec_label_pc_10008848.loopexit_crit_edge ], [ 1, %dec_label_pc_10008840.preheader ]
  br label %dec_label_pc_10008848

dec_label_pc_10008848:                            ; preds = %dec_label_pc_10008848.loopexit, %dec_label_pc_10008810
  %v0_1000885a11 = phi i32 [ %v1_10008844.lcssa, %dec_label_pc_10008848.loopexit ], [ %v0_1000883c, %dec_label_pc_10008810 ]
  %v0_10008848 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_10008848, i32* @global_var_1002b750.300, align 4
  %v2_100088ac = ptrtoint i32* %stack_var_-12 to i32
  %v2_100088e7 = ptrtoint i32* %stack_var_-14 to i32
  br label %dec_label_pc_1000884e

dec_label_pc_1000884e:                            ; preds = %dec_label_pc_10008931, %dec_label_pc_10008848
  %v0_1000885a = phi i32 [ %v1_10008929, %dec_label_pc_10008931 ], [ %v0_1000885a11, %dec_label_pc_10008848 ]
  store i32 1, i32* %eax.global-to-local, align 4
  %v7_1000885c = icmp sgt i32 %v0_1000885a, 1
  br i1 %v7_1000885c, label %dec_label_pc_10008862, label %dec_label_pc_1000893b

dec_label_pc_10008862:                            ; preds = %dec_label_pc_1000884e
  %v0_10008862 = load i32, i32* @edi, align 4
  %v1_10008862 = add i32 %v0_10008862, 4
  store i32 %v1_10008862, i32* @ecx, align 4
  br label %dec_label_pc_10008868

dec_label_pc_10008868:                            ; preds = %dec_label_pc_10008921, %dec_label_pc_10008862
  %v1_1000892914 = phi i32 [ %v0_1000885a, %dec_label_pc_10008862 ], [ %v1_10008929, %dec_label_pc_10008921 ]
  %stack_var_-5.0 = phi i8 [ 0, %dec_label_pc_10008862 ], [ %stack_var_-5.3, %dec_label_pc_10008921 ]
  %v0_10008925 = phi i32 [ 1, %dec_label_pc_10008862 ], [ %v1_10008925, %dec_label_pc_10008921 ]
  %stack_var_-20.0.in = phi i32 [ %v1_10008862, %dec_label_pc_10008862 ], [ %v5_10008921, %dec_label_pc_10008921 ]
  %stack_var_-20.0 = inttoptr i32 %stack_var_-20.0.in to i16*
  store i32 0, i32* @ebx, align 4
  %tmp76 = icmp slt i32 %v0_10008925, 1
  br i1 %tmp76, label %dec_label_pc_10008921, label %dec_label_pc_10008872.preheader

dec_label_pc_10008872.preheader:                  ; preds = %dec_label_pc_10008868
  %v1_10008903 = inttoptr i32 %stack_var_-20.0.in to i32*
  br label %dec_label_pc_10008872

dec_label_pc_10008872:                            ; preds = %dec_label_pc_10008872.preheader, %dec_label_pc_1000890e
  %stack_var_-5.1 = phi i8 [ %stack_var_-5.2, %dec_label_pc_1000890e ], [ %stack_var_-5.0, %dec_label_pc_10008872.preheader ]
  store i32 %stack_var_-20.0.in, i32* %edx.global-to-local, align 4
  %v2_10008875 = load i16, i16* %stack_var_-20.0, align 2
  %v3_10008875 = zext i16 %v2_10008875 to i32
  store i32 %v3_10008875, i32* %edx.global-to-local, align 4
  %v0_10008878 = load i32, i32* @global_var_1002b750.300, align 4
  store i32 %v0_10008878, i32* @eax, align 4
  %v0_1000887d = load i32, i32* @ecx, align 4
  %v1_1000887d = load i32, i32* @esp, align 4
  %v2_1000887d = add i32 %v1_1000887d, -4
  %v3_1000887d = inttoptr i32 %v2_1000887d to i32*
  store i32 %v0_1000887d, i32* %v3_1000887d, align 4
  %v0_10008880 = load i32, i32* %edx.global-to-local, align 4
  %v1_10008880 = trunc i32 %v0_10008880 to i16
  %v3_10008880 = inttoptr i32 %v2_1000887d to i16*
  store i16 %v1_10008880, i16* %v3_10008880, align 2
  %v0_10008883 = load i32, i32* @eax, align 4
  %v1_10008883 = add i32 %v0_10008883, 20
  store i32 %v1_10008883, i32* @ecx, align 4
  %v1_10008886 = call i32 @function_1000e5b0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10008886, i32* %eax.global-to-local, align 4
  %v0_1000888b = load i32, i32* @edi, align 4
  %v1_1000888b = load i32, i32* @ebx, align 4
  %v2_1000888b = mul i32 %v1_1000888b, 4
  %v3_1000888b = add i32 %v2_1000888b, %v0_1000888b
  %v4_1000888b = inttoptr i32 %v3_1000888b to i16*
  %v5_1000888b = load i16, i16* %v4_1000888b, align 2
  %v6_1000888b = zext i16 %v5_1000888b to i32
  store i32 %v6_1000888b, i32* %edx.global-to-local, align 4
  %v0_1000888f = load i32, i32* @ecx, align 4
  %v1_1000888f = load i32, i32* @esp, align 4
  %v2_1000888f = add i32 %v1_1000888f, -4
  %v3_1000888f = inttoptr i32 %v2_1000888f to i32*
  store i32 %v0_1000888f, i32* %v3_1000888f, align 4
  %v0_10008892 = load i32, i32* %eax.global-to-local, align 4
  %v0_10008895 = load i32, i32* @global_var_1002b750.300, align 4
  store i32 %v0_10008895, i32* @eax, align 4
  %v0_1000889a = load i32, i32* %edx.global-to-local, align 4
  %v1_1000889a = trunc i32 %v0_1000889a to i16
  %v3_1000889a = inttoptr i32 %v2_1000888f to i16*
  store i16 %v1_1000889a, i16* %v3_1000889a, align 2
  %v0_1000889d = load i32, i32* @eax, align 4
  %v1_1000889d = add i32 %v0_1000889d, 20
  store i32 %v1_1000889d, i32* @ecx, align 4
  %v1_100088a0 = call i32 @function_1000e5b0(i32 %v0_10008892)
  %v0_100088a5 = load i32, i32* @global_var_1002b750.300, align 4
  store i32 %v0_100088a5, i32* @edi, align 4
  %v1_100088ab = load i32, i32* @esp, align 4
  %v2_100088ab = add i32 %v1_100088ab, -4
  %v3_100088ab = inttoptr i32 %v2_100088ab to i32*
  store i32 %v1_100088a0, i32* %v3_100088ab, align 4
  store i32 %v2_100088ac, i32* %eax.global-to-local, align 4
  %v2_100088af = add i32 %v1_100088ab, -8
  %v3_100088af = inttoptr i32 %v2_100088af to i32*
  store i32 %v2_100088ac, i32* %v3_100088af, align 4
  %v0_100088b0 = load i32, i32* @edi, align 4
  %v1_100088b0 = add i32 %v0_100088b0, 20
  store i32 %v1_100088b0, i32* @ecx, align 4
  %v2_100088b3 = call i32 @function_1000f030(i8 ptrtoint (i32* @5 to i8), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100088b3, i32* %eax.global-to-local, align 4
  %v3_100088b8 = load i32, i32* %stack_var_-12, align 4
  %v4_100088b8 = and i32 %v3_100088b8, 65535
  store i32 %v4_100088b8, i32* @esi, align 4
  %v0_100088bc = load i32, i32* @edi, align 4
  %v1_100088bc = add i32 %v0_100088bc, 12
  %v2_100088bc = inttoptr i32 %v1_100088bc to i32*
  %v3_100088bc = load i32, i32* %v2_100088bc, align 4
  store i32 %v3_100088bc, i32* %eax.global-to-local, align 4
  %v8_100088c1 = icmp sgt i32 %v3_100088bc, %v4_100088b8
  br i1 %v8_100088c1, label %dec_label_pc_100088d5, label %dec_label_pc_100088ca

dec_label_pc_100088ca:                            ; preds = %dec_label_pc_10008872
  %v1_100088c3 = add nuw nsw i32 %v4_100088b8, 1
  %v2_100088ca = sub i32 %v1_100088c3, %v3_100088bc
  %v1_100088cc = load i32, i32* @esp, align 4
  %v2_100088cc = add i32 %v1_100088cc, -4
  %v3_100088cc = inttoptr i32 %v2_100088cc to i32*
  store i32 %v2_100088ca, i32* %v3_100088cc, align 4
  %v0_100088cd = load i32, i32* %eax.global-to-local, align 4
  %v2_100088cd = add i32 %v1_100088cc, -8
  %v3_100088cd = inttoptr i32 %v2_100088cd to i32*
  store i32 %v0_100088cd, i32* %v3_100088cd, align 4
  %v0_100088ce = load i32, i32* @edi, align 4
  store i32 %v0_100088ce, i32* @ecx, align 4
  %v2_100088d0 = call i32 @function_10007ae0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100088d0, i32* %eax.global-to-local, align 4
  %v0_100088d5.pre = load i32, i32* @edi, align 4
  %v0_100088da.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100088d5

dec_label_pc_100088d5:                            ; preds = %dec_label_pc_100088ca, %dec_label_pc_10008872
  %v0_100088da = phi i32 [ %v0_100088da.pre, %dec_label_pc_100088ca ], [ %v4_100088b8, %dec_label_pc_10008872 ]
  %v0_100088d5 = phi i32 [ %v0_100088d5.pre, %dec_label_pc_100088ca ], [ %v0_100088bc, %dec_label_pc_10008872 ]
  %v1_100088d5 = inttoptr i32 %v0_100088d5 to i32*
  %v2_100088d5 = load i32, i32* %v1_100088d5, align 4
  store i32 %v0_10008892, i32* %eax.global-to-local, align 4
  %v2_100088e3 = mul i32 %v0_100088da, 56
  %v3_100088e3 = add i32 %v2_100088d5, %v2_100088e3
  store i32 %v3_100088e3, i32* @ecx, align 4
  %v1_100088e6 = load i32, i32* @esp, align 4
  %v2_100088e6 = add i32 %v1_100088e6, -4
  %v3_100088e6 = inttoptr i32 %v2_100088e6 to i32*
  store i32 %v0_10008892, i32* %v3_100088e6, align 4
  store i32 %v2_100088e7, i32* %edx.global-to-local, align 4
  %v2_100088ea = add i32 %v1_100088e6, -8
  %v3_100088ea = inttoptr i32 %v2_100088ea to i32*
  store i32 %v2_100088e7, i32* %v3_100088ea, align 4
  %v2_100088eb = call i32 @function_1000ed60(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100088eb, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_100088f5 = inttoptr i32 %v2_100088eb to i16*
  %v2_100088f5 = load i16, i16* %v1_100088f5, align 2
  %v15_100088f5 = icmp eq i16 %v2_100088f5, -1
  br i1 %v15_100088f5, label %dec_label_pc_1000890e, label %dec_label_pc_100088fa

dec_label_pc_100088fa:                            ; preds = %dec_label_pc_100088d5
  store i32 %v4_10008826, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-20.0.in, i32* @ecx, align 4
  %v1_10008900 = load i32, i32* @ebx, align 4
  %v2_10008900 = mul i32 %v1_10008900, 4
  %v3_10008900 = add i32 %v2_10008900, %v4_10008826
  %v4_10008900 = inttoptr i32 %v3_10008900 to i32*
  %v5_10008900 = load i32, i32* %v4_10008900, align 4
  store i32 %v5_10008900, i32* @esi, align 4
  %v2_10008903 = load i32, i32* %v1_10008903, align 4
  store i32 %v2_10008903, i32* %eax.global-to-local, align 4
  store i32 %v5_10008900, i32* %v1_10008903, align 4
  %v0_10008907 = load i32, i32* %eax.global-to-local, align 4
  %v1_10008907 = load i32, i32* %edx.global-to-local, align 4
  %v2_10008907 = load i32, i32* @ebx, align 4
  %v3_10008907 = mul i32 %v2_10008907, 4
  %v4_10008907 = add i32 %v3_10008907, %v1_10008907
  %v5_10008907 = inttoptr i32 %v4_10008907 to i32*
  store i32 %v0_10008907, i32* %v5_10008907, align 4
  br label %dec_label_pc_1000890e

dec_label_pc_1000890e:                            ; preds = %dec_label_pc_100088fa, %dec_label_pc_100088d5
  %stack_var_-5.2 = phi i8 [ %stack_var_-5.1, %dec_label_pc_100088d5 ], [ 1, %dec_label_pc_100088fa ]
  store i32 %v4_10008826, i32* @edi, align 4
  %v0_10008911 = load i32, i32* @ebx, align 4
  %v1_10008911 = add i32 %v0_10008911, 1
  store i32 %v1_10008911, i32* @ebx, align 4
  %v5_10008915 = icmp slt i32 %v1_10008911, %v0_10008925
  br i1 %v5_10008915, label %dec_label_pc_10008872, label %dec_label_pc_1000891b

dec_label_pc_1000891b:                            ; preds = %dec_label_pc_1000890e
  store i32 %v0_10008925, i32* %eax.global-to-local, align 4
  store i32 %v4_1000881b, i32* @esi, align 4
  br label %dec_label_pc_10008921

dec_label_pc_10008921:                            ; preds = %dec_label_pc_10008868, %dec_label_pc_1000891b
  %v1_10008929 = phi i32 [ %v4_1000881b, %dec_label_pc_1000891b ], [ %v1_1000892914, %dec_label_pc_10008868 ]
  %stack_var_-5.3 = phi i8 [ %stack_var_-5.2, %dec_label_pc_1000891b ], [ %stack_var_-5.0, %dec_label_pc_10008868 ]
  %v5_10008921 = add i32 %stack_var_-20.0.in, 4
  %v1_10008925 = add i32 %v0_10008925, 1
  store i32 %v1_10008925, i32* %eax.global-to-local, align 4
  %v5_1000892b = icmp slt i32 %v1_10008925, %v1_10008929
  br i1 %v5_1000892b, label %dec_label_pc_10008868, label %dec_label_pc_10008931

dec_label_pc_10008931:                            ; preds = %dec_label_pc_10008921
  %v10_10008931 = icmp eq i8 %stack_var_-5.3, 0
  %v1_10008935 = icmp eq i1 %v10_10008931, false
  br i1 %v1_10008935, label %dec_label_pc_1000884e, label %dec_label_pc_1000893b

dec_label_pc_1000893b:                            ; preds = %dec_label_pc_1000884e, %dec_label_pc_10008931
  %v0_1000894e17 = phi i32 [ %v0_1000885a, %dec_label_pc_1000884e ], [ %v1_10008929, %dec_label_pc_10008931 ]
  store i32 0, i32* @global_var_1002b750.300, align 4
  %v1_100089a2 = add i32 %arg1, 12
  %v2_100089a2 = inttoptr i32 %v1_100089a2 to i32*
  %v1_100089bc = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_10008945

dec_label_pc_10008945:                            ; preds = %dec_label_pc_100089ff, %dec_label_pc_1000893b
  %v0_1000894e = phi i32 [ %v1_100089f7, %dec_label_pc_100089ff ], [ %v0_1000894e17, %dec_label_pc_1000893b ]
  store i32 1, i32* @ebx, align 4
  %v7_10008950 = icmp sgt i32 %v0_1000894e, 1
  br i1 %v7_10008950, label %dec_label_pc_10008956, label %dec_label_pc_10008a09

dec_label_pc_10008956:                            ; preds = %dec_label_pc_10008945, %dec_label_pc_100089f6
  %v1_100089f721 = phi i32 [ %v1_100089f7, %dec_label_pc_100089f6 ], [ %v0_1000894e, %dec_label_pc_10008945 ]
  %v1_10008959 = phi i32 [ %v1_100089f6, %dec_label_pc_100089f6 ], [ 1, %dec_label_pc_10008945 ]
  %stack_var_-5.4 = phi i8 [ %stack_var_-5.5, %dec_label_pc_100089f6 ], [ 1, %dec_label_pc_10008945 ]
  %v0_10008956 = load i32, i32* @edi, align 4
  %v2_10008956 = mul i32 %v1_10008959, 4
  %v3_10008956 = add i32 %v0_10008956, %v2_10008956
  %v4_10008956 = inttoptr i32 %v3_10008956 to i32*
  %v5_10008956 = load i32, i32* %v4_10008956, align 4
  store i32 %v5_10008956, i32* %eax.global-to-local, align 4
  %v3_10008959 = add i32 %v2_10008956, -4
  %v4_10008959 = add i32 %v3_10008959, %v0_10008956
  %v5_10008959 = inttoptr i32 %v4_10008959 to i32*
  %v6_10008959 = load i32, i32* %v5_10008959, align 4
  store i32 %v6_10008959, i32* @ecx, align 4
  %v8_10008962 = icmp sgt i32 %v5_10008956, %v6_10008959
  br i1 %v8_10008962, label %dec_label_pc_100089f6, label %dec_label_pc_10008968

dec_label_pc_10008968:                            ; preds = %dec_label_pc_10008956
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_1000896b = load i32, i32* @esp, align 4
  %v2_1000896b = add i32 %v1_1000896b, -4
  %v3_1000896b = inttoptr i32 %v2_1000896b to i32*
  store i32 %v6_10008959, i32* %v3_1000896b, align 4
  store i32 %v2_1000896b, i32* @eax, align 4
  %v0_1000896e = load i32, i32* @ecx, align 4
  %v1_1000896e = trunc i32 %v0_1000896e to i16
  %v3_1000896e = inttoptr i32 %v2_1000896b to i16*
  store i16 %v1_1000896e, i16* %v3_1000896e, align 2
  %v0_10008971 = load i32, i32* %esi.global-to-local, align 4
  %v1_10008971 = add i32 %v0_10008971, 20
  store i32 %v1_10008971, i32* @esi, align 4
  store i32 %v1_10008971, i32* @ecx, align 4
  %v1_10008976 = call i32 @function_1000e5b0(i32 %v5_10008956)
  store i32 %v1_10008976, i32* %eax.global-to-local, align 4
  %v4_1000897b = and i32 %v5_10008956, 65535
  %v5_1000897b = load i32, i32* @edx, align 4
  %v6_1000897b = and i32 %v5_1000897b, -65536
  %v7_1000897b = or i32 %v6_1000897b, %v4_1000897b
  store i32 %v7_1000897b, i32* %edx.global-to-local, align 4
  %v0_1000897f = load i32, i32* @ecx, align 4
  %v1_1000897f = load i32, i32* @esp, align 4
  %v2_1000897f = add i32 %v1_1000897f, -4
  %v3_1000897f = inttoptr i32 %v2_1000897f to i32*
  store i32 %v0_1000897f, i32* %v3_1000897f, align 4
  %v0_10008980 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v2_1000897f, i32* @eax, align 4
  %v0_10008985 = load i32, i32* @esi, align 4
  store i32 %v0_10008985, i32* @ecx, align 4
  %v0_10008987 = load i32, i32* %edx.global-to-local, align 4
  %v1_10008987 = trunc i32 %v0_10008987 to i16
  %v3_10008987 = inttoptr i32 %v2_1000897f to i16*
  store i16 %v1_10008987, i16* %v3_10008987, align 2
  %v1_1000898a = call i32 @function_1000e5b0(i32 %v0_10008980)
  %v1_1000898f = load i32, i32* @esp, align 4
  %v2_1000898f = add i32 %v1_1000898f, -4
  %v3_1000898f = inttoptr i32 %v2_1000898f to i32*
  store i32 %v1_1000898a, i32* %v3_1000898f, align 4
  store i32 %v2_100088ac, i32* %eax.global-to-local, align 4
  %v2_10008993 = add i32 %v1_1000898f, -8
  %v3_10008993 = inttoptr i32 %v2_10008993 to i32*
  store i32 %v2_100088ac, i32* %v3_10008993, align 4
  %v0_10008994 = load i32, i32* @esi, align 4
  store i32 %v0_10008994, i32* @ecx, align 4
  %v2_10008996 = call i32 @function_1000f030(i8 ptrtoint (i32* @5 to i8), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008996, i32* %eax.global-to-local, align 4
  %v3_1000899b = load i32, i32* %stack_var_-12, align 4
  %v4_1000899b = and i32 %v3_1000899b, 65535
  store i32 %v4_1000899b, i32* @esi, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v3_100089a2 = load i32, i32* %v2_100089a2, align 4
  store i32 %v3_100089a2, i32* %eax.global-to-local, align 4
  %v8_100089a7 = icmp sgt i32 %v3_100089a2, %v4_1000899b
  br i1 %v8_100089a7, label %dec_label_pc_100089bc, label %dec_label_pc_100089b0

dec_label_pc_100089b0:                            ; preds = %dec_label_pc_10008968
  %v1_100089a9 = add nuw nsw i32 %v4_1000899b, 1
  %v2_100089b0 = sub i32 %v1_100089a9, %v3_100089a2
  store i32 %v2_100089b0, i32* %edx.global-to-local, align 4
  %v1_100089b2 = load i32, i32* @esp, align 4
  %v2_100089b2 = add i32 %v1_100089b2, -4
  %v3_100089b2 = inttoptr i32 %v2_100089b2 to i32*
  store i32 %v2_100089b0, i32* %v3_100089b2, align 4
  %v0_100089b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_100089b3 = add i32 %v1_100089b2, -8
  %v3_100089b3 = inttoptr i32 %v2_100089b3 to i32*
  store i32 %v0_100089b3, i32* %v3_100089b3, align 4
  %v2_100089b4 = call i32 @function_10007ae0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100089b4, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v0_100089be.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100089bc

dec_label_pc_100089bc:                            ; preds = %dec_label_pc_100089b0, %dec_label_pc_10008968
  %v0_100089be = phi i32 [ %v0_100089be.pre, %dec_label_pc_100089b0 ], [ %v4_1000899b, %dec_label_pc_10008968 ]
  %v2_100089bc = load i32, i32* %v1_100089bc, align 4
  %v2_100089c7 = mul i32 %v0_100089be, 56
  %v3_100089c7 = add i32 %v2_100089bc, %v2_100089c7
  store i32 %v3_100089c7, i32* @ecx, align 4
  store i32 %v0_10008980, i32* %edx.global-to-local, align 4
  %v1_100089cd = load i32, i32* @esp, align 4
  %v2_100089cd = add i32 %v1_100089cd, -4
  %v3_100089cd = inttoptr i32 %v2_100089cd to i32*
  store i32 %v0_10008980, i32* %v3_100089cd, align 4
  store i32 %v2_100088e7, i32* %eax.global-to-local, align 4
  %v2_100089d1 = add i32 %v1_100089cd, -8
  %v3_100089d1 = inttoptr i32 %v2_100089d1 to i32*
  store i32 %v2_100088e7, i32* %v3_100089d1, align 4
  %v2_100089d2 = call i32 @function_1000ed60(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_100089d2, i32* %eax.global-to-local, align 4
  store i32 %v4_1000881b, i32* @esi, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_100089df = inttoptr i32 %v2_100089d2 to i16*
  %v2_100089df = load i16, i16* %v1_100089df, align 2
  %v15_100089df = icmp eq i16 %v2_100089df, -1
  %v1_100089e2 = icmp eq i1 %v15_100089df, false
  br i1 %v1_100089e2, label %dec_label_pc_100089f6, label %dec_label_pc_100089e4

dec_label_pc_100089e4:                            ; preds = %dec_label_pc_100089bc
  %v0_100089e4 = load i32, i32* @edi, align 4
  %v1_100089e4 = load i32, i32* @ebx, align 4
  %v2_100089e4 = mul i32 %v1_100089e4, 4
  %v3_100089e4 = add i32 %v0_100089e4, -4
  %v4_100089e4 = add i32 %v3_100089e4, %v2_100089e4
  %v5_100089e4 = inttoptr i32 %v4_100089e4 to i32*
  %v6_100089e4 = load i32, i32* %v5_100089e4, align 4
  store i32 %v6_100089e4, i32* %edx.global-to-local, align 4
  %v3_100089e8 = add i32 %v2_100089e4, %v0_100089e4
  %v4_100089e8 = inttoptr i32 %v3_100089e8 to i32*
  %v5_100089e8 = load i32, i32* %v4_100089e8, align 4
  store i32 %v5_100089e8, i32* %eax.global-to-local, align 4
  store i32 %v6_100089e4, i32* %v4_100089e8, align 4
  %v0_100089ee = load i32, i32* %eax.global-to-local, align 4
  %v1_100089ee = load i32, i32* @edi, align 4
  %v2_100089ee = load i32, i32* @ebx, align 4
  %v3_100089ee = mul i32 %v2_100089ee, 4
  %v4_100089ee = add i32 %v1_100089ee, -4
  %v5_100089ee = add i32 %v4_100089ee, %v3_100089ee
  %v6_100089ee = inttoptr i32 %v5_100089ee to i32*
  store i32 %v0_100089ee, i32* %v6_100089ee, align 4
  %v1_100089f7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_100089f6

dec_label_pc_100089f6:                            ; preds = %dec_label_pc_100089e4, %dec_label_pc_100089bc, %dec_label_pc_10008956
  %v1_100089f7 = phi i32 [ %v1_100089f721, %dec_label_pc_10008956 ], [ %v4_1000881b, %dec_label_pc_100089bc ], [ %v1_100089f7.pre, %dec_label_pc_100089e4 ]
  %stack_var_-5.5 = phi i8 [ %stack_var_-5.4, %dec_label_pc_10008956 ], [ %stack_var_-5.4, %dec_label_pc_100089bc ], [ 0, %dec_label_pc_100089e4 ]
  %v0_100089f6 = load i32, i32* @ebx, align 4
  %v1_100089f6 = add i32 %v0_100089f6, 1
  store i32 %v1_100089f6, i32* @ebx, align 4
  %v5_100089f9 = icmp slt i32 %v1_100089f6, %v1_100089f7
  br i1 %v5_100089f9, label %dec_label_pc_10008956, label %dec_label_pc_100089ff

dec_label_pc_100089ff:                            ; preds = %dec_label_pc_100089f6
  %v10_100089ff = icmp eq i8 %stack_var_-5.5, 0
  br i1 %v10_100089ff, label %dec_label_pc_10008945, label %dec_label_pc_10008a09

dec_label_pc_10008a09:                            ; preds = %dec_label_pc_10008945, %dec_label_pc_100089ff
  %v0_10008a09 = phi i32 [ %v0_1000894e, %dec_label_pc_10008945 ], [ %v1_100089f7, %dec_label_pc_100089ff ]
  %v1_10008a09 = mul i32 %v0_10008a09, 4
  %v2_10008a09 = add i32 %v1_10008a09, 15
  %v1_10008a10 = and i32 %v2_10008a09, -16
  store i32 %v1_10008a10, i32* %eax.global-to-local, align 4
  %v0_10008a13 = call i32 @__alloca_probe_16()
  %v0_10008a18 = load i32, i32* @esp, align 4
  store i32 %v0_10008a18, i32* %ebx.global-to-local, align 4
  %v0_10008a1a = load i32, i32* @esi, align 4
  %v1_10008a1a = mul i32 %v0_10008a1a, 4
  %v2_10008a21 = add i32 %v0_10008a18, -4
  %v3_10008a21 = inttoptr i32 %v2_10008a21 to i32*
  store i32 %v1_10008a1a, i32* %v3_10008a21, align 4
  store i32 %v0_1000882a, i32* %eax.global-to-local, align 4
  %v1_10008a25 = add i32 %v0_1000882a, 24
  %v2_10008a25 = inttoptr i32 %v1_10008a25 to i32*
  %v3_10008a25 = load i32, i32* %v2_10008a25, align 4
  store i32 %v3_10008a25, i32* @ecx, align 4
  %v2_10008a28 = add i32 %v0_10008a18, -8
  %v3_10008a28 = inttoptr i32 %v2_10008a28 to i32*
  store i32 %v3_10008a25, i32* %v3_10008a28, align 4
  %v0_10008a29 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10008a29 = add i32 %v0_10008a18, -12
  %v3_10008a29 = inttoptr i32 %v2_10008a29 to i32*
  store i32 %v0_10008a29, i32* %v3_10008a29, align 4
  %v0_10008a2a = call i32 @_memcpy.1()
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_10008a34 = load i32, i32* @esi, align 4
  %tmp81 = icmp slt i32 %v0_10008a34, 1
  br i1 %tmp81, label %dec_label_pc_10008a4c, label %dec_label_pc_10008a38

dec_label_pc_10008a38:                            ; preds = %dec_label_pc_10008a09, %dec_label_pc_10008a38
  %v2_10008a44 = phi i32 [ %v1_10008a47, %dec_label_pc_10008a38 ], [ 0, %dec_label_pc_10008a09 ]
  %v0_10008a38 = load i32, i32* @edi, align 4
  %v2_10008a38 = mul i32 %v2_10008a44, 4
  %v3_10008a38 = add i32 %v2_10008a38, %v0_10008a38
  %v4_10008a38 = inttoptr i32 %v3_10008a38 to i32*
  %v5_10008a38 = load i32, i32* %v4_10008a38, align 4
  store i32 %v5_10008a38, i32* %edx.global-to-local, align 4
  store i32 %v0_1000882a, i32* @ecx, align 4
  %v3_10008a3e = load i32, i32* %v2_10008a25, align 4
  store i32 %v3_10008a3e, i32* @ecx, align 4
  %v0_10008a41 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10008a41 = mul i32 %v5_10008a38, 4
  %v3_10008a41 = add i32 %v0_10008a41, %v2_10008a41
  %v4_10008a41 = inttoptr i32 %v3_10008a41 to i32*
  %v5_10008a41 = load i32, i32* %v4_10008a41, align 4
  store i32 %v5_10008a41, i32* %edx.global-to-local, align 4
  %v4_10008a44 = add i32 %v3_10008a3e, %v2_10008a38
  %v5_10008a44 = inttoptr i32 %v4_10008a44 to i32*
  store i32 %v5_10008a41, i32* %v5_10008a44, align 4
  %v0_10008a47 = load i32, i32* %eax.global-to-local, align 4
  %v1_10008a47 = add i32 %v0_10008a47, 1
  store i32 %v1_10008a47, i32* %eax.global-to-local, align 4
  %v1_10008a48 = load i32, i32* @esi, align 4
  %v5_10008a4a = icmp slt i32 %v1_10008a47, %v1_10008a48
  br i1 %v5_10008a4a, label %dec_label_pc_10008a38, label %dec_label_pc_10008a4c.loopexit

dec_label_pc_10008a4c.loopexit:                   ; preds = %dec_label_pc_10008a38
  br label %dec_label_pc_10008a4c

dec_label_pc_10008a4c:                            ; preds = %dec_label_pc_10008a4c.loopexit, %dec_label_pc_10008a09
  store i32 %v0_1000882a, i32* @ebx, align 4
  %v1_10008a4f = add i32 %v0_1000882a, 64
  store i32 %v1_10008a4f, i32* @ecx, align 4
  %v0_10008a52 = call i32 @function_10003d90()
  %v1_10008a57 = and i32 %v0_10008a52, 65535
  store i32 %v1_10008a57, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v1_10008a5f = trunc i32 %v0_10008a52 to i16
  %v14_10008a5f = icmp eq i16 %v1_10008a5f, -1
  br i1 %v14_10008a5f, label %dec_label_pc_10008a9f, label %dec_label_pc_10008a64

dec_label_pc_10008a64:                            ; preds = %dec_label_pc_10008a4c, %dec_label_pc_10008a86
  %v0_10008a6d = phi i32 [ %v1_10008a92, %dec_label_pc_10008a86 ], [ %v1_10008a57, %dec_label_pc_10008a4c ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_10008a66 = load i32, i32* @esi, align 4
  %tmp82 = icmp slt i32 %v0_10008a66, 1
  br i1 %tmp82, label %dec_label_pc_10008a86, label %dec_label_pc_10008a6a

dec_label_pc_10008a6a:                            ; preds = %dec_label_pc_10008a64
  %v0_10008a6a = load i32, i32* @ebx, align 4
  %v1_10008a6a = add i32 %v0_10008a6a, 68
  %v2_10008a6a = inttoptr i32 %v1_10008a6a to i32*
  %v3_10008a6a = load i32, i32* %v2_10008a6a, align 4
  %v2_10008a70 = mul nuw nsw i32 %v0_10008a6d, 2
  store i32 %v2_10008a70, i32* %edx.global-to-local, align 4
  %v2_10008a72 = mul nuw nsw i32 %v0_10008a6d, 16
  %v3_10008a72 = or i32 %v2_10008a72, 12
  %v4_10008a72 = add i32 %v3_10008a6a, %v3_10008a72
  store i32 %v4_10008a72, i32* %ebx.global-to-local, align 4
  %v1_10008a76 = inttoptr i32 %v4_10008a72 to i32*
  %v2_10008a76 = load i32, i32* %v1_10008a76, align 4
  store i32 %v2_10008a76, i32* %edx.global-to-local, align 4
  %v0_10008a78.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10008a78

dec_label_pc_10008a78:                            ; preds = %dec_label_pc_10008a7d, %dec_label_pc_10008a6a
  %v0_10008a84 = phi i32 [ %v1_10008a7d, %dec_label_pc_10008a7d ], [ 0, %dec_label_pc_10008a6a ]
  %v2_10008a78 = mul i32 %v0_10008a84, 4
  %v3_10008a78 = add i32 %v2_10008a78, %v0_10008a78.pre
  %v4_10008a78 = inttoptr i32 %v3_10008a78 to i32*
  %v5_10008a78 = load i32, i32* %v4_10008a78, align 4
  %v17_10008a78 = icmp eq i32 %v5_10008a78, %v2_10008a76
  br i1 %v17_10008a78, label %dec_label_pc_10008a84, label %dec_label_pc_10008a7d

dec_label_pc_10008a7d:                            ; preds = %dec_label_pc_10008a78
  %v1_10008a7d = add nuw nsw i32 %v0_10008a84, 1
  store i32 %v1_10008a7d, i32* %eax.global-to-local, align 4
  %v5_10008a80 = icmp slt i32 %v1_10008a7d, %v0_10008a66
  br i1 %v5_10008a80, label %dec_label_pc_10008a78, label %dec_label_pc_10008a86.loopexit

dec_label_pc_10008a84:                            ; preds = %dec_label_pc_10008a78
  store i32 %v0_10008a84, i32* %v1_10008a76, align 4
  %v0_10008a89.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10008a86

dec_label_pc_10008a86.loopexit:                   ; preds = %dec_label_pc_10008a7d
  br label %dec_label_pc_10008a86

dec_label_pc_10008a86:                            ; preds = %dec_label_pc_10008a86.loopexit, %dec_label_pc_10008a84, %dec_label_pc_10008a64
  %v0_10008a89 = phi i32 [ %v0_10008a6d, %dec_label_pc_10008a86.loopexit ], [ %v0_10008a89.pre, %dec_label_pc_10008a84 ], [ %v0_10008a6d, %dec_label_pc_10008a64 ]
  store i32 %v0_1000882a, i32* @ebx, align 4
  %v1_10008a89 = load i32, i32* @esp, align 4
  %v2_10008a89 = add i32 %v1_10008a89, -4
  %v3_10008a89 = inttoptr i32 %v2_10008a89 to i32*
  store i32 %v0_10008a89, i32* %v3_10008a89, align 4
  %v0_10008a8a = load i32, i32* @ebx, align 4
  %v1_10008a8a = add i32 %v0_10008a8a, 64
  store i32 %v1_10008a8a, i32* @ecx, align 4
  %v1_10008a8d = call i32 @function_10003e60(i32 ptrtoint (i32* @5 to i32))
  %v1_10008a92 = and i32 %v1_10008a8d, 65535
  store i32 %v1_10008a92, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v1_10008a9a = trunc i32 %v1_10008a8d to i16
  %v14_10008a9a = icmp eq i16 %v1_10008a9a, -1
  %v1_10008a9d = icmp eq i1 %v14_10008a9a, false
  br i1 %v1_10008a9d, label %dec_label_pc_10008a64, label %dec_label_pc_10008a9f

dec_label_pc_10008a9f:                            ; preds = %dec_label_pc_10008a86, %dec_label_pc_10008a4c
  %v2_10008aa2 = load i32, i32* %stack_var_-52, align 4
  store i32 %v2_10008aa2, i32* @edi, align 4
  %v2_10008aa3 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_10008aa3, i32* @esi, align 4
  store i32 %v0_10008816, i32* @ebx, align 4
  ret i32 65535
}

define i32 @function_10008ab0() local_unnamed_addr {
dec_label_pc_10008ab0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10008ab0 = load i32, i32* @ebp, align 4
  store i32 %v0_10008ab0, i32* %stack_var_-4, align 4
  %v4_10008ab0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10008ab0, i32* @ebp, align 4
  %v0_10008ab3 = load i32, i32* @ecx, align 4
  %v0_10008ab5 = load i32, i32* @edi, align 4
  store i32 %v0_10008ab5, i32* %stack_var_-16, align 4
  %v4_10008ab5 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v0_10008ab3, i32* @esi, align 4
  store i32 0, i32* @edi, align 4
  %v1_10008aba = add i32 %v0_10008ab3, 36
  %v2_10008aba = inttoptr i32 %v1_10008aba to i32*
  %v3_10008aba = load i32, i32* %v2_10008aba, align 4
  %v7_10008abd = icmp sgt i32 %v3_10008aba, 0
  br i1 %v7_10008abd, label %dec_label_pc_10008ac0, label %dec_label_pc_10008ab0.dec_label_pc_10008adb_crit_edge

dec_label_pc_10008ab0.dec_label_pc_10008adb_crit_edge: ; preds = %dec_label_pc_10008ab0
  %v0_10008adc.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_10008adb

dec_label_pc_10008ac0:                            ; preds = %dec_label_pc_10008ab0, %dec_label_pc_10008ad5
  %v0_10008aca = phi i32 [ %v1_10008aca, %dec_label_pc_10008ad5 ], [ %v4_10008ab5, %dec_label_pc_10008ab0 ]
  %v1_10008ac3 = phi i32 [ %v1_10008ad5, %dec_label_pc_10008ad5 ], [ 0, %dec_label_pc_10008ab0 ]
  %v0_10008ac0 = phi i32 [ %v1_10008ad6, %dec_label_pc_10008ad5 ], [ %v0_10008ab3, %dec_label_pc_10008ab0 ]
  %v1_10008ac0 = add i32 %v0_10008ac0, 24
  %v2_10008ac0 = inttoptr i32 %v1_10008ac0 to i32*
  %v3_10008ac0 = load i32, i32* %v2_10008ac0, align 4
  store i32 %v3_10008ac0, i32* %eax.global-to-local, align 4
  %v2_10008ac3 = mul i32 %v1_10008ac3, 4
  %v3_10008ac3 = add i32 %v3_10008ac0, %v2_10008ac3
  %v4_10008ac3 = inttoptr i32 %v3_10008ac3 to i32*
  %v5_10008ac3 = load i32, i32* %v4_10008ac3, align 4
  store i32 %v5_10008ac3, i32* @ecx, align 4
  %v1_10008ac6 = inttoptr i32 %v5_10008ac3 to i32*
  %v2_10008ac6 = load i32, i32* %v1_10008ac6, align 4
  %v1_10008ac8 = inttoptr i32 %v2_10008ac6 to i32*
  %v2_10008ac8 = load i32, i32* %v1_10008ac8, align 4
  store i32 %v2_10008ac8, i32* %eax.global-to-local, align 4
  %v1_10008aca = add i32 %v0_10008aca, -4
  %v2_10008aca = inttoptr i32 %v1_10008aca to i32*
  store i32 268469744, i32* %v2_10008aca, align 4
  %v0_10008ad1 = load i32, i32* %eax.global-to-local, align 4
  %v4_10008ad1 = trunc i32 %v0_10008ad1 to i8
  %v5_10008ad1 = icmp eq i8 %v4_10008ad1, 0
  br i1 %v5_10008ad1, label %dec_label_pc_10008ae3, label %dec_label_pc_10008ad5

dec_label_pc_10008ad5:                            ; preds = %dec_label_pc_10008ac0
  %v0_10008ad5 = load i32, i32* @edi, align 4
  %v1_10008ad5 = add i32 %v0_10008ad5, 1
  store i32 %v1_10008ad5, i32* @edi, align 4
  %v1_10008ad6 = load i32, i32* @esi, align 4
  %v2_10008ad6 = add i32 %v1_10008ad6, 36
  %v3_10008ad6 = inttoptr i32 %v2_10008ad6 to i32*
  %v4_10008ad6 = load i32, i32* %v3_10008ad6, align 4
  %v5_10008ad9 = icmp slt i32 %v1_10008ad5, %v4_10008ad6
  br i1 %v5_10008ad9, label %dec_label_pc_10008ac0, label %dec_label_pc_10008adb.loopexit

dec_label_pc_10008adb.loopexit:                   ; preds = %dec_label_pc_10008ad5
  %v2_10008ae1.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_10008adb

dec_label_pc_10008adb:                            ; preds = %dec_label_pc_10008ab0.dec_label_pc_10008adb_crit_edge, %dec_label_pc_10008adb.loopexit
  %v2_10008ae1 = phi i32 [ %v2_10008ae1.pre, %dec_label_pc_10008adb.loopexit ], [ %v0_10008ab0, %dec_label_pc_10008ab0.dec_label_pc_10008adb_crit_edge ]
  %v0_10008adc = phi i32 [ %v0_10008ad1, %dec_label_pc_10008adb.loopexit ], [ %v0_10008adc.pre, %dec_label_pc_10008ab0.dec_label_pc_10008adb_crit_edge ]
  %v0_10008adb = phi i32 [ %v1_10008aca, %dec_label_pc_10008adb.loopexit ], [ %v4_10008ab5, %dec_label_pc_10008ab0.dec_label_pc_10008adb_crit_edge ]
  %v1_10008adb = inttoptr i32 %v0_10008adb to i32*
  %v2_10008adb = load i32, i32* %v1_10008adb, align 4
  store i32 %v2_10008adb, i32* @edi, align 4
  %v3_10008adb = add i32 %v0_10008adb, 4
  %v1_10008adc = and i32 %v0_10008adc, -256
  %v2_10008adc = or i32 %v1_10008adc, 1
  store i32 %v2_10008adc, i32* %eax.global-to-local, align 4
  %v1_10008ade = inttoptr i32 %v3_10008adb to i32*
  %v2_10008ade = load i32, i32* %v1_10008ade, align 4
  store i32 %v2_10008ade, i32* @esi, align 4
  store i32 %v2_10008ae1, i32* @ebp, align 4
  ret i32 %v2_10008adc

dec_label_pc_10008ae3:                            ; preds = %dec_label_pc_10008ac0
  %v0_10008ae3 = load i32, i32* @ebx, align 4
  %v2_10008ae3 = add i32 %v0_10008aca, -8
  %v3_10008ae3 = inttoptr i32 %v2_10008ae3 to i32*
  store i32 %v0_10008ae3, i32* %v3_10008ae3, align 4
  %v0_10008ae4 = load i32, i32* @esi, align 4
  %v1_10008ae4 = add i32 %v0_10008ae4, 64
  store i32 %v1_10008ae4, i32* @ecx, align 4
  %v0_10008aee = call i32 @function_10003d90()
  %v1_10008af3 = and i32 %v0_10008aee, 65535
  store i32 %v1_10008af3, i32* %eax.global-to-local, align 4
  %v10_10008af6 = icmp eq i32 %v1_10008af3, 65535
  br i1 %v10_10008af6, label %dec_label_pc_10008b2f, label %dec_label_pc_10008b00

dec_label_pc_10008b00:                            ; preds = %dec_label_pc_10008ae3, %dec_label_pc_10008b0e
  %v0_10008b23 = phi i32 [ %v1_10008b17, %dec_label_pc_10008b0e ], [ %v1_10008af3, %dec_label_pc_10008ae3 ]
  %v0_10008b00 = load i32, i32* @esi, align 4
  %v1_10008b00 = add i32 %v0_10008b00, 68
  %v2_10008b00 = inttoptr i32 %v1_10008b00 to i32*
  %v3_10008b00 = load i32, i32* %v2_10008b00, align 4
  %v2_10008b06 = mul nuw nsw i32 %v0_10008b23, 2
  store i32 %v2_10008b06, i32* @ecx, align 4
  %v2_10008b08 = mul nuw nsw i32 %v0_10008b23, 16
  %v3_10008b08 = or i32 %v2_10008b08, 12
  %v4_10008b08 = add i32 %v3_10008b08, %v3_10008b00
  %v5_10008b08 = inttoptr i32 %v4_10008b08 to i32*
  %v6_10008b08 = load i32, i32* %v5_10008b08, align 4
  %v7_10008b08 = load i32, i32* @edi, align 4
  %v18_10008b08 = icmp eq i32 %v6_10008b08, %v7_10008b08
  br i1 %v18_10008b08, label %dec_label_pc_10008b23, label %dec_label_pc_10008b0e

dec_label_pc_10008b0e:                            ; preds = %dec_label_pc_10008b00
  %v1_10008b0e = load i32, i32* @esp, align 4
  %v2_10008b0e = add i32 %v1_10008b0e, -4
  %v3_10008b0e = inttoptr i32 %v2_10008b0e to i32*
  store i32 %v0_10008b23, i32* %v3_10008b0e, align 4
  %v0_10008b0f = load i32, i32* @esi, align 4
  %v1_10008b0f = add i32 %v0_10008b0f, 64
  store i32 %v1_10008b0f, i32* @ecx, align 4
  %v1_10008b12 = call i32 @function_10003e60(i32 ptrtoint (i32* @5 to i32))
  %v1_10008b17 = and i32 %v1_10008b12, 65535
  store i32 %v1_10008b17, i32* %eax.global-to-local, align 4
  %v10_10008b1a = icmp eq i32 %v1_10008b17, 65535
  %v1_10008b1f = icmp eq i1 %v10_10008b1a, false
  br i1 %v1_10008b1f, label %dec_label_pc_10008b00, label %dec_label_pc_10008b2f

dec_label_pc_10008b23:                            ; preds = %dec_label_pc_10008b00
  store i32 %v2_10008b06, i32* %eax.global-to-local, align 4
  %v3_10008b28 = or i32 %v2_10008b08, 8
  %v4_10008b28 = add i32 %v3_10008b28, %v3_10008b00
  %v5_10008b28 = inttoptr i32 %v4_10008b28 to i32*
  %v6_10008b28 = load i32, i32* %v5_10008b28, align 4
  %v4_10008b2c = inttoptr i32 %v6_10008b28 to i8*
  br label %dec_label_pc_10008b2f

dec_label_pc_10008b2f:                            ; preds = %dec_label_pc_10008b0e, %dec_label_pc_10008b23, %dec_label_pc_10008ae3
  %stack_var_-8.0 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_100234e4.284, i32 0, i32 0), %dec_label_pc_10008ae3 ], [ %v4_10008b2c, %dec_label_pc_10008b23 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_100234e4.284, i32 0, i32 0), %dec_label_pc_10008b0e ]
  %v0_10008b2f = load i32, i32* bitcast ([2 x i8*]* @global_var_1002819c.303 to i32*), align 4
  store i32 %v0_10008b2f, i32* %eax.global-to-local, align 4
  %v4_10008b34 = ptrtoint i8* %stack_var_-8.0 to i32
  store i32 %v4_10008b34, i32* @ecx, align 4
  %v1_10008b37 = load i32, i32* @esp, align 4
  %v2_10008b37 = add i32 %v1_10008b37, -4
  %v3_10008b37 = inttoptr i32 %v2_10008b37 to i32*
  store i32 %v0_10008b2f, i32* %v3_10008b37, align 4
  %v0_10008b38 = load i32, i32* @ecx, align 4
  %v2_10008b38 = add i32 %v1_10008b37, -8
  %v3_10008b38 = inttoptr i32 %v2_10008b38 to i32*
  store i32 %v0_10008b38, i32* %v3_10008b38, align 4
  %v1_10008b39 = add i32 %v1_10008b37, -12
  %v2_10008b39 = inttoptr i32 %v1_10008b39 to i32*
  store i32 ptrtoint ([36 x i8]* @global_var_100234c0.294 to i32), i32* %v2_10008b39, align 4
  %v0_10008b3e = call i32 @Warning()
  store i32 %v0_10008b3e, i32* %eax.global-to-local, align 4
  %v0_10008b44 = load i32, i32* @esp, align 4
  %v1_10008b44 = add i32 %v0_10008b44, 12
  %v1_10008b47 = inttoptr i32 %v1_10008b44 to i32*
  %v2_10008b47 = load i32, i32* %v1_10008b47, align 4
  store i32 %v2_10008b47, i32* @ebx, align 4
  %v3_10008b47 = add i32 %v0_10008b44, 16
  %v1_10008b48 = inttoptr i32 %v3_10008b47 to i32*
  %v2_10008b48 = load i32, i32* %v1_10008b48, align 4
  store i32 %v2_10008b48, i32* @edi, align 4
  %v3_10008b48 = add i32 %v0_10008b44, 20
  %v12_10008b49 = and i32 %v0_10008b3e, -256
  store i32 %v12_10008b49, i32* %eax.global-to-local, align 4
  %v1_10008b4b = inttoptr i32 %v3_10008b48 to i32*
  %v2_10008b4b = load i32, i32* %v1_10008b4b, align 4
  store i32 %v2_10008b4b, i32* @esi, align 4
  %v2_10008b4e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10008b4e, i32* @ebp, align 4
  ret i32 %v12_10008b49
}

define i32 @function_10008b50() {
dec_label_pc_10008b50:
  %v0_10008b50 = call i32 @function_10008630()
  ret i32 %v0_10008b50
}

define i32 @function_10008b60(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008b60:
  %stack_var_-12 = alloca i32, align 4
  %v0_10008b60 = load i32, i32* @ebp, align 4
  %v0_10008b63 = load i32, i32* @esi, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v0_10008b66 = load i32, i32* @ecx, align 4
  store i32 %v0_10008b66, i32* @esi, align 4
  %v3_10008b68 = call i32 @function_10008770(i32 0, i32 %v0_10008b63, i32 %v0_10008b60)
  %v1_10008b70 = load i32, i32* @esi, align 4
  %v2_10008b70 = add i32 %v1_10008b70, 100
  %v3_10008b70 = inttoptr i32 %v2_10008b70 to i32*
  store i32 %arg1, i32* %v3_10008b70, align 4
  %v0_10008b73 = load i32, i32* @esi, align 4
  %v1_10008b73 = inttoptr i32 %v0_10008b73 to i32*
  store i32 ptrtoint (i32* @global_var_10023524.304 to i32), i32* %v1_10008b73, align 4
  %v0_10008b79 = load i32, i32* @esi, align 4
  %v1_10008b79 = add i32 %v0_10008b79, 104
  %v2_10008b79 = inttoptr i32 %v1_10008b79 to i8*
  store i8 0, i8* %v2_10008b79, align 1
  %v0_10008b7d = load i32, i32* @esi, align 4
  %v2_10008b7f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10008b7f, i32* @esi, align 4
  store i32 %v0_10008b63, i32* @ebp, align 4
  ret i32 %v0_10008b7d
}

define i32 @function_10008b90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008b90:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v16_10008b93 = ptrtoint i32* %stack_var_-12 to i32
  %v0_10008b97 = load i32, i32* @edi, align 4
  store i32 %v0_10008b97, i32* %stack_var_-20, align 4
  %v4_10008b97 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @edi, align 4
  %v0_10008b9b = load i32, i32* @ecx, align 4
  store i32 %v0_10008b9b, i32* @ebx, align 4
  %v1_10008b9d = icmp eq i32 %arg1, 0
  br i1 %v1_10008b9d, label %dec_label_pc_10008bdd, label %dec_label_pc_10008ba1

dec_label_pc_10008ba1:                            ; preds = %dec_label_pc_10008b90
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10008ba3 = add i32 %arg1, 1
  store i32 %v1_10008ba3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10008ba6

dec_label_pc_10008ba6:                            ; preds = %dec_label_pc_10008ba6, %dec_label_pc_10008ba1
  %v4_10008ba6 = phi i32 [ %v6_10008ba6, %dec_label_pc_10008ba6 ], [ %v0_10008b9b, %dec_label_pc_10008ba1 ]
  %v0_10008ba8 = phi i32 [ %v1_10008ba8, %dec_label_pc_10008ba6 ], [ %arg1, %dec_label_pc_10008ba1 ]
  %v1_10008ba6 = inttoptr i32 %v0_10008ba8 to i8*
  %v2_10008ba6 = load i8, i8* %v1_10008ba6, align 1
  %v3_10008ba6 = zext i8 %v2_10008ba6 to i32
  %v5_10008ba6 = and i32 %v4_10008ba6, -256
  %v6_10008ba6 = or i32 %v3_10008ba6, %v5_10008ba6
  store i32 %v6_10008ba6, i32* @ecx, align 4
  %v1_10008ba8 = add i32 %v0_10008ba8, 1
  store i32 %v1_10008ba8, i32* %eax.global-to-local, align 4
  %v5_10008ba9 = icmp eq i8 %v2_10008ba6, 0
  %v1_10008bab = icmp eq i1 %v5_10008ba9, false
  br i1 %v1_10008bab, label %dec_label_pc_10008ba6, label %dec_label_pc_10008bad

dec_label_pc_10008bad:                            ; preds = %dec_label_pc_10008ba6
  %v0_10008bad = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10008bad, i32* @ecx, align 4
  %v1_10008bb3 = inttoptr i32 %v0_10008bad to i32*
  %v2_10008bb3 = load i32, i32* %v1_10008bb3, align 4
  store i32 %v2_10008bb3, i32* @ecx, align 4
  %v2_10008bb5 = sub i32 %v1_10008ba8, %v1_10008ba3
  store i32 %v2_10008bb5, i32* %eax.global-to-local, align 4
  %v1_10008bb7 = inttoptr i32 %v2_10008bb3 to i32*
  %v2_10008bb7 = load i32, i32* %v1_10008bb7, align 4
  store i32 %v2_10008bb7, i32* %edx.global-to-local, align 4
  %v1_10008bb9 = add i32 %v2_10008bb5, 1
  store i32 %v1_10008bb9, i32* %eax.global-to-local, align 4
  store i32 %v1_10008bb9, i32* %stack_var_-24, align 4
  %v4_10008bba = ptrtoint i32* %stack_var_-24 to i32
  %v1_10008bbb = add i32 %v2_10008bb7, 4
  %v2_10008bbb = inttoptr i32 %v1_10008bbb to i32*
  %v3_10008bbb = load i32, i32* %v2_10008bbb, align 4
  store i32 %v3_10008bbb, i32* %eax.global-to-local, align 4
  %v1_10008bc0 = icmp eq i32 %v3_10008bbb, 0
  br i1 %v1_10008bc0, label %dec_label_pc_10008bdd, label %dec_label_pc_10008bc4

dec_label_pc_10008bc4:                            ; preds = %dec_label_pc_10008bad
  %v0_10008bc4 = load i32, i32* @esi, align 4
  store i32 %v0_10008bc4, i32* %stack_var_-28, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v2_10008bc9 = sub i32 %v3_10008bbb, %arg1
  store i32 %v2_10008bc9, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10008bd0

dec_label_pc_10008bd0:                            ; preds = %dec_label_pc_10008bd0.dec_label_pc_10008bd0_crit_edge, %dec_label_pc_10008bc4
  %v2_10008bd2 = phi i32 [ %v2_10008bd2.pre, %dec_label_pc_10008bd0.dec_label_pc_10008bd0_crit_edge ], [ %v2_10008bc9, %dec_label_pc_10008bc4 ]
  %v4_10008bd0 = phi i32 [ %v0_10008bd6, %dec_label_pc_10008bd0.dec_label_pc_10008bd0_crit_edge ], [ %v2_10008bb7, %dec_label_pc_10008bc4 ]
  %v3_10008bd2 = phi i32 [ %v1_10008bd5, %dec_label_pc_10008bd0.dec_label_pc_10008bd0_crit_edge ], [ %arg1, %dec_label_pc_10008bc4 ]
  %v1_10008bd0 = inttoptr i32 %v3_10008bd2 to i8*
  %v2_10008bd0 = load i8, i8* %v1_10008bd0, align 1
  %v3_10008bd0 = zext i8 %v2_10008bd0 to i32
  %v5_10008bd0 = and i32 %v4_10008bd0, -256
  %v6_10008bd0 = or i32 %v3_10008bd0, %v5_10008bd0
  store i32 %v6_10008bd0, i32* %edx.global-to-local, align 4
  %v5_10008bd2 = add i32 %v3_10008bd2, %v2_10008bd2
  %v6_10008bd2 = inttoptr i32 %v5_10008bd2 to i8*
  store i8 %v2_10008bd0, i8* %v6_10008bd2, align 1
  %v0_10008bd5 = load i32, i32* @ecx, align 4
  %v1_10008bd5 = add i32 %v0_10008bd5, 1
  store i32 %v1_10008bd5, i32* @ecx, align 4
  %v0_10008bd6 = load i32, i32* %edx.global-to-local, align 4
  %v4_10008bd6 = trunc i32 %v0_10008bd6 to i8
  %v5_10008bd6 = icmp eq i8 %v4_10008bd6, 0
  %v1_10008bd8 = icmp eq i1 %v5_10008bd6, false
  br i1 %v1_10008bd8, label %dec_label_pc_10008bd0.dec_label_pc_10008bd0_crit_edge, label %dec_label_pc_10008bda

dec_label_pc_10008bd0.dec_label_pc_10008bd0_crit_edge: ; preds = %dec_label_pc_10008bd0
  %v2_10008bd2.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10008bd0

dec_label_pc_10008bda:                            ; preds = %dec_label_pc_10008bd0
  %v2_10008bda = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10008bda, i32* @esi, align 4
  %v0_10008be4.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008bdf

dec_label_pc_10008bdd:                            ; preds = %dec_label_pc_10008bad, %dec_label_pc_10008b90
  %v1_10008bea10 = phi i32 [ %v4_10008bba, %dec_label_pc_10008bad ], [ %v4_10008b97, %dec_label_pc_10008b90 ]
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008bdf

dec_label_pc_10008bdf:                            ; preds = %dec_label_pc_10008bdd, %dec_label_pc_10008bda
  %v1_10008bea = phi i32 [ %v1_10008bea10, %dec_label_pc_10008bdd ], [ %v4_10008bba, %dec_label_pc_10008bda ]
  %v0_10008be4 = phi i32 [ 0, %dec_label_pc_10008bdd ], [ %v0_10008be4.pre, %dec_label_pc_10008bda ]
  store i32 %arg2, i32* @ecx, align 4
  %v1_10008be2 = inttoptr i32 %arg2 to i32*
  %v2_10008be2 = load i32, i32* %v1_10008be2, align 4
  store i32 %v2_10008be2, i32* %edx.global-to-local, align 4
  store i32 %v0_10008be4, i32* %stack_var_-12, align 4
  store i32 %v16_10008b93, i32* %eax.global-to-local, align 4
  %v2_10008bea = add i32 %v1_10008bea, -4
  %v3_10008bea = inttoptr i32 %v2_10008bea to i32*
  store i32 %v16_10008b93, i32* %v3_10008bea, align 4
  %v0_10008beb = load i32, i32* @ebx, align 4
  store i32 %v0_10008beb, i32* @ecx, align 4
  %v0_10008bed = load i32, i32* %edx.global-to-local, align 4
  %v0_10008bf0 = load i32, i32* %stack_var_-12, align 4
  %v2_10008bf0 = call i32 @function_10008700(i32 %v0_10008bf0, i32 %v0_10008bed)
  store i32 %v2_10008bf0, i32* %eax.global-to-local, align 4
  ret i32 %v2_10008bf0
}

define i32 @function_10008c00(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008c00:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_10008c00 = load i32, i32* @ebp, align 4
  %v16_10008c03 = ptrtoint i32* %stack_var_-16 to i32
  %v13_10008c06 = icmp eq i32 %arg1, -1
  %v0_10008c0a = load i32, i32* @ebx, align 4
  %v0_10008c0b = load i32, i32* @ecx, align 4
  store i32 %v0_10008c0b, i32* @ebx, align 4
  %v1_10008c0d = icmp eq i1 %v13_10008c06, false
  br i1 %v1_10008c0d, label %dec_label_pc_10008c18, label %dec_label_pc_10008c0f

dec_label_pc_10008c0f:                            ; preds = %dec_label_pc_10008c00
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_10008c0a, i32* @ebx, align 4
  store i32 %v0_10008c00, i32* @ebp, align 4
  ret i32 0

dec_label_pc_10008c18:                            ; preds = %dec_label_pc_10008c00
  %v0_10008c18 = load i32, i32* @edi, align 4
  store i32 %v0_10008c18, i32* %stack_var_-24, align 4
  %v4_10008c18 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg2, i32* @edi, align 4
  %v1_10008c1c = icmp eq i32 %arg2, 0
  br i1 %v1_10008c1c, label %dec_label_pc_10008c39, label %dec_label_pc_10008c20

dec_label_pc_10008c20:                            ; preds = %dec_label_pc_10008c18
  store i32 %v16_10008c03, i32* %eax.global-to-local, align 4
  %v1_10008c24 = add i32 %v0_10008c0b, 64
  store i32 %v1_10008c24, i32* @ecx, align 4
  store i32 %arg2, i32* %stack_var_-16, align 4
  %v6_10008c2a = call i32 @function_100079e0(i32* nonnull %stack_var_-16, i32 %v0_10008c18, i32 %v0_10008c0a, i32 %arg2, i32 ptrtoint (i32* @5 to i32))
  %v1_10008c2f = and i32 %v6_10008c2a, 65535
  %v1_10008c39.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10008c39

dec_label_pc_10008c39:                            ; preds = %dec_label_pc_10008c18, %dec_label_pc_10008c20
  %v1_10008c39 = phi i32 [ %v1_10008c39.pre, %dec_label_pc_10008c20 ], [ %v4_10008c18, %dec_label_pc_10008c18 ]
  %storemerge = phi i32 [ %v1_10008c2f, %dec_label_pc_10008c20 ], [ 65535, %dec_label_pc_10008c18 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v0_10008c39 = load i32, i32* @esi, align 4
  %v2_10008c39 = add i32 %v1_10008c39, -4
  %v3_10008c39 = inttoptr i32 %v2_10008c39 to i32*
  store i32 %v0_10008c39, i32* %v3_10008c39, align 4
  %v0_10008c3a = load i32, i32* %eax.global-to-local, align 4
  %v1_10008c3a = and i32 %v0_10008c3a, 65535
  store i32 %v1_10008c3a, i32* @esi, align 4
  %v10_10008c3d = icmp eq i32 %v1_10008c3a, 65535
  br i1 %v10_10008c3d, label %dec_label_pc_10008c6e, label %dec_label_pc_10008c45

dec_label_pc_10008c45:                            ; preds = %dec_label_pc_10008c39
  %v2_10008c45 = add i32 %v1_10008c39, -8
  %v3_10008c45 = inttoptr i32 %v2_10008c45 to i32*
  store i32 %arg2, i32* %v3_10008c45, align 4
  %v1_10008c46 = add i32 %v1_10008c39, -12
  %v2_10008c46 = inttoptr i32 %v1_10008c46 to i32*
  store i32 ptrtoint ([78 x i8]* @global_var_10023580.305 to i32), i32* %v2_10008c46, align 4
  %v0_10008c4b = call i32 @Warning()
  store i32 %v0_10008c4b, i32* %eax.global-to-local, align 4
  %v0_10008c51 = load i32, i32* @ebx, align 4
  %v1_10008c51 = add i32 %v0_10008c51, 68
  %v2_10008c51 = inttoptr i32 %v1_10008c51 to i32*
  %v3_10008c51 = load i32, i32* %v2_10008c51, align 4
  %v0_10008c54 = load i32, i32* @esp, align 4
  %v1_10008c54 = add i32 %v0_10008c54, 8
  %v0_10008c57 = load i32, i32* @esi, align 4
  %v2_10008c59 = mul i32 %v0_10008c57, 2
  store i32 %v2_10008c59, i32* @ecx, align 4
  %v2_10008c5b = mul i32 %v0_10008c57, 16
  %v3_10008c5b = or i32 %v2_10008c5b, 12
  %v4_10008c5b = add i32 %v3_10008c5b, %v3_10008c51
  %v5_10008c5b = inttoptr i32 %v4_10008c5b to i32*
  %v6_10008c5b = load i32, i32* %v5_10008c5b, align 4
  store i32 %v6_10008c5b, i32* %eax.global-to-local, align 4
  %v1_10008c5f = add i32 %v0_10008c51, 24
  %v2_10008c5f = inttoptr i32 %v1_10008c5f to i32*
  %v3_10008c5f = load i32, i32* %v2_10008c5f, align 4
  store i32 %v3_10008c5f, i32* @ecx, align 4
  %v2_10008c62 = mul i32 %v6_10008c5b, 4
  %v3_10008c62 = add i32 %v3_10008c5f, %v2_10008c62
  %v4_10008c62 = inttoptr i32 %v3_10008c62 to i32*
  %v5_10008c62 = load i32, i32* %v4_10008c62, align 4
  store i32 %v5_10008c62, i32* %eax.global-to-local, align 4
  %v1_10008c65 = inttoptr i32 %v1_10008c54 to i32*
  %v2_10008c65 = load i32, i32* %v1_10008c65, align 4
  store i32 %v2_10008c65, i32* @esi, align 4
  %v3_10008c65 = add i32 %v0_10008c54, 12
  %v1_10008c66 = inttoptr i32 %v3_10008c65 to i32*
  %v2_10008c66 = load i32, i32* %v1_10008c66, align 4
  store i32 %v2_10008c66, i32* @edi, align 4
  %v3_10008c66 = add i32 %v0_10008c54, 16
  %v1_10008c67 = inttoptr i32 %v3_10008c66 to i32*
  %v2_10008c67 = load i32, i32* %v1_10008c67, align 4
  store i32 %v2_10008c67, i32* @ebx, align 4
  ret i32 %v5_10008c62

dec_label_pc_10008c6e:                            ; preds = %dec_label_pc_10008c39
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_10008c74 = load i32, i32* @ebx, align 4
  %v1_10008c74 = add i32 %v0_10008c74, 4
  %v2_10008c74 = inttoptr i32 %v1_10008c74 to i32*
  %v3_10008c74 = load i32, i32* %v2_10008c74, align 4
  store i32 %v3_10008c74, i32* %eax.global-to-local, align 4
  %v2_10008c77 = mul i32 %arg1, 12
  %v3_10008c77 = add i32 %v3_10008c74, %v2_10008c77
  %v4_10008c77 = inttoptr i32 %v3_10008c77 to i32*
  %v5_10008c77 = load i32, i32* %v4_10008c77, align 4
  %v12_10008c77 = icmp eq i32 %v5_10008c77, 0
  store i32 %v3_10008c77, i32* %eax.global-to-local, align 4
  br i1 %v12_10008c77, label %dec_label_pc_10008c8d, label %dec_label_pc_10008c80

dec_label_pc_10008c80:                            ; preds = %dec_label_pc_10008c6e
  %v2_10008c80 = load i32, i32* %v4_10008c77, align 4
  store i32 %v2_10008c80, i32* @ecx, align 4
  %v2_10008c82 = add i32 %v1_10008c39, -8
  %v3_10008c82 = inttoptr i32 %v2_10008c82 to i32*
  store i32 %v2_10008c80, i32* %v3_10008c82, align 4
  %v1_10008c83 = call i32 @function_1000bdb0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10008c83, i32* %eax.global-to-local, align 4
  %v0_10008c88 = load i32, i32* @esp, align 4
  %v1_10008c88 = add i32 %v0_10008c88, 4
  br label %dec_label_pc_10008c90

dec_label_pc_10008c8d:                            ; preds = %dec_label_pc_10008c6e
  %v1_10008c8d = add i32 %v3_10008c77, 4
  %v2_10008c8d = inttoptr i32 %v1_10008c8d to i32*
  %v3_10008c8d = load i32, i32* %v2_10008c8d, align 4
  store i32 %v3_10008c8d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008c90

dec_label_pc_10008c90:                            ; preds = %dec_label_pc_10008c8d, %dec_label_pc_10008c80
  %v1_10008d18 = phi i32 [ %v2_10008c39, %dec_label_pc_10008c8d ], [ %v1_10008c88, %dec_label_pc_10008c80 ]
  %v2_10008c90 = ptrtoint i32* %stack_var_-8 to i32
  %v2_10008c93 = add i32 %v1_10008d18, -4
  %v3_10008c93 = inttoptr i32 %v2_10008c93 to i32*
  store i32 %v2_10008c90, i32* %v3_10008c93, align 4
  %v2_10008c94 = add i32 %v1_10008d18, -8
  %v3_10008c94 = inttoptr i32 %v2_10008c94 to i32*
  store i32 %arg2, i32* %v3_10008c94, align 4
  %v3_10008c9a = load i32, i32* %stack_var_-8, align 4
  %v10_10008c9a = icmp eq i32 %v3_10008c9a, 0
  %v0_10008c9e = load i32, i32* %eax.global-to-local, align 4
  %v1_10008ca1 = icmp eq i1 %v10_10008c9a, false
  br i1 %v1_10008ca1, label %dec_label_pc_10008d18, label %dec_label_pc_10008ca3

dec_label_pc_10008ca3:                            ; preds = %dec_label_pc_10008c90
  %v1_10008ca3 = icmp eq i32 %v0_10008c9e, 0
  br i1 %v1_10008ca3, label %dec_label_pc_10008d18, label %dec_label_pc_10008ca7

dec_label_pc_10008ca7:                            ; preds = %dec_label_pc_10008ca3
  %v0_10008ca7 = load i32, i32* @ebx, align 4
  %v1_10008ca7 = add i32 %v0_10008ca7, 36
  %v2_10008ca7 = inttoptr i32 %v1_10008ca7 to i32*
  %v3_10008ca7 = load i32, i32* %v2_10008ca7, align 4
  store i32 %v3_10008ca7, i32* @edi, align 4
  %v1_10008caa = add i32 %v0_10008ca7, 28
  %v2_10008caa = inttoptr i32 %v1_10008caa to i32*
  %v3_10008caa = load i32, i32* %v2_10008caa, align 4
  store i32 %v3_10008caa, i32* @eax, align 4
  %v1_10008cad = add i32 %v3_10008ca7, 1
  store i32 %v1_10008cad, i32* @ecx, align 4
  %v7_10008cb2 = icmp sgt i32 %v1_10008cad, %v3_10008caa
  br i1 %v7_10008cb2, label %dec_label_pc_10008cb4, label %dec_label_pc_10008cc2

dec_label_pc_10008cb4:                            ; preds = %dec_label_pc_10008ca7
  %v2_10008cb6 = sub i32 %v3_10008ca7, %v3_10008caa
  %v1_10008cb8 = add i32 %v2_10008cb6, 1
  store i32 %v1_10008cb8, i32* %v3_10008c93, align 4
  %v0_10008cba = load i32, i32* @ebx, align 4
  %v1_10008cba = add i32 %v0_10008cba, 24
  store i32 %v1_10008cba, i32* @ecx, align 4
  %v1_10008cbd = call i32 @function_1000d920(i32 %v0_10008c9e)
  store i32 %v1_10008cbd, i32* %eax.global-to-local, align 4
  %v0_10008cc2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_10008cc2

dec_label_pc_10008cc2:                            ; preds = %dec_label_pc_10008ca7, %dec_label_pc_10008cb4
  %v18_10008cc2 = phi i32 [ %v0_10008ca7, %dec_label_pc_10008ca7 ], [ %v0_10008cc2.pre, %dec_label_pc_10008cb4 ]
  %v1_10008cc2 = add i32 %v18_10008cc2, 36
  %v2_10008cc2 = inttoptr i32 %v1_10008cc2 to i32*
  %v3_10008cc2 = load i32, i32* %v2_10008cc2, align 4
  %v4_10008cc2 = add i32 %v3_10008cc2, 1
  store i32 %v4_10008cc2, i32* %v2_10008cc2, align 4
  %v0_10008cc5 = load i32, i32* @ebx, align 4
  %v1_10008cc5 = add i32 %v0_10008cc5, 36
  %v2_10008cc5 = inttoptr i32 %v1_10008cc5 to i32*
  %v3_10008cc5 = load i32, i32* %v2_10008cc5, align 4
  store i32 %v3_10008cc5, i32* %eax.global-to-local, align 4
  %v1_10008cc8 = add i32 %v0_10008cc5, 24
  %v2_10008cc8 = inttoptr i32 %v1_10008cc8 to i32*
  %v3_10008cc8 = load i32, i32* %v2_10008cc8, align 4
  store i32 %v3_10008cc8, i32* @ecx, align 4
  %v1_10008ccb = load i32, i32* @edi, align 4
  %v2_10008ccb = sub i32 %v3_10008cc5, %v1_10008ccb
  %v1_10008ccd = add i32 %v2_10008ccb, -1
  store i32 %v1_10008ccd, i32* %eax.global-to-local, align 4
  %v2_10008cce = add i32 %v0_10008cc5, 40
  %v3_10008cce = inttoptr i32 %v2_10008cce to i32*
  store i32 %v3_10008cc8, i32* %v3_10008cce, align 4
  %tmp20 = icmp slt i32 %v1_10008ccd, 1
  br i1 %tmp20, label %dec_label_pc_10008cea, label %dec_label_pc_10008cd5

dec_label_pc_10008cd5:                            ; preds = %dec_label_pc_10008cc2
  %v2_10008cd7 = mul i32 %v1_10008ccd, 4
  store i32 %v2_10008cd7, i32* %eax.global-to-local, align 4
  %v0_10008cd9 = load i32, i32* @ecx, align 4
  %v1_10008cd9 = load i32, i32* @edi, align 4
  %v2_10008cd9 = mul i32 %v1_10008cd9, 4
  %v3_10008cd9 = add i32 %v2_10008cd9, %v0_10008cd9
  store i32 %v3_10008cd9, i32* @ecx, align 4
  %v1_10008cdc = load i32, i32* @esp, align 4
  %v2_10008cdc = add i32 %v1_10008cdc, -4
  %v3_10008cdc = inttoptr i32 %v2_10008cdc to i32*
  store i32 %v2_10008cd7, i32* %v3_10008cdc, align 4
  %v0_10008cdd = load i32, i32* @ecx, align 4
  %v2_10008cdd = add i32 %v1_10008cdc, -8
  %v3_10008cdd = inttoptr i32 %v2_10008cdd to i32*
  store i32 %v0_10008cdd, i32* %v3_10008cdd, align 4
  %v0_10008cde = load i32, i32* @ecx, align 4
  %v1_10008cde = add i32 %v0_10008cde, 4
  store i32 %v1_10008cde, i32* @ecx, align 4
  %v2_10008ce1 = add i32 %v1_10008cdc, -12
  %v3_10008ce1 = inttoptr i32 %v2_10008ce1 to i32*
  store i32 %v1_10008cde, i32* %v3_10008ce1, align 4
  %v1_10008ce2 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_10008ce2 = ptrtoint i32* %v1_10008ce2 to i32
  store i32 %v3_10008ce2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008cea

dec_label_pc_10008cea:                            ; preds = %dec_label_pc_10008cd5, %dec_label_pc_10008cc2
  %v0_10008cea = load i32, i32* @ebx, align 4
  %v1_10008cea = add i32 %v0_10008cea, 24
  %v2_10008cea = inttoptr i32 %v1_10008cea to i32*
  %v3_10008cea = load i32, i32* %v2_10008cea, align 4
  store i32 %v3_10008cea, i32* @ecx, align 4
  %v1_10008ced = load i32, i32* @edi, align 4
  %v2_10008ced = mul i32 %v1_10008ced, 4
  %v3_10008ced = add i32 %v2_10008ced, %v3_10008cea
  store i32 %v3_10008ced, i32* %eax.global-to-local, align 4
  %v1_10008cf0 = icmp eq i32 %v3_10008ced, 0
  br i1 %v1_10008cf0, label %dec_label_pc_10008cf9, label %dec_label_pc_10008cf4

dec_label_pc_10008cf4:                            ; preds = %dec_label_pc_10008cea
  %v2_10008cf7 = inttoptr i32 %v3_10008ced to i32*
  store i32 %v0_10008c9e, i32* %v2_10008cf7, align 4
  br label %dec_label_pc_10008cf9

dec_label_pc_10008cf9:                            ; preds = %dec_label_pc_10008cf4, %dec_label_pc_10008cea
  store i32 %arg2, i32* @ecx, align 4
  %v2_10008cfc = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_10008cfc, i32* %eax.global-to-local, align 4
  %v1_10008cff = load i32, i32* @esp, align 4
  %v2_10008cff = add i32 %v1_10008cff, -4
  %v3_10008cff = inttoptr i32 %v2_10008cff to i32*
  store i32 %v2_10008cfc, i32* %v3_10008cff, align 4
  %v0_10008d00 = load i32, i32* @ecx, align 4
  %v2_10008d00 = add i32 %v1_10008cff, -8
  %v3_10008d00 = inttoptr i32 %v2_10008d00 to i32*
  store i32 %v0_10008d00, i32* %v3_10008d00, align 4
  %v0_10008d01 = load i32, i32* @ebx, align 4
  %v1_10008d01 = add i32 %v0_10008d01, 64
  store i32 %v1_10008d01, i32* @ecx, align 4
  %v0_10008d04 = load i32, i32* @edi, align 4
  store i32 %v0_10008d04, i32* %stack_var_-12, align 4
  %v2_10008d07 = call i32 @function_10008b90(i32 %v0_10008d04, i32 ptrtoint (i32* @5 to i32))
  store i32 %v0_10008c9e, i32* %eax.global-to-local, align 4
  %v0_10008d0f = load i32, i32* @esp, align 4
  %v1_10008d0f = inttoptr i32 %v0_10008d0f to i32*
  %v2_10008d0f = load i32, i32* %v1_10008d0f, align 4
  store i32 %v2_10008d0f, i32* @esi, align 4
  %v3_10008d0f = add i32 %v0_10008d0f, 4
  %v1_10008d10 = inttoptr i32 %v3_10008d0f to i32*
  %v2_10008d10 = load i32, i32* %v1_10008d10, align 4
  store i32 %v2_10008d10, i32* @edi, align 4
  %v3_10008d10 = add i32 %v0_10008d0f, 8
  %v1_10008d11 = inttoptr i32 %v3_10008d10 to i32*
  %v2_10008d11 = load i32, i32* %v1_10008d11, align 4
  store i32 %v2_10008d11, i32* @ebx, align 4
  ret i32 %v0_10008c9e

dec_label_pc_10008d18:                            ; preds = %dec_label_pc_10008ca3, %dec_label_pc_10008c90
  store i32 %arg2, i32* %v3_10008c93, align 4
  store i32 ptrtoint ([44 x i8]* @global_var_10023550.306 to i32), i32* %v3_10008c94, align 4
  %v0_10008d1e = call i32 @Warning()
  store i32 %v0_10008d1e, i32* %eax.global-to-local, align 4
  %v0_10008d24 = load i32, i32* @esp, align 4
  %v1_10008d24 = add i32 %v0_10008d24, 8
  %v1_10008d27 = inttoptr i32 %v1_10008d24 to i32*
  %v2_10008d27 = load i32, i32* %v1_10008d27, align 4
  store i32 %v2_10008d27, i32* @esi, align 4
  %v3_10008d27 = add i32 %v0_10008d24, 12
  %v1_10008d28 = inttoptr i32 %v3_10008d27 to i32*
  %v2_10008d28 = load i32, i32* %v1_10008d28, align 4
  store i32 %v2_10008d28, i32* @edi, align 4
  %v3_10008d28 = add i32 %v0_10008d24, 16
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_10008d2b = inttoptr i32 %v3_10008d28 to i32*
  %v2_10008d2b = load i32, i32* %v1_10008d2b, align 4
  store i32 %v2_10008d2b, i32* @ebx, align 4
  ret i32 0
}

define i32 @function_10008d40(i32* %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10008d40:
  %eax.global-to-local = alloca i32, align 4
  %tmp8 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  store i32 %tmp8, i32* @esi, align 4
  %v2_10008d47 = load i32, i32* %arg1, align 4
  store i32 %v2_10008d47, i32* %eax.global-to-local, align 4
  %v1_10008d49 = inttoptr i32 %v2_10008d47 to i8*
  %v2_10008d49 = load i8, i8* %v1_10008d49, align 1
  %v9_10008d49 = icmp eq i8 %v2_10008d49, 0
  %v0_10008d4c = load i32, i32* @edi, align 4
  store i32 %v0_10008d4c, i32* %stack_var_-12, align 4
  %v4_10008d4c = ptrtoint i32* %stack_var_-12 to i32
  %v0_10008d4d = load i32, i32* @ecx, align 4
  store i32 %v0_10008d4d, i32* @edi, align 4
  br i1 %v9_10008d49, label %dec_label_pc_10008d74, label %dec_label_pc_10008d51

dec_label_pc_10008d51:                            ; preds = %dec_label_pc_10008d40, %dec_label_pc_10008d69
  %v1_10008d51 = phi i32 [ %v1_10008d51.pre, %dec_label_pc_10008d69 ], [ %v4_10008d4c, %dec_label_pc_10008d40 ]
  %v0_10008d51 = phi i32 [ %v3_10008d69, %dec_label_pc_10008d69 ], [ %v2_10008d47, %dec_label_pc_10008d40 ]
  %v2_10008d51 = add i32 %v1_10008d51, -4
  %v3_10008d51 = inttoptr i32 %v2_10008d51 to i32*
  store i32 %v0_10008d51, i32* %v3_10008d51, align 4
  %v0_10008d52 = load i32, i32* @edi, align 4
  store i32 %v0_10008d52, i32* @ecx, align 4
  %v1_10008d54 = call i32 @function_10008260(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10008d54, i32* %eax.global-to-local, align 4
  %v0_10008d59 = load i32, i32* @esi, align 4
  %v1_10008d59 = add i32 %v0_10008d59, 4
  %v2_10008d59 = inttoptr i32 %v1_10008d59 to i32*
  %v3_10008d59 = load i32, i32* %v2_10008d59, align 4
  %v1_10008d5c = load i32, i32* @esp, align 4
  %v2_10008d5c = add i32 %v1_10008d5c, -4
  %v3_10008d5c = inttoptr i32 %v2_10008d5c to i32*
  store i32 %v3_10008d59, i32* %v3_10008d5c, align 4
  %v0_10008d5d = load i32, i32* %eax.global-to-local, align 4
  %v2_10008d5d = add i32 %v1_10008d5c, -8
  %v3_10008d5d = inttoptr i32 %v2_10008d5d to i32*
  store i32 %v0_10008d5d, i32* %v3_10008d5d, align 4
  %v0_10008d5e = load i32, i32* @edi, align 4
  store i32 %v0_10008d5e, i32* @ecx, align 4
  %v2_10008d60 = call i32 @function_10008c00(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008d60, i32* %eax.global-to-local, align 4
  %v1_10008d65 = icmp eq i32 %v2_10008d60, 0
  %v0_10008d7c = load i32, i32* @esi, align 4
  br i1 %v1_10008d65, label %dec_label_pc_10008d7c, label %dec_label_pc_10008d69

dec_label_pc_10008d69:                            ; preds = %dec_label_pc_10008d51
  %v1_10008d69 = add i32 %v0_10008d7c, 8
  %v2_10008d69 = inttoptr i32 %v1_10008d69 to i32*
  %v3_10008d69 = load i32, i32* %v2_10008d69, align 4
  store i32 %v3_10008d69, i32* %eax.global-to-local, align 4
  store i32 %v1_10008d69, i32* @esi, align 4
  %v1_10008d6f = inttoptr i32 %v3_10008d69 to i8*
  %v2_10008d6f = load i8, i8* %v1_10008d6f, align 1
  %v9_10008d6f = icmp eq i8 %v2_10008d6f, 0
  %v1_10008d72 = icmp eq i1 %v9_10008d6f, false
  %v1_10008d51.pre = load i32, i32* @esp, align 4
  br i1 %v1_10008d72, label %dec_label_pc_10008d51, label %dec_label_pc_10008d74

dec_label_pc_10008d74:                            ; preds = %dec_label_pc_10008d69, %dec_label_pc_10008d40
  %v0_10008d75 = phi i32 [ %v2_10008d47, %dec_label_pc_10008d40 ], [ %v3_10008d69, %dec_label_pc_10008d69 ]
  %v0_10008d74 = phi i32 [ %v4_10008d4c, %dec_label_pc_10008d40 ], [ %v1_10008d51.pre, %dec_label_pc_10008d69 ]
  %v1_10008d74 = inttoptr i32 %v0_10008d74 to i32*
  %v2_10008d74 = load i32, i32* %v1_10008d74, align 4
  store i32 %v2_10008d74, i32* @edi, align 4
  %v3_10008d74 = add i32 %v0_10008d74, 4
  %v1_10008d75 = and i32 %v0_10008d75, -256
  %v2_10008d75 = or i32 %v1_10008d75, 1
  store i32 %v2_10008d75, i32* %eax.global-to-local, align 4
  %v1_10008d77 = inttoptr i32 %v3_10008d74 to i32*
  %v2_10008d77 = load i32, i32* %v1_10008d77, align 4
  store i32 %v2_10008d77, i32* @esi, align 4
  %v3_10008d77 = add i32 %v0_10008d74, 8
  %v1_10008d78 = inttoptr i32 %v3_10008d77 to i32*
  %v2_10008d78 = load i32, i32* %v1_10008d78, align 4
  store i32 %v2_10008d78, i32* @ebp, align 4
  ret i32 %v2_10008d75

dec_label_pc_10008d7c:                            ; preds = %dec_label_pc_10008d51
  %v1_10008d7c = inttoptr i32 %v0_10008d7c to i32*
  %v2_10008d7c = load i32, i32* %v1_10008d7c, align 4
  %v1_10008d7e = add i32 %v0_10008d7c, 4
  %v2_10008d7e = inttoptr i32 %v1_10008d7e to i32*
  %v3_10008d7e = load i32, i32* %v2_10008d7e, align 4
  store i32 %v3_10008d7e, i32* %eax.global-to-local, align 4
  %v1_10008d81 = load i32, i32* @esp, align 4
  %v2_10008d81 = add i32 %v1_10008d81, -4
  %v3_10008d81 = inttoptr i32 %v2_10008d81 to i32*
  store i32 %v2_10008d7c, i32* %v3_10008d81, align 4
  %v0_10008d82 = load i32, i32* %eax.global-to-local, align 4
  %v2_10008d82 = add i32 %v1_10008d81, -8
  %v3_10008d82 = inttoptr i32 %v2_10008d82 to i32*
  store i32 %v0_10008d82, i32* %v3_10008d82, align 4
  %v1_10008d83 = add i32 %v1_10008d81, -12
  %v2_10008d83 = inttoptr i32 %v1_10008d83 to i32*
  store i32 ptrtoint ([58 x i8]* @global_var_100235d0.307 to i32), i32* %v2_10008d83, align 4
  %v0_10008d88 = call i32 @Warning()
  store i32 %v0_10008d88, i32* %eax.global-to-local, align 4
  %v0_10008d8e = load i32, i32* @esp, align 4
  %v1_10008d8e = add i32 %v0_10008d8e, 12
  %v1_10008d91 = inttoptr i32 %v1_10008d8e to i32*
  %v2_10008d91 = load i32, i32* %v1_10008d91, align 4
  store i32 %v2_10008d91, i32* @edi, align 4
  %v3_10008d91 = add i32 %v0_10008d8e, 16
  %v12_10008d92 = and i32 %v0_10008d88, -256
  store i32 %v12_10008d92, i32* %eax.global-to-local, align 4
  %v1_10008d94 = inttoptr i32 %v3_10008d91 to i32*
  %v2_10008d94 = load i32, i32* %v1_10008d94, align 4
  store i32 %v2_10008d94, i32* @esi, align 4
  %v3_10008d94 = add i32 %v0_10008d8e, 20
  %v1_10008d95 = inttoptr i32 %v3_10008d94 to i32*
  %v2_10008d95 = load i32, i32* %v1_10008d95, align 4
  store i32 %v2_10008d95, i32* @ebp, align 4
  ret i32 %v12_10008d92
}

define i32 @function_10008da0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008da0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-14 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %v15_10008da3 = ptrtoint i8* %stack_var_-100 to i32
  %v0_10008daf = load i32, i32* @ecx, align 4
  store i32 %v0_10008daf, i32* @ebx, align 4
  %v2_10008db2 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_10008db2, i32* @ecx, align 4
  store i8 0, i8* %stack_var_-100, align 1
  %v3_10008dc8 = call i32 @function_1000efc0(i32 0, i32 32, i32 1)
  store i32 0, i32* @eax, align 4
  %v0_10008dd2 = load i32, i32* @ebx, align 4
  %v1_10008dd2 = add i32 %v0_10008dd2, 36
  %v2_10008dd2 = inttoptr i32 %v1_10008dd2 to i32*
  %v3_10008dd2 = load i32, i32* %v2_10008dd2, align 4
  %v4_10008dd2 = load i32, i32* @esi, align 4
  %v8_10008dd5 = icmp sgt i32 %v3_10008dd2, %v4_10008dd2
  br i1 %v8_10008dd5, label %dec_label_pc_10008e25.preheader, label %dec_label_pc_10008dd7

dec_label_pc_10008e25.preheader:                  ; preds = %dec_label_pc_10008da0
  %v2_10008e36 = ptrtoint i32* %stack_var_-8 to i32
  %v2_10008e8e = ptrtoint i32* %stack_var_-12 to i32
  %v2_10008ec6 = ptrtoint i32* %stack_var_-14 to i32
  br label %dec_label_pc_10008e61

dec_label_pc_10008dd7:                            ; preds = %dec_label_pc_10008f1e, %dec_label_pc_10008da0
  %stack_var_-20.0 = phi i32 [ %v1_10008f11, %dec_label_pc_10008f1e ], [ 0, %dec_label_pc_10008da0 ]
  %v1_10008dda = load i32, i32* @esp, align 4
  %v2_10008dda = add i32 %v1_10008dda, -4
  %v3_10008dda = inttoptr i32 %v2_10008dda to i32*
  store i32 %v15_10008da3, i32* %v3_10008dda, align 4
  %v0_10008ddb = load i32, i32* @ebx, align 4
  store i32 %v0_10008ddb, i32* @ecx, align 4
  %v1_10008ddd = call i32 @function_100077e0(i32 %stack_var_-20.0)
  store i32 %v1_10008ddd, i32* %eax.global-to-local, align 4
  store i32 %v15_10008da3, i32* %edx.global-to-local, align 4
  %v1_10008de5 = load i32, i32* @esp, align 4
  %v2_10008de5 = add i32 %v1_10008de5, -4
  %v3_10008de5 = inttoptr i32 %v2_10008de5 to i32*
  store i32 %v15_10008da3, i32* %v3_10008de5, align 4
  %v0_10008de6 = load i32, i32* @ebx, align 4
  store i32 %v0_10008de6, i32* @ecx, align 4
  %v1_10008de8 = call i32 @function_10008810(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10008de8, i32* %eax.global-to-local, align 4
  store i32 %v2_10008db2, i32* @ecx, align 4
  %v0_10008df0 = call i32 @function_1000ef30()
  store i32 %v0_10008df0, i32* @eax, align 4
  store i32 %v15_10008da3, i32* @ecx, align 4
  %v0_10008df8 = call i32 @function_10007970()
  store i32 %v0_10008df8, i32* %eax.global-to-local, align 4
  %v4_10008dfd = load i32, i32* @esi, align 4
  %v5_10008e00 = icmp sgt i32 %v4_10008dfd, 32
  br i1 %v5_10008e00, label %dec_label_pc_10008e19, label %dec_label_pc_10008e02

dec_label_pc_10008e02:                            ; preds = %dec_label_pc_10008dd7
  %v3_10008e02 = load i8, i8* %stack_var_-100, align 1
  %v4_10008e02 = sext i8 %v3_10008e02 to i32
  store i32 %v4_10008e02, i32* %eax.global-to-local, align 4
  %v12_10008e05 = icmp eq i32 %v4_10008e02, %v4_10008dfd
  br i1 %v12_10008e05, label %dec_label_pc_10008e19, label %dec_label_pc_10008e09

dec_label_pc_10008e09:                            ; preds = %dec_label_pc_10008e02
  %v0_10008e09 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10008e09, i32* @ecx, align 4
  %v1_10008e0f = inttoptr i32 %v0_10008e09 to i32*
  %v2_10008e0f = load i32, i32* %v1_10008e0f, align 4
  store i32 %v2_10008e0f, i32* @ecx, align 4
  %v1_10008e11 = inttoptr i32 %v2_10008e0f to i32*
  %v2_10008e11 = load i32, i32* %v1_10008e11, align 4
  store i32 %v2_10008e11, i32* %edx.global-to-local, align 4
  %v1_10008e13 = load i32, i32* @esp, align 4
  %v2_10008e13 = add i32 %v1_10008e13, -4
  %v3_10008e13 = inttoptr i32 %v2_10008e13 to i32*
  store i32 %v4_10008e02, i32* %v3_10008e13, align 4
  %v0_10008e14 = load i32, i32* %edx.global-to-local, align 4
  %v1_10008e14 = add i32 %v0_10008e14, 20
  %v2_10008e14 = inttoptr i32 %v1_10008e14 to i32*
  %v3_10008e14 = load i32, i32* %v2_10008e14, align 4
  store i32 %v3_10008e14, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008e19

dec_label_pc_10008e19:                            ; preds = %dec_label_pc_10008e09, %dec_label_pc_10008e02, %dec_label_pc_10008dd7
  %v0_10008e1b = phi i32 [ %v3_10008e14, %dec_label_pc_10008e09 ], [ %v4_10008e02, %dec_label_pc_10008e02 ], [ %v0_10008df8, %dec_label_pc_10008dd7 ]
  %v0_10008e19 = load i32, i32* @esp, align 4
  %v1_10008e19 = inttoptr i32 %v0_10008e19 to i32*
  %v2_10008e19 = load i32, i32* %v1_10008e19, align 4
  store i32 %v2_10008e19, i32* @edi, align 4
  %v3_10008e19 = add i32 %v0_10008e19, 4
  %v1_10008e1a = inttoptr i32 %v3_10008e19 to i32*
  %v2_10008e1a = load i32, i32* %v1_10008e1a, align 4
  store i32 %v2_10008e1a, i32* @esi, align 4
  %v3_10008e1a = add i32 %v0_10008e19, 8
  %v1_10008e1b = and i32 %v0_10008e1b, -256
  %v2_10008e1b = or i32 %v1_10008e1b, 1
  store i32 %v2_10008e1b, i32* %eax.global-to-local, align 4
  %v1_10008e1d = inttoptr i32 %v3_10008e1a to i32*
  %v2_10008e1d = load i32, i32* %v1_10008e1d, align 4
  store i32 %v2_10008e1d, i32* @ebx, align 4
  ret i32 %v2_10008e1b

dec_label_pc_10008e22:                            ; preds = %dec_label_pc_10008f0e
  store i32 %v1_10008f11, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008e61

dec_label_pc_10008e61:                            ; preds = %dec_label_pc_10008e22, %dec_label_pc_10008e25.preheader
  %v0_10008e25 = phi i32 [ %v1_10008f15, %dec_label_pc_10008e22 ], [ %v0_10008dd2, %dec_label_pc_10008e25.preheader ]
  %v1_10008e28 = phi i32 [ %v1_10008f11, %dec_label_pc_10008e22 ], [ 0, %dec_label_pc_10008e25.preheader ]
  %v1_10008e25 = add i32 %v0_10008e25, 24
  %v2_10008e25 = inttoptr i32 %v1_10008e25 to i32*
  %v3_10008e25 = load i32, i32* %v2_10008e25, align 4
  store i32 %v3_10008e25, i32* @ecx, align 4
  %v1_10008e2b = load i32, i32* @esp, align 4
  %v2_10008e2b = add i32 %v1_10008e2b, -4
  %v3_10008e2b = inttoptr i32 %v2_10008e2b to i32*
  store i32 %v1_10008e28, i32* %v3_10008e2b, align 4
  %v0_10008e2c = load i32, i32* @ebx, align 4
  store i32 %v0_10008e2c, i32* @ecx, align 4
  %v1_10008e2e = call i32 @function_100084c0(i32 %v1_10008e28)
  store i32 %v1_10008e2e, i32* %eax.global-to-local, align 4
  store i32 %v1_10008e2e, i32* @edi, align 4
  %v1_10008e35 = load i32, i32* @esp, align 4
  %v2_10008e35 = add i32 %v1_10008e35, -4
  %v3_10008e35 = inttoptr i32 %v2_10008e35 to i32*
  store i32 %v1_10008e2e, i32* %v3_10008e35, align 4
  store i32 %v2_10008e36, i32* %edx.global-to-local, align 4
  %v2_10008e39 = add i32 %v1_10008e35, -8
  %v3_10008e39 = inttoptr i32 %v2_10008e39 to i32*
  store i32 %v2_10008e36, i32* %v3_10008e39, align 4
  store i32 %v2_10008db2, i32* @ecx, align 4
  %v0_10008e3d = load i32, i32* @edi, align 4
  %v4_10008e3d = trunc i32 %v0_10008e3d to i8
  %v4_10008e40 = call i32 @function_1000f030(i8 %v4_10008e3d, i32 ptrtoint (i32* @5 to i32))
  %v3_10008e45 = load i32, i32* %stack_var_-8, align 4
  %v4_10008e45 = and i32 %v3_10008e45, 65535
  store i32 0, i32* @ecx, align 4
  %v1_10008e50 = add nuw nsw i32 %v4_10008e45, 1
  store i32 %v1_10008e50, i32* %eax.global-to-local, align 4
  %v1_10008e57 = load i32, i32* @esp, align 4
  %v2_10008e57 = add i32 %v1_10008e57, -4
  %v3_10008e57 = inttoptr i32 %v2_10008e57 to i32*
  store i32 %v1_10008e50, i32* %v3_10008e57, align 4
  %v0_10008e58 = load i32, i32* @ecx, align 4
  %v2_10008e58 = add i32 %v1_10008e57, -8
  %v3_10008e58 = inttoptr i32 %v2_10008e58 to i32*
  store i32 %v0_10008e58, i32* %v3_10008e58, align 4
  store i32 %v15_10008da3, i32* @ecx, align 4
  %v2_10008e5c = call i32 @function_10007ae0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008e5c, i32* %eax.global-to-local, align 4
  %v0_10008e61 = load i32, i32* @esi, align 4
  %v1_10008e61 = inttoptr i32 %v0_10008e61 to i32*
  %v2_10008e61 = load i32, i32* %v1_10008e61, align 4
  store i32 %v2_10008e61, i32* %eax.global-to-local, align 4
  %v1_10008e63 = add i32 %v2_10008e61, 20
  %v2_10008e63 = inttoptr i32 %v1_10008e63 to i32*
  %v3_10008e63 = load i32, i32* %v2_10008e63, align 4
  store i32 %v3_10008e63, i32* %edx.global-to-local, align 4
  store i32 %v0_10008e61, i32* @ecx, align 4
  store i32 %v2_10008e61, i32* @esi, align 4
  %v1_10008e6c = icmp eq i32 %v2_10008e61, 0
  br i1 %v1_10008e6c, label %dec_label_pc_10008f0e, label %dec_label_pc_10008e74

dec_label_pc_10008e74:                            ; preds = %dec_label_pc_10008e61
  %v1_10008e74 = add i32 %v2_10008e61, 4
  %v2_10008e74 = inttoptr i32 %v1_10008e74 to i32*
  %v3_10008e74 = load i32, i32* %v2_10008e74, align 4
  store i32 %v3_10008e74, i32* %eax.global-to-local, align 4
  %v1_10008e77 = icmp eq i32 %v3_10008e74, 0
  br i1 %v1_10008e77, label %dec_label_pc_10008f0e, label %dec_label_pc_10008e84.preheader

dec_label_pc_10008e84.preheader:                  ; preds = %dec_label_pc_10008e74
  %v1_10008e847 = inttoptr i32 %v3_10008e74 to i8*
  %v2_10008e848 = load i8, i8* %v1_10008e847, align 1
  %v9_10008e849 = icmp eq i8 %v2_10008e848, 0
  br i1 %v9_10008e849, label %dec_label_pc_10008f0e, label %dec_label_pc_10008e8d.lr.ph

dec_label_pc_10008e8d.lr.ph:                      ; preds = %dec_label_pc_10008e84.preheader
  %sext = mul i32 %v0_10008e3d, 16777216
  %v4_10008e81 = sdiv i32 %sext, 16777216
  %v0_10008e8d.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_10008eb8

dec_label_pc_10008e81:                            ; preds = %dec_label_pc_10008f00
  store i32 %v4_10008e81, i32* @edi, align 4
  %v1_10008e84 = inttoptr i32 %v3_10008f00 to i8*
  %v2_10008e84 = load i8, i8* %v1_10008e84, align 1
  %v9_10008e84 = icmp eq i8 %v2_10008e84, 0
  br i1 %v9_10008e84, label %dec_label_pc_10008f0e, label %dec_label_pc_10008eb8

dec_label_pc_10008eb8:                            ; preds = %dec_label_pc_10008e81, %dec_label_pc_10008e8d.lr.ph
  %v0_10008e8d = phi i32 [ %v0_10008e8d.pre, %dec_label_pc_10008e8d.lr.ph ], [ %v4_10008e81, %dec_label_pc_10008e81 ]
  %v1_10008e8d = load i32, i32* @esp, align 4
  %v2_10008e8d = add i32 %v1_10008e8d, -4
  %v3_10008e8d = inttoptr i32 %v2_10008e8d to i32*
  store i32 %v0_10008e8d, i32* %v3_10008e8d, align 4
  store i32 %v2_10008e8e, i32* %eax.global-to-local, align 4
  %v2_10008e91 = add i32 %v1_10008e8d, -8
  %v3_10008e91 = inttoptr i32 %v2_10008e91 to i32*
  store i32 %v2_10008e8e, i32* %v3_10008e91, align 4
  store i32 %v2_10008db2, i32* @ecx, align 4
  %v2_10008e95 = call i32 @function_1000f030(i8 ptrtoint (i32* @5 to i8), i32 ptrtoint (i32* @5 to i32))
  %v3_10008e9a = load i32, i32* %stack_var_-12, align 4
  %v4_10008e9a = and i32 %v3_10008e9a, 65535
  store i32 %v4_10008e9a, i32* @edi, align 4
  store i32 0, i32* @ecx, align 4
  %v1_10008ea5 = add nuw nsw i32 %v4_10008e9a, 1
  store i32 %v1_10008ea5, i32* %eax.global-to-local, align 4
  %v1_10008eae = load i32, i32* @esp, align 4
  %v2_10008eae = add i32 %v1_10008eae, -4
  %v3_10008eae = inttoptr i32 %v2_10008eae to i32*
  store i32 %v1_10008ea5, i32* %v3_10008eae, align 4
  %v0_10008eaf = load i32, i32* @ecx, align 4
  %v2_10008eaf = add i32 %v1_10008eae, -8
  %v3_10008eaf = inttoptr i32 %v2_10008eaf to i32*
  store i32 %v0_10008eaf, i32* %v3_10008eaf, align 4
  store i32 %v15_10008da3, i32* @ecx, align 4
  %v2_10008eb3 = call i32 @function_10007ae0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008eb3, i32* %eax.global-to-local, align 4
  %v0_10008eb8 = load i32, i32* @esi, align 4
  %v1_10008eb8 = add i32 %v0_10008eb8, 4
  %v2_10008eb8 = inttoptr i32 %v1_10008eb8 to i32*
  %v3_10008eb8 = load i32, i32* %v2_10008eb8, align 4
  %v1_10008ebb = load i32, i32* @esp, align 4
  %v2_10008ebb = add i32 %v1_10008ebb, -4
  %v3_10008ebb = inttoptr i32 %v2_10008ebb to i32*
  store i32 %v3_10008eb8, i32* %v3_10008ebb, align 4
  %v3_10008ebc = load i8, i8* %stack_var_-100, align 1
  %v4_10008ebc = sext i8 %v3_10008ebc to i32
  store i32 %v4_10008ebc, i32* @ecx, align 4
  %v0_10008ebf = load i32, i32* @edi, align 4
  store i32 %v2_10008ec6, i32* %edx.global-to-local, align 4
  %v2_10008ec9 = mul i32 %v0_10008ebf, 7
  store i32 %v2_10008ec9, i32* %eax.global-to-local, align 4
  %v2_10008ecb = add i32 %v1_10008ebb, -8
  %v3_10008ecb = inttoptr i32 %v2_10008ecb to i32*
  store i32 %v2_10008ec6, i32* %v3_10008ecb, align 4
  %v0_10008ecc = load i32, i32* @ecx, align 4
  %v1_10008ecc = load i32, i32* %eax.global-to-local, align 4
  %v2_10008ecc = mul i32 %v1_10008ecc, 8
  %v3_10008ecc = add i32 %v2_10008ecc, %v0_10008ecc
  store i32 %v3_10008ecc, i32* @ecx, align 4
  %v2_10008ecf = call i32 @function_1000f030(i8 ptrtoint (i32* @5 to i8), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008ecf, i32* %eax.global-to-local, align 4
  %v0_10008ed4 = load i32, i32* @esi, align 4
  %v1_10008ed4 = add i32 %v0_10008ed4, 4
  %v2_10008ed4 = inttoptr i32 %v1_10008ed4 to i32*
  %v3_10008ed4 = load i32, i32* %v2_10008ed4, align 4
  store i32 %v3_10008ed4, i32* %edx.global-to-local, align 4
  %v0_10008ed7 = load i32, i32* @esp, align 4
  %v1_10008ed7 = add i32 %v0_10008ed7, -4
  %v2_10008ed7 = inttoptr i32 %v1_10008ed7 to i32*
  store i32 0, i32* %v2_10008ed7, align 4
  %v0_10008ed9 = load i32, i32* %edx.global-to-local, align 4
  %v2_10008ed9 = add i32 %v0_10008ed7, -8
  %v3_10008ed9 = inttoptr i32 %v2_10008ed9 to i32*
  store i32 %v0_10008ed9, i32* %v3_10008ed9, align 4
  %v2_10008eda = call i32 @function_100085f0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008eda, i32* %eax.global-to-local, align 4
  %v1_10008ee2 = icmp eq i32 %v2_10008eda, 0
  %v1_10008ee4 = icmp eq i1 %v1_10008ee2, false
  br i1 %v1_10008ee4, label %dec_label_pc_10008f00, label %dec_label_pc_10008ee6

dec_label_pc_10008ee6:                            ; preds = %dec_label_pc_10008eb8
  %v0_10008edf = load i32, i32* @esp, align 4
  %v0_10008ee6 = load i32, i32* @esi, align 4
  %v1_10008ee6 = inttoptr i32 %v0_10008ee6 to i32*
  %v2_10008ee6 = load i32, i32* %v1_10008ee6, align 4
  store i32 %v2_10008ee6, i32* %eax.global-to-local, align 4
  %v2_10008ee8 = add i32 %v0_10008edf, 4
  %v3_10008ee8 = inttoptr i32 %v2_10008ee8 to i32*
  store i32 %v2_10008ee6, i32* %v3_10008ee8, align 4
  %v0_10008ee9 = load i32, i32* @ebx, align 4
  store i32 %v0_10008ee9, i32* @ecx, align 4
  %v1_10008eeb = call i32 @function_10008260(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10008eeb, i32* %eax.global-to-local, align 4
  %v0_10008ef0 = load i32, i32* @esi, align 4
  %v1_10008ef0 = add i32 %v0_10008ef0, 4
  %v2_10008ef0 = inttoptr i32 %v1_10008ef0 to i32*
  %v3_10008ef0 = load i32, i32* %v2_10008ef0, align 4
  %v1_10008ef3 = load i32, i32* @esp, align 4
  %v2_10008ef3 = add i32 %v1_10008ef3, -4
  %v3_10008ef3 = inttoptr i32 %v2_10008ef3 to i32*
  store i32 %v3_10008ef0, i32* %v3_10008ef3, align 4
  %v0_10008ef4 = load i32, i32* %eax.global-to-local, align 4
  %v2_10008ef4 = add i32 %v1_10008ef3, -8
  %v3_10008ef4 = inttoptr i32 %v2_10008ef4 to i32*
  store i32 %v0_10008ef4, i32* %v3_10008ef4, align 4
  %v0_10008ef5 = load i32, i32* @ebx, align 4
  store i32 %v0_10008ef5, i32* @ecx, align 4
  %v2_10008ef7 = call i32 @function_10008c00(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10008ef7, i32* %eax.global-to-local, align 4
  %v1_10008efc = icmp eq i32 %v2_10008ef7, 0
  br i1 %v1_10008efc, label %dec_label_pc_10008f25, label %dec_label_pc_10008f00

dec_label_pc_10008f00:                            ; preds = %dec_label_pc_10008ee6, %dec_label_pc_10008eb8
  %v0_10008f00 = load i32, i32* @esi, align 4
  %v1_10008f00 = add i32 %v0_10008f00, 12
  %v2_10008f00 = inttoptr i32 %v1_10008f00 to i32*
  %v3_10008f00 = load i32, i32* %v2_10008f00, align 4
  store i32 %v3_10008f00, i32* %eax.global-to-local, align 4
  %v1_10008f03 = add i32 %v0_10008f00, 8
  store i32 %v1_10008f03, i32* @esi, align 4
  %v1_10008f06 = icmp eq i32 %v3_10008f00, 0
  %v1_10008f08 = icmp eq i1 %v1_10008f06, false
  br i1 %v1_10008f08, label %dec_label_pc_10008e81, label %dec_label_pc_10008f0e

dec_label_pc_10008f0e:                            ; preds = %dec_label_pc_10008e81, %dec_label_pc_10008f00, %dec_label_pc_10008e84.preheader, %dec_label_pc_10008e74, %dec_label_pc_10008e61
  %v1_10008f11 = add i32 %v1_10008e28, 1
  store i32 %v1_10008f11, i32* @eax, align 4
  %v1_10008f15 = load i32, i32* @ebx, align 4
  %v2_10008f15 = add i32 %v1_10008f15, 36
  %v3_10008f15 = inttoptr i32 %v2_10008f15 to i32*
  %v4_10008f15 = load i32, i32* %v3_10008f15, align 4
  %v5_10008f18 = icmp slt i32 %v1_10008f11, %v4_10008f15
  br i1 %v5_10008f18, label %dec_label_pc_10008e22, label %dec_label_pc_10008f1e

dec_label_pc_10008f1e:                            ; preds = %dec_label_pc_10008f0e
  br label %dec_label_pc_10008dd7

dec_label_pc_10008f25:                            ; preds = %dec_label_pc_10008ee6
  store i32 %v4_10008e81, i32* %edx.global-to-local, align 4
  %v0_10008f28 = load i32, i32* @esi, align 4
  %v1_10008f28 = inttoptr i32 %v0_10008f28 to i32*
  %v2_10008f28 = load i32, i32* %v1_10008f28, align 4
  store i32 %v2_10008f28, i32* %eax.global-to-local, align 4
  %v1_10008f2a = add i32 %v0_10008f28, 4
  %v2_10008f2a = inttoptr i32 %v1_10008f2a to i32*
  %v3_10008f2a = load i32, i32* %v2_10008f2a, align 4
  store i32 %v3_10008f2a, i32* @ecx, align 4
  %v1_10008f2d = load i32, i32* @esp, align 4
  %v2_10008f2d = add i32 %v1_10008f2d, -4
  %v3_10008f2d = inttoptr i32 %v2_10008f2d to i32*
  store i32 %v4_10008e81, i32* %v3_10008f2d, align 4
  %v0_10008f2e = load i32, i32* %eax.global-to-local, align 4
  %v2_10008f2e = add i32 %v1_10008f2d, -8
  %v3_10008f2e = inttoptr i32 %v2_10008f2e to i32*
  store i32 %v0_10008f2e, i32* %v3_10008f2e, align 4
  %v0_10008f2f = load i32, i32* @ecx, align 4
  %v2_10008f2f = add i32 %v1_10008f2d, -12
  %v3_10008f2f = inttoptr i32 %v2_10008f2f to i32*
  store i32 %v0_10008f2f, i32* %v3_10008f2f, align 4
  %v1_10008f30 = add i32 %v1_10008f2d, -16
  %v2_10008f30 = inttoptr i32 %v1_10008f30 to i32*
  store i32 ptrtoint ([56 x i8]* @global_var_1002360c.308 to i32), i32* %v2_10008f30, align 4
  %v0_10008f35 = call i32 @Warning()
  store i32 %v0_10008f35, i32* %eax.global-to-local, align 4
  store i32 %v2_10008db2, i32* @ecx, align 4
  %v0_10008f41 = call i32 @function_1000ef30()
  store i32 %v0_10008f41, i32* @eax, align 4
  store i32 %v15_10008da3, i32* @ecx, align 4
  %v0_10008f49 = call i32 @function_10007970()
  %v3_10008f54 = load i8, i8* %stack_var_-100, align 1
  %v4_10008f54 = sext i8 %v3_10008f54 to i32
  store i32 %v4_10008f54, i32* %eax.global-to-local, align 4
  %v1_10008f57 = icmp eq i8 %v3_10008f54, 0
  br i1 %v1_10008f57, label %dec_label_pc_10008f25.dec_label_pc_10008f6b_crit_edge, label %dec_label_pc_10008f5b

dec_label_pc_10008f25.dec_label_pc_10008f6b_crit_edge: ; preds = %dec_label_pc_10008f25
  %v0_10008f6b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10008f6b

dec_label_pc_10008f5b:                            ; preds = %dec_label_pc_10008f25
  %v0_10008f5b = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10008f5b, i32* %edx.global-to-local, align 4
  %v1_10008f61 = inttoptr i32 %v0_10008f5b to i32*
  %v2_10008f61 = load i32, i32* %v1_10008f61, align 4
  store i32 %v2_10008f61, i32* @ecx, align 4
  %v1_10008f63 = inttoptr i32 %v2_10008f61 to i32*
  %v2_10008f63 = load i32, i32* %v1_10008f63, align 4
  store i32 %v2_10008f63, i32* %edx.global-to-local, align 4
  %v1_10008f65 = load i32, i32* @esp, align 4
  %v2_10008f65 = add i32 %v1_10008f65, -4
  %v3_10008f65 = inttoptr i32 %v2_10008f65 to i32*
  store i32 %v4_10008f54, i32* %v3_10008f65, align 4
  %v0_10008f66 = load i32, i32* %edx.global-to-local, align 4
  %v1_10008f66 = add i32 %v0_10008f66, 20
  %v2_10008f66 = inttoptr i32 %v1_10008f66 to i32*
  %v3_10008f66 = load i32, i32* %v2_10008f66, align 4
  store i32 %v3_10008f66, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10008f6b

dec_label_pc_10008f6b:                            ; preds = %dec_label_pc_10008f25.dec_label_pc_10008f6b_crit_edge, %dec_label_pc_10008f5b
  %v11_10008f6d = phi i32 [ %v4_10008f54, %dec_label_pc_10008f25.dec_label_pc_10008f6b_crit_edge ], [ %v3_10008f66, %dec_label_pc_10008f5b ]
  %v0_10008f6b = phi i32 [ %v0_10008f6b.pre, %dec_label_pc_10008f25.dec_label_pc_10008f6b_crit_edge ], [ %v2_10008f65, %dec_label_pc_10008f5b ]
  %v1_10008f6b = inttoptr i32 %v0_10008f6b to i32*
  %v2_10008f6b = load i32, i32* %v1_10008f6b, align 4
  store i32 %v2_10008f6b, i32* @edi, align 4
  %v3_10008f6b = add i32 %v0_10008f6b, 4
  %v1_10008f6c = inttoptr i32 %v3_10008f6b to i32*
  %v2_10008f6c = load i32, i32* %v1_10008f6c, align 4
  store i32 %v2_10008f6c, i32* @esi, align 4
  %v3_10008f6c = add i32 %v0_10008f6b, 8
  %v12_10008f6d = and i32 %v11_10008f6d, -256
  store i32 %v12_10008f6d, i32* %eax.global-to-local, align 4
  %v1_10008f6f = inttoptr i32 %v3_10008f6c to i32*
  %v2_10008f6f = load i32, i32* %v1_10008f6f, align 4
  store i32 %v2_10008f6f, i32* @ebx, align 4
  ret i32 %v12_10008f6d
}

define i32 @function_10008f80() local_unnamed_addr {
dec_label_pc_10008f80:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10008f80 = load i32, i32* @esi, align 4
  store i32 %v0_10008f80, i32* %stack_var_-4, align 4
  %v0_10008f81 = load i32, i32* @ecx, align 4
  store i32 %v0_10008f81, i32* %esi.global-to-local, align 4
  store i32 %v0_10008f81, i32* @global_var_1002b754.295, align 4
  store i32 %v0_10008f81, i32* %eax.global-to-local, align 4
  %v1_10008f8d = add i32 %v0_10008f81, 96
  %v2_10008f8d = inttoptr i32 %v1_10008f8d to i32*
  store i32 0, i32* %v2_10008f8d, align 4
  %v0_10008f96 = load i32, i32* %eax.global-to-local, align 4
  %v4_10008f96 = trunc i32 %v0_10008f96 to i8
  %v5_10008f96 = icmp eq i8 %v4_10008f96, 0
  %v1_10008f98 = icmp eq i1 %v5_10008f96, false
  br i1 %v1_10008f98, label %dec_label_pc_10008f9f, label %dec_label_pc_10008f9a

dec_label_pc_10008f9a:                            ; preds = %dec_label_pc_10008fea, %dec_label_pc_10008fd7, %dec_label_pc_10008fc3, %dec_label_pc_10008fb1, %dec_label_pc_10008f9f, %dec_label_pc_10008f80
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_10008f9d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10008f9d, i32* @esi, align 4
  ret i32 -1

dec_label_pc_10008f9f:                            ; preds = %dec_label_pc_10008f80
  %v0_10008f9f = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10008f9f, i32* @ecx, align 4
  %v1_10008fa1 = add i32 %v0_10008f9f, 96
  %v2_10008fa1 = inttoptr i32 %v1_10008fa1 to i32*
  store i32 1, i32* %v2_10008fa1, align 4
  %v0_10008fa8 = load i32, i32* %stack_var_-4, align 4
  %v1_10008fa8 = call i32 @function_10008da0(i32 %v0_10008fa8)
  store i32 %v1_10008fa8, i32* @eax, align 4
  %v4_10008fad = trunc i32 %v1_10008fa8 to i8
  %v5_10008fad = icmp eq i8 %v4_10008fad, 0
  br i1 %v5_10008fad, label %dec_label_pc_10008f9a, label %dec_label_pc_10008fb1

dec_label_pc_10008fb1:                            ; preds = %dec_label_pc_10008f9f
  %v0_10008fb1 = load i32, i32* @esi, align 4
  store i32 %v0_10008fb1, i32* @ecx, align 4
  %v1_10008fb3 = add i32 %v0_10008fb1, 96
  %v2_10008fb3 = inttoptr i32 %v1_10008fb3 to i32*
  store i32 2, i32* %v2_10008fb3, align 4
  %v0_10008fba = call i32 @function_10008ab0()
  store i32 %v0_10008fba, i32* %eax.global-to-local, align 4
  %v4_10008fbf = trunc i32 %v0_10008fba to i8
  %v5_10008fbf = icmp eq i8 %v4_10008fbf, 0
  br i1 %v5_10008fbf, label %dec_label_pc_10008f9a, label %dec_label_pc_10008fc3

dec_label_pc_10008fc3:                            ; preds = %dec_label_pc_10008fb1
  %v2_10008fc3 = load i32, i32* @ecx, align 4
  store i32 %v2_10008fc3, i32* %eax.global-to-local, align 4
  %v0_10008fc8 = load i32, i32* @esi, align 4
  store i32 %v0_10008fc8, i32* @ecx, align 4
  %v1_10008fca = add i32 %v0_10008fc8, 96
  %v2_10008fca = inttoptr i32 %v1_10008fca to i32*
  store i32 3, i32* %v2_10008fca, align 4
  %v0_10008fd3 = load i32, i32* %eax.global-to-local, align 4
  %v4_10008fd3 = trunc i32 %v0_10008fd3 to i8
  %v5_10008fd3 = icmp eq i8 %v4_10008fd3, 0
  br i1 %v5_10008fd3, label %dec_label_pc_10008f9a, label %dec_label_pc_10008fd7

dec_label_pc_10008fd7:                            ; preds = %dec_label_pc_10008fc3
  %v0_10008fd7 = load i32, i32* @esi, align 4
  store i32 %v0_10008fd7, i32* @ecx, align 4
  %v1_10008fd9 = add i32 %v0_10008fd7, 96
  %v2_10008fd9 = inttoptr i32 %v1_10008fd9 to i32*
  store i32 4, i32* %v2_10008fd9, align 4
  %v0_10008fe0 = call i32 @function_10008520()
  store i32 %v0_10008fe0, i32* %eax.global-to-local, align 4
  %v10_10008fe5 = icmp eq i32 %v0_10008fe0, 1
  %v1_10008fe8 = icmp eq i1 %v10_10008fe5, false
  br i1 %v1_10008fe8, label %dec_label_pc_10008f9a, label %dec_label_pc_10008fea

dec_label_pc_10008fea:                            ; preds = %dec_label_pc_10008fd7
  %v2_10008fea = load i32, i32* @ecx, align 4
  store i32 %v2_10008fea, i32* %eax.global-to-local, align 4
  %v0_10008fef = load i32, i32* @esi, align 4
  store i32 %v0_10008fef, i32* @ecx, align 4
  %v1_10008ff1 = add i32 %v0_10008fef, 96
  %v2_10008ff1 = inttoptr i32 %v1_10008ff1 to i32*
  store i32 5, i32* %v2_10008ff1, align 4
  %v0_10008ffa = load i32, i32* %eax.global-to-local, align 4
  %v4_10008ffa = trunc i32 %v0_10008ffa to i8
  %v5_10008ffa = icmp eq i8 %v4_10008ffa, 0
  br i1 %v5_10008ffa, label %dec_label_pc_10008f9a, label %dec_label_pc_10008ffe

dec_label_pc_10008ffe:                            ; preds = %dec_label_pc_10008fea
  %v0_10008ffe = load i32, i32* @esi, align 4
  %v1_10008ffe = add i32 %v0_10008ffe, 96
  %v2_10008ffe = inttoptr i32 %v1_10008ffe to i32*
  store i32 6, i32* %v2_10008ffe, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_1000900a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000900a, i32* @esi, align 4
  ret i32 1
}

define i32 @function_10009010() local_unnamed_addr {
dec_label_pc_10009010:
  %v0_10009010 = load i32, i32* @esi, align 4
  %v0_10009011 = load i32, i32* @ecx, align 4
  store i32 %v0_10009011, i32* @esi, align 4
  store i32 %v0_10009011, i32* @global_var_1002b754.295, align 4
  %v0_1000901a = call i32 @function_10008f80()
  %v0_1000901f = load i32, i32* @esi, align 4
  %v1_1000901f = add i32 %v0_1000901f, 96
  %v2_1000901f = inttoptr i32 %v1_1000901f to i32*
  %v3_1000901f = load i32, i32* %v2_1000901f, align 4
  %v13_1000901f = icmp eq i32 %v3_1000901f, 6
  store i32 %v0_1000901a, i32* @edi, align 4
  %v1_10009025 = icmp eq i1 %v13_1000901f, false
  br i1 %v1_10009025, label %dec_label_pc_10009032, label %dec_label_pc_10009027

dec_label_pc_10009027:                            ; preds = %dec_label_pc_10009010
  %v2_10009027 = load i32, i32* @ecx, align 4
  store i32 %v0_1000901f, i32* @ecx, align 4
  store i32 %v2_10009027, i32* @edi, align 4
  br label %dec_label_pc_10009032

dec_label_pc_10009032:                            ; preds = %dec_label_pc_10009027, %dec_label_pc_10009010
  store i32 %v0_1000901f, i32* @ecx, align 4
  %v0_10009034 = call i32 @function_10008630()
  %v0_10009039 = load i32, i32* @esi, align 4
  %v1_10009039 = add i32 %v0_10009039, 92
  %v2_10009039 = inttoptr i32 %v1_10009039 to i32*
  %v3_10009039 = load i32, i32* %v2_10009039, align 4
  store i32 %v3_10009039, i32* @global_var_1002b754.295, align 4
  %v0_10009041 = load i32, i32* @edi, align 4
  store i32 %v0_10009010, i32* @esi, align 4
  ret i32 %v0_10009041
}

define i32 @function_10009050(i32 %arg1, i32 %arg2) {
dec_label_pc_10009050:
  %v0_10009050 = call i32 @function_10008f80()
  ret i32 %v0_10009050
}

define i32 @function_10009060(i32 %arg1, i32 %arg2) {
dec_label_pc_10009060:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10009063 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10009063, i32* %stack_var_-8, align 4
  %v0_10009064 = load i32, i32* inttoptr (i32 268575152 to i32*), align 16
  store i32 %v0_10009064, i32* %esi.global-to-local, align 4
  %v0_1000906a = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000906a, i32* %stack_var_-12, align 4
  %v0_1000906b = call i32 @Plat_IsInDebugSession()
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v4_10009070 = trunc i32 %v0_1000906b to i8
  %v5_10009070 = icmp eq i8 %v4_10009070, 0
  br i1 %v5_10009070, label %dec_label_pc_1000907e, label %dec_label_pc_10009074

dec_label_pc_10009074:                            ; preds = %dec_label_pc_10009060
  %v1_10009075 = call i32 @Plat_DebugString(i32 %arg2)
  br label %dec_label_pc_1000907e

dec_label_pc_1000907e:                            ; preds = %dec_label_pc_10009074, %dec_label_pc_10009060
  %v1_10009081 = add i32 %arg1, 8
  %v2_10009081 = inttoptr i32 %v1_10009081 to i32*
  %v3_10009081 = load i32, i32* %v2_10009081, align 4
  %v13_10009081 = icmp eq i32 %v3_10009081, 3
  %v1_10009085 = icmp eq i1 %v13_10009081, false
  br i1 %v1_10009085, label %dec_label_pc_1000909d, label %dec_label_pc_10009087

dec_label_pc_10009087:                            ; preds = %dec_label_pc_1000907e
  %v0_10009087 = call i32 @Plat_IsInDebugSession()
  %v4_10009089 = trunc i32 %v0_10009087 to i8
  %v5_10009089 = icmp eq i8 %v4_10009089, 0
  br i1 %v5_10009089, label %dec_label_pc_1000908e, label %dec_label_pc_1000908d

dec_label_pc_1000908d:                            ; preds = %dec_label_pc_10009087
  %v0_1000908d = call i32 @__asm_int3()
  br label %dec_label_pc_1000908e

dec_label_pc_1000908e:                            ; preds = %dec_label_pc_1000908d, %dec_label_pc_10009087
  %v0_1000908e = load i32, i32* %edi.global-to-local, align 4
  %v4_10009094 = call i32 @Plat_MessageBox(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1002364c.309, i32 0, i32 0), i32 %v0_1000908e)
  br label %dec_label_pc_1000909d

dec_label_pc_1000909d:                            ; preds = %dec_label_pc_1000908e, %dec_label_pc_1000907e
  %v0_100090a0 = phi i32 [ %v4_10009094, %dec_label_pc_1000908e ], [ %arg1, %dec_label_pc_1000907e ]
  %v2_1000909d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000909d, i32* %edi.global-to-local, align 4
  %v2_1000909e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000909e, i32* %esi.global-to-local, align 4
  ret i32 %v0_100090a0
}

define i32 @function_100090b0() local_unnamed_addr {
dec_label_pc_100090b0:
  %v0_100090b0 = load i32, i32* @global_var_1002b764.310, align 4
  ret i32 %v0_100090b0
}

define i32 @function_100090c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100090c0:
  store i32 %arg1, i32* @global_var_1002b764.310, align 4
  ret i32 %arg1
}

define i32 @function_100090d0() local_unnamed_addr {
dec_label_pc_100090d0:
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100090d0 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_100090d0, i32* %stack_var_-4, align 4
  %v4_100090d0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_100090d0, i32* @ebp, align 4
  %v16_100090d3 = ptrtoint i32* %stack_var_-264 to i32
  %v0_100090d9 = load i32, i32* %esi.global-to-local, align 4
  %v0_100090dc = load i32, i32* @ecx, align 4
  store i32 %v0_100090dc, i32* @esi, align 4
  %v2_100090de = call i32 @function_10001270(i32 0, i32 %v0_100090d9)
  %v2_100090e3 = load i32, i32* @ecx, align 4
  %v1_100090e5 = add i32 %v2_100090e3, 44
  %v2_100090e5 = inttoptr i32 %v1_100090e5 to i32*
  %v3_100090e5 = load i32, i32* %v2_100090e5, align 4
  %v0_100090eb = load i32, i32* @esi, align 4
  store i32 %v16_100090d3, i32* %stack_var_-280, align 4
  store i32 %v0_100090eb, i32* @ecx, align 4
  %v4_100090ff = trunc i32 %v3_100090e5 to i8
  %v5_100090ff = icmp eq i8 %v4_100090ff, 0
  br i1 %v5_100090ff, label %dec_label_pc_1000915a, label %dec_label_pc_10009103

dec_label_pc_10009103:                            ; preds = %dec_label_pc_100090d0
  %v1_100090eb = add i32 %v0_100090eb, 108
  %v4_10009103 = call i32 @function_10002070(i32* nonnull %stack_var_-264, i32 260, i32 %v1_100090eb)
  %v0_10009108 = call i32 @VStdLib_GetICVarFactory()
  %v0_1000910f = load i32, i32* @esi, align 4
  store i32 %v0_1000910f, i32* @ecx, align 4
  %v1_10009111 = call i32 @function_10008380(i32 %v0_10009108)
  %v0_1000911c = load i32, i32* @esi, align 4
  store i32 %v0_1000911c, i32* @ecx, align 4
  %v3_1000911e = call i32 @function_10008c00(i32 %v1_10009111, i32 ptrtoint ([15 x i8]* @global_var_10023668.311 to i32))
  %v0_1000912a = load i32, i32* @esi, align 4
  store i32 %v0_1000912a, i32* @ecx, align 4
  %v1_1000912c = call i32 @function_10008260(i32 %v16_100090d3)
  store i32 %v1_1000912c, i32* %stack_var_-304, align 4
  %v0_10009137 = load i32, i32* @esi, align 4
  store i32 %v0_10009137, i32* @ecx, align 4
  %v3_10009139 = call i32 @function_10008c00(i32 %v1_1000912c, i32 ptrtoint ([15 x i8]* @global_var_1002278c.80 to i32))
  %v1_1000913e = load i32, i32* @esi, align 4
  %v2_1000913e = add i32 %v1_1000913e, 100
  %v3_1000913e = inttoptr i32 %v2_1000913e to i32*
  store i32 %v3_10009139, i32* %v3_1000913e, align 4
  %v1_10009141 = icmp eq i32 %v3_10009139, 0
  %v1_10009143 = icmp eq i1 %v1_10009141, false
  br i1 %v1_10009143, label %dec_label_pc_10009161, label %dec_label_pc_10009145

dec_label_pc_10009145:                            ; preds = %dec_label_pc_10009103
  %v0_10009151 = call i32 @Error()
  br label %dec_label_pc_1000915a

dec_label_pc_1000915a:                            ; preds = %dec_label_pc_10009145, %dec_label_pc_100090d0
  %v0_1000915c.in = phi i32* [ %stack_var_-304, %dec_label_pc_10009145 ], [ %stack_var_-280, %dec_label_pc_100090d0 ]
  %v11_1000915a = phi i32 [ %v0_10009151, %dec_label_pc_10009145 ], [ %v3_100090e5, %dec_label_pc_100090d0 ]
  %v12_1000915a = and i32 %v11_1000915a, -256
  %v2_1000915c = load i32, i32* %v0_1000915c.in, align 4
  store i32 %v2_1000915c, i32* %esi.global-to-local, align 4
  %v2_1000915f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000915f, i32* %ebp.global-to-local, align 4
  ret i32 %v12_1000915a

dec_label_pc_10009161:                            ; preds = %dec_label_pc_10009103
  %v1_10009161 = and i32 %v3_10009139, -256
  %v2_10009161 = or i32 %v1_10009161, 1
  %v2_10009163 = load i32, i32* %stack_var_-304, align 4
  store i32 %v2_10009163, i32* %esi.global-to-local, align 4
  %v2_10009166 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10009166, i32* %ebp.global-to-local, align 4
  ret i32 %v2_10009161
}

define i32 @function_10009170(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10009170:
  %v0_10009170 = load i32, i32* @ebp, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v4_1000917f = call i32 @function_10001660(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v0_10009170)
  %v5_10009187 = icmp eq i32 %v4_1000917f, 0
  %v1_1000918b = zext i1 %v5_10009187 to i32
  ret i32 %v1_1000918b
}

define i32 @function_10009190() local_unnamed_addr {
dec_label_pc_10009190:
  %eax.global-to-local = alloca i32, align 4
  %v0_10009190 = load i32, i32* @ecx, align 4
  %v1_10009190 = add i32 %v0_10009190, 100
  %v2_10009190 = inttoptr i32 %v1_10009190 to i32*
  store i32 0, i32* %v2_10009190, align 4
  %v0_10009197 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10009197
}

define i32 @function_100091a0() local_unnamed_addr {
dec_label_pc_100091a0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100091a0 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_100091a0, i32* %stack_var_-4, align 4
  %v0_100091a1 = load i32, i32* @ecx, align 4
  store i32 %v0_100091a1, i32* @esi, align 4
  %v1_100091a3 = add i32 %v0_100091a1, 100
  %v2_100091a3 = inttoptr i32 %v1_100091a3 to i32*
  %v3_100091a3 = load i32, i32* %v2_100091a3, align 4
  %v1_100091a7 = call i32 @function_100015f0(i32 %v3_100091a3)
  %v1_100091af = icmp eq i32 %v1_100091a7, 0
  br i1 %v1_100091af, label %dec_label_pc_100091b7, label %dec_label_pc_100091b3

dec_label_pc_100091b3:                            ; preds = %dec_label_pc_100091a0
  %v2_100091b5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100091b5, i32* %esi.global-to-local, align 4
  ret i32 0

dec_label_pc_100091b7:                            ; preds = %dec_label_pc_100091a0
  %v0_100091b7 = load i32, i32* @esi, align 4
  %v1_100091b7 = add i32 %v0_100091b7, 100
  %v2_100091b7 = inttoptr i32 %v1_100091b7 to i32*
  %v3_100091b7 = load i32, i32* %v2_100091b7, align 4
  store i32 %v3_100091b7, i32* @ecx, align 4
  store i32 %v3_100091b7, i32* %stack_var_-12, align 4
  %v1_100091bc = add i32 %v0_100091b7, 104
  %v2_100091bc = inttoptr i32 %v1_100091bc to i32*
  %v3_100091bc = load i32, i32* %v2_100091bc, align 4
  store i32 %v3_100091bc, i32* @ecx, align 4
  %v2_100091bf = call i32 @function_10007160(i32 %v3_100091b7, i32 %v0_100091b7)
  %v0_100091c4 = load i32, i32* @esi, align 4
  %v1_100091c4 = add i32 %v0_100091c4, 104
  %v2_100091c4 = inttoptr i32 %v1_100091c4 to i32*
  %v3_100091c4 = load i32, i32* %v2_100091c4, align 4
  store i32 %v3_100091c4, i32* @ecx, align 4
  %v2_100091c7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100091c7, i32* @esi, align 4
  %v0_100091c8 = call i32 @function_10009010()
  ret i32 %v0_100091c8
}

define i32 @function_100091d0() local_unnamed_addr {
dec_label_pc_100091d0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_100091d0 = load i32, i32* %esi.global-to-local, align 4
  %v0_100091d1 = load i32, i32* @edi, align 4
  %v0_100091d2 = load i32, i32* @ecx, align 4
  store i32 %v0_100091d2, i32* @esi, align 4
  %v2_100091d4 = call i32 @function_10009050(i32 %v0_100091d1, i32 %v0_100091d0)
  %v0_100091d9 = load i32, i32* @esi, align 4
  store i32 %v0_100091d9, i32* @ecx, align 4
  store i32 %v2_100091d4, i32* @edi, align 4
  %v0_100091dd = call i32 @function_10007150()
  %v10_100091e2 = icmp eq i32 %v0_100091dd, 6
  br i1 %v10_100091e2, label %dec_label_pc_100091ec, label %dec_label_pc_100091e7

dec_label_pc_100091e7:                            ; preds = %dec_label_pc_100091d0
  %v0_100091e7 = load i32, i32* @edi, align 4
  store i32 %v0_100091d0, i32* %esi.global-to-local, align 4
  ret i32 %v0_100091e7

dec_label_pc_100091ec:                            ; preds = %dec_label_pc_100091d0
  %v0_100091ec = load i32, i32* @esi, align 4
  %v1_100091ec = add i32 %v0_100091ec, 100
  %v2_100091ec = inttoptr i32 %v1_100091ec to i32*
  %v3_100091ec = load i32, i32* %v2_100091ec, align 4
  store i32 %v3_100091ec, i32* %stack_var_-12, align 4
  %v1_100091f0 = call i32 @function_100015f0(i32 %v3_100091ec)
  %v1_100091f8 = icmp eq i32 %v1_100091f0, 0
  br i1 %v1_100091f8, label %dec_label_pc_10009201, label %dec_label_pc_100091fc

dec_label_pc_100091fc:                            ; preds = %dec_label_pc_100091ec
  store i32 %v0_100091d0, i32* %esi.global-to-local, align 4
  ret i32 0

dec_label_pc_10009201:                            ; preds = %dec_label_pc_100091ec
  %v0_10009201 = load i32, i32* @esi, align 4
  %v1_10009201 = add i32 %v0_10009201, 100
  %v2_10009201 = inttoptr i32 %v1_10009201 to i32*
  %v3_10009201 = load i32, i32* %v2_10009201, align 4
  store i32 %v3_10009201, i32* @ecx, align 4
  store i32 %v0_10009201, i32* %stack_var_-12, align 4
  %v1_10009206 = add i32 %v0_10009201, 104
  %v2_10009206 = inttoptr i32 %v1_10009206 to i32*
  %v3_10009206 = load i32, i32* %v2_10009206, align 4
  store i32 %v3_10009206, i32* @ecx, align 4
  %v2_10009209 = call i32 @function_10007160(i32 %v3_10009201, i32 %v0_10009201)
  %v0_1000920e = load i32, i32* @esi, align 4
  %v1_1000920e = add i32 %v0_1000920e, 104
  %v2_1000920e = inttoptr i32 %v1_1000920e to i32*
  %v3_1000920e = load i32, i32* %v2_1000920e, align 4
  store i32 %v3_1000920e, i32* @ecx, align 4
  %v1_10009211 = inttoptr i32 %v3_1000920e to i32*
  %v2_10009211 = load i32, i32* %v1_10009211, align 4
  %v1_10009213 = add i32 %v2_10009211, 28
  %v2_10009213 = inttoptr i32 %v1_10009213 to i32*
  %v3_10009213 = load i32, i32* %v2_10009213, align 4
  %v2_10009217 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009217, i32* %esi.global-to-local, align 4
  ret i32 %v3_10009213
}

define i32 @function_10009220() local_unnamed_addr {
dec_label_pc_10009220:
  %esi.global-to-local = alloca i32, align 4
  %v0_10009220 = load i32, i32* %esi.global-to-local, align 4
  %v0_10009221 = load i32, i32* @ecx, align 4
  store i32 %v0_10009221, i32* %esi.global-to-local, align 4
  store i32 %v0_10009221, i32* @ecx, align 4
  store i32 %v0_10009220, i32* @esi, align 4
  %v0_10009230 = call i32 @function_10008b50()
  ret i32 %v0_10009230
}

define i32 @function_10009240(i32 %arg1) {
dec_label_pc_10009240:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10009243 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10009243, i32* %stack_var_-8, align 4
  %v0_10009244 = load i32, i32* @ecx, align 4
  store i32 %v0_10009244, i32* %esi.global-to-local, align 4
  %v1_10009246 = add i32 %v0_10009244, 4
  %v2_10009246 = inttoptr i32 %v1_10009246 to i8*
  %v3_10009246 = load i8, i8* %v2_10009246, align 1
  %v10_10009246 = icmp eq i8 %v3_10009246, 0
  %v0_1000924a = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000924a, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v1_1000924e = icmp eq i1 %v10_10009246, false
  br i1 %v1_1000924e, label %dec_label_pc_1000925e, label %dec_label_pc_10009250

dec_label_pc_10009250:                            ; preds = %dec_label_pc_10009240
  %v4_10009256 = inttoptr i32 %arg1 to i8*
  %v5_10009256 = call i32 (i8*, ...) @_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_100222f0.40, i32 0, i32 0), i8* %v4_10009256)
  store i32 %v5_10009256, i32* %eax.global-to-local, align 4
  %v0_1000925e.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000925e

dec_label_pc_1000925e:                            ; preds = %dec_label_pc_10009250, %dec_label_pc_10009240
  %v0_1000925e = phi i32 [ %v0_1000925e.pre, %dec_label_pc_10009250 ], [ %v0_10009244, %dec_label_pc_10009240 ]
  %v1_1000925e = add i32 %v0_1000925e, 5
  %v2_1000925e = inttoptr i32 %v1_1000925e to i8*
  %v3_1000925e = load i8, i8* %v2_1000925e, align 1
  %v10_1000925e = icmp eq i8 %v3_1000925e, 0
  %v1_10009262 = icmp eq i1 %v10_1000925e, false
  br i1 %v1_10009262, label %dec_label_pc_1000925e.dec_label_pc_10009278_crit_edge, label %dec_label_pc_10009264

dec_label_pc_1000925e.dec_label_pc_10009278_crit_edge: ; preds = %dec_label_pc_1000925e
  %v0_1000927b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009278

dec_label_pc_10009264:                            ; preds = %dec_label_pc_1000925e
  %v0_10009264 = call i32 @Plat_IsInDebugSession()
  store i32 %v0_10009264, i32* %eax.global-to-local, align 4
  %v4_1000926a = trunc i32 %v0_10009264 to i8
  %v5_1000926a = icmp eq i8 %v4_1000926a, 0
  br i1 %v5_1000926a, label %dec_label_pc_10009278, label %dec_label_pc_1000926e

dec_label_pc_1000926e:                            ; preds = %dec_label_pc_10009264
  %v0_1000926e = load i32, i32* %edi.global-to-local, align 4
  %v1_1000926f = call i32 @Plat_DebugString(i32 %v0_1000926e)
  store i32 %v1_1000926f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009278

dec_label_pc_10009278:                            ; preds = %dec_label_pc_1000925e.dec_label_pc_10009278_crit_edge, %dec_label_pc_1000926e, %dec_label_pc_10009264
  %v0_1000927b = phi i32 [ %v0_1000927b.pre, %dec_label_pc_1000925e.dec_label_pc_10009278_crit_edge ], [ %v1_1000926f, %dec_label_pc_1000926e ], [ %v0_10009264, %dec_label_pc_10009264 ]
  %v2_10009278 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009278, i32* %edi.global-to-local, align 4
  %v2_10009279 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009279, i32* %esi.global-to-local, align 4
  ret i32 %v0_1000927b
}

define i32 @function_10009280(i32* %arg1) local_unnamed_addr {
dec_label_pc_10009280:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v0_10009280 = load i32, i32* @ebp, align 4
  %v0_10009283 = load i32, i32* @esi, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v0_10009286 = load i32, i32* @ecx, align 4
  store i32 %v0_10009286, i32* @esi, align 4
  %v3_10009288 = call i32 @function_10008770(i32 0, i32 %v0_10009283, i32 %v0_10009280)
  %v1_10009290 = load i32, i32* @esi, align 4
  %v2_10009290 = add i32 %v1_10009290, 104
  %v3_10009290 = inttoptr i32 %v2_10009290 to i32*
  store i32 %tmp, i32* %v3_10009290, align 4
  %v0_10009293 = load i32, i32* @esi, align 4
  %v1_10009293 = inttoptr i32 %v0_10009293 to i32*
  store i32 ptrtoint (i32* @global_var_10023684.313 to i32), i32* %v1_10009293, align 4
  %v0_10009299 = load i32, i32* @esi, align 4
  %v1_10009299 = add i32 %v0_10009299, 100
  %v2_10009299 = inttoptr i32 %v1_10009299 to i32*
  store i32 0, i32* %v2_10009299, align 4
  %v0_100092a0 = load i32, i32* @esi, align 4
  %v1_100092a0 = add i32 %v0_100092a0, 108
  %v2_100092a0 = inttoptr i32 %v1_100092a0 to i8*
  store i8 0, i8* %v2_100092a0, align 1
  %v0_100092a4 = load i32, i32* @esi, align 4
  %v2_100092a6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_100092a6, i32* @esi, align 4
  store i32 %v0_10009283, i32* @ebp, align 4
  ret i32 %v0_100092a4
}

define i32 @function_100092b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100092b0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_100092b0 = load i32, i32* @ebp, align 4
  store i32 %v0_100092b0, i32* %stack_var_-4, align 4
  %v0_100092b3 = load i32, i32* @ecx, align 4
  store i32 %v0_100092b3, i32* %stack_var_-8, align 4
  %v0_100092b4 = load i32, i32* @global_var_1002ba10.314, align 4
  store i32 %v0_100092b4, i32* %eax.global-to-local, align 4
  %v2_100092b9 = icmp slt i32 %v0_100092b4, 0
  %v1_100092bb = icmp eq i1 %v2_100092b9, false
  br i1 %v1_100092bb, label %dec_label_pc_100092d6, label %dec_label_pc_100092bd

dec_label_pc_100092bd:                            ; preds = %dec_label_pc_100092b0
  %v0_100092c3 = call i32 @Error()
  store i32 %v0_100092c3, i32* %eax.global-to-local, align 4
  %v0_100092cc = load i8, i8* @global_var_1002ba0c.316, align 1
  %v2_100092cc = add i8 %v0_100092cc, 1
  store i8 %v2_100092cc, i8* @global_var_1002ba0c.316, align 1
  %v2_100092d4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100092d4, i32* @ebp, align 4
  ret i32 %v0_100092c3

dec_label_pc_100092d6:                            ; preds = %dec_label_pc_100092b0
  %v1_100092b9 = icmp eq i32 %v0_100092b4, 0
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v0_100092dd = load i32, i32* @edi, align 4
  store i32 %v0_100092dd, i32* %stack_var_-20, align 4
  %v4_100092dd = ptrtoint i32* %stack_var_-20 to i32
  %v1_100092de = icmp eq i1 %v1_100092b9, false
  %tmp31 = icmp slt i32 %arg2, 1
  br i1 %v1_100092de, label %dec_label_pc_10009360, label %dec_label_pc_100092e4

dec_label_pc_100092e4:                            ; preds = %dec_label_pc_100092d6
  br i1 %tmp31, label %dec_label_pc_100093ec, label %dec_label_pc_100092ec

dec_label_pc_100092ec:                            ; preds = %dec_label_pc_100092e4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v0_10009335 = load i8, i8* @global_var_1002ba0c.316, align 1
  %v1_10009335 = sext i8 %v0_10009335 to i32
  br label %dec_label_pc_100092f2

dec_label_pc_100092f2:                            ; preds = %dec_label_pc_1000934b, %dec_label_pc_100092ec
  %v0_1000930f5 = phi i32 [ %v1_1000934b, %dec_label_pc_1000934b ], [ %arg1, %dec_label_pc_100092ec ]
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009300

dec_label_pc_10009300:                            ; preds = %dec_label_pc_10009340, %dec_label_pc_100092f2
  %v0_1000930f = phi i32 [ %v0_1000930f5, %dec_label_pc_100092f2 ], [ %v0_1000930f.pre, %dec_label_pc_10009340 ]
  %v0_10009309 = phi i32 [ 0, %dec_label_pc_100092f2 ], [ %v1_10009340, %dec_label_pc_10009340 ]
  %v1_10009300 = add i32 %v0_10009309, ptrtoint (i32* @global_var_1002825c to i32)
  %v2_10009300 = inttoptr i32 %v1_10009300 to i32*
  %v3_10009300 = load i32, i32* %v2_10009300, align 4
  store i32 %v3_10009300, i32* %esi.global-to-local, align 4
  %v1_10009306 = inttoptr i32 %v3_10009300 to i32*
  %v2_10009306 = load i32, i32* %v1_10009306, align 4
  %v9_10009306 = icmp eq i32 %v2_10009306, 0
  %v1_10009309 = add i32 %v0_10009309, ptrtoint ([15 x i8]** @global_var_10028258.402 to i32)
  %v2_10009309 = inttoptr i32 %v1_10009309 to i32*
  %v3_10009309 = load i32, i32* %v2_10009309, align 4
  store i32 %v3_10009309, i32* %eax.global-to-local, align 4
  %v1_1000930f = inttoptr i32 %v0_1000930f to i32*
  %v2_1000930f = load i32, i32* %v1_1000930f, align 4
  store i32 %v2_1000930f, i32* @ecx, align 4
  %v1_10009311 = icmp eq i1 %v9_10009306, false
  br i1 %v1_10009311, label %dec_label_pc_10009340, label %dec_label_pc_10009313

dec_label_pc_10009313:                            ; preds = %dec_label_pc_10009300
  %v0_10009313 = load i32, i32* @esp, align 4
  %v1_10009313 = add i32 %v0_10009313, -4
  %v2_10009313 = inttoptr i32 %v1_10009313 to i32*
  store i32 0, i32* %v2_10009313, align 4
  %v0_10009315 = load i32, i32* %eax.global-to-local, align 4
  %v2_10009315 = add i32 %v0_10009313, -8
  %v3_10009315 = inttoptr i32 %v2_10009315 to i32*
  store i32 %v0_10009315, i32* %v3_10009315, align 4
  %v0_1000931b = load i32, i32* %eax.global-to-local, align 4
  %v1_1000931b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000931b = inttoptr i32 %v1_1000931b to i32*
  store i32 %v0_1000931b, i32* %v2_1000931b, align 4
  %v0_1000931d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000931d = icmp eq i32 %v0_1000931d, 0
  br i1 %v1_1000931d, label %dec_label_pc_10009340, label %dec_label_pc_10009321

dec_label_pc_10009321:                            ; preds = %dec_label_pc_10009313
  %v0_10009321 = load i32, i32* @global_var_1002ba10.314, align 4
  %v1_10009327 = mul i32 %v0_10009321, 8
  %v2_10009327 = add i32 %v1_10009327, ptrtoint (i32* @global_var_1002b778.403 to i32)
  store i32 %v2_10009327, i32* %eax.global-to-local, align 4
  %v1_1000932e = add i32 %v0_10009321, 1
  store i32 %v1_1000932e, i32* @global_var_1002ba10.314, align 4
  store i32 %v1_10009335, i32* @ecx, align 4
  %v0_1000933b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000933b = inttoptr i32 %v2_10009327 to i32*
  store i32 %v0_1000933b, i32* %v2_1000933b, align 4
  %v0_1000933d = load i32, i32* @ecx, align 4
  %v1_1000933d = load i32, i32* %eax.global-to-local, align 4
  %v2_1000933d = add i32 %v1_1000933d, 4
  %v3_1000933d = inttoptr i32 %v2_1000933d to i32*
  store i32 %v0_1000933d, i32* %v3_1000933d, align 4
  br label %dec_label_pc_10009340

dec_label_pc_10009340:                            ; preds = %dec_label_pc_10009321, %dec_label_pc_10009313, %dec_label_pc_10009300
  %v0_10009340 = load i32, i32* %edi.global-to-local, align 4
  %v1_10009340 = add i32 %v0_10009340, 8
  store i32 %v1_10009340, i32* %edi.global-to-local, align 4
  %v4_10009343 = icmp ult i32 %v1_10009340, 432
  %v0_1000930f.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v4_10009343, label %dec_label_pc_10009300, label %dec_label_pc_1000934b

dec_label_pc_1000934b:                            ; preds = %dec_label_pc_10009340
  %v1_1000934b = add i32 %v0_1000930f.pre, 4
  store i32 %v1_1000934b, i32* %ebx.global-to-local, align 4
  %v3_1000934e = load i32, i32* %stack_var_-8, align 4
  %v4_1000934e = add i32 %v3_1000934e, -1
  %v12_1000934e = icmp eq i32 %v4_1000934e, 0
  store i32 %v4_1000934e, i32* %stack_var_-8, align 4
  %v1_10009351 = icmp eq i1 %v12_1000934e, false
  br i1 %v1_10009351, label %dec_label_pc_100092f2, label %dec_label_pc_10009353

dec_label_pc_10009353:                            ; preds = %dec_label_pc_1000934b
  %v2_10009353 = add i8 %v0_10009335, 1
  store i8 %v2_10009353, i8* @global_var_1002ba0c.316, align 1
  %v0_10009359 = load i32, i32* @esp, align 4
  %v1_10009359 = inttoptr i32 %v0_10009359 to i32*
  %v2_10009359 = load i32, i32* %v1_10009359, align 4
  store i32 %v2_10009359, i32* @edi, align 4
  %v3_10009359 = add i32 %v0_10009359, 4
  %v1_1000935a = inttoptr i32 %v3_10009359 to i32*
  %v2_1000935a = load i32, i32* %v1_1000935a, align 4
  store i32 %v2_1000935a, i32* @esi, align 4
  %v3_1000935a = add i32 %v0_10009359, 8
  %v1_1000935b = inttoptr i32 %v3_1000935a to i32*
  %v2_1000935b = load i32, i32* %v1_1000935b, align 4
  store i32 %v2_1000935b, i32* @ebx, align 4
  %v2_1000935e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000935e, i32* @ebp, align 4
  %v0_1000935f = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000935f

dec_label_pc_10009360:                            ; preds = %dec_label_pc_100092d6
  br i1 %tmp31, label %dec_label_pc_100093ec, label %dec_label_pc_10009368

dec_label_pc_10009368:                            ; preds = %dec_label_pc_10009360
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v0_100093c0 = load i8, i8* @global_var_1002ba0c.316, align 1
  %v1_100093c0 = sext i8 %v0_100093c0 to i32
  br label %dec_label_pc_10009370

dec_label_pc_10009370:                            ; preds = %dec_label_pc_100093e4, %dec_label_pc_10009368
  %v0_100093789 = phi i32 [ %v1_100093e4, %dec_label_pc_100093e4 ], [ %arg1, %dec_label_pc_10009368 ]
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009372

dec_label_pc_10009372:                            ; preds = %dec_label_pc_100093d9, %dec_label_pc_10009370
  %v0_10009378 = phi i32 [ %v0_100093789, %dec_label_pc_10009370 ], [ %v0_10009378.pre, %dec_label_pc_100093d9 ]
  %v0_1000937a = phi i32 [ 0, %dec_label_pc_10009370 ], [ %v1_100093d9, %dec_label_pc_100093d9 ]
  %v1_10009372 = add i32 %v0_1000937a, ptrtoint ([15 x i8]** @global_var_10028258.402 to i32)
  %v2_10009372 = inttoptr i32 %v1_10009372 to i32*
  %v3_10009372 = load i32, i32* %v2_10009372, align 4
  store i32 %v3_10009372, i32* %eax.global-to-local, align 4
  %v1_10009378 = inttoptr i32 %v0_10009378 to i32*
  %v2_10009378 = load i32, i32* %v1_10009378, align 4
  store i32 %v2_10009378, i32* @ecx, align 4
  %v1_1000937a = add i32 %v0_1000937a, ptrtoint (i32* @global_var_1002825c to i32)
  %v2_1000937a = inttoptr i32 %v1_1000937a to i32*
  %v3_1000937a = load i32, i32* %v2_1000937a, align 4
  store i32 %v3_1000937a, i32* %esi.global-to-local, align 4
  %v0_10009380 = load i32, i32* @esp, align 4
  %v1_10009380 = add i32 %v0_10009380, -4
  %v2_10009380 = inttoptr i32 %v1_10009380 to i32*
  store i32 0, i32* %v2_10009380, align 4
  %v0_10009382 = load i32, i32* %eax.global-to-local, align 4
  %v2_10009382 = add i32 %v0_10009380, -8
  %v3_10009382 = inttoptr i32 %v2_10009382 to i32*
  store i32 %v0_10009382, i32* %v3_10009382, align 4
  %v0_10009385 = load i32, i32* @global_var_1002ba10.314, align 4
  store i32 %v0_10009385, i32* @ecx, align 4
  %v0_1000938b = load i32, i32* %eax.global-to-local, align 4
  %v1_1000938b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000938b = inttoptr i32 %v1_1000938b to i32*
  store i32 %v0_1000938b, i32* %v2_1000938b, align 4
  %v11_10009390 = load i32, i32* @edx, align 4
  %v12_10009390 = and i32 %v11_10009390, -256
  store i32 %v12_10009390, i32* @edx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %tmp33 = icmp slt i32 %v0_10009385, 1
  br i1 %tmp33, label %dec_label_pc_100093bb, label %dec_label_pc_100093a0

dec_label_pc_100093a0:                            ; preds = %dec_label_pc_10009372, %dec_label_pc_100093b2
  %v0_100093b712 = phi i32 [ %v0_100093b7, %dec_label_pc_100093b2 ], [ %v12_10009390, %dec_label_pc_10009372 ]
  %v1_100093a9 = phi i32 [ %v1_100093b2, %dec_label_pc_100093b2 ], [ 0, %dec_label_pc_10009372 ]
  %v1_100093a0 = mul i32 %v1_100093a9, 8
  %v2_100093a0 = add i32 %v1_100093a0, ptrtoint (i32* @global_var_1002b778.403 to i32)
  %v3_100093a0 = inttoptr i32 %v2_100093a0 to i32*
  %v4_100093a0 = load i32, i32* %v3_100093a0, align 4
  %v5_100093a0 = load i32, i32* %esi.global-to-local, align 4
  %v16_100093a0 = icmp eq i32 %v4_100093a0, %v5_100093a0
  %v1_100093a7 = icmp eq i1 %v16_100093a0, false
  br i1 %v1_100093a7, label %dec_label_pc_100093b2, label %dec_label_pc_100093a9

dec_label_pc_100093a9:                            ; preds = %dec_label_pc_100093a0
  store i32 %v5_100093a0, i32* %v3_100093a0, align 4
  %v0_100093b0 = load i32, i32* @edx, align 4
  %v1_100093b0 = and i32 %v0_100093b0, -256
  %v2_100093b0 = or i32 %v1_100093b0, 1
  store i32 %v2_100093b0, i32* @edx, align 4
  %v0_100093b2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100093b2

dec_label_pc_100093b2:                            ; preds = %dec_label_pc_100093a9, %dec_label_pc_100093a0
  %v0_100093b7 = phi i32 [ %v2_100093b0, %dec_label_pc_100093a9 ], [ %v0_100093b712, %dec_label_pc_100093a0 ]
  %v0_100093b2 = phi i32 [ %v0_100093b2.pre, %dec_label_pc_100093a9 ], [ %v1_100093a9, %dec_label_pc_100093a0 ]
  %v1_100093b2 = add i32 %v0_100093b2, 1
  store i32 %v1_100093b2, i32* %eax.global-to-local, align 4
  %v5_100093b5 = icmp slt i32 %v1_100093b2, %v0_10009385
  br i1 %v5_100093b5, label %dec_label_pc_100093a0, label %dec_label_pc_100093b7

dec_label_pc_100093b7:                            ; preds = %dec_label_pc_100093b2
  %v4_100093b7 = trunc i32 %v0_100093b7 to i8
  %v5_100093b7 = icmp eq i8 %v4_100093b7, 0
  %v1_100093b9 = icmp eq i1 %v5_100093b7, false
  br i1 %v1_100093b9, label %dec_label_pc_100093d9, label %dec_label_pc_100093bb

dec_label_pc_100093bb:                            ; preds = %dec_label_pc_100093b7, %dec_label_pc_10009372
  %v0_100093bb = load i32, i32* %esi.global-to-local, align 4
  %v1_100093bb = inttoptr i32 %v0_100093bb to i32*
  %v2_100093bb = load i32, i32* %v1_100093bb, align 4
  %v9_100093bb = icmp eq i32 %v2_100093bb, 0
  br i1 %v9_100093bb, label %dec_label_pc_100093d9, label %dec_label_pc_100093c0

dec_label_pc_100093c0:                            ; preds = %dec_label_pc_100093bb
  store i32 %v1_100093c0, i32* @edx, align 4
  %v1_100093c6 = mul i32 %v0_10009385, 8
  %v2_100093c6 = add i32 %v1_100093c6, ptrtoint (i32* @global_var_1002b778.403 to i32)
  store i32 %v2_100093c6, i32* %eax.global-to-local, align 4
  %v1_100093cd = add i32 %v0_10009385, 1
  store i32 %v1_100093cd, i32* @ecx, align 4
  store i32 %v1_100093cd, i32* @global_var_1002ba10.314, align 4
  %v2_100093d4 = inttoptr i32 %v2_100093c6 to i32*
  store i32 %v0_100093bb, i32* %v2_100093d4, align 4
  %v0_100093d6 = load i32, i32* @edx, align 4
  %v1_100093d6 = load i32, i32* %eax.global-to-local, align 4
  %v2_100093d6 = add i32 %v1_100093d6, 4
  %v3_100093d6 = inttoptr i32 %v2_100093d6 to i32*
  store i32 %v0_100093d6, i32* %v3_100093d6, align 4
  br label %dec_label_pc_100093d9

dec_label_pc_100093d9:                            ; preds = %dec_label_pc_100093c0, %dec_label_pc_100093bb, %dec_label_pc_100093b7
  %v0_100093d9 = load i32, i32* %edi.global-to-local, align 4
  %v1_100093d9 = add i32 %v0_100093d9, 8
  store i32 %v1_100093d9, i32* %edi.global-to-local, align 4
  %v4_100093dc = icmp ult i32 %v1_100093d9, 432
  %v0_10009378.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v4_100093dc, label %dec_label_pc_10009372, label %dec_label_pc_100093e4

dec_label_pc_100093e4:                            ; preds = %dec_label_pc_100093d9
  %v1_100093e4 = add i32 %v0_10009378.pre, 4
  store i32 %v1_100093e4, i32* %ebx.global-to-local, align 4
  %v3_100093e7 = load i32, i32* %stack_var_-8, align 4
  %v4_100093e7 = add i32 %v3_100093e7, -1
  %v12_100093e7 = icmp eq i32 %v4_100093e7, 0
  store i32 %v4_100093e7, i32* %stack_var_-8, align 4
  %v1_100093ea = icmp eq i1 %v12_100093e7, false
  br i1 %v1_100093ea, label %dec_label_pc_10009370, label %dec_label_pc_100093ec.loopexit

dec_label_pc_100093ec.loopexit:                   ; preds = %dec_label_pc_100093e4
  %v0_100093f2.pre = load i32, i32* @esp, align 4
  %v2_100093f7.pre = load i32, i32* %stack_var_-4, align 4
  %v0_100093f8.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100093ec

dec_label_pc_100093ec:                            ; preds = %dec_label_pc_100093ec.loopexit, %dec_label_pc_10009360, %dec_label_pc_100092e4
  %v0_100093f8 = phi i32 [ %v0_100093f8.pre, %dec_label_pc_100093ec.loopexit ], [ %arg2, %dec_label_pc_10009360 ], [ %arg2, %dec_label_pc_100092e4 ]
  %v2_100093f7 = phi i32 [ %v2_100093f7.pre, %dec_label_pc_100093ec.loopexit ], [ %v0_100092b0, %dec_label_pc_10009360 ], [ %v0_100092b0, %dec_label_pc_100092e4 ]
  %v0_100093f2 = phi i32 [ %v0_100093f2.pre, %dec_label_pc_100093ec.loopexit ], [ %v4_100092dd, %dec_label_pc_10009360 ], [ %v4_100092dd, %dec_label_pc_100092e4 ]
  %v0_100093ec = load i8, i8* @global_var_1002ba0c.316, align 1
  %v2_100093ec = add i8 %v0_100093ec, 1
  store i8 %v2_100093ec, i8* @global_var_1002ba0c.316, align 1
  %v1_100093f2 = inttoptr i32 %v0_100093f2 to i32*
  %v2_100093f2 = load i32, i32* %v1_100093f2, align 4
  store i32 %v2_100093f2, i32* @edi, align 4
  %v3_100093f2 = add i32 %v0_100093f2, 4
  %v1_100093f3 = inttoptr i32 %v3_100093f2 to i32*
  %v2_100093f3 = load i32, i32* %v1_100093f3, align 4
  store i32 %v2_100093f3, i32* @esi, align 4
  %v3_100093f3 = add i32 %v0_100093f2, 8
  %v1_100093f4 = inttoptr i32 %v3_100093f3 to i32*
  %v2_100093f4 = load i32, i32* %v1_100093f4, align 4
  store i32 %v2_100093f4, i32* @ebx, align 4
  store i32 %v2_100093f7, i32* @ebp, align 4
  ret i32 %v0_100093f8
}

define i32 @function_10009400() local_unnamed_addr {
dec_label_pc_10009400:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_10009400 = load i8, i8* @global_var_1002ba0c.316, align 1
  %v1_10009400 = sext i8 %v0_10009400 to i32
  %v1_10009406 = add nsw i32 %v1_10009400, -1
  %v10_10009406 = icmp slt i8 %v0_10009400, 1
  %v11_10009406 = trunc i32 %v1_10009406 to i8
  store i32 %v1_10009406, i32* %edx.global-to-local, align 4
  store i8 %v11_10009406, i8* @global_var_1002ba0c.316, align 1
  br i1 %v10_10009406, label %dec_label_pc_10009400.dec_label_pc_1000943c_crit_edge, label %dec_label_pc_1000940f

dec_label_pc_10009400.dec_label_pc_1000943c_crit_edge: ; preds = %dec_label_pc_10009400
  %v0_1000943c.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000943c

dec_label_pc_1000940f:                            ; preds = %dec_label_pc_10009400
  %v0_1000940f = load i32, i32* @global_var_1002ba10.314, align 4
  store i32 %v0_1000940f, i32* @ecx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %tmp10 = icmp slt i32 %v0_1000940f, 1
  br i1 %tmp10, label %dec_label_pc_1000943c, label %dec_label_pc_1000941b

dec_label_pc_1000941b:                            ; preds = %dec_label_pc_1000940f
  br label %dec_label_pc_10009420

dec_label_pc_10009420:                            ; preds = %dec_label_pc_10009436.dec_label_pc_10009420_crit_edge, %dec_label_pc_1000941b
  %v5_10009420 = phi i32 [ %v5_10009420.pre, %dec_label_pc_10009436.dec_label_pc_10009420_crit_edge ], [ %v1_10009406, %dec_label_pc_1000941b ]
  %v0_10009429 = phi i32 [ %v1_10009436, %dec_label_pc_10009436.dec_label_pc_10009420_crit_edge ], [ 0, %dec_label_pc_1000941b ]
  %v1_10009420 = mul i32 %v0_10009429, 8
  %v2_10009420 = add i32 %v1_10009420, ptrtoint (i32* @global_var_1002b77c.404 to i32)
  %v3_10009420 = inttoptr i32 %v2_10009420 to i32*
  %v4_10009420 = load i32, i32* %v3_10009420, align 4
  %v16_10009420 = icmp eq i32 %v4_10009420, %v5_10009420
  %v1_10009427 = icmp eq i1 %v16_10009420, false
  br i1 %v1_10009427, label %dec_label_pc_10009436, label %dec_label_pc_10009429

dec_label_pc_10009429:                            ; preds = %dec_label_pc_10009420
  %v2_10009429 = add i32 %v1_10009420, ptrtoint (i32* @global_var_1002b778.403 to i32)
  %v3_10009429 = inttoptr i32 %v2_10009429 to i32*
  %v4_10009429 = load i32, i32* %v3_10009429, align 4
  %v1_10009430 = inttoptr i32 %v4_10009429 to i32*
  store i32 0, i32* %v1_10009430, align 4
  %v0_10009436.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009436

dec_label_pc_10009436:                            ; preds = %dec_label_pc_10009429, %dec_label_pc_10009420
  %v0_10009436 = phi i32 [ %v0_10009436.pre, %dec_label_pc_10009429 ], [ %v0_10009429, %dec_label_pc_10009420 ]
  %v1_10009436 = add i32 %v0_10009436, 1
  store i32 %v1_10009436, i32* %eax.global-to-local, align 4
  %v5_10009439 = icmp slt i32 %v1_10009436, %v0_1000940f
  br i1 %v5_10009439, label %dec_label_pc_10009436.dec_label_pc_10009420_crit_edge, label %dec_label_pc_1000943b

dec_label_pc_10009436.dec_label_pc_10009420_crit_edge: ; preds = %dec_label_pc_10009436
  %v5_10009420.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10009420

dec_label_pc_1000943b:                            ; preds = %dec_label_pc_10009436
  br label %dec_label_pc_1000943c

dec_label_pc_1000943c:                            ; preds = %dec_label_pc_10009400.dec_label_pc_1000943c_crit_edge, %dec_label_pc_1000943b, %dec_label_pc_1000940f
  %v0_1000943c = phi i32 [ %v0_1000943c.pre, %dec_label_pc_10009400.dec_label_pc_1000943c_crit_edge ], [ %v1_10009436, %dec_label_pc_1000943b ], [ 0, %dec_label_pc_1000940f ]
  ret i32 %v0_1000943c
}

define i32 @function_1000943e() local_unnamed_addr {
dec_label_pc_1000943e:
  %v0_1000943e = call i32 @WriteMiniDump()
  ret i32 %v0_1000943e
}

define i32 @function_10009450(i32 %arg1) local_unnamed_addr {
dec_label_pc_10009450:
  %v1_10009456 = add i32 %arg1, 1
  store i32 %v1_10009456, i32* @edx, align 4
  %v4_10009460.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009460

dec_label_pc_10009460:                            ; preds = %dec_label_pc_10009460, %dec_label_pc_10009450
  %v4_10009460 = phi i32 [ %v6_10009460, %dec_label_pc_10009460 ], [ %v4_10009460.pre, %dec_label_pc_10009450 ]
  %v0_10009462 = phi i32 [ %v1_10009462, %dec_label_pc_10009460 ], [ %arg1, %dec_label_pc_10009450 ]
  %v1_10009460 = inttoptr i32 %v0_10009462 to i8*
  %v2_10009460 = load i8, i8* %v1_10009460, align 1
  %v3_10009460 = zext i8 %v2_10009460 to i32
  %v5_10009460 = and i32 %v4_10009460, -256
  %v6_10009460 = or i32 %v3_10009460, %v5_10009460
  store i32 %v6_10009460, i32* @ecx, align 4
  %v1_10009462 = add i32 %v0_10009462, 1
  %v5_10009463 = icmp eq i8 %v2_10009460, 0
  %v1_10009465 = icmp eq i1 %v5_10009463, false
  br i1 %v1_10009465, label %dec_label_pc_10009460, label %dec_label_pc_10009467

dec_label_pc_10009467:                            ; preds = %dec_label_pc_10009460
  %v2_10009467 = sub i32 %v1_10009462, %v1_10009456
  ret i32 %v2_10009467
}

define i32 @function_10009470(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009470:
  store i32 %arg2, i32* @edx, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v4_10009480.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_10009480

dec_label_pc_10009480:                            ; preds = %dec_label_pc_10009492, %dec_label_pc_10009470
  %v0_10009495 = phi i32 [ %v1_10009495, %dec_label_pc_10009492 ], [ %arg2, %dec_label_pc_10009470 ]
  %v4_10009480 = phi i32 [ %v7_1000948a, %dec_label_pc_10009492 ], [ %v4_10009480.pre, %dec_label_pc_10009470 ]
  %v0_10009492 = phi i32 [ %v1_10009492, %dec_label_pc_10009492 ], [ %arg1, %dec_label_pc_10009470 ]
  %v1_10009480 = inttoptr i32 %v0_10009492 to i8*
  %v2_10009480 = load i8, i8* %v1_10009480, align 1
  %v3_10009480 = zext i8 %v2_10009480 to i32
  %v5_10009480 = and i32 %v4_10009480, -256
  %v6_10009480 = or i32 %v3_10009480, %v5_10009480
  %v3_10009482 = inttoptr i32 %v0_10009495 to i8*
  %v4_10009482 = load i8, i8* %v3_10009482, align 1
  %v10_10009482 = icmp ult i8 %v2_10009480, %v4_10009482
  %v15_10009482 = icmp eq i8 %v2_10009480, %v4_10009482
  %v1_10009484 = icmp eq i1 %v15_10009482, false
  br i1 %v1_10009484, label %dec_label_pc_100094a0, label %dec_label_pc_10009486

dec_label_pc_10009486:                            ; preds = %dec_label_pc_10009480
  %v5_10009486 = icmp eq i8 %v2_10009480, 0
  br i1 %v5_10009486, label %dec_label_pc_1000949c, label %dec_label_pc_1000948a

dec_label_pc_1000948a:                            ; preds = %dec_label_pc_10009486
  %v1_1000948a = add i32 %v0_10009492, 1
  %v2_1000948a = inttoptr i32 %v1_1000948a to i8*
  %v3_1000948a = load i8, i8* %v2_1000948a, align 1
  %v4_1000948a = zext i8 %v3_1000948a to i32
  %v7_1000948a = or i32 %v4_1000948a, %v5_10009480
  %v3_1000948d = add i32 %v0_10009495, 1
  %v4_1000948d = inttoptr i32 %v3_1000948d to i8*
  %v5_1000948d = load i8, i8* %v4_1000948d, align 1
  %v11_1000948d = icmp ult i8 %v3_1000948a, %v5_1000948d
  %v16_1000948d = icmp eq i8 %v3_1000948a, %v5_1000948d
  %v1_10009490 = icmp eq i1 %v16_1000948d, false
  br i1 %v1_10009490, label %dec_label_pc_100094a0, label %dec_label_pc_10009492

dec_label_pc_10009492:                            ; preds = %dec_label_pc_1000948a
  %v1_10009492 = add i32 %v0_10009492, 2
  store i32 %v1_10009492, i32* @ecx, align 4
  %v1_10009495 = add i32 %v0_10009495, 2
  store i32 %v1_10009495, i32* @edx, align 4
  %v5_10009498 = icmp eq i8 %v3_1000948a, 0
  %v1_1000949a = icmp eq i1 %v5_10009498, false
  br i1 %v1_1000949a, label %dec_label_pc_10009480, label %dec_label_pc_1000949c

dec_label_pc_1000949c:                            ; preds = %dec_label_pc_10009492, %dec_label_pc_10009486
  ret i32 0

dec_label_pc_100094a0:                            ; preds = %dec_label_pc_1000948a, %dec_label_pc_10009480
  %v2_100094a0 = phi i1 [ %v11_1000948d, %dec_label_pc_1000948a ], [ %v10_10009482, %dec_label_pc_10009480 ]
  %v0_100094a0 = phi i32 [ %v7_1000948a, %dec_label_pc_1000948a ], [ %v6_10009480, %dec_label_pc_10009480 ]
  %v3_100094a0 = zext i1 %v2_100094a0 to i32
  %v4_100094a0 = add i32 %v3_100094a0, %v0_100094a0
  %v5_100094a0 = sext i1 %v2_100094a0 to i32
  %v15_100094a0 = sub nsw i32 %v5_100094a0, %v3_100094a0
  %v16_100094a0 = icmp ult i32 %v0_100094a0, %v15_100094a0
  %v17_100094a0 = icmp ne i32 %v4_100094a0, -1
  %v18_100094a0 = or i1 %v16_100094a0, %v17_100094a0
  %v19_100094a0 = icmp ult i32 %v0_100094a0, %v4_100094a0
  %v20_100094a0 = select i1 %v2_100094a0, i1 %v18_100094a0, i1 %v19_100094a0
  %not.v1_100094a2 = icmp ne i1 %v20_100094a0, true
  %v3_100094a2 = sext i1 %not.v1_100094a2 to i32
  %v4_100094a2 = sub nsw i32 %v5_100094a0, %v3_100094a2
  ret i32 %v4_100094a2
}

define i32 @function_100094b0(i32* %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_100094b0:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @edx, align 4
  %v4_100094b7 = ptrtoint i8* %arg2 to i32
  %v0_100094ba = load i32, i32* @edi, align 4
  br label %dec_label_pc_100094c0

dec_label_pc_100094c0:                            ; preds = %dec_label_pc_10009524, %dec_label_pc_10009502, %dec_label_pc_100094b0
  %v0_100094fb = phi i32 [ %v4_100094b7, %dec_label_pc_100094b0 ], [ %v1_100094fb, %dec_label_pc_10009502 ], [ %v1_100094fb, %dec_label_pc_10009524 ]
  %v0_100094f8 = phi i32 [ %tmp, %dec_label_pc_100094b0 ], [ %v1_100094f8, %dec_label_pc_10009502 ], [ %v1_100094f8, %dec_label_pc_10009524 ]
  %v1_100094c0 = inttoptr i32 %v0_100094f8 to i8*
  %v2_100094c0 = load i8, i8* %v1_100094c0, align 1
  %v3_100094c0 = zext i8 %v2_100094c0 to i32
  %v1_100094c3 = inttoptr i32 %v0_100094fb to i8*
  %v2_100094c3 = load i8, i8* %v1_100094c3, align 1
  %v3_100094c3 = zext i8 %v2_100094c3 to i32
  store i32 %v3_100094c3, i32* @ecx, align 4
  %v12_100094c6 = icmp eq i8 %v2_100094c0, %v2_100094c3
  %v1_100094c8 = icmp eq i1 %v12_100094c6, false
  br i1 %v1_100094c8, label %dec_label_pc_100094d2, label %dec_label_pc_100094ca

dec_label_pc_100094ca:                            ; preds = %dec_label_pc_100094c0
  %v1_100094ca = icmp eq i8 %v2_100094c0, 0
  %v1_100094cc = icmp eq i1 %v1_100094ca, false
  br i1 %v1_100094cc, label %dec_label_pc_100094f0, label %dec_label_pc_100094ce

dec_label_pc_100094ce:                            ; preds = %dec_label_pc_100094ca
  store i32 %v0_100094ba, i32* @edi, align 4
  ret i32 %v3_100094c0

dec_label_pc_100094d2:                            ; preds = %dec_label_pc_100094c0
  %v1_100094d2 = icmp eq i8 %v2_100094c3, 0
  br i1 %v1_100094d2, label %dec_label_pc_1000952a, label %dec_label_pc_100094d6

dec_label_pc_100094d6:                            ; preds = %dec_label_pc_100094d2
  %v1_100094d6 = add nsw i32 %v3_100094c0, -65
  %v5_100094d9 = icmp ult i32 %v1_100094d6, 25
  %v10_100094d9 = icmp eq i8 %v2_100094c0, 90
  %v2_100094dc = or i1 %v5_100094d9, %v10_100094d9
  br i1 %v2_100094dc, label %dec_label_pc_100094de, label %dec_label_pc_100094e1

dec_label_pc_100094de:                            ; preds = %dec_label_pc_100094d6
  %v1_100094de = add nuw nsw i32 %v3_100094c0, 32
  br label %dec_label_pc_100094e1

dec_label_pc_100094e1:                            ; preds = %dec_label_pc_100094d6, %dec_label_pc_100094de
  %v0_100094ec = phi i32 [ %v3_100094c0, %dec_label_pc_100094d6 ], [ %v1_100094de, %dec_label_pc_100094de ]
  %v1_100094e1 = add nsw i32 %v3_100094c3, -65
  %v5_100094e4 = icmp ult i32 %v1_100094e1, 25
  %v10_100094e4 = icmp eq i8 %v2_100094c3, 90
  %v2_100094e7 = or i1 %v5_100094e4, %v10_100094e4
  br i1 %v2_100094e7, label %dec_label_pc_100094e9, label %dec_label_pc_100094ec

dec_label_pc_100094e9:                            ; preds = %dec_label_pc_100094e1
  %v1_100094e9 = add nuw nsw i32 %v3_100094c3, 32
  store i32 %v1_100094e9, i32* @ecx, align 4
  br label %dec_label_pc_100094ec

dec_label_pc_100094ec:                            ; preds = %dec_label_pc_100094e1, %dec_label_pc_100094e9
  %v1_100094ec = phi i32 [ %v3_100094c3, %dec_label_pc_100094e1 ], [ %v1_100094e9, %dec_label_pc_100094e9 ]
  %v12_100094ec = icmp eq i32 %v0_100094ec, %v1_100094ec
  %v1_100094ee = icmp eq i1 %v12_100094ec, false
  br i1 %v1_100094ee, label %dec_label_pc_10009528, label %dec_label_pc_100094f0

dec_label_pc_100094f0:                            ; preds = %dec_label_pc_100094ec, %dec_label_pc_100094ca
  %v1_100094f0 = add i32 %v0_100094f8, 1
  %v2_100094f0 = inttoptr i32 %v1_100094f0 to i8*
  %v3_100094f0 = load i8, i8* %v2_100094f0, align 1
  %v4_100094f0 = zext i8 %v3_100094f0 to i32
  %v1_100094f4 = add i32 %v0_100094fb, 1
  %v2_100094f4 = inttoptr i32 %v1_100094f4 to i8*
  %v3_100094f4 = load i8, i8* %v2_100094f4, align 1
  %v4_100094f4 = zext i8 %v3_100094f4 to i32
  store i32 %v4_100094f4, i32* @ecx, align 4
  %v1_100094f8 = add i32 %v0_100094f8, 2
  store i32 %v1_100094f8, i32* @edx, align 4
  %v1_100094fb = add i32 %v0_100094fb, 2
  %v12_100094fe = icmp eq i8 %v3_100094f0, %v3_100094f4
  %v1_10009500 = icmp eq i1 %v12_100094fe, false
  br i1 %v1_10009500, label %dec_label_pc_1000950a, label %dec_label_pc_10009502

dec_label_pc_10009502:                            ; preds = %dec_label_pc_100094f0
  %v1_10009502 = icmp eq i8 %v3_100094f0, 0
  %v1_10009504 = icmp eq i1 %v1_10009502, false
  br i1 %v1_10009504, label %dec_label_pc_100094c0, label %dec_label_pc_10009506

dec_label_pc_10009506:                            ; preds = %dec_label_pc_10009502
  store i32 %v0_100094ba, i32* @edi, align 4
  ret i32 %v4_100094f0

dec_label_pc_1000950a:                            ; preds = %dec_label_pc_100094f0
  %v1_1000950a = icmp eq i8 %v3_100094f4, 0
  br i1 %v1_1000950a, label %dec_label_pc_1000952a, label %dec_label_pc_1000950e

dec_label_pc_1000950e:                            ; preds = %dec_label_pc_1000950a
  %v1_1000950e = add nsw i32 %v4_100094f0, -65
  %v5_10009511 = icmp ult i32 %v1_1000950e, 25
  %v10_10009511 = icmp eq i8 %v3_100094f0, 90
  %v2_10009514 = or i1 %v5_10009511, %v10_10009511
  br i1 %v2_10009514, label %dec_label_pc_10009516, label %dec_label_pc_10009519

dec_label_pc_10009516:                            ; preds = %dec_label_pc_1000950e
  %v1_10009516 = add nuw nsw i32 %v4_100094f0, 32
  br label %dec_label_pc_10009519

dec_label_pc_10009519:                            ; preds = %dec_label_pc_1000950e, %dec_label_pc_10009516
  %v0_10009524 = phi i32 [ %v4_100094f0, %dec_label_pc_1000950e ], [ %v1_10009516, %dec_label_pc_10009516 ]
  %v1_10009519 = add nsw i32 %v4_100094f4, -65
  %v5_1000951c = icmp ult i32 %v1_10009519, 25
  %v10_1000951c = icmp eq i8 %v3_100094f4, 90
  %v2_1000951f = or i1 %v5_1000951c, %v10_1000951c
  br i1 %v2_1000951f, label %dec_label_pc_10009521, label %dec_label_pc_10009524

dec_label_pc_10009521:                            ; preds = %dec_label_pc_10009519
  %v1_10009521 = add nuw nsw i32 %v4_100094f4, 32
  store i32 %v1_10009521, i32* @ecx, align 4
  br label %dec_label_pc_10009524

dec_label_pc_10009524:                            ; preds = %dec_label_pc_10009519, %dec_label_pc_10009521
  %v1_10009524 = phi i32 [ %v4_100094f4, %dec_label_pc_10009519 ], [ %v1_10009521, %dec_label_pc_10009521 ]
  %v12_10009524 = icmp eq i32 %v0_10009524, %v1_10009524
  br i1 %v12_10009524, label %dec_label_pc_100094c0, label %dec_label_pc_10009528

dec_label_pc_10009528:                            ; preds = %dec_label_pc_10009524, %dec_label_pc_100094ec
  %v1_10009528 = phi i32 [ %v1_10009524, %dec_label_pc_10009524 ], [ %v1_100094ec, %dec_label_pc_100094ec ]
  %v0_10009528 = phi i32 [ %v0_10009524, %dec_label_pc_10009524 ], [ %v0_100094ec, %dec_label_pc_100094ec ]
  %v2_10009528 = sub nsw i32 %v0_10009528, %v1_10009528
  br label %dec_label_pc_1000952a

dec_label_pc_1000952a:                            ; preds = %dec_label_pc_1000950a, %dec_label_pc_100094d2, %dec_label_pc_10009528
  %v0_1000952d = phi i32 [ %v2_10009528, %dec_label_pc_10009528 ], [ %v4_100094f0, %dec_label_pc_1000950a ], [ %v3_100094c0, %dec_label_pc_100094d2 ]
  store i32 %v0_100094ba, i32* @edi, align 4
  ret i32 %v0_1000952d
}

define i8* @function_10009530(i8* %String) local_unnamed_addr {
dec_label_pc_10009530:
  %v1_10009534 = call i8* @__strlwr(i8* %String)
  ret i8* %v1_10009534
}

define i32 @function_10009540(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10009540:
  %v0_10009543 = load i32, i32* @esi, align 4
  %tmp11 = icmp slt i32 %arg3, 1
  br i1 %tmp11, label %dec_label_pc_10009562, label %dec_label_pc_1000954b

dec_label_pc_1000954b:                            ; preds = %dec_label_pc_10009540
  store i32 %arg2, i32* @edx, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v4_10009551.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_10009551

dec_label_pc_10009551:                            ; preds = %dec_label_pc_1000955c, %dec_label_pc_1000954b
  %v2_1000956b = phi i32 [ %v1_1000955d, %dec_label_pc_1000955c ], [ %arg2, %dec_label_pc_1000954b ]
  %v0_10009553 = phi i32 [ %v1_10009553, %dec_label_pc_1000955c ], [ %arg3, %dec_label_pc_1000954b ]
  %v4_10009551 = phi i32 [ %v6_10009551, %dec_label_pc_1000955c ], [ %v4_10009551.pre, %dec_label_pc_1000954b ]
  %v0_10009567 = phi i32 [ %v1_1000955c, %dec_label_pc_1000955c ], [ %arg1, %dec_label_pc_1000954b ]
  %v1_10009551 = inttoptr i32 %v0_10009567 to i8*
  %v2_10009551 = load i8, i8* %v1_10009551, align 1
  %v3_10009551 = zext i8 %v2_10009551 to i32
  %v5_10009551 = and i32 %v4_10009551, -256
  %v6_10009551 = or i32 %v3_10009551, %v5_10009551
  %v1_10009553 = add i32 %v0_10009553, -1
  %v9_10009553 = icmp eq i32 %v1_10009553, 0
  %v10_10009553 = icmp slt i32 %v1_10009553, 0
  %v3_10009554 = inttoptr i32 %v2_1000956b to i8*
  %v4_10009554 = load i8, i8* %v3_10009554, align 1
  %v15_10009554 = icmp eq i8 %v2_10009551, %v4_10009554
  %v1_10009556 = icmp eq i1 %v15_10009554, false
  br i1 %v1_10009556, label %dec_label_pc_10009567, label %dec_label_pc_10009558

dec_label_pc_10009558:                            ; preds = %dec_label_pc_10009551
  %v5_10009558 = icmp eq i8 %v2_10009551, 0
  br i1 %v5_10009558, label %dec_label_pc_10009562, label %dec_label_pc_1000955c

dec_label_pc_1000955c:                            ; preds = %dec_label_pc_10009558
  %v1_1000955c = add i32 %v0_10009567, 1
  store i32 %v1_1000955c, i32* @ecx, align 4
  %v1_1000955d = add i32 %v2_1000956b, 1
  store i32 %v1_1000955d, i32* @edx, align 4
  %v3_10009560 = icmp eq i1 %v10_10009553, false
  %v4_10009560 = icmp eq i1 %v9_10009553, false
  %v5_10009560 = icmp eq i1 %v3_10009560, %v4_10009560
  br i1 %v5_10009560, label %dec_label_pc_10009551, label %dec_label_pc_10009562

dec_label_pc_10009562:                            ; preds = %dec_label_pc_1000955c, %dec_label_pc_10009558, %dec_label_pc_10009540
  store i32 %v0_10009543, i32* @esi, align 4
  ret i32 0

dec_label_pc_10009567:                            ; preds = %dec_label_pc_10009551
  %v2_10009567 = load i8, i8* %v1_10009551, align 1
  store i32 0, i32* @ecx, align 4
  %v4_1000956b = load i8, i8* %v3_10009554, align 1
  %v5_1000956b = sub i8 %v2_10009567, %v4_1000956b
  %v11_1000956b = xor i8 %v4_1000956b, %v2_10009567
  %v12_1000956b = xor i8 %v5_1000956b, %v2_10009567
  %v13_1000956b = and i8 %v12_1000956b, %v11_1000956b
  %v14_1000956b = icmp slt i8 %v13_1000956b, 0
  %v16_1000956b = icmp slt i8 %v5_1000956b, 0
  store i32 %v0_10009543, i32* @esi, align 4
  %v2_1000956e = icmp eq i1 %v16_1000956b, %v14_1000956b
  %v3_1000956e = zext i1 %v2_1000956e to i32
  store i32 %v3_1000956e, i32* @ecx, align 4
  %v4_10009571 = select i1 %v2_1000956e, i32 1, i32 -1
  ret i32 %v4_10009571
}

define i32 @function_10009580(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10009580:
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp27 = ptrtoint i32* %arg1 to i32
  %v0_10009583 = load i32, i32* @ecx, align 4
  %v0_10009587 = load i32, i32* @esi, align 4
  %v1_10009588 = icmp eq i32* %arg1, null
  br i1 %v1_10009588, label %dec_label_pc_1000962c, label %dec_label_pc_10009590

dec_label_pc_10009590:                            ; preds = %dec_label_pc_10009580
  %v1_10009593 = icmp eq i32* %arg2, null
  br i1 %v1_10009593, label %dec_label_pc_1000962c, label %dec_label_pc_1000959b

dec_label_pc_1000959b:                            ; preds = %dec_label_pc_10009590
  %v1_1000959b = bitcast i32* %arg1 to i8*
  %v2_1000959b = load i8, i8* %v1_1000959b, align 1
  %v3_1000959b = zext i8 %v2_1000959b to i32
  %v5_1000959b = and i32 %v0_10009583, -256
  %v6_1000959b = or i32 %v3_1000959b, %v5_1000959b
  store i32 %v6_1000959b, i32* @ecx, align 4
  %v0_1000959d = load i32, i32* @ebx, align 4
  %v0_1000959e = load i32, i32* @edi, align 4
  %v5_1000959f = icmp eq i8 %v2_1000959b, 0
  br i1 %v5_1000959f, label %dec_label_pc_10009623, label %dec_label_pc_100095a7

dec_label_pc_100095a7:                            ; preds = %dec_label_pc_1000959b
  %v1_100095a7 = bitcast i32* %arg2 to i8*
  %v2_100095a7 = load i8, i8* %v1_100095a7, align 1
  %v3_100095a7 = zext i8 %v2_100095a7 to i32
  %v5_100095a7 = and i32 %v0_1000959d, -256
  %v6_100095a7 = or i32 %v3_100095a7, %v5_100095a7
  %v1_100095ac = add i8 %v2_100095a7, -65
  %tmp62 = icmp ult i8 %v1_100095ac, 26
  %v1_100095ce = add i32 %tmp, 1
  %v2_100095ce = inttoptr i32 %v1_100095ce to i8*
  br label %dec_label_pc_100095b2

dec_label_pc_100095b2:                            ; preds = %dec_label_pc_1000961b, %dec_label_pc_100095a7
  %v0_1000961e = phi i32 [ %v1_1000961b, %dec_label_pc_1000961b ], [ %tmp27, %dec_label_pc_100095a7 ]
  %v0_100095c3 = phi i32 [ %v0_100095c313, %dec_label_pc_1000961b ], [ %v6_100095a7, %dec_label_pc_100095a7 ]
  %v16_100095ba = phi i32 [ %v7_1000961b, %dec_label_pc_1000961b ], [ %v6_1000959b, %dec_label_pc_100095a7 ]
  %v1_100095b2 = add i32 %v16_100095ba, -65
  %v1_100095b5 = trunc i32 %v1_100095b2 to i8
  %tmp63 = icmp ult i8 %v1_100095b5, 26
  br i1 %tmp63, label %dec_label_pc_100095ba, label %dec_label_pc_100095bd

dec_label_pc_100095ba:                            ; preds = %dec_label_pc_100095b2
  %v2_100095ba = add i32 %v16_100095ba, 32
  %v15_100095ba = and i32 %v2_100095ba, 255
  %v17_100095ba = and i32 %v16_100095ba, -256
  %v18_100095ba = or i32 %v15_100095ba, %v17_100095ba
  store i32 %v18_100095ba, i32* @ecx, align 4
  br label %dec_label_pc_100095bd

dec_label_pc_100095bd:                            ; preds = %dec_label_pc_100095b2, %dec_label_pc_100095ba
  %v0_100095ca = phi i32 [ %v16_100095ba, %dec_label_pc_100095b2 ], [ %v18_100095ba, %dec_label_pc_100095ba ]
  br i1 %tmp62, label %dec_label_pc_100095c3, label %dec_label_pc_100095c8

dec_label_pc_100095c3:                            ; preds = %dec_label_pc_100095bd
  %v1_100095c3 = add i32 %v0_100095c3, 32
  br label %dec_label_pc_100095ca

dec_label_pc_100095c8:                            ; preds = %dec_label_pc_100095bd
  %v1_100095c8 = and i32 %v0_100095c3, 255
  %v3_100095c8 = and i32 %v1_100095b2, -256
  %v4_100095c8 = or i32 %v3_100095c8, %v1_100095c8
  br label %dec_label_pc_100095ca

dec_label_pc_100095ca:                            ; preds = %dec_label_pc_100095c8, %dec_label_pc_100095c3
  %v5_100095ce = phi i32 [ %v4_100095c8, %dec_label_pc_100095c8 ], [ %v1_100095c3, %dec_label_pc_100095c3 ]
  store i32 %v5_100095ce, i32* @edx, align 4
  %v1_100095ca = trunc i32 %v0_100095ca to i8
  %v3_100095ca = trunc i32 %v5_100095ce to i8
  %v14_100095ca = icmp eq i8 %v1_100095ca, %v3_100095ca
  %v1_100095cc = icmp eq i1 %v14_100095ca, false
  br i1 %v1_100095cc, label %dec_label_pc_1000961b, label %dec_label_pc_100095ce

dec_label_pc_100095ce:                            ; preds = %dec_label_pc_100095ca
  %v3_100095ce = load i8, i8* %v2_100095ce, align 1
  %v4_100095ce = zext i8 %v3_100095ce to i32
  %v6_100095ce = and i32 %v5_100095ce, -256
  %v7_100095ce = or i32 %v4_100095ce, %v6_100095ce
  store i32 %v7_100095ce, i32* @edx, align 4
  %v5_100095d2 = icmp eq i8 %v3_100095ce, 0
  br i1 %v5_100095d2, label %dec_label_pc_10009609, label %dec_label_pc_100095d6

dec_label_pc_100095d6:                            ; preds = %dec_label_pc_100095ce
  %v2_100095d8 = sub i32 %v0_1000961e, %v1_100095ce
  %v1_100095da = add i32 %v2_100095d8, 1
  store i32 %v2_100095d8, i32* @ecx, align 4
  br label %dec_label_pc_100095e0

dec_label_pc_100095e0:                            ; preds = %dec_label_pc_10009601, %dec_label_pc_100095d6
  %v16_100095fa = phi i32 [ %v7_10009601, %dec_label_pc_10009601 ], [ %v7_100095ce, %dec_label_pc_100095d6 ]
  %v7_100095e0 = phi i32 [ %v0_100095fd, %dec_label_pc_10009601 ], [ %v2_100095d8, %dec_label_pc_100095d6 ]
  %v0_10009604 = phi i32 [ %v1_10009601, %dec_label_pc_10009601 ], [ %v1_100095ce, %dec_label_pc_100095d6 ]
  %v3_100095e0 = add i32 %v0_10009604, %v1_100095da
  %v4_100095e0 = inttoptr i32 %v3_100095e0 to i8*
  %v5_100095e0 = load i8, i8* %v4_100095e0, align 1
  %v6_100095e0 = zext i8 %v5_100095e0 to i32
  %v8_100095e0 = and i32 %v7_100095e0, -256
  %v9_100095e0 = or i32 %v6_100095e0, %v8_100095e0
  store i32 %v9_100095e0, i32* @ecx, align 4
  %v5_100095e3 = icmp eq i8 %v5_100095e0, 0
  br i1 %v5_100095e3, label %dec_label_pc_10009623, label %dec_label_pc_100095e7

dec_label_pc_100095e7:                            ; preds = %dec_label_pc_100095e0
  %v1_100095e7 = add i8 %v5_100095e0, -65
  %tmp64 = icmp ult i8 %v1_100095e7, 26
  br i1 %tmp64, label %dec_label_pc_100095ef, label %dec_label_pc_100095f2

dec_label_pc_100095ef:                            ; preds = %dec_label_pc_100095e7
  %v2_100095ef = add i8 %v5_100095e0, 32
  %v15_100095ef = zext i8 %v2_100095ef to i32
  %v18_100095ef = or i32 %v15_100095ef, %v8_100095e0
  store i32 %v18_100095ef, i32* @ecx, align 4
  br label %dec_label_pc_100095f2

dec_label_pc_100095f2:                            ; preds = %dec_label_pc_100095e7, %dec_label_pc_100095ef
  %v0_100095fd = phi i32 [ %v9_100095e0, %dec_label_pc_100095e7 ], [ %v18_100095ef, %dec_label_pc_100095ef ]
  %v1_100095f2 = add i32 %v16_100095fa, -65
  %v1_100095f5 = trunc i32 %v1_100095f2 to i8
  %tmp65 = icmp ult i8 %v1_100095f5, 26
  br i1 %tmp65, label %dec_label_pc_100095fa, label %dec_label_pc_100095fd

dec_label_pc_100095fa:                            ; preds = %dec_label_pc_100095f2
  %v2_100095fa = add i32 %v16_100095fa, 32
  %v15_100095fa = and i32 %v2_100095fa, 255
  %v17_100095fa = and i32 %v16_100095fa, -256
  %v18_100095fa = or i32 %v15_100095fa, %v17_100095fa
  store i32 %v18_100095fa, i32* @edx, align 4
  br label %dec_label_pc_100095fd

dec_label_pc_100095fd:                            ; preds = %dec_label_pc_100095f2, %dec_label_pc_100095fa
  %v5_10009601 = phi i32 [ %v16_100095fa, %dec_label_pc_100095f2 ], [ %v18_100095fa, %dec_label_pc_100095fa ]
  %v1_100095fd = trunc i32 %v0_100095fd to i8
  %v3_100095fd = trunc i32 %v5_10009601 to i8
  %v14_100095fd = icmp eq i8 %v1_100095fd, %v3_100095fd
  %v1_100095ff = icmp eq i1 %v14_100095fd, false
  br i1 %v1_100095ff, label %dec_label_pc_10009610, label %dec_label_pc_10009601

dec_label_pc_10009601:                            ; preds = %dec_label_pc_100095fd
  %v1_10009601 = add i32 %v0_10009604, 1
  %v2_10009601 = inttoptr i32 %v1_10009601 to i8*
  %v3_10009601 = load i8, i8* %v2_10009601, align 1
  %v4_10009601 = zext i8 %v3_10009601 to i32
  %v6_10009601 = and i32 %v5_10009601, -256
  %v7_10009601 = or i32 %v4_10009601, %v6_10009601
  store i32 %v7_10009601, i32* @edx, align 4
  %v5_10009605 = icmp eq i8 %v3_10009601, 0
  %v1_10009607 = icmp eq i1 %v5_10009605, false
  br i1 %v1_10009607, label %dec_label_pc_100095e0, label %dec_label_pc_10009609

dec_label_pc_10009609:                            ; preds = %dec_label_pc_10009610, %dec_label_pc_100095ce, %dec_label_pc_10009601
  store i32 %v0_1000959e, i32* @edi, align 4
  store i32 %v0_1000959d, i32* @ebx, align 4
  store i32 %v0_10009587, i32* @esi, align 4
  ret i32 %v0_1000961e

dec_label_pc_10009610:                            ; preds = %dec_label_pc_100095fd
  %v1_10009610 = inttoptr i32 %v0_10009604 to i8*
  %v2_10009610 = load i8, i8* %v1_10009610, align 1
  %v9_10009610 = icmp eq i8 %v2_10009610, 0
  br i1 %v9_10009610, label %dec_label_pc_10009609, label %dec_label_pc_10009615

dec_label_pc_10009615:                            ; preds = %dec_label_pc_10009610
  %v6_10009618 = and i32 %v1_100095f2, -256
  %v7_10009618 = or i32 %v6_10009618, %v3_100095a7
  br label %dec_label_pc_1000961b

dec_label_pc_1000961b:                            ; preds = %dec_label_pc_100095ca, %dec_label_pc_10009615
  %v5_1000961b = phi i32 [ %v0_100095fd, %dec_label_pc_10009615 ], [ %v0_100095ca, %dec_label_pc_100095ca ]
  %v0_100095c313 = phi i32 [ %v7_10009618, %dec_label_pc_10009615 ], [ %v0_100095c3, %dec_label_pc_100095ca ]
  %v1_1000961b = add i32 %v0_1000961e, 1
  %v2_1000961b = inttoptr i32 %v1_1000961b to i8*
  %v3_1000961b = load i8, i8* %v2_1000961b, align 1
  %v4_1000961b = zext i8 %v3_1000961b to i32
  %v6_1000961b = and i32 %v5_1000961b, -256
  %v7_1000961b = or i32 %v4_1000961b, %v6_1000961b
  store i32 %v7_1000961b, i32* @ecx, align 4
  %v5_1000961f = icmp eq i8 %v3_1000961b, 0
  %v1_10009621 = icmp eq i1 %v5_1000961f, false
  br i1 %v1_10009621, label %dec_label_pc_100095b2, label %dec_label_pc_10009623

dec_label_pc_10009623:                            ; preds = %dec_label_pc_1000961b, %dec_label_pc_100095e0, %dec_label_pc_1000959b
  store i32 %v0_1000959e, i32* @edi, align 4
  store i32 %v0_1000959d, i32* @ebx, align 4
  store i32 %v0_10009587, i32* @esi, align 4
  ret i32 0

dec_label_pc_1000962c:                            ; preds = %dec_label_pc_10009590, %dec_label_pc_10009580
  store i32 %v0_10009587, i32* @esi, align 4
  ret i32 0
}

define i32 @function_10009640() local_unnamed_addr {
dec_label_pc_10009640:
  %v0_10009644 = call i32 @function_10009580(i32* nonnull @5, i32* nonnull @5)
  ret i32 %v0_10009644
}

define i32 @function_10009650(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10009650:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10009650 = load i32, i32* @ebp, align 4
  store i32 %v0_10009650, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v0_1000965a = load i32, i32* @edi, align 4
  store i32 %v0_1000965a, i32* %stack_var_-16, align 4
  %v1_1000965b = add i32 %arg1, 1
  store i32 %v1_1000965b, i32* %esi.global-to-local, align 4
  %v4_10009660.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_10009660

dec_label_pc_10009660:                            ; preds = %dec_label_pc_10009660, %dec_label_pc_10009650
  %v4_10009660 = phi i32 [ %v6_10009660, %dec_label_pc_10009660 ], [ %v4_10009660.pre, %dec_label_pc_10009650 ]
  %v0_10009662 = phi i32 [ %v1_10009662, %dec_label_pc_10009660 ], [ %arg1, %dec_label_pc_10009650 ]
  %v1_10009660 = inttoptr i32 %v0_10009662 to i8*
  %v2_10009660 = load i8, i8* %v1_10009660, align 1
  %v3_10009660 = zext i8 %v2_10009660 to i32
  %v5_10009660 = and i32 %v4_10009660, -256
  %v6_10009660 = or i32 %v3_10009660, %v5_10009660
  %v1_10009662 = add i32 %v0_10009662, 1
  store i32 %v1_10009662, i32* @ecx, align 4
  %v5_10009663 = icmp eq i8 %v2_10009660, 0
  %v1_10009665 = icmp eq i1 %v5_10009663, false
  br i1 %v1_10009665, label %dec_label_pc_10009660, label %dec_label_pc_10009667

dec_label_pc_10009667:                            ; preds = %dec_label_pc_10009660
  %tmp29 = ptrtoint i32* %arg2 to i32
  %v2_1000966a = sub i32 %v1_10009662, %v1_1000965b
  store i32 %tmp29, i32* @ecx, align 4
  %v1_10009670 = add i32 %tmp29, 1
  store i32 %v1_10009670, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10009673

dec_label_pc_10009673:                            ; preds = %dec_label_pc_10009673, %dec_label_pc_10009667
  %v4_10009673 = phi i32 [ %v6_10009673, %dec_label_pc_10009673 ], [ %v6_10009660, %dec_label_pc_10009667 ]
  %v0_10009675 = phi i32 [ %v1_10009675, %dec_label_pc_10009673 ], [ %tmp29, %dec_label_pc_10009667 ]
  %v1_10009673 = inttoptr i32 %v0_10009675 to i8*
  %v2_10009673 = load i8, i8* %v1_10009673, align 1
  %v3_10009673 = zext i8 %v2_10009673 to i32
  %v5_10009673 = and i32 %v4_10009673, -256
  %v6_10009673 = or i32 %v3_10009673, %v5_10009673
  %v1_10009675 = add i32 %v0_10009675, 1
  store i32 %v1_10009675, i32* @ecx, align 4
  %v5_10009676 = icmp eq i8 %v2_10009673, 0
  %v1_10009678 = icmp eq i1 %v5_10009676, false
  br i1 %v1_10009678, label %dec_label_pc_10009673, label %dec_label_pc_1000967a

dec_label_pc_1000967a:                            ; preds = %dec_label_pc_10009673
  %v2_1000967d = sub i32 %v1_10009675, %v1_10009670
  store i32 %v2_1000967d, i32* @ecx, align 4
  %v7_10009682 = icmp sgt i32 %arg4, -1
  br i1 %v7_10009682, label %dec_label_pc_10009684, label %dec_label_pc_1000968a

dec_label_pc_10009684:                            ; preds = %dec_label_pc_1000967a
  %v5_10009686 = icmp sgt i32 %v2_1000967d, %arg4
  br i1 %v5_10009686, label %dec_label_pc_10009688, label %dec_label_pc_1000968a

dec_label_pc_10009688:                            ; preds = %dec_label_pc_10009684
  store i32 %arg4, i32* @ecx, align 4
  br label %dec_label_pc_1000968a

dec_label_pc_1000968a:                            ; preds = %dec_label_pc_10009684, %dec_label_pc_1000967a, %dec_label_pc_10009688
  %v1_1000968d = phi i32 [ %v2_1000967d, %dec_label_pc_10009684 ], [ %v2_1000967d, %dec_label_pc_1000967a ], [ %arg4, %dec_label_pc_10009688 ]
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v3_1000968d = add i32 %v1_1000968d, %v2_1000966a
  store i32 %v3_1000968d, i32* @edx, align 4
  %v7_10009690 = icmp ult i32 %v3_1000968d, %arg3
  br i1 %v7_10009690, label %dec_label_pc_10009699, label %dec_label_pc_10009694

dec_label_pc_10009694:                            ; preds = %dec_label_pc_1000968a
  %v2_10009696 = sub i32 %arg3, %v2_1000966a
  %v1_10009698 = add i32 %v2_10009696, -1
  store i32 %v1_10009698, i32* @ecx, align 4
  br label %dec_label_pc_10009699

dec_label_pc_10009699:                            ; preds = %dec_label_pc_10009694, %dec_label_pc_1000968a
  %v0_1000969d = phi i32 [ %v1_10009698, %dec_label_pc_10009694 ], [ %v1_1000968d, %dec_label_pc_1000968a ]
  %v1_10009699 = icmp eq i32 %v0_1000969d, 0
  br i1 %v1_10009699, label %dec_label_pc_100096ad, label %dec_label_pc_1000969d

dec_label_pc_1000969d:                            ; preds = %dec_label_pc_10009699
  %v1_100096a0 = inttoptr i32 %arg1 to i8*
  %v3_100096a0 = bitcast i32* %arg2 to i8*
  %v5_100096a0 = call i8* @_strncat(i8* %v1_100096a0, i8* %v3_100096a0, i32 %v0_1000969d)
  %v7_100096a0 = ptrtoint i8* %v5_100096a0 to i32
  store i32 %v7_100096a0, i32* %eax.global-to-local, align 4
  %v1_100096a8 = load i32, i32* %esi.global-to-local, align 4
  %v3_100096a8 = add i32 %v7_100096a0, -1
  %v4_100096a8 = add i32 %v3_100096a8, %v1_100096a8
  %v5_100096a8 = inttoptr i32 %v4_100096a8 to i8*
  store i8 0, i8* %v5_100096a8, align 1
  %v2_100096ad.pre = load i32, i32* %stack_var_-16, align 4
  %v2_100096b0.pre = load i32, i32* %stack_var_-4, align 4
  %v0_100096b1.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100096ad

dec_label_pc_100096ad:                            ; preds = %dec_label_pc_1000969d, %dec_label_pc_10009699
  %v0_100096b1 = phi i32 [ %v0_100096b1.pre, %dec_label_pc_1000969d ], [ %arg1, %dec_label_pc_10009699 ]
  %v2_100096b0 = phi i32 [ %v2_100096b0.pre, %dec_label_pc_1000969d ], [ %v0_10009650, %dec_label_pc_10009699 ]
  %v2_100096ad = phi i32 [ %v2_100096ad.pre, %dec_label_pc_1000969d ], [ %v0_1000965a, %dec_label_pc_10009699 ]
  store i32 %v2_100096ad, i32* @edi, align 4
  store i32 %v2_100096b0, i32* @ebp, align 4
  ret i32 %v0_100096b1
}

define i32 @function_100096c0(i32* %arg1) local_unnamed_addr {
dec_label_pc_100096c0:
  %tmp6 = ptrtoint i32* %arg1 to i32
  %v1_100096c9 = add i32 %tmp6, 1
  %v4_100096d0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_100096d0

dec_label_pc_100096d0:                            ; preds = %dec_label_pc_100096d0, %dec_label_pc_100096c0
  %v4_100096d0 = phi i32 [ %v6_100096d0, %dec_label_pc_100096d0 ], [ %v4_100096d0.pre, %dec_label_pc_100096c0 ]
  %v0_100096d2 = phi i32 [ %v1_100096d2, %dec_label_pc_100096d0 ], [ %tmp6, %dec_label_pc_100096c0 ]
  %v1_100096d0 = inttoptr i32 %v0_100096d2 to i8*
  %v2_100096d0 = load i8, i8* %v1_100096d0, align 1
  %v3_100096d0 = zext i8 %v2_100096d0 to i32
  %v5_100096d0 = and i32 %v4_100096d0, -256
  %v6_100096d0 = or i32 %v3_100096d0, %v5_100096d0
  store i32 %v6_100096d0, i32* @ecx, align 4
  %v1_100096d2 = add i32 %v0_100096d2, 1
  %v5_100096d3 = icmp eq i8 %v2_100096d0, 0
  %v1_100096d5 = icmp eq i1 %v5_100096d3, false
  br i1 %v1_100096d5, label %dec_label_pc_100096d0, label %dec_label_pc_100096d7

dec_label_pc_100096d7:                            ; preds = %dec_label_pc_100096d0
  %v2_100096d7 = sub i32 %v1_100096d2, %v1_100096c9
  %tmp11 = icmp slt i32 %v2_100096d7, 1
  br i1 %tmp11, label %dec_label_pc_100096f0, label %dec_label_pc_100096dd

dec_label_pc_100096dd:                            ; preds = %dec_label_pc_100096d7
  %v3_100096dd = add i32 %tmp6, -1
  %v4_100096dd = add i32 %v3_100096dd, %v2_100096d7
  %v5_100096dd = inttoptr i32 %v4_100096dd to i8*
  %v6_100096dd = load i8, i8* %v5_100096dd, align 1
  %v7_100096dd = zext i8 %v6_100096dd to i32
  %v10_100096dd = or i32 %v7_100096dd, %v5_100096d0
  store i32 %v10_100096dd, i32* @ecx, align 4
  %v11_100096e1 = icmp eq i8 %v6_100096dd, 92
  br i1 %v11_100096e1, label %dec_label_pc_100096eb, label %dec_label_pc_100096e6

dec_label_pc_100096e6:                            ; preds = %dec_label_pc_100096dd
  %v11_100096e6 = icmp eq i8 %v6_100096dd, 47
  %v1_100096e9 = icmp eq i1 %v11_100096e6, false
  br i1 %v1_100096e9, label %dec_label_pc_100096f0, label %dec_label_pc_100096eb

dec_label_pc_100096eb:                            ; preds = %dec_label_pc_100096e6, %dec_label_pc_100096dd
  store i8 0, i8* %v5_100096dd, align 1
  br label %dec_label_pc_100096f0

dec_label_pc_100096f0:                            ; preds = %dec_label_pc_100096eb, %dec_label_pc_100096e6, %dec_label_pc_100096d7
  ret i32 %v2_100096d7
}

define i32 @function_10009700(i32 %arg1) local_unnamed_addr {
dec_label_pc_10009700:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10009700 = load i32, i32* @ebp, align 4
  store i32 %v0_10009700, i32* %stack_var_-4, align 4
  %v0_10009703 = load i32, i32* @esi, align 4
  store i32 %v0_10009703, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10009709 = add i32 %arg1, 1
  store i32 %v1_10009709, i32* @edx, align 4
  %v4_10009710.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009710

dec_label_pc_10009710:                            ; preds = %dec_label_pc_10009710, %dec_label_pc_10009700
  %v4_10009710 = phi i32 [ %v6_10009710, %dec_label_pc_10009710 ], [ %v4_10009710.pre, %dec_label_pc_10009700 ]
  %v0_10009712 = phi i32 [ %v1_10009712, %dec_label_pc_10009710 ], [ %arg1, %dec_label_pc_10009700 ]
  %v1_10009710 = inttoptr i32 %v0_10009712 to i8*
  %v2_10009710 = load i8, i8* %v1_10009710, align 1
  %v3_10009710 = zext i8 %v2_10009710 to i32
  %v5_10009710 = and i32 %v4_10009710, -256
  %v6_10009710 = or i32 %v3_10009710, %v5_10009710
  store i32 %v6_10009710, i32* @ecx, align 4
  %v1_10009712 = add i32 %v0_10009712, 1
  store i32 %v1_10009712, i32* %eax.global-to-local, align 4
  %v5_10009713 = icmp eq i8 %v2_10009710, 0
  %v1_10009715 = icmp eq i1 %v5_10009713, false
  br i1 %v1_10009715, label %dec_label_pc_10009710, label %dec_label_pc_10009717

dec_label_pc_10009717:                            ; preds = %dec_label_pc_10009710
  %v2_10009717 = sub i32 %v1_10009712, %v1_10009709
  %v1_10009719 = add i32 %v2_10009717, -1
  store i32 %v1_10009719, i32* %eax.global-to-local, align 4
  %tmp14 = icmp slt i32 %v1_10009719, 1
  br i1 %tmp14, label %dec_label_pc_10009736, label %dec_label_pc_10009720

dec_label_pc_10009720:                            ; preds = %dec_label_pc_10009717, %dec_label_pc_1000972d
  %v7_10009720 = phi i32 [ %v9_10009720, %dec_label_pc_1000972d ], [ %v6_10009710, %dec_label_pc_10009717 ]
  %v0_1000972d = phi i32 [ %v1_1000972d, %dec_label_pc_1000972d ], [ %v1_10009719, %dec_label_pc_10009717 ]
  %v3_10009720 = add i32 %v0_1000972d, %arg1
  %v4_10009720 = inttoptr i32 %v3_10009720 to i8*
  %v5_10009720 = load i8, i8* %v4_10009720, align 1
  %v6_10009720 = zext i8 %v5_10009720 to i32
  %v8_10009720 = and i32 %v7_10009720, -256
  %v9_10009720 = or i32 %v6_10009720, %v8_10009720
  store i32 %v9_10009720, i32* @ecx, align 4
  %v11_10009723 = icmp eq i8 %v5_10009720, 92
  br i1 %v11_10009723, label %dec_label_pc_10009732, label %dec_label_pc_10009728

dec_label_pc_10009728:                            ; preds = %dec_label_pc_10009720
  %v11_10009728 = icmp eq i8 %v5_10009720, 47
  br i1 %v11_10009728, label %dec_label_pc_10009732, label %dec_label_pc_1000972d

dec_label_pc_1000972d:                            ; preds = %dec_label_pc_10009728
  %v1_1000972d = add i32 %v0_1000972d, -1
  %v9_1000972d = icmp eq i32 %v1_1000972d, 0
  %v10_1000972d = icmp slt i32 %v1_1000972d, 0
  store i32 %v1_1000972d, i32* %eax.global-to-local, align 4
  %v3_10009730 = icmp eq i1 %v10_1000972d, false
  %v4_10009730 = icmp eq i1 %v9_1000972d, false
  %v5_10009730 = icmp eq i1 %v3_10009730, %v4_10009730
  br i1 %v5_10009730, label %dec_label_pc_10009720, label %dec_label_pc_10009732

dec_label_pc_10009732:                            ; preds = %dec_label_pc_1000972d, %dec_label_pc_10009728, %dec_label_pc_10009720
  %v0_10009732 = phi i32 [ %v1_1000972d, %dec_label_pc_1000972d ], [ %v0_1000972d, %dec_label_pc_10009728 ], [ %v0_1000972d, %dec_label_pc_10009720 ]
  %v3_10009732 = add i32 %v0_10009732, %arg1
  %v4_10009732 = inttoptr i32 %v3_10009732 to i8*
  store i8 0, i8* %v4_10009732, align 1
  %v2_10009736.pre = load i32, i32* %stack_var_-8, align 4
  %v2_10009737.pre = load i32, i32* %stack_var_-4, align 4
  %v0_10009738.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009736

dec_label_pc_10009736:                            ; preds = %dec_label_pc_10009732, %dec_label_pc_10009717
  %v0_10009738 = phi i32 [ %v0_10009738.pre, %dec_label_pc_10009732 ], [ %v1_10009719, %dec_label_pc_10009717 ]
  %v2_10009737 = phi i32 [ %v2_10009737.pre, %dec_label_pc_10009732 ], [ %v0_10009700, %dec_label_pc_10009717 ]
  %v2_10009736 = phi i32 [ %v2_10009736.pre, %dec_label_pc_10009732 ], [ %v0_10009703, %dec_label_pc_10009717 ]
  store i32 %v2_10009736, i32* @esi, align 4
  store i32 %v2_10009737, i32* @ebp, align 4
  ret i32 %v0_10009738
}

define i32 @function_10009740(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009740:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10009740 = load i32, i32* @ebp, align 4
  store i32 %v0_10009740, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10009746 = inttoptr i32 %arg1 to i8*
  %v2_10009746 = load i8, i8* %v1_10009746, align 1
  %v9_10009746 = icmp eq i8 %v2_10009746, 0
  br i1 %v9_10009746, label %dec_label_pc_10009764, label %dec_label_pc_1000974b

dec_label_pc_1000974b:                            ; preds = %dec_label_pc_10009740
  %v5_1000974b = and i32 %arg2, 255
  %v6_1000974b = load i32, i32* @edx, align 4
  %v7_1000974b = and i32 %v6_1000974b, -256
  %v8_1000974b = or i32 %v7_1000974b, %v5_1000974b
  store i32 %v8_1000974b, i32* @edx, align 4
  br label %dec_label_pc_10009750

dec_label_pc_10009750:                            ; preds = %dec_label_pc_1000975e, %dec_label_pc_1000974b
  %v2_1000975c = phi i32 [ %v1_1000975e, %dec_label_pc_1000975e ], [ %arg1, %dec_label_pc_1000974b ]
  %v1_10009750 = inttoptr i32 %v2_1000975c to i8*
  %v2_10009750 = load i8, i8* %v1_10009750, align 1
  %v3_10009750 = zext i8 %v2_10009750 to i32
  %v4_10009750 = load i32, i32* @ecx, align 4
  %v5_10009750 = and i32 %v4_10009750, -256
  %v6_10009750 = or i32 %v5_10009750, %v3_10009750
  store i32 %v6_10009750, i32* @ecx, align 4
  %v11_10009752 = icmp eq i8 %v2_10009750, 47
  br i1 %v11_10009752, label %dec_label_pc_1000975c, label %dec_label_pc_10009757

dec_label_pc_10009757:                            ; preds = %dec_label_pc_10009750
  %v11_10009757 = icmp eq i8 %v2_10009750, 92
  %v1_1000975a = icmp eq i1 %v11_10009757, false
  br i1 %v1_1000975a, label %dec_label_pc_1000975e, label %dec_label_pc_1000975c

dec_label_pc_1000975c:                            ; preds = %dec_label_pc_10009757, %dec_label_pc_10009750
  %v0_1000975c = load i32, i32* @edx, align 4
  %v1_1000975c = trunc i32 %v0_1000975c to i8
  store i8 %v1_1000975c, i8* %v1_10009750, align 1
  %v0_1000975e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000975e

dec_label_pc_1000975e:                            ; preds = %dec_label_pc_1000975c, %dec_label_pc_10009757
  %v0_1000975e = phi i32 [ %v0_1000975e.pre, %dec_label_pc_1000975c ], [ %v2_1000975c, %dec_label_pc_10009757 ]
  %v1_1000975e = add i32 %v0_1000975e, 1
  store i32 %v1_1000975e, i32* %eax.global-to-local, align 4
  %v1_1000975f = inttoptr i32 %v1_1000975e to i8*
  %v2_1000975f = load i8, i8* %v1_1000975f, align 1
  %v9_1000975f = icmp eq i8 %v2_1000975f, 0
  %v1_10009762 = icmp eq i1 %v9_1000975f, false
  br i1 %v1_10009762, label %dec_label_pc_10009750, label %dec_label_pc_10009764.loopexit

dec_label_pc_10009764.loopexit:                   ; preds = %dec_label_pc_1000975e
  %v2_10009764.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_10009764

dec_label_pc_10009764:                            ; preds = %dec_label_pc_10009764.loopexit, %dec_label_pc_10009740
  %v0_10009765 = phi i32 [ %v1_1000975e, %dec_label_pc_10009764.loopexit ], [ %arg1, %dec_label_pc_10009740 ]
  %v2_10009764 = phi i32 [ %v2_10009764.pre, %dec_label_pc_10009764.loopexit ], [ %v0_10009740, %dec_label_pc_10009740 ]
  store i32 %v2_10009764, i32* @ebp, align 4
  ret i32 %v0_10009765
}

define i32 @function_10009770(i32* %arg1) local_unnamed_addr {
dec_label_pc_10009770:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @ecx, align 4
  %v1_10009779 = add i32 %tmp, 1
  %v4_10009780.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_10009780

dec_label_pc_10009780:                            ; preds = %dec_label_pc_10009780, %dec_label_pc_10009770
  %v4_10009780 = phi i32 [ %v6_10009780, %dec_label_pc_10009780 ], [ %v4_10009780.pre, %dec_label_pc_10009770 ]
  %v0_10009782 = phi i32 [ %v1_10009782, %dec_label_pc_10009780 ], [ %tmp, %dec_label_pc_10009770 ]
  %v1_10009780 = inttoptr i32 %v0_10009782 to i8*
  %v2_10009780 = load i8, i8* %v1_10009780, align 1
  %v3_10009780 = zext i8 %v2_10009780 to i32
  %v5_10009780 = and i32 %v4_10009780, -256
  %v6_10009780 = or i32 %v3_10009780, %v5_10009780
  store i32 %v6_10009780, i32* @edx, align 4
  %v1_10009782 = add i32 %v0_10009782, 1
  %v5_10009783 = icmp eq i8 %v2_10009780, 0
  %v1_10009785 = icmp eq i1 %v5_10009783, false
  br i1 %v1_10009785, label %dec_label_pc_10009780, label %dec_label_pc_10009787

dec_label_pc_10009787:                            ; preds = %dec_label_pc_10009780
  %v2_10009787 = sub i32 %v1_10009782, %v1_10009779
  %v3_10009789 = add i32 %v2_10009787, -1
  %v12_1000978e = icmp eq i32 %v3_10009789, 0
  br i1 %v12_1000978e, label %dec_label_pc_100097b2, label %dec_label_pc_10009792

dec_label_pc_10009792:                            ; preds = %dec_label_pc_10009787
  %v4_10009789 = add i32 %v3_10009789, %tmp
  %v2_10009792 = or i32 %v5_10009780, 46
  store i32 %v2_10009792, i32* @edx, align 4
  br label %dec_label_pc_10009794

dec_label_pc_10009794:                            ; preds = %dec_label_pc_10009799, %dec_label_pc_10009792
  %v0_100097a6 = phi i32 [ %v1_10009794, %dec_label_pc_10009799 ], [ %v4_10009789, %dec_label_pc_10009792 ]
  %v1_10009794 = add i32 %v0_100097a6, -1
  %v2_10009794 = inttoptr i32 %v1_10009794 to i8*
  %v3_10009794 = load i8, i8* %v2_10009794, align 1
  %v16_10009794 = icmp eq i8 %v3_10009794, 46
  br i1 %v16_10009794, label %dec_label_pc_100097a2, label %dec_label_pc_10009799

dec_label_pc_10009799:                            ; preds = %dec_label_pc_10009794
  %v12_1000979a = icmp eq i32 %v1_10009794, %tmp
  %v1_1000979c = icmp eq i1 %v12_1000979a, false
  br i1 %v1_1000979c, label %dec_label_pc_10009794, label %dec_label_pc_1000979e

dec_label_pc_1000979e:                            ; preds = %dec_label_pc_10009799
  ret i32 0

dec_label_pc_100097a2:                            ; preds = %dec_label_pc_10009794
  %v12_100097a2 = icmp eq i32 %v0_100097a6, %tmp
  br i1 %v12_100097a2, label %dec_label_pc_100097b2, label %dec_label_pc_100097a6

dec_label_pc_100097a6:                            ; preds = %dec_label_pc_100097a2
  %v1_100097a6 = inttoptr i32 %v0_100097a6 to i8*
  %v2_100097a6 = load i8, i8* %v1_100097a6, align 1
  %v3_100097a6 = zext i8 %v2_100097a6 to i32
  %v5_100097a6 = and i32 %tmp, -256
  %v6_100097a6 = or i32 %v3_100097a6, %v5_100097a6
  store i32 %v6_100097a6, i32* @ecx, align 4
  %v11_100097a8 = icmp eq i8 %v2_100097a6, 92
  br i1 %v11_100097a8, label %dec_label_pc_100097b2, label %dec_label_pc_100097ad

dec_label_pc_100097ad:                            ; preds = %dec_label_pc_100097a6
  %v11_100097ad = icmp eq i8 %v2_100097a6, 47
  %v1_100097b0 = icmp eq i1 %v11_100097ad, false
  br i1 %v1_100097b0, label %dec_label_pc_100097b4, label %dec_label_pc_100097b2

dec_label_pc_100097b2:                            ; preds = %dec_label_pc_100097ad, %dec_label_pc_100097a6, %dec_label_pc_100097a2, %dec_label_pc_10009787
  br label %dec_label_pc_100097b4

dec_label_pc_100097b4:                            ; preds = %dec_label_pc_100097b2, %dec_label_pc_100097ad
  %v0_100097b5 = phi i32 [ 0, %dec_label_pc_100097b2 ], [ %v0_100097a6, %dec_label_pc_100097ad ]
  ret i32 %v0_100097b5
}

define i32 @function_100097c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100097c0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_100097c3 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v11_100097c9 = load i32, i32* @ecx, align 4
  %v12_100097c9 = and i32 %v11_100097c9, -256
  store i32 %v12_100097c9, i32* @ecx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_100097cf = inttoptr i32 %arg1 to i8*
  %v2_100097cf = load i8, i8* %v1_100097cf, align 1
  %v15_100097cf = icmp eq i8 %v2_100097cf, 0
  br i1 %v15_100097cf, label %dec_label_pc_100097f4, label %dec_label_pc_100097d3

dec_label_pc_100097d3:                            ; preds = %dec_label_pc_100097c0, %dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge
  %v2_100097e9 = phi i32 [ %v2_100097e913, %dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge ], [ %arg1, %dec_label_pc_100097c0 ]
  %v0_100097d3 = phi i32 [ %v1_100097ec, %dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge ], [ %arg1, %dec_label_pc_100097c0 ]
  %v0_100097e5 = phi i32 [ %v4_100097f0, %dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge ], [ %v12_100097c9, %dec_label_pc_100097c0 ]
  %v4_100097d3 = phi i32 [ %v4_100097d3.pre, %dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge ], [ %v0_100097c3, %dec_label_pc_100097c0 ]
  %v1_100097d3 = inttoptr i32 %v0_100097d3 to i8*
  %v2_100097d3 = load i8, i8* %v1_100097d3, align 1
  %v3_100097d3 = zext i8 %v2_100097d3 to i32
  %v5_100097d3 = and i32 %v4_100097d3, -256
  %v6_100097d3 = or i32 %v3_100097d3, %v5_100097d3
  store i32 %v6_100097d3, i32* @ebx, align 4
  %v11_100097d5 = icmp eq i8 %v2_100097d3, 92
  br i1 %v11_100097d5, label %dec_label_pc_100097e3, label %dec_label_pc_100097da

dec_label_pc_100097da:                            ; preds = %dec_label_pc_100097d3
  %v11_100097da = icmp eq i8 %v2_100097d3, 47
  br i1 %v11_100097da, label %dec_label_pc_100097e3, label %dec_label_pc_100097df

dec_label_pc_100097df:                            ; preds = %dec_label_pc_100097da
  %v11_100097df = load i32, i32* @edx, align 4
  %v12_100097df = and i32 %v11_100097df, -256
  store i32 %v12_100097df, i32* @edx, align 4
  br label %dec_label_pc_100097e9

dec_label_pc_100097e3:                            ; preds = %dec_label_pc_100097da, %dec_label_pc_100097d3
  %v0_100097e3 = load i32, i32* @edx, align 4
  %v1_100097e3 = and i32 %v0_100097e3, -256
  %v2_100097e3 = or i32 %v1_100097e3, 1
  store i32 %v2_100097e3, i32* @edx, align 4
  %v4_100097e5 = trunc i32 %v0_100097e5 to i8
  %v5_100097e5 = icmp eq i8 %v4_100097e5, 0
  %v1_100097e7 = icmp eq i1 %v5_100097e5, false
  br i1 %v1_100097e7, label %dec_label_pc_100097ec, label %dec_label_pc_100097e9

dec_label_pc_100097e9:                            ; preds = %dec_label_pc_100097e3, %dec_label_pc_100097df
  %v3_100097e9 = inttoptr i32 %v2_100097e9 to i8*
  store i8 %v2_100097d3, i8* %v3_100097e9, align 1
  %v0_100097eb = load i32, i32* %esi.global-to-local, align 4
  %v1_100097eb = add i32 %v0_100097eb, 1
  store i32 %v1_100097eb, i32* %esi.global-to-local, align 4
  %v0_100097ec.pre = load i32, i32* %eax.global-to-local, align 4
  %v0_100097f0.pre = load i32, i32* @edx, align 4
  %v2_100097f0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_100097ec

dec_label_pc_100097ec:                            ; preds = %dec_label_pc_100097e9, %dec_label_pc_100097e3
  %v2_100097f0 = phi i32 [ %v2_100097f0.pre, %dec_label_pc_100097e9 ], [ %v0_100097e5, %dec_label_pc_100097e3 ]
  %v0_100097f0 = phi i32 [ %v0_100097f0.pre, %dec_label_pc_100097e9 ], [ %v2_100097e3, %dec_label_pc_100097e3 ]
  %v0_100097ec = phi i32 [ %v0_100097ec.pre, %dec_label_pc_100097e9 ], [ %v0_100097d3, %dec_label_pc_100097e3 ]
  %v2_100097e913 = phi i32 [ %v1_100097eb, %dec_label_pc_100097e9 ], [ %v2_100097e9, %dec_label_pc_100097e3 ]
  %v1_100097ec = add i32 %v0_100097ec, 1
  store i32 %v1_100097ec, i32* %eax.global-to-local, align 4
  %v1_100097ed = inttoptr i32 %v1_100097ec to i8*
  %v2_100097ed = load i8, i8* %v1_100097ed, align 1
  %v9_100097ed = icmp eq i8 %v2_100097ed, 0
  %v1_100097f0 = and i32 %v0_100097f0, 255
  %v3_100097f0 = and i32 %v2_100097f0, -256
  %v4_100097f0 = or i32 %v1_100097f0, %v3_100097f0
  store i32 %v4_100097f0, i32* @ecx, align 4
  %v1_100097f2 = icmp eq i1 %v9_100097ed, false
  br i1 %v1_100097f2, label %dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge, label %dec_label_pc_100097f4

dec_label_pc_100097ec.dec_label_pc_100097d3_crit_edge: ; preds = %dec_label_pc_100097ec
  %v4_100097d3.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_100097d3

dec_label_pc_100097f4:                            ; preds = %dec_label_pc_100097ec, %dec_label_pc_100097c0
  %v0_100097f4 = phi i32 [ %arg1, %dec_label_pc_100097c0 ], [ %v2_100097e913, %dec_label_pc_100097ec ]
  %v1_100097f4 = inttoptr i32 %v0_100097f4 to i8*
  store i8 0, i8* %v1_100097f4, align 1
  %v0_100097f7 = load i32, i32* %edi.global-to-local, align 4
  %v1_100097f7 = inttoptr i32 %v0_100097f7 to i8*
  %v2_100097f7 = load i8, i8* %v1_100097f7, align 1
  %v9_100097f7 = icmp eq i8 %v2_100097f7, 0
  store i32 %v0_100097f7, i32* %eax.global-to-local, align 4
  store i32 %v0_100097f7, i32* %edx.global-to-local, align 4
  br i1 %v9_100097f7, label %dec_label_pc_1000982c, label %dec_label_pc_10009800

dec_label_pc_10009800:                            ; preds = %dec_label_pc_100097f4, %dec_label_pc_10009827
  %v2_10009823 = phi i32 [ %v2_1000982320, %dec_label_pc_10009827 ], [ %v0_100097f7, %dec_label_pc_100097f4 ]
  %v0_1000981e = phi i32 [ %v0_10009827, %dec_label_pc_10009827 ], [ %v0_100097f7, %dec_label_pc_100097f4 ]
  %v1_10009800 = inttoptr i32 %v0_1000981e to i8*
  %v2_10009800 = load i8, i8* %v1_10009800, align 1
  %v3_10009800 = zext i8 %v2_10009800 to i32
  %v4_10009800 = load i32, i32* @ebx, align 4
  %v5_10009800 = and i32 %v4_10009800, -256
  %v6_10009800 = or i32 %v5_10009800, %v3_10009800
  store i32 %v6_10009800, i32* @ebx, align 4
  %v11_10009802 = icmp eq i8 %v2_10009800, 46
  %v1_10009805 = icmp eq i1 %v11_10009802, false
  br i1 %v1_10009805, label %dec_label_pc_10009823, label %dec_label_pc_10009807

dec_label_pc_10009807:                            ; preds = %dec_label_pc_10009800
  %v1_10009807 = add i32 %v0_1000981e, 1
  %v2_10009807 = inttoptr i32 %v1_10009807 to i8*
  %v3_10009807 = load i8, i8* %v2_10009807, align 1
  %v4_10009807 = zext i8 %v3_10009807 to i32
  %v5_10009807 = load i32, i32* @ecx, align 4
  %v6_10009807 = and i32 %v5_10009807, -256
  %v7_10009807 = or i32 %v6_10009807, %v4_10009807
  store i32 %v7_10009807, i32* @ecx, align 4
  %v11_1000980a = icmp eq i8 %v3_10009807, 92
  br i1 %v11_1000980a, label %dec_label_pc_10009814, label %dec_label_pc_1000980f

dec_label_pc_1000980f:                            ; preds = %dec_label_pc_10009807
  %v11_1000980f = icmp eq i8 %v3_10009807, 47
  %v1_10009812 = icmp eq i1 %v11_1000980f, false
  br i1 %v1_10009812, label %dec_label_pc_10009823, label %dec_label_pc_10009814

dec_label_pc_10009814:                            ; preds = %dec_label_pc_1000980f, %dec_label_pc_10009807
  %v1_10009814 = load i32, i32* %edi.global-to-local, align 4
  %v12_10009814 = icmp eq i32 %v0_1000981e, %v1_10009814
  br i1 %v12_10009814, label %dec_label_pc_1000981e, label %dec_label_pc_10009818

dec_label_pc_10009818:                            ; preds = %dec_label_pc_10009814
  %v1_10009818 = add i32 %v0_1000981e, -1
  %v2_10009818 = inttoptr i32 %v1_10009818 to i8*
  %v3_10009818 = load i8, i8* %v2_10009818, align 1
  %v13_10009818 = icmp eq i8 %v3_10009818, 46
  br i1 %v13_10009818, label %dec_label_pc_10009823, label %dec_label_pc_1000981e

dec_label_pc_1000981e:                            ; preds = %dec_label_pc_10009818, %dec_label_pc_10009814
  %v1_1000981e = add i32 %v0_1000981e, 2
  store i32 %v1_1000981e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009827

dec_label_pc_10009823:                            ; preds = %dec_label_pc_10009818, %dec_label_pc_1000980f, %dec_label_pc_10009800
  %v3_10009823 = inttoptr i32 %v2_10009823 to i8*
  store i8 %v2_10009800, i8* %v3_10009823, align 1
  %v0_10009825 = load i32, i32* %eax.global-to-local, align 4
  %v1_10009825 = add i32 %v0_10009825, 1
  store i32 %v1_10009825, i32* %eax.global-to-local, align 4
  %v0_10009826 = load i32, i32* %edx.global-to-local, align 4
  %v1_10009826 = add i32 %v0_10009826, 1
  store i32 %v1_10009826, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_10009827

dec_label_pc_10009827:                            ; preds = %dec_label_pc_10009823, %dec_label_pc_1000981e
  %v0_10009827 = phi i32 [ %v1_10009825, %dec_label_pc_10009823 ], [ %v1_1000981e, %dec_label_pc_1000981e ]
  %v2_1000982320 = phi i32 [ %v1_10009826, %dec_label_pc_10009823 ], [ %v2_10009823, %dec_label_pc_1000981e ]
  %v1_10009827 = inttoptr i32 %v0_10009827 to i8*
  %v2_10009827 = load i8, i8* %v1_10009827, align 1
  %v9_10009827 = icmp eq i8 %v2_10009827, 0
  %v1_1000982a = icmp eq i1 %v9_10009827, false
  br i1 %v1_1000982a, label %dec_label_pc_10009800, label %dec_label_pc_1000982c.loopexit

dec_label_pc_1000982c.loopexit:                   ; preds = %dec_label_pc_10009827
  %v0_1000982c.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000982c

dec_label_pc_1000982c:                            ; preds = %dec_label_pc_1000982c.loopexit, %dec_label_pc_100097f4
  %v0_1000982e = phi i32 [ %v2_1000982320, %dec_label_pc_1000982c.loopexit ], [ %v0_100097f7, %dec_label_pc_100097f4 ]
  %v0_1000982c = phi i32 [ %v0_1000982c.pre, %dec_label_pc_1000982c.loopexit ], [ %v0_100097f7, %dec_label_pc_100097f4 ]
  store i32 %v0_1000982c, i32* %eax.global-to-local, align 4
  %v1_1000982e = inttoptr i32 %v0_1000982e to i8*
  store i8 0, i8* %v1_1000982e, align 1
  %v0_10009831 = load i32, i32* %eax.global-to-local, align 4
  %v1_10009831 = add i32 %v0_10009831, 1
  store i32 %v1_10009831, i32* %edx.global-to-local, align 4
  %v4_10009834.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009834

dec_label_pc_10009834:                            ; preds = %dec_label_pc_10009834, %dec_label_pc_1000982c
  %v4_10009834 = phi i32 [ %v6_10009834, %dec_label_pc_10009834 ], [ %v4_10009834.pre, %dec_label_pc_1000982c ]
  %v0_10009836 = phi i32 [ %v1_10009836, %dec_label_pc_10009834 ], [ %v0_10009831, %dec_label_pc_1000982c ]
  %v1_10009834 = inttoptr i32 %v0_10009836 to i8*
  %v2_10009834 = load i8, i8* %v1_10009834, align 1
  %v3_10009834 = zext i8 %v2_10009834 to i32
  %v5_10009834 = and i32 %v4_10009834, -256
  %v6_10009834 = or i32 %v3_10009834, %v5_10009834
  store i32 %v6_10009834, i32* @ecx, align 4
  %v1_10009836 = add i32 %v0_10009836, 1
  store i32 %v1_10009836, i32* %eax.global-to-local, align 4
  %v5_10009837 = icmp eq i8 %v2_10009834, 0
  %v1_10009839 = icmp eq i1 %v5_10009837, false
  br i1 %v1_10009839, label %dec_label_pc_10009834, label %dec_label_pc_1000983b

dec_label_pc_1000983b:                            ; preds = %dec_label_pc_10009834
  %v2_1000983b = sub i32 %v1_10009836, %v1_10009831
  store i32 %v2_1000983b, i32* %eax.global-to-local, align 4
  %v1_1000983d = add i32 %v2_1000983b, -2
  %v7_10009840 = icmp sgt i32 %v2_1000983b, 2
  br i1 %v7_10009840, label %dec_label_pc_10009842, label %dec_label_pc_1000985a

dec_label_pc_10009842:                            ; preds = %dec_label_pc_1000983b
  %v1_10009842 = load i32, i32* %edi.global-to-local, align 4
  %v3_10009842 = add i32 %v2_1000983b, -1
  %v4_10009842 = add i32 %v3_10009842, %v1_10009842
  %v5_10009842 = inttoptr i32 %v4_10009842 to i8*
  %v6_10009842 = load i8, i8* %v5_10009842, align 1
  %v16_10009842 = icmp eq i8 %v6_10009842, 46
  %v1_10009847 = icmp eq i1 %v16_10009842, false
  br i1 %v1_10009847, label %dec_label_pc_1000985a, label %dec_label_pc_10009849

dec_label_pc_10009849:                            ; preds = %dec_label_pc_10009842
  %v4_10009849 = add i32 %v1_10009842, %v1_1000983d
  store i32 %v4_10009849, i32* @ecx, align 4
  %v1_1000984d = inttoptr i32 %v4_10009849 to i8*
  %v2_1000984d = load i8, i8* %v1_1000984d, align 1
  %v3_1000984d = zext i8 %v2_1000984d to i32
  %v5_1000984d = and i32 %v2_1000983b, -256
  %v6_1000984d = or i32 %v3_1000984d, %v5_1000984d
  store i32 %v6_1000984d, i32* %eax.global-to-local, align 4
  %v11_1000984f = icmp eq i8 %v2_1000984d, 92
  br i1 %v11_1000984f, label %dec_label_pc_10009857, label %dec_label_pc_10009853

dec_label_pc_10009853:                            ; preds = %dec_label_pc_10009849
  %v11_10009853 = icmp eq i8 %v2_1000984d, 47
  %v1_10009855 = icmp eq i1 %v11_10009853, false
  br i1 %v1_10009855, label %dec_label_pc_1000985a, label %dec_label_pc_10009857

dec_label_pc_10009857:                            ; preds = %dec_label_pc_10009853, %dec_label_pc_10009849
  store i8 0, i8* %v1_1000984d, align 1
  br label %dec_label_pc_1000985a

dec_label_pc_1000985a:                            ; preds = %dec_label_pc_1000983b, %dec_label_pc_10009857, %dec_label_pc_10009853, %dec_label_pc_10009842
  %v0_1000985a = load i32, i32* %edi.global-to-local, align 4
  %v1_1000985a = inttoptr i32 %v0_1000985a to i8*
  %v2_1000985a = load i8, i8* %v1_1000985a, align 1
  %v9_1000985a = icmp eq i8 %v2_1000985a, 0
  store i32 %v0_1000985a, i32* %eax.global-to-local, align 4
  br i1 %v9_1000985a, label %dec_label_pc_100098cf, label %dec_label_pc_10009861

dec_label_pc_10009861:                            ; preds = %dec_label_pc_1000985a, %dec_label_pc_100098ca
  %v1_1000989431 = phi i32 [ %v1_1000989432, %dec_label_pc_100098ca ], [ %v0_1000985a, %dec_label_pc_1000985a ]
  %v0_100098c9 = phi i32 [ %storemerge7, %dec_label_pc_100098ca ], [ %v0_1000985a, %dec_label_pc_1000985a ]
  %v1_1000986c = phi i32 [ %v1_1000986c29, %dec_label_pc_100098ca ], [ %v0_1000985a, %dec_label_pc_1000985a ]
  %v1_10009861 = inttoptr i32 %v0_100098c9 to i8*
  %v2_10009861 = load i8, i8* %v1_10009861, align 1
  %v12_10009861 = icmp eq i8 %v2_10009861, 46
  %v1_10009864 = icmp eq i1 %v12_10009861, false
  %.pre = add i32 %v0_100098c9, 1
  br i1 %v1_10009864, label %dec_label_pc_100098c9, label %dec_label_pc_10009866

dec_label_pc_10009866:                            ; preds = %dec_label_pc_10009861
  %v2_10009866 = inttoptr i32 %.pre to i8*
  %v3_10009866 = load i8, i8* %v2_10009866, align 1
  %v13_10009866 = icmp eq i8 %v3_10009866, 46
  %v1_1000986a = icmp eq i1 %v13_10009866, false
  br i1 %v1_1000986a, label %dec_label_pc_100098c9, label %dec_label_pc_1000986c

dec_label_pc_1000986c:                            ; preds = %dec_label_pc_10009866
  %v12_1000986c = icmp eq i32 %v0_100098c9, %v1_1000986c
  br i1 %v12_1000986c, label %dec_label_pc_1000986c.dec_label_pc_1000987d_crit_edge, label %dec_label_pc_10009870

dec_label_pc_1000986c.dec_label_pc_1000987d_crit_edge: ; preds = %dec_label_pc_1000986c
  %v5_1000987d.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000987d

dec_label_pc_10009870:                            ; preds = %dec_label_pc_1000986c
  %v1_10009870 = add i32 %v0_100098c9, -1
  %v2_10009870 = inttoptr i32 %v1_10009870 to i8*
  %v3_10009870 = load i8, i8* %v2_10009870, align 1
  %v4_10009870 = zext i8 %v3_10009870 to i32
  %v5_10009870 = load i32, i32* @ecx, align 4
  %v6_10009870 = and i32 %v5_10009870, -256
  %v7_10009870 = or i32 %v6_10009870, %v4_10009870
  store i32 %v7_10009870, i32* @ecx, align 4
  %v11_10009873 = icmp eq i8 %v3_10009870, 92
  br i1 %v11_10009873, label %dec_label_pc_1000987d, label %dec_label_pc_10009878

dec_label_pc_10009878:                            ; preds = %dec_label_pc_10009870
  %v11_10009878 = icmp eq i8 %v3_10009870, 47
  %v1_1000987b = icmp eq i1 %v11_10009878, false
  br i1 %v1_1000987b, label %dec_label_pc_100098c9, label %dec_label_pc_1000987d

dec_label_pc_1000987d:                            ; preds = %dec_label_pc_1000986c.dec_label_pc_1000987d_crit_edge, %dec_label_pc_10009878, %dec_label_pc_10009870
  %v5_1000987d = phi i32 [ %v5_1000987d.pre, %dec_label_pc_1000986c.dec_label_pc_1000987d_crit_edge ], [ %v7_10009870, %dec_label_pc_10009878 ], [ %v7_10009870, %dec_label_pc_10009870 ]
  %v1_1000987d = add i32 %v0_100098c9, 2
  %v2_1000987d = inttoptr i32 %v1_1000987d to i8*
  %v3_1000987d = load i8, i8* %v2_1000987d, align 1
  %v4_1000987d = zext i8 %v3_1000987d to i32
  %v6_1000987d = and i32 %v5_1000987d, -256
  %v7_1000987d = or i32 %v4_1000987d, %v6_1000987d
  store i32 %v7_1000987d, i32* @ecx, align 4
  store i32 %v1_1000987d, i32* %ebx.global-to-local, align 4
  %v5_10009883 = icmp eq i8 %v3_1000987d, 0
  br i1 %v5_10009883, label %dec_label_pc_10009891, label %dec_label_pc_10009887

dec_label_pc_10009887:                            ; preds = %dec_label_pc_1000987d
  %v11_10009887 = icmp eq i8 %v3_1000987d, 92
  br i1 %v11_10009887, label %dec_label_pc_10009891, label %dec_label_pc_1000988c

dec_label_pc_1000988c:                            ; preds = %dec_label_pc_10009887
  %v11_1000988c = icmp eq i8 %v3_1000987d, 47
  %v1_1000988f = icmp eq i1 %v11_1000988c, false
  br i1 %v1_1000988f, label %dec_label_pc_100098c9, label %dec_label_pc_10009891

dec_label_pc_10009891:                            ; preds = %dec_label_pc_1000988c, %dec_label_pc_10009887, %dec_label_pc_1000987d
  %v1_10009891 = add i32 %v0_100098c9, -2
  br label %dec_label_pc_10009894

dec_label_pc_10009894:                            ; preds = %dec_label_pc_100098a2, %dec_label_pc_10009891
  %v11_100098fd = phi i32 [ %v6_10009898, %dec_label_pc_100098a2 ], [ %v0_100098c9, %dec_label_pc_10009891 ]
  %v0_100098a2 = phi i32 [ %v1_100098a2, %dec_label_pc_100098a2 ], [ %v1_10009891, %dec_label_pc_10009891 ]
  store i32 %v0_100098a2, i32* @ecx, align 4
  %v7_10009894 = icmp ult i32 %v0_100098a2, %v1_1000989431
  br i1 %v7_10009894, label %dec_label_pc_100098fb, label %dec_label_pc_10009898

dec_label_pc_10009898:                            ; preds = %dec_label_pc_10009894
  %v1_10009898 = inttoptr i32 %v0_100098a2 to i8*
  %v2_10009898 = load i8, i8* %v1_10009898, align 1
  %v3_10009898 = zext i8 %v2_10009898 to i32
  %v5_10009898 = and i32 %v11_100098fd, -256
  %v6_10009898 = or i32 %v3_10009898, %v5_10009898
  store i32 %v6_10009898, i32* %eax.global-to-local, align 4
  %v11_1000989a = icmp eq i8 %v2_10009898, 92
  br i1 %v11_1000989a, label %dec_label_pc_100098a5, label %dec_label_pc_1000989e

dec_label_pc_1000989e:                            ; preds = %dec_label_pc_10009898
  %v11_1000989e = icmp eq i8 %v2_10009898, 47
  br i1 %v11_1000989e, label %dec_label_pc_100098a5, label %dec_label_pc_100098a2

dec_label_pc_100098a2:                            ; preds = %dec_label_pc_1000989e
  %v1_100098a2 = add i32 %v0_100098a2, -1
  br label %dec_label_pc_10009894

dec_label_pc_100098a5:                            ; preds = %dec_label_pc_1000989e, %dec_label_pc_10009898
  store i32 %v1_1000987d, i32* %eax.global-to-local, align 4
  %v1_100098a7 = add i32 %v0_100098c9, 3
  store i32 %v1_100098a7, i32* %esi.global-to-local, align 4
  store i32 %v1_1000987d, i32* %ebx.global-to-local, align 4
  %v4_100098b0.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_100098b0

dec_label_pc_100098b0:                            ; preds = %dec_label_pc_100098b0, %dec_label_pc_100098a5
  %v4_100098b0 = phi i32 [ %v6_100098b0, %dec_label_pc_100098b0 ], [ %v4_100098b0.pre, %dec_label_pc_100098a5 ]
  %v0_100098b2 = phi i32 [ %v1_100098b2, %dec_label_pc_100098b0 ], [ %v1_1000987d, %dec_label_pc_100098a5 ]
  %v1_100098b0 = inttoptr i32 %v0_100098b2 to i8*
  %v2_100098b0 = load i8, i8* %v1_100098b0, align 1
  %v3_100098b0 = zext i8 %v2_100098b0 to i32
  %v5_100098b0 = and i32 %v4_100098b0, -256
  %v6_100098b0 = or i32 %v3_100098b0, %v5_100098b0
  store i32 %v6_100098b0, i32* %edx.global-to-local, align 4
  %v1_100098b2 = add i32 %v0_100098b2, 1
  store i32 %v1_100098b2, i32* %eax.global-to-local, align 4
  %v5_100098b3 = icmp eq i8 %v2_100098b0, 0
  %v1_100098b5 = icmp eq i1 %v5_100098b3, false
  br i1 %v1_100098b5, label %dec_label_pc_100098b0, label %dec_label_pc_100098b7

dec_label_pc_100098b7:                            ; preds = %dec_label_pc_100098b0
  %v2_100098b7 = sub i32 %v1_100098b2, %v1_100098a7
  %v1_100098b9 = add i32 %v2_100098b7, 1
  store i32 %v1_100098b9, i32* %eax.global-to-local, align 4
  %v1_100098ba = load i32, i32* @esp, align 4
  %v2_100098ba = add i32 %v1_100098ba, -4
  %v3_100098ba = inttoptr i32 %v2_100098ba to i32*
  store i32 %v1_100098b9, i32* %v3_100098ba, align 4
  %v0_100098bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_100098bb = add i32 %v1_100098ba, -8
  %v3_100098bb = inttoptr i32 %v2_100098bb to i32*
  store i32 %v0_100098bb, i32* %v3_100098bb, align 4
  %v0_100098bc = load i32, i32* @ecx, align 4
  %v2_100098bc = add i32 %v1_100098ba, -12
  %v3_100098bc = inttoptr i32 %v2_100098bc to i32*
  store i32 %v0_100098bc, i32* %v3_100098bc, align 4
  %v1_100098bd = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_100098bd = ptrtoint i32* %v1_100098bd to i32
  store i32 %v3_100098bd, i32* %eax.global-to-local, align 4
  %v0_100098c5 = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_100098ca

dec_label_pc_100098c9:                            ; preds = %dec_label_pc_10009861, %dec_label_pc_1000988c, %dec_label_pc_10009878, %dec_label_pc_10009866
  br label %dec_label_pc_100098ca

dec_label_pc_100098ca:                            ; preds = %dec_label_pc_100098c9, %dec_label_pc_100098b7
  %v1_1000989432 = phi i32 [ %v1_1000989431, %dec_label_pc_100098c9 ], [ %v0_100098c5, %dec_label_pc_100098b7 ]
  %storemerge7 = phi i32 [ %.pre, %dec_label_pc_100098c9 ], [ %v0_100098c5, %dec_label_pc_100098b7 ]
  %v1_1000986c29 = phi i32 [ %v1_1000986c, %dec_label_pc_100098c9 ], [ %v0_100098c5, %dec_label_pc_100098b7 ]
  store i32 %storemerge7, i32* %eax.global-to-local, align 4
  %v1_100098ca = inttoptr i32 %storemerge7 to i8*
  %v2_100098ca = load i8, i8* %v1_100098ca, align 1
  %v9_100098ca = icmp eq i8 %v2_100098ca, 0
  %v1_100098cd = icmp eq i1 %v9_100098ca, false
  br i1 %v1_100098cd, label %dec_label_pc_10009861, label %dec_label_pc_100098cf

dec_label_pc_100098cf:                            ; preds = %dec_label_pc_100098ca, %dec_label_pc_1000985a
  %v0_100098d2 = phi i32 [ %v0_1000985a, %dec_label_pc_1000985a ], [ %v1_1000989432, %dec_label_pc_100098ca ]
  %v1_100098cf = inttoptr i32 %v0_100098d2 to i8*
  %v2_100098cf = load i8, i8* %v1_100098cf, align 1
  %v9_100098cf = icmp eq i8 %v2_100098cf, 0
  store i32 %v0_100098d2, i32* %eax.global-to-local, align 4
  br i1 %v9_100098cf, label %dec_label_pc_100098f4, label %dec_label_pc_100098d6

dec_label_pc_100098d6:                            ; preds = %dec_label_pc_100098cf
  %v5_100098d6 = and i32 %arg2, 255
  %v6_100098d6 = load i32, i32* %edx.global-to-local, align 4
  %v7_100098d6 = and i32 %v6_100098d6, -256
  %v8_100098d6 = or i32 %v7_100098d6, %v5_100098d6
  store i32 %v8_100098d6, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_100098e0

dec_label_pc_100098e0:                            ; preds = %dec_label_pc_100098ee, %dec_label_pc_100098d6
  %v2_100098ec = phi i32 [ %v1_100098ee, %dec_label_pc_100098ee ], [ %v0_100098d2, %dec_label_pc_100098d6 ]
  %v1_100098e0 = inttoptr i32 %v2_100098ec to i8*
  %v2_100098e0 = load i8, i8* %v1_100098e0, align 1
  %v3_100098e0 = zext i8 %v2_100098e0 to i32
  %v4_100098e0 = load i32, i32* @ecx, align 4
  %v5_100098e0 = and i32 %v4_100098e0, -256
  %v6_100098e0 = or i32 %v5_100098e0, %v3_100098e0
  store i32 %v6_100098e0, i32* @ecx, align 4
  %v11_100098e2 = icmp eq i8 %v2_100098e0, 47
  br i1 %v11_100098e2, label %dec_label_pc_100098ec, label %dec_label_pc_100098e7

dec_label_pc_100098e7:                            ; preds = %dec_label_pc_100098e0
  %v11_100098e7 = icmp eq i8 %v2_100098e0, 92
  %v1_100098ea = icmp eq i1 %v11_100098e7, false
  br i1 %v1_100098ea, label %dec_label_pc_100098ee, label %dec_label_pc_100098ec

dec_label_pc_100098ec:                            ; preds = %dec_label_pc_100098e7, %dec_label_pc_100098e0
  %v0_100098ec = load i32, i32* %edx.global-to-local, align 4
  %v1_100098ec = trunc i32 %v0_100098ec to i8
  store i8 %v1_100098ec, i8* %v1_100098e0, align 1
  %v0_100098ee.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100098ee

dec_label_pc_100098ee:                            ; preds = %dec_label_pc_100098ec, %dec_label_pc_100098e7
  %v0_100098ee = phi i32 [ %v0_100098ee.pre, %dec_label_pc_100098ec ], [ %v2_100098ec, %dec_label_pc_100098e7 ]
  %v1_100098ee = add i32 %v0_100098ee, 1
  store i32 %v1_100098ee, i32* %eax.global-to-local, align 4
  %v1_100098ef = inttoptr i32 %v1_100098ee to i8*
  %v2_100098ef = load i8, i8* %v1_100098ef, align 1
  %v9_100098ef = icmp eq i8 %v2_100098ef, 0
  %v1_100098f2 = icmp eq i1 %v9_100098ef, false
  br i1 %v1_100098f2, label %dec_label_pc_100098e0, label %dec_label_pc_100098f4

dec_label_pc_100098f4:                            ; preds = %dec_label_pc_100098ee, %dec_label_pc_100098cf
  %v0_100098f6 = phi i32 [ %v0_100098d2, %dec_label_pc_100098cf ], [ %v1_100098ee, %dec_label_pc_100098ee ]
  %v0_100098f4 = load i32, i32* @esp, align 4
  %v1_100098f4 = inttoptr i32 %v0_100098f4 to i32*
  %v2_100098f4 = load i32, i32* %v1_100098f4, align 4
  store i32 %v2_100098f4, i32* %edi.global-to-local, align 4
  %v3_100098f4 = add i32 %v0_100098f4, 4
  %v1_100098f5 = inttoptr i32 %v3_100098f4 to i32*
  %v2_100098f5 = load i32, i32* %v1_100098f5, align 4
  store i32 %v2_100098f5, i32* @esi, align 4
  %v3_100098f5 = add i32 %v0_100098f4, 8
  %v1_100098f6 = and i32 %v0_100098f6, -256
  %v2_100098f6 = or i32 %v1_100098f6, 1
  store i32 %v2_100098f6, i32* %eax.global-to-local, align 4
  %v1_100098f8 = inttoptr i32 %v3_100098f5 to i32*
  %v2_100098f8 = load i32, i32* %v1_100098f8, align 4
  store i32 %v2_100098f8, i32* %ebx.global-to-local, align 4
  ret i32 %v2_100098f6

dec_label_pc_100098fb:                            ; preds = %dec_label_pc_10009894
  %v0_100098fb = load i32, i32* @esp, align 4
  %v1_100098fb = inttoptr i32 %v0_100098fb to i32*
  %v2_100098fb = load i32, i32* %v1_100098fb, align 4
  store i32 %v2_100098fb, i32* %edi.global-to-local, align 4
  %v3_100098fb = add i32 %v0_100098fb, 4
  %v1_100098fc = inttoptr i32 %v3_100098fb to i32*
  %v2_100098fc = load i32, i32* %v1_100098fc, align 4
  store i32 %v2_100098fc, i32* @esi, align 4
  %v3_100098fc = add i32 %v0_100098fb, 8
  %v12_100098fd = and i32 %v11_100098fd, -256
  store i32 %v12_100098fd, i32* %eax.global-to-local, align 4
  %v1_100098ff = inttoptr i32 %v3_100098fc to i32*
  %v2_100098ff = load i32, i32* %v1_100098ff, align 4
  store i32 %v2_100098ff, i32* %ebx.global-to-local, align 4
  ret i32 %v12_100098fd
}

define i32 @function_10009910(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009910:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp10 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10009910 = load i32, i32* @ebp, align 4
  store i32 %v0_10009910, i32* %stack_var_-4, align 4
  %v0_10009914 = load i32, i32* @edi, align 4
  store i32 %v0_10009914, i32* %stack_var_-12, align 4
  store i32 %tmp10, i32* %edi.global-to-local, align 4
  store i32 %tmp10, i32* %eax.global-to-local, align 4
  %v1_1000991a = add i32 %tmp10, 1
  store i32 %v1_1000991a, i32* @edx, align 4
  %v4_10009920.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009920

dec_label_pc_10009920:                            ; preds = %dec_label_pc_10009920, %dec_label_pc_10009910
  %v4_10009920 = phi i32 [ %v6_10009920, %dec_label_pc_10009920 ], [ %v4_10009920.pre, %dec_label_pc_10009910 ]
  %v0_10009922 = phi i32 [ %v1_10009922, %dec_label_pc_10009920 ], [ %tmp10, %dec_label_pc_10009910 ]
  %v1_10009920 = inttoptr i32 %v0_10009922 to i8*
  %v2_10009920 = load i8, i8* %v1_10009920, align 1
  %v3_10009920 = zext i8 %v2_10009920 to i32
  %v5_10009920 = and i32 %v4_10009920, -256
  %v6_10009920 = or i32 %v3_10009920, %v5_10009920
  store i32 %v6_10009920, i32* @ecx, align 4
  %v1_10009922 = add i32 %v0_10009922, 1
  store i32 %v1_10009922, i32* %eax.global-to-local, align 4
  %v5_10009923 = icmp eq i8 %v2_10009920, 0
  %v1_10009925 = icmp eq i1 %v5_10009923, false
  br i1 %v1_10009925, label %dec_label_pc_10009920, label %dec_label_pc_10009927

dec_label_pc_10009927:                            ; preds = %dec_label_pc_10009920
  %v2_10009927 = sub i32 %v1_10009922, %v1_1000991a
  store i32 %v2_10009927, i32* %eax.global-to-local, align 4
  %tmp22 = icmp slt i32 %v2_10009927, 1
  br i1 %tmp22, label %dec_label_pc_10009958, label %dec_label_pc_1000992f

dec_label_pc_1000992f:                            ; preds = %dec_label_pc_10009927
  %v3_1000992f = add i32 %tmp10, -1
  %v4_1000992f = add i32 %v3_1000992f, %v2_10009927
  %v5_1000992f = inttoptr i32 %v4_1000992f to i8*
  %v6_1000992f = load i8, i8* %v5_1000992f, align 1
  %v7_1000992f = zext i8 %v6_1000992f to i32
  %v9_1000992f = and i32 %v2_10009927, -256
  %v10_1000992f = or i32 %v7_1000992f, %v9_1000992f
  store i32 %v10_1000992f, i32* %eax.global-to-local, align 4
  %v11_10009933 = icmp eq i8 %v6_1000992f, 92
  br i1 %v11_10009933, label %dec_label_pc_10009958, label %dec_label_pc_10009937

dec_label_pc_10009937:                            ; preds = %dec_label_pc_1000992f
  %v11_10009937 = icmp eq i8 %v6_1000992f, 47
  br i1 %v11_10009937, label %dec_label_pc_10009958, label %dec_label_pc_1000993b

dec_label_pc_1000993b:                            ; preds = %dec_label_pc_10009937
  %v1_1000993b = add i32 %v2_10009927, 1
  store i32 %v1_1000993b, i32* %eax.global-to-local, align 4
  %v5_10009941 = icmp slt i32 %v1_1000993b, %arg2
  br i1 %v5_10009941, label %dec_label_pc_10009952, label %dec_label_pc_10009943

dec_label_pc_10009943:                            ; preds = %dec_label_pc_1000993b
  %v0_10009949 = call i32 @Error()
  store i32 %v0_10009949, i32* %eax.global-to-local, align 4
  %v1_10009952.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009952

dec_label_pc_10009952:                            ; preds = %dec_label_pc_10009943, %dec_label_pc_1000993b
  %v1_10009952 = phi i32 [ %v1_10009952.pre, %dec_label_pc_10009943 ], [ %tmp10, %dec_label_pc_1000993b ]
  %v3_10009952 = add i32 %v1_10009952, %v2_10009927
  %v4_10009952 = inttoptr i32 %v3_10009952 to i16*
  store i16 92, i16* %v4_10009952, align 2
  %v2_10009958.pre = load i32, i32* %stack_var_-12, align 4
  %v2_1000995a.pre = load i32, i32* %stack_var_-4, align 4
  %v0_1000995b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009958

dec_label_pc_10009958:                            ; preds = %dec_label_pc_10009952, %dec_label_pc_10009937, %dec_label_pc_1000992f, %dec_label_pc_10009927
  %v0_1000995b = phi i32 [ %v0_1000995b.pre, %dec_label_pc_10009952 ], [ %v10_1000992f, %dec_label_pc_10009937 ], [ %v10_1000992f, %dec_label_pc_1000992f ], [ %v2_10009927, %dec_label_pc_10009927 ]
  %v2_1000995a = phi i32 [ %v2_1000995a.pre, %dec_label_pc_10009952 ], [ %v0_10009910, %dec_label_pc_10009937 ], [ %v0_10009910, %dec_label_pc_1000992f ], [ %v0_10009910, %dec_label_pc_10009927 ]
  %v2_10009958 = phi i32 [ %v2_10009958.pre, %dec_label_pc_10009952 ], [ %v0_10009914, %dec_label_pc_10009937 ], [ %v0_10009914, %dec_label_pc_1000992f ], [ %v0_10009914, %dec_label_pc_10009927 ]
  store i32 %v2_10009958, i32* @edi, align 4
  store i32 %v2_1000995a, i32* @ebp, align 4
  ret i32 %v0_1000995b
}

define i32 @function_10009960(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10009960:
  store i32 %arg1, i32* @ecx, align 4
  %v1_10009966 = inttoptr i32 %arg1 to i8*
  %v2_10009966 = load i8, i8* %v1_10009966, align 1
  %v4_10009966 = load i32, i32* @eax, align 4
  %v5_10009966 = and i32 %v4_10009966, -256
  %v5_10009968 = icmp eq i8 %v2_10009966, 0
  br i1 %v5_10009968, label %dec_label_pc_10009972, label %dec_label_pc_1000996c

dec_label_pc_1000996c:                            ; preds = %dec_label_pc_10009960
  %v1_1000996c = add i32 %arg1, 1
  %v2_1000996c = inttoptr i32 %v1_1000996c to i8*
  %v3_1000996c = load i8, i8* %v2_1000996c, align 1
  %v13_1000996c = icmp eq i8 %v3_1000996c, 58
  br i1 %v13_1000996c, label %dec_label_pc_1000997e, label %dec_label_pc_10009972

dec_label_pc_10009972:                            ; preds = %dec_label_pc_1000996c, %dec_label_pc_10009960
  %v11_10009972 = icmp eq i8 %v2_10009966, 47
  br i1 %v11_10009972, label %dec_label_pc_1000997e, label %dec_label_pc_10009976

dec_label_pc_10009976:                            ; preds = %dec_label_pc_10009972
  %v11_10009976 = icmp eq i8 %v2_10009966, 92
  br i1 %v11_10009976, label %dec_label_pc_1000997e, label %dec_label_pc_1000997a

dec_label_pc_1000997a:                            ; preds = %dec_label_pc_10009976
  ret i32 %v5_10009966

dec_label_pc_1000997e:                            ; preds = %dec_label_pc_10009976, %dec_label_pc_10009972, %dec_label_pc_1000996c
  %v2_1000997e = or i32 %v5_10009966, 1
  ret i32 %v2_1000997e
}

define i32 @function_10009990(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10009990:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10009990 = load i32, i32* @ebp, align 4
  store i32 %v0_10009990, i32* %stack_var_-4, align 4
  %v1_10009997 = icmp eq i32 %arg5, 0
  br i1 %v1_10009997, label %dec_label_pc_10009a3b, label %dec_label_pc_1000999f

dec_label_pc_1000999f:                            ; preds = %dec_label_pc_10009990
  %v0_1000999f = load i32, i32* @ebx, align 4
  store i32 %v0_1000999f, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_100099a5 = add i32 %arg1, 1
  store i32 %v1_100099a5, i32* @edx, align 4
  %v4_100099a8.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_100099a8

dec_label_pc_100099a8:                            ; preds = %dec_label_pc_100099a8, %dec_label_pc_1000999f
  %v4_100099a8 = phi i32 [ %v6_100099a8, %dec_label_pc_100099a8 ], [ %v4_100099a8.pre, %dec_label_pc_1000999f ]
  %v0_100099aa = phi i32 [ %v1_100099aa, %dec_label_pc_100099a8 ], [ %arg1, %dec_label_pc_1000999f ]
  %v1_100099a8 = inttoptr i32 %v0_100099aa to i8*
  %v2_100099a8 = load i8, i8* %v1_100099a8, align 1
  %v3_100099a8 = zext i8 %v2_100099a8 to i32
  %v5_100099a8 = and i32 %v4_100099a8, -256
  %v6_100099a8 = or i32 %v3_100099a8, %v5_100099a8
  store i32 %v6_100099a8, i32* @ecx, align 4
  %v1_100099aa = add i32 %v0_100099aa, 1
  store i32 %v1_100099aa, i32* %eax.global-to-local, align 4
  %v5_100099ab = icmp eq i8 %v2_100099a8, 0
  %v1_100099ad = icmp eq i1 %v5_100099ab, false
  br i1 %v1_100099ad, label %dec_label_pc_100099a8, label %dec_label_pc_100099af

dec_label_pc_100099af:                            ; preds = %dec_label_pc_100099a8
  store i32 %arg2, i32* @ecx, align 4
  %v2_100099b2 = sub i32 %v1_100099aa, %v1_100099a5
  store i32 %v2_100099b2, i32* %eax.global-to-local, align 4
  %v0_100099b4 = load i32, i32* @esi, align 4
  store i32 %v0_100099b4, i32* %stack_var_-16, align 4
  store i32 %v2_100099b2, i32* %esi.global-to-local, align 4
  %v2_100099b7 = icmp slt i32 %arg2, 0
  %v1_100099b9 = icmp eq i1 %v2_100099b7, false
  br i1 %v1_100099b9, label %dec_label_pc_100099d8, label %dec_label_pc_100099bb

dec_label_pc_100099bb:                            ; preds = %dec_label_pc_100099af
  %v1_100099bd = sub i32 0, %arg2
  %v1_100099bf = ashr i32 %v1_100099bd, 31
  %v2_100099c0 = zext i32 %v1_100099bd to i64
  %v4_100099c0 = zext i32 %v1_100099bf to i64
  %v5_100099c0 = mul nuw i64 %v4_100099c0, 4294967296
  %v6_100099c0 = or i64 %v5_100099c0, %v2_100099c0
  %v7_100099c0 = zext i32 %v2_100099b2 to i64
  %v8_100099c0 = sdiv i64 %v6_100099c0, %v7_100099c0
  %v9_100099c0 = trunc i64 %v8_100099c0 to i32
  store i32 %v9_100099c0, i32* %eax.global-to-local, align 4
  %v10_100099c0 = srem i64 %v6_100099c0, %v7_100099c0
  %v11_100099c0 = trunc i64 %v10_100099c0 to i32
  store i32 %v11_100099c0, i32* @edx, align 4
  %v2_100099c4 = sub i32 %v2_100099b2, %v11_100099c0
  store i32 %v2_100099c4, i32* @ecx, align 4
  br label %dec_label_pc_100099c6

dec_label_pc_100099c6:                            ; preds = %dec_label_pc_100099d8, %dec_label_pc_100099bb
  %v1_10009a06 = phi i32 [ %arg2, %dec_label_pc_100099d8 ], [ %v2_100099c4, %dec_label_pc_100099bb ]
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v2_100099c9 = icmp slt i32 %arg3, 0
  %v1_100099cb = icmp eq i1 %v2_100099c9, false
  br i1 %v1_100099cb, label %dec_label_pc_100099e7, label %dec_label_pc_100099cd

dec_label_pc_100099cd:                            ; preds = %dec_label_pc_100099c6
  %v1_100099cd = sub i32 0, %arg3
  %v1_100099cf = ashr i32 %v1_100099cd, 31
  %v2_100099d0 = zext i32 %v1_100099cd to i64
  %v4_100099d0 = zext i32 %v1_100099cf to i64
  %v5_100099d0 = mul nuw i64 %v4_100099d0, 4294967296
  %v6_100099d0 = or i64 %v5_100099d0, %v2_100099d0
  %v7_100099d0 = zext i32 %v2_100099b2 to i64
  %v10_100099d0 = srem i64 %v6_100099d0, %v7_100099d0
  %v11_100099d0 = trunc i64 %v10_100099d0 to i32
  store i32 %v11_100099d0, i32* @edx, align 4
  %v2_100099d2 = sub i32 %v2_100099b2, %v11_100099d0
  store i32 %v2_100099d2, i32* %esi.global-to-local, align 4
  store i32 %v2_100099d2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100099f0

dec_label_pc_100099d8:                            ; preds = %dec_label_pc_100099af
  %v5_100099da = icmp sgt i32 %v2_100099b2, %arg2
  br i1 %v5_100099da, label %dec_label_pc_100099c6, label %dec_label_pc_100099dc

dec_label_pc_100099dc:                            ; preds = %dec_label_pc_100099d8
  store i32 %arg4, i32* @ecx, align 4
  store i32 %v0_100099b4, i32* %esi.global-to-local, align 4
  store i32 %v0_1000999f, i32* @ebx, align 4
  %v1_100099e1 = inttoptr i32 %arg4 to i8*
  store i8 0, i8* %v1_100099e1, align 1
  %v2_100099e5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100099e5, i32* @ebp, align 4
  %v0_100099e6 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100099e6

dec_label_pc_100099e7:                            ; preds = %dec_label_pc_100099c6
  %v7_100099e9 = icmp slt i32 %v2_100099b2, %arg3
  br i1 %v7_100099e9, label %dec_label_pc_100099eb, label %dec_label_pc_100099f0

dec_label_pc_100099eb:                            ; preds = %dec_label_pc_100099e7
  %v1_100099eb = ashr i32 %arg3, 31
  %v2_100099ec = zext i32 %arg3 to i64
  %v4_100099ec = zext i32 %v1_100099eb to i64
  %v5_100099ec = mul nuw i64 %v4_100099ec, 4294967296
  %v6_100099ec = or i64 %v5_100099ec, %v2_100099ec
  %v7_100099ec = zext i32 %v2_100099b2 to i64
  %v10_100099ec = srem i64 %v6_100099ec, %v7_100099ec
  %v11_100099ec = trunc i64 %v10_100099ec to i32
  store i32 %v11_100099ec, i32* @edx, align 4
  store i32 %v11_100099ec, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100099f0

dec_label_pc_100099f0:                            ; preds = %dec_label_pc_100099e7, %dec_label_pc_100099eb, %dec_label_pc_100099cd
  %v0_100099ff = phi i32 [ %arg3, %dec_label_pc_100099e7 ], [ %v11_100099ec, %dec_label_pc_100099eb ], [ %v2_100099d2, %dec_label_pc_100099cd ]
  %v2_100099f0 = sub i32 %v0_100099ff, %v1_10009a06
  %v8_100099f2 = icmp sgt i32 %v0_100099ff, %v1_10009a06
  br i1 %v8_100099f2, label %dec_label_pc_100099ff, label %dec_label_pc_100099f4

dec_label_pc_100099f4:                            ; preds = %dec_label_pc_100099f0
  store i32 %arg4, i32* @edx, align 4
  store i32 %v0_100099b4, i32* %esi.global-to-local, align 4
  store i32 %v0_1000999f, i32* @ebx, align 4
  %v1_100099f9 = inttoptr i32 %arg4 to i8*
  store i8 0, i8* %v1_100099f9, align 1
  %v2_100099fd = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_100099fd, i32* @ebp, align 4
  %v0_100099fe = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_100099fe

dec_label_pc_100099ff:                            ; preds = %dec_label_pc_100099f0
  store i32 %v2_100099f0, i32* %esi.global-to-local, align 4
  %v1_10009a03 = add i32 %arg5, -1
  store i32 %v1_10009a03, i32* %eax.global-to-local, align 4
  %v8_10009a0a = icmp sgt i32 %v2_100099f0, %v1_10009a03
  br i1 %v8_10009a0a, label %dec_label_pc_10009a23, label %dec_label_pc_10009a0c

dec_label_pc_10009a0c:                            ; preds = %dec_label_pc_100099ff
  %v0_10009a12 = call i32 @_memcpy.1()
  store i32 %v0_10009a12, i32* %eax.global-to-local, align 4
  %v0_10009a1a = load i32, i32* %esi.global-to-local, align 4
  %v3_10009a1a = add i32 %v0_10009a1a, %arg4
  %v4_10009a1a = inttoptr i32 %v3_10009a1a to i8*
  store i8 0, i8* %v4_10009a1a, align 1
  %v2_10009a1e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10009a1e, i32* %esi.global-to-local, align 4
  %v2_10009a1f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009a1f, i32* @ebx, align 4
  %v2_10009a21 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10009a21, i32* @ebp, align 4
  %v0_10009a22 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10009a22

dec_label_pc_10009a23:                            ; preds = %dec_label_pc_100099ff
  store i32 %arg4, i32* %esi.global-to-local, align 4
  store i32 %v1_10009a03, i32* @edx, align 4
  %v0_10009a2c = call i32 @_memcpy.1()
  store i32 %v0_10009a2c, i32* @eax, align 4
  %v4_10009a34 = add i32 %v1_10009a03, %arg4
  %v5_10009a34 = inttoptr i32 %v4_10009a34 to i8*
  store i8 0, i8* %v5_10009a34, align 1
  %v2_10009a39 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10009a39, i32* %esi.global-to-local, align 4
  %v2_10009a3a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009a3a, i32* @ebx, align 4
  %v2_10009a3c.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_10009a3b

dec_label_pc_10009a3b:                            ; preds = %dec_label_pc_10009a23, %dec_label_pc_10009990
  %v2_10009a3c = phi i32 [ %v2_10009a3c.pre, %dec_label_pc_10009a23 ], [ %v0_10009990, %dec_label_pc_10009990 ]
  store i32 %v2_10009a3c, i32* @ebp, align 4
  %v0_10009a3d = load i32, i32* @eax, align 4
  ret i32 %v0_10009a3d
}

define i32 @function_10009a40() local_unnamed_addr {
dec_label_pc_10009a40:
  %v0_10009a44 = call i32 @_memcpy.1()
  ret i32 %v0_10009a44
}

define i32* @function_10009a50(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
dec_label_pc_10009a50:
  %v1_10009a54 = call i32* @_memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v1_10009a54
}

define i32 @function_10009a60(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10009a60:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v0_10009a6a = load i32, i32* @edi, align 4
  store i32 %v0_10009a6a, i32* %stack_var_-12, align 4
  store i32 %tmp2, i32* %edi.global-to-local, align 4
  %v1_10009a71 = bitcast i32* %arg1 to i8*
  %v3_10009a71 = inttoptr i32 %arg2 to i8*
  %v5_10009a71 = call i8* @_strncpy(i8* %v1_10009a71, i8* %v3_10009a71, i32 %arg3)
  %v7_10009a71 = ptrtoint i8* %v5_10009a71 to i32
  store i32 %v7_10009a71, i32* %eax.global-to-local, align 4
  %tmp13 = icmp slt i32 %arg3, 1
  br i1 %tmp13, label %dec_label_pc_10009a82, label %dec_label_pc_10009a7d

dec_label_pc_10009a7d:                            ; preds = %dec_label_pc_10009a60
  %v0_10009a7d = load i32, i32* %edi.global-to-local, align 4
  %v3_10009a7d = add i32 %arg3, -1
  %v4_10009a7d = add i32 %v3_10009a7d, %v0_10009a7d
  %v5_10009a7d = inttoptr i32 %v4_10009a7d to i8*
  store i8 0, i8* %v5_10009a7d, align 1
  %v0_10009a85.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009a82

dec_label_pc_10009a82:                            ; preds = %dec_label_pc_10009a7d, %dec_label_pc_10009a60
  %v0_10009a85 = phi i32 [ %v0_10009a85.pre, %dec_label_pc_10009a7d ], [ %v7_10009a71, %dec_label_pc_10009a60 ]
  %v2_10009a82 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009a82, i32* @edi, align 4
  ret i32 %v0_10009a85
}

define i32 @function_10009a90(i32* %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
dec_label_pc_10009a90:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v4_10009a93 = ptrtoint i8* %arg3 to i32
  store i32 %v4_10009a93, i32* @ecx, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v0_10009a9a = load i32, i32* @edi, align 4
  store i32 %v0_10009a9a, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v2_10009a9e = ptrtoint i32* %stack_var_16 to i32
  %v1_10009aa5 = bitcast i32* %arg1 to i8*
  %v7_10009aa5 = call i32 @__vsnprintf(i8* %v1_10009aa5, i32 %arg2, i8* %arg3, i32 %v2_10009a9e)
  %v2_10009aad = icmp slt i32 %v7_10009aa5, 0
  %v1_10009aaf = icmp eq i1 %v2_10009aad, false
  br i1 %v1_10009aaf, label %dec_label_pc_10009ab8, label %dec_label_pc_10009ab1

dec_label_pc_10009ab1:                            ; preds = %dec_label_pc_10009a90
  %v0_10009ab1 = load i32, i32* %edi.global-to-local, align 4
  %v1_10009ab1 = load i32, i32* %esi.global-to-local, align 4
  %v3_10009ab1 = add i32 %v0_10009ab1, -1
  %v4_10009ab1 = add i32 %v3_10009ab1, %v1_10009ab1
  %v5_10009ab1 = inttoptr i32 %v4_10009ab1 to i8*
  store i8 0, i8* %v5_10009ab1, align 1
  %v0_10009ab6 = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10009ab8

dec_label_pc_10009ab8:                            ; preds = %dec_label_pc_10009ab1, %dec_label_pc_10009a90
  %v0_10009abb = phi i32 [ %v0_10009ab6, %dec_label_pc_10009ab1 ], [ %v7_10009aa5, %dec_label_pc_10009a90 ]
  %v2_10009ab8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009ab8, i32* @edi, align 4
  ret i32 %v0_10009abb
}

define i32 @function_10009ac0(i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4) local_unnamed_addr {
dec_label_pc_10009ac0:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg3, i32* @ecx, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v0_10009acd = load i32, i32* @edi, align 4
  store i32 %v0_10009acd, i32* %stack_var_-12, align 4
  store i32 %tmp2, i32* %edi.global-to-local, align 4
  %v1_10009ad5 = bitcast i32* %arg1 to i8*
  %v4_10009ad5 = inttoptr i32 %arg3 to i8*
  %v6_10009ad5 = call i32 @__vsnprintf(i8* %v1_10009ad5, i32 %arg2, i8* %v4_10009ad5, i32 %tmp)
  %v2_10009add = icmp slt i32 %v6_10009ad5, 0
  %v1_10009adf = icmp eq i1 %v2_10009add, false
  br i1 %v1_10009adf, label %dec_label_pc_10009ae8, label %dec_label_pc_10009ae1

dec_label_pc_10009ae1:                            ; preds = %dec_label_pc_10009ac0
  %v0_10009ae1 = load i32, i32* %edi.global-to-local, align 4
  %v1_10009ae1 = load i32, i32* %esi.global-to-local, align 4
  %v3_10009ae1 = add i32 %v0_10009ae1, -1
  %v4_10009ae1 = add i32 %v3_10009ae1, %v1_10009ae1
  %v5_10009ae1 = inttoptr i32 %v4_10009ae1 to i8*
  store i8 0, i8* %v5_10009ae1, align 1
  %v0_10009ae6 = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10009ae8

dec_label_pc_10009ae8:                            ; preds = %dec_label_pc_10009ae1, %dec_label_pc_10009ac0
  %v0_10009aeb = phi i32 [ %v0_10009ae6, %dec_label_pc_10009ae1 ], [ %v6_10009ad5, %dec_label_pc_10009ac0 ]
  %v2_10009ae8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009ae8, i32* @edi, align 4
  ret i32 %v0_10009aeb
}

define i32 @function_10009af0(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_10009af0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg5 to i32
  %tmp4 = ptrtoint i32* %arg4 to i32
  %stack_var_-12 = alloca i32, align 4
  store i32 %tmp4, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @ecx, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v0_10009afd = load i32, i32* @edi, align 4
  store i32 %v0_10009afd, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v1_10009b05 = inttoptr i32 %arg1 to i8*
  %v4_10009b05 = inttoptr i32 %arg3 to i8*
  %v6_10009b05 = call i32 @__vsnprintf(i8* %v1_10009b05, i32 %arg2, i8* %v4_10009b05, i32 %tmp4)
  store i32 %v6_10009b05, i32* %eax.global-to-local, align 4
  store i32 %tmp3, i32* @ecx, align 4
  %v1_10009b10 = icmp eq i32* %arg5, null
  br i1 %v1_10009b10, label %dec_label_pc_10009b1b, label %dec_label_pc_10009b14

dec_label_pc_10009b14:                            ; preds = %dec_label_pc_10009af0
  %v2_10009b14 = icmp slt i32 %v6_10009b05, 0
  %v1_10009b19 = zext i1 %v2_10009b14 to i8
  %v3_10009b19 = bitcast i32* %arg5 to i8*
  store i8 %v1_10009b19, i8* %v3_10009b19, align 1
  %v0_10009b1b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009b1b

dec_label_pc_10009b1b:                            ; preds = %dec_label_pc_10009b14, %dec_label_pc_10009af0
  %v0_10009b1b = phi i32 [ %v0_10009b1b.pre, %dec_label_pc_10009b14 ], [ %v6_10009b05, %dec_label_pc_10009af0 ]
  %v2_10009b1b = icmp slt i32 %v0_10009b1b, 0
  %v1_10009b1d = icmp eq i1 %v2_10009b1b, false
  br i1 %v1_10009b1d, label %dec_label_pc_10009b26, label %dec_label_pc_10009b1f

dec_label_pc_10009b1f:                            ; preds = %dec_label_pc_10009b1b
  %v0_10009b1f = load i32, i32* %edi.global-to-local, align 4
  %v1_10009b1f = load i32, i32* %esi.global-to-local, align 4
  %v3_10009b1f = add i32 %v0_10009b1f, -1
  %v4_10009b1f = add i32 %v3_10009b1f, %v1_10009b1f
  %v5_10009b1f = inttoptr i32 %v4_10009b1f to i8*
  store i8 0, i8* %v5_10009b1f, align 1
  %v0_10009b24 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10009b24, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009b26

dec_label_pc_10009b26:                            ; preds = %dec_label_pc_10009b1f, %dec_label_pc_10009b1b
  %v0_10009b29 = phi i32 [ %v0_10009b24, %dec_label_pc_10009b1f ], [ %v0_10009b1b, %dec_label_pc_10009b1b ]
  %v2_10009b26 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10009b26, i32* @edi, align 4
  ret i32 %v0_10009b29
}

define i32 @function_10009b30(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10009b30:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10009b33 = load i32, i32* @edi, align 4
  store i32 %v0_10009b33, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v1_10009b37 = icmp eq i32 %arg1, 0
  br i1 %v1_10009b37, label %dec_label_pc_10009bd8, label %dec_label_pc_10009b3f

dec_label_pc_10009b3f:                            ; preds = %dec_label_pc_10009b30
  %v1_10009b3f = inttoptr i32 %arg1 to i8*
  %v2_10009b3f = load i8, i8* %v1_10009b3f, align 1
  %v9_10009b3f = icmp eq i8 %v2_10009b3f, 0
  br i1 %v9_10009b3f, label %dec_label_pc_10009bd8, label %dec_label_pc_10009b48

dec_label_pc_10009b48:                            ; preds = %dec_label_pc_10009b3f
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10009b4a = add i32 %arg1, 1
  %v4_10009b50.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009b50

dec_label_pc_10009b50:                            ; preds = %dec_label_pc_10009b50, %dec_label_pc_10009b48
  %v4_10009b50 = phi i32 [ %v6_10009b50, %dec_label_pc_10009b50 ], [ %v4_10009b50.pre, %dec_label_pc_10009b48 ]
  %v0_10009b52 = phi i32 [ %v1_10009b52, %dec_label_pc_10009b50 ], [ %arg1, %dec_label_pc_10009b48 ]
  %v1_10009b50 = inttoptr i32 %v0_10009b52 to i8*
  %v2_10009b50 = load i8, i8* %v1_10009b50, align 1
  %v3_10009b50 = zext i8 %v2_10009b50 to i32
  %v5_10009b50 = and i32 %v4_10009b50, -256
  %v6_10009b50 = or i32 %v3_10009b50, %v5_10009b50
  store i32 %v6_10009b50, i32* @ecx, align 4
  %v1_10009b52 = add i32 %v0_10009b52, 1
  store i32 %v1_10009b52, i32* %eax.global-to-local, align 4
  %v5_10009b53 = icmp eq i8 %v2_10009b50, 0
  %v1_10009b55 = icmp eq i1 %v5_10009b53, false
  br i1 %v1_10009b55, label %dec_label_pc_10009b50, label %dec_label_pc_10009b57

dec_label_pc_10009b57:                            ; preds = %dec_label_pc_10009b50
  %v2_10009b57 = sub i32 %v1_10009b52, %v1_10009b4a
  %v1_10009b59 = add i32 %v2_10009b57, -1
  store i32 %v1_10009b59, i32* @ecx, align 4
  store i32 %v1_10009b59, i32* %eax.global-to-local, align 4
  %v1_10009b5e = icmp eq i32 %v1_10009b59, 0
  %v2_10009b5e = icmp slt i32 %v1_10009b59, 0
  br i1 %v1_10009b5e, label %dec_label_pc_10009b77, label %dec_label_pc_10009b62

dec_label_pc_10009b62:                            ; preds = %dec_label_pc_10009b57, %dec_label_pc_10009b74
  %v7_10009b62 = phi i32 [ %v9_10009b62, %dec_label_pc_10009b74 ], [ %v1_10009b4a, %dec_label_pc_10009b57 ]
  %v0_10009b74 = phi i32 [ %v1_10009b74, %dec_label_pc_10009b74 ], [ %v1_10009b59, %dec_label_pc_10009b57 ]
  %v3_10009b62 = add i32 %v0_10009b74, %arg1
  %v4_10009b62 = inttoptr i32 %v3_10009b62 to i8*
  %v5_10009b62 = load i8, i8* %v4_10009b62, align 1
  %v6_10009b62 = zext i8 %v5_10009b62 to i32
  %v8_10009b62 = and i32 %v7_10009b62, -256
  %v9_10009b62 = or i32 %v6_10009b62, %v8_10009b62
  %v11_10009b65 = icmp eq i8 %v5_10009b62, 46
  br i1 %v11_10009b65, label %dec_label_pc_10009b77, label %dec_label_pc_10009b6a

dec_label_pc_10009b6a:                            ; preds = %dec_label_pc_10009b62
  %v11_10009b6a = icmp eq i8 %v5_10009b62, 92
  br i1 %v11_10009b6a, label %dec_label_pc_10009b77, label %dec_label_pc_10009b6f

dec_label_pc_10009b6f:                            ; preds = %dec_label_pc_10009b6a
  %v11_10009b6f = icmp eq i8 %v5_10009b62, 47
  br i1 %v11_10009b6f, label %dec_label_pc_10009b77, label %dec_label_pc_10009b74

dec_label_pc_10009b74:                            ; preds = %dec_label_pc_10009b6f
  %v1_10009b74 = add i32 %v0_10009b74, -1
  %v9_10009b74 = icmp eq i32 %v1_10009b74, 0
  store i32 %v1_10009b74, i32* %eax.global-to-local, align 4
  %v1_10009b75 = icmp eq i1 %v9_10009b74, false
  br i1 %v1_10009b75, label %dec_label_pc_10009b62, label %dec_label_pc_10009b77

dec_label_pc_10009b77:                            ; preds = %dec_label_pc_10009b74, %dec_label_pc_10009b6f, %dec_label_pc_10009b6a, %dec_label_pc_10009b62, %dec_label_pc_10009b57
  %v7_10009b8612 = phi i32 [ %v1_10009b4a, %dec_label_pc_10009b57 ], [ %v9_10009b62, %dec_label_pc_10009b62 ], [ %v9_10009b62, %dec_label_pc_10009b6a ], [ %v9_10009b62, %dec_label_pc_10009b6f ], [ %v9_10009b62, %dec_label_pc_10009b74 ]
  %v0_10009b81 = phi i32 [ 0, %dec_label_pc_10009b57 ], [ %v0_10009b74, %dec_label_pc_10009b62 ], [ %v0_10009b74, %dec_label_pc_10009b6a ], [ %v0_10009b74, %dec_label_pc_10009b6f ], [ %v1_10009b74, %dec_label_pc_10009b74 ]
  %v3_10009b77 = add i32 %v0_10009b81, %arg1
  %v4_10009b77 = inttoptr i32 %v3_10009b77 to i8*
  %v5_10009b77 = load i8, i8* %v4_10009b77, align 1
  %v15_10009b77 = icmp eq i8 %v5_10009b77, 46
  br i1 %v15_10009b77, label %dec_label_pc_10009b81, label %dec_label_pc_10009b82

dec_label_pc_10009b81:                            ; preds = %dec_label_pc_10009b77
  %v1_10009b81 = add i32 %v0_10009b81, -1
  br label %dec_label_pc_10009b82

dec_label_pc_10009b82:                            ; preds = %dec_label_pc_10009b77, %dec_label_pc_10009b81
  %v0_10009b98 = phi i32 [ %v1_10009b81, %dec_label_pc_10009b81 ], [ %v1_10009b59, %dec_label_pc_10009b77 ]
  store i32 %v0_10009b98, i32* %eax.global-to-local, align 4
  br i1 %v2_10009b5e, label %dec_label_pc_10009b96, label %dec_label_pc_10009b86

dec_label_pc_10009b86:                            ; preds = %dec_label_pc_10009b82, %dec_label_pc_10009b93
  %v7_10009b86 = phi i32 [ %v9_10009b86, %dec_label_pc_10009b93 ], [ %v7_10009b8612, %dec_label_pc_10009b82 ]
  %v0_10009bd5 = phi i32 [ %v1_10009b93, %dec_label_pc_10009b93 ], [ %v1_10009b59, %dec_label_pc_10009b82 ]
  %v3_10009b86 = add i32 %v0_10009bd5, %arg1
  %v4_10009b86 = inttoptr i32 %v3_10009b86 to i8*
  %v5_10009b86 = load i8, i8* %v4_10009b86, align 1
  %v6_10009b86 = zext i8 %v5_10009b86 to i32
  %v8_10009b86 = and i32 %v7_10009b86, -256
  %v9_10009b86 = or i32 %v6_10009b86, %v8_10009b86
  %v11_10009b89 = icmp eq i8 %v5_10009b86, 92
  br i1 %v11_10009b89, label %dec_label_pc_10009bc4, label %dec_label_pc_10009b8e

dec_label_pc_10009b8e:                            ; preds = %dec_label_pc_10009b86
  %v11_10009b8e = icmp eq i8 %v5_10009b86, 47
  br i1 %v11_10009b8e, label %dec_label_pc_10009bc4, label %dec_label_pc_10009b93

dec_label_pc_10009b93:                            ; preds = %dec_label_pc_10009b8e
  %v1_10009b93 = add i32 %v0_10009bd5, -1
  %v10_10009b93 = icmp slt i32 %v1_10009b93, 0
  store i32 %v1_10009b93, i32* @ecx, align 4
  %v1_10009b94 = icmp eq i1 %v10_10009b93, false
  br i1 %v1_10009b94, label %dec_label_pc_10009b86, label %dec_label_pc_10009b96

dec_label_pc_10009b96:                            ; preds = %dec_label_pc_10009b93, %dec_label_pc_10009bd0, %dec_label_pc_10009bc4, %dec_label_pc_10009b82
  br label %dec_label_pc_10009b98

dec_label_pc_10009b98:                            ; preds = %dec_label_pc_10009bd5, %dec_label_pc_10009b96
  %v0_10009ba7 = phi i32 [ 0, %dec_label_pc_10009b96 ], [ %v1_10009bd5, %dec_label_pc_10009bd5 ]
  store i32 %v0_10009ba7, i32* @ecx, align 4
  %v2_10009b98 = sub i32 %v0_10009b98, %v0_10009ba7
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v1_10009b9e = add i32 %v2_10009b98, 2
  store i32 %v1_10009b9e, i32* %eax.global-to-local, align 4
  %v5_10009ba3 = icmp slt i32 %v1_10009b9e, %arg3
  br i1 %v5_10009ba3, label %dec_label_pc_10009ba5, label %dec_label_pc_10009ba7

dec_label_pc_10009ba5:                            ; preds = %dec_label_pc_10009b98
  store i32 %v1_10009b9e, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10009ba7

dec_label_pc_10009ba7:                            ; preds = %dec_label_pc_10009b98, %dec_label_pc_10009ba5
  %v0_10009bac = phi i32 [ %arg3, %dec_label_pc_10009b98 ], [ %v1_10009b9e, %dec_label_pc_10009ba5 ]
  %v2_10009ba7 = add i32 %v0_10009ba7, %arg1
  store i32 %v2_10009ba7, i32* @ecx, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v1_10009baf = inttoptr i32 %arg2 to i8*
  %v3_10009baf = inttoptr i32 %v2_10009ba7 to i8*
  %v5_10009baf = call i8* @_strncpy(i8* %v1_10009baf, i8* %v3_10009baf, i32 %v0_10009bac)
  %v7_10009baf = ptrtoint i8* %v5_10009baf to i32
  store i32 %v7_10009baf, i32* %eax.global-to-local, align 4
  %v0_10009bb7 = load i32, i32* %esi.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_10009bb7, 1
  br i1 %tmp36, label %dec_label_pc_10009bc0, label %dec_label_pc_10009bbb

dec_label_pc_10009bbb:                            ; preds = %dec_label_pc_10009ba7
  %v1_10009bbb = load i32, i32* %edi.global-to-local, align 4
  %v3_10009bbb = add i32 %v0_10009bb7, -1
  %v4_10009bbb = add i32 %v3_10009bbb, %v1_10009bbb
  %v5_10009bbb = inttoptr i32 %v4_10009bbb to i8*
  store i8 0, i8* %v5_10009bbb, align 1
  %v0_10009bc3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009bc0

dec_label_pc_10009bc0:                            ; preds = %dec_label_pc_10009bbb, %dec_label_pc_10009ba7
  %v0_10009bc3 = phi i32 [ %v0_10009bc3.pre, %dec_label_pc_10009bbb ], [ %v7_10009baf, %dec_label_pc_10009ba7 ]
  %v2_10009bc1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009bc1, i32* @edi, align 4
  ret i32 %v0_10009bc3

dec_label_pc_10009bc4:                            ; preds = %dec_label_pc_10009b8e, %dec_label_pc_10009b86
  %v2_10009bc4 = icmp slt i32 %v0_10009bd5, 0
  br i1 %v2_10009bc4, label %dec_label_pc_10009b96, label %dec_label_pc_10009bc8

dec_label_pc_10009bc8:                            ; preds = %dec_label_pc_10009bc4
  %v5_10009bc8 = load i8, i8* %v4_10009b86, align 1
  %v11_10009bcb = icmp eq i8 %v5_10009bc8, 92
  br i1 %v11_10009bcb, label %dec_label_pc_10009bd5, label %dec_label_pc_10009bd0

dec_label_pc_10009bd0:                            ; preds = %dec_label_pc_10009bc8
  %v11_10009bd0 = icmp eq i8 %v5_10009bc8, 47
  %v1_10009bd3 = icmp eq i1 %v11_10009bd0, false
  br i1 %v1_10009bd3, label %dec_label_pc_10009b96, label %dec_label_pc_10009bd5

dec_label_pc_10009bd5:                            ; preds = %dec_label_pc_10009bd0, %dec_label_pc_10009bc8
  %v1_10009bd5 = add i32 %v0_10009bd5, 1
  br label %dec_label_pc_10009b98

dec_label_pc_10009bd8:                            ; preds = %dec_label_pc_10009b3f, %dec_label_pc_10009b30
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v1_10009bdb = inttoptr i32 %arg2 to i8*
  store i8 0, i8* %v1_10009bdb, align 1
  %v2_10009bde = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009bde, i32* @edi, align 4
  %v0_10009be0 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10009be0
}

define i32 @function_10009bf0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10009bf0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_10009bfa = load i32, i32* @edi, align 4
  store i32 %v0_10009bfa, i32* %stack_var_-16, align 4
  %v1_10009bfb = add i32 %arg1, 1
  %v4_10009c00.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009c00

dec_label_pc_10009c00:                            ; preds = %dec_label_pc_10009c00, %dec_label_pc_10009bf0
  %v4_10009c00 = phi i32 [ %v6_10009c00, %dec_label_pc_10009c00 ], [ %v4_10009c00.pre, %dec_label_pc_10009bf0 ]
  %v0_10009c02 = phi i32 [ %v1_10009c02, %dec_label_pc_10009c00 ], [ %arg1, %dec_label_pc_10009bf0 ]
  %v1_10009c00 = inttoptr i32 %v0_10009c02 to i8*
  %v2_10009c00 = load i8, i8* %v1_10009c00, align 1
  %v3_10009c00 = zext i8 %v2_10009c00 to i32
  %v5_10009c00 = and i32 %v4_10009c00, -256
  %v6_10009c00 = or i32 %v3_10009c00, %v5_10009c00
  store i32 %v6_10009c00, i32* @ecx, align 4
  %v1_10009c02 = add i32 %v0_10009c02, 1
  store i32 %v1_10009c02, i32* %eax.global-to-local, align 4
  %v5_10009c03 = icmp eq i8 %v2_10009c00, 0
  %v1_10009c05 = icmp eq i1 %v5_10009c03, false
  br i1 %v1_10009c05, label %dec_label_pc_10009c00, label %dec_label_pc_10009c07

dec_label_pc_10009c07:                            ; preds = %dec_label_pc_10009c00
  %tmp27 = ptrtoint i32* %arg2 to i32
  store i32 %arg3, i32* %edi.global-to-local, align 4
  %v2_10009c0a = sub i32 %v1_10009c02, %v1_10009bfb
  %v1_10009c0c = add i32 %v2_10009c0a, -1
  store i32 %v1_10009c0c, i32* %eax.global-to-local, align 4
  %tmp28 = icmp slt i32 %v1_10009c0c, 1
  br i1 %tmp28, label %dec_label_pc_10009c28, label %dec_label_pc_10009c11

dec_label_pc_10009c11:                            ; preds = %dec_label_pc_10009c07, %dec_label_pc_10009c23
  %v7_10009c11 = phi i32 [ %v9_10009c11, %dec_label_pc_10009c23 ], [ %v6_10009c00, %dec_label_pc_10009c07 ]
  %v0_10009c64 = phi i32 [ %v1_10009c23, %dec_label_pc_10009c23 ], [ %v1_10009c0c, %dec_label_pc_10009c07 ]
  %v3_10009c11 = add i32 %v0_10009c64, %arg1
  %v4_10009c11 = inttoptr i32 %v3_10009c11 to i8*
  %v5_10009c11 = load i8, i8* %v4_10009c11, align 1
  %v6_10009c11 = zext i8 %v5_10009c11 to i32
  %v8_10009c11 = and i32 %v7_10009c11, -256
  %v9_10009c11 = or i32 %v6_10009c11, %v8_10009c11
  store i32 %v9_10009c11, i32* @ecx, align 4
  %v11_10009c14 = icmp eq i8 %v5_10009c11, 46
  br i1 %v11_10009c14, label %dec_label_pc_10009c48, label %dec_label_pc_10009c19

dec_label_pc_10009c19:                            ; preds = %dec_label_pc_10009c11
  %v11_10009c19 = icmp eq i8 %v5_10009c11, 92
  br i1 %v11_10009c19, label %dec_label_pc_10009c48, label %dec_label_pc_10009c1e

dec_label_pc_10009c1e:                            ; preds = %dec_label_pc_10009c19
  %v11_10009c1e = icmp eq i8 %v5_10009c11, 47
  br i1 %v11_10009c1e, label %dec_label_pc_10009c48, label %dec_label_pc_10009c23

dec_label_pc_10009c23:                            ; preds = %dec_label_pc_10009c1e
  %v1_10009c23 = add i32 %v0_10009c64, -1
  %v9_10009c23 = icmp eq i32 %v1_10009c23, 0
  %v10_10009c23 = icmp slt i32 %v1_10009c23, 0
  store i32 %v1_10009c23, i32* %eax.global-to-local, align 4
  %v3_10009c26 = icmp eq i1 %v10_10009c23, false
  %v4_10009c26 = icmp eq i1 %v9_10009c23, false
  %v5_10009c26 = icmp eq i1 %v3_10009c26, %v4_10009c26
  br i1 %v5_10009c26, label %dec_label_pc_10009c11, label %dec_label_pc_10009c28

dec_label_pc_10009c28:                            ; preds = %dec_label_pc_10009c23, %dec_label_pc_10009c59, %dec_label_pc_10009c54, %dec_label_pc_10009c4c, %dec_label_pc_10009c48, %dec_label_pc_10009c07
  %v0_10009c4711 = phi i32 [ %v0_10009c64, %dec_label_pc_10009c59 ], [ %v0_10009c64, %dec_label_pc_10009c54 ], [ %v0_10009c64, %dec_label_pc_10009c4c ], [ %v0_10009c64, %dec_label_pc_10009c48 ], [ %v1_10009c0c, %dec_label_pc_10009c07 ], [ %v1_10009c23, %dec_label_pc_10009c23 ]
  store i32 %tmp27, i32* %esi.global-to-local, align 4
  %v12_10009c2b = icmp eq i32 %tmp27, %arg1
  br i1 %v12_10009c2b, label %dec_label_pc_10009c43, label %dec_label_pc_10009c2f

dec_label_pc_10009c2f:                            ; preds = %dec_label_pc_10009c28
  %v1_10009c32 = bitcast i32* %arg2 to i8*
  %v3_10009c32 = inttoptr i32 %arg1 to i8*
  %v5_10009c32 = call i8* @_strncpy(i8* %v1_10009c32, i8* %v3_10009c32, i32 %arg3)
  %v7_10009c32 = ptrtoint i8* %v5_10009c32 to i32
  store i32 %v7_10009c32, i32* %eax.global-to-local, align 4
  %tmp32 = icmp slt i32 %arg3, 1
  br i1 %tmp32, label %dec_label_pc_10009c43, label %dec_label_pc_10009c3e

dec_label_pc_10009c3e:                            ; preds = %dec_label_pc_10009c2f
  %v0_10009c3e = load i32, i32* %esi.global-to-local, align 4
  %v3_10009c3e = add i32 %arg3, -1
  %v4_10009c3e = add i32 %v3_10009c3e, %v0_10009c3e
  %v5_10009c3e = inttoptr i32 %v4_10009c3e to i8*
  store i8 0, i8* %v5_10009c3e, align 1
  %v0_10009c47.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009c43

dec_label_pc_10009c43:                            ; preds = %dec_label_pc_10009c3e, %dec_label_pc_10009c2f, %dec_label_pc_10009c28
  %v0_10009c47 = phi i32 [ %v0_10009c47.pre, %dec_label_pc_10009c3e ], [ %v7_10009c32, %dec_label_pc_10009c2f ], [ %v0_10009c4711, %dec_label_pc_10009c28 ]
  %v2_10009c43 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10009c43, i32* @edi, align 4
  ret i32 %v0_10009c47

dec_label_pc_10009c48:                            ; preds = %dec_label_pc_10009c1e, %dec_label_pc_10009c19, %dec_label_pc_10009c11
  %tmp33 = icmp slt i32 %v0_10009c64, 1
  br i1 %tmp33, label %dec_label_pc_10009c28, label %dec_label_pc_10009c4c

dec_label_pc_10009c4c:                            ; preds = %dec_label_pc_10009c48
  %v5_10009c4c = load i8, i8* %v4_10009c11, align 1
  %v6_10009c4c = zext i8 %v5_10009c4c to i32
  %v9_10009c4c = or i32 %v6_10009c4c, %v8_10009c11
  store i32 %v9_10009c4c, i32* @ecx, align 4
  %v11_10009c4f = icmp eq i8 %v5_10009c4c, 92
  br i1 %v11_10009c4f, label %dec_label_pc_10009c28, label %dec_label_pc_10009c54

dec_label_pc_10009c54:                            ; preds = %dec_label_pc_10009c4c
  %v11_10009c54 = icmp eq i8 %v5_10009c4c, 47
  br i1 %v11_10009c54, label %dec_label_pc_10009c28, label %dec_label_pc_10009c59

dec_label_pc_10009c59:                            ; preds = %dec_label_pc_10009c54
  %v5_10009c5b = icmp slt i32 %v0_10009c64, %arg3
  br i1 %v5_10009c5b, label %dec_label_pc_10009c5d, label %dec_label_pc_10009c28

dec_label_pc_10009c5d:                            ; preds = %dec_label_pc_10009c59
  %v1_10009c5d = add i32 %arg3, -1
  %v5_10009c62 = icmp slt i32 %v0_10009c64, %v1_10009c5d
  br i1 %v5_10009c62, label %dec_label_pc_10009c64, label %dec_label_pc_10009c66

dec_label_pc_10009c64:                            ; preds = %dec_label_pc_10009c5d
  br label %dec_label_pc_10009c66

dec_label_pc_10009c66:                            ; preds = %dec_label_pc_10009c5d, %dec_label_pc_10009c64
  %storemerge = phi i32 [ %v0_10009c64, %dec_label_pc_10009c64 ], [ %v1_10009c5d, %dec_label_pc_10009c5d ]
  %v0_10009c6d = phi i32 [ %v0_10009c64, %dec_label_pc_10009c64 ], [ %v1_10009c5d, %dec_label_pc_10009c5d ]
  store i32 %storemerge, i32* %esi.global-to-local, align 4
  store i32 %tmp27, i32* %edi.global-to-local, align 4
  %v12_10009c69 = icmp eq i32 %tmp27, %arg1
  br i1 %v12_10009c69, label %dec_label_pc_10009c78, label %dec_label_pc_10009c6d

dec_label_pc_10009c6d:                            ; preds = %dec_label_pc_10009c66
  %v0_10009c70 = call i32 @_memcpy.1()
  store i32 %v0_10009c70, i32* %eax.global-to-local, align 4
  %v0_10009c78.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_10009c78.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009c78

dec_label_pc_10009c78:                            ; preds = %dec_label_pc_10009c6d, %dec_label_pc_10009c66
  %v1_10009c78 = phi i32 [ %v1_10009c78.pre, %dec_label_pc_10009c6d ], [ %tmp27, %dec_label_pc_10009c66 ]
  %v0_10009c78 = phi i32 [ %v0_10009c78.pre, %dec_label_pc_10009c6d ], [ %v0_10009c6d, %dec_label_pc_10009c66 ]
  %v3_10009c78 = add i32 %v0_10009c78, %v1_10009c78
  %v4_10009c78 = inttoptr i32 %v3_10009c78 to i8*
  store i8 0, i8* %v4_10009c78, align 1
  %v2_10009c7c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10009c7c, i32* @edi, align 4
  %v0_10009c80 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10009c80
}

define i32 @function_10009c90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009c90:
  %stack_var_-16 = alloca i8*, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_10009c93 = load i32, i32* @esi, align 4
  store i32 %v0_10009c93, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_10009c97 = inttoptr i32 %arg1 to i8*
  %v2_10009c97 = load i8, i8* %v1_10009c97, align 1
  %v9_10009c97 = icmp eq i8 %v2_10009c97, 0
  br i1 %v9_10009c97, label %dec_label_pc_10009d04, label %dec_label_pc_10009c9c

dec_label_pc_10009c9c:                            ; preds = %dec_label_pc_10009c90
  store i8* %v1_10009c97, i8** %stack_var_-16, align 4
  %tmp27 = inttoptr i32 %arg1 to i32*
  %v6_10009ca2 = call i32 @function_100094b0(i32* %tmp27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10023b84.406, i32 0, i32 0))
  store i32 %v6_10009ca2, i32* @eax, align 4
  %v1_10009caa = icmp eq i32 %v6_10009ca2, 0
  br i1 %v1_10009caa, label %dec_label_pc_10009d04, label %dec_label_pc_10009cae

dec_label_pc_10009cae:                            ; preds = %dec_label_pc_10009c9c
  %v0_10009cb3 = load i32, i32* @esi, align 4
  %v4_10009cb3 = inttoptr i32 %v0_10009cb3 to i8*
  store i8* %v4_10009cb3, i8** %stack_var_-16, align 4
  %tmp28 = inttoptr i32 %v0_10009cb3 to i32*
  %v6_10009cb4 = call i32 @function_100094b0(i32* %tmp28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10023b80.407, i32 0, i32 0))
  store i32 %v6_10009cb4, i32* @eax, align 4
  %v1_10009cbc = icmp eq i32 %v6_10009cb4, 0
  br i1 %v1_10009cbc, label %dec_label_pc_10009d04, label %dec_label_pc_10009cc0

dec_label_pc_10009cc0:                            ; preds = %dec_label_pc_10009cae
  %v0_10009cc0 = load i32, i32* @esi, align 4
  %v1_10009cc2 = add i32 %v0_10009cc0, 1
  %v4_10009cc5.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009cc5

dec_label_pc_10009cc5:                            ; preds = %dec_label_pc_10009cc5, %dec_label_pc_10009cc0
  %v4_10009cc5 = phi i32 [ %v6_10009cc5, %dec_label_pc_10009cc5 ], [ %v4_10009cc5.pre, %dec_label_pc_10009cc0 ]
  %v0_10009cc7 = phi i32 [ %v1_10009cc7, %dec_label_pc_10009cc5 ], [ %v0_10009cc0, %dec_label_pc_10009cc0 ]
  %v1_10009cc5 = inttoptr i32 %v0_10009cc7 to i8*
  %v2_10009cc5 = load i8, i8* %v1_10009cc5, align 1
  %v3_10009cc5 = zext i8 %v2_10009cc5 to i32
  %v5_10009cc5 = and i32 %v4_10009cc5, -256
  %v6_10009cc5 = or i32 %v3_10009cc5, %v5_10009cc5
  store i32 %v6_10009cc5, i32* @ecx, align 4
  %v1_10009cc7 = add i32 %v0_10009cc7, 1
  %v5_10009cc8 = icmp eq i8 %v2_10009cc5, 0
  %v1_10009cca = icmp eq i1 %v5_10009cc8, false
  br i1 %v1_10009cca, label %dec_label_pc_10009cc5, label %dec_label_pc_10009ccc

dec_label_pc_10009ccc:                            ; preds = %dec_label_pc_10009cc5
  %v2_10009ccc = sub i32 %v1_10009cc7, %v1_10009cc2
  %v3_10009cce = add i32 %v2_10009ccc, -1
  %v4_10009cce = add i32 %v3_10009cce, %v0_10009cc0
  %v5_10009cce = inttoptr i32 %v4_10009cce to i8*
  %v6_10009cce = load i8, i8* %v5_10009cce, align 1
  %v7_10009cce = zext i8 %v6_10009cce to i32
  %v10_10009cce = or i32 %v7_10009cce, %v5_10009cc5
  store i32 %v10_10009cce, i32* @ecx, align 4
  %v11_10009cd2 = icmp eq i8 %v6_10009cce, 92
  br i1 %v11_10009cd2, label %dec_label_pc_10009cdc, label %dec_label_pc_10009cd7

dec_label_pc_10009cd7:                            ; preds = %dec_label_pc_10009ccc
  %v11_10009cd7 = icmp eq i8 %v6_10009cce, 47
  %v1_10009cda = icmp eq i1 %v11_10009cd7, false
  br i1 %v1_10009cda, label %dec_label_pc_10009cdd, label %dec_label_pc_10009cdc

dec_label_pc_10009cdc:                            ; preds = %dec_label_pc_10009cd7, %dec_label_pc_10009ccc
  br label %dec_label_pc_10009cdd

dec_label_pc_10009cdd:                            ; preds = %dec_label_pc_10009cdc, %dec_label_pc_10009cd7
  %v0_10009cdf = phi i32 [ %v3_10009cce, %dec_label_pc_10009cdc ], [ %v2_10009ccc, %dec_label_pc_10009cd7 ]
  %v12_10009cdd = and i32 %v1_10009cc2, -256
  store i32 %v12_10009cdd, i32* @edx, align 4
  %v1_10009cdf = icmp eq i32 %v0_10009cdf, 0
  %tmp32 = icmp slt i32 %v0_10009cdf, 1
  br i1 %tmp32, label %dec_label_pc_10009d1f, label %dec_label_pc_10009ce3.preheader

dec_label_pc_10009ce3.preheader:                  ; preds = %dec_label_pc_10009cdd
  %v3_10009ce3 = add i32 %v0_10009cc0, -1
  br label %dec_label_pc_10009ce3

dec_label_pc_10009ce3:                            ; preds = %dec_label_pc_10009ce3.preheader, %dec_label_pc_10009cf8
  %v0_10009cf6 = phi i32 [ %v0_10009cfd, %dec_label_pc_10009cf8 ], [ %v12_10009cdd, %dec_label_pc_10009ce3.preheader ]
  %v8_10009ce3 = phi i32 [ %v10_10009ce3, %dec_label_pc_10009cf8 ], [ %v10_10009cce, %dec_label_pc_10009ce3.preheader ]
  %v0_10009d0c = phi i32 [ %v1_10009cf8, %dec_label_pc_10009cf8 ], [ %v0_10009cdf, %dec_label_pc_10009ce3.preheader ]
  %v4_10009ce3 = add i32 %v3_10009ce3, %v0_10009d0c
  %v5_10009ce3 = inttoptr i32 %v4_10009ce3 to i8*
  %v6_10009ce3 = load i8, i8* %v5_10009ce3, align 1
  %v7_10009ce3 = zext i8 %v6_10009ce3 to i32
  %v9_10009ce3 = and i32 %v8_10009ce3, -256
  %v10_10009ce3 = or i32 %v7_10009ce3, %v9_10009ce3
  store i32 %v10_10009ce3, i32* @ecx, align 4
  %v11_10009ce7 = icmp eq i8 %v6_10009ce3, 92
  br i1 %v11_10009ce7, label %dec_label_pc_10009d09, label %dec_label_pc_10009cec

dec_label_pc_10009cec:                            ; preds = %dec_label_pc_10009ce3
  %v11_10009cec = icmp eq i8 %v6_10009ce3, 47
  br i1 %v11_10009cec, label %dec_label_pc_10009d09, label %dec_label_pc_10009cf1

dec_label_pc_10009cf1:                            ; preds = %dec_label_pc_10009cec
  %v11_10009cf1 = icmp eq i8 %v6_10009ce3, 58
  %v1_10009cf4 = icmp eq i1 %v11_10009cf1, false
  br i1 %v1_10009cf4, label %dec_label_pc_10009cf8, label %dec_label_pc_10009cf6

dec_label_pc_10009cf6:                            ; preds = %dec_label_pc_10009cf1
  %v1_10009cf6 = and i32 %v0_10009cf6, -256
  %v2_10009cf6 = or i32 %v1_10009cf6, 1
  store i32 %v2_10009cf6, i32* @edx, align 4
  br label %dec_label_pc_10009cf8

dec_label_pc_10009cf8:                            ; preds = %dec_label_pc_10009cf6, %dec_label_pc_10009cf1
  %v0_10009cfd = phi i32 [ %v2_10009cf6, %dec_label_pc_10009cf6 ], [ %v0_10009cf6, %dec_label_pc_10009cf1 ]
  %v1_10009cf8 = add i32 %v0_10009d0c, -1
  %v9_10009cf8 = icmp eq i32 %v1_10009cf8, 0
  %v10_10009cf8 = icmp slt i32 %v1_10009cf8, 0
  store i32 %v1_10009cf8, i32* @eax, align 4
  %v3_10009cfb = icmp eq i1 %v10_10009cf8, false
  %v4_10009cfb = icmp eq i1 %v9_10009cf8, false
  %v5_10009cfb = icmp eq i1 %v3_10009cfb, %v4_10009cfb
  br i1 %v5_10009cfb, label %dec_label_pc_10009ce3, label %dec_label_pc_10009cfd

dec_label_pc_10009cfd:                            ; preds = %dec_label_pc_10009cf8
  %v4_10009cfd = trunc i32 %v0_10009cfd to i8
  %v5_10009cfd = icmp eq i8 %v4_10009cfd, 0
  br i1 %v5_10009cfd, label %dec_label_pc_10009d1d, label %dec_label_pc_10009d01

dec_label_pc_10009d01:                            ; preds = %dec_label_pc_10009cfd
  %v1_10009d01 = inttoptr i32 %v0_10009cc0 to i8*
  store i8 0, i8* %v1_10009d01, align 1
  br label %dec_label_pc_10009d04

dec_label_pc_10009d04:                            ; preds = %dec_label_pc_10009d01, %dec_label_pc_10009cae, %dec_label_pc_10009c9c, %dec_label_pc_10009c90
  %v11_10009d04 = load i32, i32* @eax, align 4
  %v12_10009d04 = and i32 %v11_10009d04, -256
  %v2_10009d06 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009d06, i32* @esi, align 4
  ret i32 %v12_10009d04

dec_label_pc_10009d09:                            ; preds = %dec_label_pc_10009cec, %dec_label_pc_10009ce3
  %v4_10009d0b = inttoptr i32 %v0_10009cc0 to i8*
  store i8* %v4_10009d0b, i8** %stack_var_-16, align 4
  %v3_10009d0c = add i32 %v0_10009d0c, %v0_10009cc0
  %v4_10009d0c = inttoptr i32 %v3_10009d0c to i8*
  store i8 0, i8* %v4_10009d0c, align 1
  %v0_10009d10 = load i8*, i8** %stack_var_-16, align 4
  %v1_10009d10 = ptrtoint i8* %v0_10009d10 to i32
  %v4_10009d10 = call i32 @function_10009740(i32 %v1_10009d10, i32 92)
  br label %dec_label_pc_10009d18

dec_label_pc_10009d18:                            ; preds = %dec_label_pc_10009d1f, %dec_label_pc_10009d09
  %v0_10009d18 = phi i32 [ %v0_10009d1816, %dec_label_pc_10009d1f ], [ %v4_10009d10, %dec_label_pc_10009d09 ]
  %v1_10009d18 = and i32 %v0_10009d18, -256
  %v2_10009d18 = or i32 %v1_10009d18, 1
  %v2_10009d1a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009d1a, i32* @esi, align 4
  ret i32 %v2_10009d18

dec_label_pc_10009d1d:                            ; preds = %dec_label_pc_10009cfd
  br label %dec_label_pc_10009d1f

dec_label_pc_10009d1f:                            ; preds = %dec_label_pc_10009d1d, %dec_label_pc_10009cdd
  %v0_10009d1816 = phi i32 [ %v1_10009cf8, %dec_label_pc_10009d1d ], [ %v0_10009cdf, %dec_label_pc_10009cdd ]
  %v0_10009d1f = phi i1 [ %v9_10009cf8, %dec_label_pc_10009d1d ], [ %v1_10009cdf, %dec_label_pc_10009cdd ]
  %v1_10009d1f = icmp eq i1 %v0_10009d1f, false
  br i1 %v1_10009d1f, label %dec_label_pc_10009d18, label %dec_label_pc_10009d21

dec_label_pc_10009d21:                            ; preds = %dec_label_pc_10009d1f
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10023b7c.408, i32 0, i32 0), i8** %stack_var_-16, align 4
  %v1_10009d2d = inttoptr i32 %v0_10009cc0 to i32*
  %v6_10009d2d = call i32 @function_10009a90(i32* %v1_10009d2d, i32 %arg2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10023b7c.408, i32 0, i32 0))
  %v1_10009d35 = and i32 %v6_10009d2d, -256
  %v2_10009d35 = or i32 %v1_10009d35, 1
  %v2_10009d37 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10009d37, i32* @esi, align 4
  ret i32 %v2_10009d35
}

define i32 @function_10009d40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10009d40:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  %v0_10009d4b = load i32, i32* @edi, align 4
  store i32 %v0_10009d4b, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* %edi.global-to-local, align 4
  %v4_10009d50 = inttoptr i32 %arg1 to i8*
  %v1_10009d52 = inttoptr i32 %arg3 to i8*
  %v6_10009d52 = call i8* @_strncpy(i8* %v1_10009d52, i8* %v4_10009d50, i32 %arg4)
  %v8_10009d52 = ptrtoint i8* %v6_10009d52 to i32
  store i32 %v8_10009d52, i32* %eax.global-to-local, align 4
  %v0_10009d5a = load i32, i32* %ebx.global-to-local, align 4
  %tmp37 = icmp slt i32 %v0_10009d5a, 1
  br i1 %tmp37, label %dec_label_pc_10009d63, label %dec_label_pc_10009d5e

dec_label_pc_10009d5e:                            ; preds = %dec_label_pc_10009d40
  %v0_10009d5e = load i32, i32* %edi.global-to-local, align 4
  %v3_10009d5e = add i32 %v0_10009d5a, -1
  %v4_10009d5e = add i32 %v3_10009d5e, %v0_10009d5e
  %v5_10009d5e = inttoptr i32 %v4_10009d5e to i8*
  store i8 0, i8* %v5_10009d5e, align 1
  br label %dec_label_pc_10009d63

dec_label_pc_10009d63:                            ; preds = %dec_label_pc_10009d5e, %dec_label_pc_10009d40
  %v0_10009d63 = load i32, i32* %edi.global-to-local, align 4
  %v1_10009d63 = inttoptr i32 %v0_10009d63 to i8*
  %v2_10009d63 = load i8, i8* %v1_10009d63, align 1
  %v9_10009d63 = icmp eq i8 %v2_10009d63, 0
  store i32 %v0_10009d63, i32* %eax.global-to-local, align 4
  br i1 %v9_10009d63, label %dec_label_pc_10009d85, label %dec_label_pc_10009d70

dec_label_pc_10009d70:                            ; preds = %dec_label_pc_10009d63, %dec_label_pc_10009d7f
  %v0_10009d7c = phi i32 [ %v1_10009d7f, %dec_label_pc_10009d7f ], [ %v0_10009d63, %dec_label_pc_10009d63 ]
  %v1_10009d70 = inttoptr i32 %v0_10009d7c to i8*
  %v2_10009d70 = load i8, i8* %v1_10009d70, align 1
  %v3_10009d70 = zext i8 %v2_10009d70 to i32
  %v4_10009d70 = load i32, i32* @ecx, align 4
  %v5_10009d70 = and i32 %v4_10009d70, -256
  %v6_10009d70 = or i32 %v5_10009d70, %v3_10009d70
  store i32 %v6_10009d70, i32* @ecx, align 4
  %v11_10009d72 = icmp eq i8 %v2_10009d70, 47
  br i1 %v11_10009d72, label %dec_label_pc_10009d7c, label %dec_label_pc_10009d77

dec_label_pc_10009d77:                            ; preds = %dec_label_pc_10009d70
  %v11_10009d77 = icmp eq i8 %v2_10009d70, 92
  %v1_10009d7a = icmp eq i1 %v11_10009d77, false
  br i1 %v1_10009d7a, label %dec_label_pc_10009d7f, label %dec_label_pc_10009d7c

dec_label_pc_10009d7c:                            ; preds = %dec_label_pc_10009d77, %dec_label_pc_10009d70
  store i8 92, i8* %v1_10009d70, align 1
  %v0_10009d7f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009d7f

dec_label_pc_10009d7f:                            ; preds = %dec_label_pc_10009d7c, %dec_label_pc_10009d77
  %v0_10009d7f = phi i32 [ %v0_10009d7f.pre, %dec_label_pc_10009d7c ], [ %v0_10009d7c, %dec_label_pc_10009d77 ]
  %v1_10009d7f = add i32 %v0_10009d7f, 1
  store i32 %v1_10009d7f, i32* %eax.global-to-local, align 4
  %v1_10009d80 = inttoptr i32 %v1_10009d7f to i8*
  %v2_10009d80 = load i8, i8* %v1_10009d80, align 1
  %v9_10009d80 = icmp eq i8 %v2_10009d80, 0
  %v1_10009d83 = icmp eq i1 %v9_10009d80, false
  br i1 %v1_10009d83, label %dec_label_pc_10009d70, label %dec_label_pc_10009d85.loopexit

dec_label_pc_10009d85.loopexit:                   ; preds = %dec_label_pc_10009d7f
  %v0_10009d85.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009d85

dec_label_pc_10009d85:                            ; preds = %dec_label_pc_10009d85.loopexit, %dec_label_pc_10009d63
  %v0_10009db2 = phi i32 [ %v0_10009d85.pre, %dec_label_pc_10009d85.loopexit ], [ %v0_10009d63, %dec_label_pc_10009d63 ]
  store i32 %v0_10009db2, i32* %eax.global-to-local, align 4
  %v1_10009d87 = add i32 %v0_10009db2, 1
  %v4_10009d90.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009d90

dec_label_pc_10009d90:                            ; preds = %dec_label_pc_10009d90, %dec_label_pc_10009d85
  %v4_10009d90 = phi i32 [ %v6_10009d90, %dec_label_pc_10009d90 ], [ %v4_10009d90.pre, %dec_label_pc_10009d85 ]
  %v0_10009d92 = phi i32 [ %v1_10009d92, %dec_label_pc_10009d90 ], [ %v0_10009db2, %dec_label_pc_10009d85 ]
  %v1_10009d90 = inttoptr i32 %v0_10009d92 to i8*
  %v2_10009d90 = load i8, i8* %v1_10009d90, align 1
  %v3_10009d90 = zext i8 %v2_10009d90 to i32
  %v5_10009d90 = and i32 %v4_10009d90, -256
  %v6_10009d90 = or i32 %v3_10009d90, %v5_10009d90
  store i32 %v6_10009d90, i32* @ecx, align 4
  %v1_10009d92 = add i32 %v0_10009d92, 1
  store i32 %v1_10009d92, i32* %eax.global-to-local, align 4
  %v5_10009d93 = icmp eq i8 %v2_10009d90, 0
  %v1_10009d95 = icmp eq i1 %v5_10009d93, false
  br i1 %v1_10009d95, label %dec_label_pc_10009d90, label %dec_label_pc_10009d97

dec_label_pc_10009d97:                            ; preds = %dec_label_pc_10009d90
  %v2_10009d97 = sub i32 %v1_10009d92, %v1_10009d87
  store i32 %v2_10009d97, i32* %eax.global-to-local, align 4
  store i32 %v2_10009d97, i32* %esi.global-to-local, align 4
  %tmp41 = icmp slt i32 %v2_10009d97, 1
  br i1 %tmp41, label %dec_label_pc_10009dc7, label %dec_label_pc_10009d9f

dec_label_pc_10009d9f:                            ; preds = %dec_label_pc_10009d97
  %v3_10009d9f = add i32 %v0_10009db2, -1
  %v4_10009d9f = add i32 %v3_10009d9f, %v2_10009d97
  %v5_10009d9f = inttoptr i32 %v4_10009d9f to i8*
  %v6_10009d9f = load i8, i8* %v5_10009d9f, align 1
  %v7_10009d9f = zext i8 %v6_10009d9f to i32
  %v9_10009d9f = and i32 %v2_10009d97, -256
  %v10_10009d9f = or i32 %v7_10009d9f, %v9_10009d9f
  store i32 %v10_10009d9f, i32* %eax.global-to-local, align 4
  %v11_10009da3 = icmp eq i8 %v6_10009d9f, 92
  br i1 %v11_10009da3, label %dec_label_pc_10009dc7, label %dec_label_pc_10009da7

dec_label_pc_10009da7:                            ; preds = %dec_label_pc_10009d9f
  %v11_10009da7 = icmp eq i8 %v6_10009d9f, 47
  br i1 %v11_10009da7, label %dec_label_pc_10009dc7, label %dec_label_pc_10009dab

dec_label_pc_10009dab:                            ; preds = %dec_label_pc_10009da7
  %v1_10009dab = add i32 %v2_10009d97, 1
  store i32 %v1_10009dab, i32* @ecx, align 4
  %v1_10009dae = load i32, i32* %ebx.global-to-local, align 4
  %v5_10009db0 = icmp slt i32 %v1_10009dab, %v1_10009dae
  br i1 %v5_10009db0, label %dec_label_pc_10009dc1, label %dec_label_pc_10009db2

dec_label_pc_10009db2:                            ; preds = %dec_label_pc_10009dab
  %v0_10009db8 = call i32 @Error()
  store i32 %v0_10009db8, i32* %eax.global-to-local, align 4
  %v1_10009dc1.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009dc1

dec_label_pc_10009dc1:                            ; preds = %dec_label_pc_10009db2, %dec_label_pc_10009dab
  %v1_10009dc1 = phi i32 [ %v1_10009dc1.pre, %dec_label_pc_10009db2 ], [ %v0_10009db2, %dec_label_pc_10009dab ]
  %v3_10009dc1 = add i32 %v1_10009dc1, %v2_10009d97
  %v4_10009dc1 = inttoptr i32 %v3_10009dc1 to i16*
  store i16 92, i16* %v4_10009dc1, align 2
  %v0_10009dc7.pre = load i32, i32* %edi.global-to-local, align 4
  %v4_10009dd0.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009dc7

dec_label_pc_10009dc7:                            ; preds = %dec_label_pc_10009dc1, %dec_label_pc_10009da7, %dec_label_pc_10009d9f, %dec_label_pc_10009d97
  %v4_10009dd0.pre = phi i32 [ %v4_10009dd0.pre.pre, %dec_label_pc_10009dc1 ], [ %v6_10009d90, %dec_label_pc_10009da7 ], [ %v6_10009d90, %dec_label_pc_10009d9f ], [ %v6_10009d90, %dec_label_pc_10009d97 ]
  %v0_10009e01 = phi i32 [ %v0_10009dc7.pre, %dec_label_pc_10009dc1 ], [ %v0_10009db2, %dec_label_pc_10009da7 ], [ %v0_10009db2, %dec_label_pc_10009d9f ], [ %v0_10009db2, %dec_label_pc_10009d97 ]
  store i32 %v0_10009e01, i32* %eax.global-to-local, align 4
  %v1_10009dc9 = add i32 %v0_10009e01, 1
  br label %dec_label_pc_10009dd0

dec_label_pc_10009dd0:                            ; preds = %dec_label_pc_10009dd0, %dec_label_pc_10009dc7
  %v4_10009dd0 = phi i32 [ %v6_10009dd0, %dec_label_pc_10009dd0 ], [ %v4_10009dd0.pre, %dec_label_pc_10009dc7 ]
  %v0_10009dd2 = phi i32 [ %v1_10009dd2, %dec_label_pc_10009dd0 ], [ %v0_10009e01, %dec_label_pc_10009dc7 ]
  %v1_10009dd0 = inttoptr i32 %v0_10009dd2 to i8*
  %v2_10009dd0 = load i8, i8* %v1_10009dd0, align 1
  %v3_10009dd0 = zext i8 %v2_10009dd0 to i32
  %v5_10009dd0 = and i32 %v4_10009dd0, -256
  %v6_10009dd0 = or i32 %v3_10009dd0, %v5_10009dd0
  store i32 %v6_10009dd0, i32* @ecx, align 4
  %v1_10009dd2 = add i32 %v0_10009dd2, 1
  store i32 %v1_10009dd2, i32* %eax.global-to-local, align 4
  %v5_10009dd3 = icmp eq i8 %v2_10009dd0, 0
  %v1_10009dd5 = icmp eq i1 %v5_10009dd3, false
  br i1 %v1_10009dd5, label %dec_label_pc_10009dd0, label %dec_label_pc_10009dd7

dec_label_pc_10009dd7:                            ; preds = %dec_label_pc_10009dd0
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v2_10009dda = sub i32 %v1_10009dd2, %v1_10009dc9
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v1_10009de0 = add i32 %arg2, 1
  store i32 %v1_10009de0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_10009de3

dec_label_pc_10009de3:                            ; preds = %dec_label_pc_10009de3, %dec_label_pc_10009dd7
  %v4_10009de3 = phi i32 [ %v6_10009de3, %dec_label_pc_10009de3 ], [ %v6_10009dd0, %dec_label_pc_10009dd7 ]
  %v0_10009de5 = phi i32 [ %v1_10009de5, %dec_label_pc_10009de3 ], [ %arg2, %dec_label_pc_10009dd7 ]
  %v1_10009de3 = inttoptr i32 %v0_10009de5 to i8*
  %v2_10009de3 = load i8, i8* %v1_10009de3, align 1
  %v3_10009de3 = zext i8 %v2_10009de3 to i32
  %v5_10009de3 = and i32 %v4_10009de3, -256
  %v6_10009de3 = or i32 %v3_10009de3, %v5_10009de3
  store i32 %v6_10009de3, i32* @ecx, align 4
  %v1_10009de5 = add i32 %v0_10009de5, 1
  store i32 %v1_10009de5, i32* %eax.global-to-local, align 4
  %v5_10009de6 = icmp eq i8 %v2_10009de3, 0
  %v1_10009de8 = icmp eq i1 %v5_10009de6, false
  br i1 %v1_10009de8, label %dec_label_pc_10009de3, label %dec_label_pc_10009dea

dec_label_pc_10009dea:                            ; preds = %dec_label_pc_10009de3
  %v2_10009dea = sub i32 %v1_10009de5, %v1_10009de0
  store i32 %v2_10009dea, i32* %eax.global-to-local, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v3_10009def = add i32 %v2_10009dea, %v2_10009dda
  store i32 %v3_10009def, i32* @ecx, align 4
  %v7_10009df2 = icmp ult i32 %v3_10009def, %arg4
  br i1 %v7_10009df2, label %dec_label_pc_10009dfb, label %dec_label_pc_10009df6

dec_label_pc_10009df6:                            ; preds = %dec_label_pc_10009dea
  %v2_10009df8 = sub i32 %arg4, %v2_10009dda
  %v1_10009dfa = add i32 %v2_10009df8, -1
  store i32 %v1_10009dfa, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009dfb

dec_label_pc_10009dfb:                            ; preds = %dec_label_pc_10009df6, %dec_label_pc_10009dea
  %v0_10009dff = phi i32 [ %v1_10009dfa, %dec_label_pc_10009df6 ], [ %v2_10009dea, %dec_label_pc_10009dea ]
  %v1_10009dfb = icmp eq i32 %v0_10009dff, 0
  br i1 %v1_10009dfb, label %dec_label_pc_10009e0f, label %dec_label_pc_10009dff

dec_label_pc_10009dff:                            ; preds = %dec_label_pc_10009dfb
  %v4_10009e00 = inttoptr i32 %arg2 to i8*
  %v1_10009e02 = inttoptr i32 %v0_10009e01 to i8*
  %v6_10009e02 = call i8* @_strncat(i8* %v1_10009e02, i8* %v4_10009e00, i32 %v0_10009dff)
  %v8_10009e02 = ptrtoint i8* %v6_10009e02 to i32
  store i32 %v8_10009e02, i32* %eax.global-to-local, align 4
  %v1_10009e0a = load i32, i32* %esi.global-to-local, align 4
  %v3_10009e0a = add i32 %v8_10009e02, -1
  %v4_10009e0a = add i32 %v3_10009e0a, %v1_10009e0a
  %v5_10009e0a = inttoptr i32 %v4_10009e0a to i8*
  store i8 0, i8* %v5_10009e0a, align 1
  %v0_10009e0f.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10009e0f

dec_label_pc_10009e0f:                            ; preds = %dec_label_pc_10009dff, %dec_label_pc_10009dfb
  %v0_10009e12 = phi i32 [ %v0_10009e0f.pre, %dec_label_pc_10009dff ], [ %v0_10009e01, %dec_label_pc_10009dfb ]
  %v1_10009e0f = inttoptr i32 %v0_10009e12 to i8*
  %v2_10009e0f = load i8, i8* %v1_10009e0f, align 1
  %v9_10009e0f = icmp eq i8 %v2_10009e0f, 0
  store i32 %v0_10009e12, i32* %eax.global-to-local, align 4
  %v2_10009e14 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10009e14, i32* @edi, align 4
  br i1 %v9_10009e0f, label %dec_label_pc_10009e35, label %dec_label_pc_10009e19

dec_label_pc_10009e19:                            ; preds = %dec_label_pc_10009e0f
  br label %dec_label_pc_10009e20

dec_label_pc_10009e20:                            ; preds = %dec_label_pc_10009e2f, %dec_label_pc_10009e19
  %v0_10009e2c = phi i32 [ %v1_10009e2f, %dec_label_pc_10009e2f ], [ %v0_10009e12, %dec_label_pc_10009e19 ]
  %v1_10009e20 = inttoptr i32 %v0_10009e2c to i8*
  %v2_10009e20 = load i8, i8* %v1_10009e20, align 1
  %v3_10009e20 = zext i8 %v2_10009e20 to i32
  %v4_10009e20 = load i32, i32* @ecx, align 4
  %v5_10009e20 = and i32 %v4_10009e20, -256
  %v6_10009e20 = or i32 %v5_10009e20, %v3_10009e20
  store i32 %v6_10009e20, i32* @ecx, align 4
  %v11_10009e22 = icmp eq i8 %v2_10009e20, 47
  br i1 %v11_10009e22, label %dec_label_pc_10009e2c, label %dec_label_pc_10009e27

dec_label_pc_10009e27:                            ; preds = %dec_label_pc_10009e20
  %v11_10009e27 = icmp eq i8 %v2_10009e20, 92
  %v1_10009e2a = icmp eq i1 %v11_10009e27, false
  br i1 %v1_10009e2a, label %dec_label_pc_10009e2f, label %dec_label_pc_10009e2c

dec_label_pc_10009e2c:                            ; preds = %dec_label_pc_10009e27, %dec_label_pc_10009e20
  store i8 92, i8* %v1_10009e20, align 1
  %v0_10009e2f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009e2f

dec_label_pc_10009e2f:                            ; preds = %dec_label_pc_10009e2c, %dec_label_pc_10009e27
  %v0_10009e2f = phi i32 [ %v0_10009e2f.pre, %dec_label_pc_10009e2c ], [ %v0_10009e2c, %dec_label_pc_10009e27 ]
  %v1_10009e2f = add i32 %v0_10009e2f, 1
  store i32 %v1_10009e2f, i32* %eax.global-to-local, align 4
  %v1_10009e30 = inttoptr i32 %v1_10009e2f to i8*
  %v2_10009e30 = load i8, i8* %v1_10009e30, align 1
  %v9_10009e30 = icmp eq i8 %v2_10009e30, 0
  %v1_10009e33 = icmp eq i1 %v9_10009e30, false
  br i1 %v1_10009e33, label %dec_label_pc_10009e20, label %dec_label_pc_10009e35

dec_label_pc_10009e35:                            ; preds = %dec_label_pc_10009e2f, %dec_label_pc_10009e0f
  %v0_10009e36 = phi i32 [ %v0_10009e12, %dec_label_pc_10009e0f ], [ %v1_10009e2f, %dec_label_pc_10009e2f ]
  ret i32 %v0_10009e36
}

define i32 @function_10009e40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10009e40:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v1_10009e46 = inttoptr i32 %arg3 to i8*
  %v2_10009e46 = load i8, i8* %v1_10009e46, align 1
  %v3_10009e46 = zext i8 %v2_10009e46 to i32
  %v4_10009e46 = load i32, i32* @eax, align 4
  %v5_10009e46 = and i32 %v4_10009e46, -256
  %v6_10009e46 = or i32 %v5_10009e46, %v3_10009e46
  store i32 %v6_10009e46, i32* %eax.global-to-local, align 4
  %v0_10009e49 = load i32, i32* @edi, align 4
  store i32 %v0_10009e49, i32* %stack_var_-12, align 4
  %v4_10009e49 = ptrtoint i32* %stack_var_-12 to i32
  %v0_10009e4a = load i32, i32* @edx, align 4
  %v1_10009e4a = and i32 %v0_10009e4a, -256
  %v2_10009e4a = or i32 %v1_10009e4a, 58
  store i32 %v2_10009e4a, i32* @edx, align 4
  %v5_10009e4c = icmp eq i8 %v2_10009e46, 0
  br i1 %v5_10009e4c, label %dec_label_pc_10009e55, label %dec_label_pc_10009e50

dec_label_pc_10009e50:                            ; preds = %dec_label_pc_10009e40
  %v1_10009e50 = add i32 %arg3, 1
  %v2_10009e50 = inttoptr i32 %v1_10009e50 to i8*
  %v3_10009e50 = load i8, i8* %v2_10009e50, align 1
  %v16_10009e50 = icmp eq i8 %v3_10009e50, 58
  br i1 %v16_10009e50, label %dec_label_pc_10009e5d, label %dec_label_pc_10009e55

dec_label_pc_10009e55:                            ; preds = %dec_label_pc_10009e50, %dec_label_pc_10009e40
  %v11_10009e55 = icmp eq i8 %v2_10009e46, 47
  br i1 %v11_10009e55, label %dec_label_pc_10009e5d, label %dec_label_pc_10009e59

dec_label_pc_10009e59:                            ; preds = %dec_label_pc_10009e55
  %v11_10009e59 = icmp eq i8 %v2_10009e46, 92
  %v1_10009e5b = icmp eq i1 %v11_10009e59, false
  br i1 %v1_10009e5b, label %dec_label_pc_10009e80, label %dec_label_pc_10009e5d

dec_label_pc_10009e5d:                            ; preds = %dec_label_pc_10009e59, %dec_label_pc_10009e55, %dec_label_pc_10009e50
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_10009e66 = inttoptr i32 %arg1 to i8*
  %v6_10009e66 = call i8* @_strncpy(i8* %v1_10009e66, i8* %v1_10009e46, i32 %arg2)
  %v8_10009e66 = ptrtoint i8* %v6_10009e66 to i32
  store i32 %v8_10009e66, i32* %eax.global-to-local, align 4
  %tmp51 = icmp slt i32 %arg2, 1
  br i1 %tmp51, label %dec_label_pc_10009fae, label %dec_label_pc_10009e76

dec_label_pc_10009e76:                            ; preds = %dec_label_pc_10009e5d
  %v0_10009e76 = load i32, i32* @esi, align 4
  %v3_10009e76 = add i32 %arg2, -1
  %v4_10009e76 = add i32 %v3_10009e76, %v0_10009e76
  %v5_10009e76 = inttoptr i32 %v4_10009e76 to i8*
  store i8 0, i8* %v5_10009e76, align 1
  %v0_10009fae.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10009fae

dec_label_pc_10009e80:                            ; preds = %dec_label_pc_10009e59
  store i32 %arg4, i32* @edi, align 4
  %v1_10009e84 = icmp eq i32 %arg4, 0
  br i1 %v1_10009e84, label %dec_label_pc_10009eb7, label %dec_label_pc_10009e88

dec_label_pc_10009e88:                            ; preds = %dec_label_pc_10009e80
  %v1_10009e88 = inttoptr i32 %arg4 to i8*
  %v2_10009e88 = load i8, i8* %v1_10009e88, align 1
  %v3_10009e88 = zext i8 %v2_10009e88 to i32
  %v6_10009e88 = or i32 %v3_10009e88, %v5_10009e46
  store i32 %v6_10009e88, i32* %eax.global-to-local, align 4
  %v5_10009e8a = icmp eq i8 %v2_10009e88, 0
  br i1 %v5_10009e8a, label %dec_label_pc_10009e93, label %dec_label_pc_10009e8e

dec_label_pc_10009e8e:                            ; preds = %dec_label_pc_10009e88
  %v1_10009e8e = add i32 %arg4, 1
  %v2_10009e8e = inttoptr i32 %v1_10009e8e to i8*
  %v3_10009e8e = load i8, i8* %v2_10009e8e, align 1
  %v16_10009e8e = icmp eq i8 %v3_10009e8e, 58
  br i1 %v16_10009e8e, label %dec_label_pc_10009e9b, label %dec_label_pc_10009e93

dec_label_pc_10009e93:                            ; preds = %dec_label_pc_10009e8e, %dec_label_pc_10009e88
  %v11_10009e93 = icmp eq i8 %v2_10009e88, 47
  br i1 %v11_10009e93, label %dec_label_pc_10009e9b, label %dec_label_pc_10009e97

dec_label_pc_10009e97:                            ; preds = %dec_label_pc_10009e93
  %v11_10009e97 = icmp eq i8 %v2_10009e88, 92
  %v1_10009e99 = icmp eq i1 %v11_10009e97, false
  br i1 %v1_10009e99, label %dec_label_pc_10009eb7, label %dec_label_pc_10009e9b

dec_label_pc_10009e9b:                            ; preds = %dec_label_pc_10009e97, %dec_label_pc_10009e93, %dec_label_pc_10009e8e
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_10009ea4 = inttoptr i32 %arg1 to i8*
  %v6_10009ea4 = call i8* @_strncpy(i8* %v1_10009ea4, i8* %v1_10009e88, i32 %arg2)
  %v8_10009ea4 = ptrtoint i8* %v6_10009ea4 to i32
  store i32 %v8_10009ea4, i32* %eax.global-to-local, align 4
  %tmp55 = icmp slt i32 %arg2, 1
  br i1 %tmp55, label %dec_label_pc_10009f2c, label %dec_label_pc_10009eb0

dec_label_pc_10009eb0:                            ; preds = %dec_label_pc_10009e9b
  %v0_10009eb0 = load i32, i32* @esi, align 4
  %v3_10009eb0 = add i32 %arg2, -1
  %v4_10009eb0 = add i32 %v3_10009eb0, %v0_10009eb0
  %v5_10009eb0 = inttoptr i32 %v4_10009eb0 to i8*
  store i8 0, i8* %v5_10009eb0, align 1
  br label %dec_label_pc_10009f2c

dec_label_pc_10009eb7:                            ; preds = %dec_label_pc_10009e97, %dec_label_pc_10009e80
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_10009ebf = inttoptr i32 %arg1 to i8*
  %v4_10009ebf = call i8* @__getcwd(i8* %v1_10009ebf, i32 %arg2)
  %v5_10009ebf = ptrtoint i8* %v4_10009ebf to i32
  store i32 %v5_10009ebf, i32* %eax.global-to-local, align 4
  %v1_10009ec7 = icmp eq i8* %v4_10009ebf, null
  %v1_10009ec9 = icmp eq i1 %v1_10009ec7, false
  br i1 %v1_10009ec9, label %dec_label_pc_10009ed9, label %dec_label_pc_10009ecb

dec_label_pc_10009ecb:                            ; preds = %dec_label_pc_10009eb7
  %v0_10009ed0 = call i32 @Error()
  store i32 %v0_10009ed0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009ed9

dec_label_pc_10009ed9:                            ; preds = %dec_label_pc_10009ecb, %dec_label_pc_10009eb7
  br i1 %v1_10009e84, label %dec_label_pc_10009f2c, label %dec_label_pc_10009edd

dec_label_pc_10009edd:                            ; preds = %dec_label_pc_10009ed9
  %v0_10009edd = load i32, i32* %ebx.global-to-local, align 4
  %v0_10009ede = load i32, i32* @esi, align 4
  %v1_10009edf = inttoptr i32 %v0_10009ede to i32*
  %v4_10009edf = call i32 @function_10009910(i32* %v1_10009edf, i32 %v0_10009edd)
  %v0_10009ee4 = load i32, i32* @esi, align 4
  store i32 %v0_10009ee4, i32* %eax.global-to-local, align 4
  %v1_10009ee9 = add i32 %v0_10009ee4, 1
  %v4_10009ef0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009ef0

dec_label_pc_10009ef0:                            ; preds = %dec_label_pc_10009ef0, %dec_label_pc_10009edd
  %v4_10009ef0 = phi i32 [ %v6_10009ef0, %dec_label_pc_10009ef0 ], [ %v4_10009ef0.pre, %dec_label_pc_10009edd ]
  %v0_10009ef2 = phi i32 [ %v1_10009ef2, %dec_label_pc_10009ef0 ], [ %v0_10009ee4, %dec_label_pc_10009edd ]
  %v1_10009ef0 = inttoptr i32 %v0_10009ef2 to i8*
  %v2_10009ef0 = load i8, i8* %v1_10009ef0, align 1
  %v3_10009ef0 = zext i8 %v2_10009ef0 to i32
  %v5_10009ef0 = and i32 %v4_10009ef0, -256
  %v6_10009ef0 = or i32 %v3_10009ef0, %v5_10009ef0
  store i32 %v6_10009ef0, i32* @ecx, align 4
  %v1_10009ef2 = add i32 %v0_10009ef2, 1
  store i32 %v1_10009ef2, i32* %eax.global-to-local, align 4
  %v5_10009ef3 = icmp eq i8 %v2_10009ef0, 0
  %v1_10009ef5 = icmp eq i1 %v5_10009ef3, false
  br i1 %v1_10009ef5, label %dec_label_pc_10009ef0, label %dec_label_pc_10009ef7

dec_label_pc_10009ef7:                            ; preds = %dec_label_pc_10009ef0
  %v2_10009ef7 = sub i32 %v1_10009ef2, %v1_10009ee9
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_10009efd = add i32 %arg4, 1
  br label %dec_label_pc_10009f00

dec_label_pc_10009f00:                            ; preds = %dec_label_pc_10009f00, %dec_label_pc_10009ef7
  %v4_10009f00 = phi i32 [ %v6_10009f00, %dec_label_pc_10009f00 ], [ %v6_10009ef0, %dec_label_pc_10009ef7 ]
  %v0_10009f02 = phi i32 [ %v1_10009f02, %dec_label_pc_10009f00 ], [ %arg4, %dec_label_pc_10009ef7 ]
  %v1_10009f00 = inttoptr i32 %v0_10009f02 to i8*
  %v2_10009f00 = load i8, i8* %v1_10009f00, align 1
  %v3_10009f00 = zext i8 %v2_10009f00 to i32
  %v5_10009f00 = and i32 %v4_10009f00, -256
  %v6_10009f00 = or i32 %v3_10009f00, %v5_10009f00
  store i32 %v6_10009f00, i32* @ecx, align 4
  %v1_10009f02 = add i32 %v0_10009f02, 1
  store i32 %v1_10009f02, i32* %eax.global-to-local, align 4
  %v5_10009f03 = icmp eq i8 %v2_10009f00, 0
  %v1_10009f05 = icmp eq i1 %v5_10009f03, false
  br i1 %v1_10009f05, label %dec_label_pc_10009f00, label %dec_label_pc_10009f07

dec_label_pc_10009f07:                            ; preds = %dec_label_pc_10009f00
  %v2_10009f07 = sub i32 %v1_10009f02, %v1_10009efd
  store i32 %v2_10009f07, i32* %eax.global-to-local, align 4
  %v3_10009f09 = add i32 %v2_10009f07, %v2_10009ef7
  store i32 %v3_10009f09, i32* @ecx, align 4
  %v1_10009f0c = load i32, i32* %ebx.global-to-local, align 4
  %v7_10009f0c = icmp ult i32 %v3_10009f09, %v1_10009f0c
  br i1 %v7_10009f0c, label %dec_label_pc_10009f15, label %dec_label_pc_10009f10

dec_label_pc_10009f10:                            ; preds = %dec_label_pc_10009f07
  %v2_10009f12 = sub i32 %v1_10009f0c, %v2_10009ef7
  %v1_10009f14 = add i32 %v2_10009f12, -1
  store i32 %v1_10009f14, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009f15

dec_label_pc_10009f15:                            ; preds = %dec_label_pc_10009f10, %dec_label_pc_10009f07
  %v0_10009f1c = phi i32 [ %v1_10009f14, %dec_label_pc_10009f10 ], [ %v2_10009f07, %dec_label_pc_10009f07 ]
  %v1_10009f15 = icmp eq i32 %v0_10009f1c, 0
  br i1 %v1_10009f15, label %dec_label_pc_10009f2c, label %dec_label_pc_10009f19

dec_label_pc_10009f19:                            ; preds = %dec_label_pc_10009f15
  %v1_10009f1f = inttoptr i32 %v0_10009ee4 to i8*
  %v3_10009f1f = inttoptr i32 %arg4 to i8*
  %v6_10009f1f = call i8* @_strncat(i8* %v1_10009f1f, i8* %v3_10009f1f, i32 %v0_10009f1c)
  %v8_10009f1f = ptrtoint i8* %v6_10009f1f to i32
  store i32 %v8_10009f1f, i32* %eax.global-to-local, align 4
  %v1_10009f27 = load i32, i32* %ebx.global-to-local, align 4
  %v3_10009f27 = add i32 %v8_10009f1f, -1
  %v4_10009f27 = add i32 %v3_10009f27, %v1_10009f27
  %v5_10009f27 = inttoptr i32 %v4_10009f27 to i8*
  store i8 0, i8* %v5_10009f27, align 1
  br label %dec_label_pc_10009f2c

dec_label_pc_10009f2c:                            ; preds = %dec_label_pc_10009f19, %dec_label_pc_10009f15, %dec_label_pc_10009ed9, %dec_label_pc_10009eb0, %dec_label_pc_10009e9b
  %v0_10009f2c = load i32, i32* @esi, align 4
  store i32 %v0_10009f2c, i32* %eax.global-to-local, align 4
  %v1_10009f2e = add i32 %v0_10009f2c, 1
  %v4_10009f31.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009f31

dec_label_pc_10009f31:                            ; preds = %dec_label_pc_10009f31, %dec_label_pc_10009f2c
  %v4_10009f31 = phi i32 [ %v6_10009f31, %dec_label_pc_10009f31 ], [ %v4_10009f31.pre, %dec_label_pc_10009f2c ]
  %v0_10009f33 = phi i32 [ %v1_10009f33, %dec_label_pc_10009f31 ], [ %v0_10009f2c, %dec_label_pc_10009f2c ]
  %v1_10009f31 = inttoptr i32 %v0_10009f33 to i8*
  %v2_10009f31 = load i8, i8* %v1_10009f31, align 1
  %v3_10009f31 = zext i8 %v2_10009f31 to i32
  %v5_10009f31 = and i32 %v4_10009f31, -256
  %v6_10009f31 = or i32 %v3_10009f31, %v5_10009f31
  store i32 %v6_10009f31, i32* @ecx, align 4
  %v1_10009f33 = add i32 %v0_10009f33, 1
  store i32 %v1_10009f33, i32* %eax.global-to-local, align 4
  %v5_10009f34 = icmp eq i8 %v2_10009f31, 0
  %v1_10009f36 = icmp eq i1 %v5_10009f34, false
  br i1 %v1_10009f36, label %dec_label_pc_10009f31, label %dec_label_pc_10009f38

dec_label_pc_10009f38:                            ; preds = %dec_label_pc_10009f31
  %v2_10009f38 = sub i32 %v1_10009f33, %v1_10009f2e
  store i32 %v2_10009f38, i32* %eax.global-to-local, align 4
  %tmp60 = icmp slt i32 %v2_10009f38, 1
  br i1 %tmp60, label %dec_label_pc_10009f68, label %dec_label_pc_10009f40

dec_label_pc_10009f40:                            ; preds = %dec_label_pc_10009f38
  %v3_10009f40 = add i32 %v0_10009f2c, -1
  %v4_10009f40 = add i32 %v3_10009f40, %v2_10009f38
  %v5_10009f40 = inttoptr i32 %v4_10009f40 to i8*
  %v6_10009f40 = load i8, i8* %v5_10009f40, align 1
  %v7_10009f40 = zext i8 %v6_10009f40 to i32
  %v9_10009f40 = and i32 %v2_10009f38, -256
  %v10_10009f40 = or i32 %v7_10009f40, %v9_10009f40
  store i32 %v10_10009f40, i32* %eax.global-to-local, align 4
  %v11_10009f44 = icmp eq i8 %v6_10009f40, 92
  br i1 %v11_10009f44, label %dec_label_pc_10009f68, label %dec_label_pc_10009f48

dec_label_pc_10009f48:                            ; preds = %dec_label_pc_10009f40
  %v11_10009f48 = icmp eq i8 %v6_10009f40, 47
  br i1 %v11_10009f48, label %dec_label_pc_10009f68, label %dec_label_pc_10009f4c

dec_label_pc_10009f4c:                            ; preds = %dec_label_pc_10009f48
  %v1_10009f4c = add i32 %v2_10009f38, 1
  store i32 %v1_10009f4c, i32* %eax.global-to-local, align 4
  %v1_10009f4f = load i32, i32* %ebx.global-to-local, align 4
  %v5_10009f51 = icmp slt i32 %v1_10009f4c, %v1_10009f4f
  br i1 %v5_10009f51, label %dec_label_pc_10009f62, label %dec_label_pc_10009f53

dec_label_pc_10009f53:                            ; preds = %dec_label_pc_10009f4c
  %v1_10009f53 = load i32, i32* @esp, align 4
  %v2_10009f53 = add i32 %v1_10009f53, -4
  %v3_10009f53 = inttoptr i32 %v2_10009f53 to i32*
  store i32 %v0_10009f2c, i32* %v3_10009f53, align 4
  %v1_10009f54 = add i32 %v1_10009f53, -8
  %v2_10009f54 = inttoptr i32 %v1_10009f54 to i32*
  store i32 ptrtoint ([39 x i8]* @global_var_10023b50.405 to i32), i32* %v2_10009f54, align 4
  %v0_10009f59 = call i32 @Error()
  store i32 %v0_10009f59, i32* %eax.global-to-local, align 4
  %v1_10009f62.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10009f62

dec_label_pc_10009f62:                            ; preds = %dec_label_pc_10009f53, %dec_label_pc_10009f4c
  %v1_10009f62 = phi i32 [ %v1_10009f62.pre, %dec_label_pc_10009f53 ], [ %v0_10009f2c, %dec_label_pc_10009f4c ]
  %v3_10009f62 = add i32 %v1_10009f62, %v2_10009f38
  %v4_10009f62 = inttoptr i32 %v3_10009f62 to i16*
  store i16 92, i16* %v4_10009f62, align 2
  %v0_10009f68.pre = load i32, i32* @esi, align 4
  %v4_10009f70.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_10009f68

dec_label_pc_10009f68:                            ; preds = %dec_label_pc_10009f62, %dec_label_pc_10009f48, %dec_label_pc_10009f40, %dec_label_pc_10009f38
  %v4_10009f70.pre = phi i32 [ %v4_10009f70.pre.pre, %dec_label_pc_10009f62 ], [ %v6_10009f31, %dec_label_pc_10009f48 ], [ %v6_10009f31, %dec_label_pc_10009f40 ], [ %v6_10009f31, %dec_label_pc_10009f38 ]
  %v0_10009f68 = phi i32 [ %v0_10009f68.pre, %dec_label_pc_10009f62 ], [ %v0_10009f2c, %dec_label_pc_10009f48 ], [ %v0_10009f2c, %dec_label_pc_10009f40 ], [ %v0_10009f2c, %dec_label_pc_10009f38 ]
  store i32 %v0_10009f68, i32* %eax.global-to-local, align 4
  %v1_10009f6a = add i32 %v0_10009f68, 1
  br label %dec_label_pc_10009f70

dec_label_pc_10009f70:                            ; preds = %dec_label_pc_10009f70, %dec_label_pc_10009f68
  %v4_10009f70 = phi i32 [ %v6_10009f70, %dec_label_pc_10009f70 ], [ %v4_10009f70.pre, %dec_label_pc_10009f68 ]
  %v0_10009f72 = phi i32 [ %v1_10009f72, %dec_label_pc_10009f70 ], [ %v0_10009f68, %dec_label_pc_10009f68 ]
  %v1_10009f70 = inttoptr i32 %v0_10009f72 to i8*
  %v2_10009f70 = load i8, i8* %v1_10009f70, align 1
  %v3_10009f70 = zext i8 %v2_10009f70 to i32
  %v5_10009f70 = and i32 %v4_10009f70, -256
  %v6_10009f70 = or i32 %v3_10009f70, %v5_10009f70
  store i32 %v6_10009f70, i32* @ecx, align 4
  %v1_10009f72 = add i32 %v0_10009f72, 1
  store i32 %v1_10009f72, i32* %eax.global-to-local, align 4
  %v5_10009f73 = icmp eq i8 %v2_10009f70, 0
  %v1_10009f75 = icmp eq i1 %v5_10009f73, false
  br i1 %v1_10009f75, label %dec_label_pc_10009f70, label %dec_label_pc_10009f77

dec_label_pc_10009f77:                            ; preds = %dec_label_pc_10009f70
  %v2_10009f77 = sub i32 %v1_10009f72, %v1_10009f6a
  store i32 %v2_10009f77, i32* @edx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v1_10009f7e = add i32 %arg3, 1
  store i32 %v1_10009f7e, i32* @edi, align 4
  br label %dec_label_pc_10009f81

dec_label_pc_10009f81:                            ; preds = %dec_label_pc_10009f81, %dec_label_pc_10009f77
  %v4_10009f81 = phi i32 [ %v6_10009f81, %dec_label_pc_10009f81 ], [ %v6_10009f70, %dec_label_pc_10009f77 ]
  %v0_10009f83 = phi i32 [ %v1_10009f83, %dec_label_pc_10009f81 ], [ %arg3, %dec_label_pc_10009f77 ]
  %v1_10009f81 = inttoptr i32 %v0_10009f83 to i8*
  %v2_10009f81 = load i8, i8* %v1_10009f81, align 1
  %v3_10009f81 = zext i8 %v2_10009f81 to i32
  %v5_10009f81 = and i32 %v4_10009f81, -256
  %v6_10009f81 = or i32 %v3_10009f81, %v5_10009f81
  store i32 %v6_10009f81, i32* @ecx, align 4
  %v1_10009f83 = add i32 %v0_10009f83, 1
  store i32 %v1_10009f83, i32* %eax.global-to-local, align 4
  %v5_10009f84 = icmp eq i8 %v2_10009f81, 0
  %v1_10009f86 = icmp eq i1 %v5_10009f84, false
  br i1 %v1_10009f86, label %dec_label_pc_10009f81, label %dec_label_pc_10009f88

dec_label_pc_10009f88:                            ; preds = %dec_label_pc_10009f81
  %v2_10009f88 = sub i32 %v1_10009f83, %v1_10009f7e
  store i32 %v2_10009f88, i32* %eax.global-to-local, align 4
  %v3_10009f8a = add i32 %v2_10009f88, %v2_10009f77
  store i32 %v3_10009f8a, i32* @ecx, align 4
  %v1_10009f8d = load i32, i32* %ebx.global-to-local, align 4
  %v7_10009f8d = icmp ult i32 %v3_10009f8a, %v1_10009f8d
  br i1 %v7_10009f8d, label %dec_label_pc_10009f96, label %dec_label_pc_10009f91

dec_label_pc_10009f91:                            ; preds = %dec_label_pc_10009f88
  %v2_10009f93 = sub i32 %v1_10009f8d, %v2_10009f77
  %v1_10009f95 = add i32 %v2_10009f93, -1
  store i32 %v1_10009f95, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009f96

dec_label_pc_10009f96:                            ; preds = %dec_label_pc_10009f91, %dec_label_pc_10009f88
  %v0_10009f9d = phi i32 [ %v1_10009f95, %dec_label_pc_10009f91 ], [ %v2_10009f88, %dec_label_pc_10009f88 ]
  %v1_10009f96 = icmp eq i32 %v0_10009f9d, 0
  br i1 %v1_10009f96, label %dec_label_pc_10009fad, label %dec_label_pc_10009f9a

dec_label_pc_10009f9a:                            ; preds = %dec_label_pc_10009f96
  store i32 %arg3, i32* @edx, align 4
  %v1_10009f9d = load i32, i32* @esp, align 4
  %v2_10009f9d = add i32 %v1_10009f9d, -4
  %v3_10009f9d = inttoptr i32 %v2_10009f9d to i32*
  store i32 %v0_10009f9d, i32* %v3_10009f9d, align 4
  %v0_10009f9e = load i32, i32* @edx, align 4
  %v2_10009f9e = add i32 %v1_10009f9d, -8
  %v3_10009f9e = inttoptr i32 %v2_10009f9e to i32*
  store i32 %v0_10009f9e, i32* %v3_10009f9e, align 4
  %v0_10009f9f = load i32, i32* @esi, align 4
  %v2_10009f9f = add i32 %v1_10009f9d, -12
  %v3_10009f9f = inttoptr i32 %v2_10009f9f to i32*
  store i32 %v0_10009f9f, i32* %v3_10009f9f, align 4
  %v3_10009fa0 = call i8* @_strncat(i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v5_10009fa0 = ptrtoint i8* %v3_10009fa0 to i32
  store i32 %v5_10009fa0, i32* %eax.global-to-local, align 4
  %v1_10009fa8 = load i32, i32* %ebx.global-to-local, align 4
  %v3_10009fa8 = add i32 %v5_10009fa0, -1
  %v4_10009fa8 = add i32 %v3_10009fa8, %v1_10009fa8
  %v5_10009fa8 = inttoptr i32 %v4_10009fa8 to i8*
  store i8 0, i8* %v5_10009fa8, align 1
  br label %dec_label_pc_10009fad

dec_label_pc_10009fad:                            ; preds = %dec_label_pc_10009f9a, %dec_label_pc_10009f96
  %v0_10009fad = load i32, i32* @esp, align 4
  %v1_10009fad = inttoptr i32 %v0_10009fad to i32*
  %v2_10009fad = load i32, i32* %v1_10009fad, align 4
  store i32 %v2_10009fad, i32* @ebx, align 4
  %v3_10009fad = add i32 %v0_10009fad, 4
  br label %dec_label_pc_10009fae

dec_label_pc_10009fae:                            ; preds = %dec_label_pc_10009fad, %dec_label_pc_10009e76, %dec_label_pc_10009e5d
  %v0_10009fae = phi i32 [ %v3_10009fad, %dec_label_pc_10009fad ], [ %v0_10009fae.pre, %dec_label_pc_10009e76 ], [ %v4_10009e49, %dec_label_pc_10009e5d ]
  %v1_10009fae = add i32 %v0_10009fae, -4
  %v2_10009fae = inttoptr i32 %v1_10009fae to i32*
  store i32 92, i32* %v2_10009fae, align 4
  %v0_10009fb0 = load i32, i32* @esi, align 4
  %v2_10009fb0 = add i32 %v0_10009fae, -8
  %v3_10009fb0 = inttoptr i32 %v2_10009fb0 to i32*
  store i32 %v0_10009fb0, i32* %v3_10009fb0, align 4
  %v2_10009fb1 = call i32 @function_100097c0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10009fb1, i32* %eax.global-to-local, align 4
  %v0_10009fb6 = load i32, i32* @esp, align 4
  %v1_10009fb6 = add i32 %v0_10009fb6, 8
  %v4_10009fb9 = trunc i32 %v2_10009fb1 to i8
  %v5_10009fb9 = icmp eq i8 %v4_10009fb9, 0
  %v1_10009fbb = icmp eq i1 %v5_10009fb9, false
  br i1 %v1_10009fbb, label %dec_label_pc_10009fcb, label %dec_label_pc_10009fbd

dec_label_pc_10009fbd:                            ; preds = %dec_label_pc_10009fae
  %v1_10009fbd = add i32 %v0_10009fb6, 4
  %v2_10009fbd = inttoptr i32 %v1_10009fbd to i32*
  store i32 ptrtoint ([49 x i8]* @global_var_10023b88.410 to i32), i32* %v2_10009fbd, align 4
  %v0_10009fc2 = call i32 @Error()
  store i32 %v0_10009fc2, i32* %eax.global-to-local, align 4
  %v0_10009fc8 = load i32, i32* @esp, align 4
  %v1_10009fc8 = add i32 %v0_10009fc8, 4
  br label %dec_label_pc_10009fcb

dec_label_pc_10009fcb:                            ; preds = %dec_label_pc_10009fbd, %dec_label_pc_10009fae
  %v0_10009fce = phi i32 [ %v1_10009fc8, %dec_label_pc_10009fbd ], [ %v1_10009fb6, %dec_label_pc_10009fae ]
  %v0_10009fcb = load i32, i32* @esi, align 4
  %v1_10009fcb = inttoptr i32 %v0_10009fcb to i8*
  %v2_10009fcb = load i8, i8* %v1_10009fcb, align 1
  %v9_10009fcb = icmp eq i8 %v2_10009fcb, 0
  %v1_10009fce = inttoptr i32 %v0_10009fce to i32*
  %v2_10009fce = load i32, i32* %v1_10009fce, align 4
  store i32 %v2_10009fce, i32* @edi, align 4
  %v3_10009fce = add i32 %v0_10009fce, 4
  store i32 %v0_10009fcb, i32* %eax.global-to-local, align 4
  %v1_10009fd1 = inttoptr i32 %v3_10009fce to i32*
  %v2_10009fd1 = load i32, i32* %v1_10009fd1, align 4
  store i32 %v2_10009fd1, i32* @esi, align 4
  %v3_10009fd1 = add i32 %v0_10009fce, 8
  br i1 %v9_10009fcb, label %dec_label_pc_10009fe9, label %dec_label_pc_10009fd4

dec_label_pc_10009fd4:                            ; preds = %dec_label_pc_10009fcb, %dec_label_pc_10009fe3
  %v0_10009fe0 = phi i32 [ %v1_10009fe3, %dec_label_pc_10009fe3 ], [ %v0_10009fcb, %dec_label_pc_10009fcb ]
  %v1_10009fd4 = inttoptr i32 %v0_10009fe0 to i8*
  %v2_10009fd4 = load i8, i8* %v1_10009fd4, align 1
  %v3_10009fd4 = zext i8 %v2_10009fd4 to i32
  %v4_10009fd4 = load i32, i32* @ecx, align 4
  %v5_10009fd4 = and i32 %v4_10009fd4, -256
  %v6_10009fd4 = or i32 %v5_10009fd4, %v3_10009fd4
  store i32 %v6_10009fd4, i32* @ecx, align 4
  %v11_10009fd6 = icmp eq i8 %v2_10009fd4, 47
  br i1 %v11_10009fd6, label %dec_label_pc_10009fe0, label %dec_label_pc_10009fdb

dec_label_pc_10009fdb:                            ; preds = %dec_label_pc_10009fd4
  %v11_10009fdb = icmp eq i8 %v2_10009fd4, 92
  %v1_10009fde = icmp eq i1 %v11_10009fdb, false
  br i1 %v1_10009fde, label %dec_label_pc_10009fe3, label %dec_label_pc_10009fe0

dec_label_pc_10009fe0:                            ; preds = %dec_label_pc_10009fdb, %dec_label_pc_10009fd4
  store i8 92, i8* %v1_10009fd4, align 1
  %v0_10009fe3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10009fe3

dec_label_pc_10009fe3:                            ; preds = %dec_label_pc_10009fe0, %dec_label_pc_10009fdb
  %v0_10009fe3 = phi i32 [ %v0_10009fe3.pre, %dec_label_pc_10009fe0 ], [ %v0_10009fe0, %dec_label_pc_10009fdb ]
  %v1_10009fe3 = add i32 %v0_10009fe3, 1
  store i32 %v1_10009fe3, i32* %eax.global-to-local, align 4
  %v1_10009fe4 = inttoptr i32 %v1_10009fe3 to i8*
  %v2_10009fe4 = load i8, i8* %v1_10009fe4, align 1
  %v9_10009fe4 = icmp eq i8 %v2_10009fe4, 0
  %v1_10009fe7 = icmp eq i1 %v9_10009fe4, false
  br i1 %v1_10009fe7, label %dec_label_pc_10009fd4, label %dec_label_pc_10009fe9.loopexit

dec_label_pc_10009fe9.loopexit:                   ; preds = %dec_label_pc_10009fe3
  %v0_10009fe9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10009fe9

dec_label_pc_10009fe9:                            ; preds = %dec_label_pc_10009fe9.loopexit, %dec_label_pc_10009fcb
  %v0_10009fea = phi i32 [ %v1_10009fe3, %dec_label_pc_10009fe9.loopexit ], [ %v0_10009fcb, %dec_label_pc_10009fcb ]
  %v0_10009fe9 = phi i32 [ %v0_10009fe9.pre, %dec_label_pc_10009fe9.loopexit ], [ %v3_10009fd1, %dec_label_pc_10009fcb ]
  %v1_10009fe9 = inttoptr i32 %v0_10009fe9 to i32*
  %v2_10009fe9 = load i32, i32* %v1_10009fe9, align 4
  store i32 %v2_10009fe9, i32* @ebp, align 4
  ret i32 %v0_10009fea
}

define i32 @function_10009ff0(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10009ff0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_10009ff3 = load i32, i32* @esi, align 4
  %v0_10009ff4 = load i32, i32* @edi, align 4
  store i32 %v0_10009ff4, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_10009ffa = add i32 %arg1, 1
  store i32 %v1_10009ffa, i32* @edx, align 4
  %v4_1000a000.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000a000

dec_label_pc_1000a000:                            ; preds = %dec_label_pc_1000a000, %dec_label_pc_10009ff0
  %v4_1000a000 = phi i32 [ %v6_1000a000, %dec_label_pc_1000a000 ], [ %v4_1000a000.pre, %dec_label_pc_10009ff0 ]
  %v0_1000a002 = phi i32 [ %v1_1000a002, %dec_label_pc_1000a000 ], [ %arg1, %dec_label_pc_10009ff0 ]
  %v1_1000a000 = inttoptr i32 %v0_1000a002 to i8*
  %v2_1000a000 = load i8, i8* %v1_1000a000, align 1
  %v3_1000a000 = zext i8 %v2_1000a000 to i32
  %v5_1000a000 = and i32 %v4_1000a000, -256
  %v6_1000a000 = or i32 %v3_1000a000, %v5_1000a000
  store i32 %v6_1000a000, i32* @ecx, align 4
  %v1_1000a002 = add i32 %v0_1000a002, 1
  store i32 %v1_1000a002, i32* %eax.global-to-local, align 4
  %v5_1000a003 = icmp eq i8 %v2_1000a000, 0
  %v1_1000a005 = icmp eq i1 %v5_1000a003, false
  br i1 %v1_1000a005, label %dec_label_pc_1000a000, label %dec_label_pc_1000a007

dec_label_pc_1000a007:                            ; preds = %dec_label_pc_1000a000
  %tmp23 = ptrtoint i32* %arg3 to i32
  store i32 %arg2, i32* @ecx, align 4
  %v2_1000a00a = sub i32 %v1_1000a002, %v1_10009ffa
  store i32 %v2_1000a00a, i32* %eax.global-to-local, align 4
  %v5_1000a00e = icmp sgt i32 %v2_1000a00a, %arg2
  br i1 %v5_1000a00e, label %dec_label_pc_1000a02e, label %dec_label_pc_1000a010

dec_label_pc_1000a010:                            ; preds = %dec_label_pc_1000a007
  store i32 %tmp23, i32* %edi.global-to-local, align 4
  %v1_1000a019 = bitcast i32* %arg3 to i8*
  %v3_1000a019 = inttoptr i32 %arg1 to i8*
  %v5_1000a019 = call i8* @_strncpy(i8* %v1_1000a019, i8* %v3_1000a019, i32 %arg4)
  %v7_1000a019 = ptrtoint i8* %v5_1000a019 to i32
  store i32 %v7_1000a019, i32* %eax.global-to-local, align 4
  %tmp24 = icmp slt i32 %arg4, 1
  br i1 %tmp24, label %dec_label_pc_1000a051, label %dec_label_pc_1000a025

dec_label_pc_1000a025:                            ; preds = %dec_label_pc_1000a010
  %v0_1000a025 = load i32, i32* %edi.global-to-local, align 4
  %v3_1000a025 = add i32 %arg4, -1
  %v4_1000a025 = add i32 %v3_1000a025, %v0_1000a025
  %v5_1000a025 = inttoptr i32 %v4_1000a025 to i8*
  store i8 0, i8* %v5_1000a025, align 1
  %v2_1000a02a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a02a, i32* @edi, align 4
  store i32 %v0_10009ff3, i32* @esi, align 4
  %v0_1000a02d = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000a02d

dec_label_pc_1000a02e:                            ; preds = %dec_label_pc_1000a007
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %v1_10009ffa, i32* @esi, align 4
  br label %dec_label_pc_1000a033

dec_label_pc_1000a033:                            ; preds = %dec_label_pc_1000a033, %dec_label_pc_1000a02e
  %v4_1000a033 = phi i32 [ %v6_1000a033, %dec_label_pc_1000a033 ], [ %v1_10009ffa, %dec_label_pc_1000a02e ]
  %v0_1000a035 = phi i32 [ %v1_1000a035, %dec_label_pc_1000a033 ], [ %arg1, %dec_label_pc_1000a02e ]
  %v1_1000a033 = inttoptr i32 %v0_1000a035 to i8*
  %v2_1000a033 = load i8, i8* %v1_1000a033, align 1
  %v3_1000a033 = zext i8 %v2_1000a033 to i32
  %v5_1000a033 = and i32 %v4_1000a033, -256
  %v6_1000a033 = or i32 %v3_1000a033, %v5_1000a033
  %v1_1000a035 = add i32 %v0_1000a035, 1
  store i32 %v1_1000a035, i32* %eax.global-to-local, align 4
  %v5_1000a036 = icmp eq i8 %v2_1000a033, 0
  %v1_1000a038 = icmp eq i1 %v5_1000a036, false
  br i1 %v1_1000a038, label %dec_label_pc_1000a033, label %dec_label_pc_1000a03a

dec_label_pc_1000a03a:                            ; preds = %dec_label_pc_1000a033
  store i32 %tmp23, i32* @edx, align 4
  %v2_1000a042 = sub i32 %v1_1000a035, %v1_10009ffa
  store i32 %v2_1000a042, i32* @eax, align 4
  %v1_1000a045 = sub i32 0, %arg2
  store i32 %v1_1000a045, i32* @ecx, align 4
  %v5_1000a049 = call i32 @function_10009990(i32 %arg1, i32 %v1_1000a045, i32 %v2_1000a042, i32 %tmp23, i32 %arg4)
  store i32 %v5_1000a049, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a051

dec_label_pc_1000a051:                            ; preds = %dec_label_pc_1000a03a, %dec_label_pc_1000a010
  %v0_1000a054 = phi i32 [ %v5_1000a049, %dec_label_pc_1000a03a ], [ %v7_1000a019, %dec_label_pc_1000a010 ]
  %v2_1000a051 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a051, i32* @edi, align 4
  store i32 %v0_10009ff3, i32* @esi, align 4
  ret i32 %v0_1000a054
}

define i32 @function_1000a060(i8 %arg1) local_unnamed_addr {
dec_label_pc_1000a060:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000a06b = load i32, i32* @ecx, align 4
  store i32 %v0_1000a06b, i32* %esi.global-to-local, align 4
  %v1_1000a06d = add i32 %v0_1000a06b, 256
  %v2_1000a06d = inttoptr i32 %v1_1000a06d to i32*
  %v3_1000a06d = load i32, i32* %v2_1000a06d, align 4
  store i32 %v3_1000a06d, i32* %eax.global-to-local, align 4
  %v4_1000a073 = sext i8 %arg1 to i32
  store i32 %v4_1000a073, i32* @ecx, align 4
  %v0_1000a076 = load i32, i32* @edi, align 4
  store i32 %v0_1000a076, i32* %stack_var_-16, align 4
  %v4_1000a076 = ptrtoint i32* %stack_var_-16 to i32
  %v0_1000a07e = call i32 @Warning()
  store i32 %v0_1000a07e, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_1000a085 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a085 = add i32 %v0_1000a085, 264
  %v2_1000a085 = inttoptr i32 %v1_1000a085 to i32*
  %v3_1000a085 = load i32, i32* %v2_1000a085, align 4
  %v7_1000a08b = icmp sgt i32 %v3_1000a085, 0
  br i1 %v7_1000a08b, label %dec_label_pc_1000a090, label %dec_label_pc_1000a0e0

dec_label_pc_1000a090:                            ; preds = %dec_label_pc_1000a060, %dec_label_pc_1000a0d7
  %v0_1000a0e010 = phi i32 [ %v0_1000a0e09, %dec_label_pc_1000a0d7 ], [ %v4_1000a076, %dec_label_pc_1000a060 ]
  %v0_1000a096 = phi i32 [ %v1_1000a0d7, %dec_label_pc_1000a0d7 ], [ 0, %dec_label_pc_1000a060 ]
  %v1_1000a096 = phi i32 [ %v1_1000a0d8, %dec_label_pc_1000a0d7 ], [ %v0_1000a085, %dec_label_pc_1000a060 ]
  %v2_1000a090 = mul i32 %v0_1000a096, 4
  %v3_1000a090 = add i32 %v2_1000a090, %v1_1000a096
  %v4_1000a090 = inttoptr i32 %v3_1000a090 to i32*
  %v5_1000a090 = load i32, i32* %v4_1000a090, align 4
  %v15_1000a090 = icmp eq i32 %v5_1000a090, -1
  br i1 %v15_1000a090, label %dec_label_pc_1000a0d7, label %dec_label_pc_1000a096

dec_label_pc_1000a096:                            ; preds = %dec_label_pc_1000a090
  %v2_1000a096 = add i32 %v1_1000a096, 260
  %v3_1000a096 = inttoptr i32 %v2_1000a096 to i32*
  %v4_1000a096 = load i32, i32* %v3_1000a096, align 4
  %v5_1000a09c = icmp slt i32 %v0_1000a096, %v4_1000a096
  %v0_1000a09e = call i32 @KeyValuesSystem()
  store i32 %v0_1000a09e, i32* %eax.global-to-local, align 4
  %v0_1000a0a4 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a0a4 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000a0a4 = mul i32 %v1_1000a0a4, 4
  %v3_1000a0a4 = add i32 %v2_1000a0a4, %v0_1000a0a4
  %v4_1000a0a4 = inttoptr i32 %v3_1000a0a4 to i32*
  %v5_1000a0a4 = load i32, i32* %v4_1000a0a4, align 4
  store i32 %v5_1000a0a4, i32* @ecx, align 4
  %v1_1000a0ac = load i32, i32* @esp, align 4
  %v2_1000a0ac = add i32 %v1_1000a0ac, -4
  %v3_1000a0ac = inttoptr i32 %v2_1000a0ac to i32*
  store i32 %v5_1000a0a4, i32* %v3_1000a0ac, align 4
  %v0_1000a0ad = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a0ad, i32* @ecx, align 4
  %v2_1000a0b1 = add i32 %v1_1000a0ac, -8
  %v3_1000a0b1 = inttoptr i32 %v2_1000a0b1 to i32*
  store i32 %v0_1000a0ad, i32* %v3_1000a0b1, align 4
  %v1_1000a0b2 = add i32 %v1_1000a0ac, -12
  %v2_1000a0b2 = inttoptr i32 %v1_1000a0b2 to i32*
  %. = select i1 %v5_1000a09c, i32 ptrtoint ([5 x i8]* @global_var_10023c08.412 to i32), i32 ptrtoint ([9 x i8]* @global_var_10023bfc.413 to i32)
  store i32 %., i32* %v2_1000a0b2, align 4
  %v0_1000a0d2 = call i32 @Warning()
  store i32 %v0_1000a0d2, i32* %eax.global-to-local, align 4
  %v0_1000a0d4 = load i32, i32* @esp, align 4
  %v1_1000a0d4 = add i32 %v0_1000a0d4, 8
  %v0_1000a0d7.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000a0d8.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000a0d7

dec_label_pc_1000a0d7:                            ; preds = %dec_label_pc_1000a096, %dec_label_pc_1000a090
  %v0_1000a0e09 = phi i32 [ %v1_1000a0d4, %dec_label_pc_1000a096 ], [ %v0_1000a0e010, %dec_label_pc_1000a090 ]
  %v1_1000a0d8 = phi i32 [ %v1_1000a0d8.pre, %dec_label_pc_1000a096 ], [ %v1_1000a096, %dec_label_pc_1000a090 ]
  %v0_1000a0d7 = phi i32 [ %v0_1000a0d7.pre, %dec_label_pc_1000a096 ], [ %v0_1000a096, %dec_label_pc_1000a090 ]
  %v1_1000a0d7 = add i32 %v0_1000a0d7, 1
  store i32 %v1_1000a0d7, i32* %edi.global-to-local, align 4
  %v2_1000a0d8 = add i32 %v1_1000a0d8, 264
  %v3_1000a0d8 = inttoptr i32 %v2_1000a0d8 to i32*
  %v4_1000a0d8 = load i32, i32* %v3_1000a0d8, align 4
  %v5_1000a0de = icmp slt i32 %v1_1000a0d7, %v4_1000a0d8
  br i1 %v5_1000a0de, label %dec_label_pc_1000a090, label %dec_label_pc_1000a0e0

dec_label_pc_1000a0e0:                            ; preds = %dec_label_pc_1000a0d7, %dec_label_pc_1000a060
  %v0_1000a0e0 = phi i32 [ %v4_1000a076, %dec_label_pc_1000a060 ], [ %v0_1000a0e09, %dec_label_pc_1000a0d7 ]
  %v1_1000a0e0 = add i32 %v0_1000a0e0, -4
  %v2_1000a0e0 = inttoptr i32 %v1_1000a0e0 to i32*
  store i32 ptrtoint (i32* @global_var_1002311c.252 to i32), i32* %v2_1000a0e0, align 4
  %v0_1000a0e5 = call i32 @Warning()
  store i32 %v0_1000a0e5, i32* %eax.global-to-local, align 4
  %v0_1000a0e7 = load i32, i32* @esp, align 4
  %v1_1000a0e7 = add i32 %v0_1000a0e7, 4
  %v1_1000a0ea = inttoptr i32 %v1_1000a0e7 to i32*
  %v2_1000a0ea = load i32, i32* %v1_1000a0ea, align 4
  store i32 %v2_1000a0ea, i32* @edi, align 4
  %v3_1000a0ea = add i32 %v0_1000a0e7, 8
  %v1_1000a0eb = inttoptr i32 %v3_1000a0ea to i32*
  %v2_1000a0eb = load i32, i32* %v1_1000a0eb, align 4
  store i32 %v2_1000a0eb, i32* @esi, align 4
  %v3_1000a0eb = add i32 %v0_1000a0e7, 12
  %v1_1000a0ec = inttoptr i32 %v3_1000a0eb to i32*
  %v2_1000a0ec = load i32, i32* %v1_1000a0ec, align 4
  store i32 %v2_1000a0ec, i32* @ebx, align 4
  %v3_1000a0ec = add i32 %v0_1000a0e7, 16
  %v1_1000a0ed = inttoptr i32 %v3_1000a0ec to i32*
  %v2_1000a0ed = load i32, i32* %v1_1000a0ed, align 4
  store i32 %v2_1000a0ed, i32* @ebp, align 4
  ret i32 %v0_1000a0e5
}

define i32 @function_1000a100(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000a100:
  %v0_1000a103 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a103, i32* @ecx, align 4
  ret i32 %v0_1000a103
}

define i32 @function_1000a120(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a120:
  %v0_1000a123 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a123, i32* @ecx, align 4
  ret i32 %v0_1000a123
}

define i32 @function_1000a140() local_unnamed_addr {
dec_label_pc_1000a140:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_1000a143 = load i32, i32* @ecx, align 4
  %v0_1000a145 = load i32, i32* inttoptr (i32 268575264 to i32*), align 32
  store i32 %v0_1000a145, i32* @ebx, align 4
  %v0_1000a14c = load i32, i32* @edi, align 4
  store i32 %v0_1000a14c, i32* %stack_var_-20, align 4
  %v4_1000a14c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v0_1000a143, i32* %edi.global-to-local, align 4
  %v1_1000a14f = add i32 %v0_1000a143, 24
  %v2_1000a14f = inttoptr i32 %v1_1000a14f to i32*
  %v3_1000a14f = load i32, i32* %v2_1000a14f, align 4
  store i32 %v3_1000a14f, i32* %esi.global-to-local, align 4
  %v1_1000a155 = icmp eq i32 %v3_1000a14f, 0
  br i1 %v1_1000a155, label %dec_label_pc_1000a186, label %dec_label_pc_1000a159

dec_label_pc_1000a159:                            ; preds = %dec_label_pc_1000a140
  br label %dec_label_pc_1000a160

dec_label_pc_1000a160:                            ; preds = %dec_label_pc_1000a160, %dec_label_pc_1000a159
  %v0_1000a160 = phi i32 [ %v3_1000a160, %dec_label_pc_1000a160 ], [ %v3_1000a14f, %dec_label_pc_1000a159 ]
  %v1_1000a160 = add i32 %v0_1000a160, 20
  %v2_1000a160 = inttoptr i32 %v1_1000a160 to i32*
  %v3_1000a160 = load i32, i32* %v2_1000a160, align 4
  store i32 %v3_1000a160, i32* @edi, align 4
  store i32 %v0_1000a160, i32* @ecx, align 4
  store i32 0, i32* %v2_1000a160, align 4
  %v0_1000a16c = call i32 @function_1000a140()
  store i32 %v0_1000a16c, i32* %eax.global-to-local, align 4
  %v0_1000a171 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a171, i32* %eax.global-to-local, align 4
  %v1_1000a173 = inttoptr i32 %v0_1000a171 to i32*
  %v2_1000a173 = load i32, i32* %v1_1000a173, align 4
  store i32 %v0_1000a171, i32* @ecx, align 4
  %v1_1000a177 = add i32 %v2_1000a173, 8
  %v2_1000a177 = inttoptr i32 %v1_1000a177 to i32*
  %v3_1000a177 = load i32, i32* %v2_1000a177, align 4
  store i32 %v3_1000a177, i32* %eax.global-to-local, align 4
  %v0_1000a17a = load i32, i32* @esi, align 4
  %v1_1000a17a = load i32, i32* @esp, align 4
  %v2_1000a17a = add i32 %v1_1000a17a, -4
  %v3_1000a17a = inttoptr i32 %v2_1000a17a to i32*
  store i32 %v0_1000a17a, i32* %v3_1000a17a, align 4
  store i32 %v3_1000a160, i32* %esi.global-to-local, align 4
  %v1_1000a17f = icmp eq i32 %v3_1000a160, 0
  %v1_1000a181 = icmp eq i1 %v1_1000a17f, false
  br i1 %v1_1000a181, label %dec_label_pc_1000a160, label %dec_label_pc_1000a183

dec_label_pc_1000a183:                            ; preds = %dec_label_pc_1000a160
  store i32 %v0_1000a143, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000a186

dec_label_pc_1000a186:                            ; preds = %dec_label_pc_1000a183, %dec_label_pc_1000a140
  %v1_1000a1bd10 = phi i32 [ %v2_1000a17a, %dec_label_pc_1000a183 ], [ %v4_1000a14c, %dec_label_pc_1000a140 ]
  %v1_1000a186 = add i32 %v0_1000a143, 20
  %v2_1000a186 = inttoptr i32 %v1_1000a186 to i32*
  %v3_1000a186 = load i32, i32* %v2_1000a186, align 4
  store i32 %v3_1000a186, i32* %esi.global-to-local, align 4
  %v1_1000a189 = icmp eq i32 %v3_1000a186, 0
  br i1 %v1_1000a189, label %dec_label_pc_1000a1ba, label %dec_label_pc_1000a190.preheader

dec_label_pc_1000a190.preheader:                  ; preds = %dec_label_pc_1000a186
  br label %dec_label_pc_1000a190

dec_label_pc_1000a190:                            ; preds = %dec_label_pc_1000a190.preheader, %dec_label_pc_1000a194
  %v1_1000a1bd8 = phi i32 [ %v2_1000a1ae, %dec_label_pc_1000a194 ], [ %v1_1000a1bd10, %dec_label_pc_1000a190.preheader ]
  %v0_1000a194 = phi i32 [ %v3_1000a194, %dec_label_pc_1000a194 ], [ %v3_1000a186, %dec_label_pc_1000a190.preheader ]
  %v12_1000a190 = icmp eq i32 %v0_1000a194, %v0_1000a143
  br i1 %v12_1000a190, label %dec_label_pc_1000a1ba, label %dec_label_pc_1000a194

dec_label_pc_1000a194:                            ; preds = %dec_label_pc_1000a190
  %v1_1000a194 = add i32 %v0_1000a194, 20
  %v2_1000a194 = inttoptr i32 %v1_1000a194 to i32*
  %v3_1000a194 = load i32, i32* %v2_1000a194, align 4
  store i32 %v3_1000a194, i32* @edi, align 4
  store i32 %v0_1000a194, i32* @ecx, align 4
  store i32 0, i32* %v2_1000a194, align 4
  %v0_1000a1a0 = call i32 @function_1000a140()
  store i32 %v0_1000a1a0, i32* %eax.global-to-local, align 4
  %v0_1000a1a5 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a1a5, i32* %eax.global-to-local, align 4
  %v1_1000a1a7 = inttoptr i32 %v0_1000a1a5 to i32*
  %v2_1000a1a7 = load i32, i32* %v1_1000a1a7, align 4
  store i32 %v0_1000a1a5, i32* @ecx, align 4
  %v1_1000a1ab = add i32 %v2_1000a1a7, 8
  %v2_1000a1ab = inttoptr i32 %v1_1000a1ab to i32*
  %v3_1000a1ab = load i32, i32* %v2_1000a1ab, align 4
  store i32 %v3_1000a1ab, i32* %eax.global-to-local, align 4
  %v0_1000a1ae = load i32, i32* @esi, align 4
  %v1_1000a1ae = load i32, i32* @esp, align 4
  %v2_1000a1ae = add i32 %v1_1000a1ae, -4
  %v3_1000a1ae = inttoptr i32 %v2_1000a1ae to i32*
  store i32 %v0_1000a1ae, i32* %v3_1000a1ae, align 4
  store i32 %v3_1000a194, i32* %esi.global-to-local, align 4
  %v1_1000a1b3 = icmp eq i32 %v3_1000a194, 0
  store i32 %v0_1000a143, i32* %edi.global-to-local, align 4
  %v1_1000a1b8 = icmp eq i1 %v1_1000a1b3, false
  br i1 %v1_1000a1b8, label %dec_label_pc_1000a190, label %dec_label_pc_1000a1ba

dec_label_pc_1000a1ba:                            ; preds = %dec_label_pc_1000a194, %dec_label_pc_1000a190, %dec_label_pc_1000a186
  %v1_1000a1bd = phi i32 [ %v1_1000a1bd10, %dec_label_pc_1000a186 ], [ %v2_1000a1ae, %dec_label_pc_1000a194 ], [ %v1_1000a1bd8, %dec_label_pc_1000a190 ]
  %v1_1000a1ba = add i32 %v0_1000a143, 4
  %v2_1000a1ba = inttoptr i32 %v1_1000a1ba to i32*
  %v3_1000a1ba = load i32, i32* %v2_1000a1ba, align 4
  store i32 %v3_1000a1ba, i32* @ecx, align 4
  %v2_1000a1bd = add i32 %v1_1000a1bd, -4
  %v3_1000a1bd = inttoptr i32 %v2_1000a1bd to i32*
  store i32 %v3_1000a1ba, i32* %v3_1000a1bd, align 4
  %v1_1000a1be = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a1be, i32* %eax.global-to-local, align 4
  %v0_1000a1c3 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000a1c3 = add i32 %v0_1000a1c3, 8
  %v2_1000a1c3 = inttoptr i32 %v1_1000a1c3 to i32*
  %v3_1000a1c3 = load i32, i32* %v2_1000a1c3, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v1_1000a1c8 = load i32, i32* @esp, align 4
  %v2_1000a1c8 = add i32 %v1_1000a1c8, -4
  %v3_1000a1c8 = inttoptr i32 %v2_1000a1c8 to i32*
  store i32 %v3_1000a1c3, i32* %v3_1000a1c8, align 4
  %v0_1000a1c9 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a1c9 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000a1c9 = add i32 %v1_1000a1c9, 4
  %v3_1000a1c9 = inttoptr i32 %v2_1000a1c9 to i32*
  store i32 %v0_1000a1c9, i32* %v3_1000a1c9, align 4
  %v1_1000a1cc = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a1cc, i32* %eax.global-to-local, align 4
  %v0_1000a1d4 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a1d4 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000a1d4 = add i32 %v1_1000a1d4, 8
  %v3_1000a1d4 = inttoptr i32 %v2_1000a1d4 to i32*
  store i32 %v0_1000a1d4, i32* %v3_1000a1d4, align 4
  %v0_1000a1d7 = load i32, i32* @esp, align 4
  %v1_1000a1d7 = inttoptr i32 %v0_1000a1d7 to i32*
  %v2_1000a1d7 = load i32, i32* %v1_1000a1d7, align 4
  store i32 %v2_1000a1d7, i32* @edi, align 4
  %v3_1000a1d7 = add i32 %v0_1000a1d7, 4
  %v1_1000a1d8 = inttoptr i32 %v3_1000a1d7 to i32*
  %v2_1000a1d8 = load i32, i32* %v1_1000a1d8, align 4
  store i32 %v2_1000a1d8, i32* @esi, align 4
  %v3_1000a1d8 = add i32 %v0_1000a1d7, 8
  %v1_1000a1d9 = inttoptr i32 %v3_1000a1d8 to i32*
  %v2_1000a1d9 = load i32, i32* %v1_1000a1d9, align 4
  store i32 %v2_1000a1d9, i32* @ebx, align 4
  %v0_1000a1dd = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000a1dd
}

define i32 @function_1000a1e0(i32 %arg1, i32* %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_1000a1e0:
  %eax.global-to-local = alloca i32, align 4
  %tmp8 = ptrtoint i32* %arg3 to i32
  %tmp9 = ptrtoint i32* %arg2 to i32
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  store i32 %tmp8, i32* @eax, align 4
  store i32 %arg1, i32* @ebx, align 4
  store i32 %tmp9, i32* @edi, align 4
  %v1_1000a1ef = bitcast i32* %arg2 to i8*
  store i8 0, i8* %v1_1000a1ef, align 1
  %v0_1000a1f2 = load i32, i32* @eax, align 4
  %v1_1000a1f2 = inttoptr i32 %v0_1000a1f2 to i8*
  store i8 0, i8* %v1_1000a1f2, align 1
  %v0_1000a1f5 = load i32, i32* @ebx, align 4
  %v1_1000a1f5 = add i32 %v0_1000a1f5, 20
  %v2_1000a1f5 = inttoptr i32 %v1_1000a1f5 to i8*
  %v3_1000a1f5 = load i8, i8* %v2_1000a1f5, align 1
  %v10_1000a1f5 = icmp eq i8 %v3_1000a1f5, 0
  %v0_1000a1f9 = load i32, i32* @ecx, align 4
  store i32 %v0_1000a1f9, i32* @esi, align 4
  %v1_1000a1fb = icmp eq i1 %v10_1000a1f5, false
  br i1 %v1_1000a1fb, label %dec_label_pc_1000a228, label %dec_label_pc_1000a1fd

dec_label_pc_1000a1fd:                            ; preds = %dec_label_pc_1000a1e0
  store i32 %v0_1000a1f5, i32* @ecx, align 4
  %v0_1000a1ff = call i32 @function_1000c210()
  store i32 %v0_1000a1ff, i32* @eax, align 4
  %v0_1000a204 = load i32, i32* @ebx, align 4
  %v1_1000a204 = add i32 %v0_1000a204, 20
  %v2_1000a204 = inttoptr i32 %v1_1000a204 to i8*
  %v3_1000a204 = load i8, i8* %v2_1000a204, align 1
  %v10_1000a204 = icmp eq i8 %v3_1000a204, 0
  %v1_1000a208 = icmp eq i1 %v10_1000a204, false
  br i1 %v1_1000a208, label %dec_label_pc_1000a228, label %dec_label_pc_1000a210

dec_label_pc_1000a210:                            ; preds = %dec_label_pc_1000a1fd, %dec_label_pc_1000a21d
  %v0_1000a210 = phi i32 [ %v0_1000a222, %dec_label_pc_1000a21d ], [ %v0_1000a204, %dec_label_pc_1000a1fd ]
  store i32 %v0_1000a210, i32* @ecx, align 4
  %v0_1000a212 = call i32 @function_1000ca20()
  store i32 %v0_1000a212, i32* @eax, align 4
  %v0_1000a217 = load i32, i32* @ebx, align 4
  store i32 %v0_1000a217, i32* @ecx, align 4
  %v4_1000a219 = trunc i32 %v0_1000a212 to i8
  %v5_1000a219 = icmp eq i8 %v4_1000a219, 0
  br i1 %v5_1000a219, label %dec_label_pc_1000a231, label %dec_label_pc_1000a21d

dec_label_pc_1000a21d:                            ; preds = %dec_label_pc_1000a210
  %v0_1000a21d = call i32 @function_1000c210()
  store i32 %v0_1000a21d, i32* @eax, align 4
  %v0_1000a222 = load i32, i32* @ebx, align 4
  %v1_1000a222 = add i32 %v0_1000a222, 20
  %v2_1000a222 = inttoptr i32 %v1_1000a222 to i8*
  %v3_1000a222 = load i8, i8* %v2_1000a222, align 1
  %v10_1000a222 = icmp eq i8 %v3_1000a222, 0
  br i1 %v10_1000a222, label %dec_label_pc_1000a210, label %dec_label_pc_1000a228

dec_label_pc_1000a228:                            ; preds = %dec_label_pc_1000a21d, %dec_label_pc_1000a231, %dec_label_pc_1000a1fd, %dec_label_pc_1000a1e0
  %v0_1000a228 = load i32, i32* @esp, align 4
  %v1_1000a228 = inttoptr i32 %v0_1000a228 to i32*
  %v2_1000a228 = load i32, i32* %v1_1000a228, align 4
  store i32 %v2_1000a228, i32* @edi, align 4
  %v3_1000a228 = add i32 %v0_1000a228, 4
  %v1_1000a229 = inttoptr i32 %v3_1000a228 to i32*
  %v2_1000a229 = load i32, i32* %v1_1000a229, align 4
  store i32 %v2_1000a229, i32* @esi, align 4
  %v3_1000a229 = add i32 %v0_1000a228, 8
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000a22c = inttoptr i32 %v3_1000a229 to i32*
  %v2_1000a22c = load i32, i32* %v1_1000a22c, align 4
  store i32 %v2_1000a22c, i32* @ebx, align 4
  %v3_1000a22c = add i32 %v0_1000a228, 12
  %v1_1000a22d = inttoptr i32 %v3_1000a22c to i32*
  %v2_1000a22d = load i32, i32* %v1_1000a22d, align 4
  store i32 %v2_1000a22d, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000a231:                            ; preds = %dec_label_pc_1000a210
  store i32 0, i32* %stack_var_-20, align 4
  store i32 1, i32* %stack_var_-24, align 4
  %v2_1000a235 = call i32 @function_1000bff0(i32 1, i32 0)
  store i32 %v2_1000a235, i32* %eax.global-to-local, align 4
  %v2_1000a23a = icmp eq i32 %v2_1000a235, 0
  br i1 %v2_1000a23a, label %dec_label_pc_1000a228, label %dec_label_pc_1000a23e

dec_label_pc_1000a23e:                            ; preds = %dec_label_pc_1000a231
  %v3_1000a235 = inttoptr i32 %v2_1000a235 to i8*
  %v3_1000a23e = load i8, i8* %v3_1000a235, align 1
  %v4_1000a23e = zext i8 %v3_1000a23e to i32
  %v7_1000a23e = and i32 %v2_1000a235, -256
  %v8_1000a23e = or i32 %v4_1000a23e, %v7_1000a23e
  store i32 %v8_1000a23e, i32* %eax.global-to-local, align 4
  %v11_1000a240 = icmp eq i8 %v3_1000a23e, 34
  %v1_1000a242 = icmp eq i1 %v11_1000a240, false
  br i1 %v1_1000a242, label %dec_label_pc_1000a277, label %dec_label_pc_1000a244

dec_label_pc_1000a244:                            ; preds = %dec_label_pc_1000a23e
  %v0_1000a244 = load i32, i32* @edi, align 4
  %v1_1000a244 = inttoptr i32 %v0_1000a244 to i8*
  store i8 1, i8* %v1_1000a244, align 1
  %v0_1000a247 = load i32, i32* @esi, align 4
  %v1_1000a247 = add i32 %v0_1000a247, 17
  %v2_1000a247 = inttoptr i32 %v1_1000a247 to i8*
  %v3_1000a247 = load i8, i8* %v2_1000a247, align 1
  %v10_1000a247 = icmp eq i8 %v3_1000a247, 0
  br i1 %v10_1000a247, label %dec_label_pc_1000a254, label %dec_label_pc_1000a24d

dec_label_pc_1000a24d:                            ; preds = %dec_label_pc_1000a244
  %v0_1000a24d = call i32 @function_1000bdd0()
  br label %dec_label_pc_1000a259

dec_label_pc_1000a254:                            ; preds = %dec_label_pc_1000a244
  %v0_1000a254 = call i32 @function_1000bde0()
  br label %dec_label_pc_1000a259

dec_label_pc_1000a259:                            ; preds = %dec_label_pc_1000a254, %dec_label_pc_1000a24d
  %storemerge = phi i32 [ %v0_1000a254, %dec_label_pc_1000a254 ], [ %v0_1000a24d, %dec_label_pc_1000a24d ]
  store i32 %storemerge, i32* @eax, align 4
  %v0_1000a264 = load i32, i32* @ebx, align 4
  store i32 %v0_1000a264, i32* @ecx, align 4
  %v5_1000a266 = call i32 @function_1000cc50(i32 %storemerge, i32* bitcast (i8** @global_var_1002ba28.414 to i32*), i32 1024)
  store i32 %storemerge, i32* @edi, align 4
  store i32 ptrtoint (i8** @global_var_1002ba28.414 to i32), i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_1002ba28.414 to i32), i32* %eax.global-to-local, align 4
  store i32 1024, i32* @ebx, align 4
  %v2_1000a273 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000a273, i32* @ebp, align 4
  ret i32 ptrtoint (i8** @global_var_1002ba28.414 to i32)

dec_label_pc_1000a277:                            ; preds = %dec_label_pc_1000a23e
  %v11_1000a277 = icmp eq i8 %v3_1000a23e, 123
  br i1 %v11_1000a277, label %dec_label_pc_1000a35b, label %dec_label_pc_1000a27f

dec_label_pc_1000a27f:                            ; preds = %dec_label_pc_1000a277
  %v11_1000a27f = icmp eq i8 %v3_1000a23e, 125
  br i1 %v11_1000a27f, label %dec_label_pc_1000a35b, label %dec_label_pc_1000a287

dec_label_pc_1000a287:                            ; preds = %dec_label_pc_1000a27f
  store i32 0, i32* @esi, align 4
  %v0_1000a28c = load i32, i32* @ebx, align 4
  store i32 %v0_1000a28c, i32* @ecx, align 4
  %v3_1000a296 = call i32 @function_1000bff0(i32 1, i32 0)
  store i32 %v3_1000a296, i32* %eax.global-to-local, align 4
  %v1_1000a29b = icmp eq i32 %v3_1000a296, 0
  br i1 %v1_1000a29b, label %dec_label_pc_1000a348, label %dec_label_pc_1000a2a3.preheader

dec_label_pc_1000a2a3.preheader:                  ; preds = %dec_label_pc_1000a287
  %v1_1000a2e3 = bitcast i32* %arg3 to i8*
  br label %dec_label_pc_1000a2a3

dec_label_pc_1000a2a3:                            ; preds = %dec_label_pc_1000a2a3.preheader, %dec_label_pc_1000a32a
  %v0_1000a2a3 = phi i32 [ %v2_1000a33b, %dec_label_pc_1000a32a ], [ %v3_1000a296, %dec_label_pc_1000a2a3.preheader ]
  %stack_var_7.0 = phi i8 [ %stack_var_7.1, %dec_label_pc_1000a32a ], [ 0, %dec_label_pc_1000a2a3.preheader ]
  %stack_var_11.0 = phi i8 [ %stack_var_11.2, %dec_label_pc_1000a32a ], [ 0, %dec_label_pc_1000a2a3.preheader ]
  %v1_1000a2a3 = inttoptr i32 %v0_1000a2a3 to i8*
  %v2_1000a2a3 = load i8, i8* %v1_1000a2a3, align 1
  %v3_1000a2a3 = zext i8 %v2_1000a2a3 to i32
  %v4_1000a2a3 = load i32, i32* @ecx, align 4
  %v5_1000a2a3 = and i32 %v4_1000a2a3, -256
  %v6_1000a2a3 = or i32 %v5_1000a2a3, %v3_1000a2a3
  store i32 %v6_1000a2a3, i32* @ecx, align 4
  %v5_1000a2a5 = icmp eq i8 %v2_1000a2a3, 0
  br i1 %v5_1000a2a5, label %dec_label_pc_1000a348, label %dec_label_pc_1000a2ad

dec_label_pc_1000a2ad:                            ; preds = %dec_label_pc_1000a2a3
  %v11_1000a2ad = icmp eq i8 %v2_1000a2a3, 34
  br i1 %v11_1000a2ad, label %dec_label_pc_1000a348, label %dec_label_pc_1000a2b6

dec_label_pc_1000a2b6:                            ; preds = %dec_label_pc_1000a2ad
  %v11_1000a2b6 = icmp eq i8 %v2_1000a2a3, 123
  br i1 %v11_1000a2b6, label %dec_label_pc_1000a348, label %dec_label_pc_1000a2bf

dec_label_pc_1000a2bf:                            ; preds = %dec_label_pc_1000a2b6
  %v11_1000a2bf = icmp eq i8 %v2_1000a2a3, 125
  br i1 %v11_1000a2bf, label %dec_label_pc_1000a348, label %dec_label_pc_1000a2c8

dec_label_pc_1000a2c8:                            ; preds = %dec_label_pc_1000a2bf
  %v11_1000a2c8 = icmp eq i8 %v2_1000a2a3, 91
  %v1_1000a2cb = icmp eq i1 %v11_1000a2c8, false
  %stack_var_11.0. = select i1 %v1_1000a2cb, i8 %stack_var_11.0, i8 1
  %v11_1000a2d1 = icmp eq i8 %v2_1000a2a3, 93
  %v1_1000a2d4 = icmp eq i1 %v11_1000a2d1, false
  br i1 %v1_1000a2d4, label %dec_label_pc_1000a2e6, label %dec_label_pc_1000a2d6

dec_label_pc_1000a2d6:                            ; preds = %dec_label_pc_1000a2c8
  %v10_1000a2d6 = icmp eq i8 %stack_var_11.0., 0
  br i1 %v10_1000a2d6, label %dec_label_pc_1000a2e6, label %dec_label_pc_1000a2dc

dec_label_pc_1000a2dc:                            ; preds = %dec_label_pc_1000a2d6
  store i32 %tmp8, i32* @ecx, align 4
  store i8 1, i8* %v1_1000a2e3, align 1
  %v0_1000a2e6.pre = load i32, i32* %eax.global-to-local, align 4
  %v4_1000a2e6.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000a2e6

dec_label_pc_1000a2e6:                            ; preds = %dec_label_pc_1000a2dc, %dec_label_pc_1000a2d6, %dec_label_pc_1000a2c8
  %v4_1000a2e6 = phi i32 [ %v6_1000a2a3, %dec_label_pc_1000a2c8 ], [ %v6_1000a2a3, %dec_label_pc_1000a2d6 ], [ %v4_1000a2e6.pre, %dec_label_pc_1000a2dc ]
  %v0_1000a2e6 = phi i32 [ %v0_1000a2a3, %dec_label_pc_1000a2c8 ], [ %v0_1000a2a3, %dec_label_pc_1000a2d6 ], [ %v0_1000a2e6.pre, %dec_label_pc_1000a2dc ]
  %stack_var_11.2 = phi i8 [ %stack_var_11.0., %dec_label_pc_1000a2c8 ], [ 0, %dec_label_pc_1000a2d6 ], [ 0, %dec_label_pc_1000a2dc ]
  %v1_1000a2e6 = inttoptr i32 %v0_1000a2e6 to i8*
  %v2_1000a2e6 = load i8, i8* %v1_1000a2e6, align 1
  %v3_1000a2e6 = zext i8 %v2_1000a2e6 to i32
  %v5_1000a2e6 = and i32 %v4_1000a2e6, -256
  %v6_1000a2e6 = or i32 %v3_1000a2e6, %v5_1000a2e6
  store i32 %v6_1000a2e6, i32* @ecx, align 4
  store i32 %v6_1000a2e6, i32* %eax.global-to-local, align 4
  %v5_1000a2ee = icmp slt i32 %v6_1000a2e6, 9
  br i1 %v5_1000a2ee, label %dec_label_pc_1000a300, label %dec_label_pc_1000a2f0

dec_label_pc_1000a2f0:                            ; preds = %dec_label_pc_1000a2e6
  %v7_1000a2f3 = icmp sgt i32 %v6_1000a2e6, 13
  br i1 %v7_1000a2f3, label %dec_label_pc_1000a2f5, label %dec_label_pc_1000a2fa

dec_label_pc_1000a2f5:                            ; preds = %dec_label_pc_1000a2f0
  %v9_1000a2f5 = icmp eq i32 %v6_1000a2e6, 32
  %v1_1000a2f8 = icmp eq i1 %v9_1000a2f5, false
  br i1 %v1_1000a2f8, label %dec_label_pc_1000a300, label %dec_label_pc_1000a2fa

dec_label_pc_1000a2fa:                            ; preds = %dec_label_pc_1000a2f0, %dec_label_pc_1000a2f5
  %v10_1000a2fa = icmp eq i8 %stack_var_11.2, 0
  br i1 %v10_1000a2fa, label %dec_label_pc_1000a348, label %dec_label_pc_1000a300

dec_label_pc_1000a300:                            ; preds = %dec_label_pc_1000a2fa, %dec_label_pc_1000a2f5, %dec_label_pc_1000a2e6
  %v0_1000a300 = load i32, i32* @esi, align 4
  %v5_1000a306 = icmp slt i32 %v0_1000a300, 1023
  br i1 %v5_1000a306, label %dec_label_pc_1000a308, label %dec_label_pc_1000a311

dec_label_pc_1000a308:                            ; preds = %dec_label_pc_1000a300
  %v3_1000a308 = add i32 %v0_1000a300, ptrtoint (i8** @global_var_1002ba28.414 to i32)
  %v4_1000a308 = inttoptr i32 %v3_1000a308 to i8*
  store i8 %v2_1000a2e6, i8* %v4_1000a308, align 1
  %v0_1000a30e = load i32, i32* @esi, align 4
  %v1_1000a30e = add i32 %v0_1000a30e, 1
  store i32 %v1_1000a30e, i32* @esi, align 4
  br label %dec_label_pc_1000a32a

dec_label_pc_1000a311:                            ; preds = %dec_label_pc_1000a300
  %v10_1000a311 = icmp eq i8 %stack_var_7.0, 0
  %v1_1000a315 = icmp eq i1 %v10_1000a311, false
  br i1 %v1_1000a315, label %dec_label_pc_1000a32a, label %dec_label_pc_1000a317

dec_label_pc_1000a317:                            ; preds = %dec_label_pc_1000a311
  %v0_1000a317 = load i32, i32* @esp, align 4
  %v1_1000a317 = add i32 %v0_1000a317, -4
  %v2_1000a317 = inttoptr i32 %v1_1000a317 to i32*
  store i32 ptrtoint ([20 x i8]* @global_var_10023c30.415 to i32), i32* %v2_1000a317, align 4
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000a325 = call i32 @function_1000a060(i8 1)
  store i32 %v1_1000a325, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a32a

dec_label_pc_1000a32a:                            ; preds = %dec_label_pc_1000a317, %dec_label_pc_1000a311, %dec_label_pc_1000a308
  %stack_var_7.1 = phi i8 [ %stack_var_7.0, %dec_label_pc_1000a308 ], [ %stack_var_7.0, %dec_label_pc_1000a311 ], [ 1, %dec_label_pc_1000a317 ]
  %v0_1000a32a = load i32, i32* @esp, align 4
  %v1_1000a32a = add i32 %v0_1000a32a, -4
  %v2_1000a32a = inttoptr i32 %v1_1000a32a to i32*
  store i32 1, i32* %v2_1000a32a, align 4
  %v1_1000a32c = add i32 %v0_1000a32a, -8
  %v2_1000a32c = inttoptr i32 %v1_1000a32c to i32*
  store i32 1, i32* %v2_1000a32c, align 4
  %v0_1000a32e = load i32, i32* @ebx, align 4
  store i32 %v0_1000a32e, i32* @ecx, align 4
  %v2_1000a330 = call i32 @function_1000c030(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000a330, i32* %eax.global-to-local, align 4
  %v0_1000a335 = load i32, i32* @esp, align 4
  %v1_1000a335 = add i32 %v0_1000a335, -4
  %v2_1000a335 = inttoptr i32 %v1_1000a335 to i32*
  store i32 0, i32* %v2_1000a335, align 4
  %v1_1000a337 = add i32 %v0_1000a335, -8
  %v2_1000a337 = inttoptr i32 %v1_1000a337 to i32*
  store i32 1, i32* %v2_1000a337, align 4
  %v0_1000a339 = load i32, i32* @ebx, align 4
  store i32 %v0_1000a339, i32* @ecx, align 4
  %v2_1000a33b = call i32 @function_1000bff0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000a33b, i32* %eax.global-to-local, align 4
  %v1_1000a340 = icmp eq i32 %v2_1000a33b, 0
  %v1_1000a342 = icmp eq i1 %v1_1000a340, false
  br i1 %v1_1000a342, label %dec_label_pc_1000a2a3, label %dec_label_pc_1000a348

dec_label_pc_1000a348:                            ; preds = %dec_label_pc_1000a32a, %dec_label_pc_1000a2fa, %dec_label_pc_1000a2bf, %dec_label_pc_1000a2b6, %dec_label_pc_1000a2ad, %dec_label_pc_1000a2a3, %dec_label_pc_1000a287
  %v0_1000a348 = load i32, i32* @esp, align 4
  %v1_1000a348 = inttoptr i32 %v0_1000a348 to i32*
  %v2_1000a348 = load i32, i32* %v1_1000a348, align 4
  store i32 %v2_1000a348, i32* @edi, align 4
  %v0_1000a349 = load i32, i32* @esi, align 4
  %v1_1000a349 = add i32 %v0_1000a349, ptrtoint (i8** @global_var_1002ba28.414 to i32)
  %v2_1000a349 = inttoptr i32 %v1_1000a349 to i8*
  store i8 0, i8* %v2_1000a349, align 1
  %v0_1000a350 = load i32, i32* @esp, align 4
  %v1_1000a350 = inttoptr i32 %v0_1000a350 to i32*
  %v2_1000a350 = load i32, i32* %v1_1000a350, align 4
  store i32 %v2_1000a350, i32* @esi, align 4
  %v3_1000a350 = add i32 %v0_1000a350, 4
  store i32 ptrtoint (i8** @global_var_1002ba28.414 to i32), i32* %eax.global-to-local, align 4
  %v1_1000a356 = inttoptr i32 %v3_1000a350 to i32*
  %v2_1000a356 = load i32, i32* %v1_1000a356, align 4
  store i32 %v2_1000a356, i32* @ebx, align 4
  %v3_1000a356 = add i32 %v0_1000a350, 8
  %v1_1000a357 = inttoptr i32 %v3_1000a356 to i32*
  %v2_1000a357 = load i32, i32* %v1_1000a357, align 4
  store i32 %v2_1000a357, i32* @ebp, align 4
  ret i32 ptrtoint (i8** @global_var_1002ba28.414 to i32)

dec_label_pc_1000a35b:                            ; preds = %dec_label_pc_1000a27f, %dec_label_pc_1000a277
  %v0_1000a35f = load i32, i32* @ebx, align 4
  store i32 %v0_1000a35f, i32* @ecx, align 4
  store i8 %v3_1000a23e, i8* bitcast (i8** @global_var_1002ba28.414 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1002ba29.417 to i8*), align 4
  %v3_1000a36d = call i32 @function_1000c030(i32 1, i32 1)
  store i32 1, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_1002ba28.414 to i32), i32* %eax.global-to-local, align 4
  %v2_1000a379 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000a379, i32* @ebx, align 4
  %v2_1000a37a = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000a37a, i32* @ebp, align 4
  ret i32 ptrtoint (i8** @global_var_1002ba28.414 to i32)
}

define i32 @function_1000a380(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a380:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000a380 = load i32, i32* @ebp, align 4
  store i32 %v0_1000a380, i32* %stack_var_-4, align 4
  %v1_1000a386 = icmp eq i32 %arg1, 0
  br i1 %v1_1000a386, label %dec_label_pc_1000a3cf, label %dec_label_pc_1000a38a

dec_label_pc_1000a38a:                            ; preds = %dec_label_pc_1000a380
  %v0_1000a38a = load i32, i32* @ecx, align 4
  %v1_1000a38a = add i32 %v0_1000a38a, 24
  %v2_1000a38a = inttoptr i32 %v1_1000a38a to i32*
  %v3_1000a38a = load i32, i32* %v2_1000a38a, align 4
  store i32 %v3_1000a38a, i32* @eax, align 4
  %v12_1000a38d = icmp eq i32 %v3_1000a38a, %arg1
  %v1_1000a38f = icmp eq i1 %v12_1000a38d, false
  br i1 %v1_1000a38f, label %dec_label_pc_1000a3a2, label %dec_label_pc_1000a391

dec_label_pc_1000a391:                            ; preds = %dec_label_pc_1000a38a
  %v1_1000a391 = add i32 %arg1, 20
  %v2_1000a391 = inttoptr i32 %v1_1000a391 to i32*
  %v3_1000a391 = load i32, i32* %v2_1000a391, align 4
  store i32 %v3_1000a391, i32* %eax.global-to-local, align 4
  store i32 %v3_1000a391, i32* %v2_1000a38a, align 4
  store i32 0, i32* %v2_1000a391, align 4
  %v2_1000a39e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000a39e, i32* @ebp, align 4
  %v0_1000a39f = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000a39f

dec_label_pc_1000a3a2:                            ; preds = %dec_label_pc_1000a38a
  %v1_1000a3a2 = add i32 %v3_1000a38a, 20
  %v2_1000a3a2 = inttoptr i32 %v1_1000a3a2 to i32*
  %v3_1000a3a2 = load i32, i32* %v2_1000a3a2, align 4
  %v10_1000a3a2 = icmp eq i32 %v3_1000a3a2, 0
  br i1 %v10_1000a3a2, label %dec_label_pc_1000a3a2.dec_label_pc_1000a3c8_crit_edge, label %dec_label_pc_1000a3a8

dec_label_pc_1000a3a2.dec_label_pc_1000a3c8_crit_edge: ; preds = %dec_label_pc_1000a3a2
  %.pre = add i32 %arg1, 20
  %.pre7 = inttoptr i32 %.pre to i32*
  br label %dec_label_pc_1000a3c8

dec_label_pc_1000a3a8:                            ; preds = %dec_label_pc_1000a3a2, %dec_label_pc_1000a3af
  %v1_1000a3c5 = phi i32 [ %v0_1000a3af, %dec_label_pc_1000a3af ], [ %v3_1000a38a, %dec_label_pc_1000a3a2 ]
  %v0_1000a3af = phi i32 [ %v3_1000a3b1, %dec_label_pc_1000a3af ], [ %v3_1000a3a2, %dec_label_pc_1000a3a2 ]
  store i32 %v0_1000a3af, i32* @ecx, align 4
  %v12_1000a3ab = icmp eq i32 %v0_1000a3af, %arg1
  br i1 %v12_1000a3ab, label %dec_label_pc_1000a3c2, label %dec_label_pc_1000a3af

dec_label_pc_1000a3af:                            ; preds = %dec_label_pc_1000a3a8
  store i32 %v0_1000a3af, i32* @eax, align 4
  %v1_1000a3b1 = add i32 %v0_1000a3af, 20
  %v2_1000a3b1 = inttoptr i32 %v1_1000a3b1 to i32*
  %v3_1000a3b1 = load i32, i32* %v2_1000a3b1, align 4
  %v10_1000a3b1 = icmp eq i32 %v3_1000a3b1, 0
  %v1_1000a3b5 = icmp eq i1 %v10_1000a3b1, false
  br i1 %v1_1000a3b5, label %dec_label_pc_1000a3a8, label %dec_label_pc_1000a3b7

dec_label_pc_1000a3b7:                            ; preds = %dec_label_pc_1000a3af
  %v1_1000a3b7 = add i32 %arg1, 20
  %v2_1000a3b7 = inttoptr i32 %v1_1000a3b7 to i32*
  store i32 0, i32* %v2_1000a3b7, align 4
  %v2_1000a3be = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000a3be, i32* @ebp, align 4
  %v0_1000a3bf = load i32, i32* @eax, align 4
  ret i32 %v0_1000a3bf

dec_label_pc_1000a3c2:                            ; preds = %dec_label_pc_1000a3a8
  %v1_1000a3a8 = add i32 %v1_1000a3c5, 20
  %v2_1000a3a8 = inttoptr i32 %v1_1000a3a8 to i32*
  %v1_1000a3c2 = add i32 %arg1, 20
  %v2_1000a3c2 = inttoptr i32 %v1_1000a3c2 to i32*
  %v3_1000a3c2 = load i32, i32* %v2_1000a3c2, align 4
  store i32 %v3_1000a3c2, i32* @ecx, align 4
  store i32 %v3_1000a3c2, i32* %v2_1000a3a8, align 4
  br label %dec_label_pc_1000a3c8

dec_label_pc_1000a3c8:                            ; preds = %dec_label_pc_1000a3a2.dec_label_pc_1000a3c8_crit_edge, %dec_label_pc_1000a3c2
  %v2_1000a3c8.pre-phi = phi i32* [ %.pre7, %dec_label_pc_1000a3a2.dec_label_pc_1000a3c8_crit_edge ], [ %v2_1000a3c2, %dec_label_pc_1000a3c2 ]
  store i32 0, i32* %v2_1000a3c8.pre-phi, align 4
  %v2_1000a3cf.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000a3cf

dec_label_pc_1000a3cf:                            ; preds = %dec_label_pc_1000a3c8, %dec_label_pc_1000a380
  %v2_1000a3cf = phi i32 [ %v2_1000a3cf.pre, %dec_label_pc_1000a3c8 ], [ %v0_1000a380, %dec_label_pc_1000a380 ]
  store i32 %v2_1000a3cf, i32* @ebp, align 4
  %v0_1000a3d0 = load i32, i32* @eax, align 4
  ret i32 %v0_1000a3d0
}

define i32 @function_1000a3e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a3e0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000a3e4 = load i32, i32* @esi, align 4
  store i32 %v0_1000a3e4, i32* %stack_var_-12, align 4
  %v0_1000a3e5 = load i32, i32* @ecx, align 4
  store i32 %v0_1000a3e5, i32* %esi.global-to-local, align 4
  %v1_1000a3e7 = add i32 %v0_1000a3e5, 4
  %v2_1000a3e7 = inttoptr i32 %v1_1000a3e7 to i32*
  %v3_1000a3e7 = load i32, i32* %v2_1000a3e7, align 4
  store i32 %v3_1000a3e7, i32* %eax.global-to-local, align 4
  %v1_1000a3ec = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000a3e7)
  store i32 %v1_1000a3ec, i32* %eax.global-to-local, align 4
  %v0_1000a3f1 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a3f1 = add i32 %v0_1000a3f1, 8
  %v2_1000a3f1 = inttoptr i32 %v1_1000a3f1 to i32*
  %v3_1000a3f1 = load i32, i32* %v2_1000a3f1, align 4
  store i32 %v3_1000a3f1, i32* @ecx, align 4
  %v1_1000a3f5 = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000a3f1)
  store i32 %v1_1000a3f5, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v0_1000a400 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a400 = add i32 %v0_1000a400, 8
  %v2_1000a400 = inttoptr i32 %v1_1000a400 to i32*
  store i32 0, i32* %v2_1000a400, align 4
  %v0_1000a407 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000a407 = icmp eq i32 %v0_1000a407, 0
  %v1_1000a409 = icmp eq i1 %v1_1000a407, false
  br i1 %v1_1000a409, label %dec_label_pc_1000a410, label %dec_label_pc_1000a40b

dec_label_pc_1000a40b:                            ; preds = %dec_label_pc_1000a3e0
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000a410

dec_label_pc_1000a410:                            ; preds = %dec_label_pc_1000a40b, %dec_label_pc_1000a3e0
  %v0_1000a410 = phi i32 [ ptrtoint (i32* @global_var_10022600.47 to i32), %dec_label_pc_1000a40b ], [ %v0_1000a407, %dec_label_pc_1000a3e0 ]
  %v1_1000a411 = call i32 @function_10009450(i32 %v0_1000a410)
  store i32 %v1_1000a411, i32* %eax.global-to-local, align 4
  %v1_1000a416 = add i32 %v1_1000a411, 1
  %v1_1000a41a = call i32 @__malloc_crt(i32 %v1_1000a416)
  store i32 %v1_1000a41a, i32* %eax.global-to-local, align 4
  %v1_1000a422 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a422 = add i32 %v1_1000a422, 4
  %v3_1000a422 = inttoptr i32 %v2_1000a422 to i32*
  store i32 %v1_1000a41a, i32* %v3_1000a422, align 4
  %v0_1000a425 = call i32 @function_10009a40()
  store i32 %v0_1000a425, i32* %eax.global-to-local, align 4
  %v0_1000a42e = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a42e = add i32 %v0_1000a42e, 16
  %v2_1000a42e = inttoptr i32 %v1_1000a42e to i8*
  store i8 1, i8* %v2_1000a42e, align 1
  %v2_1000a432 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a432, i32* %esi.global-to-local, align 4
  %v0_1000a435 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000a435
}

define i32 @function_1000a440(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000a440:
  %stack_var_-5 = alloca i32, align 4
  store i32 %arg2, i32* @eax, align 4
  %v2_1000a44e = ptrtoint i32* %stack_var_-5 to i32
  store i32 %v2_1000a44e, i32* @edx, align 4
  store i32 ptrtoint (i32* @global_var_1002be40.418 to i32), i32* @ecx, align 4
  store i32 0, i32* %stack_var_-5, align 4
  %v5_1000a45b = call i32 @function_1000f850(i32* nonnull %stack_var_-5, i32 %arg1, i32 %arg2, i32 0)
  %v4_1000a460 = trunc i32 %v5_1000a45b to i8
  %v5_1000a460 = icmp eq i8 %v4_1000a460, 0
  %v1_1000a462 = icmp eq i1 %v5_1000a460, false
  br i1 %v1_1000a462, label %dec_label_pc_1000a473, label %dec_label_pc_1000a464

dec_label_pc_1000a464:                            ; preds = %dec_label_pc_1000a440
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v3_1000a46e = call i32 @function_1000a060(i8 ptrtoint ([32 x i8]* @global_var_10023c44.419 to i8))
  br label %dec_label_pc_1000a473

dec_label_pc_1000a473:                            ; preds = %dec_label_pc_1000a464, %dec_label_pc_1000a440
  %v5_1000a473 = phi i32 [ %v3_1000a46e, %dec_label_pc_1000a464 ], [ %v5_1000a45b, %dec_label_pc_1000a440 ]
  %v3_1000a473 = load i32, i32* %stack_var_-5, align 4
  %v4_1000a473 = and i32 %v3_1000a473, 255
  %v6_1000a473 = and i32 %v5_1000a473, -256
  %v7_1000a473 = or i32 %v4_1000a473, %v6_1000a473
  ret i32 %v7_1000a473
}

define i32 @function_1000a480(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a480:
  %v0_1000a483 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a483, i32* @ecx, align 4
  store i32 %arg1, i32* @ebp, align 4
  ret i32 %v0_1000a483
}

define i32 @function_1000a4a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a4a0:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000a4a3 = load i32, i32* @ecx, align 4
  %v4_1000a4a3 = ptrtoint i32* %stack_var_-8 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a4a3, i32* %esi.global-to-local, align 4
  %v3_1000a4a9 = and i32 %v0_1000a4a3, -16777216
  %v11_1000a4a9 = inttoptr i32 %v0_1000a4a3 to i32*
  store i32 %v3_1000a4a9, i32* %v11_1000a4a9, align 4
  store i32 0, i32* @ecx, align 4
  %v0_1000a4b1 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4b1 = trunc i32 %v0_1000a4b1 to i8
  %v2_1000a4b1 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000a4b1 = add i32 %v2_1000a4b1, 3
  %v4_1000a4b1 = inttoptr i32 %v3_1000a4b1 to i8*
  store i8 %v1_1000a4b1, i8* %v4_1000a4b1, align 1
  %v0_1000a4b4 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4b4 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4b4 = add i32 %v1_1000a4b4, 24
  %v3_1000a4b4 = inttoptr i32 %v2_1000a4b4 to i32*
  store i32 %v0_1000a4b4, i32* %v3_1000a4b4, align 4
  %v0_1000a4b7 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4b7 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4b7 = add i32 %v1_1000a4b7, 20
  %v3_1000a4b7 = inttoptr i32 %v2_1000a4b7 to i32*
  store i32 %v0_1000a4b7, i32* %v3_1000a4b7, align 4
  %v0_1000a4ba = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4ba = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4ba = add i32 %v1_1000a4ba, 28
  %v3_1000a4ba = inttoptr i32 %v2_1000a4ba to i32*
  store i32 %v0_1000a4ba, i32* %v3_1000a4ba, align 4
  %v0_1000a4bd = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4bd = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4bd = add i32 %v1_1000a4bd, 4
  %v3_1000a4bd = inttoptr i32 %v2_1000a4bd to i32*
  store i32 %v0_1000a4bd, i32* %v3_1000a4bd, align 4
  %v0_1000a4c0 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4c0 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4c0 = add i32 %v1_1000a4c0, 8
  %v3_1000a4c0 = inttoptr i32 %v2_1000a4c0 to i32*
  store i32 %v0_1000a4c0, i32* %v3_1000a4c0, align 4
  %v0_1000a4c3 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4c3 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4c3 = add i32 %v1_1000a4c3, 12
  %v3_1000a4c3 = inttoptr i32 %v2_1000a4c3 to i32*
  store i32 %v0_1000a4c3, i32* %v3_1000a4c3, align 4
  %v0_1000a4c6 = load i32, i32* @ecx, align 4
  %v1_1000a4c6 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000a4c6 = add i32 %v1_1000a4c6, 16
  %v3_1000a4c6 = inttoptr i32 %v2_1000a4c6 to i32*
  store i32 %v0_1000a4c6, i32* %v3_1000a4c6, align 4
  store i32 -1, i32* %stack_var_-8, align 4
  %v0_1000a4d0 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a4d0, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000a4d9 = inttoptr i32 %v0_1000a4d0 to i32*
  %v2_1000a4d9 = load i32, i32* %v1_1000a4d9, align 4
  %v1_1000a4db = add i32 %v2_1000a4d9, 36
  %v2_1000a4db = inttoptr i32 %v1_1000a4db to i32*
  %v3_1000a4db = load i32, i32* %v2_1000a4db, align 4
  store i32 %v3_1000a4db, i32* @edx, align 4
  %v4_1000a4eb = load i32, i32* %stack_var_-8, align 4
  %v5_1000a4eb = xor i32 %v4_1000a4eb, %v0_1000a4d0
  %v1_1000a4ee = and i32 %v5_1000a4eb, 16777215
  store i32 %v1_1000a4ee, i32* @ecx, align 4
  %v8_1000a4f4 = load i32, i32* %esi.global-to-local, align 4
  %v9_1000a4f4 = inttoptr i32 %v8_1000a4f4 to i32*
  store i32 0, i32* %v9_1000a4f4, align 4
  %v0_1000a4f6 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a4f6 = trunc i32 %v0_1000a4f6 to i8
  %v2_1000a4f6 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000a4f6 = add i32 %v2_1000a4f6, 3
  %v4_1000a4f6 = inttoptr i32 %v3_1000a4f6 to i8*
  store i8 %v1_1000a4f6, i8* %v4_1000a4f6, align 1
  %v0_1000a4f9 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000a4f9 = sdiv i32 %v0_1000a4f9, 256
  %v1_1000a4fc = trunc i32 %v2_1000a4f9 to i16
  %v2_1000a4fc = load i32, i32* %esi.global-to-local, align 4
  %v3_1000a4fc = add i32 %v2_1000a4fc, 18
  %v4_1000a4fc = inttoptr i32 %v3_1000a4fc to i16*
  store i16 %v1_1000a4fc, i16* %v4_1000a4fc, align 2
  %v0_1000a500 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000a500, i32* %eax.global-to-local, align 4
  store i32 %v4_1000a4a3, i32* @esi, align 4
  ret i32 %v0_1000a500
}

define i32 @function_1000a510(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000a510:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-263 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000a510 = load i32, i32* @ebp, align 4
  store i32 %v0_1000a510, i32* %stack_var_-4, align 4
  %v4_1000a510 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000a510, i32* @ebp, align 4
  %v16_1000a513 = ptrtoint i32* %stack_var_-264 to i32
  %v0_1000a519 = load i32, i32* @ecx, align 4
  store i32 %v0_1000a519, i32* %eax.global-to-local, align 4
  %v1_1000a51e = icmp eq i32 %v0_1000a519, 0
  %v1_1000a520 = icmp eq i1 %v1_1000a51e, false
  br i1 %v1_1000a520, label %dec_label_pc_1000a528, label %dec_label_pc_1000a522

dec_label_pc_1000a522:                            ; preds = %dec_label_pc_1000a510
  store i32 %v0_1000a510, i32* @ebp, align 4
  ret i32 %v0_1000a519

dec_label_pc_1000a528:                            ; preds = %dec_label_pc_1000a510
  %v0_1000a528 = load i32, i32* @esi, align 4
  store i32 %v0_1000a528, i32* %stack_var_-268, align 4
  %v4_1000a528 = ptrtoint i32* %stack_var_-268 to i32
  %v4_1000a529 = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000a529, i32* @esi, align 4
  %v2_1000a52c = icmp eq i8* %arg1, null
  br i1 %v2_1000a52c, label %dec_label_pc_1000a648, label %dec_label_pc_1000a534

dec_label_pc_1000a534:                            ; preds = %dec_label_pc_1000a528
  %v3_1000a534 = load i8, i8* %arg1, align 1
  %v10_1000a534 = icmp eq i8 %v3_1000a534, 0
  br i1 %v10_1000a534, label %dec_label_pc_1000a648, label %dec_label_pc_1000a53d

dec_label_pc_1000a53d:                            ; preds = %dec_label_pc_1000a534
  %v2_1000a543 = ptrtoint i32* %stack_var_-263 to i32
  store i32 %v2_1000a543, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-264, align 4
  %v6_1000a553 = call i32* @_memset(i32* nonnull %stack_var_-263, i32 0, i32 255)
  %v8_1000a553 = ptrtoint i32* %v6_1000a553 to i32
  store i32 %v8_1000a553, i32* %eax.global-to-local, align 4
  %v4_1000a55b = call i8* @_strchr(i8* nonnull %arg1, i32 47)
  %v5_1000a55b = ptrtoint i8* %v4_1000a55b to i32
  store i32 %v5_1000a55b, i32* %eax.global-to-local, align 4
  store i32 %v4_1000a529, i32* @ebx, align 4
  %v1_1000a568 = icmp eq i8* %v4_1000a55b, null
  br i1 %v1_1000a568, label %dec_label_pc_1000a592, label %dec_label_pc_1000a56c

dec_label_pc_1000a56c:                            ; preds = %dec_label_pc_1000a53d
  %v3_1000a56c = sub i32 %v5_1000a55b, %v4_1000a529
  %v1_1000a56e = add i32 %v3_1000a56c, 1
  %v6_1000a574 = icmp slt i32 %v1_1000a56e, 256
  br i1 %v6_1000a574, label %dec_label_pc_1000a57b, label %dec_label_pc_1000a576

dec_label_pc_1000a576:                            ; preds = %dec_label_pc_1000a56c
  br label %dec_label_pc_1000a57b

dec_label_pc_1000a57b:                            ; preds = %dec_label_pc_1000a576, %dec_label_pc_1000a56c
  %storemerge = phi i32 [ 256, %dec_label_pc_1000a576 ], [ %v1_1000a56e, %dec_label_pc_1000a56c ]
  %v0_1000a57b = phi i32 [ 256, %dec_label_pc_1000a576 ], [ %v1_1000a56e, %dec_label_pc_1000a56c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v16_1000a513, i32* @ecx, align 4
  %v6_1000a584 = call i32 @function_10009a60(i32* nonnull %stack_var_-264, i32 %v4_1000a529, i32 %v0_1000a57b)
  store i32 %v6_1000a584, i32* %eax.global-to-local, align 4
  store i32 %v16_1000a513, i32* @ebx, align 4
  br label %dec_label_pc_1000a592

dec_label_pc_1000a592:                            ; preds = %dec_label_pc_1000a57b, %dec_label_pc_1000a53d
  %v0_1000a592 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a592, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_1000a59b = inttoptr i32 %v0_1000a592 to i32*
  %v2_1000a59b = load i32, i32* %v1_1000a59b, align 4
  %v1_1000a59d = add i32 %v2_1000a59b, 12
  %v2_1000a59d = inttoptr i32 %v1_1000a59d to i32*
  %v3_1000a59d = load i32, i32* %v2_1000a59d, align 4
  store i32 %v3_1000a59d, i32* @edx, align 4
  store i32 %v0_1000a592, i32* @ecx, align 4
  %v10_1000a5a8 = icmp eq i32 %v0_1000a592, -1
  %v1_1000a5ab = icmp eq i1 %v10_1000a5a8, false
  br i1 %v1_1000a5ab, label %dec_label_pc_1000a5b7, label %dec_label_pc_1000a5ad

dec_label_pc_1000a5ad:                            ; preds = %dec_label_pc_1000a592
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v2_1000a5b3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000a5b3, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000a5b7:                            ; preds = %dec_label_pc_1000a592
  store i32 %v0_1000a519, i32* %eax.global-to-local, align 4
  %v1_1000a5ba = add i32 %v0_1000a519, 24
  %v2_1000a5ba = inttoptr i32 %v1_1000a5ba to i32*
  %v3_1000a5ba = load i32, i32* %v2_1000a5ba, align 4
  store i32 %v3_1000a5ba, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  %v1_1000a5c0 = icmp eq i32 %v3_1000a5ba, 0
  br i1 %v1_1000a5c0, label %dec_label_pc_1000a5d9, label %dec_label_pc_1000a5c4

dec_label_pc_1000a5c4:                            ; preds = %dec_label_pc_1000a5b7, %dec_label_pc_1000a5d2
  %v0_1000a5d2 = phi i32 [ %v3_1000a5d2, %dec_label_pc_1000a5d2 ], [ %v3_1000a5ba, %dec_label_pc_1000a5b7 ]
  %v1_1000a5c4 = inttoptr i32 %v0_1000a5d2 to i32*
  %v2_1000a5c4 = load i32, i32* %v1_1000a5c4, align 4
  %v1_1000a5c6 = and i32 %v2_1000a5c4, 16777215
  store i32 %v1_1000a5c6, i32* @edx, align 4
  store i32 %v0_1000a5d2, i32* @edi, align 4
  %v12_1000a5ce = icmp eq i32 %v1_1000a5c6, %v0_1000a592
  br i1 %v12_1000a5ce, label %dec_label_pc_1000a632.loopexit, label %dec_label_pc_1000a5d2

dec_label_pc_1000a5d2:                            ; preds = %dec_label_pc_1000a5c4
  %v1_1000a5d2 = add i32 %v0_1000a5d2, 20
  %v2_1000a5d2 = inttoptr i32 %v1_1000a5d2 to i32*
  %v3_1000a5d2 = load i32, i32* %v2_1000a5d2, align 4
  store i32 %v3_1000a5d2, i32* %eax.global-to-local, align 4
  %v1_1000a5d5 = icmp eq i32 %v3_1000a5d2, 0
  %v1_1000a5d7 = icmp eq i1 %v1_1000a5d5, false
  br i1 %v1_1000a5d7, label %dec_label_pc_1000a5c4, label %dec_label_pc_1000a5d9.loopexit

dec_label_pc_1000a5d9.loopexit:                   ; preds = %dec_label_pc_1000a5d2
  br label %dec_label_pc_1000a5d9

dec_label_pc_1000a5d9:                            ; preds = %dec_label_pc_1000a5d9.loopexit, %dec_label_pc_1000a5b7
  %v0_1000a5eb18 = phi i32 [ %v3_1000a5d2, %dec_label_pc_1000a5d9.loopexit ], [ 0, %dec_label_pc_1000a5b7 ]
  store i32 %v0_1000a519, i32* @ecx, align 4
  %v1_1000a5dc = add i32 %v0_1000a519, 28
  %v2_1000a5dc = inttoptr i32 %v1_1000a5dc to i32*
  %v3_1000a5dc = load i32, i32* %v2_1000a5dc, align 4
  store i32 %v3_1000a5dc, i32* @ecx, align 4
  %v1_1000a5df = icmp eq i32 %v3_1000a5dc, 0
  br i1 %v1_1000a5df, label %dec_label_pc_1000a5eb, label %dec_label_pc_1000a5e3

dec_label_pc_1000a5e3:                            ; preds = %dec_label_pc_1000a5d9
  %v4_1000a5e6 = call i32 @function_1000a510(i8* nonnull %arg1, i32 0)
  store i32 %v4_1000a5e6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a5eb

dec_label_pc_1000a5eb:                            ; preds = %dec_label_pc_1000a5e3, %dec_label_pc_1000a5d9
  %v5_1000a5ef = phi i32 [ %v4_1000a5e6, %dec_label_pc_1000a5e3 ], [ %v0_1000a5eb18, %dec_label_pc_1000a5d9 ]
  %v1_1000a5eb = icmp eq i32 %v5_1000a5ef, 0
  %v1_1000a5ed = icmp eq i1 %v1_1000a5eb, false
  br i1 %v1_1000a5ed, label %dec_label_pc_1000a632, label %dec_label_pc_1000a5ef

dec_label_pc_1000a5ef:                            ; preds = %dec_label_pc_1000a5eb
  %v3_1000a5eb = trunc i32 %v5_1000a5ef to i8
  %v4_1000a5ef = trunc i32 %arg2 to i8
  %v17_1000a5ef = icmp eq i8 %v4_1000a5ef, %v3_1000a5eb
  br i1 %v17_1000a5ef, label %dec_label_pc_1000a64f, label %dec_label_pc_1000a5f4

dec_label_pc_1000a5f4:                            ; preds = %dec_label_pc_1000a5ef
  %v0_1000a5f4 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a5f4, i32* %eax.global-to-local, align 4
  %v1_1000a5fa = inttoptr i32 %v0_1000a5f4 to i32*
  %v2_1000a5fa = load i32, i32* %v1_1000a5fa, align 4
  store i32 %v0_1000a5f4, i32* @ecx, align 4
  %v1_1000a5fe = add i32 %v2_1000a5fa, 4
  %v2_1000a5fe = inttoptr i32 %v1_1000a5fe to i32*
  %v3_1000a5fe = load i32, i32* %v2_1000a5fe, align 4
  store i32 %v3_1000a5fe, i32* %eax.global-to-local, align 4
  %v0_1000a601 = load i32, i32* @esp, align 4
  %v1_1000a601 = add i32 %v0_1000a601, -4
  %v2_1000a601 = inttoptr i32 %v1_1000a601 to i32*
  store i32 36, i32* %v2_1000a601, align 4
  %v1_1000a605 = icmp eq i32 %v3_1000a5fe, 0
  br i1 %v1_1000a605, label %dec_label_pc_1000a613, label %dec_label_pc_1000a609

dec_label_pc_1000a609:                            ; preds = %dec_label_pc_1000a5f4
  %v0_1000a609 = load i32, i32* @ebx, align 4
  %v2_1000a609 = add i32 %v0_1000a601, -8
  %v3_1000a609 = inttoptr i32 %v2_1000a609 to i32*
  store i32 %v0_1000a609, i32* %v3_1000a609, align 4
  store i32 %v3_1000a5fe, i32* @ecx, align 4
  %v1_1000a60c = call i32 @function_1000a4a0(i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_1000a615

dec_label_pc_1000a613:                            ; preds = %dec_label_pc_1000a5f4
  br label %dec_label_pc_1000a615

dec_label_pc_1000a615:                            ; preds = %dec_label_pc_1000a613, %dec_label_pc_1000a609
  %v0_1000a621 = phi i32 [ 0, %dec_label_pc_1000a613 ], [ %v1_1000a60c, %dec_label_pc_1000a609 ]
  store i32 %v0_1000a621, i32* %eax.global-to-local, align 4
  %v0_1000a615 = load i32, i32* @edi, align 4
  %v1_1000a615 = icmp eq i32 %v0_1000a615, 0
  br i1 %v1_1000a615, label %dec_label_pc_1000a61e, label %dec_label_pc_1000a619

dec_label_pc_1000a619:                            ; preds = %dec_label_pc_1000a615
  %v2_1000a619 = add i32 %v0_1000a615, 20
  %v3_1000a619 = inttoptr i32 %v2_1000a619 to i32*
  store i32 %v0_1000a621, i32* %v3_1000a619, align 4
  br label %dec_label_pc_1000a624

dec_label_pc_1000a61e:                            ; preds = %dec_label_pc_1000a615
  store i32 %v0_1000a519, i32* @ecx, align 4
  store i32 %v0_1000a621, i32* %v2_1000a5ba, align 4
  br label %dec_label_pc_1000a624

dec_label_pc_1000a624:                            ; preds = %dec_label_pc_1000a61e, %dec_label_pc_1000a619
  store i32 %v0_1000a519, i32* @edx, align 4
  %v0_1000a627 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a627 = add i32 %v0_1000a627, 20
  %v2_1000a627 = inttoptr i32 %v1_1000a627 to i32*
  store i32 0, i32* %v2_1000a627, align 4
  %v0_1000a62e = load i32, i32* @edx, align 4
  %v1_1000a62e = add i32 %v0_1000a62e, 16
  %v2_1000a62e = inttoptr i32 %v1_1000a62e to i8*
  store i8 0, i8* %v2_1000a62e, align 1
  br label %dec_label_pc_1000a632

dec_label_pc_1000a632.loopexit:                   ; preds = %dec_label_pc_1000a5c4
  br label %dec_label_pc_1000a632

dec_label_pc_1000a632:                            ; preds = %dec_label_pc_1000a632.loopexit, %dec_label_pc_1000a624, %dec_label_pc_1000a5eb
  store i32 %v5_1000a55b, i32* @ecx, align 4
  br i1 %v1_1000a568, label %dec_label_pc_1000a632.dec_label_pc_1000a646_crit_edge, label %dec_label_pc_1000a639

dec_label_pc_1000a632.dec_label_pc_1000a646_crit_edge: ; preds = %dec_label_pc_1000a632
  %v0_1000a64c.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a646

dec_label_pc_1000a639:                            ; preds = %dec_label_pc_1000a632
  store i32 %arg2, i32* @edx, align 4
  %v2_1000a63c = add i32 %v5_1000a55b, 1
  store i32 %v2_1000a63c, i32* @ecx, align 4
  %v1_1000a63d = load i32, i32* @esp, align 4
  %v2_1000a63d = add i32 %v1_1000a63d, -4
  %v3_1000a63d = inttoptr i32 %v2_1000a63d to i32*
  store i32 %arg2, i32* %v3_1000a63d, align 4
  %v0_1000a63e = load i32, i32* @ecx, align 4
  %v2_1000a63e = add i32 %v1_1000a63d, -8
  %v3_1000a63e = inttoptr i32 %v2_1000a63e to i32*
  store i32 %v0_1000a63e, i32* %v3_1000a63e, align 4
  %v0_1000a63f = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a63f, i32* @ecx, align 4
  %v2_1000a641 = call i32 @function_1000a510(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000a641, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a646

dec_label_pc_1000a646:                            ; preds = %dec_label_pc_1000a632.dec_label_pc_1000a646_crit_edge, %dec_label_pc_1000a639
  %v0_1000a64c.pre = phi i32 [ %v0_1000a64c.pre.pre, %dec_label_pc_1000a632.dec_label_pc_1000a646_crit_edge ], [ %v2_1000a641, %dec_label_pc_1000a639 ]
  %v0_1000a646 = load i32, i32* @esp, align 4
  %v1_1000a646 = inttoptr i32 %v0_1000a646 to i32*
  %v2_1000a646 = load i32, i32* %v1_1000a646, align 4
  store i32 %v2_1000a646, i32* @edi, align 4
  %v3_1000a646 = add i32 %v0_1000a646, 4
  %v1_1000a647 = inttoptr i32 %v3_1000a646 to i32*
  %v2_1000a647 = load i32, i32* %v1_1000a647, align 4
  store i32 %v2_1000a647, i32* @ebx, align 4
  %v3_1000a647 = add i32 %v0_1000a646, 8
  %v2_1000a64b.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000a648

dec_label_pc_1000a648:                            ; preds = %dec_label_pc_1000a646, %dec_label_pc_1000a534, %dec_label_pc_1000a528
  %v0_1000a64c = phi i32 [ %v0_1000a64c.pre, %dec_label_pc_1000a646 ], [ %v0_1000a519, %dec_label_pc_1000a534 ], [ %v0_1000a519, %dec_label_pc_1000a528 ]
  %v2_1000a64b = phi i32 [ %v2_1000a64b.pre, %dec_label_pc_1000a646 ], [ %v0_1000a510, %dec_label_pc_1000a534 ], [ %v0_1000a510, %dec_label_pc_1000a528 ]
  %v0_1000a648 = phi i32 [ %v3_1000a647, %dec_label_pc_1000a646 ], [ %v4_1000a528, %dec_label_pc_1000a534 ], [ %v4_1000a528, %dec_label_pc_1000a528 ]
  %v1_1000a648 = inttoptr i32 %v0_1000a648 to i32*
  %v2_1000a648 = load i32, i32* %v1_1000a648, align 4
  store i32 %v2_1000a648, i32* @esi, align 4
  store i32 %v2_1000a64b, i32* @ebp, align 4
  ret i32 %v0_1000a64c

dec_label_pc_1000a64f:                            ; preds = %dec_label_pc_1000a5ef
  %v0_1000a64f = load i32, i32* @esp, align 4
  %v1_1000a64f = inttoptr i32 %v0_1000a64f to i32*
  %v2_1000a64f = load i32, i32* %v1_1000a64f, align 4
  store i32 %v2_1000a64f, i32* @edi, align 4
  %v3_1000a64f = add i32 %v0_1000a64f, 4
  %v1_1000a650 = inttoptr i32 %v3_1000a64f to i32*
  %v2_1000a650 = load i32, i32* %v1_1000a650, align 4
  store i32 %v2_1000a650, i32* @ebx, align 4
  %v3_1000a650 = add i32 %v0_1000a64f, 8
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000a653 = inttoptr i32 %v3_1000a650 to i32*
  %v2_1000a653 = load i32, i32* %v1_1000a653, align 4
  store i32 %v2_1000a653, i32* @esi, align 4
  %v2_1000a656 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000a656, i32* @ebp, align 4
  ret i32 0
}

define i32 @function_1000a660(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000a660:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v1_1000a669 = inttoptr i32 %arg1 to i8*
  %v3_1000a669 = call i32 @function_1000a510(i8* %v1_1000a669, i32 0)
  %v1_1000a66e = icmp eq i32 %v3_1000a669, 0
  br i1 %v1_1000a66e, label %dec_label_pc_1000a6b9, label %dec_label_pc_1000a672

dec_label_pc_1000a672:                            ; preds = %dec_label_pc_1000a660
  %v1_1000a672 = add i32 %v3_1000a669, 16
  %v2_1000a672 = inttoptr i32 %v1_1000a672 to i8*
  %v3_1000a672 = load i8, i8* %v2_1000a672, align 1
  %v4_1000a672 = sext i8 %v3_1000a672 to i32
  %v1_1000a676 = add nsw i32 %v4_1000a672, -1
  store i32 %v1_1000a676, i32* @ecx, align 4
  store i32 %v1_1000a676, i32* @2, align 4
  switch i32 %v4_1000a672, label %dec_label_pc_1000a6b2 [
    i32 1, label %dec_label_pc_1000a683
    i32 3, label %dec_label_pc_1000a6a3
    i32 5, label %dec_label_pc_1000a693
    i32 7, label %dec_label_pc_1000a6ac
  ]

dec_label_pc_1000a683:                            ; preds = %dec_label_pc_1000a672
  %v1_1000a683 = add i32 %v3_1000a669, 4
  %v2_1000a683 = inttoptr i32 %v1_1000a683 to i32*
  %v3_1000a683 = load i32, i32* %v2_1000a683, align 4
  store i32 %v3_1000a683, i32* @ecx, align 4
  %v1_1000a687 = call i32 @function_100128e0(i32 %v3_1000a683)
  %v2_1000a68f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a68f, i32* @ebp, align 4
  ret i32 %v1_1000a687

dec_label_pc_1000a693:                            ; preds = %dec_label_pc_1000a672
  %v1_1000a693 = add i32 %v3_1000a669, 8
  %v2_1000a693 = inttoptr i32 %v1_1000a693 to i32*
  %v3_1000a693 = load i32, i32* %v2_1000a693, align 4
  %v1_1000a697 = call i32 @function_10012c91(i32 %v3_1000a693)
  %v2_1000a69f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a69f, i32* @ebp, align 4
  ret i32 %v1_1000a697

dec_label_pc_1000a6a3:                            ; preds = %dec_label_pc_1000a672
  %v1_1000a6a3 = add i32 %v3_1000a669, 12
  %v2_1000a6a3 = inttoptr i32 %v1_1000a6a3 to i32*
  %v3_1000a6a3 = load i32, i32* %v2_1000a6a3, align 4
  %v4_1000a6a3 = call i32 @__asm_cvttss2si(i32 %v3_1000a6a3)
  %v2_1000a6a8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a6a8, i32* @ebp, align 4
  ret i32 %v4_1000a6a3

dec_label_pc_1000a6ac:                            ; preds = %dec_label_pc_1000a672
  %v2_1000a6ae = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a6ae, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000a6b2:                            ; preds = %dec_label_pc_1000a672
  %v1_1000a6b2 = add i32 %v3_1000a669, 12
  %v2_1000a6b2 = inttoptr i32 %v1_1000a6b2 to i32*
  %v3_1000a6b2 = load i32, i32* %v2_1000a6b2, align 4
  %v2_1000a6b5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a6b5, i32* @ebp, align 4
  ret i32 %v3_1000a6b2

dec_label_pc_1000a6b9:                            ; preds = %dec_label_pc_1000a660
  %v2_1000a6bc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000a6bc, i32* @ebp, align 4
  ret i32 %arg2
}

define i32 @function_1000a6e0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1000a6e0:
  %v1_1000a6e9 = inttoptr i32 %arg1 to i8*
  %v3_1000a6e9 = call i32 @function_1000a510(i8* %v1_1000a6e9, i32 1)
  %v1_1000a6ee = icmp eq i32 %v3_1000a6e9, 0
  br i1 %v1_1000a6ee, label %dec_label_pc_1000a6fd, label %dec_label_pc_1000a6f2

dec_label_pc_1000a6f2:                            ; preds = %dec_label_pc_1000a6e0
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %v3_1000a6e9, i32* @ecx, align 4
  %v1_1000a6f8 = call i32 @function_1000a3e0(i32 %tmp)
  br label %dec_label_pc_1000a6fd

dec_label_pc_1000a6fd:                            ; preds = %dec_label_pc_1000a6f2, %dec_label_pc_1000a6e0
  %v0_1000a6fe = phi i32 [ %v1_1000a6f8, %dec_label_pc_1000a6f2 ], [ 0, %dec_label_pc_1000a6e0 ]
  ret i32 %v0_1000a6fe
}

define i32 @function_1000a710() local_unnamed_addr {
dec_label_pc_1000a710:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_1000a711 = load i32, i32* inttoptr (i32 268575264 to i32*), align 32
  store i32 %v0_1000a711, i32* %ebx.global-to-local, align 4
  %v0_1000a719 = load i32, i32* @ecx, align 4
  store i32 %v0_1000a719, i32* @esi, align 4
  %v0_1000a71b = call i32 @KeyValuesSystem()
  store i32 %v0_1000a71b, i32* %eax.global-to-local, align 4
  %v1_1000a71d = inttoptr i32 %v0_1000a71b to i32*
  %v2_1000a71d = load i32, i32* %v1_1000a71d, align 4
  store i32 %v2_1000a71d, i32* %edx.global-to-local, align 4
  store i32 %v0_1000a71b, i32* @ecx, align 4
  %v1_1000a721 = add i32 %v2_1000a71d, 4
  %v2_1000a721 = inttoptr i32 %v1_1000a721 to i32*
  %v3_1000a721 = load i32, i32* %v2_1000a721, align 4
  store i32 %v3_1000a721, i32* %eax.global-to-local, align 4
  %v1_1000a72a = icmp eq i32 %v3_1000a721, 0
  br i1 %v1_1000a72a, label %dec_label_pc_1000a768, label %dec_label_pc_1000a72e

dec_label_pc_1000a72e:                            ; preds = %dec_label_pc_1000a710
  %v1_1000a72e = icmp eq i32 %v0_1000a719, 0
  br i1 %v1_1000a72e, label %dec_label_pc_1000a757, label %dec_label_pc_1000a732

dec_label_pc_1000a732:                            ; preds = %dec_label_pc_1000a72e
  %v0_1000a732 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a732, i32* %eax.global-to-local, align 4
  %v1_1000a734 = add i32 %v0_1000a719, 18
  %v2_1000a734 = inttoptr i32 %v1_1000a734 to i16*
  %v3_1000a734 = load i16, i16* %v2_1000a734, align 2
  %v4_1000a734 = zext i16 %v3_1000a734 to i32
  store i32 %v4_1000a734, i32* @ecx, align 4
  %v1_1000a738 = add i32 %v0_1000a719, 3
  %v2_1000a738 = inttoptr i32 %v1_1000a738 to i8*
  %v3_1000a738 = load i8, i8* %v2_1000a738, align 1
  %v4_1000a738 = zext i8 %v3_1000a738 to i32
  store i32 %v4_1000a738, i32* %ebx.global-to-local, align 4
  %v1_1000a73c = inttoptr i32 %v0_1000a732 to i32*
  %v2_1000a73c = load i32, i32* %v1_1000a73c, align 4
  store i32 %v2_1000a73c, i32* %edx.global-to-local, align 4
  %v1_1000a73e = add i32 %v2_1000a73c, 16
  %v2_1000a73e = inttoptr i32 %v1_1000a73e to i32*
  %v3_1000a73e = load i32, i32* %v2_1000a73e, align 4
  store i32 %v3_1000a73e, i32* %edx.global-to-local, align 4
  store i32 %v3_1000a721, i32* @ecx, align 4
  %v1_1000a74e = call i32 @function_1000a4a0(i32 %v0_1000a732)
  store i32 %v1_1000a74e, i32* %eax.global-to-local, align 4
  store i32 %v1_1000a74e, i32* @edi, align 4
  br label %dec_label_pc_1000a76a

dec_label_pc_1000a757:                            ; preds = %dec_label_pc_1000a72e
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_1000a721, i32* @ecx, align 4
  %v1_1000a75f = call i32 @function_1000a4a0(i32 ptrtoint (i32* @global_var_10022600.47 to i32))
  store i32 %v1_1000a75f, i32* %eax.global-to-local, align 4
  store i32 %v1_1000a75f, i32* @edi, align 4
  br label %dec_label_pc_1000a76a

dec_label_pc_1000a768:                            ; preds = %dec_label_pc_1000a710
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_1000a76a

dec_label_pc_1000a76a:                            ; preds = %dec_label_pc_1000a768, %dec_label_pc_1000a757, %dec_label_pc_1000a732
  %v2_1000a76d = phi i32 [ 0, %dec_label_pc_1000a768 ], [ %v1_1000a75f, %dec_label_pc_1000a757 ], [ %v1_1000a74e, %dec_label_pc_1000a732 ]
  %v1_1000a76a = add i32 %v0_1000a719, 16
  %v2_1000a76a = inttoptr i32 %v1_1000a76a to i8*
  %v3_1000a76a = load i8, i8* %v2_1000a76a, align 1
  %v4_1000a76a = zext i8 %v3_1000a76a to i32
  %v6_1000a76a = and i32 %v2_1000a76d, -256
  %v7_1000a76a = or i32 %v4_1000a76a, %v6_1000a76a
  store i32 %v7_1000a76a, i32* %eax.global-to-local, align 4
  %v3_1000a76d = add i32 %v2_1000a76d, 16
  %v4_1000a76d = inttoptr i32 %v3_1000a76d to i8*
  store i8 %v3_1000a76a, i8* %v4_1000a76d, align 1
  %v3_1000a770 = load i8, i8* %v2_1000a76a, align 1
  %v4_1000a770 = sext i8 %v3_1000a770 to i32
  %v1_1000a774 = add nsw i32 %v4_1000a770, -1
  store i32 %v1_1000a774, i32* %eax.global-to-local, align 4
  store i32 %v1_1000a774, i32* @4, align 4
  switch i32 %v4_1000a770, label %dec_label_pc_1000a848 [
    i32 1, label %dec_label_pc_1000a785
    i32 2, label %dec_label_pc_1000a7fb
    i32 3, label %dec_label_pc_1000a803
    i32 4, label %dec_label_pc_1000a80b
    i32 5, label %dec_label_pc_1000a7b5
    i32 6, label %dec_label_pc_1000a813
    i32 7, label %dec_label_pc_1000a82f
  ]

dec_label_pc_1000a785:                            ; preds = %dec_label_pc_1000a76a
  %v1_1000a785 = add i32 %v0_1000a719, 4
  %v2_1000a785 = inttoptr i32 %v1_1000a785 to i32*
  %v3_1000a785 = load i32, i32* %v2_1000a785, align 4
  store i32 %v3_1000a785, i32* %eax.global-to-local, align 4
  %v1_1000a788 = icmp eq i32 %v3_1000a785, 0
  br i1 %v1_1000a788, label %dec_label_pc_1000a848, label %dec_label_pc_1000a790

dec_label_pc_1000a790:                            ; preds = %dec_label_pc_1000a785
  %v1_1000a790 = load i32, i32* @esp, align 4
  %v2_1000a790 = add i32 %v1_1000a790, -4
  %v3_1000a790 = inttoptr i32 %v2_1000a790 to i32*
  store i32 %v3_1000a785, i32* %v3_1000a790, align 4
  %v1_1000a791 = call i32 @function_10009450(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a791, i32* %eax.global-to-local, align 4
  %v1_1000a796 = add i32 %v1_1000a791, 1
  store i32 %v1_1000a796, i32* %ebx.global-to-local, align 4
  %v1_1000a799 = load i32, i32* @esp, align 4
  %v2_1000a799 = add i32 %v1_1000a799, -4
  %v3_1000a799 = inttoptr i32 %v2_1000a799 to i32*
  store i32 %v1_1000a796, i32* %v3_1000a799, align 4
  %v1_1000a79a = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a79a, i32* %eax.global-to-local, align 4
  %v1_1000a79f = load i32, i32* @edi, align 4
  %v2_1000a79f = add i32 %v1_1000a79f, 4
  %v3_1000a79f = inttoptr i32 %v2_1000a79f to i32*
  store i32 %v1_1000a79a, i32* %v3_1000a79f, align 4
  %v3_1000a7a2 = load i32, i32* %v2_1000a785, align 4
  store i32 %v3_1000a7a2, i32* @ecx, align 4
  %v0_1000a7a5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000a7a5 = load i32, i32* @esp, align 4
  %v2_1000a7a5 = add i32 %v1_1000a7a5, -4
  %v3_1000a7a5 = inttoptr i32 %v2_1000a7a5 to i32*
  store i32 %v0_1000a7a5, i32* %v3_1000a7a5, align 4
  %v0_1000a7a6 = load i32, i32* @ecx, align 4
  %v2_1000a7a6 = add i32 %v1_1000a7a5, -8
  %v3_1000a7a6 = inttoptr i32 %v2_1000a7a6 to i32*
  store i32 %v0_1000a7a6, i32* %v3_1000a7a6, align 4
  %v0_1000a7a7 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000a7a7 = add i32 %v1_1000a7a5, -12
  %v3_1000a7a7 = inttoptr i32 %v2_1000a7a7 to i32*
  store i32 %v0_1000a7a7, i32* %v3_1000a7a7, align 4
  %v0_1000a7a8 = call i32 @function_10009a40()
  store i32 %v0_1000a7a8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a848

dec_label_pc_1000a7b5:                            ; preds = %dec_label_pc_1000a76a
  %v1_1000a7b5 = add i32 %v0_1000a719, 8
  %v2_1000a7b5 = inttoptr i32 %v1_1000a7b5 to i32*
  %v3_1000a7b5 = load i32, i32* %v2_1000a7b5, align 4
  store i32 %v3_1000a7b5, i32* %eax.global-to-local, align 4
  %v1_1000a7b8 = icmp eq i32 %v3_1000a7b5, 0
  br i1 %v1_1000a7b8, label %dec_label_pc_1000a848, label %dec_label_pc_1000a7c0

dec_label_pc_1000a7c0:                            ; preds = %dec_label_pc_1000a7b5
  %v1_1000a7c0 = add i32 %v3_1000a7b5, 2
  store i32 %v1_1000a7c0, i32* %edx.global-to-local, align 4
  %v4_1000a7c3.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000a7c3

dec_label_pc_1000a7c3:                            ; preds = %dec_label_pc_1000a7c3, %dec_label_pc_1000a7c0
  %v4_1000a7c3 = phi i32 [ %v6_1000a7c3, %dec_label_pc_1000a7c3 ], [ %v4_1000a7c3.pre, %dec_label_pc_1000a7c0 ]
  %v0_1000a7c6 = phi i32 [ %v1_1000a7c6, %dec_label_pc_1000a7c3 ], [ %v3_1000a7b5, %dec_label_pc_1000a7c0 ]
  %v1_1000a7c3 = inttoptr i32 %v0_1000a7c6 to i16*
  %v2_1000a7c3 = load i16, i16* %v1_1000a7c3, align 2
  %v3_1000a7c3 = zext i16 %v2_1000a7c3 to i32
  %v5_1000a7c3 = and i32 %v4_1000a7c3, -65536
  %v6_1000a7c3 = or i32 %v3_1000a7c3, %v5_1000a7c3
  store i32 %v6_1000a7c3, i32* @ecx, align 4
  %v1_1000a7c6 = add i32 %v0_1000a7c6, 2
  store i32 %v1_1000a7c6, i32* %eax.global-to-local, align 4
  %v5_1000a7c9 = icmp eq i16 %v2_1000a7c3, 0
  %v1_1000a7cc = icmp eq i1 %v5_1000a7c9, false
  br i1 %v1_1000a7cc, label %dec_label_pc_1000a7c3, label %dec_label_pc_1000a7ce

dec_label_pc_1000a7ce:                            ; preds = %dec_label_pc_1000a7c3
  %v2_1000a7ce = sub i32 %v1_1000a7c6, %v1_1000a7c0
  %v2_1000a7d0 = sdiv i32 %v2_1000a7ce, 2
  store i32 %v2_1000a7d0, i32* %ebx.global-to-local, align 4
  %v1_1000a7d6 = add nsw i32 %v2_1000a7d0, 1
  %not. = icmp ugt i32 %v1_1000a7d6, -2147483648
  %v7_1000a7de = zext i1 %not. to i32
  store i32 %v7_1000a7de, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @ecx, align 4
  %v1_1000a7e7 = load i32, i32* @esp, align 4
  %v2_1000a7e7 = add i32 %v1_1000a7e7, -4
  %v3_1000a7e7 = inttoptr i32 %v2_1000a7e7 to i32*
  store i32 -1, i32* %v3_1000a7e7, align 4
  %v1_1000a7e8 = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a7e8, i32* %eax.global-to-local, align 4
  %v0_1000a7ed = load i32, i32* %ebx.global-to-local, align 4
  %factor = mul i32 %v0_1000a7ed, 2
  %v4_1000a7ed = add i32 %factor, 2
  store i32 %v4_1000a7ed, i32* @ecx, align 4
  %v1_1000a7f1 = load i32, i32* @edi, align 4
  %v2_1000a7f1 = add i32 %v1_1000a7f1, 8
  %v3_1000a7f1 = inttoptr i32 %v2_1000a7f1 to i32*
  store i32 %v1_1000a7e8, i32* %v3_1000a7f1, align 4
  %v3_1000a7f4 = load i32, i32* %v2_1000a7b5, align 4
  store i32 %v3_1000a7f4, i32* %edx.global-to-local, align 4
  %v0_1000a7f7 = load i32, i32* @ecx, align 4
  %v1_1000a7f7 = load i32, i32* @esp, align 4
  %v2_1000a7f7 = add i32 %v1_1000a7f7, -4
  %v3_1000a7f7 = inttoptr i32 %v2_1000a7f7 to i32*
  store i32 %v0_1000a7f7, i32* %v3_1000a7f7, align 4
  %v0_1000a7f8 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000a7f8 = add i32 %v1_1000a7f7, -8
  %v3_1000a7f8 = inttoptr i32 %v2_1000a7f8 to i32*
  store i32 %v0_1000a7f8, i32* %v3_1000a7f8, align 4
  br label %dec_label_pc_1000a83f

dec_label_pc_1000a7fb:                            ; preds = %dec_label_pc_1000a76a
  %v1_1000a7fb = add i32 %v0_1000a719, 12
  %v2_1000a7fb = inttoptr i32 %v1_1000a7fb to i32*
  %v3_1000a7fb = load i32, i32* %v2_1000a7fb, align 4
  store i32 %v3_1000a7fb, i32* %eax.global-to-local, align 4
  %v1_1000a7fe = load i32, i32* @edi, align 4
  %v2_1000a7fe = add i32 %v1_1000a7fe, 12
  %v3_1000a7fe = inttoptr i32 %v2_1000a7fe to i32*
  store i32 %v3_1000a7fb, i32* %v3_1000a7fe, align 4
  br label %dec_label_pc_1000a848

dec_label_pc_1000a803:                            ; preds = %dec_label_pc_1000a76a
  %v2_1000a803 = add i32 %v0_1000a719, 12
  %tmp19 = inttoptr i32 %v2_1000a803 to i32*
  %v4_1000a80318 = load i32, i32* %tmp19, align 4
  %v2_1000a806 = load i32, i32* @edi, align 4
  %v3_1000a806 = add i32 %v2_1000a806, 12
  %tmp20 = inttoptr i32 %v3_1000a806 to i32*
  store i32 %v4_1000a80318, i32* %tmp20, align 4
  br label %dec_label_pc_1000a848

dec_label_pc_1000a80b:                            ; preds = %dec_label_pc_1000a76a
  %v1_1000a80b = add i32 %v0_1000a719, 12
  %v2_1000a80b = inttoptr i32 %v1_1000a80b to i32*
  %v3_1000a80b = load i32, i32* %v2_1000a80b, align 4
  store i32 %v3_1000a80b, i32* @ecx, align 4
  %v1_1000a80e = load i32, i32* @edi, align 4
  %v2_1000a80e = add i32 %v1_1000a80e, 12
  %v3_1000a80e = inttoptr i32 %v2_1000a80e to i32*
  store i32 %v3_1000a80b, i32* %v3_1000a80e, align 4
  br label %dec_label_pc_1000a848

dec_label_pc_1000a813:                            ; preds = %dec_label_pc_1000a76a
  %v1_1000a813 = add i32 %v0_1000a719, 12
  %v2_1000a813 = inttoptr i32 %v1_1000a813 to i8*
  %v3_1000a813 = load i8, i8* %v2_1000a813, align 1
  %v4_1000a813 = zext i8 %v3_1000a813 to i32
  store i32 %v4_1000a813, i32* %edx.global-to-local, align 4
  %v2_1000a817 = load i32, i32* @edi, align 4
  %v3_1000a817 = add i32 %v2_1000a817, 12
  %v4_1000a817 = inttoptr i32 %v3_1000a817 to i8*
  store i8 %v3_1000a813, i8* %v4_1000a817, align 1
  %v1_1000a81a = add i32 %v0_1000a719, 13
  %v2_1000a81a = inttoptr i32 %v1_1000a81a to i8*
  %v3_1000a81a = load i8, i8* %v2_1000a81a, align 1
  %v4_1000a81a = zext i8 %v3_1000a81a to i32
  %v5_1000a81a = load i32, i32* %eax.global-to-local, align 4
  %v6_1000a81a = and i32 %v5_1000a81a, -256
  %v7_1000a81a = or i32 %v6_1000a81a, %v4_1000a81a
  store i32 %v7_1000a81a, i32* %eax.global-to-local, align 4
  %v2_1000a81d = load i32, i32* @edi, align 4
  %v3_1000a81d = add i32 %v2_1000a81d, 13
  %v4_1000a81d = inttoptr i32 %v3_1000a81d to i8*
  store i8 %v3_1000a81a, i8* %v4_1000a81d, align 1
  %v1_1000a820 = add i32 %v0_1000a719, 14
  %v2_1000a820 = inttoptr i32 %v1_1000a820 to i8*
  %v3_1000a820 = load i8, i8* %v2_1000a820, align 1
  %v4_1000a820 = zext i8 %v3_1000a820 to i32
  %v5_1000a820 = load i32, i32* @ecx, align 4
  %v6_1000a820 = and i32 %v5_1000a820, -256
  %v7_1000a820 = or i32 %v6_1000a820, %v4_1000a820
  store i32 %v7_1000a820, i32* @ecx, align 4
  %v2_1000a823 = load i32, i32* @edi, align 4
  %v3_1000a823 = add i32 %v2_1000a823, 14
  %v4_1000a823 = inttoptr i32 %v3_1000a823 to i8*
  store i8 %v3_1000a820, i8* %v4_1000a823, align 1
  %v1_1000a826 = add i32 %v0_1000a719, 15
  %v2_1000a826 = inttoptr i32 %v1_1000a826 to i8*
  %v3_1000a826 = load i8, i8* %v2_1000a826, align 1
  %v4_1000a826 = zext i8 %v3_1000a826 to i32
  store i32 %v4_1000a826, i32* %edx.global-to-local, align 4
  %v2_1000a82a = load i32, i32* @edi, align 4
  %v3_1000a82a = add i32 %v2_1000a82a, 15
  %v4_1000a82a = inttoptr i32 %v3_1000a82a to i8*
  store i8 %v3_1000a826, i8* %v4_1000a82a, align 1
  br label %dec_label_pc_1000a848

dec_label_pc_1000a82f:                            ; preds = %dec_label_pc_1000a76a
  %v0_1000a82f = load i32, i32* @esp, align 4
  %v1_1000a82f = add i32 %v0_1000a82f, -4
  %v2_1000a82f = inttoptr i32 %v1_1000a82f to i32*
  store i32 8, i32* %v2_1000a82f, align 4
  %v1_1000a831 = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a831, i32* %eax.global-to-local, align 4
  %v1_1000a836 = load i32, i32* @edi, align 4
  %v2_1000a836 = add i32 %v1_1000a836, 4
  %v3_1000a836 = inttoptr i32 %v2_1000a836 to i32*
  store i32 %v1_1000a831, i32* %v3_1000a836, align 4
  %v1_1000a839 = add i32 %v0_1000a719, 4
  %v2_1000a839 = inttoptr i32 %v1_1000a839 to i32*
  %v3_1000a839 = load i32, i32* %v2_1000a839, align 4
  store i32 %v3_1000a839, i32* @ecx, align 4
  %v0_1000a83c = load i32, i32* @esp, align 4
  %v1_1000a83c = add i32 %v0_1000a83c, -4
  %v2_1000a83c = inttoptr i32 %v1_1000a83c to i32*
  store i32 8, i32* %v2_1000a83c, align 4
  %v0_1000a83e = load i32, i32* @ecx, align 4
  %v2_1000a83e = add i32 %v0_1000a83c, -8
  %v3_1000a83e = inttoptr i32 %v2_1000a83e to i32*
  store i32 %v0_1000a83e, i32* %v3_1000a83e, align 4
  br label %dec_label_pc_1000a83f

dec_label_pc_1000a83f:                            ; preds = %dec_label_pc_1000a82f, %dec_label_pc_1000a7ce
  %storemerge = phi i32 [ %v2_1000a7f8, %dec_label_pc_1000a7ce ], [ %v2_1000a83e, %dec_label_pc_1000a82f ]
  %v0_1000a83f = load i32, i32* %eax.global-to-local, align 4
  %v2_1000a83f = add i32 %storemerge, -4
  %v3_1000a83f = inttoptr i32 %v2_1000a83f to i32*
  store i32 %v0_1000a83f, i32* %v3_1000a83f, align 4
  %v0_1000a840 = call i32 @function_10009a40()
  store i32 %v0_1000a840, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a848

dec_label_pc_1000a848:                            ; preds = %dec_label_pc_1000a813, %dec_label_pc_1000a80b, %dec_label_pc_1000a803, %dec_label_pc_1000a7fb, %dec_label_pc_1000a83f, %dec_label_pc_1000a7b5, %dec_label_pc_1000a790, %dec_label_pc_1000a785, %dec_label_pc_1000a76a
  %v1_1000a848 = add i32 %v0_1000a719, 24
  %v2_1000a848 = inttoptr i32 %v1_1000a848 to i32*
  %v3_1000a848 = load i32, i32* %v2_1000a848, align 4
  store i32 %v3_1000a848, i32* %esi.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_1000a84d = icmp eq i32 %v3_1000a848, 0
  br i1 %v1_1000a84d, label %dec_label_pc_1000a874, label %dec_label_pc_1000a851

dec_label_pc_1000a851:                            ; preds = %dec_label_pc_1000a848, %dec_label_pc_1000a864
  %v0_1000a851 = phi i32 [ %v3_1000a86b, %dec_label_pc_1000a864 ], [ %v3_1000a848, %dec_label_pc_1000a848 ]
  store i32 %v0_1000a851, i32* @ecx, align 4
  %v0_1000a853 = call i32 @function_1000a710()
  store i32 %v0_1000a853, i32* %eax.global-to-local, align 4
  %v0_1000a858 = load i32, i32* @ebx, align 4
  %v1_1000a858 = icmp eq i32 %v0_1000a858, 0
  br i1 %v1_1000a858, label %dec_label_pc_1000a861, label %dec_label_pc_1000a85c

dec_label_pc_1000a85c:                            ; preds = %dec_label_pc_1000a851
  %v2_1000a85c = add i32 %v0_1000a858, 20
  %v3_1000a85c = inttoptr i32 %v2_1000a85c to i32*
  store i32 %v0_1000a853, i32* %v3_1000a85c, align 4
  br label %dec_label_pc_1000a864

dec_label_pc_1000a861:                            ; preds = %dec_label_pc_1000a851
  %v1_1000a861 = load i32, i32* @edi, align 4
  %v2_1000a861 = add i32 %v1_1000a861, 24
  %v3_1000a861 = inttoptr i32 %v2_1000a861 to i32*
  store i32 %v0_1000a853, i32* %v3_1000a861, align 4
  br label %dec_label_pc_1000a864

dec_label_pc_1000a864:                            ; preds = %dec_label_pc_1000a861, %dec_label_pc_1000a85c
  %v0_1000a864 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000a864 = add i32 %v0_1000a864, 20
  %v2_1000a864 = inttoptr i32 %v1_1000a864 to i32*
  store i32 0, i32* %v2_1000a864, align 4
  %v0_1000a86b = load i32, i32* %esi.global-to-local, align 4
  %v1_1000a86b = add i32 %v0_1000a86b, 20
  %v2_1000a86b = inttoptr i32 %v1_1000a86b to i32*
  %v3_1000a86b = load i32, i32* %v2_1000a86b, align 4
  store i32 %v3_1000a86b, i32* %esi.global-to-local, align 4
  %v0_1000a86e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a86e, i32* @ebx, align 4
  %v1_1000a870 = icmp eq i32 %v3_1000a86b, 0
  %v1_1000a872 = icmp eq i1 %v1_1000a870, false
  br i1 %v1_1000a872, label %dec_label_pc_1000a851, label %dec_label_pc_1000a874

dec_label_pc_1000a874:                            ; preds = %dec_label_pc_1000a864, %dec_label_pc_1000a848
  %v0_1000a874 = load i32, i32* @edi, align 4
  store i32 %v0_1000a874, i32* %eax.global-to-local, align 4
  %v0_1000a876 = load i32, i32* @esp, align 4
  %v1_1000a876 = inttoptr i32 %v0_1000a876 to i32*
  %v2_1000a876 = load i32, i32* %v1_1000a876, align 4
  store i32 %v2_1000a876, i32* @edi, align 4
  %v3_1000a876 = add i32 %v0_1000a876, 4
  %v1_1000a877 = inttoptr i32 %v3_1000a876 to i32*
  %v2_1000a877 = load i32, i32* %v1_1000a877, align 4
  store i32 %v2_1000a877, i32* %esi.global-to-local, align 4
  %v3_1000a877 = add i32 %v0_1000a876, 8
  %v1_1000a878 = inttoptr i32 %v3_1000a877 to i32*
  %v2_1000a878 = load i32, i32* %v1_1000a878, align 4
  store i32 %v2_1000a878, i32* @ebx, align 4
  ret i32 %v0_1000a874
}

define i32 @function_1000a8a0() local_unnamed_addr {
dec_label_pc_1000a8a0:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000a8a0 = load i32, i32* @esi, align 4
  store i32 %v0_1000a8a0, i32* %stack_var_-4, align 4
  %v0_1000a8a1 = load i32, i32* @ecx, align 4
  %v1_1000a8a3 = icmp eq i32 %v0_1000a8a1, 0
  br i1 %v1_1000a8a3, label %dec_label_pc_1000a8a0.dec_label_pc_1000a8bc_crit_edge, label %dec_label_pc_1000a8a7

dec_label_pc_1000a8a0.dec_label_pc_1000a8bc_crit_edge: ; preds = %dec_label_pc_1000a8a0
  %v0_1000a8bd.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000a8bc

dec_label_pc_1000a8a7:                            ; preds = %dec_label_pc_1000a8a0
  %v0_1000a8a7 = call i32 @function_1000a140()
  %v0_1000a8ac = call i32 @KeyValuesSystem()
  %v1_1000a8b2 = inttoptr i32 %v0_1000a8ac to i32*
  %v2_1000a8b2 = load i32, i32* %v1_1000a8b2, align 4
  store i32 %v0_1000a8ac, i32* @ecx, align 4
  %v1_1000a8b6 = add i32 %v2_1000a8b2, 8
  %v2_1000a8b6 = inttoptr i32 %v1_1000a8b6 to i32*
  %v3_1000a8b6 = load i32, i32* %v2_1000a8b6, align 4
  store i32 %v0_1000a8a1, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1000a8bc

dec_label_pc_1000a8bc:                            ; preds = %dec_label_pc_1000a8a0.dec_label_pc_1000a8bc_crit_edge, %dec_label_pc_1000a8a7
  %v0_1000a8bd = phi i32 [ %v3_1000a8b6, %dec_label_pc_1000a8a7 ], [ %v0_1000a8bd.pre, %dec_label_pc_1000a8a0.dec_label_pc_1000a8bc_crit_edge ]
  %v0_1000a8bc.in = phi i32* [ %stack_var_-8, %dec_label_pc_1000a8a7 ], [ %stack_var_-4, %dec_label_pc_1000a8a0.dec_label_pc_1000a8bc_crit_edge ]
  %v2_1000a8bc = load i32, i32* %v0_1000a8bc.in, align 4
  store i32 %v2_1000a8bc, i32* @esi, align 4
  ret i32 %v0_1000a8bd
}

define i32 @function_1000a8c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a8c0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000a8c0 = load i32, i32* @ebp, align 4
  store i32 %v0_1000a8c0, i32* %stack_var_-4, align 4
  %v4_1000a8c0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000a8c0, i32* @ebp, align 4
  %v0_1000a8c3 = load i32, i32* @ecx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_1000a8c8 = load i32, i32* @edi, align 4
  store i32 %v0_1000a8c8, i32* %stack_var_-16, align 4
  %v4_1000a8c8 = ptrtoint i32* %stack_var_-16 to i32
  %v1_1000a8c9 = add i32 %arg1, 24
  %v2_1000a8c9 = inttoptr i32 %v1_1000a8c9 to i32*
  %v3_1000a8c9 = load i32, i32* %v2_1000a8c9, align 4
  store i32 %v3_1000a8c9, i32* @edi, align 4
  store i32 %v0_1000a8c3, i32* @ebx, align 4
  %v1_1000a8d1 = icmp eq i32 %v3_1000a8c9, 0
  br i1 %v1_1000a8d1, label %dec_label_pc_1000a98e, label %dec_label_pc_1000a8d9

dec_label_pc_1000a8d9:                            ; preds = %dec_label_pc_1000a8c0
  br label %dec_label_pc_1000a8e0

dec_label_pc_1000a8e0:                            ; preds = %dec_label_pc_1000a982.dec_label_pc_1000a8e0_crit_edge, %dec_label_pc_1000a8d9
  %v0_1000a94a7 = phi i32 [ %v3_1000a982, %dec_label_pc_1000a982.dec_label_pc_1000a8e0_crit_edge ], [ %v3_1000a8c9, %dec_label_pc_1000a8d9 ]
  %v0_1000a8e0 = phi i32 [ %v0_1000a8e0.pre, %dec_label_pc_1000a982.dec_label_pc_1000a8e0_crit_edge ], [ %v0_1000a8c3, %dec_label_pc_1000a8d9 ]
  %v1_1000a8e0 = add i32 %v0_1000a8e0, 24
  %v2_1000a8e0 = inttoptr i32 %v1_1000a8e0 to i32*
  %v3_1000a8e0 = load i32, i32* %v2_1000a8e0, align 4
  store i32 %v3_1000a8e0, i32* @esi, align 4
  %v1_1000a8e3 = icmp eq i32 %v3_1000a8e0, 0
  br i1 %v1_1000a8e3, label %dec_label_pc_1000a94a, label %dec_label_pc_1000a8e7

dec_label_pc_1000a8e7:                            ; preds = %dec_label_pc_1000a8e0, %dec_label_pc_1000a940
  %v0_1000a8e7 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a8e7, i32* %eax.global-to-local, align 4
  %v0_1000a8ed = load i32, i32* @esi, align 4
  %v1_1000a8ed = add i32 %v0_1000a8ed, 18
  %v2_1000a8ed = inttoptr i32 %v1_1000a8ed to i16*
  %v3_1000a8ed = load i16, i16* %v2_1000a8ed, align 2
  %v4_1000a8ed = zext i16 %v3_1000a8ed to i32
  store i32 %v4_1000a8ed, i32* @ecx, align 4
  %v1_1000a8f1 = add i32 %v0_1000a8ed, 3
  %v2_1000a8f1 = inttoptr i32 %v1_1000a8f1 to i8*
  %v3_1000a8f1 = load i8, i8* %v2_1000a8f1, align 1
  %v4_1000a8f1 = zext i8 %v3_1000a8f1 to i32
  %v2_1000a8fa = mul nuw nsw i32 %v4_1000a8ed, 256
  %v2_1000a8fd = or i32 %v4_1000a8f1, %v2_1000a8fa
  %v1_1000a8ff = load i32, i32* @esp, align 4
  %v2_1000a8ff = add i32 %v1_1000a8ff, -4
  %v3_1000a8ff = inttoptr i32 %v2_1000a8ff to i32*
  store i32 %v2_1000a8fd, i32* %v3_1000a8ff, align 4
  %v0_1000a900 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a900, i32* @ecx, align 4
  %v0_1000a907 = load i32, i32* @edi, align 4
  %v1_1000a907 = icmp eq i32 %v0_1000a907, 0
  br i1 %v1_1000a907, label %dec_label_pc_1000a92a, label %dec_label_pc_1000a90b

dec_label_pc_1000a90b:                            ; preds = %dec_label_pc_1000a8e7
  %v0_1000a90b = call i32 @KeyValuesSystem()
  store i32 %v0_1000a90b, i32* @eax, align 4
  %v0_1000a911 = load i32, i32* @edi, align 4
  %v1_1000a911 = add i32 %v0_1000a911, 18
  %v2_1000a911 = inttoptr i32 %v1_1000a911 to i16*
  %v3_1000a911 = load i16, i16* %v2_1000a911, align 2
  %v4_1000a911 = zext i16 %v3_1000a911 to i32
  store i32 %v4_1000a911, i32* @ecx, align 4
  %v1_1000a915 = add i32 %v0_1000a911, 3
  %v2_1000a915 = inttoptr i32 %v1_1000a915 to i8*
  %v3_1000a915 = load i8, i8* %v2_1000a915, align 1
  %v4_1000a915 = zext i8 %v3_1000a915 to i32
  %v2_1000a91e = mul nuw nsw i32 %v4_1000a911, 256
  %v2_1000a921 = or i32 %v4_1000a915, %v2_1000a91e
  %v1_1000a923 = load i32, i32* @esp, align 4
  %v2_1000a923 = add i32 %v1_1000a923, -4
  %v3_1000a923 = inttoptr i32 %v2_1000a923 to i32*
  store i32 %v2_1000a921, i32* %v3_1000a923, align 4
  %v0_1000a924 = load i32, i32* @eax, align 4
  store i32 %v0_1000a924, i32* @ecx, align 4
  br label %dec_label_pc_1000a92f

dec_label_pc_1000a92a:                            ; preds = %dec_label_pc_1000a8e7
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* @eax, align 4
  br label %dec_label_pc_1000a92f

dec_label_pc_1000a92f:                            ; preds = %dec_label_pc_1000a92a, %dec_label_pc_1000a90b
  %v1_1000a932 = phi i32 [ %v2_1000a8ff, %dec_label_pc_1000a92a ], [ %v2_1000a923, %dec_label_pc_1000a90b ]
  store i32 %v0_1000a900, i32* @ecx, align 4
  %v2_1000a932 = add i32 %v1_1000a932, -4
  %v3_1000a932 = inttoptr i32 %v2_1000a932 to i32*
  store i32 %v0_1000a900, i32* %v3_1000a932, align 4
  %v0_1000a933 = load i32, i32* @eax, align 4
  %v2_1000a933 = add i32 %v1_1000a932, -8
  %v3_1000a933 = inttoptr i32 %v2_1000a933 to i32*
  store i32 %v0_1000a933, i32* %v3_1000a933, align 4
  %v2_1000a934 = call i32 @function_10009470(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000a934, i32* %eax.global-to-local, align 4
  %v1_1000a93c = icmp eq i32 %v2_1000a934, 0
  br i1 %v1_1000a93c, label %dec_label_pc_1000a95d, label %dec_label_pc_1000a940

dec_label_pc_1000a940:                            ; preds = %dec_label_pc_1000a92f
  %v0_1000a940 = load i32, i32* @esi, align 4
  %v1_1000a940 = add i32 %v0_1000a940, 20
  %v2_1000a940 = inttoptr i32 %v1_1000a940 to i32*
  %v3_1000a940 = load i32, i32* %v2_1000a940, align 4
  store i32 %v3_1000a940, i32* @esi, align 4
  %v1_1000a943 = icmp eq i32 %v3_1000a940, 0
  %v1_1000a945 = icmp eq i1 %v1_1000a943, false
  br i1 %v1_1000a945, label %dec_label_pc_1000a8e7, label %dec_label_pc_1000a947

dec_label_pc_1000a947:                            ; preds = %dec_label_pc_1000a940
  store i32 %v0_1000a8c3, i32* @ebx, align 4
  %v0_1000a94a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000a94a

dec_label_pc_1000a94a:                            ; preds = %dec_label_pc_1000a947, %dec_label_pc_1000a8e0
  %v0_1000a94a = phi i32 [ %v0_1000a94a.pre, %dec_label_pc_1000a947 ], [ %v0_1000a94a7, %dec_label_pc_1000a8e0 ]
  store i32 %v0_1000a94a, i32* @ecx, align 4
  %v0_1000a94c = call i32 @function_1000a710()
  store i32 %v0_1000a94c, i32* %eax.global-to-local, align 4
  %v0_1000a951 = load i32, i32* @ebx, align 4
  %v1_1000a951 = add i32 %v0_1000a951, 24
  %v2_1000a951 = inttoptr i32 %v1_1000a951 to i32*
  %v3_1000a951 = load i32, i32* %v2_1000a951, align 4
  store i32 %v3_1000a951, i32* @ecx, align 4
  %v1_1000a954 = icmp eq i32 %v3_1000a951, 0
  %v1_1000a956 = icmp eq i1 %v1_1000a954, false
  br i1 %v1_1000a956, label %dec_label_pc_1000a974.preheader, label %dec_label_pc_1000a958

dec_label_pc_1000a974.preheader:                  ; preds = %dec_label_pc_1000a94a
  %v1_1000a97422 = add i32 %v3_1000a951, 20
  %v2_1000a97423 = inttoptr i32 %v1_1000a97422 to i32*
  %v3_1000a97424 = load i32, i32* %v2_1000a97423, align 4
  %v1_1000a97725 = icmp eq i32 %v3_1000a97424, 0
  br i1 %v1_1000a97725, label %dec_label_pc_1000a97f, label %dec_label_pc_1000a97b

dec_label_pc_1000a958:                            ; preds = %dec_label_pc_1000a94a
  store i32 %v0_1000a94c, i32* %v2_1000a951, align 4
  br label %dec_label_pc_1000a982

dec_label_pc_1000a95d:                            ; preds = %dec_label_pc_1000a92f
  %v0_1000a939 = load i32, i32* @esp, align 4
  %v0_1000a95d = load i32, i32* @edi, align 4
  %v2_1000a95d = add i32 %v0_1000a939, 4
  %v3_1000a95d = inttoptr i32 %v2_1000a95d to i32*
  store i32 %v0_1000a95d, i32* %v3_1000a95d, align 4
  %v0_1000a95e = load i32, i32* @esi, align 4
  store i32 %v0_1000a95e, i32* @ecx, align 4
  %v1_1000a960 = call i32 @function_1000a8c0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000a960, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a8c3, i32* @ebx, align 4
  br label %dec_label_pc_1000a982

dec_label_pc_1000a97b:                            ; preds = %dec_label_pc_1000a974.preheader, %dec_label_pc_1000a97b
  %v3_1000a97426 = phi i32 [ %v3_1000a974, %dec_label_pc_1000a97b ], [ %v3_1000a97424, %dec_label_pc_1000a974.preheader ]
  store i32 %v3_1000a97426, i32* @ecx, align 4
  %v1_1000a974 = add i32 %v3_1000a97426, 20
  %v2_1000a974 = inttoptr i32 %v1_1000a974 to i32*
  %v3_1000a974 = load i32, i32* %v2_1000a974, align 4
  %v1_1000a977 = icmp eq i32 %v3_1000a974, 0
  br i1 %v1_1000a977, label %dec_label_pc_1000a97f, label %dec_label_pc_1000a97b

dec_label_pc_1000a97f:                            ; preds = %dec_label_pc_1000a97b, %dec_label_pc_1000a974.preheader
  %v2_1000a974.lcssa = phi i32* [ %v2_1000a97423, %dec_label_pc_1000a974.preheader ], [ %v2_1000a974, %dec_label_pc_1000a97b ]
  store i32 %v0_1000a94c, i32* %v2_1000a974.lcssa, align 4
  br label %dec_label_pc_1000a982

dec_label_pc_1000a982:                            ; preds = %dec_label_pc_1000a97f, %dec_label_pc_1000a95d, %dec_label_pc_1000a958
  %v0_1000a982 = load i32, i32* @edi, align 4
  %v1_1000a982 = add i32 %v0_1000a982, 20
  %v2_1000a982 = inttoptr i32 %v1_1000a982 to i32*
  %v3_1000a982 = load i32, i32* %v2_1000a982, align 4
  store i32 %v3_1000a982, i32* @edi, align 4
  %v1_1000a985 = icmp eq i32 %v3_1000a982, 0
  %v1_1000a987 = icmp eq i1 %v1_1000a985, false
  br i1 %v1_1000a987, label %dec_label_pc_1000a982.dec_label_pc_1000a8e0_crit_edge, label %dec_label_pc_1000a98d

dec_label_pc_1000a982.dec_label_pc_1000a8e0_crit_edge: ; preds = %dec_label_pc_1000a982
  %v0_1000a8e0.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000a8e0

dec_label_pc_1000a98d:                            ; preds = %dec_label_pc_1000a982
  %v0_1000a98d = load i32, i32* @esp, align 4
  %v3_1000a98d = add i32 %v0_1000a98d, 4
  %v2_1000a992.pre = load i32, i32* %stack_var_-4, align 4
  %v0_1000a993.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000a98e

dec_label_pc_1000a98e:                            ; preds = %dec_label_pc_1000a98d, %dec_label_pc_1000a8c0
  %v0_1000a993 = phi i32 [ %v0_1000a993.pre, %dec_label_pc_1000a98d ], [ %arg1, %dec_label_pc_1000a8c0 ]
  %v2_1000a992 = phi i32 [ %v2_1000a992.pre, %dec_label_pc_1000a98d ], [ %v0_1000a8c0, %dec_label_pc_1000a8c0 ]
  %v0_1000a98e = phi i32 [ %v3_1000a98d, %dec_label_pc_1000a98d ], [ %v4_1000a8c8, %dec_label_pc_1000a8c0 ]
  %v1_1000a98e = inttoptr i32 %v0_1000a98e to i32*
  %v2_1000a98e = load i32, i32* %v1_1000a98e, align 4
  store i32 %v2_1000a98e, i32* @edi, align 4
  store i32 %v2_1000a992, i32* @ebp, align 4
  ret i32 %v0_1000a993
}

define i32 @function_1000a9a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000a9a0:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000a9a4 = load i32, i32* @ecx, align 4
  store i32 %v0_1000a9a4, i32* @esi, align 4
  %v0_1000a9a6 = call i32 @KeyValuesSystem()
  store i32 %v0_1000a9a6, i32* %eax.global-to-local, align 4
  %v1_1000a9ac = inttoptr i32 %v0_1000a9a6 to i32*
  %v2_1000a9ac = load i32, i32* %v1_1000a9ac, align 4
  store i32 %v0_1000a9a6, i32* @ecx, align 4
  %v1_1000a9b0 = add i32 %v2_1000a9ac, 4
  %v2_1000a9b0 = inttoptr i32 %v1_1000a9b0 to i32*
  %v3_1000a9b0 = load i32, i32* %v2_1000a9b0, align 4
  store i32 %v3_1000a9b0, i32* %eax.global-to-local, align 4
  %v1_1000a9b7 = icmp eq i32 %v3_1000a9b0, 0
  br i1 %v1_1000a9b7, label %dec_label_pc_1000a9c8, label %dec_label_pc_1000a9bb

dec_label_pc_1000a9bb:                            ; preds = %dec_label_pc_1000a9a0
  store i32 %v3_1000a9b0, i32* @ecx, align 4
  %v1_1000a9c1 = call i32 @function_1000a4a0(i32 %arg1)
  br label %dec_label_pc_1000a9ca

dec_label_pc_1000a9c8:                            ; preds = %dec_label_pc_1000a9a0
  br label %dec_label_pc_1000a9ca

dec_label_pc_1000a9ca:                            ; preds = %dec_label_pc_1000a9c8, %dec_label_pc_1000a9bb
  %storemerge = phi i32 [ 0, %dec_label_pc_1000a9c8 ], [ %v1_1000a9c1, %dec_label_pc_1000a9bb ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v0_1000a9ca = load i32, i32* @esi, align 4
  %v1_1000a9ca = add i32 %v0_1000a9ca, 17
  %v2_1000a9ca = inttoptr i32 %v1_1000a9ca to i8*
  %v3_1000a9ca = load i8, i8* %v2_1000a9ca, align 1
  %v10_1000a9ca = icmp eq i8 %v3_1000a9ca, 0
  %v1_1000a9ce = icmp eq i1 %v10_1000a9ca, false
  %v1_1000a9d1 = zext i1 %v1_1000a9ce to i8
  %v3_1000a9d1 = add i32 %storemerge, 17
  %v4_1000a9d1 = inttoptr i32 %v3_1000a9d1 to i8*
  store i8 %v1_1000a9d1, i8* %v4_1000a9d1, align 1
  %v0_1000a9d4 = load i32, i32* @esi, align 4
  %v1_1000a9d4 = add i32 %v0_1000a9d4, 24
  %v2_1000a9d4 = inttoptr i32 %v1_1000a9d4 to i32*
  %v3_1000a9d4 = load i32, i32* %v2_1000a9d4, align 4
  store i32 %v3_1000a9d4, i32* @ecx, align 4
  %v1_1000a9d7 = icmp eq i32 %v3_1000a9d4, 0
  %v1_1000a9d9 = icmp eq i1 %v1_1000a9d7, false
  br i1 %v1_1000a9d9, label %dec_label_pc_1000a9e7.preheader, label %dec_label_pc_1000a9db

dec_label_pc_1000a9e7.preheader:                  ; preds = %dec_label_pc_1000a9ca
  %v1_1000a9e713 = add i32 %v3_1000a9d4, 20
  %v2_1000a9e714 = inttoptr i32 %v1_1000a9e713 to i32*
  %v3_1000a9e715 = load i32, i32* %v2_1000a9e714, align 4
  %v1_1000a9ea16 = icmp eq i32 %v3_1000a9e715, 0
  br i1 %v1_1000a9ea16, label %dec_label_pc_1000a9f2, label %dec_label_pc_1000a9ee

dec_label_pc_1000a9db:                            ; preds = %dec_label_pc_1000a9ca
  %v0_1000a9db = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a9db, i32* %v2_1000a9d4, align 4
  %v0_1000a9de = load i32, i32* @esp, align 4
  %v1_1000a9de = inttoptr i32 %v0_1000a9de to i32*
  %v2_1000a9de = load i32, i32* %v1_1000a9de, align 4
  store i32 %v2_1000a9de, i32* @esi, align 4
  %v3_1000a9de = add i32 %v0_1000a9de, 4
  %v1_1000a9df = inttoptr i32 %v3_1000a9de to i32*
  %v2_1000a9df = load i32, i32* %v1_1000a9df, align 4
  store i32 %v2_1000a9df, i32* @ebp, align 4
  %v0_1000a9e0 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000a9e0

dec_label_pc_1000a9ee:                            ; preds = %dec_label_pc_1000a9e7.preheader, %dec_label_pc_1000a9ee
  %v3_1000a9e717 = phi i32 [ %v3_1000a9e7, %dec_label_pc_1000a9ee ], [ %v3_1000a9e715, %dec_label_pc_1000a9e7.preheader ]
  store i32 %v3_1000a9e717, i32* @ecx, align 4
  %v1_1000a9e7 = add i32 %v3_1000a9e717, 20
  %v2_1000a9e7 = inttoptr i32 %v1_1000a9e7 to i32*
  %v3_1000a9e7 = load i32, i32* %v2_1000a9e7, align 4
  %v1_1000a9ea = icmp eq i32 %v3_1000a9e7, 0
  br i1 %v1_1000a9ea, label %dec_label_pc_1000a9f2, label %dec_label_pc_1000a9ee

dec_label_pc_1000a9f2:                            ; preds = %dec_label_pc_1000a9ee, %dec_label_pc_1000a9e7.preheader
  %v2_1000a9e7.lcssa = phi i32* [ %v2_1000a9e714, %dec_label_pc_1000a9e7.preheader ], [ %v2_1000a9e7, %dec_label_pc_1000a9ee ]
  %v0_1000a9f2 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000a9f2, i32* %v2_1000a9e7.lcssa, align 4
  %v0_1000a9f5 = load i32, i32* @esp, align 4
  %v1_1000a9f5 = inttoptr i32 %v0_1000a9f5 to i32*
  %v2_1000a9f5 = load i32, i32* %v1_1000a9f5, align 4
  store i32 %v2_1000a9f5, i32* @esi, align 4
  %v3_1000a9f5 = add i32 %v0_1000a9f5, 4
  %v1_1000a9f6 = inttoptr i32 %v3_1000a9f5 to i32*
  %v2_1000a9f6 = load i32, i32* %v1_1000a9f6, align 4
  store i32 %v2_1000a9f6, i32* @ebp, align 4
  %v0_1000a9f7 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000a9f7
}

define i32 @function_1000aa00(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000aa00:
  %stack_var_-604 = alloca i32, align 4
  %stack_var_-620 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-608 = alloca i32, align 4
  %stack_var_-600 = alloca i8*, align 4
  %stack_var_-580 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000aa00 = load i32, i32* @ebp, align 4
  store i32 %v0_1000aa00, i32* %stack_var_-4, align 4
  %v4_1000aa00 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000aa00, i32* @ebp, align 4
  %v15_1000aa03 = ptrtoint i32* %stack_var_-580 to i32
  %v0_1000aa0b = load i32, i32* @edi, align 4
  %v4_1000aa0c = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000aa0c, i32* @edi, align 4
  store i8* %arg1, i8** %stack_var_-600, align 4
  %v0_1000aa12 = load i32, i32* @ecx, align 4
  store i32 %v0_1000aa12, i32* @esi, align 4
  %v4_1000aa14 = call i32 @function_1000a510(i8* %arg1, i32 0)
  store i32 %v4_1000aa14, i32* @ebx, align 4
  %v1_1000aa1b = icmp eq i32 %v4_1000aa14, 0
  br i1 %v1_1000aa1b, label %dec_label_pc_1000abe3, label %dec_label_pc_1000aa23

dec_label_pc_1000aa23:                            ; preds = %dec_label_pc_1000aa00
  %v1_1000aa23 = add i32 %v4_1000aa14, 16
  %v2_1000aa23 = inttoptr i32 %v1_1000aa23 to i8*
  %v3_1000aa23 = load i8, i8* %v2_1000aa23, align 1
  %v4_1000aa23 = sext i8 %v3_1000aa23 to i32
  %v1_1000aa27 = add nsw i32 %v4_1000aa23, -1
  store i32 %v1_1000aa27, i32* @3, align 4
  switch i32 %v4_1000aa23, label %dec_label_pc_1000abe3 [
    i32 1, label %dec_label_pc_1000abd7
    i32 2, label %dec_label_pc_1000aabb
    i32 3, label %dec_label_pc_1000aa38
    i32 4, label %dec_label_pc_1000aabb
    i32 5, label %dec_label_pc_1000abab
    i32 7, label %dec_label_pc_1000ab32
  ]

dec_label_pc_1000aa38:                            ; preds = %dec_label_pc_1000aa23
  %v1_1000aa38 = add i32 %v4_1000aa14, 12
  %v2_1000aa38 = inttoptr i32 %v1_1000aa38 to i32*
  %v3_1000aa38 = load i32, i32* %v2_1000aa38, align 4
  %v4_1000aa38 = call i128 @__asm_movss.11(i32 %v3_1000aa38)
  %v1_1000aa40 = call i128 @__asm_cvtps2pd(i128 %v4_1000aa38)
  store i128 %v1_1000aa40, i128* @xmm0, align 8
  %v1_1000aa43 = call i32 @__asm_movsd(i128 %v1_1000aa40)
  store i32 %v1_1000aa43, i32* %stack_var_-608, align 4
  %v2_1000aa4d = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_1000aa4d, i32* %stack_var_-620, align 4
  %v6_1000aa53 = call i32 @function_10009a90(i32* nonnull %stack_var_-68, i32 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10023bf0.420, i32 0, i32 0))
  store i32 1, i32* %stack_var_-604, align 4
  %v0_1000aa5d = load i32, i32* @edi, align 4
  store i32 %v0_1000aa5d, i32* %stack_var_-608, align 4
  %v0_1000aa5e = load i32, i32* @esi, align 4
  store i32 %v0_1000aa5e, i32* @ecx, align 4
  %v1_1000aa60 = inttoptr i32 %v0_1000aa5d to i8*
  %v3_1000aa60 = call i32 @function_1000a510(i8* %v1_1000aa60, i32 1)
  %v1_1000aa67 = icmp eq i32 %v3_1000aa60, 0
  br i1 %v1_1000aa67, label %dec_label_pc_1000abd7, label %dec_label_pc_1000aa6f

dec_label_pc_1000aa6f:                            ; preds = %dec_label_pc_1000aa38
  %v1_1000aa6f = add i32 %v3_1000aa60, 4
  %v2_1000aa6f = inttoptr i32 %v1_1000aa6f to i32*
  %v3_1000aa6f = load i32, i32* %v2_1000aa6f, align 4
  store i32 %v3_1000aa6f, i32* @ecx, align 4
  %v2_1000aa73 = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000aa6f)
  %v1_1000aa78 = add i32 %v3_1000aa60, 8
  %v2_1000aa78 = inttoptr i32 %v1_1000aa78 to i32*
  %v3_1000aa78 = load i32, i32* %v2_1000aa78, align 4
  %v1_1000aa7c = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000aa78)
  store i32 %v2_1000aa4d, i32* %stack_var_-620, align 4
  store i32 0, i32* %v2_1000aa78, align 4
  %v0_1000aa8c = load i32, i32* %stack_var_-620, align 4
  %v1_1000aa8c = call i32 @function_10009450(i32 %v0_1000aa8c)
  %v1_1000aa91 = add i32 %v1_1000aa8c, 1
  %v1_1000aa95 = call i32 @__malloc_crt(i32 %v1_1000aa91)
  store i32 %v2_1000aa4d, i32* @ecx, align 4
  store i32 %v1_1000aa95, i32* %v2_1000aa6f, align 4
  %v0_1000aaa3 = call i32 @function_10009a40()
  %v2_1000aaab = load i32, i32* %stack_var_-608, align 4
  store i32 %v2_1000aaab, i32* @edi, align 4
  %v1_1000aaac = add i32 %v3_1000aa60, 16
  %v2_1000aaac = inttoptr i32 %v1_1000aaac to i8*
  store i8 1, i8* %v2_1000aaac, align 1
  %v1_1000aab0 = add i32 %v4_1000aa14, 4
  %v2_1000aab0 = inttoptr i32 %v1_1000aab0 to i32*
  %v3_1000aab0 = load i32, i32* %v2_1000aab0, align 4
  %v2_1000aab3 = load i32, i32* %stack_var_-604, align 4
  store i32 %v2_1000aab3, i32* @esi, align 4
  %v2_1000aab4 = load i8*, i8** %stack_var_-600, align 4
  %v3_1000aab4 = ptrtoint i8* %v2_1000aab4 to i32
  store i32 %v3_1000aab4, i32* @ebx, align 4
  %v2_1000aab7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000aab7, i32* @ebp, align 4
  ret i32 %v3_1000aab0

dec_label_pc_1000aabb:                            ; preds = %dec_label_pc_1000aa23, %dec_label_pc_1000aa23
  %v1_1000aabb = add i32 %v4_1000aa14, 12
  %v2_1000aabb = inttoptr i32 %v1_1000aabb to i32*
  %v3_1000aabb = load i32, i32* %v2_1000aabb, align 4
  store i32 %v3_1000aabb, i32* %stack_var_-604, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_10022308.65 to i32), i32* %stack_var_-608, align 4
  %v2_1000aac4 = ptrtoint i32* %stack_var_-68 to i32
  %v6_1000aaca = call i32 @function_10009a90(i32* nonnull %stack_var_-68, i32 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10022308.65, i32 0, i32 0))
  store i32 1, i32* %stack_var_-604, align 4
  %v0_1000aad4 = load i32, i32* @edi, align 4
  store i32 %v0_1000aad4, i32* %stack_var_-608, align 4
  %v0_1000aad5 = load i32, i32* @esi, align 4
  store i32 %v0_1000aad5, i32* @ecx, align 4
  %v1_1000aad7 = inttoptr i32 %v0_1000aad4 to i8*
  %v3_1000aad7 = call i32 @function_1000a510(i8* %v1_1000aad7, i32 1)
  %v1_1000aade = icmp eq i32 %v3_1000aad7, 0
  br i1 %v1_1000aade, label %dec_label_pc_1000abd7, label %dec_label_pc_1000aae6

dec_label_pc_1000aae6:                            ; preds = %dec_label_pc_1000aabb
  %v1_1000aae6 = add i32 %v3_1000aad7, 4
  %v2_1000aae6 = inttoptr i32 %v1_1000aae6 to i32*
  %v3_1000aae6 = load i32, i32* %v2_1000aae6, align 4
  store i32 %v3_1000aae6, i32* @ecx, align 4
  %v2_1000aaea = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000aae6)
  %v1_1000aaef = add i32 %v3_1000aad7, 8
  %v2_1000aaef = inttoptr i32 %v1_1000aaef to i32*
  %v3_1000aaef = load i32, i32* %v2_1000aaef, align 4
  %v1_1000aaf3 = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000aaef)
  store i32 %v2_1000aac4, i32* %stack_var_-620, align 4
  store i32 0, i32* %v2_1000aaef, align 4
  %v0_1000ab03 = load i32, i32* %stack_var_-620, align 4
  %v1_1000ab03 = call i32 @function_10009450(i32 %v0_1000ab03)
  %v1_1000ab08 = add i32 %v1_1000ab03, 1
  %v1_1000ab0c = call i32 @__malloc_crt(i32 %v1_1000ab08)
  store i32 %v2_1000aac4, i32* @ecx, align 4
  store i32 %v1_1000ab0c, i32* %v2_1000aae6, align 4
  %v0_1000ab1a = call i32 @function_10009a40()
  %v2_1000ab22 = load i32, i32* %stack_var_-608, align 4
  store i32 %v2_1000ab22, i32* @edi, align 4
  %v1_1000ab23 = add i32 %v3_1000aad7, 16
  %v2_1000ab23 = inttoptr i32 %v1_1000ab23 to i8*
  store i8 1, i8* %v2_1000ab23, align 1
  %v1_1000ab27 = add i32 %v4_1000aa14, 4
  %v2_1000ab27 = inttoptr i32 %v1_1000ab27 to i32*
  %v3_1000ab27 = load i32, i32* %v2_1000ab27, align 4
  %v2_1000ab2a = load i32, i32* %stack_var_-604, align 4
  store i32 %v2_1000ab2a, i32* @esi, align 4
  %v2_1000ab2b = load i8*, i8** %stack_var_-600, align 4
  %v3_1000ab2b = ptrtoint i8* %v2_1000ab2b to i32
  store i32 %v3_1000ab2b, i32* @ebx, align 4
  %v2_1000ab2e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000ab2e, i32* @ebp, align 4
  ret i32 %v3_1000ab27

dec_label_pc_1000ab32:                            ; preds = %dec_label_pc_1000aa23
  %v1_1000ab32 = add i32 %v4_1000aa14, 4
  %v2_1000ab32 = inttoptr i32 %v1_1000ab32 to i32*
  %v3_1000ab32 = load i32, i32* %v2_1000ab32, align 4
  %v1_1000ab35 = add i32 %v3_1000ab32, 4
  %v2_1000ab35 = inttoptr i32 %v1_1000ab35 to i32*
  %v3_1000ab35 = load i32, i32* %v2_1000ab35, align 4
  %v1_1000ab38 = inttoptr i32 %v3_1000ab32 to i32*
  %v2_1000ab38 = load i32, i32* %v1_1000ab38, align 4
  store i32 %v3_1000ab35, i32* %stack_var_-604, align 4
  store i32 %v2_1000ab38, i32* %stack_var_-608, align 4
  %v2_1000ab41 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_1000ab41, i32* @ecx, align 4
  store i32 %v2_1000ab41, i32* %stack_var_-620, align 4
  %v6_1000ab47 = call i32 @function_10009a90(i32* nonnull %stack_var_-68, i32 64, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_10023be8.421, i32 0, i32 0))
  store i32 1, i32* %stack_var_-604, align 4
  %v0_1000ab51 = load i32, i32* @edi, align 4
  store i32 %v0_1000ab51, i32* %stack_var_-608, align 4
  %v0_1000ab52 = load i32, i32* @esi, align 4
  store i32 %v0_1000ab52, i32* @ecx, align 4
  %v1_1000ab54 = inttoptr i32 %v0_1000ab51 to i8*
  %v3_1000ab54 = call i32 @function_1000a510(i8* %v1_1000ab54, i32 1)
  %v1_1000ab5b = icmp eq i32 %v3_1000ab54, 0
  br i1 %v1_1000ab5b, label %dec_label_pc_1000abd7, label %dec_label_pc_1000ab5f

dec_label_pc_1000ab5f:                            ; preds = %dec_label_pc_1000ab32
  %v1_1000ab5f = add i32 %v3_1000ab54, 4
  %v2_1000ab5f = inttoptr i32 %v1_1000ab5f to i32*
  %v3_1000ab5f = load i32, i32* %v2_1000ab5f, align 4
  %v2_1000ab63 = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000ab5f)
  %v1_1000ab68 = add i32 %v3_1000ab54, 8
  %v2_1000ab68 = inttoptr i32 %v1_1000ab68 to i32*
  %v3_1000ab68 = load i32, i32* %v2_1000ab68, align 4
  %v1_1000ab6c = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000ab68)
  store i32 %v2_1000ab41, i32* @ecx, align 4
  store i32 %v2_1000ab41, i32* %stack_var_-620, align 4
  store i32 0, i32* %v2_1000ab68, align 4
  %v0_1000ab7c = load i32, i32* %stack_var_-620, align 4
  %v1_1000ab7c = call i32 @function_10009450(i32 %v0_1000ab7c)
  %v1_1000ab81 = add i32 %v1_1000ab7c, 1
  %v1_1000ab85 = call i32 @__malloc_crt(i32 %v1_1000ab81)
  store i32 %v1_1000ab85, i32* %v2_1000ab5f, align 4
  %v0_1000ab93 = call i32 @function_10009a40()
  %v2_1000ab9b = load i32, i32* %stack_var_-608, align 4
  store i32 %v2_1000ab9b, i32* @edi, align 4
  %v1_1000ab9c = add i32 %v3_1000ab54, 16
  %v2_1000ab9c = inttoptr i32 %v1_1000ab9c to i8*
  store i8 1, i8* %v2_1000ab9c, align 1
  %v3_1000aba0 = load i32, i32* %v2_1000ab32, align 4
  %v2_1000aba3 = load i32, i32* %stack_var_-604, align 4
  store i32 %v2_1000aba3, i32* @esi, align 4
  %v2_1000aba4 = load i8*, i8** %stack_var_-600, align 4
  %v3_1000aba4 = ptrtoint i8* %v2_1000aba4 to i32
  store i32 %v3_1000aba4, i32* @ebx, align 4
  %v2_1000aba7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000aba7, i32* @ebp, align 4
  ret i32 %v3_1000aba0

dec_label_pc_1000abab:                            ; preds = %dec_label_pc_1000aa23
  %v1_1000abab = add i32 %v4_1000aa14, 8
  %v2_1000abab = inttoptr i32 %v1_1000abab to i32*
  %v3_1000abab = load i32, i32* %v2_1000abab, align 4
  store i32 %v3_1000abab, i32* @ecx, align 4
  store i32 512, i32* %stack_var_-604, align 4
  store i32 %v15_1000aa03, i32* %stack_var_-608, align 4
  %v5_1000abbb = call i32 @V_UnicodeToUTF8(i32 %v3_1000abab, i32* nonnull %stack_var_-580, i32 512)
  %v1_1000abc4 = icmp eq i32 %v5_1000abbb, 0
  br i1 %v1_1000abc4, label %dec_label_pc_1000abe3, label %dec_label_pc_1000abc8

dec_label_pc_1000abc8:                            ; preds = %dec_label_pc_1000abab
  store i32 %v15_1000aa03, i32* %stack_var_-604, align 4
  %v0_1000abcf = load i32, i32* @edi, align 4
  store i32 %v0_1000abcf, i32* %stack_var_-608, align 4
  %v0_1000abd0 = load i32, i32* @esi, align 4
  store i32 %v0_1000abd0, i32* @ecx, align 4
  %v3_1000abd2 = call i32 @function_1000a6e0(i32 %v0_1000abcf, i32* nonnull %stack_var_-580)
  br label %dec_label_pc_1000abd7

dec_label_pc_1000abd7:                            ; preds = %dec_label_pc_1000abc8, %dec_label_pc_1000ab32, %dec_label_pc_1000aabb, %dec_label_pc_1000aa38, %dec_label_pc_1000aa23
  %v1_1000abd7 = add i32 %v4_1000aa14, 4
  %v2_1000abd7 = inttoptr i32 %v1_1000abd7 to i32*
  %v3_1000abd7 = load i32, i32* %v2_1000abd7, align 4
  %v0_1000abda = load i32, i32* @esp, align 4
  %v1_1000abda = inttoptr i32 %v0_1000abda to i32*
  %v2_1000abda = load i32, i32* %v1_1000abda, align 4
  store i32 %v2_1000abda, i32* @edi, align 4
  %v3_1000abda = add i32 %v0_1000abda, 4
  %v1_1000abdb = inttoptr i32 %v3_1000abda to i32*
  %v2_1000abdb = load i32, i32* %v1_1000abdb, align 4
  store i32 %v2_1000abdb, i32* @esi, align 4
  %v3_1000abdb = add i32 %v0_1000abda, 8
  %v1_1000abdc = inttoptr i32 %v3_1000abdb to i32*
  %v2_1000abdc = load i32, i32* %v1_1000abdc, align 4
  store i32 %v2_1000abdc, i32* @ebx, align 4
  %v2_1000abdf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000abdf, i32* @ebp, align 4
  ret i32 %v3_1000abd7

dec_label_pc_1000abe3:                            ; preds = %dec_label_pc_1000abab, %dec_label_pc_1000aa23, %dec_label_pc_1000aa00
  %v2_1000abe6 = load i8*, i8** %stack_var_-600, align 4
  %v3_1000abe6 = ptrtoint i8* %v2_1000abe6 to i32
  store i32 %v3_1000abe6, i32* @edi, align 4
  store i32 0, i32* @esi, align 4
  store i32 %v0_1000aa0b, i32* @ebx, align 4
  %v2_1000abeb = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000abeb, i32* @ebp, align 4
  ret i32 %arg2
}

define i32 @function_1000ac10(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000ac10:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ac10 = load i32, i32* @ebp, align 4
  store i32 %v0_1000ac10, i32* %stack_var_-4, align 4
  %v4_1000ac10 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000ac10, i32* @ebp, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_1000ac1a = load i32, i32* @ecx, align 4
  store i32 %v0_1000ac1a, i32* @ebx, align 4
  %v1_1000ac1c = add i32 %arg1, 12
  %v2_1000ac1c = inttoptr i32 %v1_1000ac1c to i32*
  %v3_1000ac1c = load i32, i32* %v2_1000ac1c, align 4
  store i32 %v3_1000ac1c, i32* @ecx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %tmp27 = icmp slt i32 %v3_1000ac1c, 1
  br i1 %tmp27, label %dec_label_pc_1000ad02, label %dec_label_pc_1000ac32

dec_label_pc_1000ac32:                            ; preds = %dec_label_pc_1000ac10
  %v1_1000ac37 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_1000ac34

dec_label_pc_1000ac34:                            ; preds = %dec_label_pc_1000acf4, %dec_label_pc_1000ac32
  %v0_1000acf4 = phi i32 [ 0, %dec_label_pc_1000ac32 ], [ %v1_1000acf4, %dec_label_pc_1000acf4 ]
  %v2_1000ac37 = load i32, i32* %v1_1000ac37, align 4
  %v2_1000ac39 = mul i32 %v0_1000acf4, 4
  %v3_1000ac39 = add i32 %v2_1000ac37, %v2_1000ac39
  %v4_1000ac39 = inttoptr i32 %v3_1000ac39 to i32*
  %v5_1000ac39 = load i32, i32* %v4_1000ac39, align 4
  %v1_1000ac3c = add i32 %v5_1000ac39, 24
  %v2_1000ac3c = inttoptr i32 %v1_1000ac3c to i32*
  %v3_1000ac3c = load i32, i32* %v2_1000ac3c, align 4
  store i32 %v3_1000ac3c, i32* @edi, align 4
  %v1_1000ac3f = icmp eq i32 %v3_1000ac3c, 0
  br i1 %v1_1000ac3f, label %dec_label_pc_1000acf4, label %dec_label_pc_1000ac47

dec_label_pc_1000ac47:                            ; preds = %dec_label_pc_1000ac34, %dec_label_pc_1000ace3
  %v0_1000acb16 = phi i32 [ %v3_1000ace3, %dec_label_pc_1000ace3 ], [ %v3_1000ac3c, %dec_label_pc_1000ac34 ]
  %v0_1000ac47 = load i32, i32* @ebx, align 4
  %v1_1000ac47 = add i32 %v0_1000ac47, 24
  %v2_1000ac47 = inttoptr i32 %v1_1000ac47 to i32*
  %v3_1000ac47 = load i32, i32* %v2_1000ac47, align 4
  store i32 %v3_1000ac47, i32* @esi, align 4
  %v1_1000ac4a = icmp eq i32 %v3_1000ac47, 0
  br i1 %v1_1000ac4a, label %dec_label_pc_1000acb1, label %dec_label_pc_1000ac4e

dec_label_pc_1000ac4e:                            ; preds = %dec_label_pc_1000ac47, %dec_label_pc_1000aca7
  %v0_1000ac4e = call i32 @KeyValuesSystem()
  store i32 %v0_1000ac4e, i32* %eax.global-to-local, align 4
  %v0_1000ac54 = load i32, i32* @esi, align 4
  %v1_1000ac54 = add i32 %v0_1000ac54, 18
  %v2_1000ac54 = inttoptr i32 %v1_1000ac54 to i16*
  %v3_1000ac54 = load i16, i16* %v2_1000ac54, align 2
  %v4_1000ac54 = zext i16 %v3_1000ac54 to i32
  store i32 %v4_1000ac54, i32* @ecx, align 4
  %v1_1000ac58 = add i32 %v0_1000ac54, 3
  %v2_1000ac58 = inttoptr i32 %v1_1000ac58 to i8*
  %v3_1000ac58 = load i8, i8* %v2_1000ac58, align 1
  %v4_1000ac58 = zext i8 %v3_1000ac58 to i32
  %v2_1000ac61 = mul nuw nsw i32 %v4_1000ac54, 256
  %v2_1000ac64 = or i32 %v4_1000ac58, %v2_1000ac61
  %v1_1000ac66 = load i32, i32* @esp, align 4
  %v2_1000ac66 = add i32 %v1_1000ac66, -4
  %v3_1000ac66 = inttoptr i32 %v2_1000ac66 to i32*
  store i32 %v2_1000ac64, i32* %v3_1000ac66, align 4
  %v0_1000ac67 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ac67, i32* @ecx, align 4
  %v0_1000ac6e = load i32, i32* @edi, align 4
  %v1_1000ac6e = icmp eq i32 %v0_1000ac6e, 0
  br i1 %v1_1000ac6e, label %dec_label_pc_1000ac91, label %dec_label_pc_1000ac72

dec_label_pc_1000ac72:                            ; preds = %dec_label_pc_1000ac4e
  %v0_1000ac72 = call i32 @KeyValuesSystem()
  store i32 %v0_1000ac72, i32* @eax, align 4
  %v0_1000ac78 = load i32, i32* @edi, align 4
  %v1_1000ac78 = add i32 %v0_1000ac78, 18
  %v2_1000ac78 = inttoptr i32 %v1_1000ac78 to i16*
  %v3_1000ac78 = load i16, i16* %v2_1000ac78, align 2
  %v4_1000ac78 = zext i16 %v3_1000ac78 to i32
  store i32 %v4_1000ac78, i32* @ecx, align 4
  %v1_1000ac7c = add i32 %v0_1000ac78, 3
  %v2_1000ac7c = inttoptr i32 %v1_1000ac7c to i8*
  %v3_1000ac7c = load i8, i8* %v2_1000ac7c, align 1
  %v4_1000ac7c = zext i8 %v3_1000ac7c to i32
  %v2_1000ac85 = mul nuw nsw i32 %v4_1000ac78, 256
  %v2_1000ac88 = or i32 %v4_1000ac7c, %v2_1000ac85
  %v1_1000ac8a = load i32, i32* @esp, align 4
  %v2_1000ac8a = add i32 %v1_1000ac8a, -4
  %v3_1000ac8a = inttoptr i32 %v2_1000ac8a to i32*
  store i32 %v2_1000ac88, i32* %v3_1000ac8a, align 4
  %v0_1000ac8b = load i32, i32* @eax, align 4
  store i32 %v0_1000ac8b, i32* @ecx, align 4
  br label %dec_label_pc_1000ac96

dec_label_pc_1000ac91:                            ; preds = %dec_label_pc_1000ac4e
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* @eax, align 4
  br label %dec_label_pc_1000ac96

dec_label_pc_1000ac96:                            ; preds = %dec_label_pc_1000ac91, %dec_label_pc_1000ac72
  %v1_1000ac99 = phi i32 [ %v2_1000ac66, %dec_label_pc_1000ac91 ], [ %v2_1000ac8a, %dec_label_pc_1000ac72 ]
  store i32 %v0_1000ac67, i32* @ecx, align 4
  %v2_1000ac99 = add i32 %v1_1000ac99, -4
  %v3_1000ac99 = inttoptr i32 %v2_1000ac99 to i32*
  store i32 %v0_1000ac67, i32* %v3_1000ac99, align 4
  %v0_1000ac9a = load i32, i32* @eax, align 4
  %v2_1000ac9a = add i32 %v1_1000ac99, -8
  %v3_1000ac9a = inttoptr i32 %v2_1000ac9a to i32*
  store i32 %v0_1000ac9a, i32* %v3_1000ac9a, align 4
  %v2_1000ac9b = call i32 @function_10009470(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000ac9b, i32* %eax.global-to-local, align 4
  %v1_1000aca3 = icmp eq i32 %v2_1000ac9b, 0
  br i1 %v1_1000aca3, label %dec_label_pc_1000acc4, label %dec_label_pc_1000aca7

dec_label_pc_1000aca7:                            ; preds = %dec_label_pc_1000ac96
  %v0_1000aca7 = load i32, i32* @esi, align 4
  %v1_1000aca7 = add i32 %v0_1000aca7, 20
  %v2_1000aca7 = inttoptr i32 %v1_1000aca7 to i32*
  %v3_1000aca7 = load i32, i32* %v2_1000aca7, align 4
  store i32 %v3_1000aca7, i32* @esi, align 4
  %v1_1000acaa = icmp eq i32 %v3_1000aca7, 0
  %v1_1000acac = icmp eq i1 %v1_1000acaa, false
  br i1 %v1_1000acac, label %dec_label_pc_1000ac4e, label %dec_label_pc_1000acae

dec_label_pc_1000acae:                            ; preds = %dec_label_pc_1000aca7
  store i32 %v0_1000ac1a, i32* @ebx, align 4
  %v0_1000acb1.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000acb1

dec_label_pc_1000acb1:                            ; preds = %dec_label_pc_1000acae, %dec_label_pc_1000ac47
  %v0_1000acb1 = phi i32 [ %v0_1000acb1.pre, %dec_label_pc_1000acae ], [ %v0_1000acb16, %dec_label_pc_1000ac47 ]
  store i32 %v0_1000acb1, i32* @ecx, align 4
  %v0_1000acb3 = call i32 @function_1000a710()
  store i32 %v0_1000acb3, i32* %eax.global-to-local, align 4
  %v0_1000acb8 = load i32, i32* @ebx, align 4
  %v1_1000acb8 = add i32 %v0_1000acb8, 24
  %v2_1000acb8 = inttoptr i32 %v1_1000acb8 to i32*
  %v3_1000acb8 = load i32, i32* %v2_1000acb8, align 4
  store i32 %v3_1000acb8, i32* @ecx, align 4
  %v1_1000acbb = icmp eq i32 %v3_1000acb8, 0
  %v1_1000acbd = icmp eq i1 %v1_1000acbb, false
  br i1 %v1_1000acbd, label %dec_label_pc_1000acd5.preheader, label %dec_label_pc_1000acbf

dec_label_pc_1000acd5.preheader:                  ; preds = %dec_label_pc_1000acb1
  %v1_1000acd529 = add i32 %v3_1000acb8, 20
  %v2_1000acd530 = inttoptr i32 %v1_1000acd529 to i32*
  %v3_1000acd531 = load i32, i32* %v2_1000acd530, align 4
  %v1_1000acd832 = icmp eq i32 %v3_1000acd531, 0
  br i1 %v1_1000acd832, label %dec_label_pc_1000ace0, label %dec_label_pc_1000acdc

dec_label_pc_1000acbf:                            ; preds = %dec_label_pc_1000acb1
  store i32 %v0_1000acb3, i32* %v2_1000acb8, align 4
  br label %dec_label_pc_1000ace3

dec_label_pc_1000acc4:                            ; preds = %dec_label_pc_1000ac96
  %v0_1000aca0 = load i32, i32* @esp, align 4
  %v0_1000acc4 = load i32, i32* @edi, align 4
  %v2_1000acc4 = add i32 %v0_1000aca0, 4
  %v3_1000acc4 = inttoptr i32 %v2_1000acc4 to i32*
  store i32 %v0_1000acc4, i32* %v3_1000acc4, align 4
  %v0_1000acc5 = load i32, i32* @esi, align 4
  store i32 %v0_1000acc5, i32* @ecx, align 4
  %v1_1000acc7 = call i32 @function_1000a8c0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000acc7, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ac1a, i32* @ebx, align 4
  br label %dec_label_pc_1000ace3

dec_label_pc_1000acdc:                            ; preds = %dec_label_pc_1000acd5.preheader, %dec_label_pc_1000acdc
  %v3_1000acd533 = phi i32 [ %v3_1000acd5, %dec_label_pc_1000acdc ], [ %v3_1000acd531, %dec_label_pc_1000acd5.preheader ]
  store i32 %v3_1000acd533, i32* @ecx, align 4
  %v1_1000acd5 = add i32 %v3_1000acd533, 20
  %v2_1000acd5 = inttoptr i32 %v1_1000acd5 to i32*
  %v3_1000acd5 = load i32, i32* %v2_1000acd5, align 4
  %v1_1000acd8 = icmp eq i32 %v3_1000acd5, 0
  br i1 %v1_1000acd8, label %dec_label_pc_1000ace0, label %dec_label_pc_1000acdc

dec_label_pc_1000ace0:                            ; preds = %dec_label_pc_1000acdc, %dec_label_pc_1000acd5.preheader
  %v2_1000acd5.lcssa = phi i32* [ %v2_1000acd530, %dec_label_pc_1000acd5.preheader ], [ %v2_1000acd5, %dec_label_pc_1000acdc ]
  store i32 %v0_1000acb3, i32* %v2_1000acd5.lcssa, align 4
  br label %dec_label_pc_1000ace3

dec_label_pc_1000ace3:                            ; preds = %dec_label_pc_1000ace0, %dec_label_pc_1000acc4, %dec_label_pc_1000acbf
  %v0_1000ace3 = load i32, i32* @edi, align 4
  %v1_1000ace3 = add i32 %v0_1000ace3, 20
  %v2_1000ace3 = inttoptr i32 %v1_1000ace3 to i32*
  %v3_1000ace3 = load i32, i32* %v2_1000ace3, align 4
  store i32 %v3_1000ace3, i32* @edi, align 4
  %v1_1000ace6 = icmp eq i32 %v3_1000ace3, 0
  %v1_1000ace8 = icmp eq i1 %v1_1000ace6, false
  br i1 %v1_1000ace8, label %dec_label_pc_1000ac47, label %dec_label_pc_1000acee

dec_label_pc_1000acee:                            ; preds = %dec_label_pc_1000ace3
  store i32 %v0_1000acf4, i32* %eax.global-to-local, align 4
  store i32 %v3_1000ac1c, i32* @ecx, align 4
  br label %dec_label_pc_1000acf4

dec_label_pc_1000acf4:                            ; preds = %dec_label_pc_1000acee, %dec_label_pc_1000ac34
  %v1_1000acf4 = add nuw nsw i32 %v0_1000acf4, 1
  store i32 %v1_1000acf4, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_1000acf4, %v3_1000ac1c
  br i1 %exitcond, label %dec_label_pc_1000ad00, label %dec_label_pc_1000ac34

dec_label_pc_1000ad00:                            ; preds = %dec_label_pc_1000acf4
  %v0_1000ad00 = load i32, i32* @esp, align 4
  %v3_1000ad00 = add i32 %v0_1000ad00, 4
  %v1_1000ad01 = inttoptr i32 %v3_1000ad00 to i32*
  %v2_1000ad01 = load i32, i32* %v1_1000ad01, align 4
  store i32 %v2_1000ad01, i32* @esi, align 4
  %v2_1000ad05.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000ad02

dec_label_pc_1000ad02:                            ; preds = %dec_label_pc_1000ad00, %dec_label_pc_1000ac10
  %v0_1000ad06 = phi i32 [ %v3_1000ac1c, %dec_label_pc_1000ad00 ], [ 0, %dec_label_pc_1000ac10 ]
  %v2_1000ad05 = phi i32 [ %v2_1000ad05.pre, %dec_label_pc_1000ad00 ], [ %v0_1000ac10, %dec_label_pc_1000ac10 ]
  store i32 %v2_1000ad05, i32* @ebp, align 4
  ret i32 %v0_1000ad06
}

define i32 @function_1000ad10(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000ad10:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-7 = alloca i8, align 1
  %stack_var_-6 = alloca i8, align 1
  %stack_var_-5 = alloca i8, align 1
  %tmp58 = call i64 @__decompiler_undefined_function_10()
  %v0_1000ad17 = load i32, i32* @ecx, align 4
  store i32 %v0_1000ad17, i32* %ebx.global-to-local, align 4
  %v1_1000ad1e = icmp eq i32 %v0_1000ad17, 0
  br i1 %v1_1000ad1e, label %dec_label_pc_1000ad31, label %dec_label_pc_1000ad22

dec_label_pc_1000ad22:                            ; preds = %dec_label_pc_1000ad10
  %v1_1000ad22 = add i32 %v0_1000ad17, 18
  %v2_1000ad22 = inttoptr i32 %v1_1000ad22 to i16*
  %v3_1000ad22 = load i16, i16* %v2_1000ad22, align 2
  %v4_1000ad22 = zext i16 %v3_1000ad22 to i32
  store i32 %v4_1000ad22, i32* @ecx, align 4
  %v1_1000ad26 = add i32 %v0_1000ad17, 3
  %v2_1000ad26 = inttoptr i32 %v1_1000ad26 to i8*
  %v3_1000ad26 = load i8, i8* %v2_1000ad26, align 1
  %v4_1000ad26 = zext i8 %v3_1000ad26 to i32
  store i32 %v4_1000ad26, i32* %eax.global-to-local, align 4
  %v2_1000ad2a = mul nuw nsw i32 %v4_1000ad22, 256
  store i32 %v2_1000ad2a, i32* @ecx, align 4
  %v2_1000ad2d = or i32 %v4_1000ad26, %v2_1000ad2a
  br label %dec_label_pc_1000ad34

dec_label_pc_1000ad31:                            ; preds = %dec_label_pc_1000ad10
  br label %dec_label_pc_1000ad34

dec_label_pc_1000ad34:                            ; preds = %dec_label_pc_1000ad31, %dec_label_pc_1000ad22
  %v0_1000ad3e = phi i32 [ -1, %dec_label_pc_1000ad31 ], [ %v2_1000ad2d, %dec_label_pc_1000ad22 ]
  store i32 %v0_1000ad3e, i32* @ecx, align 4
  %v0_1000ad34 = load i32, i32* @global_var_1002854c.422, align 4
  store i32 %v0_1000ad34, i32* %eax.global-to-local, align 4
  %v5_1000ad3c = icmp slt i32 %v0_1000ad34, 64
  br i1 %v5_1000ad3c, label %dec_label_pc_1000ad3e, label %dec_label_pc_1000ad4a

dec_label_pc_1000ad3e:                            ; preds = %dec_label_pc_1000ad34
  %v2_1000ad3e = mul i32 %v0_1000ad34, 4
  %v3_1000ad3e = add i32 %v2_1000ad3e, ptrtoint (i32* @global_var_10028448.416 to i32)
  %v4_1000ad3e = inttoptr i32 %v3_1000ad3e to i32*
  store i32 %v0_1000ad3e, i32* %v4_1000ad3e, align 4
  %v0_1000ad45 = load i32, i32* @global_var_1002854c.422, align 4
  store i32 %v0_1000ad45, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000ad4a

dec_label_pc_1000ad4a:                            ; preds = %dec_label_pc_1000ad34, %dec_label_pc_1000ad3e
  %v0_1000ad5b = phi i32 [ %v0_1000ad34, %dec_label_pc_1000ad34 ], [ %v0_1000ad45, %dec_label_pc_1000ad3e ]
  %v1_1000ad4a = add i32 %v0_1000ad5b, 1
  store i32 %v1_1000ad4a, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ad5b, i32* @ecx, align 4
  store i32 %v1_1000ad4a, i32* @global_var_1002854c.422, align 4
  %v0_1000ad53 = load i32, i32* @global_var_10028550.423, align 4
  %v8_1000ad59 = icmp sgt i32 %v0_1000ad53, %v0_1000ad5b
  br i1 %v8_1000ad59, label %dec_label_pc_1000ad61, label %dec_label_pc_1000ad5b

dec_label_pc_1000ad5b:                            ; preds = %dec_label_pc_1000ad4a
  store i32 %v0_1000ad5b, i32* @global_var_10028550.423, align 4
  br label %dec_label_pc_1000ad61

dec_label_pc_1000ad61:                            ; preds = %dec_label_pc_1000ad5b, %dec_label_pc_1000ad4a
  %v0_1000ad8215 = phi i32 [ %v0_1000ad5b, %dec_label_pc_1000ad5b ], [ %v0_1000ad53, %dec_label_pc_1000ad4a ]
  %v5_1000ad64 = icmp slt i32 %v1_1000ad4a, 64
  br i1 %v5_1000ad64, label %dec_label_pc_1000ad66, label %dec_label_pc_1000ad76

dec_label_pc_1000ad66:                            ; preds = %dec_label_pc_1000ad61
  %v1_1000ad66 = mul i32 %v1_1000ad4a, 4
  %v2_1000ad66 = add i32 %v1_1000ad66, ptrtoint (i32* @global_var_10028448.416 to i32)
  %v3_1000ad66 = inttoptr i32 %v2_1000ad66 to i32*
  store i32 -1, i32* %v3_1000ad66, align 4
  %v0_1000ad71 = load i32, i32* @global_var_1002854c.422, align 4
  store i32 %v0_1000ad71, i32* %eax.global-to-local, align 4
  %v0_1000ad82.pre = load i32, i32* @global_var_10028550.423, align 4
  br label %dec_label_pc_1000ad76

dec_label_pc_1000ad76:                            ; preds = %dec_label_pc_1000ad61, %dec_label_pc_1000ad66
  %v0_1000ad82 = phi i32 [ %v0_1000ad8215, %dec_label_pc_1000ad61 ], [ %v0_1000ad82.pre, %dec_label_pc_1000ad66 ]
  %v0_1000ad8a = phi i32 [ %v1_1000ad4a, %dec_label_pc_1000ad61 ], [ %v0_1000ad71, %dec_label_pc_1000ad66 ]
  %v1_1000ad76 = add i32 %v0_1000ad8a, 1
  store i32 %v1_1000ad76, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ad8a, i32* %esi.global-to-local, align 4
  store i32 %v1_1000ad76, i32* @global_var_1002854c.422, align 4
  %v8_1000ad88 = icmp sgt i32 %v0_1000ad82, %v0_1000ad8a
  br i1 %v8_1000ad88, label %dec_label_pc_1000ad90, label %dec_label_pc_1000ad8a

dec_label_pc_1000ad8a:                            ; preds = %dec_label_pc_1000ad76
  store i32 %v0_1000ad8a, i32* @global_var_10028550.423, align 4
  br label %dec_label_pc_1000ad90

dec_label_pc_1000ad90:                            ; preds = %dec_label_pc_1000ad8a, %dec_label_pc_1000ad76
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_1000ad93 = ptrtoint i8* %stack_var_-5 to i32
  %v2_1000ad97 = ptrtoint i8* %stack_var_-6 to i32
  store i32 %v2_1000ad97, i32* @edx, align 4
  %v0_1000ad9c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000ad9c, i32* @ecx, align 4
  store i8 1, i8* %stack_var_-7, align 1
  %v2_1000ada2 = bitcast i8* %stack_var_-6 to i32*
  %v4_1000ada2 = bitcast i8* %stack_var_-5 to i32*
  %v5_1000ada2 = call i32 @function_1000a1e0(i32 %arg2, i32* %v2_1000ada2, i32* %v4_1000ada2)
  store i32 %v5_1000ada2, i32* %eax.global-to-local, align 4
  %v1_1000ada7 = icmp eq i32 %v5_1000ada2, 0
  br i1 %v1_1000ada7, label %dec_label_pc_1000b112, label %dec_label_pc_1000adb4.preheader

dec_label_pc_1000adb4.preheader:                  ; preds = %dec_label_pc_1000ad90
  %v2_1000aeda = ptrtoint i32* %stack_var_-40 to i32
  %v2_1000aee4 = ptrtoint i32* %stack_var_-44 to i32
  %v1_1000b091 = add i32 %arg2, 12
  %v2_1000b091 = inttoptr i32 %v1_1000b091 to i32*
  %v2_1000ae24 = ptrtoint i8* %stack_var_-7 to i32
  %v4_1000af52 = trunc i64 %tmp58 to i32
  br label %dec_label_pc_1000adb4

dec_label_pc_1000adb1:                            ; preds = %dec_label_pc_1000b0f3
  store i32 %v0_1000ad8a, i32* @esi, align 4
  br label %dec_label_pc_1000adb4

dec_label_pc_1000adb4:                            ; preds = %dec_label_pc_1000adb4.preheader, %dec_label_pc_1000adb1
  %v0_1000adcd = phi i32 [ %v5_1000ada2, %dec_label_pc_1000adb4.preheader ], [ %v2_1000b105, %dec_label_pc_1000adb1 ]
  %v1_1000adb4 = inttoptr i32 %v0_1000adcd to i8*
  %v2_1000adb4 = load i8, i8* %v1_1000adb4, align 1
  %v3_1000adb4 = zext i8 %v2_1000adb4 to i32
  %v4_1000adb4 = load i32, i32* @ecx, align 4
  %v5_1000adb4 = and i32 %v4_1000adb4, -256
  %v6_1000adb4 = or i32 %v5_1000adb4, %v3_1000adb4
  store i32 %v6_1000adb4, i32* @ecx, align 4
  %v5_1000adb6 = icmp eq i8 %v2_1000adb4, 0
  br i1 %v5_1000adb6, label %dec_label_pc_1000b119, label %dec_label_pc_1000adbe

dec_label_pc_1000adbe:                            ; preds = %dec_label_pc_1000adb4
  %v11_1000adbe = icmp eq i8 %v2_1000adb4, 125
  %v1_1000adc1 = icmp eq i1 %v11_1000adbe, false
  br i1 %v1_1000adc1, label %dec_label_pc_1000adcd, label %dec_label_pc_1000adc3

dec_label_pc_1000adc3:                            ; preds = %dec_label_pc_1000adbe
  %v3_1000adc3 = load i8, i8* %stack_var_-6, align 1
  %v12_1000adc3 = icmp eq i8 %v3_1000adc3, 0
  br i1 %v12_1000adc3, label %dec_label_pc_1000b13d, label %dec_label_pc_1000adcd

dec_label_pc_1000adcd:                            ; preds = %dec_label_pc_1000adc3, %dec_label_pc_1000adbe
  %v1_1000adcd = load i32, i32* @esp, align 4
  %v2_1000adcd = add i32 %v1_1000adcd, -4
  %v3_1000adcd = inttoptr i32 %v2_1000adcd to i32*
  store i32 %v0_1000adcd, i32* %v3_1000adcd, align 4
  %v0_1000adce = load i32, i32* @ebx, align 4
  store i32 %v0_1000adce, i32* @ecx, align 4
  %v1_1000add0 = call i32 @function_1000a9a0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000add0, i32* %eax.global-to-local, align 4
  store i32 %v1_1000add0, i32* @edi, align 4
  %v1_1000adda = icmp eq i32 %v1_1000add0, 0
  br i1 %v1_1000adda, label %dec_label_pc_1000aded, label %dec_label_pc_1000adde

dec_label_pc_1000adde:                            ; preds = %dec_label_pc_1000adcd
  %v1_1000adde = add i32 %v1_1000add0, 18
  %v2_1000adde = inttoptr i32 %v1_1000adde to i16*
  %v3_1000adde = load i16, i16* %v2_1000adde, align 2
  %v4_1000adde = zext i16 %v3_1000adde to i32
  store i32 %v4_1000adde, i32* %eax.global-to-local, align 4
  %v1_1000ade2 = add i32 %v1_1000add0, 3
  %v2_1000ade2 = inttoptr i32 %v1_1000ade2 to i8*
  %v3_1000ade2 = load i8, i8* %v2_1000ade2, align 1
  %v4_1000ade2 = zext i8 %v3_1000ade2 to i32
  store i32 %v4_1000ade2, i32* @ecx, align 4
  %v2_1000ade6 = mul nuw nsw i32 %v4_1000adde, 256
  store i32 %v2_1000ade6, i32* %eax.global-to-local, align 4
  %v2_1000ade9 = or i32 %v4_1000ade2, %v2_1000ade6
  br label %dec_label_pc_1000adf0

dec_label_pc_1000aded:                            ; preds = %dec_label_pc_1000adcd
  br label %dec_label_pc_1000adf0

dec_label_pc_1000adf0:                            ; preds = %dec_label_pc_1000aded, %dec_label_pc_1000adde
  %storemerge = phi i32 [ %v2_1000ade9, %dec_label_pc_1000adde ], [ -1, %dec_label_pc_1000aded ]
  store i32 %arg2, i32* @ecx, align 4
  store i32 %v2_1000ad93, i32* @edx, align 4
  %v1_1000adf6 = load i32, i32* @esi, align 4
  %v2_1000adf6 = mul i32 %v1_1000adf6, 4
  %v3_1000adf6 = add i32 %v2_1000adf6, ptrtoint (i32* @global_var_10028448.416 to i32)
  %v4_1000adf6 = inttoptr i32 %v3_1000adf6 to i32*
  store i32 %storemerge, i32* %v4_1000adf6, align 4
  %v1_1000adfd = load i32, i32* @esp, align 4
  %v2_1000adfd = add i32 %v1_1000adfd, -4
  %v3_1000adfd = inttoptr i32 %v2_1000adfd to i32*
  store i32 %v2_1000ad93, i32* %v3_1000adfd, align 4
  store i32 %v2_1000ad97, i32* %eax.global-to-local, align 4
  %v2_1000ae01 = add i32 %v1_1000adfd, -8
  %v3_1000ae01 = inttoptr i32 %v2_1000ae01 to i32*
  store i32 %v2_1000ad97, i32* %v3_1000ae01, align 4
  %v0_1000ae02 = load i32, i32* @ecx, align 4
  %v2_1000ae02 = add i32 %v1_1000adfd, -12
  %v3_1000ae02 = inttoptr i32 %v2_1000ae02 to i32*
  store i32 %v0_1000ae02, i32* %v3_1000ae02, align 4
  %v0_1000ae03 = load i32, i32* @ebx, align 4
  store i32 %v0_1000ae03, i32* @ecx, align 4
  %v1_1000ae05 = call i32 @function_1000a1e0(i32 %v1_1000add0, i32* nonnull @5, i32* nonnull @5)
  store i32 %v1_1000ae05, i32* %eax.global-to-local, align 4
  %v3_1000ae0a = load i8, i8* %stack_var_-5, align 1
  %v12_1000ae0a = icmp eq i8 %v3_1000ae0a, 0
  store i32 %v1_1000ae05, i32* @esi, align 4
  br i1 %v12_1000ae0a, label %dec_label_pc_1000ae67, label %dec_label_pc_1000ae15

dec_label_pc_1000ae15:                            ; preds = %dec_label_pc_1000adf0
  %v1_1000ae15 = icmp eq i32 %v1_1000ae05, 0
  br i1 %v1_1000ae15, label %dec_label_pc_1000b120, label %dec_label_pc_1000ae1d

dec_label_pc_1000ae1d:                            ; preds = %dec_label_pc_1000ae15
  store i32 %arg3, i32* @edx, align 4
  %v0_1000ae20 = load i32, i32* @esp, align 4
  %v1_1000ae20 = add i32 %v0_1000ae20, -4
  %v2_1000ae20 = inttoptr i32 %v1_1000ae20 to i32*
  store i32 0, i32* %v2_1000ae20, align 4
  %v0_1000ae22 = load i32, i32* @edx, align 4
  %v2_1000ae22 = add i32 %v0_1000ae20, -8
  %v3_1000ae22 = inttoptr i32 %v2_1000ae22 to i32*
  store i32 %v0_1000ae22, i32* %v3_1000ae22, align 4
  %v0_1000ae23 = load i32, i32* @esi, align 4
  %v2_1000ae23 = add i32 %v0_1000ae20, -12
  %v3_1000ae23 = inttoptr i32 %v2_1000ae23 to i32*
  store i32 %v0_1000ae23, i32* %v3_1000ae23, align 4
  store i32 %v2_1000ae24, i32* @eax, align 4
  %v2_1000ae27 = add i32 %v0_1000ae20, -16
  %v3_1000ae27 = inttoptr i32 %v2_1000ae27 to i32*
  store i32 %v2_1000ae24, i32* %v3_1000ae27, align 4
  store i32 ptrtoint (i32* @global_var_1002be40.418 to i32), i32* @ecx, align 4
  store i8 0, i8* %stack_var_-7, align 1
  %v1_1000ae31 = inttoptr i32 %v1_1000ae05 to i32*
  %v5_1000ae31 = call i32 @function_1000f850(i32* %v1_1000ae31, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v5_1000ae31, i32* %eax.global-to-local, align 4
  %v4_1000ae36 = trunc i32 %v5_1000ae31 to i8
  %v5_1000ae36 = icmp eq i8 %v4_1000ae36, 0
  %v1_1000ae38 = icmp eq i1 %v5_1000ae36, false
  br i1 %v1_1000ae38, label %dec_label_pc_1000ae49, label %dec_label_pc_1000ae3a

dec_label_pc_1000ae3a:                            ; preds = %dec_label_pc_1000ae1d
  %v0_1000ae3a = load i32, i32* @esp, align 4
  %v1_1000ae3a = add i32 %v0_1000ae3a, -4
  %v2_1000ae3a = inttoptr i32 %v1_1000ae3a to i32*
  store i32 ptrtoint ([32 x i8]* @global_var_10023c44.419 to i32), i32* %v2_1000ae3a, align 4
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000ae44 = call i32 @function_1000a060(i8 ptrtoint (i32* @5 to i8))
  store i32 %v1_1000ae44, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000ae49

dec_label_pc_1000ae49:                            ; preds = %dec_label_pc_1000ae3a, %dec_label_pc_1000ae1d
  %v3_1000ae49 = load i8, i8* %stack_var_-7, align 1
  %v4_1000ae49 = zext i8 %v3_1000ae49 to i32
  %v5_1000ae49 = load i32, i32* @ecx, align 4
  %v6_1000ae49 = and i32 %v5_1000ae49, -256
  %v7_1000ae49 = or i32 %v6_1000ae49, %v4_1000ae49
  store i32 %v7_1000ae49, i32* @ecx, align 4
  store i32 %v2_1000ad93, i32* @edx, align 4
  %v1_1000ae4f = load i32, i32* @esp, align 4
  %v2_1000ae4f = add i32 %v1_1000ae4f, -4
  %v3_1000ae4f = inttoptr i32 %v2_1000ae4f to i32*
  store i32 %v2_1000ad93, i32* %v3_1000ae4f, align 4
  %v0_1000ae50 = load i32, i32* @ecx, align 4
  %v1_1000ae50 = trunc i32 %v0_1000ae50 to i8
  store i8 %v1_1000ae50, i8* %stack_var_-7, align 1
  store i32 %arg2, i32* @ecx, align 4
  store i32 %v2_1000ad97, i32* %eax.global-to-local, align 4
  %v2_1000ae59 = add i32 %v1_1000ae4f, -8
  %v3_1000ae59 = inttoptr i32 %v2_1000ae59 to i32*
  store i32 %v2_1000ad97, i32* %v3_1000ae59, align 4
  %v0_1000ae5a = load i32, i32* @ecx, align 4
  %v2_1000ae5a = add i32 %v1_1000ae4f, -12
  %v3_1000ae5a = inttoptr i32 %v2_1000ae5a to i32*
  store i32 %v0_1000ae5a, i32* %v3_1000ae5a, align 4
  %v0_1000ae5b = load i32, i32* @ebx, align 4
  store i32 %v0_1000ae5b, i32* @ecx, align 4
  %sext = mul i32 %v0_1000ae50, 16777216
  %v1_1000ae5d = sdiv i32 %sext, 16777216
  %v2_1000ae5d = call i32 @function_1000a1e0(i32 %v1_1000ae5d, i32* nonnull @5, i32* nonnull @5)
  store i32 %v2_1000ae5d, i32* %eax.global-to-local, align 4
  store i32 %v2_1000ae5d, i32* @esi, align 4
  br label %dec_label_pc_1000ae67

dec_label_pc_1000ae67:                            ; preds = %dec_label_pc_1000ae49, %dec_label_pc_1000adf0
  %v4_1000ae6f = phi i32 [ %v1_1000ae05, %dec_label_pc_1000adf0 ], [ %v2_1000ae5d, %dec_label_pc_1000ae49 ]
  %v1_1000ae67 = icmp eq i32 %v4_1000ae6f, 0
  br i1 %v1_1000ae67, label %dec_label_pc_1000b120, label %dec_label_pc_1000ae6f

dec_label_pc_1000ae6f:                            ; preds = %dec_label_pc_1000ae67
  %v1_1000ae6f = inttoptr i32 %v4_1000ae6f to i8*
  %v2_1000ae6f = load i8, i8* %v1_1000ae6f, align 1
  %v3_1000ae6f = zext i8 %v2_1000ae6f to i32
  %v5_1000ae6f = and i32 %v4_1000ae6f, -256
  %v6_1000ae6f = or i32 %v3_1000ae6f, %v5_1000ae6f
  store i32 %v6_1000ae6f, i32* %eax.global-to-local, align 4
  %v3_1000ae71 = load i8, i8* %stack_var_-6, align 1
  %v4_1000ae716 = zext i8 %v3_1000ae71 to i32
  %v6_1000ae71 = load i32, i32* @ecx, align 4
  %v7_1000ae71 = and i32 %v6_1000ae71, -256
  %v8_1000ae71 = or i32 %v7_1000ae71, %v4_1000ae716
  store i32 %v8_1000ae71, i32* @ecx, align 4
  %v11_1000ae74 = icmp eq i8 %v2_1000ae6f, 125
  %v1_1000ae76 = icmp eq i1 %v11_1000ae74, false
  br i1 %v1_1000ae76, label %dec_label_pc_1000ae80, label %dec_label_pc_1000ae78

dec_label_pc_1000ae78:                            ; preds = %dec_label_pc_1000ae6f
  %v5_1000ae78 = icmp eq i8 %v3_1000ae71, 0
  br i1 %v5_1000ae78, label %dec_label_pc_1000b127, label %dec_label_pc_1000ae80

dec_label_pc_1000ae80:                            ; preds = %dec_label_pc_1000ae78, %dec_label_pc_1000ae6f
  %v11_1000ae80 = icmp eq i8 %v2_1000ae6f, 123
  %v1_1000ae82 = icmp eq i1 %v11_1000ae80, false
  br i1 %v1_1000ae82, label %dec_label_pc_1000aeae, label %dec_label_pc_1000ae84

dec_label_pc_1000ae84:                            ; preds = %dec_label_pc_1000ae80
  %v5_1000ae84 = icmp eq i8 %v3_1000ae71, 0
  %v1_1000ae86 = icmp eq i1 %v5_1000ae84, false
  br i1 %v1_1000ae86, label %dec_label_pc_1000aeae, label %dec_label_pc_1000ae88

dec_label_pc_1000ae88:                            ; preds = %dec_label_pc_1000ae84
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ad8a, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_1000ae91 = load i32, i32* @esp, align 4
  %v2_1000ae91 = add i32 %v1_1000ae91, -4
  %v3_1000ae91 = inttoptr i32 %v2_1000ae91 to i32*
  store i32 %arg3, i32* %v3_1000ae91, align 4
  %v0_1000ae92 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000ae92 = mul i32 %v0_1000ae92, 4
  %v2_1000ae92 = add i32 %v1_1000ae92, ptrtoint (i32* @global_var_10028448.416 to i32)
  %v3_1000ae92 = inttoptr i32 %v2_1000ae92 to i32*
  store i32 -1, i32* %v3_1000ae92, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v0_1000aea0 = load i32, i32* @ecx, align 4
  %v1_1000aea0 = load i32, i32* @esp, align 4
  %v2_1000aea0 = add i32 %v1_1000aea0, -4
  %v3_1000aea0 = inttoptr i32 %v2_1000aea0 to i32*
  store i32 %v0_1000aea0, i32* %v3_1000aea0, align 4
  %v0_1000aea1 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000aea1 = add i32 %v1_1000aea0, -8
  %v3_1000aea1 = inttoptr i32 %v2_1000aea1 to i32*
  store i32 %v0_1000aea1, i32* %v3_1000aea1, align 4
  %v0_1000aea2 = load i32, i32* @edi, align 4
  store i32 %v0_1000aea2, i32* @ecx, align 4
  %v3_1000aea4 = call i32 @function_1000ad10(i32 %v4_1000ae6f, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v3_1000aea4, i32* @eax, align 4
  br label %dec_label_pc_1000b0ca

dec_label_pc_1000aeae:                            ; preds = %dec_label_pc_1000ae84, %dec_label_pc_1000ae80
  %v3_1000aeae = load i8, i8* %stack_var_-5, align 1
  %v12_1000aeae = icmp eq i8 %v3_1000aeae, 0
  %v1_1000aeb2 = icmp eq i1 %v12_1000aeae, false
  br i1 %v1_1000aeb2, label %dec_label_pc_1000b12e, label %dec_label_pc_1000aeb8

dec_label_pc_1000aeb8:                            ; preds = %dec_label_pc_1000aeae
  %v0_1000aeb8 = load i32, i32* @edi, align 4
  %v1_1000aeb8 = add i32 %v0_1000aeb8, 4
  %v2_1000aeb8 = inttoptr i32 %v1_1000aeb8 to i32*
  %v3_1000aeb8 = load i32, i32* %v2_1000aeb8, align 4
  store i32 %v3_1000aeb8, i32* %eax.global-to-local, align 4
  %v1_1000aebb = icmp eq i32 %v3_1000aeb8, 0
  br i1 %v1_1000aebb, label %dec_label_pc_1000aecf, label %dec_label_pc_1000aebf

dec_label_pc_1000aebf:                            ; preds = %dec_label_pc_1000aeb8
  %v1_1000aebf = load i32, i32* @esp, align 4
  %v2_1000aebf = add i32 %v1_1000aebf, -4
  %v3_1000aebf = inttoptr i32 %v2_1000aebf to i32*
  store i32 %v3_1000aeb8, i32* %v3_1000aebf, align 4
  %v1_1000aec0 = call i32 @"??3@YAXPAX@Z"(i32 %v4_1000ae6f)
  store i32 %v1_1000aec0, i32* %eax.global-to-local, align 4
  %v0_1000aec8 = load i32, i32* @edi, align 4
  %v1_1000aec8 = add i32 %v0_1000aec8, 4
  %v2_1000aec8 = inttoptr i32 %v1_1000aec8 to i32*
  store i32 0, i32* %v2_1000aec8, align 4
  %v0_1000aecf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000aecf

dec_label_pc_1000aecf:                            ; preds = %dec_label_pc_1000aebf, %dec_label_pc_1000aeb8
  %v0_1000aecf = phi i32 [ %v0_1000aecf.pre, %dec_label_pc_1000aebf ], [ %v4_1000ae6f, %dec_label_pc_1000aeb8 ]
  %v1_1000aecf = load i32, i32* @esp, align 4
  %v2_1000aecf = add i32 %v1_1000aecf, -4
  %v3_1000aecf = inttoptr i32 %v2_1000aecf to i32*
  store i32 %v0_1000aecf, i32* %v3_1000aecf, align 4
  %v1_1000aed0 = call i32 @function_10009450(i32 ptrtoint (i32* @5 to i32))
  %v0_1000aed8 = load i32, i32* @esp, align 4
  %v1_1000aed8 = add i32 %v0_1000aed8, -4
  %v2_1000aed8 = inttoptr i32 %v1_1000aed8 to i32*
  store i32 10, i32* %v2_1000aed8, align 4
  store i32 %v2_1000aeda, i32* %eax.global-to-local, align 4
  %v2_1000aedd = add i32 %v0_1000aed8, -8
  %v3_1000aedd = inttoptr i32 %v2_1000aedd to i32*
  store i32 %v2_1000aeda, i32* %v3_1000aedd, align 4
  %v0_1000aede = load i32, i32* @esi, align 4
  %v2_1000aede = add i32 %v0_1000aed8, -12
  %v3_1000aede = inttoptr i32 %v2_1000aede to i32*
  store i32 %v0_1000aede, i32* %v3_1000aede, align 4
  %v1_1000aedf = call i32 @__strtoi64(i32 %v1_1000aed0)
  store i32 %v1_1000aedf, i32* %eax.global-to-local, align 4
  store i32 %v2_1000aee4, i32* @ecx, align 4
  %v1_1000aee7 = load i32, i32* @esp, align 4
  %v2_1000aee7 = add i32 %v1_1000aee7, -4
  %v3_1000aee7 = inttoptr i32 %v2_1000aee7 to i32*
  store i32 %v2_1000aee4, i32* %v3_1000aee7, align 4
  %v0_1000aee8 = load i32, i32* @esi, align 4
  %v2_1000aee8 = add i32 %v1_1000aee7, -8
  %v3_1000aee8 = inttoptr i32 %v2_1000aee8 to i32*
  store i32 %v0_1000aee8, i32* %v3_1000aee8, align 4
  %v0_1000aee9 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000aee9, i32* %ebx.global-to-local, align 4
  %v2_1000aeeb = call i32 @function_10012c64(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000aeeb, i32* %eax.global-to-local, align 4
  %v0_1000aef0 = load i3, i3* @fpu_stat_TOP, align 1
  %v1_1000aef0 = load x86_fp80, x86_fp80* @st7, align 4
  %v4_1000aef0 = fptrunc x86_fp80 %v1_1000aef0 to float
  %v6_1000aef0 = add i3 %v0_1000aef0, 1
  store i3 %v6_1000aef0, i3* @fpu_stat_TOP, align 1
  %v0_1000aef6 = load i32, i32* %ebx.global-to-local, align 4
  %v10_1000aef6 = icmp eq i32 %v0_1000aef6, 2147483647
  br i1 %v10_1000aef6, label %dec_label_pc_1000af06, label %dec_label_pc_1000aefe

dec_label_pc_1000aefe:                            ; preds = %dec_label_pc_1000aecf
  %v9_1000aefe = icmp eq i32 %v0_1000aef6, -2147483648
  %v1_1000af04 = icmp eq i1 %v9_1000aefe, false
  br i1 %v1_1000af04, label %dec_label_pc_1000af14, label %dec_label_pc_1000af06

dec_label_pc_1000af06:                            ; preds = %dec_label_pc_1000aefe, %dec_label_pc_1000aecf
  %v0_1000af06 = call i32* @__errno()
  %v2_1000af06 = ptrtoint i32* %v0_1000af06 to i32
  store i32 %v2_1000af06, i32* %eax.global-to-local, align 4
  %v2_1000af0b = load i32, i32* %v0_1000af06, align 4
  %v12_1000af0b = icmp eq i32 %v2_1000af0b, 34
  br i1 %v12_1000af0b, label %dec_label_pc_1000af18, label %dec_label_pc_1000af14

dec_label_pc_1000af14:                            ; preds = %dec_label_pc_1000af06, %dec_label_pc_1000aefe
  %v4_1000af1818 = phi i32 [ %v2_1000af06, %dec_label_pc_1000af06 ], [ %v2_1000aeeb, %dec_label_pc_1000aefe ]
  br label %dec_label_pc_1000af18

dec_label_pc_1000af18:                            ; preds = %dec_label_pc_1000af14, %dec_label_pc_1000af06
  %v4_1000af18 = phi i32 [ %v2_1000af06, %dec_label_pc_1000af06 ], [ %v4_1000af1818, %dec_label_pc_1000af14 ]
  %stack_var_-8.0 = phi i8 [ 1, %dec_label_pc_1000af06 ], [ 0, %dec_label_pc_1000af14 ]
  %v0_1000af18 = load i32, i32* @esi, align 4
  %v1_1000af18 = inttoptr i32 %v0_1000af18 to i8*
  %v2_1000af18 = load i8, i8* %v1_1000af18, align 1
  %v3_1000af18 = zext i8 %v2_1000af18 to i32
  %v5_1000af18 = and i32 %v4_1000af18, -256
  %v6_1000af18 = or i32 %v3_1000af18, %v5_1000af18
  store i32 %v6_1000af18, i32* %eax.global-to-local, align 4
  store i32 %v1_1000aed0, i32* @ecx, align 4
  %v5_1000af1d = icmp eq i8 %v2_1000af18, 0
  br i1 %v5_1000af1d, label %dec_label_pc_1000b06d, label %dec_label_pc_1000af25

dec_label_pc_1000af25:                            ; preds = %dec_label_pc_1000af18
  %v10_1000af25 = icmp eq i32 %v1_1000aed0, 18
  %v1_1000af28 = icmp eq i1 %v10_1000af25, false
  br i1 %v1_1000af28, label %dec_label_pc_1000b037, label %dec_label_pc_1000af2e

dec_label_pc_1000af2e:                            ; preds = %dec_label_pc_1000af25
  %v10_1000af2e = icmp eq i8 %v2_1000af18, 48
  %v1_1000af30 = icmp eq i1 %v10_1000af2e, false
  br i1 %v1_1000af30, label %dec_label_pc_1000b037, label %dec_label_pc_1000af36

dec_label_pc_1000af36:                            ; preds = %dec_label_pc_1000af2e
  %v1_1000af36 = add i32 %v0_1000af18, 1
  %v2_1000af36 = inttoptr i32 %v1_1000af36 to i8*
  %v3_1000af36 = load i8, i8* %v2_1000af36, align 1
  %v13_1000af36 = icmp eq i8 %v3_1000af36, 120
  %v1_1000af3a = icmp eq i1 %v13_1000af36, false
  br i1 %v1_1000af3a, label %dec_label_pc_1000b037, label %dec_label_pc_1000af40

dec_label_pc_1000af40:                            ; preds = %dec_label_pc_1000af36
  %v1_1000af40 = add i32 %v0_1000af18, 3
  store i32 %v1_1000af40, i32* %esi.global-to-local, align 4
  %v0_1000af43 = load i128, i128* @xmm0, align 8
  %v2_1000af43 = call i128 @__asm_xorpd(i128 %v0_1000af43, i128 %v0_1000af43)
  store i128 %v2_1000af43, i128* @xmm0, align 8
  call void @__asm_movlpd(i64 %tmp58, i128 %v2_1000af43)
  store i32 %v4_1000af52, i32* %esi.global-to-local, align 4
  %v5_1000af63.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000af60

dec_label_pc_1000af60:                            ; preds = %dec_label_pc_1000aff1, %dec_label_pc_1000af40
  %v5_1000af63 = phi i32 [ %v5_1000af63.pre, %dec_label_pc_1000af40 ], [ %v1_1000aff4, %dec_label_pc_1000aff1 ]
  %v0_1000af86 = phi i32 [ %v4_1000af52, %dec_label_pc_1000af40 ], [ %v2_1000b001, %dec_label_pc_1000aff1 ]
  %v0_1000af7b = phi i32 [ %tmp34, %dec_label_pc_1000af40 ], [ %v5_1000b005, %dec_label_pc_1000aff1 ]
  %stack_var_-32.0 = phi float [ 0x36C0000000000000, %dec_label_pc_1000af40 ], [ %v22_1000b00b, %dec_label_pc_1000aff1 ]
  %stack_var_-12.0.in = phi i32 [ %v1_1000af40, %dec_label_pc_1000af40 ], [ %v5_1000b007, %dec_label_pc_1000aff1 ]
  %stack_var_-12.0 = inttoptr i32 %stack_var_-12.0.in to i8*
  store i32 %stack_var_-12.0.in, i32* %edx.global-to-local, align 4
  %v1_1000af63 = add i32 %stack_var_-12.0.in, -1
  %v2_1000af63 = inttoptr i32 %v1_1000af63 to i8*
  %v3_1000af63 = load i8, i8* %v2_1000af63, align 1
  %v4_1000af63 = zext i8 %v3_1000af63 to i32
  %v6_1000af63 = and i32 %v5_1000af63, -256
  %v7_1000af63 = or i32 %v6_1000af63, %v4_1000af63
  store i32 %v7_1000af63, i32* %eax.global-to-local, align 4
  %v7_1000af68 = icmp slt i8 %v3_1000af63, 97
  br i1 %v7_1000af68, label %dec_label_pc_1000af6e, label %dec_label_pc_1000af6a

dec_label_pc_1000af6a:                            ; preds = %dec_label_pc_1000af60
  %v2_1000af6a = add i8 %v3_1000af63, -39
  %v16_1000af6a = zext i8 %v2_1000af6a to i32
  %v19_1000af6a = or i32 %v6_1000af63, %v16_1000af6a
  store i32 %v19_1000af6a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000af74

dec_label_pc_1000af6e:                            ; preds = %dec_label_pc_1000af60
  %v7_1000af70 = icmp slt i8 %v3_1000af63, 65
  br i1 %v7_1000af70, label %dec_label_pc_1000af74, label %dec_label_pc_1000af72

dec_label_pc_1000af72:                            ; preds = %dec_label_pc_1000af6e
  %v2_1000af72 = add i8 %v3_1000af63, -7
  %v16_1000af72 = zext i8 %v2_1000af72 to i32
  %v19_1000af72 = or i32 %v6_1000af63, %v16_1000af72
  store i32 %v19_1000af72, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000af74

dec_label_pc_1000af74:                            ; preds = %dec_label_pc_1000af72, %dec_label_pc_1000af6e, %dec_label_pc_1000af6a
  %v0_1000af77 = phi i32 [ %v19_1000af72, %dec_label_pc_1000af72 ], [ %v7_1000af63, %dec_label_pc_1000af6e ], [ %v19_1000af6a, %dec_label_pc_1000af6a ]
  %v1_1000af77 = add i32 %v0_1000af77, -48
  %v1_1000af7a = ashr i32 %v1_1000af77, 31
  store i32 %v1_1000af7a, i32* %edx.global-to-local, align 4
  %v3_1000af7b = mul i32 %v0_1000af7b, 16
  %v4_1000af7b = udiv i32 %v0_1000af86, 268435456
  %v5_1000af7b = or i32 %v3_1000af7b, %v4_1000af7b
  store i32 %v5_1000af7b, i32* %edi.global-to-local, align 4
  store i32 %v1_1000af77, i32* @ecx, align 4
  store i32 %stack_var_-12.0.in, i32* %eax.global-to-local, align 4
  %v2_1000af84 = load i8, i8* %stack_var_-12.0, align 1
  %v3_1000af84 = zext i8 %v2_1000af84 to i32
  %v5_1000af84 = and i32 %stack_var_-12.0.in, -256
  %v6_1000af84 = or i32 %v3_1000af84, %v5_1000af84
  store i32 %v6_1000af84, i32* %eax.global-to-local, align 4
  %v2_1000af86 = mul i32 %v0_1000af86, 16
  store i32 %v2_1000af86, i32* %esi.global-to-local, align 4
  %v2_1000af89 = add i32 %v1_1000af77, %v2_1000af86
  %v7_1000af89 = icmp ult i32 %v2_1000af89, %v1_1000af77
  store i32 %v2_1000af89, i32* @ecx, align 4
  %v3_1000af8d = zext i1 %v7_1000af89 to i32
  %v4_1000af8d = add i32 %v1_1000af7a, %v5_1000af7b
  %v5_1000af8d = add i32 %v4_1000af8d, %v3_1000af8d
  store i32 %v5_1000af8d, i32* %ebx.global-to-local, align 4
  %v7_1000af91 = icmp slt i8 %v2_1000af84, 97
  br i1 %v7_1000af91, label %dec_label_pc_1000af97, label %dec_label_pc_1000af93

dec_label_pc_1000af93:                            ; preds = %dec_label_pc_1000af74
  %v2_1000af93 = add i8 %v2_1000af84, -39
  %v16_1000af93 = zext i8 %v2_1000af93 to i32
  %v19_1000af93 = or i32 %v16_1000af93, %v5_1000af84
  store i32 %v19_1000af93, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000af9d

dec_label_pc_1000af97:                            ; preds = %dec_label_pc_1000af74
  %v7_1000af99 = icmp slt i8 %v2_1000af84, 65
  br i1 %v7_1000af99, label %dec_label_pc_1000af9d, label %dec_label_pc_1000af9b

dec_label_pc_1000af9b:                            ; preds = %dec_label_pc_1000af97
  %v2_1000af9b = add i8 %v2_1000af84, -7
  %v16_1000af9b = zext i8 %v2_1000af9b to i32
  %v19_1000af9b = or i32 %v16_1000af9b, %v5_1000af84
  store i32 %v19_1000af9b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000af9d

dec_label_pc_1000af9d:                            ; preds = %dec_label_pc_1000af9b, %dec_label_pc_1000af97, %dec_label_pc_1000af93
  %v0_1000afa0 = phi i32 [ %v19_1000af9b, %dec_label_pc_1000af9b ], [ %v6_1000af84, %dec_label_pc_1000af97 ], [ %v19_1000af93, %dec_label_pc_1000af93 ]
  %v1_1000afa0 = add i32 %v0_1000afa0, -48
  store i32 %v1_1000afa0, i32* %eax.global-to-local, align 4
  %v1_1000afa3 = ashr i32 %v1_1000afa0, 31
  store i32 %v1_1000afa3, i32* %edx.global-to-local, align 4
  %v3_1000afa4 = mul i32 %v5_1000af8d, 16
  %v4_1000afa4 = udiv i32 %v2_1000af89, 268435456
  %v5_1000afa4 = or i32 %v3_1000afa4, %v4_1000afa4
  store i32 %v5_1000afa4, i32* %ebx.global-to-local, align 4
  %v2_1000afa8 = mul i32 %v2_1000af89, 16
  %v2_1000afad = add i32 %v1_1000afa0, %v2_1000afa8
  %v7_1000afad = icmp ult i32 %v2_1000afad, %v1_1000afa0
  store i32 %v2_1000afad, i32* %esi.global-to-local, align 4
  store i32 %stack_var_-12.0.in, i32* @ecx, align 4
  %v1_1000afb2 = add i32 %stack_var_-12.0.in, 1
  %v2_1000afb2 = inttoptr i32 %v1_1000afb2 to i8*
  %v3_1000afb2 = load i8, i8* %v2_1000afb2, align 1
  %v4_1000afb2 = zext i8 %v3_1000afb2 to i32
  %v6_1000afb2 = and i32 %v1_1000afa0, -256
  %v7_1000afb2 = or i32 %v4_1000afb2, %v6_1000afb2
  store i32 %v7_1000afb2, i32* %eax.global-to-local, align 4
  %v3_1000afb7 = zext i1 %v7_1000afad to i32
  %v4_1000afb7 = add i32 %v1_1000afa3, %v5_1000afa4
  %v5_1000afb7 = add i32 %v4_1000afb7, %v3_1000afb7
  store i32 %v5_1000afb7, i32* %edi.global-to-local, align 4
  %v7_1000afbb = icmp slt i8 %v3_1000afb2, 97
  br i1 %v7_1000afbb, label %dec_label_pc_1000afc1, label %dec_label_pc_1000afbd

dec_label_pc_1000afbd:                            ; preds = %dec_label_pc_1000af9d
  %v2_1000afbd = add i8 %v3_1000afb2, -39
  %v16_1000afbd = zext i8 %v2_1000afbd to i32
  %v19_1000afbd = or i32 %v16_1000afbd, %v6_1000afb2
  store i32 %v19_1000afbd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000afc7

dec_label_pc_1000afc1:                            ; preds = %dec_label_pc_1000af9d
  %v7_1000afc3 = icmp slt i8 %v3_1000afb2, 65
  br i1 %v7_1000afc3, label %dec_label_pc_1000afc7, label %dec_label_pc_1000afc5

dec_label_pc_1000afc5:                            ; preds = %dec_label_pc_1000afc1
  %v2_1000afc5 = add i8 %v3_1000afb2, -7
  %v16_1000afc5 = zext i8 %v2_1000afc5 to i32
  %v19_1000afc5 = or i32 %v16_1000afc5, %v6_1000afb2
  store i32 %v19_1000afc5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000afc7

dec_label_pc_1000afc7:                            ; preds = %dec_label_pc_1000afc5, %dec_label_pc_1000afc1, %dec_label_pc_1000afbd
  %v0_1000afca = phi i32 [ %v19_1000afc5, %dec_label_pc_1000afc5 ], [ %v7_1000afb2, %dec_label_pc_1000afc1 ], [ %v19_1000afbd, %dec_label_pc_1000afbd ]
  %v1_1000afca = add i32 %v0_1000afca, -48
  store i32 %v1_1000afca, i32* %eax.global-to-local, align 4
  %v1_1000afcd = ashr i32 %v1_1000afca, 31
  %v3_1000afce = mul i32 %v5_1000afb7, 16
  %v4_1000afce = udiv i32 %v2_1000afad, 268435456
  %v5_1000afce = or i32 %v3_1000afce, %v4_1000afce
  store i32 %v5_1000afce, i32* %edi.global-to-local, align 4
  store i32 %v1_1000afca, i32* @ecx, align 4
  store i32 %v1_1000afcd, i32* %ebx.global-to-local, align 4
  store i32 %stack_var_-12.0.in, i32* %edx.global-to-local, align 4
  %v1_1000afd9 = add i32 %stack_var_-12.0.in, 2
  %v2_1000afd9 = inttoptr i32 %v1_1000afd9 to i8*
  %v3_1000afd9 = load i8, i8* %v2_1000afd9, align 1
  %v4_1000afd9 = zext i8 %v3_1000afd9 to i32
  %v6_1000afd9 = and i32 %v1_1000afca, -256
  %v7_1000afd9 = or i32 %v4_1000afd9, %v6_1000afd9
  store i32 %v7_1000afd9, i32* %eax.global-to-local, align 4
  %v2_1000afdc = mul i32 %v2_1000afad, 16
  store i32 %v2_1000afdc, i32* %esi.global-to-local, align 4
  %v2_1000afdf = add i32 %v1_1000afca, %v2_1000afdc
  %v7_1000afdf = icmp ult i32 %v2_1000afdf, %v1_1000afca
  store i32 %v2_1000afdf, i32* @ecx, align 4
  %v3_1000afe1 = zext i1 %v7_1000afdf to i32
  %v4_1000afe1 = add i32 %v1_1000afcd, %v5_1000afce
  %v5_1000afe1 = add i32 %v4_1000afe1, %v3_1000afe1
  store i32 %v5_1000afe1, i32* %ebx.global-to-local, align 4
  %v7_1000afe5 = icmp slt i8 %v3_1000afd9, 97
  br i1 %v7_1000afe5, label %dec_label_pc_1000afeb, label %dec_label_pc_1000afe7

dec_label_pc_1000afe7:                            ; preds = %dec_label_pc_1000afc7
  %v2_1000afe7 = add i8 %v3_1000afd9, -39
  %v16_1000afe7 = zext i8 %v2_1000afe7 to i32
  %v19_1000afe7 = or i32 %v16_1000afe7, %v6_1000afd9
  store i32 %v19_1000afe7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000aff1

dec_label_pc_1000afeb:                            ; preds = %dec_label_pc_1000afc7
  %v7_1000afed = icmp slt i8 %v3_1000afd9, 65
  br i1 %v7_1000afed, label %dec_label_pc_1000aff1, label %dec_label_pc_1000afef

dec_label_pc_1000afef:                            ; preds = %dec_label_pc_1000afeb
  %v2_1000afef = add i8 %v3_1000afd9, -7
  %v16_1000afef = zext i8 %v2_1000afef to i32
  %v19_1000afef = or i32 %v16_1000afef, %v6_1000afd9
  store i32 %v19_1000afef, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000aff1

dec_label_pc_1000aff1:                            ; preds = %dec_label_pc_1000afef, %dec_label_pc_1000afeb, %dec_label_pc_1000afe7
  %v0_1000aff4 = phi i32 [ %v19_1000afef, %dec_label_pc_1000afef ], [ %v7_1000afd9, %dec_label_pc_1000afeb ], [ %v19_1000afe7, %dec_label_pc_1000afe7 ]
  %v1_1000aff4 = add i32 %v0_1000aff4, -48
  store i32 %v1_1000aff4, i32* %eax.global-to-local, align 4
  %v1_1000aff7 = ashr i32 %v1_1000aff4, 31
  store i32 %v1_1000aff7, i32* %edx.global-to-local, align 4
  %v3_1000aff8 = mul i32 %v5_1000afe1, 16
  %v4_1000aff8 = udiv i32 %v2_1000afdf, 268435456
  %v5_1000aff8 = or i32 %v3_1000aff8, %v4_1000aff8
  store i32 %v5_1000aff8, i32* %ebx.global-to-local, align 4
  %v2_1000affc = mul i32 %v2_1000afdf, 16
  store i32 %v2_1000affc, i32* @ecx, align 4
  %v2_1000b001 = add i32 %v1_1000aff4, %v2_1000affc
  %v7_1000b001 = icmp ult i32 %v2_1000b001, %v1_1000aff4
  store i32 %v2_1000b001, i32* %esi.global-to-local, align 4
  %v3_1000b005 = zext i1 %v7_1000b001 to i32
  %v4_1000b005 = add i32 %v1_1000aff7, %v5_1000aff8
  %v5_1000b005 = add i32 %v4_1000b005, %v3_1000b005
  store i32 %v5_1000b005, i32* %edi.global-to-local, align 4
  %v5_1000b007 = add i32 %stack_var_-12.0.in, 4
  %v4_1000b00b = bitcast float %stack_var_-32.0 to i32
  %v5_1000b00b = add i32 %v4_1000b00b, -1
  %v13_1000b00b = icmp eq i32 %v5_1000b00b, 0
  %v22_1000b00b = bitcast i32 %v5_1000b00b to float
  %v1_1000b00e = icmp eq i1 %v13_1000b00b, false
  br i1 %v1_1000b00e, label %dec_label_pc_1000af60, label %dec_label_pc_1000b014

dec_label_pc_1000b014:                            ; preds = %dec_label_pc_1000aff1
  %v0_1000b014 = load i32, i32* @esp, align 4
  %v1_1000b014 = add i32 %v0_1000b014, -4
  %v2_1000b014 = inttoptr i32 %v1_1000b014 to i32*
  store i32 8, i32* %v2_1000b014, align 4
  %v2_1000b016 = call i32 @__malloc_crt(i32 %v5_1000b00b)
  store i32 %v2_1000b016, i32* %eax.global-to-local, align 4
  store i32 %v1_1000add0, i32* @ecx, align 4
  %v2_1000b01e = add i32 %v1_1000add0, 4
  %v3_1000b01e = inttoptr i32 %v2_1000b01e to i32*
  store i32 %v2_1000b016, i32* %v3_1000b01e, align 4
  %v0_1000b021 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000b021 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b021 = inttoptr i32 %v1_1000b021 to i32*
  store i32 %v0_1000b021, i32* %v2_1000b021, align 4
  store i32 %v4_1000ae6f, i32* @esi, align 4
  %v0_1000b026 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000b026 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b026 = add i32 %v1_1000b026, 4
  %v3_1000b026 = inttoptr i32 %v2_1000b026 to i32*
  store i32 %v0_1000b026, i32* %v3_1000b026, align 4
  %v0_1000b029 = load i32, i32* @ecx, align 4
  %v1_1000b029 = add i32 %v0_1000b029, 16
  %v2_1000b029 = inttoptr i32 %v1_1000b029 to i8*
  store i8 7, i8* %v2_1000b029, align 1
  %v0_1000b02d = load i32, i32* @ecx, align 4
  store i32 %v0_1000b02d, i32* @edi, align 4
  store i32 %v1_1000aed0, i32* @ecx, align 4
  br label %dec_label_pc_1000b071

dec_label_pc_1000b037:                            ; preds = %dec_label_pc_1000af36, %dec_label_pc_1000af2e, %dec_label_pc_1000af25
  %v3_1000b037 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_1000b037, i32* @edx, align 4
  %v4_1000b03a = load i32, i32* %stack_var_-40, align 4
  %tmp131 = icmp ugt i32 %v3_1000b037, %v4_1000b03a
  %.pre = add i32 %v0_1000af18, %v1_1000aed0
  br i1 %tmp131, label %dec_label_pc_1000b03f, label %dec_label_pc_1000b037.dec_label_pc_1000b056_crit_edge

dec_label_pc_1000b037.dec_label_pc_1000b056_crit_edge: ; preds = %dec_label_pc_1000b037
  br label %dec_label_pc_1000b056

dec_label_pc_1000b03f:                            ; preds = %dec_label_pc_1000b037
  store i32 %.pre, i32* %eax.global-to-local, align 4
  %v12_1000b042 = icmp eq i32 %v3_1000b037, %.pre
  %v1_1000b044 = icmp eq i1 %v12_1000b042, false
  br i1 %v1_1000b044, label %dec_label_pc_1000b056, label %dec_label_pc_1000b046

dec_label_pc_1000b046:                            ; preds = %dec_label_pc_1000b03f
  %v4_1000b046 = bitcast float %v4_1000aef0 to i32
  %v5_1000b046 = call i128 @__asm_movss.11(i32 %v4_1000b046)
  store i128 %v5_1000b046, i128* @xmm0, align 8
  %v1_1000b04b = call i32 @__asm_movss(i128 %v5_1000b046)
  %v2_1000b04b = load i32, i32* @edi, align 4
  %v3_1000b04b = add i32 %v2_1000b04b, 12
  %v4_1000b04b = inttoptr i32 %v3_1000b04b to i32*
  store i32 %v1_1000b04b, i32* %v4_1000b04b, align 4
  %v0_1000b050 = load i32, i32* @edi, align 4
  %v1_1000b050 = add i32 %v0_1000b050, 16
  %v2_1000b050 = inttoptr i32 %v1_1000b050 to i8*
  store i8 3, i8* %v2_1000b050, align 1
  br label %dec_label_pc_1000b071

dec_label_pc_1000b056:                            ; preds = %dec_label_pc_1000b037.dec_label_pc_1000b056_crit_edge, %dec_label_pc_1000b03f
  store i32 %.pre, i32* %eax.global-to-local, align 4
  %v15_1000b059 = icmp eq i32 %v4_1000b03a, %.pre
  %v1_1000b05c = icmp eq i1 %v15_1000b059, false
  br i1 %v1_1000b05c, label %dec_label_pc_1000b06d, label %dec_label_pc_1000b05e

dec_label_pc_1000b05e:                            ; preds = %dec_label_pc_1000b056
  %v10_1000b05e = icmp eq i8 %stack_var_-8.0, 0
  %v1_1000b062 = icmp eq i1 %v10_1000b05e, false
  br i1 %v1_1000b062, label %dec_label_pc_1000b06d, label %dec_label_pc_1000b064

dec_label_pc_1000b064:                            ; preds = %dec_label_pc_1000b05e
  %v0_1000b064 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000b064 = load i32, i32* @edi, align 4
  %v2_1000b064 = add i32 %v1_1000b064, 12
  %v3_1000b064 = inttoptr i32 %v2_1000b064 to i32*
  store i32 %v0_1000b064, i32* %v3_1000b064, align 4
  %v0_1000b067 = load i32, i32* @edi, align 4
  %v1_1000b067 = add i32 %v0_1000b067, 16
  %v2_1000b067 = inttoptr i32 %v1_1000b067 to i8*
  store i8 2, i8* %v2_1000b067, align 1
  br label %dec_label_pc_1000b071

dec_label_pc_1000b06d:                            ; preds = %dec_label_pc_1000b05e, %dec_label_pc_1000b056, %dec_label_pc_1000af18
  %v0_1000b06d = load i32, i32* @edi, align 4
  %v1_1000b06d = add i32 %v0_1000b06d, 16
  %v2_1000b06d = inttoptr i32 %v1_1000b06d to i8*
  store i8 1, i8* %v2_1000b06d, align 1
  br label %dec_label_pc_1000b071

dec_label_pc_1000b071:                            ; preds = %dec_label_pc_1000b06d, %dec_label_pc_1000b064, %dec_label_pc_1000b046, %dec_label_pc_1000b014
  %v0_1000b071 = load i32, i32* @edi, align 4
  %v1_1000b071 = add i32 %v0_1000b071, 16
  %v2_1000b071 = inttoptr i32 %v1_1000b071 to i8*
  %v3_1000b071 = load i8, i8* %v2_1000b071, align 1
  %v13_1000b071 = icmp eq i8 %v3_1000b071, 1
  %v1_1000b075 = icmp eq i1 %v13_1000b071, false
  br i1 %v1_1000b075, label %dec_label_pc_1000b071.dec_label_pc_1000b08e_crit_edge, label %dec_label_pc_1000b077

dec_label_pc_1000b071.dec_label_pc_1000b08e_crit_edge: ; preds = %dec_label_pc_1000b071
  %v1_1000b097.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000b08e

dec_label_pc_1000b077:                            ; preds = %dec_label_pc_1000b071
  %v0_1000b077 = load i32, i32* @ecx, align 4
  %v1_1000b077 = add i32 %v0_1000b077, 1
  store i32 %v1_1000b077, i32* %ebx.global-to-local, align 4
  %v1_1000b07a = load i32, i32* @esp, align 4
  %v2_1000b07a = add i32 %v1_1000b07a, -4
  %v3_1000b07a = inttoptr i32 %v2_1000b07a to i32*
  store i32 %v1_1000b077, i32* %v3_1000b07a, align 4
  %v1_1000b07b = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000b07b, i32* %eax.global-to-local, align 4
  %v0_1000b080 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000b080 = load i32, i32* @esp, align 4
  %v2_1000b080 = add i32 %v1_1000b080, -4
  %v3_1000b080 = inttoptr i32 %v2_1000b080 to i32*
  store i32 %v0_1000b080, i32* %v3_1000b080, align 4
  %v0_1000b081 = load i32, i32* @esi, align 4
  %v2_1000b081 = add i32 %v1_1000b080, -8
  %v3_1000b081 = inttoptr i32 %v2_1000b081 to i32*
  store i32 %v0_1000b081, i32* %v3_1000b081, align 4
  %v0_1000b082 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b082 = add i32 %v1_1000b080, -12
  %v3_1000b082 = inttoptr i32 %v2_1000b082 to i32*
  store i32 %v0_1000b082, i32* %v3_1000b082, align 4
  %v0_1000b083 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000b083 = load i32, i32* @edi, align 4
  %v2_1000b083 = add i32 %v1_1000b083, 4
  %v3_1000b083 = inttoptr i32 %v2_1000b083 to i32*
  store i32 %v0_1000b083, i32* %v3_1000b083, align 4
  %v0_1000b086 = call i32 @function_10009a40()
  store i32 %v0_1000b086, i32* %eax.global-to-local, align 4
  %v0_1000b08b = load i32, i32* @esp, align 4
  %v1_1000b08b = add i32 %v0_1000b08b, 16
  br label %dec_label_pc_1000b08e

dec_label_pc_1000b08e:                            ; preds = %dec_label_pc_1000b071.dec_label_pc_1000b08e_crit_edge, %dec_label_pc_1000b077
  %v1_1000b097 = phi i32 [ %v1_1000b097.pre, %dec_label_pc_1000b071.dec_label_pc_1000b08e_crit_edge ], [ %v1_1000b08b, %dec_label_pc_1000b077 ]
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v3_1000b091 = load i32, i32* %v2_1000b091, align 4
  store i32 %v3_1000b091, i32* %esi.global-to-local, align 4
  store i32 %v2_1000ad93, i32* %eax.global-to-local, align 4
  %v2_1000b097 = add i32 %v1_1000b097, -4
  %v3_1000b097 = inttoptr i32 %v2_1000b097 to i32*
  store i32 %v2_1000ad93, i32* %v3_1000b097, align 4
  %v2_1000b09b = add i32 %v1_1000b097, -8
  %v3_1000b09b = inttoptr i32 %v2_1000b09b to i32*
  store i32 %v2_1000ad97, i32* %v3_1000b09b, align 4
  store i32 %v0_1000ad17, i32* @ecx, align 4
  %v0_1000b09f = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000b09f = add i32 %v1_1000b097, -12
  %v3_1000b09f = inttoptr i32 %v2_1000b09f to i32*
  store i32 %v0_1000b09f, i32* %v3_1000b09f, align 4
  %v1_1000b0a0 = call i32 @function_1000a1e0(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32* nonnull @5)
  store i32 %v1_1000b0a0, i32* %eax.global-to-local, align 4
  %v3_1000b0a5 = load i8, i8* %stack_var_-5, align 1
  %v12_1000b0a5 = icmp eq i8 %v3_1000b0a5, 0
  br i1 %v12_1000b0a5, label %dec_label_pc_1000b0bd, label %dec_label_pc_1000b0ab

dec_label_pc_1000b0ab:                            ; preds = %dec_label_pc_1000b08e
  store i32 %arg3, i32* %edx.global-to-local, align 4
  store i32 %v0_1000ad17, i32* @ecx, align 4
  %v1_1000b0b1 = load i32, i32* @esp, align 4
  %v2_1000b0b1 = add i32 %v1_1000b0b1, -4
  %v3_1000b0b1 = inttoptr i32 %v2_1000b0b1 to i32*
  store i32 %arg3, i32* %v3_1000b0b1, align 4
  %v0_1000b0b2 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b0b2 = add i32 %v1_1000b0b1, -8
  %v3_1000b0b2 = inttoptr i32 %v2_1000b0b2 to i32*
  store i32 %v0_1000b0b2, i32* %v3_1000b0b2, align 4
  %v2_1000b0b3 = call i32 @function_1000a440(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000b0b3, i32* @eax, align 4
  %v1_1000b0b8 = trunc i32 %v2_1000b0b3 to i8
  store i8 %v1_1000b0b8, i8* %stack_var_-7, align 1
  br label %dec_label_pc_1000b0c7

dec_label_pc_1000b0bd:                            ; preds = %dec_label_pc_1000b08e
  %v0_1000b0bd = load i32, i32* @esi, align 4
  %v1_1000b0bd = load i32, i32* @esp, align 4
  %v2_1000b0bd = add i32 %v1_1000b0bd, -4
  %v3_1000b0bd = inttoptr i32 %v2_1000b0bd to i32*
  store i32 %v0_1000b0bd, i32* %v3_1000b0bd, align 4
  %v1_1000b0be = add i32 %v1_1000b0bd, -8
  %v2_1000b0be = inttoptr i32 %v1_1000b0be to i32*
  store i32 0, i32* %v2_1000b0be, align 4
  %v0_1000b0c0 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b0c0, i32* @ecx, align 4
  %v2_1000b0c2 = call i32 @function_1000c030(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000b0c2, i32* @eax, align 4
  br label %dec_label_pc_1000b0c7

dec_label_pc_1000b0c7:                            ; preds = %dec_label_pc_1000b0bd, %dec_label_pc_1000b0ab
  store i32 %v0_1000ad17, i32* @ebx, align 4
  br label %dec_label_pc_1000b0ca

dec_label_pc_1000b0ca:                            ; preds = %dec_label_pc_1000b0c7, %dec_label_pc_1000ae88
  %v3_1000b0ca = load i8, i8* %stack_var_-7, align 1
  %v10_1000b0ca = icmp eq i8 %v3_1000b0ca, 0
  %v1_1000b0ce = icmp eq i1 %v10_1000b0ca, false
  br i1 %v1_1000b0ce, label %dec_label_pc_1000b0f3, label %dec_label_pc_1000b0d0

dec_label_pc_1000b0d0:                            ; preds = %dec_label_pc_1000b0ca
  %v0_1000b0d0 = load i32, i32* @edi, align 4
  %v1_1000b0d0 = load i32, i32* @esp, align 4
  %v2_1000b0d0 = add i32 %v1_1000b0d0, -4
  %v3_1000b0d0 = inttoptr i32 %v2_1000b0d0 to i32*
  store i32 %v0_1000b0d0, i32* %v3_1000b0d0, align 4
  %v0_1000b0d1 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b0d1, i32* @ecx, align 4
  %v1_1000b0d3 = call i32 @function_1000a380(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000b0d3, i32* %eax.global-to-local, align 4
  %v0_1000b0d8 = load i32, i32* @edi, align 4
  %v1_1000b0d8 = icmp eq i32 %v0_1000b0d8, 0
  br i1 %v1_1000b0d8, label %dec_label_pc_1000b0f3, label %dec_label_pc_1000b0dc

dec_label_pc_1000b0dc:                            ; preds = %dec_label_pc_1000b0d0
  store i32 %v0_1000b0d8, i32* @ecx, align 4
  %v0_1000b0de = call i32 @function_1000a140()
  store i32 %v0_1000b0de, i32* %eax.global-to-local, align 4
  %v0_1000b0e3 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b0e3, i32* %eax.global-to-local, align 4
  %v1_1000b0e9 = inttoptr i32 %v0_1000b0e3 to i32*
  %v2_1000b0e9 = load i32, i32* %v1_1000b0e9, align 4
  store i32 %v2_1000b0e9, i32* %edx.global-to-local, align 4
  store i32 %v0_1000b0e3, i32* @ecx, align 4
  %v1_1000b0ed = add i32 %v2_1000b0e9, 8
  %v2_1000b0ed = inttoptr i32 %v1_1000b0ed to i32*
  %v3_1000b0ed = load i32, i32* %v2_1000b0ed, align 4
  store i32 %v3_1000b0ed, i32* %eax.global-to-local, align 4
  %v0_1000b0f0 = load i32, i32* @edi, align 4
  %v1_1000b0f0 = load i32, i32* @esp, align 4
  %v2_1000b0f0 = add i32 %v1_1000b0f0, -4
  %v3_1000b0f0 = inttoptr i32 %v2_1000b0f0 to i32*
  store i32 %v0_1000b0f0, i32* %v3_1000b0f0, align 4
  br label %dec_label_pc_1000b0f3

dec_label_pc_1000b0f3:                            ; preds = %dec_label_pc_1000b0dc, %dec_label_pc_1000b0d0, %dec_label_pc_1000b0ca
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v1_1000b0f9 = load i32, i32* @esp, align 4
  %v2_1000b0f9 = add i32 %v1_1000b0f9, -4
  %v3_1000b0f9 = inttoptr i32 %v2_1000b0f9 to i32*
  store i32 %v2_1000ad93, i32* %v3_1000b0f9, align 4
  store i32 %v2_1000ad97, i32* @edx, align 4
  %v2_1000b0fd = add i32 %v1_1000b0f9, -8
  %v3_1000b0fd = inttoptr i32 %v2_1000b0fd to i32*
  store i32 %v2_1000ad97, i32* %v3_1000b0fd, align 4
  %v0_1000b0fe = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b0fe = add i32 %v1_1000b0f9, -12
  %v3_1000b0fe = inttoptr i32 %v2_1000b0fe to i32*
  store i32 %v0_1000b0fe, i32* %v3_1000b0fe, align 4
  %v0_1000b0ff = load i32, i32* @ebx, align 4
  store i32 %v0_1000b0ff, i32* @ecx, align 4
  store i8 1, i8* %stack_var_-7, align 1
  %v2_1000b105 = call i32 @function_1000a1e0(i32 1, i32* nonnull @5, i32* nonnull @5)
  store i32 %v2_1000b105, i32* %eax.global-to-local, align 4
  %v1_1000b10a = icmp eq i32 %v2_1000b105, 0
  %v1_1000b10c = icmp eq i1 %v1_1000b10a, false
  br i1 %v1_1000b10c, label %dec_label_pc_1000adb1, label %dec_label_pc_1000b112

dec_label_pc_1000b112:                            ; preds = %dec_label_pc_1000b0f3, %dec_label_pc_1000ad90
  %v0_1000b112 = load i32, i32* @esp, align 4
  %v1_1000b112 = add i32 %v0_1000b112, -4
  %v2_1000b112 = inttoptr i32 %v1_1000b112 to i32*
  store i32 ptrtoint ([53 x i8]* @global_var_10023d24.424 to i32), i32* %v2_1000b112, align 4
  br label %dec_label_pc_1000b133

dec_label_pc_1000b119:                            ; preds = %dec_label_pc_1000adb4
  %v0_1000b119 = load i32, i32* @esp, align 4
  %v1_1000b119 = add i32 %v0_1000b119, -4
  %v2_1000b119 = inttoptr i32 %v1_1000b119 to i32*
  store i32 ptrtoint ([44 x i8]* @global_var_10023cf8.425 to i32), i32* %v2_1000b119, align 4
  br label %dec_label_pc_1000b133

dec_label_pc_1000b120:                            ; preds = %dec_label_pc_1000ae67, %dec_label_pc_1000ae15
  %v0_1000b120 = load i32, i32* @esp, align 4
  %v1_1000b120 = add i32 %v0_1000b120, -4
  %v2_1000b120 = inttoptr i32 %v1_1000b120 to i32*
  store i32 ptrtoint ([39 x i8]* @global_var_10023cd0.426 to i32), i32* %v2_1000b120, align 4
  br label %dec_label_pc_1000b133

dec_label_pc_1000b127:                            ; preds = %dec_label_pc_1000ae78
  %v0_1000b127 = load i32, i32* @esp, align 4
  %v1_1000b127 = add i32 %v0_1000b127, -4
  %v2_1000b127 = inttoptr i32 %v1_1000b127 to i32*
  store i32 ptrtoint ([39 x i8]* @global_var_10023ca8.427 to i32), i32* %v2_1000b127, align 4
  br label %dec_label_pc_1000b133

dec_label_pc_1000b12e:                            ; preds = %dec_label_pc_1000aeae
  %v0_1000b12e = load i32, i32* @esp, align 4
  %v1_1000b12e = add i32 %v0_1000b12e, -4
  %v2_1000b12e = inttoptr i32 %v1_1000b12e to i32*
  store i32 ptrtoint ([64 x i8]* @global_var_10023c68.428 to i32), i32* %v2_1000b12e, align 4
  br label %dec_label_pc_1000b133

dec_label_pc_1000b133:                            ; preds = %dec_label_pc_1000b12e, %dec_label_pc_1000b127, %dec_label_pc_1000b120, %dec_label_pc_1000b119, %dec_label_pc_1000b112
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000b138 = call i32 @function_1000a060(i8 ptrtoint (i32* @5 to i8))
  store i32 %v1_1000b138, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b13d

dec_label_pc_1000b13d:                            ; preds = %dec_label_pc_1000adc3, %dec_label_pc_1000b133
  %v0_1000b14a = phi i32 [ %v1_1000b138, %dec_label_pc_1000b133 ], [ %v0_1000adcd, %dec_label_pc_1000adc3 ]
  %v0_1000b13d = load i32, i32* @global_var_1002854c.422, align 4
  %v1_1000b13d = add i32 %v0_1000b13d, -2
  store i32 %v1_1000b13d, i32* @global_var_1002854c.422, align 4
  %v0_1000b144 = load i32, i32* @esp, align 4
  %v1_1000b144 = inttoptr i32 %v0_1000b144 to i32*
  %v2_1000b144 = load i32, i32* %v1_1000b144, align 4
  store i32 %v2_1000b144, i32* @edi, align 4
  %v3_1000b144 = add i32 %v0_1000b144, 4
  %v1_1000b145 = inttoptr i32 %v3_1000b144 to i32*
  %v2_1000b145 = load i32, i32* %v1_1000b145, align 4
  store i32 %v2_1000b145, i32* @esi, align 4
  %v3_1000b145 = add i32 %v0_1000b144, 8
  %v1_1000b146 = inttoptr i32 %v3_1000b145 to i32*
  %v2_1000b146 = load i32, i32* %v1_1000b146, align 4
  store i32 %v2_1000b146, i32* @ebx, align 4
  ret i32 %v0_1000b14a
}

define i32 @function_1000b150(i32* %arg1) local_unnamed_addr {
dec_label_pc_1000b150:
  %eax.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v0_1000b153 = load i32, i32* @esi, align 4
  store i32 1, i32* %stack_var_-12, align 4
  %v0_1000b156 = load i32, i32* @ecx, align 4
  store i32 %v0_1000b156, i32* @esi, align 4
  %v1_1000b158 = call i32 @function_1000bf20(i32 1)
  store i32 %v1_1000b158, i32* %eax.global-to-local, align 4
  %v4_1000b15d = trunc i32 %v1_1000b158 to i8
  %v5_1000b15d = icmp eq i8 %v4_1000b15d, 0
  br i1 %v5_1000b15d, label %dec_label_pc_1000b179, label %dec_label_pc_1000b161

dec_label_pc_1000b161:                            ; preds = %dec_label_pc_1000b150
  %v0_1000b161 = load i32, i32* @esi, align 4
  %v1_1000b161 = add i32 %v0_1000b161, 12
  %v2_1000b161 = inttoptr i32 %v1_1000b161 to i32*
  %v3_1000b161 = load i32, i32* %v2_1000b161, align 4
  store i32 %v3_1000b161, i32* %eax.global-to-local, align 4
  %v2_1000b164 = add i32 %v0_1000b161, 32
  %v3_1000b164 = inttoptr i32 %v2_1000b164 to i32*
  %v4_1000b164 = load i32, i32* %v3_1000b164, align 4
  %v5_1000b164 = sub i32 %v3_1000b161, %v4_1000b164
  store i32 %v5_1000b164, i32* %eax.global-to-local, align 4
  %v1_1000b169 = load i32, i32* @ecx, align 4
  %v3_1000b169 = add i32 %v1_1000b169, %v5_1000b164
  %v4_1000b169 = inttoptr i32 %v3_1000b169 to i8*
  %v5_1000b169 = load i8, i8* %v4_1000b169, align 1
  %v6_1000b169 = zext i8 %v5_1000b169 to i32
  %v7_1000b169 = load i32, i32* @edx, align 4
  %v8_1000b169 = and i32 %v7_1000b169, -256
  %v9_1000b169 = or i32 %v8_1000b169, %v6_1000b169
  store i32 %v9_1000b169, i32* @edx, align 4
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v3_1000b16f = bitcast i32* %arg1 to i8*
  store i8 %v5_1000b169, i8* %v3_1000b16f, align 1
  %v0_1000b171 = load i32, i32* @esi, align 4
  %v1_1000b171 = add i32 %v0_1000b171, 12
  %v2_1000b171 = inttoptr i32 %v1_1000b171 to i32*
  %v3_1000b171 = load i32, i32* %v2_1000b171, align 4
  %v4_1000b171 = add i32 %v3_1000b171, 1
  store i32 %v4_1000b171, i32* %v2_1000b171, align 4
  %v2_1000b174 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000b174, i32* @esi, align 4
  store i32 %v0_1000b153, i32* @ebp, align 4
  %v0_1000b176 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000b176

dec_label_pc_1000b179:                            ; preds = %dec_label_pc_1000b150
  store i32 %tmp, i32* @ecx, align 4
  %v1_1000b17c = bitcast i32* %arg1 to i8*
  store i8 0, i8* %v1_1000b17c, align 1
  %v2_1000b17f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000b17f, i32* @esi, align 4
  store i32 %v0_1000b153, i32* @ebp, align 4
  %v0_1000b181 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000b181
}

define i32 @function_1000b190(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000b190:
  %eax.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-68 = alloca i32, align 4
  %v0_1000b190 = load i32, i32* @ebp, align 4
  %v15_1000b193 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg1, i32* @edi, align 4
  %v1_1000b19f = inttoptr i32 %arg1 to i32*
  %v2_1000b19f = load i32, i32* %v1_1000b19f, align 4
  store i32 %v2_1000b19f, i32* %eax.global-to-local, align 4
  %v0_1000b1a4 = load i32, i32* @ecx, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000b1ba = icmp eq i32 %v2_1000b19f, 0
  %v1_1000b1bc = icmp eq i1 %v1_1000b1ba, false
  br i1 %v1_1000b1bc, label %dec_label_pc_1000b1c9, label %dec_label_pc_1000b1be

dec_label_pc_1000b1be:                            ; preds = %dec_label_pc_1000b190
  store i32 %arg2, i32* @edi, align 4
  %v12_1000b1c0 = and i32 %v2_1000b19f, -256
  store i32 %v12_1000b1c0, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %v0_1000b190, i32* @ebp, align 4
  ret i32 %v12_1000b1c0

dec_label_pc_1000b1c9:                            ; preds = %dec_label_pc_1000b190
  %v2_1000b1c9 = load i32, i32* %v1_1000b19f, align 4
  store i32 %v2_1000b1c9, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* bitcast ([8 x i8]** @global_var_10028430.430 to i32*), align 4
  %v1_1000b1de = add i32 %v2_1000b1c9, 2
  store i32 %v1_1000b1de, i32* %eax.global-to-local, align 4
  %v2_1000b1e3 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_1000b1e3, i32* @ecx, align 4
  %v1_1000b1e9 = add i32 %arg1, -4
  %v2_1000b1e9 = inttoptr i32 %v1_1000b1e9 to i32*
  %v3_1000b1e9 = load i32, i32* %v2_1000b1e9, align 4
  store i32 %v3_1000b1e9, i32* %eax.global-to-local, align 4
  store i32 %v1_1000b1e9, i32* @ecx, align 4
  %v4_1000b1f9 = trunc i32 %v3_1000b1e9 to i8
  %v5_1000b1f9 = icmp eq i8 %v4_1000b1f9, 0
  br i1 %v5_1000b1f9, label %dec_label_pc_1000b211, label %dec_label_pc_1000b1fd

dec_label_pc_1000b1fd:                            ; preds = %dec_label_pc_1000b1c9
  %v3_1000b203 = add i32 %v2_1000b1c9, 1
  %v4_1000b203 = add i32 %v3_1000b203, %tmp33
  %tmp53 = sub i32 0, %tmp33
  store i32 %tmp53, i32* @ecx, align 4
  %v2_1000b20a = and i32 %v4_1000b203, %tmp53
  store i32 %v2_1000b20a, i32* %eax.global-to-local, align 4
  store i32 %v2_1000b20a, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1000b219

dec_label_pc_1000b211:                            ; preds = %dec_label_pc_1000b1c9
  store i32 %v1_1000b1de, i32* @ecx, align 4
  store i32 %v1_1000b1de, i32* %stack_var_-8, align 4
  store i32 %v1_1000b1de, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b219

dec_label_pc_1000b219:                            ; preds = %dec_label_pc_1000b211, %dec_label_pc_1000b1fd
  %v3_1000b23d = phi i32 [ %v1_1000b1de, %dec_label_pc_1000b211 ], [ %v2_1000b20a, %dec_label_pc_1000b1fd ]
  %v3_1000b219 = load i32, i32* %v2_1000b1e9, align 4
  %v1_1000b21f = add i32 %v3_1000b219, 344
  %v2_1000b21f = inttoptr i32 %v1_1000b21f to i32*
  %v3_1000b21f = load i32, i32* %v2_1000b21f, align 4
  store i32 %v3_1000b21f, i32* %eax.global-to-local, align 4
  store i32 %v2_1000b1c9, i32* @ecx, align 4
  store i32 %v3_1000b21f, i32* @esi, align 4
  store i32 %v3_1000b23d, i32* %eax.global-to-local, align 4
  store i32 %v2_1000b19f, i32* @ecx, align 4
  %v1_1000b24b = icmp eq i32 %v3_1000b23d, 0
  %v2_1000b24d = load i32, i32* %v1_1000b19f, align 4
  store i32 %v2_1000b24d, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000b255 = icmp eq i1 %v1_1000b24b, false
  %v2_1000b255 = zext i1 %v1_1000b255 to i32
  %v10_1000b25b = icmp eq i1 %v1_1000b255, false
  br i1 %v10_1000b25b, label %dec_label_pc_1000b2c9, label %dec_label_pc_1000b261

dec_label_pc_1000b261:                            ; preds = %dec_label_pc_1000b219
  store i32 %v2_1000b1c9, i32* @eax, align 4
  store i32 0, i32* %stack_var_-156, align 4
  store i32 %v15_1000b193, i32* @ecx, align 4
  %v3_1000b26d = add i32 %v3_1000b21f, %v2_1000b1c9
  %v4_1000b26d = inttoptr i32 %v3_1000b26d to i16*
  store i16 0, i16* %v4_1000b26d, align 2
  %v0_1000b273 = load i32, i32* %stack_var_-156, align 4
  %v3_1000b273 = call i32 @function_1000c7c0(i32 %v0_1000b273, i32 0, i32 0)
  store i32 %v3_1000b273, i32* %eax.global-to-local, align 4
  %v0_1000b278 = load i32, i32* @esi, align 4
  %v1_1000b279 = call i32 @function_10009450(i32 %v0_1000b278)
  %v3_1000b284 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1000b284, i32* @eax, align 4
  %v0_1000b288 = load i32, i32* @esi, align 4
  store i32 %v15_1000b193, i32* @ecx, align 4
  %v4_1000b28c = call i32 @function_1000c900(i32 %v0_1000b288, i32 %v3_1000b284, i32 %v1_1000b279, i32 9)
  %v0_1000b299 = load i32, i32* @edi, align 4
  store i32 %v15_1000b193, i32* %eax.global-to-local, align 4
  %v0_1000b29e = load i32, i32* @ebx, align 4
  store i32 %v0_1000b1a4, i32* @ecx, align 4
  %v6_1000b2a4 = call i32 @function_1000b450(i32 %v0_1000b29e, i32* nonnull %stack_var_-68, i32 %v0_1000b299, i32 %arg3, i32 %arg4)
  store i32 %v6_1000b2a4, i32* %eax.global-to-local, align 4
  %v11_1000b2a9 = icmp slt i32 %tmp8, 0
  %v2_1000b2b0 = icmp eq i1 %v11_1000b2a9, false
  br i1 %v2_1000b2b0, label %dec_label_pc_1000b2b2, label %dec_label_pc_1000b2c9

dec_label_pc_1000b2b2:                            ; preds = %dec_label_pc_1000b261
  %v3_1000b2b2 = load i32, i32* %stack_var_-68, align 4
  store i32 %v3_1000b2b2, i32* %eax.global-to-local, align 4
  %v1_1000b2b5 = icmp eq i32 %v3_1000b2b2, 0
  br i1 %v1_1000b2b5, label %dec_label_pc_1000b2c9, label %dec_label_pc_1000b2b9

dec_label_pc_1000b2b9:                            ; preds = %dec_label_pc_1000b2b2
  %v0_1000b2b9 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_1000b2bf = inttoptr i32 %v0_1000b2b9 to i32*
  %v2_1000b2bf = load i32, i32* %v1_1000b2bf, align 4
  store i32 %v2_1000b2bf, i32* @ecx, align 4
  %v1_1000b2c1 = inttoptr i32 %v2_1000b2bf to i32*
  %v2_1000b2c1 = load i32, i32* %v1_1000b2c1, align 4
  %v1_1000b2c4 = add i32 %v2_1000b2c1, 20
  %v2_1000b2c4 = inttoptr i32 %v1_1000b2c4 to i32*
  %v3_1000b2c4 = load i32, i32* %v2_1000b2c4, align 4
  store i32 %v3_1000b2c4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b2c9

dec_label_pc_1000b2c9:                            ; preds = %dec_label_pc_1000b261, %dec_label_pc_1000b2b9, %dec_label_pc_1000b2b2, %dec_label_pc_1000b219
  %stack_var_7.0 = phi i32 [ %v2_1000b255, %dec_label_pc_1000b219 ], [ %v6_1000b2a4, %dec_label_pc_1000b2b2 ], [ %v6_1000b2a4, %dec_label_pc_1000b2b9 ], [ %v6_1000b2a4, %dec_label_pc_1000b261 ]
  %v0_1000b2c9 = load i32, i32* @edi, align 4
  %v1_1000b2c9 = add i32 %v0_1000b2c9, -4
  %v2_1000b2c9 = inttoptr i32 %v1_1000b2c9 to i32*
  %v3_1000b2c9 = load i32, i32* %v2_1000b2c9, align 4
  %v1_1000b2cc = add i32 %v3_1000b2c9, 348
  %v2_1000b2cc = inttoptr i32 %v1_1000b2cc to i32*
  %v3_1000b2cc = load i32, i32* %v2_1000b2cc, align 4
  store i32 %v3_1000b2cc, i32* %eax.global-to-local, align 4
  %v0_1000b2d2 = load i32, i32* @esi, align 4
  %v1_1000b2d2 = load i32, i32* @esp, align 4
  %v2_1000b2d2 = add i32 %v1_1000b2d2, -4
  %v3_1000b2d2 = inttoptr i32 %v2_1000b2d2 to i32*
  store i32 %v0_1000b2d2, i32* %v3_1000b2d2, align 4
  %v0_1000b2d3 = load i32, i32* @edi, align 4
  %v1_1000b2d3 = add i32 %v0_1000b2d3, -4
  store i32 %v1_1000b2d3, i32* @ecx, align 4
  %v4_1000b2d8 = and i32 %stack_var_7.0, 255
  %v5_1000b2d8 = load i32, i32* %eax.global-to-local, align 4
  %v6_1000b2d8 = and i32 %v5_1000b2d8, -256
  %v7_1000b2d8 = or i32 %v6_1000b2d8, %v4_1000b2d8
  store i32 %v7_1000b2d8, i32* %eax.global-to-local, align 4
  %v2_1000b2db = load i32, i32* %v3_1000b2d2, align 4
  store i32 %v2_1000b2db, i32* @edi, align 4
  %v3_1000b2dc = add i32 %v1_1000b2d2, 4
  %v1_1000b2dd = inttoptr i32 %v3_1000b2dc to i32*
  %v2_1000b2dd = load i32, i32* %v1_1000b2dd, align 4
  store i32 %v2_1000b2dd, i32* @ebx, align 4
  ret i32 %v7_1000b2d8
}

define i32 @function_1000b2f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1000b2f0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-532 = alloca i32, align 4
  %stack_var_-520 = alloca i32, align 4
  %stack_var_-516 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000b2f0 = load i32, i32* @ebp, align 4
  store i32 %v0_1000b2f0, i32* %stack_var_-4, align 4
  %v4_1000b2f0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000b2f0, i32* @ebp, align 4
  %v15_1000b2f3 = ptrtoint i32* %stack_var_-516 to i32
  %v10_1000b2f9 = icmp eq i32 %arg3, 0
  %v0_1000b2fd = load i32, i32* @edi, align 4
  store i32 %v0_1000b2fd, i32* %stack_var_-520, align 4
  %v4_1000b2fd = ptrtoint i32* %stack_var_-520 to i32
  %v0_1000b2fe = load i32, i32* @ecx, align 4
  store i32 %v0_1000b2fe, i32* @edi, align 4
  br i1 %v10_1000b2f9, label %dec_label_pc_1000b441, label %dec_label_pc_1000b306

dec_label_pc_1000b306:                            ; preds = %dec_label_pc_1000b2f0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %v15_1000b2f3, i32* @ecx, align 4
  store i32 %v15_1000b2f3, i32* %stack_var_-532, align 4
  %v5_1000b315 = ptrtoint i32* %stack_var_-532 to i32
  %v4_1000b316 = call i32 @function_10009a60(i32* nonnull %stack_var_-516, i32 %arg1, i32 512)
  store i32 %v4_1000b316, i32* %eax.global-to-local, align 4
  store i32 %v15_1000b2f3, i32* %edx.global-to-local, align 4
  %v1_1000b322 = call i32 @function_10009450(i32 %v15_1000b2f3)
  store i32 %v1_1000b322, i32* %eax.global-to-local, align 4
  %tmp2844 = icmp slt i32 %v1_1000b322, 1
  br i1 %tmp2844, label %dec_label_pc_1000b350, label %dec_label_pc_1000b334

dec_label_pc_1000b334:                            ; preds = %dec_label_pc_1000b306, %dec_label_pc_1000b345
  %v1_1000b34545 = phi i32 [ %v1_1000b34d, %dec_label_pc_1000b345 ], [ %v1_1000b322, %dec_label_pc_1000b306 ]
  %v0_1000b334 = load i32, i32* @ebp, align 4
  %v3_1000b334 = add i32 %v1_1000b34545, -513
  %v4_1000b334 = add i32 %v3_1000b334, %v0_1000b334
  %v5_1000b334 = inttoptr i32 %v4_1000b334 to i8*
  %v6_1000b334 = load i8, i8* %v5_1000b334, align 1
  %v7_1000b334 = zext i8 %v6_1000b334 to i32
  %v8_1000b334 = load i32, i32* @ecx, align 4
  %v9_1000b334 = and i32 %v8_1000b334, -256
  %v10_1000b334 = or i32 %v9_1000b334, %v7_1000b334
  store i32 %v10_1000b334, i32* @ecx, align 4
  %v11_1000b33b = icmp eq i8 %v6_1000b334, 92
  br i1 %v11_1000b33b, label %dec_label_pc_1000b350, label %dec_label_pc_1000b340

dec_label_pc_1000b340:                            ; preds = %dec_label_pc_1000b334
  %v11_1000b340 = icmp eq i8 %v6_1000b334, 47
  br i1 %v11_1000b340, label %dec_label_pc_1000b350, label %dec_label_pc_1000b345

dec_label_pc_1000b345:                            ; preds = %dec_label_pc_1000b340
  store i8 0, i8* %v5_1000b334, align 1
  %v0_1000b34d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000b34d = add i32 %v0_1000b34d, -1
  store i32 %v1_1000b34d, i32* %eax.global-to-local, align 4
  %tmp28 = icmp slt i32 %v1_1000b34d, 1
  br i1 %tmp28, label %dec_label_pc_1000b350, label %dec_label_pc_1000b334

dec_label_pc_1000b350:                            ; preds = %dec_label_pc_1000b345, %dec_label_pc_1000b334, %dec_label_pc_1000b340, %dec_label_pc_1000b306
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-532, align 4
  store i32 %v15_1000b2f3, i32* @ecx, align 4
  %v2_1000b364 = inttoptr i32 %arg2 to i32*
  %v5_1000b364 = call i32 @function_10009650(i32 %v15_1000b2f3, i32* %v2_1000b364, i32 512, i32 -1)
  store i32 %v5_1000b364, i32* %eax.global-to-local, align 4
  %v0_1000b369 = load i32, i32* inttoptr (i32 268575264 to i32*), align 32
  store i32 %v0_1000b369, i32* @esi, align 4
  %v0_1000b372 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b372, i32* %eax.global-to-local, align 4
  %v1_1000b374 = inttoptr i32 %v0_1000b372 to i32*
  %v2_1000b374 = load i32, i32* %v1_1000b374, align 4
  store i32 %v2_1000b374, i32* @edx, align 4
  store i32 %v0_1000b372, i32* @ecx, align 4
  %v1_1000b378 = add i32 %v2_1000b374, 4
  %v2_1000b378 = inttoptr i32 %v1_1000b378 to i32*
  %v3_1000b378 = load i32, i32* %v2_1000b378, align 4
  store i32 %v3_1000b378, i32* %eax.global-to-local, align 4
  store i32 36, i32* %stack_var_-532, align 4
  %v1_1000b37f = icmp eq i32 %v3_1000b378, 0
  br i1 %v1_1000b37f, label %dec_label_pc_1000b395, label %dec_label_pc_1000b383

dec_label_pc_1000b383:                            ; preds = %dec_label_pc_1000b350
  store i32 %v3_1000b378, i32* @ecx, align 4
  %v1_1000b38c = call i32 @function_1000a4a0(i32 %v15_1000b2f3)
  store i32 %v1_1000b38c, i32* %eax.global-to-local, align 4
  %v1_1000b3a1.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000b397

dec_label_pc_1000b395:                            ; preds = %dec_label_pc_1000b350
  br label %dec_label_pc_1000b397

dec_label_pc_1000b397:                            ; preds = %dec_label_pc_1000b395, %dec_label_pc_1000b383
  %v1_1000b3a1 = phi i32 [ %v5_1000b315, %dec_label_pc_1000b395 ], [ %v1_1000b3a1.pre, %dec_label_pc_1000b383 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_1000b395 ], [ %v1_1000b38c, %dec_label_pc_1000b383 ]
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v0_1000b397 = load i32, i32* @edi, align 4
  %v1_1000b397 = add i32 %v0_1000b397, 17
  %v2_1000b397 = inttoptr i32 %v1_1000b397 to i8*
  %v3_1000b397 = load i8, i8* %v2_1000b397, align 1
  %v10_1000b397 = icmp eq i8 %v3_1000b397, 0
  store i32 %arg4, i32* @ecx, align 4
  %v2_1000b3a1 = add i32 %v1_1000b3a1, -4
  %v3_1000b3a1 = inttoptr i32 %v2_1000b3a1 to i32*
  store i32 %arg6, i32* %v3_1000b3a1, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v1_1000b3a5 = icmp eq i1 %v10_1000b397, false
  %v2_1000b3a5 = zext i1 %v1_1000b3a5 to i32
  %v3_1000b3a5 = load i32, i32* @edx, align 4
  %v4_1000b3a5 = and i32 %v3_1000b3a5, -256
  %v5_1000b3a5 = or i32 %v4_1000b3a5, %v2_1000b3a5
  store i32 %v5_1000b3a5, i32* %edx.global-to-local, align 4
  %v0_1000b3a8 = load i32, i32* @ecx, align 4
  %v2_1000b3a8 = add i32 %v1_1000b3a1, -8
  %v3_1000b3a8 = inttoptr i32 %v2_1000b3a8 to i32*
  store i32 %v0_1000b3a8, i32* %v3_1000b3a8, align 4
  %v0_1000b3a9 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000b3a9 = trunc i32 %v0_1000b3a9 to i8
  %v2_1000b3a9 = load i32, i32* %ebx.global-to-local, align 4
  %v3_1000b3a9 = add i32 %v2_1000b3a9, 17
  %v4_1000b3a9 = inttoptr i32 %v3_1000b3a9 to i8*
  store i8 %v1_1000b3a9, i8* %v4_1000b3a9, align 1
  store i32 %v15_1000b2f3, i32* %edx.global-to-local, align 4
  %v1_1000b3b2 = load i32, i32* @esp, align 4
  %v2_1000b3b2 = add i32 %v1_1000b3b2, -4
  %v3_1000b3b2 = inttoptr i32 %v2_1000b3b2 to i32*
  store i32 %v15_1000b2f3, i32* %v3_1000b3b2, align 4
  %v0_1000b3b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b3b3 = add i32 %v1_1000b3b2, -8
  %v3_1000b3b3 = inttoptr i32 %v2_1000b3b3 to i32*
  store i32 %v0_1000b3b3, i32* %v3_1000b3b3, align 4
  %v0_1000b3b4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000b3b4, i32* @ecx, align 4
  %v4_1000b3b6 = call i32 @function_1000b190(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v4_1000b3b6, i32* %eax.global-to-local, align 4
  %v4_1000b3bb = trunc i32 %v4_1000b3b6 to i8
  %v5_1000b3bb = icmp eq i8 %v4_1000b3bb, 0
  br i1 %v5_1000b3bb, label %dec_label_pc_1000b417, label %dec_label_pc_1000b3bf

dec_label_pc_1000b3bf:                            ; preds = %dec_label_pc_1000b397
  store i32 %arg5, i32* @esi, align 4
  %v1_1000b3c2 = add i32 %arg5, 12
  %v2_1000b3c2 = inttoptr i32 %v1_1000b3c2 to i32*
  %v3_1000b3c2 = load i32, i32* %v2_1000b3c2, align 4
  store i32 %v3_1000b3c2, i32* @edi, align 4
  %v1_1000b3c5 = add i32 %arg5, 4
  %v2_1000b3c5 = inttoptr i32 %v1_1000b3c5 to i32*
  %v3_1000b3c5 = load i32, i32* %v2_1000b3c5, align 4
  store i32 %v3_1000b3c5, i32* @eax, align 4
  %v1_1000b3c8 = add i32 %v3_1000b3c2, 1
  store i32 %v1_1000b3c8, i32* @ecx, align 4
  %v7_1000b3cd = icmp sgt i32 %v1_1000b3c8, %v3_1000b3c5
  br i1 %v7_1000b3cd, label %dec_label_pc_1000b3cf, label %dec_label_pc_1000b3dc

dec_label_pc_1000b3cf:                            ; preds = %dec_label_pc_1000b3bf
  %v2_1000b3d1 = sub i32 %v3_1000b3c2, %v3_1000b3c5
  %v1_1000b3d3 = add i32 %v2_1000b3d1, 1
  store i32 %v1_1000b3d3, i32* %edx.global-to-local, align 4
  %v1_1000b3d4 = load i32, i32* @esp, align 4
  %v2_1000b3d4 = add i32 %v1_1000b3d4, -4
  %v3_1000b3d4 = inttoptr i32 %v2_1000b3d4 to i32*
  store i32 %v1_1000b3d3, i32* %v3_1000b3d4, align 4
  %v0_1000b3d5 = load i32, i32* @esi, align 4
  store i32 %v0_1000b3d5, i32* @ecx, align 4
  %v1_1000b3d7 = call i32 @function_1000d920(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000b3d7, i32* %eax.global-to-local, align 4
  %v0_1000b3dc.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000b3dc

dec_label_pc_1000b3dc:                            ; preds = %dec_label_pc_1000b3bf, %dec_label_pc_1000b3cf
  %v18_1000b3dc = phi i32 [ %arg5, %dec_label_pc_1000b3bf ], [ %v0_1000b3dc.pre, %dec_label_pc_1000b3cf ]
  %v1_1000b3dc = add i32 %v18_1000b3dc, 12
  %v2_1000b3dc = inttoptr i32 %v1_1000b3dc to i32*
  %v3_1000b3dc = load i32, i32* %v2_1000b3dc, align 4
  %v4_1000b3dc = add i32 %v3_1000b3dc, 1
  store i32 %v4_1000b3dc, i32* %v2_1000b3dc, align 4
  %v0_1000b3df = load i32, i32* @esi, align 4
  %v1_1000b3df = add i32 %v0_1000b3df, 12
  %v2_1000b3df = inttoptr i32 %v1_1000b3df to i32*
  %v3_1000b3df = load i32, i32* %v2_1000b3df, align 4
  store i32 %v3_1000b3df, i32* %eax.global-to-local, align 4
  %v1_1000b3e2 = inttoptr i32 %v0_1000b3df to i32*
  %v2_1000b3e2 = load i32, i32* %v1_1000b3e2, align 4
  store i32 %v2_1000b3e2, i32* @ecx, align 4
  %v1_1000b3e4 = load i32, i32* @edi, align 4
  %v2_1000b3e4 = sub i32 %v3_1000b3df, %v1_1000b3e4
  %v1_1000b3e6 = add i32 %v2_1000b3e4, -1
  store i32 %v1_1000b3e6, i32* %eax.global-to-local, align 4
  %v2_1000b3e7 = add i32 %v0_1000b3df, 16
  %v3_1000b3e7 = inttoptr i32 %v2_1000b3e7 to i32*
  store i32 %v2_1000b3e2, i32* %v3_1000b3e7, align 4
  %tmp34 = icmp slt i32 %v1_1000b3e6, 1
  br i1 %tmp34, label %dec_label_pc_1000b3dc.dec_label_pc_1000b403_crit_edge, label %dec_label_pc_1000b3ee

dec_label_pc_1000b3dc.dec_label_pc_1000b403_crit_edge: ; preds = %dec_label_pc_1000b3dc
  %v0_1000b43f.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000b403

dec_label_pc_1000b3ee:                            ; preds = %dec_label_pc_1000b3dc
  %v2_1000b3f0 = mul i32 %v1_1000b3e6, 4
  store i32 %v2_1000b3f0, i32* %eax.global-to-local, align 4
  %v0_1000b3f2 = load i32, i32* @ecx, align 4
  %v1_1000b3f2 = load i32, i32* @edi, align 4
  %v2_1000b3f2 = mul i32 %v1_1000b3f2, 4
  %v3_1000b3f2 = add i32 %v2_1000b3f2, %v0_1000b3f2
  store i32 %v3_1000b3f2, i32* @ecx, align 4
  %v1_1000b3f5 = load i32, i32* @esp, align 4
  %v2_1000b3f5 = add i32 %v1_1000b3f5, -4
  %v3_1000b3f5 = inttoptr i32 %v2_1000b3f5 to i32*
  store i32 %v2_1000b3f0, i32* %v3_1000b3f5, align 4
  %v0_1000b3f6 = load i32, i32* @ecx, align 4
  %v2_1000b3f6 = add i32 %v1_1000b3f5, -8
  %v3_1000b3f6 = inttoptr i32 %v2_1000b3f6 to i32*
  store i32 %v0_1000b3f6, i32* %v3_1000b3f6, align 4
  %v0_1000b3f7 = load i32, i32* @ecx, align 4
  %v1_1000b3f7 = add i32 %v0_1000b3f7, 4
  store i32 %v1_1000b3f7, i32* @ecx, align 4
  %v2_1000b3fa = add i32 %v1_1000b3f5, -12
  %v3_1000b3fa = inttoptr i32 %v2_1000b3fa to i32*
  store i32 %v1_1000b3f7, i32* %v3_1000b3fa, align 4
  %v1_1000b3fb = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_1000b3fb = ptrtoint i32* %v1_1000b3fb to i32
  store i32 %v3_1000b3fb, i32* %eax.global-to-local, align 4
  %v0_1000b400 = load i32, i32* @esp, align 4
  %v1_1000b400 = add i32 %v0_1000b400, 12
  br label %dec_label_pc_1000b403

dec_label_pc_1000b403:                            ; preds = %dec_label_pc_1000b3dc.dec_label_pc_1000b403_crit_edge, %dec_label_pc_1000b3ee
  %v0_1000b43f.pre = phi i32 [ %v0_1000b43f.pre.pre, %dec_label_pc_1000b3dc.dec_label_pc_1000b403_crit_edge ], [ %v1_1000b400, %dec_label_pc_1000b3ee ]
  %v0_1000b403 = load i32, i32* @esi, align 4
  %v1_1000b403 = inttoptr i32 %v0_1000b403 to i32*
  %v2_1000b403 = load i32, i32* %v1_1000b403, align 4
  store i32 %v2_1000b403, i32* @ecx, align 4
  %v1_1000b405 = load i32, i32* @edi, align 4
  %v2_1000b405 = mul i32 %v1_1000b405, 4
  %v3_1000b405 = add i32 %v2_1000b405, %v2_1000b403
  store i32 %v3_1000b405, i32* @eax, align 4
  %v1_1000b408 = icmp eq i32 %v3_1000b405, 0
  br i1 %v1_1000b408, label %dec_label_pc_1000b43f, label %dec_label_pc_1000b40c

dec_label_pc_1000b40c:                            ; preds = %dec_label_pc_1000b403
  %v0_1000b40d = load i32, i32* @ebx, align 4
  %v2_1000b40d = inttoptr i32 %v3_1000b405 to i32*
  store i32 %v0_1000b40d, i32* %v2_1000b40d, align 4
  %v0_1000b40f = load i32, i32* @esp, align 4
  %v1_1000b40f = inttoptr i32 %v0_1000b40f to i32*
  %v2_1000b40f = load i32, i32* %v1_1000b40f, align 4
  store i32 %v2_1000b40f, i32* @ebx, align 4
  %v3_1000b40f = add i32 %v0_1000b40f, 4
  %v1_1000b410 = inttoptr i32 %v3_1000b40f to i32*
  %v2_1000b410 = load i32, i32* %v1_1000b410, align 4
  store i32 %v2_1000b410, i32* @edi, align 4
  %v2_1000b413 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000b413, i32* @ebp, align 4
  %v0_1000b414 = load i32, i32* @eax, align 4
  ret i32 %v0_1000b414

dec_label_pc_1000b417:                            ; preds = %dec_label_pc_1000b397
  store i32 %v15_1000b2f3, i32* %edx.global-to-local, align 4
  %v1_1000b41d = load i32, i32* @esp, align 4
  %v2_1000b41d = add i32 %v1_1000b41d, -4
  %v3_1000b41d = inttoptr i32 %v2_1000b41d to i32*
  store i32 %v15_1000b2f3, i32* %v3_1000b41d, align 4
  %v1_1000b41e = add i32 %v1_1000b41d, -8
  %v2_1000b41e = inttoptr i32 %v1_1000b41e to i32*
  store i32 ptrtoint ([71 x i8]* @global_var_10023d60.431 to i32), i32* %v2_1000b41e, align 4
  %v0_1000b423 = call i32 @"?DevMsg@@YAXPBDZZ"()
  store i32 %v0_1000b423, i32* %eax.global-to-local, align 4
  %v0_1000b42c = load i32, i32* @ebx, align 4
  store i32 %v0_1000b42c, i32* @ecx, align 4
  %v0_1000b42e = call i32 @function_1000a140()
  store i32 %v0_1000b42e, i32* %eax.global-to-local, align 4
  %v0_1000b433 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b433, i32* %eax.global-to-local, align 4
  %v1_1000b435 = inttoptr i32 %v0_1000b433 to i32*
  %v2_1000b435 = load i32, i32* %v1_1000b435, align 4
  store i32 %v2_1000b435, i32* %edx.global-to-local, align 4
  store i32 %v0_1000b433, i32* @ecx, align 4
  %v1_1000b439 = add i32 %v2_1000b435, 8
  %v2_1000b439 = inttoptr i32 %v1_1000b439 to i32*
  %v3_1000b439 = load i32, i32* %v2_1000b439, align 4
  store i32 %v3_1000b439, i32* @eax, align 4
  %v0_1000b43c = load i32, i32* @ebx, align 4
  %v1_1000b43c = load i32, i32* @esp, align 4
  %v2_1000b43c = add i32 %v1_1000b43c, -4
  %v3_1000b43c = inttoptr i32 %v2_1000b43c to i32*
  store i32 %v0_1000b43c, i32* %v3_1000b43c, align 4
  br label %dec_label_pc_1000b43f

dec_label_pc_1000b43f:                            ; preds = %dec_label_pc_1000b403, %dec_label_pc_1000b417
  %v0_1000b43f = phi i32 [ %v2_1000b43c, %dec_label_pc_1000b417 ], [ %v0_1000b43f.pre, %dec_label_pc_1000b403 ]
  %v3_1000b43f = add i32 %v0_1000b43f, 4
  %v1_1000b440 = inttoptr i32 %v3_1000b43f to i32*
  %v2_1000b440 = load i32, i32* %v1_1000b440, align 4
  store i32 %v2_1000b440, i32* @ebx, align 4
  %v3_1000b440 = add i32 %v0_1000b43f, 8
  %v2_1000b444.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000b441

dec_label_pc_1000b441:                            ; preds = %dec_label_pc_1000b43f, %dec_label_pc_1000b2f0
  %v2_1000b444 = phi i32 [ %v2_1000b444.pre, %dec_label_pc_1000b43f ], [ %v0_1000b2f0, %dec_label_pc_1000b2f0 ]
  %v0_1000b441 = phi i32 [ %v3_1000b440, %dec_label_pc_1000b43f ], [ %v4_1000b2fd, %dec_label_pc_1000b2f0 ]
  %v1_1000b441 = inttoptr i32 %v0_1000b441 to i32*
  %v2_1000b441 = load i32, i32* %v1_1000b441, align 4
  store i32 %v2_1000b441, i32* @edi, align 4
  store i32 %v2_1000b444, i32* @ebp, align 4
  %v0_1000b445 = load i32, i32* @eax, align 4
  ret i32 %v0_1000b445
}

define i32 @function_1000b450(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1000b450:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp45 = ptrtoint i32* %arg2 to i32
  %stack_var_-7 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-5 = alloca i8, align 1
  %stack_var_-6 = alloca i8, align 1
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000b450 = load i32, i32* @ebp, align 4
  store i32 %v0_1000b450, i32* %stack_var_-4, align 4
  %v4_1000b450 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000b450, i32* @ebp, align 4
  %v16_1000b453 = ptrtoint i32* %stack_var_-60 to i32
  %v0_1000b458 = load i32, i32* @ecx, align 4
  store i32 %v0_1000b458, i32* @ebx, align 4
  %v0_1000b45e = call i32 @GetCurrentThreadId()
  store i32 %v0_1000b45e, i32* @ecx, align 4
  %v0_1000b466 = load i32, i32* @global_var_1002be38.432, align 4
  store i32 %v0_1000b466, i32* %eax.global-to-local, align 4
  %v12_1000b46b = icmp eq i32 %v0_1000b45e, %v0_1000b466
  br i1 %v12_1000b46b, label %dec_label_pc_1000b480, label %dec_label_pc_1000b46f

dec_label_pc_1000b46f:                            ; preds = %dec_label_pc_1000b450
  store i32 %v0_1000b45e, i32* %edx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1002be38.432 to i32), i32* %esi.global-to-local, align 4
  %v15_1000b478 = icmp eq i32 %v0_1000b466, 0
  %v22_1000b478 = select i1 %v15_1000b478, i32 %v0_1000b45e, i32 %v0_1000b466
  store i32 %v22_1000b478, i32* @global_var_1002be38.432, align 4
  store i32 %v0_1000b466, i32* %eax.global-to-local, align 4
  %v1_1000b47e = icmp eq i1 %v15_1000b478, false
  br i1 %v1_1000b47e, label %dec_label_pc_1000b48a, label %dec_label_pc_1000b480

dec_label_pc_1000b480:                            ; preds = %dec_label_pc_1000b46f, %dec_label_pc_1000b450
  %v0_1000b480 = load i32, i32* @global_var_1002be3c.433, align 4
  %v1_1000b480 = add i32 %v0_1000b480, 1
  store i32 %v1_1000b480, i32* @global_var_1002be3c.433, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_1000b49b

dec_label_pc_1000b48a:                            ; preds = %dec_label_pc_1000b46f
  %v0_1000b48a = call i32 @__asm_pause()
  store i32 %v0_1000b48a, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  %v0_1000b48f = load i32, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_1002be38.432 to i32), i32* @ecx, align 4
  %v2_1000b495 = call i32 @"?Lock@CThreadFastMutex@@ACEXII@Z"(i32 %v0_1000b48f, i32 0)
  store i32 %v2_1000b495, i32* %eax.global-to-local, align 4
  %v0_1000b49e.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000b49b

dec_label_pc_1000b49b:                            ; preds = %dec_label_pc_1000b48a, %dec_label_pc_1000b480
  %v0_1000b49e = phi i32 [ %v0_1000b49e.pre, %dec_label_pc_1000b48a ], [ 0, %dec_label_pc_1000b480 ]
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_1000b4a1 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b4a1, i32* %esi.global-to-local, align 4
  store i32 %v0_1000b49e, i32* %stack_var_-40, align 4
  store i32 %v0_1000b49e, i32* %stack_var_-60, align 4
  store i32 %arg1, i32* bitcast ([5 x i8]** @global_var_10028548.435 to i32*), align 4
  store i32 %v0_1000b49e, i32* @global_var_10028550.423, align 4
  %v2_1000b4d3 = ptrtoint i8* %stack_var_-6 to i32
  %v2_1000b4d7 = ptrtoint i8* %stack_var_-5 to i32
  %v1_1000b4ea = add i32 %tmp45, 20
  %v2_1000b4ea = inttoptr i32 %v1_1000b4ea to i8*
  %v2_1000b625 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1000b664 = ptrtoint i32* %stack_var_-7 to i32
  %v2_1000b542 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_1000b4d0

dec_label_pc_1000b4d0:                            ; preds = %dec_label_pc_1000b713, %dec_label_pc_1000b49b
  %stack_var_-12.0 = phi i32 [ %v0_1000b49e, %dec_label_pc_1000b49b ], [ %stack_var_-12.1, %dec_label_pc_1000b713 ]
  store i32 %tmp45, i32* %eax.global-to-local, align 4
  %v1_1000b4d6 = load i32, i32* @esp, align 4
  %v2_1000b4d6 = add i32 %v1_1000b4d6, -4
  %v3_1000b4d6 = inttoptr i32 %v2_1000b4d6 to i32*
  store i32 %v2_1000b4d3, i32* %v3_1000b4d6, align 4
  store i32 %v2_1000b4d7, i32* @edx, align 4
  %v2_1000b4da = add i32 %v1_1000b4d6, -8
  %v3_1000b4da = inttoptr i32 %v2_1000b4da to i32*
  store i32 %v2_1000b4d7, i32* %v3_1000b4da, align 4
  %v0_1000b4db = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b4db = add i32 %v1_1000b4d6, -12
  %v3_1000b4db = inttoptr i32 %v2_1000b4db to i32*
  store i32 %v0_1000b4db, i32* %v3_1000b4db, align 4
  %v0_1000b4dc = load i32, i32* @ebx, align 4
  store i32 %v0_1000b4dc, i32* @ecx, align 4
  %v2_1000b4e2 = call i32 @function_1000a1e0(i32 1, i32* nonnull @5, i32* nonnull @5)
  store i32 %v2_1000b4e2, i32* %eax.global-to-local, align 4
  store i32 %tmp45, i32* @ecx, align 4
  %v3_1000b4ea = load i8, i8* %v2_1000b4ea, align 1
  %v10_1000b4ea = icmp eq i8 %v3_1000b4ea, 0
  %v1_1000b4ee = inttoptr i32 %v2_1000b4e2 to i8*
  store i32 %v2_1000b4e2, i32* @edi, align 4
  %v1_1000b4f0 = icmp eq i1 %v10_1000b4ea, false
  br i1 %v1_1000b4f0, label %dec_label_pc_1000b720, label %dec_label_pc_1000b4f6

dec_label_pc_1000b4f6:                            ; preds = %dec_label_pc_1000b4d0
  %v2_1000b4f6 = icmp eq i32 %v2_1000b4e2, 0
  br i1 %v2_1000b4f6, label %dec_label_pc_1000b720, label %dec_label_pc_1000b4fe

dec_label_pc_1000b4fe:                            ; preds = %dec_label_pc_1000b4f6
  %v3_1000b4fe = load i8, i8* %stack_var_-5, align 1
  %v12_1000b4fe = icmp eq i8 %v3_1000b4fe, 0
  %v1_1000b502 = icmp eq i1 %v12_1000b4fe, false
  br i1 %v1_1000b502, label %dec_label_pc_1000b50d, label %dec_label_pc_1000b504

dec_label_pc_1000b504:                            ; preds = %dec_label_pc_1000b4fe
  %v3_1000b504 = load i8, i8* %v1_1000b4ee, align 1
  %v10_1000b504 = icmp eq i8 %v3_1000b504, 0
  br i1 %v10_1000b504, label %dec_label_pc_1000b720, label %dec_label_pc_1000b50d

dec_label_pc_1000b50d:                            ; preds = %dec_label_pc_1000b504, %dec_label_pc_1000b4fe
  %v0_1000b50d = load i32, i32* @esp, align 4
  %v1_1000b50d = add i32 %v0_1000b50d, -4
  %v2_1000b50d = inttoptr i32 %v1_1000b50d to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_10023df0.436 to i32), i32* %v2_1000b50d, align 4
  %v3_1000b512 = add i32 %v0_1000b50d, -8
  %v4_1000b512 = inttoptr i32 %v3_1000b512 to i32*
  store i32 %v2_1000b4e2, i32* %v4_1000b512, align 4
  %v1_1000b513 = call i32 @function_100094b0(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  store i32 %v1_1000b513, i32* %eax.global-to-local, align 4
  %v0_1000b518 = load i32, i32* @esp, align 4
  %v1_1000b51b = icmp eq i32 %v1_1000b513, 0
  %v1_1000b51d = icmp eq i1 %v1_1000b51b, false
  br i1 %v1_1000b51d, label %dec_label_pc_1000b570, label %dec_label_pc_1000b51f

dec_label_pc_1000b51f:                            ; preds = %dec_label_pc_1000b50d
  store i32 %tmp45, i32* @ecx, align 4
  store i32 %v2_1000b4d3, i32* @edx, align 4
  %v2_1000b525 = add i32 %v0_1000b518, 4
  %v3_1000b525 = inttoptr i32 %v2_1000b525 to i32*
  store i32 %v2_1000b4d3, i32* %v3_1000b525, align 4
  store i32 %v2_1000b4d7, i32* %eax.global-to-local, align 4
  %v3_1000b529 = inttoptr i32 %v0_1000b518 to i32*
  store i32 %v2_1000b4d7, i32* %v3_1000b529, align 4
  %v0_1000b52a = load i32, i32* @ecx, align 4
  %v2_1000b52a = add i32 %v0_1000b518, -4
  %v3_1000b52a = inttoptr i32 %v2_1000b52a to i32*
  store i32 %v0_1000b52a, i32* %v3_1000b52a, align 4
  %v0_1000b52b = load i32, i32* @ebx, align 4
  store i32 %v0_1000b52b, i32* @ecx, align 4
  %v1_1000b52d = call i32 @function_1000a1e0(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32* nonnull @5)
  store i32 %v1_1000b52d, i32* @eax, align 4
  %v2_1000b532 = icmp eq i32 %v1_1000b52d, 0
  br i1 %v2_1000b532, label %dec_label_pc_1000b55c, label %dec_label_pc_1000b536

dec_label_pc_1000b536:                            ; preds = %dec_label_pc_1000b51f
  %v2_1000b52d = inttoptr i32 %v1_1000b52d to i8*
  %v3_1000b536 = load i8, i8* %v2_1000b52d, align 1
  %v10_1000b536 = icmp eq i8 %v3_1000b536, 0
  br i1 %v10_1000b536, label %dec_label_pc_1000b55c, label %dec_label_pc_1000b53b

dec_label_pc_1000b53b:                            ; preds = %dec_label_pc_1000b536
  %v1_1000b53e = load i32, i32* @esp, align 4
  %v2_1000b53e = add i32 %v1_1000b53e, -4
  %v3_1000b53e = inttoptr i32 %v2_1000b53e to i32*
  store i32 %arg5, i32* %v3_1000b53e, align 4
  store i32 %arg4, i32* %edx.global-to-local, align 4
  %v2_1000b545 = add i32 %v1_1000b53e, -8
  %v3_1000b545 = inttoptr i32 %v2_1000b545 to i32*
  store i32 %v2_1000b542, i32* %v3_1000b545, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v0_1000b549 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b549 = add i32 %v1_1000b53e, -12
  %v3_1000b549 = inttoptr i32 %v2_1000b549 to i32*
  store i32 %v0_1000b549, i32* %v3_1000b549, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v0_1000b54d = load i32, i32* @ecx, align 4
  %v2_1000b54d = add i32 %v1_1000b53e, -16
  %v3_1000b54d = inttoptr i32 %v2_1000b54d to i32*
  store i32 %v0_1000b54d, i32* %v3_1000b54d, align 4
  %v3_1000b54e = add i32 %v1_1000b53e, -20
  %v4_1000b54e = inttoptr i32 %v3_1000b54e to i32*
  store i32 %v1_1000b52d, i32* %v4_1000b54e, align 4
  %v0_1000b54f = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b54f = add i32 %v1_1000b53e, -24
  %v3_1000b54f = inttoptr i32 %v2_1000b54f to i32*
  store i32 %v0_1000b54f, i32* %v3_1000b54f, align 4
  %v0_1000b550 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b550, i32* @ecx, align 4
  %v6_1000b552 = call i32 @function_1000b2f0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v6_1000b552, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b713

dec_label_pc_1000b55c:                            ; preds = %dec_label_pc_1000b536, %dec_label_pc_1000b51f
  %v0_1000b55c = load i32, i32* @esp, align 4
  %v1_1000b55c = add i32 %v0_1000b55c, -4
  %v2_1000b55c = inttoptr i32 %v1_1000b55c to i32*
  store i32 ptrtoint ([18 x i8]* @global_var_10023ddc.437 to i32), i32* %v2_1000b55c, align 4
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000b566 = call i32 @function_1000a060(i8 ptrtoint (i32* @5 to i8))
  store i32 %v1_1000b566, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b713

dec_label_pc_1000b570:                            ; preds = %dec_label_pc_1000b50d
  %v1_1000b570 = add i32 %v0_1000b518, 4
  %v2_1000b570 = inttoptr i32 %v1_1000b570 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_10023dd4.438 to i32), i32* %v2_1000b570, align 4
  %v4_1000b575 = inttoptr i32 %v0_1000b518 to i32*
  store i32 %v2_1000b4e2, i32* %v4_1000b575, align 4
  %v1_1000b576 = call i32 @function_100094b0(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  store i32 %v1_1000b576, i32* %eax.global-to-local, align 4
  %v0_1000b57b = load i32, i32* @esp, align 4
  %v1_1000b57e = icmp eq i32 %v1_1000b576, 0
  %v1_1000b580 = icmp eq i1 %v1_1000b57e, false
  br i1 %v1_1000b580, label %dec_label_pc_1000b5d3, label %dec_label_pc_1000b582

dec_label_pc_1000b582:                            ; preds = %dec_label_pc_1000b570
  store i32 %tmp45, i32* @edx, align 4
  store i32 %v2_1000b4d3, i32* %eax.global-to-local, align 4
  %v2_1000b588 = add i32 %v0_1000b57b, 4
  %v3_1000b588 = inttoptr i32 %v2_1000b588 to i32*
  store i32 %v2_1000b4d3, i32* %v3_1000b588, align 4
  %v3_1000b58c = inttoptr i32 %v0_1000b57b to i32*
  store i32 %v2_1000b4d7, i32* %v3_1000b58c, align 4
  %v0_1000b58d = load i32, i32* @edx, align 4
  %v2_1000b58d = add i32 %v0_1000b57b, -4
  %v3_1000b58d = inttoptr i32 %v2_1000b58d to i32*
  store i32 %v0_1000b58d, i32* %v3_1000b58d, align 4
  %v0_1000b58e = load i32, i32* @ebx, align 4
  store i32 %v0_1000b58e, i32* @ecx, align 4
  %v1_1000b590 = call i32 @function_1000a1e0(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32* nonnull @5)
  store i32 %v1_1000b590, i32* %eax.global-to-local, align 4
  %v2_1000b595 = icmp eq i32 %v1_1000b590, 0
  br i1 %v2_1000b595, label %dec_label_pc_1000b5bf, label %dec_label_pc_1000b599

dec_label_pc_1000b599:                            ; preds = %dec_label_pc_1000b582
  %v2_1000b590 = inttoptr i32 %v1_1000b590 to i8*
  %v3_1000b599 = load i8, i8* %v2_1000b590, align 1
  %v10_1000b599 = icmp eq i8 %v3_1000b599, 0
  br i1 %v10_1000b599, label %dec_label_pc_1000b5bf, label %dec_label_pc_1000b59e

dec_label_pc_1000b59e:                            ; preds = %dec_label_pc_1000b599
  %v1_1000b5a1 = load i32, i32* @esp, align 4
  %v2_1000b5a1 = add i32 %v1_1000b5a1, -4
  %v3_1000b5a1 = inttoptr i32 %v2_1000b5a1 to i32*
  store i32 %arg5, i32* %v3_1000b5a1, align 4
  store i32 %arg4, i32* @ecx, align 4
  %v2_1000b5a8 = add i32 %v1_1000b5a1, -8
  %v3_1000b5a8 = inttoptr i32 %v2_1000b5a8 to i32*
  store i32 %v16_1000b453, i32* %v3_1000b5a8, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v0_1000b5ac = load i32, i32* @ecx, align 4
  %v2_1000b5ac = add i32 %v1_1000b5a1, -12
  %v3_1000b5ac = inttoptr i32 %v2_1000b5ac to i32*
  store i32 %v0_1000b5ac, i32* %v3_1000b5ac, align 4
  %v0_1000b5ad = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b5ad = add i32 %v1_1000b5a1, -16
  %v3_1000b5ad = inttoptr i32 %v2_1000b5ad to i32*
  store i32 %v0_1000b5ad, i32* %v3_1000b5ad, align 4
  %v3_1000b5ae = add i32 %v1_1000b5a1, -20
  %v4_1000b5ae = inttoptr i32 %v3_1000b5ae to i32*
  store i32 %v1_1000b590, i32* %v4_1000b5ae, align 4
  store i32 %arg1, i32* @eax, align 4
  %v2_1000b5b2 = add i32 %v1_1000b5a1, -24
  %v3_1000b5b2 = inttoptr i32 %v2_1000b5b2 to i32*
  store i32 %arg1, i32* %v3_1000b5b2, align 4
  %v0_1000b5b3 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b5b3, i32* @ecx, align 4
  %v6_1000b5b5 = call i32 @function_1000b2f0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v6_1000b5b5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b713

dec_label_pc_1000b5bf:                            ; preds = %dec_label_pc_1000b599, %dec_label_pc_1000b582
  %v0_1000b5bf = load i32, i32* @esp, align 4
  %v1_1000b5bf = add i32 %v0_1000b5bf, -4
  %v2_1000b5bf = inttoptr i32 %v1_1000b5bf to i32*
  store i32 ptrtoint ([15 x i8]* @global_var_10023dc4.439 to i32), i32* %v2_1000b5bf, align 4
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000b5c9 = call i32 @function_1000a060(i8 ptrtoint (i32* @5 to i8))
  store i32 %v1_1000b5c9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b713

dec_label_pc_1000b5d3:                            ; preds = %dec_label_pc_1000b570
  %v0_1000b5d3 = load i32, i32* @esi, align 4
  %v1_1000b5d3 = icmp eq i32 %v0_1000b5d3, 0
  %v1_1000b5d5 = icmp eq i1 %v1_1000b5d3, false
  br i1 %v1_1000b5d5, label %dec_label_pc_1000b610, label %dec_label_pc_1000b5d7

dec_label_pc_1000b5d7:                            ; preds = %dec_label_pc_1000b5d3
  %v0_1000b5d7 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b5d7, i32* %eax.global-to-local, align 4
  %v1_1000b5dd = inttoptr i32 %v0_1000b5d7 to i32*
  %v2_1000b5dd = load i32, i32* %v1_1000b5dd, align 4
  store i32 %v2_1000b5dd, i32* %edx.global-to-local, align 4
  store i32 %v0_1000b5d7, i32* @ecx, align 4
  %v1_1000b5e1 = add i32 %v2_1000b5dd, 4
  %v2_1000b5e1 = inttoptr i32 %v1_1000b5e1 to i32*
  %v3_1000b5e1 = load i32, i32* %v2_1000b5e1, align 4
  store i32 %v3_1000b5e1, i32* %eax.global-to-local, align 4
  %v0_1000b5e4 = load i32, i32* @esp, align 4
  %v1_1000b5e4 = add i32 %v0_1000b5e4, -4
  %v2_1000b5e4 = inttoptr i32 %v1_1000b5e4 to i32*
  store i32 36, i32* %v2_1000b5e4, align 4
  %v1_1000b5e8 = icmp eq i32 %v3_1000b5e1, 0
  br i1 %v1_1000b5e8, label %dec_label_pc_1000b5f8, label %dec_label_pc_1000b5ec

dec_label_pc_1000b5ec:                            ; preds = %dec_label_pc_1000b5d7
  %v3_1000b5ec = add i32 %v0_1000b5e4, -8
  %v4_1000b5ec = inttoptr i32 %v3_1000b5ec to i32*
  store i32 %v2_1000b4e2, i32* %v4_1000b5ec, align 4
  store i32 %v3_1000b5e1, i32* @ecx, align 4
  %v1_1000b5ef = call i32 @function_1000a4a0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000b5ef, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b5fa

dec_label_pc_1000b5f8:                            ; preds = %dec_label_pc_1000b5d7
  br label %dec_label_pc_1000b5fa

dec_label_pc_1000b5fa:                            ; preds = %dec_label_pc_1000b5f8, %dec_label_pc_1000b5ec
  %storemerge5 = phi i32 [ 0, %dec_label_pc_1000b5f8 ], [ %v1_1000b5ef, %dec_label_pc_1000b5ec ]
  store i32 %storemerge5, i32* %esi.global-to-local, align 4
  %v0_1000b5fa = load i32, i32* @ebx, align 4
  %v1_1000b5fa = add i32 %v0_1000b5fa, 17
  %v2_1000b5fa = inttoptr i32 %v1_1000b5fa to i8*
  %v3_1000b5fa = load i8, i8* %v2_1000b5fa, align 1
  %v10_1000b5fa = icmp eq i8 %v3_1000b5fa, 0
  store i32 %stack_var_-12.0, i32* %eax.global-to-local, align 4
  %v1_1000b601 = icmp eq i1 %v10_1000b5fa, false
  %v2_1000b601 = zext i1 %v1_1000b601 to i32
  %v3_1000b601 = load i32, i32* @ecx, align 4
  %v4_1000b601 = and i32 %v3_1000b601, -256
  %v5_1000b601 = or i32 %v4_1000b601, %v2_1000b601
  store i32 %v5_1000b601, i32* @ecx, align 4
  %v1_1000b604 = zext i1 %v1_1000b601 to i8
  %v3_1000b604 = add i32 %storemerge5, 17
  %v4_1000b604 = inttoptr i32 %v3_1000b604 to i8*
  store i8 %v1_1000b604, i8* %v4_1000b604, align 1
  %v1_1000b607 = icmp eq i32 %stack_var_-12.0, 0
  br i1 %v1_1000b607, label %dec_label_pc_1000b644, label %dec_label_pc_1000b60b

dec_label_pc_1000b60b:                            ; preds = %dec_label_pc_1000b5fa
  %v0_1000b60b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000b60b = add i32 %stack_var_-12.0, 20
  %v3_1000b60b = inttoptr i32 %v2_1000b60b to i32*
  store i32 %v0_1000b60b, i32* %v3_1000b60b, align 4
  br label %dec_label_pc_1000b644

dec_label_pc_1000b610:                            ; preds = %dec_label_pc_1000b5d3
  store i32 -1, i32* %stack_var_-16, align 4
  %v0_1000b617 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b617, i32* %eax.global-to-local, align 4
  %v1_1000b61d = inttoptr i32 %v0_1000b617 to i32*
  %v2_1000b61d = load i32, i32* %v1_1000b61d, align 4
  store i32 %v2_1000b61d, i32* %edx.global-to-local, align 4
  %v1_1000b61f = add i32 %v2_1000b61d, 36
  %v2_1000b61f = inttoptr i32 %v1_1000b61f to i32*
  %v3_1000b61f = load i32, i32* %v2_1000b61f, align 4
  store i32 %v3_1000b61f, i32* %edx.global-to-local, align 4
  %v0_1000b622 = load i32, i32* @esp, align 4
  %v1_1000b622 = add i32 %v0_1000b622, -4
  %v2_1000b622 = inttoptr i32 %v1_1000b622 to i32*
  store i32 1, i32* %v2_1000b622, align 4
  %v3_1000b624 = add i32 %v0_1000b622, -8
  %v4_1000b624 = inttoptr i32 %v3_1000b624 to i32*
  store i32 %v2_1000b4e2, i32* %v4_1000b624, align 4
  %v2_1000b628 = add i32 %v0_1000b622, -12
  %v3_1000b628 = inttoptr i32 %v2_1000b628 to i32*
  store i32 %v2_1000b625, i32* %v3_1000b628, align 4
  %v0_1000b629 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000b629, i32* @ecx, align 4
  %v0_1000b62d = load i32, i32* @esi, align 4
  %v1_1000b62d = inttoptr i32 %v0_1000b62d to i32*
  %v2_1000b62d = load i32, i32* %v1_1000b62d, align 4
  %v4_1000b62f = load i32, i32* %stack_var_-16, align 4
  %v5_1000b62f = xor i32 %v4_1000b62f, %v2_1000b62d
  %v1_1000b632 = and i32 %v5_1000b62f, 16777215
  store i32 %v1_1000b632, i32* @ecx, align 4
  %v2_1000b638 = load i32, i32* %v1_1000b62d, align 4
  %v4_1000b638 = xor i32 %v2_1000b638, %v1_1000b632
  store i32 %v4_1000b638, i32* %v1_1000b62d, align 4
  %v0_1000b63a = load i32, i32* %eax.global-to-local, align 4
  %v1_1000b63a = trunc i32 %v0_1000b63a to i8
  %v2_1000b63a = load i32, i32* @esi, align 4
  %v3_1000b63a = add i32 %v2_1000b63a, 3
  %v4_1000b63a = inttoptr i32 %v3_1000b63a to i8*
  store i8 %v1_1000b63a, i8* %v4_1000b63a, align 1
  %v0_1000b63d = load i32, i32* %eax.global-to-local, align 4
  %v2_1000b63d = sdiv i32 %v0_1000b63d, 256
  store i32 %v2_1000b63d, i32* %eax.global-to-local, align 4
  %v1_1000b640 = trunc i32 %v2_1000b63d to i16
  %v2_1000b640 = load i32, i32* @esi, align 4
  %v3_1000b640 = add i32 %v2_1000b640, 18
  %v4_1000b640 = inttoptr i32 %v3_1000b640 to i16*
  store i16 %v1_1000b640, i16* %v4_1000b640, align 2
  br label %dec_label_pc_1000b644

dec_label_pc_1000b644:                            ; preds = %dec_label_pc_1000b610, %dec_label_pc_1000b60b, %dec_label_pc_1000b5fa
  store i32 %tmp45, i32* @edi, align 4
  store i32 %v2_1000b4d3, i32* @edx, align 4
  %v1_1000b64a = load i32, i32* @esp, align 4
  %v2_1000b64a = add i32 %v1_1000b64a, -4
  %v3_1000b64a = inttoptr i32 %v2_1000b64a to i32*
  store i32 %v2_1000b4d3, i32* %v3_1000b64a, align 4
  store i32 %v2_1000b4d7, i32* %eax.global-to-local, align 4
  %v2_1000b64e = add i32 %v1_1000b64a, -8
  %v3_1000b64e = inttoptr i32 %v2_1000b64e to i32*
  store i32 %v2_1000b4d7, i32* %v3_1000b64e, align 4
  %v0_1000b64f = load i32, i32* @edi, align 4
  %v2_1000b64f = add i32 %v1_1000b64a, -12
  %v3_1000b64f = inttoptr i32 %v2_1000b64f to i32*
  store i32 %v0_1000b64f, i32* %v3_1000b64f, align 4
  %v0_1000b650 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b650, i32* @ecx, align 4
  %v1_1000b652 = call i32 @function_1000a1e0(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32* nonnull @5)
  store i32 %v1_1000b652, i32* @eax, align 4
  %v3_1000b657 = load i8, i8* %stack_var_-6, align 1
  %v12_1000b657 = icmp eq i8 %v3_1000b657, 0
  br i1 %v12_1000b657, label %dec_label_pc_1000b69f, label %dec_label_pc_1000b65d

dec_label_pc_1000b65d:                            ; preds = %dec_label_pc_1000b644
  store i32 %arg5, i32* @ecx, align 4
  %v0_1000b660 = load i32, i32* @esp, align 4
  %v1_1000b660 = add i32 %v0_1000b660, -4
  %v2_1000b660 = inttoptr i32 %v1_1000b660 to i32*
  store i32 0, i32* %v2_1000b660, align 4
  %v0_1000b662 = load i32, i32* @ecx, align 4
  %v2_1000b662 = add i32 %v0_1000b660, -8
  %v3_1000b662 = inttoptr i32 %v2_1000b662 to i32*
  store i32 %v0_1000b662, i32* %v3_1000b662, align 4
  %v0_1000b663 = load i32, i32* @eax, align 4
  %v2_1000b663 = add i32 %v0_1000b660, -12
  %v3_1000b663 = inttoptr i32 %v2_1000b663 to i32*
  store i32 %v0_1000b663, i32* %v3_1000b663, align 4
  store i32 %v2_1000b664, i32* @edx, align 4
  %v2_1000b667 = add i32 %v0_1000b660, -16
  %v3_1000b667 = inttoptr i32 %v2_1000b667 to i32*
  store i32 %v2_1000b664, i32* %v3_1000b667, align 4
  store i32 ptrtoint (i32* @global_var_1002be40.418 to i32), i32* @ecx, align 4
  store i32 0, i32* %stack_var_-7, align 4
  %v5_1000b671 = call i32 @function_1000f850(i32* null, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v5_1000b671, i32* %eax.global-to-local, align 4
  %v4_1000b676 = trunc i32 %v5_1000b671 to i8
  %v5_1000b676 = icmp eq i8 %v4_1000b676, 0
  %v1_1000b678 = icmp eq i1 %v5_1000b676, false
  br i1 %v1_1000b678, label %dec_label_pc_1000b689, label %dec_label_pc_1000b67a

dec_label_pc_1000b67a:                            ; preds = %dec_label_pc_1000b65d
  %v0_1000b67a = load i32, i32* @esp, align 4
  %v1_1000b67a = add i32 %v0_1000b67a, -4
  %v2_1000b67a = inttoptr i32 %v1_1000b67a to i32*
  store i32 ptrtoint ([32 x i8]* @global_var_10023c44.419 to i32), i32* %v2_1000b67a, align 4
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000b684 = call i32 @function_1000a060(i8 ptrtoint (i32* @5 to i8))
  store i32 %v1_1000b684, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b689

dec_label_pc_1000b689:                            ; preds = %dec_label_pc_1000b67a, %dec_label_pc_1000b65d
  %v5_1000b689 = phi i32 [ %v1_1000b684, %dec_label_pc_1000b67a ], [ %v5_1000b671, %dec_label_pc_1000b65d ]
  %v3_1000b689 = load i32, i32* %stack_var_-7, align 4
  %v4_1000b689 = and i32 %v3_1000b689, 255
  %v6_1000b689 = and i32 %v5_1000b689, -256
  %v7_1000b689 = or i32 %v4_1000b689, %v6_1000b689
  store i32 %v7_1000b689, i32* %eax.global-to-local, align 4
  %v1_1000b68f = load i32, i32* @esp, align 4
  %v2_1000b68f = add i32 %v1_1000b68f, -4
  %v3_1000b68f = inttoptr i32 %v2_1000b68f to i32*
  store i32 %v2_1000b4d3, i32* %v3_1000b68f, align 4
  store i32 %v2_1000b4d7, i32* @edx, align 4
  %v2_1000b693 = add i32 %v1_1000b68f, -8
  %v3_1000b693 = inttoptr i32 %v2_1000b693 to i32*
  store i32 %v2_1000b4d7, i32* %v3_1000b693, align 4
  %v0_1000b694 = load i32, i32* @edi, align 4
  %v2_1000b694 = add i32 %v1_1000b68f, -12
  %v3_1000b694 = inttoptr i32 %v2_1000b694 to i32*
  store i32 %v0_1000b694, i32* %v3_1000b694, align 4
  %v0_1000b695 = load i32, i32* @ebx, align 4
  store i32 %v0_1000b695, i32* @ecx, align 4
  %v0_1000b697 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000b697 = trunc i32 %v0_1000b697 to i8
  %sext = mul i32 %v0_1000b697, 16777216
  %v1_1000b69a = sdiv i32 %sext, 16777216
  %v2_1000b69a = call i32 @function_1000a1e0(i32 %v1_1000b69a, i32* nonnull @5, i32* nonnull @5)
  store i32 %v2_1000b69a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b69f

dec_label_pc_1000b69f:                            ; preds = %dec_label_pc_1000b689, %dec_label_pc_1000b644
  %v0_1000b6a3 = phi i32 [ %v1_1000b652, %dec_label_pc_1000b644 ], [ %v2_1000b69a, %dec_label_pc_1000b689 ]
  %stack_var_-8.0 = phi i8 [ 1, %dec_label_pc_1000b644 ], [ %v1_1000b697, %dec_label_pc_1000b689 ]
  %v1_1000b69f = icmp eq i32 %v0_1000b6a3, 0
  br i1 %v1_1000b69f, label %dec_label_pc_1000b6c0, label %dec_label_pc_1000b6a3

dec_label_pc_1000b6a3:                            ; preds = %dec_label_pc_1000b69f
  %v1_1000b6a3 = inttoptr i32 %v0_1000b6a3 to i8*
  %v2_1000b6a3 = load i8, i8* %v1_1000b6a3, align 1
  %v12_1000b6a3 = icmp eq i8 %v2_1000b6a3, 123
  %v1_1000b6a6 = icmp eq i1 %v12_1000b6a3, false
  br i1 %v1_1000b6a6, label %dec_label_pc_1000b6c0, label %dec_label_pc_1000b6a8

dec_label_pc_1000b6a8:                            ; preds = %dec_label_pc_1000b6a3
  %v3_1000b6a8 = load i8, i8* %stack_var_-5, align 1
  %v12_1000b6a8 = icmp eq i8 %v3_1000b6a8, 0
  %v1_1000b6ac = icmp eq i1 %v12_1000b6a8, false
  br i1 %v1_1000b6ac, label %dec_label_pc_1000b6c0, label %dec_label_pc_1000b6ae

dec_label_pc_1000b6ae:                            ; preds = %dec_label_pc_1000b6a8
  store i32 %arg5, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000b6b4 = load i32, i32* @esp, align 4
  %v2_1000b6b4 = add i32 %v1_1000b6b4, -4
  %v3_1000b6b4 = inttoptr i32 %v2_1000b6b4 to i32*
  store i32 %arg5, i32* %v3_1000b6b4, align 4
  %v0_1000b6b5 = load i32, i32* @edi, align 4
  %v2_1000b6b5 = add i32 %v1_1000b6b4, -8
  %v3_1000b6b5 = inttoptr i32 %v2_1000b6b5 to i32*
  store i32 %v0_1000b6b5, i32* %v3_1000b6b5, align 4
  %v0_1000b6b6 = load i32, i32* @ecx, align 4
  %v2_1000b6b6 = add i32 %v1_1000b6b4, -12
  %v3_1000b6b6 = inttoptr i32 %v2_1000b6b6 to i32*
  store i32 %v0_1000b6b6, i32* %v3_1000b6b6, align 4
  %v0_1000b6b7 = load i32, i32* @esi, align 4
  store i32 %v0_1000b6b7, i32* @ecx, align 4
  %v3_1000b6b9 = call i32 @function_1000ad10(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  br label %dec_label_pc_1000b6cf

dec_label_pc_1000b6c0:                            ; preds = %dec_label_pc_1000b6a8, %dec_label_pc_1000b6a3, %dec_label_pc_1000b69f
  %v0_1000b6c0 = load i32, i32* @esp, align 4
  %v1_1000b6c0 = add i32 %v0_1000b6c0, -4
  %v2_1000b6c0 = inttoptr i32 %v1_1000b6c0 to i32*
  store i32 ptrtoint ([26 x i8]* @global_var_10023da8.440 to i32), i32* %v2_1000b6c0, align 4
  store i32 ptrtoint (i32* @global_var_10028448.416 to i32), i32* @ecx, align 4
  %v1_1000b6ca = call i32 @function_1000a060(i8 ptrtoint (i32* @5 to i8))
  br label %dec_label_pc_1000b6cf

dec_label_pc_1000b6cf:                            ; preds = %dec_label_pc_1000b6c0, %dec_label_pc_1000b6ae
  %storemerge4 = phi i32 [ %v1_1000b6ca, %dec_label_pc_1000b6c0 ], [ %v3_1000b6b9, %dec_label_pc_1000b6ae ]
  store i32 %storemerge4, i32* %eax.global-to-local, align 4
  %v10_1000b6cf = icmp eq i8 %stack_var_-8.0, 0
  %v1_1000b6d3 = icmp eq i1 %v10_1000b6cf, false
  br i1 %v1_1000b6d3, label %dec_label_pc_1000b70e, label %dec_label_pc_1000b6d5

dec_label_pc_1000b6d5:                            ; preds = %dec_label_pc_1000b6cf
  store i32 %stack_var_-12.0, i32* %eax.global-to-local, align 4
  %v1_1000b6d8 = icmp eq i32 %stack_var_-12.0, 0
  br i1 %v1_1000b6d8, label %dec_label_pc_1000b6e3, label %dec_label_pc_1000b6dc

dec_label_pc_1000b6dc:                            ; preds = %dec_label_pc_1000b6d5
  %v1_1000b6dc = add i32 %stack_var_-12.0, 20
  %v2_1000b6dc = inttoptr i32 %v1_1000b6dc to i32*
  store i32 0, i32* %v2_1000b6dc, align 4
  br label %dec_label_pc_1000b6e3

dec_label_pc_1000b6e3:                            ; preds = %dec_label_pc_1000b6dc, %dec_label_pc_1000b6d5
  %v0_1000b6e3 = load i32, i32* @esi, align 4
  %v1_1000b6e3 = add i32 %v0_1000b6e3, 24
  %v2_1000b6e3 = inttoptr i32 %v1_1000b6e3 to i32*
  %v3_1000b6e3 = load i32, i32* %v2_1000b6e3, align 4
  store i32 %v3_1000b6e3, i32* @edi, align 4
  %v1_1000b6e6 = icmp eq i32 %v3_1000b6e3, 0
  br i1 %v1_1000b6e6, label %dec_label_pc_1000b701, label %dec_label_pc_1000b6ea

dec_label_pc_1000b6ea:                            ; preds = %dec_label_pc_1000b6e3
  store i32 %v3_1000b6e3, i32* @ecx, align 4
  %v0_1000b6ec = call i32 @function_1000a140()
  store i32 %v0_1000b6ec, i32* %eax.global-to-local, align 4
  %v0_1000b6f1 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b6f1, i32* %eax.global-to-local, align 4
  %v1_1000b6f7 = inttoptr i32 %v0_1000b6f1 to i32*
  %v2_1000b6f7 = load i32, i32* %v1_1000b6f7, align 4
  store i32 %v2_1000b6f7, i32* %edx.global-to-local, align 4
  store i32 %v0_1000b6f1, i32* @ecx, align 4
  %v1_1000b6fb = add i32 %v2_1000b6f7, 8
  %v2_1000b6fb = inttoptr i32 %v1_1000b6fb to i32*
  %v3_1000b6fb = load i32, i32* %v2_1000b6fb, align 4
  store i32 %v3_1000b6fb, i32* %eax.global-to-local, align 4
  %v1_1000b6fe = load i32, i32* @esp, align 4
  %v2_1000b6fe = add i32 %v1_1000b6fe, -4
  %v3_1000b6fe = inttoptr i32 %v2_1000b6fe to i32*
  store i32 %v3_1000b6e3, i32* %v3_1000b6fe, align 4
  %v0_1000b701.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000b701

dec_label_pc_1000b701:                            ; preds = %dec_label_pc_1000b6ea, %dec_label_pc_1000b6e3
  %v0_1000b701 = phi i32 [ %v0_1000b701.pre, %dec_label_pc_1000b6ea ], [ %v0_1000b6e3, %dec_label_pc_1000b6e3 ]
  %v1_1000b701 = add i32 %v0_1000b701, 24
  %v2_1000b701 = inttoptr i32 %v1_1000b701 to i32*
  store i32 0, i32* %v2_1000b701, align 4
  %v0_1000b708 = load i32, i32* @esi, align 4
  %v1_1000b708 = add i32 %v0_1000b708, 16
  %v2_1000b708 = inttoptr i32 %v1_1000b708 to i8*
  store i8 0, i8* %v2_1000b708, align 1
  br label %dec_label_pc_1000b713

dec_label_pc_1000b70e:                            ; preds = %dec_label_pc_1000b6cf
  %v0_1000b70e = load i32, i32* @esi, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000b713

dec_label_pc_1000b713:                            ; preds = %dec_label_pc_1000b70e, %dec_label_pc_1000b701, %dec_label_pc_1000b5bf, %dec_label_pc_1000b59e, %dec_label_pc_1000b55c, %dec_label_pc_1000b53b
  %stack_var_-12.1 = phi i32 [ %v0_1000b70e, %dec_label_pc_1000b70e ], [ %stack_var_-12.0, %dec_label_pc_1000b701 ], [ %stack_var_-12.0, %dec_label_pc_1000b5bf ], [ %stack_var_-12.0, %dec_label_pc_1000b59e ], [ %stack_var_-12.0, %dec_label_pc_1000b55c ], [ %stack_var_-12.0, %dec_label_pc_1000b53b ]
  store i32 %tmp45, i32* @ecx, align 4
  %v3_1000b716 = load i8, i8* %v2_1000b4ea, align 1
  %v10_1000b716 = icmp eq i8 %v3_1000b716, 0
  br i1 %v10_1000b716, label %dec_label_pc_1000b4d0, label %dec_label_pc_1000b720

dec_label_pc_1000b720:                            ; preds = %dec_label_pc_1000b713, %dec_label_pc_1000b504, %dec_label_pc_1000b4f6, %dec_label_pc_1000b4d0
  store i32 %v0_1000b49e, i32* @ebx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_1000b725 = icmp slt i32 %v0_1000b49e, 0
  %tmp90 = icmp slt i32 %v0_1000b49e, 1
  br i1 %tmp90, label %dec_label_pc_1000b759, label %dec_label_pc_1000b730

dec_label_pc_1000b730:                            ; preds = %dec_label_pc_1000b720, %dec_label_pc_1000b74f
  %v0_1000b74f = phi i32 [ %v0_1000b753, %dec_label_pc_1000b74f ], [ 0, %dec_label_pc_1000b720 ]
  %v3_1000b730 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_1000b730, i32* @esi, align 4
  %v2_1000b733 = mul i32 %v0_1000b74f, 4
  %v3_1000b733 = add i32 %v2_1000b733, %v3_1000b730
  %v4_1000b733 = inttoptr i32 %v3_1000b733 to i32*
  %v5_1000b733 = load i32, i32* %v4_1000b733, align 4
  store i32 %v5_1000b733, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000b740

dec_label_pc_1000b740:                            ; preds = %dec_label_pc_1000b744, %dec_label_pc_1000b730
  %v1_1000b750 = phi i32 [ %v0_1000b458, %dec_label_pc_1000b730 ], [ %v3_1000b744, %dec_label_pc_1000b744 ]
  store i32 %v1_1000b750, i32* %eax.global-to-local, align 4
  %v1_1000b740 = icmp eq i32 %v1_1000b750, 0
  %.pre = add i32 %v1_1000b750, 20
  %.pre28 = inttoptr i32 %.pre to i32*
  br i1 %v1_1000b740, label %dec_label_pc_1000b74f, label %dec_label_pc_1000b744

dec_label_pc_1000b744:                            ; preds = %dec_label_pc_1000b740
  %v3_1000b744 = load i32, i32* %.pre28, align 4
  store i32 %v3_1000b744, i32* @ecx, align 4
  %v1_1000b747 = icmp eq i32 %v3_1000b744, 0
  br i1 %v1_1000b747, label %dec_label_pc_1000b74f, label %dec_label_pc_1000b740

dec_label_pc_1000b74f:                            ; preds = %dec_label_pc_1000b740, %dec_label_pc_1000b744
  %v1_1000b74f = add i32 %v0_1000b74f, 1
  store i32 %v1_1000b74f, i32* %edx.global-to-local, align 4
  store i32 %v5_1000b733, i32* %.pre28, align 4
  %v0_1000b753 = load i32, i32* %edx.global-to-local, align 4
  %v5_1000b755 = icmp slt i32 %v0_1000b753, %v0_1000b49e
  br i1 %v5_1000b755, label %dec_label_pc_1000b730, label %dec_label_pc_1000b75c.loopexit

dec_label_pc_1000b759:                            ; preds = %dec_label_pc_1000b720
  %v3_1000b759 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_1000b759, i32* @esi, align 4
  br label %dec_label_pc_1000b75c

dec_label_pc_1000b75c.loopexit:                   ; preds = %dec_label_pc_1000b74f
  br label %dec_label_pc_1000b75c

dec_label_pc_1000b75c:                            ; preds = %dec_label_pc_1000b75c.loopexit, %dec_label_pc_1000b759
  %v1_1000b75c = add i32 %v0_1000b49e, -1
  store i32 %v1_1000b75c, i32* @edi, align 4
  %v2_1000b75f = icmp slt i32 %v1_1000b75c, 0
  %tmp91 = icmp slt i32 %v1_1000b75c, 1
  br i1 %tmp91, label %dec_label_pc_1000b789, label %dec_label_pc_1000b763.preheader

dec_label_pc_1000b763.preheader:                  ; preds = %dec_label_pc_1000b75c
  %v0_1000b763.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000b763

dec_label_pc_1000b763:                            ; preds = %dec_label_pc_1000b763.preheader, %dec_label_pc_1000b781
  %v1_1000b763 = phi i32 [ %v1_1000b75c, %dec_label_pc_1000b763.preheader ], [ %v1_1000b784, %dec_label_pc_1000b781 ]
  %v0_1000b763 = phi i32 [ %v0_1000b763.pre, %dec_label_pc_1000b763.preheader ], [ %v3_1000b781, %dec_label_pc_1000b781 ]
  %v2_1000b763 = mul i32 %v1_1000b763, 4
  %v3_1000b763 = add i32 %v2_1000b763, %v0_1000b763
  %v4_1000b763 = inttoptr i32 %v3_1000b763 to i32*
  %v5_1000b763 = load i32, i32* %v4_1000b763, align 4
  store i32 %v5_1000b763, i32* %esi.global-to-local, align 4
  %v1_1000b766 = icmp eq i32 %v5_1000b763, 0
  br i1 %v1_1000b766, label %dec_label_pc_1000b781, label %dec_label_pc_1000b76a

dec_label_pc_1000b76a:                            ; preds = %dec_label_pc_1000b763
  store i32 %v5_1000b763, i32* @ecx, align 4
  %v0_1000b76c = call i32 @function_1000a140()
  store i32 %v0_1000b76c, i32* %eax.global-to-local, align 4
  %v0_1000b771 = call i32 @KeyValuesSystem()
  store i32 %v0_1000b771, i32* %eax.global-to-local, align 4
  %v1_1000b777 = inttoptr i32 %v0_1000b771 to i32*
  %v2_1000b777 = load i32, i32* %v1_1000b777, align 4
  store i32 %v2_1000b777, i32* %edx.global-to-local, align 4
  store i32 %v0_1000b771, i32* @ecx, align 4
  %v1_1000b77b = add i32 %v2_1000b777, 8
  %v2_1000b77b = inttoptr i32 %v1_1000b77b to i32*
  %v3_1000b77b = load i32, i32* %v2_1000b77b, align 4
  store i32 %v3_1000b77b, i32* %eax.global-to-local, align 4
  %v1_1000b77e = load i32, i32* @esp, align 4
  %v2_1000b77e = add i32 %v1_1000b77e, -4
  %v3_1000b77e = inttoptr i32 %v2_1000b77e to i32*
  store i32 %v5_1000b763, i32* %v3_1000b77e, align 4
  %v0_1000b784.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000b781

dec_label_pc_1000b781:                            ; preds = %dec_label_pc_1000b76a, %dec_label_pc_1000b763
  %v0_1000b784 = phi i32 [ %v0_1000b784.pre, %dec_label_pc_1000b76a ], [ %v1_1000b763, %dec_label_pc_1000b763 ]
  %v3_1000b781 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_1000b781, i32* @esi, align 4
  %v1_1000b784 = add i32 %v0_1000b784, -1
  %v9_1000b784 = icmp eq i32 %v1_1000b784, 0
  %v10_1000b784 = icmp slt i32 %v1_1000b784, 0
  store i32 %v1_1000b784, i32* @edi, align 4
  %v3_1000b787 = icmp eq i1 %v10_1000b784, false
  %v4_1000b787 = icmp eq i1 %v9_1000b784, false
  %v5_1000b787 = icmp eq i1 %v3_1000b787, %v4_1000b787
  br i1 %v5_1000b787, label %dec_label_pc_1000b763, label %dec_label_pc_1000b789

dec_label_pc_1000b789:                            ; preds = %dec_label_pc_1000b781, %dec_label_pc_1000b75c
  %v1_1000b78c = load i32, i32* @esp, align 4
  %v2_1000b78c = add i32 %v1_1000b78c, -4
  %v3_1000b78c = inttoptr i32 %v2_1000b78c to i32*
  store i32 %v16_1000b453, i32* %v3_1000b78c, align 4
  store i32 %v0_1000b458, i32* @ecx, align 4
  %v1_1000b790 = call i32 @function_1000ac10(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000b790, i32* %eax.global-to-local, align 4
  store i32 %v1_1000b75c, i32* @edi, align 4
  %v3_1000b799 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_1000b799, i32* @ebx, align 4
  br i1 %v2_1000b75f, label %dec_label_pc_1000b7c4, label %dec_label_pc_1000b7a0

dec_label_pc_1000b7a0:                            ; preds = %dec_label_pc_1000b789, %dec_label_pc_1000b7be.dec_label_pc_1000b7a0_crit_edge
  %v1_1000b7a0 = phi i32 [ %v1_1000b7be, %dec_label_pc_1000b7be.dec_label_pc_1000b7a0_crit_edge ], [ %v1_1000b75c, %dec_label_pc_1000b789 ]
  %v0_1000b7a0 = phi i32 [ %v0_1000b7a0.pre, %dec_label_pc_1000b7be.dec_label_pc_1000b7a0_crit_edge ], [ %v3_1000b799, %dec_label_pc_1000b789 ]
  %v2_1000b7a0 = mul i32 %v1_1000b7a0, 4
  %v3_1000b7a0 = add i32 %v2_1000b7a0, %v0_1000b7a0
  %v4_1000b7a0 = inttoptr i32 %v3_1000b7a0 to i32*
  %v5_1000b7a0 = load i32, i32* %v4_1000b7a0, align 4
  store i32 %v5_1000b7a0, i32* %esi.global-to-local, align 4
  %v1_1000b7a3 = icmp eq i32 %v5_1000b7a0, 0
  br i1 %v1_1000b7a3, label %dec_label_pc_1000b7be, label %dec_label_pc_1000b7a7

dec_label_pc_1000b7a7:                            ; preds = %dec_label_pc_1000b7a0
  store i32 %v5_1000b7a0, i32* @ecx, align 4
  %v0_1000b7a9 = call i32 @function_1000a140()
  store i32 %v0_1000b7a9, i32* %eax.global-to-local, align 4
  %v0_1000b7ae = call i32 @KeyValuesSystem()
  store i32 %v0_1000b7ae, i32* %eax.global-to-local, align 4
  %v1_1000b7b4 = inttoptr i32 %v0_1000b7ae to i32*
  %v2_1000b7b4 = load i32, i32* %v1_1000b7b4, align 4
  store i32 %v2_1000b7b4, i32* %edx.global-to-local, align 4
  store i32 %v0_1000b7ae, i32* @ecx, align 4
  %v1_1000b7b8 = add i32 %v2_1000b7b4, 8
  %v2_1000b7b8 = inttoptr i32 %v1_1000b7b8 to i32*
  %v3_1000b7b8 = load i32, i32* %v2_1000b7b8, align 4
  store i32 %v3_1000b7b8, i32* %eax.global-to-local, align 4
  %v1_1000b7bb = load i32, i32* @esp, align 4
  %v2_1000b7bb = add i32 %v1_1000b7bb, -4
  %v3_1000b7bb = inttoptr i32 %v2_1000b7bb to i32*
  store i32 %v5_1000b7a0, i32* %v3_1000b7bb, align 4
  %v0_1000b7be.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000b7be

dec_label_pc_1000b7be:                            ; preds = %dec_label_pc_1000b7a7, %dec_label_pc_1000b7a0
  %v0_1000b7be = phi i32 [ %v0_1000b7be.pre, %dec_label_pc_1000b7a7 ], [ %v1_1000b7a0, %dec_label_pc_1000b7a0 ]
  %v1_1000b7be = add i32 %v0_1000b7be, -1
  %v10_1000b7be = icmp slt i32 %v1_1000b7be, 0
  store i32 %v1_1000b7be, i32* @edi, align 4
  %v1_1000b7bf = icmp eq i1 %v10_1000b7be, false
  br i1 %v1_1000b7bf, label %dec_label_pc_1000b7be.dec_label_pc_1000b7a0_crit_edge, label %dec_label_pc_1000b7c1

dec_label_pc_1000b7be.dec_label_pc_1000b7a0_crit_edge: ; preds = %dec_label_pc_1000b7be
  %v0_1000b7a0.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000b7a0

dec_label_pc_1000b7c1:                            ; preds = %dec_label_pc_1000b7be
  %v3_1000b7c1 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_1000b7c1, i32* @esi, align 4
  br label %dec_label_pc_1000b7c4

dec_label_pc_1000b7c4:                            ; preds = %dec_label_pc_1000b7c1, %dec_label_pc_1000b789
  store i32 %v0_1000b49e, i32* %edi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* bitcast ([5 x i8]** @global_var_10028548.435 to i32*), align 4
  store i32 0, i32* @global_var_10028550.423, align 4
  br i1 %v2_1000b725, label %dec_label_pc_1000b7fd, label %dec_label_pc_1000b7df

dec_label_pc_1000b7df:                            ; preds = %dec_label_pc_1000b7c4
  %v0_1000b7df = load i32, i32* @ebx, align 4
  %v12_1000b7df = icmp eq i32 %v0_1000b7df, 0
  br i1 %v12_1000b7df, label %dec_label_pc_1000b7f8, label %dec_label_pc_1000b7e3

dec_label_pc_1000b7e3:                            ; preds = %dec_label_pc_1000b7df
  %v0_1000b7e3 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000b7e3, i32* @ecx, align 4
  %v1_1000b7e9 = inttoptr i32 %v0_1000b7e3 to i32*
  %v2_1000b7e9 = load i32, i32* %v1_1000b7e9, align 4
  store i32 %v2_1000b7e9, i32* @ecx, align 4
  %v1_1000b7eb = inttoptr i32 %v2_1000b7e9 to i32*
  %v2_1000b7eb = load i32, i32* %v1_1000b7eb, align 4
  store i32 %v2_1000b7eb, i32* %edx.global-to-local, align 4
  %v1_1000b7ed = add i32 %v2_1000b7eb, 20
  %v2_1000b7ed = inttoptr i32 %v1_1000b7ed to i32*
  %v3_1000b7ed = load i32, i32* %v2_1000b7ed, align 4
  store i32 %v3_1000b7ed, i32* %eax.global-to-local, align 4
  %v1_1000b7f0 = load i32, i32* @esp, align 4
  %v2_1000b7f0 = add i32 %v1_1000b7f0, -4
  %v3_1000b7f0 = inttoptr i32 %v2_1000b7f0 to i32*
  store i32 %v0_1000b7df, i32* %v3_1000b7f0, align 4
  store i32 0, i32* @ebx, align 4
  store i32 0, i32* %stack_var_-60, align 4
  %v0_1000b800.pre.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000b7f8

dec_label_pc_1000b7f8:                            ; preds = %dec_label_pc_1000b7e3, %dec_label_pc_1000b7df
  %v0_1000b800.pre = phi i32 [ %v0_1000b800.pre.pre, %dec_label_pc_1000b7e3 ], [ %v0_1000b49e, %dec_label_pc_1000b7df ]
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b7fd

dec_label_pc_1000b7fd:                            ; preds = %dec_label_pc_1000b7f8, %dec_label_pc_1000b7c4
  %v0_1000b800 = phi i32 [ %v0_1000b800.pre, %dec_label_pc_1000b7f8 ], [ %v0_1000b49e, %dec_label_pc_1000b7c4 ]
  %v13_1000b800 = icmp slt i32 %v0_1000b800, 0
  br i1 %v13_1000b800, label %dec_label_pc_1000b824, label %dec_label_pc_1000b804

dec_label_pc_1000b804:                            ; preds = %dec_label_pc_1000b7fd
  %v0_1000b804 = load i32, i32* @ebx, align 4
  %v12_1000b804 = icmp eq i32 %v0_1000b804, 0
  br i1 %v12_1000b804, label %dec_label_pc_1000b81f, label %dec_label_pc_1000b808

dec_label_pc_1000b808:                            ; preds = %dec_label_pc_1000b804
  %v0_1000b808 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000b808, i32* @ecx, align 4
  %v1_1000b80e = inttoptr i32 %v0_1000b808 to i32*
  %v2_1000b80e = load i32, i32* %v1_1000b80e, align 4
  store i32 %v2_1000b80e, i32* @ecx, align 4
  %v1_1000b810 = inttoptr i32 %v2_1000b80e to i32*
  %v2_1000b810 = load i32, i32* %v1_1000b810, align 4
  store i32 %v2_1000b810, i32* %edx.global-to-local, align 4
  %v1_1000b812 = add i32 %v2_1000b810, 20
  %v2_1000b812 = inttoptr i32 %v1_1000b812 to i32*
  %v3_1000b812 = load i32, i32* %v2_1000b812, align 4
  store i32 %v3_1000b812, i32* %eax.global-to-local, align 4
  %v1_1000b815 = load i32, i32* @esp, align 4
  %v2_1000b815 = add i32 %v1_1000b815, -4
  %v3_1000b815 = inttoptr i32 %v2_1000b815 to i32*
  store i32 %v0_1000b804, i32* %v3_1000b815, align 4
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_1000b81f

dec_label_pc_1000b81f:                            ; preds = %dec_label_pc_1000b808, %dec_label_pc_1000b804
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b824

dec_label_pc_1000b824:                            ; preds = %dec_label_pc_1000b81f, %dec_label_pc_1000b7fd
  store i32 %v0_1000b49e, i32* %edi.global-to-local, align 4
  br i1 %v2_1000b725, label %dec_label_pc_1000b851, label %dec_label_pc_1000b82e

dec_label_pc_1000b82e:                            ; preds = %dec_label_pc_1000b824
  %v0_1000b82e = load i32, i32* @esi, align 4
  %v12_1000b82e = icmp eq i32 %v0_1000b82e, 0
  br i1 %v12_1000b82e, label %dec_label_pc_1000b84c, label %dec_label_pc_1000b832

dec_label_pc_1000b832:                            ; preds = %dec_label_pc_1000b82e
  %v0_1000b832 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000b832, i32* @ecx, align 4
  %v1_1000b838 = inttoptr i32 %v0_1000b832 to i32*
  %v2_1000b838 = load i32, i32* %v1_1000b838, align 4
  store i32 %v2_1000b838, i32* @ecx, align 4
  %v1_1000b83a = inttoptr i32 %v2_1000b838 to i32*
  %v2_1000b83a = load i32, i32* %v1_1000b83a, align 4
  store i32 %v2_1000b83a, i32* %edx.global-to-local, align 4
  %v1_1000b83c = add i32 %v2_1000b83a, 20
  %v2_1000b83c = inttoptr i32 %v1_1000b83c to i32*
  %v3_1000b83c = load i32, i32* %v2_1000b83c, align 4
  store i32 %v3_1000b83c, i32* %eax.global-to-local, align 4
  %v1_1000b83f = load i32, i32* @esp, align 4
  %v2_1000b83f = add i32 %v1_1000b83f, -4
  %v3_1000b83f = inttoptr i32 %v2_1000b83f to i32*
  store i32 %v0_1000b82e, i32* %v3_1000b83f, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @esi, align 4
  %v0_1000b854.pre.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000b84c

dec_label_pc_1000b84c:                            ; preds = %dec_label_pc_1000b832, %dec_label_pc_1000b82e
  %v0_1000b854.pre = phi i32 [ %v0_1000b854.pre.pre, %dec_label_pc_1000b832 ], [ %v0_1000b49e, %dec_label_pc_1000b82e ]
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b851

dec_label_pc_1000b851:                            ; preds = %dec_label_pc_1000b84c, %dec_label_pc_1000b824
  %v0_1000b854 = phi i32 [ %v0_1000b854.pre, %dec_label_pc_1000b84c ], [ %v0_1000b49e, %dec_label_pc_1000b824 ]
  %v13_1000b854 = icmp slt i32 %v0_1000b854, 0
  br i1 %v13_1000b854, label %dec_label_pc_1000b87a, label %dec_label_pc_1000b858

dec_label_pc_1000b858:                            ; preds = %dec_label_pc_1000b851
  %v0_1000b858 = load i32, i32* @esi, align 4
  %v12_1000b858 = icmp eq i32 %v0_1000b858, 0
  br i1 %v12_1000b858, label %dec_label_pc_1000b87a, label %dec_label_pc_1000b85c

dec_label_pc_1000b85c:                            ; preds = %dec_label_pc_1000b858
  %v0_1000b85c = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000b85c, i32* @ecx, align 4
  %v1_1000b862 = inttoptr i32 %v0_1000b85c to i32*
  %v2_1000b862 = load i32, i32* %v1_1000b862, align 4
  store i32 %v2_1000b862, i32* @ecx, align 4
  %v1_1000b864 = inttoptr i32 %v2_1000b862 to i32*
  %v2_1000b864 = load i32, i32* %v1_1000b864, align 4
  store i32 %v2_1000b864, i32* %edx.global-to-local, align 4
  %v1_1000b866 = add i32 %v2_1000b864, 20
  %v2_1000b866 = inttoptr i32 %v1_1000b866 to i32*
  %v3_1000b866 = load i32, i32* %v2_1000b866, align 4
  store i32 %v3_1000b866, i32* %eax.global-to-local, align 4
  %v1_1000b869 = load i32, i32* @esp, align 4
  %v2_1000b869 = add i32 %v1_1000b869, -4
  %v3_1000b869 = inttoptr i32 %v2_1000b869 to i32*
  store i32 %v0_1000b858, i32* %v3_1000b869, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_1000b87a

dec_label_pc_1000b87a:                            ; preds = %dec_label_pc_1000b858, %dec_label_pc_1000b85c, %dec_label_pc_1000b851
  %v0_1000b87a = load i32, i32* @global_var_1002be3c.433, align 4
  %v1_1000b87a = add i32 %v0_1000b87a, -1
  %v9_1000b87a = icmp eq i32 %v1_1000b87a, 0
  store i32 %v1_1000b87a, i32* @global_var_1002be3c.433, align 4
  store i32 %v1_1000b87a, i32* @ecx, align 4
  %v0_1000b886 = load i32, i32* @esp, align 4
  %v1_1000b886 = inttoptr i32 %v0_1000b886 to i32*
  %v2_1000b886 = load i32, i32* %v1_1000b886, align 4
  store i32 %v2_1000b886, i32* @edi, align 4
  %v3_1000b886 = add i32 %v0_1000b886, 4
  %v1_1000b887 = inttoptr i32 %v3_1000b886 to i32*
  %v2_1000b887 = load i32, i32* %v1_1000b887, align 4
  store i32 %v2_1000b887, i32* @esi, align 4
  %v3_1000b887 = add i32 %v0_1000b886, 8
  %v1_1000b888 = inttoptr i32 %v3_1000b887 to i32*
  %v2_1000b888 = load i32, i32* %v1_1000b888, align 4
  store i32 %v2_1000b888, i32* @ebx, align 4
  %v1_1000b889 = icmp eq i1 %v9_1000b87a, false
  br i1 %v1_1000b889, label %dec_label_pc_1000b87a.dec_label_pc_1000b894_crit_edge, label %dec_label_pc_1000b88b

dec_label_pc_1000b87a.dec_label_pc_1000b894_crit_edge: ; preds = %dec_label_pc_1000b87a
  %v0_1000b894.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000b894

dec_label_pc_1000b88b:                            ; preds = %dec_label_pc_1000b87a
  store i32 ptrtoint (i32* @global_var_1002be38.432 to i32), i32* %eax.global-to-local, align 4
  %v2_1000b892 = load i32, i32* @global_var_1002be38.432, align 4
  store i32 0, i32* @global_var_1002be38.432, align 4
  store i32 %v2_1000b892, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000b894

dec_label_pc_1000b894:                            ; preds = %dec_label_pc_1000b87a.dec_label_pc_1000b894_crit_edge, %dec_label_pc_1000b88b
  %v0_1000b894 = phi i32 [ %v0_1000b894.pre, %dec_label_pc_1000b87a.dec_label_pc_1000b894_crit_edge ], [ ptrtoint (i32* @global_var_1002be38.432 to i32), %dec_label_pc_1000b88b ]
  %v1_1000b894 = and i32 %v0_1000b894, -256
  %v2_1000b894 = or i32 %v1_1000b894, 1
  store i32 %v2_1000b894, i32* %eax.global-to-local, align 4
  %v2_1000b898 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000b898, i32* @ebp, align 4
  ret i32 %v2_1000b894
}

define i32 @function_1000b8a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1000b8a0:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-56 = alloca i32, align 4
  %v0_1000b8a0 = load i32, i32* @ebp, align 4
  %v16_1000b8a3 = ptrtoint i32* %stack_var_-56 to i32
  %v0_1000b8a6 = load i32, i32* @edi, align 4
  store i32 %arg2, i32* @edi, align 4
  %v0_1000b8aa = load i32, i32* @ecx, align 4
  %v1_1000b8ad = icmp eq i32 %arg2, 0
  %v1_1000b8af = icmp eq i1 %v1_1000b8ad, false
  br i1 %v1_1000b8af, label %dec_label_pc_1000b8ba, label %dec_label_pc_1000b8b1

dec_label_pc_1000b8b1:                            ; preds = %dec_label_pc_1000b8a0
  %v0_1000b8b1 = load i32, i32* @eax, align 4
  %v1_1000b8b1 = and i32 %v0_1000b8b1, -256
  %v2_1000b8b1 = or i32 %v1_1000b8b1, 1
  store i32 %v0_1000b8a6, i32* @edi, align 4
  store i32 %v0_1000b8a0, i32* @ebp, align 4
  ret i32 %v2_1000b8b1

dec_label_pc_1000b8ba:                            ; preds = %dec_label_pc_1000b8a0
  %v1_1000b8bd = call i32 @function_10009450(i32 %arg2)
  store i32 %v1_1000b8bd, i32* @esi, align 4
  store i32 %v16_1000b8a3, i32* @ecx, align 4
  %v3_1000b8ce = call i32 @function_1000c880(i32 %arg2, i32 %v1_1000b8bd, i32 9)
  %v0_1000b8d3 = load i32, i32* @esi, align 4
  %v7_1000b8d6 = icmp sgt i32 %v0_1000b8d3, 2
  br i1 %v7_1000b8d6, label %dec_label_pc_1000b8d8, label %dec_label_pc_1000b914

dec_label_pc_1000b8d8:                            ; preds = %dec_label_pc_1000b8ba
  %v1_1000b8d8 = inttoptr i32 %arg2 to i8*
  %v2_1000b8d8 = load i8, i8* %v1_1000b8d8, align 1
  %v12_1000b8d8 = icmp eq i8 %v2_1000b8d8, -1
  %v1_1000b8db = icmp eq i1 %v12_1000b8d8, false
  br i1 %v1_1000b8db, label %dec_label_pc_1000b914, label %dec_label_pc_1000b8dd

dec_label_pc_1000b8dd:                            ; preds = %dec_label_pc_1000b8d8
  %v1_1000b8dd = add i32 %arg2, 1
  %v2_1000b8dd = inttoptr i32 %v1_1000b8dd to i8*
  %v3_1000b8dd = load i8, i8* %v2_1000b8dd, align 1
  %v13_1000b8dd = icmp eq i8 %v3_1000b8dd, -2
  %v1_1000b8e1 = icmp eq i1 %v13_1000b8dd, false
  br i1 %v1_1000b8e1, label %dec_label_pc_1000b914, label %dec_label_pc_1000b8e3

dec_label_pc_1000b8e3:                            ; preds = %dec_label_pc_1000b8dd
  %v1_1000b8e5 = add i32 %arg2, 2
  store i32 %v1_1000b8e5, i32* @edi, align 4
  %v4_1000b8eb = call i32 @V_UnicodeToUTF8(i32 %v1_1000b8e5, i32* null, i32 0)
  store i32 %v4_1000b8eb, i32* %esi.global-to-local, align 4
  %v1_1000b8f4 = call i32 @__malloc_crt(i32 %v4_1000b8eb)
  store i32 %v1_1000b8f4, i32* %ebx.global-to-local, align 4
  %v0_1000b8fd = load i32, i32* @edi, align 4
  %v2_1000b8fe = inttoptr i32 %v1_1000b8f4 to i32*
  %v4_1000b8fe = call i32 @V_UnicodeToUTF8(i32 %v0_1000b8fd, i32* %v2_1000b8fe, i32 %v4_1000b8eb)
  store i32 %v4_1000b8fe, i32* @eax, align 4
  %v0_1000b909 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v16_1000b8a3, i32* @ecx, align 4
  %v4_1000b90f = call i32 @function_1000c990(i32 %v1_1000b8f4, i32 %v0_1000b909, i32 %v0_1000b909, i32 9)
  br label %dec_label_pc_1000b914

dec_label_pc_1000b914:                            ; preds = %dec_label_pc_1000b8ba, %dec_label_pc_1000b8e3, %dec_label_pc_1000b8dd, %dec_label_pc_1000b8d8
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_1000b91d = load i32, i32* @esp, align 4
  %v2_1000b91d = add i32 %v1_1000b91d, -4
  %v3_1000b91d = inttoptr i32 %v2_1000b91d to i32*
  store i32 %arg5, i32* %v3_1000b91d, align 4
  %v0_1000b91e = load i32, i32* @ecx, align 4
  %v2_1000b91e = add i32 %v1_1000b91d, -8
  %v3_1000b91e = inttoptr i32 %v2_1000b91e to i32*
  store i32 %v0_1000b91e, i32* %v3_1000b91e, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v0_1000b922 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000b922 = add i32 %v1_1000b91d, -12
  %v3_1000b922 = inttoptr i32 %v2_1000b922 to i32*
  store i32 %v0_1000b922, i32* %v3_1000b922, align 4
  %v2_1000b926 = add i32 %v1_1000b91d, -16
  %v3_1000b926 = inttoptr i32 %v2_1000b926 to i32*
  store i32 %v16_1000b8a3, i32* %v3_1000b926, align 4
  %v0_1000b927 = load i32, i32* @ecx, align 4
  %v2_1000b927 = add i32 %v1_1000b91d, -20
  %v3_1000b927 = inttoptr i32 %v2_1000b927 to i32*
  store i32 %v0_1000b927, i32* %v3_1000b927, align 4
  store i32 %v0_1000b8aa, i32* @ecx, align 4
  %v4_1000b92b = call i32 @function_1000b450(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v11_1000b930 = icmp slt i32 %tmp3, 0
  %v1_1000b934 = and i32 %v4_1000b92b, 255
  %v2_1000b934 = load i32, i32* @ebx, align 4
  %v3_1000b934 = and i32 %v2_1000b934, -256
  %v4_1000b934 = or i32 %v3_1000b934, %v1_1000b934
  store i32 %v4_1000b934, i32* %ebx.global-to-local, align 4
  %v2_1000b936 = icmp eq i1 %v11_1000b930, false
  br i1 %v2_1000b936, label %dec_label_pc_1000b938, label %dec_label_pc_1000b94f

dec_label_pc_1000b938:                            ; preds = %dec_label_pc_1000b914
  %v3_1000b938 = load i32, i32* %stack_var_-56, align 4
  %v1_1000b93b = icmp eq i32 %v3_1000b938, 0
  br i1 %v1_1000b93b, label %dec_label_pc_1000b94f, label %dec_label_pc_1000b93f

dec_label_pc_1000b93f:                            ; preds = %dec_label_pc_1000b938
  %v0_1000b93f = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000b93f, i32* %edx.global-to-local, align 4
  %v1_1000b945 = inttoptr i32 %v0_1000b93f to i32*
  %v2_1000b945 = load i32, i32* %v1_1000b945, align 4
  store i32 %v2_1000b945, i32* @ecx, align 4
  %v1_1000b947 = inttoptr i32 %v2_1000b945 to i32*
  %v2_1000b947 = load i32, i32* %v1_1000b947, align 4
  store i32 %v2_1000b947, i32* %edx.global-to-local, align 4
  %v1_1000b949 = load i32, i32* @esp, align 4
  %v2_1000b949 = add i32 %v1_1000b949, -4
  %v3_1000b949 = inttoptr i32 %v2_1000b949 to i32*
  store i32 %v3_1000b938, i32* %v3_1000b949, align 4
  %v0_1000b94a = load i32, i32* %edx.global-to-local, align 4
  %v1_1000b94a = add i32 %v0_1000b94a, 20
  %v2_1000b94a = inttoptr i32 %v1_1000b94a to i32*
  %v3_1000b94a = load i32, i32* %v2_1000b94a, align 4
  %v0_1000b950.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000b94f

dec_label_pc_1000b94f:                            ; preds = %dec_label_pc_1000b914, %dec_label_pc_1000b93f, %dec_label_pc_1000b938
  %v2_1000b950 = phi i32 [ %v4_1000b92b, %dec_label_pc_1000b914 ], [ %v3_1000b94a, %dec_label_pc_1000b93f ], [ 0, %dec_label_pc_1000b938 ]
  %v0_1000b950 = phi i32 [ %v4_1000b934, %dec_label_pc_1000b914 ], [ %v0_1000b950.pre, %dec_label_pc_1000b93f ], [ %v4_1000b934, %dec_label_pc_1000b938 ]
  %v0_1000b94f = load i32, i32* @esp, align 4
  %v1_1000b94f = inttoptr i32 %v0_1000b94f to i32*
  %v2_1000b94f = load i32, i32* %v1_1000b94f, align 4
  store i32 %v2_1000b94f, i32* @esi, align 4
  %v3_1000b94f = add i32 %v0_1000b94f, 4
  %v1_1000b950 = and i32 %v0_1000b950, 255
  %v3_1000b950 = and i32 %v2_1000b950, -256
  %v4_1000b950 = or i32 %v1_1000b950, %v3_1000b950
  %v1_1000b952 = inttoptr i32 %v3_1000b94f to i32*
  %v2_1000b952 = load i32, i32* %v1_1000b952, align 4
  store i32 %v2_1000b952, i32* @ebx, align 4
  %v3_1000b952 = add i32 %v0_1000b94f, 8
  %v1_1000b953 = inttoptr i32 %v3_1000b952 to i32*
  %v2_1000b953 = load i32, i32* %v1_1000b953, align 4
  store i32 %v2_1000b953, i32* @edi, align 4
  ret i32 %v4_1000b950
}

define i32 @function_1000b960(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000b960:
  %esi.global-to-local = alloca i32, align 4
  %v0_1000b964 = load i32, i32* @global_var_1002bedc.441, align 4
  store i32 %v0_1000b964, i32* %esi.global-to-local, align 4
  %v1_1000b96b = icmp eq i32 %v0_1000b964, 0
  br i1 %v1_1000b96b, label %dec_label_pc_1000b9a7, label %dec_label_pc_1000b96f

dec_label_pc_1000b96f:                            ; preds = %dec_label_pc_1000b960
  %v4_1000b977.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_1000b972

dec_label_pc_1000b972:                            ; preds = %dec_label_pc_1000b9a0, %dec_label_pc_1000b96f
  %v4_1000b977.pre = phi i32 [ %v4_1000b977.pre20, %dec_label_pc_1000b9a0 ], [ %v4_1000b977.pre.pre, %dec_label_pc_1000b96f ]
  %v0_1000b9a0 = phi i32 [ %v3_1000b9a0, %dec_label_pc_1000b9a0 ], [ %v0_1000b964, %dec_label_pc_1000b96f ]
  %v1_1000b972 = add i32 %v0_1000b9a0, 4
  %v2_1000b972 = inttoptr i32 %v1_1000b972 to i32*
  %v3_1000b972 = load i32, i32* %v2_1000b972, align 4
  store i32 %arg1, i32* @ecx, align 4
  br label %dec_label_pc_1000b977

dec_label_pc_1000b977:                            ; preds = %dec_label_pc_1000b989, %dec_label_pc_1000b972
  %v0_1000b98c = phi i32 [ %v1_1000b98c, %dec_label_pc_1000b989 ], [ %arg1, %dec_label_pc_1000b972 ]
  %v4_1000b977 = phi i32 [ %v7_1000b981, %dec_label_pc_1000b989 ], [ %v4_1000b977.pre, %dec_label_pc_1000b972 ]
  %v0_1000b997 = phi i32 [ %v1_1000b989, %dec_label_pc_1000b989 ], [ %v3_1000b972, %dec_label_pc_1000b972 ]
  %v1_1000b977 = inttoptr i32 %v0_1000b997 to i8*
  %v2_1000b977 = load i8, i8* %v1_1000b977, align 1
  %v3_1000b977 = zext i8 %v2_1000b977 to i32
  %v5_1000b977 = and i32 %v4_1000b977, -256
  %v6_1000b977 = or i32 %v3_1000b977, %v5_1000b977
  %v3_1000b979 = inttoptr i32 %v0_1000b98c to i8*
  %v4_1000b979 = load i8, i8* %v3_1000b979, align 1
  %v10_1000b979 = icmp ult i8 %v2_1000b977, %v4_1000b979
  %v15_1000b979 = icmp eq i8 %v2_1000b977, %v4_1000b979
  %v1_1000b97b = icmp eq i1 %v15_1000b979, false
  br i1 %v1_1000b97b, label %dec_label_pc_1000b997, label %dec_label_pc_1000b97d

dec_label_pc_1000b97d:                            ; preds = %dec_label_pc_1000b977
  %v5_1000b97d = icmp eq i8 %v2_1000b977, 0
  br i1 %v5_1000b97d, label %dec_label_pc_1000b993, label %dec_label_pc_1000b981

dec_label_pc_1000b981:                            ; preds = %dec_label_pc_1000b97d
  %v1_1000b981 = add i32 %v0_1000b997, 1
  %v2_1000b981 = inttoptr i32 %v1_1000b981 to i8*
  %v3_1000b981 = load i8, i8* %v2_1000b981, align 1
  %v4_1000b981 = zext i8 %v3_1000b981 to i32
  %v7_1000b981 = or i32 %v4_1000b981, %v5_1000b977
  %v3_1000b984 = add i32 %v0_1000b98c, 1
  %v4_1000b984 = inttoptr i32 %v3_1000b984 to i8*
  %v5_1000b984 = load i8, i8* %v4_1000b984, align 1
  %v11_1000b984 = icmp ult i8 %v3_1000b981, %v5_1000b984
  %v16_1000b984 = icmp eq i8 %v3_1000b981, %v5_1000b984
  %v1_1000b987 = icmp eq i1 %v16_1000b984, false
  br i1 %v1_1000b987, label %dec_label_pc_1000b997, label %dec_label_pc_1000b989

dec_label_pc_1000b989:                            ; preds = %dec_label_pc_1000b981
  %v1_1000b989 = add i32 %v0_1000b997, 2
  %v1_1000b98c = add i32 %v0_1000b98c, 2
  store i32 %v1_1000b98c, i32* @ecx, align 4
  %v5_1000b98f = icmp eq i8 %v3_1000b981, 0
  %v1_1000b991 = icmp eq i1 %v5_1000b98f, false
  br i1 %v1_1000b991, label %dec_label_pc_1000b977, label %dec_label_pc_1000b993

dec_label_pc_1000b993:                            ; preds = %dec_label_pc_1000b989, %dec_label_pc_1000b97d
  %v4_1000b977.pre21 = phi i32 [ %v7_1000b981, %dec_label_pc_1000b989 ], [ %v6_1000b977, %dec_label_pc_1000b97d ]
  br label %dec_label_pc_1000b99c

dec_label_pc_1000b997:                            ; preds = %dec_label_pc_1000b981, %dec_label_pc_1000b977
  %v4_1000b977.pre22 = phi i32 [ %v7_1000b981, %dec_label_pc_1000b981 ], [ %v6_1000b977, %dec_label_pc_1000b977 ]
  %v2_1000b997 = phi i1 [ %v11_1000b984, %dec_label_pc_1000b981 ], [ %v10_1000b979, %dec_label_pc_1000b977 ]
  %v3_1000b997 = zext i1 %v2_1000b997 to i32
  %v4_1000b997 = add i32 %v3_1000b997, %v0_1000b997
  %v5_1000b997 = sext i1 %v2_1000b997 to i32
  %v15_1000b997 = sub nsw i32 %v5_1000b997, %v3_1000b997
  %v16_1000b997 = icmp ult i32 %v0_1000b997, %v15_1000b997
  %v17_1000b997 = icmp ne i32 %v4_1000b997, -1
  %v18_1000b997 = or i1 %v16_1000b997, %v17_1000b997
  %v19_1000b997 = icmp ult i32 %v0_1000b997, %v4_1000b997
  %v20_1000b997 = select i1 %v2_1000b997, i1 %v18_1000b997, i1 %v19_1000b997
  %not.v1_1000b999 = icmp ne i1 %v20_1000b997, true
  %v3_1000b999 = sext i1 %not.v1_1000b999 to i32
  %v4_1000b999 = sub nsw i32 %v5_1000b997, %v3_1000b999
  br label %dec_label_pc_1000b99c

dec_label_pc_1000b99c:                            ; preds = %dec_label_pc_1000b997, %dec_label_pc_1000b993
  %v4_1000b977.pre20 = phi i32 [ %v4_1000b977.pre21, %dec_label_pc_1000b993 ], [ %v4_1000b977.pre22, %dec_label_pc_1000b997 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_1000b993 ], [ %v4_1000b999, %dec_label_pc_1000b997 ]
  %v1_1000b99c = icmp eq i32 %storemerge, 0
  br i1 %v1_1000b99c, label %dec_label_pc_1000b9ba, label %dec_label_pc_1000b9a0

dec_label_pc_1000b9a0:                            ; preds = %dec_label_pc_1000b99c
  %v1_1000b9a0 = add i32 %v0_1000b9a0, 8
  %v2_1000b9a0 = inttoptr i32 %v1_1000b9a0 to i32*
  %v3_1000b9a0 = load i32, i32* %v2_1000b9a0, align 4
  store i32 %v3_1000b9a0, i32* %esi.global-to-local, align 4
  %v1_1000b9a3 = icmp eq i32 %v3_1000b9a0, 0
  %v1_1000b9a5 = icmp eq i1 %v1_1000b9a3, false
  br i1 %v1_1000b9a5, label %dec_label_pc_1000b972, label %dec_label_pc_1000b9a7

dec_label_pc_1000b9a7:                            ; preds = %dec_label_pc_1000b9a0, %dec_label_pc_1000b960
  %v1_1000b9aa = icmp eq i32 %arg2, 0
  br i1 %v1_1000b9aa, label %dec_label_pc_1000b9b4, label %dec_label_pc_1000b9ae

dec_label_pc_1000b9ae:                            ; preds = %dec_label_pc_1000b9a7
  %v1_1000b9ae = inttoptr i32 %arg2 to i32*
  store i32 1, i32* %v1_1000b9ae, align 4
  br label %dec_label_pc_1000b9b4

dec_label_pc_1000b9b4:                            ; preds = %dec_label_pc_1000b9ae, %dec_label_pc_1000b9a7
  ret i32 0

dec_label_pc_1000b9ba:                            ; preds = %dec_label_pc_1000b99c
  %v1_1000b9bd = icmp eq i32 %arg2, 0
  br i1 %v1_1000b9bd, label %dec_label_pc_1000b9c7, label %dec_label_pc_1000b9c1

dec_label_pc_1000b9c1:                            ; preds = %dec_label_pc_1000b9ba
  %v1_1000b9c1 = inttoptr i32 %arg2 to i32*
  store i32 0, i32* %v1_1000b9c1, align 4
  %v0_1000b9c7.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000b9c7

dec_label_pc_1000b9c7:                            ; preds = %dec_label_pc_1000b9c1, %dec_label_pc_1000b9ba
  %v0_1000b9c7 = phi i32 [ %v0_1000b9c7.pre, %dec_label_pc_1000b9c1 ], [ %v0_1000b9a0, %dec_label_pc_1000b9ba ]
  %v1_1000b9c7 = inttoptr i32 %v0_1000b9c7 to i32*
  %v2_1000b9c7 = load i32, i32* %v1_1000b9c7, align 4
  ret i32 %v2_1000b9c7
}

define i32 @CreateInterface() local_unnamed_addr {
dec_label_pc_1000b9d0:
  %v2_1000b9d4 = call i32 @function_1000b960(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  ret i32 %v2_1000b9d4
}

define i32 @function_1000b9e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000b9e0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i8*, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_1000b9e7 = inttoptr i32 %arg1 to i32*
  %v2_1000b9e7 = load i32, i32* %v1_1000b9e7, align 4
  %v4_1000b9ed = inttoptr i32 %v2_1000b9e7 to i8*
  store i8* %v4_1000b9ed, i8** %stack_var_-20, align 4
  %v6_1000b9ee = call i32* @LoadLibraryExA(i8* %v4_1000b9ed, i32* null, i32 8)
  %v8_1000b9ee = ptrtoint i32* %v6_1000b9ee to i32
  %v1_1000b9f4 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000b9f4 = add i32 %v1_1000b9f4, 4
  %v3_1000b9f4 = inttoptr i32 %v2_1000b9f4 to i32*
  store i32 %v8_1000b9ee, i32* %v3_1000b9f4, align 4
  %v2_1000b9f9 = load i8*, i8** %stack_var_-20, align 4
  %v3_1000b9f9 = ptrtoint i8* %v2_1000b9f9 to i32
  store i32 %v3_1000b9f9, i32* %esi.global-to-local, align 4
  ret i32 0
}

define i32 @function_1000ba00() local_unnamed_addr {
dec_label_pc_1000ba00:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-1064 = alloca i8*, align 4
  %stack_var_-1060 = alloca i32, align 4
  %stack_var_-1056 = alloca i8*, align 4
  %stack_var_-1040 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ba00 = load i32, i32* @ebp, align 4
  store i32 %v0_1000ba00, i32* %stack_var_-4, align 4
  %v4_1000ba00 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000ba00, i32* @ebp, align 4
  %v16_1000ba03 = ptrtoint i32* %stack_var_-1040 to i32
  %v0_1000ba0e = load i32, i32* @eax, align 4
  store i32 %v16_1000ba03, i32* @ecx, align 4
  %tmp23 = bitcast i32* %stack_var_-1040 to i8*
  %v5_1000ba16 = call i32 @function_10009a60(i32* nonnull %stack_var_-1040, i32 %v0_1000ba0e, i32 1024)
  store i32 %v16_1000ba03, i32* @edx, align 4
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_10023dfc.442, i32 0, i32 0), i8** %stack_var_-1056, align 4
  store i32 %v16_1000ba03, i32* %stack_var_-1060, align 4
  %v0_1000ba27 = call i32 @function_10009640()
  %v1_1000ba2f = icmp eq i32 %v0_1000ba27, 0
  %v1_1000ba31 = icmp eq i1 %v1_1000ba2f, false
  br i1 %v1_1000ba31, label %dec_label_pc_1000ba4e, label %dec_label_pc_1000ba33

dec_label_pc_1000ba33:                            ; preds = %dec_label_pc_1000ba00
  store i8* %tmp23, i8** %stack_var_-1056, align 4
  %v7_1000ba46 = call i32 @function_10009650(i32 %v16_1000ba03, i32* bitcast ([5 x i8]* @global_var_10023dfc.442 to i32*), i32 1024, i32 -1)
  br label %dec_label_pc_1000ba4e

dec_label_pc_1000ba4e:                            ; preds = %dec_label_pc_1000ba33, %dec_label_pc_1000ba00
  store i32 %v16_1000ba03, i32* @ecx, align 4
  store i8* inttoptr (i32 92 to i8*), i8** %stack_var_-1056, align 4
  store i32 %v16_1000ba03, i32* %stack_var_-1060, align 4
  %v3_1000ba5a = call i32 @function_10009740(i32 %v16_1000ba03, i32 92)
  %v0_1000ba62 = call i32 @GetThreadedLoadLibraryFunc()
  store i32 0, i32* %edi.global-to-local, align 4
  %v12_1000ba6c = icmp eq i32 %v0_1000ba62, 0
  %v1_1000ba6e = icmp eq i1 %v12_1000ba6c, false
  br i1 %v1_1000ba6e, label %dec_label_pc_1000ba9f, label %dec_label_pc_1000ba70

dec_label_pc_1000ba70:                            ; preds = %dec_label_pc_1000ba4e
  store i8* inttoptr (i32 8 to i8*), i8** %stack_var_-1056, align 4
  store i32 0, i32* %stack_var_-1060, align 4
  store i8* %tmp23, i8** %stack_var_-1064, align 4
  %v7_1000ba7a = call i32* @LoadLibraryExA(i8* %tmp23, i32* null, i32 8)
  %v9_1000ba7a = ptrtoint i32* %v7_1000ba7a to i32
  store i32 %v9_1000ba7a, i32* %esi.global-to-local, align 4
  %v1_1000ba82 = load i32, i32* %edi.global-to-local, align 4
  %v12_1000ba82 = icmp eq i32 %v9_1000ba7a, %v1_1000ba82
  br i1 %v12_1000ba82, label %dec_label_pc_1000ba96, label %dec_label_pc_1000ba86

dec_label_pc_1000ba86:                            ; preds = %dec_label_pc_1000ba70
  %v0_1000ba8d = call i32 @StackToolsNotify_LoadedLibrary()
  %v0_1000ba97.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000ba96

dec_label_pc_1000ba96:                            ; preds = %dec_label_pc_1000ba86, %dec_label_pc_1000ba70
  %v0_1000ba97 = phi i32 [ %v0_1000ba97.pre, %dec_label_pc_1000ba86 ], [ %v9_1000ba7a, %dec_label_pc_1000ba70 ]
  %v2_1000ba96 = load i8*, i8** %stack_var_-1064, align 4
  %v3_1000ba96 = ptrtoint i8* %v2_1000ba96 to i32
  store i32 %v3_1000ba96, i32* @edi, align 4
  %v2_1000ba99 = load i32, i32* %stack_var_-1060, align 4
  store i32 %v2_1000ba99, i32* @esi, align 4
  %v2_1000ba9a = load i8*, i8** %stack_var_-1056, align 4
  %v3_1000ba9a = ptrtoint i8* %v2_1000ba9a to i32
  store i32 %v3_1000ba9a, i32* @ebx, align 4
  %v2_1000ba9d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000ba9d, i32* @ebp, align 4
  ret i32 %v0_1000ba97

dec_label_pc_1000ba9f:                            ; preds = %dec_label_pc_1000ba4e
  store i8* null, i8** %stack_var_-1056, align 4
  %v2_1000baa0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_1000baa0, i32* %stack_var_-1060, align 4
  store i32 %v16_1000ba03, i32* @ecx, align 4
  store i8* inttoptr (i32 268483040 to i8*), i8** %stack_var_-1064, align 4
  store i32 %v16_1000ba03, i32* %stack_var_-16, align 4
  %v6_1000bab8 = call i32 @CreateSimpleThread(i32 268483040, i32* nonnull %stack_var_-16, i32 0)
  %v0_1000bac1 = load i32, i32* %edi.global-to-local, align 4
  %v4_1000bac1 = inttoptr i32 %v0_1000bac1 to i8*
  store i8* %v4_1000bac1, i8** %stack_var_-1056, align 4
  %v0_1000bac2 = load i32, i32* inttoptr (i32 268574928 to i32*), align 16
  store i32 %v0_1000bac2, i32* %edi.global-to-local, align 4
  store i32 %v6_1000bab8, i32* %esi.global-to-local, align 4
  store i32 %v6_1000bab8, i32* %stack_var_-1060, align 4
  %v1_1000bacb = inttoptr i32 %v6_1000bab8 to i32*
  %v4_1000bacb = call i32 @WaitForSingleObject(i32* %v1_1000bacb, i32 %v0_1000bac1)
  %v10_1000bacd = icmp eq i32 %v4_1000bacb, 258
  %v1_1000bad2 = icmp eq i1 %v10_1000bacd, false
  br i1 %v1_1000bad2, label %dec_label_pc_1000bb15, label %dec_label_pc_1000bad4

dec_label_pc_1000bad4:                            ; preds = %dec_label_pc_1000ba9f, %dec_label_pc_1000bad4
  %v0_1000bad6 = phi i32 [ %v1_1000bad8, %dec_label_pc_1000bad4 ], [ %v4_1000bacb, %dec_label_pc_1000ba9f ]
  %v1_1000bad6 = load i32, i32* @esp, align 4
  %v2_1000bad6 = add i32 %v1_1000bad6, -4
  %v3_1000bad6 = inttoptr i32 %v2_1000bad6 to i32*
  store i32 %v0_1000bad6, i32* %v3_1000bad6, align 4
  %v0_1000bad7 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000bad7 = add i32 %v1_1000bad6, -8
  %v3_1000bad7 = inttoptr i32 %v2_1000bad7 to i32*
  store i32 %v0_1000bad7, i32* %v3_1000bad7, align 4
  %v1_1000bad8 = call i32 @WaitForSingleObject(i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v10_1000bada = icmp eq i32 %v1_1000bad8, 258
  br i1 %v10_1000bada, label %dec_label_pc_1000bad4, label %dec_label_pc_1000bb15

dec_label_pc_1000bb15:                            ; preds = %dec_label_pc_1000bad4, %dec_label_pc_1000ba9f
  %v0_1000bae1 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000bae1 = load i32, i32* @esp, align 4
  %v2_1000bae1 = add i32 %v1_1000bae1, -4
  %v3_1000bae1 = inttoptr i32 %v2_1000bae1 to i32*
  store i32 %v0_1000bae1, i32* %v3_1000bae1, align 4
  %v0_1000bae2 = call i32 @ReleaseThreadHandle()
  %v0_1000bae8 = load i32, i32* @esp, align 4
  %v1_1000bae8 = add i32 %v0_1000bae8, 4
  store i32 0, i32* @ecx, align 4
  %v1_1000bb1b = inttoptr i32 %v1_1000bae8 to i32*
  %v2_1000bb1b = load i32, i32* %v1_1000bb1b, align 4
  store i32 %v2_1000bb1b, i32* @edi, align 4
  %v3_1000bb1b = add i32 %v0_1000bae8, 8
  %v1_1000bb1c = inttoptr i32 %v3_1000bb1b to i32*
  %v2_1000bb1c = load i32, i32* %v1_1000bb1c, align 4
  store i32 %v2_1000bb1c, i32* @esi, align 4
  %v3_1000bb1c = add i32 %v0_1000bae8, 12
  store i32 0, i32* @global_var_1002bee0.443, align 4
  %v1_1000bb23 = inttoptr i32 %v3_1000bb1c to i32*
  %v2_1000bb23 = load i32, i32* %v1_1000bb23, align 4
  store i32 %v2_1000bb23, i32* @ebx, align 4
  %v2_1000bb26 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000bb26, i32* @ebp, align 4
  ret i32 0
}

define i32 @function_1000bb30() local_unnamed_addr {
dec_label_pc_1000bb30:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000bb30 = load i32, i32* @ebp, align 4
  store i32 %v0_1000bb30, i32* %stack_var_-4, align 4
  %v4_1000bb30 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000bb30, i32* @ebp, align 4
  %v16_1000bb33 = ptrtoint i32* %stack_var_-264 to i32
  %v0_1000bb3a = load i32, i32* inttoptr (i32 268575204 to i32*), align 4
  store i32 %v0_1000bb3a, i32* @esi, align 4
  %v0_1000bb40 = call i32 @CommandLine()
  store i32 %v0_1000bb40, i32* %eax.global-to-local, align 4
  %v1_1000bb42 = inttoptr i32 %v0_1000bb40 to i32*
  %v2_1000bb42 = load i32, i32* %v1_1000bb42, align 4
  store i32 %v2_1000bb42, i32* %edx.global-to-local, align 4
  store i32 %v0_1000bb40, i32* @ecx, align 4
  %v1_1000bb46 = add i32 %v2_1000bb42, 40
  %v2_1000bb46 = inttoptr i32 %v1_1000bb46 to i32*
  %v3_1000bb46 = load i32, i32* %v2_1000bb46, align 4
  store i32 %v3_1000bb46, i32* %eax.global-to-local, align 4
  %v1_1000bb50 = icmp eq i32 %v3_1000bb46, 0
  br i1 %v1_1000bb50, label %dec_label_pc_1000bb5b, label %dec_label_pc_1000bb74

dec_label_pc_1000bb5b:                            ; preds = %dec_label_pc_1000bb30
  %v0_1000bb5b = call i32 @CommandLine()
  store i32 %v0_1000bb5b, i32* %eax.global-to-local, align 4
  %v1_1000bb5d = inttoptr i32 %v0_1000bb5b to i32*
  %v2_1000bb5d = load i32, i32* %v1_1000bb5d, align 4
  store i32 %v2_1000bb5d, i32* %edx.global-to-local, align 4
  store i32 %v0_1000bb5b, i32* @ecx, align 4
  %v1_1000bb61 = add i32 %v2_1000bb5d, 40
  %v2_1000bb61 = inttoptr i32 %v1_1000bb61 to i32*
  %v3_1000bb61 = load i32, i32* %v2_1000bb61, align 4
  store i32 %v3_1000bb61, i32* %eax.global-to-local, align 4
  %v1_1000bb6b = icmp eq i32 %v3_1000bb61, 0
  br i1 %v1_1000bb6b, label %dec_label_pc_1000bbc8, label %dec_label_pc_1000bb74

dec_label_pc_1000bb74:                            ; preds = %dec_label_pc_1000bb5b, %dec_label_pc_1000bb30
  %v4_1000bb805 = phi i32 [ %v0_1000bb40, %dec_label_pc_1000bb30 ], [ %v0_1000bb5b, %dec_label_pc_1000bb5b ]
  %storemerge = phi i32 [ ptrtoint ([6 x i8]* @global_var_10023e0c.445 to i32), %dec_label_pc_1000bb30 ], [ ptrtoint ([4 x i8]* @global_var_10023e04.447 to i32), %dec_label_pc_1000bb5b ]
  store i32 %storemerge, i32* @esi, align 4
  %v0_1000bb7a = load i32, i32* @edi, align 4
  store i32 %v0_1000bb7a, i32* %eax.global-to-local, align 4
  %v2_1000bb7c = sub i32 %v16_1000bb33, %v0_1000bb7a
  store i32 %v2_1000bb7c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000bb80

dec_label_pc_1000bb80:                            ; preds = %dec_label_pc_1000bb80.dec_label_pc_1000bb80_crit_edge, %dec_label_pc_1000bb74
  %v2_1000bb82 = phi i32 [ %v2_1000bb82.pre, %dec_label_pc_1000bb80.dec_label_pc_1000bb80_crit_edge ], [ %v2_1000bb7c, %dec_label_pc_1000bb74 ]
  %v4_1000bb80 = phi i32 [ %v0_1000bb86, %dec_label_pc_1000bb80.dec_label_pc_1000bb80_crit_edge ], [ %v4_1000bb805, %dec_label_pc_1000bb74 ]
  %v3_1000bb82 = phi i32 [ %v1_1000bb85, %dec_label_pc_1000bb80.dec_label_pc_1000bb80_crit_edge ], [ %v0_1000bb7a, %dec_label_pc_1000bb74 ]
  %v1_1000bb80 = inttoptr i32 %v3_1000bb82 to i8*
  %v2_1000bb80 = load i8, i8* %v1_1000bb80, align 1
  %v3_1000bb80 = zext i8 %v2_1000bb80 to i32
  %v5_1000bb80 = and i32 %v4_1000bb80, -256
  %v6_1000bb80 = or i32 %v3_1000bb80, %v5_1000bb80
  store i32 %v6_1000bb80, i32* @ecx, align 4
  %v5_1000bb82 = add i32 %v3_1000bb82, %v2_1000bb82
  %v6_1000bb82 = inttoptr i32 %v5_1000bb82 to i8*
  store i8 %v2_1000bb80, i8* %v6_1000bb82, align 1
  %v0_1000bb85 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000bb85 = add i32 %v0_1000bb85, 1
  store i32 %v1_1000bb85, i32* %eax.global-to-local, align 4
  %v0_1000bb86 = load i32, i32* @ecx, align 4
  %v4_1000bb86 = trunc i32 %v0_1000bb86 to i8
  %v5_1000bb86 = icmp eq i8 %v4_1000bb86, 0
  %v1_1000bb88 = icmp eq i1 %v5_1000bb86, false
  br i1 %v1_1000bb88, label %dec_label_pc_1000bb80.dec_label_pc_1000bb80_crit_edge, label %dec_label_pc_1000bb8a

dec_label_pc_1000bb80.dec_label_pc_1000bb80_crit_edge: ; preds = %dec_label_pc_1000bb80
  %v2_1000bb82.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000bb80

dec_label_pc_1000bb8a:                            ; preds = %dec_label_pc_1000bb80
  store i32 %v16_1000bb33, i32* @ecx, align 4
  %v0_1000bb90 = load i32, i32* @esp, align 4
  %v1_1000bb90 = add i32 %v0_1000bb90, -4
  %v2_1000bb90 = inttoptr i32 %v1_1000bb90 to i32*
  store i32 46, i32* %v2_1000bb90, align 4
  %v2_1000bb92 = add i32 %v0_1000bb90, -8
  %v3_1000bb92 = inttoptr i32 %v2_1000bb92 to i32*
  store i32 %v16_1000bb33, i32* %v3_1000bb92, align 4
  %v2_1000bb93 = call i8* @_strchr(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v3_1000bb93 = ptrtoint i8* %v2_1000bb93 to i32
  store i32 %v3_1000bb93, i32* %eax.global-to-local, align 4
  %v0_1000bb98 = load i32, i32* @esp, align 4
  %v1_1000bb98 = add i32 %v0_1000bb98, 8
  %v2_1000bb9b = icmp eq i8* %v2_1000bb93, null
  br i1 %v2_1000bb9b, label %dec_label_pc_1000bba2, label %dec_label_pc_1000bb9f

dec_label_pc_1000bb9f:                            ; preds = %dec_label_pc_1000bb8a
  store i8 0, i8* %v2_1000bb93, align 1
  %v0_1000bba2.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000bba2

dec_label_pc_1000bba2:                            ; preds = %dec_label_pc_1000bb9f, %dec_label_pc_1000bb8a
  %v0_1000bba2 = phi i32 [ %v0_1000bba2.pre, %dec_label_pc_1000bb9f ], [ %v1_1000bb98, %dec_label_pc_1000bb8a ]
  %v1_1000bba2 = add i32 %v0_1000bba2, -4
  %v2_1000bba2 = inttoptr i32 %v1_1000bba2 to i32*
  store i32 -1, i32* %v2_1000bba2, align 4
  %v1_1000bba4 = add i32 %v0_1000bba2, -8
  %v2_1000bba4 = inttoptr i32 %v1_1000bba4 to i32*
  store i32 260, i32* %v2_1000bba4, align 4
  store i32 %v16_1000bb33, i32* @edx, align 4
  %v0_1000bbaf = load i32, i32* @esi, align 4
  %v2_1000bbaf = add i32 %v0_1000bba2, -12
  %v3_1000bbaf = inttoptr i32 %v2_1000bbaf to i32*
  store i32 %v0_1000bbaf, i32* %v3_1000bbaf, align 4
  %v2_1000bbb0 = add i32 %v0_1000bba2, -16
  %v3_1000bbb0 = inttoptr i32 %v2_1000bbb0 to i32*
  store i32 %v16_1000bb33, i32* %v3_1000bbb0, align 4
  %v3_1000bbb1 = call i32 @function_10009650(i32 ptrtoint (i32* @5 to i32), i32* nonnull @5, i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v16_1000bb33, i32* @eax, align 4
  %v0_1000bbbf = call i32 @function_1000ba00()
  store i32 %v0_1000bbbf, i32* %eax.global-to-local, align 4
  %v1_1000bbc4 = icmp eq i32 %v0_1000bbbf, 0
  %v1_1000bbc6 = icmp eq i1 %v1_1000bbc4, false
  br i1 %v1_1000bbc6, label %dec_label_pc_1000bbcf, label %dec_label_pc_1000bbc8

dec_label_pc_1000bbc8:                            ; preds = %dec_label_pc_1000bba2, %dec_label_pc_1000bb5b
  %v0_1000bbc8 = load i32, i32* @edi, align 4
  store i32 %v0_1000bbc8, i32* @eax, align 4
  %v0_1000bbca = call i32 @function_1000ba00()
  store i32 %v0_1000bbca, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000bbcf

dec_label_pc_1000bbcf:                            ; preds = %dec_label_pc_1000bbc8, %dec_label_pc_1000bba2
  %v0_1000bbd3 = phi i32 [ %v0_1000bbca, %dec_label_pc_1000bbc8 ], [ %v0_1000bbbf, %dec_label_pc_1000bba2 ]
  %v2_1000bbd2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000bbd2, i32* @ebp, align 4
  ret i32 %v0_1000bbd3
}

define i32 @function_1000bbe0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000bbe0:
  %stack_var_-1288 = alloca i32, align 4
  %stack_var_-1027 = alloca i32, align 4
  %stack_var_-1028 = alloca i32, align 4
  %stack_var_-2312 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000bbe0 = load i32, i32* @ebp, align 4
  store i32 %v0_1000bbe0, i32* %stack_var_-4, align 4
  %v4_1000bbe0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000bbe0, i32* @ebp, align 4
  %v16_1000bbe3 = ptrtoint i32* %stack_var_-2312 to i32
  %v0_1000bbe9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v0_1000bbed = load i32, i32* @esi, align 4
  %v0_1000bbee = load i32, i32* @edi, align 4
  %v5_1000bbf0 = call i32 @function_10009960(i32 %arg1, i32 %v0_1000bbee, i32 %v0_1000bbed, i32 %v0_1000bbe9)
  %v4_1000bbf8 = trunc i32 %v5_1000bbf0 to i8
  %v5_1000bbf8 = icmp eq i8 %v4_1000bbf8, 0
  %v1_1000bbfa = icmp eq i1 %v5_1000bbf8, false
  br i1 %v1_1000bbfa, label %dec_label_pc_1000bbe0.dec_label_pc_1000bcd7_crit_edge, label %dec_label_pc_1000bc00

dec_label_pc_1000bbe0.dec_label_pc_1000bcd7_crit_edge: ; preds = %dec_label_pc_1000bbe0
  br label %dec_label_pc_1000bcd7

dec_label_pc_1000bc00:                            ; preds = %dec_label_pc_1000bbe0
  %v2_1000bc00 = ptrtoint i32* %stack_var_-1028 to i32
  %v1_1000bc0c = bitcast i32* %stack_var_-1028 to i8*
  %v4_1000bc0c = call i8* @__getcwd(i8* %v1_1000bc0c, i32 1024)
  %v2_1000bc1a = ptrtoint i32* %stack_var_-1027 to i32
  %v4_1000bc20.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000bc20

dec_label_pc_1000bc20:                            ; preds = %dec_label_pc_1000bc20, %dec_label_pc_1000bc00
  %v4_1000bc20 = phi i32 [ %v6_1000bc20, %dec_label_pc_1000bc20 ], [ %v4_1000bc20.pre, %dec_label_pc_1000bc00 ]
  %v0_1000bc22 = phi i32 [ %v1_1000bc22, %dec_label_pc_1000bc20 ], [ %v2_1000bc00, %dec_label_pc_1000bc00 ]
  %v1_1000bc20 = inttoptr i32 %v0_1000bc22 to i8*
  %v2_1000bc20 = load i8, i8* %v1_1000bc20, align 1
  %v3_1000bc20 = zext i8 %v2_1000bc20 to i32
  %v5_1000bc20 = and i32 %v4_1000bc20, -256
  %v6_1000bc20 = or i32 %v3_1000bc20, %v5_1000bc20
  store i32 %v6_1000bc20, i32* @ecx, align 4
  %v1_1000bc22 = add i32 %v0_1000bc22, 1
  %v5_1000bc23 = icmp eq i8 %v2_1000bc20, 0
  %v1_1000bc25 = icmp eq i1 %v5_1000bc23, false
  br i1 %v1_1000bc25, label %dec_label_pc_1000bc20, label %dec_label_pc_1000bc27

dec_label_pc_1000bc27:                            ; preds = %dec_label_pc_1000bc20
  %v2_1000bc27 = sub i32 %v1_1000bc22, %v2_1000bc1a
  %v0_1000bc29 = load i32, i32* @ebp, align 4
  %v3_1000bc29 = add i32 %v2_1000bc27, -1025
  %v4_1000bc29 = add i32 %v3_1000bc29, %v0_1000bc29
  %v5_1000bc29 = inttoptr i32 %v4_1000bc29 to i8*
  %v6_1000bc29 = load i8, i8* %v5_1000bc29, align 1
  %v16_1000bc29 = icmp eq i8 %v6_1000bc29, 47
  br i1 %v16_1000bc29, label %dec_label_pc_1000bc3d, label %dec_label_pc_1000bc33

dec_label_pc_1000bc33:                            ; preds = %dec_label_pc_1000bc27
  %v6_1000bc33 = load i8, i8* %v5_1000bc29, align 1
  %v16_1000bc33 = icmp eq i8 %v6_1000bc33, 92
  %v1_1000bc3b = icmp eq i1 %v16_1000bc33, false
  br i1 %v1_1000bc3b, label %dec_label_pc_1000bc45, label %dec_label_pc_1000bc3d

dec_label_pc_1000bc3d:                            ; preds = %dec_label_pc_1000bc27, %dec_label_pc_1000bc33
  store i8 0, i8* %v5_1000bc29, align 1
  %v4_1000bc50.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000bc45

dec_label_pc_1000bc45:                            ; preds = %dec_label_pc_1000bc3d, %dec_label_pc_1000bc33
  %v4_1000bc50.pre = phi i32 [ %v4_1000bc50.pre.pre, %dec_label_pc_1000bc3d ], [ %v6_1000bc20, %dec_label_pc_1000bc33 ]
  store i32 %v2_1000bc1a, i32* @edx, align 4
  br label %dec_label_pc_1000bc50

dec_label_pc_1000bc50:                            ; preds = %dec_label_pc_1000bc50, %dec_label_pc_1000bc45
  %v4_1000bc50 = phi i32 [ %v6_1000bc50, %dec_label_pc_1000bc50 ], [ %v4_1000bc50.pre, %dec_label_pc_1000bc45 ]
  %v0_1000bc52 = phi i32 [ %v1_1000bc52, %dec_label_pc_1000bc50 ], [ %v2_1000bc00, %dec_label_pc_1000bc45 ]
  %v1_1000bc50 = inttoptr i32 %v0_1000bc52 to i8*
  %v2_1000bc50 = load i8, i8* %v1_1000bc50, align 1
  %v3_1000bc50 = zext i8 %v2_1000bc50 to i32
  %v5_1000bc50 = and i32 %v4_1000bc50, -256
  %v6_1000bc50 = or i32 %v3_1000bc50, %v5_1000bc50
  store i32 %v6_1000bc50, i32* @ecx, align 4
  %v1_1000bc52 = add i32 %v0_1000bc52, 1
  %v5_1000bc53 = icmp eq i8 %v2_1000bc50, 0
  %v1_1000bc55 = icmp eq i1 %v5_1000bc53, false
  br i1 %v1_1000bc55, label %dec_label_pc_1000bc50, label %dec_label_pc_1000bc57

dec_label_pc_1000bc57:                            ; preds = %dec_label_pc_1000bc50
  %v2_1000bc57 = sub i32 %v1_1000bc52, %v2_1000bc1a
  store i32 %v2_1000bc57, i32* @eax, align 4
  %v0_1000bc5e = load i32, i32* @ebx, align 4
  store i32 %v2_1000bc57, i32* @esi, align 4
  %v4_1000bc61 = call i32 @function_10012360(i32 %v0_1000bc5e, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_10023e68.448, i32 0, i32 0))
  %v1_1000bc69 = load i32, i32* @ebx, align 4
  %v12_1000bc69 = icmp eq i32 %v4_1000bc61, %v1_1000bc69
  br i1 %v12_1000bc69, label %dec_label_pc_1000bca5, label %dec_label_pc_1000bc6d

dec_label_pc_1000bc6d:                            ; preds = %dec_label_pc_1000bc57
  %v0_1000bc6d = load i32, i32* @ebp, align 4
  %v1_1000bc6d = load i32, i32* @esi, align 4
  %v3_1000bc6d = add i32 %v0_1000bc6d, -1025
  %v4_1000bc6d = add i32 %v3_1000bc6d, %v1_1000bc6d
  %v5_1000bc6d = inttoptr i32 %v4_1000bc6d to i8*
  %v6_1000bc6d = load i8, i8* %v5_1000bc6d, align 1
  %v16_1000bc6d = icmp eq i8 %v6_1000bc6d, 110
  %v3_1000bc75 = add i32 %v0_1000bc6d, -1024
  %v4_1000bc75 = add i32 %v3_1000bc75, %v1_1000bc6d
  %v1_1000bc7c = icmp eq i1 %v16_1000bc6d, false
  br i1 %v1_1000bc7c, label %dec_label_pc_1000bc8a, label %dec_label_pc_1000bc7e

dec_label_pc_1000bc7e:                            ; preds = %dec_label_pc_1000bc6d
  %v1_1000bc7e = add i32 %v4_1000bc75, -2
  %v2_1000bc7e = inttoptr i32 %v1_1000bc7e to i8*
  %v3_1000bc7e = load i8, i8* %v2_1000bc7e, align 1
  %v13_1000bc7e = icmp eq i8 %v3_1000bc7e, 105
  %v1_1000bc82 = icmp eq i1 %v13_1000bc7e, false
  br i1 %v1_1000bc82, label %dec_label_pc_1000bc8a, label %dec_label_pc_1000bc84

dec_label_pc_1000bc84:                            ; preds = %dec_label_pc_1000bc7e
  %v1_1000bc84 = add i32 %v4_1000bc75, -3
  %v2_1000bc84 = inttoptr i32 %v1_1000bc84 to i8*
  %v3_1000bc84 = load i8, i8* %v2_1000bc84, align 1
  %v13_1000bc84 = icmp eq i8 %v3_1000bc84, 98
  br i1 %v13_1000bc84, label %dec_label_pc_1000bca5, label %dec_label_pc_1000bc8a

dec_label_pc_1000bc8a:                            ; preds = %dec_label_pc_1000bc84, %dec_label_pc_1000bc7e, %dec_label_pc_1000bc6d
  br label %dec_label_pc_1000bcbe

dec_label_pc_1000bca5:                            ; preds = %dec_label_pc_1000bc84, %dec_label_pc_1000bc57
  br label %dec_label_pc_1000bcbe

dec_label_pc_1000bcbe:                            ; preds = %dec_label_pc_1000bca5, %dec_label_pc_1000bc8a
  %storemerge = phi i32 [ %v2_1000bc00, %dec_label_pc_1000bc8a ], [ %v16_1000bbe3, %dec_label_pc_1000bca5 ]
  %v4_1000bcbe = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_10023e5c.449, i32 0, i32 0), %dec_label_pc_1000bc8a ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10022c68.189, i32 0, i32 0), %dec_label_pc_1000bca5 ]
  store i32 %storemerge, i32* @ecx, align 4
  %v7_1000bcbe = call i32 @function_10009a90(i32* nonnull %stack_var_-2312, i32 1024, i8* nonnull %v4_1000bcbe)
  store i32 %v16_1000bbe3, i32* @edi, align 4
  %v0_1000bccc = call i32 @function_1000bb30()
  store i32 %v0_1000bccc, i32* @esi, align 4
  %v1_1000bcd3 = icmp eq i32 %v0_1000bccc, 0
  %v1_1000bcd5 = icmp eq i1 %v1_1000bcd3, false
  br i1 %v1_1000bcd5, label %dec_label_pc_1000bce0, label %dec_label_pc_1000bcd7

dec_label_pc_1000bcd7:                            ; preds = %dec_label_pc_1000bbe0.dec_label_pc_1000bcd7_crit_edge, %dec_label_pc_1000bcbe
  %v0_1000bcd7 = load i32, i32* @ebx, align 4
  store i32 %v0_1000bcd7, i32* @edi, align 4
  %v0_1000bcd9 = call i32 @function_1000bb30()
  store i32 %v0_1000bcd9, i32* @esi, align 4
  br label %dec_label_pc_1000bce0

dec_label_pc_1000bce0:                            ; preds = %dec_label_pc_1000bcd7, %dec_label_pc_1000bcbe
  %v0_1000bce5 = phi i32 [ %v0_1000bcd9, %dec_label_pc_1000bcd7 ], [ %v0_1000bccc, %dec_label_pc_1000bcbe ]
  %v1_1000bce6 = inttoptr i32 %v0_1000bce5 to i32*
  %v5_1000bce6 = call i32 ()* @GetProcAddress(i32* %v1_1000bce6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_10023e50.450, i32 0, i32 0))
  %v1_1000bcec = icmp eq i32 ()* %v5_1000bce6, null
  br i1 %v1_1000bcec, label %dec_label_pc_1000bd7d, label %dec_label_pc_1000bcf4

dec_label_pc_1000bcf4:                            ; preds = %dec_label_pc_1000bce0
  %v0_1000bcf4 = load i32, i32* @esi, align 4
  %v1_1000bcf4 = icmp eq i32 %v0_1000bcf4, 0
  br i1 %v1_1000bcf4, label %dec_label_pc_1000bd29, label %dec_label_pc_1000bcf8

dec_label_pc_1000bcf8:                            ; preds = %dec_label_pc_1000bcf4
  %v0_1000bcf8 = call i32 @CommandLine()
  %v1_1000bcfe = inttoptr i32 %v0_1000bcf8 to i32*
  %v2_1000bcfe = load i32, i32* %v1_1000bcfe, align 4
  store i32 %v0_1000bcf8, i32* @ecx, align 4
  %v1_1000bd02 = add i32 %v2_1000bcfe, 40
  %v2_1000bd02 = inttoptr i32 %v1_1000bd02 to i32*
  %v3_1000bd02 = load i32, i32* %v2_1000bd02, align 4
  %v1_1000bd0c = icmp eq i32 %v3_1000bd02, 0
  %v1_1000bd0e = icmp eq i1 %v1_1000bd0c, false
  br i1 %v1_1000bd0e, label %dec_label_pc_1000bd29, label %dec_label_pc_1000bd10

dec_label_pc_1000bd10:                            ; preds = %dec_label_pc_1000bcf8
  %v0_1000bd10 = call i32 @Plat_IsInDebugSession()
  %v4_1000bd16 = trunc i32 %v0_1000bd10 to i8
  %v5_1000bd16 = icmp eq i8 %v4_1000bd16, 0
  %v1_1000bd18 = icmp eq i1 %v5_1000bd16, false
  br i1 %v1_1000bd18, label %dec_label_pc_1000bd29, label %dec_label_pc_1000bd1a

dec_label_pc_1000bd1a:                            ; preds = %dec_label_pc_1000bd10
  %v0_1000bd20 = call i32 @Error()
  br label %dec_label_pc_1000bd29

dec_label_pc_1000bd29:                            ; preds = %dec_label_pc_1000bd1a, %dec_label_pc_1000bd10, %dec_label_pc_1000bcf8, %dec_label_pc_1000bcf4
  %v0_1000bd29 = load i32, i32* @ebx, align 4
  %v1_1000bd29 = load i32, i32* @esp, align 4
  %v2_1000bd29 = add i32 %v1_1000bd29, -4
  %v3_1000bd29 = inttoptr i32 %v2_1000bd29 to i32*
  store i32 %v0_1000bd29, i32* %v3_1000bd29, align 4
  %v1_1000bd2a = add i32 %v1_1000bd29, -8
  %v2_1000bd2a = inttoptr i32 %v1_1000bd2a to i32*
  store i32 ptrtoint ([28 x i8]* @global_var_10023e34.451 to i32), i32* %v2_1000bd2a, align 4
  %v0_1000bd2f = call i32 @"?DevWarning@@YAXPBDZZ"()
  %v0_1000bd38 = load i8, i8* @global_var_1002bee4.452, align 1
  %v7_1000bd38 = icmp eq i8 %v0_1000bd38, 0
  %v1_1000bd3f = icmp eq i1 %v7_1000bd38, false
  br i1 %v1_1000bd3f, label %dec_label_pc_1000bd7d, label %dec_label_pc_1000bd41

dec_label_pc_1000bd41:                            ; preds = %dec_label_pc_1000bd29
  store i8 1, i8* @global_var_1002bee4.452, align 1
  %v0_1000bd48 = call i32 @GetCurrentProcessId()
  %v1_1000bd4e = load i32, i32* @esp, align 4
  %v2_1000bd4e = add i32 %v1_1000bd4e, -4
  %v3_1000bd4e = inttoptr i32 %v2_1000bd4e to i32*
  store i32 %v0_1000bd48, i32* %v3_1000bd4e, align 4
  %v2_1000bd4f = ptrtoint i32* %stack_var_-1288 to i32
  store i32 %v2_1000bd4f, i32* @ecx, align 4
  %v1_1000bd55 = add i32 %v1_1000bd4e, -8
  %v2_1000bd55 = inttoptr i32 %v1_1000bd55 to i32*
  store i32 ptrtoint ([24 x i8]* @global_var_10023e1c.453 to i32), i32* %v2_1000bd55, align 4
  %v2_1000bd5a = add i32 %v1_1000bd4e, -12
  %v3_1000bd5a = inttoptr i32 %v2_1000bd5a to i32*
  store i32 %v2_1000bd4f, i32* %v3_1000bd5a, align 4
  %v2_1000bd5b = call i32 (i8*, i8*, ...) @_sprintf(i8* bitcast (i32* @5 to i8*), i8* bitcast (i32* @5 to i8*))
  %v0_1000bd60 = load i32, i32* @esp, align 4
  %v2_1000bd69 = add i32 %v0_1000bd60, 8
  %v3_1000bd69 = inttoptr i32 %v2_1000bd69 to i32*
  store i32 %v2_1000bd4f, i32* %v3_1000bd69, align 4
  %v1_1000bd6a = add i32 %v0_1000bd60, 4
  %v2_1000bd6a = inttoptr i32 %v1_1000bd6a to i32*
  store i32 1024, i32* %v2_1000bd6a, align 4
  %v2_1000bd6f = inttoptr i32 %v0_1000bd60 to i32*
  store i32 0, i32* %v2_1000bd6f, align 4
  %v1_1000bd71 = add i32 %v0_1000bd60, -4
  %v2_1000bd71 = inttoptr i32 %v1_1000bd71 to i32*
  store i32 4, i32* %v2_1000bd71, align 4
  %v1_1000bd73 = add i32 %v0_1000bd60, -8
  %v2_1000bd73 = inttoptr i32 %v1_1000bd73 to i32*
  store i32 0, i32* %v2_1000bd73, align 4
  %v1_1000bd75 = add i32 %v0_1000bd60, -12
  %v2_1000bd75 = inttoptr i32 %v1_1000bd75 to i32*
  store i32 -1, i32* %v2_1000bd75, align 4
  %v5_1000bd77 = call i32* @CreateFileMappingA(i32* nonnull @5, %_SECURITY_ATTRIBUTES* bitcast (i32* @5 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i8* bitcast (i32* @5 to i8*))
  br label %dec_label_pc_1000bd7d

dec_label_pc_1000bd7d:                            ; preds = %dec_label_pc_1000bd41, %dec_label_pc_1000bd29, %dec_label_pc_1000bce0
  %v0_1000bd7e = load i32, i32* @esi, align 4
  ret i32 %v0_1000bd7e
}

define i32 @function_1000bd90(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000bd90:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000bd90 = load i32, i32* @ebp, align 4
  store i32 %v0_1000bd90, i32* %stack_var_-4, align 4
  %v4_1000bd90 = ptrtoint i32* %stack_var_-4 to i32
  %v1_1000bd96 = icmp eq i32 %arg1, 0
  br i1 %v1_1000bd96, label %dec_label_pc_1000bda1, label %dec_label_pc_1000bd9a

dec_label_pc_1000bd9a:                            ; preds = %dec_label_pc_1000bd90
  %v1_1000bd9b = inttoptr i32 %arg1 to i32*
  %v2_1000bd9b = call i1 @FreeLibrary(i32* %v1_1000bd9b)
  %v4_1000bd9b = sext i1 %v2_1000bd9b to i32
  %v0_1000bda1.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000bda1

dec_label_pc_1000bda1:                            ; preds = %dec_label_pc_1000bd9a, %dec_label_pc_1000bd90
  %v0_1000bda2 = phi i32 [ %v4_1000bd9b, %dec_label_pc_1000bd9a ], [ 0, %dec_label_pc_1000bd90 ]
  %v0_1000bda1 = phi i32 [ %v0_1000bda1.pre, %dec_label_pc_1000bd9a ], [ %v4_1000bd90, %dec_label_pc_1000bd90 ]
  %v1_1000bda1 = inttoptr i32 %v0_1000bda1 to i32*
  %v2_1000bda1 = load i32, i32* %v1_1000bda1, align 4
  store i32 %v2_1000bda1, i32* @ebp, align 4
  ret i32 %v0_1000bda2
}

define i32 @function_1000bdb0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000bdb0:
  %v1_1000bdb6 = icmp eq i32 %arg1, 0
  %v1_1000bdb8 = icmp eq i1 %v1_1000bdb6, false
  br i1 %v1_1000bdb8, label %dec_label_pc_1000bdbc, label %dec_label_pc_1000bdba

dec_label_pc_1000bdba:                            ; preds = %dec_label_pc_1000bdb0
  ret i32 %arg1

dec_label_pc_1000bdbc:                            ; preds = %dec_label_pc_1000bdb0
  %v1_1000bdc2 = inttoptr i32 %arg1 to i32*
  %v5_1000bdc2 = call i32 ()* @GetProcAddress(i32* %v1_1000bdc2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_10023e70.454, i32 0, i32 0))
  %v7_1000bdc2 = ptrtoint i32 ()* %v5_1000bdc2 to i32
  store i32 %arg1, i32* @ebp, align 4
  ret i32 %v7_1000bdc2
}

define i32 @function_1000bdd0() local_unnamed_addr {
dec_label_pc_1000bdd0:
  ret i32 ptrtoint (i32* @global_var_1002bef8.455 to i32)
}

define i32 @function_1000bde0() local_unnamed_addr {
dec_label_pc_1000bde0:
  ret i32 ptrtoint (i32* @global_var_1002c918.456 to i32)
}

define i32 @function_1000bdf0(i32 %arg1, i32 %arg2) {
dec_label_pc_1000bdf0:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000bdf6 = inttoptr i32 %arg1 to i8*
  %v2_1000bdf6 = load i8, i8* %v1_1000bdf6, align 1
  %v3_1000bdf6 = zext i8 %v2_1000bdf6 to i32
  %v1_1000bdf9 = load i32, i32* @ecx, align 4
  %v3_1000bdf9 = add nuw nsw i32 %v3_1000bdf6, 2328
  %v4_1000bdf9 = add i32 %v3_1000bdf9, %v1_1000bdf9
  %v5_1000bdf9 = inttoptr i32 %v4_1000bdf9 to i8*
  %v6_1000bdf9 = load i8, i8* %v5_1000bdf9, align 1
  %v7_1000bdf9 = zext i8 %v6_1000bdf9 to i32
  %v9_1000bdf9 = and i32 %arg1, -256
  %v10_1000bdf9 = or i32 %v7_1000bdf9, %v9_1000bdf9
  store i32 %v10_1000bdf9, i32* %eax.global-to-local, align 4
  %v5_1000be05 = icmp eq i8 %v6_1000bdf9, 0
  %v1_1000be07 = icmp eq i1 %v5_1000be05, false
  %v2_1000be07 = zext i1 %v1_1000be07 to i32
  store i32 %v2_1000be07, i32* @ecx, align 4
  %v2_1000be0a = inttoptr i32 %arg2 to i32*
  store i32 %v2_1000be07, i32* %v2_1000be0a, align 4
  %v0_1000be0d = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000be0d
}

define i32 @function_1000be10(i32 %arg1, i32* %arg2, i32 %arg3, i32* %arg4) local_unnamed_addr {
dec_label_pc_1000be10:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  %tmp5 = ptrtoint i32* %arg2 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v0_1000be1b = load i32, i32* @ecx, align 4
  store i32 %v0_1000be1b, i32* %esi.global-to-local, align 4
  %v1_1000be1d = trunc i32 %arg1 to i8
  %v3_1000be1d = add i32 %v0_1000be1b, 4
  %v4_1000be1d = inttoptr i32 %v3_1000be1d to i8*
  store i8 %v1_1000be1d, i8* %v4_1000be1d, align 1
  store i32 %tmp5, i32* %eax.global-to-local, align 4
  %v0_1000be23 = load i32, i32* @edi, align 4
  store i32 %v0_1000be23, i32* %stack_var_-16, align 4
  %v4_1000be23 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp5, i32* %stack_var_-20, align 4
  %v0_1000be25 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000be25 = inttoptr i32 %v0_1000be25 to i32*
  store i32 ptrtoint (%vtable_10023ea8_type* @global_var_10023ea8.457 to i32), i32* %v1_1000be25, align 4
  %v0_1000be2b = load i32, i32* %eax.global-to-local, align 4
  %v1_1000be2b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000be2b = add i32 %v1_1000be2b, 8
  %v3_1000be2b = inttoptr i32 %v2_1000be2b to i32*
  store i32 %v0_1000be2b, i32* %v3_1000be2b, align 4
  %v0_1000be2e = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000be2e = load i32, i32* %esi.global-to-local, align 4
  %v2_1000be2e = add i32 %v1_1000be2e, 16
  %v3_1000be2e = inttoptr i32 %v2_1000be2e to i32*
  store i32 %v0_1000be2e, i32* %v3_1000be2e, align 4
  %v0_1000be31 = load i32, i32* %stack_var_-20, align 4
  %v1_1000be31 = call i32 @function_10009450(i32 %v0_1000be31)
  store i32 %v1_1000be31, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_1000be3d = load i32, i32* %esi.global-to-local, align 4
  %v1_1000be3d = add i32 %v0_1000be3d, 280
  store i32 %v1_1000be3d, i32* @ecx, align 4
  store i32 %v1_1000be3d, i32* %stack_var_-32, align 4
  %v2_1000be45 = add i32 %v0_1000be3d, 12
  %v3_1000be45 = inttoptr i32 %v2_1000be45 to i32*
  store i32 %v1_1000be31, i32* %v3_1000be45, align 4
  %v0_1000be48 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000be48 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000be48 = add i32 %v1_1000be48, 20
  %v3_1000be48 = inttoptr i32 %v2_1000be48 to i32*
  store i32 %v0_1000be48, i32* %v3_1000be48, align 4
  %v0_1000be4b = load i32, i32* %stack_var_-32, align 4
  %v1_1000be4b = inttoptr i32 %v0_1000be4b to i32*
  %v4_1000be4b = call i32* @_memset(i32* %v1_1000be4b, i32 0, i32 2048)
  %v6_1000be4b = ptrtoint i32* %v4_1000be4b to i32
  store i32 %v6_1000be4b, i32* %eax.global-to-local, align 4
  %v0_1000be53 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000be53 = load i32, i32* %edi.global-to-local, align 4
  %v7_1000be55 = icmp sgt i32 %v0_1000be53, %v1_1000be53
  br i1 %v7_1000be55, label %dec_label_pc_1000be57.preheader, label %dec_label_pc_1000be8b

dec_label_pc_1000be57.preheader:                  ; preds = %dec_label_pc_1000be10
  br label %dec_label_pc_1000be57

dec_label_pc_1000be57:                            ; preds = %dec_label_pc_1000be85.dec_label_pc_1000be57_crit_edge, %dec_label_pc_1000be57.preheader
  %v7_1000be5a = phi i32 [ %v6_1000be4b, %dec_label_pc_1000be57.preheader ], [ %v7_1000be5a.pre, %dec_label_pc_1000be85.dec_label_pc_1000be57_crit_edge ]
  %v3_1000be60 = phi i32 [ %v1_1000be53, %dec_label_pc_1000be57.preheader ], [ %v1_1000be85, %dec_label_pc_1000be85.dec_label_pc_1000be57_crit_edge ]
  store i32 %tmp, i32* @ecx, align 4
  %v2_1000be5a = mul i32 %v3_1000be60, 8
  %v3_1000be5a = add i32 %v2_1000be5a, %tmp
  %v4_1000be5a = inttoptr i32 %v3_1000be5a to i8*
  %v5_1000be5a = load i8, i8* %v4_1000be5a, align 1
  %v6_1000be5a = zext i8 %v5_1000be5a to i32
  %v8_1000be5a = and i32 %v7_1000be5a, -256
  %v9_1000be5a = or i32 %v6_1000be5a, %v8_1000be5a
  store i32 %v9_1000be5a, i32* %eax.global-to-local, align 4
  store i32 %v6_1000be5a, i32* %edx.global-to-local, align 4
  %v2_1000be60 = load i32, i32* %esi.global-to-local, align 4
  %v5_1000be60 = add i32 %v3_1000be60, 24
  %v6_1000be60 = add i32 %v5_1000be60, %v2_1000be60
  %v7_1000be60 = inttoptr i32 %v6_1000be60 to i8*
  store i8 %v5_1000be5a, i8* %v7_1000be60, align 1
  %v0_1000be64 = load i32, i32* @ecx, align 4
  %v1_1000be64 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000be64 = mul i32 %v1_1000be64, 8
  %v3_1000be64 = add i32 %v0_1000be64, 4
  %v4_1000be64 = add i32 %v3_1000be64, %v2_1000be64
  %v5_1000be64 = inttoptr i32 %v4_1000be64 to i32*
  %v6_1000be64 = load i32, i32* %v5_1000be64, align 4
  store i32 %v6_1000be64, i32* %eax.global-to-local, align 4
  %v0_1000be68 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000be68 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000be68 = mul i32 %v1_1000be68, 8
  %v3_1000be68 = add i32 %v0_1000be68, 280
  %v4_1000be68 = add i32 %v3_1000be68, %v2_1000be68
  store i32 %v4_1000be68, i32* %ebx.global-to-local, align 4
  %v1_1000be6f = load i32, i32* @esp, align 4
  %v2_1000be6f = add i32 %v1_1000be6f, -4
  %v3_1000be6f = inttoptr i32 %v2_1000be6f to i32*
  store i32 %v6_1000be64, i32* %v3_1000be6f, align 4
  %v0_1000be70 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000be70 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000be70 = add i32 %v1_1000be70, 4
  %v3_1000be70 = inttoptr i32 %v2_1000be70 to i32*
  store i32 %v0_1000be70, i32* %v3_1000be70, align 4
  %v1_1000be73 = call i32 @function_10009450(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000be73, i32* %eax.global-to-local, align 4
  %v1_1000be7b = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000be7b = inttoptr i32 %v1_1000be7b to i32*
  store i32 %v1_1000be73, i32* %v2_1000be7b, align 4
  %v0_1000be7d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000be7d = load i32, i32* %esi.global-to-local, align 4
  %v2_1000be7d = add i32 %v1_1000be7d, 20
  %v3_1000be7d = inttoptr i32 %v2_1000be7d to i32*
  %v4_1000be7d = load i32, i32* %v3_1000be7d, align 4
  %v7_1000be80 = icmp sgt i32 %v0_1000be7d, %v4_1000be7d
  br i1 %v7_1000be80, label %dec_label_pc_1000be82, label %dec_label_pc_1000be85

dec_label_pc_1000be82:                            ; preds = %dec_label_pc_1000be57
  store i32 %v0_1000be7d, i32* %v3_1000be7d, align 4
  br label %dec_label_pc_1000be85

dec_label_pc_1000be85:                            ; preds = %dec_label_pc_1000be57, %dec_label_pc_1000be82
  %v0_1000be85 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000be85 = add i32 %v0_1000be85, 1
  store i32 %v1_1000be85, i32* %edi.global-to-local, align 4
  %v5_1000be89 = icmp slt i32 %v1_1000be85, %arg3
  br i1 %v5_1000be89, label %dec_label_pc_1000be85.dec_label_pc_1000be57_crit_edge, label %dec_label_pc_1000be8b.loopexit

dec_label_pc_1000be85.dec_label_pc_1000be57_crit_edge: ; preds = %dec_label_pc_1000be85
  %v7_1000be5a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000be57

dec_label_pc_1000be8b.loopexit:                   ; preds = %dec_label_pc_1000be85
  %v0_1000be8b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000be8b

dec_label_pc_1000be8b:                            ; preds = %dec_label_pc_1000be8b.loopexit, %dec_label_pc_1000be10
  %v0_1000be8b = phi i32 [ %v0_1000be8b.pre, %dec_label_pc_1000be8b.loopexit ], [ %v4_1000be23, %dec_label_pc_1000be10 ]
  %v1_1000be8b = inttoptr i32 %v0_1000be8b to i32*
  %v2_1000be8b = load i32, i32* %v1_1000be8b, align 4
  store i32 %v2_1000be8b, i32* %edi.global-to-local, align 4
  %v3_1000be8b = add i32 %v0_1000be8b, 4
  %v0_1000be8c = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000be8c, i32* %eax.global-to-local, align 4
  %v1_1000be8e = inttoptr i32 %v3_1000be8b to i32*
  %v2_1000be8e = load i32, i32* %v1_1000be8e, align 4
  store i32 %v2_1000be8e, i32* %esi.global-to-local, align 4
  %v3_1000be8e = add i32 %v0_1000be8b, 8
  %v1_1000be8f = inttoptr i32 %v3_1000be8e to i32*
  %v2_1000be8f = load i32, i32* %v1_1000be8f, align 4
  store i32 %v2_1000be8f, i32* %ebx.global-to-local, align 4
  ret i32 %v0_1000be8c
}

define i32 @function_1000bea0(i32 %arg1, i32 %arg2) {
dec_label_pc_1000bea0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp234 = call i8 @__decompiler_undefined_function_2()
  %stack_var_-16 = alloca i32, align 4
  %v0_1000bea5 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000bea5, i32* %stack_var_-16, align 4
  %v4_1000bea5 = ptrtoint i32* %stack_var_-16 to i32
  %v0_1000bea6 = load i32, i32* @ecx, align 4
  store i32 %v0_1000bea6, i32* %esi.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v1_1000beaa = add i32 %v0_1000bea6, 16
  %v2_1000beaa = inttoptr i32 %v1_1000beaa to i32*
  %v3_1000beaa = load i32, i32* %v2_1000beaa, align 4
  %v7_1000bead = icmp sgt i32 %v3_1000beaa, 0
  br i1 %v7_1000bead, label %dec_label_pc_1000beaf, label %dec_label_pc_1000bed2

dec_label_pc_1000beaf:                            ; preds = %dec_label_pc_1000bea0
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000beb2

dec_label_pc_1000beb2:                            ; preds = %dec_label_pc_1000becc, %dec_label_pc_1000beaf
  %v1_1000bebe = phi i32 [ %v1_1000bec5, %dec_label_pc_1000becc ], [ %v4_1000bea5, %dec_label_pc_1000beaf ]
  %v1_1000beb2 = phi i32 [ %v1_1000becc, %dec_label_pc_1000becc ], [ 0, %dec_label_pc_1000beaf ]
  %v0_1000beb7 = phi i32 [ %v1_1000becd, %dec_label_pc_1000becc ], [ %v0_1000bea6, %dec_label_pc_1000beaf ]
  %v3_1000beb2 = add i32 %v1_1000beb2, 24
  %v4_1000beb2 = add i32 %v3_1000beb2, %v0_1000beb7
  %v5_1000beb2 = inttoptr i32 %v4_1000beb2 to i8*
  %v6_1000beb2 = load i8, i8* %v5_1000beb2, align 1
  %v7_1000beb2 = zext i8 %v6_1000beb2 to i32
  store i32 %v7_1000beb2, i32* @eax, align 4
  %v2_1000beb7 = mul nuw nsw i32 %v7_1000beb2, 8
  %v3_1000beb7 = add i32 %v0_1000beb7, 284
  %v4_1000beb7 = add i32 %v3_1000beb7, %v2_1000beb7
  %v5_1000beb7 = inttoptr i32 %v4_1000beb7 to i32*
  %v6_1000beb7 = load i32, i32* %v5_1000beb7, align 4
  store i32 %v6_1000beb7, i32* @ecx, align 4
  %v2_1000bebe = add i32 %v1_1000bebe, -4
  %v3_1000bebe = inttoptr i32 %v2_1000bebe to i32*
  store i32 %v6_1000beb7, i32* %v3_1000bebe, align 4
  %v0_1000bebf = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000bebf = add i32 %v1_1000bebe, -8
  %v3_1000bebf = inttoptr i32 %v2_1000bebf to i32*
  store i32 %v0_1000bebf, i32* %v3_1000bebf, align 4
  %v2_1000bec0 = call i32 @function_10009470(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v3_1000bec0 = trunc i32 %v2_1000bec0 to i8
  store i32 %v2_1000bec0, i32* %eax.global-to-local, align 4
  %v0_1000bec5 = load i32, i32* @esp, align 4
  %v1_1000bec5 = add i32 %v0_1000bec5, 8
  %v2_1000bec8 = icmp eq i8 %v3_1000bec0, 0
  %v0_1000bee4 = load i32, i32* %edi.global-to-local, align 4
  br i1 %v2_1000bec8, label %dec_label_pc_1000bee4, label %dec_label_pc_1000becc

dec_label_pc_1000becc:                            ; preds = %dec_label_pc_1000beb2
  %v1_1000becc = add i32 %v0_1000bee4, 1
  store i32 %v1_1000becc, i32* %edi.global-to-local, align 4
  %v1_1000becd = load i32, i32* %esi.global-to-local, align 4
  %v2_1000becd = add i32 %v1_1000becd, 16
  %v3_1000becd = inttoptr i32 %v2_1000becd to i32*
  %v4_1000becd = load i32, i32* %v3_1000becd, align 4
  %v5_1000bed0 = icmp slt i32 %v1_1000becc, %v4_1000becd
  br i1 %v5_1000bed0, label %dec_label_pc_1000beb2, label %dec_label_pc_1000bed2

dec_label_pc_1000bed2:                            ; preds = %dec_label_pc_1000becc, %dec_label_pc_1000bea0
  %v0_1000bed5 = phi i32 [ %v4_1000bea5, %dec_label_pc_1000bea0 ], [ %v1_1000bec5, %dec_label_pc_1000becc ]
  %.0 = phi i8 [ %tmp234, %dec_label_pc_1000bea0 ], [ %v3_1000bec0, %dec_label_pc_1000becc ]
  %v1_1000bed5 = inttoptr i32 %v0_1000bed5 to i32*
  %v2_1000bed5 = load i32, i32* %v1_1000bed5, align 4
  store i32 %v2_1000bed5, i32* %edi.global-to-local, align 4
  %v3_1000bed5 = add i32 %v0_1000bed5, 4
  %v1_1000bed6 = inttoptr i32 %v3_1000bed5 to i32*
  %v2_1000bed6 = load i32, i32* %v1_1000bed6, align 4
  store i32 %v2_1000bed6, i32* %esi.global-to-local, align 4
  %v1_1000bed7 = inttoptr i32 %arg2 to i32*
  store i32 0, i32* %v1_1000bed7, align 4
  %v14_1000bedd = sext i8 %.0 to i32
  %v15_1000bedd = and i32 %v14_1000bedd, -256
  store i32 %v15_1000bedd, i32* %eax.global-to-local, align 4
  %v0_1000bedf = load i32, i32* @esp, align 4
  %v1_1000bedf = inttoptr i32 %v0_1000bedf to i32*
  %v2_1000bedf = load i32, i32* %v1_1000bedf, align 4
  store i32 %v2_1000bedf, i32* %ebx.global-to-local, align 4
  ret i32 %v15_1000bedd

dec_label_pc_1000bee4:                            ; preds = %dec_label_pc_1000beb2
  %v1_1000bee4 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000bee4 = add i32 %v0_1000bee4, 24
  %v4_1000bee4 = add i32 %v3_1000bee4, %v1_1000bee4
  %v5_1000bee4 = inttoptr i32 %v4_1000bee4 to i8*
  %v6_1000bee4 = load i8, i8* %v5_1000bee4, align 1
  %v7_1000bee4 = zext i8 %v6_1000bee4 to i32
  %v2_1000bee9 = mul nuw nsw i32 %v7_1000bee4, 8
  %v3_1000bee9 = add i32 %v1_1000bee4, 280
  %v4_1000bee9 = add i32 %v3_1000bee9, %v2_1000bee9
  %v5_1000bee9 = inttoptr i32 %v4_1000bee9 to i32*
  %v6_1000bee9 = load i32, i32* %v5_1000bee9, align 4
  store i32 %v6_1000bee9, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v2_1000bef3 = inttoptr i32 %arg2 to i32*
  store i32 %v6_1000bee9, i32* %v2_1000bef3, align 4
  %v0_1000bef5 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000bef5 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000bef5 = add i32 %v0_1000bef5, 24
  %v4_1000bef5 = add i32 %v3_1000bef5, %v1_1000bef5
  %v5_1000bef5 = inttoptr i32 %v4_1000bef5 to i8*
  %v6_1000bef5 = load i8, i8* %v5_1000bef5, align 1
  %v7_1000bef5 = zext i8 %v6_1000bef5 to i32
  %v8_1000bef5 = load i32, i32* %eax.global-to-local, align 4
  %v9_1000bef5 = and i32 %v8_1000bef5, -256
  %v10_1000bef5 = or i32 %v9_1000bef5, %v7_1000bef5
  store i32 %v10_1000bef5, i32* %eax.global-to-local, align 4
  %v0_1000bef9 = load i32, i32* @esp, align 4
  %v1_1000bef9 = inttoptr i32 %v0_1000bef9 to i32*
  %v2_1000bef9 = load i32, i32* %v1_1000bef9, align 4
  store i32 %v2_1000bef9, i32* %edi.global-to-local, align 4
  %v3_1000bef9 = add i32 %v0_1000bef9, 4
  %v1_1000befa = inttoptr i32 %v3_1000bef9 to i32*
  %v2_1000befa = load i32, i32* %v1_1000befa, align 4
  store i32 %v2_1000befa, i32* %esi.global-to-local, align 4
  %v3_1000befa = add i32 %v0_1000bef9, 8
  %v1_1000befb = inttoptr i32 %v3_1000befa to i32*
  %v2_1000befb = load i32, i32* %v1_1000befb, align 4
  store i32 %v2_1000befb, i32* %ebx.global-to-local, align 4
  ret i32 %v10_1000bef5
}

define i32 @function_1000bf00(i32 %arg1) {
dec_label_pc_1000bf00:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %v0_1000bf00 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000bf06 = inttoptr i32 %arg1 to i32*
  store i32 0, i32* %v1_1000bf06, align 4
  %v11_1000bf0c = load i32, i32* %eax.global-to-local, align 4
  %v12_1000bf0c = and i32 %v11_1000bf0c, -256
  store i32 %v12_1000bf0c, i32* %eax.global-to-local, align 4
  store i32 %v0_1000bf00, i32* %ebp.global-to-local, align 4
  ret i32 %v12_1000bf0c
}

define i32 @function_1000bf20(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000bf20:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000bf20 = load i32, i32* @ebp, align 4
  store i32 %v0_1000bf20, i32* %stack_var_-4, align 4
  %v0_1000bf23 = load i32, i32* @esi, align 4
  store i32 %v0_1000bf23, i32* %stack_var_-8, align 4
  %v0_1000bf24 = load i32, i32* @ecx, align 4
  %v1_1000bf26 = add i32 %v0_1000bf24, 20
  %v2_1000bf26 = inttoptr i32 %v1_1000bf26 to i8*
  %v3_1000bf26 = load i8, i8* %v2_1000bf26, align 1
  %v4_1000bf26 = zext i8 %v3_1000bf26 to i32
  %v6_1000bf26 = and i32 %v0_1000bf24, -256
  %v7_1000bf26 = or i32 %v4_1000bf26, %v6_1000bf26
  store i32 %v7_1000bf26, i32* @ecx, align 4
  %v2_1000bf29 = and i8 %v3_1000bf26, 2
  %v3_1000bf29 = icmp eq i8 %v2_1000bf29, 0
  %v1_1000bf2c = icmp eq i1 %v3_1000bf29, false
  br i1 %v1_1000bf2c, label %dec_label_pc_1000bf44, label %dec_label_pc_1000bf2e

dec_label_pc_1000bf2e:                            ; preds = %dec_label_pc_1000bf20
  %v1_1000bf2e = add i32 %v0_1000bf24, 12
  %v2_1000bf2e = inttoptr i32 %v1_1000bf2e to i32*
  %v3_1000bf2e = load i32, i32* %v2_1000bf2e, align 4
  store i32 %v3_1000bf2e, i32* @eax, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_1000bf34 = load i32, i32* @edi, align 4
  store i32 %v0_1000bf34, i32* %stack_var_-12, align 4
  %v3_1000bf35 = add i32 %v3_1000bf2e, %arg1
  %v1_1000bf38 = add i32 %v0_1000bf24, 28
  %v2_1000bf38 = inttoptr i32 %v1_1000bf38 to i32*
  %v3_1000bf38 = load i32, i32* %v2_1000bf38, align 4
  store i32 %v0_1000bf34, i32* @edi, align 4
  %v5_1000bf3c = icmp slt i32 %v3_1000bf38, %v3_1000bf35
  br i1 %v5_1000bf3c, label %dec_label_pc_1000bf3e, label %dec_label_pc_1000bf4b

dec_label_pc_1000bf3e:                            ; preds = %dec_label_pc_1000bf2e
  %v2_1000bf3e = or i8 %v3_1000bf26, 2
  %v8_1000bf3e = zext i8 %v2_1000bf3e to i32
  %v11_1000bf3e = or i32 %v8_1000bf3e, %v6_1000bf26
  store i32 %v11_1000bf3e, i32* @ecx, align 4
  store i8 %v2_1000bf3e, i8* %v2_1000bf26, align 1
  %v2_1000bf46.pre = load i32, i32* %stack_var_-8, align 4
  %v2_1000bf47.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000bf44

dec_label_pc_1000bf44:                            ; preds = %dec_label_pc_1000bf3e, %dec_label_pc_1000bf20
  %v2_1000bf47 = phi i32 [ %v2_1000bf47.pre, %dec_label_pc_1000bf3e ], [ %v0_1000bf20, %dec_label_pc_1000bf20 ]
  %v2_1000bf46 = phi i32 [ %v2_1000bf46.pre, %dec_label_pc_1000bf3e ], [ %v0_1000bf23, %dec_label_pc_1000bf20 ]
  %v11_1000bf44 = load i32, i32* @eax, align 4
  %v12_1000bf44 = and i32 %v11_1000bf44, -256
  store i32 %v12_1000bf44, i32* %eax.global-to-local, align 4
  store i32 %v2_1000bf46, i32* @esi, align 4
  store i32 %v2_1000bf47, i32* @ebp, align 4
  ret i32 %v12_1000bf44

dec_label_pc_1000bf4b:                            ; preds = %dec_label_pc_1000bf2e
  %v1_1000bf4b = add i32 %v0_1000bf24, 32
  %v2_1000bf4b = inttoptr i32 %v1_1000bf4b to i32*
  %v3_1000bf4b = load i32, i32* %v2_1000bf4b, align 4
  store i32 %v3_1000bf4b, i32* @ecx, align 4
  %v5_1000bf50 = icmp slt i32 %v3_1000bf2e, %v3_1000bf4b
  br i1 %v5_1000bf50, label %dec_label_pc_1000bf5b, label %dec_label_pc_1000bf52

dec_label_pc_1000bf52:                            ; preds = %dec_label_pc_1000bf4b
  %v2_1000bf4e = sub i32 %v3_1000bf2e, %v3_1000bf4b
  %v2_1000bf54 = add i32 %v2_1000bf4e, %arg1
  store i32 %v2_1000bf54, i32* %eax.global-to-local, align 4
  %v1_1000bf56 = add i32 %v0_1000bf24, 4
  %v2_1000bf56 = inttoptr i32 %v1_1000bf56 to i32*
  %v3_1000bf56 = load i32, i32* %v2_1000bf56, align 4
  %v5_1000bf59 = icmp slt i32 %v3_1000bf56, %v2_1000bf54
  br i1 %v5_1000bf59, label %dec_label_pc_1000bf5b, label %dec_label_pc_1000bf70

dec_label_pc_1000bf5b:                            ; preds = %dec_label_pc_1000bf52, %dec_label_pc_1000bf4b
  %v1_1000bf5b = add i32 %v0_1000bf24, 36
  %v2_1000bf5b = inttoptr i32 %v1_1000bf5b to i32*
  %v3_1000bf5b = load i32, i32* %v2_1000bf5b, align 4
  store i32 %v3_1000bf5b, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  store i32 %v0_1000bf24, i32* @ecx, align 4
  %v4_1000bf63 = trunc i32 %v3_1000bf5b to i8
  %v5_1000bf63 = icmp eq i8 %v4_1000bf63, 0
  %v1_1000bf65 = icmp eq i1 %v5_1000bf63, false
  br i1 %v1_1000bf65, label %dec_label_pc_1000bf70, label %dec_label_pc_1000bf67

dec_label_pc_1000bf67:                            ; preds = %dec_label_pc_1000bf5b
  %v3_1000bf67 = load i8, i8* %v2_1000bf26, align 1
  %v4_1000bf67 = or i8 %v3_1000bf67, 2
  store i8 %v4_1000bf67, i8* %v2_1000bf26, align 1
  %v2_1000bf6b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000bf6b, i32* @esi, align 4
  %v2_1000bf6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000bf6c, i32* @ebp, align 4
  %v0_1000bf6d = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000bf6d

dec_label_pc_1000bf70:                            ; preds = %dec_label_pc_1000bf52, %dec_label_pc_1000bf5b
  %v0_1000bf72.in = phi i32* [ %stack_var_-8, %dec_label_pc_1000bf52 ], [ %stack_var_-12, %dec_label_pc_1000bf5b ]
  %v0_1000bf70 = phi i32 [ %v2_1000bf54, %dec_label_pc_1000bf52 ], [ %v3_1000bf5b, %dec_label_pc_1000bf5b ]
  %v0_1000bf72 = ptrtoint i32* %v0_1000bf72.in to i32
  %v1_1000bf70 = and i32 %v0_1000bf70, -256
  %v2_1000bf70 = or i32 %v1_1000bf70, 1
  store i32 %v2_1000bf70, i32* %eax.global-to-local, align 4
  %v2_1000bf72 = load i32, i32* %v0_1000bf72.in, align 4
  store i32 %v2_1000bf72, i32* @esi, align 4
  %v3_1000bf72 = add i32 %v0_1000bf72, 4
  %v1_1000bf73 = inttoptr i32 %v3_1000bf72 to i32*
  %v2_1000bf73 = load i32, i32* %v1_1000bf73, align 4
  store i32 %v2_1000bf73, i32* @ebp, align 4
  ret i32 %v2_1000bf70
}

define i32 @function_1000bf80(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1000bf80:
  %tmp = ptrtoint i32* %arg2 to i32
  %v0_1000bf80 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_1000bf86 = load i32, i32* @esi, align 4
  %v0_1000bf87 = load i32, i32* @ecx, align 4
  store i32 %v0_1000bf87, i32* @esi, align 4
  %v1_1000bf89 = add i32 %v0_1000bf87, 12
  %v2_1000bf89 = inttoptr i32 %v1_1000bf89 to i32*
  %v3_1000bf89 = load i32, i32* %v2_1000bf89, align 4
  store i32 %v3_1000bf89, i32* @ecx, align 4
  %v1_1000bf8c = add i32 %v0_1000bf87, 28
  %v2_1000bf8c = inttoptr i32 %v1_1000bf8c to i32*
  %v3_1000bf8c = load i32, i32* %v2_1000bf8c, align 4
  store i32 %v3_1000bf8c, i32* @eax, align 4
  %v3_1000bf90 = add i32 %v3_1000bf89, %arg1
  %v5_1000bf95 = icmp slt i32 %v3_1000bf90, %v3_1000bf8c
  br i1 %v5_1000bf95, label %dec_label_pc_1000bfa8, label %dec_label_pc_1000bf97

dec_label_pc_1000bf97:                            ; preds = %dec_label_pc_1000bf80
  store i32 0, i32* %arg2, align 4
  %v12_1000bfa1 = and i32 %tmp, -256
  store i32 %v0_1000bf86, i32* @esi, align 4
  store i32 %v0_1000bf80, i32* @ebp, align 4
  ret i32 %v12_1000bfa1

dec_label_pc_1000bfa8:                            ; preds = %dec_label_pc_1000bf80
  store i32 %tmp, i32* @edi, align 4
  %v2_1000bfac = load i32, i32* %arg2, align 4
  %v2_1000bfb0 = add i32 %v3_1000bf90, %v2_1000bfac
  %v7_1000bfb5 = icmp sgt i32 %v2_1000bfb0, %v3_1000bf8c
  br i1 %v7_1000bfb5, label %dec_label_pc_1000bfb7, label %dec_label_pc_1000bfbd

dec_label_pc_1000bfb7:                            ; preds = %dec_label_pc_1000bfa8
  %v2_1000bfb7 = sub i32 %v3_1000bf8c, %v3_1000bf89
  %v2_1000bfb9 = sub i32 %v2_1000bfb7, %arg1
  store i32 %v2_1000bfb9, i32* @eax, align 4
  store i32 %v2_1000bfb9, i32* %arg2, align 4
  %v0_1000bfbd.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000bfbd

dec_label_pc_1000bfbd:                            ; preds = %dec_label_pc_1000bfa8, %dec_label_pc_1000bfb7
  %v0_1000bfc8 = phi i32 [ %v0_1000bf87, %dec_label_pc_1000bfa8 ], [ %v0_1000bfbd.pre, %dec_label_pc_1000bfb7 ]
  %v1_1000bfbd = add i32 %v0_1000bfc8, 20
  %v2_1000bfbd = inttoptr i32 %v1_1000bfbd to i8*
  %v3_1000bfbd = load i8, i8* %v2_1000bfbd, align 1
  %v4_1000bfbd = and i8 %v3_1000bfbd, 2
  %v5_1000bfbd = icmp eq i8 %v4_1000bfbd, 0
  %v1_1000bfc1 = icmp eq i1 %v5_1000bfbd, false
  br i1 %v1_1000bfc1, label %dec_label_pc_1000bfd3, label %dec_label_pc_1000bfc3

dec_label_pc_1000bfc3:                            ; preds = %dec_label_pc_1000bfbd
  %v0_1000bfc3 = load i32, i32* @edi, align 4
  %v1_1000bfc3 = inttoptr i32 %v0_1000bfc3 to i32*
  %v2_1000bfc3 = load i32, i32* %v1_1000bfc3, align 4
  %v1_1000bfc5 = load i32, i32* @edx, align 4
  %v2_1000bfc5 = add i32 %v1_1000bfc5, %v2_1000bfc3
  store i32 %v0_1000bfc8, i32* @ecx, align 4
  %v1_1000bfca = call i32 @function_1000bf20(i32 %v2_1000bfc5)
  %v0_1000bfcf = load i32, i32* @esi, align 4
  %v1_1000bfcf = add i32 %v0_1000bfcf, 20
  %v2_1000bfcf = inttoptr i32 %v1_1000bfcf to i8*
  %v3_1000bfcf = load i8, i8* %v2_1000bfcf, align 1
  %v4_1000bfcf = and i8 %v3_1000bfcf, -3
  store i8 %v4_1000bfcf, i8* %v2_1000bfcf, align 1
  %v0_1000bfd3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000bfd3

dec_label_pc_1000bfd3:                            ; preds = %dec_label_pc_1000bfc3, %dec_label_pc_1000bfbd
  %v0_1000bfd3 = phi i32 [ %v0_1000bfd3.pre, %dec_label_pc_1000bfc3 ], [ %v0_1000bfc8, %dec_label_pc_1000bfbd ]
  %v1_1000bfd3 = add i32 %v0_1000bfd3, 28
  %v2_1000bfd3 = inttoptr i32 %v1_1000bfd3 to i32*
  %v3_1000bfd3 = load i32, i32* %v2_1000bfd3, align 4
  %v2_1000bfd6 = add i32 %v0_1000bfd3, 12
  %v3_1000bfd6 = inttoptr i32 %v2_1000bfd6 to i32*
  %v4_1000bfd6 = load i32, i32* %v3_1000bfd6, align 4
  %v5_1000bfd6 = sub i32 %v3_1000bfd3, %v4_1000bfd6
  %v1_1000bfd9 = load i32, i32* @edi, align 4
  %v2_1000bfd9 = inttoptr i32 %v1_1000bfd9 to i32*
  %v3_1000bfd9 = load i32, i32* %v2_1000bfd9, align 4
  %v5_1000bfdb = icmp slt i32 %v5_1000bfd6, %v3_1000bfd9
  br i1 %v5_1000bfdb, label %dec_label_pc_1000bfdd, label %dec_label_pc_1000bfdf

dec_label_pc_1000bfdd:                            ; preds = %dec_label_pc_1000bfd3
  store i32 %v5_1000bfd6, i32* %v2_1000bfd9, align 4
  %v0_1000bfe1.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000bfdf

dec_label_pc_1000bfdf:                            ; preds = %dec_label_pc_1000bfd3, %dec_label_pc_1000bfdd
  %v0_1000bfe1 = phi i32 [ %v1_1000bfd9, %dec_label_pc_1000bfd3 ], [ %v0_1000bfe1.pre, %dec_label_pc_1000bfdd ]
  %v1_1000bfe1 = inttoptr i32 %v0_1000bfe1 to i32*
  %v2_1000bfe1 = load i32, i32* %v1_1000bfe1, align 4
  %v14_1000bfe1 = icmp eq i32 %v2_1000bfe1, 0
  %v0_1000bfe3 = load i32, i32* @esp, align 4
  %v1_1000bfe3 = inttoptr i32 %v0_1000bfe3 to i32*
  %v2_1000bfe3 = load i32, i32* %v1_1000bfe3, align 4
  store i32 %v2_1000bfe3, i32* @edi, align 4
  %v3_1000bfe3 = add i32 %v0_1000bfe3, 4
  %v1_1000bfe4 = icmp eq i1 %v14_1000bfe1, false
  %v2_1000bfe4 = zext i1 %v1_1000bfe4 to i32
  %v1_1000bfe7 = inttoptr i32 %v3_1000bfe3 to i32*
  %v2_1000bfe7 = load i32, i32* %v1_1000bfe7, align 4
  store i32 %v2_1000bfe7, i32* @esi, align 4
  %v3_1000bfe7 = add i32 %v0_1000bfe3, 8
  %v1_1000bfe8 = inttoptr i32 %v3_1000bfe7 to i32*
  %v2_1000bfe8 = load i32, i32* %v1_1000bfe8, align 4
  store i32 %v2_1000bfe8, i32* @ebp, align 4
  ret i32 %v2_1000bfe4
}

define i32 @function_1000bff0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000bff0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000bff3 = load i32, i32* @esi, align 4
  store i32 %v0_1000bff3, i32* %stack_var_-8, align 4
  %v0_1000bff4 = load i32, i32* @ecx, align 4
  store i32 %v0_1000bff4, i32* @esi, align 4
  %v1_1000bff6 = add i32 %v0_1000bff4, 20
  %v2_1000bff6 = inttoptr i32 %v1_1000bff6 to i8*
  %v3_1000bff6 = load i8, i8* %v2_1000bff6, align 1
  %v4_1000bff6 = and i8 %v3_1000bff6, 2
  %v5_1000bff6 = icmp eq i8 %v4_1000bff6, 0
  %v0_1000bffa = load i32, i32* @edi, align 4
  store i32 %v0_1000bffa, i32* %stack_var_-12, align 4
  %v4_1000bffa = ptrtoint i32* %stack_var_-12 to i32
  %v1_1000bffb = icmp eq i1 %v5_1000bff6, false
  br i1 %v1_1000bffb, label %dec_label_pc_1000c013, label %dec_label_pc_1000bffd

dec_label_pc_1000bffd:                            ; preds = %dec_label_pc_1000bff0
  store i32 %arg2, i32* @edi, align 4
  %v2_1000c003 = add i32 %arg2, %arg1
  store i32 %v2_1000c003, i32* @eax, align 4
  store i32 %v2_1000c003, i32* %stack_var_-16, align 4
  %v1_1000c006 = call i32 @function_1000bf20(i32 %v2_1000c003)
  store i32 %v1_1000c006, i32* %eax.global-to-local, align 4
  %v0_1000c00b = load i32, i32* @esi, align 4
  %v1_1000c00b = add i32 %v0_1000c00b, 20
  %v2_1000c00b = inttoptr i32 %v1_1000c00b to i8*
  %v3_1000c00b = load i8, i8* %v2_1000c00b, align 1
  %v4_1000c00b = and i8 %v3_1000c00b, -3
  store i8 %v4_1000c00b, i8* %v2_1000c00b, align 1
  %v0_1000c00f = load i32, i32* %eax.global-to-local, align 4
  %v4_1000c00f = trunc i32 %v0_1000c00f to i8
  %v5_1000c00f = icmp eq i8 %v4_1000c00f, 0
  %v1_1000c011 = icmp eq i1 %v5_1000c00f, false
  br i1 %v1_1000c011, label %dec_label_pc_1000c01b, label %dec_label_pc_1000bffd.dec_label_pc_1000c013_crit_edge

dec_label_pc_1000bffd.dec_label_pc_1000c013_crit_edge: ; preds = %dec_label_pc_1000bffd
  %v0_1000c013.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c013

dec_label_pc_1000c013:                            ; preds = %dec_label_pc_1000bffd.dec_label_pc_1000c013_crit_edge, %dec_label_pc_1000bff0
  %v0_1000c013 = phi i32 [ %v0_1000c013.pre, %dec_label_pc_1000bffd.dec_label_pc_1000c013_crit_edge ], [ %v4_1000bffa, %dec_label_pc_1000bff0 ]
  %v1_1000c013 = inttoptr i32 %v0_1000c013 to i32*
  %v2_1000c013 = load i32, i32* %v1_1000c013, align 4
  store i32 %v2_1000c013, i32* @edi, align 4
  %v3_1000c013 = add i32 %v0_1000c013, 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000c016 = inttoptr i32 %v3_1000c013 to i32*
  %v2_1000c016 = load i32, i32* %v1_1000c016, align 4
  store i32 %v2_1000c016, i32* @esi, align 4
  %v3_1000c016 = add i32 %v0_1000c013, 8
  %v1_1000c017 = inttoptr i32 %v3_1000c016 to i32*
  %v2_1000c017 = load i32, i32* %v1_1000c017, align 4
  store i32 %v2_1000c017, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000c01b:                            ; preds = %dec_label_pc_1000bffd
  %v0_1000c01b = load i32, i32* @esi, align 4
  %v1_1000c01b = add i32 %v0_1000c01b, 12
  %v2_1000c01b = inttoptr i32 %v1_1000c01b to i32*
  %v3_1000c01b = load i32, i32* %v2_1000c01b, align 4
  store i32 %v3_1000c01b, i32* %eax.global-to-local, align 4
  %v2_1000c01e = add i32 %v0_1000c01b, 32
  %v3_1000c01e = inttoptr i32 %v2_1000c01e to i32*
  %v4_1000c01e = load i32, i32* %v3_1000c01e, align 4
  %v5_1000c01e = sub i32 %v3_1000c01b, %v4_1000c01e
  %v3_1000c021 = load i32, i32* @ecx, align 4
  %v4_1000c021 = add i32 %v3_1000c021, %v5_1000c01e
  %v1_1000c023 = load i32, i32* @edi, align 4
  %v2_1000c023 = add i32 %v1_1000c023, %v4_1000c021
  store i32 %v2_1000c023, i32* %eax.global-to-local, align 4
  %v2_1000c025 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000c025, i32* @edi, align 4
  %v2_1000c026 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000c026, i32* @esi, align 4
  %v2_1000c027 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000c027, i32* @ebp, align 4
  ret i32 %v2_1000c023
}

define i32 @function_1000c030(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000c030:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c030 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c030, i32* %stack_var_-4, align 4
  %v7_1000c036 = icmp eq i32 %arg1, 0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  br i1 %v7_1000c036, label %dec_label_pc_1000c030.dec_label_pc_1000c054_crit_edge, label %dec_label_pc_1000c03b

dec_label_pc_1000c030.dec_label_pc_1000c054_crit_edge: ; preds = %dec_label_pc_1000c030
  %v1_1000c054.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000c054

dec_label_pc_1000c03b:                            ; preds = %dec_label_pc_1000c030
  %v1_1000c03b = add i32 %arg1, -1
  %v9_1000c03b = icmp eq i32 %v1_1000c03b, 0
  store i32 %v1_1000c03b, i32* %eax.global-to-local, align 4
  br i1 %v9_1000c03b, label %dec_label_pc_1000c049, label %dec_label_pc_1000c03e

dec_label_pc_1000c03e:                            ; preds = %dec_label_pc_1000c03b
  %v1_1000c03e = add i32 %arg1, -2
  %v9_1000c03e = icmp eq i32 %v1_1000c03e, 0
  store i32 %v1_1000c03e, i32* %eax.global-to-local, align 4
  %v1_1000c03f = icmp eq i1 %v9_1000c03e, false
  br i1 %v1_1000c03f, label %dec_label_pc_1000c057, label %dec_label_pc_1000c041

dec_label_pc_1000c041:                            ; preds = %dec_label_pc_1000c03e
  %v0_1000c041 = load i32, i32* @ecx, align 4
  %v1_1000c041 = add i32 %v0_1000c041, 28
  %v2_1000c041 = inttoptr i32 %v1_1000c041 to i32*
  %v3_1000c041 = load i32, i32* %v2_1000c041, align 4
  store i32 %v3_1000c041, i32* %eax.global-to-local, align 4
  %v5_1000c044 = sub i32 %v3_1000c041, %arg2
  br label %dec_label_pc_1000c054

dec_label_pc_1000c049:                            ; preds = %dec_label_pc_1000c03b
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v0_1000c04c = load i32, i32* @ecx, align 4
  %v1_1000c04c = add i32 %v0_1000c04c, 12
  %v2_1000c04c = inttoptr i32 %v1_1000c04c to i32*
  %v3_1000c04c = load i32, i32* %v2_1000c04c, align 4
  %v5_1000c04c = add i32 %v3_1000c04c, %arg2
  store i32 %v5_1000c04c, i32* %v2_1000c04c, align 4
  br label %dec_label_pc_1000c057

dec_label_pc_1000c054:                            ; preds = %dec_label_pc_1000c030.dec_label_pc_1000c054_crit_edge, %dec_label_pc_1000c041
  %v1_1000c054 = phi i32 [ %v0_1000c041, %dec_label_pc_1000c041 ], [ %v1_1000c054.pre, %dec_label_pc_1000c030.dec_label_pc_1000c054_crit_edge ]
  %storemerge = phi i32 [ %v5_1000c044, %dec_label_pc_1000c041 ], [ %arg2, %dec_label_pc_1000c030.dec_label_pc_1000c054_crit_edge ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_1000c054 = add i32 %v1_1000c054, 12
  %v3_1000c054 = inttoptr i32 %v2_1000c054 to i32*
  store i32 %storemerge, i32* %v3_1000c054, align 4
  br label %dec_label_pc_1000c057

dec_label_pc_1000c057:                            ; preds = %dec_label_pc_1000c054, %dec_label_pc_1000c049, %dec_label_pc_1000c03e
  %v0_1000c057 = load i32, i32* @ecx, align 4
  %v1_1000c057 = add i32 %v0_1000c057, 12
  %v2_1000c057 = inttoptr i32 %v1_1000c057 to i32*
  %v3_1000c057 = load i32, i32* %v2_1000c057, align 4
  store i32 %v3_1000c057, i32* %eax.global-to-local, align 4
  %v2_1000c05a = add i32 %v0_1000c057, 28
  %v3_1000c05a = inttoptr i32 %v2_1000c05a to i32*
  %v4_1000c05a = load i32, i32* %v3_1000c05a, align 4
  %v7_1000c05d = icmp sgt i32 %v3_1000c057, %v4_1000c05a
  br i1 %v7_1000c05d, label %dec_label_pc_1000c05f, label %dec_label_pc_1000c067

dec_label_pc_1000c05f:                            ; preds = %dec_label_pc_1000c057
  %v1_1000c05f = add i32 %v0_1000c057, 20
  %v2_1000c05f = inttoptr i32 %v1_1000c05f to i8*
  %v3_1000c05f = load i8, i8* %v2_1000c05f, align 1
  %v4_1000c05f = or i8 %v3_1000c05f, 2
  store i8 %v4_1000c05f, i8* %v2_1000c05f, align 1
  %v2_1000c063 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c063, i32* @ebp, align 4
  %v0_1000c064 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c064

dec_label_pc_1000c067:                            ; preds = %dec_label_pc_1000c057
  %v1_1000c067 = add i32 %v0_1000c057, 32
  %v2_1000c067 = inttoptr i32 %v1_1000c067 to i32*
  %v3_1000c067 = load i32, i32* %v2_1000c067, align 4
  store i32 %v3_1000c067, i32* %edx.global-to-local, align 4
  %v1_1000c06a = add i32 %v0_1000c057, 20
  %v2_1000c06a = inttoptr i32 %v1_1000c06a to i8*
  %v3_1000c06a = load i8, i8* %v2_1000c06a, align 1
  %v4_1000c06a = and i8 %v3_1000c06a, -3
  store i8 %v4_1000c06a, i8* %v2_1000c06a, align 1
  %v0_1000c06e = load i32, i32* %eax.global-to-local, align 4
  %v1_1000c06e = load i32, i32* %edx.global-to-local, align 4
  %v5_1000c070 = icmp slt i32 %v0_1000c06e, %v1_1000c06e
  br i1 %v5_1000c070, label %dec_label_pc_1000c067.dec_label_pc_1000c07d_crit_edge, label %dec_label_pc_1000c072

dec_label_pc_1000c067.dec_label_pc_1000c07d_crit_edge: ; preds = %dec_label_pc_1000c067
  %v0_1000c07d.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000c07d

dec_label_pc_1000c072:                            ; preds = %dec_label_pc_1000c067
  %v0_1000c072 = load i32, i32* @esi, align 4
  store i32 %v0_1000c072, i32* %stack_var_-8, align 4
  %v0_1000c073 = load i32, i32* @ecx, align 4
  %v1_1000c073 = add i32 %v0_1000c073, 4
  %v2_1000c073 = inttoptr i32 %v1_1000c073 to i32*
  %v3_1000c073 = load i32, i32* %v2_1000c073, align 4
  %v2_1000c076 = add i32 %v3_1000c073, %v1_1000c06e
  %v5_1000c07b = icmp slt i32 %v0_1000c06e, %v2_1000c076
  br i1 %v5_1000c07b, label %dec_label_pc_1000c084, label %dec_label_pc_1000c07d

dec_label_pc_1000c07d:                            ; preds = %dec_label_pc_1000c067.dec_label_pc_1000c07d_crit_edge, %dec_label_pc_1000c072
  %v0_1000c07d = phi i32 [ %v0_1000c07d.pre, %dec_label_pc_1000c067.dec_label_pc_1000c07d_crit_edge ], [ %v0_1000c073, %dec_label_pc_1000c072 ]
  %v1_1000c07d = add i32 %v0_1000c07d, 36
  %v2_1000c07d = inttoptr i32 %v1_1000c07d to i32*
  %v3_1000c07d = load i32, i32* %v2_1000c07d, align 4
  store i32 %v3_1000c07d, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1000c084

dec_label_pc_1000c084:                            ; preds = %dec_label_pc_1000c07d, %dec_label_pc_1000c072
  %v0_1000c084.in = phi i32* [ %stack_var_-8, %dec_label_pc_1000c07d ], [ %stack_var_-4, %dec_label_pc_1000c072 ]
  %v2_1000c084 = load i32, i32* %v0_1000c084.in, align 4
  store i32 %v2_1000c084, i32* @ebp, align 4
  ret i32 %v0_1000c06e
}

define i32 @function_1000c090(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000c090:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000c093 = load i32, i32* @esi, align 4
  store i32 %v0_1000c093, i32* %stack_var_-8, align 4
  %v4_1000c093 = ptrtoint i32* %stack_var_-8 to i32
  %v0_1000c094 = load i32, i32* @ecx, align 4
  %v1_1000c096 = add i32 %v0_1000c094, 20
  %v2_1000c096 = inttoptr i32 %v1_1000c096 to i8*
  %v3_1000c096 = load i8, i8* %v2_1000c096, align 1
  %v4_1000c096 = and i8 %v3_1000c096, 1
  %v5_1000c096 = icmp eq i8 %v4_1000c096, 0
  %v1_1000c09a = icmp eq i1 %v5_1000c096, false
  br i1 %v1_1000c09a, label %dec_label_pc_1000c0c8, label %dec_label_pc_1000c09c

dec_label_pc_1000c09c:                            ; preds = %dec_label_pc_1000c090
  %v1_1000c09c = add i32 %v0_1000c094, 21
  %v2_1000c09c = inttoptr i32 %v1_1000c09c to i8*
  %v3_1000c09c = load i8, i8* %v2_1000c09c, align 1
  %v4_1000c09c = and i8 %v3_1000c09c, 8
  %v5_1000c09c = icmp eq i8 %v4_1000c09c, 0
  %v1_1000c0a0 = icmp eq i1 %v5_1000c09c, false
  br i1 %v1_1000c0a0, label %dec_label_pc_1000c0c8, label %dec_label_pc_1000c0a2

dec_label_pc_1000c0a2:                            ; preds = %dec_label_pc_1000c09c
  %v1_1000c0a2 = add i32 %v0_1000c094, 16
  %v2_1000c0a2 = inttoptr i32 %v1_1000c0a2 to i32*
  %v3_1000c0a2 = load i32, i32* %v2_1000c0a2, align 4
  %v1_1000c0a5 = add i32 %v0_1000c094, 32
  %v2_1000c0a5 = inttoptr i32 %v1_1000c0a5 to i32*
  %v3_1000c0a5 = load i32, i32* %v2_1000c0a5, align 4
  store i32 %v3_1000c0a5, i32* @ecx, align 4
  store i32 %arg1, i32* @edx, align 4
  %v5_1000c0ad = icmp slt i32 %v3_1000c0a2, %v3_1000c0a5
  br i1 %v5_1000c0ad, label %dec_label_pc_1000c0b8, label %dec_label_pc_1000c0af

dec_label_pc_1000c0af:                            ; preds = %dec_label_pc_1000c0a2
  %v2_1000c0ab = sub i32 %v3_1000c0a2, %v3_1000c0a5
  %v2_1000c0b1 = add i32 %v2_1000c0ab, %arg1
  %v1_1000c0b3 = add i32 %v0_1000c094, 4
  %v2_1000c0b3 = inttoptr i32 %v1_1000c0b3 to i32*
  %v3_1000c0b3 = load i32, i32* %v2_1000c0b3, align 4
  %v5_1000c0b6 = icmp slt i32 %v3_1000c0b3, %v2_1000c0b1
  br i1 %v5_1000c0b6, label %dec_label_pc_1000c0b8, label %dec_label_pc_1000c0cf

dec_label_pc_1000c0b8:                            ; preds = %dec_label_pc_1000c0af, %dec_label_pc_1000c0a2
  %v1_1000c0b8 = add i32 %v0_1000c094, 40
  %v2_1000c0b8 = inttoptr i32 %v1_1000c0b8 to i32*
  %v3_1000c0b8 = load i32, i32* %v2_1000c0b8, align 4
  store i32 %v3_1000c0b8, i32* @eax, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v4_1000c0bb = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v0_1000c094, i32* @ecx, align 4
  %v4_1000c0c0 = trunc i32 %v3_1000c0b8 to i8
  %v5_1000c0c0 = icmp eq i8 %v4_1000c0c0, 0
  %v1_1000c0c2 = icmp eq i1 %v5_1000c0c0, false
  br i1 %v1_1000c0c2, label %dec_label_pc_1000c0cf, label %dec_label_pc_1000c0c4

dec_label_pc_1000c0c4:                            ; preds = %dec_label_pc_1000c0b8
  %v3_1000c0c4 = load i8, i8* %v2_1000c096, align 1
  %v4_1000c0c4 = or i8 %v3_1000c0c4, 1
  store i8 %v4_1000c0c4, i8* %v2_1000c096, align 1
  %v0_1000c0ca.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c0c8

dec_label_pc_1000c0c8:                            ; preds = %dec_label_pc_1000c0c4, %dec_label_pc_1000c09c, %dec_label_pc_1000c090
  %v0_1000c0ca = phi i32 [ %v0_1000c0ca.pre, %dec_label_pc_1000c0c4 ], [ %v4_1000c093, %dec_label_pc_1000c09c ], [ %v4_1000c093, %dec_label_pc_1000c090 ]
  %v11_1000c0c8 = load i32, i32* @eax, align 4
  %v12_1000c0c8 = and i32 %v11_1000c0c8, -256
  %v1_1000c0ca = inttoptr i32 %v0_1000c0ca to i32*
  %v2_1000c0ca = load i32, i32* %v1_1000c0ca, align 4
  store i32 %v2_1000c0ca, i32* @esi, align 4
  %v3_1000c0ca = add i32 %v0_1000c0ca, 4
  %v1_1000c0cb = inttoptr i32 %v3_1000c0ca to i32*
  %v2_1000c0cb = load i32, i32* %v1_1000c0cb, align 4
  store i32 %v2_1000c0cb, i32* @ebp, align 4
  ret i32 %v12_1000c0c8

dec_label_pc_1000c0cf:                            ; preds = %dec_label_pc_1000c0af, %dec_label_pc_1000c0b8
  %v0_1000c0d1 = phi i32 [ %v4_1000c093, %dec_label_pc_1000c0af ], [ %v4_1000c0bb, %dec_label_pc_1000c0b8 ]
  %v0_1000c0cf = phi i32 [ %v2_1000c0b1, %dec_label_pc_1000c0af ], [ %v3_1000c0b8, %dec_label_pc_1000c0b8 ]
  %v1_1000c0cf = and i32 %v0_1000c0cf, -256
  %v2_1000c0cf = or i32 %v1_1000c0cf, 1
  %v1_1000c0d1 = inttoptr i32 %v0_1000c0d1 to i32*
  %v2_1000c0d1 = load i32, i32* %v1_1000c0d1, align 4
  store i32 %v2_1000c0d1, i32* @esi, align 4
  %v3_1000c0d1 = add i32 %v0_1000c0d1, 4
  %v1_1000c0d2 = inttoptr i32 %v3_1000c0d1 to i32*
  %v2_1000c0d2 = load i32, i32* %v1_1000c0d2, align 4
  store i32 %v2_1000c0d2, i32* @ebp, align 4
  ret i32 %v2_1000c0cf
}

define i32 @function_1000c0e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000c0e0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000c0e3 = load i32, i32* @esi, align 4
  %v0_1000c0e4 = load i32, i32* @edi, align 4
  store i32 %v0_1000c0e4, i32* %stack_var_-12, align 4
  %v4_1000c0e4 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_1000c0e8 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c0e8, i32* @esi, align 4
  %v2_1000c0ea = add i32 %v0_1000c0e8, 28
  %v3_1000c0ea = inttoptr i32 %v2_1000c0ea to i32*
  %v4_1000c0ea = load i32, i32* %v3_1000c0ea, align 4
  %v7_1000c0ed = icmp slt i32 %v4_1000c0ea, %arg1
  br i1 %v7_1000c0ed, label %dec_label_pc_1000c0ef, label %dec_label_pc_1000c11f

dec_label_pc_1000c0ef:                            ; preds = %dec_label_pc_1000c0e0
  %v1_1000c0ef = add i32 %v0_1000c0e8, 21
  %v2_1000c0ef = inttoptr i32 %v1_1000c0ef to i8*
  %v3_1000c0ef = load i8, i8* %v2_1000c0ef, align 1
  %v4_1000c0ef = and i8 %v3_1000c0ef, 8
  %v5_1000c0ef = icmp eq i8 %v4_1000c0ef, 0
  %v1_1000c0f3 = icmp eq i1 %v5_1000c0ef, false
  br i1 %v1_1000c0f3, label %dec_label_pc_1000c11c, label %dec_label_pc_1000c0f5

dec_label_pc_1000c0f5:                            ; preds = %dec_label_pc_1000c0ef
  %v1_1000c0f5 = add i32 %v0_1000c0e8, 20
  %v2_1000c0f5 = inttoptr i32 %v1_1000c0f5 to i8*
  %v3_1000c0f5 = load i8, i8* %v2_1000c0f5, align 1
  %v4_1000c0f5 = and i8 %v3_1000c0f5, 1
  %v5_1000c0f5 = icmp eq i8 %v4_1000c0f5, 0
  %v1_1000c0f9 = icmp eq i1 %v5_1000c0f5, false
  br i1 %v1_1000c0f9, label %dec_label_pc_1000c11c, label %dec_label_pc_1000c0fb

dec_label_pc_1000c0fb:                            ; preds = %dec_label_pc_1000c0f5
  store i32 1, i32* %stack_var_-16, align 4
  %v1_1000c0fd = call i32 @function_1000c090(i32 1)
  store i32 %v1_1000c0fd, i32* @eax, align 4
  %v4_1000c102 = trunc i32 %v1_1000c0fd to i8
  %v5_1000c102 = icmp eq i8 %v4_1000c102, 0
  br i1 %v5_1000c102, label %dec_label_pc_1000c118, label %dec_label_pc_1000c106

dec_label_pc_1000c106:                            ; preds = %dec_label_pc_1000c0fb
  %v2_1000c106 = load i32, i32* @ecx, align 4
  store i32 %v2_1000c106, i32* %eax.global-to-local, align 4
  %v1_1000c108 = load i32, i32* @esi, align 4
  %v2_1000c108 = add i32 %v1_1000c108, 32
  %v3_1000c108 = inttoptr i32 %v2_1000c108 to i32*
  %v4_1000c108 = load i32, i32* %v3_1000c108, align 4
  %v5_1000c108 = sub i32 %v2_1000c106, %v4_1000c108
  store i32 %v5_1000c108, i32* %eax.global-to-local, align 4
  %v1_1000c10b = load i32, i32* %edi.global-to-local, align 4
  %v3_1000c10b = add i32 %v1_1000c10b, %v5_1000c108
  %v4_1000c10b = inttoptr i32 %v3_1000c10b to i8*
  store i8 0, i8* %v4_1000c10b, align 1
  %v0_1000c10f = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c10f = load i32, i32* @esi, align 4
  %v2_1000c10f = add i32 %v1_1000c10f, 28
  %v3_1000c10f = inttoptr i32 %v2_1000c10f to i32*
  store i32 %v0_1000c10f, i32* %v3_1000c10f, align 4
  %v2_1000c112 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000c112, i32* @edi, align 4
  %v2_1000c113 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000c113, i32* @esi, align 4
  store i32 %v0_1000c0e3, i32* @ebp, align 4
  %v0_1000c115 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c115

dec_label_pc_1000c118:                            ; preds = %dec_label_pc_1000c0fb
  %v0_1000c118 = load i32, i32* @esi, align 4
  %v1_1000c118 = add i32 %v0_1000c118, 20
  %v2_1000c118 = inttoptr i32 %v1_1000c118 to i8*
  %v3_1000c118 = load i8, i8* %v2_1000c118, align 1
  %v4_1000c118 = and i8 %v3_1000c118, -2
  store i8 %v4_1000c118, i8* %v2_1000c118, align 1
  %v0_1000c11c.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c11c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c11c

dec_label_pc_1000c11c:                            ; preds = %dec_label_pc_1000c118, %dec_label_pc_1000c0f5, %dec_label_pc_1000c0ef
  %v1_1000c11c = phi i32 [ %v1_1000c11c.pre, %dec_label_pc_1000c118 ], [ %v0_1000c0e8, %dec_label_pc_1000c0f5 ], [ %v0_1000c0e8, %dec_label_pc_1000c0ef ]
  %v0_1000c11c = phi i32 [ %v0_1000c11c.pre, %dec_label_pc_1000c118 ], [ %arg1, %dec_label_pc_1000c0f5 ], [ %arg1, %dec_label_pc_1000c0ef ]
  %v2_1000c11c = add i32 %v1_1000c11c, 28
  %v3_1000c11c = inttoptr i32 %v2_1000c11c to i32*
  store i32 %v0_1000c11c, i32* %v3_1000c11c, align 4
  %v0_1000c11f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c11f

dec_label_pc_1000c11f:                            ; preds = %dec_label_pc_1000c0e0, %dec_label_pc_1000c11c
  %v0_1000c11f = phi i32 [ %v4_1000c0e4, %dec_label_pc_1000c0e0 ], [ %v0_1000c11f.pre, %dec_label_pc_1000c11c ]
  %v1_1000c11f = inttoptr i32 %v0_1000c11f to i32*
  %v2_1000c11f = load i32, i32* %v1_1000c11f, align 4
  store i32 %v2_1000c11f, i32* @edi, align 4
  %v3_1000c11f = add i32 %v0_1000c11f, 4
  %v1_1000c120 = inttoptr i32 %v3_1000c11f to i32*
  %v2_1000c120 = load i32, i32* %v1_1000c120, align 4
  store i32 %v2_1000c120, i32* @esi, align 4
  %v3_1000c120 = add i32 %v0_1000c11f, 8
  %v1_1000c121 = inttoptr i32 %v3_1000c120 to i32*
  %v2_1000c121 = load i32, i32* %v1_1000c121, align 4
  store i32 %v2_1000c121, i32* @ebp, align 4
  %v0_1000c122 = load i32, i32* @eax, align 4
  ret i32 %v0_1000c122
}

define i32 @function_1000c130(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000c130:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c130 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c130, i32* %stack_var_-4, align 4
  %v0_1000c133 = load i32, i32* @esi, align 4
  store i32 %v0_1000c133, i32* %stack_var_-8, align 4
  %v0_1000c134 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c134, i32* %esi.global-to-local, align 4
  %v1_1000c136 = add i32 %v0_1000c134, 8
  %v2_1000c136 = inttoptr i32 %v1_1000c136 to i32*
  %v3_1000c136 = load i32, i32* %v2_1000c136, align 4
  %v11_1000c136 = icmp slt i32 %v3_1000c136, 0
  %v2_1000c13a = icmp eq i1 %v11_1000c136, false
  br i1 %v2_1000c13a, label %dec_label_pc_1000c17a, label %dec_label_pc_1000c13c

dec_label_pc_1000c13c:                            ; preds = %dec_label_pc_1000c130
  store i32 %arg1, i32* @eax, align 4
  %v0_1000c13f = load i32, i32* @edi, align 4
  store i32 %v0_1000c13f, i32* %stack_var_-12, align 4
  %v1_1000c140 = add i32 %v0_1000c134, 4
  %v2_1000c140 = inttoptr i32 %v1_1000c140 to i32*
  %v3_1000c140 = load i32, i32* %v2_1000c140, align 4
  store i32 %arg1, i32* %v2_1000c136, align 4
  %v1_1000c146 = icmp eq i32 %v3_1000c140, 0
  br i1 %v1_1000c146, label %dec_label_pc_1000c173, label %dec_label_pc_1000c14a

dec_label_pc_1000c14a:                            ; preds = %dec_label_pc_1000c13c
  %v0_1000c14a = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000c14a, i32* @ecx, align 4
  %v1_1000c150 = inttoptr i32 %v0_1000c14a to i32*
  %v2_1000c150 = load i32, i32* %v1_1000c150, align 4
  store i32 %v2_1000c150, i32* @ecx, align 4
  %v1_1000c152 = inttoptr i32 %v2_1000c150 to i32*
  %v2_1000c152 = load i32, i32* %v1_1000c152, align 4
  %v1_1000c154 = add i32 %v2_1000c152, 4
  %v2_1000c154 = inttoptr i32 %v1_1000c154 to i32*
  %v3_1000c154 = load i32, i32* %v2_1000c154, align 4
  store i32 %v3_1000c154, i32* %eax.global-to-local, align 4
  %v0_1000c157 = load i32, i32* @ebx, align 4
  %v0_1000c162 = call i32 @_memcpy.1()
  store i32 %v0_1000c162, i32* %eax.global-to-local, align 4
  %v1_1000c16a = load i32, i32* %esi.global-to-local, align 4
  %v2_1000c16a = inttoptr i32 %v1_1000c16a to i32*
  store i32 %v3_1000c154, i32* %v2_1000c16a, align 4
  store i32 %v0_1000c157, i32* @edi, align 4
  %v2_1000c16e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000c16e, i32* @esi, align 4
  %v2_1000c16f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000c16f, i32* @ebp, align 4
  %v0_1000c170 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c170

dec_label_pc_1000c173:                            ; preds = %dec_label_pc_1000c13c
  %v0_1000c173 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000c173 = inttoptr i32 %v0_1000c173 to i32*
  store i32 0, i32* %v1_1000c173, align 4
  %v2_1000c179 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000c179, i32* @edi, align 4
  %v2_1000c17a.pre = load i32, i32* %stack_var_-8, align 4
  %v2_1000c17b.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000c17a

dec_label_pc_1000c17a:                            ; preds = %dec_label_pc_1000c173, %dec_label_pc_1000c130
  %v2_1000c17b = phi i32 [ %v2_1000c17b.pre, %dec_label_pc_1000c173 ], [ %v0_1000c130, %dec_label_pc_1000c130 ]
  %v2_1000c17a = phi i32 [ %v2_1000c17a.pre, %dec_label_pc_1000c173 ], [ %v0_1000c133, %dec_label_pc_1000c130 ]
  store i32 %v2_1000c17a, i32* @esi, align 4
  store i32 %v2_1000c17b, i32* @ebp, align 4
  %v0_1000c17c = load i32, i32* @eax, align 4
  ret i32 %v0_1000c17c
}

define i32 @function_1000c180(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000c180:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000c184 = load i32, i32* @edi, align 4
  store i32 %v0_1000c184, i32* %stack_var_-12, align 4
  %v4_1000c184 = ptrtoint i32* %stack_var_-12 to i32
  %v0_1000c185 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c185, i32* %edi.global-to-local, align 4
  %v1_1000c187 = add i32 %v0_1000c185, 8
  %v2_1000c187 = inttoptr i32 %v1_1000c187 to i32*
  %v3_1000c187 = load i32, i32* %v2_1000c187, align 4
  %v4_1000c187 = sext i32 %v3_1000c187 to i64
  %v3_1000c18a = icmp slt i32 %v3_1000c187, 0
  br i1 %v3_1000c18a, label %dec_label_pc_1000c206, label %dec_label_pc_1000c18e

dec_label_pc_1000c18e:                            ; preds = %dec_label_pc_1000c180
  %v2_1000c18a = icmp eq i32 %v3_1000c187, 0
  %v1_1000c18e = add i32 %v0_1000c185, 4
  %v2_1000c18e = inttoptr i32 %v1_1000c18e to i32*
  %v3_1000c18e = load i32, i32* %v2_1000c18e, align 4
  store i32 %v3_1000c18e, i32* %eax.global-to-local, align 4
  %v2_1000c194 = add i32 %v3_1000c18e, %arg1
  %v12_1000c194 = icmp eq i32 %v2_1000c194, 0
  store i32 %v2_1000c194, i32* @ecx, align 4
  br i1 %v2_1000c18a, label %dec_label_pc_1000c1a6, label %dec_label_pc_1000c19a

dec_label_pc_1000c19a:                            ; preds = %dec_label_pc_1000c18e
  %v1_1000c19a = add i32 %v2_1000c194, -1
  %v1_1000c19d = ashr i32 %v1_1000c19a, 31
  %v3_1000c19e = zext i32 %v1_1000c19a to i64
  %v5_1000c19e = zext i32 %v1_1000c19d to i64
  %v6_1000c19e = mul nuw i64 %v5_1000c19e, 4294967296
  %v7_1000c19e = or i64 %v6_1000c19e, %v3_1000c19e
  %v9_1000c19e = sdiv i64 %v7_1000c19e, %v4_1000c187
  %v10_1000c19e = trunc i64 %v9_1000c19e to i32
  %v1_1000c1a0 = add i32 %v10_1000c19e, 1
  %v5_1000c1a1 = mul i32 %v1_1000c1a0, %v3_1000c187
  br label %dec_label_pc_1000c1b9

dec_label_pc_1000c1a6:                            ; preds = %dec_label_pc_1000c18e
  %v1_1000c1a6 = icmp eq i32 %v3_1000c18e, 0
  %v1_1000c1a8 = icmp eq i1 %v1_1000c1a6, false
  br i1 %v1_1000c1a8, label %dec_label_pc_1000c1af, label %dec_label_pc_1000c1aa

dec_label_pc_1000c1aa:                            ; preds = %dec_label_pc_1000c1a6
  store i32 32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c1af

dec_label_pc_1000c1af:                            ; preds = %dec_label_pc_1000c1aa, %dec_label_pc_1000c1a6
  %eax.promoted2 = phi i32 [ 32, %dec_label_pc_1000c1aa ], [ %v3_1000c18e, %dec_label_pc_1000c1a6 ]
  %v5_1000c1b1 = icmp slt i32 %eax.promoted2, %v2_1000c194
  br i1 %v5_1000c1b1, label %dec_label_pc_1000c1b3, label %dec_label_pc_1000c1db

dec_label_pc_1000c1b3:                            ; preds = %dec_label_pc_1000c1af, %dec_label_pc_1000c1b3
  %v2_1000c1b33 = phi i32 [ %v2_1000c1b3, %dec_label_pc_1000c1b3 ], [ %eax.promoted2, %dec_label_pc_1000c1af ]
  %v2_1000c1b3 = mul i32 %v2_1000c1b33, 2
  %v5_1000c1b7 = icmp slt i32 %v2_1000c1b3, %v2_1000c194
  br i1 %v5_1000c1b7, label %dec_label_pc_1000c1b3, label %dec_label_pc_1000c1b9.loopexit

dec_label_pc_1000c1b9.loopexit:                   ; preds = %dec_label_pc_1000c1b3
  br label %dec_label_pc_1000c1b9

dec_label_pc_1000c1b9:                            ; preds = %dec_label_pc_1000c1b9.loopexit, %dec_label_pc_1000c19a
  %eax.promoted = phi i32 [ %v2_1000c1b3, %dec_label_pc_1000c1b9.loopexit ], [ %v5_1000c1a1, %dec_label_pc_1000c19a ]
  %storemerge = phi i32 [ %v2_1000c1b3, %dec_label_pc_1000c1b9.loopexit ], [ %v5_1000c1a1, %dec_label_pc_1000c19a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v5_1000c1bb = icmp slt i32 %eax.promoted, %v2_1000c194
  br i1 %v5_1000c1bb, label %dec_label_pc_1000c1bd, label %dec_label_pc_1000c1db

dec_label_pc_1000c1bd:                            ; preds = %dec_label_pc_1000c1b9
  %v1_1000c1bd = icmp eq i32 %eax.promoted, 0
  %v1_1000c1bf = icmp eq i1 %v1_1000c1bd, false
  br i1 %v1_1000c1bf, label %dec_label_pc_1000c1d0, label %dec_label_pc_1000c1c1

dec_label_pc_1000c1c1:                            ; preds = %dec_label_pc_1000c1bd
  %v8_1000c1c4 = icmp sgt i32 %v2_1000c194, -1
  br i1 %v8_1000c1c4, label %dec_label_pc_1000c1d0, label %dec_label_pc_1000c1c6

dec_label_pc_1000c1c6:                            ; preds = %dec_label_pc_1000c1c1
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c1db

dec_label_pc_1000c1d0:                            ; preds = %dec_label_pc_1000c1c1, %dec_label_pc_1000c1bd, %dec_label_pc_1000c1d0
  %v2_1000c1d51 = phi i32 [ %v2_1000c1d5, %dec_label_pc_1000c1d0 ], [ %eax.promoted, %dec_label_pc_1000c1bd ], [ %eax.promoted, %dec_label_pc_1000c1c1 ]
  %v2_1000c1d0 = add i32 %v2_1000c1d51, %v2_1000c194
  %v1_1000c1d2 = ashr i32 %v2_1000c1d0, 31
  %v2_1000c1d3 = sub i32 %v2_1000c1d0, %v1_1000c1d2
  %v2_1000c1d5 = sdiv i32 %v2_1000c1d3, 2
  %v5_1000c1d9 = icmp slt i32 %v2_1000c1d5, %v2_1000c194
  br i1 %v5_1000c1d9, label %dec_label_pc_1000c1d0, label %dec_label_pc_1000c1db.loopexit

dec_label_pc_1000c1db.loopexit:                   ; preds = %dec_label_pc_1000c1d0
  store i32 %v2_1000c1d5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c1db

dec_label_pc_1000c1db:                            ; preds = %dec_label_pc_1000c1db.loopexit, %dec_label_pc_1000c1af, %dec_label_pc_1000c1b9, %dec_label_pc_1000c1c6
  %v0_1000c1dd = phi i32 [ %v2_1000c1d5, %dec_label_pc_1000c1db.loopexit ], [ %eax.promoted2, %dec_label_pc_1000c1af ], [ %eax.promoted, %dec_label_pc_1000c1b9 ], [ -1, %dec_label_pc_1000c1c6 ]
  store i32 %v0_1000c1dd, i32* %v2_1000c18e, align 4
  %v0_1000c1e0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000c1e0, i32* @ecx, align 4
  %v1_1000c1e6 = inttoptr i32 %v0_1000c1e0 to i32*
  %v2_1000c1e6 = load i32, i32* %v1_1000c1e6, align 4
  store i32 %v2_1000c1e6, i32* @ecx, align 4
  %v0_1000c1e8 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000c1e8, i32* %stack_var_-16, align 4
  %v1_1000c1fd = inttoptr i32 %v2_1000c1e6 to i32*
  %v2_1000c1fd = load i32, i32* %v1_1000c1fd, align 4
  br i1 %v12_1000c194, label %dec_label_pc_1000c1fd, label %dec_label_pc_1000c1ed

dec_label_pc_1000c1ed:                            ; preds = %dec_label_pc_1000c1db
  store i32 %v2_1000c194, i32* %stack_var_-20, align 4
  %v1_1000c1f0 = add i32 %v2_1000c1fd, 12
  %v2_1000c1f0 = inttoptr i32 %v1_1000c1f0 to i32*
  %v3_1000c1f0 = load i32, i32* %v2_1000c1f0, align 4
  store i32 %v3_1000c1f0, i32* @edx, align 4
  %v1_1000c1f5 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000c1f5 = inttoptr i32 %v1_1000c1f5 to i32*
  store i32 %v0_1000c1e8, i32* %v2_1000c1f5, align 4
  %v2_1000c1f7 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000c1f7, i32* @edi, align 4
  %v2_1000c1f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000c1f8, i32* @esi, align 4
  %v2_1000c1f9 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000c1f9, i32* @ebp, align 4
  %v0_1000c1fa = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c1fa

dec_label_pc_1000c1fd:                            ; preds = %dec_label_pc_1000c1db
  store i32 %v2_1000c1fd, i32* @edx, align 4
  %v1_1000c1ff = add i32 %v2_1000c1fd, 4
  %v2_1000c1ff = inttoptr i32 %v1_1000c1ff to i32*
  %v3_1000c1ff = load i32, i32* %v2_1000c1ff, align 4
  store i32 %v3_1000c1ff, i32* @eax, align 4
  %v1_1000c204 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000c204 = inttoptr i32 %v1_1000c204 to i32*
  store i32 %v3_1000c1ff, i32* %v2_1000c204, align 4
  %v0_1000c206.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c206

dec_label_pc_1000c206:                            ; preds = %dec_label_pc_1000c1fd, %dec_label_pc_1000c180
  %v0_1000c206 = phi i32 [ %v0_1000c206.pre, %dec_label_pc_1000c1fd ], [ %v4_1000c184, %dec_label_pc_1000c180 ]
  %v1_1000c206 = inttoptr i32 %v0_1000c206 to i32*
  %v2_1000c206 = load i32, i32* %v1_1000c206, align 4
  store i32 %v2_1000c206, i32* @edi, align 4
  %v3_1000c206 = add i32 %v0_1000c206, 4
  %v1_1000c207 = inttoptr i32 %v3_1000c206 to i32*
  %v2_1000c207 = load i32, i32* %v1_1000c207, align 4
  store i32 %v2_1000c207, i32* @esi, align 4
  %v3_1000c207 = add i32 %v0_1000c206, 8
  %v1_1000c208 = inttoptr i32 %v3_1000c207 to i32*
  %v2_1000c208 = load i32, i32* %v1_1000c208, align 4
  store i32 %v2_1000c208, i32* @ebp, align 4
  %v0_1000c209 = load i32, i32* @eax, align 4
  ret i32 %v0_1000c209
}

define i32 @function_1000c210() local_unnamed_addr {
dec_label_pc_1000c210:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c210 = load i32, i32* @esi, align 4
  store i32 %v0_1000c210, i32* %stack_var_-4, align 4
  %v4_1000c210 = ptrtoint i32* %stack_var_-4 to i32
  %v0_1000c211 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c211, i32* %esi.global-to-local, align 4
  %v1_1000c213 = add i32 %v0_1000c211, 21
  %v2_1000c213 = inttoptr i32 %v1_1000c213 to i8*
  %v3_1000c213 = load i8, i8* %v2_1000c213, align 1
  %v4_1000c213 = and i8 %v3_1000c213, 1
  %v5_1000c213 = icmp eq i8 %v4_1000c213, 0
  br i1 %v5_1000c213, label %dec_label_pc_1000c275, label %dec_label_pc_1000c219

dec_label_pc_1000c219:                            ; preds = %dec_label_pc_1000c210
  %v1_1000c219 = add i32 %v0_1000c211, 20
  %v2_1000c219 = inttoptr i32 %v1_1000c219 to i8*
  %v3_1000c219 = load i8, i8* %v2_1000c219, align 1
  %v10_1000c219 = icmp eq i8 %v3_1000c219, 0
  %v1_1000c21d = icmp eq i1 %v10_1000c219, false
  br i1 %v1_1000c21d, label %dec_label_pc_1000c275, label %dec_label_pc_1000c21f

dec_label_pc_1000c21f:                            ; preds = %dec_label_pc_1000c219
  %v0_1000c21f = load i32, i32* @ebx, align 4
  %v1_1000c220 = and i32 %v0_1000c21f, -256
  %v2_1000c220 = or i32 %v1_1000c220, 2
  store i32 %v2_1000c220, i32* %ebx.global-to-local, align 4
  %v3_1000c22226 = load i8, i8* %v2_1000c219, align 1
  %v6_1000c22227 = and i8 %v3_1000c22226, 2
  %v7_1000c22228 = icmp eq i8 %v6_1000c22227, 0
  %v1_1000c22532 = icmp eq i1 %v7_1000c22228, false
  br i1 %v1_1000c22532, label %dec_label_pc_1000c274, label %dec_label_pc_1000c227

dec_label_pc_1000c227:                            ; preds = %dec_label_pc_1000c21f, %dec_label_pc_1000c26b
  %v0_1000c24134 = phi i32 [ %v0_1000c222.pre, %dec_label_pc_1000c26b ], [ %v0_1000c211, %dec_label_pc_1000c21f ]
  %v4_1000c22233 = phi i32 [ %v4_1000c222.pre, %dec_label_pc_1000c26b ], [ %v2_1000c220, %dec_label_pc_1000c21f ]
  %v1_1000c227 = add i32 %v0_1000c24134, 12
  %v2_1000c227 = inttoptr i32 %v1_1000c227 to i32*
  %v3_1000c227 = load i32, i32* %v2_1000c227, align 4
  store i32 %v3_1000c227, i32* @eax, align 4
  %v1_1000c22a = add i32 %v3_1000c227, 1
  store i32 %v1_1000c22a, i32* @ecx, align 4
  %v1_1000c22d = add i32 %v0_1000c24134, 28
  %v2_1000c22d = inttoptr i32 %v1_1000c22d to i32*
  %v3_1000c22d = load i32, i32* %v2_1000c22d, align 4
  %v5_1000c230 = icmp slt i32 %v3_1000c22d, %v1_1000c22a
  br i1 %v5_1000c230, label %dec_label_pc_1000c271, label %dec_label_pc_1000c232

dec_label_pc_1000c232:                            ; preds = %dec_label_pc_1000c227
  %v1_1000c232 = add i32 %v0_1000c24134, 32
  %v2_1000c232 = inttoptr i32 %v1_1000c232 to i32*
  %v3_1000c232 = load i32, i32* %v2_1000c232, align 4
  store i32 %v3_1000c232, i32* @ecx, align 4
  %v5_1000c237 = icmp slt i32 %v3_1000c227, %v3_1000c232
  br i1 %v5_1000c237, label %dec_label_pc_1000c241, label %dec_label_pc_1000c239

dec_label_pc_1000c239:                            ; preds = %dec_label_pc_1000c232
  %v2_1000c235 = sub i32 %v3_1000c227, %v3_1000c232
  %v1_1000c23b = add i32 %v2_1000c235, 1
  store i32 %v1_1000c23b, i32* @eax, align 4
  %v1_1000c23c = add i32 %v0_1000c24134, 4
  %v2_1000c23c = inttoptr i32 %v1_1000c23c to i32*
  %v3_1000c23c = load i32, i32* %v2_1000c23c, align 4
  %v5_1000c23f = icmp slt i32 %v3_1000c23c, %v1_1000c23b
  br i1 %v5_1000c23f, label %dec_label_pc_1000c241, label %dec_label_pc_1000c24e

dec_label_pc_1000c241:                            ; preds = %dec_label_pc_1000c239, %dec_label_pc_1000c232
  %v1_1000c241 = add i32 %v0_1000c24134, 36
  %v2_1000c241 = inttoptr i32 %v1_1000c241 to i32*
  %v3_1000c241 = load i32, i32* %v2_1000c241, align 4
  store i32 %v3_1000c241, i32* @edx, align 4
  %v0_1000c244 = load i32, i32* @esp, align 4
  %v1_1000c244 = add i32 %v0_1000c244, -4
  %v2_1000c244 = inttoptr i32 %v1_1000c244 to i32*
  store i32 1, i32* %v2_1000c244, align 4
  %v0_1000c246 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000c246, i32* @ecx, align 4
  %v0_1000c24a = load i32, i32* @eax, align 4
  %v4_1000c24a = trunc i32 %v0_1000c24a to i8
  %v5_1000c24a = icmp eq i8 %v4_1000c24a, 0
  br i1 %v5_1000c24a, label %dec_label_pc_1000c241.dec_label_pc_1000c271_crit_edge, label %dec_label_pc_1000c24e

dec_label_pc_1000c241.dec_label_pc_1000c271_crit_edge: ; preds = %dec_label_pc_1000c241
  %v4_1000c271.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000c271

dec_label_pc_1000c24e:                            ; preds = %dec_label_pc_1000c239, %dec_label_pc_1000c241
  %v1_1000c26c = phi i32 [ %v0_1000c24134, %dec_label_pc_1000c239 ], [ %v0_1000c246, %dec_label_pc_1000c241 ]
  %v1_1000c24e = add i32 %v1_1000c26c, 12
  %v2_1000c24e = inttoptr i32 %v1_1000c24e to i32*
  %v3_1000c24e = load i32, i32* %v2_1000c24e, align 4
  store i32 %v3_1000c24e, i32* @ecx, align 4
  store i32 %v3_1000c24e, i32* @edx, align 4
  %v2_1000c255 = add i32 %v1_1000c26c, 32
  %v3_1000c255 = inttoptr i32 %v2_1000c255 to i32*
  %v4_1000c255 = load i32, i32* %v3_1000c255, align 4
  %v5_1000c255 = sub i32 %v3_1000c24e, %v4_1000c255
  %v3_1000c258 = add i32 %v5_1000c255, %v3_1000c24e
  %v4_1000c258 = inttoptr i32 %v3_1000c258 to i8*
  %v5_1000c258 = load i8, i8* %v4_1000c258, align 1
  %v6_1000c258 = zext i8 %v5_1000c258 to i32
  store i32 %v6_1000c258, i32* @eax, align 4
  %v5_1000c25c = icmp ult i8 %v5_1000c258, 9
  br i1 %v5_1000c25c, label %dec_label_pc_1000c274, label %dec_label_pc_1000c261

dec_label_pc_1000c261:                            ; preds = %dec_label_pc_1000c24e
  %v7_1000c264 = icmp ugt i8 %v5_1000c258, 13
  br i1 %v7_1000c264, label %dec_label_pc_1000c266, label %dec_label_pc_1000c26b

dec_label_pc_1000c266:                            ; preds = %dec_label_pc_1000c261
  %v9_1000c266 = icmp eq i8 %v5_1000c258, 32
  %v1_1000c269 = icmp eq i1 %v9_1000c266, false
  br i1 %v1_1000c269, label %dec_label_pc_1000c274, label %dec_label_pc_1000c26b

dec_label_pc_1000c26b:                            ; preds = %dec_label_pc_1000c261, %dec_label_pc_1000c266
  %v1_1000c26b = add i32 %v3_1000c24e, 1
  store i32 %v1_1000c26b, i32* @ecx, align 4
  store i32 %v1_1000c26b, i32* %v2_1000c24e, align 4
  %v0_1000c222.pre = load i32, i32* %esi.global-to-local, align 4
  %v4_1000c222.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c222 = add i32 %v0_1000c222.pre, 20
  %v2_1000c222 = inttoptr i32 %v1_1000c222 to i8*
  %v3_1000c222 = load i8, i8* %v2_1000c222, align 1
  %v5_1000c222 = trunc i32 %v4_1000c222.pre to i8
  %v6_1000c222 = and i8 %v3_1000c222, %v5_1000c222
  %v7_1000c222 = icmp eq i8 %v6_1000c222, 0
  %v1_1000c225 = icmp eq i1 %v7_1000c222, false
  br i1 %v1_1000c225, label %dec_label_pc_1000c274, label %dec_label_pc_1000c227

dec_label_pc_1000c271:                            ; preds = %dec_label_pc_1000c227, %dec_label_pc_1000c241.dec_label_pc_1000c271_crit_edge
  %v4_1000c271 = phi i32 [ %v4_1000c271.pre, %dec_label_pc_1000c241.dec_label_pc_1000c271_crit_edge ], [ %v4_1000c22233, %dec_label_pc_1000c227 ]
  %v12_1000c271 = phi i32 [ %v0_1000c246, %dec_label_pc_1000c241.dec_label_pc_1000c271_crit_edge ], [ %v0_1000c24134, %dec_label_pc_1000c227 ]
  %v1_1000c271 = add i32 %v12_1000c271, 20
  %v2_1000c271 = inttoptr i32 %v1_1000c271 to i8*
  %v3_1000c271 = load i8, i8* %v2_1000c271, align 1
  %v5_1000c271 = trunc i32 %v4_1000c271 to i8
  %v6_1000c271 = or i8 %v3_1000c271, %v5_1000c271
  store i8 %v6_1000c271, i8* %v2_1000c271, align 1
  br label %dec_label_pc_1000c274

dec_label_pc_1000c274:                            ; preds = %dec_label_pc_1000c21f, %dec_label_pc_1000c26b, %dec_label_pc_1000c24e, %dec_label_pc_1000c266, %dec_label_pc_1000c271
  %v0_1000c274 = load i32, i32* @esp, align 4
  %v1_1000c274 = inttoptr i32 %v0_1000c274 to i32*
  %v2_1000c274 = load i32, i32* %v1_1000c274, align 4
  store i32 %v2_1000c274, i32* @ebx, align 4
  %v3_1000c274 = add i32 %v0_1000c274, 4
  br label %dec_label_pc_1000c275

dec_label_pc_1000c275:                            ; preds = %dec_label_pc_1000c274, %dec_label_pc_1000c219, %dec_label_pc_1000c210
  %v0_1000c275 = phi i32 [ %v3_1000c274, %dec_label_pc_1000c274 ], [ %v4_1000c210, %dec_label_pc_1000c219 ], [ %v4_1000c210, %dec_label_pc_1000c210 ]
  %v1_1000c275 = inttoptr i32 %v0_1000c275 to i32*
  %v2_1000c275 = load i32, i32* %v1_1000c275, align 4
  store i32 %v2_1000c275, i32* @esi, align 4
  %v0_1000c276 = load i32, i32* @eax, align 4
  ret i32 %v0_1000c276
}

define i32 @function_1000c280(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1000c280:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_1000c283 = load i32, i32* @esi, align 4
  %v0_1000c284 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c284, i32* %esi.global-to-local, align 4
  %v1_1000c286 = add i32 %v0_1000c284, 21
  %v2_1000c286 = inttoptr i32 %v1_1000c286 to i8*
  %v3_1000c286 = load i8, i8* %v2_1000c286, align 1
  %v4_1000c286 = and i8 %v3_1000c286, 1
  %v5_1000c286 = icmp eq i8 %v4_1000c286, 0
  br i1 %v5_1000c286, label %dec_label_pc_1000c317, label %dec_label_pc_1000c290

dec_label_pc_1000c290:                            ; preds = %dec_label_pc_1000c280
  %v1_1000c290 = add i32 %v0_1000c284, 20
  %v2_1000c290 = inttoptr i32 %v1_1000c290 to i8*
  %v3_1000c290 = load i8, i8* %v2_1000c290, align 1
  %v10_1000c290 = icmp eq i8 %v3_1000c290, 0
  %v1_1000c294 = icmp eq i1 %v10_1000c290, false
  br i1 %v1_1000c294, label %dec_label_pc_1000c317, label %dec_label_pc_1000c29a

dec_label_pc_1000c29a:                            ; preds = %dec_label_pc_1000c290
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v3_1000c2a025 = load i8, i8* %v2_1000c290, align 1
  %v4_1000c2a026 = zext i8 %v3_1000c2a025 to i32
  %v6_1000c2a027 = and i32 %v0_1000c284, -256
  %v7_1000c2a028 = or i32 %v4_1000c2a026, %v6_1000c2a027
  store i32 %v7_1000c2a028, i32* @ecx, align 4
  %v2_1000c2a329 = and i8 %v3_1000c2a025, 2
  %v3_1000c2a330 = icmp eq i8 %v2_1000c2a329, 0
  %v1_1000c2a631 = icmp eq i1 %v3_1000c2a330, false
  br i1 %v1_1000c2a631, label %dec_label_pc_1000c30f, label %dec_label_pc_1000c2a8

dec_label_pc_1000c2a8:                            ; preds = %dec_label_pc_1000c29a, %dec_label_pc_1000c30c
  %v6_1000c2a036 = phi i32 [ %v6_1000c2a0, %dec_label_pc_1000c30c ], [ %v6_1000c2a027, %dec_label_pc_1000c29a ]
  %v3_1000c2a035 = phi i8 [ %v3_1000c2a0, %dec_label_pc_1000c30c ], [ %v3_1000c2a025, %dec_label_pc_1000c29a ]
  %v2_1000c2a034 = phi i8* [ %v2_1000c2a0, %dec_label_pc_1000c30c ], [ %v2_1000c290, %dec_label_pc_1000c29a ]
  %v0_1000c2d333 = phi i32 [ %v1_1000c30c, %dec_label_pc_1000c30c ], [ %arg1, %dec_label_pc_1000c29a ]
  %v2_1000c2b732 = phi i32 [ %v1_1000c2f1, %dec_label_pc_1000c30c ], [ %v0_1000c284, %dec_label_pc_1000c29a ]
  %v1_1000c2a8 = add i32 %v2_1000c2b732, 12
  %v2_1000c2a8 = inttoptr i32 %v1_1000c2a8 to i32*
  %v3_1000c2a8 = load i32, i32* %v2_1000c2a8, align 4
  store i32 %v3_1000c2a8, i32* %eax.global-to-local, align 4
  %v3_1000c2ab = add i32 %v0_1000c2d333, 1
  %v4_1000c2ab = add i32 %v3_1000c2ab, %v3_1000c2a8
  %v1_1000c2af = add i32 %v2_1000c2b732, 28
  %v2_1000c2af = inttoptr i32 %v1_1000c2af to i32*
  %v3_1000c2af = load i32, i32* %v2_1000c2af, align 4
  %v5_1000c2b2 = icmp slt i32 %v3_1000c2af, %v4_1000c2ab
  br i1 %v5_1000c2b2, label %dec_label_pc_1000c2b4, label %dec_label_pc_1000c2be

dec_label_pc_1000c2b4:                            ; preds = %dec_label_pc_1000c2a8
  %v2_1000c2b4 = or i8 %v3_1000c2a035, 2
  %v8_1000c2b4 = zext i8 %v2_1000c2b4 to i32
  %v11_1000c2b4 = or i32 %v8_1000c2b4, %v6_1000c2a036
  store i32 %v11_1000c2b4, i32* @ecx, align 4
  store i8 %v2_1000c2b4, i8* %v2_1000c2a034, align 1
  %v11_1000c2ba = load i32, i32* %eax.global-to-local, align 4
  %v12_1000c2ba = and i32 %v11_1000c2ba, -256
  store i32 %v12_1000c2ba, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c2e7

dec_label_pc_1000c2be:                            ; preds = %dec_label_pc_1000c2a8
  %v1_1000c2be = add i32 %v2_1000c2b732, 32
  %v2_1000c2be = inttoptr i32 %v1_1000c2be to i32*
  %v3_1000c2be = load i32, i32* %v2_1000c2be, align 4
  store i32 %v3_1000c2be, i32* @ecx, align 4
  %v5_1000c2c3 = icmp slt i32 %v3_1000c2a8, %v3_1000c2be
  br i1 %v5_1000c2c3, label %dec_label_pc_1000c2d0, label %dec_label_pc_1000c2c5

dec_label_pc_1000c2c5:                            ; preds = %dec_label_pc_1000c2be
  %v2_1000c2c1 = sub i32 %v3_1000c2a8, %v3_1000c2be
  %v4_1000c2c7 = add i32 %v3_1000c2ab, %v2_1000c2c1
  store i32 %v4_1000c2c7, i32* %eax.global-to-local, align 4
  %v1_1000c2cb = add i32 %v2_1000c2b732, 4
  %v2_1000c2cb = inttoptr i32 %v1_1000c2cb to i32*
  %v3_1000c2cb = load i32, i32* %v2_1000c2cb, align 4
  %v5_1000c2ce = icmp slt i32 %v3_1000c2cb, %v4_1000c2c7
  br i1 %v5_1000c2ce, label %dec_label_pc_1000c2d0, label %dec_label_pc_1000c2e5

dec_label_pc_1000c2d0:                            ; preds = %dec_label_pc_1000c2c5, %dec_label_pc_1000c2be
  store i32 %v3_1000c2ab, i32* %eax.global-to-local, align 4
  %v1_1000c2d6 = load i32, i32* @esp, align 4
  %v2_1000c2d6 = add i32 %v1_1000c2d6, -4
  %v3_1000c2d6 = inttoptr i32 %v2_1000c2d6 to i32*
  store i32 %v3_1000c2ab, i32* %v3_1000c2d6, align 4
  %v0_1000c2d7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000c2d7, i32* @ecx, align 4
  %v0_1000c2db = load i32, i32* %eax.global-to-local, align 4
  %v4_1000c2db = trunc i32 %v0_1000c2db to i8
  %v5_1000c2db = icmp eq i8 %v4_1000c2db, 0
  %v1_1000c2dd = icmp eq i1 %v5_1000c2db, false
  br i1 %v1_1000c2dd, label %dec_label_pc_1000c2e5, label %dec_label_pc_1000c2df

dec_label_pc_1000c2df:                            ; preds = %dec_label_pc_1000c2d0
  %v1_1000c2df = add i32 %v0_1000c2d7, 20
  %v2_1000c2df = inttoptr i32 %v1_1000c2df to i8*
  %v3_1000c2df = load i8, i8* %v2_1000c2df, align 1
  %v4_1000c2df = or i8 %v3_1000c2df, 2
  store i8 %v4_1000c2df, i8* %v2_1000c2df, align 1
  br label %dec_label_pc_1000c2e7

dec_label_pc_1000c2e5:                            ; preds = %dec_label_pc_1000c2c5, %dec_label_pc_1000c2d0
  %v0_1000c2e5 = phi i32 [ %v4_1000c2c7, %dec_label_pc_1000c2c5 ], [ %v0_1000c2db, %dec_label_pc_1000c2d0 ]
  %v1_1000c2e5 = and i32 %v0_1000c2e5, -256
  %v2_1000c2e5 = or i32 %v1_1000c2e5, 1
  store i32 %v2_1000c2e5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c2e7

dec_label_pc_1000c2e7:                            ; preds = %dec_label_pc_1000c2e5, %dec_label_pc_1000c2df, %dec_label_pc_1000c2b4
  %v0_1000c2e7 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000c2e7 = add i32 %v0_1000c2e7, 20
  %v2_1000c2e7 = inttoptr i32 %v1_1000c2e7 to i8*
  %v3_1000c2e7 = load i8, i8* %v2_1000c2e7, align 1
  %v4_1000c2e7 = and i8 %v3_1000c2e7, -3
  store i8 %v4_1000c2e7, i8* %v2_1000c2e7, align 1
  %v0_1000c2eb = load i32, i32* %eax.global-to-local, align 4
  %v4_1000c2eb = trunc i32 %v0_1000c2eb to i8
  %v5_1000c2eb = icmp eq i8 %v4_1000c2eb, 0
  br i1 %v5_1000c2eb, label %dec_label_pc_1000c2e7.dec_label_pc_1000c30f_crit_edge, label %dec_label_pc_1000c2ef

dec_label_pc_1000c2e7.dec_label_pc_1000c30f_crit_edge: ; preds = %dec_label_pc_1000c2e7
  %v0_1000c30f.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000c30f

dec_label_pc_1000c2ef:                            ; preds = %dec_label_pc_1000c2e7
  %v2_1000c2ef = load i32, i32* @ecx, align 4
  store i32 %v2_1000c2ef, i32* %eax.global-to-local, align 4
  %v1_1000c2f1 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000c2f1 = add i32 %v1_1000c2f1, 32
  %v3_1000c2f1 = inttoptr i32 %v2_1000c2f1 to i32*
  %v4_1000c2f1 = load i32, i32* %v3_1000c2f1, align 4
  %v5_1000c2f1 = sub i32 %v2_1000c2ef, %v4_1000c2f1
  store i32 %v5_1000c2f1, i32* %eax.global-to-local, align 4
  %v1_1000c2f4 = add i32 %v1_1000c2f1, 12
  %v2_1000c2f4 = inttoptr i32 %v1_1000c2f4 to i32*
  %v3_1000c2f4 = load i32, i32* %v2_1000c2f4, align 4
  store i32 %v3_1000c2f4, i32* @ecx, align 4
  %v1_1000c2f7 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000c2f7 = add i32 %v1_1000c2f7, %v5_1000c2f1
  store i32 %v2_1000c2f7, i32* %eax.global-to-local, align 4
  %v3_1000c2f9 = add i32 %v2_1000c2f7, %v3_1000c2f4
  %v4_1000c2f9 = inttoptr i32 %v3_1000c2f9 to i8*
  %v5_1000c2f9 = load i8, i8* %v4_1000c2f9, align 1
  %v6_1000c2f9 = zext i8 %v5_1000c2f9 to i32
  store i32 %v6_1000c2f9, i32* %eax.global-to-local, align 4
  %v5_1000c2fd = icmp ult i8 %v5_1000c2f9, 9
  br i1 %v5_1000c2fd, label %dec_label_pc_1000c30f, label %dec_label_pc_1000c302

dec_label_pc_1000c302:                            ; preds = %dec_label_pc_1000c2ef
  %v7_1000c305 = icmp ugt i8 %v5_1000c2f9, 13
  br i1 %v7_1000c305, label %dec_label_pc_1000c307, label %dec_label_pc_1000c30c

dec_label_pc_1000c307:                            ; preds = %dec_label_pc_1000c302
  %v9_1000c307 = icmp eq i8 %v5_1000c2f9, 32
  %v1_1000c30a = icmp eq i1 %v9_1000c307, false
  br i1 %v1_1000c30a, label %dec_label_pc_1000c30f, label %dec_label_pc_1000c30c

dec_label_pc_1000c30c:                            ; preds = %dec_label_pc_1000c302, %dec_label_pc_1000c307
  %v1_1000c30c = add i32 %v1_1000c2f7, 1
  store i32 %v1_1000c30c, i32* %edi.global-to-local, align 4
  %v1_1000c2a0 = add i32 %v1_1000c2f1, 20
  %v2_1000c2a0 = inttoptr i32 %v1_1000c2a0 to i8*
  %v3_1000c2a0 = load i8, i8* %v2_1000c2a0, align 1
  %v4_1000c2a0 = zext i8 %v3_1000c2a0 to i32
  %v6_1000c2a0 = and i32 %v3_1000c2f4, -256
  %v7_1000c2a0 = or i32 %v4_1000c2a0, %v6_1000c2a0
  store i32 %v7_1000c2a0, i32* @ecx, align 4
  %v2_1000c2a3 = and i8 %v3_1000c2a0, 2
  %v3_1000c2a3 = icmp eq i8 %v2_1000c2a3, 0
  %v1_1000c2a6 = icmp eq i1 %v3_1000c2a3, false
  br i1 %v1_1000c2a6, label %dec_label_pc_1000c30f, label %dec_label_pc_1000c2a8

dec_label_pc_1000c30f:                            ; preds = %dec_label_pc_1000c29a, %dec_label_pc_1000c30c, %dec_label_pc_1000c2ef, %dec_label_pc_1000c307, %dec_label_pc_1000c2e7.dec_label_pc_1000c30f_crit_edge
  %v0_1000c30f = phi i32 [ %v0_1000c30f.pre, %dec_label_pc_1000c2e7.dec_label_pc_1000c30f_crit_edge ], [ %arg1, %dec_label_pc_1000c29a ], [ %v1_1000c30c, %dec_label_pc_1000c30c ], [ %v1_1000c2f7, %dec_label_pc_1000c2ef ], [ %v1_1000c2f7, %dec_label_pc_1000c307 ]
  store i32 %v0_1000c30f, i32* %eax.global-to-local, align 4
  %v0_1000c311 = load i32, i32* @esp, align 4
  %v1_1000c311 = inttoptr i32 %v0_1000c311 to i32*
  %v2_1000c311 = load i32, i32* %v1_1000c311, align 4
  store i32 %v2_1000c311, i32* @edi, align 4
  %v3_1000c311 = add i32 %v0_1000c311, 4
  %v1_1000c312 = inttoptr i32 %v3_1000c311 to i32*
  %v2_1000c312 = load i32, i32* %v1_1000c312, align 4
  store i32 %v2_1000c312, i32* @esi, align 4
  ret i32 %v0_1000c30f

dec_label_pc_1000c317:                            ; preds = %dec_label_pc_1000c290, %dec_label_pc_1000c280
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000c283, i32* @esi, align 4
  ret i32 0
}

define i32 @function_1000c320(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000c320:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c320 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c320, i32* %stack_var_-4, align 4
  %v4_1000c320 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000c320, i32* @ebp, align 4
  %v0_1000c326 = load i32, i32* @esi, align 4
  %v0_1000c327 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c327, i32* @esi, align 4
  %v1_1000c329 = add i32 %v0_1000c327, 20
  %v2_1000c329 = inttoptr i32 %v1_1000c329 to i8*
  %v3_1000c329 = load i8, i8* %v2_1000c329, align 1
  %v10_1000c329 = icmp eq i8 %v3_1000c329, 0
  br i1 %v10_1000c329, label %dec_label_pc_1000c336, label %dec_label_pc_1000c32f

dec_label_pc_1000c32f:                            ; preds = %dec_label_pc_1000c320
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000c326, i32* @esi, align 4
  store i32 %v0_1000c320, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000c336:                            ; preds = %dec_label_pc_1000c320
  %v0_1000c336 = load i32, i32* @ebx, align 4
  store i32 %v0_1000c336, i32* %stack_var_-24, align 4
  %v4_1000c336 = ptrtoint i32* %stack_var_-24 to i32
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_1000c339 = add i32 %v0_1000c327, 21
  %v2_1000c339 = inttoptr i32 %v1_1000c339 to i8*
  %v3_1000c339 = load i8, i8* %v2_1000c339, align 1
  %v4_1000c339 = and i8 %v3_1000c339, 1
  %v5_1000c339 = icmp eq i8 %v4_1000c339, 0
  br i1 %v5_1000c339, label %dec_label_pc_1000c34d, label %dec_label_pc_1000c342

dec_label_pc_1000c342:                            ; preds = %dec_label_pc_1000c336
  %v5_1000c343 = call i32 @function_1000c280(i32 0, i32 %v0_1000c336, i32 %v0_1000c326, i32 0, i32 %v0_1000c320)
  store i32 %v5_1000c343, i32* %eax.global-to-local, align 4
  store i32 %v5_1000c343, i32* %ebx.global-to-local, align 4
  %v1_1000c34d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c34d

dec_label_pc_1000c34d:                            ; preds = %dec_label_pc_1000c342, %dec_label_pc_1000c336
  %v1_1000c34d = phi i32 [ %v4_1000c336, %dec_label_pc_1000c336 ], [ %v1_1000c34d.pre, %dec_label_pc_1000c342 ]
  %stack_var_-12.0 = phi i32 [ 0, %dec_label_pc_1000c336 ], [ %v5_1000c343, %dec_label_pc_1000c342 ]
  %v0_1000c34d = load i32, i32* @edi, align 4
  %v2_1000c34d = add i32 %v1_1000c34d, -4
  %v3_1000c34d = inttoptr i32 %v2_1000c34d to i32*
  store i32 %v0_1000c34d, i32* %v3_1000c34d, align 4
  %v0_1000c34e = load i32, i32* %ebx.global-to-local, align 4
  %v0_1000c351.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c351

dec_label_pc_1000c351:                            ; preds = %dec_label_pc_1000c351.backedge, %dec_label_pc_1000c34d
  %v1_1000c37e = phi i32 [ %v0_1000c34e, %dec_label_pc_1000c34d ], [ %v2_1000c425.pn, %dec_label_pc_1000c351.backedge ]
  %stack_var_-12.1 = phi i32 [ %stack_var_-12.0, %dec_label_pc_1000c34d ], [ %v2_1000c425.pn, %dec_label_pc_1000c351.backedge ]
  %v2_1000c38d = phi i32 [ %v0_1000c351.pre, %dec_label_pc_1000c34d ], [ %v0_1000c3d8, %dec_label_pc_1000c351.backedge ]
  %v1_1000c351 = add i32 %v2_1000c38d, 12
  %v2_1000c351 = inttoptr i32 %v1_1000c351 to i32*
  %v3_1000c351 = load i32, i32* %v2_1000c351, align 4
  store i32 %v3_1000c351, i32* %eax.global-to-local, align 4
  %v1_1000c354 = add i32 %v2_1000c38d, 28
  %v2_1000c354 = inttoptr i32 %v1_1000c354 to i32*
  %v3_1000c354 = load i32, i32* %v2_1000c354, align 4
  store i32 %v3_1000c354, i32* @ecx, align 4
  %v3_1000c357 = add i32 %v3_1000c351, %v1_1000c37e
  store i32 %v3_1000c357, i32* @edx, align 4
  store i32 128, i32* %edi.global-to-local, align 4
  %v5_1000c361 = icmp slt i32 %v3_1000c357, %v3_1000c354
  br i1 %v5_1000c361, label %dec_label_pc_1000c367, label %dec_label_pc_1000c42f

dec_label_pc_1000c367:                            ; preds = %dec_label_pc_1000c351
  %v3_1000c367 = add i32 %v1_1000c37e, 128
  %v4_1000c367 = add i32 %v3_1000c367, %v3_1000c351
  store i32 %v4_1000c367, i32* @edx, align 4
  %v7_1000c370 = icmp sgt i32 %v4_1000c367, %v3_1000c354
  br i1 %v7_1000c370, label %dec_label_pc_1000c372, label %dec_label_pc_1000c378

dec_label_pc_1000c372:                            ; preds = %dec_label_pc_1000c367
  %v2_1000c374 = sub i32 %v3_1000c354, %v3_1000c351
  %v2_1000c376 = sub i32 %v2_1000c374, %v1_1000c37e
  store i32 %v2_1000c376, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000c378

dec_label_pc_1000c378:                            ; preds = %dec_label_pc_1000c367, %dec_label_pc_1000c372
  %v0_1000c37e = phi i32 [ 128, %dec_label_pc_1000c367 ], [ %v2_1000c376, %dec_label_pc_1000c372 ]
  %v1_1000c378 = add i32 %v2_1000c38d, 20
  %v2_1000c378 = inttoptr i32 %v1_1000c378 to i8*
  %v3_1000c378 = load i8, i8* %v2_1000c378, align 1
  %v4_1000c378 = and i8 %v3_1000c378, 2
  %v5_1000c378 = icmp eq i8 %v4_1000c378, 0
  %v1_1000c37c = icmp eq i1 %v5_1000c378, false
  br i1 %v1_1000c37c, label %dec_label_pc_1000c3bb, label %dec_label_pc_1000c37e

dec_label_pc_1000c37e:                            ; preds = %dec_label_pc_1000c378
  %v3_1000c37e = add i32 %v0_1000c37e, %v1_1000c37e
  store i32 %v3_1000c37e, i32* @edx, align 4
  %v3_1000c381 = add i32 %v3_1000c37e, %v3_1000c351
  store i32 %v3_1000c381, i32* %ebx.global-to-local, align 4
  %v5_1000c386 = icmp slt i32 %v3_1000c354, %v3_1000c381
  br i1 %v5_1000c386, label %dec_label_pc_1000c388, label %dec_label_pc_1000c392

dec_label_pc_1000c388:                            ; preds = %dec_label_pc_1000c37e
  %v3_1000c388 = load i8, i8* %v2_1000c378, align 1
  %v2_1000c38b = or i8 %v3_1000c388, 2
  %v8_1000c38b = zext i8 %v2_1000c38b to i32
  %v10_1000c38b = and i32 %v3_1000c351, -256
  %v11_1000c38b = or i32 %v8_1000c38b, %v10_1000c38b
  store i32 %v11_1000c38b, i32* %eax.global-to-local, align 4
  store i8 %v2_1000c38b, i8* %v2_1000c378, align 1
  br label %dec_label_pc_1000c3b4

dec_label_pc_1000c392:                            ; preds = %dec_label_pc_1000c37e
  %v1_1000c392 = add i32 %v2_1000c38d, 32
  %v2_1000c392 = inttoptr i32 %v1_1000c392 to i32*
  %v3_1000c392 = load i32, i32* %v2_1000c392, align 4
  store i32 %v3_1000c392, i32* @ecx, align 4
  %v5_1000c397 = icmp slt i32 %v3_1000c351, %v3_1000c392
  br i1 %v5_1000c397, label %dec_label_pc_1000c3a4, label %dec_label_pc_1000c399

dec_label_pc_1000c399:                            ; preds = %dec_label_pc_1000c392
  %v2_1000c39b = sub i32 %v3_1000c37e, %v3_1000c392
  %v2_1000c39d = add i32 %v2_1000c39b, %v3_1000c351
  store i32 %v2_1000c39d, i32* %ebx.global-to-local, align 4
  %v1_1000c39f = add i32 %v2_1000c38d, 4
  %v2_1000c39f = inttoptr i32 %v1_1000c39f to i32*
  %v3_1000c39f = load i32, i32* %v2_1000c39f, align 4
  %v5_1000c3a2 = icmp slt i32 %v3_1000c39f, %v2_1000c39d
  br i1 %v5_1000c3a2, label %dec_label_pc_1000c3a4, label %dec_label_pc_1000c3b4

dec_label_pc_1000c3a4:                            ; preds = %dec_label_pc_1000c399, %dec_label_pc_1000c392
  %v1_1000c3a4 = add i32 %v2_1000c38d, 36
  %v2_1000c3a4 = inttoptr i32 %v1_1000c3a4 to i32*
  %v3_1000c3a4 = load i32, i32* %v2_1000c3a4, align 4
  store i32 %v3_1000c3a4, i32* %eax.global-to-local, align 4
  %v1_1000c3a7 = load i32, i32* @esp, align 4
  %v2_1000c3a7 = add i32 %v1_1000c3a7, -4
  %v3_1000c3a7 = inttoptr i32 %v2_1000c3a7 to i32*
  store i32 %v3_1000c37e, i32* %v3_1000c3a7, align 4
  %v0_1000c3a8 = load i32, i32* @esi, align 4
  store i32 %v0_1000c3a8, i32* @ecx, align 4
  %v0_1000c3ac = load i32, i32* %eax.global-to-local, align 4
  %v4_1000c3ac = trunc i32 %v0_1000c3ac to i8
  %v5_1000c3ac = icmp eq i8 %v4_1000c3ac, 0
  %v1_1000c3ae = icmp eq i1 %v5_1000c3ac, false
  br i1 %v1_1000c3ae, label %dec_label_pc_1000c3b4, label %dec_label_pc_1000c3b0

dec_label_pc_1000c3b0:                            ; preds = %dec_label_pc_1000c3a4
  %v1_1000c3b0 = add i32 %v0_1000c3a8, 20
  %v2_1000c3b0 = inttoptr i32 %v1_1000c3b0 to i8*
  %v3_1000c3b0 = load i8, i8* %v2_1000c3b0, align 1
  %v4_1000c3b0 = or i8 %v3_1000c3b0, 2
  store i8 %v4_1000c3b0, i8* %v2_1000c3b0, align 1
  br label %dec_label_pc_1000c3b4

dec_label_pc_1000c3b4:                            ; preds = %dec_label_pc_1000c399, %dec_label_pc_1000c3b0, %dec_label_pc_1000c3a4, %dec_label_pc_1000c388
  %v0_1000c3b4 = load i32, i32* @esi, align 4
  %v1_1000c3b4 = add i32 %v0_1000c3b4, 20
  %v2_1000c3b4 = inttoptr i32 %v1_1000c3b4 to i8*
  %v3_1000c3b4 = load i8, i8* %v2_1000c3b4, align 1
  %v4_1000c3b4 = and i8 %v3_1000c3b4, -3
  store i8 %v4_1000c3b4, i8* %v2_1000c3b4, align 1
  store i32 %stack_var_-12.1, i32* %ebx.global-to-local, align 4
  %v0_1000c3bb.pre = load i32, i32* @esi, align 4
  %v1_1000c3c3.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000c3bb

dec_label_pc_1000c3bb:                            ; preds = %dec_label_pc_1000c3b4, %dec_label_pc_1000c378
  %v0_1000c425 = phi i32 [ %stack_var_-12.1, %dec_label_pc_1000c3b4 ], [ %v1_1000c37e, %dec_label_pc_1000c378 ]
  %v3_1000c3c5 = phi i32 [ %v1_1000c3c3.pre, %dec_label_pc_1000c3b4 ], [ %v0_1000c37e, %dec_label_pc_1000c378 ]
  %v0_1000c3d8 = phi i32 [ %v0_1000c3bb.pre, %dec_label_pc_1000c3b4 ], [ %v2_1000c38d, %dec_label_pc_1000c378 ]
  %v1_1000c3bb = add i32 %v0_1000c3d8, 12
  %v2_1000c3bb = inttoptr i32 %v1_1000c3bb to i32*
  %v3_1000c3bb = load i32, i32* %v2_1000c3bb, align 4
  store i32 %v3_1000c3bb, i32* %eax.global-to-local, align 4
  %v1_1000c3be = add i32 %v0_1000c3d8, 28
  %v2_1000c3be = inttoptr i32 %v1_1000c3be to i32*
  %v3_1000c3be = load i32, i32* %v2_1000c3be, align 4
  %v2_1000c3c1 = sub i32 %v3_1000c3be, %v3_1000c3bb
  %v2_1000c3c3 = sub i32 %v2_1000c3c1, %v3_1000c3c5
  %v8_1000c3c3 = xor i32 %v2_1000c3c1, %v3_1000c3c5
  %v9_1000c3c3 = xor i32 %v2_1000c3c3, %v2_1000c3c1
  %v10_1000c3c3 = and i32 %v9_1000c3c3, %v8_1000c3c3
  %v11_1000c3c3 = icmp slt i32 %v10_1000c3c3, 0
  %v13_1000c3c3 = icmp slt i32 %v2_1000c3c3, 0
  %v2_1000c3c5 = icmp ne i1 %v13_1000c3c3, %v11_1000c3c3
  %v5_1000c3c5 = select i1 %v2_1000c3c5, i32 %v2_1000c3c1, i32 %v3_1000c3c5
  store i32 %v5_1000c3c5, i32* %edi.global-to-local, align 4
  %v1_1000c3c8 = icmp eq i32 %v5_1000c3c5, 0
  %v1_1000c3ca = icmp eq i1 %v1_1000c3c8, false
  %v2_1000c3ca = zext i1 %v1_1000c3ca to i32
  %v4_1000c3ca = and i32 %v2_1000c3c1, -256
  %v5_1000c3ca = or i32 %v2_1000c3ca, %v4_1000c3ca
  store i32 %v5_1000c3ca, i32* @ecx, align 4
  %v5_1000c3cd = icmp eq i1 %v1_1000c3ca, false
  br i1 %v5_1000c3cd, label %dec_label_pc_1000c42f, label %dec_label_pc_1000c3d1

dec_label_pc_1000c3d1:                            ; preds = %dec_label_pc_1000c3bb
  %v2_1000c3d1 = add i32 %v0_1000c3d8, 32
  %v3_1000c3d1 = inttoptr i32 %v2_1000c3d1 to i32*
  %v4_1000c3d1 = load i32, i32* %v3_1000c3d1, align 4
  %v5_1000c3d1 = sub i32 %v3_1000c3bb, %v4_1000c3d1
  %v4_1000c3d4 = add i32 %v5_1000c3d1, %v5_1000c3ca
  %v2_1000c3d6 = add i32 %v4_1000c3d4, %v0_1000c425
  store i32 %v2_1000c3d6, i32* %eax.global-to-local, align 4
  %v1_1000c3d8 = add i32 %v0_1000c3d8, 21
  %v2_1000c3d8 = inttoptr i32 %v1_1000c3d8 to i8*
  %v3_1000c3d8 = load i8, i8* %v2_1000c3d8, align 1
  %v4_1000c3d8 = and i8 %v3_1000c3d8, 1
  %v5_1000c3d8 = icmp eq i8 %v4_1000c3d8, 0
  %v1_1000c3df = icmp eq i1 %v5_1000c3d8, false
  br i1 %v1_1000c3df, label %dec_label_pc_1000c3fc, label %dec_label_pc_1000c3e1

dec_label_pc_1000c3e1:                            ; preds = %dec_label_pc_1000c3d1
  store i32 0, i32* @ecx, align 4
  %tmp51 = icmp slt i32 %v5_1000c3c5, 1
  br i1 %tmp51, label %dec_label_pc_1000c425, label %dec_label_pc_1000c3e7.preheader

dec_label_pc_1000c3e7.preheader:                  ; preds = %dec_label_pc_1000c3e1
  br label %dec_label_pc_1000c3e7

dec_label_pc_1000c3e7:                            ; preds = %dec_label_pc_1000c3e7.preheader, %dec_label_pc_1000c3ed
  %v0_1000c44b = phi i32 [ 0, %dec_label_pc_1000c3e7.preheader ], [ %v1_1000c3ed, %dec_label_pc_1000c3ed ]
  %v3_1000c3e7 = add i32 %v0_1000c44b, %v2_1000c3d6
  %v4_1000c3e7 = inttoptr i32 %v3_1000c3e7 to i8*
  %v5_1000c3e7 = load i8, i8* %v4_1000c3e7, align 1
  %v12_1000c3e7 = icmp eq i8 %v5_1000c3e7, 0
  br i1 %v12_1000c3e7, label %dec_label_pc_1000c44b, label %dec_label_pc_1000c3ed

dec_label_pc_1000c3ed:                            ; preds = %dec_label_pc_1000c3e7
  %v1_1000c3ed = add nuw nsw i32 %v0_1000c44b, 1
  store i32 %v1_1000c3ed, i32* @ecx, align 4
  %v5_1000c3f0 = icmp slt i32 %v1_1000c3ed, %v5_1000c3c5
  br i1 %v5_1000c3f0, label %dec_label_pc_1000c3e7, label %dec_label_pc_1000c351.backedge

dec_label_pc_1000c351.backedge:                   ; preds = %dec_label_pc_1000c3ed, %dec_label_pc_1000c425
  %v2_1000c425.pn = add i32 %v5_1000c3c5, %v0_1000c425
  store i32 %v2_1000c425.pn, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000c351

dec_label_pc_1000c3fc:                            ; preds = %dec_label_pc_1000c3d1
  %tmp52 = icmp slt i32 %v5_1000c3c5, 1
  br i1 %tmp52, label %dec_label_pc_1000c425, label %dec_label_pc_1000c407.preheader

dec_label_pc_1000c407.preheader:                  ; preds = %dec_label_pc_1000c3fc
  %v8_1000c407 = and i32 %v2_1000c3d6, -256
  br label %dec_label_pc_1000c407

dec_label_pc_1000c404:                            ; preds = %dec_label_pc_1000c420
  store i32 %v2_1000c3d6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c407

dec_label_pc_1000c407:                            ; preds = %dec_label_pc_1000c407.preheader, %dec_label_pc_1000c404
  %v0_1000c459 = phi i32 [ 0, %dec_label_pc_1000c407.preheader ], [ %v1_1000c420, %dec_label_pc_1000c404 ]
  %v3_1000c407 = add i32 %v0_1000c459, %v2_1000c3d6
  %v4_1000c407 = inttoptr i32 %v3_1000c407 to i8*
  %v5_1000c407 = load i8, i8* %v4_1000c407, align 1
  %v6_1000c407 = zext i8 %v5_1000c407 to i32
  %v9_1000c407 = or i32 %v6_1000c407, %v8_1000c407
  store i32 %v9_1000c407, i32* %eax.global-to-local, align 4
  store i32 %v6_1000c407, i32* @ecx, align 4
  %v5_1000c40d = icmp ult i8 %v5_1000c407, 9
  br i1 %v5_1000c40d, label %dec_label_pc_1000c41c, label %dec_label_pc_1000c412

dec_label_pc_1000c412:                            ; preds = %dec_label_pc_1000c407
  %v7_1000c415 = icmp ugt i8 %v5_1000c407, 13
  br i1 %v7_1000c415, label %dec_label_pc_1000c417, label %dec_label_pc_1000c459

dec_label_pc_1000c417:                            ; preds = %dec_label_pc_1000c412
  %v9_1000c417 = icmp eq i8 %v5_1000c407, 32
  br i1 %v9_1000c417, label %dec_label_pc_1000c459, label %dec_label_pc_1000c41c

dec_label_pc_1000c41c:                            ; preds = %dec_label_pc_1000c417, %dec_label_pc_1000c407
  %v5_1000c41c = icmp eq i8 %v5_1000c407, 0
  br i1 %v5_1000c41c, label %dec_label_pc_1000c459, label %dec_label_pc_1000c420

dec_label_pc_1000c420:                            ; preds = %dec_label_pc_1000c41c
  %v1_1000c420 = add i32 %v0_1000c459, 1
  %v5_1000c423 = icmp slt i32 %v1_1000c420, %v5_1000c3c5
  br i1 %v5_1000c423, label %dec_label_pc_1000c404, label %dec_label_pc_1000c425

dec_label_pc_1000c425:                            ; preds = %dec_label_pc_1000c420, %dec_label_pc_1000c3fc, %dec_label_pc_1000c3e1
  br label %dec_label_pc_1000c351.backedge

dec_label_pc_1000c42f:                            ; preds = %dec_label_pc_1000c351, %dec_label_pc_1000c3bb
  %v0_1000c43f = phi i32 [ %v1_1000c37e, %dec_label_pc_1000c351 ], [ %v0_1000c425, %dec_label_pc_1000c3bb ]
  store i32 %v0_1000c34e, i32* @ecx, align 4
  %v2_1000c432 = sub i32 %v0_1000c43f, %v0_1000c34e
  %v12_1000c432 = icmp eq i32 %v2_1000c432, 0
  %v1_1000c434 = icmp eq i1 %v12_1000c432, false
  br i1 %v1_1000c434, label %dec_label_pc_1000c43f, label %dec_label_pc_1000c436

dec_label_pc_1000c436:                            ; preds = %dec_label_pc_1000c42f
  %v0_1000c436 = load i32, i32* @esp, align 4
  %v1_1000c436 = inttoptr i32 %v0_1000c436 to i32*
  %v2_1000c436 = load i32, i32* %v1_1000c436, align 4
  store i32 %v2_1000c436, i32* %edi.global-to-local, align 4
  %v3_1000c436 = add i32 %v0_1000c436, 4
  %v1_1000c437 = inttoptr i32 %v3_1000c436 to i32*
  %v2_1000c437 = load i32, i32* %v1_1000c437, align 4
  store i32 %v2_1000c437, i32* @ebx, align 4
  %v3_1000c437 = add i32 %v0_1000c436, 8
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000c43a = inttoptr i32 %v3_1000c437 to i32*
  %v2_1000c43a = load i32, i32* %v1_1000c43a, align 4
  store i32 %v2_1000c43a, i32* @esi, align 4
  %v2_1000c43d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c43d, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000c43f:                            ; preds = %dec_label_pc_1000c42f
  store i32 %v0_1000c43f, i32* %eax.global-to-local, align 4
  %v0_1000c441 = load i32, i32* @esp, align 4
  %v1_1000c441 = inttoptr i32 %v0_1000c441 to i32*
  %v2_1000c441 = load i32, i32* %v1_1000c441, align 4
  store i32 %v2_1000c441, i32* %edi.global-to-local, align 4
  %v3_1000c441 = add i32 %v0_1000c441, 4
  store i32 %v2_1000c432, i32* %eax.global-to-local, align 4
  %v1_1000c444 = inttoptr i32 %v3_1000c441 to i32*
  %v2_1000c444 = load i32, i32* %v1_1000c444, align 4
  store i32 %v2_1000c444, i32* @ebx, align 4
  %v3_1000c444 = add i32 %v0_1000c441, 8
  %v1_1000c445 = add i32 %v2_1000c432, 1
  store i32 %v1_1000c445, i32* %eax.global-to-local, align 4
  %v1_1000c446 = inttoptr i32 %v3_1000c444 to i32*
  %v2_1000c446 = load i32, i32* %v1_1000c446, align 4
  store i32 %v2_1000c446, i32* @esi, align 4
  %v2_1000c449 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c449, i32* @ebp, align 4
  ret i32 %v1_1000c445

dec_label_pc_1000c44b:                            ; preds = %dec_label_pc_1000c3e7
  %v5_1000c44b = sub i32 %v0_1000c44b, %v0_1000c34e
  store i32 %v5_1000c44b, i32* @ecx, align 4
  %v0_1000c44e = load i32, i32* @esp, align 4
  %v1_1000c44e = inttoptr i32 %v0_1000c44e to i32*
  %v2_1000c44e = load i32, i32* %v1_1000c44e, align 4
  store i32 %v2_1000c44e, i32* %edi.global-to-local, align 4
  %v3_1000c44e = add i32 %v0_1000c44e, 4
  %v3_1000c44f = add i32 %v0_1000c425, 1
  %v4_1000c44f = add i32 %v3_1000c44f, %v5_1000c44b
  store i32 %v4_1000c44f, i32* %eax.global-to-local, align 4
  %v1_1000c453 = inttoptr i32 %v3_1000c44e to i32*
  %v2_1000c453 = load i32, i32* %v1_1000c453, align 4
  store i32 %v2_1000c453, i32* @ebx, align 4
  %v3_1000c453 = add i32 %v0_1000c44e, 8
  %v1_1000c454 = inttoptr i32 %v3_1000c453 to i32*
  %v2_1000c454 = load i32, i32* %v1_1000c454, align 4
  store i32 %v2_1000c454, i32* @esi, align 4
  %v2_1000c457 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c457, i32* @ebp, align 4
  ret i32 %v4_1000c44f

dec_label_pc_1000c459:                            ; preds = %dec_label_pc_1000c412, %dec_label_pc_1000c41c, %dec_label_pc_1000c417
  %v5_1000c459 = sub i32 %v0_1000c459, %v0_1000c34e
  store i32 %v5_1000c459, i32* @edx, align 4
  %v0_1000c45c = load i32, i32* @esp, align 4
  %v1_1000c45c = inttoptr i32 %v0_1000c45c to i32*
  %v2_1000c45c = load i32, i32* %v1_1000c45c, align 4
  store i32 %v2_1000c45c, i32* %edi.global-to-local, align 4
  %v3_1000c45c = add i32 %v0_1000c45c, 4
  %v3_1000c45d = add i32 %v0_1000c425, 1
  %v4_1000c45d = add i32 %v3_1000c45d, %v5_1000c459
  store i32 %v4_1000c45d, i32* %eax.global-to-local, align 4
  %v1_1000c461 = inttoptr i32 %v3_1000c45c to i32*
  %v2_1000c461 = load i32, i32* %v1_1000c461, align 4
  store i32 %v2_1000c461, i32* @ebx, align 4
  %v3_1000c461 = add i32 %v0_1000c45c, 8
  %v1_1000c462 = inttoptr i32 %v3_1000c461 to i32*
  %v2_1000c462 = load i32, i32* %v1_1000c462, align 4
  store i32 %v2_1000c462, i32* @esi, align 4
  %v2_1000c465 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c465, i32* @ebp, align 4
  ret i32 %v4_1000c45d
}

define i32 @function_1000c470(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000c470:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000c470 = load i32, i32* @ebp, align 4
  store i32 %v0_1000c470, i32* %stack_var_-4, align 4
  %v0_1000c476 = load i32, i32* @esi, align 4
  %v0_1000c477 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c477, i32* %esi.global-to-local, align 4
  %v1_1000c479 = add i32 %v0_1000c477, 20
  %v2_1000c479 = inttoptr i32 %v1_1000c479 to i8*
  %v3_1000c479 = load i8, i8* %v2_1000c479, align 1
  %v10_1000c479 = icmp eq i8 %v3_1000c479, 0
  br i1 %v10_1000c479, label %dec_label_pc_1000c486, label %dec_label_pc_1000c47f

dec_label_pc_1000c47f:                            ; preds = %dec_label_pc_1000c470
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000c476, i32* @esi, align 4
  store i32 %v0_1000c470, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000c486:                            ; preds = %dec_label_pc_1000c470
  br label %dec_label_pc_1000c48a

dec_label_pc_1000c48a:                            ; preds = %dec_label_pc_1000c536, %dec_label_pc_1000c486
  %v1_1000c4bc = phi i32 [ %v2_1000c536, %dec_label_pc_1000c536 ], [ 0, %dec_label_pc_1000c486 ]
  %v2_1000c4cb = phi i32 [ %v1_1000c50f, %dec_label_pc_1000c536 ], [ %v0_1000c477, %dec_label_pc_1000c486 ]
  %v1_1000c48a = add i32 %v2_1000c4cb, 12
  %v2_1000c48a = inttoptr i32 %v1_1000c48a to i32*
  %v3_1000c48a = load i32, i32* %v2_1000c48a, align 4
  store i32 %v3_1000c48a, i32* %eax.global-to-local, align 4
  %v1_1000c48d = add i32 %v2_1000c4cb, 28
  %v2_1000c48d = inttoptr i32 %v1_1000c48d to i32*
  %v3_1000c48d = load i32, i32* %v2_1000c48d, align 4
  store i32 %v3_1000c48d, i32* @ecx, align 4
  %v3_1000c490 = add i32 %v3_1000c48a, %v1_1000c4bc
  store i32 %v3_1000c490, i32* %edx.global-to-local, align 4
  store i32 128, i32* %edi.global-to-local, align 4
  %v5_1000c49d = icmp slt i32 %v3_1000c490, %v3_1000c48d
  br i1 %v5_1000c49d, label %dec_label_pc_1000c4a3, label %dec_label_pc_1000c53d

dec_label_pc_1000c4a3:                            ; preds = %dec_label_pc_1000c48a
  %v3_1000c4a3 = add i32 %v1_1000c4bc, 128
  %v4_1000c4a3 = add i32 %v3_1000c4a3, %v3_1000c48a
  store i32 %v4_1000c4a3, i32* %edx.global-to-local, align 4
  %v7_1000c4ac = icmp sgt i32 %v4_1000c4a3, %v3_1000c48d
  br i1 %v7_1000c4ac, label %dec_label_pc_1000c4ae, label %dec_label_pc_1000c4b4

dec_label_pc_1000c4ae:                            ; preds = %dec_label_pc_1000c4a3
  %v2_1000c4b0 = sub i32 %v3_1000c48d, %v3_1000c48a
  %v2_1000c4b2 = sub i32 %v2_1000c4b0, %v1_1000c4bc
  store i32 %v2_1000c4b2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000c4b4

dec_label_pc_1000c4b4:                            ; preds = %dec_label_pc_1000c4a3, %dec_label_pc_1000c4ae
  %v0_1000c4bc = phi i32 [ 128, %dec_label_pc_1000c4a3 ], [ %v2_1000c4b2, %dec_label_pc_1000c4ae ]
  %v1_1000c4b4 = add i32 %v2_1000c4cb, 20
  %v2_1000c4b4 = inttoptr i32 %v1_1000c4b4 to i8*
  %v3_1000c4b4 = load i8, i8* %v2_1000c4b4, align 1
  %v4_1000c4b4 = zext i8 %v3_1000c4b4 to i32
  %v6_1000c4b4 = and i32 %v4_1000c4a3, -256
  %v7_1000c4b4 = or i32 %v4_1000c4b4, %v6_1000c4b4
  store i32 %v7_1000c4b4, i32* %edx.global-to-local, align 4
  %v2_1000c4b7 = and i8 %v3_1000c4b4, 2
  %v3_1000c4b7 = icmp eq i8 %v2_1000c4b7, 0
  %v1_1000c4ba = icmp eq i1 %v3_1000c4b7, false
  br i1 %v1_1000c4ba, label %dec_label_pc_1000c4f9, label %dec_label_pc_1000c4bc

dec_label_pc_1000c4bc:                            ; preds = %dec_label_pc_1000c4b4
  %v3_1000c4bc = add i32 %v0_1000c4bc, %v1_1000c4bc
  store i32 %v3_1000c4bc, i32* %edx.global-to-local, align 4
  %v3_1000c4bf = add i32 %v3_1000c4bc, %v3_1000c48a
  %v5_1000c4c4 = icmp slt i32 %v3_1000c48d, %v3_1000c4bf
  br i1 %v5_1000c4c4, label %dec_label_pc_1000c4c6, label %dec_label_pc_1000c4d0

dec_label_pc_1000c4c6:                            ; preds = %dec_label_pc_1000c4bc
  %v3_1000c4c6 = load i8, i8* %v2_1000c4b4, align 1
  %v2_1000c4c9 = or i8 %v3_1000c4c6, 2
  %v8_1000c4c9 = zext i8 %v2_1000c4c9 to i32
  %v10_1000c4c9 = and i32 %v3_1000c48a, -256
  %v11_1000c4c9 = or i32 %v8_1000c4c9, %v10_1000c4c9
  store i32 %v11_1000c4c9, i32* %eax.global-to-local, align 4
  store i8 %v2_1000c4c9, i8* %v2_1000c4b4, align 1
  br label %dec_label_pc_1000c4f2

dec_label_pc_1000c4d0:                            ; preds = %dec_label_pc_1000c4bc
  %v1_1000c4d0 = add i32 %v2_1000c4cb, 32
  %v2_1000c4d0 = inttoptr i32 %v1_1000c4d0 to i32*
  %v3_1000c4d0 = load i32, i32* %v2_1000c4d0, align 4
  store i32 %v3_1000c4d0, i32* @ecx, align 4
  %v5_1000c4d5 = icmp slt i32 %v3_1000c48a, %v3_1000c4d0
  br i1 %v5_1000c4d5, label %dec_label_pc_1000c4e2, label %dec_label_pc_1000c4d7

dec_label_pc_1000c4d7:                            ; preds = %dec_label_pc_1000c4d0
  %v2_1000c4d9 = sub i32 %v3_1000c4bc, %v3_1000c4d0
  %v2_1000c4db = add i32 %v2_1000c4d9, %v3_1000c48a
  %v1_1000c4dd = add i32 %v2_1000c4cb, 4
  %v2_1000c4dd = inttoptr i32 %v1_1000c4dd to i32*
  %v3_1000c4dd = load i32, i32* %v2_1000c4dd, align 4
  %v5_1000c4e0 = icmp slt i32 %v3_1000c4dd, %v2_1000c4db
  br i1 %v5_1000c4e0, label %dec_label_pc_1000c4e2, label %dec_label_pc_1000c4f2

dec_label_pc_1000c4e2:                            ; preds = %dec_label_pc_1000c4d7, %dec_label_pc_1000c4d0
  %v1_1000c4e2 = add i32 %v2_1000c4cb, 36
  %v2_1000c4e2 = inttoptr i32 %v1_1000c4e2 to i32*
  %v3_1000c4e2 = load i32, i32* %v2_1000c4e2, align 4
  store i32 %v3_1000c4e2, i32* %eax.global-to-local, align 4
  %v1_1000c4e5 = load i32, i32* @esp, align 4
  %v2_1000c4e5 = add i32 %v1_1000c4e5, -4
  %v3_1000c4e5 = inttoptr i32 %v2_1000c4e5 to i32*
  store i32 %v3_1000c4bc, i32* %v3_1000c4e5, align 4
  %v0_1000c4e6 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000c4e6, i32* @ecx, align 4
  %v0_1000c4ea = load i32, i32* %eax.global-to-local, align 4
  %v4_1000c4ea = trunc i32 %v0_1000c4ea to i8
  %v5_1000c4ea = icmp eq i8 %v4_1000c4ea, 0
  %v1_1000c4ec = icmp eq i1 %v5_1000c4ea, false
  br i1 %v1_1000c4ec, label %dec_label_pc_1000c4f2, label %dec_label_pc_1000c4ee

dec_label_pc_1000c4ee:                            ; preds = %dec_label_pc_1000c4e2
  %v1_1000c4ee = add i32 %v0_1000c4e6, 20
  %v2_1000c4ee = inttoptr i32 %v1_1000c4ee to i8*
  %v3_1000c4ee = load i8, i8* %v2_1000c4ee, align 1
  %v4_1000c4ee = or i8 %v3_1000c4ee, 2
  store i8 %v4_1000c4ee, i8* %v2_1000c4ee, align 1
  br label %dec_label_pc_1000c4f2

dec_label_pc_1000c4f2:                            ; preds = %dec_label_pc_1000c4d7, %dec_label_pc_1000c4ee, %dec_label_pc_1000c4e2, %dec_label_pc_1000c4c6
  %v0_1000c4f2 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000c4f2 = add i32 %v0_1000c4f2, 20
  %v2_1000c4f2 = inttoptr i32 %v1_1000c4f2 to i8*
  %v3_1000c4f2 = load i8, i8* %v2_1000c4f2, align 1
  %v4_1000c4f2 = and i8 %v3_1000c4f2, -3
  store i8 %v4_1000c4f2, i8* %v2_1000c4f2, align 1
  %v0_1000c4f9.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_1000c501.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000c4f9

dec_label_pc_1000c4f9:                            ; preds = %dec_label_pc_1000c4f2, %dec_label_pc_1000c4b4
  %v3_1000c503 = phi i32 [ %v1_1000c501.pre, %dec_label_pc_1000c4f2 ], [ %v0_1000c4bc, %dec_label_pc_1000c4b4 ]
  %v1_1000c50f = phi i32 [ %v0_1000c4f9.pre, %dec_label_pc_1000c4f2 ], [ %v2_1000c4cb, %dec_label_pc_1000c4b4 ]
  %v1_1000c4f9 = add i32 %v1_1000c50f, 12
  %v2_1000c4f9 = inttoptr i32 %v1_1000c4f9 to i32*
  %v3_1000c4f9 = load i32, i32* %v2_1000c4f9, align 4
  store i32 %v3_1000c4f9, i32* %eax.global-to-local, align 4
  %v1_1000c4fc = add i32 %v1_1000c50f, 28
  %v2_1000c4fc = inttoptr i32 %v1_1000c4fc to i32*
  %v3_1000c4fc = load i32, i32* %v2_1000c4fc, align 4
  %v2_1000c4ff = sub i32 %v3_1000c4fc, %v3_1000c4f9
  %v2_1000c501 = sub i32 %v2_1000c4ff, %v3_1000c503
  %v8_1000c501 = xor i32 %v2_1000c4ff, %v3_1000c503
  %v9_1000c501 = xor i32 %v2_1000c501, %v2_1000c4ff
  %v10_1000c501 = and i32 %v9_1000c501, %v8_1000c501
  %v11_1000c501 = icmp slt i32 %v10_1000c501, 0
  %v13_1000c501 = icmp slt i32 %v2_1000c501, 0
  %v2_1000c503 = icmp ne i1 %v13_1000c501, %v11_1000c501
  %v5_1000c503 = select i1 %v2_1000c503, i32 %v2_1000c4ff, i32 %v3_1000c503
  store i32 %v5_1000c503, i32* %edi.global-to-local, align 4
  %v1_1000c506 = icmp eq i32 %v5_1000c503, 0
  %v1_1000c508 = icmp eq i1 %v1_1000c506, false
  %v2_1000c508 = zext i1 %v1_1000c508 to i32
  %v4_1000c508 = and i32 %v2_1000c4ff, -256
  %v5_1000c508 = or i32 %v2_1000c508, %v4_1000c508
  store i32 %v5_1000c508, i32* @ecx, align 4
  %v5_1000c50b = icmp eq i1 %v1_1000c508, false
  br i1 %v5_1000c50b, label %dec_label_pc_1000c53d, label %dec_label_pc_1000c50f

dec_label_pc_1000c50f:                            ; preds = %dec_label_pc_1000c4f9
  %v2_1000c50f = add i32 %v1_1000c50f, 32
  %v3_1000c50f = inttoptr i32 %v2_1000c50f to i32*
  %v4_1000c50f = load i32, i32* %v3_1000c50f, align 4
  %v5_1000c50f = sub i32 %v3_1000c4f9, %v4_1000c50f
  store i32 0, i32* @ecx, align 4
  %v2_1000c516 = add i32 %v5_1000c50f, %v1_1000c4bc
  store i32 %v2_1000c516, i32* %eax.global-to-local, align 4
  %tmp33 = icmp slt i32 %v5_1000c503, 1
  br i1 %tmp33, label %dec_label_pc_1000c536, label %dec_label_pc_1000c520.preheader

dec_label_pc_1000c520.preheader:                  ; preds = %dec_label_pc_1000c50f
  %v7_1000c520.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000c520

dec_label_pc_1000c520:                            ; preds = %dec_label_pc_1000c520.preheader, %dec_label_pc_1000c531
  %v7_1000c520 = phi i32 [ %v7_1000c520.pre, %dec_label_pc_1000c520.preheader ], [ %v9_1000c520, %dec_label_pc_1000c531 ]
  %v0_1000c560 = phi i32 [ 0, %dec_label_pc_1000c520.preheader ], [ %v1_1000c531, %dec_label_pc_1000c531 ]
  %v3_1000c520 = add i32 %v0_1000c560, %v2_1000c516
  %v4_1000c520 = inttoptr i32 %v3_1000c520 to i8*
  %v5_1000c520 = load i8, i8* %v4_1000c520, align 1
  %v6_1000c520 = zext i8 %v5_1000c520 to i32
  %v8_1000c520 = and i32 %v7_1000c520, -256
  %v9_1000c520 = or i32 %v6_1000c520, %v8_1000c520
  store i32 %v9_1000c520, i32* %edx.global-to-local, align 4
  %v11_1000c523 = icmp eq i8 %v5_1000c520, 10
  br i1 %v11_1000c523, label %dec_label_pc_1000c55f, label %dec_label_pc_1000c528

dec_label_pc_1000c528:                            ; preds = %dec_label_pc_1000c520
  %v11_1000c528 = icmp eq i8 %v5_1000c520, 13
  br i1 %v11_1000c528, label %dec_label_pc_1000c55f, label %dec_label_pc_1000c52d

dec_label_pc_1000c52d:                            ; preds = %dec_label_pc_1000c528
  %v5_1000c52d = icmp eq i8 %v5_1000c520, 0
  br i1 %v5_1000c52d, label %dec_label_pc_1000c554, label %dec_label_pc_1000c531

dec_label_pc_1000c531:                            ; preds = %dec_label_pc_1000c52d
  %v1_1000c531 = add nuw nsw i32 %v0_1000c560, 1
  store i32 %v1_1000c531, i32* @ecx, align 4
  %v5_1000c534 = icmp slt i32 %v1_1000c531, %v5_1000c503
  br i1 %v5_1000c534, label %dec_label_pc_1000c520, label %dec_label_pc_1000c536

dec_label_pc_1000c536:                            ; preds = %dec_label_pc_1000c531, %dec_label_pc_1000c50f
  %v2_1000c536 = add i32 %v5_1000c503, %v1_1000c4bc
  br label %dec_label_pc_1000c48a

dec_label_pc_1000c53d:                            ; preds = %dec_label_pc_1000c48a, %dec_label_pc_1000c4f9
  %v1_1000c53d = icmp eq i32 %v1_1000c4bc, 0
  %v1_1000c53f = icmp eq i1 %v1_1000c53d, false
  %v0_1000c54a = load i32, i32* @esp, align 4
  %v1_1000c54a = inttoptr i32 %v0_1000c54a to i32*
  %v2_1000c54a = load i32, i32* %v1_1000c54a, align 4
  store i32 %v2_1000c54a, i32* %edi.global-to-local, align 4
  %v3_1000c54a = add i32 %v0_1000c54a, 4
  br i1 %v1_1000c53f, label %dec_label_pc_1000c54a, label %dec_label_pc_1000c541

dec_label_pc_1000c541:                            ; preds = %dec_label_pc_1000c53d
  %v1_1000c542 = inttoptr i32 %v3_1000c54a to i32*
  %v2_1000c542 = load i32, i32* %v1_1000c542, align 4
  store i32 %v2_1000c542, i32* @ebx, align 4
  %v3_1000c542 = add i32 %v0_1000c54a, 8
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_1000c545 = inttoptr i32 %v3_1000c542 to i32*
  %v2_1000c545 = load i32, i32* %v1_1000c545, align 4
  store i32 %v2_1000c545, i32* @esi, align 4
  %v2_1000c548 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c548, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000c54a:                            ; preds = %dec_label_pc_1000c53d
  %v1_1000c54b = add i32 %v1_1000c4bc, 1
  store i32 %v1_1000c54b, i32* %eax.global-to-local, align 4
  %v1_1000c54e = inttoptr i32 %v3_1000c54a to i32*
  %v2_1000c54e = load i32, i32* %v1_1000c54e, align 4
  store i32 %v2_1000c54e, i32* @ebx, align 4
  %v3_1000c54e = add i32 %v0_1000c54a, 8
  %v1_1000c54f = inttoptr i32 %v3_1000c54e to i32*
  %v2_1000c54f = load i32, i32* %v1_1000c54f, align 4
  store i32 %v2_1000c54f, i32* @esi, align 4
  %v2_1000c552 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c552, i32* @ebp, align 4
  ret i32 %v1_1000c54b

dec_label_pc_1000c554:                            ; preds = %dec_label_pc_1000c52d
  %v0_1000c554 = load i32, i32* @esp, align 4
  %v1_1000c554 = inttoptr i32 %v0_1000c554 to i32*
  %v2_1000c554 = load i32, i32* %v1_1000c554, align 4
  store i32 %v2_1000c554, i32* %edi.global-to-local, align 4
  %v3_1000c554 = add i32 %v0_1000c554, 4
  %v3_1000c555 = add i32 %v1_1000c4bc, 1
  %v4_1000c555 = add i32 %v3_1000c555, %v0_1000c560
  store i32 %v4_1000c555, i32* %eax.global-to-local, align 4
  %v1_1000c559 = inttoptr i32 %v3_1000c554 to i32*
  %v2_1000c559 = load i32, i32* %v1_1000c559, align 4
  store i32 %v2_1000c559, i32* @ebx, align 4
  %v3_1000c559 = add i32 %v0_1000c554, 8
  %v1_1000c55a = inttoptr i32 %v3_1000c559 to i32*
  %v2_1000c55a = load i32, i32* %v1_1000c55a, align 4
  store i32 %v2_1000c55a, i32* @esi, align 4
  %v2_1000c55d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c55d, i32* @ebp, align 4
  ret i32 %v4_1000c555

dec_label_pc_1000c55f:                            ; preds = %dec_label_pc_1000c528, %dec_label_pc_1000c520
  %v0_1000c55f = load i32, i32* @esp, align 4
  %v1_1000c55f = inttoptr i32 %v0_1000c55f to i32*
  %v2_1000c55f = load i32, i32* %v1_1000c55f, align 4
  store i32 %v2_1000c55f, i32* %edi.global-to-local, align 4
  %v3_1000c55f = add i32 %v0_1000c55f, 4
  %v3_1000c560 = add i32 %v1_1000c4bc, 2
  %v4_1000c560 = add i32 %v3_1000c560, %v0_1000c560
  store i32 %v4_1000c560, i32* %eax.global-to-local, align 4
  %v1_1000c564 = inttoptr i32 %v3_1000c55f to i32*
  %v2_1000c564 = load i32, i32* %v1_1000c564, align 4
  store i32 %v2_1000c564, i32* @ebx, align 4
  %v3_1000c564 = add i32 %v0_1000c55f, 8
  %v1_1000c565 = inttoptr i32 %v3_1000c564 to i32*
  %v2_1000c565 = load i32, i32* %v1_1000c565, align 4
  store i32 %v2_1000c565, i32* @esi, align 4
  %v2_1000c568 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000c568, i32* @ebp, align 4
  ret i32 %v4_1000c560
}

define i32 @function_1000c570(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000c570:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000c573 = load i32, i32* @ebx, align 4
  %v0_1000c574 = load i32, i32* @esi, align 4
  store i32 %v0_1000c574, i32* %stack_var_-12, align 4
  %v0_1000c575 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c575, i32* @esi, align 4
  %v1_1000c577 = add i32 %v0_1000c575, 20
  %v2_1000c577 = inttoptr i32 %v1_1000c577 to i8*
  %v3_1000c577 = load i8, i8* %v2_1000c577, align 1
  %v4_1000c577 = and i8 %v3_1000c577, 2
  %v5_1000c577 = icmp eq i8 %v4_1000c577, 0
  %v0_1000c57b = load i32, i32* @edi, align 4
  store i32 %v0_1000c57b, i32* %stack_var_-16, align 4
  %v1_1000c57c = icmp eq i1 %v5_1000c577, false
  br i1 %v1_1000c57c, label %dec_label_pc_1000c570.dec_label_pc_1000c595_crit_edge, label %dec_label_pc_1000c57e

dec_label_pc_1000c570.dec_label_pc_1000c595_crit_edge: ; preds = %dec_label_pc_1000c570
  %v4_1000c57b = ptrtoint i32* %stack_var_-16 to i32
  %v11_1000c597.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000c595

dec_label_pc_1000c57e:                            ; preds = %dec_label_pc_1000c570
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v3_1000c584 = add i32 %arg3, %arg1
  store i32 %v3_1000c584, i32* @eax, align 4
  store i32 %v3_1000c584, i32* %stack_var_-20, align 4
  %v1_1000c588 = call i32 @function_1000bf20(i32 %v3_1000c584)
  store i32 %v1_1000c588, i32* %eax.global-to-local, align 4
  %v0_1000c58d = load i32, i32* @esi, align 4
  %v1_1000c58d = add i32 %v0_1000c58d, 20
  %v2_1000c58d = inttoptr i32 %v1_1000c58d to i8*
  %v3_1000c58d = load i8, i8* %v2_1000c58d, align 1
  %v4_1000c58d = and i8 %v3_1000c58d, -3
  store i8 %v4_1000c58d, i8* %v2_1000c58d, align 1
  %v0_1000c591 = load i32, i32* %eax.global-to-local, align 4
  %v4_1000c591 = trunc i32 %v0_1000c591 to i8
  %v5_1000c591 = icmp eq i8 %v4_1000c591, 0
  %v1_1000c593 = icmp eq i1 %v5_1000c591, false
  br i1 %v1_1000c593, label %dec_label_pc_1000c59e, label %dec_label_pc_1000c57e.dec_label_pc_1000c595_crit_edge

dec_label_pc_1000c57e.dec_label_pc_1000c595_crit_edge: ; preds = %dec_label_pc_1000c57e
  %v0_1000c595.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c595

dec_label_pc_1000c595:                            ; preds = %dec_label_pc_1000c570.dec_label_pc_1000c595_crit_edge, %dec_label_pc_1000c57e.dec_label_pc_1000c595_crit_edge
  %v11_1000c597 = phi i32 [ %v0_1000c591, %dec_label_pc_1000c57e.dec_label_pc_1000c595_crit_edge ], [ %v11_1000c597.pre, %dec_label_pc_1000c570.dec_label_pc_1000c595_crit_edge ]
  %v0_1000c595 = phi i32 [ %v0_1000c595.pre, %dec_label_pc_1000c57e.dec_label_pc_1000c595_crit_edge ], [ %v4_1000c57b, %dec_label_pc_1000c570.dec_label_pc_1000c595_crit_edge ]
  %v1_1000c595 = inttoptr i32 %v0_1000c595 to i32*
  %v2_1000c595 = load i32, i32* %v1_1000c595, align 4
  store i32 %v2_1000c595, i32* @edi, align 4
  %v3_1000c595 = add i32 %v0_1000c595, 4
  %v1_1000c596 = inttoptr i32 %v3_1000c595 to i32*
  %v2_1000c596 = load i32, i32* %v1_1000c596, align 4
  store i32 %v2_1000c596, i32* @esi, align 4
  %v3_1000c596 = add i32 %v0_1000c595, 8
  %v12_1000c597 = and i32 %v11_1000c597, -256
  store i32 %v12_1000c597, i32* %eax.global-to-local, align 4
  %v1_1000c599 = inttoptr i32 %v3_1000c596 to i32*
  %v2_1000c599 = load i32, i32* %v1_1000c599, align 4
  store i32 %v2_1000c599, i32* @ebx, align 4
  %v3_1000c599 = add i32 %v0_1000c595, 12
  %v1_1000c59a = inttoptr i32 %v3_1000c599 to i32*
  %v2_1000c59a = load i32, i32* %v1_1000c59a, align 4
  store i32 %v2_1000c59a, i32* @ebp, align 4
  ret i32 %v12_1000c597

dec_label_pc_1000c59e:                            ; preds = %dec_label_pc_1000c57e
  %v0_1000c59e = load i32, i32* @esi, align 4
  %v1_1000c59e = add i32 %v0_1000c59e, 12
  %v2_1000c59e = inttoptr i32 %v1_1000c59e to i32*
  %v3_1000c59e = load i32, i32* %v2_1000c59e, align 4
  store i32 %v3_1000c59e, i32* %eax.global-to-local, align 4
  %v2_1000c5a1 = add i32 %v0_1000c59e, 32
  %v3_1000c5a1 = inttoptr i32 %v2_1000c5a1 to i32*
  %v4_1000c5a1 = load i32, i32* %v3_1000c5a1, align 4
  %v5_1000c5a1 = sub i32 %v3_1000c59e, %v4_1000c5a1
  store i32 %arg2, i32* @ecx, align 4
  %v4_1000c5a7 = add i32 %v5_1000c5a1, %arg2
  %v0_1000c5a9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c5aa = load i32, i32* @edi, align 4
  %v2_1000c5aa = add i32 %v1_1000c5aa, %v4_1000c5a7
  store i32 %v2_1000c5aa, i32* @eax, align 4
  %v3_1000c5ae = call i32 @function_10009540(i32 %v2_1000c5aa, i32 %arg2, i32 %v0_1000c5a9)
  %v5_1000c5b6 = icmp eq i32 %v3_1000c5ae, 0
  %v2_1000c5b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000c5b8, i32* @edi, align 4
  %v2_1000c5bb = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000c5bb, i32* @esi, align 4
  %v1_1000c5bc = zext i1 %v5_1000c5b6 to i32
  store i32 %v1_1000c5bc, i32* %eax.global-to-local, align 4
  %v2_1000c5bd = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000c5bd, i32* @ebx, align 4
  store i32 %v0_1000c573, i32* @ebp, align 4
  ret i32 %v1_1000c5bc
}

define i32 @function_1000c5d0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000c5d0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = ptrtoint i32* %arg1 to i32
  %v0_1000c5d0 = load i32, i32* @ebp, align 4
  %v0_1000c5d3 = load i32, i32* @esi, align 4
  %v0_1000c5d4 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c5d4, i32* @esi, align 4
  %v1_1000c5d6 = add i32 %v0_1000c5d4, 20
  %v2_1000c5d6 = inttoptr i32 %v1_1000c5d6 to i8*
  %v3_1000c5d6 = load i8, i8* %v2_1000c5d6, align 1
  %v10_1000c5d6 = icmp eq i8 %v3_1000c5d6, 0
  br i1 %v10_1000c5d6, label %dec_label_pc_1000c5e7, label %dec_label_pc_1000c5dc

dec_label_pc_1000c5dc:                            ; preds = %dec_label_pc_1000c5d0
  store i32 %tmp9, i32* %eax.global-to-local, align 4
  %v1_1000c5df = bitcast i32* %arg1 to i8*
  store i8 0, i8* %v1_1000c5df, align 1
  store i32 %v0_1000c5d3, i32* @esi, align 4
  store i32 %v0_1000c5d0, i32* @ebp, align 4
  ret i32 %tmp9

dec_label_pc_1000c5e7:                            ; preds = %dec_label_pc_1000c5d0
  %v0_1000c5e7 = load i32, i32* @ebx, align 4
  %v1_1000c5eb = icmp eq i32 %arg2, 0
  %v1_1000c5ed = icmp eq i1 %v1_1000c5eb, false
  br i1 %v1_1000c5ed, label %dec_label_pc_1000c5f4, label %dec_label_pc_1000c5ef

dec_label_pc_1000c5ef:                            ; preds = %dec_label_pc_1000c5e7
  br label %dec_label_pc_1000c5f4

dec_label_pc_1000c5f4:                            ; preds = %dec_label_pc_1000c5ef, %dec_label_pc_1000c5e7
  %storemerge = phi i32 [ 2147483647, %dec_label_pc_1000c5ef ], [ %arg2, %dec_label_pc_1000c5e7 ]
  store i32 %storemerge, i32* @ebx, align 4
  %v0_1000c5f4 = load i32, i32* @edi, align 4
  %v4_1000c5f5 = call i32 @function_1000c470(i32 %v0_1000c5f4, i32 %v0_1000c5e7, i32 %v0_1000c5d3, i32 %v0_1000c5d0)
  store i32 %v4_1000c5f5, i32* @eax, align 4
  store i32 %v4_1000c5f5, i32* @edi, align 4
  %v1_1000c5fc = icmp eq i32 %v4_1000c5f5, 0
  %v1_1000c5fe = icmp eq i1 %v1_1000c5fc, false
  br i1 %v1_1000c5fe, label %dec_label_pc_1000c610, label %dec_label_pc_1000c600

dec_label_pc_1000c600:                            ; preds = %dec_label_pc_1000c5f4
  %v3_1000c5fc = trunc i32 %v4_1000c5f5 to i8
  store i32 %tmp9, i32* @ecx, align 4
  %v3_1000c603 = bitcast i32* %arg1 to i8*
  store i8 %v3_1000c5fc, i8* %v3_1000c603, align 1
  %v0_1000c605.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c605

dec_label_pc_1000c605:                            ; preds = %dec_label_pc_1000c681, %dec_label_pc_1000c600
  %v10_1000c605 = phi i32 [ %v0_1000c68f, %dec_label_pc_1000c681 ], [ %v0_1000c605.pre, %dec_label_pc_1000c600 ]
  %v1_1000c605 = add i32 %v10_1000c605, 20
  %v2_1000c605 = inttoptr i32 %v1_1000c605 to i8*
  %v3_1000c605 = load i8, i8* %v2_1000c605, align 1
  %v4_1000c605 = or i8 %v3_1000c605, 2
  store i8 %v4_1000c605, i8* %v2_1000c605, align 1
  %v0_1000c609 = load i32, i32* @esp, align 4
  %v1_1000c609 = inttoptr i32 %v0_1000c609 to i32*
  %v2_1000c609 = load i32, i32* %v1_1000c609, align 4
  store i32 %v2_1000c609, i32* @edi, align 4
  %v3_1000c609 = add i32 %v0_1000c609, 4
  %v1_1000c60a = inttoptr i32 %v3_1000c609 to i32*
  %v2_1000c60a = load i32, i32* %v1_1000c60a, align 4
  store i32 %v2_1000c60a, i32* @ebx, align 4
  %v3_1000c60a = add i32 %v0_1000c609, 8
  %v1_1000c60b = inttoptr i32 %v3_1000c60a to i32*
  %v2_1000c60b = load i32, i32* %v1_1000c60b, align 4
  store i32 %v2_1000c60b, i32* @esi, align 4
  %v3_1000c60b = add i32 %v0_1000c609, 12
  %v1_1000c60c = inttoptr i32 %v3_1000c60b to i32*
  %v2_1000c60c = load i32, i32* %v1_1000c60c, align 4
  store i32 %v2_1000c60c, i32* @ebp, align 4
  %v0_1000c60d = load i32, i32* @eax, align 4
  ret i32 %v0_1000c60d

dec_label_pc_1000c610:                            ; preds = %dec_label_pc_1000c5f4
  %v1_1000c610 = load i32, i32* @ebx, align 4
  %v8_1000c612 = icmp sgt i32 %v4_1000c5f5, %v1_1000c610
  br i1 %v8_1000c612, label %dec_label_pc_1000c64f, label %dec_label_pc_1000c614

dec_label_pc_1000c614:                            ; preds = %dec_label_pc_1000c610
  %v1_1000c614 = add i32 %v4_1000c5f5, -1
  %tmp29 = icmp slt i32 %v1_1000c614, 1
  br i1 %tmp29, label %dec_label_pc_1000c640, label %dec_label_pc_1000c61b

dec_label_pc_1000c61b:                            ; preds = %dec_label_pc_1000c614
  %v0_1000c61c = load i32, i32* @esi, align 4
  store i32 %v0_1000c61c, i32* @ecx, align 4
  %v1_1000c61e = call i32 @function_1000bf20(i32 %v1_1000c614)
  store i32 %v1_1000c61e, i32* @eax, align 4
  %v4_1000c623 = trunc i32 %v1_1000c61e to i8
  %v5_1000c623 = icmp eq i8 %v4_1000c623, 0
  br i1 %v5_1000c623, label %dec_label_pc_1000c640, label %dec_label_pc_1000c627

dec_label_pc_1000c627:                            ; preds = %dec_label_pc_1000c61b
  store i32 %tmp9, i32* %eax.global-to-local, align 4
  %v0_1000c635 = call i32 @_memcpy.1()
  store i32 %v0_1000c635, i32* @eax, align 4
  %v0_1000c63d = load i32, i32* @esi, align 4
  %v1_1000c63d = add i32 %v0_1000c63d, 12
  %v2_1000c63d = inttoptr i32 %v1_1000c63d to i32*
  %v3_1000c63d = load i32, i32* %v2_1000c63d, align 4
  %v5_1000c63d = add i32 %v3_1000c63d, %v1_1000c614
  store i32 %v5_1000c63d, i32* %v2_1000c63d, align 4
  br label %dec_label_pc_1000c640

dec_label_pc_1000c640:                            ; preds = %dec_label_pc_1000c627, %dec_label_pc_1000c61b, %dec_label_pc_1000c614
  store i32 %tmp9, i32* @ecx, align 4
  %v4_1000c643 = add i32 %v1_1000c614, %tmp9
  %v5_1000c643 = inttoptr i32 %v4_1000c643 to i8*
  store i8 0, i8* %v5_1000c643, align 1
  %v0_1000c648 = load i32, i32* @esp, align 4
  %v1_1000c648 = inttoptr i32 %v0_1000c648 to i32*
  %v2_1000c648 = load i32, i32* %v1_1000c648, align 4
  store i32 %v2_1000c648, i32* @edi, align 4
  %v3_1000c648 = add i32 %v0_1000c648, 4
  %v1_1000c649 = inttoptr i32 %v3_1000c648 to i32*
  %v2_1000c649 = load i32, i32* %v1_1000c649, align 4
  store i32 %v2_1000c649, i32* @ebx, align 4
  %v3_1000c649 = add i32 %v0_1000c648, 8
  %v1_1000c64a = inttoptr i32 %v3_1000c649 to i32*
  %v2_1000c64a = load i32, i32* %v1_1000c64a, align 4
  store i32 %v2_1000c64a, i32* @esi, align 4
  %v3_1000c64a = add i32 %v0_1000c648, 12
  %v1_1000c64b = inttoptr i32 %v3_1000c64a to i32*
  %v2_1000c64b = load i32, i32* %v1_1000c64b, align 4
  store i32 %v2_1000c64b, i32* @ebp, align 4
  %v0_1000c64c = load i32, i32* @eax, align 4
  ret i32 %v0_1000c64c

dec_label_pc_1000c64f:                            ; preds = %dec_label_pc_1000c610
  %v1_1000c64f = add i32 %v1_1000c610, -1
  store i32 %v1_1000c64f, i32* @eax, align 4
  %tmp30 = icmp slt i32 %v1_1000c64f, 1
  br i1 %tmp30, label %dec_label_pc_1000c681, label %dec_label_pc_1000c656

dec_label_pc_1000c656:                            ; preds = %dec_label_pc_1000c64f
  %v0_1000c657 = load i32, i32* @esi, align 4
  store i32 %v0_1000c657, i32* @ecx, align 4
  %v1_1000c659 = call i32 @function_1000bf20(i32 %v1_1000c64f)
  store i32 %v1_1000c659, i32* %eax.global-to-local, align 4
  %v4_1000c65e = trunc i32 %v1_1000c659 to i8
  %v5_1000c65e = icmp eq i8 %v4_1000c65e, 0
  br i1 %v5_1000c65e, label %dec_label_pc_1000c681, label %dec_label_pc_1000c662

dec_label_pc_1000c662:                            ; preds = %dec_label_pc_1000c656
  store i32 %tmp9, i32* %eax.global-to-local, align 4
  %v0_1000c673 = call i32 @_memcpy.1()
  %v0_1000c678 = load i32, i32* @ebx, align 4
  %v1_1000c678 = add i32 %v0_1000c678, -1
  store i32 %v1_1000c678, i32* %eax.global-to-local, align 4
  %v0_1000c67e = load i32, i32* @esi, align 4
  %v1_1000c67e = add i32 %v0_1000c67e, 12
  %v2_1000c67e = inttoptr i32 %v1_1000c67e to i32*
  %v3_1000c67e = load i32, i32* %v2_1000c67e, align 4
  %v5_1000c67e = add i32 %v3_1000c67e, %v1_1000c678
  store i32 %v5_1000c67e, i32* %v2_1000c67e, align 4
  br label %dec_label_pc_1000c681

dec_label_pc_1000c681:                            ; preds = %dec_label_pc_1000c662, %dec_label_pc_1000c656, %dec_label_pc_1000c64f
  store i32 %tmp9, i32* @ecx, align 4
  %v1_1000c684 = load i32, i32* @ebx, align 4
  %v2_1000c684 = sub i32 %v4_1000c5f5, %v1_1000c684
  store i32 %v2_1000c684, i32* %edi.global-to-local, align 4
  %v3_1000c686 = add i32 %tmp9, -1
  %v4_1000c686 = add i32 %v3_1000c686, %v1_1000c684
  %v5_1000c686 = inttoptr i32 %v4_1000c686 to i8*
  store i8 0, i8* %v5_1000c686, align 1
  %v0_1000c68b = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c68b = add i32 %v0_1000c68b, -1
  store i32 %v1_1000c68b, i32* %edi.global-to-local, align 4
  %v0_1000c68c = load i32, i32* @esi, align 4
  %v1_1000c68c = add i32 %v0_1000c68c, 12
  %v2_1000c68c = inttoptr i32 %v1_1000c68c to i32*
  %v3_1000c68c = load i32, i32* %v2_1000c68c, align 4
  %v5_1000c68c = add i32 %v3_1000c68c, %v1_1000c68b
  store i32 %v5_1000c68c, i32* %v2_1000c68c, align 4
  %v0_1000c68f = load i32, i32* @esi, align 4
  %v1_1000c68f = add i32 %v0_1000c68f, 12
  %v2_1000c68f = inttoptr i32 %v1_1000c68f to i32*
  %v3_1000c68f = load i32, i32* %v2_1000c68f, align 4
  store i32 %v3_1000c68f, i32* @eax, align 4
  %v2_1000c692 = add i32 %v0_1000c68f, 28
  %v3_1000c692 = inttoptr i32 %v2_1000c692 to i32*
  %v4_1000c692 = load i32, i32* %v3_1000c692, align 4
  %v8_1000c695 = icmp sgt i32 %v3_1000c68f, %v4_1000c692
  br i1 %v8_1000c695, label %dec_label_pc_1000c605, label %dec_label_pc_1000c69b

dec_label_pc_1000c69b:                            ; preds = %dec_label_pc_1000c681
  %v1_1000c69b = add i32 %v0_1000c68f, 32
  %v2_1000c69b = inttoptr i32 %v1_1000c69b to i32*
  %v3_1000c69b = load i32, i32* %v2_1000c69b, align 4
  store i32 %v3_1000c69b, i32* @ecx, align 4
  %v1_1000c69e = add i32 %v0_1000c68f, 20
  %v2_1000c69e = inttoptr i32 %v1_1000c69e to i8*
  %v3_1000c69e = load i8, i8* %v2_1000c69e, align 1
  %v4_1000c69e = and i8 %v3_1000c69e, -3
  store i8 %v4_1000c69e, i8* %v2_1000c69e, align 1
  %v0_1000c6a2 = load i32, i32* @eax, align 4
  %v1_1000c6a2 = load i32, i32* @ecx, align 4
  %v5_1000c6a4 = icmp slt i32 %v0_1000c6a2, %v1_1000c6a2
  %v0_1000c6af.pre = load i32, i32* @esi, align 4
  br i1 %v5_1000c6a4, label %dec_label_pc_1000c6af, label %dec_label_pc_1000c6a6

dec_label_pc_1000c6a6:                            ; preds = %dec_label_pc_1000c69b
  %v1_1000c6a6 = add i32 %v0_1000c6af.pre, 4
  %v2_1000c6a6 = inttoptr i32 %v1_1000c6a6 to i32*
  %v3_1000c6a6 = load i32, i32* %v2_1000c6a6, align 4
  %v2_1000c6a9 = add i32 %v3_1000c6a6, %v1_1000c6a2
  %v5_1000c6ad = icmp slt i32 %v0_1000c6a2, %v2_1000c6a9
  br i1 %v5_1000c6ad, label %dec_label_pc_1000c6a6.dec_label_pc_1000c6b8_crit_edge, label %dec_label_pc_1000c6af

dec_label_pc_1000c6a6.dec_label_pc_1000c6b8_crit_edge: ; preds = %dec_label_pc_1000c6a6
  %v0_1000c6b8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c6b8

dec_label_pc_1000c6af:                            ; preds = %dec_label_pc_1000c69b, %dec_label_pc_1000c6a6
  %v1_1000c6af = add i32 %v0_1000c6af.pre, 36
  %v2_1000c6af = inttoptr i32 %v1_1000c6af to i32*
  %v3_1000c6af = load i32, i32* %v2_1000c6af, align 4
  store i32 %v3_1000c6af, i32* %eax.global-to-local, align 4
  %v0_1000c6b2 = load i32, i32* @esp, align 4
  %v1_1000c6b2 = add i32 %v0_1000c6b2, -4
  %v2_1000c6b2 = inttoptr i32 %v1_1000c6b2 to i32*
  store i32 -1, i32* %v2_1000c6b2, align 4
  %v0_1000c6b4 = load i32, i32* @esi, align 4
  store i32 %v0_1000c6b4, i32* @ecx, align 4
  %v0_1000c6bc.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000c6b8

dec_label_pc_1000c6b8:                            ; preds = %dec_label_pc_1000c6a6.dec_label_pc_1000c6b8_crit_edge, %dec_label_pc_1000c6af
  %v0_1000c6bc = phi i32 [ %v0_1000c6a2, %dec_label_pc_1000c6a6.dec_label_pc_1000c6b8_crit_edge ], [ %v0_1000c6bc.pre, %dec_label_pc_1000c6af ]
  %v0_1000c6b8 = phi i32 [ %v0_1000c6b8.pre, %dec_label_pc_1000c6a6.dec_label_pc_1000c6b8_crit_edge ], [ %v1_1000c6b2, %dec_label_pc_1000c6af ]
  %v1_1000c6b8 = inttoptr i32 %v0_1000c6b8 to i32*
  %v2_1000c6b8 = load i32, i32* %v1_1000c6b8, align 4
  store i32 %v2_1000c6b8, i32* @edi, align 4
  %v3_1000c6b8 = add i32 %v0_1000c6b8, 4
  %v1_1000c6b9 = inttoptr i32 %v3_1000c6b8 to i32*
  %v2_1000c6b9 = load i32, i32* %v1_1000c6b9, align 4
  store i32 %v2_1000c6b9, i32* @ebx, align 4
  %v3_1000c6b9 = add i32 %v0_1000c6b8, 8
  %v1_1000c6ba = inttoptr i32 %v3_1000c6b9 to i32*
  %v2_1000c6ba = load i32, i32* %v1_1000c6ba, align 4
  store i32 %v2_1000c6ba, i32* @esi, align 4
  %v3_1000c6ba = add i32 %v0_1000c6b8, 12
  %v1_1000c6bb = inttoptr i32 %v3_1000c6ba to i32*
  %v2_1000c6bb = load i32, i32* %v1_1000c6bb, align 4
  store i32 %v2_1000c6bb, i32* @ebp, align 4
  ret i32 %v0_1000c6bc
}

define i32 @function_1000c6c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000c6c0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000c6c3 = load i32, i32* @esi, align 4
  %v0_1000c6c4 = load i32, i32* @edi, align 4
  store i32 %v0_1000c6c4, i32* %stack_var_-12, align 4
  %v4_1000c6c4 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v0_1000c6c8 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c6c8, i32* @esi, align 4
  %v1_1000c6ca = icmp eq i32 %arg2, 0
  br i1 %v1_1000c6ca, label %dec_label_pc_1000c75e, label %dec_label_pc_1000c6d2

dec_label_pc_1000c6d2:                            ; preds = %dec_label_pc_1000c6c0
  %v1_1000c6d2 = add i32 %v0_1000c6c8, 20
  %v2_1000c6d2 = inttoptr i32 %v1_1000c6d2 to i8*
  %v3_1000c6d2 = load i8, i8* %v2_1000c6d2, align 1
  %v4_1000c6d2 = and i8 %v3_1000c6d2, 1
  %v5_1000c6d2 = icmp eq i8 %v4_1000c6d2, 0
  %v1_1000c6d6 = icmp eq i1 %v5_1000c6d2, false
  br i1 %v1_1000c6d6, label %dec_label_pc_1000c75e, label %dec_label_pc_1000c6dc

dec_label_pc_1000c6dc:                            ; preds = %dec_label_pc_1000c6d2
  %v1_1000c6dc = add i32 %v0_1000c6c8, 21
  %v2_1000c6dc = inttoptr i32 %v1_1000c6dc to i8*
  %v3_1000c6dc = load i8, i8* %v2_1000c6dc, align 1
  %v4_1000c6dc = and i8 %v3_1000c6dc, 8
  %v5_1000c6dc = icmp eq i8 %v4_1000c6dc, 0
  %v1_1000c6e0 = icmp eq i1 %v5_1000c6dc, false
  br i1 %v1_1000c6e0, label %dec_label_pc_1000c75e, label %dec_label_pc_1000c6e2

dec_label_pc_1000c6e2:                            ; preds = %dec_label_pc_1000c6dc
  %v1_1000c6e2 = add i32 %v0_1000c6c8, 16
  %v2_1000c6e2 = inttoptr i32 %v1_1000c6e2 to i32*
  %v3_1000c6e2 = load i32, i32* %v2_1000c6e2, align 4
  store i32 %v3_1000c6e2, i32* %eax.global-to-local, align 4
  %v1_1000c6e5 = add i32 %v0_1000c6c8, 32
  %v2_1000c6e5 = inttoptr i32 %v1_1000c6e5 to i32*
  %v3_1000c6e5 = load i32, i32* %v2_1000c6e5, align 4
  store i32 %v3_1000c6e5, i32* @ecx, align 4
  %v5_1000c6ea = icmp slt i32 %v3_1000c6e2, %v3_1000c6e5
  br i1 %v5_1000c6ea, label %dec_label_pc_1000c6f5, label %dec_label_pc_1000c6ec

dec_label_pc_1000c6ec:                            ; preds = %dec_label_pc_1000c6e2
  %v2_1000c6e8 = sub i32 %v3_1000c6e2, %v3_1000c6e5
  %v2_1000c6ee = add i32 %v2_1000c6e8, %arg2
  store i32 %v2_1000c6ee, i32* %eax.global-to-local, align 4
  %v1_1000c6f0 = add i32 %v0_1000c6c8, 4
  %v2_1000c6f0 = inttoptr i32 %v1_1000c6f0 to i32*
  %v3_1000c6f0 = load i32, i32* %v2_1000c6f0, align 4
  %v5_1000c6f3 = icmp slt i32 %v3_1000c6f0, %v2_1000c6ee
  br i1 %v5_1000c6f3, label %dec_label_pc_1000c6f5, label %dec_label_pc_1000c70b

dec_label_pc_1000c6f5:                            ; preds = %dec_label_pc_1000c6ec, %dec_label_pc_1000c6e2
  %v1_1000c6f5 = add i32 %v0_1000c6c8, 40
  %v2_1000c6f5 = inttoptr i32 %v1_1000c6f5 to i32*
  %v3_1000c6f5 = load i32, i32* %v2_1000c6f5, align 4
  store i32 %v3_1000c6f5, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-16, align 4
  %v4_1000c6f8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v0_1000c6c8, i32* @ecx, align 4
  %v4_1000c6fd = trunc i32 %v3_1000c6f5 to i8
  %v5_1000c6fd = icmp eq i8 %v4_1000c6fd, 0
  %v1_1000c6ff = icmp eq i1 %v5_1000c6fd, false
  br i1 %v1_1000c6ff, label %dec_label_pc_1000c70b, label %dec_label_pc_1000c701

dec_label_pc_1000c701:                            ; preds = %dec_label_pc_1000c6f5
  %v3_1000c701 = load i8, i8* %v2_1000c6d2, align 1
  %v4_1000c701 = or i8 %v3_1000c701, 1
  store i8 %v4_1000c701, i8* %v2_1000c6d2, align 1
  %v2_1000c705 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000c705, i32* @edi, align 4
  store i32 %v0_1000c6c3, i32* @ebp, align 4
  %v0_1000c708 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c708

dec_label_pc_1000c70b:                            ; preds = %dec_label_pc_1000c6f5, %dec_label_pc_1000c6ec
  %v1_1000c716 = phi i32 [ %v4_1000c6c4, %dec_label_pc_1000c6ec ], [ %v4_1000c6f8, %dec_label_pc_1000c6f5 ]
  %v3_1000c70b = load i32, i32* %v2_1000c6e2, align 4
  store i32 %v3_1000c70b, i32* %edx.global-to-local, align 4
  %v4_1000c70e = load i32, i32* %v2_1000c6e5, align 4
  %v5_1000c70e = sub i32 %v3_1000c70b, %v4_1000c70e
  store i32 %arg1, i32* @ecx, align 4
  %v4_1000c714 = add i32 %v5_1000c70e, %arg1
  store i32 %v4_1000c714, i32* %edx.global-to-local, align 4
  %v2_1000c716 = add i32 %v1_1000c716, -4
  %v3_1000c716 = inttoptr i32 %v2_1000c716 to i32*
  store i32 %arg2, i32* %v3_1000c716, align 4
  %v0_1000c717 = load i32, i32* @ecx, align 4
  %v2_1000c717 = add i32 %v1_1000c716, -8
  %v3_1000c717 = inttoptr i32 %v2_1000c717 to i32*
  store i32 %v0_1000c717, i32* %v3_1000c717, align 4
  %v0_1000c718 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000c718 = add i32 %v1_1000c716, -12
  %v3_1000c718 = inttoptr i32 %v2_1000c718 to i32*
  store i32 %v0_1000c718, i32* %v3_1000c718, align 4
  %v0_1000c719 = call i32 @_memcpy.1()
  store i32 %v0_1000c719, i32* @eax, align 4
  %v0_1000c71e = load i32, i32* @esi, align 4
  %v1_1000c71e = add i32 %v0_1000c71e, 16
  %v2_1000c71e = inttoptr i32 %v1_1000c71e to i32*
  %v3_1000c71e = load i32, i32* %v2_1000c71e, align 4
  %v5_1000c71e = add i32 %v3_1000c71e, %arg2
  store i32 %v5_1000c71e, i32* %v2_1000c71e, align 4
  %v0_1000c721 = load i32, i32* @esi, align 4
  %v1_1000c721 = add i32 %v0_1000c721, 16
  %v2_1000c721 = inttoptr i32 %v1_1000c721 to i32*
  %v3_1000c721 = load i32, i32* %v2_1000c721, align 4
  store i32 %v3_1000c721, i32* %edi.global-to-local, align 4
  %v0_1000c724 = load i32, i32* @esp, align 4
  %v1_1000c724 = add i32 %v0_1000c724, 12
  %v2_1000c727 = add i32 %v0_1000c721, 28
  %v3_1000c727 = inttoptr i32 %v2_1000c727 to i32*
  %v4_1000c727 = load i32, i32* %v3_1000c727, align 4
  %v7_1000c72a = icmp sgt i32 %v3_1000c721, %v4_1000c727
  br i1 %v7_1000c72a, label %dec_label_pc_1000c72c, label %dec_label_pc_1000c75e

dec_label_pc_1000c72c:                            ; preds = %dec_label_pc_1000c70b
  %v1_1000c72c = add i32 %v0_1000c721, 21
  %v2_1000c72c = inttoptr i32 %v1_1000c72c to i8*
  %v3_1000c72c = load i8, i8* %v2_1000c72c, align 1
  %v4_1000c72c = and i8 %v3_1000c72c, 8
  %v5_1000c72c = icmp eq i8 %v4_1000c72c, 0
  %v1_1000c730 = icmp eq i1 %v5_1000c72c, false
  br i1 %v1_1000c730, label %dec_label_pc_1000c75b, label %dec_label_pc_1000c732

dec_label_pc_1000c732:                            ; preds = %dec_label_pc_1000c72c
  %v1_1000c732 = add i32 %v0_1000c721, 20
  %v2_1000c732 = inttoptr i32 %v1_1000c732 to i8*
  %v3_1000c732 = load i8, i8* %v2_1000c732, align 1
  %v4_1000c732 = and i8 %v3_1000c732, 1
  %v5_1000c732 = icmp eq i8 %v4_1000c732, 0
  %v1_1000c736 = icmp eq i1 %v5_1000c732, false
  br i1 %v1_1000c736, label %dec_label_pc_1000c75b, label %dec_label_pc_1000c738

dec_label_pc_1000c738:                            ; preds = %dec_label_pc_1000c732
  %v1_1000c738 = add i32 %v0_1000c724, 8
  %v2_1000c738 = inttoptr i32 %v1_1000c738 to i32*
  store i32 1, i32* %v2_1000c738, align 4
  %v0_1000c73a = load i32, i32* @esi, align 4
  store i32 %v0_1000c73a, i32* @ecx, align 4
  %v1_1000c73c = call i32 @function_1000c090(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000c73c, i32* @eax, align 4
  %v4_1000c741 = trunc i32 %v1_1000c73c to i8
  %v5_1000c741 = icmp eq i8 %v4_1000c741, 0
  br i1 %v5_1000c741, label %dec_label_pc_1000c757, label %dec_label_pc_1000c745

dec_label_pc_1000c745:                            ; preds = %dec_label_pc_1000c738
  %v2_1000c745 = load i32, i32* @ecx, align 4
  store i32 %v2_1000c745, i32* %eax.global-to-local, align 4
  %v1_1000c747 = load i32, i32* @esi, align 4
  %v2_1000c747 = add i32 %v1_1000c747, 32
  %v3_1000c747 = inttoptr i32 %v2_1000c747 to i32*
  %v4_1000c747 = load i32, i32* %v3_1000c747, align 4
  %v5_1000c747 = sub i32 %v2_1000c745, %v4_1000c747
  store i32 %v5_1000c747, i32* %eax.global-to-local, align 4
  %v1_1000c74a = load i32, i32* %edi.global-to-local, align 4
  %v3_1000c74a = add i32 %v1_1000c74a, %v5_1000c747
  %v4_1000c74a = inttoptr i32 %v3_1000c74a to i8*
  store i8 0, i8* %v4_1000c74a, align 1
  %v0_1000c74e = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c74e = load i32, i32* @esi, align 4
  %v2_1000c74e = add i32 %v1_1000c74e, 28
  %v3_1000c74e = inttoptr i32 %v2_1000c74e to i32*
  store i32 %v0_1000c74e, i32* %v3_1000c74e, align 4
  %v0_1000c751 = load i32, i32* @esp, align 4
  %v1_1000c751 = inttoptr i32 %v0_1000c751 to i32*
  %v2_1000c751 = load i32, i32* %v1_1000c751, align 4
  store i32 %v2_1000c751, i32* @edi, align 4
  %v3_1000c752 = add i32 %v0_1000c751, 8
  %v1_1000c753 = inttoptr i32 %v3_1000c752 to i32*
  %v2_1000c753 = load i32, i32* %v1_1000c753, align 4
  store i32 %v2_1000c753, i32* @ebp, align 4
  %v0_1000c754 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c754

dec_label_pc_1000c757:                            ; preds = %dec_label_pc_1000c738
  %v0_1000c757 = load i32, i32* @esi, align 4
  %v1_1000c757 = add i32 %v0_1000c757, 20
  %v2_1000c757 = inttoptr i32 %v1_1000c757 to i8*
  %v3_1000c757 = load i8, i8* %v2_1000c757, align 1
  %v4_1000c757 = and i8 %v3_1000c757, -2
  store i8 %v4_1000c757, i8* %v2_1000c757, align 1
  %v0_1000c75b.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c75b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c75b

dec_label_pc_1000c75b:                            ; preds = %dec_label_pc_1000c757, %dec_label_pc_1000c732, %dec_label_pc_1000c72c
  %v1_1000c75b = phi i32 [ %v1_1000c75b.pre, %dec_label_pc_1000c757 ], [ %v0_1000c721, %dec_label_pc_1000c732 ], [ %v0_1000c721, %dec_label_pc_1000c72c ]
  %v0_1000c75b = phi i32 [ %v0_1000c75b.pre, %dec_label_pc_1000c757 ], [ %v3_1000c721, %dec_label_pc_1000c732 ], [ %v3_1000c721, %dec_label_pc_1000c72c ]
  %v2_1000c75b = add i32 %v1_1000c75b, 28
  %v3_1000c75b = inttoptr i32 %v2_1000c75b to i32*
  store i32 %v0_1000c75b, i32* %v3_1000c75b, align 4
  %v0_1000c75e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c75e

dec_label_pc_1000c75e:                            ; preds = %dec_label_pc_1000c70b, %dec_label_pc_1000c75b, %dec_label_pc_1000c6dc, %dec_label_pc_1000c6d2, %dec_label_pc_1000c6c0
  %v0_1000c75e = phi i32 [ %v1_1000c724, %dec_label_pc_1000c70b ], [ %v0_1000c75e.pre, %dec_label_pc_1000c75b ], [ %v4_1000c6c4, %dec_label_pc_1000c6dc ], [ %v4_1000c6c4, %dec_label_pc_1000c6d2 ], [ %v4_1000c6c4, %dec_label_pc_1000c6c0 ]
  %v1_1000c75e = inttoptr i32 %v0_1000c75e to i32*
  %v2_1000c75e = load i32, i32* %v1_1000c75e, align 4
  store i32 %v2_1000c75e, i32* @edi, align 4
  %v3_1000c75f = add i32 %v0_1000c75e, 8
  %v1_1000c760 = inttoptr i32 %v3_1000c75f to i32*
  %v2_1000c760 = load i32, i32* %v1_1000c760, align 4
  store i32 %v2_1000c760, i32* @ebp, align 4
  %v0_1000c761 = load i32, i32* @eax, align 4
  ret i32 %v0_1000c761
}

define i32 @function_1000c770(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000c770:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000c770 = load i32, i32* @ebp, align 4
  %v0_1000c773 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000c773, i32* %stack_var_-8, align 4
  %v4_1000c773 = ptrtoint i32* %stack_var_-8 to i32
  %v0_1000c774 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c774, i32* @esi, align 4
  %v1_1000c776 = add i32 %v0_1000c774, 8
  %v2_1000c776 = inttoptr i32 %v1_1000c776 to i32*
  %v3_1000c776 = load i32, i32* %v2_1000c776, align 4
  %v11_1000c776 = icmp slt i32 %v3_1000c776, 0
  %v2_1000c77a = icmp eq i1 %v11_1000c776, false
  br i1 %v2_1000c77a, label %dec_label_pc_1000c790, label %dec_label_pc_1000c77c

dec_label_pc_1000c77c:                            ; preds = %dec_label_pc_1000c770
  %v1_1000c77c = add i32 %v0_1000c774, 21
  %v2_1000c77c = inttoptr i32 %v1_1000c77c to i8*
  %v3_1000c77c = load i8, i8* %v2_1000c77c, align 1
  %v4_1000c77c = and i8 %v3_1000c77c, 2
  %v5_1000c77c = icmp eq i8 %v4_1000c77c, 0
  %v1_1000c780 = icmp eq i1 %v5_1000c77c, false
  br i1 %v1_1000c780, label %dec_label_pc_1000c789, label %dec_label_pc_1000c782

dec_label_pc_1000c782:                            ; preds = %dec_label_pc_1000c77c
  %v11_1000c782 = load i32, i32* @eax, align 4
  %v12_1000c782 = and i32 %v11_1000c782, -256
  store i32 %v12_1000c782, i32* %eax.global-to-local, align 4
  store i32 %v0_1000c773, i32* %esi.global-to-local, align 4
  ret i32 %v12_1000c782

dec_label_pc_1000c789:                            ; preds = %dec_label_pc_1000c77c
  %v3_1000c78b = call i32 @function_1000c130(i32 0, i32 %v0_1000c773, i32 %v0_1000c770)
  store i32 %v3_1000c78b, i32* %eax.global-to-local, align 4
  %v0_1000c790.pre = load i32, i32* @esi, align 4
  %v1_1000c796.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000c790

dec_label_pc_1000c790:                            ; preds = %dec_label_pc_1000c789, %dec_label_pc_1000c770
  %v1_1000c796 = phi i32 [ %v1_1000c796.pre, %dec_label_pc_1000c789 ], [ %v4_1000c773, %dec_label_pc_1000c770 ]
  %v0_1000c790 = phi i32 [ %v0_1000c790.pre, %dec_label_pc_1000c789 ], [ %v0_1000c774, %dec_label_pc_1000c770 ]
  %v1_1000c790 = add i32 %v0_1000c790, 16
  %v2_1000c790 = inttoptr i32 %v1_1000c790 to i32*
  %v3_1000c790 = load i32, i32* %v2_1000c790, align 4
  store i32 %v3_1000c790, i32* %eax.global-to-local, align 4
  %v2_1000c793 = add i32 %v0_1000c790, 32
  %v3_1000c793 = inttoptr i32 %v2_1000c793 to i32*
  %v4_1000c793 = load i32, i32* %v3_1000c793, align 4
  %v5_1000c793 = sub i32 %v3_1000c790, %v4_1000c793
  store i32 %v5_1000c793, i32* %eax.global-to-local, align 4
  %v0_1000c796 = load i32, i32* @edi, align 4
  %v2_1000c796 = add i32 %v1_1000c796, -4
  %v3_1000c796 = inttoptr i32 %v2_1000c796 to i32*
  store i32 %v0_1000c796, i32* %v3_1000c796, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_1000c79a = load i32, i32* %eax.global-to-local, align 4
  %v2_1000c79a = add i32 %v0_1000c79a, %arg1
  store i32 %v2_1000c79a, i32* @eax, align 4
  %v0_1000c79c = load i32, i32* @esi, align 4
  %v1_1000c79c = add i32 %v0_1000c79c, 4
  %v2_1000c79c = inttoptr i32 %v1_1000c79c to i32*
  %v3_1000c79c = load i32, i32* %v2_1000c79c, align 4
  %v5_1000c79f = icmp slt i32 %v3_1000c79c, %v2_1000c79a
  br i1 %v5_1000c79f, label %dec_label_pc_1000c7a1, label %dec_label_pc_1000c7b7

dec_label_pc_1000c7a1:                            ; preds = %dec_label_pc_1000c790, %dec_label_pc_1000c7a1
  %v0_1000c7a1 = phi i32 [ %v0_1000c7a1.pre, %dec_label_pc_1000c7a1 ], [ %v2_1000c796, %dec_label_pc_1000c790 ]
  %v1_1000c7a1 = add i32 %v0_1000c7a1, -4
  %v2_1000c7a1 = inttoptr i32 %v1_1000c7a1 to i32*
  store i32 1, i32* %v2_1000c7a1, align 4
  %v0_1000c7a3 = load i32, i32* @esi, align 4
  store i32 %v0_1000c7a3, i32* @ecx, align 4
  %v1_1000c7a5 = call i32 @function_1000c180(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000c7a5, i32* @eax, align 4
  %v0_1000c7aa = load i32, i32* @esi, align 4
  %v1_1000c7aa = add i32 %v0_1000c7aa, 16
  %v2_1000c7aa = inttoptr i32 %v1_1000c7aa to i32*
  %v3_1000c7aa = load i32, i32* %v2_1000c7aa, align 4
  store i32 %v3_1000c7aa, i32* @ecx, align 4
  %v2_1000c7ad = add i32 %v0_1000c7aa, 32
  %v3_1000c7ad = inttoptr i32 %v2_1000c7ad to i32*
  %v4_1000c7ad = load i32, i32* %v3_1000c7ad, align 4
  %v5_1000c7ad = sub i32 %v3_1000c7aa, %v4_1000c7ad
  %v1_1000c7b0 = load i32, i32* @edi, align 4
  %v2_1000c7b0 = add i32 %v1_1000c7b0, %v5_1000c7ad
  store i32 %v2_1000c7b0, i32* @ecx, align 4
  %v1_1000c7b2 = add i32 %v0_1000c7aa, 4
  %v2_1000c7b2 = inttoptr i32 %v1_1000c7b2 to i32*
  %v3_1000c7b2 = load i32, i32* %v2_1000c7b2, align 4
  %v5_1000c7b5 = icmp slt i32 %v3_1000c7b2, %v2_1000c7b0
  %v0_1000c7a1.pre = load i32, i32* @esp, align 4
  br i1 %v5_1000c7b5, label %dec_label_pc_1000c7a1, label %dec_label_pc_1000c7b7

dec_label_pc_1000c7b7:                            ; preds = %dec_label_pc_1000c7a1, %dec_label_pc_1000c790
  %v0_1000c7b8 = phi i32 [ %v2_1000c79a, %dec_label_pc_1000c790 ], [ %v1_1000c7a5, %dec_label_pc_1000c7a1 ]
  %v0_1000c7b7 = phi i32 [ %v2_1000c796, %dec_label_pc_1000c790 ], [ %v0_1000c7a1.pre, %dec_label_pc_1000c7a1 ]
  %v3_1000c7b7 = add i32 %v0_1000c7b7, 4
  %v1_1000c7b8 = and i32 %v0_1000c7b8, -256
  %v2_1000c7b8 = or i32 %v1_1000c7b8, 1
  store i32 %v2_1000c7b8, i32* %eax.global-to-local, align 4
  %v1_1000c7ba = inttoptr i32 %v3_1000c7b7 to i32*
  %v2_1000c7ba = load i32, i32* %v1_1000c7ba, align 4
  store i32 %v2_1000c7ba, i32* %esi.global-to-local, align 4
  ret i32 %v2_1000c7b8
}

define i32 @function_1000c7c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000c7c0:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_1000c7c6 = load i32, i32* @esi, align 4
  store i32 %v0_1000c7c6, i32* %stack_var_-12, align 4
  %v0_1000c7c7 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c7c7, i32* @esi, align 4
  %v2_1000c7c9 = add i32 %v0_1000c7c7, 8
  %v3_1000c7c9 = inttoptr i32 %v2_1000c7c9 to i32*
  store i32 0, i32* %v3_1000c7c9, align 4
  %v0_1000c7cc = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c7cc = load i32, i32* @esi, align 4
  %v2_1000c7cc = inttoptr i32 %v1_1000c7cc to i32*
  store i32 %v0_1000c7cc, i32* %v2_1000c7cc, align 4
  %v0_1000c7ce = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c7ce = load i32, i32* @esi, align 4
  %v2_1000c7ce = add i32 %v1_1000c7ce, 4
  %v3_1000c7ce = inttoptr i32 %v2_1000c7ce to i32*
  store i32 %v0_1000c7ce, i32* %v3_1000c7ce, align 4
  %v0_1000c7d1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c7d1 = trunc i32 %v0_1000c7d1 to i8
  %v2_1000c7d1 = load i32, i32* @esi, align 4
  %v3_1000c7d1 = add i32 %v2_1000c7d1, 20
  %v4_1000c7d1 = inttoptr i32 %v3_1000c7d1 to i8*
  store i8 %v1_1000c7d1, i8* %v4_1000c7d1, align 1
  %v0_1000c7d4 = load i32, i32* @esi, align 4
  %v1_1000c7d4 = add i32 %v0_1000c7d4, 44
  %v2_1000c7d4 = inttoptr i32 %v1_1000c7d4 to i32*
  %v3_1000c7d4 = load i32, i32* %v2_1000c7d4, align 4
  %v4_1000c7d4 = and i32 %v3_1000c7d4, -4
  store i32 %v4_1000c7d4, i32* %v2_1000c7d4, align 4
  %v0_1000c7d8 = load i32, i32* @esi, align 4
  %v1_1000c7d8 = add i32 %v0_1000c7d8, 8
  %v2_1000c7d8 = inttoptr i32 %v1_1000c7d8 to i32*
  %v3_1000c7d8 = load i32, i32* %v2_1000c7d8, align 4
  %v4_1000c7d8 = load i32, i32* %ebx.global-to-local, align 4
  %v15_1000c7d8 = icmp eq i32 %v3_1000c7d8, %v4_1000c7d8
  store i1 %v15_1000c7d8, i1* %zf.global-to-local, align 1
  %v5_1000c7db = icmp slt i32 %v3_1000c7d8, %v4_1000c7d8
  br i1 %v5_1000c7db, label %dec_label_pc_1000c7f8, label %dec_label_pc_1000c7dd

dec_label_pc_1000c7dd:                            ; preds = %dec_label_pc_1000c7c0
  %v2_1000c7dd = load i32, i32* @ecx, align 4
  store i32 %v2_1000c7dd, i32* @eax, align 4
  %v12_1000c7df = icmp eq i32 %v2_1000c7dd, %v4_1000c7d8
  store i1 %v12_1000c7df, i1* %zf.global-to-local, align 1
  br i1 %v12_1000c7df, label %dec_label_pc_1000c7f5, label %dec_label_pc_1000c7e3

dec_label_pc_1000c7e3:                            ; preds = %dec_label_pc_1000c7dd
  %v0_1000c7e3 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000c7e3, i32* @ecx, align 4
  %v1_1000c7e9 = inttoptr i32 %v0_1000c7e3 to i32*
  %v2_1000c7e9 = load i32, i32* %v1_1000c7e9, align 4
  store i32 %v2_1000c7e9, i32* @ecx, align 4
  %v1_1000c7eb = inttoptr i32 %v2_1000c7e9 to i32*
  %v2_1000c7eb = load i32, i32* %v1_1000c7eb, align 4
  %v1_1000c7ee = add i32 %v2_1000c7eb, 20
  %v2_1000c7ee = inttoptr i32 %v1_1000c7ee to i32*
  %v3_1000c7ee = load i32, i32* %v2_1000c7ee, align 4
  store i32 %v3_1000c7ee, i32* @eax, align 4
  %v2_1000c7f3 = inttoptr i32 %v0_1000c7d8 to i32*
  store i32 %v4_1000c7d8, i32* %v2_1000c7f3, align 4
  %v0_1000c7f5.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c7f5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c7f5

dec_label_pc_1000c7f5:                            ; preds = %dec_label_pc_1000c7e3, %dec_label_pc_1000c7dd
  %v1_1000c7f5 = phi i32 [ %v1_1000c7f5.pre, %dec_label_pc_1000c7e3 ], [ %v0_1000c7d8, %dec_label_pc_1000c7dd ]
  %v0_1000c7f5 = phi i32 [ %v0_1000c7f5.pre, %dec_label_pc_1000c7e3 ], [ %v4_1000c7d8, %dec_label_pc_1000c7dd ]
  %v2_1000c7f5 = add i32 %v1_1000c7f5, 4
  %v3_1000c7f5 = inttoptr i32 %v2_1000c7f5 to i32*
  store i32 %v0_1000c7f5, i32* %v3_1000c7f5, align 4
  br label %dec_label_pc_1000c7f8

dec_label_pc_1000c7f8:                            ; preds = %dec_label_pc_1000c7f5, %dec_label_pc_1000c7c0
  store i32 %arg1, i32* @ecx, align 4
  %v0_1000c7fb = load i32, i32* @edi, align 4
  %v1_1000c7fb = load i32, i32* @esp, align 4
  %v2_1000c7fb = add i32 %v1_1000c7fb, -4
  %v3_1000c7fb = inttoptr i32 %v2_1000c7fb to i32*
  store i32 %v0_1000c7fb, i32* %v3_1000c7fb, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v0_1000c7ff = load i32, i32* @ecx, align 4
  %v1_1000c7ff = load i32, i32* @esi, align 4
  %v2_1000c7ff = add i32 %v1_1000c7ff, 8
  %v3_1000c7ff = inttoptr i32 %v2_1000c7ff to i32*
  store i32 %v0_1000c7ff, i32* %v3_1000c7ff, align 4
  %v0_1000c802 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c802 = load i32, i32* @esi, align 4
  %v2_1000c802 = add i32 %v1_1000c802, 4
  %v3_1000c802 = inttoptr i32 %v2_1000c802 to i32*
  store i32 %v0_1000c802, i32* %v3_1000c802, align 4
  %v0_1000c805 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c805 = load i32, i32* %ebx.global-to-local, align 4
  %v12_1000c805 = icmp eq i32 %v0_1000c805, %v1_1000c805
  store i1 %v12_1000c805, i1* %zf.global-to-local, align 1
  br i1 %v12_1000c805, label %dec_label_pc_1000c81b, label %dec_label_pc_1000c809

dec_label_pc_1000c809:                            ; preds = %dec_label_pc_1000c7f8
  %v0_1000c809 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_1000c80f = inttoptr i32 %v0_1000c809 to i32*
  %v2_1000c80f = load i32, i32* %v1_1000c80f, align 4
  store i32 %v2_1000c80f, i32* @ecx, align 4
  %v1_1000c811 = inttoptr i32 %v2_1000c80f to i32*
  %v2_1000c811 = load i32, i32* %v1_1000c811, align 4
  store i32 %v2_1000c811, i32* @eax, align 4
  %v1_1000c816 = load i32, i32* @esp, align 4
  %v2_1000c816 = add i32 %v1_1000c816, -4
  %v3_1000c816 = inttoptr i32 %v2_1000c816 to i32*
  store i32 %v0_1000c805, i32* %v3_1000c816, align 4
  %v0_1000c819 = load i32, i32* @eax, align 4
  %v1_1000c819 = load i32, i32* @esi, align 4
  %v2_1000c819 = inttoptr i32 %v1_1000c819 to i32*
  store i32 %v0_1000c819, i32* %v2_1000c819, align 4
  %v0_1000c81e.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c81e.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000c81b

dec_label_pc_1000c81b:                            ; preds = %dec_label_pc_1000c809, %dec_label_pc_1000c7f8
  %v0_1000c820 = phi i32 [ %v1_1000c81e.pre, %dec_label_pc_1000c809 ], [ %v1_1000c805, %dec_label_pc_1000c7f8 ]
  %v0_1000c81e = phi i32 [ %v0_1000c81e.pre, %dec_label_pc_1000c809 ], [ %v0_1000c805, %dec_label_pc_1000c7f8 ]
  %v5_1000c81b = and i32 %arg3, 255
  %v6_1000c81b = load i32, i32* @eax, align 4
  %v7_1000c81b = and i32 %v6_1000c81b, -256
  %v8_1000c81b = or i32 %v7_1000c81b, %v5_1000c81b
  store i32 %v8_1000c81b, i32* @eax, align 4
  %v12_1000c81e = icmp eq i32 %v0_1000c81e, %v0_1000c820
  store i1 %v12_1000c81e, i1* %zf.global-to-local, align 1
  %v1_1000c820 = load i32, i32* @esi, align 4
  %v2_1000c820 = add i32 %v1_1000c820, 12
  %v3_1000c820 = inttoptr i32 %v2_1000c820 to i32*
  store i32 %v0_1000c820, i32* %v3_1000c820, align 4
  %v0_1000c823 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c823 = load i32, i32* @esi, align 4
  %v2_1000c823 = add i32 %v1_1000c823, 16
  %v3_1000c823 = inttoptr i32 %v2_1000c823 to i32*
  store i32 %v0_1000c823, i32* %v3_1000c823, align 4
  %v0_1000c826 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c826 = load i32, i32* @esi, align 4
  %v2_1000c826 = add i32 %v1_1000c826, 24
  %v3_1000c826 = inttoptr i32 %v2_1000c826 to i32*
  store i32 %v0_1000c826, i32* %v3_1000c826, align 4
  %v0_1000c829 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c829 = load i32, i32* @esi, align 4
  %v2_1000c829 = add i32 %v1_1000c829, 32
  %v3_1000c829 = inttoptr i32 %v2_1000c829 to i32*
  store i32 %v0_1000c829, i32* %v3_1000c829, align 4
  %v0_1000c82c = load i32, i32* @eax, align 4
  %v1_1000c82c = trunc i32 %v0_1000c82c to i8
  %v2_1000c82c = load i32, i32* @esi, align 4
  %v3_1000c82c = add i32 %v2_1000c82c, 21
  %v4_1000c82c = inttoptr i32 %v3_1000c82c to i8*
  store i8 %v1_1000c82c, i8* %v4_1000c82c, align 1
  %v0_1000c82f = load i32, i32* @esp, align 4
  %v1_1000c82f = inttoptr i32 %v0_1000c82f to i32*
  %v2_1000c82f = load i32, i32* %v1_1000c82f, align 4
  store i32 %v2_1000c82f, i32* @edi, align 4
  %v0_1000c830 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_1000c830, label %dec_label_pc_1000c85d, label %dec_label_pc_1000c832

dec_label_pc_1000c832:                            ; preds = %dec_label_pc_1000c81b
  %v0_1000c832 = load i32, i32* @eax, align 4
  %v2_1000c832 = and i32 %v0_1000c832, 8
  %v3_1000c832 = icmp eq i32 %v2_1000c832, 0
  store i1 %v3_1000c832, i1* %zf.global-to-local, align 1
  %v1_1000c834 = icmp eq i1 %v3_1000c832, false
  br i1 %v1_1000c834, label %dec_label_pc_1000c85d, label %dec_label_pc_1000c836

dec_label_pc_1000c836:                            ; preds = %dec_label_pc_1000c832
  %v0_1000c836 = load i32, i32* @esi, align 4
  %v1_1000c836 = add i32 %v0_1000c836, 20
  %v2_1000c836 = inttoptr i32 %v1_1000c836 to i8*
  %v3_1000c836 = load i8, i8* %v2_1000c836, align 1
  %v4_1000c836 = and i8 %v3_1000c836, 1
  %v5_1000c836 = icmp eq i8 %v4_1000c836, 0
  store i1 %v5_1000c836, i1* %zf.global-to-local, align 1
  %v1_1000c83a = add i32 %v0_1000c836, 28
  %v2_1000c83a = inttoptr i32 %v1_1000c83a to i32*
  store i32 -1, i32* %v2_1000c83a, align 4
  %v1_1000c841 = icmp eq i1 %v5_1000c836, false
  br i1 %v1_1000c841, label %dec_label_pc_1000c85d, label %dec_label_pc_1000c843

dec_label_pc_1000c843:                            ; preds = %dec_label_pc_1000c836
  %v0_1000c843 = load i32, i32* @esp, align 4
  %v1_1000c843 = add i32 %v0_1000c843, -4
  %v2_1000c843 = inttoptr i32 %v1_1000c843 to i32*
  store i32 1, i32* %v2_1000c843, align 4
  %v0_1000c845 = load i32, i32* @esi, align 4
  store i32 %v0_1000c845, i32* @ecx, align 4
  %v0_1000c847 = load i32, i32* %stack_var_-12, align 4
  %v1_1000c847 = call i32 @function_1000c090(i32 %v0_1000c847)
  %v4_1000c84c = trunc i32 %v1_1000c847 to i8
  %v5_1000c84c = icmp eq i8 %v4_1000c84c, 0
  store i1 %v5_1000c84c, i1* %zf.global-to-local, align 1
  br i1 %v5_1000c84c, label %dec_label_pc_1000c859, label %dec_label_pc_1000c850

dec_label_pc_1000c850:                            ; preds = %dec_label_pc_1000c843
  %v2_1000c850 = load i32, i32* @ecx, align 4
  %v1_1000c852 = load i32, i32* @esi, align 4
  %v2_1000c852 = add i32 %v1_1000c852, 32
  %v3_1000c852 = inttoptr i32 %v2_1000c852 to i32*
  %v4_1000c852 = load i32, i32* %v3_1000c852, align 4
  %v5_1000c852 = sub i32 %v2_1000c850, %v4_1000c852
  %v15_1000c852 = icmp eq i32 %v5_1000c852, 0
  store i1 %v15_1000c852, i1* %zf.global-to-local, align 1
  %v0_1000c855 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c855 = trunc i32 %v0_1000c855 to i8
  %v3_1000c855 = inttoptr i32 %v5_1000c852 to i8*
  store i8 %v1_1000c855, i8* %v3_1000c855, align 1
  br label %dec_label_pc_1000c85d

dec_label_pc_1000c859:                            ; preds = %dec_label_pc_1000c843
  %v0_1000c859 = load i32, i32* @esi, align 4
  %v1_1000c859 = add i32 %v0_1000c859, 20
  %v2_1000c859 = inttoptr i32 %v1_1000c859 to i8*
  %v3_1000c859 = load i8, i8* %v2_1000c859, align 1
  %v4_1000c859 = and i8 %v3_1000c859, -2
  %v5_1000c859 = icmp eq i8 %v4_1000c859, 0
  store i1 %v5_1000c859, i1* %zf.global-to-local, align 1
  store i8 %v4_1000c859, i8* %v2_1000c859, align 1
  br label %dec_label_pc_1000c85d

dec_label_pc_1000c85d:                            ; preds = %dec_label_pc_1000c859, %dec_label_pc_1000c850, %dec_label_pc_1000c836, %dec_label_pc_1000c832, %dec_label_pc_1000c81b
  %v0_1000c85d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c85d = load i32, i32* @esi, align 4
  %v2_1000c85d = add i32 %v1_1000c85d, 28
  %v3_1000c85d = inttoptr i32 %v2_1000c85d to i32*
  store i32 %v0_1000c85d, i32* %v3_1000c85d, align 4
  %v0_1000c860 = load i32, i32* @esi, align 4
  %v1_1000c860 = add i32 %v0_1000c860, 36
  %v2_1000c860 = inttoptr i32 %v1_1000c860 to i32*
  store i32 268492240, i32* %v2_1000c860, align 4
  %v0_1000c867 = load i32, i32* @esi, align 4
  %v1_1000c867 = add i32 %v0_1000c867, 40
  %v2_1000c867 = inttoptr i32 %v1_1000c867 to i32*
  store i32 268486512, i32* %v2_1000c867, align 4
  %v0_1000c86e = load i32, i32* @esi, align 4
  %v0_1000c870 = load i32, i32* @esp, align 4
  %v1_1000c870 = inttoptr i32 %v0_1000c870 to i32*
  %v2_1000c870 = load i32, i32* %v1_1000c870, align 4
  store i32 %v2_1000c870, i32* @esi, align 4
  %v3_1000c870 = add i32 %v0_1000c870, 4
  %v1_1000c871 = inttoptr i32 %v3_1000c870 to i32*
  %v2_1000c871 = load i32, i32* %v1_1000c871, align 4
  store i32 %v2_1000c871, i32* @ebx, align 4
  %v3_1000c871 = add i32 %v0_1000c870, 8
  %v1_1000c872 = inttoptr i32 %v3_1000c871 to i32*
  %v2_1000c872 = load i32, i32* %v1_1000c872, align 4
  store i32 %v2_1000c872, i32* @ebp, align 4
  ret i32 %v0_1000c86e
}

define i32 @function_1000c880(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000c880:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_1000c88a = load i32, i32* @ecx, align 4
  store i32 %v0_1000c88a, i32* @esi, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v2_1000c892 = inttoptr i32 %v0_1000c88a to i32*
  store i32 %arg1, i32* %v2_1000c892, align 4
  %v5_1000c894 = and i32 %arg3, 255
  %v6_1000c894 = load i32, i32* %eax.global-to-local, align 4
  %v7_1000c894 = and i32 %v6_1000c894, -256
  %v8_1000c894 = or i32 %v7_1000c894, %v5_1000c894
  store i32 %v8_1000c894, i32* @eax, align 4
  %v0_1000c897 = load i32, i32* @ecx, align 4
  %v1_1000c897 = load i32, i32* @esi, align 4
  %v2_1000c897 = add i32 %v1_1000c897, 4
  %v3_1000c897 = inttoptr i32 %v2_1000c897 to i32*
  store i32 %v0_1000c897, i32* %v3_1000c897, align 4
  %v0_1000c89a = load i32, i32* %edx.global-to-local, align 4
  %v1_1000c89a = load i32, i32* @esi, align 4
  %v2_1000c89a = add i32 %v1_1000c89a, 8
  %v3_1000c89a = inttoptr i32 %v2_1000c89a to i32*
  store i32 %v0_1000c89a, i32* %v3_1000c89a, align 4
  %v0_1000c89d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c89d = trunc i32 %v0_1000c89d to i8
  %v2_1000c89d = load i32, i32* @esi, align 4
  %v3_1000c89d = add i32 %v2_1000c89d, 20
  %v4_1000c89d = inttoptr i32 %v3_1000c89d to i8*
  store i8 %v1_1000c89d, i8* %v4_1000c89d, align 1
  %v0_1000c8a0 = load i32, i32* @esi, align 4
  %v1_1000c8a0 = add i32 %v0_1000c8a0, 44
  %v2_1000c8a0 = inttoptr i32 %v1_1000c8a0 to i32*
  %v3_1000c8a0 = load i32, i32* %v2_1000c8a0, align 4
  %v4_1000c8a0 = and i32 %v3_1000c8a0, -4
  store i32 %v4_1000c8a0, i32* %v2_1000c8a0, align 4
  %v0_1000c8a4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c8a4 = load i32, i32* @esi, align 4
  %v2_1000c8a4 = add i32 %v1_1000c8a4, 12
  %v3_1000c8a4 = inttoptr i32 %v2_1000c8a4 to i32*
  store i32 %v0_1000c8a4, i32* %v3_1000c8a4, align 4
  %v0_1000c8a7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c8a7 = load i32, i32* @esi, align 4
  %v2_1000c8a7 = add i32 %v1_1000c8a7, 16
  %v3_1000c8a7 = inttoptr i32 %v2_1000c8a7 to i32*
  store i32 %v0_1000c8a7, i32* %v3_1000c8a7, align 4
  %v0_1000c8aa = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c8aa = load i32, i32* @esi, align 4
  %v2_1000c8aa = add i32 %v1_1000c8aa, 24
  %v3_1000c8aa = inttoptr i32 %v2_1000c8aa to i32*
  store i32 %v0_1000c8aa, i32* %v3_1000c8aa, align 4
  %v0_1000c8ad = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c8ad = load i32, i32* @esi, align 4
  %v2_1000c8ad = add i32 %v1_1000c8ad, 32
  %v3_1000c8ad = inttoptr i32 %v2_1000c8ad to i32*
  store i32 %v0_1000c8ad, i32* %v3_1000c8ad, align 4
  %v0_1000c8b0 = load i32, i32* @eax, align 4
  %v1_1000c8b0 = trunc i32 %v0_1000c8b0 to i8
  %v2_1000c8b0 = load i32, i32* @esi, align 4
  %v3_1000c8b0 = add i32 %v2_1000c8b0, 21
  %v4_1000c8b0 = inttoptr i32 %v3_1000c8b0 to i8*
  store i8 %v1_1000c8b0, i8* %v4_1000c8b0, align 1
  %v0_1000c8b3 = load i32, i32* @eax, align 4
  %v2_1000c8b3 = and i32 %v0_1000c8b3, 8
  %v3_1000c8b3 = icmp eq i32 %v2_1000c8b3, 0
  br i1 %v3_1000c8b3, label %dec_label_pc_1000c8bf, label %dec_label_pc_1000c8b7

dec_label_pc_1000c8b7:                            ; preds = %dec_label_pc_1000c880
  %v0_1000c8b7 = load i32, i32* @ecx, align 4
  %v1_1000c8b7 = load i32, i32* @esi, align 4
  %v2_1000c8b7 = add i32 %v1_1000c8b7, 16
  %v3_1000c8b7 = inttoptr i32 %v2_1000c8b7 to i32*
  store i32 %v0_1000c8b7, i32* %v3_1000c8b7, align 4
  %v0_1000c8ba = load i32, i32* @ecx, align 4
  %v1_1000c8ba = load i32, i32* @esi, align 4
  %v2_1000c8ba = add i32 %v1_1000c8ba, 28
  %v3_1000c8ba = inttoptr i32 %v2_1000c8ba to i32*
  store i32 %v0_1000c8ba, i32* %v3_1000c8ba, align 4
  br label %dec_label_pc_1000c8e5

dec_label_pc_1000c8bf:                            ; preds = %dec_label_pc_1000c880
  %v0_1000c8bf = load i32, i32* @esi, align 4
  %v1_1000c8bf = add i32 %v0_1000c8bf, 20
  %v2_1000c8bf = inttoptr i32 %v1_1000c8bf to i8*
  %v3_1000c8bf = load i8, i8* %v2_1000c8bf, align 1
  %v4_1000c8bf = and i8 %v3_1000c8bf, 1
  %v5_1000c8bf = icmp eq i8 %v4_1000c8bf, 0
  %v0_1000c8c3 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000c8c3 = add i32 %v0_1000c8bf, 28
  %v3_1000c8c3 = inttoptr i32 %v2_1000c8c3 to i32*
  store i32 %v0_1000c8c3, i32* %v3_1000c8c3, align 4
  %v1_1000c8c6 = icmp eq i1 %v5_1000c8bf, false
  br i1 %v1_1000c8c6, label %dec_label_pc_1000c8e2, label %dec_label_pc_1000c8c8

dec_label_pc_1000c8c8:                            ; preds = %dec_label_pc_1000c8bf
  %v0_1000c8ca = load i32, i32* @esi, align 4
  store i32 %v0_1000c8ca, i32* @ecx, align 4
  %v1_1000c8cc = call i32 @function_1000c090(i32 1)
  store i32 %v1_1000c8cc, i32* %eax.global-to-local, align 4
  %v4_1000c8d1 = trunc i32 %v1_1000c8cc to i8
  %v5_1000c8d1 = icmp eq i8 %v4_1000c8d1, 0
  br i1 %v5_1000c8d1, label %dec_label_pc_1000c8de, label %dec_label_pc_1000c8d5

dec_label_pc_1000c8d5:                            ; preds = %dec_label_pc_1000c8c8
  %v0_1000c8d7 = load i32, i32* @ecx, align 4
  %v1_1000c8d7 = load i32, i32* @esi, align 4
  %v2_1000c8d7 = add i32 %v1_1000c8d7, 32
  %v3_1000c8d7 = inttoptr i32 %v2_1000c8d7 to i32*
  %v4_1000c8d7 = load i32, i32* %v3_1000c8d7, align 4
  %v5_1000c8d7 = sub i32 %v0_1000c8d7, %v4_1000c8d7
  store i32 %v5_1000c8d7, i32* @ecx, align 4
  %v0_1000c8da = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c8da = trunc i32 %v0_1000c8da to i8
  %v3_1000c8da = inttoptr i32 %v5_1000c8d7 to i8*
  store i8 %v1_1000c8da, i8* %v3_1000c8da, align 1
  br label %dec_label_pc_1000c8e2

dec_label_pc_1000c8de:                            ; preds = %dec_label_pc_1000c8c8
  %v0_1000c8de = load i32, i32* @esi, align 4
  %v1_1000c8de = add i32 %v0_1000c8de, 20
  %v2_1000c8de = inttoptr i32 %v1_1000c8de to i8*
  %v3_1000c8de = load i8, i8* %v2_1000c8de, align 1
  %v4_1000c8de = and i8 %v3_1000c8de, -2
  store i8 %v4_1000c8de, i8* %v2_1000c8de, align 1
  br label %dec_label_pc_1000c8e2

dec_label_pc_1000c8e2:                            ; preds = %dec_label_pc_1000c8de, %dec_label_pc_1000c8d5, %dec_label_pc_1000c8bf
  %v0_1000c8e2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c8e2 = load i32, i32* @esi, align 4
  %v2_1000c8e2 = add i32 %v1_1000c8e2, 28
  %v3_1000c8e2 = inttoptr i32 %v2_1000c8e2 to i32*
  store i32 %v0_1000c8e2, i32* %v3_1000c8e2, align 4
  br label %dec_label_pc_1000c8e5

dec_label_pc_1000c8e5:                            ; preds = %dec_label_pc_1000c8e2, %dec_label_pc_1000c8b7
  %v0_1000c8e5 = load i32, i32* @esi, align 4
  %v1_1000c8e5 = add i32 %v0_1000c8e5, 36
  %v2_1000c8e5 = inttoptr i32 %v1_1000c8e5 to i32*
  store i32 268492240, i32* %v2_1000c8e5, align 4
  %v0_1000c8ec = load i32, i32* @esi, align 4
  %v1_1000c8ec = add i32 %v0_1000c8ec, 40
  %v2_1000c8ec = inttoptr i32 %v1_1000c8ec to i32*
  store i32 268486512, i32* %v2_1000c8ec, align 4
  %v0_1000c8f3 = load i32, i32* @esi, align 4
  store i32 %v0_1000c8f3, i32* %eax.global-to-local, align 4
  %v0_1000c8f5 = load i32, i32* @esp, align 4
  %v1_1000c8f5 = inttoptr i32 %v0_1000c8f5 to i32*
  %v2_1000c8f5 = load i32, i32* %v1_1000c8f5, align 4
  store i32 %v2_1000c8f5, i32* @esi, align 4
  %v3_1000c8f5 = add i32 %v0_1000c8f5, 4
  %v1_1000c8f6 = inttoptr i32 %v3_1000c8f5 to i32*
  %v2_1000c8f6 = load i32, i32* %v1_1000c8f6, align 4
  store i32 %v2_1000c8f6, i32* %ebx.global-to-local, align 4
  %v3_1000c8f6 = add i32 %v0_1000c8f5, 8
  %v1_1000c8f7 = inttoptr i32 %v3_1000c8f6 to i32*
  %v2_1000c8f7 = load i32, i32* %v1_1000c8f7, align 4
  store i32 %v2_1000c8f7, i32* @ebp, align 4
  ret i32 %v0_1000c8f3
}

define i32 @function_1000c900(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000c900:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000c905 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c905, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_1000c909 = load i32, i32* @edi, align 4
  store i32 %v0_1000c909, i32* %stack_var_-16, align 4
  %v1_1000c90a = add i32 %v0_1000c905, 8
  %v2_1000c90a = inttoptr i32 %v1_1000c90a to i32*
  %v3_1000c90a = load i32, i32* %v2_1000c90a, align 4
  %v16_1000c90a = icmp slt i32 %v3_1000c90a, 0
  br i1 %v16_1000c90a, label %dec_label_pc_1000c92a, label %dec_label_pc_1000c90f

dec_label_pc_1000c90f:                            ; preds = %dec_label_pc_1000c900
  store i32 %v0_1000c905, i32* @eax, align 4
  %v12_1000c911 = icmp eq i32 %v0_1000c905, 0
  br i1 %v12_1000c911, label %dec_label_pc_1000c927, label %dec_label_pc_1000c915

dec_label_pc_1000c915:                            ; preds = %dec_label_pc_1000c90f
  %v0_1000c915 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000c915, i32* @ecx, align 4
  %v1_1000c91b = inttoptr i32 %v0_1000c915 to i32*
  %v2_1000c91b = load i32, i32* %v1_1000c91b, align 4
  store i32 %v2_1000c91b, i32* @ecx, align 4
  %v1_1000c91d = inttoptr i32 %v2_1000c91b to i32*
  %v2_1000c91d = load i32, i32* %v1_1000c91d, align 4
  store i32 %v2_1000c91d, i32* %edx.global-to-local, align 4
  %v1_1000c920 = add i32 %v2_1000c91d, 20
  %v2_1000c920 = inttoptr i32 %v1_1000c920 to i32*
  %v3_1000c920 = load i32, i32* %v2_1000c920, align 4
  store i32 %v3_1000c920, i32* @eax, align 4
  %v2_1000c925 = inttoptr i32 %v0_1000c905 to i32*
  store i32 0, i32* %v2_1000c925, align 4
  %v0_1000c927.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c927.pre = load i32, i32* @esi, align 4
  %phitmp = add i32 %v1_1000c927.pre, 4
  %phitmp7 = inttoptr i32 %phitmp to i32*
  br label %dec_label_pc_1000c927

dec_label_pc_1000c927:                            ; preds = %dec_label_pc_1000c915, %dec_label_pc_1000c90f
  %v1_1000c927 = phi i32* [ %phitmp7, %dec_label_pc_1000c915 ], [ inttoptr (i32 4 to i32*), %dec_label_pc_1000c90f ]
  %v0_1000c927 = phi i32 [ %v0_1000c927.pre, %dec_label_pc_1000c915 ], [ 0, %dec_label_pc_1000c90f ]
  store i32 %v0_1000c927, i32* %v1_1000c927, align 4
  %v1_1000c936.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c92a

dec_label_pc_1000c92a:                            ; preds = %dec_label_pc_1000c927, %dec_label_pc_1000c900
  %v1_1000c936 = phi i32 [ %v1_1000c936.pre, %dec_label_pc_1000c927 ], [ %v0_1000c905, %dec_label_pc_1000c900 ]
  store i32 %arg3, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v5_1000c933 = and i32 %arg4, 255
  %v6_1000c933 = load i32, i32* @eax, align 4
  %v7_1000c933 = and i32 %v6_1000c933, -256
  %v8_1000c933 = or i32 %v7_1000c933, %v5_1000c933
  store i32 %v8_1000c933, i32* @eax, align 4
  %v2_1000c936 = inttoptr i32 %v1_1000c936 to i32*
  store i32 %arg1, i32* %v2_1000c936, align 4
  store i32 -1, i32* @ecx, align 4
  %v0_1000c93b = load i32, i32* %edx.global-to-local, align 4
  %v1_1000c93b = load i32, i32* @esi, align 4
  %v2_1000c93b = add i32 %v1_1000c93b, 4
  %v3_1000c93b = inttoptr i32 %v2_1000c93b to i32*
  store i32 %v0_1000c93b, i32* %v3_1000c93b, align 4
  %v0_1000c93e = load i32, i32* @ecx, align 4
  %v1_1000c93e = load i32, i32* @esi, align 4
  %v2_1000c93e = add i32 %v1_1000c93e, 8
  %v3_1000c93e = inttoptr i32 %v2_1000c93e to i32*
  store i32 %v0_1000c93e, i32* %v3_1000c93e, align 4
  %v0_1000c941 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c941 = load i32, i32* @esi, align 4
  %v2_1000c941 = add i32 %v1_1000c941, 12
  %v3_1000c941 = inttoptr i32 %v2_1000c941 to i32*
  store i32 %v0_1000c941, i32* %v3_1000c941, align 4
  %v0_1000c944 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c944 = load i32, i32* @esi, align 4
  %v2_1000c944 = add i32 %v1_1000c944, 16
  %v3_1000c944 = inttoptr i32 %v2_1000c944 to i32*
  store i32 %v0_1000c944, i32* %v3_1000c944, align 4
  %v0_1000c947 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c947 = load i32, i32* @esi, align 4
  %v2_1000c947 = add i32 %v1_1000c947, 24
  %v3_1000c947 = inttoptr i32 %v2_1000c947 to i32*
  store i32 %v0_1000c947, i32* %v3_1000c947, align 4
  %v0_1000c94a = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c94a = trunc i32 %v0_1000c94a to i8
  %v2_1000c94a = load i32, i32* @esi, align 4
  %v3_1000c94a = add i32 %v2_1000c94a, 20
  %v4_1000c94a = inttoptr i32 %v3_1000c94a to i8*
  store i8 %v1_1000c94a, i8* %v4_1000c94a, align 1
  %v0_1000c94d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c94d = load i32, i32* @esi, align 4
  %v2_1000c94d = add i32 %v1_1000c94d, 32
  %v3_1000c94d = inttoptr i32 %v2_1000c94d to i32*
  store i32 %v0_1000c94d, i32* %v3_1000c94d, align 4
  %v0_1000c950 = load i32, i32* @eax, align 4
  %v1_1000c950 = trunc i32 %v0_1000c950 to i8
  %v2_1000c950 = load i32, i32* @esi, align 4
  %v3_1000c950 = add i32 %v2_1000c950, 21
  %v4_1000c950 = inttoptr i32 %v3_1000c950 to i8*
  store i8 %v1_1000c950, i8* %v4_1000c950, align 1
  %v0_1000c953 = load i32, i32* @ecx, align 4
  %v1_1000c953 = load i32, i32* @esi, align 4
  %v2_1000c953 = add i32 %v1_1000c953, 28
  %v3_1000c953 = inttoptr i32 %v2_1000c953 to i32*
  store i32 %v0_1000c953, i32* %v3_1000c953, align 4
  %v0_1000c956 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c956 = load i32, i32* @ecx, align 4
  %v7_1000c958 = icmp sgt i32 %v0_1000c956, %v1_1000c956
  br i1 %v7_1000c958, label %dec_label_pc_1000c95a, label %dec_label_pc_1000c984

dec_label_pc_1000c95a:                            ; preds = %dec_label_pc_1000c92a
  %v0_1000c95a = load i32, i32* @eax, align 4
  %v2_1000c95a = and i32 %v0_1000c95a, 8
  %v3_1000c95a = icmp eq i32 %v2_1000c95a, 0
  %v1_1000c95c = icmp eq i1 %v3_1000c95a, false
  br i1 %v1_1000c95c, label %dec_label_pc_1000c981, label %dec_label_pc_1000c95e

dec_label_pc_1000c95e:                            ; preds = %dec_label_pc_1000c95a
  %v0_1000c95e = load i32, i32* @esp, align 4
  %v1_1000c95e = add i32 %v0_1000c95e, -4
  %v2_1000c95e = inttoptr i32 %v1_1000c95e to i32*
  store i32 1, i32* %v2_1000c95e, align 4
  %v0_1000c960 = load i32, i32* @esi, align 4
  store i32 %v0_1000c960, i32* @ecx, align 4
  %v0_1000c962 = load i32, i32* %stack_var_-16, align 4
  %v1_1000c962 = call i32 @function_1000c090(i32 %v0_1000c962)
  store i32 %v1_1000c962, i32* @eax, align 4
  %v4_1000c967 = trunc i32 %v1_1000c962 to i8
  %v5_1000c967 = icmp eq i8 %v4_1000c967, 0
  br i1 %v5_1000c967, label %dec_label_pc_1000c97d, label %dec_label_pc_1000c96b

dec_label_pc_1000c96b:                            ; preds = %dec_label_pc_1000c95e
  %v2_1000c96b = load i32, i32* @ecx, align 4
  store i32 %v2_1000c96b, i32* %eax.global-to-local, align 4
  %v1_1000c96d = load i32, i32* @esi, align 4
  %v2_1000c96d = add i32 %v1_1000c96d, 32
  %v3_1000c96d = inttoptr i32 %v2_1000c96d to i32*
  %v4_1000c96d = load i32, i32* %v3_1000c96d, align 4
  %v5_1000c96d = sub i32 %v2_1000c96b, %v4_1000c96d
  store i32 %v5_1000c96d, i32* %eax.global-to-local, align 4
  %v0_1000c970 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c970 = trunc i32 %v0_1000c970 to i8
  %v3_1000c970 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000c970 = add i32 %v3_1000c970, %v5_1000c96d
  %v6_1000c970 = inttoptr i32 %v5_1000c970 to i8*
  store i8 %v1_1000c970, i8* %v6_1000c970, align 1
  %v0_1000c973 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c973 = load i32, i32* @esi, align 4
  %v2_1000c973 = add i32 %v1_1000c973, 28
  %v3_1000c973 = inttoptr i32 %v2_1000c973 to i32*
  store i32 %v0_1000c973, i32* %v3_1000c973, align 4
  %v0_1000c976 = load i32, i32* @esp, align 4
  %v1_1000c976 = inttoptr i32 %v0_1000c976 to i32*
  %v2_1000c976 = load i32, i32* %v1_1000c976, align 4
  store i32 %v2_1000c976, i32* @edi, align 4
  %v3_1000c977 = add i32 %v0_1000c976, 8
  %v1_1000c978 = inttoptr i32 %v3_1000c977 to i32*
  %v2_1000c978 = load i32, i32* %v1_1000c978, align 4
  store i32 %v2_1000c978, i32* @ebx, align 4
  %v3_1000c978 = add i32 %v0_1000c976, 12
  %v1_1000c979 = inttoptr i32 %v3_1000c978 to i32*
  %v2_1000c979 = load i32, i32* %v1_1000c979, align 4
  store i32 %v2_1000c979, i32* @ebp, align 4
  %v0_1000c97a = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000c97a

dec_label_pc_1000c97d:                            ; preds = %dec_label_pc_1000c95e
  %v0_1000c97d = load i32, i32* @esi, align 4
  %v1_1000c97d = add i32 %v0_1000c97d, 20
  %v2_1000c97d = inttoptr i32 %v1_1000c97d to i8*
  %v3_1000c97d = load i8, i8* %v2_1000c97d, align 1
  %v4_1000c97d = and i8 %v3_1000c97d, -2
  store i8 %v4_1000c97d, i8* %v2_1000c97d, align 1
  %v0_1000c981.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000c981

dec_label_pc_1000c981:                            ; preds = %dec_label_pc_1000c97d, %dec_label_pc_1000c95a
  %v0_1000c981 = phi i32 [ %v0_1000c981.pre, %dec_label_pc_1000c97d ], [ %v0_1000c956, %dec_label_pc_1000c95a ]
  %v1_1000c981 = load i32, i32* @esi, align 4
  %v2_1000c981 = add i32 %v1_1000c981, 28
  %v3_1000c981 = inttoptr i32 %v2_1000c981 to i32*
  store i32 %v0_1000c981, i32* %v3_1000c981, align 4
  br label %dec_label_pc_1000c984

dec_label_pc_1000c984:                            ; preds = %dec_label_pc_1000c92a, %dec_label_pc_1000c981
  %v0_1000c984 = load i32, i32* @esp, align 4
  %v1_1000c984 = inttoptr i32 %v0_1000c984 to i32*
  %v2_1000c984 = load i32, i32* %v1_1000c984, align 4
  store i32 %v2_1000c984, i32* @edi, align 4
  %v3_1000c985 = add i32 %v0_1000c984, 8
  %v1_1000c986 = inttoptr i32 %v3_1000c985 to i32*
  %v2_1000c986 = load i32, i32* %v1_1000c986, align 4
  store i32 %v2_1000c986, i32* @ebx, align 4
  %v3_1000c986 = add i32 %v0_1000c984, 12
  %v1_1000c987 = inttoptr i32 %v3_1000c986 to i32*
  %v2_1000c987 = load i32, i32* %v1_1000c987, align 4
  store i32 %v2_1000c987, i32* @ebp, align 4
  %v0_1000c988 = load i32, i32* @eax, align 4
  ret i32 %v0_1000c988
}

define i32 @function_1000c990(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000c990:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000c995 = load i32, i32* @ecx, align 4
  store i32 %v0_1000c995, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_1000c999 = load i32, i32* @edi, align 4
  store i32 %v0_1000c999, i32* %stack_var_-16, align 4
  %v1_1000c99a = add i32 %v0_1000c995, 8
  %v2_1000c99a = inttoptr i32 %v1_1000c99a to i32*
  %v3_1000c99a = load i32, i32* %v2_1000c99a, align 4
  %v16_1000c99a = icmp slt i32 %v3_1000c99a, 0
  br i1 %v16_1000c99a, label %dec_label_pc_1000c9ba, label %dec_label_pc_1000c99f

dec_label_pc_1000c99f:                            ; preds = %dec_label_pc_1000c990
  store i32 %v0_1000c995, i32* @eax, align 4
  %v12_1000c9a1 = icmp eq i32 %v0_1000c995, 0
  br i1 %v12_1000c9a1, label %dec_label_pc_1000c9b7, label %dec_label_pc_1000c9a5

dec_label_pc_1000c9a5:                            ; preds = %dec_label_pc_1000c99f
  %v0_1000c9a5 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000c9a5, i32* @ecx, align 4
  %v1_1000c9ab = inttoptr i32 %v0_1000c9a5 to i32*
  %v2_1000c9ab = load i32, i32* %v1_1000c9ab, align 4
  store i32 %v2_1000c9ab, i32* @ecx, align 4
  %v1_1000c9ad = inttoptr i32 %v2_1000c9ab to i32*
  %v2_1000c9ad = load i32, i32* %v1_1000c9ad, align 4
  store i32 %v2_1000c9ad, i32* %edx.global-to-local, align 4
  %v1_1000c9b0 = add i32 %v2_1000c9ad, 20
  %v2_1000c9b0 = inttoptr i32 %v1_1000c9b0 to i32*
  %v3_1000c9b0 = load i32, i32* %v2_1000c9b0, align 4
  store i32 %v3_1000c9b0, i32* @eax, align 4
  %v2_1000c9b5 = inttoptr i32 %v0_1000c995 to i32*
  store i32 0, i32* %v2_1000c9b5, align 4
  %v0_1000c9b7.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c9b7.pre = load i32, i32* @esi, align 4
  %phitmp = add i32 %v1_1000c9b7.pre, 4
  %phitmp7 = inttoptr i32 %phitmp to i32*
  br label %dec_label_pc_1000c9b7

dec_label_pc_1000c9b7:                            ; preds = %dec_label_pc_1000c9a5, %dec_label_pc_1000c99f
  %v1_1000c9b7 = phi i32* [ %phitmp7, %dec_label_pc_1000c9a5 ], [ inttoptr (i32 4 to i32*), %dec_label_pc_1000c99f ]
  %v0_1000c9b7 = phi i32 [ %v0_1000c9b7.pre, %dec_label_pc_1000c9a5 ], [ 0, %dec_label_pc_1000c99f ]
  store i32 %v0_1000c9b7, i32* %v1_1000c9b7, align 4
  %v1_1000c9c6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000c9ba

dec_label_pc_1000c9ba:                            ; preds = %dec_label_pc_1000c9b7, %dec_label_pc_1000c990
  %v1_1000c9c6 = phi i32 [ %v1_1000c9c6.pre, %dec_label_pc_1000c9b7 ], [ %v0_1000c995, %dec_label_pc_1000c990 ]
  store i32 %arg3, i32* %edi.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v5_1000c9c3 = and i32 %arg4, 255
  %v6_1000c9c3 = load i32, i32* @eax, align 4
  %v7_1000c9c3 = and i32 %v6_1000c9c3, -256
  %v8_1000c9c3 = or i32 %v7_1000c9c3, %v5_1000c9c3
  store i32 %v8_1000c9c3, i32* @eax, align 4
  %v2_1000c9c6 = inttoptr i32 %v1_1000c9c6 to i32*
  store i32 %arg1, i32* %v2_1000c9c6, align 4
  %v0_1000c9c8 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000c9c8 = load i32, i32* @esi, align 4
  %v2_1000c9c8 = add i32 %v1_1000c9c8, 4
  %v3_1000c9c8 = inttoptr i32 %v2_1000c9c8 to i32*
  store i32 %v0_1000c9c8, i32* %v3_1000c9c8, align 4
  %v0_1000c9cb = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c9cb = load i32, i32* @esi, align 4
  %v2_1000c9cb = add i32 %v1_1000c9cb, 12
  %v3_1000c9cb = inttoptr i32 %v2_1000c9cb to i32*
  store i32 %v0_1000c9cb, i32* %v3_1000c9cb, align 4
  %v0_1000c9ce = load i32, i32* %edi.global-to-local, align 4
  %v1_1000c9ce = load i32, i32* @esi, align 4
  %v2_1000c9ce = add i32 %v1_1000c9ce, 16
  %v3_1000c9ce = inttoptr i32 %v2_1000c9ce to i32*
  store i32 %v0_1000c9ce, i32* %v3_1000c9ce, align 4
  %v0_1000c9d1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c9d1 = load i32, i32* @esi, align 4
  %v2_1000c9d1 = add i32 %v1_1000c9d1, 24
  %v3_1000c9d1 = inttoptr i32 %v2_1000c9d1 to i32*
  store i32 %v0_1000c9d1, i32* %v3_1000c9d1, align 4
  %v0_1000c9d4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c9d4 = trunc i32 %v0_1000c9d4 to i8
  %v2_1000c9d4 = load i32, i32* @esi, align 4
  %v3_1000c9d4 = add i32 %v2_1000c9d4, 20
  %v4_1000c9d4 = inttoptr i32 %v3_1000c9d4 to i8*
  store i8 %v1_1000c9d4, i8* %v4_1000c9d4, align 1
  %v0_1000c9d7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c9d7 = load i32, i32* @esi, align 4
  %v2_1000c9d7 = add i32 %v1_1000c9d7, 32
  %v3_1000c9d7 = inttoptr i32 %v2_1000c9d7 to i32*
  store i32 %v0_1000c9d7, i32* %v3_1000c9d7, align 4
  %v0_1000c9da = load i32, i32* @eax, align 4
  %v1_1000c9da = trunc i32 %v0_1000c9da to i8
  %v2_1000c9da = load i32, i32* @esi, align 4
  %v3_1000c9da = add i32 %v2_1000c9da, 21
  %v4_1000c9da = inttoptr i32 %v3_1000c9da to i8*
  store i8 %v1_1000c9da, i8* %v4_1000c9da, align 1
  %v0_1000c9dd = load i32, i32* @esi, align 4
  %v1_1000c9dd = add i32 %v0_1000c9dd, 28
  %v2_1000c9dd = inttoptr i32 %v1_1000c9dd to i32*
  store i32 -1, i32* %v2_1000c9dd, align 4
  %v0_1000c9e4 = load i32, i32* %edi.global-to-local, align 4
  %v7_1000c9e7 = icmp sgt i32 %v0_1000c9e4, -1
  br i1 %v7_1000c9e7, label %dec_label_pc_1000c9e9, label %dec_label_pc_1000ca13

dec_label_pc_1000c9e9:                            ; preds = %dec_label_pc_1000c9ba
  %v0_1000c9e9 = load i32, i32* @eax, align 4
  %v2_1000c9e9 = and i32 %v0_1000c9e9, 8
  %v3_1000c9e9 = icmp eq i32 %v2_1000c9e9, 0
  %v1_1000c9eb = icmp eq i1 %v3_1000c9e9, false
  br i1 %v1_1000c9eb, label %dec_label_pc_1000ca10, label %dec_label_pc_1000c9ed

dec_label_pc_1000c9ed:                            ; preds = %dec_label_pc_1000c9e9
  %v0_1000c9ed = load i32, i32* @esp, align 4
  %v1_1000c9ed = add i32 %v0_1000c9ed, -4
  %v2_1000c9ed = inttoptr i32 %v1_1000c9ed to i32*
  store i32 1, i32* %v2_1000c9ed, align 4
  %v0_1000c9ef = load i32, i32* @esi, align 4
  store i32 %v0_1000c9ef, i32* @ecx, align 4
  %v0_1000c9f1 = load i32, i32* %stack_var_-16, align 4
  %v1_1000c9f1 = call i32 @function_1000c090(i32 %v0_1000c9f1)
  store i32 %v1_1000c9f1, i32* @eax, align 4
  %v4_1000c9f6 = trunc i32 %v1_1000c9f1 to i8
  %v5_1000c9f6 = icmp eq i8 %v4_1000c9f6, 0
  br i1 %v5_1000c9f6, label %dec_label_pc_1000ca0c, label %dec_label_pc_1000c9fa

dec_label_pc_1000c9fa:                            ; preds = %dec_label_pc_1000c9ed
  %v2_1000c9fa = load i32, i32* @ecx, align 4
  store i32 %v2_1000c9fa, i32* %eax.global-to-local, align 4
  %v1_1000c9fc = load i32, i32* @esi, align 4
  %v2_1000c9fc = add i32 %v1_1000c9fc, 32
  %v3_1000c9fc = inttoptr i32 %v2_1000c9fc to i32*
  %v4_1000c9fc = load i32, i32* %v3_1000c9fc, align 4
  %v5_1000c9fc = sub i32 %v2_1000c9fa, %v4_1000c9fc
  store i32 %v5_1000c9fc, i32* %eax.global-to-local, align 4
  %v0_1000c9ff = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000c9ff = trunc i32 %v0_1000c9ff to i8
  %v3_1000c9ff = load i32, i32* %edi.global-to-local, align 4
  %v5_1000c9ff = add i32 %v3_1000c9ff, %v5_1000c9fc
  %v6_1000c9ff = inttoptr i32 %v5_1000c9ff to i8*
  store i8 %v1_1000c9ff, i8* %v6_1000c9ff, align 1
  %v0_1000ca02 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ca02 = load i32, i32* @esi, align 4
  %v2_1000ca02 = add i32 %v1_1000ca02, 28
  %v3_1000ca02 = inttoptr i32 %v2_1000ca02 to i32*
  store i32 %v0_1000ca02, i32* %v3_1000ca02, align 4
  %v0_1000ca05 = load i32, i32* @esp, align 4
  %v1_1000ca05 = inttoptr i32 %v0_1000ca05 to i32*
  %v2_1000ca05 = load i32, i32* %v1_1000ca05, align 4
  store i32 %v2_1000ca05, i32* @edi, align 4
  %v3_1000ca06 = add i32 %v0_1000ca05, 8
  %v1_1000ca07 = inttoptr i32 %v3_1000ca06 to i32*
  %v2_1000ca07 = load i32, i32* %v1_1000ca07, align 4
  store i32 %v2_1000ca07, i32* %ebx.global-to-local, align 4
  %v3_1000ca07 = add i32 %v0_1000ca05, 12
  %v1_1000ca08 = inttoptr i32 %v3_1000ca07 to i32*
  %v2_1000ca08 = load i32, i32* %v1_1000ca08, align 4
  store i32 %v2_1000ca08, i32* @ebp, align 4
  %v0_1000ca09 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000ca09

dec_label_pc_1000ca0c:                            ; preds = %dec_label_pc_1000c9ed
  %v0_1000ca0c = load i32, i32* @esi, align 4
  %v1_1000ca0c = add i32 %v0_1000ca0c, 20
  %v2_1000ca0c = inttoptr i32 %v1_1000ca0c to i8*
  %v3_1000ca0c = load i8, i8* %v2_1000ca0c, align 1
  %v4_1000ca0c = and i8 %v3_1000ca0c, -2
  store i8 %v4_1000ca0c, i8* %v2_1000ca0c, align 1
  %v0_1000ca10.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ca10

dec_label_pc_1000ca10:                            ; preds = %dec_label_pc_1000ca0c, %dec_label_pc_1000c9e9
  %v0_1000ca10 = phi i32 [ %v0_1000ca10.pre, %dec_label_pc_1000ca0c ], [ %v0_1000c9e4, %dec_label_pc_1000c9e9 ]
  %v1_1000ca10 = load i32, i32* @esi, align 4
  %v2_1000ca10 = add i32 %v1_1000ca10, 28
  %v3_1000ca10 = inttoptr i32 %v2_1000ca10 to i32*
  store i32 %v0_1000ca10, i32* %v3_1000ca10, align 4
  br label %dec_label_pc_1000ca13

dec_label_pc_1000ca13:                            ; preds = %dec_label_pc_1000c9ba, %dec_label_pc_1000ca10
  %v0_1000ca13 = load i32, i32* @esp, align 4
  %v1_1000ca13 = inttoptr i32 %v0_1000ca13 to i32*
  %v2_1000ca13 = load i32, i32* %v1_1000ca13, align 4
  store i32 %v2_1000ca13, i32* @edi, align 4
  %v3_1000ca14 = add i32 %v0_1000ca13, 8
  %v1_1000ca15 = inttoptr i32 %v3_1000ca14 to i32*
  %v2_1000ca15 = load i32, i32* %v1_1000ca15, align 4
  store i32 %v2_1000ca15, i32* %ebx.global-to-local, align 4
  %v3_1000ca15 = add i32 %v0_1000ca13, 12
  %v1_1000ca16 = inttoptr i32 %v3_1000ca15 to i32*
  %v2_1000ca16 = load i32, i32* %v1_1000ca16, align 4
  store i32 %v2_1000ca16, i32* @ebp, align 4
  %v0_1000ca17 = load i32, i32* @eax, align 4
  ret i32 %v0_1000ca17
}

define i32 @function_1000ca20() local_unnamed_addr {
dec_label_pc_1000ca20:
  %stack_var_-5 = alloca i32, align 4
  %v0_1000ca23 = load i32, i32* @ecx, align 4
  store i32 %v0_1000ca23, i32* @esi, align 4
  %v1_1000ca27 = add i32 %v0_1000ca23, 21
  %v2_1000ca27 = inttoptr i32 %v1_1000ca27 to i8*
  %v3_1000ca27 = load i8, i8* %v2_1000ca27, align 1
  %v4_1000ca27 = and i8 %v3_1000ca27, 1
  %v5_1000ca27 = icmp eq i8 %v4_1000ca27, 0
  br i1 %v5_1000ca27, label %dec_label_pc_1000ca92, label %dec_label_pc_1000ca2d

dec_label_pc_1000ca2d:                            ; preds = %dec_label_pc_1000ca20
  %v1_1000ca2d = add i32 %v0_1000ca23, 20
  %v2_1000ca2d = inttoptr i32 %v1_1000ca2d to i8*
  %v3_1000ca2d = load i8, i8* %v2_1000ca2d, align 1
  %v10_1000ca2d = icmp eq i8 %v3_1000ca2d, 0
  %v1_1000ca31 = icmp eq i1 %v10_1000ca2d, false
  br i1 %v1_1000ca31, label %dec_label_pc_1000ca92, label %dec_label_pc_1000ca33

dec_label_pc_1000ca33:                            ; preds = %dec_label_pc_1000ca2d
  %v1_1000ca35 = call i32 @function_1000bf20(i32 2)
  store i32 %v1_1000ca35, i32* @eax, align 4
  %v0_1000ca3a = load i32, i32* @esi, align 4
  %v1_1000ca3a = add i32 %v0_1000ca3a, 20
  %v2_1000ca3a = inttoptr i32 %v1_1000ca3a to i8*
  %v3_1000ca3a = load i8, i8* %v2_1000ca3a, align 1
  %v4_1000ca3a = and i8 %v3_1000ca3a, -3
  store i8 %v4_1000ca3a, i8* %v2_1000ca3a, align 1
  %v0_1000ca3e = load i32, i32* @eax, align 4
  %v4_1000ca3e = trunc i32 %v0_1000ca3e to i8
  %v5_1000ca3e = icmp eq i8 %v4_1000ca3e, 0
  br i1 %v5_1000ca3e, label %dec_label_pc_1000ca92, label %dec_label_pc_1000ca42

dec_label_pc_1000ca42:                            ; preds = %dec_label_pc_1000ca33
  %v0_1000ca42 = load i32, i32* @esi, align 4
  %v1_1000ca42 = add i32 %v0_1000ca42, 12
  %v2_1000ca42 = inttoptr i32 %v1_1000ca42 to i32*
  %v3_1000ca42 = load i32, i32* %v2_1000ca42, align 4
  store i32 %v3_1000ca42, i32* @ecx, align 4
  %v2_1000ca47 = add i32 %v0_1000ca42, 32
  %v3_1000ca47 = inttoptr i32 %v2_1000ca47 to i32*
  %v4_1000ca47 = load i32, i32* %v3_1000ca47, align 4
  %v5_1000ca47 = sub i32 %v3_1000ca42, %v4_1000ca47
  %v4_1000ca4a = add i32 %v5_1000ca47, %v3_1000ca42
  %v14_1000ca4a = icmp eq i32 %v4_1000ca4a, 0
  store i32 %v4_1000ca4a, i32* @eax, align 4
  br i1 %v14_1000ca4a, label %dec_label_pc_1000ca92, label %dec_label_pc_1000ca4e

dec_label_pc_1000ca4e:                            ; preds = %dec_label_pc_1000ca42
  %v1_1000ca4e = inttoptr i32 %v4_1000ca4a to i8*
  %v2_1000ca4e = load i8, i8* %v1_1000ca4e, align 1
  %v12_1000ca4e = icmp eq i8 %v2_1000ca4e, 47
  %v1_1000ca51 = icmp eq i1 %v12_1000ca4e, false
  br i1 %v1_1000ca51, label %dec_label_pc_1000ca92, label %dec_label_pc_1000ca53

dec_label_pc_1000ca53:                            ; preds = %dec_label_pc_1000ca4e
  %v1_1000ca53 = add i32 %v4_1000ca4a, 1
  %v2_1000ca53 = inttoptr i32 %v1_1000ca53 to i8*
  %v3_1000ca53 = load i8, i8* %v2_1000ca53, align 1
  %v13_1000ca53 = icmp eq i8 %v3_1000ca53, 47
  %v1_1000ca57 = icmp eq i1 %v13_1000ca53, false
  br i1 %v1_1000ca57, label %dec_label_pc_1000ca92, label %dec_label_pc_1000ca59

dec_label_pc_1000ca59:                            ; preds = %dec_label_pc_1000ca53
  %v1_1000ca59 = add i32 %v3_1000ca42, 2
  %v2_1000ca5c = ptrtoint i32* %stack_var_-5 to i32
  store i32 %v2_1000ca5c, i32* @eax, align 4
  store i32 %v1_1000ca59, i32* %v2_1000ca42, align 4
  %v0_1000ca63 = load i32, i32* @esi, align 4
  store i32 %v0_1000ca63, i32* @ecx, align 4
  %v2_1000ca65 = call i32 @function_1000b150(i32* nonnull %stack_var_-5)
  %v0_1000ca6a = load i32, i32* @esi, align 4
  %v1_1000ca6a = add i32 %v0_1000ca6a, 20
  %v2_1000ca6a = inttoptr i32 %v1_1000ca6a to i8*
  %v3_1000ca6a = load i8, i8* %v2_1000ca6a, align 1
  %v10_1000ca6a = icmp eq i8 %v3_1000ca6a, 0
  %v3_1000ca6e = load i32, i32* %stack_var_-5, align 4
  %v4_1000ca6e = and i32 %v3_1000ca6e, 255
  %v6_1000ca6e = and i32 %v2_1000ca65, -256
  %v7_1000ca6e = or i32 %v4_1000ca6e, %v6_1000ca6e
  store i32 %v7_1000ca6e, i32* @eax, align 4
  %v1_1000ca71 = icmp eq i1 %v10_1000ca6a, false
  br i1 %v1_1000ca71, label %dec_label_pc_1000ca8b, label %dec_label_pc_1000ca73

dec_label_pc_1000ca73:                            ; preds = %dec_label_pc_1000ca59, %dec_label_pc_1000ca77
  %v0_1000ca73 = phi i32 [ %v7_1000ca86, %dec_label_pc_1000ca77 ], [ %v7_1000ca6e, %dec_label_pc_1000ca59 ]
  %v1_1000ca73 = trunc i32 %v0_1000ca73 to i8
  %v11_1000ca73 = icmp eq i8 %v1_1000ca73, 10
  br i1 %v11_1000ca73, label %dec_label_pc_1000ca8b, label %dec_label_pc_1000ca77

dec_label_pc_1000ca77:                            ; preds = %dec_label_pc_1000ca73
  %v1_1000ca7a = load i32, i32* @esp, align 4
  %v2_1000ca7a = add i32 %v1_1000ca7a, -4
  %v3_1000ca7a = inttoptr i32 %v2_1000ca7a to i32*
  store i32 %v2_1000ca5c, i32* %v3_1000ca7a, align 4
  %v0_1000ca7b = load i32, i32* @esi, align 4
  store i32 %v0_1000ca7b, i32* @ecx, align 4
  %v0_1000ca7d = call i32 @function_1000b150(i32* nonnull @5)
  %v0_1000ca82 = load i32, i32* @esi, align 4
  %v1_1000ca82 = add i32 %v0_1000ca82, 20
  %v2_1000ca82 = inttoptr i32 %v1_1000ca82 to i8*
  %v3_1000ca82 = load i8, i8* %v2_1000ca82, align 1
  %v10_1000ca82 = icmp eq i8 %v3_1000ca82, 0
  %v3_1000ca86 = load i32, i32* %stack_var_-5, align 4
  %v4_1000ca86 = and i32 %v3_1000ca86, 255
  %v6_1000ca86 = and i32 %v0_1000ca7d, -256
  %v7_1000ca86 = or i32 %v4_1000ca86, %v6_1000ca86
  store i32 %v7_1000ca86, i32* @eax, align 4
  br i1 %v10_1000ca82, label %dec_label_pc_1000ca73, label %dec_label_pc_1000ca8b

dec_label_pc_1000ca8b:                            ; preds = %dec_label_pc_1000ca77, %dec_label_pc_1000ca73, %dec_label_pc_1000ca59
  %v0_1000ca8b = phi i32 [ %v7_1000ca6e, %dec_label_pc_1000ca59 ], [ %v7_1000ca86, %dec_label_pc_1000ca77 ], [ %v0_1000ca73, %dec_label_pc_1000ca73 ]
  %v1_1000ca8b = and i32 %v0_1000ca8b, -256
  %v2_1000ca8b = or i32 %v1_1000ca8b, 1
  %v0_1000ca8d = load i32, i32* @esp, align 4
  %v1_1000ca8d = inttoptr i32 %v0_1000ca8d to i32*
  %v2_1000ca8d = load i32, i32* %v1_1000ca8d, align 4
  store i32 %v2_1000ca8d, i32* @esi, align 4
  ret i32 %v2_1000ca8b

dec_label_pc_1000ca92:                            ; preds = %dec_label_pc_1000ca53, %dec_label_pc_1000ca4e, %dec_label_pc_1000ca42, %dec_label_pc_1000ca33, %dec_label_pc_1000ca2d, %dec_label_pc_1000ca20
  %v11_1000ca92 = load i32, i32* @eax, align 4
  %v12_1000ca92 = and i32 %v11_1000ca92, -256
  %v0_1000ca94 = load i32, i32* @esp, align 4
  %v1_1000ca94 = inttoptr i32 %v0_1000ca94 to i32*
  %v2_1000ca94 = load i32, i32* %v1_1000ca94, align 4
  store i32 %v2_1000ca94, i32* @esi, align 4
  ret i32 %v12_1000ca92
}

define i32 @function_1000caa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1000caa0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_7 = alloca i32, align 4
  %v0_1000caa0 = load i32, i32* @ebp, align 4
  %v0_1000caa3 = load i32, i32* @esi, align 4
  %v0_1000caa4 = load i32, i32* @ecx, align 4
  store i32 %v0_1000caa4, i32* @esi, align 4
  %v1_1000caa6 = add i32 %v0_1000caa4, 20
  %v2_1000caa6 = inttoptr i32 %v1_1000caa6 to i8*
  %v3_1000caa6 = load i8, i8* %v2_1000caa6, align 1
  %v10_1000caa6 = icmp eq i8 %v3_1000caa6, 0
  br i1 %v10_1000caa6, label %dec_label_pc_1000cab7, label %dec_label_pc_1000caac

dec_label_pc_1000caac:                            ; preds = %dec_label_pc_1000caa0
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_1000caaf = inttoptr i32 %arg1 to i8*
  store i8 0, i8* %v1_1000caaf, align 1
  %v0_1000cab4 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000cab4

dec_label_pc_1000cab7:                            ; preds = %dec_label_pc_1000caa0
  %v0_1000cab7 = load i32, i32* @ebx, align 4
  %v1_1000cabb = icmp eq i32 %arg2, 0
  %v1_1000cabd = icmp eq i1 %v1_1000cabb, false
  br i1 %v1_1000cabd, label %dec_label_pc_1000cac4, label %dec_label_pc_1000cabf

dec_label_pc_1000cabf:                            ; preds = %dec_label_pc_1000cab7
  br label %dec_label_pc_1000cac4

dec_label_pc_1000cac4:                            ; preds = %dec_label_pc_1000cabf, %dec_label_pc_1000cab7
  %storemerge = phi i32 [ 2147483647, %dec_label_pc_1000cabf ], [ %arg2, %dec_label_pc_1000cab7 ]
  store i32 %storemerge, i32* @ebx, align 4
  %v0_1000cac4 = load i32, i32* @edi, align 4
  %v4_1000cac5 = call i32 @function_1000c320(i32 %v0_1000cac4, i32 %v0_1000cab7, i32 %v0_1000caa3, i32 %v0_1000caa0)
  store i32 %v4_1000cac5, i32* @eax, align 4
  %v0_1000caca = load i32, i32* @esi, align 4
  %v1_1000caca = add i32 %v0_1000caca, 21
  %v2_1000caca = inttoptr i32 %v1_1000caca to i8*
  %v3_1000caca = load i8, i8* %v2_1000caca, align 1
  %v4_1000caca = and i8 %v3_1000caca, 1
  %v5_1000caca = icmp eq i8 %v4_1000caca, 0
  store i32 %v4_1000cac5, i32* @edi, align 4
  br i1 %v5_1000caca, label %dec_label_pc_1000cad9, label %dec_label_pc_1000cad2

dec_label_pc_1000cad2:                            ; preds = %dec_label_pc_1000cac4
  store i32 %v0_1000caca, i32* @ecx, align 4
  %v0_1000cad4 = call i32 @function_1000c210()
  store i32 %v0_1000cad4, i32* @eax, align 4
  br label %dec_label_pc_1000cad9

dec_label_pc_1000cad9:                            ; preds = %dec_label_pc_1000cad2, %dec_label_pc_1000cac4
  %v1_1000cad9 = icmp eq i32 %v4_1000cac5, 0
  %v1_1000cadb = icmp eq i1 %v1_1000cad9, false
  br i1 %v1_1000cadb, label %dec_label_pc_1000caee, label %dec_label_pc_1000cadd

dec_label_pc_1000cadd:                            ; preds = %dec_label_pc_1000cad9
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000cae1 = inttoptr i32 %arg1 to i8*
  store i8 0, i8* %v1_1000cae1, align 1
  %v0_1000cae4 = load i32, i32* @esi, align 4
  %v1_1000cae4 = add i32 %v0_1000cae4, 20
  %v2_1000cae4 = inttoptr i32 %v1_1000cae4 to i8*
  %v3_1000cae4 = load i8, i8* %v2_1000cae4, align 1
  %v4_1000cae4 = or i8 %v3_1000cae4, 2
  store i8 %v4_1000cae4, i8* %v2_1000cae4, align 1
  %v0_1000caeb = load i32, i32* @eax, align 4
  ret i32 %v0_1000caeb

dec_label_pc_1000caee:                            ; preds = %dec_label_pc_1000cad9
  %v1_1000caee = load i32, i32* @ebx, align 4
  %v8_1000caf0 = icmp sgt i32 %v4_1000cac5, %v1_1000caee
  br i1 %v8_1000caf0, label %dec_label_pc_1000cb28, label %dec_label_pc_1000caf2

dec_label_pc_1000caf2:                            ; preds = %dec_label_pc_1000caee
  %v1_1000caf2 = add i32 %v4_1000cac5, -1
  %tmp27 = icmp slt i32 %v1_1000caf2, 1
  br i1 %tmp27, label %dec_label_pc_1000cb1e, label %dec_label_pc_1000caf9

dec_label_pc_1000caf9:                            ; preds = %dec_label_pc_1000caf2
  %v0_1000cafa = load i32, i32* @esi, align 4
  store i32 %v0_1000cafa, i32* @ecx, align 4
  %v1_1000cafc = call i32 @function_1000bf20(i32 %v1_1000caf2)
  store i32 %v1_1000cafc, i32* @eax, align 4
  %v4_1000cb01 = trunc i32 %v1_1000cafc to i8
  %v5_1000cb01 = icmp eq i8 %v4_1000cb01, 0
  br i1 %v5_1000cb01, label %dec_label_pc_1000cb1e, label %dec_label_pc_1000cb05

dec_label_pc_1000cb05:                            ; preds = %dec_label_pc_1000caf9
  %v0_1000cb05 = load i32, i32* @esi, align 4
  %v1_1000cb05 = add i32 %v0_1000cb05, 12
  %v2_1000cb05 = inttoptr i32 %v1_1000cb05 to i32*
  %v3_1000cb05 = load i32, i32* %v2_1000cb05, align 4
  %v2_1000cb08 = add i32 %v0_1000cb05, 32
  %v3_1000cb08 = inttoptr i32 %v2_1000cb08 to i32*
  %v4_1000cb08 = load i32, i32* %v3_1000cb08, align 4
  %v5_1000cb08 = sub i32 %v3_1000cb05, %v4_1000cb08
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_1000cb0e = load i32, i32* @ecx, align 4
  %v4_1000cb0e = add i32 %v3_1000cb0e, %v5_1000cb08
  store i32 %v4_1000cb0e, i32* @edx, align 4
  %v0_1000cb13 = call i32 @_memcpy.1()
  store i32 %v0_1000cb13, i32* @eax, align 4
  %v0_1000cb1b = load i32, i32* @esi, align 4
  %v1_1000cb1b = add i32 %v0_1000cb1b, 12
  %v2_1000cb1b = inttoptr i32 %v1_1000cb1b to i32*
  %v3_1000cb1b = load i32, i32* %v2_1000cb1b, align 4
  %v5_1000cb1b = add i32 %v3_1000cb1b, %v1_1000caf2
  store i32 %v5_1000cb1b, i32* %v2_1000cb1b, align 4
  br label %dec_label_pc_1000cb1e

dec_label_pc_1000cb1e:                            ; preds = %dec_label_pc_1000cb05, %dec_label_pc_1000caf9, %dec_label_pc_1000caf2
  store i32 %arg1, i32* @ecx, align 4
  %v4_1000cb21 = add i32 %v1_1000caf2, %arg1
  %v5_1000cb21 = inttoptr i32 %v4_1000cb21 to i8*
  store i8 0, i8* %v5_1000cb21, align 1
  br label %dec_label_pc_1000cb92

dec_label_pc_1000cb28:                            ; preds = %dec_label_pc_1000caee
  %v1_1000cb28 = add i32 %v1_1000caee, -1
  store i32 %v1_1000cb28, i32* @eax, align 4
  %tmp28 = icmp slt i32 %v1_1000cb28, 1
  br i1 %tmp28, label %dec_label_pc_1000cb5a, label %dec_label_pc_1000cb2f

dec_label_pc_1000cb2f:                            ; preds = %dec_label_pc_1000cb28
  %v0_1000cb30 = load i32, i32* @esi, align 4
  store i32 %v0_1000cb30, i32* @ecx, align 4
  %v1_1000cb32 = call i32 @function_1000bf20(i32 %v1_1000cb28)
  store i32 %v1_1000cb32, i32* %eax.global-to-local, align 4
  %v4_1000cb37 = trunc i32 %v1_1000cb32 to i8
  %v5_1000cb37 = icmp eq i8 %v4_1000cb37, 0
  br i1 %v5_1000cb37, label %dec_label_pc_1000cb5a, label %dec_label_pc_1000cb3b

dec_label_pc_1000cb3b:                            ; preds = %dec_label_pc_1000cb2f
  %v0_1000cb3b = load i32, i32* @esi, align 4
  %v1_1000cb3b = add i32 %v0_1000cb3b, 12
  %v2_1000cb3b = inttoptr i32 %v1_1000cb3b to i32*
  %v3_1000cb3b = load i32, i32* %v2_1000cb3b, align 4
  %v2_1000cb3e = add i32 %v0_1000cb3b, 32
  %v3_1000cb3e = inttoptr i32 %v2_1000cb3e to i32*
  %v4_1000cb3e = load i32, i32* %v3_1000cb3e, align 4
  %v5_1000cb3e = sub i32 %v3_1000cb3b, %v4_1000cb3e
  %v3_1000cb44 = load i32, i32* @ecx, align 4
  %v4_1000cb44 = add i32 %v3_1000cb44, %v5_1000cb3e
  store i32 %v4_1000cb44, i32* @edx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_1000cb4c = call i32 @_memcpy.1()
  %v0_1000cb51 = load i32, i32* @ebx, align 4
  %v1_1000cb51 = add i32 %v0_1000cb51, -1
  store i32 %v1_1000cb51, i32* %eax.global-to-local, align 4
  %v0_1000cb57 = load i32, i32* @esi, align 4
  %v1_1000cb57 = add i32 %v0_1000cb57, 12
  %v2_1000cb57 = inttoptr i32 %v1_1000cb57 to i32*
  %v3_1000cb57 = load i32, i32* %v2_1000cb57, align 4
  %v5_1000cb57 = add i32 %v3_1000cb57, %v1_1000cb51
  store i32 %v5_1000cb57, i32* %v2_1000cb57, align 4
  br label %dec_label_pc_1000cb5a

dec_label_pc_1000cb5a:                            ; preds = %dec_label_pc_1000cb3b, %dec_label_pc_1000cb2f, %dec_label_pc_1000cb28
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000cb5d = load i32, i32* @ebx, align 4
  %v3_1000cb5d = add i32 %arg1, -1
  %v4_1000cb5d = add i32 %v3_1000cb5d, %v1_1000cb5d
  %v5_1000cb5d = inttoptr i32 %v4_1000cb5d to i8*
  store i8 0, i8* %v5_1000cb5d, align 1
  %v1_1000cb62 = load i32, i32* @ebx, align 4
  %v2_1000cb62 = sub i32 %v4_1000cac5, %v1_1000cb62
  store i32 %v2_1000cb62, i32* @edi, align 4
  %v0_1000cb64 = load i32, i32* @esi, align 4
  %v1_1000cb64 = add i32 %v0_1000cb64, 12
  %v2_1000cb64 = inttoptr i32 %v1_1000cb64 to i32*
  %v3_1000cb64 = load i32, i32* %v2_1000cb64, align 4
  %v5_1000cb64 = add i32 %v3_1000cb64, %v2_1000cb62
  store i32 %v5_1000cb64, i32* %v2_1000cb64, align 4
  %v0_1000cb67 = load i32, i32* @esi, align 4
  %v1_1000cb67 = add i32 %v0_1000cb67, 12
  %v2_1000cb67 = inttoptr i32 %v1_1000cb67 to i32*
  %v3_1000cb67 = load i32, i32* %v2_1000cb67, align 4
  store i32 %v3_1000cb67, i32* @eax, align 4
  %v2_1000cb6a = add i32 %v0_1000cb67, 28
  %v3_1000cb6a = inttoptr i32 %v2_1000cb6a to i32*
  %v4_1000cb6a = load i32, i32* %v3_1000cb6a, align 4
  %v7_1000cb6d = icmp sgt i32 %v3_1000cb67, %v4_1000cb6a
  br i1 %v7_1000cb6d, label %dec_label_pc_1000cb6f, label %dec_label_pc_1000cb75

dec_label_pc_1000cb6f:                            ; preds = %dec_label_pc_1000cb5a
  %v1_1000cb6f = add i32 %v0_1000cb67, 20
  %v2_1000cb6f = inttoptr i32 %v1_1000cb6f to i8*
  %v3_1000cb6f = load i8, i8* %v2_1000cb6f, align 1
  %v4_1000cb6f = or i8 %v3_1000cb6f, 2
  store i8 %v4_1000cb6f, i8* %v2_1000cb6f, align 1
  br label %dec_label_pc_1000cb92

dec_label_pc_1000cb75:                            ; preds = %dec_label_pc_1000cb5a
  %v1_1000cb75 = add i32 %v0_1000cb67, 32
  %v2_1000cb75 = inttoptr i32 %v1_1000cb75 to i32*
  %v3_1000cb75 = load i32, i32* %v2_1000cb75, align 4
  store i32 %v3_1000cb75, i32* @ecx, align 4
  %v1_1000cb78 = add i32 %v0_1000cb67, 20
  %v2_1000cb78 = inttoptr i32 %v1_1000cb78 to i8*
  %v3_1000cb78 = load i8, i8* %v2_1000cb78, align 1
  %v4_1000cb78 = and i8 %v3_1000cb78, -3
  store i8 %v4_1000cb78, i8* %v2_1000cb78, align 1
  %v0_1000cb7c = load i32, i32* @eax, align 4
  %v1_1000cb7c = load i32, i32* @ecx, align 4
  %v5_1000cb7e = icmp slt i32 %v0_1000cb7c, %v1_1000cb7c
  %v0_1000cb89.pre = load i32, i32* @esi, align 4
  br i1 %v5_1000cb7e, label %dec_label_pc_1000cb89, label %dec_label_pc_1000cb80

dec_label_pc_1000cb80:                            ; preds = %dec_label_pc_1000cb75
  %v1_1000cb80 = add i32 %v0_1000cb89.pre, 4
  %v2_1000cb80 = inttoptr i32 %v1_1000cb80 to i32*
  %v3_1000cb80 = load i32, i32* %v2_1000cb80, align 4
  %v2_1000cb83 = add i32 %v3_1000cb80, %v1_1000cb7c
  store i32 %v2_1000cb83, i32* @edx, align 4
  %v5_1000cb87 = icmp slt i32 %v0_1000cb7c, %v2_1000cb83
  br i1 %v5_1000cb87, label %dec_label_pc_1000cb92, label %dec_label_pc_1000cb89

dec_label_pc_1000cb89:                            ; preds = %dec_label_pc_1000cb75, %dec_label_pc_1000cb80
  %v1_1000cb89 = add i32 %v0_1000cb89.pre, 36
  %v2_1000cb89 = inttoptr i32 %v1_1000cb89 to i32*
  %v3_1000cb89 = load i32, i32* %v2_1000cb89, align 4
  store i32 %v3_1000cb89, i32* @eax, align 4
  %v0_1000cb8c = load i32, i32* @esp, align 4
  %v1_1000cb8c = add i32 %v0_1000cb8c, -4
  %v2_1000cb8c = inttoptr i32 %v1_1000cb8c to i32*
  store i32 -1, i32* %v2_1000cb8c, align 4
  %v0_1000cb8e = load i32, i32* @esi, align 4
  store i32 %v0_1000cb8e, i32* @ecx, align 4
  br label %dec_label_pc_1000cb92

dec_label_pc_1000cb92:                            ; preds = %dec_label_pc_1000cb89, %dec_label_pc_1000cb80, %dec_label_pc_1000cb6f, %dec_label_pc_1000cb1e
  %v0_1000cb92 = load i32, i32* @esi, align 4
  %v1_1000cb92 = add i32 %v0_1000cb92, 21
  %v2_1000cb92 = inttoptr i32 %v1_1000cb92 to i8*
  %v3_1000cb92 = load i8, i8* %v2_1000cb92, align 1
  %v4_1000cb92 = and i8 %v3_1000cb92, 1
  %v5_1000cb92 = icmp eq i8 %v4_1000cb92, 0
  %v1_1000cb96 = icmp eq i1 %v5_1000cb92, false
  br i1 %v1_1000cb96, label %dec_label_pc_1000cb92.dec_label_pc_1000cba3_crit_edge, label %dec_label_pc_1000cb98

dec_label_pc_1000cb92.dec_label_pc_1000cba3_crit_edge: ; preds = %dec_label_pc_1000cb92
  %v0_1000cba7.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_1000cba3

dec_label_pc_1000cb98:                            ; preds = %dec_label_pc_1000cb92
  %v2_1000cb98 = ptrtoint i32* %stack_var_7 to i32
  %v1_1000cb9b = load i32, i32* @esp, align 4
  %v2_1000cb9b = add i32 %v1_1000cb9b, -4
  %v3_1000cb9b = inttoptr i32 %v2_1000cb9b to i32*
  store i32 %v2_1000cb98, i32* %v3_1000cb9b, align 4
  %v0_1000cb9c = load i32, i32* @esi, align 4
  store i32 %v0_1000cb9c, i32* @ecx, align 4
  %v0_1000cb9e = call i32 @function_1000b150(i32* nonnull @5)
  store i32 %v0_1000cb9e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000cba3

dec_label_pc_1000cba3:                            ; preds = %dec_label_pc_1000cb92.dec_label_pc_1000cba3_crit_edge, %dec_label_pc_1000cb98
  %v0_1000cba7 = phi i32 [ %v0_1000cba7.pre, %dec_label_pc_1000cb92.dec_label_pc_1000cba3_crit_edge ], [ %v0_1000cb9e, %dec_label_pc_1000cb98 ]
  ret i32 %v0_1000cba7
}

define i32 @function_1000cbb0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000cbb0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-5 = alloca i32, align 4
  %v0_1000cbb3 = load i32, i32* @ecx, align 4
  %v2_1000cbb7 = ptrtoint i32* %stack_var_-5 to i32
  store i32 %v2_1000cbb7, i32* @eax, align 4
  store i32 %v2_1000cbb7, i32* %stack_var_-24, align 4
  store i32 %v0_1000cbb3, i32* @esi, align 4
  %v2_1000cbbd = call i32 @function_1000b150(i32* nonnull %stack_var_-5)
  %v3_1000cbc2 = load i32, i32* %stack_var_-5, align 4
  %v4_1000cbc2 = and i32 %v3_1000cbc2, 255
  %v6_1000cbc2 = and i32 %v2_1000cbbd, -256
  %v7_1000cbc2 = or i32 %v4_1000cbc2, %v6_1000cbc2
  store i32 %v7_1000cbc2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_1000cbc8 = load i32, i32* @ebx, align 4
  %v3_1000cbc8 = and i32 %v2_1000cbc8, -256
  %v4_1000cbc8 = or i32 %v3_1000cbc8, %v4_1000cbc2
  store i32 %v4_1000cbc8, i32* @ebx, align 4
  %v1_1000cbca = trunc i32 %v3_1000cbc2 to i8
  %v3_1000cbca = add i32 %arg1, 4
  %v4_1000cbca = inttoptr i32 %v3_1000cbca to i8*
  %v5_1000cbca = load i8, i8* %v4_1000cbca, align 1
  %v16_1000cbca = icmp eq i8 %v1_1000cbca, %v5_1000cbca
  %v1_1000cbcd = icmp eq i1 %v16_1000cbca, false
  br i1 %v1_1000cbcd, label %dec_label_pc_1000cc40, label %dec_label_pc_1000cbcf

dec_label_pc_1000cbcf:                            ; preds = %dec_label_pc_1000cbb0
  %v1_1000cbcf = add i32 %arg1, 20
  %v2_1000cbcf = inttoptr i32 %v1_1000cbcf to i32*
  %v3_1000cbcf = load i32, i32* %v2_1000cbcf, align 4
  %v2_1000cbd2 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v3_1000cbcf, i32* %stack_var_4, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v0_1000cbdb = load i32, i32* @esi, align 4
  store i32 %v0_1000cbdb, i32* @ecx, align 4
  %v3_1000cbdd = call i32 @function_1000bf80(i32 0, i32* nonnull %stack_var_4)
  store i32 %v3_1000cbdd, i32* %eax.global-to-local, align 4
  %v4_1000cbe2 = trunc i32 %v3_1000cbdd to i8
  %v5_1000cbe2 = icmp eq i8 %v4_1000cbe2, 0
  %v1_1000cbe4 = icmp eq i1 %v5_1000cbe2, false
  br i1 %v1_1000cbe4, label %dec_label_pc_1000cbef, label %dec_label_pc_1000cbe6

dec_label_pc_1000cbe6:                            ; preds = %dec_label_pc_1000cbcf
  store i32 %v2_1000cbd2, i32* @esi, align 4
  %v2_1000cbe8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000cbe8, i32* @ebx, align 4
  ret i32 %v3_1000cbdd

dec_label_pc_1000cbef:                            ; preds = %dec_label_pc_1000cbcf
  %v0_1000cbef = load i32, i32* @esi, align 4
  %v1_1000cbef = add i32 %v0_1000cbef, 12
  %v2_1000cbef = inttoptr i32 %v1_1000cbef to i32*
  %v3_1000cbef = load i32, i32* %v2_1000cbef, align 4
  store i32 %v3_1000cbef, i32* %eax.global-to-local, align 4
  %v2_1000cbf2 = add i32 %v0_1000cbef, 32
  %v3_1000cbf2 = inttoptr i32 %v2_1000cbf2 to i32*
  %v4_1000cbf2 = load i32, i32* %v3_1000cbf2, align 4
  %v5_1000cbf2 = sub i32 %v3_1000cbef, %v4_1000cbf2
  store i32 %v5_1000cbf2, i32* %eax.global-to-local, align 4
  %v0_1000cbf5 = load i32, i32* @edi, align 4
  %v1_1000cbf5 = inttoptr i32 %v0_1000cbf5 to i32*
  %v2_1000cbf5 = load i32, i32* %v1_1000cbf5, align 4
  %v3_1000cbf7 = load i32, i32* @ecx, align 4
  %v4_1000cbf7 = add i32 %v3_1000cbf7, %v5_1000cbf2
  store i32 %v4_1000cbf7, i32* %eax.global-to-local, align 4
  %v1_1000cbf9 = inttoptr i32 %v2_1000cbf5 to i32*
  %v2_1000cbf9 = load i32, i32* %v1_1000cbf9, align 4
  store i32 %v2_1000cbf9, i32* @edx, align 4
  store i32 %v0_1000cbf5, i32* @ecx, align 4
  %v1_1000cc04 = and i32 %v4_1000cbf7, 255
  %v2_1000cc04 = load i32, i32* @ebx, align 4
  %v3_1000cc04 = and i32 %v2_1000cc04, -256
  %v4_1000cc04 = or i32 %v3_1000cc04, %v1_1000cc04
  store i32 %v4_1000cc04, i32* @ebx, align 4
  %v3_1000cc06 = load i32, i32* %stack_var_4, align 4
  store i32 %v3_1000cc06, i32* %eax.global-to-local, align 4
  %v3_1000cc09 = load i32, i32* %v2_1000cbef, align 4
  %v5_1000cc09 = add i32 %v3_1000cc09, %v3_1000cc06
  store i32 %v5_1000cc09, i32* %v2_1000cbef, align 4
  %v0_1000cc0c = load i32, i32* @esi, align 4
  %v1_1000cc0c = add i32 %v0_1000cc0c, 12
  %v2_1000cc0c = inttoptr i32 %v1_1000cc0c to i32*
  %v3_1000cc0c = load i32, i32* %v2_1000cc0c, align 4
  store i32 %v3_1000cc0c, i32* %eax.global-to-local, align 4
  %v2_1000cc0f = add i32 %v0_1000cc0c, 28
  %v3_1000cc0f = inttoptr i32 %v2_1000cc0f to i32*
  %v4_1000cc0f = load i32, i32* %v3_1000cc0f, align 4
  %v7_1000cc12 = icmp sgt i32 %v3_1000cc0c, %v4_1000cc0f
  br i1 %v7_1000cc12, label %dec_label_pc_1000cc14, label %dec_label_pc_1000cc23

dec_label_pc_1000cc14:                            ; preds = %dec_label_pc_1000cbef
  %v1_1000cc14 = add i32 %v0_1000cc0c, 20
  %v2_1000cc14 = inttoptr i32 %v1_1000cc14 to i8*
  %v3_1000cc14 = load i8, i8* %v2_1000cc14, align 1
  %v4_1000cc14 = or i8 %v3_1000cc14, 2
  store i8 %v4_1000cc14, i8* %v2_1000cc14, align 1
  store i32 %v2_1000cbd2, i32* @esi, align 4
  %v0_1000cc1a = load i32, i32* @ebx, align 4
  %v1_1000cc1a = and i32 %v0_1000cc1a, 255
  %v2_1000cc1a = load i32, i32* %eax.global-to-local, align 4
  %v3_1000cc1a = and i32 %v2_1000cc1a, -256
  %v4_1000cc1a = or i32 %v3_1000cc1a, %v1_1000cc1a
  store i32 %v4_1000cc1a, i32* %eax.global-to-local, align 4
  %v2_1000cc1c = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_1000cc1c, i32* @ebx, align 4
  ret i32 %v4_1000cc1a

dec_label_pc_1000cc23:                            ; preds = %dec_label_pc_1000cbef
  %v1_1000cc23 = add i32 %v0_1000cc0c, 32
  %v2_1000cc23 = inttoptr i32 %v1_1000cc23 to i32*
  %v3_1000cc23 = load i32, i32* %v2_1000cc23, align 4
  store i32 %v3_1000cc23, i32* @ecx, align 4
  %v1_1000cc26 = add i32 %v0_1000cc0c, 20
  %v2_1000cc26 = inttoptr i32 %v1_1000cc26 to i8*
  %v3_1000cc26 = load i8, i8* %v2_1000cc26, align 1
  %v4_1000cc26 = and i8 %v3_1000cc26, -3
  store i8 %v4_1000cc26, i8* %v2_1000cc26, align 1
  %v0_1000cc2a = load i32, i32* %eax.global-to-local, align 4
  %v1_1000cc2a = load i32, i32* @ecx, align 4
  %v5_1000cc2c = icmp slt i32 %v0_1000cc2a, %v1_1000cc2a
  %v0_1000cc37.pre = load i32, i32* @esi, align 4
  br i1 %v5_1000cc2c, label %dec_label_pc_1000cc37, label %dec_label_pc_1000cc2e

dec_label_pc_1000cc2e:                            ; preds = %dec_label_pc_1000cc23
  %v1_1000cc2e = add i32 %v0_1000cc37.pre, 4
  %v2_1000cc2e = inttoptr i32 %v1_1000cc2e to i32*
  %v3_1000cc2e = load i32, i32* %v2_1000cc2e, align 4
  %v2_1000cc31 = add i32 %v3_1000cc2e, %v1_1000cc2a
  store i32 %v2_1000cc31, i32* @edx, align 4
  %v5_1000cc35 = icmp slt i32 %v0_1000cc2a, %v2_1000cc31
  br i1 %v5_1000cc35, label %dec_label_pc_1000cc40, label %dec_label_pc_1000cc37

dec_label_pc_1000cc37:                            ; preds = %dec_label_pc_1000cc23, %dec_label_pc_1000cc2e
  %v1_1000cc37 = add i32 %v0_1000cc37.pre, 36
  %v2_1000cc37 = inttoptr i32 %v1_1000cc37 to i32*
  %v3_1000cc37 = load i32, i32* %v2_1000cc37, align 4
  store i32 %v3_1000cc37, i32* %eax.global-to-local, align 4
  store i32 %v0_1000cc37.pre, i32* @ecx, align 4
  br label %dec_label_pc_1000cc40

dec_label_pc_1000cc40:                            ; preds = %dec_label_pc_1000cc37, %dec_label_pc_1000cc2e, %dec_label_pc_1000cbb0
  %v2_1000cc42 = phi i32 [ %v3_1000cc37, %dec_label_pc_1000cc37 ], [ %v0_1000cc2a, %dec_label_pc_1000cc2e ], [ %v7_1000cbc2, %dec_label_pc_1000cbb0 ]
  %v0_1000cc40 = load i32, i32* @esp, align 4
  %v3_1000cc40 = add i32 %v0_1000cc40, 4
  %v1_1000cc41 = inttoptr i32 %v3_1000cc40 to i32*
  %v2_1000cc41 = load i32, i32* %v1_1000cc41, align 4
  store i32 %v2_1000cc41, i32* @esi, align 4
  %v3_1000cc41 = add i32 %v0_1000cc40, 8
  %v0_1000cc42 = load i32, i32* @ebx, align 4
  %v1_1000cc42 = and i32 %v0_1000cc42, 255
  %v3_1000cc42 = and i32 %v2_1000cc42, -256
  %v4_1000cc42 = or i32 %v1_1000cc42, %v3_1000cc42
  store i32 %v4_1000cc42, i32* %eax.global-to-local, align 4
  %v1_1000cc44 = inttoptr i32 %v3_1000cc41 to i32*
  %v2_1000cc44 = load i32, i32* %v1_1000cc44, align 4
  store i32 %v2_1000cc44, i32* @ebx, align 4
  ret i32 %v4_1000cc42
}

define i32 @function_1000cc50(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000cc50:
  %eax.global-to-local = alloca i32, align 4
  %tmp12 = ptrtoint i32* %arg2 to i32
  %v0_1000cc50 = load i32, i32* @ebp, align 4
  %v0_1000cc53 = load i32, i32* @ecx, align 4
  %v0_1000cc54 = load i32, i32* @ebx, align 4
  %v0_1000cc55 = load i32, i32* @esi, align 4
  store i32 %v0_1000cc53, i32* @esi, align 4
  %v1_1000cc58 = add i32 %v0_1000cc53, 21
  %v2_1000cc58 = inttoptr i32 %v1_1000cc58 to i8*
  %v3_1000cc58 = load i8, i8* %v2_1000cc58, align 1
  %v4_1000cc58 = and i8 %v3_1000cc58, 1
  %v5_1000cc58 = icmp eq i8 %v4_1000cc58, 0
  br i1 %v5_1000cc58, label %dec_label_pc_1000cda0, label %dec_label_pc_1000cc62

dec_label_pc_1000cc62:                            ; preds = %dec_label_pc_1000cc50
  store i32 %arg1, i32* @ebx, align 4
  %v1_1000cc65 = icmp eq i32 %arg1, 0
  br i1 %v1_1000cc65, label %dec_label_pc_1000cda0, label %dec_label_pc_1000cc6d

dec_label_pc_1000cc6d:                            ; preds = %dec_label_pc_1000cc62
  %v1_1000cc6d = add i32 %v0_1000cc53, 20
  %v2_1000cc6d = inttoptr i32 %v1_1000cc6d to i8*
  %v3_1000cc6d = load i8, i8* %v2_1000cc6d, align 1
  %v10_1000cc6d = icmp eq i8 %v3_1000cc6d, 0
  br i1 %v10_1000cc6d, label %dec_label_pc_1000cc81, label %dec_label_pc_1000cc73

dec_label_pc_1000cc73:                            ; preds = %dec_label_pc_1000cc6d
  store i32 %tmp12, i32* %eax.global-to-local, align 4
  %v1_1000cc77 = bitcast i32* %arg2 to i8*
  store i8 0, i8* %v1_1000cc77, align 1
  ret i32 %tmp12

dec_label_pc_1000cc81:                            ; preds = %dec_label_pc_1000cc6d
  %v10_1000cc81 = icmp eq i32 %arg3, 0
  %v1_1000cc85 = icmp eq i1 %v10_1000cc81, false
  %arg3. = select i1 %v1_1000cc85, i32 %arg3, i32 2147483647
  %v0_1000cc8e = call i32 @function_1000c210()
  store i32 %v0_1000cc8e, i32* %eax.global-to-local, align 4
  %v1_1000cc93 = add i32 %arg1, 12
  %v2_1000cc93 = inttoptr i32 %v1_1000cc93 to i32*
  %v3_1000cc93 = load i32, i32* %v2_1000cc93, align 4
  store i32 %v3_1000cc93, i32* @eax, align 4
  %v1_1000cc96 = add i32 %arg1, 8
  %v2_1000cc96 = inttoptr i32 %v1_1000cc96 to i32*
  %v3_1000cc96 = load i32, i32* %v2_1000cc96, align 4
  %v0_1000cc9d = load i32, i32* @esi, align 4
  store i32 %v0_1000cc9d, i32* @ecx, align 4
  %v3_1000cc9f = call i32 @function_1000c570(i32 0, i32 %v3_1000cc96, i32 %v3_1000cc93)
  store i32 %v3_1000cc9f, i32* %eax.global-to-local, align 4
  %v4_1000cca4 = trunc i32 %v3_1000cc9f to i8
  %v5_1000cca4 = icmp eq i8 %v4_1000cca4, 0
  br i1 %v5_1000cca4, label %dec_label_pc_1000cdaf, label %dec_label_pc_1000ccac

dec_label_pc_1000ccac:                            ; preds = %dec_label_pc_1000cc81
  %v3_1000ccac = load i32, i32* %v2_1000cc93, align 4
  store i32 %v3_1000ccac, i32* %eax.global-to-local, align 4
  %v0_1000ccaf = load i32, i32* @esi, align 4
  %v1_1000ccaf = add i32 %v0_1000ccaf, 12
  %v2_1000ccaf = inttoptr i32 %v1_1000ccaf to i32*
  %v3_1000ccaf = load i32, i32* %v2_1000ccaf, align 4
  %v5_1000ccaf = add i32 %v3_1000ccaf, %v3_1000ccac
  store i32 %v5_1000ccaf, i32* %v2_1000ccaf, align 4
  %v0_1000ccb2 = load i32, i32* @esi, align 4
  %v1_1000ccb2 = add i32 %v0_1000ccb2, 12
  %v2_1000ccb2 = inttoptr i32 %v1_1000ccb2 to i32*
  %v3_1000ccb2 = load i32, i32* %v2_1000ccb2, align 4
  store i32 %v3_1000ccb2, i32* @eax, align 4
  %v2_1000ccb5 = add i32 %v0_1000ccb2, 28
  %v3_1000ccb5 = inttoptr i32 %v2_1000ccb5 to i32*
  %v4_1000ccb5 = load i32, i32* %v3_1000ccb5, align 4
  %v7_1000ccb8 = icmp sgt i32 %v3_1000ccb2, %v4_1000ccb5
  br i1 %v7_1000ccb8, label %dec_label_pc_1000ccba, label %dec_label_pc_1000ccc0

dec_label_pc_1000ccba:                            ; preds = %dec_label_pc_1000ccac
  %v1_1000ccba = add i32 %v0_1000ccb2, 20
  %v2_1000ccba = inttoptr i32 %v1_1000ccba to i8*
  %v3_1000ccba = load i8, i8* %v2_1000ccba, align 1
  %v4_1000ccba = or i8 %v3_1000ccba, 2
  store i8 %v4_1000ccba, i8* %v2_1000ccba, align 1
  %v0_1000ccdd.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ccdd

dec_label_pc_1000ccc0:                            ; preds = %dec_label_pc_1000ccac
  %v1_1000ccc0 = add i32 %v0_1000ccb2, 32
  %v2_1000ccc0 = inttoptr i32 %v1_1000ccc0 to i32*
  %v3_1000ccc0 = load i32, i32* %v2_1000ccc0, align 4
  store i32 %v3_1000ccc0, i32* @ecx, align 4
  %v1_1000ccc3 = add i32 %v0_1000ccb2, 20
  %v2_1000ccc3 = inttoptr i32 %v1_1000ccc3 to i8*
  %v3_1000ccc3 = load i8, i8* %v2_1000ccc3, align 1
  %v4_1000ccc3 = and i8 %v3_1000ccc3, -3
  store i8 %v4_1000ccc3, i8* %v2_1000ccc3, align 1
  %v0_1000ccc7 = load i32, i32* @eax, align 4
  %v1_1000ccc7 = load i32, i32* @ecx, align 4
  %v5_1000ccc9 = icmp slt i32 %v0_1000ccc7, %v1_1000ccc7
  %v0_1000ccd4.pre = load i32, i32* @esi, align 4
  br i1 %v5_1000ccc9, label %dec_label_pc_1000ccd4, label %dec_label_pc_1000cccb

dec_label_pc_1000cccb:                            ; preds = %dec_label_pc_1000ccc0
  %v1_1000cccb = add i32 %v0_1000ccd4.pre, 4
  %v2_1000cccb = inttoptr i32 %v1_1000cccb to i32*
  %v3_1000cccb = load i32, i32* %v2_1000cccb, align 4
  %v2_1000ccce = add i32 %v3_1000cccb, %v1_1000ccc7
  store i32 %v2_1000ccce, i32* @edx, align 4
  %v5_1000ccd2 = icmp slt i32 %v0_1000ccc7, %v2_1000ccce
  br i1 %v5_1000ccd2, label %dec_label_pc_1000ccdd, label %dec_label_pc_1000ccd4

dec_label_pc_1000ccd4:                            ; preds = %dec_label_pc_1000ccc0, %dec_label_pc_1000cccb
  %v1_1000ccd4 = add i32 %v0_1000ccd4.pre, 36
  %v2_1000ccd4 = inttoptr i32 %v1_1000ccd4 to i32*
  %v3_1000ccd4 = load i32, i32* %v2_1000ccd4, align 4
  store i32 %v3_1000ccd4, i32* @eax, align 4
  store i32 %v0_1000ccd4.pre, i32* @ecx, align 4
  br label %dec_label_pc_1000ccdd

dec_label_pc_1000ccdd:                            ; preds = %dec_label_pc_1000ccd4, %dec_label_pc_1000cccb, %dec_label_pc_1000ccba
  %v0_1000ccdd = phi i32 [ %v0_1000ccd4.pre, %dec_label_pc_1000ccd4 ], [ %v0_1000ccd4.pre, %dec_label_pc_1000cccb ], [ %v0_1000ccdd.pre, %dec_label_pc_1000ccba ]
  %v1_1000ccdd = add i32 %v0_1000ccdd, 20
  %v2_1000ccdd = inttoptr i32 %v1_1000ccdd to i8*
  %v3_1000ccdd = load i8, i8* %v2_1000ccdd, align 1
  %v10_1000ccdd = icmp eq i8 %v3_1000ccdd, 0
  %v1_1000cce8 = icmp eq i1 %v10_1000ccdd, false
  br i1 %v1_1000cce8, label %dec_label_pc_1000ccdd.dec_label_pc_1000cd82_crit_edge, label %dec_label_pc_1000ccee

dec_label_pc_1000ccdd.dec_label_pc_1000cd82_crit_edge: ; preds = %dec_label_pc_1000ccdd
  br label %dec_label_pc_1000cd82

dec_label_pc_1000ccee:                            ; preds = %dec_label_pc_1000ccdd
  %v0_1000ccee = load i32, i32* @edi, align 4
  %v1_1000ccee = load i32, i32* @esp, align 4
  %v2_1000ccee = add i32 %v1_1000ccee, -4
  %v3_1000ccee = inttoptr i32 %v2_1000ccee to i32*
  store i32 %v0_1000ccee, i32* %v3_1000ccee, align 4
  %v0_1000ccf0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ccf0

dec_label_pc_1000ccf0:                            ; preds = %dec_label_pc_1000cd48, %dec_label_pc_1000ccee
  %v0_1000ccf0 = phi i32 [ %v0_1000ccf0.pre, %dec_label_pc_1000ccee ], [ %v0_1000cd48, %dec_label_pc_1000cd48 ]
  %v2_1000cd41 = phi i32 [ 0, %dec_label_pc_1000ccee ], [ %stack_var_4.1, %dec_label_pc_1000cd48 ]
  %v1_1000ccf0 = add i32 %v0_1000ccf0, 20
  %v2_1000ccf0 = inttoptr i32 %v1_1000ccf0 to i8*
  %v3_1000ccf0 = load i8, i8* %v2_1000ccf0, align 1
  %v4_1000ccf0 = and i8 %v3_1000ccf0, 2
  %v5_1000ccf0 = icmp eq i8 %v4_1000ccf0, 0
  %v3_1000ccf4 = load i32, i32* %v2_1000cc96, align 4
  store i32 %v3_1000ccf4, i32* @ecx, align 4
  %v3_1000ccf7 = load i32, i32* %v2_1000cc93, align 4
  store i32 %v3_1000ccf7, i32* @edi, align 4
  %v1_1000ccfd = icmp eq i1 %v5_1000ccf0, false
  br i1 %v1_1000ccfd, label %dec_label_pc_1000cd2e, label %dec_label_pc_1000ccff

dec_label_pc_1000ccff:                            ; preds = %dec_label_pc_1000ccf0
  %v1_1000ccff = load i32, i32* @esp, align 4
  %v2_1000ccff = add i32 %v1_1000ccff, -4
  %v3_1000ccff = inttoptr i32 %v2_1000ccff to i32*
  store i32 %v3_1000ccf7, i32* %v3_1000ccff, align 4
  %v0_1000cd00 = load i32, i32* @esi, align 4
  store i32 %v0_1000cd00, i32* @ecx, align 4
  %v1_1000cd02 = call i32 @function_1000bf20(i32 %v3_1000ccf4)
  store i32 %v1_1000cd02, i32* %eax.global-to-local, align 4
  %v0_1000cd07 = load i32, i32* @esi, align 4
  %v1_1000cd07 = add i32 %v0_1000cd07, 20
  %v2_1000cd07 = inttoptr i32 %v1_1000cd07 to i8*
  %v3_1000cd07 = load i8, i8* %v2_1000cd07, align 1
  %v4_1000cd07 = and i8 %v3_1000cd07, -3
  store i8 %v4_1000cd07, i8* %v2_1000cd07, align 1
  %v0_1000cd0b = load i32, i32* %eax.global-to-local, align 4
  %v4_1000cd0b = trunc i32 %v0_1000cd0b to i8
  %v5_1000cd0b = icmp eq i8 %v4_1000cd0b, 0
  br i1 %v5_1000cd0b, label %dec_label_pc_1000cd2e, label %dec_label_pc_1000cd0f

dec_label_pc_1000cd0f:                            ; preds = %dec_label_pc_1000ccff
  %v0_1000cd0f = load i32, i32* @esi, align 4
  %v1_1000cd0f = add i32 %v0_1000cd0f, 12
  %v2_1000cd0f = inttoptr i32 %v1_1000cd0f to i32*
  %v3_1000cd0f = load i32, i32* %v2_1000cd0f, align 4
  store i32 %v3_1000cd0f, i32* %eax.global-to-local, align 4
  %v2_1000cd12 = add i32 %v0_1000cd0f, 32
  %v3_1000cd12 = inttoptr i32 %v2_1000cd12 to i32*
  %v4_1000cd12 = load i32, i32* %v3_1000cd12, align 4
  %v5_1000cd12 = sub i32 %v3_1000cd0f, %v4_1000cd12
  store i32 %v3_1000ccf4, i32* @edx, align 4
  %v3_1000cd18 = load i32, i32* @ecx, align 4
  %v4_1000cd18 = add i32 %v3_1000cd18, %v5_1000cd12
  store i32 %v4_1000cd18, i32* @eax, align 4
  %v0_1000cd1a = load i32, i32* @edi, align 4
  %v1_1000cd1a = load i32, i32* @esp, align 4
  %v2_1000cd1a = add i32 %v1_1000cd1a, -4
  %v3_1000cd1a = inttoptr i32 %v2_1000cd1a to i32*
  store i32 %v0_1000cd1a, i32* %v3_1000cd1a, align 4
  %v0_1000cd1b = load i32, i32* @edx, align 4
  %v2_1000cd1b = add i32 %v1_1000cd1a, -8
  %v3_1000cd1b = inttoptr i32 %v2_1000cd1b to i32*
  store i32 %v0_1000cd1b, i32* %v3_1000cd1b, align 4
  %v0_1000cd1c = load i32, i32* @eax, align 4
  %v2_1000cd1c = add i32 %v1_1000cd1a, -12
  %v3_1000cd1c = inttoptr i32 %v2_1000cd1c to i32*
  store i32 %v0_1000cd1c, i32* %v3_1000cd1c, align 4
  %v3_1000cd1d = call i32 @function_10009540(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v1_1000cd25 = icmp eq i32 %v3_1000cd1d, 0
  %v1_1000cd27 = zext i1 %v1_1000cd25 to i32
  %v3_1000cd27 = and i32 %v3_1000cd1d, -256
  %v4_1000cd27 = or i32 %v1_1000cd27, %v3_1000cd27
  store i32 %v4_1000cd27, i32* %eax.global-to-local, align 4
  %v5_1000cd2a = icmp eq i1 %v1_1000cd25, false
  %v1_1000cd2c = icmp eq i1 %v5_1000cd2a, false
  br i1 %v1_1000cd2c, label %dec_label_pc_1000cd50, label %dec_label_pc_1000cd2e

dec_label_pc_1000cd2e:                            ; preds = %dec_label_pc_1000cd0f, %dec_label_pc_1000ccff, %dec_label_pc_1000ccf0
  %v1_1000cd2e = load i32, i32* @esp, align 4
  %v2_1000cd2e = add i32 %v1_1000cd2e, -4
  %v3_1000cd2e = inttoptr i32 %v2_1000cd2e to i32*
  store i32 %arg1, i32* %v3_1000cd2e, align 4
  %v0_1000cd2f = load i32, i32* @esi, align 4
  store i32 %v0_1000cd2f, i32* @ecx, align 4
  %v1_1000cd31 = call i32 @function_1000cbb0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000cd31, i32* @eax, align 4
  store i32 %v2_1000cd41, i32* @ecx, align 4
  %v5_1000cd3c = icmp slt i32 %v2_1000cd41, %arg3.
  br i1 %v5_1000cd3c, label %dec_label_pc_1000cd3e, label %dec_label_pc_1000cd48

dec_label_pc_1000cd3e:                            ; preds = %dec_label_pc_1000cd2e
  store i32 %tmp12, i32* @edx, align 4
  %v1_1000cd41 = trunc i32 %v1_1000cd31 to i8
  %v5_1000cd41 = add i32 %v2_1000cd41, %tmp12
  %v6_1000cd41 = inttoptr i32 %v5_1000cd41 to i8*
  store i8 %v1_1000cd41, i8* %v6_1000cd41, align 1
  %v0_1000cd44 = load i32, i32* @ecx, align 4
  %v1_1000cd44 = add i32 %v0_1000cd44, 1
  store i32 %v1_1000cd44, i32* @ecx, align 4
  br label %dec_label_pc_1000cd48

dec_label_pc_1000cd48:                            ; preds = %dec_label_pc_1000cd2e, %dec_label_pc_1000cd3e
  %stack_var_4.1 = phi i32 [ %v1_1000cd44, %dec_label_pc_1000cd3e ], [ %v2_1000cd41, %dec_label_pc_1000cd2e ]
  %v0_1000cd48 = load i32, i32* @esi, align 4
  %v1_1000cd48 = add i32 %v0_1000cd48, 20
  %v2_1000cd48 = inttoptr i32 %v1_1000cd48 to i8*
  %v3_1000cd48 = load i8, i8* %v2_1000cd48, align 1
  %v10_1000cd48 = icmp eq i8 %v3_1000cd48, 0
  br i1 %v10_1000cd48, label %dec_label_pc_1000ccf0, label %dec_label_pc_1000cd81

dec_label_pc_1000cd50:                            ; preds = %dec_label_pc_1000cd0f
  %v3_1000cd50 = load i32, i32* %v2_1000cc93, align 4
  %v0_1000cd53 = load i32, i32* @esi, align 4
  %v1_1000cd53 = add i32 %v0_1000cd53, 12
  %v2_1000cd53 = inttoptr i32 %v1_1000cd53 to i32*
  %v3_1000cd53 = load i32, i32* %v2_1000cd53, align 4
  %v5_1000cd53 = add i32 %v3_1000cd53, %v3_1000cd50
  store i32 %v5_1000cd53, i32* %v2_1000cd53, align 4
  %v0_1000cd56 = load i32, i32* @esi, align 4
  %v1_1000cd56 = add i32 %v0_1000cd56, 12
  %v2_1000cd56 = inttoptr i32 %v1_1000cd56 to i32*
  %v3_1000cd56 = load i32, i32* %v2_1000cd56, align 4
  store i32 %v3_1000cd56, i32* %eax.global-to-local, align 4
  %v2_1000cd59 = add i32 %v0_1000cd56, 28
  %v3_1000cd59 = inttoptr i32 %v2_1000cd59 to i32*
  %v4_1000cd59 = load i32, i32* %v3_1000cd59, align 4
  %v7_1000cd5c = icmp sgt i32 %v3_1000cd56, %v4_1000cd59
  br i1 %v7_1000cd5c, label %dec_label_pc_1000cd5e, label %dec_label_pc_1000cd64

dec_label_pc_1000cd5e:                            ; preds = %dec_label_pc_1000cd50
  %v1_1000cd5e = add i32 %v0_1000cd56, 20
  %v2_1000cd5e = inttoptr i32 %v1_1000cd5e to i8*
  %v3_1000cd5e = load i8, i8* %v2_1000cd5e, align 1
  %v4_1000cd5e = or i8 %v3_1000cd5e, 2
  store i8 %v4_1000cd5e, i8* %v2_1000cd5e, align 1
  br label %dec_label_pc_1000cd81

dec_label_pc_1000cd64:                            ; preds = %dec_label_pc_1000cd50
  %v1_1000cd64 = add i32 %v0_1000cd56, 32
  %v2_1000cd64 = inttoptr i32 %v1_1000cd64 to i32*
  %v3_1000cd64 = load i32, i32* %v2_1000cd64, align 4
  store i32 %v3_1000cd64, i32* @ecx, align 4
  %v1_1000cd67 = add i32 %v0_1000cd56, 20
  %v2_1000cd67 = inttoptr i32 %v1_1000cd67 to i8*
  %v3_1000cd67 = load i8, i8* %v2_1000cd67, align 1
  %v4_1000cd67 = and i8 %v3_1000cd67, -3
  store i8 %v4_1000cd67, i8* %v2_1000cd67, align 1
  %v0_1000cd6b = load i32, i32* %eax.global-to-local, align 4
  %v1_1000cd6b = load i32, i32* @ecx, align 4
  %v5_1000cd6d = icmp slt i32 %v0_1000cd6b, %v1_1000cd6b
  %v0_1000cd78.pre = load i32, i32* @esi, align 4
  br i1 %v5_1000cd6d, label %dec_label_pc_1000cd78, label %dec_label_pc_1000cd6f

dec_label_pc_1000cd6f:                            ; preds = %dec_label_pc_1000cd64
  %v1_1000cd6f = add i32 %v0_1000cd78.pre, 4
  %v2_1000cd6f = inttoptr i32 %v1_1000cd6f to i32*
  %v3_1000cd6f = load i32, i32* %v2_1000cd6f, align 4
  %v2_1000cd72 = add i32 %v3_1000cd6f, %v1_1000cd6b
  %v5_1000cd76 = icmp slt i32 %v0_1000cd6b, %v2_1000cd72
  br i1 %v5_1000cd76, label %dec_label_pc_1000cd81, label %dec_label_pc_1000cd78

dec_label_pc_1000cd78:                            ; preds = %dec_label_pc_1000cd64, %dec_label_pc_1000cd6f
  %v1_1000cd78 = add i32 %v0_1000cd78.pre, 36
  %v2_1000cd78 = inttoptr i32 %v1_1000cd78 to i32*
  %v3_1000cd78 = load i32, i32* %v2_1000cd78, align 4
  store i32 %v3_1000cd78, i32* %eax.global-to-local, align 4
  %v0_1000cd7b = load i32, i32* @esp, align 4
  %v1_1000cd7b = add i32 %v0_1000cd7b, -4
  %v2_1000cd7b = inttoptr i32 %v1_1000cd7b to i32*
  store i32 -1, i32* %v2_1000cd7b, align 4
  %v0_1000cd7d = load i32, i32* @esi, align 4
  store i32 %v0_1000cd7d, i32* @ecx, align 4
  br label %dec_label_pc_1000cd81

dec_label_pc_1000cd81:                            ; preds = %dec_label_pc_1000cd48, %dec_label_pc_1000cd78, %dec_label_pc_1000cd6f, %dec_label_pc_1000cd5e
  %stack_var_4.2 = phi i32 [ %v2_1000cd41, %dec_label_pc_1000cd5e ], [ %v2_1000cd41, %dec_label_pc_1000cd78 ], [ %v2_1000cd41, %dec_label_pc_1000cd6f ], [ %stack_var_4.1, %dec_label_pc_1000cd48 ]
  br label %dec_label_pc_1000cd82

dec_label_pc_1000cd82:                            ; preds = %dec_label_pc_1000ccdd.dec_label_pc_1000cd82_crit_edge, %dec_label_pc_1000cd81
  %stack_var_4.3 = phi i32 [ 0, %dec_label_pc_1000ccdd.dec_label_pc_1000cd82_crit_edge ], [ %stack_var_4.2, %dec_label_pc_1000cd81 ]
  %v5_1000cd88 = icmp slt i32 %stack_var_4.3, %arg3.
  br i1 %v5_1000cd88, label %dec_label_pc_1000cd8e, label %dec_label_pc_1000cd8a

dec_label_pc_1000cd8a:                            ; preds = %dec_label_pc_1000cd82
  %v1_1000cd8a = add i32 %arg3., -1
  br label %dec_label_pc_1000cd8e

dec_label_pc_1000cd8e:                            ; preds = %dec_label_pc_1000cd8a, %dec_label_pc_1000cd82
  %stack_var_4.4 = phi i32 [ %v1_1000cd8a, %dec_label_pc_1000cd8a ], [ %stack_var_4.3, %dec_label_pc_1000cd82 ]
  %storemerge = phi i32 [ %v1_1000cd8a, %dec_label_pc_1000cd8a ], [ %arg3., %dec_label_pc_1000cd82 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %tmp12, i32* @ecx, align 4
  %v3_1000cd95 = add i32 %stack_var_4.4, %tmp12
  %v4_1000cd95 = inttoptr i32 %v3_1000cd95 to i8*
  store i8 0, i8* %v4_1000cd95, align 1
  %v0_1000cd9d = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000cd9d

dec_label_pc_1000cda0:                            ; preds = %dec_label_pc_1000cc62, %dec_label_pc_1000cc50
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v6_1000cdaa = call i32 @function_1000caa0(i32 %tmp12, i32 %arg3, i32 %v0_1000cc55, i32 %v0_1000cc54, i32 %v0_1000cc53, i32 %v0_1000cc50)
  store i32 %v6_1000cdaa, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000cdaf

dec_label_pc_1000cdaf:                            ; preds = %dec_label_pc_1000cda0, %dec_label_pc_1000cc81
  %v0_1000cdb4 = phi i32 [ %v6_1000cdaa, %dec_label_pc_1000cda0 ], [ %v3_1000cc9f, %dec_label_pc_1000cc81 ]
  ret i32 %v0_1000cdb4
}

define i32 @function_1000cdc0(i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1000cdc0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp14 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_19 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_19, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000cdc3 = load i32, i32* @ebx, align 4
  %v0_1000cdc4 = load i32, i32* @esi, align 4
  %v0_1000cdc5 = load i32, i32* @edi, align 4
  store i32 %v0_1000cdc5, i32* %stack_var_-16, align 4
  store i32 %tmp, i32* @edi, align 4
  %v0_1000cdc9 = load i32, i32* @ecx, align 4
  store i32 %v0_1000cdc9, i32* @esi, align 4
  %v1_1000cdcb = bitcast i32* %arg2 to i8*
  store i8 0, i8* %v1_1000cdcb, align 1
  %v0_1000cdce = load i32, i32* @esi, align 4
  %v1_1000cdce = add i32 %v0_1000cdce, 20
  %v2_1000cdce = inttoptr i32 %v1_1000cdce to i8*
  %v3_1000cdce = load i8, i8* %v2_1000cdce, align 1
  %v10_1000cdce = icmp eq i8 %v3_1000cdce, 0
  store i1 %v10_1000cdce, i1* %zf.global-to-local, align 1
  %v1_1000cdd2 = icmp eq i1 %v10_1000cdce, false
  br i1 %v1_1000cdd2, label %dec_label_pc_1000cdf3, label %dec_label_pc_1000cdd4

dec_label_pc_1000cdd4:                            ; preds = %dec_label_pc_1000cdc0
  %v5_1000cdd4 = and i32 %arg4, 255
  %v6_1000cdd4 = load i32, i32* @ebx, align 4
  %v7_1000cdd4 = and i32 %v6_1000cdd4, -256
  %v8_1000cdd4 = or i32 %v7_1000cdd4, %v5_1000cdd4
  store i32 %v8_1000cdd4, i32* @ebx, align 4
  br label %dec_label_pc_1000cdd7

dec_label_pc_1000cdd7:                            ; preds = %dec_label_pc_1000cded, %dec_label_pc_1000cdd4
  %v0_1000cdd7 = phi i32 [ %v0_1000cded, %dec_label_pc_1000cded ], [ %v0_1000cdce, %dec_label_pc_1000cdd4 ]
  store i32 %v0_1000cdd7, i32* @ecx, align 4
  %v0_1000cdd9 = call i32 @function_1000c210()
  store i32 %v0_1000cdd9, i32* @eax, align 4
  %v0_1000cdde = load i32, i32* @ebx, align 4
  %v4_1000cdde = trunc i32 %v0_1000cdde to i8
  %v5_1000cdde = icmp eq i8 %v4_1000cdde, 0
  store i1 %v5_1000cdde, i1* %zf.global-to-local, align 1
  br i1 %v5_1000cdde, label %dec_label_pc_1000cdfd, label %dec_label_pc_1000cde2

dec_label_pc_1000cde2:                            ; preds = %dec_label_pc_1000cdd7
  %v0_1000cde2 = load i32, i32* @esi, align 4
  store i32 %v0_1000cde2, i32* @ecx, align 4
  %v0_1000cde4 = call i32 @function_1000ca20()
  store i32 %v0_1000cde4, i32* @eax, align 4
  %v4_1000cde9 = trunc i32 %v0_1000cde4 to i8
  %v5_1000cde9 = icmp eq i8 %v4_1000cde9, 0
  store i1 %v5_1000cde9, i1* %zf.global-to-local, align 1
  br i1 %v5_1000cde9, label %dec_label_pc_1000cdfd, label %dec_label_pc_1000cded

dec_label_pc_1000cded:                            ; preds = %dec_label_pc_1000cde2
  %v0_1000cded = load i32, i32* @esi, align 4
  %v1_1000cded = add i32 %v0_1000cded, 20
  %v2_1000cded = inttoptr i32 %v1_1000cded to i8*
  %v3_1000cded = load i8, i8* %v2_1000cded, align 1
  %v10_1000cded = icmp eq i8 %v3_1000cded, 0
  store i1 %v10_1000cded, i1* %zf.global-to-local, align 1
  br i1 %v10_1000cded, label %dec_label_pc_1000cdd7, label %dec_label_pc_1000cdf3

dec_label_pc_1000cdf3:                            ; preds = %dec_label_pc_1000cded, %dec_label_pc_1000cdfd, %dec_label_pc_1000cdc0
  %v0_1000cdf3 = load i32, i32* @esp, align 4
  %v1_1000cdf3 = inttoptr i32 %v0_1000cdf3 to i32*
  %v2_1000cdf3 = load i32, i32* %v1_1000cdf3, align 4
  store i32 %v2_1000cdf3, i32* @edi, align 4
  %v3_1000cdf3 = add i32 %v0_1000cdf3, 4
  %v1_1000cdf4 = inttoptr i32 %v3_1000cdf3 to i32*
  %v2_1000cdf4 = load i32, i32* %v1_1000cdf4, align 4
  store i32 %v2_1000cdf4, i32* @esi, align 4
  %v3_1000cdf4 = add i32 %v0_1000cdf3, 8
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 -1, i32* %eax.global-to-local, align 4
  %v1_1000cdf8 = inttoptr i32 %v3_1000cdf4 to i32*
  %v2_1000cdf8 = load i32, i32* %v1_1000cdf8, align 4
  store i32 %v2_1000cdf8, i32* @ebx, align 4
  %v3_1000cdf8 = add i32 %v0_1000cdf3, 12
  %v1_1000cdf9 = inttoptr i32 %v3_1000cdf8 to i32*
  %v2_1000cdf9 = load i32, i32* %v1_1000cdf9, align 4
  store i32 %v2_1000cdf9, i32* @ebp, align 4
  ret i32 -1

dec_label_pc_1000cdfd:                            ; preds = %dec_label_pc_1000cde2, %dec_label_pc_1000cdd7
  %v2_1000cdfd = ptrtoint i32* %stack_var_19 to i32
  store i32 %v2_1000cdfd, i32* @eax, align 4
  store i32 %v2_1000cdfd, i32* %stack_var_-20, align 4
  %v0_1000ce01 = load i32, i32* @esi, align 4
  store i32 %v0_1000ce01, i32* @ecx, align 4
  %v2_1000ce03 = call i32 @function_1000b150(i32* nonnull %stack_var_19)
  %v3_1000ce08 = load i32, i32* %stack_var_19, align 4
  %v4_1000ce08 = and i32 %v3_1000ce08, 255
  %v6_1000ce08 = and i32 %v2_1000ce03, -256
  %v7_1000ce08 = or i32 %v4_1000ce08, %v6_1000ce08
  store i32 %v7_1000ce08, i32* @eax, align 4
  %v4_1000ce0b = trunc i32 %v3_1000ce08 to i8
  %v5_1000ce0b = icmp eq i8 %v4_1000ce0b, 0
  store i1 %v5_1000ce0b, i1* %zf.global-to-local, align 1
  br i1 %v5_1000ce0b, label %dec_label_pc_1000cdf3, label %dec_label_pc_1000ce0f

dec_label_pc_1000ce0f:                            ; preds = %dec_label_pc_1000cdfd
  %v11_1000ce0f = icmp eq i8 %v4_1000ce0b, 34
  store i1 %v11_1000ce0f, i1* %zf.global-to-local, align 1
  %v1_1000ce11 = icmp eq i1 %v11_1000ce0f, false
  br i1 %v1_1000ce11, label %dec_label_pc_1000ceca, label %dec_label_pc_1000ce17

dec_label_pc_1000ce17:                            ; preds = %dec_label_pc_1000ce0f
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  %v0_1000ce19 = load i32, i32* @esi, align 4
  %v1_1000ce19 = add i32 %v0_1000ce19, 20
  %v2_1000ce19 = inttoptr i32 %v1_1000ce19 to i8*
  %v3_1000ce19 = load i8, i8* %v2_1000ce19, align 1
  %v10_1000ce19 = icmp eq i8 %v3_1000ce19, 0
  store i1 %v10_1000ce19, i1* %zf.global-to-local, align 1
  %v1_1000ce1d = icmp eq i1 %v10_1000ce19, false
  br i1 %v1_1000ce1d, label %dec_label_pc_1000cf74, label %dec_label_pc_1000ce23

dec_label_pc_1000ce23:                            ; preds = %dec_label_pc_1000ce17
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000ce30

dec_label_pc_1000ce30:                            ; preds = %dec_label_pc_1000ce93, %dec_label_pc_1000ce23
  %v2_1000cea9 = phi i32 [ %v0_1000ce93, %dec_label_pc_1000ce93 ], [ %v0_1000ce19, %dec_label_pc_1000ce23 ]
  %v1_1000ce30 = add i32 %v2_1000cea9, 20
  %v2_1000ce30 = inttoptr i32 %v1_1000ce30 to i8*
  %v3_1000ce30 = load i8, i8* %v2_1000ce30, align 1
  %v4_1000ce30 = zext i8 %v3_1000ce30 to i32
  %v5_1000ce30 = load i32, i32* @ecx, align 4
  %v6_1000ce30 = and i32 %v5_1000ce30, -256
  %v7_1000ce30 = or i32 %v6_1000ce30, %v4_1000ce30
  store i32 %v7_1000ce30, i32* @ecx, align 4
  %v2_1000ce33 = and i8 %v3_1000ce30, 2
  %v3_1000ce33 = icmp eq i8 %v2_1000ce33, 0
  store i1 %v3_1000ce33, i1* %zf.global-to-local, align 1
  %v1_1000ce36 = icmp eq i1 %v3_1000ce33, false
  br i1 %v1_1000ce36, label %dec_label_pc_1000cf74, label %dec_label_pc_1000ce3c

dec_label_pc_1000ce3c:                            ; preds = %dec_label_pc_1000ce30
  %v1_1000ce3c = add i32 %v2_1000cea9, 12
  %v2_1000ce3c = inttoptr i32 %v1_1000ce3c to i32*
  %v3_1000ce3c = load i32, i32* %v2_1000ce3c, align 4
  store i32 %v3_1000ce3c, i32* %eax.global-to-local, align 4
  %v1_1000ce3f = add i32 %v3_1000ce3c, 1
  %v1_1000ce42 = add i32 %v2_1000cea9, 28
  %v2_1000ce42 = inttoptr i32 %v1_1000ce42 to i32*
  %v3_1000ce42 = load i32, i32* %v2_1000ce42, align 4
  %v15_1000ce42 = icmp eq i32 %v3_1000ce42, %v1_1000ce3f
  store i1 %v15_1000ce42, i1* %zf.global-to-local, align 1
  %v5_1000ce45 = icmp slt i32 %v3_1000ce42, %v1_1000ce3f
  br i1 %v5_1000ce45, label %dec_label_pc_1000cea6, label %dec_label_pc_1000ce47

dec_label_pc_1000ce47:                            ; preds = %dec_label_pc_1000ce3c
  %v1_1000ce47 = add i32 %v2_1000cea9, 32
  %v2_1000ce47 = inttoptr i32 %v1_1000ce47 to i32*
  %v3_1000ce47 = load i32, i32* %v2_1000ce47, align 4
  store i32 %v3_1000ce47, i32* @ecx, align 4
  %v2_1000ce4a = sub i32 %v3_1000ce3c, %v3_1000ce47
  %v12_1000ce4a = icmp eq i32 %v2_1000ce4a, 0
  store i1 %v12_1000ce4a, i1* %zf.global-to-local, align 1
  %v5_1000ce4c = icmp slt i32 %v3_1000ce3c, %v3_1000ce47
  br i1 %v5_1000ce4c, label %dec_label_pc_1000ce56, label %dec_label_pc_1000ce4e

dec_label_pc_1000ce4e:                            ; preds = %dec_label_pc_1000ce47
  %v1_1000ce50 = add i32 %v2_1000ce4a, 1
  store i32 %v1_1000ce50, i32* %eax.global-to-local, align 4
  %v1_1000ce51 = add i32 %v2_1000cea9, 4
  %v2_1000ce51 = inttoptr i32 %v1_1000ce51 to i32*
  %v3_1000ce51 = load i32, i32* %v2_1000ce51, align 4
  %v15_1000ce51 = icmp eq i32 %v3_1000ce51, %v1_1000ce50
  store i1 %v15_1000ce51, i1* %zf.global-to-local, align 1
  %v5_1000ce54 = icmp slt i32 %v3_1000ce51, %v1_1000ce50
  br i1 %v5_1000ce54, label %dec_label_pc_1000ce56, label %dec_label_pc_1000ce67

dec_label_pc_1000ce56:                            ; preds = %dec_label_pc_1000ce4e, %dec_label_pc_1000ce47
  %v1_1000ce56 = add i32 %v2_1000cea9, 36
  %v2_1000ce56 = inttoptr i32 %v1_1000ce56 to i32*
  %v3_1000ce56 = load i32, i32* %v2_1000ce56, align 4
  store i32 %v3_1000ce56, i32* %eax.global-to-local, align 4
  %v0_1000ce59 = load i32, i32* @esp, align 4
  %v1_1000ce59 = add i32 %v0_1000ce59, -4
  %v2_1000ce59 = inttoptr i32 %v1_1000ce59 to i32*
  store i32 1, i32* %v2_1000ce59, align 4
  %v0_1000ce5b = load i32, i32* @esi, align 4
  store i32 %v0_1000ce5b, i32* @ecx, align 4
  %v0_1000ce5f = load i32, i32* %eax.global-to-local, align 4
  %v4_1000ce5f = trunc i32 %v0_1000ce5f to i8
  %v5_1000ce5f = icmp eq i8 %v4_1000ce5f, 0
  store i1 %v5_1000ce5f, i1* %zf.global-to-local, align 1
  br i1 %v5_1000ce5f, label %dec_label_pc_1000cf43, label %dec_label_pc_1000ce67

dec_label_pc_1000ce67:                            ; preds = %dec_label_pc_1000ce4e, %dec_label_pc_1000ce56
  %v1_1000ce75 = phi i32 [ %v2_1000cea9, %dec_label_pc_1000ce4e ], [ %v0_1000ce5b, %dec_label_pc_1000ce56 ]
  %v1_1000ce67 = add i32 %v1_1000ce75, 12
  %v2_1000ce67 = inttoptr i32 %v1_1000ce67 to i32*
  %v3_1000ce67 = load i32, i32* %v2_1000ce67, align 4
  store i32 %v3_1000ce67, i32* @ecx, align 4
  store i32 %v3_1000ce67, i32* %eax.global-to-local, align 4
  %v2_1000ce6e = add i32 %v1_1000ce75, 32
  %v3_1000ce6e = inttoptr i32 %v2_1000ce6e to i32*
  %v4_1000ce6e = load i32, i32* %v3_1000ce6e, align 4
  %v5_1000ce6e = sub i32 %v3_1000ce67, %v4_1000ce6e
  %v1_1000ce71 = add i32 %v3_1000ce67, 1
  %v9_1000ce71 = icmp eq i32 %v1_1000ce71, 0
  store i1 %v9_1000ce71, i1* %zf.global-to-local, align 1
  store i32 %v1_1000ce71, i32* @ecx, align 4
  %v3_1000ce72 = add i32 %v5_1000ce6e, %v3_1000ce67
  %v4_1000ce72 = inttoptr i32 %v3_1000ce72 to i8*
  %v5_1000ce72 = load i8, i8* %v4_1000ce72, align 1
  %v6_1000ce72 = zext i8 %v5_1000ce72 to i32
  %v8_1000ce72 = and i32 %v3_1000ce67, -256
  %v9_1000ce72 = or i32 %v6_1000ce72, %v8_1000ce72
  store i32 %v9_1000ce72, i32* %eax.global-to-local, align 4
  store i32 %v1_1000ce71, i32* %v2_1000ce67, align 4
  %v0_1000ce78 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000ce78 = trunc i32 %v0_1000ce78 to i8
  %v11_1000ce78 = icmp eq i8 %v1_1000ce78, 34
  store i1 %v11_1000ce78, i1* %zf.global-to-local, align 1
  br i1 %v11_1000ce78, label %dec_label_pc_1000cf74, label %dec_label_pc_1000ce80

dec_label_pc_1000ce80:                            ; preds = %dec_label_pc_1000ce67
  %v5_1000ce80 = icmp eq i8 %v1_1000ce78, 0
  store i1 %v5_1000ce80, i1* %zf.global-to-local, align 1
  br i1 %v5_1000ce80, label %dec_label_pc_1000cf74, label %dec_label_pc_1000ce88

dec_label_pc_1000ce88:                            ; preds = %dec_label_pc_1000ce80
  store i32 %tmp, i32* @ecx, align 4
  %v2_1000ce8b = load i32, i32* @edi, align 4
  %v5_1000ce8b = add i32 %v2_1000ce8b, %tmp
  %v6_1000ce8b = inttoptr i32 %v5_1000ce8b to i8*
  store i8 %v1_1000ce78, i8* %v6_1000ce8b, align 1
  %v0_1000ce8e = load i32, i32* @edi, align 4
  %v1_1000ce8e = add i32 %v0_1000ce8e, 1
  store i32 %v1_1000ce8e, i32* @edi, align 4
  %v1_1000ce8f = load i32, i32* %ebx.global-to-local, align 4
  %v12_1000ce8f = icmp eq i32 %v1_1000ce8e, %v1_1000ce8f
  store i1 %v12_1000ce8f, i1* %zf.global-to-local, align 1
  br i1 %v12_1000ce8f, label %dec_label_pc_1000cebc, label %dec_label_pc_1000ce93

dec_label_pc_1000ce93:                            ; preds = %dec_label_pc_1000ce88
  %v0_1000ce93 = load i32, i32* @esi, align 4
  %v1_1000ce93 = add i32 %v0_1000ce93, 20
  %v2_1000ce93 = inttoptr i32 %v1_1000ce93 to i8*
  %v3_1000ce93 = load i8, i8* %v2_1000ce93, align 1
  %v10_1000ce93 = icmp eq i8 %v3_1000ce93, 0
  store i1 %v10_1000ce93, i1* %zf.global-to-local, align 1
  br i1 %v10_1000ce93, label %dec_label_pc_1000ce30, label %dec_label_pc_1000ce99

dec_label_pc_1000ce99:                            ; preds = %dec_label_pc_1000ce93
  %v1_1000ce99 = load i32, i32* @ecx, align 4
  %v3_1000ce99 = add i32 %v1_1000ce99, %v1_1000ce8e
  %v4_1000ce99 = inttoptr i32 %v3_1000ce99 to i8*
  store i8 0, i8* %v4_1000ce99, align 1
  %v0_1000ce9d = load i32, i32* @edi, align 4
  store i32 %v0_1000ce9d, i32* %eax.global-to-local, align 4
  %v0_1000ce9f = load i32, i32* @esp, align 4
  %v1_1000ce9f = inttoptr i32 %v0_1000ce9f to i32*
  %v2_1000ce9f = load i32, i32* %v1_1000ce9f, align 4
  store i32 %v2_1000ce9f, i32* @edi, align 4
  %v3_1000ce9f = add i32 %v0_1000ce9f, 4
  %v1_1000cea0 = inttoptr i32 %v3_1000ce9f to i32*
  %v2_1000cea0 = load i32, i32* %v1_1000cea0, align 4
  store i32 %v2_1000cea0, i32* @esi, align 4
  %v3_1000cea0 = add i32 %v0_1000ce9f, 8
  %v1_1000cea1 = inttoptr i32 %v3_1000cea0 to i32*
  %v2_1000cea1 = load i32, i32* %v1_1000cea1, align 4
  store i32 %v2_1000cea1, i32* @ebx, align 4
  %v3_1000cea1 = add i32 %v0_1000ce9f, 12
  %v1_1000cea2 = inttoptr i32 %v3_1000cea1 to i32*
  %v2_1000cea2 = load i32, i32* %v1_1000cea2, align 4
  store i32 %v2_1000cea2, i32* @ebp, align 4
  ret i32 %v0_1000ce9d

dec_label_pc_1000cea6:                            ; preds = %dec_label_pc_1000ce3c
  %v2_1000cea6 = or i8 %v3_1000ce30, 2
  store i1 false, i1* %zf.global-to-local, align 1
  store i8 %v2_1000cea6, i8* %v2_1000ce30, align 1
  store i32 %tmp, i32* @ecx, align 4
  %v0_1000ceaf = load i32, i32* @edi, align 4
  %v3_1000ceaf = add i32 %v0_1000ceaf, %tmp
  %v4_1000ceaf = inttoptr i32 %v3_1000ceaf to i8*
  store i8 0, i8* %v4_1000ceaf, align 1
  %v0_1000ceb3 = load i32, i32* @edi, align 4
  store i32 %v0_1000ceb3, i32* %eax.global-to-local, align 4
  %v0_1000ceb5 = load i32, i32* @esp, align 4
  %v1_1000ceb5 = inttoptr i32 %v0_1000ceb5 to i32*
  %v2_1000ceb5 = load i32, i32* %v1_1000ceb5, align 4
  store i32 %v2_1000ceb5, i32* @edi, align 4
  %v3_1000ceb5 = add i32 %v0_1000ceb5, 4
  %v1_1000ceb6 = inttoptr i32 %v3_1000ceb5 to i32*
  %v2_1000ceb6 = load i32, i32* %v1_1000ceb6, align 4
  store i32 %v2_1000ceb6, i32* @esi, align 4
  %v3_1000ceb6 = add i32 %v0_1000ceb5, 8
  %v1_1000ceb7 = inttoptr i32 %v3_1000ceb6 to i32*
  %v2_1000ceb7 = load i32, i32* %v1_1000ceb7, align 4
  store i32 %v2_1000ceb7, i32* @ebx, align 4
  %v3_1000ceb7 = add i32 %v0_1000ceb5, 12
  %v1_1000ceb8 = inttoptr i32 %v3_1000ceb7 to i32*
  %v2_1000ceb8 = load i32, i32* %v1_1000ceb8, align 4
  store i32 %v2_1000ceb8, i32* @ebp, align 4
  ret i32 %v0_1000ceb3

dec_label_pc_1000cebc:                            ; preds = %dec_label_pc_1000ce88
  %v1_1000cebc = load i32, i32* @ecx, align 4
  %v4_1000cebc = add i32 %v1_1000cebc, %v0_1000ce8e
  %v5_1000cebc = inttoptr i32 %v4_1000cebc to i8*
  store i8 0, i8* %v5_1000cebc, align 1
  %v0_1000cec1 = load i32, i32* @esp, align 4
  %v1_1000cec1 = inttoptr i32 %v0_1000cec1 to i32*
  %v2_1000cec1 = load i32, i32* %v1_1000cec1, align 4
  store i32 %v2_1000cec1, i32* @edi, align 4
  %v3_1000cec1 = add i32 %v0_1000cec1, 4
  %v1_1000cec2 = inttoptr i32 %v3_1000cec1 to i32*
  %v2_1000cec2 = load i32, i32* %v1_1000cec2, align 4
  store i32 %v2_1000cec2, i32* @esi, align 4
  %v3_1000cec2 = add i32 %v0_1000cec1, 8
  %v0_1000cec3 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000cec3, i32* %eax.global-to-local, align 4
  %v1_1000cec5 = inttoptr i32 %v3_1000cec2 to i32*
  %v2_1000cec5 = load i32, i32* %v1_1000cec5, align 4
  store i32 %v2_1000cec5, i32* @ebx, align 4
  %v3_1000cec5 = add i32 %v0_1000cec1, 12
  %v1_1000cec6 = inttoptr i32 %v3_1000cec5 to i32*
  %v2_1000cec6 = load i32, i32* %v1_1000cec6, align 4
  store i32 %v2_1000cec6, i32* @ebp, align 4
  ret i32 %v0_1000cec3

dec_label_pc_1000ceca:                            ; preds = %dec_label_pc_1000ce0f
  store i32 %tmp14, i32* @ecx, align 4
  %v3_1000ced0 = add i32 %v4_1000ce08, %tmp14
  %v4_1000ced0 = inttoptr i32 %v3_1000ced0 to i8*
  %v5_1000ced0 = load i8, i8* %v4_1000ced0, align 1
  %v12_1000ced0 = icmp eq i8 %v5_1000ced0, 0
  store i1 %v12_1000ced0, i1* %zf.global-to-local, align 1
  %v2_1000ced4 = load i32, i32* @edi, align 4
  %v3_1000ced4 = inttoptr i32 %v2_1000ced4 to i8*
  store i8 %v4_1000ce0b, i8* %v3_1000ced4, align 1
  %v0_1000ced6 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_1000ced6, label %dec_label_pc_1000cee8, label %dec_label_pc_1000ced8

dec_label_pc_1000ced8:                            ; preds = %dec_label_pc_1000ceca
  %v0_1000ced8 = load i32, i32* @edi, align 4
  %v1_1000ced8 = add i32 %v0_1000ced8, 1
  %v2_1000ced8 = inttoptr i32 %v1_1000ced8 to i8*
  store i8 0, i8* %v2_1000ced8, align 1
  %v2_1000cedc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000cedc, i32* @edi, align 4
  %v2_1000cedd = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000cedd, i32* @esi, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  store i32 %v0_1000cdc4, i32* @ebx, align 4
  store i32 %v0_1000cdc3, i32* @ebp, align 4
  ret i32 1

dec_label_pc_1000cee8:                            ; preds = %dec_label_pc_1000ceca
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v12_1000cef0 = icmp eq i32 %arg3, 1
  store i1 %v12_1000cef0, i1* %zf.global-to-local, align 1
  br i1 %v12_1000cef0, label %dec_label_pc_1000cf27, label %dec_label_pc_1000cef4

dec_label_pc_1000cef4:                            ; preds = %dec_label_pc_1000cee8, %dec_label_pc_1000cf1c
  store i32 %v2_1000cdfd, i32* @edx, align 4
  %v1_1000cef7 = load i32, i32* @esp, align 4
  %v2_1000cef7 = add i32 %v1_1000cef7, -4
  %v3_1000cef7 = inttoptr i32 %v2_1000cef7 to i32*
  store i32 %v2_1000cdfd, i32* %v3_1000cef7, align 4
  %v0_1000cef8 = load i32, i32* @esi, align 4
  store i32 %v0_1000cef8, i32* @ecx, align 4
  %v0_1000cefa = call i32 @function_1000b150(i32* nonnull @5)
  store i32 %v0_1000cefa, i32* %eax.global-to-local, align 4
  %v0_1000ceff = load i32, i32* @esi, align 4
  %v1_1000ceff = add i32 %v0_1000ceff, 20
  %v2_1000ceff = inttoptr i32 %v1_1000ceff to i8*
  %v3_1000ceff = load i8, i8* %v2_1000ceff, align 1
  %v10_1000ceff = icmp eq i8 %v3_1000ceff, 0
  store i1 %v10_1000ceff, i1* %zf.global-to-local, align 1
  %v1_1000cf03 = icmp eq i1 %v10_1000ceff, false
  br i1 %v1_1000cf03, label %dec_label_pc_1000cf74, label %dec_label_pc_1000cf05

dec_label_pc_1000cf05:                            ; preds = %dec_label_pc_1000cef4
  %v3_1000cf05 = load i32, i32* %stack_var_19, align 4
  %v4_1000cf05 = and i32 %v3_1000cf05, 255
  %v6_1000cf05 = and i32 %v0_1000cefa, -256
  %v7_1000cf05 = or i32 %v4_1000cf05, %v6_1000cf05
  store i32 %v7_1000cf05, i32* @eax, align 4
  store i32 %v4_1000cf05, i32* @ecx, align 4
  %v3_1000cf0e = add i32 %v4_1000cf05, %tmp14
  %v4_1000cf0e = inttoptr i32 %v3_1000cf0e to i8*
  %v5_1000cf0e = load i8, i8* %v4_1000cf0e, align 1
  %v12_1000cf0e = icmp eq i8 %v5_1000cf0e, 0
  store i1 %v12_1000cf0e, i1* %zf.global-to-local, align 1
  %v1_1000cf12 = icmp eq i1 %v12_1000cf0e, false
  br i1 %v1_1000cf12, label %dec_label_pc_1000cf38, label %dec_label_pc_1000cf14

dec_label_pc_1000cf14:                            ; preds = %dec_label_pc_1000cf05
  %v1_1000cf14 = trunc i32 %v3_1000cf05 to i8
  %v11_1000cf14 = icmp eq i8 %v1_1000cf14, 34
  store i1 %v11_1000cf14, i1* %zf.global-to-local, align 1
  br i1 %v11_1000cf14, label %dec_label_pc_1000cf38, label %dec_label_pc_1000cf18

dec_label_pc_1000cf18:                            ; preds = %dec_label_pc_1000cf14
  %v11_1000cf18 = icmp eq i8 %v1_1000cf14, 32
  store i1 %v11_1000cf18, i1* %zf.global-to-local, align 1
  %v9_1000cf1a = icmp sgt i8 %v1_1000cf14, 32
  br i1 %v9_1000cf1a, label %dec_label_pc_1000cf1c, label %dec_label_pc_1000cf38

dec_label_pc_1000cf1c:                            ; preds = %dec_label_pc_1000cf18
  store i32 %tmp, i32* @ecx, align 4
  %v2_1000cf1f = load i32, i32* @edi, align 4
  %v5_1000cf1f = add i32 %v2_1000cf1f, %tmp
  %v6_1000cf1f = inttoptr i32 %v5_1000cf1f to i8*
  store i8 %v1_1000cf14, i8* %v6_1000cf1f, align 1
  %v0_1000cf22 = load i32, i32* @edi, align 4
  %v1_1000cf22 = add i32 %v0_1000cf22, 1
  store i32 %v1_1000cf22, i32* @edi, align 4
  %v1_1000cf23 = load i32, i32* %ebx.global-to-local, align 4
  %v12_1000cf23 = icmp eq i32 %v1_1000cf22, %v1_1000cf23
  store i1 %v12_1000cf23, i1* %zf.global-to-local, align 1
  %v1_1000cf25 = icmp eq i1 %v12_1000cf23, false
  br i1 %v1_1000cf25, label %dec_label_pc_1000cef4, label %dec_label_pc_1000cf27

dec_label_pc_1000cf27:                            ; preds = %dec_label_pc_1000cf1c, %dec_label_pc_1000cee8
  %v0_1000cf2a = phi i32 [ 1, %dec_label_pc_1000cee8 ], [ %v1_1000cf22, %dec_label_pc_1000cf1c ]
  %v3_1000cf2a = add i32 %tmp, -1
  %v4_1000cf2a = add i32 %v3_1000cf2a, %v0_1000cf2a
  %v5_1000cf2a = inttoptr i32 %v4_1000cf2a to i8*
  store i8 0, i8* %v5_1000cf2a, align 1
  %v0_1000cf2f = load i32, i32* @esp, align 4
  %v1_1000cf2f = inttoptr i32 %v0_1000cf2f to i32*
  %v2_1000cf2f = load i32, i32* %v1_1000cf2f, align 4
  store i32 %v2_1000cf2f, i32* @edi, align 4
  %v3_1000cf2f = add i32 %v0_1000cf2f, 4
  %v1_1000cf30 = inttoptr i32 %v3_1000cf2f to i32*
  %v2_1000cf30 = load i32, i32* %v1_1000cf30, align 4
  store i32 %v2_1000cf30, i32* @esi, align 4
  %v3_1000cf30 = add i32 %v0_1000cf2f, 8
  %v0_1000cf31 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000cf31, i32* %eax.global-to-local, align 4
  %v1_1000cf33 = inttoptr i32 %v3_1000cf30 to i32*
  %v2_1000cf33 = load i32, i32* %v1_1000cf33, align 4
  store i32 %v2_1000cf33, i32* @ebx, align 4
  %v3_1000cf33 = add i32 %v0_1000cf2f, 12
  %v1_1000cf34 = inttoptr i32 %v3_1000cf33 to i32*
  %v2_1000cf34 = load i32, i32* %v1_1000cf34, align 4
  store i32 %v2_1000cf34, i32* @ebp, align 4
  ret i32 %v0_1000cf31

dec_label_pc_1000cf38:                            ; preds = %dec_label_pc_1000cf18, %dec_label_pc_1000cf14, %dec_label_pc_1000cf05
  %v1_1000cf38 = add i32 %v0_1000ceff, 12
  %v2_1000cf38 = inttoptr i32 %v1_1000cf38 to i32*
  %v3_1000cf38 = load i32, i32* %v2_1000cf38, align 4
  %v4_1000cf38 = add i32 %v3_1000cf38, -1
  store i32 %v4_1000cf38, i32* %v2_1000cf38, align 4
  %v0_1000cf3b = load i32, i32* @esi, align 4
  %v1_1000cf3b = add i32 %v0_1000cf3b, 12
  %v2_1000cf3b = inttoptr i32 %v1_1000cf3b to i32*
  %v3_1000cf3b = load i32, i32* %v2_1000cf3b, align 4
  store i32 %v3_1000cf3b, i32* %eax.global-to-local, align 4
  %v2_1000cf3e = add i32 %v0_1000cf3b, 28
  %v3_1000cf3e = inttoptr i32 %v2_1000cf3e to i32*
  %v4_1000cf3e = load i32, i32* %v3_1000cf3e, align 4
  %v15_1000cf3e = icmp eq i32 %v3_1000cf3b, %v4_1000cf3e
  store i1 %v15_1000cf3e, i1* %zf.global-to-local, align 1
  %v7_1000cf41 = icmp sgt i32 %v3_1000cf3b, %v4_1000cf3e
  br i1 %v7_1000cf41, label %dec_label_pc_1000cf43, label %dec_label_pc_1000cf57

dec_label_pc_1000cf43:                            ; preds = %dec_label_pc_1000ce56, %dec_label_pc_1000cf38
  %v10_1000cf43 = phi i32 [ %v0_1000cf3b, %dec_label_pc_1000cf38 ], [ %v0_1000ce5b, %dec_label_pc_1000ce56 ]
  %v1_1000cf43 = add i32 %v10_1000cf43, 20
  %v2_1000cf43 = inttoptr i32 %v1_1000cf43 to i8*
  %v3_1000cf43 = load i8, i8* %v2_1000cf43, align 1
  %v4_1000cf43 = or i8 %v3_1000cf43, 2
  store i1 false, i1* %zf.global-to-local, align 1
  store i8 %v4_1000cf43, i8* %v2_1000cf43, align 1
  store i32 %tmp, i32* @ecx, align 4
  %v0_1000cf4a = load i32, i32* @edi, align 4
  %v3_1000cf4a = add i32 %v0_1000cf4a, %tmp
  %v4_1000cf4a = inttoptr i32 %v3_1000cf4a to i8*
  store i8 0, i8* %v4_1000cf4a, align 1
  %v0_1000cf4e = load i32, i32* @edi, align 4
  store i32 %v0_1000cf4e, i32* %eax.global-to-local, align 4
  %v0_1000cf50 = load i32, i32* @esp, align 4
  %v1_1000cf50 = inttoptr i32 %v0_1000cf50 to i32*
  %v2_1000cf50 = load i32, i32* %v1_1000cf50, align 4
  store i32 %v2_1000cf50, i32* @edi, align 4
  %v3_1000cf50 = add i32 %v0_1000cf50, 4
  %v1_1000cf51 = inttoptr i32 %v3_1000cf50 to i32*
  %v2_1000cf51 = load i32, i32* %v1_1000cf51, align 4
  store i32 %v2_1000cf51, i32* @esi, align 4
  %v3_1000cf51 = add i32 %v0_1000cf50, 8
  %v1_1000cf52 = inttoptr i32 %v3_1000cf51 to i32*
  %v2_1000cf52 = load i32, i32* %v1_1000cf52, align 4
  store i32 %v2_1000cf52, i32* @ebx, align 4
  %v3_1000cf52 = add i32 %v0_1000cf50, 12
  %v1_1000cf53 = inttoptr i32 %v3_1000cf52 to i32*
  %v2_1000cf53 = load i32, i32* %v1_1000cf53, align 4
  store i32 %v2_1000cf53, i32* @ebp, align 4
  ret i32 %v0_1000cf4e

dec_label_pc_1000cf57:                            ; preds = %dec_label_pc_1000cf38
  %v1_1000cf57 = add i32 %v0_1000cf3b, 32
  %v2_1000cf57 = inttoptr i32 %v1_1000cf57 to i32*
  %v3_1000cf57 = load i32, i32* %v2_1000cf57, align 4
  store i32 %v3_1000cf57, i32* @ecx, align 4
  %v1_1000cf5a = add i32 %v0_1000cf3b, 20
  %v2_1000cf5a = inttoptr i32 %v1_1000cf5a to i8*
  %v3_1000cf5a = load i8, i8* %v2_1000cf5a, align 1
  %v4_1000cf5a = and i8 %v3_1000cf5a, -3
  store i8 %v4_1000cf5a, i8* %v2_1000cf5a, align 1
  %v0_1000cf5e = load i32, i32* %eax.global-to-local, align 4
  %v1_1000cf5e = load i32, i32* @ecx, align 4
  %v12_1000cf5e = icmp eq i32 %v0_1000cf5e, %v1_1000cf5e
  store i1 %v12_1000cf5e, i1* %zf.global-to-local, align 1
  %v5_1000cf60 = icmp slt i32 %v0_1000cf5e, %v1_1000cf5e
  %v0_1000cf6b.pre = load i32, i32* @esi, align 4
  br i1 %v5_1000cf60, label %dec_label_pc_1000cf6b, label %dec_label_pc_1000cf62

dec_label_pc_1000cf62:                            ; preds = %dec_label_pc_1000cf57
  %v1_1000cf62 = add i32 %v0_1000cf6b.pre, 4
  %v2_1000cf62 = inttoptr i32 %v1_1000cf62 to i32*
  %v3_1000cf62 = load i32, i32* %v2_1000cf62, align 4
  %v2_1000cf65 = add i32 %v3_1000cf62, %v1_1000cf5e
  %v12_1000cf67 = icmp eq i32 %v0_1000cf5e, %v2_1000cf65
  store i1 %v12_1000cf67, i1* %zf.global-to-local, align 1
  %v5_1000cf69 = icmp slt i32 %v0_1000cf5e, %v2_1000cf65
  br i1 %v5_1000cf69, label %dec_label_pc_1000cf74, label %dec_label_pc_1000cf6b

dec_label_pc_1000cf6b:                            ; preds = %dec_label_pc_1000cf57, %dec_label_pc_1000cf62
  %v1_1000cf6b = add i32 %v0_1000cf6b.pre, 36
  %v2_1000cf6b = inttoptr i32 %v1_1000cf6b to i32*
  %v3_1000cf6b = load i32, i32* %v2_1000cf6b, align 4
  store i32 %v3_1000cf6b, i32* %eax.global-to-local, align 4
  %v0_1000cf6e = load i32, i32* @esp, align 4
  %v1_1000cf6e = add i32 %v0_1000cf6e, -4
  %v2_1000cf6e = inttoptr i32 %v1_1000cf6e to i32*
  store i32 -1, i32* %v2_1000cf6e, align 4
  %v0_1000cf70 = load i32, i32* @esi, align 4
  store i32 %v0_1000cf70, i32* @ecx, align 4
  br label %dec_label_pc_1000cf74

dec_label_pc_1000cf74:                            ; preds = %dec_label_pc_1000ce80, %dec_label_pc_1000ce67, %dec_label_pc_1000ce30, %dec_label_pc_1000cef4, %dec_label_pc_1000cf6b, %dec_label_pc_1000cf62, %dec_label_pc_1000ce17
  store i32 %tmp, i32* @ecx, align 4
  %v0_1000cf77 = load i32, i32* @edi, align 4
  %v3_1000cf77 = add i32 %v0_1000cf77, %tmp
  %v4_1000cf77 = inttoptr i32 %v3_1000cf77 to i8*
  store i8 0, i8* %v4_1000cf77, align 1
  %v0_1000cf7b = load i32, i32* @edi, align 4
  store i32 %v0_1000cf7b, i32* %eax.global-to-local, align 4
  %v0_1000cf7d = load i32, i32* @esp, align 4
  %v1_1000cf7d = inttoptr i32 %v0_1000cf7d to i32*
  %v2_1000cf7d = load i32, i32* %v1_1000cf7d, align 4
  store i32 %v2_1000cf7d, i32* @edi, align 4
  %v3_1000cf7d = add i32 %v0_1000cf7d, 4
  %v1_1000cf7e = inttoptr i32 %v3_1000cf7d to i32*
  %v2_1000cf7e = load i32, i32* %v1_1000cf7e, align 4
  store i32 %v2_1000cf7e, i32* @esi, align 4
  %v3_1000cf7e = add i32 %v0_1000cf7d, 8
  %v1_1000cf7f = inttoptr i32 %v3_1000cf7e to i32*
  %v2_1000cf7f = load i32, i32* %v1_1000cf7f, align 4
  store i32 %v2_1000cf7f, i32* @ebx, align 4
  %v3_1000cf7f = add i32 %v0_1000cf7d, 12
  %v1_1000cf80 = inttoptr i32 %v3_1000cf7f to i32*
  %v2_1000cf80 = load i32, i32* %v1_1000cf80, align 4
  store i32 %v2_1000cf80, i32* @ebp, align 4
  ret i32 %v0_1000cf7b
}

define i32 @function_1000cf90(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000cf90:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000cf90 = load i32, i32* @ebp, align 4
  %v0_1000cf93 = load i32, i32* @ebx, align 4
  store i32 %v0_1000cf93, i32* %stack_var_-8, align 4
  %v0_1000cf94 = load i32, i32* @ecx, align 4
  store i32 %v0_1000cf94, i32* @ebx, align 4
  %v1_1000cf96 = add i32 %v0_1000cf94, 21
  %v2_1000cf96 = inttoptr i32 %v1_1000cf96 to i8*
  %v3_1000cf96 = load i8, i8* %v2_1000cf96, align 1
  %v4_1000cf96 = zext i8 %v3_1000cf96 to i32
  %v5_1000cf96 = load i32, i32* @eax, align 4
  %v6_1000cf96 = and i32 %v5_1000cf96, -256
  %v7_1000cf96 = or i32 %v6_1000cf96, %v4_1000cf96
  store i32 %v7_1000cf96, i32* @eax, align 4
  %v0_1000cf99 = load i32, i32* @esi, align 4
  store i32 %v0_1000cf99, i32* %stack_var_-12, align 4
  %v4_1000cf99 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* @esi, align 4
  %v2_1000cf9d = and i8 %v3_1000cf96, 1
  %v3_1000cf9d = icmp eq i8 %v2_1000cf9d, 0
  %v1_1000cf9f = icmp eq i1 %v3_1000cf9d, false
  %v1_1000cfcb = icmp eq i32 %arg1, 0
  br i1 %v1_1000cf9f, label %dec_label_pc_1000cfcb, label %dec_label_pc_1000cfa1

dec_label_pc_1000cfa1:                            ; preds = %dec_label_pc_1000cf90
  br i1 %v1_1000cfcb, label %dec_label_pc_1000cfbe, label %dec_label_pc_1000cfa5

dec_label_pc_1000cfa5:                            ; preds = %dec_label_pc_1000cfa1
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v1_1000cfa6 = call i32 @function_10009450(i32 %arg1)
  %v1_1000cfae = add i32 %v1_1000cfa6, 1
  store i32 %v1_1000cfae, i32* @eax, align 4
  store i32 %v1_1000cfae, i32* %stack_var_-16, align 4
  %v0_1000cfb0 = load i32, i32* @esi, align 4
  %v0_1000cfb1 = load i32, i32* @ebx, align 4
  store i32 %v0_1000cfb1, i32* @ecx, align 4
  %v2_1000cfb3 = call i32 @function_1000c6c0(i32 %v0_1000cfb0, i32 %v1_1000cfae)
  store i32 %v0_1000cfb0, i32* @esi, align 4
  %v2_1000cfb9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000cfb9, i32* @ebx, align 4
  %v2_1000cfba = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000cfba, i32* @ebp, align 4
  ret i32 %v2_1000cfb3

dec_label_pc_1000cfbe:                            ; preds = %dec_label_pc_1000cfa1
  store i32 0, i32* %stack_var_-16, align 4
  %v4_1000cfc0 = call i32 @function_10002e00(i32 0, i32 %v0_1000cf99, i32 %v0_1000cf93, i32 %v0_1000cf90)
  %v2_1000cfc5 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000cfc5, i32* @esi, align 4
  %v2_1000cfc6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000cfc6, i32* @ebx, align 4
  %v2_1000cfc7 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000cfc7, i32* @ebp, align 4
  ret i32 %v4_1000cfc0

dec_label_pc_1000cfcb:                            ; preds = %dec_label_pc_1000cf90
  br i1 %v1_1000cfcb, label %dec_label_pc_1000d056, label %dec_label_pc_1000cfd3

dec_label_pc_1000cfd3:                            ; preds = %dec_label_pc_1000cfcb
  %v2_1000cfd3 = and i32 %v4_1000cf96, 16
  %v3_1000cfd3 = icmp eq i32 %v2_1000cfd3, 0
  %v1_1000cfd5 = icmp eq i1 %v3_1000cfd3, false
  br i1 %v1_1000cfd5, label %dec_label_pc_1000d040, label %dec_label_pc_1000cfd7

dec_label_pc_1000cfd7:                            ; preds = %dec_label_pc_1000cfd3
  %v1_1000cfd7 = add i32 %v0_1000cf94, 24
  %v2_1000cfd7 = inttoptr i32 %v1_1000cfd7 to i32*
  %v3_1000cfd7 = load i32, i32* %v2_1000cfd7, align 4
  %v7_1000cfdb = icmp sgt i32 %v3_1000cfd7, 0
  br i1 %v7_1000cfdb, label %dec_label_pc_1000cfdd, label %dec_label_pc_1000d040

dec_label_pc_1000cfdd:                            ; preds = %dec_label_pc_1000cfd7
  %v1_1000cfdd = add i32 %v0_1000cf94, 16
  %v2_1000cfdd = inttoptr i32 %v1_1000cfdd to i32*
  %v3_1000cfdd = load i32, i32* %v2_1000cfdd, align 4
  %v1_1000cfe0 = icmp eq i32 %v3_1000cfdd, 0
  br i1 %v1_1000cfe0, label %dec_label_pc_1000cffc, label %dec_label_pc_1000cfe4

dec_label_pc_1000cfe4:                            ; preds = %dec_label_pc_1000cfdd
  %v2_1000cfe4 = add i32 %v0_1000cf94, 32
  %v3_1000cfe4 = inttoptr i32 %v2_1000cfe4 to i32*
  %v4_1000cfe4 = load i32, i32* %v3_1000cfe4, align 4
  %v5_1000cfe4 = sub i32 %v3_1000cfdd, %v4_1000cfe4
  %v3_1000cfe9 = add i32 %v0_1000cf94, -1
  %v4_1000cfe9 = add i32 %v3_1000cfe9, %v5_1000cfe4
  %v5_1000cfe9 = inttoptr i32 %v4_1000cfe9 to i8*
  %v6_1000cfe9 = load i8, i8* %v5_1000cfe9, align 1
  %v16_1000cfe9 = icmp eq i8 %v6_1000cfe9, 10
  %v5_1000cff1 = icmp eq i1 %v16_1000cfe9, false
  br i1 %v5_1000cff1, label %dec_label_pc_1000cffc, label %dec_label_pc_1000cff5

dec_label_pc_1000cff5:                            ; preds = %dec_label_pc_1000cfe4
  %v0_1000cff7 = call i32 @function_10003680()
  %v0_1000cfff.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000cffc

dec_label_pc_1000cffc:                            ; preds = %dec_label_pc_1000cff5, %dec_label_pc_1000cfe4, %dec_label_pc_1000cfdd
  %v0_1000cfff = phi i32 [ %v0_1000cfff.pre, %dec_label_pc_1000cff5 ], [ %arg1, %dec_label_pc_1000cfe4 ], [ %arg1, %dec_label_pc_1000cfdd ]
  %v0_1000cffc = load i32, i32* @edi, align 4
  store i32 %v0_1000cffc, i32* %stack_var_-16, align 4
  %v4_1000cffc = ptrtoint i32* %stack_var_-16 to i32
  %v1_1000d000 = inttoptr i32 %v0_1000cfff to i8*
  %v3_1000d000 = call i8* @_strchr(i8* %v1_1000d000, i32 10)
  %v5_1000d000 = ptrtoint i8* %v3_1000d000 to i32
  store i32 %v5_1000d000, i32* @eax, align 4
  %v1_1000d00a = icmp eq i8* %v3_1000d000, null
  br i1 %v1_1000d00a, label %dec_label_pc_1000d03f, label %dec_label_pc_1000d00e

dec_label_pc_1000d00e:                            ; preds = %dec_label_pc_1000cffc
  store i32 %v5_1000d000, i32* @edi, align 4
  br label %dec_label_pc_1000d010

dec_label_pc_1000d010:                            ; preds = %dec_label_pc_1000d027, %dec_label_pc_1000d00e
  %v1_1000d015 = phi i32 [ %v1_1000d038, %dec_label_pc_1000d027 ], [ %v4_1000cffc, %dec_label_pc_1000d00e ]
  %v0_1000d010 = phi i32 [ %v4_1000d031, %dec_label_pc_1000d027 ], [ %v5_1000d000, %dec_label_pc_1000d00e ]
  %v1_1000d012 = load i32, i32* @esi, align 4
  %v2_1000d012 = sub i32 %v0_1000d010, %v1_1000d012
  %v1_1000d014 = add i32 %v2_1000d012, 1
  %v2_1000d015 = add i32 %v1_1000d015, -4
  %v3_1000d015 = inttoptr i32 %v2_1000d015 to i32*
  store i32 %v1_1000d014, i32* %v3_1000d015, align 4
  %v0_1000d016 = load i32, i32* @esi, align 4
  %v2_1000d016 = add i32 %v1_1000d015, -8
  %v3_1000d016 = inttoptr i32 %v2_1000d016 to i32*
  store i32 %v0_1000d016, i32* %v3_1000d016, align 4
  %v0_1000d017 = load i32, i32* @ebx, align 4
  store i32 %v0_1000d017, i32* @ecx, align 4
  %v2_1000d019 = call i32 @function_1000c6c0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v0_1000d01e = load i32, i32* @edi, align 4
  %v1_1000d01e = add i32 %v0_1000d01e, 1
  %v2_1000d01e = inttoptr i32 %v1_1000d01e to i8*
  %v3_1000d01e = load i8, i8* %v2_1000d01e, align 1
  %v10_1000d01e = icmp eq i8 %v3_1000d01e, 0
  store i32 %v1_1000d01e, i32* @esi, align 4
  br i1 %v10_1000d01e, label %dec_label_pc_1000d010.dec_label_pc_1000d03f.loopexit_crit_edge, label %dec_label_pc_1000d027

dec_label_pc_1000d010.dec_label_pc_1000d03f.loopexit_crit_edge: ; preds = %dec_label_pc_1000d010
  %v0_1000d03f.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000d03f

dec_label_pc_1000d027:                            ; preds = %dec_label_pc_1000d010
  %v0_1000d027 = load i32, i32* @ebx, align 4
  store i32 %v0_1000d027, i32* @ecx, align 4
  %v0_1000d029 = call i32 @function_10003680()
  %v0_1000d02e = load i32, i32* @esp, align 4
  %v1_1000d02e = add i32 %v0_1000d02e, -4
  %v2_1000d02e = inttoptr i32 %v1_1000d02e to i32*
  store i32 10, i32* %v2_1000d02e, align 4
  %v0_1000d030 = load i32, i32* @esi, align 4
  %v2_1000d030 = add i32 %v0_1000d02e, -8
  %v3_1000d030 = inttoptr i32 %v2_1000d030 to i32*
  store i32 %v0_1000d030, i32* %v3_1000d030, align 4
  %v2_1000d031 = call i8* @_strchr(i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32))
  %v4_1000d031 = ptrtoint i8* %v2_1000d031 to i32
  store i32 %v4_1000d031, i32* @eax, align 4
  store i32 %v4_1000d031, i32* @edi, align 4
  %v0_1000d038 = load i32, i32* @esp, align 4
  %v1_1000d038 = add i32 %v0_1000d038, 8
  %v1_1000d03b = icmp eq i8* %v2_1000d031, null
  %v1_1000d03d = icmp eq i1 %v1_1000d03b, false
  br i1 %v1_1000d03d, label %dec_label_pc_1000d010, label %dec_label_pc_1000d03f

dec_label_pc_1000d03f:                            ; preds = %dec_label_pc_1000d027, %dec_label_pc_1000d010.dec_label_pc_1000d03f.loopexit_crit_edge, %dec_label_pc_1000cffc
  %v0_1000d03f = phi i32 [ %v4_1000cffc, %dec_label_pc_1000cffc ], [ %v0_1000d03f.pre.pre, %dec_label_pc_1000d010.dec_label_pc_1000d03f.loopexit_crit_edge ], [ %v1_1000d038, %dec_label_pc_1000d027 ]
  %v1_1000d03f = inttoptr i32 %v0_1000d03f to i32*
  %v2_1000d03f = load i32, i32* %v1_1000d03f, align 4
  store i32 %v2_1000d03f, i32* @edi, align 4
  %v3_1000d03f = add i32 %v0_1000d03f, 4
  %v0_1000d040.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000d040

dec_label_pc_1000d040:                            ; preds = %dec_label_pc_1000cfd7, %dec_label_pc_1000d03f, %dec_label_pc_1000cfd3
  %v1_1000d040 = phi i32 [ %v4_1000cf99, %dec_label_pc_1000cfd7 ], [ %v3_1000d03f, %dec_label_pc_1000d03f ], [ %v4_1000cf99, %dec_label_pc_1000cfd3 ]
  %v0_1000d040 = phi i32 [ %arg1, %dec_label_pc_1000cfd7 ], [ %v0_1000d040.pre, %dec_label_pc_1000d03f ], [ %arg1, %dec_label_pc_1000cfd3 ]
  %v2_1000d040 = add i32 %v1_1000d040, -4
  %v3_1000d040 = inttoptr i32 %v2_1000d040 to i32*
  store i32 %v0_1000d040, i32* %v3_1000d040, align 4
  %v1_1000d041 = call i32 @function_10009450(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000d041, i32* @eax, align 4
  %v0_1000d046 = load i32, i32* @esp, align 4
  %v1_1000d046 = add i32 %v0_1000d046, 4
  %v1_1000d049 = icmp eq i32 %v1_1000d041, 0
  br i1 %v1_1000d049, label %dec_label_pc_1000d056, label %dec_label_pc_1000d04d

dec_label_pc_1000d04d:                            ; preds = %dec_label_pc_1000d040
  %v3_1000d04d = inttoptr i32 %v0_1000d046 to i32*
  store i32 %v1_1000d041, i32* %v3_1000d04d, align 4
  %v0_1000d04e = load i32, i32* @esi, align 4
  %v2_1000d04e = add i32 %v0_1000d046, -4
  %v3_1000d04e = inttoptr i32 %v2_1000d04e to i32*
  store i32 %v0_1000d04e, i32* %v3_1000d04e, align 4
  %v0_1000d04f = load i32, i32* @ebx, align 4
  store i32 %v0_1000d04f, i32* @ecx, align 4
  %v2_1000d051 = call i32 @function_1000c6c0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v0_1000d056.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000d056

dec_label_pc_1000d056:                            ; preds = %dec_label_pc_1000d04d, %dec_label_pc_1000d040, %dec_label_pc_1000cfcb
  %v0_1000d059 = phi i32 [ %v2_1000d051, %dec_label_pc_1000d04d ], [ 0, %dec_label_pc_1000d040 ], [ %v7_1000cf96, %dec_label_pc_1000cfcb ]
  %v0_1000d056 = phi i32 [ %v0_1000d056.pre, %dec_label_pc_1000d04d ], [ %v1_1000d046, %dec_label_pc_1000d040 ], [ %v4_1000cf99, %dec_label_pc_1000cfcb ]
  %v1_1000d056 = inttoptr i32 %v0_1000d056 to i32*
  %v2_1000d056 = load i32, i32* %v1_1000d056, align 4
  store i32 %v2_1000d056, i32* @esi, align 4
  %v3_1000d056 = add i32 %v0_1000d056, 4
  %v1_1000d057 = inttoptr i32 %v3_1000d056 to i32*
  %v2_1000d057 = load i32, i32* %v1_1000d057, align 4
  store i32 %v2_1000d057, i32* @ebx, align 4
  %v3_1000d057 = add i32 %v0_1000d056, 8
  %v1_1000d058 = inttoptr i32 %v3_1000d057 to i32*
  %v2_1000d058 = load i32, i32* %v1_1000d058, align 4
  store i32 %v2_1000d058, i32* @ebp, align 4
  ret i32 %v0_1000d059
}

define i32 @function_1000d060() local_unnamed_addr {
dec_label_pc_1000d060:
  %v0_1000d060 = load i32, i32* @ecx, align 4
  %v1_1000d060 = add i32 %v0_1000d060, 12
  %v2_1000d060 = inttoptr i32 %v1_1000d060 to i32*
  %v3_1000d060 = load i32, i32* %v2_1000d060, align 4
  %v1_1000d063 = icmp eq i32 %v3_1000d060, 0
  br i1 %v1_1000d063, label %dec_label_pc_1000d069, label %dec_label_pc_1000d067

dec_label_pc_1000d067:                            ; preds = %dec_label_pc_1000d060
  %v1_1000d067 = add i32 %v3_1000d060, -1
  ret i32 %v1_1000d067

dec_label_pc_1000d069:                            ; preds = %dec_label_pc_1000d060
  ret i32 0
}

define i32 @function_1000d070() local_unnamed_addr {
dec_label_pc_1000d070:
  %v0_1000d070 = load i32, i32* @ecx, align 4
  %v1_1000d070 = add i32 %v0_1000d070, 12
  %v2_1000d070 = inttoptr i32 %v1_1000d070 to i32*
  %v3_1000d070 = load i32, i32* %v2_1000d070, align 4
  %v10_1000d070 = icmp eq i32 %v3_1000d070, 0
  %storemerge = select i1 %v10_1000d070, i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32 %v0_1000d070
  ret i32 %storemerge
}

define i32 @function_1000d080(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000d080:
  %esi.global-to-local = alloca i32, align 4
  %v0_1000d089 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d089, i32* @esi, align 4
  %v1_1000d08b = icmp eq i32 %arg1, 0
  %v1_1000d08d = icmp eq i1 %v1_1000d08b, false
  br i1 %v1_1000d08d, label %dec_label_pc_1000d096, label %dec_label_pc_1000d08f

dec_label_pc_1000d08f:                            ; preds = %dec_label_pc_1000d080
  br label %dec_label_pc_1000d096

dec_label_pc_1000d096:                            ; preds = %dec_label_pc_1000d080, %dec_label_pc_1000d08f
  %storemerge = phi i32 [ 0, %dec_label_pc_1000d08f ], [ %arg2, %dec_label_pc_1000d080 ]
  store i32 %storemerge, i32* @edi, align 4
  %v1_1000d096 = add i32 %v0_1000d089, 4
  %v2_1000d096 = inttoptr i32 %v1_1000d096 to i32*
  %v3_1000d096 = load i32, i32* %v2_1000d096, align 4
  store i32 %v3_1000d096, i32* @eax, align 4
  %v2_1000d099 = add i32 %v0_1000d089, 12
  %v3_1000d099 = inttoptr i32 %v2_1000d099 to i32*
  store i32 %storemerge, i32* %v3_1000d099, align 4
  %v0_1000d09c = load i32, i32* @edi, align 4
  %v1_1000d09c = load i32, i32* @eax, align 4
  %v7_1000d09e = icmp sgt i32 %v0_1000d09c, %v1_1000d09c
  br i1 %v7_1000d09e, label %dec_label_pc_1000d0a0, label %dec_label_pc_1000d0b6

dec_label_pc_1000d0a0:                            ; preds = %dec_label_pc_1000d096
  %v2_1000d09c = sub i32 %v0_1000d09c, %v1_1000d09c
  %v0_1000d0a5 = load i32, i32* @esi, align 4
  store i32 %v0_1000d0a5, i32* @ecx, align 4
  %v1_1000d0a7 = call i32 @function_1000c180(i32 %v2_1000d09c)
  %v0_1000d0ac = load i32, i32* @esi, align 4
  %v1_1000d0ac = add i32 %v0_1000d0ac, 4
  %v2_1000d0ac = inttoptr i32 %v1_1000d0ac to i32*
  %v3_1000d0ac = load i32, i32* %v2_1000d0ac, align 4
  %v0_1000d0af = load i32, i32* @edi, align 4
  %v7_1000d0b1 = icmp sgt i32 %v0_1000d0af, %v3_1000d0ac
  br i1 %v7_1000d0b1, label %dec_label_pc_1000d0b3, label %dec_label_pc_1000d0b6

dec_label_pc_1000d0b3:                            ; preds = %dec_label_pc_1000d0a0
  %v2_1000d0b3 = add i32 %v0_1000d0ac, 12
  %v3_1000d0b3 = inttoptr i32 %v2_1000d0b3 to i32*
  store i32 %v3_1000d0ac, i32* %v3_1000d0b3, align 4
  br label %dec_label_pc_1000d0b6

dec_label_pc_1000d0b6:                            ; preds = %dec_label_pc_1000d0a0, %dec_label_pc_1000d096, %dec_label_pc_1000d0b3
  %v0_1000d0b6 = load i32, i32* @esi, align 4
  %v1_1000d0b6 = add i32 %v0_1000d0b6, 12
  %v2_1000d0b6 = inttoptr i32 %v1_1000d0b6 to i32*
  %v3_1000d0b6 = load i32, i32* %v2_1000d0b6, align 4
  %v1_1000d0b9 = icmp eq i32 %v3_1000d0b6, 0
  br i1 %v1_1000d0b9, label %dec_label_pc_1000d0b6.dec_label_pc_1000d0ea_crit_edge, label %dec_label_pc_1000d0bd

dec_label_pc_1000d0b6.dec_label_pc_1000d0ea_crit_edge: ; preds = %dec_label_pc_1000d0b6
  %v0_1000d0ea.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000d0ea

dec_label_pc_1000d0bd:                            ; preds = %dec_label_pc_1000d0b6
  %v2_1000d0bd = load i32, i32* @ecx, align 4
  store i32 %v2_1000d0bd, i32* %esi.global-to-local, align 4
  %v1_1000d0bf = load i32, i32* @edi, align 4
  %v3_1000d0bf = add i32 %v1_1000d0bf, %arg1
  store i32 %v3_1000d0bf, i32* @edx, align 4
  %v7_1000d0c2 = icmp ult i32 %v2_1000d0bd, %v3_1000d0bf
  %v1_1000d0c4 = icmp eq i1 %v7_1000d0c2, false
  br i1 %v1_1000d0c4, label %dec_label_pc_1000d0df, label %dec_label_pc_1000d0c6

dec_label_pc_1000d0c6:                            ; preds = %dec_label_pc_1000d0bd
  %v3_1000d0c6 = add i32 %v2_1000d0bd, %v3_1000d0b6
  store i32 %v3_1000d0c6, i32* @ecx, align 4
  %tmp16 = icmp ugt i32 %v3_1000d0c6, %arg1
  br i1 %tmp16, label %dec_label_pc_1000d0cd, label %dec_label_pc_1000d0df

dec_label_pc_1000d0cd:                            ; preds = %dec_label_pc_1000d0c6
  %v1_1000d0cd = load i32, i32* @esp, align 4
  %v2_1000d0cd = add i32 %v1_1000d0cd, -4
  %v3_1000d0cd = inttoptr i32 %v2_1000d0cd to i32*
  store i32 %v3_1000d0b6, i32* %v3_1000d0cd, align 4
  %v2_1000d0ce = add i32 %v1_1000d0cd, -8
  %v3_1000d0ce = inttoptr i32 %v2_1000d0ce to i32*
  store i32 %arg1, i32* %v3_1000d0ce, align 4
  %v0_1000d0cf = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d0cf = add i32 %v1_1000d0cd, -12
  %v3_1000d0cf = inttoptr i32 %v2_1000d0cf to i32*
  store i32 %v0_1000d0cf, i32* %v3_1000d0cf, align 4
  %v1_1000d0d0 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_1000d0d0 = ptrtoint i32* %v1_1000d0d0 to i32
  %v0_1000d0d5 = load i32, i32* @esp, align 4
  %v3_1000d0d8 = add i32 %v0_1000d0d5, 16
  %v1_1000d0d9 = inttoptr i32 %v3_1000d0d8 to i32*
  %v2_1000d0d9 = load i32, i32* %v1_1000d0d9, align 4
  store i32 %v2_1000d0d9, i32* @esi, align 4
  %v3_1000d0d9 = add i32 %v0_1000d0d5, 20
  %v1_1000d0da = inttoptr i32 %v3_1000d0d9 to i32*
  %v2_1000d0da = load i32, i32* %v1_1000d0da, align 4
  store i32 %v2_1000d0da, i32* @ebx, align 4
  ret i32 %v3_1000d0d0

dec_label_pc_1000d0df:                            ; preds = %dec_label_pc_1000d0c6, %dec_label_pc_1000d0bd
  %v1_1000d0df = load i32, i32* @esp, align 4
  %v2_1000d0df = add i32 %v1_1000d0df, -4
  %v3_1000d0df = inttoptr i32 %v2_1000d0df to i32*
  store i32 %v3_1000d0b6, i32* %v3_1000d0df, align 4
  %v2_1000d0e0 = add i32 %v1_1000d0df, -8
  %v3_1000d0e0 = inttoptr i32 %v2_1000d0e0 to i32*
  store i32 %arg1, i32* %v3_1000d0e0, align 4
  %v0_1000d0e1 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d0e1 = add i32 %v1_1000d0df, -12
  %v3_1000d0e1 = inttoptr i32 %v2_1000d0e1 to i32*
  store i32 %v0_1000d0e1, i32* %v3_1000d0e1, align 4
  %v0_1000d0e2 = call i32 @_memcpy.1()
  %v0_1000d0e7 = load i32, i32* @esp, align 4
  %v1_1000d0e7 = add i32 %v0_1000d0e7, 12
  br label %dec_label_pc_1000d0ea

dec_label_pc_1000d0ea:                            ; preds = %dec_label_pc_1000d0b6.dec_label_pc_1000d0ea_crit_edge, %dec_label_pc_1000d0df
  %v0_1000d0ee = phi i32 [ 0, %dec_label_pc_1000d0b6.dec_label_pc_1000d0ea_crit_edge ], [ %v0_1000d0e2, %dec_label_pc_1000d0df ]
  %v0_1000d0ea = phi i32 [ %v0_1000d0ea.pre, %dec_label_pc_1000d0b6.dec_label_pc_1000d0ea_crit_edge ], [ %v1_1000d0e7, %dec_label_pc_1000d0df ]
  %v3_1000d0ea = add i32 %v0_1000d0ea, 4
  %v1_1000d0eb = inttoptr i32 %v3_1000d0ea to i32*
  %v2_1000d0eb = load i32, i32* %v1_1000d0eb, align 4
  store i32 %v2_1000d0eb, i32* @esi, align 4
  %v3_1000d0eb = add i32 %v0_1000d0ea, 8
  %v1_1000d0ec = inttoptr i32 %v3_1000d0eb to i32*
  %v2_1000d0ec = load i32, i32* %v1_1000d0ec, align 4
  store i32 %v2_1000d0ec, i32* @ebx, align 4
  ret i32 %v0_1000d0ee
}

define i32 @function_1000d100(i8* %arg1) local_unnamed_addr {
dec_label_pc_1000d100:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i8*, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000d104 = load i32, i32* @edi, align 4
  store i32 %v0_1000d104, i32* %stack_var_-12, align 4
  %v4_1000d105 = ptrtoint i8* %arg1 to i32
  store i32 %v4_1000d105, i32* @edi, align 4
  %v0_1000d108 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d108, i32* %esi.global-to-local, align 4
  %v2_1000d10a = icmp eq i8* %arg1, null
  br i1 %v2_1000d10a, label %dec_label_pc_1000d129, label %dec_label_pc_1000d10e

dec_label_pc_1000d10e:                            ; preds = %dec_label_pc_1000d100
  %tmp17 = bitcast i8** %stack_var_-16 to i32*
  store i32 %v4_1000d105, i32* %tmp17, align 4
  %v2_1000d10f = call i32 @function_10009450(i32 %v4_1000d105)
  %v1_1000d117 = add i32 %v2_1000d10f, 1
  %v4_1000d118 = inttoptr i32 %v1_1000d117 to i8*
  store i8* %v4_1000d118, i8** %stack_var_-16, align 4
  %v0_1000d11a = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000d11a, i32* @ecx, align 4
  %v4_1000d11c = call i32 @function_1000d080(i32 %v4_1000d105, i32 %v1_1000d117)
  %v3_1000d121 = ptrtoint i8* %arg1 to i32
  store i32 %v3_1000d121, i32* @edi, align 4
  %v0_1000d122 = load i32, i32* @esi, align 4
  %v2_1000d124 = load i8*, i8** %stack_var_-16, align 4
  %v3_1000d124 = ptrtoint i8* %v2_1000d124 to i32
  store i32 %v3_1000d124, i32* @esi, align 4
  %v2_1000d125 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d125, i32* @ebp, align 4
  ret i32 %v0_1000d122

dec_label_pc_1000d129:                            ; preds = %dec_label_pc_1000d100
  store i8* null, i8** %stack_var_-16, align 4
  %v4_1000d12f = call i32 @function_1000d080(i32 %v4_1000d105, i32 0)
  %v3_1000d134 = ptrtoint i8* %arg1 to i32
  store i32 %v3_1000d134, i32* @edi, align 4
  %v0_1000d135 = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v2_1000d138 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d138, i32* @ebp, align 4
  ret i32 %v0_1000d135
}

define i32 @function_1000d140() local_unnamed_addr {
dec_label_pc_1000d140:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000d140 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d140, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_1000d144 = inttoptr i32 %v0_1000d140 to i32*
  store i32 0, i32* %v2_1000d144, align 4
  %v0_1000d146 = load i32, i32* @ecx, align 4
  %v1_1000d146 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000d146 = add i32 %v1_1000d146, 8
  %v3_1000d146 = inttoptr i32 %v2_1000d146 to i32*
  store i32 %v0_1000d146, i32* %v3_1000d146, align 4
  %v0_1000d149 = load i32, i32* @ecx, align 4
  %v1_1000d149 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000d149 = add i32 %v1_1000d149, 4
  %v3_1000d149 = inttoptr i32 %v2_1000d149 to i32*
  store i32 %v0_1000d149, i32* %v3_1000d149, align 4
  %v0_1000d14c = load i32, i32* @ecx, align 4
  %v1_1000d14c = load i32, i32* %eax.global-to-local, align 4
  %v2_1000d14c = add i32 %v1_1000d14c, 12
  %v3_1000d14c = inttoptr i32 %v2_1000d14c to i32*
  store i32 %v0_1000d14c, i32* %v3_1000d14c, align 4
  %v0_1000d14f = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d14f
}

define i32 @function_1000d150(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d150:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_1000d156 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d156, i32* %esi.global-to-local, align 4
  %v0_1000d158 = load i32, i32* @edi, align 4
  store i32 %v0_1000d158, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_1000d15c = inttoptr i32 %v0_1000d156 to i32*
  store i32 0, i32* %v2_1000d15c, align 4
  %v0_1000d15e = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d15e = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d15e = add i32 %v1_1000d15e, 8
  %v3_1000d15e = inttoptr i32 %v2_1000d15e to i32*
  store i32 %v0_1000d15e, i32* %v3_1000d15e, align 4
  %v0_1000d161 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d161 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d161 = add i32 %v1_1000d161, 4
  %v3_1000d161 = inttoptr i32 %v2_1000d161 to i32*
  store i32 %v0_1000d161, i32* %v3_1000d161, align 4
  %v0_1000d164 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d164 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d164 = add i32 %v1_1000d164, 12
  %v3_1000d164 = inttoptr i32 %v2_1000d164 to i32*
  store i32 %v0_1000d164, i32* %v3_1000d164, align 4
  %v0_1000d167 = load i32, i32* @edi, align 4
  %v1_1000d167 = load i32, i32* %eax.global-to-local, align 4
  %v12_1000d167 = icmp eq i32 %v0_1000d167, %v1_1000d167
  br i1 %v12_1000d167, label %dec_label_pc_1000d175, label %dec_label_pc_1000d16b

dec_label_pc_1000d16b:                            ; preds = %dec_label_pc_1000d150
  store i32 %v0_1000d167, i32* %stack_var_-16, align 4
  %v1_1000d16c = call i32 @function_10009450(i32 %v0_1000d167)
  %v1_1000d174 = add i32 %v1_1000d16c, 1
  store i32 %v1_1000d174, i32* %eax.global-to-local, align 4
  %v0_1000d176.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000d175

dec_label_pc_1000d175:                            ; preds = %dec_label_pc_1000d150, %dec_label_pc_1000d16b
  %v0_1000d176 = phi i32 [ %v0_1000d176.pre, %dec_label_pc_1000d16b ], [ %v0_1000d167, %dec_label_pc_1000d150 ]
  %v0_1000d175 = phi i32 [ %v1_1000d174, %dec_label_pc_1000d16b ], [ %v1_1000d167, %dec_label_pc_1000d150 ]
  store i32 %v0_1000d175, i32* %stack_var_-16, align 4
  %v0_1000d177 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000d177, i32* @ecx, align 4
  %v2_1000d179 = call i32 @function_1000d080(i32 %v0_1000d176, i32 %v0_1000d175)
  store i32 %v0_1000d176, i32* @edi, align 4
  %v0_1000d17f = load i32, i32* @esi, align 4
  store i32 %v0_1000d17f, i32* %eax.global-to-local, align 4
  %v2_1000d181 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000d181, i32* @esi, align 4
  %v2_1000d182 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d182, i32* @ebp, align 4
  ret i32 %v0_1000d17f
}

define i32 @function_1000d190(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d190:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_1000d196 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d196, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v2_1000d19b = inttoptr i32 %v0_1000d196 to i32*
  store i32 0, i32* %v2_1000d19b, align 4
  %v0_1000d19d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d19d = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d19d = add i32 %v1_1000d19d, 8
  %v3_1000d19d = inttoptr i32 %v2_1000d19d to i32*
  store i32 %v0_1000d19d, i32* %v3_1000d19d, align 4
  %v0_1000d1a0 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d1a0 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d1a0 = add i32 %v1_1000d1a0, 4
  %v3_1000d1a0 = inttoptr i32 %v2_1000d1a0 to i32*
  store i32 %v0_1000d1a0, i32* %v3_1000d1a0, align 4
  %v0_1000d1a3 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d1a3 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d1a3 = add i32 %v1_1000d1a3, 12
  %v3_1000d1a3 = inttoptr i32 %v2_1000d1a3 to i32*
  store i32 %v0_1000d1a3, i32* %v3_1000d1a3, align 4
  %v0_1000d1a6 = load i32, i32* @edi, align 4
  store i32 %v0_1000d1a6, i32* %stack_var_-12, align 4
  %v0_1000d1a7 = load i32, i32* @ecx, align 4
  %v1_1000d1a7 = add i32 %v0_1000d1a7, 12
  %v2_1000d1a7 = inttoptr i32 %v1_1000d1a7 to i32*
  %v3_1000d1a7 = load i32, i32* %v2_1000d1a7, align 4
  %v4_1000d1a7 = load i32, i32* %eax.global-to-local, align 4
  %v15_1000d1a7 = icmp eq i32 %v3_1000d1a7, %v4_1000d1a7
  %v1_1000d1aa = icmp eq i1 %v15_1000d1a7, false
  br i1 %v1_1000d1aa, label %dec_label_pc_1000d1b3, label %dec_label_pc_1000d1ac

dec_label_pc_1000d1ac:                            ; preds = %dec_label_pc_1000d190
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* @edi, align 4
  br label %dec_label_pc_1000d1b9

dec_label_pc_1000d1b3:                            ; preds = %dec_label_pc_1000d190
  %v1_1000d1b3 = inttoptr i32 %v0_1000d1a7 to i32*
  %v2_1000d1b3 = load i32, i32* %v1_1000d1b3, align 4
  store i32 %v2_1000d1b3, i32* @edi, align 4
  %v12_1000d1b5 = icmp eq i32 %v2_1000d1b3, %v4_1000d1a7
  br i1 %v12_1000d1b5, label %dec_label_pc_1000d1c3, label %dec_label_pc_1000d1b9

dec_label_pc_1000d1b9:                            ; preds = %dec_label_pc_1000d1b3, %dec_label_pc_1000d1ac
  %v0_1000d1b9 = phi i32 [ %v2_1000d1b3, %dec_label_pc_1000d1b3 ], [ ptrtoint (i32* @global_var_10022600.47 to i32), %dec_label_pc_1000d1ac ]
  store i32 %v0_1000d1b9, i32* %stack_var_-16, align 4
  %v1_1000d1ba = call i32 @function_10009450(i32 %v0_1000d1b9)
  %v1_1000d1c2 = add i32 %v1_1000d1ba, 1
  store i32 %v1_1000d1c2, i32* %eax.global-to-local, align 4
  %v0_1000d1c4.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000d1c3

dec_label_pc_1000d1c3:                            ; preds = %dec_label_pc_1000d1b3, %dec_label_pc_1000d1b9
  %v0_1000d1c4 = phi i32 [ %v0_1000d1c4.pre, %dec_label_pc_1000d1b9 ], [ %v2_1000d1b3, %dec_label_pc_1000d1b3 ]
  %v0_1000d1c3 = phi i32 [ %v1_1000d1c2, %dec_label_pc_1000d1b9 ], [ %v4_1000d1a7, %dec_label_pc_1000d1b3 ]
  store i32 %v0_1000d1c3, i32* %stack_var_-16, align 4
  %v0_1000d1c5 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000d1c5, i32* @ecx, align 4
  %v2_1000d1c7 = call i32 @function_1000d080(i32 %v0_1000d1c4, i32 %v0_1000d1c3)
  store i32 %v0_1000d1c4, i32* @edi, align 4
  %v0_1000d1cd = load i32, i32* @esi, align 4
  store i32 %v0_1000d1cd, i32* %eax.global-to-local, align 4
  %v2_1000d1cf = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000d1cf, i32* @esi, align 4
  %v2_1000d1d0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d1d0, i32* @ebp, align 4
  ret i32 %v0_1000d1cd
}

define i32 @function_1000d1e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000d1e0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000d1e0 = load i32, i32* @ebp, align 4
  store i32 %v0_1000d1e0, i32* %stack_var_-4, align 4
  %v4_1000d1e0 = ptrtoint i32* %stack_var_-4 to i32
  %v0_1000d1e3 = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000d1e3, i32* @ecx, align 4
  %v1_1000d1e9 = icmp eq i32 %v0_1000d1e3, 0
  br i1 %v1_1000d1e9, label %dec_label_pc_1000d28a, label %dec_label_pc_1000d1f1

dec_label_pc_1000d1f1:                            ; preds = %dec_label_pc_1000d1e0
  %v0_1000d1f1 = load i8, i8* @global_var_1002d34c.458, align 1
  %v7_1000d1f1 = icmp eq i8 %v0_1000d1f1, 0
  %v1_1000d1f8 = icmp eq i1 %v7_1000d1f1, false
  br i1 %v1_1000d1f8, label %dec_label_pc_1000d28a, label %dec_label_pc_1000d1fe

dec_label_pc_1000d1fe:                            ; preds = %dec_label_pc_1000d1f1
  %v1_1000d201 = inttoptr i32 %v0_1000d1e3 to i32*
  %v2_1000d201 = load i32, i32* %v1_1000d201, align 4
  store i32 %arg1, i32* @global_var_1002d348.459, align 4
  %v1_1000d208 = add i32 %v2_1000d201, 32
  %v2_1000d208 = inttoptr i32 %v1_1000d208 to i32*
  %v3_1000d208 = load i32, i32* %v2_1000d208, align 4
  store i8 1, i8* @global_var_1002d34c.458, align 1
  store i32 %v3_1000d208, i32* @global_var_10028638.460, align 4
  %v1_1000d221 = icmp eq i32 %arg2, 0
  %v1_1000d223 = icmp eq i1 %v1_1000d221, false
  br i1 %v1_1000d223, label %dec_label_pc_1000d22f, label %dec_label_pc_1000d225

dec_label_pc_1000d225:                            ; preds = %dec_label_pc_1000d1fe
  br label %dec_label_pc_1000d22f

dec_label_pc_1000d22f:                            ; preds = %dec_label_pc_1000d225, %dec_label_pc_1000d1fe
  %storemerge = phi i32 [ 268601008, %dec_label_pc_1000d225 ], [ %arg2, %dec_label_pc_1000d1fe ]
  store i32 %storemerge, i32* @global_var_1002d344.461, align 4
  %v0_1000d22f = load i32, i32* @esi, align 4
  store i32 %v0_1000d22f, i32* %stack_var_-8, align 4
  %v4_1000d22f = ptrtoint i32* %stack_var_-8 to i32
  %v0_1000d230 = load i32, i32* @global_var_1002d340.463, align 4
  store i32 %v0_1000d230, i32* %esi.global-to-local, align 4
  %v1_1000d236 = icmp eq i32 %v0_1000d230, 0
  br i1 %v1_1000d236, label %dec_label_pc_1000d262, label %dec_label_pc_1000d23a

dec_label_pc_1000d23a:                            ; preds = %dec_label_pc_1000d22f
  %v0_1000d23a = load i32, i32* @edi, align 4
  store i32 %v0_1000d23a, i32* %stack_var_-12, align 4
  %v4_1000d23a = ptrtoint i32* %stack_var_-12 to i32
  br label %dec_label_pc_1000d240

dec_label_pc_1000d240:                            ; preds = %dec_label_pc_1000d240.dec_label_pc_1000d240_crit_edge, %dec_label_pc_1000d23a
  %v1_1000d24d = phi i32 [ %v2_1000d24d, %dec_label_pc_1000d240.dec_label_pc_1000d240_crit_edge ], [ %v4_1000d23a, %dec_label_pc_1000d23a ]
  %v0_1000d242 = phi i32 [ %v0_1000d242.pre, %dec_label_pc_1000d240.dec_label_pc_1000d240_crit_edge ], [ %arg1, %dec_label_pc_1000d23a ]
  %v0_1000d24a = phi i32 [ %v3_1000d24a, %dec_label_pc_1000d240.dec_label_pc_1000d240_crit_edge ], [ %v0_1000d230, %dec_label_pc_1000d23a ]
  %v1_1000d24a = add i32 %v0_1000d24a, 4
  %v2_1000d24a = inttoptr i32 %v1_1000d24a to i32*
  %v3_1000d24a = load i32, i32* %v2_1000d24a, align 4
  %v2_1000d24d = add i32 %v1_1000d24d, -4
  %v3_1000d24d = inttoptr i32 %v2_1000d24d to i32*
  store i32 %v0_1000d242, i32* %v3_1000d24d, align 4
  %v0_1000d24e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000d24e, i32* @ecx, align 4
  store i32 %v3_1000d24a, i32* %esi.global-to-local, align 4
  %v1_1000d25d = icmp eq i32 %v3_1000d24a, 0
  %v1_1000d25f = icmp eq i1 %v1_1000d25d, false
  br i1 %v1_1000d25f, label %dec_label_pc_1000d240.dec_label_pc_1000d240_crit_edge, label %dec_label_pc_1000d261

dec_label_pc_1000d240.dec_label_pc_1000d240_crit_edge: ; preds = %dec_label_pc_1000d240
  %v0_1000d242.pre = load i32, i32* @global_var_1002d348.459, align 4
  br label %dec_label_pc_1000d240

dec_label_pc_1000d261:                            ; preds = %dec_label_pc_1000d240
  %v2_1000d261 = load i32, i32* %v3_1000d24d, align 4
  store i32 %v2_1000d261, i32* @edi, align 4
  %v0_1000d262.pre = load i32, i32* @global_var_1002b934.318, align 4
  br label %dec_label_pc_1000d262

dec_label_pc_1000d262:                            ; preds = %dec_label_pc_1000d261, %dec_label_pc_1000d22f
  %v0_1000d289 = phi i32 [ %v1_1000d24d, %dec_label_pc_1000d261 ], [ %v4_1000d22f, %dec_label_pc_1000d22f ]
  %v0_1000d26f = phi i32 [ %v0_1000d262.pre, %dec_label_pc_1000d261 ], [ %v0_1000d1e3, %dec_label_pc_1000d22f ]
  %v1_1000d268 = inttoptr i32 %v0_1000d26f to i32*
  store i32 %v0_1000d26f, i32* @ecx, align 4
  %v2_1000d275 = load i32, i32* %v1_1000d268, align 4
  store i32 %v2_1000d275, i32* @eax, align 4
  store i32 0, i32* @global_var_1002d340.463, align 4
  %v1_1000d289 = inttoptr i32 %v0_1000d289 to i32*
  %v2_1000d289 = load i32, i32* %v1_1000d289, align 4
  store i32 %v2_1000d289, i32* @esi, align 4
  %v3_1000d289 = add i32 %v0_1000d289, 4
  br label %dec_label_pc_1000d28a

dec_label_pc_1000d28a:                            ; preds = %dec_label_pc_1000d262, %dec_label_pc_1000d1f1, %dec_label_pc_1000d1e0
  %v0_1000d28a = phi i32 [ %v3_1000d289, %dec_label_pc_1000d262 ], [ %v4_1000d1e0, %dec_label_pc_1000d1f1 ], [ %v4_1000d1e0, %dec_label_pc_1000d1e0 ]
  %v1_1000d28a = inttoptr i32 %v0_1000d28a to i32*
  %v2_1000d28a = load i32, i32* %v1_1000d28a, align 4
  store i32 %v2_1000d28a, i32* @ebp, align 4
  %v0_1000d28b = load i32, i32* @eax, align 4
  ret i32 %v0_1000d28b
}

define i32 @function_1000d290() local_unnamed_addr {
dec_label_pc_1000d290:
  %v0_1000d290 = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000d290, i32* @ecx, align 4
  %v1_1000d296 = icmp eq i32 %v0_1000d290, 0
  br i1 %v1_1000d296, label %dec_label_pc_1000d2d8, label %dec_label_pc_1000d29a

dec_label_pc_1000d29a:                            ; preds = %dec_label_pc_1000d290
  %v0_1000d29a = load i8, i8* @global_var_1002d34c.458, align 1
  %v7_1000d29a = icmp eq i8 %v0_1000d29a, 0
  br i1 %v7_1000d29a, label %dec_label_pc_1000d2d8, label %dec_label_pc_1000d2a3

dec_label_pc_1000d2a3:                            ; preds = %dec_label_pc_1000d29a
  %v0_1000d2a5 = load i32, i32* @global_var_10028638.460, align 4
  store i32 %v0_1000d290, i32* @ecx, align 4
  store i32 %v0_1000d2a5, i32* @eax, align 4
  store i32 -1, i32* @global_var_10028638.460, align 4
  store i8 0, i8* @global_var_1002d34c.458, align 1
  br label %dec_label_pc_1000d2d8

dec_label_pc_1000d2d8:                            ; preds = %dec_label_pc_1000d2a3, %dec_label_pc_1000d29a, %dec_label_pc_1000d290
  %v0_1000d2d8 = load i32, i32* @eax, align 4
  ret i32 %v0_1000d2d8
}

define i32 @function_1000d2e0() {
dec_label_pc_1000d2e0:
  %v0_1000d2e0 = load i32, i32* @global_var_10028638.460, align 4
  ret i32 %v0_1000d2e0
}

define i32 @function_1000d2f0(i32 %arg1, i32 %arg2, i32 %arg3) {
dec_label_pc_1000d2f0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_1000d2f8 = load i32, i32* @ecx, align 4
  %v2_1000d2f8 = add i32 %v1_1000d2f8, 12
  %v3_1000d2f8 = inttoptr i32 %v2_1000d2f8 to i32*
  store i32 %arg1, i32* %v3_1000d2f8, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v0_1000d2fe = load i32, i32* %edx.global-to-local, align 4
  %v1_1000d2fe = trunc i32 %v0_1000d2fe to i8
  %v2_1000d2fe = load i32, i32* @ecx, align 4
  %v3_1000d2fe = add i32 %v2_1000d2fe, 8
  %v4_1000d2fe = inttoptr i32 %v3_1000d2fe to i8*
  store i8 %v1_1000d2fe, i8* %v4_1000d2fe, align 1
  %v0_1000d301 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d301 = load i32, i32* %edx.global-to-local, align 4
  %v12_1000d301 = icmp eq i32 %v0_1000d301, %v1_1000d301
  %v1_1000d303 = icmp eq i1 %v12_1000d301, false
  br i1 %v1_1000d303, label %dec_label_pc_1000d30a, label %dec_label_pc_1000d305

dec_label_pc_1000d305:                            ; preds = %dec_label_pc_1000d2f0
  %v0_1000d305 = load i32, i32* inttoptr (i32 268601084 to i32*), align 4
  store i32 %v0_1000d305, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000d30a

dec_label_pc_1000d30a:                            ; preds = %dec_label_pc_1000d305, %dec_label_pc_1000d2f0
  %v0_1000d30a = phi i32 [ %v0_1000d305, %dec_label_pc_1000d305 ], [ %v0_1000d301, %dec_label_pc_1000d2f0 ]
  %v1_1000d30a = load i32, i32* @ecx, align 4
  %v2_1000d30a = add i32 %v1_1000d30a, 16
  %v3_1000d30a = inttoptr i32 %v2_1000d30a to i32*
  store i32 %v0_1000d30a, i32* %v3_1000d30a, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v1_1000d310 = load i32, i32* @ecx, align 4
  %v2_1000d310 = add i32 %v1_1000d310, 20
  %v3_1000d310 = inttoptr i32 %v2_1000d310 to i32*
  store i32 %arg3, i32* %v3_1000d310, align 4
  %v0_1000d313 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000d313 = and i32 %v0_1000d313, 1
  %v3_1000d313 = icmp eq i32 %v2_1000d313, 0
  %v1_1000d315 = icmp eq i1 %v3_1000d313, false
  br i1 %v1_1000d315, label %dec_label_pc_1000d327, label %dec_label_pc_1000d317

dec_label_pc_1000d317:                            ; preds = %dec_label_pc_1000d30a
  %v0_1000d317 = load i32, i32* @global_var_1002d340.463, align 4
  store i32 %v0_1000d317, i32* %eax.global-to-local, align 4
  %v1_1000d31c = load i32, i32* @ecx, align 4
  %v2_1000d31c = add i32 %v1_1000d31c, 4
  %v3_1000d31c = inttoptr i32 %v2_1000d31c to i32*
  store i32 %v0_1000d317, i32* %v3_1000d31c, align 4
  %v0_1000d31f = load i32, i32* @ecx, align 4
  store i32 %v0_1000d31f, i32* @global_var_1002d340.463, align 4
  br label %dec_label_pc_1000d32a

dec_label_pc_1000d327:                            ; preds = %dec_label_pc_1000d30a
  %v0_1000d327 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000d327 = load i32, i32* @ecx, align 4
  %v2_1000d327 = add i32 %v1_1000d327, 4
  %v3_1000d327 = inttoptr i32 %v2_1000d327 to i32*
  store i32 %v0_1000d327, i32* %v3_1000d327, align 4
  br label %dec_label_pc_1000d32a

dec_label_pc_1000d32a:                            ; preds = %dec_label_pc_1000d327, %dec_label_pc_1000d317
  %v0_1000d32a = load i32, i32* @global_var_1002d344.461, align 4
  %v1_1000d32a = load i32, i32* %edx.global-to-local, align 4
  %v12_1000d32a = icmp eq i32 %v0_1000d32a, %v1_1000d32a
  br i1 %v12_1000d32a, label %dec_label_pc_1000d32a.dec_label_pc_1000d339_crit_edge, label %dec_label_pc_1000d332

dec_label_pc_1000d32a.dec_label_pc_1000d339_crit_edge: ; preds = %dec_label_pc_1000d32a
  %v0_1000d33a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000d339

dec_label_pc_1000d332:                            ; preds = %dec_label_pc_1000d32a
  %v2_1000d332 = load i32, i32* @ecx, align 4
  store i32 %v2_1000d332, i32* %edx.global-to-local, align 4
  %v1_1000d334 = add i32 %v2_1000d332, 44
  %v2_1000d334 = inttoptr i32 %v1_1000d334 to i32*
  %v3_1000d334 = load i32, i32* %v2_1000d334, align 4
  store i32 %v3_1000d334, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000d339

dec_label_pc_1000d339:                            ; preds = %dec_label_pc_1000d32a.dec_label_pc_1000d339_crit_edge, %dec_label_pc_1000d332
  %v0_1000d33a = phi i32 [ %v0_1000d33a.pre, %dec_label_pc_1000d32a.dec_label_pc_1000d339_crit_edge ], [ %v3_1000d334, %dec_label_pc_1000d332 ]
  ret i32 %v0_1000d33a
}

define i32 @function_1000d340() {
dec_label_pc_1000d340:
  %v0_1000d340 = load i32, i32* @ecx, align 4
  %v1_1000d340 = add i32 %v0_1000d340, 12
  %v2_1000d340 = inttoptr i32 %v1_1000d340 to i32*
  %v3_1000d340 = load i32, i32* %v2_1000d340, align 4
  ret i32 %v3_1000d340
}

define i32 @function_1000d350(i32 %arg1) {
dec_label_pc_1000d350:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1000d350 = load i32, i32* %ebp.global-to-local, align 4
  %v0_1000d356 = load i32, i32* @ecx, align 4
  %v1_1000d356 = add i32 %v0_1000d356, 20
  %v2_1000d356 = inttoptr i32 %v1_1000d356 to i32*
  %v3_1000d356 = load i32, i32* %v2_1000d356, align 4
  %v5_1000d356 = and i32 %v3_1000d356, %arg1
  %v6_1000d356 = icmp eq i32 %v5_1000d356, 0
  %v1_1000d359 = icmp eq i1 %v6_1000d356, false
  %v2_1000d359 = zext i1 %v1_1000d359 to i32
  %v4_1000d359 = and i32 %arg1, -256
  %v5_1000d359 = or i32 %v2_1000d359, %v4_1000d359
  store i32 %v0_1000d350, i32* %ebp.global-to-local, align 4
  ret i32 %v5_1000d359
}

define i32 @function_1000d360(i32 %arg1) {
dec_label_pc_1000d360:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v0_1000d366 = load i32, i32* @ecx, align 4
  %v1_1000d366 = add i32 %v0_1000d366, 20
  %v2_1000d366 = inttoptr i32 %v1_1000d366 to i32*
  %v3_1000d366 = load i32, i32* %v2_1000d366, align 4
  %v5_1000d366 = or i32 %v3_1000d366, %arg1
  store i32 %v5_1000d366, i32* %v2_1000d366, align 4
  %v0_1000d36a = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d36a
}

define i32 @function_1000d370(i32 %arg1) {
dec_label_pc_1000d370:
  %eax.global-to-local = alloca i32, align 4
  %v1_1000d376 = sub i32 -1, %arg1
  store i32 %v1_1000d376, i32* %eax.global-to-local, align 4
  %v0_1000d378 = load i32, i32* @ecx, align 4
  %v1_1000d378 = add i32 %v0_1000d378, 20
  %v2_1000d378 = inttoptr i32 %v1_1000d378 to i32*
  %v3_1000d378 = load i32, i32* %v2_1000d378, align 4
  %v5_1000d378 = and i32 %v3_1000d378, %v1_1000d376
  store i32 %v5_1000d378, i32* %v2_1000d378, align 4
  %v0_1000d37c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d37c
}

define i32 @function_1000d380() {
dec_label_pc_1000d380:
  %v0_1000d380 = load i32, i32* @ecx, align 4
  %v1_1000d380 = add i32 %v0_1000d380, 20
  %v2_1000d380 = inttoptr i32 %v1_1000d380 to i32*
  %v3_1000d380 = load i32, i32* %v2_1000d380, align 4
  ret i32 %v3_1000d380
}

define i32 @function_1000d390() {
dec_label_pc_1000d390:
  %v0_1000d390 = load i32, i32* @ecx, align 4
  %v1_1000d390 = add i32 %v0_1000d390, 16
  %v2_1000d390 = inttoptr i32 %v1_1000d390 to i32*
  %v3_1000d390 = load i32, i32* %v2_1000d390, align 4
  ret i32 %v3_1000d390
}

define i32 @function_1000d3a0() {
dec_label_pc_1000d3a0:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000d3a0 = load i32, i32* @ecx, align 4
  %v1_1000d3a0 = add i32 %v0_1000d3a0, 8
  %v2_1000d3a0 = inttoptr i32 %v1_1000d3a0 to i8*
  %v3_1000d3a0 = load i8, i8* %v2_1000d3a0, align 1
  %v4_1000d3a0 = zext i8 %v3_1000d3a0 to i32
  %v5_1000d3a0 = load i32, i32* %eax.global-to-local, align 4
  %v6_1000d3a0 = and i32 %v5_1000d3a0, -256
  %v7_1000d3a0 = or i32 %v6_1000d3a0, %v4_1000d3a0
  store i32 %v7_1000d3a0, i32* %eax.global-to-local, align 4
  ret i32 %v7_1000d3a0
}

define i32 @function_1000d3b0(i32 %arg1) {
dec_label_pc_1000d3b0:
  %v0_1000d3b3 = load i32, i32* @ecx, align 4
  %v1_1000d3b3 = add i32 %v0_1000d3b3, 28
  %v2_1000d3b3 = inttoptr i32 %v1_1000d3b3 to i32*
  %v3_1000d3b3 = load i32, i32* %v2_1000d3b3, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000d3b9 = add i32 %v3_1000d3b3, 20
  %v2_1000d3b9 = inttoptr i32 %v1_1000d3b9 to i32*
  %v3_1000d3b9 = load i32, i32* %v2_1000d3b9, align 4
  %v5_1000d3b9 = and i32 %v3_1000d3b9, %arg1
  %v6_1000d3b9 = icmp eq i32 %v5_1000d3b9, 0
  %v1_1000d3bc = icmp eq i1 %v6_1000d3b9, false
  %v2_1000d3bc = zext i1 %v1_1000d3bc to i32
  %v4_1000d3bc = and i32 %v3_1000d3b3, -256
  %v5_1000d3bc = or i32 %v2_1000d3bc, %v4_1000d3bc
  ret i32 %v5_1000d3bc
}

define i32 @function_1000d3d0() {
dec_label_pc_1000d3d0:
  %v0_1000d3d0 = load i32, i32* @ecx, align 4
  %v1_1000d3d0 = add i32 %v0_1000d3d0, 28
  %v2_1000d3d0 = inttoptr i32 %v1_1000d3d0 to i32*
  %v3_1000d3d0 = load i32, i32* %v2_1000d3d0, align 4
  %v1_1000d3d3 = add i32 %v3_1000d3d0, 20
  %v2_1000d3d3 = inttoptr i32 %v1_1000d3d3 to i32*
  %v3_1000d3d3 = load i32, i32* %v2_1000d3d3, align 4
  ret i32 %v3_1000d3d3
}

define i32 @function_1000d3e0() {
dec_label_pc_1000d3e0:
  %v0_1000d3e0 = load i32, i32* @ecx, align 4
  %v1_1000d3e0 = add i32 %v0_1000d3e0, 28
  %v2_1000d3e0 = inttoptr i32 %v1_1000d3e0 to i32*
  %v3_1000d3e0 = load i32, i32* %v2_1000d3e0, align 4
  %v1_1000d3e3 = add i32 %v3_1000d3e0, 16
  %v2_1000d3e3 = inttoptr i32 %v1_1000d3e3 to i32*
  %v3_1000d3e3 = load i32, i32* %v2_1000d3e3, align 4
  ret i32 %v3_1000d3e3
}

define i32 @function_1000d3f0(i32 %arg1) {
dec_label_pc_1000d3f0:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000d3f3 = load i32, i32* @ecx, align 4
  %v1_1000d3f3 = add i32 %v0_1000d3f3, 28
  %v2_1000d3f3 = inttoptr i32 %v1_1000d3f3 to i32*
  %v3_1000d3f3 = load i32, i32* %v2_1000d3f3, align 4
  store i32 %v3_1000d3f3, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000d3f9 = add i32 %v3_1000d3f3, 20
  %v2_1000d3f9 = inttoptr i32 %v1_1000d3f9 to i32*
  %v3_1000d3f9 = load i32, i32* %v2_1000d3f9, align 4
  %v5_1000d3f9 = or i32 %v3_1000d3f9, %arg1
  store i32 %v5_1000d3f9, i32* %v2_1000d3f9, align 4
  %v0_1000d3fd = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d3fd
}

define i32 @function_1000d400() {
dec_label_pc_1000d400:
  %v0_1000d400 = load i32, i32* @ecx, align 4
  %v1_1000d400 = add i32 %v0_1000d400, 28
  %v2_1000d400 = inttoptr i32 %v1_1000d400 to i32*
  %v3_1000d400 = load i32, i32* %v2_1000d400, align 4
  %v1_1000d403 = add i32 %v3_1000d400, 8
  %v2_1000d403 = inttoptr i32 %v1_1000d403 to i8*
  %v3_1000d403 = load i8, i8* %v2_1000d403, align 1
  %v4_1000d403 = zext i8 %v3_1000d403 to i32
  %v6_1000d403 = and i32 %v3_1000d400, -256
  %v7_1000d403 = or i32 %v4_1000d403, %v6_1000d403
  ret i32 %v7_1000d403
}

define i32 @function_1000d410() {
dec_label_pc_1000d410:
  %v0_1000d410 = load i32, i32* @ecx, align 4
  %v1_1000d410 = add i32 %v0_1000d410, 28
  %v2_1000d410 = inttoptr i32 %v1_1000d410 to i32*
  %v3_1000d410 = load i32, i32* %v2_1000d410, align 4
  %v1_1000d413 = add i32 %v3_1000d410, 12
  %v2_1000d413 = inttoptr i32 %v1_1000d413 to i32*
  %v3_1000d413 = load i32, i32* %v2_1000d413, align 4
  ret i32 %v3_1000d413
}

define i32 @function_1000d420() {
dec_label_pc_1000d420:
  %v0_1000d420 = load i32, i32* @ecx, align 4
  %v1_1000d420 = add i32 %v0_1000d420, 4
  %v2_1000d420 = inttoptr i32 %v1_1000d420 to i32*
  %v3_1000d420 = load i32, i32* %v2_1000d420, align 4
  %v1_1000d423 = add i32 %v3_1000d420, 12
  %v2_1000d423 = inttoptr i32 %v1_1000d423 to i32*
  %v3_1000d423 = load i32, i32* %v2_1000d423, align 4
  ret i32 %v3_1000d423
}

define i32 @__wcsdup() {
dec_label_pc_1000d430:
  ret i32 0
}

define i32 @function_1000d440() {
dec_label_pc_1000d440:
  %eax.global-to-local = alloca i32, align 4
  %v11_1000d440 = load i32, i32* %eax.global-to-local, align 4
  %v12_1000d440 = and i32 %v11_1000d440, -256
  store i32 %v12_1000d440, i32* %eax.global-to-local, align 4
  ret i32 %v12_1000d440
}

define i32 @function_1000d450() {
dec_label_pc_1000d450:
  %v0_1000d450 = load i32, i32* @global_var_1002d344.461, align 4
  %v1_1000d455 = icmp eq i32 %v0_1000d450, 0
  br i1 %v1_1000d455, label %dec_label_pc_1000d462, label %dec_label_pc_1000d459

dec_label_pc_1000d459:                            ; preds = %dec_label_pc_1000d450
  %v1_1000d459 = inttoptr i32 %v0_1000d450 to i32*
  %v2_1000d459 = load i32, i32* %v1_1000d459, align 4
  store i32 %v0_1000d450, i32* @ecx, align 4
  %v1_1000d45e = inttoptr i32 %v2_1000d459 to i32*
  %v2_1000d45e = load i32, i32* %v1_1000d45e, align 4
  br label %dec_label_pc_1000d462

dec_label_pc_1000d462:                            ; preds = %dec_label_pc_1000d459, %dec_label_pc_1000d450
  %v0_1000d462 = phi i32 [ %v2_1000d45e, %dec_label_pc_1000d459 ], [ 0, %dec_label_pc_1000d450 ]
  ret i32 %v0_1000d462
}

define i32 @function_1000d470(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d470:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i8, align 1
  %stack_var_-8 = alloca i8, align 1
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-20 = alloca i8, align 1
  %v15_1000d473 = ptrtoint i8* %stack_var_-20 to i32
  %v0_1000d476 = load i32, i32* @ebx, align 4
  %v0_1000d477 = load i32, i32* @esi, align 4
  store i32 %v0_1000d477, i32* %stack_var_-28, align 4
  %v0_1000d478 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d478, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v2_1000d485 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_1000d485, i32* %edx.global-to-local, align 4
  store i32 %v15_1000d473, i32* %eax.global-to-local, align 4
  %v12_1000d493 = and i32 %v0_1000d476, -256
  store i32 %v12_1000d493, i32* %ebx.global-to-local, align 4
  %v1_1000d495 = inttoptr i32 %arg1 to i8*
  %v13_1000d495 = call i32 (i8*, i8*, ...) @_sscanf(i8* %v1_1000d495, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10023fa4.464, i32 0, i32 0), i8* nonnull %stack_var_-20, i32* nonnull %stack_var_-16, i8* nonnull %stack_var_-12, i8* nonnull %stack_var_-8)
  store i32 %v13_1000d495, i32* %eax.global-to-local, align 4
  %v5_1000d4a0 = icmp slt i32 %v13_1000d495, 3
  br i1 %v5_1000d4a0, label %dec_label_pc_1000d503, label %dec_label_pc_1000d4a2

dec_label_pc_1000d4a2:                            ; preds = %dec_label_pc_1000d470
  %v10_1000d49d = icmp eq i32 %v13_1000d495, 3
  store i32 255, i32* %edx.global-to-local, align 4
  br i1 %v10_1000d49d, label %dec_label_pc_1000d4ac, label %dec_label_pc_1000d4a9

dec_label_pc_1000d4a9:                            ; preds = %dec_label_pc_1000d4a2
  %v3_1000d4a9 = load i8, i8* %stack_var_-8, align 1
  %v4_1000d4a9 = sext i8 %v3_1000d4a9 to i32
  store i32 %v4_1000d4a9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000d4ac

dec_label_pc_1000d4ac:                            ; preds = %dec_label_pc_1000d4a9, %dec_label_pc_1000d4a2
  %v0_1000d4cb = phi i32 [ %v4_1000d4a9, %dec_label_pc_1000d4a9 ], [ 255, %dec_label_pc_1000d4a2 ]
  %v3_1000d4ac = load i8, i8* %stack_var_-20, align 1
  %v4_1000d4ac = sext i8 %v3_1000d4ac to i32
  store i32 %v4_1000d4ac, i32* %ebx.global-to-local, align 4
  %v5_1000d4af6 = icmp sgt i8 %v3_1000d4ac, -1
  br i1 %v5_1000d4af6, label %dec_label_pc_1000d4b7, label %dec_label_pc_1000d4f9

dec_label_pc_1000d4b7:                            ; preds = %dec_label_pc_1000d4ac
  %v3_1000d4b7 = load i32, i32* %stack_var_-16, align 4
  %tmp37 = icmp ult i32 %v3_1000d4b7, 256
  br i1 %tmp37, label %dec_label_pc_1000d4c0, label %dec_label_pc_1000d4f9

dec_label_pc_1000d4c0:                            ; preds = %dec_label_pc_1000d4b7
  %v3_1000d4c0 = load i8, i8* %stack_var_-12, align 1
  %v4_1000d4c0 = sext i8 %v3_1000d4c0 to i32
  store i32 %v4_1000d4c0, i32* @ecx, align 4
  %v5_1000d4c37 = icmp sgt i8 %v3_1000d4c0, -1
  br i1 %v5_1000d4c37, label %dec_label_pc_1000d4cb, label %dec_label_pc_1000d4f9

dec_label_pc_1000d4cb:                            ; preds = %dec_label_pc_1000d4c0
  %tmp38 = icmp ult i32 %v0_1000d4cb, 256
  br i1 %tmp38, label %dec_label_pc_1000d4d3, label %dec_label_pc_1000d4f9

dec_label_pc_1000d4d3:                            ; preds = %dec_label_pc_1000d4cb
  %v2_1000d4d3 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000d4d3 = add i32 %v2_1000d4d3, 48
  %v4_1000d4d3 = inttoptr i32 %v3_1000d4d3 to i8*
  store i8 %v3_1000d4ac, i8* %v4_1000d4d3, align 1
  %v3_1000d4d6 = load i32, i32* %stack_var_-16, align 4
  %v4_1000d4d6 = and i32 %v3_1000d4d6, 255
  %v5_1000d4d6 = load i32, i32* %ebx.global-to-local, align 4
  %v6_1000d4d6 = and i32 %v5_1000d4d6, -256
  %v7_1000d4d6 = or i32 %v6_1000d4d6, %v4_1000d4d6
  store i32 %v7_1000d4d6, i32* %ebx.global-to-local, align 4
  %v1_1000d4d9 = trunc i32 %v3_1000d4d6 to i8
  %v2_1000d4d9 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000d4d9 = add i32 %v2_1000d4d9, 49
  %v4_1000d4d9 = inttoptr i32 %v3_1000d4d9 to i8*
  store i8 %v1_1000d4d9, i8* %v4_1000d4d9, align 1
  %v0_1000d4dc = load i32, i32* @ecx, align 4
  %v1_1000d4dc = trunc i32 %v0_1000d4dc to i8
  %v2_1000d4dc = load i32, i32* %esi.global-to-local, align 4
  %v3_1000d4dc = add i32 %v2_1000d4dc, 50
  %v4_1000d4dc = inttoptr i32 %v3_1000d4dc to i8*
  store i8 %v1_1000d4dc, i8* %v4_1000d4dc, align 1
  %v0_1000d4df = load i32, i32* %edx.global-to-local, align 4
  %v1_1000d4df = trunc i32 %v0_1000d4df to i8
  %v2_1000d4df = load i32, i32* %esi.global-to-local, align 4
  %v3_1000d4df = add i32 %v2_1000d4df, 51
  %v4_1000d4df = inttoptr i32 %v3_1000d4df to i8*
  store i8 %v1_1000d4df, i8* %v4_1000d4df, align 1
  %v0_1000d4e2 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000d4e2 = add i32 %v0_1000d4e2, 48
  %v2_1000d4e2 = inttoptr i32 %v1_1000d4e2 to i32*
  %v3_1000d4e2 = load i32, i32* %v2_1000d4e2, align 4
  %v4_1000d4e2 = call i128 @__asm_movd(i32 %v3_1000d4e2)
  %v1_1000d4e7 = call i128 @__asm_cvtdq2ps(i128 %v4_1000d4e2)
  %v1_1000d4ea = call i32 @__asm_movss(i128 %v1_1000d4e7)
  %v2_1000d4ea = load i32, i32* %esi.global-to-local, align 4
  %v3_1000d4ea = add i32 %v2_1000d4ea, 44
  %v4_1000d4ea = inttoptr i32 %v3_1000d4ea to i32*
  store i32 %v1_1000d4ea, i32* %v4_1000d4ea, align 4
  %v2_1000d4ef = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1000d4ef, i32* @esi, align 4
  %v0_1000d4f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d4f0 = and i32 %v0_1000d4f0, -256
  %v2_1000d4f0 = or i32 %v1_1000d4f0, 1
  store i32 %v2_1000d4f0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000d476, i32* @ebx, align 4
  ret i32 %v2_1000d4f0

dec_label_pc_1000d4f9:                            ; preds = %dec_label_pc_1000d4cb, %dec_label_pc_1000d4c0, %dec_label_pc_1000d4b7, %dec_label_pc_1000d4ac
  %v2_1000d4f9 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1000d4f9, i32* @esi, align 4
  %v12_1000d4fa = and i32 %v13_1000d495, -256
  store i32 %v12_1000d4fa, i32* %eax.global-to-local, align 4
  store i32 %v0_1000d476, i32* @ebx, align 4
  ret i32 %v12_1000d4fa

dec_label_pc_1000d503:                            ; preds = %dec_label_pc_1000d470
  %v2_1000d503 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1000d503, i32* @esi, align 4
  %v0_1000d504 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000d504 = and i32 %v0_1000d504, 255
  %v3_1000d504 = and i32 %v13_1000d495, -256
  %v4_1000d504 = or i32 %v1_1000d504, %v3_1000d504
  store i32 %v4_1000d504, i32* %eax.global-to-local, align 4
  store i32 %v0_1000d476, i32* @ebx, align 4
  ret i32 %v4_1000d504
}

define i32 @function_1000d510(i32 %arg1) {
dec_label_pc_1000d510:
  %eax.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st7.global-to-local = alloca x86_fp80, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-44 = alloca i32, align 4
  %v16_1000d513 = ptrtoint i32* %stack_var_-44 to i32
  %v0_1000d517 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d517, i32* @esi, align 4
  store i32 %v0_1000d517, i32* %eax.global-to-local, align 4
  %v4_1000d525 = trunc i32 %v0_1000d517 to i8
  %v5_1000d525 = icmp eq i8 %v4_1000d525, 0
  br i1 %v5_1000d525, label %dec_label_pc_1000d55d, label %dec_label_pc_1000d529

dec_label_pc_1000d529:                            ; preds = %dec_label_pc_1000d510
  %v0_1000d529 = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000d529, i32* @ecx, align 4
  %v1_1000d52f = icmp eq i32 %v0_1000d529, 0
  br i1 %v1_1000d52f, label %dec_label_pc_1000d55d, label %dec_label_pc_1000d533

dec_label_pc_1000d533:                            ; preds = %dec_label_pc_1000d529
  %v1_1000d533 = inttoptr i32 %v0_1000d529 to i32*
  %v2_1000d533 = load i32, i32* %v1_1000d533, align 4
  store i32 %v2_1000d533, i32* %eax.global-to-local, align 4
  %v4_1000d53d = trunc i32 %v2_1000d533 to i8
  %v5_1000d53d = icmp eq i8 %v4_1000d53d, 0
  %v1_1000d53f = icmp eq i1 %v5_1000d53d, false
  br i1 %v1_1000d53f, label %dec_label_pc_1000d55d, label %dec_label_pc_1000d541

dec_label_pc_1000d541:                            ; preds = %dec_label_pc_1000d533
  store i32 %v0_1000d529, i32* @ecx, align 4
  %v2_1000d54a = load i32, i32* %v1_1000d533, align 4
  store i32 %v2_1000d54a, i32* %eax.global-to-local, align 4
  %v1_1000d54c = add i32 %v2_1000d54a, 152
  %v2_1000d54c = inttoptr i32 %v1_1000d54c to i32*
  %v3_1000d54c = load i32, i32* %v2_1000d54c, align 4
  store i32 %v3_1000d54c, i32* %eax.global-to-local, align 4
  ret i32 %v3_1000d54c

dec_label_pc_1000d55d:                            ; preds = %dec_label_pc_1000d533, %dec_label_pc_1000d529, %dec_label_pc_1000d510
  %v1_1000d55d = add i32 %v0_1000d517, 44
  %v2_1000d55d = inttoptr i32 %v1_1000d55d to i32*
  %v3_1000d55d = load i32, i32* %v2_1000d55d, align 4
  %v4_1000d55d = call i128 @__asm_movss.11(i32 %v3_1000d55d)
  store i32 %arg1, i32* @edi, align 4
  %v1_1000d567 = call i32 @__asm_movss(i128 %v4_1000d55d)
  %v1_1000d56e = icmp eq i32 %arg1, 0
  %v1_1000d570 = icmp eq i1 %v1_1000d56e, false
  br i1 %v1_1000d570, label %dec_label_pc_1000d577, label %dec_label_pc_1000d572

dec_label_pc_1000d572:                            ; preds = %dec_label_pc_1000d55d
  br label %dec_label_pc_1000d577

dec_label_pc_1000d577:                            ; preds = %dec_label_pc_1000d572, %dec_label_pc_1000d55d
  %storemerge = phi i32 [ ptrtoint (i32* @global_var_10022600.47 to i32), %dec_label_pc_1000d572 ], [ %arg1, %dec_label_pc_1000d55d ]
  store i32 %storemerge, i32* @ebx, align 4
  %v0_1000d578 = load i32, i32* @esi, align 4
  store i32 %v0_1000d578, i32* @ecx, align 4
  %v1_1000d57a = call i32 @function_1000d470(i32 %arg1)
  store i32 %v1_1000d57a, i32* %eax.global-to-local, align 4
  %v4_1000d57f = trunc i32 %v1_1000d57a to i8
  %v5_1000d57f = icmp eq i8 %v4_1000d57f, 0
  %v1_1000d581 = icmp eq i1 %v5_1000d57f, false
  br i1 %v1_1000d581, label %dec_label_pc_1000d615, label %dec_label_pc_1000d587

dec_label_pc_1000d587:                            ; preds = %dec_label_pc_1000d577
  %v1_1000d588 = call i32 @function_10012dd7(i32 %arg1)
  store i32 %v1_1000d588, i32* %eax.global-to-local, align 4
  %v1_1000d58d = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v4_1000d58d = fptrunc x86_fp80 %v1_1000d58d to float
  %v6_1000d58d = bitcast float %v4_1000d58d to i32
  store i32 %v6_1000d58d, i32* %stack_var_4, align 4
  %v0_1000d590 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_1000d590 = add i3 %v0_1000d590, 1
  store i3 %v6_1000d590, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_1000d599 = and i32 %v6_1000d58d, 2139095040
  store i32 %v1_1000d599, i32* @ecx, align 4
  %v9_1000d59f = icmp eq i32 %v1_1000d599, 2139095040
  %v1_1000d5a5 = icmp eq i1 %v9_1000d59f, false
  br i1 %v1_1000d5a5, label %dec_label_pc_1000d5cd, label %dec_label_pc_1000d5a7

dec_label_pc_1000d5a7:                            ; preds = %dec_label_pc_1000d587
  %v1_1000d5a9 = or i32 %v1_1000d599, 24
  %v2_1000d5a9 = inttoptr i32 %v1_1000d5a9 to i32*
  %v3_1000d5a9 = load i32, i32* %v2_1000d5a9, align 8
  store i32 %v3_1000d5a9, i32* %eax.global-to-local, align 4
  %v0_1000d5ad = load i32, i32* @esi, align 4
  store i32 %v0_1000d5ad, i32* @ecx, align 4
  %v0_1000d5b7 = call i32 @Warning()
  store i32 %v0_1000d5b7, i32* %eax.global-to-local, align 4
  %v1_1000d5bd = call i128 @__asm_movss.11(i32 2139095039)
  %v1_1000d5c8 = call i32 @__asm_movss(i128 %v1_1000d5bd)
  store i32 %v1_1000d5c8, i32* %stack_var_4, align 4
  br label %dec_label_pc_1000d5cd

dec_label_pc_1000d5cd:                            ; preds = %dec_label_pc_1000d5a7, %dec_label_pc_1000d587
  %v3_1000d5de = phi i32 [ %v1_1000d5c8, %dec_label_pc_1000d5a7 ], [ %v6_1000d58d, %dec_label_pc_1000d587 ]
  %v2_1000d5d2 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_1000d5d2, i32* %eax.global-to-local, align 4
  %v0_1000d5d6 = load i32, i32* @esi, align 4
  store i32 %v0_1000d5d6, i32* @ecx, align 4
  %v4_1000d5da = trunc i32 %v2_1000d5d2 to i8
  %v5_1000d5da = icmp eq i8 %v4_1000d5da, 0
  br i1 %v5_1000d5da, label %dec_label_pc_1000d604, label %dec_label_pc_1000d5de

dec_label_pc_1000d5de:                            ; preds = %dec_label_pc_1000d5cd
  %v4_1000d5de = call i128 @__asm_movss.11(i32 %v3_1000d5de)
  %v1_1000d5e6 = call i128 @__asm_cvtps2pd(i128 %v4_1000d5de)
  %v1_1000d5e9 = call i32 @__asm_movsd(i128 %v1_1000d5e6)
  store i32 %v16_1000d513, i32* %eax.global-to-local, align 4
  %v6_1000d5f9 = call i32 @function_10009a90(i32* nonnull %stack_var_-44, i32 32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10023bf0.420, i32 0, i32 0))
  store i32 %v6_1000d5f9, i32* %eax.global-to-local, align 4
  store i32 %v16_1000d513, i32* @ebx, align 4
  %v3_1000d604.pre = load i32, i32* %stack_var_4, align 4
  br label %dec_label_pc_1000d604

dec_label_pc_1000d604:                            ; preds = %dec_label_pc_1000d5de, %dec_label_pc_1000d5cd
  %v3_1000d604 = phi i32 [ %v3_1000d604.pre, %dec_label_pc_1000d5de ], [ %v3_1000d5de, %dec_label_pc_1000d5cd ]
  %v4_1000d604 = call i128 @__asm_movss.11(i32 %v3_1000d604)
  %v1_1000d609 = call i32 @__asm_cvttss2si.12(i128 %v4_1000d604)
  store i32 %v1_1000d609, i32* @ecx, align 4
  %v1_1000d60d = call i32 @__asm_movss(i128 %v4_1000d604)
  %v2_1000d60d = load i32, i32* @esi, align 4
  %v3_1000d60d = add i32 %v2_1000d60d, 44
  %v4_1000d60d = inttoptr i32 %v3_1000d60d to i32*
  store i32 %v1_1000d60d, i32* %v4_1000d60d, align 4
  %v0_1000d612 = load i32, i32* @ecx, align 4
  %v1_1000d612 = load i32, i32* @esi, align 4
  %v2_1000d612 = add i32 %v1_1000d612, 48
  %v3_1000d612 = inttoptr i32 %v2_1000d612 to i32*
  store i32 %v0_1000d612, i32* %v3_1000d612, align 4
  br label %dec_label_pc_1000d615

dec_label_pc_1000d615:                            ; preds = %dec_label_pc_1000d604, %dec_label_pc_1000d577
  %v0_1000d615 = load i32, i32* @esi, align 4
  %v1_1000d615 = add i32 %v0_1000d615, 20
  %v2_1000d615 = inttoptr i32 %v1_1000d615 to i32*
  %v3_1000d615 = load i32, i32* %v2_1000d615, align 4
  %v4_1000d615 = and i32 %v3_1000d615, 4096
  %v5_1000d615 = icmp eq i32 %v4_1000d615, 0
  %v1_1000d61c = icmp eq i1 %v5_1000d615, false
  br i1 %v1_1000d61c, label %dec_label_pc_1000d615.dec_label_pc_1000d633_crit_edge, label %dec_label_pc_1000d61e

dec_label_pc_1000d615.dec_label_pc_1000d633_crit_edge: ; preds = %dec_label_pc_1000d615
  br label %dec_label_pc_1000d633

dec_label_pc_1000d61e:                            ; preds = %dec_label_pc_1000d615
  %v2_1000d61e = load i32, i32* @ecx, align 4
  %v4_1000d620 = call i128 @__asm_movss.11(i32 %v1_1000d567)
  %v1_1000d625 = add i32 %v2_1000d61e, 68
  %v2_1000d625 = inttoptr i32 %v1_1000d625 to i32*
  %v3_1000d625 = load i32, i32* %v2_1000d625, align 4
  store i32 %v3_1000d625, i32* %eax.global-to-local, align 4
  %v0_1000d628 = load i32, i32* @ecx, align 4
  %v1_1000d628 = load i32, i32* @esp, align 4
  %v2_1000d628 = add i32 %v1_1000d628, -4
  %v3_1000d628 = inttoptr i32 %v2_1000d628 to i32*
  store i32 %v0_1000d628, i32* %v3_1000d628, align 4
  %v1_1000d629 = call i32 @__asm_movss(i128 %v4_1000d620)
  %v2_1000d629 = load i32, i32* @esp, align 4
  %v3_1000d629 = inttoptr i32 %v2_1000d629 to i32*
  store i32 %v1_1000d629, i32* %v3_1000d629, align 4
  %v0_1000d62e = load i32, i32* @ebx, align 4
  %v1_1000d62e = load i32, i32* @esp, align 4
  %v2_1000d62e = add i32 %v1_1000d62e, -4
  %v3_1000d62e = inttoptr i32 %v2_1000d62e to i32*
  store i32 %v0_1000d62e, i32* %v3_1000d62e, align 4
  %v0_1000d62f = load i32, i32* @esi, align 4
  store i32 %v0_1000d62f, i32* @ecx, align 4
  br label %dec_label_pc_1000d633

dec_label_pc_1000d633:                            ; preds = %dec_label_pc_1000d615.dec_label_pc_1000d633_crit_edge, %dec_label_pc_1000d61e
  %v0_1000d639 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d639
}

define i32 @function_1000d640(i32 %arg1) {
dec_label_pc_1000d640:
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  %v0_1000d643 = load i32, i32* @ecx, align 4
  %v1_1000d643 = add i32 %v0_1000d643, 52
  %v2_1000d643 = inttoptr i32 %v1_1000d643 to i8*
  %v3_1000d643 = load i8, i8* %v2_1000d643, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v10_1000d643 = icmp eq i8 %v3_1000d643, 0
  store i1 %v10_1000d643, i1* %zf.global-to-local, align 1
  store i32 %arg1, i32* %eax.global-to-local, align 4
  br i1 %v10_1000d643, label %dec_label_pc_1000d660, label %dec_label_pc_1000d64c

dec_label_pc_1000d64c:                            ; preds = %dec_label_pc_1000d640
  %v1_1000d64c = add i32 %v0_1000d643, 56
  %v2_1000d64c = inttoptr i32 %v1_1000d64c to i32*
  %v3_1000d64c = load i32, i32* %v2_1000d64c, align 4
  %v4_1000d64c = call i128 @__asm_movss.11(i32 %v3_1000d64c)
  store i128 %v4_1000d64c, i128* %xmm0.global-to-local, align 8
  %v1_1000d651 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000d651 = inttoptr i32 %v1_1000d651 to i128*
  %v3_1000d651 = load i128, i128* %v2_1000d651, align 4
  call void @__asm_comiss(i128 %v4_1000d64c, i128 %v3_1000d651)
  %v0_1000d654 = load i1, i1* %cf.global-to-local, align 1
  %v1_1000d654 = load i1, i1* %zf.global-to-local, align 1
  %v2_1000d654 = or i1 %v0_1000d654, %v1_1000d654
  br i1 %v2_1000d654, label %dec_label_pc_1000d64c.dec_label_pc_1000d660_crit_edge, label %dec_label_pc_1000d656

dec_label_pc_1000d64c.dec_label_pc_1000d660_crit_edge: ; preds = %dec_label_pc_1000d64c
  %v0_1000d660.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000d660

dec_label_pc_1000d656:                            ; preds = %dec_label_pc_1000d666, %dec_label_pc_1000d64c
  %v0_1000d656 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_1000d656 = call i32 @__asm_movss(i128 %v0_1000d656)
  %v2_1000d656 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000d656 = inttoptr i32 %v2_1000d656 to i32*
  store i32 %v1_1000d656, i32* %v3_1000d656, align 4
  %v0_1000d65a = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d65a = and i32 %v0_1000d65a, -256
  %v2_1000d65a = or i32 %v1_1000d65a, 1
  store i32 %v2_1000d65a, i32* %eax.global-to-local, align 4
  ret i32 %v2_1000d65a

dec_label_pc_1000d660:                            ; preds = %dec_label_pc_1000d64c.dec_label_pc_1000d660_crit_edge, %dec_label_pc_1000d640
  %v0_1000d666 = phi i32 [ %v0_1000d660.pre, %dec_label_pc_1000d64c.dec_label_pc_1000d660_crit_edge ], [ %v0_1000d643, %dec_label_pc_1000d640 ]
  %v1_1000d660 = add i32 %v0_1000d666, 60
  %v2_1000d660 = inttoptr i32 %v1_1000d660 to i8*
  %v3_1000d660 = load i8, i8* %v2_1000d660, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v10_1000d660 = icmp eq i8 %v3_1000d660, 0
  store i1 %v10_1000d660, i1* %zf.global-to-local, align 1
  br i1 %v10_1000d660, label %dec_label_pc_1000d674, label %dec_label_pc_1000d666

dec_label_pc_1000d666:                            ; preds = %dec_label_pc_1000d660
  %v1_1000d666 = add i32 %v0_1000d666, 64
  %v2_1000d666 = inttoptr i32 %v1_1000d666 to i32*
  %v3_1000d666 = load i32, i32* %v2_1000d666, align 4
  %v4_1000d666 = call i128 @__asm_movss.11(i32 %v3_1000d666)
  store i128 %v4_1000d666, i128* %xmm0.global-to-local, align 8
  %v0_1000d66b = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d66b = inttoptr i32 %v0_1000d66b to i32*
  %v2_1000d66b = load i32, i32* %v1_1000d66b, align 4
  %v3_1000d66b = call i128 @__asm_movss.11(i32 %v2_1000d66b)
  call void @__asm_comiss(i128 %v3_1000d66b, i128 %v4_1000d666)
  %v0_1000d672 = load i1, i1* %cf.global-to-local, align 1
  %v1_1000d672 = load i1, i1* %zf.global-to-local, align 1
  %v2_1000d672 = or i1 %v0_1000d672, %v1_1000d672
  br i1 %v2_1000d672, label %dec_label_pc_1000d674, label %dec_label_pc_1000d656

dec_label_pc_1000d674:                            ; preds = %dec_label_pc_1000d666, %dec_label_pc_1000d660
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  %v11_1000d674 = load i32, i32* %eax.global-to-local, align 4
  %v12_1000d674 = and i32 %v11_1000d674, -256
  store i32 %v12_1000d674, i32* %eax.global-to-local, align 4
  ret i32 %v12_1000d674
}

define i32 @function_1000d680(i32 %arg1) {
dec_label_pc_1000d680:
  %az.global-to-local = alloca i1, align 1
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %pf.global-to-local = alloca i1, align 1
  %sf.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %tmp236 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %v4_1000d683 = call i128 @__asm_movss.11(i32 %arg1)
  %v0_1000d688 = load i32, i32* @esp, align 4
  %v1_1000d688 = add i32 %v0_1000d688, -36
  %v2_1000d688 = and i32 %v0_1000d688, 15
  %v3_1000d688 = add nsw i32 %v2_1000d688, -4
  %v4_1000d688 = icmp ugt i32 %v3_1000d688, 15
  %v5_1000d688 = icmp ult i32 %v0_1000d688, 36
  store i1 %v4_1000d688, i1* %az.global-to-local, align 1
  store i1 %v5_1000d688, i1* %cf.global-to-local, align 1
  %v10_1000d688 = icmp eq i32 %v1_1000d688, 0
  store i1 %v10_1000d688, i1* %zf.global-to-local, align 1
  %v11_1000d688 = icmp slt i32 %v1_1000d688, 0
  store i1 %v11_1000d688, i1* %sf.global-to-local, align 1
  %v12_1000d688 = trunc i32 %v1_1000d688 to i8
  %v13_1000d688 = call i8 @llvm.ctpop.i8(i8 %v12_1000d688)
  %v14_1000d688 = and i8 %v13_1000d688, 1
  %v15_1000d688 = icmp eq i8 %v14_1000d688, 0
  store i1 %v15_1000d688, i1* %pf.global-to-local, align 1
  %v16_1000d688 = ptrtoint i32* %stack_var_-40 to i32
  %v0_1000d68c = load i32, i32* @ecx, align 4
  store i32 %v0_1000d68c, i32* @esi, align 4
  %v2_1000d68e = add i32 %v0_1000d68c, 44
  %v3_1000d68e = inttoptr i32 %v2_1000d68e to i32*
  %v4_1000d68e = load i32, i32* %v3_1000d68e, align 4
  call void @__asm_ucomiss(i128 %v4_1000d683, i32 %v4_1000d68e)
  %v0_1000d692 = load i1, i1* %cf.global-to-local, align 1
  %v1_1000d692 = zext i1 %v0_1000d692 to i32
  %v2_1000d692 = load i1, i1* %pf.global-to-local, align 1
  %v4_1000d692 = load i1, i1* %az.global-to-local, align 1
  %v6_1000d692 = load i1, i1* %zf.global-to-local, align 1
  %v8_1000d692 = load i1, i1* %sf.global-to-local, align 1
  %v12_1000d692 = select i1 %v2_1000d692, i32 4, i32 0
  %v11_1000d692 = or i32 %v12_1000d692, %v1_1000d692
  %v14_1000d692 = select i1 %v4_1000d692, i32 16, i32 0
  %v13_1000d692 = or i32 %v11_1000d692, %v14_1000d692
  %v16_1000d692 = select i1 %v6_1000d692, i32 64, i32 0
  %v15_1000d692 = or i32 %v13_1000d692, %v16_1000d692
  %v18_1000d692 = select i1 %v8_1000d692, i32 128, i32 0
  %v17_1000d692 = or i32 %v15_1000d692, %v18_1000d692
  %v21_1000d692 = load i32, i32* %eax.global-to-local, align 4
  %v20_1000d692 = mul nuw nsw i32 %v17_1000d692, 256
  %v23_1000d692 = and i32 %v21_1000d692, -65281
  %v22_1000d692 = or i32 %v23_1000d692, %v20_1000d692
  %v24_1000d692 = or i32 %v22_1000d692, 512
  store i32 %v24_1000d692, i32* %eax.global-to-local, align 4
  %v2_1000d693 = trunc i32 %v15_1000d692 to i8
  %v3_1000d693 = and i8 %v2_1000d693, 68
  store i1 false, i1* %az.global-to-local, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_1000d693 = icmp eq i8 %v3_1000d693, 0
  store i1 %v4_1000d693, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  %v6_1000d693 = call i8 @llvm.ctpop.i8(i8 %v3_1000d693)
  %v7_1000d693 = and i8 %v6_1000d693, 1
  %v8_1000d693 = icmp eq i8 %v7_1000d693, 0
  store i1 %v8_1000d693, i1* %pf.global-to-local, align 1
  %v1_1000d696 = icmp eq i1 %v8_1000d693, false
  br i1 %v1_1000d696, label %dec_label_pc_1000d74d, label %dec_label_pc_1000d69c

dec_label_pc_1000d69c:                            ; preds = %dec_label_pc_1000d680
  %v2_1000d69c = load i32, i32* @ecx, align 4
  store i32 %v2_1000d69c, i32* %eax.global-to-local, align 4
  %v4_1000d6a8 = trunc i32 %v2_1000d69c to i8
  store i1 false, i1* %az.global-to-local, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_1000d6a8 = icmp eq i8 %v4_1000d6a8, 0
  store i1 %v5_1000d6a8, i1* %zf.global-to-local, align 1
  %v6_1000d6a8 = icmp slt i8 %v4_1000d6a8, 0
  store i1 %v6_1000d6a8, i1* %sf.global-to-local, align 1
  %v7_1000d6a8 = call i8 @llvm.ctpop.i8(i8 %v4_1000d6a8)
  %v8_1000d6a8 = and i8 %v7_1000d6a8, 1
  %v9_1000d6a8 = icmp eq i8 %v8_1000d6a8, 0
  store i1 %v9_1000d6a8, i1* %pf.global-to-local, align 1
  br i1 %v5_1000d6a8, label %dec_label_pc_1000d6e7, label %dec_label_pc_1000d6ac

dec_label_pc_1000d6ac:                            ; preds = %dec_label_pc_1000d69c
  %v0_1000d6ac = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000d6ac, i32* @ecx, align 4
  store i1 false, i1* %az.global-to-local, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_1000d6b2 = icmp eq i32 %v0_1000d6ac, 0
  store i1 %v1_1000d6b2, i1* %zf.global-to-local, align 1
  %v2_1000d6b2 = icmp slt i32 %v0_1000d6ac, 0
  store i1 %v2_1000d6b2, i1* %sf.global-to-local, align 1
  %v3_1000d6b2 = trunc i32 %v0_1000d6ac to i8
  %v4_1000d6b2 = call i8 @llvm.ctpop.i8(i8 %v3_1000d6b2)
  %v5_1000d6b2 = and i8 %v4_1000d6b2, 1
  %v6_1000d6b2 = icmp eq i8 %v5_1000d6b2, 0
  store i1 %v6_1000d6b2, i1* %pf.global-to-local, align 1
  br i1 %v1_1000d6b2, label %dec_label_pc_1000d6e7, label %dec_label_pc_1000d6b6

dec_label_pc_1000d6b6:                            ; preds = %dec_label_pc_1000d6ac
  %v1_1000d6b6 = inttoptr i32 %v0_1000d6ac to i32*
  %v2_1000d6b6 = load i32, i32* %v1_1000d6b6, align 4
  store i32 %v2_1000d6b6, i32* %eax.global-to-local, align 4
  %v4_1000d6c0 = trunc i32 %v2_1000d6b6 to i8
  store i1 false, i1* %az.global-to-local, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_1000d6c0 = icmp eq i8 %v4_1000d6c0, 0
  store i1 %v5_1000d6c0, i1* %zf.global-to-local, align 1
  %v6_1000d6c0 = icmp slt i8 %v4_1000d6c0, 0
  store i1 %v6_1000d6c0, i1* %sf.global-to-local, align 1
  %v7_1000d6c0 = call i8 @llvm.ctpop.i8(i8 %v4_1000d6c0)
  %v8_1000d6c0 = and i8 %v7_1000d6c0, 1
  %v9_1000d6c0 = icmp eq i8 %v8_1000d6c0, 0
  store i1 %v9_1000d6c0, i1* %pf.global-to-local, align 1
  %v1_1000d6c2 = icmp eq i1 %v5_1000d6c0, false
  br i1 %v1_1000d6c2, label %dec_label_pc_1000d6e7, label %dec_label_pc_1000d6c4

dec_label_pc_1000d6c4:                            ; preds = %dec_label_pc_1000d6b6
  store i32 %v0_1000d6ac, i32* @ecx, align 4
  %v2_1000d6ca = load i32, i32* %v1_1000d6b6, align 4
  store i32 %v2_1000d6ca, i32* %eax.global-to-local, align 4
  %v4_1000d6cc = call i128 @__asm_movss.11(i32 %arg1)
  %v1_1000d6d8 = call i32 @__asm_movss(i128 %v4_1000d6cc)
  ret i32 %v2_1000d6ca

dec_label_pc_1000d6e7:                            ; preds = %dec_label_pc_1000d6b6, %dec_label_pc_1000d6ac, %dec_label_pc_1000d69c
  %.0 = phi i32 [ %tmp236, %dec_label_pc_1000d69c ], [ 0, %dec_label_pc_1000d6ac ], [ %v0_1000d6ac, %dec_label_pc_1000d6b6 ]
  store i32 %.0, i32* %eax.global-to-local, align 4
  %v0_1000d6f0 = load i32, i32* @esi, align 4
  store i32 %v0_1000d6f0, i32* @ecx, align 4
  %v1_1000d6f4 = add i32 %v0_1000d6f0, 20
  %v2_1000d6f4 = inttoptr i32 %v1_1000d6f4 to i32*
  %v3_1000d6f4 = load i32, i32* %v2_1000d6f4, align 4
  %v4_1000d6f4 = and i32 %v3_1000d6f4, 4096
  store i1 false, i1* %az.global-to-local, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_1000d6f4 = icmp eq i32 %v4_1000d6f4, 0
  store i1 %v5_1000d6f4, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  store i1 true, i1* %pf.global-to-local, align 1
  %v1_1000d6fb = add i32 %v0_1000d6f0, 44
  %v2_1000d6fb = inttoptr i32 %v1_1000d6fb to i32*
  %v3_1000d6fb = load i32, i32* %v2_1000d6fb, align 4
  %v4_1000d6fb = call i128 @__asm_movss.11(i32 %v3_1000d6fb)
  %v1_1000d700 = call i32 @__asm_movss(i128 %v4_1000d6fb)
  %v3_1000d705 = load i32, i32* %stack_var_4, align 4
  %v4_1000d705 = call i128 @__asm_movss.11(i32 %v3_1000d705)
  %v1_1000d70a = call i32 @__asm_cvttss2si.12(i128 %v4_1000d705)
  store i32 %v1_1000d70a, i32* %eax.global-to-local, align 4
  %v1_1000d70e = call i32 @__asm_movss(i128 %v4_1000d705)
  %v2_1000d70e = load i32, i32* @esi, align 4
  %v3_1000d70e = add i32 %v2_1000d70e, 44
  %v4_1000d70e = inttoptr i32 %v3_1000d70e to i32*
  store i32 %v1_1000d70e, i32* %v4_1000d70e, align 4
  %v0_1000d713 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000d713 = load i32, i32* @esi, align 4
  %v2_1000d713 = add i32 %v1_1000d713, 48
  %v3_1000d713 = inttoptr i32 %v2_1000d713 to i32*
  store i32 %v0_1000d713, i32* %v3_1000d713, align 4
  %v0_1000d716 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000d716 = icmp eq i1 %v0_1000d716, false
  br i1 %v1_1000d716, label %dec_label_pc_1000d74d, label %dec_label_pc_1000d718

dec_label_pc_1000d718:                            ; preds = %dec_label_pc_1000d6e7
  %v0_1000d718 = load i32, i32* @esp, align 4
  %v1_1000d718 = add i32 %v0_1000d718, -8
  %v2_1000d718 = and i32 %v0_1000d718, 15
  %v3_1000d718 = add nsw i32 %v2_1000d718, -8
  %v4_1000d718 = icmp ugt i32 %v3_1000d718, 15
  %v5_1000d718 = icmp ult i32 %v0_1000d718, 8
  store i1 %v4_1000d718, i1* %az.global-to-local, align 1
  store i1 %v5_1000d718, i1* %cf.global-to-local, align 1
  %v10_1000d718 = icmp eq i32 %v1_1000d718, 0
  store i1 %v10_1000d718, i1* %zf.global-to-local, align 1
  %v11_1000d718 = icmp slt i32 %v1_1000d718, 0
  store i1 %v11_1000d718, i1* %sf.global-to-local, align 1
  %v12_1000d718 = trunc i32 %v1_1000d718 to i8
  %v13_1000d718 = call i8 @llvm.ctpop.i8(i8 %v12_1000d718)
  %v14_1000d718 = and i8 %v13_1000d718, 1
  %v15_1000d718 = icmp eq i8 %v14_1000d718, 0
  store i1 %v15_1000d718, i1* %pf.global-to-local, align 1
  %v1_1000d71b = call i128 @__asm_cvtps2pd(i128 %v4_1000d705)
  %v1_1000d71e = call i32 @__asm_movsd(i128 %v1_1000d71b)
  store i32 %v16_1000d688, i32* @ecx, align 4
  %v6_1000d72e = call i32 @function_10009a90(i32* nonnull %stack_var_-40, i32 32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10023bf0.420, i32 0, i32 0))
  store i32 %v6_1000d72e, i32* %eax.global-to-local, align 4
  %v4_1000d735 = call i128 @__asm_movss.11(i32 %v1_1000d700)
  %v0_1000d73d = load i32, i32* @esp, align 4
  %v1_1000d73d = add i32 %v0_1000d73d, 16
  %v4_1000d73d = icmp ugt i32 %v0_1000d73d, -17
  store i1 false, i1* %az.global-to-local, align 1
  store i1 %v4_1000d73d, i1* %cf.global-to-local, align 1
  %v9_1000d73d = icmp eq i32 %v1_1000d73d, 0
  store i1 %v9_1000d73d, i1* %zf.global-to-local, align 1
  %v10_1000d73d = icmp slt i32 %v1_1000d73d, 0
  store i1 %v10_1000d73d, i1* %sf.global-to-local, align 1
  %v11_1000d73d = trunc i32 %v1_1000d73d to i8
  %v12_1000d73d = call i8 @llvm.ctpop.i8(i8 %v11_1000d73d)
  %v13_1000d73d = and i8 %v12_1000d73d, 1
  %v14_1000d73d = icmp eq i8 %v13_1000d73d, 0
  store i1 %v14_1000d73d, i1* %pf.global-to-local, align 1
  store i32 %v16_1000d688, i32* %eax.global-to-local, align 4
  %v1_1000d743 = call i32 @__asm_movss(i128 %v4_1000d735)
  %v0_1000d749 = load i32, i32* @esi, align 4
  store i32 %v0_1000d749, i32* @ecx, align 4
  br label %dec_label_pc_1000d74d

dec_label_pc_1000d74d:                            ; preds = %dec_label_pc_1000d718, %dec_label_pc_1000d6e7, %dec_label_pc_1000d680
  %v0_1000d751 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d751
}

define i32 @function_1000d760(i32 %arg1) {
dec_label_pc_1000d760:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  %tmp235 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_4, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v16_1000d763 = ptrtoint i32* %stack_var_-40 to i32
  %v0_1000d767 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000d767, i32* %stack_var_-48, align 4
  %v4_1000d767 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %arg1, i32* @edi, align 4
  %v0_1000d76b = load i32, i32* @ecx, align 4
  store i32 %v0_1000d76b, i32* @esi, align 4
  %v2_1000d76d = add i32 %v0_1000d76b, 48
  %v3_1000d76d = inttoptr i32 %v2_1000d76d to i32*
  %v4_1000d76d = load i32, i32* %v3_1000d76d, align 4
  %v15_1000d76d = icmp eq i32 %v4_1000d76d, %arg1
  store i1 %v15_1000d76d, i1* %zf.global-to-local, align 1
  br i1 %v15_1000d76d, label %dec_label_pc_1000d824, label %dec_label_pc_1000d776

dec_label_pc_1000d776:                            ; preds = %dec_label_pc_1000d760
  store i32 %v0_1000d76b, i32* %eax.global-to-local, align 4
  %v4_1000d782 = trunc i32 %v0_1000d76b to i8
  %v5_1000d782 = icmp eq i8 %v4_1000d782, 0
  store i1 %v5_1000d782, i1* %zf.global-to-local, align 1
  br i1 %v5_1000d782, label %dec_label_pc_1000d7b8, label %dec_label_pc_1000d786

dec_label_pc_1000d786:                            ; preds = %dec_label_pc_1000d776
  %v0_1000d786 = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000d786, i32* @ecx, align 4
  %v1_1000d78c = icmp eq i32 %v0_1000d786, 0
  store i1 %v1_1000d78c, i1* %zf.global-to-local, align 1
  br i1 %v1_1000d78c, label %dec_label_pc_1000d7b8, label %dec_label_pc_1000d790

dec_label_pc_1000d790:                            ; preds = %dec_label_pc_1000d786
  %v1_1000d790 = inttoptr i32 %v0_1000d786 to i32*
  %v2_1000d790 = load i32, i32* %v1_1000d790, align 4
  store i32 %v2_1000d790, i32* %eax.global-to-local, align 4
  %v4_1000d79a = trunc i32 %v2_1000d790 to i8
  %v5_1000d79a = icmp eq i8 %v4_1000d79a, 0
  store i1 %v5_1000d79a, i1* %zf.global-to-local, align 1
  %v1_1000d79c = icmp eq i1 %v5_1000d79a, false
  br i1 %v1_1000d79c, label %dec_label_pc_1000d7b8, label %dec_label_pc_1000d79e

dec_label_pc_1000d79e:                            ; preds = %dec_label_pc_1000d790
  store i32 %v0_1000d786, i32* @ecx, align 4
  %v2_1000d7a4 = load i32, i32* %v1_1000d790, align 4
  store i32 %v2_1000d7a4, i32* %eax.global-to-local, align 4
  store i32 %v0_1000d76b, i32* %edi.global-to-local, align 4
  ret i32 %v2_1000d7a4

dec_label_pc_1000d7b8:                            ; preds = %dec_label_pc_1000d790, %dec_label_pc_1000d786, %dec_label_pc_1000d776
  %.0 = phi i32 [ %tmp235, %dec_label_pc_1000d776 ], [ 0, %dec_label_pc_1000d786 ], [ %v0_1000d786, %dec_label_pc_1000d790 ]
  store i32 %.0, i32* %eax.global-to-local, align 4
  %v2_1000d7bd = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_1000d7bd, i32* @ecx, align 4
  %v0_1000d7c0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_1000d7c0 = call i128 @__asm_xorps(i128 %v0_1000d7c0, i128 %v0_1000d7c0)
  store i128 %v2_1000d7c0, i128* %xmm0.global-to-local, align 8
  %v0_1000d7c4 = load i32, i32* @edi, align 4
  %v1_1000d7c4 = call i128 @__asm_cvtsi2ss(i32 %v0_1000d7c4)
  store i128 %v1_1000d7c4, i128* %xmm0.global-to-local, align 8
  %v0_1000d7c8 = load i32, i32* @esi, align 4
  store i32 %v0_1000d7c8, i32* @ecx, align 4
  %v1_1000d7ca = call i32 @__asm_movss(i128 %v1_1000d7c4)
  store i32 %v1_1000d7ca, i32* %stack_var_4, align 4
  %v4_1000d7d1 = call i128 @__asm_movss.11(i32 %v1_1000d7ca)
  store i128 %v4_1000d7d1, i128* %xmm0.global-to-local, align 8
  %v0_1000d7d6 = load i32, i32* %eax.global-to-local, align 4
  %v4_1000d7d6 = trunc i32 %v0_1000d7d6 to i8
  %v5_1000d7d6 = icmp eq i8 %v4_1000d7d6, 0
  store i1 %v5_1000d7d6, i1* %zf.global-to-local, align 1
  br i1 %v5_1000d7d6, label %dec_label_pc_1000d7de, label %dec_label_pc_1000d7da

dec_label_pc_1000d7da:                            ; preds = %dec_label_pc_1000d7b8
  %v1_1000d7da = call i32 @__asm_cvttss2si.12(i128 %v4_1000d7d1)
  store i32 %v1_1000d7da, i32* @edi, align 4
  br label %dec_label_pc_1000d7de

dec_label_pc_1000d7de:                            ; preds = %dec_label_pc_1000d7da, %dec_label_pc_1000d7b8
  %v0_1000d7de = load i32, i32* @esi, align 4
  %v1_1000d7de = add i32 %v0_1000d7de, 20
  %v2_1000d7de = inttoptr i32 %v1_1000d7de to i32*
  %v3_1000d7de = load i32, i32* %v2_1000d7de, align 4
  %v4_1000d7de = and i32 %v3_1000d7de, 4096
  %v5_1000d7de = icmp eq i32 %v4_1000d7de, 0
  store i1 %v5_1000d7de, i1* %zf.global-to-local, align 1
  %v1_1000d7e5 = add i32 %v0_1000d7de, 44
  %v2_1000d7e5 = inttoptr i32 %v1_1000d7e5 to i32*
  %v3_1000d7e5 = load i32, i32* %v2_1000d7e5, align 4
  %v4_1000d7e5 = call i128 @__asm_movss.11(i32 %v3_1000d7e5)
  %v1_1000d7ea = call i32 @__asm_movss(i128 %v4_1000d7e5)
  %v1_1000d7ef = call i32 @__asm_movss(i128 %v4_1000d7d1)
  %v2_1000d7ef = load i32, i32* @esi, align 4
  %v3_1000d7ef = add i32 %v2_1000d7ef, 44
  %v4_1000d7ef = inttoptr i32 %v3_1000d7ef to i32*
  store i32 %v1_1000d7ef, i32* %v4_1000d7ef, align 4
  %v0_1000d7f4 = load i32, i32* @edi, align 4
  %v1_1000d7f4 = load i32, i32* @esi, align 4
  %v2_1000d7f4 = add i32 %v1_1000d7f4, 48
  %v3_1000d7f4 = inttoptr i32 %v2_1000d7f4 to i32*
  store i32 %v0_1000d7f4, i32* %v3_1000d7f4, align 4
  %v0_1000d7f7 = load i1, i1* %zf.global-to-local, align 1
  %v1_1000d7f7 = icmp eq i1 %v0_1000d7f7, false
  br i1 %v1_1000d7f7, label %dec_label_pc_1000d7de.dec_label_pc_1000d824_crit_edge, label %dec_label_pc_1000d7f9

dec_label_pc_1000d7de.dec_label_pc_1000d824_crit_edge: ; preds = %dec_label_pc_1000d7de
  %v0_1000d824.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000d824

dec_label_pc_1000d7f9:                            ; preds = %dec_label_pc_1000d7de
  store i32 ptrtoint ([3 x i8]* @global_var_10022308.65 to i32), i32* %stack_var_-64, align 4
  %v3_1000d7fa = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v16_1000d763, i32* %eax.global-to-local, align 4
  %v5_1000d805 = call i32 @function_10009a90(i32* nonnull %stack_var_-40, i32 32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10022308.65, i32 0, i32 0))
  store i32 %v5_1000d805, i32* %eax.global-to-local, align 4
  %v4_1000d80c = call i128 @__asm_movss.11(i32 %v1_1000d7ea)
  store i128 %v4_1000d80c, i128* %xmm0.global-to-local, align 8
  %v0_1000d814 = load i32, i32* @esp, align 4
  %v10_1000d814 = icmp eq i32 %v0_1000d814, -12
  store i1 %v10_1000d814, i1* %zf.global-to-local, align 1
  store i32 %v16_1000d763, i32* %eax.global-to-local, align 4
  %v1_1000d81a = call i32 @__asm_movss(i128 %v4_1000d80c)
  store i32 %v16_1000d763, i32* %stack_var_-64, align 4
  %v0_1000d820 = load i32, i32* @esi, align 4
  store i32 %v0_1000d820, i32* @ecx, align 4
  br label %dec_label_pc_1000d824

dec_label_pc_1000d824:                            ; preds = %dec_label_pc_1000d7de.dec_label_pc_1000d824_crit_edge, %dec_label_pc_1000d7f9, %dec_label_pc_1000d760
  %v0_1000d824 = phi i32 [ %v0_1000d824.pre, %dec_label_pc_1000d7de.dec_label_pc_1000d824_crit_edge ], [ %v3_1000d7fa, %dec_label_pc_1000d7f9 ], [ %v4_1000d767, %dec_label_pc_1000d760 ]
  %v1_1000d824 = inttoptr i32 %v0_1000d824 to i32*
  %v2_1000d824 = load i32, i32* %v1_1000d824, align 4
  store i32 %v2_1000d824, i32* %edi.global-to-local, align 4
  %v0_1000d829 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d829
}

define i32 @function_1000d830(i32 %arg1) {
dec_label_pc_1000d830:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1000d830 = load i32, i32* %ebp.global-to-local, align 4
  %v0_1000d833 = load i32, i32* @ecx, align 4
  %v1_1000d84f = add i32 %v0_1000d833, 56
  %v2_1000d84f = inttoptr i32 %v1_1000d84f to i32*
  %v3_1000d84f = load i32, i32* %v2_1000d84f, align 4
  store i32 %v0_1000d830, i32* %ebp.global-to-local, align 4
  ret i32 %v3_1000d84f
}

define i32 @function_1000d870() {
dec_label_pc_1000d870:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1000d870 = load i32, i32* %ebp.global-to-local, align 4
  %v0_1000d873 = load i32, i32* @ecx, align 4
  %v1_1000d873 = add i32 %v0_1000d873, 4
  %v2_1000d873 = inttoptr i32 %v1_1000d873 to i32*
  %v3_1000d873 = load i32, i32* %v2_1000d873, align 4
  store i32 %v3_1000d873, i32* @ecx, align 4
  %v1_1000d876 = inttoptr i32 %v3_1000d873 to i32*
  %v2_1000d876 = load i32, i32* %v1_1000d876, align 4
  %v1_1000d878 = add i32 %v2_1000d876, 48
  %v2_1000d878 = inttoptr i32 %v1_1000d878 to i32*
  %v3_1000d878 = load i32, i32* %v2_1000d878, align 4
  store i32 %v0_1000d870, i32* %ebp.global-to-local, align 4
  ret i32 %v3_1000d878
}

define i32 @function_1000d880(i32 %arg1) {
dec_label_pc_1000d880:
  %v0_1000d883 = load i32, i32* @ecx, align 4
  %v1_1000d883 = add i32 %v0_1000d883, 4
  %v2_1000d883 = inttoptr i32 %v1_1000d883 to i32*
  %v3_1000d883 = load i32, i32* %v2_1000d883, align 4
  store i32 %v3_1000d883, i32* @ecx, align 4
  %v1_1000d886 = inttoptr i32 %v3_1000d883 to i32*
  %v2_1000d886 = load i32, i32* %v1_1000d886, align 4
  %v4_1000d888 = call i128 @__asm_movss.11(i32 %arg1)
  %v1_1000d891 = call i32 @__asm_movss(i128 %v4_1000d888)
  ret i32 %v2_1000d886
}

define i32 @function_1000d8a0() {
dec_label_pc_1000d8a0:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1000d8a0 = load i32, i32* %ebp.global-to-local, align 4
  %v0_1000d8a3 = load i32, i32* @ecx, align 4
  %v1_1000d8a3 = add i32 %v0_1000d8a3, 4
  %v2_1000d8a3 = inttoptr i32 %v1_1000d8a3 to i32*
  %v3_1000d8a3 = load i32, i32* %v2_1000d8a3, align 4
  store i32 %v3_1000d8a3, i32* @ecx, align 4
  %v1_1000d8a6 = inttoptr i32 %v3_1000d8a3 to i32*
  %v2_1000d8a6 = load i32, i32* %v1_1000d8a6, align 4
  %v1_1000d8a8 = add i32 %v2_1000d8a6, 56
  %v2_1000d8a8 = inttoptr i32 %v1_1000d8a8 to i32*
  %v3_1000d8a8 = load i32, i32* %v2_1000d8a8, align 4
  store i32 %v0_1000d8a0, i32* %ebp.global-to-local, align 4
  ret i32 %v3_1000d8a8
}

define i32 @function_1000d8b0(i32 %arg1) {
dec_label_pc_1000d8b0:
  %v0_1000d8b3 = load i32, i32* @ecx, align 4
  %v1_1000d8b3 = add i32 %v0_1000d8b3, 4
  %v2_1000d8b3 = inttoptr i32 %v1_1000d8b3 to i32*
  %v3_1000d8b3 = load i32, i32* %v2_1000d8b3, align 4
  store i32 %v3_1000d8b3, i32* @ecx, align 4
  %v1_1000d8b6 = inttoptr i32 %v3_1000d8b3 to i32*
  %v2_1000d8b6 = load i32, i32* %v1_1000d8b6, align 4
  %v1_1000d8bb = add i32 %v2_1000d8b6, 60
  %v2_1000d8bb = inttoptr i32 %v1_1000d8bb to i32*
  %v3_1000d8bb = load i32, i32* %v2_1000d8bb, align 4
  ret i32 %v3_1000d8bb
}

define i32 @function_1000d8d0(i32 %arg1) {
dec_label_pc_1000d8d0:
  %v0_1000d8d3 = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000d8d3, i32* @ecx, align 4
  %v1_1000d8d9 = inttoptr i32 %v0_1000d8d3 to i32*
  %v2_1000d8d9 = load i32, i32* %v1_1000d8d9, align 4
  %v1_1000d8de = add i32 %v2_1000d8d9, 36
  %v2_1000d8de = inttoptr i32 %v1_1000d8de to i32*
  %v3_1000d8de = load i32, i32* %v2_1000d8de, align 4
  %v1_1000d8e4 = and i32 %v3_1000d8de, -256
  %v2_1000d8e4 = or i32 %v1_1000d8e4, 1
  ret i32 %v2_1000d8e4
}

define i32 @function_1000d8f0(i8 %arg1) {
dec_label_pc_1000d8f0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v4_1000d8f3 = and i8 %arg1, 1
  %v5_1000d8f3 = icmp eq i8 %v4_1000d8f3, 0
  %v0_1000d8f7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000d8f7, i32* %stack_var_-8, align 4
  %v0_1000d8f8 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d8f8, i32* %esi.global-to-local, align 4
  %v1_1000d8fa = inttoptr i32 %v0_1000d8f8 to i32*
  store i32 ptrtoint (%vtable_10023f50_type* @global_var_10023f50.467 to i32), i32* %v1_1000d8fa, align 4
  br i1 %v5_1000d8f3, label %dec_label_pc_1000d90b, label %dec_label_pc_1000d902

dec_label_pc_1000d902:                            ; preds = %dec_label_pc_1000d8f0
  %v0_1000d902 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000d903 = call i32 @"??3@YAXPAX@Z"(i32 %v0_1000d902)
  br label %dec_label_pc_1000d90b

dec_label_pc_1000d90b:                            ; preds = %dec_label_pc_1000d902, %dec_label_pc_1000d8f0
  %v0_1000d90b = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d90d = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000d90d, i32* %esi.global-to-local, align 4
  ret i32 %v0_1000d90b
}

define i32 @function_1000d920(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000d920:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000d924 = load i32, i32* @edi, align 4
  store i32 %v0_1000d924, i32* %stack_var_-12, align 4
  %v4_1000d924 = ptrtoint i32* %stack_var_-12 to i32
  %v0_1000d925 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d925, i32* %edi.global-to-local, align 4
  %v1_1000d927 = add i32 %v0_1000d925, 8
  %v2_1000d927 = inttoptr i32 %v1_1000d927 to i32*
  %v3_1000d927 = load i32, i32* %v2_1000d927, align 4
  %v4_1000d927 = sext i32 %v3_1000d927 to i64
  %v3_1000d92a = icmp slt i32 %v3_1000d927, 0
  br i1 %v3_1000d92a, label %dec_label_pc_1000d9aa, label %dec_label_pc_1000d92e

dec_label_pc_1000d92e:                            ; preds = %dec_label_pc_1000d920
  %v2_1000d92a = icmp eq i32 %v3_1000d927, 0
  %v1_1000d92e = add i32 %v0_1000d925, 4
  %v2_1000d92e = inttoptr i32 %v1_1000d92e to i32*
  %v3_1000d92e = load i32, i32* %v2_1000d92e, align 4
  store i32 %v3_1000d92e, i32* %eax.global-to-local, align 4
  %v2_1000d934 = add i32 %v3_1000d92e, %arg1
  %v12_1000d934 = icmp eq i32 %v2_1000d934, 0
  store i32 %v2_1000d934, i32* @ecx, align 4
  br i1 %v2_1000d92a, label %dec_label_pc_1000d946, label %dec_label_pc_1000d93a

dec_label_pc_1000d93a:                            ; preds = %dec_label_pc_1000d92e
  %v1_1000d93a = add i32 %v2_1000d934, -1
  %v1_1000d93d = ashr i32 %v1_1000d93a, 31
  %v3_1000d93e = zext i32 %v1_1000d93a to i64
  %v5_1000d93e = zext i32 %v1_1000d93d to i64
  %v6_1000d93e = mul nuw i64 %v5_1000d93e, 4294967296
  %v7_1000d93e = or i64 %v6_1000d93e, %v3_1000d93e
  %v9_1000d93e = sdiv i64 %v7_1000d93e, %v4_1000d927
  %v10_1000d93e = trunc i64 %v9_1000d93e to i32
  %v1_1000d940 = add i32 %v10_1000d93e, 1
  %v5_1000d941 = mul i32 %v1_1000d940, %v3_1000d927
  br label %dec_label_pc_1000d959

dec_label_pc_1000d946:                            ; preds = %dec_label_pc_1000d92e
  %v1_1000d946 = icmp eq i32 %v3_1000d92e, 0
  %v1_1000d948 = icmp eq i1 %v1_1000d946, false
  br i1 %v1_1000d948, label %dec_label_pc_1000d94f, label %dec_label_pc_1000d94a

dec_label_pc_1000d94a:                            ; preds = %dec_label_pc_1000d946
  store i32 8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000d94f

dec_label_pc_1000d94f:                            ; preds = %dec_label_pc_1000d94a, %dec_label_pc_1000d946
  %eax.promoted2 = phi i32 [ 8, %dec_label_pc_1000d94a ], [ %v3_1000d92e, %dec_label_pc_1000d946 ]
  %v5_1000d951 = icmp slt i32 %eax.promoted2, %v2_1000d934
  br i1 %v5_1000d951, label %dec_label_pc_1000d953, label %dec_label_pc_1000d97b

dec_label_pc_1000d953:                            ; preds = %dec_label_pc_1000d94f, %dec_label_pc_1000d953
  %v2_1000d9533 = phi i32 [ %v2_1000d953, %dec_label_pc_1000d953 ], [ %eax.promoted2, %dec_label_pc_1000d94f ]
  %v2_1000d953 = mul i32 %v2_1000d9533, 2
  %v5_1000d957 = icmp slt i32 %v2_1000d953, %v2_1000d934
  br i1 %v5_1000d957, label %dec_label_pc_1000d953, label %dec_label_pc_1000d959.loopexit

dec_label_pc_1000d959.loopexit:                   ; preds = %dec_label_pc_1000d953
  br label %dec_label_pc_1000d959

dec_label_pc_1000d959:                            ; preds = %dec_label_pc_1000d959.loopexit, %dec_label_pc_1000d93a
  %eax.promoted = phi i32 [ %v2_1000d953, %dec_label_pc_1000d959.loopexit ], [ %v5_1000d941, %dec_label_pc_1000d93a ]
  %storemerge = phi i32 [ %v2_1000d953, %dec_label_pc_1000d959.loopexit ], [ %v5_1000d941, %dec_label_pc_1000d93a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v5_1000d95b = icmp slt i32 %eax.promoted, %v2_1000d934
  br i1 %v5_1000d95b, label %dec_label_pc_1000d95d, label %dec_label_pc_1000d97b

dec_label_pc_1000d95d:                            ; preds = %dec_label_pc_1000d959
  %v1_1000d95d = icmp eq i32 %eax.promoted, 0
  %v1_1000d95f = icmp eq i1 %v1_1000d95d, false
  br i1 %v1_1000d95f, label %dec_label_pc_1000d970, label %dec_label_pc_1000d961

dec_label_pc_1000d961:                            ; preds = %dec_label_pc_1000d95d
  %v8_1000d964 = icmp sgt i32 %v2_1000d934, -1
  br i1 %v8_1000d964, label %dec_label_pc_1000d970, label %dec_label_pc_1000d966

dec_label_pc_1000d966:                            ; preds = %dec_label_pc_1000d961
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000d97b

dec_label_pc_1000d970:                            ; preds = %dec_label_pc_1000d961, %dec_label_pc_1000d95d, %dec_label_pc_1000d970
  %v2_1000d9751 = phi i32 [ %v2_1000d975, %dec_label_pc_1000d970 ], [ %eax.promoted, %dec_label_pc_1000d95d ], [ %eax.promoted, %dec_label_pc_1000d961 ]
  %v2_1000d970 = add i32 %v2_1000d9751, %v2_1000d934
  %v1_1000d972 = ashr i32 %v2_1000d970, 31
  %v2_1000d973 = sub i32 %v2_1000d970, %v1_1000d972
  %v2_1000d975 = sdiv i32 %v2_1000d973, 2
  %v5_1000d979 = icmp slt i32 %v2_1000d975, %v2_1000d934
  br i1 %v5_1000d979, label %dec_label_pc_1000d970, label %dec_label_pc_1000d97b.loopexit

dec_label_pc_1000d97b.loopexit:                   ; preds = %dec_label_pc_1000d970
  store i32 %v2_1000d975, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000d97b

dec_label_pc_1000d97b:                            ; preds = %dec_label_pc_1000d97b.loopexit, %dec_label_pc_1000d94f, %dec_label_pc_1000d959, %dec_label_pc_1000d966
  %v0_1000d97d = phi i32 [ %v2_1000d975, %dec_label_pc_1000d97b.loopexit ], [ %eax.promoted2, %dec_label_pc_1000d94f ], [ %eax.promoted, %dec_label_pc_1000d959 ], [ -1, %dec_label_pc_1000d966 ]
  store i32 %v0_1000d97d, i32* %v2_1000d92e, align 4
  %v0_1000d980 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000d980, i32* @ecx, align 4
  %v1_1000d986 = inttoptr i32 %v0_1000d980 to i32*
  %v2_1000d986 = load i32, i32* %v1_1000d986, align 4
  store i32 %v2_1000d986, i32* @ecx, align 4
  %v0_1000d988 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000d98a = mul i32 %v0_1000d988, 4
  store i32 %v2_1000d98a, i32* %eax.global-to-local, align 4
  store i32 %v2_1000d98a, i32* %stack_var_-16, align 4
  br i1 %v12_1000d934, label %dec_label_pc_1000d9a1, label %dec_label_pc_1000d991

dec_label_pc_1000d991:                            ; preds = %dec_label_pc_1000d97b
  store i32 %v2_1000d934, i32* %stack_var_-20, align 4
  %v1_1000d999 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000d999 = inttoptr i32 %v1_1000d999 to i32*
  store i32 %v2_1000d98a, i32* %v2_1000d999, align 4
  %v2_1000d99b = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000d99b, i32* @edi, align 4
  %v2_1000d99c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000d99c, i32* @esi, align 4
  %v2_1000d99d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000d99d, i32* @ebp, align 4
  %v0_1000d99e = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000d99e

dec_label_pc_1000d9a1:                            ; preds = %dec_label_pc_1000d97b
  %v1_1000d9a1 = inttoptr i32 %v2_1000d986 to i32*
  %v2_1000d9a1 = load i32, i32* %v1_1000d9a1, align 4
  %v1_1000d9a3 = add i32 %v2_1000d9a1, 4
  %v2_1000d9a3 = inttoptr i32 %v1_1000d9a3 to i32*
  %v3_1000d9a3 = load i32, i32* %v2_1000d9a3, align 4
  store i32 %v3_1000d9a3, i32* @eax, align 4
  %v1_1000d9a8 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000d9a8 = inttoptr i32 %v1_1000d9a8 to i32*
  store i32 %v3_1000d9a3, i32* %v2_1000d9a8, align 4
  %v0_1000d9aa.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000d9aa

dec_label_pc_1000d9aa:                            ; preds = %dec_label_pc_1000d9a1, %dec_label_pc_1000d920
  %v0_1000d9aa = phi i32 [ %v0_1000d9aa.pre, %dec_label_pc_1000d9a1 ], [ %v4_1000d924, %dec_label_pc_1000d920 ]
  %v1_1000d9aa = inttoptr i32 %v0_1000d9aa to i32*
  %v2_1000d9aa = load i32, i32* %v1_1000d9aa, align 4
  store i32 %v2_1000d9aa, i32* @edi, align 4
  %v3_1000d9aa = add i32 %v0_1000d9aa, 4
  %v1_1000d9ab = inttoptr i32 %v3_1000d9aa to i32*
  %v2_1000d9ab = load i32, i32* %v1_1000d9ab, align 4
  store i32 %v2_1000d9ab, i32* @esi, align 4
  %v3_1000d9ab = add i32 %v0_1000d9aa, 8
  %v1_1000d9ac = inttoptr i32 %v3_1000d9ab to i32*
  %v2_1000d9ac = load i32, i32* %v1_1000d9ac, align 4
  store i32 %v2_1000d9ac, i32* @ebp, align 4
  %v0_1000d9ad = load i32, i32* @eax, align 4
  ret i32 %v0_1000d9ad
}

define i32 @function_1000d9b0(i32 %arg1, i32 %arg2) {
dec_label_pc_1000d9b0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000d9b3 = load i32, i32* %ebx.global-to-local, align 4
  %v0_1000d9b4 = load i32, i32* %esi.global-to-local, align 4
  %v0_1000d9b5 = load i32, i32* @ecx, align 4
  store i32 %v0_1000d9b5, i32* %esi.global-to-local, align 4
  %v0_1000d9b7 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000d9b7, i32* %stack_var_-16, align 4
  %v4_1000d9b7 = ptrtoint i32* %stack_var_-16 to i32
  %v1_1000d9b8 = add i32 %v0_1000d9b5, 40
  %v2_1000d9b8 = inttoptr i32 %v1_1000d9b8 to i32*
  %v3_1000d9b8 = load i32, i32* %v2_1000d9b8, align 4
  store i32 %v3_1000d9b8, i32* %edi.global-to-local, align 4
  %v1_1000d9bb = add i32 %v3_1000d9b8, 15
  %v1_1000d9be = and i32 %v1_1000d9bb, -16
  store i32 %v1_1000d9be, i32* %eax.global-to-local, align 4
  %v0_1000d9c1 = call i32 @__alloca_probe_16()
  store i32 %v0_1000d9c1, i32* %eax.global-to-local, align 4
  %v0_1000d9c6 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000d9c6 = add i32 %v0_1000d9c6, 36
  %v2_1000d9c6 = inttoptr i32 %v1_1000d9c6 to i32*
  %v3_1000d9c6 = load i32, i32* %v2_1000d9c6, align 4
  store i32 %v3_1000d9c6, i32* %eax.global-to-local, align 4
  store i32 %v4_1000d9b7, i32* %ebx.global-to-local, align 4
  %v0_1000d9ce = call i32 @_memcpy.1()
  store i32 %v0_1000d9ce, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000d9d7 = call i32 @function_10009450(i32 %arg1)
  store i32 %v1_1000d9d7, i32* %eax.global-to-local, align 4
  %v1_1000d9dc = add i32 %v1_1000d9d7, 1
  store i32 %v1_1000d9dc, i32* %edi.global-to-local, align 4
  %v1_1000d9e2 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000d9e2 = add i32 %v1_1000d9e2, 40
  %v3_1000d9e2 = inttoptr i32 %v2_1000d9e2 to i32*
  %v4_1000d9e2 = load i32, i32* %v3_1000d9e2, align 4
  %v7_1000d9e5 = icmp sgt i32 %v1_1000d9dc, %v4_1000d9e2
  br i1 %v7_1000d9e5, label %dec_label_pc_1000d9e7, label %dec_label_pc_1000da06

dec_label_pc_1000d9e7:                            ; preds = %dec_label_pc_1000d9b0
  %v1_1000d9e7 = add i32 %v1_1000d9e2, 36
  %v2_1000d9e7 = inttoptr i32 %v1_1000d9e7 to i32*
  %v3_1000d9e7 = load i32, i32* %v2_1000d9e7, align 4
  store i32 %v3_1000d9e7, i32* %eax.global-to-local, align 4
  %v1_1000d9ea = icmp eq i32 %v3_1000d9e7, 0
  br i1 %v1_1000d9ea, label %dec_label_pc_1000d9f7, label %dec_label_pc_1000d9ee

dec_label_pc_1000d9ee:                            ; preds = %dec_label_pc_1000d9e7
  %v1_1000d9ef = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000d9e7)
  store i32 %v1_1000d9ef, i32* %eax.global-to-local, align 4
  %v0_1000d9f7.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000d9f7

dec_label_pc_1000d9f7:                            ; preds = %dec_label_pc_1000d9ee, %dec_label_pc_1000d9e7
  %v0_1000d9f7 = phi i32 [ %v0_1000d9f7.pre, %dec_label_pc_1000d9ee ], [ %v1_1000d9dc, %dec_label_pc_1000d9e7 ]
  %v1_1000d9f8 = call i32 @__malloc_crt(i32 %v0_1000d9f7)
  store i32 %v1_1000d9f8, i32* %eax.global-to-local, align 4
  %v1_1000da00 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000da00 = add i32 %v1_1000da00, 36
  %v3_1000da00 = inttoptr i32 %v2_1000da00 to i32*
  store i32 %v1_1000d9f8, i32* %v3_1000da00, align 4
  %v0_1000da03 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000da03 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000da03 = add i32 %v1_1000da03, 40
  %v3_1000da03 = inttoptr i32 %v2_1000da03 to i32*
  store i32 %v0_1000da03, i32* %v3_1000da03, align 4
  %v0_1000da09.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000da06

dec_label_pc_1000da06:                            ; preds = %dec_label_pc_1000d9b0, %dec_label_pc_1000d9f7
  %v0_1000da09 = phi i32 [ %v1_1000d9e2, %dec_label_pc_1000d9b0 ], [ %v0_1000da09.pre, %dec_label_pc_1000d9f7 ]
  %v1_1000da09 = add i32 %v0_1000da09, 36
  %v2_1000da09 = inttoptr i32 %v1_1000da09 to i32*
  %v3_1000da09 = load i32, i32* %v2_1000da09, align 4
  store i32 %v3_1000da09, i32* %eax.global-to-local, align 4
  %v0_1000da0f = call i32 @_memcpy.1()
  store i32 %v0_1000da0f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_1000da19 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000da19 = add i32 %v0_1000da19, 80
  %v2_1000da19 = inttoptr i32 %v1_1000da19 to i32*
  %v3_1000da19 = load i32, i32* %v2_1000da19, align 4
  %v7_1000da1c = icmp sgt i32 %v3_1000da19, 0
  br i1 %v7_1000da1c, label %dec_label_pc_1000da1e, label %dec_label_pc_1000da3f

dec_label_pc_1000da1e:                            ; preds = %dec_label_pc_1000da06, %dec_label_pc_1000da1e
  %v0_1000da1e = phi i32 [ %v1_1000da3a, %dec_label_pc_1000da1e ], [ %v0_1000da19, %dec_label_pc_1000da06 ]
  %v1_1000da1e = add i32 %v0_1000da1e, 68
  %v2_1000da1e = inttoptr i32 %v1_1000da1e to i32*
  %v3_1000da1e = load i32, i32* %v2_1000da1e, align 4
  store i32 %v3_1000da1e, i32* @ecx, align 4
  %v4_1000da21 = call i128 @__asm_movss.11(i32 %arg2)
  %v0_1000da26 = load i32, i32* @ecx, align 4
  %v1_1000da29 = load i32, i32* @esp, align 4
  %v2_1000da29 = add i32 %v1_1000da29, -4
  %v3_1000da29 = inttoptr i32 %v2_1000da29 to i32*
  store i32 %v0_1000da26, i32* %v3_1000da29, align 4
  %v1_1000da2a = call i32 @__asm_movss(i128 %v4_1000da21)
  %v2_1000da2a = load i32, i32* @esp, align 4
  %v3_1000da2a = inttoptr i32 %v2_1000da2a to i32*
  store i32 %v1_1000da2a, i32* %v3_1000da2a, align 4
  %v0_1000da2f = load i32, i32* %esi.global-to-local, align 4
  %v1_1000da2f = add i32 %v0_1000da2f, 24
  store i32 %v1_1000da2f, i32* %eax.global-to-local, align 4
  %v1_1000da32 = load i32, i32* @esp, align 4
  %v2_1000da32 = add i32 %v1_1000da32, -4
  %v3_1000da32 = inttoptr i32 %v2_1000da32 to i32*
  store i32 %v4_1000d9b7, i32* %v3_1000da32, align 4
  %v0_1000da33 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000da33 = add i32 %v1_1000da32, -8
  %v3_1000da33 = inttoptr i32 %v2_1000da33 to i32*
  store i32 %v0_1000da33, i32* %v3_1000da33, align 4
  %v0_1000da36 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000da36 = add i32 %v0_1000da36, 1
  store i32 %v1_1000da36, i32* %edi.global-to-local, align 4
  %v1_1000da3a = load i32, i32* %esi.global-to-local, align 4
  %v2_1000da3a = add i32 %v1_1000da3a, 80
  %v3_1000da3a = inttoptr i32 %v2_1000da3a to i32*
  %v4_1000da3a = load i32, i32* %v3_1000da3a, align 4
  %v5_1000da3d = icmp slt i32 %v1_1000da36, %v4_1000da3a
  br i1 %v5_1000da3d, label %dec_label_pc_1000da1e, label %dec_label_pc_1000da3f

dec_label_pc_1000da3f:                            ; preds = %dec_label_pc_1000da1e, %dec_label_pc_1000da06
  %v0_1000da3f = load i32, i32* @global_var_1002b934.318, align 4
  store i32 %v0_1000da3f, i32* @ecx, align 4
  %v1_1000da45 = icmp eq i32 %v0_1000da3f, 0
  br i1 %v1_1000da45, label %dec_label_pc_1000da5d, label %dec_label_pc_1000da49

dec_label_pc_1000da49:                            ; preds = %dec_label_pc_1000da3f
  %v4_1000da49 = call i128 @__asm_movss.11(i32 %arg2)
  %v1_1000da4e = inttoptr i32 %v0_1000da3f to i32*
  %v2_1000da4e = load i32, i32* %v1_1000da4e, align 4
  store i32 %v2_1000da4e, i32* %eax.global-to-local, align 4
  %v1_1000da53 = load i32, i32* @esp, align 4
  %v2_1000da53 = add i32 %v1_1000da53, -4
  %v3_1000da53 = inttoptr i32 %v2_1000da53 to i32*
  store i32 %v0_1000da3f, i32* %v3_1000da53, align 4
  %v1_1000da54 = call i32 @__asm_movss(i128 %v4_1000da49)
  %v2_1000da54 = load i32, i32* @esp, align 4
  %v3_1000da54 = inttoptr i32 %v2_1000da54 to i32*
  store i32 %v1_1000da54, i32* %v3_1000da54, align 4
  %v1_1000da59 = load i32, i32* @esp, align 4
  %v2_1000da59 = add i32 %v1_1000da59, -4
  %v3_1000da59 = inttoptr i32 %v2_1000da59 to i32*
  store i32 %v4_1000d9b7, i32* %v3_1000da59, align 4
  %v0_1000da5a = load i32, i32* %esi.global-to-local, align 4
  %v2_1000da5a = add i32 %v1_1000da59, -8
  %v3_1000da5a = inttoptr i32 %v2_1000da5a to i32*
  store i32 %v0_1000da5a, i32* %v3_1000da5a, align 4
  br label %dec_label_pc_1000da5d

dec_label_pc_1000da5d:                            ; preds = %dec_label_pc_1000da49, %dec_label_pc_1000da3f
  %v2_1000da60 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000da60, i32* %edi.global-to-local, align 4
  store i32 %v0_1000d9b4, i32* %esi.global-to-local, align 4
  store i32 %v0_1000d9b3, i32* %ebx.global-to-local, align 4
  %v0_1000da64 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000da64
}

define i32 @function_1000da70() local_unnamed_addr {
dec_label_pc_1000da70:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_1000da71 = load i32, i32* @ecx, align 4
  store i32 %v0_1000da71, i32* %esi.global-to-local, align 4
  %v1_1000da73 = add i32 %v0_1000da71, 8
  %v2_1000da73 = inttoptr i32 %v1_1000da73 to i32*
  %v3_1000da73 = load i32, i32* %v2_1000da73, align 4
  %v11_1000da73 = icmp slt i32 %v3_1000da73, 0
  %v1_1000da77 = add i32 %v0_1000da71, 12
  %v2_1000da77 = inttoptr i32 %v1_1000da77 to i32*
  store i32 0, i32* %v2_1000da77, align 4
  %v2_1000da7e = icmp eq i1 %v11_1000da73, false
  br i1 %v2_1000da7e, label %dec_label_pc_1000da80, label %dec_label_pc_1000daa3

dec_label_pc_1000da80:                            ; preds = %dec_label_pc_1000da70
  %v2_1000da80 = load i32, i32* @ecx, align 4
  store i32 %v2_1000da80, i32* %eax.global-to-local, align 4
  %v1_1000da82 = icmp eq i32 %v2_1000da80, 0
  br i1 %v1_1000da82, label %dec_label_pc_1000da9c, label %dec_label_pc_1000da86

dec_label_pc_1000da86:                            ; preds = %dec_label_pc_1000da80
  %v0_1000da86 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000da86, i32* @ecx, align 4
  %v1_1000da8c = inttoptr i32 %v0_1000da86 to i32*
  %v2_1000da8c = load i32, i32* %v1_1000da8c, align 4
  store i32 %v2_1000da8c, i32* @ecx, align 4
  %v1_1000da8e = inttoptr i32 %v2_1000da8c to i32*
  %v2_1000da8e = load i32, i32* %v1_1000da8e, align 4
  store i32 %v2_1000da8e, i32* %edx.global-to-local, align 4
  %v1_1000da91 = add i32 %v2_1000da8e, 20
  %v2_1000da91 = inttoptr i32 %v1_1000da91 to i32*
  %v3_1000da91 = load i32, i32* %v2_1000da91, align 4
  store i32 %v3_1000da91, i32* %eax.global-to-local, align 4
  %v0_1000da96 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000da96 = inttoptr i32 %v0_1000da96 to i32*
  store i32 0, i32* %v1_1000da96, align 4
  br label %dec_label_pc_1000da9c

dec_label_pc_1000da9c:                            ; preds = %dec_label_pc_1000da86, %dec_label_pc_1000da80
  %v0_1000da9c = load i32, i32* %esi.global-to-local, align 4
  %v1_1000da9c = add i32 %v0_1000da9c, 4
  %v2_1000da9c = inttoptr i32 %v1_1000da9c to i32*
  store i32 0, i32* %v2_1000da9c, align 4
  br label %dec_label_pc_1000daa3

dec_label_pc_1000daa3:                            ; preds = %dec_label_pc_1000da70, %dec_label_pc_1000da9c
  %v0_1000daa3 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000daa3 = add i32 %v0_1000daa3, 8
  %v2_1000daa3 = inttoptr i32 %v1_1000daa3 to i32*
  %v3_1000daa3 = load i32, i32* %v2_1000daa3, align 4
  %v11_1000daa3 = icmp slt i32 %v3_1000daa3, 0
  %v2_1000daa7 = load i32, i32* @ecx, align 4
  store i32 %v2_1000daa7, i32* %eax.global-to-local, align 4
  %v2_1000daa9 = add i32 %v0_1000daa3, 16
  %v3_1000daa9 = inttoptr i32 %v2_1000daa9 to i32*
  store i32 %v2_1000daa7, i32* %v3_1000daa9, align 4
  %v2_1000daac = icmp eq i1 %v11_1000daa3, false
  br i1 %v2_1000daac, label %dec_label_pc_1000daae, label %dec_label_pc_1000dacf

dec_label_pc_1000daae:                            ; preds = %dec_label_pc_1000daa3
  %v0_1000daae = load i32, i32* %eax.global-to-local, align 4
  %v1_1000daae = icmp eq i32 %v0_1000daae, 0
  br i1 %v1_1000daae, label %dec_label_pc_1000dac8, label %dec_label_pc_1000dab2

dec_label_pc_1000dab2:                            ; preds = %dec_label_pc_1000daae
  %v0_1000dab2 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000dab2, i32* @ecx, align 4
  %v1_1000dab8 = inttoptr i32 %v0_1000dab2 to i32*
  %v2_1000dab8 = load i32, i32* %v1_1000dab8, align 4
  store i32 %v2_1000dab8, i32* @ecx, align 4
  %v1_1000daba = inttoptr i32 %v2_1000dab8 to i32*
  %v2_1000daba = load i32, i32* %v1_1000daba, align 4
  store i32 %v2_1000daba, i32* %edx.global-to-local, align 4
  %v1_1000dabc = load i32, i32* @esp, align 4
  %v2_1000dabc = add i32 %v1_1000dabc, -4
  %v3_1000dabc = inttoptr i32 %v2_1000dabc to i32*
  store i32 %v0_1000daae, i32* %v3_1000dabc, align 4
  %v0_1000dabd = load i32, i32* %edx.global-to-local, align 4
  %v1_1000dabd = add i32 %v0_1000dabd, 20
  %v2_1000dabd = inttoptr i32 %v1_1000dabd to i32*
  %v3_1000dabd = load i32, i32* %v2_1000dabd, align 4
  store i32 %v3_1000dabd, i32* %eax.global-to-local, align 4
  %v0_1000dac2 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000dac2 = inttoptr i32 %v0_1000dac2 to i32*
  store i32 0, i32* %v1_1000dac2, align 4
  br label %dec_label_pc_1000dac8

dec_label_pc_1000dac8:                            ; preds = %dec_label_pc_1000dab2, %dec_label_pc_1000daae
  %v0_1000dac8 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000dac8 = add i32 %v0_1000dac8, 4
  %v2_1000dac8 = inttoptr i32 %v1_1000dac8 to i32*
  store i32 0, i32* %v2_1000dac8, align 4
  br label %dec_label_pc_1000dacf

dec_label_pc_1000dacf:                            ; preds = %dec_label_pc_1000daa3, %dec_label_pc_1000dac8
  %v0_1000dacf = load i32, i32* @esp, align 4
  %v1_1000dacf = inttoptr i32 %v0_1000dacf to i32*
  %v2_1000dacf = load i32, i32* %v1_1000dacf, align 4
  store i32 %v2_1000dacf, i32* @esi, align 4
  %v0_1000dad0 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000dad0
}

define i32 @function_1000dae0() {
dec_label_pc_1000dae0:
  %v0_1000dae0 = load i32, i32* @ecx, align 4
  %v1_1000dae0 = add i32 %v0_1000dae0, -24
  store i32 %v1_1000dae0, i32* @ecx, align 4
  %v1_1000dae3 = call i32 @function_1000d3b0(i32 ptrtoint (i32* @5 to i32))
  ret i32 %v1_1000dae3
}

define i32 @function_1000daf0() {
dec_label_pc_1000daf0:
  %v0_1000daf0 = load i32, i32* @ecx, align 4
  %v1_1000daf0 = add i32 %v0_1000daf0, -24
  store i32 %v1_1000daf0, i32* @ecx, align 4
  %v0_1000daf3 = call i32 @function_1000d410()
  ret i32 %v0_1000daf3
}

define i32 @function_1000db00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6, i8 %arg7, i32 %arg8, i32 %arg9) {
dec_label_pc_1000db00:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st7.global-to-local = alloca x86_fp80, align 4
  %zf.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v0_1000db07 = load i32, i32* @ecx, align 4
  store i32 %v0_1000db07, i32* @esi, align 4
  %v2_1000db09 = add i32 %v0_1000db07, 28
  %v3_1000db09 = inttoptr i32 %v2_1000db09 to i32*
  store i32 %v0_1000db07, i32* %v3_1000db09, align 4
  %v0_1000db0c = load i32, i32* %eax.global-to-local, align 4
  %v1_1000db0c = icmp eq i32 %v0_1000db0c, 0
  store i1 %v1_1000db0c, i1* %zf.global-to-local, align 1
  %v1_1000db0e = icmp eq i1 %v1_1000db0c, false
  br i1 %v1_1000db0e, label %dec_label_pc_1000db15, label %dec_label_pc_1000db10

dec_label_pc_1000db10:                            ; preds = %dec_label_pc_1000db00
  %v0_1000db10 = load i32, i32* inttoptr (i32 268601168 to i32*), align 16
  store i32 %v0_1000db10, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000db15

dec_label_pc_1000db15:                            ; preds = %dec_label_pc_1000db10, %dec_label_pc_1000db00
  %v10_1000db15 = icmp eq i32 %arg9, 0
  store i1 %v10_1000db15, i1* %zf.global-to-local, align 1
  %v4_1000db19 = call i128 @__asm_movss.11(i32 %arg6)
  %v4_1000db1e = zext i8 %arg7 to i32
  %v5_1000db1e = load i32, i32* @ecx, align 4
  %v6_1000db1e = and i32 %v5_1000db1e, -256
  %v7_1000db1e = or i32 %v6_1000db1e, %v4_1000db1e
  store i32 %v7_1000db1e, i32* @ecx, align 4
  %v0_1000db21 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000db21 = load i32, i32* @esi, align 4
  %v2_1000db21 = add i32 %v1_1000db21, 32
  %v3_1000db21 = inttoptr i32 %v2_1000db21 to i32*
  store i32 %v0_1000db21, i32* %v3_1000db21, align 4
  %v4_1000db24 = zext i8 %arg5 to i32
  %v5_1000db24 = load i32, i32* %eax.global-to-local, align 4
  %v6_1000db24 = and i32 %v5_1000db24, -256
  %v7_1000db24 = or i32 %v6_1000db24, %v4_1000db24
  store i32 %v7_1000db24, i32* %eax.global-to-local, align 4
  %v1_1000db27 = call i32 @__asm_movss(i128 %v4_1000db19)
  %v2_1000db27 = load i32, i32* @esi, align 4
  %v3_1000db27 = add i32 %v2_1000db27, 56
  %v4_1000db27 = inttoptr i32 %v3_1000db27 to i32*
  store i32 %v1_1000db27, i32* %v4_1000db27, align 4
  %v4_1000db2c = call i128 @__asm_movss.11(i32 %arg8)
  %v0_1000db32 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000db32 = trunc i32 %v0_1000db32 to i8
  %v2_1000db32 = load i32, i32* @esi, align 4
  %v3_1000db32 = add i32 %v2_1000db32, 52
  %v4_1000db32 = inttoptr i32 %v3_1000db32 to i8*
  store i8 %v1_1000db32, i8* %v4_1000db32, align 1
  %v0_1000db35 = load i32, i32* @ecx, align 4
  %v1_1000db35 = trunc i32 %v0_1000db35 to i8
  %v2_1000db35 = load i32, i32* @esi, align 4
  %v3_1000db35 = add i32 %v2_1000db35, 60
  %v4_1000db35 = inttoptr i32 %v3_1000db35 to i8*
  store i8 %v1_1000db35, i8* %v4_1000db35, align 1
  %v1_1000db38 = call i32 @__asm_movss(i128 %v4_1000db2c)
  %v2_1000db38 = load i32, i32* @esi, align 4
  %v3_1000db38 = add i32 %v2_1000db38, 64
  %v4_1000db38 = inttoptr i32 %v3_1000db38 to i32*
  store i32 %v1_1000db38, i32* %v4_1000db38, align 4
  %v0_1000db3d = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_1000db3d, label %dec_label_pc_1000db96, label %dec_label_pc_1000db3f

dec_label_pc_1000db3f:                            ; preds = %dec_label_pc_1000db15
  %v0_1000db3f = load i32, i32* @esi, align 4
  %v1_1000db3f = add i32 %v0_1000db3f, 72
  %v2_1000db3f = inttoptr i32 %v1_1000db3f to i32*
  %v3_1000db3f = load i32, i32* %v2_1000db3f, align 4
  store i32 %v3_1000db3f, i32* @eax, align 4
  %v1_1000db43 = add i32 %v0_1000db3f, 80
  %v2_1000db43 = inttoptr i32 %v1_1000db43 to i32*
  %v3_1000db43 = load i32, i32* %v2_1000db43, align 4
  store i32 %v3_1000db43, i32* %ebx.global-to-local, align 4
  %v1_1000db46 = add i32 %v3_1000db43, 1
  %v12_1000db49 = icmp eq i32 %v1_1000db46, %v3_1000db3f
  store i1 %v12_1000db49, i1* %zf.global-to-local, align 1
  %v7_1000db4b = icmp sgt i32 %v1_1000db46, %v3_1000db3f
  br i1 %v7_1000db4b, label %dec_label_pc_1000db4d, label %dec_label_pc_1000db5b

dec_label_pc_1000db4d:                            ; preds = %dec_label_pc_1000db3f
  %v2_1000db4f = sub i32 %v3_1000db43, %v3_1000db3f
  %v1_1000db51 = add i32 %v2_1000db4f, 1
  %v9_1000db51 = icmp eq i32 %v1_1000db51, 0
  store i1 %v9_1000db51, i1* %zf.global-to-local, align 1
  %v1_1000db53 = add i32 %v0_1000db3f, 68
  store i32 %v1_1000db53, i32* @ecx, align 4
  %v1_1000db56 = call i32 @function_1000d920(i32 %v1_1000db51)
  store i32 %v1_1000db56, i32* %eax.global-to-local, align 4
  %v0_1000db5b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000db5b

dec_label_pc_1000db5b:                            ; preds = %dec_label_pc_1000db3f, %dec_label_pc_1000db4d
  %v18_1000db5b = phi i32 [ %v0_1000db3f, %dec_label_pc_1000db3f ], [ %v0_1000db5b.pre, %dec_label_pc_1000db4d ]
  %v1_1000db5b = add i32 %v18_1000db5b, 80
  %v2_1000db5b = inttoptr i32 %v1_1000db5b to i32*
  %v3_1000db5b = load i32, i32* %v2_1000db5b, align 4
  %v4_1000db5b = add i32 %v3_1000db5b, 1
  store i32 %v4_1000db5b, i32* %v2_1000db5b, align 4
  %v0_1000db5e = load i32, i32* @esi, align 4
  %v1_1000db5e = add i32 %v0_1000db5e, 80
  %v2_1000db5e = inttoptr i32 %v1_1000db5e to i32*
  %v3_1000db5e = load i32, i32* %v2_1000db5e, align 4
  store i32 %v3_1000db5e, i32* %eax.global-to-local, align 4
  %v1_1000db61 = add i32 %v0_1000db5e, 68
  %v2_1000db61 = inttoptr i32 %v1_1000db61 to i32*
  %v3_1000db61 = load i32, i32* %v2_1000db61, align 4
  store i32 %v3_1000db61, i32* @ecx, align 4
  %v1_1000db64 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000db64 = sub i32 %v3_1000db5e, %v1_1000db64
  %v1_1000db66 = add i32 %v2_1000db64, -1
  %v9_1000db66 = icmp eq i32 %v1_1000db66, 0
  store i32 %v1_1000db66, i32* %eax.global-to-local, align 4
  %v2_1000db67 = add i32 %v0_1000db5e, 84
  %v3_1000db67 = inttoptr i32 %v2_1000db67 to i32*
  store i32 %v3_1000db61, i32* %v3_1000db67, align 4
  store i1 %v9_1000db66, i1* %zf.global-to-local, align 1
  %tmp256 = icmp slt i32 %v1_1000db66, 1
  br i1 %tmp256, label %dec_label_pc_1000db86, label %dec_label_pc_1000db6e

dec_label_pc_1000db6e:                            ; preds = %dec_label_pc_1000db5b
  %v1_1000db6e = mul i32 %v1_1000db66, 4
  %v0_1000db75 = load i32, i32* @ecx, align 4
  %v1_1000db75 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000db75 = mul i32 %v1_1000db75, 4
  %v3_1000db75 = add i32 %v2_1000db75, %v0_1000db75
  store i32 %v3_1000db75, i32* @ecx, align 4
  %v1_1000db78 = load i32, i32* @esp, align 4
  %v2_1000db78 = add i32 %v1_1000db78, -4
  %v3_1000db78 = inttoptr i32 %v2_1000db78 to i32*
  store i32 %v1_1000db6e, i32* %v3_1000db78, align 4
  %v0_1000db79 = load i32, i32* @ecx, align 4
  %v2_1000db79 = add i32 %v1_1000db78, -8
  %v3_1000db79 = inttoptr i32 %v2_1000db79 to i32*
  store i32 %v0_1000db79, i32* %v3_1000db79, align 4
  %v0_1000db7a = load i32, i32* @ecx, align 4
  %v1_1000db7a = add i32 %v0_1000db7a, 4
  %v10_1000db7a = icmp eq i32 %v1_1000db7a, 0
  store i1 %v10_1000db7a, i1* %zf.global-to-local, align 1
  store i32 %v1_1000db7a, i32* @ecx, align 4
  %v2_1000db7d = add i32 %v1_1000db78, -12
  %v3_1000db7d = inttoptr i32 %v2_1000db7d to i32*
  store i32 %v1_1000db7a, i32* %v3_1000db7d, align 4
  %v1_1000db7e = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_1000db7e = ptrtoint i32* %v1_1000db7e to i32
  store i32 %v3_1000db7e, i32* %eax.global-to-local, align 4
  %v0_1000db83 = load i32, i32* @esp, align 4
  %v10_1000db83 = icmp eq i32 %v0_1000db83, -12
  store i1 %v10_1000db83, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_1000db86

dec_label_pc_1000db86:                            ; preds = %dec_label_pc_1000db6e, %dec_label_pc_1000db5b
  %v0_1000db86 = load i32, i32* @esi, align 4
  %v1_1000db86 = add i32 %v0_1000db86, 68
  %v2_1000db86 = inttoptr i32 %v1_1000db86 to i32*
  %v3_1000db86 = load i32, i32* %v2_1000db86, align 4
  store i32 %v3_1000db86, i32* %eax.global-to-local, align 4
  %v1_1000db89 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000db89 = mul i32 %v1_1000db89, 4
  %v3_1000db89 = add i32 %v2_1000db89, %v3_1000db86
  store i32 %v3_1000db89, i32* %ebx.global-to-local, align 4
  %v1_1000db8c = icmp eq i32 %v3_1000db89, 0
  store i1 %v1_1000db8c, i1* %zf.global-to-local, align 1
  br i1 %v1_1000db8c, label %dec_label_pc_1000db95, label %dec_label_pc_1000db90

dec_label_pc_1000db90:                            ; preds = %dec_label_pc_1000db86
  store i32 %arg9, i32* @ecx, align 4
  %v2_1000db93 = inttoptr i32 %v3_1000db89 to i32*
  store i32 %arg9, i32* %v2_1000db93, align 4
  br label %dec_label_pc_1000db95

dec_label_pc_1000db95:                            ; preds = %dec_label_pc_1000db90, %dec_label_pc_1000db86
  %v0_1000db95 = load i32, i32* @esp, align 4
  %v1_1000db95 = inttoptr i32 %v0_1000db95 to i32*
  %v2_1000db95 = load i32, i32* %v1_1000db95, align 4
  store i32 %v2_1000db95, i32* @ebx, align 4
  br label %dec_label_pc_1000db96

dec_label_pc_1000db96:                            ; preds = %dec_label_pc_1000db95, %dec_label_pc_1000db15
  %v0_1000db96 = load i32, i32* @esi, align 4
  %v1_1000db96 = add i32 %v0_1000db96, 32
  %v2_1000db96 = inttoptr i32 %v1_1000db96 to i32*
  %v3_1000db96 = load i32, i32* %v2_1000db96, align 4
  store i32 %v3_1000db96, i32* %eax.global-to-local, align 4
  %v1_1000db99 = add i32 %v3_1000db96, 1
  %v4_1000dba0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000dba0

dec_label_pc_1000dba0:                            ; preds = %dec_label_pc_1000dba0, %dec_label_pc_1000db96
  %v4_1000dba0 = phi i32 [ %v6_1000dba0, %dec_label_pc_1000dba0 ], [ %v4_1000dba0.pre, %dec_label_pc_1000db96 ]
  %v0_1000dba2 = phi i32 [ %v1_1000dba2, %dec_label_pc_1000dba0 ], [ %v3_1000db96, %dec_label_pc_1000db96 ]
  %v1_1000dba0 = inttoptr i32 %v0_1000dba2 to i8*
  %v2_1000dba0 = load i8, i8* %v1_1000dba0, align 1
  %v3_1000dba0 = zext i8 %v2_1000dba0 to i32
  %v5_1000dba0 = and i32 %v4_1000dba0, -256
  %v6_1000dba0 = or i32 %v3_1000dba0, %v5_1000dba0
  store i32 %v6_1000dba0, i32* @ecx, align 4
  %v1_1000dba2 = add i32 %v0_1000dba2, 1
  store i32 %v1_1000dba2, i32* %eax.global-to-local, align 4
  %v5_1000dba3 = icmp eq i8 %v2_1000dba0, 0
  store i1 %v5_1000dba3, i1* %zf.global-to-local, align 1
  %v1_1000dba5 = icmp eq i1 %v5_1000dba3, false
  br i1 %v1_1000dba5, label %dec_label_pc_1000dba0, label %dec_label_pc_1000dba7

dec_label_pc_1000dba7:                            ; preds = %dec_label_pc_1000dba0
  %v2_1000dba7 = sub i32 %v1_1000dba2, %v1_1000db99
  %v1_1000dba9 = add i32 %v2_1000dba7, 1
  %v9_1000dba9 = icmp eq i32 %v1_1000dba9, 0
  store i1 %v9_1000dba9, i1* %zf.global-to-local, align 1
  store i32 %v1_1000dba9, i32* %eax.global-to-local, align 4
  %v1_1000dbaa = load i32, i32* @esp, align 4
  %v2_1000dbaa = add i32 %v1_1000dbaa, -4
  %v3_1000dbaa = inttoptr i32 %v2_1000dbaa to i32*
  store i32 %v1_1000dba9, i32* %v3_1000dbaa, align 4
  %v0_1000dbab = load i32, i32* %eax.global-to-local, align 4
  %v1_1000dbab = load i32, i32* @esi, align 4
  %v2_1000dbab = add i32 %v1_1000dbab, 40
  %v3_1000dbab = inttoptr i32 %v2_1000dbab to i32*
  store i32 %v0_1000dbab, i32* %v3_1000dbab, align 4
  %v1_1000dbae = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000dbae, i32* %eax.global-to-local, align 4
  %v0_1000dbb3 = load i32, i32* @esi, align 4
  %v1_1000dbb3 = add i32 %v0_1000dbb3, 40
  %v2_1000dbb3 = inttoptr i32 %v1_1000dbb3 to i32*
  %v3_1000dbb3 = load i32, i32* %v2_1000dbb3, align 4
  %v1_1000dbb6 = add i32 %v0_1000dbb3, 32
  %v2_1000dbb6 = inttoptr i32 %v1_1000dbb6 to i32*
  %v3_1000dbb6 = load i32, i32* %v2_1000dbb6, align 4
  store i32 %v3_1000dbb6, i32* @ecx, align 4
  %v1_1000dbb9 = load i32, i32* @esp, align 4
  %v2_1000dbb9 = add i32 %v1_1000dbb9, -4
  %v3_1000dbb9 = inttoptr i32 %v2_1000dbb9 to i32*
  store i32 %v3_1000dbb3, i32* %v3_1000dbb9, align 4
  %v0_1000dbba = load i32, i32* @ecx, align 4
  %v2_1000dbba = add i32 %v1_1000dbb9, -8
  %v3_1000dbba = inttoptr i32 %v2_1000dbba to i32*
  store i32 %v0_1000dbba, i32* %v3_1000dbba, align 4
  %v0_1000dbbb = load i32, i32* %eax.global-to-local, align 4
  %v2_1000dbbb = add i32 %v1_1000dbb9, -12
  %v3_1000dbbb = inttoptr i32 %v2_1000dbbb to i32*
  store i32 %v0_1000dbbb, i32* %v3_1000dbbb, align 4
  %v0_1000dbbc = load i32, i32* %eax.global-to-local, align 4
  %v1_1000dbbc = load i32, i32* @esi, align 4
  %v2_1000dbbc = add i32 %v1_1000dbbc, 36
  %v3_1000dbbc = inttoptr i32 %v2_1000dbbc to i32*
  store i32 %v0_1000dbbc, i32* %v3_1000dbbc, align 4
  %v0_1000dbbf = call i32 @_memcpy.1()
  store i32 %v0_1000dbbf, i32* %eax.global-to-local, align 4
  %v0_1000dbc4 = load i32, i32* @esi, align 4
  %v1_1000dbc4 = add i32 %v0_1000dbc4, 36
  %v2_1000dbc4 = inttoptr i32 %v1_1000dbc4 to i32*
  %v3_1000dbc4 = load i32, i32* %v2_1000dbc4, align 4
  %v0_1000dbc7 = load i32, i32* @esp, align 4
  %v9_1000dbc7 = icmp eq i32 %v0_1000dbc7, -16
  store i1 %v9_1000dbc7, i1* %zf.global-to-local, align 1
  %v2_1000dbca = add i32 %v0_1000dbc7, 12
  %v3_1000dbca = inttoptr i32 %v2_1000dbca to i32*
  store i32 %v3_1000dbc4, i32* %v3_1000dbca, align 4
  %v0_1000dbcb = load i32, i32* @esi, align 4
  store i32 %v0_1000dbcb, i32* @ecx, align 4
  %v1_1000dbcd = call i32 @function_1000d470(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000dbcd, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v4_1000dbd5 = trunc i32 %v1_1000dbcd to i8
  %v5_1000dbd5 = icmp eq i8 %v4_1000dbd5, 0
  store i1 %v5_1000dbd5, i1* %zf.global-to-local, align 1
  %v1_1000dbd7 = icmp eq i1 %v5_1000dbd5, false
  br i1 %v1_1000dbd7, label %dec_label_pc_1000dc24, label %dec_label_pc_1000dbd9

dec_label_pc_1000dbd9:                            ; preds = %dec_label_pc_1000dba7
  %v0_1000dbd9 = load i32, i32* @esi, align 4
  %v1_1000dbd9 = add i32 %v0_1000dbd9, 36
  %v2_1000dbd9 = inttoptr i32 %v1_1000dbd9 to i32*
  %v3_1000dbd9 = load i32, i32* %v2_1000dbd9, align 4
  store i32 %v3_1000dbd9, i32* %eax.global-to-local, align 4
  %v1_1000dbdc = load i32, i32* @esp, align 4
  %v2_1000dbdc = add i32 %v1_1000dbdc, -4
  %v3_1000dbdc = inttoptr i32 %v2_1000dbdc to i32*
  store i32 %v3_1000dbd9, i32* %v3_1000dbdc, align 4
  %v1_1000dbdd = call i32 @function_10012dd7(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000dbdd, i32* %eax.global-to-local, align 4
  %v1_1000dbe2 = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v2_1000dbe2 = load i32, i32* @esi, align 4
  %v3_1000dbe2 = add i32 %v2_1000dbe2, 44
  %v4_1000dbe2 = fptrunc x86_fp80 %v1_1000dbe2 to float
  %v5_1000dbe2 = inttoptr i32 %v3_1000dbe2 to float*
  store float %v4_1000dbe2, float* %v5_1000dbe2, align 4
  %v0_1000dbe5 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_1000dbe5 = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v4_1000dbe5 = fptrunc x86_fp80 %v1_1000dbe5 to float
  %v6_1000dbe5 = bitcast float %v4_1000dbe5 to i32
  %v8_1000dbe5 = add i3 %v0_1000dbe5, 1
  store i3 %v8_1000dbe5, i3* %fpu_stat_TOP.global-to-local, align 1
  %v0_1000dbe8 = load i32, i32* @esp, align 4
  %sext = mul i32 %v6_1000dbe5, 16777216
  %v4_1000dbeb = sdiv i32 %sext, 16777216
  %v1_1000dbee = and i32 %v4_1000dbeb, 2139095040
  store i32 %v1_1000dbee, i32* @ecx, align 4
  %v9_1000dbf4 = icmp eq i32 %v1_1000dbee, 2139095040
  store i1 %v9_1000dbf4, i1* %zf.global-to-local, align 1
  %v1_1000dbfa = icmp eq i1 %v9_1000dbf4, false
  br i1 %v1_1000dbfa, label %dec_label_pc_1000dc1c, label %dec_label_pc_1000dbfc

dec_label_pc_1000dbfc:                            ; preds = %dec_label_pc_1000dbd9
  %v0_1000dbfc = load i32, i32* @esi, align 4
  %v1_1000dbfc = add i32 %v0_1000dbfc, 36
  %v2_1000dbfc = inttoptr i32 %v1_1000dbfc to i32*
  %v3_1000dbfc = load i32, i32* %v2_1000dbfc, align 4
  %v3_1000dbff = inttoptr i32 %v0_1000dbe8 to i32*
  store i32 %v3_1000dbfc, i32* %v3_1000dbff, align 4
  %v0_1000dc00 = load i32, i32* %edi.global-to-local, align 4
  %v2_1000dc00 = add i32 %v0_1000dbe8, -4
  %v3_1000dc00 = inttoptr i32 %v2_1000dc00 to i32*
  store i32 %v0_1000dc00, i32* %v3_1000dc00, align 4
  %v1_1000dc01 = add i32 %v0_1000dbe8, -8
  %v2_1000dc01 = inttoptr i32 %v1_1000dc01 to i32*
  store i32 ptrtoint ([51 x i8]* @global_var_10024068.468 to i32), i32* %v2_1000dc01, align 4
  %v0_1000dc06 = call i32 @Warning()
  store i32 %v0_1000dc06, i32* %eax.global-to-local, align 4
  %v1_1000dc0c = call i128 @__asm_movss.11(i32 2139095039)
  %v0_1000dc14 = load i32, i32* @esp, align 4
  %v10_1000dc14 = icmp eq i32 %v0_1000dc14, -12
  store i1 %v10_1000dc14, i1* %zf.global-to-local, align 1
  %v1_1000dc17 = call i32 @__asm_movss(i128 %v1_1000dc0c)
  %v2_1000dc17 = load i32, i32* @esi, align 4
  %v3_1000dc17 = add i32 %v2_1000dc17, 44
  %v4_1000dc17 = inttoptr i32 %v3_1000dc17 to i32*
  store i32 %v1_1000dc17, i32* %v4_1000dc17, align 4
  br label %dec_label_pc_1000dc1c

dec_label_pc_1000dc1c:                            ; preds = %dec_label_pc_1000dbfc, %dec_label_pc_1000dbd9
  %v0_1000dc1c = load i32, i32* @esi, align 4
  %v1_1000dc1c = add i32 %v0_1000dc1c, 44
  %v2_1000dc1c = inttoptr i32 %v1_1000dc1c to i32*
  %v3_1000dc1c = load i32, i32* %v2_1000dc1c, align 4
  %v4_1000dc1c = call i32 @__asm_cvttss2si(i32 %v3_1000dc1c)
  store i32 %v4_1000dc1c, i32* %eax.global-to-local, align 4
  %v1_1000dc21 = load i32, i32* @esi, align 4
  %v2_1000dc21 = add i32 %v1_1000dc21, 48
  %v3_1000dc21 = inttoptr i32 %v2_1000dc21 to i32*
  store i32 %v4_1000dc1c, i32* %v3_1000dc21, align 4
  %v0_1000dc27.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000dc24

dec_label_pc_1000dc24:                            ; preds = %dec_label_pc_1000dc1c, %dec_label_pc_1000dba7
  %v0_1000dc27 = phi i32 [ %v0_1000dc27.pre, %dec_label_pc_1000dc1c ], [ %arg1, %dec_label_pc_1000dba7 ]
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_1000dc27 = load i32, i32* @esi, align 4
  %v2_1000dc27 = add i32 %v1_1000dc27, 12
  %v3_1000dc27 = inttoptr i32 %v2_1000dc27 to i32*
  store i32 %v0_1000dc27, i32* %v3_1000dc27, align 4
  %v0_1000dc2a = load i32, i32* @esi, align 4
  %v1_1000dc2a = add i32 %v0_1000dc2a, 8
  %v2_1000dc2a = inttoptr i32 %v1_1000dc2a to i8*
  store i8 0, i8* %v2_1000dc2a, align 1
  %v0_1000dc2e = load i32, i32* @esp, align 4
  %v1_1000dc2e = inttoptr i32 %v0_1000dc2e to i32*
  %v2_1000dc2e = load i32, i32* %v1_1000dc2e, align 4
  store i32 %v2_1000dc2e, i32* %edi.global-to-local, align 4
  %v0_1000dc2f = load i32, i32* %eax.global-to-local, align 4
  %v1_1000dc2f = icmp eq i32 %v0_1000dc2f, 0
  store i1 %v1_1000dc2f, i1* %zf.global-to-local, align 1
  %v1_1000dc31 = icmp eq i1 %v1_1000dc2f, false
  br i1 %v1_1000dc31, label %dec_label_pc_1000dc38, label %dec_label_pc_1000dc33

dec_label_pc_1000dc33:                            ; preds = %dec_label_pc_1000dc24
  %v0_1000dc33 = load i32, i32* @global_var_100286fc, align 4
  store i32 %v0_1000dc33, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000dc38

dec_label_pc_1000dc38:                            ; preds = %dec_label_pc_1000dc33, %dec_label_pc_1000dc24
  %v0_1000dc38 = phi i32 [ %v0_1000dc33, %dec_label_pc_1000dc33 ], [ %v0_1000dc2f, %dec_label_pc_1000dc24 ]
  %v1_1000dc38 = load i32, i32* @esi, align 4
  %v2_1000dc38 = add i32 %v1_1000dc38, 16
  %v3_1000dc38 = inttoptr i32 %v2_1000dc38 to i32*
  store i32 %v0_1000dc38, i32* %v3_1000dc38, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v1_1000dc3e = load i32, i32* @esi, align 4
  %v2_1000dc3e = add i32 %v1_1000dc3e, 20
  %v3_1000dc3e = inttoptr i32 %v2_1000dc3e to i32*
  store i32 %arg3, i32* %v3_1000dc3e, align 4
  %v0_1000dc41 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000dc41 = and i32 %v0_1000dc41, 1
  %v3_1000dc41 = icmp eq i32 %v2_1000dc41, 0
  store i1 %v3_1000dc41, i1* %zf.global-to-local, align 1
  %v1_1000dc43 = icmp eq i1 %v3_1000dc41, false
  br i1 %v1_1000dc43, label %dec_label_pc_1000dc56, label %dec_label_pc_1000dc45

dec_label_pc_1000dc45:                            ; preds = %dec_label_pc_1000dc38
  %v0_1000dc45 = load i32, i32* @global_var_1002d340.463, align 4
  store i32 %v0_1000dc45, i32* @ecx, align 4
  %v1_1000dc4b = load i32, i32* @esi, align 4
  %v2_1000dc4b = add i32 %v1_1000dc4b, 4
  %v3_1000dc4b = inttoptr i32 %v2_1000dc4b to i32*
  store i32 %v0_1000dc45, i32* %v3_1000dc4b, align 4
  %v0_1000dc4e = load i32, i32* @esi, align 4
  store i32 %v0_1000dc4e, i32* @global_var_1002d340.463, align 4
  br label %dec_label_pc_1000dc5d

dec_label_pc_1000dc56:                            ; preds = %dec_label_pc_1000dc38
  %v0_1000dc56 = load i32, i32* @esi, align 4
  %v1_1000dc56 = add i32 %v0_1000dc56, 4
  %v2_1000dc56 = inttoptr i32 %v1_1000dc56 to i32*
  store i32 0, i32* %v2_1000dc56, align 4
  br label %dec_label_pc_1000dc5d

dec_label_pc_1000dc5d:                            ; preds = %dec_label_pc_1000dc56, %dec_label_pc_1000dc45
  %v0_1000dc5d = load i32, i32* @global_var_1002d344.461, align 4
  %v7_1000dc5d = icmp eq i32 %v0_1000dc5d, 0
  store i1 %v7_1000dc5d, i1* %zf.global-to-local, align 1
  br i1 %v7_1000dc5d, label %dec_label_pc_1000dc5d.dec_label_pc_1000dc6f_crit_edge, label %dec_label_pc_1000dc66

dec_label_pc_1000dc5d.dec_label_pc_1000dc6f_crit_edge: ; preds = %dec_label_pc_1000dc5d
  %v0_1000dc71.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000dc6f

dec_label_pc_1000dc66:                            ; preds = %dec_label_pc_1000dc5d
  %v2_1000dc66 = load i32, i32* @ecx, align 4
  %v1_1000dc68 = add i32 %v2_1000dc66, 44
  %v2_1000dc68 = inttoptr i32 %v1_1000dc68 to i32*
  %v3_1000dc68 = load i32, i32* %v2_1000dc68, align 4
  store i32 %v3_1000dc68, i32* %eax.global-to-local, align 4
  %v0_1000dc6b = load i32, i32* @esi, align 4
  store i32 %v0_1000dc6b, i32* @ecx, align 4
  br label %dec_label_pc_1000dc6f

dec_label_pc_1000dc6f:                            ; preds = %dec_label_pc_1000dc5d.dec_label_pc_1000dc6f_crit_edge, %dec_label_pc_1000dc66
  %v0_1000dc71 = phi i32 [ %v0_1000dc71.pre, %dec_label_pc_1000dc5d.dec_label_pc_1000dc6f_crit_edge ], [ %v3_1000dc68, %dec_label_pc_1000dc66 ]
  ret i32 %v0_1000dc71
}

define i32 @"??0_Init_locks@std@@QAE@XZ.10"() local_unnamed_addr {
dec_label_pc_1000dc80:
  %edx.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st7.global-to-local = alloca x86_fp80, align 4
  %xmm0.global-to-local = alloca i128, align 8
  %v0_1000dc84 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_1000dc84 = call i128 @__asm_xorps(i128 %v0_1000dc84, i128 %v0_1000dc84)
  store i128 %v2_1000dc84, i128* %xmm0.global-to-local, align 8
  store i32 0, i32* @ebx, align 4
  %v0_1000dc8b = load i32, i32* @ecx, align 4
  store i32 %v0_1000dc8b, i32* @esi, align 4
  %v3_1000dc8d = add i32 %v0_1000dc8b, 8
  %v4_1000dc8d = inttoptr i32 %v3_1000dc8d to i8*
  store i8 0, i8* %v4_1000dc8d, align 1
  %v0_1000dc90 = load i32, i32* @ebx, align 4
  %v1_1000dc90 = load i32, i32* @esi, align 4
  %v2_1000dc90 = add i32 %v1_1000dc90, 12
  %v3_1000dc90 = inttoptr i32 %v2_1000dc90 to i32*
  store i32 %v0_1000dc90, i32* %v3_1000dc90, align 4
  %v0_1000dc93 = load i32, i32* @ebx, align 4
  %v1_1000dc93 = load i32, i32* @esi, align 4
  %v2_1000dc93 = add i32 %v1_1000dc93, 16
  %v3_1000dc93 = inttoptr i32 %v2_1000dc93 to i32*
  store i32 %v0_1000dc93, i32* %v3_1000dc93, align 4
  %v0_1000dc96 = load i32, i32* @ebx, align 4
  %v1_1000dc96 = load i32, i32* @esi, align 4
  %v2_1000dc96 = add i32 %v1_1000dc96, 20
  %v3_1000dc96 = inttoptr i32 %v2_1000dc96 to i32*
  store i32 %v0_1000dc96, i32* %v3_1000dc96, align 4
  %v0_1000dc99 = load i32, i32* @ebx, align 4
  %v1_1000dc99 = load i32, i32* @esi, align 4
  %v2_1000dc99 = add i32 %v1_1000dc99, 4
  %v3_1000dc99 = inttoptr i32 %v2_1000dc99 to i32*
  store i32 %v0_1000dc99, i32* %v3_1000dc99, align 4
  %v0_1000dc9c = load i32, i32* @esi, align 4
  %v1_1000dc9c = add i32 %v0_1000dc9c, 24
  %v2_1000dc9c = inttoptr i32 %v1_1000dc9c to i32*
  store i32 ptrtoint (i32* @global_var_10023f84.469 to i32), i32* %v2_1000dc9c, align 4
  %v0_1000dca3 = load i32, i32* @esi, align 4
  %v1_1000dca3 = inttoptr i32 %v0_1000dca3 to i32*
  store i32 ptrtoint (%vtable_1002401c_type* @global_var_1002401c.470 to i32), i32* %v1_1000dca3, align 4
  %v0_1000dca9 = load i32, i32* @esi, align 4
  %v1_1000dca9 = add i32 %v0_1000dca9, 24
  %v2_1000dca9 = inttoptr i32 %v1_1000dca9 to i32*
  store i32 ptrtoint (%vtable_10023ff4_type* @global_var_10023ff4.471 to i32), i32* %v2_1000dca9, align 4
  %v0_1000dcb0 = load i32, i32* @ebx, align 4
  %v1_1000dcb0 = load i32, i32* @esi, align 4
  %v2_1000dcb0 = add i32 %v1_1000dcb0, 68
  %v3_1000dcb0 = inttoptr i32 %v2_1000dcb0 to i32*
  store i32 %v0_1000dcb0, i32* %v3_1000dcb0, align 4
  %v0_1000dcb3 = load i32, i32* @ebx, align 4
  %v1_1000dcb3 = load i32, i32* @esi, align 4
  %v2_1000dcb3 = add i32 %v1_1000dcb3, 72
  %v3_1000dcb3 = inttoptr i32 %v2_1000dcb3 to i32*
  store i32 %v0_1000dcb3, i32* %v3_1000dcb3, align 4
  %v0_1000dcb6 = load i32, i32* @ebx, align 4
  %v1_1000dcb6 = load i32, i32* @esi, align 4
  %v2_1000dcb6 = add i32 %v1_1000dcb6, 76
  %v3_1000dcb6 = inttoptr i32 %v2_1000dcb6 to i32*
  store i32 %v0_1000dcb6, i32* %v3_1000dcb6, align 4
  %v0_1000dcb9 = load i32, i32* @ebx, align 4
  %v1_1000dcb9 = load i32, i32* @esi, align 4
  %v2_1000dcb9 = add i32 %v1_1000dcb9, 80
  %v3_1000dcb9 = inttoptr i32 %v2_1000dcb9 to i32*
  store i32 %v0_1000dcb9, i32* %v3_1000dcb9, align 4
  %v0_1000dcbc = load i32, i32* @ebx, align 4
  %v1_1000dcbc = load i32, i32* @esi, align 4
  %v2_1000dcbc = add i32 %v1_1000dcbc, 84
  %v3_1000dcbc = inttoptr i32 %v2_1000dcbc to i32*
  store i32 %v0_1000dcbc, i32* %v3_1000dcbc, align 4
  %v0_1000dcc1 = load i32, i32* @esi, align 4
  %v2_1000dcc1 = add i32 %v0_1000dcc1, 28
  %v3_1000dcc1 = inttoptr i32 %v2_1000dcc1 to i32*
  store i32 %v0_1000dcc1, i32* %v3_1000dcc1, align 4
  %v0_1000dcc4 = load i32, i32* @esi, align 4
  %v1_1000dcc4 = add i32 %v0_1000dcc4, 32
  %v2_1000dcc4 = inttoptr i32 %v1_1000dcc4 to i32*
  store i32 ptrtoint (i32* @global_var_10024110.472 to i32), i32* %v2_1000dcc4, align 4
  %v0_1000dccb = load i32, i32* @ebx, align 4
  %v1_1000dccb = trunc i32 %v0_1000dccb to i8
  %v2_1000dccb = load i32, i32* @esi, align 4
  %v3_1000dccb = add i32 %v2_1000dccb, 52
  %v4_1000dccb = inttoptr i32 %v3_1000dccb to i8*
  store i8 %v1_1000dccb, i8* %v4_1000dccb, align 1
  %v1_1000dcce = call i32 @__asm_movss(i128 %v2_1000dc84)
  %v2_1000dcce = load i32, i32* @esi, align 4
  %v3_1000dcce = add i32 %v2_1000dcce, 56
  %v4_1000dcce = inttoptr i32 %v3_1000dcce to i32*
  store i32 %v1_1000dcce, i32* %v4_1000dcce, align 4
  %v0_1000dcd3 = load i32, i32* @ebx, align 4
  %v1_1000dcd3 = trunc i32 %v0_1000dcd3 to i8
  %v2_1000dcd3 = load i32, i32* @esi, align 4
  %v3_1000dcd3 = add i32 %v2_1000dcd3, 60
  %v4_1000dcd3 = inttoptr i32 %v3_1000dcd3 to i8*
  store i8 %v1_1000dcd3, i8* %v4_1000dcd3, align 1
  %v1_1000dcd6 = call i32 @__asm_movss(i128 %v2_1000dc84)
  %v2_1000dcd6 = load i32, i32* @esi, align 4
  %v3_1000dcd6 = add i32 %v2_1000dcd6, 64
  %v4_1000dcd6 = inttoptr i32 %v3_1000dcd6 to i32*
  store i32 %v1_1000dcd6, i32* %v4_1000dcd6, align 4
  %v0_1000dcdb = load i32, i32* @esi, align 4
  %v1_1000dcdb = add i32 %v0_1000dcdb, 40
  %v2_1000dcdb = inttoptr i32 %v1_1000dcdb to i32*
  store i32 2, i32* %v2_1000dcdb, align 4
  %v1_1000dce2 = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  %v0_1000dce7 = load i32, i32* @esi, align 4
  %v1_1000dce7 = add i32 %v0_1000dce7, 40
  %v2_1000dce7 = inttoptr i32 %v1_1000dce7 to i32*
  %v3_1000dce7 = load i32, i32* %v2_1000dce7, align 4
  store i32 %v3_1000dce7, i32* @ecx, align 4
  %v1_1000dcea = add i32 %v0_1000dce7, 32
  %v2_1000dcea = inttoptr i32 %v1_1000dcea to i32*
  %v3_1000dcea = load i32, i32* %v2_1000dcea, align 4
  store i32 %v3_1000dcea, i32* %edx.global-to-local, align 4
  %v2_1000dcf0 = add i32 %v0_1000dce7, 36
  %v3_1000dcf0 = inttoptr i32 %v2_1000dcf0 to i32*
  store i32 %v1_1000dce2, i32* %v3_1000dcf0, align 4
  %v0_1000dcf3 = call i32 @_memcpy.1()
  %v0_1000dcf8 = load i32, i32* @esi, align 4
  %v1_1000dcf8 = add i32 %v0_1000dcf8, 36
  %v2_1000dcf8 = inttoptr i32 %v1_1000dcf8 to i32*
  %v3_1000dcf8 = load i32, i32* %v2_1000dcf8, align 4
  store i32 %v0_1000dcf8, i32* @ecx, align 4
  %v1_1000dd01 = call i32 @function_1000d470(i32 %v3_1000dcf8)
  %v4_1000dd06 = trunc i32 %v1_1000dd01 to i8
  %v5_1000dd06 = icmp eq i8 %v4_1000dd06, 0
  %v1_1000dd08 = icmp eq i1 %v5_1000dd06, false
  br i1 %v1_1000dd08, label %dec_label_pc_1000dd59, label %dec_label_pc_1000dd0a

dec_label_pc_1000dd0a:                            ; preds = %dec_label_pc_1000dc80
  %v0_1000dd0a = load i32, i32* @esi, align 4
  %v1_1000dd0a = add i32 %v0_1000dd0a, 36
  %v2_1000dd0a = inttoptr i32 %v1_1000dd0a to i32*
  %v3_1000dd0a = load i32, i32* %v2_1000dd0a, align 4
  store i32 %v3_1000dd0a, i32* @ecx, align 4
  %v1_1000dd0e = call i32 @function_10012dd7(i32 %v3_1000dd0a)
  %v1_1000dd13 = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v2_1000dd13 = load i32, i32* @esi, align 4
  %v3_1000dd13 = add i32 %v2_1000dd13, 44
  %v4_1000dd13 = fptrunc x86_fp80 %v1_1000dd13 to float
  %v5_1000dd13 = inttoptr i32 %v3_1000dd13 to float*
  store float %v4_1000dd13, float* %v5_1000dd13, align 4
  %v0_1000dd16 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_1000dd16 = load x86_fp80, x86_fp80* %st7.global-to-local, align 4
  %v4_1000dd16 = fptrunc x86_fp80 %v1_1000dd16 to float
  %v6_1000dd16 = bitcast float %v4_1000dd16 to i32
  %v7_1000dd16 = add i3 %v0_1000dd16, 1
  store i3 %v7_1000dd16, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_1000dd1f = and i32 %v6_1000dd16, 2139095040
  store i32 %v1_1000dd1f, i32* %edx.global-to-local, align 4
  %v9_1000dd25 = icmp eq i32 %v1_1000dd1f, 2139095040
  %v1_1000dd2b = icmp eq i1 %v9_1000dd25, false
  br i1 %v1_1000dd2b, label %dec_label_pc_1000dd51, label %dec_label_pc_1000dd2d

dec_label_pc_1000dd2d:                            ; preds = %dec_label_pc_1000dd0a
  %v0_1000dd3b = call i32 @Warning()
  %v1_1000dd41 = call i128 @__asm_movss.11(i32 2139095039)
  store i128 %v1_1000dd41, i128* %xmm0.global-to-local, align 8
  %v1_1000dd4c = call i32 @__asm_movss(i128 %v1_1000dd41)
  %v2_1000dd4c = load i32, i32* @esi, align 4
  %v3_1000dd4c = add i32 %v2_1000dd4c, 44
  %v4_1000dd4c = inttoptr i32 %v3_1000dd4c to i32*
  store i32 %v1_1000dd4c, i32* %v4_1000dd4c, align 4
  br label %dec_label_pc_1000dd51

dec_label_pc_1000dd51:                            ; preds = %dec_label_pc_1000dd2d, %dec_label_pc_1000dd0a
  %v0_1000dd51 = load i32, i32* @esi, align 4
  %v1_1000dd51 = add i32 %v0_1000dd51, 44
  %v2_1000dd51 = inttoptr i32 %v1_1000dd51 to i32*
  %v3_1000dd51 = load i32, i32* %v2_1000dd51, align 4
  %v4_1000dd51 = call i32 @__asm_cvttss2si(i32 %v3_1000dd51)
  store i32 %v4_1000dd51, i32* @ecx, align 4
  %v1_1000dd56 = load i32, i32* @esi, align 4
  %v2_1000dd56 = add i32 %v1_1000dd56, 48
  %v3_1000dd56 = inttoptr i32 %v2_1000dd56 to i32*
  store i32 %v4_1000dd51, i32* %v3_1000dd56, align 4
  br label %dec_label_pc_1000dd59

dec_label_pc_1000dd59:                            ; preds = %dec_label_pc_1000dd51, %dec_label_pc_1000dc80
  %v0_1000dd59 = load i32, i32* @global_var_100286fc, align 4
  store i32 %v0_1000dd59, i32* %edx.global-to-local, align 4
  %v0_1000dd5f = load i32, i32* @ebx, align 4
  %v1_1000dd5f = trunc i32 %v0_1000dd5f to i8
  %v2_1000dd5f = load i32, i32* @esi, align 4
  %v3_1000dd5f = add i32 %v2_1000dd5f, 8
  %v4_1000dd5f = inttoptr i32 %v3_1000dd5f to i8*
  store i8 %v1_1000dd5f, i8* %v4_1000dd5f, align 1
  %v0_1000dd62 = load i32, i32* @esi, align 4
  %v1_1000dd62 = add i32 %v0_1000dd62, 12
  %v2_1000dd62 = inttoptr i32 %v1_1000dd62 to i32*
  store i32 ptrtoint (i32* @global_var_10022600.47 to i32), i32* %v2_1000dd62, align 4
  %v0_1000dd69 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000dd69 = load i32, i32* @esi, align 4
  %v2_1000dd69 = add i32 %v1_1000dd69, 16
  %v3_1000dd69 = inttoptr i32 %v2_1000dd69 to i32*
  store i32 %v0_1000dd69, i32* %v3_1000dd69, align 4
  %v0_1000dd6c = load i32, i32* @ebx, align 4
  %v1_1000dd6c = load i32, i32* @esi, align 4
  %v2_1000dd6c = add i32 %v1_1000dd6c, 20
  %v3_1000dd6c = inttoptr i32 %v2_1000dd6c to i32*
  store i32 %v0_1000dd6c, i32* %v3_1000dd6c, align 4
  %v0_1000dd6f = load i32, i32* @global_var_1002d340.463, align 4
  %v1_1000dd74 = load i32, i32* @esi, align 4
  %v2_1000dd74 = add i32 %v1_1000dd74, 4
  %v3_1000dd74 = inttoptr i32 %v2_1000dd74 to i32*
  store i32 %v0_1000dd6f, i32* %v3_1000dd74, align 4
  %v0_1000dd77 = load i32, i32* @esi, align 4
  store i32 %v0_1000dd77, i32* @global_var_1002d340.463, align 4
  %v0_1000dd7d = load i32, i32* @global_var_1002d344.461, align 4
  %v1_1000dd7d = load i32, i32* @ebx, align 4
  %v12_1000dd7d = icmp eq i32 %v0_1000dd7d, %v1_1000dd7d
  br i1 %v12_1000dd7d, label %dec_label_pc_1000dd8e, label %dec_label_pc_1000dd85

dec_label_pc_1000dd85:                            ; preds = %dec_label_pc_1000dd59
  %v2_1000dd85 = load i32, i32* @ecx, align 4
  store i32 %v2_1000dd85, i32* %edx.global-to-local, align 4
  store i32 %v0_1000dd77, i32* @ecx, align 4
  br label %dec_label_pc_1000dd8e

dec_label_pc_1000dd8e:                            ; preds = %dec_label_pc_1000dd85, %dec_label_pc_1000dd59
  %v1_1000dd8e = inttoptr i32 %v0_1000dd77 to i32*
  store i32 ptrtoint (i32* @global_var_100240c4.473 to i32), i32* %v1_1000dd8e, align 4
  %v0_1000dd94 = load i32, i32* @esi, align 4
  %v1_1000dd94 = add i32 %v0_1000dd94, 24
  %v2_1000dd94 = inttoptr i32 %v1_1000dd94 to i32*
  store i32 ptrtoint (i32* @global_var_100240a0.474 to i32), i32* %v2_1000dd94, align 4
  %v0_1000dd9b = load i32, i32* @esi, align 4
  ret i32 %v0_1000dd9b
}

define i32 @function_1000ddb0() local_unnamed_addr {
dec_label_pc_1000ddb0:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000ddb0 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000ddb0
}

define i32 @function_1000ddc0() local_unnamed_addr {
dec_label_pc_1000ddc0:
  ret i32 ptrtoint (i32* @global_var_10022600.47 to i32)
}

define i32 @function_1000ddd0() local_unnamed_addr {
dec_label_pc_1000ddd0:
  %v11_1000ddd0 = load i32, i32* @eax, align 4
  %v12_1000ddd0 = and i32 %v11_1000ddd0, -256
  ret i32 %v12_1000ddd0
}

define i32 @function_1000dde0() local_unnamed_addr {
dec_label_pc_1000dde0:
  %v0_1000dde0 = load i32, i32* @ecx, align 4
  %v1_1000dde0 = add i32 %v0_1000dde0, -24
  store i32 %v1_1000dde0, i32* @ecx, align 4
  %v0_1000dde3 = call i32 @function_1000ddc0()
  ret i32 %v0_1000dde3
}

define i32 @function_1000ddf0() local_unnamed_addr {
dec_label_pc_1000ddf0:
  %v0_1000ddf0 = load i32, i32* @ecx, align 4
  %v1_1000ddf0 = add i32 %v0_1000ddf0, -24
  store i32 %v1_1000ddf0, i32* @ecx, align 4
  %v0_1000ddf3 = call i32 @function_1000ddd0()
  ret i32 %v0_1000ddf3
}

define i32 @function_1000de00(i8 %arg1) {
dec_label_pc_1000de00:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000de03 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000de03, i32* %stack_var_-8, align 4
  %v0_1000de04 = load i32, i32* @ecx, align 4
  store i32 %v0_1000de04, i32* @esi, align 4
  %v1_1000de06 = add i32 %v0_1000de04, 36
  %v2_1000de06 = inttoptr i32 %v1_1000de06 to i32*
  %v3_1000de06 = load i32, i32* %v2_1000de06, align 4
  %v1_1000de09 = inttoptr i32 %v0_1000de04 to i32*
  store i32 ptrtoint (%vtable_1002401c_type* @global_var_1002401c.470 to i32), i32* %v1_1000de09, align 4
  %v0_1000de0f = load i32, i32* @esi, align 4
  %v1_1000de0f = add i32 %v0_1000de0f, 24
  %v2_1000de0f = inttoptr i32 %v1_1000de0f to i32*
  store i32 ptrtoint (%vtable_10023ff4_type* @global_var_10023ff4.471 to i32), i32* %v2_1000de0f, align 4
  %v1_1000de16 = icmp eq i32 %v3_1000de06, 0
  br i1 %v1_1000de16, label %dec_label_pc_1000de2a, label %dec_label_pc_1000de1a

dec_label_pc_1000de1a:                            ; preds = %dec_label_pc_1000de00
  %v1_1000de1b = call i32 @"??3@YAXPAX@Z"(i32 %v3_1000de06)
  %v0_1000de23 = load i32, i32* @esi, align 4
  %v1_1000de23 = add i32 %v0_1000de23, 36
  %v2_1000de23 = inttoptr i32 %v1_1000de23 to i32*
  store i32 0, i32* %v2_1000de23, align 4
  br label %dec_label_pc_1000de2a

dec_label_pc_1000de2a:                            ; preds = %dec_label_pc_1000de1a, %dec_label_pc_1000de00
  %v0_1000de2a = load i32, i32* @esi, align 4
  %v1_1000de2a = add i32 %v0_1000de2a, 68
  store i32 %v1_1000de2a, i32* @ecx, align 4
  %v0_1000de2d = call i32 @function_1000da70()
  %v4_1000de32 = and i8 %arg1, 1
  %v5_1000de32 = icmp eq i8 %v4_1000de32, 0
  %v0_1000de36 = load i32, i32* @esi, align 4
  %v1_1000de36 = inttoptr i32 %v0_1000de36 to i32*
  store i32 ptrtoint (%vtable_10023f50_type* @global_var_10023f50.467 to i32), i32* %v1_1000de36, align 4
  br i1 %v5_1000de32, label %dec_label_pc_1000de47, label %dec_label_pc_1000de3e

dec_label_pc_1000de3e:                            ; preds = %dec_label_pc_1000de2a
  %v0_1000de3e = load i32, i32* @esi, align 4
  %v1_1000de3f = call i32 @"??3@YAXPAX@Z"(i32 %v0_1000de3e)
  br label %dec_label_pc_1000de47

dec_label_pc_1000de47:                            ; preds = %dec_label_pc_1000de3e, %dec_label_pc_1000de2a
  %v0_1000de47 = load i32, i32* @esi, align 4
  %v2_1000de49 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000de49, i32* %esi.global-to-local, align 4
  ret i32 %v0_1000de47
}

define i32 @function_1000de50(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000de50:
  %v2_1000de54 = call i32 @function_100092b0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  ret i32 %v2_1000de54
}

define i32 @function_1000de60() local_unnamed_addr {
dec_label_pc_1000de60:
  %v0_1000de60 = call i32 @function_10009400()
  ret i32 %v0_1000de60
}

define i32 @function_1000de70(i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_1000de70:
  %tmp7 = ptrtoint i32* %arg2 to i32
  %tmp8 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000de70 = load i32, i32* @ebp, align 4
  store i32 %v0_1000de70, i32* %stack_var_-4, align 4
  %v0_1000de73 = load i32, i32* @esi, align 4
  store i32 %v0_1000de73, i32* %stack_var_-8, align 4
  %v1_1000de77 = icmp eq i32* %arg1, null
  br i1 %v1_1000de77, label %dec_label_pc_1000deaf, label %dec_label_pc_1000de7b

dec_label_pc_1000de7b:                            ; preds = %dec_label_pc_1000de70
  %v0_1000de7b = load i32, i32* @edi, align 4
  store i32 %v0_1000de7b, i32* %stack_var_-12, align 4
  %v1_1000de7f = icmp eq i32* %arg2, null
  br i1 %v1_1000de7f, label %dec_label_pc_1000deae, label %dec_label_pc_1000de83

dec_label_pc_1000de83:                            ; preds = %dec_label_pc_1000de7b
  %v4_1000de8b = call i32* @_memset(i32* nonnull %arg1, i32 0, i32 256)
  %v6_1000de8b = ptrtoint i32* %v4_1000de8b to i32
  %v1_1000de90 = bitcast i32* %arg2 to i8*
  %v2_1000de90 = load i8, i8* %v1_1000de90, align 1
  %v3_1000de90 = zext i8 %v2_1000de90 to i32
  %v5_1000de90 = and i32 %v6_1000de8b, -256
  %v6_1000de90 = or i32 %v3_1000de90, %v5_1000de90
  store i32 %v6_1000de90, i32* @eax, align 4
  %v5_1000de95 = icmp eq i8 %v2_1000de90, 0
  br i1 %v5_1000de95, label %dec_label_pc_1000deae, label %dec_label_pc_1000de99

dec_label_pc_1000de99:                            ; preds = %dec_label_pc_1000de83
  store i32 %tmp7, i32* @ecx, align 4
  br label %dec_label_pc_1000dea0

dec_label_pc_1000dea0:                            ; preds = %dec_label_pc_1000dea0, %dec_label_pc_1000de99
  %v0_1000dea4 = phi i32 [ %v6_1000dea8, %dec_label_pc_1000dea0 ], [ %v6_1000de90, %dec_label_pc_1000de99 ]
  %v0_1000dea3 = phi i32 [ %v0_1000dea8, %dec_label_pc_1000dea0 ], [ %tmp7, %dec_label_pc_1000de99 ]
  %v1_1000dea3 = add i32 %v0_1000dea3, 1
  store i32 %v1_1000dea3, i32* @ecx, align 4
  %v3_1000dea4 = add i32 %v0_1000dea4, %tmp8
  %v4_1000dea4 = inttoptr i32 %v3_1000dea4 to i8*
  store i8 1, i8* %v4_1000dea4, align 1
  %v0_1000dea8 = load i32, i32* @ecx, align 4
  %v1_1000dea8 = inttoptr i32 %v0_1000dea8 to i8*
  %v2_1000dea8 = load i8, i8* %v1_1000dea8, align 1
  %v3_1000dea8 = zext i8 %v2_1000dea8 to i32
  %v4_1000dea8 = load i32, i32* @eax, align 4
  %v5_1000dea8 = and i32 %v4_1000dea8, -256
  %v6_1000dea8 = or i32 %v5_1000dea8, %v3_1000dea8
  store i32 %v6_1000dea8, i32* @eax, align 4
  %v5_1000deaa = icmp eq i8 %v2_1000dea8, 0
  %v1_1000deac = icmp eq i1 %v5_1000deaa, false
  br i1 %v1_1000deac, label %dec_label_pc_1000dea0, label %dec_label_pc_1000deae

dec_label_pc_1000deae:                            ; preds = %dec_label_pc_1000dea0, %dec_label_pc_1000de83, %dec_label_pc_1000de7b
  %v2_1000deae = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000deae, i32* @edi, align 4
  %v2_1000deaf.pre = load i32, i32* %stack_var_-8, align 4
  %v2_1000deb0.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1000deaf

dec_label_pc_1000deaf:                            ; preds = %dec_label_pc_1000deae, %dec_label_pc_1000de70
  %v2_1000deb0 = phi i32 [ %v2_1000deb0.pre, %dec_label_pc_1000deae ], [ %v0_1000de70, %dec_label_pc_1000de70 ]
  %v2_1000deaf = phi i32 [ %v2_1000deaf.pre, %dec_label_pc_1000deae ], [ %v0_1000de73, %dec_label_pc_1000de70 ]
  store i32 %v2_1000deaf, i32* @esi, align 4
  store i32 %v2_1000deb0, i32* @ebp, align 4
  %v0_1000deb1 = load i32, i32* @eax, align 4
  ret i32 %v0_1000deb1
}

define i32 @function_1000dec0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1000dec0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000dec4 = load i32, i32* @edi, align 4
  store i32 %v0_1000dec4, i32* %stack_var_-12, align 4
  %v4_1000dec4 = ptrtoint i32* %stack_var_-12 to i32
  %v0_1000dec5 = load i32, i32* @ecx, align 4
  store i32 %v0_1000dec5, i32* %edi.global-to-local, align 4
  %v1_1000dec7 = add i32 %v0_1000dec5, 8
  %v2_1000dec7 = inttoptr i32 %v1_1000dec7 to i32*
  %v3_1000dec7 = load i32, i32* %v2_1000dec7, align 4
  %v4_1000dec7 = sext i32 %v3_1000dec7 to i64
  %v3_1000deca = icmp slt i32 %v3_1000dec7, 0
  br i1 %v3_1000deca, label %dec_label_pc_1000df60, label %dec_label_pc_1000ded2

dec_label_pc_1000ded2:                            ; preds = %dec_label_pc_1000dec0
  %v2_1000deca = icmp eq i32 %v3_1000dec7, 0
  %v1_1000ded2 = add i32 %v0_1000dec5, 4
  %v2_1000ded2 = inttoptr i32 %v1_1000ded2 to i32*
  %v3_1000ded2 = load i32, i32* %v2_1000ded2, align 4
  store i32 %v3_1000ded2, i32* @eax, align 4
  %v2_1000ded8 = add i32 %v3_1000ded2, %arg1
  %v12_1000ded8 = icmp eq i32 %v2_1000ded8, 0
  store i32 %v2_1000ded8, i32* @ecx, align 4
  br i1 %v2_1000deca, label %dec_label_pc_1000deea, label %dec_label_pc_1000dede

dec_label_pc_1000dede:                            ; preds = %dec_label_pc_1000ded2
  %v1_1000dede = add i32 %v2_1000ded8, -1
  %v1_1000dee1 = ashr i32 %v1_1000dede, 31
  %v3_1000dee2 = zext i32 %v1_1000dede to i64
  %v5_1000dee2 = zext i32 %v1_1000dee1 to i64
  %v6_1000dee2 = mul nuw i64 %v5_1000dee2, 4294967296
  %v7_1000dee2 = or i64 %v6_1000dee2, %v3_1000dee2
  %v9_1000dee2 = sdiv i64 %v7_1000dee2, %v4_1000dec7
  %v10_1000dee2 = trunc i64 %v9_1000dee2 to i32
  %v1_1000dee4 = add i32 %v10_1000dee2, 1
  %v5_1000dee5 = mul i32 %v1_1000dee4, %v3_1000dec7
  store i32 %v5_1000dee5, i32* @eax, align 4
  br label %dec_label_pc_1000defd

dec_label_pc_1000deea:                            ; preds = %dec_label_pc_1000ded2
  %v1_1000deea = icmp eq i32 %v3_1000ded2, 0
  %v1_1000deec = icmp eq i1 %v1_1000deea, false
  br i1 %v1_1000deec, label %dec_label_pc_1000def3, label %dec_label_pc_1000deee

dec_label_pc_1000deee:                            ; preds = %dec_label_pc_1000deea
  store i32 3, i32* @eax, align 4
  br label %dec_label_pc_1000def3

dec_label_pc_1000def3:                            ; preds = %dec_label_pc_1000deee, %dec_label_pc_1000deea
  %eax.promoted3 = phi i32 [ 3, %dec_label_pc_1000deee ], [ %v3_1000ded2, %dec_label_pc_1000deea ]
  %v5_1000def5 = icmp slt i32 %eax.promoted3, %v2_1000ded8
  br i1 %v5_1000def5, label %dec_label_pc_1000def7, label %dec_label_pc_1000defd

dec_label_pc_1000def7:                            ; preds = %dec_label_pc_1000def3, %dec_label_pc_1000def7
  %v2_1000def74 = phi i32 [ %v2_1000def7, %dec_label_pc_1000def7 ], [ %eax.promoted3, %dec_label_pc_1000def3 ]
  %v2_1000def7 = mul i32 %v2_1000def74, 2
  %v5_1000defb = icmp slt i32 %v2_1000def7, %v2_1000ded8
  br i1 %v5_1000defb, label %dec_label_pc_1000def7, label %dec_label_pc_1000defd.loopexit

dec_label_pc_1000defd.loopexit:                   ; preds = %dec_label_pc_1000def7
  store i32 %v2_1000def7, i32* @eax, align 4
  br label %dec_label_pc_1000defd

dec_label_pc_1000defd:                            ; preds = %dec_label_pc_1000defd.loopexit, %dec_label_pc_1000def3, %dec_label_pc_1000dede
  %eax.promoted = phi i32 [ %v2_1000def7, %dec_label_pc_1000defd.loopexit ], [ %eax.promoted3, %dec_label_pc_1000def3 ], [ %v5_1000dee5, %dec_label_pc_1000dede ]
  %v1_1000defd = and i32 %eax.promoted, 65535
  %v5_1000df02 = icmp slt i32 %v1_1000defd, %v2_1000ded8
  br i1 %v5_1000df02, label %dec_label_pc_1000df04, label %dec_label_pc_1000df2e

dec_label_pc_1000df04:                            ; preds = %dec_label_pc_1000defd
  %v4_1000df04 = trunc i32 %eax.promoted to i16
  %v5_1000df04 = icmp eq i16 %v4_1000df04, 0
  %v1_1000df07 = icmp eq i1 %v5_1000df04, false
  br i1 %v1_1000df07, label %dec_label_pc_1000df14, label %dec_label_pc_1000df09

dec_label_pc_1000df09:                            ; preds = %dec_label_pc_1000df04
  %v8_1000df0f = icmp sgt i32 %v2_1000ded8, 65535
  br i1 %v8_1000df0f, label %dec_label_pc_1000df14, label %dec_label_pc_1000df11

dec_label_pc_1000df11:                            ; preds = %dec_label_pc_1000df09
  %v1_1000df11 = add i32 %eax.promoted, -1
  store i32 %v1_1000df11, i32* @eax, align 4
  br label %dec_label_pc_1000df2e

dec_label_pc_1000df14:                            ; preds = %dec_label_pc_1000df09, %dec_label_pc_1000df04
  %v1_1000df14 = and i32 %v2_1000ded8, 65535
  %v12_1000df17 = icmp eq i32 %v1_1000df14, %v2_1000ded8
  %v1_1000df19 = icmp eq i1 %v12_1000df17, false
  br i1 %v1_1000df19, label %dec_label_pc_1000df60, label %dec_label_pc_1000df20

dec_label_pc_1000df20:                            ; preds = %dec_label_pc_1000df14, %dec_label_pc_1000df20
  %v2_1000df252 = phi i32 [ %v2_1000df25, %dec_label_pc_1000df20 ], [ %eax.promoted, %dec_label_pc_1000df14 ]
  %v2_1000df20 = add i32 %v2_1000df252, %v2_1000ded8
  %v1_1000df22 = ashr i32 %v2_1000df20, 31
  %v2_1000df23 = sub i32 %v2_1000df20, %v1_1000df22
  %v2_1000df25 = sdiv i32 %v2_1000df23, 2
  %v1_1000df27 = and i32 %v2_1000df25, 65535
  %v5_1000df2c = icmp slt i32 %v1_1000df27, %v2_1000ded8
  br i1 %v5_1000df2c, label %dec_label_pc_1000df20, label %dec_label_pc_1000df2e.loopexit

dec_label_pc_1000df2e.loopexit:                   ; preds = %dec_label_pc_1000df20
  store i32 %v2_1000df25, i32* @eax, align 4
  br label %dec_label_pc_1000df2e

dec_label_pc_1000df2e:                            ; preds = %dec_label_pc_1000df2e.loopexit, %dec_label_pc_1000defd, %dec_label_pc_1000df11
  %v0_1000df30 = phi i32 [ %v2_1000df25, %dec_label_pc_1000df2e.loopexit ], [ %eax.promoted, %dec_label_pc_1000defd ], [ %v1_1000df11, %dec_label_pc_1000df11 ]
  store i32 %v0_1000df30, i32* %v2_1000ded2, align 4
  %v0_1000df33 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000df33, i32* @ecx, align 4
  %v1_1000df39 = inttoptr i32 %v0_1000df33 to i32*
  %v2_1000df39 = load i32, i32* %v1_1000df39, align 4
  store i32 %v2_1000df39, i32* @ecx, align 4
  %v0_1000df3b = load i32, i32* @eax, align 4
  %v2_1000df40 = mul i32 %v0_1000df3b, 12
  store i32 %v2_1000df40, i32* %eax.global-to-local, align 4
  store i32 %v2_1000df40, i32* %stack_var_-16, align 4
  br i1 %v12_1000ded8, label %dec_label_pc_1000df57, label %dec_label_pc_1000df47

dec_label_pc_1000df47:                            ; preds = %dec_label_pc_1000df2e
  store i32 %v2_1000ded8, i32* %stack_var_-20, align 4
  %v1_1000df4f = load i32, i32* %edi.global-to-local, align 4
  %v2_1000df4f = inttoptr i32 %v1_1000df4f to i32*
  store i32 %v2_1000df40, i32* %v2_1000df4f, align 4
  %v2_1000df51 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1000df51, i32* @edi, align 4
  %v2_1000df52 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000df52, i32* @esi, align 4
  %v2_1000df53 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000df53, i32* @ebp, align 4
  %v0_1000df54 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000df54

dec_label_pc_1000df57:                            ; preds = %dec_label_pc_1000df2e
  %v1_1000df57 = inttoptr i32 %v2_1000df39 to i32*
  %v2_1000df57 = load i32, i32* %v1_1000df57, align 4
  %v1_1000df59 = add i32 %v2_1000df57, 4
  %v2_1000df59 = inttoptr i32 %v1_1000df59 to i32*
  %v3_1000df59 = load i32, i32* %v2_1000df59, align 4
  store i32 %v3_1000df59, i32* @eax, align 4
  %v1_1000df5e = load i32, i32* %edi.global-to-local, align 4
  %v2_1000df5e = inttoptr i32 %v1_1000df5e to i32*
  store i32 %v3_1000df59, i32* %v2_1000df5e, align 4
  %v0_1000df60.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000df60

dec_label_pc_1000df60:                            ; preds = %dec_label_pc_1000df57, %dec_label_pc_1000df14, %dec_label_pc_1000dec0
  %v0_1000df60 = phi i32 [ %v0_1000df60.pre, %dec_label_pc_1000df57 ], [ %v4_1000dec4, %dec_label_pc_1000df14 ], [ %v4_1000dec4, %dec_label_pc_1000dec0 ]
  %v1_1000df60 = inttoptr i32 %v0_1000df60 to i32*
  %v2_1000df60 = load i32, i32* %v1_1000df60, align 4
  store i32 %v2_1000df60, i32* @edi, align 4
  %v3_1000df60 = add i32 %v0_1000df60, 4
  %v1_1000df61 = inttoptr i32 %v3_1000df60 to i32*
  %v2_1000df61 = load i32, i32* %v1_1000df61, align 4
  store i32 %v2_1000df61, i32* @esi, align 4
  %v3_1000df61 = add i32 %v0_1000df60, 8
  %v1_1000df62 = inttoptr i32 %v3_1000df61 to i32*
  %v2_1000df62 = load i32, i32* %v1_1000df62, align 4
  store i32 %v2_1000df62, i32* @ebp, align 4
  %v0_1000df63 = load i32, i32* @eax, align 4
  ret i32 %v0_1000df63
}

define i32 @function_1000df70() local_unnamed_addr {
dec_label_pc_1000df70:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000df70 = load i32, i32* @ebp, align 4
  %v0_1000df73 = load i32, i32* @ecx, align 4
  %v0_1000df74 = load i32, i32* @esi, align 4
  store i32 %v0_1000df74, i32* %stack_var_-12, align 4
  store i32 %v0_1000df73, i32* @esi, align 4
  %v1_1000df77 = add i32 %v0_1000df73, 20
  %v2_1000df77 = inttoptr i32 %v1_1000df77 to i16*
  %v3_1000df77 = load i16, i16* %v2_1000df77, align 2
  %v4_1000df77 = zext i16 %v3_1000df77 to i32
  store i32 %v4_1000df77, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_1000df80 = icmp eq i16 %v3_1000df77, -1
  %v1_1000df83 = icmp eq i1 %v14_1000df80, false
  br i1 %v1_1000df83, label %dec_label_pc_1000e057, label %dec_label_pc_1000df89

dec_label_pc_1000df89:                            ; preds = %dec_label_pc_1000df70
  %v1_1000df89 = add i32 %v0_1000df73, 22
  %v2_1000df89 = inttoptr i32 %v1_1000df89 to i16*
  %v3_1000df89 = load i16, i16* %v2_1000df89, align 2
  %v4_1000df89 = zext i16 %v3_1000df89 to i32
  store i32 %v4_1000df89, i32* @ecx, align 4
  %v1_1000df91 = add i32 %v0_1000df73, 8
  %v2_1000df91 = inttoptr i32 %v1_1000df91 to i32*
  %v3_1000df91 = load i32, i32* %v2_1000df91, align 4
  store i32 %v3_1000df91, i32* @eax, align 4
  %v5_1000df96 = icmp slt i32 %v4_1000df89, %v3_1000df91
  br i1 %v5_1000df96, label %dec_label_pc_1000df98, label %dec_label_pc_1000dfb4

dec_label_pc_1000df98:                            ; preds = %dec_label_pc_1000df89
  %v3_1000df98 = load i16, i16* %v2_1000df89, align 2
  %v4_1000df98 = zext i16 %v3_1000df98 to i32
  store i32 %v4_1000df98, i32* @ecx, align 4
  %v1_1000df9c = add nuw nsw i32 %v4_1000df98, 1
  %v1_1000df9f = and i32 %v1_1000df9c, 65535
  store i32 %v1_1000df9f, i32* %edx.global-to-local, align 4
  %v5_1000dfa8 = icmp slt i32 %v1_1000df9f, %v3_1000df91
  br i1 %v5_1000dfa8, label %dec_label_pc_1000dfaa, label %dec_label_pc_1000dfad

dec_label_pc_1000dfaa:                            ; preds = %dec_label_pc_1000df98
  store i32 %v1_1000df9c, i32* @ecx, align 4
  br label %dec_label_pc_1000dfc5

dec_label_pc_1000dfad:                            ; preds = %dec_label_pc_1000df98
  store i32 65535, i32* @ecx, align 4
  br label %dec_label_pc_1000dfc5

dec_label_pc_1000dfb4:                            ; preds = %dec_label_pc_1000df89
  %v3_1000dfb4 = load i32, i32* %v2_1000df91, align 4
  store i32 %v3_1000dfb4, i32* @eax, align 4
  %v1_1000dfb9 = icmp eq i32 %v3_1000dfb4, 0
  %v2_1000dfb9 = icmp slt i32 %v3_1000dfb4, 0
  %v3_1000dfbb = icmp eq i1 %v2_1000dfb9, false
  %v4_1000dfbb = icmp eq i1 %v1_1000dfb9, false
  %v5_1000dfbb = icmp eq i1 %v3_1000dfbb, %v4_1000dfbb
  %v1_1000dfbf = select i1 %v5_1000dfbb, i32 0, i32 65535
  store i32 %v1_1000dfbf, i32* @ecx, align 4
  br label %dec_label_pc_1000dfc5

dec_label_pc_1000dfc5:                            ; preds = %dec_label_pc_1000dfb4, %dec_label_pc_1000dfad, %dec_label_pc_1000dfaa
  %v1_1000dfd7 = phi i32 [ %v3_1000dfb4, %dec_label_pc_1000dfb4 ], [ %v3_1000df91, %dec_label_pc_1000dfad ], [ %v3_1000df91, %dec_label_pc_1000dfaa ]
  %v0_1000dfc5 = phi i32 [ %v1_1000dfbf, %dec_label_pc_1000dfb4 ], [ 65535, %dec_label_pc_1000dfad ], [ %v1_1000df9c, %dec_label_pc_1000dfaa ]
  %v0_1000dfcc = load i32, i32* @edi, align 4
  %v3_1000dfcd = and i32 %v0_1000dfc5, 65535
  %v5_1000dfcd = and i32 %v0_1000dfcc, -65536
  %v6_1000dfcd = or i32 %v5_1000dfcd, %v3_1000dfcd
  store i32 %v6_1000dfcd, i32* @edi, align 4
  store i32 %v3_1000dfcd, i32* @ecx, align 4
  %v5_1000dfd9 = icmp slt i32 %v3_1000dfcd, %v1_1000dfd7
  br i1 %v5_1000dfd9, label %dec_label_pc_1000e044, label %dec_label_pc_1000dfdb

dec_label_pc_1000dfdb:                            ; preds = %dec_label_pc_1000dfc5
  %v1_1000dfdd = add i32 %v0_1000df73, 4
  store i32 %v1_1000dfdd, i32* @ecx, align 4
  %sext = mul i32 %v0_1000dfc5, 65536
  %v5_1000dfe0 = sdiv i32 %sext, 65536
  %v7_1000dfe0 = call i32 @function_1000dec0(i32 1, i32 %v0_1000dfcc, i32 %v0_1000df74, i32 %v0_1000df73, i32 %v5_1000dfe0, i32 %v0_1000df70)
  store i32 %v7_1000dfe0, i32* %eax.global-to-local, align 4
  %v0_1000dfe5 = load i32, i32* @esi, align 4
  %v1_1000dfe5 = add i32 %v0_1000dfe5, 22
  %v2_1000dfe5 = inttoptr i32 %v1_1000dfe5 to i16*
  %v3_1000dfe5 = load i16, i16* %v2_1000dfe5, align 2
  %v4_1000dfe5 = zext i16 %v3_1000dfe5 to i32
  store i32 %v4_1000dfe5, i32* @ecx, align 4
  %v1_1000dfed = add i32 %v0_1000dfe5, 8
  %v2_1000dfed = inttoptr i32 %v1_1000dfed to i32*
  %v3_1000dfed = load i32, i32* %v2_1000dfed, align 4
  store i32 %v3_1000dfed, i32* %eax.global-to-local, align 4
  %v5_1000dff2 = icmp slt i32 %v4_1000dfe5, %v3_1000dfed
  br i1 %v5_1000dff2, label %dec_label_pc_1000dff4, label %dec_label_pc_1000e010

dec_label_pc_1000dff4:                            ; preds = %dec_label_pc_1000dfdb
  %v3_1000dff4 = load i16, i16* %v2_1000dfe5, align 2
  %v4_1000dff4 = zext i16 %v3_1000dff4 to i32
  store i32 %v4_1000dff4, i32* @ecx, align 4
  %v1_1000dff8 = add nuw nsw i32 %v4_1000dff4, 1
  %v1_1000dffb = and i32 %v1_1000dff8, 65535
  store i32 %v1_1000dffb, i32* %edx.global-to-local, align 4
  %v5_1000e004 = icmp slt i32 %v1_1000dffb, %v3_1000dfed
  br i1 %v5_1000e004, label %dec_label_pc_1000e006, label %dec_label_pc_1000e009

dec_label_pc_1000e006:                            ; preds = %dec_label_pc_1000dff4
  store i32 %v1_1000dff8, i32* @ecx, align 4
  br label %dec_label_pc_1000e021

dec_label_pc_1000e009:                            ; preds = %dec_label_pc_1000dff4
  store i32 65535, i32* @ecx, align 4
  br label %dec_label_pc_1000e021

dec_label_pc_1000e010:                            ; preds = %dec_label_pc_1000dfdb
  %v3_1000e010 = load i32, i32* %v2_1000dfed, align 4
  store i32 %v3_1000e010, i32* %eax.global-to-local, align 4
  %v1_1000e015 = icmp eq i32 %v3_1000e010, 0
  %v2_1000e015 = icmp slt i32 %v3_1000e010, 0
  %v3_1000e017 = icmp eq i1 %v2_1000e015, false
  %v4_1000e017 = icmp eq i1 %v1_1000e015, false
  %v5_1000e017 = icmp eq i1 %v3_1000e017, %v4_1000e017
  %v1_1000e01b = select i1 %v5_1000e017, i32 0, i32 65535
  store i32 %v1_1000e01b, i32* @ecx, align 4
  br label %dec_label_pc_1000e021

dec_label_pc_1000e021:                            ; preds = %dec_label_pc_1000e010, %dec_label_pc_1000e009, %dec_label_pc_1000e006
  %v1_1000e032 = phi i32 [ %v3_1000e010, %dec_label_pc_1000e010 ], [ %v3_1000dfed, %dec_label_pc_1000e009 ], [ %v3_1000dfed, %dec_label_pc_1000e006 ]
  %v0_1000e021 = phi i32 [ %v1_1000e01b, %dec_label_pc_1000e010 ], [ 65535, %dec_label_pc_1000e009 ], [ %v1_1000dff8, %dec_label_pc_1000e006 ]
  %v3_1000e028 = and i32 %v0_1000e021, 65535
  %v4_1000e028 = load i32, i32* @edi, align 4
  %v5_1000e028 = and i32 %v4_1000e028, -65536
  %v6_1000e028 = or i32 %v5_1000e028, %v3_1000e028
  store i32 %v6_1000e028, i32* @edi, align 4
  store i32 %v3_1000e028, i32* @ecx, align 4
  %v5_1000e034 = icmp slt i32 %v3_1000e028, %v1_1000e032
  br i1 %v5_1000e034, label %dec_label_pc_1000e044, label %dec_label_pc_1000e036

dec_label_pc_1000e036:                            ; preds = %dec_label_pc_1000e021
  %v0_1000e03b = call i32 @Error()
  store i32 %v0_1000e03b, i32* %eax.global-to-local, align 4
  %v0_1000e044.pre = load i32, i32* @esi, align 4
  %v0_1000e047.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000e044

dec_label_pc_1000e044:                            ; preds = %dec_label_pc_1000e036, %dec_label_pc_1000e021, %dec_label_pc_1000dfc5
  %v0_1000e047 = phi i32 [ %v0_1000e047.pre, %dec_label_pc_1000e036 ], [ %v6_1000e028, %dec_label_pc_1000e021 ], [ %v6_1000dfcd, %dec_label_pc_1000dfc5 ]
  %v2_1000e047 = phi i32 [ %v0_1000e044.pre, %dec_label_pc_1000e036 ], [ %v0_1000dfe5, %dec_label_pc_1000e021 ], [ %v0_1000df73, %dec_label_pc_1000dfc5 ]
  %v1_1000e044 = add i32 %v2_1000e047, 4
  %v2_1000e044 = inttoptr i32 %v1_1000e044 to i32*
  %v3_1000e044 = load i32, i32* %v2_1000e044, align 4
  store i32 %v3_1000e044, i32* %edx.global-to-local, align 4
  %v1_1000e047 = trunc i32 %v0_1000e047 to i16
  %v3_1000e047 = add i32 %v2_1000e047, 22
  %v4_1000e047 = inttoptr i32 %v3_1000e047 to i16*
  store i16 %v1_1000e047, i16* %v4_1000e047, align 2
  %v0_1000e04b = load i32, i32* @edi, align 4
  %v1_1000e04b = and i32 %v0_1000e04b, 65535
  store i32 %v1_1000e04b, i32* %eax.global-to-local, align 4
  %v0_1000e04f = load i32, i32* %edx.global-to-local, align 4
  %v1_1000e04f = load i32, i32* @esi, align 4
  %v2_1000e04f = add i32 %v1_1000e04f, 24
  %v3_1000e04f = inttoptr i32 %v2_1000e04f to i32*
  store i32 %v0_1000e04f, i32* %v3_1000e04f, align 4
  %v0_1000e052 = load i32, i32* @esp, align 4
  %v1_1000e052 = inttoptr i32 %v0_1000e052 to i32*
  %v2_1000e052 = load i32, i32* %v1_1000e052, align 4
  store i32 %v2_1000e052, i32* @esi, align 4
  %v0_1000e056 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000e056

dec_label_pc_1000e057:                            ; preds = %dec_label_pc_1000df70
  %v1_1000e057 = add i32 %v0_1000df73, 4
  %v2_1000e057 = inttoptr i32 %v1_1000e057 to i32*
  %v3_1000e057 = load i32, i32* %v2_1000e057, align 4
  store i32 %v3_1000e057, i32* %edx.global-to-local, align 4
  store i32 %v4_1000df77, i32* %eax.global-to-local, align 4
  %v3_1000e05c = mul nuw nsw i32 %v4_1000df77, 3
  store i32 %v3_1000e05c, i32* @ecx, align 4
  %v2_1000e05f = mul nuw nsw i32 %v4_1000df77, 12
  %v3_1000e05f = or i32 %v2_1000e05f, 2
  %v4_1000e05f = add i32 %v3_1000e05f, %v3_1000e057
  %v5_1000e05f = inttoptr i32 %v4_1000e05f to i16*
  %v6_1000e05f = load i16, i16* %v5_1000e05f, align 2
  %v7_1000e05f = zext i16 %v6_1000e05f to i32
  %v9_1000e05f = and i32 %v3_1000e05c, 196608
  %v10_1000e05f = or i32 %v7_1000e05f, %v9_1000e05f
  store i32 %v10_1000e05f, i32* @ecx, align 4
  store i16 %v6_1000e05f, i16* %v2_1000df77, align 2
  %v0_1000e068 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000e068 = load i32, i32* @esi, align 4
  %v2_1000e068 = add i32 %v1_1000e068, 24
  %v3_1000e068 = inttoptr i32 %v2_1000e068 to i32*
  store i32 %v0_1000e068, i32* %v3_1000e068, align 4
  %v2_1000e06b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000e06b, i32* @esi, align 4
  %v0_1000e06f = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000e06f
}

define i32 @function_1000e070(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e070:
  %v0_1000e078 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v3_1000e078 = and i8 %v0_1000e078, 1
  %v4_1000e078 = icmp eq i8 %v3_1000e078, 0
  %v1_1000e07e = icmp eq i1 %v4_1000e078, false
  br i1 %v1_1000e07e, label %dec_label_pc_1000e0a3, label %dec_label_pc_1000e080

dec_label_pc_1000e080:                            ; preds = %dec_label_pc_1000e070
  %v3_1000e080 = or i8 %v0_1000e078, 1
  store i8 %v3_1000e080, i8* @global_var_1002d3e0.475, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e0a3

dec_label_pc_1000e0a3:                            ; preds = %dec_label_pc_1000e080, %dec_label_pc_1000e070
  %v1_1000e0ac = trunc i32 %arg1 to i16
  %v14_1000e0ac = icmp eq i16 %v1_1000e0ac, -1
  br i1 %v14_1000e0ac, label %dec_label_pc_1000e0c5, label %dec_label_pc_1000e0b1

dec_label_pc_1000e0b1:                            ; preds = %dec_label_pc_1000e0a3
  %v5_1000e0a3 = and i32 %arg1, 65535
  %v0_1000e0b1 = load i32, i32* @ecx, align 4
  %v1_1000e0b1 = add i32 %v0_1000e0b1, 4
  %v2_1000e0b1 = inttoptr i32 %v1_1000e0b1 to i32*
  %v3_1000e0b1 = load i32, i32* %v2_1000e0b1, align 4
  store i32 %v3_1000e0b1, i32* @ecx, align 4
  %v2_1000e0ba = mul nuw nsw i32 %v5_1000e0a3, 12
  %v3_1000e0ba = add i32 %v3_1000e0b1, %v2_1000e0ba
  %v1_1000e0bd = add i32 %v3_1000e0ba, 4
  %v2_1000e0bd = inttoptr i32 %v1_1000e0bd to i16*
  %v3_1000e0bd = load i16, i16* %v2_1000e0bd, align 2
  %v4_1000e0bd = zext i16 %v3_1000e0bd to i32
  %v6_1000e0bd = and i32 %v3_1000e0ba, -65536
  %v7_1000e0bd = or i32 %v4_1000e0bd, %v6_1000e0bd
  ret i32 %v7_1000e0bd

dec_label_pc_1000e0c5:                            ; preds = %dec_label_pc_1000e0a3
  %v3_1000e0ca = load i16, i16* @global_var_1002d3dc.478, align 2
  %v4_1000e0ca = zext i16 %v3_1000e0ca to i32
  %v7_1000e0ca = or i32 %v4_1000e0ca, and (i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32 -65536)
  ret i32 %v7_1000e0ca
}

define i32 @function_1000e0e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000e0e0:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000e0e0 = load i32, i32* @ebp, align 4
  %v1_1000e0e6 = inttoptr i32 %arg1 to i16*
  %v2_1000e0e6 = load i16, i16* %v1_1000e0e6, align 2
  %v3_1000e0e6 = zext i16 %v2_1000e0e6 to i32
  %v0_1000e0e9 = load i32, i32* @esi, align 4
  store i32 %v0_1000e0e9, i32* %stack_var_-8, align 4
  %v0_1000e0ef = load i32, i32* @edi, align 4
  store i32 %v0_1000e0ef, i32* %stack_var_-12, align 4
  %v14_1000e0f0 = icmp eq i16 %v2_1000e0e6, -1
  %v1_1000e0f3 = icmp eq i1 %v14_1000e0f0, false
  %.pre = add i32 %arg1, 2
  %.pre18 = inttoptr i32 %.pre to i16*
  %v3_1000e104.pre = load i16, i16* %.pre18, align 2
  br i1 %v1_1000e0f3, label %dec_label_pc_1000e104, label %dec_label_pc_1000e0f5

dec_label_pc_1000e0f5:                            ; preds = %dec_label_pc_1000e0e0
  %v16_1000e0f5 = icmp eq i16 %v3_1000e104.pre, -1
  %v1_1000e0f9 = icmp eq i1 %v16_1000e0f5, false
  br i1 %v1_1000e0f9, label %dec_label_pc_1000e104, label %dec_label_pc_1000e0fb

dec_label_pc_1000e0fb:                            ; preds = %dec_label_pc_1000e0f5
  %v0_1000e0fb = load i32, i32* @ecx, align 4
  %v1_1000e0fb = add i32 %v0_1000e0fb, 32
  %v2_1000e0fb = inttoptr i32 %v1_1000e0fb to i32*
  %v3_1000e0fb = load i32, i32* %v2_1000e0fb, align 4
  store i32 %v3_1000e0fb, i32* @edx, align 4
  %v1_1000e0fe = add i32 %v0_1000e0fb, 30
  %v2_1000e0fe = inttoptr i32 %v1_1000e0fe to i16*
  %v3_1000e0fe = load i16, i16* %v2_1000e0fe, align 2
  %v4_1000e0fe = zext i16 %v3_1000e0fe to i32
  store i32 %v4_1000e0fe, i32* @edi, align 4
  br label %dec_label_pc_1000e11a

dec_label_pc_1000e104:                            ; preds = %dec_label_pc_1000e0e0, %dec_label_pc_1000e0f5
  %v4_1000e104 = zext i16 %v3_1000e104.pre to i32
  %v0_1000e108 = load i32, i32* @ecx, align 4
  %v1_1000e108 = add i32 %v0_1000e108, 36
  %v2_1000e108 = inttoptr i32 %v1_1000e108 to i32*
  %v3_1000e108 = load i32, i32* %v2_1000e108, align 4
  %v2_1000e10b = mul nuw nsw i32 %v3_1000e0e6, 4
  %v3_1000e10b = add i32 %v3_1000e108, %v2_1000e10b
  %v4_1000e10b = inttoptr i32 %v3_1000e10b to i32*
  %v5_1000e10b = load i32, i32* %v4_1000e10b, align 4
  %v3_1000e10e = add nuw nsw i32 %v4_1000e104, 8
  %v4_1000e10e = add i32 %v3_1000e10e, %v5_1000e10b
  %v5_1000e10e = inttoptr i32 %v4_1000e10e to i16*
  %v6_1000e10e = load i16, i16* %v5_1000e10e, align 2
  %v7_1000e10e = zext i16 %v6_1000e10e to i32
  store i32 %v7_1000e10e, i32* @edi, align 4
  %v1_1000e117 = add i32 %v4_1000e10e, 2
  store i32 %v1_1000e117, i32* @edx, align 4
  br label %dec_label_pc_1000e11a

dec_label_pc_1000e11a:                            ; preds = %dec_label_pc_1000e104, %dec_label_pc_1000e0fb
  %v0_1000e1c2 = phi i32 [ %v1_1000e117, %dec_label_pc_1000e104 ], [ %v3_1000e0fb, %dec_label_pc_1000e0fb ]
  %v0_1000e14f = phi i16 [ %v6_1000e10e, %dec_label_pc_1000e104 ], [ %v3_1000e0fe, %dec_label_pc_1000e0fb ]
  %v0_1000e17c = phi i32 [ %v0_1000e108, %dec_label_pc_1000e104 ], [ %v0_1000e0fb, %dec_label_pc_1000e0fb ]
  %v1_1000e11d = inttoptr i32 %arg2 to i16*
  %v2_1000e11d = load i16, i16* %v1_1000e11d, align 2
  %v3_1000e11d = zext i16 %v2_1000e11d to i32
  %v0_1000e120 = load i32, i32* @ebx, align 4
  %v14_1000e126 = icmp eq i16 %v2_1000e11d, -1
  %v1_1000e129 = icmp eq i1 %v14_1000e126, false
  %.pre19 = add i32 %arg2, 2
  %.pre20 = inttoptr i32 %.pre19 to i16*
  %v3_1000e13a.pre = load i16, i16* %.pre20, align 2
  br i1 %v1_1000e129, label %dec_label_pc_1000e13a, label %dec_label_pc_1000e12b

dec_label_pc_1000e12b:                            ; preds = %dec_label_pc_1000e11a
  %v16_1000e12b = icmp eq i16 %v3_1000e13a.pre, -1
  %v1_1000e12f = icmp eq i1 %v16_1000e12b, false
  br i1 %v1_1000e12f, label %dec_label_pc_1000e13a, label %dec_label_pc_1000e131

dec_label_pc_1000e131:                            ; preds = %dec_label_pc_1000e12b
  %v1_1000e131 = add i32 %v0_1000e17c, 32
  %v2_1000e131 = inttoptr i32 %v1_1000e131 to i32*
  %v3_1000e131 = load i32, i32* %v2_1000e131, align 4
  %v1_1000e134 = add i32 %v0_1000e17c, 30
  br label %dec_label_pc_1000e14e

dec_label_pc_1000e13a:                            ; preds = %dec_label_pc_1000e11a, %dec_label_pc_1000e12b
  %v4_1000e13a = zext i16 %v3_1000e13a.pre to i32
  %v1_1000e13e = add i32 %v0_1000e17c, 36
  %v2_1000e13e = inttoptr i32 %v1_1000e13e to i32*
  %v3_1000e13e = load i32, i32* %v2_1000e13e, align 4
  %v2_1000e141 = mul nuw nsw i32 %v3_1000e11d, 4
  %v3_1000e141 = add i32 %v3_1000e13e, %v2_1000e141
  %v4_1000e141 = inttoptr i32 %v3_1000e141 to i32*
  %v5_1000e141 = load i32, i32* %v4_1000e141, align 4
  %v3_1000e144 = add nuw nsw i32 %v4_1000e13a, 8
  %v4_1000e144 = add i32 %v3_1000e144, %v5_1000e141
  %v1_1000e14b = add i32 %v4_1000e144, 2
  br label %dec_label_pc_1000e14e

dec_label_pc_1000e14e:                            ; preds = %dec_label_pc_1000e13a, %dec_label_pc_1000e131
  %v0_1000e1d8 = phi i32 [ %v1_1000e14b, %dec_label_pc_1000e13a ], [ %v3_1000e131, %dec_label_pc_1000e131 ]
  %v2_1000e14f.in.in = phi i32 [ %v4_1000e144, %dec_label_pc_1000e13a ], [ %v1_1000e134, %dec_label_pc_1000e131 ]
  %v2_1000e14f.in = inttoptr i32 %v2_1000e14f.in.in to i16*
  %v2_1000e14f = load i16, i16* %v2_1000e14f.in, align 2
  store i32 %v0_1000e120, i32* @ebx, align 4
  %v14_1000e14f = icmp eq i16 %v0_1000e14f, %v2_1000e14f
  %v1_1000e152 = icmp eq i1 %v14_1000e14f, false
  br i1 %v1_1000e152, label %dec_label_pc_1000e1d8, label %dec_label_pc_1000e158

dec_label_pc_1000e158:                            ; preds = %dec_label_pc_1000e14e
  %v1_1000e158 = icmp eq i32 %v0_1000e1c2, 0
  %v1_1000e15a = icmp eq i1 %v1_1000e158, false
  %v1_1000e168 = icmp eq i32 %v0_1000e1d8, 0
  br i1 %v1_1000e15a, label %dec_label_pc_1000e168, label %dec_label_pc_1000e15c

dec_label_pc_1000e15c:                            ; preds = %dec_label_pc_1000e158
  store i32 %v0_1000e0ef, i32* @edi, align 4
  br i1 %v1_1000e168, label %dec_label_pc_1000e174, label %dec_label_pc_1000e160

dec_label_pc_1000e160:                            ; preds = %dec_label_pc_1000e15c
  %v1_1000e161 = and i32 %v0_1000e1d8, -256
  %v2_1000e161 = or i32 %v1_1000e161, 1
  store i32 %v0_1000e0e9, i32* @esi, align 4
  store i32 %v0_1000e0e0, i32* @ebp, align 4
  ret i32 %v2_1000e161

dec_label_pc_1000e168:                            ; preds = %dec_label_pc_1000e158
  %v1_1000e16a = icmp eq i1 %v1_1000e168, false
  br i1 %v1_1000e16a, label %dec_label_pc_1000e17c, label %dec_label_pc_1000e16c

dec_label_pc_1000e16c:                            ; preds = %dec_label_pc_1000e168
  store i32 %v0_1000e0ef, i32* @edi, align 4
  %v1_1000e16d = and i32 %v0_1000e1d8, -256
  %v2_1000e16d = or i32 %v1_1000e16d, 1
  store i32 %v0_1000e0e9, i32* @esi, align 4
  store i32 %v0_1000e0e0, i32* @ebp, align 4
  ret i32 %v2_1000e16d

dec_label_pc_1000e174:                            ; preds = %dec_label_pc_1000e15c
  store i32 %v0_1000e0e9, i32* @esi, align 4
  store i32 %v0_1000e0e0, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000e17c:                            ; preds = %dec_label_pc_1000e168
  %v1_1000e17c = add i32 %v0_1000e17c, 28
  %v2_1000e17c = inttoptr i32 %v1_1000e17c to i8*
  %v3_1000e17c = load i8, i8* %v2_1000e17c, align 1
  %v10_1000e17c = icmp eq i8 %v3_1000e17c, 0
  %v1_1000e180 = icmp eq i1 %v10_1000e17c, false
  br i1 %v1_1000e180, label %dec_label_pc_1000e1c1, label %dec_label_pc_1000e182

dec_label_pc_1000e182:                            ; preds = %dec_label_pc_1000e17c
  store i32 %v0_1000e1c2, i32* @ecx, align 4
  br label %dec_label_pc_1000e184

dec_label_pc_1000e184:                            ; preds = %dec_label_pc_1000e196, %dec_label_pc_1000e182
  %v0_1000e1af = phi i32 [ %v1_1000e199, %dec_label_pc_1000e196 ], [ %v0_1000e1d8, %dec_label_pc_1000e182 ]
  %v4_1000e184 = phi i32 [ %v7_1000e18e, %dec_label_pc_1000e196 ], [ %v0_1000e1c2, %dec_label_pc_1000e182 ]
  %v0_1000e196 = phi i32 [ %v1_1000e196, %dec_label_pc_1000e196 ], [ %v0_1000e1c2, %dec_label_pc_1000e182 ]
  %v1_1000e184 = inttoptr i32 %v0_1000e196 to i8*
  %v2_1000e184 = load i8, i8* %v1_1000e184, align 1
  %v3_1000e184 = zext i8 %v2_1000e184 to i32
  %v5_1000e184 = and i32 %v4_1000e184, -256
  %v6_1000e184 = or i32 %v3_1000e184, %v5_1000e184
  store i32 %v6_1000e184, i32* @edx, align 4
  %v3_1000e186 = inttoptr i32 %v0_1000e1af to i8*
  %v4_1000e186 = load i8, i8* %v3_1000e186, align 1
  %v10_1000e186 = icmp ult i8 %v2_1000e184, %v4_1000e186
  %v15_1000e186 = icmp eq i8 %v2_1000e184, %v4_1000e186
  %v1_1000e188 = icmp eq i1 %v15_1000e186, false
  br i1 %v1_1000e188, label %dec_label_pc_1000e1af, label %dec_label_pc_1000e18a

dec_label_pc_1000e18a:                            ; preds = %dec_label_pc_1000e184
  %v5_1000e18a = icmp eq i8 %v2_1000e184, 0
  br i1 %v5_1000e18a, label %dec_label_pc_1000e1a0, label %dec_label_pc_1000e18e

dec_label_pc_1000e18e:                            ; preds = %dec_label_pc_1000e18a
  %v1_1000e18e = add i32 %v0_1000e196, 1
  %v2_1000e18e = inttoptr i32 %v1_1000e18e to i8*
  %v3_1000e18e = load i8, i8* %v2_1000e18e, align 1
  %v4_1000e18e = zext i8 %v3_1000e18e to i32
  %v7_1000e18e = or i32 %v4_1000e18e, %v5_1000e184
  store i32 %v7_1000e18e, i32* @edx, align 4
  %v3_1000e191 = add i32 %v0_1000e1af, 1
  %v4_1000e191 = inttoptr i32 %v3_1000e191 to i8*
  %v5_1000e191 = load i8, i8* %v4_1000e191, align 1
  %v11_1000e191 = icmp ult i8 %v3_1000e18e, %v5_1000e191
  %v16_1000e191 = icmp eq i8 %v3_1000e18e, %v5_1000e191
  %v1_1000e194 = icmp eq i1 %v16_1000e191, false
  br i1 %v1_1000e194, label %dec_label_pc_1000e1af, label %dec_label_pc_1000e196

dec_label_pc_1000e196:                            ; preds = %dec_label_pc_1000e18e
  %v1_1000e196 = add i32 %v0_1000e196, 2
  store i32 %v1_1000e196, i32* @ecx, align 4
  %v1_1000e199 = add i32 %v0_1000e1af, 2
  %v5_1000e19c = icmp eq i8 %v3_1000e18e, 0
  %v1_1000e19e = icmp eq i1 %v5_1000e19c, false
  br i1 %v1_1000e19e, label %dec_label_pc_1000e184, label %dec_label_pc_1000e1a0

dec_label_pc_1000e1a0:                            ; preds = %dec_label_pc_1000e196, %dec_label_pc_1000e18a
  store i32 0, i32* @ecx, align 4
  store i32 %v0_1000e0ef, i32* @edi, align 4
  store i32 %v0_1000e0e9, i32* @esi, align 4
  store i32 %v0_1000e0e0, i32* @ebp, align 4
  ret i32 0

dec_label_pc_1000e1af:                            ; preds = %dec_label_pc_1000e18e, %dec_label_pc_1000e184
  %v2_1000e1af = phi i1 [ %v11_1000e191, %dec_label_pc_1000e18e ], [ %v10_1000e186, %dec_label_pc_1000e184 ]
  %v3_1000e1af = zext i1 %v2_1000e1af to i32
  %v4_1000e1af = add i32 %v3_1000e1af, %v0_1000e1af
  %v5_1000e1af = sext i1 %v2_1000e1af to i32
  %v15_1000e1af = sub nsw i32 %v5_1000e1af, %v3_1000e1af
  %v16_1000e1af = icmp ult i32 %v0_1000e1af, %v15_1000e1af
  %v17_1000e1af = icmp ne i32 %v4_1000e1af, -1
  %v18_1000e1af = or i1 %v16_1000e1af, %v17_1000e1af
  %v19_1000e1af = icmp ult i32 %v0_1000e1af, %v4_1000e1af
  %v20_1000e1af = select i1 %v2_1000e1af, i1 %v18_1000e1af, i1 %v19_1000e1af
  %not.v1_1000e1b1 = icmp ne i1 %v20_1000e1af, true
  %v3_1000e1b1 = sext i1 %not.v1_1000e1b1 to i32
  %v4_1000e1b1 = sub nsw i32 %v5_1000e1af, %v3_1000e1b1
  %v28_1000e1b1 = icmp slt i32 %v4_1000e1b1, 0
  store i32 0, i32* @ecx, align 4
  store i32 %v0_1000e0ef, i32* @edi, align 4
  %v1_1000e1b9 = zext i1 %v28_1000e1b1 to i32
  %v3_1000e1b9 = and i32 %v4_1000e1b1, -256
  %v4_1000e1b9 = or i32 %v1_1000e1b9, %v3_1000e1b9
  store i32 %v0_1000e0e9, i32* @esi, align 4
  store i32 %v0_1000e0e0, i32* @ebp, align 4
  ret i32 %v4_1000e1b9

dec_label_pc_1000e1c1:                            ; preds = %dec_label_pc_1000e17c
  %v4_1000e1c1 = inttoptr i32 %v0_1000e1d8 to i8*
  %v1_1000e1c3 = inttoptr i32 %v0_1000e1c2 to i32*
  %v5_1000e1c3 = call i32 @function_100094b0(i32* %v1_1000e1c3, i8* %v4_1000e1c1)
  store i32 0, i32* @edx, align 4
  %v2_1000e1cd = icmp slt i32 %v5_1000e1c3, 0
  %v2_1000e1cf = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000e1cf, i32* @edi, align 4
  %v1_1000e1d0 = zext i1 %v2_1000e1cd to i32
  %v3_1000e1d0 = and i32 %v5_1000e1c3, -256
  %v4_1000e1d0 = or i32 %v1_1000e1d0, %v3_1000e1d0
  %v2_1000e1d3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000e1d3, i32* @esi, align 4
  ret i32 %v4_1000e1d0

dec_label_pc_1000e1d8:                            ; preds = %dec_label_pc_1000e14e
  %v9_1000e14f = icmp ult i16 %v0_1000e14f, %v2_1000e14f
  %v3_1000e1d8 = zext i1 %v9_1000e14f to i32
  store i32 %v0_1000e0ef, i32* @edi, align 4
  store i32 %v0_1000e0e9, i32* @esi, align 4
  store i32 %v0_1000e0e0, i32* @ebp, align 4
  ret i32 %v3_1000e1d8
}

define i32 @function_1000e1f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e1f0:
  %v0_1000e1f8 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v3_1000e1f8 = and i8 %v0_1000e1f8, 1
  %v4_1000e1f8 = icmp eq i8 %v3_1000e1f8, 0
  %v1_1000e1fe = icmp eq i1 %v4_1000e1f8, false
  br i1 %v1_1000e1fe, label %dec_label_pc_1000e223, label %dec_label_pc_1000e200

dec_label_pc_1000e200:                            ; preds = %dec_label_pc_1000e1f0
  %v3_1000e200 = or i8 %v0_1000e1f8, 1
  store i8 %v3_1000e200, i8* @global_var_1002d3e0.475, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e223

dec_label_pc_1000e223:                            ; preds = %dec_label_pc_1000e200, %dec_label_pc_1000e1f0
  %v1_1000e22c = trunc i32 %arg1 to i16
  %v14_1000e22c = icmp eq i16 %v1_1000e22c, -1
  br i1 %v14_1000e22c, label %dec_label_pc_1000e244, label %dec_label_pc_1000e231

dec_label_pc_1000e231:                            ; preds = %dec_label_pc_1000e223
  %v5_1000e223 = and i32 %arg1, 65535
  %v0_1000e231 = load i32, i32* @ecx, align 4
  %v1_1000e231 = add i32 %v0_1000e231, 4
  %v2_1000e231 = inttoptr i32 %v1_1000e231 to i32*
  %v3_1000e231 = load i32, i32* %v2_1000e231, align 4
  store i32 %v3_1000e231, i32* @ecx, align 4
  %v2_1000e23a = mul nuw nsw i32 %v5_1000e223, 12
  %v3_1000e23a = add i32 %v3_1000e231, %v2_1000e23a
  %v1_1000e23d = inttoptr i32 %v3_1000e23a to i16*
  %v2_1000e23d = load i16, i16* %v1_1000e23d, align 2
  %v3_1000e23d = zext i16 %v2_1000e23d to i32
  %v5_1000e23d = and i32 %v3_1000e23a, -65536
  %v6_1000e23d = or i32 %v3_1000e23d, %v5_1000e23d
  ret i32 %v6_1000e23d

dec_label_pc_1000e244:                            ; preds = %dec_label_pc_1000e223
  %v2_1000e249 = load i16, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  %v3_1000e249 = zext i16 %v2_1000e249 to i32
  %v6_1000e249 = or i32 %v3_1000e249, and (i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32 -65536)
  ret i32 %v6_1000e249
}

define i32 @function_1000e250(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e250:
  %v0_1000e258 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v3_1000e258 = and i8 %v0_1000e258, 1
  %v4_1000e258 = icmp eq i8 %v3_1000e258, 0
  %v1_1000e25e = icmp eq i1 %v4_1000e258, false
  br i1 %v1_1000e25e, label %dec_label_pc_1000e283, label %dec_label_pc_1000e260

dec_label_pc_1000e260:                            ; preds = %dec_label_pc_1000e250
  %v3_1000e260 = or i8 %v0_1000e258, 1
  store i8 %v3_1000e260, i8* @global_var_1002d3e0.475, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e283

dec_label_pc_1000e283:                            ; preds = %dec_label_pc_1000e260, %dec_label_pc_1000e250
  %v1_1000e28c = trunc i32 %arg1 to i16
  %v14_1000e28c = icmp eq i16 %v1_1000e28c, -1
  br i1 %v14_1000e28c, label %dec_label_pc_1000e2a5, label %dec_label_pc_1000e291

dec_label_pc_1000e291:                            ; preds = %dec_label_pc_1000e283
  %v5_1000e283 = and i32 %arg1, 65535
  %v0_1000e291 = load i32, i32* @ecx, align 4
  %v1_1000e291 = add i32 %v0_1000e291, 4
  %v2_1000e291 = inttoptr i32 %v1_1000e291 to i32*
  %v3_1000e291 = load i32, i32* %v2_1000e291, align 4
  store i32 %v3_1000e291, i32* @ecx, align 4
  %v2_1000e29a = mul nuw nsw i32 %v5_1000e283, 12
  %v3_1000e29a = add i32 %v3_1000e291, %v2_1000e29a
  %v1_1000e29d = add i32 %v3_1000e29a, 2
  %v2_1000e29d = inttoptr i32 %v1_1000e29d to i16*
  %v3_1000e29d = load i16, i16* %v2_1000e29d, align 2
  %v4_1000e29d = zext i16 %v3_1000e29d to i32
  %v6_1000e29d = and i32 %v3_1000e29a, -65536
  %v7_1000e29d = or i32 %v4_1000e29d, %v6_1000e29d
  ret i32 %v7_1000e29d

dec_label_pc_1000e2a5:                            ; preds = %dec_label_pc_1000e283
  %v3_1000e2aa = load i16, i16* @global_var_1002d3da.477, align 2
  %v4_1000e2aa = zext i16 %v3_1000e2aa to i32
  %v7_1000e2aa = or i32 %v4_1000e2aa, and (i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32 -65536)
  ret i32 %v7_1000e2aa
}

define i32 @function_1000e2c0(i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i8 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_1000e2c0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp8 = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %edx.global-to-local, align 4
  %v0_1000e2c7 = load i32, i32* @ecx, align 4
  store i32 %v0_1000e2c7, i32* @ebx, align 4
  store i32 %tmp8, i32* @ecx, align 4
  %v1_1000e2cd = add i32 %v0_1000e2c7, 16
  %v2_1000e2cd = inttoptr i32 %v1_1000e2cd to i16*
  %v3_1000e2cd = load i16, i16* %v2_1000e2cd, align 2
  %v4_1000e2cd = zext i16 %v3_1000e2cd to i32
  store i32 %v4_1000e2cd, i32* @edi, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v3_1000e2d6 = bitcast i32* %arg2 to i16*
  store i16 -1, i16* %v3_1000e2d6, align 2
  %v0_1000e2d9 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000e2d9 = inttoptr i32 %v0_1000e2d9 to i8*
  store i8 0, i8* %v1_1000e2d9, align 1
  %v0_1000e2dc = load i32, i32* @edi, align 4
  %v1_1000e2dc = trunc i32 %v0_1000e2dc to i16
  %v2_1000e2dc = load i32, i32* %eax.global-to-local, align 4
  %v3_1000e2dc = trunc i32 %v2_1000e2dc to i16
  %v14_1000e2dc = icmp eq i16 %v1_1000e2dc, %v3_1000e2dc
  br i1 %v14_1000e2dc, label %dec_label_pc_1000e2c0.dec_label_pc_1000e3a6_crit_edge, label %dec_label_pc_1000e2e5

dec_label_pc_1000e2c0.dec_label_pc_1000e3a6_crit_edge: ; preds = %dec_label_pc_1000e2c0
  %v0_1000e3a6.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000e3a6

dec_label_pc_1000e2e5:                            ; preds = %dec_label_pc_1000e2c0
  %v1_1000e356 = bitcast i32* %arg3 to i8*
  br label %dec_label_pc_1000e2e6

dec_label_pc_1000e2e6:                            ; preds = %dec_label_pc_1000e397, %dec_label_pc_1000e2e5
  %v0_1000e2e9 = phi i32 [ %v0_1000e39c, %dec_label_pc_1000e397 ], [ %v0_1000e2dc, %dec_label_pc_1000e2e5 ]
  store i32 %tmp8, i32* @ecx, align 4
  %v1_1000e2e9 = and i32 %v0_1000e2e9, 65535
  store i32 %v1_1000e2e9, i32* %eax.global-to-local, align 4
  %v3_1000e2ec = mul nuw nsw i32 %v1_1000e2e9, 3
  store i32 %v3_1000e2ec, i32* %esi.global-to-local, align 4
  %v1_1000e2ef = trunc i32 %v0_1000e2e9 to i16
  store i16 %v1_1000e2ef, i16* %v3_1000e2d6, align 2
  %v0_1000e2f2 = load i32, i32* @ebx, align 4
  %v1_1000e2f2 = add i32 %v0_1000e2f2, 4
  %v2_1000e2f2 = inttoptr i32 %v1_1000e2f2 to i32*
  %v3_1000e2f2 = load i32, i32* %v2_1000e2f2, align 4
  store i32 %v3_1000e2f2, i32* %edx.global-to-local, align 4
  %v0_1000e2f5 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000e2f7 = mul i32 %v0_1000e2f5, 4
  store i32 %v2_1000e2f7, i32* @esi, align 4
  %v3_1000e2f9 = add i32 %v3_1000e2f2, 8
  %v4_1000e2f9 = add i32 %v3_1000e2f9, %v2_1000e2f7
  %v1_1000e2fd = load i32, i32* @esp, align 4
  %v2_1000e2fd = add i32 %v1_1000e2fd, -4
  %v3_1000e2fd = inttoptr i32 %v2_1000e2fd to i32*
  store i32 %v4_1000e2f9, i32* %v3_1000e2fd, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_1000e301 = add i32 %v1_1000e2fd, -8
  %v3_1000e301 = inttoptr i32 %v2_1000e301 to i32*
  store i32 %arg1, i32* %v3_1000e301, align 4
  %v0_1000e302 = load i32, i32* @ebx, align 4
  store i32 %v0_1000e302, i32* @ecx, align 4
  %v2_1000e304 = call i32 @function_1000e0e0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_1000e304, i32* %eax.global-to-local, align 4
  store i32 %tmp, i32* @ecx, align 4
  %v4_1000e30c = trunc i32 %v2_1000e304 to i8
  %v5_1000e30c = icmp eq i8 %v4_1000e30c, 0
  br i1 %v5_1000e30c, label %dec_label_pc_1000e356, label %dec_label_pc_1000e310

dec_label_pc_1000e310:                            ; preds = %dec_label_pc_1000e2e6
  store i8 1, i8* %v1_1000e356, align 1
  %v0_1000e313 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v1_1000e313 = and i8 %v0_1000e313, 1
  %v2_1000e313 = icmp eq i8 %v1_1000e313, 0
  %v1_1000e31a = icmp eq i1 %v2_1000e313, false
  br i1 %v1_1000e31a, label %dec_label_pc_1000e337, label %dec_label_pc_1000e31c

dec_label_pc_1000e31c:                            ; preds = %dec_label_pc_1000e310
  %v2_1000e31c = or i8 %v0_1000e313, 1
  store i8 %v2_1000e31c, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e337

dec_label_pc_1000e337:                            ; preds = %dec_label_pc_1000e31c, %dec_label_pc_1000e310
  store i32 65535, i32* %eax.global-to-local, align 4
  %v0_1000e33c = load i32, i32* @edi, align 4
  %v1_1000e33c = trunc i32 %v0_1000e33c to i16
  %v14_1000e33c = icmp eq i16 %v1_1000e33c, -1
  br i1 %v14_1000e33c, label %dec_label_pc_1000e34c, label %dec_label_pc_1000e341

dec_label_pc_1000e341:                            ; preds = %dec_label_pc_1000e337
  %v0_1000e341 = load i32, i32* @ebx, align 4
  %v1_1000e341 = add i32 %v0_1000e341, 4
  %v2_1000e341 = inttoptr i32 %v1_1000e341 to i32*
  %v3_1000e341 = load i32, i32* %v2_1000e341, align 4
  store i32 %v3_1000e341, i32* %eax.global-to-local, align 4
  %v1_1000e344 = load i32, i32* @esi, align 4
  %v3_1000e344 = add i32 %v1_1000e344, %v3_1000e341
  %v4_1000e344 = inttoptr i32 %v3_1000e344 to i16*
  %v5_1000e344 = load i16, i16* %v4_1000e344, align 2
  %v6_1000e344 = zext i16 %v5_1000e344 to i32
  store i32 %v6_1000e344, i32* @edi, align 4
  store i32 %v3_1000e344, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e397

dec_label_pc_1000e34c:                            ; preds = %dec_label_pc_1000e337
  store i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32* %eax.global-to-local, align 4
  %v2_1000e351 = load i16, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  %v3_1000e351 = zext i16 %v2_1000e351 to i32
  store i32 %v3_1000e351, i32* @edi, align 4
  br label %dec_label_pc_1000e397

dec_label_pc_1000e356:                            ; preds = %dec_label_pc_1000e2e6
  store i8 0, i8* %v1_1000e356, align 1
  %v0_1000e359 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v1_1000e359 = and i8 %v0_1000e359, 1
  %v2_1000e359 = icmp eq i8 %v1_1000e359, 0
  %v1_1000e360 = icmp eq i1 %v2_1000e359, false
  br i1 %v1_1000e360, label %dec_label_pc_1000e37d, label %dec_label_pc_1000e362

dec_label_pc_1000e362:                            ; preds = %dec_label_pc_1000e356
  %v2_1000e362 = or i8 %v0_1000e359, 1
  store i8 %v2_1000e362, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e37d

dec_label_pc_1000e37d:                            ; preds = %dec_label_pc_1000e362, %dec_label_pc_1000e356
  store i32 65535, i32* %eax.global-to-local, align 4
  %v0_1000e382 = load i32, i32* @edi, align 4
  %v1_1000e382 = trunc i32 %v0_1000e382 to i16
  %v14_1000e382 = icmp eq i16 %v1_1000e382, -1
  br i1 %v14_1000e382, label %dec_label_pc_1000e393, label %dec_label_pc_1000e387

dec_label_pc_1000e387:                            ; preds = %dec_label_pc_1000e37d
  %v0_1000e387 = load i32, i32* @ebx, align 4
  %v1_1000e387 = add i32 %v0_1000e387, 4
  %v2_1000e387 = inttoptr i32 %v1_1000e387 to i32*
  %v3_1000e387 = load i32, i32* %v2_1000e387, align 4
  store i32 %v3_1000e387, i32* %eax.global-to-local, align 4
  %v1_1000e38a = load i32, i32* @esi, align 4
  %v2_1000e38a = add i32 %v1_1000e38a, %v3_1000e387
  br label %dec_label_pc_1000e393

dec_label_pc_1000e393:                            ; preds = %dec_label_pc_1000e37d, %dec_label_pc_1000e387
  %storemerge = phi i32 [ %v2_1000e38a, %dec_label_pc_1000e387 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e37d ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_1000e393 = add i32 %storemerge, 2
  %v2_1000e393 = inttoptr i32 %v1_1000e393 to i16*
  %v3_1000e393 = load i16, i16* %v2_1000e393, align 2
  %v4_1000e393 = zext i16 %v3_1000e393 to i32
  store i32 %v4_1000e393, i32* @edi, align 4
  br label %dec_label_pc_1000e397

dec_label_pc_1000e397:                            ; preds = %dec_label_pc_1000e393, %dec_label_pc_1000e34c, %dec_label_pc_1000e341
  %v0_1000e3a97 = phi i32 [ %storemerge, %dec_label_pc_1000e393 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e34c ], [ %v3_1000e344, %dec_label_pc_1000e341 ]
  %v0_1000e39c = phi i32 [ %v4_1000e393, %dec_label_pc_1000e393 ], [ %v3_1000e351, %dec_label_pc_1000e34c ], [ %v6_1000e344, %dec_label_pc_1000e341 ]
  store i32 65535, i32* @ecx, align 4
  %v14_1000e39c = icmp eq i32 %v0_1000e39c, 65535
  %v1_1000e39f = icmp eq i1 %v14_1000e39c, false
  br i1 %v1_1000e39f, label %dec_label_pc_1000e2e6, label %dec_label_pc_1000e3a5

dec_label_pc_1000e3a5:                            ; preds = %dec_label_pc_1000e397
  %v0_1000e3a5 = load i32, i32* @esp, align 4
  %v1_1000e3a5 = inttoptr i32 %v0_1000e3a5 to i32*
  %v2_1000e3a5 = load i32, i32* %v1_1000e3a5, align 4
  store i32 %v2_1000e3a5, i32* @esi, align 4
  %v3_1000e3a5 = add i32 %v0_1000e3a5, 4
  br label %dec_label_pc_1000e3a6

dec_label_pc_1000e3a6:                            ; preds = %dec_label_pc_1000e2c0.dec_label_pc_1000e3a6_crit_edge, %dec_label_pc_1000e3a5
  %v0_1000e3a9 = phi i32 [ %v2_1000e2dc, %dec_label_pc_1000e2c0.dec_label_pc_1000e3a6_crit_edge ], [ %v0_1000e3a97, %dec_label_pc_1000e3a5 ]
  %v0_1000e3a6 = phi i32 [ %v0_1000e3a6.pre, %dec_label_pc_1000e2c0.dec_label_pc_1000e3a6_crit_edge ], [ %v3_1000e3a5, %dec_label_pc_1000e3a5 ]
  %v1_1000e3a6 = inttoptr i32 %v0_1000e3a6 to i32*
  %v2_1000e3a6 = load i32, i32* %v1_1000e3a6, align 4
  store i32 %v2_1000e3a6, i32* @edi, align 4
  %v3_1000e3a7 = add i32 %v0_1000e3a6, 8
  %v1_1000e3a8 = inttoptr i32 %v3_1000e3a7 to i32*
  %v2_1000e3a8 = load i32, i32* %v1_1000e3a8, align 4
  store i32 %v2_1000e3a8, i32* @ebp, align 4
  ret i32 %v0_1000e3a9
}

define i32 @function_1000e3b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e3b0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v0_1000e3ba = load i32, i32* @ecx, align 4
  store i32 %v0_1000e3ba, i32* %esi.global-to-local, align 4
  %v1_1000e3bc = call i32 @function_1000e250(i32 %arg1)
  store i32 %v1_1000e3bc, i32* %eax.global-to-local, align 4
  %v1_1000e3c1 = and i32 %v1_1000e3bc, 65535
  store i32 %v1_1000e3c1, i32* %edi.global-to-local, align 4
  store i32 %v0_1000e3ba, i32* @ecx, align 4
  %v1_1000e3c7 = call i32 @function_1000e1f0(i32 %v1_1000e3c1)
  store i32 %v1_1000e3c7, i32* %eax.global-to-local, align 4
  %v0_1000e3cc = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e3cc = add i32 %v0_1000e3cc, 4
  %v2_1000e3cc = inttoptr i32 %v1_1000e3cc to i32*
  %v3_1000e3cc = load i32, i32* %v2_1000e3cc, align 4
  store i32 %v3_1000e3cc, i32* %edx.global-to-local, align 4
  %v0_1000e3d2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e3d2 = and i32 %v0_1000e3d2, 65535
  %v2_1000e3da = mul nuw nsw i32 %v1_1000e3d2, 12
  store i32 %v2_1000e3da, i32* %eax.global-to-local, align 4
  %v1_1000e3dc = trunc i32 %v1_1000e3c7 to i16
  %v5_1000e3dc = or i32 %v2_1000e3da, 2
  %v6_1000e3dc = add i32 %v5_1000e3dc, %v3_1000e3cc
  %v7_1000e3dc = inttoptr i32 %v6_1000e3dc to i16*
  store i16 %v1_1000e3dc, i16* %v7_1000e3dc, align 2
  %v0_1000e3e1 = load i32, i32* %edi.global-to-local, align 4
  %v0_1000e3e2 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e3e2, i32* @ecx, align 4
  %v0_1000e3e4 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000e3e7 = call i32 @function_1000e1f0(i32 %v0_1000e3e1)
  store i32 %v1_1000e3e7, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_1000e3f1 = trunc i32 %v1_1000e3e7 to i16
  %v14_1000e3f1 = icmp eq i16 %v1_1000e3f1, -1
  br i1 %v14_1000e3f1, label %dec_label_pc_1000e40c, label %dec_label_pc_1000e3f6

dec_label_pc_1000e3f6:                            ; preds = %dec_label_pc_1000e3b0
  %v0_1000e3f6 = load i32, i32* %edi.global-to-local, align 4
  %v0_1000e3f7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e3f7, i32* @ecx, align 4
  %v1_1000e3f9 = call i32 @function_1000e1f0(i32 %v0_1000e3f6)
  %v1_1000e3fe = and i32 %v1_1000e3f9, 65535
  store i32 %v1_1000e3fe, i32* %eax.global-to-local, align 4
  %v3_1000e401 = mul nuw nsw i32 %v1_1000e3fe, 3
  store i32 %v3_1000e401, i32* %edx.global-to-local, align 4
  %v0_1000e404 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e404 = add i32 %v0_1000e404, 4
  %v2_1000e404 = inttoptr i32 %v1_1000e404 to i32*
  %v3_1000e404 = load i32, i32* %v2_1000e404, align 4
  store i32 %v3_1000e404, i32* %eax.global-to-local, align 4
  %v0_1000e407 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e407 = trunc i32 %v0_1000e407 to i16
  %v4_1000e407 = mul nuw nsw i32 %v1_1000e3fe, 12
  %v5_1000e407 = add nuw nsw i32 %v4_1000e407, 4
  %v6_1000e407 = add i32 %v5_1000e407, %v3_1000e404
  %v7_1000e407 = inttoptr i32 %v6_1000e407 to i16*
  store i16 %v1_1000e407, i16* %v7_1000e407, align 2
  br label %dec_label_pc_1000e40c

dec_label_pc_1000e40c:                            ; preds = %dec_label_pc_1000e3f6, %dec_label_pc_1000e3b0
  store i32 65535, i32* @ecx, align 4
  %v0_1000e411 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e411 = trunc i32 %v0_1000e411 to i16
  %v14_1000e411 = icmp eq i16 %v1_1000e411, -1
  br i1 %v14_1000e411, label %dec_label_pc_1000e42e, label %dec_label_pc_1000e416

dec_label_pc_1000e416:                            ; preds = %dec_label_pc_1000e40c
  %v0_1000e416 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e416 = load i32, i32* @esp, align 4
  %v2_1000e416 = add i32 %v1_1000e416, -4
  %v3_1000e416 = inttoptr i32 %v2_1000e416 to i32*
  store i32 %v0_1000e416, i32* %v3_1000e416, align 4
  %v0_1000e417 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e417, i32* @ecx, align 4
  %v1_1000e419 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  %v1_1000e41e = and i32 %v1_1000e419, 65535
  store i32 %v1_1000e41e, i32* @ecx, align 4
  %v0_1000e421 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000e421, i32* %eax.global-to-local, align 4
  %v3_1000e423 = mul i32 %v0_1000e421, 3
  store i32 %v3_1000e423, i32* %edx.global-to-local, align 4
  %v0_1000e426 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e426 = add i32 %v0_1000e426, 4
  %v2_1000e426 = inttoptr i32 %v1_1000e426 to i32*
  %v3_1000e426 = load i32, i32* %v2_1000e426, align 4
  store i32 %v3_1000e426, i32* %eax.global-to-local, align 4
  %v1_1000e429 = trunc i32 %v1_1000e419 to i16
  %v4_1000e429 = mul i32 %v0_1000e421, 12
  %v5_1000e429 = add i32 %v4_1000e429, 4
  %v6_1000e429 = add i32 %v5_1000e429, %v3_1000e426
  %v7_1000e429 = inttoptr i32 %v6_1000e429 to i16*
  store i16 %v1_1000e429, i16* %v7_1000e429, align 2
  br label %dec_label_pc_1000e42e

dec_label_pc_1000e42e:                            ; preds = %dec_label_pc_1000e416, %dec_label_pc_1000e40c
  %v0_1000e42e = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e42e = trunc i32 %v0_1000e42e to i16
  %v2_1000e42e = load i32, i32* %esi.global-to-local, align 4
  %v3_1000e42e = add i32 %v2_1000e42e, 16
  %v4_1000e42e = inttoptr i32 %v3_1000e42e to i16*
  %v5_1000e42e = load i16, i16* %v4_1000e42e, align 2
  %v16_1000e42e = icmp eq i16 %v1_1000e42e, %v5_1000e42e
  br i1 %v16_1000e42e, label %dec_label_pc_1000e478, label %dec_label_pc_1000e434

dec_label_pc_1000e434:                            ; preds = %dec_label_pc_1000e42e
  %v1_1000e434 = load i32, i32* @esp, align 4
  %v2_1000e434 = add i32 %v1_1000e434, -4
  %v3_1000e434 = inttoptr i32 %v2_1000e434 to i32*
  store i32 %v0_1000e42e, i32* %v3_1000e434, align 4
  %v0_1000e435 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e435, i32* @ecx, align 4
  %v1_1000e437 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000e437, i32* %eax.global-to-local, align 4
  %v1_1000e43c = and i32 %v1_1000e437, 65535
  %v1_1000e43f = load i32, i32* @esp, align 4
  %v2_1000e43f = add i32 %v1_1000e43f, -4
  %v3_1000e43f = inttoptr i32 %v2_1000e43f to i32*
  store i32 %v1_1000e43c, i32* %v3_1000e43f, align 4
  %v0_1000e440 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e440, i32* @ecx, align 4
  %v1_1000e442 = call i32 @function_1000e1f0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000e442, i32* %eax.global-to-local, align 4
  %v0_1000e447 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e447 = load i32, i32* @esp, align 4
  %v2_1000e447 = add i32 %v1_1000e447, -4
  %v3_1000e447 = inttoptr i32 %v2_1000e447 to i32*
  store i32 %v0_1000e447, i32* %v3_1000e447, align 4
  %v0_1000e448 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e448, i32* @ecx, align 4
  %v0_1000e44a = load i32, i32* %eax.global-to-local, align 4
  %v1_1000e44a = trunc i32 %v0_1000e44a to i16
  %v2_1000e44a = load i32, i32* %ebx.global-to-local, align 4
  %v3_1000e44a = trunc i32 %v2_1000e44a to i16
  %v14_1000e44a = icmp eq i16 %v1_1000e44a, %v3_1000e44a
  %v1_1000e44d = icmp eq i1 %v14_1000e44a, false
  %v1_1000e463 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  br i1 %v1_1000e44d, label %dec_label_pc_1000e463, label %dec_label_pc_1000e44f

dec_label_pc_1000e44f:                            ; preds = %dec_label_pc_1000e434
  %v1_1000e454 = and i32 %v1_1000e463, 65535
  store i32 %v1_1000e454, i32* %eax.global-to-local, align 4
  %v3_1000e457 = mul nuw nsw i32 %v1_1000e454, 3
  store i32 %v3_1000e457, i32* %edx.global-to-local, align 4
  %v0_1000e45a = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e45a = add i32 %v0_1000e45a, 4
  %v2_1000e45a = inttoptr i32 %v1_1000e45a to i32*
  %v3_1000e45a = load i32, i32* %v2_1000e45a, align 4
  store i32 %v3_1000e45a, i32* %eax.global-to-local, align 4
  %v0_1000e45d = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e45d = trunc i32 %v0_1000e45d to i16
  %v4_1000e45d = mul nuw nsw i32 %v1_1000e454, 12
  %v5_1000e45d = add i32 %v3_1000e45a, %v4_1000e45d
  %v6_1000e45d = inttoptr i32 %v5_1000e45d to i16*
  store i16 %v1_1000e45d, i16* %v6_1000e45d, align 2
  br label %dec_label_pc_1000e47c

dec_label_pc_1000e463:                            ; preds = %dec_label_pc_1000e434
  store i32 %v1_1000e463, i32* %eax.global-to-local, align 4
  %v0_1000e468 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e468 = add i32 %v0_1000e468, 4
  %v2_1000e468 = inttoptr i32 %v1_1000e468 to i32*
  %v3_1000e468 = load i32, i32* %v2_1000e468, align 4
  store i32 %v3_1000e468, i32* %edx.global-to-local, align 4
  %v1_1000e46b = and i32 %v1_1000e463, 65535
  store i32 %v1_1000e46b, i32* %eax.global-to-local, align 4
  %v3_1000e46e = mul nuw nsw i32 %v1_1000e46b, 3
  store i32 %v3_1000e46e, i32* @ecx, align 4
  %v0_1000e471 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e471 = trunc i32 %v0_1000e471 to i16
  %v4_1000e471 = mul nuw nsw i32 %v1_1000e46b, 12
  %v5_1000e471 = or i32 %v4_1000e471, 2
  %v6_1000e471 = add i32 %v3_1000e468, %v5_1000e471
  %v7_1000e471 = inttoptr i32 %v6_1000e471 to i16*
  store i16 %v1_1000e471, i16* %v7_1000e471, align 2
  br label %dec_label_pc_1000e47c

dec_label_pc_1000e478:                            ; preds = %dec_label_pc_1000e42e
  %v0_1000e478 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e478 = trunc i32 %v0_1000e478 to i16
  store i16 %v1_1000e478, i16* %v4_1000e42e, align 2
  br label %dec_label_pc_1000e47c

dec_label_pc_1000e47c:                            ; preds = %dec_label_pc_1000e478, %dec_label_pc_1000e463, %dec_label_pc_1000e44f
  %v0_1000e47c = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e47c = add i32 %v0_1000e47c, 4
  %v2_1000e47c = inttoptr i32 %v1_1000e47c to i32*
  %v3_1000e47c = load i32, i32* %v2_1000e47c, align 4
  store i32 %v3_1000e47c, i32* @ecx, align 4
  %v0_1000e47f = load i32, i32* %edi.global-to-local, align 4
  store i32 65535, i32* %edx.global-to-local, align 4
  %v3_1000e486 = mul i32 %v0_1000e47f, 3
  store i32 %v3_1000e486, i32* %eax.global-to-local, align 4
  %v0_1000e489 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e489 = trunc i32 %v0_1000e489 to i16
  %v4_1000e489 = mul i32 %v0_1000e47f, 12
  %v5_1000e489 = add i32 %v4_1000e489, %v3_1000e47c
  %v6_1000e489 = inttoptr i32 %v5_1000e489 to i16*
  store i16 %v1_1000e489, i16* %v6_1000e489, align 2
  %v0_1000e48d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e48d = trunc i32 %v0_1000e48d to i16
  %v2_1000e48d = load i32, i32* %edx.global-to-local, align 4
  %v3_1000e48d = trunc i32 %v2_1000e48d to i16
  %v14_1000e48d = icmp eq i16 %v1_1000e48d, %v3_1000e48d
  br i1 %v14_1000e48d, label %dec_label_pc_1000e49d, label %dec_label_pc_1000e492

dec_label_pc_1000e492:                            ; preds = %dec_label_pc_1000e47c
  %v0_1000e492 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e492 = add i32 %v0_1000e492, 4
  %v2_1000e492 = inttoptr i32 %v1_1000e492 to i32*
  %v3_1000e492 = load i32, i32* %v2_1000e492, align 4
  store i32 %v3_1000e492, i32* %eax.global-to-local, align 4
  store i32 %v0_1000e3e4, i32* @ecx, align 4
  %v0_1000e498 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e498 = trunc i32 %v0_1000e498 to i16
  %v5_1000e498 = add i32 %v0_1000e3e4, 4
  %v6_1000e498 = add i32 %v5_1000e498, %v3_1000e492
  %v7_1000e498 = inttoptr i32 %v6_1000e498 to i16*
  store i16 %v1_1000e498, i16* %v7_1000e498, align 2
  br label %dec_label_pc_1000e49d

dec_label_pc_1000e49d:                            ; preds = %dec_label_pc_1000e492, %dec_label_pc_1000e47c
  %v0_1000e49d = load i32, i32* @esp, align 4
  %v1_1000e49d = inttoptr i32 %v0_1000e49d to i32*
  %v2_1000e49d = load i32, i32* %v1_1000e49d, align 4
  store i32 %v2_1000e49d, i32* @edi, align 4
  %v3_1000e49d = add i32 %v0_1000e49d, 4
  %v1_1000e49e = inttoptr i32 %v3_1000e49d to i32*
  %v2_1000e49e = load i32, i32* %v1_1000e49e, align 4
  store i32 %v2_1000e49e, i32* @esi, align 4
  %v3_1000e49e = add i32 %v0_1000e49d, 8
  %v1_1000e49f = inttoptr i32 %v3_1000e49e to i32*
  %v2_1000e49f = load i32, i32* %v1_1000e49f, align 4
  store i32 %v2_1000e49f, i32* @ebx, align 4
  %v3_1000e49f = add i32 %v0_1000e49d, 12
  %v1_1000e4a0 = inttoptr i32 %v3_1000e49f to i32*
  %v2_1000e4a0 = load i32, i32* %v1_1000e4a0, align 4
  store i32 %v2_1000e4a0, i32* @ebp, align 4
  %v0_1000e4a1 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000e4a1
}

define i32 @function_1000e4b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e4b0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v0_1000e4ba = load i32, i32* @ecx, align 4
  store i32 %v0_1000e4ba, i32* %esi.global-to-local, align 4
  %v1_1000e4bc = call i32 @function_1000e1f0(i32 %arg1)
  store i32 %v1_1000e4bc, i32* %eax.global-to-local, align 4
  %v1_1000e4c1 = and i32 %v1_1000e4bc, 65535
  store i32 %v1_1000e4c1, i32* %edi.global-to-local, align 4
  store i32 %v0_1000e4ba, i32* @ecx, align 4
  %v1_1000e4c7 = call i32 @function_1000e250(i32 %v1_1000e4c1)
  store i32 %v1_1000e4c7, i32* %eax.global-to-local, align 4
  %v0_1000e4cc = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e4cc = add i32 %v0_1000e4cc, 4
  %v2_1000e4cc = inttoptr i32 %v1_1000e4cc to i32*
  %v3_1000e4cc = load i32, i32* %v2_1000e4cc, align 4
  store i32 %v3_1000e4cc, i32* %edx.global-to-local, align 4
  %v0_1000e4d2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e4d2 = and i32 %v0_1000e4d2, 65535
  %v2_1000e4da = mul nuw nsw i32 %v1_1000e4d2, 12
  store i32 %v2_1000e4da, i32* %eax.global-to-local, align 4
  %v1_1000e4dc = trunc i32 %v1_1000e4c7 to i16
  %v5_1000e4dc = add i32 %v2_1000e4da, %v3_1000e4cc
  %v6_1000e4dc = inttoptr i32 %v5_1000e4dc to i16*
  store i16 %v1_1000e4dc, i16* %v6_1000e4dc, align 2
  %v0_1000e4e0 = load i32, i32* %edi.global-to-local, align 4
  %v0_1000e4e1 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e4e1, i32* @ecx, align 4
  %v0_1000e4e3 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000e4e6 = call i32 @function_1000e250(i32 %v0_1000e4e0)
  store i32 %v1_1000e4e6, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v1_1000e4f0 = trunc i32 %v1_1000e4e6 to i16
  %v14_1000e4f0 = icmp eq i16 %v1_1000e4f0, -1
  br i1 %v14_1000e4f0, label %dec_label_pc_1000e50b, label %dec_label_pc_1000e4f5

dec_label_pc_1000e4f5:                            ; preds = %dec_label_pc_1000e4b0
  %v0_1000e4f5 = load i32, i32* %edi.global-to-local, align 4
  %v0_1000e4f6 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e4f6, i32* @ecx, align 4
  %v1_1000e4f8 = call i32 @function_1000e250(i32 %v0_1000e4f5)
  %v1_1000e4fd = and i32 %v1_1000e4f8, 65535
  store i32 %v1_1000e4fd, i32* %eax.global-to-local, align 4
  %v3_1000e500 = mul nuw nsw i32 %v1_1000e4fd, 3
  store i32 %v3_1000e500, i32* %edx.global-to-local, align 4
  %v0_1000e503 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e503 = add i32 %v0_1000e503, 4
  %v2_1000e503 = inttoptr i32 %v1_1000e503 to i32*
  %v3_1000e503 = load i32, i32* %v2_1000e503, align 4
  store i32 %v3_1000e503, i32* %eax.global-to-local, align 4
  %v0_1000e506 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e506 = trunc i32 %v0_1000e506 to i16
  %v4_1000e506 = mul nuw nsw i32 %v1_1000e4fd, 12
  %v5_1000e506 = add nuw nsw i32 %v4_1000e506, 4
  %v6_1000e506 = add i32 %v5_1000e506, %v3_1000e503
  %v7_1000e506 = inttoptr i32 %v6_1000e506 to i16*
  store i16 %v1_1000e506, i16* %v7_1000e506, align 2
  br label %dec_label_pc_1000e50b

dec_label_pc_1000e50b:                            ; preds = %dec_label_pc_1000e4f5, %dec_label_pc_1000e4b0
  store i32 65535, i32* @ecx, align 4
  %v0_1000e510 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e510 = trunc i32 %v0_1000e510 to i16
  %v14_1000e510 = icmp eq i16 %v1_1000e510, -1
  br i1 %v14_1000e510, label %dec_label_pc_1000e52d, label %dec_label_pc_1000e515

dec_label_pc_1000e515:                            ; preds = %dec_label_pc_1000e50b
  %v0_1000e515 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e515 = load i32, i32* @esp, align 4
  %v2_1000e515 = add i32 %v1_1000e515, -4
  %v3_1000e515 = inttoptr i32 %v2_1000e515 to i32*
  store i32 %v0_1000e515, i32* %v3_1000e515, align 4
  %v0_1000e516 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e516, i32* @ecx, align 4
  %v1_1000e518 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  %v1_1000e51d = and i32 %v1_1000e518, 65535
  store i32 %v1_1000e51d, i32* @ecx, align 4
  %v0_1000e520 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1000e520, i32* %eax.global-to-local, align 4
  %v3_1000e522 = mul i32 %v0_1000e520, 3
  store i32 %v3_1000e522, i32* %edx.global-to-local, align 4
  %v0_1000e525 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e525 = add i32 %v0_1000e525, 4
  %v2_1000e525 = inttoptr i32 %v1_1000e525 to i32*
  %v3_1000e525 = load i32, i32* %v2_1000e525, align 4
  store i32 %v3_1000e525, i32* %eax.global-to-local, align 4
  %v1_1000e528 = trunc i32 %v1_1000e518 to i16
  %v4_1000e528 = mul i32 %v0_1000e520, 12
  %v5_1000e528 = add i32 %v4_1000e528, 4
  %v6_1000e528 = add i32 %v5_1000e528, %v3_1000e525
  %v7_1000e528 = inttoptr i32 %v6_1000e528 to i16*
  store i16 %v1_1000e528, i16* %v7_1000e528, align 2
  br label %dec_label_pc_1000e52d

dec_label_pc_1000e52d:                            ; preds = %dec_label_pc_1000e515, %dec_label_pc_1000e50b
  %v0_1000e52d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e52d = trunc i32 %v0_1000e52d to i16
  %v2_1000e52d = load i32, i32* %esi.global-to-local, align 4
  %v3_1000e52d = add i32 %v2_1000e52d, 16
  %v4_1000e52d = inttoptr i32 %v3_1000e52d to i16*
  %v5_1000e52d = load i16, i16* %v4_1000e52d, align 2
  %v16_1000e52d = icmp eq i16 %v1_1000e52d, %v5_1000e52d
  br i1 %v16_1000e52d, label %dec_label_pc_1000e577, label %dec_label_pc_1000e533

dec_label_pc_1000e533:                            ; preds = %dec_label_pc_1000e52d
  %v1_1000e533 = load i32, i32* @esp, align 4
  %v2_1000e533 = add i32 %v1_1000e533, -4
  %v3_1000e533 = inttoptr i32 %v2_1000e533 to i32*
  store i32 %v0_1000e52d, i32* %v3_1000e533, align 4
  %v0_1000e534 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e534, i32* @ecx, align 4
  %v1_1000e536 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000e536, i32* %eax.global-to-local, align 4
  %v1_1000e53b = and i32 %v1_1000e536, 65535
  %v1_1000e53e = load i32, i32* @esp, align 4
  %v2_1000e53e = add i32 %v1_1000e53e, -4
  %v3_1000e53e = inttoptr i32 %v2_1000e53e to i32*
  store i32 %v1_1000e53b, i32* %v3_1000e53e, align 4
  %v0_1000e53f = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e53f, i32* @ecx, align 4
  %v1_1000e541 = call i32 @function_1000e250(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000e541, i32* %eax.global-to-local, align 4
  %v0_1000e546 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e546 = load i32, i32* @esp, align 4
  %v2_1000e546 = add i32 %v1_1000e546, -4
  %v3_1000e546 = inttoptr i32 %v2_1000e546 to i32*
  store i32 %v0_1000e546, i32* %v3_1000e546, align 4
  %v0_1000e547 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e547, i32* @ecx, align 4
  %v0_1000e549 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000e549 = trunc i32 %v0_1000e549 to i16
  %v2_1000e549 = load i32, i32* %ebx.global-to-local, align 4
  %v3_1000e549 = trunc i32 %v2_1000e549 to i16
  %v14_1000e549 = icmp eq i16 %v1_1000e549, %v3_1000e549
  %v1_1000e54c = icmp eq i1 %v14_1000e549, false
  %v1_1000e563 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  br i1 %v1_1000e54c, label %dec_label_pc_1000e563, label %dec_label_pc_1000e54e

dec_label_pc_1000e54e:                            ; preds = %dec_label_pc_1000e533
  %v1_1000e553 = and i32 %v1_1000e563, 65535
  store i32 %v1_1000e553, i32* %eax.global-to-local, align 4
  %v3_1000e556 = mul nuw nsw i32 %v1_1000e553, 3
  store i32 %v3_1000e556, i32* %edx.global-to-local, align 4
  %v0_1000e559 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e559 = add i32 %v0_1000e559, 4
  %v2_1000e559 = inttoptr i32 %v1_1000e559 to i32*
  %v3_1000e559 = load i32, i32* %v2_1000e559, align 4
  store i32 %v3_1000e559, i32* %eax.global-to-local, align 4
  %v0_1000e55c = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e55c = trunc i32 %v0_1000e55c to i16
  %v4_1000e55c = mul nuw nsw i32 %v1_1000e553, 12
  %v5_1000e55c = or i32 %v4_1000e55c, 2
  %v6_1000e55c = add i32 %v5_1000e55c, %v3_1000e559
  %v7_1000e55c = inttoptr i32 %v6_1000e55c to i16*
  store i16 %v1_1000e55c, i16* %v7_1000e55c, align 2
  br label %dec_label_pc_1000e57b

dec_label_pc_1000e563:                            ; preds = %dec_label_pc_1000e533
  store i32 %v1_1000e563, i32* %eax.global-to-local, align 4
  %v0_1000e568 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e568 = add i32 %v0_1000e568, 4
  %v2_1000e568 = inttoptr i32 %v1_1000e568 to i32*
  %v3_1000e568 = load i32, i32* %v2_1000e568, align 4
  store i32 %v3_1000e568, i32* %edx.global-to-local, align 4
  %v1_1000e56b = and i32 %v1_1000e563, 65535
  store i32 %v1_1000e56b, i32* %eax.global-to-local, align 4
  %v3_1000e56e = mul nuw nsw i32 %v1_1000e56b, 3
  store i32 %v3_1000e56e, i32* @ecx, align 4
  %v0_1000e571 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e571 = trunc i32 %v0_1000e571 to i16
  %v4_1000e571 = mul nuw nsw i32 %v1_1000e56b, 12
  %v5_1000e571 = add i32 %v3_1000e568, %v4_1000e571
  %v6_1000e571 = inttoptr i32 %v5_1000e571 to i16*
  store i16 %v1_1000e571, i16* %v6_1000e571, align 2
  br label %dec_label_pc_1000e57b

dec_label_pc_1000e577:                            ; preds = %dec_label_pc_1000e52d
  %v0_1000e577 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e577 = trunc i32 %v0_1000e577 to i16
  store i16 %v1_1000e577, i16* %v4_1000e52d, align 2
  br label %dec_label_pc_1000e57b

dec_label_pc_1000e57b:                            ; preds = %dec_label_pc_1000e577, %dec_label_pc_1000e563, %dec_label_pc_1000e54e
  %v0_1000e57b = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e57b = add i32 %v0_1000e57b, 4
  %v2_1000e57b = inttoptr i32 %v1_1000e57b to i32*
  %v3_1000e57b = load i32, i32* %v2_1000e57b, align 4
  store i32 %v3_1000e57b, i32* @ecx, align 4
  %v0_1000e57e = load i32, i32* %edi.global-to-local, align 4
  store i32 65535, i32* %edx.global-to-local, align 4
  %v3_1000e585 = mul i32 %v0_1000e57e, 3
  store i32 %v3_1000e585, i32* %eax.global-to-local, align 4
  %v0_1000e588 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e588 = trunc i32 %v0_1000e588 to i16
  %v4_1000e588 = mul i32 %v0_1000e57e, 12
  %v5_1000e588 = or i32 %v4_1000e588, 2
  %v6_1000e588 = add i32 %v5_1000e588, %v3_1000e57b
  %v7_1000e588 = inttoptr i32 %v6_1000e588 to i16*
  store i16 %v1_1000e588, i16* %v7_1000e588, align 2
  %v0_1000e58d = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000e58d = trunc i32 %v0_1000e58d to i16
  %v2_1000e58d = load i32, i32* %edx.global-to-local, align 4
  %v3_1000e58d = trunc i32 %v2_1000e58d to i16
  %v14_1000e58d = icmp eq i16 %v1_1000e58d, %v3_1000e58d
  br i1 %v14_1000e58d, label %dec_label_pc_1000e59d, label %dec_label_pc_1000e592

dec_label_pc_1000e592:                            ; preds = %dec_label_pc_1000e57b
  %v0_1000e592 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e592 = add i32 %v0_1000e592, 4
  %v2_1000e592 = inttoptr i32 %v1_1000e592 to i32*
  %v3_1000e592 = load i32, i32* %v2_1000e592, align 4
  store i32 %v3_1000e592, i32* %eax.global-to-local, align 4
  store i32 %v0_1000e4e3, i32* @ecx, align 4
  %v0_1000e598 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e598 = trunc i32 %v0_1000e598 to i16
  %v5_1000e598 = add i32 %v0_1000e4e3, 4
  %v6_1000e598 = add i32 %v5_1000e598, %v3_1000e592
  %v7_1000e598 = inttoptr i32 %v6_1000e598 to i16*
  store i16 %v1_1000e598, i16* %v7_1000e598, align 2
  br label %dec_label_pc_1000e59d

dec_label_pc_1000e59d:                            ; preds = %dec_label_pc_1000e592, %dec_label_pc_1000e57b
  %v0_1000e59d = load i32, i32* @esp, align 4
  %v1_1000e59d = inttoptr i32 %v0_1000e59d to i32*
  %v2_1000e59d = load i32, i32* %v1_1000e59d, align 4
  store i32 %v2_1000e59d, i32* @edi, align 4
  %v3_1000e59d = add i32 %v0_1000e59d, 4
  %v1_1000e59e = inttoptr i32 %v3_1000e59d to i32*
  %v2_1000e59e = load i32, i32* %v1_1000e59e, align 4
  store i32 %v2_1000e59e, i32* @esi, align 4
  %v3_1000e59e = add i32 %v0_1000e59d, 8
  %v1_1000e59f = inttoptr i32 %v3_1000e59e to i32*
  %v2_1000e59f = load i32, i32* %v1_1000e59f, align 4
  store i32 %v2_1000e59f, i32* @ebx, align 4
  %v3_1000e59f = add i32 %v0_1000e59d, 12
  %v1_1000e5a0 = inttoptr i32 %v3_1000e59f to i32*
  %v2_1000e5a0 = load i32, i32* %v1_1000e5a0, align 4
  store i32 %v2_1000e5a0, i32* @ebp, align 4
  %v0_1000e5a1 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000e5a1
}

define i32 @function_1000e5b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000e5b0:
  store i32 65535, i32* @edx, align 4
  %v1_1000e5bc = trunc i32 %arg1 to i16
  %v14_1000e5bc = icmp eq i16 %v1_1000e5bc, -1
  %v1_1000e5bf = icmp eq i1 %v14_1000e5bc, false
  br i1 %v1_1000e5bf, label %dec_label_pc_1000e5ca, label %dec_label_pc_1000e5c1

dec_label_pc_1000e5c1:                            ; preds = %dec_label_pc_1000e5b0
  ret i32 ptrtoint (i32* @global_var_10022600.47 to i32)

dec_label_pc_1000e5ca:                            ; preds = %dec_label_pc_1000e5b0
  %v5_1000e5b3 = and i32 %arg1, 65535
  %v0_1000e5ca = load i32, i32* @ecx, align 4
  %v1_1000e5ca = add i32 %v0_1000e5ca, 4
  %v2_1000e5ca = inttoptr i32 %v1_1000e5ca to i32*
  %v3_1000e5ca = load i32, i32* %v2_1000e5ca, align 4
  %v1_1000e5cd = add i32 %v0_1000e5ca, 36
  %v2_1000e5cd = inttoptr i32 %v1_1000e5cd to i32*
  %v3_1000e5cd = load i32, i32* %v2_1000e5cd, align 4
  store i32 %v3_1000e5cd, i32* @ecx, align 4
  %v2_1000e5d6 = mul nuw nsw i32 %v5_1000e5b3, 12
  %v3_1000e5d6 = add nuw nsw i32 %v2_1000e5d6, 8
  %v4_1000e5d6 = add i32 %v3_1000e5d6, %v3_1000e5ca
  %v1_1000e5da = inttoptr i32 %v4_1000e5d6 to i16*
  %v2_1000e5da = load i16, i16* %v1_1000e5da, align 2
  %v3_1000e5da = zext i16 %v2_1000e5da to i32
  store i32 %v3_1000e5da, i32* @edx, align 4
  %v1_1000e5dd = add i32 %v4_1000e5d6, 2
  %v2_1000e5dd = inttoptr i32 %v1_1000e5dd to i16*
  %v3_1000e5dd = load i16, i16* %v2_1000e5dd, align 2
  %v4_1000e5dd = zext i16 %v3_1000e5dd to i32
  %v2_1000e5e1 = mul nuw nsw i32 %v3_1000e5da, 4
  %v3_1000e5e1 = add i32 %v2_1000e5e1, %v3_1000e5cd
  %v4_1000e5e1 = inttoptr i32 %v3_1000e5e1 to i32*
  %v5_1000e5e1 = load i32, i32* %v4_1000e5e1, align 4
  store i32 %v5_1000e5e1, i32* @ecx, align 4
  %v3_1000e5e4 = add nuw nsw i32 %v4_1000e5dd, 10
  %v4_1000e5e4 = add i32 %v3_1000e5e4, %v5_1000e5e1
  ret i32 %v4_1000e5e4
}

define i32 @function_1000e5f0(i32* %arg1) local_unnamed_addr {
dec_label_pc_1000e5f0:
  %edx.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_1000e5f0 = load i32, i32* @ebp, align 4
  %v0_1000e5f3 = load i32, i32* @ebx, align 4
  %v0_1000e5f4 = load i32, i32* @edi, align 4
  %v0_1000e5f5 = load i32, i32* @ecx, align 4
  store i32 %v0_1000e5f5, i32* @edi, align 4
  %v1_1000e5f7 = add i32 %v0_1000e5f5, 16
  %v2_1000e5f7 = inttoptr i32 %v1_1000e5f7 to i16*
  %v3_1000e5f7 = load i16, i16* %v2_1000e5f7, align 2
  %v4_1000e5f7 = zext i16 %v3_1000e5f7 to i32
  store i32 %v4_1000e5f7, i32* @ebx, align 4
  %v14_1000e600 = icmp eq i16 %v3_1000e5f7, -1
  br i1 %v14_1000e600, label %dec_label_pc_1000e6e1, label %dec_label_pc_1000e609

dec_label_pc_1000e609:                            ; preds = %dec_label_pc_1000e5f0
  %v0_1000e609 = load i32, i32* @esi, align 4
  store i32 %v0_1000e609, i32* %stack_var_-16, align 4
  %v4_1000e609 = ptrtoint i32* %stack_var_-16 to i32
  br label %dec_label_pc_1000e610

dec_label_pc_1000e610:                            ; preds = %dec_label_pc_1000e6c9.dec_label_pc_1000e610_crit_edge, %dec_label_pc_1000e609
  %v1_1000e624 = phi i32 [ %v1_1000e624.pre, %dec_label_pc_1000e6c9.dec_label_pc_1000e610_crit_edge ], [ %v4_1000e609, %dec_label_pc_1000e609 ]
  %v0_1000e616 = phi i32 [ %v0_1000e6ce, %dec_label_pc_1000e6c9.dec_label_pc_1000e610_crit_edge ], [ %v4_1000e5f7, %dec_label_pc_1000e609 ]
  %v0_1000e610 = phi i32 [ %v0_1000e610.pre, %dec_label_pc_1000e6c9.dec_label_pc_1000e610_crit_edge ], [ %v0_1000e5f5, %dec_label_pc_1000e609 ]
  %v1_1000e610 = add i32 %v0_1000e610, 4
  %v2_1000e610 = inttoptr i32 %v1_1000e610 to i32*
  %v3_1000e610 = load i32, i32* %v2_1000e610, align 4
  store i32 %tmp, i32* %edx.global-to-local, align 4
  %v1_1000e616 = and i32 %v0_1000e616, 65535
  %v2_1000e61e = mul nuw nsw i32 %v1_1000e616, 12
  store i32 %v2_1000e61e, i32* @esi, align 4
  %v3_1000e620 = add nuw nsw i32 %v2_1000e61e, 8
  %v4_1000e620 = add i32 %v3_1000e620, %v3_1000e610
  %v2_1000e624 = add i32 %v1_1000e624, -4
  %v3_1000e624 = inttoptr i32 %v2_1000e624 to i32*
  store i32 %v4_1000e620, i32* %v3_1000e624, align 4
  %v0_1000e625 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000e625 = add i32 %v1_1000e624, -8
  %v3_1000e625 = inttoptr i32 %v2_1000e625 to i32*
  store i32 %v0_1000e625, i32* %v3_1000e625, align 4
  %v0_1000e626 = load i32, i32* @edi, align 4
  store i32 %v0_1000e626, i32* @ecx, align 4
  %v2_1000e628 = call i32 @function_1000e0e0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v4_1000e62d = trunc i32 %v2_1000e628 to i8
  %v5_1000e62d = icmp eq i8 %v4_1000e62d, 0
  br i1 %v5_1000e62d, label %dec_label_pc_1000e674, label %dec_label_pc_1000e631

dec_label_pc_1000e631:                            ; preds = %dec_label_pc_1000e610
  %v0_1000e631 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v1_1000e631 = and i8 %v0_1000e631, 1
  %v2_1000e631 = icmp eq i8 %v1_1000e631, 0
  %v1_1000e638 = icmp eq i1 %v2_1000e631, false
  br i1 %v1_1000e638, label %dec_label_pc_1000e655, label %dec_label_pc_1000e63a

dec_label_pc_1000e63a:                            ; preds = %dec_label_pc_1000e631
  %v2_1000e63a = or i8 %v0_1000e631, 1
  store i8 %v2_1000e63a, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e655

dec_label_pc_1000e655:                            ; preds = %dec_label_pc_1000e63a, %dec_label_pc_1000e631
  store i32 65535, i32* @ecx, align 4
  %v0_1000e65a = load i32, i32* @ebx, align 4
  %v1_1000e65a = trunc i32 %v0_1000e65a to i16
  %v14_1000e65a = icmp eq i16 %v1_1000e65a, -1
  br i1 %v14_1000e65a, label %dec_label_pc_1000e66a, label %dec_label_pc_1000e65f

dec_label_pc_1000e65f:                            ; preds = %dec_label_pc_1000e655
  %v0_1000e65f = load i32, i32* @edi, align 4
  %v1_1000e65f = add i32 %v0_1000e65f, 4
  %v2_1000e65f = inttoptr i32 %v1_1000e65f to i32*
  %v3_1000e65f = load i32, i32* %v2_1000e65f, align 4
  %v1_1000e662 = load i32, i32* @esi, align 4
  %v3_1000e662 = add i32 %v1_1000e662, %v3_1000e65f
  %v4_1000e662 = inttoptr i32 %v3_1000e662 to i16*
  %v5_1000e662 = load i16, i16* %v4_1000e662, align 2
  %v6_1000e662 = zext i16 %v5_1000e662 to i32
  store i32 %v6_1000e662, i32* @ebx, align 4
  br label %dec_label_pc_1000e6c9

dec_label_pc_1000e66a:                            ; preds = %dec_label_pc_1000e655
  %v2_1000e66f = load i16, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  %v3_1000e66f = zext i16 %v2_1000e66f to i32
  store i32 %v3_1000e66f, i32* @ebx, align 4
  br label %dec_label_pc_1000e6c9

dec_label_pc_1000e674:                            ; preds = %dec_label_pc_1000e610
  %v0_1000e674 = load i32, i32* @edi, align 4
  %v1_1000e674 = add i32 %v0_1000e674, 4
  %v2_1000e674 = inttoptr i32 %v1_1000e674 to i32*
  %v3_1000e674 = load i32, i32* %v2_1000e674, align 4
  store i32 %v3_1000e674, i32* %edx.global-to-local, align 4
  %v1_1000e67a = load i32, i32* @esp, align 4
  %v2_1000e67a = add i32 %v1_1000e67a, -4
  %v3_1000e67a = inttoptr i32 %v2_1000e67a to i32*
  store i32 %tmp, i32* %v3_1000e67a, align 4
  %v0_1000e67b = load i32, i32* %edx.global-to-local, align 4
  %v1_1000e67b = load i32, i32* @esi, align 4
  %v3_1000e67b = add i32 %v0_1000e67b, 8
  %v4_1000e67b = add i32 %v3_1000e67b, %v1_1000e67b
  %v2_1000e67f = add i32 %v1_1000e67a, -8
  %v3_1000e67f = inttoptr i32 %v2_1000e67f to i32*
  store i32 %v4_1000e67b, i32* %v3_1000e67f, align 4
  %v0_1000e680 = load i32, i32* @edi, align 4
  store i32 %v0_1000e680, i32* @ecx, align 4
  %v2_1000e682 = call i32 @function_1000e0e0(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  %v4_1000e687 = trunc i32 %v2_1000e682 to i8
  %v5_1000e687 = icmp eq i8 %v4_1000e687, 0
  br i1 %v5_1000e687, label %dec_label_pc_1000e674.dec_label_pc_1000e6d7_crit_edge, label %dec_label_pc_1000e68b

dec_label_pc_1000e674.dec_label_pc_1000e6d7_crit_edge: ; preds = %dec_label_pc_1000e674
  %v0_1000e6d9.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000e6d7

dec_label_pc_1000e68b:                            ; preds = %dec_label_pc_1000e674
  %v0_1000e68b = load i8, i8* @global_var_1002d3e0.475, align 1
  %v1_1000e68b = and i8 %v0_1000e68b, 1
  %v2_1000e68b = icmp eq i8 %v1_1000e68b, 0
  %v1_1000e692 = icmp eq i1 %v2_1000e68b, false
  br i1 %v1_1000e692, label %dec_label_pc_1000e6af, label %dec_label_pc_1000e694

dec_label_pc_1000e694:                            ; preds = %dec_label_pc_1000e68b
  %v2_1000e694 = or i8 %v0_1000e68b, 1
  store i8 %v2_1000e694, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e6af

dec_label_pc_1000e6af:                            ; preds = %dec_label_pc_1000e694, %dec_label_pc_1000e68b
  %v0_1000e6b4 = load i32, i32* @ebx, align 4
  %v1_1000e6b4 = trunc i32 %v0_1000e6b4 to i16
  %v14_1000e6b4 = icmp eq i16 %v1_1000e6b4, -1
  br i1 %v14_1000e6b4, label %dec_label_pc_1000e6c5, label %dec_label_pc_1000e6b9

dec_label_pc_1000e6b9:                            ; preds = %dec_label_pc_1000e6af
  %v0_1000e6b9 = load i32, i32* @edi, align 4
  %v1_1000e6b9 = add i32 %v0_1000e6b9, 4
  %v2_1000e6b9 = inttoptr i32 %v1_1000e6b9 to i32*
  %v3_1000e6b9 = load i32, i32* %v2_1000e6b9, align 4
  %v1_1000e6bc = load i32, i32* @esi, align 4
  %v2_1000e6bc = add i32 %v1_1000e6bc, %v3_1000e6b9
  br label %dec_label_pc_1000e6c5

dec_label_pc_1000e6c5:                            ; preds = %dec_label_pc_1000e6af, %dec_label_pc_1000e6b9
  %storemerge = phi i32 [ %v2_1000e6bc, %dec_label_pc_1000e6b9 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e6af ]
  %v1_1000e6c5 = add i32 %storemerge, 2
  %v2_1000e6c5 = inttoptr i32 %v1_1000e6c5 to i16*
  %v3_1000e6c5 = load i16, i16* %v2_1000e6c5, align 2
  %v4_1000e6c5 = zext i16 %v3_1000e6c5 to i32
  store i32 %v4_1000e6c5, i32* @ebx, align 4
  br label %dec_label_pc_1000e6c9

dec_label_pc_1000e6c9:                            ; preds = %dec_label_pc_1000e6c5, %dec_label_pc_1000e66a, %dec_label_pc_1000e65f
  %v2_1000e6d99 = phi i32 [ %storemerge, %dec_label_pc_1000e6c5 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e66a ], [ %v3_1000e662, %dec_label_pc_1000e65f ]
  %v0_1000e6ce = phi i32 [ %v4_1000e6c5, %dec_label_pc_1000e6c5 ], [ %v3_1000e66f, %dec_label_pc_1000e66a ], [ %v6_1000e662, %dec_label_pc_1000e65f ]
  store i32 65535, i32* @ecx, align 4
  %v14_1000e6ce = icmp eq i32 %v0_1000e6ce, 65535
  %v1_1000e6d1 = icmp eq i1 %v14_1000e6ce, false
  br i1 %v1_1000e6d1, label %dec_label_pc_1000e6c9.dec_label_pc_1000e610_crit_edge, label %dec_label_pc_1000e6d7

dec_label_pc_1000e6c9.dec_label_pc_1000e610_crit_edge: ; preds = %dec_label_pc_1000e6c9
  %v0_1000e610.pre = load i32, i32* @edi, align 4
  %v1_1000e624.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000e610

dec_label_pc_1000e6d7:                            ; preds = %dec_label_pc_1000e6c9, %dec_label_pc_1000e674.dec_label_pc_1000e6d7_crit_edge
  %v2_1000e6d9 = phi i32 [ %v2_1000e682, %dec_label_pc_1000e674.dec_label_pc_1000e6d7_crit_edge ], [ %v2_1000e6d99, %dec_label_pc_1000e6c9 ]
  %v0_1000e6d9 = phi i32 [ %v0_1000e6d9.pre, %dec_label_pc_1000e674.dec_label_pc_1000e6d7_crit_edge ], [ %v0_1000e6ce, %dec_label_pc_1000e6c9 ]
  %v0_1000e6d7 = load i32, i32* @esp, align 4
  %v3_1000e6d7 = add i32 %v0_1000e6d7, 4
  %v1_1000e6d8 = inttoptr i32 %v3_1000e6d7 to i32*
  %v2_1000e6d8 = load i32, i32* %v1_1000e6d8, align 4
  store i32 %v2_1000e6d8, i32* @edi, align 4
  %v3_1000e6d8 = add i32 %v0_1000e6d7, 8
  %v1_1000e6d9 = and i32 %v0_1000e6d9, 65535
  %v3_1000e6d9 = and i32 %v2_1000e6d9, -65536
  %v4_1000e6d9 = or i32 %v1_1000e6d9, %v3_1000e6d9
  %v1_1000e6dc = inttoptr i32 %v3_1000e6d8 to i32*
  %v2_1000e6dc = load i32, i32* %v1_1000e6dc, align 4
  store i32 %v2_1000e6dc, i32* @ebx, align 4
  %v3_1000e6dc = add i32 %v0_1000e6d7, 12
  %v1_1000e6dd = inttoptr i32 %v3_1000e6dc to i32*
  %v2_1000e6dd = load i32, i32* %v1_1000e6dd, align 4
  store i32 %v2_1000e6dd, i32* @ebp, align 4
  ret i32 %v4_1000e6d9

dec_label_pc_1000e6e1:                            ; preds = %dec_label_pc_1000e5f0
  store i32 %v0_1000e5f4, i32* @edi, align 4
  store i32 %v0_1000e5f3, i32* @ebx, align 4
  store i32 %v0_1000e5f0, i32* @ebp, align 4
  ret i32 %v4_1000e5f7
}

define i32 @function_1000e6f0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000e6f0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000e6f0 = load i32, i32* @ebp, align 4
  store i32 %v0_1000e6f0, i32* %stack_var_-4, align 4
  %v0_1000e6f3 = load i32, i32* @ecx, align 4
  %v0_1000e6f4 = load i32, i32* @esi, align 4
  store i32 %v0_1000e6f4, i32* %stack_var_-12, align 4
  %v4_1000e6f4 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v0_1000e6f3, i32* %esi.global-to-local, align 4
  %v1_1000e6f7 = add i32 %v0_1000e6f3, 22
  %v2_1000e6f7 = inttoptr i32 %v1_1000e6f7 to i16*
  %v3_1000e6f7 = load i16, i16* %v2_1000e6f7, align 2
  %v4_1000e6f7 = zext i16 %v3_1000e6f7 to i32
  store i32 %v4_1000e6f7, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_1000e700 = icmp eq i16 %v3_1000e6f7, -1
  br i1 %v14_1000e700, label %dec_label_pc_1000e79d, label %dec_label_pc_1000e709

dec_label_pc_1000e709:                            ; preds = %dec_label_pc_1000e6f0
  %v1_1000e70b = add i32 %v0_1000e6f3, 8
  %v2_1000e70b = inttoptr i32 %v1_1000e70b to i32*
  %v3_1000e70b = load i32, i32* %v2_1000e70b, align 4
  %v15_1000e70b = icmp eq i32 %v3_1000e70b, 0
  %v16_1000e70b = icmp slt i32 %v3_1000e70b, 0
  %v3_1000e70f = icmp eq i1 %v16_1000e70b, false
  %v4_1000e70f = icmp eq i1 %v15_1000e70b, false
  %v5_1000e70f = icmp eq i1 %v3_1000e70f, %v4_1000e70f
  %v2_1000e715 = select i1 %v5_1000e70f, i32 0, i32 65535
  store i32 %v2_1000e715, i32* %edi.global-to-local, align 4
  br i1 %v5_1000e70f, label %dec_label_pc_1000e720, label %dec_label_pc_1000e795

dec_label_pc_1000e720:                            ; preds = %dec_label_pc_1000e709
  br label %dec_label_pc_1000e721

dec_label_pc_1000e721:                            ; preds = %dec_label_pc_1000e786, %dec_label_pc_1000e720
  %stack_var_-8.0 = phi i32 [ %v2_1000e715, %dec_label_pc_1000e720 ], [ %v0_1000e78b, %dec_label_pc_1000e786 ]
  %v2_1000e72d = phi i16 [ %v3_1000e6f7, %dec_label_pc_1000e720 ], [ %v3_1000e765, %dec_label_pc_1000e786 ]
  %v1_1000e728 = phi i32 [ %v0_1000e6f3, %dec_label_pc_1000e720 ], [ %v0_1000e765, %dec_label_pc_1000e786 ]
  %v1_1000e721 = and i32 %stack_var_-8.0, 65535
  %v2_1000e728 = add i32 %v1_1000e728, 8
  %v3_1000e728 = inttoptr i32 %v2_1000e728 to i32*
  %v4_1000e728 = load i32, i32* %v3_1000e728, align 4
  %v5_1000e72b = icmp slt i32 %v1_1000e721, %v4_1000e728
  br i1 %v5_1000e72b, label %dec_label_pc_1000e72d, label %dec_label_pc_1000e765

dec_label_pc_1000e72d:                            ; preds = %dec_label_pc_1000e721
  %v1_1000e72d = trunc i32 %stack_var_-8.0 to i16
  %tmp23 = icmp ugt i16 %v1_1000e72d, %v2_1000e72d
  br i1 %tmp23, label %dec_label_pc_1000e765, label %dec_label_pc_1000e732

dec_label_pc_1000e732:                            ; preds = %dec_label_pc_1000e72d
  %v1_1000e735 = load i32, i32* @esp, align 4
  %v2_1000e735 = add i32 %v1_1000e735, -4
  %v3_1000e735 = inttoptr i32 %v2_1000e735 to i32*
  store i32 %stack_var_-8.0, i32* %v3_1000e735, align 4
  %v0_1000e736 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000e736, i32* @ecx, align 4
  %v1_1000e738 = call i32 @function_1000e1f0(i32 %stack_var_-8.0)
  %v1_1000e73d = trunc i32 %v1_1000e738 to i16
  %v2_1000e73d = load i32, i32* %edi.global-to-local, align 4
  %v3_1000e73d = trunc i32 %v2_1000e73d to i16
  %v14_1000e73d = icmp eq i16 %v1_1000e73d, %v3_1000e73d
  %v1_1000e740 = icmp eq i1 %v14_1000e73d, false
  %v2_1000e740 = zext i1 %v1_1000e740 to i32
  %v4_1000e740 = and i32 %v1_1000e738, -256
  %v5_1000e740 = or i32 %v2_1000e740, %v4_1000e740
  store i32 %v5_1000e740, i32* %eax.global-to-local, align 4
  %v5_1000e743 = icmp eq i1 %v1_1000e740, false
  br i1 %v5_1000e743, label %dec_label_pc_1000e765, label %dec_label_pc_1000e747

dec_label_pc_1000e747:                            ; preds = %dec_label_pc_1000e732
  %v0_1000e747 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e747 = add i32 %v0_1000e747, 4
  %v2_1000e747 = inttoptr i32 %v1_1000e747 to i32*
  %v3_1000e747 = load i32, i32* %v2_1000e747, align 4
  %v1_1000e74a = add i32 %v0_1000e747, 20
  %v2_1000e74a = inttoptr i32 %v1_1000e74a to i16*
  %v3_1000e74a = load i16, i16* %v2_1000e74a, align 2
  %v4_1000e74a = zext i16 %v3_1000e74a to i32
  %v5_1000e74a = load i32, i32* @ecx, align 4
  %v6_1000e74a = and i32 %v5_1000e74a, -65536
  %v7_1000e74a = or i32 %v6_1000e74a, %v4_1000e74a
  store i32 %v7_1000e74a, i32* @ecx, align 4
  %v2_1000e753 = mul nuw nsw i32 %v1_1000e721, 12
  store i32 %v2_1000e753, i32* %eax.global-to-local, align 4
  %v5_1000e755 = or i32 %v2_1000e753, 2
  %v6_1000e755 = add i32 %v3_1000e747, %v5_1000e755
  %v7_1000e755 = inttoptr i32 %v6_1000e755 to i16*
  store i16 %v3_1000e74a, i16* %v7_1000e755, align 2
  %v0_1000e75a = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e75a = add i32 %v0_1000e75a, 4
  %v2_1000e75a = inttoptr i32 %v1_1000e75a to i32*
  %v3_1000e75a = load i32, i32* %v2_1000e75a, align 4
  %v0_1000e75d = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e75d = trunc i32 %v0_1000e75d to i16
  %v2_1000e75d = load i32, i32* %eax.global-to-local, align 4
  %v5_1000e75d = add i32 %v2_1000e75d, %v3_1000e75a
  %v6_1000e75d = inttoptr i32 %v5_1000e75d to i16*
  store i16 %v1_1000e75d, i16* %v6_1000e75d, align 2
  %v0_1000e761 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000e761 = trunc i32 %v0_1000e761 to i16
  %v2_1000e761 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000e761 = add i32 %v2_1000e761, 20
  %v4_1000e761 = inttoptr i32 %v3_1000e761 to i16*
  store i16 %v1_1000e761, i16* %v4_1000e761, align 2
  %v0_1000e769.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000e765

dec_label_pc_1000e765:                            ; preds = %dec_label_pc_1000e72d, %dec_label_pc_1000e721, %dec_label_pc_1000e747, %dec_label_pc_1000e732
  %v0_1000e769 = phi i32 [ %stack_var_-8.0, %dec_label_pc_1000e72d ], [ %stack_var_-8.0, %dec_label_pc_1000e721 ], [ %v0_1000e769.pre, %dec_label_pc_1000e747 ], [ %v2_1000e73d, %dec_label_pc_1000e732 ]
  %v0_1000e765 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000e765 = add i32 %v0_1000e765, 22
  %v2_1000e765 = inttoptr i32 %v1_1000e765 to i16*
  %v3_1000e765 = load i16, i16* %v2_1000e765, align 2
  %v4_1000e765 = zext i16 %v3_1000e765 to i32
  store i32 %v4_1000e765, i32* @ecx, align 4
  %v1_1000e769 = trunc i32 %v0_1000e769 to i16
  %v14_1000e769 = icmp eq i16 %v1_1000e769, %v3_1000e765
  br i1 %v14_1000e769, label %dec_label_pc_1000e794, label %dec_label_pc_1000e76e

dec_label_pc_1000e76e:                            ; preds = %dec_label_pc_1000e765
  %v1_1000e771 = add nsw i32 %stack_var_-8.0, 1
  %v1_1000e772 = and i32 %v1_1000e771, 65535
  store i32 %v1_1000e772, i32* %eax.global-to-local, align 4
  %v1_1000e779 = add nuw nsw i32 %v1_1000e721, 1
  store i32 %v1_1000e779, i32* %edi.global-to-local, align 4
  %v2_1000e77c = add i32 %v0_1000e765, 8
  %v3_1000e77c = inttoptr i32 %v2_1000e77c to i32*
  %v4_1000e77c = load i32, i32* %v3_1000e77c, align 4
  %v5_1000e77f = icmp slt i32 %v1_1000e772, %v4_1000e77c
  br i1 %v5_1000e77f, label %dec_label_pc_1000e786, label %dec_label_pc_1000e781

dec_label_pc_1000e781:                            ; preds = %dec_label_pc_1000e76e
  store i32 65535, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000e786

dec_label_pc_1000e786:                            ; preds = %dec_label_pc_1000e781, %dec_label_pc_1000e76e
  %v0_1000e78b = phi i32 [ 65535, %dec_label_pc_1000e781 ], [ %v1_1000e779, %dec_label_pc_1000e76e ]
  %v1_1000e78f = trunc i32 %v0_1000e78b to i16
  %v14_1000e78f = icmp eq i16 %v1_1000e78f, -1
  %v1_1000e792 = icmp eq i1 %v14_1000e78f, false
  br i1 %v1_1000e792, label %dec_label_pc_1000e721, label %dec_label_pc_1000e794

dec_label_pc_1000e794:                            ; preds = %dec_label_pc_1000e786, %dec_label_pc_1000e765
  %v0_1000e794 = load i32, i32* @esp, align 4
  %v1_1000e794 = inttoptr i32 %v0_1000e794 to i32*
  %v2_1000e794 = load i32, i32* %v1_1000e794, align 4
  store i32 %v2_1000e794, i32* @ebx, align 4
  br label %dec_label_pc_1000e795

dec_label_pc_1000e795:                            ; preds = %dec_label_pc_1000e709, %dec_label_pc_1000e794
  %v0_1000e795 = phi i32 [ %v0_1000e765, %dec_label_pc_1000e794 ], [ %v0_1000e6f3, %dec_label_pc_1000e709 ]
  %v1_1000e795 = add i32 %v0_1000e795, 16
  %v2_1000e795 = inttoptr i32 %v1_1000e795 to i32*
  store i32 65535, i32* %v2_1000e795, align 4
  %v0_1000e79c = load i32, i32* @esp, align 4
  %v1_1000e79c = inttoptr i32 %v0_1000e79c to i32*
  %v2_1000e79c = load i32, i32* %v1_1000e79c, align 4
  store i32 %v2_1000e79c, i32* %edi.global-to-local, align 4
  %v3_1000e79c = add i32 %v0_1000e79c, 4
  %v2_1000e7a0.pre = load i32, i32* %stack_var_-4, align 4
  %v0_1000e7a1.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000e79d

dec_label_pc_1000e79d:                            ; preds = %dec_label_pc_1000e795, %dec_label_pc_1000e6f0
  %v0_1000e7a1 = phi i32 [ %v0_1000e7a1.pre, %dec_label_pc_1000e795 ], [ 65535, %dec_label_pc_1000e6f0 ]
  %v2_1000e7a0 = phi i32 [ %v2_1000e7a0.pre, %dec_label_pc_1000e795 ], [ %v0_1000e6f0, %dec_label_pc_1000e6f0 ]
  %v0_1000e79d = phi i32 [ %v3_1000e79c, %dec_label_pc_1000e795 ], [ %v4_1000e6f4, %dec_label_pc_1000e6f0 ]
  %v1_1000e79d = inttoptr i32 %v0_1000e79d to i32*
  %v2_1000e79d = load i32, i32* %v1_1000e79d, align 4
  store i32 %v2_1000e79d, i32* @esi, align 4
  store i32 %v2_1000e7a0, i32* @ebp, align 4
  ret i32 %v0_1000e7a1
}

define i32 @function_1000e7b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000e7b0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_1000e7b3 = load i32, i32* @ecx, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000e7b3, i32* @esi, align 4
  %v1_1000e7bb = trunc i32 %arg1 to i16
  %v3_1000e7bb = add i32 %v0_1000e7b3, 16
  %v4_1000e7bb = inttoptr i32 %v3_1000e7bb to i16*
  %v5_1000e7bb = load i16, i16* %v4_1000e7bb, align 2
  %v16_1000e7bb = icmp eq i16 %v1_1000e7bb, %v5_1000e7bb
  br i1 %v16_1000e7bb, label %dec_label_pc_1000ed3c, label %dec_label_pc_1000e7c5

dec_label_pc_1000e7c5:                            ; preds = %dec_label_pc_1000e7b0
  br label %dec_label_pc_1000e7c6

dec_label_pc_1000e7c6:                            ; preds = %dec_label_pc_1000ed31, %dec_label_pc_1000e7c5
  %v0_1000ecd0 = phi i32 [ %v0_1000e7b3, %dec_label_pc_1000e7c5 ], [ %v2_1000ed31, %dec_label_pc_1000ed31 ]
  %v0_1000e88d = phi i32 [ %arg1, %dec_label_pc_1000e7c5 ], [ %v0_1000ed31, %dec_label_pc_1000ed31 ]
  %v0_1000ec79 = phi i32 [ %arg1, %dec_label_pc_1000e7c5 ], [ %stack_var_4.3, %dec_label_pc_1000ed31 ]
  %v0_1000e7c6 = load i8, i8* @global_var_1002d3e0.475, align 1
  %v1_1000e7c6 = sext i8 %v0_1000e7c6 to i32
  store i32 %v1_1000e7c6, i32* %eax.global-to-local, align 4
  %v2_1000e7cb = and i8 %v0_1000e7c6, 1
  %v3_1000e7cb = icmp eq i8 %v2_1000e7cb, 0
  %v1_1000e7cd = icmp eq i1 %v3_1000e7cb, false
  br i1 %v1_1000e7cd, label %dec_label_pc_1000e7eb, label %dec_label_pc_1000e7cf

dec_label_pc_1000e7cf:                            ; preds = %dec_label_pc_1000e7c6
  %v1_1000e7cf = or i32 %v1_1000e7c6, 1
  %v4_1000e7cf = trunc i32 %v1_1000e7cf to i8
  store i32 %v1_1000e7cf, i32* %eax.global-to-local, align 4
  store i8 %v4_1000e7cf, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e7eb

dec_label_pc_1000e7eb:                            ; preds = %dec_label_pc_1000e7cf, %dec_label_pc_1000e7c6
  %v0_1000e82a = phi i32 [ %v1_1000e7cf, %dec_label_pc_1000e7cf ], [ %v1_1000e7c6, %dec_label_pc_1000e7c6 ]
  store i32 65535, i32* @ecx, align 4
  %v1_1000e7f0 = trunc i32 %v0_1000e88d to i16
  %v14_1000e7f0 = icmp eq i16 %v1_1000e7f0, -1
  br i1 %v14_1000e7f0, label %dec_label_pc_1000e808, label %dec_label_pc_1000e7f5

dec_label_pc_1000e7f5:                            ; preds = %dec_label_pc_1000e7eb
  %v1_1000e7f5 = and i32 %v0_1000e88d, 65535
  store i32 %v1_1000e7f5, i32* @ecx, align 4
  %v3_1000e7f8 = mul nuw nsw i32 %v1_1000e7f5, 3
  store i32 %v3_1000e7f8, i32* %edx.global-to-local, align 4
  %v1_1000e7fb = add i32 %v0_1000ecd0, 4
  %v2_1000e7fb = inttoptr i32 %v1_1000e7fb to i32*
  %v3_1000e7fb = load i32, i32* %v2_1000e7fb, align 4
  %v2_1000e7fe = mul nuw nsw i32 %v1_1000e7f5, 12
  %v3_1000e7fe = add i32 %v3_1000e7fb, %v2_1000e7fe
  br label %dec_label_pc_1000e808

dec_label_pc_1000e808:                            ; preds = %dec_label_pc_1000e7eb, %dec_label_pc_1000e7f5
  %storemerge10 = phi i32 [ %v3_1000e7fe, %dec_label_pc_1000e7f5 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e7eb ]
  store i32 %storemerge10, i32* @ecx, align 4
  %v1_1000e808 = add i32 %storemerge10, 4
  %v2_1000e808 = inttoptr i32 %v1_1000e808 to i16*
  %v3_1000e808 = load i16, i16* %v2_1000e808, align 2
  %v4_1000e808 = zext i16 %v3_1000e808 to i32
  store i32 %v4_1000e808, i32* @ecx, align 4
  %v2_1000e80c = and i32 %v0_1000e82a, 1
  %v3_1000e80c = icmp eq i32 %v2_1000e80c, 0
  %v1_1000e80e = icmp eq i1 %v3_1000e80c, false
  br i1 %v1_1000e80e, label %dec_label_pc_1000e83e, label %dec_label_pc_1000e810

dec_label_pc_1000e810:                            ; preds = %dec_label_pc_1000e808
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000e82a = or i32 %v0_1000e82a, 1
  %v4_1000e82a = trunc i32 %v1_1000e82a to i8
  store i32 %v1_1000e82a, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_1000e82a, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000e83e

dec_label_pc_1000e83e:                            ; preds = %dec_label_pc_1000e810, %dec_label_pc_1000e808
  %v0_1000e867 = phi i32 [ %v1_1000e82a, %dec_label_pc_1000e810 ], [ %v0_1000e82a, %dec_label_pc_1000e808 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_1000e843 = icmp eq i16 %v3_1000e808, -1
  br i1 %v14_1000e843, label %dec_label_pc_1000e858, label %dec_label_pc_1000e848

dec_label_pc_1000e848:                            ; preds = %dec_label_pc_1000e83e
  %v1_1000e848 = add i32 %v0_1000ecd0, 4
  %v2_1000e848 = inttoptr i32 %v1_1000e848 to i32*
  %v3_1000e848 = load i32, i32* %v2_1000e848, align 4
  store i32 %v3_1000e848, i32* %edx.global-to-local, align 4
  %v2_1000e84e = mul nuw nsw i32 %v4_1000e808, 12
  %v3_1000e84e = add i32 %v3_1000e848, %v2_1000e84e
  br label %dec_label_pc_1000e858

dec_label_pc_1000e858:                            ; preds = %dec_label_pc_1000e83e, %dec_label_pc_1000e848
  %storemerge9 = phi i32 [ %v3_1000e84e, %dec_label_pc_1000e848 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e83e ]
  store i32 %storemerge9, i32* @ecx, align 4
  %v1_1000e858 = add i32 %storemerge9, 6
  %v2_1000e858 = inttoptr i32 %v1_1000e858 to i16*
  %v3_1000e858 = load i16, i16* %v2_1000e858, align 2
  %v10_1000e858 = icmp eq i16 %v3_1000e858, 0
  %v1_1000e85d = icmp eq i1 %v10_1000e858, false
  br i1 %v1_1000e85d, label %dec_label_pc_1000ed3b, label %dec_label_pc_1000e863

dec_label_pc_1000e863:                            ; preds = %dec_label_pc_1000e858
  %v2_1000e863 = and i32 %v0_1000e867, 1
  %v3_1000e863 = icmp eq i32 %v2_1000e863, 0
  %v1_1000e865 = icmp eq i1 %v3_1000e863, false
  br i1 %v1_1000e865, label %dec_label_pc_1000e883, label %dec_label_pc_1000e867

dec_label_pc_1000e867:                            ; preds = %dec_label_pc_1000e863
  %v1_1000e867 = or i32 %v0_1000e867, 1
  %v4_1000e867 = trunc i32 %v1_1000e867 to i8
  store i32 %v1_1000e867, i32* %eax.global-to-local, align 4
  store i8 %v4_1000e867, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e883

dec_label_pc_1000e883:                            ; preds = %dec_label_pc_1000e867, %dec_label_pc_1000e863
  %v0_1000e8ab = phi i32 [ %v1_1000e867, %dec_label_pc_1000e867 ], [ %v0_1000e867, %dec_label_pc_1000e863 ]
  store i32 65535, i32* @ecx, align 4
  br i1 %v14_1000e7f0, label %dec_label_pc_1000e8a0, label %dec_label_pc_1000e88d

dec_label_pc_1000e88d:                            ; preds = %dec_label_pc_1000e883
  %v1_1000e88d = and i32 %v0_1000e88d, 65535
  store i32 %v1_1000e88d, i32* @ecx, align 4
  %v3_1000e890 = mul nuw nsw i32 %v1_1000e88d, 3
  store i32 %v3_1000e890, i32* %edx.global-to-local, align 4
  %v1_1000e893 = add i32 %v0_1000ecd0, 4
  %v2_1000e893 = inttoptr i32 %v1_1000e893 to i32*
  %v3_1000e893 = load i32, i32* %v2_1000e893, align 4
  %v2_1000e896 = mul nuw nsw i32 %v1_1000e88d, 12
  %v3_1000e896 = add i32 %v3_1000e893, %v2_1000e896
  br label %dec_label_pc_1000e8a0

dec_label_pc_1000e8a0:                            ; preds = %dec_label_pc_1000e883, %dec_label_pc_1000e88d
  %storemerge8 = phi i32 [ %v3_1000e896, %dec_label_pc_1000e88d ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e883 ]
  store i32 %storemerge8, i32* @ecx, align 4
  %v1_1000e8a0 = add i32 %storemerge8, 4
  %v2_1000e8a0 = inttoptr i32 %v1_1000e8a0 to i16*
  %v3_1000e8a0 = load i16, i16* %v2_1000e8a0, align 2
  %v4_1000e8a0 = zext i16 %v3_1000e8a0 to i32
  store i32 %v4_1000e8a0, i32* %edi.global-to-local, align 4
  %v2_1000e8a7 = and i32 %v0_1000e8ab, 1
  %v3_1000e8a7 = icmp eq i32 %v2_1000e8a7, 0
  %v1_1000e8a9 = icmp eq i1 %v3_1000e8a7, false
  br i1 %v1_1000e8a9, label %dec_label_pc_1000e8c7, label %dec_label_pc_1000e8ab

dec_label_pc_1000e8ab:                            ; preds = %dec_label_pc_1000e8a0
  %v1_1000e8ab = or i32 %v0_1000e8ab, 1
  %v4_1000e8ab = trunc i32 %v1_1000e8ab to i8
  store i32 %v1_1000e8ab, i32* %eax.global-to-local, align 4
  store i8 %v4_1000e8ab, i8* @global_var_1002d3e0.475, align 1
  store i16* inttoptr (i32 -1 to i16*), i16** @global_var_1002d3d8.476, align 4
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  br label %dec_label_pc_1000e8c7

dec_label_pc_1000e8c7:                            ; preds = %dec_label_pc_1000e8ab, %dec_label_pc_1000e8a0
  %v0_1000e906 = phi i32 [ %v1_1000e8ab, %dec_label_pc_1000e8ab ], [ %v0_1000e8ab, %dec_label_pc_1000e8a0 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_1000e8cc = icmp eq i16 %v3_1000e8a0, -1
  br i1 %v14_1000e8cc, label %dec_label_pc_1000e8e4, label %dec_label_pc_1000e8d1

dec_label_pc_1000e8d1:                            ; preds = %dec_label_pc_1000e8c7
  %v1_1000e8d1 = add i32 %v0_1000ecd0, 4
  %v2_1000e8d1 = inttoptr i32 %v1_1000e8d1 to i32*
  %v3_1000e8d1 = load i32, i32* %v2_1000e8d1, align 4
  store i32 %v3_1000e8d1, i32* %edx.global-to-local, align 4
  %v2_1000e8da = mul nuw nsw i32 %v4_1000e8a0, 12
  %v3_1000e8da = add i32 %v3_1000e8d1, %v2_1000e8da
  br label %dec_label_pc_1000e8e4

dec_label_pc_1000e8e4:                            ; preds = %dec_label_pc_1000e8c7, %dec_label_pc_1000e8d1
  %storemerge7 = phi i32 [ %v3_1000e8da, %dec_label_pc_1000e8d1 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e8c7 ]
  store i32 %storemerge7, i32* @ecx, align 4
  %v1_1000e8e4 = add i32 %storemerge7, 4
  %v2_1000e8e4 = inttoptr i32 %v1_1000e8e4 to i16*
  %v3_1000e8e4 = load i16, i16* %v2_1000e8e4, align 2
  %v4_1000e8e4 = zext i16 %v3_1000e8e4 to i32
  store i32 %v4_1000e8e4, i32* @ecx, align 4
  %v2_1000e8e8 = and i32 %v0_1000e906, 1
  %v3_1000e8e8 = icmp eq i32 %v2_1000e8e8, 0
  %v1_1000e8ea = icmp eq i1 %v3_1000e8e8, false
  br i1 %v1_1000e8ea, label %dec_label_pc_1000e91a, label %dec_label_pc_1000e8ec

dec_label_pc_1000e8ec:                            ; preds = %dec_label_pc_1000e8e4
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000e906 = or i32 %v0_1000e906, 1
  %v4_1000e906 = trunc i32 %v1_1000e906 to i8
  store i32 %v1_1000e906, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_1000e906, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000e91a

dec_label_pc_1000e91a:                            ; preds = %dec_label_pc_1000e8ec, %dec_label_pc_1000e8e4
  %v0_1000e959 = phi i32 [ %v1_1000e906, %dec_label_pc_1000e8ec ], [ %v0_1000e906, %dec_label_pc_1000e8e4 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  br i1 %v14_1000e8cc, label %dec_label_pc_1000e937, label %dec_label_pc_1000e924

dec_label_pc_1000e924:                            ; preds = %dec_label_pc_1000e91a
  %v1_1000e924 = add i32 %v0_1000ecd0, 4
  %v2_1000e924 = inttoptr i32 %v1_1000e924 to i32*
  %v3_1000e924 = load i32, i32* %v2_1000e924, align 4
  store i32 %v3_1000e924, i32* %ebx.global-to-local, align 4
  %v2_1000e92d = mul nuw nsw i32 %v4_1000e8a0, 12
  %v3_1000e92d = add i32 %v3_1000e924, %v2_1000e92d
  br label %dec_label_pc_1000e937

dec_label_pc_1000e937:                            ; preds = %dec_label_pc_1000e91a, %dec_label_pc_1000e924
  %storemerge6 = phi i32 [ %v3_1000e92d, %dec_label_pc_1000e924 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e91a ]
  store i32 %storemerge6, i32* %edx.global-to-local, align 4
  %v1_1000e937 = add i32 %storemerge6, 4
  %v2_1000e937 = inttoptr i32 %v1_1000e937 to i16*
  %v3_1000e937 = load i16, i16* %v2_1000e937, align 2
  %v4_1000e937 = zext i16 %v3_1000e937 to i32
  store i32 %v4_1000e937, i32* %edx.global-to-local, align 4
  %v2_1000e93b = and i32 %v0_1000e959, 1
  %v3_1000e93b = icmp eq i32 %v2_1000e93b, 0
  %v1_1000e93d = icmp eq i1 %v3_1000e93b, false
  br i1 %v1_1000e93d, label %dec_label_pc_1000e96d, label %dec_label_pc_1000e93f

dec_label_pc_1000e93f:                            ; preds = %dec_label_pc_1000e937
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000e959 = or i32 %v0_1000e959, 1
  %v4_1000e959 = trunc i32 %v1_1000e959 to i8
  store i32 %v1_1000e959, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  store i8 %v4_1000e959, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000e96d

dec_label_pc_1000e96d:                            ; preds = %dec_label_pc_1000e93f, %dec_label_pc_1000e937
  %v0_1000eb74 = phi i32 [ %v1_1000e959, %dec_label_pc_1000e93f ], [ %v0_1000e959, %dec_label_pc_1000e937 ]
  store i32 65535, i32* %ebx.global-to-local, align 4
  %v14_1000e972 = icmp eq i16 %v3_1000e937, -1
  br i1 %v14_1000e972, label %dec_label_pc_1000e987, label %dec_label_pc_1000e977

dec_label_pc_1000e977:                            ; preds = %dec_label_pc_1000e96d
  %v1_1000e977 = add i32 %v0_1000ecd0, 4
  %v2_1000e977 = inttoptr i32 %v1_1000e977 to i32*
  %v3_1000e977 = load i32, i32* %v2_1000e977, align 4
  store i32 %v3_1000e977, i32* %ebx.global-to-local, align 4
  %v2_1000e97d = mul nuw nsw i32 %v4_1000e937, 12
  %v3_1000e97d = add i32 %v3_1000e977, %v2_1000e97d
  br label %dec_label_pc_1000e987

dec_label_pc_1000e987:                            ; preds = %dec_label_pc_1000e96d, %dec_label_pc_1000e977
  %storemerge5 = phi i32 [ %v3_1000e97d, %dec_label_pc_1000e977 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e96d ]
  store i32 %storemerge5, i32* %edx.global-to-local, align 4
  %v1_1000e987 = inttoptr i32 %storemerge5 to i16*
  %v2_1000e987 = load i16, i16* %v1_1000e987, align 2
  %v15_1000e987 = icmp eq i16 %v2_1000e987, %v3_1000e8a0
  %v1_1000e98a = icmp eq i1 %v15_1000e987, false
  %v2_1000eb56 = and i32 %v0_1000eb74, 1
  %v3_1000eb56 = icmp eq i32 %v2_1000eb56, 0
  %v1_1000eb58 = icmp eq i1 %v3_1000eb56, false
  br i1 %v1_1000e98a, label %dec_label_pc_1000eb56, label %dec_label_pc_1000e990

dec_label_pc_1000e990:                            ; preds = %dec_label_pc_1000e987
  br i1 %v1_1000eb58, label %dec_label_pc_1000e9c2, label %dec_label_pc_1000e994

dec_label_pc_1000e994:                            ; preds = %dec_label_pc_1000e990
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000e9ae = or i32 %v0_1000eb74, 1
  %v4_1000e9ae = trunc i32 %v1_1000e9ae to i8
  store i32 %v1_1000e9ae, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_1000e9ae, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000e9c2

dec_label_pc_1000e9c2:                            ; preds = %dec_label_pc_1000e994, %dec_label_pc_1000e990
  %v0_1000ea03 = phi i32 [ %v1_1000e9ae, %dec_label_pc_1000e994 ], [ %v0_1000eb74, %dec_label_pc_1000e990 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_1000e9c7 = icmp eq i16 %v3_1000e8e4, -1
  br i1 %v14_1000e9c7, label %dec_label_pc_1000e9de, label %dec_label_pc_1000e9cc

dec_label_pc_1000e9cc:                            ; preds = %dec_label_pc_1000e9c2
  %v1_1000e9cc = add i32 %v0_1000ecd0, 4
  %v2_1000e9cc = inttoptr i32 %v1_1000e9cc to i32*
  %v3_1000e9cc = load i32, i32* %v2_1000e9cc, align 4
  store i32 %v3_1000e9cc, i32* %ebx.global-to-local, align 4
  %v2_1000e9d4 = mul nuw nsw i32 %v4_1000e8e4, 12
  %v3_1000e9d4 = add i32 %v3_1000e9cc, %v2_1000e9d4
  br label %dec_label_pc_1000e9de

dec_label_pc_1000e9de:                            ; preds = %dec_label_pc_1000e9c2, %dec_label_pc_1000e9cc
  %storemerge1 = phi i32 [ %v3_1000e9d4, %dec_label_pc_1000e9cc ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000e9c2 ]
  store i32 %storemerge1, i32* %edx.global-to-local, align 4
  %v1_1000e9de = add i32 %storemerge1, 2
  %v2_1000e9de = inttoptr i32 %v1_1000e9de to i16*
  %v3_1000e9de = load i16, i16* %v2_1000e9de, align 2
  %v4_1000e9de = zext i16 %v3_1000e9de to i32
  store i32 %v4_1000e9de, i32* %edx.global-to-local, align 4
  %v2_1000e9e5 = and i32 %v0_1000ea03, 1
  %v3_1000e9e5 = icmp eq i32 %v2_1000e9e5, 0
  %v1_1000e9e7 = icmp eq i1 %v3_1000e9e5, false
  br i1 %v1_1000e9e7, label %dec_label_pc_1000ea17, label %dec_label_pc_1000e9e9

dec_label_pc_1000e9e9:                            ; preds = %dec_label_pc_1000e9de
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000ea03 = or i32 %v0_1000ea03, 1
  %v4_1000ea03 = trunc i32 %v1_1000ea03 to i8
  store i32 %v1_1000ea03, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  store i8 %v4_1000ea03, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000ea17

dec_label_pc_1000ea17:                            ; preds = %dec_label_pc_1000e9e9, %dec_label_pc_1000e9de
  %v0_1000ea77 = phi i32 [ %v1_1000ea03, %dec_label_pc_1000e9e9 ], [ %v0_1000ea03, %dec_label_pc_1000e9de ]
  store i32 65535, i32* %ebx.global-to-local, align 4
  %v14_1000ea1c = icmp eq i16 %v3_1000e9de, -1
  br i1 %v14_1000ea1c, label %dec_label_pc_1000ea32, label %dec_label_pc_1000ea21

dec_label_pc_1000ea21:                            ; preds = %dec_label_pc_1000ea17
  %v1_1000ea21 = add i32 %v0_1000ecd0, 4
  %v2_1000ea21 = inttoptr i32 %v1_1000ea21 to i32*
  %v3_1000ea21 = load i32, i32* %v2_1000ea21, align 4
  %v2_1000ea2a = mul nuw nsw i32 %v4_1000e9de, 12
  %v3_1000ea2a = add i32 %v3_1000ea21, %v2_1000ea2a
  store i32 %v3_1000ea2a, i32* %ebx.global-to-local, align 4
  store i32 %v4_1000e9de, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000ea37

dec_label_pc_1000ea32:                            ; preds = %dec_label_pc_1000ea17
  store i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000ea37

dec_label_pc_1000ea37:                            ; preds = %dec_label_pc_1000ea32, %dec_label_pc_1000ea21
  %v0_1000ea37 = phi i32 [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000ea32 ], [ %v3_1000ea2a, %dec_label_pc_1000ea21 ]
  %v1_1000ea37 = add i32 %v0_1000ea37, 6
  %v2_1000ea37 = inttoptr i32 %v1_1000ea37 to i16*
  %v3_1000ea37 = load i16, i16* %v2_1000ea37, align 2
  %v10_1000ea37 = icmp eq i16 %v3_1000ea37, 0
  %v1_1000ea3c = icmp eq i1 %v10_1000ea37, false
  br i1 %v1_1000ea3c, label %dec_label_pc_1000ea59, label %dec_label_pc_1000ea3e

dec_label_pc_1000ea3e:                            ; preds = %dec_label_pc_1000ea37
  store i32 %v4_1000e8a0, i32* %eax.global-to-local, align 4
  %v1_1000ea41 = add i32 %v0_1000ecd0, 4
  %v2_1000ea41 = inttoptr i32 %v1_1000ea41 to i32*
  %v3_1000ea41 = load i32, i32* %v2_1000ea41, align 4
  store i32 %v3_1000ea41, i32* %edi.global-to-local, align 4
  %v3_1000ea44 = mul nuw nsw i32 %v4_1000e8a0, 3
  store i32 %v3_1000ea44, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  %v4_1000ea4c = mul nuw nsw i32 %v4_1000e8a0, 12
  %v5_1000ea4c = add nuw nsw i32 %v4_1000ea4c, 6
  %v6_1000ea4c = add i32 %v5_1000ea4c, %v3_1000ea41
  %v7_1000ea4c = inttoptr i32 %v6_1000ea4c to i16*
  store i16 1, i16* %v7_1000ea4c, align 2
  %v0_1000ea51 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000ea51 = and i32 %v0_1000ea51, 65535
  br label %dec_label_pc_1000ec14

dec_label_pc_1000ea59:                            ; preds = %dec_label_pc_1000ea37
  %v2_1000ea59 = and i32 %v0_1000ea77, 1
  %v3_1000ea59 = icmp eq i32 %v2_1000ea59, 0
  %v1_1000ea5b = icmp eq i1 %v3_1000ea59, false
  br i1 %v1_1000ea5b, label %dec_label_pc_1000ea8b, label %dec_label_pc_1000ea5d

dec_label_pc_1000ea5d:                            ; preds = %dec_label_pc_1000ea59
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000ea77 = or i32 %v0_1000ea77, 1
  %v4_1000ea77 = trunc i32 %v1_1000ea77 to i8
  store i32 %v1_1000ea77, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_1000ea77, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000ea8b

dec_label_pc_1000ea8b:                            ; preds = %dec_label_pc_1000ea5d, %dec_label_pc_1000ea59
  %v0_1000eab6 = phi i32 [ %v1_1000ea77, %dec_label_pc_1000ea5d ], [ %v0_1000ea77, %dec_label_pc_1000ea59 ]
  store i32 %v0_1000ec79, i32* %ebx.global-to-local, align 4
  store i32 65535, i32* %edx.global-to-local, align 4
  %v1_1000ea93 = trunc i32 %v0_1000ec79 to i16
  %v14_1000ea93 = icmp eq i16 %v1_1000ea93, -1
  br i1 %v14_1000ea93, label %dec_label_pc_1000eaa9, label %dec_label_pc_1000ea98

dec_label_pc_1000ea98:                            ; preds = %dec_label_pc_1000ea8b
  %v1_1000ea98 = and i32 %v0_1000ec79, 65535
  store i32 %v1_1000ea98, i32* %edx.global-to-local, align 4
  %v1_1000ea9b = add i32 %v0_1000ecd0, 4
  %v2_1000ea9b = inttoptr i32 %v1_1000ea9b to i32*
  %v3_1000ea9b = load i32, i32* %v2_1000ea9b, align 4
  %v2_1000eaa1 = mul nuw nsw i32 %v1_1000ea98, 12
  %v3_1000eaa1 = add i32 %v3_1000ea9b, %v2_1000eaa1
  store i32 %v3_1000eaa1, i32* %edx.global-to-local, align 4
  store i32 %v0_1000ec79, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000eaae

dec_label_pc_1000eaa9:                            ; preds = %dec_label_pc_1000ea8b
  store i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000eaae

dec_label_pc_1000eaae:                            ; preds = %dec_label_pc_1000eaa9, %dec_label_pc_1000ea98
  %v0_1000eaae = phi i32 [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000eaa9 ], [ %v3_1000eaa1, %dec_label_pc_1000ea98 ]
  %v1_1000eaae = add i32 %v0_1000eaae, 4
  %v2_1000eaae = inttoptr i32 %v1_1000eaae to i16*
  %v3_1000eaae = load i16, i16* %v2_1000eaae, align 2
  %v4_1000eaae = zext i16 %v3_1000eaae to i32
  store i32 %v4_1000eaae, i32* %edx.global-to-local, align 4
  %v2_1000eab2 = and i32 %v0_1000eab6, 1
  %v3_1000eab2 = icmp eq i32 %v2_1000eab2, 0
  %v1_1000eab4 = icmp eq i1 %v3_1000eab2, false
  br i1 %v1_1000eab4, label %dec_label_pc_1000eae0, label %dec_label_pc_1000eab6

dec_label_pc_1000eab6:                            ; preds = %dec_label_pc_1000eaae
  %v1_1000eab6 = or i32 %v0_1000eab6, 1
  %v4_1000eab6 = trunc i32 %v1_1000eab6 to i8
  store i8 %v4_1000eab6, i8* @global_var_1002d3e0.475, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  store i32 1, i32* %eax.global-to-local, align 4
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000eae0

dec_label_pc_1000eae0:                            ; preds = %dec_label_pc_1000eab6, %dec_label_pc_1000eaae
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_1000eae5 = icmp eq i16 %v3_1000eaae, -1
  br i1 %v14_1000eae5, label %dec_label_pc_1000eafc, label %dec_label_pc_1000eaea

dec_label_pc_1000eaea:                            ; preds = %dec_label_pc_1000eae0
  store i32 %v4_1000eaae, i32* %eax.global-to-local, align 4
  %v3_1000eaec = mul nuw nsw i32 %v4_1000eaae, 3
  store i32 %v3_1000eaec, i32* %edx.global-to-local, align 4
  %v1_1000eaef = add i32 %v0_1000ecd0, 4
  %v2_1000eaef = inttoptr i32 %v1_1000eaef to i32*
  %v3_1000eaef = load i32, i32* %v2_1000eaef, align 4
  %v2_1000eaf2 = mul nuw nsw i32 %v4_1000eaae, 12
  %v3_1000eaf2 = add i32 %v3_1000eaef, %v2_1000eaf2
  br label %dec_label_pc_1000eafc

dec_label_pc_1000eafc:                            ; preds = %dec_label_pc_1000eae0, %dec_label_pc_1000eaea
  %storemerge = phi i32 [ %v3_1000eaf2, %dec_label_pc_1000eaea ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000eae0 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_1000eafc = add i32 %storemerge, 2
  %v2_1000eafc = inttoptr i32 %v1_1000eafc to i16*
  %v3_1000eafc = load i16, i16* %v2_1000eafc, align 2
  %v16_1000eafc = icmp eq i16 %v3_1000eafc, %v1_1000ea93
  %v1_1000eb00 = icmp eq i1 %v16_1000eafc, false
  br i1 %v1_1000eb00, label %dec_label_pc_1000eb26, label %dec_label_pc_1000eb02

dec_label_pc_1000eb02:                            ; preds = %dec_label_pc_1000eafc
  store i32 %v4_1000e8a0, i32* %ebx.global-to-local, align 4
  %v1_1000eb05 = load i32, i32* @esp, align 4
  %v2_1000eb05 = add i32 %v1_1000eb05, -4
  %v3_1000eb05 = inttoptr i32 %v2_1000eb05 to i32*
  store i32 %v4_1000e8a0, i32* %v3_1000eb05, align 4
  %v0_1000eb06 = load i32, i32* @esi, align 4
  store i32 %v0_1000eb06, i32* @ecx, align 4
  %v0_1000eb08 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000eb0b = call i32 @function_1000e3b0(i32 %v4_1000e9de)
  store i32 %v1_1000eb0b, i32* %eax.global-to-local, align 4
  %v0_1000eb10 = load i32, i32* @edi, align 4
  %v1_1000eb10 = load i32, i32* @esp, align 4
  %v2_1000eb10 = add i32 %v1_1000eb10, -4
  %v3_1000eb10 = inttoptr i32 %v2_1000eb10 to i32*
  store i32 %v0_1000eb10, i32* %v3_1000eb10, align 4
  %v0_1000eb11 = load i32, i32* @esi, align 4
  store i32 %v0_1000eb11, i32* @ecx, align 4
  %v1_1000eb13 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000eb13, i32* %eax.global-to-local, align 4
  %v1_1000eb18 = and i32 %v1_1000eb13, 65535
  store i32 %v1_1000eb18, i32* %edi.global-to-local, align 4
  %v1_1000eb1b = load i32, i32* @esp, align 4
  %v2_1000eb1b = add i32 %v1_1000eb1b, -4
  %v3_1000eb1b = inttoptr i32 %v2_1000eb1b to i32*
  store i32 %v1_1000eb18, i32* %v3_1000eb1b, align 4
  %v0_1000eb1c = load i32, i32* @esi, align 4
  store i32 %v0_1000eb1c, i32* @ecx, align 4
  %v1_1000eb1e = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000eb1e, i32* %eax.global-to-local, align 4
  %v1_1000eb23 = and i32 %v1_1000eb1e, 65535
  store i32 %v1_1000eb23, i32* @ecx, align 4
  %v0_1000eb26.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_1000eb2c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000eb26

dec_label_pc_1000eb26:                            ; preds = %dec_label_pc_1000eb02, %dec_label_pc_1000eafc
  %v0_1000eb2c = phi i32 [ %v0_1000ecd0, %dec_label_pc_1000eafc ], [ %v0_1000eb2c.pre, %dec_label_pc_1000eb02 ]
  %v0_1000eb26 = phi i32 [ %v4_1000e8a0, %dec_label_pc_1000eafc ], [ %v0_1000eb26.pre, %dec_label_pc_1000eb02 ]
  %stack_var_4.1 = phi i32 [ %v0_1000ec79, %dec_label_pc_1000eafc ], [ %v0_1000eb08, %dec_label_pc_1000eb02 ]
  %v1_1000eb26 = and i32 %v0_1000eb26, 65535
  store i32 %v1_1000eb26, i32* %eax.global-to-local, align 4
  %v3_1000eb29 = mul nuw nsw i32 %v1_1000eb26, 3
  store i32 %v3_1000eb29, i32* %edx.global-to-local, align 4
  %v1_1000eb2c = add i32 %v0_1000eb2c, 4
  %v2_1000eb2c = inttoptr i32 %v1_1000eb2c to i32*
  %v3_1000eb2c = load i32, i32* %v2_1000eb2c, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  %v4_1000eb34 = mul nuw nsw i32 %v1_1000eb26, 12
  %v5_1000eb34 = add nuw nsw i32 %v4_1000eb34, 6
  %v6_1000eb34 = add i32 %v5_1000eb34, %v3_1000eb2c
  %v7_1000eb34 = inttoptr i32 %v6_1000eb34 to i16*
  store i16 1, i16* %v7_1000eb34, align 2
  %v0_1000eb39 = load i32, i32* @ecx, align 4
  %v1_1000eb39 = and i32 %v0_1000eb39, 65535
  store i32 %v1_1000eb39, i32* %eax.global-to-local, align 4
  %v3_1000eb3c = mul nuw nsw i32 %v1_1000eb39, 3
  store i32 %v3_1000eb3c, i32* %edx.global-to-local, align 4
  %v0_1000eb3f = load i32, i32* @esi, align 4
  %v1_1000eb3f = add i32 %v0_1000eb3f, 4
  %v2_1000eb3f = inttoptr i32 %v1_1000eb3f to i32*
  %v3_1000eb3f = load i32, i32* %v2_1000eb3f, align 4
  store i32 %v3_1000eb3f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v1_1000eb44 = load i32, i32* @esp, align 4
  %v2_1000eb44 = add i32 %v1_1000eb44, -4
  %v3_1000eb44 = inttoptr i32 %v2_1000eb44 to i32*
  store i32 %v0_1000eb39, i32* %v3_1000eb44, align 4
  %v0_1000eb45 = load i32, i32* @esi, align 4
  store i32 %v0_1000eb45, i32* @ecx, align 4
  %v0_1000eb47 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000eb47 = trunc i32 %v0_1000eb47 to i16
  %v2_1000eb47 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000eb47 = load i32, i32* %edx.global-to-local, align 4
  %v4_1000eb47 = mul i32 %v3_1000eb47, 4
  %v5_1000eb47 = add i32 %v2_1000eb47, 6
  %v6_1000eb47 = add i32 %v5_1000eb47, %v4_1000eb47
  %v7_1000eb47 = inttoptr i32 %v6_1000eb47 to i16*
  store i16 %v1_1000eb47, i16* %v7_1000eb47, align 2
  %v1_1000eb4c = call i32 @function_1000e4b0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000eb4c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000ed31

dec_label_pc_1000eb56:                            ; preds = %dec_label_pc_1000e987
  br i1 %v1_1000eb58, label %dec_label_pc_1000eb88, label %dec_label_pc_1000eb5a

dec_label_pc_1000eb5a:                            ; preds = %dec_label_pc_1000eb56
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000eb74 = or i32 %v0_1000eb74, 1
  %v4_1000eb74 = trunc i32 %v1_1000eb74 to i8
  store i32 %v1_1000eb74, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_1000eb74, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000eb88

dec_label_pc_1000eb88:                            ; preds = %dec_label_pc_1000eb5a, %dec_label_pc_1000eb56
  %v0_1000ebc5 = phi i32 [ %v1_1000eb74, %dec_label_pc_1000eb5a ], [ %v0_1000eb74, %dec_label_pc_1000eb56 ]
  store i32 65535, i32* %edx.global-to-local, align 4
  %v14_1000eb8d = icmp eq i16 %v3_1000e8e4, -1
  br i1 %v14_1000eb8d, label %dec_label_pc_1000eba4, label %dec_label_pc_1000eb92

dec_label_pc_1000eb92:                            ; preds = %dec_label_pc_1000eb88
  %v1_1000eb92 = add i32 %v0_1000ecd0, 4
  %v2_1000eb92 = inttoptr i32 %v1_1000eb92 to i32*
  %v3_1000eb92 = load i32, i32* %v2_1000eb92, align 4
  store i32 %v3_1000eb92, i32* %ebx.global-to-local, align 4
  %v2_1000eb9a = mul nuw nsw i32 %v4_1000e8e4, 12
  %v3_1000eb9a = add i32 %v3_1000eb92, %v2_1000eb9a
  br label %dec_label_pc_1000eba4

dec_label_pc_1000eba4:                            ; preds = %dec_label_pc_1000eb88, %dec_label_pc_1000eb92
  %storemerge4 = phi i32 [ %v3_1000eb9a, %dec_label_pc_1000eb92 ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000eb88 ]
  store i32 %storemerge4, i32* %edx.global-to-local, align 4
  %v1_1000eba4 = inttoptr i32 %storemerge4 to i16*
  %v2_1000eba4 = load i16, i16* %v1_1000eba4, align 2
  %v3_1000eba4 = zext i16 %v2_1000eba4 to i32
  store i32 %v3_1000eba4, i32* %edx.global-to-local, align 4
  %v2_1000eba7 = and i32 %v0_1000ebc5, 1
  %v3_1000eba7 = icmp eq i32 %v2_1000eba7, 0
  %v1_1000eba9 = icmp eq i1 %v3_1000eba7, false
  br i1 %v1_1000eba9, label %dec_label_pc_1000ebd9, label %dec_label_pc_1000ebab

dec_label_pc_1000ebab:                            ; preds = %dec_label_pc_1000eba4
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000ebc5 = or i32 %v0_1000ebc5, 1
  %v4_1000ebc5 = trunc i32 %v1_1000ebc5 to i8
  store i32 %v1_1000ebc5, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  store i8 %v4_1000ebc5, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000ebd9

dec_label_pc_1000ebd9:                            ; preds = %dec_label_pc_1000ebab, %dec_label_pc_1000eba4
  %v0_1000ec58 = phi i32 [ %v1_1000ebc5, %dec_label_pc_1000ebab ], [ %v0_1000ebc5, %dec_label_pc_1000eba4 ]
  store i32 65535, i32* %ebx.global-to-local, align 4
  %v14_1000ebde = icmp eq i16 %v2_1000eba4, -1
  br i1 %v14_1000ebde, label %dec_label_pc_1000ebf3, label %dec_label_pc_1000ebe3

dec_label_pc_1000ebe3:                            ; preds = %dec_label_pc_1000ebd9
  %v1_1000ebe3 = add i32 %v0_1000ecd0, 4
  %v2_1000ebe3 = inttoptr i32 %v1_1000ebe3 to i32*
  %v3_1000ebe3 = load i32, i32* %v2_1000ebe3, align 4
  %v2_1000ebeb = mul nuw nsw i32 %v3_1000eba4, 12
  %v3_1000ebeb = add i32 %v3_1000ebe3, %v2_1000ebeb
  store i32 %v3_1000ebeb, i32* %ebx.global-to-local, align 4
  store i32 %v4_1000e8a0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ebf8

dec_label_pc_1000ebf3:                            ; preds = %dec_label_pc_1000ebd9
  store i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000ebf8

dec_label_pc_1000ebf8:                            ; preds = %dec_label_pc_1000ebf3, %dec_label_pc_1000ebe3
  %v0_1000ebf8 = phi i32 [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000ebf3 ], [ %v3_1000ebeb, %dec_label_pc_1000ebe3 ]
  %v1_1000ebf8 = add i32 %v0_1000ebf8, 6
  %v2_1000ebf8 = inttoptr i32 %v1_1000ebf8 to i16*
  %v3_1000ebf8 = load i16, i16* %v2_1000ebf8, align 2
  %v10_1000ebf8 = icmp eq i16 %v3_1000ebf8, 0
  %v1_1000ebfd = icmp eq i1 %v10_1000ebf8, false
  br i1 %v1_1000ebfd, label %dec_label_pc_1000ec3a, label %dec_label_pc_1000ebff

dec_label_pc_1000ebff:                            ; preds = %dec_label_pc_1000ebf8
  store i32 %v4_1000e8a0, i32* %eax.global-to-local, align 4
  %v1_1000ec02 = add i32 %v0_1000ecd0, 4
  %v2_1000ec02 = inttoptr i32 %v1_1000ec02 to i32*
  %v3_1000ec02 = load i32, i32* %v2_1000ec02, align 4
  store i32 %v3_1000ec02, i32* %edi.global-to-local, align 4
  %v3_1000ec05 = mul nuw nsw i32 %v4_1000e8a0, 3
  store i32 %v3_1000ec05, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  %v4_1000ec0d = mul nuw nsw i32 %v4_1000e8a0, 12
  %v5_1000ec0d = add nuw nsw i32 %v4_1000ec0d, 6
  %v6_1000ec0d = add i32 %v5_1000ec0d, %v3_1000ec02
  %v7_1000ec0d = inttoptr i32 %v6_1000ec0d to i16*
  store i16 1, i16* %v7_1000ec0d, align 2
  %v0_1000ec12 = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000ec14

dec_label_pc_1000ec14:                            ; preds = %dec_label_pc_1000ebff, %dec_label_pc_1000ea3e
  %storemerge2 = phi i32 [ %v0_1000ec12, %dec_label_pc_1000ebff ], [ %v1_1000ea51, %dec_label_pc_1000ea3e ]
  store i32 %storemerge2, i32* %eax.global-to-local, align 4
  %v3_1000ec14 = mul i32 %storemerge2, 3
  store i32 %v3_1000ec14, i32* %edx.global-to-local, align 4
  %v0_1000ec17 = load i32, i32* @esi, align 4
  %v1_1000ec17 = add i32 %v0_1000ec17, 4
  %v2_1000ec17 = inttoptr i32 %v1_1000ec17 to i32*
  %v3_1000ec17 = load i32, i32* %v2_1000ec17, align 4
  %v0_1000ec1a = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_1000ec1a, i32* %edi.global-to-local, align 4
  %v1_1000ec1c = trunc i32 %v0_1000ec1a to i16
  %v4_1000ec1c = mul i32 %storemerge2, 12
  %v5_1000ec1c = add i32 %v4_1000ec1c, 6
  %v6_1000ec1c = add i32 %v5_1000ec1c, %v3_1000ec17
  %v7_1000ec1c = inttoptr i32 %v6_1000ec1c to i16*
  store i16 %v1_1000ec1c, i16* %v7_1000ec1c, align 2
  %v0_1000ec21 = load i32, i32* @ecx, align 4
  store i32 %v0_1000ec21, i32* %eax.global-to-local, align 4
  %v3_1000ec23 = mul i32 %v0_1000ec21, 3
  store i32 %v3_1000ec23, i32* %edx.global-to-local, align 4
  %v0_1000ec26 = load i32, i32* @esi, align 4
  %v1_1000ec26 = add i32 %v0_1000ec26, 4
  %v2_1000ec26 = inttoptr i32 %v1_1000ec26 to i32*
  %v3_1000ec26 = load i32, i32* %v2_1000ec26, align 4
  store i32 %v3_1000ec26, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  store i32 %v0_1000ec21, i32* @ebx, align 4
  %v4_1000ec2d = mul i32 %v0_1000ec21, 12
  %v5_1000ec2d = add i32 %v4_1000ec2d, 6
  %v6_1000ec2d = add i32 %v5_1000ec2d, %v3_1000ec26
  %v7_1000ec2d = inttoptr i32 %v6_1000ec2d to i16*
  store i16 0, i16* %v7_1000ec2d, align 2
  %v0_1000ec32 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000ed31

dec_label_pc_1000ec3a:                            ; preds = %dec_label_pc_1000ebf8
  %v2_1000ec3a = and i32 %v0_1000ec58, 1
  %v3_1000ec3a = icmp eq i32 %v2_1000ec3a, 0
  %v1_1000ec3c = icmp eq i1 %v3_1000ec3a, false
  br i1 %v1_1000ec3c, label %dec_label_pc_1000ec6c, label %dec_label_pc_1000ec3e

dec_label_pc_1000ec3e:                            ; preds = %dec_label_pc_1000ec3a
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  %v1_1000ec58 = or i32 %v0_1000ec58, 1
  %v4_1000ec58 = trunc i32 %v1_1000ec58 to i8
  store i32 %v1_1000ec58, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  store i8 %v4_1000ec58, i8* @global_var_1002d3e0.475, align 1
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000ec6c

dec_label_pc_1000ec6c:                            ; preds = %dec_label_pc_1000ec3e, %dec_label_pc_1000ec3a
  %v0_1000ec97 = phi i32 [ %v1_1000ec58, %dec_label_pc_1000ec3e ], [ %v0_1000ec58, %dec_label_pc_1000ec3a ]
  store i32 %v0_1000ec79, i32* %ebx.global-to-local, align 4
  store i32 65535, i32* %edx.global-to-local, align 4
  %v1_1000ec74 = trunc i32 %v0_1000ec79 to i16
  %v14_1000ec74 = icmp eq i16 %v1_1000ec74, -1
  br i1 %v14_1000ec74, label %dec_label_pc_1000ec8a, label %dec_label_pc_1000ec79

dec_label_pc_1000ec79:                            ; preds = %dec_label_pc_1000ec6c
  %v1_1000ec79 = and i32 %v0_1000ec79, 65535
  store i32 %v1_1000ec79, i32* %edx.global-to-local, align 4
  %v1_1000ec7c = add i32 %v0_1000ecd0, 4
  %v2_1000ec7c = inttoptr i32 %v1_1000ec7c to i32*
  %v3_1000ec7c = load i32, i32* %v2_1000ec7c, align 4
  %v2_1000ec82 = mul nuw nsw i32 %v1_1000ec79, 12
  %v3_1000ec82 = add i32 %v3_1000ec7c, %v2_1000ec82
  store i32 %v3_1000ec82, i32* %edx.global-to-local, align 4
  store i32 %v0_1000ec79, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000ec8f

dec_label_pc_1000ec8a:                            ; preds = %dec_label_pc_1000ec6c
  store i32 ptrtoint (i16** @global_var_1002d3d8.476 to i32), i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1000ec8f

dec_label_pc_1000ec8f:                            ; preds = %dec_label_pc_1000ec8a, %dec_label_pc_1000ec79
  %v0_1000ec8f = phi i32 [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000ec8a ], [ %v3_1000ec82, %dec_label_pc_1000ec79 ]
  %v1_1000ec8f = add i32 %v0_1000ec8f, 4
  %v2_1000ec8f = inttoptr i32 %v1_1000ec8f to i16*
  %v3_1000ec8f = load i16, i16* %v2_1000ec8f, align 2
  %v4_1000ec8f = zext i16 %v3_1000ec8f to i32
  store i32 %v4_1000ec8f, i32* %edx.global-to-local, align 4
  %v2_1000ec93 = and i32 %v0_1000ec97, 1
  %v3_1000ec93 = icmp eq i32 %v2_1000ec93, 0
  %v1_1000ec95 = icmp eq i1 %v3_1000ec93, false
  br i1 %v1_1000ec95, label %dec_label_pc_1000ecc1, label %dec_label_pc_1000ec97

dec_label_pc_1000ec97:                            ; preds = %dec_label_pc_1000ec8f
  %v1_1000ec97 = or i32 %v0_1000ec97, 1
  %v4_1000ec97 = trunc i32 %v1_1000ec97 to i8
  store i8 %v4_1000ec97, i8* @global_var_1002d3e0.475, align 1
  store i16 -1, i16* bitcast (i16** @global_var_1002d3d8.476 to i16*), align 4
  store i16 -1, i16* @global_var_1002d3da.477, align 2
  store i16 -1, i16* @global_var_1002d3dc.478, align 2
  store i32 1, i32* %eax.global-to-local, align 4
  store i16 1, i16* bitcast (i32* @global_var_1002d3de.479 to i16*), align 4
  br label %dec_label_pc_1000ecc1

dec_label_pc_1000ecc1:                            ; preds = %dec_label_pc_1000ec97, %dec_label_pc_1000ec8f
  store i32 65535, i32* %eax.global-to-local, align 4
  %v14_1000ecc6 = icmp eq i16 %v3_1000ec8f, -1
  br i1 %v14_1000ecc6, label %dec_label_pc_1000ecdd, label %dec_label_pc_1000eccb

dec_label_pc_1000eccb:                            ; preds = %dec_label_pc_1000ecc1
  store i32 %v4_1000ec8f, i32* %eax.global-to-local, align 4
  %v3_1000eccd = mul nuw nsw i32 %v4_1000ec8f, 3
  store i32 %v3_1000eccd, i32* %edx.global-to-local, align 4
  %v1_1000ecd0 = add i32 %v0_1000ecd0, 4
  %v2_1000ecd0 = inttoptr i32 %v1_1000ecd0 to i32*
  %v3_1000ecd0 = load i32, i32* %v2_1000ecd0, align 4
  %v2_1000ecd3 = mul nuw nsw i32 %v4_1000ec8f, 12
  %v3_1000ecd3 = add i32 %v3_1000ecd0, %v2_1000ecd3
  br label %dec_label_pc_1000ecdd

dec_label_pc_1000ecdd:                            ; preds = %dec_label_pc_1000ecc1, %dec_label_pc_1000eccb
  %storemerge3 = phi i32 [ %v3_1000ecd3, %dec_label_pc_1000eccb ], [ ptrtoint (i16** @global_var_1002d3d8.476 to i32), %dec_label_pc_1000ecc1 ]
  store i32 %storemerge3, i32* %eax.global-to-local, align 4
  %v1_1000ecdd = inttoptr i32 %storemerge3 to i16*
  %v2_1000ecdd = load i16, i16* %v1_1000ecdd, align 2
  %v15_1000ecdd = icmp eq i16 %v2_1000ecdd, %v1_1000ec74
  %v1_1000ece0 = icmp eq i1 %v15_1000ecdd, false
  br i1 %v1_1000ece0, label %dec_label_pc_1000ed06, label %dec_label_pc_1000ece2

dec_label_pc_1000ece2:                            ; preds = %dec_label_pc_1000ecdd
  store i32 %v4_1000e8a0, i32* %ebx.global-to-local, align 4
  %v1_1000ece5 = load i32, i32* @esp, align 4
  %v2_1000ece5 = add i32 %v1_1000ece5, -4
  %v3_1000ece5 = inttoptr i32 %v2_1000ece5 to i32*
  store i32 %v4_1000e8a0, i32* %v3_1000ece5, align 4
  %v0_1000ece6 = load i32, i32* @esi, align 4
  store i32 %v0_1000ece6, i32* @ecx, align 4
  %v0_1000ece8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000eceb = call i32 @function_1000e4b0(i32 %v4_1000e8a0)
  store i32 %v1_1000eceb, i32* %eax.global-to-local, align 4
  %v0_1000ecf0 = load i32, i32* @edi, align 4
  %v1_1000ecf0 = load i32, i32* @esp, align 4
  %v2_1000ecf0 = add i32 %v1_1000ecf0, -4
  %v3_1000ecf0 = inttoptr i32 %v2_1000ecf0 to i32*
  store i32 %v0_1000ecf0, i32* %v3_1000ecf0, align 4
  %v0_1000ecf1 = load i32, i32* @esi, align 4
  store i32 %v0_1000ecf1, i32* @ecx, align 4
  %v1_1000ecf3 = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000ecf3, i32* %eax.global-to-local, align 4
  %v1_1000ecf8 = and i32 %v1_1000ecf3, 65535
  store i32 %v1_1000ecf8, i32* %edi.global-to-local, align 4
  %v1_1000ecfb = load i32, i32* @esp, align 4
  %v2_1000ecfb = add i32 %v1_1000ecfb, -4
  %v3_1000ecfb = inttoptr i32 %v2_1000ecfb to i32*
  store i32 %v1_1000ecf8, i32* %v3_1000ecfb, align 4
  %v0_1000ecfc = load i32, i32* @esi, align 4
  store i32 %v0_1000ecfc, i32* @ecx, align 4
  %v1_1000ecfe = call i32 @function_1000e070(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000ecfe, i32* %eax.global-to-local, align 4
  %v1_1000ed03 = and i32 %v1_1000ecfe, 65535
  store i32 %v1_1000ed03, i32* @ecx, align 4
  %v0_1000ed06.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_1000ed0c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ed06

dec_label_pc_1000ed06:                            ; preds = %dec_label_pc_1000ece2, %dec_label_pc_1000ecdd
  %v0_1000ed0c = phi i32 [ %v0_1000ecd0, %dec_label_pc_1000ecdd ], [ %v0_1000ed0c.pre, %dec_label_pc_1000ece2 ]
  %v0_1000ed06 = phi i32 [ %v4_1000e8a0, %dec_label_pc_1000ecdd ], [ %v0_1000ed06.pre, %dec_label_pc_1000ece2 ]
  %stack_var_4.2 = phi i32 [ %v0_1000ec79, %dec_label_pc_1000ecdd ], [ %v0_1000ece8, %dec_label_pc_1000ece2 ]
  %v1_1000ed06 = and i32 %v0_1000ed06, 65535
  store i32 %v1_1000ed06, i32* %eax.global-to-local, align 4
  %v3_1000ed09 = mul nuw nsw i32 %v1_1000ed06, 3
  store i32 %v3_1000ed09, i32* %edx.global-to-local, align 4
  %v1_1000ed0c = add i32 %v0_1000ed0c, 4
  %v2_1000ed0c = inttoptr i32 %v1_1000ed0c to i32*
  %v3_1000ed0c = load i32, i32* %v2_1000ed0c, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  %v4_1000ed14 = mul nuw nsw i32 %v1_1000ed06, 12
  %v5_1000ed14 = add nuw nsw i32 %v4_1000ed14, 6
  %v6_1000ed14 = add i32 %v5_1000ed14, %v3_1000ed0c
  %v7_1000ed14 = inttoptr i32 %v6_1000ed14 to i16*
  store i16 1, i16* %v7_1000ed14, align 2
  %v0_1000ed19 = load i32, i32* @ecx, align 4
  %v1_1000ed19 = and i32 %v0_1000ed19, 65535
  store i32 %v1_1000ed19, i32* %eax.global-to-local, align 4
  %v3_1000ed1c = mul nuw nsw i32 %v1_1000ed19, 3
  store i32 %v3_1000ed1c, i32* %edx.global-to-local, align 4
  %v0_1000ed1f = load i32, i32* @esi, align 4
  %v1_1000ed1f = add i32 %v0_1000ed1f, 4
  %v2_1000ed1f = inttoptr i32 %v1_1000ed1f to i32*
  %v3_1000ed1f = load i32, i32* %v2_1000ed1f, align 4
  store i32 %v3_1000ed1f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v1_1000ed24 = load i32, i32* @esp, align 4
  %v2_1000ed24 = add i32 %v1_1000ed24, -4
  %v3_1000ed24 = inttoptr i32 %v2_1000ed24 to i32*
  store i32 %v0_1000ed19, i32* %v3_1000ed24, align 4
  %v0_1000ed25 = load i32, i32* @esi, align 4
  store i32 %v0_1000ed25, i32* @ecx, align 4
  %v0_1000ed27 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ed27 = trunc i32 %v0_1000ed27 to i16
  %v2_1000ed27 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000ed27 = load i32, i32* %edx.global-to-local, align 4
  %v4_1000ed27 = mul i32 %v3_1000ed27, 4
  %v5_1000ed27 = add i32 %v2_1000ed27, 6
  %v6_1000ed27 = add i32 %v5_1000ed27, %v4_1000ed27
  %v7_1000ed27 = inttoptr i32 %v6_1000ed27 to i16*
  store i16 %v1_1000ed27, i16* %v7_1000ed27, align 2
  %v1_1000ed2c = call i32 @function_1000e3b0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000ed2c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000ed31

dec_label_pc_1000ed31:                            ; preds = %dec_label_pc_1000ed06, %dec_label_pc_1000ec14, %dec_label_pc_1000eb26
  %stack_var_4.3 = phi i32 [ %stack_var_4.2, %dec_label_pc_1000ed06 ], [ %v0_1000ec32, %dec_label_pc_1000ec14 ], [ %stack_var_4.1, %dec_label_pc_1000eb26 ]
  %v0_1000ed31 = load i32, i32* @ebx, align 4
  %v1_1000ed31 = trunc i32 %v0_1000ed31 to i16
  %v2_1000ed31 = load i32, i32* @esi, align 4
  %v3_1000ed31 = add i32 %v2_1000ed31, 16
  %v4_1000ed31 = inttoptr i32 %v3_1000ed31 to i16*
  %v5_1000ed31 = load i16, i16* %v4_1000ed31, align 2
  %v16_1000ed31 = icmp eq i16 %v1_1000ed31, %v5_1000ed31
  %v1_1000ed35 = icmp eq i1 %v16_1000ed31, false
  br i1 %v1_1000ed35, label %dec_label_pc_1000e7c6, label %dec_label_pc_1000ed3b

dec_label_pc_1000ed3b:                            ; preds = %dec_label_pc_1000ed31, %dec_label_pc_1000e858
  %v0_1000ed3c36 = phi i32 [ %v2_1000ed31, %dec_label_pc_1000ed31 ], [ %v0_1000ecd0, %dec_label_pc_1000e858 ]
  %v0_1000ed3b = load i32, i32* @esp, align 4
  %v1_1000ed3b = inttoptr i32 %v0_1000ed3b to i32*
  %v2_1000ed3b = load i32, i32* %v1_1000ed3b, align 4
  store i32 %v2_1000ed3b, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000ed3c

dec_label_pc_1000ed3c:                            ; preds = %dec_label_pc_1000ed3b, %dec_label_pc_1000e7b0
  %v0_1000ed3c = phi i32 [ %v0_1000ed3c36, %dec_label_pc_1000ed3b ], [ %v0_1000e7b3, %dec_label_pc_1000e7b0 ]
  %v1_1000ed3c = add i32 %v0_1000ed3c, 16
  %v2_1000ed3c = inttoptr i32 %v1_1000ed3c to i16*
  %v3_1000ed3c = load i16, i16* %v2_1000ed3c, align 2
  %v4_1000ed3c = zext i16 %v3_1000ed3c to i32
  store i32 %v4_1000ed3c, i32* %eax.global-to-local, align 4
  %v1_1000ed40 = add i32 %v0_1000ed3c, 4
  %v2_1000ed40 = inttoptr i32 %v1_1000ed40 to i32*
  %v3_1000ed40 = load i32, i32* %v2_1000ed40, align 4
  store i32 %v3_1000ed40, i32* %edx.global-to-local, align 4
  %v3_1000ed43 = mul nuw nsw i32 %v4_1000ed3c, 3
  store i32 %v3_1000ed43, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v4_1000ed4c = mul nuw nsw i32 %v4_1000ed3c, 12
  %v5_1000ed4c = add i32 %v3_1000ed40, 6
  %v6_1000ed4c = add i32 %v5_1000ed4c, %v4_1000ed4c
  %v7_1000ed4c = inttoptr i32 %v6_1000ed4c to i16*
  store i16 1, i16* %v7_1000ed4c, align 2
  %v0_1000ed51 = load i32, i32* @esp, align 4
  %v1_1000ed51 = inttoptr i32 %v0_1000ed51 to i32*
  %v2_1000ed51 = load i32, i32* %v1_1000ed51, align 4
  store i32 %v2_1000ed51, i32* @ebx, align 4
  %v0_1000ed55 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000ed55
}

define i32 @function_1000ed60(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000ed60:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_8, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000ed63 = load i32, i32* @esi, align 4
  store i32 %v0_1000ed63, i32* %stack_var_-8, align 4
  %v0_1000ed64 = load i32, i32* @ecx, align 4
  store i32 %v0_1000ed64, i32* @esi, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_1000ed69 = icmp eq i32 %arg2, 0
  %v1_1000ed6b = icmp eq i1 %v1_1000ed69, false
  br i1 %v1_1000ed6b, label %dec_label_pc_1000ed7d, label %dec_label_pc_1000ed6d

dec_label_pc_1000ed6d:                            ; preds = %dec_label_pc_1000ed60
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  %v3_1000ed75 = inttoptr i32 %arg1 to i16*
  store i16 -1, i16* %v3_1000ed75, align 2
  %v2_1000ed78 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000ed78, i32* @esi, align 4
  %v0_1000ed7a = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000ed7a

dec_label_pc_1000ed7d:                            ; preds = %dec_label_pc_1000ed60
  %v1_1000ed7d = add i32 %v0_1000ed64, 28
  %v2_1000ed7d = inttoptr i32 %v1_1000ed7d to i8*
  %v3_1000ed7d = load i8, i8* %v2_1000ed7d, align 1
  %v10_1000ed7d = icmp eq i8 %v3_1000ed7d, 0
  %v2_1000ed81 = add i32 %v0_1000ed64, 32
  %v3_1000ed81 = inttoptr i32 %v2_1000ed81 to i32*
  store i32 %arg2, i32* %v3_1000ed81, align 4
  %v0_1000ed8d = load i32, i32* %stack_var_-8, align 4
  br i1 %v10_1000ed7d, label %dec_label_pc_1000ed8d, label %dec_label_pc_1000ed86

dec_label_pc_1000ed86:                            ; preds = %dec_label_pc_1000ed7d
  %v1_1000ed86 = call i32 @function_1000f240(i32 %v0_1000ed8d)
  br label %dec_label_pc_1000ed92

dec_label_pc_1000ed8d:                            ; preds = %dec_label_pc_1000ed7d
  %v1_1000ed8d = call i32 @function_1000f200(i32 %v0_1000ed8d)
  br label %dec_label_pc_1000ed92

dec_label_pc_1000ed92:                            ; preds = %dec_label_pc_1000ed8d, %dec_label_pc_1000ed86
  %storemerge = phi i32 [ %v1_1000ed8d, %dec_label_pc_1000ed8d ], [ %v1_1000ed86, %dec_label_pc_1000ed86 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_1000ed92 = ptrtoint i32* %stack_var_8 to i32
  store i32 %v2_1000ed92, i32* %stack_var_-12, align 4
  %v0_1000ed96 = load i32, i32* @esi, align 4
  store i32 %v0_1000ed96, i32* @ecx, align 4
  %v1_1000ed98 = trunc i32 %storemerge to i16
  %v3_1000ed98 = add i32 %v0_1000ed96, 30
  %v4_1000ed98 = inttoptr i32 %v3_1000ed98 to i16*
  store i16 %v1_1000ed98, i16* %v4_1000ed98, align 2
  store i32 -1, i32* %stack_var_8, align 4
  %v0_1000eda3 = load i32, i32* %stack_var_-12, align 4
  %v1_1000eda3 = inttoptr i32 %v0_1000eda3 to i32*
  %v2_1000eda3 = call i32 @function_1000e5f0(i32* %v1_1000eda3)
  store i32 %arg1, i32* @ecx, align 4
  %v1_1000edab = trunc i32 %v2_1000eda3 to i16
  %v3_1000edab = inttoptr i32 %arg1 to i16*
  store i16 %v1_1000edab, i16* %v3_1000edab, align 2
  %v0_1000edae = load i32, i32* @ecx, align 4
  store i32 %v0_1000edae, i32* %eax.global-to-local, align 4
  %v2_1000edb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000edb0, i32* @esi, align 4
  %v2_1000edb1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000edb1, i32* @ebp, align 4
  ret i32 %v0_1000edae
}

define i32 @function_1000edc0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000edc0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000edc0 = load i32, i32* @ebp, align 4
  store i32 %v0_1000edc0, i32* %stack_var_-4, align 4
  %v4_1000edc0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000edc0, i32* @ebp, align 4
  %v0_1000edc3 = load i32, i32* @ecx, align 4
  %v1_1000edc3 = add i32 %v0_1000edc3, 4
  %v2_1000edc3 = inttoptr i32 %v1_1000edc3 to i32*
  %v3_1000edc3 = load i32, i32* %v2_1000edc3, align 4
  %v0_1000edc6 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_1000edca = and i32 %arg1, 65535
  %v2_1000edd0 = mul nuw nsw i32 %v1_1000edca, 12
  %v3_1000edd0 = add i32 %v3_1000edc3, %v2_1000edd0
  store i32 %v3_1000edd0, i32* %eax.global-to-local, align 4
  %v5_1000edd3 = and i32 %arg2, 65535
  %v7_1000edd3 = and i32 %v3_1000edc3, -65536
  %v8_1000edd3 = or i32 %v7_1000edd3, %v5_1000edd3
  store i32 %v8_1000edd3, i32* %edx.global-to-local, align 4
  %v0_1000edd7 = load i32, i32* @edi, align 4
  store i32 %v0_1000edd7, i32* %stack_var_-12, align 4
  store i32 65535, i32* %edi.global-to-local, align 4
  %v3_1000eddd = add i32 %v3_1000edd0, 2
  %v4_1000eddd = inttoptr i32 %v3_1000eddd to i16*
  store i16 -1, i16* %v4_1000eddd, align 2
  %v0_1000ede1 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ede1 = trunc i32 %v0_1000ede1 to i16
  %v2_1000ede1 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000ede1 = inttoptr i32 %v2_1000ede1 to i16*
  store i16 %v1_1000ede1, i16* %v3_1000ede1, align 2
  store i32 0, i32* @edi, align 4
  %v0_1000ede6 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000ede6 = trunc i32 %v0_1000ede6 to i16
  %v2_1000ede6 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000ede6 = add i32 %v2_1000ede6, 4
  %v4_1000ede6 = inttoptr i32 %v3_1000ede6 to i16*
  store i16 %v1_1000ede6, i16* %v4_1000ede6, align 2
  %v0_1000edea = load i32, i32* @edi, align 4
  %v1_1000edea = trunc i32 %v0_1000edea to i16
  %v2_1000edea = load i32, i32* %eax.global-to-local, align 4
  %v3_1000edea = add i32 %v2_1000edea, 6
  %v4_1000edea = inttoptr i32 %v3_1000edea to i16*
  store i16 %v1_1000edea, i16* %v4_1000edea, align 2
  store i32 65535, i32* %eax.global-to-local, align 4
  %v0_1000edf3 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000edf3 = trunc i32 %v0_1000edf3 to i16
  %v14_1000edf3 = icmp eq i16 %v1_1000edf3, -1
  br i1 %v14_1000edf3, label %dec_label_pc_1000ee28, label %dec_label_pc_1000edf8

dec_label_pc_1000edf8:                            ; preds = %dec_label_pc_1000edc0
  %v4_1000edf8 = trunc i32 %arg3 to i8
  %v11_1000edf8 = icmp eq i8 %v4_1000edf8, 0
  %v1_1000edfc = and i32 %v0_1000edf3, 65535
  store i32 %v1_1000edfc, i32* %eax.global-to-local, align 4
  %v3_1000edff = mul nuw nsw i32 %v1_1000edfc, 3
  store i32 %v3_1000edff, i32* %edx.global-to-local, align 4
  %v0_1000ee02 = load i32, i32* @ecx, align 4
  %v1_1000ee02 = add i32 %v0_1000ee02, 4
  %v2_1000ee02 = inttoptr i32 %v1_1000ee02 to i32*
  %v3_1000ee02 = load i32, i32* %v2_1000ee02, align 4
  store i32 %v3_1000ee02, i32* %eax.global-to-local, align 4
  %v0_1000ee17 = load i32, i32* @esi, align 4
  store i32 %v0_1000ee17, i32* %stack_var_-16, align 4
  %v1_1000ee18 = trunc i32 %v0_1000ee17 to i16
  %v4_1000ee18 = mul nuw nsw i32 %v1_1000edfc, 12
  br i1 %v11_1000edf8, label %dec_label_pc_1000ee17, label %dec_label_pc_1000ee07

dec_label_pc_1000ee07:                            ; preds = %dec_label_pc_1000edf8
  %v5_1000ee08 = add i32 %v3_1000ee02, %v4_1000ee18
  %v6_1000ee08 = inttoptr i32 %v5_1000ee08 to i16*
  store i16 %v1_1000ee18, i16* %v6_1000ee08, align 2
  %v0_1000ee0c = load i32, i32* %stack_var_-16, align 4
  %v1_1000ee0c = load i32, i32* %stack_var_-12, align 4
  %v3_1000ee0c = load i32, i32* %stack_var_-4, align 4
  %v4_1000ee0c = call i32 @function_1000e7b0(i32 %v0_1000ee0c, i32 %v1_1000ee0c, i32 %v0_1000edc6, i32 %v3_1000ee0c)
  store i32 %v4_1000ee0c, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ee0c, i32* @edi, align 4
  store i32 %v1_1000ee0c, i32* @esi, align 4
  ret i32 %v4_1000ee0c

dec_label_pc_1000ee17:                            ; preds = %dec_label_pc_1000edf8
  %v5_1000ee18 = or i32 %v4_1000ee18, 2
  %v6_1000ee18 = add i32 %v5_1000ee18, %v3_1000ee02
  %v7_1000ee18 = inttoptr i32 %v6_1000ee18 to i16*
  store i16 %v1_1000ee18, i16* %v7_1000ee18, align 2
  %v0_1000ee1d = load i32, i32* %stack_var_-16, align 4
  %v1_1000ee1d = load i32, i32* %stack_var_-12, align 4
  %v3_1000ee1d = load i32, i32* %stack_var_-4, align 4
  %v4_1000ee1d = call i32 @function_1000e7b0(i32 %v0_1000ee1d, i32 %v1_1000ee1d, i32 %v0_1000edc6, i32 %v3_1000ee1d)
  store i32 %v4_1000ee1d, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ee1d, i32* @edi, align 4
  store i32 %v1_1000ee1d, i32* @esi, align 4
  ret i32 %v4_1000ee1d

dec_label_pc_1000ee28:                            ; preds = %dec_label_pc_1000edc0
  %v0_1000ee28 = load i32, i32* @esi, align 4
  store i32 %v0_1000ee28, i32* %stack_var_-16, align 4
  %v1_1000ee29 = trunc i32 %v0_1000ee28 to i16
  %v2_1000ee29 = load i32, i32* @ecx, align 4
  %v3_1000ee29 = add i32 %v2_1000ee29, 16
  %v4_1000ee29 = inttoptr i32 %v3_1000ee29 to i16*
  store i16 %v1_1000ee29, i16* %v4_1000ee29, align 2
  %v0_1000ee2d = load i32, i32* %stack_var_-16, align 4
  %v1_1000ee2d = load i32, i32* %stack_var_-12, align 4
  %v3_1000ee2d = load i32, i32* %stack_var_-4, align 4
  %v4_1000ee2d = call i32 @function_1000e7b0(i32 %v0_1000ee2d, i32 %v1_1000ee2d, i32 %v0_1000edc6, i32 %v3_1000ee2d)
  store i32 %v4_1000ee2d, i32* %eax.global-to-local, align 4
  store i32 %v0_1000ee2d, i32* @edi, align 4
  store i32 %v1_1000ee2d, i32* @esi, align 4
  ret i32 %v4_1000ee2d
}

define i32 @function_1000ee40(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000ee40:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_1000ee41 = load i32, i32* @esi, align 4
  %v0_1000ee42 = load i32, i32* @edi, align 4
  %v0_1000ee43 = load i32, i32* @ecx, align 4
  store i32 %v0_1000ee43, i32* @esi, align 4
  %v2_1000ee45 = call i32 @function_1000e6f0(i32 %v0_1000ee42, i32 %v0_1000ee41)
  store i32 65535, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_1000ee51 = load i32, i32* @esi, align 4
  %v3_1000ee51 = add i32 %v2_1000ee51, 20
  %v4_1000ee51 = inttoptr i32 %v3_1000ee51 to i16*
  store i16 -1, i16* %v4_1000ee51, align 2
  %v0_1000ee55 = load i32, i32* @esi, align 4
  %v1_1000ee55 = add i32 %v0_1000ee55, 12
  %v2_1000ee55 = inttoptr i32 %v1_1000ee55 to i32*
  %v3_1000ee55 = load i32, i32* %v2_1000ee55, align 4
  %v4_1000ee55 = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000ee58 = icmp slt i32 %v3_1000ee55, %v4_1000ee55
  br i1 %v5_1000ee58, label %dec_label_pc_1000ee77, label %dec_label_pc_1000ee5a

dec_label_pc_1000ee5a:                            ; preds = %dec_label_pc_1000ee40
  %v1_1000ee5a = add i32 %v0_1000ee55, 4
  %v2_1000ee5a = inttoptr i32 %v1_1000ee5a to i32*
  %v3_1000ee5a = load i32, i32* %v2_1000ee5a, align 4
  store i32 %v3_1000ee5a, i32* %eax.global-to-local, align 4
  %v12_1000ee5d = icmp eq i32 %v3_1000ee5a, %v4_1000ee55
  br i1 %v12_1000ee5d, label %dec_label_pc_1000ee74, label %dec_label_pc_1000ee61

dec_label_pc_1000ee61:                            ; preds = %dec_label_pc_1000ee5a
  %v0_1000ee61 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000ee61, i32* @ecx, align 4
  %v1_1000ee67 = inttoptr i32 %v0_1000ee61 to i32*
  %v2_1000ee67 = load i32, i32* %v1_1000ee67, align 4
  store i32 %v2_1000ee67, i32* @ecx, align 4
  %v1_1000ee69 = inttoptr i32 %v2_1000ee67 to i32*
  %v2_1000ee69 = load i32, i32* %v1_1000ee69, align 4
  %v1_1000ee6c = add i32 %v2_1000ee69, 20
  %v2_1000ee6c = inttoptr i32 %v1_1000ee6c to i32*
  %v3_1000ee6c = load i32, i32* %v2_1000ee6c, align 4
  store i32 %v3_1000ee6c, i32* %eax.global-to-local, align 4
  store i32 %v4_1000ee55, i32* %v2_1000ee5a, align 4
  %v0_1000ee74.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000ee74.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ee74

dec_label_pc_1000ee74:                            ; preds = %dec_label_pc_1000ee61, %dec_label_pc_1000ee5a
  %v1_1000ee74 = phi i32 [ %v1_1000ee74.pre, %dec_label_pc_1000ee61 ], [ %v0_1000ee55, %dec_label_pc_1000ee5a ]
  %v0_1000ee74 = phi i32 [ %v0_1000ee74.pre, %dec_label_pc_1000ee61 ], [ %v4_1000ee55, %dec_label_pc_1000ee5a ]
  %v2_1000ee74 = add i32 %v1_1000ee74, 8
  %v3_1000ee74 = inttoptr i32 %v2_1000ee74 to i32*
  store i32 %v0_1000ee74, i32* %v3_1000ee74, align 4
  %v2_1000ee7e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ee77

dec_label_pc_1000ee77:                            ; preds = %dec_label_pc_1000ee74, %dec_label_pc_1000ee40
  %v2_1000ee7e = phi i32 [ %v2_1000ee7e.pre, %dec_label_pc_1000ee74 ], [ %v0_1000ee55, %dec_label_pc_1000ee40 ]
  store i32 65535, i32* @ecx, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v3_1000ee7e = add i32 %v2_1000ee7e, 22
  %v4_1000ee7e = inttoptr i32 %v3_1000ee7e to i16*
  store i16 -1, i16* %v4_1000ee7e, align 2
  %v0_1000ee82 = load i32, i32* @esi, align 4
  %v1_1000ee82 = add i32 %v0_1000ee82, 48
  %v2_1000ee82 = inttoptr i32 %v1_1000ee82 to i32*
  %v3_1000ee82 = load i32, i32* %v2_1000ee82, align 4
  %v4_1000ee82 = load i32, i32* %ebx.global-to-local, align 4
  %v7_1000ee85 = icmp sgt i32 %v3_1000ee82, %v4_1000ee82
  br i1 %v7_1000ee85, label %dec_label_pc_1000ee90.preheader, label %dec_label_pc_1000ee77.dec_label_pc_1000eeac_crit_edge

dec_label_pc_1000ee77.dec_label_pc_1000eeac_crit_edge: ; preds = %dec_label_pc_1000ee77
  %v0_1000eeac.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000eeac

dec_label_pc_1000ee90.preheader:                  ; preds = %dec_label_pc_1000ee77
  %v1_1000ee9d.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000eea3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000ee90

dec_label_pc_1000ee90:                            ; preds = %dec_label_pc_1000ee90.preheader, %dec_label_pc_1000ee90
  %v1_1000eea3 = phi i32 [ %v1_1000eea3.pre, %dec_label_pc_1000ee90.preheader ], [ %v2_1000eea3, %dec_label_pc_1000ee90 ]
  %v1_1000ee9d = phi i32 [ %v1_1000ee9d.pre, %dec_label_pc_1000ee90.preheader ], [ %v1_1000eea6, %dec_label_pc_1000ee90 ]
  %v0_1000ee98 = phi i32 [ %v0_1000ee82, %dec_label_pc_1000ee90.preheader ], [ %v1_1000eea7, %dec_label_pc_1000ee90 ]
  %v0_1000ee90 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  %v1_1000ee96 = inttoptr i32 %v0_1000ee90 to i32*
  %v2_1000ee96 = load i32, i32* %v1_1000ee96, align 4
  store i32 %v2_1000ee96, i32* @ecx, align 4
  %v1_1000ee98 = add i32 %v0_1000ee98, 36
  %v2_1000ee98 = inttoptr i32 %v1_1000ee98 to i32*
  %v3_1000ee98 = load i32, i32* %v2_1000ee98, align 4
  %v1_1000ee9b = inttoptr i32 %v2_1000ee96 to i32*
  %v2_1000ee9b = load i32, i32* %v1_1000ee9b, align 4
  store i32 %v2_1000ee9b, i32* %eax.global-to-local, align 4
  %v2_1000ee9d = mul i32 %v1_1000ee9d, 4
  %v3_1000ee9d = add i32 %v3_1000ee98, %v2_1000ee9d
  %v4_1000ee9d = inttoptr i32 %v3_1000ee9d to i32*
  %v5_1000ee9d = load i32, i32* %v4_1000ee9d, align 4
  %v1_1000eea0 = add i32 %v2_1000ee9b, 20
  %v2_1000eea0 = inttoptr i32 %v1_1000eea0 to i32*
  %v3_1000eea0 = load i32, i32* %v2_1000eea0, align 4
  store i32 %v3_1000eea0, i32* %eax.global-to-local, align 4
  %v2_1000eea3 = add i32 %v1_1000eea3, -4
  %v3_1000eea3 = inttoptr i32 %v2_1000eea3 to i32*
  store i32 %v5_1000ee9d, i32* %v3_1000eea3, align 4
  %v0_1000eea6 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000eea6 = add i32 %v0_1000eea6, 1
  store i32 %v1_1000eea6, i32* %edi.global-to-local, align 4
  %v1_1000eea7 = load i32, i32* @esi, align 4
  %v2_1000eea7 = add i32 %v1_1000eea7, 48
  %v3_1000eea7 = inttoptr i32 %v2_1000eea7 to i32*
  %v4_1000eea7 = load i32, i32* %v3_1000eea7, align 4
  %v5_1000eeaa = icmp slt i32 %v1_1000eea6, %v4_1000eea7
  br i1 %v5_1000eeaa, label %dec_label_pc_1000ee90, label %dec_label_pc_1000eeac.loopexit

dec_label_pc_1000eeac.loopexit:                   ; preds = %dec_label_pc_1000ee90
  %v0_1000eead.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000eeac

dec_label_pc_1000eeac:                            ; preds = %dec_label_pc_1000ee77.dec_label_pc_1000eeac_crit_edge, %dec_label_pc_1000eeac.loopexit
  %v1_1000eead = phi i32 [ %v0_1000ee82, %dec_label_pc_1000ee77.dec_label_pc_1000eeac_crit_edge ], [ %v1_1000eea7, %dec_label_pc_1000eeac.loopexit ]
  %v0_1000eead = phi i32 [ %v4_1000ee82, %dec_label_pc_1000ee77.dec_label_pc_1000eeac_crit_edge ], [ %v0_1000eead.pre, %dec_label_pc_1000eeac.loopexit ]
  %v0_1000eeac = phi i32 [ %v0_1000eeac.pre, %dec_label_pc_1000ee77.dec_label_pc_1000eeac_crit_edge ], [ %v2_1000eea3, %dec_label_pc_1000eeac.loopexit ]
  %v1_1000eeac = inttoptr i32 %v0_1000eeac to i32*
  %v2_1000eeac = load i32, i32* %v1_1000eeac, align 4
  store i32 %v2_1000eeac, i32* @edi, align 4
  %v2_1000eead = add i32 %v1_1000eead, 48
  %v3_1000eead = inttoptr i32 %v2_1000eead to i32*
  store i32 %v0_1000eead, i32* %v3_1000eead, align 4
  %v0_1000eeb0 = load i32, i32* @esp, align 4
  %v1_1000eeb0 = inttoptr i32 %v0_1000eeb0 to i32*
  %v2_1000eeb0 = load i32, i32* %v1_1000eeb0, align 4
  store i32 %v2_1000eeb0, i32* @esi, align 4
  %v3_1000eeb0 = add i32 %v0_1000eeb0, 4
  %v1_1000eeb1 = inttoptr i32 %v3_1000eeb0 to i32*
  %v2_1000eeb1 = load i32, i32* %v1_1000eeb1, align 4
  store i32 %v2_1000eeb1, i32* @ebx, align 4
  %v0_1000eeb2 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000eeb2
}

define i32 @function_1000eec0() local_unnamed_addr {
dec_label_pc_1000eec0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_1000eec0 = load i32, i32* @esi, align 4
  %v0_1000eec1 = load i32, i32* @edi, align 4
  %v0_1000eec2 = load i32, i32* @ecx, align 4
  store i32 %v0_1000eec2, i32* @esi, align 4
  %v2_1000eec4 = call i32 @function_1000e6f0(i32 %v0_1000eec1, i32 %v0_1000eec0)
  store i32 65535, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_1000eed0 = load i32, i32* @esi, align 4
  %v3_1000eed0 = add i32 %v2_1000eed0, 20
  %v4_1000eed0 = inttoptr i32 %v3_1000eed0 to i16*
  store i16 -1, i16* %v4_1000eed0, align 2
  %v0_1000eed4 = load i32, i32* @esi, align 4
  %v1_1000eed4 = add i32 %v0_1000eed4, 12
  %v2_1000eed4 = inttoptr i32 %v1_1000eed4 to i32*
  %v3_1000eed4 = load i32, i32* %v2_1000eed4, align 4
  %v4_1000eed4 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000eed7 = icmp slt i32 %v3_1000eed4, %v4_1000eed4
  br i1 %v5_1000eed7, label %dec_label_pc_1000eef6, label %dec_label_pc_1000eed9

dec_label_pc_1000eed9:                            ; preds = %dec_label_pc_1000eec0
  %v1_1000eed9 = add i32 %v0_1000eed4, 4
  %v2_1000eed9 = inttoptr i32 %v1_1000eed9 to i32*
  %v3_1000eed9 = load i32, i32* %v2_1000eed9, align 4
  store i32 %v3_1000eed9, i32* %eax.global-to-local, align 4
  %v12_1000eedc = icmp eq i32 %v3_1000eed9, %v4_1000eed4
  br i1 %v12_1000eedc, label %dec_label_pc_1000eef3, label %dec_label_pc_1000eee0

dec_label_pc_1000eee0:                            ; preds = %dec_label_pc_1000eed9
  %v0_1000eee0 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000eee0, i32* @ecx, align 4
  %v1_1000eee6 = inttoptr i32 %v0_1000eee0 to i32*
  %v2_1000eee6 = load i32, i32* %v1_1000eee6, align 4
  store i32 %v2_1000eee6, i32* @ecx, align 4
  %v1_1000eee8 = inttoptr i32 %v2_1000eee6 to i32*
  %v2_1000eee8 = load i32, i32* %v1_1000eee8, align 4
  store i32 %v2_1000eee8, i32* %edx.global-to-local, align 4
  %v1_1000eeeb = add i32 %v2_1000eee8, 20
  %v2_1000eeeb = inttoptr i32 %v1_1000eeeb to i32*
  %v3_1000eeeb = load i32, i32* %v2_1000eeeb, align 4
  store i32 %v3_1000eeeb, i32* %eax.global-to-local, align 4
  store i32 %v4_1000eed4, i32* %v2_1000eed9, align 4
  %v0_1000eef3.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000eef3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000eef3

dec_label_pc_1000eef3:                            ; preds = %dec_label_pc_1000eee0, %dec_label_pc_1000eed9
  %v1_1000eef3 = phi i32 [ %v1_1000eef3.pre, %dec_label_pc_1000eee0 ], [ %v0_1000eed4, %dec_label_pc_1000eed9 ]
  %v0_1000eef3 = phi i32 [ %v0_1000eef3.pre, %dec_label_pc_1000eee0 ], [ %v4_1000eed4, %dec_label_pc_1000eed9 ]
  %v2_1000eef3 = add i32 %v1_1000eef3, 8
  %v3_1000eef3 = inttoptr i32 %v2_1000eef3 to i32*
  store i32 %v0_1000eef3, i32* %v3_1000eef3, align 4
  %v2_1000eefb.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000eef6

dec_label_pc_1000eef6:                            ; preds = %dec_label_pc_1000eef3, %dec_label_pc_1000eec0
  %v2_1000eefb = phi i32 [ %v2_1000eefb.pre, %dec_label_pc_1000eef3 ], [ %v0_1000eed4, %dec_label_pc_1000eec0 ]
  store i32 65535, i32* @ecx, align 4
  %v3_1000eefb = add i32 %v2_1000eefb, 22
  %v4_1000eefb = inttoptr i32 %v3_1000eefb to i16*
  store i16 -1, i16* %v4_1000eefb, align 2
  %v0_1000eeff = load i32, i32* @esi, align 4
  %v1_1000eeff = add i32 %v0_1000eeff, 12
  %v2_1000eeff = inttoptr i32 %v1_1000eeff to i32*
  %v3_1000eeff = load i32, i32* %v2_1000eeff, align 4
  %v4_1000eeff = load i32, i32* %edi.global-to-local, align 4
  %v5_1000ef02 = icmp slt i32 %v3_1000eeff, %v4_1000eeff
  br i1 %v5_1000ef02, label %dec_label_pc_1000ef21, label %dec_label_pc_1000ef04

dec_label_pc_1000ef04:                            ; preds = %dec_label_pc_1000eef6
  %v1_1000ef04 = add i32 %v0_1000eeff, 4
  %v2_1000ef04 = inttoptr i32 %v1_1000ef04 to i32*
  %v3_1000ef04 = load i32, i32* %v2_1000ef04, align 4
  store i32 %v3_1000ef04, i32* %eax.global-to-local, align 4
  %v12_1000ef07 = icmp eq i32 %v3_1000ef04, %v4_1000eeff
  br i1 %v12_1000ef07, label %dec_label_pc_1000ef1e, label %dec_label_pc_1000ef0b

dec_label_pc_1000ef0b:                            ; preds = %dec_label_pc_1000ef04
  %v0_1000ef0b = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000ef0b, i32* %edx.global-to-local, align 4
  %v1_1000ef11 = inttoptr i32 %v0_1000ef0b to i32*
  %v2_1000ef11 = load i32, i32* %v1_1000ef11, align 4
  store i32 %v2_1000ef11, i32* @ecx, align 4
  %v1_1000ef13 = inttoptr i32 %v2_1000ef11 to i32*
  %v2_1000ef13 = load i32, i32* %v1_1000ef13, align 4
  store i32 %v2_1000ef13, i32* %edx.global-to-local, align 4
  %v1_1000ef15 = load i32, i32* @esp, align 4
  %v2_1000ef15 = add i32 %v1_1000ef15, -4
  %v3_1000ef15 = inttoptr i32 %v2_1000ef15 to i32*
  store i32 %v3_1000ef04, i32* %v3_1000ef15, align 4
  %v0_1000ef16 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000ef16 = add i32 %v0_1000ef16, 20
  %v2_1000ef16 = inttoptr i32 %v1_1000ef16 to i32*
  %v3_1000ef16 = load i32, i32* %v2_1000ef16, align 4
  store i32 %v3_1000ef16, i32* %eax.global-to-local, align 4
  %v0_1000ef1b = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ef1b = load i32, i32* @esi, align 4
  %v2_1000ef1b = add i32 %v1_1000ef1b, 4
  %v3_1000ef1b = inttoptr i32 %v2_1000ef1b to i32*
  store i32 %v0_1000ef1b, i32* %v3_1000ef1b, align 4
  %v0_1000ef1e.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_1000ef1e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000ef1e

dec_label_pc_1000ef1e:                            ; preds = %dec_label_pc_1000ef0b, %dec_label_pc_1000ef04
  %v1_1000ef1e = phi i32 [ %v1_1000ef1e.pre, %dec_label_pc_1000ef0b ], [ %v0_1000eeff, %dec_label_pc_1000ef04 ]
  %v0_1000ef1e = phi i32 [ %v0_1000ef1e.pre, %dec_label_pc_1000ef0b ], [ %v4_1000eeff, %dec_label_pc_1000ef04 ]
  %v2_1000ef1e = add i32 %v1_1000ef1e, 8
  %v3_1000ef1e = inttoptr i32 %v2_1000ef1e to i32*
  store i32 %v0_1000ef1e, i32* %v3_1000ef1e, align 4
  br label %dec_label_pc_1000ef21

dec_label_pc_1000ef21:                            ; preds = %dec_label_pc_1000ef1e, %dec_label_pc_1000eef6
  %v0_1000ef21 = load i32, i32* @esp, align 4
  %v1_1000ef21 = inttoptr i32 %v0_1000ef21 to i32*
  %v2_1000ef21 = load i32, i32* %v1_1000ef21, align 4
  store i32 %v2_1000ef21, i32* @edi, align 4
  %v3_1000ef21 = add i32 %v0_1000ef21, 4
  %v1_1000ef22 = inttoptr i32 %v3_1000ef21 to i32*
  %v2_1000ef22 = load i32, i32* %v1_1000ef22, align 4
  store i32 %v2_1000ef22, i32* @esi, align 4
  %v0_1000ef23 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000ef23
}

define i32 @function_1000ef30() local_unnamed_addr {
dec_label_pc_1000ef30:
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ef30 = load i32, i32* @esi, align 4
  store i32 %v0_1000ef30, i32* %stack_var_-4, align 4
  %v0_1000ef31 = load i32, i32* @ecx, align 4
  store i32 %v0_1000ef31, i32* @esi, align 4
  %v1_1000ef33 = call i32 @function_1000ee40(i32 %v0_1000ef30)
  %v0_1000ef38 = load i32, i32* @esi, align 4
  %v1_1000ef38 = add i32 %v0_1000ef38, 36
  store i32 %v1_1000ef38, i32* @ecx, align 4
  %v0_1000ef3b = call i32 @function_1000da70()
  %v0_1000ef40 = load i32, i32* @esi, align 4
  store i32 %v0_1000ef40, i32* @ecx, align 4
  %v2_1000ef42 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000ef42, i32* @esi, align 4
  %v0_1000ef43 = call i32 @function_1000eec0()
  ret i32 %v0_1000ef43
}

define i32 @function_1000ef50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000ef50:
  %stack_var_-8 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000ef50 = load i32, i32* @ebp, align 4
  store i32 %v0_1000ef50, i32* %stack_var_-4, align 4
  %v4_1000ef50 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000ef50, i32* @ebp, align 4
  %v0_1000ef56 = load i32, i32* @ebx, align 4
  %v0_1000ef5a = load i32, i32* @esi, align 4
  %v0_1000ef5b = load i32, i32* @edi, align 4
  %v0_1000ef5c = load i32, i32* @ecx, align 4
  store i32 %v0_1000ef5c, i32* @esi, align 4
  store i32 65535, i32* %stack_var_-12, align 4
  store i8 0, i8* %stack_var_-8, align 1
  %v4_1000ef74 = bitcast i8* %stack_var_-8 to i32*
  %v13_1000ef74 = call i32 @function_1000e2c0(i32 %arg1, i32* nonnull %stack_var_-12, i32* %v4_1000ef74, i32 %v0_1000ef5b, i32 %v0_1000ef5a, i32 %v0_1000ef56, i32 65535, i8 0, i32 %v0_1000ef50)
  %v0_1000ef79 = load i32, i32* @esi, align 4
  store i32 %v0_1000ef79, i32* @ecx, align 4
  %v0_1000ef7b = call i32 @function_1000df70()
  %v3_1000ef80 = load i8, i8* %stack_var_-8, align 1
  %v4_1000ef80 = sext i8 %v3_1000ef80 to i32
  %v1_1000ef83 = and i32 %v0_1000ef7b, 65535
  store i32 %v1_1000ef83, i32* @edi, align 4
  %v3_1000ef86 = load i32, i32* %stack_var_-12, align 4
  %v0_1000ef8c = load i32, i32* @esi, align 4
  store i32 %v0_1000ef8c, i32* @ecx, align 4
  %v3_1000ef8e = call i32 @function_1000edc0(i32 %v1_1000ef83, i32 %v3_1000ef86, i32 %v4_1000ef80)
  %v0_1000ef93 = load i32, i32* @esi, align 4
  %v1_1000ef93 = add i32 %v0_1000ef93, 4
  %v2_1000ef93 = inttoptr i32 %v1_1000ef93 to i32*
  %v3_1000ef93 = load i32, i32* %v2_1000ef93, align 4
  store i32 %v3_1000ef93, i32* @edx, align 4
  %v1_1000ef96 = add i32 %v0_1000ef93, 18
  %v2_1000ef96 = inttoptr i32 %v1_1000ef96 to i16*
  %v3_1000ef96 = load i16, i16* %v2_1000ef96, align 2
  %v4_1000ef96 = add i16 %v3_1000ef96, 1
  store i16 %v4_1000ef96, i16* %v2_1000ef96, align 2
  %v0_1000ef9a = load i32, i32* @edi, align 4
  %v3_1000ef9c = mul i32 %v0_1000ef9a, 3
  store i32 %v3_1000ef9c, i32* @ecx, align 4
  %v0_1000ef9f = load i32, i32* @edx, align 4
  %v2_1000ef9f = mul i32 %v0_1000ef9a, 12
  %v3_1000ef9f = add i32 %v2_1000ef9f, 8
  %v4_1000ef9f = add i32 %v3_1000ef9f, %v0_1000ef9f
  %v1_1000efa3 = icmp eq i32 %v4_1000ef9f, 0
  br i1 %v1_1000efa3, label %dec_label_pc_1000efab, label %dec_label_pc_1000efa7

dec_label_pc_1000efa7:                            ; preds = %dec_label_pc_1000ef50
  %v0_1000efa7 = load i32, i32* @ebx, align 4
  %v1_1000efa7 = inttoptr i32 %v0_1000efa7 to i32*
  %v2_1000efa7 = load i32, i32* %v1_1000efa7, align 4
  store i32 %v2_1000efa7, i32* @ecx, align 4
  %v2_1000efa9 = inttoptr i32 %v4_1000ef9f to i32*
  store i32 %v2_1000efa7, i32* %v2_1000efa9, align 4
  %v0_1000efab.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000efab

dec_label_pc_1000efab:                            ; preds = %dec_label_pc_1000efa7, %dec_label_pc_1000ef50
  %v0_1000efab = phi i32 [ %v0_1000efab.pre, %dec_label_pc_1000efa7 ], [ %v0_1000ef9a, %dec_label_pc_1000ef50 ]
  %v1_1000efab = and i32 %v0_1000efab, 65535
  %v3_1000efab = and i32 %v4_1000ef9f, -65536
  %v4_1000efab = or i32 %v1_1000efab, %v3_1000efab
  %v2_1000efb3 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000efb3, i32* @ebp, align 4
  ret i32 %v4_1000efab
}

define i32 @function_1000efc0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000efc0:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v0_1000efc7 = load i32, i32* @ecx, align 4
  store i32 %v0_1000efc7, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_1000efcf = add i32 %v0_1000efc7, 4
  %v3_1000efcf = inttoptr i32 %v2_1000efcf to i32*
  store i32 0, i32* %v3_1000efcf, align 4
  %v0_1000efd2 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000efd2 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000efd2 = add i32 %v1_1000efd2, 8
  %v3_1000efd2 = inttoptr i32 %v2_1000efd2 to i32*
  store i32 %v0_1000efd2, i32* %v3_1000efd2, align 4
  %v0_1000efd5 = load i32, i32* @ecx, align 4
  %v1_1000efd5 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000efd5 = add i32 %v1_1000efd5, 12
  %v3_1000efd5 = inttoptr i32 %v2_1000efd5 to i32*
  store i32 %v0_1000efd5, i32* %v3_1000efd5, align 4
  %v0_1000efd8 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000efd8 = load i32, i32* %edi.global-to-local, align 4
  %v12_1000efd8 = icmp eq i32 %v0_1000efd8, %v1_1000efd8
  br i1 %v12_1000efd8, label %dec_label_pc_1000eff6, label %dec_label_pc_1000efdc

dec_label_pc_1000efdc:                            ; preds = %dec_label_pc_1000efc0
  %v0_1000efdc = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000efdc, i32* %edx.global-to-local, align 4
  %v1_1000efe2 = inttoptr i32 %v0_1000efdc to i32*
  %v2_1000efe2 = load i32, i32* %v1_1000efe2, align 4
  store i32 %v2_1000efe2, i32* @ecx, align 4
  %v1_1000efe4 = inttoptr i32 %v2_1000efe2 to i32*
  %v2_1000efe4 = load i32, i32* %v1_1000efe4, align 4
  store i32 %v2_1000efe4, i32* %edx.global-to-local, align 4
  %v2_1000efeb = mul i32 %v0_1000efd8, 12
  store i32 %v2_1000efeb, i32* %eax.global-to-local, align 4
  %v1_1000efee = add i32 %v2_1000efe4, 4
  %v2_1000efee = inttoptr i32 %v1_1000efee to i32*
  %v3_1000efee = load i32, i32* %v2_1000efee, align 4
  store i32 %v3_1000efee, i32* %eax.global-to-local, align 4
  %v1_1000eff3 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000eff3 = add i32 %v1_1000eff3, 4
  %v3_1000eff3 = inttoptr i32 %v2_1000eff3 to i32*
  store i32 %v3_1000efee, i32* %v3_1000eff3, align 4
  %v6_1000eff9.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000eff6

dec_label_pc_1000eff6:                            ; preds = %dec_label_pc_1000efdc, %dec_label_pc_1000efc0
  %v6_1000eff9 = phi i32 [ %v6_1000eff9.pre, %dec_label_pc_1000efdc ], [ %v0_1000efd8, %dec_label_pc_1000efc0 ]
  %v0_1000eff6 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000eff6 = add i32 %v0_1000eff6, 4
  %v2_1000eff6 = inttoptr i32 %v1_1000eff6 to i32*
  %v3_1000eff6 = load i32, i32* %v2_1000eff6, align 4
  store i32 %v3_1000eff6, i32* %edx.global-to-local, align 4
  %v5_1000eff9 = and i32 %arg3, 255
  %v7_1000eff9 = and i32 %v6_1000eff9, -256
  %v8_1000eff9 = or i32 %v7_1000eff9, %v5_1000eff9
  store i32 %v8_1000eff9, i32* %eax.global-to-local, align 4
  %v1_1000effc = trunc i32 %arg3 to i8
  %v3_1000effc = add i32 %v0_1000eff6, 28
  %v4_1000effc = inttoptr i32 %v3_1000effc to i8*
  store i8 %v1_1000effc, i8* %v4_1000effc, align 1
  %v0_1000efff = load i32, i32* %esi.global-to-local, align 4
  %v1_1000efff = add i32 %v0_1000efff, 16
  %v2_1000efff = inttoptr i32 %v1_1000efff to i32*
  store i32 65535, i32* %v2_1000efff, align 4
  %v0_1000f006 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f006 = add i32 %v0_1000f006, 20
  %v2_1000f006 = inttoptr i32 %v1_1000f006 to i32*
  store i32 -1, i32* %v2_1000f006, align 4
  %v0_1000f00d = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f00d = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f00d = add i32 %v1_1000f00d, 24
  %v3_1000f00d = inttoptr i32 %v2_1000f00d to i32*
  store i32 %v0_1000f00d, i32* %v3_1000f00d, align 4
  %v0_1000f010 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f010 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f010 = add i32 %v1_1000f010, 36
  %v3_1000f010 = inttoptr i32 %v2_1000f010 to i32*
  store i32 %v0_1000f010, i32* %v3_1000f010, align 4
  %v0_1000f013 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f013 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f013 = add i32 %v1_1000f013, 40
  %v3_1000f013 = inttoptr i32 %v2_1000f013 to i32*
  store i32 %v0_1000f013, i32* %v3_1000f013, align 4
  %v0_1000f016 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f016 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f016 = add i32 %v1_1000f016, 48
  %v3_1000f016 = inttoptr i32 %v2_1000f016 to i32*
  store i32 %v0_1000f016, i32* %v3_1000f016, align 4
  %v0_1000f019 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f019 = load i32, i32* %esi.global-to-local, align 4
  %v2_1000f019 = add i32 %v1_1000f019, 52
  %v3_1000f019 = inttoptr i32 %v2_1000f019 to i32*
  store i32 %v0_1000f019, i32* %v3_1000f019, align 4
  %v0_1000f01c = load i32, i32* @esp, align 4
  %v1_1000f01c = inttoptr i32 %v0_1000f01c to i32*
  %v2_1000f01c = load i32, i32* %v1_1000f01c, align 4
  store i32 %v2_1000f01c, i32* @edi, align 4
  %v0_1000f01d = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f01d = add i32 %v0_1000f01d, 44
  %v2_1000f01d = inttoptr i32 %v1_1000f01d to i32*
  store i32 8, i32* %v2_1000f01d, align 4
  %v0_1000f024 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000f024, i32* %eax.global-to-local, align 4
  %v0_1000f026 = load i32, i32* @esp, align 4
  %v1_1000f026 = inttoptr i32 %v0_1000f026 to i32*
  %v2_1000f026 = load i32, i32* %v1_1000f026, align 4
  store i32 %v2_1000f026, i32* @esi, align 4
  %v3_1000f026 = add i32 %v0_1000f026, 4
  %v1_1000f027 = inttoptr i32 %v3_1000f026 to i32*
  %v2_1000f027 = load i32, i32* %v1_1000f027, align 4
  store i32 %v2_1000f027, i32* @ebp, align 4
  ret i32 %v0_1000f024
}

define i32 @function_1000f030(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000f030:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_8, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_1000f036 = load i32, i32* @ebx, align 4
  %v0_1000f037 = load i32, i32* @esi, align 4
  store i32 %v0_1000f037, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @esi, align 4
  %v0_1000f03b = load i32, i32* @ecx, align 4
  store i32 %v0_1000f03b, i32* @ebx, align 4
  %v1_1000f03d = icmp eq i32 %arg2, 0
  %v1_1000f03f = icmp eq i1 %v1_1000f03d, false
  br i1 %v1_1000f03f, label %dec_label_pc_1000f054, label %dec_label_pc_1000f041

dec_label_pc_1000f041:                            ; preds = %dec_label_pc_1000f030
  %v4_1000f041 = sext i8 %arg1 to i32
  store i32 %v4_1000f041, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @ecx, align 4
  store i32 %v0_1000f037, i32* @esi, align 4
  %v3_1000f04a = inttoptr i32 %v4_1000f041 to i16*
  store i16 -1, i16* %v3_1000f04a, align 2
  store i32 %v0_1000f036, i32* @ebx, align 4
  %v0_1000f051 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000f051

dec_label_pc_1000f054:                            ; preds = %dec_label_pc_1000f030
  %v1_1000f054 = add i32 %v0_1000f03b, 28
  %v2_1000f054 = inttoptr i32 %v1_1000f054 to i8*
  %v3_1000f054 = load i8, i8* %v2_1000f054, align 1
  %v10_1000f054 = icmp eq i8 %v3_1000f054, 0
  %v2_1000f058 = add i32 %v0_1000f03b, 32
  %v3_1000f058 = inttoptr i32 %v2_1000f058 to i32*
  store i32 %arg2, i32* %v3_1000f058, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v0_1000f066 = load i32, i32* %stack_var_-24, align 4
  br i1 %v10_1000f054, label %dec_label_pc_1000f066, label %dec_label_pc_1000f05f

dec_label_pc_1000f05f:                            ; preds = %dec_label_pc_1000f054
  %v1_1000f05f = call i32 @function_1000f240(i32 %v0_1000f066)
  br label %dec_label_pc_1000f06b

dec_label_pc_1000f066:                            ; preds = %dec_label_pc_1000f054
  %v1_1000f066 = call i32 @function_1000f200(i32 %v0_1000f066)
  br label %dec_label_pc_1000f06b

dec_label_pc_1000f06b:                            ; preds = %dec_label_pc_1000f066, %dec_label_pc_1000f05f
  %storemerge3 = phi i32 [ %v1_1000f066, %dec_label_pc_1000f066 ], [ %v1_1000f05f, %dec_label_pc_1000f05f ]
  %v2_1000f06b = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_1000f06b, i32* %stack_var_-28, align 4
  %v1_1000f06f = trunc i32 %storemerge3 to i16
  %v2_1000f06f = load i32, i32* @ebx, align 4
  %v3_1000f06f = add i32 %v2_1000f06f, 30
  %v4_1000f06f = inttoptr i32 %v3_1000f06f to i16*
  store i16 %v1_1000f06f, i16* %v4_1000f06f, align 2
  %v0_1000f073 = load i32, i32* @ebx, align 4
  store i32 %v0_1000f073, i32* @ecx, align 4
  store i32 65535, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-8, align 4
  %v0_1000f081 = load i32, i32* %stack_var_-28, align 4
  %v1_1000f081 = inttoptr i32 %v0_1000f081 to i32*
  %v2_1000f081 = call i32 @function_1000e5f0(i32* %v1_1000f081)
  store i32 %v2_1000f081, i32* %eax.global-to-local, align 4
  store i32 65535, i32* @edx, align 4
  %v1_1000f08b = trunc i32 %v2_1000f081 to i16
  %v14_1000f08b = icmp eq i16 %v1_1000f08b, -1
  %v1_1000f08e = icmp eq i1 %v14_1000f08b, false
  br i1 %v1_1000f08e, label %dec_label_pc_1000f06b.dec_label_pc_1000f1e5_crit_edge, label %dec_label_pc_1000f094

dec_label_pc_1000f06b.dec_label_pc_1000f1e5_crit_edge: ; preds = %dec_label_pc_1000f06b
  %v0_1000f1e8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_1000f1e5

dec_label_pc_1000f094:                            ; preds = %dec_label_pc_1000f06b
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v1_1000f096 = add i32 %arg2, 1
  store i32 %v1_1000f096, i32* %edx.global-to-local, align 4
  %v4_1000f0a0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000f0a0

dec_label_pc_1000f0a0:                            ; preds = %dec_label_pc_1000f0a0, %dec_label_pc_1000f094
  %v4_1000f0a0 = phi i32 [ %v6_1000f0a0, %dec_label_pc_1000f0a0 ], [ %v4_1000f0a0.pre, %dec_label_pc_1000f094 ]
  %v0_1000f0a2 = phi i32 [ %v1_1000f0a2, %dec_label_pc_1000f0a0 ], [ %arg2, %dec_label_pc_1000f094 ]
  %v1_1000f0a0 = inttoptr i32 %v0_1000f0a2 to i8*
  %v2_1000f0a0 = load i8, i8* %v1_1000f0a0, align 1
  %v3_1000f0a0 = zext i8 %v2_1000f0a0 to i32
  %v5_1000f0a0 = and i32 %v4_1000f0a0, -256
  %v6_1000f0a0 = or i32 %v3_1000f0a0, %v5_1000f0a0
  store i32 %v6_1000f0a0, i32* @ecx, align 4
  %v1_1000f0a2 = add i32 %v0_1000f0a2, 1
  store i32 %v1_1000f0a2, i32* %eax.global-to-local, align 4
  %v5_1000f0a3 = icmp eq i8 %v2_1000f0a0, 0
  %v1_1000f0a5 = icmp eq i1 %v5_1000f0a3, false
  br i1 %v1_1000f0a5, label %dec_label_pc_1000f0a0, label %dec_label_pc_1000f0a7

dec_label_pc_1000f0a7:                            ; preds = %dec_label_pc_1000f0a0
  %v2_1000f0a7 = sub i32 %v1_1000f0a2, %v1_1000f096
  %v1_1000f0aa = add i32 %v2_1000f0a7, 1
  %v1_1000f0b0 = add i32 %v2_1000f0a7, 4
  %v1_1000f0b3 = and i32 %v1_1000f0b0, -2
  store i32 %v1_1000f0b3, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_1000f0bb = load i32, i32* @ebx, align 4
  %v1_1000f0bb = add i32 %v0_1000f0bb, 48
  %v2_1000f0bb = inttoptr i32 %v1_1000f0bb to i32*
  %v3_1000f0bb = load i32, i32* %v2_1000f0bb, align 4
  %v7_1000f0be = icmp sgt i32 %v3_1000f0bb, 0
  br i1 %v7_1000f0be, label %dec_label_pc_1000f0c0, label %dec_label_pc_1000f0f6

dec_label_pc_1000f0c0:                            ; preds = %dec_label_pc_1000f0a7
  %v1_1000f0c0 = add i32 %v0_1000f0bb, 36
  %v2_1000f0c0 = inttoptr i32 %v1_1000f0c0 to i32*
  %v3_1000f0c0 = load i32, i32* %v2_1000f0c0, align 4
  store i32 %v3_1000f0c0, i32* @ecx, align 4
  store i32 %v1_1000f0c0, i32* @esi, align 4
  store i32 %v3_1000f0c0, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1000f0d0

dec_label_pc_1000f0d0:                            ; preds = %dec_label_pc_1000f0de, %dec_label_pc_1000f0c0
  %v0_1000f0e2 = phi i32 [ %v1_1000f0e2, %dec_label_pc_1000f0de ], [ 0, %dec_label_pc_1000f0c0 ]
  %v3_1000f0de = phi i32 [ %v4_1000f0de, %dec_label_pc_1000f0de ], [ %v3_1000f0c0, %dec_label_pc_1000f0c0 ]
  store i32 %v3_1000f0de, i32* %edx.global-to-local, align 4
  %v1_1000f0d3 = inttoptr i32 %v3_1000f0de to i32*
  %v2_1000f0d3 = load i32, i32* %v1_1000f0d3, align 4
  store i32 %v2_1000f0d3, i32* @ecx, align 4
  %v1_1000f0d5 = inttoptr i32 %v2_1000f0d3 to i32*
  %v2_1000f0d5 = load i32, i32* %v1_1000f0d5, align 4
  store i32 %v2_1000f0d5, i32* %edx.global-to-local, align 4
  %v2_1000f0d7 = add i32 %v2_1000f0d3, 4
  %v3_1000f0d7 = inttoptr i32 %v2_1000f0d7 to i32*
  %v4_1000f0d7 = load i32, i32* %v3_1000f0d7, align 4
  %v5_1000f0d7 = sub i32 %v2_1000f0d5, %v4_1000f0d7
  store i32 %v5_1000f0d7, i32* %edx.global-to-local, align 4
  %v5_1000f0dc = icmp slt i32 %v5_1000f0d7, %v1_1000f0b3
  br i1 %v5_1000f0dc, label %dec_label_pc_1000f0de, label %dec_label_pc_1000f0ea

dec_label_pc_1000f0de:                            ; preds = %dec_label_pc_1000f0d0
  %v4_1000f0de = add i32 %v3_1000f0de, 4
  store i32 %v4_1000f0de, i32* %stack_var_-8, align 4
  %v1_1000f0e2 = add i32 %v0_1000f0e2, 1
  store i32 %v1_1000f0e2, i32* %eax.global-to-local, align 4
  %v4_1000f0e3 = load i32, i32* %v2_1000f0bb, align 4
  %v5_1000f0e6 = icmp slt i32 %v1_1000f0e2, %v4_1000f0e3
  br i1 %v5_1000f0e6, label %dec_label_pc_1000f0d0, label %dec_label_pc_1000f0f6.loopexit

dec_label_pc_1000f0ea:                            ; preds = %dec_label_pc_1000f0d0
  store i32 %v0_1000f0e2, i32* %stack_var_-8, align 4
  %v10_1000f0ed = icmp eq i32 %v0_1000f0e2, -1
  %v1_1000f0f0 = icmp eq i1 %v10_1000f0ed, false
  br i1 %v1_1000f0f0, label %dec_label_pc_1000f181, label %dec_label_pc_1000f0f6

dec_label_pc_1000f0f6.loopexit:                   ; preds = %dec_label_pc_1000f0de
  br label %dec_label_pc_1000f0f6

dec_label_pc_1000f0f6:                            ; preds = %dec_label_pc_1000f0f6.loopexit, %dec_label_pc_1000f0a7, %dec_label_pc_1000f0ea
  %v1_1000f0f6 = add i32 %v1_1000f0b3, 12
  %tmp56 = icmp ult i32 %v1_1000f0f6, 2049
  br i1 %tmp56, label %dec_label_pc_1000f101, label %dec_label_pc_1000f106

dec_label_pc_1000f101:                            ; preds = %dec_label_pc_1000f0f6
  br label %dec_label_pc_1000f106

dec_label_pc_1000f106:                            ; preds = %dec_label_pc_1000f0f6, %dec_label_pc_1000f101
  %v0_1000f112 = phi i32 [ %v1_1000f0f6, %dec_label_pc_1000f0f6 ], [ 2048, %dec_label_pc_1000f101 ]
  %v0_1000f106 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_1000f106, i32* %eax.global-to-local, align 4
  %v1_1000f10b = inttoptr i32 %v0_1000f106 to i32*
  %v2_1000f10b = load i32, i32* %v1_1000f10b, align 4
  store i32 %v2_1000f10b, i32* @ecx, align 4
  %v1_1000f10d = inttoptr i32 %v2_1000f10b to i32*
  %v2_1000f10d = load i32, i32* %v1_1000f10d, align 4
  store i32 %v2_1000f10d, i32* %edx.global-to-local, align 4
  %v1_1000f10f = add i32 %v2_1000f10d, 4
  %v2_1000f10f = inttoptr i32 %v1_1000f10f to i32*
  %v3_1000f10f = load i32, i32* %v2_1000f10f, align 4
  store i32 %v3_1000f10f, i32* %eax.global-to-local, align 4
  store i32 %v3_1000f10f, i32* @ecx, align 4
  %v1_1000f117 = add i32 %v0_1000f112, -12
  %v2_1000f11a = inttoptr i32 %v3_1000f10f to i32*
  store i32 %v1_1000f117, i32* %v2_1000f11a, align 4
  %v0_1000f11c = load i32, i32* @ebx, align 4
  %v1_1000f11c = add i32 %v0_1000f11c, 36
  store i32 %v1_1000f11c, i32* @esi, align 4
  %v0_1000f11f = load i32, i32* @ecx, align 4
  %v1_1000f11f = add i32 %v0_1000f11f, 4
  %v2_1000f11f = inttoptr i32 %v1_1000f11f to i32*
  store i32 0, i32* %v2_1000f11f, align 4
  %v0_1000f126 = load i32, i32* @esi, align 4
  %v1_1000f126 = add i32 %v0_1000f126, 12
  %v2_1000f126 = inttoptr i32 %v1_1000f126 to i32*
  %v3_1000f126 = load i32, i32* %v2_1000f126, align 4
  store i32 %v3_1000f126, i32* @edi, align 4
  %v1_1000f129 = add i32 %v0_1000f126, 4
  %v2_1000f129 = inttoptr i32 %v1_1000f129 to i32*
  %v3_1000f129 = load i32, i32* %v2_1000f129, align 4
  store i32 %v3_1000f129, i32* @eax, align 4
  %v1_1000f12c = add i32 %v3_1000f126, 1
  store i32 %v1_1000f12c, i32* %edx.global-to-local, align 4
  %v0_1000f12f = load i32, i32* @ecx, align 4
  store i32 %v0_1000f12f, i32* %stack_var_-8, align 4
  %v7_1000f134 = icmp sgt i32 %v1_1000f12c, %v3_1000f129
  br i1 %v7_1000f134, label %dec_label_pc_1000f136, label %dec_label_pc_1000f146

dec_label_pc_1000f136:                            ; preds = %dec_label_pc_1000f106
  %v2_1000f138 = sub i32 %v3_1000f126, %v3_1000f129
  %v1_1000f13a = add i32 %v2_1000f138, 1
  store i32 %v0_1000f126, i32* @ecx, align 4
  %v1_1000f13e = call i32 @function_1000d920(i32 %v1_1000f13a)
  store i32 %v1_1000f13e, i32* %eax.global-to-local, align 4
  %v3_1000f143 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1000f143, i32* @ecx, align 4
  %v0_1000f146.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000f146

dec_label_pc_1000f146:                            ; preds = %dec_label_pc_1000f106, %dec_label_pc_1000f136
  %v18_1000f146 = phi i32 [ %v0_1000f126, %dec_label_pc_1000f106 ], [ %v0_1000f146.pre, %dec_label_pc_1000f136 ]
  %v1_1000f146 = add i32 %v18_1000f146, 12
  %v2_1000f146 = inttoptr i32 %v1_1000f146 to i32*
  %v3_1000f146 = load i32, i32* %v2_1000f146, align 4
  %v4_1000f146 = add i32 %v3_1000f146, 1
  store i32 %v4_1000f146, i32* %v2_1000f146, align 4
  %v0_1000f149 = load i32, i32* @esi, align 4
  %v1_1000f149 = add i32 %v0_1000f149, 12
  %v2_1000f149 = inttoptr i32 %v1_1000f149 to i32*
  %v3_1000f149 = load i32, i32* %v2_1000f149, align 4
  store i32 %v3_1000f149, i32* %eax.global-to-local, align 4
  %v1_1000f14c = inttoptr i32 %v0_1000f149 to i32*
  %v2_1000f14c = load i32, i32* %v1_1000f14c, align 4
  store i32 %v2_1000f14c, i32* %edx.global-to-local, align 4
  %v1_1000f14e = load i32, i32* @edi, align 4
  %v2_1000f14e = sub i32 %v3_1000f149, %v1_1000f14e
  %v1_1000f150 = add i32 %v2_1000f14e, -1
  store i32 %v1_1000f150, i32* %eax.global-to-local, align 4
  %v2_1000f151 = add i32 %v0_1000f149, 16
  %v3_1000f151 = inttoptr i32 %v2_1000f151 to i32*
  store i32 %v2_1000f14c, i32* %v3_1000f151, align 4
  %tmp47 = icmp slt i32 %v1_1000f150, 1
  br i1 %tmp47, label %dec_label_pc_1000f170, label %dec_label_pc_1000f158

dec_label_pc_1000f158:                            ; preds = %dec_label_pc_1000f146
  %v2_1000f15a = mul i32 %v1_1000f150, 4
  store i32 %v2_1000f15a, i32* %eax.global-to-local, align 4
  %v0_1000f15c = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f15c = load i32, i32* @edi, align 4
  %v2_1000f15c = mul i32 %v1_1000f15c, 4
  %v3_1000f15c = add i32 %v2_1000f15c, %v0_1000f15c
  store i32 %v3_1000f15c, i32* %edx.global-to-local, align 4
  %v1_1000f15f = load i32, i32* @esp, align 4
  %v2_1000f15f = add i32 %v1_1000f15f, -4
  %v3_1000f15f = inttoptr i32 %v2_1000f15f to i32*
  store i32 %v2_1000f15a, i32* %v3_1000f15f, align 4
  %v0_1000f160 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000f160 = add i32 %v1_1000f15f, -8
  %v3_1000f160 = inttoptr i32 %v2_1000f160 to i32*
  store i32 %v0_1000f160, i32* %v3_1000f160, align 4
  %v0_1000f161 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f161 = add i32 %v0_1000f161, 4
  store i32 %v1_1000f161, i32* %edx.global-to-local, align 4
  %v2_1000f164 = add i32 %v1_1000f15f, -12
  %v3_1000f164 = inttoptr i32 %v2_1000f164 to i32*
  store i32 %v1_1000f161, i32* %v3_1000f164, align 4
  %v1_1000f165 = call i32* @_memcpy(i32* nonnull @5, i32* nonnull @5, i32 ptrtoint (i32* @5 to i32))
  %v3_1000f165 = ptrtoint i32* %v1_1000f165 to i32
  store i32 %v3_1000f165, i32* %eax.global-to-local, align 4
  %v3_1000f16a = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1000f16a, i32* @ecx, align 4
  br label %dec_label_pc_1000f170

dec_label_pc_1000f170:                            ; preds = %dec_label_pc_1000f158, %dec_label_pc_1000f146
  %v0_1000f170 = load i32, i32* @esi, align 4
  %v1_1000f170 = inttoptr i32 %v0_1000f170 to i32*
  %v2_1000f170 = load i32, i32* %v1_1000f170, align 4
  store i32 %v2_1000f170, i32* %edx.global-to-local, align 4
  %v1_1000f172 = load i32, i32* @edi, align 4
  %v2_1000f172 = mul i32 %v1_1000f172, 4
  %v3_1000f172 = add i32 %v2_1000f172, %v2_1000f170
  store i32 %v3_1000f172, i32* %eax.global-to-local, align 4
  %v1_1000f175 = icmp eq i32 %v3_1000f172, 0
  br i1 %v1_1000f175, label %dec_label_pc_1000f17b, label %dec_label_pc_1000f179

dec_label_pc_1000f179:                            ; preds = %dec_label_pc_1000f170
  %v0_1000f179 = load i32, i32* @ecx, align 4
  %v2_1000f179 = inttoptr i32 %v3_1000f172 to i32*
  store i32 %v0_1000f179, i32* %v2_1000f179, align 4
  %v0_1000f17b.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_1000f17b

dec_label_pc_1000f17b:                            ; preds = %dec_label_pc_1000f179, %dec_label_pc_1000f170
  %v0_1000f17b = phi i32 [ %v0_1000f17b.pre, %dec_label_pc_1000f179 ], [ %v1_1000f172, %dec_label_pc_1000f170 ]
  store i32 %v0_1000f17b, i32* %stack_var_-8, align 4
  store i32 %v1_1000f0b3, i32* @edi, align 4
  %v0_1000f181.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_1000f181

dec_label_pc_1000f181:                            ; preds = %dec_label_pc_1000f17b, %dec_label_pc_1000f0ea
  %v0_1000f191 = phi i32 [ %v0_1000f17b, %dec_label_pc_1000f17b ], [ %v0_1000f0e2, %dec_label_pc_1000f0ea ]
  %v0_1000f181 = phi i32 [ %v0_1000f181.pre, %dec_label_pc_1000f17b ], [ %v0_1000f0bb, %dec_label_pc_1000f0ea ]
  %v1_1000f181 = add i32 %v0_1000f181, 28
  %v2_1000f181 = inttoptr i32 %v1_1000f181 to i8*
  %v3_1000f181 = load i8, i8* %v2_1000f181, align 1
  %v10_1000f181 = icmp eq i8 %v3_1000f181, 0
  %v3_1000f185 = load i32, i32* %stack_var_8, align 4
  store i32 %v3_1000f185, i32* @ecx, align 4
  br i1 %v10_1000f181, label %dec_label_pc_1000f191, label %dec_label_pc_1000f18a

dec_label_pc_1000f18a:                            ; preds = %dec_label_pc_1000f181
  %v1_1000f18a = call i32 @function_1000f240(i32 %v0_1000f191)
  br label %dec_label_pc_1000f196

dec_label_pc_1000f191:                            ; preds = %dec_label_pc_1000f181
  %v1_1000f191 = call i32 @function_1000f200(i32 %v0_1000f191)
  br label %dec_label_pc_1000f196

dec_label_pc_1000f196:                            ; preds = %dec_label_pc_1000f191, %dec_label_pc_1000f18a
  %storemerge = phi i32 [ %v1_1000f191, %dec_label_pc_1000f191 ], [ %v1_1000f18a, %dec_label_pc_1000f18a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v3_1000f196 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1000f196, i32* %edx.global-to-local, align 4
  %v1_1000f199 = and i32 %storemerge, 65535
  store i32 %v1_1000f199, i32* @ecx, align 4
  %v0_1000f19c = load i32, i32* @esi, align 4
  %v1_1000f19c = inttoptr i32 %v0_1000f19c to i32*
  %v2_1000f19c = load i32, i32* %v1_1000f19c, align 4
  store i32 %v2_1000f19c, i32* %eax.global-to-local, align 4
  %v2_1000f19e = mul i32 %v3_1000f196, 4
  %v3_1000f19e = add i32 %v2_1000f19c, %v2_1000f19e
  %v4_1000f19e = inttoptr i32 %v3_1000f19e to i32*
  %v5_1000f19e = load i32, i32* %v4_1000f19e, align 4
  store i32 %v5_1000f19e, i32* @esi, align 4
  %v1_1000f1a1 = add i32 %v5_1000f19e, 4
  %v2_1000f1a1 = inttoptr i32 %v1_1000f1a1 to i16*
  %v3_1000f1a1 = load i16, i16* %v2_1000f1a1, align 2
  %v4_1000f1a1 = zext i16 %v3_1000f1a1 to i32
  store i32 %v4_1000f1a1, i32* %eax.global-to-local, align 4
  %v2_1000f1a5 = inttoptr i32 %v1_1000f1a1 to i32*
  %v3_1000f1a5 = load i32, i32* %v2_1000f1a5, align 4
  %v3_1000f1ab = add i32 %v5_1000f19e, 8
  %v4_1000f1ab = add i32 %v3_1000f1ab, %v3_1000f1a5
  store i32 %v4_1000f1ab, i32* %eax.global-to-local, align 4
  %v3_1000f1af = load i32, i32* %stack_var_8, align 4
  store i32 %v3_1000f1af, i32* %edx.global-to-local, align 4
  %v1_1000f1b2 = trunc i32 %storemerge to i16
  %v3_1000f1b2 = inttoptr i32 %v4_1000f1ab to i16*
  store i16 %v1_1000f1b2, i16* %v3_1000f1b2, align 2
  store i32 %v1_1000f0aa, i32* @ecx, align 4
  %v1_1000f1b8 = load i32, i32* @esp, align 4
  %v2_1000f1b8 = add i32 %v1_1000f1b8, -4
  %v3_1000f1b8 = inttoptr i32 %v2_1000f1b8 to i32*
  store i32 %v1_1000f0aa, i32* %v3_1000f1b8, align 4
  %v0_1000f1b9 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000f1b9 = add i32 %v1_1000f1b8, -8
  %v3_1000f1b9 = inttoptr i32 %v2_1000f1b9 to i32*
  store i32 %v0_1000f1b9, i32* %v3_1000f1b9, align 4
  %v0_1000f1ba = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f1ba = add i32 %v0_1000f1ba, 2
  store i32 %v1_1000f1ba, i32* %eax.global-to-local, align 4
  %v2_1000f1bd = add i32 %v1_1000f1b8, -12
  %v3_1000f1bd = inttoptr i32 %v2_1000f1bd to i32*
  store i32 %v1_1000f1ba, i32* %v3_1000f1bd, align 4
  %v0_1000f1be = call i32 @_memcpy.1()
  %v5_1000f1c3 = load i32, i32* @ecx, align 4
  %v6_1000f1c3 = and i32 %v5_1000f1c3, -65536
  %v7_1000f1c3 = or i32 %v6_1000f1c3, %v4_1000f1a1
  store i32 %v7_1000f1c3, i32* @ecx, align 4
  %v3_1000f1c7 = load i32, i32* %stack_var_-8, align 4
  %v4_1000f1c7 = and i32 %v3_1000f1c7, 65535
  %v6_1000f1c7 = and i32 %v0_1000f1be, -65536
  %v7_1000f1c7 = or i32 %v4_1000f1c7, %v6_1000f1c7
  store i32 %v7_1000f1c7, i32* %eax.global-to-local, align 4
  %v0_1000f1cb = load i32, i32* @esi, align 4
  %v1_1000f1cb = add i32 %v0_1000f1cb, 4
  %v2_1000f1cb = inttoptr i32 %v1_1000f1cb to i32*
  %v3_1000f1cb = load i32, i32* %v2_1000f1cb, align 4
  %v4_1000f1cb = load i32, i32* @edi, align 4
  %v5_1000f1cb = add i32 %v4_1000f1cb, %v3_1000f1cb
  store i32 %v5_1000f1cb, i32* %v2_1000f1cb, align 4
  %v0_1000f1ce = load i32, i32* @esp, align 4
  %v2_1000f1d1 = ptrtoint i32* %stack_var_8 to i32
  store i32 %v2_1000f1d1, i32* %edx.global-to-local, align 4
  %v0_1000f1d4 = load i32, i32* @ecx, align 4
  %v2_1000f1d8 = add i32 %v0_1000f1ce, 8
  %v3_1000f1d8 = inttoptr i32 %v2_1000f1d8 to i32*
  store i32 %v2_1000f1d1, i32* %v3_1000f1d8, align 4
  %v0_1000f1d9 = load i32, i32* @ebx, align 4
  store i32 %v0_1000f1d9, i32* @ecx, align 4
  %v0_1000f1db = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f1db, i32* %stack_var_8, align 4
  %sext = mul i32 %v0_1000f1d4, 65536
  %v2_1000f1df = sdiv i32 %sext, 65536
  %v3_1000f1df = call i32 @function_1000ef50(i32 %v0_1000f1db, i32 %v2_1000f1df)
  store i32 %v3_1000f1df, i32* %eax.global-to-local, align 4
  %v0_1000f1e4 = load i32, i32* @esp, align 4
  %v1_1000f1e4 = inttoptr i32 %v0_1000f1e4 to i32*
  %v2_1000f1e4 = load i32, i32* %v1_1000f1e4, align 4
  store i32 %v2_1000f1e4, i32* @edi, align 4
  %v3_1000f1e4 = add i32 %v0_1000f1e4, 4
  br label %dec_label_pc_1000f1e5

dec_label_pc_1000f1e5:                            ; preds = %dec_label_pc_1000f06b.dec_label_pc_1000f1e5_crit_edge, %dec_label_pc_1000f196
  %v0_1000f1e9 = phi i32 [ %v2_1000f081, %dec_label_pc_1000f06b.dec_label_pc_1000f1e5_crit_edge ], [ %v3_1000f1df, %dec_label_pc_1000f196 ]
  %v0_1000f1e8 = phi i32 [ %v0_1000f1e8.pre, %dec_label_pc_1000f06b.dec_label_pc_1000f1e5_crit_edge ], [ %v3_1000f1e4, %dec_label_pc_1000f196 ]
  %v4_1000f1e5 = sext i8 %arg1 to i32
  store i32 %v4_1000f1e5, i32* @ecx, align 4
  %v1_1000f1e8 = inttoptr i32 %v0_1000f1e8 to i32*
  %v2_1000f1e8 = load i32, i32* %v1_1000f1e8, align 4
  store i32 %v2_1000f1e8, i32* @esi, align 4
  %v1_1000f1e9 = trunc i32 %v0_1000f1e9 to i16
  %v3_1000f1e9 = inttoptr i32 %v4_1000f1e5 to i16*
  store i16 %v1_1000f1e9, i16* %v3_1000f1e9, align 2
  %v0_1000f1ec = load i32, i32* @ecx, align 4
  store i32 %v0_1000f1ec, i32* %eax.global-to-local, align 4
  %v0_1000f1ee = load i32, i32* @esp, align 4
  %v1_1000f1ee = inttoptr i32 %v0_1000f1ee to i32*
  %v2_1000f1ee = load i32, i32* %v1_1000f1ee, align 4
  store i32 %v2_1000f1ee, i32* @ebx, align 4
  ret i32 %v0_1000f1ec
}

define i32 @function_1000f200(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f200:
  %v2_1000f200 = load i8, i8* bitcast (i32* @ecx to i8*), align 4
  %v3_1000f200 = zext i8 %v2_1000f200 to i32
  store i32 %v3_1000f200, i32* @edx, align 4
  %v0_1000f203 = load i32, i32* @esi, align 4
  %v1_1000f208 = icmp eq i8 %v2_1000f200, 0
  br i1 %v1_1000f208, label %dec_label_pc_1000f234, label %dec_label_pc_1000f20c

dec_label_pc_1000f20c:                            ; preds = %dec_label_pc_1000f200
  %v0_1000f219.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000f210

dec_label_pc_1000f210:                            ; preds = %dec_label_pc_1000f224, %dec_label_pc_1000f20c
  %v0_1000f219 = phi i32 [ %v1_1000f21d, %dec_label_pc_1000f224 ], [ %v0_1000f219.pre, %dec_label_pc_1000f20c ]
  %v1_1000f210 = phi i32 [ %v4_1000f226, %dec_label_pc_1000f224 ], [ 0, %dec_label_pc_1000f20c ]
  %v0_1000f210 = phi i32 [ %v3_1000f22d, %dec_label_pc_1000f224 ], [ %v3_1000f200, %dec_label_pc_1000f20c ]
  %v2_1000f210 = xor i32 %v0_1000f210, %v1_1000f210
  %v1_1000f212 = mul i32 %v2_1000f210, 4
  %v2_1000f212 = add i32 %v1_1000f212, ptrtoint (i32* @global_var_10028788.480 to i32)
  %v3_1000f212 = inttoptr i32 %v2_1000f212 to i32*
  %v4_1000f212 = load i32, i32* %v3_1000f212, align 4
  %v1_1000f219 = add i32 %v0_1000f219, 1
  %v2_1000f219 = inttoptr i32 %v1_1000f219 to i8*
  %v3_1000f219 = load i8, i8* %v2_1000f219, align 1
  %v4_1000f219 = zext i8 %v3_1000f219 to i32
  store i32 %v4_1000f219, i32* @edx, align 4
  %v1_1000f21d = add i32 %v0_1000f219, 2
  store i32 %v1_1000f21d, i32* @ecx, align 4
  %v1_1000f220 = icmp eq i8 %v3_1000f219, 0
  br i1 %v1_1000f220, label %dec_label_pc_1000f234.loopexit, label %dec_label_pc_1000f224

dec_label_pc_1000f224:                            ; preds = %dec_label_pc_1000f210
  %v2_1000f224 = xor i32 %v4_1000f219, %v4_1000f212
  %v1_1000f226 = mul i32 %v2_1000f224, 4
  %v2_1000f226 = add i32 %v1_1000f226, ptrtoint (i32* @global_var_10028788.480 to i32)
  %v3_1000f226 = inttoptr i32 %v2_1000f226 to i32*
  %v4_1000f226 = load i32, i32* %v3_1000f226, align 4
  %v1_1000f22d = inttoptr i32 %v1_1000f21d to i8*
  %v2_1000f22d = load i8, i8* %v1_1000f22d, align 1
  %v3_1000f22d = zext i8 %v2_1000f22d to i32
  store i32 %v3_1000f22d, i32* @edx, align 4
  %v1_1000f230 = icmp eq i8 %v2_1000f22d, 0
  %v1_1000f232 = icmp eq i1 %v1_1000f230, false
  br i1 %v1_1000f232, label %dec_label_pc_1000f210, label %dec_label_pc_1000f234.loopexit

dec_label_pc_1000f234.loopexit:                   ; preds = %dec_label_pc_1000f210, %dec_label_pc_1000f224
  %v1_1000f237.ph = phi i32 [ %v4_1000f226, %dec_label_pc_1000f224 ], [ %v1_1000f210, %dec_label_pc_1000f210 ]
  %phitmp = mul i32 %v4_1000f212, 256
  br label %dec_label_pc_1000f234

dec_label_pc_1000f234:                            ; preds = %dec_label_pc_1000f234.loopexit, %dec_label_pc_1000f200
  %v1_1000f237 = phi i32 [ 0, %dec_label_pc_1000f200 ], [ %v1_1000f237.ph, %dec_label_pc_1000f234.loopexit ]
  %v0_1000f234 = phi i32 [ 0, %dec_label_pc_1000f200 ], [ %phitmp, %dec_label_pc_1000f234.loopexit ]
  %v2_1000f237 = or i32 %v0_1000f234, %v1_1000f237
  store i32 %v0_1000f203, i32* @esi, align 4
  ret i32 %v2_1000f237
}

define i32 @function_1000f240(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f240:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1000f242 = load i32, i32* @ecx, align 4
  store i32 %v0_1000f242, i32* %esi.global-to-local, align 4
  %v3_1000f244 = and i32 %v0_1000f242, 255
  %v0_1000f247 = load i32, i32* @edi, align 4
  store i32 %v0_1000f247, i32* %stack_var_-12, align 4
  %v4_1000f247 = ptrtoint i32* %stack_var_-12 to i32
  store i32 0, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_1000f24d = call i32 @_toupper(i32 %v3_1000f244)
  %v1_1000f255 = icmp eq i32 %v1_1000f24d, 0
  br i1 %v1_1000f255, label %dec_label_pc_1000f296, label %dec_label_pc_1000f259

dec_label_pc_1000f259:                            ; preds = %dec_label_pc_1000f240
  br label %dec_label_pc_1000f260

dec_label_pc_1000f260:                            ; preds = %dec_label_pc_1000f27d, %dec_label_pc_1000f259
  %v1_1000f26d = phi i32 [ %v1_1000f28f, %dec_label_pc_1000f27d ], [ %v4_1000f247, %dec_label_pc_1000f259 ]
  %v0_1000f260 = phi i32 [ %v1_1000f28a, %dec_label_pc_1000f27d ], [ %v1_1000f24d, %dec_label_pc_1000f259 ]
  %v1_1000f260 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000f260 = xor i32 %v1_1000f260, %v0_1000f260
  %v1_1000f262 = mul i32 %v2_1000f260, 4
  %v2_1000f262 = add i32 %v1_1000f262, ptrtoint (i32* @global_var_10028788.480 to i32)
  %v3_1000f262 = inttoptr i32 %v2_1000f262 to i32*
  %v4_1000f262 = load i32, i32* %v3_1000f262, align 4
  store i32 %v4_1000f262, i32* %edi.global-to-local, align 4
  %v0_1000f269 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f269 = add i32 %v0_1000f269, 1
  %v2_1000f269 = inttoptr i32 %v1_1000f269 to i8*
  %v3_1000f269 = load i8, i8* %v2_1000f269, align 1
  %v4_1000f269 = zext i8 %v3_1000f269 to i32
  %v2_1000f26d = add i32 %v1_1000f26d, -4
  %v3_1000f26d = inttoptr i32 %v2_1000f26d to i32*
  store i32 %v4_1000f269, i32* %v3_1000f26d, align 4
  %v1_1000f26e = call i32 @_toupper(i32 ptrtoint (i32* @5 to i32))
  %v0_1000f273 = load i32, i32* @esp, align 4
  %v1_1000f273 = add i32 %v0_1000f273, 4
  %v0_1000f276 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f276 = add i32 %v0_1000f276, 2
  store i32 %v1_1000f276, i32* %esi.global-to-local, align 4
  %v1_1000f279 = icmp eq i32 %v1_1000f26e, 0
  br i1 %v1_1000f279, label %dec_label_pc_1000f296, label %dec_label_pc_1000f27d

dec_label_pc_1000f27d:                            ; preds = %dec_label_pc_1000f260
  %v1_1000f27d = load i32, i32* %edi.global-to-local, align 4
  %v2_1000f27d = xor i32 %v1_1000f27d, %v1_1000f26e
  %v1_1000f27f = mul i32 %v2_1000f27d, 4
  %v2_1000f27f = add i32 %v1_1000f27f, ptrtoint (i32* @global_var_10028788.480 to i32)
  %v3_1000f27f = inttoptr i32 %v2_1000f27f to i32*
  %v4_1000f27f = load i32, i32* %v3_1000f27f, align 4
  store i32 %v4_1000f27f, i32* %ebx.global-to-local, align 4
  %v1_1000f286 = inttoptr i32 %v1_1000f276 to i8*
  %v2_1000f286 = load i8, i8* %v1_1000f286, align 1
  %v3_1000f286 = zext i8 %v2_1000f286 to i32
  %v3_1000f289 = inttoptr i32 %v0_1000f273 to i32*
  store i32 %v3_1000f286, i32* %v3_1000f289, align 4
  %v1_1000f28a = call i32 @_toupper(i32 ptrtoint (i32* @5 to i32))
  %v0_1000f28f = load i32, i32* @esp, align 4
  %v1_1000f28f = add i32 %v0_1000f28f, 4
  %v1_1000f292 = icmp eq i32 %v1_1000f28a, 0
  %v1_1000f294 = icmp eq i1 %v1_1000f292, false
  br i1 %v1_1000f294, label %dec_label_pc_1000f260, label %dec_label_pc_1000f296

dec_label_pc_1000f296:                            ; preds = %dec_label_pc_1000f27d, %dec_label_pc_1000f260, %dec_label_pc_1000f240
  %v0_1000f298 = phi i32 [ %v4_1000f247, %dec_label_pc_1000f240 ], [ %v1_1000f28f, %dec_label_pc_1000f27d ], [ %v1_1000f273, %dec_label_pc_1000f260 ]
  %v0_1000f296 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f298 = inttoptr i32 %v0_1000f298 to i32*
  %v2_1000f298 = load i32, i32* %v1_1000f298, align 4
  store i32 %v2_1000f298, i32* @edi, align 4
  %v3_1000f298 = add i32 %v0_1000f298, 4
  %v2_1000f299 = mul i32 %v0_1000f296, 256
  %v1_1000f29c = inttoptr i32 %v3_1000f298 to i32*
  %v2_1000f29c = load i32, i32* %v1_1000f29c, align 4
  store i32 %v2_1000f29c, i32* @esi, align 4
  %v3_1000f29c = add i32 %v0_1000f298, 8
  %v1_1000f29d = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000f29d = or i32 %v1_1000f29d, %v2_1000f299
  %v1_1000f29f = inttoptr i32 %v3_1000f29c to i32*
  %v2_1000f29f = load i32, i32* %v1_1000f29f, align 4
  store i32 %v2_1000f29f, i32* @ebx, align 4
  ret i32 %v2_1000f29d
}

define i32 @function_1000f2b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f2b0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1000f2b3 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000f2b3, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_1000f2b7 = inttoptr i32 %arg1 to i8*
  %v2_1000f2b7 = load i8, i8* %v1_1000f2b7, align 1
  %v12_1000f2b7 = icmp eq i8 %v2_1000f2b7, 36
  %v1_1000f2ba = icmp eq i1 %v12_1000f2b7, false
  br i1 %v1_1000f2ba, label %dec_label_pc_1000f2bd, label %dec_label_pc_1000f2bc

dec_label_pc_1000f2bc:                            ; preds = %dec_label_pc_1000f2b0
  %v1_1000f2bc = add i32 %arg1, 1
  store i32 %v1_1000f2bc, i32* @esi, align 4
  br label %dec_label_pc_1000f2bd

dec_label_pc_1000f2bd:                            ; preds = %dec_label_pc_1000f2bc, %dec_label_pc_1000f2b0
  %v0_1000f2c2 = phi i32 [ %v1_1000f2bc, %dec_label_pc_1000f2bc ], [ %arg1, %dec_label_pc_1000f2b0 ]
  %v1_1000f2c3 = inttoptr i32 %v0_1000f2c2 to i32*
  %v5_1000f2c3 = call i32 @function_100094b0(i32* %v1_1000f2c3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1002415c.481, i32 0, i32 0))
  %v1_1000f2cb = icmp eq i32 %v5_1000f2c3, 0
  %v1_1000f2cd = icmp eq i1 %v1_1000f2cb, false
  br i1 %v1_1000f2cd, label %dec_label_pc_1000f2d4, label %dec_label_pc_1000f2cf

dec_label_pc_1000f2cf:                            ; preds = %dec_label_pc_1000f2d4, %dec_label_pc_1000f2bd
  %v0_1000f2cf = phi i32 [ 0, %dec_label_pc_1000f2d4 ], [ %v5_1000f2c3, %dec_label_pc_1000f2bd ]
  %v1_1000f2cf = and i32 %v0_1000f2cf, -256
  %v2_1000f2cf = or i32 %v1_1000f2cf, 1
  %v2_1000f2d1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000f2d1, i32* %esi.global-to-local, align 4
  ret i32 %v2_1000f2cf

dec_label_pc_1000f2d4:                            ; preds = %dec_label_pc_1000f2bd
  %v0_1000f2d9 = load i32, i32* @esi, align 4
  %v1_1000f2da = inttoptr i32 %v0_1000f2d9 to i32*
  %v5_1000f2da = call i32 @function_100094b0(i32* %v1_1000f2da, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_10024154.482, i32 0, i32 0))
  %v1_1000f2e2 = icmp eq i32 %v5_1000f2da, 0
  br i1 %v1_1000f2e2, label %dec_label_pc_1000f2cf, label %dec_label_pc_1000f2e6

dec_label_pc_1000f2e6:                            ; preds = %dec_label_pc_1000f2d4
  %v0_1000f2eb = load i32, i32* @esi, align 4
  %v1_1000f2ec = inttoptr i32 %v0_1000f2eb to i32*
  %v5_1000f2ec = call i32 @function_100094b0(i32* %v1_1000f2ec, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1002414c.483, i32 0, i32 0))
  %v1_1000f2f4 = icmp eq i32 %v5_1000f2ec, 0
  %v1_1000f2f6 = icmp eq i1 %v1_1000f2f4, false
  br i1 %v1_1000f2f6, label %dec_label_pc_1000f2fd, label %dec_label_pc_1000f2f8

dec_label_pc_1000f2f8:                            ; preds = %dec_label_pc_1000f357, %dec_label_pc_1000f345, %dec_label_pc_1000f333, %dec_label_pc_1000f321, %dec_label_pc_1000f30f, %dec_label_pc_1000f2fd, %dec_label_pc_1000f2e6
  %v11_1000f2f8 = phi i32 [ 0, %dec_label_pc_1000f357 ], [ 0, %dec_label_pc_1000f345 ], [ 0, %dec_label_pc_1000f333 ], [ 0, %dec_label_pc_1000f321 ], [ 0, %dec_label_pc_1000f30f ], [ 0, %dec_label_pc_1000f2fd ], [ %v5_1000f2ec, %dec_label_pc_1000f2e6 ]
  %v12_1000f2f8 = and i32 %v11_1000f2f8, -256
  %v2_1000f2fa = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1000f2fa, i32* %esi.global-to-local, align 4
  ret i32 %v12_1000f2f8

dec_label_pc_1000f2fd:                            ; preds = %dec_label_pc_1000f2e6
  %v0_1000f302 = load i32, i32* @esi, align 4
  %v1_1000f303 = inttoptr i32 %v0_1000f302 to i32*
  %v5_1000f303 = call i32 @function_100094b0(i32* %v1_1000f303, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10024148.484, i32 0, i32 0))
  %v1_1000f30b = icmp eq i32 %v5_1000f303, 0
  br i1 %v1_1000f30b, label %dec_label_pc_1000f2f8, label %dec_label_pc_1000f30f

dec_label_pc_1000f30f:                            ; preds = %dec_label_pc_1000f2fd
  %v0_1000f314 = load i32, i32* @esi, align 4
  %v1_1000f315 = inttoptr i32 %v0_1000f314 to i32*
  %v5_1000f315 = call i32 @function_100094b0(i32* %v1_1000f315, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10024144.485, i32 0, i32 0))
  %v1_1000f31d = icmp eq i32 %v5_1000f315, 0
  br i1 %v1_1000f31d, label %dec_label_pc_1000f2f8, label %dec_label_pc_1000f321

dec_label_pc_1000f321:                            ; preds = %dec_label_pc_1000f30f
  %v0_1000f326 = load i32, i32* @esi, align 4
  %v1_1000f327 = inttoptr i32 %v0_1000f326 to i32*
  %v5_1000f327 = call i32 @function_100094b0(i32* %v1_1000f327, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1002413c.486, i32 0, i32 0))
  %v1_1000f32f = icmp eq i32 %v5_1000f327, 0
  br i1 %v1_1000f32f, label %dec_label_pc_1000f2f8, label %dec_label_pc_1000f333

dec_label_pc_1000f333:                            ; preds = %dec_label_pc_1000f321
  %v0_1000f338 = load i32, i32* @esi, align 4
  %v1_1000f339 = inttoptr i32 %v0_1000f338 to i32*
  %v5_1000f339 = call i32 @function_100094b0(i32* %v1_1000f339, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_10024134.487, i32 0, i32 0))
  %v1_1000f341 = icmp eq i32 %v5_1000f339, 0
  br i1 %v1_1000f341, label %dec_label_pc_1000f2f8, label %dec_label_pc_1000f345

dec_label_pc_1000f345:                            ; preds = %dec_label_pc_1000f333
  %v0_1000f34a = load i32, i32* @esi, align 4
  %v1_1000f34b = inttoptr i32 %v0_1000f34a to i32*
  %v5_1000f34b = call i32 @function_100094b0(i32* %v1_1000f34b, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10024128.488, i32 0, i32 0))
  %v1_1000f353 = icmp eq i32 %v5_1000f34b, 0
  br i1 %v1_1000f353, label %dec_label_pc_1000f2f8, label %dec_label_pc_1000f357

dec_label_pc_1000f357:                            ; preds = %dec_label_pc_1000f345
  %v0_1000f35c = load i32, i32* @esi, align 4
  %v1_1000f35d = inttoptr i32 %v0_1000f35c to i32*
  %v5_1000f35d = call i32 @function_100094b0(i32* %v1_1000f35d, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_10024120.489, i32 0, i32 0))
  %v1_1000f365 = icmp eq i32 %v5_1000f35d, 0
  br i1 %v1_1000f365, label %dec_label_pc_1000f2f8, label %dec_label_pc_1000f369

dec_label_pc_1000f369:                            ; preds = %dec_label_pc_1000f357
  %v0_1000f36e = load i32, i32* @esi, align 4
  %v1_1000f36f = inttoptr i32 %v0_1000f36e to i32*
  %v5_1000f36f = call i32 @function_100094b0(i32* %v1_1000f36f, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_10024114.490, i32 0, i32 0))
  %v0_1000f377 = call i32 @KeyValuesSystem()
  %v1_1000f37d = inttoptr i32 %v0_1000f377 to i32*
  %v2_1000f37d = load i32, i32* %v1_1000f37d, align 4
  store i32 %v0_1000f377, i32* @ecx, align 4
  %v1_1000f381 = add i32 %v2_1000f37d, 32
  %v2_1000f381 = inttoptr i32 %v1_1000f381 to i32*
  %v3_1000f381 = load i32, i32* %v2_1000f381, align 4
  ret i32 %v3_1000f381
}

define i32 @function_1000f390(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f390:
  %v0_1000f39c = call i32 @Warning()
  ret i32 %v0_1000f39c
}

define i32 @"??0_Init_locks@std@@QAE@XZ.9"() local_unnamed_addr {
dec_label_pc_1000f3b0:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000f3b0 = load i32, i32* @ecx, align 4
  store i32 %v0_1000f3b0, i32* %eax.global-to-local, align 4
  %v1_1000f3b2 = inttoptr i32 %v0_1000f3b0 to i32*
  store i32 0, i32* %v1_1000f3b2, align 4
  %v0_1000f3b8 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000f3b8
}

define i32 @function_1000f3c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f3c0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_1000f3c7 = inttoptr i32 %arg1 to i32*
  %v2_1000f3c7 = load i32, i32* %v1_1000f3c7, align 4
  store i32 %v2_1000f3c7, i32* %eax.global-to-local, align 4
  %v0_1000f3c9 = load i32, i32* @edi, align 4
  store i32 %v0_1000f3c9, i32* %stack_var_-12, align 4
  %v4_1000f3c9 = ptrtoint i32* %stack_var_-12 to i32
  %v0_1000f3ca = load i32, i32* @ecx, align 4
  store i32 %v0_1000f3ca, i32* @edi, align 4
  %v1_1000f3cc = icmp eq i32 %v2_1000f3c7, 0
  br i1 %v1_1000f3cc, label %dec_label_pc_1000f3f4, label %dec_label_pc_1000f3d0

dec_label_pc_1000f3d0:                            ; preds = %dec_label_pc_1000f3c0
  %v1_1000f3d1 = call i32 @function_1000f3c0(i32 %v2_1000f3c7)
  store i32 %v1_1000f3d1, i32* %eax.global-to-local, align 4
  %v0_1000f3d6 = load i32, i32* @esi, align 4
  %v1_1000f3d6 = inttoptr i32 %v0_1000f3d6 to i32*
  %v2_1000f3d6 = load i32, i32* %v1_1000f3d6, align 4
  %v1_1000f3d8 = add i32 %v2_1000f3d6, 4
  store i32 %v1_1000f3d8, i32* %eax.global-to-local, align 4
  %v0_1000f3dc = load i32, i32* @edi, align 4
  store i32 %v0_1000f3dc, i32* @ecx, align 4
  %v1_1000f3de = call i32 @function_1000f3c0(i32 %v1_1000f3d8)
  store i32 %v1_1000f3de, i32* %eax.global-to-local, align 4
  %v0_1000f3e3 = load i32, i32* @esi, align 4
  %v1_1000f3e3 = inttoptr i32 %v0_1000f3e3 to i32*
  %v2_1000f3e3 = load i32, i32* %v1_1000f3e3, align 4
  store i32 %v2_1000f3e3, i32* @ecx, align 4
  %v1_1000f3e6 = call i32 @"??3@YAXPAX@Z"(i32 %v2_1000f3e3)
  store i32 %v1_1000f3e6, i32* %eax.global-to-local, align 4
  %v0_1000f3ee = load i32, i32* @esi, align 4
  %v1_1000f3ee = inttoptr i32 %v0_1000f3ee to i32*
  store i32 0, i32* %v1_1000f3ee, align 4
  %v0_1000f3f4.pre = load i32, i32* @esp, align 4
  %v0_1000f3f7.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f3f4

dec_label_pc_1000f3f4:                            ; preds = %dec_label_pc_1000f3d0, %dec_label_pc_1000f3c0
  %v0_1000f3f7 = phi i32 [ %v0_1000f3f7.pre, %dec_label_pc_1000f3d0 ], [ 0, %dec_label_pc_1000f3c0 ]
  %v0_1000f3f4 = phi i32 [ %v0_1000f3f4.pre, %dec_label_pc_1000f3d0 ], [ %v4_1000f3c9, %dec_label_pc_1000f3c0 ]
  %v1_1000f3f4 = inttoptr i32 %v0_1000f3f4 to i32*
  %v2_1000f3f4 = load i32, i32* %v1_1000f3f4, align 4
  store i32 %v2_1000f3f4, i32* @edi, align 4
  %v3_1000f3f4 = add i32 %v0_1000f3f4, 4
  %v1_1000f3f5 = inttoptr i32 %v3_1000f3f4 to i32*
  %v2_1000f3f5 = load i32, i32* %v1_1000f3f5, align 4
  store i32 %v2_1000f3f5, i32* @esi, align 4
  %v3_1000f3f5 = add i32 %v0_1000f3f4, 8
  %v1_1000f3f6 = inttoptr i32 %v3_1000f3f5 to i32*
  %v2_1000f3f6 = load i32, i32* %v1_1000f3f6, align 4
  store i32 %v2_1000f3f6, i32* @ebp, align 4
  ret i32 %v0_1000f3f7
}

define i32 @function_1000f400(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000f400:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000f403 = load i32, i32* @ebx, align 4
  %v5_1000f404 = and i32 %arg1, 255
  %v7_1000f404 = and i32 %v0_1000f403, -256
  %v8_1000f404 = or i32 %v7_1000f404, %v5_1000f404
  store i32 %v8_1000f404, i32* %ebx.global-to-local, align 4
  %v0_1000f408 = load i32, i32* @edi, align 4
  store i32 %v0_1000f408, i32* %stack_var_-16, align 4
  %v4_1000f408 = ptrtoint i32* %stack_var_-16 to i32
  %v0_1000f409 = load i32, i32* @ecx, align 4
  store i32 %v0_1000f409, i32* %esi.global-to-local, align 4
  %v1_1000f40b = trunc i32 %arg1 to i8
  %v11_1000f40b = icmp eq i8 %v1_1000f40b, 36
  %v1_1000f40e = icmp eq i1 %v11_1000f40b, false
  br i1 %v1_1000f40e, label %dec_label_pc_1000f45f, label %dec_label_pc_1000f410

dec_label_pc_1000f410:                            ; preds = %dec_label_pc_1000f400
  %v3_1000f410 = add i32 %v0_1000f409, 16
  %v4_1000f410 = inttoptr i32 %v3_1000f410 to i8*
  store i8 %v1_1000f40b, i8* %v4_1000f410, align 1
  store i32 1, i32* %edi.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1000f420

dec_label_pc_1000f420:                            ; preds = %dec_label_pc_1000f44b, %dec_label_pc_1000f410
  %v0_1000f420 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f420 = add i32 %v0_1000f420, 8
  %v2_1000f420 = inttoptr i32 %v1_1000f420 to i32*
  %v3_1000f420 = load i32, i32* %v2_1000f420, align 4
  store i32 %v3_1000f420, i32* %eax.global-to-local, align 4
  %v1_1000f423 = add i32 %v0_1000f420, 12
  %v2_1000f423 = inttoptr i32 %v1_1000f423 to i32*
  %v3_1000f423 = load i32, i32* %v2_1000f423, align 4
  store i32 %v3_1000f423, i32* @ecx, align 4
  %v3_1000f426 = add i32 %v3_1000f423, %v3_1000f420
  %v4_1000f426 = inttoptr i32 %v3_1000f426 to i8*
  %v5_1000f426 = load i8, i8* %v4_1000f426, align 1
  %v6_1000f426 = sext i8 %v5_1000f426 to i32
  store i32 %v6_1000f426, i32* @edx, align 4
  %v1_1000f42a = load i32, i32* @esp, align 4
  %v2_1000f42a = add i32 %v1_1000f42a, -4
  %v3_1000f42a = inttoptr i32 %v2_1000f42a to i32*
  store i32 %v6_1000f426, i32* %v3_1000f42a, align 4
  %v1_1000f42b = call i32 @_isalnum(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f42b, i32* %eax.global-to-local, align 4
  %v0_1000f430 = load i32, i32* @esp, align 4
  %v1_1000f430 = add i32 %v0_1000f430, 4
  %v1_1000f433 = icmp eq i32 %v1_1000f42b, 0
  %v1_1000f435 = icmp eq i1 %v1_1000f433, false
  br i1 %v1_1000f435, label %dec_label_pc_1000f443, label %dec_label_pc_1000f437

dec_label_pc_1000f437:                            ; preds = %dec_label_pc_1000f420
  %v0_1000f437 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f437 = add i32 %v0_1000f437, 8
  %v2_1000f437 = inttoptr i32 %v1_1000f437 to i32*
  %v3_1000f437 = load i32, i32* %v2_1000f437, align 4
  store i32 %v3_1000f437, i32* %eax.global-to-local, align 4
  %v1_1000f43a = add i32 %v0_1000f437, 12
  %v2_1000f43a = inttoptr i32 %v1_1000f43a to i32*
  %v3_1000f43a = load i32, i32* %v2_1000f43a, align 4
  store i32 %v3_1000f43a, i32* @ecx, align 4
  %v3_1000f43d = add i32 %v3_1000f43a, %v3_1000f437
  %v4_1000f43d = inttoptr i32 %v3_1000f43d to i8*
  %v5_1000f43d = load i8, i8* %v4_1000f43d, align 1
  %v15_1000f43d = icmp eq i8 %v5_1000f43d, 95
  %v1_1000f441 = icmp eq i1 %v15_1000f43d, false
  br i1 %v1_1000f441, label %dec_label_pc_1000f4c1, label %dec_label_pc_1000f443

dec_label_pc_1000f443:                            ; preds = %dec_label_pc_1000f437, %dec_label_pc_1000f420
  %v11_1000f4d613 = phi i32 [ %v3_1000f437, %dec_label_pc_1000f437 ], [ %v1_1000f42b, %dec_label_pc_1000f420 ]
  %v0_1000f443 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000f449 = icmp slt i32 %v0_1000f443, 128
  br i1 %v5_1000f449, label %dec_label_pc_1000f44b, label %dec_label_pc_1000f4c1

dec_label_pc_1000f44b:                            ; preds = %dec_label_pc_1000f443
  %v0_1000f44b = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f44b = add i32 %v0_1000f44b, 12
  %v2_1000f44b = inttoptr i32 %v1_1000f44b to i32*
  %v3_1000f44b = load i32, i32* %v2_1000f44b, align 4
  store i32 %v3_1000f44b, i32* %eax.global-to-local, align 4
  %v1_1000f44e = add i32 %v0_1000f44b, 8
  %v2_1000f44e = inttoptr i32 %v1_1000f44e to i32*
  %v3_1000f44e = load i32, i32* %v2_1000f44e, align 4
  %v3_1000f451 = add i32 %v3_1000f44e, %v3_1000f44b
  %v4_1000f451 = inttoptr i32 %v3_1000f451 to i8*
  %v5_1000f451 = load i8, i8* %v4_1000f451, align 1
  %v6_1000f451 = zext i8 %v5_1000f451 to i32
  %v7_1000f451 = load i32, i32* @ecx, align 4
  %v8_1000f451 = and i32 %v7_1000f451, -256
  %v9_1000f451 = or i32 %v8_1000f451, %v6_1000f451
  store i32 %v9_1000f451, i32* @ecx, align 4
  %v5_1000f454 = add i32 %v0_1000f443, 16
  %v6_1000f454 = add i32 %v5_1000f454, %v0_1000f44b
  %v7_1000f454 = inttoptr i32 %v6_1000f454 to i8*
  store i8 %v5_1000f451, i8* %v7_1000f454, align 1
  %v0_1000f458 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f458 = add i32 %v0_1000f458, 12
  %v2_1000f458 = inttoptr i32 %v1_1000f458 to i32*
  %v3_1000f458 = load i32, i32* %v2_1000f458, align 4
  %v4_1000f458 = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000f458 = add i32 %v4_1000f458, %v3_1000f458
  store i32 %v5_1000f458, i32* %v2_1000f458, align 4
  %v0_1000f45b = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f45b = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000f45b = add i32 %v1_1000f45b, %v0_1000f45b
  store i32 %v2_1000f45b, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000f420

dec_label_pc_1000f45f:                            ; preds = %dec_label_pc_1000f400
  store i32 %v8_1000f404, i32* @edx, align 4
  %v1_1000f463 = call i32 @_isdigit(i32 %v8_1000f404)
  store i32 %v1_1000f463, i32* %eax.global-to-local, align 4
  %v1_1000f46b = icmp eq i32 %v1_1000f463, 0
  br i1 %v1_1000f46b, label %dec_label_pc_1000f4d4, label %dec_label_pc_1000f46f

dec_label_pc_1000f46f:                            ; preds = %dec_label_pc_1000f45f
  %v0_1000f46f = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f46f = trunc i32 %v0_1000f46f to i8
  %v2_1000f46f = load i32, i32* %esi.global-to-local, align 4
  %v3_1000f46f = add i32 %v2_1000f46f, 16
  %v4_1000f46f = inttoptr i32 %v3_1000f46f to i8*
  store i8 %v1_1000f46f, i8* %v4_1000f46f, align 1
  %v0_1000f472 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f472 = add i32 %v0_1000f472, 8
  %v2_1000f472 = inttoptr i32 %v1_1000f472 to i32*
  %v3_1000f472 = load i32, i32* %v2_1000f472, align 4
  store i32 %v3_1000f472, i32* %eax.global-to-local, align 4
  %v1_1000f475 = add i32 %v0_1000f472, 12
  %v2_1000f475 = inttoptr i32 %v1_1000f475 to i32*
  %v3_1000f475 = load i32, i32* %v2_1000f475, align 4
  store i32 %v3_1000f475, i32* @ecx, align 4
  %v3_1000f478 = add i32 %v3_1000f475, %v3_1000f472
  %v4_1000f478 = inttoptr i32 %v3_1000f478 to i8*
  %v5_1000f478 = load i8, i8* %v4_1000f478, align 1
  %v6_1000f478 = sext i8 %v5_1000f478 to i32
  store i32 %v6_1000f478, i32* @edx, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  %v1_1000f484 = call i32 @_isdigit(i32 %v6_1000f478)
  store i32 %v1_1000f484, i32* %eax.global-to-local, align 4
  %v1_1000f48c = icmp eq i32 %v1_1000f484, 0
  br i1 %v1_1000f48c, label %dec_label_pc_1000f46f.dec_label_pc_1000f4c6_crit_edge, label %dec_label_pc_1000f490

dec_label_pc_1000f46f.dec_label_pc_1000f4c6_crit_edge: ; preds = %dec_label_pc_1000f46f
  %v0_1000f4c6.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1000f4c6

dec_label_pc_1000f490:                            ; preds = %dec_label_pc_1000f46f, %dec_label_pc_1000f498
  %v11_1000f4d612 = phi i32 [ %v1_1000f4b5, %dec_label_pc_1000f498 ], [ %v1_1000f484, %dec_label_pc_1000f46f ]
  %v0_1000f4d48 = phi i32 [ %v1_1000f4ba, %dec_label_pc_1000f498 ], [ %v4_1000f408, %dec_label_pc_1000f46f ]
  %v0_1000f490 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000f496 = icmp slt i32 %v0_1000f490, 128
  br i1 %v5_1000f496, label %dec_label_pc_1000f498, label %dec_label_pc_1000f4c1

dec_label_pc_1000f498:                            ; preds = %dec_label_pc_1000f490
  %v0_1000f498 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f498 = add i32 %v0_1000f498, 12
  %v2_1000f498 = inttoptr i32 %v1_1000f498 to i32*
  %v3_1000f498 = load i32, i32* %v2_1000f498, align 4
  store i32 %v3_1000f498, i32* @ecx, align 4
  %v1_1000f49b = add i32 %v0_1000f498, 8
  %v2_1000f49b = inttoptr i32 %v1_1000f49b to i32*
  %v3_1000f49b = load i32, i32* %v2_1000f49b, align 4
  store i32 %v3_1000f49b, i32* %eax.global-to-local, align 4
  %v3_1000f49e = add i32 %v3_1000f49b, %v3_1000f498
  %v4_1000f49e = inttoptr i32 %v3_1000f49e to i8*
  %v5_1000f49e = load i8, i8* %v4_1000f49e, align 1
  %v5_1000f4a1 = add i32 %v0_1000f490, 16
  %v6_1000f4a1 = add i32 %v5_1000f4a1, %v0_1000f498
  %v7_1000f4a1 = inttoptr i32 %v6_1000f4a1 to i8*
  store i8 %v5_1000f49e, i8* %v7_1000f4a1, align 1
  %v0_1000f4a5 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f4a5 = add i32 %v0_1000f4a5, 12
  %v2_1000f4a5 = inttoptr i32 %v1_1000f4a5 to i32*
  %v3_1000f4a5 = load i32, i32* %v2_1000f4a5, align 4
  %v4_1000f4a5 = load i32, i32* %ebx.global-to-local, align 4
  %v5_1000f4a5 = add i32 %v4_1000f4a5, %v3_1000f4a5
  store i32 %v5_1000f4a5, i32* %v2_1000f4a5, align 4
  %v0_1000f4a8 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000f4a8 = add i32 %v0_1000f4a8, 8
  %v2_1000f4a8 = inttoptr i32 %v1_1000f4a8 to i32*
  %v3_1000f4a8 = load i32, i32* %v2_1000f4a8, align 4
  store i32 %v3_1000f4a8, i32* %eax.global-to-local, align 4
  %v1_1000f4ab = add i32 %v0_1000f4a8, 12
  %v2_1000f4ab = inttoptr i32 %v1_1000f4ab to i32*
  %v3_1000f4ab = load i32, i32* %v2_1000f4ab, align 4
  store i32 %v3_1000f4ab, i32* @ecx, align 4
  %v3_1000f4ae = add i32 %v3_1000f4ab, %v3_1000f4a8
  %v4_1000f4ae = inttoptr i32 %v3_1000f4ae to i8*
  %v5_1000f4ae = load i8, i8* %v4_1000f4ae, align 1
  %v6_1000f4ae = sext i8 %v5_1000f4ae to i32
  store i32 %v6_1000f4ae, i32* @edx, align 4
  %v1_1000f4b2 = load i32, i32* @esp, align 4
  %v2_1000f4b2 = add i32 %v1_1000f4b2, -4
  %v3_1000f4b2 = inttoptr i32 %v2_1000f4b2 to i32*
  store i32 %v6_1000f4ae, i32* %v3_1000f4b2, align 4
  %v0_1000f4b3 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f4b3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_1000f4b3 = add i32 %v1_1000f4b3, %v0_1000f4b3
  store i32 %v2_1000f4b3, i32* %edi.global-to-local, align 4
  %v1_1000f4b5 = call i32 @_isdigit(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f4b5, i32* %eax.global-to-local, align 4
  %v0_1000f4ba = load i32, i32* @esp, align 4
  %v1_1000f4ba = add i32 %v0_1000f4ba, 4
  %v1_1000f4bd = icmp eq i32 %v1_1000f4b5, 0
  %v1_1000f4bf = icmp eq i1 %v1_1000f4bd, false
  br i1 %v1_1000f4bf, label %dec_label_pc_1000f490, label %dec_label_pc_1000f4c1

dec_label_pc_1000f4c1:                            ; preds = %dec_label_pc_1000f443, %dec_label_pc_1000f437, %dec_label_pc_1000f490, %dec_label_pc_1000f498
  %v11_1000f4d610 = phi i32 [ %v11_1000f4d612, %dec_label_pc_1000f490 ], [ %v1_1000f4b5, %dec_label_pc_1000f498 ], [ %v11_1000f4d613, %dec_label_pc_1000f443 ], [ %v3_1000f437, %dec_label_pc_1000f437 ]
  %v0_1000f4d46 = phi i32 [ %v0_1000f4d48, %dec_label_pc_1000f490 ], [ %v1_1000f4ba, %dec_label_pc_1000f498 ], [ %v1_1000f430, %dec_label_pc_1000f443 ], [ %v1_1000f430, %dec_label_pc_1000f437 ]
  %v0_1000f4c1 = load i32, i32* %edi.global-to-local, align 4
  %v5_1000f4c4 = icmp slt i32 %v0_1000f4c1, 127
  br i1 %v5_1000f4c4, label %dec_label_pc_1000f4c6, label %dec_label_pc_1000f4d4

dec_label_pc_1000f4c6:                            ; preds = %dec_label_pc_1000f46f.dec_label_pc_1000f4c6_crit_edge, %dec_label_pc_1000f4c1
  %v0_1000f4c6 = phi i32 [ %v0_1000f4c6.pre, %dec_label_pc_1000f46f.dec_label_pc_1000f4c6_crit_edge ], [ %v0_1000f4c1, %dec_label_pc_1000f4c1 ]
  %v1_1000f4c6 = load i32, i32* %esi.global-to-local, align 4
  %v3_1000f4c6 = add i32 %v0_1000f4c6, 16
  %v4_1000f4c6 = add i32 %v3_1000f4c6, %v1_1000f4c6
  %v5_1000f4c6 = inttoptr i32 %v4_1000f4c6 to i8*
  store i8 0, i8* %v5_1000f4c6, align 1
  %v0_1000f4cb = load i32, i32* @esp, align 4
  %v1_1000f4cb = inttoptr i32 %v0_1000f4cb to i32*
  %v2_1000f4cb = load i32, i32* %v1_1000f4cb, align 4
  store i32 %v2_1000f4cb, i32* @edi, align 4
  %v3_1000f4cb = add i32 %v0_1000f4cb, 4
  %v1_1000f4cc = inttoptr i32 %v3_1000f4cb to i32*
  %v2_1000f4cc = load i32, i32* %v1_1000f4cc, align 4
  store i32 %v2_1000f4cc, i32* @esi, align 4
  %v3_1000f4cc = add i32 %v0_1000f4cb, 8
  %v0_1000f4cd = load i32, i32* %ebx.global-to-local, align 4
  %v1_1000f4cd = and i32 %v0_1000f4cd, 255
  %v2_1000f4cd = load i32, i32* %eax.global-to-local, align 4
  %v3_1000f4cd = and i32 %v2_1000f4cd, -256
  %v4_1000f4cd = or i32 %v3_1000f4cd, %v1_1000f4cd
  store i32 %v4_1000f4cd, i32* %eax.global-to-local, align 4
  %v1_1000f4cf = inttoptr i32 %v3_1000f4cc to i32*
  %v2_1000f4cf = load i32, i32* %v1_1000f4cf, align 4
  store i32 %v2_1000f4cf, i32* @ebx, align 4
  %v3_1000f4cf = add i32 %v0_1000f4cb, 12
  %v1_1000f4d0 = inttoptr i32 %v3_1000f4cf to i32*
  %v2_1000f4d0 = load i32, i32* %v1_1000f4d0, align 4
  store i32 %v2_1000f4d0, i32* @ebp, align 4
  ret i32 %v4_1000f4cd

dec_label_pc_1000f4d4:                            ; preds = %dec_label_pc_1000f4c1, %dec_label_pc_1000f45f
  %v11_1000f4d6 = phi i32 [ %v11_1000f4d610, %dec_label_pc_1000f4c1 ], [ 0, %dec_label_pc_1000f45f ]
  %v0_1000f4d4 = phi i32 [ %v0_1000f4d46, %dec_label_pc_1000f4c1 ], [ %v4_1000f408, %dec_label_pc_1000f45f ]
  %v1_1000f4d4 = inttoptr i32 %v0_1000f4d4 to i32*
  %v2_1000f4d4 = load i32, i32* %v1_1000f4d4, align 4
  store i32 %v2_1000f4d4, i32* @edi, align 4
  %v3_1000f4d4 = add i32 %v0_1000f4d4, 4
  %v1_1000f4d5 = inttoptr i32 %v3_1000f4d4 to i32*
  %v2_1000f4d5 = load i32, i32* %v1_1000f4d5, align 4
  store i32 %v2_1000f4d5, i32* @esi, align 4
  %v3_1000f4d5 = add i32 %v0_1000f4d4, 8
  %v12_1000f4d6 = and i32 %v11_1000f4d6, -256
  store i32 %v12_1000f4d6, i32* %eax.global-to-local, align 4
  %v1_1000f4d8 = inttoptr i32 %v3_1000f4d5 to i32*
  %v2_1000f4d8 = load i32, i32* %v1_1000f4d8, align 4
  store i32 %v2_1000f4d8, i32* @ebx, align 4
  %v3_1000f4d8 = add i32 %v0_1000f4d4, 12
  %v1_1000f4d9 = inttoptr i32 %v3_1000f4d8 to i32*
  %v2_1000f4d9 = load i32, i32* %v1_1000f4d9, align 4
  store i32 %v2_1000f4d9, i32* @ebp, align 4
  ret i32 %v12_1000f4d6
}

define i32 @function_1000f4e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f4e0:
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-20 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v0_1000f4e0 = load i32, i32* @ebp, align 4
  %v0_1000f4e3 = load i32, i32* @esi, align 4
  %v0_1000f4e4 = load i32, i32* @edi, align 4
  store i32 %v0_1000f4e4, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_1000f4e8 = inttoptr i32 %arg1 to i32*
  %v2_1000f4e8 = load i32, i32* %v1_1000f4e8, align 4
  %v0_1000f4ea = load i32, i32* @ecx, align 4
  store i32 %v0_1000f4ea, i32* @esi, align 4
  %sext = mul i32 %v2_1000f4e8, 16777216
  %v2_1000f4ec = icmp eq i32 %sext, 0
  %v1_1000f4ee = icmp eq i1 %v2_1000f4ec, false
  br i1 %v1_1000f4ee, label %dec_label_pc_1000f4f8, label %dec_label_pc_1000f4f0

dec_label_pc_1000f4f0:                            ; preds = %dec_label_pc_1000f4e0
  store i32 %v0_1000f4e4, i32* @edi, align 4
  %v14_1000f4f1 = sdiv i32 %sext, 16777216
  %v15_1000f4f1 = and i32 %v14_1000f4f1, -256
  store i32 %v0_1000f4e3, i32* @esi, align 4
  store i32 %v0_1000f4e0, i32* @ebp, align 4
  ret i32 %v15_1000f4f1

dec_label_pc_1000f4f8:                            ; preds = %dec_label_pc_1000f4e0
  %v3_1000f4e8 = trunc i32 %v2_1000f4e8 to i8
  %v0_1000f4f8 = load i32, i32* @ebx, align 4
  store i8 %v3_1000f4e8, i8* %stack_var_-20, align 1
  %v1_1000f4fa = sdiv i32 %sext, 16777216
  %v2_1000f4fa = call i32 @function_1000f4e0(i32 %v1_1000f4fa)
  %v1_1000f4ff = and i32 %v2_1000f4fa, 255
  %v2_1000f4ff = load i32, i32* @ebx, align 4
  %v3_1000f4ff = and i32 %v2_1000f4ff, -256
  %v4_1000f4ff = or i32 %v3_1000f4ff, %v1_1000f4ff
  store i32 %v4_1000f4ff, i32* @ebx, align 4
  %v0_1000f501 = load i32, i32* @edi, align 4
  %v1_1000f501 = inttoptr i32 %v0_1000f501 to i32*
  %v2_1000f501 = load i32, i32* %v1_1000f501, align 4
  %v1_1000f503 = add i32 %v2_1000f501, 4
  store i32 %v1_1000f503, i32* %stack_var_-24, align 4
  %v0_1000f507 = load i32, i32* @esi, align 4
  store i32 %v0_1000f507, i32* @ecx, align 4
  %v1_1000f509 = call i32 @function_1000f4e0(i32 %v1_1000f503)
  %v0_1000f50e = load i32, i32* @edi, align 4
  %v1_1000f50e = inttoptr i32 %v0_1000f50e to i32*
  %v2_1000f50e = load i32, i32* %v1_1000f50e, align 4
  %v1_1000f510 = add i32 %v2_1000f50e, 8
  %v2_1000f510 = inttoptr i32 %v1_1000f510 to i32*
  %v3_1000f510 = load i32, i32* %v2_1000f510, align 4
  %v7_1000f513 = icmp eq i32 %v3_1000f510, 0
  store i32 %v3_1000f510, i32* @ecx, align 4
  br i1 %v7_1000f513, label %dec_label_pc_1000f525, label %dec_label_pc_1000f518

dec_label_pc_1000f518:                            ; preds = %dec_label_pc_1000f4f8
  %v1_1000f518 = add i32 %v3_1000f510, -1
  %v9_1000f518 = icmp eq i32 %v1_1000f518, 0
  store i32 %v1_1000f518, i32* @ecx, align 4
  %v1_1000f519 = icmp eq i1 %v9_1000f518, false
  br i1 %v1_1000f519, label %dec_label_pc_1000f53b, label %dec_label_pc_1000f51b

dec_label_pc_1000f51b:                            ; preds = %dec_label_pc_1000f518
  %v4_1000f51b = trunc i32 %v1_1000f509 to i8
  %v5_1000f51b = icmp eq i8 %v4_1000f51b, 0
  %v1_1000f51d = zext i1 %v5_1000f51b to i32
  %v3_1000f51d = and i32 %v1_1000f518, -256
  %v4_1000f51d = or i32 %v3_1000f51d, %v1_1000f51d
  store i32 %v4_1000f51d, i32* @ecx, align 4
  %v1_1000f520 = zext i1 %v5_1000f51b to i8
  %v3_1000f520 = add i32 %v2_1000f50e, 12
  %v4_1000f520 = inttoptr i32 %v3_1000f520 to i8*
  store i8 %v1_1000f520, i8* %v4_1000f520, align 1
  br label %dec_label_pc_1000f53b

dec_label_pc_1000f525:                            ; preds = %dec_label_pc_1000f4f8
  %v1_1000f525 = add i32 %v2_1000f50e, 12
  %v2_1000f525 = inttoptr i32 %v1_1000f525 to i8*
  %v3_1000f525 = load i8, i8* %v2_1000f525, align 1
  %v13_1000f525 = icmp eq i8 %v3_1000f525, 38
  %v1_1000f529 = icmp eq i1 %v13_1000f525, false
  %v0_1000f550 = load i32, i32* @ebx, align 4
  %v4_1000f550 = trunc i32 %v0_1000f550 to i8
  %v5_1000f550 = icmp eq i8 %v4_1000f550, 0
  br i1 %v1_1000f529, label %dec_label_pc_1000f550, label %dec_label_pc_1000f52b

dec_label_pc_1000f52b:                            ; preds = %dec_label_pc_1000f525
  br i1 %v5_1000f550, label %dec_label_pc_1000f558, label %dec_label_pc_1000f52f

dec_label_pc_1000f52f:                            ; preds = %dec_label_pc_1000f52b
  %v4_1000f52f = trunc i32 %v1_1000f509 to i8
  %v5_1000f52f = icmp eq i8 %v4_1000f52f, 0
  br i1 %v5_1000f52f, label %dec_label_pc_1000f558, label %dec_label_pc_1000f538

dec_label_pc_1000f538:                            ; preds = %dec_label_pc_1000f52f, %dec_label_pc_1000f550, %dec_label_pc_1000f554, %dec_label_pc_1000f558
  %storemerge = phi i8 [ 0, %dec_label_pc_1000f558 ], [ 1, %dec_label_pc_1000f554 ], [ 1, %dec_label_pc_1000f550 ], [ 1, %dec_label_pc_1000f52f ]
  store i8 %storemerge, i8* %v2_1000f525, align 1
  br label %dec_label_pc_1000f53b

dec_label_pc_1000f53b:                            ; preds = %dec_label_pc_1000f538, %dec_label_pc_1000f51b, %dec_label_pc_1000f518
  %v0_1000f53b = load i32, i32* @edi, align 4
  %v1_1000f53b = inttoptr i32 %v0_1000f53b to i32*
  %v2_1000f53b = load i32, i32* %v1_1000f53b, align 4
  %v1_1000f53d = add i32 %v2_1000f53b, 8
  %v2_1000f53d = inttoptr i32 %v1_1000f53d to i32*
  store i32 2, i32* %v2_1000f53d, align 4
  %v0_1000f544 = load i32, i32* @edi, align 4
  %v1_1000f544 = inttoptr i32 %v0_1000f544 to i32*
  %v2_1000f544 = load i32, i32* %v1_1000f544, align 4
  %v1_1000f546 = add i32 %v2_1000f544, 12
  %v2_1000f546 = inttoptr i32 %v1_1000f546 to i8*
  %v3_1000f546 = load i8, i8* %v2_1000f546, align 1
  %v4_1000f546 = zext i8 %v3_1000f546 to i32
  %v6_1000f546 = and i32 %v2_1000f544, -256
  %v7_1000f546 = or i32 %v4_1000f546, %v6_1000f546
  %v2_1000f549 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1000f549, i32* @ebx, align 4
  %v2_1000f54a = load i8, i8* %stack_var_-20, align 1
  %v3_1000f54a = sext i8 %v2_1000f54a to i32
  store i32 %v3_1000f54a, i32* @edi, align 4
  store i32 %v0_1000f4f8, i32* @esi, align 4
  %v2_1000f54c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1000f54c, i32* @ebp, align 4
  ret i32 %v7_1000f546

dec_label_pc_1000f550:                            ; preds = %dec_label_pc_1000f525
  %v1_1000f552 = icmp eq i1 %v5_1000f550, false
  br i1 %v1_1000f552, label %dec_label_pc_1000f538, label %dec_label_pc_1000f554

dec_label_pc_1000f554:                            ; preds = %dec_label_pc_1000f550
  %v4_1000f554 = trunc i32 %v1_1000f509 to i8
  %v5_1000f554 = icmp eq i8 %v4_1000f554, 0
  %v1_1000f556 = icmp eq i1 %v5_1000f554, false
  br i1 %v1_1000f556, label %dec_label_pc_1000f538, label %dec_label_pc_1000f558

dec_label_pc_1000f558:                            ; preds = %dec_label_pc_1000f554, %dec_label_pc_1000f52f, %dec_label_pc_1000f52b
  br label %dec_label_pc_1000f538
}

define i32 @function_1000f560() local_unnamed_addr {
dec_label_pc_1000f560:
  %eax.global-to-local = alloca i32, align 4
  %v0_1000f561 = load i32, i32* @ecx, align 4
  store i32 %v0_1000f561, i32* @esi, align 4
  store i32 %v0_1000f561, i32* %eax.global-to-local, align 4
  %v1_1000f565 = icmp eq i32 %v0_1000f561, 0
  br i1 %v1_1000f565, label %dec_label_pc_1000f58d, label %dec_label_pc_1000f569

dec_label_pc_1000f569:                            ; preds = %dec_label_pc_1000f560
  %v1_1000f56a = call i32 @function_1000f3c0(i32 %v0_1000f561)
  %v2_1000f56f = load i32, i32* @ecx, align 4
  %v1_1000f571 = add i32 %v2_1000f56f, 4
  store i32 %v1_1000f571, i32* %eax.global-to-local, align 4
  %v0_1000f575 = load i32, i32* @esi, align 4
  store i32 %v0_1000f575, i32* @ecx, align 4
  %v1_1000f577 = call i32 @function_1000f3c0(i32 %v1_1000f571)
  store i32 %v1_1000f577, i32* %eax.global-to-local, align 4
  %v0_1000f57e = load i32, i32* @ecx, align 4
  %v1_1000f57f = call i32 @"??3@YAXPAX@Z"(i32 %v0_1000f57e)
  store i32 %v1_1000f57f, i32* %eax.global-to-local, align 4
  %v0_1000f587 = load i32, i32* @esi, align 4
  %v1_1000f587 = inttoptr i32 %v0_1000f587 to i32*
  store i32 0, i32* %v1_1000f587, align 4
  %v0_1000f58e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f58d

dec_label_pc_1000f58d:                            ; preds = %dec_label_pc_1000f569, %dec_label_pc_1000f560
  %v0_1000f58e = phi i32 [ %v0_1000f58e.pre, %dec_label_pc_1000f569 ], [ 0, %dec_label_pc_1000f560 ]
  ret i32 %v0_1000f58e
}

define i32 @function_1000f590(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f590:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000f590 = load i32, i32* @ebp, align 4
  store i32 %v0_1000f590, i32* %stack_var_-4, align 4
  %v4_1000f590 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000f590, i32* @ebp, align 4
  %v16_1000f593 = ptrtoint i32* %stack_var_-272 to i32
  %v0_1000f599 = load i32, i32* @esi, align 4
  %v0_1000f59a = load i32, i32* @ecx, align 4
  store i32 %v0_1000f59a, i32* %esi.global-to-local, align 4
  %v1_1000f59c = add i32 %v0_1000f59a, 4
  %v2_1000f59c = inttoptr i32 %v1_1000f59c to i8*
  %v3_1000f59c = load i8, i8* %v2_1000f59c, align 1
  %v4_1000f59c = zext i8 %v3_1000f59c to i32
  %v5_1000f59c = load i32, i32* @eax, align 4
  %v6_1000f59c = and i32 %v5_1000f59c, -256
  %v7_1000f59c = or i32 %v6_1000f59c, %v4_1000f59c
  store i32 %v7_1000f59c, i32* %eax.global-to-local, align 4
  %v0_1000f59f = load i32, i32* @edi, align 4
  store i32 %v0_1000f59f, i32* %stack_var_-280, align 4
  %v11_1000f5a0 = icmp eq i8 %v3_1000f59c, 40
  %v1_1000f5a2 = icmp eq i1 %v11_1000f5a0, false
  br i1 %v1_1000f5a2, label %dec_label_pc_1000f5de, label %dec_label_pc_1000f5a4

dec_label_pc_1000f5a4:                            ; preds = %dec_label_pc_1000f590
  %v1_1000f5a4 = add i32 %v0_1000f59a, 12
  %v2_1000f5a4 = inttoptr i32 %v1_1000f5a4 to i32*
  %v3_1000f5a4 = load i32, i32* %v2_1000f5a4, align 4
  store i32 %v3_1000f5a4, i32* %eax.global-to-local, align 4
  %v1_1000f5a7 = add i32 %v0_1000f59a, 8
  %v2_1000f5a7 = inttoptr i32 %v1_1000f5a7 to i32*
  %v3_1000f5a7 = load i32, i32* %v2_1000f5a7, align 4
  store i32 %v3_1000f5a7, i32* @ecx, align 4
  %v3_1000f5aa = add i32 %v3_1000f5a7, %v3_1000f5a4
  %v4_1000f5aa = inttoptr i32 %v3_1000f5aa to i8*
  %v5_1000f5aa = load i8, i8* %v4_1000f5aa, align 1
  %v14_1000f5aa = icmp eq i8 %v5_1000f5aa, 32
  %v1_1000f5ae = icmp eq i1 %v14_1000f5aa, false
  br i1 %v1_1000f5ae, label %dec_label_pc_1000f5ba, label %dec_label_pc_1000f5b0

dec_label_pc_1000f5b0:                            ; preds = %dec_label_pc_1000f5a4, %dec_label_pc_1000f5b0
  %v1_1000f5b1 = phi i32 [ %v1_1000f5b1.pre, %dec_label_pc_1000f5b0 ], [ %v0_1000f59a, %dec_label_pc_1000f5a4 ]
  %v0_1000f5b0 = phi i32 [ %v1_1000f5b4, %dec_label_pc_1000f5b0 ], [ %v3_1000f5a4, %dec_label_pc_1000f5a4 ]
  %v1_1000f5b0 = add i32 %v0_1000f5b0, 1
  store i32 %v1_1000f5b0, i32* %eax.global-to-local, align 4
  %v2_1000f5b1 = add i32 %v1_1000f5b1, 12
  %v3_1000f5b1 = inttoptr i32 %v2_1000f5b1 to i32*
  store i32 %v1_1000f5b0, i32* %v3_1000f5b1, align 4
  %v0_1000f5b4 = load i32, i32* @ecx, align 4
  %v1_1000f5b4 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000f5b4 = add i32 %v1_1000f5b4, %v0_1000f5b4
  %v4_1000f5b4 = inttoptr i32 %v3_1000f5b4 to i8*
  %v5_1000f5b4 = load i8, i8* %v4_1000f5b4, align 1
  %v14_1000f5b4 = icmp eq i8 %v5_1000f5b4, 32
  %v1_1000f5b1.pre = load i32, i32* %esi.global-to-local, align 4
  br i1 %v14_1000f5b4, label %dec_label_pc_1000f5b0, label %dec_label_pc_1000f5ba

dec_label_pc_1000f5ba:                            ; preds = %dec_label_pc_1000f5b0, %dec_label_pc_1000f5a4
  %v0_1000f5bd = phi i32 [ %v3_1000f5a7, %dec_label_pc_1000f5a4 ], [ %v0_1000f5b4, %dec_label_pc_1000f5b0 ]
  %v2_1000f5c3 = phi i32 [ %v0_1000f59a, %dec_label_pc_1000f5a4 ], [ %v1_1000f5b1.pre, %dec_label_pc_1000f5b0 ]
  %v1_1000f5ba = add i32 %v2_1000f5c3, 12
  %v2_1000f5ba = inttoptr i32 %v1_1000f5ba to i32*
  %v3_1000f5ba = load i32, i32* %v2_1000f5ba, align 4
  store i32 %v3_1000f5ba, i32* %eax.global-to-local, align 4
  %v3_1000f5bd = add i32 %v3_1000f5ba, %v0_1000f5bd
  %v4_1000f5bd = inttoptr i32 %v3_1000f5bd to i8*
  %v5_1000f5bd = load i8, i8* %v4_1000f5bd, align 1
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v3_1000f5c3 = add i32 %v2_1000f5c3, 4
  %v4_1000f5c3 = inttoptr i32 %v3_1000f5c3 to i8*
  store i8 %v5_1000f5bd, i8* %v4_1000f5c3, align 1
  %v0_1000f5c6 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f5c6 = add i32 %v0_1000f5c6, 1
  store i32 %v1_1000f5c6, i32* @eax, align 4
  %v0_1000f5c7 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_1000f5c7, i32* %stack_var_-284, align 4
  %v0_1000f5c8 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_1000f5c8, i32* @ecx, align 4
  %v2_1000f5ca = add i32 %v0_1000f5c8, 12
  %v3_1000f5ca = inttoptr i32 %v2_1000f5ca to i32*
  store i32 %v1_1000f5c6, i32* %v3_1000f5ca, align 4
  %v0_1000f5cd = load i32, i32* %stack_var_-284, align 4
  %v1_1000f5cd = call i32 @function_1000f750(i32 %v0_1000f5cd)
  store i32 %v1_1000f5cd, i32* %eax.global-to-local, align 4
  %v4_1000f5d2 = trunc i32 %v1_1000f5cd to i8
  %v5_1000f5d2 = icmp eq i8 %v4_1000f5d2, 0
  %v1_1000f5d4 = icmp eq i1 %v5_1000f5d2, false
  br i1 %v1_1000f5d4, label %dec_label_pc_1000f646, label %dec_label_pc_1000f5d6

dec_label_pc_1000f5d6:                            ; preds = %dec_label_pc_1000f5ba
  %v2_1000f5d6 = load i32, i32* %stack_var_-284, align 4
  store i32 %v2_1000f5d6, i32* @edi, align 4
  %v2_1000f5d7 = load i32, i32* %stack_var_-280, align 4
  store i32 %v2_1000f5d7, i32* @esi, align 4
  %v2_1000f5da = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f5da, i32* @ebp, align 4
  ret i32 %v1_1000f5cd

dec_label_pc_1000f5de:                            ; preds = %dec_label_pc_1000f590
  store i32 %v7_1000f59c, i32* %stack_var_-284, align 4
  %v3_1000f5df = call i32 @function_1000f400(i32 %v7_1000f59c, i32 %v0_1000f59f, i32 %v0_1000f599)
  store i32 %v3_1000f5df, i32* %eax.global-to-local, align 4
  %v4_1000f5e4 = trunc i32 %v3_1000f5df to i8
  %v5_1000f5e4 = icmp eq i8 %v4_1000f5e4, 0
  br i1 %v5_1000f5e4, label %dec_label_pc_1000f673, label %dec_label_pc_1000f5ec

dec_label_pc_1000f5ec:                            ; preds = %dec_label_pc_1000f5de
  %v0_1000f5ec = load i32, i32* @ebx, align 4
  store i32 %v0_1000f5ec, i32* %stack_var_-288, align 4
  %v2_1000f5ef = call i32 @__malloc_crt(i32 16)
  store i32 %v2_1000f5ef, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v2_1000f5f7 = inttoptr i32 %arg1 to i32*
  store i32 %v2_1000f5ef, i32* %v2_1000f5f7, align 4
  %v0_1000f5f9 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f5f9 = inttoptr i32 %v0_1000f5f9 to i32*
  store i32 0, i32* %v1_1000f5f9, align 4
  %v0_1000f5ff = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f5ff = inttoptr i32 %v0_1000f5ff to i32*
  %v2_1000f5ff = load i32, i32* %v1_1000f5ff, align 4
  store i32 %v2_1000f5ff, i32* %eax.global-to-local, align 4
  %v1_1000f601 = add i32 %v2_1000f5ff, 4
  %v2_1000f601 = inttoptr i32 %v1_1000f601 to i32*
  store i32 0, i32* %v2_1000f601, align 4
  %v0_1000f608 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f608 = inttoptr i32 %v0_1000f608 to i32*
  %v2_1000f608 = load i32, i32* %v1_1000f608, align 4
  store i32 %v2_1000f608, i32* @ecx, align 4
  %v1_1000f60a = add i32 %v2_1000f608, 8
  %v2_1000f60a = inttoptr i32 %v1_1000f60a to i32*
  store i32 2, i32* %v2_1000f60a, align 4
  %v0_1000f611 = load i32, i32* @esi, align 4
  %v1_1000f611 = add i32 %v0_1000f611, 16
  %v2_1000f611 = inttoptr i32 %v1_1000f611 to i8*
  %v3_1000f611 = load i8, i8* %v2_1000f611, align 1
  %v4_1000f611 = sext i8 %v3_1000f611 to i32
  store i32 %v4_1000f611, i32* @edx, align 4
  %v1_1000f619 = call i32 @_isdigit(i32 %v4_1000f611)
  store i32 %v1_1000f619, i32* %eax.global-to-local, align 4
  %v1_1000f622 = icmp eq i32 %v1_1000f619, 0
  br i1 %v1_1000f622, label %dec_label_pc_1000f635, label %dec_label_pc_1000f626

dec_label_pc_1000f626:                            ; preds = %dec_label_pc_1000f5ec
  %v2_1000f626 = call i32 @function_100128e0(i32 %v1_1000f611)
  %v1_1000f62e = icmp eq i32 %v2_1000f626, 0
  %v1_1000f630 = icmp eq i1 %v1_1000f62e, false
  %v2_1000f630 = zext i1 %v1_1000f630 to i32
  %v4_1000f630 = and i32 %v2_1000f626, -256
  %v5_1000f630 = or i32 %v2_1000f630, %v4_1000f630
  store i32 %v5_1000f630, i32* %eax.global-to-local, align 4
  %phitmp = zext i1 %v1_1000f630 to i8
  br label %dec_label_pc_1000f640

dec_label_pc_1000f635:                            ; preds = %dec_label_pc_1000f5ec
  %v0_1000f635 = load i32, i32* @esi, align 4
  %v1_1000f635 = add i32 %v0_1000f635, 144
  %v2_1000f635 = inttoptr i32 %v1_1000f635 to i32*
  %v3_1000f635 = load i32, i32* %v2_1000f635, align 4
  store i32 %v3_1000f635, i32* @edx, align 4
  br label %dec_label_pc_1000f640

dec_label_pc_1000f640:                            ; preds = %dec_label_pc_1000f635, %dec_label_pc_1000f626
  %v0_1000f642 = phi i8 [ 0, %dec_label_pc_1000f635 ], [ %phitmp, %dec_label_pc_1000f626 ]
  %v0_1000f640 = load i32, i32* %edi.global-to-local, align 4
  %v1_1000f640 = inttoptr i32 %v0_1000f640 to i32*
  %v2_1000f640 = load i32, i32* %v1_1000f640, align 4
  store i32 %v2_1000f640, i32* @ecx, align 4
  %v3_1000f642 = add i32 %v2_1000f640, 12
  %v4_1000f642 = inttoptr i32 %v3_1000f642 to i8*
  store i8 %v0_1000f642, i8* %v4_1000f642, align 1
  %v2_1000f645 = load i32, i32* %stack_var_-288, align 4
  store i32 %v2_1000f645, i32* @ebx, align 4
  br label %dec_label_pc_1000f646

dec_label_pc_1000f646:                            ; preds = %dec_label_pc_1000f640, %dec_label_pc_1000f5ba
  %v0_1000f646 = load i32, i32* @esi, align 4
  %v1_1000f646 = add i32 %v0_1000f646, 12
  %v2_1000f646 = inttoptr i32 %v1_1000f646 to i32*
  %v3_1000f646 = load i32, i32* %v2_1000f646, align 4
  store i32 %v3_1000f646, i32* %eax.global-to-local, align 4
  %v1_1000f649 = add i32 %v0_1000f646, 8
  %v2_1000f649 = inttoptr i32 %v1_1000f649 to i32*
  %v3_1000f649 = load i32, i32* %v2_1000f649, align 4
  store i32 %v3_1000f649, i32* @ecx, align 4
  %v3_1000f64c = add i32 %v3_1000f649, %v3_1000f646
  %v4_1000f64c = inttoptr i32 %v3_1000f64c to i8*
  %v5_1000f64c = load i8, i8* %v4_1000f64c, align 1
  %v14_1000f64c = icmp eq i8 %v5_1000f64c, 32
  %v1_1000f650 = icmp eq i1 %v14_1000f64c, false
  br i1 %v1_1000f650, label %dec_label_pc_1000f65c, label %dec_label_pc_1000f652

dec_label_pc_1000f652:                            ; preds = %dec_label_pc_1000f646, %dec_label_pc_1000f652
  %v1_1000f653 = phi i32 [ %v1_1000f653.pre, %dec_label_pc_1000f652 ], [ %v0_1000f646, %dec_label_pc_1000f646 ]
  %v0_1000f652 = phi i32 [ %v1_1000f656, %dec_label_pc_1000f652 ], [ %v3_1000f646, %dec_label_pc_1000f646 ]
  %v1_1000f652 = add i32 %v0_1000f652, 1
  store i32 %v1_1000f652, i32* %eax.global-to-local, align 4
  %v2_1000f653 = add i32 %v1_1000f653, 12
  %v3_1000f653 = inttoptr i32 %v2_1000f653 to i32*
  store i32 %v1_1000f652, i32* %v3_1000f653, align 4
  %v0_1000f656 = load i32, i32* @ecx, align 4
  %v1_1000f656 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000f656 = add i32 %v1_1000f656, %v0_1000f656
  %v4_1000f656 = inttoptr i32 %v3_1000f656 to i8*
  %v5_1000f656 = load i8, i8* %v4_1000f656, align 1
  %v14_1000f656 = icmp eq i8 %v5_1000f656, 32
  %v1_1000f653.pre = load i32, i32* @esi, align 4
  br i1 %v14_1000f656, label %dec_label_pc_1000f652, label %dec_label_pc_1000f65c

dec_label_pc_1000f65c:                            ; preds = %dec_label_pc_1000f652, %dec_label_pc_1000f646
  %v0_1000f65f = phi i32 [ %v3_1000f649, %dec_label_pc_1000f646 ], [ %v0_1000f656, %dec_label_pc_1000f652 ]
  %v2_1000f663 = phi i32 [ %v0_1000f646, %dec_label_pc_1000f646 ], [ %v1_1000f653.pre, %dec_label_pc_1000f652 ]
  %v1_1000f65c = add i32 %v2_1000f663, 12
  %v2_1000f65c = inttoptr i32 %v1_1000f65c to i32*
  %v3_1000f65c = load i32, i32* %v2_1000f65c, align 4
  store i32 %v3_1000f65c, i32* %eax.global-to-local, align 4
  %v3_1000f65f = add i32 %v3_1000f65c, %v0_1000f65f
  %v4_1000f65f = inttoptr i32 %v3_1000f65f to i8*
  %v5_1000f65f = load i8, i8* %v4_1000f65f, align 1
  %v6_1000f65f = zext i8 %v5_1000f65f to i32
  %v8_1000f65f = and i32 %v0_1000f65f, -256
  %v9_1000f65f = or i32 %v6_1000f65f, %v8_1000f65f
  store i32 %v9_1000f65f, i32* @ecx, align 4
  %v1_1000f662 = add i32 %v3_1000f65c, 1
  store i32 %v1_1000f662, i32* %eax.global-to-local, align 4
  %v3_1000f663 = add i32 %v2_1000f663, 4
  %v4_1000f663 = inttoptr i32 %v3_1000f663 to i8*
  store i8 %v5_1000f65f, i8* %v4_1000f663, align 1
  %v0_1000f666 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f666 = load i32, i32* @esi, align 4
  %v2_1000f666 = add i32 %v1_1000f666, 12
  %v3_1000f666 = inttoptr i32 %v2_1000f666 to i32*
  store i32 %v0_1000f666, i32* %v3_1000f666, align 4
  %v0_1000f66a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f669

dec_label_pc_1000f669:                            ; preds = %dec_label_pc_1000f673, %dec_label_pc_1000f65c
  %v0_1000f66a = phi i32 [ %v7_1000f673, %dec_label_pc_1000f673 ], [ %v0_1000f66a.pre, %dec_label_pc_1000f65c ]
  %v2_1000f669 = load i32, i32* %stack_var_-284, align 4
  store i32 %v2_1000f669, i32* @edi, align 4
  %v1_1000f66a = and i32 %v0_1000f66a, -256
  %v2_1000f66a = or i32 %v1_1000f66a, 1
  store i32 %v2_1000f66a, i32* %eax.global-to-local, align 4
  %v2_1000f66c = load i32, i32* %stack_var_-280, align 4
  store i32 %v2_1000f66c, i32* @esi, align 4
  %v2_1000f66f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f66f, i32* @ebp, align 4
  ret i32 %v2_1000f66a

dec_label_pc_1000f673:                            ; preds = %dec_label_pc_1000f5de
  %v0_1000f673 = load i32, i32* @esi, align 4
  %v1_1000f673 = add i32 %v0_1000f673, 4
  %v2_1000f673 = inttoptr i32 %v1_1000f673 to i8*
  %v3_1000f673 = load i8, i8* %v2_1000f673, align 1
  %v4_1000f673 = zext i8 %v3_1000f673 to i32
  %v6_1000f673 = and i32 %v3_1000f5df, -256
  %v7_1000f673 = or i32 %v4_1000f673, %v6_1000f673
  store i32 %v7_1000f673, i32* %eax.global-to-local, align 4
  %v11_1000f676 = icmp eq i8 %v3_1000f673, 33
  br i1 %v11_1000f676, label %dec_label_pc_1000f669, label %dec_label_pc_1000f67a

dec_label_pc_1000f67a:                            ; preds = %dec_label_pc_1000f673
  %v1_1000f67a = add i32 %v0_1000f673, 148
  %v2_1000f67a = inttoptr i32 %v1_1000f67a to i32*
  %v3_1000f67a = load i32, i32* %v2_1000f67a, align 4
  %v10_1000f67a = icmp eq i32 %v3_1000f67a, 0
  br i1 %v10_1000f67a, label %dec_label_pc_1000f6a7, label %dec_label_pc_1000f683

dec_label_pc_1000f683:                            ; preds = %dec_label_pc_1000f67a
  store i32 %v7_1000f673, i32* %edx.global-to-local, align 4
  store i32 %v7_1000f673, i32* %stack_var_-288, align 4
  store i32 %v16_1000f593, i32* %eax.global-to-local, align 4
  %v5_1000f693 = call i32 @function_10002c60(i32* nonnull %stack_var_-272, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @global_var_100241b8.492, i32 0, i32 0))
  store i32 %v5_1000f693, i32* %eax.global-to-local, align 4
  %v0_1000f698 = load i32, i32* @esi, align 4
  %v1_1000f698 = add i32 %v0_1000f698, 148
  %v2_1000f698 = inttoptr i32 %v1_1000f698 to i32*
  %v3_1000f698 = load i32, i32* %v2_1000f698, align 4
  store i32 %v3_1000f698, i32* @ecx, align 4
  %v1_1000f69e = add i32 %v5_1000f693, 5
  store i32 %v1_1000f69e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f6a7

dec_label_pc_1000f6a7:                            ; preds = %dec_label_pc_1000f683, %dec_label_pc_1000f67a
  %v11_1000f6a8 = phi i32 [ %v1_1000f69e, %dec_label_pc_1000f683 ], [ %v7_1000f673, %dec_label_pc_1000f67a ]
  %v2_1000f6a7 = load i32, i32* %stack_var_-284, align 4
  store i32 %v2_1000f6a7, i32* @edi, align 4
  %v12_1000f6a8 = and i32 %v11_1000f6a8, -256
  store i32 %v12_1000f6a8, i32* %eax.global-to-local, align 4
  %v2_1000f6aa = load i32, i32* %stack_var_-280, align 4
  store i32 %v2_1000f6aa, i32* @esi, align 4
  %v2_1000f6ad = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f6ad, i32* @ebp, align 4
  ret i32 %v12_1000f6a8
}

define i32 @function_1000f6c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f6c0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_1000f6c3 = load i32, i32* @esi, align 4
  %v0_1000f6c4 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v0_1000f6c9 = load i32, i32* @ecx, align 4
  store i32 %v0_1000f6c9, i32* @esi, align 4
  %v1_1000f6cb = call i32 @function_1000f590(i32 %arg1)
  store i32 %v1_1000f6cb, i32* %eax.global-to-local, align 4
  %v4_1000f6d0 = trunc i32 %v1_1000f6cb to i8
  %v5_1000f6d0 = icmp eq i8 %v4_1000f6d0, 0
  %v1_1000f6d2 = icmp eq i1 %v5_1000f6d0, false
  br i1 %v1_1000f6d2, label %dec_label_pc_1000f6da, label %dec_label_pc_1000f6d4

dec_label_pc_1000f6d4:                            ; preds = %dec_label_pc_1000f6c0
  %v2_1000f6d4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1000f6d4, i32* @edi, align 4
  store i32 %v0_1000f6c4, i32* @esi, align 4
  store i32 %v0_1000f6c3, i32* @ebp, align 4
  ret i32 %v1_1000f6cb

dec_label_pc_1000f6da:                            ; preds = %dec_label_pc_1000f6c0
  br label %dec_label_pc_1000f6e0

dec_label_pc_1000f6e0:                            ; preds = %dec_label_pc_1000f71e, %dec_label_pc_1000f6da
  %v0_1000f745 = phi i32 [ %v1_1000f733, %dec_label_pc_1000f71e ], [ %v1_1000f6cb, %dec_label_pc_1000f6da ]
  %v0_1000f6e0 = load i32, i32* @esi, align 4
  %v1_1000f6e0 = add i32 %v0_1000f6e0, 4
  %v2_1000f6e0 = inttoptr i32 %v1_1000f6e0 to i8*
  %v3_1000f6e0 = load i8, i8* %v2_1000f6e0, align 1
  %v13_1000f6e0 = icmp eq i8 %v3_1000f6e0, 33
  %v1_1000f6e4 = icmp eq i1 %v13_1000f6e0, false
  br i1 %v1_1000f6e4, label %dec_label_pc_1000f743, label %dec_label_pc_1000f6e6

dec_label_pc_1000f6e6:                            ; preds = %dec_label_pc_1000f6e0
  %v0_1000f6e6 = load i32, i32* @edi, align 4
  %v1_1000f6e6 = inttoptr i32 %v0_1000f6e6 to i32*
  %v2_1000f6e6 = load i32, i32* %v1_1000f6e6, align 4
  store i32 %v2_1000f6e6, i32* @ebx, align 4
  %v0_1000f6e8 = load i32, i32* @esp, align 4
  %v1_1000f6e8 = add i32 %v0_1000f6e8, -4
  %v2_1000f6e8 = inttoptr i32 %v1_1000f6e8 to i32*
  store i32 16, i32* %v2_1000f6e8, align 4
  %v1_1000f6ea = call i32 @__malloc_crt(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f6ea, i32* %eax.global-to-local, align 4
  %v1_1000f6ef = load i32, i32* @edi, align 4
  %v2_1000f6ef = inttoptr i32 %v1_1000f6ef to i32*
  store i32 %v1_1000f6ea, i32* %v2_1000f6ef, align 4
  %v0_1000f6f1 = load i32, i32* @ebx, align 4
  %v1_1000f6f1 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f6f1 = inttoptr i32 %v1_1000f6f1 to i32*
  store i32 %v0_1000f6f1, i32* %v2_1000f6f1, align 4
  %v0_1000f6f3 = load i32, i32* @edi, align 4
  %v1_1000f6f3 = inttoptr i32 %v0_1000f6f3 to i32*
  %v2_1000f6f3 = load i32, i32* %v1_1000f6f3, align 4
  store i32 %v2_1000f6f3, i32* %eax.global-to-local, align 4
  %v1_1000f6f5 = add i32 %v2_1000f6f3, 4
  %v2_1000f6f5 = inttoptr i32 %v1_1000f6f5 to i32*
  store i32 0, i32* %v2_1000f6f5, align 4
  %v0_1000f6fc = load i32, i32* @edi, align 4
  %v1_1000f6fc = inttoptr i32 %v0_1000f6fc to i32*
  %v2_1000f6fc = load i32, i32* %v1_1000f6fc, align 4
  store i32 %v2_1000f6fc, i32* @ecx, align 4
  %v1_1000f6fe = add i32 %v2_1000f6fc, 8
  %v2_1000f6fe = inttoptr i32 %v1_1000f6fe to i32*
  store i32 1, i32* %v2_1000f6fe, align 4
  %v0_1000f705 = load i32, i32* @esi, align 4
  %v1_1000f705 = add i32 %v0_1000f705, 12
  %v2_1000f705 = inttoptr i32 %v1_1000f705 to i32*
  %v3_1000f705 = load i32, i32* %v2_1000f705, align 4
  store i32 %v3_1000f705, i32* %eax.global-to-local, align 4
  %v1_1000f708 = add i32 %v0_1000f705, 8
  %v2_1000f708 = inttoptr i32 %v1_1000f708 to i32*
  %v3_1000f708 = load i32, i32* %v2_1000f708, align 4
  store i32 %v3_1000f708, i32* @ecx, align 4
  %v3_1000f70e = add i32 %v3_1000f708, %v3_1000f705
  %v4_1000f70e = inttoptr i32 %v3_1000f70e to i8*
  %v5_1000f70e = load i8, i8* %v4_1000f70e, align 1
  %v14_1000f70e = icmp eq i8 %v5_1000f70e, 32
  %v1_1000f712 = icmp eq i1 %v14_1000f70e, false
  br i1 %v1_1000f712, label %dec_label_pc_1000f71e, label %dec_label_pc_1000f714

dec_label_pc_1000f714:                            ; preds = %dec_label_pc_1000f6e6, %dec_label_pc_1000f714
  %v1_1000f715 = phi i32 [ %v1_1000f715.pre, %dec_label_pc_1000f714 ], [ %v0_1000f705, %dec_label_pc_1000f6e6 ]
  %v0_1000f714 = phi i32 [ %v1_1000f718, %dec_label_pc_1000f714 ], [ %v3_1000f705, %dec_label_pc_1000f6e6 ]
  %v1_1000f714 = add i32 %v0_1000f714, 1
  store i32 %v1_1000f714, i32* %eax.global-to-local, align 4
  %v2_1000f715 = add i32 %v1_1000f715, 12
  %v3_1000f715 = inttoptr i32 %v2_1000f715 to i32*
  store i32 %v1_1000f714, i32* %v3_1000f715, align 4
  %v0_1000f718 = load i32, i32* @ecx, align 4
  %v1_1000f718 = load i32, i32* %eax.global-to-local, align 4
  %v3_1000f718 = add i32 %v1_1000f718, %v0_1000f718
  %v4_1000f718 = inttoptr i32 %v3_1000f718 to i8*
  %v5_1000f718 = load i8, i8* %v4_1000f718, align 1
  %v14_1000f718 = icmp eq i8 %v5_1000f718, 32
  %v1_1000f715.pre = load i32, i32* @esi, align 4
  br i1 %v14_1000f718, label %dec_label_pc_1000f714, label %dec_label_pc_1000f71e

dec_label_pc_1000f71e:                            ; preds = %dec_label_pc_1000f714, %dec_label_pc_1000f6e6
  %v0_1000f721 = phi i32 [ %v3_1000f708, %dec_label_pc_1000f6e6 ], [ %v0_1000f718, %dec_label_pc_1000f714 ]
  %v2_1000f725 = phi i32 [ %v0_1000f705, %dec_label_pc_1000f6e6 ], [ %v1_1000f715.pre, %dec_label_pc_1000f714 ]
  %v1_1000f71e = add i32 %v2_1000f725, 12
  %v2_1000f71e = inttoptr i32 %v1_1000f71e to i32*
  %v3_1000f71e = load i32, i32* %v2_1000f71e, align 4
  store i32 %v3_1000f71e, i32* %eax.global-to-local, align 4
  %v3_1000f721 = add i32 %v3_1000f71e, %v0_1000f721
  %v4_1000f721 = inttoptr i32 %v3_1000f721 to i8*
  %v5_1000f721 = load i8, i8* %v4_1000f721, align 1
  %v6_1000f721 = zext i8 %v5_1000f721 to i32
  %v8_1000f721 = and i32 %v0_1000f721, -256
  %v9_1000f721 = or i32 %v6_1000f721, %v8_1000f721
  store i32 %v9_1000f721, i32* @ecx, align 4
  %v1_1000f724 = add i32 %v3_1000f71e, 1
  store i32 %v1_1000f724, i32* @eax, align 4
  %v3_1000f725 = add i32 %v2_1000f725, 4
  %v4_1000f725 = inttoptr i32 %v3_1000f725 to i8*
  store i8 %v5_1000f721, i8* %v4_1000f725, align 1
  %v0_1000f728 = load i32, i32* @eax, align 4
  %v1_1000f728 = load i32, i32* @esi, align 4
  %v2_1000f728 = add i32 %v1_1000f728, 12
  %v3_1000f728 = inttoptr i32 %v2_1000f728 to i32*
  store i32 %v0_1000f728, i32* %v3_1000f728, align 4
  %v0_1000f72b = load i32, i32* @edi, align 4
  %v1_1000f72b = inttoptr i32 %v0_1000f72b to i32*
  %v2_1000f72b = load i32, i32* %v1_1000f72b, align 4
  %v1_1000f72d = add i32 %v2_1000f72b, 4
  %v1_1000f730 = load i32, i32* @esp, align 4
  %v2_1000f730 = add i32 %v1_1000f730, -4
  %v3_1000f730 = inttoptr i32 %v2_1000f730 to i32*
  store i32 %v1_1000f72d, i32* %v3_1000f730, align 4
  %v0_1000f731 = load i32, i32* @esi, align 4
  store i32 %v0_1000f731, i32* @ecx, align 4
  %v1_1000f733 = call i32 @function_1000f590(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f733, i32* %eax.global-to-local, align 4
  %v4_1000f738 = trunc i32 %v1_1000f733 to i8
  %v5_1000f738 = icmp eq i8 %v4_1000f738, 0
  %v1_1000f73a = icmp eq i1 %v5_1000f738, false
  br i1 %v1_1000f73a, label %dec_label_pc_1000f6e0, label %dec_label_pc_1000f73c

dec_label_pc_1000f73c:                            ; preds = %dec_label_pc_1000f71e
  %v0_1000f73c = load i32, i32* @esp, align 4
  %v1_1000f73c = inttoptr i32 %v0_1000f73c to i32*
  %v2_1000f73c = load i32, i32* %v1_1000f73c, align 4
  store i32 %v2_1000f73c, i32* @ebx, align 4
  %v3_1000f73c = add i32 %v0_1000f73c, 4
  %v1_1000f73d = inttoptr i32 %v3_1000f73c to i32*
  %v2_1000f73d = load i32, i32* %v1_1000f73d, align 4
  store i32 %v2_1000f73d, i32* @edi, align 4
  %v3_1000f73d = add i32 %v0_1000f73c, 8
  %v1_1000f73e = inttoptr i32 %v3_1000f73d to i32*
  %v2_1000f73e = load i32, i32* %v1_1000f73e, align 4
  store i32 %v2_1000f73e, i32* @esi, align 4
  %v3_1000f73e = add i32 %v0_1000f73c, 12
  %v1_1000f73f = inttoptr i32 %v3_1000f73e to i32*
  %v2_1000f73f = load i32, i32* %v1_1000f73f, align 4
  store i32 %v2_1000f73f, i32* @ebp, align 4
  ret i32 %v1_1000f733

dec_label_pc_1000f743:                            ; preds = %dec_label_pc_1000f6e0
  %v0_1000f743 = load i32, i32* @esp, align 4
  %v1_1000f743 = inttoptr i32 %v0_1000f743 to i32*
  %v2_1000f743 = load i32, i32* %v1_1000f743, align 4
  store i32 %v2_1000f743, i32* @ebx, align 4
  %v3_1000f743 = add i32 %v0_1000f743, 4
  %v1_1000f744 = inttoptr i32 %v3_1000f743 to i32*
  %v2_1000f744 = load i32, i32* %v1_1000f744, align 4
  store i32 %v2_1000f744, i32* @edi, align 4
  %v3_1000f744 = add i32 %v0_1000f743, 8
  %v1_1000f745 = and i32 %v0_1000f745, -256
  %v2_1000f745 = or i32 %v1_1000f745, 1
  store i32 %v2_1000f745, i32* %eax.global-to-local, align 4
  %v1_1000f747 = inttoptr i32 %v3_1000f744 to i32*
  %v2_1000f747 = load i32, i32* %v1_1000f747, align 4
  store i32 %v2_1000f747, i32* @esi, align 4
  %v3_1000f747 = add i32 %v0_1000f743, 12
  %v1_1000f748 = inttoptr i32 %v3_1000f747 to i32*
  %v2_1000f748 = load i32, i32* %v1_1000f748, align 4
  store i32 %v2_1000f748, i32* @ebp, align 4
  ret i32 %v2_1000f745
}

define i32 @function_1000f750(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000f750:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000f750 = load i32, i32* @ebp, align 4
  store i32 %v0_1000f750, i32* %stack_var_-4, align 4
  %v4_1000f750 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_1000f750, i32* @ebp, align 4
  %v16_1000f753 = ptrtoint i32* %stack_var_-272 to i32
  %v0_1000f75a = load i32, i32* @edi, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-284, align 4
  %v0_1000f75f = load i32, i32* @ecx, align 4
  store i32 %v0_1000f75f, i32* @esi, align 4
  %v1_1000f761 = call i32 @function_1000f6c0(i32 %arg1)
  store i32 %v1_1000f761, i32* %eax.global-to-local, align 4
  %v4_1000f766 = trunc i32 %v1_1000f761 to i8
  %v5_1000f766 = icmp eq i8 %v4_1000f766, 0
  %v1_1000f768 = icmp eq i1 %v5_1000f766, false
  br i1 %v1_1000f768, label %dec_label_pc_1000f772, label %dec_label_pc_1000f76a

dec_label_pc_1000f76a:                            ; preds = %dec_label_pc_1000f750
  %v2_1000f76a = load i32, i32* %stack_var_-284, align 4
  store i32 %v2_1000f76a, i32* @edi, align 4
  store i32 %v0_1000f75a, i32* @esi, align 4
  %v2_1000f76e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f76e, i32* @ebp, align 4
  ret i32 %v1_1000f761

dec_label_pc_1000f772:                            ; preds = %dec_label_pc_1000f750
  br label %dec_label_pc_1000f773

dec_label_pc_1000f773:                            ; preds = %dec_label_pc_1000f7de.dec_label_pc_1000f773_crit_edge, %dec_label_pc_1000f772
  %v0_1000f84713 = phi i32 [ %v1_1000f7f3, %dec_label_pc_1000f7de.dec_label_pc_1000f773_crit_edge ], [ %v1_1000f761, %dec_label_pc_1000f772 ]
  %v5_1000f773 = load i32, i32* @ebx, align 4
  %v0_1000f773 = load i32, i32* @esi, align 4
  %v1_1000f773 = add i32 %v0_1000f773, 4
  %v2_1000f773 = inttoptr i32 %v1_1000f773 to i8*
  %v3_1000f773 = load i8, i8* %v2_1000f773, align 1
  %v4_1000f773 = zext i8 %v3_1000f773 to i32
  %v6_1000f773 = and i32 %v5_1000f773, -256
  %v7_1000f773 = or i32 %v4_1000f773, %v6_1000f773
  store i32 %v7_1000f773, i32* @ebx, align 4
  %v11_1000f776 = icmp eq i8 %v3_1000f773, 124
  br i1 %v11_1000f776, label %dec_label_pc_1000f784, label %dec_label_pc_1000f77b

dec_label_pc_1000f77b:                            ; preds = %dec_label_pc_1000f773
  %v11_1000f77b = icmp eq i8 %v3_1000f773, 38
  %v1_1000f77e = icmp eq i1 %v11_1000f77b, false
  br i1 %v1_1000f77e, label %dec_label_pc_1000f845, label %dec_label_pc_1000f784

dec_label_pc_1000f784:                            ; preds = %dec_label_pc_1000f77b, %dec_label_pc_1000f773
  %v1_1000f784 = add i32 %v0_1000f773, 12
  %v2_1000f784 = inttoptr i32 %v1_1000f784 to i32*
  %v3_1000f784 = load i32, i32* %v2_1000f784, align 4
  store i32 %v3_1000f784, i32* %eax.global-to-local, align 4
  %v1_1000f787 = add i32 %v0_1000f773, 8
  %v2_1000f787 = inttoptr i32 %v1_1000f787 to i32*
  %v3_1000f787 = load i32, i32* %v2_1000f787, align 4
  store i32 %v3_1000f787, i32* @ecx, align 4
  %v3_1000f78a = add i32 %v3_1000f787, %v3_1000f784
  %v4_1000f78a = inttoptr i32 %v3_1000f78a to i8*
  %v5_1000f78a = load i8, i8* %v4_1000f78a, align 1
  %v6_1000f78a = zext i8 %v5_1000f78a to i32
  %v8_1000f78a = and i32 %v3_1000f787, -256
  %v9_1000f78a = or i32 %v6_1000f78a, %v8_1000f78a
  store i32 %v9_1000f78a, i32* @ecx, align 4
  %v2_1000f78d = load i32, i32* @edx, align 4
  %v1_1000f78f = add i32 %v3_1000f784, 1
  store i32 %v1_1000f78f, i32* %eax.global-to-local, align 4
  %v4_1000f790214 = and i8 %v5_1000f78a, %v3_1000f773
  %v4_1000f7902 = zext i8 %v4_1000f790214 to i32
  %v12_1000f790 = and i32 %v2_1000f78d, -256
  %v13_1000f790 = or i32 %v12_1000f790, %v4_1000f7902
  store i32 %v13_1000f790, i32* @edx, align 4
  store i32 %v1_1000f78f, i32* %v2_1000f784, align 4
  %v0_1000f795 = load i32, i32* @edx, align 4
  %v1_1000f795 = trunc i32 %v0_1000f795 to i8
  %v2_1000f795 = load i32, i32* @ebx, align 4
  %v3_1000f795 = trunc i32 %v2_1000f795 to i8
  %v14_1000f795 = icmp eq i8 %v1_1000f795, %v3_1000f795
  %v1_1000f797 = icmp eq i1 %v14_1000f795, false
  br i1 %v1_1000f797, label %dec_label_pc_1000f809, label %dec_label_pc_1000f799

dec_label_pc_1000f799:                            ; preds = %dec_label_pc_1000f784
  %v0_1000f799 = load i32, i32* @edi, align 4
  %v1_1000f799 = inttoptr i32 %v0_1000f799 to i32*
  %v2_1000f799 = load i32, i32* %v1_1000f799, align 4
  store i32 %v2_1000f799, i32* %eax.global-to-local, align 4
  %v0_1000f79b = load i32, i32* @esp, align 4
  %v1_1000f79b = add i32 %v0_1000f79b, -4
  %v2_1000f79b = inttoptr i32 %v1_1000f79b to i32*
  store i32 16, i32* %v2_1000f79b, align 4
  %v0_1000f79d = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f7a0 = call i32 @__malloc_crt(i32 %v0_1000f79d)
  store i32 %v1_1000f7a0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f79d, i32* @ecx, align 4
  %v1_1000f7a8 = load i32, i32* @edi, align 4
  %v2_1000f7a8 = inttoptr i32 %v1_1000f7a8 to i32*
  store i32 %v1_1000f7a0, i32* %v2_1000f7a8, align 4
  %v0_1000f7aa = load i32, i32* @ecx, align 4
  %v1_1000f7aa = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f7aa = inttoptr i32 %v1_1000f7aa to i32*
  store i32 %v0_1000f7aa, i32* %v2_1000f7aa, align 4
  %v0_1000f7ac = load i32, i32* @edi, align 4
  %v1_1000f7ac = inttoptr i32 %v0_1000f7ac to i32*
  %v2_1000f7ac = load i32, i32* %v1_1000f7ac, align 4
  store i32 %v2_1000f7ac, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_1000f7b0 = add i32 %v2_1000f7ac, 4
  %v3_1000f7b0 = inttoptr i32 %v2_1000f7b0 to i32*
  store i32 0, i32* %v3_1000f7b0, align 4
  %v0_1000f7b3 = load i32, i32* @edi, align 4
  %v1_1000f7b3 = inttoptr i32 %v0_1000f7b3 to i32*
  %v2_1000f7b3 = load i32, i32* %v1_1000f7b3, align 4
  store i32 %v2_1000f7b3, i32* @ecx, align 4
  %v0_1000f7b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_1000f7b5 = add i32 %v2_1000f7b3, 8
  %v3_1000f7b5 = inttoptr i32 %v2_1000f7b5 to i32*
  store i32 %v0_1000f7b5, i32* %v3_1000f7b5, align 4
  %v0_1000f7b8 = load i32, i32* @edi, align 4
  %v1_1000f7b8 = inttoptr i32 %v0_1000f7b8 to i32*
  %v2_1000f7b8 = load i32, i32* %v1_1000f7b8, align 4
  store i32 %v2_1000f7b8, i32* %edx.global-to-local, align 4
  %v0_1000f7ba = load i32, i32* @ebx, align 4
  %v1_1000f7ba = trunc i32 %v0_1000f7ba to i8
  %v3_1000f7ba = add i32 %v2_1000f7b8, 12
  %v4_1000f7ba = inttoptr i32 %v3_1000f7ba to i8*
  store i8 %v1_1000f7ba, i8* %v4_1000f7ba, align 1
  %v0_1000f7bd = load i32, i32* @esi, align 4
  %v1_1000f7bd = add i32 %v0_1000f7bd, 12
  %v2_1000f7bd = inttoptr i32 %v1_1000f7bd to i32*
  %v3_1000f7bd = load i32, i32* %v2_1000f7bd, align 4
  store i32 %v3_1000f7bd, i32* %eax.global-to-local, align 4
  %v1_1000f7c0 = add i32 %v0_1000f7bd, 8
  %v2_1000f7c0 = inttoptr i32 %v1_1000f7c0 to i32*
  %v3_1000f7c0 = load i32, i32* %v2_1000f7c0, align 4
  store i32 %v3_1000f7c0, i32* @ecx, align 4
  %v3_1000f7c6 = add i32 %v3_1000f7c0, %v3_1000f7bd
  %v4_1000f7c6 = inttoptr i32 %v3_1000f7c6 to i8*
  %v5_1000f7c6 = load i8, i8* %v4_1000f7c6, align 1
  %v14_1000f7c6 = icmp eq i8 %v5_1000f7c6, 32
  %v1_1000f7ca = icmp eq i1 %v14_1000f7c6, false
  br i1 %v1_1000f7ca, label %dec_label_pc_1000f7de, label %dec_label_pc_1000f7d0

dec_label_pc_1000f7d0:                            ; preds = %dec_label_pc_1000f799, %dec_label_pc_1000f7d0.dec_label_pc_1000f7d0_crit_edge
  %v1_1000f7d5 = phi i32 [ %v1_1000f7d5.pre, %dec_label_pc_1000f7d0.dec_label_pc_1000f7d0_crit_edge ], [ %v0_1000f7bd, %dec_label_pc_1000f799 ]
  %v0_1000f7d1 = phi i32 [ %v0_1000f7d1.pre, %dec_label_pc_1000f7d0.dec_label_pc_1000f7d0_crit_edge ], [ %v3_1000f7c0, %dec_label_pc_1000f799 ]
  %v0_1000f7d0 = phi i32 [ %v0_1000f7d0.pre, %dec_label_pc_1000f7d0.dec_label_pc_1000f7d0_crit_edge ], [ %v3_1000f7bd, %dec_label_pc_1000f799 ]
  %v1_1000f7d0 = add i32 %v0_1000f7d0, 1
  store i32 %v1_1000f7d0, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f7d1, i32* %edx.global-to-local, align 4
  store i32 %v1_1000f7d0, i32* @ebx, align 4
  %v2_1000f7d5 = add i32 %v1_1000f7d5, 12
  %v3_1000f7d5 = inttoptr i32 %v2_1000f7d5 to i32*
  store i32 %v1_1000f7d0, i32* %v3_1000f7d5, align 4
  %v0_1000f7d8 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000f7d8 = load i32, i32* @ebx, align 4
  %v3_1000f7d8 = add i32 %v1_1000f7d8, %v0_1000f7d8
  %v4_1000f7d8 = inttoptr i32 %v3_1000f7d8 to i8*
  %v5_1000f7d8 = load i8, i8* %v4_1000f7d8, align 1
  %v14_1000f7d8 = icmp eq i8 %v5_1000f7d8, 32
  br i1 %v14_1000f7d8, label %dec_label_pc_1000f7d0.dec_label_pc_1000f7d0_crit_edge, label %dec_label_pc_1000f7de.loopexit

dec_label_pc_1000f7d0.dec_label_pc_1000f7d0_crit_edge: ; preds = %dec_label_pc_1000f7d0
  %v0_1000f7d0.pre = load i32, i32* %eax.global-to-local, align 4
  %v0_1000f7d1.pre = load i32, i32* @ecx, align 4
  %v1_1000f7d5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000f7d0

dec_label_pc_1000f7de.loopexit:                   ; preds = %dec_label_pc_1000f7d0
  %v0_1000f7de.pre = load i32, i32* @esi, align 4
  %v0_1000f7e1.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1000f7de

dec_label_pc_1000f7de:                            ; preds = %dec_label_pc_1000f7de.loopexit, %dec_label_pc_1000f799
  %v0_1000f7e1 = phi i32 [ %v0_1000f7e1.pre, %dec_label_pc_1000f7de.loopexit ], [ %v3_1000f7c0, %dec_label_pc_1000f799 ]
  %v2_1000f7e5 = phi i32 [ %v0_1000f7de.pre, %dec_label_pc_1000f7de.loopexit ], [ %v0_1000f7bd, %dec_label_pc_1000f799 ]
  %v1_1000f7de = add i32 %v2_1000f7e5, 12
  %v2_1000f7de = inttoptr i32 %v1_1000f7de to i32*
  %v3_1000f7de = load i32, i32* %v2_1000f7de, align 4
  store i32 %v3_1000f7de, i32* %eax.global-to-local, align 4
  %v3_1000f7e1 = add i32 %v3_1000f7de, %v0_1000f7e1
  %v4_1000f7e1 = inttoptr i32 %v3_1000f7e1 to i8*
  %v5_1000f7e1 = load i8, i8* %v4_1000f7e1, align 1
  %v6_1000f7e1 = zext i8 %v5_1000f7e1 to i32
  %v8_1000f7e1 = and i32 %v0_1000f7e1, -256
  %v9_1000f7e1 = or i32 %v6_1000f7e1, %v8_1000f7e1
  store i32 %v9_1000f7e1, i32* @ecx, align 4
  %v1_1000f7e4 = add i32 %v3_1000f7de, 1
  store i32 %v1_1000f7e4, i32* @eax, align 4
  %v3_1000f7e5 = add i32 %v2_1000f7e5, 4
  %v4_1000f7e5 = inttoptr i32 %v3_1000f7e5 to i8*
  store i8 %v5_1000f7e1, i8* %v4_1000f7e5, align 1
  %v0_1000f7e8 = load i32, i32* @eax, align 4
  %v1_1000f7e8 = load i32, i32* @esi, align 4
  %v2_1000f7e8 = add i32 %v1_1000f7e8, 12
  %v3_1000f7e8 = inttoptr i32 %v2_1000f7e8 to i32*
  store i32 %v0_1000f7e8, i32* %v3_1000f7e8, align 4
  %v0_1000f7eb = load i32, i32* @edi, align 4
  %v1_1000f7eb = inttoptr i32 %v0_1000f7eb to i32*
  %v2_1000f7eb = load i32, i32* %v1_1000f7eb, align 4
  %v1_1000f7ed = add i32 %v2_1000f7eb, 4
  store i32 %v1_1000f7ed, i32* %edx.global-to-local, align 4
  %v1_1000f7f0 = load i32, i32* @esp, align 4
  %v2_1000f7f0 = add i32 %v1_1000f7f0, -4
  %v3_1000f7f0 = inttoptr i32 %v2_1000f7f0 to i32*
  store i32 %v1_1000f7ed, i32* %v3_1000f7f0, align 4
  %v0_1000f7f1 = load i32, i32* @esi, align 4
  store i32 %v0_1000f7f1, i32* @ecx, align 4
  %v1_1000f7f3 = call i32 @function_1000f6c0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f7f3, i32* %eax.global-to-local, align 4
  %v4_1000f7f8 = trunc i32 %v1_1000f7f3 to i8
  %v5_1000f7f8 = icmp eq i8 %v4_1000f7f8, 0
  %v1_1000f7fa = icmp eq i1 %v5_1000f7f8, false
  br i1 %v1_1000f7fa, label %dec_label_pc_1000f7de.dec_label_pc_1000f773_crit_edge, label %dec_label_pc_1000f800

dec_label_pc_1000f7de.dec_label_pc_1000f773_crit_edge: ; preds = %dec_label_pc_1000f7de
  br label %dec_label_pc_1000f773

dec_label_pc_1000f800:                            ; preds = %dec_label_pc_1000f7de
  %v0_1000f800 = load i32, i32* @esp, align 4
  %v1_1000f800 = inttoptr i32 %v0_1000f800 to i32*
  %v2_1000f800 = load i32, i32* %v1_1000f800, align 4
  store i32 %v2_1000f800, i32* @ebx, align 4
  %v3_1000f800 = add i32 %v0_1000f800, 4
  %v1_1000f801 = inttoptr i32 %v3_1000f800 to i32*
  %v2_1000f801 = load i32, i32* %v1_1000f801, align 4
  store i32 %v2_1000f801, i32* @edi, align 4
  %v3_1000f801 = add i32 %v0_1000f800, 8
  %v1_1000f802 = inttoptr i32 %v3_1000f801 to i32*
  %v2_1000f802 = load i32, i32* %v1_1000f802, align 4
  store i32 %v2_1000f802, i32* @esi, align 4
  %v2_1000f805 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f805, i32* @ebp, align 4
  ret i32 %v1_1000f7f3

dec_label_pc_1000f809:                            ; preds = %dec_label_pc_1000f784
  %v0_1000f809 = load i32, i32* @esi, align 4
  %v1_1000f809 = add i32 %v0_1000f809, 148
  %v2_1000f809 = inttoptr i32 %v1_1000f809 to i32*
  %v3_1000f809 = load i32, i32* %v2_1000f809, align 4
  %v10_1000f809 = icmp eq i32 %v3_1000f809, 0
  br i1 %v10_1000f809, label %dec_label_pc_1000f809.dec_label_pc_1000f845_crit_edge, label %dec_label_pc_1000f812

dec_label_pc_1000f809.dec_label_pc_1000f845_crit_edge: ; preds = %dec_label_pc_1000f809
  %v0_1000f847.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f845

dec_label_pc_1000f812:                            ; preds = %dec_label_pc_1000f809
  %v0_1000f812 = load i32, i32* @ecx, align 4
  store i32 %v0_1000f812, i32* %eax.global-to-local, align 4
  %v1_1000f815 = load i32, i32* @esp, align 4
  %v2_1000f815 = add i32 %v1_1000f815, -4
  %v3_1000f815 = inttoptr i32 %v2_1000f815 to i32*
  store i32 %v0_1000f812, i32* %v3_1000f815, align 4
  %v0_1000f816 = load i32, i32* @ebx, align 4
  store i32 %v0_1000f816, i32* @ecx, align 4
  %v2_1000f819 = add i32 %v1_1000f815, -8
  %v3_1000f819 = inttoptr i32 %v2_1000f819 to i32*
  store i32 %v0_1000f816, i32* %v3_1000f819, align 4
  store i32 %v16_1000f753, i32* %edx.global-to-local, align 4
  %v1_1000f820 = add i32 %v1_1000f815, -12
  %v2_1000f820 = inttoptr i32 %v1_1000f820 to i32*
  store i32 ptrtoint ([59 x i8]* @global_var_1002417c.493 to i32), i32* %v2_1000f820, align 4
  %v2_1000f825 = add i32 %v1_1000f815, -16
  %v3_1000f825 = inttoptr i32 %v2_1000f825 to i32*
  store i32 %v16_1000f753, i32* %v3_1000f825, align 4
  %v1_1000f826 = call i32 @function_10002c60(i32* nonnull @5, i8* bitcast (i32* @5 to i8*))
  %v1_1000f82b = add i32 %v1_1000f826, 5
  store i32 %v1_1000f82b, i32* %eax.global-to-local, align 4
  %v1_1000f82e = load i32, i32* @esp, align 4
  %v2_1000f82e = add i32 %v1_1000f82e, -4
  %v3_1000f82e = inttoptr i32 %v2_1000f82e to i32*
  store i32 %v1_1000f82b, i32* %v3_1000f82e, align 4
  %v0_1000f82f = load i32, i32* @esi, align 4
  %v1_1000f82f = add i32 %v0_1000f82f, 148
  %v2_1000f82f = inttoptr i32 %v1_1000f82f to i32*
  %v3_1000f82f = load i32, i32* %v2_1000f82f, align 4
  store i32 %v3_1000f82f, i32* %eax.global-to-local, align 4
  %v1_1000f837 = add i32 %v1_1000f82e, 16
  %v1_1000f83a = inttoptr i32 %v1_1000f837 to i32*
  %v2_1000f83a = load i32, i32* %v1_1000f83a, align 4
  store i32 %v2_1000f83a, i32* @ebx, align 4
  %v3_1000f83a = add i32 %v1_1000f82e, 20
  %v1_1000f83b = inttoptr i32 %v3_1000f83a to i32*
  %v2_1000f83b = load i32, i32* %v1_1000f83b, align 4
  store i32 %v2_1000f83b, i32* @edi, align 4
  %v3_1000f83b = add i32 %v1_1000f82e, 24
  %v12_1000f83c = and i32 %v3_1000f82f, -256
  store i32 %v12_1000f83c, i32* %eax.global-to-local, align 4
  %v1_1000f83e = inttoptr i32 %v3_1000f83b to i32*
  %v2_1000f83e = load i32, i32* %v1_1000f83e, align 4
  store i32 %v2_1000f83e, i32* @esi, align 4
  %v2_1000f841 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f841, i32* @ebp, align 4
  ret i32 %v12_1000f83c

dec_label_pc_1000f845:                            ; preds = %dec_label_pc_1000f77b, %dec_label_pc_1000f809.dec_label_pc_1000f845_crit_edge
  %v0_1000f847 = phi i32 [ %v0_1000f847.pre, %dec_label_pc_1000f809.dec_label_pc_1000f845_crit_edge ], [ %v0_1000f84713, %dec_label_pc_1000f77b ]
  %v0_1000f845 = load i32, i32* @esp, align 4
  %v1_1000f845 = inttoptr i32 %v0_1000f845 to i32*
  %v2_1000f845 = load i32, i32* %v1_1000f845, align 4
  store i32 %v2_1000f845, i32* @ebx, align 4
  %v3_1000f845 = add i32 %v0_1000f845, 4
  %v1_1000f846 = inttoptr i32 %v3_1000f845 to i32*
  %v2_1000f846 = load i32, i32* %v1_1000f846, align 4
  store i32 %v2_1000f846, i32* @edi, align 4
  %v3_1000f846 = add i32 %v0_1000f845, 8
  %v1_1000f847 = and i32 %v0_1000f847, -256
  %v2_1000f847 = or i32 %v1_1000f847, 1
  store i32 %v2_1000f847, i32* %eax.global-to-local, align 4
  %v1_1000f849 = inttoptr i32 %v3_1000f846 to i32*
  %v2_1000f849 = load i32, i32* %v1_1000f849, align 4
  store i32 %v2_1000f849, i32* @esi, align 4
  %v2_1000f84c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_1000f84c, i32* @ebp, align 4
  ret i32 %v2_1000f847
}

define i32 @function_1000f850(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000f850:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-532 = alloca i32, align 4
  %stack_var_-528 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-516 = alloca i32, align 4
  %v0_1000f850 = load i32, i32* @ebp, align 4
  %v15_1000f853 = ptrtoint i32* %stack_var_-516 to i32
  %v0_1000f859 = load i32, i32* @esi, align 4
  %v0_1000f85a = load i32, i32* @edi, align 4
  store i32 %v0_1000f85a, i32* %stack_var_-524, align 4
  store i32 %arg2, i32* @edi, align 4
  %v0_1000f85e = load i32, i32* @ecx, align 4
  store i32 %v0_1000f85e, i32* @esi, align 4
  %v1_1000f860 = icmp eq i32 %arg2, 0
  %v1_1000f862 = icmp eq i1 %v1_1000f860, false
  br i1 %v1_1000f862, label %dec_label_pc_1000f86e, label %dec_label_pc_1000f864

dec_label_pc_1000f864:                            ; preds = %dec_label_pc_1000f850
  store i32 %v0_1000f85a, i32* @edi, align 4
  %v11_1000f865 = load i32, i32* @eax, align 4
  %v12_1000f865 = and i32 %v11_1000f865, -256
  store i32 %v12_1000f865, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f859, i32* @esi, align 4
  store i32 %v0_1000f850, i32* @ebp, align 4
  ret i32 %v12_1000f865

dec_label_pc_1000f86e:                            ; preds = %dec_label_pc_1000f850
  %v1_1000f86e = inttoptr i32 %arg2 to i8*
  %v2_1000f86e = load i8, i8* %v1_1000f86e, align 1
  %v12_1000f86e = icmp eq i8 %v2_1000f86e, 91
  %v0_1000f871 = load i32, i32* @ebx, align 4
  store i32 %v0_1000f871, i32* %stack_var_-528, align 4
  %v1_1000f872 = icmp eq i1 %v12_1000f86e, false
  br i1 %v1_1000f872, label %dec_label_pc_1000f8bb, label %dec_label_pc_1000f874

dec_label_pc_1000f874:                            ; preds = %dec_label_pc_1000f86e
  store i32 %arg2, i32* %stack_var_-532, align 4
  %v1_1000f875 = call i32 @function_10009450(i32 %arg2)
  store i32 %v1_1000f875, i32* %ebx.global-to-local, align 4
  %v1_1000f87c = add i32 %v1_1000f875, 1
  store i32 %v1_1000f87c, i32* %eax.global-to-local, align 4
  %tmp35 = icmp ult i32 %v1_1000f87c, 513
  br i1 %tmp35, label %dec_label_pc_1000f894, label %dec_label_pc_1000f889

dec_label_pc_1000f889:                            ; preds = %dec_label_pc_1000f874
  %v2_1000f889 = load i32, i32* %stack_var_-528, align 4
  store i32 %v2_1000f889, i32* @ebx, align 4
  %v2_1000f88a = load i32, i32* %stack_var_-524, align 4
  store i32 %v2_1000f88a, i32* @edi, align 4
  %v12_1000f88b = and i32 %v1_1000f87c, -256
  store i32 %v12_1000f88b, i32* %eax.global-to-local, align 4
  store i32 %v0_1000f859, i32* @esi, align 4
  ret i32 %v12_1000f88b

dec_label_pc_1000f894:                            ; preds = %dec_label_pc_1000f874
  store i32 %v1_1000f875, i32* %stack_var_-532, align 4
  %v0_1000f895 = load i32, i32* @edi, align 4
  %v1_1000f895 = add i32 %v0_1000f895, 1
  store i32 %v1_1000f895, i32* @edi, align 4
  store i32 %v15_1000f853, i32* @ecx, align 4
  %v4_1000f89e = call i32 @function_10009a60(i32* nonnull %stack_var_-516, i32 %v1_1000f895, i32 %v1_1000f875)
  store i32 %v4_1000f89e, i32* %eax.global-to-local, align 4
  %v0_1000f8a3 = load i32, i32* @ebp, align 4
  %v1_1000f8a3 = load i32, i32* %ebx.global-to-local, align 4
  %v3_1000f8a3 = add i32 %v0_1000f8a3, -514
  %v4_1000f8a3 = add i32 %v3_1000f8a3, %v1_1000f8a3
  store i32 %v4_1000f8a3, i32* @ebx, align 4
  %v1_1000f8ad = inttoptr i32 %v4_1000f8a3 to i8*
  %v2_1000f8ad = load i8, i8* %v1_1000f8ad, align 1
  %v12_1000f8ad = icmp eq i8 %v2_1000f8ad, 93
  %v1_1000f8b0 = icmp eq i1 %v12_1000f8ad, false
  br i1 %v1_1000f8b0, label %dec_label_pc_1000f8b5, label %dec_label_pc_1000f8b2

dec_label_pc_1000f8b2:                            ; preds = %dec_label_pc_1000f894
  store i8 0, i8* %v1_1000f8ad, align 1
  br label %dec_label_pc_1000f8b5

dec_label_pc_1000f8b5:                            ; preds = %dec_label_pc_1000f8b2, %dec_label_pc_1000f894
  store i32 %v15_1000f853, i32* @edi, align 4
  %v1_1000f8be.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_1000f8bb

dec_label_pc_1000f8bb:                            ; preds = %dec_label_pc_1000f8b5, %dec_label_pc_1000f86e
  %v1_1000f8be = phi i32 [ %v1_1000f8be.pre, %dec_label_pc_1000f8b5 ], [ %v0_1000f85e, %dec_label_pc_1000f86e ]
  %v0_1000f8be = phi i32 [ %v15_1000f853, %dec_label_pc_1000f8b5 ], [ %arg2, %dec_label_pc_1000f86e ]
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v2_1000f8be = add i32 %v1_1000f8be, 8
  %v3_1000f8be = inttoptr i32 %v2_1000f8be to i32*
  store i32 %v0_1000f8be, i32* %v3_1000f8be, align 4
  %v0_1000f8c1 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f8c1 = icmp eq i32 %v0_1000f8c1, 0
  %v1_1000f8c3 = icmp eq i1 %v1_1000f8c1, false
  br i1 %v1_1000f8c3, label %dec_label_pc_1000f8ca, label %dec_label_pc_1000f8c5

dec_label_pc_1000f8c5:                            ; preds = %dec_label_pc_1000f8bb
  store i32 268497584, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f8ca

dec_label_pc_1000f8ca:                            ; preds = %dec_label_pc_1000f8c5, %dec_label_pc_1000f8bb
  %v0_1000f8ca = phi i32 [ 268497584, %dec_label_pc_1000f8c5 ], [ %v0_1000f8c1, %dec_label_pc_1000f8bb ]
  %v1_1000f8ca = load i32, i32* @esi, align 4
  %v2_1000f8ca = add i32 %v1_1000f8ca, 144
  %v3_1000f8ca = inttoptr i32 %v2_1000f8ca to i32*
  store i32 %v0_1000f8ca, i32* %v3_1000f8ca, align 4
  %v1_1000f8d3 = icmp eq i32 %arg4, 0
  %v1_1000f8d5 = icmp eq i1 %v1_1000f8d3, false
  br i1 %v1_1000f8d5, label %dec_label_pc_1000f8dc, label %dec_label_pc_1000f8d7

dec_label_pc_1000f8d7:                            ; preds = %dec_label_pc_1000f8ca
  br label %dec_label_pc_1000f8dc

dec_label_pc_1000f8dc:                            ; preds = %dec_label_pc_1000f8d7, %dec_label_pc_1000f8ca
  %storemerge = phi i32 [ 268497808, %dec_label_pc_1000f8d7 ], [ %arg4, %dec_label_pc_1000f8ca ]
  %v0_1000f8dc = phi i32 [ 268497808, %dec_label_pc_1000f8d7 ], [ %arg4, %dec_label_pc_1000f8ca ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_1000f8dc = load i32, i32* @esi, align 4
  %v2_1000f8dc = add i32 %v1_1000f8dc, 148
  %v3_1000f8dc = inttoptr i32 %v2_1000f8dc to i32*
  store i32 %v0_1000f8dc, i32* %v3_1000f8dc, align 4
  %v0_1000f8e2 = load i32, i32* @esi, align 4
  %v1_1000f8e2 = inttoptr i32 %v0_1000f8e2 to i32*
  store i32 0, i32* %v1_1000f8e2, align 4
  %v0_1000f8e8 = load i32, i32* @esi, align 4
  %v1_1000f8e8 = add i32 %v0_1000f8e8, 12
  %v2_1000f8e8 = inttoptr i32 %v1_1000f8e8 to i32*
  store i32 0, i32* %v2_1000f8e8, align 4
  %v0_1000f8ef = load i32, i32* @esi, align 4
  %v1_1000f8ef = add i32 %v0_1000f8ef, 4
  %v2_1000f8ef = inttoptr i32 %v1_1000f8ef to i8*
  store i8 0, i8* %v2_1000f8ef, align 1
  %v0_1000f8f3 = load i32, i32* @edi, align 4
  %v1_1000f8f3 = inttoptr i32 %v0_1000f8f3 to i8*
  %v2_1000f8f3 = load i8, i8* %v1_1000f8f3, align 1
  %v11_1000f8f3 = icmp eq i8 %v2_1000f8f3, 32
  %v1_1000f8f6 = icmp eq i1 %v11_1000f8f3, false
  br i1 %v1_1000f8f6, label %dec_label_pc_1000f90a, label %dec_label_pc_1000f8f8

dec_label_pc_1000f8f8:                            ; preds = %dec_label_pc_1000f8dc
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1000f900

dec_label_pc_1000f900:                            ; preds = %dec_label_pc_1000f900, %dec_label_pc_1000f8f8
  %v0_1000f900 = phi i32 [ %v0_1000f904, %dec_label_pc_1000f900 ], [ 0, %dec_label_pc_1000f8f8 ]
  %v1_1000f900 = add i32 %v0_1000f900, 1
  store i32 %v1_1000f900, i32* %eax.global-to-local, align 4
  %v1_1000f901 = load i32, i32* @esi, align 4
  %v2_1000f901 = add i32 %v1_1000f901, 12
  %v3_1000f901 = inttoptr i32 %v2_1000f901 to i32*
  store i32 %v1_1000f900, i32* %v3_1000f901, align 4
  %v0_1000f904 = load i32, i32* %eax.global-to-local, align 4
  %v1_1000f904 = load i32, i32* @edi, align 4
  %v3_1000f904 = add i32 %v1_1000f904, %v0_1000f904
  %v4_1000f904 = inttoptr i32 %v3_1000f904 to i8*
  %v5_1000f904 = load i8, i8* %v4_1000f904, align 1
  %v14_1000f904 = icmp eq i8 %v5_1000f904, 32
  br i1 %v14_1000f904, label %dec_label_pc_1000f900, label %dec_label_pc_1000f90a

dec_label_pc_1000f90a:                            ; preds = %dec_label_pc_1000f900, %dec_label_pc_1000f8dc
  %v1_1000f90d = phi i32 [ %v0_1000f8f3, %dec_label_pc_1000f8dc ], [ %v1_1000f904, %dec_label_pc_1000f900 ]
  %v0_1000f90a = load i32, i32* @esi, align 4
  %v1_1000f90a = add i32 %v0_1000f90a, 12
  %v2_1000f90a = inttoptr i32 %v1_1000f90a to i32*
  %v3_1000f90a = load i32, i32* %v2_1000f90a, align 4
  store i32 %v3_1000f90a, i32* %eax.global-to-local, align 4
  %v3_1000f90d = add i32 %v3_1000f90a, %v1_1000f90d
  %v4_1000f90d = inttoptr i32 %v3_1000f90d to i8*
  %v5_1000f90d = load i8, i8* %v4_1000f90d, align 1
  %v1_1000f910 = add i32 %v3_1000f90a, 1
  store i32 %v1_1000f910, i32* @eax, align 4
  store i32 %v0_1000f90a, i32* %stack_var_-532, align 4
  store i32 %v0_1000f90a, i32* @ecx, align 4
  %v3_1000f914 = add i32 %v0_1000f90a, 4
  %v4_1000f914 = inttoptr i32 %v3_1000f914 to i8*
  store i8 %v5_1000f90d, i8* %v4_1000f914, align 1
  %v0_1000f917 = load i32, i32* @eax, align 4
  %v1_1000f917 = load i32, i32* @esi, align 4
  %v2_1000f917 = add i32 %v1_1000f917, 12
  %v3_1000f917 = inttoptr i32 %v2_1000f917 to i32*
  store i32 %v0_1000f917, i32* %v3_1000f917, align 4
  %v0_1000f91a = load i32, i32* %stack_var_-532, align 4
  %v1_1000f91a = call i32 @function_1000f750(i32 %v0_1000f91a)
  store i32 %v1_1000f91a, i32* %eax.global-to-local, align 4
  %v1_1000f91f = and i32 %v1_1000f91a, 255
  %v2_1000f91f = load i32, i32* @ebx, align 4
  %v3_1000f91f = and i32 %v2_1000f91f, -256
  %v4_1000f91f = or i32 %v3_1000f91f, %v1_1000f91f
  store i32 %v4_1000f91f, i32* @ebx, align 4
  %v4_1000f921 = trunc i32 %v1_1000f91a to i8
  %v5_1000f921 = icmp eq i8 %v4_1000f921, 0
  br i1 %v5_1000f921, label %dec_label_pc_1000f932, label %dec_label_pc_1000f925

dec_label_pc_1000f925:                            ; preds = %dec_label_pc_1000f90a
  %v0_1000f925 = load i32, i32* @esi, align 4
  store i32 %v0_1000f925, i32* @ecx, align 4
  %v1_1000f928 = call i32 @function_1000f4e0(i32 %v0_1000f925)
  store i32 %v1_1000f928, i32* %eax.global-to-local, align 4
  store i32 %tmp, i32* @ecx, align 4
  %v1_1000f930 = trunc i32 %v1_1000f928 to i8
  %v3_1000f930 = bitcast i32* %arg1 to i8*
  store i8 %v1_1000f930, i8* %v3_1000f930, align 1
  br label %dec_label_pc_1000f932

dec_label_pc_1000f932:                            ; preds = %dec_label_pc_1000f925, %dec_label_pc_1000f90a
  %v2_1000f932 = load i32, i32* @ecx, align 4
  store i32 %v2_1000f932, i32* %eax.global-to-local, align 4
  %v1_1000f934 = icmp eq i32 %v2_1000f932, 0
  br i1 %v1_1000f934, label %dec_label_pc_1000f95e, label %dec_label_pc_1000f938

dec_label_pc_1000f938:                            ; preds = %dec_label_pc_1000f932
  %v1_1000f938 = load i32, i32* @esp, align 4
  %v2_1000f938 = add i32 %v1_1000f938, -4
  %v3_1000f938 = inttoptr i32 %v2_1000f938 to i32*
  store i32 %v2_1000f932, i32* %v3_1000f938, align 4
  %v0_1000f939 = load i32, i32* @esi, align 4
  store i32 %v0_1000f939, i32* @ecx, align 4
  %v1_1000f93b = call i32 @function_1000f3c0(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f93b, i32* %eax.global-to-local, align 4
  %v2_1000f940 = load i32, i32* @ecx, align 4
  %v1_1000f942 = add i32 %v2_1000f940, 4
  %v1_1000f945 = load i32, i32* @esp, align 4
  %v2_1000f945 = add i32 %v1_1000f945, -4
  %v3_1000f945 = inttoptr i32 %v2_1000f945 to i32*
  store i32 %v1_1000f942, i32* %v3_1000f945, align 4
  %v0_1000f946 = load i32, i32* @esi, align 4
  store i32 %v0_1000f946, i32* @ecx, align 4
  %v1_1000f948 = call i32 @function_1000f3c0(i32 ptrtoint (i32* @5 to i32))
  %v2_1000f94d = load i32, i32* @ecx, align 4
  store i32 %v2_1000f94d, i32* %eax.global-to-local, align 4
  %v1_1000f94f = load i32, i32* @esp, align 4
  %v2_1000f94f = add i32 %v1_1000f94f, -4
  %v3_1000f94f = inttoptr i32 %v2_1000f94f to i32*
  store i32 %v2_1000f94d, i32* %v3_1000f94f, align 4
  %v1_1000f950 = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_1000f950, i32* %eax.global-to-local, align 4
  %v0_1000f958 = load i32, i32* @esi, align 4
  %v1_1000f958 = inttoptr i32 %v0_1000f958 to i32*
  store i32 0, i32* %v1_1000f958, align 4
  %v2_1000f95e.pre = load i32, i32* %eax.global-to-local, align 4
  %phitmp = and i32 %v2_1000f95e.pre, -256
  br label %dec_label_pc_1000f95e

dec_label_pc_1000f95e:                            ; preds = %dec_label_pc_1000f938, %dec_label_pc_1000f932
  %v2_1000f95e = phi i32 [ %phitmp, %dec_label_pc_1000f938 ], [ 0, %dec_label_pc_1000f932 ]
  %v0_1000f95e = load i32, i32* @ebx, align 4
  %v1_1000f95e = and i32 %v0_1000f95e, 255
  %v4_1000f95e = or i32 %v1_1000f95e, %v2_1000f95e
  store i32 %v4_1000f95e, i32* %eax.global-to-local, align 4
  %v0_1000f960 = load i32, i32* @esp, align 4
  %v1_1000f960 = inttoptr i32 %v0_1000f960 to i32*
  %v2_1000f960 = load i32, i32* %v1_1000f960, align 4
  store i32 %v2_1000f960, i32* @ebx, align 4
  %v3_1000f960 = add i32 %v0_1000f960, 4
  %v1_1000f961 = inttoptr i32 %v3_1000f960 to i32*
  %v2_1000f961 = load i32, i32* %v1_1000f961, align 4
  store i32 %v2_1000f961, i32* @edi, align 4
  %v0_1000f962 = load i32, i32* @esi, align 4
  %v1_1000f962 = inttoptr i32 %v0_1000f962 to i32*
  store i32 0, i32* %v1_1000f962, align 4
  %v0_1000f968 = load i32, i32* @esp, align 4
  %v1_1000f968 = inttoptr i32 %v0_1000f968 to i32*
  %v2_1000f968 = load i32, i32* %v1_1000f968, align 4
  store i32 %v2_1000f968, i32* @esi, align 4
  %v0_1000f96c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000f96c
}

define i32 @function_1000f970(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000f970:
  %v0_1000f970 = load i32, i32* @global_var_1002b9a0.358, align 4
  %v7_1000f970 = icmp eq i32 %v0_1000f970, 0
  br i1 %v7_1000f970, label %dec_label_pc_1000f98e, label %dec_label_pc_1000f979

dec_label_pc_1000f979:                            ; preds = %dec_label_pc_1000f970
  %v0_1000f979 = load i8, i8* @global_var_1002d401.494, align 1
  %v7_1000f979 = icmp eq i8 %v0_1000f979, 0
  %v1_1000f980 = icmp eq i1 %v7_1000f979, false
  br i1 %v1_1000f980, label %dec_label_pc_1000f98e, label %dec_label_pc_1000f982

dec_label_pc_1000f982:                            ; preds = %dec_label_pc_1000f979
  %v0_1000f982 = call i32 @function_1000fa20()
  store i32 %v0_1000f982, i32* @eax, align 4
  store i8 1, i8* @global_var_1002d401.494, align 1
  br label %dec_label_pc_1000f98e

dec_label_pc_1000f98e:                            ; preds = %dec_label_pc_1000f982, %dec_label_pc_1000f979, %dec_label_pc_1000f970
  %v0_1000f98e = load i32, i32* @global_var_1002b954.331, align 4
  store i32 %v0_1000f98e, i32* @ecx, align 4
  %v1_1000f994 = icmp eq i32 %v0_1000f98e, 0
  br i1 %v1_1000f994, label %dec_label_pc_1000f9b9, label %dec_label_pc_1000f998

dec_label_pc_1000f998:                            ; preds = %dec_label_pc_1000f98e
  %v0_1000f998 = load i8, i8* @global_var_1002d400.495, align 1
  %v7_1000f998 = icmp eq i8 %v0_1000f998, 0
  %v1_1000f99f = icmp eq i1 %v7_1000f998, false
  br i1 %v1_1000f99f, label %dec_label_pc_1000f9b9, label %dec_label_pc_1000f9a1

dec_label_pc_1000f9a1:                            ; preds = %dec_label_pc_1000f998
  %v1_1000f9a1 = inttoptr i32 %v0_1000f98e to i32*
  %v2_1000f9a1 = load i32, i32* %v1_1000f9a1, align 4
  store i32 %v2_1000f9a1, i32* @eax, align 4
  store i8 1, i8* @global_var_1002d400.495, align 1
  %v2_1000f9b4 = call i32 @function_1000f9f0(i32* nonnull @global_var_1002d404.496)
  ret i32 %v2_1000f9b4

dec_label_pc_1000f9b9:                            ; preds = %dec_label_pc_1000f998, %dec_label_pc_1000f98e
  %v0_1000f9b9 = load i32, i32* @eax, align 4
  ret i32 %v0_1000f9b9
}

define i32 @function_1000f9c0() local_unnamed_addr {
dec_label_pc_1000f9c0:
  %v0_1000f9c0 = load i32, i32* @global_var_1002b954.331, align 4
  store i32 %v0_1000f9c0, i32* @ecx, align 4
  %v1_1000f9c6 = icmp eq i32 %v0_1000f9c0, 0
  br i1 %v1_1000f9c6, label %dec_label_pc_1000f9e6, label %dec_label_pc_1000f9ca

dec_label_pc_1000f9ca:                            ; preds = %dec_label_pc_1000f9c0
  %v0_1000f9ca = load i8, i8* @global_var_1002d400.495, align 1
  %v7_1000f9ca = icmp eq i8 %v0_1000f9ca, 0
  br i1 %v7_1000f9ca, label %dec_label_pc_1000f9e6, label %dec_label_pc_1000f9d3

dec_label_pc_1000f9d3:                            ; preds = %dec_label_pc_1000f9ca
  %v1_1000f9d3 = inttoptr i32 %v0_1000f9c0 to i32*
  %v2_1000f9d3 = load i32, i32* %v1_1000f9d3, align 4
  store i32 %v2_1000f9d3, i32* @eax, align 4
  store i8 0, i8* @global_var_1002d400.495, align 1
  br label %dec_label_pc_1000f9e6

dec_label_pc_1000f9e6:                            ; preds = %dec_label_pc_1000f9d3, %dec_label_pc_1000f9ca, %dec_label_pc_1000f9c0
  %v0_1000f9e6 = load i32, i32* @eax, align 4
  ret i32 %v0_1000f9e6
}

define i32 @function_1000f9f0(i32* %arg1) local_unnamed_addr {
dec_label_pc_1000f9f0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000f9f0 = load i32, i32* @esi, align 4
  store i32 %v0_1000f9f0, i32* %stack_var_-4, align 4
  %v4_1000f9f0 = ptrtoint i32* %stack_var_-4 to i32
  %v0_1000f9f1 = load i32, i32* @global_var_1002d424.497, align 4
  store i32 %v0_1000f9f1, i32* %esi.global-to-local, align 4
  %v1_1000f9f7 = icmp eq i32 %v0_1000f9f1, 0
  br i1 %v1_1000f9f7, label %dec_label_pc_1000fa15, label %dec_label_pc_1000fa00

dec_label_pc_1000fa00:                            ; preds = %dec_label_pc_1000f9f0, %dec_label_pc_1000fa00
  %v1_1000fa0b = phi i32 [ %v2_1000fa0b, %dec_label_pc_1000fa00 ], [ %v4_1000f9f0, %dec_label_pc_1000f9f0 ]
  %v0_1000fa0b = phi i32 [ %v3_1000fa0e, %dec_label_pc_1000fa00 ], [ %v0_1000f9f1, %dec_label_pc_1000f9f0 ]
  %v0_1000fa00 = load i32, i32* @global_var_1002b954.331, align 4
  store i32 %v0_1000fa00, i32* @ecx, align 4
  %v1_1000fa06 = inttoptr i32 %v0_1000fa00 to i32*
  %v2_1000fa06 = load i32, i32* %v1_1000fa06, align 4
  store i32 %v2_1000fa06, i32* @eax, align 4
  %v2_1000fa0b = add i32 %v1_1000fa0b, -4
  %v3_1000fa0b = inttoptr i32 %v2_1000fa0b to i32*
  store i32 %v0_1000fa0b, i32* %v3_1000fa0b, align 4
  %v0_1000fa0e = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fa0e = add i32 %v0_1000fa0e, 12
  %v2_1000fa0e = inttoptr i32 %v1_1000fa0e to i32*
  %v3_1000fa0e = load i32, i32* %v2_1000fa0e, align 4
  store i32 %v3_1000fa0e, i32* %esi.global-to-local, align 4
  %v1_1000fa11 = icmp eq i32 %v3_1000fa0e, 0
  %v1_1000fa13 = icmp eq i1 %v1_1000fa11, false
  br i1 %v1_1000fa13, label %dec_label_pc_1000fa00, label %dec_label_pc_1000fa15.loopexit

dec_label_pc_1000fa15.loopexit:                   ; preds = %dec_label_pc_1000fa00
  br label %dec_label_pc_1000fa15

dec_label_pc_1000fa15:                            ; preds = %dec_label_pc_1000fa15.loopexit, %dec_label_pc_1000f9f0
  %v0_1000fa15 = phi i32 [ %v2_1000fa0b, %dec_label_pc_1000fa15.loopexit ], [ %v4_1000f9f0, %dec_label_pc_1000f9f0 ]
  %v1_1000fa15 = inttoptr i32 %v0_1000fa15 to i32*
  %v2_1000fa15 = load i32, i32* %v1_1000fa15, align 4
  store i32 %v2_1000fa15, i32* @esi, align 4
  %v0_1000fa16 = load i32, i32* @eax, align 4
  ret i32 %v0_1000fa16
}

define i32 @function_1000fa20() local_unnamed_addr {
dec_label_pc_1000fa20:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_1000fa20 = load i32, i32* @esi, align 4
  store i32 %v0_1000fa20, i32* %stack_var_-4, align 4
  %v4_1000fa20 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1000fa30

dec_label_pc_1000fa30:                            ; preds = %dec_label_pc_1000fa30, %dec_label_pc_1000fa20
  %v1_1000fa42 = phi i32 [ %v2_1000fa43, %dec_label_pc_1000fa30 ], [ %v4_1000fa20, %dec_label_pc_1000fa20 ]
  %v0_1000fa42 = phi i32 [ %v1_1000fa46, %dec_label_pc_1000fa30 ], [ 0, %dec_label_pc_1000fa20 ]
  %v0_1000fa30 = load i32, i32* @global_var_1002b9a0.358, align 4
  store i32 %v0_1000fa30, i32* @ecx, align 4
  %v1_1000fa36 = inttoptr i32 %v0_1000fa30 to i32*
  %v2_1000fa36 = load i32, i32* %v1_1000fa36, align 4
  store i32 %v2_1000fa36, i32* %eax.global-to-local, align 4
  %v1_1000fa38 = mul i32 %v0_1000fa42, 4
  %v2_1000fa38 = add i32 %v1_1000fa38, ptrtoint (i32* @global_var_1002d444.498 to i32)
  %v3_1000fa38 = inttoptr i32 %v2_1000fa38 to i32*
  %v4_1000fa38 = load i32, i32* %v3_1000fa38, align 4
  store i32 %v4_1000fa38, i32* %edx.global-to-local, align 4
  %v1_1000fa3f = add i32 %v2_1000fa36, 40
  %v2_1000fa3f = inttoptr i32 %v1_1000fa3f to i32*
  %v3_1000fa3f = load i32, i32* %v2_1000fa3f, align 4
  store i32 %v3_1000fa3f, i32* %eax.global-to-local, align 4
  %v2_1000fa42 = add i32 %v1_1000fa42, -4
  %v3_1000fa42 = inttoptr i32 %v2_1000fa42 to i32*
  store i32 %v0_1000fa42, i32* %v3_1000fa42, align 4
  %v0_1000fa43 = load i32, i32* %edx.global-to-local, align 4
  %v2_1000fa43 = add i32 %v1_1000fa42, -8
  %v3_1000fa43 = inttoptr i32 %v2_1000fa43 to i32*
  store i32 %v0_1000fa43, i32* %v3_1000fa43, align 4
  %v0_1000fa46 = load i32, i32* %esi.global-to-local, align 4
  %v1_1000fa46 = add i32 %v0_1000fa46, 1
  store i32 %v1_1000fa46, i32* %esi.global-to-local, align 4
  %v5_1000fa4a = icmp slt i32 %v1_1000fa46, 5
  br i1 %v5_1000fa4a, label %dec_label_pc_1000fa30, label %dec_label_pc_1000fa4c

dec_label_pc_1000fa4c:                            ; preds = %dec_label_pc_1000fa30
  %v2_1000fa4c = load i32, i32* %v3_1000fa43, align 4
  store i32 %v2_1000fa4c, i32* @esi, align 4
  %v0_1000fa4d = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1000fa4d
}

define i32 @__heap_term() {
dec_label_pc_1000fa50:
  %v0_1000fa50 = load i32, i32* @eax, align 4
  ret i32 %v0_1000fa50
}

define i32 @function_1000fa60(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000fa60:
  %edx.global-to-local = alloca i32, align 4
  %v0_1000fa60 = load i32, i32* %edx.global-to-local, align 4
  %v1_1000fa60 = add i32 %v0_1000fa60, -1
  ret i32 %v1_1000fa60
}

declare i8* @_strchr(i8*, i32) local_unnamed_addr

declare i32 @__putenv(i8*) local_unnamed_addr

define i32 @function_1000fde0() local_unnamed_addr {
dec_label_pc_1000fde0:
  %v1_1000fde2 = call i32 @__unlock(i32 7)
  store i32 7, i32* @ecx, align 4
  ret i32 %v1_1000fde2
}

declare i32 @__chkstk() local_unnamed_addr

declare i8* @__getcwd(i8*, i32) local_unnamed_addr

define i32 @function_1000ffd9() local_unnamed_addr {
dec_label_pc_1000ffd9:
  %v1_1000ffdb = call i32 @__unlock(i32 7)
  store i32 7, i32* @ecx, align 4
  ret i32 %v1_1000ffdb
}

declare i32 @__access(i8*, i32) local_unnamed_addr

declare i8* @_getenv(i8*) local_unnamed_addr

define i32 @function_10010171() local_unnamed_addr {
dec_label_pc_10010171:
  %v1_10010173 = call i32 @__unlock(i32 7)
  store i32 7, i32* @ecx, align 4
  ret i32 %v1_10010173
}

define i32 @function_10010248() local_unnamed_addr {
dec_label_pc_10010248:
  %v1_1001024a = call i32 @__unlock(i32 7)
  store i32 7, i32* @ecx, align 4
  ret i32 %v1_1001024a
}

declare i32 @__spawnv(i32, i8*, i8**) local_unnamed_addr

declare i32* @_memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @_sprintf(i8*, i8*, ...) local_unnamed_addr

declare i32 @_memcpy.1() local_unnamed_addr

declare i32 @_fclose(%_IO_FILE*) local_unnamed_addr

define i32 @function_10010aca() local_unnamed_addr {
dec_label_pc_10010aca:
  %tmp222 = call i32 @__decompiler_undefined_function_0()
  %v1_10010acb = call i32 @__unlock_file(i32 %tmp222)
  ret i32 %v1_10010acb
}

define i32 @function_10010d12() local_unnamed_addr {
dec_label_pc_10010d12:
  %ebp.global-to-local = alloca i32, align 4
  %v0_10010d12 = load i32, i32* %ebp.global-to-local, align 4
  %v1_10010d12 = add i32 %v0_10010d12, 24
  %v2_10010d12 = inttoptr i32 %v1_10010d12 to i32*
  %v3_10010d12 = load i32, i32* %v2_10010d12, align 4
  %v1_10010d15 = call i32 @__unlock_file(i32 %v3_10010d12)
  store i32 %v3_10010d12, i32* @ecx, align 4
  ret i32 %v1_10010d15
}

declare i32 @_fread(i32*, i32, i32, %_IO_FILE*) local_unnamed_addr

declare i32 @_ftell(%_IO_FILE*) local_unnamed_addr

define i32 @function_10010f28() local_unnamed_addr {
dec_label_pc_10010f28:
  %ebp.global-to-local = alloca i32, align 4
  %v0_10010f28 = load i32, i32* %ebp.global-to-local, align 4
  %v1_10010f28 = add i32 %v0_10010f28, 8
  %v2_10010f28 = inttoptr i32 %v1_10010f28 to i32*
  %v3_10010f28 = load i32, i32* %v2_10010f28, align 4
  %v1_10010f2b = call i32 @__unlock_file(i32 %v3_10010f28)
  store i32 %v3_10010f28, i32* @ecx, align 4
  ret i32 %v1_10010f2b
}

declare i32 @_fseek(%_IO_FILE*, i32, i32) local_unnamed_addr

define i32 @function_1001102e() local_unnamed_addr {
dec_label_pc_1001102e:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1001102e = load i32, i32* %ebp.global-to-local, align 4
  %v1_1001102e = add i32 %v0_1001102e, 8
  %v2_1001102e = inttoptr i32 %v1_1001102e to i32*
  %v3_1001102e = load i32, i32* %v2_1001102e, align 4
  %v1_10011031 = call i32 @__unlock_file(i32 %v3_1001102e)
  store i32 %v3_1001102e, i32* @ecx, align 4
  ret i32 %v1_10011031
}

declare i32 @__fsopen(i32, i32, i32, i32) local_unnamed_addr

define i32 @function_100110ea() local_unnamed_addr {
dec_label_pc_100110ea:
  %ebp.global-to-local = alloca i32, align 4
  %v0_100110ea = load i32, i32* %ebp.global-to-local, align 4
  %v1_100110ea = add i32 %v0_100110ea, 8
  %v2_100110ea = inttoptr i32 %v1_100110ea to i32*
  %v3_100110ea = load i32, i32* %v2_100110ea, align 4
  %v1_100110ed = call i32 @__unlock_file(i32 %v3_100110ea)
  store i32 %v3_100110ea, i32* @ecx, align 4
  ret i32 %v1_100110ed
}

define i32 @function_100110f4(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_100110f4:
  %v0_100110f6 = load i32, i32* @ebp, align 4
  %tmp12 = ptrtoint i8* %arg2 to i32
  %v5_10011101 = call i32 @__fsopen(i32 %arg1, i32 %tmp12, i32 64, i32 %v0_100110f6)
  ret i32 %v5_10011101
}

declare i32 @__alloca_probe_16() local_unnamed_addr

define i32 @function_10011126() local_unnamed_addr {
dec_label_pc_10011126:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_10011127 = ptrtoint i32* %stack_var_4 to i32
  %v1_1001112b = load i32, i32* %eax.global-to-local, align 4
  %v2_1001112b = sub i32 %v2_10011127, %v1_1001112b
  %v1_1001112d = and i32 %v2_1001112b, 7
  %v2_10011130 = add i32 %v1_1001112d, %v1_1001112b
  %v7_10011130 = icmp ult i32 %v2_10011130, %v1_1001112b
  %v2_10011134 = select i1 %v7_10011130, i32 -1, i32 %v2_10011130
  store i32 %v2_10011134, i32* %eax.global-to-local, align 4
  %v0_10011137 = call i32 @__chkstk()
  store i32 %v0_10011137, i32* %eax.global-to-local, align 4
  ret i32 %v0_10011137
}

declare i32 @__chdir(i8*) local_unnamed_addr

declare i8* @_strrchr(i8*, i32) local_unnamed_addr

declare i32 @"?__set_inconsistency@@YAP6AXXZP6AXXZ@Z"(i32) local_unnamed_addr

declare i32 @__splitpath(i32*, i32, i32, i32*, i32) local_unnamed_addr

define i32 @function_1001162a() local_unnamed_addr {
dec_label_pc_1001162a:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1001162a = load i32, i32* %ebp.global-to-local, align 4
  %v1_1001162a = add i32 %v0_1001162a, -28
  %v2_1001162a = inttoptr i32 %v1_1001162a to i32*
  %v3_1001162a = load i32, i32* %v2_1001162a, align 4
  %v1_1001162d = call i32 @__unlock_file(i32 %v3_1001162a)
  store i32 %v3_1001162a, i32* @ecx, align 4
  ret i32 %v1_1001162d
}

declare %_IO_FILE* @_freopen(i8*, i8*, %_IO_FILE*) local_unnamed_addr

define i32 @___iob_func() local_unnamed_addr {
dec_label_pc_1001165a:
  ret i32 ptrtoint (i32** @global_var_10028c68.500 to i32)
}

declare i32 @__unlock_file(i32) local_unnamed_addr

declare i32 @__unlock_file2(i32, i32) local_unnamed_addr

define i32 @function_1001192c() local_unnamed_addr {
dec_label_pc_1001192c:
  %v0_1001192c = call i32 @__unlockexit()
  ret i32 %v0_1001192c
}

declare i32 @_atexit(void ()*) local_unnamed_addr

declare i32 @"??0_LocaleUpdate@@QAE@PAUlocaleinfo_struct@@@Z"(i32, i32, i32, i32) local_unnamed_addr

declare i8* @__strlwr(i8*) local_unnamed_addr

declare i32* @_memset(i32*, i32, i32) local_unnamed_addr

declare i32 @__vsnprintf(i8*, i32, i8*, i32) local_unnamed_addr

define i32 @__lockexit() local_unnamed_addr {
dec_label_pc_10011d86:
  %v1_10011d88 = call i32 @__lock(i32 8)
  store i32 8, i32* @ecx, align 4
  ret i32 %v1_10011d88
}

define i32 @__unlockexit() local_unnamed_addr {
dec_label_pc_10011d8f:
  %v1_10011d91 = call i32 @__unlock(i32 8)
  store i32 8, i32* @ecx, align 4
  ret i32 %v1_10011d91
}

declare i32 @_doexit(i32, i32, i32) local_unnamed_addr

define i32 @function_10011fb1() local_unnamed_addr {
dec_label_pc_10011fb1:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %v0_10011fb1 = load i32, i32* %ebp.global-to-local, align 4
  %v1_10011fb1 = add i32 %v0_10011fb1, 16
  %v2_10011fb1 = inttoptr i32 %v1_10011fb1 to i32*
  %v3_10011fb1 = load i32, i32* %v2_10011fb1, align 4
  %v10_10011fb1 = icmp eq i32 %v3_10011fb1, 0
  br i1 %v10_10011fb1, label %dec_label_pc_10011fb1.dec_label_pc_10011fbf_crit_edge, label %dec_label_pc_10011fb7

dec_label_pc_10011fb1.dec_label_pc_10011fbf_crit_edge: ; preds = %dec_label_pc_10011fb1
  %v0_10011fbf.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10011fbf

dec_label_pc_10011fb7:                            ; preds = %dec_label_pc_10011fb1
  %v1_10011fb9 = call i32 @__unlock(i32 8)
  store i32 %v1_10011fb9, i32* %eax.global-to-local, align 4
  store i32 8, i32* @ecx, align 4
  br label %dec_label_pc_10011fbf

dec_label_pc_10011fbf:                            ; preds = %dec_label_pc_10011fb1.dec_label_pc_10011fbf_crit_edge, %dec_label_pc_10011fb7
  %v0_10011fbf = phi i32 [ %v0_10011fbf.pre, %dec_label_pc_10011fb1.dec_label_pc_10011fbf_crit_edge ], [ %v1_10011fb9, %dec_label_pc_10011fb7 ]
  ret i32 %v0_10011fbf
}

define i32 @function_10011fc0() local_unnamed_addr {
dec_label_pc_10011fc0:
  %v0_10011fc0 = call i32 @__SEH_epilog4()
  ret i32 %v0_10011fc0
}

define i32 @function_10011fc6(i32 %arg1) local_unnamed_addr {
dec_label_pc_10011fc6:
  %v3_10011fd2 = call i32 @_doexit(i32 %arg1, i32 0, i32 0)
  unreachable
}

define i32 @function_10011fd7(i32 %arg1) local_unnamed_addr {
dec_label_pc_10011fd7:
  %eax.global-to-local = alloca i32, align 4
  %v0_10011fdb = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10011fdb
}

define i32 @function_10011fed(i32 %arg1) local_unnamed_addr {
dec_label_pc_10011fed:
  %eax.global-to-local = alloca i32, align 4
  %v0_10011ff1 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10011ff1
}

define i32 @__cexit() local_unnamed_addr {
dec_label_pc_10011ff2:
  %v3_10011ff8 = call i32 @_doexit(i32 0, i32 0, i32 1)
  unreachable
}

define i32 @function_10011ffd() local_unnamed_addr {
dec_label_pc_10011ffd:
  %eax.global-to-local = alloca i32, align 4
  %v0_10012000 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10012000
}

declare i32 @__amsg_exit(i32) local_unnamed_addr

define i32 @function_100120f8() local_unnamed_addr {
dec_label_pc_100120f8:
  %eax.global-to-local = alloca i32, align 4
  %tmp221 = call i32 @__decompiler_undefined_function_0()
  %tmp223 = call i32 @__decompiler_undefined_function_0()
  %v1_100120f8 = add i32 %tmp221, 16
  %v2_100120f8 = inttoptr i32 %v1_100120f8 to i32*
  %v3_100120f8 = load i32, i32* %v2_100120f8, align 4
  %v15_100120f8 = icmp eq i32 %v3_100120f8, %tmp223
  %v1_100120fb = icmp eq i1 %v15_100120f8, false
  br i1 %v1_100120fb, label %dec_label_pc_1001210b, label %dec_label_pc_100120fd

dec_label_pc_100120fd:                            ; preds = %dec_label_pc_100120f8
  %v0_100120fd = load i32, i32* @global_var_10029a8c.501, align 4
  %v10_100120fd = icmp eq i32 %v0_100120fd, -1
  br i1 %v10_100120fd, label %dec_label_pc_1001210b, label %dec_label_pc_10012106

dec_label_pc_10012106:                            ; preds = %dec_label_pc_100120fd
  %v0_10012106 = call i32 @__mtterm()
  store i32 %v0_10012106, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001210b

dec_label_pc_1001210b:                            ; preds = %dec_label_pc_10012106, %dec_label_pc_100120fd, %dec_label_pc_100120f8
  %v0_1001210b = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001210b
}

define i32 @function_1001210c() local_unnamed_addr {
dec_label_pc_1001210c:
  %eax.global-to-local = alloca i32, align 4
  %v0_1001210c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001210c
}

declare i32 @_printf(i8*, ...) local_unnamed_addr

define i32 @function_10012330() local_unnamed_addr {
dec_label_pc_10012330:
  %v0_10012330 = call i32 @___iob_func()
  %v1_10012335 = add i32 %v0_10012330, 32
  %v2_1001233b = call i32 @__unlock_file2(i32 1, i32 %v1_10012335)
  store i32 %v1_10012335, i32* @ecx, align 4
  ret i32 %v2_1001233b
}

declare i32 @__get_printf_count_output(i32) local_unnamed_addr

define i32 @function_10012360(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_10012360:
  %v4_10012360 = ptrtoint i8* %arg2 to i32
  store i32 %v4_10012360, i32* @ecx, align 4
  %v0_10012366 = load i32, i32* @esi, align 4
  %v2_10012367 = load i8, i8* %arg2, align 1
  %v3_10012367 = zext i8 %v2_10012367 to i32
  %v5_1001236d = icmp eq i8 %v2_10012367, 0
  br i1 %v5_1001236d, label %dec_label_pc_100123e0, label %dec_label_pc_10012371

dec_label_pc_10012371:                            ; preds = %dec_label_pc_10012360
  %v1_10012371 = add i32 %v4_10012360, 1
  %v2_10012371 = inttoptr i32 %v1_10012371 to i8*
  %v3_10012371 = load i8, i8* %v2_10012371, align 1
  %v7_10012374 = icmp eq i8 %v3_10012371, 0
  br i1 %v7_10012374, label %dec_label_pc_100123cd, label %dec_label_pc_10012378.preheader

dec_label_pc_10012378.preheader:                  ; preds = %dec_label_pc_10012371
  %v4_1001237e.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_10012378

dec_label_pc_10012378:                            ; preds = %dec_label_pc_100123c1, %dec_label_pc_100123b1, %dec_label_pc_10012378.preheader
  %v4_1001237e = phi i32 [ %v4_1001237e.pre, %dec_label_pc_10012378.preheader ], [ %v8_100123c1, %dec_label_pc_100123c1 ], [ %v6_100123b1, %dec_label_pc_100123b1 ]
  %v0_10012378 = phi i32 [ %arg1, %dec_label_pc_10012378.preheader ], [ %v0_100123d9, %dec_label_pc_100123c1 ], [ %v0_100123d9, %dec_label_pc_100123b1 ]
  store i32 %v4_10012360, i32* @ecx, align 4
  %v1_1001237e = inttoptr i32 %v0_10012378 to i8*
  %v2_1001237e = load i8, i8* %v1_1001237e, align 1
  %v3_1001237e = zext i8 %v2_1001237e to i32
  %v5_1001237e = and i32 %v4_1001237e, -256
  %v6_1001237e = or i32 %v3_1001237e, %v5_1001237e
  %v1_10012380 = add i32 %v0_10012378, 1
  %v14_10012383 = icmp eq i8 %v2_1001237e, %v2_10012367
  br i1 %v14_10012383, label %dec_label_pc_1001239e, label %dec_label_pc_10012387

dec_label_pc_10012387:                            ; preds = %dec_label_pc_10012378
  %v5_10012387 = icmp eq i8 %v2_1001237e, 0
  br i1 %v5_10012387, label %dec_label_pc_10012398, label %dec_label_pc_1001238b

dec_label_pc_1001238b:                            ; preds = %dec_label_pc_10012394, %dec_label_pc_10012387
  %v4_1001238b = phi i32 [ %v0_10012394, %dec_label_pc_10012394 ], [ %v6_1001237e, %dec_label_pc_10012387 ]
  %v0_1001238d = phi i32 [ %v0_1001239e15, %dec_label_pc_10012394 ], [ %v1_10012380, %dec_label_pc_10012387 ]
  %v1_1001238b = inttoptr i32 %v0_1001238d to i8*
  %v2_1001238b = load i8, i8* %v1_1001238b, align 1
  %v3_1001238b = zext i8 %v2_1001238b to i32
  %v5_1001238b = and i32 %v4_1001238b, -256
  %v6_1001238b = or i32 %v3_1001238b, %v5_1001238b
  %v1_1001238d = add i32 %v0_1001238d, 1
  br label %dec_label_pc_10012390

dec_label_pc_10012390:                            ; preds = %dec_label_pc_1001239e, %dec_label_pc_1001238b
  %v0_10012394 = phi i32 [ %v6_1001239e, %dec_label_pc_1001239e ], [ %v6_1001238b, %dec_label_pc_1001238b ]
  %v0_1001239e15 = phi i32 [ %v1_100123a0, %dec_label_pc_1001239e ], [ %v1_1001238d, %dec_label_pc_1001238b ]
  %v1_10012390 = trunc i32 %v0_10012394 to i8
  %v14_10012390 = icmp eq i8 %v1_10012390, %v2_10012367
  br i1 %v14_10012390, label %dec_label_pc_1001239e, label %dec_label_pc_10012394

dec_label_pc_10012394:                            ; preds = %dec_label_pc_10012390
  %v5_10012394 = icmp eq i8 %v1_10012390, 0
  %v1_10012396 = icmp eq i1 %v5_10012394, false
  br i1 %v1_10012396, label %dec_label_pc_1001238b, label %dec_label_pc_10012398

dec_label_pc_10012398:                            ; preds = %dec_label_pc_10012394, %dec_label_pc_10012387
  store i32 %v0_10012366, i32* @esi, align 4
  ret i32 0

dec_label_pc_1001239e:                            ; preds = %dec_label_pc_10012390, %dec_label_pc_10012378
  %v4_1001239e = phi i32 [ %v0_10012394, %dec_label_pc_10012390 ], [ %v6_1001237e, %dec_label_pc_10012378 ]
  %v0_100123d9 = phi i32 [ %v0_1001239e15, %dec_label_pc_10012390 ], [ %v1_10012380, %dec_label_pc_10012378 ]
  %v1_1001239e = inttoptr i32 %v0_100123d9 to i8*
  %v2_1001239e = load i8, i8* %v1_1001239e, align 1
  %v3_1001239e = zext i8 %v2_1001239e to i32
  %v5_1001239e = and i32 %v4_1001239e, -256
  %v6_1001239e = or i32 %v3_1001239e, %v5_1001239e
  %v1_100123a0 = add i32 %v0_100123d9, 1
  %v15_100123a3 = icmp eq i8 %v2_1001239e, %v3_10012371
  %v1_100123a5 = icmp eq i1 %v15_100123a3, false
  br i1 %v1_100123a5, label %dec_label_pc_10012390, label %dec_label_pc_100123a7

dec_label_pc_100123a7:                            ; preds = %dec_label_pc_1001239e
  br label %dec_label_pc_100123aa

dec_label_pc_100123aa:                            ; preds = %dec_label_pc_100123c1, %dec_label_pc_100123a7
  %v0_100123b3 = phi i32 [ %v1_100123b3, %dec_label_pc_100123c1 ], [ %v1_100123a0, %dec_label_pc_100123a7 ]
  %v5_100123aa = phi i32 [ %v8_100123c1, %dec_label_pc_100123c1 ], [ %v6_1001239e, %dec_label_pc_100123a7 ]
  %v0_100123c4 = phi i32 [ %v1_100123aa, %dec_label_pc_100123c1 ], [ %v4_10012360, %dec_label_pc_100123a7 ]
  %v1_100123aa = add i32 %v0_100123c4, 2
  %v2_100123aa = inttoptr i32 %v1_100123aa to i8*
  %v3_100123aa = load i8, i8* %v2_100123aa, align 1
  %v7_100123ad = icmp eq i8 %v3_100123aa, 0
  br i1 %v7_100123ad, label %dec_label_pc_100123d9, label %dec_label_pc_100123b1

dec_label_pc_100123b1:                            ; preds = %dec_label_pc_100123aa
  %v4_100123aa = zext i8 %v3_100123aa to i32
  %v6_100123aa = mul nuw nsw i32 %v4_100123aa, 256
  %v1_100123b1 = inttoptr i32 %v0_100123b3 to i8*
  %v2_100123b1 = load i8, i8* %v1_100123b1, align 1
  %v3_100123b1 = zext i8 %v2_100123b1 to i32
  %v7_100123aa.masked = and i32 %v5_100123aa, -65536
  %v5_100123b1 = or i32 %v6_100123aa, %v7_100123aa.masked
  %v6_100123b1 = or i32 %v3_100123b1, %v5_100123b1
  %v1_100123b3 = add i32 %v0_100123b3, 2
  %v15_100123b6 = icmp eq i8 %v2_100123b1, %v3_100123aa
  %v1_100123b8 = icmp eq i1 %v15_100123b6, false
  br i1 %v1_100123b8, label %dec_label_pc_10012378, label %dec_label_pc_100123ba

dec_label_pc_100123ba:                            ; preds = %dec_label_pc_100123b1
  %v1_100123ba = add i32 %v0_100123c4, 3
  %v2_100123ba = inttoptr i32 %v1_100123ba to i8*
  %v3_100123ba = load i8, i8* %v2_100123ba, align 1
  %v5_100123bd = icmp eq i8 %v3_100123ba, 0
  br i1 %v5_100123bd, label %dec_label_pc_100123d9, label %dec_label_pc_100123c1

dec_label_pc_100123c1:                            ; preds = %dec_label_pc_100123ba
  %v4_100123ba = zext i8 %v3_100123ba to i32
  %v1_100123c1 = add i32 %v0_100123b3, 1
  %v2_100123c1 = inttoptr i32 %v1_100123c1 to i8*
  %v3_100123c1 = load i8, i8* %v2_100123c1, align 1
  %v4_100123c1 = zext i8 %v3_100123c1 to i32
  %v6_100123c1 = mul nuw nsw i32 %v4_100123c1, 256
  %v5_100123b1.masked = and i32 %v5_100123b1, -65536
  %v7_100123c1 = or i32 %v4_100123ba, %v5_100123b1.masked
  %v8_100123c1 = or i32 %v6_100123c1, %v7_100123c1
  store i32 %v1_100123aa, i32* @ecx, align 4
  %v15_100123c7 = icmp eq i8 %v3_100123ba, %v3_100123c1
  br i1 %v15_100123c7, label %dec_label_pc_100123aa, label %dec_label_pc_10012378

dec_label_pc_100123cd:                            ; preds = %dec_label_pc_10012371
  ret i32 %v3_10012367

dec_label_pc_100123d9:                            ; preds = %dec_label_pc_100123ba, %dec_label_pc_100123aa
  %v1_100123d9 = add i32 %v0_100123d9, -1
  store i32 %v0_10012366, i32* @esi, align 4
  ret i32 %v1_100123d9

dec_label_pc_100123e0:                            ; preds = %dec_label_pc_10012360
  ret i32 %arg1
}

declare i8* @_strncat(i8*, i8*, i32) local_unnamed_addr

declare i32 @__isleadbyte_l(i32) local_unnamed_addr

declare i8* @_strncpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @__atoi64() local_unnamed_addr

define i32 @function_100128e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100128e0:
  %v0_100128e6 = call i32 @__atoi64()
  ret i32 %v0_100128e6
}

declare i32 @__strtoi64(i32) local_unnamed_addr

declare double @__strtod_l(i8*, i8**, %__locale_struct*) local_unnamed_addr

define i32 @function_10012c64(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10012c64:
  %v1_10012c71 = inttoptr i32 %arg1 to i8*
  %v3_10012c71 = inttoptr i32 %arg2 to i8**
  %v7_10012c71 = call double @__strtod_l(i8* %v1_10012c71, i8** %v3_10012c71, %__locale_struct* null)
  %v8_10012c71 = fpext double %v7_10012c71 to x86_fp80
  store x86_fp80 %v8_10012c71, x86_fp80* @st7, align 4
  %v9_10012c71 = fptrunc double %v7_10012c71 to float
  %v10_10012c71 = bitcast float %v9_10012c71 to i32
  ret i32 %v10_10012c71
}

declare i32 @__wtol() local_unnamed_addr

define i32 @function_10012c91(i32 %arg1) local_unnamed_addr {
dec_label_pc_10012c91:
  %v0_10012c97 = call i32 @__wtol()
  ret i32 %v0_10012c97
}

declare i32 @_sscanf(i8*, i8*, ...) local_unnamed_addr

declare i32 @__atof_l(i32, i32, i32) local_unnamed_addr

define i32 @function_10012dd7(i32 %arg1) local_unnamed_addr {
dec_label_pc_10012dd7:
  %v0_10012dd9 = load i32, i32* @ebp, align 4
  %v3_10012de1 = call i32 @__atof_l(i32 %arg1, i32 0, i32 %v0_10012dd9)
  store i32 0, i32* @ecx, align 4
  ret i32 %v3_10012de1
}

declare i32* @__errno() local_unnamed_addr

declare i32 @_toupper(i32) local_unnamed_addr

declare i32 @_isdigit(i32) local_unnamed_addr

declare i32 @_isalnum(i32) local_unnamed_addr

declare i32 @_strlen(i8*) local_unnamed_addr

define i32 @__initp_misc_invarg(i32 %arg1) local_unnamed_addr {
dec_label_pc_100144ef:
  store i32 %arg1, i32* @global_var_1002d4c4.502, align 4
  ret i32 %arg1
}

declare i32 @__invalid_parameter_noinfo() local_unnamed_addr

declare i32 @__unlock(i32) local_unnamed_addr

define i32 @function_100147fa() local_unnamed_addr {
dec_label_pc_100147fa:
  %v1_100147fc = call i32 @__unlock(i32 10)
  store i32 10, i32* @ecx, align 4
  ret i32 %v1_100147fc
}

declare i32 @__lock(i32) local_unnamed_addr

declare i32 @__SEH_epilog4() local_unnamed_addr

define i32 @"@__security_check_cookie@4"() local_unnamed_addr {
dec_label_pc_10014a2f:
  %v0_10014a2f = load i32, i32* @ecx, align 4
  %v1_10014a2f = load i32, i32* @global_var_100291b0.503, align 4
  %v12_10014a2f = icmp eq i32 %v0_10014a2f, %v1_10014a2f
  %v1_10014a35 = icmp eq i1 %v12_10014a2f, false
  br i1 %v1_10014a35, label %dec_label_pc_10014a39, label %dec_label_pc_10014a37

dec_label_pc_10014a37:                            ; preds = %dec_label_pc_10014a2f
  %v0_10014a37 = load i32, i32* @eax, align 4
  ret i32 %v0_10014a37

dec_label_pc_10014a39:                            ; preds = %dec_label_pc_10014a2f
  %v0_10014a39 = call i32 @___report_gsfailure()
  ret i32 %v0_10014a39
}

declare i32 @_write_char() local_unnamed_addr

define i32 @function_100151a3(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100151a3:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_100151a3 = load i32, i32* @edi, align 4
  %v0_100151a8 = load i32, i32* @ecx, align 4
  store i32 %v0_100151a8, i32* %stack_var_-8, align 4
  %v0_100151a9 = load i32, i32* @ebx, align 4
  %v1_100151a9 = add i32 %v0_100151a9, 12
  %v2_100151a9 = inttoptr i32 %v1_100151a9 to i8*
  %v3_100151a9 = load i8, i8* %v2_100151a9, align 1
  %v4_100151a9 = and i8 %v3_100151a9, 64
  %v5_100151a9 = icmp eq i8 %v4_100151a9, 0
  %v0_100151ad = load i32, i32* @esi, align 4
  store i32 %v0_100151ad, i32* %stack_var_-12, align 4
  %v0_100151ae = load i32, i32* @eax, align 4
  store i32 %v0_100151a3, i32* %eax.global-to-local, align 4
  store i32 %v0_100151a3, i32* %stack_var_-8, align 4
  br i1 %v5_100151a9, label %dec_label_pc_100151c4, label %dec_label_pc_100151b7

dec_label_pc_100151b7:                            ; preds = %dec_label_pc_100151a3
  %v1_100151b7 = add i32 %v0_100151a9, 8
  %v2_100151b7 = inttoptr i32 %v1_100151b7 to i32*
  %v3_100151b7 = load i32, i32* %v2_100151b7, align 4
  %v10_100151b7 = icmp eq i32 %v3_100151b7, 0
  %v1_100151bb = icmp eq i1 %v10_100151b7, false
  br i1 %v1_100151bb, label %dec_label_pc_100151c4, label %dec_label_pc_100151bd

dec_label_pc_100151bd:                            ; preds = %dec_label_pc_100151b7
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v4_100151c0 = mul i32 %arg2, 2
  %v21_100151c0 = inttoptr i32 %v0_100151ae to i32*
  store i32 %v4_100151c0, i32* %v21_100151c0, align 4
  br label %dec_label_pc_10015202

dec_label_pc_100151c4:                            ; preds = %dec_label_pc_100151b7, %dec_label_pc_100151a3
  %v11_100151c4 = inttoptr i32 %v0_100151a3 to i32*
  store i32 0, i32* %v11_100151c4, align 4
  %v7_100151cb = icmp sgt i32 %arg2, 0
  br i1 %v7_100151cb, label %dec_label_pc_100151cd.preheader, label %dec_label_pc_100151fd

dec_label_pc_100151cd.preheader:                  ; preds = %dec_label_pc_100151c4
  %v12_100151e4 = icmp eq i32 %v0_100151a3, 42
  %v1_100151e7 = icmp eq i1 %v12_100151e4, false
  br label %dec_label_pc_100151cd

dec_label_pc_100151cd:                            ; preds = %dec_label_pc_100151cd.preheader, %dec_label_pc_100151f2
  %stack_var_8.0 = phi i32 [ %v4_100151d2, %dec_label_pc_100151f2 ], [ %arg2, %dec_label_pc_100151cd.preheader ]
  %stack_var_4.0 = phi i32 [ %v4_100151dc, %dec_label_pc_100151f2 ], [ %arg1, %dec_label_pc_100151cd.preheader ]
  store i32 %stack_var_4.0, i32* %eax.global-to-local, align 4
  %v1_100151d0 = inttoptr i32 %stack_var_4.0 to i8*
  %v2_100151d0 = load i8, i8* %v1_100151d0, align 1
  %v3_100151d0 = zext i8 %v2_100151d0 to i32
  %v5_100151d0 = and i32 %stack_var_4.0, -256
  %v6_100151d0 = or i32 %v3_100151d0, %v5_100151d0
  store i32 %v6_100151d0, i32* %eax.global-to-local, align 4
  %v4_100151d2 = add i32 %stack_var_8.0, -1
  %v12_100151d2 = icmp eq i32 %v4_100151d2, 0
  %v13_100151d2 = icmp slt i32 %v4_100151d2, 0
  %v0_100151d5 = load i32, i32* @ebx, align 4
  store i32 %v0_100151d5, i32* @ecx, align 4
  %v0_100151d7 = call i32 @_write_char()
  store i32 %v0_100151d7, i32* %eax.global-to-local, align 4
  %v4_100151dc = add i32 %stack_var_4.0, 1
  %v12_100151df = icmp eq i32 %v0_100151d7, -1
  %v1_100151e2 = icmp eq i1 %v12_100151df, false
  br i1 %v1_100151e2, label %dec_label_pc_100151f2, label %dec_label_pc_100151e4

dec_label_pc_100151e4:                            ; preds = %dec_label_pc_100151cd
  br i1 %v1_100151e7, label %dec_label_pc_100151f8, label %dec_label_pc_100151e9

dec_label_pc_100151e9:                            ; preds = %dec_label_pc_100151e4
  %v0_100151e9 = load i32, i32* @ebx, align 4
  store i32 %v0_100151e9, i32* @ecx, align 4
  %v1_100151eb = and i32 %v0_100151d7, -256
  %v2_100151eb = or i32 %v1_100151eb, 63
  store i32 %v2_100151eb, i32* %eax.global-to-local, align 4
  %v0_100151ed = call i32 @_write_char()
  store i32 %v0_100151ed, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100151f2

dec_label_pc_100151f2:                            ; preds = %dec_label_pc_100151e9, %dec_label_pc_100151cd
  %v3_100151f6 = icmp eq i1 %v13_100151d2, false
  %v4_100151f6 = icmp eq i1 %v12_100151d2, false
  %v5_100151f6 = icmp eq i1 %v3_100151f6, %v4_100151f6
  br i1 %v5_100151f6, label %dec_label_pc_100151cd, label %dec_label_pc_100151f8

dec_label_pc_100151f8:                            ; preds = %dec_label_pc_100151f2, %dec_label_pc_100151e4
  %v9_100151f8 = icmp eq i32 %v0_100151a3, 0
  %v1_100151fb = icmp eq i1 %v9_100151f8, false
  br i1 %v1_100151fb, label %dec_label_pc_10015202, label %dec_label_pc_100151fd

dec_label_pc_100151fd:                            ; preds = %dec_label_pc_100151c4, %dec_label_pc_100151f8
  %v3_100151fd = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_100151fd, i32* %eax.global-to-local, align 4
  store i32 %v3_100151fd, i32* %v11_100151c4, align 4
  br label %dec_label_pc_10015202

dec_label_pc_10015202:                            ; preds = %dec_label_pc_100151fd, %dec_label_pc_100151f8, %dec_label_pc_100151bd
  %v2_10015202 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10015202, i32* @esi, align 4
  %v0_10015204 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10015204
}

define i32 @__output_l(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10015205:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-560 = alloca i8, align 1
  %stack_var_-528 = alloca i32, align 4
  %tmp348 = call i32 @__decompiler_undefined_function_0()
  %tmp349 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-588 = alloca i8*, align 4
  %stack_var_-556 = alloca i32, align 4
  %stack_var_-552 = alloca i32, align 4
  %tmp358 = call i32 @__decompiler_undefined_function_0()
  %tmp359 = call i8 @__decompiler_undefined_function_2()
  %stack_var_-608 = alloca i32, align 4
  %stack_var_-644 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10015207 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_10015207, i32* %stack_var_-4, align 4
  %v4_10015207 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_10015207, i32* @ebp, align 4
  %v15_1001520a = ptrtoint i32* %stack_var_-644 to i32
  %v0_10015210 = load i32, i32* @global_var_100291b0.503, align 4
  %v2_10015215 = xor i32 %v0_10015210, %v4_10015207
  %v0_1001521a = load i32, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v0_1001521e = load i32, i32* %esi.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_10015224 = load i32, i32* %edi.global-to-local, align 4
  store i32 %arg4, i32* %edi.global-to-local, align 4
  %v2_1001522b = ptrtoint i32* %stack_var_-608 to i32
  store i32 %v2_1001522b, i32* @ecx, align 4
  %v4_10015267 = call i32 @"??0_LocaleUpdate@@QAE@PAUlocaleinfo_struct@@@Z"(i32 %arg3, i32 %v0_10015224, i32 %v0_1001521e, i32 %v0_1001521a)
  store i32 %v4_10015267, i32* %eax.global-to-local, align 4
  %v0_1001526c = call i32* @__errno()
  %v2_1001526c = ptrtoint i32* %v0_1001526c to i32
  store i32 %v2_1001526c, i32* %eax.global-to-local, align 4
  %v1_10015277 = icmp eq i32 %arg1, 0
  %v1_10015279 = icmp eq i1 %v1_10015277, false
  br i1 %v1_10015279, label %dec_label_pc_100152a6, label %dec_label_pc_1001527b

dec_label_pc_1001527b:                            ; preds = %dec_label_pc_100157fc, %dec_label_pc_100155a9, %dec_label_pc_1001530a, %dec_label_pc_10015300, %dec_label_pc_100152da, %dec_label_pc_10015205
  %v0_1001527b = call i32* @__errno()
  %v2_1001527b = ptrtoint i32* %v0_1001527b to i32
  store i32 %v2_1001527b, i32* %eax.global-to-local, align 4
  store i32 22, i32* %v0_1001527b, align 4
  %v0_10015286 = call i32 @__invalid_parameter_noinfo()
  store i32 %v0_10015286, i32* %eax.global-to-local, align 4
  %v10_1001528b = icmp eq i8 %tmp359, 0
  br i1 %v10_1001528b, label %dec_label_pc_1001529e, label %dec_label_pc_10015294

dec_label_pc_10015294:                            ; preds = %dec_label_pc_1001527b
  %v1_1001529a = add i32 %tmp358, 112
  %v2_1001529a = inttoptr i32 %v1_1001529a to i32*
  %v3_1001529a = load i32, i32* %v2_1001529a, align 4
  %v4_1001529a = and i32 %v3_1001529a, -3
  store i32 %v4_1001529a, i32* %v2_1001529a, align 4
  br label %dec_label_pc_1001529e

dec_label_pc_1001529e:                            ; preds = %dec_label_pc_10015294, %dec_label_pc_1001527b
  br label %dec_label_pc_10015ddd

dec_label_pc_100152a6:                            ; preds = %dec_label_pc_10015205
  %v1_100152a6 = add i32 %arg1, 12
  %v2_100152a6 = inttoptr i32 %v1_100152a6 to i8*
  %v3_100152a6 = load i8, i8* %v2_100152a6, align 1
  %v4_100152a6 = and i8 %v3_100152a6, 64
  %v5_100152a6 = icmp eq i8 %v4_100152a6, 0
  %v1_100152aa = icmp eq i1 %v5_100152a6, false
  br i1 %v1_100152aa, label %dec_label_pc_1001530a, label %dec_label_pc_100152ac

dec_label_pc_100152ac:                            ; preds = %dec_label_pc_100152a6
  %v1_100152ad = inttoptr i32 %arg1 to %_IO_FILE*
  %v2_100152ad = call i32 @__fileno(%_IO_FILE* %v1_100152ad)
  store i32 %v2_100152ad, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  store i32 ptrtoint (i32* @global_var_100292d0.504 to i32), i32* %edx.global-to-local, align 4
  %v10_100152b8 = icmp eq i32 %v2_100152ad, -1
  br i1 %v10_100152b8, label %dec_label_pc_100152da, label %dec_label_pc_100152bd

dec_label_pc_100152bd:                            ; preds = %dec_label_pc_100152ac
  %v10_100152bd = icmp eq i32 %v2_100152ad, -2
  br i1 %v10_100152bd, label %dec_label_pc_100152da, label %dec_label_pc_100152c2

dec_label_pc_100152c2:                            ; preds = %dec_label_pc_100152bd
  %v2_100152c9 = sdiv i32 %v2_100152ad, 32
  store i32 %v2_100152c9, i32* %esi.global-to-local, align 4
  %v1_100152c4 = mul i32 %v2_100152ad, 64
  %v2_100152cc = and i32 %v1_100152c4, 1984
  store i32 %v2_100152cc, i32* @ecx, align 4
  %v2_100152cf = mul nsw i32 %v2_100152c9, 4
  %v3_100152cf = add i32 %v2_100152cf, ptrtoint (i32* @global_var_1002e160.505 to i32)
  %v4_100152cf = inttoptr i32 %v3_100152cf to i32*
  %v5_100152cf = load i32, i32* %v4_100152cf, align 4
  %v6_100152cf = add i32 %v5_100152cf, %v2_100152cc
  br label %dec_label_pc_100152da

dec_label_pc_100152da:                            ; preds = %dec_label_pc_100152ac, %dec_label_pc_100152bd, %dec_label_pc_100152c2
  %storemerge15 = phi i32 [ %v6_100152cf, %dec_label_pc_100152c2 ], [ ptrtoint (i32* @global_var_100292d0.504 to i32), %dec_label_pc_100152bd ], [ ptrtoint (i32* @global_var_100292d0.504 to i32), %dec_label_pc_100152ac ]
  store i32 %storemerge15, i32* @ecx, align 4
  %v1_100152da = add i32 %storemerge15, 36
  %v2_100152da = inttoptr i32 %v1_100152da to i8*
  %v3_100152da = load i8, i8* %v2_100152da, align 1
  %v4_100152da = and i8 %v3_100152da, 127
  %v5_100152da = icmp eq i8 %v4_100152da, 0
  %v1_100152de = icmp eq i1 %v5_100152da, false
  br i1 %v1_100152de, label %dec_label_pc_1001527b, label %dec_label_pc_100152e0

dec_label_pc_100152e0:                            ; preds = %dec_label_pc_100152da
  br i1 %v10_100152b8, label %dec_label_pc_10015300, label %dec_label_pc_100152e5

dec_label_pc_100152e5:                            ; preds = %dec_label_pc_100152e0
  %v10_100152e5 = icmp eq i32 %v2_100152ad, -2
  br i1 %v10_100152e5, label %dec_label_pc_10015300, label %dec_label_pc_100152ea

dec_label_pc_100152ea:                            ; preds = %dec_label_pc_100152e5
  %v2_100152ef = sdiv i32 %v2_100152ad, 32
  store i32 %v2_100152ef, i32* @ecx, align 4
  %v1_100152ec = mul i32 %v2_100152ad, 64
  %v2_100152f2 = and i32 %v1_100152ec, 1984
  store i32 %v2_100152f2, i32* %eax.global-to-local, align 4
  %v2_100152f5 = mul nsw i32 %v2_100152ef, 4
  %v3_100152f5 = add i32 %v2_100152f5, ptrtoint (i32* @global_var_1002e160.505 to i32)
  %v4_100152f5 = inttoptr i32 %v3_100152f5 to i32*
  %v5_100152f5 = load i32, i32* %v4_100152f5, align 4
  %v6_100152f5 = add i32 %v5_100152f5, %v2_100152f2
  br label %dec_label_pc_10015300

dec_label_pc_10015300:                            ; preds = %dec_label_pc_100152e0, %dec_label_pc_100152e5, %dec_label_pc_100152ea
  %storemerge14 = phi i32 [ %v6_100152f5, %dec_label_pc_100152ea ], [ ptrtoint (i32* @global_var_100292d0.504 to i32), %dec_label_pc_100152e5 ], [ ptrtoint (i32* @global_var_100292d0.504 to i32), %dec_label_pc_100152e0 ]
  store i32 %storemerge14, i32* %eax.global-to-local, align 4
  %v1_10015300 = add i32 %storemerge14, 36
  %v2_10015300 = inttoptr i32 %v1_10015300 to i8*
  %v3_10015300 = load i8, i8* %v2_10015300, align 1
  %v5_10015300 = icmp sgt i8 %v3_10015300, -1
  %v1_10015304 = icmp eq i1 %v5_10015300, false
  br i1 %v1_10015304, label %dec_label_pc_1001527b, label %dec_label_pc_1001530a

dec_label_pc_1001530a:                            ; preds = %dec_label_pc_10015300, %dec_label_pc_100152a6
  store i32 0, i32* @ecx, align 4
  %v0_1001530c = load i32, i32* %ebx.global-to-local, align 4
  %v12_1001530c = icmp eq i32 %v0_1001530c, 0
  br i1 %v12_1001530c, label %dec_label_pc_1001527b, label %dec_label_pc_10015314

dec_label_pc_10015314:                            ; preds = %dec_label_pc_1001530a
  %v1_10015314 = inttoptr i32 %v0_1001530c to i8*
  %v2_10015314 = load i8, i8* %v1_10015314, align 1
  %v3_10015314 = zext i8 %v2_10015314 to i32
  %v4_10015314 = load i32, i32* %edx.global-to-local, align 4
  %v5_10015314 = and i32 %v4_10015314, -256
  %v6_10015314 = or i32 %v5_10015314, %v3_10015314
  store i32 %v6_10015314, i32* @edx, align 4
  store i32 0, i32* %stack_var_-552, align 4
  store i32 0, i32* %stack_var_-556, align 4
  store i8* null, i8** %stack_var_-588, align 4
  %v5_1001532e = icmp eq i8 %v2_10015314, 0
  br i1 %v5_1001532e, label %dec_label_pc_10015dc4, label %dec_label_pc_10015336.preheader

dec_label_pc_10015336.preheader:                  ; preds = %dec_label_pc_10015314
  %v2_100155d1 = ptrtoint i32* %stack_var_-552 to i32
  %v2_10015c5f = ptrtoint i8* %stack_var_-560 to i32
  %v2_10015cd5 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10015cd9 = ptrtoint i32* %stack_var_-628 to i32
  %v2_10015af8 = ptrtoint i32* %stack_var_-17 to i32
  %v2_10015888 = ptrtoint i32* %stack_var_-528 to i32
  %tmp425 = bitcast i8** %stack_var_-588 to i32*
  %v2_100156ff = ptrtoint i32* %stack_var_-556 to i32
  %v1_10015336535 = add i32 %v0_1001530c, 1
  store i32 %v1_10015336535, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_1001534b

dec_label_pc_1001534b:                            ; preds = %dec_label_pc_10015336.preheader, %dec_label_pc_10015db1
  %v1_10015336560 = phi i32 [ %v1_10015336535, %dec_label_pc_10015336.preheader ], [ %v1_10015336, %dec_label_pc_10015db1 ]
  %stack_var_-548.0558 = phi i32 [ %tmp348, %dec_label_pc_10015336.preheader ], [ %stack_var_-548.9, %dec_label_pc_10015db1 ]
  %stack_var_-636.0556 = phi i32 [ %tmp349, %dec_label_pc_10015336.preheader ], [ %stack_var_-636.6, %dec_label_pc_10015db1 ]
  %stack_var_-533.0555 = phi i8 [ %v2_10015314, %dec_label_pc_10015336.preheader ], [ %v2_10015da5, %dec_label_pc_10015db1 ]
  %stack_var_-576.0554 = phi i32 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-576.4, %dec_label_pc_10015db1 ]
  %stack_var_-584.0551 = phi i32 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-584.4, %dec_label_pc_10015db1 ]
  %stack_var_-568.0549 = phi i32 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-568.7, %dec_label_pc_10015db1 ]
  %stack_var_-540.0547 = phi i64 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-540.12, %dec_label_pc_10015db1 ]
  %stack_var_-572.0544 = phi i64 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-572.1, %dec_label_pc_10015db1 ]
  %stack_var_-532.0542 = phi i8 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-532.12, %dec_label_pc_10015db1 ]
  %stack_var_-592.0540 = phi i32 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-592.5, %dec_label_pc_10015db1 ]
  %stack_var_-544.0538 = phi i32 [ %arg4, %dec_label_pc_10015336.preheader ], [ %stack_var_-544.6, %dec_label_pc_10015db1 ]
  %v0_10015352537 = phi i32 [ %v6_10015314, %dec_label_pc_10015336.preheader ], [ %v4_10015dbd, %dec_label_pc_10015db1 ]
  %v0_10015363536 = phi i32 [ 0, %dec_label_pc_10015336.preheader ], [ %stack_var_-632.1, %dec_label_pc_10015db1 ]
  %v1_1001534b = add i32 %v0_10015352537, -32
  store i32 %v1_1001534b, i32* %eax.global-to-local, align 4
  %v1_1001534e = trunc i32 %v1_1001534b to i8
  %tmp575 = icmp ult i8 %v1_1001534e, 89
  br i1 %tmp575, label %dec_label_pc_10015352, label %dec_label_pc_10015361

dec_label_pc_10015352:                            ; preds = %dec_label_pc_1001534b
  store i32 %v0_10015352537, i32* %eax.global-to-local, align 4
  %v1_10015355 = add i32 %v0_10015352537, ptrtoint (i8** @global_var_10024230.506 to i32)
  %v2_10015355 = inttoptr i32 %v1_10015355 to i8*
  %v3_10015355 = load i8, i8* %v2_10015355, align 1
  %v4_10015355 = sext i8 %v3_10015355 to i32
  store i32 %v4_10015355, i32* %eax.global-to-local, align 4
  %v1_1001535c = and i32 %v4_10015355, 15
  br label %dec_label_pc_10015363

dec_label_pc_10015361:                            ; preds = %dec_label_pc_1001534b
  br label %dec_label_pc_10015363

dec_label_pc_10015363:                            ; preds = %dec_label_pc_10015361, %dec_label_pc_10015352
  %storemerge13 = phi i32 [ 0, %dec_label_pc_10015361 ], [ %v1_1001535c, %dec_label_pc_10015352 ]
  store i32 %storemerge13, i32* %eax.global-to-local, align 4
  %v2_10015363 = mul nuw nsw i32 %storemerge13, 8
  %v3_10015363 = add i32 %v0_10015363536, ptrtoint (i32* @global_var_10024250.507 to i32)
  %v4_10015363 = add i32 %v3_10015363, %v2_10015363
  %v5_10015363 = inttoptr i32 %v4_10015363 to i8*
  %v6_10015363 = load i8, i8* %v5_10015363, align 1
  %v7_10015363 = sext i8 %v6_10015363 to i32
  store i32 %v7_10015363, i32* %eax.global-to-local, align 4
  %v0_1001536b = load i32, i32* @esp, align 4
  %v1_1001536b = add i32 %v0_1001536b, -4
  %v2_1001536b = inttoptr i32 %v1_1001536b to i32*
  store i32 7, i32* %v2_1001536b, align 4
  %v0_1001536d = load i32, i32* %eax.global-to-local, align 4
  %v2_1001536d = sdiv i32 %v0_1001536d, 16
  store i32 %v2_1001536d, i32* %eax.global-to-local, align 4
  %v2_10015370 = load i32, i32* %v2_1001536b, align 4
  store i32 %v2_10015370, i32* @ecx, align 4
  store i32 %v2_1001536d, i32* @1, align 4
  switch i32 %v2_1001536d, label %dec_label_pc_10015d9f [
    i32 0, label %dec_label_pc_10015363.dec_label_pc_10015587_crit_edge
    i32 1, label %dec_label_pc_10015386
    i32 2, label %dec_label_pc_100153b6
    i32 3, label %dec_label_pc_10015414
    i32 4, label %dec_label_pc_10015460
    i32 5, label %dec_label_pc_1001546b
    i32 6, label %dec_label_pc_100154b1
    i32 7, label %dec_label_pc_100155e1
  ]

dec_label_pc_10015363.dec_label_pc_10015587_crit_edge: ; preds = %dec_label_pc_10015363
  %v4_10015587.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10015587

dec_label_pc_10015386:                            ; preds = %dec_label_pc_10015363
  %v0_1001538d = load i32, i32* @esi, align 4
  %v4_10015399 = sext i32 %v0_1001538d to i64
  %v4_100153a5 = trunc i32 %v0_1001538d to i8
  br label %dec_label_pc_10015d9f

dec_label_pc_100153b6:                            ; preds = %dec_label_pc_10015363
  %v0_100153b6 = load i32, i32* @edx, align 4
  %v1_100153b9 = add i32 %v0_100153b6, -32
  %v9_100153b9 = icmp eq i32 %v1_100153b9, 0
  store i32 %v1_100153b9, i32* %eax.global-to-local, align 4
  br i1 %v9_100153b9, label %dec_label_pc_10015408, label %dec_label_pc_100153be

dec_label_pc_100153be:                            ; preds = %dec_label_pc_100153b6
  %v1_100153be = add i32 %v0_100153b6, -35
  %v10_100153be = icmp eq i32 %v1_100153be, 0
  store i32 %v1_100153be, i32* %eax.global-to-local, align 4
  br i1 %v10_100153be, label %dec_label_pc_100153f9, label %dec_label_pc_100153c3

dec_label_pc_100153c3:                            ; preds = %dec_label_pc_100153be
  %v1_100153c3 = add i32 %v0_100153b6, -43
  %v10_100153c3 = icmp eq i32 %v1_100153c3, 0
  store i32 %v1_100153c3, i32* %eax.global-to-local, align 4
  br i1 %v10_100153c3, label %dec_label_pc_100153ed, label %dec_label_pc_100153c8

dec_label_pc_100153c8:                            ; preds = %dec_label_pc_100153c3
  %v1_100153c9 = add i32 %v0_100153b6, -45
  %v9_100153c9 = icmp eq i32 %v1_100153c9, 0
  store i32 %v1_100153c9, i32* %eax.global-to-local, align 4
  br i1 %v9_100153c9, label %dec_label_pc_100153e1, label %dec_label_pc_100153cc

dec_label_pc_100153cc:                            ; preds = %dec_label_pc_100153c8
  %v1_100153cc = add i32 %v0_100153b6, -48
  %v10_100153cc = icmp eq i32 %v1_100153cc, 0
  store i32 %v1_100153cc, i32* %eax.global-to-local, align 4
  %v1_100153cf = icmp eq i1 %v10_100153cc, false
  br i1 %v1_100153cf, label %dec_label_pc_10015d9f, label %dec_label_pc_100153d5

dec_label_pc_100153d5:                            ; preds = %dec_label_pc_100153cc
  %v5_100153d5 = or i8 %stack_var_-532.0542, 8
  br label %dec_label_pc_10015d9f

dec_label_pc_100153e1:                            ; preds = %dec_label_pc_100153c8
  %v5_100153e1 = or i8 %stack_var_-532.0542, 4
  br label %dec_label_pc_10015d9f

dec_label_pc_100153ed:                            ; preds = %dec_label_pc_100153c3
  %v5_100153ed = or i8 %stack_var_-532.0542, 1
  br label %dec_label_pc_10015d9f

dec_label_pc_100153f9:                            ; preds = %dec_label_pc_100153be
  %v5_100153f9 = or i8 %stack_var_-532.0542, -128
  br label %dec_label_pc_10015d9f

dec_label_pc_10015408:                            ; preds = %dec_label_pc_100153b6
  %v5_10015408 = or i8 %stack_var_-532.0542, 2
  br label %dec_label_pc_10015d9f

dec_label_pc_10015414:                            ; preds = %dec_label_pc_10015363
  %v0_10015414 = load i32, i32* @edx, align 4
  %v1_10015414 = trunc i32 %v0_10015414 to i8
  %v11_10015414 = icmp eq i8 %v1_10015414, 42
  %v1_10015417 = icmp eq i1 %v11_10015414, false
  br i1 %v1_10015417, label %dec_label_pc_10015445, label %dec_label_pc_10015419

dec_label_pc_10015419:                            ; preds = %dec_label_pc_10015414
  %v0_10015419 = load i32, i32* %edi.global-to-local, align 4
  %v1_10015419 = add i32 %v0_10015419, 4
  store i32 %v1_10015419, i32* %edi.global-to-local, align 4
  %v2_10015422 = inttoptr i32 %v0_10015419 to i32*
  %v3_10015422 = load i32, i32* %v2_10015422, align 4
  store i32 %v3_10015422, i32* %edi.global-to-local, align 4
  %v4_10015425 = sext i32 %v3_10015422 to i64
  %v1_1001542b = load i32, i32* @esi, align 4
  %v5_1001542d = icmp slt i32 %v3_10015422, %v1_1001542b
  br i1 %v5_1001542d, label %dec_label_pc_10015433, label %dec_label_pc_10015d9f

dec_label_pc_10015433:                            ; preds = %dec_label_pc_10015419
  %v5_10015433 = or i8 %stack_var_-532.0542, 4
  %v5_1001543a = sub i32 0, %v3_10015422
  %v19_1001543a = sext i32 %v5_1001543a to i64
  br label %dec_label_pc_10015d9f

dec_label_pc_10015445:                            ; preds = %dec_label_pc_10015414
  %sext17 = mul i64 %stack_var_-572.0544, 4294967296
  %v2_1001544b = sdiv i64 %sext17, 4294967296
  %v3_1001544b = mul nsw i64 %v2_1001544b, 10
  %v4_1001544b = trunc i64 %v3_1001544b to i32
  store i32 %v0_10015414, i32* @ecx, align 4
  %v3_10015451 = add i32 %v4_1001544b, -48
  %v4_10015451 = add i32 %v3_10015451, %v0_10015414
  store i32 %v4_10015451, i32* %eax.global-to-local, align 4
  %v4_10015455 = sext i32 %v4_10015451 to i64
  br label %dec_label_pc_10015d9f

dec_label_pc_10015460:                            ; preds = %dec_label_pc_10015363
  %v0_10015460 = load i32, i32* @esi, align 4
  %v4_10015460 = sext i32 %v0_10015460 to i64
  br label %dec_label_pc_10015d9f

dec_label_pc_1001546b:                            ; preds = %dec_label_pc_10015363
  %v0_1001546b = load i32, i32* @edx, align 4
  %v1_1001546b = trunc i32 %v0_1001546b to i8
  %v11_1001546b = icmp eq i8 %v1_1001546b, 42
  %v1_1001546e = icmp eq i1 %v11_1001546b, false
  br i1 %v1_1001546e, label %dec_label_pc_10015496, label %dec_label_pc_10015470

dec_label_pc_10015470:                            ; preds = %dec_label_pc_1001546b
  %v0_10015470 = load i32, i32* %edi.global-to-local, align 4
  %v1_10015470 = add i32 %v0_10015470, 4
  store i32 %v1_10015470, i32* %edi.global-to-local, align 4
  %v2_10015479 = inttoptr i32 %v0_10015470 to i32*
  %v3_10015479 = load i32, i32* %v2_10015479, align 4
  store i32 %v3_10015479, i32* %edi.global-to-local, align 4
  %v4_1001547c = sext i32 %v3_10015479 to i64
  %v1_10015482 = load i32, i32* @esi, align 4
  %v5_10015484 = icmp slt i32 %v3_10015479, %v1_10015482
  br i1 %v5_10015484, label %dec_label_pc_1001548a, label %dec_label_pc_10015d9f

dec_label_pc_1001548a:                            ; preds = %dec_label_pc_10015470
  br label %dec_label_pc_10015d9f

dec_label_pc_10015496:                            ; preds = %dec_label_pc_1001546b
  %sext = mul i64 %stack_var_-540.0547, 4294967296
  %v2_1001549c = sdiv i64 %sext, 4294967296
  %v3_1001549c = mul nsw i64 %v2_1001549c, 10
  %v4_1001549c = trunc i64 %v3_1001549c to i32
  store i32 %v0_1001546b, i32* @ecx, align 4
  %v3_100154a2 = add i32 %v4_1001549c, -48
  %v4_100154a2 = add i32 %v3_100154a2, %v0_1001546b
  store i32 %v4_100154a2, i32* %eax.global-to-local, align 4
  %v4_100154a6 = sext i32 %v4_100154a2 to i64
  br label %dec_label_pc_10015d9f

dec_label_pc_100154b1:                            ; preds = %dec_label_pc_10015363
  %v0_100154b1 = load i32, i32* @edx, align 4
  %v1_100154b1 = trunc i32 %v0_100154b1 to i8
  %v11_100154b1 = icmp eq i8 %v1_100154b1, 73
  br i1 %v11_100154b1, label %dec_label_pc_1001550b, label %dec_label_pc_100154b6

dec_label_pc_100154b6:                            ; preds = %dec_label_pc_100154b1
  %v11_100154b6 = icmp eq i8 %v1_100154b1, 104
  br i1 %v11_100154b6, label %dec_label_pc_100154ff, label %dec_label_pc_100154bb

dec_label_pc_100154bb:                            ; preds = %dec_label_pc_100154b6
  %v11_100154bb = icmp eq i8 %v1_100154b1, 108
  br i1 %v11_100154bb, label %dec_label_pc_100154d8, label %dec_label_pc_100154c0

dec_label_pc_100154c0:                            ; preds = %dec_label_pc_100154bb
  %v11_100154c0 = icmp eq i8 %v1_100154b1, 119
  %v1_100154c3 = icmp eq i1 %v11_100154c0, false
  br i1 %v1_100154c3, label %dec_label_pc_10015d9f, label %dec_label_pc_100154c9

dec_label_pc_100154c9:                            ; preds = %dec_label_pc_100154c0
  br label %dec_label_pc_10015d9f

dec_label_pc_100154d8:                            ; preds = %dec_label_pc_100154bb
  %v0_100154d8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_100154d8 = inttoptr i32 %v0_100154d8 to i8*
  %v2_100154d8 = load i8, i8* %v1_100154d8, align 1
  %v12_100154d8 = icmp eq i8 %v2_100154d8, 108
  %v1_100154db = icmp eq i1 %v12_100154d8, false
  br i1 %v1_100154db, label %dec_label_pc_100154f3, label %dec_label_pc_100154dd

dec_label_pc_100154dd:                            ; preds = %dec_label_pc_100154d8
  %v1_100154dd = add i32 %v0_100154d8, 1
  store i32 %v1_100154dd, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10015d9f

dec_label_pc_100154f3:                            ; preds = %dec_label_pc_100154d8
  %v5_100154f3 = or i8 %stack_var_-532.0542, 16
  br label %dec_label_pc_10015d9f

dec_label_pc_100154ff:                            ; preds = %dec_label_pc_100154b6
  %v5_100154ff = or i8 %stack_var_-532.0542, 32
  br label %dec_label_pc_10015d9f

dec_label_pc_1001550b:                            ; preds = %dec_label_pc_100154b1
  %v0_1001550b = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001550b = inttoptr i32 %v0_1001550b to i8*
  %v2_1001550b = load i8, i8* %v1_1001550b, align 1
  %v3_1001550b = zext i8 %v2_1001550b to i32
  store i32 %v3_1001550b, i32* %eax.global-to-local, align 4
  %v11_1001550d = icmp eq i8 %v2_1001550b, 54
  %v1_1001550f = icmp eq i1 %v11_1001550d, false
  br i1 %v1_1001550f, label %dec_label_pc_1001552f, label %dec_label_pc_10015511

dec_label_pc_10015511:                            ; preds = %dec_label_pc_1001550b
  %v1_10015511 = add i32 %v0_1001550b, 1
  %v2_10015511 = inttoptr i32 %v1_10015511 to i8*
  %v3_10015511 = load i8, i8* %v2_10015511, align 1
  %v13_10015511 = icmp eq i8 %v3_10015511, 52
  %v1_10015515 = icmp eq i1 %v13_10015511, false
  br i1 %v1_10015515, label %dec_label_pc_1001552f, label %dec_label_pc_10015517

dec_label_pc_10015517:                            ; preds = %dec_label_pc_10015511
  %v1_10015517 = add i32 %v0_1001550b, 2
  store i32 %v1_10015517, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10015d9f

dec_label_pc_1001552f:                            ; preds = %dec_label_pc_10015511, %dec_label_pc_1001550b
  %v11_1001552f = icmp eq i8 %v2_1001550b, 51
  %v1_10015531 = icmp eq i1 %v11_1001552f, false
  br i1 %v1_10015531, label %dec_label_pc_10015551, label %dec_label_pc_10015533

dec_label_pc_10015533:                            ; preds = %dec_label_pc_1001552f
  %v1_10015533 = add i32 %v0_1001550b, 1
  %v2_10015533 = inttoptr i32 %v1_10015533 to i8*
  %v3_10015533 = load i8, i8* %v2_10015533, align 1
  %v13_10015533 = icmp eq i8 %v3_10015533, 50
  %v1_10015537 = icmp eq i1 %v13_10015533, false
  br i1 %v1_10015537, label %dec_label_pc_10015551, label %dec_label_pc_10015539

dec_label_pc_10015539:                            ; preds = %dec_label_pc_10015533
  %v1_10015539 = add i32 %v0_1001550b, 2
  store i32 %v1_10015539, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_10015d9f

dec_label_pc_10015551:                            ; preds = %dec_label_pc_10015533, %dec_label_pc_1001552f
  %v11_10015551 = icmp eq i8 %v2_1001550b, 100
  br i1 %v11_10015551, label %dec_label_pc_10015d9f, label %dec_label_pc_10015559

dec_label_pc_10015559:                            ; preds = %dec_label_pc_10015551
  %v11_10015559 = icmp eq i8 %v2_1001550b, 105
  br i1 %v11_10015559, label %dec_label_pc_10015d9f, label %dec_label_pc_10015561

dec_label_pc_10015561:                            ; preds = %dec_label_pc_10015559
  %v11_10015561 = icmp eq i8 %v2_1001550b, 111
  br i1 %v11_10015561, label %dec_label_pc_10015d9f, label %dec_label_pc_10015569

dec_label_pc_10015569:                            ; preds = %dec_label_pc_10015561
  %v11_10015569 = icmp eq i8 %v2_1001550b, 117
  br i1 %v11_10015569, label %dec_label_pc_10015d9f, label %dec_label_pc_10015571

dec_label_pc_10015571:                            ; preds = %dec_label_pc_10015569
  %v11_10015571 = icmp eq i8 %v2_1001550b, 120
  br i1 %v11_10015571, label %dec_label_pc_10015d9f, label %dec_label_pc_10015579

dec_label_pc_10015579:                            ; preds = %dec_label_pc_10015571
  %v11_10015579 = icmp eq i8 %v2_1001550b, 88
  br i1 %v11_10015579, label %dec_label_pc_10015d9f, label %dec_label_pc_10015581

dec_label_pc_10015581:                            ; preds = %dec_label_pc_10015579
  %v0_10015581 = load i32, i32* @esi, align 4
  br label %dec_label_pc_10015587

dec_label_pc_10015587:                            ; preds = %dec_label_pc_10015363.dec_label_pc_10015587_crit_edge, %dec_label_pc_10015581
  %stack_var_-632.0 = phi i32 [ %v0_10015581, %dec_label_pc_10015581 ], [ 0, %dec_label_pc_10015363.dec_label_pc_10015587_crit_edge ]
  %v4_10015587 = phi i32 [ %v0_10015581, %dec_label_pc_10015581 ], [ %v4_10015587.pre, %dec_label_pc_10015363.dec_label_pc_10015587_crit_edge ]
  %v5_10015587 = and i32 %v4_10015587, %stack_var_-576.0554
  store i32 %v2_1001522b, i32* %v2_1001536b, align 4
  %v0_10015594 = load i32, i32* @edx, align 4
  %v1_10015594 = and i32 %v0_10015594, 255
  store i32 %v1_10015594, i32* %eax.global-to-local, align 4
  %v2_10015597 = add i32 %v0_1001536b, -8
  %v3_10015597 = inttoptr i32 %v2_10015597 to i32*
  store i32 %v1_10015594, i32* %v3_10015597, align 4
  %v1_10015598 = call i32 @__isleadbyte_l(i32 %stack_var_-632.0)
  store i32 %v1_10015598, i32* %eax.global-to-local, align 4
  %v0_1001559d = load i32, i32* @esp, align 4
  %v1_1001559d = inttoptr i32 %v0_1001559d to i32*
  %v2_1001559d = load i32, i32* %v1_1001559d, align 4
  store i32 %v2_1001559d, i32* @ecx, align 4
  %v3_1001559d = add i32 %v0_1001559d, 4
  %v1_1001559e = icmp eq i32 %v1_10015598, 0
  %v4_100155a0 = zext i8 %stack_var_-533.0555 to i32
  %v6_100155a0 = and i32 %v1_10015598, -256
  %v7_100155a0 = or i32 %v6_100155a0, %v4_100155a0
  store i32 %v7_100155a0, i32* %eax.global-to-local, align 4
  %v1_100155a6 = inttoptr i32 %v3_1001559d to i32*
  %v2_100155a6 = load i32, i32* %v1_100155a6, align 4
  store i32 %v2_100155a6, i32* @ecx, align 4
  br i1 %v1_1001559e, label %dec_label_pc_100155cb, label %dec_label_pc_100155a9

dec_label_pc_100155a9:                            ; preds = %dec_label_pc_10015587
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v2_100155d1, i32* %esi.global-to-local, align 4
  %v0_100155b5 = call i32 @_write_char()
  store i32 %v0_100155b5, i32* %eax.global-to-local, align 4
  %v0_100155ba = load i32, i32* %ebx.global-to-local, align 4
  %v1_100155ba = inttoptr i32 %v0_100155ba to i8*
  %v2_100155ba = load i8, i8* %v1_100155ba, align 1
  %v3_100155ba = zext i8 %v2_100155ba to i32
  %v5_100155ba = and i32 %v0_100155b5, -256
  %v6_100155ba = or i32 %v3_100155ba, %v5_100155ba
  store i32 %v6_100155ba, i32* %eax.global-to-local, align 4
  %v1_100155bc = add i32 %v0_100155ba, 1
  store i32 %v1_100155bc, i32* %ebx.global-to-local, align 4
  %v5_100155c3 = icmp eq i8 %v2_100155ba, 0
  br i1 %v5_100155c3, label %dec_label_pc_1001527b, label %dec_label_pc_100155cb

dec_label_pc_100155cb:                            ; preds = %dec_label_pc_100155a9, %dec_label_pc_10015587
  %stack_var_-580.0 = phi i32 [ %v1_10015336560, %dec_label_pc_10015587 ], [ %v1_100155bc, %dec_label_pc_100155a9 ]
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v2_100155d1, i32* %esi.global-to-local, align 4
  %v0_100155d7 = call i32 @_write_char()
  store i32 %v0_100155d7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015d9f

dec_label_pc_100155e1:                            ; preds = %dec_label_pc_10015363
  %v0_100155e1 = load i32, i32* @edx, align 4
  store i32 %v0_100155e1, i32* %eax.global-to-local, align 4
  %v8_100155e7 = icmp sgt i32 %v0_100155e1, 100
  br i1 %v8_100155e7, label %dec_label_pc_100157a3, label %dec_label_pc_100155ed

dec_label_pc_100155ed:                            ; preds = %dec_label_pc_100155e1
  %v10_100155e4 = icmp eq i32 %v0_100155e1, 100
  br i1 %v10_100155e4, label %dec_label_pc_1001584b, label %dec_label_pc_100155f3

dec_label_pc_100155f3:                            ; preds = %dec_label_pc_100155ed
  %v8_100155f6 = icmp sgt i32 %v0_100155e1, 83
  br i1 %v8_100155f6, label %dec_label_pc_100156b6, label %dec_label_pc_100155fc

dec_label_pc_100155fc:                            ; preds = %dec_label_pc_100155f3
  %v10_100155f3 = icmp eq i32 %v0_100155e1, 83
  br i1 %v10_100155f3, label %dec_label_pc_1001564a, label %dec_label_pc_100155fe

dec_label_pc_100155fe:                            ; preds = %dec_label_pc_100155fc
  %v1_100155fe = add i32 %v0_100155e1, -65
  %v10_100155fe = icmp eq i32 %v1_100155fe, 0
  store i32 %v1_100155fe, i32* %eax.global-to-local, align 4
  br i1 %v10_100155fe, label %dec_label_pc_10015613, label %dec_label_pc_10015603

dec_label_pc_10015603:                            ; preds = %dec_label_pc_100155fe
  %v1_10015604 = add i32 %v0_100155e1, -67
  %v9_10015604 = icmp eq i32 %v1_10015604, 0
  store i32 %v1_10015604, i32* %eax.global-to-local, align 4
  br i1 %v9_10015604, label %dec_label_pc_1001562b, label %dec_label_pc_10015607

dec_label_pc_10015607:                            ; preds = %dec_label_pc_10015603
  %v1_10015608 = add i32 %v0_100155e1, -69
  %v9_10015608 = icmp eq i32 %v1_10015608, 0
  store i32 %v1_10015608, i32* %eax.global-to-local, align 4
  br i1 %v9_10015608, label %dec_label_pc_10015613, label %dec_label_pc_1001560b

dec_label_pc_1001560b:                            ; preds = %dec_label_pc_10015607
  %v1_1001560c = add i32 %v0_100155e1, -71
  %v9_1001560c = icmp eq i32 %v1_1001560c, 0
  store i32 %v1_1001560c, i32* %eax.global-to-local, align 4
  %v1_1001560d = icmp eq i1 %v9_1001560c, false
  br i1 %v1_1001560d, label %dec_label_pc_10015bbe, label %dec_label_pc_10015613

dec_label_pc_10015613:                            ; preds = %dec_label_pc_1001560b, %dec_label_pc_10015607, %dec_label_pc_100155fe
  %v1_10015613 = trunc i32 %v0_100155e1 to i8
  %v2_10015613 = add i8 %v1_10015613, 32
  %v15_10015613 = zext i8 %v2_10015613 to i32
  %v17_10015613 = and i32 %v0_100155e1, -256
  %v18_10015613 = or i32 %v15_10015613, %v17_10015613
  store i32 %v18_10015613, i32* @edx, align 4
  br label %dec_label_pc_10015881

dec_label_pc_1001562b:                            ; preds = %dec_label_pc_10015603
  %v4_1001562b = sext i8 %stack_var_-532.0542 to i32
  %v5_1001562b = and i32 %v4_1001562b, 2096
  %v6_1001562b = icmp eq i32 %v5_1001562b, 0
  %v1_10015635 = icmp eq i1 %v6_1001562b, false
  br i1 %v1_10015635, label %dec_label_pc_100156d9, label %dec_label_pc_1001563b

dec_label_pc_1001563b:                            ; preds = %dec_label_pc_1001562b
  br label %dec_label_pc_100156d9

dec_label_pc_1001564a:                            ; preds = %dec_label_pc_100155fc
  %v4_1001564a = sext i8 %stack_var_-532.0542 to i32
  %v5_1001564a = and i32 %v4_1001564a, 2096
  %v6_1001564a = icmp eq i32 %v5_1001564a, 0
  %v1_10015654 = icmp eq i1 %v6_1001564a, false
  br i1 %v1_10015654, label %dec_label_pc_10015660, label %dec_label_pc_10015656

dec_label_pc_10015656:                            ; preds = %dec_label_pc_1001564a
  br label %dec_label_pc_10015660

dec_label_pc_10015660:                            ; preds = %dec_label_pc_100159e9, %dec_label_pc_10015656, %dec_label_pc_1001564a
  %v4_10015660 = trunc i64 %stack_var_-540.0547 to i32
  %v10_10015666 = icmp eq i32 %v4_10015660, -1
  %v1_10015669 = icmp eq i1 %v10_10015666, false
  br i1 %v1_10015669, label %dec_label_pc_10015670, label %dec_label_pc_1001566b

dec_label_pc_1001566b:                            ; preds = %dec_label_pc_10015660
  br label %dec_label_pc_10015670

dec_label_pc_10015670:                            ; preds = %dec_label_pc_1001566b, %dec_label_pc_10015660
  %storemerge566 = phi i32 [ 2147483647, %dec_label_pc_1001566b ], [ %v4_10015660, %dec_label_pc_10015660 ]
  %v0_10015bae40 = phi i32 [ 2147483647, %dec_label_pc_1001566b ], [ %v4_10015660, %dec_label_pc_10015660 ]
  store i32 %storemerge566, i32* @ecx, align 4
  %v0_10015670 = load i32, i32* %edi.global-to-local, align 4
  %v1_10015670 = add i32 %v0_10015670, 4
  store i32 %v1_10015670, i32* %edi.global-to-local, align 4
  %v4_10015673 = sext i8 %stack_var_-532.0542 to i32
  %v5_10015673 = and i32 %v4_10015673, 2064
  %v6_10015673 = icmp eq i32 %v5_10015673, 0
  %v2_10015683 = inttoptr i32 %v0_10015670 to i32*
  %v3_10015683 = load i32, i32* %v2_10015683, align 4
  store i32 %v3_10015683, i32* %edi.global-to-local, align 4
  %v1_10015b90 = icmp eq i32 %v3_10015683, 0
  %v1_10015b92 = icmp eq i1 %v1_10015b90, false
  br i1 %v6_10015673, label %dec_label_pc_10015b90, label %dec_label_pc_10015692

dec_label_pc_10015692:                            ; preds = %dec_label_pc_10015670
  br i1 %v1_10015b92, label %dec_label_pc_100156a1, label %dec_label_pc_10015696

dec_label_pc_10015696:                            ; preds = %dec_label_pc_10015692
  %v0_10015696 = load i32, i32* bitcast ([7 x i16]** @global_var_100291cc.509 to i32*), align 4
  store i32 %v0_10015696, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100156a1

dec_label_pc_100156a1:                            ; preds = %dec_label_pc_10015696, %dec_label_pc_10015692
  %stack_var_-548.1 = phi i32 [ %v3_10015683, %dec_label_pc_10015692 ], [ %v0_10015696, %dec_label_pc_10015696 ]
  store i32 %stack_var_-548.1, i32* %eax.global-to-local, align 4
  %v1_10015b8232 = icmp eq i32 %v0_10015bae40, 0
  %v1_10015b8439 = icmp eq i1 %v1_10015b8232, false
  br i1 %v1_10015b8439, label %dec_label_pc_10015b79.lr.ph, label %dec_label_pc_10015b86

dec_label_pc_10015b79.lr.ph:                      ; preds = %dec_label_pc_100156a1
  %v3_10015b7a.pre = load i32, i32* @esi, align 4
  %v4_10015b7a = trunc i32 %v3_10015b7a.pre to i16
  br label %dec_label_pc_10015b79

dec_label_pc_100156b6:                            ; preds = %dec_label_pc_100155f3
  %v1_100156b6 = add i32 %v0_100155e1, -88
  %v10_100156b6 = icmp eq i32 %v1_100156b6, 0
  store i32 %v1_100156b6, i32* %eax.global-to-local, align 4
  %extract.t29 = trunc i64 %stack_var_-540.0547 to i32
  br i1 %v10_100156b6, label %dec_label_pc_10015a13, label %dec_label_pc_100156bf

dec_label_pc_100156bf:                            ; preds = %dec_label_pc_100156b6
  %v1_100156c0 = add i32 %v0_100155e1, -90
  %v9_100156c0 = icmp eq i32 %v1_100156c0, 0
  store i32 %v1_100156c0, i32* %eax.global-to-local, align 4
  br i1 %v9_100156c0, label %dec_label_pc_10015742, label %dec_label_pc_100156c3

dec_label_pc_100156c3:                            ; preds = %dec_label_pc_100156bf
  %v2_100156c3 = sub i32 %v1_100156c0, %v2_10015370
  %v12_100156c3 = icmp eq i32 %v2_100156c3, 0
  store i32 %v2_100156c3, i32* %eax.global-to-local, align 4
  br i1 %v12_100156c3, label %dec_label_pc_10015881, label %dec_label_pc_100156cb

dec_label_pc_100156cb:                            ; preds = %dec_label_pc_100156c3
  %v1_100156cc = add i32 %v2_100156c3, -2
  %v9_100156cc = icmp eq i32 %v1_100156cc, 0
  store i32 %v1_100156cc, i32* %eax.global-to-local, align 4
  %v1_100156cd = icmp eq i1 %v9_100156cc, false
  br i1 %v1_100156cd, label %dec_label_pc_10015bbe, label %dec_label_pc_100156d3

dec_label_pc_100156d3:                            ; preds = %dec_label_pc_100156cb
  store i32 %stack_var_-544.0538, i32* %edi.global-to-local, align 4
  %.pre95 = sext i8 %stack_var_-532.0542 to i32
  br label %dec_label_pc_100156d9

dec_label_pc_100156d9:                            ; preds = %dec_label_pc_100156d3, %dec_label_pc_1001563b, %dec_label_pc_1001562b
  %v4_100156dc.pre-phi = phi i32 [ %.pre95, %dec_label_pc_100156d3 ], [ %v4_1001562b, %dec_label_pc_1001563b ], [ %v4_1001562b, %dec_label_pc_1001562b ]
  %v5_1001571e = phi i32 [ %v1_100156cc, %dec_label_pc_100156d3 ], [ 0, %dec_label_pc_1001563b ], [ 0, %dec_label_pc_1001562b ]
  %v0_100156d9 = load i32, i32* %edi.global-to-local, align 4
  %v1_100156d9 = add i32 %v0_100156d9, 4
  store i32 %v1_100156d9, i32* %edi.global-to-local, align 4
  %v5_100156dc = and i32 %v4_100156dc.pre-phi, 2064
  %v6_100156dc = icmp eq i32 %v5_100156dc, 0
  br i1 %v6_100156dc, label %dec_label_pc_1001571e, label %dec_label_pc_100156ee

dec_label_pc_100156ee:                            ; preds = %dec_label_pc_100156d9
  %v2_100156ee = inttoptr i32 %v0_100156d9 to i16*
  %v3_100156ee = load i16, i16* %v2_100156ee, align 2
  %v4_100156ee = zext i16 %v3_100156ee to i32
  store i32 %v4_100156ee, i32* %v2_1001536b, align 4
  %v1_100156f3 = add i32 %v0_1001536b, -8
  %v2_100156f3 = inttoptr i32 %v1_100156f3 to i32*
  store i32 512, i32* %v2_100156f3, align 4
  %v2_100156fe = add i32 %v0_1001536b, -12
  %v3_100156fe = inttoptr i32 %v2_100156fe to i32*
  store i32 %v2_10015888, i32* %v3_100156fe, align 4
  store i32 %v2_100156ff, i32* %eax.global-to-local, align 4
  %v2_10015705 = add i32 %v0_1001536b, -16
  %v3_10015705 = inttoptr i32 %v2_10015705 to i32*
  store i32 %v2_100156ff, i32* %v3_10015705, align 4
  %v1_10015706 = inttoptr i32 %v1_100156d9 to i32*
  %v5_10015706 = call i32 @_wctomb_s(i32* %v1_10015706, i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32), i16 ptrtoint (i32* @5 to i16))
  store i32 %v5_10015706, i32* %eax.global-to-local, align 4
  %v1_1001570e = icmp eq i32 %v5_10015706, 0
  %stack_var_-584.0. = select i1 %v1_1001570e, i32 %stack_var_-584.0551, i32 1
  br label %dec_label_pc_10015731

dec_label_pc_1001571e:                            ; preds = %dec_label_pc_100156d9
  %v2_1001571e = inttoptr i32 %v0_100156d9 to i8*
  %v3_1001571e = load i8, i8* %v2_1001571e, align 1
  %v4_1001571e = zext i8 %v3_1001571e to i32
  %v6_1001571e = and i32 %v5_1001571e, -256
  %v7_1001571e = or i32 %v4_1001571e, %v6_1001571e
  store i32 %v7_1001571e, i32* %eax.global-to-local, align 4
  store i32 %v7_1001571e, i32* %stack_var_-528, align 4
  store i32 1, i32* %stack_var_-556, align 4
  br label %dec_label_pc_10015731

dec_label_pc_10015731:                            ; preds = %dec_label_pc_100156ee, %dec_label_pc_1001571e
  %stack_var_-584.1 = phi i32 [ %stack_var_-584.0551, %dec_label_pc_1001571e ], [ %stack_var_-584.0., %dec_label_pc_100156ee ]
  store i32 %v2_10015888, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015bbe

dec_label_pc_10015742:                            ; preds = %dec_label_pc_100156bf
  %v0_10015742 = load i32, i32* %edi.global-to-local, align 4
  %v1_10015742 = inttoptr i32 %v0_10015742 to i32*
  %v2_10015742 = load i32, i32* %v1_10015742, align 4
  %v3_10015742 = inttoptr i32 %v2_10015742 to i16*
  store i32 %v2_10015742, i32* %eax.global-to-local, align 4
  %v1_10015744 = add i32 %v0_10015742, 4
  store i32 %v1_10015744, i32* %edi.global-to-local, align 4
  %v2_1001574d = icmp eq i32 %v2_10015742, 0
  br i1 %v2_1001574d, label %dec_label_pc_1001578c, label %dec_label_pc_10015751

dec_label_pc_10015751:                            ; preds = %dec_label_pc_10015742
  %v2_10015751 = add i32 %v2_10015742, 4
  %v3_10015751 = inttoptr i32 %v2_10015751 to i32*
  %v4_10015751 = load i32, i32* %v3_10015751, align 4
  store i32 %v4_10015751, i32* @ecx, align 4
  %v1_10015754 = icmp eq i32 %v4_10015751, 0
  br i1 %v1_10015754, label %dec_label_pc_1001578c, label %dec_label_pc_10015758

dec_label_pc_10015758:                            ; preds = %dec_label_pc_10015751
  %v4_10015758 = sext i8 %stack_var_-532.0542 to i32
  %v5_10015758 = and i32 %v4_10015758, 2048
  %v6_10015758 = icmp eq i32 %v5_10015758, 0
  %v3_10015762 = load i16, i16* %v3_10015742, align 2
  %v4_10015762 = sext i16 %v3_10015762 to i32
  store i32 %v4_10015762, i32* %eax.global-to-local, align 4
  br i1 %v6_10015758, label %dec_label_pc_10015781, label %dec_label_pc_1001576d

dec_label_pc_1001576d:                            ; preds = %dec_label_pc_10015758
  %v1_1001576d = ashr i32 %v4_10015762, 31
  store i32 %v1_1001576d, i32* @edx, align 4
  %v2_1001576e = sub nsw i32 %v4_10015762, %v1_1001576d
  %v2_10015770 = sdiv i32 %v2_1001576e, 2
  store i32 %v2_10015770, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015bb8

dec_label_pc_10015781:                            ; preds = %dec_label_pc_10015758
  %v4_10015781 = load i32, i32* @esi, align 4
  %v5_10015781 = and i32 %v4_10015781, %stack_var_-576.0554
  br label %dec_label_pc_10015bb8

dec_label_pc_1001578c:                            ; preds = %dec_label_pc_10015751, %dec_label_pc_10015742
  %v0_1001578c = load i32, i32* bitcast ([7 x i8]** @global_var_100291c8.511 to i32*), align 4
  store i32 %v0_1001578c, i32* %eax.global-to-local, align 4
  store i32 %v0_1001578c, i32* %v2_1001536b, align 4
  br label %dec_label_pc_10015798

dec_label_pc_10015798:                            ; preds = %dec_label_pc_100159d1, %dec_label_pc_1001578c
  %stack_var_-544.1 = phi i32 [ %v0_1001594d, %dec_label_pc_100159d1 ], [ %v1_10015744, %dec_label_pc_1001578c ]
  %stack_var_-532.3 = phi i8 [ %v5_10015881, %dec_label_pc_100159d1 ], [ %stack_var_-532.0542, %dec_label_pc_1001578c ]
  %stack_var_-540.1 = phi i64 [ %stack_var_-540.4, %dec_label_pc_100159d1 ], [ %stack_var_-540.0547, %dec_label_pc_1001578c ]
  %stack_var_-636.1 = phi i32 [ %stack_var_-636.2, %dec_label_pc_100159d1 ], [ %stack_var_-636.0556, %dec_label_pc_1001578c ]
  %stack_var_-548.2 = phi i32 [ %stack_var_-548.4, %dec_label_pc_100159d1 ], [ %v0_1001578c, %dec_label_pc_1001578c ]
  %v1_10015798 = call i32 @_strlen(i8* bitcast (i32* @5 to i8*))
  store i32 %v1_10015798, i32* %eax.global-to-local, align 4
  %v0_1001579d = load i32, i32* @esp, align 4
  %v1_1001579d = inttoptr i32 %v0_1001579d to i32*
  %v2_1001579d = load i32, i32* %v1_1001579d, align 4
  store i32 %v2_1001579d, i32* @ecx, align 4
  br label %dec_label_pc_10015bb8

dec_label_pc_100157a3:                            ; preds = %dec_label_pc_100155e1
  %v8_100157a6 = icmp sgt i32 %v0_100155e1, 112
  br i1 %v8_100157a6, label %dec_label_pc_100159e9, label %dec_label_pc_100157ac

dec_label_pc_100157ac:                            ; preds = %dec_label_pc_100157a3
  %v9_100157a3 = icmp eq i32 %v0_100155e1, 112
  br i1 %v9_100157a3, label %dec_label_pc_10015a13, label %dec_label_pc_100157bb

dec_label_pc_100157bb:                            ; preds = %dec_label_pc_100157ac
  %v7_100157be = icmp sgt i32 %v0_100155e1, 103
  br i1 %v7_100157be, label %dec_label_pc_100157c4, label %dec_label_pc_1001587b

dec_label_pc_100157c4:                            ; preds = %dec_label_pc_100157bb
  %v10_100157c4 = icmp eq i32 %v0_100155e1, 105
  br i1 %v10_100157c4, label %dec_label_pc_10015845, label %dec_label_pc_100157c9

dec_label_pc_100157c9:                            ; preds = %dec_label_pc_100157c4
  %v10_100157c9 = icmp eq i32 %v0_100155e1, 110
  br i1 %v10_100157c9, label %dec_label_pc_100157fc, label %dec_label_pc_100157ce

dec_label_pc_100157ce:                            ; preds = %dec_label_pc_100157c9
  %v10_100157ce = icmp eq i32 %v0_100155e1, 111
  %v1_100157d1 = icmp eq i1 %v10_100157ce, false
  br i1 %v1_100157d1, label %dec_label_pc_10015bbe, label %dec_label_pc_100157d7

dec_label_pc_100157d7:                            ; preds = %dec_label_pc_100157ce
  %v7_100157d7 = icmp sgt i8 %stack_var_-532.0542, -1
  store i32 %stack_var_-544.0538, i32* %edi.global-to-local, align 4
  store i32 8, i32* %stack_var_-556, align 4
  %extract.t21 = trunc i64 %stack_var_-540.0547 to i32
  br i1 %v7_100157d7, label %dec_label_pc_1001585c, label %dec_label_pc_100157f0

dec_label_pc_100157f0:                            ; preds = %dec_label_pc_100157d7
  br label %dec_label_pc_1001585c

dec_label_pc_100157fc:                            ; preds = %dec_label_pc_100157c9
  %v4_100157fc = add i32 %stack_var_-544.0538, 4
  store i32 %v4_100157fc, i32* %eax.global-to-local, align 4
  %v2_10015809 = inttoptr i32 %stack_var_-544.0538 to i32*
  %v3_10015809 = load i32, i32* %v2_10015809, align 4
  store i32 %v3_10015809, i32* %esi.global-to-local, align 4
  %v1_1001580c = call i32 @__get_printf_count_output(i32 7)
  store i32 %v1_1001580c, i32* %eax.global-to-local, align 4
  %v1_10015811 = icmp eq i32 %v1_1001580c, 0
  br i1 %v1_10015811, label %dec_label_pc_1001527b, label %dec_label_pc_10015819

dec_label_pc_10015819:                            ; preds = %dec_label_pc_100157fc
  %v6_10015819 = and i8 %stack_var_-532.0542, 32
  %v7_10015819 = icmp eq i8 %v6_10015819, 0
  %v3_1001582e = load i32, i32* %stack_var_-552, align 4
  br i1 %v7_10015819, label %dec_label_pc_1001582e, label %dec_label_pc_10015822

dec_label_pc_10015822:                            ; preds = %dec_label_pc_10015819
  %v4_10015822 = and i32 %v3_1001582e, 65535
  %v6_10015822 = and i32 %v1_1001580c, -65536
  %v7_10015822 = or i32 %v4_10015822, %v6_10015822
  store i32 %v7_10015822, i32* %eax.global-to-local, align 4
  %v1_10015829 = trunc i32 %v3_1001582e to i16
  %v2_10015829 = load i32, i32* %esi.global-to-local, align 4
  %v3_10015829 = inttoptr i32 %v2_10015829 to i16*
  store i16 %v1_10015829, i16* %v3_10015829, align 2
  br label %dec_label_pc_10015d83

dec_label_pc_1001582e:                            ; preds = %dec_label_pc_10015819
  store i32 %v3_1001582e, i32* %eax.global-to-local, align 4
  %v1_10015834 = load i32, i32* %esi.global-to-local, align 4
  %v2_10015834 = inttoptr i32 %v1_10015834 to i32*
  store i32 %v3_1001582e, i32* %v2_10015834, align 4
  br label %dec_label_pc_10015d83

dec_label_pc_10015845:                            ; preds = %dec_label_pc_100157c4
  store i32 %stack_var_-544.0538, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_1001584b

dec_label_pc_1001584b:                            ; preds = %dec_label_pc_10015845, %dec_label_pc_100155ed
  %v5_1001584b = or i8 %stack_var_-532.0542, 64
  br label %dec_label_pc_10015852

dec_label_pc_10015852:                            ; preds = %dec_label_pc_100159f2, %dec_label_pc_1001584b
  %stack_var_-532.4 = phi i8 [ %stack_var_-532.0542, %dec_label_pc_100159f2 ], [ %v5_1001584b, %dec_label_pc_1001584b ]
  store i32 10, i32* %stack_var_-556, align 4
  %extract.t = trunc i64 %stack_var_-540.0547 to i32
  br label %dec_label_pc_1001585c

dec_label_pc_1001585c:                            ; preds = %dec_label_pc_10015a2a, %dec_label_pc_10015a13, %dec_label_pc_10015852, %dec_label_pc_100157f0, %dec_label_pc_100157d7
  %stack_var_-592.1 = phi i32 [ %stack_var_-592.0540, %dec_label_pc_10015852 ], [ %storemerge11, %dec_label_pc_10015a13 ], [ %storemerge11, %dec_label_pc_10015a2a ], [ %stack_var_-592.0540, %dec_label_pc_100157d7 ], [ %stack_var_-592.0540, %dec_label_pc_100157f0 ]
  %stack_var_-532.5 = phi i8 [ %stack_var_-532.4, %dec_label_pc_10015852 ], [ %stack_var_-532.0542, %dec_label_pc_10015a13 ], [ %stack_var_-532.0542, %dec_label_pc_10015a2a ], [ %stack_var_-532.0542, %dec_label_pc_100157d7 ], [ %stack_var_-532.0542, %dec_label_pc_100157f0 ]
  %stack_var_-540.2.off0 = phi i32 [ %extract.t, %dec_label_pc_10015852 ], [ %stack_var_-540.6.off0, %dec_label_pc_10015a13 ], [ %stack_var_-540.6.off0, %dec_label_pc_10015a2a ], [ %extract.t21, %dec_label_pc_100157d7 ], [ %extract.t21, %dec_label_pc_100157f0 ]
  %stack_var_-568.1 = phi i32 [ %stack_var_-568.0549, %dec_label_pc_10015852 ], [ %stack_var_-568.0549, %dec_label_pc_10015a13 ], [ 2, %dec_label_pc_10015a2a ], [ %stack_var_-568.0549, %dec_label_pc_100157d7 ], [ %stack_var_-568.0549, %dec_label_pc_100157f0 ]
  %v4_1001585c = sext i8 %stack_var_-532.5 to i32
  store i32 %v4_1001585c, i32* @ecx, align 4
  %v2_10015862 = icmp sgt i8 %stack_var_-532.5, -1
  br i1 %v2_10015862, label %dec_label_pc_10015a4e, label %dec_label_pc_1001586e

dec_label_pc_1001586e:                            ; preds = %dec_label_pc_10015a4e, %dec_label_pc_1001585c
  %v0_1001586e = load i32, i32* %edi.global-to-local, align 4
  %v1_1001586e = inttoptr i32 %v0_1001586e to i32*
  %v2_1001586e = load i32, i32* %v1_1001586e, align 4
  store i32 %v2_1001586e, i32* %eax.global-to-local, align 4
  %v1_10015870 = add i32 %v0_1001586e, 4
  %v2_10015870 = inttoptr i32 %v1_10015870 to i32*
  %v3_10015870 = load i32, i32* %v2_10015870, align 4
  store i32 %v3_10015870, i32* @edx, align 4
  %v1_10015873 = add i32 %v0_1001586e, 8
  store i32 %v1_10015873, i32* %edi.global-to-local, align 4
  %.pre96 = and i32 %v4_1001585c, 64
  br label %dec_label_pc_10015a8d

dec_label_pc_1001587b:                            ; preds = %dec_label_pc_100157bb
  store i32 %stack_var_-544.0538, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10015881

dec_label_pc_10015881:                            ; preds = %dec_label_pc_1001587b, %dec_label_pc_100156c3, %dec_label_pc_10015613
  %v0_100158b5 = phi i32 [ %v0_100155e1, %dec_label_pc_1001587b ], [ %v0_100155e1, %dec_label_pc_100156c3 ], [ %v18_10015613, %dec_label_pc_10015613 ]
  %stack_var_-533.1 = phi i8 [ %stack_var_-533.0555, %dec_label_pc_1001587b ], [ %stack_var_-533.0555, %dec_label_pc_100156c3 ], [ %v2_10015613, %dec_label_pc_10015613 ]
  %stack_var_-636.2 = phi i32 [ %stack_var_-636.0556, %dec_label_pc_1001587b ], [ %stack_var_-636.0556, %dec_label_pc_100156c3 ], [ 1, %dec_label_pc_10015613 ]
  %v4_1001588197 = zext i8 %stack_var_-532.0542 to i32
  %v5_10015881 = or i8 %stack_var_-532.0542, 64
  store i32 %v2_10015888, i32* %ebx.global-to-local, align 4
  store i32 512, i32* %eax.global-to-local, align 4
  %v4_1001589f = trunc i64 %stack_var_-540.0547 to i32
  %v5_1001589f = load i32, i32* @esi, align 4
  %v7_100158a5 = icmp slt i32 %v4_1001589f, %v5_1001589f
  br i1 %v7_100158a5, label %dec_label_pc_1001591d, label %dec_label_pc_100158b3

dec_label_pc_100158b3:                            ; preds = %dec_label_pc_10015881
  %v18_1001589f = icmp eq i32 %v4_1001589f, %v5_1001589f
  %v1_100158b3 = icmp eq i1 %v18_1001589f, false
  br i1 %v1_100158b3, label %dec_label_pc_100158c6, label %dec_label_pc_100158b5

dec_label_pc_100158b5:                            ; preds = %dec_label_pc_100158b3
  %v1_100158b5 = trunc i32 %v0_100158b5 to i8
  %v11_100158b5 = icmp eq i8 %v1_100158b5, 103
  %v1_100158b8 = icmp eq i1 %v11_100158b5, false
  %stack_var_-540.0. = select i1 %v1_100158b8, i64 %stack_var_-540.0547, i64 1
  br label %dec_label_pc_1001591d

dec_label_pc_100158c6:                            ; preds = %dec_label_pc_100158b3
  %v9_100158cc = icmp sgt i32 %v4_1001589f, 512
  %stack_var_-540.3 = select i1 %v9_100158cc, i64 512, i64 %stack_var_-540.0547
  %v4_100158d4 = trunc i64 %stack_var_-540.3 to i32
  %v8_100158de = icmp sgt i32 %v4_100158d4, 163
  br i1 %v8_100158de, label %dec_label_pc_100158e0, label %dec_label_pc_1001591d

dec_label_pc_100158e0:                            ; preds = %dec_label_pc_100158c6
  %v1_100158e6 = add i32 %v4_100158d4, 349
  store i32 %v1_100158e6, i32* %esi.global-to-local, align 4
  store i32 %v1_100158e6, i32* %v2_1001536b, align 4
  %v1_100158ed = call i32 @__malloc_crt(i32 512)
  store i32 %v1_100158ed, i32* %eax.global-to-local, align 4
  %v4_100158f2 = zext i8 %stack_var_-533.1 to i32
  %v5_100158f2 = load i32, i32* @edx, align 4
  %v6_100158f2 = and i32 %v5_100158f2, -256
  %v7_100158f2 = or i32 %v6_100158f2, %v4_100158f2
  store i32 %v7_100158f2, i32* @edx, align 4
  %v0_100158f8 = load i32, i32* @esp, align 4
  %v1_100158f8 = inttoptr i32 %v0_100158f8 to i32*
  %v2_100158f8 = load i32, i32* %v1_100158f8, align 4
  store i32 %v2_100158f8, i32* @ecx, align 4
  %v3_100158f8 = add i32 %v0_100158f8, 4
  store i32 %v1_100158ed, i32* %tmp425, align 4
  %v2_100158ff = icmp eq i32 %v1_100158ed, 0
  br i1 %v2_100158ff, label %dec_label_pc_1001591d, label %dec_label_pc_10015903

dec_label_pc_10015903:                            ; preds = %dec_label_pc_100158e0
  %v0_10015909 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v1_100158ed, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1001591d

dec_label_pc_1001591d:                            ; preds = %dec_label_pc_100158b5, %dec_label_pc_100158e0, %dec_label_pc_10015881, %dec_label_pc_100158c6, %dec_label_pc_10015903
  %v1_1001593d = phi i32 [ %v3_100158f8, %dec_label_pc_10015903 ], [ %v0_1001536b, %dec_label_pc_100158c6 ], [ %v0_1001536b, %dec_label_pc_10015881 ], [ %v0_1001536b, %dec_label_pc_100158b5 ], [ %v3_100158f8, %dec_label_pc_100158e0 ]
  %stack_var_-540.4 = phi i64 [ %stack_var_-540.3, %dec_label_pc_10015903 ], [ %stack_var_-540.3, %dec_label_pc_100158c6 ], [ 6, %dec_label_pc_10015881 ], [ %stack_var_-540.0., %dec_label_pc_100158b5 ], [ 163, %dec_label_pc_100158e0 ]
  %stack_var_-548.3 = phi i32 [ %v1_100158ed, %dec_label_pc_10015903 ], [ %v2_10015888, %dec_label_pc_100158c6 ], [ %v2_10015888, %dec_label_pc_10015881 ], [ %v2_10015888, %dec_label_pc_100158b5 ], [ %v2_10015888, %dec_label_pc_100158e0 ]
  %stack_var_-612.0 = phi i32 [ %v0_10015909, %dec_label_pc_10015903 ], [ 512, %dec_label_pc_100158c6 ], [ 512, %dec_label_pc_10015881 ], [ 512, %dec_label_pc_100158b5 ], [ 512, %dec_label_pc_100158e0 ]
  %v0_1001591d = load i32, i32* %edi.global-to-local, align 4
  %v1_1001591d = inttoptr i32 %v0_1001591d to i32*
  %v2_1001591d = load i32, i32* %v1_1001591d, align 4
  store i32 %v2_1001591d, i32* %eax.global-to-local, align 4
  %v0_1001591f = load i32, i32* inttoptr (i32 268575008 to i32*), align 32
  store i32 %v0_1001591f, i32* @esi, align 4
  %v1_10015925 = add i32 %v0_1001591d, 8
  store i32 %v1_10015925, i32* %edi.global-to-local, align 4
  store i32 %v2_1001591d, i32* %stack_var_-644, align 4
  %v2_1001593d = add i32 %v1_1001593d, -4
  %v3_1001593d = inttoptr i32 %v2_1001593d to i32*
  store i32 %v2_1001522b, i32* %v3_1001593d, align 4
  %v5_1001593e = add i32 %v1_1001593d, -8
  %v6_1001593e = inttoptr i32 %v5_1001593e to i32*
  store i32 %stack_var_-636.2, i32* %v6_1001593e, align 4
  %v0_10015944 = load i32, i32* @edx, align 4
  store i32 %v0_10015944, i32* %eax.global-to-local, align 4
  %v4_10015947 = trunc i64 %stack_var_-540.4 to i32
  %v6_10015947 = add i32 %v1_1001593d, -12
  %v7_10015947 = inttoptr i32 %v6_10015947 to i32*
  store i32 %v4_10015947, i32* %v7_10015947, align 4
  %v0_1001594d = load i32, i32* %edi.global-to-local, align 4
  %v0_10015953 = load i32, i32* %eax.global-to-local, align 4
  %v2_10015953 = add i32 %v1_1001593d, -16
  %v3_10015953 = inttoptr i32 %v2_10015953 to i32*
  store i32 %v0_10015953, i32* %v3_10015953, align 4
  %v5_10015954 = add i32 %v1_1001593d, -20
  %v6_10015954 = inttoptr i32 %v5_10015954 to i32*
  store i32 %stack_var_-612.0, i32* %v6_10015954, align 4
  store i32 %v15_1001520a, i32* %eax.global-to-local, align 4
  %v0_10015960 = load i32, i32* %ebx.global-to-local, align 4
  %v2_10015960 = add i32 %v1_1001593d, -24
  %v3_10015960 = inttoptr i32 %v2_10015960 to i32*
  store i32 %v0_10015960, i32* %v3_10015960, align 4
  %v2_10015961 = add i32 %v1_1001593d, -28
  %v3_10015961 = inttoptr i32 %v2_10015961 to i32*
  store i32 %v15_1001520a, i32* %v3_10015961, align 4
  %v0_10015962 = load i32, i32* @global_var_10029078.512, align 4
  %v2_10015962 = add i32 %v1_1001593d, -32
  %v3_10015962 = inttoptr i32 %v2_10015962 to i32*
  store i32 %v0_10015962, i32* %v3_10015962, align 4
  %v0_10015968 = load i32, i32* %stack_var_-644, align 4
  %v1_10015968 = inttoptr i32 %v0_10015968 to i32*
  %v2_10015968 = call i32* @DecodePointer(i32* %v1_10015968)
  %v4_10015968 = ptrtoint i32* %v2_10015968 to i32
  store i32 %v4_10015968, i32* %eax.global-to-local, align 4
  %v0_10015972 = load i32, i32* @esp, align 4
  %v1_10015972 = add i32 %v0_10015972, 28
  %v1_10015975 = and i32 %v4_1001588197, 128
  %v2_10015975 = icmp eq i32 %v1_10015975, 0
  store i32 %v1_10015975, i32* %edi.global-to-local, align 4
  br i1 %v2_10015975, label %dec_label_pc_1001599a, label %dec_label_pc_1001597d

dec_label_pc_1001597d:                            ; preds = %dec_label_pc_1001591d
  %v11_1001597d = icmp eq i32 %v4_10015947, 0
  %v1_10015984 = icmp eq i1 %v11_1001597d, false
  br i1 %v1_10015984, label %dec_label_pc_1001599a, label %dec_label_pc_10015986

dec_label_pc_10015986:                            ; preds = %dec_label_pc_1001597d
  store i32 %v2_1001522b, i32* %eax.global-to-local, align 4
  %v2_1001598c = add i32 %v0_10015972, 24
  %v3_1001598c = inttoptr i32 %v2_1001598c to i32*
  store i32 %v2_1001522b, i32* %v3_1001598c, align 4
  %v0_1001598d = load i32, i32* %ebx.global-to-local, align 4
  %v2_1001598d = add i32 %v0_10015972, 20
  %v3_1001598d = inttoptr i32 %v2_1001598d to i32*
  store i32 %v0_1001598d, i32* %v3_1001598d, align 4
  %v0_1001598e = load i32, i32* @global_var_10029084.513, align 4
  %v2_1001598e = add i32 %v0_10015972, 16
  %v3_1001598e = inttoptr i32 %v2_1001598e to i32*
  store i32 %v0_1001598e, i32* %v3_1001598e, align 4
  %v0_10015994 = call i32* @DecodePointer(i32* nonnull @5)
  %v2_10015994 = ptrtoint i32* %v0_10015994 to i32
  store i32 %v2_10015994, i32* %eax.global-to-local, align 4
  %v0_10015998 = load i32, i32* @esp, align 4
  %v1_10015998 = inttoptr i32 %v0_10015998 to i32*
  %v2_10015998 = load i32, i32* %v1_10015998, align 4
  store i32 %v2_10015998, i32* @ecx, align 4
  %v3_10015998 = add i32 %v0_10015998, 4
  %v1_10015999 = inttoptr i32 %v3_10015998 to i32*
  %v2_10015999 = load i32, i32* %v1_10015999, align 4
  store i32 %v2_10015999, i32* @ecx, align 4
  %v3_10015999 = add i32 %v0_10015998, 8
  br label %dec_label_pc_1001599a

dec_label_pc_1001599a:                            ; preds = %dec_label_pc_10015986, %dec_label_pc_1001597d, %dec_label_pc_1001591d
  %v1_100159ad = phi i32 [ %v3_10015999, %dec_label_pc_10015986 ], [ %v1_10015972, %dec_label_pc_1001597d ], [ %v1_10015972, %dec_label_pc_1001591d ]
  %v13_1001599a = icmp eq i8 %stack_var_-533.1, 103
  %v1_100159a1 = icmp eq i1 %v13_1001599a, false
  br i1 %v1_100159a1, label %dec_label_pc_100159bb, label %dec_label_pc_100159a3

dec_label_pc_100159a3:                            ; preds = %dec_label_pc_1001599a
  %v1_100159a5 = icmp eq i1 %v2_10015975, false
  br i1 %v1_100159a5, label %dec_label_pc_100159bb, label %dec_label_pc_100159a7

dec_label_pc_100159a7:                            ; preds = %dec_label_pc_100159a3
  store i32 %v2_1001522b, i32* %eax.global-to-local, align 4
  %v2_100159ad = add i32 %v1_100159ad, -4
  %v3_100159ad = inttoptr i32 %v2_100159ad to i32*
  store i32 %v2_1001522b, i32* %v3_100159ad, align 4
  %v0_100159ae = load i32, i32* %ebx.global-to-local, align 4
  %v2_100159ae = add i32 %v1_100159ad, -8
  %v3_100159ae = inttoptr i32 %v2_100159ae to i32*
  store i32 %v0_100159ae, i32* %v3_100159ae, align 4
  %v0_100159af = load i32, i32* @global_var_10029080.514, align 4
  %v2_100159af = add i32 %v1_100159ad, -12
  %v3_100159af = inttoptr i32 %v2_100159af to i32*
  store i32 %v0_100159af, i32* %v3_100159af, align 4
  %v0_100159b5 = call i32* @DecodePointer(i32* nonnull @5)
  %v2_100159b5 = ptrtoint i32* %v0_100159b5 to i32
  store i32 %v2_100159b5, i32* %eax.global-to-local, align 4
  %v0_100159b9 = load i32, i32* @esp, align 4
  %v1_100159b9 = inttoptr i32 %v0_100159b9 to i32*
  %v2_100159b9 = load i32, i32* %v1_100159b9, align 4
  store i32 %v2_100159b9, i32* @ecx, align 4
  %v3_100159b9 = add i32 %v0_100159b9, 4
  %v1_100159ba = inttoptr i32 %v3_100159b9 to i32*
  %v2_100159ba = load i32, i32* %v1_100159ba, align 4
  store i32 %v2_100159ba, i32* @ecx, align 4
  %v3_100159ba = add i32 %v0_100159b9, 8
  br label %dec_label_pc_100159bb

dec_label_pc_100159bb:                            ; preds = %dec_label_pc_100159a7, %dec_label_pc_100159a3, %dec_label_pc_1001599a
  %v1_100159d1 = phi i32 [ %v3_100159ba, %dec_label_pc_100159a7 ], [ %v1_100159ad, %dec_label_pc_100159a3 ], [ %v1_100159ad, %dec_label_pc_1001599a ]
  %v0_100159bb = load i32, i32* %ebx.global-to-local, align 4
  %v1_100159bb = inttoptr i32 %v0_100159bb to i8*
  %v2_100159bb = load i8, i8* %v1_100159bb, align 1
  %v12_100159bb = icmp eq i8 %v2_100159bb, 45
  %v1_100159be = icmp eq i1 %v12_100159bb, false
  br i1 %v1_100159be, label %dec_label_pc_100159d1, label %dec_label_pc_100159c0

dec_label_pc_100159c0:                            ; preds = %dec_label_pc_100159bb
  %v1_100159ca = add i32 %v0_100159bb, 1
  store i32 %v1_100159ca, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_100159d1

dec_label_pc_100159d1:                            ; preds = %dec_label_pc_100159c0, %dec_label_pc_100159bb
  %v0_100159d1 = phi i32 [ %v0_100159bb, %dec_label_pc_100159bb ], [ %v1_100159ca, %dec_label_pc_100159c0 ]
  %stack_var_-548.4 = phi i32 [ %stack_var_-548.3, %dec_label_pc_100159bb ], [ %v1_100159ca, %dec_label_pc_100159c0 ]
  %v2_100159d1 = add i32 %v1_100159d1, -4
  %v3_100159d1 = inttoptr i32 %v2_100159d1 to i32*
  store i32 %v0_100159d1, i32* %v3_100159d1, align 4
  br label %dec_label_pc_10015798

dec_label_pc_100159e9:                            ; preds = %dec_label_pc_100157a3
  %v1_100159e9 = add i32 %v0_100155e1, -115
  %v10_100159e9 = icmp eq i32 %v1_100159e9, 0
  store i32 %v1_100159e9, i32* %eax.global-to-local, align 4
  br i1 %v10_100159e9, label %dec_label_pc_10015660, label %dec_label_pc_100159f2

dec_label_pc_100159f2:                            ; preds = %dec_label_pc_100159e9
  %v1_100159f3 = add i32 %v0_100155e1, -117
  %v9_100159f3 = icmp eq i32 %v1_100159f3, 0
  store i32 %v1_100159f3, i32* %eax.global-to-local, align 4
  br i1 %v9_100159f3, label %dec_label_pc_10015852, label %dec_label_pc_100159fa

dec_label_pc_100159fa:                            ; preds = %dec_label_pc_100159f2
  %v1_100159fa = add i32 %v0_100155e1, -120
  %v10_100159fa = icmp eq i32 %v1_100159fa, 0
  store i32 %v1_100159fa, i32* %eax.global-to-local, align 4
  %v1_100159fd = icmp eq i1 %v10_100159fa, false
  br i1 %v1_100159fd, label %dec_label_pc_10015bbe, label %dec_label_pc_10015a03

dec_label_pc_10015a03:                            ; preds = %dec_label_pc_100159fa
  store i32 %stack_var_-544.0538, i32* %edi.global-to-local, align 4
  %extract.t25 = trunc i64 %stack_var_-540.0547 to i32
  br label %dec_label_pc_10015a13

dec_label_pc_10015a13:                            ; preds = %dec_label_pc_100156b6, %dec_label_pc_100157ac, %dec_label_pc_10015a03
  %v5_10015a2a = phi i32 [ %v1_100159fa, %dec_label_pc_10015a03 ], [ 0, %dec_label_pc_100156b6 ], [ %v0_100155e1, %dec_label_pc_100157ac ]
  %stack_var_-540.6.off0 = phi i32 [ %extract.t25, %dec_label_pc_10015a03 ], [ %extract.t29, %dec_label_pc_100156b6 ], [ 8, %dec_label_pc_100157ac ]
  %storemerge11 = phi i32 [ 39, %dec_label_pc_10015a03 ], [ %v2_10015370, %dec_label_pc_100156b6 ], [ %v2_10015370, %dec_label_pc_100157ac ]
  %v7_10015a13 = icmp sgt i8 %stack_var_-532.0542, -1
  store i32 16, i32* %stack_var_-556, align 4
  br i1 %v7_10015a13, label %dec_label_pc_1001585c, label %dec_label_pc_10015a2a

dec_label_pc_10015a2a:                            ; preds = %dec_label_pc_10015a13
  %v6_10015a2a = and i32 %v5_10015a2a, -256
  %v2_10015a30 = add i32 %storemerge11, 81
  %v16_10015a30 = and i32 %v2_10015a30, 255
  %v19_10015a30 = or i32 %v16_10015a30, %v6_10015a2a
  store i32 %v19_10015a30, i32* %eax.global-to-local, align 4
  store i8 48, i8* %stack_var_-560, align 1
  br label %dec_label_pc_1001585c

dec_label_pc_10015a4e:                            ; preds = %dec_label_pc_1001585c
  %v1_10015a4e = and i32 %v4_1001585c, 4096
  %v2_10015a4e = icmp eq i32 %v1_10015a4e, 0
  %v1_10015a54 = icmp eq i1 %v2_10015a4e, false
  br i1 %v1_10015a54, label %dec_label_pc_1001586e, label %dec_label_pc_10015a5a

dec_label_pc_10015a5a:                            ; preds = %dec_label_pc_10015a4e
  %v0_10015a5a = load i32, i32* %edi.global-to-local, align 4
  %v1_10015a5a = add i32 %v0_10015a5a, 4
  store i32 %v1_10015a5a, i32* %edi.global-to-local, align 4
  %v2_10015a5d = and i32 %v4_1001585c, 32
  %v3_10015a5d = icmp eq i32 %v2_10015a5d, 0
  br i1 %v3_10015a5d, label %dec_label_pc_10015a7a, label %dec_label_pc_10015a62

dec_label_pc_10015a62:                            ; preds = %dec_label_pc_10015a5a
  %v2_10015a68 = and i32 %v4_1001585c, 64
  %v3_10015a68 = icmp eq i32 %v2_10015a68, 0
  %v2_10015a73 = inttoptr i32 %v0_10015a5a to i16*
  %v3_10015a73 = load i16, i16* %v2_10015a73, align 2
  %v4_10015a73 = zext i16 %v3_10015a73 to i32
  %v4_10015a6d = sext i16 %v3_10015a73 to i32
  %storemerge10 = select i1 %v3_10015a68, i32 %v4_10015a73, i32 %v4_10015a6d
  store i32 %storemerge10, i32* %eax.global-to-local, align 4
  %v1_10015a77 = ashr i32 %storemerge10, 31
  store i32 %v1_10015a77, i32* @edx, align 4
  br label %dec_label_pc_10015a8d

dec_label_pc_10015a7a:                            ; preds = %dec_label_pc_10015a5a
  %v2_10015a7a = inttoptr i32 %v0_10015a5a to i32*
  %v3_10015a7a = load i32, i32* %v2_10015a7a, align 4
  store i32 %v3_10015a7a, i32* %eax.global-to-local, align 4
  %v2_10015a7d = and i32 %v4_1001585c, 64
  %v3_10015a7d = icmp eq i32 %v2_10015a7d, 0
  br i1 %v3_10015a7d, label %dec_label_pc_10015a8d.thread, label %dec_label_pc_10015a8d.thread492

dec_label_pc_10015a8d.thread492:                  ; preds = %dec_label_pc_10015a7a
  %v1_10015a82 = ashr i32 %v3_10015a7a, 31
  store i32 %v1_10015a82, i32* @edx, align 4
  br label %dec_label_pc_10015a92

dec_label_pc_10015a8d.thread:                     ; preds = %dec_label_pc_10015a7a
  store i32 0, i32* @edx, align 4
  br label %dec_label_pc_10015aac

dec_label_pc_10015a8d:                            ; preds = %dec_label_pc_1001586e, %dec_label_pc_10015a62
  %v2_10015a8d.pre-phi = phi i32 [ %v2_10015a68, %dec_label_pc_10015a62 ], [ %.pre96, %dec_label_pc_1001586e ]
  %v0_10015a9c = phi i32 [ %storemerge10, %dec_label_pc_10015a62 ], [ %v2_1001586e, %dec_label_pc_1001586e ]
  %v0_10015a9e = phi i32 [ %v1_10015a77, %dec_label_pc_10015a62 ], [ %v3_10015870, %dec_label_pc_1001586e ]
  %stack_var_-544.2 = phi i32 [ %v1_10015a5a, %dec_label_pc_10015a62 ], [ %v1_10015873, %dec_label_pc_1001586e ]
  %v3_10015a8d = icmp eq i32 %v2_10015a8d.pre-phi, 0
  br i1 %v3_10015a8d, label %dec_label_pc_10015aac, label %dec_label_pc_10015a92

dec_label_pc_10015a92:                            ; preds = %dec_label_pc_10015a8d.thread492, %dec_label_pc_10015a8d
  %stack_var_-544.2496 = phi i32 [ %v1_10015a5a, %dec_label_pc_10015a8d.thread492 ], [ %stack_var_-544.2, %dec_label_pc_10015a8d ]
  %v0_10015a9e495 = phi i32 [ %v1_10015a82, %dec_label_pc_10015a8d.thread492 ], [ %v0_10015a9e, %dec_label_pc_10015a8d ]
  %v0_10015a9c494 = phi i32 [ %v3_10015a7a, %dec_label_pc_10015a8d.thread492 ], [ %v0_10015a9c, %dec_label_pc_10015a8d ]
  %v1_10015a92 = icmp eq i32 %v0_10015a9e495, 0
  %v2_10015a92 = icmp slt i32 %v0_10015a9e495, 0
  %v3_10015a94 = icmp eq i1 %v2_10015a92, false
  %v4_10015a94 = icmp eq i1 %v1_10015a92, false
  %v5_10015a94 = icmp eq i1 %v3_10015a94, %v4_10015a94
  br i1 %v5_10015a94, label %dec_label_pc_10015aac, label %dec_label_pc_10015a96

dec_label_pc_10015a96:                            ; preds = %dec_label_pc_10015a92
  br i1 %v3_10015a94, label %dec_label_pc_10015a98, label %dec_label_pc_10015a9c

dec_label_pc_10015a98:                            ; preds = %dec_label_pc_10015a96
  br label %dec_label_pc_10015aac

dec_label_pc_10015a9c:                            ; preds = %dec_label_pc_10015a96
  %v1_10015a9c = sub i32 0, %v0_10015a9c494
  %v5_10015a9c = icmp ne i32 %v0_10015a9c494, 0
  store i32 %v1_10015a9c, i32* %eax.global-to-local, align 4
  %v1_10015a9e = load i32, i32* @esi, align 4
  %v3_10015a9e = zext i1 %v5_10015a9c to i32
  %v4_10015a9e = add i32 %v0_10015a9e495, %v1_10015a9e
  %v5_10015a9e = add i32 %v3_10015a9e, %v4_10015a9e
  %v1_10015aa0 = sub i32 0, %v5_10015a9e
  store i32 %v1_10015aa0, i32* @edx, align 4
  br label %dec_label_pc_10015aac

dec_label_pc_10015aac:                            ; preds = %dec_label_pc_10015a8d.thread, %dec_label_pc_10015a98, %dec_label_pc_10015a9c, %dec_label_pc_10015a92, %dec_label_pc_10015a8d
  %stack_var_-544.2491 = phi i32 [ %stack_var_-544.2496, %dec_label_pc_10015a9c ], [ %stack_var_-544.2496, %dec_label_pc_10015a98 ], [ %stack_var_-544.2496, %dec_label_pc_10015a92 ], [ %stack_var_-544.2, %dec_label_pc_10015a8d ], [ %v1_10015a5a, %dec_label_pc_10015a8d.thread ]
  %v0_10015aec = phi i32 [ %v1_10015a9c, %dec_label_pc_10015a9c ], [ %v0_10015a9c494, %dec_label_pc_10015a98 ], [ %v0_10015a9c494, %dec_label_pc_10015a92 ], [ %v0_10015a9c, %dec_label_pc_10015a8d ], [ %v3_10015a7a, %dec_label_pc_10015a8d.thread ]
  %v0_10015ab6 = phi i32 [ %v1_10015aa0, %dec_label_pc_10015a9c ], [ %v0_10015a9e495, %dec_label_pc_10015a98 ], [ %v0_10015a9e495, %dec_label_pc_10015a92 ], [ %v0_10015a9e, %dec_label_pc_10015a8d ], [ 0, %dec_label_pc_10015a8d.thread ]
  %v5_10015aac = and i32 %v4_1001585c, 36864
  %v6_10015aac = icmp eq i32 %v5_10015aac, 0
  store i32 %v0_10015ab6, i32* %edi.global-to-local, align 4
  store i32 %v0_10015aec, i32* %ebx.global-to-local, align 4
  %v1_10015aba = icmp eq i1 %v6_10015aac, false
  br i1 %v1_10015aba, label %dec_label_pc_10015abe, label %dec_label_pc_10015abc

dec_label_pc_10015abc:                            ; preds = %dec_label_pc_10015aac
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_10015abe

dec_label_pc_10015abe:                            ; preds = %dec_label_pc_10015abc, %dec_label_pc_10015aac
  %v1_10015aee = phi i32 [ 0, %dec_label_pc_10015abc ], [ %v0_10015ab6, %dec_label_pc_10015aac ]
  %v5_10015abe = load i32, i32* @esi, align 4
  %v7_10015ac4 = icmp slt i32 %stack_var_-540.2.off0, %v5_10015abe
  br i1 %v7_10015ac4, label %dec_label_pc_10015aec, label %dec_label_pc_10015ad2

dec_label_pc_10015ad2:                            ; preds = %dec_label_pc_10015abe
  %v5_10015ad2 = and i8 %stack_var_-532.5, -9
  store i32 512, i32* %eax.global-to-local, align 4
  %v9_10015ae4 = icmp sgt i32 %stack_var_-540.2.off0, 512
  %v0_10015ae6.stack_var_-540.2.off0 = select i1 %v9_10015ae4, i32 512, i32 %stack_var_-540.2.off0
  br label %dec_label_pc_10015aec

dec_label_pc_10015aec:                            ; preds = %dec_label_pc_10015ad2, %dec_label_pc_10015abe
  %stack_var_-532.8 = phi i8 [ %stack_var_-532.5, %dec_label_pc_10015abe ], [ %v5_10015ad2, %dec_label_pc_10015ad2 ]
  %stack_var_-540.7.off0 = phi i32 [ 1, %dec_label_pc_10015abe ], [ %v0_10015ae6.stack_var_-540.2.off0, %dec_label_pc_10015ad2 ]
  %v2_10015aee = or i32 %v1_10015aee, %v0_10015aec
  %v3_10015aee = icmp eq i32 %v2_10015aee, 0
  store i32 %v2_10015aee, i32* %eax.global-to-local, align 4
  %v1_10015af0 = icmp eq i1 %v3_10015aee, false
  br i1 %v1_10015af0, label %dec_label_pc_10015af8, label %dec_label_pc_10015af2

dec_label_pc_10015af2:                            ; preds = %dec_label_pc_10015aec
  %v5_10015af2 = and i32 %v5_10015abe, %stack_var_-568.1
  br label %dec_label_pc_10015af8

dec_label_pc_10015af8:                            ; preds = %dec_label_pc_10015af2, %dec_label_pc_10015aec
  %stack_var_-568.2 = phi i32 [ %stack_var_-568.1, %dec_label_pc_10015aec ], [ %v5_10015af2, %dec_label_pc_10015af2 ]
  br label %dec_label_pc_10015afb

dec_label_pc_10015afb:                            ; preds = %dec_label_pc_10015b39, %dec_label_pc_10015af8
  %stack_var_-540.8.off0 = phi i32 [ %stack_var_-540.7.off0, %dec_label_pc_10015af8 ], [ %v5_10015b01, %dec_label_pc_10015b39 ]
  %v0_10015b43 = phi i32 [ %v2_10015af8, %dec_label_pc_10015af8 ], [ %v1_10015b3b, %dec_label_pc_10015b39 ]
  store i32 %v0_10015b43, i32* %esi.global-to-local, align 4
  store i32 %stack_var_-540.8.off0, i32* %eax.global-to-local, align 4
  %v5_10015b01 = add i32 %stack_var_-540.8.off0, -1
  %v1_10015b07 = icmp eq i32 %stack_var_-540.8.off0, 0
  %v2_10015b07 = icmp slt i32 %stack_var_-540.8.off0, 0
  %v3_10015b09 = icmp eq i1 %v2_10015b07, false
  %v4_10015b09 = icmp eq i1 %v1_10015b07, false
  %v5_10015b09 = icmp eq i1 %v3_10015b09, %v4_10015b09
  br i1 %v5_10015b09, label %dec_label_pc_10015b11, label %dec_label_pc_10015b0b

dec_label_pc_10015b0b:                            ; preds = %dec_label_pc_10015afb
  %v0_10015b0b = load i32, i32* %ebx.global-to-local, align 4
  %v1_10015b0d = load i32, i32* %edi.global-to-local, align 4
  %v2_10015b0d = or i32 %v1_10015b0d, %v0_10015b0b
  %v3_10015b0d = icmp eq i32 %v2_10015b0d, 0
  store i32 %v2_10015b0d, i32* %eax.global-to-local, align 4
  br i1 %v3_10015b0d, label %dec_label_pc_10015b3e, label %dec_label_pc_10015b11

dec_label_pc_10015b11:                            ; preds = %dec_label_pc_10015b0b, %dec_label_pc_10015afb
  %v3_10015b11 = load i32, i32* %stack_var_-556, align 4
  store i32 %v3_10015b11, i32* %eax.global-to-local, align 4
  %v1_10015b17 = ashr i32 %v3_10015b11, 31
  store i32 %v1_10015b17, i32* @edx, align 4
  %v1_10015b18 = load i32, i32* @esp, align 4
  %v2_10015b18 = add i32 %v1_10015b18, -4
  %v3_10015b18 = inttoptr i32 %v2_10015b18 to i32*
  store i32 %v1_10015b17, i32* %v3_10015b18, align 4
  %v0_10015b19 = load i32, i32* %eax.global-to-local, align 4
  %v2_10015b19 = add i32 %v1_10015b18, -8
  %v3_10015b19 = inttoptr i32 %v2_10015b19 to i32*
  store i32 %v0_10015b19, i32* %v3_10015b19, align 4
  %v0_10015b1a = load i32, i32* %edi.global-to-local, align 4
  %v2_10015b1a = add i32 %v1_10015b18, -12
  %v3_10015b1a = inttoptr i32 %v2_10015b1a to i32*
  store i32 %v0_10015b1a, i32* %v3_10015b1a, align 4
  %v0_10015b1b = load i32, i32* %ebx.global-to-local, align 4
  %v2_10015b1b = add i32 %v1_10015b18, -16
  %v3_10015b1b = inttoptr i32 %v2_10015b1b to i32*
  store i32 %v0_10015b1b, i32* %v3_10015b1b, align 4
  %v2_10015b1c = call i32 @__aulldvrm(i32 %v5_10015b01)
  store i32 %v2_10015b1c, i32* %eax.global-to-local, align 4
  %v0_10015b21 = load i32, i32* @ecx, align 4
  %v1_10015b21 = add i32 %v0_10015b21, 48
  %v11_10015b21 = trunc i32 %v1_10015b21 to i8
  store i32 %v1_10015b21, i32* @ecx, align 4
  store i32 %v2_10015b1c, i32* %ebx.global-to-local, align 4
  %v0_10015b2c = load i32, i32* @edx, align 4
  store i32 %v0_10015b2c, i32* %edi.global-to-local, align 4
  %v8_10015b31 = icmp sgt i8 %v11_10015b21, 57
  br i1 %v8_10015b31, label %dec_label_pc_10015b33, label %dec_label_pc_10015b39

dec_label_pc_10015b33:                            ; preds = %dec_label_pc_10015b11
  %v5_10015b33 = add i32 %v1_10015b21, %stack_var_-592.1
  store i32 %v5_10015b33, i32* @ecx, align 4
  br label %dec_label_pc_10015b39

dec_label_pc_10015b39:                            ; preds = %dec_label_pc_10015b11, %dec_label_pc_10015b33
  %v0_10015b39 = phi i32 [ %v1_10015b21, %dec_label_pc_10015b11 ], [ %v5_10015b33, %dec_label_pc_10015b33 ]
  %v1_10015b39 = trunc i32 %v0_10015b39 to i8
  %v2_10015b39 = load i32, i32* %esi.global-to-local, align 4
  %v3_10015b39 = inttoptr i32 %v2_10015b39 to i8*
  store i8 %v1_10015b39, i8* %v3_10015b39, align 1
  %v0_10015b3b = load i32, i32* %esi.global-to-local, align 4
  %v1_10015b3b = add i32 %v0_10015b3b, -1
  br label %dec_label_pc_10015afb

dec_label_pc_10015b3e:                            ; preds = %dec_label_pc_10015b0b
  %v22_10015b01.le = sext i32 %v5_10015b01 to i64
  %v2_10015b41 = sub i32 %v2_10015af8, %v0_10015b43
  store i32 %v2_10015b41, i32* %eax.global-to-local, align 4
  %v1_10015b43 = add i32 %v0_10015b43, 1
  store i32 %v1_10015b43, i32* @esi, align 4
  %v4_10015b44 = sext i8 %stack_var_-532.8 to i32
  %v5_10015b44 = and i32 %v4_10015b44, 512
  %v6_10015b44 = icmp eq i32 %v5_10015b44, 0
  store i32 %v2_10015b41, i32* %stack_var_-556, align 4
  br i1 %v6_10015b44, label %dec_label_pc_10015bbe, label %dec_label_pc_10015b5c

dec_label_pc_10015b5c:                            ; preds = %dec_label_pc_10015b3e
  %v12_10015b41 = icmp eq i32 %v2_10015b41, 0
  br i1 %v12_10015b41, label %dec_label_pc_10015b67, label %dec_label_pc_10015b60

dec_label_pc_10015b60:                            ; preds = %dec_label_pc_10015b5c
  store i32 %v1_10015b43, i32* @ecx, align 4
  %v1_10015b62 = inttoptr i32 %v1_10015b43 to i8*
  %v2_10015b62 = load i8, i8* %v1_10015b62, align 1
  %v11_10015b62 = icmp eq i8 %v2_10015b62, 48
  br i1 %v11_10015b62, label %dec_label_pc_10015bbe, label %dec_label_pc_10015b67

dec_label_pc_10015b67:                            ; preds = %dec_label_pc_10015b60, %dec_label_pc_10015b5c
  store i32 %v0_10015b43, i32* @ecx, align 4
  %v1_10015b73 = inttoptr i32 %v0_10015b43 to i8*
  store i8 48, i8* %v1_10015b73, align 1
  %v0_10015b76 = load i32, i32* %eax.global-to-local, align 4
  %v1_10015b76 = add i32 %v0_10015b76, 1
  store i32 %v1_10015b76, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015bb8

dec_label_pc_10015b79:                            ; preds = %dec_label_pc_10015b79.lr.ph, %dec_label_pc_10015b7f
  %v0_10015b7f = phi i32 [ %stack_var_-548.1, %dec_label_pc_10015b79.lr.ph ], [ %v1_10015b7f, %dec_label_pc_10015b7f ]
  %v0_10015b79 = phi i32 [ %v0_10015bae40, %dec_label_pc_10015b79.lr.ph ], [ %v1_10015b79, %dec_label_pc_10015b7f ]
  %v1_10015b79 = add i32 %v0_10015b79, -1
  store i32 %v1_10015b79, i32* @ecx, align 4
  %v1_10015b7a = inttoptr i32 %v0_10015b7f to i16*
  %v2_10015b7a = load i16, i16* %v1_10015b7a, align 2
  %v15_10015b7a = icmp eq i16 %v2_10015b7a, %v4_10015b7a
  br i1 %v15_10015b7a, label %dec_label_pc_10015b79.dec_label_pc_10015b86_crit_edge, label %dec_label_pc_10015b7f

dec_label_pc_10015b7f:                            ; preds = %dec_label_pc_10015b79
  %v1_10015b7f = add i32 %v0_10015b7f, 2
  store i32 %v1_10015b7f, i32* %eax.global-to-local, align 4
  %v1_10015b82 = icmp eq i32 %v1_10015b79, 0
  %v1_10015b84 = icmp eq i1 %v1_10015b82, false
  br i1 %v1_10015b84, label %dec_label_pc_10015b79, label %dec_label_pc_10015b82.dec_label_pc_10015b86_crit_edge

dec_label_pc_10015b79.dec_label_pc_10015b86_crit_edge: ; preds = %dec_label_pc_10015b79
  br label %dec_label_pc_10015b86

dec_label_pc_10015b82.dec_label_pc_10015b86_crit_edge: ; preds = %dec_label_pc_10015b7f
  br label %dec_label_pc_10015b86

dec_label_pc_10015b86:                            ; preds = %dec_label_pc_10015b82.dec_label_pc_10015b86_crit_edge, %dec_label_pc_10015b79.dec_label_pc_10015b86_crit_edge, %dec_label_pc_100156a1
  %v0_10015b86 = phi i32 [ %v1_10015b7f, %dec_label_pc_10015b82.dec_label_pc_10015b86_crit_edge ], [ %v0_10015b7f, %dec_label_pc_10015b79.dec_label_pc_10015b86_crit_edge ], [ %stack_var_-548.1, %dec_label_pc_100156a1 ]
  %v5_10015b86 = sub i32 %v0_10015b86, %stack_var_-548.1
  %v2_10015b8c = sdiv i32 %v5_10015b86, 2
  store i32 %v2_10015b8c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015bb8

dec_label_pc_10015b90:                            ; preds = %dec_label_pc_10015670
  br i1 %v1_10015b92, label %dec_label_pc_10015b9f, label %dec_label_pc_10015b94

dec_label_pc_10015b94:                            ; preds = %dec_label_pc_10015b90
  %v0_10015b94 = load i32, i32* bitcast ([7 x i8]** @global_var_100291c8.511 to i32*), align 4
  store i32 %v0_10015b94, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015b9f

dec_label_pc_10015b9f:                            ; preds = %dec_label_pc_10015b94, %dec_label_pc_10015b90
  %stack_var_-548.5 = phi i32 [ %v3_10015683, %dec_label_pc_10015b90 ], [ %v0_10015b94, %dec_label_pc_10015b94 ]
  store i32 %stack_var_-548.5, i32* %eax.global-to-local, align 4
  %v1_10015bae41 = icmp eq i32 %v0_10015bae40, 0
  %v1_10015bb048 = icmp eq i1 %v1_10015bae41, false
  br i1 %v1_10015bb048, label %dec_label_pc_10015ba7, label %dec_label_pc_10015bb2

dec_label_pc_10015ba7:                            ; preds = %dec_label_pc_10015b9f, %dec_label_pc_10015bad
  %v0_10015bad = phi i32 [ %v1_10015bad, %dec_label_pc_10015bad ], [ %stack_var_-548.5, %dec_label_pc_10015b9f ]
  %v0_10015ba7 = phi i32 [ %v1_10015ba7, %dec_label_pc_10015bad ], [ %v0_10015bae40, %dec_label_pc_10015b9f ]
  %v1_10015ba7 = add i32 %v0_10015ba7, -1
  store i32 %v1_10015ba7, i32* @ecx, align 4
  %v1_10015ba8 = inttoptr i32 %v0_10015bad to i8*
  %v2_10015ba8 = load i8, i8* %v1_10015ba8, align 1
  %v9_10015ba8 = icmp eq i8 %v2_10015ba8, 0
  br i1 %v9_10015ba8, label %dec_label_pc_10015bb2, label %dec_label_pc_10015bad

dec_label_pc_10015bad:                            ; preds = %dec_label_pc_10015ba7
  %v9_10015ba7 = icmp eq i32 %v1_10015ba7, 0
  %v1_10015bad = add i32 %v0_10015bad, 1
  store i32 %v1_10015bad, i32* %eax.global-to-local, align 4
  %v1_10015bb0 = icmp eq i1 %v9_10015ba7, false
  br i1 %v1_10015bb0, label %dec_label_pc_10015ba7, label %dec_label_pc_10015bb2

dec_label_pc_10015bb2:                            ; preds = %dec_label_pc_10015bad, %dec_label_pc_10015ba7, %dec_label_pc_10015b9f
  %v0_10015bb2 = phi i32 [ %stack_var_-548.5, %dec_label_pc_10015b9f ], [ %v1_10015bad, %dec_label_pc_10015bad ], [ %v0_10015bad, %dec_label_pc_10015ba7 ]
  %v5_10015bb2 = sub i32 %v0_10015bb2, %stack_var_-548.5
  store i32 %v5_10015bb2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015bb8

dec_label_pc_10015bb8:                            ; preds = %dec_label_pc_10015bb2, %dec_label_pc_10015b86, %dec_label_pc_10015b67, %dec_label_pc_10015798, %dec_label_pc_10015781, %dec_label_pc_1001576d
  %v0_10015bb8 = phi i32 [ %v5_10015bb2, %dec_label_pc_10015bb2 ], [ %v2_10015b8c, %dec_label_pc_10015b86 ], [ %v1_10015b76, %dec_label_pc_10015b67 ], [ %v1_10015798, %dec_label_pc_10015798 ], [ %v4_10015762, %dec_label_pc_10015781 ], [ %v2_10015770, %dec_label_pc_1001576d ]
  %stack_var_-544.3 = phi i32 [ %v1_10015670, %dec_label_pc_10015bb2 ], [ %v1_10015670, %dec_label_pc_10015b86 ], [ %stack_var_-544.2491, %dec_label_pc_10015b67 ], [ %stack_var_-544.1, %dec_label_pc_10015798 ], [ %v1_10015744, %dec_label_pc_10015781 ], [ %v1_10015744, %dec_label_pc_1001576d ]
  %stack_var_-592.2 = phi i32 [ %stack_var_-592.0540, %dec_label_pc_10015bb2 ], [ %stack_var_-592.0540, %dec_label_pc_10015b86 ], [ %stack_var_-592.1, %dec_label_pc_10015b67 ], [ %stack_var_-592.0540, %dec_label_pc_10015798 ], [ %stack_var_-592.0540, %dec_label_pc_10015781 ], [ %stack_var_-592.0540, %dec_label_pc_1001576d ]
  %stack_var_-532.9 = phi i8 [ %stack_var_-532.0542, %dec_label_pc_10015bb2 ], [ %stack_var_-532.0542, %dec_label_pc_10015b86 ], [ %stack_var_-532.8, %dec_label_pc_10015b67 ], [ %stack_var_-532.3, %dec_label_pc_10015798 ], [ %stack_var_-532.0542, %dec_label_pc_10015781 ], [ %stack_var_-532.0542, %dec_label_pc_1001576d ]
  %stack_var_-540.9 = phi i64 [ %stack_var_-540.0547, %dec_label_pc_10015bb2 ], [ %stack_var_-540.0547, %dec_label_pc_10015b86 ], [ %v22_10015b01.le, %dec_label_pc_10015b67 ], [ %stack_var_-540.1, %dec_label_pc_10015798 ], [ %stack_var_-540.0547, %dec_label_pc_10015781 ], [ %stack_var_-540.0547, %dec_label_pc_1001576d ]
  %stack_var_-568.3 = phi i32 [ %stack_var_-568.0549, %dec_label_pc_10015bb2 ], [ %stack_var_-568.0549, %dec_label_pc_10015b86 ], [ %stack_var_-568.2, %dec_label_pc_10015b67 ], [ %stack_var_-568.0549, %dec_label_pc_10015798 ], [ %stack_var_-568.0549, %dec_label_pc_10015781 ], [ %stack_var_-568.0549, %dec_label_pc_1001576d ]
  %stack_var_-576.1 = phi i32 [ %stack_var_-576.0554, %dec_label_pc_10015bb2 ], [ 1, %dec_label_pc_10015b86 ], [ %stack_var_-576.0554, %dec_label_pc_10015b67 ], [ %stack_var_-576.0554, %dec_label_pc_10015798 ], [ %v5_10015781, %dec_label_pc_10015781 ], [ 1, %dec_label_pc_1001576d ]
  %stack_var_-636.3 = phi i32 [ %stack_var_-636.0556, %dec_label_pc_10015bb2 ], [ %stack_var_-636.0556, %dec_label_pc_10015b86 ], [ %stack_var_-636.0556, %dec_label_pc_10015b67 ], [ %stack_var_-636.1, %dec_label_pc_10015798 ], [ %stack_var_-636.0556, %dec_label_pc_10015781 ], [ %stack_var_-636.0556, %dec_label_pc_1001576d ]
  %stack_var_-548.6 = phi i32 [ %stack_var_-548.5, %dec_label_pc_10015bb2 ], [ %stack_var_-548.1, %dec_label_pc_10015b86 ], [ %v0_10015b43, %dec_label_pc_10015b67 ], [ %stack_var_-548.2, %dec_label_pc_10015798 ], [ %v4_10015751, %dec_label_pc_10015781 ], [ %v4_10015751, %dec_label_pc_1001576d ]
  store i32 %v0_10015bb8, i32* %stack_var_-556, align 4
  br label %dec_label_pc_10015bbe

dec_label_pc_10015bbe:                            ; preds = %dec_label_pc_10015bb8, %dec_label_pc_10015b60, %dec_label_pc_10015b3e, %dec_label_pc_100159fa, %dec_label_pc_100157ce, %dec_label_pc_10015731, %dec_label_pc_100156cb, %dec_label_pc_1001560b
  %stack_var_-544.4 = phi i32 [ %stack_var_-544.3, %dec_label_pc_10015bb8 ], [ %stack_var_-544.2491, %dec_label_pc_10015b3e ], [ %stack_var_-544.2491, %dec_label_pc_10015b60 ], [ %stack_var_-544.0538, %dec_label_pc_100159fa ], [ %stack_var_-544.0538, %dec_label_pc_100157ce ], [ %stack_var_-544.0538, %dec_label_pc_100156cb ], [ %v1_100156d9, %dec_label_pc_10015731 ], [ %stack_var_-544.0538, %dec_label_pc_1001560b ]
  %stack_var_-592.3 = phi i32 [ %stack_var_-592.2, %dec_label_pc_10015bb8 ], [ %stack_var_-592.1, %dec_label_pc_10015b3e ], [ %stack_var_-592.1, %dec_label_pc_10015b60 ], [ %stack_var_-592.0540, %dec_label_pc_100159fa ], [ %stack_var_-592.0540, %dec_label_pc_100157ce ], [ %stack_var_-592.0540, %dec_label_pc_100156cb ], [ %stack_var_-592.0540, %dec_label_pc_10015731 ], [ %stack_var_-592.0540, %dec_label_pc_1001560b ]
  %stack_var_-532.10 = phi i8 [ %stack_var_-532.9, %dec_label_pc_10015bb8 ], [ %stack_var_-532.8, %dec_label_pc_10015b3e ], [ %stack_var_-532.8, %dec_label_pc_10015b60 ], [ %stack_var_-532.0542, %dec_label_pc_100159fa ], [ %stack_var_-532.0542, %dec_label_pc_100157ce ], [ %stack_var_-532.0542, %dec_label_pc_100156cb ], [ %stack_var_-532.0542, %dec_label_pc_10015731 ], [ %stack_var_-532.0542, %dec_label_pc_1001560b ]
  %stack_var_-540.10 = phi i64 [ %stack_var_-540.9, %dec_label_pc_10015bb8 ], [ %v22_10015b01.le, %dec_label_pc_10015b3e ], [ %v22_10015b01.le, %dec_label_pc_10015b60 ], [ %stack_var_-540.0547, %dec_label_pc_100159fa ], [ %stack_var_-540.0547, %dec_label_pc_100157ce ], [ %stack_var_-540.0547, %dec_label_pc_100156cb ], [ %stack_var_-540.0547, %dec_label_pc_10015731 ], [ %stack_var_-540.0547, %dec_label_pc_1001560b ]
  %stack_var_-568.4 = phi i32 [ %stack_var_-568.3, %dec_label_pc_10015bb8 ], [ %stack_var_-568.2, %dec_label_pc_10015b3e ], [ %stack_var_-568.2, %dec_label_pc_10015b60 ], [ %stack_var_-568.0549, %dec_label_pc_100159fa ], [ %stack_var_-568.0549, %dec_label_pc_100157ce ], [ %stack_var_-568.0549, %dec_label_pc_100156cb ], [ %stack_var_-568.0549, %dec_label_pc_10015731 ], [ %stack_var_-568.0549, %dec_label_pc_1001560b ]
  %stack_var_-584.2 = phi i32 [ %stack_var_-584.0551, %dec_label_pc_10015bb8 ], [ %stack_var_-584.0551, %dec_label_pc_10015b3e ], [ %stack_var_-584.0551, %dec_label_pc_10015b60 ], [ %stack_var_-584.0551, %dec_label_pc_100159fa ], [ %stack_var_-584.0551, %dec_label_pc_100157ce ], [ %stack_var_-584.0551, %dec_label_pc_100156cb ], [ %stack_var_-584.1, %dec_label_pc_10015731 ], [ %stack_var_-584.0551, %dec_label_pc_1001560b ]
  %stack_var_-576.2 = phi i32 [ %stack_var_-576.1, %dec_label_pc_10015bb8 ], [ %stack_var_-576.0554, %dec_label_pc_10015b3e ], [ %stack_var_-576.0554, %dec_label_pc_10015b60 ], [ %stack_var_-576.0554, %dec_label_pc_100159fa ], [ %stack_var_-576.0554, %dec_label_pc_100157ce ], [ %stack_var_-576.0554, %dec_label_pc_100156cb ], [ %stack_var_-576.0554, %dec_label_pc_10015731 ], [ %stack_var_-576.0554, %dec_label_pc_1001560b ]
  %stack_var_-636.4 = phi i32 [ %stack_var_-636.3, %dec_label_pc_10015bb8 ], [ %stack_var_-636.0556, %dec_label_pc_10015b3e ], [ %stack_var_-636.0556, %dec_label_pc_10015b60 ], [ %stack_var_-636.0556, %dec_label_pc_100159fa ], [ %stack_var_-636.0556, %dec_label_pc_100157ce ], [ %stack_var_-636.0556, %dec_label_pc_100156cb ], [ %stack_var_-636.0556, %dec_label_pc_10015731 ], [ %stack_var_-636.0556, %dec_label_pc_1001560b ]
  %stack_var_-548.7 = phi i32 [ %stack_var_-548.6, %dec_label_pc_10015bb8 ], [ %v1_10015b43, %dec_label_pc_10015b3e ], [ %v1_10015b43, %dec_label_pc_10015b60 ], [ %stack_var_-548.0558, %dec_label_pc_100159fa ], [ %stack_var_-548.0558, %dec_label_pc_100157ce ], [ %stack_var_-548.0558, %dec_label_pc_100156cb ], [ %v2_10015888, %dec_label_pc_10015731 ], [ %stack_var_-548.0558, %dec_label_pc_1001560b ]
  %v10_10015bbe = icmp eq i32 %stack_var_-584.2, 0
  %v1_10015bc5 = icmp eq i1 %v10_10015bbe, false
  br i1 %v1_10015bc5, label %dec_label_pc_10015d83, label %dec_label_pc_10015bcb

dec_label_pc_10015bcb:                            ; preds = %dec_label_pc_10015bbe
  %v4_10015bcb = sext i8 %stack_var_-532.10 to i32
  store i32 %v4_10015bcb, i32* @ecx, align 4
  %v2_10015bd1 = and i8 %stack_var_-532.10, 64
  %v3_10015bd1 = icmp eq i8 %v2_10015bd1, 0
  br i1 %v3_10015bd1, label %dec_label_pc_10015c0b, label %dec_label_pc_10015bd6

dec_label_pc_10015bd6:                            ; preds = %dec_label_pc_10015bcb
  %v1_10015bd6 = and i32 %v4_10015bcb, 256
  %v2_10015bd6 = icmp eq i32 %v1_10015bd6, 0
  br i1 %v2_10015bd6, label %dec_label_pc_10015be7, label %dec_label_pc_10015bde

dec_label_pc_10015bde:                            ; preds = %dec_label_pc_10015bd6
  store i8 45, i8* %stack_var_-560, align 1
  br label %dec_label_pc_10015c0b

dec_label_pc_10015be7:                            ; preds = %dec_label_pc_10015bd6
  %v2_10015be7 = and i32 %v4_10015bcb, 1
  %v3_10015be7 = icmp eq i32 %v2_10015be7, 0
  br i1 %v3_10015be7, label %dec_label_pc_10015bf5, label %dec_label_pc_10015bec

dec_label_pc_10015bec:                            ; preds = %dec_label_pc_10015be7
  store i8 43, i8* %stack_var_-560, align 1
  br label %dec_label_pc_10015c0b

dec_label_pc_10015bf5:                            ; preds = %dec_label_pc_10015be7
  %v2_10015bf5 = and i32 %v4_10015bcb, 2
  %v3_10015bf5 = icmp eq i32 %v2_10015bf5, 0
  br i1 %v3_10015bf5, label %dec_label_pc_10015c0b, label %dec_label_pc_10015bfa

dec_label_pc_10015bfa:                            ; preds = %dec_label_pc_10015bf5
  store i8 32, i8* %stack_var_-560, align 1
  br label %dec_label_pc_10015c0b

dec_label_pc_10015c0b:                            ; preds = %dec_label_pc_10015bde, %dec_label_pc_10015bec, %dec_label_pc_10015bfa, %dec_label_pc_10015bf5, %dec_label_pc_10015bcb
  %stack_var_-568.5 = phi i32 [ %stack_var_-568.4, %dec_label_pc_10015bcb ], [ %stack_var_-568.4, %dec_label_pc_10015bf5 ], [ 1, %dec_label_pc_10015bfa ], [ 1, %dec_label_pc_10015bec ], [ 1, %dec_label_pc_10015bde ]
  %v4_10015c0b = trunc i64 %stack_var_-572.0544 to i32
  %v4_10015c11 = load i32, i32* %stack_var_-556, align 4
  %v5_10015c11 = sub i32 %v4_10015c0b, %v4_10015c11
  %v5_10015c17 = sub i32 %v5_10015c11, %stack_var_-568.5
  store i32 %v5_10015c17, i32* %eax.global-to-local, align 4
  %v2_10015c23 = and i8 %stack_var_-532.10, 12
  %v3_10015c23 = icmp eq i8 %v2_10015c23, 0
  %v1_10015c26 = icmp eq i1 %v3_10015c23, false
  br i1 %v1_10015c26, label %dec_label_pc_10015c4d, label %dec_label_pc_10015c28

dec_label_pc_10015c28:                            ; preds = %dec_label_pc_10015c0b
  store i32 %v5_10015c17, i32* %edi.global-to-local, align 4
  %v1_10015c49502 = icmp eq i32 %v5_10015c17, 0
  %v2_10015c49503 = icmp slt i32 %v5_10015c17, 0
  %v3_10015c4b508 = icmp eq i1 %v2_10015c49503, false
  %v4_10015c4b509 = icmp eq i1 %v1_10015c49502, false
  %v5_10015c4b510 = icmp eq i1 %v3_10015c4b508, %v4_10015c4b509
  br i1 %v5_10015c4b510, label %dec_label_pc_10015c2c, label %dec_label_pc_10015c4d

dec_label_pc_10015c2c:                            ; preds = %dec_label_pc_10015c28, %dec_label_pc_10015c2c.dec_label_pc_10015c49_crit_edge
  %v0_10015c3a512 = phi i32 [ %v0_10015c49.pre, %dec_label_pc_10015c2c.dec_label_pc_10015c49_crit_edge ], [ %v5_10015c17, %dec_label_pc_10015c28 ]
  %v0_10015c38511 = phi i32 [ %v0_10015c3b, %dec_label_pc_10015c2c.dec_label_pc_10015c49_crit_edge ], [ %v5_10015c17, %dec_label_pc_10015c28 ]
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v2_100155d1, i32* @esi, align 4
  %v1_10015c38 = and i32 %v0_10015c38511, -256
  %v2_10015c38 = or i32 %v1_10015c38, 32
  store i32 %v2_10015c38, i32* %eax.global-to-local, align 4
  %v1_10015c3a = add i32 %v0_10015c3a512, -1
  store i32 %v1_10015c3a, i32* %edi.global-to-local, align 4
  %v0_10015c3b = call i32 @_write_char()
  store i32 %v0_10015c3b, i32* %eax.global-to-local, align 4
  %v3_10015c40 = load i32, i32* %stack_var_-552, align 4
  %v13_10015c40 = icmp eq i32 %v3_10015c40, -1
  br i1 %v13_10015c40, label %dec_label_pc_10015c4d, label %dec_label_pc_10015c2c.dec_label_pc_10015c49_crit_edge

dec_label_pc_10015c2c.dec_label_pc_10015c49_crit_edge: ; preds = %dec_label_pc_10015c2c
  %v0_10015c49.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10015c49 = icmp eq i32 %v0_10015c49.pre, 0
  %v2_10015c49 = icmp slt i32 %v0_10015c49.pre, 0
  %v3_10015c4b = icmp eq i1 %v2_10015c49, false
  %v4_10015c4b = icmp eq i1 %v1_10015c49, false
  %v5_10015c4b = icmp eq i1 %v3_10015c4b, %v4_10015c4b
  br i1 %v5_10015c4b, label %dec_label_pc_10015c2c, label %dec_label_pc_10015c4d

dec_label_pc_10015c4d:                            ; preds = %dec_label_pc_10015c28, %dec_label_pc_10015c2c.dec_label_pc_10015c49_crit_edge, %dec_label_pc_10015c2c, %dec_label_pc_10015c0b
  %v4_10015c4d = load i32, i32* @esp, align 4
  %v5_10015c4d = add i32 %v4_10015c4d, -4
  %v6_10015c4d = inttoptr i32 %v5_10015c4d to i32*
  store i32 %stack_var_-568.5, i32* %v6_10015c4d, align 4
  store i32 %v2_1001526c, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_10015c65 = add i32 %v4_10015c4d, -8
  %v3_10015c65 = inttoptr i32 %v2_10015c65 to i32*
  store i32 %v2_10015c5f, i32* %v3_10015c65, align 4
  store i32 %v2_100155d1, i32* @eax, align 4
  %v2_10015c6c = call i32 @function_100151a3(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10015c6c, i32* %eax.global-to-local, align 4
  %v6_10015c71 = and i8 %stack_var_-532.10, 8
  %v7_10015c71 = icmp eq i8 %v6_10015c71, 0
  %v0_10015c78 = load i32, i32* @esp, align 4
  %v1_10015c78 = inttoptr i32 %v0_10015c78 to i32*
  %v2_10015c78 = load i32, i32* %v1_10015c78, align 4
  store i32 %v2_10015c78, i32* @ecx, align 4
  %v3_10015c78 = add i32 %v0_10015c78, 4
  %v1_10015c79 = inttoptr i32 %v3_10015c78 to i32*
  %v2_10015c79 = load i32, i32* %v1_10015c79, align 4
  store i32 %v2_10015c79, i32* @ecx, align 4
  br i1 %v7_10015c71, label %dec_label_pc_10015caa, label %dec_label_pc_10015c7c

dec_label_pc_10015c7c:                            ; preds = %dec_label_pc_10015c4d
  %v6_10015c7c = and i8 %stack_var_-532.10, 4
  %v7_10015c7c = icmp eq i8 %v6_10015c7c, 0
  %v1_10015c83 = icmp eq i1 %v7_10015c7c, false
  br i1 %v1_10015c83, label %dec_label_pc_10015caa, label %dec_label_pc_10015c85

dec_label_pc_10015c85:                            ; preds = %dec_label_pc_10015c7c
  store i32 %v5_10015c17, i32* %edi.global-to-local, align 4
  %v1_10015ca6513 = icmp eq i32 %v5_10015c17, 0
  %v2_10015ca6514 = icmp slt i32 %v5_10015c17, 0
  %v3_10015ca8519 = icmp eq i1 %v2_10015ca6514, false
  %v4_10015ca8520 = icmp eq i1 %v1_10015ca6513, false
  %v5_10015ca8521 = icmp eq i1 %v3_10015ca8519, %v4_10015ca8520
  br i1 %v5_10015ca8521, label %dec_label_pc_10015c8d, label %dec_label_pc_10015caa

dec_label_pc_10015c8d:                            ; preds = %dec_label_pc_10015c85, %dec_label_pc_10015c8d.dec_label_pc_10015ca6_crit_edge
  %v0_10015c97523 = phi i32 [ %v0_10015ca6.pre, %dec_label_pc_10015c8d.dec_label_pc_10015ca6_crit_edge ], [ %v5_10015c17, %dec_label_pc_10015c85 ]
  %v0_10015c95522 = phi i32 [ %v0_10015c98, %dec_label_pc_10015c8d.dec_label_pc_10015ca6_crit_edge ], [ %v2_10015c6c, %dec_label_pc_10015c85 ]
  store i32 %v2_100155d1, i32* @esi, align 4
  %v0_10015c93 = load i32, i32* @ebx, align 4
  store i32 %v0_10015c93, i32* @ecx, align 4
  %v1_10015c95 = and i32 %v0_10015c95522, -256
  %v2_10015c95 = or i32 %v1_10015c95, 48
  store i32 %v2_10015c95, i32* %eax.global-to-local, align 4
  %v1_10015c97 = add i32 %v0_10015c97523, -1
  store i32 %v1_10015c97, i32* %edi.global-to-local, align 4
  %v0_10015c98 = call i32 @_write_char()
  store i32 %v0_10015c98, i32* %eax.global-to-local, align 4
  %v3_10015c9d = load i32, i32* %stack_var_-552, align 4
  %v13_10015c9d = icmp eq i32 %v3_10015c9d, -1
  br i1 %v13_10015c9d, label %dec_label_pc_10015caa, label %dec_label_pc_10015c8d.dec_label_pc_10015ca6_crit_edge

dec_label_pc_10015c8d.dec_label_pc_10015ca6_crit_edge: ; preds = %dec_label_pc_10015c8d
  %v0_10015ca6.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10015ca6 = icmp eq i32 %v0_10015ca6.pre, 0
  %v2_10015ca6 = icmp slt i32 %v0_10015ca6.pre, 0
  %v3_10015ca8 = icmp eq i1 %v2_10015ca6, false
  %v4_10015ca8 = icmp eq i1 %v1_10015ca6, false
  %v5_10015ca8 = icmp eq i1 %v3_10015ca8, %v4_10015ca8
  br i1 %v5_10015ca8, label %dec_label_pc_10015c8d, label %dec_label_pc_10015caa

dec_label_pc_10015caa:                            ; preds = %dec_label_pc_10015c85, %dec_label_pc_10015c8d.dec_label_pc_10015ca6_crit_edge, %dec_label_pc_10015c8d, %dec_label_pc_10015c7c, %dec_label_pc_10015c4d
  %v10_10015caa = icmp eq i32 %stack_var_-576.2, 0
  %v3_10015cb1 = load i32, i32* %stack_var_-556, align 4
  store i32 %v3_10015cb1, i32* %eax.global-to-local, align 4
  br i1 %v10_10015caa, label %dec_label_pc_10015d2e, label %dec_label_pc_10015cb9

dec_label_pc_10015cb9:                            ; preds = %dec_label_pc_10015caa
  %tmp487 = icmp slt i32 %v3_10015cb1, 1
  br i1 %tmp487, label %dec_label_pc_10015d2e, label %dec_label_pc_10015cbd

dec_label_pc_10015cbd:                            ; preds = %dec_label_pc_10015cb9
  store i32 %stack_var_-548.7, i32* @esi, align 4
  %v1_10015cd2.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_10015cc9

dec_label_pc_10015cc9:                            ; preds = %dec_label_pc_10015cf7.dec_label_pc_10015cc9_crit_edge, %dec_label_pc_10015cbd
  %v1_10015cd2 = phi i32 [ %v1_10015cd2.pre, %dec_label_pc_10015cbd ], [ %v3_10015d20, %dec_label_pc_10015cf7.dec_label_pc_10015cc9_crit_edge ]
  %v0_10015cc9 = phi i32 [ %stack_var_-548.7, %dec_label_pc_10015cbd ], [ %v0_10015cc9.pre, %dec_label_pc_10015cf7.dec_label_pc_10015cc9_crit_edge ]
  %stack_var_-620.0 = phi i32 [ %v3_10015cb1, %dec_label_pc_10015cbd ], [ %v4_10015ccc, %dec_label_pc_10015cf7.dec_label_pc_10015cc9_crit_edge ]
  %v1_10015cc9 = inttoptr i32 %v0_10015cc9 to i16*
  %v2_10015cc9 = load i16, i16* %v1_10015cc9, align 2
  %v3_10015cc9 = zext i16 %v2_10015cc9 to i32
  %v4_10015ccc = add i32 %stack_var_-620.0, -1
  %v12_10015ccc = icmp eq i32 %v4_10015ccc, 0
  %v2_10015cd2 = add i32 %v1_10015cd2, -4
  %v3_10015cd2 = inttoptr i32 %v2_10015cd2 to i32*
  store i32 %v3_10015cc9, i32* %v3_10015cd2, align 4
  %v1_10015cd3 = add i32 %v1_10015cd2, -8
  %v2_10015cd3 = inttoptr i32 %v1_10015cd3 to i32*
  store i32 6, i32* %v2_10015cd3, align 4
  %v2_10015cd8 = add i32 %v1_10015cd2, -12
  %v3_10015cd8 = inttoptr i32 %v2_10015cd8 to i32*
  store i32 %v2_10015cd5, i32* %v3_10015cd8, align 4
  store i32 %v2_10015cd9, i32* %eax.global-to-local, align 4
  %v2_10015cdf = add i32 %v1_10015cd2, -16
  %v3_10015cdf = inttoptr i32 %v2_10015cdf to i32*
  store i32 %v2_10015cd9, i32* %v3_10015cdf, align 4
  %v0_10015ce0 = load i32, i32* @esi, align 4
  %v1_10015ce0 = add i32 %v0_10015ce0, 2
  store i32 %v1_10015ce0, i32* @esi, align 4
  %v1_10015ce3 = inttoptr i32 %v4_10015ccc to i32*
  %v5_10015ce3 = call i32 @_wctomb_s(i32* %v1_10015ce3, i8* bitcast (i32* @5 to i8*), i32 ptrtoint (i32* @5 to i32), i16 ptrtoint (i32* @5 to i16))
  store i32 %v5_10015ce3, i32* %eax.global-to-local, align 4
  %v0_10015ce8 = load i32, i32* @esp, align 4
  %v1_10015ceb = icmp eq i32 %v5_10015ce3, 0
  %v1_10015ced = icmp eq i1 %v1_10015ceb, false
  br i1 %v1_10015ced, label %dec_label_pc_10015d25, label %dec_label_pc_10015cef

dec_label_pc_10015cef:                            ; preds = %dec_label_pc_10015cc9
  %v3_10015cef = load i32, i32* %stack_var_-628, align 4
  %v15_10015cef = icmp eq i32 %v3_10015cef, %v5_10015ce3
  br i1 %v15_10015cef, label %dec_label_pc_10015d25, label %dec_label_pc_10015cf7

dec_label_pc_10015cf7:                            ; preds = %dec_label_pc_10015cef
  %v5_10015cf7 = add i32 %v0_10015ce8, 12
  %v6_10015cf7 = inttoptr i32 %v5_10015cf7 to i32*
  store i32 %v3_10015cef, i32* %v6_10015cf7, align 4
  store i32 %v2_1001526c, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_10015d0c = add i32 %v0_10015ce8, 8
  %v3_10015d0c = inttoptr i32 %v2_10015d0c to i32*
  store i32 %v2_10015cd5, i32* %v3_10015d0c, align 4
  store i32 %v2_100155d1, i32* @eax, align 4
  %v2_10015d13 = call i32 @function_100151a3(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10015d13, i32* %eax.global-to-local, align 4
  %v0_10015d1f = load i32, i32* @esp, align 4
  %v1_10015d1f = inttoptr i32 %v0_10015d1f to i32*
  %v2_10015d1f = load i32, i32* %v1_10015d1f, align 4
  store i32 %v2_10015d1f, i32* @ecx, align 4
  %v3_10015d1f = add i32 %v0_10015d1f, 4
  %v1_10015d20 = inttoptr i32 %v3_10015d1f to i32*
  %v2_10015d20 = load i32, i32* %v1_10015d20, align 4
  store i32 %v2_10015d20, i32* @ecx, align 4
  %v1_10015d21 = icmp eq i1 %v12_10015ccc, false
  br i1 %v1_10015d21, label %dec_label_pc_10015cf7.dec_label_pc_10015cc9_crit_edge, label %dec_label_pc_10015d48

dec_label_pc_10015cf7.dec_label_pc_10015cc9_crit_edge: ; preds = %dec_label_pc_10015cf7
  %v3_10015d20 = add i32 %v0_10015d1f, 8
  %v0_10015cc9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_10015cc9

dec_label_pc_10015d25:                            ; preds = %dec_label_pc_10015cef, %dec_label_pc_10015cc9
  store i32 -1, i32* %stack_var_-552, align 4
  br label %dec_label_pc_10015d48

dec_label_pc_10015d2e:                            ; preds = %dec_label_pc_10015cb9, %dec_label_pc_10015caa
  store i32 %v2_1001526c, i32* @edi, align 4
  %v1_10015d34 = load i32, i32* @esp, align 4
  %v2_10015d34 = add i32 %v1_10015d34, -4
  %v3_10015d34 = inttoptr i32 %v2_10015d34 to i32*
  store i32 %v3_10015cb1, i32* %v3_10015d34, align 4
  %v5_10015d35 = add i32 %v1_10015d34, -8
  %v6_10015d35 = inttoptr i32 %v5_10015d35 to i32*
  store i32 %stack_var_-548.7, i32* %v6_10015d35, align 4
  store i32 %v2_100155d1, i32* @eax, align 4
  %v2_10015d41 = call i32 @function_100151a3(i32 ptrtoint (i32* @5 to i32), i32 ptrtoint (i32* @5 to i32))
  store i32 %v2_10015d41, i32* %eax.global-to-local, align 4
  %v0_10015d46 = load i32, i32* @esp, align 4
  %v1_10015d46 = inttoptr i32 %v0_10015d46 to i32*
  %v2_10015d46 = load i32, i32* %v1_10015d46, align 4
  store i32 %v2_10015d46, i32* @ecx, align 4
  %v3_10015d46 = add i32 %v0_10015d46, 4
  %v1_10015d47 = inttoptr i32 %v3_10015d46 to i32*
  %v2_10015d47 = load i32, i32* %v1_10015d47, align 4
  store i32 %v2_10015d47, i32* @ecx, align 4
  br label %dec_label_pc_10015d48

dec_label_pc_10015d48:                            ; preds = %dec_label_pc_10015cf7, %dec_label_pc_10015d2e, %dec_label_pc_10015d25
  %v0_10015d6e92 = phi i32 [ %v2_10015d41, %dec_label_pc_10015d2e ], [ %v5_10015ce3, %dec_label_pc_10015d25 ], [ %v2_10015d13, %dec_label_pc_10015cf7 ]
  %v3_10015d48 = load i32, i32* %stack_var_-552, align 4
  %v11_10015d48 = icmp slt i32 %v3_10015d48, 0
  %v2_10015d4f = icmp eq i1 %v11_10015d48, false
  br i1 %v2_10015d4f, label %dec_label_pc_10015d51, label %dec_label_pc_10015d83

dec_label_pc_10015d51:                            ; preds = %dec_label_pc_10015d48
  %v6_10015d51 = and i8 %stack_var_-532.10, 4
  %v7_10015d51 = icmp eq i8 %v6_10015d51, 0
  br i1 %v7_10015d51, label %dec_label_pc_10015d83, label %dec_label_pc_10015d5a

dec_label_pc_10015d5a:                            ; preds = %dec_label_pc_10015d51
  store i32 %v5_10015c17, i32* %edi.global-to-local, align 4
  %v1_10015d7f524 = icmp eq i32 %v5_10015c17, 0
  %v2_10015d7f525 = icmp slt i32 %v5_10015c17, 0
  %v3_10015d81530 = icmp eq i1 %v2_10015d7f525, false
  %v4_10015d81531 = icmp eq i1 %v1_10015d7f524, false
  %v5_10015d81532 = icmp eq i1 %v3_10015d81530, %v4_10015d81531
  br i1 %v5_10015d81532, label %dec_label_pc_10015d62, label %dec_label_pc_10015d83

dec_label_pc_10015d62:                            ; preds = %dec_label_pc_10015d5a, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge
  %v0_10015d70534 = phi i32 [ %v0_10015d7f.pre, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %v5_10015c17, %dec_label_pc_10015d5a ]
  %v0_10015d6e533 = phi i32 [ %v0_10015d71, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %v0_10015d6e92, %dec_label_pc_10015d5a ]
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v2_100155d1, i32* %esi.global-to-local, align 4
  %v1_10015d6e = and i32 %v0_10015d6e533, -256
  %v2_10015d6e = or i32 %v1_10015d6e, 32
  store i32 %v2_10015d6e, i32* %eax.global-to-local, align 4
  %v1_10015d70 = add i32 %v0_10015d70534, -1
  store i32 %v1_10015d70, i32* %edi.global-to-local, align 4
  %v0_10015d71 = call i32 @_write_char()
  store i32 %v0_10015d71, i32* %eax.global-to-local, align 4
  %v3_10015d76 = load i32, i32* %stack_var_-552, align 4
  %v13_10015d76 = icmp eq i32 %v3_10015d76, -1
  br i1 %v13_10015d76, label %dec_label_pc_10015d83, label %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge

dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge: ; preds = %dec_label_pc_10015d62
  %v0_10015d7f.pre = load i32, i32* %edi.global-to-local, align 4
  %v1_10015d7f = icmp eq i32 %v0_10015d7f.pre, 0
  %v2_10015d7f = icmp slt i32 %v0_10015d7f.pre, 0
  %v3_10015d81 = icmp eq i1 %v2_10015d7f, false
  %v4_10015d81 = icmp eq i1 %v1_10015d7f, false
  %v5_10015d81 = icmp eq i1 %v3_10015d81, %v4_10015d81
  br i1 %v5_10015d81, label %dec_label_pc_10015d62, label %dec_label_pc_10015d83

dec_label_pc_10015d83:                            ; preds = %dec_label_pc_10015d5a, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge, %dec_label_pc_10015d62, %dec_label_pc_10015822, %dec_label_pc_1001582e, %dec_label_pc_10015d48, %dec_label_pc_10015d51, %dec_label_pc_10015bbe
  %stack_var_-544.5 = phi i32 [ %stack_var_-544.4, %dec_label_pc_10015bbe ], [ %stack_var_-544.4, %dec_label_pc_10015d51 ], [ %stack_var_-544.4, %dec_label_pc_10015d48 ], [ %v4_100157fc, %dec_label_pc_1001582e ], [ %v4_100157fc, %dec_label_pc_10015822 ], [ %stack_var_-544.4, %dec_label_pc_10015d62 ], [ %stack_var_-544.4, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-544.4, %dec_label_pc_10015d5a ]
  %stack_var_-592.4 = phi i32 [ %stack_var_-592.3, %dec_label_pc_10015bbe ], [ %stack_var_-592.3, %dec_label_pc_10015d51 ], [ %stack_var_-592.3, %dec_label_pc_10015d48 ], [ %stack_var_-592.0540, %dec_label_pc_1001582e ], [ %stack_var_-592.0540, %dec_label_pc_10015822 ], [ %stack_var_-592.3, %dec_label_pc_10015d62 ], [ %stack_var_-592.3, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-592.3, %dec_label_pc_10015d5a ]
  %stack_var_-532.11 = phi i8 [ %stack_var_-532.10, %dec_label_pc_10015bbe ], [ %stack_var_-532.10, %dec_label_pc_10015d51 ], [ %stack_var_-532.10, %dec_label_pc_10015d48 ], [ %stack_var_-532.0542, %dec_label_pc_1001582e ], [ %stack_var_-532.0542, %dec_label_pc_10015822 ], [ %stack_var_-532.10, %dec_label_pc_10015d62 ], [ %stack_var_-532.10, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-532.10, %dec_label_pc_10015d5a ]
  %stack_var_-540.11 = phi i64 [ %stack_var_-540.10, %dec_label_pc_10015bbe ], [ %stack_var_-540.10, %dec_label_pc_10015d51 ], [ %stack_var_-540.10, %dec_label_pc_10015d48 ], [ %stack_var_-540.0547, %dec_label_pc_1001582e ], [ %stack_var_-540.0547, %dec_label_pc_10015822 ], [ %stack_var_-540.10, %dec_label_pc_10015d62 ], [ %stack_var_-540.10, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-540.10, %dec_label_pc_10015d5a ]
  %stack_var_-568.6 = phi i32 [ %stack_var_-568.4, %dec_label_pc_10015bbe ], [ %stack_var_-568.5, %dec_label_pc_10015d51 ], [ %stack_var_-568.5, %dec_label_pc_10015d48 ], [ %stack_var_-568.0549, %dec_label_pc_1001582e ], [ %stack_var_-568.0549, %dec_label_pc_10015822 ], [ %stack_var_-568.5, %dec_label_pc_10015d62 ], [ %stack_var_-568.5, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-568.5, %dec_label_pc_10015d5a ]
  %stack_var_-584.3 = phi i32 [ %stack_var_-584.2, %dec_label_pc_10015bbe ], [ %stack_var_-584.2, %dec_label_pc_10015d51 ], [ %stack_var_-584.2, %dec_label_pc_10015d48 ], [ 1, %dec_label_pc_1001582e ], [ 1, %dec_label_pc_10015822 ], [ %stack_var_-584.2, %dec_label_pc_10015d62 ], [ %stack_var_-584.2, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-584.2, %dec_label_pc_10015d5a ]
  %stack_var_-576.3 = phi i32 [ %stack_var_-576.2, %dec_label_pc_10015bbe ], [ %stack_var_-576.2, %dec_label_pc_10015d51 ], [ %stack_var_-576.2, %dec_label_pc_10015d48 ], [ %stack_var_-576.0554, %dec_label_pc_1001582e ], [ %stack_var_-576.0554, %dec_label_pc_10015822 ], [ %stack_var_-576.2, %dec_label_pc_10015d62 ], [ %stack_var_-576.2, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-576.2, %dec_label_pc_10015d5a ]
  %stack_var_-636.5 = phi i32 [ %stack_var_-636.4, %dec_label_pc_10015bbe ], [ %stack_var_-636.4, %dec_label_pc_10015d51 ], [ %stack_var_-636.4, %dec_label_pc_10015d48 ], [ %stack_var_-636.0556, %dec_label_pc_1001582e ], [ %stack_var_-636.0556, %dec_label_pc_10015822 ], [ %stack_var_-636.4, %dec_label_pc_10015d62 ], [ %stack_var_-636.4, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-636.4, %dec_label_pc_10015d5a ]
  %stack_var_-548.8 = phi i32 [ %stack_var_-548.7, %dec_label_pc_10015bbe ], [ %stack_var_-548.7, %dec_label_pc_10015d51 ], [ %stack_var_-548.7, %dec_label_pc_10015d48 ], [ %stack_var_-548.0558, %dec_label_pc_1001582e ], [ %stack_var_-548.0558, %dec_label_pc_10015822 ], [ %stack_var_-548.7, %dec_label_pc_10015d62 ], [ %stack_var_-548.7, %dec_label_pc_10015d62.dec_label_pc_10015d7f_crit_edge ], [ %stack_var_-548.7, %dec_label_pc_10015d5a ]
  %v3_10015d83 = load i8*, i8** %stack_var_-588, align 4
  %v11_10015d83 = icmp eq i8* %v3_10015d83, null
  br i1 %v11_10015d83, label %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge, label %dec_label_pc_10015d8c

dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge: ; preds = %dec_label_pc_10015d83
  %v4_10015da5.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10015d9f

dec_label_pc_10015d8c:                            ; preds = %dec_label_pc_10015d83
  %v4_10015d83 = ptrtoint i8* %v3_10015d83 to i32
  %v5_10015d8c = load i32, i32* @esp, align 4
  %v6_10015d8c = add i32 %v5_10015d8c, -4
  %v7_10015d8c = inttoptr i32 %v6_10015d8c to i32*
  store i32 %v4_10015d83, i32* %v7_10015d8c, align 4
  %v1_10015d92 = call i32 @"??3@YAXPAX@Z"(i32 ptrtoint (i32* @5 to i32))
  store i32 %v1_10015d92, i32* %eax.global-to-local, align 4
  store i8* null, i8** %stack_var_-588, align 4
  %v0_10015d9e = load i32, i32* @esp, align 4
  %v1_10015d9e = inttoptr i32 %v0_10015d9e to i32*
  %v2_10015d9e = load i32, i32* %v1_10015d9e, align 4
  store i32 %v2_10015d9e, i32* @ecx, align 4
  br label %dec_label_pc_10015d9f

dec_label_pc_10015d9f:                            ; preds = %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge, %dec_label_pc_10015419, %dec_label_pc_10015470, %dec_label_pc_10015d8c, %dec_label_pc_100155cb, %dec_label_pc_10015579, %dec_label_pc_10015571, %dec_label_pc_10015569, %dec_label_pc_10015561, %dec_label_pc_10015559, %dec_label_pc_10015551, %dec_label_pc_10015539, %dec_label_pc_10015517, %dec_label_pc_100154ff, %dec_label_pc_100154f3, %dec_label_pc_100154dd, %dec_label_pc_100154c9, %dec_label_pc_100154c0, %dec_label_pc_10015496, %dec_label_pc_1001548a, %dec_label_pc_10015460, %dec_label_pc_10015445, %dec_label_pc_10015433, %dec_label_pc_10015408, %dec_label_pc_100153f9, %dec_label_pc_100153ed, %dec_label_pc_100153e1, %dec_label_pc_100153d5, %dec_label_pc_100153cc, %dec_label_pc_10015386, %dec_label_pc_10015363
  %stack_var_-632.1 = phi i32 [ %v2_1001536d, %dec_label_pc_10015363 ], [ 7, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ 7, %dec_label_pc_10015d8c ], [ 6, %dec_label_pc_10015551 ], [ 6, %dec_label_pc_10015559 ], [ 6, %dec_label_pc_10015561 ], [ 6, %dec_label_pc_10015569 ], [ 6, %dec_label_pc_10015571 ], [ 6, %dec_label_pc_10015579 ], [ %stack_var_-632.0, %dec_label_pc_100155cb ], [ 6, %dec_label_pc_10015539 ], [ 6, %dec_label_pc_10015517 ], [ 6, %dec_label_pc_100154ff ], [ 6, %dec_label_pc_100154f3 ], [ 6, %dec_label_pc_100154dd ], [ 6, %dec_label_pc_100154c0 ], [ 6, %dec_label_pc_100154c9 ], [ 5, %dec_label_pc_10015496 ], [ 5, %dec_label_pc_1001548a ], [ 5, %dec_label_pc_10015470 ], [ 4, %dec_label_pc_10015460 ], [ 3, %dec_label_pc_10015445 ], [ 3, %dec_label_pc_10015433 ], [ 3, %dec_label_pc_10015419 ], [ 2, %dec_label_pc_10015408 ], [ 2, %dec_label_pc_100153f9 ], [ 2, %dec_label_pc_100153ed ], [ 2, %dec_label_pc_100153e1 ], [ 2, %dec_label_pc_100153cc ], [ 2, %dec_label_pc_100153d5 ], [ 1, %dec_label_pc_10015386 ]
  %v4_10015da5 = phi i32 [ %v2_1001536d, %dec_label_pc_10015363 ], [ %v4_10015da5.pre, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %v1_10015d92, %dec_label_pc_10015d8c ], [ %v3_1001550b, %dec_label_pc_10015551 ], [ %v3_1001550b, %dec_label_pc_10015559 ], [ %v3_1001550b, %dec_label_pc_10015561 ], [ %v3_1001550b, %dec_label_pc_10015569 ], [ %v3_1001550b, %dec_label_pc_10015571 ], [ %v3_1001550b, %dec_label_pc_10015579 ], [ %v0_100155d7, %dec_label_pc_100155cb ], [ %v3_1001550b, %dec_label_pc_10015539 ], [ %v3_1001550b, %dec_label_pc_10015517 ], [ 6, %dec_label_pc_100154ff ], [ 6, %dec_label_pc_100154f3 ], [ 6, %dec_label_pc_100154dd ], [ 6, %dec_label_pc_100154c0 ], [ 6, %dec_label_pc_100154c9 ], [ %v4_100154a2, %dec_label_pc_10015496 ], [ 5, %dec_label_pc_1001548a ], [ 5, %dec_label_pc_10015470 ], [ 4, %dec_label_pc_10015460 ], [ %v4_10015451, %dec_label_pc_10015445 ], [ 3, %dec_label_pc_10015433 ], [ 3, %dec_label_pc_10015419 ], [ 0, %dec_label_pc_10015408 ], [ 0, %dec_label_pc_100153f9 ], [ 0, %dec_label_pc_100153ed ], [ 0, %dec_label_pc_100153e1 ], [ %v1_100153cc, %dec_label_pc_100153cc ], [ %v1_100153cc, %dec_label_pc_100153d5 ], [ 1, %dec_label_pc_10015386 ]
  %stack_var_-544.6 = phi i32 [ %stack_var_-544.0538, %dec_label_pc_10015363 ], [ %stack_var_-544.5, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-544.5, %dec_label_pc_10015d8c ], [ %stack_var_-544.0538, %dec_label_pc_10015551 ], [ %stack_var_-544.0538, %dec_label_pc_10015559 ], [ %stack_var_-544.0538, %dec_label_pc_10015561 ], [ %stack_var_-544.0538, %dec_label_pc_10015569 ], [ %stack_var_-544.0538, %dec_label_pc_10015571 ], [ %stack_var_-544.0538, %dec_label_pc_10015579 ], [ %stack_var_-544.0538, %dec_label_pc_100155cb ], [ %stack_var_-544.0538, %dec_label_pc_10015539 ], [ %stack_var_-544.0538, %dec_label_pc_10015517 ], [ %stack_var_-544.0538, %dec_label_pc_100154ff ], [ %stack_var_-544.0538, %dec_label_pc_100154f3 ], [ %stack_var_-544.0538, %dec_label_pc_100154dd ], [ %stack_var_-544.0538, %dec_label_pc_100154c0 ], [ %stack_var_-544.0538, %dec_label_pc_100154c9 ], [ %stack_var_-544.0538, %dec_label_pc_10015496 ], [ %v1_10015470, %dec_label_pc_1001548a ], [ %v1_10015470, %dec_label_pc_10015470 ], [ %stack_var_-544.0538, %dec_label_pc_10015460 ], [ %stack_var_-544.0538, %dec_label_pc_10015445 ], [ %v1_10015419, %dec_label_pc_10015433 ], [ %v1_10015419, %dec_label_pc_10015419 ], [ %stack_var_-544.0538, %dec_label_pc_10015408 ], [ %stack_var_-544.0538, %dec_label_pc_100153f9 ], [ %stack_var_-544.0538, %dec_label_pc_100153ed ], [ %stack_var_-544.0538, %dec_label_pc_100153e1 ], [ %stack_var_-544.0538, %dec_label_pc_100153cc ], [ %stack_var_-544.0538, %dec_label_pc_100153d5 ], [ %stack_var_-544.0538, %dec_label_pc_10015386 ]
  %stack_var_-592.5 = phi i32 [ %stack_var_-592.0540, %dec_label_pc_10015363 ], [ %stack_var_-592.4, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-592.4, %dec_label_pc_10015d8c ], [ %stack_var_-592.0540, %dec_label_pc_10015551 ], [ %stack_var_-592.0540, %dec_label_pc_10015559 ], [ %stack_var_-592.0540, %dec_label_pc_10015561 ], [ %stack_var_-592.0540, %dec_label_pc_10015569 ], [ %stack_var_-592.0540, %dec_label_pc_10015571 ], [ %stack_var_-592.0540, %dec_label_pc_10015579 ], [ %stack_var_-592.0540, %dec_label_pc_100155cb ], [ %stack_var_-592.0540, %dec_label_pc_10015539 ], [ %stack_var_-592.0540, %dec_label_pc_10015517 ], [ %stack_var_-592.0540, %dec_label_pc_100154ff ], [ %stack_var_-592.0540, %dec_label_pc_100154f3 ], [ %stack_var_-592.0540, %dec_label_pc_100154dd ], [ %stack_var_-592.0540, %dec_label_pc_100154c0 ], [ %stack_var_-592.0540, %dec_label_pc_100154c9 ], [ %stack_var_-592.0540, %dec_label_pc_10015496 ], [ %stack_var_-592.0540, %dec_label_pc_1001548a ], [ %stack_var_-592.0540, %dec_label_pc_10015470 ], [ %stack_var_-592.0540, %dec_label_pc_10015460 ], [ %stack_var_-592.0540, %dec_label_pc_10015445 ], [ %stack_var_-592.0540, %dec_label_pc_10015433 ], [ %stack_var_-592.0540, %dec_label_pc_10015419 ], [ %stack_var_-592.0540, %dec_label_pc_10015408 ], [ %stack_var_-592.0540, %dec_label_pc_100153f9 ], [ %stack_var_-592.0540, %dec_label_pc_100153ed ], [ %stack_var_-592.0540, %dec_label_pc_100153e1 ], [ %stack_var_-592.0540, %dec_label_pc_100153cc ], [ %stack_var_-592.0540, %dec_label_pc_100153d5 ], [ %stack_var_-592.0540, %dec_label_pc_10015386 ]
  %stack_var_-532.12 = phi i8 [ %stack_var_-532.0542, %dec_label_pc_10015363 ], [ %stack_var_-532.11, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-532.11, %dec_label_pc_10015d8c ], [ %stack_var_-532.0542, %dec_label_pc_10015551 ], [ %stack_var_-532.0542, %dec_label_pc_10015559 ], [ %stack_var_-532.0542, %dec_label_pc_10015561 ], [ %stack_var_-532.0542, %dec_label_pc_10015569 ], [ %stack_var_-532.0542, %dec_label_pc_10015571 ], [ %stack_var_-532.0542, %dec_label_pc_10015579 ], [ %stack_var_-532.0542, %dec_label_pc_100155cb ], [ %stack_var_-532.0542, %dec_label_pc_10015539 ], [ %stack_var_-532.0542, %dec_label_pc_10015517 ], [ %v5_100154ff, %dec_label_pc_100154ff ], [ %v5_100154f3, %dec_label_pc_100154f3 ], [ %stack_var_-532.0542, %dec_label_pc_100154dd ], [ %stack_var_-532.0542, %dec_label_pc_100154c0 ], [ %stack_var_-532.0542, %dec_label_pc_100154c9 ], [ %stack_var_-532.0542, %dec_label_pc_10015496 ], [ %stack_var_-532.0542, %dec_label_pc_1001548a ], [ %stack_var_-532.0542, %dec_label_pc_10015470 ], [ %stack_var_-532.0542, %dec_label_pc_10015460 ], [ %stack_var_-532.0542, %dec_label_pc_10015445 ], [ %v5_10015433, %dec_label_pc_10015433 ], [ %stack_var_-532.0542, %dec_label_pc_10015419 ], [ %v5_10015408, %dec_label_pc_10015408 ], [ %v5_100153f9, %dec_label_pc_100153f9 ], [ %v5_100153ed, %dec_label_pc_100153ed ], [ %v5_100153e1, %dec_label_pc_100153e1 ], [ %stack_var_-532.0542, %dec_label_pc_100153cc ], [ %v5_100153d5, %dec_label_pc_100153d5 ], [ %v4_100153a5, %dec_label_pc_10015386 ]
  %stack_var_-572.1 = phi i64 [ %stack_var_-572.0544, %dec_label_pc_10015363 ], [ %stack_var_-572.0544, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-572.0544, %dec_label_pc_10015d8c ], [ %stack_var_-572.0544, %dec_label_pc_10015551 ], [ %stack_var_-572.0544, %dec_label_pc_10015559 ], [ %stack_var_-572.0544, %dec_label_pc_10015561 ], [ %stack_var_-572.0544, %dec_label_pc_10015569 ], [ %stack_var_-572.0544, %dec_label_pc_10015571 ], [ %stack_var_-572.0544, %dec_label_pc_10015579 ], [ %stack_var_-572.0544, %dec_label_pc_100155cb ], [ %stack_var_-572.0544, %dec_label_pc_10015539 ], [ %stack_var_-572.0544, %dec_label_pc_10015517 ], [ %stack_var_-572.0544, %dec_label_pc_100154ff ], [ %stack_var_-572.0544, %dec_label_pc_100154f3 ], [ %stack_var_-572.0544, %dec_label_pc_100154dd ], [ %stack_var_-572.0544, %dec_label_pc_100154c0 ], [ %stack_var_-572.0544, %dec_label_pc_100154c9 ], [ %stack_var_-572.0544, %dec_label_pc_10015496 ], [ %stack_var_-572.0544, %dec_label_pc_1001548a ], [ %stack_var_-572.0544, %dec_label_pc_10015470 ], [ %stack_var_-572.0544, %dec_label_pc_10015460 ], [ %v4_10015455, %dec_label_pc_10015445 ], [ %v19_1001543a, %dec_label_pc_10015433 ], [ %v4_10015425, %dec_label_pc_10015419 ], [ %stack_var_-572.0544, %dec_label_pc_10015408 ], [ %stack_var_-572.0544, %dec_label_pc_100153f9 ], [ %stack_var_-572.0544, %dec_label_pc_100153ed ], [ %stack_var_-572.0544, %dec_label_pc_100153e1 ], [ %stack_var_-572.0544, %dec_label_pc_100153cc ], [ %stack_var_-572.0544, %dec_label_pc_100153d5 ], [ %v4_10015399, %dec_label_pc_10015386 ]
  %stack_var_-540.12 = phi i64 [ %stack_var_-540.0547, %dec_label_pc_10015363 ], [ %stack_var_-540.11, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-540.11, %dec_label_pc_10015d8c ], [ %stack_var_-540.0547, %dec_label_pc_10015551 ], [ %stack_var_-540.0547, %dec_label_pc_10015559 ], [ %stack_var_-540.0547, %dec_label_pc_10015561 ], [ %stack_var_-540.0547, %dec_label_pc_10015569 ], [ %stack_var_-540.0547, %dec_label_pc_10015571 ], [ %stack_var_-540.0547, %dec_label_pc_10015579 ], [ %stack_var_-540.0547, %dec_label_pc_100155cb ], [ %stack_var_-540.0547, %dec_label_pc_10015539 ], [ %stack_var_-540.0547, %dec_label_pc_10015517 ], [ %stack_var_-540.0547, %dec_label_pc_100154ff ], [ %stack_var_-540.0547, %dec_label_pc_100154f3 ], [ %stack_var_-540.0547, %dec_label_pc_100154dd ], [ %stack_var_-540.0547, %dec_label_pc_100154c0 ], [ %stack_var_-540.0547, %dec_label_pc_100154c9 ], [ %v4_100154a6, %dec_label_pc_10015496 ], [ -1, %dec_label_pc_1001548a ], [ %v4_1001547c, %dec_label_pc_10015470 ], [ %v4_10015460, %dec_label_pc_10015460 ], [ %stack_var_-540.0547, %dec_label_pc_10015445 ], [ %stack_var_-540.0547, %dec_label_pc_10015433 ], [ %stack_var_-540.0547, %dec_label_pc_10015419 ], [ %stack_var_-540.0547, %dec_label_pc_10015408 ], [ %stack_var_-540.0547, %dec_label_pc_100153f9 ], [ %stack_var_-540.0547, %dec_label_pc_100153ed ], [ %stack_var_-540.0547, %dec_label_pc_100153e1 ], [ %stack_var_-540.0547, %dec_label_pc_100153cc ], [ %stack_var_-540.0547, %dec_label_pc_100153d5 ], [ -1, %dec_label_pc_10015386 ]
  %stack_var_-568.7 = phi i32 [ %stack_var_-568.0549, %dec_label_pc_10015363 ], [ %stack_var_-568.6, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-568.6, %dec_label_pc_10015d8c ], [ %stack_var_-568.0549, %dec_label_pc_10015551 ], [ %stack_var_-568.0549, %dec_label_pc_10015559 ], [ %stack_var_-568.0549, %dec_label_pc_10015561 ], [ %stack_var_-568.0549, %dec_label_pc_10015569 ], [ %stack_var_-568.0549, %dec_label_pc_10015571 ], [ %stack_var_-568.0549, %dec_label_pc_10015579 ], [ %stack_var_-568.0549, %dec_label_pc_100155cb ], [ %stack_var_-568.0549, %dec_label_pc_10015539 ], [ %stack_var_-568.0549, %dec_label_pc_10015517 ], [ %stack_var_-568.0549, %dec_label_pc_100154ff ], [ %stack_var_-568.0549, %dec_label_pc_100154f3 ], [ %stack_var_-568.0549, %dec_label_pc_100154dd ], [ %stack_var_-568.0549, %dec_label_pc_100154c0 ], [ %stack_var_-568.0549, %dec_label_pc_100154c9 ], [ %stack_var_-568.0549, %dec_label_pc_10015496 ], [ %stack_var_-568.0549, %dec_label_pc_1001548a ], [ %stack_var_-568.0549, %dec_label_pc_10015470 ], [ %stack_var_-568.0549, %dec_label_pc_10015460 ], [ %stack_var_-568.0549, %dec_label_pc_10015445 ], [ %stack_var_-568.0549, %dec_label_pc_10015433 ], [ %stack_var_-568.0549, %dec_label_pc_10015419 ], [ %stack_var_-568.0549, %dec_label_pc_10015408 ], [ %stack_var_-568.0549, %dec_label_pc_100153f9 ], [ %stack_var_-568.0549, %dec_label_pc_100153ed ], [ %stack_var_-568.0549, %dec_label_pc_100153e1 ], [ %stack_var_-568.0549, %dec_label_pc_100153cc ], [ %stack_var_-568.0549, %dec_label_pc_100153d5 ], [ %v0_1001538d, %dec_label_pc_10015386 ]
  %stack_var_-576.4 = phi i32 [ %stack_var_-576.0554, %dec_label_pc_10015363 ], [ %stack_var_-576.3, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-576.3, %dec_label_pc_10015d8c ], [ %stack_var_-576.0554, %dec_label_pc_10015551 ], [ %stack_var_-576.0554, %dec_label_pc_10015559 ], [ %stack_var_-576.0554, %dec_label_pc_10015561 ], [ %stack_var_-576.0554, %dec_label_pc_10015569 ], [ %stack_var_-576.0554, %dec_label_pc_10015571 ], [ %stack_var_-576.0554, %dec_label_pc_10015579 ], [ %v5_10015587, %dec_label_pc_100155cb ], [ %stack_var_-576.0554, %dec_label_pc_10015539 ], [ %stack_var_-576.0554, %dec_label_pc_10015517 ], [ %stack_var_-576.0554, %dec_label_pc_100154ff ], [ %stack_var_-576.0554, %dec_label_pc_100154f3 ], [ %stack_var_-576.0554, %dec_label_pc_100154dd ], [ %stack_var_-576.0554, %dec_label_pc_100154c0 ], [ %stack_var_-576.0554, %dec_label_pc_100154c9 ], [ %stack_var_-576.0554, %dec_label_pc_10015496 ], [ %stack_var_-576.0554, %dec_label_pc_1001548a ], [ %stack_var_-576.0554, %dec_label_pc_10015470 ], [ %stack_var_-576.0554, %dec_label_pc_10015460 ], [ %stack_var_-576.0554, %dec_label_pc_10015445 ], [ %stack_var_-576.0554, %dec_label_pc_10015433 ], [ %stack_var_-576.0554, %dec_label_pc_10015419 ], [ %stack_var_-576.0554, %dec_label_pc_10015408 ], [ %stack_var_-576.0554, %dec_label_pc_100153f9 ], [ %stack_var_-576.0554, %dec_label_pc_100153ed ], [ %stack_var_-576.0554, %dec_label_pc_100153e1 ], [ %stack_var_-576.0554, %dec_label_pc_100153cc ], [ %stack_var_-576.0554, %dec_label_pc_100153d5 ], [ %v0_1001538d, %dec_label_pc_10015386 ]
  %stack_var_-584.4 = phi i32 [ %stack_var_-584.0551, %dec_label_pc_10015363 ], [ %stack_var_-584.3, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-584.3, %dec_label_pc_10015d8c ], [ %stack_var_-584.0551, %dec_label_pc_10015551 ], [ %stack_var_-584.0551, %dec_label_pc_10015559 ], [ %stack_var_-584.0551, %dec_label_pc_10015561 ], [ %stack_var_-584.0551, %dec_label_pc_10015569 ], [ %stack_var_-584.0551, %dec_label_pc_10015571 ], [ %stack_var_-584.0551, %dec_label_pc_10015579 ], [ %stack_var_-584.0551, %dec_label_pc_100155cb ], [ %stack_var_-584.0551, %dec_label_pc_10015539 ], [ %stack_var_-584.0551, %dec_label_pc_10015517 ], [ %stack_var_-584.0551, %dec_label_pc_100154ff ], [ %stack_var_-584.0551, %dec_label_pc_100154f3 ], [ %stack_var_-584.0551, %dec_label_pc_100154dd ], [ %stack_var_-584.0551, %dec_label_pc_100154c0 ], [ %stack_var_-584.0551, %dec_label_pc_100154c9 ], [ %stack_var_-584.0551, %dec_label_pc_10015496 ], [ %stack_var_-584.0551, %dec_label_pc_1001548a ], [ %stack_var_-584.0551, %dec_label_pc_10015470 ], [ %stack_var_-584.0551, %dec_label_pc_10015460 ], [ %stack_var_-584.0551, %dec_label_pc_10015445 ], [ %stack_var_-584.0551, %dec_label_pc_10015433 ], [ %stack_var_-584.0551, %dec_label_pc_10015419 ], [ %stack_var_-584.0551, %dec_label_pc_10015408 ], [ %stack_var_-584.0551, %dec_label_pc_100153f9 ], [ %stack_var_-584.0551, %dec_label_pc_100153ed ], [ %stack_var_-584.0551, %dec_label_pc_100153e1 ], [ %stack_var_-584.0551, %dec_label_pc_100153cc ], [ %stack_var_-584.0551, %dec_label_pc_100153d5 ], [ %v0_1001538d, %dec_label_pc_10015386 ]
  %stack_var_-636.6 = phi i32 [ %stack_var_-636.0556, %dec_label_pc_10015363 ], [ %stack_var_-636.5, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-636.5, %dec_label_pc_10015d8c ], [ %stack_var_-636.0556, %dec_label_pc_10015551 ], [ %stack_var_-636.0556, %dec_label_pc_10015559 ], [ %stack_var_-636.0556, %dec_label_pc_10015561 ], [ %stack_var_-636.0556, %dec_label_pc_10015569 ], [ %stack_var_-636.0556, %dec_label_pc_10015571 ], [ %stack_var_-636.0556, %dec_label_pc_10015579 ], [ %stack_var_-636.0556, %dec_label_pc_100155cb ], [ %stack_var_-636.0556, %dec_label_pc_10015539 ], [ %stack_var_-636.0556, %dec_label_pc_10015517 ], [ %stack_var_-636.0556, %dec_label_pc_100154ff ], [ %stack_var_-636.0556, %dec_label_pc_100154f3 ], [ %stack_var_-636.0556, %dec_label_pc_100154dd ], [ %stack_var_-636.0556, %dec_label_pc_100154c0 ], [ %stack_var_-636.0556, %dec_label_pc_100154c9 ], [ %stack_var_-636.0556, %dec_label_pc_10015496 ], [ %stack_var_-636.0556, %dec_label_pc_1001548a ], [ %stack_var_-636.0556, %dec_label_pc_10015470 ], [ %stack_var_-636.0556, %dec_label_pc_10015460 ], [ %stack_var_-636.0556, %dec_label_pc_10015445 ], [ %stack_var_-636.0556, %dec_label_pc_10015433 ], [ %stack_var_-636.0556, %dec_label_pc_10015419 ], [ %stack_var_-636.0556, %dec_label_pc_10015408 ], [ %stack_var_-636.0556, %dec_label_pc_100153f9 ], [ %stack_var_-636.0556, %dec_label_pc_100153ed ], [ %stack_var_-636.0556, %dec_label_pc_100153e1 ], [ %stack_var_-636.0556, %dec_label_pc_100153cc ], [ %stack_var_-636.0556, %dec_label_pc_100153d5 ], [ %v0_1001538d, %dec_label_pc_10015386 ]
  %stack_var_-580.1 = phi i32 [ %v1_10015336560, %dec_label_pc_10015363 ], [ %v1_10015336560, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %v1_10015336560, %dec_label_pc_10015d8c ], [ %v1_10015336560, %dec_label_pc_10015551 ], [ %v1_10015336560, %dec_label_pc_10015559 ], [ %v1_10015336560, %dec_label_pc_10015561 ], [ %v1_10015336560, %dec_label_pc_10015569 ], [ %v1_10015336560, %dec_label_pc_10015571 ], [ %v1_10015336560, %dec_label_pc_10015579 ], [ %stack_var_-580.0, %dec_label_pc_100155cb ], [ %v1_10015539, %dec_label_pc_10015539 ], [ %v1_10015517, %dec_label_pc_10015517 ], [ %v1_10015336560, %dec_label_pc_100154ff ], [ %v1_10015336560, %dec_label_pc_100154f3 ], [ %v1_100154dd, %dec_label_pc_100154dd ], [ %v1_10015336560, %dec_label_pc_100154c0 ], [ %v1_10015336560, %dec_label_pc_100154c9 ], [ %v1_10015336560, %dec_label_pc_10015496 ], [ %v1_10015336560, %dec_label_pc_1001548a ], [ %v1_10015336560, %dec_label_pc_10015470 ], [ %v1_10015336560, %dec_label_pc_10015460 ], [ %v1_10015336560, %dec_label_pc_10015445 ], [ %v1_10015336560, %dec_label_pc_10015433 ], [ %v1_10015336560, %dec_label_pc_10015419 ], [ %v1_10015336560, %dec_label_pc_10015408 ], [ %v1_10015336560, %dec_label_pc_100153f9 ], [ %v1_10015336560, %dec_label_pc_100153ed ], [ %v1_10015336560, %dec_label_pc_100153e1 ], [ %v1_10015336560, %dec_label_pc_100153cc ], [ %v1_10015336560, %dec_label_pc_100153d5 ], [ %v1_10015336560, %dec_label_pc_10015386 ]
  %stack_var_-548.9 = phi i32 [ %stack_var_-548.0558, %dec_label_pc_10015363 ], [ %stack_var_-548.8, %dec_label_pc_10015d83.dec_label_pc_10015d9f_crit_edge ], [ %stack_var_-548.8, %dec_label_pc_10015d8c ], [ %stack_var_-548.0558, %dec_label_pc_10015551 ], [ %stack_var_-548.0558, %dec_label_pc_10015559 ], [ %stack_var_-548.0558, %dec_label_pc_10015561 ], [ %stack_var_-548.0558, %dec_label_pc_10015569 ], [ %stack_var_-548.0558, %dec_label_pc_10015571 ], [ %stack_var_-548.0558, %dec_label_pc_10015579 ], [ %stack_var_-548.0558, %dec_label_pc_100155cb ], [ %stack_var_-548.0558, %dec_label_pc_10015539 ], [ %stack_var_-548.0558, %dec_label_pc_10015517 ], [ %stack_var_-548.0558, %dec_label_pc_100154ff ], [ %stack_var_-548.0558, %dec_label_pc_100154f3 ], [ %stack_var_-548.0558, %dec_label_pc_100154dd ], [ %stack_var_-548.0558, %dec_label_pc_100154c0 ], [ %stack_var_-548.0558, %dec_label_pc_100154c9 ], [ %stack_var_-548.0558, %dec_label_pc_10015496 ], [ %stack_var_-548.0558, %dec_label_pc_1001548a ], [ %stack_var_-548.0558, %dec_label_pc_10015470 ], [ %stack_var_-548.0558, %dec_label_pc_10015460 ], [ %stack_var_-548.0558, %dec_label_pc_10015445 ], [ %stack_var_-548.0558, %dec_label_pc_10015433 ], [ %stack_var_-548.0558, %dec_label_pc_10015419 ], [ %stack_var_-548.0558, %dec_label_pc_10015408 ], [ %stack_var_-548.0558, %dec_label_pc_100153f9 ], [ %stack_var_-548.0558, %dec_label_pc_100153ed ], [ %stack_var_-548.0558, %dec_label_pc_100153e1 ], [ %stack_var_-548.0558, %dec_label_pc_100153cc ], [ %stack_var_-548.0558, %dec_label_pc_100153d5 ], [ %stack_var_-548.0558, %dec_label_pc_10015386 ]
  store i32 %stack_var_-580.1, i32* %ebx.global-to-local, align 4
  %v1_10015da5 = inttoptr i32 %stack_var_-580.1 to i8*
  %v2_10015da5 = load i8, i8* %v1_10015da5, align 1
  %v3_10015da5 = zext i8 %v2_10015da5 to i32
  %v5_10015da5 = and i32 %v4_10015da5, -256
  %v6_10015da5 = or i32 %v3_10015da5, %v5_10015da5
  store i32 %v6_10015da5, i32* %eax.global-to-local, align 4
  %v5_10015dad = icmp eq i8 %v2_10015da5, 0
  br i1 %v5_10015dad, label %dec_label_pc_10015dc4, label %dec_label_pc_10015db1

dec_label_pc_10015db1:                            ; preds = %dec_label_pc_10015d9f
  store i32 %stack_var_-632.1, i32* @ecx, align 4
  store i32 %stack_var_-544.6, i32* %edi.global-to-local, align 4
  %v2_10015dbd = load i32, i32* @edx, align 4
  %v3_10015dbd = and i32 %v2_10015dbd, -256
  %v4_10015dbd = or i32 %v3_10015dbd, %v3_10015da5
  store i32 %v4_10015dbd, i32* @edx, align 4
  %v3_1001533f.pre = load i32, i32* %stack_var_-552, align 4
  %v1_10015336 = add i32 %stack_var_-580.1, 1
  store i32 %v1_10015336, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  %v16_1001533f = icmp slt i32 %v3_1001533f.pre, 0
  br i1 %v16_1001533f, label %dec_label_pc_10015dc4, label %dec_label_pc_1001534b

dec_label_pc_10015dc4:                            ; preds = %dec_label_pc_10015d9f, %dec_label_pc_10015db1, %dec_label_pc_10015314
  %v10_10015dc4 = icmp eq i8 %tmp359, 0
  br i1 %v10_10015dc4, label %dec_label_pc_10015dd7, label %dec_label_pc_10015dcd

dec_label_pc_10015dcd:                            ; preds = %dec_label_pc_10015dc4
  %v1_10015dd3 = add i32 %tmp358, 112
  %v2_10015dd3 = inttoptr i32 %v1_10015dd3 to i32*
  %v3_10015dd3 = load i32, i32* %v2_10015dd3, align 4
  %v4_10015dd3 = and i32 %v3_10015dd3, -3
  store i32 %v4_10015dd3, i32* %v2_10015dd3, align 4
  br label %dec_label_pc_10015dd7

dec_label_pc_10015dd7:                            ; preds = %dec_label_pc_10015dcd, %dec_label_pc_10015dc4
  %v3_10015dd7 = load i32, i32* %stack_var_-552, align 4
  br label %dec_label_pc_10015ddd

dec_label_pc_10015ddd:                            ; preds = %dec_label_pc_10015dd7, %dec_label_pc_1001529e
  %storemerge = phi i32 [ %v3_10015dd7, %dec_label_pc_10015dd7 ], [ -1, %dec_label_pc_1001529e ]
  store i32 %storemerge, i32* @eax, align 4
  store i32 %v2_10015215, i32* @ecx, align 4
  %v0_10015de0 = load i32, i32* @esp, align 4
  %v1_10015de0 = inttoptr i32 %v0_10015de0 to i32*
  %v2_10015de0 = load i32, i32* %v1_10015de0, align 4
  store i32 %v2_10015de0, i32* %edi.global-to-local, align 4
  %v3_10015de0 = add i32 %v0_10015de0, 4
  %v1_10015de1 = inttoptr i32 %v3_10015de0 to i32*
  %v2_10015de1 = load i32, i32* %v1_10015de1, align 4
  store i32 %v2_10015de1, i32* %esi.global-to-local, align 4
  %v3_10015de1 = add i32 %v0_10015de0, 8
  %v1_10015de2 = load i32, i32* @ebp, align 4
  %v2_10015de2 = xor i32 %v1_10015de2, %v2_10015215
  store i32 %v2_10015de2, i32* @ecx, align 4
  %v1_10015de4 = inttoptr i32 %v3_10015de1 to i32*
  %v2_10015de4 = load i32, i32* %v1_10015de4, align 4
  store i32 %v2_10015de4, i32* %ebx.global-to-local, align 4
  %v0_10015de5 = call i32 @"@__security_check_cookie@4"()
  store i32 %v0_10015de5, i32* %eax.global-to-local, align 4
  %v2_10015dea = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_10015dea, i32* %ebp.global-to-local, align 4
  ret i32 %v0_10015de5
}

define i32 @function_10015f65() local_unnamed_addr {
dec_label_pc_10015f65:
  %ebx.global-to-local = alloca i32, align 4
  %v0_10015f65 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10015f66 = call i32 @__unlock_fhandle(i32 %v0_10015f65)
  store i32 %v0_10015f65, i32* @ecx, align 4
  ret i32 %v1_10015f66
}

declare i32 @__fileno(%_IO_FILE*) local_unnamed_addr

declare i32 @_flsall(i32) local_unnamed_addr

define i32 @function_10016116() local_unnamed_addr {
dec_label_pc_10016116:
  %esi.global-to-local = alloca i32, align 4
  %v0_10016116 = load i32, i32* @global_var_1002e280.515, align 4
  %v1_1001611b = load i32, i32* %esi.global-to-local, align 4
  %v2_1001611b = mul i32 %v1_1001611b, 4
  %v3_1001611b = add i32 %v2_1001611b, %v0_10016116
  %v4_1001611b = inttoptr i32 %v3_1001611b to i32*
  %v5_1001611b = load i32, i32* %v4_1001611b, align 4
  %v2_1001611f = call i32 @__unlock_file2(i32 %v1_1001611b, i32 %v5_1001611b)
  store i32 %v5_1001611b, i32* @ecx, align 4
  ret i32 %v2_1001611f
}

define i32 @function_10016145() local_unnamed_addr {
dec_label_pc_10016145:
  %v1_10016147 = call i32 @__unlock(i32 1)
  store i32 1, i32* @ecx, align 4
  ret i32 %v1_10016147
}

define i32 @__flushall() local_unnamed_addr {
dec_label_pc_1001614e:
  %v1_10016150 = call i32 @_flsall(i32 1)
  store i32 1, i32* @ecx, align 4
  ret i32 %v1_10016150
}

define i32 @function_1001691e() local_unnamed_addr {
dec_label_pc_1001691e:
  %ebx.global-to-local = alloca i32, align 4
  %v0_1001691e = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001691f = call i32 @__unlock_fhandle(i32 %v0_1001691e)
  store i32 %v0_1001691e, i32* @ecx, align 4
  ret i32 %v1_1001691f
}

define i32 @function_10016d74() local_unnamed_addr {
dec_label_pc_10016d74:
  %ebx.global-to-local = alloca i32, align 4
  %v0_10016d74 = load i32, i32* %ebx.global-to-local, align 4
  %v1_10016d75 = call i32 @__unlock_fhandle(i32 %v0_10016d74)
  store i32 %v0_10016d74, i32* @ecx, align 4
  ret i32 %v1_10016d75
}

define i32 @function_1001713d() local_unnamed_addr {
dec_label_pc_1001713d:
  %v1_1001713f = call i32 @__unlock(i32 1)
  store i32 1, i32* @ecx, align 4
  ret i32 %v1_1001713f
}

declare i32 @__local_unwind4(i32, i32, i32, i32) local_unnamed_addr

define i32 @function_10017226(i32 %arg1) local_unnamed_addr {
dec_label_pc_10017226:
  %ebp.global-to-local = alloca i32, align 4
  %v0_10017226 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_1001722b = inttoptr i32 %arg1 to i32*
  %v2_1001722b = load i32, i32* %v1_1001722b, align 4
  store i32 %v2_1001722b, i32* %ebp.global-to-local, align 4
  %v1_1001722d = add i32 %arg1, 28
  %v2_1001722d = inttoptr i32 %v1_1001722d to i32*
  %v3_1001722d = load i32, i32* %v2_1001722d, align 4
  %v1_10017230 = add i32 %arg1, 24
  %v2_10017230 = inttoptr i32 %v1_10017230 to i32*
  %v3_10017230 = load i32, i32* %v2_10017230, align 4
  %v1_10017233 = add i32 %arg1, 40
  %v2_10017233 = inttoptr i32 %v1_10017233 to i32*
  %v3_10017233 = load i32, i32* %v2_10017233, align 4
  %v4_10017236 = call i32 @__local_unwind4(i32 %v3_10017233, i32 %v3_10017230, i32 %v3_1001722d, i32 %v0_10017226)
  ret i32 %v4_10017236
}

define i32 @function_100173c2() local_unnamed_addr {
dec_label_pc_100173c2:
  %v1_100173c4 = call i32 @__unlock(i32 14)
  store i32 14, i32* @ecx, align 4
  ret i32 %v1_100173c4
}

define i32 @__initp_misc_purevirt(i32 %arg1) local_unnamed_addr {
dec_label_pc_100176ba:
  store i32 %arg1, i32* @global_var_1002dc48.516, align 4
  ret i32 %arg1
}

define i32 @function_100177fd() local_unnamed_addr {
dec_label_pc_100177fd:
  %v1_100177ff = call i32 @__unlock(i32 1)
  store i32 1, i32* @ecx, align 4
  ret i32 %v1_100177ff
}

define i32 @function_10017ac4() local_unnamed_addr {
dec_label_pc_10017ac4:
  %v1_10017ac6 = call i32 @__unlock(i32 13)
  store i32 13, i32* @ecx, align 4
  ret i32 %v1_10017ac6
}

define i32 @function_10017e93() local_unnamed_addr {
dec_label_pc_10017e93:
  %v1_10017e95 = call i32 @__unlock(i32 13)
  store i32 13, i32* @ecx, align 4
  ret i32 %v1_10017e95
}

define i32 @function_10017e9c() local_unnamed_addr {
dec_label_pc_10017e9c:
  %eax.global-to-local = alloca i32, align 4
  %v0_10017e9c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10017e9c
}

define i32 @function_10018217() local_unnamed_addr {
dec_label_pc_10018217:
  %v1_10018219 = call i32 @__unlock(i32 12)
  store i32 12, i32* @ecx, align 4
  ret i32 %v1_10018219
}

define i32* @__encoded_null(i32* %Ptr) local_unnamed_addr {
dec_label_pc_10018223:
  %v2_10018225 = call i32* @EncodePointer(i32* %Ptr)
  ret i32* %v2_10018225
}

define i32 @"___crtTlsAlloc@4"() local_unnamed_addr {
dec_label_pc_1001822c:
  %v0_1001822c = call i32 @TlsAlloc()
  ret i32 %v0_1001822c
}

declare i32 @__mtterm() local_unnamed_addr

define i32 @function_10018348() local_unnamed_addr {
dec_label_pc_10018348:
  %v1_1001834a = call i32 @__unlock(i32 13)
  store i32 13, i32* @ecx, align 4
  ret i32 %v1_1001834a
}

define i32 @function_10018351() local_unnamed_addr {
dec_label_pc_10018351:
  %v1_10018353 = call i32 @__unlock(i32 12)
  store i32 12, i32* @ecx, align 4
  ret i32 %v1_10018353
}

define i32 @function_10018507() local_unnamed_addr {
dec_label_pc_10018507:
  %v1_10018509 = call i32 @__unlock(i32 13)
  store i32 13, i32* @ecx, align 4
  ret i32 %v1_10018509
}

define i32 @function_10018513() local_unnamed_addr {
dec_label_pc_10018513:
  %v1_10018515 = call i32 @__unlock(i32 12)
  store i32 12, i32* @ecx, align 4
  ret i32 %v1_10018515
}

define i32 @function_10018a1f() local_unnamed_addr {
dec_label_pc_10018a1f:
  %v0_10018a1f = call i32 @__SEH_epilog4()
  ret i32 %v0_10018a1f
}

define i32* @__initp_eh_hooks(i32* %Ptr) local_unnamed_addr {
dec_label_pc_10018a25:
  %v2_10018a2a = call i32* @EncodePointer(i32* %Ptr)
  %v4_10018a2a = ptrtoint i32* %v2_10018a2a to i32
  store i32 %v4_10018a2a, i32* @global_var_1002dc7c.517, align 4
  ret i32* %v2_10018a2a
}

define i32* @___get_sigabrt(i32* %Ptr) local_unnamed_addr {
dec_label_pc_10018a8b:
  %v2_10018a91 = call i32* @DecodePointer(i32* %Ptr)
  ret i32* %v2_10018a91
}

define i32 @function_10018bff() local_unnamed_addr {
dec_label_pc_10018bff:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %v0_10018bff = load i32, i32* %ebp.global-to-local, align 4
  %v1_10018bff = add i32 %v0_10018bff, -28
  %v2_10018bff = inttoptr i32 %v1_10018bff to i32*
  %v3_10018bff = load i32, i32* %v2_10018bff, align 4
  %v10_10018bff = icmp eq i32 %v3_10018bff, 0
  br i1 %v10_10018bff, label %dec_label_pc_10018bff.dec_label_pc_10018c0d_crit_edge, label %dec_label_pc_10018c05

dec_label_pc_10018bff.dec_label_pc_10018c0d_crit_edge: ; preds = %dec_label_pc_10018bff
  %v0_10018c0d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_10018c0d

dec_label_pc_10018c05:                            ; preds = %dec_label_pc_10018bff
  %v1_10018c07 = call i32 @__unlock(i32 0)
  store i32 %v1_10018c07, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  br label %dec_label_pc_10018c0d

dec_label_pc_10018c0d:                            ; preds = %dec_label_pc_10018bff.dec_label_pc_10018c0d_crit_edge, %dec_label_pc_10018c05
  %v0_10018c0d = phi i32 [ %v0_10018c0d.pre, %dec_label_pc_10018bff.dec_label_pc_10018c0d_crit_edge ], [ %v1_10018c07, %dec_label_pc_10018c05 ]
  ret i32 %v0_10018c0d
}

define i32 @function_10018c0e() local_unnamed_addr {
dec_label_pc_10018c0e:
  %eax.global-to-local = alloca i32, align 4
  %v0_10018c0f = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10018c0f
}

define i32 @function_10018c12(i32 %arg1) local_unnamed_addr {
dec_label_pc_10018c12:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v0_10018c13 = load i32, i32* %ebx.global-to-local, align 4
  %v10_10018c13 = icmp eq i32 %v0_10018c13, 8
  br i1 %v10_10018c13, label %dec_label_pc_10018c22, label %dec_label_pc_10018c18

dec_label_pc_10018c18:                            ; preds = %dec_label_pc_10018c12
  %v10_10018c18 = icmp eq i32 %v0_10018c13, 11
  br i1 %v10_10018c18, label %dec_label_pc_10018c22, label %dec_label_pc_10018c1d

dec_label_pc_10018c1d:                            ; preds = %dec_label_pc_10018c18
  %v10_10018c1d = icmp eq i32 %v0_10018c13, 4
  %v1_10018c20 = icmp eq i1 %v10_10018c1d, false
  br i1 %v1_10018c20, label %dec_label_pc_10018c33, label %dec_label_pc_10018c22

dec_label_pc_10018c22:                            ; preds = %dec_label_pc_10018c1d, %dec_label_pc_10018c18, %dec_label_pc_10018c12
  %v0_10018c22 = load i32, i32* %ebp.global-to-local, align 4
  %v1_10018c22 = add i32 %v0_10018c22, -44
  %v2_10018c22 = inttoptr i32 %v1_10018c22 to i32*
  %v3_10018c22 = load i32, i32* %v2_10018c22, align 4
  %v1_10018c25 = load i32, i32* %edi.global-to-local, align 4
  %v2_10018c25 = add i32 %v1_10018c25, 96
  %v3_10018c25 = inttoptr i32 %v2_10018c25 to i32*
  store i32 %v3_10018c22, i32* %v3_10018c25, align 4
  %v0_10018c28 = load i32, i32* %ebx.global-to-local, align 4
  %v10_10018c28 = icmp eq i32 %v0_10018c28, 8
  %v1_10018c2b = icmp eq i1 %v10_10018c28, false
  br i1 %v1_10018c2b, label %dec_label_pc_10018c33, label %dec_label_pc_10018c2d

dec_label_pc_10018c2d:                            ; preds = %dec_label_pc_10018c22
  %v0_10018c2d = load i32, i32* %ebp.global-to-local, align 4
  %v1_10018c2d = add i32 %v0_10018c2d, -48
  %v2_10018c2d = inttoptr i32 %v1_10018c2d to i32*
  %v3_10018c2d = load i32, i32* %v2_10018c2d, align 4
  %v1_10018c30 = load i32, i32* %edi.global-to-local, align 4
  %v2_10018c30 = add i32 %v1_10018c30, 100
  %v3_10018c30 = inttoptr i32 %v2_10018c30 to i32*
  store i32 %v3_10018c2d, i32* %v3_10018c30, align 4
  br label %dec_label_pc_10018c33

dec_label_pc_10018c33:                            ; preds = %dec_label_pc_10018c2d, %dec_label_pc_10018c22, %dec_label_pc_10018c1d
  ret i32 0
}

define i32 @__initp_misc_rand_s(i32 %arg1) local_unnamed_addr {
dec_label_pc_10018c3b:
  store i32 %arg1, i32* @global_var_1002dc94.519, align 4
  ret i32 %arg1
}

define i32 @__initp_heap_handler(i32 %arg1) local_unnamed_addr {
dec_label_pc_10018c4a:
  store i32 %arg1, i32* @global_var_1002dc98.520, align 4
  ret i32 %arg1
}

define i32 @"_DllMain@12"() local_unnamed_addr {
dec_label_pc_1001932e:
  ret i32 1
}

declare i32 @__aulldvrm(i32) local_unnamed_addr

define i32 @function_1001b52f() local_unnamed_addr {
dec_label_pc_1001b52f:
  %v1_1001b531 = call i32 @__amsg_exit(i32 2)
  unreachable
}

define i32 @function_1001b536(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001b536:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v0_1001b537 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001b537
}

define i32 @__crt_debugger_hook() local_unnamed_addr {
dec_label_pc_1001b953:
  %eax.global-to-local = alloca i32, align 4
  store i32 0, i32* @global_var_1002e13c.521, align 4
  %v0_1001b95a = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001b95a
}

declare i32 @___report_gsfailure() local_unnamed_addr

define i32 @function_1001bab8() local_unnamed_addr {
dec_label_pc_1001bab8:
  %tmp221 = call i32 @__decompiler_undefined_function_0()
  %v1_1001bab8 = add i32 %tmp221, -28
  %v2_1001bab8 = inttoptr i32 %v1_1001bab8 to i32*
  %v3_1001bab8 = load i32, i32* %v2_1001bab8, align 4
  %v2_1001babb = xor i32 %v3_1001bab8, %tmp221
  store i32 %v2_1001babb, i32* @ecx, align 4
  %v0_1001babd = call i32 @"@__security_check_cookie@4"()
  %v0_1001bac2 = call i32 @__SEH_epilog4()
  ret i32 %v0_1001bac2
}

define i32 @function_1001c694() local_unnamed_addr {
dec_label_pc_1001c694:
  %ebp.global-to-local = alloca i32, align 4
  %v0_1001c694 = load i32, i32* %ebp.global-to-local, align 4
  %v1_1001c694 = add i32 %v0_1001c694, 8
  %v2_1001c694 = inttoptr i32 %v1_1001c694 to i32*
  %v3_1001c694 = load i32, i32* %v2_1001c694, align 4
  %v1_1001c697 = call i32 @__unlock_fhandle(i32 %v3_1001c694)
  store i32 %v3_1001c694, i32* @ecx, align 4
  ret i32 %v1_1001c697
}

define i32 @function_1001ce67() local_unnamed_addr {
dec_label_pc_1001ce67:
  %ebx.global-to-local = alloca i32, align 4
  %v0_1001ce67 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001ce68 = call i32 @__unlock_fhandle(i32 %v0_1001ce67)
  store i32 %v0_1001ce67, i32* @ecx, align 4
  ret i32 %v1_1001ce68
}

declare i32 @_wctomb_s(i32*, i8*, i32, i16) local_unnamed_addr

define i32 @function_1001d286() local_unnamed_addr {
dec_label_pc_1001d286:
  %v1_1001d288 = call i32 @__unlock(i32 10)
  store i32 10, i32* @ecx, align 4
  ret i32 %v1_1001d288
}

declare i32 @__unlock_fhandle(i32) local_unnamed_addr

define i32 @function_1001d388() local_unnamed_addr {
dec_label_pc_1001d388:
  %v1_1001d38a = call i32 @__unlock(i32 10)
  store i32 10, i32* @ecx, align 4
  ret i32 %v1_1001d38a
}

define i32 @function_1001d391() local_unnamed_addr {
dec_label_pc_1001d391:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp222 = call i32 @__decompiler_undefined_function_0()
  %v1_1001d397 = add i32 %tmp222, 4
  %v2_1001d397 = inttoptr i32 %v1_1001d397 to i8*
  store i8 1, i8* %v2_1001d397, align 1
  %v10_1001d39b = load i32, i32* %esi.global-to-local, align 4
  %v11_1001d39b = inttoptr i32 %v10_1001d39b to i32*
  store i32 -1, i32* %v11_1001d39b, align 4
  %v0_1001d39e = load i32, i32* %esi.global-to-local, align 4
  %v1_1001d39e = load i32, i32* %edi.global-to-local, align 4
  %v2_1001d39e = mul i32 %v1_1001d39e, 4
  %v3_1001d39e = add i32 %v2_1001d39e, ptrtoint (i32* @global_var_1002e160.505 to i32)
  %v4_1001d39e = inttoptr i32 %v3_1001d39e to i32*
  %v5_1001d39e = load i32, i32* %v4_1001d39e, align 4
  %v6_1001d39e = sub i32 %v0_1001d39e, %v5_1001d39e
  %v2_1001d3a5 = sdiv i32 %v6_1001d39e, 64
  %v2_1001d3aa = mul i32 %v1_1001d39e, 32
  store i32 %v2_1001d3aa, i32* %eax.global-to-local, align 4
  %v2_1001d3ad = add i32 %v2_1001d3a5, %v2_1001d3aa
  store i32 %v2_1001d3ad, i32* %esi.global-to-local, align 4
  %v1_1001d3af = load i32, i32* %ebp.global-to-local, align 4
  %v2_1001d3af = add i32 %v1_1001d3af, -28
  %v3_1001d3af = inttoptr i32 %v2_1001d3af to i32*
  store i32 %v2_1001d3ad, i32* %v3_1001d3af, align 4
  %v4_1001d3af = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v4_1001d3af
}

define i32 @function_1001d446() local_unnamed_addr {
dec_label_pc_1001d446:
  %v1_1001d448 = call i32 @__unlock(i32 11)
  store i32 11, i32* @ecx, align 4
  ret i32 %v1_1001d448
}

define i32 @function_1001d520() local_unnamed_addr {
dec_label_pc_1001d520:
  %ebx.global-to-local = alloca i32, align 4
  %v0_1001d520 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001d521 = call i32 @__unlock_fhandle(i32 %v0_1001d520)
  store i32 %v0_1001d520, i32* @ecx, align 4
  ret i32 %v1_1001d521
}

define i32 @function_1001dcf2() local_unnamed_addr {
dec_label_pc_1001dcf2:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_1001dcf2 = load i32, i32* %ebp.global-to-local, align 4
  %v1_1001dcf2 = add i32 %v0_1001dcf2, -28
  %v2_1001dcf2 = inttoptr i32 %v1_1001dcf2 to i32*
  %v3_1001dcf2 = load i32, i32* %v2_1001dcf2, align 4
  %v4_1001dcf2 = load i32, i32* %edi.global-to-local, align 4
  %v15_1001dcf2 = icmp eq i32 %v3_1001dcf2, %v4_1001dcf2
  br i1 %v15_1001dcf2, label %dec_label_pc_1001dcf2.dec_label_pc_1001dd1f_crit_edge, label %dec_label_pc_1001dcf7

dec_label_pc_1001dcf2.dec_label_pc_1001dd1f_crit_edge: ; preds = %dec_label_pc_1001dcf2
  %v0_1001dd1f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001dd1f

dec_label_pc_1001dcf7:                            ; preds = %dec_label_pc_1001dcf2
  %v1_1001dcf7 = add i32 %v0_1001dcf2, -32
  %v2_1001dcf7 = inttoptr i32 %v1_1001dcf7 to i32*
  %v3_1001dcf7 = load i32, i32* %v2_1001dcf7, align 4
  %v15_1001dcf7 = icmp eq i32 %v3_1001dcf7, %v4_1001dcf2
  br i1 %v15_1001dcf7, label %dec_label_pc_1001dd17, label %dec_label_pc_1001dcfc

dec_label_pc_1001dcfc:                            ; preds = %dec_label_pc_1001dcf7
  %v2_1001dcfc = load i32, i32* %esi.global-to-local, align 4
  %v2_1001dd00 = sdiv i32 %v2_1001dcfc, 32
  store i32 %v2_1001dd00, i32* @ecx, align 4
  %v1_1001dd03 = and i32 %v2_1001dcfc, 31
  %v2_1001dd06 = mul nuw nsw i32 %v1_1001dd03, 64
  store i32 %v2_1001dd06, i32* %eax.global-to-local, align 4
  %v1_1001dd09 = mul nsw i32 %v2_1001dd00, 4
  %v2_1001dd09 = add i32 %v1_1001dd09, ptrtoint (i32* @global_var_1002e160.505 to i32)
  %v3_1001dd09 = inttoptr i32 %v2_1001dd09 to i32*
  %v4_1001dd09 = load i32, i32* %v3_1001dd09, align 4
  store i32 %v4_1001dd09, i32* @ecx, align 4
  %v3_1001dd10 = or i32 %v2_1001dd06, 4
  %v4_1001dd10 = add i32 %v3_1001dd10, %v4_1001dd09
  store i32 %v4_1001dd10, i32* %eax.global-to-local, align 4
  %v1_1001dd14 = inttoptr i32 %v4_1001dd10 to i8*
  %v2_1001dd14 = load i8, i8* %v1_1001dd14, align 1
  %v3_1001dd14 = and i8 %v2_1001dd14, -2
  store i8 %v3_1001dd14, i8* %v1_1001dd14, align 1
  br label %dec_label_pc_1001dd17

dec_label_pc_1001dd17:                            ; preds = %dec_label_pc_1001dcfc, %dec_label_pc_1001dcf7
  %v2_1001dd17 = load i32, i32* %esi.global-to-local, align 4
  %v1_1001dd19 = call i32 @__unlock_fhandle(i32 %v2_1001dd17)
  store i32 %v1_1001dd19, i32* %eax.global-to-local, align 4
  store i32 %v2_1001dd17, i32* @ecx, align 4
  br label %dec_label_pc_1001dd1f

dec_label_pc_1001dd1f:                            ; preds = %dec_label_pc_1001dcf2.dec_label_pc_1001dd1f_crit_edge, %dec_label_pc_1001dd17
  %v0_1001dd1f = phi i32 [ %v0_1001dd1f.pre, %dec_label_pc_1001dcf2.dec_label_pc_1001dd1f_crit_edge ], [ %v1_1001dd19, %dec_label_pc_1001dd17 ]
  ret i32 %v0_1001dd1f
}

define i32 @function_1001e1dc() local_unnamed_addr {
dec_label_pc_1001e1dc:
  %eax.global-to-local = alloca i32, align 4
  %v0_1001e1e3 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001e1e3
}

define i32 @__NLG_Call() local_unnamed_addr {
dec_label_pc_1001e204:
  %eax.global-to-local = alloca i32, align 4
  %v0_1001e206 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001e206
}

define i32 @___mtold12(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1001fd45:
  %df.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp238 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v16_1001fd4a = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v0_1001fd50 = load i32, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_1001fd53 = load i32, i32* %esi.global-to-local, align 4
  %v0_1001fd54 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_1001fd54, i32* %stack_var_-40, align 4
  %v2_1001fd5c = inttoptr i32 %arg3 to i32*
  store i32 0, i32* %v2_1001fd5c, align 4
  %v0_1001fd5e = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001fd5e = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fd5e = add i32 %v1_1001fd5e, 4
  %v3_1001fd5e = inttoptr i32 %v2_1001fd5e to i32*
  store i32 %v0_1001fd5e, i32* %v3_1001fd5e, align 4
  %v0_1001fd61 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001fd61 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fd61 = add i32 %v1_1001fd61, 8
  %v3_1001fd61 = inttoptr i32 %v2_1001fd61 to i32*
  store i32 %v0_1001fd61, i32* %v3_1001fd61, align 4
  %v4_1001fd64 = load i32, i32* %ebx.global-to-local, align 4
  %tmp261 = icmp ult i32 %v4_1001fd64, %arg2
  br i1 %tmp261, label %dec_label_pc_1001fd6d, label %dec_label_pc_1001feb2

dec_label_pc_1001fd6d:                            ; preds = %dec_label_pc_1001fd45
  store i32 0, i32* @ecx, align 4
  %v7_1001fd77.pre = load i1, i1* %df.global-to-local, align 1
  br label %dec_label_pc_1001fd72

dec_label_pc_1001fd72:                            ; preds = %dec_label_pc_1001fe97, %dec_label_pc_1001fd6d
  %stack_var_8.0 = phi i32 [ %arg2, %dec_label_pc_1001fd6d ], [ %v4_1001fe97, %dec_label_pc_1001fe97 ]
  %stack_var_12.0 = phi i32 [ %v4_1001fd64, %dec_label_pc_1001fd6d ], [ %stack_var_12.4, %dec_label_pc_1001fe97 ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_1001fd6d ], [ %v4_1001fe9d, %dec_label_pc_1001fe97 ]
  %v0_1001fd72 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_1001fd72, i32* %esi.global-to-local, align 4
  store i32 %v16_1001fd4a, i32* %edi.global-to-local, align 4
  %v1_1001fd77 = inttoptr i32 %v0_1001fd72 to i32*
  %v2_1001fd77 = load i32, i32* %v1_1001fd77, align 4
  store i32 %v2_1001fd77, i32* %stack_var_-28, align 4
  %v8_1001fd77 = select i1 %v7_1001fd77.pre, i32 -4, i32 4
  %v9_1001fd77 = add i32 %v8_1001fd77, %v16_1001fd4a
  %v10_1001fd77 = add i32 %v8_1001fd77, %v0_1001fd72
  store i32 %v9_1001fd77, i32* %edi.global-to-local, align 4
  store i32 %v10_1001fd77, i32* %esi.global-to-local, align 4
  %v1_1001fd78 = inttoptr i32 %v10_1001fd77 to i32*
  %v2_1001fd78 = load i32, i32* %v1_1001fd78, align 4
  %v4_1001fd78 = inttoptr i32 %v9_1001fd77 to i32*
  store i32 %v2_1001fd78, i32* %v4_1001fd78, align 4
  %v5_1001fd78 = load i32, i32* %edi.global-to-local, align 4
  %v6_1001fd78 = load i32, i32* %esi.global-to-local, align 4
  %v9_1001fd78 = add i32 %v5_1001fd78, %v8_1001fd77
  %v10_1001fd78 = add i32 %v6_1001fd78, %v8_1001fd77
  store i32 %v9_1001fd78, i32* %edi.global-to-local, align 4
  store i32 %v10_1001fd78, i32* %esi.global-to-local, align 4
  %v1_1001fd79 = inttoptr i32 %v10_1001fd78 to i32*
  %v2_1001fd79 = load i32, i32* %v1_1001fd79, align 4
  %v4_1001fd79 = inttoptr i32 %v9_1001fd78 to i32*
  store i32 %v2_1001fd79, i32* %v4_1001fd79, align 4
  %v0_1001fd7a = load i32, i32* @ecx, align 4
  %v2_1001fd7f = lshr i32 %v0_1001fd7a, 31
  %v0_1001fd82 = load i32, i32* %ebx.global-to-local, align 4
  %v3_1001fd82 = mul i32 %v0_1001fd82, 2
  %v2_1001fd85 = or i32 %v3_1001fd82, %v2_1001fd7f
  %v2_1001fd95 = lshr i32 %v0_1001fd82, 31
  %v2_1001fd98 = mul i32 %stack_var_12.0, 2
  %v2_1001fd9a = or i32 %v2_1001fd95, %v2_1001fd98
  %v2_1001fd9f = mul i32 %v2_1001fd85, 2
  %tmp259 = udiv i32 %v0_1001fd7a, 1073741824
  %v2_1001fda1 = and i32 %tmp259, 1
  %v2_1001fda4 = or i32 %v2_1001fd9f, %v2_1001fda1
  store i32 %v2_1001fda4, i32* %edi.global-to-local, align 4
  %v3_1001fdab = mul i32 %v2_1001fd9a, 2
  %v3_1001fdae = load i32, i32* %stack_var_-28, align 4
  %v2_1001fdb1 = mul i32 %v0_1001fd7a, 4
  store i32 %v2_1001fdb1, i32* %esi.global-to-local, align 4
  %tmp260 = udiv i32 %v0_1001fd82, 1073741824
  %v2_1001fdb3 = and i32 %tmp260, 1
  store i32 %v2_1001fdb3, i32* %ebx.global-to-local, align 4
  %v2_1001fdb6 = or i32 %v2_1001fdb3, %v3_1001fdab
  store i32 %v2_1001fdb6, i32* @ecx, align 4
  %v2_1001fdb8 = add i32 %v3_1001fdae, %v2_1001fdb1
  store i32 %v2_1001fdb8, i32* %edx.global-to-local, align 4
  %v1_1001fdba = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fdba = inttoptr i32 %v1_1001fdba to i32*
  store i32 %v2_1001fdb1, i32* %v2_1001fdba, align 4
  %v0_1001fdbc = load i32, i32* %edi.global-to-local, align 4
  %v1_1001fdbc = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fdbc = add i32 %v1_1001fdbc, 4
  %v3_1001fdbc = inttoptr i32 %v2_1001fdbc to i32*
  store i32 %v0_1001fdbc, i32* %v3_1001fdbc, align 4
  %v0_1001fdbf = load i32, i32* @ecx, align 4
  %v1_1001fdbf = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fdbf = add i32 %v1_1001fdbf, 8
  %v3_1001fdbf = inttoptr i32 %v2_1001fdbf to i32*
  store i32 %v0_1001fdbf, i32* %v3_1001fdbf, align 4
  %v0_1001fdc2 = load i32, i32* %edx.global-to-local, align 4
  %v1_1001fdc2 = load i32, i32* %esi.global-to-local, align 4
  %v7_1001fdc2 = icmp ult i32 %v0_1001fdc2, %v1_1001fdc2
  br i1 %v7_1001fdc2, label %dec_label_pc_1001fdcb, label %dec_label_pc_1001fdc6

dec_label_pc_1001fdc6:                            ; preds = %dec_label_pc_1001fd72
  %v4_1001fdc6 = load i32, i32* %stack_var_-28, align 4
  %v10_1001fdc6 = icmp ult i32 %v0_1001fdc2, %v4_1001fdc6
  %v1_1001fdc9 = icmp eq i1 %v10_1001fdc6, false
  br i1 %v1_1001fdc9, label %dec_label_pc_1001fdd2, label %dec_label_pc_1001fdcb

dec_label_pc_1001fdcb:                            ; preds = %dec_label_pc_1001fdc6, %dec_label_pc_1001fd72
  br label %dec_label_pc_1001fdd2

dec_label_pc_1001fdd2:                            ; preds = %dec_label_pc_1001fdcb, %dec_label_pc_1001fdc6
  %stack_var_12.1 = phi i1 [ false, %dec_label_pc_1001fdcb ], [ true, %dec_label_pc_1001fdc6 ]
  %v1_1001fdd6 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fdd6 = inttoptr i32 %v1_1001fdd6 to i32*
  store i32 %v0_1001fdc2, i32* %v2_1001fdd6, align 4
  br i1 %stack_var_12.1, label %dec_label_pc_1001fe01, label %dec_label_pc_1001fdda

dec_label_pc_1001fdda:                            ; preds = %dec_label_pc_1001fdd2
  store i32 %v2_1001fda4, i32* %esi.global-to-local, align 4
  %v1_1001fde1 = add i32 %v2_1001fda4, 1
  store i32 %v1_1001fde1, i32* %edi.global-to-local, align 4
  %v7_1001fde4 = icmp eq i32 %v2_1001fda4, -1
  br i1 %v7_1001fde4, label %dec_label_pc_1001fded, label %dec_label_pc_1001fde8

dec_label_pc_1001fde8:                            ; preds = %dec_label_pc_1001fdda
  %v5_1001fde8 = icmp eq i32 %v1_1001fde1, 0
  %v1_1001fdeb = icmp eq i1 %v5_1001fde8, false
  br i1 %v1_1001fdeb, label %dec_label_pc_1001fdf4, label %dec_label_pc_1001fded

dec_label_pc_1001fded:                            ; preds = %dec_label_pc_1001fde8, %dec_label_pc_1001fdda
  br label %dec_label_pc_1001fdf4

dec_label_pc_1001fdf4:                            ; preds = %dec_label_pc_1001fded, %dec_label_pc_1001fde8
  %stack_var_12.2 = phi i1 [ false, %dec_label_pc_1001fded ], [ true, %dec_label_pc_1001fde8 ]
  %v1_1001fdf8 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fdf8 = add i32 %v1_1001fdf8, 4
  %v3_1001fdf8 = inttoptr i32 %v2_1001fdf8 to i32*
  store i32 %v1_1001fde1, i32* %v3_1001fdf8, align 4
  br i1 %stack_var_12.2, label %dec_label_pc_1001fe01, label %dec_label_pc_1001fdfd

dec_label_pc_1001fdfd:                            ; preds = %dec_label_pc_1001fdf4
  %v0_1001fdfd = load i32, i32* @ecx, align 4
  %v1_1001fdfd = add i32 %v0_1001fdfd, 1
  store i32 %v1_1001fdfd, i32* @ecx, align 4
  %v1_1001fdfe = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fdfe = add i32 %v1_1001fdfe, 8
  %v3_1001fdfe = inttoptr i32 %v2_1001fdfe to i32*
  store i32 %v1_1001fdfd, i32* %v3_1001fdfe, align 4
  br label %dec_label_pc_1001fe01

dec_label_pc_1001fe01:                            ; preds = %dec_label_pc_1001fdfd, %dec_label_pc_1001fdf4, %dec_label_pc_1001fdd2
  %v0_1001fe08 = load i32, i32* %edi.global-to-local, align 4
  %v3_1001fe08 = add i32 %v0_1001fe08, %tmp239
  store i32 %v3_1001fe08, i32* %ebx.global-to-local, align 4
  %v7_1001fe0b = icmp ult i32 %v3_1001fe08, %v0_1001fe08
  br i1 %v7_1001fe0b, label %dec_label_pc_1001fe13, label %dec_label_pc_1001fe0f

dec_label_pc_1001fe0f:                            ; preds = %dec_label_pc_1001fe01
  %v7_1001fe0f = icmp ult i32 %v3_1001fe08, %tmp239
  %v1_1001fe11 = icmp eq i1 %v7_1001fe0f, false
  br i1 %v1_1001fe11, label %dec_label_pc_1001fe1a, label %dec_label_pc_1001fe13

dec_label_pc_1001fe13:                            ; preds = %dec_label_pc_1001fe0f, %dec_label_pc_1001fe01
  br label %dec_label_pc_1001fe1a

dec_label_pc_1001fe1a:                            ; preds = %dec_label_pc_1001fe13, %dec_label_pc_1001fe0f
  %stack_var_12.3 = phi i1 [ false, %dec_label_pc_1001fe13 ], [ true, %dec_label_pc_1001fe0f ]
  %v1_1001fe1e = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe1e = add i32 %v1_1001fe1e, 4
  %v3_1001fe1e = inttoptr i32 %v2_1001fe1e to i32*
  store i32 %v3_1001fe08, i32* %v3_1001fe1e, align 4
  br i1 %stack_var_12.3, label %dec_label_pc_1001fe27, label %dec_label_pc_1001fe23

dec_label_pc_1001fe23:                            ; preds = %dec_label_pc_1001fe1a
  %v0_1001fe23 = load i32, i32* @ecx, align 4
  %v1_1001fe23 = add i32 %v0_1001fe23, 1
  store i32 %v1_1001fe23, i32* @ecx, align 4
  %v1_1001fe24 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe24 = add i32 %v1_1001fe24, 8
  %v3_1001fe24 = inttoptr i32 %v2_1001fe24 to i32*
  store i32 %v1_1001fe23, i32* %v3_1001fe24, align 4
  br label %dec_label_pc_1001fe27

dec_label_pc_1001fe27:                            ; preds = %dec_label_pc_1001fe23, %dec_label_pc_1001fe1a
  %v0_1001fe27 = load i32, i32* @ecx, align 4
  %v5_1001fe27 = add i32 %v0_1001fe27, %tmp238
  %v0_1001fe2e = load i32, i32* %ebx.global-to-local, align 4
  %v2_1001fe30 = mul i32 %v5_1001fe27, 2
  %v0_1001fe32 = load i32, i32* %edx.global-to-local, align 4
  %v2_1001fe34 = lshr i32 %v0_1001fe2e, 31
  store i32 %v2_1001fe34, i32* %edi.global-to-local, align 4
  %v2_1001fe37 = or i32 %v2_1001fe30, %v2_1001fe34
  store i32 %v2_1001fe37, i32* @ecx, align 4
  %v2_1001fe39 = lshr i32 %v0_1001fe32, 31
  store i32 %v2_1001fe39, i32* %esi.global-to-local, align 4
  %v2_1001fe3c = mul i32 %v0_1001fe2e, 2
  %v2_1001fe3e = mul i32 %v0_1001fe32, 2
  store i32 %v2_1001fe3e, i32* %edx.global-to-local, align 4
  %v2_1001fe40 = or i32 %v2_1001fe39, %v2_1001fe3c
  store i32 %v2_1001fe40, i32* %ebx.global-to-local, align 4
  %v1_1001fe42 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe42 = add i32 %v1_1001fe42, 8
  %v3_1001fe42 = inttoptr i32 %v2_1001fe42 to i32*
  store i32 %v2_1001fe37, i32* %v3_1001fe42, align 4
  %v0_1001fe45 = load i32, i32* @ecx, align 4
  store i32 %stack_var_4.0, i32* @ecx, align 4
  %v0_1001fe4e = load i32, i32* %edx.global-to-local, align 4
  %v1_1001fe4e = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe4e = inttoptr i32 %v1_1001fe4e to i32*
  store i32 %v0_1001fe4e, i32* %v2_1001fe4e, align 4
  %v0_1001fe50 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001fe50 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe50 = add i32 %v1_1001fe50, 4
  %v3_1001fe50 = inttoptr i32 %v2_1001fe50 to i32*
  store i32 %v0_1001fe50, i32* %v3_1001fe50, align 4
  %v0_1001fe53 = load i32, i32* @ecx, align 4
  %v1_1001fe53 = inttoptr i32 %v0_1001fe53 to i8*
  %v2_1001fe53 = load i8, i8* %v1_1001fe53, align 1
  %v3_1001fe53 = sext i8 %v2_1001fe53 to i32
  store i32 %v3_1001fe53, i32* %esi.global-to-local, align 4
  %v0_1001fe56 = load i32, i32* %edx.global-to-local, align 4
  %v3_1001fe56 = add i32 %v0_1001fe56, %v3_1001fe53
  store i32 %v3_1001fe56, i32* @ecx, align 4
  store i32 %v3_1001fe53, i32* %stack_var_-28, align 4
  %v7_1001fe5c = icmp ult i32 %v3_1001fe56, %v0_1001fe56
  br i1 %v7_1001fe5c, label %dec_label_pc_1001fe64, label %dec_label_pc_1001fe60

dec_label_pc_1001fe60:                            ; preds = %dec_label_pc_1001fe27
  %v7_1001fe60 = icmp ult i32 %v3_1001fe56, %v3_1001fe53
  %v1_1001fe62 = icmp eq i1 %v7_1001fe60, false
  br i1 %v1_1001fe62, label %dec_label_pc_1001fe6b, label %dec_label_pc_1001fe64

dec_label_pc_1001fe64:                            ; preds = %dec_label_pc_1001fe60, %dec_label_pc_1001fe27
  br label %dec_label_pc_1001fe6b

dec_label_pc_1001fe6b:                            ; preds = %dec_label_pc_1001fe64, %dec_label_pc_1001fe60
  %stack_var_-12.0 = phi i1 [ false, %dec_label_pc_1001fe64 ], [ true, %dec_label_pc_1001fe60 ]
  %v1_1001fe6f = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe6f = inttoptr i32 %v1_1001fe6f to i32*
  store i32 %v3_1001fe56, i32* %v2_1001fe6f, align 4
  br i1 %stack_var_-12.0, label %dec_label_pc_1001fe97, label %dec_label_pc_1001fe73

dec_label_pc_1001fe73:                            ; preds = %dec_label_pc_1001fe6b
  %v0_1001fe73 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001fe73 = add i32 %v0_1001fe73, 1
  store i32 %v1_1001fe73, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v7_1001fe78 = icmp eq i32 %v0_1001fe73, -1
  br i1 %v7_1001fe78, label %dec_label_pc_1001fe81, label %dec_label_pc_1001fe7c

dec_label_pc_1001fe7c:                            ; preds = %dec_label_pc_1001fe73
  %v5_1001fe7c = icmp eq i32 %v1_1001fe73, 0
  %v1_1001fe7f = icmp eq i1 %v5_1001fe7c, false
  br i1 %v1_1001fe7f, label %dec_label_pc_1001fe84, label %dec_label_pc_1001fe81

dec_label_pc_1001fe81:                            ; preds = %dec_label_pc_1001fe7c, %dec_label_pc_1001fe73
  store i32 1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_1001fe84

dec_label_pc_1001fe84:                            ; preds = %dec_label_pc_1001fe81, %dec_label_pc_1001fe7c
  store i32 %v1_1001fe73, i32* %ebx.global-to-local, align 4
  %v1_1001fe86 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe86 = add i32 %v1_1001fe86, 4
  %v3_1001fe86 = inttoptr i32 %v2_1001fe86 to i32*
  store i32 %v1_1001fe73, i32* %v3_1001fe86, align 4
  %v0_1001fe89 = load i32, i32* %esi.global-to-local, align 4
  %v1_1001fe89 = icmp eq i32 %v0_1001fe89, 0
  br i1 %v1_1001fe89, label %dec_label_pc_1001fe97, label %dec_label_pc_1001fe8d

dec_label_pc_1001fe8d:                            ; preds = %dec_label_pc_1001fe84
  %v1_1001fe90 = add i32 %v0_1001fe45, 1
  store i32 %v1_1001fe90, i32* %edx.global-to-local, align 4
  %v1_1001fe94 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fe94 = add i32 %v1_1001fe94, 8
  %v3_1001fe94 = inttoptr i32 %v2_1001fe94 to i32*
  store i32 %v1_1001fe90, i32* %v3_1001fe94, align 4
  br label %dec_label_pc_1001fe97

dec_label_pc_1001fe97:                            ; preds = %dec_label_pc_1001fe8d, %dec_label_pc_1001fe84, %dec_label_pc_1001fe6b
  %stack_var_12.4 = phi i32 [ %v0_1001fe45, %dec_label_pc_1001fe6b ], [ %v0_1001fe45, %dec_label_pc_1001fe84 ], [ %v1_1001fe90, %dec_label_pc_1001fe8d ]
  %v4_1001fe97 = add i32 %stack_var_8.0, -1
  %v12_1001fe97 = icmp eq i32 %v4_1001fe97, 0
  store i32 %stack_var_12.4, i32* %edx.global-to-local, align 4
  %v4_1001fe9d = add i32 %stack_var_4.0, 1
  %v0_1001fea4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_1001fea4 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fea4 = add i32 %v1_1001fea4, 4
  %v3_1001fea4 = inttoptr i32 %v2_1001fea4 to i32*
  store i32 %v0_1001fea4, i32* %v3_1001fea4, align 4
  %v0_1001fea7 = load i32, i32* %edx.global-to-local, align 4
  %v1_1001fea7 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fea7 = add i32 %v1_1001fea7, 8
  %v3_1001fea7 = inttoptr i32 %v2_1001fea7 to i32*
  store i32 %v0_1001fea7, i32* %v3_1001fea7, align 4
  br i1 %v12_1001fe97, label %dec_label_pc_1001feb0, label %dec_label_pc_1001fd72

dec_label_pc_1001feb0:                            ; preds = %dec_label_pc_1001fe97
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_1001feb2

dec_label_pc_1001feb2:                            ; preds = %dec_label_pc_1001fd45, %dec_label_pc_1001feb0
  %v4_1001feb2 = phi i32 [ 0, %dec_label_pc_1001feb0 ], [ %v4_1001fd64, %dec_label_pc_1001fd45 ]
  %v0_1001feb2 = load i32, i32* %eax.global-to-local, align 4
  %v1_1001feb2 = add i32 %v0_1001feb2, 8
  %v2_1001feb2 = inttoptr i32 %v1_1001feb2 to i32*
  %v3_1001feb2 = load i32, i32* %v2_1001feb2, align 4
  %v15_1001feb2 = icmp eq i32 %v3_1001feb2, %v4_1001feb2
  %v1_1001feb5 = icmp eq i1 %v15_1001feb2, false
  br i1 %v1_1001feb5, label %dec_label_pc_1001fee1, label %dec_label_pc_1001feb7

dec_label_pc_1001feb7:                            ; preds = %dec_label_pc_1001feb2
  %v1_1001feb7 = add i32 %v0_1001feb2, 4
  %v2_1001feb7 = inttoptr i32 %v1_1001feb7 to i32*
  %v3_1001feb7 = load i32, i32* %v2_1001feb7, align 4
  store i32 %v3_1001feb7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1001feba

dec_label_pc_1001feba:                            ; preds = %dec_label_pc_1001feba.dec_label_pc_1001feba_crit_edge, %dec_label_pc_1001feb7
  %v0_1001fec3 = phi i32 [ %v3_1001feb7, %dec_label_pc_1001feb7 ], [ %v0_1001fec3.pre, %dec_label_pc_1001feba.dec_label_pc_1001feba_crit_edge ]
  %v1_1001fed5 = phi i32 [ %v0_1001feb2, %dec_label_pc_1001feb7 ], [ %v0_1001feba.pre, %dec_label_pc_1001feba.dec_label_pc_1001feba_crit_edge ]
  %stack_var_-8.0 = phi i32 [ 16462, %dec_label_pc_1001feb7 ], [ %v4_1001febc, %dec_label_pc_1001feba.dec_label_pc_1001feba_crit_edge ]
  %v1_1001feba = inttoptr i32 %v1_1001fed5 to i32*
  %v2_1001feba = load i32, i32* %v1_1001feba, align 4
  %v4_1001febc = add i32 %stack_var_-8.0, 65520
  %v2_1001fec7 = udiv i32 %v2_1001feba, 65536
  store i32 %v2_1001fec7, i32* %esi.global-to-local, align 4
  %v2_1001feca = mul i32 %v0_1001fec3, 65536
  %v2_1001fecd = udiv i32 %v0_1001fec3, 65536
  store i32 %v2_1001fecd, i32* %edi.global-to-local, align 4
  %v2_1001fed0 = or i32 %v2_1001fec7, %v2_1001feca
  store i32 %v2_1001fed0, i32* %edx.global-to-local, align 4
  %v2_1001fed2 = mul i32 %v2_1001feba, 65536
  store i32 %v2_1001fed2, i32* @ecx, align 4
  %v2_1001fed5 = add i32 %v1_1001fed5, 4
  %v3_1001fed5 = inttoptr i32 %v2_1001fed5 to i32*
  store i32 %v2_1001fed0, i32* %v3_1001fed5, align 4
  %v0_1001fed8 = load i32, i32* @ecx, align 4
  %v1_1001fed8 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fed8 = inttoptr i32 %v1_1001fed8 to i32*
  store i32 %v0_1001fed8, i32* %v2_1001fed8, align 4
  %v0_1001feda = load i32, i32* %edi.global-to-local, align 4
  %v1_1001feda = load i32, i32* %ebx.global-to-local, align 4
  %v12_1001feda = icmp eq i32 %v0_1001feda, %v1_1001feda
  br i1 %v12_1001feda, label %dec_label_pc_1001feba.dec_label_pc_1001feba_crit_edge, label %dec_label_pc_1001fede

dec_label_pc_1001feba.dec_label_pc_1001feba_crit_edge: ; preds = %dec_label_pc_1001feba
  %v0_1001feba.pre = load i32, i32* %eax.global-to-local, align 4
  %v0_1001fec3.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_1001feba

dec_label_pc_1001fede:                            ; preds = %dec_label_pc_1001feba
  %v1_1001fede = load i32, i32* %eax.global-to-local, align 4
  %v2_1001fede = add i32 %v1_1001fede, 8
  %v3_1001fede = inttoptr i32 %v2_1001fede to i32*
  store i32 %v0_1001feda, i32* %v3_1001fede, align 4
  %v0_1001fee1.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001fee1

dec_label_pc_1001fee1:                            ; preds = %dec_label_pc_1001fede, %dec_label_pc_1001feb2
  %v0_1001feec = phi i32 [ %v0_1001feb2, %dec_label_pc_1001feb2 ], [ %v0_1001fee1.pre, %dec_label_pc_1001fede ]
  %stack_var_-8.1 = phi i32 [ 16462, %dec_label_pc_1001feb2 ], [ %v4_1001febc, %dec_label_pc_1001fede ]
  %v1_1001fee1 = add i32 %v0_1001feec, 8
  %v2_1001fee1 = inttoptr i32 %v1_1001fee1 to i32*
  %v3_1001fee1 = load i32, i32* %v2_1001fee1, align 4
  store i32 %v3_1001fee1, i32* %edi.global-to-local, align 4
  %tmp256 = trunc i32 %v3_1001fee1 to i16
  %v2_1001fee4 = icmp sgt i16 %tmp256, -1
  %v1_1001feea = icmp eq i1 %v2_1001fee4, false
  br i1 %v1_1001feea, label %dec_label_pc_1001ff1c, label %dec_label_pc_1001feec

dec_label_pc_1001feec:                            ; preds = %dec_label_pc_1001fee1
  %v1_1001feec = add i32 %v0_1001feec, 4
  %v2_1001feec = inttoptr i32 %v1_1001feec to i32*
  %v3_1001feec = load i32, i32* %v2_1001feec, align 4
  store i32 %v3_1001feec, i32* @ecx, align 4
  br label %dec_label_pc_1001feef

dec_label_pc_1001feef:                            ; preds = %dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge, %dec_label_pc_1001feec
  %v0_1001feff = phi i32 [ %v3_1001fee1, %dec_label_pc_1001feec ], [ %v0_1001ff14, %dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge ]
  %v0_1001ff04 = phi i32 [ %v3_1001feec, %dec_label_pc_1001feec ], [ %v0_1001fef8.pre, %dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge ]
  %v1_1001ff0c = phi i32 [ %v0_1001feec, %dec_label_pc_1001feec ], [ %v0_1001feef.pre, %dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge ]
  %stack_var_-8.2 = phi i32 [ %stack_var_-8.1, %dec_label_pc_1001feec ], [ %v4_1001fef1, %dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge ]
  %v1_1001feef = inttoptr i32 %v1_1001ff0c to i32*
  %v2_1001feef = load i32, i32* %v1_1001feef, align 4
  %v4_1001fef1 = add i32 %stack_var_-8.2, 65535
  %v2_1001fefc = lshr i32 %v0_1001ff04, 31
  store i32 %v2_1001fefc, i32* %esi.global-to-local, align 4
  %v2_1001feff = mul i32 %v0_1001feff, 2
  %v2_1001ff01 = lshr i32 %v2_1001feef, 31
  store i32 %v2_1001ff01, i32* %edx.global-to-local, align 4
  %v2_1001ff04 = mul i32 %v0_1001ff04, 2
  %v2_1001ff06 = or i32 %v2_1001fefc, %v2_1001feff
  store i32 %v2_1001ff06, i32* %edi.global-to-local, align 4
  %v2_1001ff08 = mul i32 %v2_1001feef, 2
  store i32 %v2_1001ff08, i32* %ebx.global-to-local, align 4
  %v2_1001ff0a = or i32 %v2_1001ff01, %v2_1001ff04
  store i32 %v2_1001ff0a, i32* @ecx, align 4
  store i32 %v2_1001ff08, i32* %v1_1001feef, align 4
  %v0_1001ff0e = load i32, i32* @ecx, align 4
  %v1_1001ff0e = load i32, i32* %eax.global-to-local, align 4
  %v2_1001ff0e = add i32 %v1_1001ff0e, 4
  %v3_1001ff0e = inttoptr i32 %v2_1001ff0e to i32*
  store i32 %v0_1001ff0e, i32* %v3_1001ff0e, align 4
  %v0_1001ff11 = load i32, i32* %edi.global-to-local, align 4
  %v1_1001ff11 = load i32, i32* %eax.global-to-local, align 4
  %v2_1001ff11 = add i32 %v1_1001ff11, 8
  %v3_1001ff11 = inttoptr i32 %v2_1001ff11 to i32*
  store i32 %v0_1001ff11, i32* %v3_1001ff11, align 4
  %v0_1001ff14 = load i32, i32* %edi.global-to-local, align 4
  %tmp257 = trunc i32 %v0_1001ff14 to i16
  %v2_1001ff14 = icmp sgt i16 %tmp257, -1
  br i1 %v2_1001ff14, label %dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge, label %dec_label_pc_1001ff1c.loopexit

dec_label_pc_1001feef.dec_label_pc_1001feef_crit_edge: ; preds = %dec_label_pc_1001feef
  %v0_1001feef.pre = load i32, i32* %eax.global-to-local, align 4
  %v0_1001fef8.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_1001feef

dec_label_pc_1001ff1c.loopexit:                   ; preds = %dec_label_pc_1001feef
  %v2_1001ff22.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1001ff1c

dec_label_pc_1001ff1c:                            ; preds = %dec_label_pc_1001ff1c.loopexit, %dec_label_pc_1001fee1
  %v2_1001ff22 = phi i32 [ %v0_1001feec, %dec_label_pc_1001fee1 ], [ %v2_1001ff22.pre, %dec_label_pc_1001ff1c.loopexit ]
  %stack_var_-8.3 = phi i32 [ %stack_var_-8.1, %dec_label_pc_1001fee1 ], [ %v4_1001fef1, %dec_label_pc_1001ff1c.loopexit ]
  %v4_1001ff1c = and i32 %stack_var_-8.3, 65535
  %v5_1001ff1c = load i32, i32* @ecx, align 4
  %v6_1001ff1c = and i32 %v5_1001ff1c, -65536
  %v7_1001ff1c = or i32 %v6_1001ff1c, %v4_1001ff1c
  store i32 %v7_1001ff1c, i32* @ecx, align 4
  %v2_1001ff20 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_1001ff20, i32* %edi.global-to-local, align 4
  store i32 %v0_1001fd53, i32* %esi.global-to-local, align 4
  %v1_1001ff22 = trunc i32 %stack_var_-8.3 to i16
  %v3_1001ff22 = add i32 %v2_1001ff22, 10
  %v4_1001ff22 = inttoptr i32 %v3_1001ff22 to i16*
  store i16 %v1_1001ff22, i16* %v4_1001ff22, align 2
  store i32 %v0_1001fd50, i32* %ebx.global-to-local, align 4
  %v0_1001ff28 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_1001ff28
}

define void @"_RtlUnwind@16"(i32* %TargetFrame, i32* %TargetIp, %_EXCEPTION_RECORD* %ExceptionRecord, i32* %ReturnValue) local_unnamed_addr {
dec_label_pc_100213c8:
  call void @RtlUnwind(i32* %TargetFrame, i32* %TargetIp, %_EXCEPTION_RECORD* %ExceptionRecord, i32* %ReturnValue)
  ret void
}

define i32 @function_100213d0(void ()* %func) local_unnamed_addr {
dec_label_pc_100213d0:
  %v3_100213d5 = call i32 @_atexit(void ()* %func)
  store i32 268571984, i32* @ecx, align 4
  ret i32 %v3_100213d5
}

define i32 @function_10021400() local_unnamed_addr {
dec_label_pc_10021400:
  %v0_10021400 = load i32, i32* @global_var_1002a2fc.523, align 4
  %v7_10021411 = call i32 @LoggingSystem_RegisterLoggingChannel(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_100230f8.524, i32 0, i32 0), i32 0, i32 0, i32 0, i32 %v0_10021400)
  store i32 %v7_10021411, i32* @global_var_1002a304.152, align 4
  ret i32 %v7_10021411
}

define i32 @function_10021420() local_unnamed_addr {
dec_label_pc_10021420:
  %v1_10021425 = call i32 @"?__set_inconsistency@@YAP6AXXZP6AXXZ@Z"(i32 268457312)
  store i32 %v1_10021425, i32* @global_var_1002b680.525, align 4
  ret i32 %v1_10021425
}

define i32 @function_10021480() local_unnamed_addr {
dec_label_pc_10021480:
  store i32 0, i32* @global_var_1002be38.432, align 4
  store i32 0, i32* @global_var_1002be3c.433, align 4
  ret i32 0
}

define i32 @function_10021490() local_unnamed_addr {
dec_label_pc_10021490:
  %eax.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1002bef8.455 to i32), i32* @ecx, align 4
  %v6_100214a3 = call i32 @function_1000be10(i32 92, i32* nonnull @global_var_10022c00.168, i32 11, i32* nonnull @global_var_10028558.526)
  store i32 %v6_100214a3, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (%vtable_10023eb8_type* @global_var_10023eb8.528 to i32), i32* @global_var_1002bef8.455, align 4
  %v4_100214be = call i32* @_memset(i32* nonnull @global_var_1002c810.527, i32 0, i32 256)
  store i32 ptrtoint (i32** @global_var_1002855c.530 to i32), i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100214d0

dec_label_pc_100214d0:                            ; preds = %dec_label_pc_100214d0, %dec_label_pc_10021490
  %v0_100214d8 = phi i32 [ %v0_100214e1, %dec_label_pc_100214d0 ], [ ptrtoint (i32** @global_var_1002855c.530 to i32), %dec_label_pc_10021490 ]
  %v1_100214d0 = inttoptr i32 %v0_100214d8 to i32*
  %v2_100214d0 = load i32, i32* %v1_100214d0, align 4
  store i32 %v2_100214d0, i32* @ecx, align 4
  %v1_100214d2 = inttoptr i32 %v2_100214d0 to i8*
  %v2_100214d2 = load i8, i8* %v1_100214d2, align 1
  %v3_100214d2 = zext i8 %v2_100214d2 to i32
  %v1_100214d5 = add i32 %v0_100214d8, -4
  %v2_100214d5 = inttoptr i32 %v1_100214d5 to i8*
  %v3_100214d5 = load i8, i8* %v2_100214d5, align 1
  %v4_100214d5 = zext i8 %v3_100214d5 to i32
  %v6_100214d5 = and i32 %v2_100214d0, -256
  %v7_100214d5 = or i32 %v4_100214d5, %v6_100214d5
  store i32 %v7_100214d5, i32* @ecx, align 4
  %v1_100214d8 = add i32 %v0_100214d8, 8
  store i32 %v1_100214d8, i32* %eax.global-to-local, align 4
  %v3_100214db = add i32 %v3_100214d2, ptrtoint (i32* @global_var_1002c810.527 to i32)
  %v4_100214db = inttoptr i32 %v3_100214db to i8*
  store i8 %v3_100214d5, i8* %v4_100214db, align 1
  %v0_100214e1 = load i32, i32* %eax.global-to-local, align 4
  %v5_100214e6 = icmp slt i32 %v0_100214e1, ptrtoint (i32** @global_var_100285b4.531 to i32)
  br i1 %v5_100214e6, label %dec_label_pc_100214d0, label %dec_label_pc_100214e8

dec_label_pc_100214e8:                            ; preds = %dec_label_pc_100214d0
  ret i32 %v0_100214e1
}

define i32 @function_100214f0() local_unnamed_addr {
dec_label_pc_100214f0:
  store i32 ptrtoint (i32* @global_var_1002c918.456 to i32), i32* @ecx, align 4
  %v6_10021503 = call i32 @function_1000be10(i32 127, i32* nonnull @global_var_10022c00.168, i32 1, i32* nonnull @global_var_100285b0.532)
  store i32 ptrtoint (%vtable_10023eb0_type* @global_var_10023eb0.533 to i32), i32* @global_var_1002c918.456, align 4
  ret i32 %v6_10021503
}

define i32 @function_10021540(void ()* %func) local_unnamed_addr {
dec_label_pc_10021540:
  %v3_10021545 = call i32 @_atexit(void ()* %func)
  store i32 268572208, i32* @ecx, align 4
  ret i32 %v3_10021545
}

define i32 @function_10021550() local_unnamed_addr {
dec_label_pc_10021550:
  %eax.global-to-local = alloca i32, align 4
  %v0_10021550 = load i8, i8* @global_var_1002a300.232, align 1
  %v7_10021550 = icmp eq i8 %v0_10021550, 0
  br i1 %v7_10021550, label %dec_label_pc_10021567, label %dec_label_pc_10021559

dec_label_pc_10021559:                            ; preds = %dec_label_pc_10021550
  %v0_10021559 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10021559, i32* %eax.global-to-local, align 4
  %v1_1002155e = inttoptr i32 %v0_10021559 to i32*
  %v2_1002155e = load i32, i32* %v1_1002155e, align 4
  store i32 %v2_1002155e, i32* @ecx, align 4
  %v1_10021560 = inttoptr i32 %v2_1002155e to i32*
  %v2_10021560 = load i32, i32* %v1_10021560, align 4
  %v1_10021562 = add i32 %v2_10021560, 72
  %v2_10021562 = inttoptr i32 %v1_10021562 to i32*
  %v3_10021562 = load i32, i32* %v2_10021562, align 4
  store i32 %v3_10021562, i32* %eax.global-to-local, align 4
  ret i32 %v3_10021562

dec_label_pc_10021567:                            ; preds = %dec_label_pc_10021550
  %v0_10021567 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_10021567
}

define i32 @function_10021570() local_unnamed_addr {
dec_label_pc_10021570:
  %eax.global-to-local = alloca i32, align 4
  %v0_10021570 = load i32, i32* @global_var_1002b644.534, align 4
  %v8_10021570 = icmp slt i32 %v0_10021570, 0
  %v2_10021577 = icmp eq i1 %v8_10021570, false
  br i1 %v2_10021577, label %dec_label_pc_10021579, label %dec_label_pc_10021570.dec_label_pc_100215a6_crit_edge

dec_label_pc_10021570.dec_label_pc_100215a6_crit_edge: ; preds = %dec_label_pc_10021570
  %v0_100215a6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_100215a6

dec_label_pc_10021579:                            ; preds = %dec_label_pc_10021570
  %v0_10021579 = load i32, i32* @global_var_1002b63c.177, align 4
  store i32 %v0_10021579, i32* %eax.global-to-local, align 4
  %v1_1002157e = icmp eq i32 %v0_10021579, 0
  br i1 %v1_1002157e, label %dec_label_pc_1002159c, label %dec_label_pc_10021582

dec_label_pc_10021582:                            ; preds = %dec_label_pc_10021579
  %v0_10021582 = load i32, i32* inttoptr (i32 268575208 to i32*), align 8
  store i32 %v0_10021582, i32* @ecx, align 4
  %v1_10021588 = inttoptr i32 %v0_10021582 to i32*
  %v2_10021588 = load i32, i32* %v1_10021588, align 4
  store i32 %v2_10021588, i32* @ecx, align 4
  %v1_1002158a = inttoptr i32 %v2_10021588 to i32*
  %v2_1002158a = load i32, i32* %v1_1002158a, align 4
  %v1_1002158d = add i32 %v2_1002158a, 20
  %v2_1002158d = inttoptr i32 %v1_1002158d to i32*
  %v3_1002158d = load i32, i32* %v2_1002158d, align 4
  store i32 %v3_1002158d, i32* %eax.global-to-local, align 4
  store i32 0, i32* @global_var_1002b63c.177, align 4
  br label %dec_label_pc_1002159c

dec_label_pc_1002159c:                            ; preds = %dec_label_pc_10021582, %dec_label_pc_10021579
  %v0_100215a62 = phi i32 [ %v3_1002158d, %dec_label_pc_10021582 ], [ 0, %dec_label_pc_10021579 ]
  store i32 0, i32* @global_var_1002b640.535, align 4
  br label %dec_label_pc_100215a6

dec_label_pc_100215a6:                            ; preds = %dec_label_pc_10021570.dec_label_pc_100215a6_crit_edge, %dec_label_pc_1002159c
  %v0_100215a6 = phi i32 [ %v0_100215a6.pre, %dec_label_pc_10021570.dec_label_pc_100215a6_crit_edge ], [ %v0_100215a62, %dec_label_pc_1002159c ]
  ret i32 %v0_100215a6
}

define i32 @"??__Finitlocks@@YAXXZ"() local_unnamed_addr {
dec_label_pc_100215b0:
  store i32 ptrtoint (i32* @global_var_1002a1b0.186 to i32), i32* @ecx, align 4
  %v0_100215b5 = call i32 @function_100044a0()
  ret i32 %v0_100215b5
}

define i32 @"??__Finitlocks@@YAXXZ.13"() local_unnamed_addr {
dec_label_pc_100215c0:
  store i32 ptrtoint (i32* @global_var_1002b698.197 to i32), i32* @ecx, align 4
  %v0_100215c5 = call i32 @function_10006330()
  ret i32 %v0_100215c5
}

define i32 @"??__Finitlocks@@YAXXZ.14"() local_unnamed_addr {
dec_label_pc_100215d0:
  store i32 ptrtoint (i32* @global_var_1002be40.418 to i32), i32* @ecx, align 4
  %v0_100215d5 = call i32 @function_1000f560()
  ret i32 %v0_100215d5
}

define i32 @"??__Finitlocks@@YAXXZ.15"() local_unnamed_addr {
dec_label_pc_100215e0:
  %v0_100215e0 = load i32, i32* @global_var_1002d384.536, align 4
  store i32 ptrtoint (%vtable_1002401c_type* @global_var_1002401c.470 to i32), i32* @global_var_1002d360.537, align 4
  store i32 ptrtoint (%vtable_10023ff4_type* @global_var_10023ff4.471 to i32), i32* @global_var_1002d378.538, align 4
  %v1_100215f9 = icmp eq i32 %v0_100215e0, 0
  br i1 %v1_100215f9, label %dec_label_pc_10021610, label %dec_label_pc_100215fd

dec_label_pc_100215fd:                            ; preds = %dec_label_pc_100215e0
  %v1_100215fe = call i32 @"??3@YAXPAX@Z"(i32 %v0_100215e0)
  store i32 0, i32* @global_var_1002d384.536, align 4
  br label %dec_label_pc_10021610

dec_label_pc_10021610:                            ; preds = %dec_label_pc_100215fd, %dec_label_pc_100215e0
  store i32 ptrtoint (i32* @global_var_1002d3a4.539 to i32), i32* @ecx, align 4
  %v0_10021615 = call i32 @function_1000da70()
  store i32 ptrtoint (%vtable_10023f50_type* @global_var_10023f50.467 to i32), i32* @global_var_1002d360.537, align 4
  ret i32 %v0_10021615
}

define i32 @function_10021630() local_unnamed_addr {
dec_label_pc_10021630:
  %eax.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_10021630 = load i32, i32* @global_var_1002d3c4.540, align 4
  store i32 %v0_10021630, i32* @ecx, align 4
  %v0_10021636 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_10021636, i32* %stack_var_-4, align 4
  store i32 %v0_10021630, i32* @esi, align 4
  %v1_10021639 = icmp eq i32 %v0_10021630, 0
  br i1 %v1_10021639, label %dec_label_pc_10021630.dec_label_pc_1002165a_crit_edge, label %dec_label_pc_1002163d

dec_label_pc_10021630.dec_label_pc_1002165a_crit_edge: ; preds = %dec_label_pc_10021630
  %v0_10021665.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_1002165a

dec_label_pc_1002163d:                            ; preds = %dec_label_pc_10021630
  %v1_1002163d = call i32 @function_1000ee40(i32 %v0_10021636)
  store i32 %v1_1002163d, i32* %eax.global-to-local, align 4
  %v0_10021642 = load i32, i32* @esi, align 4
  %v1_10021642 = add i32 %v0_10021642, 36
  store i32 %v1_10021642, i32* @ecx, align 4
  %v0_10021645 = call i32 @function_1000da70()
  store i32 %v0_10021645, i32* %eax.global-to-local, align 4
  %v0_1002164a = load i32, i32* @esi, align 4
  store i32 %v0_1002164a, i32* @ecx, align 4
  %v0_1002164c = call i32 @function_1000eec0()
  store i32 %v0_1002164c, i32* %eax.global-to-local, align 4
  %v0_10021651 = load i32, i32* @esi, align 4
  %v1_10021652 = call i32 @"??3@YAXPAX@Z"(i32 %v0_10021651)
  store i32 %v1_10021652, i32* %eax.global-to-local, align 4
  %v2_10021664.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_1002165a

dec_label_pc_1002165a:                            ; preds = %dec_label_pc_10021630.dec_label_pc_1002165a_crit_edge, %dec_label_pc_1002163d
  %v0_10021665 = phi i32 [ %v1_10021652, %dec_label_pc_1002163d ], [ %v0_10021665.pre, %dec_label_pc_10021630.dec_label_pc_1002165a_crit_edge ]
  %v2_10021664 = phi i32 [ %v2_10021664.pre, %dec_label_pc_1002163d ], [ %v0_10021636, %dec_label_pc_10021630.dec_label_pc_1002165a_crit_edge ]
  store i32 0, i32* @global_var_1002d3c4.540, align 4
  store i32 %v2_10021664, i32* %esi.global-to-local, align 4
  ret i32 %v0_10021665
}

declare i32 @RegOpenKeyExA(i32*, i8*, i32, i32, i32**) local_unnamed_addr

declare i32 @RegQueryValueExA(i32*, i8*, i32*, i32*, i8*, i32*) local_unnamed_addr

declare i32 @RegCloseKey(i32*) local_unnamed_addr

declare i32 @RegDeleteValueA(i32*, i8*) local_unnamed_addr

declare i32 @TlsAlloc() local_unnamed_addr

declare void @RtlUnwind(i32*, i32*, %_EXCEPTION_RECORD*, i32*) local_unnamed_addr

declare i32 @GetEnvironmentVariableA(i8*, i8*, i32) local_unnamed_addr

declare i32 @GetModuleFileNameA(i32*, i8*, i32) local_unnamed_addr

declare i32* @GetModuleHandleA(i8*) local_unnamed_addr

declare i1 @TerminateProcess(i32*, i32) local_unnamed_addr

declare i32* @GetCurrentProcess() local_unnamed_addr

declare i1 @SetConsoleCtrlHandler(i1 (i32)*, i1) local_unnamed_addr

declare i1 @AllocConsole() local_unnamed_addr

declare i32* @LoadLibraryA(i8*) local_unnamed_addr

declare i1 @CloseHandle(i32*) local_unnamed_addr

declare i32 @WaitForSingleObject(i32*, i32) local_unnamed_addr

declare i32* @CreateMutexA(%_SECURITY_ATTRIBUTES*, i1, i8*) local_unnamed_addr

declare i1 @ReleaseMutex(i32*) local_unnamed_addr

declare i32 @GetCurrentDirectoryA(i32, i8*) local_unnamed_addr

declare i1 @SetPriorityClass(i32*, i32) local_unnamed_addr

declare i8* @GetCommandLineA() local_unnamed_addr

declare i32 @GetCurrentThreadId() local_unnamed_addr

declare i32 ()* @GetProcAddress(i32*, i8*) local_unnamed_addr

declare i32* @LoadLibraryExA(i8*, i32*, i32) local_unnamed_addr

declare i32 @GetCurrentProcessId() local_unnamed_addr

declare i32* @CreateFileMappingA(i32*, %_SECURITY_ATTRIBUTES*, i32, i32, i32, i8*) local_unnamed_addr

declare i1 @FreeLibrary(i32*) local_unnamed_addr

declare i32* @DecodePointer(i32*) local_unnamed_addr

declare i32* @EncodePointer(i32*) local_unnamed_addr

declare i32* @ShellExecuteA(i32*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr

declare i32 @MessageBoxA(i32*, i8*, i8*, i32) local_unnamed_addr

declare i32* @FindWindowA(i8*, i8*) local_unnamed_addr

declare i32 @SendMessageA(i32*, i32, i32, i32) local_unnamed_addr

declare i32 @WSAStartup(i16, %WSAData*) local_unnamed_addr

declare i32 @WSACleanup() local_unnamed_addr

declare i32 @CoInitialize(i32*) local_unnamed_addr

declare void @CoUninitialize() local_unnamed_addr

declare i32 @SteamAPI_GetSteamInstallPath() local_unnamed_addr

declare i32 @Plat_CreateWindow(i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @Plat_GetDesktopResolution(i8*, i8*) local_unnamed_addr

declare i32 @Plat_SetWindowPos(i32, i32, i32) local_unnamed_addr

declare i32 @Plat_IsInDebugSession() local_unnamed_addr

declare i32 @WriteMiniDump() local_unnamed_addr

declare i32 @Plat_ExitProcess(i32) local_unnamed_addr

declare i32 @LoggingSystem_RegisterLoggingChannel(i8*, i32, i32, i32, i32) local_unnamed_addr

declare i32 @LoggingSystem_RegisterLoggingListener(i32**) local_unnamed_addr

declare i32 @Plat_VerifyHardwareKeyPrompt() local_unnamed_addr

declare i32 @"?DevMsg@@YAXPBDZZ"() local_unnamed_addr

declare i32 @RunTSQueueTests() local_unnamed_addr

declare i32 @Msg() local_unnamed_addr

declare i32 @ShouldUseNewAssertDialog(i32, i32) local_unnamed_addr

declare i32 @COM_TimestampedLog() local_unnamed_addr

declare i32 @Warning() local_unnamed_addr

declare i32 @Error() local_unnamed_addr

declare i32 @CommandLine() local_unnamed_addr

declare i32 @LoggingSystem_ResetCurrentLoggingState() local_unnamed_addr

declare i32 @Plat_MessageBox(i8*, i32) local_unnamed_addr

declare i32 @Plat_DebugString(i32) local_unnamed_addr

declare i32 @"?DevWarning@@YAXPBDZZ"() local_unnamed_addr

declare i32 @GetThreadedLoadLibraryFunc() local_unnamed_addr

declare i32 @RunTSListTests() local_unnamed_addr

declare i32 @Plat_FloatTime() local_unnamed_addr

declare i32 @"?Lock@CThreadFastMutex@@ACEXII@Z"(i32, i32) local_unnamed_addr

declare i32 @ReleaseThreadHandle() local_unnamed_addr

declare i32 @CreateSimpleThread(i32, i32*, i32) local_unnamed_addr

declare i32 @StackToolsNotify_LoadedLibrary() local_unnamed_addr

declare i32 @VStdLib_GetICVarFactory() local_unnamed_addr

declare i32 @KeyValuesSystem() local_unnamed_addr

declare i32 @V_UnicodeToUTF8(i32, i32*, i32) local_unnamed_addr

declare i32 @RunThreadPoolTests() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i8 @llvm.ctpop.i8(i8) #0

declare i32 @__asm_int3() local_unnamed_addr

declare i128 @__asm_xorps(i128, i128) local_unnamed_addr

declare i32 @__asm_movss(i128) local_unnamed_addr

declare i128 @__asm_movss.11(i32) local_unnamed_addr

declare i32 @__asm_cvttss2si(i32) local_unnamed_addr

declare i128 @__asm_movd(i32) local_unnamed_addr

declare i128 @__asm_cvtdq2ps(i128) local_unnamed_addr

declare i128 @__asm_cvtps2pd(i128) local_unnamed_addr

declare i32 @__asm_movsd(i128) local_unnamed_addr

declare i32 @__asm_pause() local_unnamed_addr

declare i128 @__asm_xorpd(i128, i128) local_unnamed_addr

declare void @__asm_movlpd(i64, i128) local_unnamed_addr

declare i32 @__asm_cvttss2si.12(i128) local_unnamed_addr

declare void @__asm_comiss(i128, i128) local_unnamed_addr

declare void @__asm_ucomiss(i128, i32) local_unnamed_addr

declare i128 @__asm_cvtsi2ss(i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { nounwind readnone }
