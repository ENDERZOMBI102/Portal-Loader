//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) 2020 Retargetable Decompiler <info@retdec.com>
//

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <windows.h>

// ------------------------ Structures ------------------------

struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD * e0;
    struct _CONTEXT * e1;
};

struct _EXCEPTION_RECORD {
    int32_t e0;
    int32_t e1;
    struct _EXCEPTION_RECORD * e2;
    int32_t * e3;
    int32_t e4;
    int32_t e5[1];
};

struct _IO_FILE {
    int32_t e0;
};

struct _M128A {
    int64_t e0;
    int64_t e1;
};

struct _CONTEXT {
    int64_t e0;
    int64_t e1;
    int64_t e2;
    int64_t e3;
    int64_t e4;
    int64_t e5;
    int32_t e6;
    int32_t e7;
    int16_t e8;
    int16_t e9;
    int16_t e10;
    int16_t e11;
    int16_t e12;
    int16_t e13;
    int32_t e14;
    int64_t e15;
    int64_t e16;
    int64_t e17;
    int64_t e18;
    int64_t e19;
    int64_t e20;
    int64_t e21;
    int64_t e22;
    int64_t e23;
    int64_t e24;
    int64_t e25;
    int64_t e26;
    int64_t e27;
    int64_t e28;
    int64_t e29;
    int64_t e30;
    int64_t e31;
    int64_t e32;
    int64_t e33;
    int64_t e34;
    int64_t e35;
    int64_t e36;
    int64_t e37;
    int32_t e38;
    struct _M128A e39[26];
    int64_t e40;
    int64_t e41;
    int64_t e42;
    int64_t e43;
    int64_t e44;
    int64_t e45;
};

// ------------------- Function Prototypes --------------------

int32_t _WinMain_40_16(int32_t hModule, int32_t a2, int32_t a3, int32_t a4);
int32_t function_401000(int32_t a1);

// --------------------- Global Variables ---------------------

int32_t g1 = 0; // eax
int32_t g2 = 0; // ebp
int32_t g3 = 0; // ebx
int32_t g4 = 0; // ecx
int32_t g5 = 0; // edi
int32_t g6 = 0; // esi
char * g7 = "l";
int32_t g8 = 0x6000006;
char (*g9)[7] = "(null)";
int16_t (*g10)[7] = L"(null)";
int32_t g11 = -1;
int32_t g12 = 0x407c97;
int32_t g13 = 0x407c97;
int32_t g14 = 0x407c97;
int32_t g15 = -0x44bf19b2;
char * g17;
char * g18;
int32_t g19 = 0;
int32_t g20 = 0;
int32_t g21 = 0;
int32_t g22 = 0;
int32_t g23 = 0;
int32_t g24 = 0;
int32_t g25 = 0;
int32_t g26 = 0;
int32_t g27 = 0;
int32_t g28 = 0;
int32_t g29;
int32_t g30;
int32_t * g16 = &g26;

// ------------------------ Functions -------------------------


int32_t function_401000(int32_t a1) {
    unsigned char v1 = *(char *)g1;
    int32_t v2 = (int32_t)v1 | g4 & -256;
    int32_t v3;
    *(char *)&v3 = v1;
    int32_t v4 = g1 + 1;
    if (v1 != 0) {
        unsigned char v5 = *(char *)v4;
        v2 = (int32_t)v5 | v2 & -256;
        *(char *)(v4 + (int32_t)&v3 - g1) = v5;
        while ((char)v2 != 0) {
            v4++;
            v5 = *(char *)v4;
            v2 = (int32_t)v5 | v2 & -256;
            *(char *)(v4 + (int32_t)&v3 - g1) = v5;
        }
    }
    char * v6 = strrchr((char *)&v3, 92);
    if (v6 != NULL) {
        *(char *)((int32_t)v6 + 1) = 0;
    }
    int32_t v7 = 0;
    unsigned char v8 = *(char *)(v7 - 260 + g2);
    *(char *)(v7 + (int32_t)&g18) = v8;
    int32_t v9 = 1;
    int32_t v10 = (int32_t)v8 | v2 & -256;
    while ((char)v10 != 0) {
        v7 = v9;
        v8 = *(char *)(v7 - 260 + g2);
        *(char *)(v7 + (int32_t)&g18) = v8;
        v9++;
        v10 = (int32_t)v8 | v10 & -256;
    }
    int32_t v11 = v10;
    int32_t v12 = (int32_t)&g18;
    unsigned char v13 = *(char *)v12;
    int32_t v14 = v12 + 1;
    while (v13 != 0) {
        v11 = (int32_t)v13 | v11 & -256;
        v12 = v14;
        v13 = *(char *)v12;
        v14 = v12 + 1;
    }
    int32_t v15 = v14 - (int32_t)&g19;
    if (v15 == 0) {
        return (int32_t)&g18;
    }
    char * v16 = (char *)(v15 + (int32_t)&g17);
    unsigned char v17 = *v16;
    if (v17 != 92 != v17 != 47) {
        *v16 = 0;
    }
    return (int32_t)&g18;
}


int32_t _WinMain_40_16(int32_t hModule, int32_t a2, int32_t a3, int32_t a4) {
    chkstk();
    g4 = hModule;
    int32_t v1 = (int32_t)getenv("PATH");
    int32_t lpFilename;
    int32_t nameSize = GetModuleFileNameA((int32_t *)hModule, (char *)&lpFilename, 260);
    if (nameSize == 0) {
        MessageBoxA((int32_t *)nameSize, "Failed calling GetModuleFileName", "Launcher Error", nameSize);
        return 0;
    }
    g1 = &lpFilename;
    int32_t v2;
    int32_t v3 = function_401000(v2);
    int32_t v4;
    snprintf((char *)&v4, 0x1000, "PATH=%s\\bin\\;%s", (char *)v3, (char *)v1);
    putenv(NULL);
    int32_t * hModule2 = LoadLibraryExA("%s\\bin\\launcher.dll", NULL, (int32_t)&g30);
    if (hModule2 != NULL) {
        return (int32_t)GetProcAddress(hModule2, "LauncherMain");
    }
    int32_t errorCode = GetLastError();
    FormatMessageA(0x1300, NULL, errorCode, (int32_t)&g30, (char *)&g30, (int32_t)&g30, &g30);
    int32_t v5;
    snprintf((char *)&v5, 1024, "Failed to load the launcher DLL:\n\n%s", (char *)hModule);
    MessageBoxA(NULL, (char *)&g30, (char *)&g30, (int32_t)&g30);
    LocalFree(hModule);
    return 0;
}

// --------------- Dynamically Linked Functions ---------------

// PVOID DecodePointer(_In_opt_ PVOID Ptr);
// PVOID EncodePointer(_In_opt_ PVOID Ptr);
// DWORD FormatMessageA(_In_ DWORD dwFlags, _In_opt_ LPCVOID lpSource, _In_ DWORD dwMessageId, _In_ DWORD dwLanguageId, _Out_ LPSTR lpBuffer, _In_ DWORD nSize, _In_opt_ va_list * Arguments);
// DWORD GetLastError(VOID);
// DWORD GetModuleFileNameA(_In_opt_ HMODULE hModule, LPSTR lpFilename, _In_ DWORD nSize);
// FARPROC GetProcAddress(_In_ HMODULE hModule, _In_ LPCSTR lpProcName);
// HMODULE LoadLibraryExA(_In_ LPCSTR lpLibFileName, HANDLE hFile, _In_ DWORD dwFlags);
// HLOCAL LocalFree(HLOCAL hMem);
// int MessageBoxA(_In_opt_ HWND hWnd, _In_opt_ LPCSTR lpText, _In_opt_ LPCSTR lpCaption, _In_ UINT uType);
// VOID RtlUnwind(_In_opt_ PVOID TargetFrame, _In_opt_ PVOID TargetIp, _In_opt_ PEXCEPTION_RECORD ExceptionRecord, _In_ PVOID ReturnValue);
// LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(_In_opt_ LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
// DWORD TlsAlloc(VOID);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: microsoft linker (10.0)
// Detected language: C++
// Detected functions: 67
// Decompilation date: 2020-02-09 15:58:02