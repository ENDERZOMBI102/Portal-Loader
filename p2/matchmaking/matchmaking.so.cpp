//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) 2020 Retargetable Decompiler <info@retdec.com>
//

#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

// ---------------- Integer Types Definitions -----------------

typedef int8_t int3_t;
typedef int64_t int80_t;
typedef int64_t int128_t;

// ----------------- Float Types Definitions ------------------

typedef float float32_t;
typedef double float64_t;
typedef long double float80_t;

// ------------------------ Structures ------------------------

struct dl_phdr_info {
    int32_t e0;
    char * e1;
    int32_t * e2;
    int32_t e3;
    int64_t e4;
    int64_t e5;
    int32_t e6;
    int32_t * e7;
};

// ------------------- Function Prototypes --------------------

int32_t _fini(int32_t a1);
int32_t _init(int32_t a1);
int32_t CreateInterface(void);
int32_t entry_point(void);
int32_t function_18e70(int32_t a1);
void function_18e80(void);
int32_t function_18e90(int32_t * once_control, void (*init_routine)());
void function_18ea0(void);
void function_18eb0(int32_t * ptr);
int32_t function_18ec0(int32_t a1);
int32_t * function_18ed0(int32_t size);
int32_t function_18ee0(int32_t a1);
int32_t function_18ef0(int32_t (*a1)(struct dl_phdr_info *, int32_t, int32_t *), int32_t * data);
int32_t function_18f00(int32_t a1);
int32_t function_18f40(void);
int32_t function_1909a(void);
int32_t function_19166(void);
int32_t function_19190(void);
int32_t function_19200(void);
int32_t function_19300(void);
int32_t function_1936c(void);
int32_t function_19374(int16_t a1);
int32_t function_193b0(void);
int32_t function_193e0(void);
int32_t function_19420(void);
int32_t function_194d0(void);
int32_t function_19510(void);
int32_t function_19550(void);
int32_t function_19580(void);
int32_t function_19675(void);
int32_t function_19732(void);
int32_t function_19883(void);
int32_t function_1993e(int32_t a1);
int32_t function_199a2(void);
int32_t function_19a40(void);
int32_t function_19b4e(void);
int32_t function_19b8a(void);
int32_t function_19b90(void);
int32_t function_19c00(void);
int32_t function_19c70(void);
int32_t function_19dcd(void);
int32_t function_19df2(void);
int32_t function_19e5a(void);
int32_t function_19f42(void);
int32_t function_1a1e8(void);
int32_t function_1a25e(void);
int32_t function_1a35a(void);
int32_t function_1a466(void);
int32_t function_1a4a0(void);
int32_t function_1a671(int32_t a1);
int32_t function_1a67a(void);
int32_t function_1a680(void);
int32_t function_1a7d0(void);
int32_t function_1a9fa(void);
int32_t function_1ab8a(void);
int32_t function_1ac92(void);
int32_t function_1aead(void);
int32_t function_1af12(void);
int32_t function_1afb2(void);
int32_t function_1afc0(void);
int32_t function_1b0f0(void);
int32_t function_1b22a(void);
int32_t function_1b312(void);
int32_t function_1b3b2(void);
int32_t function_1b592(void);
int32_t function_1b652(void);
int32_t function_1b660(void);
int32_t function_1b720(void);
int32_t function_1b750(void);
int32_t function_1b790(void);
int32_t function_1b7d0(void);
int32_t function_1b81a(void);
int32_t function_1b81f(void);
int32_t function_1b832(void);
int32_t function_1b839(void);
int32_t function_1b847(void);
int32_t function_1b84e(void);
int32_t function_1b856(void);
int32_t function_1b85c(void);
int32_t function_1b861(void);
int32_t function_1b868(void);
int32_t function_1b870(void);
int32_t function_1b8b0(void);
int32_t function_1b940(void);
int32_t function_1b980(void);
int32_t function_1b9c0(void);
int32_t function_1ba00(void);
int32_t function_1ba70(void);
int32_t function_1bab0(void);
int32_t function_1bb1c(int32_t a1);
int32_t function_1bb8b(void);
int32_t function_1bbc2(int32_t a1);
int32_t function_1bbf0(void);
int32_t function_1bc00(int32_t a1);
int32_t function_1bc40(void);
int32_t function_1bc60(void);
int32_t function_1bca0(int32_t a1);
int32_t function_1bd57(void);
int32_t function_1bd90(void);
int32_t function_1bdc0(void);
int32_t function_1bdd0(int32_t a1);
int32_t function_1be00(int32_t a1);
int32_t function_1be30(void);
int32_t function_1be80(void);
int32_t function_1be90(void);
int32_t function_1bea0(void);
int32_t function_1beb0(void);
int32_t function_1bec0(void);
int32_t function_1bf20(void);
int32_t function_1bf50(int32_t a1);
int32_t function_1bf70(int32_t a1);
int32_t function_1c060(int32_t a1);
int32_t function_1c090(void);
int32_t function_1c147(void);
int32_t function_1c155(void);
int32_t function_1c182(int32_t a1, int32_t a2);
int32_t function_1c1da(int16_t a1);
int32_t function_1c210(void);
int32_t function_1c216(void);
int32_t function_1c222(void);
int32_t function_1c24f(void);
int32_t function_1c266(int32_t a1, int32_t a2);
int32_t function_1c2b0(void);
int32_t function_1c2b8(int32_t a1, int32_t a2);
int32_t function_1c2bf(void);
int32_t function_1c2cb(void);
int32_t function_1c300(int32_t a1);
int32_t function_1c45d(void);
int32_t function_1c600(int32_t a1);
int32_t function_1c620(int32_t a1, int32_t a2);
int32_t function_1c943(void);
int32_t function_1c949(void);
int32_t function_1c98b(void);
int32_t function_1cc51(int32_t a1, int32_t a2);
int32_t function_1de65(void);
int32_t function_1de75(void);
int32_t function_1de86(void);
int32_t function_1ded0(int32_t a1);
int32_t function_1dee0(int32_t a1);
int32_t function_1df10(int32_t a1);
int32_t function_1df30(int32_t a1);
int32_t function_1df40(int32_t a1);
int32_t function_1df60(int32_t a1);
int32_t function_1df80(int32_t a1);
int32_t function_1dfb0(int32_t a1, int32_t * a2);
int32_t function_1e010(int32_t a1, char * a2);
int32_t function_1e0a0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4);
int32_t function_1e260(void);
int32_t function_1e270(void);
int32_t function_1e280(void);
int32_t function_1e290(int32_t a1, int32_t a2);
int32_t function_1e2b0(int32_t a1);
int32_t function_1e2d0(int32_t a1);
int32_t function_1e406(int32_t a1);
int32_t function_1e4dc(void);
int32_t function_1e4e0(void);
int32_t function_1e51d(void);
int32_t function_1e57d(int32_t a1);
int32_t function_1e5dc(void);
int32_t function_1e7ad(void);
int32_t function_1e7b3(void);
int32_t function_1e7bf(void);
int32_t function_1e7c6(void);
int32_t function_1e890(int32_t a1);
int32_t function_1e9b0(int32_t a1);
int32_t function_1ec1d(int32_t a1, int32_t a2);
int32_t function_1ed54(void);
int32_t function_1ed70(int32_t a1, int32_t a2);
int32_t function_1ed83(void);
int32_t function_1ed8c(void);
int32_t function_1ed96(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_1ede5(void);
int32_t function_1ee10(int32_t a1, int32_t a2);
int32_t function_1ee99(int32_t a1, int32_t a2, int32_t a3);
int32_t function_1eea0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_1eef0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_1f25a(void);
int32_t function_1f270(int32_t a1);
int32_t function_1f440(int32_t a1, int32_t a2);
int32_t function_1f470(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_1f7bf(void);
int32_t function_1f7d1(void);
int32_t function_1f7f0(int32_t a1);
int32_t function_1fa50(int32_t a1, int32_t a2);
int32_t function_1fc30(int32_t a1);
int32_t function_1fc50(int32_t a1);
int32_t function_1fc70(void);
int32_t function_1fc90(int32_t a1);
int32_t function_1fd06(int32_t a1, int32_t a2, int32_t a3);
int32_t function_1fd10(int32_t a1, int32_t a2);
int32_t function_1fe02(void);
int32_t function_1fe0c(void);
int32_t function_1fe0d(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_1ff41(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_1ff50(void);
int32_t function_1ffa0(void);
int32_t function_1ffd5(void);
int32_t function_20045(void);
int32_t function_200a0(int32_t a1);
int32_t function_200b0(void);
int32_t function_200c0(void);
int32_t function_200d0(void);
int32_t function_200e0(int32_t a1);
int32_t function_20220(int16_t a1);
int32_t function_2222a(void);
int32_t function_22230(void);
int32_t function_22264(void);
int32_t function_22275(void);
int32_t function_2227b(void);
int32_t function_222f8(void);
int32_t function_223ab(int32_t a1, int32_t a2, int32_t a3);
int32_t function_223b8(void);
int32_t function_223df(void);
int32_t function_22400(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_224b0(int32_t * a1);
int32_t function_224c0(int32_t a1);
int32_t function_224d0(unsigned char a1);
int32_t function_224e0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_226f0(int32_t a1);
int32_t function_22700(void);
int32_t function_22710(void);
int32_t function_22720(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_22790(int32_t a1);
int32_t function_227b0(int32_t a1);
int32_t function_227c0(int32_t a1, int32_t a2);
int32_t function_227e0(int32_t a1, int32_t a2);
int32_t function_227f0(int32_t a1, int32_t a2);
int32_t function_22800(int32_t a1);
int32_t function_22810(int32_t a1);
int32_t function_22820(int32_t a1);
int32_t function_22830(void);
int32_t function_22840(int32_t a1);
int32_t function_22850(void);
int32_t function_22860(int32_t a1);
int32_t function_22870(int32_t a1, int32_t a2);
int32_t function_228a0(int32_t a1);
int32_t function_228b0(int32_t a1);
int32_t function_228c0(int32_t a1, int32_t a2);
int32_t function_228e0(int32_t a1);
int32_t function_228f0(int32_t a1);
int32_t function_22910(int32_t a1);
int32_t function_22930(int32_t a1);
int32_t function_22950(void);
int32_t function_22960(int32_t a1);
int32_t function_22980(int32_t a1, uint32_t a2);
int32_t function_229b1(int32_t a1);
int32_t function_229d0(int32_t * a1);
int32_t function_229f0(int32_t a1);
int32_t function_22a20(int32_t a1);
int32_t function_22a50(int32_t a1);
int32_t function_22a80(int32_t a1);
int32_t function_22aa0(int32_t a1);
int32_t function_22ac0(int32_t a1, int32_t a2);
int32_t function_22bb1(void);
int32_t function_22bc0(int32_t result);
int32_t function_22bed(int32_t a1, int32_t a2);
int32_t function_22ca5(void);
int32_t function_22d00(int32_t a1, int32_t a2);
int32_t function_22d60(int32_t a1, int32_t a2);
int32_t function_22da0(int32_t a1, int32_t a2);
int32_t function_22e90(int32_t a1, int32_t a2);
int32_t function_22f50(void);
int32_t function_22fb0(int32_t a1);
int32_t function_22fe0(int32_t a1);
int32_t function_23000(int32_t a1);
int32_t function_23020(int32_t a1);
int32_t function_23030(int32_t a1);
int32_t function_23059(void);
int32_t function_23090(void);
int32_t function_230b0(int32_t a1);
int32_t function_23100(int32_t a1, int32_t a2);
int32_t function_23174(void);
int32_t function_2317d(void);
int32_t function_2318b(int32_t a1, int32_t a2);
int32_t function_2320d(void);
int32_t function_23218(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_23220(void);
int32_t function_23240(int32_t a1);
int32_t function_23260(void);
int32_t function_23307(void);
int32_t function_23310(void);
int32_t function_23340(void);
int32_t function_233dc(void);
int32_t function_233e0(void);
int32_t function_2341b(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_23430(void);
int32_t function_23450(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2345f(void);
int32_t function_2355a(int32_t a1, int32_t a2);
int32_t function_23570(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_235e8(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_2367b(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_23703(int32_t result, int32_t a2);
int32_t function_237a0(void);
int32_t function_237d4(void);
int32_t function_237e0(void);
int32_t function_23880(int32_t a1, int32_t a2);
int32_t function_23928(void);
int32_t function_23978(void);
int32_t function_239a0(void);
int32_t function_239d0(void);
int32_t function_239ec(void);
int32_t function_23a00(int32_t a1);
int32_t function_23a20(int32_t a1, int32_t a2);
int32_t function_23a40(int32_t a1, int32_t a2);
float80_t function_23a60(int32_t a1);
float80_t function_23a70(int32_t a1);
int32_t function_23a80(int32_t a1);
int32_t function_23a90(int32_t a1);
int32_t function_23aa0(int32_t a1);
int32_t function_23ab0(int32_t a1, int32_t a2);
int32_t function_23ad0(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_23b70(void);
int32_t function_23b78(void);
int32_t function_23b90(unsigned char a1);
int32_t function_23ba0(int32_t * a1, char * a2);
int32_t function_23bd0(int32_t a1, int32_t a2);
int32_t function_23bf0(int32_t a1);
int32_t function_23c10(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_23d33(void);
int32_t function_23d38(void);
int32_t function_23d48(void);
int32_t function_23d60(unsigned char a1);
int32_t function_23d70(int32_t a1, int32_t a2);
int32_t function_23da0(int32_t a1, int32_t a2);
int32_t function_23e50(int32_t a1);
int32_t function_23e61(void);
int32_t function_23e70(int32_t a1, int32_t a2, int32_t a3);
int32_t function_23f55(void);
int32_t function_24172(int32_t a1, int32_t a2);
int32_t function_24180(void);
int32_t function_241b0(void);
int32_t function_241e0(void);
int32_t function_24210(void);
int32_t function_24223(int32_t a1, int32_t a2);
int32_t function_24230(void);
int32_t function_24260(void);
int32_t function_242d0(int32_t a1);
int32_t function_2434e(void);
int32_t function_24370(int32_t a1);
int32_t function_243d1(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_24410(void);
int32_t function_24488(void);
int32_t function_2449c(void);
int32_t function_2455a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_245a3(void);
int32_t function_245e7(void);
int32_t function_24600(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5, char a6, int32_t a7, char a8, int32_t a9, int32_t a10);
int32_t function_246a9(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_2477b(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5, char a6, int32_t a7, char a8, int32_t a9);
int32_t function_2484a(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5);
int32_t function_2491c(int32_t a1, int32_t result, int32_t a3, int32_t a4);
int32_t function_249ed(int32_t a1, int32_t a2, unsigned char a3);
int32_t function_24aa1(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_24aa9(void);
int32_t function_24ab5(void);
int32_t function_24ac0(int32_t a1);
int32_t function_24af0(int32_t a1);
int32_t function_24b10(int32_t a1);
int32_t function_24b30(int32_t a1);
int32_t function_24b50(int32_t a1);
int32_t function_24b70(int32_t a1);
int32_t function_24b90(int32_t a1);
int32_t function_24bbf(void);
int32_t function_24bc6(int32_t a1, int32_t a2);
int32_t function_24bd0(int32_t a1);
int32_t function_24c1f(int32_t a1);
int32_t function_24c60(int32_t a1);
int32_t function_24c90(int32_t a1, int32_t a2);
int32_t function_24cfb(int32_t a1, int32_t a2, int32_t a3);
int32_t function_24d08(void);
int32_t function_24d2f(void);
int32_t function_24d50(int32_t a1, int32_t a2, int32_t a3);
int32_t function_24df0(int32_t a1, int32_t a2);
int32_t function_24e5b(int32_t a1, int32_t a2, int32_t a3);
int32_t function_24e68(void);
int32_t function_24e8f(void);
int32_t function_24eb0(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_24f40(int32_t a1);
int32_t function_24f51(void);
int32_t function_24f60(void);
int32_t function_24fe0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_25042(void);
int32_t function_25063(void);
int32_t function_25075(void);
int32_t function_250bd(void);
int32_t function_250ea(void);
int32_t function_2510f(int32_t a1, int32_t a2);
int32_t function_25130(int32_t a1);
int32_t function_25180(int32_t a1, int32_t a2);
int32_t function_25190(int32_t a1);
int32_t function_251c1(int32_t a1, int32_t a2);
int32_t function_251d0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2529d(void);
int32_t function_25310(void);
int32_t function_25313(void);
int32_t function_2531f(int32_t a1, int32_t a2);
int32_t function_25350(int32_t a1);
int32_t function_25370(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_254cb(void);
int32_t function_254e0(void);
int32_t function_25508(void);
int32_t function_25513(void);
int32_t function_25558(void);
int32_t function_25569(void);
int32_t function_25570(void);
int32_t function_2558c(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_25596(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_255d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_25601(void);
int32_t function_25610(int32_t a1, int32_t a2);
int32_t function_25620(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_25690(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_25770(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_257d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_25978(void);
int32_t function_25acc(void);
int32_t function_25afb(void);
int32_t function_25bc8(void);
int32_t function_25cb0(void);
int32_t function_25d90(void);
int32_t function_25e48(int32_t * a1);
int32_t function_25e70(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_25f12(void);
int32_t function_25f30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_25f70(int32_t a1, int32_t a2);
int32_t function_25fb0(int32_t a1, int32_t a2);
int32_t function_25fe0(int32_t a1, int32_t a2);
int32_t function_26040(int32_t result, int32_t a2, int32_t a3);
int32_t function_260a0(int32_t a1, int32_t a2);
int32_t function_260e0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_26140(int32_t a1);
int32_t function_26160(int32_t a1);
int32_t function_26180(int32_t a1, int32_t a2);
int32_t function_26190(int32_t a1);
int32_t function_261c0(int32_t a1);
int32_t function_261f0(int32_t a1);
int32_t function_26220(int32_t a1);
int32_t function_26250(int32_t a1, int32_t a2);
int32_t function_262d0(int32_t a1);
int32_t function_262e5(int32_t a1, int32_t a2);
int32_t function_26330(int32_t a1);
int32_t function_26390(int32_t a1, int32_t a2);
int32_t function_263f0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_26454(void);
int32_t function_2645a(void);
int32_t function_26470(void);
int32_t function_26498(void);
int32_t function_264a3(void);
int32_t function_264c2(void);
int32_t function_264e8(void);
int32_t function_264f3(int32_t a1, int32_t a2, int32_t a3);
int32_t function_26ce0(void);
int32_t function_26cf0(void);
int32_t function_26cfa(void);
int32_t function_26d1e(int32_t a1, int32_t a2);
int32_t function_26d31(void);
int32_t function_26d40(void);
int32_t function_26d4a(void);
int32_t function_26d60(int32_t a1);
int32_t function_26e2e(void);
int32_t function_26e60(void);
int32_t function_26e88(void);
int32_t function_26eb3(int32_t a1, int32_t result);
int32_t function_26f70(int32_t result, int32_t a2);
int32_t function_26fb0(int32_t result, int32_t a2);
int32_t function_27010(int32_t a1, int32_t a2);
int32_t function_2721b(int32_t a1, int32_t a2);
int32_t function_272d0(void);
int32_t function_272f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_27340(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_273a3(void);
int32_t function_273d2(void);
int32_t function_2747f(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_27490(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_274a0(void);
int32_t function_274f0(void);
int32_t function_274f4(void);
int32_t function_27503(void);
int32_t function_2750a(void);
int32_t function_27512(int32_t a1, int32_t a2);
int32_t function_27560(int32_t a1, int32_t a2);
int32_t function_275a0(int32_t a1, char * a2, int32_t a3);
int32_t function_275d0(int32_t a1, char * a2, float80_t a3);
int32_t function_27600(int32_t a1, char * a2, int32_t a3, int32_t a4);
int32_t function_27680(int32_t a1, char * a2, int32_t a3);
int32_t function_276b0(int32_t a1, char * a2, char * a3, int32_t a4, char * a5, int32_t a6);
int32_t function_27760(int32_t a1, char * a2, char * a3, int32_t a4);
int32_t function_277f0(int32_t a1, int32_t a2);
int32_t function_2781f(void);
int32_t function_27858(void);
int32_t function_27890(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_27920(int32_t a1, char * a2, char * a3);
int32_t function_27970(int32_t a1, char * a2, char * a3, char * a4, char * a5, char * a6);
int32_t function_27a20(int32_t a1, char * a2, char * a3, char * a4);
int32_t function_27ab0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_27b00(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_27b9e(void);
int32_t function_27bc0(int32_t a1, int32_t a2);
int32_t function_27be8(int32_t a1, int32_t a2);
int32_t function_27c00(int32_t a1, char * a2, int32_t * a3);
int32_t function_27c60(void);
int32_t function_27ca7(void);
int32_t function_27ce3(void);
int32_t function_27d08(void);
int32_t function_27d28(void);
float80_t function_27d60(int32_t a1, char * a2, int32_t a3);
float80_t function_27dc0(void);
float80_t function_27dfa(void);
float80_t function_27e10(void);
int32_t function_27e20(void);
float80_t function_27e33(void);
float80_t function_27e50(void);
int32_t function_27e60(int32_t a1, int32_t a2, int32_t a3);
int32_t function_27ea0(int32_t a1, char * a2, int32_t a3, int32_t a4);
int32_t function_27f47(int32_t a1, int32_t a2, int32_t a3);
int32_t function_27f60(void);
int32_t function_27f87(int32_t a1, int32_t a2, int32_t a3);
int32_t function_27fa0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_27fc0(int32_t a1, char * a2, int32_t a3);
int32_t function_2803d(void);
int32_t function_28040(int32_t a1, int32_t a2);
int32_t function_28050(int32_t a1, int32_t a2);
int32_t function_2806d(void);
int32_t function_28070(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_280e8(int32_t a1);
int32_t function_280fd(void);
int32_t function_28128(void);
int32_t function_28165(void);
int32_t function_28170(void);
int32_t function_28210(int32_t a1, int32_t a2, int32_t a3);
int32_t function_284c0(int32_t a1);
int32_t function_28580(int32_t a1, int32_t a2);
int32_t function_285f0(void);
int32_t function_28600(int32_t a1);
int32_t function_28630(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_28673(void);
int32_t function_2868a(void);
int32_t function_286a0(void);
int32_t function_286e5(void);
int32_t function_28729(void);
int32_t function_28733(void);
int32_t function_2876e(int32_t a1);
int32_t function_28772(void);
int32_t function_2878e(void);
int32_t function_28821(void);
int32_t function_28909(void);
int32_t function_2892f(void);
int32_t function_28948(void);
int32_t function_28970(void);
int32_t function_2897f(void);
int32_t function_289b9(void);
int32_t function_289c0(void);
int32_t function_28a00(void);
int32_t function_28a10(void);
int32_t function_28a80(void);
int32_t function_28a8b(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_28aa0(void);
int32_t function_28ac0(void);
int32_t function_28af4(void);
int32_t function_28afa(void);
int32_t function_28b08(void);
int32_t function_28b30(void);
int32_t function_28b3f(void);
int32_t function_28b79(void);
int32_t function_28b9d(void);
int32_t function_28bb0(void);
int32_t function_28bd8(void);
int32_t function_28be7(void);
int32_t function_28c21(void);
int32_t function_28c45(void);
int32_t function_28c60(void);
int32_t function_28c88(void);
int32_t function_28c97(void);
int32_t function_28cd1(void);
int32_t function_28cf5(void);
int32_t function_28d10(void);
int32_t function_28d38(void);
int32_t function_28d47(void);
int32_t function_28d81(void);
int32_t function_28d83(void);
int32_t function_28db2(int32_t a1, int32_t a2);
int32_t function_28e50(int32_t a1);
int32_t function_28e90(int32_t a1, int32_t a2);
int32_t function_294d8(void);
int32_t function_294f8(void);
int32_t function_29548(void);
int32_t function_29560(void);
int32_t function_29566(void);
int32_t function_29578(void);
int32_t function_29599(void);
int32_t function_295b0(void);
int32_t function_295d0(void);
int32_t function_295e0(void);
int32_t function_29623(void);
int32_t function_29640(void);
int32_t function_2967f(void);
int32_t function_296b0(void);
int32_t function_296d8(void);
int32_t function_2971f(void);
int32_t function_2972e(void);
int32_t function_29740(void);
int32_t function_29787(void);
int32_t function_297a0(void);
int32_t function_297e7(void);
int32_t function_29800(void);
int32_t function_29838(void);
int32_t function_29870(void);
int32_t function_298a8(void);
int32_t function_298e0(void);
int32_t function_298f0(void);
int32_t function_29900(void);
int32_t function_29950(void);
int32_t function_29a80(void);
int32_t function_29aa1(void);
int32_t function_29ab8(void);
int32_t function_29ad9(void);
int32_t function_29af0(void);
int32_t function_29b11(void);
int32_t function_29b28(void);
int32_t function_29b49(void);
int32_t function_29b5b(void);
int32_t function_29b7c(void);
int32_t function_29b8f(void);
int32_t function_29bd2(void);
int32_t function_29bdb(void);
int32_t function_29bed(void);
int32_t function_29c0e(int32_t a1, int32_t a2);
int32_t function_29c30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_29cf0(void);
int32_t function_29d07(void);
int32_t function_29d30(void);
int32_t function_29d59(void);
int32_t function_29d88(void);
int32_t function_29daa(void);
int32_t function_29e0c(void);
int32_t function_29e30(void);
int32_t function_29eeb(void);
int32_t function_29f10(void);
int32_t function_29f45(void);
int32_t function_29f70(int32_t a1, int32_t a2);
int32_t function_2a090(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2a500(char * a1, char * a2);
int32_t function_2a690(void);
int32_t function_2a69c(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2a6b0(void);
int32_t function_2a700(void);
int32_t function_2a707(void);
int32_t function_2a718(void);
int32_t function_2a770(void);
int32_t function_2a780(void);
int32_t function_2a7a8(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2a8e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_2a9e4(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2a9f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2aa15(void);
int32_t function_2aa1b(void);
int32_t function_2aa42(void);
int32_t function_2aa47(void);
int32_t function_2aa69(void);
int32_t function_2aac9(void);
int32_t function_2aad8(void);
int32_t function_2aaec(void);
int32_t function_2ab01(void);
int32_t function_2ab2f(int32_t a1);
int32_t function_2ab36(void);
int32_t function_2ab72(int16_t a1);
int32_t function_2abfd(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2ac4f(void);
int32_t function_2accd(void);
int32_t function_2acd3(void);
int32_t function_2ace0(void);
int32_t function_2ad08(void);
int32_t function_2ad13(void);
int32_t function_2ad4e(void);
int32_t function_2ad58(void);
int32_t function_2ad64(void);
int32_t function_2adaa(void);
int32_t function_2add5(void);
int32_t function_2ade2(void);
int32_t function_2adfe(void);
int32_t function_2ae04(void);
int32_t function_2ae10(void);
int32_t function_2ae38(void);
int32_t function_2ae43(void);
int32_t function_2ae7e(void);
int32_t function_2ae88(void);
int32_t function_2ae93(void);
int32_t function_2aebb(void);
int32_t function_2af14(void);
int32_t function_2af30(void);
int32_t function_2af58(void);
int32_t function_2af67(void);
int32_t function_2afa1(void);
int32_t function_2afa3(void);
int32_t function_2afd7(void);
int32_t function_2b012(void);
int32_t function_2b03e(void);
int32_t function_2b07d(void);
int32_t function_2b088(void);
int32_t function_2b093(void);
int32_t function_2b0a7(void);
int32_t function_2b122(void);
int32_t function_2b127(void);
int32_t function_2b12e(void);
int32_t function_2b1ac(void);
int32_t function_2b210(void);
int32_t function_2b26e(void);
int32_t function_2b2b0(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5);
int32_t function_2b39d(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2b3c0(void);
int32_t function_2b3d0(void);
int32_t function_2b4a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2b4ab(void);
int32_t function_2b4d7(void);
int32_t function_2b4e0(void);
int32_t function_2b5a6(void);
int32_t function_2b5b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2b680(void);
int32_t function_2b683(void);
int32_t function_2b6b0(void);
int32_t function_2b6c0(void);
int32_t function_2b6d0(void);
int32_t function_2b6e8(void);
int32_t function_2b6eb(void);
int32_t function_2b778(void);
int32_t function_2b782(void);
int32_t function_2b7f2(void);
int32_t function_2b843(void);
int32_t function_2b850(void);
int32_t function_2b885(void);
int32_t function_2b9a3(void);
int32_t function_2b9aa(void);
int32_t function_2b9fb(void);
int32_t function_2ba02(void);
int32_t function_2ba11(void);
int32_t function_2ba36(void);
int32_t function_2ba68(void);
int32_t function_2ba6d(void);
int32_t function_2bac0(int32_t a1);
int32_t function_2bafa(void);
int32_t function_2bb18(void);
int32_t function_2bb60(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2bba0(int32_t a1, int32_t a2);
int32_t function_2bbf7(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2bc00(void);
int32_t function_2bc30(void);
int32_t function_2bc50(int32_t a1, int32_t a2);
int32_t function_2bca0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2bcf0(int32_t a1, int32_t a2);
int32_t function_2bd58(void);
int32_t function_2bd88(void);
int32_t function_2bdb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2be40(int32_t a1, int32_t a2);
int32_t function_2bea8(void);
int32_t function_2bed8(void);
int32_t function_2bf00(int32_t a1, int32_t a2);
int32_t function_2bf50(int32_t a1);
int32_t function_2bf7f(void);
int32_t function_2bf86(int32_t a1, int32_t a2);
int32_t function_2bf90(int32_t a1);
int32_t function_2bfe3(void);
int32_t function_2bfec(void);
int32_t function_2c002(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2c01d(void);
int32_t function_2c030(int32_t a1);
int32_t function_2c06b(void);
int32_t function_2c088(void);
int32_t function_2c12d(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2c138(void);
int32_t function_2c168(void);
int32_t function_2c190(int32_t a1, int32_t a2);
int32_t function_2c270(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_2c359(int32_t a1, int32_t a2, unsigned char a3);
int32_t function_2c3e0(int32_t a1, int32_t a2);
int32_t function_2c420(int32_t a1, int32_t a2);
int32_t function_2c470(int32_t a1);
int32_t function_2c4e0(int32_t a1, uint32_t a2);
int32_t function_2c640(int32_t a1);
int32_t function_2c660(int32_t a1);
int32_t function_2c670(int32_t a1);
int32_t function_2c6a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_2c6c0(int32_t * a1, int32_t a2);
int32_t function_2c6d0(int32_t * a1, int32_t a2);
int32_t function_2c6e0(int32_t a1);
int32_t function_2c6f0(int32_t a1);
int32_t function_2c700(int32_t a1);
int32_t function_2c710(int32_t a1);
int32_t function_2c720(int32_t a1);
int32_t function_2c730(int32_t a1, int32_t a2);
int32_t function_2c769b2(void);
int32_t function_2c769f3(void);
int32_t function_2c79ea0(void);
int32_t function_2c7e0(int32_t a1, int32_t a2);
int32_t function_2c830(int32_t a1);
int32_t function_2c850(int32_t a1);
int32_t function_2c870(int32_t * a1, int32_t a2);
int32_t function_2c890(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2c924(void);
int32_t function_2c96d(void);
int32_t function_2c9d9(void);
int32_t function_2c9dc(void);
int32_t function_2c9f0(int32_t a1, int32_t a2);
int32_t function_2ca65(int32_t a1, int32_t a2);
int32_t function_2cac0(void);
int32_t function_2cb00(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_2cb10(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2cb20(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2cb30(int32_t * a1, char * a2, int32_t a3);
int32_t function_2cb40(int32_t a1);
int32_t function_2cb50(int32_t a1);
int32_t function_2cb60(int32_t a1, int32_t a2);
int32_t function_2cb70(int32_t a1);
int32_t function_2cb78(int32_t a1, unsigned char a2);
int32_t function_2cbd0(int32_t a1, int32_t a2);
int32_t function_2cbd8(int32_t a1, int32_t a2);
int32_t function_2cc30(int32_t a1, char * a2);
int32_t function_2cc58(int32_t a1);
int32_t function_2cc61(int32_t a1);
int32_t function_2cc70(int32_t a1, int32_t a2);
int32_t function_2cd50(void);
int32_t function_2cd5a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2cd80(int32_t a1);
int32_t function_2cda0(void);
int32_t function_2cdaa(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2cdf0(void);
int32_t function_2cdf7(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2ce30(void);
int32_t function_2ce37(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2ce50(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2ceb0(int32_t a1, int32_t a2);
int32_t function_2cef5(void);
int32_t function_2cefc(void);
int32_t function_2ceff(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2cf09(void);
int32_t function_2cf10(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2cf80(void);
int32_t function_2cf90(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2cfa0(int32_t a1, char * a2);
int32_t function_2cfe1(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2cff0(int32_t a1, int32_t a2);
int32_t function_2d020(int32_t a1);
int32_t function_2d1e0(int32_t a1, int32_t a2);
int32_t function_2d3e0(int32_t a1);
int32_t function_2d400(int32_t a1);
int32_t function_2d5fd(void);
int32_t function_2d62a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2d690(int32_t a1, int32_t a2);
int32_t function_2d7b0(int32_t * a1, int32_t a2);
int32_t function_2d7c0(int32_t result, int32_t a2, int32_t a3);
int32_t function_2d920(int32_t a1, uint32_t a2, int32_t a3);
int32_t function_2d961(void);
int32_t function_2d970(int32_t * a1, int32_t result, int32_t a3);
int32_t function_2d994(void);
int32_t function_2d9b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2d9c4(void);
int32_t function_2d9c9(int32_t a1);
int32_t function_2d9ca(void);
int32_t function_2d9d7(void);
int32_t function_2da1b(void);
int32_t function_2da40(int32_t a1, int32_t a2, char * a3);
int32_t function_2da6b(void);
int32_t function_2da81(void);
int32_t function_2da90(int32_t a1, int32_t a2, int32_t result, int32_t a4);
int32_t function_2dabb(void);
int32_t function_2dad1(void);
int32_t function_2dae0(int32_t a1, int32_t * a2, int32_t result, int32_t * a4, int32_t * a5);
int32_t function_2db11(void);
int32_t function_2db1a(int16_t a1);
int32_t function_2db40(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2db61(void);
int32_t function_2db84(void);
int32_t function_2db9e(void);
int32_t function_2dbdf(void);
int32_t function_2dbe3(void);
int32_t function_2dbe5(void);
int32_t function_2dc01(int32_t a1);
int32_t function_2dc07(void);
int32_t function_2dc21(void);
int32_t function_2dc80(void);
int32_t function_2dc86(void);
int32_t function_2dc9c(void);
int32_t function_2dcb2(char * a1);
int32_t function_2dcea(int32_t a1);
int32_t function_2dcef(int16_t a1, int32_t a2);
int32_t function_2dd2d(void);
int32_t function_2dd3c(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2ddb0(void);
int32_t function_2ddc8(void);
int32_t function_2de30(void);
int32_t function_2de58(void);
int32_t function_2de60(int32_t a1, int32_t a2);
int32_t function_2e2a0(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_2e2dc(void);
int32_t function_2e2f0(int32_t result, int32_t a2, uint32_t a3);
int32_t function_2e33c(void);
int32_t function_2e3b2(void);
int32_t function_2e3e0(void);
int32_t function_2e417(void);
int32_t function_2e466(void);
int32_t function_2e4d8(void);
int32_t function_2e511(void);
int32_t function_2e523(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2e5b9(void);
int32_t function_2e61c(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2e680(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2e700(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2e830(int32_t a1);
int32_t function_2e870(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2e8e0(void);
int32_t function_2e8e4(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2e8f0(void);
int32_t function_2e920(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2e9d0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2ea20(int32_t a1);
int32_t function_2ea61(int32_t a1, unsigned char a2);
int32_t function_2eab0(int32_t a1);
int32_t function_2eb30(int32_t a1, int32_t a2);
int32_t function_2ec60(int32_t a1);
int32_t function_2ec7a(void);
int32_t function_2ec81(int32_t a1, int32_t a2);
int32_t function_2ecd0(int32_t * a1, int32_t * a2, int32_t * a3);
int32_t function_2ecf8(void);
int32_t function_2ed12(void);
int32_t function_2ed1f(void);
int32_t function_2ed26(void);
int32_t function_2ed29(void);
int32_t function_2ed43(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2ed60(void);
int32_t function_2ed70(int32_t a1);
int32_t function_2ed81(void);
int32_t function_2ed88(int32_t a1, int32_t a2);
int32_t function_2edc0(int32_t a1, int32_t a2);
int32_t function_2ee2a(void);
int32_t function_2ee31(int32_t a1, int32_t a2);
int32_t function_2ee80(int32_t a1, uint32_t a2);
int32_t function_2ef2c(void);
int32_t function_2efc8(void);
int32_t function_2efcd(void);
int32_t function_2efea(void);
int32_t function_2f000(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f00a(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f056(void);
int32_t function_2f070(int32_t a1, int32_t a2);
int32_t function_2f0c3(int32_t a1, int32_t a2);
int32_t function_2f0e0(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4);
int32_t function_2f180(int32_t * a1, int32_t * a2, int32_t a3, int32_t a4);
int32_t function_2f1a0(void);
int32_t function_2f1af(void);
int32_t function_2f1bd(void);
int32_t function_2f220(void);
int32_t function_2f240(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f2ac(void);
int32_t function_2f2ae(void);
int32_t function_2f2c0(void);
int32_t function_2f2d8(void);
int32_t function_2f2e7(void);
int32_t function_2f330(void);
int32_t function_2f332(void);
int32_t function_2f33a(void);
int32_t function_2f34f(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f491(int32_t a1);
int32_t function_2f4d0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2f577(void);
int32_t function_2f59a(void);
int32_t function_2f60c(void);
int32_t function_2f60f(void);
int32_t function_2f680(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f6a4(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f6d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f6e0(void);
int32_t function_2f6e8(void);
int32_t function_2f6f0(int32_t a1, int32_t a2);
int32_t function_2f712(void);
int32_t function_2f750(void);
int32_t function_2f755(void);
int32_t function_2f779(int32_t a1, int32_t a2);
int32_t function_2f7a0(void);
int32_t function_2f7b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_2f7d8(void);
int32_t function_2f7e1(int32_t a1);
int32_t function_2f7e9(void);
int32_t function_2f7f2(void);
int32_t function_2f7f6(void);
int32_t function_2f818(void);
int32_t function_2f830(void);
int32_t function_2f870(void);
int32_t function_2f895(void);
int32_t function_2f8b0(void);
int32_t function_2f8d0(int32_t a1, int32_t result, int32_t a3, int32_t a4);
int32_t function_2f911(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2f945(void);
int32_t function_2f9c2(void);
int32_t function_2f9ff(int32_t a1, int32_t a2);
int32_t function_2fa10(int32_t a1);
int32_t function_2faf0(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_2fb28(void);
int32_t function_2fb3f(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2fba0(int32_t a1, int32_t a2);
int32_t function_2fbe1(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_2fc98(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2fca0(void);
int32_t function_2fcd2(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2fcfc(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_2fd0e(int32_t a1, int32_t a2);
int32_t function_2fd70(uint32_t a1);
int32_t function_2fdc0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2fe60(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2feb0(int32_t a1);
int32_t function_2fef0(int32_t a1);
int32_t function_2ff30(int32_t a1);
int32_t function_2ff50(int32_t a1);
int32_t function_2ff97(int32_t a1, int32_t a2, int32_t a3);
int32_t function_2ffd7(void);
int32_t function_2ffe8(void);
int32_t function_3006e(void);
int32_t function_30080(void);
int32_t function_30090(int32_t a1, int32_t a2, int32_t a3, unsigned char a4);
int32_t function_30110(int32_t a1, int32_t * a2, int32_t a3, int32_t a4);
int32_t function_301a7(void);
int32_t function_301bf(void);
int32_t function_301c2(void);
int32_t function_301c5(void);
int32_t function_30208(void);
int32_t function_30236(void);
int32_t function_30240(int32_t a1, int32_t a2);
int32_t function_30270(int32_t a1, int32_t a2);
int32_t function_302db(int32_t a1, int32_t a2, int32_t a3);
int32_t function_302e8(void);
int32_t function_3030f(void);
int32_t function_30330(int32_t a1, int32_t a2, int32_t a3);
int32_t function_303c0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_303f0(void);
int32_t function_30400(int32_t a1, int32_t a2, int32_t a3);
int32_t function_30480(void);
int32_t function_3048a(void);
int32_t function_304b7(void);
int32_t function_304d0(void);
int32_t function_304e0(void);
int32_t function_304f0(int32_t * a1, int32_t a2, int32_t * a3, int32_t a4, int32_t * a5);
int32_t function_305f0(int32_t * a1, int32_t a2, int32_t * a3, int32_t a4, int32_t * a5);
int32_t function_306c0(int32_t a1);
int32_t function_306d0(int32_t a1);
int32_t function_306e0(int32_t a1);
int32_t function_306f0(int32_t a1, unsigned char a2);
int32_t function_30710(int32_t a1, unsigned char a2);
int32_t function_30730(int32_t a1);
int32_t function_30740(int32_t a1, char a2, unsigned char a3);
int32_t function_30790(int32_t a1);
int32_t function_307d0(int32_t a1, int32_t a2);
int32_t function_307ec(void);
int32_t function_307ef(void);
int32_t function_30828(void);
int32_t function_30878(void);
int32_t function_30890(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_308c0(int32_t a1, int32_t a2);
int32_t function_308f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_30920(int32_t a1, int32_t a2, int32_t a3);
int32_t function_309b0(int32_t a1, int32_t a2);
int32_t function_30a40(int32_t a1, int32_t a2, int32_t a3);
int32_t function_30a70(int32_t a1, int32_t a2);
int32_t function_30ba0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_30bf0(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_30c90(int32_t a1);
int32_t function_30d89(void);
int32_t function_30da0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_30e00(int32_t a1, int32_t a2);
int32_t function_30e90(int32_t a1);
int32_t function_30fc0(int32_t a1, int32_t a2, unsigned char a3);
int32_t function_31130(int32_t a1);
int32_t function_311a0(int32_t a1, int32_t result, int32_t a3);
int32_t function_311e4(void);
int32_t function_311f0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_312d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_313c8(void);
int32_t function_313d8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_31490(int32_t a1, int32_t a2);
int32_t function_31550(int32_t a1, int32_t a2);
int32_t function_315b0(int32_t a1);
int32_t function_31650(int32_t a1, int32_t a2, int32_t a3, int32_t a4, uint32_t a5);
int32_t function_31810(int32_t a1, int32_t * a2, int32_t * a3);
int32_t function_31920(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4);
int32_t function_31a60(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_31b30(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_31be0(void);
int32_t function_31c40(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_31cff(void);
int32_t function_31d30(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_31d70(void);
int32_t function_31db8(void);
int32_t function_31e38(void);
int32_t function_31e40(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_31e50(void);
int32_t function_31e72(void);
int32_t function_31e80(void);
int32_t function_31eb7(void);
int32_t function_31ed4(void);
int32_t function_31ef2(void);
int32_t function_31f00(void);
int32_t function_31f21(void);
int32_t function_31f33(void);
int32_t function_31f42(void);
int32_t function_31f66(void);
int32_t function_31f89(void);
int32_t function_31faa(void);
int32_t function_31fc1(void);
int32_t function_31ff9(void);
int32_t function_32059(void);
int32_t function_3207c(void);
int32_t function_32099(void);
int32_t function_320ae(void);
int32_t function_320c0(int32_t a1, int32_t a2);
int32_t function_320f0(int32_t a1, int32_t a2);
int32_t function_32160(int32_t a1, uint32_t a2);
int32_t function_32190(int32_t a1, unsigned char a2);
int32_t function_321c0(int32_t a1);
int32_t function_321d0(int32_t a1, uint32_t a2);
int32_t function_32240(int32_t a1, int32_t a2, int32_t a3);
int32_t function_322a0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_322f7(int32_t a1);
int32_t function_32320(int32_t a1, int32_t a2);
int32_t function_32398(void);
int32_t function_323b9(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_323ff(void);
int32_t function_32442(void);
int32_t function_32458(void);
int32_t function_324b3(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_32500(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_32549(int32_t a1, int32_t a2);
int32_t function_32570(int32_t a1, char * a2);
int32_t function_325a0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_328e0(int32_t a1, int32_t a2, unsigned char a3);
int32_t function_32b20(int32_t a1, int32_t * a2, int32_t * a3);
int32_t function_32bd0(int32_t a1);
int32_t function_32c50(int32_t * a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_32ce9(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_32d80(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_32e00(int32_t a1, int32_t a2);
int32_t function_331e0(void);
int32_t function_33256(void);
int32_t function_3325d(void);
int32_t function_332e4(void);
int32_t function_33310(int32_t a1, int32_t a2);
int32_t function_333a0(int32_t a1);
int32_t function_333b0(int32_t a1);
int32_t function_333df(void);
int32_t function_333e6(int32_t a1, int32_t a2);
int32_t function_333f0(int32_t a1, int32_t a2);
int32_t function_33458(int32_t a1, int32_t a2, int32_t a3);
int32_t function_33460(void);
int32_t function_3347f(void);
int32_t function_334a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_334c0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_334e5(void);
int32_t function_334f4(void);
int32_t function_3350a(int32_t a1, int32_t a2);
int32_t function_33520(void);
int32_t function_3354a(int32_t a1, int32_t a2);
int32_t function_33560(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_33580(int32_t a1, int32_t a2, int32_t a3);
int32_t function_335a0(int32_t a1);
int32_t function_335c0(int32_t a1);
int32_t function_335e0(int32_t a1);
int32_t function_33614(void);
int32_t function_33616(void);
int32_t function_33618(void);
int32_t function_33639(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_33650(void);
int32_t function_33685(void);
int32_t function_33690(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_337b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_33814(int32_t a1);
int32_t function_33860(int32_t a1, int32_t a2);
int32_t function_338c0(int32_t a1);
int32_t function_33910(int32_t a1);
int32_t function_33940(int32_t a1);
int32_t function_33970(int32_t a1, int32_t a2);
int32_t function_33990(int32_t a1, unsigned char a2);
int32_t function_339f0(int32_t a1, int32_t * a2);
int32_t function_33a71(void);
int32_t function_33a90(int32_t a1, int64_t a2);
int32_t function_33ae0(int32_t a1, int32_t a2);
int32_t function_33bbe(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_33be0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_33c38(void);
int32_t function_33c48(void);
int32_t function_33c60(int32_t a1, int32_t a2);
int32_t function_33cd3(void);
int32_t function_33d00(int32_t a1, int32_t a2);
int32_t function_33d30(int32_t a1, int32_t a2);
int32_t function_33d7e(int32_t a1, int32_t a2);
int32_t function_33ddd(int32_t a1, int32_t a2, int32_t a3);
int32_t function_33e32(int32_t a1, int32_t a2, unsigned char a3, unsigned char a4);
int32_t function_33ec0(int32_t a1, int32_t a2);
int32_t function_33ef7(int32_t a1, int32_t a2, int32_t a3);
int32_t function_33f70(int32_t a1, int32_t a2);
int32_t function_33fbc(int32_t a1, int32_t a2);
int32_t function_34020(int32_t a1, int32_t a2, int32_t a3);
int32_t function_34080(int32_t a1, int32_t a2);
int32_t function_340b0(int32_t a1, int32_t a2);
int32_t function_340e0(int32_t a1, int32_t a2);
int32_t function_3411c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_341b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_341d7(void);
int32_t function_341e3(void);
int32_t function_341f9(void);
int32_t function_34201(void);
int32_t function_34248(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_34280(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_342d0(void);
int32_t function_342f0(void);
int32_t function_3430c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_34370(int32_t a1, int32_t a2, int32_t a3);
int32_t function_343b0(int32_t * a1, char * a2);
int32_t function_34488(void);
int32_t function_34490(int32_t a1);
int32_t function_34599(void);
int32_t function_345b0(int32_t a1);
int32_t function_345c0(int32_t a1);
int32_t function_34600(int32_t a1);
int32_t function_34610(void);
int32_t function_34620(int32_t a1, int32_t a2);
int32_t function_34670(int32_t a1);
int32_t function_34690(char a1);
int32_t function_346a0(int32_t a1, int32_t a2);
int32_t function_346bd(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_34740(void);
int32_t function_34756(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_347c0(int32_t a1, int32_t a2);
int32_t function_34860(int32_t a1, int32_t a2, uint32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_34943(int32_t a1);
int32_t function_34960(void);
int32_t function_34990(int32_t a1, int32_t * a2, uint32_t a3);
int32_t function_34a40(int32_t a1, int32_t a2);
int32_t function_34b80(int32_t a1, int32_t a2);
int32_t function_34c40(int32_t a1, int32_t a2);
int32_t function_34d20(int32_t a1);
int32_t function_34d70(int32_t * a1, char * a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_34eb0(int32_t a1);
int32_t function_34f10(int32_t a1);
int32_t function_34f44(void);
int32_t function_34f4d(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_34f57(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_34f90(void);
int32_t function_34f9d(int32_t a1, int32_t a2, int32_t a3);
int32_t function_34fc0(uint32_t a1);
int32_t function_35010(int32_t a1);
int32_t function_35060(int32_t a1);
int32_t function_350f0(int32_t a1);
int32_t function_351b0(int32_t a1);
int32_t function_352a0(int32_t a1, int32_t a2);
int32_t function_35310(int32_t a1, int32_t a2, int32_t a3);
int32_t function_353d3(void);
int32_t function_35431(int32_t a1, int32_t a2, int32_t a3);
int32_t function_35560(int32_t a1, int32_t a2, int32_t a3);
int32_t function_355c0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_35640(int32_t a1, uint32_t a2);
int32_t function_35724(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_35740(void);
int32_t function_35790(int32_t a1, int32_t a2);
int32_t function_357a0(void);
int32_t function_357a8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_357c7(void);
int32_t function_357e1(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_357f0(void);
int32_t function_35800(int32_t a1, int32_t a2);
int32_t function_35830(void);
int32_t function_358b0(int32_t a1);
int32_t function_359d0(int32_t a1, int32_t a2);
int32_t function_35a30(void);
int32_t function_35a40(void);
int32_t function_35a6e(void);
int32_t function_35aab(void);
int32_t function_35acf(int32_t a1, int32_t a2, int32_t a3);
int32_t function_35b34(void);
int32_t function_35b40(void);
int32_t function_35bb0(int32_t a1);
int32_t function_35bc0(int32_t a1);
int32_t function_35bd0(int32_t a1);
int32_t function_35be0(int32_t a1);
int32_t function_35bf0(int32_t a1);
int32_t function_35c00(int32_t a1);
int32_t function_35c10(void);
int32_t function_35c20(void);
int32_t function_35c30(int32_t a1, int32_t a2);
int32_t function_35c50(int32_t a1, int32_t a2, int32_t a3);
int32_t function_35ca0(int32_t a1);
int32_t function_35d5e(void);
int32_t function_35de5(int32_t a1, int32_t a2, int32_t a3);
int32_t function_35ed0(int32_t a1, int32_t a2);
int32_t function_35f40(int32_t a1, int32_t a2, int32_t a3);
int32_t function_35ff0(int32_t a1);
int32_t function_3601f(void);
int32_t function_36026(int32_t a1, int32_t a2);
int32_t function_36030(int32_t a1);
int32_t function_36089(void);
int32_t function_360a0(int32_t a1, int32_t a2);
int32_t function_36118(void);
int32_t function_3613f(void);
int32_t function_36160(int32_t a1, int32_t a2);
int32_t function_36220(void);
int32_t function_362c7(void);
int32_t function_36312(int32_t a1);
int32_t function_3635c(void);
int32_t function_363e0(int32_t a1, int32_t a2);
int32_t function_363fc(void);
int32_t function_36401(int32_t a1, int32_t a2);
int32_t function_36522(void);
int32_t function_3656d(int32_t a1);
int32_t function_365a7(int32_t a1);
int32_t function_365b8(void);
int32_t function_365c8(int32_t a1, int32_t a2, int32_t a3);
int32_t function_36620(int32_t * a1);
int32_t function_36634(void);
int32_t function_36654(void);
int32_t function_36668(void);
int32_t function_36670(int32_t a1);
int32_t function_36690(int32_t a1);
int32_t function_366b0(void);
int32_t function_366e0(void);
int32_t function_36730(void);
int32_t function_36740(void);
int32_t function_36750(void);
int32_t function_36760(void);
int32_t function_36770(void);
int32_t function_36780(void);
int32_t function_36790(int32_t a1);
int32_t function_367b0(void);
int32_t function_367c0(int32_t * a1);
int32_t function_36890(int32_t a1);
int32_t function_3693c(int32_t a1);
int32_t function_36960(int32_t a1, int32_t a2);
int32_t function_36a0c(void);
int32_t function_36a20(int32_t a1, int32_t a2);
int32_t function_36b00(void);
int32_t function_36b20(int32_t a1);
int32_t function_36b95(int32_t a1, int32_t a2);
int32_t function_36df0(int32_t a1, int32_t a2);
int32_t function_36e00(int32_t a1);
int32_t function_36e10(void);
int32_t function_36e20(void);
int32_t function_36e30(void);
int32_t function_36e40(int32_t a1, int32_t a2);
int32_t function_36e70(int32_t a1);
int32_t function_36e80(void);
int32_t function_36e90(void);
int32_t function_36ea0(void);
int32_t function_36eb0(void);
int32_t function_36ec0(void);
int32_t function_36ed0(void);
int32_t function_36ee0(void);
int32_t function_36ef0(void);
int32_t function_36f00(int32_t a1);
int32_t function_36f1d(void);
int32_t function_36f40(void);
int32_t function_36f70(void);
int32_t function_36f80(void);
int32_t function_36fa0(void);
int32_t function_36fc0(int32_t a1);
int32_t function_37000(void);
int32_t function_37020(void);
int32_t function_37050(int32_t a1);
int32_t function_3709a(int32_t a1);
int32_t function_370d0(int32_t a1);
int32_t function_37109(int32_t a1, int32_t a2);
int32_t function_37769(int32_t a1, int32_t a2);
int32_t function_37850(int32_t a1);
int32_t function_37860(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_378f2(void);
int32_t function_378fe(void);
int32_t function_3790f(void);
int32_t function_37984(void);
int32_t function_37994(void);
int32_t function_379f5(void);
int32_t function_37a06(void);
int32_t function_37a4d(void);
int32_t function_37a80(void);
int32_t function_37b30(void);
int32_t function_37b48(void);
int32_t function_37b60(void);
int32_t function_37b8a(void);
int32_t function_37bc0(int32_t a1);
int32_t function_37be0(int32_t a1);
int32_t function_37bf0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_37c60(int32_t a1);
int32_t function_37cb0(int32_t a1);
int32_t function_37cd0(int32_t a1);
int32_t function_37fab(int32_t a1, int32_t a2);
int32_t function_3824f(void);
int32_t function_3829b(void);
int32_t function_382e9(void);
int32_t function_382f3(void);
int32_t function_38334(void);
int32_t function_38344(void);
int32_t function_3836d(void);
int32_t function_38376(void);
int32_t function_38390(void);
int32_t function_383ca(void);
int32_t function_383f8(void);
int32_t function_3856a(void);
int32_t function_385a5(void);
int32_t function_385c0(void);
int32_t function_385e5(void);
int32_t function_385f8(void);
int32_t function_38610(void);
int32_t function_3861e(void);
int32_t function_38630(void);
int32_t function_38660(void);
int32_t function_38674(void);
int32_t function_38680(void);
int32_t function_386a0(void);
int32_t function_386b0(void);
int32_t function_386bb(void);
int32_t function_386c3(void);
int32_t function_386cc(void);
int32_t function_38700(int32_t a1);
int32_t function_38710(int32_t a1);
int32_t function_38750(void);
int32_t function_38765(void);
int32_t function_38770(void);
int32_t function_38777(void);
int32_t function_38820(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_38890(void);
int32_t function_388a7(int32_t a1);
int32_t function_388d0(int32_t a1, int32_t a2);
int32_t function_38a60(void);
int32_t function_38a94(void);
int32_t function_38b70(int32_t a1);
int32_t function_38bc5(int32_t a1, int32_t a2);
int32_t function_38c00(int32_t a1, int32_t a2, int32_t * a3, int32_t a4);
int32_t function_38d71(void);
int32_t function_38d80(void);
int32_t function_38d90(void);
int32_t function_38dc0(int32_t a1);
int32_t function_38dd0(int32_t a1, int32_t a2);
int32_t function_38ee3(void);
int32_t function_38ee9(void);
int32_t function_38f30(void);
int32_t function_38f6e(void);
int32_t function_38f77(void);
int32_t function_38f98(void);
int32_t function_39013(int32_t a1);
int32_t function_390ad(int32_t a1, int32_t a2);
int32_t function_3913d(int32_t a1, int32_t a2);
int32_t function_39170(int32_t a1);
int32_t function_39193(int32_t a1, int32_t a2);
int32_t function_391d0(int32_t a1);
int32_t function_39298(void);
int32_t function_392b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_392ca(void);
int32_t function_39313(void);
int32_t function_39368(void);
int32_t function_393ba(int32_t a1);
int32_t function_39436(void);
int32_t function_39467(int32_t a1);
int32_t function_39547(void);
int32_t function_3954c(void);
int32_t function_39584(int16_t a1);
int32_t function_395c0(int32_t a1, int32_t a2);
int32_t function_395ff(int32_t a1, int32_t a2);
int32_t function_39636(void);
int32_t function_39669(void);
int32_t function_396c5(void);
int32_t function_396cb(void);
int32_t function_397de(void);
int32_t function_398d1(void);
int32_t function_398d7(void);
int32_t function_39ab0(void);
int32_t function_39abd(void);
int32_t function_39acc(void);
int32_t function_39b12(void);
int32_t function_39b42(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_39bcd(void);
int32_t function_39bd9(void);
int32_t function_39c06(void);
int32_t function_39c0d(int32_t a1);
int32_t function_39c29(void);
int32_t function_39c60(void);
int32_t function_39c70(int32_t * a1, int32_t a2);
int32_t function_39d10(int32_t a1);
int32_t function_39d20(void);
int32_t function_39d30(int32_t a1);
int32_t function_39e68(int32_t a1);
int32_t function_39ff1(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3a043(int32_t a1);
int32_t function_3a0be(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3a0ed(void);
int32_t function_3a111(void);
int32_t function_3a130(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3a173(int32_t a1);
int32_t function_3a1c9(void);
int32_t function_3a214(void);
int32_t function_3a251(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3a298(void);
int32_t function_3a2bc(void);
int32_t function_3a2f5(void);
int32_t function_3a2f9(void);
int32_t function_3a307(void);
int32_t function_3a310(int32_t a1);
int32_t function_3a333(int32_t a1, int32_t a2);
int32_t function_3a37f(void);
int32_t function_3a3b0(int32_t a1);
int32_t function_3a460(int32_t a1);
int32_t function_3a4b0(int32_t a1);
int32_t function_3a5eb(int32_t a1);
int32_t function_3a6f6(void);
int32_t function_3a710(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3a743(void);
int32_t function_3a74e(int16_t a1, int32_t a2);
int32_t function_3a760(void);
int32_t function_3a763(int32_t a1);
int32_t function_3a780(void);
int32_t function_3a783(int32_t a1);
int32_t function_3a7a1(void);
int32_t function_3a7ab(void);
int32_t function_3a7f3(int32_t a1);
int32_t function_3a802(int32_t a1);
int32_t function_3a877(void);
int32_t function_3a888(void);
int32_t function_3a8af(void);
int32_t function_3a933(int32_t a1);
int32_t function_3a980(void);
int32_t function_3a98c(void);
int32_t function_3a98d(void);
int32_t function_3a9bd(int16_t a1);
int32_t function_3a9f8(void);
int32_t function_3aa18(void);
int32_t function_3aa40(int32_t a1, int32_t a2);
int32_t function_3aab7(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3aaee(void);
int32_t function_3ab12(void);
int32_t function_3ab30(void);
int32_t function_3abf0(int32_t a1, int32_t a2);
int32_t function_3ac60(int32_t a1, int32_t a2);
int32_t function_3ad55(void);
int32_t function_3ae30(void);
int32_t function_3ae52(void);
int32_t function_3ae60(void);
int32_t function_3aec0(void);
int32_t function_3af08(void);
int32_t function_3af90(void);
int32_t function_3af9b(void);
int32_t function_3afa1(void);
int32_t function_3afd0(void);
int32_t function_3afe0(void);
int32_t function_3b074(void);
int32_t function_3b093(void);
int32_t function_3b0c0(void);
int32_t function_3b22b(void);
int32_t function_3b230(void);
int32_t function_3b244(void);
int32_t function_3b361(int32_t a1, int32_t a2);
int32_t function_3b430(void);
int32_t function_3b461(void);
int32_t function_3b480(int32_t a1);
int32_t function_3b490(void);
int32_t function_3b4a0(int32_t a1);
int32_t function_3b5c0(int32_t a1, int32_t a2);
int32_t function_3b6ee(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3b723(int32_t a1);
int32_t function_3b730(void);
int32_t function_3b73c(void);
int32_t function_3b74c(void);
int32_t function_3b750(int32_t a1, char * a2);
int32_t function_3b773(int32_t a1, int32_t a2);
int32_t function_3b7bf(void);
int32_t function_3b7f0(int32_t a1);
int32_t function_3b970(int32_t a1);
int32_t function_3ba18(int32_t a1);
int32_t function_3bae7(int32_t a1);
int32_t function_3bb7b(int32_t a1);
int32_t function_3bbfb(int32_t a1);
int32_t function_3bc9b(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3bd21(int32_t a1, unsigned char a2, int32_t a3);
int32_t function_3bdb0(int32_t a1);
int32_t function_3be58(int32_t a1, int32_t a2);
int32_t function_3c00d(int32_t a1);
int32_t function_3c219(int32_t a1);
int32_t function_3c3ab(int32_t a1);
int32_t function_3c600(void);
int32_t function_3c620(int32_t a1);
int32_t function_3c651(void);
int32_t function_3c660(void);
int32_t function_3c7ad(void);
int32_t function_3c7c2(void);
int32_t function_3c7e0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3c90b(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3c950(void);
int32_t function_3c974(void);
int32_t function_3c9ad(void);
int32_t function_3c9bb(void);
int32_t function_3c9bf(void);
int32_t function_3c9d0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3ce37(int16_t a1);
int32_t function_3ce6b(void);
int32_t function_3ce88(void);
int32_t function_3cea5(void);
int32_t function_3cec2(void);
int32_t function_3cee0(int32_t a1, int32_t a2);
int32_t function_3cf65(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3cf9c(void);
int32_t function_3cfc0(void);
int32_t function_3cfe0(int32_t a1);
int32_t function_3d069(void);
int32_t function_3d0cb(void);
int32_t function_3d153(int16_t a1, int32_t a2);
int32_t function_3d175(void);
int32_t function_3d17b(void);
int32_t function_3d200(void);
int32_t function_3d209(void);
int32_t function_3d240(int32_t a1, int32_t a2);
int32_t function_3d300(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3d310(void);
int32_t function_3d391(void);
int32_t function_3d397(void);
int32_t function_3d4b8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3d4d0(void);
int32_t function_3d4f0(void);
int32_t function_3d500(void);
int32_t function_3d50e(void);
int32_t function_3d517(void);
int32_t function_3d550(int32_t a1, int32_t a2);
int32_t function_3d66d(void);
int32_t function_3d750(void);
int32_t function_3d7a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3d888(void);
int32_t function_3d898(void);
int32_t function_3d8e0(void);
int32_t function_3d8eb(void);
int32_t function_3d8f1(void);
int32_t function_3d920(void);
int32_t function_3e0f0(int32_t a1, int32_t a2);
int32_t function_3e1b0(void);
int32_t function_3e210(int32_t a1);
int32_t function_3e220(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3e270(void);
int32_t function_3e290(int32_t a1);
int32_t function_3e2b0(int32_t a1);
int32_t function_3e350(void);
int32_t function_3e36b(void);
int32_t function_3e390(void);
int32_t function_3e3a5(int32_t a1);
int32_t function_3e438(int32_t a1);
int32_t function_3e450(int32_t a1, int32_t a2);
int32_t function_3e53b(void);
int32_t function_3e5a4(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3e68b(void);
int32_t function_3e69d(int32_t a1);
int32_t function_3e6b4(void);
int32_t function_3e6c0(int32_t a1);
int32_t function_3e710(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3e7d2(void);
int32_t function_3e7db(void);
int32_t function_3e7ef(void);
int32_t function_3e7f8(void);
int32_t function_3e812(void);
int32_t function_3e81b(void);
int32_t function_3e82f(void);
int32_t function_3e838(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3e850(int32_t a1);
int32_t function_3e8b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3e8e0(int32_t * a1);
int32_t function_3e900(int32_t a1);
int32_t function_3e940(int32_t a1, int32_t a2);
int32_t function_3e9ac(int32_t a1, int32_t a2);
int32_t function_3e9de(void);
int32_t function_3ea00(void);
int32_t function_3eabb(void);
int32_t function_3eae7(void);
int32_t function_3eb00(int32_t a1);
int32_t function_3eb20(int32_t a1);
int32_t function_3ec5a(int32_t a1, int32_t a2);
int32_t function_3ec70(void);
int32_t function_3ec8e(void);
int32_t function_3ec97(void);
int32_t function_3ecab(void);
int32_t function_3ecb0(void);
int32_t function_3ecce(void);
int32_t function_3ecd7(void);
int32_t function_3eceb(void);
int32_t function_3ecf0(void);
int32_t function_3ecf8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3ed10(int32_t * a1);
int32_t function_3ed24(void);
int32_t function_3ed2a(void);
int32_t function_3edb4(void);
int32_t function_3edbd(void);
int32_t function_3edd8(void);
int32_t function_3ede0(void);
int32_t function_3edec(void);
int32_t function_3ee00(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3eeb8(void);
int32_t function_3eedf(void);
int32_t function_3eef0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3ef1d(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3f006(void);
int32_t function_3f00f(void);
int32_t function_3f023(void);
int32_t function_3f030(void);
int32_t function_3f04e(void);
int32_t function_3f057(void);
int32_t function_3f06b(void);
int32_t function_3f070(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3f090(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3f152(void);
int32_t function_3f1c8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3f1e8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3f1f4(int32_t a1);
int32_t function_3f2d0(void);
int32_t function_3f2e0(void);
int32_t function_3f2f0(int32_t a1, int32_t a2);
int32_t function_3f330(int32_t a1);
int32_t function_3f350(int32_t a1);
int32_t function_3f380(int32_t a1);
int32_t function_3f435(void);
int32_t function_3f439(void);
int32_t function_3f442(void);
int32_t function_3f45d(void);
int32_t function_3f4e3(void);
int32_t function_3f4ea(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3f4f8(int32_t a1, int32_t a2, int32_t a3);
int32_t function_3f5fe(void);
int32_t function_3f607(void);
int32_t function_3f61b(void);
int32_t function_3f620(void);
int32_t function_3f62c(void);
int32_t function_3f640(void);
int32_t function_3f648(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_3f658(void);
int32_t function_3f67f(void);
int32_t function_3f688(void);
int32_t function_3f694(void);
int32_t function_3f6b0(void);
int32_t function_3f73e(void);
int32_t function_3f750(void);
int32_t function_3f769(void);
int32_t function_3f772(void);
int32_t function_3f78d(void);
int32_t function_3f798(void);
int32_t function_3f7a4(void);
int32_t function_3f7b8(void);
int32_t function_3f7df(void);
int32_t function_3f7e8(void);
int32_t function_3f80f(void);
int32_t function_3f818(void);
int32_t function_3f824(void);
int32_t function_3f838(void);
int32_t function_3f844(void);
int32_t function_3f854(void);
int32_t function_3f87b(void);
int32_t function_3f880(void);
int32_t function_3f8a7(void);
int32_t function_3f8ac(void);
int32_t function_3f8d3(void);
int32_t function_3f8e0(int32_t a1);
int32_t function_3f90f(void);
int32_t function_3f916(int32_t a1, int32_t a2);
int32_t function_3f920(int32_t a1);
int32_t function_3f990(int32_t a1, int32_t a2);
int32_t function_3fa08(void);
int32_t function_3fa2f(void);
int32_t function_3fa50(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_3fae0(int32_t a1, uint32_t a2);
int32_t function_3fcce(void);
int32_t function_3fcd7(void);
int32_t function_3fceb(void);
int32_t function_3fcf0(void);
int32_t function_3fd1b(void);
int32_t function_3fd30(void);
int32_t function_3fd3c(void);
int32_t function_3fd58(void);
int32_t function_3fd66(void);
int32_t function_3fd90(void);
int32_t function_3fdae(void);
int32_t function_3fdb7(void);
int32_t function_3fdcb(void);
int32_t function_3fdd0(void);
int32_t function_3fdee(void);
int32_t function_3fdf7(void);
int32_t function_3fe0b(void);
int32_t function_3fe10(void);
int32_t function_3fe1c(void);
int32_t function_3fe40(void);
int32_t function_3fe50(void);
int32_t function_3fe6e(void);
int32_t function_3fe77(void);
int32_t function_3fe8b(void);
int32_t function_3fe90(void);
int32_t function_3feae(void);
int32_t function_3feb7(void);
int32_t function_3fecb(void);
int32_t function_3fed3(void);
int32_t function_3fedc(void);
int32_t function_3fef7(void);
int32_t function_3ff10(void);
int32_t function_3ff37(void);
int32_t function_3ff50(void);
int32_t function_3ff7a(void);
int32_t function_3ff90(void);
int32_t function_3ffb7(void);
int32_t function_3ffc0(int32_t a1, uint32_t a2);
int32_t function_401ae(void);
int32_t function_401b7(void);
int32_t function_401cb(void);
int32_t function_401d0(void);
int32_t function_401ee(void);
int32_t function_401f7(void);
int32_t function_4020b(void);
int32_t function_40210(void);
int32_t function_4021c(void);
int32_t function_40230(void);
int32_t function_4023e(void);
int32_t function_40268(void);
int32_t function_40286(void);
int32_t function_4028f(void);
int32_t function_402a3(void);
int32_t function_402b0(void);
int32_t function_402ce(void);
int32_t function_402d7(void);
int32_t function_402eb(void);
int32_t function_402f0(void);
int32_t function_402fc(void);
int32_t function_40320(void);
int32_t function_40330(void);
int32_t function_4033d(int32_t a1);
int32_t function_4034e(void);
int32_t function_40357(void);
int32_t function_4036b(void);
int32_t function_40370(void);
int32_t function_4038e(void);
int32_t function_40397(void);
int32_t function_403ab(void);
int32_t function_403b0(void);
int32_t function_403c8(void);
int32_t function_403ef(void);
int32_t function_403f8(void);
int32_t function_40422(void);
int32_t function_40438(void);
int32_t function_4045f(void);
int32_t function_40470(int32_t a1, uint32_t a2);
int32_t function_406ac(void);
int32_t function_406c0(void);
int32_t function_406cc(void);
int32_t function_406e0(void);
int32_t function_40850(void);
int32_t function_408a8(void);
int32_t function_408b6(void);
int32_t function_408d0(void);
int32_t function_408de(void);
int32_t function_40900(void);
int32_t function_4090e(void);
int32_t function_40930(void);
int32_t function_409b0(void);
int32_t function_409bc(void);
int32_t function_409d0(void);
int32_t function_409e9(void);
int32_t function_409ed(void);
int32_t function_409f6(void);
int32_t function_40a11(void);
int32_t function_40a20(void);
int32_t function_40a3e(void);
int32_t function_40a47(void);
int32_t function_40a5b(void);
int32_t function_40a60(void);
int32_t function_40a80(void);
int32_t function_40aa7(void);
int32_t function_40ab0(void);
int32_t function_40ad7(void);
int32_t function_40ae0(void);
int32_t function_40afe(void);
int32_t function_40b07(void);
int32_t function_40b1b(void);
int32_t function_40b20(void);
int32_t function_40b2b(void);
int32_t function_40b40(void);
int32_t function_40bb0(void);
int32_t function_40bbe(void);
int32_t function_40be0(void);
int32_t function_40beb(void);
int32_t function_40c00(void);
int32_t function_40c80(void);
int32_t function_40caa(void);
int32_t function_40cc0(void);
int32_t function_40ce7(void);
int32_t function_40cf0(void);
int32_t function_40cfb(void);
int32_t function_40d10(void);
int32_t function_40d1e(void);
int32_t function_40d40(void);
int32_t function_40d59(void);
int32_t function_40d5d(void);
int32_t function_40d66(void);
int32_t function_40d8d(void);
int32_t function_40d98(void);
int32_t function_40da8(void);
int32_t function_40dd2(void);
int32_t function_40de8(void);
int32_t function_40df6(void);
int32_t function_40e10(void);
int32_t function_40e1c(void);
int32_t function_40e30(void);
int32_t function_40e4f(void);
int32_t function_40e53(void);
int32_t function_40e5c(void);
int32_t function_40e77(void);
int32_t function_40e88(void);
int32_t function_40eb3(void);
int32_t function_40ec8(void);
int32_t function_40f70(void);
int32_t function_40f80(void);
int32_t function_40f8c(void);
int32_t function_40fa0(void);
int32_t function_40fcb(void);
int32_t function_40fe0(void);
int32_t function_41088(void);
int32_t function_41096(void);
int32_t function_410ba(void);
int32_t function_410c3(void);
int32_t function_410d7(void);
int32_t function_410e0(void);
int32_t function_410fe(void);
int32_t function_41107(void);
int32_t function_4111b(void);
int32_t function_41120(void);
int32_t function_41139(void);
int32_t function_4113d(void);
int32_t function_41146(void);
int32_t function_41161(void);
int32_t function_41170(void);
int32_t function_4117c(void);
int32_t function_41190(void);
int32_t function_4119c(void);
int32_t function_411b0(void);
int32_t function_411bc(void);
int32_t function_411da(void);
int32_t function_411e3(void);
int32_t function_411f7(void);
int32_t function_41200(void);
int32_t function_4122a(void);
int32_t function_41240(void);
int32_t function_4126a(void);
int32_t function_41286(void);
int32_t function_4128f(void);
int32_t function_412aa(void);
int32_t function_412c0(void);
int32_t function_412e7(void);
int32_t function_412f8(void);
int32_t function_41304(void);
int32_t function_41330(void);
int32_t function_4133c(void);
int32_t function_41363(void);
int32_t function_4136c(void);
int32_t function_41387(void);
int32_t function_41398(void);
int32_t function_413c2(void);
int32_t function_413d8(void);
int32_t function_413f1(void);
int32_t function_413f5(void);
int32_t function_413fe(void);
int32_t function_41419(void);
int32_t function_41428(void);
int32_t function_41452(void);
int32_t function_41468(void);
int32_t function_41480(void);
int32_t function_414a7(void);
int32_t function_414ac(void);
int32_t function_414b8(void);
int32_t function_414cc(void);
int32_t function_414d8(void);
int32_t function_414ec(void);
int32_t function_4150a(void);
int32_t function_41513(void);
int32_t function_41527(void);
int32_t function_41532(void);
int32_t function_4153b(void);
int32_t function_41556(void);
int32_t function_41565(void);
int32_t function_4158f(void);
int32_t function_4159e(void);
int32_t function_415c5(void);
int32_t function_415ca(void);
int32_t function_415f1(void);
int32_t function_415f6(void);
int32_t function_4161d(void);
int32_t function_41622(void);
int32_t function_41649(void);
int32_t function_4164e(void);
int32_t function_41675(void);
int32_t function_4167a(void);
int32_t function_41690(void);
int32_t function_416b7(void);
int32_t function_416bc(void);
int32_t function_416e3(void);
int32_t function_416f0(int32_t a1, uint32_t a2);
int32_t function_417a1(void);
int32_t function_417b8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_417c0(void);
int32_t function_417cc(void);
int32_t function_417e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_41940(void);
int32_t function_4194b(void);
int32_t function_41960(void);
int32_t function_4196b(void);
int32_t function_41990(void);
int32_t function_41997(void);
int32_t function_41af8(void);
int32_t function_41b08(void);
int32_t function_41b26(void);
int32_t function_41b2f(void);
int32_t function_41b43(void);
int32_t function_41b50(void);
int32_t function_41b5c(void);
int32_t function_41b70(void);
int32_t function_41b80(void);
int32_t function_41bb0(void);
int32_t function_41bd7(void);
int32_t function_41be0(void);
int32_t function_41c20(void);
int32_t function_41c30(void);
int32_t function_41c57(void);
int32_t function_41c60(void);
int32_t function_41c6c(void);
int32_t function_41c80(void);
int32_t function_41c8c(void);
int32_t function_41ca0(void);
int32_t function_41cab(void);
int32_t function_41cc0(void);
int32_t function_41ccc(void);
int32_t function_41cf0(void);
int32_t function_41d0e(void);
int32_t function_41d49(void);
int32_t function_41d84(void);
int32_t function_41d8d(void);
int32_t function_41da1(void);
int32_t function_41db0(void);
int32_t function_41dce(void);
int32_t function_41dd7(void);
int32_t function_41deb(void);
int32_t function_41df0(void);
int32_t function_41dfc(void);
int32_t function_41e10(void);
int32_t function_41e1e(void);
int32_t function_41e40(void);
int32_t function_41e4c(void);
int32_t function_41e60(void);
int32_t function_41e88(void);
int32_t function_41eaa(void);
int32_t function_41eb3(void);
int32_t function_41ec7(void);
int32_t function_41ed0(void);
int32_t function_41ef7(void);
int32_t function_41f00(void);
int32_t function_41f0c(void);
int32_t function_41f1f(void);
int32_t function_41f28(void);
int32_t function_41f42(void);
int32_t function_41f5a(void);
int32_t function_41f81(void);
int32_t function_41f88(void);
int32_t function_41f94(void);
int32_t function_41fb0(void);
int32_t function_41fbc(void);
int32_t function_41fd0(void);
int32_t function_41fe4(void);
int32_t function_4200c(void);
int32_t function_42028(void);
int32_t function_42034(void);
int32_t function_42050(void);
int32_t function_4206e(void);
int32_t function_42077(void);
int32_t function_4208b(void);
int32_t function_42090(void);
int32_t function_420b7(void);
int32_t function_420c0(void);
int32_t function_420d0(void);
int32_t function_420f7(void);
int32_t function_42100(void);
int32_t function_4212a(void);
int32_t function_42140(void);
int32_t function_42167(void);
int32_t function_42170(void);
int32_t function_42197(void);
int32_t function_421a3(void);
int32_t function_421ac(void);
int32_t function_421c7(void);
int32_t function_421e3(void);
int32_t function_421ec(void);
int32_t function_42207(void);
int32_t function_42220(void);
int32_t function_42247(void);
int32_t function_4225a(void);
int32_t function_42263(void);
int32_t function_42277(void);
int32_t function_42280(void);
int32_t function_4228c(void);
int32_t function_422a0(void);
int32_t function_422be(void);
int32_t function_422c7(void);
int32_t function_422db(void);
int32_t function_422e0(void);
int32_t function_4230a(void);
int32_t function_42323(void);
int32_t function_4232c(void);
int32_t function_42340(void);
int32_t function_42345(void);
int32_t function_4236c(void);
int32_t function_42371(void);
int32_t function_42398(void);
int32_t function_4239d(void);
int32_t function_423c4(void);
int32_t function_423c9(void);
int32_t function_423f0(void);
int32_t function_42400(int32_t a1, int32_t a2);
int32_t function_42478(void);
int32_t function_424a0(void);
int32_t function_424d0(void);
int32_t function_424f0(int32_t a1);
int32_t function_425ad(void);
int32_t function_425c8(void);
int32_t function_425e0(void);
int32_t function_42600(int32_t a1, uint32_t a2);
int32_t function_42864(void);
int32_t function_42880(void);
int32_t function_4288c(void);
int32_t function_428a0(void);
int32_t function_428ae(void);
int32_t function_428d0(void);
int32_t function_428de(void);
int32_t function_42900(void);
int32_t function_4291e(void);
int32_t function_42927(void);
int32_t function_4293b(void);
int32_t function_42940(void);
int32_t function_4294c(void);
int32_t function_42960(void);
int32_t function_4296e(void);
int32_t function_42990(void);
int32_t function_429af(void);
int32_t function_429b3(void);
int32_t function_429bc(void);
int32_t function_429d7(void);
int32_t function_429e8(void);
int32_t function_42a07(void);
int32_t function_42a0b(void);
int32_t function_42a14(void);
int32_t function_42a2f(void);
int32_t function_42a40(void);
int32_t function_42a4e(void);
int32_t function_42a70(void);
int32_t function_42af0(void);
int32_t function_42b1a(void);
int32_t function_42b30(void);
int32_t function_42b57(void);
int32_t function_42b60(void);
int32_t function_42b87(void);
int32_t function_42b90(void);
int32_t function_42bba(void);
int32_t function_42bd0(void);
int32_t function_42bf7(void);
int32_t function_42c00(void);
int32_t function_42c60(void);
int32_t function_42c8a(void);
int32_t function_42ca0(void);
int32_t function_42cb9(void);
int32_t function_42cbd(void);
int32_t function_42cc6(void);
int32_t function_42ce1(void);
int32_t function_42cf0(void);
int32_t function_42cfe(void);
int32_t function_42d20(void);
int32_t function_42d80(void);
int32_t function_42d99(void);
int32_t function_42d9d(void);
int32_t function_42da6(void);
int32_t function_42dc1(void);
int32_t function_42dd0(void);
int32_t function_42dde(void);
int32_t function_42e00(void);
int32_t function_42e2a(void);
int32_t function_42e40(void);
int32_t function_42e6a(void);
int32_t function_42e80(void);
int32_t function_42e9e(void);
int32_t function_42ea7(void);
int32_t function_42ebb(void);
int32_t function_42ec0(void);
int32_t function_42ecc(void);
int32_t function_42ee0(void);
int32_t function_42efe(void);
int32_t function_42f07(void);
int32_t function_42f1b(void);
int32_t function_42f20(void);
int32_t function_42f2c(void);
int32_t function_42f40(void);
int32_t function_42f6a(void);
int32_t function_42f79(void);
int32_t function_42f8b(void);
int32_t function_42f9d(void);
int32_t function_42fc4(void);
int32_t function_42fc9(void);
int32_t function_42ff0(void);
int32_t function_43000(int32_t a1, int32_t a2);
int32_t function_4314d(void);
int32_t function_4315e(void);
int32_t function_43167(void);
int32_t function_4317b(void);
int32_t function_43180(void);
int32_t function_4319e(void);
int32_t function_431a7(void);
int32_t function_431bb(void);
int32_t function_431c0(void);
int32_t function_431c9(void);
int32_t function_431fa(void);
int32_t function_43210(int32_t result, int32_t a2);
int32_t function_43250(int32_t a1, int32_t a2, int32_t a3);
int32_t function_432f6(int32_t a1);
int32_t function_43370(int32_t a1, int32_t a2);
int32_t function_43442(void);
int32_t function_4346b(void);
int32_t function_43486(void);
int32_t function_43491(int32_t a1, int32_t a2);
int32_t function_434b9(void);
int32_t function_434d8(int32_t a1, int32_t a2);
int32_t function_434fc(void);
int32_t function_4350c(void);
int32_t function_43520(int32_t a1, int32_t a2);
int32_t function_435c7(int32_t a1);
int32_t function_43634(int32_t a1, int32_t a2);
int32_t function_436b0(int32_t a1);
int32_t function_436d2(int32_t a1, int32_t a2);
int32_t function_436ef(void);
int32_t function_43720(int32_t a1);
int32_t function_43740(int32_t a1, int32_t a2, int32_t a3);
int32_t function_437cb(void);
int32_t function_4385d(int32_t a1, int32_t a2);
float80_t function_4388f(void);
int32_t function_438b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_438d37dd(void);
int32_t function_43926(void);
int32_t function_43952(void);
int32_t function_43983(int32_t a1, int32_t a2);
int32_t function_439b1(int32_t a1);
int32_t function_43a1c(int32_t a1);
int32_t function_43aa9(int32_t a1, int32_t a2);
int32_t function_43b00(int32_t result);
int32_t function_43b50(int32_t result);
int32_t function_43b60(int32_t result);
int32_t function_43b70(int32_t a1);
int32_t function_43ba0(int32_t a1);
int32_t function_43c58(int32_t a1);
int32_t function_43dcd(int32_t a1);
int32_t function_44065(int32_t a1);
int32_t function_44205(int32_t a1);
int32_t function_442a2(int32_t a1);
int32_t function_442d0(int32_t a1);
int32_t function_4437c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_44398(int32_t a1, int32_t a2, int32_t a3);
int32_t function_44450(int32_t a1, int32_t a2, int32_t a3);
int32_t function_44466(int32_t a1);
int32_t function_444b0(int32_t a1);
int32_t function_44631(int32_t a1);
int32_t function_446f7(void);
int32_t function_44770(void);
int32_t function_4477d(int32_t a1, int32_t a2);
int32_t function_448b7(int32_t a1, int32_t a2);
int32_t function_448d969d(void);
int32_t function_44a1c(int32_t a1, int32_t a2);
int32_t function_44b80(int32_t a1, int32_t a2);
int32_t function_44bc0(int32_t a1, int32_t a2);
int32_t function_44c7b(void);
int32_t function_44c7fffe(void);
int32_t function_44c7ffff(void);
int32_t function_44ce5(void);
int32_t function_44cf8(void);
int32_t function_44e95(void);
int32_t function_44ef0(void);
int32_t function_44f15(void);
int32_t function_44f70(void);
int32_t function_44f80(void);
int32_t function_44f90(void);
int32_t function_44fa0(void);
int32_t function_44fb0(void);
int32_t function_44fc0(void);
int32_t function_44fd0(void);
int32_t function_44fe0(void);
int32_t function_44ff0(void);
int32_t function_45000(void);
int32_t function_45010(void);
int32_t function_45020(int32_t a1);
int32_t function_45040(int32_t result, int32_t a2);
int32_t function_45080(int32_t result, int32_t a2);
int32_t function_450c0(int32_t a1);
int32_t function_450e0(int32_t a1);
int32_t function_45100(int32_t a1);
int32_t function_45130(int32_t a1);
int32_t function_45160(int32_t a1);
int32_t function_45190(int32_t a1);
int32_t function_451a0(int32_t a1);
int32_t function_451b0(int32_t a1);
int32_t function_451d0(int32_t a1);
int32_t function_451e0(int32_t a1, uint32_t a2);
int32_t function_45241(int32_t a1, int32_t a2);
int32_t function_45251(void);
int32_t function_452ab(void);
int32_t function_452e2(void);
int32_t function_452e8(void);
int32_t function_45335(int32_t a1, int32_t a2);
int32_t function_4534b(void);
int32_t function_45356(int32_t a1, int32_t a2, int32_t a3);
int32_t function_453a4(void);
int32_t function_453e2(void);
int32_t function_453f0(void);
int32_t function_45410(void);
int32_t function_45450(void);
int32_t function_45470(int32_t a1, int32_t a2);
int32_t function_4568901(int32_t a1);
int32_t function_45699(void);
int32_t function_456a0(void);
int32_t function_45700(void);
int32_t function_45736(int32_t a1, int32_t a2);
int32_t function_45820(int32_t a1, int32_t result);
int32_t function_45901(void);
int32_t function_459e2(void);
int32_t function_459e8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_45a10(void);
int32_t function_45a54(int32_t a1, int32_t a2);
int32_t function_45a60(void);
int32_t function_45a6b(int32_t a1, int32_t a2);
int32_t function_45a78(void);
int32_t function_45aa7(int32_t a1, int32_t a2);
int32_t function_45ab0(void);
int32_t function_45abc(void);
int32_t function_45ad0(int32_t a1, int32_t a2);
int32_t function_45b2b(void);
int32_t function_45d00(int32_t a1);
int32_t function_45dc0(void);
int32_t function_45e03(void);
int32_t function_45f40(void);
int32_t function_45f48(void);
int32_t function_45f80(void);
int32_t function_45f9a(int32_t a1, int32_t a2);
int32_t function_45fa3(void);
int32_t function_45fe4(void);
int32_t function_4603c(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4615d(void);
int32_t function_4616e(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_46190(void);
int32_t function_461b0(void);
int32_t function_461d8(void);
int32_t function_462bf(void);
int32_t function_462c5(void);
int32_t function_462d7(void);
int32_t function_462f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_46338(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4645d(void);
int32_t function_4646e(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_46490(void);
int32_t function_464b0(void);
int32_t function_464d8(void);
int32_t function_465bf(void);
int32_t function_465c4(void);
int32_t function_46640(int32_t a1);
int32_t function_4665e(int32_t a1, int32_t a2, int32_t a3);
int32_t function_466a2(void);
int32_t function_466e4(int32_t a1, int32_t a2, int32_t a3);
int32_t function_46710(uint32_t a1);
int32_t function_46740(int32_t a1, int32_t a2);
int32_t function_46750(int32_t a1);
int32_t function_46760(int32_t a1, int32_t a2);
int32_t function_46770(int32_t a1);
int32_t function_46780(int32_t a1);
int32_t function_467a0(int32_t a1);
int32_t function_468c1(void);
int32_t function_468ea(void);
int32_t function_46910(void);
int32_t function_46928(void);
int32_t function_46940(int32_t a1);
int32_t function_46a55(int32_t a1);
int32_t function_46a65(int32_t a1);
int32_t function_46a95(int32_t a1);
int32_t function_46ab0(int32_t a1, int32_t a2);
int32_t function_46ac0(int32_t a1);
int32_t function_46af0(void);
int32_t function_46b0d(void);
int32_t function_46b23(void);
int32_t function_46b2e(void);
int32_t function_46b34(void);
int32_t function_46b88(void);
int32_t function_46ba0(void);
int32_t function_46bd0(int32_t a1, int32_t a2);
int32_t function_46be0(void);
int32_t function_46bf0(int32_t a1);
int32_t function_46c0b(void);
int32_t function_46c10(int32_t a1, int32_t a2);
int32_t function_46ca6(void);
int32_t function_46cd0(int32_t a1, int32_t a2);
int32_t function_46dde(void);
int32_t function_46e50(int32_t a1);
int32_t function_46ec3(void);
int32_t function_46f0e(void);
int32_t function_46f18(void);
int32_t function_46f20(void);
int32_t function_46f30(int32_t a1);
int32_t function_46fb3(void);
int32_t function_46fc8(int32_t a1, int32_t a2);
int32_t function_46ff0(void);
int32_t function_47070(int32_t a1);
int32_t function_47088(void);
int32_t function_4708e(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_47150(int32_t a1);
int32_t function_47180(int32_t a1, int32_t a2);
int32_t function_471c3(void);
int32_t function_471cd(void);
int32_t function_471ce(int32_t a1);
int32_t function_471e3(void);
int32_t function_471ef(void);
int32_t function_47285(void);
int32_t function_4734a(void);
int32_t function_473cb(void);
int32_t function_47483(void);
int32_t function_47486(void);
int32_t function_47492(void);
int32_t function_4749b(void);
int32_t function_4749f(void);
int32_t function_474a2(void);
int32_t function_474a8(void);
int32_t function_475a5(void);
int32_t function_475e2(void);
int32_t function_4760c(void);
int32_t function_47658(void);
int32_t function_47678(void);
int32_t function_47680(void);
int32_t function_47690(void);
int32_t function_476a0(void);
int32_t function_476a8(void);
int32_t function_476c0(void);
int32_t function_476d0(void);
int32_t function_47700(void);
int32_t function_47710(void);
int32_t function_47728(void);
int32_t function_47750(void);
int32_t function_47770(void);
int32_t function_47788(void);
int32_t function_477b0(void);
int32_t function_477c8(void);
int32_t function_477e1(void);
int32_t function_477e2(void);
int32_t function_47801(void);
int32_t function_47870(void);
int32_t function_478e1(void);
int32_t function_479cc(void);
int32_t function_479d8(int32_t a1, int32_t a2);
int32_t function_47a00(void);
int32_t function_47a0e(void);
int32_t function_47a18(void);
int32_t function_47a26(void);
int32_t function_47a30(void);
int32_t function_47a3e(void);
int32_t function_47a43(void);
int32_t function_47a66(void);
int32_t function_47ad4(void);
int32_t function_47ad6(void);
int32_t function_47aec(void);
int32_t function_47b16(void);
int32_t function_47b1e(void);
int32_t function_47b20(void);
int32_t function_47b36(void);
int32_t function_47b40(int32_t a1);
int32_t function_47b60(int32_t result);
int32_t function_47c20(int32_t a1, int32_t a2);
int32_t function_47e41(void);
int32_t function_47e70(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_48098(int32_t a1);
int32_t function_481aa(int32_t a1);
int32_t function_4851f(void);
int32_t function_48524(void);
int32_t function_48535(void);
int32_t function_4854b(void);
int32_t function_48572(void);
int32_t function_48594(void);
int32_t function_485a8(void);
int32_t function_485d5(void);
int32_t function_485e4(void);
int32_t function_48610(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_48747(int32_t a1);
int32_t function_4875d(void);
int32_t function_48818(void);
int32_t function_48830(void);
int32_t function_4884a(void);
int32_t function_48850(void);
int32_t function_48860(void);
int32_t function_48915(void);
int32_t function_4893b(void);
int32_t function_4899a(void);
int32_t function_489ef(void);
int32_t function_48a40(void);
int32_t function_48a92(void);
int32_t function_48ae4(void);
int32_t function_48ae9(void);
int32_t function_48b30(void);
int32_t function_48b37e2(void);
int32_t function_48b75(void);
int32_t function_48ba8(void);
int32_t function_48c36(void);
int32_t function_48c47(int32_t a1, int32_t a2);
int32_t function_48e1e(void);
int32_t function_48e28(void);
int32_t function_48ec6(void);
int32_t function_48f2b(void);
int32_t function_48f30(void);
int32_t function_48f51(void);
int32_t function_48f60(void);
int32_t function_48fad(void);
int32_t function_48fb8(void);
int32_t function_48fd0(void);
int32_t function_48ff1(void);
int32_t function_48ff6(void);
int32_t function_49017(void);
int32_t function_491ff(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_492d2(void);
int32_t function_49327(void);
int32_t function_49360(void);
int32_t function_49370(void);
int32_t function_4939f(void);
int32_t function_493e7(void);
int32_t function_493f8(void);
int32_t function_49410(int32_t a1, int32_t a2);
int32_t function_49476(int32_t a1, int32_t a2, int32_t a3);
int32_t function_49496(void);
int32_t function_494b0(void);
int32_t function_494b4(void);
int32_t function_494d0(void);
int32_t function_494e0(int32_t a1);
int32_t function_494f0(int32_t a1);
int32_t function_49500(int32_t a1);
int32_t function_49510(int32_t a1);
int32_t function_49520(int32_t a1);
int32_t function_49530(int32_t a1);
int32_t function_49540(int32_t a1);
int32_t function_49550(int32_t a1);
int32_t function_49560(int32_t a1);
int32_t function_49570(int32_t a1);
int32_t function_49580(int32_t a1, int32_t a2);
int32_t function_495b0(int32_t a1);
int32_t function_495c0(void);
int32_t function_495d0(int32_t a1, int32_t a2);
int32_t function_49600(int32_t a1);
int32_t function_49610(void);
int32_t function_49620(int32_t a1, int32_t a2);
int32_t function_49650(int32_t a1);
int32_t function_49660(void);
int32_t function_49670(int32_t a1, int32_t a2);
int32_t function_496a0(int32_t a1);
int32_t function_496b0(void);
int32_t function_496c0(int32_t a1, int32_t a2);
int32_t function_49748(void);
int32_t function_497b0(int32_t a1);
int32_t function_497d0(int32_t a1);
int32_t function_4981e(void);
int32_t function_49820(int32_t a1);
int32_t function_4986d(int32_t a1, int32_t a2);
int32_t function_49890(int32_t * a1, int32_t a2);
int32_t function_498e0(int32_t a1);
int32_t function_49900(int32_t a1, int32_t a2);
int32_t function_49960(int32_t a1);
int32_t function_499d0(int32_t a1, int32_t a2);
int32_t function_49a48(void);
int32_t function_49a6f(void);
int32_t function_49a90(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_49b30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_49bc0(int32_t a1, uint32_t a2);
int32_t function_49be0(int32_t a1);
int32_t function_49bf0(int32_t a1, int32_t a2);
int32_t function_49c10(int32_t a1, unsigned char a2);
int32_t function_49c80(int32_t a1);
int32_t function_49f70(int32_t a1);
int32_t function_4a110(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4a170(void);
int32_t function_4a180(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4a1d0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4a230(int32_t a1);
int32_t function_4a280(int32_t a1);
int32_t function_4a2d3(void);
int32_t function_4a2d8(int32_t a1, int32_t a2);
int32_t function_4a340(void);
int32_t function_4a344(void);
int32_t function_4a380(int32_t a1, int32_t a2);
int32_t function_4a390(void);
int32_t function_4a3a4(void);
int32_t function_4a3aa(void);
int32_t function_4a3cd(void);
int32_t function_4a410(void);
int32_t function_4a420(int32_t a1);
int32_t function_4a500(int32_t a1);
int32_t function_4a517(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4a5b0(void);
int32_t function_4a5d0(int32_t a1, int32_t a2);
int32_t function_4a610(int32_t a1);
int32_t function_4a620(int32_t result);
int32_t function_4a660(int32_t a1);
int32_t function_4a6c0(int32_t a1, int32_t a2);
int32_t function_4a720(int32_t a1, int32_t a2);
int32_t function_4a7c0(int32_t a1);
int32_t function_4a840(int32_t a1);
int32_t function_4a890(void);
int32_t function_4a920(void);
int32_t function_4a928(void);
int32_t function_4a9ad(void);
int32_t function_4a9b0(int32_t a1);
int32_t function_4a9d0(int32_t a1, int32_t a2);
int32_t function_4ad16(void);
int32_t function_4ad28(void);
int32_t function_4ad68(void);
int32_t function_4ade0(void);
int32_t function_4aded(void);
int32_t function_4ae7e(void);
int32_t function_4aee4(void);
int32_t function_4af91(void);
int32_t function_4af9b(void);
int32_t function_4b014(void);
int32_t function_4b15b(void);
int32_t function_4b172(void);
int32_t function_4b19c(void);
int32_t function_4b1b0(void);
int32_t function_4b1c0(void);
int32_t function_4b1c5(void);
int32_t function_4b2bb(void);
int32_t function_4b2d4(void);
int32_t function_4b2f2(void);
int32_t function_4b302(void);
int32_t function_4b350(void);
int32_t function_4b383(void);
int32_t function_4b393(void);
int32_t function_4b399(void);
int32_t function_4b39a(void);
int32_t function_4b3a2(void);
int32_t function_4b3aa(void);
int32_t function_4b3ba(void);
int32_t function_4b3bf(void);
int32_t function_4b3c7(void);
int32_t function_4b3d9(void);
int32_t function_4b3e9(void);
int32_t function_4b3ee(void);
int32_t function_4b43b(void);
int32_t function_4b440(int32_t a1);
int32_t function_4b764(void);
int32_t function_4b77b(void);
int32_t function_4b79b(void);
int32_t function_4b7aa(void);
int32_t function_4b7ac(void);
int32_t function_4b7c6(void);
int32_t function_4b7eb(void);
int32_t function_4b7ef(void);
int32_t function_4b805(void);
int32_t function_4b828(void);
int32_t function_4b838(void);
int32_t function_4b8a8(void);
int32_t function_4b8bd(void);
int32_t function_4b8cf(void);
int32_t function_4b8e0(int32_t result, int32_t a2);
int32_t function_4b910(int32_t a1);
int32_t function_4b93f(void);
int32_t function_4b946(int32_t a1, int32_t a2);
int32_t function_4b950(int32_t a1, int32_t a2);
int32_t function_4b9c8(void);
int32_t function_4b9ef(void);
int32_t function_4ba10(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4baa0(int32_t a1);
int32_t function_4bab0(int32_t a1);
int32_t function_4bac0(int32_t a1);
int32_t function_4bad0(int32_t a1);
int32_t function_4bae0(int32_t a1, int32_t a2);
int32_t function_4bb00(int32_t a1);
int32_t function_4bb50(int32_t a1);
int32_t function_4bb80(int32_t a1);
int32_t function_4bba0(int32_t a1);
int32_t function_4bbb4(int32_t a1);
int32_t function_4bc00(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4bc60(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4bc90(int32_t a1);
int32_t function_4bcaf(void);
int32_t function_4bcc0(void);
int32_t function_4bdab(void);
int32_t function_4bdc0(int32_t a1);
int32_t function_4bdd1(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4be70(int32_t a1);
int32_t function_4beb8(void);
int32_t function_4bf54(void);
int32_t function_4bf5d(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4bfb8(void);
int32_t function_4bfc3(void);
int32_t function_4bfc6(void);
int32_t function_4c0b4(void);
int32_t function_4c0bd(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4c140(int32_t a1);
int32_t function_4c15c(void);
int32_t function_4c16c(void);
int32_t function_4c182(void);
int32_t function_4c18c(void);
int32_t function_4c19e(void);
int32_t function_4c1ce(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4c304(void);
int32_t function_4c30a(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4c354(void);
int32_t function_4c35a(void);
int32_t function_4c383(void);
int32_t function_4c3a4(int32_t a1);
int32_t function_4c440(int32_t a1);
int32_t function_4c4a6(void);
int32_t function_4c4b9(void);
int32_t function_4c4f0(void);
int32_t function_4c5ab(void);
int32_t function_4c5cc(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4c640(void);
int32_t function_4c690(void);
int32_t function_4c6c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4c6d8(void);
int32_t function_4c6fe(void);
int32_t function_4c702(void);
int32_t function_4c80c(void);
int32_t function_4c850(void);
int32_t function_4c854(void);
int32_t function_4c85a(void);
int32_t function_4c884(void);
int32_t function_4c892(void);
int32_t function_4c8b0(int32_t a1);
int32_t function_4c8be(void);
int32_t function_4c8f5(int32_t a1, int32_t a2);
int32_t function_4c918(int32_t a1, int32_t a2);
int32_t function_4c930(int32_t a1);
int32_t function_4c970(int32_t a1);
int32_t function_4c9a0(int32_t a1, int32_t a2);
int32_t function_4ca10(int32_t a1);
int32_t function_4cad0(int32_t a1);
int32_t function_4cbb4(void);
int32_t function_4cbbd(void);
int32_t function_4cc11(void);
int32_t function_4cc1a(void);
int32_t function_4cc56(void);
int32_t function_4cc5f(void);
int32_t function_4cc98(void);
int32_t function_4cca1(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4cd22(void);
int32_t function_4cd37(void);
int32_t function_4cd45(void);
int32_t function_4cd4c(void);
int32_t function_4cd56(void);
int32_t function_4cd5a(void);
int32_t function_4cd70(int32_t a1);
int32_t function_4cd90(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4cdf4(void);
int32_t function_4ce5f(void);
int32_t function_4ce75(void);
int32_t function_4ceac(void);
int32_t function_4d17b(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4d188(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4d510(int32_t a1, int32_t a2);
int32_t function_4d737(void);
int32_t function_4d97a(void);
int32_t function_4d9f8(void);
int32_t function_4daa0(void);
int32_t function_4dc34(void);
int32_t function_4dc86(void);
int32_t function_4dcb6(void);
int32_t function_4dcc2(void);
int32_t function_4dd3f(int32_t a1);
int32_t function_4de50(int32_t a1);
int32_t function_4de67(void);
int32_t function_4de86(void);
int32_t function_4de8c(void);
int32_t function_4ded8(void);
int32_t function_4dee0(void);
int32_t function_4dee8(void);
int32_t function_4def0(void);
int32_t function_4df00(void);
float80_t function_4df10(void);
int32_t function_4df12(void);
int32_t function_4df30(void);
int32_t function_4df50(void);
int32_t function_4e198(int32_t a1);
int32_t function_4e1d0(int32_t a1);
int32_t function_4e1f0(int32_t a1);
int32_t function_4e220(int32_t result, int32_t a2);
int32_t function_4e250(int32_t a1);
int32_t function_4e27f(void);
int32_t function_4e286(int32_t a1, int32_t a2);
int32_t function_4e290(int32_t a1);
int32_t function_4e2bf(void);
int32_t function_4e2c6(int32_t a1, int32_t a2);
int32_t function_4e2d0(int32_t a1);
int32_t function_4e306(void);
int32_t function_4e30f(int32_t a1, int32_t a2);
int32_t function_4e340(int32_t a1, int32_t a2);
int32_t function_4e3b8(void);
int32_t function_4e3df(void);
int32_t function_4e400(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4e490(int32_t a1, int32_t a2);
int32_t function_4e508(void);
int32_t function_4e52f(void);
int32_t function_4e550(int32_t a1, int32_t a2);
int32_t function_4e5f0(void);
int32_t function_4e603(void);
int32_t function_4e63c(void);
int32_t function_4e950(int32_t a1, int32_t a2);
int32_t function_4ea00(void);
int32_t function_4ea8b(void);
int32_t function_4eab2(void);
int32_t function_4eb46(void);
int32_t function_4eb8a(int32_t a1);
int32_t function_4ebbb(void);
int32_t function_4ebdb(void);
int32_t function_4ec72(void);
int32_t function_4ec9e(void);
int32_t function_4eca4(void);
int32_t function_4ed5b(void);
int32_t function_4ed9b(void);
int32_t function_4eda0(void);
int32_t function_4edc0(void);
int32_t function_4edd9(void);
int32_t function_4edf0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4ef02(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4ef18(void);
int32_t function_4ef8d(void);
int32_t function_4ef9d(void);
int32_t function_4efa3(void);
int32_t function_4efc0(int32_t a1, int32_t a2);
int32_t function_4eff1(int32_t a1, int32_t a2);
int32_t function_4f060(void);
int32_t function_4f070(int32_t a1, int32_t a2);
int32_t function_4f0c0(void);
int32_t function_4f0d0(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5);
int32_t function_4f160(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5);
int32_t function_4f1f0(int32_t a1);
int32_t function_4f22a(int32_t a1, int32_t a2);
int32_t function_4f230(int32_t a1);
int32_t function_4f26a(int32_t a1, int32_t a2);
int32_t function_4f270(void);
int32_t function_4f290(void);
int32_t function_4f2a0(void);
int32_t function_4f2b0(int32_t a1);
int32_t function_4f300(int32_t a1, int32_t a2);
int32_t function_4f3fc(void);
int32_t function_4f443(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4f4ce(void);
int32_t function_4f508(void);
int32_t function_4f50a(int32_t a1, int32_t a2);
int32_t function_4f68d(int32_t a1, int32_t a2);
int32_t function_4f8a0(void);
int32_t function_4f900(void);
int32_t function_4f928(void);
int32_t function_4f935(int32_t a1);
int32_t function_4faa0(void);
int32_t function_4face(void);
int32_t function_4fb09(void);
int32_t function_4fb40(int32_t a1);
int32_t function_4fbb0(int32_t a1);
int32_t function_4fc20(void);
int32_t function_4fc8a(void);
int32_t function_4fd13(void);
int32_t function_4fdf2(int32_t a1, int32_t a2);
int32_t function_4fe27(void);
int32_t function_4fe8a(void);
int32_t function_4feaf(int32_t a1);
int32_t function_4fec0(int32_t result);
int32_t function_4fef0(int32_t result);
int32_t function_4ff20(void);
int32_t function_4ff40(int32_t a1);
int32_t function_4ff68(int32_t a1, int32_t a2);
int32_t function_4ffc0(void);
int32_t function_4ffd8(void);
int32_t function_4fff0(int32_t a1, int32_t a2);
int32_t function_50000(void);
int32_t function_5001e(void);
int32_t function_5003c(void);
int32_t function_50046(void);
int32_t function_50056(void);
int32_t function_50064(void);
int32_t function_50081(void);
int32_t function_50090(int32_t a1);
int32_t function_500b0(int32_t a1);
int32_t function_500ed(int32_t a1);
int32_t function_500fb(int32_t a1);
int32_t function_50140(int32_t a1, int32_t a2);
int32_t function_50244(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_502bd(void);
int32_t function_502df(void);
int32_t function_50310(void);
int32_t function_50327(void);
int32_t function_5033f(void);
int32_t function_5035c(void);
int32_t function_50378(void);
int32_t function_50380(int32_t a1);
int32_t function_50390(int32_t a1);
int32_t function_503e0(int32_t a1);
int32_t function_50400(int32_t a1);
int32_t function_50420(int32_t a1, int32_t a2, int32_t * a3, char * a4);
int32_t function_504e0(void);
int32_t function_50530(void);
int32_t function_50570(void);
int32_t function_505a0(uint32_t a1, int32_t a2, int32_t a3);
int32_t function_506d5(void);
int32_t function_506db(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_50720(int32_t result, int32_t * a2, int32_t a3, uint32_t a4);
int32_t function_50760(int32_t a1, int32_t a2, int32_t a3);
int32_t function_50840(int32_t a1);
int32_t function_5089f(void);
int32_t function_508e0(void);
int32_t function_5091c(void);
int32_t function_50930(int32_t a1, int32_t a2);
int32_t function_50a60(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4);
int32_t function_50bd0(int32_t a1, int32_t a2);
int32_t function_50ca0(int32_t a1);
int32_t function_50d60(int32_t a1, int32_t a2);
int32_t function_50dc1(void);
int32_t function_50e5d(void);
int32_t function_50e8b(void);
int32_t function_50eab(void);
int32_t function_50f18(void);
int32_t function_50f28(void);
int32_t function_50f2e(void);
int32_t function_50f40(void);
int32_t function_50f60(int32_t a1);
int32_t function_50fb0(void);
int32_t function_50fd9(void);
int32_t function_50fdf(void);
int32_t function_51020(void);
int32_t function_51030(int32_t a1, int32_t a2);
int32_t function_51060(void);
int32_t function_51070(int32_t a1, int32_t a2);
int32_t function_511ec(int32_t a1);
int32_t function_51273(void);
int32_t function_51290(int32_t a1, int32_t a2);
int32_t function_5137e(void);
int32_t function_51390(int32_t a1, int32_t a2);
int32_t function_51524(void);
int32_t function_51560(int32_t a1, int32_t * a2, int32_t result);
int32_t function_51782(void);
int32_t function_517a0(void);
int32_t function_517f4(void);
int32_t function_51812(void);
int32_t function_51820(int32_t a1, int32_t a2);
int32_t function_518e0(int32_t a1);
int32_t function_51940(void);
int32_t function_519e0(void);
int32_t function_519f8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_51a30(void);
int32_t function_51a4e(int32_t a1);
int32_t function_51aec(void);
int32_t function_51af2(void);
int32_t function_51b7e(void);
int32_t function_51bc3(void);
int32_t function_51bc6(void);
int32_t function_51bcb(void);
int32_t function_51bcf(void);
int32_t function_51bd5(int32_t a1, int32_t a2);
int32_t function_51c25(void);
int32_t function_51c40(int32_t result, int32_t a2);
int32_t function_51cc0(int32_t a1, int32_t a2);
int32_t function_51fd0(void);
int32_t function_51ff0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_523cc(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_52438(void);
int32_t function_52451(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_52460(void);
int32_t function_52480(int32_t a1);
int32_t function_52700(int32_t a1, int32_t a2, unsigned char a3);
int32_t function_52750(int32_t a1, int32_t a2, int32_t a3);
int32_t function_529b3(int32_t a1, int32_t a2);
int32_t function_529c0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_52a61(void);
int32_t function_52a80(int32_t a1, uint32_t a2, int32_t a3);
int32_t function_52af0(int32_t a1, int32_t a2);
int32_t function_52f19(void);
int32_t function_52f30(void);
int32_t function_52fa1(void);
int32_t function_52fd6(void);
int32_t function_53000(void);
int32_t function_53020(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_53050(void);
int32_t function_53060(void);
int32_t function_53062(int32_t a1, int32_t a2, int32_t a3);
int32_t function_531fb(int32_t a1, int32_t a2);
int32_t function_53208(void);
int32_t function_53220(void);
int32_t function_532a0(void);
int32_t function_532d0(void);
int32_t function_533f3(int32_t a1, int32_t a2);
int32_t function_53491(void);
float80_t function_53542(int32_t a1);
int32_t function_53570(int32_t a1);
int32_t function_535a8(void);
int32_t function_535fc(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5377b(void);
int32_t function_53789(void);
int32_t function_537c0(int32_t a1, int32_t a2);
int32_t function_53823(int32_t a1, int32_t a2);
int32_t function_53960(int32_t a1, int32_t a2);
int32_t function_53a3d(int32_t a1, int32_t a2);
int32_t function_53b30(int32_t a1, int32_t a2);
int32_t function_53c1a(void);
int32_t function_53c1c(void);
int32_t function_53c30(int32_t a1, int32_t a2);
int32_t function_53d5b(int32_t a1, int32_t a2);
int32_t function_53d64(int32_t a1);
int32_t function_53f88(int32_t a1, int32_t a2);
int32_t function_54013(int32_t a1, int32_t a2);
int32_t function_54250(int32_t a1, int32_t a2);
int32_t function_544ce(int32_t a1, int32_t a2);
int32_t function_54770(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_548b505f(void);
int32_t function_55300(int32_t result, int32_t a2);
int32_t function_55440(int32_t a1);
int32_t function_55897(int32_t a1);
int32_t function_5593c(int32_t a1);
int32_t function_55c2f(void);
int32_t function_55c40(int32_t a1);
int32_t function_55c9e(void);
int32_t function_55ca0(void);
int32_t function_55cb5(int32_t a1, int32_t a2);
int32_t function_55cd7(void);
int32_t function_55d10(int32_t a1);
int32_t function_55d30(int32_t a1, int32_t a2);
int32_t function_55e9d(void);
int32_t function_55ec7(void);
int32_t function_55ee7(int32_t a1);
int32_t function_55ef8(void);
int32_t function_55f08(void);
int32_t function_55f15(void);
int32_t function_55f40(int32_t a1, int32_t a2);
int32_t function_55fb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_560e0(void);
int32_t function_56101(int32_t a1, int32_t a2, int32_t a3);
int32_t function_561b0(void);
int32_t function_561b8(void);
int32_t function_561c8(void);
int32_t function_561cd(void);
int32_t function_56220(int32_t a1, int32_t a2);
int32_t function_56250(int32_t a1, int32_t a2);
int32_t function_56280(int32_t a1, int32_t a2);
int32_t function_562d0(void);
int32_t function_562e0(int32_t a1, int32_t a2);
int32_t function_56310(int32_t a1);
int32_t function_56320(void);
int32_t function_56330(int32_t a1, int32_t a2);
int32_t function_56360(int32_t a1, int32_t a2);
int32_t function_56390(int32_t a1, int32_t a2);
int32_t function_563c0(int32_t a1);
int32_t function_563d0(void);
int32_t function_563e0(int32_t a1, int32_t a2);
int32_t function_56410(int32_t a1);
int32_t function_56420(void);
int32_t function_56430(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5);
int32_t function_564c0(int32_t * a1);
int32_t function_564ef(void);
int32_t function_564f6(int32_t a1, int32_t a2);
int32_t function_56500(int32_t a1);
int32_t function_5653a(int32_t a1, int32_t a2);
int32_t function_56540(int32_t a1);
int32_t function_56550(void);
int32_t function_56560(void);
int32_t function_56570(void);
int32_t function_56580(int32_t a1, int32_t a2);
int32_t function_56590(int32_t a1, int32_t a2);
int32_t function_565a0(int32_t a1, int32_t a2);
int32_t function_565b0(void);
int32_t function_56620(int32_t a1);
int32_t function_56650(int32_t result);
int32_t function_56670(int32_t a1, int32_t a2);
int32_t function_566d0(int32_t a1);
int32_t function_56730(void);
int32_t function_5673e(void);
int32_t function_56744(int32_t a1, int32_t a2);
int32_t function_567a5(void);
int32_t function_567ae(void);
int32_t function_567c8(void);
int32_t function_567e0(void);
int32_t function_56800(int32_t a1, int32_t a2);
int32_t function_56880(void);
int32_t function_56890(void);
int32_t function_568a0(void);
int32_t function_568b0(int32_t a1);
int32_t function_568de(int32_t a1, int32_t a2, int32_t a3);
int32_t function_56910(void);
int32_t function_56920(void);
int32_t function_56940(int32_t a1);
int32_t function_56950(int32_t a1);
int32_t function_56960(int32_t a1);
int32_t function_56970(int32_t a1);
int32_t function_569e6(int32_t a1, int32_t a2);
int32_t function_56a50(int32_t a1);
int32_t function_56b51(int32_t a1);
int32_t function_56bb7(void);
int32_t function_56bc2(int32_t a1);
int32_t function_56c30(void);
int32_t function_56c40(int32_t a1);
int32_t function_56ca0(int32_t a1, int32_t a2);
int32_t function_56ce0(int32_t a1);
int32_t function_56d0f(void);
int32_t function_56d16(int32_t a1, int32_t a2);
int32_t function_56d20(int32_t a1);
int32_t function_56d4f(void);
int32_t function_56d56(int32_t a1, int32_t a2);
int32_t function_56d60(int32_t a1, int32_t a2);
int32_t function_56dd8(void);
int32_t function_56dff(void);
int32_t function_56e20(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_56eb0(int32_t a1);
int32_t function_56ec0(int32_t a1);
int32_t function_56ed0(int32_t a1, int32_t a2);
int32_t function_56ef0(int32_t * a1, int32_t a2);
int32_t function_56f70(int32_t a1, int32_t a2, int32_t a3);
int32_t function_56fb0(void);
int32_t function_56fb6(void);
int32_t function_57000(int32_t a1);
int32_t function_57050(int32_t a1);
int32_t function_570a0(int32_t a1);
int32_t function_57274(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_572b0(int32_t a1);
int32_t function_57330(void);
int32_t function_5736a(int32_t a1);
int32_t function_57380(int32_t a1);
int32_t function_573b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_574a8(void);
int32_t function_574c0(int32_t a1);
int32_t function_57530(int32_t a1);
int32_t function_57590(int32_t a1, int32_t a2, int32_t a3);
int32_t function_57994(int32_t a1, int32_t a2);
int32_t function_579a0(void);
int32_t function_579a4(void);
int32_t function_579d0(int32_t a1);
int32_t function_57a90(void);
int32_t function_57a92(void);
int32_t function_57acd(void);
int32_t function_57ad7(void);
int32_t function_57b10(void);
int32_t function_57b38(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_57fe5(void);
int32_t function_580de(void);
int32_t function_580fd(void);
int32_t function_5810b(void);
int32_t function_58173(void);
int32_t function_58193(void);
int32_t function_581ae(void);
int32_t function_581fe(void);
int32_t function_5820a(void);
int32_t function_58240(void);
int32_t function_5825a(void);
int32_t function_58260(int32_t a1, int32_t a2);
int32_t function_58294(void);
int32_t function_5829a(int32_t a1, int32_t a2);
int32_t function_582d0(int32_t a1);
int32_t function_58336(void);
int32_t function_58350(void);
int32_t function_58368(void);
int32_t function_58387(void);
int32_t function_583a0(void);
int32_t function_58490(void);
int32_t function_584a0(int32_t a1);
int32_t function_584cf(void);
int32_t function_584d6(int32_t a1, int32_t a2);
int32_t function_584e0(int32_t a1);
int32_t function_58550(int32_t a1, int32_t a2);
int32_t function_585d0(void);
int32_t function_585ef(void);
int32_t function_58620(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_586e0(int32_t a1, int32_t a2);
int32_t function_58758(void);
int32_t function_5877f(void);
int32_t function_587a0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_588c0(int32_t a1);
int32_t function_58970(int32_t a1);
int32_t function_58980(int32_t a1, int32_t a2);
int32_t function_58a20(void);
int32_t function_58a50(int32_t a1);
int32_t function_58aaa(void);
int32_t function_58aae(void);
int32_t function_58adf(void);
int32_t function_58b01(void);
int32_t function_58b49(void);
int32_t function_58b67(void);
int32_t function_58ba6(void);
int32_t function_58bb0(void);
int32_t function_58bd3(void);
int32_t function_58bf0(void);
int32_t function_58c05(int32_t result);
int32_t function_58c60(void);
int32_t function_58c70(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t * a5, int32_t a6, int32_t a7);
int32_t function_58ce0(void);
int32_t function_58d3b(void);
int32_t function_58d8c(int32_t a1, int32_t a2);
int32_t function_58da0(void);
int32_t function_58ddb(int32_t a1, int32_t a2);
int32_t function_58de8(void);
int32_t function_58e00(void);
int32_t function_58e1e(int32_t a1, int32_t a2, int32_t a3);
int32_t function_58ee0(int32_t a1, int32_t a2, char a3);
int32_t function_58fbc(void);
int32_t function_58fd8(void);
int32_t function_59068(void);
int32_t function_59081(void);
int32_t function_590c0(int32_t a1);
int32_t function_59152(void);
int32_t function_59168(int32_t a1);
int32_t function_5919c(void);
int32_t function_5922c(void);
int32_t function_59241(void);
int32_t function_59271(void);
int32_t function_592d0(int32_t a1, int32_t a2);
int32_t function_59320(void);
int32_t function_59330(int32_t a1, int32_t a2);
int32_t function_59380(void);
int32_t function_59390(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5);
int32_t function_59420(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5);
int32_t function_594b0(int32_t a1);
int32_t function_594f0(int32_t a1);
int32_t function_59500(void);
int32_t function_59510(void);
int32_t function_59520(void);
int32_t function_59530(void);
int32_t function_59540(void);
int32_t function_59550(int32_t a1);
int32_t function_5957c(void);
int32_t function_595d0(int32_t a1);
int32_t function_595e0(int32_t a1);
int32_t function_59650(int32_t a1);
int32_t function_59660(int32_t a1);
int32_t function_59680(void);
int32_t function_596a0(int32_t a1);
int32_t function_596b0(int32_t a1);
int32_t function_596c0(int32_t a1);
int32_t function_596f0(int32_t a1, int32_t a2);
int32_t function_59740(int32_t a1, int32_t a2);
int32_t function_597e0(int32_t a1, int32_t a2);
int32_t function_5980e(void);
int32_t function_5984b(int16_t a1);
int32_t function_59ad0(void);
int32_t function_59b17(int32_t a1, int32_t a2);
int32_t function_59b3b(void);
int32_t function_59b44(void);
int32_t function_59b50(int32_t a1, int32_t a2);
int32_t function_59bc0(int32_t a1, int32_t a2);
int32_t function_59c13(int32_t a1, int32_t a2);
int32_t function_59c30(int32_t a1);
int32_t function_59cbe(void);
int32_t function_59cd0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_59cfd(void);
int32_t function_59d03(void);
int32_t function_59d20(void);
int32_t function_59d40(void);
int32_t function_59d5e(void);
int32_t function_59d61(void);
int32_t function_59d6b(void);
int32_t function_59d83(void);
int32_t function_59db3(int32_t a1);
int32_t function_59dc8(void);
float80_t function_59e2f(void);
int32_t function_59eb8(void);
int32_t function_59efd(void);
int32_t function_59f1c(void);
int32_t function_59f28(void);
int32_t function_59f59(int16_t a1);
int32_t function_59f90(void);
int32_t function_59fb0(void);
int32_t function_59fd0(int32_t a1, int32_t a2);
int32_t function_5a08c(int32_t a1, int32_t a2);
int32_t function_5a0ea(void);
int32_t function_5a0f9(void);
int32_t function_5a110(int32_t a1);
int32_t function_5a139(int16_t a1);
int32_t function_5a283(void);
int32_t function_5a301(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5a309(void);
int32_t function_5a30e(void);
int32_t function_5a316(void);
int32_t function_5a364(void);
int32_t function_5a373(void);
int32_t function_5a377(void);
int32_t function_5a382(void);
int32_t function_5a386(void);
int32_t function_5a3a0(int32_t a1);
int32_t function_5a3c0(void);
int32_t function_5a3d9(void);
int32_t function_5a420(void);
int32_t function_5a4d5(void);
int32_t function_5a590(int32_t a1, int32_t a2);
int32_t function_5a5e0(void);
int32_t function_5a5f0(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5);
int32_t function_5a680(int32_t a1);
int32_t function_5a6ba(int32_t a1, int32_t a2);
int32_t function_5a6c0(int32_t a1);
int32_t function_5a6ef(void);
int32_t function_5a6f6(int32_t a1, int32_t a2);
int32_t function_5a700(int32_t a1);
int32_t function_5a770(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5a7c0(int32_t a1, int32_t a2);
int32_t function_5a838(void);
int32_t function_5a85f(void);
int32_t function_5a880(int32_t a1, int32_t a2);
int32_t function_5a8d0(int32_t a1);
int32_t function_5a8e0(int32_t a1);
int32_t function_5a900(void);
int32_t function_5a940(int32_t a1);
int32_t function_5acdf(int32_t a1);
int32_t function_5ad53(void);
int32_t function_5ad6a(int32_t a1);
int32_t function_5ada0(int32_t a1, unsigned char a2);
int32_t function_5ae30(void);
int32_t function_5ae40(int32_t a1);
int32_t function_5ae91(void);
int32_t function_5aeb0(void);
int32_t function_5aeb8(void);
int32_t function_5aec0(void);
int32_t function_5aed4(void);
int32_t function_5af40(int32_t a1);
int32_t function_5af50(int32_t a1, int32_t a2);
int32_t function_5af80(int32_t a1, int32_t result);
int32_t function_5b080(int32_t a1, int32_t a2);
int32_t function_5b130(int32_t a1);
int32_t function_5b140(int32_t a1);
int32_t function_5b2b3(void);
int32_t function_5b2bc(void);
int32_t function_5b2f8(void);
int32_t function_5b301(void);
int32_t function_5b33d(void);
int32_t function_5b346(void);
int32_t function_5b382(void);
int32_t function_5b38b(void);
int32_t function_5b3c7(void);
int32_t function_5b3d0(int32_t a1, int32_t a2);
int32_t function_5b3e3(void);
int32_t function_5b46c(void);
int32_t function_5b47f(void);
int32_t function_5b481(void);
int32_t function_5b494(void);
int32_t function_5b496(void);
int32_t function_5b4ac(void);
int32_t function_5b4b1(void);
int32_t function_5b4c7(void);
int32_t function_5b4d0(int32_t a1, int32_t a2);
int32_t function_5b560(int32_t a1, int32_t a2);
int32_t function_5b600(int32_t a1, int32_t a2);
int32_t function_5b724(void);
int32_t function_5b72c(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5b738(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5b781(void);
int32_t function_5b785(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5b7b0(void);
int32_t function_5b83e(void);
int32_t function_5b847(void);
int32_t function_5b85a(void);
int32_t function_5b867(void);
int32_t function_5b870(int32_t a1);
int32_t function_5b89f(void);
int32_t function_5b8a6(int32_t a1, int32_t a2);
int32_t function_5b8b0(int32_t a1);
int32_t function_5b920(int32_t a1, int32_t a2);
int32_t function_5b988(void);
int32_t function_5b9b8(void);
int32_t function_5b9e0(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_5bad0(void);
int32_t function_5bb30(void);
int32_t function_5bbd5(void);
int32_t function_5bc63(void);
int32_t function_5bc7b(void);
int32_t function_5bc87(void);
int32_t function_5bcb1(void);
int32_t function_5bcd3(int32_t a1, int32_t a2);
int32_t function_5bcf8(void);
int32_t function_5bd1b(int32_t a1, int32_t a2);
int32_t function_5bd44(void);
int32_t function_5bd4f(int32_t a1, int32_t a2);
int32_t function_5bdd7(void);
int32_t function_5bdf9(void);
int32_t function_5be89(void);
int32_t function_5bea6(int32_t a1, int32_t a2);
int32_t function_5beec(void);
int32_t function_5bef1(int32_t a1);
int32_t function_5bf1d(void);
int32_t function_5bf30(void);
int32_t function_5bf6d(void);
int32_t function_5bf70(void);
int32_t function_5bfb5(void);
int32_t function_5bfc0(char a1);
int32_t function_5bff0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5c130(int32_t a1);
int32_t function_5c170(int32_t result, int32_t a2);
int32_t function_5c180(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5c200(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5c690(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5c7a0(void);
int32_t function_5c7d3(void);
int32_t function_5c7f0(int32_t a1, int32_t a2);
int32_t function_5c8a0(int32_t a1);
int32_t function_5c8b0(int32_t a1, int32_t a2);
int32_t function_5c8d0(int32_t a1);
int32_t function_5c900(int32_t a1);
int32_t function_5c920(int32_t result);
int32_t function_5c970(int32_t a1);
int32_t function_5c980(int32_t a1, char a2, int32_t a3);
int32_t function_5ca00(void);
int32_t function_5ca10(int32_t a1);
int32_t function_5ca9a(void);
int32_t function_5cab0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5cb10(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5cb40(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5cb96(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5cc23(void);
int32_t function_5cc50(int32_t a1);
int32_t function_5ccac(void);
int32_t function_5ccd8(void);
int32_t function_5cd35(void);
int32_t function_5cd50(void);
int32_t function_5cdc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5ce10(int32_t a1);
int32_t function_5ce40(int32_t a1, int32_t a2);
int32_t function_5ce90(int32_t a1);
int32_t function_5cfa0(void);
int32_t function_5cfa9(void);
int32_t function_5cfe0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5d002(void);
int32_t function_5d060(int32_t a1, int32_t a2);
int32_t function_5d0e9(int32_t a1, int32_t a2);
int32_t function_5d119(void);
int32_t function_5d140(int32_t a1);
int32_t function_5d161(void);
int32_t function_5d167(void);
int32_t function_5d468(void);
int32_t function_5d4b8(void);
int32_t function_5d4c5(void);
int32_t function_5d510(void);
int32_t function_5d514(void);
int32_t function_5d520(int32_t a1);
int32_t function_5d5a3(int32_t a1);
int32_t function_5d5d0(int32_t a1);
int32_t function_5d5e0(int32_t a1);
int32_t function_5d648(void);
int32_t function_5d6b0(int32_t a1);
int32_t function_5d6e0(int32_t a1);
int32_t function_5d71a(void);
int32_t function_5d738(void);
int32_t function_5d7eb(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5d7f8(void);
int32_t function_5d81f(void);
int32_t function_5d840(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_5d8d0(int32_t a1, int32_t a2);
int32_t function_5d948(void);
int32_t function_5d96f(void);
int32_t function_5d990(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5da20(void);
int32_t function_5da40(int32_t result);
int32_t function_5da50(int32_t a1);
int32_t function_5da90(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_5daf0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5db50(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_5dba0(int32_t a1);
int32_t function_5dbc0(int32_t a1, int32_t a2);
int32_t function_5dbd0(int32_t a1);
int32_t function_5dbe0(int32_t a1, int32_t a2);
int32_t function_5dbf0(int32_t a1, int32_t a2);
int32_t function_5dc00(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5ddb0(int32_t a1, uint32_t a2);
int32_t function_5e0d0(int32_t a1, int32_t a2, int32_t a3, char a4);
int32_t function_5e1b0(int32_t a1, int32_t * a2, int32_t a3);
int32_t function_5e600(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5e9c0(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_5eac0(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_5f070(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_5f2e0(int32_t a1, int32_t a2);
int32_t function_5f5a0(int32_t a1, int32_t a2);
int32_t function_5f650(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_5f860(int32_t a1, int32_t a2);
int32_t function_5f9b0(int32_t a1, int32_t a2);
int32_t function_5fb90(int32_t a1, int32_t a2);
int32_t function_5fbc0(int32_t a1, int32_t a2);
int32_t function_5fbf0(int32_t a1, int32_t a2);
int32_t function_5fca0(int32_t a1, int32_t a2);
int32_t function_5fcd0(int32_t a1, int32_t a2);
int32_t function_5fd80(int32_t a1, int32_t a2);
int32_t function_5fdb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5ff00(int32_t a1);
int32_t function_5ff30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5ff40(int32_t a1, int32_t a2);
int32_t function_5ffa0(int32_t a1, int32_t a2);
int32_t function_60000(int32_t a1);
int32_t function_60040(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_60090(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_600e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_60130(int32_t a1);
int32_t function_60150(int32_t a1, int32_t a2);
int32_t function_60160(int32_t a1);
int32_t function_60170(int32_t a1, int32_t a2);
int32_t function_60180(int32_t a1, int32_t a2);
int32_t function_60210(int32_t a1, int32_t * a2, int32_t a3);
float80_t function_604c0(int32_t a1, int32_t a2);
int32_t function_605a0(int32_t a1, uint32_t a2);
int32_t function_60690(int32_t a1, int32_t a2, int32_t a3);
int32_t function_60790(int32_t a1);
int32_t function_609c0(int32_t a1, int32_t a2, char a3);
int32_t function_60a90(int32_t a1);
int32_t function_60d30(int32_t a1, int32_t a2);
int32_t function_611c0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_613e0(int32_t a1, int32_t * a2);
float80_t function_61510(int32_t a1);
int32_t function_61640(int32_t a1, int32_t a2);
int32_t function_617d0(int32_t a1, int32_t a2);
int32_t function_61810(int32_t a1);
int32_t function_61830(int32_t a1);
int32_t function_618b0(int32_t a1);
int32_t function_618d0(int32_t a1);
int32_t function_61950(int32_t a1);
int32_t function_61970(int32_t a1);
int32_t function_61a80(int32_t a1);
int32_t function_61ab0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_61ae0(int32_t a1, int32_t * a2, int32_t * a3, uint32_t a4, int32_t * a5);
int32_t function_61b60(int32_t a1, int32_t a2, int32_t a3, unsigned char a4, int32_t a5);
int32_t function_61bf0(int32_t a1, int32_t a2);
int32_t function_61c70(int32_t a1, int32_t a2, int32_t a3);
int32_t function_61dc0(void);
int32_t function_61e04(void);
int32_t function_61e23(void);
int32_t function_61e5e(int32_t a1);
int32_t function_61e87(void);
int32_t function_61e90(void);
int32_t function_61ec0(void);
int32_t function_61f13(void);
int32_t function_61f64(void);
int32_t function_61f90(int32_t a1, int32_t a2);
int32_t function_61fc5(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_61fe0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_62000(int32_t * a1, int32_t a2, char * a3);
int32_t function_62021(void);
int32_t function_62063(void);
int32_t function_6206d(int32_t a1, int32_t a2);
int32_t function_62095(void);
int32_t function_620b0(int32_t a1);
int32_t function_620d1(void);
int32_t function_620da(void);
int32_t function_620f6(void);
int32_t function_62105(void);
int32_t function_62150(void);
int32_t function_6215f(void);
int32_t function_6218b(void);
int32_t function_6219b(void);
int32_t function_6223a(void);
int32_t function_62240(void);
int32_t function_62280(void);
int32_t function_6228e(void);
int32_t function_622c0(void);
int32_t function_622d0(int32_t a1);
int32_t function_622e0(int32_t a1);
int32_t function_622f0(int32_t a1);
int32_t function_6230e(void);
int32_t function_62311(void);
int32_t function_62320(void);
int32_t function_62350(void);
int32_t function_62360(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_623e0(int32_t a1, int32_t a2);
int32_t function_62400(int32_t a1);
int32_t function_62450(int32_t a1);
int32_t function_62480(int32_t a1);
int32_t function_624a0(int32_t a1);
int32_t function_624d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_62520(int32_t a1, int32_t a2);
int32_t function_626b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_62870(int32_t a1, int32_t a2, int32_t a3);
int32_t function_62a80(int32_t a1);
int32_t function_62a90(int32_t a1, int32_t a2);
int32_t function_62d90(int32_t a1, int32_t a2, int32_t a3);
int32_t function_63370(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_63650(int32_t a1, int32_t a2);
int32_t function_636c0(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_638c0(int32_t a1, int32_t a2);
int32_t function_63a00(int32_t a1, int32_t a2);
int32_t function_63be0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_63cf0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_64100(int32_t a1, int32_t a2);
int32_t function_64130(int32_t a1, int32_t a2);
int32_t function_642c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_64340(int32_t a1, int32_t * a2, int32_t * a3, uint32_t a4, int32_t * a5);
int32_t function_644e0(int32_t a1, int32_t a2, int32_t a3, unsigned char a4, int32_t a5);
int32_t function_64670(int32_t a1, int32_t a2);
int32_t function_646f0(int32_t a1);
int32_t function_649d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_64f60(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_64ff0(int32_t a1, int32_t a2, int32_t a3);
float80_t function_65020(int32_t a1, uint32_t a2);
int32_t function_651d0(int32_t a1);
int32_t function_65640(int32_t a1, int32_t a2);
int32_t function_65ec0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_66320(int32_t a1, int32_t * a2);
float80_t function_66500(int32_t a1);
int32_t function_66730(int32_t a1, int32_t a2);
int32_t function_66950(int32_t a1, int32_t a2);
int32_t function_669e0(int32_t a1);
int32_t function_66a60(int32_t a1, int32_t a2, int32_t * a3, int32_t a4);
int32_t function_66af4(int32_t a1);
int32_t function_66b23(void);
int32_t function_66b3b(void);
int32_t function_66b3e(void);
int32_t function_66b41(void);
int32_t function_66b88(void);
int32_t function_66bb6(void);
int32_t function_66bc0(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_66c10(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_66c84(void);
int32_t function_66ca0(int32_t a1);
int32_t function_66ccf(void);
int32_t function_66cd6(int32_t a1, int32_t a2);
int32_t function_66ce0(int32_t a1);
int32_t function_66d50(int32_t * a1, int32_t a2);
int32_t function_66d60(void);
int32_t function_66d7c(void);
int32_t function_66daa(void);
int32_t function_66db1(void);
int32_t function_66dc1(void);
int32_t function_66dcb(void);
int32_t function_66dd0(void);
int32_t function_66de0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_66e7f(void);
int32_t function_66e88(void);
int32_t function_66ea0(void);
int32_t function_66eb0(void);
int32_t function_66ec8(void);
int32_t function_66ee0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_66f14(void);
int32_t function_66fc3(void);
int32_t function_66fca(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_66fe0(void);
int32_t function_66ff0(void);
int32_t function_67028(void);
int32_t function_67037(void);
int32_t function_67046(void);
int32_t function_67049(void);
int32_t function_6704f(void);
int32_t function_67063(void);
int32_t function_67070(void);
int32_t function_6707b(void);
int32_t function_6708a(void);
int32_t function_6708d(void);
int32_t function_67093(void);
int32_t function_670a7(void);
int32_t function_670e6(void);
int32_t function_670fd(void);
int32_t function_67128(void);
int32_t function_67141(int32_t a1, uint32_t a2);
int32_t function_671b0(int32_t a1, int32_t a2);
int32_t function_671f0(int32_t a1, int32_t a2);
int32_t function_67280(void);
int32_t function_6728a(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_672e0(void);
int32_t function_67300(int32_t a1, int32_t a2);
int32_t function_673c2(void);
int32_t function_67468(void);
int32_t function_6747c(void);
int32_t function_674bf(void);
int32_t function_674c9(void);
int32_t function_67560(void);
int32_t function_67580(void);
int32_t function_675a4(void);
int32_t function_675ae(int32_t a1, int32_t a2);
int32_t function_675c8(void);
int32_t function_675f4(void);
int32_t function_675fe(int32_t a1, int32_t a2);
int32_t function_67620(void);
int32_t function_6765e(int32_t a1, int32_t a2);
int32_t function_67698(void);
int32_t function_676c0(void);
int32_t function_676f0(int32_t a1, int32_t a2, int32_t a3, uint32_t a4);
int32_t function_67718(int32_t a1, int32_t a2, int32_t a3);
int32_t function_67760(void);
int32_t function_67790(int32_t a1);
int32_t function_67817(void);
int32_t function_6781e(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6787f(void);
int32_t function_678c0(void);
int32_t function_678ce(void);
int32_t function_67978(void);
int32_t function_679b3(void);
int32_t function_679c5(void);
int32_t function_679cd(void);
int32_t function_679e1(void);
int32_t function_679f0(void);
int32_t function_67a10(int32_t a1);
int32_t function_67a81(void);
int32_t function_67ab4(void);
int32_t function_67aff(void);
int32_t function_67b06(void);
int32_t function_67b21(void);
int32_t function_67b2b(void);
int32_t function_67b57(void);
int32_t function_67b74(void);
int32_t function_67ba2(void);
int32_t function_67bb0(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_67bd6(void);
int32_t function_67bdd(void);
int32_t function_67c39(void);
int32_t function_67c40(void);
int32_t function_67c50(void);
int32_t function_67c5a(void);
int32_t function_67d39(int32_t a1);
int32_t function_67d60(void);
int32_t function_67d70(void);
int32_t function_67dba(void);
int32_t function_67dee(void);
int32_t function_67e10(void);
int32_t function_67e2c(void);
int32_t function_67e54(void);
int32_t function_67e82(void);
int32_t function_67ea0(int32_t a1);
int32_t function_67ecd(void);
int32_t function_67ed0(int32_t a1, int32_t a2);
int32_t function_67efe(void);
int32_t function_67f10(int32_t a1);
int32_t function_67f3f(void);
int32_t function_67f46(int32_t a1, int32_t a2);
int32_t function_67f50(int32_t a1);
int32_t function_68005(void);
int32_t function_68009(void);
int32_t function_6800c(void);
int32_t function_68012(void);
int32_t function_6801e(void);
int32_t function_6802d(void);
int32_t function_68040(int32_t a1);
int32_t function_6807f(void);
int32_t function_68086(int32_t a1, int32_t a2);
int32_t function_680a0(int32_t a1);
int32_t function_680de(void);
int32_t function_680e5(void);
int32_t function_6817a(void);
int32_t function_6819b(void);
int32_t function_681a6(void);
int32_t function_681c0(int32_t a1, int32_t a2);
int32_t function_6822b(int32_t a1, int32_t a2, int32_t a3);
int32_t function_68238(void);
int32_t function_6825f(void);
int32_t function_68280(int32_t a1, int32_t a2, int32_t a3);
int32_t function_68310(int32_t a1, int32_t a2);
int32_t function_68390(void);
int32_t function_683b0(void);
int32_t function_683e0(void);
int32_t function_68400(int32_t a1);
int32_t function_684bd(void);
int32_t function_684d8(void);
int32_t function_684f0(void);
int32_t function_68510(int32_t a1, uint32_t a2);
int32_t function_686ff(void);
int32_t function_6870e(void);
int32_t function_68711(void);
int32_t function_68717(void);
int32_t function_6872b(void);
int32_t function_68730(void);
int32_t function_6873b(void);
int32_t function_6875b(void);
int32_t function_68770(void);
int32_t function_6877b(void);
int32_t function_6878b(void);
int32_t function_68798(void);
int32_t function_687a6(void);
int32_t function_687d0(void);
int32_t function_687e3(void);
int32_t function_687ee(void);
int32_t function_687f1(void);
int32_t function_687f7(void);
int32_t function_6880b(void);
int32_t function_68810(void);
int32_t function_68823(void);
int32_t function_6882e(void);
int32_t function_68831(void);
int32_t function_68837(void);
int32_t function_6884b(void);
int32_t function_68850(void);
int32_t function_6885c(void);
int32_t function_68880(void);
int32_t function_68890(void);
int32_t function_6889d(void);
int32_t function_688a3(void);
int32_t function_688ae(void);
int32_t function_688b1(void);
int32_t function_688b7(void);
int32_t function_688cb(void);
int32_t function_688d0(void);
int32_t function_688e3(void);
int32_t function_688ee(void);
int32_t function_688f1(void);
int32_t function_688f7(void);
int32_t function_6890b(void);
int32_t function_68913(void);
int32_t function_68916(void);
int32_t function_6891c(void);
int32_t function_68928(void);
int32_t function_68936(void);
int32_t function_6893e(void);
int32_t function_68953(void);
int32_t function_68956(void);
int32_t function_6895c(void);
int32_t function_68968(void);
int32_t function_68976(void);
int32_t function_6897e(void);
int32_t function_68990(void);
int32_t function_689b9(void);
int32_t function_689c1(void);
int32_t function_689d0(void);
int32_t function_689f7(void);
int32_t function_68a00(int32_t a1, uint32_t a2);
int32_t function_68bbd(void);
int32_t function_68bce(void);
int32_t function_68bd1(void);
int32_t function_68bd7(void);
int32_t function_68beb(void);
int32_t function_68bf0(void);
int32_t function_68c03(void);
int32_t function_68c0e(void);
int32_t function_68c11(void);
int32_t function_68c17(void);
int32_t function_68c2b(void);
int32_t function_68c30(void);
int32_t function_68c3b(void);
int32_t function_68c4b(void);
int32_t function_68c50(void);
int32_t function_68c5e(void);
int32_t function_68c88(void);
int32_t function_68c9b(void);
int32_t function_68ca6(void);
int32_t function_68ca9(void);
int32_t function_68caf(void);
int32_t function_68cc3(void);
int32_t function_68cd0(void);
int32_t function_68ce3(void);
int32_t function_68cee(void);
int32_t function_68cf1(void);
int32_t function_68cf7(void);
int32_t function_68d0b(void);
int32_t function_68d10(void);
int32_t function_68d1c(void);
int32_t function_68d40(void);
int32_t function_68d70(void);
int32_t function_68d80(void);
int32_t function_68d98(void);
int32_t function_68da7(void);
int32_t function_68db6(void);
int32_t function_68db9(void);
int32_t function_68dbf(void);
int32_t function_68dd3(void);
int32_t function_68de1(void);
int32_t function_68dea(void);
int32_t function_68ded(void);
int32_t function_68df3(void);
int32_t function_68e07(void);
int32_t function_68e10(void);
int32_t function_68e39(void);
int32_t function_68e41(void);
int32_t function_68e50(void);
int32_t function_68e77(void);
int32_t function_68e80(void);
int32_t function_68e8f(void);
int32_t function_68e9e(void);
int32_t function_68ea1(void);
int32_t function_68ea7(void);
int32_t function_68ebb(void);
int32_t function_68ec0(int32_t a1, uint32_t a2);
int32_t function_69163(void);
int32_t function_69173(void);
int32_t function_69180(void);
int32_t function_6918b(void);
int32_t function_6919b(void);
int32_t function_691a0(void);
int32_t function_691ae(void);
int32_t function_691d0(void);
int32_t function_691db(void);
int32_t function_691eb(void);
int32_t function_691f0(void);
int32_t function_69203(void);
int32_t function_6920e(void);
int32_t function_69211(void);
int32_t function_69217(void);
int32_t function_6922b(void);
int32_t function_69230(void);
int32_t function_6923b(void);
int32_t function_6924b(void);
int32_t function_69250(void);
int32_t function_6925b(void);
int32_t function_6926b(void);
int32_t function_69270(void);
int32_t function_69289(void);
int32_t function_6928d(void);
int32_t function_69290(void);
int32_t function_69296(void);
int32_t function_692a2(void);
int32_t function_692b1(void);
int32_t function_692c0(void);
int32_t function_692d9(void);
int32_t function_692dd(void);
int32_t function_692e0(void);
int32_t function_692e6(void);
int32_t function_692f2(void);
int32_t function_69301(void);
int32_t function_69310(void);
int32_t function_6931b(void);
int32_t function_6932b(void);
int32_t function_69330(void);
int32_t function_693c1(void);
int32_t function_693ca(void);
int32_t function_693cd(void);
int32_t function_693d3(void);
int32_t function_693e7(void);
int32_t function_693f1(void);
int32_t function_693fa(void);
int32_t function_693fd(void);
int32_t function_69403(void);
int32_t function_69417(void);
int32_t function_69421(void);
int32_t function_6942a(void);
int32_t function_6942d(void);
int32_t function_69433(void);
int32_t function_69447(void);
int32_t function_69450(void);
int32_t function_69479(void);
int32_t function_69481(void);
int32_t function_69491(void);
int32_t function_6949a(void);
int32_t function_6949d(void);
int32_t function_694a3(void);
int32_t function_694b7(void);
int32_t function_694c0(void);
int32_t function_69529(void);
int32_t function_69532(void);
int32_t function_69535(void);
int32_t function_6953b(void);
int32_t function_6954f(void);
int32_t function_69558(void);
int32_t function_69571(void);
int32_t function_69575(void);
int32_t function_69578(void);
int32_t function_6957e(void);
int32_t function_6958a(void);
int32_t function_69599(void);
int32_t function_695a8(void);
int32_t function_695b3(void);
int32_t function_695c3(void);
int32_t function_695d0(void);
int32_t function_695e9(void);
int32_t function_695ed(void);
int32_t function_695f0(void);
int32_t function_695f6(void);
int32_t function_69602(void);
int32_t function_69611(void);
int32_t function_69620(void);
int32_t function_6962b(void);
int32_t function_6963b(void);
int32_t function_69641(void);
int32_t function_6964a(void);
int32_t function_6964d(void);
int32_t function_69653(void);
int32_t function_69667(void);
int32_t function_69670(void);
int32_t function_696d8(void);
int32_t function_696e7(void);
int32_t function_696ea(void);
int32_t function_696f0(void);
int32_t function_69704(void);
int32_t function_69706(void);
int32_t function_69711(void);
int32_t function_69721(void);
int32_t function_69730(void);
int32_t function_6973b(void);
int32_t function_6974b(void);
int32_t function_69751(void);
int32_t function_6975a(void);
int32_t function_6975d(void);
int32_t function_69763(void);
int32_t function_69777(void);
int32_t function_69781(void);
int32_t function_6978a(void);
int32_t function_6978d(void);
int32_t function_69793(void);
int32_t function_697a7(void);
int32_t function_697b0(void);
int32_t function_697c3(void);
int32_t function_697ce(void);
int32_t function_697d1(void);
int32_t function_697d7(void);
int32_t function_697eb(void);
int32_t function_697f0(void);
int32_t function_69802(void);
int32_t function_69815(void);
int32_t function_6981e(void);
int32_t function_69821(void);
int32_t function_69827(void);
int32_t function_6983b(void);
int32_t function_69841(void);
int32_t function_6984a(void);
int32_t function_6984d(void);
int32_t function_69853(void);
int32_t function_69867(void);
int32_t function_69870(int32_t a1, int32_t a2);
int32_t function_6999b(void);
int32_t function_699a6(void);
int32_t function_699a9(void);
int32_t function_699af(void);
int32_t function_699c3(void);
int32_t function_699d0(void);
int32_t function_699e3(void);
int32_t function_699ee(void);
int32_t function_699f1(void);
int32_t function_699f7(void);
int32_t function_69a0b(void);
int32_t function_69a10(void);
int32_t function_69a19(int32_t a1);
int32_t function_69a49(void);
int32_t function_69a60(int32_t a1, int32_t a2);
int32_t function_69a81(int32_t a1, int32_t a2);
int32_t function_69ac2(void);
int32_t function_69b30(int32_t a1);
int32_t function_69b40(int32_t a1, int32_t a2);
int32_t function_69b70(int32_t a1, int32_t a2);
int32_t function_69bf0(int32_t a1, int32_t a2);
int32_t function_69c20(int32_t a1, int32_t a2);
int32_t function_69d40(int32_t a1, uint32_t a2);
int32_t function_69d9c(void);
int32_t function_69dc6(int32_t a1, int32_t a2);
int32_t function_69dd0(int32_t a1, int32_t a2);
int32_t function_69fb0(void);
int32_t function_6a00b(void);
int32_t function_6a02a(void);
int32_t function_6a069(void);
int32_t function_6a0d2(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_6a0e0(void);
int32_t function_6a13b(void);
int32_t function_6a15f(void);
int32_t function_6a180(void);
int32_t function_6a1c0(void);
int32_t function_6a200(void);
int32_t function_6a228(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_6a240(void);
int32_t function_6a260(void);
int32_t function_6a2b0(void);
int32_t function_6a2f0(void);
int32_t function_6a340(void);
int32_t function_6a390(int32_t a1);
int32_t function_6a41b(void);
int32_t function_6a42d(void);
int32_t function_6a436(void);
int32_t function_6a447(void);
int32_t function_6a449(void);
int32_t function_6a450(int32_t a1);
int32_t function_6a4c9(void);
int32_t function_6a4db(void);
int32_t function_6a4e4(void);
int32_t function_6a4f5(void);
int32_t function_6a500(void);
int32_t function_6a548(void);
int32_t function_6a553(void);
int32_t function_6a55f(void);
int32_t function_6a569(void);
int32_t function_6a575(void);
int32_t function_6a57e(void);
int32_t function_6a58f(void);
int32_t function_6a690(int32_t a1, int32_t a2);
int32_t function_6a7f0(int32_t a1, int32_t a2);
int32_t function_6a820(int32_t a1);
int32_t function_6a8f0(int32_t a1);
int32_t function_6a97b(void);
int32_t function_6a984(int32_t a1, int32_t a2);
int32_t function_6a997(void);
int32_t function_6a9dc(void);
int32_t function_6a9f0(int32_t a1);
int32_t function_6aa10(int32_t a1, int32_t a2);
int32_t function_6aa8f(void);
int32_t function_6aab0(int32_t a1, int32_t a2);
int32_t function_6abc5(void);
int32_t function_6ac10(void);
int32_t function_6ac28(void);
int32_t function_6ac5a(void);
int32_t function_6ac62(void);
int32_t function_6ad5a(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_6ad70(void);
int32_t function_6adaa(void);
int32_t function_6ae90(void);
int32_t function_6aec8(void);
int32_t function_6af38(void);
int32_t function_6af72(void);
int32_t function_6b046(void);
int32_t function_6b0b8(void);
int32_t function_6b0d6(void);
int32_t function_6b0f0(void);
int32_t function_6b140(void);
int32_t function_6b198(void);
int32_t function_6b1f0(void);
int32_t function_6b230(void);
int32_t function_6b258(void);
int32_t function_6b278(void);
int32_t function_6b2a0(void);
int32_t function_6b2c0(void);
int32_t function_6b310(void);
int32_t function_6b360(void);
int32_t function_6b387(void);
int32_t function_6b395(void);
int32_t function_6b3b8(void);
int32_t function_6b3c0(void);
int32_t function_6b3d0(void);
int32_t function_6b430(void);
int32_t function_6b437(void);
int32_t function_6b445(void);
int32_t function_6b44c(void);
int32_t function_6b460(int32_t a1, int32_t a2);
int32_t function_6b5a0(int32_t a1, int32_t * a2);
int32_t function_6b659(void);
int32_t function_6b662(void);
int32_t function_6b668(void);
int32_t function_6b67a(void);
int32_t function_6b688(void);
int32_t function_6b693(void);
int32_t function_6b6a5(void);
int32_t function_6b6ae(void);
int32_t function_6b6bf(void);
int32_t function_6b6d0(int32_t a1, uint16_t a2);
int32_t function_6b795(void);
int32_t function_6b7a7(void);
int32_t function_6b7b0(void);
int32_t function_6b7c1(void);
int32_t function_6b7d0(void);
int32_t function_6b7db(void);
int32_t function_6b7e7(void);
int32_t function_6b7f0(void);
int32_t function_6b7f8(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_6b809(void);
int32_t function_6b815(void);
int32_t function_6b81e(void);
int32_t function_6b82f(void);
int32_t function_6b838(void);
int32_t function_6b843(void);
int32_t function_6b853(void);
int32_t function_6b860(void);
int32_t function_6b8fe(void);
int32_t function_6b90a(void);
int32_t function_6b910(void);
int32_t function_6b925(void);
int32_t function_6b935(void);
int32_t function_6b93b(void);
int32_t function_6b94d(void);
int32_t function_6b958(void);
int32_t function_6b963(void);
int32_t function_6b96f(void);
int32_t function_6b979(void);
int32_t function_6b985(void);
int32_t function_6b98e(void);
int32_t function_6b99f(void);
int32_t function_6b9a9(void);
int32_t function_6b9b5(void);
int32_t function_6b9be(void);
int32_t function_6b9cf(void);
int32_t function_6b9d8(void);
int32_t function_6b9e3(void);
int32_t function_6b9ef(void);
int32_t function_6b9f8(void);
int32_t function_6ba03(void);
int32_t function_6ba0f(void);
int32_t function_6ba15(void);
int32_t function_6ba21(void);
int32_t function_6ba2a(void);
int32_t function_6ba3b(void);
int32_t function_6ba41(void);
int32_t function_6ba4d(void);
int32_t function_6ba56(void);
int32_t function_6ba67(void);
int32_t function_6ba6d(void);
int32_t function_6ba79(void);
int32_t function_6ba82(void);
int32_t function_6ba93(void);
int32_t function_6baa0(int32_t a1);
int32_t function_6bb55(void);
int32_t function_6bb5c(void);
int32_t function_6bb65(void);
int32_t function_6bb6b(void);
int32_t function_6bb7d(void);
int32_t function_6bb90(int32_t a1);
int32_t function_6bbbf(void);
int32_t function_6bbc6(int32_t a1, int32_t a2);
int32_t function_6bbd0(int32_t a1);
int32_t function_6bbff(void);
int32_t function_6bc06(int32_t a1, int32_t a2);
int32_t function_6bc10(int32_t a1);
int32_t function_6bc80(int32_t a1);
int32_t function_6bcaf(void);
int32_t function_6bcb6(int32_t a1, int32_t a2);
int32_t function_6bcc0(int32_t a1);
int32_t function_6bd30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6bd80(int32_t a1, int32_t a2);
int32_t function_6be0f(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6be20(void);
int32_t function_6be38(void);
int32_t function_6be48(void);
int32_t function_6be70(int32_t a1);
int32_t function_6bf2d(void);
int32_t function_6bf48(void);
int32_t function_6bf60(void);
int32_t function_6bf80(int32_t a1, int32_t a2);
int32_t function_6bfe8(void);
int32_t function_6c018(void);
int32_t function_6c040(int32_t a1, int32_t a2);
int32_t function_6c090(int32_t a1, uint32_t a2);
int32_t function_6c27f(void);
int32_t function_6c291(void);
int32_t function_6c29a(void);
int32_t function_6c2ab(void);
int32_t function_6c2b0(void);
int32_t function_6c2bb(void);
int32_t function_6c2db(void);
int32_t function_6c2f0(void);
int32_t function_6c2fb(void);
int32_t function_6c30b(void);
int32_t function_6c318(void);
int32_t function_6c326(void);
int32_t function_6c350(void);
int32_t function_6c363(void);
int32_t function_6c371(void);
int32_t function_6c37a(void);
int32_t function_6c38b(void);
int32_t function_6c390(void);
int32_t function_6c3a3(void);
int32_t function_6c3b1(void);
int32_t function_6c3ba(void);
int32_t function_6c3cb(void);
int32_t function_6c3d0(void);
int32_t function_6c3dc(void);
int32_t function_6c400(void);
int32_t function_6c410(void);
int32_t function_6c41d(void);
int32_t function_6c423(void);
int32_t function_6c431(void);
int32_t function_6c43a(void);
int32_t function_6c44b(void);
int32_t function_6c450(void);
int32_t function_6c463(void);
int32_t function_6c471(void);
int32_t function_6c47a(void);
int32_t function_6c48b(void);
int32_t function_6c496(void);
int32_t function_6c49f(void);
int32_t function_6c4a5(void);
int32_t function_6c4b6(void);
int32_t function_6c4be(void);
int32_t function_6c4d6(void);
int32_t function_6c4df(void);
int32_t function_6c4e5(void);
int32_t function_6c4f6(void);
int32_t function_6c4fe(void);
int32_t function_6c510(void);
int32_t function_6c539(void);
int32_t function_6c541(void);
int32_t function_6c550(void);
int32_t function_6c577(void);
int32_t function_6c580(int32_t a1, uint32_t a2);
int32_t function_6c76f(void);
int32_t function_6c781(void);
int32_t function_6c78a(void);
int32_t function_6c79b(void);
int32_t function_6c7a0(void);
int32_t function_6c7b3(void);
int32_t function_6c7c1(void);
int32_t function_6c7ca(void);
int32_t function_6c7db(void);
int32_t function_6c7e0(void);
int32_t function_6c7eb(void);
int32_t function_6c7fb(void);
int32_t function_6c800(void);
int32_t function_6c80e(void);
int32_t function_6c838(void);
int32_t function_6c84b(void);
int32_t function_6c859(void);
int32_t function_6c862(void);
int32_t function_6c873(void);
int32_t function_6c880(void);
int32_t function_6c893(void);
int32_t function_6c8a1(void);
int32_t function_6c8aa(void);
int32_t function_6c8bb(void);
int32_t function_6c8c0(void);
int32_t function_6c8cc(void);
int32_t function_6c8f0(void);
int32_t function_6c900(void);
int32_t function_6c913(void);
int32_t function_6c921(void);
int32_t function_6c92a(void);
int32_t function_6c93b(void);
int32_t function_6c940(void);
int32_t function_6c953(void);
int32_t function_6c961(void);
int32_t function_6c96a(void);
int32_t function_6c97b(void);
int32_t function_6c980(void);
int32_t function_6c999(void);
int32_t function_6c9a5(void);
int32_t function_6c9ae(void);
int32_t function_6c9bf(void);
int32_t function_6c9c8(void);
int32_t function_6c9f1(void);
int32_t function_6c9f9(void);
int32_t function_6ca08(void);
int32_t function_6ca2f(void);
int32_t function_6ca40(int32_t a1, uint32_t a2);
int32_t function_6cce3(void);
int32_t function_6ccf3(void);
int32_t function_6cd00(void);
int32_t function_6cd0b(void);
int32_t function_6cd1b(void);
int32_t function_6cd20(void);
int32_t function_6cd2e(void);
int32_t function_6cd50(void);
int32_t function_6cd5b(void);
int32_t function_6cd6b(void);
int32_t function_6cd70(void);
int32_t function_6cd83(void);
int32_t function_6cd91(void);
int32_t function_6cd9a(void);
int32_t function_6cdab(void);
int32_t function_6cdb0(void);
int32_t function_6cdbb(void);
int32_t function_6cdcb(void);
int32_t function_6cdd0(void);
int32_t function_6cddb(void);
int32_t function_6cdeb(void);
int32_t function_6cdf0(void);
int32_t function_6ce09(void);
int32_t function_6ce10(void);
int32_t function_6ce19(void);
int32_t function_6ce1f(void);
int32_t function_6ce31(void);
int32_t function_6ce40(void);
int32_t function_6ce59(void);
int32_t function_6ce60(void);
int32_t function_6ce69(void);
int32_t function_6ce6f(void);
int32_t function_6ce81(void);
int32_t function_6ce90(void);
int32_t function_6ce9b(void);
int32_t function_6ceab(void);
int32_t function_6ceb0(void);
int32_t function_6cf41(void);
int32_t function_6cf4d(void);
int32_t function_6cf56(void);
int32_t function_6cf67(void);
int32_t function_6cf71(void);
int32_t function_6cf7d(void);
int32_t function_6cf86(void);
int32_t function_6cf97(void);
int32_t function_6cfa1(void);
int32_t function_6cfad(void);
int32_t function_6cfb6(void);
int32_t function_6cfc7(void);
int32_t function_6cfd0(void);
int32_t function_6cff9(void);
int32_t function_6d001(void);
int32_t function_6d011(void);
int32_t function_6d01d(void);
int32_t function_6d026(void);
int32_t function_6d037(void);
int32_t function_6d040(void);
int32_t function_6d0a9(void);
int32_t function_6d0b5(void);
int32_t function_6d0be(void);
int32_t function_6d0cf(void);
int32_t function_6d0d8(void);
int32_t function_6d0f1(void);
int32_t function_6d0f8(void);
int32_t function_6d101(void);
int32_t function_6d107(void);
int32_t function_6d119(void);
int32_t function_6d128(void);
int32_t function_6d133(void);
int32_t function_6d143(void);
int32_t function_6d150(void);
int32_t function_6d1b8(void);
int32_t function_6d1d1(void);
int32_t function_6d1d8(void);
int32_t function_6d1e1(void);
int32_t function_6d1e7(void);
int32_t function_6d1f9(void);
int32_t function_6d208(void);
int32_t function_6d213(void);
int32_t function_6d223(void);
int32_t function_6d231(void);
int32_t function_6d23d(void);
int32_t function_6d246(void);
int32_t function_6d257(void);
int32_t function_6d261(void);
int32_t function_6d26d(void);
int32_t function_6d276(void);
int32_t function_6d287(void);
int32_t function_6d290(void);
int32_t function_6d29d(void);
int32_t function_6d2b1(void);
int32_t function_6d2ba(void);
int32_t function_6d2cb(void);
int32_t function_6d2d0(void);
int32_t function_6d2db(void);
int32_t function_6d2eb(void);
int32_t function_6d2f0(void);
int32_t function_6d303(void);
int32_t function_6d311(void);
int32_t function_6d31a(void);
int32_t function_6d32b(void);
int32_t function_6d330(void);
int32_t function_6d33b(void);
int32_t function_6d34b(void);
int32_t function_6d351(void);
int32_t function_6d35d(void);
int32_t function_6d366(void);
int32_t function_6d377(void);
int32_t function_6d37c(void);
int32_t function_6d38e(void);
int32_t function_6d3a1(void);
int32_t function_6d3ad(void);
int32_t function_6d3b6(void);
int32_t function_6d3c7(void);
int32_t function_6d3cd(void);
int32_t function_6d3d9(void);
int32_t function_6d3e2(void);
int32_t function_6d3f3(void);
int32_t function_6d400(int32_t a1, int32_t result2);
int32_t function_6d523(void);
int32_t function_6d531(void);
int32_t function_6d53a(void);
int32_t function_6d54b(void);
int32_t function_6d550(void);
int32_t function_6d563(void);
int32_t function_6d571(void);
int32_t function_6d57a(void);
int32_t function_6d58b(void);
int32_t function_6d590(void);
int32_t function_6d599(int32_t a1);
int32_t function_6d5c9(void);
int32_t function_6d5e0(int32_t a1, int32_t a2);
int32_t function_6d640(void);
int32_t function_6d670(void);
int32_t function_6d690(int32_t a1);
float80_t function_6d700(int32_t a1);
float80_t function_6d720(int32_t a1);
int32_t function_6d741(void);
float80_t function_6d750(int32_t a1);
float80_t function_6d7d0(int32_t a1);
int32_t function_6d820(void);
int32_t function_6d838(void);
int32_t function_6d85d(int32_t a1, int32_t a2);
int32_t function_6d880(int32_t a1, int32_t a2);
int32_t function_6d8d0(int32_t a1, int32_t a2);
int32_t function_6d8f0(void);
int32_t function_6d8f8(int32_t a1);
int32_t function_6d95d(int32_t a1, int32_t a2);
int32_t function_6d989(void);
int32_t function_6da2c(void);
int32_t function_6da50(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6dab0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6db50(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6dbf0(int32_t a1, int32_t * a2, int32_t a3);
int32_t function_6dc80(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6dde0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6de70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_6dee0(int32_t a1, int32_t a2);
int32_t function_6df31(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6dfb0(int32_t a1, int32_t * a2);
int32_t function_6e110(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6e140(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6e180(int32_t a1, int32_t a2);
int32_t function_6e1b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6e210(uint32_t a1);
int32_t function_6e230(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_6e2b0(int32_t a1, int32_t * a2, int32_t * a3);
int32_t function_6e400(int32_t a1, int32_t a2);
int32_t function_6e480(int32_t a1, int32_t a2);
int32_t function_6e57a(void);
int32_t function_6e588(int32_t a1);
float80_t function_6e5d7(int32_t a1);
int32_t function_6e615(void);
int32_t function_6e638(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6e690(void);
int32_t function_6e6c1(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6e860(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6e931(void);
int32_t function_6e940(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6ea11(int64_t a1, int64_t a2, int32_t a3, int32_t a4);
int32_t function_6eb80(int32_t a1, int32_t a2);
int32_t function_6ebd0(int32_t a1);
int32_t function_6ebf0(int32_t a1);
int32_t function_6ec20(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6eeb0(int32_t a1, int32_t a2);
int32_t function_6ef60(int32_t a1, int32_t * a2, int32_t * a3, int32_t * a4);
int32_t function_6f0f0(int32_t a1, int32_t a2, int32_t a3, int32_t result);
int32_t function_6f29a(void);
int32_t function_6f29f(int32_t a1);
int32_t function_6f2a8(int32_t a1);
int32_t function_6f362(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6f3b8(void);
int32_t function_6f449(void);
int32_t function_6f44c(int32_t a1);
int32_t function_6f4ff(int32_t a1, int32_t a2);
int32_t function_6f520(void);
int32_t function_6f52b(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6f5ea(int32_t a1, int32_t a2);
int32_t function_6f5fc(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6f620(int32_t a1);
int32_t function_6f6a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_6f71d(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6f851(int32_t a1);
int32_t function_6f890(int32_t a1, int32_t a2);
int32_t function_6f8e0(int32_t a1, int32_t a2);
int32_t function_6fa60(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6faa0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_6faf0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6fb30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6fb90(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6fbd0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6fc50(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_6fdd0(int32_t a1, int32_t a2);
int32_t function_6fe20(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6fe90(int32_t a1, int32_t a2);
int32_t function_6fec0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6ff00(int32_t a1, int32_t a2);
int32_t function_6ff30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_6ff70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_70050(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_701a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_703a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_70530(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_705e0(int32_t a1);
int32_t function_705f4(void);
int32_t function_70624(void);
float80_t function_70642(void);
int32_t function_70660(void);
float80_t function_70670(int32_t a1, int32_t a2);
int32_t function_70730(float80_t a1);
float80_t function_7074f(void);
int32_t function_70780(int32_t a1, int32_t a2, int32_t a3);
int32_t function_70800(int32_t a1, int32_t a2, int32_t * a3);
int32_t function_70890(int32_t a1, int32_t * a2, int32_t a3, int32_t a4);
int32_t function_708b6(int32_t a1, int32_t a2);
int32_t function_7098a(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_70a06(int32_t a1, int32_t a2);
int32_t function_70a0e(void);
int32_t function_70a3f(int32_t a1);
int32_t function_70a58(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_70aa0(void);
int32_t function_70ac0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_70b10(int32_t a1, int32_t a2);
int32_t function_70b50(int32_t a1, int32_t a2);
float80_t function_70c10(int32_t a1);
int32_t function_70cb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_70d40(int32_t a1, int32_t * a2, int32_t a3, int32_t a4);
int32_t function_70da0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_70df0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_70f70(int32_t * a1, int32_t a2, int32_t * a3);
int32_t function_70f89(void);
int32_t function_70f91(int32_t a1);
int32_t function_70f9d(int32_t result);
int32_t function_70ffb(void);
int32_t function_7100a(int32_t a1, int32_t a2);
int32_t function_7101a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_710c0(int32_t a1, int32_t a2, int32_t a3);
float80_t function_71130(int32_t a1, int32_t a2);
int32_t function_71180(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_71343(int32_t result);
float80_t function_7137d(void);
int32_t function_713b0(int32_t * a1, int32_t a2);
int32_t function_71469(void);
int32_t function_71477(int32_t a1, int32_t a2);
int32_t function_714c8(void);
int32_t function_714d0(int32_t * a1, int32_t * a2);
int32_t function_71503(int32_t result);
int32_t function_7150e(int32_t result);
int32_t function_7158d(void);
int32_t function_715b8(int32_t a1, int32_t a2);
int32_t function_71610(void);
int32_t function_71620(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_717b1(int32_t a1, int32_t a2, int32_t a3);
int32_t function_71920(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_71b00(int32_t a1, int32_t a2, int32_t a3);
int32_t function_71b40(int32_t a1, int32_t a2);
int32_t function_71b70(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_71b9a(void);
int32_t function_71c00(int32_t a1, int32_t a2, int32_t a3);
int32_t function_71c80(int32_t a1, int32_t a2);
int32_t function_71dc0(int32_t * a1, int32_t a2);
int32_t function_71f10(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_71fa0(int32_t a1, int32_t a2);
int32_t function_71fd0(int32_t a1, int32_t a2);
int32_t function_72040(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t * a5, int32_t * a6, int32_t * a7);
int32_t function_721c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_72460(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_726e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_72960(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_72a40(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_72bc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_72d40(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_72dc0(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
float80_t function_72ee0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_72f70(int32_t a1, int32_t a2);
int32_t function_72fe0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_73080(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_730d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_731a0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_73550(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_735e0(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_73700(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_73780(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_73a70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_73af0(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_73c90(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
float80_t function_73d10(int32_t a1);
float80_t function_73d40(int32_t a1);
float80_t function_73d71(int32_t a1);
float80_t function_73dc0(int32_t a1);
float80_t function_73de0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_73f50(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_740d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_74250(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_743d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
float80_t function_74550(int32_t a1, int32_t a2, int32_t a3);
int32_t function_74640(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_746b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_74730(int32_t a1, int32_t a2, int32_t a3, int32_t * a4);
int32_t function_747f0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5);
int32_t function_74880(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74900(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74970(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5);
int32_t function_74a20(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74aa0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74b10(int32_t a1, int32_t a2, int32_t a3, int32_t * a4);
int32_t function_74ba0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5);
int32_t function_74c20(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74c90(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74cf0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5);
int32_t function_74d90(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74e00(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_74e60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_75190(int32_t a1, int32_t a2, int32_t a3, int32_t result, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_751e4(void);
int32_t function_75220(void);
int32_t function_75230(void);
int32_t function_75240(void);
float80_t function_75250(int32_t a1, int32_t a2, int32_t a3);
float80_t function_75330(int32_t a1, int32_t a2);
float80_t function_753b0(int32_t a1, int32_t a2);
float80_t function_75410(float32_t a1);
float80_t function_75470(float32_t a1);
int32_t function_754b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_75500(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_75590(int32_t a1, int32_t a2, int32_t a3);
int32_t function_75631(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_75840(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_75910(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
float80_t function_75a00(int32_t a1, int32_t a2, int32_t a3);
int32_t function_75ab0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_75d30(int32_t a1, int32_t a2, int32_t a3);
int32_t function_75ec0(int32_t a1, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_761f0(int32_t a1, int32_t result2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_764f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int64_t a5, int64_t a6);
int32_t function_767f0(uint32_t a1);
int32_t function_76810(uint32_t a1);
int32_t function_76830(int32_t a1, int32_t a2);
int32_t function_76859(void);
float80_t function_7686f(void);
int32_t function_768b8(void);
float80_t function_76919(void);
int32_t function_76940(int32_t a1);
int32_t function_7697e(int32_t result);
int32_t function_7698b(int32_t result);
int32_t function_76991(int32_t a1);
int32_t function_7699a(void);
int32_t function_769ef(int32_t a1, int32_t a2);
int32_t function_76a29(int32_t a1);
int32_t function_76a34(int32_t a1);
int32_t function_76ca0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11);
int32_t function_76e40(int32_t a1);
int32_t function_76ea0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_76ee0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_76f30(int32_t a1, int32_t a2);
int32_t function_76f90(int32_t a1, int32_t a2);
int32_t function_76ff0(int32_t a1, int32_t a2);
int32_t function_77040(int32_t a1, int32_t a2);
int32_t function_77070(int32_t a1);
int32_t function_770d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_77110(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_77150(int32_t a1, int32_t * a2);
int32_t function_77190(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_77240(int32_t a1, int32_t a2);
int32_t function_772a0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_77350(int32_t a1, int32_t a2, int32_t a3);
int32_t function_77400(int32_t a1, int32_t a2, int32_t a3);
int32_t function_774b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_77560(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_77820(int32_t a1, int32_t a2);
int32_t function_77910(int32_t a1, int32_t a2);
int32_t function_77a40(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, unsigned char a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_77bbb(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_77cb7(void);
float80_t function_77cc6(void);
int32_t function_77d50(int32_t a1);
int32_t function_77e00(int32_t a1);
int32_t function_77e80(void);
int32_t function_77ebc(void);
int32_t function_77ec0(int32_t a1, int32_t a2);
int32_t function_77ed0(int32_t a1);
int32_t function_77ef0(void);
int32_t function_77f60(int32_t result, int32_t a2, int32_t a3);
int32_t function_78050(int32_t a1, int32_t a2, int32_t a3, int32_t * a4);
int32_t function_780e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_78160(int32_t result, int32_t a2, int32_t a3, int32_t a4);
float80_t function_78286(void);
float80_t function_782c6(void);
int32_t function_782e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_78386(void);
int32_t function_783d0(void);
int32_t function_783dc(void);
int32_t function_78416(void);
int32_t function_7843c(void);
int32_t function_784a8(void);
int32_t function_784b0(void);
int32_t function_784be(void);
int32_t function_78527(void);
int32_t function_78553(void);
int32_t function_78581(void);
int32_t function_785f0(void);
int32_t function_785f3(void);
int32_t function_78610(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_78692(void);
int32_t function_786e8(void);
float80_t function_78710(int32_t a1);
float80_t function_78760(int32_t a1);
int32_t function_787b0(int32_t a1);
float80_t function_7880b(void);
int32_t function_78821(void);
float80_t function_7887f(void);
int32_t function_788a9(void);
float80_t function_788c0(int32_t a1);
float80_t function_78a50(float80_t a1);
int32_t function_78b50(int32_t a1);
int32_t function_78b70(int32_t result);
int32_t function_78ba0(int32_t a1);
int32_t function_78be0(int32_t a1);
int32_t function_78c20(int32_t a1, int32_t a2);
int32_t function_78c90(int32_t a1, int32_t a2);
int32_t function_78d30(int32_t * a1, int32_t a2);
int32_t function_78d90(void);
int32_t function_78dd0(int32_t a1);
int32_t function_78e10(int32_t a1, int32_t * a2);
int32_t function_78e50(int32_t a1);
int32_t function_78e90(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_78fec(int32_t a1, int32_t a2, int32_t * a3, int32_t a4);
int32_t function_79174(void);
int32_t function_791a4(void);
int32_t function_791ee(int32_t a1, int32_t a2);
int32_t function_792dc(int32_t * a1);
int32_t function_79312(void);
int32_t function_79392(int32_t a1, int32_t a2);
int32_t function_79810(void);
int32_t function_79bbc(int32_t a1, int32_t a2);
int32_t function_79c08(void);
int32_t function_79cf5(int32_t * a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_7a2cc(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7a56a(int32_t a1, int32_t a2);
int32_t function_7a631(void);
int32_t function_7a66b(void);
int32_t function_7a728(void);
int32_t function_7a7c3(int32_t a1);
int32_t function_7a7ce(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7a824(int32_t a1);
int32_t function_7a82f(int32_t a1, int32_t a2);
int32_t function_7a845(int32_t a1, int32_t a2);
int32_t function_7a853(int32_t a1);
int32_t function_7a85e(int32_t a1);
int32_t function_7a869(int32_t a1);
int32_t function_7a89b(int32_t a1);
int32_t function_7a8a6(int32_t a1);
int32_t function_7a8b1(int32_t a1, int32_t a2);
int32_t function_7a972(void);
int32_t function_7a977(int32_t a1, int32_t a2);
int32_t function_7aaac(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_7ab57(int32_t a1, int32_t a2);
int32_t function_7abfe(int32_t a1, int32_t a2);
int32_t function_7acbf(int32_t a1);
int32_t function_7acdb(int32_t a1, int32_t a2);
int32_t function_7ad5b(int32_t a1);
int32_t function_7ad60(void);
int32_t function_7ad90(void);
int32_t function_7adda(int32_t a1, int32_t a2);
int32_t function_7adff(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_7ae8a(int32_t a1);
int32_t function_7aefe(void);
int32_t function_7af4e(void);
int32_t function_7af96(int32_t a1, int32_t a2);
int32_t function_7b03f(void);
int32_t function_7b0ec(void);
int32_t function_7b0fd(int32_t a1);
int32_t function_7b21b(int32_t a1);
int32_t function_7b2fd(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7b37a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7b3f7(int32_t a1);
int32_t function_7b4f6(int32_t a1);
int32_t function_7b53e(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7b9d0(void);
int32_t function_7bece(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_7bf5c(int32_t a1, int32_t a2);
int32_t function_7bf76(int32_t a1);
int32_t function_7bfab(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_7c034(int32_t a1, int32_t a2);
int32_t function_7c04e(int32_t a1);
int32_t function_7c07a(int32_t a1);
int32_t function_7c150(void);
int32_t function_7c159(int32_t a1);
int32_t function_7c18a(int32_t a1, int32_t a2);
int32_t function_7c304(void);
int32_t function_84147ada(void);
int32_t function_85d2febe(void);
int32_t function_8903936e(void);
int32_t function_8903a7a7(void);
int32_t function_89059d67(void);
int32_t function_89ff8501(void);
int32_t function_8b000004(void);
int32_t function_8d91c232(void);
int32_t function_900001f2(void);
int32_t function_c68d839a(int32_t a1);
int32_t function_c701a020(void);
int32_t function_c701a32d(void);
int32_t function_c701a52b(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_c701af50(void);
int32_t function_c710468b(void);
int32_t function_c8043153(void);
int32_t function_d2b60f10(void);
int32_t function_e58e7a9f(void);
int32_t function_e8047294(void);
int32_t function_f3e2570f(void);
int32_t function_fed4bd8d(void);
int32_t function_ffff92d7(void);
int32_t unknown_5d17f60e(void);
int32_t unknown_b68ec2db(void);
int32_t unknown_c806d2a3(void);
int32_t unknown_e5890006(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);

// --------------------- Global Variables ---------------------

// Detected cryptographic pattern: CRC_32_IEEE_802_3_poly_0x04C11DB7 (32-bit, little endian)
int32_t CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580[256] = {0, 0x77073096, -0x11f19ed4, -0x66f6ae46, 0x76dc419, 0x706af48f, -0x169c5acb, -0x619b6a5d, 0xedb8832, 0x79dcb8a4, -0x1f2a16e2, -0x682d2678, 0x9b64c2b, 0x7eb17cbd, -0x1847d2f9, -0x6f40e26f, 0x1db71064, 0x6ab020f2, -0xc468eb8, -0x7b41be22, 0x1adad47d, 0x6ddde4eb, -0xb2b4aaf, -0x7c2c7a39, 0x136c9856, 0x646ba8c0, -0x29d0686, -0x759a3614, 0x14015c4f, 0x63066cd9, -0x5f0c29d, -0x72f7f20b, 0x3b6e20c8, 0x4c69105e, -0x2a9fbe1c, -0x5d988e8e, 0x3c03e4d1, 0x4b04d447, -0x2df27a03, -0x5af54a95, 0x35b5a8fa, 0x42b2986c, -0x2444362a, -0x534306c0, 0x32d86ce3, 0x45df5c75, -0x2329f231, -0x542ec2a7, 0x26d930ac, 0x51de003a, -0x3728ae80, -0x402f9eea, 0x21b4f4b5, 0x56b3c423, -0x30456a67, -0x47425af1, 0x2802b89e, 0x5f058808, -0x39f3264e, -0x4ef416dc, 0x2f6f7c87, 0x58684c11, -0x3e9ee255, -0x4999d2c3, 0x76dc4190, 0x1db7106, -0x672ddf44, -0x102aefd6, 0x71b18589, 0x6b6b51f, -0x60401b5b, -0x17472bcd, 0x7807c9a2, 0xf00f934, -0x69f65772, -0x1ef167e8, 0x7f6a0dbb, 0x86d3d2d, -0x6e9b9369, -0x199ca3ff, 0x6b6b51f4, 0x1c6c6162, -0x7a9acf28, -0xd9dffb2, 0x6c0695ed, 0x1b01a57b, -0x7df70b3f, -0xaf03ba9, 0x65b0d9c6, 0x12b7e950, -0x74414716, -0x3467784, 0x62dd1ddf, 0x15da2d49, -0x732c830d, -0x42bb39b, 0x4db26158, 0x3ab551ce, -0x5c43ff8c, -0x2b44cf1e, 0x4adfa541, 0x3dd895d7, -0x5b2e3b93, -0x2c290b05, 0x4369e96a, 0x346ed9fc, -0x529877ba, -0x259f4730, 0x44042d73, 0x33031de5, -0x55f5b3a1, -0x22f28337, 0x5005713c, 0x270241aa, -0x41f4eff0, -0x36f3df7a, 0x5768b525, 0x206f85b3, -0x46992bf7, -0x319e1b61, 0x5edef90e, 0x29d9c998, -0x4f2f67de, -0x3828574c, 0x59b33d17, 0x2eb40d81, -0x4842a3c5, -0x3f459353, -0x12477ce0, -0x65404c4a, 0x3b6e20c, 0x74b1d29a, -0x152ab8c7, -0x622d8851, 0x4db2615, 0x73dc1683, -0x1c9cf4ee, -0x6b9bc47c, 0xd6d6a3e, 0x7a6a5aa8, -0x1bf130f5, -0x6cf60063, 0xa00ae27, 0x7d079eb1, -0xff06cbc, -0x78f75c2e, 0x1e01f268, 0x6906c2fe, -0x89da8a3, -0x7f9a9835, 0x196c3671, 0x6e6b06e7, -0x12be48a, -0x762cd420, 0x10da7a5a, 0x67dd4acc, -0x6462091, -0x71411007, 0x17b7be43, 0x60b08ed5, -0x29295c18, -0x5e2e6c82, 0x38d8c2c4, 0x4fdff252, -0x2e44980f, -0x5943a899, 0x3fb506dd, 0x48b2364b, -0x27f2d426, -0x50f5e4b4, 0x36034af6, 0x41047a60, -0x209f103d, -0x579820ab, 0x316e8eef, 0x4669be79, -0x349e4c74, -0x43997ce6, 0x256fd2a0, 0x5268e236, -0x33f3886b, -0x44f4b8fd, 0x220216b9, 0x5505262f, -0x3a45c442, -0x4d42f4d8, 0x2bb45a92, 0x5cb36a04, -0x3d280059, -0x4a2f30cf, 0x2cd99e8b, 0x5bdeae1d, -0x649b3d50, -0x139c0dda, 0x756aa39c, 0x26d930a, -0x63f6f957, -0x14f1c9c1, 0x72076785, 0x5005713, -0x6a40b57e, -0x1d4785ec, 0x7bb12bae, 0xcb61b38, -0x6d2d7165, -0x1a2a41f3, 0x7cdcefb7, 0xbdbdf21, -0x792c2d2c, -0xe2b1dbe, 0x68ddb3f8, 0x1fda836e, -0x7e41e933, -0x946d9a5, 0x6fb077e1, 0x18b74777, -0x77f7a51a, -0xf09590, 0x66063bca, 0x11010b5c, -0x709a6101, -0x79d5197, 0x616bffd3, 0x166ccf45, -0x5ff51d88, -0x28f22d12, 0x4e048354, 0x3903b3c2, -0x5898d99f, -0x2f9fe909, 0x4969474d, 0x3e6e77db, -0x512e95b6, -0x2629a524, 0x40df0b66, 0x37d83bf0, -0x564351ad, -0x2144613b, 0x47b2cf7f, 0x30b5ffe9, -0x42420de4, -0x35453d76, 0x53b39330, 0x24b4a3a6, -0x452fc9fb, -0x3228f96d, 0x54de5729, 0x23d967bf, -0x4c9985d2, -0x3b9eb548, 0x5d681b02, 0x2a6f2b94, -0x4bf441c9, -0x3cf3715f, 0x5a05df1b, 0x2d02ef8d}; // 0x7e580
// Detected cryptographic pattern: Generic_bitmask_table (32-bit, little endian)
int32_t Generic_bitmask_table_at_87960[32] = {0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 0x1fff, 0x3fff, 0x7fff, 0xffff, 0x1ffff, 0x3ffff, 0x7ffff, 0xfffff, 0x1fffff, 0x3fffff, 0x7fffff, 0xffffff, 0x1ffffff, 0x3ffffff, 0x7ffffff, 0xfffffff, 0x1fffffff, 0x3fffffff, 0x7fffffff}; // 0x87960
bool g1 = false; // az
bool g2 = false; // cf
bool g3 = false; // df
int32_t g4 = 0; // eax
int32_t g5 = 0; // ebp
int32_t g6 = 0; // ebx
int32_t g7 = 0; // ecx
int32_t g8 = 0; // edi
int32_t g9 = 0; // edx
int32_t g10 = 0; // esi
int32_t g11 = 0; // esp
int32_t g12 = 0; // fpsw
int3_t g13 = 0; // fpu_stat_TOP
int16_t g14 = 0; // fs
bool g15 = true;
char g16[3] = "NU";
char * g17 = "U";
int32_t g18 = -0xaead500;
char * g19 = "\x2b\x15\xf5\x18\x7c\x24\x6f\x3b\x7d\x4a\xd2\xf6\x5c\xec\x8f\x76\x4e\xc5\x68\x63\x83";
int32_t g20 = 0x7c18f515;
int32_t g21 = 0x247c18f5;
int32_t g22 = 0x6f247c18;
char * g23 = "\x7c\x24\x6f\x3b\x7d\x4a\xd2\xf6\x5c\xec\x8f\x76\x4e\xc5\x68\x63\x83";
int32_t g24 = -0x92db583;
bool g25 = false;
int16_t * g26 = (int16_t *)131;
int32_t g27 = -0x74000000;
int32_t g28 = 140;
bool g30 = false;
char * g29 = "e";
int32_t g31 = 0;
int32_t g32 = 8;
int32_t g33 = 98;
int16_t * g34 = NULL;
int16_t * g35 = (int16_t *)0x48000000;
int32_t g36 = 0x480000;
int32_t g37 = 72;
int32_t g38 = 8;
int32_t g39 = 88;
int32_t g40 = 137;
int32_t g41 = 0;
char * g42 = "\xd4\xa2\x04";
int32_t g44 = 0x4b74b;
int32_t g45 = 0x4bdcd;
int32_t g47 = 0x4c18d;
int32_t g49 = 127;
int32_t g50 = 59;
char * g51;
char * g52;
char * g53;
char * g54;
int128_t * g55 = (int128_t *)125;
int32_t g56 = 135;
int32_t g57 = 19;
int32_t g58 = 115;
int32_t g59 = 0;
int32_t g60 = 0;
int32_t g61 = 0;
bool g62 = false;
int32_t g64 = 0;
int32_t g63 = 0x196f8;
int32_t g65 = -0x7e000000;
char * g66;
int32_t g68 = 130;
int32_t g69 = 0;
int32_t g70 = 0;
int32_t g71 = 0x540000;
int32_t g72 = 8;
int32_t g73 = -0x17fbdbbc;
int32_t g74 = 0x80824;
int32_t g75 = -0x3fce0001;
int32_t g76 = 0x2404c704;
int32_t g77 = 0x26b4;
char g80 = 0;
int32_t g78 = 0x1a8b3;
char g81 = 0;
bool g82 = false;
int32_t g83 = 0;
int32_t g84 = 0;
int32_t g85 = 0;
int64_t g86 = 0x1500000000;
bool g87 = false;
int64_t g88 = 0;
int32_t g89 = 0x1b855;
bool g90 = false;
int32_t g91 = 0;
int32_t g92 = 0x1bad200;
int32_t g93 = 0;
int32_t g94 = 0;
int32_t g95 = 0;
int32_t g96 = 0;
int32_t g97 = 0;
int32_t g99 = 0;
int32_t g98 = 0x1cfb2;
int32_t g100 = 0;
int32_t g101 = 0;
int32_t g102 = 0;
int16_t g103 = 0;
char g104 = -101;
int32_t g105 = 0x2148c;
int32_t g106 = 0x221a8;
int32_t g107 = 0;
int32_t g109 = 0x2ae4600;
int32_t g110 = 0x120000;
char g111 = -68;
int32_t g112 = 0;
int32_t g113 = 0x1df40;
int32_t g114 = 0x229c0;
int32_t g115 = 0x1be30;
int32_t g116 = 0x1cca0;
int32_t g117 = 0x1bdd0;
int32_t g118 = 0x1ded0;
int32_t g119 = 0x1df30;
int32_t g120 = 0x1e890;
int32_t g121 = 0x226f0;
int32_t g122 = 0x22840;
int32_t g123 = 0x242d0;
int32_t g124 = 0x229c0;
int32_t g125 = 0x24c40;
int32_t g126 = 0x24af0;
int128_t g127;
int32_t g128 = 0xa220009;
char * g129;
int32_t g130 = 0x78300022;
int32_t g131 = 0;
int32_t g132 = 0x25270;
int128_t g133;
int32_t g134 = 0x3025002c;
int32_t g135 = 36;
int32_t g136 = 32;
int32_t g138 = 0x27000a;
int32_t g139 = 0x303c0;
int32_t g140 = 0x30400;
int32_t g141 = 0x333a0;
int32_t g142 = 238;
bool g143 = false;
int32_t g148 = 0;
int32_t g144 = 138;
int32_t g145 = -0xd000000;
int32_t g146 = 0xf30000;
int32_t g147 = 0x1c0000;
char (*g149)[15] = "VEngineCvar007";
int32_t g150; // 0x80424
int32_t g151 = 0x358b0;
int32_t g152 = 0x36bb0;
int32_t g153 = 0x3af9d;
int32_t g155 = 0x35e20;
int32_t g156 = 0x1bbd0;
int32_t g157 = 0x37050;
int32_t g158 = 0x37bb0;
int32_t g159 = 0x37cb0;
int32_t g160 = 0x39c50;
int32_t g161 = 0x38dd0;
int32_t g162 = 0x39e70;
int32_t g163 = 0x3ac60;
char * g164[2] = {
    "game",
    "ending"
};
int32_t g165 = 0x3b4a0;
int32_t g166 = 0x3d550;
char * g167[2] = {
    "game",
    "ending"
};
int32_t g168 = 0x3b733;
int32_t g169 = 0x3f2d0;
int32_t g170 = 0x3e440;
int32_t g171 = 0x3f330;
int32_t g172 = 0x3f2d0;
int32_t g173 = 0x43370;
int32_t g174 = 0x450c0;
int32_t g175 = 0x450e0;
int128_t g176;
int32_t g177 = 0x494f0;
int32_t g178 = 0x49530;
int32_t g179 = 0x494f0;
int32_t g180 = 0x1bbd0;
int32_t g181 = 0x496c0;
int32_t g182 = 0x496c0;
int32_t g183 = 0x49530;
int32_t g184 = 0x1bbd0;
int32_t g185 = 0x1bbd0;
int32_t g186 = 0x1bbd0;
int32_t g187 = 0x49c10;
int32_t g188 = 0x4a9d0;
int32_t g189 = 0x4baa0;
int32_t g190 = 0x4bfe0;
int32_t g191 = 0x4cd90;
int32_t g192 = 0x4d530;
int32_t g193 = 0x4baa0;
int32_t g194 = 0x4f070;
int32_t g195 = 0x4f010;
int32_t g196 = 0x4ff40;
int32_t g197 = 0x55c40;
int32_t g198 = 0x500b0;
int32_t g199 = 0x1bbd0;
int32_t g200 = 0x563e0;
int32_t g201 = 0x1bbd0;
int32_t g202 = 0x56390;
int32_t g203 = 0x56360;
int32_t g204 = 0x1bbd0;
char * g205[5] = {
    "n/a",
    "n/a",
    "full",
    "create",
    "n/a"
};
int32_t g206 = 0x56280;
int32_t g207 = 0x56250;
int32_t g208 = 0x56250;
int32_t g209 = 0x56220;
int32_t g210 = 0x56620;
int32_t g211 = 0x56670;
int32_t g212 = 0x56ca0;
int32_t g213 = 0x572b0;
int32_t g214 = 0x56ed0;
int32_t g215 = 0x59250;
int32_t g216 = 0x59330;
int32_t g217 = 0x592d0;
int32_t g218 = 0x59500;
int32_t g219 = 0x5a110;
int32_t g220 = 0x5a590;
int32_t g221 = 0x5ae40;
int32_t g222 = 0x5a8e0;
int32_t g223 = 0x5af50;
int32_t g224 = 0x5b4d0;
int32_t g225 = 0x5c690;
char * g226 = "\x01";
int32_t g227 = 8;
int32_t g228 = 0x5c980;
int32_t g229 = 0x5c900;
int32_t g230 = 0x5d690;
int32_t g231 = -0x699ffffb;
int32_t g232 = 0x5d5c0;
int128_t g233;
int32_t g234 = 0x62480;
int32_t g235 = 0x6a8f0;
int128_t g236;
int128_t g237;
int128_t g238;
int128_t g239;
int128_t g240;
int128_t g241;
int128_t g242;
int128_t g243;
int128_t g244;
int128_t g245;
int128_t g246;
int32_t g247 = 0xee64ff;
int32_t g248 = 0x3fd4700;
int16_t * g249 = (int16_t *)18;
int32_t g250 = 0x1e000000;
char (*g251)[13] = "sp_a1_intro1";
char (*g255)[13] = "sp_a1_intro1";
char (*g256)[13] = "sp_a1_intro2";
char (*g257)[14] = "mp_coop_start";
char (*g258)[3] = "SP";
char (*g259)[5] = "COOP";
char (*g260)[27] = "ACH.SURVIVE_CONTAINER_RIDE";
char (*g261)[10] = "AV_SHIRT1";
int32_t g262 = 2;
int32_t g263 = -1;
int32_t g264; // 0xa3e04
char g266 = 1;
int32_t g267 = 4;
int32_t g268 = 0x250e0;
int32_t g269 = 0x25100;
char (*g270)[8] = "unknown";
int32_t g271 = 10;
int32_t g272 = 127;
int32_t g274 = 0;
int32_t g275 = 0;
char (*g276)[13] = "Localize_001";
int32_t g277 = 0;
char (*g279)[13] = "Localize_001";
char (*g280)[21] = "GAMEEVENTSMANAGER002";
int32_t g281 = 24;
int32_t g282 = 0;
char * g283 = "\xff\xff\xff\xff\xa0\x72\x0a";
int32_t g284; // 0xa4000
int16_t * g286 = NULL;
int32_t g287 = 0;
int16_t g289 = 1;
char * g290 = "`z\n"; // 0xa4010
int32_t g292; // 0xa4018
int32_t g293; // 0xa401c
int32_t g295; // 0xa4024
int32_t g297; // 0xa402c
int32_t g299 = 1;
int32_t g300 = 1;
int16_t * g301 = NULL;
int32_t g302 = 0;
int16_t * g304 = NULL;
int32_t g305 = 0;
int32_t g307 = 0x3b808081;
int32_t g308 = 0;
int32_t g309 = 0;
int32_t g310 = 0;
int32_t g311 = 0;
int32_t g312 = 0;
int32_t g313 = 0;
int32_t g314 = 0;
int32_t g315 = 0;
int32_t g316 = 0;
int32_t g317 = 0;
int32_t g318 = 0;
int32_t g319 = 0;
int32_t g320 = 0;
int32_t g321 = 0;
int32_t g322 = 0;
int32_t g323 = 0;
int32_t g324 = 0;
int32_t g325 = 0;
int32_t g326 = 0;
int32_t g327 = 0;
int32_t g328 = 0;
int32_t g329 = 0;
int32_t g330 = 0;
int32_t g331 = 0;
int32_t g332 = 0;
int32_t g333 = 0;
int32_t g334 = 0;
char * g335;
int32_t g336 = 0;
int32_t g337 = 0;
int32_t g338 = 0;
int32_t g339 = 0;
int32_t g340 = 0;
char * g341;
int32_t g342 = 0;
int32_t g343 = 0;
int32_t g344 = 0;
int32_t g345 = 0;
int32_t g346 = 0;
int32_t g347 = 0;
int32_t g348 = 0;
int32_t g349 = 0;
int32_t g350 = 0;
int32_t g351 = 0;
int32_t g352 = 0;
int32_t g353 = 0;
int32_t g354 = 0;
int32_t g355 = 0;
int32_t g356 = 0;
int32_t g357 = 0;
int32_t g358 = 0;
int32_t g359 = 0;
int32_t g360 = 0;
int32_t g361 = 0;
char g362 = 0;
int32_t g363 = 0;
int32_t g364 = 0;
int32_t g365 = 0;
int32_t g366 = 0;
int32_t g367 = 0;
int32_t g368 = 0;
int32_t g369 = 0;
int32_t g370 = 0;
int32_t g371 = 0;
int32_t g372 = 0;
int32_t g373 = 0;
int32_t g374 = 0;
int32_t g375 = 0;
int32_t g376 = 0;
int32_t g377 = 0;
int32_t g378 = 0;
int32_t g379 = 0;
int32_t g380 = 0;
int32_t g381 = 0;
int32_t g382 = 0;
int32_t g383 = 0;
char g384 = 0;
int32_t g385 = 0;
char g386 = 0;
int32_t g387 = 0;
int32_t g388 = 0;
bool g389 = false;
int32_t g390 = 0;
char * g391;
int32_t g392 = 0;
int32_t g393 = 0;
int32_t g395 = 8;
int32_t g394 = 0;
int32_t g396 = 0;
char * g397;
int32_t g398 = 0;
int32_t g399 = 0;
int32_t g400 = 0;
int32_t g401 = 0;
int32_t g402 = 0;
int32_t g403 = 0;
int32_t g404 = 0;
int32_t g405 = 0;
int32_t g406 = 0;
int32_t g407 = 0;
int32_t g408 = 0;
int32_t g409 = 0;
int32_t g410 = 0;
char * g411;
int32_t g412 = 0;
int32_t g413 = 0;
int32_t g414 = 0;
int32_t g415 = 0;
int32_t g416 = 0;
int32_t g417 = 0;
int32_t g418 = 0;
int32_t g419 = 0;
int32_t g420 = 0;
int32_t g421 = 0;
int32_t g422 = 0;
int32_t g423 = 0;
int32_t g424 = 0;
int32_t g425 = 0;
int32_t g426 = 0;
int32_t g427 = 0;
int32_t g428 = 0;
int32_t g429 = 0;
int32_t g430 = 0;
int32_t g431 = 0;
int32_t g432 = 0;
int32_t g433 = 0;
int32_t g434 = 0;
int32_t g435 = 0;
int32_t g436 = 0;
int32_t g437 = 0;
int32_t g438 = 0;
int32_t g439 = 0;
int32_t g440 = 0;
int32_t g441 = 0;
int32_t g442 = 0;
int32_t g443 = 0;
int32_t g444 = 0;
int32_t g445 = 0;
int32_t g446 = 0;
int32_t g447 = 0;
int32_t g448 = 0;
int32_t g449 = 0;
char * g450;
int32_t g451 = 0;
int32_t g452 = 0;
int32_t g453 = 0;
int32_t g454 = 0;
int32_t g455 = 0;
int32_t g456 = 0;
int32_t g457 = 0;
int32_t g458 = 0;
int32_t g459 = 0;
int32_t g460 = 0;
int32_t g461 = 0;
int32_t g462 = 0;
int32_t g463 = 0;
int32_t g464 = 0;
int32_t g465 = 0;
int32_t g466 = 0;
int32_t g467 = 0;
int32_t g468 = 0;
char g469 = 0;
int32_t g470 = 0;
int32_t g471 = 0;
char g472 = 0;
int32_t g473 = 0;
int32_t g474 = 0;
int32_t g475 = 0;
int32_t g476 = 0;
int32_t g477 = 0;
char g478 = 0;
int32_t g479 = 0;
int32_t g480 = 0;
int32_t g481 = 0;
int32_t g482 = 0;
int32_t g483 = 0;
int32_t g484 = 0;
int32_t g485 = 0;
int32_t g486 = 0;
int32_t g487 = 0;
int32_t g488 = 0;
int32_t g489 = 0;
int32_t g490 = 0;
int32_t g491 = 0;
int32_t g492 = 0;
int32_t g493 = 0;
int32_t g494 = 0;
int32_t g495 = 0;
int32_t g496 = 0;
int32_t g497 = 0;
int32_t g498 = 0;
int32_t g499 = 0;
int32_t g500 = 0;
int32_t g501 = 0;
int32_t g502 = 0;
int32_t g503 = 0;
int32_t g504 = 0;
int32_t g505 = 0;
int32_t g506 = 0;
int32_t g507 = 0;
int32_t g508 = 0;
int32_t g509 = 0;
int32_t g510 = 0;
int32_t g511 = 0;
int32_t g512 = 0;
int32_t g513 = 0;
int32_t g514 = 0;
int32_t g515 = 0;
int32_t g516 = 0;
int32_t g517 = 0;
int32_t g518 = 0;
int32_t g519 = 0;
int32_t g520 = 0;
int32_t g521 = 0;
int32_t g522 = 0;
int32_t g523 = 0;
int32_t g524 = 0;
int32_t g525 = 0;
int32_t g526 = 0;
int32_t g527 = 0;
int32_t g528 = 0;
int32_t g529 = 0;
char g530 = 0;
int16_t g531 = 0;
char g532 = 0;
char g533 = 0;
int32_t g534 = 0;
int32_t g535 = 0;
char g536 = 0;
int32_t g537 = 0;
int32_t g538 = 0;
int32_t g539 = 0;
int32_t g540 = 0;
int32_t g541 = 0;
int32_t g542 = 0;
int32_t g543 = 0;
char g544 = 0;
int32_t g545 = 0;
int32_t g546 = 0;
int32_t g547 = 0;
int32_t g548 = 0;
int32_t g549 = 0;
int128_t g550;
char g551 = 0;
char g552 = 0;
int32_t g553 = 0;
int32_t g554 = 0;
int32_t g555 = 0;
int32_t g556 = 0;
int32_t g557 = 0;
int32_t g558 = 0;
int32_t g559 = 0;
int32_t g560 = 0;
int32_t g561 = 0;
int32_t g562 = 0;
int32_t g563 = 0;
int32_t g564 = 0;
int32_t g565 = 0;
int32_t g566 = 0;
int32_t g567 = 0;
int32_t g568 = 0;
int32_t g569 = 0;
int32_t g570 = 0;
int32_t g571 = 0;
int32_t g572 = 0;
int32_t g573 = 0;
int32_t g574 = 0;
int32_t g575 = 0;
int32_t g576 = 0;
int32_t g577 = 0;
int32_t g578 = 0;
int32_t g579 = 0;
int32_t g580 = 0;
int32_t g581 = 0;
int32_t g582 = 0;
int32_t g583 = 0;
int32_t g584 = 0;
int32_t g585 = 0;
int32_t g586 = 0;
int32_t g587 = 0;
int32_t g588 = 0;
int32_t g589 = 0;
int32_t g590 = 0;
int32_t g591 = 0;
int32_t g592 = 0;
int32_t g593 = 0;
int32_t g594 = 0;
int32_t g595 = 0;
int32_t g596 = 0;
int32_t g597 = 0;
int32_t g598 = 0;
int32_t g599 = 0;
int32_t g600 = 0;
int32_t g601 = 0;
int32_t g602 = 0;
int32_t g603 = 0;
int32_t g604 = 0;
int32_t g605 = 0;
int32_t g606 = 0;
int32_t g607 = 0;
int32_t g608 = 0;
int32_t g609 = 0;
int32_t g610 = 0;
int32_t g611 = 0;
int32_t g612 = 0;
int32_t g613 = 0;
int32_t g614 = 0;
int32_t g615 = 0;
int32_t g616 = 0;
int32_t g617 = 0;
int32_t g618 = 0;
int32_t g619 = 0;
int32_t g620 = 0;
int128_t g621;
int32_t g622 = 0;
int32_t g623 = 0;
char g624 = 0;
int32_t g625 = 0;
int32_t g626 = 0;
int32_t g627 = 0;
int32_t g628 = 0;
int32_t g629 = 0;
int32_t g630 = 0;
int32_t g631 = 0;
int32_t g632 = 0;
int32_t g633 = 0;
int32_t g634 = 0;
int32_t g635 = 0;
int32_t g636 = 0;
int32_t g637 = 0;
int32_t g638 = 0;
int32_t g639 = 0;
int32_t g640 = 0;
int32_t g641 = 0;
int32_t g642 = 0;
int32_t g643 = 0;
int32_t g644 = 0;
int32_t g645 = 0;
int32_t g646 = 0;
int32_t g647 = 0;
int32_t g648 = 0;
int32_t g649 = 0;
int32_t g650 = 0;
int32_t g651 = 0;
int32_t g652 = 0;
int32_t g653 = 0;
char g654 = 0;
int32_t g655 = 0;
int32_t g656 = 0;
int32_t g657 = 0;
int32_t g658 = 0;
int32_t g659 = 0;
int32_t g660 = 0;
int32_t g661 = 0;
int32_t g662 = 0;
int32_t g663 = 0;
int32_t g664 = 0;
int32_t g665 = 0;
int32_t g666 = 0;
int32_t g667 = 0;
int32_t g668 = 0;
int32_t g669 = 0;
int32_t g670 = 0;
int32_t g671 = 0;
int32_t g672 = 0;
int32_t g673 = 0;
int32_t g674 = 0;
int32_t g675 = 0;
int32_t g676 = 0;
int32_t g677 = 0;
int32_t g678 = 0;
int32_t g679 = 0;
int32_t g680 = 0;
int32_t g681 = 0;
int32_t g682 = 0;
int32_t g683 = 0;
char g684 = 0;
int32_t g685 = 0;
int32_t g686 = 0;
int32_t g687 = 0;
int32_t g688 = 0;
int32_t g689 = 0;
int32_t g690 = 0;
int32_t g691 = 0;
int32_t g692 = 0;
int32_t g693 = 0;
int32_t g694 = 0;
int32_t g695 = 0;
int32_t g696 = 0;
int32_t g697 = 0;
int32_t g698 = 0;
int32_t g699 = 0;
int32_t g700 = 0;
int32_t g701 = 0;
int32_t g702 = 0;
int32_t g703 = 0;
int32_t g704 = 0;
int32_t g705 = 0;
int32_t g706 = 0;
int32_t g707 = 0;
int32_t g708 = 0;
int32_t g709 = 0;
int32_t g710 = 0;
int32_t g711 = 0;
int32_t g712 = 0;
int32_t g713 = 0;
int32_t g714 = 0;
char g715 = 0;
int32_t g716 = 0;
int32_t g717 = 0;
int32_t g718 = 0;
int32_t g719 = 0;
int32_t g720 = 0;
int32_t g721 = 0;
int32_t g722 = 0;
int32_t g723 = 0;
char g724 = 0;
int32_t g725 = 0;
int32_t g726 = 0;
int32_t g727 = 0;
int32_t g728 = 0;
int32_t g729 = 0;
int32_t g730 = 0;
int32_t g731 = 0;
int32_t g732 = 0;
int32_t g733 = 0;
int32_t g734 = 0;
int32_t g735 = 0;
int32_t g736 = 0;
int32_t g737 = 0;
int32_t g738 = 0;
char g739 = 0;
int32_t g740 = 0;
int32_t g741 = 0;
int32_t g742 = 0;
int32_t g743 = 0;
int32_t g744 = 0;
int32_t g745 = 0;
int32_t g746 = 0;
int32_t g747 = 0;
int32_t g748 = 0;
int32_t g749 = 0;
bool g750 = false;
int32_t g751 = 0;
int128_t * g752 = NULL;
int128_t * g753 = NULL;
int32_t g754 = 0;
int32_t g755 = 0x75b10000;
int32_t g756 = 0;
int32_t g757 = 0;
int32_t g758 = 0;
int32_t g759 = 0;
int32_t g760 = 0;
int32_t g761 = 0;
int32_t g762 = 0;
int32_t g763 = 0;
int32_t g764 = 0;
int32_t g765 = 0;
int32_t g766 = 0;
int32_t g767 = 0;
int32_t g768 = 0;
int32_t g769 = 0;
int32_t g770 = 0;
int32_t g771 = 0;
char * g772;
int32_t g773 = 0;
char * g774;
int32_t g775 = 0;
int32_t g776 = 0;
int32_t g777 = 0;
int32_t g778 = 0;
int32_t g779 = 0;
int32_t g780 = 0;
int32_t g781 = 0;
int32_t g782 = 0;
int32_t g783 = 0;
int32_t g784 = 0;
int32_t g785 = 0;
int32_t g786 = 0;
int32_t g787 = 0;
char g788 = 0;
char g789 = 0;
int32_t g790 = 0;
int32_t g791 = 0;
int32_t g792 = 0;
int32_t g793 = 0;
int32_t g794 = 0;
int32_t g795 = 0;
int32_t g796 = 0;
int32_t g797 = 0;
int32_t g798 = 0;
int32_t g799 = 0;
int32_t g800 = 0;
int32_t g801 = 0;
int32_t g802 = 0;
int32_t g803 = 0;
int32_t g804 = 0;
int32_t g805 = 0;
int32_t g806 = 0;
int32_t g807 = 0;
int32_t g808 = 0;
int32_t g809 = 0;
int32_t g810 = 0;
int32_t g811 = 0;
int32_t g812 = 0;
int32_t g813 = 0;
int32_t g814 = 0;
int32_t g815 = 0;
int32_t g816 = 0;
int32_t g817 = 0;
int32_t g818 = 0;
int32_t g819 = 0;
int32_t g820 = 0;
int32_t g821 = 0;
int32_t g822 = 0;
int32_t g823 = 0;
int32_t g824 = 0;
int32_t g825 = 0;
int32_t g826 = 0;
int32_t g827 = 0;
int32_t g828 = 0;
int32_t g829 = 0;
int32_t g830 = 0;
int32_t g831 = 0;
int32_t g833 = 8;
char * g834;
int32_t g835 = 18;
int32_t g836 = 190;
int32_t g837 = 0;
char * g838;
int32_t g840 = 0;
int32_t g841 = 0;
int32_t g842 = 18;
int32_t g844 = 0;
int32_t g845 = 18;
int32_t g847 = 0;
char * g848;
int32_t g849 = 18;
int32_t g851 = 0;
int32_t g852 = 0;
int32_t g854 = 0x6ca1b00;
int32_t g855 = 4;
int32_t g856 = 20;
int32_t g857 = 0x3000000;
int32_t g858 = 3;
char g860 = 0;
int32_t g859 = 0x723dc;
int32_t g861 = 0x4e470000;
int16_t * g862 = (int16_t *)0x554e4700;
int64_t g863 = 0x8000751e700;
bool g864 = false; // of
bool g865 = false; // pf
bool g866 = false; // sf
float80_t g867 = 0.0L; // st6
float80_t g868 = 0.0L; // st7
int32_t g869;
int32_t g870;
int32_t g871;
int32_t g872;
int32_t g873;
int32_t g874;
int32_t g875;
int32_t g876;
int32_t g877;
int128_t g878 = 0; // xmm0
int128_t g879 = 0; // xmm1
int128_t g880 = 0; // xmm2
int128_t g881 = 0; // xmm3
bool g882 = false; // zf
int32_t * g108 = &g146;
int32_t ** g43 = &g108;
int32_t ** g46 = &g108;
int32_t ** g48 = &g108;
int32_t * g67 = &g168;
int32_t * g79 = &g145;
int32_t * g137 = &g754;
int32_t * g154 = &g148;
int32_t * g253 = &g120;
int32_t ** g252 = &g253;
int32_t * g254 = &g338;
char (*g265)[3] = &g16;
int32_t * g273 = &g464;
int32_t * g278 = &g467;
int32_t * g285 = &g476;
int32_t * g288 = (int32_t *)&g15;
int32_t * g291 = &g556;
int32_t * g294 = &g628;
int32_t * g296 = &g652;
int32_t * g298 = &g653;
int32_t * g303 = (int32_t *)&g15;
int32_t * g306 = (int32_t *)&g15;
int32_t * g832 = &g148;
int32_t * g839 = &g70;
int32_t ** g843 = &g67;
int32_t * g846 = &g110;
int32_t * g850 = &g112;
int32_t * g853 = &g147;

// ------------------------ Functions -------------------------

// Address range: 0x18e38 - 0x18e66
int32_t _init(int32_t a1) {
    // 0x18e38
    int32_t v1;
    g6 = v1 + (int32_t)&g247;
    int32_t v2 = *(int32_t *)(v1 + (int32_t)&g247 - 16); // 0x18e48
    g4 = v2;
    if (v2 != 0) {
        // 0x18e52
        __gmon_start__();
        g4 = &g870;
    }
    // 0x18e57
    g4 = function_1bb8b();
    int32_t result = function_7c304(); // 0x18e5c
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x18e70 - 0x18e7c
int32_t function_18e70(int32_t a1) {
    // 0x18e70
    return g4;
}

// Address range: 0x18e80 - 0x18e86
void function_18e80(void) {
    // 0x18e80
    abort();
    g4 = &g870;
}

// Address range: 0x18e90 - 0x18e96
int32_t function_18e90(int32_t * once_control, void (*init_routine)()) {
    int32_t result = pthread_once(once_control, init_routine); // 0x18e90
    g4 = result;
    return result;
}

// Address range: 0x18ea0 - 0x18ea6
void function_18ea0(void) {
    // 0x18ea0
    __gmon_start__();
    g4 = &g870;
}

// Address range: 0x18eb0 - 0x18eb6
void function_18eb0(int32_t * ptr) {
    // 0x18eb0
    free(ptr);
    g4 = &g870;
}

// Address range: 0x18ec0 - 0x18ed0
int32_t function_18ec0(int32_t a1) {
    int32_t result = function_18e70(32); // 0x18ecb
    g4 = result;
    return result;
}

// Address range: 0x18ed0 - 0x18ed6
int32_t * function_18ed0(int32_t size) {
    int32_t * mem = malloc(size); // 0x18ed0
    g4 = (int32_t)mem;
    return mem;
}

// Address range: 0x18ee0 - 0x18ef0
int32_t function_18ee0(int32_t a1) {
    int32_t result = function_18e70(48); // 0x18eeb
    g4 = result;
    return result;
}

// Address range: 0x18ef0 - 0x18ef6
int32_t function_18ef0(int32_t (*a1)(struct dl_phdr_info *, int32_t, int32_t *), int32_t * data) {
    int32_t result = dl_iterate_phdr(a1, data); // 0x18ef0
    g4 = result;
    return result;
}

// Address range: 0x18f00 - 0x18f06
int32_t function_18f00(int32_t a1) {
    int32_t result = __cxa_finalize(); // 0x18f00
    g4 = result;
    return result;
}

// Address range: 0x18f10 - 0x18f31
int32_t entry_point(void) {
    // 0x18f10
    *(char *)&g308 = 0;
    *(char *)&g309 = 0;
    *(char *)&g310 = 0;
    *(char *)&g311 = 0;
    return g4;
}

// Address range: 0x18f40 - 0x18faa
int32_t function_18f40(void) {
    // 0x18f40
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g316 = 0;
    *(char *)&g317 = 0;
    *(char *)&g318 = 0;
    *(char *)&g319 = 0;
    g320 = 0;
    g321 = 0;
    g322 = 0x7f7fffff;
    g323 = 0x7f7fffff;
    g324 = 0;
    g325 = 0;
    g326 = 0;
    g327 = 0;
    g328 = 0x7f7fffff;
    g329 = 0x7f7fffff;
    g330 = 0x7f7fffff;
    g331 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1909a - 0x1909d
int32_t function_1909a(void) {
    // 0x1909a
    g7--;
    return g4;
}

// Address range: 0x19166 - 0x19184
int32_t function_19166(void) {
    int32_t * v1 = (int32_t *)(g6 + 0xa34c815); // 0x19166
    *v1 = *v1 - 1;
    *(char *)g7 = (char)(g9 / 256) + *(char *)&g7;
    int32_t v2 = g4 + (int32_t)&g337; // 0x19175
    int32_t result = v2 != 0 ? g7 : v2; // 0x1917a
    g4 = result;
    g336 = result;
    return result;
}

// Address range: 0x19190 - 0x191fa
int32_t function_19190(void) {
    // 0x19190
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g346 = 0;
    *(char *)&g347 = 0;
    *(char *)&g348 = 0;
    *(char *)&g349 = 0;
    g350 = 0;
    g351 = 0;
    g352 = 0x7f7fffff;
    g353 = 0x7f7fffff;
    g354 = 0;
    g355 = 0;
    g356 = 0;
    g357 = 0;
    g358 = 0x7f7fffff;
    g359 = 0x7f7fffff;
    g360 = 0x7f7fffff;
    g361 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19200 - 0x1926a
int32_t function_19200(void) {
    // 0x19200
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g366 = 0;
    *(char *)&g367 = 0;
    *(char *)&g368 = 0;
    *(char *)&g369 = 0;
    g370 = 0;
    g371 = 0;
    g372 = 0x7f7fffff;
    g373 = 0x7f7fffff;
    g374 = 0;
    g375 = 0;
    g376 = 0;
    g377 = 0;
    g378 = 0x7f7fffff;
    g379 = 0x7f7fffff;
    g380 = 0x7f7fffff;
    g381 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19300 - 0x19303
int32_t function_19300(void) {
    // 0x19300
    g7--;
    return g4;
}

// Address range: 0x1936c - 0x1936d
int32_t function_1936c(void) {
    // 0x1936c
    return g4;
}

// Address range: 0x19374 - 0x193a9
int32_t function_19374(int16_t a1) {
    // 0x19374
    g8++;
    int32_t v1 = g4 + (int32_t)&g391; // 0x19376
    g4 = v1;
    int32_t v2; // 0x1937b
    if (g7 == 0) {
        // bb
        v2 = function_1936c();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3 = g6; // 0x1937e
    g6 = v3 + 256 * v2 & 0xff00 | v3 & -0xff01;
    int32_t v4 = v2 + (int32_t)&g392; // 0x19380
    g4 = v4;
    char * v5 = (char *)v4; // 0x19385
    *v5 = *v5 + (char)v4;
    int32_t v6 = g4; // 0x19387
    char * v7 = (char *)v6; // 0x19387
    *v7 = *v7 + (char)v6;
    g393 = 0;
    g400 = 0;
    g401 = 0;
    return g4;
}

// Address range: 0x193b0 - 0x193d1
int32_t function_193b0(void) {
    // 0x193b0
    *(char *)&g406 = 0;
    *(char *)&g407 = 0;
    *(char *)&g408 = 0;
    *(char *)&g409 = 0;
    return g4;
}

// Address range: 0x193e0 - 0x1941c
int32_t function_193e0(void) {
    // 0x193e0
    g416 = 0;
    g417 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g412 = 0;
    *(char *)&g413 = 0;
    *(char *)&g414 = 0;
    *(char *)&g415 = 0;
    g418 = 0x7f7fffff;
    g419 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19420 - 0x194c1
int32_t function_19420(void) {
    int32_t v1; // ebp
    g5 = &v1;
    g426 = 0;
    g427 = 0;
    g4 = 0x7f7fffff;
    g428 = 0x7f7fffff;
    g429 = 0x7f7fffff;
    *(char *)&g422 = 0;
    *(char *)&g423 = 0;
    *(char *)&g424 = 0;
    *(char *)&g425 = 0;
    g4 = function_305f0(&g421, 92, &g130, 11, &g271);
    int32_t result = function_304f0(&g420, 127, &g130, 1, &g272); // 0x194b0
    g4 = result;
    g420 = &g141;
    return result;
}

// Address range: 0x194d0 - 0x1950c
int32_t function_194d0(void) {
    // 0x194d0
    g434 = 0;
    g435 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g430 = 0;
    *(char *)&g431 = 0;
    *(char *)&g432 = 0;
    *(char *)&g433 = 0;
    g436 = 0x7f7fffff;
    g437 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19510 - 0x1954c
int32_t function_19510(void) {
    // 0x19510
    g442 = 0;
    g443 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g438 = 0;
    *(char *)&g439 = 0;
    *(char *)&g440 = 0;
    *(char *)&g441 = 0;
    g444 = 0x7f7fffff;
    g445 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19550 - 0x19571
int32_t function_19550(void) {
    // 0x19550
    *(char *)&g446 = 0;
    *(char *)&g447 = 0;
    *(char *)&g448 = 0;
    *(char *)&g449 = 0;
    return g4;
}

// Address range: 0x19580 - 0x195a1
int32_t function_19580(void) {
    // 0x19580
    *(char *)&g459 = 0;
    *(char *)&g460 = 0;
    *(char *)&g461 = 0;
    *(char *)&g462 = 0;
    return g4;
}

// Address range: 0x19675 - 0x19693
int32_t function_19675(void) {
    int32_t result = function_62000(&g466, 0x357f0, "MATCHFRAMEWORK_001"); // 0x1968c
    g4 = result;
    return result;
}

// Address range: 0x19732 - 0x19735
int32_t function_19732(void) {
    // 0x19732
    g7--;
    return g4;
}

// Address range: 0x19883 - 0x19886
int32_t function_19883(void) {
    // 0x19883
    g7--;
    return g4;
}

// Address range: 0x1993e - 0x19952
int32_t function_1993e(int32_t a1) {
    int32_t v1 = g4; // 0x1993e
    unsigned char v2 = (char)v1 | 2; // 0x1993e
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x1993e
    g4 = v3;
    char * v4 = (char *)v3; // 0x19940
    *v4 = *v4 + v2;
    uint32_t v5 = g6; // 0x19942
    int32_t v6 = g4; // 0x19942
    char v7 = v6; // 0x19942
    unsigned char v8 = (char)(v5 / 256) + v7; // 0x19942
    g6 = 256 * (int32_t)v8 | v5 & -0xff01;
    unsigned char v9 = v7 & 8; // 0x19945
    int32_t v10 = (int32_t)v9 | v6 & -256; // 0x19945
    g4 = v10;
    g9--;
    int32_t v11 = g7; // 0x19948
    g7 = (int32_t)(*(char *)v10 + (char)v11) | v11 & -256;
    g6 = v5 & -0xff01 | 256 * (int32_t)(v8 + v9);
    int32_t result = v6 & -256; // 0x1994d
    g4 = result;
    return result;
}

// Address range: 0x199a2 - 0x199a5
int32_t function_199a2(void) {
    // 0x199a2
    g7--;
    return g4;
}

// Address range: 0x19a40 - 0x19a43
int32_t function_19a40(void) {
    // 0x19a40
    g7--;
    return g4;
}

// Address range: 0x19b4e - 0x19b60
int32_t function_19b4e(void) {
    int32_t v1 = g4; // 0x19b4e
    unsigned char v2 = (char)v1 | -44; // 0x19b4e
    int32_t v3 = v1 & -256; // 0x19b4e
    int32_t v4 = (int32_t)v2 | v3; // 0x19b4e
    g4 = v4;
    int32_t v5 = g7; // 0x19b50
    g7 = (int32_t)((char)v5 + *(char *)v4) | v5 & -256;
    uint32_t v6 = g6; // 0x19b52
    unsigned char v7 = (char)(v6 / 256) + v2; // 0x19b52
    int32_t v8 = v6 & -0xff01; // 0x19b52
    int32_t v9 = 256 * (int32_t)v7 | v8; // 0x19b52
    g6 = v9;
    g4 = v1 & -248;
    char v10 = *(char *)v9; // 0x19b58
    g6 = 256 * (int32_t)(v10 + v7) | v8;
    int32_t result = (int32_t)(v10 & 4) | v3; // 0x19b5d
    g4 = result;
    return result;
}

// Address range: 0x19b8a - 0x19b8d
int32_t function_19b8a(void) {
    // 0x19b8a
    g7--;
    return g4;
}

// Address range: 0x19b90 - 0x19bfa
int32_t function_19b90(void) {
    // 0x19b90
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g480 = 0;
    *(char *)&g481 = 0;
    *(char *)&g482 = 0;
    *(char *)&g483 = 0;
    g484 = 0;
    g485 = 0;
    g486 = 0x7f7fffff;
    g487 = 0x7f7fffff;
    g488 = 0;
    g489 = 0;
    g490 = 0;
    g491 = 0;
    g492 = 0x7f7fffff;
    g493 = 0x7f7fffff;
    g494 = 0x7f7fffff;
    g495 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19c00 - 0x19c6a
int32_t function_19c00(void) {
    // 0x19c00
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g496 = 0;
    *(char *)&g497 = 0;
    *(char *)&g498 = 0;
    *(char *)&g499 = 0;
    g500 = 0;
    g501 = 0;
    g502 = 0x7f7fffff;
    g503 = 0x7f7fffff;
    g504 = 0;
    g505 = 0;
    g506 = 0;
    g507 = 0;
    g508 = 0x7f7fffff;
    g509 = 0x7f7fffff;
    g510 = 0x7f7fffff;
    g511 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19c70 - 0x19cda
int32_t function_19c70(void) {
    // 0x19c70
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g512 = 0;
    *(char *)&g513 = 0;
    *(char *)&g514 = 0;
    *(char *)&g515 = 0;
    g516 = 0;
    g517 = 0;
    g518 = 0x7f7fffff;
    g519 = 0x7f7fffff;
    g520 = 0;
    g521 = 0;
    g522 = 0;
    g523 = 0;
    g524 = 0x7f7fffff;
    g525 = 0x7f7fffff;
    g526 = 0x7f7fffff;
    g527 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x19dcd - 0x19dee
int32_t function_19dcd(void) {
    int32_t v1 = g4; // 0x19dcd
    unsigned char v2 = (char)v1 & -32; // 0x19dcd
    int32_t v3 = v1 & -256; // 0x19dcd
    g4 = (int32_t)v2 | v3;
    if (v2 == 0) {
        // 0x19dd1
        g4 = (int32_t)((char)(g7 / 256) + v2) | v3;
        int32_t result = function_c701a020(); // 0x19dd3
        g4 = result;
        return result;
    }
    unsigned char v4 = *(char *)-0x38fff5ce & 4; // 0x19de1
    int32_t v5 = (int32_t)v4 | v3; // 0x19de1
    g4 = v5;
    int32_t v6 = g7 - 1; // 0x19de3
    g7 = v6;
    int32_t v7; // 0x19de3
    if (v4 != 0 && v6 != 0) {
        // bb
        v7 = function_19e5a();
        g4 = v7;
    } else {
        v7 = v5;
    }
    char v8 = *(char *)v7; // 0x19de5
    int32_t result2 = (int32_t)((char)v7 | v8) | v7 & -256; // 0x19de5
    g4 = result2;
    return result2;
}

// Address range: 0x19df2 - 0x19df5
int32_t function_19df2(void) {
    // 0x19df2
    g7--;
    return g4;
}

// Address range: 0x19e5a - 0x19eaf
int32_t function_19e5a(void) {
    int32_t v1 = g4; // 0x19e5a
    unsigned char v2 = (char)v1 | 2; // 0x19e5a
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x19e5a
    g4 = v3;
    char * v4 = (char *)v3; // 0x19e5c
    *v4 = *v4 + v2;
    int32_t v5 = g6; // 0x19e5e
    int32_t v6 = g4; // 0x19e5e
    g6 = 256 * v6 + v5 & 0xff00 | v5 & -0xff01;
    int32_t v7 = v6 & -248; // 0x19e61
    g4 = v7;
    *(int16_t *)(g7 + v7) = g14;
    int32_t v8 = g6; // 0x19e66
    int32_t v9 = g4; // 0x19e66
    g6 = 256 * v9 + v8 & 0xff00 | v8 & -0xff01;
    g4 = v9 & -256 | 36;
    char * v10 = (char *)(g8 + 10); // 0x19e72
    *v10 = (char)(g9 / 256) + *v10;
    uint32_t v11 = g9; // 0x19e75
    int32_t v12 = g4; // 0x19e75
    int32_t v13 = v11 / 256 + (int32_t)&g536 + (int32_t)&g536 + (int32_t)&g537 + (int32_t)&g536 + (int32_t)&g537 + (int32_t)&g538 + 4 * v12; // 0x19e8a
    g9 = 256 * v13 & 0xff00 | v11 & -0xff01;
    int32_t v14 = v12 + (int32_t)&g536 + (int32_t)&g537 + (int32_t)&g538 + (int32_t)&g539; // 0x19e8c
    int32_t v15 = v14 & -256; // 0x19e99
    g4 = g7 / 256 + v14 & 8 | v15;
    g4 = (int32_t)(*(char *)-0x38fff5ce & 4) | v15;
    char * v16 = (char *)(g8 + 10); // 0x19ea3
    *v16 = (char)v13 + *v16;
    int32_t v17 = g6; // 0x19ea6
    int32_t v18 = g4; // 0x19ea6
    g6 = 256 * v18 + v17 & 0xff00 | v17 & -0xff01;
    g4 = v18 + 36 & 255 | v18 & -256;
    char * v19 = (char *)(g9 + 2); // 0x19eaa
    unsigned char v20 = *v19; // 0x19eaa
    *v19 = v20 / 128 | 2 * v20;
    int32_t v21 = g4; // 0x19ead
    int32_t result = g7 / 256 + v21 & 255 | v21 & -256; // 0x19ead
    g4 = result;
    return result;
}

// Address range: 0x19f42 - 0x19f45
int32_t function_19f42(void) {
    // 0x19f42
    g7--;
    return g4;
}

// Address range: 0x1a1e8 - 0x1a1eb
int32_t function_1a1e8(void) {
    // 0x1a1e8
    g7--;
    return g4;
}

// Address range: 0x1a25e - 0x1a288
int32_t function_1a25e(void) {
    uint32_t v1 = g6; // 0x1a25e
    int32_t v2 = g4; // 0x1a25e
    unsigned char v3 = (char)(v1 / 256) + (char)v2; // 0x1a25e
    int32_t v4 = 256 * (int32_t)v3 | v1 & -0xff01; // 0x1a25e
    g6 = v4;
    g4 = v2 + 36 & 255 | v2 & -256;
    char * v5 = (char *)(v4 + 10); // 0x1a262
    *v5 = *v5 & v3;
    uint32_t v6 = g9; // 0x1a265
    int32_t v7 = g4; // 0x1a265
    g9 = 256 * (v6 / 256 + (int32_t)&g552 + (int32_t)&g552 + (int32_t)&g553 + (int32_t)&g552 + (int32_t)&g553 + (int32_t)&g554 + 4 * v7) & 0xff00 | v6 & -0xff01;
    int32_t v8 = v7 + (int32_t)&g552 + (int32_t)&g553 + (int32_t)&g554 + (int32_t)&g555; // 0x1a27c
    g4 = g7 / 256 + v8 & 255 | v8 & -256;
    int32_t result = function_c701a32d(); // 0x1a283
    g4 = result;
    return result;
}

// Address range: 0x1a35a - 0x1a35d
int32_t function_1a35a(void) {
    // 0x1a35a
    g7--;
    return g4;
}

// Address range: 0x1a466 - 0x1a49f
int32_t function_1a466(void) {
    int32_t v1 = g4; // 0x1a466
    unsigned char v2 = (char)v1 | 2; // 0x1a466
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x1a466
    g4 = v3;
    char * v4 = (char *)v3; // 0x1a468
    *v4 = *v4 + v2;
    int32_t v5 = g6; // 0x1a46a
    int32_t v6 = g4; // 0x1a46a
    g6 = 256 * v6 + v5 & 0xff00 | v5 & -0xff01;
    int32_t v7 = v6 & -248; // 0x1a46d
    g4 = v7;
    int16_t v8; // fs
    *(int16_t *)(g7 + v7) = v8;
    int32_t v9 = g6; // 0x1a472
    int32_t v10 = g4; // 0x1a472
    g6 = 256 * v10 + v9 & 0xff00 | v9 & -0xff01;
    int32_t v11 = v10 & -252; // 0x1a475
    g4 = v11;
    int16_t v12; // cs
    *(int16_t *)(v11 | 8) = v12;
    int32_t v13 = g6; // 0x1a47a
    int32_t v14 = g4; // 0x1a47a
    char v15 = v14; // 0x1a47a
    int32_t v16 = 256 * v14 + v13 & 0xff00 | v13 & -0xff01; // 0x1a47a
    g6 = v16;
    char v17 = v15 + 36; // 0x1a47c
    int32_t v18 = v14 & -256; // 0x1a47c
    int32_t v19 = (int32_t)v17 | v18; // 0x1a47c
    g4 = v19;
    uint32_t v20 = g7; // 0x1a47e
    if (v17 < 0 != (v17 & (v15 ^ -128)) < 0) {
        // 0x1a481
        g4 = (int32_t)((char)(v20 / 256) + v17) | v18;
        int32_t v21; // ebp
        int32_t v22;
        int32_t result = function_c701a52b(g8, g10, v21, &v22, v16, g9, v20, v19); // 0x1a483
        g4 = result;
        return result;
    }
    // 0x1a496
    g4 = (int32_t)(*(char *)-0x38fff5ce & 4) | v18;
    int32_t v23 = function_1a4a0(); // 0x1a494
    int32_t v24 = g6;
    g6 = v24 + 256 * v23 & 0xff00 | v24 & -0xff01;
    g4 = v23 + 36 & 255 | v23 & -256;
    char * v25 = (char *)(g9 + 2); // 0x1a49a
    unsigned char v26 = *v25; // 0x1a49a
    *v25 = v26 / 128 | 2 * v26;
    int32_t v27 = g4; // 0x1a49d
    int32_t result2 = g7 / 256 + v27 & 255 | v27 & -256; // 0x1a49d
    g4 = result2;
    return result2;
}

// Address range: 0x1a4a0 - 0x1a4a1
int32_t function_1a4a0(void) {
    // 0x1a4a0
    return g4;
}

// Address range: 0x1a671 - 0x1a676
int32_t function_1a671(int32_t a1) {
    int32_t result = g4 & -48; // 0x1a671
    g4 = result;
    return result;
}

// Address range: 0x1a67a - 0x1a67d
int32_t function_1a67a(void) {
    // 0x1a67a
    g7--;
    return g4;
}

// Address range: 0x1a680 - 0x1a7c6
int32_t function_1a680(void) {
    // 0x1a680
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g585 = 0;
    *(char *)&g586 = 0;
    *(char *)&g587 = 0;
    *(char *)&g588 = 0;
    g589 = 0;
    g590 = 0;
    g591 = 0x7f7fffff;
    g592 = 0x7f7fffff;
    g593 = 0;
    g594 = 0;
    g595 = 0;
    g596 = 0;
    g597 = 0x7f7fffff;
    g598 = 0x7f7fffff;
    g599 = 0x7f7fffff;
    g600 = 0x7f7fffff;
    g563 = 0;
    g564 = 0;
    g565 = 0;
    g566 = 0;
    g567 = 0;
    g568 = 0;
    g569 = 0;
    g570 = 0;
    g571 = 0;
    g572 = 0;
    g574 = 0;
    g573 = 0;
    g579 = 0;
    g575 = 0;
    g576 = 0;
    g577 = 0;
    g578 = 0;
    g580 = 0;
    g581 = 0;
    g582 = 0;
    g583 = 0;
    g584 = 0;
    return 0x7f7fffff;
}

// Address range: 0x1a7d0 - 0x1a844
int32_t function_1a7d0(void) {
    // 0x1a7d0
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g602 = 0;
    *(char *)&g603 = 0;
    *(char *)&g604 = 0;
    *(char *)&g605 = 0;
    g606 = 0;
    g607 = 0;
    g608 = 0x7f7fffff;
    g609 = 0x7f7fffff;
    g610 = 0;
    g611 = 0;
    g612 = 0;
    g613 = 0;
    g614 = 0x7f7fffff;
    g615 = 0x7f7fffff;
    g616 = 0x7f7fffff;
    g617 = 0x7f7fffff;
    g601 = 0;
    return 0x7f7fffff;
}

// Address range: 0x1a9fa - 0x1a9fd
int32_t function_1a9fa(void) {
    // 0x1a9fa
    g7--;
    return g4;
}

// Address range: 0x1ab8a - 0x1ab90
int32_t function_1ab8a(void) {
    // 0x1ab8a
    g8++;
    int32_t result = g4 & -240; // 0x1ab8d
    g4 = result;
    return result;
}

// Address range: 0x1ac92 - 0x1ac95
int32_t function_1ac92(void) {
    // 0x1ac92
    g7--;
    return g4;
}

// Address range: 0x1aead - 0x1aeb8
int32_t function_1aead(void) {
    // 0x1aead
    g4 = g7 / 256 % 256 | g4 & -256;
    int32_t result = function_c701af50(); // 0x1aeb3
    g4 = result;
    return result;
}

// Address range: 0x1af12 - 0x1af15
int32_t function_1af12(void) {
    // 0x1af12
    g7--;
    return g4;
}

// Address range: 0x1afb2 - 0x1afb5
int32_t function_1afb2(void) {
    // 0x1afb2
    g7--;
    return g4;
}

// Address range: 0x1afc0 - 0x1b054
int32_t function_1afc0(void) {
    // 0x1afc0
    g4 = 0;
    g640 = 0x7f7fffff;
    g641 = 0x7f7fffff;
    g646 = 0x7f7fffff;
    g647 = 0x7f7fffff;
    g648 = 0x7f7fffff;
    g649 = 0x7f7fffff;
    g9 = 0x42000000;
    *(char *)&g634 = 0;
    *(char *)&g635 = 0;
    *(char *)&g636 = 0;
    *(char *)&g637 = 0;
    g638 = 0;
    g639 = 0;
    g642 = 0;
    g643 = 0;
    g644 = 0;
    g645 = 0;
    g629 = 50;
    g630 = 50;
    g631 = 0x42000000;
    g632 = 0x42000000;
    g633 = 0;
    return 0;
}

// Address range: 0x1b0f0 - 0x1b0f3
int32_t function_1b0f0(void) {
    // 0x1b0f0
    g7--;
    return g4;
}

// Address range: 0x1b22a - 0x1b22d
int32_t function_1b22a(void) {
    // 0x1b22a
    g7--;
    return g4;
}

// Address range: 0x1b312 - 0x1b315
int32_t function_1b312(void) {
    // 0x1b312
    g7--;
    return g4;
}

// Address range: 0x1b3b2 - 0x1b3b5
int32_t function_1b3b2(void) {
    // 0x1b3b2
    g7--;
    return g4;
}

// Address range: 0x1b592 - 0x1b595
int32_t function_1b592(void) {
    // 0x1b592
    g7--;
    return g4;
}

// Address range: 0x1b652 - 0x1b655
int32_t function_1b652(void) {
    // 0x1b652
    g7--;
    return g4;
}

// Address range: 0x1b660 - 0x1b71d
int32_t function_1b660(void) {
    // 0x1b660
    g7 = 0;
    int32_t v1 = g10; // 0x1b665
    g10 = 0;
    int32_t v2 = g6; // 0x1b668
    *(char *)&g676 = 0;
    *(char *)&g677 = 0;
    *(char *)&g678 = 0;
    *(char *)&g679 = 0;
    g680 = 0;
    g681 = 0;
    g682 = 0x7f7fffff;
    g683 = 0x7f7fffff;
    int32_t v3 = 0; // 0x1b6c36
    int32_t v4 = 0; // 0x1b6b0
    while (true) {
        // 0x1b6b0
        g4 = 0;
        int32_t v5 = *(int32_t *)(4 * v4 + (int32_t)&g299) - 1; // 0x1b6b9
        g6 = v5;
        int32_t v6 = v3; // 0x1b6c3
        int32_t v7 = v4; // 0x1b6c0
        int32_t v8 = 0; // 0x1b6c0
        int32_t v9;
        while (true) {
            // 0x1b6c0
            g9 = v8 + v7;
            *(int32_t *)(v6 + (int32_t)&g665 + 4 * v8) = v5;
            uint32_t v10 = g9; // 0x1b6ca
            if (v10 < 32) {
                int32_t v11 = g6 | -*(int32_t *)(4 * v10 + (int32_t)&g299); // 0x1b6d8
                g9 = v11;
                *(int32_t *)(g7 + (int32_t)&g665 + 4 * g4) = v11;
            }
            int32_t v12 = g4; // 0x1b6e1
            int32_t v13 = v12 + 1; // 0x1b6e1
            g4 = v13;
            v9 = g10;
            if (v12 == 32) {
                // break -> 0x1b6e9
                break;
            }
            // 0x1b6e1
            v6 = g7;
            v5 = g6;
            v7 = v9;
            v8 = v13;
        }
        int32_t v14 = v9 + 1; // 0x1b6e9
        g10 = v14;
        int32_t v15 = g7 + 132; // 0x1b6ec
        g7 = v15;
        if (v9 == 31) {
            // break -> 0x1b6f7
            break;
        }
        v3 = v15;
        v4 = v14;
    }
    // 0x1b6f7
    g4 = 0;
    int32_t v16 = 0; // 0x1b700
    int32_t v17 = *(int32_t *)(v16 + (int32_t)&g299) - 1; // 0x1b707
    g9 = v17;
    *(int32_t *)(v16 + (int32_t)&g656) = v17;
    int32_t v18 = g4; // 0x1b711
    int32_t result = v18 + 1; // 0x1b711
    g4 = result;
    while (v18 != 31) {
        // 0x1b700
        v16 = 4 * result;
        v17 = *(int32_t *)(v16 + (int32_t)&g299) - 1;
        g9 = v17;
        *(int32_t *)(v16 + (int32_t)&g656) = v17;
        v18 = g4;
        result = v18 + 1;
        g4 = result;
    }
    // 0x1b719
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x1b720 - 0x1b741
int32_t function_1b720(void) {
    // 0x1b720
    *(char *)&g685 = 0;
    *(char *)&g686 = 0;
    *(char *)&g687 = 0;
    *(char *)&g688 = 0;
    return g4;
}

// Address range: 0x1b750 - 0x1b78c
int32_t function_1b750(void) {
    // 0x1b750
    g693 = 0;
    g694 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g689 = 0;
    *(char *)&g690 = 0;
    *(char *)&g691 = 0;
    *(char *)&g692 = 0;
    g695 = 0x7f7fffff;
    g696 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1b790 - 0x1b7cc
int32_t function_1b790(void) {
    // 0x1b790
    g701 = 0;
    g702 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g697 = 0;
    *(char *)&g698 = 0;
    *(char *)&g699 = 0;
    *(char *)&g700 = 0;
    g703 = 0x7f7fffff;
    g704 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1b7d0 - 0x1b80c
int32_t function_1b7d0(void) {
    // 0x1b7d0
    g709 = 0;
    g710 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g705 = 0;
    *(char *)&g706 = 0;
    *(char *)&g707 = 0;
    *(char *)&g708 = 0;
    g711 = 0x7f7fffff;
    g712 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1b81a - 0x1b81d
int32_t function_1b81a(void) {
    // 0x1b81a
    return g4;
}

// Address range: 0x1b81f - 0x1b822
int32_t function_1b81f(void) {
    // 0x1b81f
    return g4;
}

// Address range: 0x1b832 - 0x1b837
int32_t function_1b832(void) {
    int32_t v1 = g4; // 0x1b832
    int32_t result = v1 + 60 & 255 | v1 & -256; // 0x1b832
    g4 = result;
    return result;
}

// Address range: 0x1b839 - 0x1b844
int32_t function_1b839(void) {
    // 0x1b839
    g4 &= -208;
    int32_t v1 = g10; // 0x1b83b
    *(int32_t *)v1 = v1 + 0x2505c600;
    return g4;
}

// Address range: 0x1b847 - 0x1b84b
int32_t function_1b847(void) {
    // 0x1b847
    return g4;
}

// Address range: 0x1b84e - 0x1b852
int32_t function_1b84e(void) {
    int32_t v1 = g4; // 0x1b84e
    unsigned char v2 = (char)v1; // 0x1b84e
    bool v3; // cf
    bool v4 = v2 > 153 | v3; // 0x1b84e
    bool v5; // az
    int32_t result;
    if (v5 || (v2 & 14) > 9) {
        // bb
        result = (v4 ? 102 : 6) + v1 & 255 | v1 & -256;
    } else {
        // bb229
        result = (v4 ? v1 + 96 : v1) & 255 | v1 & -256;
    }
    // bb230
    g4 = result;
    return result;
}

// Address range: 0x1b856 - 0x1b859
int32_t function_1b856(void) {
    // 0x1b856
    return g4;
}

// Address range: 0x1b85c - 0x1b85f
int32_t function_1b85c(void) {
    // 0x1b85c
    return g4;
}

// Address range: 0x1b861 - 0x1b864
int32_t function_1b861(void) {
    // 0x1b861
    return g4;
}

// Address range: 0x1b868 - 0x1b86b
int32_t function_1b868(void) {
    // 0x1b868
    g7--;
    return g4;
}

// Address range: 0x1b870 - 0x1b8ac
int32_t function_1b870(void) {
    // 0x1b870
    g720 = 0;
    g721 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g716 = 0;
    *(char *)&g717 = 0;
    *(char *)&g718 = 0;
    *(char *)&g719 = 0;
    g722 = 0x7f7fffff;
    g723 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1b8b0 - 0x1b937
int32_t function_1b8b0(void) {
    // 0x1b8b0
    g4 = 0;
    g9 = 0x7f7fffff;
    *(char *)&g741 = 0;
    *(char *)&g742 = 0;
    *(char *)&g743 = 0;
    *(char *)&g744 = 0;
    g745 = 0;
    g746 = 0;
    g747 = 0x7f7fffff;
    g748 = 0x7f7fffff;
    g736 = 0;
    g737 = 0;
    g738 = 0;
    g733 = 0;
    g734 = 0;
    g735 = 0;
    g729 = 0;
    g730 = 0;
    g731 = 0;
    g732 = 0x3f800000;
    g726 = 0x7f7fffff;
    g727 = 0x7f7fffff;
    g728 = 0x7f7fffff;
    return 0;
}

// Address range: 0x1b940 - 0x1b97c
int32_t function_1b940(void) {
    // 0x1b940
    g760 = 0;
    g761 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g756 = 0;
    *(char *)&g757 = 0;
    *(char *)&g758 = 0;
    *(char *)&g759 = 0;
    g762 = 0x7f7fffff;
    g763 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1b980 - 0x1b9bc
int32_t function_1b980(void) {
    // 0x1b980
    g768 = 0;
    g769 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g764 = 0;
    *(char *)&g765 = 0;
    *(char *)&g766 = 0;
    *(char *)&g767 = 0;
    g770 = 0x7f7fffff;
    g771 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1b9c0 - 0x1b9fc
int32_t function_1b9c0(void) {
    // 0x1b9c0
    g783 = 0;
    g784 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g779 = 0;
    *(char *)&g780 = 0;
    *(char *)&g781 = 0;
    *(char *)&g782 = 0;
    g785 = 0x7f7fffff;
    g786 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1ba00 - 0x1ba6a
int32_t function_1ba00(void) {
    // 0x1ba00
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g790 = 0;
    *(char *)&g791 = 0;
    *(char *)&g792 = 0;
    *(char *)&g793 = 0;
    g794 = 0;
    g795 = 0;
    g796 = 0x7f7fffff;
    g797 = 0x7f7fffff;
    g798 = 0;
    g799 = 0;
    g800 = 0;
    g801 = 0;
    g802 = 0x7f7fffff;
    g803 = 0x7f7fffff;
    g804 = 0x7f7fffff;
    g805 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1ba70 - 0x1baac
int32_t function_1ba70(void) {
    // 0x1ba70
    g811 = 0;
    g812 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g807 = 0;
    *(char *)&g808 = 0;
    *(char *)&g809 = 0;
    *(char *)&g810 = 0;
    g813 = 0x7f7fffff;
    g814 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1bab0 - 0x1bb1a
int32_t function_1bab0(void) {
    // 0x1bab0
    g9 = 0;
    g4 = 0x7f7fffff;
    *(char *)&g816 = 0;
    *(char *)&g817 = 0;
    *(char *)&g818 = 0;
    *(char *)&g819 = 0;
    g820 = 0;
    g821 = 0;
    g822 = 0x7f7fffff;
    g823 = 0x7f7fffff;
    g824 = 0;
    g825 = 0;
    g826 = 0;
    g827 = 0;
    g828 = 0x7f7fffff;
    g829 = 0x7f7fffff;
    g830 = 0x7f7fffff;
    g831 = 0x7f7fffff;
    return 0x7f7fffff;
}

// Address range: 0x1bb1c - 0x1bb8b
int32_t function_1bb1c(int32_t a1) {
    int32_t v1 = g10; // 0x1bb1f
    int32_t v2 = g6; // 0x1bb20
    int32_t result = function_1bbc2(v2); // 0x1bb21
    g4 = result;
    int32_t v3 = g6; // 0x1bb26
    int32_t v4 = v3 + (int32_t)&g231; // 0x1bb26
    g6 = v4;
    char v5 = *(char *)(v3 + (int32_t)&g231 + (int32_t)&g29); // 0x1bb2c
    if (v5 != 0) {
        // 0x1bb84
        g6 = v2;
        g10 = v1;
        return result;
    }
    // 0x1bb35
    int32_t v6; // 0x1bb4f
    if (*(int32_t *)(v3 + (int32_t)&g231 - 8) != 0) {
        // 0x1bb3e
        g4 = function_18f00(*(int32_t *)(v3 + (int32_t)&g231 + 72));
        v6 = g6;
    } else {
        v6 = v4;
    }
    // 0x1bb7d
    g9 = v6 - 316;
    g4 = 1;
    g10 = 0;
    g9 = *(int32_t *)(v6 + (int32_t)"sym");
    *(char *)(v6 + (int32_t)&g29) = 1;
    // 0x1bb84
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x1bb8b - 0x1bbc2
int32_t function_1bb8b(void) {
    int32_t v1 = g6; // 0x1bb8e
    int32_t result = function_1bbc2(v1); // 0x1bb8f
    g4 = result;
    int32_t v2 = g6; // 0x1bb94
    g6 = v2 + (int32_t)&g227;
    int32_t v3 = v2 + (int32_t)&g227 - 308; // 0x1bb9b
    if (*(int32_t *)v3 == 0) {
        // 0x1bbbd
        g6 = v1;
        return result;
    }
    int32_t result2 = *(int32_t *)(v2 + (int32_t)&g227 - 12); // 0x1bba4
    g4 = result2;
    if (result2 != 0) {
        // 0x1bbae
        g9 = v3;
    } else {
        result2 = 0;
    }
    // 0x1bbbd
    g6 = v1;
    return result2;
}

// Address range: 0x1bbc2 - 0x1bbc6
int32_t function_1bbc2(int32_t a1) {
    // 0x1bbc2
    g6 = a1;
    return g4;
}

// Address range: 0x1bbf0 - 0x1bbf3
int32_t function_1bbf0(void) {
    // 0x1bbf0
    g7--;
    return g4;
}

// Address range: 0x1bc00 - 0x1bc01
int32_t function_1bc00(int32_t a1) {
    // 0x1bc00
    return g4;
}

// Address range: 0x1bc40 - 0x1bc46
int32_t function_1bc40(void) {
    // 0x1bc40
    int32_t v1; // bp-4
    g5 = &v1;
    return g4;
}

// Address range: 0x1bc60 - 0x1bc66
int32_t function_1bc60(void) {
    // 0x1bc60
    int32_t v1; // bp-4
    int32_t v2 = &v1; // 0x1bc60
    g5 = v2;
    g865 = llvm_ctpop_i8((char)(v2 + 232)) % 2 == 0;
    return g4;
}

// Address range: 0x1bca0 - 0x1bca6
int32_t function_1bca0(int32_t a1) {
    // 0x1bca0
    int32_t v1; // bp-4
    g5 = &v1;
    return g4;
}

// Address range: 0x1bd57 - 0x1bd64
int32_t function_1bd57(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x7a27410); // 0x1bd57
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g10 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x1bd90 - 0x1bd97
int32_t function_1bd90(void) {
    // 0x1bd90
    g4 = 0;
    return 0;
}

// Address range: 0x1bdc0 - 0x1bdc7
int32_t function_1bdc0(void) {
    // 0x1bdc0
    g4 = 0;
    return 0;
}

// Address range: 0x1bdd0 - 0x1bdfc
int32_t function_1bdd0(int32_t a1) {
    int32_t v1 = a1 - 8; // 0x1bdd0
    g4 = v1;
    *(int32_t *)v1 = (int32_t)&g115;
    *(int32_t *)(g4 + 4) = (int32_t)&g116;
    *(int32_t *)(g4 + 8) = (int32_t)&g118;
    return g4;
}

// Address range: 0x1be00 - 0x1be26
int32_t function_1be00(int32_t a1) {
    int16_t * v1 = g286; // 0x1be0b
    int32_t result = (int32_t)v1; // 0x1be0b
    g4 = result;
    if (v1 != NULL) {
        // 0x1be12
        g7 = a1;
        g9 = *(int32_t *)v1;
        g7 = a1 + 8;
    }
    // 0x1be24
    return result;
}

// Address range: 0x1be30 - 0x1be73
int32_t function_1be30(void) {
    int32_t v1 = g313; // 0x1be36
    g9 = v1;
    int32_t result = g312; // 0x1be3c
    g4 = result;
    int32_t v2 = result | v1; // 0x1be43
    g7 = v2;
    if (v2 != 0) {
        // 0x1be71
        return result;
    }
    int32_t v3 = *(int32_t *)0xa4018; // 0x1be47
    g7 = v3;
    if (v3 == 0) {
        // 0x1be71
        return result;
    }
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x1be51
    g7 = v4;
    int32_t result2; // 0x1be58
    if (v4 != 0) {
        // 0x1be58
        result2 = *(int32_t *)v4;
        g4 = result2;
        g9 = 0;
        g313 = 0;
        g312 = result2;
    } else {
        result2 = result;
    }
    // 0x1be71
    return result2;
}

// Address range: 0x1be80 - 0x1be89
int32_t function_1be80(void) {
    // 0x1be80
    g4 = 0;
    g9 = 0;
    return 0;
}

// Address range: 0x1be90 - 0x1be9c
int32_t function_1be90(void) {
    // 0x1be90
    g4 = 31;
    g9 = 0;
    return 31;
}

// Address range: 0x1bea0 - 0x1bea5
int32_t function_1bea0(void) {
    // 0x1bea0
    return g4;
}

// Address range: 0x1beb0 - 0x1beba
int32_t function_1beb0(void) {
    // 0x1beb0
    g4 = 2;
    return 2;
}

// Address range: 0x1bec0 - 0x1bf1e
int32_t function_1bec0(void) {
    // 0x1bec0
    g4 = *(int32_t *)&g278;
    int32_t v1 = g10; // 0x1becb
    g10 = (int32_t)&g129;
    int32_t v2 = g6; // 0x1bed3
    int32_t v3 = *(int32_t *)&g280; // 0x1bed6
    g6 = v3;
    int32_t result; // 0x1bf12
    if (v3 != 0) {
        // 0x1bef1
        g4 = v3;
        g9 = v3;
        g10 = &g314;
        result = &g314;
    } else {
        result = (int32_t)&g129;
    }
    // 0x1bf12
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x1bf20 - 0x1bf45
int32_t function_1bf20(void) {
    // 0x1bf20
    g9 = (int32_t)g450;
    g4 = 0;
    int32_t result; // 0x1bf3b
    if (g450 != NULL) {
        // 0x1bf3b
        result = *(int32_t *)g450;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x1bf43
    return result;
}

// Address range: 0x1bf50 - 0x1bf6a
int32_t function_1bf50(int32_t a1) {
    // 0x1bf50
    g4 = 42;
    return 42;
}

// Address range: 0x1bf70 - 0x1c056
int32_t function_1bf70(int32_t a1) {
    int32_t v1 = g10; // 0x1bf73
    int32_t v2 = g6; // 0x1bf74
    g4 = *(int32_t *)&g278;
    int16_t * v3 = g286; // 0x1bf7d
    g6 = (int32_t)v3;
    if (v3 != NULL) {
        // 0x1bf88
        g10 = a1;
        g4 = *(int32_t *)v3;
        g10 = a1 + 8;
        g4 = *(int32_t *)v3;
        g4 = *(int32_t *)v3;
        g4 = *(int32_t *)v3;
        g4 = *(int32_t *)v3;
        g4 = *(int32_t *)v3;
    }
    // 0x1c036
    function_229d0(&g477);
    g4 = 1;
    g6 = v2;
    g10 = v1;
    return 1;
}

// Address range: 0x1c060 - 0x1c090
int32_t function_1c060(int32_t a1) {
    int32_t v1 = a1 - 8; // 0x1c060
    g4 = v1;
    *(int32_t *)v1 = (int32_t)&g115;
    *(int32_t *)(g4 + 4) = (int32_t)&g116;
    *(int32_t *)(g4 + 8) = (int32_t)&g118;
    int32_t result = function_1bc40(); // 0x1c08b
    g4 = result;
    return result;
}

// Address range: 0x1c090 - 0x1c12b
int32_t function_1c090(void) {
    int32_t v1 = g8; // 0x1c096
    int32_t v2 = g4; // 0x1c099
    g8 = v2;
    int32_t v3 = (int32_t)g450; // 0x1c09b
    g4 = v3;
    int32_t v4 = g6; // 0x1c0a0
    g6 = 0;
    int32_t v5 = g10; // 0x1c0a5
    g9 = *(int32_t *)g450;
    int32_t result; // 0x1c11c
    if (g450 == NULL) {
        result = 0;
        // 0x1c11c
        g4 = result;
        g10 = v5;
        g6 = v4;
        g8 = v1;
        return result;
    }
    // 0x1c0b4
    g9 = *(int32_t *)g450;
    g10 = v3;
    int32_t v6 = function_27c00(v3, "system/network", (int32_t *)&g129); // 0x1c0d1
    g4 = v6;
    int32_t v7 = function_2cc30(v6, "LIVE"); // 0x1c0e1
    g4 = v7;
    if (v7 != 0) {
        // 0x1c0b4
        result = g6;
        // 0x1c11c
        g4 = result;
        g10 = v5;
        g6 = v4;
        g8 = v1;
        return result;
    }
    // 0x1c0ea
    g6 = 1;
    if (v2 != 0) {
        int32_t v8 = function_27c00(g10, "game/type", (int32_t *)&g129); // 0x1c106
        g4 = v8;
        int32_t v9 = function_2cc30(v8, (char *)v2); // 0x1c112
        g4 = v9;
        int32_t v10 = g6 & -256 | (int32_t)(v9 == 0); // 0x1c119
        g6 = v10;
        result = v10;
    } else {
        result = 1;
    }
    // 0x1c11c
    g4 = result;
    g10 = v5;
    g6 = v4;
    g8 = v1;
    return result;
}

// Address range: 0x1c147 - 0x1c148
int32_t function_1c147(void) {
    // 0x1c147
    return g4;
}

// Address range: 0x1c155 - 0x1c160
int32_t function_1c155(void) {
    int32_t v1 = g4; // 0x1c155
    *(char *)v1 = (char)v1 | *(char *)&g4;
    int32_t v2 = g4; // 0x1c157
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x1c159
    int32_t v4 = g4; // 0x1c159
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    g4 = v4 & -252;
    int32_t result = __asm_hlt(); // 0x1c15e
    g4 = result;
    return result;
}

// Address range: 0x1c182 - 0x1c1da
int32_t function_1c182(int32_t a1, int32_t a2) {
    // 0x1c182
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38968a40); // 0x1c182
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x1c188
    unsigned char v4 = (char)v3 + 36; // 0x1c188
    int32_t v5 = v3 & -256; // 0x1c188
    int32_t v6 = (int32_t)v4 | v5; // 0x1c188
    g4 = v6;
    int32_t v7 = g7 - 1; // 0x1c18a
    g7 = v7;
    char * v8 = (char *)v6; // 0x1c18c
    char v9 = *v8; // 0x1c18c
    if (v4 != 0 && v7 != 0) {
        // 0x1c1d1
        *v8 = v9 + v4;
        int32_t v10 = g6; // 0x1c1d3
        int32_t v11 = g4; // 0x1c1d3
        g6 = 256 * v11 + v10 & 0xff00 | v10 & -0xff01;
        g4 = v11 & -252;
        int32_t result = __asm_hlt(); // 0x1c1d8
        g4 = result;
        return result;
    }
    // 0x1c18c
    g4 = (int32_t)(v9 | v4) | v5;
    int32_t v12 = function_23bf0((int32_t)&g870); // 0x1c18e
    g4 = v12;
    if ((char)v12 != 0) {
        // 0x1c197
        g4 = g315;
        int32_t result2 = *(int32_t *)(g315 + 48); // 0x1c19c
        g4 = result2;
        if (result2 == 0) {
            // 0x1c1a3
            g6 = a1;
            return result2;
        }
    }
    int32_t result3 = (int32_t)g283; // 0x1c1b5
    g4 = result3;
    g9 = *(int32_t *)g283;
    if ((char)result3 == 0) {
        // 0x1c1a3
        g6 = a1;
        return result3;
    }
    int32_t result4 = g6; // 0x1c1c4
    g4 = result4;
    return result4;
}

// Address range: 0x1c1da - 0x1c1ea
int32_t function_1c1da(int16_t a1) {
    int32_t v1 = g7; // 0x1c1db
    char * v2 = (char *)(v1 - 0x6317dbfc); // 0x1c1db
    *v2 = *v2 + (char)v1;
    int32_t v3 = g4; // 0x1c1e1
    g4 = v3 & -0xff01;
    char * v4 = (char *)(g6 + 0x5d5b14c4); // 0x1c1e3
    *v4 = *v4 + (char)v3;
    return g4;
}

// Address range: 0x1c210 - 0x1c215
int32_t function_1c210(void) {
    // 0x1c210
    return g4;
}

// Address range: 0x1c216 - 0x1c217
int32_t function_1c216(void) {
    // 0x1c216
    return g4;
}

// Address range: 0x1c222 - 0x1c22d
int32_t function_1c222(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x2ce8241c); // 0x1c222
    *v1 = *v1 - 1;
    int32_t result = function_8d91c232(); // 0x1c228
    g4 = result;
    return result;
}

// Address range: 0x1c24f - 0x1c250
int32_t function_1c24f(void) {
    // 0x1c24f
    return g4;
}

// Address range: 0x1c266 - 0x1c28a
int32_t function_1c266(int32_t a1, int32_t a2) {
    // 0x1c266
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x74da8a40); // 0x1c266
    *v2 = *v2 + 1;
    int32_t v3 = g7; // 0x1c26c
    int32_t v4 = *(int32_t *)(v3 + 0x50ff241c) + v3; // 0x1c26c
    g7 = v4;
    char * v5 = (char *)(g6 + 0xa45c815); // 0x1c272
    *v5 = *v5 | (char)v4;
    char * v6 = (char *)(g6 + 0xc45890a); // 0x1c278
    *v6 = (char)g7 + *v6;
    *(int32_t *)(v1 + 8) = g9;
    int32_t result = *(int32_t *)g7; // 0x1c281
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x1c2b0 - 0x1c2b2
int32_t function_1c2b0(void) {
    // 0x1c2b0
    return g4;
}

// Address range: 0x1c2b8 - 0x1c2be
int32_t function_1c2b8(int32_t a1, int32_t a2) {
    // 0x1c2b8
    g6 = a1;
    return g4;
}

// Address range: 0x1c2bf - 0x1c2c0
int32_t function_1c2bf(void) {
    // 0x1c2bf
    return g4;
}

// Address range: 0x1c2cb - 0x1c2f6
int32_t function_1c2cb(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x7c17dbe4); // 0x1c2cb
    *v1 = *v1 - 1;
    int32_t v2 = unknown_b68ec2db(); // 0x1c2d1
    g4 = v2;
    char * v3 = (char *)v2; // 0x1c2d6
    *v3 = *v3 + (char)v2;
    int32_t v4 = g4; // 0x1c2d8
    char * v5 = (char *)v4; // 0x1c2d8
    *v5 = *v5 + (char)v4;
    int32_t v6; // ebp
    g5 = &v6;
    int32_t v7 = *(int32_t *)g4; // 0x1c2e6
    g4 = v7;
    int32_t result; // 0x1c2ef
    if (v7 != 0) {
        // 0x1c2ec
        result = function_28600(v7);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x1c2f4
    return result;
}

// Address range: 0x1c300 - 0x1c45d
int32_t function_1c300(int32_t a1) {
    int32_t v1 = g10; // 0x1c303
    int32_t v2 = g6; // bp-12
    g6 = a1;
    int32_t v3 = function_27c00(a1, "game/map", NULL); // 0x1c31e
    g4 = v3;
    if (v3 == 0) {
        // 0x1c410
        g6 = v2;
        g4 = 0;
        g10 = v1;
        return 0;
    }
    int32_t v4 = *(int32_t *)&g278; // 0x1c32b
    g9 = v4;
    int32_t v5 = *(int32_t *)(v4 + 96); // 0x1c331
    g9 = v5;
    if (v5 == 0) {
        // 0x1c410
        g6 = v2;
        g4 = 0;
        g10 = v1;
        return 0;
    }
    // 0x1c360
    g7 = *(int32_t *)v5;
    g10 = 0;
    int32_t v6 = (int32_t)g450; // 0x1c360
    g4 = v6;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g10 = v6;
    g4 = function_27920(v6, "map/mapcommand", "map");
    int32_t v7 = function_27c00(g6, "options/play", (int32_t *)&g129); // 0x1c3a9
    g4 = v7;
    g6 = v7;
    int32_t v8 = function_2cc30((int32_t)"commentary", (char *)v7); // 0x1c3bb
    g4 = v8;
    if (v8 == 0) {
        // 0x1c420
        g4 = function_27920(g10, "map/mapcommand", "map_commentary");
    } else {
        int32_t v9 = function_2cc30((int32_t)"challenge", (char *)g6); // 0x1c3cf
        g4 = v9;
        if (v9 == 0) {
            // 0x1c440
            g4 = function_27920(g10, "options/play", "challenge");
        }
    }
    // 0x1c3d8
    g9 = *(int32_t *)&g285;
    g4 = v6;
    g10 = 1;
    if (g450 == NULL) {
        // 0x1c34e
        g4 = 1;
        g6 = v2;
        g10 = v1;
        return 1;
    }
    // 0x1c3ff
    function_28600(v6);
    int32_t result = g10; // 0x1c40a
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x1c45d - 0x1c5fe
int32_t function_1c45d(void) {
    int32_t v1 = g4; // 0x1c45d
    g6 = v1;
    g4 = g5 - 12;
    int32_t v2 = function_7ab57(v1, (int32_t)&g870); // 0x1c46a
    int32_t v3 = g8; // 0x1c473
    int32_t v4 = g10; // 0x1c474
    g10 = v2;
    int32_t v5 = g6; // 0x1c477
    int32_t result = (int32_t)g450; // 0x1c47b
    g4 = result;
    g9 = *(int32_t *)g450;
    if (g450 == NULL) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return result;
    }
    // 0x1c48c
    g9 = *(int32_t *)g450;
    g6 = result;
    int32_t v6 = function_27c00(result, "system/network", (int32_t *)&g129); // 0x1c4a9
    g4 = v6;
    int32_t result2 = function_2cc30(v6, "offline"); // 0x1c4b9
    g4 = result2;
    if (result2 != 0) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return result2;
    }
    int32_t v7 = function_27c00(g6, "game/mode", (int32_t *)&g129); // 0x1c4e3
    g4 = v7;
    int32_t result3 = function_2cc30(v7, "sp"); // 0x1c4f3
    g4 = result3;
    if (result3 != 0) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return result3;
    }
    int32_t v8 = (int32_t)g450; // 0x1c4fc
    g4 = v8;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g8 = v8;
    if (g450 == NULL) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return 0;
    }
    int32_t v9 = *(int32_t *)&g251; // 0x1c526
    g4 = v9;
    g6 = (int32_t)&g251;
    int32_t v10; // 0x1c559
    int32_t result4; // 0x1c550
    if (v9 != 0) {
        int32_t v11 = v9; // 0x1c54d
        while (true) {
            // 0x1c549
            result4 = function_2cc30(v11, (char *)g10);
            g4 = result4;
            int32_t v12 = g6; // 0x1c540
            if (result4 == 0) {
                v10 = v12;
                // break -> 0x1c559
                break;
            }
            int32_t v13 = v12 + 8; // 0x1c540
            g6 = v13;
            int32_t v14 = *(int32_t *)v13; // 0x1c543
            g4 = v14;
            if (v14 == 0) {
                result4 = 0;
                v10 = v13;
                // break -> 0x1c559
                break;
            }
            v11 = v14;
        }
    } else {
        result4 = v9;
        v10 = (int32_t)&g251;
    }
    int32_t v15 = *(int32_t *)(v10 + 4); // 0x1c559
    g10 = v15;
    if (v15 == 0) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return result4;
    }
    int32_t result5 = (int32_t)g450; // 0x1c564
    g4 = result5;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if (g450 == NULL) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return 0;
    }
    int32_t v16 = *(int32_t *)g450; // 0x1c581
    g9 = v16;
    g6 = result5;
    if (v16 == 0) {
        // 0x1c4c2
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return result5;
    }
    int32_t v17; // 0x1c5c0
    while (true) {
        int32_t result6 = function_2cc30(v16, "SP.progress"); // 0x1c5a5
        g4 = result6;
        v17 = g6;
        if (result6 == 0) {
            // break -> 0x1c5c0
            break;
        }
        int32_t v18 = v17 + 16; // 0x1c5ae
        g6 = v18;
        if (v18 == 0) {
            // 0x1c4c2
            g6 = v5;
            g10 = v4;
            g8 = v3;
            return result6;
        }
        int32_t v19 = *(int32_t *)v18; // 0x1c590
        g9 = v19;
        if (v19 == 0) {
            // 0x1c4c2
            g6 = v5;
            g10 = v4;
            g8 = v3;
            return result6;
        }
        v16 = v19;
    }
    // 0x1c5c0
    g9 = *(int32_t *)(v17 + 4);
    int32_t * v20 = (int32_t *)g8; // 0x1c5c3
    int32_t v21 = *v20; // 0x1c5c3
    g4 = v21;
    int32_t v22 = *(int32_t *)(v17 + 12); // 0x1c5cf
    g9 = v22;
    int32_t result7; // 0x1c5e1
    if (v15 > *(int32_t *)(v22 + v21)) {
        g9 = &v15;
        result7 = *v20;
        g4 = result7;
    } else {
        result7 = v21;
    }
    // 0x1c4c2
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result7;
}

// Address range: 0x1c600 - 0x1c61c
int32_t function_1c600(int32_t a1) {
    // 0x1c600
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g115;
    *(int32_t *)(g4 + 4) = (int32_t)&g116;
    *(int32_t *)(g4 + 8) = (int32_t)&g117;
    return g4;
}

// Address range: 0x1c620 - 0x1c93f
int32_t function_1c620(int32_t a1, int32_t a2) {
    int32_t result = (int32_t)g450; // 0x1c639
    g4 = result;
    int32_t v1 = g10; // 0x1c63e
    int32_t v2 = g6; // 0x1c641
    int32_t v3 = g8; // 0x1c644
    g9 = *(int32_t *)g450;
    g10 = result;
    if (g450 == NULL) {
        // 0x1c6f8
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return result;
    }
    int32_t v4 = *(int32_t *)g450; // 0x1c659
    g4 = v4;
    g8 = v4;
    int32_t v5 = function_27c00(v4, "server/server", (int32_t *)&g129); // 0x1c676
    g4 = v5;
    g6 = v5;
    int32_t result2 = function_27c00(g8, "system/lock", (int32_t *)&g129); // 0x1c690
    g4 = result2;
    if (v5 == 0) {
        goto lab_0x1c69e;
    } else {
        // 0x1c699
        if (*(char *)v5 != 0) {
            goto lab_0x1c6a7;
        } else {
            goto lab_0x1c69e;
        }
    }
  lab_0x1c69e:
    if (result2 == 0) {
        // 0x1c6f8
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return 0;
    }
    // 0x1c6a2
    if (*(char *)result2 == 0) {
        // 0x1c6f8
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return result2;
    }
    goto lab_0x1c6a7;
  lab_0x1c6a7:;
    int32_t v6 = *(int32_t *)g10; // 0x1c6a7
    g4 = v6;
    int32_t v7 = function_27c00(v6, "type", NULL); // 0x1c6c1
    g4 = v7;
    if (v7 != 0) {
        int32_t v8 = function_2cc30(v7, "client"); // 0x1c6d5
        g4 = v8;
        if (v8 == 0) {
            // 0x1c6f8
            g6 = v2;
            g10 = v1;
            g8 = v3;
            return 0;
        }
    }
    // 0x1c6de
    g9 = a2;
    int32_t * v9 = (int32_t *)a2; // 0x1c6e1
    int32_t result3 = *v9; // 0x1c6e1
    g4 = result3;
    g6 = result3;
    if (result3 == 0) {
        // 0x1c6f8
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return 0;
    }
    char * v10 = (char *)result3; // 0x1c6ef
    if (*v10 == 0) {
        // 0x1c6f8
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return result3;
    }
    int32_t v11 = function_2cc30((int32_t)"round_start", v10); // 0x1c713
    g4 = v11;
    int32_t result7; // 0x1c865
    if (v11 != 0) {
        int32_t v12 = function_2cc30((int32_t)"round_end", (char *)g6); // 0x1c76b
        g4 = v12;
        if (v12 == 0) {
            int32_t v13 = (int32_t)g450; // 0x1c774
            g4 = v13;
            g9 = *(int32_t *)g450;
            g6 = v13;
            int32_t v14 = *(int32_t *)g450; // 0x1c783
            g4 = v14;
            g8 = *(int32_t *)(v14 + 8);
            int32_t v15 = function_26cf0(); // 0x1c78f
            g4 = v15;
            g10 = v15;
            int32_t result4 = function_27a20(v15, "OnProfilesWriteOpportunity", "reason", "checkpoint"); // 0x1c7b1
            g4 = result4;
            // 0x1c6f8
            g6 = v2;
            g10 = v1;
            g8 = v3;
            return result4;
        }
        int32_t v16 = function_2cc30((int32_t)"finale_start", (char *)g6); // 0x1c7d3
        g4 = v16;
        if (v16 != 0) {
            int32_t v17 = function_2cc30((int32_t)"game_newmap", (char *)g6); // 0x1c824
            g4 = v17;
            if (v17 != 0) {
                int32_t result5 = function_2cc30((int32_t)"server_pre_shutdown", (char *)g6); // 0x1c8f8
                g4 = result5;
                if (result5 != 0) {
                    // 0x1c6f8
                    g6 = v2;
                    g10 = v1;
                    g8 = v3;
                    return result5;
                }
                // 0x1c905
                g7 = a2;
                int32_t v18 = *v9; // 0x1c908
                g4 = v18;
                int32_t result6 = function_2cc30(v18, "quit"); // 0x1c92b
                g4 = result6;
                if (result6 == 0) {
                    // 0x1c938
                    return result6;
                }
                // 0x1c6f8
                g6 = v2;
                g10 = v1;
                g8 = v3;
                return result6;
            }
            // 0x1c831
            g9 = a2;
            int32_t v19 = *v9; // 0x1c834
            g4 = v19;
            g6 = v19;
            result7 = function_2a500("update", " update {  game {  state game  }  } ");
            g4 = result7;
            if (v19 != 0) {
                // 0x1c877
                if (*(char *)v19 != 0) {
                    // bb
                    g4 = function_1c98b();
                }
            }
            // 0x1c880
            g9 = result7;
            int32_t v20 = (int32_t)g450; // 0x1c892
            g4 = v20;
            g9 = *(int32_t *)g450;
            g6 = v20;
            int32_t v21 = *(int32_t *)g450; // 0x1c8a1
            g4 = v21;
            g8 = *(int32_t *)(v21 + 8);
            int32_t v22 = function_26cf0(); // 0x1c8ad
            g4 = v22;
            g10 = v22;
            function_27a20(v22, "OnProfilesWriteOpportunity", "reason", "checkpoint");
            g4 = result7;
            if (result7 == 0) {
                // 0x1c6f8
                g6 = v2;
                g10 = v1;
                g8 = v3;
                return result7;
            }
        } else {
            int32_t v23 = *(int32_t *)g10; // 0x1c7dc
            g4 = v23;
            g6 = *(int32_t *)(v23 + 8);
            int32_t result8 = function_2a500("update", " update {  game {  state finale  }  } "); // 0x1c7f8
            g4 = result8;
            if (result8 == 0) {
                // 0x1c6f8
                g6 = v2;
                g10 = v1;
                g8 = v3;
                return result8;
            }
            result7 = result8;
        }
    } else {
        int32_t v24 = *(int32_t *)g10; // 0x1c71c
        g4 = v24;
        g6 = *(int32_t *)(v24 + 8);
        int32_t v25 = function_2a500("update", " update {  game {  state game  }  } "); // 0x1c738
        g4 = v25;
        if (v25 == 0) {
            // 0x1c6f8
            g6 = v2;
            g10 = v1;
            g8 = v3;
            return 0;
        }
        result7 = v25;
    }
    int32_t result9 = function_28600(result7); // 0x1c753
    g4 = result9;
    // 0x1c6f8
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return result9;
}

// Address range: 0x1c943 - 0x1c949
int32_t function_1c943(void) {
    // 0x1c943
    return g4;
}

// Address range: 0x1c949 - 0x1c98b
int32_t function_1c949(void) {
    int32_t v1 = g4; // 0x1c949
    g9 = v1;
    g6 = v1;
    g8 = *(int32_t *)(v1 + 8);
    int32_t v2 = function_26cf0(); // 0x1c95f
    g4 = v2;
    g10 = v2;
    int32_t result = function_27a20(v2, "OnEngineDisconnectReason", "reason", "Server shutting down"); // 0x1c981
    g4 = result;
    return result;
}

// Address range: 0x1c98b - 0x1cc51
int32_t function_1c98b(void) {
    // 0x1c98b
    function_27920(g4, "update/game/map", (char *)g6);
    g4 = g6;
    g4 = function_27c00(g8, "game/type", NULL);
    int32_t v1 = function_1c090(); // 0x1c9c6
    g4 = v1;
    int32_t v2; // 0x1c9db
    int32_t result; // 0x1c9ec
    if ((char)v1 != 0) {
        int32_t v3 = (int32_t)g450; // 0x1ca14
        g4 = v3;
        g9 = *(int32_t *)g450;
        g9 = *(int32_t *)g450;
        g9 = *(int32_t *)g450;
        *(int32_t *)(g5 - 608) = v3;
        if (g450 != NULL) {
            // 0x1ca42
            g7 = v3;
            int32_t v4 = *(int32_t *)g450; // 0x1ca44
            g4 = v4;
            *(int32_t *)(g5 - 612) = v4;
            *(int32_t *)(g5 - 616) = g9;
            int32_t v5 = function_27fc0(g8, "members/numMachines", 0); // 0x1ca6a
            g4 = v5;
            *(int32_t *)(g5 - 632) = v5;
            *(int32_t *)(g5 - 628) = 0;
            *(int32_t *)(g5 - 596) = 0;
            *(int32_t *)(g5 - 624) = 0;
            int32_t v6; // 0x1ca93
            while (true) {
                // 0x1ca93
                v6 = g5;
                uint32_t v7 = *(int32_t *)(v6 - 632); // 0x1ca93
                g4 = v7;
                uint32_t v8 = *(int32_t *)(v6 - 628); // 0x1ca99
                if (v8 >= v7) {
                    // break -> 0x1cc18
                    break;
                }
                // 0x1caa5
                g4 = v8;
                int32_t v9 = v6 - 572; // 0x1caab
                g9 = v9;
                g4 = function_1e010(v9, "members/machine%d");
                int32_t v10 = g5 - 567; // 0x1cac5
                g7 = v10;
                int32_t v11 = function_27340(g8, v10, 0); // 0x1cada
                g4 = v11;
                *(int32_t *)(g5 - 600) = v11;
                int32_t v12 = function_27fc0(g4, "numPlayers", 0); // 0x1caf8
                g4 = v12;
                *(int32_t *)(g5 - 604) = v12;
                int32_t v13; // 0x1cc0c
                if (v12 < 1) {
                    // 0x1caa5
                    v13 = g5;
                } else {
                    // 0x1cb0b
                    g6 = 0;
                    int32_t v14 = g5; // 0x1cb1f
                    while (true) {
                        int32_t v15 = v14 - 304; // 0x1cb1f
                        g4 = v15;
                        g4 = function_1e010(v15, "player%d");
                        int32_t v16 = g5; // 0x1cb39
                        int32_t v17 = *(int32_t *)(v16 - 600); // 0x1cb39
                        g4 = v17;
                        int32_t v18 = v16 - 299; // 0x1cb3f
                        g9 = v18;
                        int32_t v19 = function_27340(v17, v18, 0); // 0x1cb54
                        g4 = v19;
                        if (v19 != 0) {
                            int32_t * v20 = (int32_t *)(g5 - 596); // 0x1cb5d
                            *v20 = *v20 + 1;
                            int32_t v21 = function_27ea0(v19, "xuid", 0, 0); // 0x1cb7f
                            g4 = v21;
                            *(int32_t *)(g5 - 588) = v21;
                            int32_t v22 = g5; // 0x1cb8a
                            g4 = *(int32_t *)(v22 - 612);
                            *(int32_t *)(v22 - 592) = g9;
                            int32_t v23 = g5; // 0x1cb96
                            int32_t v24 = *(int32_t *)(v23 - 616); // 0x1cb96
                            g9 = v24;
                            int32_t * v25 = (int32_t *)(v23 - 588); // 0x1cb9c
                            int32_t v26 = *v25 ^ g4; // 0x1cb9c
                            g4 = v26;
                            int32_t * v27 = (int32_t *)(v23 - 592); // 0x1cba2
                            int32_t v28 = *v27 ^ v24 | v26; // 0x1cba8
                            g9 = v28;
                            if (v28 != 0) {
                                int32_t v29 = *(int32_t *)(v23 - 608); // 0x1cbb0
                                g9 = v29;
                                g4 = *(int32_t *)v29;
                                int32_t v30 = *v27; // 0x1cbbe
                                g9 = v30;
                                int32_t v31 = *v25 | v30; // 0x1cbc4
                                g9 = v31;
                                if (v31 != 0) {
                                    // 0x1cbd0
                                    g4 = g292;
                                    g7 = *v25;
                                    int32_t v32 = *(int32_t *)(g292 + 8); // 0x1cbdb
                                    g9 = v32;
                                    int32_t v33 = *(int32_t *)v32; // 0x1cbde
                                    g4 = v33;
                                    int32_t v34 = *(int32_t *)(v33 + 68); // 0x1cbe0
                                    g4 = v34;
                                    g7 = *v27;
                                    int32_t * v35 = (int32_t *)(v23 - 624); // 0x1cc00
                                    *v35 = *v35 - (int32_t)((char)v34 != 0);
                                }
                            }
                        }
                        int32_t v36 = g6 + 1; // 0x1cb10
                        g6 = v36;
                        int32_t v37 = g5; // 0x1cb13
                        if (v36 == *(int32_t *)(v37 - 604)) {
                            v13 = v37;
                            // break -> 0x1cc0c
                            break;
                        }
                        v14 = v37;
                    }
                }
                int32_t * v38 = (int32_t *)(v13 - 628); // 0x1cc0c
                *v38 = *v38 + 1;
            }
            int32_t * v39 = (int32_t *)(v6 - 596); // 0x1cc18
            if (*v39 != 0) {
                int32_t v40 = *(int32_t *)(v6 - 624); // 0x1cc25
                if (v40 != 0) {
                    // 0x1cc32
                    g4 = (int32_t)"friends";
                    int32_t v41 = v40 + 1; // 0x1cc3d
                    g9 = v41;
                    if (v41 == *v39) {
                        // 0x1c9d7
                        v2 = *(int32_t *)(v6 - 620);
                        g4 = v2;
                        result = function_27920(v2, "update/game/type", (char *)(int32_t)"friends");
                        g4 = result;
                        return result;
                    }
                }
            }
        }
    }
    // 0x1c9d2
    g4 = (int32_t)"default";
    // 0x1c9d7
    v2 = *(int32_t *)(g5 - 620);
    g4 = v2;
    result = function_27920(v2, "update/game/type", (char *)(int32_t)"default");
    g4 = result;
    return result;
}

// Address range: 0x1cc51 - 0x1de65
int32_t function_1cc51(int32_t a1, int32_t a2) {
    // 0x1cc51
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x1cc5e
    g6 = v1;
    g4 = g5 - 36;
    int32_t v2 = function_7ab57(v1, (int32_t)&g870); // 0x1cc70
    g6 = v2;
    g4 = g5 - 32;
    int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x1cc82
    g4 = v3;
    g6 = v3;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v4 = a1 - 4; // 0x1cca0
    int32_t v5 = g8; // 0x1ccb3
    int32_t v6 = g10; // 0x1ccb4
    int32_t v7 = g6; // bp-16
    g8 = a2;
    int32_t v8 = function_25190(a2); // 0x1ccc2
    g4 = v8;
    g6 = v8;
    int32_t v9 = function_2cc30((int32_t)"OnPlayerRemoved", (char *)v8); // 0x1ccd4
    g4 = v9;
    int32_t v10; // bp-32
    int32_t v11; // bp-64
    if (v9 != 0) {
        int32_t v12 = function_2cc30((int32_t)"OnPlayerUpdated", (char *)g6); // 0x1cd03
        g4 = v12;
        if (v12 == 0) {
            goto lab_0x1ccdd;
        } else {
            int32_t v13 = function_2cc30((int32_t)"OnPlayerMachinesConnected", (char *)g6); // 0x1cd17
            g4 = v13;
            if (v13 != 0) {
                int32_t v14 = function_2cc30((int32_t)"OnPlayerMachinesDisconnected", (char *)g6); // 0x1cdcb
                g4 = v14;
                if (v14 == 0) {
                    goto lab_0x1cd24;
                } else {
                    int32_t v15 = function_2cc30((int32_t)"OnProfileDataSaved", (char *)g6); // 0x1cde3
                    g4 = v15;
                    if (v15 != 0) {
                        int32_t v16 = function_2cc30((int32_t)"OnMatchSessionUpdate", (char *)g6); // 0x1d01b
                        g4 = v16;
                        int32_t result; // 0x1d082
                        if (v16 == 0) {
                            int32_t v17 = function_27c00(g8, "state", (int32_t *)&g129); // 0x1d037
                            g4 = v17;
                            int32_t v18 = function_2cc30(v17, "updated"); // 0x1d047
                            g4 = v18;
                            int32_t v19 = g8; // 0x1d3a0
                            if (v18 == 0) {
                                int32_t v20 = function_27340(v19, (int32_t)"update", 0); // 0x1d067
                                g4 = v20;
                                g6 = v20;
                                if (v20 != 0) {
                                    int32_t v21 = function_1bf20(); // 0x1d076
                                    g4 = v21;
                                    result = function_1fd10(v21, g6);
                                    g4 = result;
                                } else {
                                    result = 0;
                                }
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result;
                            }
                            int32_t v22 = function_27c00(v19, "state", (int32_t *)&g129); // 0x1d3a3
                            g4 = v22;
                            int32_t v23 = function_2cc30(v22, "created"); // 0x1d3b3
                            g4 = v23;
                            if (v23 != 0) {
                                int32_t v24 = function_27c00(g8, "state", (int32_t *)&g129); // 0x1d623
                                g4 = v24;
                                int32_t v25 = function_2cc30(v24, "ready"); // 0x1d633
                                g4 = v25;
                                if (v25 != 0) {
                                    int32_t v26 = function_27c00(g8, "state", (int32_t *)&g129); // 0x1d653
                                    g4 = v26;
                                    int32_t v27 = function_2cc30(v26, "closed"); // 0x1d663
                                    g4 = v27;
                                    if (v27 == 0) {
                                        int32_t v28 = function_1fd10(0, 0); // 0x1d67f
                                        g4 = v28;
                                        result = v28;
                                    } else {
                                        result = v27;
                                    }
                                    // 0x1ccea
                                    g6 = v7;
                                    g10 = v6;
                                    g8 = v5;
                                    return result;
                                }
                            }
                            int32_t v29 = function_1bf20(); // 0x1d3c0
                            g4 = v29;
                            int32_t result2 = function_1fd10(v29, 0); // 0x1d3d0
                            g4 = result2;
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result2;
                        }
                        int32_t v30 = function_2cc30((int32_t)"OnEngineClientSignonStateChange", (char *)g6); // 0x1d09b
                        g4 = v30;
                        if (v30 == 0) {
                            // 0x1d3e0
                            g4 = function_27fc0(g8, "slot", 0);
                            g4 = function_27fc0(g8, "old", 0);
                            int32_t result3 = function_27fc0(g8, "new", 0); // 0x1d423
                            g4 = result3;
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result3;
                        }
                        int32_t v31 = function_2cc30((int32_t)"OnEngineSplitscreenClientAdded", (char *)g6); // 0x1d0b3
                        g4 = v31;
                        if (v31 == 0) {
                            int32_t result4 = function_27fc0(g8, "slot", 0); // 0x1d440
                            g4 = result4;
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result4;
                        }
                        int32_t v32 = function_2cc30(g6, "OnPlayerAward"); // 0x1d0cb
                        g4 = v32;
                        if (v32 == 0) {
                            int32_t v33 = function_27fc0(g8, "iController", 0); // 0x1d0eb
                            int32_t v34 = (int32_t)g450; // 0x1d0f6
                            g4 = v34;
                            g9 = *(int32_t *)g450;
                            g9 = *(int32_t *)g450;
                            g7 = v33;
                            g9 = *(int32_t *)g450;
                            g6 = v34;
                            if (g450 == NULL) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            int32_t v35 = function_27c00(g8, "award", (int32_t *)&g129); // 0x1d139
                            g4 = v35;
                            g10 = v35;
                            int32_t v36 = function_2cc30(v35, "ACH.HI_FIVE_YOUR_PARTNER"); // 0x1d14b
                            g4 = v36;
                            if (v36 != 0) {
                                int32_t v37 = function_2cc30(g10, "ACH.SHOOT_THE_MOON"); // 0x1d72d
                                g4 = v37;
                                if (v37 == 0) {
                                    // 0x1d73a
                                    g4 = (int32_t)"sp_a5_credits";
                                    result = (int32_t)"sp_a5_credits";
                                } else {
                                    result = v37;
                                }
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result;
                            }
                            // 0x1d158
                            g4 = (int32_t)"friends";
                            int32_t result5 = function_1c090(); // 0x1d15d
                            g4 = result5;
                            if ((char)result5 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result5;
                            }
                            int32_t v38 = *(int32_t *)g6; // 0x1d16a
                            g4 = v38;
                            if (v38 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            // 0x1d182
                            int32_t v39; // bp-160
                            int32_t v40 = &v39; // 0x1d182
                            g9 = v40;
                            g10 = v38;
                            g7 = 24;
                            g8 = v40;
                            __asm_rep_movsd_memcpy((char *)&v39, (char *)v38, 24);
                            g8 = (g3 ? -96 : 96) + v40;
                            g7 = 0;
                            g10 = &v11;
                            char v41; // bp-156
                            v41 &= (char)&g860;
                            function_2cb00(&v11, 0, 20);
                            g4 = &v41;
                            int32_t v42 = function_2cb30(&v11, &v41, 20); // 0x1d1ca
                            g4 = v42;
                            if (v42 == 0) {
                                int32_t v43 = (int32_t)g283; // 0x1d1dc
                                g4 = v43;
                                g9 = *(int32_t *)g283;
                                g7 = v33;
                                g8 = v43;
                                g4 = v43;
                                g9 = *(int32_t *)g283;
                                int32_t v44 = function_26cf0(); // 0x1d210
                                g4 = v44;
                                g10 = v44;
                                g4 = function_26330(v44);
                                g4 = function_27920(g10, "award", "ACH.HI_FIVE_YOUR_PARTNER");
                                int32_t v45 = *(int32_t *)g6; // 0x1d23f
                                g4 = v45;
                                g4 = function_27600(g10, "xuid", v45, g9);
                                function_27680(g10, "newbie", 1);
                                int32_t v46 = (int32_t)g283; // 0x1d27b
                                g4 = v46;
                                g9 = *(int32_t *)g283;
                                g4 = v46;
                                g9 = *(int32_t *)g283;
                                result = v46;
                            } else {
                                result = v42;
                            }
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result;
                        }
                        int32_t v47 = function_2cc30(g6, "Client::CmdKeyValues"); // 0x1d455
                        g4 = v47;
                        int32_t v48; // bp-44
                        if (v47 != 0) {
                            int32_t result6 = function_2cc30(g6, "OnDowloadableContentInstalled"); // 0x1d694
                            g4 = result6;
                            if (result6 != 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result6;
                            }
                            int32_t result7 = (int32_t)g450; // 0x1d6a1
                            g4 = result7;
                            g9 = *(int32_t *)g450;
                            g6 = result7;
                            if (g450 == NULL) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result7;
                            }
                            int32_t result8 = (int32_t)g290; // 0x1d6b8
                            g4 = result8;
                            g9 = result8;
                            g10 = result8;
                            if (g290 == NULL) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result8;
                            }
                            int32_t v49 = *(int32_t *)g450; // 0x1d6d7
                            v48 = 0;
                            g6 = v49;
                            g4 = result8;
                            g7 = &v48;
                            function_1e0a0(v49, result8, result8, &v48);
                            int32_t v50 = v48; // 0x1d706
                            g4 = v50;
                            if (v50 != 0) {
                                int32_t v51 = function_1ee10(g6, v50); // 0x1d718
                                g4 = v51;
                                result = v51;
                            } else {
                                result = 0;
                            }
                          lab_0x1ccea:
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result;
                        }
                        int32_t v52 = function_26190(g8); // 0x1d465
                        g4 = v52;
                        g10 = v52;
                        if (v52 == 0) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return 0;
                        }
                        // 0x1d474
                        g8 = function_27fc0(g8, "slot", 0);
                        int32_t v53 = (int32_t)g450; // 0x1d48e
                        g4 = v53;
                        g9 = *(int32_t *)g450;
                        g9 = *(int32_t *)g450;
                        g9 = *(int32_t *)g450;
                        g6 = v53;
                        if (g450 == NULL) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return 0;
                        }
                        int32_t v54 = function_25190(g10); // 0x1d4bb
                        g4 = v54;
                        char * v55 = (char *)v54; // 0x1d4c7
                        int32_t v56 = function_2cc30((int32_t)"OnPlayerAward", v55); // 0x1d4d1
                        g4 = v56;
                        g9 = v54;
                        if (v56 != 0) {
                            int32_t v57 = function_2cc30((int32_t)"OnCoopBotTaunt", v55); // 0x1d75a
                            g4 = v57;
                            g9 = v54;
                            if (v57 == 0) {
                                int32_t v58 = function_27c00(g10, "taunt", (int32_t *)&g129); // 0x1d780
                                g4 = v58;
                                int32_t result9 = function_2cc30((int32_t)"teamhug", (char *)v58); // 0x1d790
                                g4 = result9;
                                if (result9 != 0) {
                                    // 0x1ccea
                                    g6 = v7;
                                    g10 = v6;
                                    g8 = v5;
                                    return result9;
                                }
                                // 0x1d79d
                                g4 = (int32_t)"friends";
                                int32_t v59 = function_1c090(); // 0x1d7a2
                                g4 = v59;
                                if ((char)v59 != 0) {
                                    int32_t v60 = (int32_t)g283; // 0x1d7b4
                                    g4 = v60;
                                    g9 = *(int32_t *)g283;
                                    g4 = v60;
                                    g9 = *(int32_t *)g283;
                                    int32_t v61 = function_26cf0(); // 0x1d7e6
                                    g4 = v61;
                                    g10 = v61;
                                    g4 = function_26330(v61);
                                    g4 = function_27920(g10, "award", "ACH.SPREAD_THE_LOVE");
                                    int32_t v62 = *(int32_t *)g6; // 0x1d815
                                    g4 = v62;
                                    g4 = function_27600(g10, "xuid", v62, g9);
                                    function_27680(g10, "hugged", 1);
                                    int32_t v63 = (int32_t)g283; // 0x1d851
                                    g4 = v63;
                                    g9 = *(int32_t *)g283;
                                    g10 = v60;
                                    g4 = v63;
                                    g9 = *(int32_t *)g283;
                                    result = v63;
                                } else {
                                    result = v59;
                                }
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result;
                            }
                            int32_t result10 = function_2cc30((int32_t)"OnSpeedRunCoopEvent", v55); // 0x1dab3
                            g4 = result10;
                            if (result10 != 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result10;
                            }
                            int32_t result11 = function_27c00(g10, "map", (int32_t *)&g129); // 0x1dad3
                            g4 = result11;
                            if (result11 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            // 0x1dae0
                            if (*(char *)result11 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result11;
                            }
                            // 0x1dae9
                            int32_t v64; // bp-1500
                            int32_t v65 = &v64; // 0x1daed
                            g4 = v65;
                            g4 = function_1e010(v65, "MP.complete.%s");
                            g8 = v4;
                            int32_t v66 = *(int32_t *)v4; // 0x1db06
                            g4 = v66;
                            int32_t v67; // bp-1495
                            g9 = &v67;
                            int32_t v68 = function_1dfb0(v66, &v67); // 0x1db1b
                            g4 = v68;
                            if (v68 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            uint16_t v69 = *(int16_t *)(v68 + 12); // 0x1db28
                            int32_t v70; // bp-428
                            int32_t v71 = &v70; // 0x1db43
                            g4 = v71;
                            function_1e010(v71, "%s[1]");
                            int32_t v72 = (int32_t)g450; // 0x1db51
                            g4 = v72;
                            int32_t v73; // bp-423
                            g9 = &v73;
                            int32_t v74 = function_1dfb0(v72, &v73); // 0x1db73
                            g4 = v74;
                            g10 = v74;
                            if (v74 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            // 0x1db82
                            g8 = 0;
                            int32_t * v75 = (int32_t *)g6; // 0x1db9e
                            int32_t v76 = 0; // 0x1db90
                            int32_t result12; // 0x1dbad
                            while (true) {
                                // 0x1db9b
                                g9 = *(int32_t *)(v74 + 4);
                                int32_t v77 = *v75; // 0x1db9e
                                g4 = v77;
                                int32_t v78 = *(int32_t *)(v74 + 12); // 0x1dbaa
                                g9 = v78;
                                uint16_t v79 = *(int16_t *)(v78 + v77); // 0x1dbad
                                result12 = v79;
                                g4 = result12;
                                if (v69 == v79) {
                                    // break -> 0x1ccea
                                    break;
                                }
                                if (v79 == 0) {
                                    // 0x1dbc3
                                    v48 = v69;
                                    g9 = &v48;
                                    int32_t v80 = *v75; // 0x1dbd1
                                    g4 = v80;
                                    if (v76 != 2) {
                                        result = v80;
                                        goto lab_0x1ccea;
                                    } else {
                                        goto lab_0x1dbf2_2;
                                    }
                                }
                                int32_t v81 = v76 + 1; // 0x1db90
                                g8 = v81;
                                int32_t v82 = v74 + 16; // 0x1db93
                                g10 = v82;
                                if (v76 == 2) {
                                    goto lab_0x1dbf2_2;
                                }
                                v76 = v81;
                                v74 = v82;
                            }
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result12;
                        }
                        int32_t v83 = function_27c00(g10, "award", (int32_t *)&g129); // 0x1d4f7
                        g4 = v83;
                        int32_t v84 = function_2cc30(v83, "ACH.HI_FIVE_YOUR_PARTNER"); // 0x1d507
                        g4 = v84;
                        int32_t v85 = g10; // 0x1d895
                        if (v84 != 0) {
                            int32_t v86 = function_27c00(v85, "award", (int32_t *)&g129); // 0x1d898
                            g4 = v86;
                            int32_t result13 = function_2cc30(v86, "ACH.SPREAD_THE_LOVE"); // 0x1d8a8
                            g4 = result13;
                            if (result13 != 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result13;
                            }
                            int32_t result14 = function_27fc0(g10, "hugged", 0) - 1; // 0x1d8cd
                            g4 = result14;
                            if (result14 != 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result14;
                            }
                            // 0x1d8d6
                            g4 = (int32_t)"friends";
                            int32_t result15 = function_1c090(); // 0x1d8db
                            g4 = result15;
                            if ((char)result15 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result15;
                            }
                            int32_t v87 = function_27ea0(g10, "xuid", 0, 0); // 0x1d903
                            g4 = v87;
                            g8 = v87;
                            int32_t result16 = *(int32_t *)g6; // 0x1d90a
                            g4 = result16;
                            int32_t v88 = g9; // 0x1d90f
                            g10 = v88;
                            if (v87 == result16) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result16;
                            }
                            int32_t v89 = v88 | v87; // 0x1d925
                            g4 = v89;
                            if (v89 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            // 0x1d92d
                            g4 = g292;
                            int32_t result17 = *(int32_t *)(g292 + 8); // 0x1d932
                            g4 = result17;
                            int32_t v90 = *(int32_t *)result17; // 0x1d935
                            g9 = v90;
                            g9 = *(int32_t *)(v90 + 68);
                            if ((char)result17 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return result17;
                            }
                            // 0x1d957
                            int32_t v91; // bp-696
                            int32_t v92 = &v91; // 0x1d957
                            g4 = v92;
                            function_1e010(v92, "%s[1]");
                            int32_t v93 = (int32_t)g450; // 0x1d975
                            g4 = v93;
                            int32_t v94; // bp-691
                            g9 = &v94;
                            int32_t v95 = function_1dfb0(v93, &v94); // 0x1d997
                            g4 = v95;
                            g9 = v95;
                            if (v95 == 0) {
                                // 0x1ccea
                                g6 = v7;
                                g10 = v6;
                                g8 = v5;
                                return 0;
                            }
                            int32_t result18 = g10;
                            int32_t * v96 = (int32_t *)g6; // 0x1d9b3
                            char * v97 = NULL;
                            while (true) {
                                // 0x1d9b0
                                g7 = *(int32_t *)(v95 + 4);
                                int32_t v98 = *v96; // 0x1d9b3
                                g4 = v98;
                                g9 = v95;
                                int32_t * v99 = (int32_t *)(v95 + 12); // 0x1d9cb
                                int32_t v100 = *v99; // 0x1d9cb
                                g7 = v100;
                                int32_t v101 = *(int32_t *)(v100 + v98); // 0x1d9ce
                                g7 = v101;
                                int32_t v102 = *v99; // 0x1d9d7
                                g7 = v102;
                                int32_t v103 = *(int32_t *)(v98 + 4 + v102); // 0x1d9da
                                g4 = v103;
                                if (result18 == v103) {
                                    // 0x1de46
                                    if (g8 == v101) {
                                        // break -> 0x1ccea
                                        break;
                                    }
                                }
                                int32_t v104 = v103 | v101; // 0x1d9e6
                                g4 = v104;
                                if (v104 == 0) {
                                    // 0x1ddcc
                                    v48 = g8;
                                    g7 = &v48;
                                    int32_t v105 = *v96; // 0x1ddd5
                                    g4 = v105;
                                    if (v97 != (char *)2) {
                                        result = v105;
                                        goto lab_0x1ccea;
                                    } else {
                                        goto lab_0x1da05_2;
                                    }
                                }
                                int32_t v106 = v95 + 16; // 0x1d9f9
                                g9 = v106;
                                if (v97 == (char *)2) {
                                    goto lab_0x1da05_2;
                                }
                                v95 = v106;
                                v97 = (char *)((int32_t)v97 + 1);
                            }
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result18;
                        }
                        int32_t result19 = function_27fc0(v85, "newbie", 0); // 0x1d527
                        g4 = result19;
                        if (result19 != 1) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result19;
                        }
                        // 0x1d535
                        g4 = (int32_t)"friends";
                        int32_t result20 = function_1c090(); // 0x1d53a
                        g4 = result20;
                        if ((char)result20 == 0) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result20;
                        }
                        int32_t v107 = *(int32_t *)g6; // 0x1d547
                        g4 = v107;
                        if (v107 == 0) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return 0;
                        }
                        int32_t v108 = function_26cf0(); // 0x1d56c
                        g4 = v108;
                        g8 = v108;
                        g4 = function_26330(v108);
                        int32_t v109 = g8; // 0x1d583
                        v10 = v109;
                        g4 = function_27680(v109, "ACH.HI_FIVE_YOUR_PARTNER", 0);
                        g4 = function_27680(g8, "ACH.NEW_BLOOD", 0);
                        g4 = *(int32_t *)g6;
                        int32_t v110 = function_27fc0(g8, "ACH.HI_FIVE_YOUR_PARTNER", 0); // 0x1d5d5
                        g4 = v110;
                        if (v110 == 0) {
                            goto lab_0x1d5fe;
                        } else {
                            int32_t v111 = function_27fc0(g8, "ACH.NEW_BLOOD", 0); // 0x1d5f1
                            g4 = v111;
                            if (v111 != 0) {
                                // 0x1dcba
                            } else {
                                goto lab_0x1d5fe;
                            }
                        }
                    } else {
                        int32_t result21 = (int32_t)g450; // 0x1cdf0
                        g4 = result21;
                        g9 = *(int32_t *)g450;
                        if (g450 == NULL) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result21;
                        }
                        int32_t v112 = *(int32_t *)0xa4010; // 0x1ce0b
                        g4 = v112;
                        int32_t v113 = *(int32_t *)v112; // 0x1ce10
                        g4 = v113;
                        g6 = *(int32_t *)(v113 + 4);
                        function_27fc0(g8, "iController", 0);
                        int32_t result22 = (int32_t)g290; // 0x1ce31
                        g4 = result22;
                        if (g290 == NULL) {
                            // 0x1ccea
                            g6 = v7;
                            g10 = v6;
                            g8 = v5;
                            return result22;
                        }
                        // 0x1ce49
                        g9 = result21;
                        int32_t v114 = *(int32_t *)g450; // 0x1ce4f
                        g4 = v114;
                        int32_t v115 = function_26d60(v114); // 0x1ce5a
                        g4 = v115;
                        g6 = v115;
                        v11 = v115;
                        function_1f7f0(v115);
                        g7 = result22;
                        g4 = (int32_t)g290;
                        if (v115 != 0) {
                            int32_t v116 = function_27340(v115, (int32_t)"Members", 0); // 0x1cea0
                            g4 = v116;
                            if (v116 != 0) {
                                int32_t v117 = function_27fc0(v116, "numMachines", 0); // 0x1cec6
                                g4 = v117;
                                if (v117 >= 1) {
                                    // 0x1ced9
                                    int32_t v118; // bp-1232
                                    int32_t v119 = &v118; // 0x1cee3
                                    g10 = v119;
                                    int32_t v120; // bp-964
                                    g6 = &v120;
                                    int32_t v121 = 0;
                                    while (true) {
                                        // 0x1ceef
                                        g8 = v121;
                                        function_1e010(v119, "machine%d");
                                        g4 = v116;
                                        int32_t v122; // bp-1227
                                        int32_t v123 = function_27340(v116, (int32_t)&v122, 0); // 0x1cf24
                                        g4 = v123;
                                        if (v123 != 0) {
                                            // branch -> 0x1cfdd
                                        }
                                        int32_t v124 = v121 + 1; // 0x1cfdd
                                        g4 = v117;
                                        if (v124 == v117) {
                                            // break -> 0x1cff6
                                            break;
                                        }
                                        v121 = v124;
                                    }
                                    // 0x1cff6
                                    g10 = v119;
                                }
                            }
                        }
                        goto lab_0x1d000;
                    }
                }
            } else {
                goto lab_0x1cd24;
            }
        }
    } else {
        goto lab_0x1ccdd;
    }
  lab_0x1ccdd:;
    int32_t v125 = function_1bf20(); // 0x1ccdd
    g4 = v125;
    int32_t result23 = function_200a0(v125); // 0x1cce5
    g4 = result23;
    // 0x1ccea
    g6 = v7;
    g10 = v6;
    g8 = v5;
    return result23;
  lab_0x1cd24:;
    int32_t result24 = (int32_t)g450; // 0x1cd24
    g4 = result24;
    g9 = *(int32_t *)g450;
    g6 = result24;
    if (g450 == NULL) {
        // 0x1ccea
        g6 = v7;
        g10 = v6;
        g8 = v5;
        return result24;
    }
    int32_t v126 = function_26cf0(); // 0x1cd3e
    g4 = v126;
    g10 = v126;
    g4 = function_26330(v126);
    int32_t v127 = function_27340(g10, (int32_t)"update", 1); // 0x1cd68
    g4 = v127;
    g8 = v127;
    if (v127 != 0) {
        int32_t v128 = *(int32_t *)g6; // 0x1cd73
        g4 = v128;
        g4 = function_1f440(v128, v127);
    }
    int32_t v129 = g10; // 0x1cd89
    g4 = v129;
    if (v129 == 0) {
        // 0x1ccea
        g6 = v7;
        g10 = v6;
        g8 = v5;
        return 0;
    }
    goto lab_0x1cda3;
  lab_0x1cda3:;
    int32_t result25 = function_28600(v129); // 0x1cda6
    g4 = result25;
    g6 = v7;
    g10 = v6;
    g8 = v5;
    return result25;
  lab_0x1d5fe:;
    int32_t result26 = &v10; // 0x1d5fe
    g4 = result26;
    // 0x1ccea
    g6 = v7;
    g10 = v6;
    g8 = v5;
    return result26;
  lab_0x1d000:;
    int32_t result27 = v11; // 0x1d000
    g4 = result27;
    if (result27 == 0) {
        // 0x1ccea
        g6 = v7;
        g10 = v6;
        g8 = v5;
        return result27;
    }
    v129 = result27;
    goto lab_0x1cda3;
  lab_0x1da99:;
    // 0x1da99
    int32_t result28; // 0x1da4a
    g4 = result28;
    // 0x1ccea
    g6 = v7;
    g10 = v6;
    g8 = v5;
    return result28;
  lab_0x1dbf2_2:;
    int32_t v130 = function_26cf0(); // 0x1dbf9
    g4 = v130;
    g10 = v130;
    g4 = function_26330(v130);
    int32_t v131 = g10; // 0x1dc10
    v10 = v131;
    g4 = function_27680(v131, "ACH.SPEED_RUN_COOP", 1);
    g4 = *(int32_t *)g6;
    goto lab_0x1d5fe;
  lab_0x1da05_2:;
    int32_t v132 = function_26cf0(); // 0x1da0c
    g4 = v132;
    g10 = v132;
    g4 = function_26330(v132);
    int32_t v133 = g10; // 0x1da23
    v10 = v133;
    function_27680(v133, "ACH.SPREAD_THE_LOVE", 1);
    result28 = &v10;
    g8 = result28;
    g4 = result28;
    int32_t v134 = function_26cf0(); // 0x1da5b
    g4 = v134;
    g10 = v134;
    g4 = function_26330(v134);
    int32_t v135 = g10; // 0x1da72
    v10 = v135;
    function_27680(v135, "AV_SHIRT2", 1);
    goto lab_0x1da99;
}

// Address range: 0x1de65 - 0x1de75
int32_t function_1de65(void) {
    // 0x1de65
    g6 = g4;
    int32_t v1; // ebp
    int32_t result = v1 - 28; // 0x1de67
    g4 = result;
    return result;
}

// Address range: 0x1de75 - 0x1de86
int32_t function_1de75(void) {
    // 0x1de75
    g10 = g4;
    int32_t result = function_26d40(); // 0x1de7a
    g4 = result;
    g6 = g10;
    return result;
}

// Address range: 0x1de86 - 0x1dec5
int32_t function_1de86(void) {
    // 0x1de86
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x1de93
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x1dea5
    g6 = v2;
    g4 = g8;
    int32_t result = function_7ab57(v2, (int32_t)&g870); // 0x1deb6
    g4 = result;
    return result;
}

// Address range: 0x1ded0 - 0x1dede
int32_t function_1ded0(int32_t a1) {
    // 0x1ded0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g118;
    return g4;
}

// Address range: 0x1dee0 - 0x1df04
int32_t function_1dee0(int32_t a1) {
    // 0x1dee0
    g4 = a1 - 24;
    int32_t v1 = *(int32_t *)(a1 + 64); // 0x1def6
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x1def9
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 28); // 0x1deff
    g4 = result;
    return result;
}

// Address range: 0x1df10 - 0x1df2b
int32_t function_1df10(int32_t a1) {
    // 0x1df10
    g4 = a1 - 24;
    int32_t result = *(int32_t *)(a1 + 68); // 0x1df27
    g4 = result;
    return result;
}

// Address range: 0x1df30 - 0x1df3c
int32_t function_1df30(int32_t a1) {
    // 0x1df30
    g4 = a1;
    *(char *)(a1 + 4) = 1;
    return g4;
}

// Address range: 0x1df40 - 0x1df59
int32_t function_1df40(int32_t a1) {
    // 0x1df40
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g113;
    *(int32_t *)(g4 + 24) = (int32_t)&g114;
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_242d0((int32_t)&g870); // 0x1df54
    g4 = result;
    return result;
}

// Address range: 0x1df60 - 0x1df72
int32_t function_1df60(int32_t a1) {
    // 0x1df60
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g118;
    int32_t result = function_1bc40(); // 0x1df6d
    g4 = result;
    return result;
}

// Address range: 0x1df80 - 0x1dfac
int32_t function_1df80(int32_t a1) {
    int32_t v1 = g6; // 0x1df83
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g113;
    *(int32_t *)(g6 + 24) = (int32_t)&g114;
    g4 = function_242d0(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x1dfa7
    g4 = result;
    return result;
}

// Address range: 0x1dfb0 - 0x1e00b
int32_t function_1dfb0(int32_t a1, int32_t * a2) {
    int32_t v1 = g5; // 0x1dfb0
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g10; // 0x1dfb3
    int32_t v4 = g6; // 0x1dfb4
    g6 = 0;
    g10 = (int32_t)a2;
    g9 = a1;
    int32_t result; // 0x1dff6
    if (a2 == NULL) {
        result = 0;
        // 0x1dff3
        g4 = result;
        g6 = v4;
        g10 = v3;
        g5 = v1;
        return result;
    }
    if (a1 == 0) {
        result = 0;
        // 0x1dff3
        g4 = result;
        g6 = v4;
        g10 = v3;
        g5 = v1;
        return result;
    }
    int32_t v5 = *(int32_t *)a1; // 0x1dfc8
    g4 = v5;
    g6 = a1;
    if (v5 == 0) {
      lab_0x1e000_2:
        // 0x1e000
        g4 = 0;
        g6 = v4;
        g10 = v3;
        g5 = v1;
        return 0;
    }
    int32_t v6;
    while (true) {
        int32_t v7 = function_2cc30(v5, (char *)a2); // 0x1dfe5
        g4 = v7;
        int32_t v8 = g6;
        if (v7 == 0) {
            v6 = v8;
            // break -> 0x1dff3
            break;
        }
        int32_t v9 = v8 + 16; // 0x1dfee
        g6 = v9;
        if (v9 == 0) {
            v6 = v9;
            // break -> 0x1dff3
            break;
        }
        int32_t v10 = *(int32_t *)v9; // 0x1dfd8
        g4 = v10;
        if (v10 == 0) {
            // 0x1e000
            v1 = v2;
            goto lab_0x1e000_2;
        }
        v5 = v10;
    }
    // 0x1dff3
    result = v6;
    // 0x1dff3
    g4 = result;
    g6 = v4;
    g10 = v3;
    g5 = v2;
    return result;
}

// Address range: 0x1e010 - 0x1e093
int32_t function_1e010(int32_t a1, char * a2) {
    int32_t v1 = g10; // 0x1e013
    int32_t v2 = g6; // 0x1e014
    char v3; // bp-13
    g9 = &v3;
    v3 = 0;
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g119;
    int32_t v4 = g6; // 0x1e02b
    g10 = v4 + 5;
    *(char *)(v4 + 4) = 1;
    int32_t v5 = (int32_t)a2; // 0x1e036
    g4 = v5;
    int32_t v6; // bp+12
    int32_t v7 = function_2dae0(g10, (int32_t *)&g862, v5, &v6, (int32_t *)&v3); // 0x1e04c
    g4 = v7;
    *(char *)(g6 + (int32_t)&g19) = 0;
    int32_t v8 = g6;
    if (v3 != 0) {
        // 0x1e05e
        if (*(char *)(v8 + 4) == 0) {
            int32_t v9 = g332; // 0x1e064
            g9 = v9;
            if (v9 <= 4) {
                int32_t v10 = v9 + 1; // 0x1e06f
                g9 = v10;
                g332 = v10;
            }
        }
    }
    // 0x1e078
    *(int32_t *)(v8 + (int32_t)&g23) = g4;
    int32_t v11 = function_2cb40(g10); // 0x1e081
    g4 = v11;
    *(int32_t *)(g6 + (int32_t)&g23) = v11;
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x1e0a0 - 0x1e259
int32_t function_1e0a0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4) {
    int32_t v1 = (int32_t)a4;
    int32_t v2 = g8; // 0x1e0a3
    int32_t v3 = g10; // 0x1e0a4
    int32_t v4 = g6; // 0x1e0a5
    g7 = v1;
    g4 = a1;
    g9 = a3;
    if (a4 != NULL) {
        // 0x1e0c8
        g9 = v1;
        *a4 = 0;
    }
    // 0x1e0d1
    g10 = 0;
    if (a1 != 0) {
        int32_t v5 = function_27340(a1, (int32_t)"Members", 0); // 0x1e0ee
        g4 = v5;
        if (v5 != 0) {
            int32_t v6 = function_27fc0(v5, "numMachines", 0); // 0x1e114
            g4 = v6;
            if (v6 >= 1) {
                // 0x1e131
                int32_t v7; // bp-564
                int32_t v8 = &v7; // 0x1e137
                int32_t v9; // bp-296
                int32_t v10 = &v9; // 0x1e1a0
                int32_t v11; // bp-291
                int32_t v12 = &v11; // 0x1e1ba
                int32_t v13 = 0;
                while (true) {
                    // 0x1e131
                    g4 = v13;
                    g9 = v8;
                    function_1e010(v8, "machine%d");
                    g4 = v5;
                    int32_t v14; // bp-559
                    int32_t v15 = function_27340(v5, (int32_t)&v14, 0); // 0x1e16c
                    g4 = v15;
                    g8 = v15;
                    if (v15 != 0) {
                        int32_t v16 = function_27fc0(v15, "numPlayers", 0); // 0x1e18e
                        g4 = v16;
                        if (v16 >= 1) {
                            // 0x1e19d
                            g6 = 0;
                            while (true) {
                                // 0x1e1a0
                                g9 = v10;
                                function_1e010(v10, "player%d");
                                g4 = v12;
                                int32_t v17 = function_27340(g8, v12, 0); // 0x1e1cf
                                g4 = v17;
                                g10 = v17;
                                if (v17 != 0) {
                                    int32_t v18 = function_27ea0(v17, "xuid", 0, 0) ^ a2; // 0x1e200
                                    g4 = v18;
                                    int32_t v19 = g9 ^ a3 | v18; // 0x1e206
                                    g9 = v19;
                                    if (v19 == 0) {
                                        // 0x1e240
                                        g9 = v1;
                                        if (a4 != NULL) {
                                            // 0x1e247
                                            g9 = v1;
                                            g4 = g10;
                                            *a4 = g8;
                                            g6 = v4;
                                            g10 = v3;
                                            g8 = v2;
                                            return g4;
                                        }
                                        goto lab_0x1e230;
                                    }
                                }
                                int32_t v20 = g6 + 1; // 0x1e20a
                                g6 = v20;
                                if (v20 == v16) {
                                    // break -> 0x1e215
                                    break;
                                }
                            }
                        }
                    }
                    int32_t v21 = v13 + 1; // 0x1e215
                    g4 = v6;
                    if (v21 == v6) {
                        // break -> 0x1e22e
                        break;
                    }
                    v13 = v21;
                }
                // 0x1e22e
                g10 = 0;
            }
        }
    }
    goto lab_0x1e230;
  lab_0x1e230:;
    int32_t result = g10; // 0x1e236
    g4 = result;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x1e260 - 0x1e265
int32_t function_1e260(void) {
    // 0x1e260
    return g4;
}

// Address range: 0x1e270 - 0x1e277
int32_t function_1e270(void) {
    // 0x1e270
    g4 = 0;
    return 0;
}

// Address range: 0x1e280 - 0x1e287
int32_t function_1e280(void) {
    // 0x1e280
    g4 = 0;
    return 0;
}

// Address range: 0x1e290 - 0x1e2a6
int32_t function_1e290(int32_t a1, int32_t a2) {
    // 0x1e290
    g9 = a2;
    g4 = a1;
    int32_t result; // 0x1e2a1
    if (a2 != 0) {
        int32_t v1 = *(int32_t *)a2; // 0x1e29d
        g9 = v1;
        int32_t v2 = a1 - v1; // 0x1e29f
        result = v2 < 0 == ((v2 ^ a1) & (v1 ^ a1)) < 0 == (v2 != 0) ? v1 : a1;
        g4 = result;
    } else {
        result = a1;
    }
    // 0x1e2a4
    return result;
}

// Address range: 0x1e2b0 - 0x1e2cd
int32_t function_1e2b0(int32_t a1) {
    // 0x1e2b0
    g4 = a1;
    int32_t result = function_27920(a1, "game/state", "lobby"); // 0x1e2c8
    g4 = result;
    return result;
}

// Address range: 0x1e2d0 - 0x1e406
int32_t function_1e2d0(int32_t a1) {
    int32_t v1 = g10; // 0x1e2d3
    int32_t v2 = g6; // 0x1e2d4
    g10 = a1;
    int32_t v3 = function_26cf0(); // 0x1e2e2
    g4 = v3;
    g6 = v3;
    g4 = function_26330(v3);
    int32_t v4 = function_27fc0(g10, "members/numPlayers", 1); // 0x1e30c
    g4 = v4;
    g4 = function_27680(g6, "numPlayers", v4);
    int32_t v5 = function_27c00(g10, "game/state", NULL); // 0x1e338
    g4 = v5;
    if (v5 != 0) {
        // 0x1e341
        g4 = function_27920(g6, "Filter=/game:state", (char *)v5);
    }
    int32_t v6 = function_27c00(g10, "game/mode", NULL); // 0x1e368
    g4 = v6;
    if (v6 != 0) {
        // 0x1e371
        g4 = function_27920(g6, "Filter=/game:mode", (char *)v6);
    }
    int32_t v7 = function_27340(g10, (int32_t)"game/mp_coop_start", 0); // 0x1e398
    g4 = v7;
    if (v7 != 0) {
        int32_t v8 = function_27fc0(v7, NULL, 0); // 0x1e3b4
        g4 = v8;
        g4 = function_27680(g6, "Near/game:mp_coop_start", v8);
    }
    int32_t v9 = function_27c00(g10, "game/platform", NULL); // 0x1e3e0
    g4 = v9;
    if (v9 != 0) {
        // 0x1e3e9
        g4 = function_27920(g6, "Filter=/game:platform", (char *)v9);
    }
    int32_t result = g6; // 0x1e400
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x1e406 - 0x1e4d7
int32_t function_1e406(int32_t a1) {
    // 0x1e406
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g10; // 0x1e423
    int32_t v2 = g6; // 0x1e424
    int32_t v3 = (int32_t)g450; // 0x1e428
    g4 = v3;
    g9 = *(int32_t *)g450;
    int32_t result; // 0x1e465
    if (g450 != NULL) {
        // 0x1e439
        g9 = *(int32_t *)g450;
        g6 = 1;
        int32_t v4 = function_27fc0(v3, "game/sv_cheats", 0); // 0x1e459
        g4 = v4;
        if (v4 == 0) {
            // 0x1e462
            result = g6;
            g4 = result;
            g6 = v2;
            g10 = v1;
            return result;
        }
    }
    // 0x1e470
    g4 = a1;
    g6 = 1;
    int32_t v5 = function_27c00(a1, "name", (int32_t *)&g129); // 0x1e48b
    g4 = v5;
    g10 = v5;
    int32_t v6 = function_2cfa0(v5, "GI.lesson."); // 0x1e49d
    g4 = v6;
    if (v6 != 0) {
        // 0x1e462
        result = g6;
        g4 = result;
        g6 = v2;
        g10 = v1;
        return result;
    }
    int32_t v7 = function_2cfa0(g10, "CFG."); // 0x1e4b1
    g4 = v7;
    if (v7 != 0) {
        // 0x1e462
        result = g6;
        g4 = result;
        g6 = v2;
        g10 = v1;
        return result;
    }
    int32_t result2 = function_2cfa0(g10, "DLC."); // 0x1e4c5
    g4 = result2;
    if (result2 == 0) {
        // 0x1e4ce
        g6 = 0;
        return result2;
    }
    // 0x1e462
    result = g6;
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x1e4dc - 0x1e4de
int32_t function_1e4dc(void) {
    // 0x1e4dc
    return g4;
}

// Address range: 0x1e4e0 - 0x1e51d
int32_t function_1e4e0(void) {
    int32_t v1 = g6; // 0x1e4e3
    int32_t v2 = function_26cf0(); // 0x1e4ee
    g4 = v2;
    g6 = v2;
    function_27a20(v2, "disconnecthdrl", "disconnecthdlr", "destroy");
    int32_t result = g6; // 0x1e518
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x1e51d - 0x1e57d
int32_t function_1e51d(void) {
    // 0x1e51d
    int32_t v1; // ebp
    *(int32_t *)(v1 - 12) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 12); // 0x1e528
    g4 = v2;
    g4 = function_7ab57(v2, (int32_t)&g870);
    int32_t v3 = g6; // 0x1e543
    int32_t v4 = function_26cf0(); // 0x1e54e
    g4 = v4;
    g6 = v4;
    function_27a20(v4, "disconnecthdrl", "error", "n/a");
    int32_t result = g6; // 0x1e578
    g4 = result;
    g6 = v3;
    return result;
}

// Address range: 0x1e57d - 0x1e5af
int32_t function_1e57d(int32_t a1) {
    // 0x1e57d
    int32_t v1; // ebp
    *(int32_t *)(v1 - 12) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 12); // 0x1e588
    g4 = v2;
    function_7ab57(v2, (int32_t)&g870);
    g4 = a1;
    int32_t result = function_1fc90(a1); // 0x1e5aa
    g4 = result;
    return result;
}

// Address range: 0x1e5dc - 0x1e77d
int32_t function_1e5dc(void) {
    int32_t * v1 = (int32_t *)(g5 - 0x647af040); // 0x1e5dc
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x1e5e2
    *(int32_t *)v2 = 2 * v2;
    char * v3 = (char *)(g7 + (int32_t)&g335); // 0x1e5e4
    *v3 = (char)(g4 / 256) + *v3;
    int32_t result = function_2a090(g10, g4, 1); // 0x1e5f9
    g4 = result;
    int32_t v4 = g6; // 0x1e5fe
    if (v4 == 0) {
        goto lab_0x1e770;
    } else {
        int32_t v5 = function_2cc30(v4, "reserve"); // 0x1e611
        g4 = v5;
        if (v5 != 0) {
            result = v5;
            goto lab_0x1e770;
        } else {
            int32_t v6 = function_27c00(g8, "game/save", NULL); // 0x1e631
            g4 = v6;
            if (v6 != 0) {
                // 0x1e63a
                g4 = function_27920(g10, "game/save", (char *)v6);
            }
            int32_t v7 = function_27c00(g8, "game/mode", (int32_t *)&g129); // 0x1e661
            g4 = v7;
            g6 = v7;
            int32_t v8 = function_2cc30(v7, "coop"); // 0x1e673
            g4 = v8;
            if (v8 != 0) {
                int32_t v9 = function_2cc30(g6, "coop_challenge"); // 0x1e74b
                g4 = v9;
                if (v9 == 0) {
                    goto lab_0x1e680;
                } else {
                    int32_t v10 = function_2cc30(g6, "coop_community"); // 0x1e763
                    g4 = v10;
                    if (v10 == 0) {
                        goto lab_0x1e680;
                    } else {
                        result = v10;
                        goto lab_0x1e770;
                    }
                }
            } else {
                goto lab_0x1e680;
            }
        }
    }
  lab_0x1e770:
    // 0x1e770
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
  lab_0x1e680:;
    int32_t v11 = function_27ea0(g8, "members/machine0/dlcmask", 0, 0); // 0x1e69b
    g4 = v11;
    g6 = v11;
    int32_t v12 = g6 | function_27ea0(g8, "members/machine1/dlcmask", 0, 0); // 0x1e6cf
    g8 = v12;
    int32_t v13 = (v12 / 0x20000 & 2) - 1;
    g4 = v13;
    function_27680(g10, "gameextras/skins", v13);
    int32_t v14 = g8; // 0x1e6e9
    g8 = v14 & 0x100000;
    int32_t v15 = (v14 & (int32_t)&g144) == 0 ? -1 : 1; // 0x1e706
    g4 = v15;
    function_27680(g10, "gameextras/helmets", v15);
    *(int32_t *)(g5 + 8) = g10;
    g4 = g8 == 0;
    *(int32_t *)(g5 + 12) = (int32_t)"gameextras/antenna";
    int32_t v16 = g5; // 0x1e721
    g6 = *(int32_t *)(v16 - 12);
    int32_t v17 = g4 | 1; // 0x1e724
    g4 = v17;
    g10 = *(int32_t *)(v16 - 8);
    *(int32_t *)(v16 + 16) = v17;
    g8 = *(int32_t *)(g5 - 4);
    int32_t result2 = function_27680((int32_t)&g870, (char *)&g870, (int32_t)&g870); // 0x1e733
    g4 = result2;
    return result2;
}

// Address range: 0x1e7ad - 0x1e7b2
int32_t function_1e7ad(void) {
    // 0x1e7ad
    return g4;
}

// Address range: 0x1e7b3 - 0x1e7b4
int32_t function_1e7b3(void) {
    // 0x1e7b3
    return g4;
}

// Address range: 0x1e7bf - 0x1e7c6
int32_t function_1e7bf(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x7017dbe4); // 0x1e7bf
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x1e7c6 - 0x1e888
int32_t function_1e7c6(void) {
    int32_t v1 = g4 - 0x4b727000; // 0x1e7c6
    g4 = v1;
    char * v2 = (char *)v1; // 0x1e7cb
    *v2 = *v2 + (char)v1;
    int32_t v3 = g4; // 0x1e7ce
    char * v4 = (char *)v3; // 0x1e7ce
    *v4 = *v4 + (char)v3;
    int32_t v5; // ebp
    g5 = &v5;
    int32_t v6 = g6; // 0x1e7d3
    int32_t v7 = g4; // 0x1e7d4
    g6 = v7;
    int32_t v8 = function_27c00(v7, "game/mode", (int32_t *)&g129); // 0x1e7ec
    g4 = v8;
    int32_t v9 = function_2cc30(v8, "coop_community"); // 0x1e7fc
    g9 = 0;
    g7 = v9;
    g4 = 4;
    if (v9 == 0) {
        // 0x1e80e
        g6 = v6;
        return 4;
    }
    int32_t v10 = function_27c00(g6, "game/mode", (int32_t *)&g129); // 0x1e82b
    g4 = v10;
    int32_t v11 = function_2cc30(v10, "coop_challenge"); // 0x1e83b
    g9 = 0;
    g7 = v11;
    g4 = 2;
    if (v11 == 0) {
        // 0x1e80e
        g6 = v6;
        return 2;
    }
    int32_t v12 = function_27c00(g6, "options/play", (int32_t *)&g129); // 0x1e860
    g4 = v12;
    int32_t v13 = function_2cc30(v12, "challenge"); // 0x1e870
    g9 = 0;
    g7 = v13;
    g4 = 0;
    int32_t result; // 0x1e813
    if (v13 == 0) {
        // 0x1e87f
        g4 = 2;
        g9 = 0;
        result = 2;
    } else {
        result = 0;
    }
    // 0x1e80e
    g6 = v6;
    return result;
}

// Address range: 0x1e890 - 0x1e9ad
int32_t function_1e890(int32_t a1) {
    int32_t v1 = g8; // 0x1e893
    int32_t v2 = g10; // 0x1e894
    int32_t v3; // bp-64
    g8 = &v3;
    int32_t v4 = g6; // 0x1e898
    int32_t v5; // bp-76
    g10 = &v5;
    g6 = a1;
    g4 = function_2c6c0(&v5, 0);
    g4 = function_2c870(&v5, 0);
    g4 = function_2c6d0(&v5, 3);
    g4 = function_2c6c0(&v3, 0);
    g4 = function_2c870(&v3, 0);
    function_2c6d0(&v3, 3);
    g4 = g281;
    g9 = *(int32_t *)g281;
    int32_t v6;
    char v7;
    int32_t v8; // 0x1e924
    if (v7 == 0) {
        // 0x1e91f
        v8 = (int32_t)g283;
        g4 = v8;
        if (g283 != NULL) {
            // 0x1e92b
            g9 = *(int32_t *)g283;
            g10 = v8;
        } else {
            v8 = v6;
        }
    } else {
        v8 = v6;
    }
    // 0x1e938
    g4 = (int32_t)&g129;
    g10 = v8 == 0 ? (int32_t)&g129 : v8;
    g4 = function_27920(g6, "game/state", "game");
    g4 = function_27920(g6, "game/mode", "coop");
    function_27920(g6, "game/map", (char *)g10);
    int32_t v9 = g6; // 0x1e986
    g4 = v9;
    int32_t result = function_27600(v9, "game/dlcrequired", v9, g9); // 0x1e9a0
    g4 = result;
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x1e9b0 - 0x1ec1d
int32_t function_1e9b0(int32_t a1) {
    int32_t v1 = g8; // 0x1e9b3
    int32_t v2 = g10; // 0x1e9b4
    int32_t v3 = g6; // 0x1e9b5
    int32_t result = (int32_t)g450; // 0x1e9b9
    g4 = result;
    g9 = *(int32_t *)g450;
    g10 = result;
    if (g450 == NULL) {
        // 0x1eb6b
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v4 = function_26cf0(); // 0x1e9d7
    g4 = v4;
    g6 = v4;
    g4 = function_26330(v4);
    int32_t v5 = g6; // 0x1e9ee
    function_27920(v5, "update/system/netflag", "noleave");
    g4 = a1;
    int32_t v6 = function_27c00(a1, "game/map", (int32_t *)&g129); // 0x1ea1f
    g4 = a1;
    int32_t v7 = function_27c00(a1, "game/mode", (int32_t *)&g129); // 0x1ea3d
    g4 = v7;
    g8 = v7;
    int32_t v8 = function_2cc30(v7, "coop"); // 0x1ea4f
    g4 = v8;
    if (v8 != 0) {
        int32_t v9 = function_2cc30(g8, "coop_challenge"); // 0x1eb13
        g4 = v9;
        if (v9 == 0) {
            goto lab_0x1ea5c;
        } else {
            int32_t v10 = function_2cc30(g8, "sp"); // 0x1eb2b
            g4 = v10;
            if (v10 != 0) {
                // 0x1eba8
                g4 = function_2cc30(g8, "coop_community");
            } else {
                // 0x1eb34
                g4 = v6;
                int32_t v11 = function_2cc30(v6, "default"); // 0x1eb42
                g4 = v11;
                if (v11 == 0) {
                    int32_t v12 = *(int32_t *)g10; // 0x1ebc0
                    g4 = v12;
                    if (v12 == a1) {
                        // 0x1ebcd
                        g4 = a1;
                        int32_t v13 = function_27c00(a1, "game/state", (int32_t *)&g129); // 0x1ebe3
                        g4 = v13;
                        int32_t v14 = function_2cc30((int32_t)"lobby", (char *)v13); // 0x1ebf3
                        g4 = v14;
                        if (v14 == 0) {
                            // 0x1ec00
                            g4 = function_27920(g6, "update/game/map", "sp_a1_intro1");
                        }
                    }
                }
            }
            goto lab_0x1eb50;
        }
    } else {
        goto lab_0x1ea5c;
    }
  lab_0x1ea5c:;
    int32_t v15 = function_2cc30(g8, "coop_challenge"); // 0x1ea67
    g4 = v15;
    int32_t v16;
    if (v15 != 0) {
        // 0x1eb78
        g4 = a1;
        int32_t v17 = function_27fc0(a1, "game/mp_coop_start", 0); // 0x1eb8e
        g4 = v17;
        if (v17 == 0) {
            v16 = (int32_t)"mp_coop_start";
            goto lab_0x1ea79;
        } else {
            v16 = (int32_t)"mp_coop_lobby_3";
            goto lab_0x1ea79;
        }
    } else {
        v16 = (int32_t)"mp_coop_lobby_3";
        goto lab_0x1ea79;
    }
  lab_0x1eb50:
    // 0x1eb50
    g4 = v5;
    int32_t result2; // 0x1eb66
    if (v5 != 0) {
        // 0x1eb63
        result2 = function_28600(v5);
        g4 = result2;
    } else {
        result2 = 0;
    }
    // 0x1eb6b
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x1ea79:
    // 0x1ea79
    g8 = v16;
    g4 = v6;
    int32_t v18 = function_2cc30(v16, (char *)v6); // 0x1ea83
    g4 = v18;
    if (v18 != 0) {
        // 0x1ea90
        g4 = v6;
        int32_t v19 = function_2cc30(v6, "default"); // 0x1ea9e
        g4 = v19;
        if (v19 == 0) {
            int32_t v20 = *(int32_t *)g10; // 0x1eaab
            g4 = v20;
            if (v20 == a1) {
                // 0x1eabc
                g4 = a1;
                int32_t v21 = function_27c00(a1, "game/state", (int32_t *)&g129); // 0x1ead2
                g4 = v21;
                int32_t v22 = function_2cc30((int32_t)"lobby", (char *)v21); // 0x1eae2
                g4 = v22;
                if (v22 == 0) {
                    // 0x1eaeb
                    g4 = function_27920(g6, "update/game/map", (char *)g8);
                }
            }
        }
    }
    goto lab_0x1eb50;
}

// Address range: 0x1ec1d - 0x1ed53
int32_t function_1ec1d(int32_t a1, int32_t a2) {
    // 0x1ec1d
    g10 = g4;
    g4 = function_26d40();
    g6 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5 - 28; // 0x1ec31
    g4 = v1;
    g4 = function_1fc30(v1);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g8; // 0x1ec53
    int32_t v3 = g10; // 0x1ec54
    int32_t v4 = g6; // 0x1ec55
    g6 = a2;
    int32_t v5 = function_27340(a2, (int32_t)"delete/game/map", 0); // 0x1ec6f
    g4 = v5;
    if (v5 != 0) {
        // 0x1ec78
        g4 = function_27920(g6, "delete/game/missioninfo", "delete");
    }
    // 0x1ec90
    g4 = function_27c00(g6, "update/game/map", NULL);
    int32_t v6 = function_27c00(g6, "update/game/map", (int32_t *)&g129); // 0x1ecbb
    g4 = v6;
    if (v6 == 0) {
        // 0x1ed4b
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    // 0x1ecc8
    g4 = a1;
    int32_t v7 = function_26d60(a1); // 0x1ecce
    g4 = v7;
    g10 = v7;
    function_2a090(v7, g6, 0);
    int32_t v8 = g10; // 0x1ecec
    g4 = v8;
    g8 = v8;
    int32_t v9 = g9; // 0x1ecf5
    int32_t v10 = function_27ea0(v8, "game/dlcrequired", 0, 0); // 0x1ed13
    int32_t v11 = g8; // 0x1ed1b
    int32_t v12 = v11 ^ v10; // 0x1ed1b
    g4 = v12;
    g9 = v12;
    if (v12 != 0) {
        // 0x1ed21
        g4 = v9;
        g4 = function_27600(g6, "update/game/dlcrequired", v11, v9);
    }
    // 0x1ed3c
    g4 = v7;
    int32_t result; // 0x1ed46
    if (v7 != 0) {
        // 0x1ed43
        result = function_28600(v7);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x1ed4b
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x1ed54 - 0x1ed55
int32_t function_1ed54(void) {
    // 0x1ed54
    return g4;
}

// Address range: 0x1ed70 - 0x1ed71
int32_t function_1ed70(int32_t a1, int32_t a2) {
    // 0x1ed70
    return g4;
}

// Address range: 0x1ed83 - 0x1ed84
int32_t function_1ed83(void) {
    // 0x1ed83
    return g4;
}

// Address range: 0x1ed8c - 0x1ed8d
int32_t function_1ed8c(void) {
    // 0x1ed8c
    return g4;
}

// Address range: 0x1ed96 - 0x1ede1
int32_t function_1ed96(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g5 + 0x392d74c0); // 0x1ed96
    int32_t v2 = *v1 + 1; // 0x1ed96
    *v1 = v2;
    bool v3; // cf
    if (v2 != 0 && !v3) {
        uint32_t v4 = g10; // 0x1eda1
        int32_t v5 = g6 - v4; // 0x1eda5
        g4 = v5;
        g4 = function_224e0(g8, v4, v5);
    }
    unsigned char v6 = *(char *)&g6; // 0x1edb3
    int32_t result = v6; // 0x1edb3
    g4 = result;
    if (v6 != 0) {
        // 0x1edd8
        g10 = g6 + 1;
        return result;
    }
    // 0x1edba
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x1ede5 - 0x1ee02
int32_t function_1ede5(void) {
    // 0x1ede5
    g8++;
    int32_t v1 = g4 & -248; // 0x1ede8
    g4 = v1;
    int32_t * v2 = (int32_t *)v1; // 0x1edea
    *v2 = *v2 + v1;
    int32_t v3 = g4; // 0x1edec
    char * v4 = (char *)v3; // 0x1edec
    *v4 = *v4 + (char)v3;
    *(char *)(g5 - 25) = (char)g4;
    int32_t v5 = g5 - 25; // 0x1edf1
    g4 = v5;
    g4 = function_224e0(g8, v5, (int32_t)&g870);
    int32_t result = function_1ed83(); // 0x1ee00
    g4 = result;
    return result;
}

// Address range: 0x1ee10 - 0x1ee90
int32_t function_1ee10(int32_t a1, int32_t a2) {
    // 0x1ee10
    g10 = a1;
    if (a1 == 0) {
        int32_t v1 = function_1ee99((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x1ee1d
        g4 = v1;
    }
    int32_t v2 = (int32_t)g450; // 0x1ee1f
    g4 = v2;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g6 = v2;
    g4 = *(int32_t *)g450;
    g4 = *(int32_t *)g450;
    int32_t v3 = *(int32_t *)g450; // 0x1ee4d
    g4 = v3;
    int32_t result = function_27ea0(v3, "@info/installed", 0, 0); // 0x1ee70
    g4 = result;
    g6 = result & 0x1c0006;
    return result;
}

// Address range: 0x1ee99 - 0x1eea0
int32_t function_1ee99(int32_t a1, int32_t a2, int32_t a3) {
    // 0x1ee99
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return g4;
}

// Address range: 0x1eea0 - 0x1eee1
int32_t function_1eea0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6 | function_27ea0(g10, "dlcmask", 0, 0); // 0x1eec3
    g4 = v1;
    int32_t result = function_27600(g10, "dlcmask", v1, g9); // 0x1eed5
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x1eef0 - 0x1f259
int32_t function_1eef0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x1eef3
    int32_t v2 = g10; // 0x1eef4
    int32_t v3 = g6; // 0x1eef5
    g7 = a1;
    g8 = a2;
    g4 = g4 & -256 | (int32_t)(a1 == 0);
    char * v4; // bp-324
    if (a2 == 0) {
        if (a1 == 0) {
            // 0x1f1d0
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v1;
            return 0;
        }
        // 0x1f058
        g4 = a1;
        v4 = (char *)&g129;
        int32_t v5 = function_27c00(a1, "game/mode", (int32_t *)&g129); // 0x1f06e
        g4 = v5;
        g6 = v5;
        if (v5 == 0 || *(char *)v5 == 0) {
            // 0x1f1d0
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v1;
            return 0;
        }
        // 0x1f086
        g4 = a1;
        v4 = (char *)&g129;
        int32_t v6 = function_27c00(a1, "game/map", (int32_t *)&g129); // 0x1f09c
        g4 = v6;
        g10 = v6;
        if (v6 == 0 || *(char *)v6 == 0) {
            // 0x1f1d0
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v1;
            return 0;
        }
        int32_t v7 = function_26cf0(); // 0x1f0bb
        g4 = v7;
        g8 = v7;
        function_26330(v7);
        int32_t v8; // bp-32
        int32_t v9 = &v8; // 0x1f0d2
        g4 = v9;
        v8 = 0;
        g4 = function_224b0(&v8);
        char * v10 = (char *)g6; // 0x1f0ea
        v4 = v10;
        function_27920(g8, "game/mode", v10);
        g4 = v9;
        g4 = function_1ed70(g6, v9);
        char * v11 = (char *)g10; // 0x1f110
        v4 = v11;
        function_27920(g8, "game/map", v11);
        g4 = v9;
        function_1ed70(g10, v9);
        g4 = a3;
        v4 = NULL;
        int32_t v12 = function_27c00(a3, "game/state", NULL); // 0x1f14c
        g4 = v12;
        if (v12 != 0) {
            // 0x1f155
            g4 = a1;
            v4 = NULL;
            int32_t v13 = function_27c00(a1, "game/state", NULL); // 0x1f16b
            g4 = v13;
            if (v13 != 0) {
                char * v14 = (char *)v13; // 0x1f16b
                if (*v14 != 0) {
                    // 0x1f179
                    *(int32_t *)&v4 = v13;
                    g4 = function_27920(g8, "game/state", v14);
                }
            }
        }
        // 0x1f18d
        __asm_movq((int64_t)(int32_t)v4, __asm_movd(v8));
        int32_t v15 = function_27600((int32_t)&g870, (char *)&g870, (int32_t)&g870, (int32_t)&g870); // 0x1f1a3
        g4 = v15;
    } else {
        if (a1 == 0) {
            // 0x1f1b0
            v4 = NULL;
            int32_t v16 = function_27fc0(a2, "game/missioninfo/builtin", 0); // 0x1f1c3
            g4 = v16;
            if (v16 != 0) {
                // 0x1f1d0
                g6 = v3;
                g4 = 0;
                g10 = v2;
                g8 = v1;
                return 0;
            }
            // 0x1f1e0
            v4 = NULL;
            int32_t v17 = function_27c00(g8, "game/missioninfo/website", NULL); // 0x1f1f3
            g4 = v17;
            if (v17 == 0 || *(char *)v17 == 0) {
                // 0x1f1d0
                g6 = v3;
                g4 = 0;
                g10 = v2;
                g8 = v1;
                return 0;
            }
            // 0x1f201
            v4 = NULL;
            int32_t v18 = function_27fc0(g8, "game/missioninfo/version", 0); // 0x1f214
            g4 = v18;
            if (v18 <= 1) {
                // 0x1f1d0
                g6 = v3;
                g4 = 0;
                g10 = v2;
                g8 = v1;
                return 0;
            }
            // 0x1f21e
            v4 = NULL;
            int32_t v19 = function_27340(g8, (int32_t)"rollup", 0); // 0x1f231
            g4 = v19;
            g6 = v19;
            if (v19 != 0) {
                // 0x1f240
                g4 = function_25fe0(g8, v19);
                g4 = function_28600(g6);
            }
        } else {
            // 0x1ef17
            v4 = (char *)-1;
            v4 = NULL;
            g6 = function_27fc0(a2, "game/missioninfo/version", -1);
            g4 = a1;
            int32_t v20 = function_27fc0(a1, "game/missioninfo/version", 0); // 0x1ef47
            g4 = v20;
            if (g6 < v20) {
                // 0x1f000
                g4 = a1;
                v4 = NULL;
                int32_t v21 = function_27340(a1, (int32_t)"game/missioninfo", 0); // 0x1f016
                g4 = v21;
                v4 = (char *)1;
                g6 = v21;
                int32_t v22 = function_27340(g8, (int32_t)"game/missioninfo", 1); // 0x1f030
                g4 = v22;
                v4 = (char *)1;
                g4 = function_2a090(v22, g6, 1);
            }
            // 0x1ef54
            g4 = a1;
            v4 = "game";
            int32_t v23 = function_27c00(a1, "game/state", (int32_t *)"game"); // 0x1ef6a
            g4 = v23;
            g6 = v23;
            int32_t v24 = function_2cc30(v23, "lobby"); // 0x1ef7c
            g4 = v24;
            int32_t v25 = g6; // 0x1efe0
            int32_t v26; // 0x1eff7
            if (v24 != 0) {
                int32_t v27 = function_2cc30(v25, "game"); // 0x1efeb
                g4 = (int32_t)"game";
                v26 = v27 != 0 ? (int32_t)"game" : g6;
                g6 = v26;
            } else {
                v26 = v25;
            }
            // 0x1ef85
            int32_t v28; // bp-300
            int32_t v29 = &v28; // 0x1ef85
            g4 = v29;
            v4 = (char *)v26;
            int32_t v30; // bp-295
            g6 = &v30;
            g4 = function_1e010(v29, "rollup/%s");
            v4 = NULL;
            int32_t v31 = function_27fc0(g8, (char *)&v30, 0) + 1; // 0x1efbd
            g4 = v31;
            v4 = (char *)v31;
            g4 = function_27680(g8, (char *)&v30, v31);
        }
    }
    int32_t result = g8; // 0x1efd2
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x1f25a - 0x1f25b
int32_t function_1f25a(void) {
    // 0x1f25a
    return g4;
}

// Address range: 0x1f270 - 0x1f436
int32_t function_1f270(int32_t a1) {
    int32_t v1 = g8; // 0x1f273
    int32_t v2 = g10; // 0x1f274
    g10 = 1;
    int32_t v3 = g6; // 0x1f27a
    int32_t v4 = g4; // 0x1f281
    int32_t v5 = g9; // 0x1f287
    int32_t v6 = g7; // 0x1f28d
    int32_t v7 = function_27fc0(v4, "members/numMachines", 0); // 0x1f2a6
    g4 = v7;
    if (v7 >= 1) {
        // 0x1f2c8
        int32_t v8; // bp-296
        int32_t v9 = &v8; // 0x1f2ce
        int32_t v10; // bp-564
        int32_t v11 = &v10; // 0x1f3a9
        int32_t v12; // bp-559
        int32_t v13 = &v12; // 0x1f3c3
        int32_t v14; // bp-832
        int32_t v15 = &v14; // 0x1f354
        int32_t v16 = v5 % 2; // 0x1f338
        int32_t v17 = 0;
        while (true) {
            // 0x1f2c8
            g9 = v17;
            g7 = v9;
            function_1e010(v9, "members/machine%d");
            g4 = v4;
            int32_t v18; // bp-291
            int32_t v19 = function_27340(v4, (int32_t)&v18, 0); // 0x1f303
            g4 = v19;
            g8 = v19;
            int32_t v20 = function_27fc0(v19, "numPlayers", 0); // 0x1f31d
            g4 = v20;
            if (v20 >= 1) {
                // 0x1f330
                g6 = 0;
                g9 = v16;
                while (true) {
                    // 0x1f3a9
                    g7 = v11;
                    function_1e010(v11, "player%d");
                    g4 = v13;
                    int32_t v21 = function_27340(g8, v13, 0); // 0x1f3d8
                    g4 = v21;
                    if (v21 != 0) {
                        // 0x1f3e1
                        g9 = v16;
                        int32_t v22 = v21 + v6; // 0x1f3e7
                        g4 = v22;
                        if (v16 != 0) {
                            // 0x1f3f5
                            g9 = *(int32_t *)v22;
                            g7 = v5;
                        }
                        // 0x1f354
                        g9 = v15;
                        function_1e010(v15, "game/%s");
                        g4 = v22;
                        int32_t v23; // bp-827
                        g9 = &v23;
                        int32_t v24 = g10; // 0x1f399
                        int32_t v25 = v24 - v22; // 0x1f399
                        int32_t v26 = v25 < 0 == ((v25 ^ v24) & (v24 ^ v22)) < 0 == (v25 != 0) ? v22 : v24; // 0x1f39b
                        g10 = v26;
                    }
                    int32_t v27 = g6 + 1; // 0x1f39e
                    g6 = v27;
                    if (v27 == v20) {
                        // break -> 0x1f410
                        break;
                    }
                }
            }
            int32_t v28 = v17 + 1; // 0x1f410
            g4 = v7;
            if (v28 == v7) {
                // break -> 0x1f429
                break;
            }
            v17 = v28;
        }
    }
    int32_t result = g10; // 0x1f42f
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x1f440 - 0x1f46e
int32_t function_1f440(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x1f440
    int32_t v2 = v1; // bp-4
    g9 = 0x27fc0;
    g7 = 0;
    g5 = &v2;
    g4 = a1;
    int32_t v3 = function_1f270(v1); // 0x1f450
    g4 = a2;
    int32_t result = function_27680(a2, "game/mp_coop_start", v3); // 0x1f467
    g4 = result;
    g5 = v2;
    return result;
}

// Address range: 0x1f470 - 0x1f7be
int32_t function_1f470(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x1f476
    g6 = a1;
    int32_t v3 = g10; // 0x1f47c
    int32_t v4 = g8; // 0x1f47f
    int32_t v5 = function_25190(a1); // 0x1f485
    g4 = v5;
    g10 = v5;
    int32_t v6 = function_2cc30((int32_t)"Game::PlayerInfo", (char *)v5); // 0x1f497
    g4 = v6;
    int32_t result; // 0x1f674
    if (v6 != 0) {
        int32_t v7 = function_2cc30((int32_t)"Portal2::ClientWorkshopDownloadProgress", (char *)g10); // 0x1f683
        g4 = v7;
        if (v7 != 0) {
            int32_t v8 = function_2cc30((int32_t)"Portal2::ClientCommunityVotingState", (char *)g10); // 0x1f72b
            g4 = v8;
            if (v8 == 0) {
                // 0x1f738
                g7 = a4;
                if (a4 != 0) {
                    int32_t v9 = function_27ea0(g6, "clxuid", 0, 0); // 0x1f75e
                    g4 = a3;
                    int32_t v10 = function_1e0a0(a3, v9, g9, NULL); // 0x1f779
                    g4 = v10;
                    g10 = v10;
                    if (v10 != 0) {
                        int32_t v11 = function_27c00(g6, "voting_state", (int32_t *)&g129); // 0x1f79b
                        g4 = v11;
                        function_27920(g10, "game/voting_state", (char *)v11);
                        g4 = a4;
                        *(int32_t *)a4 = g10;
                        result = g4;
                    } else {
                        result = 0;
                    }
                } else {
                    result = v8;
                }
            } else {
                result = v8;
            }
        } else {
            // 0x1f690
            g10 = a4;
            if (a4 != 0) {
                int32_t v12 = function_27ea0(g6, "clxuid", 0, 0); // 0x1f6b2
                g4 = a3;
                int32_t v13 = function_1e0a0(a3, v12, g9, NULL); // 0x1f6cd
                g4 = v13;
                g10 = v13;
                if (v13 != 0) {
                    float80_t v14 = function_27d60(g6, "workshop_map_progress", 0); // 0x1f6eb
                    g4 = (float32_t)v14;
                    function_275d0(g10, "game/workshop_map_progress", v14);
                    g4 = a4;
                    *(int32_t *)a4 = g10;
                    g6 = v2;
                    g10 = v3;
                    g8 = v4;
                    return g4;
                }
                result = 0;
            } else {
                result = v7;
            }
        }
    } else {
        // 0x1f4a4
        g4 = a2;
        int32_t v15 = function_27c00(a2, "type", (int32_t *)"host"); // 0x1f4ba
        g4 = v15;
        int32_t v16 = function_2cc30((int32_t)"host", (char *)v15); // 0x1f4ca
        g4 = v16;
        if (v16 == 0) {
            // 0x1f4d7
            g8 = a4;
            if (a4 != 0) {
                int32_t v17 = function_27ea0(g6, "xuid", 0, 0); // 0x1f4fd
                g4 = v17;
                g10 = v17;
                g8 = g9;
                int32_t v18 = function_27340(g6, (int32_t)"game", 0); // 0x1f519
                g4 = v18;
                g6 = v18;
                if (v18 != 0) {
                    // 0x1f528
                    g4 = a3;
                    int32_t v19 = function_1e0a0(a3, g10, g8, NULL); // 0x1f53e
                    g4 = v19;
                    g10 = v19;
                    if (v19 != 0) {
                        int32_t v20 = function_27340(v19, (int32_t)"game", 1); // 0x1f560
                        g4 = v20;
                        g8 = v20;
                        if (v20 != 0) {
                            int32_t v21 = function_27340(g6, (int32_t)"mp_coop_start", 0); // 0x1f582
                            g4 = v21;
                            if (v21 != 0) {
                                int32_t v22 = function_27fc0(v21, NULL, 0); // 0x1f5a2
                                g4 = v22;
                                g6 = v22;
                                int32_t v23 = function_27fc0(g8, "mp_coop_start", 0); // 0x1f5bc
                                g4 = v23;
                                int32_t v24 = g6; // 0x1f5c1
                                if (v24 != v23) {
                                    // 0x1f5c9
                                    function_27680(g8, "mp_coop_start", v24);
                                    *(int32_t *)a4 = g10;
                                    int32_t v25 = (int32_t)g450; // 0x1f5e2
                                    g4 = v25;
                                    g9 = *(int32_t *)g450;
                                    g6 = v25;
                                    if (g450 != NULL) {
                                        int32_t v26 = function_26cf0(); // 0x1f5fc
                                        g4 = v26;
                                        g10 = v26;
                                        g4 = function_26330(v26);
                                        int32_t v27 = function_27340(g10, (int32_t)"update", 1); // 0x1f626
                                        g4 = v27;
                                        g8 = v27;
                                        if (v27 != 0) {
                                            int32_t v28 = *(int32_t *)g6; // 0x1f631
                                            g4 = v28;
                                            g4 = function_1f440(v28, v27);
                                        }
                                        int32_t v29 = g10; // 0x1f647
                                        g4 = v29;
                                        if (v29 != 0) {
                                            int32_t v30 = function_28600(v29); // 0x1f660
                                            g4 = v30;
                                            result = v30;
                                        } else {
                                            result = 0;
                                        }
                                    } else {
                                        result = v25;
                                    }
                                } else {
                                    result = v23;
                                }
                            } else {
                                result = 0;
                            }
                        } else {
                            result = 0;
                        }
                    } else {
                        result = 0;
                    }
                } else {
                    result = 0;
                }
            } else {
                result = v16;
            }
        } else {
            result = v16;
        }
    }
    // 0x1f668
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result;
}

// Address range: 0x1f7bf - 0x1f7c0
int32_t function_1f7bf(void) {
    // 0x1f7bf
    return g4;
}

// Address range: 0x1f7d1 - 0x1f7d2
int32_t function_1f7d1(void) {
    // 0x1f7d1
    return g4;
}

// Address range: 0x1f7f0 - 0x1fa4f
int32_t function_1f7f0(int32_t a1) {
    int32_t v1 = g8; // 0x1f7f3
    int32_t v2 = g10; // 0x1f7f4
    int32_t v3 = g6; // 0x1f7f5
    int32_t result = (int32_t)g290; // 0x1f7fc
    g4 = result;
    g9 = result;
    if (g290 == NULL) {
        // 0x1f990
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x1f819
    g9 = result;
    g4 = a1;
    if (a1 == 0) {
        // 0x1f990
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x1f837
    g4 = a1;
    int32_t v4 = function_27340(a1, (int32_t)"Members", 0); // 0x1f84d
    g4 = v4;
    if (v4 == 0) {
        // 0x1f990
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t result2 = function_27fc0(v4, "numMachines", 0); // 0x1f873
    g4 = result2;
    if (result2 < 1) {
        // 0x1f990
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result2;
    }
    // 0x1f886
    int32_t v5; // bp-296
    int32_t v6 = &v5; // 0x1f890
    g8 = v6;
    int32_t v7; // bp-564
    int32_t v8 = &v7; // 0x1f8a8
    int32_t v9; // bp-291
    int32_t v10 = &v9; // 0x1f91c
    int32_t v11 = 0;
    int32_t result3; // 0x1f9af
    int32_t v12; // 0x1fa4a
    int32_t v13; // 0x1f9fd
    while (true) {
        // 0x1f896
        g4 = v8;
        function_1e010(v8, "machine%d");
        g4 = v4;
        int32_t v14; // bp-559
        int32_t v15 = function_27340(v4, (int32_t)&v14, 0); // 0x1f8d1
        g4 = v15;
        g10 = v15;
        if (v15 != 0) {
            int32_t v16 = function_27fc0(v15, "numPlayers", 0); // 0x1f8f3
            g4 = v16;
            if (v16 >= 1) {
                // 0x1f902
                g6 = 0;
                while (true) {
                    // 0x1f908
                    function_1e010(v6, "player%d");
                    g4 = v10;
                    int32_t v17 = function_27340(g10, v10, 0); // 0x1f931
                    g4 = v17;
                    if (v17 != 0) {
                        int32_t v18 = function_27ea0(v17, "xuid", 0, 0) ^ result; // 0x1f960
                        g4 = v18;
                        int32_t v19 = g9 ^ result | v18; // 0x1f966
                        g9 = v19;
                        if (v19 == 0) {
                            // 0x1f9a0
                            g4 = a1;
                            function_1ee10(a1, g10);
                            result3 = (int32_t)g290;
                            g4 = result3;
                            g9 = result3;
                            g6 = result3;
                            if (g290 == NULL) {
                                goto lab_0x1f990;
                            } else {
                                // 0x1f9ca
                                int32_t v20; // bp-832
                                int32_t v21 = &v20; // 0x1f9ca
                                g4 = v21;
                                function_1e010(v21, "player%d");
                                int32_t v22; // bp-827
                                int32_t v23 = &v22; // 0x1f9e8
                                g4 = v23;
                                v13 = function_27340(g10, v23, 0);
                                g4 = v13;
                                g10 = v13;
                                if (v13 == 0) {
                                    result3 = 0;
                                    goto lab_0x1f990;
                                } else {
                                    int32_t v24 = (int32_t)g290; // 0x1fa08
                                    g4 = v24;
                                    g9 = 1;
                                    int32_t v25 = *(int32_t *)(v24 + 8); // 0x1fa1d
                                    g7 = v25;
                                    int32_t v26 = *(int32_t *)(v24 + 4); // 0x1fa20
                                    g4 = v26;
                                    if (v26 == 0) {
                                        // 0x1fa46
                                        v12 = v25 != 0;
                                        g9 = v12;
                                        goto lab_0x1fa27;
                                    } else {
                                        v12 = 1;
                                        goto lab_0x1fa27;
                                    }
                                }
                            }
                        }
                    }
                    int32_t v27 = g6 + 1; // 0x1f96a
                    g6 = v27;
                    if (v27 == v16) {
                        // break -> 0x1f975
                        break;
                    }
                }
            }
        }
        int32_t v28 = v11 + 1; // 0x1f975
        g4 = result2;
        if (v28 == result2) {
            result3 = result2;
            // break -> 0x1f990
            break;
        }
        v11 = v28;
    }
  lab_0x1f990:
    // 0x1f990
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result3;
  lab_0x1fa27:;
    int32_t result4 = function_27680(v13, "game/mp_coop_start", v12); // 0x1fa36
    g4 = result4;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result4;
}

// Address range: 0x1fa50 - 0x1fc2b
int32_t function_1fa50(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x1fa56
    g6 = a1;
    int32_t v3 = g10; // 0x1fa5c
    g10 = a2;
    int32_t v4 = g8; // 0x1fa62
    int32_t v5 = function_27c00(a1, "system/netflag", (int32_t *)&g129); // 0x1fa78
    g4 = v5;
    int32_t v6 = function_2cc30(v5, "teamlink"); // 0x1fa88
    g4 = v6;
    int32_t result2; // 0x1fa9d
    if (v6 != 0) {
        // 0x1faa0
        g4 = function_1f7f0(g6);
        int32_t v7 = function_2cc30(g10, "client"); // 0x1fab3
        g4 = v7;
        if (v7 != 0) {
            int32_t v8 = g6; // 0x1fabc
            g4 = function_1f440(v8, v8);
            int32_t v9 = function_2cfa0(g10, "search"); // 0x1fad3
            g4 = v9;
            if (v9 == 0) {
                int32_t v10 = function_27c00(g6, "system/network", (int32_t *)"LIVE"); // 0x1faef
                g4 = v10;
                g10 = v10;
                int32_t v11 = function_27340(g6, (int32_t)"game", 1); // 0x1fb09
                g4 = v11;
                g8 = v11;
                if (v11 != 0) {
                    // 0x1fb14
                    g4 = function_27920(v11, "state", "lobby");
                    int32_t v12 = function_27340(g8, (int32_t)"mode", 0); // 0x1fb3f
                    g4 = v12;
                    if (v12 == 0) {
                        // 0x1fc0e
                        g4 = function_27920(g8, "mode", "coop");
                    }
                    int32_t v13 = function_27340(g8, (int32_t)"map", 0); // 0x1fb5f
                    g4 = v13;
                    if (v13 == 0) {
                        // 0x1fbf1
                        g4 = function_27920(g8, "map", "default");
                    }
                }
                int32_t v14 = g6; // 0x1fb6c
                g4 = v14;
                g4 = function_27600(v14, "game/dlcrequired", v14, g9);
                int32_t v15 = function_2cc30((int32_t)"offline", (char *)g10); // 0x1fb96
                g4 = v15;
                if (v15 != 0) {
                    int32_t v16 = function_27c00(g6, "game/mode", (int32_t *)"coop"); // 0x1fbb6
                    g4 = v16;
                    int32_t v17 = g6; // 0x1fbcb
                    g10 = v3;
                    g6 = v2;
                    g8 = v4;
                    int32_t v18 = (int32_t)(function_2cc30(v16, "sp") == 0) + 2; // 0x1fbe3
                    g4 = v18;
                    g5 = v1;
                    int32_t result = function_27680(v17, "members/numSlots", v18); // 0x1fbec
                    g4 = result;
                    return result;
                }
                result2 = 0;
            } else {
                result2 = v9;
            }
        } else {
            result2 = 0;
        }
    } else {
        result2 = v6;
    }
    // 0x1fa91
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result2;
}

// Address range: 0x1fc30 - 0x1fc4a
int32_t function_1fc30(int32_t a1) {
    int32_t v1 = g5; // 0x1fc30
    g4 = a1;
    int32_t v2 = *(int32_t *)a1; // 0x1fc36
    g4 = v2;
    g5 = v1;
    if (v2 == 0) {
        // 0x1fc48
        return 0;
    }
    int32_t result = function_28600(v1); // 0x1fc40
    g4 = result;
    return result;
}

// Address range: 0x1fc50 - 0x1fc65
int32_t function_1fc50(int32_t a1) {
    int32_t result = *(int32_t *)&g254; // 0x1fc56
    g4 = result;
    g9 = result;
    return result;
}

// Address range: 0x1fc70 - 0x1fc89
int32_t function_1fc70(void) {
    int32_t result = *(int32_t *)&g254; // 0x1fc76
    g4 = result;
    if (result != 0) {
        // 0x1fc7f
        g9 = result;
    }
    // 0x1fc87
    return result;
}

// Address range: 0x1fc90 - 0x1fd02
int32_t function_1fc90(int32_t a1) {
    // 0x1fc90
    g4 = a1;
    int32_t v1 = function_27c00(a1, "game/mode", NULL); // 0x1fcae
    g4 = v1;
    g10 = v1;
    if (v1 != 0) {
        int32_t v2 = *(int32_t *)&g258; // 0x1fcb9
        g4 = v2;
        if (v2 != 0) {
            // 0x1fcc2
            g6 = (int32_t)&g259;
            while (true) {
                int32_t v3 = function_2cc30(v2, (char *)v1); // 0x1fce1
                g4 = v3;
                if (v3 == 0) {
                    // break -> 0x1fcea
                    break;
                }
                int32_t v4 = g6; // 0x1fcd0
                g6 = v4 + 8;
                int32_t v5 = *(int32_t *)v4; // 0x1fcd3
                g4 = v5;
                if (v5 == 0) {
                    // break -> 0x1fcea
                    break;
                }
                // 0x1fcd0
                v2 = v5;
                v1 = g10;
            }
        }
    }
    // 0x1fcea
    g4 = g334;
    int32_t result = *(int32_t *)(g334 + 48); // 0x1fcef
    g4 = result;
    g339 = result;
    return result;
}

// Address range: 0x1fd06 - 0x1fd10
int32_t function_1fd06(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 - 0x3fceef3c); // 0x1fd06
    *v1 = *v1 + 1;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x1fd10 - 0x1fdfe
int32_t function_1fd10(int32_t a1, int32_t a2) {
    // 0x1fd10
    g4 = a1;
    g8 = a2;
    int32_t v1; // 0x1fd24
    if (a1 == 0) {
        // bb
        v1 = function_1ff41((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v1;
    } else {
        v1 = a1;
    }
    int32_t v2 = a2 == 0 ? v1 : a2; // 0x1fd34
    g8 = v2;
    int32_t v3 = function_27c00(v2, "game/mode", NULL); // 0x1fd42
    g4 = v3;
    g10 = v3;
    if (v3 != 0) {
        int32_t v4 = *(int32_t *)&g258; // 0x1fd4d
        g4 = v4;
        if (v4 != 0) {
            // 0x1fd56
            g6 = (int32_t)&g259;
            while (true) {
                int32_t v5 = function_2cc30(v4, (char *)v3); // 0x1fd71
                g4 = v5;
                if (v5 == 0) {
                    // break -> 0x1fd7a
                    break;
                }
                int32_t v6 = g6; // 0x1fd60
                g6 = v6 + 8;
                int32_t v7 = *(int32_t *)v6; // 0x1fd63
                g4 = v7;
                if (v7 == 0) {
                    // break -> 0x1fd7a
                    break;
                }
                // 0x1fd60
                v4 = v7;
                v3 = g10;
            }
        }
    }
    int32_t v8 = function_27340(g8, (int32_t)"game/dlcrequired", 0); // 0x1fd8d
    g4 = v8;
    int32_t v9; // 0x1fd94
    if (v8 == 0) {
        // bb25
        v9 = function_1fe0d((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v9;
    } else {
        v9 = v8;
    }
    int32_t v10 = function_27ea0(v9, NULL, 0, 0); // 0x1fdb1
    g10 = v10;
    g4 = g333;
    int32_t v11 = g9; // 0x1fdbd
    g8 = v11;
    int32_t v12 = *(int32_t *)(g333 + 48); // 0x1fdbf
    g4 = v12;
    int32_t v13; // 0x1fdd2
    int32_t v14; // 0x1fdd4
    if (v12 < 1) {
        int32_t v15 = function_1fe0d((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x1fdc4
        g4 = v15;
        v14 = g10;
        v13 = g8;
    } else {
        v14 = v10;
        v13 = v11;
    }
    // 0x1fdc6
    g6 = 1;
    g7 = 1;
    g9 = v13;
    int32_t v16 = v14 % 2; // 0x1fde2
    g4 = v16;
    *(int32_t *)((int32_t)&g340 + 4) = v16;
    g6++;
    return g4;
}

// Address range: 0x1fe02 - 0x1fe08
int32_t function_1fe02(void) {
    // 0x1fe02
    return g4;
}

// Address range: 0x1fe0c - 0x1fe0d
int32_t function_1fe0c(void) {
    // 0x1fe0c
    return g4;
}

// Address range: 0x1fe0d - 0x1ff41
int32_t function_1fe0d(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x1fe0d
    g4 = v1;
    int32_t v2 = function_27c00(v1, "game/mode", NULL); // 0x1fe23
    g4 = v2;
    g6 = v2;
    int32_t v3; // 0x1fe2c
    if (v2 == 0) {
        // bb
        v3 = function_1ff41((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v3;
    } else {
        v3 = v2;
    }
    int32_t v4 = function_2cc30(v3, "sp"); // 0x1fe3d
    g4 = v4;
    if (v4 == 0) {
        int32_t v5 = *(int32_t *)(g5 - 28); // 0x1ff10
        g7 = v5;
        int32_t v6 = function_27c00(v5, "Game/map", (int32_t *)&g129); // 0x1ff26
        g4 = v6;
        g6 = v6;
        int32_t result = function_2cc30(v6, (char *)&g341); // 0x1ff38
        g4 = result;
        return result;
    }
    int32_t v7 = function_2cc30(g6, "coop"); // 0x1fe55
    g4 = v7;
    if (v7 != 0) {
        // bb21
        g4 = function_1ffa0();
    }
    int32_t v8 = *(int32_t *)(g5 - 28); // 0x1fe62
    g4 = v8;
    int32_t v9 = function_27c00(v8, "system/network", (int32_t *)&g129); // 0x1fe78
    g4 = v9;
    int32_t v10 = function_2cc30((int32_t)"lan", (char *)v9); // 0x1fe88
    g4 = v10;
    g9 = 2;
    int32_t v11; // 0x1fea2
    if (v10 != 0) {
        // bb22
        g4 = function_1ffd5();
        v11 = g9;
    } else {
        v11 = 2;
    }
    // 0x1fe9a
    if (g342 != v11) {
        // 0x1fea2
        g342 = v11;
    }
    int32_t v12 = *(int32_t *)(g5 - 28); // 0x1fea8
    g7 = v12;
    int32_t v13 = function_27c00(v12, "Game/map", (int32_t *)&g129); // 0x1febe
    g4 = v13;
    g10 = v13;
    int32_t v14 = function_2cc30(v13, (char *)&g343); // 0x1fed0
    g4 = v14;
    if (v14 != 0) {
        // bb23
        g4 = function_20045();
    }
    int32_t v15 = *(int32_t *)(g5 - 28); // 0x1fedd
    g4 = v15;
    g4 = function_27c00(v15, "game/state", (int32_t *)&g129);
    *(int32_t *)(g5 + 8) = (int32_t)"game";
    *(int32_t *)(g5 + 12) = g4;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    int32_t result2 = function_2cc30((int32_t)&g870, (char *)&g870); // 0x1ff09
    g4 = result2;
    return result2;
}

// Address range: 0x1ff41 - 0x1ff49
int32_t function_1ff41(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x1ff41
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x1ff50 - 0x1ffa0
int32_t function_1ff50(void) {
    // 0x1ff50
    function_2d970((int32_t *)&g341, g6, 128);
    int32_t v1 = *(int32_t *)&g255; // 0x1ff68
    g4 = v1;
    int32_t v2; // 0x1ff6f
    if (v1 == 0) {
        // bb
        v2 = function_1ff41((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v2;
    } else {
        v2 = v1;
    }
    // 0x1ff71
    g6 = (int32_t)&g256;
    int32_t v3 = v2; // 0x1ff92
    while (true) {
        int32_t v4 = function_2cc30(v3, (char *)&g341); // 0x1ff95
        g4 = v4;
        if (v4 == 0) {
            // break -> 0x1ff9e
            break;
        }
        int32_t v5 = g6; // 0x1ff80
        g6 = v5 + 8;
        int32_t v6 = *(int32_t *)v5; // 0x1ff83
        g4 = v6;
        if (v6 == 0) {
            int32_t v7 = function_1ff41((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x1ff88
            g4 = v7;
            v3 = v7;
        } else {
            v3 = v6;
        }
    }
    int32_t result = function_1ff41((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x1ff9e
    g4 = result;
    return result;
}

// Address range: 0x1ffa0 - 0x1ffd5
int32_t function_1ffa0(void) {
    // 0x1ffa0
    g4 = function_2cc30(g6, "coop_challenge");
    int32_t v1 = function_2cc30(g6, "coop_community"); // 0x1ffc3
    g4 = v1;
    int32_t result; // 0x1ffca
    if (v1 != 0) {
        // bb
        result = function_1ff41((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v1;
    }
    // 0x1ffd0
    return result;
}

// Address range: 0x1ffd5 - 0x20045
int32_t function_1ffd5(void) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x1ffd5
    g7 = v1;
    int32_t v2 = function_27c00(v1, "game/type", (int32_t *)&g129); // 0x1ffeb
    g4 = v2;
    g4 = function_2cc30((int32_t)"friends", (char *)v2);
    g9 = 3;
    int32_t v3 = *(int32_t *)(g5 - 28); // 0x2000d
    g4 = v3;
    int32_t v4 = function_27c00(v3, "game/type", (int32_t *)&g129); // 0x20023
    g4 = v4;
    int32_t result = function_2cc30((int32_t)"quickmatch", (char *)v4); // 0x20033
    g4 = result;
    g9 = result == 0 ? 4 : 0;
    return result;
}

// Address range: 0x20045 - 0x2009e
int32_t function_20045(void) {
    // 0x20045
    g6 = (int32_t)&g257;
    function_2d970(&g343, g10, 128);
    int32_t v1 = *(int32_t *)&g257; // 0x20062
    g4 = v1;
    if (v1 != 0) {
        while (true) {
            int32_t v2 = function_2cc30(v1, (char *)g10); // 0x20080
            g4 = v2;
            if (v2 == 0) {
                // break -> 0x20089
                break;
            }
            int32_t v3 = g6 + 16; // 0x20070
            g6 = v3;
            int32_t v4 = *(int32_t *)v3; // 0x20073
            g4 = v4;
            if (v4 == 0) {
                // break -> 0x20089
                break;
            }
            v1 = v4;
        }
    }
    int32_t v5 = g6; // 0x20089
    int32_t v6 = *(int32_t *)(v5 + 8); // 0x20089
    g4 = v6;
    g344 = v6;
    int32_t result = *(int32_t *)(v5 + 12); // 0x20091
    g4 = result;
    g345 = result;
    return result;
}

// Address range: 0x200a0 - 0x200a5
int32_t function_200a0(int32_t a1) {
    // 0x200a0
    return g4;
}

// Address range: 0x200b0 - 0x200ba
int32_t function_200b0(void) {
    // 0x200b0
    g4 = (int32_t)&g260;
    return (int32_t)&g260;
}

// Address range: 0x200c0 - 0x200ca
int32_t function_200c0(void) {
    // 0x200c0
    g4 = (int32_t)&g261;
    return (int32_t)&g261;
}

// Address range: 0x200d0 - 0x200da
int32_t function_200d0(void) {
    // 0x200d0
    g4 = &g262;
    return &g262;
}

// Address range: 0x200e0 - 0x201fc
int32_t function_200e0(int32_t a1) {
    int32_t v1 = g6; // 0x200e3
    g6 = a1;
    int32_t v2 = function_2cfa0(a1, "challenge_besttime_"); // 0x200f5
    g4 = v2;
    int32_t v3;
    int32_t v4;
    int32_t result; // 0x20167
    if (v2 == 0) {
        int32_t v5 = function_2cfa0(g6, "challenge_distance_"); // 0x2017b
        g4 = v5;
        char * v6;
        if (v5 == 0) {
            int32_t v7 = g6; // 0x201d0
            g6 = 0;
            int32_t v8 = function_2cfa0(v7, "challenge_portals_"); // 0x201dd
            g4 = v8;
            if (v8 == 0) {
                // 0x20164
                result = g6;
                g4 = result;
                g6 = v1;
                return result;
            }
            v6 = " :score portals ";
        } else {
            v6 = " :score distance ";
        }
        int32_t v9 = function_2a500("SteamLeaderboard", v6); // 0x2019b
        g4 = v9;
        g6 = v9;
        v4 = function_27680(v9, ":sort", 1);
        v3 = 1;
    } else {
        int32_t v10 = function_2a500("SteamLeaderboard", " :score besttime "); // 0x20115
        g4 = v10;
        g6 = v10;
        v4 = function_27680(v10, ":sort", 1);
        v3 = 3;
    }
    // 0x2013c
    g4 = v4;
    g4 = function_27680(g6, ":format", v3);
    g4 = function_27680(g6, ":upload", 1);
    // 0x20164
    result = g6;
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x20220 - 0x221cf
int32_t function_20220(int16_t a1) {
    int32_t * v1 = (int32_t *)(g5 - 0x587af040); // 0x20220
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x20227
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g5; // 0x20229
    g4 = v3 - 1624;
    *(int32_t *)(v3 - 1620) = 0;
    int32_t v4 = g4; // 0x20239
    g4 = g365;
    *(int32_t *)(g5 - 1612) = 0;
    *(int32_t *)(g5 - 1624) = (int32_t)"SP.progress";
    *(int32_t *)(g5 - 1616) = 32;
    function_22400(&g364, g4, v4);
    int32_t v5 = g5; // 0x20270
    g4 = v5 - 1608;
    *(int32_t *)(v5 - 1604) = 0;
    int32_t v6 = g4; // 0x20280
    g4 = g365;
    *(int32_t *)(g5 - 1608) = (int32_t)"MP.complete.mp_coop_start";
    *(int32_t *)(g5 - 1600) = 9;
    *(int32_t *)(g5 - 1596) = 32;
    function_22400(&g364, g4, v6);
    int32_t v7 = g5; // 0x202b7
    g4 = v7 - 1592;
    *(int32_t *)(v7 - 1588) = 0;
    int32_t v8 = g4; // 0x202c7
    g4 = g365;
    *(int32_t *)(g5 - 1592) = (int32_t)"MP.complete.mp_coop_lobby_2";
    *(int32_t *)(g5 - 1584) = 9;
    *(int32_t *)(g5 - 1580) = 33;
    function_22400(&g364, g4, v8);
    int32_t v9 = g5; // 0x202fe
    g4 = v9 - 1576;
    *(int32_t *)(v9 - 1572) = 0;
    int32_t v10 = g4; // 0x2030e
    g4 = g365;
    *(int32_t *)(g5 - 1576) = (int32_t)"MP.complete.mp_coop_doors";
    *(int32_t *)(g5 - 1568) = 9;
    *(int32_t *)(g5 - 1564) = 34;
    function_22400(&g364, g4, v10);
    int32_t v11 = g5; // 0x20345
    g4 = v11 - 1560;
    *(int32_t *)(v11 - 1556) = 0;
    int32_t v12 = g4; // 0x20355
    g4 = g365;
    *(int32_t *)(g5 - 1560) = (int32_t)"MP.complete.mp_coop_race_2";
    *(int32_t *)(g5 - 1552) = 9;
    *(int32_t *)(g5 - 1548) = 35;
    function_22400(&g364, g4, v12);
    int32_t v13 = g5; // 0x2038c
    g4 = v13 - 1544;
    *(int32_t *)(v13 - 1540) = 0;
    int32_t v14 = g4; // 0x2039c
    g4 = g365;
    *(int32_t *)(g5 - 1544) = (int32_t)"MP.complete.mp_coop_laser_2";
    *(int32_t *)(g5 - 1536) = 9;
    *(int32_t *)(g5 - 1532) = 36;
    function_22400(&g364, g4, v14);
    int32_t v15 = g5; // 0x203d3
    g4 = v15 - 1528;
    *(int32_t *)(v15 - 1524) = 0;
    int32_t v16 = g4; // 0x203e3
    g4 = g365;
    *(int32_t *)(g5 - 1528) = (int32_t)"MP.complete.mp_coop_rat_maze";
    *(int32_t *)(g5 - 1520) = 9;
    *(int32_t *)(g5 - 1516) = 37;
    function_22400(&g364, g4, v16);
    int32_t v17 = g5; // 0x2041a
    g4 = v17 - 1512;
    *(int32_t *)(v17 - 1508) = 0;
    int32_t v18 = g4; // 0x2042a
    g4 = g365;
    *(int32_t *)(g5 - 1512) = (int32_t)"MP.complete.mp_coop_laser_crusher";
    *(int32_t *)(g5 - 1504) = 9;
    *(int32_t *)(g5 - 1500) = 38;
    function_22400(&g364, g4, v18);
    int32_t v19 = g5; // 0x20461
    g4 = v19 - 1496;
    *(int32_t *)(v19 - 1492) = 0;
    int32_t v20 = g4; // 0x20471
    g4 = g365;
    *(int32_t *)(g5 - 1496) = (int32_t)"MP.complete.mp_coop_teambts";
    *(int32_t *)(g5 - 1488) = 9;
    *(int32_t *)(g5 - 1484) = 39;
    function_22400(&g364, g4, v20);
    int32_t v21 = g5; // 0x204a8
    g4 = v21 - 1480;
    *(int32_t *)(v21 - 1476) = 0;
    int32_t v22 = g4; // 0x204b8
    g4 = g365;
    *(int32_t *)(g5 - 1480) = (int32_t)"MP.complete.mp_coop_fling_3";
    *(int32_t *)(g5 - 1472) = 9;
    *(int32_t *)(g5 - 1468) = 40;
    function_22400(&g364, g4, v22);
    int32_t v23 = g5; // 0x204ef
    g4 = v23 - 1464;
    *(int32_t *)(v23 - 1460) = 0;
    int32_t v24 = g4; // 0x204ff
    g4 = g365;
    *(int32_t *)(g5 - 1464) = (int32_t)"MP.complete.mp_coop_infinifling_train";
    *(int32_t *)(g5 - 1456) = 9;
    *(int32_t *)(g5 - 1452) = 41;
    function_22400(&g364, g4, v24);
    int32_t v25 = g5; // 0x20536
    g4 = v25 - 1448;
    *(int32_t *)(v25 - 1444) = 0;
    int32_t v26 = g4; // 0x20546
    g4 = g365;
    *(int32_t *)(g5 - 1448) = (int32_t)"MP.complete.mp_coop_come_along";
    *(int32_t *)(g5 - 1440) = 9;
    *(int32_t *)(g5 - 1436) = 42;
    function_22400(&g364, g4, v26);
    int32_t v27 = g5; // 0x2057d
    g4 = v27 - 1432;
    *(int32_t *)(v27 - 1428) = 0;
    int32_t v28 = g4; // 0x2058d
    g4 = g365;
    *(int32_t *)(g5 - 1432) = (int32_t)"MP.complete.mp_coop_fling_1";
    *(int32_t *)(g5 - 1424) = 9;
    *(int32_t *)(g5 - 1420) = 43;
    function_22400(&g364, g4, v28);
    int32_t v29 = g5; // 0x205c4
    g4 = v29 - 1416;
    *(int32_t *)(v29 - 1412) = 0;
    int32_t v30 = g4; // 0x205d4
    g4 = g365;
    *(int32_t *)(g5 - 1416) = (int32_t)"MP.complete.mp_coop_catapult_1";
    *(int32_t *)(g5 - 1408) = 9;
    *(int32_t *)(g5 - 1404) = 44;
    function_22400(&g364, g4, v30);
    int32_t v31 = g5; // 0x2060b
    g4 = v31 - 1400;
    *(int32_t *)(v31 - 1396) = 0;
    int32_t v32 = g4; // 0x2061b
    g4 = g365;
    *(int32_t *)(g5 - 1400) = (int32_t)"MP.complete.mp_coop_multifling_1";
    *(int32_t *)(g5 - 1392) = 9;
    *(int32_t *)(g5 - 1388) = 45;
    function_22400(&g364, g4, v32);
    int32_t v33 = g5; // 0x20652
    g4 = v33 - 1384;
    *(int32_t *)(v33 - 1380) = 0;
    int32_t v34 = g4; // 0x20662
    g4 = g365;
    *(int32_t *)(g5 - 1384) = (int32_t)"MP.complete.mp_coop_fling_crushers";
    *(int32_t *)(g5 - 1376) = 9;
    *(int32_t *)(g5 - 1372) = 46;
    function_22400(&g364, g4, v34);
    int32_t v35 = g5; // 0x20699
    g4 = v35 - 1368;
    *(int32_t *)(v35 - 1364) = 0;
    int32_t v36 = g4; // 0x206a9
    g4 = g365;
    *(int32_t *)(g5 - 1368) = (int32_t)"MP.complete.mp_coop_fan";
    *(int32_t *)(g5 - 1360) = 9;
    *(int32_t *)(g5 - 1356) = 47;
    function_22400(&g364, g4, v36);
    int32_t v37 = g5; // 0x206e0
    g4 = v37 - 1352;
    *(int32_t *)(v37 - 1348) = 0;
    int32_t v38 = g4; // 0x206f0
    g4 = g365;
    *(int32_t *)(g5 - 1352) = (int32_t)"MP.complete.mp_coop_wall_intro";
    *(int32_t *)(g5 - 1344) = 9;
    *(int32_t *)(g5 - 1340) = 48;
    function_22400(&g364, g4, v38);
    int32_t v39 = g5; // 0x20727
    g4 = v39 - 1336;
    *(int32_t *)(v39 - 1332) = 0;
    int32_t v40 = g4; // 0x20737
    g4 = g365;
    *(int32_t *)(g5 - 1336) = (int32_t)"MP.complete.mp_coop_wall_2";
    *(int32_t *)(g5 - 1328) = 9;
    *(int32_t *)(g5 - 1324) = 49;
    function_22400(&g364, g4, v40);
    int32_t v41 = g5; // 0x2076e
    g4 = v41 - 1320;
    *(int32_t *)(v41 - 1316) = 0;
    int32_t v42 = g4; // 0x2077e
    g4 = g365;
    *(int32_t *)(g5 - 1320) = (int32_t)"MP.complete.mp_coop_catapult_wall_intro";
    *(int32_t *)(g5 - 1312) = 9;
    *(int32_t *)(g5 - 1308) = 50;
    function_22400(&g364, g4, v42);
    int32_t v43 = g5; // 0x207b5
    g4 = v43 - 1304;
    *(int32_t *)(v43 - 1300) = 0;
    int32_t v44 = g4; // 0x207c5
    g4 = g365;
    *(int32_t *)(g5 - 1304) = (int32_t)"MP.complete.mp_coop_wall_block";
    *(int32_t *)(g5 - 1296) = 9;
    *(int32_t *)(g5 - 1292) = 51;
    function_22400(&g364, g4, v44);
    int32_t v45 = g5; // 0x207fc
    g4 = v45 - 1288;
    *(int32_t *)(v45 - 1284) = 0;
    int32_t v46 = g4; // 0x2080c
    g4 = g365;
    *(int32_t *)(g5 - 1288) = (int32_t)"MP.complete.mp_coop_catapult_2";
    *(int32_t *)(g5 - 1280) = 9;
    *(int32_t *)(g5 - 1276) = 52;
    function_22400(&g364, g4, v46);
    int32_t v47 = g5; // 0x20843
    g4 = v47 - 1272;
    *(int32_t *)(v47 - 1268) = 0;
    int32_t v48 = g4; // 0x20853
    g4 = g365;
    *(int32_t *)(g5 - 1272) = (int32_t)"MP.complete.mp_coop_turret_walls";
    *(int32_t *)(g5 - 1264) = 9;
    *(int32_t *)(g5 - 1260) = 53;
    function_22400(&g364, g4, v48);
    int32_t v49 = g5; // 0x2088a
    g4 = v49 - 1256;
    *(int32_t *)(v49 - 1252) = 0;
    int32_t v50 = g4; // 0x2089a
    g4 = g365;
    *(int32_t *)(g5 - 1256) = (int32_t)"MP.complete.mp_coop_turret_ball";
    *(int32_t *)(g5 - 1248) = 9;
    *(int32_t *)(g5 - 1244) = 54;
    function_22400(&g364, g4, v50);
    int32_t v51 = g5; // 0x208d1
    g4 = v51 - 1240;
    *(int32_t *)(v51 - 1236) = 0;
    int32_t v52 = g4; // 0x208e1
    g4 = g365;
    *(int32_t *)(g5 - 1240) = (int32_t)"MP.complete.mp_coop_wall_5";
    *(int32_t *)(g5 - 1232) = 9;
    *(int32_t *)(g5 - 1228) = 55;
    function_22400(&g364, g4, v52);
    int32_t v53 = g5; // 0x20918
    g4 = v53 - 1224;
    *(int32_t *)(v53 - 1220) = 0;
    int32_t v54 = g4; // 0x20928
    g4 = g365;
    *(int32_t *)(g5 - 1224) = (int32_t)"MP.complete.mp_coop_tbeam_redirect";
    *(int32_t *)(g5 - 1216) = 9;
    *(int32_t *)(g5 - 1212) = 56;
    function_22400(&g364, g4, v54);
    int32_t v55 = g5; // 0x2095f
    g4 = v55 - 1208;
    *(int32_t *)(v55 - 1204) = 0;
    int32_t v56 = g4; // 0x2096f
    g4 = g365;
    *(int32_t *)(g5 - 1208) = (int32_t)"MP.complete.mp_coop_tbeam_drill";
    *(int32_t *)(g5 - 1200) = 9;
    *(int32_t *)(g5 - 1196) = 57;
    function_22400(&g364, g4, v56);
    int32_t v57 = g5; // 0x209a6
    g4 = v57 - 1192;
    *(int32_t *)(v57 - 1188) = 0;
    int32_t v58 = g4; // 0x209b6
    g4 = g365;
    *(int32_t *)(g5 - 1192) = (int32_t)"MP.complete.mp_coop_tbeam_catch_grind_1";
    *(int32_t *)(g5 - 1184) = 9;
    *(int32_t *)(g5 - 1180) = 58;
    function_22400(&g364, g4, v58);
    int32_t v59 = g5; // 0x209ed
    g4 = v59 - 1176;
    *(int32_t *)(v59 - 1172) = 0;
    int32_t v60 = g4; // 0x209fd
    g4 = g365;
    *(int32_t *)(g5 - 1176) = (int32_t)"MP.complete.mp_coop_tbeam_laser_1";
    *(int32_t *)(g5 - 1168) = 9;
    *(int32_t *)(g5 - 1164) = 59;
    function_22400(&g364, g4, v60);
    int32_t v61 = g5; // 0x20a34
    g4 = v61 - 1160;
    *(int32_t *)(v61 - 1156) = 0;
    int32_t v62 = g4; // 0x20a44
    g4 = g365;
    *(int32_t *)(g5 - 1160) = (int32_t)"MP.complete.mp_coop_tbeam_polarity";
    *(int32_t *)(g5 - 1152) = 9;
    *(int32_t *)(g5 - 1148) = 60;
    function_22400(&g364, g4, v62);
    int32_t v63 = g5; // 0x20a7b
    g4 = v63 - 1144;
    *(int32_t *)(v63 - 1140) = 0;
    int32_t v64 = g4; // 0x20a8b
    g4 = g365;
    *(int32_t *)(g5 - 1144) = (int32_t)"MP.complete.mp_coop_tbeam_polarity2";
    *(int32_t *)(g5 - 1136) = 9;
    *(int32_t *)(g5 - 1132) = 61;
    function_22400(&g364, g4, v64);
    int32_t v65 = g5; // 0x20ac2
    g4 = v65 - 1128;
    *(int32_t *)(v65 - 1124) = 0;
    int32_t v66 = g4; // 0x20ad2
    g4 = g365;
    *(int32_t *)(g5 - 1128) = (int32_t)"MP.complete.mp_coop_tbeam_polarity3";
    *(int32_t *)(g5 - 1120) = 9;
    *(int32_t *)(g5 - 1116) = 62;
    function_22400(&g364, g4, v66);
    int32_t v67 = g5; // 0x20b09
    g4 = v67 - 1112;
    *(int32_t *)(v67 - 1108) = 0;
    int32_t v68 = g4; // 0x20b19
    g4 = g365;
    *(int32_t *)(g5 - 1112) = (int32_t)"MP.complete.mp_coop_tbeam_maze";
    *(int32_t *)(g5 - 1104) = 9;
    *(int32_t *)(g5 - 1100) = 63;
    function_22400(&g364, g4, v68);
    int32_t v69 = g5; // 0x20b50
    g4 = v69 - 1096;
    *(int32_t *)(v69 - 1092) = 0;
    int32_t v70 = g4; // 0x20b60
    g4 = g365;
    *(int32_t *)(g5 - 1096) = (int32_t)"MP.complete.mp_coop_tbeam_end";
    *(int32_t *)(g5 - 1088) = 9;
    *(int32_t *)(g5 - 1084) = 64;
    function_22400(&g364, g4, v70);
    int32_t v71 = g5; // 0x20b97
    g4 = v71 - 1080;
    *(int32_t *)(v71 - 1076) = 0;
    int32_t v72 = g4; // 0x20ba7
    g4 = g365;
    *(int32_t *)(g5 - 1080) = (int32_t)"MP.complete.mp_coop_paint_come_along";
    *(int32_t *)(g5 - 1072) = 9;
    *(int32_t *)(g5 - 1068) = 65;
    function_22400(&g364, g4, v72);
    int32_t v73 = g5; // 0x20bde
    g4 = v73 - 1064;
    *(int32_t *)(v73 - 1060) = 0;
    int32_t v74 = g4; // 0x20bee
    g4 = g365;
    *(int32_t *)(g5 - 1064) = (int32_t)"MP.complete.mp_coop_paint_redirect";
    *(int32_t *)(g5 - 1056) = 9;
    *(int32_t *)(g5 - 1052) = 66;
    function_22400(&g364, g4, v74);
    int32_t v75 = g5; // 0x20c25
    g4 = v75 - 1048;
    *(int32_t *)(v75 - 1044) = 0;
    int32_t v76 = g4; // 0x20c35
    g4 = g365;
    *(int32_t *)(g5 - 1048) = (int32_t)"MP.complete.mp_coop_paint_bridge";
    *(int32_t *)(g5 - 1040) = 9;
    *(int32_t *)(g5 - 1036) = 67;
    function_22400(&g364, g4, v76);
    int32_t v77 = g5; // 0x20c6c
    g4 = v77 - 1032;
    *(int32_t *)(v77 - 1028) = 0;
    int32_t v78 = g4; // 0x20c7c
    g4 = g365;
    *(int32_t *)(g5 - 1032) = (int32_t)"MP.complete.mp_coop_paint_walljumps";
    *(int32_t *)(g5 - 1024) = 9;
    *(int32_t *)(g5 - 1020) = 68;
    function_22400(&g364, g4, v78);
    int32_t v79 = g5; // 0x20cb3
    g4 = v79 - 1016;
    *(int32_t *)(v79 - 1012) = 0;
    int32_t v80 = g4; // 0x20cc3
    g4 = g365;
    *(int32_t *)(g5 - 1016) = (int32_t)"MP.complete.mp_coop_paint_speed_fling";
    *(int32_t *)(g5 - 1008) = 9;
    *(int32_t *)(g5 - 1004) = 69;
    function_22400(&g364, g4, v80);
    int32_t v81 = g5; // 0x20cfa
    g4 = v81 - 1000;
    *(int32_t *)(v81 - 996) = 0;
    int32_t v82 = g4; // 0x20d0a
    g4 = g365;
    *(int32_t *)(g5 - 1000) = (int32_t)"MP.complete.mp_coop_paint_red_racer";
    *(int32_t *)(g5 - 992) = 9;
    *(int32_t *)(g5 - 988) = 70;
    function_22400(&g364, g4, v82);
    int32_t v83 = g5; // 0x20d41
    g4 = v83 - 984;
    *(int32_t *)(v83 - 980) = 0;
    int32_t v84 = g4; // 0x20d51
    g4 = g365;
    *(int32_t *)(g5 - 984) = (int32_t)"MP.complete.mp_coop_paint_speed_catch";
    *(int32_t *)(g5 - 976) = 9;
    *(int32_t *)(g5 - 972) = 71;
    function_22400(&g364, g4, v84);
    int32_t v85 = g5; // 0x20d88
    g4 = v85 - 968;
    *(int32_t *)(v85 - 964) = 0;
    int32_t v86 = g4; // 0x20d98
    g4 = g365;
    *(int32_t *)(g5 - 968) = (int32_t)"MP.complete.mp_coop_paint_longjump_intro";
    *(int32_t *)(g5 - 960) = 9;
    *(int32_t *)(g5 - 956) = 72;
    function_22400(&g364, g4, v86);
    int32_t v87 = g5; // 0x20dcf
    g4 = v87 - 952;
    *(int32_t *)(v87 - 948) = 0;
    int32_t v88 = g4; // 0x20ddf
    g4 = g365;
    *(int32_t *)(g5 - 952) = (int32_t)"MP.complete.mp_coop_credits";
    *(int32_t *)(g5 - 944) = 9;
    *(int32_t *)(g5 - 940) = 73;
    function_22400(&g364, g4, v88);
    int32_t v89 = g5; // 0x20e16
    g4 = v89 - 936;
    *(int32_t *)(v89 - 932) = 0;
    int32_t v90 = g4; // 0x20e26
    g4 = g365;
    *(int32_t *)(g5 - 936) = (int32_t)"MP.complete.mp_coop_separation_1";
    *(int32_t *)(g5 - 928) = 9;
    *(int32_t *)(g5 - 924) = 74;
    function_22400(&g364, g4, v90);
    int32_t v91 = g5; // 0x20e5d
    g4 = v91 - 920;
    *(int32_t *)(v91 - 916) = 0;
    int32_t v92 = g4; // 0x20e6d
    g4 = g365;
    *(int32_t *)(g5 - 920) = (int32_t)"MP.complete.mp_coop_tripleaxis";
    *(int32_t *)(g5 - 912) = 9;
    *(int32_t *)(g5 - 908) = 75;
    function_22400(&g364, g4, v92);
    int32_t v93 = g5; // 0x20ea4
    g4 = v93 - 904;
    *(int32_t *)(v93 - 900) = 0;
    int32_t v94 = g4; // 0x20eb4
    g4 = g365;
    *(int32_t *)(g5 - 904) = (int32_t)"MP.complete.mp_coop_catapult_catch";
    *(int32_t *)(g5 - 896) = 9;
    *(int32_t *)(g5 - 892) = 76;
    function_22400(&g364, g4, v94);
    int32_t v95 = g5; // 0x20eeb
    g4 = v95 - 888;
    *(int32_t *)(v95 - 884) = 0;
    int32_t v96 = g4; // 0x20efb
    g4 = g365;
    *(int32_t *)(g5 - 888) = (int32_t)"MP.complete.mp_coop_2paints_1bridge";
    *(int32_t *)(g5 - 880) = 9;
    *(int32_t *)(g5 - 876) = 77;
    function_22400(&g364, g4, v96);
    int32_t v97 = g5; // 0x20f32
    g4 = v97 - 872;
    *(int32_t *)(v97 - 868) = 0;
    int32_t v98 = g4; // 0x20f42
    g4 = g365;
    *(int32_t *)(g5 - 872) = (int32_t)"MP.complete.mp_coop_paint_conversion";
    *(int32_t *)(g5 - 864) = 9;
    *(int32_t *)(g5 - 860) = 78;
    function_22400(&g364, g4, v98);
    int32_t v99 = g5; // 0x20f79
    g4 = v99 - 856;
    *(int32_t *)(v99 - 852) = 0;
    int32_t v100 = g4; // 0x20f89
    g4 = g365;
    *(int32_t *)(g5 - 856) = (int32_t)"MP.complete.mp_coop_bridge_catch";
    *(int32_t *)(g5 - 848) = 9;
    *(int32_t *)(g5 - 844) = 79;
    function_22400(&g364, g4, v100);
    int32_t v101 = g5; // 0x20fc0
    g4 = v101 - 840;
    *(int32_t *)(v101 - 836) = 0;
    int32_t v102 = g4; // 0x20fd0
    g4 = g365;
    *(int32_t *)(g5 - 840) = (int32_t)"MP.complete.mp_coop_laser_tbeam";
    *(int32_t *)(g5 - 832) = 9;
    *(int32_t *)(g5 - 828) = 80;
    function_22400(&g364, g4, v102);
    int32_t v103 = g5; // 0x21007
    g4 = v103 - 824;
    *(int32_t *)(v103 - 820) = 0;
    int32_t v104 = g4; // 0x21017
    g4 = g365;
    *(int32_t *)(g5 - 824) = (int32_t)"MP.complete.mp_coop_paint_rat_maze";
    *(int32_t *)(g5 - 816) = 9;
    *(int32_t *)(g5 - 812) = 81;
    function_22400(&g364, g4, v104);
    int32_t v105 = g5; // 0x2104e
    g4 = v105 - 808;
    *(int32_t *)(v105 - 804) = 0;
    int32_t v106 = g4; // 0x2105e
    g4 = g365;
    *(int32_t *)(g5 - 808) = (int32_t)"MP.complete.mp_coop_paint_crazy_box";
    *(int32_t *)(g5 - 800) = 9;
    *(int32_t *)(g5 - 796) = 82;
    function_22400(&g364, g4, v106);
    int32_t v107 = g5; // 0x21095
    g4 = v107 - 792;
    *(int32_t *)(v107 - 788) = 0;
    int32_t v108 = g4; // 0x210a5
    g4 = g365;
    *(int32_t *)(g5 - 792) = (int32_t)"MP.complete.mp_coop_lobby_3";
    *(int32_t *)(g5 - 784) = 9;
    *(int32_t *)(g5 - 780) = 83;
    function_22400(&g364, g4, v108);
    int32_t v109 = g5; // 0x210dc
    g4 = v109 - 776;
    *(int32_t *)(v109 - 772) = 0;
    int32_t v110 = g4; // 0x210ec
    g4 = g365;
    *(int32_t *)(g5 - 776) = (int32_t)"MP.complete.mp_coop_community_hub";
    *(int32_t *)(g5 - 768) = 9;
    *(int32_t *)(g5 - 764) = 84;
    function_22400(&g364, g4, v110);
    int32_t v111 = g5; // 0x21123
    g4 = v111 - 760;
    *(int32_t *)(v111 - 756) = 0;
    int32_t v112 = g4; // 0x21133
    g4 = g365;
    *(int32_t *)(g5 - 752) = 0;
    *(int32_t *)(g5 - 760) = (int32_t)"MP.taunt.own";
    *(int32_t *)(g5 - 748) = 192;
    function_22400(&g364, g4, v112);
    int32_t v113 = g5; // 0x2116a
    g4 = v113 - 744;
    *(int32_t *)(v113 - 740) = 0;
    int32_t v114 = g4; // 0x2117a
    g4 = g365;
    *(int32_t *)(g5 - 744) = (int32_t)"MP.taunt.own.SmallWave";
    *(int32_t *)(g5 - 736) = 9;
    *(int32_t *)(g5 - 732) = 192;
    function_22400(&g364, g4, v114);
    int32_t v115 = g5; // 0x211b1
    g4 = v115 - 728;
    *(int32_t *)(v115 - 724) = 0;
    int32_t v116 = g4; // 0x211c1
    g4 = g365;
    *(int32_t *)(g5 - 728) = (int32_t)"MP.taunt.use.SmallWave";
    *(int32_t *)(g5 - 720) = 9;
    *(int32_t *)(g5 - 716) = (int32_t)"GNU";
    function_22400(&g364, g4, v116);
    int32_t v117 = g5; // 0x211f8
    g4 = v117 - 712;
    *(int32_t *)(v117 - 708) = 0;
    int32_t v118 = g4; // 0x21208
    g4 = g365;
    *(int32_t *)(g5 - 712) = (int32_t)"MP.taunt.own.RobotDance";
    *(int32_t *)(g5 - 704) = 9;
    *(int32_t *)(g5 - 700) = 193;
    function_22400(&g364, g4, v118);
    int32_t v119 = g5; // 0x2123f
    g4 = v119 - 696;
    *(int32_t *)(v119 - 692) = 0;
    int32_t v120 = g4; // 0x2124f
    g4 = g365;
    *(int32_t *)(g5 - 696) = (int32_t)"MP.taunt.use.RobotDance";
    *(int32_t *)(g5 - 688) = 9;
    *(int32_t *)(g5 - 684) = (int32_t)&g16;
    function_22400(&g364, g4, v120);
    int32_t v121 = g5; // 0x21286
    g4 = v121 - 680;
    *(int32_t *)(v121 - 676) = 0;
    int32_t v122 = g4; // 0x21296
    g4 = g365;
    *(int32_t *)(g5 - 680) = (int32_t)"MP.taunt.own.Laugh";
    *(int32_t *)(g5 - 672) = 9;
    *(int32_t *)(g5 - 668) = 194;
    function_22400(&g364, g4, v122);
    int32_t v123 = g5; // 0x212cd
    g4 = v123 - 664;
    *(int32_t *)(v123 - 660) = 0;
    int32_t v124 = g4; // 0x212dd
    g4 = g365;
    *(int32_t *)(g5 - 664) = (int32_t)"MP.taunt.use.Laugh";
    *(int32_t *)(g5 - 656) = 9;
    *(int32_t *)(g5 - 652) = (int32_t)&g17;
    function_22400(&g364, g4, v124);
    int32_t v125 = g5; // 0x21314
    g4 = v125 - 648;
    *(int32_t *)(v125 - 644) = 0;
    int32_t v126 = g4; // 0x21324
    g4 = g365;
    *(int32_t *)(g5 - 648) = (int32_t)"MP.taunt.own.TrickFire";
    *(int32_t *)(g5 - 640) = 9;
    *(int32_t *)(g5 - 636) = 195;
    function_22400(&g364, g4, v126);
    int32_t v127 = g5; // 0x2135b
    g4 = v127 - 632;
    *(int32_t *)(v127 - 628) = 0;
    int32_t v128 = g4; // 0x2136b
    g4 = g365;
    *(int32_t *)(g5 - 632) = (int32_t)"MP.taunt.use.TrickFire";
    *(int32_t *)(g5 - 624) = 9;
    *(int32_t *)(g5 - 620) = (int32_t)&g18;
    function_22400(&g364, g4, v128);
    int32_t v129 = g5; // 0x213a2
    g4 = v129 - 616;
    *(int32_t *)(v129 - 612) = 0;
    int32_t v130 = g4; // 0x213b2
    g4 = g365;
    *(int32_t *)(g5 - 616) = (int32_t)"MP.taunt.own.HighFive";
    *(int32_t *)(g5 - 608) = 9;
    *(int32_t *)(g5 - 604) = 196;
    function_22400(&g364, g4, v130);
    int32_t v131 = g5; // 0x213e9
    g4 = v131 - 600;
    *(int32_t *)(v131 - 596) = 0;
    int32_t v132 = g4; // 0x213f9
    g4 = g365;
    *(int32_t *)(g5 - 600) = (int32_t)"MP.taunt.use.HighFive";
    *(int32_t *)(g5 - 592) = 9;
    *(int32_t *)(g5 - 588) = (int32_t)&g19;
    function_22400(&g364, g4, v132);
    int32_t v133 = g5; // 0x21430
    g4 = v133 - 584;
    *(int32_t *)(v133 - 580) = 0;
    int32_t v134 = g4; // 0x21440
    g4 = g365;
    *(int32_t *)(g5 - 584) = (int32_t)"MP.taunt.own.TeamHug";
    *(int32_t *)(g5 - 576) = 9;
    *(int32_t *)(g5 - 572) = 197;
    function_22400(&g364, g4, v134);
    int32_t v135 = g5; // 0x21477
    g4 = v135 - 568;
    *(int32_t *)(v135 - 564) = 0;
    int32_t v136 = g4; // 0x21487
    g4 = g365;
    *(int32_t *)(g5 - 568) = (int32_t)"MP.taunt.use.TeamHug";
    *(int32_t *)(g5 - 560) = 9;
    *(int32_t *)(g5 - 556) = (int32_t)&g20;
    function_22400(&g364, g4, v136);
    int32_t v137 = g5; // 0x214be
    g4 = v137 - 552;
    *(int32_t *)(v137 - 548) = 0;
    int32_t v138 = g4; // 0x214ce
    g4 = g365;
    *(int32_t *)(g5 - 552) = (int32_t)"MP.taunt.own.TeamTease";
    *(int32_t *)(g5 - 544) = 9;
    *(int32_t *)(g5 - 540) = 198;
    function_22400(&g364, g4, v138);
    int32_t v139 = g5; // 0x21505
    g4 = v139 - 536;
    *(int32_t *)(v139 - 532) = 0;
    int32_t v140 = g4; // 0x21515
    g4 = g365;
    *(int32_t *)(g5 - 536) = (int32_t)"MP.taunt.use.TeamTease";
    *(int32_t *)(g5 - 528) = 9;
    *(int32_t *)(g5 - 524) = (int32_t)&g21;
    function_22400(&g364, g4, v140);
    int32_t v141 = g5; // 0x2154c
    g4 = v141 - 520;
    *(int32_t *)(v141 - 516) = 0;
    int32_t v142 = g4; // 0x2155c
    g4 = g365;
    *(int32_t *)(g5 - 520) = (int32_t)"MP.taunt.own.RPS";
    *(int32_t *)(g5 - 512) = 9;
    *(int32_t *)(g5 - 508) = 199;
    function_22400(&g364, g4, v142);
    int32_t v143 = g5; // 0x21593
    g4 = v143 - 504;
    *(int32_t *)(v143 - 500) = 0;
    int32_t v144 = g4; // 0x215a3
    g4 = g365;
    *(int32_t *)(g5 - 504) = (int32_t)"MP.taunt.use.RPS";
    *(int32_t *)(g5 - 496) = 9;
    *(int32_t *)(g5 - 492) = (int32_t)&g22;
    function_22400(&g364, g4, v144);
    int32_t v145 = g5; // 0x215da
    g4 = v145 - 488;
    *(int32_t *)(v145 - 484) = 0;
    int32_t v146 = g4; // 0x215ea
    g4 = g365;
    *(int32_t *)(g5 - 488) = (int32_t)"GI.lesson.version_number";
    *(int32_t *)(g5 - 480) = 8;
    *(int32_t *)(g5 - 476) = 48;
    function_22400(&g364, g4, v146);
    int32_t v147 = g5; // 0x21621
    g4 = v147 - 472;
    *(int32_t *)(v147 - 468) = 0;
    int32_t v148 = g4; // 0x21631
    g4 = g365;
    *(int32_t *)(g5 - 472) = (int32_t)"GI.lesson.return_to_hub";
    *(int32_t *)(g5 - 464) = 8;
    *(int32_t *)(g5 - 460) = 49;
    function_22400(&g364, g4, v148);
    int32_t v149 = g5; // 0x21668
    g4 = v149 - 456;
    *(int32_t *)(v149 - 452) = 0;
    int32_t v150 = g4; // 0x21678
    g4 = g365;
    *(int32_t *)(g5 - 456) = (int32_t)"GI.lesson.create_left_portal";
    *(int32_t *)(g5 - 448) = 8;
    *(int32_t *)(g5 - 444) = 50;
    function_22400(&g364, g4, v150);
    int32_t v151 = g5; // 0x216af
    g4 = v151 - 440;
    *(int32_t *)(v151 - 436) = 0;
    int32_t v152 = g4; // 0x216bf
    g4 = g365;
    *(int32_t *)(g5 - 440) = (int32_t)"GI.lesson.create_right_portal";
    *(int32_t *)(g5 - 432) = 8;
    *(int32_t *)(g5 - 428) = 51;
    function_22400(&g364, g4, v152);
    int32_t v153 = g5; // 0x216f6
    g4 = v153 - 424;
    *(int32_t *)(v153 - 420) = 0;
    int32_t v154 = g4; // 0x21706
    g4 = g365;
    *(int32_t *)(g5 - 424) = (int32_t)"GI.lesson.movement";
    *(int32_t *)(g5 - 416) = 8;
    *(int32_t *)(g5 - 412) = 52;
    function_22400(&g364, g4, v154);
    int32_t v155 = g5; // 0x2173d
    g4 = v155 - 408;
    *(int32_t *)(v155 - 404) = 0;
    int32_t v156 = g4; // 0x2174d
    g4 = g365;
    *(int32_t *)(g5 - 408) = (int32_t)"GI.lesson.push_button";
    *(int32_t *)(g5 - 400) = 8;
    *(int32_t *)(g5 - 396) = 53;
    function_22400(&g364, g4, v156);
    int32_t v157 = g5; // 0x21784
    g4 = v157 - 392;
    *(int32_t *)(v157 - 388) = 0;
    int32_t v158 = g4; // 0x21794
    g4 = g365;
    *(int32_t *)(g5 - 392) = (int32_t)"GI.lesson.countdown_timer";
    *(int32_t *)(g5 - 384) = 8;
    *(int32_t *)(g5 - 380) = 54;
    function_22400(&g364, g4, v158);
    int32_t v159 = g5; // 0x217cb
    g4 = v159 - 376;
    *(int32_t *)(v159 - 372) = 0;
    int32_t v160 = g4; // 0x217db
    g4 = g365;
    *(int32_t *)(g5 - 376) = (int32_t)"GI.lesson.air_taunt";
    *(int32_t *)(g5 - 368) = 8;
    *(int32_t *)(g5 - 364) = 55;
    function_22400(&g364, g4, v160);
    int32_t v161 = g5; // 0x21812
    g4 = v161 - 360;
    *(int32_t *)(v161 - 356) = 0;
    int32_t v162 = g4; // 0x21822
    g4 = g365;
    *(int32_t *)(g5 - 360) = (int32_t)"GI.lesson.new_taunt_earned";
    *(int32_t *)(g5 - 352) = 8;
    *(int32_t *)(g5 - 348) = 56;
    function_22400(&g364, g4, v162);
    int32_t v163 = g5; // 0x21859
    g4 = v163 - 344;
    *(int32_t *)(v163 - 340) = 0;
    int32_t v164 = g4; // 0x21869
    g4 = g365;
    *(int32_t *)(g5 - 344) = (int32_t)"GI.lesson.teach_auto_bounce_suppression";
    *(int32_t *)(g5 - 336) = 8;
    *(int32_t *)(g5 - 332) = 57;
    function_22400(&g364, g4, v164);
    int32_t v165 = g5; // 0x218a0
    g4 = v165 - 328;
    *(int32_t *)(v165 - 324) = 0;
    int32_t v166 = g4; // 0x218b0
    g4 = g365;
    *(int32_t *)(g5 - 328) = (int32_t)"GI.lesson.zoom";
    *(int32_t *)(g5 - 320) = 8;
    *(int32_t *)(g5 - 316) = 58;
    function_22400(&g364, g4, v166);
    int32_t v167 = g5; // 0x218e7
    g4 = v167 - 312;
    *(int32_t *)(v167 - 308) = 0;
    int32_t v168 = g4; // 0x218f7
    g4 = g365;
    *(int32_t *)(g5 - 312) = (int32_t)"GI.lesson.unzoom";
    *(int32_t *)(g5 - 304) = 8;
    *(int32_t *)(g5 - 300) = 59;
    function_22400(&g364, g4, v168);
    int32_t v169 = g5; // 0x2192e
    g4 = v169 - 296;
    *(int32_t *)(v169 - 292) = 0;
    int32_t v170 = g4; // 0x2193e
    g4 = g365;
    *(int32_t *)(g5 - 296) = (int32_t)"GI.lesson.jump";
    *(int32_t *)(g5 - 288) = 8;
    *(int32_t *)(g5 - 284) = 60;
    function_22400(&g364, g4, v170);
    int32_t v171 = g5; // 0x21975
    g4 = v171 - 280;
    *(int32_t *)(v171 - 276) = 0;
    int32_t v172 = g4; // 0x21985
    g4 = g365;
    *(int32_t *)(g5 - 280) = (int32_t)"GI.lesson.movement_sp";
    *(int32_t *)(g5 - 272) = 8;
    *(int32_t *)(g5 - 268) = 61;
    function_22400(&g364, g4, v172);
    int32_t v173 = g5; // 0x219bc
    g4 = v173 - 264;
    *(int32_t *)(v173 - 260) = 0;
    int32_t v174 = g4; // 0x219cc
    g4 = g365;
    *(int32_t *)(g5 - 264) = (int32_t)"GI.lesson.drop_object";
    *(int32_t *)(g5 - 256) = 8;
    *(int32_t *)(g5 - 252) = 62;
    function_22400(&g364, g4, v174);
    int32_t v175 = g5; // 0x21a03
    g4 = v175 - 248;
    *(int32_t *)(v175 - 244) = 0;
    int32_t v176 = g4; // 0x21a13
    g4 = g365;
    *(int32_t *)(g5 - 248) = (int32_t)"GI.lesson.pick_up_object";
    *(int32_t *)(g5 - 240) = 8;
    *(int32_t *)(g5 - 236) = 63;
    function_22400(&g364, g4, v176);
    int32_t v177 = g5; // 0x21a4a
    g4 = v177 - 232;
    *(int32_t *)(v177 - 228) = 0;
    int32_t v178 = g4; // 0x21a5a
    g4 = g365;
    *(int32_t *)(g5 - 232) = (int32_t)"GI.lesson.partner_view";
    *(int32_t *)(g5 - 224) = 8;
    *(int32_t *)(g5 - 220) = 64;
    function_22400(&g364, g4, v178);
    int32_t v179 = g5; // 0x21a91
    g4 = v179 - 216;
    *(int32_t *)(v179 - 212) = 0;
    int32_t v180 = g4; // 0x21aa1
    g4 = g365;
    *(int32_t *)(g5 - 216) = (int32_t)"GI.lesson.serverside_hint";
    *(int32_t *)(g5 - 208) = 8;
    *(int32_t *)(g5 - 204) = 65;
    g4 = function_22400(&g364, g4, v180);
    g4 = function_2cb40((int32_t)"ACH.SURVIVE_CONTAINER_RIDE");
    g4 = function_2cb40((int32_t)"ACH.WAKE_UP");
    g4 = function_2cb40((int32_t)"ACH.LASER");
    g4 = function_2cb40((int32_t)"ACH.BRIDGE");
    g4 = function_2cb40((int32_t)"ACH.BREAK_OUT");
    g4 = function_2cb40((int32_t)"ACH.STALEMATE_ASSOCIATE");
    g4 = function_2cb40((int32_t)"ACH.ADDICTED_TO_SPUDS");
    g4 = function_2cb40((int32_t)"ACH.BLUE_GEL");
    g4 = function_2cb40((int32_t)"ACH.ORANGE_GEL");
    g4 = function_2cb40((int32_t)"ACH.WHITE_GEL");
    g4 = function_2cb40((int32_t)"ACH.TRACTOR_BEAM");
    g10 = 0;
    int32_t v181 = function_2cb40((int32_t)"ACH.TRIVIAL_TEST") + 10; // 0x21b6a
    g4 = v181;
    *(int32_t *)(g5 - 1628) = v181;
    g4 = *(int32_t *)(g5 - 1628);
    g6 = g10 + 1;
    int32_t v182 = function_1bc60(); // 0x21b7f
    g4 = v182;
    g8 = v182;
    int32_t v183 = *(int32_t *)(g5 - 1628); // 0x21b8a
    g4 = v183;
    function_2da40(v182, v183, "%s[%d]");
    int32_t v184 = g5; // 0x21bac
    g4 = v184 - 200;
    *(int32_t *)(v184 - 196) = 1;
    int32_t v185 = g4; // 0x21bbc
    g4 = g365;
    *(int32_t *)(g5 - 192) = 9;
    *(int32_t *)(g5 - 200) = g8;
    *(int32_t *)(g5 - 188) = g10;
    g4 = function_22400(&g364, g4, v185);
    int32_t v186 = g6; // 0x21beb
    while (v186 != 2) {
        // 0x221c8
        g10 = v186;
        g4 = *(int32_t *)(g5 - 1628);
        g6 = v186 + 1;
        v182 = function_1bc60();
        g4 = v182;
        g8 = v182;
        v183 = *(int32_t *)(g5 - 1628);
        g4 = v183;
        function_2da40(v182, v183, "%s[%d]");
        v184 = g5;
        g4 = v184 - 200;
        *(int32_t *)(v184 - 196) = 1;
        v185 = g4;
        g4 = g365;
        *(int32_t *)(g5 - 192) = 9;
        *(int32_t *)(g5 - 200) = g8;
        *(int32_t *)(g5 - 188) = g10;
        g4 = function_22400(&g364, g4, v185);
        v186 = g6;
    }
    // 0x21bf4
    g6 = v186 & -256;
    g4 = function_2cb40((int32_t)"ACH.WHEATLEY_TRIES_TO");
    g4 = function_2cb40((int32_t)"ACH.SHOOT_THE_MOON");
    g4 = function_2cb40((int32_t)"ACH.BOX_HOLE_IN_ONE");
    g4 = function_2cb40((int32_t)"ACH.SPEED_RUN_LEVEL");
    g4 = function_2cb40((int32_t)"ACH.COMPLIANT");
    g4 = function_2cb40((int32_t)"ACH.SAVE_CUBE");
    g4 = function_2cb40((int32_t)"ACH.LAUNCH_TURRET");
    g4 = function_2cb40((int32_t)"ACH.CLEAN_UP");
    g4 = function_2cb40((int32_t)"ACH.REENTER_TEST_CHAMBERS");
    g4 = function_2cb40((int32_t)"ACH.NOT_THE_DROID");
    g4 = function_2cb40((int32_t)"ACH.SAVE_REDEMPTION_TURRET");
    g4 = function_2cb40((int32_t)"ACH.CATCH_CRAZY_BOX");
    g4 = function_2cb40((int32_t)"ACH.NO_BOAT");
    int32_t v187 = function_2cb40((int32_t)"ACH.A3_DOORS"); // 0x21c99
    g4 = v187;
    g8 = v187 + 10;
    g6++;
    int32_t v188 = function_1bc60(); // 0x21cae
    g4 = v188;
    g10 = v188;
    function_2da40(v188, g8, "%s[%d]");
    g4 = g6 + 31;
    *(int32_t *)(g5 - 184) = g10;
    *(int32_t *)(g5 - 172) = g4;
    int32_t v189 = g5; // 0x21ce4
    g4 = g365;
    *(int32_t *)(v189 - 180) = 1;
    *(int32_t *)(g5 - 176) = 9;
    g4 = function_22400(&g364, g4, v189 - 184);
    int32_t v190 = g6; // 0x21d17
    while (v190 != 6) {
        g6 = v190 + 1;
        v188 = function_1bc60();
        g4 = v188;
        g10 = v188;
        function_2da40(v188, g8, "%s[%d]");
        g4 = g6 + 31;
        *(int32_t *)(g5 - 184) = g10;
        *(int32_t *)(g5 - 172) = g4;
        v189 = g5;
        g4 = g365;
        *(int32_t *)(v189 - 180) = 1;
        *(int32_t *)(g5 - 176) = 9;
        g4 = function_22400(&g364, g4, v189 - 184);
        v190 = g6;
    }
    // 0x21d1c
    g6 = v190 & -256;
    g4 = function_2cb40((int32_t)"ACH.PORTRAIT");
    g4 = function_2cb40((int32_t)"ACH.DEFIANT");
    int32_t v191 = function_2cb40((int32_t)"ACH.BREAK_MONITORS"); // 0x21d3d
    g4 = v191;
    g8 = v191 + 10;
    g6++;
    int32_t v192 = function_1bc60(); // 0x21d4e
    g4 = v192;
    g10 = v192;
    function_2da40(v192, g8, "%s[%d]");
    g4 = g6 + 63;
    *(int32_t *)(g5 - 168) = g10;
    *(int32_t *)(g5 - 156) = g4;
    int32_t v193 = g5; // 0x21d84
    g4 = g365;
    *(int32_t *)(v193 - 164) = 1;
    *(int32_t *)(g5 - 160) = 9;
    g4 = function_22400(&g364, g4, v193 - 168);
    int32_t v194 = g6; // 0x21db7
    while (v194 != 11) {
        g6 = v194 + 1;
        v192 = function_1bc60();
        g4 = v192;
        g10 = v192;
        function_2da40(v192, g8, "%s[%d]");
        g4 = g6 + 63;
        *(int32_t *)(g5 - 168) = g10;
        *(int32_t *)(g5 - 156) = g4;
        v193 = g5;
        g4 = g365;
        *(int32_t *)(v193 - 164) = 1;
        *(int32_t *)(g5 - 160) = 9;
        g4 = function_22400(&g364, g4, v193 - 168);
        v194 = g6;
    }
    // 0x21dbc
    g6 = v194 & -256;
    g4 = function_2cb40((int32_t)"ACH.HI_FIVE_YOUR_PARTNER");
    g4 = function_2cb40((int32_t)"ACH.TEAM_BUILDING");
    g4 = function_2cb40((int32_t)"ACH.MASS_AND_VELOCITY");
    g4 = function_2cb40((int32_t)"ACH.HUG_NAME");
    g4 = function_2cb40((int32_t)"ACH.EXCURSION_FUNNELS");
    g4 = function_2cb40((int32_t)"ACH.NEW_BLOOD");
    g4 = function_2cb40((int32_t)"ACH.NICE_CATCH");
    int32_t v195 = function_2cb40((int32_t)"ACH.TAUNTS"); // 0x21e19
    g4 = v195;
    g8 = v195 + 10;
    g6++;
    int32_t v196 = function_1bc60(); // 0x21e2e
    g4 = v196;
    g10 = v196;
    function_2da40(v196, g8, "%s[%d]");
    g4 = g6 + 95;
    *(int32_t *)(g5 - 152) = g10;
    *(int32_t *)(g5 - 140) = g4;
    int32_t v197 = g5; // 0x21e64
    g4 = g365;
    *(int32_t *)(v197 - 148) = 1;
    *(int32_t *)(g5 - 144) = 9;
    g4 = function_22400(&g364, g4, v197 - 152);
    int32_t v198 = g6; // 0x21e97
    while (v198 != 8) {
        g6 = v198 + 1;
        v196 = function_1bc60();
        g4 = v196;
        g10 = v196;
        function_2da40(v196, g8, "%s[%d]");
        g4 = g6 + 95;
        *(int32_t *)(g5 - 152) = g10;
        *(int32_t *)(g5 - 140) = g4;
        v197 = g5;
        g4 = g365;
        *(int32_t *)(v197 - 148) = 1;
        *(int32_t *)(g5 - 144) = 9;
        g4 = function_22400(&g364, g4, v197 - 152);
        v198 = g6;
    }
    // 0x21e9c
    g6 = v198 & -256;
    g4 = function_2cb40((int32_t)"ACH.YOU_MONSTER");
    g4 = function_2cb40((int32_t)"ACH.PARTNER_DROP");
    g4 = function_2cb40((int32_t)"ACH.PARTY_OF_THREE");
    g4 = function_2cb40((int32_t)"ACH.PORTAL_TAUNT");
    g4 = function_2cb40((int32_t)"ACH.TEACHER");
    g4 = function_2cb40((int32_t)"ACH.WITH_STYLE");
    g4 = function_2cb40((int32_t)"ACH.LIMITED_PORTALS");
    g4 = function_2cb40((int32_t)"ACH.FOUR_PORTALS");
    g4 = function_2cb40((int32_t)"ACH.SPEED_RUN_COOP");
    g4 = function_2cb40((int32_t)"ACH.STAYING_ALIVE");
    int32_t v199 = function_2cb40((int32_t)"ACH.TAUNT_CAMERA"); // 0x21f1d
    g4 = v199;
    g8 = v199 + 10;
    g6++;
    int32_t v200 = function_1bc60(); // 0x21f2b
    g4 = v200;
    g10 = v200;
    function_2da40(v200, g8, "%s[%d]");
    g4 = g6 + 127;
    *(int32_t *)(g5 - 128) = 9;
    *(int32_t *)(g5 - 124) = g4;
    int32_t v201 = g5; // 0x21f5f
    g4 = g365;
    *(int32_t *)(v201 - 132) = 1;
    *(int32_t *)(g5 - 136) = g10;
    g4 = function_22400(&g364, g4, v201 - 136);
    int32_t v202 = g6; // 0x21f8e
    while (v202 != 5) {
        g6 = v202 + 1;
        v200 = function_1bc60();
        g4 = v200;
        g10 = v200;
        function_2da40(v200, g8, "%s[%d]");
        g4 = g6 + 127;
        *(int32_t *)(g5 - 128) = 9;
        *(int32_t *)(g5 - 124) = g4;
        v201 = g5;
        g4 = g365;
        *(int32_t *)(v201 - 132) = 1;
        *(int32_t *)(g5 - 136) = g10;
        g4 = function_22400(&g364, g4, v201 - 136);
        v202 = g6;
    }
    // 0x21f93
    g10 = (int32_t)&g26;
    g6 = v202 & -256;
    g4 = function_2cb40((int32_t)"ACH.ROCK_CRUSHES_ROBOT");
    g4 = function_2cb40((int32_t)"ACH.SPREAD_THE_LOVE");
    g4 = function_2cb40((int32_t)"ACH.SUMMER_SALE");
    int32_t v203 = function_2cb40((int32_t)"ACH.SPREAD_THE_LOVE") + 10; // 0x21fca
    g4 = v203;
    *(int32_t *)(g5 - 1628) = v203;
    g4 = *(int32_t *)(g5 - 1628);
    g6++;
    int32_t v204 = function_1bc60(); // 0x21fdf
    g4 = v204;
    g8 = v204;
    int32_t v205 = *(int32_t *)(g5 - 1628); // 0x21fea
    g4 = v205;
    function_2da40(v204, v205, "%s[%d]");
    int32_t v206 = g5; // 0x2200c
    g4 = v206 - 120;
    *(int32_t *)(v206 - 108) = g10;
    int32_t v207 = g4; // 0x22012
    g4 = g365;
    g10 += 8;
    *(int32_t *)(g5 - 116) = 1;
    *(int32_t *)(g5 - 112) = 64;
    *(int32_t *)(g5 - 120) = g8;
    g4 = function_22400(&g364, g4, v207);
    int32_t v208 = g6; // 0x2203f
    while (v208 != 3) {
        // 0x21fd3
        g4 = *(int32_t *)(g5 - 1628);
        g6 = v208 + 1;
        v204 = function_1bc60();
        g4 = v204;
        g8 = v204;
        v205 = *(int32_t *)(g5 - 1628);
        g4 = v205;
        function_2da40(v204, v205, "%s[%d]");
        v206 = g5;
        g4 = v206 - 120;
        *(int32_t *)(v206 - 108) = g10;
        v207 = g4;
        g4 = g365;
        g10 += 8;
        *(int32_t *)(g5 - 116) = 1;
        *(int32_t *)(g5 - 112) = 64;
        *(int32_t *)(g5 - 120) = g8;
        g4 = function_22400(&g364, g4, v207);
        v208 = g6;
    }
    // 0x22044
    g10 = &g30;
    g6 = v208 & -256;
    int32_t v209 = function_2cb40((int32_t)"ACH.SPEED_RUN_COOP") + 10; // 0x22057
    g4 = v209;
    *(int32_t *)(g5 - 1628) = v209;
    g4 = *(int32_t *)(g5 - 1628);
    g6++;
    int32_t v210 = function_1bc60(); // 0x2206c
    g4 = v210;
    g8 = v210;
    int32_t v211 = *(int32_t *)(g5 - 1628); // 0x22077
    g4 = v211;
    function_2da40(v210, v211, "%s[%d]");
    g4 = g5 - 104;
    *(int32_t *)(g5 - 92) = g10;
    int32_t v212 = g4; // 0x2209f
    g4 = g365;
    g10 += 2;
    *(int32_t *)(g5 - 100) = 1;
    *(int32_t *)(g5 - 96) = 16;
    *(int32_t *)(g5 - 104) = g8;
    g4 = function_22400(&g364, g4, v212);
    while (g6 != 3) {
        // 0x22060
        g4 = *(int32_t *)(g5 - 1628);
        g6++;
        v210 = function_1bc60();
        g4 = v210;
        g8 = v210;
        v211 = *(int32_t *)(g5 - 1628);
        g4 = v211;
        function_2da40(v210, v211, "%s[%d]");
        g4 = g5 - 104;
        *(int32_t *)(g5 - 92) = g10;
        v212 = g4;
        g4 = g365;
        g10 += 2;
        *(int32_t *)(g5 - 100) = 1;
        *(int32_t *)(g5 - 96) = 16;
        *(int32_t *)(g5 - 104) = g8;
        g4 = function_22400(&g364, g4, v212);
    }
    int32_t v213 = g5 - 88; // 0x220d1
    g4 = v213;
    *(int32_t *)v213 = (int32_t)"GAME.stat_player_steps";
    int32_t v214 = g4; // 0x220db
    g4 = g365;
    *(int32_t *)(g5 - 84) = 2;
    *(int32_t *)(g5 - 80) = 32;
    *(int32_t *)(g5 - 76) = (int32_t)&g30;
    function_22400(&g364, g4, v214);
    int32_t v215 = g5 - 72; // 0x22109
    g4 = v215;
    *(int32_t *)v215 = (int32_t)"GAME.stat_portals_placed";
    int32_t v216 = g4; // 0x22113
    g4 = g365;
    *(int32_t *)(g5 - 68) = 2;
    *(int32_t *)(g5 - 64) = 32;
    *(int32_t *)(g5 - 60) = (int32_t)&g31;
    function_22400(&g364, g4, v216);
    int32_t v217 = g5 - 56; // 0x22141
    g4 = v217;
    *(int32_t *)v217 = (int32_t)"GAME.stat_portals_traveled";
    int32_t v218 = g4; // 0x2214b
    g4 = g365;
    *(int32_t *)(g5 - 52) = 2;
    *(int32_t *)(g5 - 48) = 32;
    *(int32_t *)(g5 - 44) = (int32_t)L"{Fb";
    function_22400(&g364, g4, v218);
    int32_t v219 = g5 - 40; // 0x22179
    g4 = v219;
    *(int32_t *)v219 = 0;
    int32_t v220 = g4; // 0x22183
    g4 = g365;
    *(int32_t *)(g5 - 36) = 0;
    *(int32_t *)(g5 - 32) = 0;
    *(int32_t *)(g5 - 28) = 0;
    function_22400(&g364, g4, v220);
    int32_t result = g364; // 0x221b1
    g4 = result;
    return result;
}

// Address range: 0x2222a - 0x2222f
int32_t function_2222a(void) {
    // 0x2222a
    return g4;
}

// Address range: 0x22230 - 0x22257
int32_t function_22230(void) {
    // 0x22230
    if (g362 == 0) {
        // 0x22250
        return g4;
    }
    // 0x2223f
    g4 = g363;
    return g363;
}

// Address range: 0x22264 - 0x2226a
int32_t function_22264(void) {
    // 0x22264
    return g4;
}

// Address range: 0x22275 - 0x2227b
int32_t function_22275(void) {
    // 0x22275
    return g4;
}

// Address range: 0x2227b - 0x2227d
int32_t function_2227b(void) {
    // 0x2227b
    return g4;
}

// Address range: 0x222f8 - 0x22307
int32_t function_222f8(void) {
    int32_t v1 = g6; // 0x222f8
    g4 = v1;
    *(int32_t *)(v1 + 16) = v1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 8);
    g10 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x223ab - 0x223b2
int32_t function_223ab(int32_t a1, int32_t a2, int32_t a3) {
    // 0x223ab
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x223b8 - 0x223df
int32_t function_223b8(void) {
    int32_t v1 = g4; // 0x223b8
    g9 = 2;
    int32_t v2 = v1 == 0 ? 2 : v1; // 0x223bf
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x223d0
    while (g7 > v3) {
        // 0x223d0
        v3 *= 2;
    }
    // 0x223d6
    g4 = v3;
    int32_t v4 = g6; // 0x223d6
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x223df - 0x223e0
int32_t function_223df(void) {
    // 0x223df
    return g4;
}

// Address range: 0x22400 - 0x224a9
int32_t function_22400(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g6; // 0x22406
    g6 = v1;
    int32_t v3 = g10; // 0x2240c
    g10 = a3;
    int32_t v4 = g8; // 0x22412
    g8 = a2;
    int32_t * v5 = (int32_t *)(v1 + 12); // 0x22418
    int32_t v6 = *v5; // 0x22418
    g4 = v6;
    uint32_t v7 = *(int32_t *)(v1 + 4); // 0x2241b
    g9 = v7;
    int32_t v8; // 0x224a1
    if (v6 >= v7) {
        // 0x22490
        g4 = v6 + 1 - v7;
        v8 = *v5;
        g4 = v8;
    } else {
        v8 = v6;
    }
    int32_t v9 = v8 + 1; // 0x22422
    g4 = v9;
    g9 = *a1;
    g7 = a2;
    *v5 = v9;
    g7 *= 16;
    int32_t v10 = g4 - g8 - 1; // 0x22431
    g4 = v10;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v11; // 0x22461
    int32_t v12; // 0x22461
    if (v10 < 1) {
        // 0x22422
        v12 = g7;
        v11 = g9;
    } else {
        int32_t v13 = g7; // 0x2243e
        int32_t v14 = g9; // 0x22445
        int32_t v15 = 16 * g8 + 16; // 0x2244f
        g4 = v15;
        int32_t v16 = v15 + v14; // 0x22452
        g9 = v16;
        g4 = function_2cb20(v16, v14 + v13, 16 * v10);
        int32_t v17 = *(int32_t *)g6; // 0x2245c
        g9 = v17;
        g7 = v13;
        v12 = v13;
        v11 = v17;
    }
    int32_t v18 = v11 + v12; // 0x22461
    g9 = v18;
    if (v18 != 0) {
        int32_t v19 = *(int32_t *)g10; // 0x22465
        g4 = v19;
        *(int32_t *)v18 = v19;
        int32_t v20 = *(int32_t *)(g10 + 4); // 0x22469
        g4 = v20;
        *(int32_t *)(g9 + 4) = v20;
        int32_t v21 = *(int32_t *)(g10 + 8); // 0x2246f
        g4 = v21;
        *(int32_t *)(g9 + 8) = v21;
        int32_t v22 = *(int32_t *)(g10 + 12); // 0x22475
        g4 = v22;
        *(int32_t *)(g9 + 12) = v22;
    }
    int32_t result = g8; // 0x2247b
    g4 = result;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result;
}

// Address range: 0x224b0 - 0x224be
int32_t function_224b0(int32_t * a1) {
    // 0x224b0
    g4 = (int32_t)a1;
    *a1 = -1;
    return g4;
}

// Address range: 0x224c0 - 0x224ca
int32_t function_224c0(int32_t a1) {
    // 0x224c0
    g4 = a1;
    int32_t * v1 = (int32_t *)a1; // 0x224c6
    *v1 = -1 - *v1;
    return g4;
}

// Address range: 0x224d0 - 0x224e0
// Used cryptographic patterns:
//  - CRC_32_IEEE_802_3_poly_0x04C11DB7 (32-bit, little endian)
int32_t function_224d0(unsigned char a1) {
    int32_t v1 = a1; // 0x224d3
    g4 = v1;
    int32_t result = *(int32_t *)(4 * v1 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x224d8
    g4 = result;
    return result;
}

// Address range: 0x224e0 - 0x226e9
// Used cryptographic patterns:
//  - CRC_32_IEEE_802_3_poly_0x04C11DB7 (32-bit, little endian)
int32_t function_224e0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x224e3
    int32_t v2 = g10; // 0x224e4
    int32_t v3 = g6; // 0x224e5
    g7 = a3;
    g10 = a1;
    g9 = a2;
    int32_t * v4 = (int32_t *)a1; // 0x224f5
    int32_t v5 = *v4; // 0x224f5
    g4 = v5;
    int32_t v6; // 0x22502
    int32_t v7; // 0x225e02
    int32_t v8; // 0x226a8
    int32_t v9; // 0x226af
    int32_t v10; // 0x226bc
    int32_t v11; // 0x226c3
    int32_t v12; // 0x22537
    int32_t v13; // 0x22542
    int32_t v14; // 0x22545
    int32_t v15; // 0x22552
    int32_t v16; // 0x2255f
    int32_t v17; // 0x2256c
    int32_t v18; // 0x22572
    int32_t v19; // 0x22575
    int32_t v20; // 0x2257f
    int32_t v21; // 0x2258c
    int32_t v22; // 0x22599
    int32_t v23; // 0x225a6
    int32_t v24; // 0x225c1
    int32_t v25; // 0x226c3
    int32_t v26; // 0x226c6
    int32_t v27; // 0x226d7
    int32_t v28; // 0x226da
    int32_t v29; // 0x22502
    int32_t v30; // 0x22525
    int32_t v31; // 0x22548
    int32_t v32; // 0x22555
    int32_t v33; // 0x22562
    int32_t v34; // 0x2256f
    int32_t v35; // 0x22582
    int32_t v36; // 0x2258f
    int32_t v37; // 0x2259c
    int32_t v38; // 0x225a9
    int32_t v39; // 0x226be
    int32_t v40; // 0x226d2
    int32_t v41; // 0x225bb
    uint32_t v42; // 0x22540
    char v43; // 0x226c1
    char v44; // 0x226d5
    int32_t v45; // 0x2254b
    int32_t v46; // 0x22558
    int32_t v47; // 0x22565
    int32_t v48; // 0x22572
    int32_t v49; // 0x22578
    int32_t v50; // 0x22585
    int32_t v51; // 0x22592
    int32_t v52; // 0x2259f
    int32_t v53; // 0x225ac
    int32_t v54; // 0x226c9
    int32_t v55; // 0x226dd
    uint32_t v56; // 0x2254b
    uint32_t v57; // 0x22558
    uint32_t v58; // 0x22565
    uint32_t v59; // 0x22578
    uint32_t v60; // 0x22585
    uint32_t v61; // 0x22592
    uint32_t v62; // 0x2259f
    int32_t v63; // 0x225ac
    int32_t v64; // 0x226c9
    int32_t v65; // 0x226dd
    while (true) {
      lab_0x225d0:
        // 0x225d0
        g871 = a3;
        switch (a3) {
            case 3: {
                // 0x22660
                g7 = v5;
                int32_t v66 = v5 / 256; // 0x22662
                g4 = v66;
                char v67 = *(char *)a2; // 0x22665
                g9 = a2 + 1;
                int32_t v68 = ((int32_t)(v67 ^ (char)v5) | v5 & -256) & (int32_t)&g862; // 0x2266a
                g7 = v68;
                int32_t v69 = *(int32_t *)(4 * v68 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x2266d
                g4 = v69 ^ v66;
            }
            case 2: {
                // 0x22674
                g7 = v5;
                int32_t v70 = v5 / 256; // 0x22676
                g4 = v70;
                char v71 = *(char *)a2; // 0x22679
                g9 = a2 + 1;
                int32_t v72 = ((int32_t)(v71 ^ (char)v5) | v5 & -256) & (int32_t)&g862; // 0x2267e
                g7 = v72;
                int32_t v73 = *(int32_t *)(4 * v72 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x22681
                g4 = v73 ^ v70;
            }
            case 1: {
                unsigned char v74 = *(char *)a2; // 0x22688
                int32_t v75 = v5 / 256; // 0x2268d
                g4 = v75;
                int32_t v76 = ((int32_t)v74 ^ v5) & (int32_t)&g862; // 0x22690
                g9 = v76;
                int32_t v77 = *(int32_t *)(4 * v76 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x22693
                g4 = v77 ^ v75;
            }
            case 0: {
                // 0x2269a
                *v4 = v5;
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return g4;
              lab_0x226bc:
                // 0x226bc
                g7 = v10;
                v39 = v10 / 256;
                g4 = v39;
                v43 = *(char *)v11;
                v25 = v11 + 1;
                g9 = v25;
                v26 = ((int32_t)(v43 ^ (char)v10) | v10 & -256) & (int32_t)&g862;
                g7 = v26;
                v54 = *(int32_t *)(4 * v26 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                v64 = v54 ^ v39;
                g4 = v64;
                goto lab_0x226d0;
              lab_0x226d0:
                // 0x226d0
                g7 = v64;
                v40 = v64 / 256;
                g4 = v40;
                v44 = *(char *)v25;
                v27 = v25 + 1;
                g9 = v27;
                v28 = ((int32_t)(v44 ^ (char)v64) | v64 & -256) & (int32_t)&g862;
                g7 = v28;
                v55 = *(int32_t *)(4 * v28 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                v65 = v55 ^ v40;
                g4 = v65;
                goto lab_0x22522;
              lab_0x22522:
                // 0x22522
                v30 = v29 / 8;
                g7 = v30;
                if (v29 >= 8) {
                    // 0x22533
                    g7 = v27;
                    v12 = v30 - 1;
                    g6 = v12;
                    v18 = v27;
                    v42 = *(int32_t *)v18 ^ v65;
                    v13 = v12 - 1;
                    g6 = v13;
                    v14 = v42 & (int32_t)&g862;
                    g8 = v14;
                    v31 = v42 / 256;
                    g4 = v31;
                    v45 = *(int32_t *)(4 * v14 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v56 = v45 ^ v31;
                    v15 = v56 & (int32_t)&g862;
                    g8 = v15;
                    v32 = v56 / 256;
                    g4 = v32;
                    v46 = *(int32_t *)(4 * v15 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v57 = v46 ^ v32;
                    v16 = v57 & (int32_t)&g862;
                    g8 = v16;
                    v33 = v57 / 256;
                    g4 = v33;
                    v47 = *(int32_t *)(4 * v16 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v58 = v47 ^ v33;
                    v17 = v58 & (int32_t)&g862;
                    g8 = v17;
                    v34 = v58 / 256;
                    g4 = v34;
                    v48 = *(int32_t *)(v18 + 4) ^ v34;
                    g4 = v48;
                    v19 = v18 + 8;
                    g7 = v19;
                    v49 = *(int32_t *)(4 * v17 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v59 = v49 ^ v48;
                    v20 = v59 & (int32_t)&g862;
                    g8 = v20;
                    v35 = v59 / 256;
                    g4 = v35;
                    v50 = *(int32_t *)(4 * v20 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v60 = v50 ^ v35;
                    v21 = v60 & (int32_t)&g862;
                    g8 = v21;
                    v36 = v60 / 256;
                    g4 = v36;
                    v51 = *(int32_t *)(4 * v21 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v61 = v51 ^ v36;
                    v22 = v61 & (int32_t)&g862;
                    g8 = v22;
                    v37 = v61 / 256;
                    g4 = v37;
                    v52 = *(int32_t *)(4 * v22 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v62 = v52 ^ v37;
                    v23 = v62 & (int32_t)&g862;
                    g8 = v23;
                    v38 = v62 / 256;
                    g4 = v38;
                    v53 = *(int32_t *)(4 * v23 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                    v63 = v53 ^ v38;
                    g4 = v63;
                    while (v12 != 0) {
                        // 0x22540
                        v12 = v13;
                        v18 = v19;
                        v42 = *(int32_t *)v18 ^ v63;
                        v13 = v12 - 1;
                        g6 = v13;
                        v14 = v42 & (int32_t)&g862;
                        g8 = v14;
                        v31 = v42 / 256;
                        g4 = v31;
                        v45 = *(int32_t *)(4 * v14 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v56 = v45 ^ v31;
                        v15 = v56 & (int32_t)&g862;
                        g8 = v15;
                        v32 = v56 / 256;
                        g4 = v32;
                        v46 = *(int32_t *)(4 * v15 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v57 = v46 ^ v32;
                        v16 = v57 & (int32_t)&g862;
                        g8 = v16;
                        v33 = v57 / 256;
                        g4 = v33;
                        v47 = *(int32_t *)(4 * v16 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v58 = v47 ^ v33;
                        v17 = v58 & (int32_t)&g862;
                        g8 = v17;
                        v34 = v58 / 256;
                        g4 = v34;
                        v48 = *(int32_t *)(v18 + 4) ^ v34;
                        g4 = v48;
                        v19 = v18 + 8;
                        g7 = v19;
                        v49 = *(int32_t *)(4 * v17 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v59 = v49 ^ v48;
                        v20 = v59 & (int32_t)&g862;
                        g8 = v20;
                        v35 = v59 / 256;
                        g4 = v35;
                        v50 = *(int32_t *)(4 * v20 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v60 = v50 ^ v35;
                        v21 = v60 & (int32_t)&g862;
                        g8 = v21;
                        v36 = v60 / 256;
                        g4 = v36;
                        v51 = *(int32_t *)(4 * v21 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v61 = v51 ^ v36;
                        v22 = v61 & (int32_t)&g862;
                        g8 = v22;
                        v37 = v61 / 256;
                        g4 = v37;
                        v52 = *(int32_t *)(4 * v22 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v62 = v52 ^ v37;
                        v23 = v62 & (int32_t)&g862;
                        g8 = v23;
                        v38 = v62 / 256;
                        g4 = v38;
                        v53 = *(int32_t *)(4 * v23 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
                        v63 = v53 ^ v38;
                        g4 = v63;
                    }
                    // 0x225b8
                    g7 = v30;
                    v41 = v27 + 8 * v30;
                    g9 = v41;
                    v7 = v63;
                } else {
                    v41 = v27;
                    v7 = v65;
                }
                // 0x225be
                v24 = v29 % 8;
                g7 = v24;
                a2 = v41;
                v5 = v7;
                a3 = v24;
                goto lab_0x225d0;
            }
            case 7: {
                // 0x225e0
                g7 = v5;
                int32_t v78 = v5 / 256; // 0x225e2
                g4 = v78;
                char v79 = *(char *)a2; // 0x225e5
                g9 = a2 + 1;
                int32_t v80 = ((int32_t)(v79 ^ (char)v5) | v5 & -256) & (int32_t)&g862; // 0x225ea
                g7 = v80;
                int32_t v81 = *(int32_t *)(4 * v80 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x225ed
                g4 = v81 ^ v78;
            }
            case 6: {
                // 0x225f4
                g7 = v5;
                int32_t v82 = v5 / 256; // 0x225f6
                g4 = v82;
                char v83 = *(char *)a2; // 0x225f9
                g9 = a2 + 1;
                int32_t v84 = ((int32_t)(v83 ^ (char)v5) | v5 & -256) & (int32_t)&g862; // 0x225fe
                g7 = v84;
                int32_t v85 = *(int32_t *)(4 * v84 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x22601
                g4 = v85 ^ v82;
            }
            case 5: {
                // 0x22608
                g7 = v5;
                int32_t v86 = v5 / 256; // 0x2260a
                g4 = v86;
                char v87 = *(char *)a2; // 0x2260d
                g9 = a2 + 1;
                int32_t v88 = ((int32_t)(v87 ^ (char)v5) | v5 & -256) & (int32_t)&g862; // 0x22612
                g7 = v88;
                int32_t v89 = *(int32_t *)(4 * v88 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x22615
                g4 = v89 ^ v86;
            }
            case 4: {
                uint32_t v90 = *(int32_t *)a2 ^ v5; // 0x2261c
                int32_t v91 = v90 & (int32_t)&g862; // 0x2261e
                g9 = v91;
                int32_t v92 = v90 / 256; // 0x22621
                g4 = v92;
                int32_t v93 = *(int32_t *)(4 * v91 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x22624
                uint32_t v94 = v93 ^ v92; // 0x22624
                int32_t v95 = v94 & (int32_t)&g862; // 0x2262b
                g9 = v95;
                int32_t v96 = v94 / 256; // 0x2262e
                g4 = v96;
                int32_t v97 = *(int32_t *)(4 * v95 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x22631
                uint32_t v98 = v97 ^ v96; // 0x22631
                int32_t v99 = v98 & (int32_t)&g862; // 0x22638
                g9 = v99;
                int32_t v100 = v98 / 256; // 0x2263b
                g4 = v100;
                int32_t v101 = *(int32_t *)(4 * v99 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x2263e
                uint32_t v102 = v101 ^ v100; // 0x2263e
                int32_t v103 = v102 & (int32_t)&g862; // 0x22645
                g9 = v103;
                int32_t v104 = v102 / 256; // 0x22648
                g4 = v104;
                int32_t v105 = *(int32_t *)(4 * v103 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x2264b
                int32_t v106 = v105 ^ v104; // 0x2264b
                g4 = v106;
                *v4 = v106;
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return g4;
            }
            default: {
                v6 = a3;
                v9 = a2;
                v8 = v5;
                while (true) {
                  lab_0x224fd:;
                    int32_t v107 = v9 % 4; // 0x224ff
                    g6 = v107;
                    v29 = v6 - v107;
                    g7 = v29;
                    if (v107 == 2) {
                        v11 = v9;
                        v10 = v8;
                        goto lab_0x226bc;
                    } else {
                        if (v107 == 3) {
                            // 0x226a8
                            g7 = v8;
                            int32_t v108 = v8 / 256; // 0x226aa
                            g4 = v108;
                            char v109 = *(char *)v9; // 0x226ad
                            int32_t v110 = v9 + 1; // 0x226af
                            g9 = v110;
                            int32_t v111 = ((int32_t)(v109 ^ (char)v8) | v8 & -256) & (int32_t)&g862; // 0x226b2
                            g7 = v111;
                            int32_t v112 = *(int32_t *)(4 * v111 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580); // 0x226b5
                            int32_t v113 = v112 ^ v108; // 0x226b5
                            g4 = v113;
                            v11 = v110;
                            v10 = v113;
                            goto lab_0x226bc;
                        } else {
                            if (v107 == 1) {
                                v25 = v9;
                                v64 = v8;
                                goto lab_0x226d0;
                            } else {
                                v27 = v9;
                                v65 = v8;
                                goto lab_0x22522;
                            }
                        }
                    }
                }
            }
        }
    }
    // 0x2269a
    *v4 = v5;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x226bc:
    // 0x226bc
    g7 = v10;
    v39 = v10 / 256;
    g4 = v39;
    v43 = *(char *)v11;
    v25 = v11 + 1;
    g9 = v25;
    v26 = ((int32_t)(v43 ^ (char)v10) | v10 & -256) & (int32_t)&g862;
    g7 = v26;
    v54 = *(int32_t *)(4 * v26 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
    v64 = v54 ^ v39;
    g4 = v64;
    goto lab_0x226d0;
  lab_0x226d0:
    // 0x226d0
    g7 = v64;
    v40 = v64 / 256;
    g4 = v40;
    v44 = *(char *)v25;
    v27 = v25 + 1;
    g9 = v27;
    v28 = ((int32_t)(v44 ^ (char)v64) | v64 & -256) & (int32_t)&g862;
    g7 = v28;
    v55 = *(int32_t *)(4 * v28 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
    v65 = v55 ^ v40;
    g4 = v65;
    goto lab_0x22522;
  lab_0x22522:
    // 0x22522
    v30 = v29 / 8;
    g7 = v30;
    if (v29 >= 8) {
        // 0x22533
        g7 = v27;
        v12 = v30 - 1;
        g6 = v12;
        v18 = v27;
        v42 = *(int32_t *)v18 ^ v65;
        v13 = v12 - 1;
        g6 = v13;
        v14 = v42 & (int32_t)&g862;
        g8 = v14;
        v31 = v42 / 256;
        g4 = v31;
        v45 = *(int32_t *)(4 * v14 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v56 = v45 ^ v31;
        v15 = v56 & (int32_t)&g862;
        g8 = v15;
        v32 = v56 / 256;
        g4 = v32;
        v46 = *(int32_t *)(4 * v15 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v57 = v46 ^ v32;
        v16 = v57 & (int32_t)&g862;
        g8 = v16;
        v33 = v57 / 256;
        g4 = v33;
        v47 = *(int32_t *)(4 * v16 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v58 = v47 ^ v33;
        v17 = v58 & (int32_t)&g862;
        g8 = v17;
        v34 = v58 / 256;
        g4 = v34;
        v48 = *(int32_t *)(v18 + 4) ^ v34;
        g4 = v48;
        v19 = v18 + 8;
        g7 = v19;
        v49 = *(int32_t *)(4 * v17 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v59 = v49 ^ v48;
        v20 = v59 & (int32_t)&g862;
        g8 = v20;
        v35 = v59 / 256;
        g4 = v35;
        v50 = *(int32_t *)(4 * v20 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v60 = v50 ^ v35;
        v21 = v60 & (int32_t)&g862;
        g8 = v21;
        v36 = v60 / 256;
        g4 = v36;
        v51 = *(int32_t *)(4 * v21 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v61 = v51 ^ v36;
        v22 = v61 & (int32_t)&g862;
        g8 = v22;
        v37 = v61 / 256;
        g4 = v37;
        v52 = *(int32_t *)(4 * v22 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v62 = v52 ^ v37;
        v23 = v62 & (int32_t)&g862;
        g8 = v23;
        v38 = v62 / 256;
        g4 = v38;
        v53 = *(int32_t *)(4 * v23 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
        v63 = v53 ^ v38;
        g4 = v63;
        while (v12 != 0) {
            // 0x22540
            v12 = v13;
            v18 = v19;
            v42 = *(int32_t *)v18 ^ v63;
            v13 = v12 - 1;
            g6 = v13;
            v14 = v42 & (int32_t)&g862;
            g8 = v14;
            v31 = v42 / 256;
            g4 = v31;
            v45 = *(int32_t *)(4 * v14 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v56 = v45 ^ v31;
            v15 = v56 & (int32_t)&g862;
            g8 = v15;
            v32 = v56 / 256;
            g4 = v32;
            v46 = *(int32_t *)(4 * v15 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v57 = v46 ^ v32;
            v16 = v57 & (int32_t)&g862;
            g8 = v16;
            v33 = v57 / 256;
            g4 = v33;
            v47 = *(int32_t *)(4 * v16 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v58 = v47 ^ v33;
            v17 = v58 & (int32_t)&g862;
            g8 = v17;
            v34 = v58 / 256;
            g4 = v34;
            v48 = *(int32_t *)(v18 + 4) ^ v34;
            g4 = v48;
            v19 = v18 + 8;
            g7 = v19;
            v49 = *(int32_t *)(4 * v17 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v59 = v49 ^ v48;
            v20 = v59 & (int32_t)&g862;
            g8 = v20;
            v35 = v59 / 256;
            g4 = v35;
            v50 = *(int32_t *)(4 * v20 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v60 = v50 ^ v35;
            v21 = v60 & (int32_t)&g862;
            g8 = v21;
            v36 = v60 / 256;
            g4 = v36;
            v51 = *(int32_t *)(4 * v21 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v61 = v51 ^ v36;
            v22 = v61 & (int32_t)&g862;
            g8 = v22;
            v37 = v61 / 256;
            g4 = v37;
            v52 = *(int32_t *)(4 * v22 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v62 = v52 ^ v37;
            v23 = v62 & (int32_t)&g862;
            g8 = v23;
            v38 = v62 / 256;
            g4 = v38;
            v53 = *(int32_t *)(4 * v23 + (int32_t)&CRC_32_IEEE_802_3_poly_0x04C11DB7_at_7e580);
            v63 = v53 ^ v38;
            g4 = v63;
        }
        // 0x225b8
        g7 = v30;
        v41 = v27 + 8 * v30;
        g9 = v41;
        v7 = v63;
    } else {
        v41 = v27;
        v7 = v65;
    }
    // 0x225be
    v24 = v29 % 8;
    g7 = v24;
    a2 = v41;
    v5 = v7;
    a3 = v24;
    goto lab_0x225d0;
}

// Address range: 0x226f0 - 0x226fe
int32_t function_226f0(int32_t a1) {
    // 0x226f0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g121;
    return g4;
}

// Address range: 0x22700 - 0x2270a
int32_t function_22700(void) {
    // 0x22700
    g4 = 1;
    return 1;
}

// Address range: 0x22710 - 0x2271a
int32_t function_22710(void) {
    // 0x22710
    g4 = g263;
    return g263;
}

// Address range: 0x22720 - 0x22784
int32_t function_22720(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // bp-8
    g4 = a1;
    g6 = a2;
    g7 = a4;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g4 + 12) = g6;
    g6 = (int32_t)&g129;
    g9 = a3 == 0 ? (int32_t)&g129 : a3;
    *(int32_t *)(g4 + 20) = g7;
    int32_t v2 = g7 % 2; // 0x22744
    g7 = v2;
    *(int32_t *)(g4 + 16) = g9;
    if (v2 != 0) {
        // 0x22770
        g9 = g382;
        *(int32_t *)(g4 + 4) = 0;
        if (g382 == 0) {
            // 0x22781
            g6 = v1;
            return g4;
        }
    } else {
        int32_t v3 = g383; // 0x2274c
        int32_t v4 = g4; // 0x22752
        g383 = v4;
        *(int32_t *)(v4 + 4) = v3;
        g9 = g382;
        if (g382 == 0) {
            // 0x22781
            g6 = v1;
            return g4;
        }
    }
    int32_t v5 = *(int32_t *)g4; // 0x22764
    g9 = v5;
    g6 = v1;
    int32_t result = *(int32_t *)(v5 + 48); // 0x2276a
    g4 = result;
    return result;
}

// Address range: 0x22790 - 0x227af
int32_t function_22790(int32_t a1) {
    // 0x22790
    g4 = g382;
    if (g382 != 0) {
        // 0x2279f
        g7 = a1;
        g9 = *(int32_t *)g382;
    }
    // 0x227ad
    return g382;
}

// Address range: 0x227b0 - 0x227bb
int32_t function_227b0(int32_t a1) {
    // 0x227b0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x227b7
    g4 = result;
    return result;
}

// Address range: 0x227c0 - 0x227d1
int32_t function_227c0(int32_t a1, int32_t a2) {
    // 0x227c0
    g4 = a1;
    g9 = a2;
    int32_t result = (int32_t)((*(int32_t *)(a1 + 20) & a2) != 0) | a1 & -256; // 0x227cd
    g4 = result;
    return result;
}

// Address range: 0x227e0 - 0x227ee
int32_t function_227e0(int32_t a1, int32_t a2) {
    // 0x227e0
    g4 = a1;
    g9 = a2;
    int32_t * v1 = (int32_t *)(a1 + 20); // 0x227e9
    *v1 = *v1 | a2;
    return g4;
}

// Address range: 0x227f0 - 0x22800
int32_t function_227f0(int32_t a1, int32_t a2) {
    // 0x227f0
    g9 = a1;
    int32_t v1 = -1 - a2; // 0x227f9
    g4 = v1;
    int32_t * v2 = (int32_t *)(a1 + 20); // 0x227fb
    *v2 = *v2 & v1;
    return g4;
}

// Address range: 0x22800 - 0x2280b
int32_t function_22800(int32_t a1) {
    // 0x22800
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 20); // 0x22807
    g4 = result;
    return result;
}

// Address range: 0x22810 - 0x2281b
int32_t function_22810(int32_t a1) {
    // 0x22810
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 16); // 0x22817
    g4 = result;
    return result;
}

// Address range: 0x22820 - 0x2282c
int32_t function_22820(int32_t a1) {
    // 0x22820
    g4 = a1;
    int32_t result = (int32_t)*(char *)(a1 + 8); // 0x22827
    g4 = result;
    return result;
}

// Address range: 0x22830 - 0x22837
int32_t function_22830(void) {
    // 0x22830
    g4 = 0;
    return 0;
}

// Address range: 0x22840 - 0x2284e
int32_t function_22840(int32_t a1) {
    // 0x22840
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g121;
    return g4;
}

// Address range: 0x22850 - 0x2285a
int32_t function_22850(void) {
    // 0x22850
    g4 = 1;
    return 1;
}

// Address range: 0x22860 - 0x2286f
int32_t function_22860(int32_t a1) {
    // 0x22860
    g4 = a1;
    int32_t result = (int32_t)(*(char *)(a1 + 32) % 2); // 0x2286b
    g4 = result;
    return result;
}

// Address range: 0x22870 - 0x22894
int32_t function_22870(int32_t a1, int32_t a2) {
    // 0x22870
    g4 = a1 - 24;
    g9 = a2;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x2288a
    g4 = v1;
    int32_t result = (int32_t)((*(int32_t *)(v1 + 20) & a2) != 0) | v1 & -256; // 0x22890
    g4 = result;
    return result;
}

// Address range: 0x228a0 - 0x228ae
int32_t function_228a0(int32_t a1) {
    // 0x228a0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x228a7
    g4 = v1;
    int32_t result = *(int32_t *)(v1 + 20); // 0x228aa
    g4 = result;
    return result;
}

// Address range: 0x228b0 - 0x228be
int32_t function_228b0(int32_t a1) {
    // 0x228b0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x228b7
    g4 = v1;
    int32_t result = *(int32_t *)(v1 + 16); // 0x228ba
    g4 = result;
    return result;
}

// Address range: 0x228c0 - 0x228d1
int32_t function_228c0(int32_t a1, int32_t a2) {
    // 0x228c0
    g4 = a1;
    g9 = a2;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x228c9
    g4 = v1;
    int32_t * v2 = (int32_t *)(v1 + 20); // 0x228cc
    *v2 = *v2 | a2;
    return g4;
}

// Address range: 0x228e0 - 0x228ef
int32_t function_228e0(int32_t a1) {
    // 0x228e0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x228e7
    g4 = v1;
    int32_t result = (int32_t)*(char *)(v1 + 8); // 0x228ea
    g4 = result;
    return result;
}

// Address range: 0x228f0 - 0x2290e
int32_t function_228f0(int32_t a1) {
    // 0x228f0
    g4 = a1 - 24;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x22907
    g4 = v1;
    int32_t result = *(int32_t *)(v1 + 12); // 0x2290a
    g4 = result;
    return result;
}

// Address range: 0x22910 - 0x2292e
int32_t function_22910(int32_t a1) {
    // 0x22910
    g4 = a1 - 24;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x22927
    g4 = v1;
    int32_t result = *(int32_t *)(v1 + 12); // 0x2292a
    g4 = result;
    return result;
}

// Address range: 0x22930 - 0x22947
int32_t function_22930(int32_t a1) {
    // 0x22930
    g4 = 0;
    return 0;
}

// Address range: 0x22950 - 0x22957
int32_t function_22950(void) {
    // 0x22950
    g4 = 0;
    return 0;
}

// Address range: 0x22960 - 0x2297f
int32_t function_22960(int32_t a1) {
    // 0x22960
    g4 = g382;
    if (g382 != 0) {
        // 0x2296f
        g7 = a1;
        g9 = *(int32_t *)g382;
    }
    // 0x2297d
    return g382;
}

// Address range: 0x22980 - 0x229b1
int32_t function_22980(int32_t a1, uint32_t a2) {
    g9 = a1;
    g4 = a2 / 0x1000000;
    g7 = a2 / 0x10000;
    int32_t v1 = *(int32_t *)a1; // 0x229a0
    g4 = v1;
    g7 = a2;
    int32_t result = *(int32_t *)(v1 + 84); // 0x229ab
    g4 = result;
    return result;
}

// Address range: 0x229b1 - 0x229c7
int32_t function_229b1(int32_t a1) {
    int32_t result = function_229d0((int32_t *)(a1 - 24)); // 0x229c5
    g4 = result;
    return result;
}

// Address range: 0x229d0 - 0x229e4
int32_t function_229d0(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    g4 = v1;
    int32_t v2 = *(int32_t *)(v1 + 28); // 0x229d6
    g4 = v2;
    int32_t v3 = *(int32_t *)v2; // 0x229d9
    g9 = v3;
    int32_t result = *(int32_t *)(v3 + 76); // 0x229df
    g4 = result;
    return result;
}

// Address range: 0x229f0 - 0x22a14
int32_t function_229f0(int32_t a1) {
    // 0x229f0
    g4 = a1 - 24;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x22a06
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x22a09
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 80); // 0x22a0f
    g4 = result;
    return result;
}

// Address range: 0x22a20 - 0x22a44
int32_t function_22a20(int32_t a1) {
    // 0x22a20
    g4 = a1 - 24;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x22a36
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x22a39
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 84); // 0x22a3f
    g4 = result;
    return result;
}

// Address range: 0x22a50 - 0x22a74
int32_t function_22a50(int32_t a1) {
    // 0x22a50
    g4 = a1 - 24;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x22a66
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x22a69
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 88); // 0x22a6f
    g4 = result;
    return result;
}

// Address range: 0x22a80 - 0x22a92
int32_t function_22a80(int32_t a1) {
    // 0x22a80
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g121;
    int32_t result = function_1bc40(); // 0x22a8d
    g4 = result;
    return result;
}

// Address range: 0x22aa0 - 0x22ab2
int32_t function_22aa0(int32_t a1) {
    // 0x22aa0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g121;
    int32_t result = function_1bc40(); // 0x22aad
    g4 = result;
    return result;
}

// Address range: 0x22ac0 - 0x22bb1
int32_t function_22ac0(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t v2; // ebp
    int32_t v3 = (int32_t)&v2 - 88; // 0x22ac3
    bool v4 = llvm_ctpop_i8((char)v3) % 2 == 0; // pf
    int32_t v5 = g6; // 0x22ac6
    g6 = a1;
    int32_t v6 = g10; // 0x22acc
    int32_t v7 = g8; // 0x22acf
    __asm_ucomiss(__asm_movss(*(int32_t *)(a1 + 44)), a2);
    int32_t * v8; // 0x22af0
    if (v4 || v3 != 0) {
        // 0x22af0
        v8 = (int32_t *)g6;
        int32_t v9 = *v8; // 0x22af0
        g4 = v9;
        if ((char)v9 == 0) {
            goto lab_0x22b40;
        } else {
            // 0x22b04
            g4 = g454;
            if (g454 == 0) {
                goto lab_0x22b40;
            } else {
                int32_t * v10 = (int32_t *)g454; // 0x22b0d
                g9 = *v10;
                if ((char)g454 != 0) {
                    goto lab_0x22b40;
                } else {
                    // 0x22b1c
                    g4 = g454;
                    g7 = a2;
                    g9 = *v10;
                    goto lab_0x22adf;
                }
            }
        }
    } else {
        goto lab_0x22adf;
    }
  lab_0x22adf:
    // 0x22adf
    g6 = v5;
    g10 = v6;
    g8 = v7;
    return g4;
  lab_0x22b40:
    // 0x22b40
    g4 = *v8;
    g9 = &v1;
    int128_t v11 = __asm_movss(a2); // 0x22b4f
    g4 = __asm_cvttss2si_1647(v11);
    g10 = *(int32_t *)(g6 + 44);
    *(int32_t *)(g6 + 44) = __asm_movss_1646(v11);
    *(int32_t *)(g6 + 48) = g4;
    if ((*(char *)(g6 + 21) & 16) == 0) {
        // 0x22b6d
        int32_t v12; // bp-60
        g8 = &v12;
        int128_t v13 = __asm_unpcklps(v11, v11); // 0x22b78
        int32_t v14 = __asm_movsd(__asm_cvtps2pd(v13)); // 0x22b89
        g4 = function_2da40(v14, (int32_t)&g870, (char *)&g870);
        int32_t result = *(int32_t *)g6; // 0x22b94
        g4 = result;
        g6 = v5;
        g10 = v6;
        g8 = v7;
        return result;
    }
    goto lab_0x22adf;
}

// Address range: 0x22bb1 - 0x22bb3
int32_t function_22bb1(void) {
    int32_t result = function_22bc0((int32_t)&g870); // 0x22bb1
    g4 = result;
    return result;
}

// Address range: 0x22bc0 - 0x22be9
int32_t function_22bc0(int32_t result) {
    // 0x22bc0
    g4 = result;
    int32_t v1; // bp-1036
    g6 = &v1;
    return result;
}

// Address range: 0x22bed - 0x22c19
int32_t function_22bed(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5c890c45); // 0x22bed
    *v1 = *v1 - 1;
    g4 &= -252;
    int32_t v2; // ebp
    *(char *)(v2 - 9) = 0;
    int32_t v3 = g4; // 0x22c01
    int32_t v4 = *(int32_t *)(v2 + 8); // 0x22c05
    g4 = v4;
    int32_t result = function_2db40(v4, v3, -1); // 0x22c0b
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x22ca5 - 0x22cff
int32_t function_22ca5(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x367aafb5); // 0x22ca5
    int32_t v2 = *v1; // 0x22ca5
    *v1 = v2 - 1;
    int32_t v3; // ebp
    if (v2 > 1) {
        int32_t v4 = g6 + 24; // 0x22cad
        g9 = v4;
        g4 = 0;
        *(int32_t *)(v3 - 28) = v4;
        int32_t v5 = v3; // 0x22cbe
        g7 = *(int32_t *)(v5 - 28);
        g9 = *(int32_t *)(g6 + 68);
        *(int32_t *)(v5 - 32) = g4;
        int32_t v6 = *(int32_t *)(v3 - 32) + 1; // 0x22cd2
        g4 = v6;
        int32_t v7 = g6; // 0x22cd5
        while (*(int32_t *)(v7 + 80) > v6) {
            // 0x22cb8
            v5 = v3;
            g7 = *(int32_t *)(v5 - 28);
            g9 = *(int32_t *)(v7 + 68);
            *(int32_t *)(v5 - 32) = v6;
            v6 = *(int32_t *)(v3 - 32) + 1;
            g4 = v6;
            v7 = g6;
        }
    }
    // 0x22cda
    g4 = g454;
    if (g454 != 0) {
        // 0x22ce3
        g9 = *(int32_t *)g454;
    }
    // 0x22cf7
    g6 = *(int32_t *)(v3 - 12);
    g10 = *(int32_t *)(v3 - 8);
    g8 = *(int32_t *)(v3 - 4);
    return g454;
}

// Address range: 0x22d00 - 0x22d52
int32_t function_22d00(int32_t a1, int32_t a2) {
    // 0x22d00
    g4 = a1;
    g7 = a2;
    unsigned char v1 = *(char *)(a1 + 32); // 0x22d09
    int32_t v2 = v1; // 0x22d09
    g9 = v2;
    int32_t result = *(int32_t *)(a1 + 24); // 0x22d0d
    g4 = result;
    if ((v1 & 2) != 0) {
        if (result != 0) {
            // 0x22d19
            return result;
        }
        // 0x22d50
        return 0;
    }
    int32_t v3 = v2 & 4; // 0x22d20
    g9 = v3;
    if (v3 == 0) {
        if (result != 0) {
            // 0x22d44
            return result;
        }
    } else {
        if (result != 0) {
            int32_t v4 = *(int32_t *)result; // 0x22d29
            g9 = v4;
            int32_t result2 = *(int32_t *)v4; // 0x22d32
            g4 = result2;
            return result2;
        }
    }
    // 0x22d50
    return 0;
}

// Address range: 0x22d60 - 0x22d9a
int32_t function_22d60(int32_t a1, int32_t a2) {
    // 0x22d60
    g9 = a1;
    g7 = a2;
    char v1 = *(char *)(a1 + 52); // 0x22d69
    int32_t v2; // 0x22d81
    int128_t v3; // xmm0
    if (v1 == 0) {
        v2 = a1;
        goto lab_0x22d79;
    } else {
        int128_t v4 = __asm_movss(*(int32_t *)(a1 + 56)); // 0x22d6f
        v3 = v4;
        __asm_ucomiss(v4, *(int32_t *)g7);
        if (false || v1 == 0) {
            // 0x22d6f
            v2 = g9;
            goto lab_0x22d79;
        } else {
            goto lab_0x22d8f;
        }
    }
  lab_0x22d79:
    // 0x22d79
    g4 = 0;
    char v5 = *(char *)(v2 + 60); // 0x22d7b
    if (v5 == 0) {
        // 0x22d98
        return 0;
    }
    int128_t v6 = __asm_movss(*(int32_t *)(v2 + 64)); // 0x22d81
    v3 = v6;
    __asm_ucomiss_1648(__asm_movss(*(int32_t *)g7), v6);
    if (false || v5 == 0) {
        // 0x22d98
        return g4;
    }
    goto lab_0x22d8f;
  lab_0x22d8f:
    // 0x22d8f
    *(int32_t *)g7 = __asm_movss_1646(v3);
    g4 = 1;
    // 0x22d98
    return 1;
}

// Address range: 0x22da0 - 0x22e82
int32_t function_22da0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x22da6
    g6 = a1;
    int32_t v2 = g10; // 0x22dac
    g10 = a2;
    int32_t v3 = g8; // 0x22db2
    if (*(int32_t *)(a1 + 48) == a2) {
        goto lab_0x22e00;
    } else {
        int32_t v4 = *(int32_t *)a1; // 0x22dba
        g4 = v4;
        if ((char)v4 == 0) {
            goto lab_0x22e10;
        } else {
            // 0x22dce
            g4 = g454;
            if (g454 == 0) {
                goto lab_0x22e10;
            } else {
                int32_t * v5 = (int32_t *)g454; // 0x22dd7
                g9 = *v5;
                if ((char)g454 != 0) {
                    goto lab_0x22e10;
                } else {
                    // 0x22de6
                    g4 = g454;
                    g9 = *v5;
                    goto lab_0x22e00;
                }
            }
        }
    }
  lab_0x22e00:
    // 0x22e00
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
  lab_0x22e10:;
    int128_t v6 = __asm_cvtsi2ss(a2); // 0x22e10
    g4 = *(int32_t *)g6;
    int32_t v7; // bp-32
    g9 = &v7;
    int32_t v8 = __asm_movss_1646(v6); // 0x22e20
    v7 = v8;
    int128_t v9 = __asm_movss(v8); // 0x22e28
    int32_t v10; // 0x22e39
    if ((char)g4 == 0) {
        // 0x22e10
        v10 = g10;
    } else {
        int32_t v11 = __asm_cvttss2si_1647(v9); // 0x22e31
        g10 = v11;
        v10 = v11;
    }
    int32_t v12 = g6; // 0x22e35
    *(int32_t *)(v12 + 48) = v10;
    g8 = *(int32_t *)(g6 + 44);
    *(int32_t *)(g6 + 44) = __asm_movss_1646(v9);
    if ((*(char *)(v12 + 21) & 16) == 0) {
        // 0x22e46
        int32_t v13; // bp-64
        int32_t v14 = &v13; // 0x22e4a
        g10 = v14;
        g4 = function_2da40(v14, 32, "%d");
        int32_t result = *(int32_t *)g6; // 0x22e65
        g4 = result;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    // 0x22e35
    goto lab_0x22e00;
}

// Address range: 0x22e90 - 0x22f49
int32_t function_22e90(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x22e93
    int32_t v2 = g6; // 0x22e94
    g4 = g454;
    g6 = a2;
    if (g454 == 0 || g384 != 0) {
        // 0x22ead
        g6 = v2;
        return g454;
    }
    // 0x22eb8
    g9 = a1;
    g384 = 1;
    g385 = a1;
    int32_t * v3 = (int32_t *)g454; // 0x22ec8
    g9 = *v3;
    g263 = g454;
    g4 = &g264;
    g382 = a2 == 0 ? (int32_t)&g264 : a2;
    g6 = g383;
    if (g383 != 0) {
        // 0x22efa
        g9 = a1;
        int32_t * v4 = (int32_t *)g383; // 0x22f0015
        g4 = *v4;
        int32_t v5 = *(int32_t *)(g383 + 4); // 0x22f0219
        g10 = v5;
        g4 = *v4;
        if (v5 != 0) {
            g6 = v5;
            g9 = a1;
            int32_t * v6 = (int32_t *)v5; // 0x22f00
            g4 = *v6;
            int32_t v7 = *(int32_t *)(v5 + 4); // 0x22f02
            g10 = v7;
            g4 = *v6;
            while (v7 != 0) {
                // 0x22ef8
                v5 = v7;
                g6 = v5;
                g9 = a1;
                v6 = (int32_t *)v5;
                g4 = *v6;
                v7 = *(int32_t *)(v5 + 4);
                g10 = v7;
                g4 = *v6;
            }
        }
    }
    // 0x22f1b
    g4 = g454;
    g9 = *v3;
    g4 = g454;
    g9 = *v3;
    g383 = 0;
    g6 = v2;
    g10 = v1;
    return g454;
}

// Address range: 0x22f50 - 0x22faf
int32_t function_22f50(void) {
    // 0x22f50
    g4 = g454;
    if (g454 == 0 || g384 == 0) {
        // 0x22f68
        return g454;
    }
    // 0x22f70
    g7 = g263;
    int32_t * v1 = (int32_t *)g454; // 0x22f76
    g9 = *v1;
    g4 = g454;
    g7 = g263;
    g9 = *v1;
    g384 = 0;
    g263 = -1;
    return g454;
}

// Address range: 0x22fb0 - 0x22fde
int32_t function_22fb0(int32_t a1) {
    // 0x22fb0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g121;
    *(char *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 4) = 0;
    return g4;
}

// Address range: 0x22fe0 - 0x22ff2
int32_t function_22fe0(int32_t a1) {
    // 0x22fe0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g121;
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_22720((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x22fed
    g4 = result;
    return result;
}

// Address range: 0x23000 - 0x23020
int32_t function_23000(int32_t a1) {
    // 0x23000
    g4 = g454;
    if (g454 != 0) {
        // 0x2300f
        g7 = a1;
        g9 = *(int32_t *)g454;
    }
    // 0x2301e
    return g454;
}

// Address range: 0x23020 - 0x2302b
int32_t function_23020(int32_t a1) {
    // 0x23020
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 4); // 0x23027
    g4 = result;
    return result;
}

// Address range: 0x23030 - 0x2303b
int32_t function_23030(int32_t a1) {
    // 0x23030
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 4); // 0x23037
    g4 = result;
    return result;
}

// Address range: 0x23059 - 0x2308a
int32_t function_23059(void) {
    // 0x23059
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x72cd8140); // 0x23059
    int32_t v3 = *v2; // 0x23059
    int32_t v4 = v3 + 1; // 0x23059
    *v2 = v4;
    int32_t result = g4; // 0x23062
    if ((v4 & (v3 ^ -0x80000000)) >= 0) {
        // 0x23061
        return result;
    }
    // 0x23062
    g4 = result ^ 36;
    int32_t v5 = function_1bc60(); // 0x23064
    g4 = v5;
    g8 = v5;
    function_2d970((int32_t *)v5, g6, g10);
    int32_t result2 = g8; // 0x2307b
    g4 = result2;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result2;
}

// Address range: 0x23090 - 0x230b0
int32_t function_23090(void) {
    int32_t v1 = function_1bc60(); // 0x23097
    g4 = v1;
    *(char *)v1 = 0;
    int32_t result = g4; // 0x2309f
    g8 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x230b0 - 0x230f5
int32_t function_230b0(int32_t a1) {
    int32_t v1 = g6; // 0x230b3
    g6 = a1;
    int32_t v2; // 0x230de
    if (g386 == 0) {
        // 0x230c3
        g386 = 1;
        g4 = function_343b0(&g387, "{}()':");
        v2 = g6;
    } else {
        v2 = a1;
    }
    // 0x230de
    *(int32_t *)v2 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(char *)(g6 + 8) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x23100 - 0x2314a
int32_t function_23100(int32_t a1, int32_t a2) {
    // 0x23100
    if (g386 == 0) {
        // bb
        g4 = function_23220();
    }
    // 0x23116
    g7 = a2;
    g9 = a1;
    *(int32_t *)(a1 + 4) = 0;
    *(char *)(g9 + 8) = 0;
    *(int32_t *)g9 = a2;
    if (a2 == 0 || a2 < 0) {
        int32_t v1 = function_23218((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2312b
        g4 = v1;
    }
    int32_t v2 = g9 + (int32_t)&g69; // 0x23134
    g9 = v2;
    int32_t v3 = a2 - 1; // 0x2313a
    g7 = v3;
    g6 = 0;
    g10 = a1 + 8;
    int32_t result = function_2318b(v3, v2); // 0x23148
    g4 = result;
    return result;
}

// Address range: 0x23174 - 0x23175
int32_t function_23174(void) {
    // 0x23174
    return g4;
}

// Address range: 0x2317d - 0x23181
int32_t function_2317d(void) {
    // 0x2317d
    *(char *)g7 = -125;
    return g4;
}

// Address range: 0x2318b - 0x231c2
int32_t function_2318b(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x2318b
    int32_t v2 = *(int32_t *)(v1 - 28); // 0x2318b
    g7 = v2;
    int32_t v3 = *(int32_t *)(v1 + 8); // 0x2318e
    g9 = v3;
    *(int32_t *)(v3 + (int32_t)&g94 + 4 * g6) = v2;
    int32_t v4 = *(int32_t *)(g5 + 16); // 0x23198
    g9 = v4;
    int32_t v5 = *(int32_t *)(4 * g6 + v4); // 0x2319b
    g4 = v5;
    int32_t v6 = function_2cb40(v5); // 0x231a1
    g4 = v6;
    int32_t v7 = *(int32_t *)(g5 + 16); // 0x231a6
    g7 = v7;
    int32_t v8 = v6 + 1; // 0x231a9
    g9 = v8;
    g8 = v6;
    g4 = *(int32_t *)(4 * g6 + v7);
    g7 = *(int32_t *)(g5 - 28);
    *(int32_t *)(g5 - 36) = v8;
    return g4;
}

// Address range: 0x2320d - 0x23212
int32_t function_2320d(void) {
    int32_t result = function_23174(); // 0x2320d
    g4 = result;
    return result;
}

// Address range: 0x23218 - 0x23220
int32_t function_23218(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x23218
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x23220 - 0x23240
int32_t function_23220(void) {
    // 0x23220
    g386 = 1;
    int32_t result = function_343b0(&g387, "{}()':"); // 0x23236
    g4 = result;
    return result;
}

// Address range: 0x23240 - 0x23259
int32_t function_23240(int32_t a1) {
    // 0x23240
    g4 = a1;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(char *)(g4 + 8) = 0;
    return g4;
}

// Address range: 0x23260 - 0x2326a
int32_t function_23260(void) {
    // 0x23260
    g4 = &g387;
    return &g387;
}

// Address range: 0x23307 - 0x23308
int32_t function_23307(void) {
    // 0x23307
    return g4;
}

// Address range: 0x23310 - 0x23311
int32_t function_23310(void) {
    // 0x23310
    return g4;
}

// Address range: 0x23340 - 0x233d7
int32_t function_23340(void) {
    uint32_t v1 = g6; // 0x23340
    if (v1 <= 63) {
        int32_t v2 = v1 + (int32_t)&g69 + g8; // 0x23345
        g4 = v2;
        g9 = &g64;
        *(int32_t *)(g5 - 96) = v2;
        int32_t v3 = g5; // 0x2335c
        g4 = *(int32_t *)(v3 - 68);
        int32_t v4 = g9 - g8; // 0x2335f
        g9 = v4;
        *(int32_t *)(v3 - 92) = v4;
        int32_t v5 = g9; // 0x23364
        int32_t v6 = g5; // 0x23368
        g9 = *(int32_t *)(v6 - 96);
        *(int32_t *)(v6 - 100) = g4;
        int32_t v7 = g5; // 0x2336e
        int32_t v8 = *(int32_t *)(v7 + 16); // 0x2336e
        g4 = v8;
        int32_t v9 = g9; // 0x23371
        int32_t v10 = v7 - 80; // 0x23375
        g9 = v10;
        int32_t v11 = function_31650(v10, v8, v9, v5, 1); // 0x2337f
        g4 = v11;
        g10 = v11;
        if (v11 >= 0) {
            // 0x2338a
            if (*(int32_t *)(g5 - 92) == v11) {
                // bb
                g4 = function_23430();
            }
            int32_t v12 = g6; // 0x23393
            g4 = v12;
            int32_t v13; // 0x23398
            int32_t v14; // 0x2339d
            if (v12 == 1) {
                // bb18
                v13 = function_233e0();
                g4 = v13;
                v14 = g6;
            } else {
                v13 = v12;
                v14 = v12;
            }
            int32_t v15 = *(int32_t *)(g5 - 96); // 0x2339a
            g9 = v15;
            *(int32_t *)(v14 + (int32_t)&g94 + 4 * v13) = v15;
            int32_t v16 = g4 + 1; // 0x233a4
            g4 = v16;
            *(int32_t *)g6 = v16;
            if (v16 > 63) {
                // 0x233d0
                return g4;
            }
            // 0x233ae
            g8 += g10 + 1;
            if (*(char *)(g5 - 60) == 0) {
                // bb20
                g4 = function_23340();
            }
        }
    }
    int32_t v17 = *(int32_t *)(g5 - 72); // 0x233b8
    g6 = v17;
    g4 = 1;
    int32_t result; // 0x233c2
    if (v17 >= 0) {
        // bb21
        result = function_23310();
        g4 = result;
    } else {
        result = 1;
    }
    // 0x233c8
    return result;
}

// Address range: 0x233dc - 0x233de
int32_t function_233dc(void) {
    // 0x233dc
    return g4;
}

// Address range: 0x233e0 - 0x2340a
int32_t function_233e0(void) {
    int32_t v1 = *(int32_t *)(g5 - 68); // 0x233e0
    g7 = v1;
    *(int32_t *)(g6 + 4) = v1;
    int32_t v2 = g7; // 0x233e6
    int32_t v3 = v2 - 1; // 0x233e6
    g9 = v3;
    int32_t v4 = g6; // 0x233e9
    int32_t v5 = (*(char *)(v2 + 7 + v4) != 34 ? v2 : v3) - g10; // 0x233f1
    g9 = v5;
    *(int32_t *)(v4 + 4) = v5;
    int32_t v6 = g9 - 1; // 0x233fb
    g9 = v6;
    *(int32_t *)(g6 + 4) = v6;
    return g4;
}

// Address range: 0x2341b - 0x23426
int32_t function_2341b(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x3fce833c); // 0x2341b
    *v1 = *v1 + 1;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x23430 - 0x23448
int32_t function_23430(void) {
    // 0x23430
    *(int32_t *)g6 = 0;
    g4 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(char *)(g6 + 8) = 0;
    int32_t result = function_23307(); // 0x23443
    g4 = result;
    return result;
}

// Address range: 0x23450 - 0x2345a
int32_t function_23450(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x23450
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return 0;
}

// Address range: 0x2345f - 0x23460
int32_t function_2345f(void) {
    // 0x2345f
    return g4;
}

// Address range: 0x2355a - 0x23568
int32_t function_2355a(int32_t a1, int32_t a2) {
    int32_t result = g6; // 0x23563
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x23570 - 0x235e8
int32_t function_23570(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x23570
    g7 = 0x22830;
    int32_t v1 = g6; // 0x23578
    g6 = a1;
    g4 = a3;
    g9 = a6;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 24) = g4;
    int32_t v2 = g6; // 0x2358c
    g4 = (int32_t)*(char *)(v2 + 32);
    *(int32_t *)(v2 + 12) = 0;
    g7 = a6 != 0 ? a6 : g7;
    g9 = (int32_t)(a6 != 0) | a6 & -256;
    *(int32_t *)g6 = (int32_t)&g122;
    *(int32_t *)(g6 + 16) = 0;
    g4 &= -8;
    *(int32_t *)(g6 + 20) = 0;
    g4 |= g9;
    *(int32_t *)(g6 + 4) = 0;
    *(char *)(g6 + 32) = (char)g4;
    g4 = a5;
    *(int32_t *)(g6 + 28) = g7;
    int32_t v3 = g4; // 0x235cb
    g4 = a2;
    int32_t result = function_22720(g6, a2, a4, v3); // 0x235dd
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x235e8 - 0x2367b
int32_t function_235e8(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x235e8
    *(int32_t *)g6 = (int32_t)&g121;
    function_7ab57(g4, (int32_t)&g870);
    g7 = 0x22830;
    int32_t v1 = g6; // 0x23608
    g6 = a1;
    g4 = a3;
    g9 = a6;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 24) = g4;
    int32_t v2 = g6; // 0x2361c
    g4 = (int32_t)*(char *)(v2 + 32);
    *(int32_t *)(v2 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    g4 |= 2;
    *(int32_t *)(g6 + 4) = 0;
    g7 = a6 != 0 ? a6 : g7;
    int32_t v3 = (int32_t)(a6 != 0) | a6 & -256; // 0x23644
    g9 = v3;
    g4 = g4 & -6 | v3;
    *(int32_t *)g6 = (int32_t)&g122;
    *(char *)(g6 + 32) = (char)g4;
    g4 = a5;
    *(int32_t *)(g6 + 28) = g7;
    int32_t v4 = g4; // 0x2365e
    g4 = a2;
    int32_t result = function_22720(g6, a2, a4, v4); // 0x23670
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x2367b - 0x23703
int32_t function_2367b(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x2367b
    *(int32_t *)g6 = (int32_t)&g121;
    function_7ab57(g4, (int32_t)&g870);
    int32_t v1 = g6; // 0x23693
    g6 = a1;
    g4 = a3;
    g9 = a6;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 24) = g4;
    int32_t v2 = g6; // 0x236a7
    g4 = (int32_t)*(char *)(v2 + 32);
    *(int32_t *)(v2 + 28) = a6;
    g9 = (int32_t)(a6 != 0) | a6 & -256;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    g4 &= -4;
    *(int32_t *)(g6 + 20) = 0;
    g4 |= g9;
    *(int32_t *)(g6 + 4) = 0;
    g4 |= 4;
    *(int32_t *)g6 = (int32_t)&g122;
    *(char *)(g6 + 32) = (char)g4;
    g4 = a2;
    int32_t result = function_22720(g6, a2, a4, a5); // 0x236f8
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x23703 - 0x2379a
int32_t function_23703(int32_t result, int32_t a2) {
    // 0x23703
    *(int32_t *)g6 = (int32_t)&g121;
    function_7ab57(g4, (int32_t)&g870);
    int32_t v1 = g10; // 0x23723
    int32_t v2 = g6; // 0x23724
    g4 = result;
    g6 = a2;
    int32_t v3 = *(int32_t *)(result + 28); // 0x2372e
    g10 = v3;
    int32_t v4 = *(int32_t *)(v3 + 80); // 0x23731
    g9 = v4;
    if (v4 < 1) {
        // 0x23754
        g6 = v2;
        g10 = v1;
        return result;
    }
    int32_t v5 = *(int32_t *)(v3 + 68); // 0x23738
    g7 = v5;
    g4 = 0;
    int32_t result2; // 0x2374d
    if (*(int32_t *)v5 != a2) {
        int32_t v6 = 0; // 0x2374d
        while (true) {
            // 0x2374d
            result2 = v6 + 1;
            g4 = result2;
            if (result2 == v4) {
                // break -> 0x23754
                break;
            }
            // 0x23748
            if (*(int32_t *)(4 * result2 + v5) == a2) {
                if (v6 == -2) {
                    goto lab_0x23754;
                } else {
                    goto lab_0x23765;
                }
            }
            v6 = result2;
        }
      lab_0x23754:
        // 0x23754
        g6 = v2;
        g10 = v1;
        return result2;
    }
    result2 = 0;
    goto lab_0x23765;
  lab_0x23765:;
    int32_t v7 = v4 - result2 - 1; // 0x23769
    g6 = v7;
    int32_t v8; // 0x2378a
    int32_t v9; // 0x2378a
    if (v7 >= 1) {
        int32_t v10 = 4 * result2; // 0x23770
        int32_t v11 = v5 + 4 + v10; // 0x23770
        g9 = v11;
        int32_t v12 = 4 * v7; // 0x23774
        g6 = v12;
        int32_t v13 = v10 + v5; // 0x23777
        g4 = v13;
        g4 = function_2cb20(v13, v11, v12);
        v8 = g10;
        v9 = *(int32_t *)(v8 + 80);
        g9 = v9;
    } else {
        v8 = v3;
        v9 = v4;
    }
    int32_t v14 = v9 - 1; // 0x2378d
    g9 = v14;
    *(int32_t *)(v8 + 80) = v14;
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x237a0 - 0x237a1
int32_t function_237a0(void) {
    // 0x237a0
    return g4;
}

// Address range: 0x237d4 - 0x237db
int32_t function_237d4(void) {
    int32_t v1 = g4; // 0x237d4
    g4 = v1 + 135 & 255 | v1 & -256;
    int32_t result = function_48b37e2(); // 0x237d6
    g4 = result;
    return result;
}

// Address range: 0x237e0 - 0x23875
int32_t function_237e0(void) {
    char * v1 = (char *)(g6 + 0x607e02f8); // 0x237e2
    unsigned char v2 = *v1; // 0x237e2
    unsigned char v3 = (char)g7 % 32; // 0x237e2
    if (v3 != 0) {
        // bb
        *v1 = v2 >> 8 - v3 | v2 << v3;
    }
    int32_t v4 = g4; // 0x237e8
    int32_t v5; // ebp
    int32_t v6 = *(int32_t *)(v5 - 40); // 0x23860
    g4 = v6;
    g9 = 0;
    int32_t v7; // 0x23817
    int32_t v8; // 0x2386c
    if (v4 == 3) {
        // 0x23860
        *(int32_t *)(v5 - 28) = (int32_t)&g862;
        v8 = g4;
        int32_t v9 = v8 - (int32_t)&g862; // 0x2386c
        if (v8 < (int32_t)&g862 || v9 == 0) {
            v7 = v5;
            goto lab_0x237f9;
        } else {
            goto lab_0x23848;
        }
    } else {
        int32_t v10 = v6 - (int32_t)&g862; // 0x237f2
        if (v6 < (int32_t)&g862 || v10 == 0) {
            v8 = v6;
            v7 = v5;
            goto lab_0x237f9;
        } else {
            goto lab_0x23848;
        }
    }
  lab_0x23848:
    // 0x23848
    g6 = *(int32_t *)(v5 - 12);
    int32_t result = g9; // 0x2384b
    g4 = result;
    g10 = *(int32_t *)(v5 - 8);
    g8 = *(int32_t *)(v5 - 4);
    return result;
  lab_0x237f9:;
    int32_t v11 = *(int32_t *)(v7 - 36); // 0x237f9
    g7 = v11;
    int32_t v12 = 0x1000000 * v11;
    if (v12 >= 0) {
        // 0x23800
        if ((int16_t *)(v12 / 0x1000000) <= (int16_t *)&g862) {
            int32_t v13 = *(int32_t *)(v7 - 32); // 0x23808
            g10 = v13;
            int32_t v14 = 0x1000000 * v13;
            if (v14 >= 0) {
                int32_t v15 = v14 / 0x1000000; // 0x2380f
                if ((int16_t *)v15 <= (int16_t *)&g862) {
                    int32_t v16 = *(int32_t *)(v7 - 28); // 0x23817
                    g8 = v16;
                    int32_t v17 = 0x1000000 * v16;
                    if (v17 >= 0) {
                        int32_t v18 = v17 / 0x1000000; // 0x2381e
                        if ((int16_t *)v18 <= (int16_t *)&g862) {
                            // 0x23826
                            *(char *)(g6 + 48) = (char)v8;
                            g9 = 1;
                            *(char *)(g6 + 50) = (char)v13;
                            g4 = v18;
                            *(char *)(g6 + 49) = (char)v11;
                            *(char *)(g6 + 51) = (char)g4;
                            *(int32_t *)(g6 + 44) = __asm_movss_1646(__asm_cvtsi2ss(*(int32_t *)(g6 + 48)));
                            g10 = v15;
                        }
                    }
                }
            }
        }
    }
    goto lab_0x23848;
}

// Address range: 0x23880 - 0x23923
int32_t function_23880(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x23886
    g6 = a1;
    int32_t v2 = g10; // 0x2388c
    g10 = a2;
    int32_t v3 = g8; // 0x23892
    int32_t v4 = *(int32_t *)a1; // 0x23895
    g4 = v4;
    int32_t v5; // 0x238c5
    if ((char)v4 != 0) {
        // 0x238a9
        g4 = g454;
        if (g454 != 0) {
            // 0x238b2
            g9 = *(int32_t *)g454;
            if ((char)g454 == 0) {
                // bb
                g4 = function_23978();
                v5 = g6;
            } else {
                v5 = a1;
            }
        } else {
            v5 = a1;
        }
    } else {
        v5 = a1;
    }
    int128_t v6 = __asm_movss(*(int32_t *)(v5 + 44)); // 0x238c5
    g8 = a2 != 0 ? a2 : (int32_t)&g129;
    int32_t v7 = __asm_movss_1646(v6); // 0x238d8
    int32_t result = function_237a0(); // 0x238e0
    g4 = result;
    if ((char)result == 0) {
        // 0x23918
        return result;
    }
    int32_t v8 = g6; // 0x238e9
    int32_t result2; // 0x23912
    if ((*(char *)(v8 + 21) & 16) == 0) {
        // 0x238ef
        g4 = *(int32_t *)v8;
        __asm_movss_1646(__asm_movss(v7));
        result2 = g4;
    } else {
        result2 = result;
    }
    // 0x23906
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x23928 - 0x23974
int32_t function_23928(void) {
    int32_t v1 = g5 - 88; // 0x23928
    float80_t v2; // st7
    *(float64_t *)v1 = (float64_t)v2;
    int128_t v3 = __asm_movsd_1649(*(int64_t *)v1); // 0x2392b
    int32_t v4 = __asm_movd_1650(__asm_cvtpd2ps(v3)); // 0x23934
    g4 = v4;
    *(int32_t *)(g5 - 28) = v4;
    int32_t v5 = g4 & 0x7f800000; // 0x2393b
    g4 = v5;
    if (v5 == 0x7f800000) {
        // bb
        g4 = function_239d0();
    }
    int32_t v6 = g6; // 0x2394b
    g4 = v6;
    int32_t v7 = g5; // 0x2394d
    g9 = v7 - 28;
    int32_t v8; // 0x2395e
    if ((char)v6 != 0) {
        // bb234
        g4 = function_239a0();
        v8 = g5;
    } else {
        v8 = v7;
    }
    int128_t v9 = __asm_movss(*(int32_t *)(v8 - 28)); // 0x2395e
    g4 = __asm_cvttss2si_1647(v9);
    *(int32_t *)(g6 + 44) = __asm_movss_1646(v9);
    *(int32_t *)(g6 + 48) = g4;
    return g4;
}

// Address range: 0x23978 - 0x2399d
int32_t function_23978(void) {
    // 0x23978
    g4 = g454;
    g9 = *(int32_t *)g454;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g454;
}

// Address range: 0x239a0 - 0x239cb
int32_t function_239a0(void) {
    int32_t v1 = g5; // 0x239a0
    g8 = v1 - 60;
    int128_t v2 = __asm_movss(*(int32_t *)(v1 - 28)); // 0x239a3
    __asm_movsd(__asm_cvtps2pd(v2));
    int32_t result = function_2da40(g8, (int32_t)&g870, (char *)&g870); // 0x239c4
    g4 = result;
    return result;
}

// Address range: 0x239d0 - 0x239e7
int32_t function_239d0(void) {
    int32_t result = g6; // 0x239d0
    g4 = result;
    return result;
}

// Address range: 0x239ec - 0x239f8
int32_t function_239ec(void) {
    // 0x239ec
    int32_t v1; // ebp
    *(int32_t *)(v1 - 28) = 0x7f7fffff;
    return g4;
}

// Address range: 0x23a00 - 0x23a1d
int32_t function_23a00(int32_t a1) {
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 28); // 0x23a09
    g4 = result;
    g7 = *(int32_t *)(result + 32);
    g9 = *(int32_t *)result;
    return result;
}

// Address range: 0x23a20 - 0x23a3a
int32_t function_23a20(int32_t a1, int32_t a2) {
    // 0x23a20
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23a26
    g9 = v1;
    int32_t v2 = *(int32_t *)(v1 + 56); // 0x23a29
    g7 = v2;
    g9 = a2;
    *(int32_t *)a2 = v2;
    int32_t v3 = *(int32_t *)(g4 + 28); // 0x23a31
    g4 = v3;
    int32_t result = (int32_t)*(char *)(v3 + 52); // 0x23a35
    g4 = result;
    return result;
}

// Address range: 0x23a40 - 0x23a5a
int32_t function_23a40(int32_t a1, int32_t a2) {
    // 0x23a40
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23a46
    g9 = v1;
    int32_t v2 = *(int32_t *)(v1 + 64); // 0x23a49
    g7 = v2;
    g9 = a2;
    *(int32_t *)a2 = v2;
    int32_t v3 = *(int32_t *)(g4 + 28); // 0x23a51
    g4 = v3;
    int32_t result = (int32_t)*(char *)(v3 + 60); // 0x23a55
    g4 = result;
    return result;
}

// Address range: 0x23a60 - 0x23a6e
float80_t function_23a60(int32_t a1) {
    // 0x23a60
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23a67
    g4 = v1;
    return (float80_t)*(float32_t *)(v1 + 56);
}

// Address range: 0x23a70 - 0x23a7e
float80_t function_23a70(int32_t a1) {
    // 0x23a70
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23a77
    g4 = v1;
    return (float80_t)*(float32_t *)(v1 + 64);
}

// Address range: 0x23a80 - 0x23a8f
int32_t function_23a80(int32_t a1) {
    // 0x23a80
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23a87
    g4 = v1;
    int32_t result = (int32_t)*(char *)(v1 + 52); // 0x23a8a
    g4 = result;
    return result;
}

// Address range: 0x23a90 - 0x23a9f
int32_t function_23a90(int32_t a1) {
    // 0x23a90
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23a97
    g4 = v1;
    int32_t result = (int32_t)*(char *)(v1 + 60); // 0x23a9a
    g4 = result;
    return result;
}

// Address range: 0x23aa0 - 0x23aae
int32_t function_23aa0(int32_t a1) {
    // 0x23aa0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 28); // 0x23aa7
    g4 = v1;
    int32_t result = *(int32_t *)(v1 + 32); // 0x23aaa
    g4 = result;
    return result;
}

// Address range: 0x23ab0 - 0x23ac8
int32_t function_23ab0(int32_t a1, int32_t a2) {
    int32_t v1 = a2 == 0 ? (int32_t)&g129 : a2; // 0x23abd
    g4 = v1;
    g9 = a1;
    *(int32_t *)(a1 + 32) = v1;
    return g4;
}

// Address range: 0x23ad0 - 0x23b6b
int32_t function_23ad0(int32_t a1, int32_t a2, uint32_t a3) {
    // 0x23ad0
    g4 = g454;
    int32_t v1 = g6; // 0x23adb
    int32_t v2 = g10; // 0x23ade
    g6 = a1;
    int32_t v3 = g8; // 0x23ae4
    g10 = a2;
    g8 = a3 % 256;
    int32_t v4; // 0x23b02
    if (g454 == 0) {
        // 0x23b20
        g4 = &g388;
        v4 = &g388;
    } else {
        // 0x23af2
        g9 = *(int32_t *)g454;
        v4 = g454;
    }
    // 0x23b02
    g9 = v4 + 24;
    *(int32_t *)(a1 + 4) = v4;
    int32_t v5 = g9; // 0x23b08
    *(int32_t *)g6 = v5;
    if (v5 != (int32_t)&g389) {
        // 0x23b12
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    // 0x23b3d
    g4 = g454;
    if (g454 == 0) {
        // bb
        g4 = function_23b78();
    }
    int32_t result = g8; // 0x23b46
    g4 = result;
    if ((char)result == 0) {
        // 0x23b60
        return result;
    }
    // 0x23b4c
    g6 = v1;
    *(char *)&g265 = 0;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x23b70 - 0x23b72
int32_t function_23b70(void) {
    // 0x23b70
    return g4;
}

// Address range: 0x23b78 - 0x23b83
int32_t function_23b78(void) {
    // 0x23b78
    return g4;
}

// Address range: 0x23b90 - 0x23ba0
int32_t function_23b90(unsigned char a1) {
    // 0x23b90
    g4 = a1;
    int32_t result = function_23ad0((int32_t)a1, (int32_t)&g870, (int32_t)&g870); // 0x23b9b
    g4 = result;
    return result;
}

// Address range: 0x23ba0 - 0x23bc2
int32_t function_23ba0(int32_t * a1, char * a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    g4 = v1;
    int32_t result = function_23ad0(v1, (int32_t)a2, 0); // 0x23bbb
    g4 = result;
    return result;
}

// Address range: 0x23bd0 - 0x23bed
int32_t function_23bd0(int32_t a1, int32_t a2) {
    // 0x23bd0
    g7 = &g389;
    g9 = a1;
    int32_t v1 = a2 == 0 ? (int32_t)&g389 : a2; // 0x23be0
    g4 = v1;
    *(int32_t *)a1 = v1;
    int32_t v2 = g4 - 24; // 0x23be5
    g4 = v2;
    *(int32_t *)(g9 + 4) = v2;
    return g4;
}

// Address range: 0x23bf0 - 0x23c01
int32_t function_23bf0(int32_t a1) {
    // 0x23bf0
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x23bf7
    int32_t result = (int32_t)(v1 != (int32_t)&g389) | a1 & -256; // 0x23bfd
    g4 = result;
    return result;
}

// Address range: 0x23c10 - 0x23d2e
int32_t function_23c10(int32_t a1, int32_t a2, uint32_t a3) {
    int32_t v1 = g8; // 0x23c13
    int32_t v2 = g10; // 0x23c14
    int32_t v3; // bp-284
    int32_t v4 = &v3; // 0x23c15
    g8 = v4;
    int32_t v5 = g6; // bp-16
    g6 = 0;
    g9 = a3 % 256;
    int32_t * v6 = (int32_t *)a1; // 0x23cde
    int32_t v7 = 0; // 0x23c33
    int32_t v8; // 0x23c68
    int32_t v9; // 0x23c78
    while (true) {
      lab_0x23c2e:
        // 0x23c2e
        g10 = 8 * v7 + a1;
        g9 = a2;
        if (v7 == 0) {
            // 0x23ca8
            function_2d970(&v3, a2, (int32_t)"GNU");
            g4 = g454;
            if (g454 != 0) {
                v8 = g454;
                goto lab_0x23c68;
            } else {
                // 0x23cc8
                g4 = &g388;
                v9 = &g388;
                goto lab_0x23c78;
            }
        } else {
            // 0x23c38
            function_2da40(v4, (int32_t)"GNU", "%s%d");
            g4 = g454;
            if (g454 == 0) {
                // 0x23cc8
                g4 = &g388;
                v9 = &g388;
                goto lab_0x23c78;
            } else {
                v8 = g454;
                goto lab_0x23c68;
            }
        }
    }
  lab_0x23ce6:
    // 0x23ce6
    g9 = a1;
    *(int32_t *)(g10 + 4) = 0;
    if (*(int32_t *)g9 != (int32_t)&g389) {
        goto lab_0x23c96;
    } else {
        goto lab_0x23cf8;
    }
  lab_0x23c68:
    // 0x23c68
    g9 = *(int32_t *)v8;
    if (v8 == 0) {
        // 0x23cd0
        *(int32_t *)g10 = (int32_t)&g389;
        if (g6 != 1) {
            // bb
            g4 = function_23d38();
        }
        // 0x23cdb
        g9 = a1;
        int32_t v10 = *v6; // 0x23cde
        g4 = v10;
        *(int32_t *)g10 = v10;
        if (v10 == 0) {
            // break -> 0x23ce6
            goto lab_0x23ce6;
        }
        goto lab_0x23c7d;
    } else {
        v9 = v8;
        goto lab_0x23c78;
    }
  lab_0x23c78:;
    int32_t v11 = v9 + 24; // 0x23c78
    g4 = v11;
    *(int32_t *)g10 = v11;
    goto lab_0x23c7d;
  lab_0x23c7d:;
    int32_t v12 = g6; // 0x23c7d
    g6 = v12 + 1;
    int32_t v13 = g4 - 24; // 0x23c80
    g4 = v13;
    *(int32_t *)(g10 + 4) = v13;
    if (v12 == 1) {
        // 0x23c8b
        g9 = a1;
        if (*v6 == (int32_t)&g389) {
            goto lab_0x23cf8;
        } else {
            goto lab_0x23c96;
        }
    }
    // 0x23c7d
    v7 = g6;
    goto lab_0x23c2e;
  lab_0x23c96:
    // 0x23c96
    g6 = v5;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x23cf8:
    // 0x23cf8
    g4 = g454;
    int32_t result; // 0x23cff
    if (g454 == 0) {
        // bb30
        result = function_23d48();
        g4 = result;
    } else {
        result = g454;
    }
    if ((char)a3 == 0) {
        // 0x23d20
        g9 = a2;
        return result;
    }
    // 0x23d0a
    g266 = 0;
    g6 = v5;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x23d33 - 0x23d35
int32_t function_23d33(void) {
    // 0x23d33
    return g4;
}

// Address range: 0x23d38 - 0x23d42
int32_t function_23d38(void) {
    // 0x23d38
    g4 = &g389;
    return &g389;
}

// Address range: 0x23d48 - 0x23d56
int32_t function_23d48(void) {
    // 0x23d48
    return g4;
}

// Address range: 0x23d60 - 0x23d70
int32_t function_23d60(unsigned char a1) {
    // 0x23d60
    g4 = a1;
    int32_t result = function_23c10((int32_t)a1, (int32_t)&g870, (int32_t)&g870); // 0x23d6b
    g4 = result;
    return result;
}

// Address range: 0x23d70 - 0x23d92
int32_t function_23d70(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t result = function_23c10(a1, a2, 0); // 0x23d8b
    g4 = result;
    return result;
}

// Address range: 0x23da0 - 0x23e4d
int32_t function_23da0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x23da9
    g6 = a1;
    int32_t v2 = g10; // 0x23daf
    g4 = a2;
    int32_t v3 = g8; // 0x23db5
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x23db8
    g10 = v4;
    g8 = *(int32_t *)(a1 + 12);
    *(int32_t *)a1 = v4;
    int32_t v5; // bp-284
    int32_t v6 = &v5; // 0x23dc0
    g10 = v6;
    *(int32_t *)(g6 + 4) = g8;
    g9 = *(int32_t *)g4;
    function_2da40(v6, (int32_t)"GNU", "%s%d");
    g4 = g454;
    int32_t v7; // 0x23e0e
    if (g454 == 0) {
        // 0x23e30
        g4 = &g388;
        v7 = &g388;
    } else {
        // 0x23dfe
        g9 = *(int32_t *)g454;
        v7 = g454;
    }
    int32_t v8 = v7 + 24; // 0x23e0e
    g4 = v8;
    *(int32_t *)g6 = v8;
    int32_t v9 = g4 - 24; // 0x23e13
    g4 = v9;
    *(int32_t *)(g6 + 4) = v9;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x23e50 - 0x23e61
int32_t function_23e50(int32_t a1) {
    // 0x23e50
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x23e57
    int32_t result = (int32_t)(v1 != (int32_t)&g389) | a1 & -256; // 0x23e5d
    g4 = result;
    return result;
}

// Address range: 0x23e61 - 0x23e63
int32_t function_23e61(void) {
    int32_t result = function_23e70((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x23e61
    g4 = result;
    return result;
}

// Address range: 0x23e70 - 0x23f0a
int32_t function_23e70(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x23e73
    int32_t v2 = g10; // 0x23e74
    int32_t v3 = g6; // 0x23e75
    g6 = 0;
    g10 = a1;
    int32_t v4; // bp-156
    int32_t v5 = &v4; // 0x23ec8
    int32_t v6 = 0;
    int32_t result2; // 0x23e9e
    while (true) {
        int32_t v7 = v6; // 0x23e88
        int32_t v8; // 0x23e88
        while (true) {
            int32_t v9 = 8 * v7 + (int32_t)&g267; // 0x23e90
            g9 = *(int32_t *)v9;
            g8 = v9;
            result2 = *(int32_t *)a1;
            g4 = result2;
            v8 = v7 + 1;
            if ((char)result2 != 0) {
                // break -> 0x23eae
                break;
            }
            // 0x23e88
            g6 = v8;
            if (v7 == 12) {
                // break (via goto) -> 0x23eff
                goto lab_0x23eff;
            }
            v7 = v8;
        }
        // 0x23eae
        g6 = v8;
        g4 = v5;
        function_2da40(v5, 128, " %s");
        g4 = a2;
        int32_t result = function_2db40(a2, v5, a3); // 0x23ef5
        g4 = result;
        int32_t v10 = g6; // 0x23efa
        if (v10 == 13) {
            // 0x23eff
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        // 0x23eae
        a1 = g10;
        v6 = v10;
    }
  lab_0x23eff:
    // 0x23eff
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x23f55 - 0x2416e
int32_t function_23f55(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x1c438bc6); // 0x23f55
    *v1 = *v1 - 1;
    g2 = false;
    g882 = g10 == 0;
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 56)); // 0x23f5d
    g9 = (int32_t)*(char *)(g4 + 52);
    *(int32_t *)(g5 - 0x1044) = __asm_movss_1646(v2);
    int128_t v3 = __asm_movss(*(int32_t *)(g4 + 64)); // 0x23f6e
    g4 += 60;
    *(int32_t *)(g5 - 0x1048) = __asm_movss_1646(v3);
    *(char *)(g5 - 0x103d) = (char)g9;
    *(char *)(g5 - 0x103e) = (char)g4;
    if (g882) {
        // bb
        g4 = function_24260();
    }
    int32_t v4 = g10; // 0x23f91
    g4 = v4;
    g9 = v4;
    g8 = v4;
    float80_t v5; // st7
    *(float32_t *)(g5 - 0x104c) = (float32_t)v5;
    int128_t v6 = __asm_movss(*(int32_t *)(g5 - 0x104c)); // 0x23fa9
    int128_t v7 = __asm_cvtsi2ss(v4); // 0x23fb1
    int64_t v8 = *(int64_t *)&g127; // 0x23fb5
    int128_t v9 = __asm_movsd_1649(v8); // 0x23fb5
    int128_t v10 = __asm_subss(v7, v6); // 0x23fbd
    int128_t v11 = __asm_unpcklps(v10, v10); // 0x23fc1
    int128_t v12 = __asm_andpd(__asm_cvtps2pd(v11), v9); // 0x23fc7
    __asm_ucomisd(__asm_movsd_1649(0x3eb0c6f7a0b5ed8d), v12);
    if (!g2 && !g882) {
        // bb270
        g4 = function_24180();
    }
    // 0x23fdd
    g8 = g5 - 56;
    int128_t v13 = __asm_unpcklps(v6, v6); // 0x23fe0
    __asm_movsd(__asm_cvtps2pd(v13));
    function_2da40(g8, (int32_t)&g870, (char *)&g870);
    *(int32_t *)(g5 - 0x103c) = g8;
    g4 = g6;
    int32_t v14 = g5; // 0x2400f
    int32_t v15 = v14 - 0x1038; // 0x2400f
    g8 = v15;
    g9 = *(int32_t *)(v14 - 0x103c);
    g4 = function_22bc0(v15);
    int32_t v16 = *(int32_t *)(g6 + 28); // 0x2403e
    g4 = v16;
    int32_t v17 = *(int32_t *)(g5 - 0x103c); // 0x24041
    g9 = v17;
    int32_t v18 = *(int32_t *)(v16 + 32); // 0x24047
    g4 = v18;
    int32_t v19 = function_2cc30(v17, (char *)v18); // 0x24051
    g4 = v19;
    if (v19 != 0) {
        // bb271
        g4 = function_24230();
    }
    int32_t v20 = g5; // 0x2405e
    int32_t v21; // 0x2406b
    if (*(char *)(v20 - 0x103d) != 0) {
        // bb272
        g4 = function_241e0();
        v21 = g5;
    } else {
        v21 = v20;
    }
    // 0x2406b
    if (*(char *)(v21 - 0x103e) != 0) {
        // bb273
        g4 = function_241b0();
    }
    int32_t v22 = g10; // 0x24078
    if (v22 != 0) {
        // 0x24080
        g4 = v22;
        int128_t v23 = __asm_movsd_1649(v8); // 0x24088
        *(float32_t *)(g5 - 0x104c) = (float32_t)v5;
        g4 = *(int32_t *)(g6 + 28);
        int128_t v24 = __asm_movss(*(int32_t *)(g5 - 0x104c)); // 0x24099
        int128_t v25 = __asm_subss_1651(v24, *(int32_t *)(g4 + 44)); // 0x240a1
        int128_t v26 = __asm_cvtps2pd(__asm_unpcklps(v25, v25)); // 0x240a9
        __asm_ucomisd_1652(__asm_andpd(v26, v23), 0x3f1a36e2e0000000);
        if (true && v22 != 0) {
            // 0x240be
            g4 = g10;
            *(float32_t *)(g5 - 0x104c) = (float32_t)v5;
            int128_t v27 = __asm_movss(*(int32_t *)(g5 - 0x104c)); // 0x240cc
            int128_t v28 = __asm_unpcklps(v27, v27); // 0x240d4
            __asm_movsd(__asm_cvtps2pd(v28));
            int32_t v29 = *(int32_t *)(g6 + 28); // 0x240e0
            g4 = v29;
            int128_t v30 = __asm_movss(*(int32_t *)(v29 + 44)); // 0x240e3
            __asm_movsd(__asm_cvtps2pd(v30));
            g4 = function_22bc0(g8);
        }
    }
    // 0x2413a
    function_23e70(g6, g8, (int32_t)"deToUTF8");
    int32_t v31 = g6; // 0x2414e
    g4 = v31;
    if (v31 == 0) {
        // 0x24163
        return 0;
    }
    // 0x2415a
    int32_t result; // 0x2415d
    if ((char)v31 != 0) {
        // bb274
        result = function_24210();
        g4 = result;
    } else {
        result = v31;
    }
    // 0x24163
    return result;
}

// Address range: 0x24172 - 0x2417e
int32_t function_24172(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + 0x106cc4); // 0x24172
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x24178
    char * v3 = (char *)(v2 + 94); // 0x24178
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x24180 - 0x241aa
int32_t function_24180(void) {
    int32_t v1 = g5 - 56; // 0x24184
    g8 = v1;
    g4 = function_2da40(v1, 32, "%d");
    *(int32_t *)(g5 - 0x103c) = g8;
    return g4;
}

// Address range: 0x241b0 - 0x241de
int32_t function_241b0(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g5 - 0x1048)); // 0x241b0
    __asm_movsd(__asm_cvtps2pd(v1));
    int32_t result = function_22bc0(g8); // 0x241d4
    g4 = result;
    return result;
}

// Address range: 0x241e0 - 0x2420e
int32_t function_241e0(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g5 - 0x1044)); // 0x241e0
    __asm_movsd(__asm_cvtps2pd(v1));
    int32_t result = function_22bc0(g8); // 0x24204
    g4 = result;
    return result;
}

// Address range: 0x24210 - 0x2421f
int32_t function_24210(void) {
    // 0x24210
    return g4;
}

// Address range: 0x24223 - 0x2422f
int32_t function_24223(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + 0x106cc4); // 0x24223
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x24229
    char * v3 = (char *)(v2 + 94); // 0x24229
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x24230 - 0x24257
int32_t function_24230(void) {
    int32_t v1 = *(int32_t *)(g6 + 28); // 0x24230
    g4 = v1;
    g4 = *(int32_t *)(v1 + 32);
    int32_t result = function_22bc0(g8); // 0x2424d
    g4 = result;
    return result;
}

// Address range: 0x24260 - 0x242c1
int32_t function_24260(void) {
    int32_t v1 = g6; // 0x24260
    g4 = v1;
    g2 = false;
    g882 = (char)v1 == 0;
    if ((char)v1 != 0) {
        int32_t v2 = *(int32_t *)(v1 + 28); // 0x24274
        g4 = v2;
        g8 = *(int32_t *)(v2 + 48);
        __asm_movss(*(int32_t *)(v2 + 44));
        return g4;
    }
    // 0x24288
    *(int32_t *)(g5 - 0x103c) = (int32_t)"FCVAR_NEVER_AS_STRING";
    int32_t v3 = *(int32_t *)(g6 + 28); // 0x2429c
    g4 = v3;
    int32_t v4 = *(int32_t *)(v3 + 36); // 0x2429f
    *(int32_t *)(g5 - 0x103c) = v4;
    g2 = false;
    g882 = v4 == 0;
    g4 = (int32_t)&g129;
    int32_t * v5 = (int32_t *)(g5 - 0x103c); // 0x242af
    int32_t v6 = v4 != 0 ? *v5 : (int32_t)&g129; // 0x242af
    g4 = v6;
    *v5 = v6;
    return g4;
}

// Address range: 0x242d0 - 0x24312
int32_t function_242d0(int32_t a1) {
    // 0x242d0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 36); // 0x242da
    g4 = v1;
    *(int32_t *)a1 = (int32_t)&g123;
    *(int32_t *)(g6 + 24) = (int32_t)&g124;
    if (v1 != 0) {
        // 0x242ee
        g4 = function_1bca0(v1);
        *(int32_t *)(g6 + 36) = 0;
    }
    int32_t v2 = g6; // 0x242fd
    g4 = *(int32_t *)(v2 + 76);
    *(int32_t *)(v2 + 80) = 0;
    int32_t result = *(int32_t *)(g6 + 68); // 0x24309
    g4 = result;
    return result;
}

// Address range: 0x2434e - 0x2436f
int32_t function_2434e(void) {
    // 0x2434e
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24b90(g9);
    g4 = *(int32_t *)(g5 - 12);
    while (true) {
        // 0x2435f
        *(int32_t *)g6 = (int32_t)&g121;
        g4 = function_7ab57(g4, (int32_t)&g870);
    }
}

// Address range: 0x24370 - 0x2438f
int32_t function_24370(int32_t a1) {
    int32_t v1 = g6; // 0x24373
    g6 = a1;
    g4 = function_242d0(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x2438a
    g4 = result;
    return result;
}

// Address range: 0x243d1 - 0x243e2
int32_t function_243d1(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = *(int32_t *)(g5 - 0x102c); // 0x243d1
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x24410 - 0x24451
int32_t function_24410(void) {
    int32_t v1 = g5 - 0x1028; // 0x24410
    g9 = v1;
    int32_t v2 = 64 * g6 + v1; // 0x2441e
    g4 = v2;
    g4 = function_33ec0(g10, v2);
    int32_t v3 = g8; // 0x2442d
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x2442d
    g4 = v4;
    g4 = function_24d50(v3, v4, g10);
    g4 = *(int32_t *)(g10 + 8);
    *(int32_t *)(g5 - 28) = 0;
    int32_t result = *(int32_t *)(g5 - 40); // 0x2444a
    g4 = result;
    return result;
}

// Address range: 0x24488 - 0x24497
int32_t function_24488(void) {
    // 0x24488
    *(int32_t *)(g5 - 0x102c) = 0;
    int32_t result = function_243d1((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x24492
    g4 = result;
    return result;
}

// Address range: 0x2449c - 0x2449d
int32_t function_2449c(void) {
    // 0x2449c
    return g4;
}

// Address range: 0x2455a - 0x2459e
int32_t function_2455a(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 + 0x1c892443); // 0x2455a
    *v1 = *v1 - 1;
    g4 &= -256;
    int32_t v2 = function_237a0(); // 0x24565
    g4 = v2;
    if ((char)v2 == 0) {
        int32_t result = *(int32_t *)(g6 + 36); // 0x24598
        g4 = result;
        return result;
    }
    int32_t v3 = *(int32_t *)(g5 + 20); // 0x2456e
    g4 = v3;
    int32_t v4 = *(int32_t *)(g5 + 24); // 0x2457c
    g4 = v4;
    int32_t result2 = function_22720(g6, g10, v4, v3); // 0x24583
    g4 = result2;
    g6 = a1;
    g10 = a2;
    return result2;
}

// Address range: 0x245a3 - 0x245e2
int32_t function_245a3(void) {
    // 0x245a3
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x245a3
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_cvtpd2ps(__asm_movsd_1649(*(int64_t *)v2)); // 0x245ab
    g4 = __asm_movd_1650(v4);
    *(int32_t *)(g6 + 44) = __asm_movss_1646(v4);
    int32_t v5 = g4 & 0x7f800000; // 0x245b8
    g4 = v5;
    if (v5 == 0x7f800000) {
        int32_t result = *(int32_t *)(g6 + 36); // 0x245d0
        g4 = result;
        return result;
    }
    int32_t v6 = __asm_cvttss2si_1647(v4); // 0x245c4
    g4 = v6;
    *(int32_t *)(g6 + 48) = v6;
    return g4;
}

// Address range: 0x245e7 - 0x245f5
int32_t function_245e7(void) {
    // 0x245e7
    *(int32_t *)(g6 + 44) = 0x7f7fffff;
    g4 = 0x7fffffff;
    return 0x7fffffff;
}

// Address range: 0x24600 - 0x246a9
int32_t function_24600(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5, char a6, int32_t a7, char a8, int32_t a9, int32_t a10) {
    int32_t v1 = g6; // 0x24603
    g6 = a1;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)g6 = (int32_t)&g123;
    *(int32_t *)(g6 + 24) = (int32_t)&g124;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x246a9 - 0x2477b
int32_t function_246a9(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x246a9
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24bd0(g9);
    *(int32_t *)g6 = (int32_t)&g121;
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x246bd
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g6; // 0x246d3
    g6 = a1;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)g6 = (int32_t)&g123;
    *(int32_t *)(g6 + 24) = (int32_t)&g124;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    g4 = result;
    g6 = v2;
    return result;
}

// Address range: 0x2477b - 0x2484a
int32_t function_2477b(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5, char a6, int32_t a7, char a8, int32_t a9) {
    // 0x2477b
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24bd0(g9);
    *(int32_t *)g6 = (int32_t)&g121;
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x2478f
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g6; // 0x247a3
    g6 = a1;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)g6 = (int32_t)&g123;
    *(int32_t *)(g6 + 24) = (int32_t)&g124;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    g4 = result;
    g6 = v2;
    return result;
}

// Address range: 0x2484a - 0x2491c
int32_t function_2484a(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5) {
    // 0x2484a
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24bd0(g9);
    *(int32_t *)g6 = (int32_t)&g121;
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x2485e
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g6; // 0x24873
    g6 = a1;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)g6 = (int32_t)&g123;
    *(int32_t *)(g6 + 24) = (int32_t)&g124;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    g4 = result;
    g6 = v2;
    return result;
}

// Address range: 0x2491c - 0x249ed
int32_t function_2491c(int32_t a1, int32_t result, int32_t a3, int32_t a4) {
    // 0x2491c
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24bd0(g9);
    *(int32_t *)g6 = (int32_t)&g121;
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x24930
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g6; // 0x24943
    g6 = a1;
    *(char *)(a1 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)g6 = (int32_t)&g123;
    *(int32_t *)(g6 + 24) = (int32_t)&g124;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    g4 = result;
    g6 = v2;
    return result;
}

// Address range: 0x249ed - 0x24a9c
int32_t function_249ed(int32_t a1, int32_t a2, unsigned char a3) {
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24bd0(g9);
    *(int32_t *)g6 = (int32_t)&g121;
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x24a01
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x24a13
    int32_t v4 = g10; // 0x24a14
    int32_t v5 = g6; // 0x24a15
    int32_t v6 = a2; // 0x24a19
    g9 = v6;
    g4 = a3;
    g6 = a1;
    int32_t v7; // 0x24a2a
    if (v6 == 0) {
        // bb
        g4 = function_24aa9();
        v7 = g6;
    } else {
        v7 = a1;
    }
    int32_t v8 = *(int32_t *)(v7 + 28); // 0x24a2a
    g8 = v8;
    uint32_t v9 = *(int32_t *)(v8 + 80); // 0x24a2d
    g7 = v9;
    int32_t v10 = v8 + 68;
    if (v9 >= 1) {
        int32_t v11 = *(int32_t *)v10; // 0x24a34
        g10 = v11;
        g4 = 0;
        if (v6 == *(int32_t *)v11) {
            // 0x24a95
            return 0;
        }
        int32_t v12 = 0; // 0x24a45
        while (true) {
            int32_t result = v12 + 1; // 0x24a45
            g4 = result;
            if (result == v9) {
                // break -> 0x24a4c
                break;
            }
            // 0x24a40
            if (v6 == *(int32_t *)(4 * result + v11)) {
                if (v12 != -2) {
                    return result;
                }
                goto lab_0x24a4c;
            }
            v12 = result;
        }
    }
    goto lab_0x24a4c;
  lab_0x24a4c:
    // 0x24a4c
    g4 = &a2;
    g8 = v10;
    g4 = function_24eb0(v10, v9, &a2);
    if (a3 == 0) {
        int32_t v13 = function_24aa1((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x24a66
        g4 = v13;
    }
    int32_t v14 = g6; // 0x24a68
    g4 = *(int32_t *)(v14 + 44);
    int32_t result2 = *(int32_t *)(v14 + 36); // 0x24a6f
    g4 = result2;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result2;
}

// Address range: 0x24aa1 - 0x24aa9
int32_t function_24aa1(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x24aa1
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x24aa9 - 0x24ab0
int32_t function_24aa9(void) {
    // 0x24aa9
    return g4;
}

// Address range: 0x24ab5 - 0x24ab7
int32_t function_24ab5(void) {
    int32_t result = function_24aa1((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x24ab5
    g4 = result;
    return result;
}

// Address range: 0x24ac0 - 0x24ae1
int32_t function_24ac0(int32_t a1) {
    g4 = g454;
    g7 = a1;
    g9 = *(int32_t *)g454;
    g4 = 1;
    return 1;
}

// Address range: 0x24af0 - 0x24b05
int32_t function_24af0(int32_t a1) {
    // 0x24af0
    return g4;
}

// Address range: 0x24b10 - 0x24b25
int32_t function_24b10(int32_t a1) {
    // 0x24b10
    return g4;
}

// Address range: 0x24b30 - 0x24b45
int32_t function_24b30(int32_t a1) {
    // 0x24b30
    return g4;
}

// Address range: 0x24b50 - 0x24b6a
int32_t function_24b50(int32_t a1) {
    // 0x24b50
    g4 = (int32_t)&g129;
    return (int32_t)&g129;
}

// Address range: 0x24b70 - 0x24b87
int32_t function_24b70(int32_t a1) {
    // 0x24b70
    g4 = 0;
    return 0;
}

// Address range: 0x24b90 - 0x24ba7
int32_t function_24b90(int32_t a1) {
    // 0x24b90
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x24b9a
    g4 = v1;
    int32_t v2; // 0x24ba1
    if (v1 < 0) {
        // bb
        g4 = function_24bc6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x24ba1
    g4 = v3;
    int32_t result; // 0x24ba5
    if (v3 == 0) {
        // bb7
        result = function_24bbf();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x24ba7
    return result;
}

// Address range: 0x24bbf - 0x24bc6
int32_t function_24bbf(void) {
    // 0x24bbf
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x24bc6 - 0x24bcc
int32_t function_24bc6(int32_t a1, int32_t a2) {
    // 0x24bc6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x24bd0 - 0x24bee
int32_t function_24bd0(int32_t a1) {
    // 0x24bd0
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x24be6
    g4 = result;
    return result;
}

// Address range: 0x24c1f - 0x24c59
int32_t function_24c1f(int32_t a1) {
    // 0x24c1f
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_24b90(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x24c2a
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g125;
    *(int32_t *)(g4 + 24) = (int32_t)&g126;
    int32_t result = function_242d0((int32_t)&g870); // 0x24c54
    g4 = result;
    return result;
}

// Address range: 0x24c60 - 0x24c8c
int32_t function_24c60(int32_t a1) {
    int32_t v1 = g6; // 0x24c63
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g125;
    *(int32_t *)(g6 + 24) = (int32_t)&g126;
    g4 = function_242d0(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x24c87
    g4 = result;
    return result;
}

// Address range: 0x24c90 - 0x24ce0
int32_t function_24c90(int32_t a1, int32_t a2) {
    // 0x24c90
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x24c9b
    int64_t v2 = v1; // 0x24c9b
    g10 = v1;
    int32_t v3; // 0x24ca2
    if (v1 < 0) {
        int32_t v4 = function_24cfb((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x24ca0
        g4 = v4;
        v3 = g6;
    } else {
        v3 = a1;
    }
    int32_t v5 = *(int32_t *)(v3 + 4); // 0x24ca2
    g4 = v5;
    int32_t v6 = v5 + a2; // 0x24ca8
    g7 = v6;
    int32_t v7; // 0x24cc8
    if (v1 == 0) {
        // bb21
        g4 = function_24d08();
        v7 = g7;
    } else {
        v7 = v6;
    }
    int32_t v8 = v7 - 1; // 0x24cae
    int64_t v9 = 0x100000000 * (int64_t)(v8 >> 31) | (int64_t)v8; // 0x24cb6
    g9 = v9 % v2;
    int32_t v10 = ((int32_t)(v9 / v2) + 1) * v1; // 0x24cbb
    g4 = v10;
    int32_t v11; // 0x24cd9
    if (v7 > v10) {
        // 0x24cc2
        g10 = v1;
        int32_t v12 = v10 + v7; // 0x24cc8
        int32_t v13 = v12 < 0; // 0x24ccc
        int32_t v14 = (v13 + v12) / 2; // 0x24cd1
        while (v7 > v14) {
            // 0x24cc8
            v12 = v14 + v7;
            v13 = v12 < 0;
            v14 = (v13 + v12) / 2;
        }
        // 0x24cd7
        g4 = v14;
        g9 = v13;
        v11 = v14;
    } else {
        v11 = v10;
    }
    int32_t v15 = g6; // 0x24cd7
    int32_t v16 = *(int32_t *)v15; // 0x24cd7
    g9 = v16;
    *(int32_t *)(v15 + 4) = v11;
    int32_t result; // 0x24cde
    if (v16 == 0) {
        // bb22
        result = function_24d2f();
        g4 = result;
    } else {
        // 0x24cd7
        result = g4;
    }
    // 0x24ce0
    return result;
}

// Address range: 0x24cfb - 0x24d02
int32_t function_24cfb(int32_t a1, int32_t a2, int32_t a3) {
    // 0x24cfb
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return g4;
}

// Address range: 0x24d08 - 0x24d2f
int32_t function_24d08(void) {
    int32_t v1 = g4; // 0x24d08
    g9 = 2;
    int32_t v2 = v1 == 0 ? 2 : v1; // 0x24d0f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x24d20
    while (g7 > v3) {
        // 0x24d20
        v3 *= 2;
    }
    // 0x24d26
    g4 = v3;
    int32_t v4 = g6; // 0x24d26
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x24d2f - 0x24d30
int32_t function_24d2f(void) {
    // 0x24d2f
    return g4;
}

// Address range: 0x24d50 - 0x24de6
int32_t function_24d50(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x24d56
    g6 = a1;
    int32_t v2 = g10; // 0x24d5c
    g10 = a2;
    int32_t v3 = g8; // 0x24d62
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x24d65
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x24d68
    g9 = v5;
    int32_t v6; // 0x24d74
    int32_t v7; // 0x24de1
    int32_t v8; // 0x24de1
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x24dd6
        g4 = v9;
        g4 = function_24c90(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v6 = a2;
        v7 = a1;
        v8 = v4;
    }
    int32_t v10 = v8 + 1; // 0x24d6f
    g4 = v10;
    g9 = *(int32_t *)v7;
    g8 = v6;
    *(int32_t *)(v7 + 12) = v10;
    g8 *= 16;
    int32_t v11 = g4 - g10 - 1; // 0x24d7e
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x24da8
    if (v11 < 1) {
        // 0x24d6f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x24d8f
        int32_t v14 = 16 * g10 + 16; // 0x24d99
        g4 = v14;
        int32_t v15 = v14 + v13; // 0x24d9c
        g9 = v15;
        g4 = function_2cb20(v15, g8 + v13, 16 * v11);
        int32_t v16 = *(int32_t *)g6; // 0x24da6
        g9 = v16;
        v12 = v16;
    }
    int32_t v17 = g8 + v12; // 0x24da8
    g9 = v17;
    if (v17 != 0) {
        // 0x24dac
        g4 = a3;
        g4 = function_33d30(v17, a3);
    }
    int32_t result = g10; // 0x24dbb
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x24df0 - 0x24e40
int32_t function_24df0(int32_t a1, int32_t a2) {
    // 0x24df0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x24dfb
    int64_t v2 = v1; // 0x24dfb
    g10 = v1;
    int32_t v3; // 0x24e02
    if (v1 < 0) {
        int32_t v4 = function_24e5b((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x24e00
        g4 = v4;
        v3 = g6;
    } else {
        v3 = a1;
    }
    int32_t v5 = *(int32_t *)(v3 + 4); // 0x24e02
    g4 = v5;
    int32_t v6 = v5 + a2; // 0x24e08
    g7 = v6;
    int32_t v7; // 0x24e28
    if (v1 == 0) {
        // bb21
        g4 = function_24e68();
        v7 = g7;
    } else {
        v7 = v6;
    }
    int32_t v8 = v7 - 1; // 0x24e0e
    int64_t v9 = 0x100000000 * (int64_t)(v8 >> 31) | (int64_t)v8; // 0x24e16
    g9 = v9 % v2;
    int32_t v10 = ((int32_t)(v9 / v2) + 1) * v1; // 0x24e1b
    g4 = v10;
    int32_t v11; // 0x24e39
    if (v7 > v10) {
        // 0x24e22
        g10 = v1;
        int32_t v12 = v10 + v7; // 0x24e28
        int32_t v13 = v12 < 0; // 0x24e2c
        int32_t v14 = (v13 + v12) / 2; // 0x24e31
        while (v7 > v14) {
            // 0x24e28
            v12 = v14 + v7;
            v13 = v12 < 0;
            v14 = (v13 + v12) / 2;
        }
        // 0x24e37
        g4 = v14;
        g9 = v13;
        v11 = v14;
    } else {
        v11 = v10;
    }
    int32_t v15 = g6; // 0x24e37
    int32_t v16 = *(int32_t *)v15; // 0x24e37
    g9 = v16;
    *(int32_t *)(v15 + 4) = v11;
    int32_t result; // 0x24e3e
    if (v16 == 0) {
        // bb22
        result = function_24e8f();
        g4 = result;
    } else {
        // 0x24e37
        result = g4;
    }
    // 0x24e40
    return result;
}

// Address range: 0x24e5b - 0x24e62
int32_t function_24e5b(int32_t a1, int32_t a2, int32_t a3) {
    // 0x24e5b
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x24e68 - 0x24e8f
int32_t function_24e68(void) {
    int32_t v1 = g4; // 0x24e68
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x24e6f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x24e80
    while (g7 > v3) {
        // 0x24e80
        v3 *= 2;
    }
    // 0x24e86
    g4 = v3;
    int32_t v4 = g6; // 0x24e86
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x24e8f - 0x24e90
int32_t function_24e8f(void) {
    // 0x24e8f
    return g4;
}

// Address range: 0x24eb0 - 0x24f36
int32_t function_24eb0(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x24eb6
    g6 = a1;
    int32_t v2 = g10; // 0x24ebc
    g10 = a2;
    int32_t v3 = g8; // 0x24ec2
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x24ec5
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x24ec8
    g9 = v5;
    int32_t v6; // 0x24ed1
    int32_t v7; // 0x24f31
    int32_t v8; // 0x24f31
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x24f26
        g4 = v9;
        g4 = function_24df0(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x24ecf
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x24ed8
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x24ee0
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x24f06
    if (v11 < 1) {
        // 0x24ecf
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x24ef1
        int32_t v14 = v13 + 4 + 4 * g10; // 0x24ef8
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x24f04
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x24f06
    g9 = v16;
    if (v16 != 0) {
        // 0x24f0a
        g4 = (int32_t)a3;
        int32_t v17 = *a3; // 0x24f0d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x24f11
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x24f40 - 0x24f51
int32_t function_24f40(int32_t a1) {
    // 0x24f40
    g9 = g396;
    g4 = a1;
    int32_t result = *(int32_t *)(g396 + 52) + a1; // 0x24f4d
    g4 = result;
    return result;
}

// Address range: 0x24f51 - 0x24f53
int32_t function_24f51(void) {
    int32_t result = function_24f60(); // 0x24f51
    g4 = result;
    return result;
}

// Address range: 0x24f60 - 0x24fd7
int32_t function_24f60(void) {
    int32_t v1 = g8; // 0x24f63
    int32_t v2 = g9; // 0x24f64
    g8 = v2;
    int32_t v3 = g10; // 0x24f66
    int32_t v4 = g6; // 0x24f67
    int32_t v5 = g4; // 0x24f68
    g6 = v5;
    g9 = 1;
    g7 = -8;
    g10 = 1;
    int32_t v6 = v5; // 0x24fcb
    int32_t v7 = 1; // 0x24fb5
    int32_t v8; // 0x24fa616
    while (true) {
        int32_t v9 = v7 - 9; // 0x24fb5
        g7 = v9;
        if ((char)v9 < 24) {
            uint32_t v10 = v9 & (int32_t)&g862 & 31; // 0x24fbf
            int32_t v11; // 0x24fbf
            if (v10 != 0) {
                // bb
                v11 = 1 << v10;
            } else {
                v11 = 1;
            }
            // bb28
            g9 = v11;
            int32_t v12 = v11 & 0x80001f; // 0x24fc3
            g7 = v12;
            if (v12 != 0) {
                v8 = v6;
                // break -> 0x24fa2
                break;
            }
        }
        int32_t v13 = v6 + 1; // 0x24fcb
        g6 = v13;
        unsigned char v14 = *(char *)v13; // 0x24fce
        int32_t v15 = v14; // 0x24fce
        g9 = v15;
        if (v14 == 0) {
            v8 = v13;
            // break -> 0x24fa2
            break;
        }
        v6 = v13;
        v7 = v15;
    }
    int32_t result; // 0x24fac
    if (v2 != 0) {
        // 0x24fa6
        *(int32_t *)v2 = v8;
        result = g4;
    } else {
        result = v5;
    }
    // 0x24fa8
    g6 = v4;
    g10 = v3;
    g8 = v1;
    return result;
}

// Address range: 0x24fe0 - 0x2503d
int32_t function_24fe0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x24fe3
    g9 = a2;
    g6 = a1;
    g4 = a3;
    if (a2 == 0) {
        // 0x25030
        g9 = 1;
        g6 = v1;
        g4 = 1;
        return 1;
    }
    // 0x24ff4
    g9 = 0;
    if ((char)a3 == 0) {
        // 0x25006
        g4 = 0;
        g6 = v1;
        return 0;
    }
    int32_t v2 = *(int32_t *)a1; // 0x25010
    g4 = v2;
    int32_t result = *(int32_t *)(v2 + 16); // 0x2501c
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x25042 - 0x25058
int32_t function_25042(void) {
    // 0x25042
    g4 = __asm_in(131);
    g4 = g4 & -256 | (int32_t)__asm_in_1653((int16_t)g9);
    char * v1 = (char *)(g6 + 0x558b0845); // 0x25045
    bool v2; // cf
    *v1 = *v1 - (char)g7 + (char)v2;
    int32_t v3;
    g4 = &v3;
    int32_t result = function_548b505f(); // 0x25053
    g4 = result;
    return result;
}

// Address range: 0x25063 - 0x2506a
int32_t function_25063(void) {
    // 0x25063
    g4 = 1;
    return 1;
}

// Address range: 0x25075 - 0x2507c
int32_t function_25075(void) {
    // 0x25075
    g4 = 1;
    return 1;
}

// Address range: 0x250bd - 0x250db
int32_t function_250bd(void) {
    // 0x250bd
    g10++;
    int32_t v1 = g4; // 0x250bf
    g4 = v1 + 123 & 255 | v1 & -256;
    char * v2 = (char *)(g6 + 0x245c8906); // 0x250c1
    *v2 = (char)g7 + *v2;
    int32_t v3 = g4; // 0x250c7
    int32_t result = (v3 + 137 & 255 | v3 & -256) ^ 36; // 0x250c9
    g4 = result;
    int32_t v4; // ebp
    g6 = *(int32_t *)(v4 - 12);
    g10 = *(int32_t *)(v4 - 8);
    g8 = *(int32_t *)(v4 - 4);
    return result;
}

// Address range: 0x250ea - 0x250fc
int32_t function_250ea(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x108b084d); // 0x250ea
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x2510f - 0x2512c
int32_t function_2510f(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x108b084d); // 0x2510f
    *v1 = *v1 - 1;
    g6 = a1;
    return g4;
}

// Address range: 0x25130 - 0x2517a
int32_t function_25130(int32_t a1) {
    // 0x25130
    g4 = a1;
    int32_t * v1 = (int32_t *)a1; // 0x25136
    *v1 = *v1 & -0x1000000;
    *(int16_t *)(g4 + 18) = 0;
    *(char *)(g4 + 3) = 0;
    *(char *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(char *)(g4 + 17) = 0;
    return g4;
}

// Address range: 0x25180 - 0x2518e
int32_t function_25180(int32_t a1, int32_t a2) {
    // 0x25180
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 28) = a2;
    return g4;
}

// Address range: 0x25190 - 0x251a3
int32_t function_25190(int32_t a1) {
    // 0x25190
    g4 = (int32_t)&g129;
    g6 = a1;
    int32_t result; // 0x251a1
    if (a1 == 0) {
        // bb
        result = function_251c1((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = (int32_t)&g129;
    }
    // 0x251a3
    return result;
}

// Address range: 0x251c1 - 0x251c7
int32_t function_251c1(int32_t a1, int32_t a2) {
    // 0x251c1
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x251d0 - 0x25262
int32_t function_251d0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g10; // 0x251d6
    g10 = a2;
    int32_t v3 = g6; // 0x251dc
    g4 = a3;
    g6 = a1;
    int32_t v4 = g8; // 0x251e5
    int32_t * v5 = (int32_t *)a1; // 0x251ea
    g9 = *v5;
    if (a2 == 0) {
        if ((char)a3 == 0) {
            // 0x251fc
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v4;
            return 0;
        }
    } else {
        if ((char)a3 == 0) {
            // 0x251fc
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v4;
            return 0;
        }
        int32_t v6 = *v5; // 0x25210
        g4 = v6;
        g8 = *(int32_t *)(v6 + 16);
        int32_t v7 = function_25190(a2); // 0x25218
        g4 = v7;
        int32_t v8 = g6; // 0x2521d
        if ((char)v7 == 0) {
            // 0x251fc
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v4;
            return 0;
        }
        a1 = v8;
    }
    int32_t v9 = *(int32_t *)a1;
    g4 = v9;
    g10 = v2;
    g6 = v3;
    g8 = v4;
    int32_t result = *(int32_t *)(v9 + 16); // 0x2523f
    g4 = result;
    return result;
}

// Address range: 0x2529d - 0x2530b
int32_t function_2529d(void) {
    // 0x2529d
    if (g4 != 0) {
        int32_t result = function_23ba0(&g402, "developer"); // 0x252ff
        g4 = result;
        return result;
    }
    int32_t v1 = function_23bf0((int32_t)&g402); // 0x252a8
    g4 = v1;
    if ((char)v1 != 0) {
        // 0x252b1
        g4 = g403;
        int32_t v2 = *(int32_t *)(g403 + 48); // 0x252b6
        g9 = v2;
        if (*(int32_t *)(g6 + 4) > v2) {
            // 0x252be
            g6 = *(int32_t *)(g5 - 12);
            g4 = 0;
            g10 = *(int32_t *)(g5 - 8);
            g8 = *(int32_t *)(g5 - 4);
            return 0;
        }
    }
    // 0x252d0
    *(int32_t *)(g5 + 16) = g10;
    int32_t v3 = g5; // 0x252d3
    g10 = *(int32_t *)(v3 - 8);
    *(int32_t *)(v3 + 12) = g8;
    int32_t v4 = g5; // 0x252d9
    g8 = *(int32_t *)(v4 - 4);
    *(int32_t *)(v4 + 8) = g6;
    g6 = *(int32_t *)(g5 - 12);
    int32_t result2 = function_251d0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x252e5
    g4 = result2;
    return result2;
}

// Address range: 0x25310 - 0x25312
int32_t function_25310(void) {
    // 0x25310
    return g4;
}

// Address range: 0x25313 - 0x25314
int32_t function_25313(void) {
    // 0x25313
    return g4;
}

// Address range: 0x2531f - 0x2534a
int32_t function_2531f(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + 0x2fe8241c); // 0x2531f
    *v1 = *v1 - 1;
    int32_t v2 = a1 - 0x4b727000; // 0x25326
    g4 = v2;
    char * v3 = (char *)v2; // 0x2532b
    *v3 = *v3 + (char)v2;
    int32_t v4 = g4; // 0x2532e
    char * v5 = (char *)v4; // 0x2532e
    *v5 = *v5 + (char)v4;
    g4 = a2;
    if (a2 == 0) {
        // 0x25343
        g4 = -1;
        return -1;
    }
    int32_t result = *(int32_t *)a2 % 0x1000000; // 0x2533d
    g4 = result;
    return result;
}

// Address range: 0x25350 - 0x25370
int32_t function_25350(int32_t a1) {
    // 0x25350
    g9 = a1;
    if (a1 == 0) {
        // 0x25369
        g4 = -1;
        return -1;
    }
    int32_t v1 = (int32_t)*(int16_t *)(a1 + 18); // 0x2535a
    g4 = v1;
    int32_t v2 = (int32_t)*(char *)(a1 + 3); // 0x2535e
    g9 = v2;
    int32_t result = v2 | 256 * v1; // 0x25366
    g4 = result;
    return result;
}

// Address range: 0x25370 - 0x254c6
int32_t function_25370(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x25370
    g4 = 0;
    int32_t v1 = g8; // 0x25375
    int32_t v2 = g10; // 0x25376
    int32_t v3 = g6; // 0x25377
    g10 = a2;
    g9 = a3;
    g6 = a1;
    *(char *)a2 = 0;
    *(char *)g9 = 0;
    int32_t v4 = g6; // 0x2538a
    if (*(char *)(v4 + 20) != 0) {
        // 0x25468
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v5;
    while (true) {
        // 0x25398
        g4 = function_31130(v4);
        int32_t v6 = g6; // 0x253a0
        int32_t v7; // 0x253aa
        if (*(char *)(v6 + 20) != 0) {
            int32_t v8 = function_2558c((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x253a4
            g4 = v8;
            v7 = g6;
        } else {
            v7 = v6;
        }
        int32_t v9 = function_315b0(v7); // 0x253ad
        g4 = v9;
        v5 = g6;
        if ((char)v9 == 0) {
            // break -> 0x253b6
            break;
        }
        v4 = v5;
    }
    int32_t v10 = function_30ba0(v5, 1, 0); // 0x253c9
    g4 = v10;
    int32_t v11; // 0x253d0
    if (v10 == 0) {
        // bb36
        v11 = function_2558c((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v11;
    } else {
        v11 = v10;
    }
    unsigned char v12 = *(char *)v11; // 0x253d6
    int32_t v13 = v12; // 0x253d6
    g4 = v13;
    int32_t v14; // 0x253db
    if (v12 == 34) {
        // bb38
        v14 = function_25596((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v14;
    } else {
        v14 = v13;
    }
    int32_t v15; // 0x253e3
    if ((char)v14 == 125) {
        // bb40
        v15 = function_255d0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v15;
    } else {
        v15 = v14;
    }
    if ((char)v15 == 123) {
        int32_t v16 = function_255d0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x253eb
        g4 = v16;
    }
    // 0x253f1
    g10 = 0;
    g8 = 0;
    char v17 = 0;
    while (true) {
        int32_t v18 = function_30ba0(g6, 1, 0); // 0x25413
        g4 = v18;
        if (v18 == 0) {
            // break -> 0x2545c
            break;
        }
        unsigned char v19 = *(char *)v18; // 0x2541c
        int32_t v20 = v19; // 0x2541c
        g9 = v20;
        if (v19 == 0) {
            // break -> 0x2545c
            break;
        }
        if (v19 == 123) {
            // break -> 0x2545c
            break;
        }
        if (v19 == 34) {
            // break -> 0x2545c
            break;
        }
        if (v19 == 125) {
            // break -> 0x2545c
            break;
        }
        char v21;
        int32_t v22; // 0x2547c
        if (v19 != 91) {
            int32_t v23; // 0x25440
            if (v19 == 93) {
                // bb48
                g4 = function_25570();
                v23 = g9;
            } else {
                v23 = v20;
            }
            int32_t v24 = v23 - 9; // 0x25440
            g7 = v24;
            if ((char)v24 < 24) {
                uint32_t v25 = v24 & (int32_t)&g862 & 31; // 0x2544d
                int32_t v26; // 0x2544d
                if (v25 != 0) {
                    // bb50
                    v26 = 1 << v25;
                } else {
                    v26 = 1;
                }
                // bb51
                g4 = v26;
                if ((v26 & 0x80001f) != 0) {
                    if (v17 == 0) {
                        // break -> 0x2545c
                        break;
                    }
                    v22 = v23;
                    v21 = v17;
                } else {
                    v22 = v23;
                    v21 = v17;
                }
            } else {
                v22 = v23;
                v21 = v17;
            }
        } else {
            v22 = v20;
            v21 = 1;
        }
        uint32_t v27 = g10; // 0x25474
        if ((v27 % 2 != 0) > (bool)&g90) {
            int32_t v28 = g8; // 0x254a8
            g4 = v28;
            if ((char)v28 == 0) {
                int32_t result = (int32_t)g391; // 0x254ae
                g4 = result;
                return result;
            }
        } else {
            // 0x2547c
            *(char *)(v27 + (int32_t)&g397) = (char)v22;
            g10++;
        }
        // 0x25485
        g4 = function_30920(g6, 1, 1);
        v17 = v21;
    }
    // 0x2545c
    *(char *)(g10 + (int32_t)&g397) = 0;
    g4 = (int32_t)&g397;
    // 0x25468
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return (int32_t)&g397;
}

// Address range: 0x254cb - 0x254dd
int32_t function_254cb(void) {
    int32_t v1 = g393; // 0x254cb
    g8 = v1;
    if (v1 < 1) {
        // bb
        g4 = function_25558();
    }
    // 0x254d9
    g8 = 0;
    int32_t result = function_25513(); // 0x254db
    g4 = result;
    return result;
}

// Address range: 0x254e0 - 0x254e1
int32_t function_254e0(void) {
    // 0x254e0
    return g4;
}

// Address range: 0x25508 - 0x25513
int32_t function_25508(void) {
    // 0x25508
    g8++;
    return g4;
}

// Address range: 0x25513 - 0x25525
int32_t function_25513(void) {
    int32_t v1 = g8; // 0x25513
    int32_t v2; // 0x2551d
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_25508();
        v2 = g8;
    } else {
        v2 = v1;
    }
    // 0x2551d
    int32_t result; // 0x25523
    if (v2 < g392) {
        // bb4
        result = function_254e0();
        g4 = result;
    } else {
        // 0x2551d
        result = g4;
    }
    // 0x25525
    return result;
}

// Address range: 0x25558 - 0x25564
int32_t function_25558(void) {
    // 0x25558
    g8 = 1;
    return g4;
}

// Address range: 0x25569 - 0x2556e
int32_t function_25569(void) {
    // 0x25569
    return g4;
}

// Address range: 0x25570 - 0x2558c
int32_t function_25570(void) {
    // 0x25570
    g9 = *(int32_t *)(g5 + 20);
    *(char *)(g5 - 25) = 0;
    *(char *)g9 = 1;
    g9 = (int32_t)*(char *)&g4;
    return g4;
}

// Address range: 0x2558c - 0x25596
int32_t function_2558c(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2558c
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 0;
}

// Address range: 0x25596 - 0x255d0
int32_t function_25596(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x25596
    g4 = *(int32_t *)(g5 + 8);
    *(char *)g10 = 1;
    if (*(char *)(g4 + 17) == 0) {
        // bb
        g4 = function_25601();
    }
    int32_t v1 = function_304d0(); // 0x255a2
    g4 = v1;
    function_31920(g6, v1, (int32_t *)&g397, &g93);
    g4 = (int32_t)&g397;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return (int32_t)&g397;
}

// Address range: 0x255d0 - 0x25601
int32_t function_255d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x255d0
    *(char *)&g397 = (char)g4;
    *(char *)&g398 = 0;
    function_30920(g6, 1, 1);
    g4 = (int32_t)&g397;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return (int32_t)&g397;
}

// Address range: 0x25601 - 0x25608
int32_t function_25601(void) {
    int32_t result = function_304e0(); // 0x25601
    g4 = result;
    return result;
}

// Address range: 0x25610 - 0x2561e
int32_t function_25610(int32_t a1, int32_t a2) {
    // 0x25610
    g9 = a2;
    g4 = a1;
    *(char *)(a1 + 17) = (char)a2;
    return g4;
}

// Address range: 0x25620 - 0x25685
int32_t function_25620(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g5; // 0x25620
    g4 = result;
    int32_t v2 = g6; // 0x25629
    int32_t v3 = g10; // 0x2562c
    g9 = a2;
    int32_t v4 = g8; // 0x25632
    g6 = a3;
    g10 = a4;
    g8 = a5;
    if (result != 0) {
        // 0x25642
        g7 = *(int32_t *)result;
    }
    if (a3 == 0) {
        // 0x25678
        g6 = v2;
        g10 = v3;
        g8 = v4;
        g5 = v1;
        return result;
    }
    // 0x2565a
    g8 = v4;
    g10 = v3;
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_322a0(v2, v3, v4); // 0x2566f
    g4 = result2;
    return result2;
}

// Address range: 0x25690 - 0x25766
int32_t function_25690(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x25693
    int32_t v2 = g10; // 0x25694
    int32_t v3 = g6; // 0x25695
    g6 = a5;
    int32_t v4 = function_2cb40(a5); // 0x2569f
    g8 = v4;
    int32_t v5 = 2 * v4 + 32 & -16; // 0x256aa
    g4 = v5;
    int32_t v6 = g11 - v5 + 39 & -16; // 0x256b3
    g10 = v6;
    int32_t v7; // 0x256d5
    int32_t v8; // 0x25721
    int32_t v9; // 0x256d8
    unsigned char v10; // 0x256e3
    if (v4 >= 0) {
        // 0x256ba
        g9 = 0;
        g7 = 0;
        v9 = 0;
        v7 = 0;
      lab_0x256e3_2:
        while (true) {
          lab_0x256e3:
            // 0x256e3
            v10 = *(char *)(g6 + v7);
            g4 = v10;
            if (v10 != 34) {
                // 0x256c8
                g8 = a1;
                if (*(char *)(a1 + 17) == 0) {
                    goto lab_0x256d5;
                } else {
                    if (v10 == 92) {
                        goto lab_0x256eb;
                    } else {
                        goto lab_0x256d5;
                    }
                }
            } else {
                goto lab_0x256eb;
            }
        }
      lab_0x25704_2:
        // 0x25704
        v8 = g10;
    } else {
        v8 = v6;
    }
    // 0x25704
    g9 = v8;
    int32_t v11 = v8; // 0x25706
    int32_t v12 = *(int32_t *)v11; // 0x25706
    int32_t v13 = v11 + 4; // 0x25708
    g9 = v13;
    int32_t v14 = -1 - v12; // 0x25711
    g7 = v14;
    int32_t v15 = v14 & -0x7f7f7f80 & v12 - 0x1010101; // 0x25715
    g4 = v15;
    while (v15 == 0) {
        // 0x25706
        v11 = v13;
        v12 = *(int32_t *)v11;
        v13 = v11 + 4;
        g9 = v13;
        v14 = -1 - v12;
        g7 = v14;
        v15 = v14 & -0x7f7f7f80 & v12 - 0x1010101;
        g4 = v15;
    }
    // 0x2571c
    g7 = v15;
    g8 = a1;
    *(int32_t *)(g11 + 16) = v8;
    int32_t v16 = g4; // 0x25728
    g4 = (v16 & (int32_t)&g153) == 0 ? g7 / 0x10000 : v16;
    g7 = g9 + 2;
    *(int32_t *)g11 = g8;
    int32_t v17 = (v16 & (int32_t)&g153) == 0 ? g7 : g9; // 0x25736
    unsigned char v18 = (char)g4; // 0x25739
    g9 = v17 - (2 * v18 < v18 ? 4 : 3) - g10;
    *(int32_t *)(g11 + 12) = a4;
    g4 = a3;
    *(int32_t *)(g11 + 20) = g9;
    *(int32_t *)(g11 + 8) = g4;
    g4 = a2;
    *(int32_t *)(g11 + 4) = a2;
    int32_t result = function_25620((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x25759
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x256eb:
    // 0x256eb
    *(char *)(g10 + v9) = 92;
    int32_t v19 = g7 + 1; // 0x256ef
    g7 = v19;
    int32_t v20 = g9; // 0x256f2
    unsigned char v21 = *(char *)(v20 + g6); // 0x256f2
    g4 = v21;
    g9 = v20 + 1;
    *(char *)(g10 + v19) = v21;
    int32_t v22 = g7 + 1; // 0x256fc
    g7 = v22;
    int32_t v23 = g9; // 0x256ff
    if (v4 < v23) {
        // break -> 0x25704
        goto lab_0x25704_2;
    }
    v9 = v22;
    v7 = v23;
    // continue -> 0x256e3
    goto lab_0x256e3_2;
  lab_0x256d5:
    // 0x256d5
    g9 = v7 + 1;
    *(char *)(g10 + v9) = v10;
    int32_t v24 = g7 + 1; // 0x256db
    g7 = v24;
    int32_t v25 = g9; // 0x256de
    if (v4 < v25) {
        // break -> 0x25704
        goto lab_0x25704_2;
    }
    v9 = v24;
    v7 = v25;
    goto lab_0x256e3;
}

// Address range: 0x25770 - 0x257c4
int32_t function_25770(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g5; // 0x25770
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x25773
    int32_t v4 = g10; // 0x25774
    int32_t v5 = g6; // 0x25775
    g10 = a5;
    g8 = a1;
    if (a5 < 1) {
        // 0x257bc
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v1;
        return g4;
    }
    // 0x25783
    g6 = 0;
    g10 = a5;
    g6 = 1;
    g4 = a2;
    int32_t result = function_25620(a1, a2, a3, a4, (int32_t)&g128); // 0x257b3
    g4 = result;
    int32_t v6 = g6; // 0x257b8
    while (v6 != g10) {
        // 0x25788
        g6 = v6 + 1;
        g4 = a2;
        result = function_25620(g8, a2, a3, a4, (int32_t)&g128);
        g4 = result;
        v6 = g6;
    }
    // 0x257bc
    g6 = v5;
    g10 = v4;
    g8 = v3;
    g5 = v2;
    return result;
}

// Address range: 0x257d0 - 0x25973
int32_t function_257d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x257d3
    int32_t v2 = g10; // 0x257d4
    int32_t v3 = g6; // 0x257d5
    g8 = a3;
    g10 = a4;
    g4 = a1;
    function_25770(a1, a2, a3, a4, a5);
    g4 = a1;
    function_25620(a1, a2, g8, g10, (int32_t)&g130);
    g4 = a1;
    int32_t v4 = function_25190(a1); // 0x25830
    g4 = a1;
    function_25690(a1, a2, g8, g10, v4);
    g4 = a1;
    function_25620(a1, a2, g8, g10, (int32_t)"\"\n");
    g4 = a1;
    function_25770(a1, a2, g8, g10, a5);
    g4 = a1;
    function_25620(a1, a2, g8, g10, (int32_t)"{\n");
    g4 = a1;
    int32_t v5 = *(int32_t *)(a1 + 24); // 0x258cb
    g6 = v5;
    if (v5 == 0) {
      lab_0x25920:
        // 0x25920
        g4 = a1;
        function_25770(a1, a2, g8, g10, a5);
        g4 = a1;
        int32_t result = function_25620(a1, a2, g8, g10, (int32_t)"}\n"); // 0x25966
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v6 = a5 + 1; // 0x258d5
    g4 = v6;
    char * v7; // 0x2590c
    while (true) {
        int32_t v8 = *(int32_t *)(v5 + 24); // 0x25905
        g4 = v8;
        int32_t v9; // 0x258fe
        if (v8 != 0) {
            // 0x258e0
            g4 = a2;
            g4 = function_257d0(v5, a2, g8, g10, v6);
            v9 = g6;
        } else {
            // 0x2590c
            v7 = (char *)(v5 + 16);
            if (*v7 < 8) {
                // break -> 0x25912
                break;
            }
            v9 = v5;
        }
        int32_t v10 = *(int32_t *)(v9 + 20); // 0x258fe
        g6 = v10;
        if (v10 == 0) {
            goto lab_0x25920;
        }
        v5 = v10;
    }
    int32_t result2 = (int32_t)*v7; // 0x25912
    g4 = result2;
    return result2;
}

// Address range: 0x25978 - 0x25ab7
int32_t function_25978(void) {
    int32_t v1 = g5; // 0x25978
    int32_t v2 = *(int32_t *)(v1 - 76); // 0x25978
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x25987
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x2598e
    g4 = v4;
    g4 = function_25770(v4, v3, g8, g10, v2);
    int32_t v5 = g5; // 0x25999
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x25999
    g4 = v6;
    int32_t v7 = *(int32_t *)(v5 + 8); // 0x259b8
    g4 = v7;
    g4 = function_25620(v7, v6, g8, g10, (int32_t)&g130);
    int32_t v8 = function_25190(g6); // 0x259c6
    g4 = v8;
    int32_t v9 = function_2cb40(v8); // 0x259ce
    g4 = v9;
    *(int32_t *)(g5 - 80) = v9;
    int32_t v10 = function_25190(g6); // 0x259d9
    g4 = v10;
    int32_t v11 = g5; // 0x259de
    g9 = *(int32_t *)(v11 - 80);
    int32_t v12 = *(int32_t *)(v11 + 12); // 0x259e9
    g4 = v12;
    int32_t v13 = *(int32_t *)(v11 + 8); // 0x259f8
    g4 = v13;
    g4 = function_25620(v13, v12, g8, g10, v10);
    int32_t v14 = g5; // 0x25a03
    int32_t v15 = *(int32_t *)(v14 + 12); // 0x25a03
    g4 = v15;
    int32_t v16 = *(int32_t *)(v14 + 8); // 0x25a22
    g4 = v16;
    g4 = function_25620(v16, v15, g8, g10, (int32_t)"\"\t\t\"");
    int32_t v17 = *(int32_t *)(g6 + 4); // 0x25a2d
    g4 = v17;
    g9 = *(int32_t *)(v17 + 4);
    int32_t v18 = g5 - 72; // 0x25a4d
    g4 = v18;
    function_2da40(v18, 32, "0x%016llX");
    int32_t v19 = g5 - 72; // 0x25a58
    g4 = v19;
    function_2cb40(v19);
    int32_t v20 = g5; // 0x25a6b
    int32_t v21 = v20 - 72; // 0x25a6b
    g4 = v21;
    int32_t v22 = *(int32_t *)(v20 + 12); // 0x25a72
    g4 = v22;
    int32_t v23 = *(int32_t *)(v20 + 8); // 0x25a7d
    g4 = v23;
    g4 = function_25620(v23, v22, g8, g10, v21);
    int32_t v24 = g5; // 0x25a88
    int32_t v25 = *(int32_t *)(v24 + 12); // 0x25a88
    g4 = v25;
    int32_t v26 = *(int32_t *)(v24 + 8); // 0x25aa7
    g4 = v26;
    int32_t result = function_25620(v26, v25, g8, g10, (int32_t)"\"\n"); // 0x25aad
    g4 = result;
    return result;
}

// Address range: 0x25acc - 0x25ad1
int32_t function_25acc(void) {
    // 0x25acc
    return g4;
}

// Address range: 0x25afb - 0x25bc5
int32_t function_25afb(void) {
    int32_t v1 = g5; // 0x25b03
    int32_t v2 = *(int32_t *)(v1 - 76); // 0x25b03
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x25b12
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x25b19
    g4 = v4;
    g4 = function_25770(v4, v3, g8, g10, v2);
    int32_t v5 = g5; // 0x25b24
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x25b24
    g4 = v6;
    int32_t v7 = *(int32_t *)(v5 + 8); // 0x25b43
    g4 = v7;
    g4 = function_25620(v7, v6, g8, g10, (int32_t)&g130);
    int32_t v8 = function_25190(g6); // 0x25b51
    g4 = v8;
    int32_t v9 = function_2cb40(v8); // 0x25b59
    g4 = v9;
    *(int32_t *)(g5 - 80) = v9;
    int32_t v10 = function_25190(g6); // 0x25b64
    g4 = v10;
    int32_t v11 = g5; // 0x25b69
    g9 = *(int32_t *)(v11 - 80);
    int32_t v12 = *(int32_t *)(v11 + 12); // 0x25b74
    g4 = v12;
    int32_t v13 = *(int32_t *)(v11 + 8); // 0x25b83
    g4 = v13;
    g4 = function_25620(v13, v12, g8, g10, v10);
    int32_t v14 = g5; // 0x25b8e
    int32_t v15 = *(int32_t *)(v14 + 12); // 0x25b8e
    g4 = v15;
    int32_t v16 = *(int32_t *)(v14 + 8); // 0x25bad
    g4 = v16;
    g4 = function_25620(v16, v15, g8, g10, (int32_t)"\"\t\t\"");
    int32_t result = function_25e48(&g399); // 0x25bc0
    g4 = result;
    return result;
}

// Address range: 0x25bc8 - 0x25cab
int32_t function_25bc8(void) {
    int32_t v1 = g5; // 0x25bc8
    int32_t v2 = *(int32_t *)(v1 - 76); // 0x25bc8
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x25bd7
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x25bde
    g4 = v4;
    g4 = function_25770(v4, v3, g8, g10, v2);
    int32_t v5 = g5; // 0x25be9
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x25be9
    g4 = v6;
    int32_t v7 = *(int32_t *)(v5 + 8); // 0x25c08
    g4 = v7;
    g4 = function_25620(v7, v6, g8, g10, (int32_t)&g130);
    int32_t v8 = function_25190(g6); // 0x25c16
    g4 = v8;
    int32_t v9 = function_2cb40(v8); // 0x25c1e
    g4 = v9;
    *(int32_t *)(g5 - 80) = v9;
    int32_t v10 = function_25190(g6); // 0x25c29
    g4 = v10;
    int32_t v11 = g5; // 0x25c2e
    g9 = *(int32_t *)(v11 - 80);
    int32_t v12 = *(int32_t *)(v11 + 12); // 0x25c39
    g4 = v12;
    int32_t v13 = *(int32_t *)(v11 + 8); // 0x25c48
    g4 = v13;
    g4 = function_25620(v13, v12, g8, g10, v10);
    int32_t v14 = g5; // 0x25c53
    int32_t v15 = *(int32_t *)(v14 + 12); // 0x25c53
    g4 = v15;
    int32_t v16 = *(int32_t *)(v14 + 8); // 0x25c72
    g4 = v16;
    function_25620(v16, v15, g8, g10, (int32_t)"\"\t\t\"");
    g4 = g5 - 72;
    int128_t v17 = __asm_cvtps2pd(__asm_movss(*(int32_t *)(g6 + 12))); // 0x25c85
    int32_t result = function_2da40(g4, 48, (char *)__asm_movsd(v17)); // 0x25ca1
    g4 = result;
    return result;
}

// Address range: 0x25cb0 - 0x25d8c
int32_t function_25cb0(void) {
    int32_t v1 = g5; // 0x25cb0
    int32_t v2 = *(int32_t *)(v1 - 76); // 0x25cb0
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x25cbf
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x25cc6
    g4 = v4;
    g4 = function_25770(v4, v3, g8, g10, v2);
    int32_t v5 = g5; // 0x25cd1
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x25cd1
    g4 = v6;
    int32_t v7 = *(int32_t *)(v5 + 8); // 0x25cf0
    g4 = v7;
    g4 = function_25620(v7, v6, g8, g10, (int32_t)&g130);
    int32_t v8 = function_25190(g6); // 0x25cfe
    g4 = v8;
    int32_t v9 = function_2cb40(v8); // 0x25d06
    g4 = v9;
    *(int32_t *)(g5 - 80) = v9;
    int32_t v10 = function_25190(g6); // 0x25d11
    g4 = v10;
    int32_t v11 = g5; // 0x25d16
    g9 = *(int32_t *)(v11 - 80);
    int32_t v12 = *(int32_t *)(v11 + 12); // 0x25d21
    g4 = v12;
    int32_t v13 = *(int32_t *)(v11 + 8); // 0x25d30
    g4 = v13;
    g4 = function_25620(v13, v12, g8, g10, v10);
    int32_t v14 = g5; // 0x25d3b
    int32_t v15 = *(int32_t *)(v14 + 12); // 0x25d3b
    g4 = v15;
    int32_t v16 = *(int32_t *)(v14 + 8); // 0x25d5a
    g4 = v16;
    function_25620(v16, v15, g8, g10, (int32_t)"\"\t\t\"");
    int32_t v17 = g5 - 72; // 0x25d7c
    g4 = v17;
    int32_t result = function_2da40(v17, 32, "%d"); // 0x25d82
    g4 = result;
    return result;
}

// Address range: 0x25d90 - 0x25d91
int32_t function_25d90(void) {
    // 0x25d90
    return g4;
}

// Address range: 0x25e48 - 0x25e67
int32_t function_25e48(int32_t * a1) {
    int32_t v1 = g5; // 0x25e48
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x25e48
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 8); // 0x25e57
    g4 = v3;
    int32_t result = function_25690(v3, v2, g8, g10, (int32_t)&g870); // 0x25e5d
    g4 = result;
    return result;
}

// Address range: 0x25e70 - 0x25f0e
int32_t function_25e70(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x25e76
    g6 = a2;
    int32_t v2 = g10; // 0x25e7c
    g10 = a3;
    int32_t v3 = g8; // 0x25e82
    g8 = a4;
    int32_t v4 = *(int32_t *)a2; // 0x25e88
    g4 = v4;
    if (v4 == 0) {
        // 0x25ef0
        g4 = (int32_t)"NULL";
        g8 = a4 == 0 ? (int32_t)"NULL" : a4;
        g10 = a3 == 0 ? (int32_t)"NULL" : a3;
        return (int32_t)"NULL";
    }
    // 0x25ea4
    g9 = a1;
    function_257d0(a1, a2, v4, 0, 0);
    g4 = v4;
    g9 = *(int32_t *)g6;
    g6 = v1;
    g4 = 1;
    g10 = v2;
    g8 = v3;
    return 1;
}

// Address range: 0x25f12 - 0x25f22
int32_t function_25f12(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3fce0ba3); // 0x25f12
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x25f30 - 0x25f61
int32_t function_25f30(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t result = function_257d0(a1, 0, 0, a2, a3); // 0x25f5a
    g4 = result;
    return result;
}

// Address range: 0x25f70 - 0x25fa5
int32_t function_25f70(int32_t a1, int32_t a2) {
    // 0x25f70
    g4 = 0;
    g9 = a1;
    g7 = a2;
    if (a1 == 0) {
        // 0x25fa3
        return 0;
    }
    int32_t result = *(int32_t *)(a1 + 24); // 0x25f7f
    g4 = result;
    if (result == 0) {
        // 0x25fa3
        return result;
    }
    int32_t result2; // 0x25fa47
    while (true) {
        int32_t v1 = *(int32_t *)result % 0x1000000; // 0x25f99
        g9 = v1;
        if (v1 == a2) {
            result2 = result;
            // break -> 0x25fa3
            break;
        }
        int32_t v2 = *(int32_t *)(result + 20); // 0x25f90
        g4 = v2;
        if (v2 == 0) {
            result2 = 0;
            // break -> 0x25fa3
            break;
        }
        result = v2;
    }
    // 0x25fa3
    return result2;
}

// Address range: 0x25fb0 - 0x25fdb
int32_t function_25fb0(int32_t a1, int32_t a2) {
    // 0x25fb0
    g4 = a1;
    g7 = a2;
    int32_t * v1 = (int32_t *)(a1 + 24); // 0x25fb9
    int32_t v2 = *v1; // 0x25fb9
    g9 = v2;
    if (v2 == 0) {
        // 0x25fd6
        *v1 = a2;
        return g4;
    }
    int32_t * v3 = (int32_t *)(v2 + 20); // 0x25fca7
    int32_t result = *v3; // 0x25fca8
    g4 = result;
    if (result == 0) {
        // 0x25fd1
        *v3 = a2;
        return result;
    }
    g9 = result;
    int32_t * v4 = (int32_t *)(result + 20); // 0x25fca
    int32_t result2 = *v4; // 0x25fca
    g4 = result2;
    while (result2 != 0) {
        // 0x25fc8
        result = result2;
        g9 = result;
        v4 = (int32_t *)(result + 20);
        result2 = *v4;
        g4 = result2;
    }
    // 0x25fd1
    *v4 = a2;
    return result2;
}

// Address range: 0x25fe0 - 0x2603e
int32_t function_25fe0(int32_t a1, int32_t a2) {
    // 0x25fe0
    g7 = a2;
    g4 = a1;
    if (a2 == 0) {
        // 0x26014
        return g4;
    }
    int32_t * v1 = (int32_t *)(a1 + 24); // 0x25fed
    int32_t v2 = *v1; // 0x25fed
    g9 = v2;
    if (v2 == a2) {
        int32_t * v3 = (int32_t *)(a2 + 20); // 0x2602f
        int32_t v4 = *v3; // 0x2602f
        g9 = v4;
        *v1 = v4;
        *v3 = 0;
        // 0x26014
        return g4;
    }
    int32_t * v5 = (int32_t *)(v2 + 20); // 0x2600613
    int32_t v6 = *v5; // 0x2600614
    g4 = v6;
    if (v6 == 0) {
      lab_0x2600d:
        // 0x2600d
        *(int32_t *)(a2 + 20) = 0;
        // 0x26014
        return g4;
    }
    while (true) {
        if (v6 == a2) {
            // break -> 0x26020
            break;
        }
        // 0x26004
        g9 = v6;
        int32_t * v7 = (int32_t *)(v6 + 20); // 0x26006
        int32_t v8 = *v7; // 0x26006
        g4 = v8;
        if (v8 == 0) {
            goto lab_0x2600d;
        }
        v6 = v8;
        v5 = v7;
    }
    int32_t * v9 = (int32_t *)(a2 + 20); // 0x26020
    int32_t v10 = *v9; // 0x26020
    g4 = v10;
    *v5 = v10;
    *v9 = 0;
    // 0x26014
    return g4;
}

// Address range: 0x26040 - 0x2609c
int32_t function_26040(int32_t result, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x26043
    g7 = a2;
    g4 = result;
    g6 = a3;
    if (a2 == 0) {
        int32_t v2 = *(int32_t *)(result + 24); // 0x26090
        g9 = v2;
        *(int32_t *)(a3 + 20) = v2;
        *(int32_t *)(g4 + 24) = g6;
        g6 = v1;
        return g4;
    }
    if (result == 0) {
        // 0x26087
        g6 = v1;
        return 0;
    }
    int32_t v3 = *(int32_t *)(result + 24); // 0x26055
    g9 = v3;
    if (v3 == 0) {
        // 0x26087
        g6 = v1;
        return result;
    }
    // 0x2605c
    g4 = 1;
    int32_t v4; // 0x2607e
    if (a2 == 1) {
        v4 = v3;
        goto lab_0x2607e_2;
      lab_0x2607e_2:;
        int32_t v5 = *(int32_t *)(v4 + 20); // 0x2607e
        g4 = v5;
        *(int32_t *)(a3 + 20) = v5;
        *(int32_t *)(g9 + 20) = g6;
        // 0x26087
        g6 = v1;
        return g4;
    }
    int32_t result2 = 1; // 0x26077
    int32_t v6 = v3; // 0x26070
    while (true) {
        int32_t v7 = *(int32_t *)(v6 + 20); // 0x26070
        g9 = v7;
        if (v7 == 0) {
            // break -> 0x26087
            break;
        }
        int32_t v8 = result2 + 1; // 0x26077
        g4 = v8;
        if (v8 == a2) {
            v4 = v7;
            goto lab_0x2607e_2;
        }
        result2 = v8;
        v6 = v7;
    }
    // 0x26087
    g6 = v1;
    return result2;
}

// Address range: 0x260a0 - 0x260dc
int32_t function_260a0(int32_t a1, int32_t a2) {
    // 0x260a0
    g4 = 0;
    g9 = a1;
    g7 = a2;
    if (a1 == 0) {
        // 0x260d0
        return 0;
    }
    int32_t v1 = *(int32_t *)(a1 + 24); // 0x260af
    g9 = v1;
    if (v1 == 0) {
        // 0x260d0
        return 0;
    }
    // 0x260b6
    g4 = 1;
    if (v1 == a2) {
        // 0x260d0
        return 1;
    }
    while (true) {
        int32_t v2 = *(int32_t *)(v1 + 20); // 0x260c0
        g9 = v2;
        if (v2 == 0) {
            // break -> 0x260d8
            break;
        }
        if (v2 == a2) {
            // 0x260cb
            g4 = 1;
            return 1;
        }
        v1 = v2;
    }
    // 0x260d8
    g4 = 0;
    return 0;
}

// Address range: 0x260e0 - 0x26136
int32_t function_260e0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x260e3
    g4 = a1;
    g7 = a2;
    g6 = a3;
    int32_t v2 = *(int32_t *)(a1 + 24); // 0x260ed
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 20); // 0x26106243
    if (v2 == a2) {
        // 0x26123
        g7 = result;
        *(int32_t *)(a3 + 20) = result;
        *(int32_t *)(g9 + 20) = 0;
        *(int32_t *)(g4 + 24) = g6;
        g6 = v1;
        return g4;
    }
    // 0x26106
    g4 = result;
    if (result == 0) {
        // 0x2610d
        g6 = v1;
        return result;
    }
    while (true) {
        if (result == a2) {
            // break -> 0x26110
            break;
        }
        // 0x26104
        g9 = result;
        int32_t result2 = *(int32_t *)(result + 20); // 0x26106
        g4 = result2;
        if (result2 == 0) {
            // 0x2610d
            g6 = v1;
            return result2;
        }
        result = result2;
    }
    int32_t v3 = *(int32_t *)(a2 + 20); // 0x26110
    g4 = v3;
    *(int32_t *)(a3 + 20) = v3;
    *(int32_t *)(g7 + 20) = 0;
    *(int32_t *)(g9 + 20) = g6;
    g6 = v1;
    return g4;
}

// Address range: 0x26140 - 0x26154
int32_t function_26140(int32_t a1) {
    // 0x26140
    g4 = a1;
    if (a1 == 0) {
        // 0x26150
        g4 = 0;
        return 0;
    }
    int32_t result = *(int32_t *)(a1 + 24); // 0x2614a
    g4 = result;
    return result;
}

// Address range: 0x26160 - 0x26174
int32_t function_26160(int32_t a1) {
    // 0x26160
    g4 = a1;
    if (a1 == 0) {
        // 0x26170
        g4 = 0;
        return 0;
    }
    int32_t result = *(int32_t *)(a1 + 20); // 0x2616a
    g4 = result;
    return result;
}

// Address range: 0x26180 - 0x2618e
int32_t function_26180(int32_t a1, int32_t a2) {
    // 0x26180
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 20) = a2;
    return g4;
}

// Address range: 0x26190 - 0x261ba
int32_t function_26190(int32_t a1) {
    // 0x26190
    g4 = 0;
    g9 = a1;
    if (a1 == 0) {
        // 0x261b8
        return 0;
    }
    int32_t v1 = *(int32_t *)(a1 + 24); // 0x2619c
    g4 = v1;
    if (v1 == 0) {
        // 0x261b8
        return 0;
    }
    int32_t result; // 0x261b9
    while (true) {
        // 0x261a8
        if (*(char *)(v1 + 16) == 0) {
            result = v1;
            // break -> 0x261b8
            break;
        }
        int32_t v2 = *(int32_t *)(v1 + 20); // 0x261ae
        g4 = v2;
        if (v2 == 0) {
            result = v2;
            // break -> 0x261b8
            break;
        }
        v1 = v2;
    }
    // 0x261b8
    return result;
}

// Address range: 0x261c0 - 0x261ea
int32_t function_261c0(int32_t a1) {
    // 0x261c0
    g4 = 0;
    g9 = a1;
    if (a1 == 0) {
        // 0x261e8
        return 0;
    }
    int32_t v1 = *(int32_t *)(a1 + 20); // 0x261cc
    g4 = v1;
    if (v1 == 0) {
        // 0x261e8
        return 0;
    }
    int32_t result; // 0x261e9
    while (true) {
        // 0x261d8
        if (*(char *)(v1 + 16) == 0) {
            result = v1;
            // break -> 0x261e8
            break;
        }
        int32_t v2 = *(int32_t *)(v1 + 20); // 0x261de
        g4 = v2;
        if (v2 == 0) {
            result = v2;
            // break -> 0x261e8
            break;
        }
        v1 = v2;
    }
    // 0x261e8
    return result;
}

// Address range: 0x261f0 - 0x2621a
int32_t function_261f0(int32_t a1) {
    // 0x261f0
    g4 = 0;
    g9 = a1;
    if (a1 == 0) {
        // 0x26218
        return 0;
    }
    int32_t v1 = *(int32_t *)(a1 + 24); // 0x261fc
    g4 = v1;
    if (v1 == 0) {
        // 0x26218
        return 0;
    }
    int32_t result; // 0x26219
    while (true) {
        // 0x26208
        if (*(char *)(v1 + 16) != 0) {
            result = v1;
            // break -> 0x26218
            break;
        }
        int32_t v2 = *(int32_t *)(v1 + 20); // 0x2620e
        g4 = v2;
        if (v2 == 0) {
            result = v2;
            // break -> 0x26218
            break;
        }
        v1 = v2;
    }
    // 0x26218
    return result;
}

// Address range: 0x26220 - 0x2624a
int32_t function_26220(int32_t a1) {
    // 0x26220
    g4 = 0;
    g9 = a1;
    if (a1 == 0) {
        // 0x26248
        return 0;
    }
    int32_t v1 = *(int32_t *)(a1 + 20); // 0x2622c
    g4 = v1;
    if (v1 == 0) {
        // 0x26248
        return 0;
    }
    int32_t result; // 0x26249
    while (true) {
        // 0x26238
        if (*(char *)(v1 + 16) != 0) {
            result = v1;
            // break -> 0x26248
            break;
        }
        int32_t v2 = *(int32_t *)(v1 + 20); // 0x2623e
        g4 = v2;
        if (v2 == 0) {
            result = v2;
            // break -> 0x26248
            break;
        }
        v1 = v2;
    }
    // 0x26248
    return result;
}

// Address range: 0x26250 - 0x262cb
int32_t function_26250(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x26256
    g6 = a1;
    int32_t v2 = g10; // 0x2625c
    g10 = a2;
    int32_t v3 = g8; // 0x26262
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x26265
    g4 = v4;
    int32_t v5; // 0x26274
    if (v4 != 0) {
        // 0x2626c
        g4 = function_1bca0(v4);
        v5 = g6;
    } else {
        v5 = a1;
    }
    int32_t v6 = *(int32_t *)(v5 + 8); // 0x26274
    g4 = v6;
    int32_t v7; // 0x2628a
    if (v6 != 0) {
        // 0x2627b
        g4 = function_1bca0(v6);
        v7 = g6;
    } else {
        v7 = v5;
    }
    // 0x26283
    g4 = (int32_t)&g129;
    *(int32_t *)(v7 + 8) = 0;
    int32_t v8 = a2 == 0 ? g4 : a2; // 0x26291
    g10 = v8;
    int32_t v9 = function_2cb40(v8); // 0x26297
    g4 = v9;
    g8 = v9 + 1;
    int32_t v10 = function_1bc60(); // 0x262a2
    g4 = v10;
    *(int32_t *)(g6 + 4) = v10;
    g4 = function_2cb10(g4, g10, g8);
    *(char *)(g6 + 16) = 1;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x262d0 - 0x262e1
int32_t function_262d0(int32_t a1) {
    // 0x262d0
    g6 = a1;
    return g4;
}

// Address range: 0x262e5 - 0x26329
int32_t function_262e5(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x108b0c4d); // 0x262e5
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    int32_t v3 = v2 - 12; // 0x262fa
    g7 = v3;
    int32_t v4 = g6; // 0x26304
    g9 = v4;
    int32_t v5 = *(int32_t *)v3 % 0x1000000; // 0x2630f
    g7 = v5;
    int32_t v6 = v5 | v4 & -0x1000000; // 0x26315
    g9 = v6;
    *(int32_t *)v4 = v6;
    *(char *)(g6 + 3) = (char)g4;
    int32_t v7 = g4 / 256; // 0x2631c
    g4 = v7;
    *(int16_t *)(g6 + 18) = (int16_t)v7;
    g6 = a1;
    return g4;
}

// Address range: 0x26330 - 0x26381
int32_t function_26330(int32_t a1) {
    // 0x26330
    g4 = a1;
    int32_t * v1 = (int32_t *)a1; // 0x26336
    *v1 = *v1 & -0x1000000;
    *(int16_t *)(g4 + 18) = 0;
    *(char *)(g4 + 3) = 0;
    *(char *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(char *)(g4 + 17) = 0;
    int32_t result = function_262d0(g4); // 0x2637c
    g4 = result;
    return result;
}

// Address range: 0x26390 - 0x263e3
int32_t function_26390(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x26393
    int32_t v2 = g10; // 0x26394
    int32_t v3 = g6; // 0x26395
    g10 = a2;
    g8 = a1;
    int32_t result = *(int32_t *)(a2 + 12); // 0x2639f
    g4 = result;
    if (result < 1) {
        // 0x263c6
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x263a9
    g7 = 0;
    int32_t v4 = 0; // 0x263bb
    while (true) {
        int32_t v5 = *(int32_t *)a2; // 0x263b0
        g4 = v5;
        int32_t v6 = *(int32_t *)(v5 + 4 * v4); // 0x263b4
        g6 = v6;
        int32_t v7; // 0x263be
        if (a1 != 0) {
            g9 = a1;
            int32_t v8 = *(int32_t *)(a1 + 20); // 0x263da
            g4 = v8;
            v7 = a1;
            while (v8 != 0) {
                // 0x263da
                a1 = v8;
                g9 = a1;
                v8 = *(int32_t *)(a1 + 20);
                g4 = v8;
                v7 = a1;
            }
        } else {
            // 0x263b9
            g9 = 0;
            v7 = 0;
        }
        // 0x263bb
        g7 = v4 + 1;
        *(int32_t *)(v7 + 20) = v6;
        int32_t v9 = g7; // 0x263c1
        if (v9 == result) {
            // break -> 0x263c6
            break;
        }
        // 0x263bb
        v4 = v9;
        a2 = g10;
    }
    // 0x263c6
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x263f0 - 0x26450
int32_t function_263f0(int32_t a1, int32_t a2, int32_t a3) {
    char v1 = 0; // bp-13
    g4 = &v1;
    int32_t v2 = function_34d70(&g394, &v1, a1, a2, 0); // 0x2641f
    g4 = v2;
    if ((char)v2 == 0) {
        int32_t result = (int32_t)g391; // 0x26438
        g4 = result;
        return result;
    }
    int32_t result2 = v1; // 0x26428
    g4 = result2;
    return result2;
}

// Address range: 0x26454 - 0x2645a
int32_t function_26454(void) {
    // 0x26454
    return g4;
}

// Address range: 0x2645a - 0x26466
int32_t function_2645a(void) {
    // 0x2645a
    if (g4 < 1) {
        // bb
        g4 = function_264e8();
    }
    // 0x26462
    g6 = 0;
    int32_t result = function_264a3(); // 0x26464
    g4 = result;
    return result;
}

// Address range: 0x26470 - 0x26471
int32_t function_26470(void) {
    // 0x26470
    return g4;
}

// Address range: 0x26498 - 0x264a3
int32_t function_26498(void) {
    // 0x26498
    g6++;
    return g4;
}

// Address range: 0x264a3 - 0x264b5
int32_t function_264a3(void) {
    int32_t v1 = g6; // 0x264a3
    int32_t v2; // 0x264ad
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_26498();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x264ad
    int32_t result; // 0x264b3
    if (g392 > v2) {
        // bb4
        result = function_26470();
        g4 = result;
    } else {
        // 0x264ad
        result = g4;
    }
    // 0x264b5
    return result;
}

// Address range: 0x264c2 - 0x264c3
int32_t function_264c2(void) {
    // 0x264c2
    return g4;
}

// Address range: 0x264e8 - 0x264ef
int32_t function_264e8(void) {
    // 0x264e8
    return g4;
}

// Address range: 0x264f3 - 0x26cd4
int32_t function_264f3(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x264f3
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g98;
    int32_t v2 = g6; // 0x264f7
    g4 = 0;
    g5 = &a1;
    int32_t v3 = g8; // 0x26505
    int32_t v4 = g10; // 0x26506
    g6 = a3;
    g872 = a2;
    g10 = a2;
    unsigned char v5 = *(char *)(a3 + 21); // 0x26511
    g9 = v5;
    if (v5 % 2 != 0 || *(char *)(a3 + 20) != 0) {
        // 0x265b1
        g6 = v2;
        g10 = v4;
        g8 = v3;
        return 0;
    }
    // 0x26528
    int16_t v6;
    int16_t v7;
    int16_t v8;
    int16_t v9;
    int16_t v10;
    int16_t v11;
    int16_t v12;
    int16_t v13;
    int32_t v14; // 0x26552
    int32_t v15; // 0x26684
    int32_t v16; // 0x26ba0
    int32_t v17; // 0x26533
    if (a2 == 0) {
        v16 = a3;
        goto lab_0x26b98;
    } else {
        unsigned char v18 = v5 % 2;
        g9 = v18;
        v17 = (int32_t)*(char *)(a2 + 16);
        g8 = v17;
        int16_t v19;
        int16_t v20;
        int16_t v21;
        int16_t v22;
        if (v18 == 0) {
            v15 = a3;
            v11 = v22;
            v13 = v21;
            v7 = v20;
            v9 = v19;
            goto lab_0x2667c;
        } else {
            v14 = a3;
            v10 = v22;
            v12 = v21;
            v6 = v20;
            v8 = v19;
            goto lab_0x26540;
        }
    }
  lab_0x26b98:;
    int32_t v23 = function_320f0(v16, 1); // 0x26ba3
    g4 = v23;
    int32_t v24; // 0x26bcc
    if ((char)v23 != 0) {
        int32_t v25 = g6; // 0x26bb0
        int32_t v26 = *(int32_t *)(v25 + 16); // 0x26bb0
        g4 = v26;
        int32_t v27 = *(int32_t *)v25; // 0x26bb3
        g9 = v27;
        int32_t v28 = v26 - *(int32_t *)(v25 + 32); // 0x26bb5
        g4 = v28;
        *(char *)(v28 + v27) = 11;
        int32_t * v29 = (int32_t *)(g6 + 16); // 0x26bbc
        int32_t v30 = *v29 + 1; // 0x26bbf
        g4 = v30;
        *v29 = v30;
        v24 = function_321d0(g6, g4);
        g4 = v24;
    } else {
        v24 = v23;
    }
    goto lab_0x265aa;
  lab_0x265aa:;
    int32_t result = (int32_t)(*(char *)(g6 + 20) == 0) | v24 & -256; // 0x265ae
    g4 = result;
    // 0x265b1
    g6 = v2;
    g10 = v4;
    g8 = v3;
    return result;
  lab_0x2667c:;
    int32_t v31 = function_320f0(v15, 1); // 0x26687
    g4 = v31;
    int16_t v32;
    int16_t v33;
    int16_t v34;
    int16_t v35;
    if ((char)v31 != 0) {
        int32_t v36 = g6; // 0x26694
        int32_t v37 = *(int32_t *)(v36 + 16); // 0x26694
        g4 = v37;
        int32_t v38 = g8; // 0x26697
        g7 = v38;
        int32_t v39 = *(int32_t *)v36; // 0x26699
        g9 = v39;
        int32_t v40 = v37 - *(int32_t *)(v36 + 32); // 0x2669b
        g4 = v40;
        *(char *)(v40 + v39) = (char)v38;
        int32_t * v41 = (int32_t *)(g6 + 16); // 0x266a1
        int32_t v42 = *v41 + 1; // 0x266a4
        g4 = v42;
        *v41 = v42;
        g4 = function_321d0(g6, g4);
        v34 = v11;
        v35 = v13;
        v32 = v7;
        v33 = v9;
    } else {
        v34 = v11;
        v35 = v13;
        v32 = v7;
        v33 = v9;
    }
    goto lab_0x2655a;
  lab_0x26540:
    // 0x26540
    g8 = v17 & (int32_t)&g862;
    g4 = function_32570(v14, "%hu");
    v34 = v10;
    v35 = v12;
    v32 = v6;
    v33 = v8;
    goto lab_0x2655a;
  lab_0x2655a:;
    int32_t v43 = function_25190(g10); // 0x2655d
    g4 = v43;
    g4 = function_32320(g6, v43);
    int32_t v44 = g10; // 0x2656e
    g4 = (int32_t)*(char *)(v44 + 16);
    int16_t v45;
    int16_t v46;
    int16_t v47;
    int16_t v48; // bp-32
    int16_t v49;
    int16_t v50;
    int16_t v51; // bp-40
    int32_t v52; // 0x26983
    int32_t v53; // 0x26c60
    int32_t v54; // 0x2687c
    int32_t v55; // 0x26c60
    switch (g872) {
        case 0: {
            int32_t result2 = *(int32_t *)(v44 + 24); // 0x26864
            g4 = result2;
            return result2;
        }
        case 1: {
            int32_t v56 = *(int32_t *)(v44 + 4); // 0x268a0
            g4 = v56;
            if (v56 == 0) {
                goto lab_0x268b0;
            } else {
                // 0x268a7
                if (*(char *)v56 != 0) {
                    // 0x26b80
                    g4 = function_32320(g6, v56);
                    v47 = v34;
                    v49 = v35;
                    v45 = v32;
                    v46 = v33;
                    goto lab_0x26660;
                } else {
                    goto lab_0x268b0;
                }
            }
        }
        case 2: {
            int32_t v57 = g6; // 0x26878
            v54 = *(int32_t *)(v44 + 12);
            g4 = v54;
            if (*(char *)(v57 + 21) % 2 == 0) {
                v52 = v57;
                goto lab_0x26978;
            } else {
                // 0x26885
                g4 = function_32570(v57, "%d");
                v47 = v34;
                v49 = v35;
                v45 = v32;
                v46 = v33;
                goto lab_0x26660;
            }
        }
        case 3: {
            int128_t v58 = __asm_movss(*(int32_t *)(v44 + 12)); // 0x26804
            if (*(char *)(g6 + 21) % 2 != 0) {
                int128_t v59 = __asm_unpcklps(v58, v58); // 0x269f0
                int32_t v60 = __asm_movsd(__asm_cvtps2pd(v59)); // 0x26a01
                g4 = function_32570(v60, (char *)&g870);
                v47 = v34;
                v49 = v35;
                v45 = v32;
                v46 = v33;
                goto lab_0x26660;
            } else {
                // 0x2680f
                v48 = __asm_movss_1646(v58);
                int32_t v61 = function_320f0(g6, 4); // 0x2681f
                g4 = v61;
                if ((char)v61 == 0) {
                    v47 = v34;
                    v49 = v35;
                    v45 = v32;
                    v46 = v33;
                    goto lab_0x26660;
                } else {
                    int32_t v62 = g6; // 0x2682c
                    int32_t v63 = *(int32_t *)(v62 + 16); // 0x26830
                    g4 = v63;
                    if (*(char *)(v62 + 52) % 2 != 0) {
                        // 0x26c20
                        g9 = v63;
                        int32_t v64 = v63 - *(int32_t *)(v62 + 32); // 0x26c22
                        g9 = v64;
                        int32_t v65 = *(int32_t *)v62 + v64; // 0x26c25
                        g9 = v65;
                        if (v65 != 0) {
                            int32_t v66 = &v51; // 0x26c31
                            g7 = v66;
                            v51 = v32;
                            g4 = v48;
                            g4 = function_2cb10(v65, v66, 4);
                            v53 = g6;
                            v55 = *(int32_t *)(v53 + 16);
                            g4 = v55;
                            v50 = v33;
                        } else {
                            v53 = v62;
                            v55 = v63;
                            v50 = v35;
                        }
                    } else {
                        int32_t v67 = v63 - *(int32_t *)(v62 + 32); // 0x26839
                        g4 = v67;
                        int32_t v68 = *(int32_t *)v62; // 0x2683c
                        g9 = v68;
                        int32_t v69 = v48; // 0x2683e
                        g7 = v69;
                        *(int32_t *)(v68 + v67) = v69;
                        int32_t v70 = g6; // 0x26844
                        int32_t v71 = *(int32_t *)(v70 + 16); // 0x26844
                        g4 = v71;
                        v53 = v70;
                        v55 = v71;
                        v50 = v35;
                    }
                    goto lab_0x26847;
                }
            }
        }
        case 4: {
            int32_t v72 = g6; // 0x267d0
            int32_t v73 = *(int32_t *)(v44 + 12); // 0x267d4
            g4 = v73;
            if (*(char *)(v72 + 21) % 2 == 0) {
                v52 = v72;
                v54 = v73;
                goto lab_0x26978;
            } else {
                // 0x267dd
                g4 = function_32570(v72, "%u");
                v47 = v34;
                v49 = v35;
                v45 = v32;
                v46 = v33;
                goto lab_0x26660;
            }
        }
        case 5: {
            int32_t v74 = *(int32_t *)(v44 + 8); // 0x266c0
            g4 = v74;
            int32_t v75;
            int32_t v76; // 0x266e7
            if (v74 == 0) {
                // 0x26a70
                g9 = 0;
                g4 = 0;
                v76 = 0;
                v75 = 0;
            } else {
                int32_t v77 = function_2cb70(v74); // 0x266ce
                int32_t v78 = v77 % 0x10000; // 0x266d6
                g4 = v78;
                g9 = v78;
                v76 = v78;
                v75 = v77;
            }
            int32_t v79 = g6; // 0x266dd
            int16_t v80;
            if (*(char *)(v79 + 21) % 2 != 0) {
                // 0x26a18
                g4 = function_32570(v79, "%hd");
                v80 = v34;
            } else {
                // 0x266e7
                v51 = v76;
                int32_t v81 = function_320f0(v79, 2); // 0x266f6
                g4 = v81;
                if ((char)v81 != 0) {
                    int32_t v82 = g6; // 0x266ff
                    int32_t v83 = *(int32_t *)(v82 + 16); // 0x26703
                    g4 = v83;
                    int16_t v84;
                    int32_t v85; // 0x26c12
                    int32_t v86; // 0x26c12
                    if (*(char *)(v82 + 52) % 2 != 0) {
                        // 0x26be0
                        g9 = v83;
                        int32_t v87 = v83 - *(int32_t *)(v82 + 32); // 0x26be2
                        g9 = v87;
                        int32_t v88 = *(int32_t *)v82 + v87; // 0x26be5
                        g9 = v88;
                        if (v88 != 0) {
                            // 0x26bed
                            v48 = v35;
                            int32_t v89 = &v48; // 0x26c06
                            g4 = v89;
                            g4 = function_2cb10(v88, v89, 2);
                            v85 = g6;
                            v86 = *(int32_t *)(v85 + 16);
                            g4 = v86;
                            v84 = v51;
                        } else {
                            v85 = v82;
                            v86 = v83;
                            v84 = v34;
                        }
                    } else {
                        int32_t v90 = v83 - *(int32_t *)(v82 + 32); // 0x2670c
                        g4 = v90;
                        int32_t v91 = *(int32_t *)v82; // 0x2670f
                        g9 = v91;
                        uint16_t v92 = v51; // 0x26711
                        g7 = v92;
                        *(int16_t *)(v91 + v90) = v92;
                        int32_t v93 = g6; // 0x26719
                        int32_t v94 = *(int32_t *)(v93 + 16); // 0x26719
                        g4 = v94;
                        v85 = v93;
                        v86 = v94;
                        v84 = v34;
                    }
                    int32_t v95 = v86 + 2; // 0x2671c
                    g4 = v95;
                    *(int32_t *)(v85 + 16) = v95;
                    g4 = function_321d0(g6, g4);
                    v80 = v84;
                } else {
                    v80 = v34;
                }
            }
            // 0x2672e
            g4 = v75;
            g8 = 0;
            if (v75 >= 1) {
                int32_t v96 = g10; // 0x2673b
                g10 = v75;
                int32_t v97 = &v51; // 0x26949
                int32_t v98 = 0; // 0x267a036
                int16_t v99 = v35;
                int16_t v100;
                while (true) {
                    int32_t v101 = v98; // 0x267a8
                    int32_t v102; // 0x26799
                    int32_t v103; // 0x267a0
                    while (true) {
                        // 0x26796
                        g9 = v96;
                        v102 = g6;
                        int32_t v104 = *(int32_t *)(v96 + 8); // 0x2679d
                        g4 = v104;
                        v103 = *(int32_t *)(v104 + 4 * v101);
                        g4 = v103;
                        if (*(char *)(v102 + 21) % 2 == 0) {
                            // break -> 0x26748
                            break;
                        }
                        // 0x267a5
                        g9 = v103;
                        g8 = v101 + 1;
                        g4 = function_32570(v102, "%hd");
                        int32_t v105 = g8; // 0x267bf
                        if (v105 == g10) {
                            v100 = v99;
                            // break (via goto) -> 0x267c3
                            goto lab_0x267c3;
                        }
                        v101 = v105;
                    }
                    // 0x26748
                    v48 = v103;
                    int32_t v106 = function_320f0(v102, 2); // 0x26757
                    g4 = v106;
                    int16_t v107;
                    if ((char)v106 != 0) {
                        int32_t v108 = g6; // 0x26760
                        int32_t v109 = *(int32_t *)(v108 + 16); // 0x26764
                        g4 = v109;
                        int32_t v110; // 0x2696a
                        int16_t v111; // 0x2695e
                        int32_t v112; // 0x2696a
                        if (*(char *)(v108 + 52) % 2 != 0) {
                            // 0x26938
                            g9 = v109;
                            int32_t v113 = v109 - *(int32_t *)(v108 + 32); // 0x2693a
                            g9 = v113;
                            int32_t v114 = *(int32_t *)v108 + v113; // 0x2693d
                            g9 = v114;
                            if (v114 != 0) {
                                // 0x26945
                                g7 = v97;
                                v51 = v80;
                                v111 = v48;
                                g4 = v111;
                                g4 = function_2cb10(v114, v97, 2);
                                v110 = g6;
                                v112 = *(int32_t *)(v110 + 16);
                                g4 = v112;
                            } else {
                                v110 = v108;
                                v112 = v109;
                                v111 = v99;
                            }
                        } else {
                            int32_t v115 = v109 - *(int32_t *)(v108 + 32); // 0x2676d
                            g4 = v115;
                            int32_t v116 = *(int32_t *)v108; // 0x26770
                            g9 = v116;
                            uint16_t v117 = v48; // 0x26772
                            g7 = v117;
                            *(int16_t *)(v116 + v115) = v117;
                            int32_t v118 = g6; // 0x2677a
                            int32_t v119 = *(int32_t *)(v118 + 16); // 0x2677a
                            g4 = v119;
                            v110 = v118;
                            v112 = v119;
                            v111 = v99;
                        }
                        int32_t v120 = v112 + 2; // 0x2677d
                        g4 = v120;
                        *(int32_t *)(v110 + 16) = v120;
                        g4 = function_321d0(g6, g4);
                        v107 = v111;
                    } else {
                        v107 = v99;
                    }
                    int32_t v121 = g8 + 1; // 0x2678f
                    g8 = v121;
                    if (v121 == g10) {
                        v100 = v107;
                        // break -> 0x267c3
                        break;
                    }
                    v98 = v121;
                    v99 = v107;
                }
              lab_0x267c3:
                // 0x267c3
                g10 = v96;
                v47 = v80;
                v49 = v100;
                v45 = v32;
                v46 = v33;
            } else {
                v47 = v80;
                v49 = v35;
                v45 = v32;
                v46 = v33;
            }
            goto lab_0x26660;
        }
        case 6: {
            int32_t v122 = g6; // 0x265c0
            int32_t v123 = (int32_t)*(char *)(v44 + 12); // 0x265c4
            g8 = v123;
            if (*(char *)(v122 + 21) % 2 == 0) {
                int32_t v124 = function_320f0(v122, 1); // 0x26b4b
                g4 = v124;
                if ((char)v124 != 0) {
                    int32_t v125 = g6; // 0x26b58
                    int32_t v126 = *(int32_t *)(v125 + 16); // 0x26b58
                    g4 = v126;
                    int32_t v127 = g8; // 0x26b5b
                    g7 = v127;
                    int32_t v128 = *(int32_t *)v125; // 0x26b5d
                    g9 = v128;
                    int32_t v129 = v126 - *(int32_t *)(v125 + 32); // 0x26b5f
                    g4 = v129;
                    *(char *)(v129 + v128) = (char)v127;
                    int32_t * v130 = (int32_t *)(g6 + 16); // 0x26b65
                    int32_t v131 = *v130 + 1; // 0x26b68
                    g4 = v131;
                    *v130 = v131;
                    g4 = function_321d0(g6, g4);
                }
            } else {
                // 0x265ce
                g8 = v123 & (int32_t)&g862;
                g4 = function_32570(v122, "%hu");
            }
            int32_t v132 = g6; // 0x265e8
            int32_t v133 = (int32_t)*(char *)(g10 + 13); // 0x265ec
            g8 = v133;
            if (*(char *)(v132 + 21) % 2 == 0) {
                int32_t v134 = function_320f0(v132, 1); // 0x26b0b
                g4 = v134;
                if ((char)v134 != 0) {
                    int32_t v135 = g6; // 0x26b18
                    int32_t v136 = *(int32_t *)(v135 + 16); // 0x26b18
                    g4 = v136;
                    int32_t v137 = g8; // 0x26b1b
                    g7 = v137;
                    int32_t v138 = *(int32_t *)v135; // 0x26b1d
                    g9 = v138;
                    int32_t v139 = v136 - *(int32_t *)(v135 + 32); // 0x26b1f
                    g4 = v139;
                    *(char *)(v139 + v138) = (char)v137;
                    int32_t * v140 = (int32_t *)(g6 + 16); // 0x26b25
                    int32_t v141 = *v140 + 1; // 0x26b28
                    g4 = v141;
                    *v140 = v141;
                    g4 = function_321d0(g6, g4);
                }
            } else {
                // 0x265f6
                g8 = v133 & (int32_t)&g862;
                g4 = function_32570(v132, "%hu");
            }
            int32_t v142 = g6; // 0x26610
            int32_t v143 = (int32_t)*(char *)(g10 + 14); // 0x26614
            g8 = v143;
            if (*(char *)(v142 + 21) % 2 == 0) {
                int32_t v144 = function_320f0(v142, 1); // 0x26acb
                g4 = v144;
                if ((char)v144 != 0) {
                    int32_t v145 = g6; // 0x26ad8
                    int32_t v146 = *(int32_t *)(v145 + 16); // 0x26ad8
                    g4 = v146;
                    int32_t v147 = g8; // 0x26adb
                    g7 = v147;
                    int32_t v148 = *(int32_t *)v145; // 0x26add
                    g9 = v148;
                    int32_t v149 = v146 - *(int32_t *)(v145 + 32); // 0x26adf
                    g4 = v149;
                    *(char *)(v149 + v148) = (char)v147;
                    int32_t * v150 = (int32_t *)(g6 + 16); // 0x26ae5
                    int32_t v151 = *v150 + 1; // 0x26ae8
                    g4 = v151;
                    *v150 = v151;
                    g4 = function_321d0(g6, g4);
                }
            } else {
                // 0x2661e
                g8 = v143 & (int32_t)&g862;
                g4 = function_32570(v142, "%hu");
            }
            int32_t v152 = g6; // 0x26638
            int32_t v153 = (int32_t)*(char *)(g10 + 15); // 0x2663c
            g8 = v153;
            if (*(char *)(v152 + 21) % 2 == 0) {
                int32_t v154 = function_320f0(v152, 1); // 0x26a8b
                g4 = v154;
                if ((char)v154 != 0) {
                    int32_t v155 = g6; // 0x26a98
                    int32_t v156 = *(int32_t *)(v155 + 16); // 0x26a98
                    g4 = v156;
                    int32_t v157 = g8; // 0x26a9b
                    g7 = v157;
                    int32_t v158 = *(int32_t *)v155; // 0x26a9d
                    g9 = v158;
                    int32_t v159 = v156 - *(int32_t *)(v155 + 32); // 0x26a9f
                    g4 = v159;
                    *(char *)(v159 + v158) = (char)v157;
                    int32_t * v160 = (int32_t *)(g6 + 16); // 0x26aa5
                    int32_t v161 = *v160 + 1; // 0x26aa8
                    g4 = v161;
                    *v160 = v161;
                    g4 = function_321d0(g6, g4);
                    v47 = v34;
                    v49 = v35;
                    v45 = v32;
                    v46 = v33;
                } else {
                    v47 = v34;
                    v49 = v35;
                    v45 = v32;
                    v46 = v33;
                }
            } else {
                // 0x26646
                g8 = v153 & (int32_t)&g862;
                g4 = function_32570(v152, "%hu");
                v47 = v34;
                v49 = v35;
                v45 = v32;
                v46 = v33;
            }
            goto lab_0x26660;
        }
        case 7: {
            int32_t v162 = *(int32_t *)(v44 + 4); // 0x268c8
            g4 = v162;
            int32_t v163 = g6; // 0x268cb
            int32_t v164 = *(int32_t *)(v162 + 4); // 0x268cf
            g9 = v164;
            int32_t v165 = *(int32_t *)v162; // 0x268d2
            g4 = v165;
            if (*(char *)(v163 + 21) % 2 != 0) {
                // 0x26a38
                g4 = function_32570(v163, "%lld");
                v47 = v34;
                v49 = v35;
                v45 = v32;
                v46 = v33;
            } else {
                // 0x268da
                v51 = v165;
                int32_t v166 = function_320f0(v163, 8); // 0x268eb
                g4 = v166;
                if ((char)v166 != 0) {
                    int32_t v167 = g6; // 0x268f8
                    int32_t v168 = *(int32_t *)(v167 + 16); // 0x268fc
                    g4 = v168;
                    int16_t v169;
                    int16_t v170;
                    int16_t v171;
                    int32_t v172; // 0x26ccc
                    int32_t v173; // 0x26ccc
                    if (*(char *)(v167 + 52) % 2 != 0) {
                        // 0x26c70
                        g9 = v168;
                        int32_t v174 = v168 - *(int32_t *)(v167 + 32); // 0x26c72
                        g9 = v174;
                        int32_t v175 = *(int32_t *)v167 + v174; // 0x26c75
                        g9 = v175;
                        if (v175 != 0) {
                            int32_t v176 = &v48; // 0x26cc0
                            g4 = v176;
                            g4 = function_2cb10(v175, v176, 8);
                            v172 = g6;
                            v173 = *(int32_t *)(v172 + 16);
                            g4 = v173;
                            v169 = (int16_t)v164 % 256;
                        } else {
                            v172 = v167;
                            v173 = v168;
                            v171 = v34;
                            v169 = v32;
                            v170 = v33;
                        }
                    } else {
                        int32_t v177 = v168 - *(int32_t *)(v167 + 32); // 0x26905
                        g4 = v177;
                        int32_t v178 = *(int32_t *)v167; // 0x26908
                        g8 = v178;
                        int32_t v179 = v51; // 0x2690a
                        g9 = v179;
                        g7 = v164;
                        *(int32_t *)(v178 + v177) = v179;
                        *(int32_t *)(g8 + 4 + g4) = g7;
                        int32_t v180 = g6; // 0x26917
                        int32_t v181 = *(int32_t *)(v180 + 16); // 0x26917
                        g4 = v181;
                        v172 = v180;
                        v173 = v181;
                        v171 = v34;
                        v169 = v32;
                        v170 = v33;
                    }
                    int32_t v182 = v173 + 8; // 0x2691a
                    g4 = v182;
                    *(int32_t *)(v172 + 16) = v182;
                    g4 = function_321d0(g6, g4);
                    v47 = v171;
                    v49 = v35;
                    v45 = v169;
                    v46 = v170;
                } else {
                    v47 = v34;
                    v49 = v35;
                    v45 = v32;
                    v46 = v33;
                }
            }
            goto lab_0x26660;
        }
        default: {
            v47 = v34;
            v49 = v35;
            v45 = v32;
            v46 = v33;
            goto lab_0x26660;
        }
    }
  lab_0x26660:;
    int32_t v183 = *(int32_t *)(g10 + 20); // 0x26660
    g10 = v183;
    int32_t v184 = g6; // 0x26588
    unsigned char v185 = *(char *)(v184 + 21); // 0x26588
    if (v183 == 0) {
        // 0x26588
        if (v185 % 2 == 0) {
            v16 = v184;
            goto lab_0x26b98;
        } else {
            int32_t v186 = function_32570(v184, "%hu"); // 0x265a5
            g4 = v186;
            v24 = v186;
            goto lab_0x265aa;
        }
    } else {
        // 0x2666b
        g9 = v185;
        int32_t v187 = (int32_t)*(char *)(v183 + 16); // 0x2666f
        g8 = v187;
        unsigned char v188 = v185 % 2;
        g9 = v188;
        if (v188 != 0) {
            v14 = v184;
            v17 = v187;
            v10 = v47;
            v12 = v49;
            v6 = v45;
            v8 = v46;
            goto lab_0x26540;
        } else {
            v15 = v184;
            v11 = v47;
            v13 = v49;
            v7 = v45;
            v9 = v46;
            goto lab_0x2667c;
        }
    }
  lab_0x268b0:
    // 0x268b0
    g4 = function_32320(g6, (int32_t)&g129);
    v47 = v34;
    v49 = v35;
    v45 = v32;
    v46 = v33;
    goto lab_0x26660;
  lab_0x26978:
    // 0x26978
    v48 = v54;
    int32_t v189 = function_320f0(v52, 4); // 0x26986
    g4 = v189;
    if ((char)v189 == 0) {
        v47 = v34;
        v49 = v35;
        v45 = v32;
        v46 = v33;
        goto lab_0x26660;
    } else {
        int32_t v190 = g6; // 0x26993
        int32_t v191 = *(int32_t *)(v190 + 16); // 0x26997
        g4 = v191;
        if (*(char *)(v190 + 52) % 2 == 0) {
            int32_t v192 = v191 - *(int32_t *)(v190 + 32); // 0x26a58
            g4 = v192;
            int32_t v193 = *(int32_t *)v190; // 0x26a5b
            g9 = v193;
            int32_t v194 = v48; // 0x26a5d
            g7 = v194;
            *(int32_t *)(v193 + v192) = v194;
            int32_t v195 = g6; // 0x26a63
            int32_t v196 = *(int32_t *)(v195 + 16); // 0x26a63
            g4 = v196;
            v53 = v195;
            v55 = v196;
            v50 = v35;
        } else {
            // 0x269a0
            g9 = v191;
            int32_t v197 = v191 - *(int32_t *)(v190 + 32); // 0x269a2
            g9 = v197;
            int32_t v198 = *(int32_t *)v190 + v197; // 0x269a5
            g9 = v198;
            if (v198 != 0) {
                // 0x269ad
                v51 = v32;
                int32_t v199 = &v51; // 0x269d4
                g4 = v199;
                g4 = function_2cb10(v198, v199, 4);
                int32_t v200 = g6; // 0x269e0
                int32_t v201 = *(int32_t *)(v200 + 16); // 0x269e0
                g4 = v201;
                v53 = v200;
                v55 = v201;
                v50 = v33;
            } else {
                v53 = v190;
                v55 = v191;
                v50 = v35;
            }
        }
        goto lab_0x26847;
    }
  lab_0x26847:;
    int32_t v202 = v55 + 4; // 0x26847
    g4 = v202;
    *(int32_t *)(v53 + 16) = v202;
    g4 = function_321d0(g6, g4);
    v47 = v34;
    v49 = v50;
    v45 = v32;
    v46 = v33;
    goto lab_0x26660;
}

// Address range: 0x26ce0 - 0x26ce7
int32_t function_26ce0(void) {
    // 0x26ce0
    g4 = 0;
    return 0;
}

// Address range: 0x26cf0 - 0x26cf6
int32_t function_26cf0(void) {
    // 0x26cf0
    int32_t v1; // bp-4
    g5 = &v1;
    return g4;
}

// Address range: 0x26cfa - 0x26d0c
int32_t function_26cfa(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x108b084d); // 0x26cfa
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x26d1e - 0x26d31
int32_t function_26d1e(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x8458910); // 0x26d1e
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    *(int32_t *)(v2 + 12) = g6;
    int32_t result = *(int32_t *)(g9 + 4); // 0x26d27
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x26d31 - 0x26d33
int32_t function_26d31(void) {
    int32_t result = function_26d40(); // 0x26d31
    g4 = result;
    return result;
}

// Address range: 0x26d40 - 0x26d46
int32_t function_26d40(void) {
    // 0x26d40
    int32_t v1; // bp-4
    g5 = &v1;
    return g4;
}

// Address range: 0x26d4a - 0x26d5c
int32_t function_26d4a(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x108b084d); // 0x26d4a
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x26d60 - 0x26e18
int32_t function_26d60(int32_t a1) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x26d66
    g6 = a1;
    int32_t v3 = g10; // 0x26d6c
    int32_t v4 = g8; // 0x26d6f
    int32_t v5 = function_25190(a1); // 0x26d75
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_26cf0(); // 0x26d83
    g4 = v6;
    g10 = v6;
    g4 = function_26330(v6);
    unsigned char v7 = *(char *)(g6 + 16); // 0x26d96
    g4 = v7;
    *(char *)(g10 + 16) = v7;
    int32_t v8 = g6; // 0x26d9d
    char * v9 = (char *)(v8 + 16); // 0x26d9d
    if (*v9 < 8) {
        int32_t result = (int32_t)*v9; // 0x26da3
        g4 = result;
        return result;
    }
    // 0x26de0
    function_26fb0(v8, g10);
    int32_t result2 = g10; // 0x26dec
    g4 = result2;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result2;
}

// Address range: 0x26e2e - 0x26e56
int32_t function_26e2e(void) {
    // 0x26e2e
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x4853c); // 0x26e2e
    *v2 = *v2 - 1;
    int32_t v3 = g4; // 0x26e34
    *(char *)v3 = (char)v3 + *(char *)&g4;
    int32_t v4 = function_1bc60(); // 0x26e39
    g4 = v4;
    *(int32_t *)(g10 + 8) = v4;
    int32_t v5 = *(int32_t *)(g6 + 8); // 0x26e45
    g9 = v5;
    int32_t result = function_2cb10(g4, v5, g8); // 0x26e4f
    g4 = result;
    return result;
}

// Address range: 0x26e60 - 0x26e81
int32_t function_26e60(void) {
    unsigned char v1 = *(char *)(g6 + 12); // 0x26e60
    g4 = v1;
    *(char *)(g10 + 12) = v1;
    unsigned char v2 = *(char *)(g6 + 13); // 0x26e67
    g4 = v2;
    *(char *)(g10 + 13) = v2;
    unsigned char v3 = *(char *)(g6 + 14); // 0x26e6e
    g4 = v3;
    *(char *)(g10 + 14) = v3;
    unsigned char v4 = *(char *)(g6 + 15); // 0x26e75
    g4 = v4;
    *(char *)(g10 + 15) = v4;
    return g4;
}

// Address range: 0x26e88 - 0x26eb3
int32_t function_26e88(void) {
    int32_t v1 = function_1bc60(); // 0x26e8f
    g4 = v1;
    *(int32_t *)(g10 + 4) = v1;
    int32_t v2 = *(int32_t *)(g6 + 4); // 0x26e9f
    g9 = v2;
    int32_t result = function_2cb10(g4, v2, 8); // 0x26ea9
    g4 = result;
    return result;
}

// Address range: 0x26eb3 - 0x26f6e
int32_t function_26eb3(int32_t a1, int32_t result) {
    // 0x26eb3
    g6 = g4;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g8; // 0x26ed3
    int32_t v3 = g10; // 0x26ed4
    int32_t v4 = g6; // 0x26ed5
    g4 = result;
    int32_t v5 = *(int32_t *)(result + 24); // 0x26edc
    g8 = v5;
    if (v5 == 0) {
        // 0x26f34
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result;
    }
    int32_t * v6 = (int32_t *)(a1 + 24); // 0x26eeb
    int32_t v7; // 0x26f40
    while (true) {
      lab_0x26ee8:
        // 0x26ee8
        g9 = a1;
        int32_t v8 = *v6; // 0x26eeb
        g6 = v8;
        if (v8 != 0) {
            while (true) {
                int32_t v9 = function_25190(v8); // 0x26f02
                g4 = v9;
                g10 = v9;
                int32_t v10 = function_25190(g8); // 0x26f0c
                g4 = v10;
                int32_t v11 = function_2cbd0(v10, g10); // 0x26f18
                g4 = v11;
                if (v11 == 0) {
                    // break -> 0x26f21
                    break;
                }
                int32_t v12 = *(int32_t *)(g6 + 20); // 0x26ef8
                g6 = v12;
                if (v12 == 0) {
                    // 0x26f40
                    v7 = g8;
                    goto lab_0x26f40_2;
                }
                v8 = v12;
            }
            goto lab_0x26f2d;
        } else {
            v7 = v5;
            goto lab_0x26f40_2;
        }
    }
  lab_0x26f34:
    // 0x26f34
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return g4;
  lab_0x26f40_2:;
    int32_t v13 = function_26d60(v7); // 0x26f43
    g4 = v13;
    g7 = a1;
    int32_t v14 = *v6; // 0x26f4b
    g9 = v14;
    if (v14 != 0) {
        int32_t * v15 = (int32_t *)(v14 + 20); // 0x26f5a251
        int32_t v16 = *v15; // 0x26f5a252
        g7 = v16;
        int32_t * v17; // 0x26f5a
        if (v16 != 0) {
            g9 = v16;
            v17 = (int32_t *)(v16 + 20);
            int32_t v18 = *v17; // 0x26f5a
            g7 = v18;
            while (v18 != 0) {
                // 0x26f58
                v16 = v18;
                g9 = v16;
                v17 = (int32_t *)(v16 + 20);
                v18 = *v17;
                g7 = v18;
            }
        } else {
            v17 = v15;
        }
        // 0x26f61
        *v17 = v13;
    } else {
        // 0x26f66
        g7 = a1;
        *v6 = v13;
    }
    goto lab_0x26f2d;
  lab_0x26f2d:;
    int32_t v19 = *(int32_t *)(g8 + 20); // 0x26f2d
    g8 = v19;
    if (v19 == 0) {
        // break -> 0x26f34
        goto lab_0x26f34;
    }
    v5 = v19;
    goto lab_0x26ee8;
}

// Address range: 0x26f70 - 0x26fab
int32_t function_26f70(int32_t result, int32_t a2) {
    int32_t v1 = g8; // 0x26f73
    int32_t v2 = g10; // 0x26f74
    int32_t v3 = g6; // 0x26f75
    g8 = a2;
    int32_t v4 = *(int32_t *)(a2 + 12); // 0x26f7c
    g10 = v4;
    if (v4 < 1) {
        // 0x26fa3
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x26f83
    g6 = 0;
    g10 = v4;
    int32_t v5 = 1; // 0x26f8d
    while (v5 != v4) {
        // 0x26f88
        v5++;
    }
    // 0x26fa3
    g6 = v5;
    g4 = result;
    // 0x26fa3
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x26fb0 - 0x27008
int32_t function_26fb0(int32_t result, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g8; // 0x26fb3
    int32_t v3 = g10; // 0x26fb4
    g10 = 0;
    int32_t v4 = g6; // 0x26fb7
    g4 = result;
    g8 = a2;
    int32_t v5 = *(int32_t *)(result + 24); // 0x26fc1
    g6 = v5;
    if (v5 == 0) {
        // 0x27000
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result;
    }
    while (true) {
        int32_t v6 = function_26d60(v5); // 0x26fe6
        g4 = v6;
        int32_t v7 = g10; // 0x26feb
        int32_t v8; // 0x26fda
        if (v7 != 0) {
            // 0x26fd0
            *(int32_t *)(v7 + 20) = v6;
            *(int32_t *)(g4 + 20) = 0;
            v8 = *(int32_t *)(g6 + 20);
            g6 = v8;
            if (v8 == 0) {
                // break -> 0x27000
                break;
            }
        } else {
            // 0x26fef
            *(int32_t *)(g8 + 24) = v6;
            *(int32_t *)(g4 + 20) = 0;
            int32_t v9 = *(int32_t *)(g6 + 20); // 0x26ff9
            g6 = v9;
            if (v9 == 0) {
                // break -> 0x27000
                break;
            }
            v8 = v9;
        }
        // 0x26fe1
        g10 = g4;
        v5 = v8;
    }
    // 0x27000
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return g4;
}

// Address range: 0x27010 - 0x2721b
int32_t function_27010(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x27019
    g873 = a2;
    g6 = a2;
    int32_t v2 = g10; // 0x2701f
    g10 = a1;
    int32_t v3 = g8; // 0x27025
    uint32_t v4 = *(int32_t *)a2; // 0x27028
    g9 = v4;
    int32_t * v5 = (int32_t *)a1; // 0x2702a
    int32_t v6 = v4 % 0x1000000; // 0x2702c
    g9 = v6;
    int32_t v7 = *v5 & -0x1000000 | v6; // 0x27037
    g4 = v7;
    *v5 = v7;
    unsigned char v8 = *(char *)(g6 + 3); // 0x2703b
    g4 = v8;
    *(char *)(g10 + 3) = v8;
    uint16_t v9 = *(int16_t *)(g6 + 18); // 0x27042
    g4 = v9;
    *(int16_t *)(g10 + 18) = v9;
    int32_t v10 = g6; // 0x2704a
    int32_t v11 = *(int32_t *)(v10 + 24); // 0x2704a
    g9 = v11;
    int32_t v12; // 0x271c3
    int32_t v13; // 0x271e3
    if (v11 == 0) {
        unsigned char v14 = *(char *)(v10 + 16); // 0x270c8
        g4 = v14;
        *(char *)(g10 + 16) = v14;
        int32_t v15 = g6; // 0x270cf
        g4 = (int32_t)*(char *)(v15 + 16);
        int32_t v16; // bp-284
        switch (g873) {
            case 1: {
                int32_t v17 = *(int32_t *)(v15 + 4); // 0x270e0
                g4 = v17;
                if (v17 != 0) {
                    int32_t v18 = function_2cb40(v17); // 0x270ea
                    g4 = v18;
                    g8 = v18 + 1;
                    int32_t v19 = function_1bc60(); // 0x270f5
                    g4 = v19;
                    *(int32_t *)(g10 + 4) = v19;
                    int32_t v20 = *(int32_t *)(g6 + 4); // 0x27101
                    g9 = v20;
                    g4 = function_2d970((int32_t *)g4, v20, g8);
                }
                goto lab_0x27110;
            }
            case 2: {
                int32_t v21 = *(int32_t *)(v15 + 12); // 0x271c0
                g4 = v21;
                v12 = &v16;
                g8 = v12;
                *(int32_t *)(g10 + 12) = v21;
                v13 = function_2da40(v12, (int32_t)"GNU", "%d");
                goto lab_0x27184;
            }
            case 3: {
                int128_t v22 = __asm_movss(*(int32_t *)(v15 + 12)); // 0x27150
                int32_t v23 = &v16; // 0x27155
                g8 = v23;
                *(int32_t *)(g10 + 12) = __asm_movss_1646(v22);
                int128_t v24 = __asm_cvtps2pd(__asm_unpcklps(v22, v22)); // 0x27163
                int32_t v25 = function_2da40(v23, (int32_t)"GNU", (char *)__asm_movsd(v24)); // 0x2717f
                v12 = v23;
                v13 = v25;
                goto lab_0x27184;
            }
            case 4: {
                int32_t v26 = *(int32_t *)(v15 + 12); // 0x27140
                g4 = v26;
                *(int32_t *)(g10 + 12) = v26;
                goto lab_0x27110;
            }
            case 6: {
                unsigned char v27 = *(char *)(v15 + 12); // 0x27120
                g4 = v27;
                *(char *)(g10 + 12) = v27;
                unsigned char v28 = *(char *)(g6 + 13); // 0x27127
                g4 = v28;
                *(char *)(g10 + 13) = v28;
                unsigned char v29 = *(char *)(g6 + 14); // 0x2712e
                g4 = v29;
                *(char *)(g10 + 14) = v29;
                unsigned char v30 = *(char *)(g6 + 15); // 0x27135
                g4 = v30;
                *(char *)(g10 + 15) = v30;
                goto lab_0x27110;
            }
            case 7: {
                int32_t v31 = function_1bc60(); // 0x271f7
                g4 = v31;
                *(int32_t *)(g10 + 4) = v31;
                int32_t v32 = *(int32_t *)(g6 + 4); // 0x27207
                g9 = v32;
                g4 = function_2cb10(g4, v32, 8);
                goto lab_0x27110;
            }
            default: {
                goto lab_0x27110;
            }
        }
    } else {
        goto lab_0x27051;
    }
  lab_0x27051:;
    int32_t v33 = function_26cf0(); // 0x27058
    g4 = v33;
    g8 = v33;
    g4 = function_26330(v33);
    *(int32_t *)(g10 + 24) = g8;
    int32_t v34 = *(int32_t *)(g6 + 24); // 0x27072
    g4 = v34;
    g4 = function_27010(g8, v34);
    goto lab_0x27081;
  lab_0x27110:;
    int32_t v41 = g6; // 0x27110
    int32_t v42 = *(int32_t *)(v41 + 24); // 0x27110
    g4 = v42;
    if (v42 == 0) {
        g6 = v41;
        goto lab_0x27081;
    } else {
        goto lab_0x27051;
    }
  lab_0x27081:;
    int32_t v35 = *(int32_t *)(g6 + 20); // 0x27081
    g4 = v35;
    int32_t result; // 0x270b3
    if (v35 != 0) {
        int32_t v36 = function_26cf0(); // 0x2708f
        g4 = v36;
        g8 = v36;
        g4 = function_26330(v36);
        *(int32_t *)(g10 + 20) = g8;
        int32_t v37 = *(int32_t *)(g6 + 20); // 0x270a9
        g4 = v37;
        result = function_27010(g8, v37);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x270b8
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
  lab_0x27184:
    // 0x27184
    g4 = v13;
    int32_t v38 = function_2cb40(v12); // 0x27187
    g4 = v38;
    int32_t v39 = v38 + 1; // 0x2718c
    g9 = v39;
    int32_t v40 = function_1bc60(); // 0x27198
    g4 = v40;
    *(int32_t *)(g10 + 4) = v40;
    g9 = v39;
    g4 = function_2d970((int32_t *)g4, v12, v39);
    goto lab_0x27110;
}

// Address range: 0x2721b - 0x2729a
int32_t function_2721b(int32_t a1, int32_t a2) {
    // 0x2721b
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x27228
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g10; // 0x27243
    int32_t v3 = g6; // 0x27244
    g10 = a1;
    int32_t v4 = function_26cf0(); // 0x27252
    g6 = v4;
    g4 = a2;
    g4 = function_26330(v4);
    *(char *)(g6 + 17) = (char)(*(char *)(g10 + 17) != 0);
    int32_t * v5 = (int32_t *)(g10 + 24); // 0x27270
    int32_t v6 = *v5; // 0x27270
    g9 = v6;
    if (v6 != 0) {
        int32_t * v7 = (int32_t *)(v6 + 20); // 0x27282239
        int32_t v8 = *v7; // 0x27282240
        g4 = v8;
        int32_t * v9; // 0x27282
        if (v8 != 0) {
            g9 = v8;
            v9 = (int32_t *)(v8 + 20);
            int32_t v10 = *v9; // 0x27282
            g4 = v10;
            while (v10 != 0) {
                // 0x27280
                v8 = v10;
                g9 = v8;
                v9 = (int32_t *)(v8 + 20);
                v10 = *v9;
                g4 = v10;
            }
        } else {
            v9 = v7;
        }
        // 0x27289
        *v9 = g6;
    } else {
        // 0x2728e
        *v5 = g6;
    }
    int32_t result = g6; // 0x27294
    g4 = result;
    g6 = v3;
    g10 = v2;
    return result;
}

// Address range: 0x272d0 - 0x272d1
int32_t function_272d0(void) {
    // 0x272d0
    return g4;
}

// Address range: 0x272f0 - 0x27332
int32_t function_272f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g6 + 20); // 0x272f0
    g6 = v1;
    int32_t v2 = g4; // 0x272f3
    int32_t v3 = v2 + 1; // 0x272f3
    g9 = v3;
    int32_t v4 = g10; // 0x272f6
    int32_t v5 = v2 - v4; // 0x272f6
    g10 = v5 < 0 == ((v5 ^ v2) & (v4 ^ v2)) < 0 ? v3 : v4;
    if (v1 != 0) {
        // bb
        g4 = function_272d0();
    }
    // 0x272ff
    int32_t v6; // ebp
    int32_t v7 = v6 - 36; // 0x272ff
    g6 = v7;
    int32_t result = function_2da40(v7, 12, "%d"); // 0x27319
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x27340 - 0x27391
int32_t function_27340(int32_t a1, int32_t a2, uint32_t a3) {
    // 0x27340
    g6 = a1;
    g9 = a3 % 256;
    g10 = a2;
    if (a1 == 0) {
        // bb
        g4 = function_274f0();
    }
    if (a2 == 0) {
        int32_t v1 = function_27490((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x27366
        g4 = v1;
    }
    // 0x2736c
    if (*(char *)a2 == 0) {
        int32_t v2 = function_27490((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2736f
        g4 = v2;
    }
    // 0x27375
    int32_t v3; // bp-284
    int32_t v4 = &v3; // 0x27375
    g6 = v4;
    g4 = 0;
    g7 = 64;
    g8 = v4;
    __asm_rep_stosd_memset((char *)&v3, 0, 64);
    g8 = (g3 ? -256 : 256) + v4;
    g7 = 0;
    return 0;
}

// Address range: 0x273a3 - 0x273a6
int32_t function_273a3(void) {
    // 0x273a3
    return g4;
}

// Address range: 0x273d2 - 0x2747f
int32_t function_273d2(void) {
    int32_t v1 = g5; // 0x273d2
    int32_t v2 = (int32_t)*(char *)(v1 - 281); // 0x273d2
    g7 = v2;
    g9 = g4;
    *(int32_t *)(v1 - 292) = v2;
    int32_t v3 = g5; // 0x273e8
    g7 = *(int32_t *)(v3 - 288);
    int32_t v4 = g4; // 0x273f5
    int32_t v5; // 0x273fe
    int32_t v6; // 0x273f8
    if (v4 == -1) {
        // bb
        v6 = function_274f0();
        g4 = v6;
        v5 = g5;
    } else {
        v6 = v4;
        v5 = v3;
    }
    int32_t v7 = *(int32_t *)(v5 + 8); // 0x273fe
    g7 = v7;
    int32_t v8 = *(int32_t *)(v7 + 24); // 0x27401
    g9 = v8;
    int32_t v9; // 0x2740c
    int32_t v10; // 0x27406
    if (v8 == 0) {
        // bb240
        v10 = function_274f4();
        g4 = v10;
        v9 = g9;
    } else {
        v10 = v6;
        v9 = v8;
    }
    int32_t v11 = *(int32_t *)v9 % 0x1000000; // 0x2740e
    g7 = v11;
    if (v11 == v10) {
        int32_t result = function_27503(); // 0x27418
        g4 = result;
        return result;
    }
    int32_t v12 = *(int32_t *)(v9 + 20); // 0x2742e248
    g6 = v12;
    int32_t v13;
    if (v12 != 0) {
        while (true) {
            int32_t v14 = *(int32_t *)v12 % 0x1000000; // 0x27422
            g9 = v14;
            if (v10 == v14) {
                // break -> 0x27460
                break;
            }
            // 0x2742c
            g9 = v12;
            int32_t v15 = *(int32_t *)(v12 + 20); // 0x2742e
            g6 = v15;
            if (v15 == 0) {
                v13 = v12;
                goto lab_0x27435;
            }
            v12 = v15;
        }
    } else {
        v13 = v9;
      lab_0x27435:
        // 0x27435
        *(int32_t *)(g5 - 296) = v13;
        int32_t v16 = *(int32_t *)(g5 + 8); // 0x2743b
        g9 = v16;
        int32_t v17 = *(int32_t *)(v16 + 28); // 0x2743e
        g4 = v17;
        int32_t v18; // 0x27443
        if (v17 == 0) {
            // bb241
            v18 = function_274a0();
            g4 = v18;
        } else {
            v18 = v17;
        }
        int32_t v19 = function_27340(v18, g10, 0); // 0x27454
        g4 = v19;
        g6 = v19;
        if (v19 == 0) {
            // bb242
            g4 = function_274a0();
        }
    }
    int32_t v20 = g8; // 0x27460
    int32_t v21; // 0x2746a
    if (v20 == 0) {
        int32_t v22 = function_2747f((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x27462
        g4 = v22;
        v21 = g8;
    } else {
        v21 = v20;
    }
    int32_t v23 = *(int32_t *)(g5 - 292); // 0x27464
    g7 = v23;
    int32_t v24 = v21 + 1; // 0x2746a
    g8 = v24;
    int32_t result2 = function_27340(g6, v24, v23); // 0x27478
    g4 = result2;
    g6 = result2;
    return result2;
}

// Address range: 0x2747f - 0x2748c
int32_t function_2747f(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g6; // 0x27485
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x27490 - 0x274a0
int32_t function_27490(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = *(int32_t *)(g5 + 8); // 0x27490
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x274a0 - 0x274ef
int32_t function_274a0(void) {
    // 0x274a0
    if (*(char *)(g5 - 281) == 0) {
        // bb
        g4 = function_274f0();
    }
    int32_t v1 = function_26cf0(); // 0x274b0
    g4 = v1;
    g9 = *(int32_t *)(g5 - 288);
    g6 = v1;
    g4 = function_26330(v1);
    int32_t v2 = *(int32_t *)(g5 - 296); // 0x274c9
    g7 = v2;
    if (v2 == 0) {
        // bb4
        g4 = function_2750a();
    }
    int32_t v3 = *(int32_t *)(g5 - 296); // 0x274d3
    g7 = v3;
    *(int32_t *)(v3 + 20) = g6;
    g9 = *(int32_t *)(g5 + 8);
    *(int32_t *)(g6 + 20) = 0;
    *(char *)(g9 + 16) = 0;
    return g4;
}

// Address range: 0x274f0 - 0x274f4
int32_t function_274f0(void) {
    // 0x274f0
    g6 = 0;
    int32_t result = function_2747f((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x274f2
    g4 = result;
    return result;
}

// Address range: 0x274f4 - 0x27503
int32_t function_274f4(void) {
    // 0x274f4
    *(int32_t *)(g5 - 296) = 0;
    return g4;
}

// Address range: 0x27503 - 0x2750a
int32_t function_27503(void) {
    // 0x27503
    g6 = g9;
    return g4;
}

// Address range: 0x2750a - 0x27512
int32_t function_2750a(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x2750a
    g4 = v1;
    *(int32_t *)(v1 + 24) = g6;
    return g4;
}

// Address range: 0x27512 - 0x2755e
int32_t function_27512(int32_t a1, int32_t a2) {
    // 0x27512
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t v2 = function_27340(a1, a2, 0); // 0x2754b
    g4 = v2;
    g9 = 0;
    int32_t result; // 0x27556
    if (v2 != 0) {
        // 0x27556
        result = (int32_t)*(char *)(v2 + 16);
        g9 = result;
    } else {
        result = 0;
    }
    // 0x2755a
    g4 = result;
    return result;
}

// Address range: 0x27560 - 0x2759d
int32_t function_27560(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = function_27340(a1, a2, 0); // 0x2757b
    g4 = v2;
    g9 = 1;
    int32_t result; // 0x2759a
    if (v2 == 0) {
        result = 1;
        // 0x27599
        g4 = result;
        return result;
    }
    // 0x27589
    g9 = 0;
    if (*(char *)(v2 + 16) == 0) {
        int32_t v3 = *(int32_t *)(v2 + 24); // 0x27591
        g4 = v3;
        int32_t v4 = v3 == 0; // 0x27596
        g9 = v4;
        result = v4;
    } else {
        result = 0;
    }
    // 0x27599
    g4 = result;
    return result;
}

// Address range: 0x275a0 - 0x275d0
int32_t function_275a0(int32_t a1, char * a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_27340(a1, (int32_t)a2, 1); // 0x275bb
    g4 = result;
    if (result != 0) {
        // 0x275c4
        g9 = a3;
        *(char *)(result + 16) = 4;
        *(int32_t *)(result + 12) = g9;
    }
    // 0x275ce
    g5 = v1;
    return result;
}

// Address range: 0x275d0 - 0x27600
int32_t function_275d0(int32_t a1, char * a2, float80_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_27340(a1, (int32_t)a2, 1); // 0x275eb
    g4 = result;
    if (result != 0) {
        // 0x275f4
        g9 = (float32_t)a3;
        *(char *)(result + 16) = 3;
        *(int32_t *)(result + 12) = g9;
    }
    // 0x275fe
    g5 = v1;
    return result;
}

// Address range: 0x27600 - 0x2767f
int32_t function_27600(int32_t a1, char * a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x27609
    int32_t v3 = g10; // 0x2760c
    g10 = a3;
    int32_t v4 = g8; // 0x27612
    g8 = a4;
    g4 = a1;
    int32_t v5 = function_27340(a1, (int32_t)a2, 1); // 0x2762a
    g4 = v5;
    g6 = v5;
    int32_t result; // 0x2767e
    if (v5 != 0) {
        int32_t v6 = *(int32_t *)(v5 + 4); // 0x27635
        g4 = v6;
        int32_t v7; // 0x27644
        if (v6 != 0) {
            // 0x2763c
            g4 = function_1bca0(v6);
            v7 = g6;
        } else {
            v7 = v5;
        }
        int32_t v8 = *(int32_t *)(v7 + 8); // 0x27644
        g4 = v8;
        int32_t v9; // 0x27653
        if (v8 != 0) {
            // 0x2764b
            g4 = function_1bca0(v8);
            v9 = g6;
        } else {
            v9 = v7;
        }
        // 0x27653
        *(int32_t *)(v9 + 8) = 0;
        int32_t v10 = function_1bc60(); // 0x27661
        g4 = v10;
        *(int32_t *)(g6 + 4) = v10;
        *(int32_t *)g4 = g10;
        *(int32_t *)(g4 + 4) = g8;
        *(char *)(g6 + 16) = 7;
        result = g4;
    } else {
        result = 0;
    }
    // 0x27672
    g6 = v2;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result;
}

// Address range: 0x27680 - 0x276b0
int32_t function_27680(int32_t a1, char * a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_27340(a1, (int32_t)a2, 1); // 0x2769b
    g4 = result;
    if (result != 0) {
        // 0x276a4
        g9 = a3;
        *(char *)(result + 16) = 2;
        *(int32_t *)(result + 12) = g9;
    }
    // 0x276ae
    g5 = v1;
    return result;
}

// Address range: 0x276b0 - 0x27755
int32_t function_276b0(int32_t a1, char * a2, char * a3, int32_t a4, char * a5, int32_t a6) {
    int32_t v1 = g6; // 0x276b6
    g6 = a1;
    int32_t v2 = g10; // 0x276bc
    g4 = (int32_t)a3;
    int32_t v3 = g8; // 0x276c2
    g9 = a4;
    g10 = (int32_t)a5;
    g8 = a6;
    *(int32_t *)(a1 + 24) = 0;
    int32_t * v4 = (int32_t *)g6; // 0x276d5
    *v4 = *v4 & -0x1000000;
    *(int16_t *)(g6 + 18) = 0;
    *(char *)(g6 + 3) = 0;
    *(char *)(g6 + 16) = 0;
    g7 = (int32_t)a2;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 17) = 0;
    int32_t v5 = g4; // 0x2771a
    int32_t v6 = g9; // 0x2771d
    function_262d0(g6);
    g9 = v6;
    g4 = v5;
    g4 = function_27680(g6, (char *)v5, v6);
    int32_t v7 = g8; // 0x2773b
    g8 = v3;
    int32_t v8 = g10; // 0x27741
    g10 = v2;
    int32_t v9 = g6; // 0x27747
    g6 = v1;
    int32_t result = function_27680(v9, (char *)v8, v7); // 0x27750
    g4 = result;
    return result;
}

// Address range: 0x27760 - 0x277e3
int32_t function_27760(int32_t a1, char * a2, char * a3, int32_t a4) {
    int32_t v1 = g6; // 0x27766
    g6 = a1;
    int32_t v2 = g10; // 0x2776c
    g10 = (int32_t)a3;
    int32_t v3 = g8; // 0x27772
    g8 = a4;
    int32_t * v4 = (int32_t *)a1; // 0x27778
    *v4 = *v4 & -0x1000000;
    *(int16_t *)(g6 + 18) = 0;
    *(char *)(g6 + 3) = 0;
    *(char *)(g6 + 16) = 0;
    g4 = (int32_t)a2;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 17) = 0;
    g4 = function_262d0(g6);
    int32_t v5 = g8; // 0x277c9
    g8 = v3;
    int32_t v6 = g10; // 0x277cf
    g10 = v2;
    int32_t v7 = g6; // 0x277d5
    g6 = v1;
    int32_t result = function_27680(v7, (char *)v6, v5); // 0x277de
    g4 = result;
    return result;
}

// Address range: 0x277f0 - 0x277f1
int32_t function_277f0(int32_t a1, int32_t a2) {
    // 0x277f0
    return g4;
}

// Address range: 0x2781f - 0x27820
int32_t function_2781f(void) {
    // 0x2781f
    return g4;
}

// Address range: 0x27858 - 0x2788c
int32_t function_27858(void) {
    // 0x27858
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x4853c); // 0x27858
    *v2 = *v2 - 1;
    int32_t v3 = g4; // 0x2785e
    *(char *)v3 = (char)v3 + *(char *)&g4;
    int32_t v4 = function_1bc60(); // 0x27863
    g4 = v4;
    *(int32_t *)(g6 + 8) = v4;
    g4 = function_2cb10(g4, g10, g8);
    *(char *)(g6 + 16) = 5;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x27890 - 0x27913
int32_t function_27890(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x27896
    g6 = a1;
    int32_t v2 = g10; // 0x2789c
    g10 = a3;
    int32_t v3 = g8; // 0x278a2
    g8 = a4;
    int32_t * v4 = (int32_t *)a1; // 0x278a8
    *v4 = *v4 & -0x1000000;
    *(int16_t *)(g6 + 18) = 0;
    *(char *)(g6 + 3) = 0;
    *(char *)(g6 + 16) = 0;
    g4 = a2;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 17) = 0;
    g4 = function_262d0(g6);
    g8 = v3;
    int32_t v5 = g10; // 0x278ff
    g10 = v2;
    int32_t v6 = g6; // 0x27905
    g6 = v1;
    int32_t result = function_277f0(v6, v5); // 0x2790e
    g4 = result;
    return result;
}

// Address range: 0x27920 - 0x27966
int32_t function_27920(int32_t a1, char * a2, char * a3) {
    int32_t v1 = g6; // bp-8
    g6 = (int32_t)a3;
    g4 = a1;
    int32_t v2 = function_27340(a1, (int32_t)a2, 1); // 0x2793f
    g4 = v2;
    if (v2 == 0) {
        // 0x27960
        g865 = llvm_ctpop_i8((char)(g11 + 20)) % 2 == 0;
        g6 = v1;
        return 0;
    }
    int32_t v3 = g6; // 0x27948
    g6 = v1;
    int32_t result = function_26250(v2, v3); // 0x27953
    g4 = result;
    return result;
}

// Address range: 0x27970 - 0x27a15
int32_t function_27970(int32_t a1, char * a2, char * a3, char * a4, char * a5, char * a6) {
    int32_t v1 = g6; // 0x27976
    g6 = a1;
    int32_t v2 = g10; // 0x2797c
    g4 = (int32_t)a3;
    int32_t v3 = g8; // 0x27982
    g9 = (int32_t)a4;
    g10 = (int32_t)a5;
    g8 = (int32_t)a6;
    *(int32_t *)(a1 + 24) = 0;
    int32_t * v4 = (int32_t *)g6; // 0x27995
    *v4 = *v4 & -0x1000000;
    *(int16_t *)(g6 + 18) = 0;
    *(char *)(g6 + 3) = 0;
    *(char *)(g6 + 16) = 0;
    g7 = (int32_t)a2;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 17) = 0;
    int32_t v5 = g4; // 0x279da
    int32_t v6 = g9; // 0x279dd
    function_262d0(g6);
    g9 = v6;
    g4 = v5;
    g4 = function_27920(g6, (char *)v5, (char *)v6);
    int32_t v7 = g8; // 0x279fb
    g8 = v3;
    int32_t v8 = g10; // 0x27a01
    g10 = v2;
    int32_t v9 = g6; // 0x27a07
    g6 = v1;
    int32_t result = function_27920(v9, (char *)v8, (char *)v7); // 0x27a10
    g4 = result;
    return result;
}

// Address range: 0x27a20 - 0x27aa3
int32_t function_27a20(int32_t a1, char * a2, char * a3, char * a4) {
    int32_t v1 = g6; // 0x27a26
    g6 = a1;
    int32_t v2 = g10; // 0x27a2c
    g10 = (int32_t)a3;
    int32_t v3 = g8; // 0x27a32
    g8 = (int32_t)a4;
    int32_t * v4 = (int32_t *)a1; // 0x27a38
    *v4 = *v4 & -0x1000000;
    *(int16_t *)(g6 + 18) = 0;
    *(char *)(g6 + 3) = 0;
    *(char *)(g6 + 16) = 0;
    g4 = (int32_t)a2;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 17) = 0;
    g4 = function_262d0(g6);
    int32_t v5 = g8; // 0x27a89
    g8 = v3;
    int32_t v6 = g10; // 0x27a8f
    g10 = v2;
    int32_t v7 = g6; // 0x27a95
    g6 = v1;
    int32_t result = function_27920(v7, (char *)v6, (char *)v5); // 0x27a9e
    g4 = result;
    return result;
}

// Address range: 0x27ab0 - 0x27af9
int32_t function_27ab0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x27ab3
    g6 = a3;
    g4 = a1;
    int32_t result = function_27340(a1, a2, 1); // 0x27acf
    g4 = result;
    if (result != 0) {
        uint32_t v2 = g6; // 0x27ad8
        g9 = v2 / 256 & (int32_t)&g862;
        *(char *)(result + 12) = (char)v2;
        *(char *)(result + 13) = (char)g9;
        uint32_t v3 = g6; // 0x27ae1
        g6 = v3 / 0x1000000;
        g9 = v3 / 0x10000;
        *(char *)(result + 16) = 6;
        *(char *)(result + 14) = (char)g9;
        *(char *)(result + 15) = (char)g6;
    }
    // 0x27af3
    g6 = v1;
    return result;
}

// Address range: 0x27b00 - 0x27b9a
int32_t function_27b00(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // bp-8
    g4 = a4;
    g6 = a1;
    *(int32_t *)a1 = *(int32_t *)a4;
    g4 = a2;
    int32_t v2 = function_27340(a2, a3, 0); // 0x27b26
    g4 = v2;
    int32_t result; // 0x27b52
    if (v2 == 0) {
        // 0x27b4f
        result = g6;
        g4 = result;
        g6 = v1;
        return result;
    }
    unsigned char v3 = *(char *)(v2 + 16); // 0x27b2f
    int32_t v4 = v3; // 0x27b2f
    g9 = v4;
    int32_t v5; // 0x27b3c
    int32_t v6; // 0x27b36
    if (v3 == 6) {
        // bb
        v6 = function_27bc0((int32_t)&g870, (int32_t)&g870);
        g4 = v6;
        v5 = g9;
    } else {
        v6 = v2;
        v5 = v4;
    }
    int32_t v7; // 0x27b4a
    int32_t v8; // 0x27b3f
    if ((char)v5 == 3) {
        // bb26
        v8 = function_27be8((int32_t)&g870, (int32_t)&g870);
        g4 = v8;
        v7 = g9;
    } else {
        v8 = v6;
        v7 = v5;
    }
    char v9 = v7; // 0x27b45
    if (v9 == 2) {
        // 0x27b60
        *(char *)g6 = (char)*(int32_t *)(v8 + 12);
        int32_t result2 = g6; // 0x27b68
        g4 = result2;
        g6 = v1;
        return result2;
    }
    if (v9 == 1) {
        // 0x27b70
        int32_t v10; // bp-28
        g9 = &v10;
        int32_t result3 = *(int32_t *)(v8 + 4); // 0x27b94
        g4 = result3;
        return result3;
    }
    // 0x27b4f
    result = g6;
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x27b9e - 0x27bc0
int32_t function_27b9e(void) {
    // 0x27b9e
    int32_t v1; // ebp
    __asm_cvttps2pi(*(int64_t *)(v1 - 24));
    *(char *)g6 = (char)g4;
    int32_t v2 = __asm_cvttss2si(*(int32_t *)(v1 - 20)); // 0x27ba6
    g4 = v2;
    *(char *)(g6 + 1) = (char)v2;
    int32_t v3 = __asm_cvttss2si(*(int32_t *)(v1 - 16)); // 0x27bae
    g4 = v3;
    *(char *)(g6 + 2) = (char)v3;
    int32_t v4 = __asm_cvttss2si(*(int32_t *)(v1 - 12)); // 0x27bb6
    g4 = v4;
    *(char *)(g6 + 3) = (char)v4;
    return g4;
}

// Address range: 0x27bc0 - 0x27be5
int32_t function_27bc0(int32_t a1, int32_t a2) {
    unsigned char v1 = *(char *)(g4 + 12); // 0x27bc0
    g9 = v1;
    *(char *)g6 = v1;
    unsigned char v2 = *(char *)(g4 + 13); // 0x27bc6
    g9 = v2;
    *(char *)(g6 + 1) = v2;
    int32_t v3 = g4; // 0x27bcd
    unsigned char v4 = *(char *)(v3 + 14); // 0x27bcd
    g9 = v4;
    g4 = (int32_t)*(char *)(v3 + 15);
    *(char *)(g6 + 2) = v4;
    *(char *)(g6 + 3) = (char)g4;
    int32_t result = g6; // 0x27bde
    g4 = result;
    g6 = a1;
    g5 = a2;
    return result;
}

// Address range: 0x27be8 - 0x27bf9
int32_t function_27be8(int32_t a1, int32_t a2) {
    // 0x27be8
    *(char *)g6 = (char)__asm_cvttss2si(*(int32_t *)(g4 + 12));
    int32_t result = g6; // 0x27bf2
    g4 = result;
    g6 = a1;
    g5 = a2;
    return result;
}

// Address range: 0x27c00 - 0x27c5b
int32_t function_27c00(int32_t a1, char * a2, int32_t * a3) {
    int32_t result2 = (int32_t)a3;
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g10; // 0x27c09
    int32_t v3 = (int32_t)a2; // 0x27c0c
    g10 = v3;
    int32_t v4 = g8; // 0x27c0f
    g8 = a1;
    int32_t v5 = g6; // 0x27c15
    int32_t v6 = function_27340(a1, v3, 0); // 0x27c27
    g4 = v6;
    g6 = v6;
    if (v6 != 0) {
        char * v7 = (char *)(v6 + 16); // 0x27c32
        if (*v7 < 8) {
            int32_t result = (int32_t)*v7; // 0x27c50
            g4 = result;
            return result;
        }
    }
    // 0x27c38
    g4 = result2;
    g6 = v5;
    g10 = v2;
    g8 = v4;
    g5 = v1;
    return result2;
}

// Address range: 0x27c60 - 0x27ca7
int32_t function_27c60(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x27c60
    g4 = v1;
    g9 = *(int32_t *)(v1 + 4);
    g4 = *(int32_t *)v1;
    int32_t v2; // ebp
    int32_t v3 = v2 - 88; // 0x27c78
    g9 = v3;
    *(int32_t *)(v2 - 604) = v3;
    g4 = function_2da40(v3, 64, "%lld");
    int32_t v4 = *(int32_t *)(g5 - 604); // 0x27c91
    g9 = v4;
    int32_t result = function_27920(g8, (char *)g10, (char *)v4); // 0x27ca2
    g4 = result;
    return result;
}

// Address range: 0x27ca7 - 0x27cbd
int32_t function_27ca7(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x27ca7
    g6 = v1;
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    *(int32_t *)(g5 + 16) = v1;
    g6 = *(int32_t *)(g5 - 12);
    int32_t result = *(int32_t *)(g5 + 16); // 0x27cb6
    g4 = result;
    return result;
}

// Address range: 0x27ce3 - 0x27d03
int32_t function_27ce3(void) {
    int32_t v1 = *(int32_t *)(g5 - 604); // 0x27ce3
    g9 = v1;
    g4 = function_27920(g8, (char *)g10, (char *)v1);
    int32_t result = function_27ca7(); // 0x27d01
    g4 = result;
    return result;
}

// Address range: 0x27d08 - 0x27d23
int32_t function_27d08(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 12)); // 0x27d08
    __asm_movsd(__asm_cvtps2pd(v1));
    return g4;
}

// Address range: 0x27d28 - 0x27d55
int32_t function_27d28(void) {
    // 0x27d28
    g4 = *(int32_t *)(g6 + 12);
    int32_t v1; // ebp
    int32_t v2 = v1 - 88; // 0x27d2b
    g9 = v2;
    *(int32_t *)(v1 - 604) = v2;
    int32_t result = function_2da40(v2, 64, "%d"); // 0x27d4b
    g4 = result;
    return result;
}

// Address range: 0x27d60 - 0x27dbb
float80_t function_27d60(int32_t a1, char * a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = (int32_t)a2;
    int32_t v2 = __asm_movss_1646(__asm_movss(a3)); // 0x27d76
    int32_t v3 = g4; // 0x27d7b
    g4 = a1;
    int32_t v4 = function_27340(a1, v3, (int32_t)&g870); // 0x27d85
    g4 = v4;
    int128_t v5 = __asm_movss(v2); // 0x27d8a
    g882 = v4 == 0;
    g865 = llvm_ctpop_i8((char)v4) % 2 == 0;
    int128_t v6; // 0x27d9c
    if (v4 != 0) {
        char * v7 = (char *)(v4 + 16); // 0x27d93
        unsigned char v8 = *v7; // 0x27d93
        char v9 = v8 - 7; // 0x27d93
        g882 = v9 == 0;
        g865 = llvm_ctpop_i8(v9) % 2 == 0;
        if (v8 < 7 || v9 == 0) {
            // 0x27db0
            g9 = (int32_t)*v7;
            return g868;
        }
        // 0x27d99
        v6 = __asm_xorps(v5, v5);
    } else {
        v6 = v5;
    }
    // 0x27d9c
    g13--;
    g5 = v1;
    return __asm_movss_1646(v6);
}

// Address range: 0x27dc0 - 0x27de2
float80_t function_27dc0(void) {
    int32_t v1 = *(int32_t *)(g4 + 4); // 0x27dc0
    g4 = v1;
    float80_t v2 = (float80_t)*(int64_t *)v1; // 0x27dc3
    g868 = v2;
    int32_t v3 = *(int32_t *)(v1 + 4); // 0x27dc5
    g4 = v3;
    float80_t v4; // 0x27dd0
    if (v3 < 0) {
        // bb
        v4 = function_27e50();
    } else {
        v4 = v2;
    }
    // 0x27dd0
    int32_t v5; // ebp
    *(float32_t *)(v5 - 12) = (float32_t)v4;
    int32_t v6 = *(int32_t *)(v5 - 12); // 0x27dd3
    *(int32_t *)(v5 - 16) = __asm_movss_1646(__asm_movss(v6));
    return (float80_t)*(float32_t *)(v5 - 16);
}

// Address range: 0x27dfa - 0x27e0f
float80_t function_27dfa(void) {
    int32_t v1 = *(int32_t *)(g4 + 12); // 0x27e00
    int32_t v2; // ebp
    *(int32_t *)(v2 - 16) = __asm_movss_1646(__asm_movss(v1));
    return (float80_t)*(float32_t *)(v2 - 16);
}

// Address range: 0x27e10 - 0x27e1f
float80_t function_27e10(void) {
    int32_t v1 = *(int32_t *)(g4 + 12); // 0x27e10
    int32_t v2; // ebp
    *(int32_t *)(v2 - 16) = __asm_movss_1646(__asm_cvtsi2ss(v1));
    return (float80_t)*(float32_t *)(v2 - 16);
}

// Address range: 0x27e20 - 0x27e21
int32_t function_27e20(void) {
    // 0x27e20
    return g4;
}

// Address range: 0x27e33 - 0x27e49
float80_t function_27e33(void) {
    // 0x27e33
    int32_t v1; // ebp
    int32_t v2 = v1 - 24; // 0x27e33
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x27e36
    *(int32_t *)(v1 - 16) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    return (float80_t)*(float32_t *)(v1 - 16);
}

// Address range: 0x27e50 - 0x27e5b
float80_t function_27e50(void) {
    // 0x27e50
    return g868 + 18446744073709551616.0L;
}

// Address range: 0x27e60 - 0x27e9b
int32_t function_27e60(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x27e63
    g6 = a3;
    g4 = a1;
    int32_t v2 = function_27340(a1, a2, 0); // 0x27e7f
    g4 = v2;
    int32_t result; // 0x27e96
    if (v2 == 0) {
        // 0x27e60
        result = g6;
        // 0x27e93
        g4 = result;
        g6 = v1;
        return result;
    }
    // 0x27e88
    g6 = 0;
    if (*(char *)(v2 + 16) == 4) {
        int32_t v3 = *(int32_t *)(v2 + 12); // 0x27e90
        g6 = v3;
        result = v3;
    } else {
        result = 0;
    }
    // 0x27e93
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x27ea0 - 0x27f43
int32_t function_27ea0(int32_t a1, char * a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x27ea3
    int32_t v2 = g10; // bp-12
    g10 = a3;
    g8 = a4;
    g4 = a1;
    int32_t v3 = function_27340(a1, (int32_t)a2, 0); // 0x27ec3
    g4 = v3;
    int32_t result2; // 0x27ef0
    int32_t v4; // 0x27ef2
    int32_t v5; // 0x27f05
    if (v3 == 0) {
        // 0x27ea0
        v4 = g8;
        result2 = g10;
        goto lab_0x27eed;
    } else {
        unsigned char v6 = *(char *)(v3 + 16); // 0x27ecc
        int32_t v7 = v6; // 0x27ecc
        g9 = v7;
        int32_t v8; // 0x27ee0
        int32_t v9; // 0x27ed3
        if (v6 == 3) {
            // bb
            v9 = function_27fa0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
            g4 = v9;
            v8 = g9;
        } else {
            v9 = v3;
            v8 = v7;
        }
        char v10 = v8; // 0x27edb
        if (v6 > 3) {
            if (v10 == 5) {
                // 0x27f20
                int32_t v11; // bp-20
                g9 = &v11;
                v11 = 0;
                int32_t result = *(int32_t *)(v9 + 8); // 0x27f3d
                g4 = result;
                return result;
            }
            if (v10 != 7) {
                v5 = v9;
                goto lab_0x27f05;
            } else {
                int32_t v12 = *(int32_t *)(v9 + 4); // 0x27ee5
                g4 = v12;
                int32_t v13 = *(int32_t *)v12; // 0x27ee8
                g10 = v13;
                int32_t v14 = *(int32_t *)(v12 + 4); // 0x27eea
                g8 = v14;
                v4 = v14;
                result2 = v13;
                goto lab_0x27eed;
            }
        } else {
            if (v10 == 1) {
                int32_t v15 = function_27f60(); // 0x27f03
                g4 = v15;
                v5 = v15;
            } else {
                v5 = v9;
            }
            goto lab_0x27f05;
        }
    }
  lab_0x27eed:
    // 0x27eed
    g4 = result2;
    g9 = v4;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x27f05:;
    int32_t result3 = *(int32_t *)(v5 + 12); // 0x27f05
    g4 = result3;
    g10 = v2;
    g9 = result3 >> 31;
    g8 = v1;
    return result3;
}

// Address range: 0x27f47 - 0x27f59
int32_t function_27f47(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 + 0x7d8bf075); // 0x27f47
    *v1 = *v1 - 1;
    __asm_hlt();
    int32_t result = g10; // 0x27f51
    g4 = result;
    g10 = a1;
    g9 = g8;
    g8 = a2;
    return result;
}

// Address range: 0x27f60 - 0x27f83
int32_t function_27f60(void) {
    int32_t v1 = g5 - 16; // 0x27f60
    g9 = v1;
    *(int32_t *)v1 = 0;
    *(int32_t *)(g5 - 12) = 0;
    int32_t result = *(int32_t *)(g4 + 4); // 0x27f7d
    g4 = result;
    return result;
}

// Address range: 0x27f87 - 0x27f99
int32_t function_27f87(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 + 0x7d8bf075); // 0x27f87
    *v1 = *v1 - 1;
    __asm_hlt();
    int32_t result = g10; // 0x27f91
    g4 = result;
    g10 = a1;
    g9 = g8;
    g8 = a2;
    return result;
}

// Address range: 0x27fa0 - 0x27fb5
int32_t function_27fa0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t result = __asm_cvttss2si(*(int32_t *)(g4 + 12)); // 0x27fa0
    g4 = result;
    g10 = a1;
    g9 = result >> 31;
    g8 = a2;
    g5 = a3;
    return result;
}

// Address range: 0x27fc0 - 0x28039
int32_t function_27fc0(int32_t a1, char * a2, int32_t a3) {
    int32_t v1 = g6; // bp-8
    g6 = a3;
    g4 = a1;
    int32_t v2 = function_27340(a1, (int32_t)a2, 0); // 0x27fdf
    g4 = v2;
    int32_t result; // 0x28005
    if (v2 == 0) {
        // 0x27fc0
        result = g6;
        // 0x28002
        g4 = result;
        g6 = v1;
        return result;
    }
    unsigned char v3 = *(char *)(v2 + 16); // 0x27fe8
    int32_t v4 = v3; // 0x27fe8
    g9 = v4;
    int32_t v5; // 0x27ff3
    int32_t v6; // 0x27fef
    if (v3 == 3) {
        // bb
        v6 = function_28040((int32_t)&g870, (int32_t)&g870);
        g4 = v6;
        v5 = g9;
    } else {
        v6 = v2;
        v5 = v4;
    }
    char v7 = v5; // 0x27ff3
    int32_t result3; // 0x28015
    if (v3 <= 3) {
        if (v7 == 1) {
            int32_t result2 = *(int32_t *)(v6 + 4); // 0x2802e
            g4 = result2;
            g6 = v1;
            return result2;
        }
        // 0x28015
        result3 = *(int32_t *)(v6 + 12);
        g4 = result3;
        g6 = v1;
        return result3;
    }
    int32_t v8; // 0x27ffa
    int32_t v9; // 0x27ff6
    if (v7 == 5) {
        // bb25
        v9 = function_28050((int32_t)&g870, (int32_t)&g870);
        g4 = v9;
        v8 = g9;
    } else {
        v9 = v6;
        v8 = v5;
    }
    // 0x27ff8
    g6 = 0;
    if ((char)v8 == 7) {
        result = 0;
        // 0x28002
        g4 = result;
        g6 = v1;
        return result;
    }
    // 0x28015
    result3 = *(int32_t *)(v9 + 12);
    g4 = result3;
    g6 = v1;
    return result3;
}

// Address range: 0x2803d - 0x28040
int32_t function_2803d(void) {
    // 0x2803d
    return g4;
}

// Address range: 0x28040 - 0x2804d
int32_t function_28040(int32_t a1, int32_t a2) {
    int32_t result = __asm_cvttss2si(*(int32_t *)(g4 + 12)); // 0x28040
    g4 = result;
    g6 = a1;
    g5 = a2;
    return result;
}

// Address range: 0x28050 - 0x28069
int32_t function_28050(int32_t a1, int32_t a2) {
    // 0x28050
    *(int32_t *)(g5 + 16) = 10;
    *(int32_t *)(g5 + 12) = 0;
    int32_t v1 = *(int32_t *)(g4 + 8); // 0x2805e
    g4 = v1;
    *(int32_t *)(g5 + 8) = v1;
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x2806d - 0x28070
int32_t function_2806d(void) {
    // 0x2806d
    return g4;
}

// Address range: 0x28070 - 0x280cb
int32_t function_28070(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g10; // 0x2807c
    g10 = a2;
    int32_t v3 = g6; // 0x28082
    int32_t v4 = g8; // 0x28085
    g8 = (int32_t)a3;
    int32_t v5 = function_27340(a1, a2, 0); // 0x2809a
    g4 = v5;
    g6 = v5;
    if (v5 != 0) {
        char * v6 = (char *)(v5 + 16); // 0x280a5
        if (*v6 < 8) {
            int32_t result = (int32_t)*v6; // 0x280c0
            g4 = result;
            return result;
        }
    }
    int32_t result2 = g8; // 0x280ab
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v4;
    return result2;
}

// Address range: 0x280e8 - 0x280e9
int32_t function_280e8(int32_t a1) {
    // 0x280e8
    return g4;
}

// Address range: 0x280fd - 0x28123
int32_t function_280fd(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x7c890845); // 0x280fd
    *v1 = *v1 - 1;
    int32_t v2 = g4 & -248; // 0x28103
    g4 = v2;
    g4 = function_277f0(v2, g10);
    int32_t result = *(int32_t *)(g6 + 8); // 0x28111
    g8 = result;
    int32_t v3; // ebp
    g10 = *(int32_t *)(v3 - 8);
    g6 = *(int32_t *)(v3 - 12);
    g4 = result;
    g8 = *(int32_t *)(v3 - 4);
    return result;
}

// Address range: 0x28128 - 0x28140
int32_t function_28128(void) {
    int128_t v1 = __asm_cvtps2pd(__asm_movss(*(int32_t *)(g6 + 12))); // 0x28135
    int32_t result = function_280e8(__asm_movsd(v1)); // 0x2813e
    g4 = result;
    return result;
}

// Address range: 0x28165 - 0x28167
int32_t function_28165(void) {
    // 0x28165
    return g4;
}

// Address range: 0x28170 - 0x2820a
int32_t function_28170(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x28170
    g4 = v1;
    int32_t v2 = function_2cb40(v1); // 0x28176
    g4 = v2;
    int32_t v3 = 4 * v2 + 4; // 0x2817b
    g9 = v3;
    *(int32_t *)(g5 - 284) = v3;
    int32_t v4 = function_1bc60(); // 0x2818b
    g4 = v4;
    int32_t * v5 = (int32_t *)(g5 - 284); // 0x28190
    int32_t v6 = *v5; // 0x28190
    g9 = v6;
    g7 = v4;
    g4 = *(int32_t *)(g6 + 4);
    *v5 = v4;
    int32_t v7 = function_2e2a0(g4, v4, v6); // 0x281ac
    g4 = v7;
    int32_t v8 = g5; // 0x281b1
    int32_t v9 = *(int32_t *)(v8 - 284); // 0x281b1
    g7 = v9;
    if (v7 < 0) {
        int32_t result = function_1bca0(v9); // 0x28200
        g4 = result;
        return result;
    }
    int32_t v10 = *(int32_t *)(v8 + 8); // 0x281bb
    g4 = v10;
    g4 = function_277f0(v10, g10);
    int32_t v11 = *(int32_t *)(g5 - 284); // 0x281ce
    g7 = v11;
    int32_t result2 = function_1bca0(v11); // 0x281df
    g4 = result2;
    return result2;
}

// Address range: 0x28210 - 0x284b8
int32_t function_28210(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x28216
    g10 = a2;
    int32_t v2 = g6; // 0x2821c
    g4 = a3;
    g6 = a1;
    int32_t v3 = g8; // 0x28225
    int32_t * v4 = (int32_t *)a1; // 0x2822a
    g9 = *v4;
    g8 = 0;
    int32_t v5; // 0x284a0
    if (a2 == 0) {
        if ((char)a3 != 0) {
            int32_t v6 = *v4; // 0x282b9
            g4 = v6;
            g8 = v6;
        }
        goto lab_0x2823e;
    } else {
        if ((char)a3 != 0) {
            int32_t v7 = *v4; // 0x28250
            g4 = v7;
            g4 = *(int32_t *)(v7 + 16);
            int32_t v8 = function_25190(a2); // 0x2825b
            g4 = v8;
            int32_t v9 = g6; // 0x28260
            if ((char)v8 == 0) {
                goto lab_0x2823e;
            } else {
                int32_t * v10 = (int32_t *)v9; // 0x2826e
                int32_t v11 = *v10; // 0x2826e
                g4 = v11;
                if ((char)v11 == 0) {
                    goto lab_0x2823e;
                } else {
                    // 0x28282
                    g874 = v11;
                    int32_t v12; // bp-192
                    switch (v11) {
                        case 1: {
                            int32_t v13 = *v10; // 0x28483
                            g4 = v13;
                            g8 = *(int32_t *)(v13 + 16);
                            int32_t v14 = function_27c00(a2, NULL, (int32_t *)&g129); // 0x2849b
                            g4 = v14;
                            v5 = g6;
                            g8 = 0;
                            if ((char)v14 != 0) {
                                goto lab_0x28297;
                            } else {
                                goto lab_0x2823e;
                            }
                        }
                        case 2: {
                            // 0x28439
                            g4 = function_27fc0(a2, NULL, 0);
                            int32_t v15 = &v12; // 0x2845f
                            g10 = v15;
                            g4 = function_2da40(v15, 128, "int( %d = 0x%X )");
                            goto lab_0x2832c;
                        }
                        case 3: {
                            float80_t v16 = function_27d60(a2, NULL, 0); // 0x283f6
                            g4 = (float32_t)v16;
                            int32_t v17; // bp-177
                            g10 = &v17;
                            int128_t v18 = __asm_movss((int32_t)(float32_t)v16); // 0x28408
                            g10 = &v12;
                            int128_t v19 = __asm_unpcklps(v18, v18); // 0x28420
                            int32_t v20 = __asm_movsd(__asm_cvtps2pd(v19)); // 0x28429
                            g4 = function_2da40(v20, (int32_t)&g870, (char *)&g870);
                            goto lab_0x2832c;
                        }
                        case 4: {
                            // 0x2839d
                            g4 = function_27e60(a2, 0, 0);
                            int32_t v21 = &v12; // 0x283c3
                            g10 = v21;
                            g4 = function_2da40(v21, 128, "ptr( 0x%p )");
                            goto lab_0x2832c;
                        }
                        case 5: {
                            int32_t v22 = function_28070(a2, 0, &g131); // 0x2835a
                            g4 = v22;
                            g8 = v22;
                            int32_t v23 = function_2cb70(v22); // 0x28364
                            g4 = v23;
                            int32_t v24 = 2 * v23;
                            g7 = v24 + 64;
                            int32_t v25 = v24 + 95 & -16; // 0x28373
                            g9 = v25;
                            int32_t v26 = g11 - v25; // 0x28376
                            g10 = v26 + 43;
                            *(int32_t *)(v26 + 16) = v23;
                            g10 &= -16;
                            *(int32_t *)(g11 + 12) = g8;
                            *(int32_t *)(g11 + 8) = (int32_t)"%ls [wstring, len = %d]";
                            *(int32_t *)(g11 + 4) = g7;
                            *(int32_t *)g11 = g10;
                            g4 = function_2da40((int32_t)&g870, (int32_t)&g870, (char *)&g870);
                            goto lab_0x2832c;
                        }
                        case 7: {
                            // 0x282d7
                            g4 = function_27ea0(a2, NULL, 0, 0);
                            int32_t v27 = &v12; // 0x28305
                            g10 = v27;
                            g4 = function_2da40(v27, 128, "u64( %lld = 0x%llX )");
                            goto lab_0x2832c;
                        }
                        default: {
                            v5 = v9;
                            goto lab_0x28297;
                        }
                    }
                }
            }
        } else {
            goto lab_0x2823e;
        }
    }
  lab_0x2823e:;
    int32_t result = g8; // 0x2823e
    g4 = result;
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return result;
  lab_0x28297:
    // 0x28297
    g4 = *(int32_t *)v5;
    *(int32_t *)(g11 + 4) = (int32_t)&g138;
    *(int32_t *)g11 = g6;
    g8 = g4;
    goto lab_0x2823e;
  lab_0x2832c:
    // 0x2832c
    g4 = *(int32_t *)g6;
    *(int32_t *)(g11 + 4) = g10;
    g8 = 0;
    *(int32_t *)g11 = g6;
    if ((char)g4 != 0) {
        int32_t v28 = g6;
        v5 = v28;
        goto lab_0x28297;
    } else {
        goto lab_0x2823e;
    }
}

// Address range: 0x284c0 - 0x28574
int32_t function_284c0(int32_t a1) {
    int32_t v1 = g8; // 0x284c3
    int32_t v2 = g10; // 0x284c4
    int32_t v3 = g6; // 0x284c5
    g8 = a1;
    int32_t v4 = *(int32_t *)(a1 + 24); // 0x284cc
    g6 = v4;
    int32_t v5;
    int32_t v6; // 0x28500
    if (v4 != 0) {
        int32_t * v7 = (int32_t *)(v4 + 20); // 0x284d8
        int32_t v8 = *v7; // 0x284d8
        g10 = v8;
        *v7 = 0;
        g4 = function_284c0(g6);
        g4 = function_26d40();
        while (v8 != 0) {
            // 0x284f6
            g6 = v8;
            v7 = (int32_t *)(v8 + 20);
            v8 = *v7;
            g10 = v8;
            *v7 = 0;
            g4 = function_284c0(g6);
            g4 = function_26d40();
        }
        // 0x28500
        v6 = g8;
        v5 = 0;
    } else {
        v6 = a1;
        int32_t v9;
        v5 = v9;
    }
    int32_t v10 = *(int32_t *)(v6 + 20); // 0x28500
    g6 = v10;
    int32_t v11; // 0x28540
    if (v6 != v10) {
        if (v10 != 0) {
            // 0x2850b
            g10 = v5;
            while (true) {
                int32_t * v12 = (int32_t *)(v10 + 20); // 0x28510
                int32_t v13 = *v12; // 0x28510
                g10 = v13;
                *v12 = 0;
                g4 = function_284c0(g6);
                g4 = function_26d40();
                int32_t v14 = g8; // 0x2852a
                if (v14 == v13) {
                    v11 = v14;
                    // break -> 0x28540
                    break;
                }
                if (v13 == 0) {
                    v11 = v14;
                    // break -> 0x28540
                    break;
                }
                // 0x28532
                g6 = v13;
                v10 = v13;
            }
        } else {
            v11 = v6;
        }
    } else {
        v11 = v6;
    }
    int32_t v15 = *(int32_t *)(v11 + 4); // 0x28540
    g4 = v15;
    int32_t v16; // 0x2854f
    if (v15 != 0) {
        // 0x28547
        g4 = function_1bca0(v15);
        v16 = g8;
    } else {
        v16 = v11;
    }
    // 0x2854f
    g4 = *(int32_t *)(v16 + 8);
    *(int32_t *)(v16 + 4) = 0;
    int32_t v17 = g4; // 0x28559
    if (v17 != 0) {
        // 0x2855d
        g4 = function_1bca0(v17);
    }
    // 0x28565
    *(int32_t *)(g8 + 8) = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x28580 - 0x285eb
int32_t function_28580(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x28583
    g6 = a1;
    g4 = function_284c0(a1);
    *(int16_t *)(g6 + 18) = 0;
    int32_t * v2 = (int32_t *)g6; // 0x28598
    *v2 = *v2 & -0x1000000;
    *(char *)(g6 + 16) = 0;
    *(char *)(g6 + 3) = 0;
    *(int32_t *)(g6 + 24) = 0;
    g4 = a2;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 17) = 0;
    function_27010(g6, g4);
    int32_t result = g6; // 0x285e6
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x285f0 - 0x285f9
int32_t function_285f0(void) {
    int32_t result = function_284c0((int32_t)&g870); // 0x285f4
    g4 = result;
    return result;
}

// Address range: 0x28600 - 0x2862e
int32_t function_28600(int32_t a1) {
    int32_t v1 = g6; // 0x28603
    g6 = a1;
    if (a1 == 0) {
        // 0x28628
        g6 = v1;
        return g4;
    }
    // 0x2860e
    g4 = function_284c0(a1);
    g6 = v1;
    int32_t result = function_26d40(); // 0x2861e
    g4 = result;
    return result;
}

// Address range: 0x28630 - 0x28631
int32_t function_28630(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x28630
    return g4;
}

// Address range: 0x28673 - 0x28677
int32_t function_28673(void) {
    // 0x28673
    g8--;
    return g4;
}

// Address range: 0x2868a - 0x2868d
int32_t function_2868a(void) {
    // 0x2868a
    return g4;
}

// Address range: 0x286a0 - 0x286a1
int32_t function_286a0(void) {
    // 0x286a0
    return g4;
}

// Address range: 0x286e5 - 0x286f0
int32_t function_286e5(void) {
    // 0x286e5
    g4 &= -24;
    int32_t * v1 = (int32_t *)(g7 - 0x473a); // 0x286ea
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x28729 - 0x28730
int32_t function_28729(void) {
    int32_t * v1 = (int32_t *)(g4 - 0x76ff1883); // 0x28729
    *v1 = *v1 + 1;
    return g4;
}

// Address range: 0x28733 - 0x28741
int32_t function_28733(void) {
    // 0x28733
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 123 + g8); // 0x28733
    *v2 = g10 + *v2;
    unsigned char v3 = *(char *)&g8; // 0x28737
    *(char *)g8 = v3 / 16 | 16 * v3;
    int32_t result = function_8b000004(); // 0x2873a
    g4 = result;
    return result;
}

// Address range: 0x2876e - 0x2876f
int32_t function_2876e(int32_t a1) {
    // 0x2876e
    return g4;
}

// Address range: 0x28772 - 0x28773
int32_t function_28772(void) {
    // 0x28772
    return g4;
}

// Address range: 0x2878e - 0x2878f
int32_t function_2878e(void) {
    // 0x2878e
    return g4;
}

// Address range: 0x28821 - 0x28901
int32_t function_28821(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x7bf08708); // 0x28821
    *v1 = *v1 + 1;
    uint32_t v2 = g4; // 0x28827
    unsigned char v3 = (char)(v2 / 256) + (char)v2; // 0x28827
    int32_t v4 = (int32_t)v3 | v2 & -0x10000; // 0x28827
    g4 = v4;
    char * v5 = (char *)v4; // 0x28829
    *v5 = *v5 + v3;
    unsigned char v6 = *(char *)&g6; // 0x2882b
    g4 = v6;
    if (v6 != 0) {
        int32_t v7 = g5; // 0x28832
        int32_t v8; // 0x28842
        if (*(int32_t *)(v7 - 48) == 18) {
            // bb
            g4 = function_28a10();
            v8 = g5;
        } else {
            v8 = v7;
        }
        int32_t v9 = *(int32_t *)(v8 - 48); // 0x2883c
        g7 = v9;
        uint32_t v10 = *(int32_t *)(v8 - 32); // 0x2883f
        g9 = v10;
        int32_t v11 = *(int32_t *)(v8 - 36); // 0x28842
        g4 = v11;
        int32_t v12 = g6 + v9; // 0x28845
        g7 = v12;
        int32_t v13; // 0x28853
        int32_t v14; // 0x28853
        if (v10 > v11) {
            if (v12 == v10) {
                int32_t v15 = function_28ac0(); // 0x2884d
                g4 = v15;
                v14 = v15;
                v13 = g7;
            } else {
                v14 = v11;
                v13 = v12;
            }
        } else {
            v14 = v11;
            v13 = v12;
        }
        if (v13 == v14) {
            // bb236
            g4 = function_28aa0();
        }
    }
    // 0x2885b
    g9 = *(int32_t *)(g5 - 48);
    *(char *)(g10 + 16) = 1;
    int32_t v16 = g9 + 1; // 0x28862
    g9 = v16;
    *(int32_t *)(g5 - 48) = v16;
    int32_t v17 = function_1bc60(); // 0x2886b
    g4 = v17;
    g7 = *(int32_t *)(g5 - 48);
    *(int32_t *)(g10 + 4) = v17;
    g4 = function_2cb10(g4, g6, g7);
    int32_t v18 = g5; // 0x28886
    int32_t v19 = *(int32_t *)(v18 + 16); // 0x28886
    g4 = v19;
    int32_t v20 = v18 - 25; // 0x28889
    g9 = v20;
    int32_t v21 = v18 - 26; // 0x2888c
    g7 = v21;
    g6 = *(int32_t *)(v19 + 12);
    int32_t v22 = function_25370(g8, v19, v21, v20); // 0x288a1
    g4 = v22;
    int32_t v23 = g5; // 0x288a6
    if (*(char *)(v23 - 25) == 0) {
        int32_t v24 = *(int32_t *)(v23 + 16); // 0x288e8
        g7 = v24;
        g4 = function_30920(v24, 0, g6);
    } else {
        int32_t v25 = *(int32_t *)(v23 + 20); // 0x288ac
        g9 = v25;
        int32_t v26 = function_263f0(g8, v22, v25); // 0x288ba
        g4 = v26;
        *(char *)(g5 - 57) = (char)v26;
    }
    // 0x288c2
    if (*(char *)(g5 - 57) != 0) {
        // bb238
        g4 = function_286a0();
    }
    // 0x288cc
    g4 = function_25fe0(g8, g10);
    g4 = function_28600(g10);
    int32_t result = function_286a0(); // 0x288e0
    g4 = result;
    return result;
}

// Address range: 0x28909 - 0x28917
int32_t function_28909(void) {
    // 0x28909
    *(char *)g8 = (char)g7 + *(char *)&g8;
    return g4;
}

// Address range: 0x2892f - 0x28941
int32_t function_2892f(void) {
    int32_t v1 = g393; // 0x2892f
    g6 = v1;
    if (v1 < 1) {
        // bb
        g4 = function_28a80();
    }
    // 0x2893d
    g6 = 0;
    int32_t result = function_2897f(); // 0x2893f
    g4 = result;
    return result;
}

// Address range: 0x28948 - 0x28949
int32_t function_28948(void) {
    // 0x28948
    return g4;
}

// Address range: 0x28970 - 0x2897f
int32_t function_28970(void) {
    // 0x28970
    g6++;
    return g4;
}

// Address range: 0x2897f - 0x28991
int32_t function_2897f(void) {
    int32_t v1 = g6; // 0x2897f
    int32_t v2; // 0x28989
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_28970();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x28989
    int32_t result; // 0x2898f
    if (v2 < g392) {
        // bb4
        result = function_28948();
        g4 = result;
    } else {
        // 0x28989
        result = g4;
    }
    // 0x28991
    return result;
}

// Address range: 0x289b9 - 0x289bb
int32_t function_289b9(void) {
    int32_t result = function_28970(); // 0x289b9
    g4 = result;
    return result;
}

// Address range: 0x289c0 - 0x289fa
int32_t function_289c0(void) {
    // 0x289c0
    int32_t v1; // ebp
    int32_t v2; // 0x289ca
    if (*(char *)(v1 - 26) != 0) {
        // bb
        g4 = function_2878e();
        v2 = v1;
    } else {
        v2 = v1;
    }
    int32_t v3 = *(int32_t *)(v2 - 68); // 0x289ca
    g4 = v3;
    g9 = *(int32_t *)(v2 + 20);
    g7 = *(int32_t *)(v2 + 16);
    *(int32_t *)(4 * v3 + (int32_t)&g390) = -1;
    int32_t v4 = *(int32_t *)(v1 + 12); // 0x289e1
    g4 = v4;
    int32_t result = function_28630(g10, v4, g7, g9); // 0x289f0
    g4 = result;
    return result;
}

// Address range: 0x28a00 - 0x28a10
int32_t function_28a00(void) {
    // 0x28a00
    int128_t v1; // xmm0
    int128_t v2 = __asm_xorps(v1, v1); // 0x28a00
    int32_t v3; // ebp
    *(int32_t *)(v3 - 32) = g6;
    *(int32_t *)(v3 - 72) = __asm_movss_1646(v2);
    return g4;
}

// Address range: 0x28a10 - 0x28a7f
int32_t function_28a10(void) {
    // 0x28a10
    g7 = 2;
    *(int32_t *)(g5 - 64) = g10;
    *(int32_t *)(g5 - 56) = g8;
    g10 = g7;
    g8 = g6;
    *(int32_t *)(g5 - 48) = 0;
    g7 = 0;
    g6 = 0;
    *(int32_t *)(g5 - 44) = 0;
    while (true) {
        int32_t v1 = g10; // 0x28a6d
        unsigned char v2 = *(char *)(v1 + g8); // 0x28a6d
        int32_t v3 = v2; // 0x28a6d
        g4 = v3;
        int32_t v4;
        if (v2 > 96) {
            // 0x28a48
            v4 = v3 - 39;
        } else {
            int32_t v5 = v3 - 7; // 0x28a75
            g9 = v5;
            v4 = v2 < 65 == (64 - v2 & v2) < 0 ? v5 : v3;
        }
        uint32_t v6 = g7; // 0x28a4e
        int32_t v7 = v4 - 48; // 0x28a52
        g4 = v7;
        uint32_t v8 = 16 * v6; // 0x28a55
        int32_t v9 = v7 >> 31; // 0x28a5a
        g9 = v9;
        int32_t v10 = v8 + v7; // 0x28a5d
        g7 = v10;
        g6 = (v6 / 0x10000000 | 16 * g6) + v9 + (int32_t)(v10 < v8);
        g10 = v1 + 1;
        if (v1 == 17) {
            // bb
            g4 = function_28d83();
        }
    }
}

// Address range: 0x28a80 - 0x28a87
int32_t function_28a80(void) {
    // 0x28a80
    return g4;
}

// Address range: 0x28a8b - 0x28a9b
int32_t function_28a8b(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0xa4c242d); // 0x28a8b
    *v1 = *v1 + 1;
    *(char *)g9 = (char)g4 + *(char *)&g9;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x28aa0 - 0x28ab9
int32_t function_28aa0(void) {
    // 0x28aa0
    g4 = *(int32_t *)(g5 - 64);
    *(char *)(g10 + 16) = 2;
    *(int32_t *)(g10 + 12) = g4;
    return g4;
}

// Address range: 0x28ac0 - 0x28ad3
int32_t function_28ac0(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g5 - 72)); // 0x28ac0
    *(char *)(g10 + 16) = 3;
    *(int32_t *)(g10 + 12) = __asm_movss_1646(v1);
    return g4;
}

// Address range: 0x28af4 - 0x28afa
int32_t function_28af4(void) {
    // 0x28af4
    return g4;
}

// Address range: 0x28afa - 0x28b02
int32_t function_28afa(void) {
    // 0x28afa
    if (g4 < 1) {
        // bb
        g4 = function_28a80();
    }
    // 0x28afe
    g6 = 0;
    int32_t result = function_28b3f(); // 0x28b00
    g4 = result;
    return result;
}

// Address range: 0x28b08 - 0x28b09
int32_t function_28b08(void) {
    // 0x28b08
    return g4;
}

// Address range: 0x28b30 - 0x28b3f
int32_t function_28b30(void) {
    // 0x28b30
    g6++;
    return g4;
}

// Address range: 0x28b3f - 0x28b51
int32_t function_28b3f(void) {
    int32_t v1 = g6; // 0x28b3f
    int32_t v2; // 0x28b49
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_28b30();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x28b49
    int32_t result; // 0x28b4f
    if (g392 > v2) {
        // bb4
        result = function_28b08();
        g4 = result;
    } else {
        // 0x28b49
        result = g4;
    }
    // 0x28b51
    return result;
}

// Address range: 0x28b79 - 0x28b7b
int32_t function_28b79(void) {
    int32_t result = function_28b30(); // 0x28b79
    g4 = result;
    return result;
}

// Address range: 0x28b9d - 0x28baf
int32_t function_28b9d(void) {
    int32_t v1 = g393; // 0x28b9d
    g8 = v1;
    if (v1 < 1) {
        // bb
        g4 = function_28a80();
    }
    // 0x28bab
    g6 = 0;
    int32_t result = function_28be7(); // 0x28bad
    g4 = result;
    return result;
}

// Address range: 0x28bb0 - 0x28bb1
int32_t function_28bb0(void) {
    // 0x28bb0
    return g4;
}

// Address range: 0x28bd8 - 0x28be7
int32_t function_28bd8(void) {
    // 0x28bd8
    g6++;
    return g4;
}

// Address range: 0x28be7 - 0x28bf9
int32_t function_28be7(void) {
    int32_t v1 = g6; // 0x28be7
    int32_t v2; // 0x28bf1
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_28bd8();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x28bf1
    int32_t result; // 0x28bf7
    if (v2 < g392) {
        // bb4
        result = function_28bb0();
        g4 = result;
    } else {
        // 0x28bf1
        result = g4;
    }
    // 0x28bf9
    return result;
}

// Address range: 0x28c21 - 0x28c23
int32_t function_28c21(void) {
    int32_t result = function_28bd8(); // 0x28c21
    g4 = result;
    return result;
}

// Address range: 0x28c45 - 0x28c57
int32_t function_28c45(void) {
    int32_t v1 = g393; // 0x28c45
    g10 = v1;
    if (v1 < 1) {
        // bb
        g4 = function_28a80();
    }
    // 0x28c53
    g6 = 0;
    int32_t result = function_28c97(); // 0x28c55
    g4 = result;
    return result;
}

// Address range: 0x28c60 - 0x28c61
int32_t function_28c60(void) {
    // 0x28c60
    return g4;
}

// Address range: 0x28c88 - 0x28c97
int32_t function_28c88(void) {
    // 0x28c88
    g6++;
    return g4;
}

// Address range: 0x28c97 - 0x28ca9
int32_t function_28c97(void) {
    int32_t v1 = g6; // 0x28c97
    int32_t v2; // 0x28ca1
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_28c88();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x28ca1
    int32_t result; // 0x28ca7
    if (v2 < g392) {
        // bb4
        result = function_28c60();
        g4 = result;
    } else {
        // 0x28ca1
        result = g4;
    }
    // 0x28ca9
    return result;
}

// Address range: 0x28cd1 - 0x28cd3
int32_t function_28cd1(void) {
    int32_t result = function_28c88(); // 0x28cd1
    g4 = result;
    return result;
}

// Address range: 0x28cf5 - 0x28d07
int32_t function_28cf5(void) {
    int32_t v1 = g393; // 0x28cf5
    g7 = v1;
    if (v1 < 1) {
        // bb
        g4 = function_28a80();
    }
    // 0x28d03
    g6 = 0;
    int32_t result = function_28d47(); // 0x28d05
    g4 = result;
    return result;
}

// Address range: 0x28d10 - 0x28d11
int32_t function_28d10(void) {
    // 0x28d10
    return g4;
}

// Address range: 0x28d38 - 0x28d47
int32_t function_28d38(void) {
    // 0x28d38
    g6++;
    return g4;
}

// Address range: 0x28d47 - 0x28d59
int32_t function_28d47(void) {
    int32_t v1 = g6; // 0x28d47
    int32_t v2; // 0x28d51
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_28d38();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x28d51
    int32_t result; // 0x28d57
    if (g392 > v2) {
        // bb4
        result = function_28d10();
        g4 = result;
    } else {
        // 0x28d51
        result = g4;
    }
    // 0x28d59
    return result;
}

// Address range: 0x28d81 - 0x28d83
int32_t function_28d81(void) {
    int32_t result = function_28d38(); // 0x28d81
    g4 = result;
    return result;
}

// Address range: 0x28d83 - 0x28db2
int32_t function_28d83(void) {
    int32_t v1 = g5; // 0x28d83
    g10 = *(int32_t *)(v1 - 64);
    *(int32_t *)(v1 - 48) = g7;
    *(int32_t *)(g5 - 44) = g6;
    g8 = *(int32_t *)(g5 - 56);
    int32_t v2 = function_1bc60(); // 0x28d96
    g4 = v2;
    g9 = *(int32_t *)(g5 - 48);
    *(int32_t *)(g10 + 4) = v2;
    g7 = *(int32_t *)(g5 - 44);
    *(int32_t *)g4 = g9;
    *(int32_t *)(g4 + 4) = g7;
    *(char *)(g10 + 16) = 7;
    return g4;
}

// Address range: 0x28db2 - 0x28e44
int32_t function_28db2(int32_t a1, int32_t a2) {
    // 0x28db2
    g392 -= 2;
    g4 = function_7ab57(g4, (int32_t)&g870);
    g7 = a1;
    g9 = a2;
    int32_t v1 = a1 + 24; // 0x28dd9
    int32_t v2 = *(int32_t *)v1; // 0x28dd9
    g4 = v2;
    if (v2 == 0) {
        // 0x28dfe
        return 0;
    }
    // 0x28de0
    g7 = v1;
    int32_t v3; // 0x28df4
    if (v2 != a2) {
        int32_t result; // 0x28df7
        while (true) {
            // 0x28df4
            v3 = v2 + 20;
            g7 = v3;
            result = *(int32_t *)v3;
            g4 = result;
            if (result == 0) {
                // break -> 0x28dfe
                break;
            }
            if (result == a2) {
                goto lab_0x28e00_2;
            }
            v2 = result;
        }
        // 0x28dfe
        return result;
    }
    v3 = v1;
    goto lab_0x28e00_2;
  lab_0x28e00_2:;
    int32_t v4 = *(int32_t *)(a2 + 24); // 0x28e00
    g4 = v4;
    if (v4 == 0) {
        int32_t v5 = *(int32_t *)(a2 + 20); // 0x28e36
        g4 = v5;
        *(int32_t *)v3 = v5;
        int32_t result2 = function_28600(g9); // 0x28e3f
        g4 = result2;
        return result2;
    }
    // 0x28e07
    *(int32_t *)v3 = v4;
    int32_t v6 = g9; // 0x28e09
    int32_t v7 = *(int32_t *)(v6 + 24); // 0x28e1c
    g7 = v7;
    int32_t * v8 = (int32_t *)(v7 + 20); // 0x28e12
    int32_t v9 = *v8; // 0x28e12
    g4 = v9;
    while (v9 != 0) {
        // 0x28e12
        v7 = v9;
        g7 = v7;
        v8 = (int32_t *)(v7 + 20);
        v9 = *v8;
        g4 = v9;
    }
    int32_t v10 = *(int32_t *)(v6 + 20); // 0x28e19
    g4 = v10;
    *v8 = v10;
    *(int32_t *)(g9 + 24) = 0;
    *(int32_t *)(g9 + 20) = 0;
    int32_t result3 = function_28600(g9); // 0x28e31
    g4 = result3;
    return result3;
}

// Address range: 0x28e50 - 0x28e8b
int32_t function_28e50(int32_t a1) {
    int32_t v1 = g6; // 0x28e56
    g6 = a1;
    int32_t v2 = g10; // 0x28e5c
    int32_t v3 = *(int32_t *)(a1 + 24); // 0x28e5f
    g10 = v3;
    int32_t v4; // 0x28e76
    if (v3 != 0) {
        // 0x28e66
        g4 = function_284c0(v3);
        g4 = function_26d40();
        v4 = g6;
    } else {
        v4 = a1;
    }
    // 0x28e76
    *(int32_t *)(v4 + 24) = 0;
    *(char *)(g6 + 16) = 0;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x28e90 - 0x294d3
int32_t function_28e90(int32_t a1, int32_t a2) {
    // 0x28e90
    g4 = 0;
    int32_t v1 = g8; // 0x28e95
    int32_t v2 = g10; // 0x28e96
    int32_t v3 = g6; // 0x28e97
    g6 = a2;
    g8 = a1;
    if (*(char *)(a2 + 21) % 2 != 0 || *(char *)(a2 + 20) != 0) {
        // 0x28eb0
        g6 = v3;
        g8 = v1;
        return 0;
    }
    // 0x28ec0
    g4 = function_284c0(a1);
    *(int16_t *)(g8 + 18) = 0;
    int32_t * v4 = (int32_t *)g8; // 0x28ece
    *v4 = *v4 & -0x1000000;
    *(char *)(g8 + 16) = 0;
    *(char *)(g8 + 3) = 0;
    *(int32_t *)(g8 + 24) = 0;
    *(int32_t *)(g8 + 20) = 0;
    *(int32_t *)(g8 + 28) = 0;
    *(int32_t *)(g8 + 4) = 0;
    *(int32_t *)(g8 + 8) = 0;
    *(int32_t *)(g8 + 12) = 0;
    *(char *)(g8 + 17) = 0;
    int32_t v5 = g6; // 0x28f0a
    int32_t v6; // bp-36
    int32_t v7; // 0x290f3
    if (*(char *)(v5 + 21) % 2 == 0) {
        // 0x29430
        g10 = 0;
        int32_t v8 = function_309b0(v5, 1); // 0x2943d
        g4 = v8;
        if ((char)v8 == 0) {
            goto lab_0x28f40;
        } else {
            int32_t v9 = g6; // 0x2944a
            int32_t * v10 = (int32_t *)(v9 + 12); // 0x2944a
            int32_t v11 = *v10; // 0x2944a
            g4 = v11;
            int32_t v12 = *(int32_t *)v9; // 0x2944d
            g7 = v12;
            g9 = v11;
            int32_t v13 = v11 + 1; // 0x29451
            g4 = v13;
            int32_t v14 = v11 - *(int32_t *)(v9 + 32); // 0x29454
            g9 = v14;
            g9 = (int32_t)*(char *)(v14 + v12);
            *v10 = v13;
            int32_t v15 = g9 & (int32_t)&g862; // 0x2945e
            g10 = v15;
            v7 = v15;
            goto lab_0x290f3;
        }
    } else {
        // 0x28f14
        g4 = &v6;
        v6 = 128;
        g10 = 0;
        int32_t v16 = function_30bf0(v5, 0, &v6); // 0x28f2f
        g4 = v16;
        if ((char)v16 != 0) {
            // bb
            g4 = function_29b5b();
        }
        goto lab_0x28f40;
    }
  lab_0x29218:;
    int32_t v17 = 0; // bp-32
    g4 = 0;
    int32_t v18 = 0; // 0x291d5
    goto lab_0x291cf;
  lab_0x291cf:;
    // 0x291cf
    int32_t v19; // 0x28f40
    g9 = v19;
    *(int32_t *)g8 = v18;
    int32_t v20 = g10; // 0x291d7
    int32_t v21 = *(int32_t *)(g9 + 8); // 0x291dd
    g4 = v21;
    int32_t v22; // 0x291e6
    int32_t v23; // 0x29187
    int32_t v24; // 0x291e0
    if (v20 == v23) {
        // bb90
        v24 = function_29560();
        g4 = v24;
        v22 = g10;
    } else {
        v22 = v20;
        v24 = v21;
    }
    int32_t v25 = v22 + 1; // 0x291e6
    g10 = v25;
    int32_t v26 = v25; // 0x291ed
    int32_t v27 = v24; // 0x291ed
    goto lab_0x291e9;
  lab_0x28f40:
    // 0x28f40
    v19 = g8;
    g9 = v19;
    *(char *)(v19 + 16) = (char)g10;
    int32_t v39; // bp-1076
    int32_t v40 = &v39; // 0x28f51
    g4 = v40;
    function_31810(g6, &v39, &g91);
    g4 = v19;
    g9 = v40;
    g4 = function_262d0(v19);
    int32_t v41 = g10; // 0x28f87
    g869 = v41;
    int32_t v42; // 0x29302
    int32_t v43; // 0x2930c
    int32_t v44; // 0x29314
    switch (v41) {
        case 0: {
            int32_t v45 = function_26cf0(); // 0x29387
            g4 = v45;
            g10 = v45;
            g4 = function_26330(v45);
            g9 = v19;
            *(int32_t *)(v19 + 24) = g10;
            g4 = function_28e90(g10, g6);
            goto lab_0x29090;
        }
        case 1: {
            // 0x29320
            g4 = v40;
            g4 = function_31810(g6, &v39, &g91);
            g9 = v40;
            int32_t v46 = function_2cb40(v40); // 0x29347
            g4 = v46;
            g10 = v46 + 1;
            int32_t v47 = function_1bc60(); // 0x29352
            g4 = v47;
            *(int32_t *)(v19 + 4) = v47;
            g9 = v40;
            g4 = function_2cb10(g4, v40, g10);
            goto lab_0x29090;
        }
        case 2: {
            int32_t v48 = g6; // 0x292e0
            int32_t v49; // 0x292f2
            if (*(char *)(v48 + 21) % 2 != 0) {
                // bb100
                g4 = function_29740();
                v49 = g6;
            } else {
                v49 = v48;
            }
            int32_t v50 = function_309b0(v49, 4); // 0x292f5
            g4 = v50;
            if ((char)v50 == 0) {
                // bb101
                g4 = function_29548();
            }
            // 0x29302
            v42 = g6;
            v43 = *(int32_t *)(v42 + 12);
            g9 = v43;
            g4 = v43;
            int32_t v51 = v43 - *(int32_t *)(v42 + 32); // 0x29311
            g4 = v51;
            v44 = *(int32_t *)v42 + v51;
            g4 = v44;
            goto lab_0x29264;
        }
        case 3: {
            int32_t v52 = g6; // 0x29280
            int32_t v53; // 0x29292
            if (*(char *)(v52 + 21) % 2 != 0) {
                // bb96
                g4 = function_29640();
                v53 = g6;
            } else {
                v53 = v52;
            }
            int32_t v54 = function_309b0(v53, 4); // 0x29295
            g4 = v54;
            if ((char)v54 == 0) {
                // bb97
                g4 = function_295d0();
            }
            int32_t v55 = g6; // 0x292a2
            int32_t v56 = *(int32_t *)(v55 + 12); // 0x292a2
            g4 = v56;
            int32_t v57 = *(int32_t *)v55; // 0x292a5
            g7 = v57;
            g9 = v56;
            int32_t v58 = v56 - *(int32_t *)(v55 + 32); // 0x292a9
            g9 = v58;
            int128_t v59 = __asm_movss(*(int32_t *)(v58 + v57)); // 0x292ac
            v6 = __asm_movss_1646(v59);
            int32_t v60 = g6; // 0x292b6
            int32_t v61; // 0x292c3
            int32_t v62; // 0x292ba
            if (*(char *)(v60 + 52) % 2 != 0) {
                // bb98
                v62 = function_29b8f();
                g4 = v62;
                v61 = g6;
            } else {
                // 0x292a2
                v61 = v60;
                v62 = g4;
            }
            int32_t v63 = v62 + 4; // 0x292c0
            g4 = v63;
            *(int32_t *)(v61 + 12) = v63;
            g9 = v19;
            *(int32_t *)(g9 + 12) = __asm_movss_1646(v59);
            goto lab_0x29090;
        }
        case 4: {
            int32_t v64 = g6; // 0x29228
            int32_t v65; // 0x2923a
            if (*(char *)(v64 + 21) % 2 != 0) {
                // bb92
                g4 = function_296d8();
                v65 = g6;
            } else {
                v65 = v64;
            }
            int32_t v66 = function_309b0(v65, 4); // 0x2923d
            g4 = v66;
            if ((char)v66 == 0) {
                // bb93
                g4 = function_29548();
            }
            int32_t v67 = g6; // 0x2924a
            int32_t v68; // 0x2925b
            if (*(char *)(v67 + 52) % 2 != 0) {
                // bb94
                g4 = function_29950();
                v68 = g6;
            } else {
                v68 = v67;
            }
            int32_t v69 = *(int32_t *)(v68 + 12); // 0x29254
            g9 = v69;
            int32_t v70 = *(int32_t *)v68; // 0x29257
            g7 = v70;
            g4 = v69;
            int32_t v71 = v69 - *(int32_t *)(v68 + 32); // 0x2925b
            g4 = v71;
            v42 = v68;
            v43 = v69;
            v44 = v71 + v70;
            goto lab_0x29264;
        }
        case 5: {
            int32_t v72 = g6; // 0x29110
            int32_t v73; // 0x29122
            if (*(char *)(v72 + 21) % 2 != 0) {
                // bb82
                g4 = function_297a0();
                v73 = g6;
            } else {
                v73 = v72;
            }
            int32_t v74 = function_309b0(v73, 2); // 0x29125
            g4 = v74;
            if ((char)v74 == 0) {
                // bb83
                g4 = function_296b0();
            }
            int32_t v75 = g6; // 0x29132
            int32_t v76; // 0x29151
            if (*(char *)(v75 + 52) % 2 != 0) {
                // bb84
                g4 = function_29900();
                v76 = g6;
            } else {
                v76 = v75;
            }
            int32_t * v77 = (int32_t *)(v76 + 12); // 0x2913c
            int32_t v78 = *v77; // 0x2913c
            g9 = v78;
            int32_t v79 = *(int32_t *)v76; // 0x2913f
            g7 = v79;
            g4 = v78;
            int32_t v80 = v78 - *(int32_t *)(v76 + 32); // 0x29143
            g4 = v80;
            int32_t v81 = (int32_t)*(int16_t *)(v80 + v79); // 0x29146
            g4 = v81;
            v6 = v81;
            int32_t v82 = v78 + 2; // 0x2914e
            g9 = v82;
            *v77 = v82;
            int32_t v83 = g4; // 0x29155
            g4 = 4 * v83 + 4;
            int32_t v84 = function_1bc60(); // 0x29165
            g4 = v84;
            g7 = v83;
            *(int32_t *)(v19 + 8) = v84;
            g9 = v83;
            int32_t v85; // 0x29187
            int32_t v86; // 0x29181
            if (v83 < 1) {
                // bb87
                v86 = function_29566();
                g4 = v86;
                v85 = g9;
            } else {
                // 0x2913c
                v86 = g4;
                v85 = v83;
            }
            // 0x29187
            v23 = v85 - 1;
            g9 = v23;
            g10 = 0;
            v26 = 0;
            v27 = v86;
            while (true) {
              lab_0x291e9:;
                int32_t v28 = g6; // 0x291e9
                g8 = 4 * v26 + v27;
                if (*(char *)(v28 + 21) % 2 == 0) {
                    int32_t v29 = function_309b0(v28, 2); // 0x291a3
                    g4 = v29;
                    if ((char)v29 == 0) {
                        goto lab_0x29218;
                    } else {
                        int32_t v30 = g6; // 0x291ac
                        int32_t v31; // 0x291cc
                        if (*(char *)(v30 + 52) % 2 != 0) {
                            // bb88
                            g4 = function_294f8();
                            v31 = g6;
                        } else {
                            v31 = v30;
                        }
                        int32_t * v32 = (int32_t *)(v31 + 12); // 0x291b6
                        int32_t v33 = *v32; // 0x291b6
                        g9 = v33;
                        int32_t v34 = *(int32_t *)v31; // 0x291b9
                        g7 = v34;
                        g4 = v33;
                        int32_t v35 = v33 - *(int32_t *)(v31 + 32); // 0x291bd
                        g4 = v35;
                        int32_t v36 = (int32_t)*(int16_t *)(v35 + v34); // 0x291c0
                        g4 = v36;
                        v17 = v36;
                        int32_t v37 = v33 + 2; // 0x291c8
                        g9 = v37;
                        *v32 = v37;
                        v18 = g4;
                        goto lab_0x291cf;
                    }
                } else {
                    // 0x291f2
                    g4 = &v6;
                    v6 = 128;
                    int32_t v38 = function_30bf0(v28, 0, &v6); // 0x2920b
                    g4 = v38;
                    if ((char)v38 != 0) {
                        // break -> 0x294b0
                        break;
                    }
                    goto lab_0x29218;
                }
            }
            int32_t v87 = g6; // 0x294b0
            int32_t v88 = *(int32_t *)(v87 + 12); // 0x294b0
            g9 = v88;
            int32_t result = &v17; // 0x294b3
            g4 = result;
            int32_t v89 = v88 - *(int32_t *)(v87 + 32); // 0x294b6
            g9 = v89;
            g9 = *(int32_t *)v87 + v89;
            return result;
        }
        case 6: {
            int32_t v90 = g6; // 0x28fa0
            int32_t v91; // 0x28fc0
            if (*(char *)(v90 + 21) % 2 == 0) {
                // bb71
                g4 = function_29838();
                v91 = g6;
            } else {
                v91 = v90;
            }
            int32_t v92 = &v17; // 0x28faa
            g4 = v92;
            v17 = 128;
            int32_t v93 = function_30bf0(v91, 0, &v17); // 0x28fc3
            g4 = v93;
            g9 = 0;
            int32_t v94; // 0x28fd8
            if ((char)v93 != 0) {
                // bb72
                g4 = function_29b28();
                v94 = g9;
            } else {
                v94 = 0;
            }
            // 0x28fd2
            g4 = v19;
            *(char *)(v19 + 12) = (char)v94;
            int32_t v95 = g6; // 0x28fdb
            int32_t v96; // 0x28ffb
            if (*(char *)(v95 + 21) % 2 == 0) {
                // bb73
                g4 = function_298a8();
                v96 = g6;
            } else {
                v96 = v95;
            }
            int32_t v97 = &v6; // 0x28fe5
            g9 = v97;
            v6 = 128;
            int32_t v98 = function_30bf0(v96, 0, &v6); // 0x28ffe
            g4 = v98;
            g9 = 0;
            int32_t v99; // 0x29013
            if ((char)v98 != 0) {
                // bb74
                g4 = function_29af0();
                v99 = g9;
            } else {
                v99 = 0;
            }
            // 0x2900d
            g4 = v19;
            *(char *)(v19 + 13) = (char)v99;
            int32_t v100 = g6; // 0x29016
            int32_t v101; // 0x29036
            if (*(char *)(v100 + 21) % 2 == 0) {
                // bb75
                g4 = function_29870();
                v101 = g6;
            } else {
                v101 = v100;
            }
            // 0x29020
            g9 = v92;
            v17 = 128;
            int32_t v102 = function_30bf0(v101, 0, &v17); // 0x29039
            g4 = v102;
            g9 = 0;
            int32_t v103; // 0x2904e
            if ((char)v102 != 0) {
                // bb76
                g4 = function_29ab8();
                v103 = g9;
            } else {
                v103 = 0;
            }
            // 0x29048
            g4 = v19;
            *(char *)(v19 + 14) = (char)v103;
            int32_t v104 = g6; // 0x29051
            int32_t v105; // 0x29071
            if (*(char *)(v104 + 21) % 2 == 0) {
                // bb77
                g4 = function_29800();
                v105 = g6;
            } else {
                v105 = v104;
            }
            // 0x2905b
            g9 = v97;
            v6 = 128;
            int32_t v106 = function_30bf0(v105, 0, &v6); // 0x29074
            g4 = v106;
            g9 = 0;
            int32_t v107; // 0x29089
            if ((char)v106 != 0) {
                // bb78
                g4 = function_29a80();
                v107 = g9;
            } else {
                v107 = 0;
            }
            // 0x29083
            g4 = v19;
            *(char *)(v19 + 15) = (char)v107;
            goto lab_0x29090;
        }
        case 7: {
            int32_t v108 = function_1bc60(); // 0x293c7
            g8 = v108;
            g4 = v19;
            *(int32_t *)(v19 + 4) = v108;
            int32_t v109 = g6; // 0x293d7
            int32_t v110; // 0x293e9
            if (*(char *)(v109 + 21) % 2 != 0) {
                // bb102
                g4 = function_295e0();
                v110 = g6;
            } else {
                v110 = v109;
            }
            int32_t v111 = function_309b0(v110, 8); // 0x293ec
            g4 = v111;
            if ((char)v111 == 0) {
                // bb103
                g4 = function_295b0();
            }
            int32_t v112 = g6; // 0x293f9
            int32_t * v113 = (int32_t *)(v112 + 12); // 0x29403
            int32_t v114 = *v113; // 0x29403
            g4 = v114;
            int32_t v115 = *(int32_t *)v112; // 0x29406
            g7 = v115;
            g9 = v114;
            int32_t v116 = v114 - *(int32_t *)(v112 + 32); // 0x2940a
            g9 = v116;
            int32_t v117 = v116 + v115; // 0x2940d
            g7 = v117;
            g9 = *(int32_t *)v117;
            g7 = *(int32_t *)(v117 + 4);
            *v113 = v114 + 8;
            int32_t v118 = g9; // 0x29420
            g4 = v118;
            g9 = g7;
            *(int32_t *)g8 = v118;
            *(int32_t *)(g8 + 4) = g9;
            goto lab_0x29090;
        }
        default: {
            goto lab_0x29090;
        }
    }
  lab_0x29090:;
    int32_t v119 = g6; // 0x29090
    int32_t v120; // 0x2947a
    if (*(char *)(v119 + 20) != 0) {
        // bb79
        g4 = function_298f0();
        v120 = g6;
    } else {
        v120 = v119;
    }
    // 0x2909a
    if (*(char *)(v120 + 21) % 2 == 0) {
        // 0x29470
        g10 = 0;
        int32_t v121 = function_309b0(v120, 1); // 0x2947d
        g4 = v121;
        if ((char)v121 != 0) {
            int32_t v122 = g6; // 0x2948a
            int32_t * v123 = (int32_t *)(v122 + 12); // 0x2948a
            int32_t v124 = *v123; // 0x2948a
            g4 = v124;
            int32_t v125 = *(int32_t *)v122; // 0x2948d
            g7 = v125;
            g9 = v124;
            int32_t v126 = v124 + 1; // 0x29491
            g4 = v126;
            int32_t v127 = v124 - *(int32_t *)(v122 + 32); // 0x29494
            g9 = v127;
            g9 = (int32_t)*(char *)(v127 + v125);
            *v123 = v126;
            g10 = g9 & (int32_t)&g862;
        }
    } else {
        // 0x290a4
        g4 = &v17;
        v17 = 128;
        g10 = 0;
        int32_t v128 = function_30bf0(v120, 0, &v17); // 0x290bf
        g4 = v128;
        if ((char)v128 != 0) {
            // bb80
            g4 = function_29578();
        }
    }
    int32_t v129 = function_26cf0(); // 0x290d3
    g4 = v129;
    g8 = v129;
    function_26330(v129);
    g4 = v19;
    *(int32_t *)(v19 + 20) = g8;
    v7 = g10;
    goto lab_0x290f3;
  lab_0x290f3:
    if (v7 == 11) {
        int32_t result2 = g4 & -256 | (int32_t)(*(char *)(g6 + 20) == 0); // 0x29100
        g4 = result2;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result2;
    }
    goto lab_0x28f40;
  lab_0x29264:
    // 0x29264
    g4 = *(int32_t *)v44;
    *(int32_t *)(v42 + 12) = v43 + 4;
    g9 = v19;
    *(int32_t *)(v19 + 12) = g4;
    goto lab_0x29090;
}

// Address range: 0x294d8 - 0x294f2
int32_t function_294d8(void) {
    // 0x294d8
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 - 28); // 0x294d8
    g7 = v2;
    int32_t v3 = *(int32_t *)(v1 - 1100); // 0x294db
    g9 = v3;
    int32_t v4 = v2 - v3; // 0x294e1
    g7 = v4;
    if (v4 != 0) {
        int32_t * v5 = (int32_t *)(g6 + 12); // 0x294e5
        *v5 = *v5 + v4;
    }
    // 0x294e8
    *(int16_t *)(v1 - 28) = (int16_t)g4;
    return g4;
}

// Address range: 0x294f8 - 0x29541
int32_t function_294f8(void) {
    int32_t v1 = g6; // 0x294f8
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x294f8
    g4 = v2;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x294fe
    g4 = v3;
    if (v3 == 0) {
        // bb
        g4 = function_298e0();
    }
    uint16_t v4 = *(int16_t *)(g5 - 28); // 0x29506
    g9 = v4;
    *(int16_t *)(g5 - 32) = v4;
    *(char *)(g5 - 32) = *(char *)(g4 + 1);
    int32_t v5 = g5 - 28; // 0x29515
    g9 = v5;
    *(char *)(g5 - 31) = *(char *)g4;
    int32_t v6 = g5 - 32; // 0x29529
    g4 = v6;
    g4 = function_2cb10(v5, v6, 2);
    g9 = *(int32_t *)(g6 + 12);
    int32_t result = (int32_t)*(int16_t *)(g5 - 28); // 0x29538
    g4 = result;
    return result;
}

// Address range: 0x29548 - 0x29556
int32_t function_29548(void) {
    // 0x29548
    *(int32_t *)(g5 - 40) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x29560 - 0x29566
int32_t function_29560(void) {
    // 0x29560
    g9 = *(int32_t *)(g5 - 1088);
    return g4;
}

// Address range: 0x29566 - 0x29575
int32_t function_29566(void) {
    int32_t v1 = 4 * g9; // 0x29566
    g9 = v1;
    *(int32_t *)(g4 + v1) = 0;
    return g4;
}

// Address range: 0x29578 - 0x29595
int32_t function_29578(void) {
    int32_t v1 = g6; // 0x29578
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29578
    g8 = v2;
    int32_t v3 = g5 - 32; // 0x2957b
    g9 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29581
    g8 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x29599 - 0x295ac
int32_t function_29599(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x5d61fab); // 0x29599
    int32_t v2 = *v1 - 1; // 0x29599
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x295a1
        *v3 = g9 + *v3;
    }
    int32_t result = g4; // 0x295a4
    g10 = result & (int32_t)&g862;
    return result;
}

// Address range: 0x295b0 - 0x295c7
int32_t function_295b0(void) {
    // 0x295b0
    *(int32_t *)(g5 - 48) = 0;
    g4 = 0;
    g9 = 0;
    *(int32_t *)(g5 - 44) = 0;
    return g4;
}

// Address range: 0x295d0 - 0x295de
int32_t function_295d0(void) {
    // 0x295d0
    g4 = 0;
    *(int32_t *)(g5 - 32) = 0;
    __asm_movd(0);
    return 0;
}

// Address range: 0x295e0 - 0x2961f
int32_t function_295e0(void) {
    int32_t v1 = g5 - 28; // 0x295e0
    g4 = v1;
    *(int32_t *)v1 = 128;
    int32_t v2 = function_30bf0(g6, 0, (int32_t *)g4); // 0x295f9
    g4 = v2;
    if ((char)v2 == 0) {
        // bb
        g4 = function_295b0();
    }
    int32_t v3 = g6; // 0x29602
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x29602
    g10 = v4;
    int32_t v5 = g5 - 32; // 0x29605
    g9 = v5;
    int32_t v6 = v4 - *(int32_t *)(v3 + 32) + v3; // 0x2960b
    g10 = v6;
    *(int32_t *)v5 = v6;
    return g4;
}

// Address range: 0x29623 - 0x2963d
int32_t function_29623(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x4589e04d); // 0x29623
    *v1 = *v1 - 1;
    char * v2 = (char *)(g7 - 0xed62bab); // 0x29629
    unsigned char v3 = *v2; // 0x29629
    *v2 = v3 / 2 | 128 * v3;
    int32_t * v4 = (int32_t *)(g6 + 12); // 0x29635
    *v4 = g7 + *v4;
    return g4;
}

// Address range: 0x29640 - 0x2967b
int32_t function_29640(void) {
    int32_t v1 = g5 - 28; // 0x29640
    g4 = v1;
    *(int32_t *)v1 = 128;
    int32_t v2 = function_30bf0(g6, 0, (int32_t *)g4); // 0x29659
    g4 = v2;
    if ((char)v2 == 0) {
        // bb
        g4 = function_295d0();
    }
    int32_t v3 = g6; // 0x29666
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x29666
    g8 = v4;
    int32_t v5 = g5 - 40; // 0x29669
    g10 = v5;
    int32_t v6 = v4 - *(int32_t *)(v3 + 32) + v3; // 0x2966f
    g8 = v6;
    *(int32_t *)v5 = v6;
    return g4;
}

// Address range: 0x2967f - 0x296aa
int32_t function_2967f(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x622227bb); // 0x2967f
    *v1 = *v1 - 1;
    g4 = -0xd000005;
    int32_t v2; // ebp
    int128_t v3 = __asm_movups(*(int128_t *)(v2 - 1096)); // 0x2968a
    *(int32_t *)(v2 - 32) = __asm_movss_1646(__asm_cvtpd2ps(v3));
    int32_t v4 = g4 - g8; // 0x2969a
    g4 = v4;
    int32_t * v5 = (int32_t *)(g6 + 12); // 0x296a2
    *v5 = *v5 + v4;
    return g4;
}

// Address range: 0x296b0 - 0x296d2
int32_t function_296b0(void) {
    // 0x296b0
    *(int16_t *)(g5 - 32) = 0;
    int32_t v1 = function_1bc60(); // 0x296bd
    g4 = v1;
    *(int32_t *)(*(int32_t *)(g5 - 1084) + 8) = v1;
    g9 = 0;
    return g4;
}

// Address range: 0x296d8 - 0x2971b
int32_t function_296d8(void) {
    int32_t v1 = g5 - 28; // 0x296d8
    g4 = v1;
    *(int32_t *)v1 = 128;
    int32_t v2 = function_30bf0(g6, 0, (int32_t *)g4); // 0x296f1
    g4 = v2;
    if ((char)v2 == 0) {
        // bb
        g4 = function_29548();
    }
    int32_t v3 = g6; // 0x296fe
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x296fe
    g10 = v4;
    int32_t v5 = g5 - 32; // 0x29701
    g9 = v5;
    int32_t v6 = v4 - *(int32_t *)(v3 + 32) + v3; // 0x29707
    g10 = v6;
    *(int32_t *)v5 = v6;
    return g4;
}

// Address range: 0x2971f - 0x29736
int32_t function_2971f(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x4589e055); // 0x2971f
    *v1 = *v1 - 1;
    int32_t * v2 = (int32_t *)(g6 + 12); // 0x2972e
    *v2 = g9 + *v2;
    return g4;
}

// Address range: 0x2972e - 0x2972f
int32_t function_2972e(void) {
    // 0x2972e
    return g4;
}

// Address range: 0x29740 - 0x29783
int32_t function_29740(void) {
    int32_t v1 = g5 - 32; // 0x29740
    g9 = v1;
    *(int32_t *)v1 = 128;
    int32_t v2 = function_30bf0(g6, 0, (int32_t *)g9); // 0x29759
    g4 = v2;
    if ((char)v2 == 0) {
        // bb
        g4 = function_29548();
    }
    int32_t v3 = g6; // 0x29766
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x29766
    g10 = v4;
    int32_t v5 = g5 - 28; // 0x29769
    g4 = v5;
    int32_t v6 = v4 - *(int32_t *)(v3 + 32) + v3; // 0x2976f
    g10 = v6;
    *(int32_t *)v5 = v6;
    return g4;
}

// Address range: 0x29787 - 0x29798
int32_t function_29787(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x4589e455); // 0x29787
    *v1 = *v1 - 1;
    int32_t result = function_2972e(); // 0x29796
    g4 = result;
    return result;
}

// Address range: 0x297a0 - 0x297e3
int32_t function_297a0(void) {
    int32_t v1 = g5 - 28; // 0x297a0
    g4 = v1;
    *(int32_t *)v1 = 128;
    int32_t v2 = function_30bf0(g6, 0, (int32_t *)g4); // 0x297b9
    g4 = v2;
    if ((char)v2 == 0) {
        // bb
        g4 = function_296b0();
    }
    int32_t v3 = g6; // 0x297c6
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x297c6
    g10 = v4;
    int32_t v5 = g5 - 32; // 0x297c9
    g9 = v5;
    int32_t v6 = v4 - *(int32_t *)(v3 + 32) + v3; // 0x297cf
    g10 = v6;
    *(int32_t *)v5 = v6;
    return g4;
}

// Address range: 0x297e7 - 0x297fb
int32_t function_297e7(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xdd61fab); // 0x297e7
    int32_t v2 = *v1 - 1; // 0x297e7
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x297ef
        *v3 = g9 + *v3;
    }
    // 0x297f2
    int32_t v4; // ebp
    *(int16_t *)(v4 - 32) = (int16_t)g4;
    return g4;
}

// Address range: 0x29800 - 0x29833
int32_t function_29800(void) {
    // 0x29800
    g4 = function_309b0(g6, 1);
    g9 = 0;
    int32_t v1 = g6; // 0x2981a
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x2981a
    int32_t v3 = *v2; // 0x2981a
    g7 = v1;
    g9 = v3;
    int32_t v4 = v3 + 1; // 0x29821
    g4 = v4;
    int32_t v5 = v3 - *(int32_t *)(v1 + 32); // 0x29824
    g9 = v5;
    g9 = (int32_t)*(char *)(v5 + v1);
    *v2 = v4;
    return g4;
}

// Address range: 0x29838 - 0x2986b
int32_t function_29838(void) {
    // 0x29838
    g4 = function_309b0(g6, 1);
    g9 = 0;
    int32_t v1 = g6; // 0x29852
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x29852
    int32_t v3 = *v2; // 0x29852
    g7 = v1;
    g9 = v3;
    int32_t v4 = v3 + 1; // 0x29859
    g4 = v4;
    int32_t v5 = v3 - *(int32_t *)(v1 + 32); // 0x2985c
    g9 = v5;
    g9 = (int32_t)*(char *)(v5 + v1);
    *v2 = v4;
    return g4;
}

// Address range: 0x29870 - 0x298a3
int32_t function_29870(void) {
    // 0x29870
    g4 = function_309b0(g6, 1);
    g9 = 0;
    int32_t v1 = g6; // 0x2988a
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x2988a
    int32_t v3 = *v2; // 0x2988a
    g7 = v1;
    g9 = v3;
    int32_t v4 = v3 + 1; // 0x29891
    g4 = v4;
    int32_t v5 = v3 - *(int32_t *)(v1 + 32); // 0x29894
    g9 = v5;
    g9 = (int32_t)*(char *)(v5 + v1);
    *v2 = v4;
    return g4;
}

// Address range: 0x298a8 - 0x298db
int32_t function_298a8(void) {
    // 0x298a8
    g4 = function_309b0(g6, 1);
    g9 = 0;
    int32_t v1 = g6; // 0x298c2
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x298c2
    int32_t v3 = *v2; // 0x298c2
    g7 = v1;
    g9 = v3;
    int32_t v4 = v3 + 1; // 0x298c9
    g4 = v4;
    int32_t v5 = v3 - *(int32_t *)(v1 + 32); // 0x298cc
    g9 = v5;
    g9 = (int32_t)*(char *)(v5 + v1);
    *v2 = v4;
    return g4;
}

// Address range: 0x298e0 - 0x298e8
int32_t function_298e0(void) {
    int32_t result = g5 - 28; // 0x298e0
    g4 = result;
    return result;
}

// Address range: 0x298f0 - 0x298f7
int32_t function_298f0(void) {
    // 0x298f0
    g4 = 0;
    return 0;
}

// Address range: 0x29900 - 0x29949
int32_t function_29900(void) {
    int32_t v1 = g6; // 0x29900
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29900
    g4 = v2;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29906
    g4 = v3;
    if (v3 == 0) {
        // bb
        g4 = function_29bd2();
    }
    uint16_t v4 = *(int16_t *)(g5 - 32); // 0x2990e
    g9 = v4;
    *(int16_t *)(g5 - 28) = v4;
    *(char *)(g5 - 28) = *(char *)(g4 + 1);
    int32_t v5 = g5 - 32; // 0x2991d
    g9 = v5;
    *(char *)(g5 - 27) = *(char *)g4;
    int32_t v6 = g5 - 28; // 0x29931
    g4 = v6;
    g4 = function_2cb10(v5, v6, 2);
    g9 = *(int32_t *)(g6 + 12);
    int32_t result = (int32_t)*(int16_t *)(g5 - 32); // 0x29940
    g4 = result;
    return result;
}

// Address range: 0x29950 - 0x29a7c
int32_t function_29950(void) {
    int32_t v1 = g6; // 0x29950
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29950
    g4 = v2;
    int32_t v3 = g5 - 40; // 0x29953
    g10 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29959
    g4 = v4 == 0 ? v3 : v4;
    int32_t v5 = *(int32_t *)v3; // 0x29961
    g9 = v5;
    *(int32_t *)(g5 - 28) = v5;
    unsigned char v6 = *(char *)(g4 + 3); // 0x29967
    g9 = v6;
    *(char *)(g5 - 28) = v6;
    unsigned char v7 = *(char *)(g4 + 2); // 0x2996e
    g9 = v7;
    *(char *)(g5 - 27) = v7;
    *(char *)(g5 - 26) = *(char *)(g4 + 1);
    int32_t v8 = g5 - 28; // 0x2997c
    g9 = v8;
    unsigned char v9 = *(char *)g4; // 0x2997f
    g4 = v9;
    *(char *)(g5 - 25) = v9;
    g4 = function_2cb10(g10, v8, 4);
    g9 = *(int32_t *)(g6 + 12);
    int32_t result = *(int32_t *)(g5 - 40); // 0x2999c
    g4 = result;
    return result;
}

// Address range: 0x29a80 - 0x29a9d
int32_t function_29a80(void) {
    int32_t v1 = g6; // 0x29a80
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29a80
    g10 = v2;
    int32_t v3 = g5 - 28; // 0x29a83
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29a89
    g10 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x29aa1 - 0x29ab3
int32_t function_29aa1(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xed61bb3); // 0x29aa1
    int32_t v2 = *v1 - 1; // 0x29aa1
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x29aa9
        *v3 = g7 + *v3;
    }
    int32_t result = g4; // 0x29aac
    g9 = result;
    return result;
}

// Address range: 0x29ab8 - 0x29ad5
int32_t function_29ab8(void) {
    int32_t v1 = g6; // 0x29ab8
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29ab8
    g10 = v2;
    int32_t v3 = g5 - 32; // 0x29abb
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29ac1
    g10 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x29ad9 - 0x29aeb
int32_t function_29ad9(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xed61fb3); // 0x29ad9
    int32_t v2 = *v1 - 1; // 0x29ad9
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x29ae1
        *v3 = g7 + *v3;
    }
    int32_t result = g4; // 0x29ae4
    g9 = result;
    return result;
}

// Address range: 0x29af0 - 0x29b0d
int32_t function_29af0(void) {
    int32_t v1 = g6; // 0x29af0
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29af0
    g10 = v2;
    int32_t v3 = g5 - 28; // 0x29af3
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29af9
    g10 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x29b11 - 0x29b23
int32_t function_29b11(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xed61bb3); // 0x29b11
    int32_t v2 = *v1 - 1; // 0x29b11
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x29b19
        *v3 = g7 + *v3;
    }
    int32_t result = g4; // 0x29b1c
    g9 = result;
    return result;
}

// Address range: 0x29b28 - 0x29b45
int32_t function_29b28(void) {
    int32_t v1 = g6; // 0x29b28
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29b28
    g10 = v2;
    int32_t v3 = g5 - 32; // 0x29b2b
    g9 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29b31
    g10 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x29b49 - 0x29b5b
int32_t function_29b49(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xed61fb3); // 0x29b49
    int32_t v2 = *v1 - 1; // 0x29b49
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x29b51
        *v3 = g7 + *v3;
    }
    int32_t result = g4; // 0x29b54
    g9 = result;
    return result;
}

// Address range: 0x29b5b - 0x29b78
int32_t function_29b5b(void) {
    int32_t v1 = g6; // 0x29b5b
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x29b5b
    g10 = v2;
    int32_t v3 = g5 - 28; // 0x29b5e
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x29b64
    g10 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x29b7c - 0x29b8f
int32_t function_29b7c(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xdd61bab); // 0x29b7c
    int32_t v2 = *v1 - 1; // 0x29b7c
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x29b84
        *v3 = g9 + *v3;
    }
    int32_t result = g4; // 0x29b87
    g10 = result & (int32_t)&g862;
    return result;
}

// Address range: 0x29b8f - 0x29bd2
int32_t function_29b8f(void) {
    unsigned char v1 = *(char *)(g5 - 29); // 0x29b8f
    g4 = v1;
    int32_t v2 = g5 - 32; // 0x29b93
    g9 = v2;
    *(char *)(g5 - 28) = v1;
    unsigned char v3 = *(char *)(g5 - 30); // 0x29ba4
    g4 = v3;
    *(char *)(g5 - 27) = v3;
    unsigned char v4 = *(char *)(g5 - 31); // 0x29bab
    g4 = v4;
    *(char *)(g5 - 26) = v4;
    *(char *)(g5 - 25) = *(char *)(g5 - 32);
    int32_t v5 = g5 - 28; // 0x29bb9
    g4 = v5;
    g4 = function_2cb10(v2, v5, 4);
    g4 = *(int32_t *)(g6 + 12);
    __asm_movss(*(int32_t *)(g5 - 32));
    return g4;
}

// Address range: 0x29bd2 - 0x29bda
int32_t function_29bd2(void) {
    int32_t result = g5 - 32; // 0x29bd2
    g4 = result;
    return result;
}

// Address range: 0x29bdb - 0x29bdc
int32_t function_29bdb(void) {
    // 0x29bdb
    return g4;
}

// Address range: 0x29bed - 0x29bee
int32_t function_29bed(void) {
    // 0x29bed
    return g4;
}

// Address range: 0x29c0e - 0x29c21
int32_t function_29c0e(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x8458910); // 0x29c0e
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    *(int32_t *)(v2 + 12) = g6;
    int32_t result = *(int32_t *)(g9 + 8); // 0x29c17
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x29c30 - 0x29c82
int32_t function_29c30(int32_t a1, int32_t a2, int32_t a3) {
    // 0x29c30
    g9 = a2;
    g8 = a1;
    int32_t v1 = *(int32_t *)a2; // 0x29c3f
    g4 = v1;
    int32_t v2; // 0x29c49
    int32_t v3; // 0x29c6a
    int32_t v4; // 0x29c43
    if (v1 == 0) {
        // bb
        v4 = function_29d07();
        g4 = v4;
        v3 = g8;
        v2 = g9;
    } else {
        v3 = a1;
        v4 = v1;
        v2 = a2;
    }
    // 0x29c49
    g6 = v2;
    g9 = v2 + 20;
    g10 = a3;
    g10 = *(int32_t *)(v2 + 12) + a3;
    int32_t v5 = function_27340(v3, v4, 0); // 0x29c6d
    g4 = v5;
    int32_t v6 = g6; // 0x29c72
    int32_t v7; // 0x29c78
    int32_t result; // 0x29c76
    if (*(int32_t *)(v6 + 8) >= 7) {
        // bb243
        result = function_29cf0();
        g4 = result;
        v7 = g6;
    } else {
        result = v5;
        v7 = v6;
    }
    // 0x29c78
    g9 = *(int32_t *)(v7 + 8);
    return result;
}

// Address range: 0x29cf0 - 0x29d07
int32_t function_29cf0(void) {
    int32_t v1 = g6 + 20; // 0x29cf0
    g6 = v1;
    int32_t v2 = *(int32_t *)(g5 - 48); // 0x29cf3
    g9 = v2;
    g4 = v1;
    int32_t v3 = v1 - *(int32_t *)(g5 + 12); // 0x29cf8
    g4 = v3;
    int32_t result = *(int32_t *)(v2 - 20 + v3); // 0x29cfb
    g4 = result;
    return result;
}

// Address range: 0x29d07 - 0x29d0f
int32_t function_29d07(void) {
    // 0x29d07
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    g5 = *(int32_t *)g5;
    return g4;
}

// Address range: 0x29d30 - 0x29d47
int32_t function_29d30(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x74f7dbbc); // 0x29d30
    *v1 = *v1 - 1;
    int32_t v2 = g7; // 0x29d36
    g7 = *(int32_t *)(v2 + 0x4489243c) + v2;
    g4 &= -252;
    int32_t v3 = function_27fc0((int32_t)&g870, (char *)&g870, (int32_t)&g870); // 0x29d3e
    g4 = v3;
    *(int32_t *)g10 = v3;
    int32_t result = function_29cf0(); // 0x29d45
    g4 = result;
    return result;
}

// Address range: 0x29d59 - 0x29d5f
int32_t function_29d59(void) {
    unsigned char v1 = *(char *)&g8; // 0x29d59
    *(char *)g8 = v1 / 16 | 16 * v1;
    return g4;
}

// Address range: 0x29d88 - 0x29d8d
int32_t function_29d88(void) {
    int32_t result = function_29cf0(); // 0x29d88
    g4 = result;
    return result;
}

// Address range: 0x29daa - 0x29dd1
int32_t function_29daa(void) {
    int32_t v1 = g5 - 56; // 0x29daa
    *(float64_t *)v1 = (float64_t)g868;
    int3_t v2; // fpu_stat_TOP
    g13 = v2 + 1;
    int128_t v3 = __asm_movsd_1649(*(int64_t *)v1); // 0x29dad
    int32_t v4 = __asm_movss_1646(__asm_cvtpd2ps(v3)); // 0x29db6
    int32_t v5 = g6; // 0x29dbc
    g4 = v5;
    float32_t v6 = function_27d60(g8, (char *)v5, v4); // 0x29dc5
    g4 = v6;
    *(float32_t *)g10 = v6;
    int32_t result = function_29cf0(); // 0x29dcc
    g4 = result;
    return result;
}

// Address range: 0x29e0c - 0x29e27
int32_t function_29e0c(void) {
    // 0x29e0c
    if (g4 == 2) {
        // bb
        g4 = function_29cf0();
    }
    // 0x29e15
    *(int32_t *)g10 = 0;
    *(int32_t *)(g10 + 4) = 0;
    int32_t result = function_29cf0(); // 0x29e22
    g4 = result;
    return result;
}

// Address range: 0x29e30 - 0x29ea9
int32_t function_29e30(void) {
    // 0x29e30
    if (g4 == 0) {
        // bb
        g4 = function_29f10();
    }
    int32_t v1 = g5 - 28; // 0x29e38
    g4 = v1;
    *(char *)v1 = 0;
    int32_t v2 = g4; // 0x29e3f
    int32_t v3 = g5; // 0x29e43
    g9 = v3 - 44;
    g4 = g6;
    *(char *)(v3 - 27) = 0;
    *(char *)(g5 - 26) = 0;
    *(char *)(g5 - 25) = 0;
    g4 = function_27b00(g9, g8, g4, v2);
    g9 = *(int32_t *)(g5 - 44);
    int128_t v4 = __asm_movss((int32_t)g133); // 0x29e67
    int32_t v5 = g9 & (int32_t)&g862; // 0x29e72
    g4 = v5;
    int128_t v6 = __asm_cvtsi2ss(v5); // 0x29e75
    uint32_t v7 = g9; // 0x29e79
    int32_t v8 = v7 / 256 & (int32_t)&g862; // 0x29e79
    g4 = v8;
    int32_t v9 = v7 / 0x10000 & (int32_t)&g862; // 0x29e7f
    g9 = v9;
    int128_t v10 = __asm_cvtsi2ss(v8); // 0x29e82
    int128_t v11 = __asm_cvtsi2ss(v9); // 0x29e86
    int128_t v12 = __asm_mulss(v6, v4); // 0x29e8a
    int128_t v13 = __asm_mulss(v10, v4); // 0x29e8e
    int128_t v14 = __asm_mulss(v11, v4); // 0x29e92
    *(int32_t *)g10 = __asm_movss_1646(v12);
    *(int32_t *)(g10 + 4) = __asm_movss_1646(v13);
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v14);
    int32_t result = function_29cf0(); // 0x29ea4
    g4 = result;
    return result;
}

// Address range: 0x29eeb - 0x29f0d
int32_t function_29eeb(void) {
    // 0x29eeb
    if (g4 == 3) {
        // bb
        g4 = function_29cf0();
    }
    // 0x29ef4
    *(int32_t *)g10 = 0;
    *(int32_t *)(g10 + 4) = 0;
    *(int32_t *)(g10 + 8) = 0;
    int32_t result = function_29cf0(); // 0x29f08
    g4 = result;
    return result;
}

// Address range: 0x29f10 - 0x29f41
int32_t function_29f10(void) {
    int32_t result = *(int32_t *)(g6 + 4); // 0x29f10
    g4 = result;
    int128_t v1 = __asm_xorps(g878, g878); // 0x29f13
    __asm_movaps(v1);
    __asm_movaps(v1);
    g9 = g10 + 4;
    return result;
}

// Address range: 0x29f45 - 0x29f69
int32_t function_29f45(void) {
    int128_t v1 = __asm_movups(g133); // 0x29f47
    int128_t v2 = __asm_movss(g10); // 0x29f4e
    int128_t v3 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x29f52
    __asm_mulss(v2, v1);
    __asm_mulss(v3, v1);
    __asm_mulss_1654(v1, *(int32_t *)(g10 + 8));
    return g4;
}

// Address range: 0x29f70 - 0x2a084
int32_t function_29f70(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x29f70
    int32_t v2 = v1; // bp-4
    g4 = 0;
    g5 = &v2;
    int32_t v3 = g8; // 0x29f75
    int32_t v4 = g10; // 0x29f76
    int32_t v5 = g6; // 0x29f77
    g10 = a2;
    if (a2 == 0) {
        // 0x2a079
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v1;
        return 0;
    }
    // 0x29f89
    g6 = a1;
    if (a1 == 0) {
        // 0x2a079
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v1;
        return 0;
    }
    // 0x29f94
    g9 = a1;
    int32_t v6 = *(int32_t *)(a1 + 24); // 0x29f97
    g6 = v6;
    if (v6 == 0) {
        // 0x2a079
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v1;
        return 0;
    }
    // 0x29fa2
    g10 = a2;
    int32_t v7; // bp-156
    int32_t v8 = &v7; // 0x29fe4
    while (true) {
        // 0x29fa8
        g4 = function_29f70(v6, a2);
        int32_t v9 = function_25190(g6); // 0x29fb7
        g4 = v9;
        int32_t v10 = function_2d690(v9, g10); // 0x29fc3
        g4 = v10;
        if (v10 != 0) {
            int32_t v11 = function_25190(g6); // 0x29fd3
            g4 = v8;
            g4 = function_2d970(&v7, v11, 128);
            g9 = v8;
            int32_t v12 = function_2d7b0(&v7, g10); // 0x29fff
            g4 = v12;
            g8 = v12;
            if (v12 != 0) {
                int32_t v13 = function_2cc30(v12, (char *)g10); // 0x2a011
                g4 = v13;
                if (v13 == 0) {
                    // 0x2a01a
                    g9 = a1;
                    *(char *)g8 = 0;
                    g4 = v8;
                    int32_t v14 = function_27340(g9, v8, 0); // 0x2a035
                    g4 = v14;
                    g8 = v14;
                    if (v14 != 0) {
                        // 0x2a040
                        g9 = a1;
                        g4 = function_25fe0(a1, v14);
                        g4 = function_28600(g8);
                    }
                    // 0x2a057
                    g4 = v8;
                    g4 = function_262d0(g6);
                }
            }
        }
        int32_t v15 = *(int32_t *)(g6 + 20); // 0x2a069
        g6 = v15;
        if (v15 == 0) {
            // break -> 0x2a074
            break;
        }
        // 0x2a069
        v6 = v15;
        a2 = g10;
    }
    // 0x2a074
    g4 = 1;
    // 0x2a079
    g6 = v5;
    g10 = v4;
    g8 = v3;
    g5 = v2;
    return 1;
}

// Address range: 0x2a090 - 0x2a4f1
int32_t function_2a090(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x2a093
    int32_t v2 = g10; // 0x2a094
    int32_t v3 = g6; // 0x2a095
    g8 = a2;
    g6 = a1;
    g4 = a3;
    if (a2 == 0) {
        // 0x2a0d0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    if (a1 == 0) {
        // 0x2a0d0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    if (a3 == 1) {
        int32_t v4 = *(int32_t *)(a2 + 24); // 0x2a390
        g4 = v4;
        if (v4 == 0) {
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        // 0x2a39b
        g10 = v4;
        int32_t v5; // 0x2a3b032
        int32_t v6; // 0x2a40b
        if (*(char *)(v4 + 16) != 0) {
            int32_t v7 = v4; // 0x2a470
            while (true) {
                int32_t v8 = *(int32_t *)(v7 + 20); // 0x2a470
                g10 = v8;
                if (v8 == 0) {
                    v6 = v4;
                    // break -> 0x2a407
                    break;
                }
                // 0x2a477
                if (*(char *)(v8 + 16) == 0) {
                    v5 = v8;
                    goto lab_0x2a3b0;
                }
                v7 = v8;
            }
        } else {
            v5 = v4;
          lab_0x2a3b0:;
            int32_t * v9 = (int32_t *)(a1 + 24); // 0x2a4c8
            int32_t v10 = v5; // 0x2a3b0
            while (true) {
                int32_t v11 = function_25190(v10); // 0x2a3b3
                g4 = v11;
                int32_t v12 = function_27340(a1, v11, 0); // 0x2a3c7
                g4 = v12;
                int32_t v13 = g10; // 0x2a4c0
                if (v12 == 0) {
                    int32_t v14 = function_26d60(v13); // 0x2a4c3
                    g4 = v14;
                    int32_t v15 = *v9; // 0x2a4c8
                    g7 = v15;
                    if (v15 != 0) {
                        int32_t * v16 = (int32_t *)(v15 + 20); // 0x2a4da95
                        int32_t v17 = *v16; // 0x2a4da96
                        g9 = v17;
                        int32_t * v18; // 0x2a4da
                        if (v17 != 0) {
                            g7 = v17;
                            v18 = (int32_t *)(v17 + 20);
                            int32_t v19 = *v18; // 0x2a4da
                            g9 = v19;
                            while (v19 != 0) {
                                // 0x2a4d8
                                v17 = v19;
                                g7 = v17;
                                v18 = (int32_t *)(v17 + 20);
                                v19 = *v18;
                                g9 = v19;
                            }
                        } else {
                            v18 = v16;
                        }
                        // 0x2a4e1
                        *v18 = v14;
                    } else {
                        // 0x2a4e9
                        *v9 = v14;
                    }
                } else {
                    // 0x2a3d4
                    g4 = function_2a090(v12, v13, 1);
                }
                int32_t v20 = *(int32_t *)(g10 + 20); // 0x2a3e8
                g10 = v20;
                if (v20 == 0) {
                    // break -> 0x2a3fc
                    break;
                }
                while (true) {
                    // 0x2a3ef
                    if (*(char *)(v20 + 16) == 0) {
                        v10 = v20;
                        // break -> 0x2a3b0
                        break;
                    }
                    int32_t v21 = *(int32_t *)(v20 + 20); // 0x2a3f5
                    g10 = v21;
                    if (v21 == 0) {
                        // break (via goto) -> 0x2a3fc
                        goto lab_0x2a3fc;
                    }
                    v20 = v21;
                }
            }
          lab_0x2a3fc:;
            int32_t v22 = *(int32_t *)(g8 + 24); // 0x2a3fc
            g4 = v22;
            if (v22 == 0) {
                // 0x2a0d0
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return g4;
            }
            v6 = v22;
        }
        // 0x2a407
        g10 = v6;
        int32_t v23; // 0x2a41038
        if (*(char *)(v6 + 16) == 0) {
            int32_t v24 = v6; // 0x2a488
            while (true) {
                int32_t v25 = *(int32_t *)(v24 + 20); // 0x2a488
                g10 = v25;
                if (v25 == 0) {
                    // break -> 0x2a0d0
                    break;
                }
                // 0x2a493
                if (*(char *)(v25 + 16) != 0) {
                    v23 = v25;
                    goto lab_0x2a410;
                }
                v24 = v25;
            }
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        v23 = v6;
      lab_0x2a410:;
        int32_t * v26 = (int32_t *)(a1 + 24); // 0x2a44e
        int32_t v27 = v23; // 0x2a410
        while (true) {
          lab_0x2a410_2:;
            int32_t v28 = function_25190(v27); // 0x2a413
            g4 = v28;
            int32_t v29 = function_27340(a1, v28, 0); // 0x2a427
            g4 = v29;
            g8 = v29;
            if (v29 != 0) {
                // 0x2a432
                g4 = function_25fe0(a1, v29);
                g4 = function_28600(g8);
            }
            int32_t v30 = function_26d60(g10); // 0x2a449
            g4 = v30;
            int32_t v31 = *v26; // 0x2a44e
            g7 = v31;
            if (v31 != 0) {
                int32_t * v32 = (int32_t *)(v31 + 20); // 0x2a46287
                int32_t v33 = *v32; // 0x2a46288
                g9 = v33;
                int32_t * v34; // 0x2a462
                if (v33 != 0) {
                    g7 = v33;
                    v34 = (int32_t *)(v33 + 20);
                    int32_t v35 = *v34; // 0x2a462
                    g9 = v35;
                    while (v35 != 0) {
                        // 0x2a460
                        v33 = v35;
                        g7 = v33;
                        v34 = (int32_t *)(v33 + 20);
                        v35 = *v34;
                        g9 = v35;
                    }
                } else {
                    v34 = v32;
                }
                // 0x2a469
                *v34 = v30;
            } else {
                // 0x2a49f
                *v26 = v30;
            }
            int32_t v36 = g10; // 0x2a4a2
            while (true) {
              lab_0x2a4a2:;
                int32_t v37 = *(int32_t *)(v36 + 20); // 0x2a4a2
                g10 = v37;
                if (v37 == 0) {
                    // break (via goto) -> 0x2a0d0
                    goto lab_0x2a0d0_3;
                }
                // 0x2a4ad
                if (*(char *)(v37 + 16) != 0) {
                    v27 = v37;
                    goto lab_0x2a410_2;
                } else {
                    v36 = v37;
                    goto lab_0x2a4a2;
                }
            }
        }
        // 0x2a0d0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        int32_t result = g4; // 0x2a0d7
        return result;
    }
    int32_t v38; // 0x2a242
    if (a3 > 1) {
        if (a3 == 2) {
            int32_t v39 = *(int32_t *)(a2 + 24); // 0x2a0e0
            g4 = v39;
            if (v39 == 0) {
                // 0x2a0d0
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return g4;
            }
            // 0x2a0e7
            g10 = v39;
            int32_t v40; // 0x2a0f8
            int32_t v41; // 0x2a14b
            if (*(char *)(v39 + 16) != 0) {
                int32_t v42 = v39; // 0x2a1a8
                while (true) {
                    int32_t v43 = *(int32_t *)(v42 + 20); // 0x2a1a8
                    g10 = v43;
                    if (v43 == 0) {
                        v41 = v39;
                        // break -> 0x2a147
                        break;
                    }
                    // 0x2a1af
                    if (*(char *)(v43 + 16) == 0) {
                        v40 = v43;
                        goto lab_0x2a0f8;
                    }
                    v42 = v43;
                }
            } else {
                v40 = v39;
                while (true) {
                  lab_0x2a0f8:;
                    int32_t v44 = function_25190(v40); // 0x2a0fb
                    g4 = v44;
                    int32_t v45 = function_27340(a1, v44, 0); // 0x2a10f
                    g4 = v45;
                    if (v45 != 0) {
                        // 0x2a118
                        g4 = function_2a090(v45, g10, 2);
                    }
                    int32_t v46 = *(int32_t *)(g10 + 20); // 0x2a12c
                    g10 = v46;
                    if (v46 == 0) {
                        // break -> 0x2a140
                        break;
                    }
                    while (true) {
                        // 0x2a133
                        if (*(char *)(v46 + 16) == 0) {
                            v40 = v46;
                            // break -> 0x2a0f8
                            break;
                        }
                        int32_t v47 = *(int32_t *)(v46 + 20); // 0x2a139
                        g10 = v47;
                        if (v47 == 0) {
                            // break (via goto) -> 0x2a140
                            goto lab_0x2a140;
                        }
                        v46 = v47;
                    }
                }
              lab_0x2a140:;
                int32_t v48 = *(int32_t *)(g8 + 24); // 0x2a140
                g4 = v48;
                if (v48 == 0) {
                    // 0x2a0d0
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return g4;
                }
                v41 = v48;
            }
            // 0x2a147
            g10 = v41;
            int32_t v49; // 0x2a158
            if (*(char *)(v41 + 16) == 0) {
                int32_t v50 = v41; // 0x2a350
                while (true) {
                    int32_t v51 = *(int32_t *)(v50 + 20); // 0x2a350
                    g10 = v51;
                    if (v51 == 0) {
                        // break -> 0x2a0d0
                        break;
                    }
                    // 0x2a35b
                    if (*(char *)(v51 + 16) != 0) {
                        v49 = v51;
                        goto lab_0x2a158;
                    }
                    v50 = v51;
                }
            } else {
                v49 = v41;
                while (true) {
                  lab_0x2a158:;
                    int32_t v52 = function_25190(v49); // 0x2a15b
                    g4 = v52;
                    int32_t v53 = function_27340(a1, v52, 0); // 0x2a16f
                    g4 = v53;
                    g8 = v53;
                    if (v53 != 0) {
                        // 0x2a17a
                        g4 = function_25fe0(a1, v53);
                        g4 = function_28600(g8);
                    }
                    int32_t v54 = g10; // 0x2a18e
                    while (true) {
                      lab_0x2a18e:;
                        int32_t v55 = *(int32_t *)(v54 + 20); // 0x2a18e
                        g10 = v55;
                        if (v55 == 0) {
                            // break (via goto) -> 0x2a0d0
                            goto lab_0x2a0d0_3;
                        }
                        // 0x2a199
                        if (*(char *)(v55 + 16) != 0) {
                            v49 = v55;
                            goto lab_0x2a158;
                        } else {
                            v54 = v55;
                            goto lab_0x2a18e;
                        }
                    }
                }
            }
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        if (a3 != 3) {
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        v38 = a2;
    } else {
        if (a3 != 0) {
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        int32_t v56 = function_27340(a2, (int32_t)"update", 0); // 0x2a1db
        g4 = v56;
        g4 = function_2a090(a1, v56, 1);
        int32_t v57 = function_27340(g8, (int32_t)"delete", 0); // 0x2a207
        g4 = v57;
        g4 = function_2a090(a1, v57, 2);
        int32_t v58 = function_27340(g8, (int32_t)"borrow", 0); // 0x2a233
        g4 = v58;
        g8 = v58;
        if (v58 == 0) {
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        v38 = v58;
    }
    int32_t v59 = *(int32_t *)(v38 + 24); // 0x2a242
    g4 = v59;
    if (v59 == 0) {
        // 0x2a0d0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x2a24d
    g10 = v59;
    int32_t v60; // 0x2a260
    int32_t v61; // 0x2a2b7
    if (*(char *)(v59 + 16) != 0) {
        int32_t v62 = v59; // 0x2a338
        while (true) {
            int32_t v63 = *(int32_t *)(v62 + 20); // 0x2a338
            g10 = v63;
            if (v63 == 0) {
                v61 = v59;
                // break -> 0x2a2b3
                break;
            }
            // 0x2a343
            if (*(char *)(v63 + 16) == 0) {
                v60 = v63;
                goto lab_0x2a260;
            }
            v62 = v63;
        }
    } else {
        v60 = v59;
        while (true) {
          lab_0x2a260:;
            int32_t v64 = function_25190(v60); // 0x2a263
            g4 = v64;
            int32_t v65 = function_27340(a1, v64, 0); // 0x2a277
            g4 = v65;
            if (v65 != 0) {
                // 0x2a280
                g4 = function_2a090(v65, g10, 3);
            }
            int32_t v66 = *(int32_t *)(g10 + 20); // 0x2a294
            g10 = v66;
            if (v66 == 0) {
                // break -> 0x2a2a8
                break;
            }
            while (true) {
                // 0x2a29b
                if (*(char *)(v66 + 16) == 0) {
                    v60 = v66;
                    // break -> 0x2a260
                    break;
                }
                int32_t v67 = *(int32_t *)(v66 + 20); // 0x2a2a1
                g10 = v67;
                if (v67 == 0) {
                    // break (via goto) -> 0x2a2a8
                    goto lab_0x2a2a8;
                }
                v66 = v67;
            }
        }
      lab_0x2a2a8:;
        int32_t v68 = *(int32_t *)(g8 + 24); // 0x2a2a8
        g4 = v68;
        if (v68 == 0) {
            // 0x2a0d0
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        v61 = v68;
    }
    // 0x2a2b3
    g10 = v61;
    int32_t v69; // 0x2a2c018
    if (*(char *)(v61 + 16) == 0) {
        int32_t v70 = v61; // 0x2a370
        while (true) {
            int32_t v71 = *(int32_t *)(v70 + 20); // 0x2a370
            g10 = v71;
            if (v71 == 0) {
                // break -> 0x2a0d0
                break;
            }
            // 0x2a37b
            if (*(char *)(v71 + 16) != 0) {
                v69 = v71;
                goto lab_0x2a2c0;
            }
            v70 = v71;
        }
        // 0x2a0d0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    v69 = v61;
  lab_0x2a2c0:;
    int32_t * v72 = (int32_t *)(a1 + 24); // 0x2a2fe
    int32_t v73 = v69; // 0x2a2c0
    while (true) {
      lab_0x2a2c0_2:;
        int32_t v74 = function_25190(v73); // 0x2a2c3
        g4 = v74;
        int32_t v75 = function_27340(a1, v74, 0); // 0x2a2d7
        g4 = v75;
        g8 = v75;
        if (v75 != 0) {
            // 0x2a2e2
            g4 = function_25fe0(a1, v75);
            g4 = function_28600(g8);
            int32_t v76 = function_26d60(g10); // 0x2a2f9
            g4 = v76;
            int32_t v77 = *v72; // 0x2a2fe
            g7 = v77;
            if (v77 != 0) {
                int32_t * v78 = (int32_t *)(v77 + 20); // 0x2a312104
                int32_t v79 = *v78; // 0x2a312105
                g9 = v79;
                int32_t * v80; // 0x2a312
                if (v79 != 0) {
                    g7 = v79;
                    v80 = (int32_t *)(v79 + 20);
                    int32_t v81 = *v80; // 0x2a312
                    g9 = v81;
                    while (v81 != 0) {
                        // 0x2a310
                        v79 = v81;
                        g7 = v79;
                        v80 = (int32_t *)(v79 + 20);
                        v81 = *v80;
                        g9 = v81;
                    }
                } else {
                    v80 = v78;
                }
                // 0x2a319
                *v80 = v76;
            } else {
                // 0x2a388
                *v72 = v76;
            }
        }
        int32_t v82 = g10; // 0x2a320
        while (true) {
          lab_0x2a320:;
            int32_t v83 = *(int32_t *)(v82 + 20); // 0x2a320
            g10 = v83;
            if (v83 == 0) {
                // break (via goto) -> 0x2a0d0
                goto lab_0x2a0d0_3;
            }
            // 0x2a32b
            if (*(char *)(v83 + 16) != 0) {
                v73 = v83;
                goto lab_0x2a2c0_2;
            } else {
                v82 = v83;
                goto lab_0x2a320;
            }
        }
    }
  lab_0x2a0d0_3:
    // 0x2a0d0
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x2a500 - 0x2a656
int32_t function_2a500(char * a1, char * a2) {
    // 0x2a500
    g4 = (int32_t)&g129;
    g10 = a1 == NULL ? (int32_t)&g129 : (int32_t)a1;
    g6 = a2 == NULL ? (int32_t)&g129 : (int32_t)a2;
    int32_t v1 = function_26cf0(); // 0x2a528
    g4 = v1;
    g4 = function_26330(v1);
    g8 = v1;
    if (v1 == 0) {
        int32_t v2 = function_2a69c((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2a547
        g4 = v2;
    }
    // 0x2a54d
    char v3; // bp-544
    int32_t v4 = &v3; // 0x2a54d
    g7 = 64;
    char v5; // bp-288
    int32_t v6 = &v5; // 0x2a55e
    g9 = v6;
    g4 = 0;
    g8 = v4;
    int32_t v7; // bp-32
    int32_t v8 = &v7; // 0x2a572
    g10 = v8;
    __asm_rep_stosd_memset(&v3, 0, 64);
    g8 = v6;
    g7 = 64;
    __asm_rep_stosd_memset(&v5, 0, 64);
    g7 = 0;
    g8 = (int32_t)"GNU";
    g10 = v8;
    g9 = v8;
    g4 = g6;
    int32_t v9 = function_24f60(); // 0x2a58c
    g4 = v9;
    unsigned char v10 = *(char *)v9; // 0x2a591
    int32_t v11 = v10; // 0x2a591
    g9 = v11;
    int32_t v12; // 0x2a59c
    int32_t v13; // 0x2a596
    if (v10 == 0) {
        // bb44
        v13 = function_2a690();
        g4 = v13;
        v12 = g9;
    } else {
        v13 = v9;
        v12 = v11;
    }
    int32_t v14; // 0x2a59f
    if ((char)v12 == 125) {
        // bb46
        v14 = function_2a770();
        g4 = v14;
    } else {
        v14 = v13;
    }
    // 0x2a5a5
    g4 = v4;
    uint32_t v15 = v7 - v14 + 1; // 0x2a5b4
    int32_t v16 = v15 > (int32_t)"GNU" ? g8 : v15; // 0x2a5c0
    g9 = v16;
    g4 = function_2d970((int32_t *)&v3, v14, v16);
    int32_t v17 = v7; // 0x2a5d3
    g6 = v17;
    int32_t v18; // 0x2a5de
    if (v3 == 123) {
        // bb48
        g4 = function_2a700();
        v18 = g6;
    } else {
        v18 = v17;
    }
    // 0x2a5dc
    g9 = v8;
    g4 = v18;
    int32_t v19 = function_24f60(); // 0x2a5e0
    g4 = v19;
    int32_t v20; // 0x2a5e8
    if (*(char *)v19 == 125) {
        // bb50
        v20 = function_2a780();
        g4 = v20;
    } else {
        v20 = v19;
    }
    uint32_t v21 = v7 - v20 + 1; // 0x2a5f7
    int32_t v22 = v21 > (int32_t)"GNU" ? g8 : v21; // 0x2a600
    g9 = v6;
    g4 = function_2d970((int32_t *)&v5, v20, v22);
    g6 = v7;
    if (v5 == 123) {
        // bb52
        g4 = function_2a6b0();
    }
    // 0x2a625
    g4 = v6;
    int32_t v23 = function_2cfa0(v6, "#int#"); // 0x2a636
    g4 = v23;
    int32_t result; // 0x2a63d
    if (v23 == 0) {
        // bb53
        result = function_2a718();
        g4 = result;
    } else {
        result = v23;
    }
    // 0x2a643
    return result;
}

// Address range: 0x2a690 - 0x2a69c
int32_t function_2a690(void) {
    int32_t v1 = g5; // 0x2a690
    int32_t v2 = *(int32_t *)(v1 + 16); // 0x2a690
    g10 = v2;
    int32_t v3; // 0x2a697
    if (v2 == 0) {
        int32_t v4 = function_2a69c((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2a695
        g4 = v4;
        v3 = g5;
    } else {
        v3 = v1;
    }
    int32_t v5 = *(int32_t *)(v3 + 16); // 0x2a697
    g4 = v5;
    *(int32_t *)v5 = g6;
    return g4;
}

// Address range: 0x2a69c - 0x2a6ad
int32_t function_2a69c(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = *(int32_t *)(g5 - 564); // 0x2a69c
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x2a6b0 - 0x2a6f8
int32_t function_2a6b0(void) {
    int32_t v1 = g5 - 540; // 0x2a6b0
    g4 = v1;
    int32_t result = function_2a500((char *)v1, (char *)g6); // 0x2a6c1
    g4 = result;
    if (result == 0) {
        // 0x2a6f0
        g6 = *(int32_t *)(g5 - 28);
        return result;
    }
    int32_t v2 = *(int32_t *)(g5 - 564); // 0x2a6ca
    g9 = v2;
    int32_t v3 = *(int32_t *)(v2 + 24); // 0x2a6d0
    g7 = v3;
    if (v3 == 0) {
        int32_t result2 = function_2a707(); // 0x2a6d7
        g4 = result2;
        return result2;
    }
    int32_t * v4 = (int32_t *)(v3 + 20); // 0x2a6e211
    int32_t v5 = *v4; // 0x2a6e212
    g9 = v5;
    int32_t * v6; // 0x2a6e2
    if (v5 != 0) {
        g7 = v5;
        v6 = (int32_t *)(v5 + 20);
        int32_t v7 = *v6; // 0x2a6e2
        g9 = v7;
        while (v7 != 0) {
            // 0x2a6e0
            v5 = v7;
            g7 = v5;
            v6 = (int32_t *)(v5 + 20);
            v7 = *v6;
            g9 = v7;
        }
    } else {
        v6 = v4;
    }
    // 0x2a6e9
    *v6 = result;
    // 0x2a6f0
    g6 = *(int32_t *)(g5 - 28);
    return result;
}

// Address range: 0x2a700 - 0x2a707
int32_t function_2a700(void) {
    // 0x2a700
    g4 = (int32_t)&g129;
    return (int32_t)&g129;
}

// Address range: 0x2a707 - 0x2a712
int32_t function_2a707(void) {
    // 0x2a707
    *(int32_t *)(g9 + 24) = g4;
    g6 = *(int32_t *)(g5 - 28);
    return g4;
}

// Address range: 0x2a718 - 0x2a76a
int32_t function_2a718(void) {
    int32_t v1 = g5 - 284; // 0x2a718
    g9 = v1;
    int32_t v2 = function_2cc30(v1, "#empty#"); // 0x2a729
    g4 = v2;
    int32_t v3 = g5;
    char * v4;
    if (v2 != 0) {
        int32_t v5 = v3 - 284; // 0x2a732
        g9 = v5;
        v4 = (char *)v5;
    } else {
        v4 = (char *)&g129;
    }
    int32_t v6 = v3 - 540; // 0x2a73c
    g4 = v6;
    int32_t v7 = *(int32_t *)(v3 - 564); // 0x2a746
    g4 = v7;
    int32_t result = function_27920(v7, (char *)v6, v4); // 0x2a74f
    g4 = result;
    return result;
}

// Address range: 0x2a770 - 0x2a778
int32_t function_2a770(void) {
    // 0x2a770
    g6 = g4 + 1;
    int32_t result = function_2a690(); // 0x2a773
    g4 = result;
    return result;
}

// Address range: 0x2a780 - 0x2a7a8
int32_t function_2a780(void) {
    // 0x2a780
    g6 = g4 + 1;
    int32_t v1 = g5; // 0x2a783
    int32_t v2 = *(int32_t *)(v1 - 564); // 0x2a783
    g4 = v2;
    int32_t v3 = v1 - 540; // 0x2a791
    g9 = v3;
    g4 = function_27920(v2, (char *)v3, (char *)&g129);
    int32_t result = function_2a690(); // 0x2a7a3
    g4 = result;
    return result;
}

// Address range: 0x2a7a8 - 0x2a8d3
int32_t function_2a7a8(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2a7a8
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 564);
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g8; // 0x2a7c3
    int32_t v3 = g10; // 0x2a7c4
    int32_t v4 = g6; // 0x2a7c5
    g10 = a2;
    g9 = a1;
    g8 = a3;
    int32_t * v5 = (int32_t *)a2; // 0x2a7d2
    int32_t v6 = *v5; // 0x2a7d2
    g4 = v6;
    int32_t v7; // 0x2a83110
    int32_t v8; // 0x2a84d
    int32_t * v9; // 0x2a7f6
    if ((char)v6 == 0) {
        goto lab_0x2a8b0;
    } else {
        // 0x2a7ec
        g4 = a1;
        if (a1 == 0) {
            goto lab_0x2a860_2;
        } else {
            // 0x2a7f3
            g9 = a1;
            v9 = (int32_t *)(a1 + 24);
            int32_t v10 = *v9; // 0x2a7f6
            g4 = v10;
            g6 = v10;
            if (v10 == 0) {
                v8 = 0;
                goto lab_0x2a84b;
            } else {
                // 0x2a7ff
                if (*(char *)(v10 + 16) == 0) {
                    int32_t v11 = v10; // 0x2a8c0
                    while (true) {
                        int32_t v12 = *(int32_t *)(v11 + 20); // 0x2a8c0
                        g6 = v12;
                        if (v12 == 0) {
                            v8 = v10;
                            // break -> 0x2a84b
                            break;
                        }
                        // 0x2a8c7
                        if (*(char *)(v12 + 16) != 0) {
                            v7 = v12;
                            goto lab_0x2a810;
                        }
                        v11 = v12;
                    }
                    goto lab_0x2a84b;
                } else {
                    v7 = v10;
                    goto lab_0x2a810;
                }
            }
        }
    }
  lab_0x2a860_2:
    // 0x2a860
    g9 = a1;
    int32_t v13 = *v5; // 0x2a863
    g4 = v13;
    int32_t result = *(int32_t *)(v13 + 8); // 0x2a86e
    g4 = result;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
  lab_0x2a810:;
    int32_t v14 = a3 + 1; // 0x2a810
    g9 = v14;
    int32_t v15 = *v5; // 0x2a819265
    g4 = v15;
    if ((char)v15 == 0) {
        goto lab_0x2a8b0;
    } else {
        int32_t v16 = v7; // 0x2a831272
        while (true) {
            int32_t v17 = *(int32_t *)(v16 + 20); // 0x2a831
            g6 = v17;
            if (v17 == 0) {
                // break -> 0x2a845
                break;
            }
            while (true) {
                // 0x2a838
                if (*(char *)(v17 + 16) != 0) {
                    // break -> 0x2a816
                    break;
                }
                int32_t v18 = *(int32_t *)(v17 + 20); // 0x2a83e
                g6 = v18;
                if (v18 == 0) {
                    // break (via goto) -> 0x2a845
                    goto lab_0x2a845;
                }
                v17 = v18;
            }
            // 0x2a816
            g9 = v14;
            int32_t v19 = *v5; // 0x2a819
            g4 = v19;
            if ((char)v19 == 0) {
                goto lab_0x2a8b0;
            }
            v16 = v17;
        }
      lab_0x2a845:
        // 0x2a845
        g9 = a1;
        int32_t v20 = *v9; // 0x2a848
        g4 = v20;
        v8 = v20;
        goto lab_0x2a84b;
    }
  lab_0x2a8b0:
    // 0x2a8b0
    g4 = 0;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return 0;
  lab_0x2a84b:
    // 0x2a84b
    g6 = v8;
    if (v8 == 0) {
        goto lab_0x2a860_2;
    } else {
        int32_t v21 = v8; // 0x2a857
        while (true) {
            // 0x2a851
            if (*(char *)(v21 + 16) == 0) {
                // break -> 0x2a880
                break;
            }
            int32_t v22 = *(int32_t *)(v21 + 20); // 0x2a857
            g6 = v22;
            if (v22 == 0) {
                goto lab_0x2a860_2;
            }
            v21 = v22;
        }
        int32_t v23 = a3 + 1; // 0x2a880
        g9 = v23;
        if ((char)v8 == 0) {
            goto lab_0x2a8b0;
        } else {
            int32_t v24 = v21; // 0x2a88d264
            while (true) {
                int32_t v25 = v24; // 0x2a89d
                int32_t v26; // 0x2a89d
                while (true) {
                    // 0x2a89d
                    v26 = *(int32_t *)(v25 + 20);
                    g6 = v26;
                    if (v26 == 0) {
                        // break (via goto) -> 0x2a860
                        goto lab_0x2a860_2;
                    }
                    // 0x2a8a4
                    if (*(char *)(v26 + 16) == 0) {
                        // break -> 0x2a886
                        break;
                    }
                    v25 = v26;
                }
                // 0x2a886
                g9 = v23;
                v24 = v26;
            }
            goto lab_0x2a860_2;
        }
    }
}

// Address range: 0x2a8e0 - 0x2a9d4
int32_t function_2a8e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    // 0x2a8e0
    g8 = a4;
    if (a4 == 0) {
        int32_t v1 = function_2a9e4((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2a8f1
        g4 = v1;
    }
    // 0x2a8f7
    g4 = a2;
    int32_t v2; // bp-544
    int32_t v3 = &v2; // 0x2a8fa
    g6 = v3;
    g4 = function_2d970(&v2, a2, (int32_t)&g64);
    int32_t v4 = function_2cb40(v3); // 0x2a917
    g4 = v4;
    if (v4 >= 1) {
        int32_t v5 = v4 - 1; // 0x2a920
        g7 = v5;
        unsigned char v6 = *(char *)(v4 - 541 + g5); // 0x2a923
        g9 = v6;
        if (v6 != 47) {
            int32_t v7 = v4 - 2; // 0x2a930
            g4 = v7;
            if (v6 != 92) {
                while (true) {
                    // 0x2a953
                    *(char *)(v5 - 540 + g5) = 0;
                    if (v7 == -1) {
                        // break -> 0x2a960
                        break;
                    }
                    int32_t v8 = g4; // 0x2a940
                    unsigned char v9 = *(char *)(v8 + g6); // 0x2a940
                    g9 = v9;
                    g7 = v8;
                    int32_t v10 = v8 - 1; // 0x2a946
                    g4 = v10;
                    if (v9 == 47) {
                        // break -> 0x2a960
                        break;
                    }
                    // 0x2a94e
                    if (v9 == 92) {
                        // break -> 0x2a960
                        break;
                    }
                    // 0x2a94e
                    v5 = v8;
                    v7 = v10;
                }
            }
        }
    }
    // 0x2a960
    g4 = a3;
    g4 = function_2db40(v3, a3, (int32_t)&g64);
    int32_t v11 = function_26cf0(); // 0x2a986
    g4 = v11;
    g10 = v11;
    function_26330(v11);
    g4 = a1;
    g4 = a6;
    *(char *)(g10 + 17) = (char)(*(char *)(a1 + 17) != 0);
    int32_t v12 = g4; // 0x2a9ae
    g4 = a5;
    int32_t v13 = function_2b2b0(g10, a4, &v2, a5, v12); // 0x2a9c0
    g4 = v13;
    int32_t result; // 0x2a9c7
    if ((char)v13 != 0) {
        // bb32
        result = function_2a9f0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v13;
    }
    // 0x2a9c9
    return result;
}

// Address range: 0x2a9e4 - 0x2a9ef
int32_t function_2a9e4(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2a9e4
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2a9f0 - 0x2aa14
int32_t function_2a9f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 + 28); // 0x2a9f0
    g9 = v1;
    int32_t v2 = g5 - 28; // 0x2a9f3
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x2a9fa
    g4 = v3;
    int32_t result = function_2bdb0(v1, v3, v2); // 0x2aa04
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2aa15 - 0x2aa16
int32_t function_2aa15(void) {
    // 0x2aa15
    return g4;
}

// Address range: 0x2aa1b - 0x2aa1c
int32_t function_2aa1b(void) {
    // 0x2aa1b
    return g4;
}

// Address range: 0x2aa42 - 0x2aa45
int32_t function_2aa42(void) {
    // 0x2aa42
    return g4;
}

// Address range: 0x2aa47 - 0x2aa4c
int32_t function_2aa47(void) {
    // 0x2aa47
    *(char *)g7 = (char)(g6 / 256) + *(char *)&g7;
    return g4;
}

// Address range: 0x2aa69 - 0x2aa6a
int32_t function_2aa69(void) {
    // 0x2aa69
    return g4;
}

// Address range: 0x2aac9 - 0x2aaca
int32_t function_2aac9(void) {
    // 0x2aac9
    return g4;
}

// Address range: 0x2aad8 - 0x2aad9
int32_t function_2aad8(void) {
    // 0x2aad8
    return g4;
}

// Address range: 0x2aaec - 0x2aafb
int32_t function_2aaec(void) {
    int32_t v1 = g7; // 0x2aaec
    char * v2 = (char *)(v1 + 0x7be82404); // 0x2aaec
    *v2 = *v2 | (char)v1;
    int32_t * v3 = (int32_t *)(g4 - 0x76ffeb82); // 0x2aaf4
    *v3 = *v3 + 1;
    return g4;
}

// Address range: 0x2ab01 - 0x2ab02
int32_t function_2ab01(void) {
    // 0x2ab01
    return g4;
}

// Address range: 0x2ab2f - 0x2ab32
int32_t function_2ab2f(int32_t a1) {
    int32_t result = g4 & -24; // 0x2ab2f
    g4 = result;
    return result;
}

// Address range: 0x2ab36 - 0x2ab3e
int32_t function_2ab36(void) {
    int32_t result = function_2aac9(); // 0x2ab3c
    g4 = result;
    return result;
}

// Address range: 0x2ab72 - 0x2aba6
int32_t function_2ab72(int16_t a1) {
    // 0x2ab72
    __asm_out(139, g4);
    int32_t v1; // ebp
    g5 = v1 + 1;
    int32_t v2 = g4; // 0x2ab7d
    uint32_t v3 = g6; // 0x2ab82
    g6 = 256 * (v3 / 512 % 128 + v2 + (int32_t)&g391) & 0xff00 | v3 & -0xff01;
    int32_t v4 = v2 + (int32_t)&g391 + (int32_t)&g393; // 0x2ab87
    g4 = v4;
    char * v5 = (char *)v4; // 0x2ab8c
    *v5 = *v5 + (char)v4;
    int32_t v6 = g4; // 0x2ab8e
    char * v7 = (char *)v6; // 0x2ab8e
    *v7 = *v7 + (char)v6;
    *(int32_t *)(g5 - 36) = 0;
    int32_t v8 = g4; // 0x2ab97
    int32_t result; // 0x2ab99
    if (v8 < 0) {
        // bb
        result = function_2b088();
        g4 = result;
    } else {
        result = v8;
    }
    // 0x2ab9f
    g9 = *(int32_t *)(g5 - 48);
    return result;
}

// Address range: 0x2abfd - 0x2ac35
int32_t function_2abfd(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2abfd
    int32_t v1; // ebp
    *(int32_t *)(v1 - 64) = 0;
    *(int32_t *)(v1 - 52) = 0;
    int32_t v2 = g401 - 1; // 0x2ac10
    g401 = v2;
    g4 = v2;
    if (v2 == 0) {
        // 0x2ac21
        g9 = &g400;
        int32_t v3 = g400; // 0x2ac26
        g400 = v2;
        g4 = v3;
    }
    // 0x2ac28
    g4 = 1;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return 1;
}

// Address range: 0x2ac4f - 0x2ac54
int32_t function_2ac4f(void) {
    int32_t result = function_2aa69(); // 0x2ac4f
    g4 = result;
    return result;
}

// Address range: 0x2accd - 0x2acd3
int32_t function_2accd(void) {
    // 0x2accd
    return g4;
}

// Address range: 0x2acd3 - 0x2acdf
int32_t function_2acd3(void) {
    // 0x2acd3
    if (g4 < 1) {
        // bb
        g4 = function_2ad58();
    }
    // 0x2acdb
    g6 = 0;
    int32_t result = function_2ad13(); // 0x2acdd
    g4 = result;
    return result;
}

// Address range: 0x2ace0 - 0x2ace1
int32_t function_2ace0(void) {
    // 0x2ace0
    return g4;
}

// Address range: 0x2ad08 - 0x2ad13
int32_t function_2ad08(void) {
    // 0x2ad08
    g6++;
    return g4;
}

// Address range: 0x2ad13 - 0x2ad25
int32_t function_2ad13(void) {
    int32_t v1 = g6; // 0x2ad13
    int32_t v2; // 0x2ad1d
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_2ad08();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x2ad1d
    int32_t result; // 0x2ad23
    if (v2 < g392) {
        // bb4
        result = function_2ace0();
        g4 = result;
    } else {
        // 0x2ad1d
        result = g4;
    }
    // 0x2ad25
    return result;
}

// Address range: 0x2ad4e - 0x2ad4f
int32_t function_2ad4e(void) {
    // 0x2ad4e
    return g4;
}

// Address range: 0x2ad58 - 0x2ad5f
int32_t function_2ad58(void) {
    // 0x2ad58
    return g4;
}

// Address range: 0x2ad64 - 0x2ad73
int32_t function_2ad64(void) {
    // 0x2ad64
    if (*(char *)(g10 + 20) == 0) {
        // bb
        g4 = function_2aad8();
    }
    int32_t result = function_2ab01(); // 0x2ad6e
    g4 = result;
    return result;
}

// Address range: 0x2adaa - 0x2adab
int32_t function_2adaa(void) {
    // 0x2adaa
    return g4;
}

// Address range: 0x2add5 - 0x2add6
int32_t function_2add5(void) {
    // 0x2add5
    return g4;
}

// Address range: 0x2ade2 - 0x2ade3
int32_t function_2ade2(void) {
    // 0x2ade2
    return g4;
}

// Address range: 0x2adfe - 0x2ae04
int32_t function_2adfe(void) {
    // 0x2adfe
    return g4;
}

// Address range: 0x2ae04 - 0x2ae10
int32_t function_2ae04(void) {
    // 0x2ae04
    if (g4 < 1) {
        // bb
        g4 = function_2ae88();
    }
    // 0x2ae0c
    g6 = 0;
    int32_t result = function_2ae43(); // 0x2ae0e
    g4 = result;
    return result;
}

// Address range: 0x2ae10 - 0x2ae11
int32_t function_2ae10(void) {
    // 0x2ae10
    return g4;
}

// Address range: 0x2ae38 - 0x2ae43
int32_t function_2ae38(void) {
    // 0x2ae38
    g6++;
    return g4;
}

// Address range: 0x2ae43 - 0x2ae55
int32_t function_2ae43(void) {
    int32_t v1 = g6; // 0x2ae43
    int32_t v2; // 0x2ae4d
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_2ae38();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x2ae4d
    int32_t result; // 0x2ae53
    if (v2 < g392) {
        // bb4
        result = function_2ae10();
        g4 = result;
    } else {
        // 0x2ae4d
        result = g4;
    }
    // 0x2ae55
    return result;
}

// Address range: 0x2ae7e - 0x2ae7f
int32_t function_2ae7e(void) {
    // 0x2ae7e
    return g4;
}

// Address range: 0x2ae88 - 0x2ae8f
int32_t function_2ae88(void) {
    // 0x2ae88
    return g4;
}

// Address range: 0x2ae93 - 0x2aebb
int32_t function_2ae93(void) {
    int32_t * v1 = (int32_t *)(g4 + 0x7500b37d); // 0x2ae93
    *v1 = *v1 + 1;
    int32_t * v2 = (int32_t *)(g6 - 0x3f7a53bb); // 0x2ae99
    int32_t v3 = g7 & *v2; // 0x2ae99
    *v2 = v3;
    if (v3 != 0) {
        int32_t v4 = *(int32_t *)(g5 - 84); // 0x2aea1
        g9 = v4;
        *(int32_t *)(v4 + 20) = 0;
    }
    int32_t v5 = *(int32_t *)(g5 - 76); // 0x2aeab
    g4 = v5;
    g4 = function_28e50(v5);
    int32_t result = function_2ad64(); // 0x2aeb6
    g4 = result;
    return result;
}

// Address range: 0x2aebb - 0x2aecd
int32_t function_2aebb(void) {
    // 0x2aebb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 76); // 0x2aebb
    g4 = *v2;
    *v2 = 0;
    *(int32_t *)(v1 - 84) = g4;
    int32_t result = function_2ad64(); // 0x2aec8
    g4 = result;
    return result;
}

// Address range: 0x2af14 - 0x2af26
int32_t function_2af14(void) {
    int32_t v1 = g393; // 0x2af14
    g6 = v1;
    if (v1 < 1) {
        // bb
        g4 = function_2ad58();
    }
    // 0x2af22
    g6 = 0;
    int32_t result = function_2af67(); // 0x2af24
    g4 = result;
    return result;
}

// Address range: 0x2af30 - 0x2af31
int32_t function_2af30(void) {
    // 0x2af30
    return g4;
}

// Address range: 0x2af58 - 0x2af67
int32_t function_2af58(void) {
    // 0x2af58
    g6++;
    return g4;
}

// Address range: 0x2af67 - 0x2af79
int32_t function_2af67(void) {
    int32_t v1 = g6; // 0x2af67
    int32_t v2; // 0x2af71
    if (*(int32_t *)(4 * v1 + (int32_t)&g390) == -1) {
        // bb
        g4 = function_2af58();
        v2 = g6;
    } else {
        v2 = v1;
    }
    // 0x2af71
    int32_t result; // 0x2af77
    if (g392 > v2) {
        // bb4
        result = function_2af30();
        g4 = result;
    } else {
        // 0x2af71
        result = g4;
    }
    // 0x2af79
    return result;
}

// Address range: 0x2afa1 - 0x2afa3
int32_t function_2afa1(void) {
    int32_t result = function_2af58(); // 0x2afa1
    g4 = result;
    return result;
}

// Address range: 0x2afa3 - 0x2afd7
int32_t function_2afa3(void) {
    int32_t v1 = g5; // 0x2afa3
    int32_t v2 = *(int32_t *)(v1 + 28); // 0x2afa3
    g9 = v2;
    int32_t v3 = *(int32_t *)(v1 + 24); // 0x2afae
    g9 = v3;
    int32_t v4 = g4; // 0x2afb1
    int32_t v5 = *(int32_t *)(v1 + 12); // 0x2afb5
    g4 = v5;
    int32_t v6 = *(int32_t *)(v1 + 20); // 0x2afbc
    g9 = v6;
    int32_t v7 = *(int32_t *)(v1 + 8); // 0x2afc7
    g9 = v7;
    g4 = function_2a8e0(v7, v5, v4, v6, v3, g8, v2);
    int32_t result = function_2ad64(); // 0x2afd2
    g4 = result;
    return result;
}

// Address range: 0x2afd7 - 0x2b012
int32_t function_2afd7(void) {
    int32_t v1 = g5; // 0x2afd7
    int32_t v2 = *(int32_t *)(v1 + 28); // 0x2afd7
    g9 = v2;
    int32_t v3 = g4; // 0x2afda
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x2afde
    g4 = v4;
    int32_t v5 = function_263f0(v4, v3, v2); // 0x2afe8
    g4 = v5;
    int32_t v6 = g5; // 0x2afed
    g9 = v6 - 25;
    *(char *)(v6 - 77) = (char)v5;
    int32_t v7 = g9; // 0x2aff3
    int32_t v8 = g5; // 0x2aff7
    int32_t v9 = *(int32_t *)(v8 + 8); // 0x2aff7
    g9 = v9;
    int32_t v10 = v8 - 26; // 0x2affa
    g4 = v10;
    g4 = function_25370(v9, g10, v10, v7);
    int32_t result = function_2add5(); // 0x2b00d
    g4 = result;
    return result;
}

// Address range: 0x2b012 - 0x2b03e
int32_t function_2b012(void) {
    // 0x2b012
    int32_t v1; // ebp
    int32_t v2; // 0x2b02a
    if (*(char *)(v1 - 26) != 0) {
        // bb
        g4 = function_2ade2();
        v2 = v1;
    } else {
        v2 = v1;
    }
    int32_t v3 = *(int32_t *)(v2 + 28); // 0x2b01c
    g4 = v3;
    int32_t v4 = *(int32_t *)(v2 + 12); // 0x2b023
    g9 = v4;
    int32_t v5 = *(int32_t *)(v2 - 76); // 0x2b02a
    g4 = v5;
    int32_t result = function_28630(v5, v4, g10, v3); // 0x2b034
    g4 = result;
    return result;
}

// Address range: 0x2b03e - 0x2b07d
int32_t function_2b03e(void) {
    int32_t v1 = function_26cf0(); // 0x2b045
    g4 = v1;
    *(int32_t *)(g5 - 76) = v1;
    g4 = function_26330(g4);
    int32_t v2 = *(int32_t *)(g5 + 8); // 0x2b059
    g4 = v2;
    int32_t v3 = *(int32_t *)(g5 - 84); // 0x2b05c
    g9 = v3;
    int32_t v4 = *(int32_t *)(g5 - 76); // 0x2b063
    g4 = v4;
    *(char *)(v4 + 17) = (char)(*(char *)(v2 + 17) != 0);
    int32_t v5; // 0x2b06c
    if (v3 == 0) {
        // bb
        v5 = function_2adaa();
        g4 = v5;
    } else {
        // 0x2b03e
        v5 = g4;
    }
    int32_t v6 = *(int32_t *)(g5 - 84); // 0x2b072
    g9 = v6;
    *(int32_t *)(v6 + 20) = v5;
    int32_t result = function_2adaa(); // 0x2b078
    g4 = result;
    return result;
}

// Address range: 0x2b07d - 0x2b088
int32_t function_2b07d(void) {
    // 0x2b07d
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 - 68); // 0x2b07d
    g4 = v2;
    *(int32_t *)(v1 - 52) = v2;
    return g4;
}

// Address range: 0x2b088 - 0x2b093
int32_t function_2b088(void) {
    int32_t v1 = *(int32_t *)(g5 - 48); // 0x2b088
    g4 = v1;
    *(int32_t *)(g5 - 32) = v1;
    return g4;
}

// Address range: 0x2b093 - 0x2b0a6
int32_t function_2b093(void) {
    // 0x2b093
    int32_t v1; // ebp
    g9 = v1 - 48;
    return g4;
}

// Address range: 0x2b0a7 - 0x2b0a8
int32_t function_2b0a7(void) {
    // 0x2b0a7
    return g4;
}

// Address range: 0x2b122 - 0x2b126
int32_t function_2b122(void) {
    int32_t result = g4; // 0x2b122
    g6 = result;
    return result;
}

// Address range: 0x2b127 - 0x2b128
int32_t function_2b127(void) {
    // 0x2b127
    return g4;
}

// Address range: 0x2b12e - 0x2b133
int32_t function_2b12e(void) {
    int32_t result = function_85d2febe(); // 0x2b12e
    g4 = result;
    return result;
}

// Address range: 0x2b1ac - 0x2b1ad
int32_t function_2b1ac(void) {
    // 0x2b1ac
    return g4;
}

// Address range: 0x2b210 - 0x2b222
int32_t function_2b210(void) {
    // 0x2b210
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 12);
    g4 = 1;
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return 1;
}

// Address range: 0x2b26e - 0x2b290
int32_t function_2b26e(void) {
    // 0x2b26e
    g8++;
    int32_t v1 = g4 & -240; // 0x2b271
    g4 = v1;
    int32_t * v2 = (int32_t *)v1; // 0x2b273
    *v2 = *v2 | v1;
    int32_t v3 = g4; // 0x2b275
    char * v4 = (char *)v3; // 0x2b275
    *v4 = *v4 + (char)v3;
    int32_t v5 = g10; // 0x2b277
    g4 = function_32d80(g6, g8, v5, v5, (int32_t)&g870);
    int32_t result = function_2b1ac(); // 0x2b28b
    g4 = result;
    return result;
}

// Address range: 0x2b2b0 - 0x2b39d
int32_t function_2b2b0(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5) {
    // 0x2b2b0
    g6 = a1;
    g9 = (int32_t)a3;
    g7 = a2;
    int32_t v1 = *(int32_t *)a1; // 0x2b2c2
    g4 = v1;
    int32_t v2; // 0x2b2f9
    if (v1 == 0) {
        int32_t v3 = function_2b4a0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2b2df
        g4 = v3;
        v2 = g6;
    } else {
        v2 = a1;
    }
    // 0x2b2e5
    g4 = a2;
    int32_t v4 = v2 - 4; // 0x2b2e8
    g8 = v4;
    g9 = v1;
    *(int32_t *)&g270 = a2;
    int32_t v5 = *(int32_t *)v2; // 0x2b2f3
    g4 = v5;
    g7 = v1;
    int32_t v6; // bp-32
    g9 = &v6;
    g10 = v5;
    int32_t v7 = *(int32_t *)v4; // 0x2b30a
    g4 = v7;
    g10 = v5 + 2;
    int32_t v8; // 0x2b385
    if ((char)v7 != 0) {
        // bb26
        g4 = function_2b3c0();
        v8 = g6;
    } else {
        v8 = v2;
    }
    // 0x2b339
    g9 = v1;
    int32_t * v9 = (int32_t *)(v8 - 4); // 0x2b33c
    g4 = *v9;
    g7 = v1;
    g9 = v5;
    g7 = v1;
    g9 = *v9;
    g4 = 0;
    return 0;
}

// Address range: 0x2b39d - 0x2b3bf
int32_t function_2b39d(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2b39d
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 96);
    g9 = *(int32_t *)(g6 - 4);
    *(char *)(v1 - 104) = (char)g4;
    int32_t result = (int32_t)*(char *)(v1 - 104); // 0x2b3b3
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2b3c0 - 0x2b3d0
int32_t function_2b3c0(void) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x2b3c0
    int32_t result = -v1; // 0x2b3c7
    g4 = result;
    g10 = v1 - 1 + g10 & result;
    return result;
}

// Address range: 0x2b3d0 - 0x2b3d1
int32_t function_2b3d0(void) {
    // 0x2b3d0
    return g4;
}

// Address range: 0x2b4a0 - 0x2b4aa
int32_t function_2b4a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2b4a0
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 0;
}

// Address range: 0x2b4ab - 0x2b4ac
int32_t function_2b4ab(void) {
    // 0x2b4ab
    return g4;
}

// Address range: 0x2b4d7 - 0x2b4e0
int32_t function_2b4d7(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x39068bc2); // 0x2b4d7
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x2b4e0 - 0x2b5a1
int32_t function_2b4e0(void) {
    int32_t v1 = g10; // 0x2b4e2
    *(int32_t *)v1 = v1 == 0 ? g9 : v1;
    g4 = v1;
    if (v1 != 0) {
        int32_t result = __asm_pause(); // 0x2b590
        g4 = result;
        return result;
    }
    int32_t * v2 = (int32_t *)(g10 + 4); // 0x2b4ec
    int32_t v3 = *v2 + 1; // 0x2b4ef
    g4 = v3;
    *v2 = v3;
    int32_t v4 = g10; // 0x2b4f5
    int32_t v5 = *(int32_t *)(v4 + 52); // 0x2b4f5
    g4 = v5;
    g8 = *(int32_t *)(g5 + 8);
    *(int32_t *)(v4 + 12) = v5;
    int32_t v6 = g10; // 0x2b500
    g4 = *(int32_t *)(v6 + 40);
    *(int32_t *)(v6 + 8) = g8;
    int32_t v7 = g10 + 16; // 0x2b506
    g8 = v7;
    *(int32_t *)(g5 - 32) = v7;
    g4 = *(int32_t *)g4;
    if ((char)g6 == 0) {
        int32_t v8 = function_2b5b0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2b511
        g4 = v8;
    }
    int32_t v9 = function_34f10((int32_t)&g870); // 0x2b517
    g4 = v9;
    int32_t v10 = g10; // 0x2b51c
    int32_t v11; // 0x2b520
    int32_t v12; // 0x2b526
    if (*(char *)(v10 + 44) == 0) {
        // bb238
        v11 = function_2b6b0();
        g4 = v11;
        v12 = g10;
    } else {
        v12 = v10;
        v11 = v9;
    }
    int32_t v13 = *(int32_t *)(v12 + 48) & v11; // 0x2b526
    g4 = v13;
    *(int32_t *)(g5 - 40) = v13;
    int32_t v14 = g5; // 0x2b52c
    int32_t v15 = *(int32_t *)(v14 - 40); // 0x2b52c
    g9 = v15;
    g4 = *(int32_t *)(g10 + 16);
    int32_t v16 = 20 * v15; // 0x2b535
    g8 = v16;
    *(int32_t *)(v14 - 44) = v16;
    g6 = 0;
    int32_t v17 = g4 + g8; // 0x2b53f
    g8 = v17;
    int32_t v18 = *(int32_t *)(v17 + 12); // 0x2b541
    g7 = v18;
    *(int32_t *)(g5 - 28) = v18;
    if (v18 >= 0 != v18 != 0) {
        int32_t result2 = function_2b683(); // 0x2b54b
        g4 = result2;
        return result2;
    }
    while (true) {
        int32_t v19 = *(int32_t *)g8; // 0x2b575
        g4 = v19;
        int32_t v20 = *(int32_t *)(g5 - 32); // 0x2b577
        g7 = v20;
        int32_t v21 = *(int32_t *)(4 * g6 + v19); // 0x2b57a
        g4 = v21;
        int32_t v22 = *(int32_t *)(v20 + 20); // 0x2b57d
        g9 = v22;
        int32_t v23;
        int32_t v24; // 0x2b550
        if (v21 >= 0 == (v21 != 0)) {
            // 0x2b550
            v24 = *(int32_t *)(v22 + 4) + v21;
            g4 = v24;
            v23 = *(int32_t *)v22;
        } else {
            int32_t v25 = *(int32_t *)v22; // 0x2b584
            g4 = v25;
            v24 = v25;
            v23 = v25;
        }
        // 0x2b555
        g9 = v23;
        int32_t v26 = function_2cc30(v24, (char *)v23); // 0x2b55c
        g4 = v26;
        if (v26 == 0) {
            // bb239
            g4 = function_2b680();
        }
        int32_t v27 = g6 + 1; // 0x2b569
        g6 = v27;
        if (v27 == *(int32_t *)(g5 - 28)) {
            // bb240
            g4 = function_2b6e8();
        }
    }
}

// Address range: 0x2b5a6 - 0x2b5ab
int32_t function_2b5a6(void) {
    // 0x2b5a6
    return g4;
}

// Address range: 0x2b5b0 - 0x2b67a
int32_t function_2b5b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = function_34f10((int32_t)&g870); // 0x2b5b0
    g4 = v1;
    int32_t v2 = g10; // 0x2b5b5
    int32_t v3; // 0x2b5b9
    int32_t v4; // 0x2b5bf
    if (*(char *)(v2 + 44) == 0) {
        // bb
        v3 = function_2b6c0();
        g4 = v3;
        v4 = g10;
    } else {
        v4 = v2;
        v3 = v1;
    }
    int32_t v5 = *(int32_t *)(v4 + 48) & v3; // 0x2b5bf
    g4 = v5;
    *(int32_t *)(g5 - 36) = v5;
    int32_t v6 = g5; // 0x2b5c5
    int32_t v7 = *(int32_t *)(v6 - 36); // 0x2b5c5
    g9 = v7;
    g6 = 0;
    int32_t v8 = *(int32_t *)(g10 + 16); // 0x2b5ca
    g4 = v8;
    int32_t v9 = v8 + 20 * v7; // 0x2b5d0
    g8 = v9;
    int32_t v10 = *(int32_t *)(v9 + 12); // 0x2b5d3
    g7 = v10;
    *(int32_t *)(v6 - 28) = v10;
    if (v10 >= 0 == (v10 != 0)) {
        while (true) {
            int32_t v11 = *(int32_t *)g8; // 0x2b601
            g4 = v11;
            int32_t v12 = *(int32_t *)(g5 - 32); // 0x2b603
            g7 = v12;
            int32_t v13 = *(int32_t *)(4 * g6 + v11); // 0x2b606
            g4 = v13;
            int32_t v14 = *(int32_t *)(v12 + 20); // 0x2b609
            g9 = v14;
            int32_t v15; // 0x2b5e3
            int32_t v16; // 0x2b5e0
            if (v13 >= 0 == (v13 != 0)) {
                // 0x2b5e0
                v16 = *(int32_t *)(v14 + 4) + v13;
                g4 = v16;
                v15 = *(int32_t *)v14;
                g9 = v15;
            } else {
                int32_t v17 = *(int32_t *)v14; // 0x2b610
                g9 = v17;
                g4 = v17;
                v16 = v17;
                v15 = v17;
            }
            int32_t v18 = function_2cc30(v16, (char *)v15); // 0x2b5ec
            g4 = v18;
            if (v18 == 0) {
                // break -> 0x2b620
                break;
            }
            int32_t v19 = g6 + 1; // 0x2b5f5
            g6 = v19;
            if (v19 == *(int32_t *)(g5 - 28)) {
                // bb27
                g4 = function_2b6d0();
            }
        }
    }
    int32_t v20 = g6; // 0x2b620
    int32_t v21; // 0x2b62f
    if (*(int32_t *)(g5 - 28) == v20) {
        // bb28
        g4 = function_2b6d0();
        v21 = g6;
    } else {
        v21 = v20;
    }
    int32_t v22 = 0x10000 * *(int32_t *)(g5 - 36) | v21; // 0x2b62f
    g4 = v22;
    int32_t v23 = v22 & (int32_t)&g863; // 0x2b633
    g6 = v23;
    int32_t v24 = v22 / 0x10000; // 0x2b636
    g9 = v24;
    g7 = v24;
    int32_t v25 = g10; // 0x2b63b
    g4 = -1;
    int32_t v26; // 0x2b666
    if (*(int32_t *)(v25 + 28) > v24) {
        int32_t v27 = *(int32_t *)(v25 + 16); // 0x2b645
        g8 = v27;
        int32_t v28 = v27 + 20 * v24; // 0x2b64b
        g9 = v28;
        if (*(int32_t *)(v28 + 12) > v23) {
            // bb30
            g4 = function_2b778();
            v26 = g10;
        } else {
            v26 = v25;
        }
    } else {
        v26 = v25;
    }
    int32_t * v29 = (int32_t *)(v26 + 4); // 0x2b660
    int32_t v30 = *v29 - 1; // 0x2b663
    g9 = v30;
    *v29 = v30;
    int32_t v31 = g10; // 0x2b669
    int32_t v32 = *(int32_t *)(v31 + 4); // 0x2b669
    g9 = v32;
    if (v32 == 0) {
        // 0x2b670
        *(int32_t *)v31 = v32;
        g9 = v31;
    }
    // 0x2b672
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x2b680 - 0x2b683
int32_t function_2b680(void) {
    int32_t result = *(int32_t *)(g10 + 16); // 0x2b680
    g4 = result;
    return result;
}

// Address range: 0x2b683 - 0x2b6ae
int32_t function_2b683(void) {
    int32_t v1 = g5; // 0x2b683
    int32_t v2 = g6; // 0x2b683
    int32_t v3; // 0x2b688
    int32_t v4; // 0x2b68e
    if (*(int32_t *)(v1 - 28) == v2) {
        // bb
        g4 = function_2b6eb();
        v4 = g6;
        v3 = g5;
    } else {
        v4 = v2;
        v3 = v1;
    }
    uint32_t v5 = 0x10000 * *(int32_t *)(v3 - 40) | v4; // 0x2b68e
    int32_t v6 = 4 * (v5 & (int32_t)&g863); // 0x2b69a
    g4 = v6;
    int32_t v7 = 20 * v5 / 0x10000; // 0x2b6a0
    g9 = v7;
    int32_t v8 = *(int32_t *)(g10 + 16); // 0x2b6a3
    g7 = v8;
    int32_t v9 = *(int32_t *)(v8 + v7); // 0x2b6a6
    g9 = v9;
    int32_t result = *(int32_t *)(v9 + v6); // 0x2b6a9
    g4 = result;
    return result;
}

// Address range: 0x2b6b0 - 0x2b6bd
int32_t function_2b6b0(void) {
    // 0x2b6b0
    g9 = 0;
    uint32_t v1 = *(int32_t *)(g10 + 28); // 0x2b6b2
    uint32_t v2 = g4; // 0x2b6b2
    g4 = v2 / v1;
    int32_t v3 = v2 % v1;
    g9 = v3;
    *(int32_t *)(g5 - 40) = v3;
    return g4;
}

// Address range: 0x2b6c0 - 0x2b6cd
int32_t function_2b6c0(void) {
    // 0x2b6c0
    g9 = 0;
    uint32_t v1 = *(int32_t *)(g10 + 28); // 0x2b6c2
    uint32_t v2 = g4; // 0x2b6c2
    g4 = v2 / v1;
    int32_t v3 = v2 % v1;
    g9 = v3;
    *(int32_t *)(g5 - 36) = v3;
    return g4;
}

// Address range: 0x2b6d0 - 0x2b6e4
int32_t function_2b6d0(void) {
    // 0x2b6d0
    g6 = &g863;
    g7 = &g863;
    g9 = &g863;
    return g4;
}

// Address range: 0x2b6e8 - 0x2b6eb
int32_t function_2b6e8(void) {
    int32_t result = *(int32_t *)(g10 + 16); // 0x2b6e8
    g4 = result;
    return result;
}

// Address range: 0x2b6eb - 0x2b773
int32_t function_2b6eb(void) {
    int32_t v1 = g4 + *(int32_t *)(g5 - 44); // 0x2b6ee
    g6 = v1;
    g8 = *(int32_t *)(v1 + 12);
    g4 = function_2bf00(v1, 1);
    function_2bca0(g6, g8, 1);
    int32_t v2 = 4 * g8; // 0x2b717
    g4 = v2;
    int32_t v3 = *(int32_t *)g6 + v2; // 0x2b71e
    g4 = v3;
    if (v3 != 0) {
        // 0x2b722
        *(int32_t *)v3 = -1;
    }
    int32_t v4 = *(int32_t *)(g5 + 8); // 0x2b728
    g4 = v4;
    int32_t v5 = function_2cb40(v4); // 0x2b72e
    g4 = v5;
    g9 = *(int32_t *)(g10 + 64);
    g6 = v5;
    int32_t v6 = v5 + 1; // 0x2b73a
    g7 = v6;
    *(int32_t *)(g5 - 28) = v6;
    *(int32_t *)(g5 - 32) = g9;
    if (v6 != 0) {
        // bb
        g4 = function_2b782();
    }
    int32_t v7 = *(int32_t *)(g5 - 40); // 0x2b745
    g4 = v7;
    int32_t v8 = *(int32_t *)(g10 + 16); // 0x2b748
    g6 = v8;
    int32_t v9 = g8 | 0x10000 * v7; // 0x2b74e
    g4 = v9;
    int32_t v10 = *(int32_t *)(g5 - 32); // 0x2b750
    g8 = v10;
    int32_t v11 = v9 & (int32_t)&g863; // 0x2b755
    g7 = v11;
    int32_t v12 = 4 * v11; // 0x2b758
    g4 = v12;
    int32_t v13 = 20 * v9 / 0x10000; // 0x2b765
    g9 = v13;
    int32_t v14 = *(int32_t *)(v13 + v8); // 0x2b768
    g6 = v14;
    *(int32_t *)(v14 + v12) = v10;
    return g4;
}

// Address range: 0x2b778 - 0x2b782
int32_t function_2b778(void) {
    int32_t v1 = g9; // 0x2b778
    g4 = v1;
    int32_t result = *(int32_t *)(4 * g6 + v1); // 0x2b77a
    g4 = result;
    return result;
}

// Address range: 0x2b782 - 0x2b7f1
int32_t function_2b782(void) {
    int32_t v1 = g10 + 52; // 0x2b782
    g4 = v1;
    *(int32_t *)(g5 - 44) = v1;
    g4 = function_2bc50(g4, g7);
    int32_t v2 = g5; // 0x2b794
    int32_t v3 = *(int32_t *)(v2 - 28); // 0x2b794
    g9 = v3;
    int32_t v4 = *(int32_t *)(v2 - 32); // 0x2b797
    g7 = v4;
    int32_t v5 = *(int32_t *)(v2 - 44); // 0x2b79a
    g4 = v5;
    g4 = function_2bb60(v5, v4, v3);
    g4 = *(int32_t *)(g5 + 8);
    g4 = *(int32_t *)(g5 - 28);
    *(int32_t *)(g5 - 44) = g8;
    g4 = *(int32_t *)(g5 - 32);
    int32_t v6 = g6 + 2; // 0x2b7c1
    g6 = v6;
    g8 = *(int32_t *)(g5 + 8);
    *(int32_t *)(g5 - 28) = v6;
    g9 = 1;
    int32_t v7 = 1; // 0x2b7d7
    int32_t v8 = g4; // 0x2b7d0
    int32_t result; // 0x2b7e1
    while (true) {
        // 0x2b7d0
        g7 = v8;
        int32_t v9 = *(int32_t *)(g10 + 52) + v8; // 0x2b7d2
        g7 = v9;
        int32_t v10; // 0x2b7de
        int32_t v11; // 0x2b7e1
        if (v9 != 0) {
            unsigned char v12 = *(char *)(v7 - 1 + g8); // 0x2b7d7
            g6 = v12;
            *(char *)v9 = v12;
            v11 = g4;
            v10 = g9;
        } else {
            v11 = v8;
            v10 = v7;
        }
        int32_t v13 = v10 + 1; // 0x2b7de
        g9 = v13;
        result = v11 + 1;
        g4 = result;
        if (v13 == *(int32_t *)(g5 - 28)) {
            // break -> 0x2b7e9
            break;
        }
        v7 = v13;
        v8 = result;
    }
    // 0x2b7e9
    g8 = *(int32_t *)(g5 - 44);
    return result;
}

// Address range: 0x2b7f2 - 0x2b7fc
int32_t function_2b7f2(void) {
    int32_t v1 = g4; // 0x2b7f3
    g4 = v1 + 131 & 255 | v1 & -256;
    int32_t result = function_4568901(g10); // 0x2b7f5
    g4 = result;
    return result;
}

// Address range: 0x2b843 - 0x2b850
int32_t function_2b843(void) {
    // 0x2b843
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x2b850 - 0x2b871
int32_t function_2b850(void) {
    // 0x2b850
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 12);
    g268 = 0x250e0;
    g269 = 0x25100;
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x2b885 - 0x2b886
int32_t function_2b885(void) {
    // 0x2b885
    return g4;
}

// Address range: 0x2b9a3 - 0x2b9aa
int32_t function_2b9a3(void) {
    // 0x2b9a3
    *(int32_t *)(g6 + 56) = 0;
    return g4;
}

// Address range: 0x2b9aa - 0x2b9e4
int32_t function_2b9aa(void) {
    // 0x2b9aa
    *(int32_t *)(g5 - 36) = g10;
    g4 = *(int32_t *)(g6 + 28);
    *(int32_t *)(g5 - 28) = 0;
    g10 = g6;
    *(int32_t *)(g5 - 32) = 0;
    *(int32_t *)(g5 - 40) = g4;
    int32_t v1 = g5; // 0x2b9c3
    uint32_t v2 = *(int32_t *)(v1 - 32); // 0x2b9c3
    g4 = v2;
    int32_t v3; // 0x2b9cb
    if (*(int32_t *)(v1 - 40) <= v2) {
        // bb
        g4 = function_2ba11();
        v3 = g5;
    } else {
        v3 = v1;
    }
    int32_t v4 = *(int32_t *)(v3 - 28); // 0x2b9cb
    g6 = v4;
    int32_t v5 = *(int32_t *)(g10 + 16) + v4; // 0x2b9ce
    g6 = v5;
    *(int32_t *)(v5 + 12) = 0;
    if (*(int32_t *)(v5 + 8) < 0) {
        // bb231
        g4 = function_2ba02();
    }
    int32_t v6 = *(int32_t *)g6; // 0x2b9de
    g9 = v6;
    int32_t result; // 0x2b9e2
    if (v6 == 0) {
        // bb232
        result = function_2b9fb();
        g4 = result;
    } else {
        // 0x2b9de
        result = g4;
    }
    // 0x2b9e4
    return result;
}

// Address range: 0x2b9fb - 0x2ba02
int32_t function_2b9fb(void) {
    // 0x2b9fb
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x2ba02 - 0x2ba11
int32_t function_2ba02(void) {
    // 0x2ba02
    g4 = g6;
    int32_t * v1 = (int32_t *)(g5 - 32); // 0x2ba04
    *v1 = *v1 + 1;
    int32_t * v2 = (int32_t *)(g5 - 28); // 0x2ba08
    *v2 = *v2 + 20;
    *(int32_t *)(g6 + 16) = g4;
    return g4;
}

// Address range: 0x2ba11 - 0x2ba36
int32_t function_2ba11(void) {
    // 0x2ba11
    g6 = g10;
    g4 = function_2c030(g8);
    g10 = *(int32_t *)(g5 - 36);
    g4 = function_1bc40();
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x2ba29
    g4 = v1;
    *(int32_t *)(g5 - 36) = v1;
    return g4;
}

// Address range: 0x2ba36 - 0x2ba3a
int32_t function_2ba36(void) {
    int32_t result = g4; // 0x2ba36
    g10 = result;
    return result;
}

// Address range: 0x2ba68 - 0x2ba69
int32_t function_2ba68(void) {
    // 0x2ba68
    return g4;
}

// Address range: 0x2ba6d - 0x2ba77
int32_t function_2ba6d(void) {
    // 0x2ba6d
    g4 = function_2c030(g8);
    int32_t result = function_2ba68(); // 0x2ba75
    g4 = result;
    return result;
}

// Address range: 0x2bac0 - 0x2bae3
int32_t function_2bac0(int32_t a1) {
    // 0x2bac0
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t v1 = g4; // 0x2bad9
    int32_t v2; // 0x2badb
    if (v1 < 0) {
        // bb
        v2 = function_2bb18();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3 = *(int32_t *)g6; // 0x2badd
    g9 = v3;
    int32_t result; // 0x2bae1
    if (v3 == 0) {
        // bb8
        result = function_2bafa();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x2bae3
    return result;
}

// Address range: 0x2bafa - 0x2bb12
int32_t function_2bafa(void) {
    // 0x2bafa
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 16) = 0;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x2bb18 - 0x2bb27
int32_t function_2bb18(void) {
    int32_t v1 = g6; // 0x2bb18
    g4 = v1;
    *(int32_t *)(v1 + 16) = v1;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x2bb60 - 0x2bb9d
int32_t function_2bb60(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x2bb60
    int32_t v2 = g6; // 0x2bb63
    g6 = a1;
    g7 = a2;
    g9 = a3;
    int32_t result = *(int32_t *)(a1 + 12) - a2 - a3; // 0x2bb72
    g4 = result;
    if (result >= 0 != result != 0) {
        // 0x2bb78
        g6 = v2;
        g5 = v1;
        return result;
    }
    if (a3 < 1) {
        // 0x2bb78
        g6 = v2;
        g5 = v1;
        return result;
    }
    int32_t v3 = *(int32_t *)a1; // 0x2bb84
    int32_t v4 = a3 + a2; // 0x2bb86
    g9 = v4;
    g4 = v3 + a2;
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_2cb20(v2, v1, v3 + v4); // 0x2bb98
    g4 = result2;
    return result2;
}

// Address range: 0x2bba0 - 0x2bbdf
int32_t function_2bba0(int32_t a1, int32_t a2) {
    // 0x2bba0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x2bbab
    g10 = v1;
    int32_t v2; // 0x2bbb2
    if (v1 < 0) {
        int32_t v3 = function_2bbf7((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2bbb0
        g4 = v3;
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v4 = *(int32_t *)(v2 + 4); // 0x2bbb2
    g4 = v4;
    int32_t v5 = v4 + a2; // 0x2bbb8
    g7 = v5;
    int32_t v6; // 0x2bbd2
    int32_t v7; // 0x2bbbc
    if (v1 != 0) {
        // bb19
        v7 = function_2bc00();
        g4 = v7;
        v6 = g7;
    } else {
        v6 = v5;
        v7 = v4;
    }
    // 0x2bbbe
    g9 = 32;
    int32_t v8 = v7 == 0 ? 32 : v7; // 0x2bbc5
    g4 = v8;
    int32_t v9; // 0x2bbd8
    if (v6 > v8) {
        // 0x2bbcc
        g10 = v1;
        int32_t v10 = 2 * v8; // 0x2bbd0
        while (v6 > v10) {
            // 0x2bbd0
            v10 *= 2;
        }
        // 0x2bbd6
        g4 = v10;
        v9 = v10;
    } else {
        v9 = v8;
    }
    int32_t v11 = g6; // 0x2bbd6
    int32_t v12 = *(int32_t *)v11; // 0x2bbd6
    g9 = v12;
    *(int32_t *)(v11 + 4) = v9;
    int32_t result; // 0x2bbdd
    if (v12 == 0) {
        // bb20
        result = function_2bc30();
        g4 = result;
    } else {
        // 0x2bbd6
        result = g4;
    }
    // 0x2bbdf
    return result;
}

// Address range: 0x2bbf7 - 0x2bbfe
int32_t function_2bbf7(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2bbf7
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return g4;
}

// Address range: 0x2bc00 - 0x2bc30
int32_t function_2bc00(void) {
    uint32_t v1 = g7; // 0x2bc00
    int32_t v2 = v1 - 1; // 0x2bc00
    uint32_t v3 = g10; // 0x2bc08
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x2bc08
    int64_t v5 = v3; // 0x2bc08
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x2bc0d
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x2bc18
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x2bc21
    while (v1 > v8) {
        // 0x2bc18
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x2bc27
    g4 = v8;
    int32_t v9 = g6; // 0x2bc27
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x2bc30 - 0x2bc31
int32_t function_2bc30(void) {
    // 0x2bc30
    return g4;
}

// Address range: 0x2bc50 - 0x2bc93
int32_t function_2bc50(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x2bc56
    g6 = a1;
    int32_t v2 = g10; // 0x2bc5c
    g10 = a2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x2bc62
    g4 = v3;
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x2bc65
    g9 = v4;
    int32_t v5 = v3 + a2; // 0x2bc68
    g4 = v5;
    int32_t v6 = v5 - v4; // 0x2bc6a
    int32_t v7; // 0x2bc7c
    int32_t v8; // 0x2bc7f
    if (v5 > v4) {
        // 0x2bc6e
        g4 = v6;
        g4 = function_2bba0(a1, v6);
        v7 = g6;
        v8 = g10 + *(int32_t *)(v7 + 12);
        g4 = v8;
    } else {
        v7 = a1;
        v8 = v5;
    }
    // 0x2bc81
    *(int32_t *)(v7 + 12) = v8;
    int32_t v9 = g6; // 0x2bc84
    int32_t v10 = *(int32_t *)v9; // 0x2bc84
    g4 = v10;
    *(int32_t *)(v9 + 16) = v10;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x2bca0 - 0x2bce1
int32_t function_2bca0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x2bca0
    int32_t v2 = g6; // 0x2bca3
    g6 = a1;
    g7 = a2;
    g9 = a3;
    int32_t result = *(int32_t *)(a1 + 12) - a2 - a3; // 0x2bcb2
    g4 = result;
    if (result >= 0 != result != 0) {
        // 0x2bcb8
        g6 = v2;
        g5 = v1;
        return result;
    }
    if (a3 < 1) {
        // 0x2bcb8
        g6 = v2;
        g5 = v1;
        return result;
    }
    int32_t v3 = a3 + a2; // 0x2bcc9
    g9 = v3;
    int32_t v4 = *(int32_t *)a1 + 4 * v3; // 0x2bcd4
    g4 = v4;
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_2cb20(v2, v1, v4); // 0x2bcdc
    g4 = result2;
    return result2;
}

// Address range: 0x2bcf0 - 0x2bd2f
int32_t function_2bcf0(int32_t a1, int32_t a2) {
    // 0x2bcf0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x2bcfb
    g10 = v1;
    int32_t v2 = *(int32_t *)(a1 + 4); // 0x2bd02
    g4 = v2;
    int32_t v3 = v2 + a2; // 0x2bd08
    g7 = v3;
    int32_t v4; // 0x2bd22
    int32_t v5; // 0x2bd0c
    if (v1 != 0) {
        // bb
        v5 = function_2bd58();
        g4 = v5;
        v4 = g7;
    } else {
        v4 = v3;
        v5 = v2;
    }
    // 0x2bd0e
    g9 = 8;
    int32_t v6 = v5 == 0 ? 8 : v5; // 0x2bd15
    g4 = v6;
    int32_t v7; // 0x2bd28
    if (v4 > v6) {
        // 0x2bd1c
        g10 = v1;
        int32_t v8 = 2 * v6; // 0x2bd20
        while (v4 > v8) {
            // 0x2bd20
            v8 *= 2;
        }
        // 0x2bd26
        g4 = v8;
        v7 = v8;
    } else {
        v7 = v6;
    }
    int32_t v9 = g6; // 0x2bd26
    int32_t v10 = *(int32_t *)v9; // 0x2bd26
    g9 = v10;
    *(int32_t *)(v9 + 4) = v7;
    int32_t result; // 0x2bd2d
    if (v10 == 0) {
        // bb18
        result = function_2bd88();
        g4 = result;
    } else {
        // 0x2bd26
        result = g4;
    }
    // 0x2bd2f
    return result;
}

// Address range: 0x2bd58 - 0x2bd88
int32_t function_2bd58(void) {
    uint32_t v1 = g7; // 0x2bd58
    int32_t v2 = v1 - 1; // 0x2bd58
    uint32_t v3 = g10; // 0x2bd60
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x2bd60
    int64_t v5 = v3; // 0x2bd60
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x2bd65
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x2bd70
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x2bd79
    while (v1 > v8) {
        // 0x2bd70
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x2bd7f
    g4 = v8;
    int32_t v9 = g6; // 0x2bd7f
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x2bd88 - 0x2bd89
int32_t function_2bd88(void) {
    // 0x2bd88
    return g4;
}

// Address range: 0x2bdb0 - 0x2be36
int32_t function_2bdb0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x2bdb6
    g6 = a1;
    int32_t v2 = g10; // 0x2bdbc
    g10 = a2;
    int32_t v3 = g8; // 0x2bdc2
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x2bdc5
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x2bdc8
    g9 = v5;
    int32_t v6; // 0x2bdd1
    int32_t v7; // 0x2be31
    int32_t v8; // 0x2be31
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x2be26
        g4 = v9;
        g4 = function_2bcf0(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x2bdcf
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x2bdd8
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x2bde0
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x2be06
    if (v11 < 1) {
        // 0x2bdcf
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x2bdf1
        int32_t v14 = v13 + 4 + 4 * g10; // 0x2bdf8
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x2be04
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x2be06
    g9 = v16;
    if (v16 != 0) {
        // 0x2be0a
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x2be0d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x2be11
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x2be40 - 0x2be7f
int32_t function_2be40(int32_t a1, int32_t a2) {
    // 0x2be40
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x2be4b
    g10 = v1;
    int32_t v2 = *(int32_t *)(a1 + 4); // 0x2be52
    g4 = v2;
    int32_t v3 = v2 + a2; // 0x2be58
    g7 = v3;
    int32_t v4; // 0x2be72
    int32_t v5; // 0x2be5c
    if (v1 != 0) {
        // bb
        v5 = function_2bea8();
        g4 = v5;
        v4 = g7;
    } else {
        v4 = v3;
        v5 = v2;
    }
    // 0x2be5e
    g9 = 8;
    int32_t v6 = v5 == 0 ? 8 : v5; // 0x2be65
    g4 = v6;
    int32_t v7; // 0x2be78
    if (v4 > v6) {
        // 0x2be6c
        g10 = v1;
        int32_t v8 = 2 * v6; // 0x2be70
        while (v4 > v8) {
            // 0x2be70
            v8 *= 2;
        }
        // 0x2be76
        g4 = v8;
        v7 = v8;
    } else {
        v7 = v6;
    }
    int32_t v9 = g6; // 0x2be76
    int32_t v10 = *(int32_t *)v9; // 0x2be76
    g9 = v10;
    *(int32_t *)(v9 + 4) = v7;
    int32_t result; // 0x2be7d
    if (v10 == 0) {
        // bb18
        result = function_2bed8();
        g4 = result;
    } else {
        // 0x2be76
        result = g4;
    }
    // 0x2be7f
    return result;
}

// Address range: 0x2bea8 - 0x2bed8
int32_t function_2bea8(void) {
    uint32_t v1 = g7; // 0x2bea8
    int32_t v2 = v1 - 1; // 0x2bea8
    uint32_t v3 = g10; // 0x2beb0
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x2beb0
    int64_t v5 = v3; // 0x2beb0
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x2beb5
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x2bec0
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x2bec9
    while (v1 > v8) {
        // 0x2bec0
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x2becf
    g4 = v8;
    int32_t v9 = g6; // 0x2becf
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x2bed8 - 0x2bed9
int32_t function_2bed8(void) {
    // 0x2bed8
    return g4;
}

// Address range: 0x2bf00 - 0x2bf43
int32_t function_2bf00(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x2bf06
    g6 = a1;
    int32_t v2 = g10; // 0x2bf0c
    g10 = a2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x2bf12
    g4 = v3;
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x2bf15
    g9 = v4;
    int32_t v5 = v3 + a2; // 0x2bf18
    g4 = v5;
    int32_t v6 = v5 - v4; // 0x2bf1a
    int32_t v7; // 0x2bf2c
    int32_t v8; // 0x2bf2f
    if (v5 > v4) {
        // 0x2bf1e
        g4 = v6;
        g4 = function_2be40(a1, v6);
        v7 = g6;
        v8 = g10 + *(int32_t *)(v7 + 12);
        g4 = v8;
    } else {
        v7 = a1;
        v8 = v5;
    }
    // 0x2bf31
    *(int32_t *)(v7 + 12) = v8;
    int32_t v9 = g6; // 0x2bf34
    int32_t v10 = *(int32_t *)v9; // 0x2bf34
    g4 = v10;
    *(int32_t *)(v9 + 16) = v10;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x2bf50 - 0x2bf67
int32_t function_2bf50(int32_t a1) {
    // 0x2bf50
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x2bf5a
    g4 = v1;
    int32_t v2; // 0x2bf61
    if (v1 < 0) {
        // bb
        g4 = function_2bf86((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x2bf61
    g4 = v3;
    int32_t result; // 0x2bf65
    if (v3 == 0) {
        // bb7
        result = function_2bf7f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x2bf67
    return result;
}

// Address range: 0x2bf7f - 0x2bf86
int32_t function_2bf7f(void) {
    // 0x2bf7f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x2bf86 - 0x2bf8c
int32_t function_2bf86(int32_t a1, int32_t a2) {
    // 0x2bf86
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x2bf90 - 0x2bfcb
int32_t function_2bf90(int32_t a1) {
    // 0x2bf90
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 12) - 1; // 0x2bf9f
    g8 = v1;
    int32_t v2; // 0x2bfa4
    if (v1 < 0) {
        int32_t v3 = function_2c002((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2bfa2
        g4 = v3;
        v2 = g8;
    } else {
        v2 = v1;
    }
    int32_t v4 = 20 * v2; // 0x2bfa7
    g10 = v4;
    g4 = a1;
    g6 = v4;
    int32_t v5 = *(int32_t *)a1 + v4; // 0x2bfb5
    g6 = v5;
    int32_t v6 = *(int32_t *)(v5 + 8); // 0x2bfb7
    g4 = v6;
    *(int32_t *)(v5 + 12) = 0;
    int32_t v7 = *(int32_t *)g6; // 0x2bfc3
    g4 = v7;
    int32_t v8; // 0x2bfc5
    if (v6 < 0) {
        // bb12
        v8 = function_2bfec();
        g4 = v8;
    } else {
        v8 = v7;
    }
    int32_t result; // 0x2bfc9
    if (v8 == 0) {
        // bb13
        result = function_2bfe3();
        g4 = result;
    } else {
        result = v8;
    }
    // 0x2bfcb
    return result;
}

// Address range: 0x2bfe3 - 0x2bfec
int32_t function_2bfe3(void) {
    // 0x2bfe3
    *(int32_t *)(g6 + 4) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x2bfec - 0x2c002
int32_t function_2bfec(void) {
    // 0x2bfec
    *(int32_t *)(g6 + 16) = g4;
    g8--;
    g10 -= 20;
    int32_t result = function_2bf50(g6); // 0x2bff8
    g4 = result;
    return result;
}

// Address range: 0x2c002 - 0x2c014
int32_t function_2c002(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x2c002
    g4 = v1;
    *(int32_t *)(v1 + 12) = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x2c01d - 0x2c030
int32_t function_2c01d(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x31e82434); // 0x2c01d
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x2c030 - 0x2c054
int32_t function_2c030(int32_t a1) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g6 = a1;
    g4 = function_2bf90(a1);
    int32_t v2 = g6; // 0x2c047
    int32_t v3 = *(int32_t *)(v2 + 8); // 0x2c047
    g4 = v3;
    int32_t v4; // 0x2c04e
    int32_t v5; // 0x2c04c
    if (v3 < 0) {
        // bb
        v5 = function_2c088();
        g4 = v5;
        v4 = g6;
    } else {
        v5 = v3;
        v4 = v2;
    }
    int32_t v6 = *(int32_t *)v4; // 0x2c04e
    g9 = v6;
    int32_t result; // 0x2c052
    if (v6 == 0) {
        // bb10
        result = function_2c06b();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x2c054
    return result;
}

// Address range: 0x2c06b - 0x2c083
int32_t function_2c06b(void) {
    // 0x2c06b
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 16) = 0;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x2c088 - 0x2c097
int32_t function_2c088(void) {
    int32_t v1 = g6; // 0x2c088
    g4 = v1;
    *(int32_t *)(v1 + 16) = v1;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x2c12d - 0x2c134
int32_t function_2c12d(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2c12d
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x2c138 - 0x2c168
int32_t function_2c138(void) {
    uint32_t v1 = g7; // 0x2c138
    int32_t v2 = v1 - 1; // 0x2c138
    uint32_t v3 = g10; // 0x2c140
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x2c140
    int64_t v5 = v3; // 0x2c140
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x2c145
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x2c150
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x2c159
    while (v1 > v8) {
        // 0x2c150
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x2c15f
    g4 = v8;
    int32_t v9 = g6; // 0x2c15f
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x2c168 - 0x2c169
int32_t function_2c168(void) {
    // 0x2c168
    return g4;
}

// Address range: 0x2c190 - 0x2c26d
int32_t function_2c190(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x2c193
    int32_t v2 = g10; // 0x2c194
    int32_t v3 = g6; // 0x2c195
    g6 = a1;
    g10 = a2;
    g4 = function_2bf90(a1);
    int32_t v4 = g6; // 0x2c1a9
    int32_t * v5 = (int32_t *)(v4 + 12); // 0x2c1a9
    int32_t v6 = *v5; // 0x2c1a9
    g8 = v6;
    if (a2 == 0) {
        goto lab_0x2c212;
    } else {
        int32_t v7 = *(int32_t *)(v4 + 4); // 0x2c1ae
        g7 = v7;
        int32_t v8 = v6 + a2; // 0x2c1b1
        g9 = v8;
        g4 = v8;
        int32_t v9; // 0x2c237
        if (v8 > v7) {
            // 0x2c220
            g4 = v8 - v7;
            g9 = v8;
            v9 = *v5 + a2;
            g4 = v9;
        } else {
            v9 = v8;
        }
        // 0x2c1ba
        g7 = *(int32_t *)v4;
        *v5 = v9;
        int32_t v10 = g4 - g8 - a2; // 0x2c1c1
        g4 = v10;
        *(int32_t *)(g6 + 16) = g7;
        if (v10 >= 0 == (v10 != 0)) {
            if (a2 < 0) {
                goto lab_0x2c212;
            } else {
                int32_t v11 = g4; // 0x2c246
                int32_t v12 = g7; // 0x2c253
                int32_t v13 = 20 * g9 + v12; // 0x2c25d
                g4 = v13;
                g4 = function_2cb20(v13, v12 + 20 * g8, 20 * v11);
                goto lab_0x2c1d6;
            }
        } else {
            if (a2 < 0) {
                goto lab_0x2c212;
            } else {
                goto lab_0x2c1d6;
            }
        }
    }
  lab_0x2c212:
    // 0x2c212
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x2c1d6:
    // 0x2c1d6
    g7 = 0;
    int32_t v14 = 20 * g8; // 0x2c1db
    g9 = v14;
    int32_t v15 = 0; // 0x2c2083
    while (true) {
        // 0x2c1e0
        g4 = v14;
        int32_t v16 = *(int32_t *)g6 + v14; // 0x2c1e2
        g4 = v16;
        int32_t v17; // 0x2c208
        int32_t v18; // 0x2c20b
        if (v16 != 0) {
            // 0x2c1e6
            *(int32_t *)v16 = 0;
            *(int32_t *)(g4 + 4) = 0;
            *(int32_t *)(g4 + 8) = 0;
            *(int32_t *)(g4 + 12) = 0;
            *(int32_t *)(g4 + 16) = 0;
            v18 = g9;
            v17 = g7;
        } else {
            v18 = v14;
            v17 = v15;
        }
        int32_t v19 = v17 + 1; // 0x2c208
        g7 = v19;
        int32_t v20 = v18 + 20; // 0x2c20b
        g9 = v20;
        if (v19 >= a2) {
            // break -> 0x2c212
            break;
        }
        v15 = v19;
        v14 = v20;
    }
    goto lab_0x2c212;
}

// Address range: 0x2c270 - 0x2c359
int32_t function_2c270(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g8; // 0x2c273
    int32_t v2 = g10; // 0x2c274
    int32_t v3 = g6; // 0x2c275
    g8 = a1;
    g9 = a5;
    g4 = a2;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g8 + 20) = g9;
    g9 = a6;
    int32_t v4 = g4; // 0x2c295
    int32_t v5 = v4 - (int32_t)&g15; // 0x2c295
    *(int32_t *)(g8 + 4) = 0;
    int32_t v6 = v5 < 0 == ((v5 ^ v4) & (v4 ^ (int32_t)&g15)) < 0 == (v5 != 0) ? (int32_t)(bool)&g15 : g4; // 0x2c2a1
    g4 = v6;
    *(int32_t *)(g8 + 8) = 0;
    *(int32_t *)(g8 + 12) = 0;
    *(int32_t *)(g8 + 16) = 0;
    *(int32_t *)(g8 + 24) = g9;
    uint32_t v7 = g4; // 0x2c2bd
    g4 = function_2c190(g8, v7);
    int32_t v8 = v7 % 2 != 0; // 0x2c2cc
    g9 = v8;
    if (v7 % 2 == 0 && v7 % 2 != 0) {
        // 0x2c2d3
        g10 = 0;
        int32_t v9 = 0; // 0x2c2fd
        int32_t v10 = 0;
        while (true) {
            // 0x2c2f8
            g4 = a4;
            int32_t v11 = *(int32_t *)g8 + v9; // 0x2c2fd
            g6 = v11;
            *(int32_t *)(v11 + 12) = 0;
            if (a4 != 0) {
                // 0x2c30a
                g4 = a4;
                g4 = function_2bf00(g6, a4);
                g9 = a4;
                g4 = function_2bca0(g6, 0, a4);
            }
            // 0x2c2e0
            g9 = a3;
            int32_t v12 = v10 + 1; // 0x2c2e5
            *(int32_t *)(*(int32_t *)g8 + 8 + g10) = a3;
            g4 = v8;
            int32_t v13 = g10 + 20; // 0x2c2f0
            g10 = v13;
            if (v12 == v8) {
                // break -> 0x2c338
                break;
            }
            v9 = v13;
            v10 = v12;
        }
    }
    int32_t v14 = v8 - 1; // 0x2c33b
    g9 = v14;
    bool v15 = v14 == 0 | v7 % 2 == 0; // 0x2c33e
    g7 = g7 & -256 | (int32_t)v15;
    g4 = 0;
    *(char *)(g8 + 28) = (char)v15;
    int32_t v16 = v15 ? g9 : g4; // 0x2c34b
    g4 = v16;
    *(int32_t *)(g8 + 32) = v16;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x2c359 - 0x2c3d1
int32_t function_2c359(int32_t a1, int32_t a2, unsigned char a3) {
    // 0x2c359
    g6 = g4;
    g4 = function_2c030(g8);
    function_7ab57(g6, (int32_t)&g870);
    g4 = 0;
    int32_t v1 = g6; // 0x2c378
    g6 = a2;
    int32_t v2 = g10; // 0x2c37e
    g7 = a1;
    int32_t v3 = a3; // 0x2c384
    g10 = v3;
    int32_t v4 = *(int32_t *)a2; // 0x2c388
    g9 = v4;
    if (v4 != *(int32_t *)a1) {
        // 0x2c38e
        g6 = v1;
        g10 = v2;
        return 0;
    }
    // 0x2c3a0
    g4 = 1;
    if (v4 == 1) {
        // 0x2c38e
        g6 = v1;
        g10 = v2;
        return 1;
    }
    if (v4 == 2) {
        // 0x2c38e
        g6 = v1;
        g10 = v2;
        return 1;
    }
    // 0x2c3af
    g4 = 0;
    if (v4 != 3) {
        // 0x2c38e
        g6 = v1;
        g10 = v2;
        return 0;
    }
    // 0x2c3b6
    g9 = v3;
    if (a3 == 0) {
        uint16_t v5 = *(int16_t *)(a2 + 8); // 0x2c3bc
        g9 = v5;
        if (*(int16_t *)(a1 + 8) != v5) {
            // 0x2c38e
            g6 = v1;
            g10 = v2;
            return 0;
        }
    }
    int32_t v6 = *(int32_t *)(a1 + 4); // 0x2c3c6
    g4 = v6;
    int32_t result = (int32_t)(*(int32_t *)(a2 + 4) == v6) | v6 & -256; // 0x2c3cc
    g4 = result;
    // 0x2c38e
    g6 = v1;
    g10 = v2;
    return result;
}

// Address range: 0x2c3e0 - 0x2c416
int32_t function_2c3e0(int32_t a1, int32_t a2) {
    // 0x2c3e0
    g4 = 0;
    int32_t v1 = g6; // 0x2c3e5
    g6 = a2;
    g7 = a1;
    int32_t v2 = *(int32_t *)a2; // 0x2c3ec
    g9 = v2;
    if (v2 != *(int32_t *)a1) {
        // 0x2c3f2
        g6 = v1;
        return 0;
    }
    // 0x2c3f8
    g4 = 1;
    if (v2 == 1) {
        // 0x2c3f2
        g6 = v1;
        return 1;
    }
    // 0x2c402
    g4 = 0;
    int32_t result; // 0x2c411
    if (v2 == 3) {
        uint16_t v3 = *(int16_t *)(a1 + 4); // 0x2c409
        int32_t v4 = v3; // 0x2c409
        g4 = v4;
        result = (int32_t)(*(int16_t *)(a2 + 4) == v3) | v4 & 0xff00;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x2c3f2
    g6 = v1;
    return result;
}

// Address range: 0x2c420 - 0x2c461
int32_t function_2c420(int32_t a1, int32_t a2) {
    // 0x2c420
    g4 = 0;
    int32_t v1 = g6; // 0x2c425
    g6 = a2;
    g7 = a1;
    int32_t v2 = *(int32_t *)a2; // 0x2c42c
    g9 = v2;
    if (v2 != *(int32_t *)a1) {
        // 0x2c432
        g6 = v1;
        return 0;
    }
    // 0x2c438
    g4 = 1;
    if (v2 == 1) {
        // 0x2c432
        g6 = v1;
        return 1;
    }
    // 0x2c442
    g4 = 0;
    int32_t result; // 0x2c45c
    if (v2 == 3) {
        uint32_t v3 = *(int32_t *)(a2 + 4); // 0x2c449
        g9 = v3;
        uint32_t v4 = *(int32_t *)(a1 + 4); // 0x2c44c
        int32_t v5 = v3 % 0x1000000; // 0x2c44f
        g9 = v5;
        result = (int32_t)(v5 == v4 % 0x1000000) | v4 & 0xffff00;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x2c432
    g6 = v1;
    return result;
}

// Address range: 0x2c470 - 0x2c4d1
int32_t function_2c470(int32_t a1) {
    // 0x2c470
    g4 = 1;
    g7 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x2c47b
    g9 = v1;
    if (v1 == 1) {
        // 0x2c489
        return 1;
    }
    // 0x2c482
    g4 = 0;
    if (v1 != 3) {
        // 0x2c489
        return 0;
    }
    unsigned char v2 = *(char *)(a1 + 4); // 0x2c490
    g9 = v2;
    if (v2 == 127) {
        // 0x2c4b8
        g4 = 1;
        return 1;
    }
    if (v2 == 10) {
        // 0x2c4b8
        g4 = 1;
        return 1;
    }
    if (v2 == -84) {
        unsigned char v3 = *(char *)(a1 + 5); // 0x2c4c0
        g9 = v3;
        if (v3 >= 16) {
            int32_t result = v3 < 32; // 0x2c4cd
            g4 = result;
            return result;
        }
    } else {
        if (v2 == -64) {
            int32_t result2 = *(char *)(a1 + 5) >= 168; // 0x2c4ad
            g4 = result2;
            return result2;
        }
    }
    // 0x2c489
    return 0;
}

// Address range: 0x2c4e0 - 0x2c63d
int32_t function_2c4e0(int32_t a1, uint32_t a2) {
    int32_t v1 = g6; // 0x2c4e6
    int32_t v2 = g404; // 0x2c4e9
    int32_t v3 = g10; // 0x2c4ef
    g10 = a1;
    int32_t v4 = g8; // 0x2c4f5
    g8 = a2 % 256;
    g404 = v2 + 1;
    int32_t v5 = 64 * (v2 % 4) + (int32_t)&g405; // 0x2c526
    g6 = v5;
    g4 = function_2d970((int32_t *)v5, (int32_t)"unknown", 64);
    int32_t v6 = g10; // 0x2c534
    int32_t v7 = *(int32_t *)v6; // 0x2c534
    g4 = v7;
    if (v7 == 1) {
        // 0x2c5c0
        g4 = function_2d970((int32_t *)g6, (int32_t)"loopback", 64);
    } else {
        if (v7 == 2) {
            // 0x2c5e0
            g4 = function_2d970((int32_t *)g6, (int32_t)"broadcast", 64);
        } else {
            if (v7 == 3) {
                int32_t v8 = g8; // 0x2c560
                g4 = v8;
                if ((char)v8 == 0) {
                    uint16_t v9 = llvm_bswap_i16(*(int16_t *)(v6 + 8)); // 0x2c56e
                    g4 = (int32_t)v9 & (int32_t)&g863;
                    g4 = (int32_t)*(char *)(v6 + 7);
                    g4 = (int32_t)*(char *)(v6 + 6);
                    g4 = (int32_t)*(char *)(v6 + 5);
                    g4 = (int32_t)*(char *)(v6 + 4);
                    function_2da40(g6, 64, "%i.%i.%i.%i:%i");
                    int32_t result = g6; // 0x2c5b1
                    g4 = result;
                    g10 = v3;
                    g6 = v1;
                    g8 = v4;
                    return result;
                }
                // 0x2c600
                g4 = (int32_t)*(char *)(v6 + 7);
                g4 = (int32_t)*(char *)(v6 + 6);
                g4 = (int32_t)*(char *)(v6 + 5);
                g4 = (int32_t)*(char *)(v6 + 4);
                g4 = function_2da40(g6, 64, "%i.%i.%i.%i");
            }
        }
    }
    int32_t result2 = g6; // 0x2c54d
    g4 = result2;
    g10 = v3;
    g6 = v1;
    g8 = v4;
    return result2;
}

// Address range: 0x2c640 - 0x2c652
int32_t function_2c640(int32_t a1) {
    // 0x2c640
    g4 = a1;
    int32_t result = (int32_t)(*(int32_t *)(a1 + 4) == 0x100007f) | a1 & -256; // 0x2c64e
    g4 = result;
    return result;
}

// Address range: 0x2c660 - 0x2c66e
int32_t function_2c660(int32_t a1) {
    // 0x2c660
    g4 = a1;
    int32_t result = (int32_t)(*(int32_t *)a1 == 1) | a1 & -256; // 0x2c66a
    g4 = result;
    return result;
}

// Address range: 0x2c670 - 0x2c694
int32_t function_2c670(int32_t a1) {
    // 0x2c670
    g4 = a1;
    *(char *)(a1 + 7) = 0;
    *(char *)(g4 + 6) = 0;
    *(char *)(g4 + 5) = 0;
    *(char *)(g4 + 4) = 0;
    *(int16_t *)(g4 + 8) = 0;
    *(int32_t *)g4 = 0;
    return g4;
}

// Address range: 0x2c6a0 - 0x2c6c0
int32_t function_2c6a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x2c6a0
    g4 = a1;
    *(char *)(a1 + 4) = (char)a2;
    *(char *)(g4 + 5) = (char)a3;
    *(char *)(g4 + 6) = (char)a4;
    g9 = a5;
    *(char *)(g4 + 7) = (char)a5;
    return g4;
}

// Address range: 0x2c6c0 - 0x2c6d0
int32_t function_2c6c0(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    g9 = v1;
    int32_t v2 = llvm_bswap_i32(a2); // 0x2c6c9
    g4 = v2;
    *(int32_t *)(v1 + 4) = v2;
    return g4;
}

// Address range: 0x2c6d0 - 0x2c6dd
int32_t function_2c6d0(int32_t * a1, int32_t a2) {
    // 0x2c6d0
    g9 = a2;
    g4 = (int32_t)a1;
    *a1 = a2;
    return g4;
}

// Address range: 0x2c6e0 - 0x2c6ea
int32_t function_2c6e0(int32_t a1) {
    // 0x2c6e0
    g4 = a1;
    int32_t result = *(int32_t *)a1; // 0x2c6e7
    g4 = result;
    return result;
}

// Address range: 0x2c6f0 - 0x2c700
int32_t function_2c6f0(int32_t a1) {
    // 0x2c6f0
    g4 = a1;
    int32_t result = llvm_bswap_i16(*(int16_t *)(a1 + 8)); // 0x2c6fb
    g4 = result;
    return result;
}

// Address range: 0x2c700 - 0x2c70b
int32_t function_2c700(int32_t a1) {
    // 0x2c700
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 4); // 0x2c707
    g4 = result;
    return result;
}

// Address range: 0x2c710 - 0x2c71d
int32_t function_2c710(int32_t a1) {
    // 0x2c710
    g4 = a1;
    int32_t result = llvm_bswap_i32(*(int32_t *)(a1 + 4)); // 0x2c71a
    g4 = result;
    return result;
}

// Address range: 0x2c720 - 0x2c72d
int32_t function_2c720(int32_t a1) {
    // 0x2c720
    g4 = a1;
    int32_t result = llvm_bswap_i32(*(int32_t *)(a1 + 4)); // 0x2c72a
    g4 = result;
    return result;
}

// Address range: 0x2c730 - 0x2c7dd
int32_t function_2c730(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x2c736
    g6 = a2;
    int32_t v2 = g10; // 0x2c73c
    g10 = a1;
    g4 = function_2cb00((int32_t *)a2, 0, 16);
    int32_t result = *(int32_t *)g10; // 0x2c75a
    g4 = result;
    if (result == 2) {
        // 0x2c7a0
        *(int16_t *)g6 = 2;
        g4 = (int32_t)*(int16_t *)(g10 + 8);
        *(int32_t *)(g6 + 4) = -1;
        *(int16_t *)(g6 + 2) = (int16_t)g4;
        g6 = v1;
        g10 = v2;
        return g4;
    }
    if (result == 3) {
        // 0x2c7c0
        *(int16_t *)g6 = 2;
        int32_t v3 = *(int32_t *)(g10 + 4); // 0x2c7c5
        g4 = v3;
        *(int32_t *)(g6 + 4) = v3;
        uint16_t v4 = *(int16_t *)(g10 + 8); // 0x2c7cb
        g4 = v4;
        *(int16_t *)(g6 + 2) = v4;
        g6 = v1;
        g10 = v2;
        return g4;
    }
    if (result != 1) {
        // 0x2c76b
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x2c778
    *(int16_t *)g6 = 2;
    g4 = (int32_t)*(int16_t *)(g10 + 8);
    *(int32_t *)(g6 + 4) = 0x7f000001;
    *(int16_t *)(g6 + 2) = (int16_t)g4;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x2c7e0 - 0x2c82b
int32_t function_2c7e0(int32_t a1, int32_t a2) {
    // 0x2c7e0
    g9 = a2;
    g4 = a1;
    if (*(int16_t *)a2 != 2) {
        // 0x2c7ef
        *(char *)(a1 + 7) = 0;
        *(char *)(g4 + 6) = 0;
        *(char *)(g4 + 5) = 0;
        *(char *)(g4 + 4) = 0;
        *(int16_t *)(g4 + 8) = 0;
        *(int32_t *)g4 = 0;
        g4 = 0;
        return 0;
    }
    // 0x2c810
    *(int32_t *)a1 = 3;
    int32_t v1 = *(int32_t *)(g9 + 4); // 0x2c816
    g7 = v1;
    *(int32_t *)(g4 + 4) = v1;
    uint16_t v2 = *(int16_t *)(g9 + 2); // 0x2c81c
    g9 = v2;
    *(int16_t *)(g4 + 8) = v2;
    g4 = 1;
    return 1;
}

// Address range: 0x2c830 - 0x2c84f
int32_t function_2c830(int32_t a1) {
    // 0x2c830
    g4 = 0;
    g9 = a1;
    if (*(int16_t *)(a1 + 8) == 0) {
        // 0x2c84d
        return 0;
    }
    int32_t v1 = *(int32_t *)a1; // 0x2c83f
    g7 = v1;
    int32_t result; // 0x2c84a
    if (v1 != 0) {
        int32_t v2 = *(int32_t *)(a1 + 4); // 0x2c845
        result = (int32_t)(v2 != 0) | v2 & -256;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x2c84d
    return result;
}

// Address range: 0x2c850 - 0x2c868
int32_t function_2c850(int32_t a1) {
    // 0x2c850
    g4 = 0;
    g9 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x2c858
    g7 = v1;
    int32_t result; // 0x2c863
    if (v1 != 0) {
        int32_t v2 = *(int32_t *)(a1 + 4); // 0x2c85e
        result = (int32_t)(v2 != 0) | v2 & -256;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x2c866
    return result;
}

// Address range: 0x2c870 - 0x2c884
int32_t function_2c870(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    g9 = v1;
    uint16_t v2 = llvm_bswap_i16((int16_t)a2); // 0x2c87a
    g4 = v2;
    *(int16_t *)(v1 + 8) = v2;
    return g4;
}

// Address range: 0x2c890 - 0x2c891
int32_t function_2c890(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2c890
    return g4;
}

// Address range: 0x2c924 - 0x2c965
int32_t function_2c924(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x2e7e03f8); // 0x2c924
    *v1 = *v1 + 1;
    int32_t v2; // ebp
    int32_t v3 = *(int32_t *)(v2 - 44); // 0x2c92a
    g9 = v3;
    *(char *)(g6 + 4) = (char)v3;
    int32_t v4 = *(int32_t *)(v2 - 40); // 0x2c933
    g9 = v4;
    *(char *)(g6 + 5) = (char)v4;
    int32_t v5 = *(int32_t *)(v2 - 36); // 0x2c939
    g9 = v5;
    *(char *)(g6 + 6) = (char)v5;
    int32_t v6 = *(int32_t *)(v2 - 32); // 0x2c93f
    g9 = v6;
    *(char *)(g6 + 7) = (char)v6;
    if (g4 == 5) {
        uint16_t v7 = llvm_bswap_i16(*(int16_t *)(v2 - 28)); // 0x2c94b
        g4 = v7;
        *(int16_t *)(g6 + 8) = v7;
    }
    // 0x2c958
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x2c96d - 0x2c974
int32_t function_2c96d(void) {
    int32_t result = function_fed4bd8d(); // 0x2c96d
    g4 = result;
    return result;
}

// Address range: 0x2c9d9 - 0x2c9dc
int32_t function_2c9d9(void) {
    // 0x2c9d9
    return g4;
}

// Address range: 0x2c9dc - 0x2c9ef
int32_t function_2c9dc(void) {
    unsigned char v1 = *(char *)&g4; // 0x2c9dc
    *(char *)g4 = v1 / 64 | 4 * v1;
    *(int32_t *)(g6 + 8) = g4;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x2c9f0 - 0x2ca1c
int32_t function_2c9f0(int32_t a1, int32_t a2) {
    // 0x2c9f0
    g4 = 1;
    int32_t v1 = g6; // 0x2c9f8
    g9 = a1;
    g7 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x2c9ff
    g6 = v2;
    uint32_t v3 = *(int32_t *)(a2 + 4); // 0x2ca02
    if (v3 < v2) {
        // 0x2ca19
        g6 = v1;
        return 1;
    }
    // 0x2ca07
    g4 = 0;
    int32_t result; // 0x2ca16
    if (v3 == v2) {
        uint16_t v4 = *(int16_t *)(a1 + 8); // 0x2ca0e
        int32_t v5 = v4; // 0x2ca0e
        g4 = v5;
        result = (int32_t)(*(int16_t *)(a2 + 8) < v4) | v5 & 0xff00;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x2ca19
    g6 = v1;
    return result;
}

// Address range: 0x2ca65 - 0x2cab2
int32_t function_2ca65(int32_t a1, int32_t a2) {
    // 0x2ca65
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x662375c0); // 0x2ca65
    *v2 = *v2 + 1;
    if (*(int32_t *)(v1 - 28) == 2) {
        // 0x2ca98
        g4 = *(int32_t *)(v1 - 24);
        *(int32_t *)g6 = 3;
        *(int32_t *)(g6 + 4) = g4;
        uint16_t v3 = *(int16_t *)(v1 - 26); // 0x2caa4
        g4 = v3;
        *(int16_t *)(g6 + 8) = v3;
        g6 = a1;
        return g4;
    }
    // 0x2ca71
    *(char *)(g6 + 7) = 0;
    *(char *)(g6 + 6) = 0;
    *(char *)(g6 + 5) = 0;
    *(char *)(g6 + 4) = 0;
    *(int16_t *)(g6 + 8) = 0;
    *(int32_t *)g6 = 0;
    g6 = a1;
    return g4;
}

// Address range: 0x2cac0 - 0x2caf5
int32_t function_2cac0(void) {
    int32_t v1 = g4; // 0x2cac0
    g9 = v1;
    int32_t result = v1 - 48; // 0x2cac3
    g4 = result;
    if ((char)result < 10) {
        // 0x2cae4
        return result;
    }
    int32_t v2 = v1 - 65; // 0x2cacc
    g4 = v2;
    if ((char)v2 < 6) {
        int32_t result2 = v1 - 55; // 0x2caf0
        g4 = result2;
        return result2;
    }
    int32_t v3 = v1 - 97; // 0x2cad3
    g7 = v3;
    int32_t v4 = v1 - 87; // 0x2cadb
    g9 = v4;
    int32_t result3 = (char)v3 < 6 ? v4 : 48; // 0x2cae1
    g4 = result3;
    // 0x2cae4
    return result3;
}

// Address range: 0x2cb00 - 0x2cb04
int32_t function_2cb00(int32_t * a1, int32_t a2, int32_t a3) {
    // 0x2cb00
    return g4;
}

// Address range: 0x2cb10 - 0x2cb14
int32_t function_2cb10(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2cb10
    return g4;
}

// Address range: 0x2cb20 - 0x2cb24
int32_t function_2cb20(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2cb20
    return g4;
}

// Address range: 0x2cb30 - 0x2cb34
int32_t function_2cb30(int32_t * a1, char * a2, int32_t a3) {
    // 0x2cb30
    return g4;
}

// Address range: 0x2cb40 - 0x2cb4b
int32_t function_2cb40(int32_t a1) {
    // 0x2cb40
    g4 = a1;
    int32_t result; // 0x2cb48
    if (a1 == 0) {
        // bb
        result = function_2cb50((int32_t)&g870);
        g4 = result;
    } else {
        result = a1;
    }
    // 0x2cb4a
    return result;
}

// Address range: 0x2cb50 - 0x2cb54
int32_t function_2cb50(int32_t a1) {
    // 0x2cb50
    g4 = 0;
    return 0;
}

// Address range: 0x2cb60 - 0x2cb61
int32_t function_2cb60(int32_t a1, int32_t a2) {
    // 0x2cb60
    return g4;
}

// Address range: 0x2cb70 - 0x2cb74
int32_t function_2cb70(int32_t a1) {
    // 0x2cb70
    return g4;
}

// Address range: 0x2cb78 - 0x2cbcb
int32_t function_2cb78(int32_t a1, unsigned char a2) {
    // 0x2cb78
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + (int32_t)&g72); // 0x2cb78
    *v2 = *v2 - 1;
    int32_t v3 = g4; // 0x2cb7e
    *(char *)v3 = (char)v3 + *(char *)&g4;
    g5 = &v1;
    int32_t v4 = g10; // 0x2cb83
    int32_t v5 = g6; // bp-12
    g10 = a1;
    g6 = a2;
    int32_t v6 = function_2cb40(a1); // 0x2cb92
    g4 = v6;
    int32_t v7 = g10 + v6; // 0x2cb97
    g10 = v7;
    while (true) {
        if (v6 == 0) {
            // break -> 0x2cbc0
            break;
        }
        int32_t result = v7 - 1; // 0x2cba4
        g10 = result;
        int32_t v8 = v6 - 1; // 0x2cba7
        g4 = v8;
        if (*(char *)result == (char)g6) {
            // 0x2cbae
            g4 = result;
            g6 = v5;
            g10 = v4;
            return result;
        }
        v7 = result;
        v6 = v8;
    }
    // 0x2cbc0
    g6 = v5;
    g4 = 0;
    g10 = v4;
    return 0;
}

// Address range: 0x2cbd0 - 0x2cbd4
int32_t function_2cbd0(int32_t a1, int32_t a2) {
    // 0x2cbd0
    return g4;
}

// Address range: 0x2cbd8 - 0x2cc25
int32_t function_2cbd8(int32_t a1, int32_t a2) {
    // 0x2cbd8
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + (int32_t)&g72); // 0x2cbd8
    *v2 = *v2 - 1;
    int32_t v3 = g4; // 0x2cbde
    *(char *)v3 = (char)v3 + *(char *)&g4;
    g4 = -1;
    int32_t v4 = g6; // 0x2cbe8
    g7 = a1;
    g6 = a2;
    int32_t v5 = *(int32_t *)a1; // 0x2cbef
    g9 = v5;
    if (v5 != *(int32_t *)a2) {
        // 0x2cc16
        g6 = v4;
        return -1;
    }
    // 0x2cbf5
    g4 = 0;
    if (v5 == 0) {
        // 0x2cc16
        g6 = v4;
        return 0;
    }
    int32_t v6 = 0; // 0x2cc00
    while (true) {
        int32_t v7 = *(int32_t *)(a1 + 4 + v6); // 0x2cc07
        g9 = v7;
        if (v7 != *(int32_t *)(a2 + 4 + v6)) {
            // break -> 0x2cc11
            break;
        }
        int32_t v8 = v6 + 4; // 0x2cc00
        g4 = v8;
        if (v7 == 0) {
            // 0x2cc20
            g6 = v4;
            g4 = 0;
            return 0;
        }
        v6 = v8;
    }
    // 0x2cc11
    g4 = -1;
    // 0x2cc16
    g6 = v4;
    return -1;
}

// Address range: 0x2cc30 - 0x2cc4d
int32_t function_2cc30(int32_t a1, char * a2) {
    // 0x2cc30
    g4 = a1;
    g9 = (int32_t)a2;
    int32_t v1 = g7 & -256 | (int32_t)(a1 == 0); // 0x2cc3b
    g7 = v1;
    int32_t v2; // 0x2cc42
    int32_t v3; // 0x2cc40
    if (a2 == NULL) {
        // bb
        v3 = function_2cc58((int32_t)&g870);
        g4 = v3;
        v2 = g7;
    } else {
        v3 = a1;
        v2 = v1;
    }
    int32_t result; // 0x2cc44
    if ((char)v2 != 0) {
        // bb13
        result = function_2cc61((int32_t)&g870);
        g4 = result;
    } else {
        result = v3;
    }
    // 0x2cc46
    return result;
}

// Address range: 0x2cc58 - 0x2cc61
int32_t function_2cc58(int32_t a1) {
    // 0x2cc58
    g5 = a1;
    int32_t result = (char)g7 == 0; // 0x2cc5d
    g4 = result;
    return result;
}

// Address range: 0x2cc61 - 0x2cc68
int32_t function_2cc61(int32_t a1) {
    // 0x2cc61
    g4 = -1;
    g5 = a1;
    return -1;
}

// Address range: 0x2cc70 - 0x2cd1a
int32_t function_2cc70(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x2cc73
    int32_t v2 = g10; // 0x2cc74
    g4 = a1;
    g10 = 1;
    int32_t v3 = g6; // 0x2cc7d
    g6 = a2;
    int32_t v4 = 1; // 0x2ccf415
    int32_t v5; // 0x2ccb16
    int32_t v6; // 0x2ccb17
    int32_t v7; // 0x2ccb810
    int32_t v8; // 0x2ccb89
    int32_t v9; // 0x2ccef
    int32_t v10; // 0x2ccf417
    int32_t v11; // 0x2cc84
    int32_t v12; // 0x2cc9f
    while (true) {
      lab_0x2cc81:;
        unsigned char v13 = *(char *)a1; // 0x2cc81
        int32_t v14 = v13; // 0x2cc81
        g7 = v14;
        unsigned char v15 = *(char *)a2; // 0x2cc84
        v11 = v15;
        g9 = v11;
        if (v13 == v15) {
            v10 = v4;
            v8 = a2;
            v5 = a1;
            v9 = v14;
            goto lab_0x2ccef;
        } else {
            v12 = v14;
            v7 = a2;
            v6 = a1;
            goto lab_0x2cc8b;
        }
    }
  lab_0x2ccf3_2:
    // 0x2ccf3
    g6 = v3;
    int32_t v16; // 0x2ccf4
    int32_t result = v16 ^ 1; // 0x2ccf6
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x2ccef:
    if (v9 == 0) {
        v16 = v10;
        // break -> 0x2ccf3
        goto lab_0x2ccf3_2;
    }
    int32_t v17 = v10; // 0x2ccf416
    int32_t v18 = v8; // 0x2ccb8
    int32_t v19 = v5; // 0x2ccb1
    goto lab_0x2ccb1;
  lab_0x2cc8b:
    if (v11 == 0) {
        goto lab_0x2cd10_3;
    }
    int32_t v34 = v11 - 65; // 0x2cc9c
    g8 = v34;
    int32_t v35 = v12 < 91 ? v12 + 32 : v12; // 0x2cc9f
    g7 = v35;
    int32_t v36 = v11 + 32; // 0x2cca5
    g10 = v36;
    int32_t v37 = v34 < 26 ? v36 : v11; // 0x2cca8
    g9 = v37;
    if (v35 != v37) {
        goto lab_0x2cd10_3;
    }
    // 0x2ccaf
    g10 = 0;
    v17 = 0;
    v18 = v7;
    v19 = v6;
    goto lab_0x2ccb1;
  lab_0x2ccb1:;
    unsigned char v20 = *(char *)(v19 + 1); // 0x2ccb1
    int32_t v21 = v20; // 0x2ccb1
    g7 = v21;
    int32_t v22 = v19 + 2; // 0x2ccb5
    g4 = v22;
    unsigned char v23 = *(char *)(v18 + 1); // 0x2ccb8
    int32_t v24 = v23; // 0x2ccb8
    g9 = v24;
    int32_t v25 = v18 + 2; // 0x2ccbc
    g6 = v25;
    if (v20 == v23) {
        if (v20 == 0) {
            v16 = v17;
            // break -> 0x2ccf3
            goto lab_0x2ccf3_2;
        }
        v4 = v17;
        a2 = v25;
        a1 = v22;
        goto lab_0x2cc81;
    } else {
        if (v23 == 0) {
            goto lab_0x2cd10_3;
        }
        int32_t v26 = v24 - 65; // 0x2ccd0
        g8 = v26;
        int32_t v27 = v20 == 90 | v21 < 90 ? v21 + 32 : v21; // 0x2ccd3
        g7 = v27;
        int32_t v28 = v24 + 32; // 0x2ccd9
        g10 = v28;
        int32_t v29 = v23 == 90 | v26 < 25 ? v28 : v24; // 0x2ccdc
        g9 = v29;
        if (v27 != v29) {
          lab_0x2cd10_3:
            // 0x2cd10
            g6 = v3;
            g4 = -1;
            g10 = v2;
            g8 = v1;
            return -1;
        }
        unsigned char v30 = *(char *)v22; // 0x2cce3
        int32_t v31 = v30; // 0x2cce3
        g7 = v31;
        g10 = 0;
        unsigned char v32 = *(char *)v25; // 0x2cce8
        int32_t v33 = v32; // 0x2cce8
        g9 = v33;
        if (v30 != v32) {
            v12 = v31;
            v11 = v33;
            v7 = v25;
            v6 = v22;
            goto lab_0x2cc8b;
        } else {
            v10 = 0;
            v8 = v25;
            v5 = v22;
            v9 = v31;
            goto lab_0x2ccef;
        }
    }
}

// Address range: 0x2cd50 - 0x2cd51
int32_t function_2cd50(void) {
    // 0x2cd50
    return g4;
}

// Address range: 0x2cd5a - 0x2cd72
int32_t function_2cd5a(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g4 + 0x1c38303); // 0x2cd5a
    int32_t v2 = *v1 - 1; // 0x2cd5a
    *v1 = v2;
    int32_t result; // 0x2cd6c
    if (v2 == 0) {
        // 0x2cd69
        result = g10;
        g4 = result;
        g6 = a1;
        g10 = a2;
        return result;
    }
    unsigned char v3 = *(char *)&g6; // 0x2cd62
    g4 = v3;
    if (v3 != 0) {
        // bb
        g4 = function_2cd50();
    }
    // 0x2cd69
    result = g10;
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x2cd80 - 0x2cd81
int32_t function_2cd80(int32_t a1) {
    // 0x2cd80
    return g4;
}

// Address range: 0x2cda0 - 0x2cda1
int32_t function_2cda0(void) {
    // 0x2cda0
    return g4;
}

// Address range: 0x2cdaa - 0x2cdc2
int32_t function_2cdaa(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g4 + 0x1c38303); // 0x2cdaa
    int32_t v2 = *v1 - 1; // 0x2cdaa
    *v1 = v2;
    int32_t result; // 0x2cdbc
    if (v2 == 0) {
        // 0x2cdb9
        result = g10;
        g4 = result;
        g6 = a1;
        g10 = a2;
        return result;
    }
    unsigned char v3 = *(char *)&g6; // 0x2cdb2
    g4 = v3;
    if (v3 != 0) {
        // bb
        g4 = function_2cda0();
    }
    // 0x2cdb9
    result = g10;
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x2cdf0 - 0x2cdf1
int32_t function_2cdf0(void) {
    // 0x2cdf0
    return g4;
}

// Address range: 0x2cdf7 - 0x2ce0e
int32_t function_2cdf7(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g7 + 0x4c38303); // 0x2cdf7
    int32_t v2 = *v1 - 1; // 0x2cdf7
    *v1 = v2;
    int32_t result; // 0x2ce08
    if (v2 == 0) {
        // 0x2ce05
        result = g10;
        g4 = result;
        g6 = a1;
        g10 = a2;
        return result;
    }
    int32_t v3 = g6; // 0x2cdff
    g4 = v3;
    if (v3 != 0) {
        // bb
        g4 = function_2cdf0();
    }
    // 0x2ce05
    result = g10;
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x2ce30 - 0x2ce31
int32_t function_2ce30(void) {
    // 0x2ce30
    return g4;
}

// Address range: 0x2ce37 - 0x2ce4e
int32_t function_2ce37(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g7 + 0x4c38303); // 0x2ce37
    int32_t v2 = *v1 - 1; // 0x2ce37
    *v1 = v2;
    int32_t result; // 0x2ce48
    if (v2 == 0) {
        // 0x2ce45
        result = g10;
        g4 = result;
        g6 = a1;
        g10 = a2;
        return result;
    }
    int32_t v3 = g6; // 0x2ce3f
    g4 = v3;
    if (v3 != 0) {
        // bb
        g4 = function_2ce30();
    }
    // 0x2ce45
    result = g10;
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x2ce50 - 0x2ceb0
int32_t function_2ce50(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2ce50
    g4 = 0;
    int32_t v1 = g8; // 0x2ce55
    g8 = a3;
    int32_t v2 = g10; // 0x2ce59
    int32_t v3 = g6; // 0x2ce5a
    g10 = a2;
    g6 = a1;
    if (a3 < 1) {
        // 0x2ce9b
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    unsigned char v4 = *(char *)a1; // 0x2ce65
    int32_t v5 = v4; // 0x2ce65
    g9 = v5;
    unsigned char v6 = *(char *)a2; // 0x2ce68
    int32_t v7 = v6; // 0x2ce68
    g7 = v7;
    if (v4 != v6) {
      lab_0x2cea0:
        // 0x2cea0
        g6 = v3;
        char v8 = v5; // 0x2cea3
        char v9 = v8 - (char)v7; // 0x2cea3
        int32_t result = v9 < 0 == ((v9 ^ v8) & (char)(v5 ^ v7)) < 0 ? 1 : -1; // 0x2cea8
        g4 = result;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v10 = a3 - 1; // 0x2ce6f
    g8 = v10;
    if (v4 == 0) {
        // 0x2ce9b
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v11 = 0; // 0x2ce8e
    while (true) {
        if (v11 == v10) {
            // break -> 0x2ce99
            break;
        }
        unsigned char v12 = *(char *)(a1 + 1 + v11); // 0x2ce80
        int32_t v13 = v12; // 0x2ce80
        g9 = v13;
        unsigned char v14 = *(char *)(a2 + 1 + v11); // 0x2ce85
        int32_t v15 = v14; // 0x2ce85
        g7 = v15;
        if (v12 != v14) {
            v7 = v15;
            v5 = v13;
            goto lab_0x2cea0;
        }
        int32_t v16 = v11 + 1; // 0x2ce8e
        g4 = v16;
        if (v12 == 0) {
            // break -> 0x2ce99
            break;
        }
        v11 = v16;
    }
    // 0x2ce99
    g4 = 0;
    // 0x2ce9b
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x2ceb0 - 0x2ceed
int32_t function_2ceb0(int32_t a1, int32_t a2) {
    // 0x2ceb0
    g10 = a2;
    g8 = a1;
    if (a2 == 0) {
        int32_t v1 = function_2ceff((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2cec1
        g4 = v1;
    }
    if (a1 == 0) {
        int32_t v2 = function_2ceff((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2cec5
        g4 = v2;
    }
    int32_t v3 = a2 - 1; // 0x2cec7
    g10 = v3;
    if (v3 == 0) {
        // bb237
        g4 = function_2cf09();
    }
    unsigned char v4 = *(char *)a1; // 0x2cecc
    int32_t result = v4; // 0x2cecc
    g4 = result;
    g6 = a1;
    if (v4 != 0) {
        // 0x2cee7
        return result;
    }
    int32_t result2 = function_2ceff((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2ced5
    g4 = result2;
    return result2;
}

// Address range: 0x2cef5 - 0x2cef6
int32_t function_2cef5(void) {
    // 0x2cef5
    return g4;
}

// Address range: 0x2cefc - 0x2ceff
int32_t function_2cefc(void) {
    // 0x2cefc
    *(char *)g6 = 0;
    return g4;
}

// Address range: 0x2ceff - 0x2cf09
int32_t function_2ceff(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g8; // 0x2cf02
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2cf09 - 0x2cf0d
int32_t function_2cf09(void) {
    // 0x2cf09
    g6 = g8;
    int32_t result = function_2cefc(); // 0x2cf0b
    g4 = result;
    return result;
}

// Address range: 0x2cf10 - 0x2cf79
int32_t function_2cf10(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2cf10
    g7 = 0;
    int32_t v1 = g8; // 0x2cf15
    g8 = a1;
    int32_t v2 = g10; // 0x2cf19
    int32_t v3 = g6; // 0x2cf1a
    int32_t v4 = 0; // 0x2cf54
    while (true) {
        int32_t v5 = a3 - v4; // 0x2cf23
        g4 = v5;
        if (v5 < 1) {
            // break -> 0x2cf5b
            break;
        }
        // 0x2cf29
        g6 = a2;
        char v6 = *(char *)(v4 + a1); // 0x2cf2c
        int32_t v7 = v6; // 0x2cf2c
        g4 = v7;
        char v8 = *(char *)(v4 + a2); // 0x2cf30
        int32_t v9 = v8; // 0x2cf30
        g9 = v9;
        int32_t v10; // 0x2cf44
        if (v6 != v8) {
            int32_t v11 = v9 - 97; // 0x2cf41
            g10 = v11;
            v10 = v6 == 122 | v7 < 122 ? v7 - 32 : v7;
            g4 = v10;
            int32_t v12 = v9 - 32; // 0x2cf4a
            g6 = v12;
            int32_t v13 = v8 == 122 | v11 < 25 ? v12 : v9; // 0x2cf4d
            g9 = v13;
            if (v10 != v13) {
                // 0x2cf68
                g6 = v3;
                int32_t result = 2 * (v10 & (int32_t)&g862 & -256) - 1; // 0x2cf71
                g4 = result;
                g10 = v2;
                g8 = v1;
                return result;
            }
        } else {
            v10 = v7;
        }
        int32_t v14 = v4 + 1; // 0x2cf54
        g7 = v14;
        if (v10 == 0) {
            // break -> 0x2cf5b
            break;
        }
        v4 = v14;
    }
    // 0x2cf5b
    g6 = v3;
    g4 = 0;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x2cf80 - 0x2cf89
int32_t function_2cf80(void) {
    int32_t result = function_2cc30((int32_t)&g870, (char *)&g870); // 0x2cf84
    g4 = result;
    return result;
}

// Address range: 0x2cf90 - 0x2cf99
int32_t function_2cf90(int32_t a1, int32_t a2, int32_t a3) {
    int32_t result = function_2cf10((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2cf94
    g4 = result;
    return result;
}

// Address range: 0x2cfa0 - 0x2cfc5
int32_t function_2cfa0(int32_t a1, char * a2) {
    // 0x2cfa0
    g6 = a1;
    int32_t v1 = (int32_t)a2; // 0x2cfac
    g10 = v1;
    unsigned char v2 = *a2; // 0x2cfb0
    int32_t v3 = v2; // 0x2cfb0
    g8 = v3;
    g4 = v3;
    int32_t v4; // 0x2cfbc
    int32_t v5; // 0x2cfbf
    if (v2 == 0) {
        int32_t v6 = function_2cfe1((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2cfb7
        g4 = v6;
        v4 = g10;
        v5 = g6;
    } else {
        v4 = v1;
        v5 = a1;
    }
    int32_t result = (int32_t)*(char *)v5; // 0x2cfb9
    g4 = result;
    g10 = v4 + 1;
    g6 = v5 + 1;
    return result;
}

// Address range: 0x2cfe1 - 0x2cfeb
int32_t function_2cfe1(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g6; // 0x2cfe4
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x2cff0 - 0x2d019
int32_t function_2cff0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x2cff3
    g4 = a1;
    g9 = a2;
    int32_t result; // 0x2d018
    while (true) {
        unsigned char v2 = *(char *)a2; // 0x2d000
        g7 = v2;
        if (v2 == 0) {
            result = a1;
            // break -> 0x2d016
            break;
        }
        unsigned char v3 = *(char *)a1; // 0x2d007
        g6 = v3;
        int32_t v4 = a2 + 1; // 0x2d00a
        g9 = v4;
        int32_t v5 = a1 + 1; // 0x2d00d
        g4 = v5;
        if (v2 != v3) {
            // 0x2d014
            g4 = 0;
            result = 0;
            goto lab_0x2d016;
        }
        a1 = v5;
        a2 = v4;
    }
  lab_0x2d016:
    // 0x2d016
    g6 = v1;
    return result;
}

// Address range: 0x2d020 - 0x2d1d5
int32_t function_2d020(int32_t a1) {
    int32_t v1 = g8; // 0x2d023
    int32_t v2 = g10; // 0x2d024
    int32_t v3 = g6; // 0x2d025
    g10 = a1;
    unsigned char v4 = *(char *)a1; // 0x2d02c
    int32_t v5 = v4; // 0x2d02c
    g4 = v5;
    if (v4 == 48) {
        unsigned char v6 = *(char *)(a1 + 1); // 0x2d0f0
        g9 = v6;
        if (v6 == 88) {
            goto lab_0x2d102;
        } else {
            if (v6 != 120) {
                goto lab_0x2d03f;
            } else {
                goto lab_0x2d102;
            }
        }
    } else {
        if (v4 == 39) {
            int32_t result = (int32_t)*(char *)(a1 + 1); // 0x2d1c0
            g7 = result;
            g4 = result;
            g9 = result >> 31;
            g10 = v2;
            return result;
        }
        goto lab_0x2d03f;
    }
  lab_0x2d102:;
    int32_t v7 = a1 + 2; // 0x2d102
    g10 = v7;
    g7 = 0;
    g6 = 0;
    int32_t v8 = 0; // 0x2d13b
    int32_t v9 = 0; // 0x2d13b
    int32_t v10; // 0x2d0de
    int32_t result2; // 0x2d0e0
    while (true) {
        // 0x2d110
        g10 = v7;
        unsigned char v11 = *(char *)v7; // 0x2d113
        int32_t v12 = v11; // 0x2d113
        g4 = v12;
        int32_t v13 = v7 + 1; // 0x2d116
        int32_t v14 = v12 >> 31; // 0x2d120
        g9 = v14;
        int32_t v15 = v12 - 48; // 0x2d123
        g10 = v15;
        int32_t v16 = v14 - 1; // 0x2d12b
        int32_t v17 = v16 + (int32_t)(v11 > 47); // 0x2d12b
        g8 = v17;
        if (v17 == 0) {
            if (v15 < 9 || v11 == 57) {
                uint32_t v18 = 16 * v8; // 0x2d13f
                uint32_t v19 = v18 - 48; // 0x2d142
                int32_t v20 = v19 + v12; // 0x2d148
                g7 = v20;
                int32_t v21 = (int32_t)(v20 < v19) + (v8 / 0x10000000 | 16 * v9) - 1 + (int32_t)(v18 > 47) + v14; // 0x2d14a
                g6 = v21;
                v8 = v20;
                v9 = v21;
                v7 = v13;
                // continue -> 0x2d110
                continue;
            }
        }
        int32_t v22 = v12 - 97; // 0x2d154
        g10 = v22;
        int32_t v23 = v16 + (int32_t)(v11 > 96); // 0x2d157
        g8 = v23;
        if (v23 == 0) {
            if (v22 < 5 || v11 == 102) {
                uint32_t v24 = 16 * v8; // 0x2d16e
                uint32_t v25 = v24 - 87; // 0x2d171
                int32_t v26 = v25 + v12; // 0x2d177
                g7 = v26;
                int32_t v27 = (int32_t)(v26 < v25) + (v8 / 0x10000000 | 16 * v9) - 1 + (int32_t)(v24 > 86) + v14; // 0x2d179
                g6 = v27;
                v8 = v26;
                v9 = v27;
                v7 = v13;
                // continue -> 0x2d110
                continue;
            }
        }
        int32_t v28 = v12 - 65; // 0x2d184
        g10 = v28;
        int32_t v29 = v16 + (int32_t)(v11 > 64); // 0x2d187
        g8 = v29;
        if (v29 != 0) {
            result2 = v8;
            v10 = v9;
            // break -> 0x2d0db
            break;
        }
        if (v28 >= 5 && v11 != 70) {
            result2 = v8;
            v10 = v9;
            // break -> 0x2d0db
            break;
        }
        uint32_t v30 = 16 * v8; // 0x2d1a6
        uint32_t v31 = v30 - 55; // 0x2d1a9
        int32_t v32 = v31 + v12; // 0x2d1af
        g7 = v32;
        int32_t v33 = (int32_t)(v32 < v31) + (v8 / 0x10000000 | 16 * v9) - 1 + (int32_t)(v30 > 54) + v14; // 0x2d1b1
        g6 = v33;
        v8 = v32;
        v9 = v33;
        v7 = v13;
    }
    goto lab_0x2d0db;
  lab_0x2d03f:;
    int32_t v34 = v5 - 48; // 0x2d053
    g4 = v34;
    g9 = v4 <= 47;
    if (v4 > 47) {
        if (v34 < 9 || v4 == 57) {
            int32_t v35 = a1 + 1; // 0x2d071
            g10 = v35;
            g7 = v5;
            g6 = 0;
            int32_t v36 = 0; // 0x2d099
            int64_t v37 = 0; // 0x2d089
            int32_t v38 = 0;
            int32_t v39; // 0x2d0ad
            int32_t v40; // 0x2d0b4
            while (true) {
                int32_t v41 = 10 * v38; // 0x2d080
                g8 = v41;
                uint64_t v42 = 10 * v37; // 0x2d089
                int32_t v43 = v42; // 0x2d089
                uint32_t v44 = v5 - 48; // 0x2d093
                g4 = v43;
                int32_t v45 = v36 - 1 + (int32_t)(v5 > 47); // 0x2d0a1
                g9 = v45;
                unsigned char v46 = *(char *)v35; // 0x2d0a4
                int32_t v47 = v46; // 0x2d0a4
                g7 = v47;
                v39 = v43 + v44;
                v40 = v45 + v41 + (int32_t)(v42 / 0x100000000) + (int32_t)(v39 < v44);
                int32_t v48 = v47 >> 31; // 0x2d0b7
                g6 = v48;
                int32_t v49 = v35 + 1; // 0x2d0ba
                g10 = v49;
                int32_t v50 = v47 - 48; // 0x2d0bf
                g4 = v50;
                int32_t v51 = v48 - 1 + (int32_t)(v46 > 47); // 0x2d0c2
                g9 = v51;
                if (v51 != 0) {
                    // break -> 0x2d0d5
                    break;
                }
                // 0x2d0d0
                if (v50 >= 9 && v46 != 57) {
                    // break -> 0x2d0d5
                    break;
                }
                v35 = v49;
                v36 = v48;
                v5 = v47;
                v37 = v39;
                v38 = v40;
            }
            // 0x2d0d5
            g7 = v39;
            g6 = v40;
            result2 = v39;
            v10 = v40;
            goto lab_0x2d0db;
        } else {
            goto lab_0x2d05e;
        }
    } else {
        goto lab_0x2d05e;
    }
  lab_0x2d0db:
    // 0x2d0db
    g9 = v10;
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x2d05e:
    // 0x2d05e
    g7 = 0;
    g6 = 0;
    result2 = 0;
    v10 = 0;
    goto lab_0x2d0db;
}

// Address range: 0x2d1e0 - 0x2d3da
int32_t function_2d1e0(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x2d1e3
    int32_t v2 = g10; // 0x2d1e4
    int32_t v3 = g6; // 0x2d1e5
    g10 = a1;
    unsigned char v4 = *(char *)a1; // 0x2d1fa
    int32_t v5 = v4; // 0x2d1fa
    g4 = v5;
    int32_t v6;
    int64_t v7;
    int32_t v8; // 0x2d330
    int32_t v9; // 0x2d330
    if (v4 == 45) {
        // 0x2d330
        v8 = a1 + 1;
        v9 = (int32_t)*(char *)v8;
        g4 = v9;
        g10 = v8;
        v7 = -1;
        v6 = -1;
    } else {
        v8 = a1;
        v9 = v5;
        v7 = 1;
        v6 = 0;
    }
    char v10 = v9; // 0x2d205
    int32_t v11; // 0x2d2ab
    int32_t v12; // 0x2d3cf
    int32_t v13; // 0x2d3d2
    if (v10 == 48) {
        unsigned char v14 = *(char *)(v8 + 1); // 0x2d2d0
        g9 = v14;
        if (v14 == 88) {
            goto lab_0x2d2e2;
        } else {
            if (v14 != 120) {
                goto lab_0x2d215;
            } else {
                goto lab_0x2d2e2;
            }
        }
    } else {
        if (v10 == 39) {
            int32_t v15 = (int32_t)*(char *)(v8 + 1); // 0x2d3c0
            g7 = v15;
            int32_t v16 = v15 >> 31; // 0x2d3cc
            g9 = v16;
            v12 = v16 * (int32_t)v7;
            g4 = v12;
            v13 = v15 * v6;
            g6 = v13;
            v11 = v15;
            goto lab_0x2d2a6;
        } else {
            goto lab_0x2d215;
        }
    }
  lab_0x2d2e2:;
    int32_t v17 = v8 + 2; // 0x2d2e2
    g7 = 0;
    g6 = 0;
    g10 = v17;
    int32_t v18 = 0; // 0x2d31b
    int32_t v19 = 0; // 0x2d31b
    int32_t v20; // 0x2d29f
    int32_t v21; // 0x2d2a3
    while (true) {
        // 0x2d2f0
        g10 = v17;
        unsigned char v22 = *(char *)v17; // 0x2d2f3
        int32_t v23 = v22; // 0x2d2f3
        g4 = v23;
        int32_t v24 = v17 + 1; // 0x2d2f6
        int32_t v25 = v23 >> 31; // 0x2d300
        g9 = v25;
        int32_t v26 = v23 - 48; // 0x2d303
        g10 = v26;
        int32_t v27 = v25 - 1; // 0x2d30b
        int32_t v28 = v27 + (int32_t)(v22 > 47); // 0x2d30b
        g8 = v28;
        if (v28 == 0) {
            if (v26 < 9 || v22 == 57) {
                uint32_t v29 = 16 * v18; // 0x2d31f
                uint32_t v30 = v29 + v23; // 0x2d322
                int32_t v31 = v30 - 48; // 0x2d326
                g7 = v31;
                int32_t v32 = (int32_t)(v30 <= 47) + (v18 / 0x10000000 | 16 * v19) + v25 + (int32_t)(v30 < v29); // 0x2d329
                g6 = v32;
                v18 = v31;
                v19 = v32;
                v17 = v24;
                // continue -> 0x2d2f0
                continue;
            }
        }
        int32_t v33 = v23 - 97; // 0x2d354
        g10 = v33;
        int32_t v34 = v27 + (int32_t)(v22 > 96); // 0x2d357
        g8 = v34;
        if (v34 == 0) {
            if (v33 < 5 || v22 == 102) {
                uint32_t v35 = 16 * v18; // 0x2d36e
                uint32_t v36 = v35 + v23; // 0x2d371
                int32_t v37 = v36 - 87; // 0x2d375
                g7 = v37;
                int32_t v38 = (int32_t)(v36 <= 86) + (v18 / 0x10000000 | 16 * v19) + v25 + (int32_t)(v36 < v35); // 0x2d378
                g6 = v38;
                v18 = v37;
                v19 = v38;
                v17 = v24;
                // continue -> 0x2d2f0
                continue;
            }
        }
        int32_t v39 = v23 - 65; // 0x2d384
        g10 = v39;
        int32_t v40 = v27 + (int32_t)(v22 > 64); // 0x2d387
        g8 = v40;
        if (v40 != 0) {
            v21 = v18;
            v20 = v19;
            // break -> 0x2d29c
            break;
        }
        if (v39 >= 5 && v22 != 70) {
            v21 = v18;
            v20 = v19;
            // break -> 0x2d29c
            break;
        }
        uint32_t v41 = 16 * v18; // 0x2d3a6
        uint32_t v42 = v41 + v23; // 0x2d3a9
        int32_t v43 = v42 - 55; // 0x2d3ad
        g7 = v43;
        int32_t v44 = (int32_t)(v42 <= 54) + (v18 / 0x10000000 | 16 * v19) + v25 + (int32_t)(v42 < v41); // 0x2d3b0
        g6 = v44;
        v18 = v43;
        v19 = v44;
        v17 = v24;
    }
    goto lab_0x2d29c;
  lab_0x2d215:;
    int32_t v50 = v9 - 48; // 0x2d229
    g4 = v50;
    g9 = v9 <= 47;
    int32_t v49; // 0x2d2ad
    int32_t result; // 0x2d2ab
    if (v9 > 47) {
        if (v50 < 10) {
            int32_t v51 = v8 + 1; // 0x2d24d
            g10 = v51;
            g7 = 0;
            g6 = 0;
            g8 = 10;
            int32_t v52 = 0; // 0x2d25e
            int32_t v53 = 0;
            while (true) {
                int32_t v54 = 10 * v52; // 0x2d25e
                g9 = v54;
                g6 = v53;
                unsigned char v55 = *(char *)v51; // 0x2d271
                int32_t v56 = v55; // 0x2d271
                int32_t v57 = v53 - 1 + v54; // 0x2d282
                g6 = v57;
                int32_t v58 = v56 >> 31; // 0x2d285
                int32_t v59 = v51 + 1; // 0x2d288
                g10 = v59;
                int32_t v60 = v56 - 48; // 0x2d291
                g4 = v60;
                int32_t v61 = v58 - 1 + (int32_t)(v55 > 47); // 0x2d294
                g9 = v61;
                if (v61 != 0) {
                    v20 = v57;
                    // break -> 0x2d29c
                    break;
                }
                if (v60 >= 9 && v55 != 57) {
                    v20 = v57;
                    // break -> 0x2d29c
                    break;
                }
                v51 = v59;
                v52 = v57;
                v53 = v58;
            }
            goto lab_0x2d29c;
        } else {
            result = 0;
            v49 = 0;
            goto lab_0x2d2b5;
        }
    } else {
        result = 0;
        v49 = 0;
        goto lab_0x2d2b5;
    }
  lab_0x2d29c:;
    int32_t v45 = (int64_t)v20 * v7; // 0x2d29f
    g6 = v45;
    int32_t v46 = v21 * v6; // 0x2d2a3
    g4 = v46;
    v11 = v21;
    v12 = v46;
    v13 = v45;
    goto lab_0x2d2a6;
  lab_0x2d2a6:;
    int32_t v47 = v13 + v12; // 0x2d2a6
    g6 = v47;
    uint64_t v48 = (int64_t)v11 * (v7 & 0xffffffff); // 0x2d2ab
    result = v48;
    g4 = result;
    v49 = (int32_t)(v48 / 0x100000000) + v47;
    g9 = v49;
    goto lab_0x2d2b5;
  lab_0x2d2b5:
    // 0x2d2b5
    g4 = result;
    g9 = v49;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x2d3e0 - 0x2d3f3
int32_t function_2d3e0(int32_t a1) {
    int32_t v1 = g5; // 0x2d3e0
    g4 = a1;
    int32_t result = function_2d1e0(a1, v1); // 0x2d3ec
    g4 = result;
    g5 = v1;
    return result;
}

// Address range: 0x2d400 - 0x2d5f9
int32_t function_2d400(int32_t a1) {
    int32_t v1 = g8; // 0x2d403
    g8 = 1;
    int32_t v2 = g10; // 0x2d409
    int32_t v3 = g6; // bp-16
    g9 = a1;
    unsigned char v4 = *(char *)a1; // 0x2d411
    g4 = v4;
    int32_t v5; // 0x2d4d0
    int32_t v6; // 0x2d5ac
    unsigned char v7; // 0x2d4d0
    if (v4 == 45) {
        // 0x2d4d0
        v5 = a1 + 1;
        v7 = *(char *)v5;
        g4 = v7;
        g9 = v5;
        g8 = -1;
        if (v7 != 48) {
            v6 = -1;
            goto lab_0x2d424;
        } else {
            goto lab_0x2d4e4;
        }
    } else {
        // 0x2d41c
        if (v4 == 48) {
            v5 = a1;
            goto lab_0x2d4e4;
        } else {
            v5 = a1;
            v7 = v4;
            v6 = 1;
            goto lab_0x2d424;
        }
    }
  lab_0x2d424:
    // 0x2d424
    if (v7 == 39) {
        int32_t result = (int32_t)*(char *)(v5 + 1) * v6; // 0x2d5ac
        g4 = result;
        __asm_movss_1646(__asm_cvtsi2ss(result));
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    goto lab_0x2d42c;
  lab_0x2d4e4:;
    unsigned char v53 = *(char *)(v5 + 1); // 0x2d4e4
    g7 = v53;
    if (v53 == 88) {
        goto lab_0x2d4f6;
    } else {
        // 0x2d4ed
        if (v53 != 120) {
            goto lab_0x2d42c;
        } else {
            goto lab_0x2d4f6;
        }
    }
  lab_0x2d42c:
    // 0x2d42c
    g6 = 0;
    g10 = -1;
    int128_t v8; // xmm0
    int128_t v9 = v8; // 0x2d433
    v8 = __asm_xorpd(v9, v9);
    int128_t v10 = __asm_movsd_1649(0x4024000000000000); // 0x2d437
    int128_t v11 = __asm_movsd_1649(0x4048000000000000); // 0x2d43f
    uint32_t v12 = g4; // 0x2d480
    int32_t v13 = g9; // 0x2d471
    while (true) {
        int32_t v14 = v13 + 1; // 0x2d471
        g9 = v14;
        int32_t v15; // 0x2d46b
        if (v12 != 46) {
            uint32_t v16 = v12 - 48; // 0x2d450
            g7 = v16;
            if (v16 >= 10) {
                // break -> 0x2d480
                break;
            }
            int128_t v17 = __asm_mulsd(v8, v10); // 0x2d458
            g6++;
            v8 = __asm_subsd(__asm_addsd(v17, __asm_cvtsi2sd(g4)), v11);
            v15 = g9;
        } else {
            // 0x2d479
            g10 = g6;
            v15 = v14;
        }
        int32_t v18 = (int32_t)*(char *)v15; // 0x2d46b
        g4 = v18;
        v12 = v18;
        v13 = v15;
    }
    // 0x2d480
    if (v12 == 101) {
        int32_t v19 = __asm_movsd(v8); // 0x2d5c6
        g4 = function_2d3e0(v19);
        v8 = __asm_movsd_1649((int64_t)v19);
        int32_t v20 = g4; // 0x2d5d5
        if (v20 != 0) {
            int128_t v21 = __asm_cvtsi2sd(v20); // 0x2d5dd
            __asm_movsd(v8);
            __asm_movsd(v21);
            __asm_movsd(__asm_movsd_1649(0x4024000000000000));
            return g4;
        }
    }
    int32_t v22 = g10; // 0x2d489
    if (v22 != -1) {
        int128_t v23 = __asm_movsd_1649(0x4024000000000000); // 0x2d490
        if (v22 < g6) {
            int128_t v24 = __asm_divsd(v8, v23); // 0x2d4a0
            v8 = v24;
            int32_t v25 = g6 - 1; // 0x2d4a4
            g6 = v25;
            while (v25 != g10) {
                // 0x2d4a0
                v24 = __asm_divsd(v24, v23);
                v8 = v24;
                v25 = g6 - 1;
                g6 = v25;
            }
        }
    }
    goto lab_0x2d4ab;
  lab_0x2d4f6:;
    int128_t v28 = __asm_movsd_1649(0x4030000000000000); // 0x2d4f6
    g9 += 2;
    int128_t v29 = v8; // 0x2d501
    v8 = __asm_xorpd(v29, v29);
    int128_t v30 = __asm_movsd_1649(0x4048000000000000); // 0x2d505
    int128_t v31 = __asm_movsd_1649(0x4050400000000000); // 0x2d50d
    int128_t v32 = __asm_movapd(v28); // 0x2d515
    int128_t v33 = __asm_movsd_1649(0x4024000000000000); // 0x2d519
    while (true) {
        int32_t v34 = g9; // 0x2d528
        char v35 = *(char *)v34; // 0x2d528
        int32_t v36 = v35; // 0x2d528
        g4 = v36;
        g9 = v34 + 1;
        uint32_t v37 = v36 - 48; // 0x2d52e
        g7 = v37;
        int32_t v38; // 0x2d580
        if (v37 < 9 || v35 == 57) {
            int128_t v39 = __asm_mulsd(v8, v28); // 0x2d536
            int128_t v40 = __asm_cvtsi2sd(g4); // 0x2d53a
            int32_t v41 = g9; // 0x2d53e
            g4 = (int32_t)*(char *)v41;
            g9 = v41 + 1;
            int128_t v42 = __asm_addsd(v39, v40); // 0x2d544
            int32_t v43 = g4; // 0x2d548
            int32_t v44 = v43 - 48; // 0x2d548
            g7 = v44;
            int128_t v45 = __asm_subsd(v42, v30); // 0x2d54e
            v8 = v45;
            while (v44 < 9 || v43 == 57) {
                // 0x2d536
                v39 = __asm_mulsd(v45, v28);
                v40 = __asm_cvtsi2sd(g4);
                v41 = g9;
                g4 = (int32_t)*(char *)v41;
                g9 = v41 + 1;
                v42 = __asm_addsd(v39, v40);
                v43 = g4;
                v44 = v43 - 48;
                g7 = v44;
                v45 = __asm_subsd(v42, v30);
                v8 = v45;
            }
            // 0x2d554
            v38 = g4;
        } else {
            v38 = v36;
        }
        uint32_t v46 = v38 - 97; // 0x2d554
        g7 = v46;
        int128_t v47;
        if (v46 < 6) {
            int128_t v48 = __asm_mulsd_1655(v8, 0x4030000000000000); // 0x2d55c
            int128_t v49 = __asm_addsd(v48, __asm_cvtsi2sd(g4)); // 0x2d568
            v47 = __asm_addsd_1657(__asm_subsd_1656(v49, 0x4058400000000000), 0x4024000000000000);
        } else {
            uint32_t v50 = v38 - 65; // 0x2d580
            g7 = v50;
            if (v50 >= 6) {
                // break -> 0x2d4ab
                break;
            }
            int128_t v51 = __asm_mulsd(v8, v32); // 0x2d58c
            int128_t v52 = __asm_addsd(v51, __asm_cvtsi2sd(g4)); // 0x2d594
            v47 = __asm_addsd(__asm_subsd(v52, v31), v33);
        }
        // 0x2d528
        v8 = v47;
    }
    goto lab_0x2d4ab;
  lab_0x2d4ab:;
    int128_t v26 = __asm_mulsd(__asm_cvtsi2sd(g8), v8); // 0x2d4af
    int128_t v27 = __asm_unpcklpd(v26, v26); // 0x2d4b3
    __asm_movss_1646(__asm_cvtpd2ps(v27));
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x2d5fd - 0x2d610
int32_t function_2d5fd(void) {
    // 0x2d5fd
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 56)); // 0x2d5ff
    int32_t v3 = v1 - 32; // 0x2d603
    float80_t v4; // st7
    *(float64_t *)v3 = (float64_t)v4;
    __asm_mulsd_1655(v2, *(int64_t *)v3);
    return g4;
}

// Address range: 0x2d62a - 0x2d68a
int32_t function_2d62a(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g5 - 0x76c28b40); // 0x2d62a
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x2d630
    bool v3; // cf
    unsigned char v4 = (char)v2 - (v3 ? 37 : 36); // 0x2d630
    g4 = (int32_t)v4 | v2 & -256;
    int32_t v5 = function_2cb40((int32_t)&g870); // 0x2d632
    g4 = v5;
    int32_t v6 = v5 - 1; // 0x2d637
    int32_t result; // 0x2d672
    if (v5 > 1) {
        // 0x2d63c
        g7 = v6;
        int32_t v7 = g6; // 0x2d63f
        int32_t v8 = v7 + v6; // 0x2d63f
        g10 = v8;
        unsigned char v9 = *(char *)v8; // 0x2d642
        g9 = v9;
        int32_t v10 = v5 - 2 + v7; // 0x2d645
        g4 = v10;
        if (v9 != 48) {
          lab_0x2d667:
            // 0x2d667
            if (v9 == 46) {
                // 0x2d680
                *(char *)g10 = 0;
                g6 = a1;
                g10 = a2;
                return g4;
            }
            result = v10;
        } else {
            while (true) {
                // 0x2d650
                g10 = v10;
                *(char *)(v10 + 1) = 0;
                int32_t v11 = g4;
                if (v6 == 1) {
                    result = v11;
                    // break -> 0x2d66c
                    break;
                }
                int32_t v12 = v11 - 1; // 0x2d65b
                g4 = v12;
                unsigned char v13 = *(char *)v11; // 0x2d65e
                g9 = v13;
                if (v13 != 48) {
                    v10 = v12;
                    v9 = v13;
                    goto lab_0x2d667;
                }
                int32_t v14 = g7 - 1; // 0x2d678
                g7 = v14;
                v10 = v12;
                v6 = v14;
            }
        }
    } else {
        result = v5;
    }
    // 0x2d66c
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x2d690 - 0x2d7a2
int32_t function_2d690(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x2d693
    int32_t v2 = g10; // 0x2d694
    int32_t v3 = g6; // 0x2d695
    g9 = a2;
    g4 = a1;
    if (a2 == 0) {
        // 0x2d790
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    if (a1 == 0) {
      lab_0x2d790:
        // 0x2d790
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    unsigned char v4 = *(char *)a1; // 0x2d6af
    int32_t v5 = v4; // 0x2d6af
    g9 = v5;
    int32_t result;
    if (v4 == 0) {
        result = 0;
      lab_0x2d780_3:
        // 0x2d780
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x2d6c4
    g7 = a2;
    int32_t v6 = (int32_t)*(char *)a2; // 0x2d6c7
    g9 = v6;
    int32_t v7 = v6 - 65; // 0x2d6ca
    g7 = v7;
    int32_t v8 = (char)v7 >= 26 ? v6 : v6 + 32; // 0x2d6d3
    g6 = v8;
    int32_t v9 = a1 + 1; // 0x2d6d6
    g4 = v9;
    int32_t v10 = a2 + 1; // 0x2d726
    while (true) {
        int32_t v11 = v5 % 256; // 0x2d700
        g9 = v11;
        int32_t v12 = (char)(v5 + 191) >= 26 ? v11 : v11 + 32; // 0x2d71b
        g4 = v12;
        int32_t v13; // 0x2d6eb
        if ((char)v12 != (char)v8) {
            // 0x2d6e8
            g4 = v9;
            unsigned char v14 = *(char *)v9; // 0x2d6eb
            v13 = v14;
            g4 = v13;
            if (v14 == 0) {
                // break -> 0x2d790
                break;
            }
        } else {
            // 0x2d723
            g7 = a2;
            unsigned char v15 = *(char *)v10; // 0x2d726
            int32_t v16 = v15; // 0x2d726
            g4 = v16;
            if (v15 == 0) {
                // 0x2d780
                result = v9 - 1;
                goto lab_0x2d780_3;
            }
            // 0x2d72e
            g6 = v9;
            unsigned char v17 = *(char *)v9; // 0x2d731
            int32_t v18 = v17; // 0x2d731
            g9 = v18;
            if (v17 == 0) {
                // break -> 0x2d790
                break;
            }
            // 0x2d73b
            g7 = v10;
            int32_t v19 = v9; // 0x2d772
            int32_t v20 = v18; // 0x2d760
            while (true) {
                int32_t v21 = v16 - 65; // 0x2d75a
                g8 = v21;
                int32_t v22 = (char)(v20 + 191) < 26 ? v20 + 32 : v20; // 0x2d760
                g9 = v22;
                g6 = v21;
                int32_t v23 = v16 + 32; // 0x2d768
                g10 = v23;
                int32_t v24 = (char)v21 < 26 ? v23 : v16; // 0x2d76b
                g4 = v24;
                if ((char)v22 != (char)v24) {
                    v13 = v18;
                    // break -> 0x2d6f9
                    break;
                }
                int32_t v25 = v19 + 1; // 0x2d772
                int32_t v26 = v10 + 1; // 0x2d776
                g7 = v26;
                unsigned char v27 = *(char *)v26; // 0x2d779
                int32_t v28 = v27; // 0x2d779
                g4 = v28;
                if (v27 == 0) {
                    // 0x2d780
                    result = v9 - 1;
                    goto lab_0x2d780_3;
                }
                // 0x2d748
                g6 = v25;
                unsigned char v29 = *(char *)v25; // 0x2d74b
                int32_t v30 = v29; // 0x2d74b
                g9 = v30;
                if (v29 == 0) {
                    // break (via goto) -> 0x2d790
                    goto lab_0x2d790;
                }
                v10 = v26;
                v19 = v25;
                v16 = v28;
                v20 = v30;
            }
        }
        // 0x2d6f9
        v5 = v13;
        v9++;
    }
    // 0x2d790
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x2d7b0 - 0x2d7b9
int32_t function_2d7b0(int32_t * a1, int32_t a2) {
    int32_t result = function_2d690((int32_t)&g870, (int32_t)&g870); // 0x2d7b4
    g4 = result;
    return result;
}

// Address range: 0x2d7c0 - 0x2d912
int32_t function_2d7c0(int32_t result, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x2d7c3
    int32_t v2 = g10; // 0x2d7c4
    int32_t v3 = g6; // 0x2d7c5
    g8 = a2;
    g4 = result;
    g6 = a3;
    if (a2 == 0) {
        // 0x2d900
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    if (result == 0) {
        // 0x2d900
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    unsigned char v4 = *(char *)result; // 0x2d7e2
    int32_t v5 = v4; // 0x2d7e2
    g9 = v5;
    if (v4 == 0) {
        // 0x2d900
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    if (a3 < 1) {
      lab_0x2d900_2:
        // 0x2d900
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x2d7f8
    g7 = a2;
    unsigned char v6 = *(char *)a2; // 0x2d7fe
    int32_t v7 = v6; // 0x2d7fe
    g9 = v7;
    int32_t v8 = v6 >= 91 ? v7 : (v7 + 32) % 256; // 0x2d811
    g7 = v8;
    int32_t v9 = a3 - 1; // 0x2d814
    g6 = v9;
    int32_t v10 = a2 + 1; // 0x2d86b
    while (true) {
        int32_t v11 = v5 % 256; // 0x2d845
        g6 = result;
        g9 = v11;
        int32_t v12 = (char)(v5 + 191) >= 26 ? v11 : v11 + 32; // 0x2d860
        g4 = v12;
        int32_t v13; // 0x2d823
        int32_t v14; // 0x2d823
        if ((char)v12 != (char)v8) {
            // 0x2d820
            g4 = result;
            v13 = result + 1;
            unsigned char v15 = *(char *)v13; // 0x2d823
            v14 = v15;
            g4 = v14;
            if (v15 == 0) {
                // break -> 0x2d900
                break;
            }
        } else {
            // 0x2d868
            g7 = a2;
            unsigned char v16 = *(char *)v10; // 0x2d86b
            int32_t v17 = v16; // 0x2d86b
            g4 = v17;
            if (v16 == 0) {
                // 0x2d8f2
                g4 = result;
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return result;
            }
            // 0x2d873
            g10 = v9;
            if (v9 == 0) {
                // break -> 0x2d900
                break;
            }
            int32_t v18 = result + 1; // 0x2d87e
            unsigned char v19 = *(char *)v18; // 0x2d87e
            int32_t v20 = v19; // 0x2d87e
            g6 = v20;
            if (v19 == 0) {
                // break -> 0x2d900
                break;
            }
            // 0x2d889
            g6 = v10;
            int32_t v21 = v18 + v9; // 0x2d89a
            g10 = v21;
            g9 = v20;
            int32_t v22 = result + 2; // 0x2d8a2
            g7 = v22;
            int32_t v23 = v20; // 0x2d8ce
            while (true) {
                int32_t v24 = v17 - 65; // 0x2d8c8
                g8 = v24;
                int32_t v25 = (char)(v23 + 191) < 26 ? v23 + 32 : v23; // 0x2d8ce
                g9 = v25;
                g6 = v24;
                int32_t v26 = v17 + 32; // 0x2d8d6
                g10 = v26;
                int32_t v27 = (char)v24 < 26 ? v26 : v17; // 0x2d8d9
                g4 = v27;
                if ((char)v25 != (char)v27) {
                    v13 = v18;
                    v14 = v20;
                    // break -> 0x2d832
                    break;
                }
                int32_t v28 = v10 + 1; // 0x2d8e4
                g10 = v28;
                unsigned char v29 = *(char *)v28; // 0x2d8eb
                int32_t v30 = v29; // 0x2d8eb
                g4 = v30;
                if (v29 == 0) {
                    // 0x2d8f2
                    g4 = result;
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
                if (v22 == v21) {
                    // break (via goto) -> 0x2d900
                    goto lab_0x2d900_2;
                }
                int32_t v31 = v22 + 1; // 0x2d8b5
                g7 = v31;
                unsigned char v32 = *(char *)v22; // 0x2d8b8
                int32_t v33 = v32; // 0x2d8b8
                g9 = v33;
                if (v32 == 0) {
                    // break (via goto) -> 0x2d900
                    goto lab_0x2d900_2;
                }
                v22 = v31;
                v10 = v28;
                v17 = v30;
                v23 = v33;
            }
        }
        // 0x2d832
        g4 = v9;
        if (v9 < 1) {
            // break -> 0x2d900
            break;
        }
        result = v13;
        v9--;
        v5 = v14;
    }
    // 0x2d900
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x2d920 - 0x2d961
int32_t function_2d920(int32_t a1, uint32_t a2, int32_t a3) {
    // 0x2d920
    g4 = 0;
    int32_t v1 = g8; // 0x2d925
    int32_t v2 = g10; // 0x2d929
    g8 = a1;
    int32_t v3 = g6; // 0x2d92d
    g6 = a2 % 256;
    int32_t v4 = a3 + a1; // 0x2d932
    g7 = v4;
    if (v4 <= a1) {
        // 0x2d95c
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    unsigned char v5 = *(char *)a1; // 0x2d938
    int32_t v6 = v5; // 0x2d938
    g10 = v6;
    g9 = v6;
    if (v5 == 0) {
        // 0x2d95c
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x2d941
    g4 = a1;
    int32_t result; // 0x2d960
    while (true) {
        if (v5 == (char)a2) {
            result = a1;
            // break -> 0x2d95c
            break;
        }
        int32_t v7 = a1 + 1; // 0x2d953
        g4 = v7;
        if (v7 == v4) {
            // 0x2d95a
            g4 = 0;
            result = 0;
            goto lab_0x2d95c;
        }
        unsigned char v8 = *(char *)v7; // 0x2d948
        g9 = v8;
        if (v8 == 0) {
            // 0x2d95a
            g4 = 0;
            result = 0;
            goto lab_0x2d95c;
        }
        a1 = v7;
        v5 = v8;
    }
  lab_0x2d95c:
    // 0x2d95c
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x2d961 - 0x2d963
int32_t function_2d961(void) {
    int32_t result = function_2d970(&g870, (int32_t)&g870, (int32_t)&g870); // 0x2d961
    g4 = result;
    return result;
}

// Address range: 0x2d970 - 0x2d990
int32_t function_2d970(int32_t * a1, int32_t result, int32_t a3) {
    // 0x2d970
    int32_t v1; // bp-4
    g5 = &v1;
    g4 = result;
    g6 = a3;
    g10 = (int32_t)a1;
    return result;
}

// Address range: 0x2d994 - 0x2d9a8
int32_t function_2d994(void) {
    // 0x2d994
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x39fa8125); // 0x2d994
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x2d99c
    *(int32_t *)v3 = v3 + 1;
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x2d9b0 - 0x2d9b1
int32_t function_2d9b0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2d9b0
    return g4;
}

// Address range: 0x2d9c4 - 0x2d9c8
int32_t function_2d9c4(void) {
    // 0x2d9c4
    g7 |= g4 % 256;
    int32_t result = function_2d9ca(); // 0x2d9c6
    g4 = result;
    return result;
}

// Address range: 0x2d9c9 - 0x2d9ca
int32_t function_2d9c9(int32_t a1) {
    // 0x2d9c9
    return g4;
}

// Address range: 0x2d9ca - 0x2d9d3
int32_t function_2d9ca(void) {
    int32_t result = g4 & -248; // 0x2d9ca
    g4 = result;
    return result;
}

// Address range: 0x2d9d7 - 0x2d9ee
int32_t function_2d9d7(void) {
    // 0x2d9d7
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38f78b25); // 0x2d9d7
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x2d9de
    *(char *)v3 = 2 * (char)v3;
    int32_t v4 = g4; // 0x2d9e2
    *(char *)v4 = (char)v4 + *(char *)&g4;
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x2da1b - 0x2da3c
int32_t function_2da1b(void) {
    // 0x2da1b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x390878c0); // 0x2da1b
    *v2 = *v2 + 1;
    int32_t v3 = g10; // 0x2da21
    float32_t v4 = *(float32_t *)(v3 - 123 + g7); // 0x2da21
    float80_t v5; // st7
    *(float80_t *)(v3 + 10) = (float80_t)v4 / v5;
    *(int32_t *)(v3 - 4 + 4 * g6) = 0;
    int32_t result = g6; // 0x2da30
    g4 = result;
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x2da40 - 0x2da67
int32_t function_2da40(int32_t a1, int32_t a2, char * a3) {
    // 0x2da40
    int32_t v1; // bp-4
    g5 = &v1;
    g6 = a2;
    g10 = a1;
    int32_t result = (int32_t)a3; // 0x2da59
    g4 = result;
    return result;
}

// Address range: 0x2da6b - 0x2da81
int32_t function_2da6b(void) {
    // 0x2da6b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x39f88640); // 0x2da6b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x2da73
    *(int32_t *)v3 = v3 + 1;
    int32_t result = g6; // 0x2da75
    g4 = result;
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x2da81 - 0x2da83
int32_t function_2da81(void) {
    int32_t result = function_2da90((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2da81
    g4 = result;
    return result;
}

// Address range: 0x2da90 - 0x2dab7
int32_t function_2da90(int32_t a1, int32_t a2, int32_t result, int32_t a4) {
    // 0x2da90
    int32_t v1; // bp-4
    g5 = &v1;
    g6 = a2;
    g10 = a1;
    g4 = result;
    return result;
}

// Address range: 0x2dabb - 0x2dad1
int32_t function_2dabb(void) {
    // 0x2dabb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x39f88640); // 0x2dabb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x2dac3
    *(int32_t *)v3 = v3 + 1;
    int32_t result = g6; // 0x2dac5
    g4 = result;
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x2dad1 - 0x2dad3
int32_t function_2dad1(void) {
    int32_t result = function_2dae0((int32_t)&g870, &g870, (int32_t)&g870, &g870, &g870); // 0x2dad1
    g4 = result;
    return result;
}

// Address range: 0x2dae0 - 0x2db0d
int32_t function_2dae0(int32_t a1, int32_t * a2, int32_t result, int32_t * a4, int32_t * a5) {
    // 0x2dae0
    int32_t v1; // bp-4
    g5 = &v1;
    g6 = (int32_t)a5;
    g10 = (int32_t)a2;
    g8 = a1;
    g4 = result;
    return result;
}

// Address range: 0x2db11 - 0x2db1a
int32_t function_2db11(void) {
    // 0x2db11
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x76f88b25); // 0x2db11
    *v2 = *v2 + 1;
    return g4;
}

// Address range: 0x2db1a - 0x2db35
int32_t function_2db1a(int16_t a1) {
    // 0x2db1a
    *(char *)g6 = (char)g9;
    int32_t v1 = g4; // 0x2db1d
    int32_t result; // 0x2db26
    if (v1 < 0) {
        // 0x2db21
        *(char *)(g8 - 1 + g10) = 0;
        result = g10;
        g4 = result;
    } else {
        result = v1;
    }
    // 0x2db28
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return result;
}

// Address range: 0x2db40 - 0x2db5b
int32_t function_2db40(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2db40
    int32_t v1; // bp-4
    g5 = &v1;
    g6 = a1;
    g10 = a3;
    g8 = a2;
    return g4;
}

// Address range: 0x2db61 - 0x2db64
int32_t function_2db61(void) {
    // 0x2db61
    return g4;
}

// Address range: 0x2db84 - 0x2db87
int32_t function_2db84(void) {
    // 0x2db84
    g8++;
    return g4;
}

// Address range: 0x2db9e - 0x2dbb5
int32_t function_2db9e(void) {
    // 0x2db9e
    g10++;
    int32_t v1 = g7; // 0x2dba3
    char * v2 = (char *)(v1 - 0x7427763d); // 0x2dba3
    char v3 = *v2 + (char)v1; // 0x2dba3
    *v2 = v3;
    while (v3 != 0) {
        // 0x2dba3
        v1 = g7;
        v2 = (char *)(v1 - 0x7427763d);
        v3 = *v2 + (char)v1;
        *v2 = v3;
    }
    // 0x2dbab
    int32_t v4; // ebp
    g6 = *(int32_t *)(v4 - 12);
    g8 = *(int32_t *)(v4 - 4);
    return g4;
}

// Address range: 0x2dbdf - 0x2dbe3
int32_t function_2dbdf(void) {
    // 0x2dbdf
    g7++;
    int32_t result = function_2dbe5(); // 0x2dbe1
    g4 = result;
    return result;
}

// Address range: 0x2dbe3 - 0x2dbe5
int32_t function_2dbe3(void) {
    int32_t result = g4; // 0x2dbe3
    g9 = result;
    return result;
}

// Address range: 0x2dbe5 - 0x2dbee
int32_t function_2dbe5(void) {
    // 0x2dbe5
    g4 = *(int32_t *)(g5 + 12);
    *(int32_t *)(g5 - 28) = g9;
    return g4;
}

// Address range: 0x2dc01 - 0x2dc04
int32_t function_2dc01(int32_t a1) {
    unsigned char v1 = (char)(g6 / 256) + *(char *)&g7; // 0x2dc01
    bool v2; // cf
    *(char *)g7 = v1 + (char)v2;
    return g4;
}

// Address range: 0x2dc07 - 0x2dc0a
int32_t function_2dc07(void) {
    // 0x2dc07
    g6++;
    return g4;
}

// Address range: 0x2dc21 - 0x2dc3b
int32_t function_2dc21(void) {
    // 0x2dc21
    g8++;
    int32_t v1 = g4; // 0x2dc26
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g4; // 0x2dc28
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t result = g4; // 0x2dc2a
    g10 = result;
    int32_t v3; // ebp
    g6 = *(int32_t *)(v3 - 12);
    g10 = *(int32_t *)(v3 - 8);
    g8 = *(int32_t *)(v3 - 4);
    return result;
}

// Address range: 0x2dc80 - 0x2dc83
int32_t function_2dc80(void) {
    // 0x2dc80
    return g4;
}

// Address range: 0x2dc86 - 0x2dc8e
int32_t function_2dc86(void) {
    int32_t result = g4 - 0x7ef81f7d; // 0x2dc86
    g4 = result;
    return result;
}

// Address range: 0x2dc9c - 0x2dca6
int32_t function_2dc9c(void) {
    int32_t * v1 = (int32_t *)(g8 + 0xf000001); // 0x2dc9c
    *v1 = g7;
    g7 = *v1;
    return g4;
}

// Address range: 0x2dcb2 - 0x2dcb3
int32_t function_2dcb2(char * a1) {
    // 0x2dcb2
    return g4;
}

// Address range: 0x2dcea - 0x2dced
int32_t function_2dcea(int32_t a1) {
    // 0x2dcea
    return g4;
}

// Address range: 0x2dcef - 0x2dcf8
int32_t function_2dcef(int16_t a1, int32_t a2) {
    // 0x2dcef
    g4 = g4 & -256 | (int32_t)&g857;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    return g4;
}

// Address range: 0x2dd2d - 0x2dd2e
int32_t function_2dd2d(void) {
    // 0x2dd2d
    return g4;
}

// Address range: 0x2dd3c - 0x2ddab
int32_t function_2dd3c(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2dd3c
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x3840fc0); // 0x2dd3c
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x2dd42
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    int32_t v4 = g9 & -0xff01 | (int32_t)&g111; // 0x2dd46
    g9 = v4;
    int32_t v5 = g4 & -256 | (int32_t)*(char *)-0x766ba275; // 0x2dd48
    g4 = v5;
    int32_t v6; // 0x2dd9a
    if ((char)v4 == 0) {
        // 0x2dd3c
        v6 = g6;
    } else {
        int32_t v7 = v5 - g8; // 0x2dd52
        g4 = v7;
        int32_t v8 = v7 - 3; // 0x2dd54
        g7 = v8;
        while (true) {
            int32_t v9; // 0x2dd89
            if (v8 >= 0) {
                int32_t v10 = v8 / 3; // 0x2dd70
                g9 = v10;
                int32_t v11 = 3 * v10; // 0x2dd72
                g4 = v11;
                if (v8 == v11) {
                    int32_t v12 = g6; // 0x2dd79
                    if (v12 != *(int32_t *)(v1 - 108)) {
                        // 0x2dd7e
                        *(char *)v12 = 44;
                        g6++;
                        v9 = g7;
                    } else {
                        v9 = v8;
                    }
                } else {
                    v9 = v8;
                }
            } else {
                v9 = v8;
            }
            int32_t v13 = g8 + 1; // 0x2dd84
            g8 = v13;
            int32_t v14 = g10; // 0x2dd87
            g9 = v14;
            g7 = v9 - 1;
            g10 = (int32_t)*(char *)v13;
            *(char *)g6 = (char)v14;
            int32_t v15 = g6 + 1; // 0x2dd91
            g6 = v15;
            int32_t v16 = g10; // 0x2dd94
            g4 = v16;
            if ((char)v16 == 0) {
                v6 = v15;
                // break -> 0x2dd9a
                break;
            }
            // 0x2dd60
            v8 = g7;
        }
    }
    // 0x2dd9a
    *(char *)v6 = 0;
    int32_t result = *(int32_t *)(v1 - 108); // 0x2dd9d
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2ddb0 - 0x2ddc1
int32_t function_2ddb0(void) {
    // 0x2ddb0
    int128_t v1; // xmm0
    int128_t v2; // xmm2
    __asm_divss(v1, v2);
    int32_t result = function_2dcb2(" KB"); // 0x2ddbc
    g4 = result;
    return result;
}

// Address range: 0x2ddc8 - 0x2de26
int32_t function_2ddc8(void) {
    // 0x2ddc8
    int32_t v1; // ebp
    g6 = v1 - 64;
    int32_t v2 = g10; // 0x2ddcd
    g4 = v2 >= 0 ? v2 : 0;
    int128_t v3; // xmm0
    *(int32_t *)(v1 - 136) = __asm_movss_1646(v3);
    g8 = v1 - 96;
    g4 = function_2da40(g6, 32, "%%.%if%s");
    int128_t v4 = __asm_movss(*(int32_t *)(g5 - 136)); // 0x2ddf9
    int128_t v5 = __asm_unpcklps(v4, v4); // 0x2de08
    int32_t v6 = __asm_movsd(__asm_cvtps2pd(v5)); // 0x2de16
    g4 = function_2da40(v6, (int32_t)&g870, (char *)&g870);
    int32_t result = function_2dd2d(); // 0x2de21
    g4 = result;
    return result;
}

// Address range: 0x2de30 - 0x2de41
int32_t function_2de30(void) {
    // 0x2de30
    int128_t v1; // xmm0
    int128_t v2; // xmm1
    __asm_divss(v1, v2);
    int32_t result = function_2dcb2(" MB"); // 0x2de3c
    g4 = result;
    return result;
}

// Address range: 0x2de58 - 0x2de5d
int32_t function_2de58(void) {
    // 0x2de58
    return g4;
}

// Address range: 0x2de60 - 0x2e29b
int32_t function_2de60(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x2de63
    int32_t v2 = g10; // 0x2de64
    int32_t v3 = g6; // 0x2de65
    int32_t v4 = g410; // 0x2de72
    int32_t v5 = 32 * v4; // 0x2de82
    g9 = v5;
    g410 = (v4 + 1) % 8;
    g4 = a2;
    int32_t v6 = v5 + (int32_t)&g411; // 0x2de8d
    g6 = v6;
    *(char *)v6 = 0;
    int32_t v7;
    int32_t v8;
    if (a2 < 0) {
        int32_t v9 = g6 + function_2cb40(g6); // 0x2e258
        g4 = v9;
        g4 = function_2da40(v9, 32, "-");
        v8 = -a1;
        v7 = -(((int32_t)(a1 != 0) + a2));
    } else {
        v8 = a1;
        v7 = a2;
    }
    if (v7 < 232) {
        goto lab_0x2e0a5;
    } else {
        if (v7 == 232) {
            if (v8 < 0xd4a51000) {
                goto lab_0x2e0a5;
            } else {
                goto lab_0x2deb5;
            }
        } else {
            goto lab_0x2deb5;
        }
    }
  lab_0x2e0a5:
    if (v7 >= 0) {
        if (v7 != 0) {
            goto lab_0x2df28;
        } else {
            if (v8 < 0x3b9aca00) {
                goto lab_0x2e0be;
            } else {
                goto lab_0x2df28;
            }
        }
    } else {
        goto lab_0x2e0be;
    }
  lab_0x2e0be:
    if (v7 > 0) {
        goto lab_0x2e0c8;
    } else {
        if (v7 >= 0) {
            if (v8 < 0xf4240) {
                if (v8 > (int32_t)&g87) {
                    int32_t v10 = function_2cb40(g6); // 0x2e238
                    g4 = v10;
                    g10 = g6 + v10;
                    goto lab_0x2e153;
                } else {
                    goto lab_0x2e28b;
                }
            } else {
                goto lab_0x2e0c8;
            }
        } else {
            goto lab_0x2e28b;
        }
    }
  lab_0x2deb5:
    // 0x2deb5
    g9 = v7;
    g8 = function_2cb40(g6);
    g4 = v8;
    g10 = function_78e90(v8, v7, -0x2b5af000, 232);
    int32_t v11 = g8 + g6; // 0x2deef
    g4 = v11;
    g4 = function_2da40(v11, 32, "%d,");
    int32_t v12 = g6 + function_2cb40(g6); // 0x2df0e
    g4 = v12;
    g4 = function_2da40(v12, 32, "%d,");
    goto lab_0x2df28;
  lab_0x2df28:;
    int32_t v13 = function_2cb40(g6); // 0x2df2b
    g9 = v7;
    g4 = v8;
    g10 = g6 + v13;
    g4 = function_78e90(v8, v7, 0x3b9aca00, 0);
    g4 = function_2da40(g10, 32, "%d,");
    g9 = v7;
    g10 = g6 + function_2cb40(g6);
    g4 = v8;
    int32_t v14 = function_78e90(v8, v7, 0xf4240, 0); // 0x2df9a
    int32_t v15 = v14 / 1000 * (int32_t)&g88; // 0x2dfc7
    g9 = v15;
    g7 = v14 - v15;
    g4 = function_2da40(g10, 32, "%03d,");
    int32_t v16 = function_2cb40(g6); // 0x2dfdb
    g4 = v16;
    g10 = g6 + v16;
    goto lab_0x2dfe3;
  lab_0x2e0c8:;
    int32_t v24 = function_2cb40(g6); // 0x2e0cb
    g9 = v7;
    g4 = v8;
    g10 = g6 + v24;
    int32_t v25 = function_78e90(v8, v7, 0xf4240, 0); // 0x2e0f1
    int32_t v26 = v25 / 1000 * (int32_t)&g88; // 0x2e11e
    g9 = v26;
    g7 = v25 - v26;
    g4 = function_2da40(g10, 32, "%d,");
    int32_t v27 = function_2cb40(g6); // 0x2e132
    g4 = v27;
    g10 = g6 + v27;
    if (v7 >= 0 == (v7 != 0)) {
        goto lab_0x2dfe3;
    } else {
        if (v7 >= 0) {
            if (v8 < 0xf4240) {
                goto lab_0x2e153;
            } else {
                goto lab_0x2dfe3;
            }
        } else {
            goto lab_0x2e153;
        }
    }
  lab_0x2dfe3:
    // 0x2dfe3
    g4 = v8;
    g9 = v7;
    int32_t v17 = function_78e90(v8, v7, (int32_t)&g88, 0); // 0x2e000
    int32_t v18 = v17 / 1000 * (int32_t)&g88; // 0x2e02d
    g9 = v18;
    g7 = v17 - v18;
    g4 = function_2da40(g10, 32, "%03d,");
    int32_t v19 = function_2cb40(g6); // 0x2e041
    g4 = v19;
    g10 = g6 + v19;
    goto lab_0x2e049;
  lab_0x2e049:
    // 0x2e049
    g4 = v8;
    g9 = v7;
    g4 = function_78fec(v8, v7, (int32_t *)&g88, 0);
    function_2da40(g10, 32, "%03d");
    int32_t result = g6; // 0x2e08a
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x2e153:
    // 0x2e153
    g4 = v8;
    g9 = v7;
    int32_t v20 = function_78e90(v8, v7, (int32_t)&g88, 0); // 0x2e170
    int32_t v21 = v20 / 1000 * (int32_t)&g88; // 0x2e19d
    g9 = v21;
    g7 = v20 - v21;
    g4 = function_2da40(g10, 32, "%d,");
    int32_t v22 = function_2cb40(g6); // 0x2e1b1
    g4 = v22;
    g10 = g6 + v22;
    if (v7 >= 0) {
        if (v7 != 0) {
            goto lab_0x2e049;
        } else {
            if (v8 > (int32_t)&g88) {
                goto lab_0x2e049;
            } else {
                goto lab_0x2e1d8;
            }
        }
    } else {
        goto lab_0x2e1d8;
    }
  lab_0x2e28b:;
    int32_t v23 = function_2cb40(g6); // 0x2e28e
    g4 = v23;
    g10 = g6 + v23;
    goto lab_0x2e1d8;
  lab_0x2e1d8:
    // 0x2e1d8
    g4 = v8;
    g9 = v7;
    g4 = function_78fec(v8, v7, (int32_t *)&g88, 0);
    function_2da40(g10, 32, "%d");
    int32_t result2 = g6; // 0x2e219
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x2e2a0 - 0x2e2cf
int32_t function_2e2a0(int32_t a1, int32_t a2, uint32_t a3) {
    // 0x2e2a0
    g4 = 0;
    g9 = a1;
    g6 = a2;
    *(int32_t *)a2 = 0;
    int32_t result; // 0x2e2bc
    if (a1 == 0) {
        // bb
        result = function_2e2dc();
        g4 = result;
    } else {
        // 0x2e2a0
        result = g4;
    }
    // 0x2e2be
    g10 = a3 / 4;
    return result;
}

// Address range: 0x2e2dc - 0x2e2e6
int32_t function_2e2dc(void) {
    // 0x2e2dc
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x2e2f0 - 0x2e337
int32_t function_2e2f0(int32_t result, int32_t a2, uint32_t a3) {
    int32_t v1 = g6; // 0x2e2f6
    g6 = a3;
    int32_t v2 = g10; // 0x2e2fc
    g4 = result;
    g10 = a2;
    if (a3 >= 1) {
        // 0x2e309
        *(char *)a2 = 0;
    }
    if (a2 != 0) {
        if (result != 0) {
            // 0x2e32c
            return result;
        }
    }
    // 0x2e310
    g4 = 0;
    int32_t result2; // 0x2e324
    if (a3 >= 1) {
        // 0x2e316
        *(char *)(a2 - 1 + a3) = 0;
        result2 = g4;
    } else {
        result2 = 0;
    }
    // 0x2e31b
    g6 = v1;
    g10 = v2;
    return result2;
}

// Address range: 0x2e33c - 0x2e33e
int32_t function_2e33c(void) {
    // 0x2e33c
    return g4;
}

// Address range: 0x2e3b2 - 0x2e3d6
int32_t function_2e3b2(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3fce2bab); // 0x2e3b2
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g4 = g9 >= 0 ? *(int32_t *)(v2 - 36) : g4;
    int32_t v3 = g10 / 4; // 0x2e3be
    g10 = v3;
    *(int32_t *)(4 * v3 - 4 + g6) = 0;
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x2e3e0 - 0x2e3e7
int32_t function_2e3e0(void) {
    // 0x2e3e0
    g4 = -1;
    return -1;
}

// Address range: 0x2e417 - 0x2e418
int32_t function_2e417(void) {
    // 0x2e417
    return g4;
}

// Address range: 0x2e466 - 0x2e47b
int32_t function_2e466(void) {
    int32_t v1 = g7; // 0x2e466
    int32_t result = __asm_hlt(); // 0x2e470
    g4 = result;
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x2e4d8 - 0x2e4e7
int32_t function_2e4d8(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x7589e05d); // 0x2e4d8
    *v1 = *v1 - 1;
    g4 = g4 & -256 | (int32_t)__asm_in_1658(-125);
    int32_t result = function_89ff8501(); // 0x2e4e0
    g4 = result;
    return result;
}

// Address range: 0x2e511 - 0x2e515
int32_t function_2e511(void) {
    int32_t v1 = g4; // 0x2e512
    unsigned char v2 = (char)v1; // 0x2e512
    int32_t result = (int32_t)(v2 % 137) | v1 & -0x10000 | (v2 > 136 ? 256 : 0); // 0x2e512
    g4 = result;
    return result;
}

// Address range: 0x2e523 - 0x2e53c
int32_t function_2e523(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2e523
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 + 16); // 0x2e52c
    g9 = v2;
    *(char *)(v2 - 1 + g10) = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2e5b9 - 0x2e5db
int32_t function_2e5b9(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3fce2bab); // 0x2e5b9
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g4 = g9 >= 0 ? *(int32_t *)(v2 + 12) : g4;
    int32_t v3 = g8 / 2; // 0x2e5c5
    g8 = v3;
    *(int16_t *)(2 * v3 - 2 + g6) = 0;
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x2e61c - 0x2e67d
int32_t function_2e61c(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a1bbb); // 0x2e61c
    uint32_t v2 = *v1; // 0x2e61c
    *v1 = v2 - 1;
    if (v2 <= 1) {
        // 0x2e659
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return g4;
    }
    int32_t v3 = *(int32_t *)(g5 + 20); // 0x2e624
    g4 = v3;
    g10 = 0;
    g6 = *(int32_t *)(g5 + 16);
    if (v3 < 1) {
        // 0x2e659
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return g4;
    }
    int32_t v4 = 0; // 0x2e630
    while (true) {
        // 0x2e630
        g4 = (int32_t)*(char *)(g8 + v4);
        int32_t v5 = function_2cac0(); // 0x2e634
        g4 = v5;
        *(char *)(g5 - 29) = (char)v5;
        int32_t v6 = g10; // 0x2e63c
        g4 = (int32_t)*(char *)(g8 + 1 + v6);
        g10 = v6 + 2;
        int32_t v7 = function_2cac0(); // 0x2e644
        g4 = v7;
        int32_t v8 = 16 * (int32_t)*(char *)(g5 - 29) | v7; // 0x2e650
        g9 = v8;
        *(char *)g6 = (char)v8;
        if (*(int32_t *)(g5 - 28) <= g10) {
            // break -> 0x2e659
            break;
        }
        int32_t v9 = g6 + 1; // 0x2e668
        g6 = v9;
        g4 = v9;
        int32_t result = v9 - *(int32_t *)(g5 + 16); // 0x2e66d
        g4 = result;
        if (*(int32_t *)(g5 + 20) <= result) {
            // 0x2e675
            g6 = a1;
            g10 = a2;
            g8 = a3;
            return result;
        }
        // 0x2e668
        v4 = g10;
    }
    // 0x2e659
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2e680 - 0x2e6f6
int32_t function_2e680(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x2e683
    int32_t v2 = g10; // 0x2e684
    int32_t v3 = g6; // 0x2e685
    g9 = a2;
    g8 = a3;
    g4 = a1;
    *(char *)a3 = 0;
    int32_t result; // 0x2e6f5
    if (a2 == 0 || a2 < 0) {
        // 0x2e680
        result = g4;
    } else {
        int32_t v4 = g8; // 0x2e699
        g6 = 0;
        int32_t v5 = g4; // 0x2e69e
        g8 = v5;
        int32_t v6; // bp-38
        int32_t v7 = &v6; // 0x2e6a4
        g10 = v7;
        int32_t v8 = 0; // 0x2e6a8
        g4 = (int32_t)*(char *)(v5 + v8);
        g6 = v8 + 1;
        g4 = function_2da40(v7, 10, "%02x");
        g9 = v4;
        int32_t v9 = function_2db40(v4, v7, a4); // 0x2e6e4
        g4 = v9;
        result = v9;
        while (g6 - a2 != 0) {
            // 0x2e6a8
            v8 = g6;
            g4 = (int32_t)*(char *)(g8 + v8);
            g6 = v8 + 1;
            g4 = function_2da40(v7, 10, "%02x");
            g9 = v4;
            v9 = function_2db40(v4, v7, a4);
            g4 = v9;
            result = v9;
        }
    }
    // 0x2e6ee
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x2e700 - 0x2e826
int32_t function_2e700(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x2e703
    int32_t v2 = g10; // 0x2e704
    int32_t v3 = g6; // 0x2e705
    g6 = a1;
    g9 = a3;
    int32_t v4; // 0x2e788
    int32_t v5; // 0x2e7c9
    int32_t v6; // 0x2e728
    int32_t v7; // 0x2e72f
    if (a1 == 0) {
        goto lab_0x2e770;
    } else {
        unsigned char v8 = *(char *)a1; // 0x2e71c
        int32_t v9 = v8; // 0x2e71c
        g10 = v9;
        g4 = v9;
        if (v8 == 0) {
            goto lab_0x2e770;
        } else {
            // 0x2e725
            v6 = function_2cb40(a1);
            g4 = v6;
            v7 = v6 - 1;
            g8 = v7;
            if (v7 == 0) {
                goto lab_0x2e761;
            } else {
                unsigned char v10 = *(char *)(a1 - 1 + v6); // 0x2e734
                g9 = v10;
                if (v10 == 46) {
                    // 0x2e780
                    g7 = v7;
                    v4 = v7;
                    goto lab_0x2e788;
                } else {
                    if (v10 == 47) {
                        // 0x2e80f
                        g7 = v7;
                        v5 = v7;
                        goto lab_0x2e790;
                    } else {
                        // 0x2e747
                        g7 = v7;
                        if (v10 == 92) {
                            // 0x2e80f
                            g7 = v7;
                            v5 = v7;
                            goto lab_0x2e790;
                        } else {
                            int32_t v11 = v7; // 0x2e758
                            while (true) {
                                int32_t v12 = v11 - 1; // 0x2e758
                                g7 = v12;
                                if (v12 == 0) {
                                    // break -> 0x2e761
                                    break;
                                }
                                unsigned char v13 = *(char *)(v12 + a1); // 0x2e7f8
                                g9 = v13;
                                if (v13 == 46) {
                                    v4 = v12;
                                    goto lab_0x2e788;
                                }
                                if (v13 == 47) {
                                    // 0x2e80f
                                    g7 = v7;
                                    v5 = v7;
                                    goto lab_0x2e790;
                                }
                                if (v13 == 92) {
                                    // 0x2e80f
                                    g7 = v7;
                                    v5 = v7;
                                    goto lab_0x2e790;
                                }
                                v11 = v12;
                            }
                            goto lab_0x2e761;
                        }
                    }
                }
            }
        }
    }
  lab_0x2e788:;
    int32_t v14 = v4 - 1; // 0x2e788
    g7 = v14;
    v5 = v14;
    goto lab_0x2e790;
  lab_0x2e770:
    // 0x2e770
    g9 = a2;
    *(char *)a2 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x2e761:;
    int32_t v25 = g10; // 0x2e761
    g9 = v25;
    g7 = v7;
    if ((char)v25 != 46) {
        v5 = v7;
        goto lab_0x2e790;
    } else {
        // 0x2e76a
        g7 = 0;
        v4 = 0;
        goto lab_0x2e788;
    }
  lab_0x2e790:
    // 0x2e790
    g10 = 0;
    g9 = 0;
    int32_t v15; // 0x2e7c4
    int32_t v16; // 0x2e7db
    if (v7 < 0) {
        v16 = 0;
        goto lab_0x2e7c9;
    } else {
        unsigned char v17 = *(char *)(a1 - 1 + v6); // 0x2e798
        g4 = v17;
        if (v17 == 92) {
            goto lab_0x2e7f0;
        } else {
            // 0x2e7a1
            g9 = v7;
            if (v17 == 47) {
                goto lab_0x2e7f0;
            } else {
                // 0x2e7a7
                g8 = v7;
                int32_t v18 = v7; // 0x2e7b0
                while (true) {
                    int32_t v19 = v18 - 1; // 0x2e7b0
                    g9 = v19;
                    if (v18 == 0) {
                        // break -> 0x2e820
                        break;
                    }
                    unsigned char v20 = *(char *)(v19 + a1); // 0x2e7b8
                    g4 = v20;
                    if (v20 == 47) {
                        v15 = v19;
                        goto lab_0x2e7c4_2;
                    }
                    if (v20 == 92) {
                        v15 = v19;
                        goto lab_0x2e7c4_2;
                    }
                    v18 = v19;
                }
                // 0x2e820
                g10 = 0;
                g9 = 0;
                v16 = 0;
                goto lab_0x2e7c9;
            }
        }
    }
  lab_0x2e7c9:
    // 0x2e7c9
    g9 = a2;
    int32_t v21 = v5 - v16 + 2; // 0x2e7ce
    int32_t v22 = v21 - a3; // 0x2e7d1
    int32_t v23 = v22 < 0 == ((v22 ^ v21) & (v21 ^ a3)) < 0 == (v22 != 0) ? a3 : v21; // 0x2e7d7
    g7 = v23;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    int32_t result = function_2d970((int32_t *)a2, v16 + a1, v23); // 0x2e7ea
    g4 = result;
    return result;
  lab_0x2e7f0:
    // 0x2e7f0
    g9 = v7;
    v15 = v7;
  lab_0x2e7c4_2:;
    int32_t v24 = v15 + 1; // 0x2e7c4
    g9 = v24;
    g10 = v24;
    v16 = v24;
    goto lab_0x2e7c9;
}

// Address range: 0x2e830 - 0x2e86a
int32_t function_2e830(int32_t a1) {
    int32_t v1 = g6; // 0x2e833
    g6 = a1;
    int32_t v2 = function_2cb40(a1); // 0x2e83d
    g4 = v2;
    if (v2 < 1) {
        // 0x2e855
        g6 = v1;
        return g4;
    }
    int32_t v3 = v2 - 1 + g6; // 0x2e846
    g4 = v3;
    char * v4 = (char *)v3; // 0x2e84a
    unsigned char v5 = *v4; // 0x2e84a
    g9 = v5;
    if (v5 == 47) {
        // 0x2e852
        *v4 = 0;
        // 0x2e855
        g6 = v1;
        return g4;
    }
    if (v5 == 92) {
        // 0x2e865
        *v4 = 0;
    }
    // 0x2e855
    g6 = v1;
    return g4;
}

// Address range: 0x2e870 - 0x2e8db
int32_t function_2e870(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x2e873
    int32_t v2 = g10; // 0x2e874
    int32_t v3 = g6; // 0x2e875
    g6 = a1;
    g8 = a2;
    g10 = a3;
    int32_t v4 = function_2cb40(a1); // 0x2e885
    g4 = v4;
    int32_t v5 = v4 - 1; // 0x2e88a
    g9 = v5;
    if (v5 >= 1) {
        int32_t v6 = g6; // 0x2e891
        unsigned char v7 = *(char *)(v5 + v6); // 0x2e891
        int32_t v8 = v7; // 0x2e891
        g4 = v8;
        if (v7 == 46) {
            int32_t v9 = g10; // 0x2e8c0
            if (v5 < v9) {
                int32_t v10 = v9 - 1; // 0x2e8c4
                int32_t v11 = v5 - v10; // 0x2e8c7
                int32_t v12 = v11 == 0 | v11 < 0 != ((v11 ^ v5) & (v10 ^ v5)) < 0 ? v5 : v10; // 0x2e8c9
                g10 = v12;
                int32_t result; // 0x2e8ce
                if (g8 == v6) {
                    // bb24
                    result = function_2e8e0();
                    g4 = result;
                } else {
                    result = v8;
                }
                // 0x2e8d0
                return result;
            }
        } else {
            if (v7 != 92) {
                // bb
                g4 = function_2e8f0();
            }
        }
    }
    int32_t v13 = g8; // 0x2e8a0
    int32_t v14 = g6; // 0x2e8a0
    int32_t v15; // 0x2e8a7
    int32_t v16; // 0x2e8aa
    if (v13 == v14) {
        int32_t v17 = function_2e8e4((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2e8a2
        g4 = v17;
        v16 = g8;
        v15 = g6;
    } else {
        v16 = v13;
        v15 = v14;
    }
    int32_t v18 = g10; // 0x2e8a4
    g6 = v3;
    g10 = v2;
    g8 = v1;
    int32_t result2 = function_2d970((int32_t *)v16, v15, v18); // 0x2e8b4
    g4 = result2;
    return result2;
}

// Address range: 0x2e8e0 - 0x2e8e4
int32_t function_2e8e0(void) {
    // 0x2e8e0
    *(char *)(g10 + g8) = 0;
    return g4;
}

// Address range: 0x2e8e4 - 0x2e8ec
int32_t function_2e8e4(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2e8e4
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2e8f0 - 0x2e912
int32_t function_2e8f0(void) {
    int32_t v1 = g9; // 0x2e8f8
    while (true) {
        int32_t v2 = v1 - 1; // 0x2e8f8
        g9 = v2;
        g4 = (int32_t)*(char *)(v2 + g6);
        v1 = v2;
    }
}

// Address range: 0x2e920 - 0x2e9c7
int32_t function_2e920(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x2e923
    int32_t v2 = g6; // 0x2e924
    g10 = a1;
    g6 = a2;
    int32_t v3 = function_2cb40(a1); // 0x2e934
    g4 = v3;
    int32_t v4 = g10; // 0x2e939
    int32_t v5 = v3 - 1 + v4; // 0x2e939
    g9 = v5;
    unsigned char v6 = *(char *)v5; // 0x2e93d
    int32_t result = v6; // 0x2e93d
    g4 = result;
    if (v6 != 92) {
        if (v6 != 47) {
            if (v4 < v5) {
                while (true) {
                    if (result == 46) {
                        // break -> 0x2e99b
                        break;
                    }
                    int32_t v7 = v5 - 1; // 0x2e9bd
                    unsigned char v8 = *(char *)v7; // 0x2e9bd
                    int32_t v9 = v8; // 0x2e9bd
                    g4 = v9;
                    if (v8 == 47) {
                        goto lab_0x2e950_3;
                    }
                    if (v8 == 92) {
                        goto lab_0x2e950_3;
                    }
                    // 0x2e9b2
                    g9 = v7;
                    if (v7 == v4) {
                        goto lab_0x2e950_3;
                    }
                    v5 = v7;
                    result = v9;
                }
                // 0x2e99b
                g6 = v2;
                g10 = v1;
                return result;
            }
        }
    }
  lab_0x2e950_3:;
    int32_t v10 = g6; // 0x2e950
    int32_t v11; // 0x2e98b
    int32_t v12; // 0x2e98f
    if (*(char *)v10 != 46) {
        // 0x2e955
        int32_t v13; // bp-271
        g4 = &v13;
        char v14 = 46; // bp-272
        g6 = &v14;
        g4 = function_2d970(&v13, v10, (int32_t)&g18);
        v12 = g10;
        v11 = g6;
    } else {
        v12 = v4;
        v11 = v10;
    }
    // 0x2e980
    g4 = a3;
    int32_t result2 = function_2db40(v12, v11, a3); // 0x2e996
    g4 = result2;
    // 0x2e99b
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x2e9d0 - 0x2ea12
int32_t function_2e9d0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x2e9d6
    g6 = a1;
    int32_t v3 = g10; // 0x2e9dc
    g10 = a3;
    int32_t v4 = g8; // 0x2e9e2
    g8 = a2;
    g4 = function_2e870(a1, a1, a3);
    int32_t v5 = g10; // 0x2e9f8
    g10 = v3;
    int32_t v6 = g8; // 0x2e9fe
    g8 = v4;
    int32_t v7 = g6; // 0x2ea04
    g6 = v2;
    g5 = v1;
    int32_t result = function_2e920(v7, v6, v5); // 0x2ea0d
    g4 = result;
    return result;
}

// Address range: 0x2ea20 - 0x2ea61
int32_t function_2ea20(int32_t a1) {
    int32_t v1 = g6; // 0x2ea23
    g6 = a1;
    int32_t result = function_2cb40(a1) - 1; // 0x2ea32
    g4 = result;
    if (result < 1) {
        // 0x2ea5b
        g6 = v1;
        return result;
    }
    int32_t v2 = g6;
    int32_t v3; // 0x2ea58
    while (true) {
        int32_t v4 = result + v2; // 0x2ea39
        unsigned char v5 = *(char *)v4; // 0x2ea39
        g9 = v5;
        g7 = v4;
        if (v5 == 47) {
            v3 = v4;
            // break -> 0x2ea58
            break;
        }
        if (v5 == 92) {
            v3 = v4;
            // break -> 0x2ea58
            break;
        }
        int32_t v6 = result - 1; // 0x2ea4a
        g4 = v6;
        if (v6 == 0) {
            // 0x2ea4f
            g7 = v2;
            v3 = v2;
            goto lab_0x2ea58;
        }
        result = v6;
    }
    goto lab_0x2ea58;
  lab_0x2ea58:
    // 0x2ea58
    *(char *)v3 = 0;
    // 0x2ea5b
    g6 = v1;
    return g4;
}

// Address range: 0x2ea61 - 0x2eaae
int32_t function_2ea61(int32_t a1, unsigned char a2) {
    g9 = a1;
    g7 = a2;
    unsigned char v1 = *(char *)a1; // 0x2ea7a
    int32_t result = v1; // 0x2ea7a
    g4 = result;
    if (v1 == 0) {
        // 0x2ea9a
        return result;
    }
  lab_0x2ea88_2:;
    int32_t result2; // 0x2ea93
    while (true) {
      lab_0x2ea88:
        if (v1 == 47) {
            goto lab_0x2eaa0;
        } else {
            if (v1 == 92) {
                goto lab_0x2eaa0;
            } else {
                int32_t v2 = a1 + 1; // 0x2ea90
                g9 = v2;
                unsigned char v3 = *(char *)v2; // 0x2ea93
                result2 = v3;
                g4 = result2;
                if (v3 == 0) {
                    // break -> 0x2ea9a
                    break;
                }
                a1 = v2;
                v1 = v3;
                goto lab_0x2ea88;
            }
        }
    }
    // 0x2ea9a
    return result2;
  lab_0x2eaa0:
    // 0x2eaa0
    *(char *)a1 = (char)g7;
    int32_t v4 = g9 + 1; // 0x2eaa2
    g9 = v4;
    unsigned char v5 = *(char *)v4; // 0x2eaa5
    int32_t v6 = v5; // 0x2eaa5
    g4 = v6;
    if (v5 == 0) {
        result2 = v6;
        return result2;
    }
    a1 = v4;
    v1 = v5;
    // continue -> 0x2ea88
    goto lab_0x2ea88_2;
}

// Address range: 0x2eab0 - 0x2eb27
int32_t function_2eab0(int32_t a1) {
    int32_t v1 = g8; // 0x2eab3
    int32_t v2 = g10; // 0x2eab4
    int32_t v3 = g6; // 0x2eab5
    g6 = a1;
    int32_t result = function_2cb40(a1); // 0x2eabf
    g4 = result;
    if (result <= 2) {
        // 0x2eb1f
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v4 = result - 1; // 0x2eac9
    g7 = v4;
    int32_t v5 = g6 + 1; // 0x2eacc
    g6 = v5;
    g10 = 1;
    int32_t v6 = 1; // 0x2eaf9
    int32_t v7;
    int32_t result2; // 0x2eaf92
    int32_t v8; // 0x2eb16
    int32_t v9; // 0x2eb19
    while (true) {
      lab_0x2ead8:;
        unsigned char v10 = *(char *)v5; // 0x2ead8
        g9 = v10;
        v7 = v5 + 1;
        if (v10 == 92) {
            goto lab_0x2eae8;
        } else {
            // 0x2eae0
            g8 = v7;
            if (v10 != 47) {
                result2 = result;
                v9 = v7;
                v8 = v6;
                goto lab_0x2eb16;
            } else {
                goto lab_0x2eae8;
            }
        }
    }
  lab_0x2eb1f:
    // 0x2eb1f
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x2eae8:;
    unsigned char v11 = *(char *)v7; // 0x2eae8
    g9 = v11;
    g8 = v7;
    if (v11 == 92) {
        goto lab_0x2eaf9;
    } else {
        if (v11 != 47) {
            result2 = result;
            v9 = v7;
            v8 = v6;
            goto lab_0x2eb16;
        } else {
            goto lab_0x2eaf9;
        }
    }
  lab_0x2eaf9:;
    int32_t v12 = result - v6; // 0x2eaf9
    g4 = v12;
    function_2cb20(v5, v7, v12);
    g4 = v4;
    int32_t v13 = v4 - 1; // 0x2eb13
    g7 = v13;
    v4 = v13;
    result2 = v4;
    v9 = g8;
    v8 = g10;
    goto lab_0x2eb16;
  lab_0x2eb16:;
    int32_t v14 = v8 + 1; // 0x2eb16
    g10 = v14;
    g6 = v9;
    if (v4 <= v14) {
        // break -> 0x2eb1f
        goto lab_0x2eb1f;
    }
    v6 = v14;
    result = result2;
    v5 = v9;
    goto lab_0x2ead8;
}

// Address range: 0x2eb30 - 0x2ec5d
int32_t function_2eb30(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x2eb33
    g10 = 0;
    int32_t v2 = g6; // bp-12
    g6 = a1;
    int32_t v3; // 0x2eb7c
    int32_t v4; // 0x2eb99
    if (*(char *)a1 == 0) {
        goto lab_0x2eb56;
    } else {
        int32_t v5 = function_2cc30(a1, "./"); // 0x2eb4d
        g4 = v5;
        if (v5 != 0) {
            int32_t v6 = function_2cc30(g6, ".\\"); // 0x2eb6b
            g4 = v6;
            if (v6 == 0) {
                goto lab_0x2eb56;
            } else {
                int32_t v7 = function_2cb40(g6); // 0x2eb77
                g4 = v7;
                v3 = g6;
                int32_t v8 = v7 - 1; // 0x2eb7c
                unsigned char v9 = *(char *)(v3 + v8); // 0x2eb7c
                g9 = v9;
                if (v9 == 47) {
                    // 0x2ec00
                    g4 = v8;
                    v4 = v8;
                    goto lab_0x2eb90;
                } else {
                    if (v9 == 92) {
                        // 0x2ec00
                        g4 = v8;
                        v4 = v8;
                        goto lab_0x2eb90;
                    } else {
                        v4 = v7;
                        goto lab_0x2eb90;
                    }
                }
            }
        } else {
            goto lab_0x2eb56;
        }
    }
  lab_0x2ec28:;
    // 0x2ec28
    int32_t v10; // 0x2ec2b
    *(char *)v10 = 47;
    int32_t v11 = g6; // 0x2ec2b
    goto lab_0x2ec2b;
  lab_0x2ec2b:
    // 0x2ec2b
    v10 = v11 + 1;
    g6 = v10;
    unsigned char v12 = *(char *)v10; // 0x2ec2e
    g4 = v12;
    if (v12 == 0) {
        // break -> 0x2ec35
        goto lab_0x2ec35;
    }
    goto lab_0x2ec20;
  lab_0x2ec08_2:
    // 0x2ec08
    *(char *)(v4 + v3) = 0;
    g10 = 1;
    int32_t v13 = g6; // 0x2ec11
    unsigned char v14 = *(char *)v13; // 0x2ec11
    g4 = v14;
    if (v14 != 0) {
        v10 = v13;
        v12 = v14;
        while (true) {
          lab_0x2ec20:
            if (v12 == 47) {
                goto lab_0x2ec28;
            } else {
                if (v12 != 92) {
                    v11 = v10;
                    goto lab_0x2ec2b;
                } else {
                    goto lab_0x2ec28;
                }
            }
        }
      lab_0x2ec35:
        // 0x2ec35
        g6 = v2;
        g4 = 1;
        g10 = v1;
        return 1;
    }
    goto lab_0x2eb56;
  lab_0x2eb56:;
    int32_t result = g10; // 0x2eb59
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
  lab_0x2eb90:
    if (v4 > 0) {
        unsigned char v15 = *(char *)(v3 - 1 + v4); // 0x2eb99
        g9 = v15;
        if (v15 == 47) {
            goto lab_0x2ec08_2;
        } else {
            // 0x2eba3
            g7 = 0;
            g10 = 1;
            if (v15 != 92) {
                int32_t v16 = v3 - 2; // 0x2ebb8
                int32_t v17 = v4; // 0x2ebcd
                int32_t v18 = 0; // 0x2ebca
                char v19 = v15; // 0x2ebc7
                int32_t v20; // 0x2ebca
                while (true) {
                    // 0x2ebc7
                    v20 = v19 == 58 ? 1 : v18;
                    g7 = v20;
                    int32_t v21 = v17 - 1; // 0x2ebcd
                    g4 = v21;
                    if (v21 == 0) {
                        // break -> 0x2ebd2
                        break;
                    }
                    unsigned char v22 = *(char *)(v16 + v17); // 0x2ebb8
                    g9 = v22;
                    if (v22 == 47) {
                        goto lab_0x2ec08_2;
                    }
                    if (v22 == 92) {
                        goto lab_0x2ec08_2;
                    }
                    v17 = v21;
                    v18 = v20;
                    v19 = v22;
                }
                if ((char)v20 != 0) {
                    // 0x2ec48
                    *(char *)v3 = 0;
                    int32_t v23 = v2; // 0x2ec50
                    g6 = v23;
                    g4 = 0;
                    g10 = v1;
                    return 0;
                }
                goto lab_0x2ebd6;
            } else {
                goto lab_0x2ec08_2;
            }
        }
    } else {
        if (v4 != 0) {
            // 0x2ec35
            g6 = v2;
            g4 = 1;
            g10 = v1;
            return 1;
        }
        goto lab_0x2ebd6;
    }
  lab_0x2ebd6:
    // 0x2ebd6
    g4 = a2;
    g10 = 1;
    g4 = function_2da40(v3, a2, ".%c");
    goto lab_0x2eb56;
}

// Address range: 0x2ec60 - 0x2ec61
int32_t function_2ec60(int32_t a1) {
    // 0x2ec60
    return g4;
}

// Address range: 0x2ec7a - 0x2ec81
int32_t function_2ec7a(void) {
    // 0x2ec7a
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x39ff0344); // 0x2ec7a
    *v2 = *v2 - 1;
    return g4;
}

// Address range: 0x2ec81 - 0x2ecc7
int32_t function_2ec81(int32_t a1, int32_t a2) {
    int32_t v1 = g4; // 0x2ec98
    bool v2; // cf
    int32_t v3; // 0x2ec88
    int32_t result;
    if (v2) {
        unsigned char v4 = *(char *)(v1 - 1); // 0x2ec98
        g9 = v4;
        if (v4 != 92) {
            // 0x2eca1
            if (v4 != 47) {
                // 0x2ecb0
                result = g6;
                int32_t v5 = v1; // 0x2ecb0
                while (true) {
                    int32_t v6 = v5 - 1; // 0x2ecb0
                    g4 = v6;
                    if (v6 == result) {
                        // break -> 0x2ec8a
                        break;
                    }
                    unsigned char v7 = *(char *)(v5 - 2); // 0x2ecb7
                    g9 = v7;
                    if (v7 == 47) {
                        v3 = v6;
                        goto lab_0x2ec88_2;
                    }
                    // 0x2ecc0
                    if (v7 == 92) {
                        v3 = v6;
                        goto lab_0x2ec88_2;
                    }
                    v5 = v6;
                }
                // 0x2ec8a
                g4 = result;
                g6 = a1;
                return result;
            }
            v3 = v1;
        } else {
            v3 = v1;
        }
    } else {
        v3 = v1;
    }
  lab_0x2ec88_2:
    // 0x2ec88
    g6 = v3;
    result = v3;
    // 0x2ec8a
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x2ecd0 - 0x2ecd1
int32_t function_2ecd0(int32_t * a1, int32_t * a2, int32_t * a3) {
    // 0x2ecd0
    return g4;
}

// Address range: 0x2ecf8 - 0x2ecf9
int32_t function_2ecf8(void) {
    // 0x2ecf8
    return g4;
}

// Address range: 0x2ed12 - 0x2ed15
int32_t function_2ed12(void) {
    int32_t v1 = g7; // 0x2ed12
    *(int32_t *)v1 = g8 + v1;
    return g4;
}

// Address range: 0x2ed1f - 0x2ed26
int32_t function_2ed1f(void) {
    int32_t result = g4 + 0x755cfa80; // 0x2ed1f
    g4 = result;
    return result;
}

// Address range: 0x2ed26 - 0x2ed29
int32_t function_2ed26(void) {
    // 0x2ed26
    return g4;
}

// Address range: 0x2ed29 - 0x2ed2a
int32_t function_2ed29(void) {
    // 0x2ed29
    return g4;
}

// Address range: 0x2ed43 - 0x2ed58
int32_t function_2ed43(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x97af3bb); // 0x2ed43
    int32_t v2 = *v1 - 1; // 0x2ed43
    *v1 = v2;
    *(char *)(g10 + g4) = 0;
    int32_t result = g4 & -256 | (int32_t)(v2 != 0); // 0x2ed4d
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2ed60 - 0x2ed64
int32_t function_2ed60(void) {
    // 0x2ed60
    g9 = 0;
    int32_t result = function_2ed29(); // 0x2ed62
    g4 = result;
    return result;
}

// Address range: 0x2ed70 - 0x2ed71
int32_t function_2ed70(int32_t a1) {
    // 0x2ed70
    return g4;
}

// Address range: 0x2ed81 - 0x2ed88
int32_t function_2ed81(void) {
    // 0x2ed81
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x39ff0344); // 0x2ed81
    *v2 = *v2 - 1;
    return g4;
}

// Address range: 0x2ed88 - 0x2edbb
int32_t function_2ed88(int32_t a1, int32_t a2) {
    // 0x2ed88
    bool v1; // zf
    if (v1) {
        // 0x2ed9d
        g4 = 0;
        g6 = a1;
        return 0;
    }
    int32_t result = g4; // 0x2edba
    while (true) {
        int32_t v2 = result - 1; // 0x2ed90
        if (*(char *)v2 == 46) {
            // break -> 0x2eda8
            break;
        }
        // 0x2ed96
        g4 = v2;
        if (g6 == v2) {
            // 0x2ed9d
            g4 = 0;
            g6 = a1;
            return 0;
        }
        result = v2;
    }
    unsigned char v3 = *(char *)result; // 0x2eda8
    g9 = v3;
    if (v3 == 47) {
        // 0x2ed9d
        g4 = 0;
        g6 = a1;
        return 0;
    }
    // 0x2edb0
    if (v3 != 92) {
        // 0x2edb5
        g6 = a1;
        return result;
    }
    // 0x2ed9d
    g4 = 0;
    g6 = a1;
    return 0;
}

// Address range: 0x2edc0 - 0x2ee02
int32_t function_2edc0(int32_t a1, int32_t a2) {
    g4 = a1;
    int32_t v1 = g6; // 0x2edc9
    g6 = a2;
    int32_t v2 = g10; // 0x2edcf
    *(char *)a2 = 0;
    int32_t v3 = function_2ed70(g4); // 0x2edd8
    g4 = v3;
    if (v3 == 0) {
        // 0x2edf8
        g6 = v1;
        g10 = v2;
        return 0;
    }
    int32_t v4 = g6; // 0x2ede1
    g10 = v2;
    g6 = v1;
    int32_t result = function_2d970((int32_t *)v4, v3, (int32_t)&g870); // 0x2edf0
    g4 = result;
    return result;
}

// Address range: 0x2ee2a - 0x2ee31
int32_t function_2ee2a(void) {
    // 0x2ee2a
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x39ff0344); // 0x2ee2a
    *v2 = *v2 - 1;
    return g4;
}

// Address range: 0x2ee31 - 0x2ee77
int32_t function_2ee31(int32_t a1, int32_t a2) {
    int32_t v1 = g4; // 0x2ee48
    bool v2; // cf
    int32_t v3; // 0x2ee38
    int32_t result;
    if (v2) {
        unsigned char v4 = *(char *)(v1 - 1); // 0x2ee48
        g9 = v4;
        if (v4 != 92) {
            // 0x2ee51
            if (v4 != 47) {
                // 0x2ee60
                result = g6;
                int32_t v5 = v1; // 0x2ee60
                while (true) {
                    int32_t v6 = v5 - 1; // 0x2ee60
                    g4 = v6;
                    if (v6 == result) {
                        // break -> 0x2ee3a
                        break;
                    }
                    unsigned char v7 = *(char *)(v5 - 2); // 0x2ee67
                    g9 = v7;
                    if (v7 == 47) {
                        v3 = v6;
                        goto lab_0x2ee38_2;
                    }
                    // 0x2ee70
                    if (v7 == 92) {
                        v3 = v6;
                        goto lab_0x2ee38_2;
                    }
                    v5 = v6;
                }
                // 0x2ee3a
                g4 = result;
                g6 = a1;
                return result;
            }
            v3 = v1;
        } else {
            v3 = v1;
        }
    } else {
        v3 = v1;
    }
  lab_0x2ee38_2:
    // 0x2ee38
    g6 = v3;
    result = v3;
    // 0x2ee3a
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x2ee80 - 0x2ef28
int32_t function_2ee80(int32_t a1, uint32_t a2) {
    // 0x2ee80
    g6 = a1;
    g4 = a2 % 256;
    g8 = a1;
    unsigned char v1 = *(char *)a1; // 0x2ee95
    g4 = v1;
    int32_t v2; // 0x2eeb8
    int32_t v3; // 0x2eec3
    int32_t v4; // 0x2eec311
    int32_t v5; // 0x2eed0
    int32_t v6; // 0x2eeac
    int32_t v7; // 0x2eeb1
    int32_t v8; // 0x2eebe
    if (v1 != 0) {
        // 0x2ee9c
        g9 = a1;
        g10 = 0;
        v4 = a1;
        v6 = a1;
        v8 = a1;
        v2 = 0;
        v7 = g7;
        while (true) {
          lab_0x2eeaa:
            // 0x2eeaa
            g6 = (int32_t)(v1 == 47) | v6 & -256;
            unsigned char v9 = (char)(v1 == 47) | (char)(v1 == 92); // 0x2eeb4
            g7 = (int32_t)v9 | v7 & -256;
            if (v9 == 0) {
                goto lab_0x2eebe;
            } else {
                // 0x2eeb8
                g6 = v2;
                if ((char)v2 != 0) {
                    v3 = v4;
                    goto lab_0x2eec3;
                } else {
                    goto lab_0x2eebe;
                }
            }
        }
      lab_0x2eecd:
        // 0x2eecd
        g6 = a1;
        v5 = v8;
    } else {
        v5 = a1;
    }
    // 0x2eed0
    *(char *)v5 = 0;
    int32_t v10 = g6; // 0x2eed3
    g7 = v10;
    g9 = v10;
    g8 = v10;
    unsigned char v11 = *(char *)v10; // 0x2eee842
    g4 = v11;
    if (v11 == 0) {
      lab_0x2ef20:
        // 0x2ef20
        *(char *)v10 = 0;
        g6 = g8;
        return g4;
    }
    int32_t v12; // 0x2eee5
    while (true) {
        int32_t v13 = v10; // 0x2ef0d
        char v14 = v11; // 0x2eee0
        while (true) {
            if (v14 != 46) {
                // break -> 0x2eee0
                break;
            }
            unsigned char v15 = *(char *)(v13 + 1); // 0x2eef3
            int32_t v16 = v15; // 0x2eef3
            g10 = v16;
            g6 = v16;
            if (v15 != 47) {
                if (v15 != 92) {
                    // break -> 0x2eee0
                    break;
                }
            }
            // 0x2ef03
            if (v13 != g8) {
                // 0x2ef07
                if (*(char *)(v13 - 1) == 46) {
                    // break -> 0x2eee0
                    break;
                }
            }
            int32_t v17 = v13 + 2; // 0x2ef0d
            g9 = v17;
            unsigned char v18 = *(char *)v17; // 0x2ef10
            g4 = v18;
            if (v18 == 0) {
                // break (via goto) -> 0x2ef20
                goto lab_0x2ef20;
            }
            v13 = v17;
            v14 = v18;
        }
        // 0x2eee0
        *(char *)v10 = v14;
        int32_t v19 = g9 + 1; // 0x2eee2
        g9 = v19;
        v12 = g7 + 1;
        g7 = v12;
        unsigned char v20 = *(char *)v19; // 0x2eee8
        g4 = v20;
        if (v20 == 0) {
            // break -> 0x2ef20
            break;
        }
        v11 = v20;
        v10 = v12;
    }
    // 0x2ef20
    *(char *)v12 = 0;
    g6 = g8;
    return g4;
  lab_0x2eebe:
    // 0x2eebe
    *(char *)v8 = v1;
    int32_t v21 = g8 + 1; // 0x2eec0
    g8 = v21;
    v3 = g9;
    v8 = v21;
    goto lab_0x2eec3;
  lab_0x2eec3:;
    int32_t v22 = v3 + 1; // 0x2eec3
    g9 = v22;
    unsigned char v23 = *(char *)v22; // 0x2eec6
    g4 = v23;
    if (v23 == 0) {
        // break -> 0x2eecd
        goto lab_0x2eecd;
    }
    int32_t v24 = g7; // 0x2eea8
    g10 = v24;
    v4 = v22;
    v6 = g6;
    v2 = v24;
    v7 = v24;
    v1 = v23;
    goto lab_0x2eeaa;
}

// Address range: 0x2ef2c - 0x2efb0
int32_t function_2ef2c(void) {
    int32_t * v1 = (int32_t *)(g6 + 0xb7e02f8); // 0x2ef2c
    *v1 = *v1 + 1;
    if (*(char *)(g8 - 1 + g4) == 46) {
        // bb
        g4 = function_2efcd();
    }
    int32_t v2 = (int32_t)*(char *)&g6; // 0x2ef3d
    g9 = v2;
    int32_t v3 = g6; // 0x2ef40
    g8 = v3;
    g4 = v2;
    int32_t v4; // 0x2ef50
    while (true) {
        int32_t v5; // 0x2ef55
        if (v2 == 0) {
            // bb242
            v5 = function_2f00a((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
            g4 = v5;
            v4 = g8;
        } else {
            v4 = v3;
            v5 = v2;
        }
        int32_t v6 = v4 + 1; // 0x2ef5d
        unsigned char v7 = *(char *)v6; // 0x2ef5d
        int32_t v8 = v7; // 0x2ef5d
        g4 = v8;
        if ((char)v5 == 46) {
            if (v7 == 46) {
                // break -> 0x2ef67
                break;
            }
        }
        // 0x2ef50
        g8 = v6;
        v3 = v6;
        v2 = v8;
    }
    // 0x2ef67
    int32_t v9; // 0x2ef74
    if (v4 != g6) {
        unsigned char v10 = *(char *)(v4 - 1); // 0x2ef6b
        g7 = v10;
        if (v10 != 47) {
            // bb246
            g4 = function_2efea();
            v9 = g8;
        } else {
            v9 = v4;
        }
    } else {
        v9 = v4;
    }
    unsigned char v11 = *(char *)(v9 + 2); // 0x2ef74
    g7 = v11;
    int32_t v12; // 0x2ef80
    if (v11 != 0) {
        // bb247
        g4 = function_2f056();
        v12 = g8;
    } else {
        v12 = v9;
    }
    int32_t v13 = v12 - 2; // 0x2ef80
    g10 = v13;
    int32_t v14; // 0x2ef87
    if (g6 > v13) {
        int32_t v15 = function_2f000((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2ef85
        g4 = v15;
        v14 = g8;
    } else {
        v14 = v12;
    }
    unsigned char v16 = *(char *)(v14 - 2); // 0x2ef87
    int32_t result = v16; // 0x2ef87
    g4 = result;
    if (v16 == 92) {
        // 0x2efaa
        g8 = v14 + 2;
        return result;
    }
    if (v16 == 47) {
        // 0x2efaa
        g8 = v14 + 2;
        return result;
    }
    int32_t v17 = g10; // 0x2ef9c
    int32_t result2; // 0x2efa3
    while (true) {
        int32_t v18 = v17 - 1; // 0x2ef9c
        g10 = v18;
        int32_t v19; // 0x2efa3
        if (g6 > v18) {
            int32_t v20 = function_2f000((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2efa1
            g4 = v20;
            v19 = g10;
        } else {
            v19 = v18;
        }
        unsigned char v21 = *(char *)v19; // 0x2efa3
        result2 = v21;
        g4 = result2;
        if (v21 == 47) {
            // break -> 0x2efaa
            break;
        }
        if (v21 == 92) {
            // break -> 0x2efaa
            break;
        }
        v17 = v19;
    }
    // 0x2efaa
    g8 += 2;
    return result2;
}

// Address range: 0x2efc8 - 0x2efcd
int32_t function_2efc8(void) {
    // 0x2efc8
    return g4;
}

// Address range: 0x2efcd - 0x2efea
int32_t function_2efcd(void) {
    int32_t v1 = g8 - 2 + g4; // 0x2efcd
    g4 = v1;
    char * v2 = (char *)v1; // 0x2efd1
    g9 = (int32_t)*v2;
    // 0x2efe2
    *v2 = 0;
    return g4;
}

// Address range: 0x2efea - 0x2eff8
int32_t function_2efea(void) {
    // 0x2efea
    return g4;
}

// Address range: 0x2f000 - 0x2f00a
int32_t function_2f000(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2f000
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return 0;
}

// Address range: 0x2f00a - 0x2f056
int32_t function_2f00a(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2f00a
    g4 = 1;
    g4 = (int32_t)*(char *)(g5 - 29);
    int32_t v1 = g9; // 0x2f025
  lab_0x2f020_2:
    while (true) {
      lab_0x2f020:;
        char v2 = v1; // 0x2f020
        if (v2 == 47) {
            goto lab_0x2f048;
        } else {
            if (v2 == 92) {
                goto lab_0x2f048;
            } else {
                int32_t v3 = g6 + 1; // 0x2f02a
                g6 = v3;
                unsigned char v4 = *(char *)v3; // 0x2f02d
                int32_t v5 = v4; // 0x2f02d
                g9 = v5;
                if (v4 == 0) {
                    // break -> 0x2f034
                    break;
                }
                v1 = v5;
                goto lab_0x2f020;
            }
        }
    }
  lab_0x2f034:
    // 0x2f034
    g4 = 1;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 1;
  lab_0x2f048:
    // 0x2f048
    *(char *)g6 = (char)g4;
    int32_t v6 = g6 + 1; // 0x2f04a
    g6 = v6;
    unsigned char v7 = *(char *)v6; // 0x2f04d
    int32_t v8 = v7; // 0x2f04d
    g9 = v8;
    if (v7 == 0) {
        // break -> 0x2f034
        goto lab_0x2f034;
    }
    v1 = v8;
    // continue -> 0x2f020
    goto lab_0x2f020_2;
}

// Address range: 0x2f056 - 0x2f06d
int32_t function_2f056(void) {
    // 0x2f056
    return g4;
}

// Address range: 0x2f070 - 0x2f0bb
int32_t function_2f070(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x2f073
    g6 = a1;
    int32_t result = function_2cb40(a1); // 0x2f07d
    g4 = result;
    if (result < 1) {
        // 0x2f090
        g6 = v1;
        return result;
    }
    unsigned char v2 = *(char *)(result - 1 + g6); // 0x2f086
    g9 = v2;
    if (v2 == 47) {
        // 0x2f090
        g6 = v1;
        return result;
    }
    if (v2 == 92) {
        // 0x2f090
        g6 = v1;
        return result;
    }
    int32_t v3 = result + 1; // 0x2f0a5
    g9 = v3;
    int32_t result2; // 0x2f0ab
    if (v3 < a2) {
        // bb
        result2 = function_2f0c3((int32_t)&g870, (int32_t)&g870);
        g4 = result2;
    } else {
        result2 = result;
    }
    // 0x2f0ad
    return result2;
}

// Address range: 0x2f0c3 - 0x2f0d2
int32_t function_2f0c3(int32_t a1, int32_t a2) {
    // 0x2f0c3
    *(char *)(g4 + g6) = 47;
    *(char *)(g6 + 1 + g4) = 0;
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x2f0e0 - 0x2f174
int32_t function_2f0e0(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4) {
    int32_t v1 = (int32_t)a4;
    int32_t v2 = g10; // 0x2f0e3
    int32_t v3 = g6; // 0x2f0e4
    g6 = (int32_t)a3;
    g4 = a1;
    g10 = v1;
    g4 = function_2d970(a3, a1, v1);
    int32_t v4 = g6; // 0x2f101
    unsigned char v5 = *(char *)v4; // 0x2f101
    g4 = v5;
    int32_t v6; // 0x2f118
    int32_t v7; // 0x2f11b
    int32_t v8; // 0x2f129
    if (v5 != 0) {
        // 0x2f108
        g9 = v4;
        v6 = v4;
        while (true) {
          lab_0x2f110:
            if (v5 == 47) {
                goto lab_0x2f118;
            } else {
                if (v5 != 92) {
                    v7 = v6;
                    goto lab_0x2f11b;
                } else {
                    goto lab_0x2f118;
                }
            }
        }
      lab_0x2f125:
        // 0x2f125
        v8 = g6;
    } else {
        v8 = v4;
    }
    // 0x2f125
    function_2f070(v8, g10);
    g4 = a2;
    g4 = function_2db40(g6, a2, g10);
    int32_t v9 = g6; // 0x2f14c
    unsigned char v10 = *(char *)v9; // 0x2f14c
    int32_t result = v10; // 0x2f14c
    g4 = result;
    if (v10 == 0) {
        // 0x2f16d
        g6 = v3;
        g10 = v2;
        return result;
    }
    int32_t v11; // 0x2f163
    while (true) {
      lab_0x2f158:
        if (v10 == 47) {
            goto lab_0x2f160;
        } else {
            if (v10 != 92) {
                v11 = v9;
                goto lab_0x2f163;
            } else {
                goto lab_0x2f160;
            }
        }
    }
  lab_0x2f16d:
    // 0x2f16d
    g6 = v3;
    g10 = v2;
    int32_t result2; // 0x2f166
    return result2;
  lab_0x2f160:
    // 0x2f160
    *(char *)v9 = 47;
    v11 = g6;
    goto lab_0x2f163;
  lab_0x2f163:;
    int32_t v12 = v11 + 1; // 0x2f163
    g6 = v12;
    unsigned char v13 = *(char *)v12; // 0x2f166
    result2 = v13;
    g4 = result2;
    if (v13 == 0) {
        // break -> 0x2f16d
        goto lab_0x2f16d;
    }
    v9 = v12;
    v10 = v13;
    goto lab_0x2f158;
  lab_0x2f118:
    // 0x2f118
    *(char *)v6 = 47;
    v7 = g9;
    goto lab_0x2f11b;
  lab_0x2f11b:;
    int32_t v14 = v7 + 1; // 0x2f11b
    g9 = v14;
    unsigned char v15 = *(char *)v14; // 0x2f11e
    g4 = v15;
    if (v15 == 0) {
        // break -> 0x2f125
        goto lab_0x2f125;
    }
    v6 = v14;
    v5 = v15;
    goto lab_0x2f110;
}

// Address range: 0x2f180 - 0x2f181
int32_t function_2f180(int32_t * a1, int32_t * a2, int32_t a3, int32_t a4) {
    // 0x2f180
    return g4;
}

// Address range: 0x2f1a0 - 0x2f1a1
int32_t function_2f1a0(void) {
    // 0x2f1a0
    return g4;
}

// Address range: 0x2f1af - 0x2f1b0
int32_t function_2f1af(void) {
    // 0x2f1af
    return g4;
}

// Address range: 0x2f1bd - 0x2f21d
int32_t function_2f1bd(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a1bab); // 0x2f1bd
    int32_t v2 = *v1 - 1; // 0x2f1bd
    *v1 = v2;
    if (v2 == 0) {
        // bb
        g4 = function_2f2d8();
    }
    int32_t v3 = g9; // 0x2f1c9
    if (v3 != 0) {
        // 0x2f1cd
        *(int32_t *)(g5 - 28) = v3;
        g4 = function_2f070(g6, g10);
        int32_t v4 = *(int32_t *)(g5 - 28); // 0x2f1dc
        g9 = v4;
        g4 = function_2db40(g6, v4, g10);
    }
    // 0x2f1f7
    g4 = function_2f070(g6, g10);
    g4 = function_2db40(g6, g8, g10);
    int32_t result = function_2f240((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2f21b
    g4 = result;
    return result;
}

// Address range: 0x2f220 - 0x2f240
int32_t function_2f220(void) {
    int32_t v1 = g8; // 0x2f220
    int32_t result; // 0x2f239
    if (*(char *)(v1 + 1) == 58) {
        // 0x2f22e
        result = function_2d970((int32_t *)g6, v1, g10);
        g4 = result;
        return result;
    }
    // 0x2f226
    int32_t v2; // 0x2f232
    if ((char)g4 != 47) {
        // bb
        g4 = function_2f2c0();
        v2 = g8;
    } else {
        v2 = v1;
    }
    // 0x2f22e
    result = function_2d970((int32_t *)g6, v2, g10);
    g4 = result;
    return result;
}

// Address range: 0x2f240 - 0x2f2a7
int32_t function_2f240(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = function_2ee80(g6, 47); // 0x2f24b
    g4 = result;
    if ((char)result == 0) {
        // 0x2f2a0
        return result;
    }
    unsigned char v1 = *(char *)&g6; // 0x2f254
    int32_t result2 = v1; // 0x2f254
    g4 = result2;
    if (v1 == 0) {
        // 0x2f275
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return result2;
    }
    while (true) {
      lab_0x2f260:
        if (v1 == 47) {
            // 0x2f268
            *(char *)g6 = 47;
            goto lab_0x2f26b;
        } else {
            if (v1 != 92) {
                goto lab_0x2f26b;
            } else {
                // 0x2f268
                *(char *)g6 = 47;
                goto lab_0x2f26b;
            }
        }
    }
  lab_0x2f275:
    // 0x2f275
    g6 = a1;
    g10 = a2;
    g8 = a3;
    int32_t result3; // 0x2f26e
    return result3;
  lab_0x2f26b:;
    int32_t v2 = g6 + 1; // 0x2f26b
    g6 = v2;
    unsigned char v3 = *(char *)v2; // 0x2f26e
    result3 = v3;
    g4 = result3;
    if (v3 == 0) {
        // break -> 0x2f275
        goto lab_0x2f275;
    }
    v1 = v3;
    goto lab_0x2f260;
}

// Address range: 0x2f2ac - 0x2f2ae
int32_t function_2f2ac(void) {
    // 0x2f2ac
    return g4;
}

// Address range: 0x2f2ae - 0x2f2b7
int32_t function_2f2ae(void) {
    int32_t result = function_2f1af(); // 0x2f2b2
    g4 = result;
    return result;
}

// Address range: 0x2f2c0 - 0x2f2d5
int32_t function_2f2c0(void) {
    int32_t result = function_2f1a0(); // 0x2f2d0
    g4 = result;
    return result;
}

// Address range: 0x2f2d8 - 0x2f2e2
int32_t function_2f2d8(void) {
    // 0x2f2d8
    *(int32_t *)(g5 - 28) = g9;
    return g4;
}

// Address range: 0x2f2e7 - 0x2f2ef
int32_t function_2f2e7(void) {
    // 0x2f2e7
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x2f330 - 0x2f331
int32_t function_2f330(void) {
    // 0x2f330
    return g4;
}

// Address range: 0x2f332 - 0x2f333
int32_t function_2f332(void) {
    // 0x2f332
    return g4;
}

// Address range: 0x2f33a - 0x2f347
int32_t function_2f33a(void) {
    int32_t v1 = g8; // 0x2f33a
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g105;
    int32_t * v2 = (int32_t *)(g7 - 0x41f01fbb); // 0x2f33e
    *v2 = *v2 - 1;
    return g4;
}

// Address range: 0x2f34f - 0x2f491
int32_t function_2f34f(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x2f34f
    *(int32_t *)v1 = v1 - 1;
    int32_t v2 = g9 & -0xff01 | (int32_t)&g104; // 0x2f351
    g9 = v2;
    int32_t v3 = g4; // 0x2f353
    unsigned char v4 = (char)v3; // 0x2f353
    unsigned char v5 = v4 % 57; // 0x2f353
    int32_t v6 = (int32_t)v5 | v3 & -0x10000 | 256 * (int32_t)(v4 / 57); // 0x2f353
    g4 = v6;
    int32_t v7; // ebp
    int32_t v8 = v7 + 1; // 0x2f355
    v7 = v8;
    int32_t v9 = g7 - 1; // 0x2f356
    g7 = v9;
    int32_t v10; // 0x2f376
    if (v8 == 0 || v9 == 0) {
        char * v11 = (char *)v6; // 0x2f35a
        *v11 = *v11 + v5;
        int32_t v12 = g4; // 0x2f35c
        char * v13 = (char *)(v12 + 0x5742ffb); // 0x2f35c
        *v13 = *v13 + (char)v12;
        if ((char)g6 != 92) {
            goto lab_0x2f391;
        } else {
            // 0x2f358
            v10 = g9;
            goto lab_0x2f367;
        }
    } else {
        v10 = v2;
        goto lab_0x2f367;
    }
  lab_0x2f410:;
    // 0x2f410
    int32_t v14; // 0x2f41b
    *(char *)(v14 - 1 + g9) = 47;
    int32_t v15 = g4; // 0x2f417
    g6 = v15;
    if (v14 == g10) {
        // break -> 0x2f43b
        goto lab_0x2f43b;
    }
    goto lab_0x2f41b;
  lab_0x2f41b:
    // 0x2f41b
    v14 = v15 + 1;
    g4 = v14;
    unsigned char v16 = *(char *)(g8 + v15); // 0x2f41e
    g7 = v16;
    int32_t result; // 0x2f44b
    if (v16 == 0) {
        // 0x2f480
        *(char *)(g9 + v15) = 0;
        g4 = 1;
        result = 1;
        goto lab_0x2f444;
    }
    goto lab_0x2f427;
  lab_0x2f3bc:;
    // 0x2f3bc
    int32_t v18; // 0x2f3bc
    *(char *)(g9 + v18) = 46;
    g4 = 1;
    *(char *)(g9 + 1 + g6) = 46;
    *(char *)(g9 + 2 + g6) = 47;
    int32_t v19 = g6 + 3; // 0x2f3cf
    g6 = v19;
    int32_t v20 = g8; // 0x2f3d2
    goto lab_0x2f3d2;
  lab_0x2f3d2:;
    int32_t v21 = v20 + 1; // 0x2f3d2
    g8 = v21;
    unsigned char v22 = *(char *)v21; // 0x2f3d5
    g7 = v22;
    if (v22 == 0) {
        // break -> 0x2f3dc
        goto lab_0x2f3dc;
    }
    int32_t v23 = v21; // 0x2f3d213
    v18 = v19;
    goto lab_0x2f3b0;
  lab_0x2f367:;
    char v24 = v10; // 0x2f367
    if (v24 == 47) {
        goto lab_0x2f376;
    } else {
        // 0x2f36c
        if (v24 == 92) {
            goto lab_0x2f376;
        } else {
            // 0x2f372
            if (v24 != 0) {
                goto lab_0x2f391;
            } else {
                goto lab_0x2f376;
            }
        }
    }
  lab_0x2f391:;
    int32_t v25 = *(int32_t *)(v7 - 28); // 0x2f391
    g8 = v25;
    g9 = *(int32_t *)(v7 - 40);
    int32_t v26 = v7; // 0x2f397
    goto lab_0x2f397;
  lab_0x2f376:
    // 0x2f376
    *(int32_t *)(v7 - 36) = g10;
    *(int32_t *)(v7 - 28) = g8;
    if (v24 == 0) {
        int32_t v45 = *(int32_t *)(v7 - 28); // 0x2f46f
        g8 = v45;
        g9 = *(int32_t *)(v7 - 40);
        int32_t v46 = v45 - 1; // 0x2f475
        g8 = v46;
        v25 = v46;
        v26 = v7;
        goto lab_0x2f397;
    } else {
        unsigned char v47 = *(char *)&g10; // 0x2f384
        g6 = v47;
        g8++;
        g10++;
        if (v47 != 0) {
            // bb
            g4 = function_2f330();
        }
        goto lab_0x2f391;
    }
  lab_0x2f397:;
    int32_t v27 = *(int32_t *)(v26 - 36); // 0x2f397
    g7 = v27;
    if (v27 == 0) {
        // 0x2f48d
        g4 = 0;
        result = 0;
    } else {
        unsigned char v28 = *(char *)v25; // 0x2f3a2
        g7 = v28;
        g4 = 0;
        g6 = 0;
        int32_t v29;
        int32_t v30; // 0x2f409
        if (v28 != 0) {
            v23 = v25;
            v18 = 0;
            v22 = v28;
            while (true) {
              lab_0x2f3b0:
                // 0x2f3b0
                if (v22 == 47) {
                    goto lab_0x2f3bc;
                } else {
                    // 0x2f3b5
                    g4 = 0;
                    if (v22 != 92) {
                        v20 = v23;
                        v19 = v18;
                        goto lab_0x2f3d2;
                    } else {
                        goto lab_0x2f3bc;
                    }
                }
            }
          lab_0x2f3dc:;
            int32_t v31 = g4; // 0x2f3dc
            int32_t v32; // 0x2f3f1
            if ((char)v31 == 0) {
                int32_t v33 = g9; // 0x2f3e0
                *(char *)(v33 + v19) = 46;
                int32_t v34 = g9; // 0x2f3e4
                int32_t v35 = g6; // 0x2f3e4
                *(char *)(v34 + 1 + v35) = 46;
                int32_t v36 = g9; // 0x2f3e9
                int32_t v37 = g6; // 0x2f3e9
                *(char *)(v36 + 2 + v37) = 47;
                int32_t v38 = g6; // 0x2f3ee
                int32_t v39 = v38 + 3; // 0x2f3ee
                g6 = v39;
                v32 = v39;
            } else {
                v32 = v19;
            }
            // 0x2f3f1
            g4 = v32;
            v29 = v7;
            v30 = v32;
        } else {
            v30 = 0;
            v29 = v26;
        }
        int32_t * v40 = (int32_t *)(v29 - 36); // 0x2f3f3
        int32_t v41 = *v40; // 0x2f3f3
        g10 = v41;
        unsigned char v42 = *(char *)v41; // 0x2f3f6
        g7 = v42;
        if (v42 != 0) {
            int32_t v43 = *(int32_t *)(v29 + 20); // 0x2f3fd
            g10 = v43;
            int32_t v44 = v30 + 1; // 0x2f400
            g4 = v44;
            g10 = v43 - 1;
            g8 = *v40 - v30;
            v14 = v44;
            v16 = v42;
            while (true) {
              lab_0x2f427:
                // 0x2f427
                if (v16 == 47) {
                    goto lab_0x2f410;
                } else {
                    // 0x2f42c
                    if (v16 == 92) {
                        goto lab_0x2f410;
                    } else {
                        // 0x2f431
                        *(char *)(v14 - 1 + g9) = v16;
                        int32_t v17 = g4; // 0x2f437
                        g6 = v17;
                        if (v14 == g10) {
                            v15 = v17;
                            // break -> 0x2f43b
                            break;
                        }
                        v15 = v17;
                        goto lab_0x2f41b;
                    }
                }
            }
        } else {
            v15 = v30;
        }
      lab_0x2f43b:
        // 0x2f43b
        *(char *)(g9 + v15) = 0;
        g4 = 1;
        result = 1;
    }
    goto lab_0x2f444;
  lab_0x2f444:
    // 0x2f444
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2f491 - 0x2f4c5
int32_t function_2f491(int32_t a1) {
    // 0x2f491
    g7 = a1;
    unsigned char v1 = *(char *)a1; // 0x2f4a6
    g9 = v1;
    int32_t result; // 0x2f4c0
    if (v1 == 0) {
        // 0x2f4bd
        result = g4 & -256 | (int32_t)(v1 == 92);
        g4 = result;
        // 0x2f4c3
        return result;
    }
    // 0x2f4ad
    g4 = 1;
    if (*(char *)(a1 + 1) == 58) {
        // 0x2f4c3
        return 1;
    }
    if (v1 == 47) {
        // 0x2f4c3
        return 1;
    }
    // 0x2f4bd
    result = v1 == 92;
    g4 = result;
    // 0x2f4c3
    return result;
}

// Address range: 0x2f4d0 - 0x2f53a
int32_t function_2f4d0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x2f4d3
    g6 = a1;
    g4 = a3;
    g4 = function_2d970((int32_t *)a1, a3, a2);
    int32_t v2 = g6; // 0x2f4f0
    unsigned char v3 = *(char *)v2; // 0x2f4f0
    g4 = v3;
    int32_t v4; // 0x2f508
    int32_t v5; // 0x2f50b
    int32_t v6; // 0x2f515
    if (v3 != 0) {
        // 0x2f4f7
        g9 = v2;
        v4 = v2;
        while (true) {
          lab_0x2f500:
            if (v3 == 47) {
                goto lab_0x2f508;
            } else {
                if (v3 != 92) {
                    v5 = v4;
                    goto lab_0x2f50b;
                } else {
                    goto lab_0x2f508;
                }
            }
        }
      lab_0x2f515:
        // 0x2f515
        v6 = g6;
    } else {
        v6 = v2;
    }
    // 0x2f515
    g4 = function_2ee80(v6, 47);
    g4 = function_2eab0(g6);
    int32_t v7 = g6; // 0x2f52d
    g6 = v1;
    int32_t result = function_2cd80(v7); // 0x2f535
    g4 = result;
    return result;
  lab_0x2f508:
    // 0x2f508
    *(char *)v4 = 47;
    v5 = g9;
    goto lab_0x2f50b;
  lab_0x2f50b:;
    int32_t v8 = v5 + 1; // 0x2f50b
    g9 = v8;
    unsigned char v9 = *(char *)v8; // 0x2f50e
    g4 = v9;
    if (v9 == 0) {
        // break -> 0x2f515
        goto lab_0x2f515;
    }
    v4 = v8;
    v3 = v9;
    goto lab_0x2f500;
}

// Address range: 0x2f577 - 0x2f578
int32_t function_2f577(void) {
    // 0x2f577
    return g4;
}

// Address range: 0x2f59a - 0x2f608
int32_t function_2f59a(void) {
    int32_t * v1 = (int32_t *)(g5 - 0x57bf040); // 0x2f59a
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x2f5a0
    *(char *)v2 = (char)v2 + *(char *)&g4;
    char * v3 = (char *)(g6 - 0x2d7a23ab); // 0x2f5a2
    char v4 = (char)g7 + *v3; // 0x2f5a2
    *v3 = v4;
    int32_t v5; // 0x2f5a8
    if (v4 == 0) {
        // bb
        v5 = function_2f680((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v5;
    } else {
        // 0x2f59a
        v5 = g4;
    }
    uint32_t v6 = g10; // 0x2f5ae
    int32_t v7 = v5 - v6; // 0x2f5ae
    g4 = v7;
    g9 = v6 % 256;
    *(int32_t *)(g5 - 28) = v7;
    if (v7 < 1) {
        // bb239
        g4 = function_2f6e8();
    }
    // 0x2f5be
    if ((char)g9 == 0) {
        // bb240
        g4 = function_2f6e8();
    }
    // 0x2f5c6
    g4 = 0;
    int32_t v8 = *(int32_t *)(g5 - 36) - 1; // 0x2f5cb
    g8 = v8;
    if (v8 == 0) {
        int32_t result = function_2f6d0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2f5d0
        g4 = result;
        return result;
    }
    int32_t v9 = 0; // 0x2f5e9
    int32_t v10; // 0x2f5ec
    while (true) {
        // 0x2f5e6
        g7 = *(int32_t *)(g5 - 28);
        *(char *)(g6 + v9) = (char)g9;
        v10 = g4 + 1;
        g4 = v10;
        unsigned char v11 = *(char *)(g10 + v10); // 0x2f5ef
        g9 = v11;
        int32_t v12 = g7 - v10; // 0x2f5f3
        g7 = v12;
        if (v12 >= 0 != v12 != 0) {
            // break -> 0x2f5f9
            break;
        }
        // 0x2f5d8
        if (v11 == 0) {
            // break -> 0x2f5f9
            break;
        }
        // 0x2f5dc
        int32_t v13; // 0x2f5e0
        if (v10 == g8) {
            // bb242
            v13 = function_2f6d0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
            g4 = v13;
        } else {
            v13 = v10;
        }
        // 0x2f5e6
        v9 = v13;
    }
    // 0x2f5f9
    g9 = *(int32_t *)(g5 - 28);
    *(char *)(g6 + v10) = 0;
    int32_t result2; // 0x2f605
    if (*(int32_t *)(g5 - 36) > g9) {
        // 0x2f5f9
        result2 = g4;
    } else {
        int32_t v14 = function_2f680((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x2f603
        g4 = v14;
        result2 = v14;
    }
    // 0x2f605
    return result2;
}

// Address range: 0x2f60c - 0x2f60f
int32_t function_2f60c(void) {
    int32_t v1 = g7; // 0x2f60c
    *(int32_t *)v1 = v1 + 1;
    return g4;
}

// Address range: 0x2f60f - 0x2f676
int32_t function_2f60f(void) {
    int32_t v1 = g5; // 0x2f60f
    int32_t v2 = *(int32_t *)(v1 + 20) - g6; // 0x2f612
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 + 24) + v2; // 0x2f614
    g4 = v3;
    int32_t v4; // 0x2f619
    int32_t v5; // 0x2f617
    if (v3 == 0) {
        // bb
        v5 = function_2f680((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v5;
        v4 = g5;
    } else {
        v5 = v3;
        v4 = v1;
    }
    int32_t v6 = *(int32_t *)(v4 + 16); // 0x2f619
    g9 = v6;
    uint32_t v7 = *(int32_t *)(v4 - 32); // 0x2f61c
    g8 = v7;
    unsigned char v8 = *(char *)v6; // 0x2f61f
    g7 = v8;
    g9 = 0;
    int32_t v9; // 0x2f662
    int32_t v10; // 0x2f665
    if (v7 >= 1) {
        if (v8 != 0) {
            int32_t v11 = v5 - 1; // 0x2f62c
            g4 = v11;
            int32_t v12; // 0x2f635
            if (v11 == 0) {
                // bb238
                g4 = function_2f6e0();
                v12 = g5;
            } else {
                v12 = v4;
            }
            // 0x2f635
            *(int32_t *)(v12 - 36) = g10;
            g8 = *(int32_t *)(g5 + 16);
            int32_t v13; // 0x2f652
            while (true) {
                // 0x2f64c
                g10 = *(int32_t *)(g5 - 32);
                *(char *)(g9 + g6) = (char)g7;
                v13 = g9 + 1;
                g9 = v13;
                unsigned char v14 = *(char *)(g8 + v13); // 0x2f655
                g7 = v14;
                int32_t v15 = g10 - v13; // 0x2f659
                g10 = v15;
                if (v15 >= 0 != v15 != 0) {
                    // break -> 0x2f65f
                    break;
                }
                if (v14 == 0) {
                    // break -> 0x2f65f
                    break;
                }
                // 0x2f644
                if (v13 == g4) {
                    // bb239
                    g4 = function_2f6e0();
                }
            }
            // 0x2f65f
            g10 = *(int32_t *)(g5 - 36);
            v10 = v13;
            v9 = g5;
        } else {
            v10 = 0;
            v9 = v4;
        }
    } else {
        v10 = 0;
        v9 = v4;
    }
    // 0x2f662
    g4 = *(int32_t *)(v9 - 28);
    *(char *)(g6 + v10) = 0;
    g6 += *(int32_t *)(g5 - 32);
    int32_t v16 = *(int32_t *)(g5 - 44) + g4; // 0x2f66c
    g4 = v16;
    g10 += v16;
    int32_t result = function_2f577(); // 0x2f671
    g4 = result;
    return result;
}

// Address range: 0x2f680 - 0x2f68a
int32_t function_2f680(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2f680
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 0;
}

// Address range: 0x2f6a4 - 0x2f6c8
int32_t function_2f6a4(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x7489dc55); // 0x2f6a4
    *v1 = *v1 - 1;
    int32_t v2 = g4 & -252; // 0x2f6aa
    g4 = v2;
    g8 = v2;
    int32_t v3 = function_2d970((int32_t *)g6, g9, (int32_t)&g870); // 0x2f6b5
    g4 = v3;
    int32_t v4 = g8; // 0x2f6ba
    int32_t v5 = *(int32_t *)(g5 - 36); // 0x2f6ba
    int32_t v6 = v4 - v5; // 0x2f6ba
    int32_t result = (int32_t)(v6 < 0 != ((v6 ^ v4) & (v5 ^ v4)) < 0) | v3 & -256; // 0x2f6bd
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x2f6d0 - 0x2f6de
int32_t function_2f6d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2f6d0
    *(char *)(g4 + g6) = 0;
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 0;
}

// Address range: 0x2f6e0 - 0x2f6e8
int32_t function_2f6e0(void) {
    // 0x2f6e0
    *(char *)(g9 + g6) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x2f6e8 - 0x2f6ef
int32_t function_2f6e8(void) {
    // 0x2f6e8
    g4 = 0;
    return 0;
}

// Address range: 0x2f6f0 - 0x2f70d
int32_t function_2f6f0(int32_t a1, int32_t a2) {
    // 0x2f6f0
    g10 = a2;
    g8 = a1;
    int32_t result; // 0x2f70b
    if (a2 == -1) {
        // bb
        result = function_2f750();
        g4 = result;
    } else {
        // 0x2f6f0
        result = g4;
    }
    // 0x2f70d
    return result;
}

// Address range: 0x2f712 - 0x2f746
int32_t function_2f712(void) {
    int32_t v1 = g10; // 0x2f712
    int32_t v2 = v1 + 1; // 0x2f712
    g9 = v2;
    int32_t v3 = g4; // 0x2f715
    int32_t v4 = v1 - v3; // 0x2f718
    int32_t v5 = v4 == 0 | v4 < 0 != ((v4 ^ v1) & (v3 ^ v1)) < 0 ? v2 : v3 + 1; // 0x2f71a
    g6 = v5;
    int32_t v6 = function_1bc60(); // 0x2f720
    g4 = v6;
    g10 = v6;
    function_2d970((int32_t *)v6, g8, g6);
    int32_t result = g10; // 0x2f737
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x2f750 - 0x2f751
int32_t function_2f750(void) {
    // 0x2f750
    return g4;
}

// Address range: 0x2f755 - 0x2f75a
int32_t function_2f755(void) {
    int32_t result = g4; // 0x2f755
    g6 = result + 1;
    return result;
}

// Address range: 0x2f779 - 0x2f784
int32_t function_2f779(int32_t a1, int32_t a2) {
    int32_t v1 = g4; // 0x2f779
    int32_t result = (int32_t)(v1 == g6) | v1 & -256; // 0x2f77b
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x2f7a0 - 0x2f7a8
int32_t function_2f7a0(void) {
    // 0x2f7a0
    g7--;
    int32_t v1 = g4; // 0x2f7a2
    int32_t result = (int32_t)(v1 == 0) | v1 & -256; // 0x2f7a4
    g4 = result;
    return result;
}

// Address range: 0x2f7b0 - 0x2f7b1
int32_t function_2f7b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x2f7b0
    return g4;
}

// Address range: 0x2f7d8 - 0x2f7df
int32_t function_2f7d8(void) {
    // 0x2f7d8
    __asm_fisttp(*(int32_t *)(g7 + 0x395378c1));
    return g4;
}

// Address range: 0x2f7e1 - 0x2f7e2
int32_t function_2f7e1(int32_t a1) {
    // 0x2f7e1
    return g4;
}

// Address range: 0x2f7e9 - 0x2f7ea
int32_t function_2f7e9(void) {
    // 0x2f7e9
    return g4;
}

// Address range: 0x2f7f2 - 0x2f7f3
int32_t function_2f7f2(void) {
    // 0x2f7f2
    return g4;
}

// Address range: 0x2f7f6 - 0x2f7f7
int32_t function_2f7f6(void) {
    // 0x2f7f6
    return g4;
}

// Address range: 0x2f818 - 0x2f82e
int32_t function_2f818(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x44c61445); // 0x2f818
    *v1 = *v1 - 1;
    char * v2 = (char *)(g6 + 0x758bf45d); // 0x2f820
    *v2 = (char)g7 + *v2;
    int32_t v3; // ebp
    g8 = *(int32_t *)(v3 - 4);
    return g4;
}

// Address range: 0x2f830 - 0x2f869
int32_t function_2f830(void) {
    int32_t v1 = g7; // 0x2f832
    int32_t v2 = -g6; // 0x2f834
    int64_t v3 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x2f83b
    int64_t v4 = v1; // 0x2f83b
    g4 = v3 / v4;
    int32_t v5 = v3 % v4; // 0x2f83b
    g9 = v5;
    int32_t v6 = v1 - v5; // 0x2f83d
    g6 = v6;
    int32_t v7 = g10; // 0x2f83f
    int32_t v8; // 0x2f843
    int32_t v9; // 0x2f84e
    int32_t v10; // 0x2f852
    if (v7 >= 0) {
        // bb
        g4 = function_2f7e9();
        v10 = g6;
        v9 = g7;
        v8 = g10;
    } else {
        v10 = v6;
        v9 = v1;
        v8 = v7;
    }
    int32_t v11 = -v8; // 0x2f847
    int64_t v12 = 0x100000000 * (int64_t)(v11 >> 31) | (int64_t)v11; // 0x2f84e
    int64_t v13 = v9; // 0x2f84e
    g4 = v12 / v13;
    int32_t v14 = v12 % v13; // 0x2f84e
    g9 = v14;
    int32_t v15 = v9 - v14; // 0x2f850
    g10 = v15;
    if (v15 > v10) {
        // bb231
        g4 = function_2f7f6();
    }
    // 0x2f856
    int32_t v16; // ebp
    int32_t v17 = *(int32_t *)(v16 + 20); // 0x2f856
    g4 = v17;
    *(char *)v17 = 0;
    g6 = *(int32_t *)(v16 - 12);
    g10 = *(int32_t *)(v16 - 8);
    g8 = *(int32_t *)(v16 - 4);
    return g4;
}

// Address range: 0x2f870 - 0x2f880
int32_t function_2f870(void) {
    int32_t v1 = g10; // 0x2f870
    int64_t v2 = 0x100000000 * (int64_t)(v1 >> 31) | (int64_t)v1; // 0x2f877
    int64_t v3 = g7; // 0x2f877
    g4 = v2 / v3;
    int32_t v4 = v2 % v3; // 0x2f877
    g9 = v4;
    g10 = v4;
    int32_t result = function_2f7f2(); // 0x2f87b
    g4 = result;
    return result;
}

// Address range: 0x2f895 - 0x2f8aa
int32_t function_2f895(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x4c61445); // 0x2f895
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x2f89b
    *(char *)v2 = (char)v2 ^ *(char *)&g4;
    int32_t v3; // ebp
    g6 = *(int32_t *)(v3 - 12);
    g10 = *(int32_t *)(v3 - 8);
    g8 = *(int32_t *)(v3 - 4);
    return g4;
}

// Address range: 0x2f8b0 - 0x2f8c3
int32_t function_2f8b0(void) {
    // 0x2f8b0
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 + 20); // 0x2f8b0
    g9 = v2;
    *(char *)v2 = 0;
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x2f8d0 - 0x2f911
int32_t function_2f8d0(int32_t a1, int32_t result, int32_t a3, int32_t a4) {
    g4 = result;
    g7 = a3;
    g9 = a4;
    if (result == 0) {
        if (a4 != 0) {
            // 0x2f8e7
            *(char *)a3 = 0;
        }
        // 0x2f8ea
        return result;
    }
    // 0x2f8f0
    g4 = a1;
    int32_t result2 = function_2f7b0(a1, 0, result, a3, a4); // 0x2f90a
    g4 = result2;
    return result2;
}

// Address range: 0x2f911 - 0x2f941
int32_t function_2f911(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2f911
    g6 = a1;
    g9 = a4;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2f945 - 0x2f992
int32_t function_2f945(void) {
    int32_t * v1 = (int32_t *)(g6 - 0xfc61bab); // 0x2f945
    int32_t v2 = *v1; // 0x2f945
    *v1 = v2 - 1;
    int32_t v3; // ebp
    if (v2 > 1) {
        int32_t v4 = -g10; // 0x2f94d
        g10 = v4;
        int32_t result = function_2f7b0(g6, v4, g4, g8, g9); // 0x2f962
        g4 = result;
        g6 = *(int32_t *)(v3 - 12);
        g10 = *(int32_t *)(v3 - 8);
        g8 = *(int32_t *)(v3 - 4);
        return result;
    }
    // 0x2f978
    *(int32_t *)(v3 + 12) = g6;
    g10 = *(int32_t *)(v3 - 8);
    *(int32_t *)(v3 + 8) = g8;
    g6 = *(int32_t *)(v3 - 12);
    *(int32_t *)(v3 + 16) = g9;
    g8 = *(int32_t *)(v3 - 4);
    int32_t result2 = function_2d970(&g870, (int32_t)&g870, (int32_t)&g870); // 0x2f98d
    g4 = result2;
    return result2;
}

// Address range: 0x2f9c2 - 0x2f9d3
int32_t function_2f9c2(void) {
    // 0x2f9c2
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38f98a40); // 0x2f9c2
    *v2 = *v2 + 1;
    int32_t v3 = 2 * g4; // 0x2f9c8
    g4 = v3;
    char * v4 = (char *)v3; // 0x2f9ca
    *v4 = *v4 + (char)v3;
    char * v5 = (char *)(g6 + 0x5d5b14c4); // 0x2f9cc
    *v5 = (char)g4 + *v5;
    return g4;
}

// Address range: 0x2f9ff - 0x2fa0d
int32_t function_2f9ff(int32_t a1, int32_t a2) {
    // 0x2f9ff
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x39fc8a40); // 0x2f9ff
    *v2 = *v2 + 1;
    int32_t result = 2 * g4; // 0x2fa05
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x2fa10 - 0x2faef
int32_t function_2fa10(int32_t a1) {
    // 0x2fa10
    g7 = 1;
    int32_t v1 = g8; // 0x2fa18
    int32_t v2 = g10; // 0x2fa19
    int32_t v3 = g6; // 0x2fa1a
    g9 = a1;
    char * v4 = (char *)a1; // 0x2fa21
    unsigned char v5 = *v4; // 0x2fa21
    g6 = v5;
    if (v5 != 0) {
        // 0x2fa28
        g8 = 9;
        g10 = a1;
        g7 = 0;
        int32_t v6 = a1; // 0x2fa64
        int32_t v7 = 0; // 0x2fa3a
        while (true) {
            int32_t v8 = v7 + 1; // 0x2fa3a
            g7 = v8;
            g9 = 9;
            g4 = (int32_t)"\tt\nn\rr\"\"\\\\";
            int32_t v9 = (int32_t)"\tt\nn\rr\"\"\\\\" + 2; // 0x2fa55
            g4 = v9;
            g9 = 0;
            g7 = v8;
            unsigned char v10 = *(char *)v9; // 0x2fa5d
            g9 = v10;
            while (v10 != 0) {
                // 0x2fa50
                v9 += 2;
                g4 = v9;
                g9 = 0;
                g7 = v8;
                v10 = *(char *)v9;
                g9 = v10;
            }
            int32_t v11 = v6 + 1; // 0x2fa64
            g10 = v11;
            unsigned char v12 = *(char *)v11; // 0x2fa67
            g6 = v12;
            if (v12 == 0) {
                // break -> 0x2fa6e
                break;
            }
            v6 = v11;
            v7 = v8;
        }
        // 0x2fa6e
        g7 = v7 + 2;
    }
    int32_t v13 = function_1bc60(); // 0x2fa74
    g4 = v13;
    g9 = a1;
    g10 = v13;
    unsigned char v14 = *v4; // 0x2fa7e
    g6 = v14;
    g8 = a1;
    int32_t v15; // 0x2fad1
    if (v14 != 0) {
        int32_t v16 = v13; // 0x2fae0
        while (true) {
            // 0x2fa90
            g9 = (int32_t)"\tt\nn\rr\"\"\\\\";
            int32_t v17;
            if (v14 != 9) {
                int32_t v18 = (int32_t)"\tt\nn\rr\"\"\\\\"; // 0x2fab0
                while (true) {
                    int32_t v19 = v18 + 2; // 0x2fab7
                    unsigned char v20 = *(char *)v19; // 0x2fab7
                    g7 = v20;
                    if (v20 == 0) {
                        // break -> 0x2fabf
                        break;
                    }
                    // 0x2fab0
                    g9 = v19;
                    if (v14 == v20) {
                        goto lab_0x2fae0;
                    }
                    v18 = v19;
                }
                unsigned char v21 = *(char *)a1; // 0x2fabf
                g9 = v21;
                *(char *)v16 = v21;
                v17 = g10 + 1;
            } else {
              lab_0x2fae0:
                // 0x2fae0
                *(char *)v16 = 92;
                unsigned char v22 = *(char *)(g9 + 1); // 0x2fae3
                g9 = v22;
                *(char *)(g10 + 1) = v22;
                v17 = g10 + 2;
            }
            // 0x2fac7
            g10 = v17;
            int32_t v23 = g8 + 1; // 0x2fac7
            g8 = v23;
            unsigned char v24 = *(char *)v23; // 0x2faca
            g6 = v24;
            if (v24 == 0) {
                v15 = v17;
                // break -> 0x2fad1
                break;
            }
            v16 = v17;
            a1 = v23;
            v14 = v24;
        }
    } else {
        v15 = v13;
    }
    // 0x2fad1
    *(char *)v15 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x2faf0 - 0x2faf1
int32_t function_2faf0(int32_t * a1, int32_t a2, int32_t a3) {
    // 0x2faf0
    return g4;
}

// Address range: 0x2fb28 - 0x2fb29
int32_t function_2fb28(void) {
    // 0x2fb28
    return g4;
}

// Address range: 0x2fb3f - 0x2fb9c
int32_t function_2fb3f(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x4890855); // 0x2fb3f
    *v1 = *v1 - 1;
    g9 = g9 & -0x10000 | (int32_t)&g80 | 15;
    int32_t v2 = g4; // 0x2fb49
    int32_t v3; // 0x2fb5e
    if ((char)v2 != 32) {
        int32_t v4 = v2; // 0x2fb5a
        while (true) {
            if ((char)v4 == 0) {
                v3 = v4;
                // break -> 0x2fb5e
                break;
            }
            int32_t v5 = g6 + 1; // 0x2fb50
            g6 = v5;
            unsigned char v6 = *(char *)v5; // 0x2fb53
            int32_t v7 = v6; // 0x2fb53
            g4 = v7;
            if (v6 == 32) {
                v3 = v7;
                // break -> 0x2fb5e
                break;
            }
            v4 = v7;
        }
    } else {
        v3 = v2;
    }
    int32_t v8 = g10 + 1; // 0x2fb71
    int32_t v9;
    int32_t v10; // 0x2fb74
    int32_t result; // 0x2fb9b10
    if ((char)v3 == 0) {
        // 0x2fb5e
        result = v3;
        v10 = g8;
        v9 = v8;
    } else {
        // 0x2fb62
        g10 = v8;
        g6++;
        int32_t v11 = g8; // 0x2fb68
        int32_t v12; // 0x2fb6c
        int32_t v13; // 0x2fb6a
        if (v8 != v11) {
            // bb
            v13 = function_2fb28();
            g4 = v13;
            v12 = g8;
        } else {
            v13 = v3;
            v12 = v11;
        }
        // 0x2fb6c
        result = v13;
        v10 = v12;
        v9 = v12 + 1;
    }
    // 0x2fb74
    g10 = v9;
    if (v10 <= v9) {
        // 0x2fb91
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return result;
    }
    int32_t v14; // ebp
    int32_t v15 = *(int32_t *)(v14 + 8); // 0x2fb80
    g9 = v15;
    *(int32_t *)(v15 + 4 * v9) = 0;
    int32_t v16 = g10 + 1; // 0x2fb8a
    g10 = v16;
    while (v16 != g8) {
        // 0x2fb80
        v15 = *(int32_t *)(v14 + 8);
        g9 = v15;
        *(int32_t *)(v15 + 4 * v16) = 0;
        v16 = g10 + 1;
        g10 = v16;
    }
    // 0x2fb91
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2fba0 - 0x2fbe1
int32_t function_2fba0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x2fba3
    g6 = a1;
    char v2; // bp-28
    g4 = &v2;
    function_2faf0((int32_t *)&v2, 4, a2);
    *(char *)g6 = v2;
    char v3;
    g4 = v3;
    g6 = v1;
    return g4;
}

// Address range: 0x2fbe1 - 0x2fc81
int32_t function_2fbe1(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    // 0x2fbe1
    g9 = a1;
    g4 = a2;
    g10 = a5;
    g7 = a9;
    int32_t v1; // 0x2fc2e
    if (a5 == 0) {
        // bb
        v1 = function_2fc98((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v1;
    } else {
        v1 = a2;
    }
    // 0x2fc30
    g6 = a4;
    int32_t v2; // 0x2fc35
    if (a4 == 0) {
        // bb260
        v2 = function_2fc98((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v2;
    } else {
        v2 = v1;
    }
    // 0x2fc37
    g7 = a3;
    int32_t v3; // 0x2fc3c
    if (a3 == 0) {
        // bb261
        v3 = function_2fc98((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v3;
    } else {
        v3 = v2;
    }
    // 0x2fc3e
    g7 = a8;
    int32_t v4; // 0x2fc44
    if (a3 != a8) {
        // bb262
        v4 = function_2fca0();
        g4 = v4;
    } else {
        v4 = v3;
    }
    // 0x2fc46
    g7 = a6;
    int32_t v5; // 0x2fc4c
    if (a3 != a6) {
        // bb263
        v5 = function_2fca0();
        g4 = v5;
    } else {
        v5 = v4;
    }
    // 0x2fc4e
    g10 = v5;
    g6 = g9;
    g7 = a9;
    int32_t v6 = a4 * a3; // 0x2fc58
    g8 = v6;
    int32_t v7; // 0x2fc65
    int32_t result; // 0x2fc5f
    if (a7 == a9) {
        // bb264
        result = function_2fcfc((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
        v7 = g8;
    } else {
        result = v5;
        v7 = v6;
    }
    // 0x2fc65
    g7 = v7;
    g8 = a5 - 1;
    return result;
}

// Address range: 0x2fc98 - 0x2fca0
int32_t function_2fc98(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2fc98
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x2fca0 - 0x2fcce
int32_t function_2fca0(void) {
    // 0x2fca0
    *(int32_t *)(g5 - 48) = g4;
    *(int32_t *)(g5 - 44) = g9;
    g8 = *(int32_t *)(g5 - 44);
    int32_t v1 = *(int32_t *)(g5 - 48); // 0x2fcb3
    g10 = v1;
    g6 = *(int32_t *)(g5 - 60);
    g10 = v1;
    g7 = *(int32_t *)(g5 - 28);
    return g4;
}

// Address range: 0x2fcd2 - 0x2fcfc
int32_t function_2fcd2(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x2fcd2
    *(int32_t *)v1 = v1 + 1;
    int32_t v2; // ebp
    g10 += *(int32_t *)(v2 - 36);
    g6--;
    g7 = *(int32_t *)(v2 - 52);
    int32_t * v3 = (int32_t *)(v2 - 40); // 0x2fce1
    *v3 = *v3 - 1;
    int32_t * v4 = (int32_t *)(v2 - 48); // 0x2fce5
    *v4 = g7 + *v4;
    int32_t v5 = *(int32_t *)(v2 - 56); // 0x2fce8
    g7 = v5;
    int32_t * v6 = (int32_t *)(v2 - 44); // 0x2fceb
    *v6 = *v6 + v5;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2fcfc - 0x2fd0a
int32_t function_2fcfc(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x2fcfc
    *(int32_t *)(g5 + 16) = *(int32_t *)(g5 - 40) * g8;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x2fd0e - 0x2fd66
int32_t function_2fd0e(int32_t a1, int32_t a2) {
    // 0x2fd0e
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 + 8); // 0x2fd14
    g9 = v2;
    unsigned char v3 = *(char *)v2; // 0x2fd17
    g7 = v3;
    if (v3 == 0) {
        // 0x2fd60
        *(char *)v2 = 0;
        g6 = a1;
        return g4;
    }
    // 0x2fd1e
    g4 = v2;
  lab_0x2fd3d_2:;
    int32_t v4;
    int32_t v5; // 0x2fd60
    while (true) {
      lab_0x2fd3d:
        // 0x2fd3d
        v4 = v2 + 1;
        if (v3 != 13) {
            goto lab_0x2fd28;
        } else {
            // 0x2fd42
            g7 = v4;
            g6 = 10;
            if (*(char *)v4 != 10) {
                goto lab_0x2fd28;
            } else {
                // 0x2fd50
                *(char *)v2 = 10;
                int32_t v6 = g7 + 1; // 0x2fd52
                g4 = v6;
                int32_t v7 = g9 + 1; // 0x2fd55
                g9 = v7;
                unsigned char v8 = *(char *)v6; // 0x2fd58
                g7 = v8;
                if (v8 == 0) {
                    v5 = v7;
                    // break -> 0x2fd60
                    break;
                }
                v2 = v7;
                v3 = v8;
                goto lab_0x2fd3d;
            }
        }
    }
  lab_0x2fd60:
    // 0x2fd60
    *(char *)v5 = 0;
    g6 = a1;
    return g4;
  lab_0x2fd28:;
    unsigned char v9 = *(char *)v2; // 0x2fd28
    g6 = v9;
    g7 = v2;
    g4 = v4;
    *(char *)v2 = v9;
    int32_t v10 = g9 + 1; // 0x2fd32
    g9 = v10;
    unsigned char v11 = *(char *)(g7 + 1); // 0x2fd35
    g7 = v11;
    if (v11 == 0) {
        v5 = v10;
        // break -> 0x2fd60
        goto lab_0x2fd60;
    }
    // 0x2fd28
    v2 = v10;
    v3 = v11;
    // continue -> 0x2fd3d
    goto lab_0x2fd3d_2;
}

// Address range: 0x2fd70 - 0x2fdb8
int32_t function_2fd70(uint32_t a1) {
    int32_t v1 = (uint32_t)(a1 % 256); // 0x2fd73
    g9 = v1;
    int32_t result = v1 - 48; // 0x2fd77
    g4 = result;
    if ((char)result < 10) {
        // 0x2fdb0
        g4 = result;
        return result;
    }
    int32_t v2 = v1 - 65; // 0x2fd7e
    g4 = v2;
    if ((char)v2 < 6) {
        int32_t result2 = v1 - 55; // 0x2fda4
        g4 = result2;
        return result2;
    }
    int32_t v3 = v1 - 97; // 0x2fd85
    g7 = v3;
    int32_t result3; // 0x2fd95
    if ((char)v3 < 6) {
        // 0x2fd92
        result3 = v1 - 87;
    } else {
        result3 = -1;
    }
    // 0x2fd98
    g4 = result3;
    return result3;
}

// Address range: 0x2fdc0 - 0x2fe5f
int32_t function_2fdc0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x2fdc3
    int32_t v2 = g10; // 0x2fdc4
    int32_t v3 = g6; // bp-16
    g8 = a1;
    int32_t v4 = function_2cb40(a1); // 0x2fdcf
    g4 = v4;
    g9 = 0;
    int32_t v5 = 2 * a3; // 0x2fdd9
    g7 = v5;
    int32_t result; // 0x2fde2
    if (v4 == v5) {
        // 0x2fdf0
        g4 = a3;
        g9 = 1;
        if (a3 != 0) {
            // 0x2fdfc
            g6 = 0;
            int32_t v6 = 0; // 0x2fe1c
            while (true) {
                int32_t v7 = (int32_t)*(char *)(2 * v6 + g8); // 0x2fe1c
                g4 = v7;
                int32_t v8 = function_2fd70(v7); // 0x2fe23
                g4 = v8;
                g10 = v8;
                int32_t v9 = (int32_t)*(char *)(g8 + 1 + 2 * g6); // 0x2fe2a
                g4 = v9;
                int32_t v10 = function_2fd70(v9); // 0x2fe32
                g4 = v10;
                g9 = v10 < 0;
                if (v10 < 0) {
                    // break -> 0x2fe40
                    break;
                }
                int32_t v11 = g10; // 0x2fe00
                g9 = v11 < 0;
                if (v11 < 0) {
                    // break -> 0x2fe40
                    break;
                }
                // 0x2fe09
                g9 = a2;
                int32_t v12 = 16 * v11; // 0x2fe0c
                g10 = v12;
                int32_t v13 = v12 | v10; // 0x2fe0f
                g4 = v13;
                *(char *)(g6 + a2) = (char)v13;
                int32_t v14 = g6 + 1; // 0x2fe14
                g6 = v14;
                if (v14 == a3) {
                    // 0x2fe50
                    g9 = 1;
                    g6 = v3;
                    g4 = 1;
                    g10 = v2;
                    g8 = v1;
                    return 1;
                }
                v6 = v14;
            }
            // 0x2fe40
            g9 = 0;
            g6 = v3;
            g4 = 0;
            g10 = v2;
            g8 = v1;
            return 0;
        }
        result = 1;
    } else {
        result = 0;
    }
    // 0x2fddf
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x2fe60 - 0x2feaf
int32_t function_2fe60(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x2fe63
    g10 = a3;
    int32_t v2 = g6; // 0x2fe67
    g7 = a1;
    g6 = a2;
    int32_t v3; // 0x2fea2
    int32_t v4; // 0x2fea2
    if (a3 != 0) {
        // 0x2fe72
        g4 = 0;
        int32_t v5 = 0; // 0x2fe86
        int32_t v6 = (int32_t)(*(char *)(a2 + v5) / 16); // 0x2fe7c1
        g9 = v6;
        unsigned char v7 = *(char *)(v6 | (int32_t)"0123456789ABCDEF"); // 0x2fe7f
        g9 = v7;
        *(char *)(2 * v5 + a1) = v7;
        int32_t v8 = g4; // 0x2fe89
        int32_t v9 = (int32_t)(*(char *)(v8 + g6) % 16); // 0x2fe8d
        g9 = v9;
        unsigned char v10 = *(char *)(v9 | (int32_t)"0123456789ABCDEF"); // 0x2fe90
        g9 = v10;
        *(char *)((2 * v8 | 1) + g7) = v10;
        int32_t v11 = g4 + 1; // 0x2fe9b
        g4 = v11;
        int32_t v12 = g10; // 0x2fe9e
        while (v11 != v12) {
            // 0x2fe78
            v5 = v11;
            v6 = (int32_t)(*(char *)(g6 + v5) / 16);
            g9 = v6;
            v7 = *(char *)(v6 | (int32_t)"0123456789ABCDEF");
            g9 = v7;
            *(char *)(2 * v5 + g7) = v7;
            v8 = g4;
            v9 = (int32_t)(*(char *)(v8 + g6) % 16);
            g9 = v9;
            v10 = *(char *)(v9 | (int32_t)"0123456789ABCDEF");
            g9 = v10;
            *(char *)((2 * v8 | 1) + g7) = v10;
            v11 = g4 + 1;
            g4 = v11;
            v12 = g10;
        }
        // 0x2fea2
        v4 = 2 * v12;
        v3 = g7;
    } else {
        v4 = 0;
        v3 = a1;
    }
    // 0x2fea2
    *(char *)(v3 + v4) = 0;
    g4 = 1;
    g6 = v2;
    g10 = v1;
    return 1;
}

// Address range: 0x2feb0 - 0x2fee7
int32_t function_2feb0(int32_t a1) {
    // 0x2feb0
    g4 = 0;
    g9 = a1;
    if (a1 == 36) {
        // 0x2fedb
        return 0;
    }
    // 0x2febd
    g4 = 1;
    int32_t v1 = 1; // 0x2fec8
    while (true) {
        // 0x2fed0
        if (*(int32_t *)(4 * v1 + (int32_t)&g135) == a1) {
            // break -> 0x2fed9
            break;
        }
        int32_t v2 = v1 + 1; // 0x2fec8
        g4 = v2;
        if (v1 == 50) {
            // 0x2fee0
            g4 = 1;
            return 1;
        }
        v1 = v2;
    }
    // 0x2fed9
    g4 = 0;
    // 0x2fedb
    return 0;
}

// Address range: 0x2fef0 - 0x2ff27
int32_t function_2fef0(int32_t a1) {
    // 0x2fef0
    g4 = 0;
    g9 = a1;
    if (a1 == 32) {
        // 0x2ff1d
        return 0;
    }
    // 0x2fefd
    g4 = 1;
    int32_t v1 = 1; // 0x2ff08
    while (true) {
        // 0x2ff12
        if (*(int32_t *)(4 * v1 + (int32_t)&g136) == a1) {
            // break -> 0x2ff1b
            break;
        }
        int32_t v2 = v1 + 1; // 0x2ff08
        g4 = v2;
        if (v1 == 146) {
            // 0x2ff20
            g4 = 1;
            return 1;
        }
        v1 = v2;
    }
    // 0x2ff1b
    g4 = 0;
    // 0x2ff1d
    return 0;
}

// Address range: 0x2ff30 - 0x2ff4d
int32_t function_2ff30(int32_t a1) {
    // 0x2ff30
    g4 = 0;
    g9 = a1;
    if (a1 == 45) {
        // 0x2ff4b
        return 0;
    }
    int32_t result; // 0x2ff48
    if (a1 != 46) {
        // 0x2ff42
        result = a1 != (int32_t)&g79;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x2ff4b
    return result;
}

// Address range: 0x2ff50 - 0x2ff93
int32_t function_2ff50(int32_t a1) {
    // 0x2ff50
    g4 = 0;
    int32_t v1 = g10; // 0x2ff55
    int32_t v2 = g6; // 0x2ff56
    g9 = a1;
    if (a1 == 0) {
        // 0x2ff80
        g6 = v2;
        g10 = v1;
        return 0;
    }
    uint32_t v3 = *(int32_t *)a1; // 0x2ff61
    g6 = v3;
    if (v3 == 0) {
        // 0x2ff80
        g6 = v2;
        g10 = v1;
        return 0;
    }
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x2ff67
    g10 = v4;
    if (v4 == 0) {
        // 0x2ff80
        g6 = v2;
        g10 = v1;
        return 0;
    }
    if (v3 >= 128) {
        // 0x2ff90
        return 0;
    }
    if (v4 >= 128) {
        // 0x2ff90
        return 0;
    }
    // 0x2ff78
    g10 = v4;
    // 0x2ff80
    g6 = v2;
    g10 = v1;
    return 0;
}

// Address range: 0x2ff97 - 0x2ffca
int32_t function_2ff97(int32_t a1, int32_t a2, int32_t a3) {
    // 0x2ff97
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x313475c0); // 0x2ff97
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x2ffa4
    *(int32_t *)v3 = 2 * v3;
    int32_t v4 = g4; // 0x2ffa6
    *(char *)v4 = (char)v4 + *(char *)&g4;
    int32_t v5 = g4; // 0x2ffb0
    while (true) {
        // 0x2ffb8
        if (g6 == *(int32_t *)(4 * v5 + (int32_t)&g135)) {
            // break -> 0x2ffc1
            break;
        }
        int32_t v6 = v5 + 1; // 0x2ffb0
        g4 = v6;
        if (v5 == 50) {
            int32_t v7 = function_2ffe8(); // 0x2ffb6
            g4 = v7;
            v5 = v7;
        } else {
            v5 = v6;
        }
    }
    // 0x2ffc1
    g4 = 0;
    g6 = a1;
    g10 = a2;
    return 0;
}

// Address range: 0x2ffd7 - 0x2ffe2
int32_t function_2ffd7(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x7a3fce3e); // 0x2ffd7
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    char * v3 = (char *)(v2 - 96); // 0x2ffdd
    unsigned char v4 = (char)g7 % 32; // 0x2ffdd
    if (v4 != 0) {
        // bb
        *v3 = *v3 << v4;
    }
    // bb227
    return g4;
}

// Address range: 0x2ffe8 - 0x30046
int32_t function_2ffe8(void) {
    // 0x2ffe8
    g4 = 1;
    int32_t v1 = 1; // 0x30000
    while (true) {
        // 0x3000a
        if (g10 == *(int32_t *)(4 * v1 + (int32_t)&g136)) {
            // break -> 0x30013
            break;
        }
        int32_t v2 = v1 + 1; // 0x30000
        g4 = v2;
        if (v1 == 146) {
            int32_t result = g6 != (int32_t)&g79; // 0x3003e
            g4 = result;
            return result;
        }
        v1 = v2;
    }
    // 0x30013
    g4 = 0;
    return 0;
}

// Address range: 0x3006e - 0x30079
int32_t function_3006e(void) {
    // 0x3006e
    g7--;
    int32_t result = g4 & (int32_t)&g862 & -256; // 0x30075
    g4 = result;
    return result;
}

// Address range: 0x30080 - 0x30084
int32_t function_30080(void) {
    // 0x30080
    g4 = 0;
    return 0;
}

// Address range: 0x30090 - 0x30106
int32_t function_30090(int32_t a1, int32_t a2, int32_t a3, unsigned char a4) {
    int32_t v1 = g10; // 0x30093
    g10 = a2;
    int32_t v2 = g6; // 0x30097
    g7 = a1;
    g4 = a3;
    g6 = a4;
    if (a2 == 0) {
        // 0x30100
        g6 = v2;
        g4 = 0;
        g10 = v1;
        return 0;
    }
    if (a3 != 0) {
        unsigned char v3 = *(char *)a3; // 0x300aa
        g9 = v3;
        if (v3 != 0) {
            int32_t v4; // 0x300d3
            if (v3 != a4) {
                int32_t v5 = a1 - 1 + a2; // 0x300b5
                g10 = v5;
                if (v5 > a1) {
                    int32_t v6 = a1; // 0x300c0
                    while (true) {
                        // 0x300c0
                        *(char *)v6 = v3;
                        int32_t v7 = g4 + 1; // 0x300c2
                        g4 = v7;
                        int32_t v8 = g7 + 1; // 0x300c5
                        g7 = v8;
                        unsigned char v9 = *(char *)v7; // 0x300c8
                        g9 = v9;
                        if (v9 == (char)g6) {
                            v4 = v8;
                            // break -> 0x300d3
                            break;
                        }
                        if (v9 == 0) {
                            v4 = v8;
                            // break -> 0x300d3
                            break;
                        }
                        // 0x300e0
                        if (g10 <= v8) {
                            v4 = v8;
                            // break -> 0x300d3
                            break;
                        }
                        v6 = v8;
                        v3 = v9;
                    }
                } else {
                    v4 = a1;
                }
            } else {
                v4 = a1;
            }
            // 0x300d3
            *(char *)v4 = 0;
            g6 = v2;
            int32_t v10 = g4; // 0x300d7
            g10 = v1;
            int32_t result = v10 - (int32_t)(*(char *)v10 != 0); // 0x300db
            g4 = result;
            return result;
        }
    }
    // 0x300f0
    *(char *)a1 = 0;
    g4 = 0;
    g6 = v2;
    g10 = v1;
    return 0;
}

// Address range: 0x30110 - 0x30111
int32_t function_30110(int32_t a1, int32_t * a2, int32_t a3, int32_t a4) {
    // 0x30110
    return g4;
}

// Address range: 0x301a7 - 0x301b7
int32_t function_301a7(void) {
    int32_t v1 = *(int32_t *)(g5 - 44); // 0x301ab
    g9 = v1;
    int32_t v2 = *(int32_t *)(g5 + 12); // 0x301ae
    g7 = v2;
    int32_t result = *(int32_t *)(v2 + 4 * v1); // 0x301b1
    g4 = result;
    return result;
}

// Address range: 0x301bf - 0x301c0
int32_t function_301bf(void) {
    // 0x301bf
    return g4;
}

// Address range: 0x301c2 - 0x301c3
int32_t function_301c2(void) {
    // 0x301c2
    return g4;
}

// Address range: 0x301c5 - 0x30201
int32_t function_301c5(void) {
    // 0x301c5
    g6 = 0;
    g10 = 0;
    *(int32_t *)(g5 - 44) = -1;
    int32_t v1 = g6; // 0x301d3
    int32_t v2; // 0x301dd
    while (true) {
      lab_0x301d0:;
        int32_t v3 = *(int32_t *)(g5 + 12); // 0x301d0
        g7 = v3;
        int32_t v4 = *(int32_t *)(v3 + 4 * v1); // 0x301d3
        g4 = v4;
        v2 = function_2d690(g8, v4);
        g4 = v2;
        if (v2 == 0) {
            goto lab_0x301f7;
        } else {
            uint32_t v5 = g10; // 0x301e6
            if (v2 < v5) {
                goto lab_0x301f2;
            } else {
                if (v5 != 0) {
                    goto lab_0x301f7;
                } else {
                    goto lab_0x301f2;
                }
            }
        }
    }
  lab_0x301ff:;
    int32_t result = function_301a7(); // 0x301ff
    g4 = result;
    return result;
  lab_0x301f7:;
    int32_t v6 = g6 + 1; // 0x301f7
    g6 = v6;
    if (v6 == *(int32_t *)(g5 + 16)) {
        // break -> 0x301ff
        goto lab_0x301ff;
    }
    v1 = v6;
    goto lab_0x301d0;
  lab_0x301f2:
    // 0x301f2
    g10 = v2;
    *(int32_t *)(g5 - 44) = g6;
    goto lab_0x301f7;
}

// Address range: 0x30208 - 0x30236
int32_t function_30208(void) {
    int32_t v1 = g8; // 0x3020a
    int32_t v2 = g10 - v1; // 0x3020d
    g4 = v2;
    int32_t v3 = function_2f6f0(v1, v2); // 0x30213
    g4 = v3;
    g9 = *(int32_t *)(g5 + 20);
    *(int32_t *)(g5 - 32) = v3;
    int32_t v4 = g5 - 32; // 0x3021e
    g4 = v4;
    int32_t v5 = g9; // 0x30225
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x30225
    g4 = v6;
    g4 = function_30330(v5, v6, v4);
    int32_t result = function_301c2(); // 0x30234
    g4 = result;
    return result;
}

// Address range: 0x30236 - 0x3023d
int32_t function_30236(void) {
    int32_t result = g9; // 0x30236
    g4 = result;
    return result;
}

// Address range: 0x30240 - 0x30269
int32_t function_30240(int32_t a1, int32_t a2) {
    g4 = a1;
    int32_t v1;
    int32_t result = function_30110(a1, &v1, 1, a2); // 0x30262
    g4 = result;
    return result;
}

// Address range: 0x30270 - 0x302c0
int32_t function_30270(int32_t a1, int32_t a2) {
    // 0x30270
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x3027b
    int64_t v2 = v1; // 0x3027b
    g10 = v1;
    int32_t v3; // 0x30282
    if (v1 < 0) {
        int32_t v4 = function_302db((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x30280
        g4 = v4;
        v3 = g6;
    } else {
        v3 = a1;
    }
    int32_t v5 = *(int32_t *)(v3 + 4); // 0x30282
    g4 = v5;
    int32_t v6 = v5 + a2; // 0x30288
    g7 = v6;
    int32_t v7; // 0x302a8
    if (v1 == 0) {
        // bb21
        g4 = function_302e8();
        v7 = g7;
    } else {
        v7 = v6;
    }
    int32_t v8 = v7 - 1; // 0x3028e
    int64_t v9 = 0x100000000 * (int64_t)(v8 >> 31) | (int64_t)v8; // 0x30296
    g9 = v9 % v2;
    int32_t v10 = ((int32_t)(v9 / v2) + 1) * v1; // 0x3029b
    g4 = v10;
    int32_t v11; // 0x302b9
    if (v7 > v10) {
        // 0x302a2
        g10 = v1;
        int32_t v12 = v10 + v7; // 0x302a8
        int32_t v13 = v12 < 0; // 0x302ac
        int32_t v14 = (v13 + v12) / 2; // 0x302b1
        while (v7 > v14) {
            // 0x302a8
            v12 = v14 + v7;
            v13 = v12 < 0;
            v14 = (v13 + v12) / 2;
        }
        // 0x302b7
        g4 = v14;
        g9 = v13;
        v11 = v14;
    } else {
        v11 = v10;
    }
    int32_t v15 = g6; // 0x302b7
    int32_t v16 = *(int32_t *)v15; // 0x302b7
    g9 = v16;
    *(int32_t *)(v15 + 4) = v11;
    int32_t result; // 0x302be
    if (v16 == 0) {
        // bb22
        result = function_3030f();
        g4 = result;
    } else {
        // 0x302b7
        result = g4;
    }
    // 0x302c0
    return result;
}

// Address range: 0x302db - 0x302e2
int32_t function_302db(int32_t a1, int32_t a2, int32_t a3) {
    // 0x302db
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x302e8 - 0x3030f
int32_t function_302e8(void) {
    int32_t v1 = g4; // 0x302e8
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x302ef
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x30300
    while (g7 > v3) {
        // 0x30300
        v3 *= 2;
    }
    // 0x30306
    g4 = v3;
    int32_t v4 = g6; // 0x30306
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x3030f - 0x30310
int32_t function_3030f(void) {
    // 0x3030f
    return g4;
}

// Address range: 0x30330 - 0x303b6
int32_t function_30330(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x30336
    g6 = a1;
    int32_t v2 = g10; // 0x3033c
    g10 = a2;
    int32_t v3 = g8; // 0x30342
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x30345
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x30348
    g9 = v5;
    int32_t v6; // 0x30351
    int32_t v7; // 0x303b1
    int32_t v8; // 0x303b1
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x303a6
        g4 = v9;
        g4 = function_30270(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x3034f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x30358
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x30360
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x30386
    if (v11 < 1) {
        // 0x3034f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x30371
        int32_t v14 = v13 + 4 + 4 * g10; // 0x30378
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x30384
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x30386
    g9 = v16;
    if (v16 != 0) {
        // 0x3038a
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x3038d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x30391
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x303c0 - 0x303e2
int32_t function_303c0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x303c0
    g7 = 0;
    g4 = a2;
    g9 = a1;
    int32_t v1 = (int32_t)*(char *)a2; // 0x303cb
    g4 = v1;
    unsigned char v2 = *(char *)(a1 + (int32_t)&g249 + v1); // 0x303ce
    g4 = v2;
    g9 = a3;
    int32_t v3 = v2 != 0; // 0x303db
    g7 = v3;
    *(int32_t *)a3 = v3;
    return g4;
}

// Address range: 0x303f0 - 0x303f7
int32_t function_303f0(void) {
    // 0x303f0
    g4 = 0;
    return 0;
}

// Address range: 0x30400 - 0x3047b
int32_t function_30400(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x30403
    int32_t v2 = g10; // 0x30404
    int32_t v3 = g6; // 0x30405
    g10 = a1;
    g8 = a2;
    int32_t v4 = *(int32_t *)(a1 + 16); // 0x3040f
    g4 = v4;
    if (v4 < 1) {
      lab_0x30468:
        // 0x30468
        g9 = a3;
        g4 = 0;
        *(int32_t *)a3 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x30416
    g6 = 0;
    int32_t v5 = 0; // 0x30428
    while (true) {
        int32_t v6 = (int32_t)*(char *)(v5 + 24 + a1); // 0x30428
        g4 = v6;
        int32_t v7 = *(int32_t *)(a1 + (int32_t)&g28 + 8 * v6); // 0x3042d
        g4 = v7;
        int32_t v8 = function_2cbd0(a2, v7); // 0x3043b
        g4 = v8;
        if (v8 == 0) {
            // break -> 0x30444
            break;
        }
        int32_t v9 = g6 + 1; // 0x30420
        g6 = v9;
        int32_t v10 = g10; // 0x30423
        if (*(int32_t *)(v10 + 16) <= v9) {
            goto lab_0x30468;
        }
        // 0x30420
        a2 = g8;
        v5 = v9;
        a1 = v10;
    }
    int32_t v11 = g10; // 0x30444
    int32_t v12 = (int32_t)*(char *)(v11 + 24 + g6); // 0x30444
    g4 = v12;
    g9 = a3;
    int32_t v13 = *(int32_t *)(v11 + (int32_t)&g26 + 8 * v12); // 0x3044c
    g4 = v13;
    *(int32_t *)a3 = v13;
    int32_t result = (int32_t)*(char *)(g10 + 24 + g6); // 0x30455
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x30480 - 0x30481
int32_t function_30480(void) {
    // 0x30480
    return g4;
}

// Address range: 0x3048a - 0x3048b
int32_t function_3048a(void) {
    // 0x3048a
    return g4;
}

// Address range: 0x304b7 - 0x304c7
int32_t function_304b7(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x38274cd); // 0x304b7
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    return g4;
}

// Address range: 0x304d0 - 0x304da
int32_t function_304d0(void) {
    // 0x304d0
    g4 = &g421;
    return &g421;
}

// Address range: 0x304e0 - 0x304ea
int32_t function_304e0(void) {
    // 0x304e0
    g4 = &g420;
    return &g420;
}

// Address range: 0x304f0 - 0x305ee
int32_t function_304f0(int32_t * a1, int32_t a2, int32_t * a3, int32_t a4, int32_t * a5) {
    int32_t v1 = (int32_t)a5;
    int32_t v2 = g8; // 0x304f3
    int32_t v3 = g10; // 0x304f4
    int32_t v4 = g6; // 0x304f5
    g6 = (int32_t)a1;
    g4 = (int32_t)a3;
    *a1 = (int32_t)&g140;
    int32_t v5 = g6; // 0x30505
    g8 = v5 + (int32_t)&g26;
    g9 = a2;
    *(int32_t *)(v5 + 8) = g4;
    *(char *)(g6 + 4) = (char)g9;
    g9 = a4;
    *(int32_t *)(g6 + 16) = a4;
    int32_t v6 = function_2cb40(g4); // 0x3051d
    g4 = v6;
    g9 = &g148;
    *(int32_t *)(g6 + 12) = v6;
    *(int32_t *)(g6 + 20) = 0;
    int32_t v7; // 0x305d2
    int32_t v8; // 0x305ce
    if (g8 % 2 != 0) {
        int32_t v9 = g6; // 0x305c1
        g8 = v9 + (int32_t)&g27;
        *(char *)(v9 + (int32_t)&g26) = 0;
        v8 = g9 & -0x10000 | (int32_t)&g143;
        g9 = v8;
        v7 = g8;
        if ((v7 & 2) == 0) {
            goto lab_0x30549;
        } else {
            goto lab_0x305de;
        }
    } else {
        int32_t v10 = g8; // 0x3053d
        if ((v10 & 2) != 0) {
            v7 = v10;
            goto lab_0x305de;
        } else {
            // 0x3053d
            v7 = v10;
            v8 = g9;
            goto lab_0x30549;
        }
    }
  lab_0x30549:
    // 0x30549
    g4 = 0;
    int32_t v11 = v8 / 4; // 0x3054d
    g7 = v11;
    __asm_rep_stosd_memset((char *)v7, 0, v11);
    int32_t v12 = (g3 ? -4 : 4) * v11 + v7; // 0x30553
    g8 = v12;
    g7 = 0;
    int32_t v13; // 0x3055c
    if ((v8 & 2) != 0) {
        // 0x30557
        *(int16_t *)v12 = 0;
        v13 = g8 + 2;
        g8 = v13;
    } else {
        v13 = v12;
    }
    int32_t v14 = g9 % 2; // 0x3055f
    g9 = v14;
    if (v14 != 0) {
        // 0x30564
        *(char *)v13 = 0;
    }
    // 0x30567
    g9 = a4;
    if (a4 >= 1) {
        int32_t v15 = g6 + 24; // 0x30571
        g10 = v15;
        g8 = v1;
        int32_t v16 = v15 + a4; // 0x30577
        g9 = v16;
        while (true) {
            unsigned char v17 = *(char *)v1; // 0x30580
            g4 = v17;
            *(char *)v15 = v17;
            int32_t v18 = g4 & (int32_t)&g862; // 0x30585
            g4 = v18;
            int32_t v19 = g6 + (int32_t)&g25 + 8 * v18; // 0x30588
            g9 = v19;
            int32_t v20 = *(int32_t *)(g8 + 4); // 0x3058f
            g4 = v20;
            *(int32_t *)(v19 + 12) = v20;
            int32_t v21 = g9; // 0x30595
            int32_t v22 = function_2cb40(g4); // 0x3059b
            g4 = v22;
            g9 = v21;
            *(int32_t *)(v21 + 8) = v22;
            int32_t v23 = g4; // 0x305a6
            int32_t * v24 = (int32_t *)(g6 + 20); // 0x305a6
            if (v23 > *v24) {
                // 0x305ab
                *v24 = v23;
            }
            int32_t v25 = g10 + 1; // 0x305ae
            g10 = v25;
            int32_t v26 = g8 + 8; // 0x305b1
            g8 = v26;
            if (v25 == v16) {
                // break -> 0x305b9
                break;
            }
            v15 = v25;
            v1 = v26;
        }
    }
    // 0x305b9
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return g4;
  lab_0x305de:
    // 0x305de
    *(int16_t *)v7 = 0;
    int32_t v27 = g9 - 2; // 0x305e3
    g9 = v27;
    int32_t v28 = g8 + 2; // 0x305e6
    g8 = v28;
    v7 = v28;
    v8 = v27;
    goto lab_0x30549;
}

// Address range: 0x305f0 - 0x306b8
int32_t function_305f0(int32_t * a1, int32_t a2, int32_t * a3, int32_t a4, int32_t * a5) {
    int32_t v1 = (int32_t)a5;
    int32_t v2 = (int32_t)a1;
    int32_t v3 = g8; // 0x305f3
    int32_t v4 = g10; // 0x305f4
    int32_t v5 = g6; // 0x305f5
    g6 = v2;
    g10 = a4;
    g4 = a2;
    g9 = (int32_t)a3;
    g8 = v2 + (int32_t)&g249;
    g4 = function_304f0(a1, a2, a3, a4, a5);
    g9 = (int32_t)"GNU";
    *(int32_t *)g6 = (int32_t)&g139;
    int32_t v6; // 0x306a3
    int32_t v7; // 0x3069f
    if (g8 % 2 != 0) {
        int32_t v8 = g6; // 0x30692
        g8 = v8 + (int32_t)&g250;
        *(char *)(v8 + (int32_t)&g249) = 0;
        v7 = g9 & -0x10000 | (int32_t)&g862;
        g9 = v7;
        v6 = g8;
        if ((v6 & 2) == 0) {
            goto lab_0x30642;
        } else {
            goto lab_0x306ab;
        }
    } else {
        int32_t v9 = g8; // 0x3063a
        if ((v9 & 2) != 0) {
            v6 = v9;
            goto lab_0x306ab;
        } else {
            // 0x3063a
            v6 = v9;
            v7 = g9;
            goto lab_0x30642;
        }
    }
  lab_0x30642:
    // 0x30642
    g4 = 0;
    int32_t v10 = v7 / 4; // 0x30646
    g7 = v10;
    __asm_rep_stosd_memset((char *)v6, 0, v10);
    int32_t v11 = (g3 ? -4 : 4) * v10 + v6; // 0x3064c
    g8 = v11;
    g7 = 0;
    int32_t v12; // 0x30655
    if ((v7 & 2) != 0) {
        // 0x30650
        *(int16_t *)v11 = 0;
        v12 = g8 + 2;
        g8 = v12;
    } else {
        v12 = v11;
    }
    int32_t v13 = g9 % 2; // 0x30658
    g9 = v13;
    if (v13 != 0) {
        // 0x3065d
        *(char *)v12 = 0;
    }
    // 0x30660
    if (a4 >= 1) {
        // 0x30664
        g4 = v1;
        g9 = 0;
        int32_t v14 = g6; // 0x30669
        g8 = v14;
        g10 = a4;
        int32_t v15 = *(int32_t *)(v1 + 4); // 0x30670
        g7 = v15;
        int32_t v16 = 1; // 0x30673
        g9 = v16;
        unsigned char v17 = *(char *)v1; // 0x30676
        g6 = v17;
        g4 = v1 + 8;
        int32_t v18 = (int32_t)*(char *)v15; // 0x3067e
        g7 = v18;
        *(char *)(v14 + (int32_t)&g249 + v18) = v17;
        while (v16 != a4) {
            // 0x30670
            a4 = g10;
            v1 = g4;
            v15 = *(int32_t *)(v1 + 4);
            g7 = v15;
            v16 = g9 + 1;
            g9 = v16;
            v17 = *(char *)v1;
            g6 = v17;
            g4 = v1 + 8;
            v18 = (int32_t)*(char *)v15;
            g7 = v18;
            *(char *)(g8 + (int32_t)&g249 + v18) = v17;
        }
    }
    // 0x3068a
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
  lab_0x306ab:
    // 0x306ab
    *(int16_t *)v6 = 0;
    int32_t v19 = g9 - 2; // 0x306b0
    g9 = v19;
    int32_t v20 = g8 + 2; // 0x306b3
    g8 = v20;
    v6 = v20;
    v7 = v19;
    goto lab_0x30642;
}

// Address range: 0x306c0 - 0x306cc
int32_t function_306c0(int32_t a1) {
    // 0x306c0
    g4 = a1;
    int32_t result = (int32_t)*(char *)(a1 + 4); // 0x306c7
    g4 = result;
    return result;
}

// Address range: 0x306d0 - 0x306db
int32_t function_306d0(int32_t a1) {
    // 0x306d0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x306d7
    g4 = result;
    return result;
}

// Address range: 0x306e0 - 0x306eb
int32_t function_306e0(int32_t a1) {
    // 0x306e0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x306e7
    g4 = result;
    return result;
}

// Address range: 0x306f0 - 0x30703
int32_t function_306f0(int32_t a1, unsigned char a2) {
    int32_t v1 = a2; // 0x306f3
    g9 = v1;
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + (int32_t)&g28 + 8 * v1); // 0x306fb
    g4 = result;
    return result;
}

// Address range: 0x30710 - 0x30723
int32_t function_30710(int32_t a1, unsigned char a2) {
    int32_t v1 = a2; // 0x30713
    g9 = v1;
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + (int32_t)&g26 + 8 * v1); // 0x3071b
    g4 = result;
    return result;
}

// Address range: 0x30730 - 0x3073b
int32_t function_30730(int32_t a1) {
    // 0x30730
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 20); // 0x30737
    g4 = result;
    return result;
}

// Address range: 0x30740 - 0x30782
int32_t function_30740(int32_t a1, char a2, unsigned char a3) {
    // 0x30740
    g9 = a1;
    g7 = a3;
    char * v1 = (char *)(a1 + 21); // 0x3074e
    int32_t v2 = (int32_t)*v1; // 0x3074e
    g4 = v2;
    if (a2 == 0) {
        int32_t v3 = v2 & 254; // 0x30770
        g4 = v3;
        *v1 = (char)v3;
        if (a3 == 0) {
            goto lab_0x3075e;
        } else {
            goto lab_0x3077a;
        }
    } else {
        int32_t v4 = v2 | 1; // 0x30754
        g4 = v4;
        *v1 = (char)v4;
        if (a3 != 0) {
            goto lab_0x3077a;
        } else {
            goto lab_0x3075e;
        }
    }
  lab_0x3075e:;
    int32_t v5 = g4 & -5; // 0x3075e
    g4 = v5;
    *(char *)(g9 + 21) = (char)v5;
    return g4;
  lab_0x3077a:;
    int32_t v6 = g4 | 4; // 0x3077a
    g4 = v6;
    *(char *)(g9 + 21) = (char)v6;
    return g4;
}

// Address range: 0x30790 - 0x307d0
int32_t function_30790(int32_t a1) {
    // 0x30790
    g4 = 0;
    g9 = a1;
    uint32_t v1 = *(int32_t *)(a1 + 8); // 0x30798
    g7 = v1;
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g9 + 16) = 0;
    *(int32_t *)(g9 + 24) = 0;
    *(char *)(g9 + 20) = 0;
    *(int32_t *)(g9 + 32) = 0;
    if (v1 >= 0) {
        int32_t v2 = g9; // 0x307bf
        g4 = *(int32_t *)v2;
        *(int32_t *)(v2 + 4) = 0;
        *(int32_t *)g9 = 0;
    }
    // 0x307ce
    return g4;
}

// Address range: 0x307d0 - 0x307d1
int32_t function_307d0(int32_t a1, int32_t a2) {
    // 0x307d0
    return g4;
}

// Address range: 0x307ec - 0x307ed
int32_t function_307ec(void) {
    // 0x307ec
    return g4;
}

// Address range: 0x307ef - 0x307f0
int32_t function_307ef(void) {
    // 0x307ef
    return g4;
}

// Address range: 0x30828 - 0x30854
int32_t function_30828(void) {
    int32_t v1 = g6; // 0x30828
    uint32_t v2 = *(int32_t *)(v1 + 4); // 0x3082c
    g4 = v2;
    if ((*(char *)(v1 + 21) & 2) == 0 || g10 <= v2) {
        // 0x30850
        g10 = g9;
        int32_t result = function_307ef(); // 0x30852
        g4 = result;
        return result;
    }
    // 0x30835
    *(int32_t *)(v1 + 8) = 0;
    if (v2 != 0) {
        // bb
        g4 = function_30878();
    }
    // 0x30840
    *(int32_t *)g6 = 0;
    int32_t result2 = function_307ef(); // 0x30846
    g4 = result2;
    return result2;
}

// Address range: 0x30878 - 0x30884
int32_t function_30878(void) {
    // 0x30878
    g4 = g6;
    g4 = function_30480();
    int32_t result = function_307ec(); // 0x3087f
    g4 = result;
    return result;
}

// Address range: 0x30890 - 0x308b2
int32_t function_30890(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // 0x30893
    g4 = a1;
    g6 = a3;
    *(int32_t *)(a1 + 36) = a2;
    g7 = a4;
    *(int32_t *)(g4 + 40) = g6;
    g6 = a5;
    *(int32_t *)(g4 + 44) = g7;
    *(int32_t *)(g4 + 48) = g6;
    g6 = v1;
    return g4;
}

// Address range: 0x308c0 - 0x308e5
int32_t function_308c0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x308c3
    g4 = a1;
    g7 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 44); // 0x308ca
    g9 = v2;
    int32_t result = *(int32_t *)(a1 + 48) + a1; // 0x308cd
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v3 = *(int32_t *)result; // 0x308d5
        g6 = v3;
        g9 = *(int32_t *)(v2 - 1 + v3);
    }
    // 0x308db
    g6 = v1;
    return result;
}

// Address range: 0x308f0 - 0x30915
int32_t function_308f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x308f3
    g4 = a1;
    g7 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 36); // 0x308fa
    g9 = v2;
    int32_t result = *(int32_t *)(a1 + 40) + a1; // 0x308fd
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v3 = *(int32_t *)result; // 0x30905
        g6 = v3;
        g9 = *(int32_t *)(v2 - 1 + v3);
    }
    // 0x3090b
    g6 = v1;
    return result;
}

// Address range: 0x30920 - 0x309a5
int32_t function_30920(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    int32_t v2 = g6; // bp-8
    g7 = a2;
    g4 = a1;
    g9 = a3;
    int32_t * v3; // 0x309a0
    int32_t v4; // 0x309a0
    if (a2 == 1) {
        // 0x309a0
        v3 = (int32_t *)(a1 + 12);
        v4 = *v3 + a3;
        g9 = v4;
        goto lab_0x3093b;
    } else {
        if (a2 == 2) {
            int32_t v5 = *(int32_t *)(a1 + 28); // 0x30990
            g7 = v5;
            int32_t v6 = v5 - a3; // 0x30995
            g6 = v6;
            g9 = v6;
            *(int32_t *)(a1 + 12) = v6;
            goto lab_0x30941;
        } else {
            int32_t * v7 = (int32_t *)(a1 + 12); // 0x30978
            if (a2 != 0) {
                int32_t v8 = *v7; // 0x30978
                g9 = v8;
                int32_t v9 = *(int32_t *)(a1 + 28); // 0x3097b
                g7 = v9;
                if (v9 < v8) {
                    goto lab_0x30982;
                } else {
                    goto lab_0x30945;
                }
            } else {
                v3 = v7;
                v4 = a3;
                goto lab_0x3093b;
            }
        }
    }
  lab_0x3093b:
    // 0x3093b
    g7 = *(int32_t *)(a1 + 28);
    *v3 = v4;
    goto lab_0x30941;
  lab_0x30941:;
    int32_t v10 = g4;
    if (g7 < g9) {
        a1 = v10;
        goto lab_0x30982;
    } else {
        a1 = v10;
        goto lab_0x30945;
    }
  lab_0x30982:;
    char * v11 = (char *)(a1 + 20); // 0x30982
    *v11 = *v11 | 2;
    g6 = v2;
    g5 = v1;
    return g4;
  lab_0x30945:
    // 0x30945
    g7 = *(int32_t *)(a1 + 32);
    char * v12 = (char *)(a1 + 20); // 0x30948
    *v12 = *v12 & -3;
    uint32_t v13 = g7; // 0x3094c
    int32_t v14 = g9; // 0x3094c
    int32_t result = g4;
    if (v13 <= v14) {
        int32_t v15 = *(int32_t *)(result + 4) + v13; // 0x30968
        g7 = v15;
        if (v15 > v14) {
            // 0x3096f
            g6 = v2;
            g5 = v1;
            return result;
        }
    }
    // 0x30950
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_308f0(v2, v1, result, -1); // 0x3095c
    g4 = result2;
    return result2;
}

// Address range: 0x309b0 - 0x30a33
int32_t function_309b0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g4 = 0;
    int32_t v2 = g6; // 0x309b8
    g6 = a1;
    int32_t v3 = g10; // 0x309be
    g7 = a2;
    int32_t v4 = g8; // 0x309c4
    char * v5 = (char *)(a1 + 20); // 0x309c7
    unsigned char v6 = *v5; // 0x309c7
    int32_t v7 = v6; // 0x309c7
    g9 = v7;
    int32_t result; // 0x30a1c
    if ((v6 & 2) != 0) {
        result = 0;
        goto lab_0x30a10;
    } else {
        int32_t v8 = *(int32_t *)(a1 + 12); // 0x309d0
        g10 = v8;
        int32_t v9 = v8 + a2; // 0x309d3
        g8 = v9;
        if (*(int32_t *)(a1 + 28) < v9) {
            int32_t v10 = v7 | 2; // 0x30a20
            g9 = v10;
            *v5 = (char)v10;
            g6 = v2;
            g10 = v3;
            g8 = v4;
            g5 = v1;
            return g4;
        }
        int32_t v11 = *(int32_t *)(a1 + 32); // 0x309db
        g4 = v11;
        if (v8 < v11) {
            goto lab_0x309f0;
        } else {
            // 0x309e2
            g4 = 1;
            int32_t v12 = v8 - v11 + a2; // 0x309e9
            g10 = v12;
            if (*(int32_t *)(a1 + 4) < v12) {
                goto lab_0x309f0;
            } else {
                result = 1;
                goto lab_0x30a10;
            }
        }
    }
  lab_0x30a10:
    // 0x30a10
    g6 = v2;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result;
  lab_0x309f0:;
    int32_t v13 = function_308f0(a1, a2, (int32_t)&g870, (int32_t)&g870); // 0x309f7
    g9 = v13;
    g4 = 1;
    if ((char)v13 == 0) {
        char * v14 = (char *)(g6 + 20); // 0x30a07
        *v14 = *v14 | 2;
        g4 = 0;
        result = 0;
    } else {
        result = 1;
    }
    goto lab_0x30a10;
}

// Address range: 0x30a40 - 0x30a6e
int32_t function_30a40(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x30a40
    int32_t v2 = v1; // bp-4
    g4 = 0;
    g5 = &v2;
    int32_t v3 = g6; // 0x30a45
    g6 = a1;
    int32_t result; // 0x30a6d
    if ((*(char *)(a1 + 20) & 2) == 0) {
        int32_t v4 = a3 + a2; // 0x30a58
        g4 = v4;
        g4 = function_309b0(a1, v4);
        char * v5 = (char *)(g6 + 20); // 0x30a64
        *v5 = *v5 & -3;
        result = g4;
    } else {
        result = 0;
        v2 = v1;
    }
    // 0x30a68
    g6 = v3;
    g5 = v2;
    return result;
}

// Address range: 0x30a70 - 0x30b9e
int32_t function_30a70(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x30a73
    int32_t v2 = g10; // 0x30a74
    int32_t v3 = g6; // 0x30a75
    g9 = a2;
    g6 = a1;
    int32_t v4 = function_2cb40(a2); // 0x30a82
    g4 = v4;
    int32_t v5 = g6; // 0x30a87
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x30a87
    g9 = v6;
    int32_t v7 = *(int32_t *)(v5 + 4); // 0x30a8d
    g4 = v7;
    int32_t v8 = *(int32_t *)(v5 + 28); // 0x30a90
    g8 = v8;
    int32_t v9 = v7 - v6; // 0x30a98
    g10 = v9;
    int32_t v10 = *(int32_t *)(v5 + 32) + v9; // 0x30a9a
    int32_t v11 = v4 - v10; // 0x30a9d
    int32_t v12 = v11 < 0 == ((v11 ^ v4) & (v10 ^ v4)) < 0 ? v7 : v10; // 0x30aa0
    g10 = v12;
    int32_t v13 = v8 - v6; // 0x30aa3
    g8 = v13;
    int32_t result;
    int32_t v14; // 0x30b53
    if (v4 <= v13) {
        int32_t v15 = v5; // 0x30abf
        while (true) {
            int32_t v16 = v13 - v12; // 0x30ab1
            int32_t v17 = v16 < 0 == ((v16 ^ v13) & (v13 ^ v12)) < 0 == (v16 != 0) ? v12 : v13; // 0x30ac6
            g8 = v17;
            int32_t v18 = function_30a40(v15, 0, v17); // 0x30acd
            g4 = v18;
            if ((char)v18 == 0) {
                // break -> 0x30b48
                break;
            }
            int32_t v19 = g6; // 0x30ad6
            int32_t v20 = *(int32_t *)(v19 + 12); // 0x30ad6
            g10 = v20;
            g9 = a2;
            int32_t v21 = v20 - *(int32_t *)(v19 + 32); // 0x30adc
            g10 = v21;
            int32_t v22 = *(int32_t *)v19 + v21; // 0x30adf
            g10 = v22;
            int32_t v23 = function_2d7c0(v22, a2, g8); // 0x30aec
            g4 = v23;
            g9 = 0;
            int32_t v24 = v23 - g10; // 0x30af5
            g7 = v24;
            int32_t v25; // 0x30b05
            if (v16 < 0 == ((v16 ^ v13) & (v13 ^ v12)) < 0 == (v16 != 0)) {
                int32_t v26 = *(int32_t *)(g6 + 4) - v4; // 0x30b00
                v25 = (int32_t)(v24 == v26) | v26 & -256;
                g9 = v25;
            } else {
                v25 = 0;
            }
            int32_t v27; // 0x30b73
            int32_t v28; // 0x30b73
            if (v23 == 0) {
                // 0x30b70
                v27 = g8;
                v28 = v13 - v27;
                g4 = v28;
                if (v4 > v28) {
                    // break -> 0x30b48
                    break;
                }
            } else {
                if ((char)v25 == 0) {
                    int32_t v29 = v24 + v4; // 0x30b80
                    g7 = v29;
                    function_30920(g6, 1, v29);
                    result = 1;
                    goto lab_0x30b61;
                }
                int32_t v30 = g8; // 0x30b13
                int32_t v31 = v13 - v30; // 0x30b13
                g4 = v31;
                v27 = v30;
                v28 = v31;
            }
            int32_t v32 = v28 + v4; // 0x30b15
            g4 = v32;
            int32_t v33 = v27 - v4; // 0x30b18
            g8 = v33;
            int32_t v34 = g6; // 0x30b1b
            g10 = *(int32_t *)(v34 + 4);
            g4 = function_30920(v34, 1, v33);
            g9 = v32;
            if (v4 > v32) {
                // break -> 0x30b48
                break;
            }
            // 0x30b15
            v15 = g6;
            v12 = g10;
            v13 = v32;
        }
        // 0x30b48
        v14 = g6;
    } else {
        v14 = v5;
    }
    // 0x30b48
    g9 = v6;
    g4 = function_30920(v14, 0, v6);
    result = 0;
    goto lab_0x30b61;
  lab_0x30b61:
    // 0x30b61
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x30ba0 - 0x30be1
int32_t function_30ba0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a2;
    int32_t v2 = g6; // 0x30ba9
    int32_t v3 = g10; // 0x30bac
    g6 = a1;
    g10 = a3;
    int32_t v4 = function_30a40(a1, a3, a2); // 0x30bc0
    g4 = v4;
    g9 = 0;
    int32_t result; // 0x30bd3
    if ((char)v4 != 0) {
        int32_t v5 = g6; // 0x30bcb
        int32_t v6 = g10 + *(int32_t *)(v5 + 12); // 0x30bce
        g9 = v6;
        int32_t v7 = v6 - *(int32_t *)(v5 + 32); // 0x30bd0
        g9 = v7;
        result = *(int32_t *)v5 + v7;
        g9 = result;
    } else {
        result = 0;
    }
    // 0x30bd5
    g6 = v2;
    g4 = result;
    g10 = v3;
    g5 = v1;
    return result;
}

// Address range: 0x30bf0 - 0x30c85
int32_t function_30bf0(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x30bf6
    g6 = a1;
    int32_t v2 = g10; // 0x30bfc
    g7 = a2;
    int32_t v3 = g8; // 0x30c02
    g10 = (int32_t)a3;
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x30c08
    g8 = v4;
    int32_t v5 = *(int32_t *)(a1 + 28); // 0x30c0b
    g9 = v5;
    int32_t v6 = v4 + a2; // 0x30c0e
    g7 = v6;
    if (v6 >= v5) {
        // 0x30c70
        *a3 = 0;
        g4 = 0;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    int32_t v7 = *a3; // 0x30c14
    g4 = v7;
    int32_t v8 = v7 + v6; // 0x30c16
    g7 = v8;
    int32_t v9; // 0x30c25
    int32_t v10; // 0x30c2c
    if (v5 < v8) {
        int32_t v11 = v5 - v4 - a2; // 0x30c20
        g4 = v11;
        *a3 = v11;
        v10 = g6;
        v9 = g4;
    } else {
        v10 = a1;
        v9 = v7;
    }
    // 0x30c25
    g4 = a2;
    g4 = function_30a40(v10, a2, v9);
    int32_t v12 = g6; // 0x30c38
    int32_t v13 = *(int32_t *)(v12 + 28); // 0x30c38
    g4 = v13;
    int32_t * v14 = (int32_t *)g10; // 0x30c3b
    int32_t v15 = *v14; // 0x30c3b
    g9 = v15;
    int32_t v16 = v13 - *(int32_t *)(v12 + 12); // 0x30c3d
    g4 = v16;
    int32_t v17; // 0x30c62
    if (v16 < v15) {
        // 0x30c60
        *v14 = v16;
        v17 = g4;
        g9 = v17;
    } else {
        v17 = v16;
    }
    // 0x30c44
    g6 = v1;
    int32_t result = (int32_t)(v17 != 0) | v17 & -256; // 0x30c49
    g4 = result;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x30c90 - 0x30d38
int32_t function_30c90(int32_t a1) {
    // 0x30c90
    g4 = 0;
    int32_t v1 = g8; // 0x30c95
    int32_t v2 = g10; // 0x30c96
    int32_t v3 = g6; // bp-16
    g6 = a1;
    if (*(char *)(a1 + 20) != 0) {
        // 0x30d14
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v4 = 0;
    int32_t v5;
    int32_t v6; // 0x30d10
    while (true) {
        // 0x30ca6
        g10 = v4;
        int32_t v7; // bp-32
        g4 = &v7;
        v7 = 128;
        int32_t v8 = function_30bf0(a1, v4, &v7); // 0x30cbb
        g4 = v8;
        if ((char)v8 == 0) {
            // break -> 0x30d2c
            break;
        }
        g7 = v7;
        int32_t v9 = g6; // 0x30cc7
        int32_t v10 = *(int32_t *)(v9 + 12); // 0x30cc7
        g8 = v10;
        int32_t v11 = *(int32_t *)(v9 + 32); // 0x30cca
        g9 = v11;
        int32_t v12 = *(int32_t *)v9; // 0x30ccd
        g4 = v12;
        v5 = g10;
        if (v7 >= 1) {
            int32_t v13 = v10 - v11 + v5 + v12; // 0x30cd7
            g8 = v13;
            unsigned char v14 = *(char *)v13; // 0x30cd9
            g4 = v14;
            if (v14 == 10) {
                // 0x30d0d
                g4 = 0;
                v6 = 0;
                goto lab_0x30d10_2;
            }
            if (v14 == 13) {
                // 0x30d0d
                g4 = 0;
                v6 = 0;
                goto lab_0x30d10_2;
            }
            // 0x30ce4
            g4 = 0;
            int32_t v15; // 0x30d20
            if (v14 == 0) {
                v15 = 0;
                goto lab_0x30d20;
            }
            int32_t v16 = 0; // 0x30d02
            while (true) {
                int32_t v17 = v16 + 1; // 0x30d02
                g4 = v17;
                if (v17 == v7) {
                    // break -> 0x30d09
                    break;
                }
                unsigned char v18 = *(char *)(v17 + v13); // 0x30cf0
                g9 = v18;
                if (v18 == 13) {
                    v6 = v17;
                    goto lab_0x30d10_2;
                }
                if (v18 == 10) {
                    v6 = v17;
                    goto lab_0x30d10_2;
                }
                if (v18 == 0) {
                    v15 = v17;
                  lab_0x30d20:;
                    int32_t result = v5 + 1 + v15; // 0x30d20
                    g4 = result;
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
                v16 = v17;
            }
        }
        // 0x30d09
        a1 = v9;
        v4 = v5 + v7;
    }
    int32_t v19 = g10; // 0x30d2c
    int32_t v20 = v19 + 1; // 0x30d2c
    g9 = v20;
    int32_t result2 = v19 != 0 ? v20 : 0; // 0x30d33
    g4 = result2;
  lab_0x30d14:
    // 0x30d14
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x30d10_2:;
    int32_t v21 = v5 + 2 + v6; // 0x30d10
    g4 = v21;
    result2 = v21;
    goto lab_0x30d14;
}

// Address range: 0x30d89 - 0x30da0
int32_t function_30d89(void) {
    int32_t v1 = g7; // 0x30d89
    *(int32_t *)v1 = v1 + 1;
    bool v2; // cf
    if (!v2) {
        // 0x30d99
        return g4;
    }
    int32_t result = g10; // 0x30d8d
    g4 = result;
    int32_t v3; // ebp
    g6 = *(int32_t *)(v3 - 8);
    g10 = *(int32_t *)(v3 - 4);
    return result;
}

// Address range: 0x30da0 - 0x30dfd
int32_t function_30da0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x30da6
    g6 = a1;
    int32_t v3 = g10; // 0x30dac
    g10 = a2;
    int32_t v4 = g8; // 0x30db2
    g8 = a4;
    int32_t v5 = function_30a40(a1, a2, a4); // 0x30dc3
    g4 = v5;
    g9 = 0;
    int32_t result; // 0x30deb
    if ((char)v5 != 0) {
        // 0x30dce
        g4 = a3;
        int32_t v6 = g6; // 0x30dd9
        int32_t v7 = *(int32_t *)(v6 + 12) + g10; // 0x30dd9
        g10 = v7;
        int32_t v8 = v7 - *(int32_t *)(v6 + 32); // 0x30ddc
        g10 = v8;
        int32_t v9 = *(int32_t *)v6 + v8; // 0x30ddf
        g10 = v9;
        int32_t v10 = function_2ce50(v9, a3, g8); // 0x30de4
        g4 = v10;
        result = g9 & -256 | (int32_t)(v10 == 0);
        g9 = result;
    } else {
        result = 0;
    }
    // 0x30dee
    g6 = v2;
    g4 = result;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result;
}

// Address range: 0x30e00 - 0x30e83
int32_t function_30e00(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x30e03
    int32_t v2 = g6; // 0x30e04
    g6 = a1;
    g10 = a2;
    if (*(char *)(a1 + 21) % 2 == 0 || *(char *)(a1 + 20) != 0) {
        // 0x30e60
        g6 = v2;
        g4 = 0;
        g10 = v1;
        return 0;
    }
    int32_t result; // 0x30e51
    while (true) {
        int32_t v3 = function_30a40(a1, a2, 1); // 0x30e2f
        g4 = v3;
        if ((char)v3 == 0) {
            // break -> 0x30e20
            break;
        }
        int32_t v4 = g6; // 0x30e38
        int32_t v5 = *(int32_t *)(v4 + 12); // 0x30e38
        g4 = v5;
        int32_t v6 = *(int32_t *)v4; // 0x30e3b
        g9 = v6;
        int32_t v7 = g10; // 0x30e3d
        int32_t v8 = v7 + v5; // 0x30e3d
        g4 = v8;
        int32_t v9 = v8 - *(int32_t *)(v4 + 32); // 0x30e3f
        g4 = v9;
        int32_t v10 = (int32_t)*(char *)(v9 + v6) - 9; // 0x30e46
        g7 = v10;
        if ((char)v10 >= 24) {
            result = v7;
            // 0x30e4e
            g4 = result;
            g6 = v2;
            g10 = v1;
            return result;
        }
        uint32_t v11 = v10 & (int32_t)&g862 & 31; // 0x30e75
        int32_t v12; // 0x30e75
        if (v11 != 0) {
            // bb
            v12 = 1 << v11;
        } else {
            v12 = 1;
        }
        // bb17
        g4 = v12;
        if ((v12 & 0x80001f) == 0) {
            result = v7;
            // 0x30e4e
            g4 = result;
            g6 = v2;
            g10 = v1;
            return result;
        }
        int32_t v13 = v7 + 1; // 0x30e7e
        g10 = v13;
        a1 = v4;
        a2 = v13;
    }
    // 0x30e20
    result = g10;
    // 0x30e4e
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x30e90 - 0x30fb4
int32_t function_30e90(int32_t a1) {
    // 0x30e90
    g4 = 0;
    int32_t v1 = g8; // 0x30e95
    int32_t v2 = g10; // 0x30e96
    int32_t v3 = g6; // bp-16
    g8 = a1;
    if (*(char *)(a1 + 20) != 0) {
        // 0x30f55
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x30ea8
    int32_t v4;
    int32_t v5; // 0x30f93
    if (*(char *)(a1 + 21) % 2 != 0) {
        // 0x30f88
        v5 = function_30e00(a1, 0);
        g4 = v5;
        v4 = g8;
    } else {
        v4 = a1;
        v5 = 0;
    }
    // 0x30eb9
    g4 = v5;
    int32_t v6 = v4; // 0x30ed0
    int32_t v7 = v5; // 0x30faa
    int32_t v8; // 0x30f51
    while (true) {
        int32_t v9 = 128; // bp-32
        g9 = v7;
        int32_t v10 = function_30bf0(v6, v7, &v9); // 0x30ed7
        g4 = v10;
        if ((char)v10 == 0) {
            // break -> 0x30fa0
            break;
        }
        // 0x30ee4
        g9 = v7;
        g4 = v9;
        int32_t v11 = g8; // 0x30eea
        int32_t v12 = *(int32_t *)(v11 + 12) + v7; // 0x30eea
        g9 = v12;
        int32_t v13 = v12 - *(int32_t *)(v11 + 32); // 0x30eed
        g9 = v13;
        int32_t v14 = *(int32_t *)v11 + v13; // 0x30ef0
        g9 = v14;
        if (*(char *)(v11 + 21) % 2 != 0) {
            // 0x30f20
            g6 = 0;
            if (v9 >= 1) {
                // 0x30f26
                g10 = v14;
                v8 = 0;
                while (true) {
                    unsigned char v15 = *(char *)(v8 + v14); // 0x30f2b
                    int32_t v16 = v15; // 0x30f2b
                    g9 = v16;
                    int32_t v17 = v16 - 9; // 0x30f2f
                    g8 = v17;
                    g7 = v17;
                    if ((char)v17 < 24) {
                        uint32_t v18 = v17 & (int32_t)&g862 & 31; // 0x30f41
                        int32_t v19; // 0x30f43
                        if (v18 != 0) {
                            // bb
                            v19 = 1 << v18;
                        } else {
                            v19 = 1;
                        }
                        int32_t v20 = v19 & 0x80001f; // 0x30f43
                        g8 = v20;
                        if (v20 != 0) {
                            goto lab_0x30f4b_2;
                        }
                    }
                    if (v15 == 0) {
                        goto lab_0x30f4b_2;
                    }
                    int32_t v21 = v8 + 1; // 0x30f64
                    g6 = v21;
                    if (v21 == v9) {
                        // break -> 0x30f6b
                        break;
                    }
                    v8 = v21;
                }
                // 0x30f6b
                g8 = v11;
            }
        } else {
            if (v9 >= 1) {
                // 0x30efc
                g7 = 0;
                int32_t v22; // 0x30f7a
                if (*(char *)v14 == 0) {
                    v22 = 0;
                    goto lab_0x30f70;
                }
                int32_t v23 = 0; // 0x30f0e
                while (true) {
                    int32_t v24 = v23 + 1; // 0x30f0e
                    g7 = v24;
                    if (v24 == v9) {
                        // break -> 0x30f15
                        break;
                    }
                    // 0x30f08
                    if (*(char *)(v24 + v14) == 0) {
                        v22 = v24;
                      lab_0x30f70:
                        // 0x30f70
                        g6 = v3;
                        int32_t result = 1 - v5 + v7 + v22; // 0x30f7a
                        g4 = result;
                        g10 = v2;
                        g8 = v1;
                        return result;
                    }
                    v23 = v24;
                }
            }
        }
        // 0x30f15
        v6 = v11;
        v7 += v9;
    }
    // 0x30fa0
    g8 = v7;
    g4 = 0;
    int32_t result2; // 0x30faf
    if (v7 != v5) {
        // 0x30faa
        result2 = v7 - v5 + 1;
        g4 = result2;
    } else {
        result2 = 0;
    }
  lab_0x30f55:
    // 0x30f55
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x30f4b_2:;
    int32_t v25 = v7 - v5 + 1 + v8; // 0x30f51
    g4 = v25;
    result2 = v25;
    goto lab_0x30f55;
}

// Address range: 0x30fc0 - 0x31128
int32_t function_30fc0(int32_t a1, int32_t a2, unsigned char a3) {
    int32_t v1 = g8; // 0x30fc3
    int32_t v2 = g10; // 0x30fc4
    int32_t v3 = g6; // bp-16
    g6 = a1;
    g7 = a3;
    g8 = a2;
    unsigned char v4 = *(char *)(a1 + 21) % 2;
    g4 = v4;
    int32_t result2;
    if (v4 != 0) {
        if (a2 == 0) {
            goto lab_0x30fdf;
        } else {
            int32_t v5 = function_30e00(a1, 0); // 0x3111b
            g4 = v5;
            int32_t * v6 = (int32_t *)(a2 + 12); // 0x31013
            int32_t v7 = *v6; // 0x31013
            g4 = v7;
            int32_t * v8 = (int32_t *)(a2 + 8); // 0x3101a
            g4 = v5;
            int32_t v9 = function_30da0(g6, v5, *v8, v7); // 0x3102b
            g4 = v9;
            if ((char)v9 != 0) {
                int32_t v10 = *v6; // 0x3103b
                g4 = v10;
                int32_t v11 = v10 + v5; // 0x31048
                g10 = v11;
                int32_t v12; // bp-32
                int32_t v13 = &v12; // 0x310ad
                int32_t v14 = g6; // 0x3105e
                int32_t v15 = 1;
                while (true) {
                    int32_t v16 = *v8; // 0x31057
                    g4 = v16;
                    int32_t v17 = function_30da0(v14, v11, v16, v10); // 0x31065
                    g4 = v17;
                    if ((char)v17 != 0) {
                        result2 = v15;
                        // break -> 0x310e8
                        break;
                    }
                    int32_t v18 = function_30a40(g6, g10, 1); // 0x3107d
                    g4 = v18;
                    if ((char)v18 == 0) {
                        result2 = v15;
                        // break -> 0x310e8
                        break;
                    }
                    int32_t v19 = g6; // 0x31086
                    int32_t v20 = *(int32_t *)(v19 + 12); // 0x31086
                    g4 = v20;
                    int32_t v21 = *(int32_t *)v19; // 0x31089
                    g9 = v21;
                    unsigned char v22 = *(char *)(a2 + 4); // 0x3108b
                    g7 = v22;
                    int32_t v23 = v15 + 1; // 0x3108f
                    int32_t v24 = g10; // 0x31093
                    int32_t v25 = v24 + v20; // 0x31093
                    g4 = v25;
                    int32_t v26 = v24 + 1; // 0x31095
                    g10 = v26;
                    int32_t v27 = v25 - *(int32_t *)(v19 + 32); // 0x31098
                    g4 = v27;
                    int32_t v28; // 0x310c6
                    int32_t v29; // 0x310d9
                    if (*(char *)(v27 + v21) == v22) {
                        // 0x310a0
                        v12 = *(int32_t *)(a2 + 20);
                        g4 = v13;
                        int32_t v30 = function_30bf0(v19, v26, &v12); // 0x310b4
                        g4 = v30;
                        if ((char)v30 == 0) {
                            result2 = v23;
                            // break -> 0x310e8
                            break;
                        }
                        // 0x310bd
                        g7 = v13;
                        g9 = *(int32_t *)a2;
                        v28 = g6;
                        int32_t v31 = g10; // 0x310c9
                        int32_t v32 = v31 + *(int32_t *)(v28 + 12); // 0x310c9
                        g4 = v32;
                        int32_t v33 = v32 - *(int32_t *)(v28 + 32); // 0x310cb
                        g4 = v33;
                        g4 = *(int32_t *)v28 + v33;
                        v29 = v12 + v31;
                        g10 = v29;
                    } else {
                        v28 = v19;
                        v29 = v26;
                    }
                    int32_t v34 = *v6; // 0x31050
                    g4 = v34;
                    v14 = v28;
                    v11 = v29;
                    v10 = v34;
                    v15 = v23;
                }
                if (a3 == 0) {
                    int32_t v35 = g10 - v5; // 0x310f2
                    g10 = v35;
                    int32_t result = v35 + 1 + *v6; // 0x310f8
                    g4 = result;
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
            } else {
                result2 = 0;
            }
            goto lab_0x30ff0;
        }
    } else {
        goto lab_0x30fdf;
    }
  lab_0x30fdf:;
    int32_t v36 = function_30e90(a1); // 0x30fe2
    g4 = v36;
    result2 = v36;
    goto lab_0x30ff0;
  lab_0x30ff0:
    // 0x30ff0
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x31130 - 0x31197
int32_t function_31130(int32_t a1) {
    int32_t v1 = g5; // 0x31130
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x31133
    g6 = a1;
    if (*(char *)(a1 + 21) % 2 == 0 || *(char *)(a1 + 20) != 0) {
        // 0x3117a
        g6 = v3;
        g5 = v1;
        return g4;
    }
    while (true) {
        int32_t v4 = function_309b0(a1, 1); // 0x3115b
        g4 = v4;
        if ((char)v4 == 0) {
            // break -> 0x3117a
            break;
        }
        int32_t v5 = g6; // 0x31164
        int32_t * v6 = (int32_t *)(v5 + 12); // 0x31164
        int32_t v7 = *v6; // 0x31164
        g4 = v7;
        int32_t v8 = *(int32_t *)v5; // 0x31167
        g7 = v8;
        g9 = v7;
        int32_t v9 = v7 - *(int32_t *)(v5 + 32); // 0x3116b
        g9 = v9;
        int32_t v10 = (int32_t)*(char *)(v9 + v8) - 9; // 0x31172
        g7 = v10;
        if ((char)v10 >= 24) {
            // break -> 0x3117a
            break;
        }
        uint32_t v11 = v10 & (int32_t)&g862 & 31; // 0x31185
        int32_t v12; // 0x31187
        if (v11 != 0) {
            // bb
            v12 = 1 << v11;
        } else {
            v12 = 1;
        }
        int32_t v13 = v12 & 0x80001f; // 0x31187
        g9 = v13;
        if (v13 == 0) {
            // break -> 0x3117a
            break;
        }
        int32_t v14 = v7 + 1; // 0x3118f
        g4 = v14;
        *v6 = v14;
        a1 = g6;
    }
    // 0x3117a
    g6 = v3;
    g5 = v2;
    return g4;
}

// Address range: 0x311a0 - 0x311dc
int32_t function_311a0(int32_t a1, int32_t result, int32_t a3) {
    // 0x311a0
    g6 = a3;
    g10 = a1;
    int32_t v1; // 0x311ba
    if (a3 < 1) {
        // bb
        g4 = function_311e4();
        v1 = g10;
    } else {
        v1 = a1;
    }
    int32_t v2 = function_309b0(v1, a3); // 0x311bd
    g4 = v2;
    if ((char)v2 == 0) {
        // bb13
        g4 = function_311e4();
    }
    // 0x311c6
    g4 = result;
    return result;
}

// Address range: 0x311e4 - 0x311ee
int32_t function_311e4(void) {
    // 0x311e4
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x311f0 - 0x312cb
int32_t function_311f0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x311f6
    g10 = a1;
    int32_t v3 = g6; // 0x311fc
    g6 = a3;
    int32_t v4 = g8; // 0x31202
    g8 = a2;
    if (*(char *)(a1 + 20) != 0) {
        // 0x31288
        *(char *)a2 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return g4;
    }
    // 0x3120e
    g4 = 0x7fffffff;
    g6 = a3 == 0 ? 0x7fffffff : a3;
    int32_t v5 = function_30c90(a1); // 0x3121b
    g4 = v5;
    if (v5 == 0) {
        // 0x31270
        *(char *)g8 = 0;
        char * v6 = (char *)(g10 + 20); // 0x31273
        *v6 = *v6 | 2;
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return 0;
    }
    int32_t v7 = g6; // 0x31224
    if (v7 >= v5) {
        int32_t v8 = v5 - 1; // 0x312a0
        g9 = v8;
        function_311a0(g10, g8, v8);
        g4 = v5;
        *(char *)(g8 + v8) = 0;
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return g4;
    }
    int32_t v9 = v7 - 1; // 0x31228
    g9 = v9;
    function_311a0(g10, g8, v9);
    *(char *)(g8 - 1 + g6) = 0;
    int32_t v10 = g10; // 0x31246
    g10 = v2;
    g8 = v4;
    int32_t v11 = v5 - 1 - g6; // 0x31259
    g4 = v11;
    g6 = v3;
    g5 = v1;
    int32_t result = function_30920(v10, 1, v11); // 0x31264
    g4 = result;
    return result;
}

// Address range: 0x312d0 - 0x313b8
int32_t function_312d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x312d3
    int32_t v2 = g10; // 0x312d4
    int32_t v3; // bp-29
    int32_t v4 = &v3; // 0x312d5
    g4 = v4;
    int32_t v5 = g6; // 0x312d8
    v3 = 0;
    g10 = a1;
    g9 = a3;
    g8 = a2 == 0 ? v4 : a2;
    g4 = function_2cb40(a3);
    int32_t v6 = g10; // 0x312f6
    int32_t v7 = *(int32_t *)(v6 + 12); // 0x312f6
    g9 = v7;
    g4 = function_31130(v6);
    int32_t v8 = g8; // 0x31310
    unsigned char v9 = *(char *)v8; // 0x31310
    int32_t v10 = v9; // 0x31310
    g6 = v10;
    if (v9 == 0) {
      lab_0x3133f:
        // 0x3133f
        g4 = function_31130(g10);
        g9 = a3;
        int32_t v11 = g10; // 0x3134a
        g8 = *(int32_t *)(v11 + 12);
        int32_t v12 = function_30a70(v11, a3); // 0x31354
        g4 = v12;
        if ((char)v12 != 0) {
            int32_t v13 = function_313d8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3135b
            g4 = v13;
        }
        // 0x3135d
        g9 = v7;
        function_30920(g10, 0, v7);
        g9 = a4;
        g4 = 0;
        *(char *)a4 = 0;
        g6 = v5;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    while (true) {
        int32_t v14 = v10 - 9; // 0x31317
        g7 = v14;
        g8 = v8 + 1;
        if ((char)v14 >= 24) {
            // break -> 0x31388
            break;
        }
        uint32_t v15 = v14 & (int32_t)&g862 & 31; // 0x31327
        int32_t v16; // 0x31327
        if (v15 != 0) {
            // bb
            v16 = 1 << v15;
        } else {
            v16 = 1;
        }
        // bb250
        g4 = v16;
        if ((v16 & 0x80001f) == 0) {
            // break -> 0x31388
            break;
        }
        // 0x31330
        g4 = function_31130(g10);
        int32_t v17 = g8; // 0x31338
        unsigned char v18 = *(char *)v17; // 0x31338
        int32_t v19 = v18; // 0x31338
        g6 = v19;
        if (v18 == 0) {
            goto lab_0x3133f;
        }
        v8 = v17;
        v10 = v19;
    }
    int32_t v20 = function_309b0(g10, 1); // 0x31393
    g4 = v20;
    g9 = 0;
    int32_t result; // 0x313b5
    if ((char)v20 != 0) {
        int32_t v21 = g10; // 0x3139e
        int32_t * v22 = (int32_t *)(v21 + 12); // 0x3139e
        int32_t v23 = *v22; // 0x3139e
        g4 = v23;
        int32_t v24 = *(int32_t *)v21; // 0x313a1
        g7 = v24;
        g9 = v23;
        int32_t v25 = v23 + 1; // 0x313a5
        g4 = v25;
        int32_t v26 = v23 - *(int32_t *)(v21 + 32); // 0x313a8
        g9 = v26;
        g9 = (int32_t)*(char *)(v26 + v24);
        *v22 = v25;
        result = g4;
    } else {
        result = v20;
    }
    // 0x313b2
    return result;
}

// Address range: 0x313c8 - 0x313d3
int32_t function_313c8(void) {
    // 0x313c8
    return g4;
}

// Address range: 0x313d8 - 0x31488
int32_t function_313d8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g10 + 12); // 0x313d8
    g6 = v1;
    int32_t v2 = g5; // 0x313db
    int32_t * v3 = (int32_t *)(v2 + 24); // 0x313db
    int32_t v4 = *v3; // 0x313db
    g9 = v4;
    g4 = v1;
    int32_t v5 = v4 - 1; // 0x313e3
    g9 = v5;
    int32_t v6 = v1 - *(int32_t *)(v2 - 52) - g8; // 0x313e6
    g4 = v6;
    int32_t v7 = *v3; // 0x313e8
    int32_t v8 = v6 - v7; // 0x313e8
    int32_t v9 = v8 < 0 == ((v8 ^ v6) & (v7 ^ v6)) < 0 ? v5 : v6; // 0x313eb
    g4 = v9;
    int32_t v10; // 0x31442
    if (v9 >= 1) {
        // 0x313f2
        *(int32_t *)(v2 - 56) = v9;
        g4 = function_30920(g10, 0, g8);
        int32_t v11 = g5; // 0x31409
        int32_t v12 = *(int32_t *)(v11 - 56); // 0x31409
        g4 = v12;
        int32_t v13 = *(int32_t *)(v11 + 20); // 0x3140f
        g9 = v13;
        g4 = function_311a0(g10, v13, v12);
        int32_t v14 = g5; // 0x31423
        int32_t v15 = *(int32_t *)(v14 - 56); // 0x31423
        g4 = v15;
        int32_t v16 = *(int32_t *)(v14 + 20); // 0x3142c
        g8 = v16;
        while (true) {
            int32_t v17 = (int32_t)*(char *)(v15 - 1 + v16) - 9; // 0x31434
            unsigned char v18 = (char)v17; // 0x31434
            g7 = v17;
            *(char *)(g5 - 44) = v18;
            if (v18 >= 23 && v18 != 23) {
                // break -> 0x3143f
                break;
            }
            // 0x31470
            g9 = 1;
            uint32_t v19 = g7 & (int32_t)&g862 & 31; // 0x31475
            int32_t v20; // 0x31475
            if (v19 != 0) {
                // bb
                v20 = 1 << v19;
                g9 = v20;
            } else {
                v20 = 1;
            }
            int32_t v21 = v20 & 0x80001f; // 0x31477
            g9 = v21;
            if (v21 == 0) {
                // break -> 0x3143f
                break;
            }
            int32_t v22 = g4 - 1; // 0x3147f
            g4 = v22;
            if (v22 == 0) {
                // 0x31484
                g4 = 0;
                v10 = 0;
                goto lab_0x3143f;
            }
            // 0x3147f
            v15 = v22;
            v16 = g8;
        }
        // 0x3143f
        v10 = g4;
    } else {
        v10 = v9;
    }
    goto lab_0x3143f;
  lab_0x3143f:;
    int32_t v23 = *(int32_t *)(g5 + 20); // 0x3143f
    g9 = v23;
    *(char *)(v23 + v10) = 0;
    function_30920(g10, 0, g6);
    g4 = 1;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 1;
}

// Address range: 0x31490 - 0x31544
int32_t function_31490(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x31496
    g6 = a1;
    int32_t v3 = g10; // 0x3149c
    g10 = a2;
    int32_t v4 = g8; // 0x314a2
    int32_t v5 = function_309b0(a1, 1); // 0x314b0
    g4 = v5;
    g9 = 0;
    int32_t v6; // 0x314cf
    if ((char)v5 != 0) {
        int32_t v7 = g6; // 0x314bb
        int32_t * v8 = (int32_t *)(v7 + 12); // 0x314bb
        int32_t v9 = *v8; // 0x314bb
        g4 = v9;
        int32_t v10 = *(int32_t *)v7; // 0x314be
        g7 = v10;
        g9 = v9;
        int32_t v11 = v9 + 1; // 0x314c2
        g4 = v11;
        int32_t v12 = v9 - *(int32_t *)(v7 + 32); // 0x314c5
        g9 = v12;
        g9 = (int32_t)*(char *)(v12 + v10);
        *v8 = v11;
        v6 = g9;
    } else {
        v6 = 0;
    }
    int32_t v13 = g10; // 0x314cf
    int32_t result; // 0x3153e
    if (*(char *)(v13 + 4) == (char)v6) {
        int32_t v14 = *(int32_t *)(v13 + 20); // 0x314e8
        g4 = v14;
        g8 = &v14;
        int32_t v15 = function_30bf0(g6, 0, &v14); // 0x31500
        g4 = v15;
        g9 = 0;
        if ((char)v15 != 0) {
            // 0x3150b
            g9 = *(int32_t *)g10;
            int32_t v16 = g6; // 0x31511
            int32_t v17 = *(int32_t *)(v16 + 12); // 0x31511
            g4 = v17;
            int32_t v18 = v17 - *(int32_t *)(v16 + 32); // 0x31514
            g4 = v18;
            int32_t v19 = *(int32_t *)v16 + v18; // 0x31517
            g9 = v19;
            g4 = v14;
            g4 = function_30920(v16, 1, v14);
            result = v19 % 256;
            g9 = result;
        } else {
            result = 0;
        }
    } else {
        result = v6;
    }
    // 0x314d4
    g6 = v2;
    g4 = result;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result;
}

// Address range: 0x31550 - 0x315ac
int32_t function_31550(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x31550
    int32_t v2 = g6; // 0x31553
    g6 = a1;
    g4 = a2;
    if (*(char *)(a1 + 21) % 2 != 0) {
        if (a2 != 0) {
            // 0x3159c
            g6 = v2;
            g5 = v1;
            int32_t result = function_31490(v2, v1); // 0x315a7
            g4 = result;
            return result;
        }
    }
    int32_t v3 = function_309b0(a1, 1); // 0x3156e
    g9 = v3;
    g4 = 0;
    int32_t result2; // 0x31594
    if ((char)v3 != 0) {
        int32_t v4 = g6; // 0x3157b
        int32_t * v5 = (int32_t *)(v4 + 12); // 0x3157b
        int32_t v6 = *v5; // 0x3157b
        g9 = v6;
        int32_t v7 = *(int32_t *)v4; // 0x3157e
        g7 = v7;
        g4 = v6;
        int32_t v8 = v6 + 1; // 0x31582
        g9 = v8;
        int32_t v9 = v6 - *(int32_t *)(v4 + 32); // 0x31585
        g4 = v9;
        g4 = (int32_t)*(char *)(v9 + v7);
        *v5 = v8;
        result2 = g4;
    } else {
        result2 = 0;
    }
    // 0x3158f
    g6 = v2;
    return result2;
}

// Address range: 0x315b0 - 0x3164c
int32_t function_315b0(int32_t a1) {
    int32_t v1 = g6; // 0x315b6
    g6 = a1;
    int32_t v2 = g10; // 0x315bc
    g10 = 0;
    int32_t result; // 0x315f0
    if (*(char *)(a1 + 21) % 2 == 0 || *(char *)(a1 + 20) != 0) {
        // 0x315f0
        result = g10;
        g4 = result;
        g6 = v1;
        g10 = v2;
        return result;
    }
    int32_t v3 = function_30ba0(a1, 2, 0); // 0x315e0
    g4 = v3;
    if (v3 == 0 || *(char *)v3 != 47 || *(char *)(v3 + 1) != 47) {
        // 0x315f0
        result = g10;
        g4 = result;
        g6 = v1;
        g10 = v2;
        return result;
    }
    int32_t * v4 = (int32_t *)(g6 + 12); // 0x31606
    *v4 = *v4 + 2;
    int32_t v5 = g6; // 0x3161d
    while (true) {
        int32_t v6 = function_309b0(v5, 1); // 0x31620
        g4 = v6;
        g9 = 0;
        if ((char)v6 != 0) {
            int32_t v7 = g6; // 0x3162b
            int32_t * v8 = (int32_t *)(v7 + 12); // 0x3162b
            int32_t v9 = *v8; // 0x3162b
            g4 = v9;
            int32_t v10 = *(int32_t *)v7; // 0x3162e
            g7 = v10;
            g9 = v9;
            int32_t v11 = v9 + 1; // 0x31632
            g4 = v11;
            int32_t v12 = v9 - *(int32_t *)(v7 + 32); // 0x31635
            g9 = v12;
            g9 = (int32_t)*(char *)(v12 + v10);
            *v8 = v11;
        }
        int32_t v13 = g6; // 0x3163f
        if (*(char *)(v13 + 20) != 0) {
            // break -> 0x31645
            break;
        }
        // 0x31610
        if ((char)g9 == 10) {
            // break -> 0x31645
            break;
        }
        v5 = v13;
    }
    // 0x31645
    g10 = 1;
    // 0x315f0
    result = g10;
    g4 = result;
    g6 = v1;
    g10 = v2;
    return result;
}

// Address range: 0x31650 - 0x31806
int32_t function_31650(int32_t a1, int32_t a2, int32_t a3, int32_t a4, uint32_t a5) {
    int32_t v1 = g8; // 0x31653
    int32_t v2 = g10; // 0x31654
    int32_t v3 = g6; // bp-16
    g8 = a3;
    g6 = a1;
    g10 = a5 % 256;
    *(char *)a3 = 0;
    while (true) {
        int32_t v4 = g6; // 0x31670
        if (*(char *)(v4 + 20) != 0) {
            // break -> 0x317e8
            break;
        }
        // 0x3167a
        function_31130(v4);
        int32_t v5 = g10; // 0x31682
        g4 = v5;
        if ((char)v5 == 0) {
            goto lab_0x31694_2;
        }
        int32_t v6 = function_315b0(g6); // 0x3168b
        g4 = v6;
        if ((char)v6 == 0) {
            goto lab_0x31694_2;
        }
    }
    // 0x317e8
    g6 = v3;
    g4 = -1;
    g10 = v2;
    g8 = v1;
    return -1;
  lab_0x31694_2:
    // 0x31694
    g10 = -1;
    int32_t v7 = function_309b0(g6, 1); // 0x316a4
    g4 = v7;
    int32_t v8; // 0x316c5
    int32_t v9; // 0x316f0
    if ((char)v7 == 0) {
        goto lab_0x31761;
    } else {
        int32_t v10 = g6; // 0x316b1
        int32_t * v11 = (int32_t *)(v10 + 12); // 0x316b1
        int32_t v12 = *v11; // 0x316b1
        g7 = v12;
        int32_t v13 = *(int32_t *)v10; // 0x316b4
        g9 = v13;
        g4 = v12;
        int32_t v14 = v12 + 1; // 0x316b8
        g7 = v14;
        int32_t v15 = v12 - *(int32_t *)(v10 + 32); // 0x316bb
        g4 = v15;
        g9 = (int32_t)*(char *)(v15 + v13);
        *v11 = v14;
        v8 = g9;
        char v16 = v8; // 0x316c5
        if (v16 == 0) {
            goto lab_0x31761;
        } else {
            if (v16 == 34) {
                // 0x31788
                g10 = 0;
                goto lab_0x31790;
            } else {
                // 0x316d6
                g7 = a2;
                int32_t v17 = v8 & (int32_t)&g862; // 0x316d9
                g4 = v17;
                g10 = 0;
                if (*(char *)(v17 + a2) != 0) {
                    // 0x31770
                    *(char *)g8 = v16;
                    g10 = g10 & -0x10000 | 1;
                    *(char *)(g8 + 1) = 0;
                    int32_t result = g10; // 0x3177d
                    g4 = result;
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
                v9 = 0;
                goto lab_0x316f0_2;
            }
        }
    }
  lab_0x31761:;
    int32_t result2 = g10; // 0x31764
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x31790:;
    int32_t v18 = g6; // 0x31790
    if (*(char *)(v18 + 20) != 0) {
        goto lab_0x3175d;
    } else {
        int32_t v19 = function_309b0(v18, 1); // 0x317a1
        g4 = v19;
        if ((char)v19 == 0) {
            goto lab_0x3175d;
        } else {
            int32_t v20 = g6; // 0x317aa
            int32_t * v21 = (int32_t *)(v20 + 12); // 0x317aa
            int32_t v22 = *v21; // 0x317aa
            g4 = v22;
            int32_t v23 = *(int32_t *)v20; // 0x317ad
            g7 = v23;
            g9 = v22;
            int32_t v24 = v22 + 1; // 0x317b1
            g4 = v24;
            int32_t v25 = v22 - *(int32_t *)(v20 + 32); // 0x317b4
            g9 = v25;
            g9 = (int32_t)*(char *)(v25 + v23);
            *v21 = v24;
            char v26 = g9; // 0x317be
            if (v26 == 0) {
                goto lab_0x3175d;
            } else {
                if (v26 == 34) {
                    goto lab_0x3175d;
                } else {
                    // 0x317c7
                    *(char *)(g10 + g8) = v26;
                    int32_t v27 = g10; // 0x317ca
                    int32_t v28 = v27 + 1; // 0x317ca
                    g10 = v28;
                    if (v28 == a4) {
                        // 0x317d2
                        *(char *)(g8 + v27) = 0;
                        int32_t result3 = g10; // 0x317da
                        g4 = result3;
                        g6 = v3;
                        g10 = v2;
                        g8 = v1;
                        return result3;
                    }
                    goto lab_0x31790;
                }
            }
        }
    }
  lab_0x3175d:
    // 0x3175d
    *(char *)(g10 + g8) = 0;
    goto lab_0x31761;
  lab_0x316f0_2:
    // 0x316f0
    *(char *)(g8 + v9) = (char)v8;
    int32_t v29 = g10 + 1; // 0x316f3
    g10 = v29;
    if (v29 == a4) {
        // 0x317f7
        g7 = a4;
        *(char *)(a4 - 1 + g8) = 0;
        g10 = g7;
        goto lab_0x31761;
    } else {
        int32_t v30 = function_309b0(g6, 1); // 0x3170a
        g4 = v30;
        g9 = 0;
        if ((char)v30 == 0) {
            goto lab_0x31729;
        } else {
            int32_t v31 = g6; // 0x31715
            int32_t * v32 = (int32_t *)(v31 + 12); // 0x31715
            int32_t v33 = *v32; // 0x31715
            g4 = v33;
            int32_t v34 = *(int32_t *)v31; // 0x31718
            g7 = v34;
            g9 = v33;
            int32_t v35 = v33 + 1; // 0x3171c
            g4 = v35;
            int32_t v36 = v33 - *(int32_t *)(v31 + 32); // 0x3171f
            g9 = v36;
            g9 = (int32_t)*(char *)(v36 + v34);
            *v32 = v35;
            goto lab_0x31729;
        }
    }
  lab_0x31729:;
    int32_t v37 = g6; // 0x31729
    if (*(char *)(v37 + 20) != 0) {
        goto lab_0x3175d;
    } else {
        // 0x3172f
        g7 = a2;
        int32_t v38 = g9; // 0x31732
        int32_t v39 = v38 & (int32_t)&g862; // 0x31732
        g4 = v39;
        if (*(char *)(v39 + a2) != 0) {
            // 0x31745
            g4 = function_30920(v37, 1, -1);
            goto lab_0x3175d;
        } else {
            char v40 = v38; // 0x3173b
            if (v40 == 34) {
                // 0x31745
                g4 = function_30920(v37, 1, -1);
                goto lab_0x3175d;
            } else {
                if (v40 > 32) {
                    // 0x31740
                    v9 = g10;
                    v8 = v38;
                    goto lab_0x316f0_2;
                } else {
                    // 0x31745
                    g4 = function_30920(v37, 1, -1);
                    goto lab_0x3175d;
                }
            }
        }
    }
}

// Address range: 0x31810 - 0x31918
int32_t function_31810(int32_t a1, int32_t * a2, int32_t * a3) {
    int32_t v1 = (int32_t)a3;
    int32_t v2 = g5; // 0x31810
    int32_t v3 = v2; // bp-4
    g5 = &v3;
    int32_t v4 = g6; // 0x31816
    g6 = a1;
    int32_t v5 = g10; // 0x3181c
    g10 = v1;
    int32_t v6 = g8; // 0x31822
    g8 = (int32_t)a2;
    if (*(char *)(a1 + 20) != 0) {
        // 0x318c8
        *(char *)a2 = 0;
        g6 = v4;
        g10 = v5;
        g8 = v6;
        g5 = v2;
        return g4;
    }
    // 0x31832
    g4 = 0x7fffffff;
    g10 = a3 == NULL ? 0x7fffffff : v1;
    int32_t v7 = function_30e90(a1); // 0x3183f
    g4 = v7;
    int32_t v8 = g6; // 0x31844
    if (*(char *)(v8 + 21) % 2 != 0) {
        // 0x31900
        function_31130(v8);
        g4 = v7;
        if (v7 != 0) {
            goto lab_0x31852;
        } else {
            goto lab_0x318b0;
        }
    } else {
        if (v7 == 0) {
            goto lab_0x318b0;
        } else {
            goto lab_0x31852;
        }
    }
  lab_0x31852:;
    int32_t v9 = g10; // 0x31852
    if (v7 > v9) {
        int32_t v10 = v9 - 1; // 0x3185a
        g9 = v10;
        function_311a0(g6, g8, v10);
        *(char *)(g8 - 1 + g10) = 0;
        int32_t v11 = v7 - g10; // 0x31883
        g4 = v11;
        g4 = function_30920(g6, 1, v11);
    } else {
        int32_t v12 = v7 - 1; // 0x318e0
        g9 = v12;
        function_311a0(g6, g8, v12);
        g4 = v7;
        *(char *)(g8 + v12) = 0;
    }
    int32_t v13 = g6; // 0x3188e
    if (*(char *)(v13 + 21) % 2 == 0) {
        int32_t v14 = function_309b0(v13, 1); // 0x3189f
        g4 = v14;
        if ((char)v14 != 0) {
            int32_t * v15 = (int32_t *)(g6 + 12); // 0x318a8
            *v15 = *v15 + 1;
        }
    }
    goto lab_0x318b7;
  lab_0x318b0:
    // 0x318b0
    *(char *)g8 = 0;
    char * v16 = (char *)(g6 + 20); // 0x318b3
    *v16 = *v16 | 2;
    goto lab_0x318b7;
  lab_0x318b7:
    // 0x318b7
    g6 = v4;
    g10 = v5;
    g8 = v6;
    g5 = v3;
    return g4;
}

// Address range: 0x31920 - 0x31a60
int32_t function_31920(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4) {
    int32_t v1 = (int32_t)a4;
    int32_t v2 = (int32_t)a3;
    int32_t v3 = g8; // 0x31923
    int32_t v4 = g10; // 0x31924
    int32_t v5 = g6; // 0x31925
    g6 = a1;
    g9 = v2;
    g10 = a2;
    g8 = v1;
    int32_t v6;
    if (*(char *)(a1 + 21) % 2 != 0) {
        if (a2 == 0) {
            goto lab_0x3193e;
        } else {
            // 0x31964
            if (*(char *)(a1 + 20) != 0) {
                // 0x319b0
                g9 = v2;
                *(char *)a3 = 0;
                g6 = v5;
                g10 = v4;
                g8 = v3;
                return g4;
            }
            // 0x3196a
            g4 = 0x7fffffff;
            g8 = a4 == NULL ? 0x7fffffff : v1;
            g4 = function_31130(a1);
            int32_t * v7 = (int32_t *)(a2 + 12); // 0x3197c
            int32_t v8 = *v7; // 0x3197c
            g4 = v8;
            int32_t * v9 = (int32_t *)(a2 + 8); // 0x31983
            int32_t v10 = *v9; // 0x31983
            g4 = v10;
            int32_t result = function_30da0(g6, 0, v10, v8); // 0x31995
            g4 = result;
            if ((char)result == 0) {
                // 0x3199e
                g6 = v5;
                g10 = v4;
                g8 = v3;
                return result;
            }
            int32_t v11 = *v7; // 0x319c0
            g4 = v11;
            g4 = function_30920(g6, 1, v11);
            v6 = 0;
            while (true) {
                int32_t v12; // 0x31a0f
                while (true) {
                    int32_t v13 = g6; // 0x319e0
                    if (*(char *)(v13 + 20) != 0) {
                        // break (via goto) -> 0x31a47
                        goto lab_0x31a47;
                    }
                    int32_t v14 = *v7; // 0x319e6
                    g4 = v14;
                    int32_t v15 = *v9; // 0x319ed
                    g4 = v15;
                    int32_t v16 = function_30da0(v13, 0, v15, v14); // 0x319ff
                    g4 = v16;
                    if ((char)v16 != 0) {
                        int32_t v17 = *v7; // 0x31a30
                        g4 = v17;
                        g4 = function_30920(g6, 1, v17);
                        goto lab_0x31a47;
                    }
                    // 0x31a08
                    v12 = function_31490(g6, a2);
                    g4 = v12;
                    if (g8 > v6) {
                        // break -> 0x31a19
                        break;
                    }
                }
                // 0x31a19
                g7 = v6;
                g9 = v2;
                *(char *)(v6 + v2) = (char)v12;
                int32_t v18 = g7 + 1; // 0x31a22
                g7 = v18;
                v6 = v18;
            }
        }
    } else {
        goto lab_0x3193e;
    }
  lab_0x31a47:;
    int32_t v19 = g8; // 0x31a47
    int32_t v20 = v19 - v6; // 0x31a47
    g7 = v2;
    int32_t v21 = v20 < 0 == ((v20 ^ v19) & (v19 ^ v6)) < 0 == (v20 != 0) ? v6 : v19 - 1; // 0x31a50
    g4 = v21;
    *(char *)(v21 + v2) = 0;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
  lab_0x3193e:
    // 0x3193e
    g7 = v2;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    int32_t result2 = function_31810(v2, &g870, &g870); // 0x31951
    g4 = result2;
    return result2;
}

// Address range: 0x31a60 - 0x31bdb
int32_t function_31a60(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g8; // 0x31a63
    int32_t v2 = g10; // 0x31a64
    int32_t v3 = g6; // 0x31a65
    g6 = a1;
    g10 = a2;
    if (*(char *)(a1 + 20) == 0) {
        // 0x31a7c
        if (*(char *)(a1 + 21) % 2 != 0) {
            while (true) {
                unsigned char v4 = *(char *)a2; // 0x31a88
                int32_t v5 = v4; // 0x31a88
                g9 = v5;
                g8 = a2 + 1;
                if (v4 == 0) {
                    // break -> 0x31af0
                    break;
                }
                while (true) {
                    int32_t v6 = g6; // 0x31a92
                    uint32_t v7 = *(int32_t *)(v6 + 28); // 0x31a92
                    g4 = v7;
                    int32_t v8; // 0x31aa8
                    if (*(int32_t *)(v6 + 12) >= v7) {
                        int32_t v9 = function_31e40((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x31a98
                        g4 = v9;
                        v8 = g9;
                    } else {
                        v8 = v5;
                    }
                    char v10 = v8; // 0x31a9e
                    if (v10 == 32) {
                        // break -> 0x31b20
                        break;
                    }
                    if (v10 == 37) {
                        int32_t v11 = g10; // 0x31b00
                        unsigned char v12 = *(char *)(v11 + 1); // 0x31b00
                        int32_t v13 = v12; // 0x31b00
                        g4 = v13;
                        g8 = v11 + 2;
                        if (v12 == 0) {
                            goto lab_0x31af0_3;
                        } else {
                            int32_t v14 = v13 - 73; // 0x31b0b
                            g4 = v14;
                            if ((char)v14 < 48) {
                                int32_t result = v14 & (int32_t)&g862; // 0x31b12
                                g4 = result;
                                return result;
                            }
                            goto lab_0x31af0_3;
                        }
                    }
                    int32_t v15 = function_30a40(g6, 0, 1); // 0x31abe
                    g4 = v15;
                    g9 = v8 % 256;
                    if ((char)v15 == 0) {
                        // break (via goto) -> 0x31af0
                        goto lab_0x31af0_3;
                    }
                    int32_t v16 = g6; // 0x31acb
                    int32_t * v17 = (int32_t *)(v16 + 12); // 0x31acb
                    int32_t v18 = *v17; // 0x31acb
                    g4 = v18;
                    int32_t v19 = *(int32_t *)v16; // 0x31ace
                    g10 = v19;
                    g7 = v18;
                    int32_t v20 = v18 - *(int32_t *)(v16 + 32); // 0x31ad2
                    g7 = v20;
                    if (v10 != *(char *)(v20 + v19)) {
                        // break (via goto) -> 0x31af0
                        goto lab_0x31af0_3;
                    }
                    int32_t v21 = v18 + 1; // 0x31ada
                    g4 = v21;
                    g10 = g8;
                    *v17 = v21;
                    int32_t v22 = g10; // 0x31ae2
                    g8 = v22 + 1;
                    unsigned char v23 = *(char *)v22; // 0x31ae5
                    int32_t v24 = v23; // 0x31ae5
                    g9 = v24;
                    if (v23 == 0) {
                        // break (via goto) -> 0x31af0
                        goto lab_0x31af0_3;
                    }
                    v5 = v24;
                }
                // 0x31b20
                g10 = g8;
                g4 = function_31130(g6);
                a2 = g10;
            }
        }
    }
    goto lab_0x31af0_3;
  lab_0x31af0_3:
    // 0x31af0
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x31b30 - 0x31b72
int32_t function_31b30(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5; // 0x31b30
    g7 = *(int32_t *)(v1 + 16);
    int32_t v2 = v1 - 28; // 0x31b33
    g4 = v2;
    *(int32_t *)v2 = 128;
    int32_t v3 = *(int32_t *)g7; // 0x31b3d
    g7 = v3;
    *(int32_t *)(g5 - 56) = v3;
    int32_t v4 = function_30bf0(g6, 0, (int32_t *)g4); // 0x31b51
    g4 = v4;
    if ((char)v4 != 0) {
        // bb
        g4 = function_31e50();
    }
    int32_t v5 = *(int32_t *)(g5 - 56); // 0x31b5e
    g9 = v5;
    *(int32_t *)v5 = 0;
    int32_t result = *(int32_t *)(g5 - 44); // 0x31b67
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x31be0 - 0x31c37
int32_t function_31be0(void) {
    unsigned char v1 = *(char *)(g10 + 2); // 0x31be0
    int32_t v2 = v1; // 0x31be0
    g4 = v2;
    int32_t v3; // 0x31be6
    if (v1 == 105) {
        // bb
        v3 = function_31e80();
        g4 = v3;
    } else {
        v3 = v2;
    }
    if ((char)v3 == 100) {
        // bb234
        g4 = function_31e80();
    }
    int32_t v4 = g5; // 0x31bfc
    g7 = *(int32_t *)(v4 + 16);
    int32_t v5 = v4 - 28; // 0x31bff
    g4 = v5;
    *(int32_t *)v5 = 128;
    int32_t v6 = *(int32_t *)g7; // 0x31c09
    g7 = v6;
    *(int32_t *)(g5 - 56) = v6;
    int32_t v7 = function_30bf0(g6, 0, (int32_t *)g4); // 0x31c1d
    g4 = v7;
    if ((char)v7 != 0) {
        // bb236
        g4 = function_31f89();
    }
    int32_t v8 = *(int32_t *)(g5 - 56); // 0x31c2a
    g9 = v8;
    *(int16_t *)v8 = 0;
    return g4;
}

// Address range: 0x31c40 - 0x31ca7
int32_t function_31c40(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    unsigned char v1 = *(char *)(g10 + 2); // 0x31c40
    g4 = v1;
    if (v1 == 102) {
        // bb
        g4 = function_31fc1();
    }
    int32_t v2 = g5; // 0x31c5e
    g4 = *(int32_t *)(v2 + 16);
    int32_t v3 = v2 - 28; // 0x31c61
    g9 = v3;
    *(int32_t *)v3 = 128;
    int32_t v4 = *(int32_t *)g4; // 0x31c6b
    g7 = v4;
    *(int32_t *)(g5 - 60) = v4;
    int32_t v5 = function_30bf0(g6, 0, (int32_t *)g9); // 0x31c7f
    g4 = v5;
    int32_t v6 = *(int32_t *)(g5 - 60); // 0x31c84
    g7 = v6;
    int32_t v7; // 0x31c8f
    if ((char)v5 != 0) {
        // bb241
        g4 = function_31f42();
        v7 = g7;
    } else {
        v7 = v6;
    }
    // 0x31c8f
    *(int32_t *)v7 = 0;
    *(int32_t *)(g7 + 4) = 0;
    int32_t result = *(int32_t *)(g5 - 44); // 0x31c9c
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x31cff - 0x31d29
int32_t function_31cff(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x289c855); // 0x31cff
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g4 = *(int32_t *)(v2 - 28) - g10;
    int32_t * v3 = (int32_t *)(v2 + 16); // 0x31d10
    *v3 = *v3 + 4;
    g10 = g8;
    int32_t * v4 = (int32_t *)(g6 + 12); // 0x31d16
    *v4 = g4 + *v4;
    int32_t * v5 = (int32_t *)(v2 - 44); // 0x31d20
    *v5 = *v5 + 1;
    return g4;
}

// Address range: 0x31d30 - 0x31d6c
int32_t function_31d30(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5; // 0x31d30
    g7 = *(int32_t *)(v1 + 16);
    int32_t v2 = v1 - 32; // 0x31d33
    g4 = v2;
    *(int32_t *)v2 = 128;
    g10 = *(int32_t *)g7;
    int32_t v3 = function_30bf0(g6, 0, (int32_t *)g4); // 0x31d4e
    g4 = v3;
    if ((char)v3 != 0) {
        // bb
        g4 = function_31eb7();
    }
    // 0x31d5b
    *(int32_t *)g10 = 0;
    int32_t result = *(int32_t *)(g5 - 44); // 0x31d61
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x31d70 - 0x31db2
int32_t function_31d70(void) {
    int32_t v1 = *(int32_t *)(g5 + 16); // 0x31d70
    g7 = v1;
    g10 = *(int32_t *)v1;
    int32_t v2 = function_30a40(g6, 0, 1); // 0x31d88
    g4 = v2;
    if ((char)v2 == 0) {
        // bb
        g4 = function_320ae();
    }
    int32_t v3 = g6; // 0x31d95
    g4 = *(int32_t *)(v3 + 12);
    g9 = v3;
    int32_t * v4 = (int32_t *)(g5 + 16); // 0x31d9a
    *v4 = *v4 + 4;
    int32_t v5 = g4 - *(int32_t *)(g6 + 32); // 0x31d9e
    g4 = v5;
    unsigned char v6 = *(char *)(g9 + v5); // 0x31da1
    g4 = v6;
    *(char *)g10 = v6;
    g10 = g8;
    int32_t * v7 = (int32_t *)(g6 + 12); // 0x31da9
    *v7 = *v7 + 1;
    return g4;
}

// Address range: 0x31db8 - 0x31de1
int32_t function_31db8(void) {
    int32_t * v1 = (int32_t *)(g5 + 16); // 0x31db8
    int32_t v2 = *v1; // 0x31db8
    g7 = v2;
    int32_t v3 = *v1; // 0x31dc3
    g10 = v3;
    int32_t v4 = *(int32_t *)v2; // 0x31dc6
    g4 = v4;
    g10 = v3 + 4;
    g4 = function_31810(g6, (int32_t *)v4, NULL);
    *(int32_t *)(g5 + 16) = g10;
    g10 = g8;
    return g4;
}

// Address range: 0x31e38 - 0x31e3d
int32_t function_31e38(void) {
    // 0x31e38
    return g4;
}

// Address range: 0x31e40 - 0x31e4f
int32_t function_31e40(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    char * v1 = (char *)(g6 + 20); // 0x31e40
    *v1 = *v1 | 2;
    int32_t result = *(int32_t *)(g5 - 44); // 0x31e44
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x31e50 - 0x31e6d
int32_t function_31e50(void) {
    int32_t v1 = g6; // 0x31e50
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x31e50
    g10 = v2;
    int32_t v3 = g5 - 28; // 0x31e53
    g7 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x31e59
    g10 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x31e72 - 0x31e77
int32_t function_31e72(void) {
    // 0x31e72
    return g4;
}

// Address range: 0x31e80 - 0x31eb7
int32_t function_31e80(void) {
    int32_t v1 = g5; // 0x31e80
    g7 = *(int32_t *)(v1 + 16);
    int32_t v2 = v1 - 32; // 0x31e83
    g4 = v2;
    *(int32_t *)v2 = 128;
    int32_t v3 = *(int32_t *)g7; // 0x31e8d
    g7 = v3;
    *(int32_t *)(g5 - 56) = v3;
    int32_t v4 = function_30bf0(g6, 0, (int32_t *)g4); // 0x31ea1
    g4 = v4;
    if ((char)v4 != 0) {
        // bb
        g4 = function_31f00();
    }
    int32_t v5 = *(int32_t *)(g5 - 56); // 0x31eaa
    g8 = v5;
    *(int16_t *)v5 = 0;
    return g4;
}

// Address range: 0x31eb7 - 0x31ecf
int32_t function_31eb7(void) {
    int32_t v1 = g6; // 0x31eb7
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x31eb7
    g4 = v2;
    int32_t v3 = g5 - 28; // 0x31eba
    g9 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x31ec0
    g4 = v4;
    *(int32_t *)v3 = v4;
    *(int32_t *)(g5 - 60) = g4;
    return g4;
}

// Address range: 0x31ed4 - 0x31f00
int32_t function_31ed4(void) {
    // 0x31ed4
    int32_t v1; // ebp
    int32_t v2 = v1 - 56; // 0x31ed4
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x31ed7
    *(int32_t *)g10 = __asm_movss_1646(__asm_cvtpd2ps(v4));
    int32_t v5 = *(int32_t *)(v1 - 28); // 0x31ee4
    g9 = v5;
    int32_t v6 = *(int32_t *)(v1 - 60); // 0x31ee7
    g4 = v6;
    g9 = v5 - v6;
    int32_t * v7 = (int32_t *)(v1 + 16); // 0x31ef2
    *v7 = *v7 + 4;
    g10 = g8;
    int32_t * v8 = (int32_t *)(g6 + 12); // 0x31ef8
    *v8 = g9 + *v8;
    return g4;
}

// Address range: 0x31ef2 - 0x31ef3
int32_t function_31ef2(void) {
    // 0x31ef2
    return g4;
}

// Address range: 0x31f00 - 0x31f1d
int32_t function_31f00(void) {
    int32_t v1 = g6; // 0x31f00
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x31f00
    g8 = v2;
    int32_t v3 = g5 - 28; // 0x31f03
    g9 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x31f09
    g8 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x31f21 - 0x31f42
int32_t function_31f21(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x769937b3); // 0x31f21
    *v1 = *v1 - 1;
    int32_t * v2 = (int32_t *)(g6 - 0x7d61bbb); // 0x31f27
    *v2 = g7 + *v2;
    int32_t v3; // ebp
    int32_t * v4 = (int32_t *)(v3 + 16); // 0x31f33
    *v4 = *v4 + 4;
    g10 += 3;
    int32_t * v5 = (int32_t *)(g6 + 12); // 0x31f3a
    *v5 = g4 + *v5;
    return g4;
}

// Address range: 0x31f33 - 0x31f34
int32_t function_31f33(void) {
    // 0x31f33
    return g4;
}

// Address range: 0x31f42 - 0x31f62
int32_t function_31f42(void) {
    int32_t v1 = g6; // 0x31f42
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x31f42
    g8 = v2;
    g4 = g5 - 28;
    g8 = v2 - *(int32_t *)(v1 + 32) + v1;
    *(int32_t *)(g5 - 60) = g7;
    *(int32_t *)(g5 - 28) = g8;
    return g4;
}

// Address range: 0x31f66 - 0x31f89
int32_t function_31f66(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x189c44d); // 0x31f66
    *v1 = *v1 - 1;
    *(int32_t *)(g7 + 4) = g9;
    int32_t v2; // ebp
    g4 = *(int32_t *)(v2 - 28) - g8;
    int32_t * v3 = (int32_t *)(v2 + 16); // 0x31f7a
    *v3 = *v3 + 4;
    g10 += 3;
    int32_t * v4 = (int32_t *)(g6 + 12); // 0x31f81
    *v4 = g4 + *v4;
    return g4;
}

// Address range: 0x31f89 - 0x31fa6
int32_t function_31f89(void) {
    int32_t v1 = g6; // 0x31f89
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x31f89
    g8 = v2;
    int32_t v3 = g5 - 32; // 0x31f8c
    g7 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x31f92
    g8 = v4;
    *(int32_t *)v3 = v4;
    return g4;
}

// Address range: 0x31faa - 0x31fc1
int32_t function_31faa(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x769937ab); // 0x31faa
    *v1 = *v1 - 1;
    int32_t v2 = g7; // 0x31fb0
    char v3 = *(char *)(g6 - 0x7d61fbb); // 0x31fb0
    g7 = (int32_t)(v3 + (char)v2) | v2 & -256;
    int32_t result = function_31f33(); // 0x31fbc
    g4 = result;
    return result;
}

// Address range: 0x31fc1 - 0x31ff9
int32_t function_31fc1(void) {
    int32_t v1 = g5; // 0x31fc1
    g7 = *(int32_t *)(v1 + 16);
    int32_t v2 = v1 - 28; // 0x31fc4
    g4 = v2;
    *(int32_t *)v2 = 128;
    g10 = *(int32_t *)g7;
    int32_t v3 = function_30bf0(g6, 0, (int32_t *)g4); // 0x31fdf
    g4 = v3;
    if ((char)v3 != 0) {
        // bb
        g4 = function_3207c();
    }
    // 0x31fec
    *(int64_t *)g10 = (int64_t)__asm_movsd(__asm_xorpd(g878, g878));
    return g4;
}

// Address range: 0x31ff9 - 0x32055
int32_t function_31ff9(void) {
    int32_t v1 = g5; // 0x31ff9
    g7 = *(int32_t *)(v1 + 16);
    int32_t v2 = v1 - 28; // 0x31ffc
    g4 = v2;
    *(int32_t *)v2 = 128;
    int32_t v3 = *(int32_t *)g7; // 0x32006
    g7 = v3;
    *(int32_t *)(g5 - 56) = v3;
    int32_t v4 = function_30bf0(g6, 0, (int32_t *)g4); // 0x3201a
    g4 = v4;
    if ((char)v4 == 0) {
        int32_t v5 = *(int32_t *)(g5 - 56); // 0x32023
        g7 = v5;
        *(int32_t *)v5 = 0;
        *(int32_t *)(g7 + 4) = 0;
        return g4;
    }
    int32_t v6 = g6; // 0x32038
    int32_t v7 = *(int32_t *)(v6 + 12); // 0x32038
    g8 = v7;
    int32_t v8 = g5 - 28; // 0x3203b
    g4 = v8;
    int32_t v9 = v7 - *(int32_t *)(v6 + 32) + v6; // 0x32041
    g8 = v9;
    *(int32_t *)v8 = v9;
    return g4;
}

// Address range: 0x32059 - 0x3207c
int32_t function_32059(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x189c84d); // 0x32059
    *v1 = *v1 - 1;
    *(int32_t *)(g7 + 4) = g9;
    int32_t v2; // ebp
    g4 = *(int32_t *)(v2 - 28) - g8;
    int32_t * v3 = (int32_t *)(v2 + 16); // 0x3206d
    *v3 = *v3 + 4;
    g10 += 5;
    int32_t * v4 = (int32_t *)(g6 + 12); // 0x32074
    *v4 = g4 + *v4;
    return g4;
}

// Address range: 0x3207c - 0x32094
int32_t function_3207c(void) {
    int32_t v1 = g6; // 0x3207c
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x3207c
    g4 = v2;
    int32_t v3 = g5 - 32; // 0x3207f
    g9 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x32085
    g4 = v4;
    *(int32_t *)v3 = v4;
    *(int32_t *)(g5 - 60) = g4;
    return g4;
}

// Address range: 0x32099 - 0x320ae
int32_t function_32099(void) {
    // 0x32099
    float80_t v1; // st7
    *(float64_t *)g10 = (float64_t)v1;
    int32_t v2; // ebp
    int32_t v3 = *(int32_t *)(v2 - 32); // 0x3209b
    g9 = v3;
    int32_t v4 = *(int32_t *)(v2 - 60); // 0x3209e
    g4 = v4;
    g9 = v3 - v4;
    int32_t result = function_31ef2(); // 0x320a9
    g4 = result;
    return result;
}

// Address range: 0x320ae - 0x320b6
int32_t function_320ae(void) {
    // 0x320ae
    *(char *)g10 = 0;
    return g4;
}

// Address range: 0x320c0 - 0x320e1
int32_t function_320c0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2; // bp+12
    int32_t result = function_31a60(a1, a2, &v2); // 0x320da
    g4 = result;
    return result;
}

// Address range: 0x320f0 - 0x3215d
int32_t function_320f0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x320f0
    g4 = 0;
    int32_t v2 = g6; // 0x320f5
    g6 = a1;
    g9 = a2;
    if (*(char *)(a1 + 20) % 2 != 0 || (*(char *)(a1 + 21) & 8) != 0) {
        // 0x3210b
        g6 = v2;
        g5 = v1;
        return 0;
    }
    uint32_t v3 = *(int32_t *)(a1 + 16); // 0x32118
    g4 = v3;
    uint32_t v4 = *(int32_t *)(a1 + 32); // 0x3211b
    g7 = v4;
    if (v3 >= v4) {
        int32_t v5 = v3 - v4 + a2; // 0x3214a
        g7 = v5;
        g4 = 1;
        if (*(int32_t *)(a1 + 4) >= v5) {
            // 0x32157
            g6 = v2;
            g5 = v1;
            return 1;
        }
    }
    int32_t v6 = function_308c0(a1, a2); // 0x32129
    g9 = v6;
    g4 = 1;
    if ((char)v6 != 0) {
        // 0x3210b
        g6 = v2;
        g5 = v1;
        return 1;
    }
    char * v7 = (char *)(g6 + 20); // 0x32139
    *v7 = *v7 | 1;
    g4 = 0;
    g6 = v2;
    g5 = v1;
    return 0;
}

// Address range: 0x32160 - 0x3218c
int32_t function_32160(int32_t a1, uint32_t a2) {
    // 0x32160
    g9 = a1;
    g7 = a2 % 256;
    char * v1 = (char *)(a1 + 52); // 0x3216e
    int32_t v2 = a2 % 2; // 0x32174
    g7 = v2;
    int32_t v3 = -v2 & 2 | v2 | (int32_t)*v1 & 252; // 0x32181
    g4 = v3;
    *v1 = (char)v3;
    return g4;
}

// Address range: 0x32190 - 0x321bc
int32_t function_32190(int32_t a1, unsigned char a2) {
    // 0x32190
    g9 = a1;
    g7 = a2;
    char * v1 = (char *)(a1 + 52); // 0x3219e
    int32_t v2 = a2 % 2; // 0x321a4
    g7 = v2;
    int32_t v3 = -v2 & 2 | v2 | (int32_t)*v1 & 252; // 0x321b1
    g4 = v3;
    *v1 = (char)v3;
    return g4;
}

// Address range: 0x321c0 - 0x321cf
int32_t function_321c0(int32_t a1) {
    // 0x321c0
    g4 = a1;
    int32_t result = (int32_t)((*(char *)(a1 + 52) & 2) != 0) | a1 & -256; // 0x321cb
    g4 = result;
    return result;
}

// Address range: 0x321d0 - 0x32236
int32_t function_321d0(int32_t a1, uint32_t a2) {
    int32_t v1 = g5; // 0x321d0
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x321d6
    g6 = a1;
    int32_t v4 = g10; // 0x321dc
    g10 = a2;
    if (*(int32_t *)(a1 + 28) >= a2) {
        // 0x321f0
        g6 = v3;
        g10 = v4;
        g5 = v1;
        return g4;
    }
    // 0x321e7
    if ((*(char *)(a1 + 21) & 8) == 0) {
        // 0x32200
        if (*(char *)(a1 + 20) % 2 == 0) {
            int32_t v5 = function_320f0(a1, 1); // 0x32211
            g4 = v5;
            if ((char)v5 == 0) {
                char * v6 = (char *)(g6 + 20); // 0x32230
                *v6 = *v6 & -2;
            } else {
                int32_t v7 = g10; // 0x3221a
                g4 = v7;
                int32_t v8 = g6; // 0x3221c
                int32_t v9 = *(int32_t *)v8; // 0x3221c
                g9 = v9;
                int32_t v10 = v7 - *(int32_t *)(v8 + 32); // 0x3221e
                g4 = v10;
                *(char *)(v10 + v9) = 0;
            }
        }
    }
    // 0x321ed
    *(int32_t *)(g6 + 28) = g10;
    // 0x321f0
    g6 = v3;
    g10 = v4;
    g5 = v2;
    return g4;
}

// Address range: 0x32240 - 0x3229f
int32_t function_32240(int32_t a1, int32_t a2, int32_t a3) {
    // 0x32240
    g4 = a2;
    int32_t v1 = g10; // 0x32249
    g10 = a1;
    int32_t v2 = g6; // 0x3224f
    g9 = a3;
    int32_t v3 = *(int32_t *)(a1 + 16); // 0x32258
    g6 = v3;
    int32_t v4; // 0x32290
    if (a2 == 1) {
        // 0x32290
        v4 = v3 + a3;
        g6 = v4;
    } else {
        if (a2 == 2) {
            int32_t v5 = *(int32_t *)(a1 + 28) - a3; // 0x3229b
            g6 = v5;
            v4 = v5;
        } else {
            int32_t v6 = a2 == 0 ? a3 : v3; // 0x32264
            g6 = v6;
            v4 = v6;
        }
    }
    int32_t v7 = -1 - v4; // 0x3226c
    g4 = v7;
    g4 = function_308c0(a1, v7);
    *(int32_t *)(g10 + 16) = g6;
    int32_t v8 = g6; // 0x3227a
    g6 = v2;
    int32_t v9 = g10; // 0x32280
    g10 = v1;
    int32_t result = function_321d0(v9, v8); // 0x32289
    g4 = result;
    return result;
}

// Address range: 0x322a0 - 0x322f3
int32_t function_322a0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x322a0
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x322a6
    g6 = a3;
    int32_t v4 = g10; // 0x322ac
    g10 = a1;
    int32_t v5 = g8; // 0x322b2
    g8 = a2;
    if (a3 == 0) {
        // 0x322bc
        g6 = v3;
        g10 = v4;
        g8 = v5;
        g5 = v1;
        return g4;
    }
    int32_t result = function_320f0(a1, a3); // 0x322d7
    g4 = result;
    if ((char)result == 0) {
        // 0x322bc
        g6 = v3;
        g10 = v4;
        g8 = v5;
        g5 = v2;
        return result;
    }
    int32_t v6 = g10; // 0x322e0
    int32_t v7 = *(int32_t *)(v6 + 16); // 0x322e0
    g4 = v7;
    int32_t v8 = v7 - *(int32_t *)(v6 + 32); // 0x322e3
    g4 = v8;
    int32_t result2 = *(int32_t *)v6 + v8; // 0x322e6
    g4 = result2;
    return result2;
}

// Address range: 0x322f7 - 0x32315
int32_t function_322f7(int32_t a1) {
    int32_t v1 = g6; // 0x322f7
    *(int32_t *)v1 = v1 + 1;
    g10 = a1;
    int32_t v2 = g7; // 0x322fa
    char * v3 = (char *)(v2 + 0x7d8b105e); // 0x322fa
    bool v4; // cf
    *v3 = (char)v4 + *v3 + (char)v2;
    *(int32_t *)(g5 + 12) = g6;
    *(int32_t *)(g5 + 8) = g10;
    int32_t v5 = g5; // 0x32307
    g6 = *(int32_t *)(v5 - 12);
    g10 = *(int32_t *)(v5 - 8);
    int32_t result = function_321d0((int32_t)&g870, (int32_t)&g870); // 0x32310
    g4 = result;
    return result;
}

// Address range: 0x32320 - 0x3238d
int32_t function_32320(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x32320
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x32323
    int32_t v4 = g10; // 0x32324
    int32_t v5 = g6; // 0x32325
    g6 = a1;
    g8 = a2;
    unsigned char v6 = *(char *)(a1 + 21); // 0x3232f
    int32_t result2 = v6; // 0x3232f
    g4 = result2;
    if (v6 % 2 == 0) {
        if (a2 == 0) {
            int32_t v7 = function_324b3((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x32339
            g4 = v7;
        }
        int32_t v8 = function_2cb40(a2) + 1; // 0x3234b
        g4 = v8;
        int32_t result = function_322a0(g6, a2, v8); // 0x32355
        g4 = result;
        // 0x3235a
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v2;
        return result;
    }
    if (a2 == 0) {
        // 0x3235a
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v1;
        return result2;
    }
    int32_t v9; // 0x32370
    if ((result2 & 16) != 0) {
        int32_t v10 = function_323b9((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3236e
        g4 = v10;
        v9 = g6;
    } else {
        v9 = a1;
    }
    int32_t v11 = *(int32_t *)(v9 + 24); // 0x32370
    g10 = v11;
    int32_t v12; // 0x32377
    if (v11 < 1) {
        int32_t v13 = function_323b9((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x32375
        g4 = v13;
        v12 = g6;
    } else {
        v12 = v9;
    }
    int32_t v14 = *(int32_t *)(v12 + 16); // 0x32377
    g4 = v14;
    int32_t result3; // 0x3237c
    if (v14 != 0) {
        // bb28
        result3 = function_32458();
        g4 = result3;
    } else {
        result3 = v14;
    }
    // 0x32382
    return result3;
}

// Address range: 0x32398 - 0x32399
int32_t function_32398(void) {
    // 0x32398
    return g4;
}

// Address range: 0x323b9 - 0x323dd
int32_t function_323b9(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = function_2cb40(g8); // 0x323bc
    g4 = v1;
    int32_t result = function_322a0(g6, g8, v1); // 0x323d0
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x323ff - 0x32403
int32_t function_323ff(void) {
    // 0x323ff
    g4 &= -24;
    int32_t result = function_323ff(); // 0x32401
    g4 = result;
    return result;
}

// Address range: 0x32442 - 0x32451
int32_t function_32442(void) {
    int32_t v1 = g4; // 0x32442
    g10 = v1;
    if (v1 != 0) {
        // bb
        g4 = function_32398();
    }
    int32_t result = function_323b9((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3244c
    g4 = result;
    return result;
}

// Address range: 0x32458 - 0x324b3
int32_t function_32458(void) {
    int32_t v1 = g4 - 1; // 0x32458
    g4 = v1;
    int32_t v2 = g6; // 0x3245b
    g9 = v2;
    g4 = v1 - *(int32_t *)(v2 + 32);
    while (true) {
        // 0x32470
        g10--;
        int32_t v3 = function_320f0(g6, 1); // 0x32487
        g4 = v3;
        if ((char)v3 != 0) {
            int32_t v4 = g6; // 0x32490
            int32_t v5 = *(int32_t *)(v4 + 16); // 0x32490
            g4 = v5;
            g9 = v4;
            int32_t v6 = v5 - *(int32_t *)(v4 + 32); // 0x32495
            g4 = v6;
            *(char *)(v6 + v4) = 9;
            int32_t * v7 = (int32_t *)(g6 + 16); // 0x3249c
            int32_t v8 = *v7 + 1; // 0x3249f
            g4 = v8;
            *v7 = v8;
            g4 = function_321d0(g6, g4);
        }
    }
}

// Address range: 0x324b3 - 0x324f2
int32_t function_324b3(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x324b3
    g4 = function_320f0(g6, 1);
    int32_t v1 = g6; // 0x324cb
    int32_t v2 = *(int32_t *)(v1 + 16); // 0x324cb
    g4 = v2;
    g9 = v1;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32); // 0x324d0
    g4 = v3;
    *(char *)(v3 + v1) = 0;
    int32_t * v4 = (int32_t *)(g6 + 16); // 0x324d7
    int32_t v5 = *v4 + 1; // 0x324da
    g4 = v5;
    *v4 = v5;
    *(int32_t *)(g5 + 8) = g6;
    *(int32_t *)(g5 + 12) = g4;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    int32_t result = function_321d0((int32_t)&g870, (int32_t)&g870); // 0x324ed
    g4 = result;
    return result;
}

// Address range: 0x32500 - 0x32544
int32_t function_32500(int32_t a1, int32_t a2, int32_t * a3) {
    // 0x32500
    int32_t v1; // bp-8204
    int32_t v2 = &v1; // 0x32504
    g6 = v2;
    g4 = a1;
    int32_t v3 = function_2da90(v2, (int32_t)&g63, a1, a2); // 0x32529
    g4 = v3;
    int32_t result; // 0x32533
    if (v3 <= (int32_t)&g62) {
        // bb
        result = function_32549((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v3;
    }
    // 0x32535
    return result;
}

// Address range: 0x32549 - 0x32561
int32_t function_32549(int32_t a1, int32_t a2) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x32549
    g4 = v1;
    int32_t result = function_32320(v1, g6); // 0x32553
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x32570 - 0x32591
int32_t function_32570(int32_t a1, char * a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t v2; // bp+12
    int32_t result = function_32500(a1, (int32_t)a2, &v2); // 0x3258a
    g4 = result;
    g5 = v1;
    return result;
}

// Address range: 0x325a0 - 0x328d7
int32_t function_325a0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x325a3
    int32_t v2 = g10; // 0x325a4
    int32_t v3 = g6; // 0x325a5
    g6 = a1;
    g9 = a2;
    g7 = a3;
    unsigned char v4 = *(char *)(a1 + 21); // 0x325b2
    int32_t v5 = v4; // 0x325b2
    g4 = v5;
    if (v4 % 2 != 0) {
        if (a2 != 0) {
            int32_t v6 = *(int32_t *)(a1 + 16); // 0x325dc
            g9 = v6;
            if (v6 != 0) {
                int32_t v7 = v6 - 1; // 0x325e3
                g9 = v7;
                int32_t v8 = *(int32_t *)a1; // 0x325e6
                g7 = v8;
                int32_t v9 = v7 - *(int32_t *)(a1 + 32); // 0x325e8
                g9 = v9;
                if (*(char *)(v9 + v8) == 10) {
                    // 0x325f1
                    g10 = 0;
                    int32_t v10; // 0x328cf
                    if ((v5 & 16) == 0) {
                        // 0x328cf
                        v10 = *(int32_t *)(a1 + 24);
                        g10 = v10;
                    } else {
                        v10 = 0;
                    }
                    while (true) {
                        int32_t v11 = v10 - 1; // 0x32600
                        g10 = v11;
                        if (v11 < 0) {
                            // break -> 0x32640
                            break;
                        }
                        while (true) {
                            int32_t v12 = function_320f0(g6, 1); // 0x32610
                            g4 = v12;
                            if ((char)v12 == 0) {
                                // break -> 0x32600
                                break;
                            }
                            int32_t v13 = g6; // 0x32619
                            int32_t v14 = *(int32_t *)(v13 + 16); // 0x32619
                            g4 = v14;
                            int32_t v15 = *(int32_t *)v13; // 0x3261c
                            g9 = v15;
                            int32_t v16 = v14 - *(int32_t *)(v13 + 32); // 0x3261e
                            g4 = v16;
                            *(char *)(v16 + v15) = 9;
                            int32_t * v17 = (int32_t *)(g6 + 16); // 0x32625
                            int32_t v18 = *v17 + 1; // 0x32628
                            g4 = v18;
                            *v17 = v18;
                            g4 = function_321d0(g6, g4);
                            int32_t v19 = g10 - 1; // 0x3263a
                            g10 = v19;
                            if (v19 < 0) {
                                // break (via goto) -> 0x32640
                                goto lab_0x32640;
                            }
                        }
                        // 0x32600
                        v10 = g10;
                    }
                }
            }
          lab_0x32640:
            // 0x32640
            g7 = a2;
            int32_t v20 = a2 + 12; // 0x32643
            int32_t * v21 = (int32_t *)v20; // 0x32643
            int32_t v22 = *v21; // 0x32643
            g4 = v22;
            int32_t * v23 = (int32_t *)(a2 + 8); // 0x3264a
            int32_t v24 = *v23; // 0x3264a
            g4 = v24;
            function_322a0(g6, v24, v22);
            g4 = a3;
            if (a3 != 0) {
                // 0x32664
                g9 = a3;
                int32_t v25 = function_2cb40(a3); // 0x3266a
                g4 = v25;
                if (v25 >= 1) {
                    // 0x3267a
                    g8 = 0;
                    int32_t v26 = 0; // 0x32683
                    while (true) {
                        // 0x32680
                        g7 = a3;
                        int32_t v27 = (int32_t)*(char *)(v26 + a3); // 0x32683
                        g10 = v27;
                        g7 = a2;
                        g9 = v27;
                        int32_t v28 = (v27 & (int32_t)&g862) + 34; // 0x3268f
                        g4 = v28;
                        int32_t v29 = 8 * v28; // 0x32692
                        int32_t v30 = *(int32_t *)((v29 | 8) + a2); // 0x32692
                        g7 = v30;
                        if (v30 == 0) {
                            int32_t v31 = g6; // 0x32810
                            unsigned char v32 = *(char *)(v31 + 21); // 0x32810
                            int32_t v33 = v32; // 0x32810
                            g7 = v33;
                            if (v32 % 2 != 0) {
                                int32_t v34 = *(int32_t *)(v31 + 16); // 0x32819
                                g4 = v34;
                                if (v34 != 0) {
                                    int32_t v35 = v34 - 1; // 0x32820
                                    g4 = v35;
                                    int32_t v36 = *(int32_t *)v31; // 0x32823
                                    g9 = v36;
                                    int32_t v37 = v35 - *(int32_t *)(v31 + 32); // 0x32825
                                    g4 = v37;
                                    if (*(char *)(v37 + v36) == 10) {
                                        int32_t v38 = v33 & 16; // 0x3282e
                                        g7 = v38;
                                        int32_t v39; // 0x3283a
                                        if (v38 == 0) {
                                            // 0x3283a
                                            v39 = *(int32_t *)(v31 + 24);
                                            g9 = v39;
                                        } else {
                                            v39 = 0;
                                        }
                                        while (true) {
                                            int32_t v40 = v39 - 1; // 0x32840
                                            if (v40 < 0) {
                                                // break -> 0x32888
                                                break;
                                            }
                                            while (true) {
                                                int32_t v41 = function_320f0(g6, 1); // 0x32851
                                                g4 = v41;
                                                if ((char)v41 == 0) {
                                                    v39 = v40;
                                                    // break -> 0x32840
                                                    break;
                                                }
                                                int32_t v42 = g6; // 0x3285a
                                                int32_t v43 = *(int32_t *)(v42 + 16); // 0x3285a
                                                g4 = v43;
                                                int32_t v44 = *(int32_t *)v42; // 0x3285d
                                                g9 = v44;
                                                int32_t v45 = v43 - *(int32_t *)(v42 + 32); // 0x3285f
                                                g4 = v45;
                                                *(char *)(v45 + v44) = 9;
                                                int32_t * v46 = (int32_t *)(g6 + 16); // 0x32866
                                                int32_t v47 = *v46 + 1; // 0x32869
                                                g4 = v47;
                                                *v46 = v47;
                                                g4 = function_321d0(g6, g4);
                                                int32_t v48 = v40 - 1; // 0x3287b
                                                if (v48 < 0) {
                                                    // break (via goto) -> 0x32888
                                                    goto lab_0x32888;
                                                }
                                                v40 = v48;
                                            }
                                        }
                                    }
                                }
                            }
                          lab_0x32888:;
                            int32_t v49 = function_320f0(g6, 1); // 0x32893
                            g4 = v49;
                            if ((char)v49 != 0) {
                                int32_t v50 = g6; // 0x328a0
                                int32_t v51 = *(int32_t *)(v50 + 16); // 0x328a0
                                g4 = v51;
                                int32_t v52 = g10; // 0x328a3
                                g7 = v52;
                                int32_t v53 = *(int32_t *)v50; // 0x328a5
                                g9 = v53;
                                int32_t v54 = v51 - *(int32_t *)(v50 + 32); // 0x328a7
                                g4 = v54;
                                *(char *)(v54 + v53) = (char)v52;
                                int32_t * v55 = (int32_t *)(g6 + 16); // 0x328ad
                                int32_t v56 = *v55 + 1; // 0x328b0
                                g4 = v56;
                                *v55 = v56;
                                g4 = function_321d0(g6, g4);
                            }
                        } else {
                            // 0x326a4
                            g9 = a2;
                            int32_t v57 = g6; // 0x326a7
                            unsigned char v58 = *(char *)(v57 + 21); // 0x326a7
                            int32_t v59 = v58; // 0x326a7
                            g7 = v59;
                            unsigned char v60 = *(char *)(a2 + 4); // 0x326ab
                            int32_t v61 = v60; // 0x326ab
                            g9 = v61;
                            if (v58 % 2 != 0) {
                                int32_t v62 = *(int32_t *)(v57 + 16); // 0x326b7
                                g4 = v62;
                                if (v62 != 0) {
                                    int32_t v63 = v62 - 1; // 0x326be
                                    g4 = v63;
                                    int32_t v64 = *(int32_t *)v57; // 0x326c1
                                    g9 = v64;
                                    int32_t v65 = v63 - *(int32_t *)(v57 + 32); // 0x326c3
                                    g4 = v65;
                                    if (*(char *)(v65 + v64) == 10) {
                                        // 0x326cc
                                        g10 = 0;
                                        int32_t v66 = v59 & 16; // 0x326ce
                                        g7 = v66;
                                        int32_t v67; // 0x326d3
                                        if (v66 == 0) {
                                            // 0x326d3
                                            v67 = *(int32_t *)(v57 + 24);
                                            g10 = v67;
                                        } else {
                                            v67 = 0;
                                        }
                                        while (true) {
                                            int32_t v68 = v67 - 1; // 0x326e0
                                            g10 = v68;
                                            if (v68 < 0) {
                                                // break -> 0x32720
                                                break;
                                            }
                                            while (true) {
                                                int32_t v69 = function_320f0(g6, 1); // 0x326f0
                                                g4 = v69;
                                                if ((char)v69 == 0) {
                                                    // break -> 0x326e0
                                                    break;
                                                }
                                                int32_t v70 = g6; // 0x326f9
                                                int32_t v71 = *(int32_t *)(v70 + 16); // 0x326f9
                                                g4 = v71;
                                                int32_t v72 = *(int32_t *)v70; // 0x326fc
                                                g9 = v72;
                                                int32_t v73 = v71 - *(int32_t *)(v70 + 32); // 0x326fe
                                                g4 = v73;
                                                *(char *)(v73 + v72) = 9;
                                                int32_t * v74 = (int32_t *)(g6 + 16); // 0x32705
                                                int32_t v75 = *v74 + 1; // 0x32708
                                                g4 = v75;
                                                *v74 = v75;
                                                g4 = function_321d0(g6, g4);
                                                int32_t v76 = g10 - 1; // 0x3271a
                                                g10 = v76;
                                                if (v76 < 0) {
                                                    // break (via goto) -> 0x32720
                                                    goto lab_0x32720;
                                                }
                                            }
                                            // 0x326e0
                                            v67 = g10;
                                        }
                                    }
                                }
                            }
                          lab_0x32720:;
                            int32_t v77 = function_320f0(g6, 1); // 0x3272b
                            g4 = v77;
                            if ((char)v77 != 0) {
                                int32_t v78 = g6; // 0x32734
                                int32_t v79 = *(int32_t *)(v78 + 16); // 0x32734
                                g4 = v79;
                                int32_t v80 = *(int32_t *)v78; // 0x32737
                                g9 = v80;
                                g7 = v61;
                                int32_t v81 = v79 - *(int32_t *)(v78 + 32); // 0x3273d
                                g4 = v81;
                                *(char *)(v81 + v80) = v60;
                                int32_t * v82 = (int32_t *)(g6 + 16); // 0x32743
                                int32_t v83 = *v82 + 1; // 0x32746
                                g4 = v83;
                                *v82 = v83;
                                g4 = function_321d0(g6, g4);
                            }
                            // 0x32758
                            g7 = v28;
                            g9 = a2;
                            int32_t v84 = *(int32_t *)(v29 + v20); // 0x32765
                            g4 = v84;
                            g4 = function_322a0(g6, v84, v30);
                        }
                        int32_t v85 = g8 + 1; // 0x32775
                        g8 = v85;
                        if (v85 == v25) {
                            // break -> 0x32781
                            break;
                        }
                        v26 = v85;
                    }
                }
            }
            int32_t v86 = g6; // 0x32781
            unsigned char v87 = *(char *)(v86 + 21); // 0x32781
            int32_t v88 = v87; // 0x32781
            g4 = v88;
            if (v87 % 2 != 0) {
                int32_t v89 = *(int32_t *)(v86 + 16); // 0x32789
                g9 = v89;
                if (v89 != 0) {
                    int32_t v90 = v89 - 1; // 0x32790
                    g9 = v90;
                    int32_t v91 = *(int32_t *)v86; // 0x32793
                    g7 = v91;
                    int32_t v92 = v90 - *(int32_t *)(v86 + 32); // 0x32795
                    g9 = v92;
                    if (*(char *)(v92 + v91) == 10) {
                        // 0x3279e
                        g10 = 0;
                        int32_t v93; // 0x328c7
                        if ((v88 & 16) == 0) {
                            // 0x328c7
                            v93 = *(int32_t *)(v86 + 24);
                            g10 = v93;
                        } else {
                            v93 = 0;
                        }
                        while (true) {
                            int32_t v94 = v93 - 1; // 0x327b0
                            g10 = v94;
                            if (v94 < 0) {
                                // break -> 0x327f0
                                break;
                            }
                            while (true) {
                                int32_t v95 = function_320f0(g6, 1); // 0x327c0
                                g4 = v95;
                                if ((char)v95 == 0) {
                                    // break -> 0x327b0
                                    break;
                                }
                                int32_t v96 = g6; // 0x327c9
                                int32_t v97 = *(int32_t *)(v96 + 16); // 0x327c9
                                g4 = v97;
                                int32_t v98 = *(int32_t *)v96; // 0x327cc
                                g9 = v98;
                                int32_t v99 = v97 - *(int32_t *)(v96 + 32); // 0x327ce
                                g4 = v99;
                                *(char *)(v99 + v98) = 9;
                                int32_t * v100 = (int32_t *)(g6 + 16); // 0x327d5
                                int32_t v101 = *v100 + 1; // 0x327d8
                                g4 = v101;
                                *v100 = v101;
                                g4 = function_321d0(g6, g4);
                                int32_t v102 = g10 - 1; // 0x327ea
                                g10 = v102;
                                if (v102 < 0) {
                                    // break (via goto) -> 0x327f0
                                    goto lab_0x327f0;
                                }
                            }
                            // 0x327b0
                            v93 = g10;
                        }
                    }
                }
            }
          lab_0x327f0:
            // 0x327f0
            g7 = a2;
            int32_t v103 = *v21; // 0x327f3
            g4 = v103;
            int32_t v104 = *v23; // 0x327f9
            g4 = v104;
            int32_t v105 = g6; // 0x327fc
            g6 = v3;
            g10 = v2;
            g8 = v1;
            int32_t result = function_322a0(v105, v104, v103); // 0x32809
            g4 = result;
            return result;
        }
    }
    // 0x325c0
    g9 = a3;
    g6 = v3;
    int32_t result2 = function_32320(a3, a2); // 0x325d0
    g4 = result2;
    return result2;
}

// Address range: 0x328e0 - 0x32b15
int32_t function_328e0(int32_t a1, int32_t a2, unsigned char a3) {
    int32_t v1 = g8; // 0x328e3
    int32_t v2 = g10; // 0x328e4
    int32_t v3 = g6; // bp-16
    g6 = a1;
    g8 = a2;
    int32_t v4 = a3; // 0x328ef
    g10 = v4;
    unsigned char v5 = *(char *)(a1 + 21); // 0x328f3
    int32_t v6 = v5; // 0x328f3
    g4 = v6;
    if (v5 % 2 != 0) {
        if (a2 == 0) {
            int32_t v7 = *(int32_t *)(a1 + 16); // 0x32a60
            g9 = v7;
            if (v7 != 0) {
                int32_t v8 = v7 - 1; // 0x32a67
                g9 = v8;
                int32_t v9 = *(int32_t *)a1; // 0x32a6a
                g7 = v9;
                int32_t v10 = v8 - *(int32_t *)(a1 + 32); // 0x32a6c
                g9 = v10;
                if (*(char *)(v10 + v9) == 10) {
                    // 0x32a75
                    g8 = 0;
                    int32_t v11; // 0x32a7b
                    if ((v6 & 16) == 0) {
                        // 0x32a7b
                        v11 = *(int32_t *)(a1 + 24);
                        g8 = v11;
                    } else {
                        v11 = 0;
                    }
                    while (true) {
                        int32_t v12 = v11 - 1; // 0x32a80
                        g8 = v12;
                        if (v12 < 0) {
                            // break -> 0x32a10
                            break;
                        }
                        int32_t v13 = function_320f0(g6, 1); // 0x32a90
                        g4 = v13;
                        if ((char)v13 != 0) {
                            int32_t v14 = g6; // 0x32a99
                            int32_t v15 = *(int32_t *)(v14 + 16); // 0x32a99
                            g4 = v15;
                            int32_t v16 = *(int32_t *)v14; // 0x32a9c
                            g9 = v16;
                            int32_t v17 = v15 - *(int32_t *)(v14 + 32); // 0x32a9e
                            g4 = v17;
                            *(char *)(v17 + v16) = 9;
                            int32_t * v18 = (int32_t *)(g6 + 16); // 0x32aa5
                            int32_t v19 = *v18 + 1; // 0x32aa8
                            g4 = v19;
                            *v18 = v19;
                            g4 = function_321d0(g6, g4);
                        }
                        // 0x32a80
                        v11 = g8;
                    }
                }
            }
        } else {
            // 0x32907
            g7 = v4;
            int32_t v20 = (v4 & (int32_t)&g862) + 34; // 0x3290c
            g9 = v20;
            int32_t v21 = 8 * v20; // 0x32912
            int32_t v22 = *(int32_t *)((v21 | 8) + a2); // 0x32912
            g9 = v22;
            int32_t v23 = 0x1000000 * v22;
            if (v23 != 0) {
                unsigned char v24 = *(char *)(a2 + 4); // 0x32921
                int32_t v25 = v24; // 0x32921
                g9 = v25;
                int32_t v26 = *(int32_t *)(a1 + 16); // 0x32928
                g9 = v26;
                if (v26 != 0) {
                    int32_t v27 = v26 - 1; // 0x3292f
                    g9 = v27;
                    int32_t v28 = *(int32_t *)a1; // 0x32932
                    g7 = v28;
                    int32_t v29 = v27 - *(int32_t *)(a1 + 32); // 0x32934
                    g9 = v29;
                    if (*(char *)(v29 + v28) == 10) {
                        // 0x3293d
                        g10 = 0;
                        int32_t v30; // 0x32943
                        if ((v6 & 16) == 0) {
                            // 0x32943
                            v30 = *(int32_t *)(a1 + 24);
                            g10 = v30;
                        } else {
                            v30 = 0;
                        }
                        while (true) {
                            int32_t v31 = v30 - 1; // 0x32950
                            g10 = v31;
                            if (v31 < 0) {
                                // break -> 0x32990
                                break;
                            }
                            while (true) {
                                int32_t v32 = function_320f0(g6, 1); // 0x32960
                                g4 = v32;
                                if ((char)v32 == 0) {
                                    // break -> 0x32950
                                    break;
                                }
                                int32_t v33 = g6; // 0x32969
                                int32_t v34 = *(int32_t *)(v33 + 16); // 0x32969
                                g4 = v34;
                                int32_t v35 = *(int32_t *)v33; // 0x3296c
                                g9 = v35;
                                int32_t v36 = v34 - *(int32_t *)(v33 + 32); // 0x3296e
                                g4 = v36;
                                *(char *)(v36 + v35) = 9;
                                int32_t * v37 = (int32_t *)(g6 + 16); // 0x32975
                                int32_t v38 = *v37 + 1; // 0x32978
                                g4 = v38;
                                *v37 = v38;
                                g4 = function_321d0(g6, g4);
                                int32_t v39 = g10 - 1; // 0x3298a
                                g10 = v39;
                                if (v39 < 0) {
                                    // break (via goto) -> 0x32990
                                    goto lab_0x32990;
                                }
                            }
                            // 0x32950
                            v30 = g10;
                        }
                    }
                }
              lab_0x32990:;
                int32_t v40 = function_320f0(g6, 1); // 0x3299b
                g4 = v40;
                if ((char)v40 != 0) {
                    int32_t v41 = g6; // 0x329a4
                    int32_t v42 = *(int32_t *)(v41 + 16); // 0x329a4
                    g4 = v42;
                    int32_t v43 = *(int32_t *)v41; // 0x329a7
                    g9 = v43;
                    g7 = v25;
                    int32_t v44 = v42 - *(int32_t *)(v41 + 32); // 0x329ad
                    g4 = v44;
                    *(char *)(v44 + v43) = v24;
                    int32_t * v45 = (int32_t *)(g6 + 16); // 0x329b3
                    int32_t v46 = *v45 + 1; // 0x329b6
                    g4 = v46;
                    *v45 = v46;
                    g4 = function_321d0(g6, g4);
                }
                int32_t v47 = v23 / 0x1000000; // 0x329c8
                g9 = v47;
                g7 = v20;
                int32_t v48 = *(int32_t *)(g8 + (v21 | 12)); // 0x329d1
                g4 = v48;
                int32_t v49 = g6; // 0x329d5
                g6 = v3;
                g10 = v2;
                g8 = v1;
                int32_t result = function_322a0(v49, v48, v47); // 0x329e2
                g4 = result;
                return result;
            }
            int32_t v50 = *(int32_t *)(a1 + 16); // 0x329f0
            g9 = v50;
            if (v50 != 0) {
                int32_t v51 = v50 - 1; // 0x329f7
                g9 = v51;
                int32_t v52 = *(int32_t *)a1; // 0x329fa
                g7 = v52;
                int32_t v53 = v51 - *(int32_t *)(a1 + 32); // 0x329fc
                g9 = v53;
                if (*(char *)(v53 + v52) == 10) {
                    // 0x32ac0
                    g8 = 0;
                    int32_t v54; // 0x32b10
                    if ((v6 & 16) == 0) {
                        // 0x32b10
                        v54 = *(int32_t *)(a1 + 24);
                        g8 = v54;
                    } else {
                        v54 = 0;
                    }
                    while (true) {
                        int32_t v55 = v54 - 1; // 0x32ad0
                        g8 = v55;
                        if (v55 < 0) {
                            // break -> 0x32a10
                            break;
                        }
                        int32_t v56 = function_320f0(g6, 1); // 0x32ae4
                        g4 = v56;
                        if ((char)v56 != 0) {
                            int32_t v57 = g6; // 0x32aed
                            int32_t v58 = *(int32_t *)(v57 + 16); // 0x32aed
                            g4 = v58;
                            int32_t v59 = *(int32_t *)v57; // 0x32af0
                            g9 = v59;
                            int32_t v60 = v58 - *(int32_t *)(v57 + 32); // 0x32af2
                            g4 = v60;
                            *(char *)(v60 + v59) = 9;
                            int32_t * v61 = (int32_t *)(g6 + 16); // 0x32af9
                            int32_t v62 = *v61 + 1; // 0x32afc
                            g4 = v62;
                            *v61 = v62;
                            g4 = function_321d0(g6, g4);
                        }
                        // 0x32ad0
                        v54 = g8;
                    }
                }
            }
        }
    }
    int32_t result2 = function_320f0(g6, 1); // 0x32a1b
    g4 = result2;
    if ((char)result2 == 0) {
        // 0x32a24
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result2;
    }
    int32_t v63 = g6; // 0x32a30
    int32_t v64 = *(int32_t *)(v63 + 16); // 0x32a30
    g4 = v64;
    int32_t v65 = g10; // 0x32a33
    g7 = v65;
    int32_t v66 = *(int32_t *)v63; // 0x32a35
    g9 = v66;
    int32_t v67 = v64 - *(int32_t *)(v63 + 32); // 0x32a37
    g4 = v67;
    *(char *)(v67 + v66) = (char)v65;
    int32_t * v68 = (int32_t *)(g6 + 16); // 0x32a3d
    int32_t v69 = *v68 + 1; // 0x32a40
    g4 = v69;
    *v68 = v69;
    int32_t v70 = g6; // 0x32a46
    g6 = v3;
    g10 = v2;
    g8 = v1;
    int32_t result3 = function_321d0(v70, g4); // 0x32a53
    g4 = result3;
    return result3;
}

// Address range: 0x32b20 - 0x32bc7
int32_t function_32b20(int32_t a1, int32_t * a2, int32_t * a3) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x32b26
    g6 = a1;
    int32_t v4 = g10; // 0x32b2c
    g10 = (int32_t)a3;
    int32_t v5 = g8; // 0x32b32
    int32_t v6 = function_30c90(a1); // 0x32b38
    g4 = v6;
    int32_t v7 = v6 - 1; // 0x32b3d
    if (v6 <= 1) {
        // 0x32ba0
        function_30920(g6, 2, 0);
        g6 = v3;
        g4 = 0;
        g10 = v4;
        g8 = v5;
        return 0;
    }
    // 0x32b42
    g8 = v7;
    int32_t v8 = g6; // 0x32b45
    int32_t v9 = *(int32_t *)(v8 + 12); // 0x32b45
    g4 = v9;
    int32_t v10 = *(int32_t *)(v8 + 32); // 0x32b48
    g9 = v10;
    int32_t v11 = *(int32_t *)v8; // 0x32b4e
    g4 = v11;
    function_30920(v8, 1, v7);
    g4 = v1;
    if (a2 != NULL) {
        // 0x32b71
        g9 = v1;
        int32_t v12 = v11 + v9 - v10; // 0x32b7a
        g4 = v12;
        *a2 = v12;
    }
    // 0x32b7f
    g4 = 1;
    int32_t result; // 0x32b96
    if (a3 != NULL) {
        // 0x32b88
        *a3 = g8;
        result = g4;
    } else {
        result = 1;
    }
    // 0x32b8a
    g6 = v3;
    g10 = v4;
    g8 = v5;
    return result;
}

// Address range: 0x32bd0 - 0x32c4c
int32_t function_32bd0(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t result3 = 0; // bp-20
    g4 = a1;
    int32_t v2 = 0; // bp-16
    int32_t v3 = function_32b20(a1, &result3, &v2); // 0x32bf8
    int32_t result = result3; // 0x32bff
    g4 = result;
    if ((char)v3 == 0) {
        // 0x32c18
        return result;
    }
    int32_t v4 = v2; // 0x32c04
    g9 = v4;
    int32_t v5 = result - 1 + v4; // 0x32c07
    g7 = v5;
    char * v6 = (char *)v5; // 0x32c0b
    unsigned char v7 = *v6; // 0x32c0b
    g9 = v7;
    if (v7 != 10) {
        if (v7 != 13) {
            // 0x32c18
            return result;
        }
    }
    // 0x32c20
    *v6 = 0;
    int32_t v8 = v2; // 0x32c23
    g9 = v8;
    int32_t v9 = v8 - 1; // 0x32c26
    v2 = v9;
    int32_t result2 = result3; // 0x32c2e
    g4 = result2;
    if (v9 == 0) {
        // 0x32c18
        return result2;
    }
    int32_t v10 = v8 - 2 + result2; // 0x32c33
    g7 = v10;
    char * v11 = (char *)v10; // 0x32c37
    unsigned char v12 = *v11; // 0x32c37
    g9 = v12;
    if (v12 != 10) {
        if (v12 != 13) {
            // 0x32c18
            return result2;
        }
    }
    // 0x32c44
    *v11 = 0;
    g4 = result3;
    return result3;
}

// Address range: 0x32c50 - 0x32ce9
int32_t function_32c50(int32_t * a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g6; // 0x32c53
    g6 = v1;
    g4 = a2;
    g7 = a4;
    g9 = a3;
    *(int32_t *)(v1 + 8) = -1;
    *(int32_t *)g6 = g4;
    int32_t v3 = g6; // 0x32c6c
    g4 = (int32_t)*(char *)(v3 + 52);
    *(char *)(v3 + 21) = (char)g7;
    *(int32_t *)(g6 + 4) = g9;
    g4 &= -4;
    int32_t v4 = g7 & 8; // 0x32c7f
    g7 = v4;
    *(char *)(g6 + 20) = 0;
    *(char *)(g6 + 52) = (char)g4;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 32) = 0;
    if (v4 == 0) {
        // 0x32cd0
        *(int32_t *)(g6 + 28) = -1;
        g4 = function_321d0(g6, 0);
    } else {
        // 0x32ca7
        *(int32_t *)(g6 + 16) = g9;
        *(int32_t *)(g6 + 28) = g9;
    }
    // 0x32cad
    *(int32_t *)(g6 + 36) = 0x303f0;
    *(int32_t *)(g6 + 40) = 0;
    *(int32_t *)(g6 + 44) = 0x33310;
    *(int32_t *)(g6 + 48) = 0;
    g6 = v2;
    return g4;
}

// Address range: 0x32ce9 - 0x32d7d
int32_t function_32ce9(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x32ce9
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_333b0(g6);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x32cf4
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    g9 = a2;
    int32_t v3 = g6; // 0x32d09
    g4 = a3;
    int32_t v4 = g10; // 0x32d0f
    g6 = a1;
    int32_t v5 = g8; // 0x32d15
    g10 = a4;
    g8 = a5;
    function_333b0(a1);
    g9 = a2;
    *(int32_t *)g6 = a2;
    g4 = a3;
    *(int32_t *)(g6 + 8) = -1;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = g10;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 4) = g4;
    g4 = g8;
    *(char *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(char *)(g6 + 21) = (char)g4;
    *(int32_t *)(g6 + 28) = -1;
    g8 = v5;
    int32_t v6 = g10; // 0x32d69
    int32_t v7 = g6; // 0x32d6c
    g10 = v4;
    g6 = v3;
    g5 = v2;
    int32_t result = function_321d0(v7, v6); // 0x32d78
    g4 = result;
    return result;
}

// Address range: 0x32d80 - 0x32df6
int32_t function_32d80(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g9 = a2;
    int32_t v2 = g6; // 0x32d89
    g4 = a3;
    int32_t v3 = g10; // 0x32d8f
    g6 = a1;
    int32_t v4 = g8; // 0x32d95
    g10 = a4;
    g8 = a5;
    function_333b0(a1);
    g9 = a2;
    *(int32_t *)g6 = a2;
    g4 = a3;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = g10;
    *(int32_t *)(g6 + 24) = 0;
    *(char *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = g4;
    g4 = g8;
    *(int32_t *)(g6 + 32) = 0;
    *(char *)(g6 + 21) = (char)g4;
    *(int32_t *)(g6 + 28) = -1;
    g8 = v4;
    int32_t v5 = g10; // 0x32de2
    int32_t v6 = g6; // 0x32de5
    g10 = v3;
    g6 = v2;
    g5 = v1;
    int32_t result = function_321d0(v6, v5); // 0x32df1
    g4 = result;
    return result;
}

// Address range: 0x32e00 - 0x331e0
int32_t function_32e00(int32_t a1, int32_t a2) {
    // 0x32e00
    g4 = 0;
    int32_t v1 = g8; // 0x32e05
    int32_t v2 = g10; // 0x32e06
    int32_t v3 = g6; // 0x32e07
    g10 = a1;
    g6 = a2;
    unsigned char v4 = *(char *)(a1 + 21); // 0x32e11
    int32_t v5 = v4; // 0x32e11
    g9 = v5;
    if (v4 % 2 == 0) {
        // 0x32e23
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    unsigned char v6 = *(char *)(a2 + 21); // 0x32e1a
    int32_t v7 = v6; // 0x32e1a
    g7 = v7;
    if (v6 % 2 == 0) {
        // 0x32e23
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v8 = (v5 & 5) == 5; // 0x32e36
    g8 = v8;
    g7 = v8;
    g9 = (v7 & 5) == 5;
    if ((v5 & 5) == 5 == (v7 & 5) == 5) {
        // 0x32e23
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x32e4a
    g9 = *(int32_t *)(a1 + 28);
    *(int32_t *)(a2 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(char *)(g6 + 20) = 0;
    int32_t v9 = g9; // 0x32e6d
    g4 = function_333b0(g6);
    g7 = v9;
    g4 = function_307d0(g6, v9);
    int32_t v10 = g10; // 0x32e87
    int32_t v11 = (int32_t)*(char *)(v10 + 21); // 0x32e87
    g9 = v11;
    g4 = v9;
    int32_t v12 = *(int32_t *)(v10 + 12); // 0x32e9c
    g7 = v12;
    int32_t v13 = v11 & 5; // 0x32e9f
    g9 = v13;
    int32_t v14 = *(int32_t *)(v10 + 16); // 0x32ea5
    g9 = v14;
    int32_t v15 = *(int32_t *)v10; // 0x32eaa
    g10 = v15;
    int32_t v16;
    int16_t * v17;
    if (v9 < 1) {
        v17 = NULL;
        v16 = 0;
    } else {
        // 0x32ebb
        g8 = 0;
        int32_t v18 = 0; // 0x3301e
        int16_t * v19 = NULL;
        int32_t v20 = 0;
        int32_t v21; // 0x3301e
        while (true) {
          lab_0x32ec0:;
            int32_t v22 = v18 + v15; // 0x32ec3
            g10 = v22;
            v21 = v9 - v18;
            if (v13 != 5) {
                // 0x33010
                g9 = v21;
                int32_t v23 = function_2d920(v22, 10, v21); // 0x33027
                g4 = v23;
                if (v23 == 0) {
                    // break -> 0x331c8
                    break;
                }
                int32_t v24 = g10; // 0x33034
                int32_t v25 = v23 - v24; // 0x33034
                g4 = v25;
                g4 = function_322a0(g6, v24, v25);
                int32_t v26 = g6; // 0x33049
                unsigned char v27 = *(char *)(v26 + 21); // 0x33049
                int32_t v28 = v27; // 0x33049
                g4 = v28;
                if (v27 % 2 != 0) {
                    int32_t v29 = *(int32_t *)(v26 + 16); // 0x33051
                    g9 = v29;
                    if (v29 != 0) {
                        int32_t v30 = v29 - 1; // 0x33058
                        g9 = v30;
                        int32_t v31 = *(int32_t *)v26; // 0x3305b
                        g7 = v31;
                        int32_t v32 = v30 - *(int32_t *)(v26 + 32); // 0x3305d
                        g9 = v32;
                        if (*(char *)(v32 + v31) == 10) {
                            // 0x33066
                            g10 = 0;
                            int32_t v33; // 0x3306c
                            if ((v28 & 16) == 0) {
                                // 0x3306c
                                v33 = *(int32_t *)(v26 + 24);
                                g10 = v33;
                            } else {
                                v33 = 0;
                            }
                            while (true) {
                                int32_t v34 = v33 - 1; // 0x33070
                                g10 = v34;
                                if (v34 < 0) {
                                    // break -> 0x330b0
                                    break;
                                }
                                while (true) {
                                    int32_t v35 = function_320f0(g6, 1); // 0x33080
                                    g4 = v35;
                                    if ((char)v35 == 0) {
                                        // break -> 0x33070
                                        break;
                                    }
                                    int32_t v36 = g6; // 0x33089
                                    int32_t v37 = *(int32_t *)(v36 + 16); // 0x33089
                                    g4 = v37;
                                    int32_t v38 = *(int32_t *)v36; // 0x3308c
                                    g9 = v38;
                                    int32_t v39 = v37 - *(int32_t *)(v36 + 32); // 0x3308e
                                    g4 = v39;
                                    *(char *)(v39 + v38) = 9;
                                    int32_t * v40 = (int32_t *)(g6 + 16); // 0x33095
                                    int32_t v41 = *v40 + 1; // 0x33098
                                    g4 = v41;
                                    *v40 = v41;
                                    g4 = function_321d0(g6, g4);
                                    int32_t v42 = g10 - 1; // 0x330aa
                                    g10 = v42;
                                    if (v42 < 0) {
                                        // break (via goto) -> 0x330b0
                                        goto lab_0x330b0;
                                    }
                                }
                                // 0x33070
                                v33 = g10;
                            }
                        }
                    }
                }
              lab_0x330b0:;
                int32_t v43 = function_320f0(g6, 1); // 0x330bb
                g4 = v43;
                if ((char)v43 != 0) {
                    int32_t v44 = g6; // 0x330c4
                    int32_t v45 = *(int32_t *)(v44 + 16); // 0x330c4
                    g4 = v45;
                    int32_t v46 = *(int32_t *)v44; // 0x330c7
                    g9 = v46;
                    int32_t v47 = v45 - *(int32_t *)(v44 + 32); // 0x330c9
                    g4 = v47;
                    *(char *)(v47 + v46) = 13;
                    int32_t * v48 = (int32_t *)(g6 + 16); // 0x330d0
                    int32_t v49 = *v48 + 1; // 0x330d3
                    g4 = v49;
                    *v48 = v49;
                    g4 = function_321d0(g6, g4);
                }
                int32_t v50 = g6; // 0x330e5
                unsigned char v51 = *(char *)(v50 + 21); // 0x330e5
                int32_t v52 = v51; // 0x330e5
                g4 = v52;
                if (v51 % 2 != 0) {
                    int32_t v53 = *(int32_t *)(v50 + 16); // 0x330ed
                    g9 = v53;
                    if (v53 != 0) {
                        int32_t v54 = v53 - 1; // 0x330f4
                        g9 = v54;
                        int32_t v55 = *(int32_t *)v50; // 0x330f7
                        g7 = v55;
                        int32_t v56 = v54 - *(int32_t *)(v50 + 32); // 0x330f9
                        g9 = v56;
                        if (*(char *)(v56 + v55) == 10) {
                            // 0x33102
                            g10 = 0;
                            int32_t v57; // 0x33108
                            if ((v52 & 16) == 0) {
                                // 0x33108
                                v57 = *(int32_t *)(v50 + 24);
                                g10 = v57;
                            } else {
                                v57 = 0;
                            }
                            while (true) {
                                int32_t v58 = v57 - 1; // 0x33110
                                g10 = v58;
                                if (v58 < 0) {
                                    // break -> 0x33150
                                    break;
                                }
                                while (true) {
                                    int32_t v59 = function_320f0(g6, 1); // 0x33120
                                    g4 = v59;
                                    if ((char)v59 == 0) {
                                        // break -> 0x33110
                                        break;
                                    }
                                    int32_t v60 = g6; // 0x33129
                                    int32_t v61 = *(int32_t *)(v60 + 16); // 0x33129
                                    g4 = v61;
                                    int32_t v62 = *(int32_t *)v60; // 0x3312c
                                    g9 = v62;
                                    int32_t v63 = v61 - *(int32_t *)(v60 + 32); // 0x3312e
                                    g4 = v63;
                                    *(char *)(v63 + v62) = 9;
                                    int32_t * v64 = (int32_t *)(g6 + 16); // 0x33135
                                    int32_t v65 = *v64 + 1; // 0x33138
                                    g4 = v65;
                                    *v64 = v65;
                                    g4 = function_321d0(g6, g4);
                                    int32_t v66 = g10 - 1; // 0x3314a
                                    g10 = v66;
                                    if (v66 < 0) {
                                        // break (via goto) -> 0x33150
                                        goto lab_0x33150;
                                    }
                                }
                                // 0x33110
                                v57 = g10;
                            }
                        }
                    }
                }
              lab_0x33150:;
                int32_t v67 = function_320f0(g6, 1); // 0x3315b
                g4 = v67;
                if ((char)v67 != 0) {
                    int32_t v68 = g6; // 0x33164
                    int32_t v69 = *(int32_t *)(v68 + 16); // 0x33164
                    g4 = v69;
                    int32_t v70 = *(int32_t *)v68; // 0x33167
                    g9 = v70;
                    int32_t v71 = v69 - *(int32_t *)(v68 + 32); // 0x33169
                    g4 = v71;
                    *(char *)(v71 + v70) = 10;
                    int32_t * v72 = (int32_t *)(g6 + 16); // 0x33170
                    int32_t v73 = *v72 + 1; // 0x33173
                    g4 = v73;
                    *v72 = v73;
                    g4 = function_321d0(g6, g4);
                }
                // 0x33185
                g9 = v25;
                int32_t v74 = v25 + 1 + g8; // 0x3318a
                g8 = v74;
                int32_t v75 = v12 - v74; // 0x3318e
                int32_t v76 = (int32_t)(v75 < 0 == ((v75 ^ v12) & (v74 ^ v12)) < 0) + v20; // 0x33194
                int32_t v77 = v14 - v74; // 0x33199
                int32_t v78 = v77 < 0 == ((v77 ^ v14) & (v74 ^ v14)) < 0; // 0x3319c
                g4 = v78;
                int16_t * v79 = (int16_t *)(v78 + (int32_t)v19); // 0x3319f
                if (v9 <= v74) {
                    v17 = v79;
                    v16 = v76;
                    goto lab_0x32fcf;
                }
                v18 = v74;
                v19 = v79;
                v20 = v76;
                goto lab_0x32ec0;
            } else {
                // 0x32ecf
                g7 = v21;
                int32_t v80 = function_2d7c0(v22, (int32_t)"\r\n", v21); // 0x32ee6
                g4 = v80;
                if (v80 == 0) {
                    // 0x331b0
                    g9 = v21;
                    g4 = function_322a0(g6, g10, v21);
                    v17 = v19;
                    v16 = v20;
                    goto lab_0x32fcf;
                }
                int32_t v81 = g10; // 0x32ef3
                int32_t v82 = v80 - v81; // 0x32ef3
                g4 = v82;
                g4 = function_322a0(g6, v81, v82);
                int32_t v83 = g6; // 0x32f08
                unsigned char v84 = *(char *)(v83 + 21); // 0x32f08
                int32_t v85 = v84; // 0x32f08
                g4 = v85;
                if (v84 % 2 != 0) {
                    int32_t v86 = *(int32_t *)(v83 + 16); // 0x32f10
                    g9 = v86;
                    if (v86 != 0) {
                        int32_t v87 = v86 - 1; // 0x32f17
                        g9 = v87;
                        int32_t v88 = *(int32_t *)v83; // 0x32f1a
                        g7 = v88;
                        int32_t v89 = v87 - *(int32_t *)(v83 + 32); // 0x32f1c
                        g9 = v89;
                        if (*(char *)(v89 + v88) == 10) {
                            // 0x32f25
                            g10 = 0;
                            int32_t v90; // 0x32f2b
                            if ((v85 & 16) == 0) {
                                // 0x32f2b
                                v90 = *(int32_t *)(v83 + 24);
                                g10 = v90;
                            } else {
                                v90 = 0;
                            }
                            while (true) {
                                int32_t v91 = v90 - 1; // 0x32f30
                                g10 = v91;
                                if (v91 < 0) {
                                    // break -> 0x32f70
                                    break;
                                }
                                while (true) {
                                    int32_t v92 = function_320f0(g6, 1); // 0x32f40
                                    g4 = v92;
                                    if ((char)v92 == 0) {
                                        // break -> 0x32f30
                                        break;
                                    }
                                    int32_t v93 = g6; // 0x32f49
                                    int32_t v94 = *(int32_t *)(v93 + 16); // 0x32f49
                                    g4 = v94;
                                    int32_t v95 = *(int32_t *)v93; // 0x32f4c
                                    g9 = v95;
                                    int32_t v96 = v94 - *(int32_t *)(v93 + 32); // 0x32f4e
                                    g4 = v96;
                                    *(char *)(v96 + v95) = 9;
                                    int32_t * v97 = (int32_t *)(g6 + 16); // 0x32f55
                                    int32_t v98 = *v97 + 1; // 0x32f58
                                    g4 = v98;
                                    *v97 = v98;
                                    g4 = function_321d0(g6, g4);
                                    int32_t v99 = g10 - 1; // 0x32f6a
                                    g10 = v99;
                                    if (v99 < 0) {
                                        // break (via goto) -> 0x32f70
                                        goto lab_0x32f70;
                                    }
                                }
                                // 0x32f30
                                v90 = g10;
                            }
                        }
                    }
                }
              lab_0x32f70:;
                int32_t v100 = function_320f0(g6, 1); // 0x32f7b
                g4 = v100;
                if ((char)v100 != 0) {
                    int32_t v101 = g6; // 0x32f84
                    int32_t v102 = *(int32_t *)(v101 + 16); // 0x32f84
                    g4 = v102;
                    int32_t v103 = *(int32_t *)v101; // 0x32f87
                    g9 = v103;
                    int32_t v104 = v102 - *(int32_t *)(v101 + 32); // 0x32f89
                    g4 = v104;
                    *(char *)(v104 + v103) = 10;
                    int32_t * v105 = (int32_t *)(g6 + 16); // 0x32f90
                    int32_t v106 = *v105 + 1; // 0x32f93
                    g4 = v106;
                    *v105 = v106;
                    g4 = function_321d0(g6, g4);
                }
                // 0x32fa5
                g7 = v82;
                int32_t v107 = v82 + 2 + g8; // 0x32faa
                g8 = v107;
                int32_t v108 = v107 - 1; // 0x32fae
                int32_t v109 = v12 - v108; // 0x32fb1
                int32_t v110 = v109 < 0 == ((v109 ^ v12) & (v108 ^ v12)) < 0; // 0x32fb4
                g9 = v110;
                int32_t v111 = v20 - v110; // 0x32fb7
                int32_t v112 = v108 & (int32_t)&g862 & -256; // 0x32fc0
                g4 = v112;
                int16_t * v113 = (int16_t *)((int32_t)v19 - v112); // 0x32fc3
                if (v9 > v107) {
                    v18 = v107;
                    v19 = v113;
                    v20 = v111;
                    // continue -> 0x32ec0
                    continue;
                }
                v17 = v113;
                v16 = v111;
                goto lab_0x32fcf;
            }
        }
        // 0x331c8
        g7 = v21;
        g4 = function_322a0(g6, g10, v21);
        v17 = v19;
        v16 = v20;
    }
    goto lab_0x32fcf;
  lab_0x32fcf:;
    int32_t v114 = v16 + v12; // 0x32fdd
    g4 = v114;
    function_30920(g6, 0, v114);
    int32_t v115 = (int32_t)v17 + v14; // 0x32ff7
    g4 = v115;
    function_32240(g6, 0, v115);
    g4 = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 1;
}

// Address range: 0x331e0 - 0x331e1
int32_t function_331e0(void) {
    // 0x331e0
    return g4;
}

// Address range: 0x33256 - 0x3325d
int32_t function_33256(void) {
    // 0x33256
    *(int32_t *)(g6 + 28) = 0;
    return g4;
}

// Address range: 0x3325d - 0x33286
int32_t function_3325d(void) {
    // 0x3325d
    *(int32_t *)(g6 + 36) = 0x303f0;
    *(int32_t *)(g6 + 40) = 0;
    *(int32_t *)(g6 + 44) = 0x33310;
    *(int32_t *)(g6 + 48) = 0;
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x332e4 - 0x33309
int32_t function_332e4(void) {
    // 0x332e4
    g10 = g4;
    g4 = function_333b0(g6);
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t result = function_331e0(); // 0x33304
    g4 = result;
    return result;
}

// Address range: 0x33310 - 0x33391
int32_t function_33310(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x33313
    int32_t v3 = g6; // 0x33314
    g6 = a1;
    g10 = a2;
    int32_t * v4 = (int32_t *)(a1 + 8); // 0x3331e
    int32_t v5 = *v4; // 0x3331e
    g7 = v5;
    int32_t v6;
    int32_t v7; // 0x33325
    int32_t v8; // 0x3332d
    if (v5 < 0) {
        // 0x33368
        g4 = 0;
        if ((*(char *)(a1 + 21) & 2) == 0) {
            // 0x3335a
            g6 = v3;
            g10 = v2;
            return 0;
        }
        int32_t v9 = *(int32_t *)(a1 + 4); // 0x33370
        g9 = v9;
        *v4 = 0;
        int32_t v10 = g6; // 0x33388
        if (v9 != 0) {
            // 0x33388
            g4 = v10;
            g4 = function_30480();
            v7 = g6;
            goto lab_0x33325;
        } else {
            // 0x3337e
            *(int32_t *)v10 = 0;
            v8 = g6;
            v6 = 0;
            goto lab_0x33328;
        }
    } else {
        v7 = a1;
        goto lab_0x33325;
    }
  lab_0x33325:
    // 0x33325
    v8 = v7;
    v6 = *(int32_t *)(v7 + 4);
    goto lab_0x33328;
  lab_0x33328:
    // 0x33328
    g9 = v6;
    int32_t v11 = g10 + *(int32_t *)(v8 + 16); // 0x3332b
    g4 = v11;
    int32_t v12 = v11 - *(int32_t *)(v8 + 32); // 0x3332d
    g4 = v12;
    if (v12 > v6) {
        g4 = function_333f0(v8, 1);
        int32_t v13 = g6; // 0x33348
        int32_t v14 = g10 + *(int32_t *)(v13 + 16); // 0x3334b
        g4 = v14;
        int32_t v15 = v14 - *(int32_t *)(v13 + 32); // 0x3334d
        g4 = v15;
        while (v15 > *(int32_t *)(v13 + 4)) {
            // 0x33338
            g4 = function_333f0(v13, 1);
            v13 = g6;
            v14 = g10 + *(int32_t *)(v13 + 16);
            g4 = v14;
            v15 = v14 - *(int32_t *)(v13 + 32);
            g4 = v15;
        }
    }
    // 0x33355
    g4 = 1;
    // 0x3335a
    g6 = v3;
    g10 = v2;
    return 1;
}

// Address range: 0x333a0 - 0x333b0
int32_t function_333a0(int32_t a1) {
    // 0x333a0
    *(int32_t *)a1 = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x333b0 - 0x333c7
int32_t function_333b0(int32_t a1) {
    // 0x333b0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x333ba
    g4 = v1;
    int32_t v2; // 0x333c1
    if (v1 < 0) {
        // bb
        g4 = function_333e6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x333c1
    g4 = v3;
    int32_t result; // 0x333c5
    if (v3 == 0) {
        // bb7
        result = function_333df();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x333c7
    return result;
}

// Address range: 0x333df - 0x333e6
int32_t function_333df(void) {
    // 0x333df
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x333e6 - 0x333ec
int32_t function_333e6(int32_t a1, int32_t a2) {
    // 0x333e6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x333f0 - 0x33440
int32_t function_333f0(int32_t a1, int32_t a2) {
    // 0x333f0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x333fb
    int64_t v2 = v1; // 0x333fb
    g10 = v1;
    int32_t v3; // 0x33402
    if (v1 < 0) {
        int32_t v4 = function_33458((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x33400
        g4 = v4;
        v3 = g6;
    } else {
        v3 = a1;
    }
    int32_t v5 = *(int32_t *)(v3 + 4); // 0x33402
    g4 = v5;
    int32_t v6 = v5 + a2; // 0x33408
    g7 = v6;
    int32_t v7; // 0x33428
    if (v1 == 0) {
        // bb21
        g4 = function_33460();
        v7 = g7;
    } else {
        v7 = v6;
    }
    int32_t v8 = v7 - 1; // 0x3340e
    int64_t v9 = 0x100000000 * (int64_t)(v8 >> 31) | (int64_t)v8; // 0x33416
    g9 = v9 % v2;
    int32_t v10 = ((int32_t)(v9 / v2) + 1) * v1; // 0x3341b
    g4 = v10;
    int32_t v11; // 0x33439
    if (v7 > v10) {
        // 0x33422
        g10 = v1;
        int32_t v12 = v10 + v7; // 0x33428
        int32_t v13 = v12 < 0; // 0x3342c
        int32_t v14 = (v13 + v12) / 2; // 0x33431
        while (v7 > v14) {
            // 0x33428
            v12 = v14 + v7;
            v13 = v12 < 0;
            v14 = (v13 + v12) / 2;
        }
        // 0x33437
        g4 = v14;
        g9 = v13;
        v11 = v14;
    } else {
        v11 = v10;
    }
    int32_t v15 = g6; // 0x33437
    int32_t v16 = *(int32_t *)v15; // 0x33437
    g9 = v16;
    *(int32_t *)(v15 + 4) = v11;
    int32_t result; // 0x3343e
    if (v16 == 0) {
        // bb22
        result = function_3347f();
        g4 = result;
    } else {
        // 0x33437
        result = g4;
    }
    // 0x33440
    return result;
}

// Address range: 0x33458 - 0x3345f
int32_t function_33458(int32_t a1, int32_t a2, int32_t a3) {
    // 0x33458
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return g4;
}

// Address range: 0x33460 - 0x3347f
int32_t function_33460(void) {
    int32_t v1 = g4; // 0x33460
    g9 = 32;
    int32_t v2 = v1 == 0 ? 32 : v1; // 0x33467
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x33470
    while (g7 > v3) {
        // 0x33470
        v3 *= 2;
    }
    // 0x33476
    g4 = v3;
    int32_t v4 = g6; // 0x33476
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x3347f - 0x33480
int32_t function_3347f(void) {
    // 0x3347f
    return g4;
}

// Address range: 0x334a0 - 0x334c0
int32_t function_334a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x334a0
    g4 = a1;
    g9 = a2;
    *(int32_t *)(a1 + 8) = -1;
    *(int32_t *)g4 = g9;
    *(int32_t *)(g4 + 4) = a3;
    g9 = a4;
    *(int32_t *)(g4 + 12) = a4;
    return g4;
}

// Address range: 0x334c0 - 0x334dd
int32_t function_334c0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x334c0
    g4 = a1;
    g9 = a3;
    g7 = a2;
    *(int32_t *)(a1 + 8) = -2;
    *(int32_t *)(g4 + 4) = g9;
    *(int32_t *)g4 = g7;
    *(int32_t *)(g4 + 12) = g9;
    return g4;
}

// Address range: 0x334e5 - 0x334f4
int32_t function_334e5(void) {
    char * v1 = (char *)(g6 + 0x5d8b1055); // 0x334e6
    *v1 = (char)g7 | *v1;
    g7++;
    int32_t result = g4 | 187; // 0x334ef
    g4 = result;
    return result;
}

// Address range: 0x334f4 - 0x334f7
int32_t function_334f4(void) {
    // 0x334f4
    return g4;
}

// Address range: 0x3350a - 0x33513
int32_t function_3350a(int32_t a1, int32_t a2) {
    // 0x3350a
    g6 = a1;
    return g4;
}

// Address range: 0x33520 - 0x33521
int32_t function_33520(void) {
    // 0x33520
    return g4;
}

// Address range: 0x3354a - 0x33556
int32_t function_3354a(int32_t a1, int32_t a2) {
    // 0x3354a
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x3f6bf040); // 0x3354a
    *v2 = *v2 + 1;
    g6 = a1;
    return g4;
}

// Address range: 0x33560 - 0x33580
int32_t function_33560(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x33560
    g4 = a1;
    g9 = a2;
    *(int32_t *)(a1 + 8) = -1;
    *(int32_t *)g4 = g9;
    *(int32_t *)(g4 + 4) = a3;
    g9 = a4;
    *(int32_t *)(g4 + 12) = a4;
    return g4;
}

// Address range: 0x33580 - 0x3359d
int32_t function_33580(int32_t a1, int32_t a2, int32_t a3) {
    // 0x33580
    g4 = a1;
    g9 = a3;
    g7 = a2;
    *(int32_t *)(a1 + 8) = -2;
    *(int32_t *)(g4 + 4) = g9;
    *(int32_t *)g4 = g7;
    *(int32_t *)(g4 + 12) = g9;
    return g4;
}

// Address range: 0x335a0 - 0x335b5
int32_t function_335a0(int32_t a1) {
    // 0x335a0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 12); // 0x335a7
    g9 = v1;
    int32_t v2 = v1 - 1; // 0x335ac
    g7 = v2;
    int32_t result = v1 != 0 ? v2 : 0; // 0x335b1
    g4 = result;
    return result;
}

// Address range: 0x335c0 - 0x335d6
int32_t function_335c0(int32_t a1) {
    // 0x335c0
    g4 = (int32_t)&g129;
    g9 = a1;
    int32_t v1 = *(int32_t *)(a1 + 12); // 0x335cb
    g7 = v1;
    int32_t result; // 0x335d2
    if (v1 != 0) {
        // 0x335d2
        result = *(int32_t *)a1;
        g4 = result;
    } else {
        result = (int32_t)&g129;
    }
    // 0x335d4
    return result;
}

// Address range: 0x335e0 - 0x335f6
int32_t function_335e0(int32_t a1) {
    // 0x335e0
    g4 = (int32_t)&g129;
    g9 = a1;
    int32_t v1 = *(int32_t *)(a1 + 12); // 0x335eb
    g7 = v1;
    int32_t result; // 0x335f2
    if (v1 != 0) {
        // 0x335f2
        result = *(int32_t *)a1;
        g4 = result;
    } else {
        result = (int32_t)&g129;
    }
    // 0x335f4
    return result;
}

// Address range: 0x33614 - 0x33616
int32_t function_33614(void) {
    int32_t result = function_33618(); // 0x33614
    g4 = result;
    return result;
}

// Address range: 0x33616 - 0x33618
int32_t function_33616(void) {
    // 0x33616
    return g4;
}

// Address range: 0x33618 - 0x3362d
int32_t function_33618(void) {
    int32_t v1 = g6; // 0x33622
    int32_t v2 = v1 + g8; // 0x33622
    g10 = v2;
    g6 = v1 - 1;
    int32_t result = (int32_t)*(char *)v2; // 0x33627
    g4 = result;
    return result;
}

// Address range: 0x33639 - 0x33641
int32_t function_33639(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x33639
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x33650 - 0x33659
int32_t function_33650(void) {
    int32_t result = function_33520(); // 0x33654
    g4 = result;
    return result;
}

// Address range: 0x33685 - 0x3368d
int32_t function_33685(void) {
    // 0x33685
    g7--;
    int32_t v1 = g4; // 0x33687
    int32_t result = (int32_t)(v1 == 0) | v1 & -256; // 0x33689
    g4 = result;
    return result;
}

// Address range: 0x33690 - 0x337a3
int32_t function_33690(int32_t a1, int32_t a2, uint32_t a3) {
    // 0x33690
    g7 = (int32_t)&g129;
    int32_t v1 = g8; // 0x33698
    int32_t v2 = g10; // 0x33699
    int32_t v3 = g6; // 0x3369a
    g9 = a1;
    g4 = a2;
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x336a4
    g6 = v4;
    int32_t v5; // 0x336ab
    if (v4 != 0) {
        // 0x336ab
        v5 = *(int32_t *)a1;
        g7 = v5;
    } else {
        v5 = (int32_t)&g129;
    }
    int32_t v6 = *(int32_t *)(a2 + 12); // 0x336ad
    g9 = v6;
    char * v7;
    if (v6 != 0) {
        int32_t v8 = *(int32_t *)a2; // 0x336bb
        g4 = v8;
        v7 = (char *)v8;
    } else {
        v7 = (char *)&g129;
    }
    // 0x336c0
    g4 = (int32_t)v7;
    unsigned char v9 = *v7; // 0x336c7
    int32_t v10 = v9; // 0x336c7
    g10 = v10;
    int32_t v11 = a3 % 2; // 0x336cd
    g4 = v10;
    int32_t result;
    int32_t v12; // 0x3379b
    if (v9 == 0) {
        v12 = v5;
      lab_0x3379b:
        // 0x3379b
        result = *(char *)v12 == 0;
        goto lab_0x33762;
      lab_0x33762:
        // 0x33762
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v13 = v5; // 0x3370738
    char * v14 = v7;
    bool v15 = true;
    while (true) {
        int32_t v16 = v13; // 0x33707
        char v17 = v9; // 0x336dd
        char * v18 = v14;
        int32_t v19; // 0x336e3
        while (true) {
            // 0x336dd
            g6 = 0;
            v19 = (int32_t)v18;
            g4 = v19;
            if (v17 == 42) {
                // break -> 0x3376a
                break;
            }
            int32_t v20 = 0; // 0x336f8
            int32_t v21; // 0x336f5
            int32_t v22; // 0x336f8
            char * v23; // 0x336fb
            unsigned char v24; // 0x336fb
            int32_t v25; // 0x336fb
            bool v26; // 0x336fe348
            while (true) {
                // 0x336f5
                v21 = v19 + 1;
                g4 = v21;
                v22 = v20 + 1;
                g6 = v22;
                v23 = (char *)v21;
                v24 = *v23;
                v25 = v24;
                g9 = v25;
                if (v24 == 0) {
                    // break -> 0x336f5
                    break;
                }
                if (v24 == 42) {
                    v26 = false;
                    goto lab_0x33702;
                }
                v20 = v22;
                v19 = v21;
            }
            v26 = true;
          lab_0x33702:
            // 0x33702
            g10 = v16;
            int32_t v27 = v21 - v22; // 0x33709
            g8 = v27;
            char * v28 = (char *)v16; // 0x3370e332
            unsigned char v29 = *v28; // 0x3370e333
            g4 = v29;
            if (v29 == 0) {
                result = 0;
                goto lab_0x33762;
            }
            int32_t v30 = v16; // 0x33754340
            int32_t v31; // 0x3372f
            while (true) {
                // 0x33715
                if (v29 == *(char *)v27) {
                    // 0x33719
                    g9 = v30;
                    g4 = 0;
                    int32_t v32 = v30; // 0x3372f
                    int32_t v33 = 0; // 0x3372c
                    while (true) {
                        int32_t v34 = v33 + 1; // 0x3372c
                        g4 = v34;
                        v31 = v32 + 1;
                        g9 = v31;
                        if (v34 == v22) {
                            // break -> 0x33736
                            break;
                        }
                        unsigned char v35 = *(char *)v31; // 0x33720
                        g7 = v35;
                        if (v35 == 0) {
                            result = 0;
                            goto lab_0x33762;
                        }
                        // 0x33727
                        if (v35 != *(char *)(v34 + v27)) {
                            // break -> 0x33736
                            break;
                        }
                        v32 = v31;
                        v33 = v34;
                    }
                    int32_t v36 = v31 - v30; // 0x33736
                    g9 = v36;
                    if (v36 == v22) {
                        // break -> 0x3378e
                        break;
                    }
                }
                if (v15) {
                    result = 0;
                    goto lab_0x33762;
                }
                // 0x33742
                g4 = v11;
                if (v11 != 0) {
                    if (v24 != 47) {
                        // 0x3374f
                        if (*v28 == 47) {
                            result = 0;
                            goto lab_0x33762;
                        }
                    }
                }
                int32_t v37 = v30 + 1; // 0x33754
                g10 = v37;
                char * v38 = (char *)v37; // 0x3370e
                unsigned char v39 = *v38; // 0x3370e
                g4 = v39;
                if (v39 == 0) {
                    result = 0;
                    goto lab_0x33762;
                }
                v29 = v39;
                v28 = v38;
                v30 = v37;
            }
            // 0x3378e
            g10 = v25;
            g7 = v31;
            g4 = v25;
            if (v26) {
                v12 = v31;
                goto lab_0x3379b;
            }
            v16 = v31;
            v17 = v24;
            v18 = v23;
        }
        char * v40 = (char *)(v19 + 1); // 0x3376a
        unsigned char v41 = *v40; // 0x3376a
        int32_t v42 = v41; // 0x3376a
        g10 = v42;
        g4 = v42;
        if (v41 == 0) {
            // break -> 0x33781
            break;
        }
        // 0x33774
        g4 = v42;
        v13 = v16;
        v9 = v41;
        v14 = v40;
        v15 = false;
    }
    // 0x33781
    g4 = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 1;
}

// Address range: 0x337b0 - 0x337fc
int32_t function_337b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x337b6
    g6 = a1;
    int32_t v3 = g10; // 0x337bc
    g10 = a3;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    function_333b0(g6);
    g4 = a2;
    *(int32_t *)(g6 + 4) = a3;
    *(int32_t *)(g6 + 8) = g4;
    if (a3 != 0) {
        // 0x33800
        return g4;
    }
    // 0x337eb
    *(int32_t *)(g6 + 12) = 0;
    g6 = v2;
    g10 = v3;
    g5 = v1;
    return g4;
}

// Address range: 0x33814 - 0x33853
int32_t function_33814(int32_t a1) {
    // 0x33814
    g10 = g4;
    g4 = function_333b0(g6);
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_337b0(a1, 0, 0); // 0x3384c
    g4 = result;
    return result;
}

// Address range: 0x33860 - 0x338b4
int32_t function_33860(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x33866
    g6 = a1;
    int32_t v2 = g10; // 0x3386c
    g10 = a2;
    g4 = *(int32_t *)(a1 + 4);
    *(int32_t *)(a1 + 12) = a2;
    uint32_t v3 = g10; // 0x33878
    int32_t result = g4; // 0x33878
    int32_t v4 = v3 - result; // 0x33878
    if (v3 <= result) {
        // 0x3387c
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x33890
    g9 = v4;
    g4 = function_333f0(g6, v4);
    int32_t v5 = g6; // 0x338a0
    int32_t result2 = *(int32_t *)(v5 + 4); // 0x338a0
    g4 = result2;
    if (g10 <= result2) {
        // 0x3387c
        g6 = v1;
        g10 = v2;
        return result2;
    }
    // 0x338a7
    *(int32_t *)(v5 + 12) = result2;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x338c0 - 0x3390f
int32_t function_338c0(int32_t a1) {
    // 0x338c0
    g9 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x338c9
    g4 = result;
    if (result == 0) {
        // 0x338f0
        return 0;
    }
    if (result == 1) {
        // 0x338f0
        return result;
    }
    int32_t v1 = result - 2; // 0x338d5
    g4 = v1;
    int32_t result2 = *(int32_t *)a1 + v1; // 0x338d8
    g4 = result2;
    char * v2 = (char *)result2; // 0x338da
    unsigned char v3 = *v2; // 0x338da
    g7 = v3;
    if (v3 != 47) {
        if (v3 != 92) {
            // 0x338f0
            return result2;
        }
    }
    // 0x338f8
    *v2 = 0;
    int32_t v4 = g9; // 0x338fb
    int32_t v5 = *(int32_t *)(v4 + 12) - 1; // 0x33901
    g4 = v5;
    int32_t result3 = function_33860(v4, v5); // 0x33908
    g4 = result3;
    return result3;
}

// Address range: 0x33910 - 0x33937
int32_t function_33910(int32_t a1) {
    int32_t v1 = g6; // 0x33913
    g6 = a1;
    g4 = function_33860(a1, 0);
    int32_t v2 = g6; // 0x3392a
    g6 = v1;
    int32_t result = function_333b0(v2); // 0x33932
    g4 = result;
    return result;
}

// Address range: 0x33940 - 0x3396e
int32_t function_33940(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x33943
    g6 = a1;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x3394a
    g4 = v3;
    int32_t v4; // 0x33966
    if (v3 == 0) {
        // 0x33951
        g4 = function_33860(a1, 1);
        int32_t v5 = *(int32_t *)g6; // 0x33961
        g4 = v5;
        *(char *)v5 = 0;
        v4 = g6;
    } else {
        v4 = a1;
    }
    int32_t result = *(int32_t *)v4; // 0x33966
    g4 = result;
    g6 = v2;
    return result;
}

// Address range: 0x33970 - 0x33989
int32_t function_33970(int32_t a1, int32_t a2) {
    // 0x33970
    g9 = a1;
    int32_t v1 = a1 + 1; // 0x33978
    g7 = v1;
    int32_t v2 = a1 >= 0 == (a1 != 0) ? v1 : 0; // 0x3397d
    g4 = v2;
    int32_t result = function_33860(v2, (int32_t)&g870); // 0x33984
    g4 = result;
    return result;
}

// Address range: 0x33990 - 0x339eb
int32_t function_33990(int32_t a1, unsigned char a2) {
    int32_t v1 = g6; // 0x33996
    g6 = a1;
    int32_t v2 = g10; // 0x3399c
    int32_t v3 = a2; // 0x3399f
    g9 = v3;
    int32_t v4 = g8; // 0x339a3
    int32_t v5 = *(int32_t *)(a1 + 12); // 0x339a6
    g4 = v5;
    g8 = v5 - 1;
    g10 = v5;
    int32_t v6; // 0x339be
    if (v5 == 0) {
        // 0x339b2
        g10 = 1;
        g8 = 0;
        g4 = 1;
        v6 = 1;
    } else {
        v6 = v5;
    }
    // 0x339be
    g4 = function_33970(a1, v6);
    int32_t v7 = *(int32_t *)g6; // 0x339cd
    g4 = v7;
    g9 = v3;
    *(char *)(g8 + v7) = a2;
    *(char *)(g10 + *(int32_t *)g6) = 0;
    int32_t result = g6; // 0x339dc
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v4;
    return result;
}

// Address range: 0x339f0 - 0x339f1
int32_t function_339f0(int32_t a1, int32_t * a2) {
    // 0x339f0
    return g4;
}

// Address range: 0x33a71 - 0x33a8a
int32_t function_33a71(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x1fb274fd); // 0x33a71
    *v1 = *v1 - 1;
    *(char *)(g7 + g4) = 0;
    int32_t result = g6; // 0x33a7b
    g4 = result;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return result;
}

// Address range: 0x33a90 - 0x33adf
int32_t function_33a90(int32_t a1, int64_t a2) {
    int32_t v1 = g6; // 0x33a93
    int32_t v2; // bp-268
    g6 = &v2;
    int32_t v3 = __asm_movsd(__asm_movsd_1649(a2)); // 0x33ab0
    function_2da40((int32_t)"GNU", v3, (char *)&g870);
    g4 = a1;
    int32_t result = function_339f0(a1, &v2); // 0x33ad1
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33ae0 - 0x33b22
int32_t function_33ae0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x33ae3
    int32_t v2; // bp-24
    int32_t v3 = &v2; // 0x33ae4
    g6 = v3;
    g4 = a2;
    function_2da40(v3, 12, "%d");
    g4 = a1;
    int32_t result = function_339f0(a1, &v2); // 0x33b17
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33bbe - 0x33bd2
int32_t function_33bbe(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x1faa74fd); // 0x33bbe
    *v1 = *v1 - 1;
    *(char *)(g9 + g4) = 0;
    int32_t result = g6; // 0x33bcb
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x33be0 - 0x33c2d
int32_t function_33be0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x33be6
    g8 = a2;
    int32_t v2 = g10; // 0x33bec
    g10 = a1;
    int32_t v3 = g6; // 0x33bf2
    int32_t v4 = a2 != 0 ? a3 : 0; // 0x33bf9
    g6 = v4;
    g4 = function_33860(a1, v4);
    int32_t v5 = g10; // 0x33c09
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x33c09
    g4 = v6;
    int32_t v7; // 0x33c10
    int32_t v8; // 0x33c0e
    if (v6 == 0) {
        // bb
        v8 = function_33c38();
        g4 = v8;
        v7 = g10;
    } else {
        v8 = v6;
        v7 = v5;
    }
    uint32_t v9 = *(int32_t *)v7; // 0x33c10
    g9 = v9;
    int32_t v10 = g6 + a2; // 0x33c12
    g6 = v10;
    int32_t result; // 0x33c1f
    if (v9 < v10) {
        // bb14
        result = function_33c48();
        g4 = result;
    } else {
        result = v8;
    }
    // 0x33c21
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x33c38 - 0x33c45
int32_t function_33c38(void) {
    // 0x33c38
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x33c48 - 0x33c5b
int32_t function_33c48(void) {
    int32_t result = g4; // 0x33c48
    g7 = result + g9;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x33c60 - 0x33c94
int32_t function_33c60(int32_t a1, int32_t a2) {
    // 0x33c60
    g4 = 0;
    int32_t v1 = g6; // 0x33c65
    g6 = a2;
    int32_t v2; // 0x33c78
    if (a2 != 0) {
        // 0x33c70
        v2 = function_2cb40(a2) + 1;
        g4 = v2;
    } else {
        v2 = 0;
    }
    // 0x33c7b
    g4 = a1;
    int32_t result = function_33be0(a1, a2, v2); // 0x33c89
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33cd3 - 0x33d00
int32_t function_33cd3(void) {
    int32_t v1 = g4; // 0x33cd3
    g10 = v1;
    if (v1 > (int32_t)"codeToUTF8") {
        // 0x33cdc
        *(char *)(g5 - 9) = 0;
        g10 = (int32_t)"odeToUTF8";
    }
    int32_t v2 = *(int32_t *)(g5 + 8); // 0x33ce5
    g4 = v2;
    function_33c60(v2, g6);
    int32_t result = g10; // 0x33cf4
    g4 = result;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x33d00 - 0x33d21
int32_t function_33d00(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x33d03
    g6 = a1;
    g4 = a2;
    function_33c60(a1, a2);
    int32_t result = g6; // 0x33d1c
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33d30 - 0x33d7e
int32_t function_33d30(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x33d36
    g6 = a1;
    int32_t v3 = g10; // 0x33d3c
    g10 = a2;
    g4 = function_337b0(a1, 0, 0);
    int32_t v4 = g10; // 0x33d5a
    int32_t v5 = *(int32_t *)(v4 + 12); // 0x33d5a
    g7 = v5;
    g4 = (int32_t)&g129;
    int32_t v6; // 0x33d66
    if (v5 != 0) {
        // 0x33d66
        v6 = *(int32_t *)v4;
        g4 = v6;
    } else {
        v6 = (int32_t)&g129;
    }
    int32_t result = function_33c60(g6, v6); // 0x33d6f
    g4 = result;
    g6 = v2;
    g10 = v3;
    g5 = v1;
    return result;
}

// Address range: 0x33d7e - 0x33ddd
int32_t function_33d7e(int32_t a1, int32_t a2) {
    // 0x33d7e
    g10 = g4;
    *(int32_t *)(g6 + 12) = 0;
    g4 = function_333b0(g6);
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g6; // 0x33da3
    int32_t v2; // bp-28
    int32_t v3 = &v2; // 0x33da4
    g6 = v3;
    g4 = a1;
    function_33d30(v3, a1);
    g4 = a2;
    g4 = function_339f0(v3, (int32_t *)a2);
    int32_t result = function_333b0(v3); // 0x33dd2
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33ddd - 0x33e32
int32_t function_33ddd(int32_t a1, int32_t a2, int32_t a3) {
    // 0x33ddd
    *(int32_t *)(g5 - 28) = g4;
    *(int32_t *)(g5 - 12) = 0;
    g4 = function_333b0(g6);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x33def
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x33e03
    g6 = a1;
    g4 = a2;
    function_33d30(a1, a2);
    g4 = a3;
    function_339f0(g6, (int32_t *)a3);
    int32_t result = g6; // 0x33e2b
    g4 = result;
    g6 = v3;
    return result;
}

// Address range: 0x33e32 - 0x33ebc
int32_t function_33e32(int32_t a1, int32_t a2, unsigned char a3, unsigned char a4) {
    // 0x33e32
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_333b0(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x33e44
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x33e53
    int32_t v4 = g10; // 0x33e54
    int32_t v5 = g6; // 0x33e55
    g10 = a1;
    g6 = a3;
    g4 = a2;
    g4 = function_33d30(a1, a2);
    int32_t v6 = g10; // 0x33e76
    int32_t v7 = *(int32_t *)(v6 + 12); // 0x33e76
    g4 = v7;
    int32_t result; // 0x33eb3
    if (v7 != 0) {
        uint32_t v8 = v7 - 1; // 0x33e7d
        g4 = v8;
        if (v8 >= 1) {
            int32_t v9 = g6; // 0x33e84
            g8 = v9;
            g9 = 0;
            int32_t v10 = 0;
            int32_t v11 = v6;
            while (true) {
                int32_t v12 = v10; // 0x33e90
                char * v13; // 0x33e9b
                while (true) {
                    int32_t v14 = *(int32_t *)v11 + v12; // 0x33e99
                    g7 = v14;
                    v13 = (char *)v14;
                    int32_t v15 = (int32_t)*v13; // 0x33e9b
                    g6 = v15;
                    if (v15 == v9) {
                        // break -> 0x33ea2
                        break;
                    }
                    int32_t v16 = v12 + 1; // 0x33e90
                    g9 = v16;
                    if (v16 >= v8) {
                        result = v11;
                        // break (via goto) -> 0x33eb0
                        goto lab_0x33eb0;
                    }
                    v12 = v16;
                }
                // 0x33ea2
                g6 = a4;
                int32_t v17 = v12 + 1; // 0x33ea6
                g9 = v17;
                *v13 = a4;
                int32_t v18 = g10;
                if (v17 >= v8) {
                    result = v18;
                    // break -> 0x33eb0
                    break;
                }
                // 0x33ea2
                v9 = g8;
                v10 = g9;
                v11 = v18;
            }
        } else {
            result = v6;
        }
    } else {
        result = v6;
    }
  lab_0x33eb0:
    // 0x33eb0
    g4 = result;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result;
}

// Address range: 0x33ec0 - 0x33ef7
int32_t function_33ec0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x33ec3
    g6 = a1;
    function_337b0(a1, 0, 0);
    g4 = a2;
    int32_t result = function_33c60(g6, a2); // 0x33eec
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33ef7 - 0x33f70
int32_t function_33ef7(int32_t a1, int32_t a2, int32_t a3) {
    // 0x33ef7
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_333b0(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x33f09
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x33f2c
    g6 = a1;
    int32_t v4 = g10; // 0x33f32
    int32_t v5; // bp-272
    int32_t v6 = &v5; // 0x33f35
    g10 = v6;
    g4 = a2;
    g4 = function_2f0e0(a2, a3, &v5, (int32_t *)&g19);
    function_33ec0(g6, v6);
    int32_t result = g6; // 0x33f62
    g4 = result;
    g10 = v4;
    g6 = v3;
    return result;
}

// Address range: 0x33f70 - 0x33fbc
int32_t function_33f70(int32_t a1, int32_t a2) {
    // 0x33f70
    g4 = (int32_t)&g129;
    int32_t v1 = g6; // 0x33f78
    g9 = a2;
    g6 = a1;
    int32_t v2 = *(int32_t *)(a2 + 12); // 0x33f82
    g7 = v2;
    int32_t v3; // 0x33f89
    if (v2 != 0) {
        // 0x33f89
        v3 = *(int32_t *)a2;
        g4 = v3;
    } else {
        v3 = (int32_t)&g129;
    }
    // 0x33f8b
    g4 = function_33ec0(a1, v3);
    int32_t v4 = g6; // 0x33f97
    int32_t v5 = *(int32_t *)(v4 + 12); // 0x33f97
    g4 = v5;
    int32_t v6 = *(int32_t *)v4; // 0x33f9e
    g4 = v6;
    g4 = function_2eb30(v6, v5);
    int32_t v7 = *(int32_t *)g6; // 0x33fa8
    g4 = v7;
    function_2e830(v7);
    int32_t result = g6; // 0x33fb5
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x33fbc - 0x34019
int32_t function_33fbc(int32_t a1, int32_t a2) {
    // 0x33fbc
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_333b0(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x33fce
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g4 = (int32_t)&g129;
    g5 = &v2;
    int32_t v3 = g6; // 0x33fe8
    g9 = a2;
    g6 = a1;
    int32_t v4 = *(int32_t *)(a2 + 12); // 0x33ff2
    g7 = v4;
    int32_t v5; // 0x33ff9
    if (v4 != 0) {
        // 0x33ff9
        v5 = *(int32_t *)a2;
        g4 = v5;
    } else {
        v5 = (int32_t)&g129;
    }
    int32_t v6 = function_2ec60(v5); // 0x33ffe
    g4 = v6;
    function_33ec0(g6, v6);
    int32_t result = g6; // 0x34012
    g4 = result;
    g6 = v3;
    return result;
}

// Address range: 0x34020 - 0x3407e
int32_t function_34020(int32_t a1, int32_t a2, int32_t a3) {
    // 0x34020
    g4 = (int32_t)&g129;
    g9 = a2;
    int32_t v1 = g6; // 0x34031
    int32_t v2 = g10; // 0x34034
    g6 = a1;
    int32_t v3 = *(int32_t *)(a2 + 12); // 0x3403a
    g10 = v3;
    int32_t v4; // 0x34041
    if (v3 != 0) {
        // 0x34041
        v4 = *(int32_t *)a2;
        g4 = v4;
    } else {
        v4 = (int32_t)&g129;
    }
    // 0x34043
    g9 = a3;
    int32_t v5; // bp-272
    int32_t v6 = &v5; // 0x34046
    g10 = v6;
    g4 = function_2f180(&v5, (int32_t *)&g19, v4, a3);
    function_33ec0(g6, v6);
    int32_t result = g6; // 0x34070
    g4 = result;
    g10 = v2;
    g6 = v1;
    return result;
}

// Address range: 0x34080 - 0x340aa
int32_t function_34080(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x34083
    g4 = a2;
    g6 = a1;
    int32_t v2 = *(int32_t *)(a2 + 12); // 0x3408d
    g9 = v2;
    int32_t v3 = *(int32_t *)a2; // 0x34094
    g4 = v3;
    function_33be0(a1, v3, v2);
    int32_t result = g6; // 0x340a5
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x340b0 - 0x340d1
int32_t function_340b0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x340b3
    g6 = a1;
    g4 = a2;
    function_34080(a1, a2);
    int32_t result = g6; // 0x340cc
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x340e0 - 0x3411c
int32_t function_340e0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x340e3
    g6 = a1;
    g4 = a2;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    int32_t v2 = g4; // 0x34101
    int32_t v3 = *(int32_t *)(v2 + 12); // 0x34101
    g9 = v3;
    int32_t v4 = *(int32_t *)v2; // 0x34108
    g4 = v4;
    int32_t result = function_33be0(g6, v4, v3); // 0x34111
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x3411c - 0x341ab
int32_t function_3411c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3411c
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_333b0(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x34127
    g4 = v1;
    g4 = function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // 0x34140
    int32_t v3 = v2; // bp-4
    g5 = &v3;
    int32_t v4 = g6; // 0x34146
    g6 = a3;
    int32_t v5 = g10; // 0x3414c
    g10 = a1;
    int32_t v6 = g8; // 0x34152
    g8 = a2;
    if (a3 < 1) {
        // 0x34190
        g6 = v4;
        g10 = v5;
        g8 = v6;
        g5 = v2;
        int32_t result = function_33860(v4, v5); // 0x341a6
        g4 = result;
        return result;
    }
    int32_t v7 = a3 + 1; // 0x3415c
    g4 = v7;
    g4 = function_33860(a1, v7);
    g4 = function_33be0(g10, g8, a3);
    int32_t v8 = *(int32_t *)g10; // 0x3417b
    g4 = v8;
    *(char *)(v8 + a3) = 0;
    g6 = v4;
    g10 = v5;
    g8 = v6;
    return g4;
}

// Address range: 0x341b0 - 0x341b1
int32_t function_341b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x341b0
    return g4;
}

// Address range: 0x341d7 - 0x341d8
int32_t function_341d7(void) {
    // 0x341d7
    return g4;
}

// Address range: 0x341e3 - 0x341e4
int32_t function_341e3(void) {
    // 0x341e3
    return g4;
}

// Address range: 0x341f9 - 0x341fa
int32_t function_341f9(void) {
    // 0x341f9
    return g4;
}

// Address range: 0x34201 - 0x34202
int32_t function_34201(void) {
    // 0x34201
    return g4;
}

// Address range: 0x34248 - 0x3427b
int32_t function_34248(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x458bd055); // 0x34248
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x3424e
    g9 |= 256 * v2 & 0xff00;
    g4 = v2 + 58 & 255 | v2 & -256;
    int32_t v3 = g7; // 0x34252
    char * v4 = (char *)(v3 - 0x76fbdb8c); // 0x34252
    *v4 = *v4 + (char)v3;
    int32_t v5 = g4; // 0x34258
    g4 = v5 + 36 & 255 | v5 & -256;
    g4 = function_33d30((int32_t)&g870, (int32_t)&g870);
    *(int32_t *)(g5 - 28) = 0;
    g4 = function_333b0(g10);
    int32_t result = *(int32_t *)(g5 + 8); // 0x3426e
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x34280 - 0x342c6
int32_t function_34280(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g7; // 0x34280
    int32_t v2 = v1 - 1; // 0x34280
    g4 = v2;
    int32_t v3 = g6; // 0x34283
    int32_t v4 = v3 - v2; // 0x34283
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 ? v2 : v3; // 0x34285
    g6 = v5;
    int32_t v6; // 0x34299
    int32_t v7; // 0x3429e
    if (g10 != 0x7fffffff) {
        // bb
        g4 = function_341e3();
        v7 = g6;
        v6 = g7;
    } else {
        v7 = v5;
        v6 = v1;
    }
    int32_t v8 = v6 - 1; // 0x34294
    g4 = v8;
    int32_t v9 = v6 != 0 ? v8 : 0; // 0x3429b
    g8 = v9;
    if (v7 < v9) {
        // bb240
        g4 = function_34201();
    }
    int32_t v10 = *(int32_t *)(g5 + 8); // 0x342a6
    g4 = v10;
    g4 = function_33ec0(v10, (int32_t)&g129);
    int32_t result = *(int32_t *)(g5 + 8); // 0x342b9
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x342d0 - 0x342ec
int32_t function_342d0(void) {
    int32_t v1 = g7; // 0x342d0
    int32_t v2 = -g6; // 0x342d7
    uint32_t v3 = v1 != 0 ? v1 - 1 : 0; // 0x342db
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x342e3
    int64_t v5 = v3; // 0x342e3
    g4 = v4 / v5;
    int32_t v6 = v4 % v5; // 0x342e3
    g9 = v6;
    g6 = v3 - v6;
    int32_t result = function_341d7(); // 0x342e7
    g4 = result;
    return result;
}

// Address range: 0x342f0 - 0x3430c
int32_t function_342f0(void) {
    int32_t v1 = g7; // 0x342f0
    int32_t v2 = -g10; // 0x342f3
    g10 = v2;
    uint32_t v3 = v1 != 0 ? v1 - 1 : 0; // 0x342fb
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x34303
    int64_t v5 = v3; // 0x34303
    g4 = v4 / v5;
    int32_t v6 = v4 % v5; // 0x34303
    g9 = v6;
    g8 = v3 - v6;
    int32_t result = function_341f9(); // 0x34307
    g4 = result;
    return result;
}

// Address range: 0x3430c - 0x34366
int32_t function_3430c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3430c
    g6 = g4;
    *(int32_t *)(g5 - 28) = 0;
    g4 = function_333b0(g10);
    function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g6; // 0x34333
    g6 = a1;
    g4 = a2;
    int32_t v2 = -a3; // 0x34348
    g9 = v2;
    function_341b0(a1, a2, v2, 0x7fffffff, v1, g5);
    int32_t result = g6; // 0x3435a
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x34370 - 0x343a4
int32_t function_34370(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x34373
    g6 = a1;
    g4 = a2;
    int32_t v2; // ebp
    function_341b0(a1, a2, 0, a3, v1, v2);
    int32_t result = g6; // 0x34398
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x343b0 - 0x34468
int32_t function_343b0(int32_t * a1, char * a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g5; // bp-4
    int32_t v3 = g6; // 0x343b6
    g6 = (int32_t)a2;
    int32_t v4 = g10; // 0x343bc
    g9 = v1;
    int32_t v5 = g8; // 0x343c2
    int32_t v6; // 0x34445
    int32_t v7; // 0x343d4
    if (a2 != NULL) {
        // 0x343e0
        if (a1 == NULL) {
            v7 = g5;
            goto lab_0x343c9;
        } else {
            // 0x343e4
            g8 = v1;
            g10 = (int32_t)"GNU";
            int32_t v8; // 0x3445f
            int32_t v9; // 0x34462
            if (v1 % 2 != 0) {
                // 0x3445c
                *(char *)a1 = 0;
                v8 = v1 + 1;
                g8 = v8;
                v9 = g10 & -0x10000 | (int32_t)&g862;
                g10 = v9;
            } else {
                v9 = (int32_t)"GNU";
                v8 = v1;
            }
            // 0x343f0
            int32_t v10; // 0x34454
            int32_t v11; // 0x34457
            if ((v8 & 2) != 0) {
                // 0x3444f
                *(int16_t *)v8 = 0;
                v10 = g10 - 2;
                g10 = v10;
                v11 = g8 + 2;
                g8 = v11;
            } else {
                v11 = v8;
                v10 = v9;
            }
            // 0x343f8
            g4 = 0;
            int32_t v12 = v10 / 4; // 0x343fc
            g7 = v12;
            __asm_rep_stosd_memset((char *)v11, 0, v12);
            int32_t v13 = (g3 ? -4 : 4) * v12 + v11; // 0x34405
            g8 = v13;
            g7 = 0;
            if ((v10 & 2) != 0) {
                // 0x34440
                *(int16_t *)v13 = 0;
                v6 = g8 + 2;
                g8 = v6;
                int32_t v14 = g10 % 2; // 0x34448
                g10 = v14;
                if (v14 == 0) {
                    goto lab_0x3442a;
                } else {
                    goto lab_0x3440e;
                }
            } else {
                int32_t v15 = g10 % 2; // 0x34409
                g10 = v15;
                if (v15 == 0) {
                    goto lab_0x3442a;
                } else {
                    v6 = v13;
                    goto lab_0x3440e;
                }
            }
        }
    } else {
        v7 = g5;
        goto lab_0x343c9;
    }
  lab_0x343c9:
    // 0x343c9
    g6 = v3;
    g10 = v4;
    g8 = v5;
    g5 = v7;
    return g4;
  lab_0x3442a:;
    int32_t v16 = g6; // 0x3442a
    unsigned char v17 = *(char *)v16; // 0x3442a
    int32_t result = v17; // 0x3442a
    g4 = result;
    if (v17 == 0) {
        // 0x34431
        g6 = v3;
        g10 = v4;
        g8 = v5;
        g5 = v2;
        return result;
    }
    goto lab_0x34420;
  lab_0x3440e:
    // 0x3440e
    *(char *)v6 = 0;
    int32_t v18 = g6; // 0x34411
    unsigned char v19 = *(char *)v18; // 0x34411
    int32_t v20 = v19; // 0x34411
    g4 = v20;
    if (v19 == 0) {
        // 0x3440e
        v7 = v2;
        goto lab_0x343c9;
    } else {
        result = v20;
        v16 = v18;
        goto lab_0x34420;
    }
  lab_0x34420:
    // 0x34420
    g6 = v16 + 1;
    *(char *)(result + v1) = 1;
    goto lab_0x3442a;
}

// Address range: 0x34488 - 0x3448b
int32_t function_34488(void) {
    // 0x34488
    g7--;
    return g4;
}

// Address range: 0x34490 - 0x34595
int32_t function_34490(int32_t a1) {
    g4 = 0;
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x34498
    g6 = a1;
    int32_t v3 = g10; // 0x3449e
    g10 = 1;
    int32_t v4 = *(char *)a1 == 36; // 0x344b1
    g4 = v4;
    int32_t v5 = v4 + a1; // 0x344b4
    g6 = v5;
    int32_t v6 = function_2cc30(v5, "WIN32"); // 0x344b9
    g4 = v6;
    if (v6 != 0) {
        // 0x344d0
        g10 = 0;
        int32_t v7 = function_2cc30(g6, "WINDOWS"); // 0x344dd
        g4 = v7;
        if (v7 != 0) {
            int32_t v8 = function_2cc30(g6, "X360"); // 0x344f1
            g4 = v8;
            if (v8 != 0) {
                int32_t v9 = function_2cc30(g6, "PS3"); // 0x34505
                g4 = v9;
                if (v9 != 0) {
                    int32_t v10 = function_2cc30(g6, "OSX"); // 0x34519
                    g4 = v10;
                    if (v10 != 0) {
                        // 0x34522
                        g10 = 1;
                        int32_t v11 = function_2cc30(g6, "LINUX"); // 0x34532
                        g4 = v11;
                        if (v11 != 0) {
                            int32_t v12 = function_2cc30(g6, "POSIX"); // 0x34546
                            g4 = v12;
                            if (v12 != 0) {
                                // 0x34553
                                g10 = 0;
                                int32_t v13 = function_2cc30(g6, "GAMECONSOLE"); // 0x34560
                                g4 = v13;
                                if (v13 != 0) {
                                    int32_t v14 = function_2cc30(g6, "DEMO"); // 0x34578
                                    g4 = v14;
                                    if (v14 != 0) {
                                        int32_t result = function_2cc30(g6, "LOWVIOLENCE"); // 0x34590
                                        g4 = result;
                                        return result;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    int32_t result2 = g10; // 0x344c2
    g4 = result2;
    g6 = v2;
    g10 = v3;
    return result2;
}

// Address range: 0x34599 - 0x345ad
int32_t function_34599(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x245c8910); // 0x34599
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x3459f
    int32_t result = v2 + 173 & 255 | v2 & -256; // 0x345a1
    g4 = result;
    g10 = result;
    return result;
}

// Address range: 0x345b0 - 0x345be
int32_t function_345b0(int32_t a1) {
    // 0x345b0
    g4 = a1;
    *(int32_t *)a1 = 0;
    return g4;
}

// Address range: 0x345c0 - 0x345f2
int32_t function_345c0(int32_t a1) {
    int32_t v1 = g6; // 0x345c3
    g7 = a1;
    int32_t v2 = *(int32_t *)(a1 + 8); // 0x345c7
    g6 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x345ca
    g9 = v3;
    unsigned char v4 = *(char *)(v3 + v2); // 0x345cd
    g4 = v4;
    int32_t v5; // 0x345e6
    int32_t v6; // 0x345e9
    unsigned char v7; // 0x345de
    if (v4 == 32) {
        int32_t v8 = a1; // 0x345db
        int32_t v9 = v3; // 0x345d8
        while (true) {
            int32_t v10 = v9 + 1; // 0x345d8
            g9 = v10;
            *(int32_t *)(v8 + 12) = v10;
            int32_t v11 = g9; // 0x345de
            v7 = *(char *)(v11 + g6);
            g4 = v7;
            int32_t v12 = g7;
            if (v7 != 32) {
                v6 = v12;
                v5 = v11;
                // break -> 0x345e6
                break;
            }
            v8 = v12;
            v9 = v11;
        }
    } else {
        v6 = a1;
        v7 = v4;
        v5 = v3;
    }
    // 0x345e6
    g9 = v5 + 1;
    *(char *)(v6 + 4) = v7;
    *(int32_t *)(g7 + 12) = g9;
    g6 = v1;
    return g4;
}

// Address range: 0x34600 - 0x3460f
int32_t function_34600(int32_t a1) {
    // 0x34600
    g4 = a1;
    int32_t result = function_1bc40(); // 0x3460a
    g4 = result;
    return result;
}

// Address range: 0x34610 - 0x34620
int32_t function_34610(void) {
    int32_t result = function_1bc00(16); // 0x3461b
    g4 = result;
    return result;
}

// Address range: 0x34620 - 0x3466f
int32_t function_34620(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x34620
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x34626
    g6 = a2;
    int32_t v4 = g10; // 0x3462c
    g10 = a1;
    int32_t v5 = *(int32_t *)a2; // 0x34632
    g4 = v5;
    int32_t result; // 0x3466e
    if (v5 != 0) {
        // 0x34638
        g4 = function_34620(a1, v5);
        int32_t v6 = *(int32_t *)g6 + 4; // 0x34649
        g4 = v6;
        g4 = function_34620(g10, v6);
        g4 = *(int32_t *)g6;
        g4 = function_1bc40();
        *(int32_t *)g6 = 0;
        result = g4;
    } else {
        result = 0;
        v2 = v1;
    }
    // 0x34665
    g6 = v3;
    g10 = v4;
    g5 = v2;
    return result;
}

// Address range: 0x34670 - 0x34687
int32_t function_34670(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t result = function_34620(a1, a1); // 0x34680
    g4 = result;
    return result;
}

// Address range: 0x34690 - 0x3469c
int32_t function_34690(char a1) {
    int32_t result = g4 & -256 | (int32_t)(a1 == 33); // 0x34698
    g4 = result;
    return result;
}

// Address range: 0x346a0 - 0x346b9
int32_t function_346a0(int32_t a1, int32_t a2) {
    // 0x346a0
    g8 = a2;
    g6 = a1;
    g4 = a2;
    int32_t result; // 0x346b3
    if ((char)a2 == 36) {
        // bb
        result = function_34740();
        g4 = result;
    } else {
        result = a2;
    }
    // 0x346b9
    return result;
}

// Address range: 0x346bd - 0x3473c
int32_t function_346bd(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g7 + 0xfc931fa); // 0x346bd
    *v1 = *v1 - 1;
    g10 = -0x9ef740e;
    bool v2; // cf
    if (!v2) {
        // 0x346cb
        return g4;
    }
    // 0x346cc
    int32_t v3; // 0x34723
    int32_t result; // 0x34735
    if (g11 == -1) {
        // 0x346cc
        result = g7;
        goto lab_0x34732;
    } else {
        int32_t v4 = g6; // 0x346ce
        g10 = *(int32_t *)(v4 + 8);
        int32_t v5 = g8; // 0x346d1
        g7 = v5;
        g9 = *(int32_t *)(v4 + 12);
        *(char *)(v4 + 16) = (char)v5;
        int32_t v6; // ebp
        *(int32_t *)(v6 - 28) = g10;
        unsigned char v7 = *(char *)(g9 + g10); // 0x346dc
        int32_t v8 = v7; // 0x346dc
        g7 = v8;
        int32_t v9 = g4; // 0x346e0
        g9 = v9;
        g10 = v8;
        g9 = 1;
        if ((*(char *)(v9 + 1 + 2 * v8) & 8) != 0) {
            int32_t v10 = 1; // 0x34704
            while (true) {
                // 0x34704
                *(char *)(v10 + 16 + g6) = v7;
                int32_t v11 = g9 + 1; // 0x34708
                g9 = v11;
                int32_t * v12 = (int32_t *)(g6 + 12); // 0x3470b
                int32_t v13 = *v12; // 0x3470b
                g7 = v13;
                int32_t v14 = v13 + 1; // 0x34711
                g10 = v14;
                *v12 = v14;
                int32_t v15 = *(int32_t *)(v6 - 28); // 0x34717
                g10 = v15;
                unsigned char v16 = *(char *)(v15 + 1 + g7); // 0x3471a
                int32_t v17 = v16; // 0x3471a
                g7 = v17;
                if (v11 > 127) {
                    // break -> 0x34721
                    break;
                }
                int32_t v18 = g4; // 0x346f8
                g10 = v18;
                g8 = v17;
                if ((*(char *)((2 * v17 | 1) + v18) & 8) == 0) {
                    // break -> 0x34721
                    break;
                }
                // 0x346f8
                v10 = g9;
                v7 = v16;
            }
            // 0x34721
            g7 = 0;
            v3 = g9;
            if (v3 > 126) {
                result = 0;
                goto lab_0x34732;
            } else {
                goto lab_0x34728;
            }
        } else {
            v3 = 1;
            goto lab_0x34728;
        }
    }
  lab_0x34732:
    // 0x34732
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
  lab_0x34728:
    // 0x34728
    *(char *)(v3 + 16 + g6) = 0;
    g7 = 1;
    result = 1;
    goto lab_0x34732;
}

// Address range: 0x34740 - 0x34752
int32_t function_34740(void) {
    int32_t v1 = g6; // 0x34740
    g9 = *(int32_t *)(v1 + 8);
    *(char *)(v1 + 16) = 36;
    g8 = 1;
    g10 = *(int32_t *)(g6 + 12);
    *(int32_t *)(g5 - 28) = g9;
    return g4;
}

// Address range: 0x34756 - 0x347bc
int32_t function_34756(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g7 + 0x27bc8df6); // 0x34756
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x3475c
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g4; // 0x3475e
    *(char *)v3 = (char)v3 + *(char *)&g4;
    while (true) {
        // 0x34760
        int32_t v4; // ebp
        int32_t v5 = *(int32_t *)(v4 - 28); // 0x34760
        g7 = v5;
        unsigned char v6 = *(char *)(g10 + v5); // 0x34763
        int32_t v7 = v6; // 0x34763
        g9 = v7;
        int32_t v8 = g4; // 0x34767
        g7 = v8;
        g10 = v7;
        if ((*(char *)(v8 + 2 * v7) & 8) == 0) {
            if (v6 != 95) {
                int32_t v9 = g8; // 0x34777
                if (v9 <= 126) {
                    // 0x3477c
                    *(char *)(v9 + 16 + g6) = 0;
                    g7 = 1;
                    g6 = a1;
                    g4 = 1;
                    g10 = a2;
                    g8 = a3;
                    return 1;
                }
                goto lab_0x347b0;
            }
        }
        int32_t v10 = g8; // 0x34790
        if (v10 == 128) {
            // break -> 0x347b0
            break;
        }
        // 0x34798
        *(char *)(v10 + 16 + g6) = v6;
        g8++;
        int32_t * v11 = (int32_t *)(g6 + 12); // 0x3479f
        int32_t v12 = *v11 + 1; // 0x347a2
        g10 = v12;
        *v11 = v12;
    }
    goto lab_0x347b0;
  lab_0x347b0:
    // 0x347b0
    g7 = 0;
    g6 = a1;
    g4 = 0;
    g10 = a2;
    g8 = a3;
    return 0;
}

// Address range: 0x347c0 - 0x3485e
int32_t function_347c0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x347c0
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x347c6
    g6 = a2;
    int32_t v4 = g10; // 0x347cc
    g10 = 0;
    int32_t v5 = g8; // 0x347d1
    g8 = a1;
    int32_t v6 = *(int32_t *)a2; // 0x347d7
    g4 = v6;
    int32_t v7; // 0x3482d
    int32_t result; // 0x3481c
    if (v6 != 0) {
        int32_t v8 = function_347c0(a1, v6); // 0x347e4
        g4 = v8;
        int32_t v9 = *(int32_t *)g6 + 4; // 0x347f1
        g4 = v9;
        int32_t v10 = function_347c0(g8, v9); // 0x347f8
        g4 = v10;
        int32_t v11 = *(int32_t *)g6; // 0x347fd
        g9 = v11;
        int32_t v12 = *(int32_t *)(v11 + 8); // 0x347ff
        g7 = v12;
        int32_t v13; // 0x3485a
        if (v12 == 0) {
            char * v14 = (char *)(v11 + 12); // 0x34830
            if (*v14 == 38) {
                int32_t v15 = (char)v8 == 0 ? g10 : v10; // 0x34854
                g4 = v15;
                *v14 = (char)v15;
                v13 = *(int32_t *)g6;
                g9 = v13;
            } else {
                // 0x34836
                g7 = 1;
                int32_t v16 = (char)v8 != 0 ? 1 : v10; // 0x3483f
                g4 = v16;
                *v14 = (char)v16;
                int32_t v17 = *(int32_t *)g6; // 0x34845
                g9 = v17;
                v13 = v17;
            }
        } else {
            if (v12 == 1) {
                int32_t v18 = v10 ^ 1; // 0x3480b
                g4 = v18;
                *(char *)(v11 + 12) = (char)v18;
                int32_t v19 = *(int32_t *)g6; // 0x34811
                g9 = v19;
                v13 = v19;
            } else {
                v13 = v11;
            }
        }
        // 0x34813
        *(int32_t *)(v13 + 8) = 2;
        int32_t v20 = *(int32_t *)g6; // 0x3481a
        g4 = v20;
        result = (int32_t)*(char *)(v20 + 12);
        g10 = result;
        v7 = v2;
    } else {
        v7 = v1;
        result = 0;
    }
    // 0x34820
    g4 = result;
    g6 = v3;
    g10 = v4;
    g8 = v5;
    g5 = v7;
    return result;
}

// Address range: 0x34860 - 0x3490f
int32_t function_34860(int32_t a1, int32_t a2, uint32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g9 = a3;
    int32_t v2 = g6; // 0x3486c
    int32_t v3 = g10; // 0x3486f
    g6 = a2;
    g10 = a4;
    int32_t v4 = g8; // 0x34878
    g8 = 1;
    int32_t v5 = function_1bc00(16); // 0x3488d
    g4 = v5;
    g9 = a5;
    *(int32_t *)g6 = v5;
    *(int32_t *)g4 = g9;
    g9 = a6;
    int32_t v6 = *(int32_t *)g6; // 0x3489f
    g4 = v6;
    *(int32_t *)(v6 + 4) = a6;
    int32_t v7 = *(int32_t *)g6; // 0x348a4
    g4 = v7;
    *(int32_t *)(v7 + 8) = a4;
    if (a4 != 1) {
        if (a4 == 2) {
            // 0x34910
            return g4;
        }
        if (a4 != 0) {
            // 0x348d0
            g7 = a1;
            g8 = 0;
            int32_t v8 = *(int32_t *)(a1 + 148); // 0x348d5
            g6 = v8;
            if (v8 != 0) {
                // 0x348df
                int32_t v9; // bp-296
                int32_t v10 = &v9; // 0x348df
                g4 = v10;
                function_1e010(v10, "Logic Error in CExpressionEvaluator");
                int32_t result = g8; // 0x34900
                g4 = result;
                g6 = v2;
                g10 = v3;
                g8 = v4;
                g5 = v1;
                return result;
            }
        } else {
            int32_t v11 = *(int32_t *)g6; // 0x348b4
            g4 = v11;
            g7 = a3 % 256;
            *(char *)(v11 + 12) = (char)a3;
        }
    }
    int32_t result2 = g8; // 0x348c0
    g4 = result2;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result2;
}

// Address range: 0x34943 - 0x34959
int32_t function_34943(int32_t a1) {
    // 0x34943
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xff889c0); // 0x34943
    *v2 = *v2 + 1;
    g6++;
    g4 = v1 | 139;
    int32_t result = __asm_hlt(); // 0x3494e
    g4 = result;
    g10 = *(int32_t *)(a1 - 8);
    g8 = *(int32_t *)(a1 - 4);
    return result;
}

// Address range: 0x34960 - 0x34984
int32_t function_34960(void) {
    // 0x34960
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x34960
    int32_t v3 = *v2; // 0x34960
    g4 = v3;
    g9 = *v2;
    *(char *)(g6 + 12) = (char)(v3 + 16);
    int32_t result = g8; // 0x34975
    g4 = result;
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x34990 - 0x34a3a
int32_t function_34990(int32_t a1, int32_t * a2, uint32_t a3) {
    // 0x34990
    g9 = (uint32_t)(a3 % 256);
    int32_t v1 = g6; // 0x3499d
    int32_t v2 = g10; // 0x349a0
    g4 = a1;
    g7 = (int32_t)a2;
    char v3 = a3; // 0x349a9
    if (v3 != 38) {
        if (v3 != 124) {
            // 0x349b3
            *(char *)a2 = 0;
            g4 = 1;
            // 0x349bb
            g6 = v1;
            g10 = v2;
            return 1;
        }
    }
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x349c8
    int32_t v5 = *v4; // 0x349c8
    g6 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x349cb
    g10 = v6;
    g10 = (int32_t)*(char *)(v6 + v5);
    *v4 = v5 + 1;
    int32_t v7 = g9; // 0x349d8
    int32_t v8 = g10 & v7; // 0x349da
    g6 = v8;
    if ((char)v8 == (char)v7) {
        // 0x34a30
        *(char *)g7 = 1;
        g4 = 1;
        // 0x349bb
        g6 = v1;
        g10 = v2;
        return 1;
    }
    int32_t v9 = *(int32_t *)(g4 + 148); // 0x349e0
    g6 = v9;
    g4 = 1;
    if (v9 == 0) {
        // 0x349bb
        g6 = v1;
        g10 = v2;
        return 1;
    }
    // 0x349ef
    int32_t v10; // bp-280
    int32_t v11 = &v10; // 0x34a03
    g4 = v11;
    function_1e010(v11, "Bad expression operator: '%c%c', expected C style operator");
    g6 = v1;
    g4 = 0;
    g10 = v2;
    return 0;
}

// Address range: 0x34a40 - 0x34b77
int32_t function_34a40(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x34a43
    int32_t v2 = g6; // bp-12
    g6 = a1;
    g10 = a2;
    unsigned char v3 = *(char *)(a1 + 4); // 0x34a51
    int32_t v4 = v3; // 0x34a51
    g4 = v4;
    int32_t result; // 0x34ab9
    if (v3 == 40) {
        int32_t v5 = *(int32_t *)(a1 + 8); // 0x34ac0
        g7 = v5;
        int32_t v6 = *(int32_t *)(a1 + 12); // 0x34ac3
        g4 = v6;
        unsigned char v7 = *(char *)(v6 + v5); // 0x34ac6
        g9 = v7;
        int32_t v8; // 0x34adf
        int32_t v9; // 0x34ae2
        unsigned char v10; // 0x34ad6
        if (v7 == 32) {
            int32_t v11 = a1; // 0x34ad3
            int32_t v12 = v6; // 0x34ad0
            while (true) {
                int32_t v13 = v12 + 1; // 0x34ad0
                g4 = v13;
                *(int32_t *)(v11 + 12) = v13;
                int32_t v14 = g4; // 0x34ad6
                v10 = *(char *)(v14 + g7);
                g9 = v10;
                int32_t v15 = g6;
                if (v10 != 32) {
                    v9 = v15;
                    v8 = v14;
                    // break -> 0x34adf
                    break;
                }
                v11 = v15;
                v12 = v14;
            }
        } else {
            v9 = a1;
            v10 = v7;
            v8 = v6;
        }
        // 0x34adf
        g4 = v8 + 1;
        *(char *)(v9 + 4) = v10;
        *(int32_t *)(g6 + 12) = g4;
        int32_t v16 = function_34c40(g6, g10); // 0x34aef
        g4 = v16;
        g9 = 0;
        if ((char)v16 == 0) {
            result = 0;
            // 0x34ab3
            g4 = result;
            g6 = v2;
            g10 = v1;
            return result;
        }
    } else {
        int32_t v17 = function_346a0(a1, v4); // 0x34a63
        g4 = v17;
        int32_t v18 = g6; // 0x34b58
        unsigned char v19 = *(char *)(v18 + 4); // 0x34b58
        if ((char)v17 == 0) {
            // 0x34a70
            g4 = v19;
            g9 = 1;
            if (v19 == 33) {
                result = 1;
                // 0x34ab3
                g4 = result;
                g6 = v2;
                g10 = v1;
                return result;
            }
            int32_t v20 = *(int32_t *)(v18 + 148); // 0x34a7d
            g6 = v20;
            g9 = 0;
            if (v20 != 0) {
                // 0x34a89
                int32_t v21; // bp-280
                int32_t v22 = &v21; // 0x34a98
                g4 = v22;
                function_1e010(v22, "Bad expression token: %c");
                int32_t v23; // bp-275
                g4 = &v23;
                g9 = 0;
                result = 0;
            } else {
                result = 0;
            }
            // 0x34ab3
            g4 = result;
            g6 = v2;
            g10 = v1;
            return result;
        }
        int32_t v24 = v19; // 0x34b58
        g4 = v24;
        int32_t v25 = function_34860(v18, g10, v24, 2, 0, 0); // 0x34b67
        g4 = v25;
        g9 = 0;
        if ((char)v25 == 0) {
            result = 0;
            // 0x34ab3
            g4 = result;
            g6 = v2;
            g10 = v1;
            return result;
        }
    }
    int32_t v26 = g6; // 0x34afa
    int32_t v27 = *(int32_t *)(v26 + 8); // 0x34afa
    g7 = v27;
    int32_t v28 = *(int32_t *)(v26 + 12); // 0x34afd
    g4 = v28;
    unsigned char v29 = *(char *)(v28 + v27); // 0x34b00
    g9 = v29;
    int32_t v30; // 0x34b1f
    int32_t v31; // 0x34b22
    unsigned char v32; // 0x34b16
    if (v29 == 32) {
        int32_t v33 = v26; // 0x34b13
        int32_t v34 = v28; // 0x34b10
        while (true) {
            int32_t v35 = v34 + 1; // 0x34b10
            g4 = v35;
            *(int32_t *)(v33 + 12) = v35;
            int32_t v36 = g4; // 0x34b16
            v32 = *(char *)(v36 + g7);
            g9 = v32;
            int32_t v37 = g6;
            if (v32 != 32) {
                v31 = v37;
                v30 = v36;
                // break -> 0x34b1f
                break;
            }
            v33 = v37;
            v34 = v36;
        }
    } else {
        v31 = v26;
        v32 = v29;
        v30 = v28;
    }
    // 0x34b1f
    g4 = v30 + 1;
    *(char *)(v31 + 4) = v32;
    g9 = 1;
    *(int32_t *)(g6 + 12) = g4;
    int32_t result2 = g9; // 0x34b33
    g4 = result2;
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x34b80 - 0x34c34
int32_t function_34b80(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x34b83
    int32_t v2 = g6; // bp-12
    g6 = a1;
    g10 = a2;
    int32_t v3 = function_34a40(a1, a2); // 0x34b95
    g4 = v3;
    g9 = 0;
    int32_t result; // 0x34bae
    if ((char)v3 == 0) {
        result = 0;
        // 0x34bab
        g4 = result;
        g6 = v2;
        g10 = v1;
        return result;
    }
    while (true) {
        int32_t v4 = g6; // 0x34ba0
        if (*(char *)(v4 + 4) != 33) {
            // break -> 0x34ba6
            break;
        }
        int32_t v5 = g10; // 0x34bc0
        int32_t v6 = *(int32_t *)v5; // 0x34bc0
        g4 = v6;
        int32_t v7 = function_34860(v4, v5, 33, 1, v6, 0); // 0x34bdd
        g4 = v7;
        if ((char)v7 == 0) {
            goto lab_0x34c29;
        }
        int32_t v8 = g6; // 0x34be6
        int32_t v9 = *(int32_t *)(v8 + 8); // 0x34be6
        g7 = v9;
        int32_t v10 = *(int32_t *)(v8 + 12); // 0x34be9
        g4 = v10;
        unsigned char v11 = *(char *)(v10 + v9); // 0x34bec
        g9 = v11;
        int32_t v12; // 0x34c07
        int32_t v13; // 0x34c0a
        unsigned char v14; // 0x34bfe
        if (v11 == 32) {
            int32_t v15 = v8; // 0x34bfb
            int32_t v16 = v10; // 0x34bf8
            while (true) {
                int32_t v17 = v16 + 1; // 0x34bf8
                g4 = v17;
                *(int32_t *)(v15 + 12) = v17;
                int32_t v18 = g4; // 0x34bfe
                v14 = *(char *)(v18 + g7);
                g9 = v14;
                int32_t v19 = g6;
                if (v14 != 32) {
                    v13 = v19;
                    v12 = v18;
                    // break -> 0x34c07
                    break;
                }
                v15 = v19;
                v16 = v18;
            }
        } else {
            v13 = v8;
            v14 = v11;
            v12 = v10;
        }
        // 0x34c07
        g4 = v12 + 1;
        *(char *)(v13 + 4) = v14;
        *(int32_t *)(g6 + 12) = g4;
        int32_t v20 = *(int32_t *)g10 + 4; // 0x34c15
        g4 = v20;
        int32_t v21 = function_34a40(g6, v20); // 0x34c1c
        g4 = v21;
        if ((char)v21 == 0) {
          lab_0x34c29:
            // 0x34c29
            g9 = 0;
            g6 = v2;
            g4 = 0;
            g10 = v1;
            return 0;
        }
    }
    // 0x34ba6
    g9 = 1;
    result = 1;
    // 0x34bab
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x34c40 - 0x34d14
int32_t function_34c40(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x34c43
    int32_t v2 = g10; // 0x34c44
    int32_t v3 = g6; // 0x34c45
    g6 = a1;
    g10 = a2;
    int32_t v4 = function_34b80(a1, a2); // 0x34c56
    g4 = v4;
    g9 = 0;
    int32_t result; // 0x34d06
    if ((char)v4 != 0) {
        // 0x34c65
        char v5; // bp-29
        g8 = &v5;
        while (true) {
            int32_t v6 = g6; // 0x34c70
            int32_t v7 = (int32_t)*(char *)(v6 + 4); // 0x34c70
            g4 = v7;
            v5 = 0;
            int32_t v8 = function_34990(v6, (int32_t *)&v5, v7); // 0x34c83
            g4 = v8;
            if ((char)v8 == 0) {
                // break -> 0x34d01
                break;
            }
            // 0x34c8c
            if (v5 == 0) {
                // 0x34d0d
                g9 = 1;
                result = 1;
                goto lab_0x34d03;
            }
            int32_t v9 = g10; // 0x34c9a
            int32_t v10 = *(int32_t *)v9; // 0x34c9a
            g4 = v10;
            int32_t v11 = g6; // 0x34ca8
            int32_t v12 = (int32_t)*(char *)(v11 + 4); // 0x34ca8
            g4 = v12;
            int32_t v13 = function_34860(v11, v9, v12, 0, v10, 0); // 0x34cb7
            g4 = v13;
            if ((char)v13 == 0) {
                // break -> 0x34d01
                break;
            }
            int32_t v14 = g6; // 0x34cc0
            int32_t v15 = *(int32_t *)(v14 + 8); // 0x34cc0
            g7 = v15;
            int32_t v16 = *(int32_t *)(v14 + 12); // 0x34cc3
            g4 = v16;
            unsigned char v17 = *(char *)(v16 + v15); // 0x34cc6
            g9 = v17;
            int32_t v18; // 0x34cdf
            int32_t v19; // 0x34ce2
            unsigned char v20; // 0x34cd6
            if (v17 == 32) {
                int32_t v21 = v14; // 0x34cd3
                int32_t v22 = v16; // 0x34cd0
                while (true) {
                    int32_t v23 = v22 + 1; // 0x34cd0
                    g4 = v23;
                    *(int32_t *)(v21 + 12) = v23;
                    int32_t v24 = g4; // 0x34cd6
                    v20 = *(char *)(v24 + g7);
                    g9 = v20;
                    int32_t v25 = g6;
                    if (v20 != 32) {
                        v19 = v25;
                        v18 = v24;
                        // break -> 0x34cdf
                        break;
                    }
                    v21 = v25;
                    v22 = v24;
                }
            } else {
                v19 = v14;
                v20 = v17;
                v18 = v16;
            }
            // 0x34cdf
            g4 = v18 + 1;
            *(char *)(v19 + 4) = v20;
            *(int32_t *)(g6 + 12) = g4;
            int32_t v26 = *(int32_t *)g10 + 4; // 0x34ced
            g4 = v26;
            int32_t v27 = function_34b80(g6, v26); // 0x34cf4
            g4 = v27;
            if ((char)v27 == 0) {
                // break -> 0x34d01
                break;
            }
        }
        // 0x34d01
        g9 = 0;
        result = 0;
    } else {
        result = 0;
    }
    goto lab_0x34d03;
  lab_0x34d03:
    // 0x34d03
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x34d20 - 0x34d6a
int32_t function_34d20(int32_t a1) {
    int32_t v1 = g6; // 0x34d23
    g7 = a1;
    int32_t v2 = *(int32_t *)(a1 + 8); // 0x34d2a
    g6 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x34d2d
    g4 = v3;
    unsigned char v4 = *(char *)(v3 + v2); // 0x34d30
    g9 = v4;
    int32_t v5; // 0x34d4f
    int32_t v6; // 0x34d52
    unsigned char v7; // 0x34d46
    if (v4 == 32) {
        int32_t v8 = a1; // 0x34d43
        int32_t v9 = v3; // 0x34d40
        while (true) {
            int32_t v10 = v9 + 1; // 0x34d40
            g4 = v10;
            *(int32_t *)(v8 + 12) = v10;
            int32_t v11 = g4; // 0x34d46
            v7 = *(char *)(v11 + g6);
            g9 = v7;
            int32_t v12 = g7;
            if (v7 != 32) {
                v6 = v12;
                v5 = v11;
                // break -> 0x34d4f
                break;
            }
            v8 = v12;
            v9 = v11;
        }
    } else {
        v6 = a1;
        v7 = v4;
        v5 = v3;
    }
    // 0x34d4f
    g4 = v5 + 1;
    *(char *)(v6 + 4) = v7;
    *(int32_t *)(g7 + 12) = g4;
    int32_t v13 = g7; // 0x34d58
    int32_t result = function_34c40(v13, v13); // 0x34d5f
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x34d70 - 0x34ea4
int32_t function_34d70(int32_t * a1, char * a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x34d70
    g9 = 0;
    int32_t v1 = g8; // 0x34d7b
    g8 = a3;
    int32_t v2 = g6; // 0x34d81
    g7 = a5;
    int32_t v3 = g10; // 0x34d87
    g6 = (int32_t)a1;
    g10 = a4;
    int32_t result; // 0x34e01
    if (a3 == 0) {
        result = 0;
        // 0x34dfe
        g6 = v2;
        g4 = result;
        g10 = v3;
        g8 = v1;
        return result;
    }
    // 0x34d94
    if (*(char *)a3 == 91) {
        int32_t v4 = function_2cb40(a3); // 0x34e3f
        g9 = 0;
        int32_t v5 = v4 + 1; // 0x34e51
        g4 = v5;
        if (v5 > (int32_t)&g64) {
            result = 0;
            // 0x34dfe
            g6 = v2;
            g4 = result;
            g10 = v3;
            g8 = v1;
            return result;
        }
        // 0x34e5b
        g4 = v4;
        int32_t v6 = g8; // 0x34e61
        int32_t v7; // bp-540
        g8 = &v7;
        function_2d970(&v7, v6 + 1, v4);
        g7 = a5;
        g4 = v4 - 2;
        char * v8 = (char *)(v4 - 538 + g5); // 0x34e89
        if (*v8 == 93) {
            // 0x34e97
            *v8 = 0;
        }
    }
    // 0x34d9d
    g4 = 0x34490;
    *(int32_t *)(g6 + 8) = g8;
    g10 = a4 == 0 ? g4 : a4;
    int32_t v9 = g7; // 0x34daa
    g4 = 0x34470;
    g7 = v9 == 0 ? 0x34470 : v9;
    *(int32_t *)g6 = 0;
    *(int32_t *)(g6 + 144) = g10;
    *(int32_t *)(g6 + 148) = g7;
    *(int32_t *)(g6 + 12) = 0;
    *(char *)(g6 + 4) = 0;
    int32_t v10 = function_34d20(g6); // 0x34dd4
    g4 = v10;
    g9 = v10;
    int32_t v11; // 0x34e27
    if ((char)v10 != 0) {
        int32_t v12 = g6; // 0x34e10
        int32_t v13 = function_347c0(v12, v12); // 0x34e1d
        g4 = v13;
        g7 = (int32_t)a2;
        *a2 = (char)v13;
        v11 = v10 % 256;
        g9 = v11;
    } else {
        v11 = v10;
    }
    int32_t v14 = g6; // 0x34de5
    g4 = function_34620(v14, v14);
    *(int32_t *)g6 = 0;
    int32_t v15 = v11 % 256; // 0x34df7
    g9 = v15;
    result = v15;
    // 0x34dfe
    g6 = v2;
    g4 = result;
    g10 = v3;
    g8 = v1;
    return result;
}

// Address range: 0x34eb0 - 0x34f09
int32_t function_34eb0(int32_t a1) {
    // 0x34eb0
    g4 = 0;
    int32_t v1 = g6; // 0x34eb5
    g9 = a1;
    unsigned char v2 = *(char *)a1; // 0x34eb9
    int32_t v3 = v2; // 0x34eb9
    g7 = v3;
    if (v2 == 0) {
        // 0x34f01
        g6 = v1;
        return 0;
    }
    int32_t v4 = *(int32_t *)(4 * v3 + (int32_t)&g142); // 0x34ec0
    g4 = v4;
    unsigned char v5 = *(char *)(a1 + 1); // 0x34ec7
    int32_t v6 = v5; // 0x34ec7
    g7 = v6;
    int32_t v7 = a1 + 2; // 0x34ecb
    g9 = v7;
    if (v5 == 0) {
        int32_t result = 256 * v4; // 0x34f04
        g4 = result;
        // 0x34f01
        g6 = v1;
        return result;
    }
    int32_t v8 = v4; // 0x34eec
    int32_t v9; // 0x34efc
    int32_t v10; // 0x34eee
    while (true) {
        int32_t v11 = v6 ^ v8; // 0x34eec
        g7 = v11;
        v10 = *(int32_t *)(4 * v11 + (int32_t)&g142);
        g6 = v10;
        unsigned char v12 = *(char *)v7; // 0x34ef5
        int32_t v13 = v12; // 0x34ef5
        g7 = v13;
        if (v12 == 0) {
            v9 = v8;
            // break -> 0x34efc
            break;
        }
        int32_t v14 = v13 ^ v10; // 0x34ed8
        g7 = v14;
        int32_t v15 = *(int32_t *)(4 * v14 + (int32_t)&g142); // 0x34eda
        g4 = v15;
        unsigned char v16 = *(char *)(v7 + 1); // 0x34ee1
        int32_t v17 = v16; // 0x34ee1
        g7 = v17;
        int32_t v18 = v7 + 2; // 0x34ee5
        g9 = v18;
        if (v16 == 0) {
            v9 = v15;
            // break -> 0x34efc
            break;
        }
        v7 = v18;
        v8 = v15;
        v6 = v17;
    }
    int32_t result2 = 256 * v9 | v10; // 0x34eff
    g4 = result2;
    // 0x34f01
    g6 = v1;
    return result2;
}

// Address range: 0x34f10 - 0x34f22
int32_t function_34f10(int32_t a1) {
    int32_t v1 = g8; // 0x34f13
    g8 = 0;
    int32_t v2 = g10; // 0x34f16
    g10 = 0;
    int32_t v3 = g6; // 0x34f19
    g6 = a1;
    int32_t result = function_34f4d(v3, v2, v1, g5); // 0x34f20
    g4 = result;
    return result;
}

// Address range: 0x34f44 - 0x34f45
int32_t function_34f44(void) {
    // 0x34f44
    return g4;
}

// Address range: 0x34f4d - 0x34f53
int32_t function_34f4d(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = (int32_t)*(char *)&g6; // 0x34f4d
    g4 = result;
    return result;
}

// Address range: 0x34f57 - 0x34f6b
int32_t function_34f57(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x34f57
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x7c338a40); // 0x34f57
    *v2 = *v2 + 1;
    g6 = a1;
    int32_t result = g10 | 256 * g4; // 0x34f65
    g4 = result;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x34f90 - 0x34f91
int32_t function_34f90(void) {
    // 0x34f90
    return g4;
}

// Address range: 0x34f9d - 0x34fba
int32_t function_34f9d(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g7 + 0x5e2c1da); // 0x34f9d
    *v1 = *v1 - 1;
    int32_t v2 = g9 + (g4 & (int32_t)&g862) + g6; // 0x34fa8
    g6 = v2;
    unsigned char v3 = *(char *)&g10; // 0x34faa
    g4 = v3;
    int32_t result; // 0x34fb4
    if (v3 != 0) {
        // bb
        g4 = function_34f90();
        result = g6;
    } else {
        result = v2;
    }
    // 0x34fb1
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x34fc0 - 0x3500a
int32_t function_34fc0(uint32_t a1) {
    int32_t v1 = g6; // 0x34fc3
    int32_t v2 = a1 / 256 & (int32_t)&g862; // 0x34fc9
    g6 = v2;
    int32_t v3 = a1 / 0x1000000; // 0x34fce
    g7 = v3;
    int32_t v4 = a1 / 0x10000; // 0x34fd1
    g4 = v4;
    int32_t v5 = a1 & (int32_t)&g862; // 0x34fd4
    g9 = v5;
    int32_t v6 = *(int32_t *)(4 * v2 + (int32_t)&g142) ^ v3; // 0x34fda
    g7 = v6;
    int32_t v7 = v4 & (int32_t)&g862; // 0x34fe1
    g4 = v7;
    int32_t v8 = *(int32_t *)(4 * v6 + (int32_t)&g142) ^ v7; // 0x34fe6
    g4 = v8;
    int32_t v9 = *(int32_t *)(4 * v8 + (int32_t)&g142) ^ v2; // 0x34fed
    g6 = v9;
    int32_t v10 = *(int32_t *)(4 * v9 + (int32_t)&g142); // 0x34ff4
    g6 = v1;
    int32_t v11 = v10 ^ v5; // 0x34ffc
    g9 = v11;
    int32_t v12 = 256 * v10; // 0x34ffe
    g4 = v12;
    int32_t result = *(int32_t *)(4 * v11 + (int32_t)&g142) | v12; // 0x35001
    g4 = result;
    return result;
}

// Address range: 0x35010 - 0x3505c
int32_t function_35010(int32_t a1) {
    int32_t v1 = g6; // 0x35013
    g4 = a1;
    uint32_t v2 = *(int32_t *)a1; // 0x35017
    int32_t v3 = v2 / 256 & (int32_t)&g862; // 0x3501b
    g6 = v3;
    int32_t v4 = v2 / 0x1000000; // 0x35020
    g7 = v4;
    int32_t v5 = v2 / 0x10000; // 0x35023
    g4 = v5;
    int32_t v6 = v2 & (int32_t)&g862; // 0x35026
    g9 = v6;
    int32_t v7 = *(int32_t *)(4 * v3 + (int32_t)&g142) ^ v4; // 0x3502c
    g7 = v7;
    int32_t v8 = v5 & (int32_t)&g862; // 0x35033
    g4 = v8;
    int32_t v9 = *(int32_t *)(4 * v7 + (int32_t)&g142) ^ v8; // 0x35038
    g4 = v9;
    int32_t v10 = *(int32_t *)(4 * v9 + (int32_t)&g142) ^ v3; // 0x3503f
    g6 = v10;
    int32_t v11 = *(int32_t *)(4 * v10 + (int32_t)&g142); // 0x35046
    g6 = v1;
    int32_t v12 = v11 ^ v6; // 0x3504e
    g9 = v12;
    int32_t v13 = 256 * v11; // 0x35050
    g4 = v13;
    int32_t result = *(int32_t *)(4 * v12 + (int32_t)&g142) | v13; // 0x35053
    g4 = result;
    return result;
}

// Address range: 0x35060 - 0x350e6
int32_t function_35060(int32_t a1) {
    int32_t v1 = g10; // 0x35063
    int32_t v2 = g6; // 0x35064
    g6 = a1;
    uint32_t v3 = *(int32_t *)a1; // 0x35068
    int32_t v4 = v3 / 256 & (int32_t)&g862; // 0x3506c
    g10 = v4;
    int32_t v5 = v3 / 0x1000000; // 0x35071
    g7 = v5;
    int32_t v6 = v3 / 0x10000; // 0x35074
    g9 = v6;
    int32_t v7 = v3 & (int32_t)&g862; // 0x35077
    g4 = v7;
    int32_t v8 = *(int32_t *)(4 * v4 + (int32_t)&g142) ^ v5; // 0x3507c
    g7 = v8;
    int32_t v9 = v6 & (int32_t)&g862; // 0x35083
    g9 = v9;
    int32_t v10 = *(int32_t *)(4 * v8 + (int32_t)&g142) ^ v9; // 0x35089
    g9 = v10;
    int32_t v11 = *(int32_t *)(4 * v10 + (int32_t)&g142) ^ v4; // 0x35090
    g10 = v11;
    uint32_t v12 = *(int32_t *)(a1 + 4); // 0x35097
    g9 = v12;
    int32_t v13 = *(int32_t *)(4 * v11 + (int32_t)&g142) ^ v7; // 0x3509a
    g4 = v13;
    int32_t v14 = v12 / 0x1000000; // 0x350a5
    g6 = v14;
    int32_t v15 = v12 / 0x10000 & (int32_t)&g862; // 0x350ab
    g7 = v15;
    int32_t v16 = *(int32_t *)(4 * v13 + (int32_t)&g142) ^ v14; // 0x350b1
    g6 = v16;
    int32_t v17 = v12 / 256 & (int32_t)&g862; // 0x350b8
    g4 = v17;
    int32_t v18 = v12 & (int32_t)&g862; // 0x350bb
    g9 = v18;
    int32_t v19 = *(int32_t *)(4 * v16 + (int32_t)&g142) ^ v15; // 0x350c1
    g7 = v19;
    g6 = v2;
    int32_t v20 = *(int32_t *)(4 * v19 + (int32_t)&g142) ^ v17; // 0x350c9
    g4 = v20;
    g10 = v1;
    int32_t v21 = *(int32_t *)(4 * v20 + (int32_t)&g142); // 0x350d1
    int32_t v22 = v21 ^ v18; // 0x350d9
    g9 = v22;
    int32_t v23 = 256 * v21; // 0x350db
    g4 = v23;
    int32_t result = *(int32_t *)(4 * v22 + (int32_t)&g142) | v23; // 0x350de
    g4 = result;
    return result;
}

// Address range: 0x350f0 - 0x351ab
int32_t function_350f0(int32_t a1) {
    int32_t v1 = g10; // 0x350f3
    g9 = a1;
    int32_t v2 = g6; // 0x350f7
    uint32_t v3 = *(int32_t *)a1; // 0x350f8
    g4 = v3;
    int32_t v4 = v3 / 256 & (int32_t)&g862; // 0x350fc
    g10 = v4;
    int32_t v5 = v3 / 0x1000000; // 0x35101
    g6 = v5;
    int32_t v6 = v3 / 0x10000; // 0x35104
    g7 = v6;
    int32_t v7 = *(int32_t *)(4 * v4 + (int32_t)&g142) ^ v5; // 0x35107
    g6 = v7;
    int32_t v8 = v6 & (int32_t)&g862; // 0x3510e
    g7 = v8;
    int32_t v9 = *(int32_t *)(4 * v7 + (int32_t)&g142) ^ v8; // 0x35114
    g7 = v9;
    int32_t v10 = v3 & (int32_t)&g862; // 0x3511b
    g6 = v10;
    uint32_t v11 = *(int32_t *)(a1 + 4); // 0x3511e
    g4 = v11;
    uint32_t v12 = *(int32_t *)(a1 + 8); // 0x35121
    g9 = v12;
    int32_t v13 = *(int32_t *)(4 * v9 + (int32_t)&g142) ^ v4; // 0x35124
    g10 = v13;
    int32_t v14 = v11 / 0x1000000; // 0x3512d
    g7 = v14;
    int32_t v15 = *(int32_t *)(4 * v13 + (int32_t)&g142) ^ v10; // 0x35130
    g6 = v15;
    int32_t v16 = *(int32_t *)(4 * v15 + (int32_t)&g142) ^ v14; // 0x35137
    g7 = v16;
    int32_t v17 = v11 / 0x10000 & (int32_t)&g862; // 0x35143
    g6 = v17;
    int32_t v18 = *(int32_t *)(4 * v16 + (int32_t)&g142) ^ v17; // 0x35149
    g6 = v18;
    int32_t v19 = v11 / 256 & (int32_t)&g862; // 0x35150
    g7 = v19;
    int32_t v20 = v11 & (int32_t)&g862; // 0x35153
    g4 = v20;
    int32_t v21 = *(int32_t *)(4 * v18 + (int32_t)&g142) ^ v19; // 0x35158
    g7 = v21;
    int32_t v22 = v12 / 0x1000000; // 0x35161
    g6 = v22;
    int32_t v23 = *(int32_t *)(4 * v21 + (int32_t)&g142) ^ v20; // 0x35164
    g4 = v23;
    int32_t v24 = v12 / 0x10000 & (int32_t)&g862; // 0x35170
    g7 = v24;
    int32_t v25 = *(int32_t *)(4 * v23 + (int32_t)&g142) ^ v22; // 0x35176
    g6 = v25;
    int32_t v26 = v12 / 256 & (int32_t)&g862; // 0x3517d
    g4 = v26;
    int32_t v27 = v12 & (int32_t)&g862; // 0x35180
    g9 = v27;
    int32_t v28 = *(int32_t *)(4 * v25 + (int32_t)&g142) ^ v24; // 0x35186
    g7 = v28;
    g6 = v2;
    int32_t v29 = *(int32_t *)(4 * v28 + (int32_t)&g142) ^ v26; // 0x3518e
    g4 = v29;
    g10 = v1;
    int32_t v30 = *(int32_t *)(4 * v29 + (int32_t)&g142); // 0x35196
    int32_t v31 = v30 ^ v27; // 0x3519e
    g9 = v31;
    int32_t v32 = 256 * v30; // 0x351a0
    g4 = v32;
    int32_t result = *(int32_t *)(4 * v31 + (int32_t)&g142) | v32; // 0x351a3
    g4 = result;
    return result;
}

// Address range: 0x351b0 - 0x3529e
int32_t function_351b0(int32_t a1) {
    int32_t v1 = g10; // 0x351b3
    g4 = a1;
    int32_t v2 = g6; // 0x351b7
    uint32_t v3 = *(int32_t *)a1; // 0x351b8
    g9 = v3;
    int32_t v4 = v3 / 256 & (int32_t)&g862; // 0x351bc
    g10 = v4;
    int32_t v5 = v3 / 0x1000000; // 0x351c1
    g6 = v5;
    int32_t v6 = v3 / 0x10000; // 0x351c4
    g7 = v6;
    int32_t v7 = *(int32_t *)(4 * v4 + (int32_t)&g142) ^ v5; // 0x351c7
    g6 = v7;
    int32_t v8 = v6 & (int32_t)&g862; // 0x351ce
    g7 = v8;
    int32_t v9 = *(int32_t *)(4 * v7 + (int32_t)&g142) ^ v8; // 0x351d4
    g7 = v9;
    int32_t v10 = *(int32_t *)(4 * v9 + (int32_t)&g142) ^ v4; // 0x351db
    g10 = v10;
    int32_t v11 = v3 & (int32_t)&g862; // 0x351e2
    g7 = v11;
    uint32_t v12 = *(int32_t *)(a1 + 4); // 0x351e5
    g9 = v12;
    int32_t v13 = *(int32_t *)(4 * v10 + (int32_t)&g142) ^ v11; // 0x351e8
    g7 = v13;
    int32_t v14 = v12 / 0x1000000; // 0x351f1
    g6 = v14;
    int32_t v15 = *(int32_t *)(4 * v13 + (int32_t)&g142) ^ v14; // 0x351f4
    g6 = v15;
    int32_t v16 = v12 / 0x10000 & (int32_t)&g862; // 0x35200
    g7 = v16;
    int32_t v17 = *(int32_t *)(4 * v15 + (int32_t)&g142) ^ v16; // 0x35206
    g7 = v17;
    int32_t v18 = v12 / 256 & (int32_t)&g862; // 0x3520d
    g6 = v18;
    int32_t v19 = *(int32_t *)(4 * v17 + (int32_t)&g142) ^ v18; // 0x35210
    g6 = v19;
    int32_t v20 = v12 & (int32_t)&g862; // 0x35217
    g7 = v20;
    uint32_t v21 = *(int32_t *)(a1 + 8); // 0x3521a
    g9 = v21;
    int32_t v22 = *(int32_t *)(4 * v19 + (int32_t)&g142) ^ v20; // 0x3521d
    g7 = v22;
    int32_t v23 = v21 / 0x1000000; // 0x35226
    g6 = v23;
    int32_t v24 = *(int32_t *)(4 * v22 + (int32_t)&g142) ^ v23; // 0x35229
    g6 = v24;
    int32_t v25 = v21 / 0x10000 & (int32_t)&g862; // 0x35235
    g7 = v25;
    int32_t v26 = *(int32_t *)(4 * v24 + (int32_t)&g142) ^ v25; // 0x3523b
    g7 = v26;
    int32_t v27 = v21 / 256 & (int32_t)&g862; // 0x35242
    g6 = v27;
    int32_t v28 = *(int32_t *)(4 * v26 + (int32_t)&g142) ^ v27; // 0x35245
    g6 = v28;
    int32_t v29 = v21 & (int32_t)&g862; // 0x3524c
    g7 = v29;
    uint32_t v30 = *(int32_t *)(g4 + 12); // 0x3524f
    g9 = v30;
    int32_t v31 = *(int32_t *)(4 * v28 + (int32_t)&g142) ^ v29; // 0x35252
    g7 = v31;
    g6 = v2;
    int32_t v32 = v30 / 0x1000000; // 0x3525c
    g4 = v32;
    int32_t v33 = *(int32_t *)(4 * v31 + (int32_t)&g142) ^ v32; // 0x3525f
    g4 = v33;
    g10 = v1;
    int32_t v34 = v30 / 0x10000 & (int32_t)&g862; // 0x3526c
    g7 = v34;
    int32_t v35 = *(int32_t *)(4 * v33 + (int32_t)&g142) ^ v34; // 0x35272
    g7 = v35;
    int32_t v36 = v30 / 256 & (int32_t)&g862; // 0x35279
    g4 = v36;
    int32_t v37 = v30 & (int32_t)&g862; // 0x3527c
    g9 = v37;
    int32_t v38 = *(int32_t *)(4 * v35 + (int32_t)&g142) ^ v36; // 0x35283
    g4 = v38;
    int32_t v39 = *(int32_t *)(4 * v38 + (int32_t)&g142); // 0x3528a
    int32_t v40 = v39 ^ v37; // 0x35291
    g9 = v40;
    int32_t v41 = 256 * v39; // 0x35293
    g4 = v41;
    int32_t result = *(int32_t *)(4 * v40 + (int32_t)&g142) | v41; // 0x35296
    g4 = result;
    return result;
}

// Address range: 0x352a0 - 0x35302
int32_t function_352a0(int32_t a1, int32_t a2) {
    // 0x352a0
    g4 = 0;
    int32_t v1 = g10; // 0x352a5
    g7 = a2;
    int32_t v2 = g6; // 0x352a9
    g6 = a1;
    if (a2 == 0) {
        // 0x352f7
        g6 = v2;
        g10 = v1;
        return 0;
    }
    int32_t v3 = (int32_t)*(char *)a1; // 0x352b1
    g4 = v3;
    int32_t v4 = a2 - 1; // 0x352b4
    g7 = v4;
    int32_t v5 = *(int32_t *)(4 * v3 + (int32_t)&g142); // 0x352b7
    g10 = v5;
    if (v4 == 0) {
        int32_t result = 256 * v5; // 0x352fd
        g4 = result;
        // 0x352f7
        g6 = v2;
        g10 = v1;
        return result;
    }
    int32_t v6 = v5; // 0x352e2
    int32_t v7; // 0x352f0
    int32_t v8; // 0x352e7
    while (true) {
        int32_t v9 = a1 + 2; // 0x352dd
        g4 = v9;
        g6 = v9;
        int32_t v10 = (int32_t)*(char *)(a1 + 1) ^ v6; // 0x352e2
        g9 = v10;
        v8 = *(int32_t *)(4 * v10 + (int32_t)&g142);
        g9 = v8;
        if (v4 == 1) {
            v7 = v6;
            // break -> 0x352f0
            break;
        }
        int32_t v11 = (int32_t)*(char *)v9 ^ v8; // 0x352cb
        g4 = v11;
        int32_t v12 = v4 - 2; // 0x352cd
        g7 = v12;
        int32_t v13 = *(int32_t *)(4 * v11 + (int32_t)&g142); // 0x352d0
        g10 = v13;
        if (v12 == 0) {
            v7 = v13;
            // break -> 0x352f0
            break;
        }
        v4 = v12;
        v6 = v13;
        a1 = v9;
    }
    int32_t result2 = 256 * v7 | v8; // 0x352f5
    g4 = result2;
    // 0x352f7
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x35310 - 0x353b7
int32_t function_35310(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x35313
    int32_t v2 = g10; // 0x35317
    g8 = a2;
    int32_t v3 = g6; // 0x3531b
    g9 = a1;
    int32_t v4 = a3 ^ a2; // 0x3531f
    g4 = v4;
    int32_t v5; // 0x3539f
    int32_t v6; // 0x35367
    int32_t v7; // 0x35361
    if (a2 > 3) {
        // 0x35326
        g6 = a1;
        g7 = a2;
        int32_t v8 = a1; // 0x35339
        uint32_t v9 = 0x5bd1e995 * *(int32_t *)v8; // 0x35330
        int32_t v10 = a2 - 4; // 0x35336
        g7 = v10;
        int32_t v11 = v8 + 4; // 0x35339
        g6 = v11;
        int32_t v12 = v9 / 0x1000000 ^ v9; // 0x35341
        g9 = v12;
        int32_t v13 = 0x5bd1e995 * v4; // 0x35343
        g10 = v13;
        int32_t v14 = 0x5bd1e995 * v12 ^ v13; // 0x3534f
        g4 = v14;
        while (v10 > 3) {
            // 0x35330
            v8 = v11;
            v9 = 0x5bd1e995 * *(int32_t *)v8;
            v10 -= 4;
            g7 = v10;
            v11 = v8 + 4;
            g6 = v11;
            v12 = v9 / 0x1000000 ^ v9;
            g9 = v12;
            v13 = 0x5bd1e995 * v14;
            g10 = v13;
            v14 = 0x5bd1e995 * v12 ^ v13;
            g4 = v14;
        }
        // 0x35356
        g6 = a1;
        uint32_t v15 = a2 - 4; // 0x35359
        uint32_t v16 = v15 / 4; // 0x3535e
        v7 = a1 + 4 + 4 * v16;
        g9 = v7;
        g7 = -v16;
        v6 = -4 * v16 + v15;
        g8 = v6;
        v5 = v14;
    } else {
        v5 = v4;
        v7 = a1;
        v6 = a2;
    }
    int32_t v17; // 0x353a8
    if (v6 == 2) {
        v17 = v5;
        goto lab_0x353a1;
    } else {
        if (v6 == 3) {
            int32_t v18 = 0x10000 * (int32_t)*(char *)(v7 + 2); // 0x3539c
            g7 = v18;
            int32_t v19 = v18 ^ v5; // 0x3539f
            g4 = v19;
            v17 = v19;
            goto lab_0x353a1;
        } else {
            if (v6 == 1) {
                goto lab_0x353aa;
            } else {
                goto lab_0x35379;
            }
        }
    }
  lab_0x353a1:;
    int32_t v20 = 256 * (int32_t)*(char *)(v7 + 1); // 0x353a5
    g7 = v20;
    int32_t v21 = v20 ^ v17; // 0x353a8
    g4 = v21;
    v5 = v21;
    goto lab_0x353aa;
  lab_0x353aa:;
    int32_t v22 = (int32_t)*(char *)v7 ^ v5; // 0x353ad
    g9 = v22;
    int32_t v23 = 0x5bd1e995 * v22; // 0x353af
    g4 = v23;
    v5 = v23;
    goto lab_0x35379;
  lab_0x35379:
    // 0x35379
    g6 = v3;
    int32_t v24 = 0x5bd1e995 * (v5 / 0x2000 ^ v5); // 0x35381
    g9 = v24;
    g10 = v2;
    g8 = v1;
    int32_t result = v24 / 0x8000 ^ v24; // 0x3538e
    g4 = result;
    return result;
}

// Address range: 0x353d3 - 0x35431
int32_t function_353d3(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x10408dc7); // 0x353d3
    *v1 = *v1 - 1;
    int32_t v2 = g4 + 16 & -16; // 0x353dc
    g4 = v2;
    int32_t v3 = g11 - v2; // 0x353df
    g10 = v3 + 27 & -16;
    int32_t v4 = g8; // 0x353e8
    int32_t v5; // 0x35419
    int32_t v6; // 0x3540e
    if (v4 >= 1) {
        // 0x353ec
        *(int32_t *)(g5 - 28) = v4;
        g7 = 0;
        int32_t v7 = g6; // 0x353f1
        g8 = v7;
        int32_t v8 = 0; // 0x35408
        int32_t v9 = (int32_t)*(char *)(v7 + v8); // 0x353f8
        int32_t v10 = v9 - 65; // 0x353fc
        g6 = v10;
        int32_t v11 = v9 + 32; // 0x353ff
        g9 = v11;
        int32_t v12 = (char)v10 < 26 ? v11 : v9; // 0x35405
        g4 = v12;
        *(char *)(g10 + v8) = (char)v12;
        int32_t v13 = g7 + 1; // 0x3540b
        g7 = v13;
        v6 = *(int32_t *)(g5 - 28);
        while (v6 != v13) {
            // 0x353f8
            v8 = v13;
            v9 = (int32_t)*(char *)(g8 + v8);
            v10 = v9 - 65;
            g6 = v10;
            v11 = v9 + 32;
            g9 = v11;
            v12 = (char)v10 < 26 ? v11 : v9;
            g4 = v12;
            *(char *)(g10 + v8) = (char)v12;
            v13 = g7 + 1;
            g7 = v13;
            v6 = *(int32_t *)(g5 - 28);
        }
        // 0x35413
        g8 = v6;
        v5 = g11;
    } else {
        v5 = v3;
        v6 = v4;
    }
    // 0x35416
    g4 = *(int32_t *)(g5 + 12);
    *(int32_t *)(v5 + 4) = v6;
    *(int32_t *)g11 = g10;
    *(int32_t *)(g11 + 8) = g4;
    int32_t result = function_35310((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x35424
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x35431 - 0x35557
int32_t function_35431(int32_t a1, int32_t a2, int32_t a3) {
    // 0x35431
    g4 = 0;
    int32_t v1 = g8; // 0x35445
    int32_t v2 = g10; // 0x35449
    int32_t v3 = g6; // 0x3544a
    g7 = a1;
    int32_t v4 = a3 ^ a2; // 0x3544e
    g9 = v4;
    int32_t v5; // 0x3553f
    int32_t v6; // 0x354da
    int32_t v7; // 0x354b8
    int32_t v8; // 0x354b2
    if (a2 > 7) {
        // 0x35457
        g10 = a2;
        int32_t v9 = a1; // 0x3547e
        uint32_t v10 = 0x5bd1e995 * *(int32_t *)v9; // 0x35460
        int32_t v11 = a2 - 8; // 0x35466
        g10 = v11;
        int32_t v12 = v10 / 0x1000000 ^ v10; // 0x3546e
        g6 = v12;
        int32_t v13 = 0x5bd1e995 * v4; // 0x35470
        g8 = v13;
        int32_t v14 = 0x5bd1e995 * v12 ^ v13; // 0x3547c
        g9 = v14;
        int32_t v15 = v9 + 8; // 0x35481
        g7 = v15;
        uint32_t v16 = 0x5bd1e995 * *(int32_t *)(v9 + 4); // 0x35484
        int32_t v17 = v16 / 0x1000000 ^ v16; // 0x3548f
        g6 = v17;
        int32_t v18 = 0; // 0x35491
        g8 = v18;
        int32_t v19 = 0x5bd1e995 * v17 ^ v18; // 0x3549d
        g4 = v19;
        while (v11 > 7) {
            // 0x35460
            v9 = v15;
            v10 = 0x5bd1e995 * *(int32_t *)v9;
            v11 -= 8;
            g10 = v11;
            v12 = v10 / 0x1000000 ^ v10;
            g6 = v12;
            v13 = 0x5bd1e995 * v14;
            g8 = v13;
            v14 = 0x5bd1e995 * v12 ^ v13;
            g9 = v14;
            v15 = v9 + 8;
            g7 = v15;
            v16 = 0x5bd1e995 * *(int32_t *)(v9 + 4);
            v17 = v16 / 0x1000000 ^ v16;
            g6 = v17;
            v18 = 0x5bd1e995 * v19;
            g8 = v18;
            v19 = 0x5bd1e995 * v17 ^ v18;
            g4 = v19;
        }
        // 0x354a4
        g8 = a1;
        int32_t v20 = a2 - 8; // 0x354aa
        g6 = v20;
        uint32_t v21 = v20 / 8; // 0x354af
        v8 = a1 + 8 + 8 * v21;
        g7 = v8;
        v7 = -8 * v21 + v20;
        g10 = v7;
        v5 = v19;
        v6 = v14;
    } else {
        v5 = 0;
        v6 = v4;
        v8 = a1;
        v7 = a2;
    }
    int32_t v22;
    int32_t v23; // 0x354c6
    int32_t v24; // 0x354e6
    if (v7 > 3) {
        // 0x354c4
        v23 = v8 + 4;
        g7 = v23;
        uint32_t v25 = 0x5bd1e995 * *(int32_t *)v8; // 0x354cd
        int32_t v26 = v25 / 0x1000000 ^ v25; // 0x354d8
        g6 = v26;
        int32_t v27 = 0x5bd1e995 * v6; // 0x354da
        g10 = v27;
        v24 = 0x5bd1e995 * v26 ^ v27;
        g9 = v24;
        v22 = v7 - 4;
    } else {
        v24 = v6;
        v23 = v8;
        v22 = v7;
    }
    int32_t v28; // 0x35548
    if (v22 == 2) {
        v28 = v5;
        goto lab_0x35541;
    } else {
        if (v22 == 3) {
            int32_t v29 = 0x10000 * (int32_t)*(char *)(v23 + 2); // 0x3553c
            g6 = v29;
            int32_t v30 = v29 ^ v5; // 0x3553f
            g4 = v30;
            v28 = v30;
            goto lab_0x35541;
        } else {
            if (v22 == 1) {
                goto lab_0x3554a;
            } else {
                goto lab_0x354fa;
            }
        }
    }
  lab_0x35541:;
    int32_t v31 = 256 * (int32_t)*(char *)(v23 + 1); // 0x35545
    g6 = v31;
    int32_t v32 = v31 ^ v28; // 0x35548
    g4 = v32;
    v5 = v32;
    goto lab_0x3554a;
  lab_0x3554a:;
    int32_t v33 = (int32_t)*(char *)v23 ^ v5; // 0x3554d
    g7 = v33;
    int32_t v34 = 0x5bd1e995 * v33; // 0x3554f
    g4 = v34;
    v5 = v34;
    goto lab_0x354fa;
  lab_0x354fa:;
    int32_t v35 = 0x5bd1e995 * (v5 / 0x40000 ^ v24); // 0x35501
    g7 = v35;
    uint32_t v36 = 0x5bd1e995 * (v35 / 0x400000 ^ v5); // 0x3550e
    int32_t v37 = 0x5bd1e995 * (v36 / 0x20000 ^ v35); // 0x3551b
    g9 = v37;
    g6 = v3;
    int32_t result = 0x5bd1e995 * (v37 / 0x80000 ^ v36); // 0x35529
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x35560 - 0x355bb
int32_t function_35560(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x35563
    g6 = a2;
    int32_t * v2 = (int32_t *)a2; // 0x3556a
    int32_t v3 = *v2; // 0x3556a
    g4 = v3;
    if (v3 != 0) {
        // 0x35570
        g6 = v1;
        return g4;
    }
    // 0x35580
    g4 = a1;
    *v2 = a1;
    if (a1 != 0) {
        int32_t v4 = g455; // 0x35597
        g4 = v4;
        g9 = v4 + 1;
        *(int32_t *)(8 * v4 + (int32_t)&g456) = g6;
        g455 = g9;
        g9 = g458;
        *(int32_t *)(8 * g4 + (int32_t)&g457) = g458;
    }
    // 0x35570
    g6 = v1;
    return g4;
}

// Address range: 0x355c0 - 0x35634
int32_t function_355c0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x355c3
    int32_t v2 = g10; // 0x355c4
    int32_t v3 = g6; // 0x355c5
    g4 = a1;
    g6 = a2;
    g10 = g455;
    *(int32_t *)a2 = a1;
    uint32_t v4 = g10; // 0x355e5
    if (v4 >= 1) {
        // 0x355e9
        g9 = 0;
        g7 = 0;
        g8 = 1;
        int32_t v5 = 0; // 0x35602
        int32_t v6 = *(int32_t *)(8 * v5 + (int32_t)&g456); // 0x355f8
        int32_t v7 = v6 == g6 ? 1 : 0; // 0x355ff
        g7 = v7;
        int32_t v8 = v5 + 1; // 0x35602
        g9 = v8;
        while (v8 != v4) {
            // 0x355f8
            v5 = v8;
            v6 = *(int32_t *)(8 * v5 + (int32_t)&g456);
            v7 = v6 == g6 ? 1 : v7;
            g7 = v7;
            v8 = v5 + 1;
            g9 = v8;
        }
        if ((char)v7 != 0) {
            // 0x3562c
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
    }
    // 0x3560d
    if (g4 != 0) {
        // 0x35611
        g4 = v4 + 1;
        *(int32_t *)(8 * v4 + (int32_t)&g456) = g6;
        g455 = g4;
        g4 = g458;
        *(int32_t *)(8 * g10 + (int32_t)&g457) = g458;
    }
    // 0x3562c
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x35640 - 0x35720
int32_t function_35640(int32_t a1, uint32_t a2) {
    int32_t v1 = g5; // 0x35640
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x35643
    int32_t v4 = g10; // 0x35644
    int32_t v5 = g6; // 0x35645
    int32_t result = g455; // 0x35649
    g4 = result;
    g10 = a1;
    g8 = a2;
    if (result < 0) {
        // 0x35715
        return result;
    }
    // 0x3565d
    g9 = 0;
    int32_t result3; // 0x356bc
    int32_t v6; // 0x356bb
    if (result != 0) {
        if (a2 >= 1) {
            int32_t v7 = 0; // 0x356e96
            int32_t result2; // 0x356f2
            while (true) {
                // 0x356c8
                g6 = 0;
                int32_t v8 = 0; // 0x356d0
                int32_t v9 = 8 * v8; // 0x356d0
                int32_t v10 = *(int32_t *)(v9 + (int32_t)&g150); // 0x356d0
                g4 = v10;
                int32_t v11 = *(int32_t *)(v9 + (int32_t)&g149); // 0x356db
                g4 = v11;
                g6 = v8 + 1;
                int32_t v12 = *(int32_t *)(g10 + 4 * v7); // 0x356e9
                g4 = v12;
                result2 = function_355c0(v12, v11, v10);
                g4 = result2;
                int32_t v13 = g6; // 0x356f7
                g9 = v7;
                while (v13 != 54) {
                    // 0x356d0
                    v8 = v13;
                    v9 = 8 * v8;
                    v10 = *(int32_t *)(v9 + (int32_t)&g150);
                    g4 = v10;
                    v11 = *(int32_t *)(v9 + (int32_t)&g149);
                    g4 = v11;
                    g6 = v8 + 1;
                    v12 = *(int32_t *)(g10 + 4 * v7);
                    g4 = v12;
                    result2 = function_355c0(v12, v11, v10);
                    g4 = result2;
                    v13 = g6;
                    g9 = v7;
                }
                int32_t v14 = v7 + 1; // 0x356ff
                g9 = v14;
                if (v14 == a2) {
                    // break -> 0x35706
                    break;
                }
                v7 = v14;
            }
            // 0x35706
            g458++;
            g6 = v5;
            g10 = v4;
            g8 = v3;
            g5 = v2;
            return result2;
        }
        result3 = result;
        v6 = v1;
    } else {
        if (a2 >= 1) {
            int32_t v15 = 0; // 0x356913
            int32_t v16; // 0x3569a
            while (true) {
                // 0x35670
                g6 = 0;
                int32_t v17 = 0; // 0x35678
                int32_t v18 = 8 * v17; // 0x35678
                int32_t v19 = *(int32_t *)(v18 + (int32_t)&g150); // 0x35678
                g4 = v19;
                int32_t v20 = *(int32_t *)(v18 + (int32_t)&g149); // 0x35683
                g4 = v20;
                g6 = v17 + 1;
                int32_t v21 = *(int32_t *)(g10 + 4 * v15); // 0x35691
                g4 = v21;
                v16 = function_35560(v21, v20, v19);
                g4 = v16;
                int32_t v22 = g6; // 0x3569f
                g9 = v15;
                while (v22 != 54) {
                    // 0x35678
                    v17 = v22;
                    v18 = 8 * v17;
                    v19 = *(int32_t *)(v18 + (int32_t)&g150);
                    g4 = v19;
                    v20 = *(int32_t *)(v18 + (int32_t)&g149);
                    g4 = v20;
                    g6 = v17 + 1;
                    v21 = *(int32_t *)(g10 + 4 * v15);
                    g4 = v21;
                    v16 = function_35560(v21, v20, v19);
                    g4 = v16;
                    v22 = g6;
                    g9 = v15;
                }
                int32_t v23 = v15 + 1; // 0x356a7
                g9 = v23;
                if (v23 == a2) {
                    // break -> 0x356ae
                    break;
                }
                v15 = v23;
            }
            // 0x356ae
            result3 = v16;
            v6 = v2;
        } else {
            result3 = result;
            v6 = v1;
        }
    }
    // 0x356ae
    g458++;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    g5 = v6;
    return result3;
}

// Address range: 0x35724 - 0x35734
int32_t function_35724(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0xa6ed805); // 0x35724
    *v1 = *v1 + 1;
    *(char *)g7 = (char)g4 + *(char *)&g7;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x35740 - 0x3578f
int32_t function_35740(void) {
    int32_t v1 = g6; // 0x35749
    int32_t v2 = g458 - 1; // 0x3574a
    g9 = v2;
    g458 = v2;
    if (v2 < 0) {
        // 0x3578c
        g6 = v1;
        return g4;
    }
    // 0x35757
    g7 = g455;
    if (g455 < 1) {
        // 0x3578c
        g6 = v1;
        return g4;
    }
    // 0x35761
    g4 = 0;
    int32_t v3 = 0; // 0x35768
    while (true) {
        int32_t v4 = 8 * v3; // 0x3576f
        if (v2 == *(int32_t *)(v4 + (int32_t)&g457)) {
            int32_t v5 = *(int32_t *)(v4 + (int32_t)&g456); // 0x35778
            g6 = v5;
            int32_t v6 = v3 + 1; // 0x3577f
            g4 = v6;
            *(int32_t *)v5 = 0;
            if (v6 == g455) {
                // break -> 0x3578c
                break;
            }
            // 0x35778
            v3 = g4;
            // continue -> 0x3576f
            continue;
        }
        int32_t v7 = v3 + 1; // 0x35768
        g4 = v7;
        if (v7 == g455) {
            // break -> 0x3578c
            break;
        }
        v3 = v7;
    }
    // 0x3578c
    g6 = v1;
    return g4;
}

// Address range: 0x35790 - 0x357a0
int32_t function_35790(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x35793
    int32_t v2 = g6; // 0x35795
    g6 = 0;
    g8 = a1;
    int32_t result = function_357a8(v2, g10, v1, g5); // 0x3579e
    g4 = result;
    return result;
}

// Address range: 0x357a0 - 0x357a8
int32_t function_357a0(void) {
    // 0x357a0
    g6++;
    return g4;
}

// Address range: 0x357a8 - 0x357b6
int32_t function_357a8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x357a8
    g10 = *(int32_t *)(8 * g6 + (int32_t)&g149);
    return g4;
}

// Address range: 0x357c7 - 0x357c8
int32_t function_357c7(void) {
    // 0x357c7
    return g4;
}

// Address range: 0x357e1 - 0x357e9
int32_t function_357e1(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x357e1
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x357f0 - 0x357fa
int32_t function_357f0(void) {
    // 0x357f0
    g4 = &g464;
    return &g464;
}

// Address range: 0x35800 - 0x35825
int32_t function_35800(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a2;
    int32_t result = function_2cc30(a2, "MATCHFRAMEWORK_001") == 0 ? a1 : 0; // 0x3581d
    g9 = result;
    g4 = result;
    return result;
}

// Address range: 0x35830 - 0x358aa
int32_t function_35830(void) {
    int32_t v1 = g6; // 0x35833
    g4 = function_4e950(v1, g5);
    int32_t v2 = *(int32_t *)&g276; // 0x3583c
    g9 = v2;
    if (v2 != 0) {
        // 0x35846
        g6 = (int32_t)&g276;
        int32_t v3 = (int32_t)&g276; // 0x3587d
        while (true) {
            char * v4 = (char *)(v3 + 12); // 0x35850
            int32_t v5; // 0x3588d
            if (*v4 != 0) {
                uint32_t v6 = *(int32_t *)(v3 + 4); // 0x35856
                g9 = v6;
                int32_t v7 = *(int32_t *)&g278; // 0x35859
                g4 = v7;
                int32_t v8 = *(int32_t *)(v3 + 8) + v7; // 0x3585e
                g4 = v8;
                if (v6 % 2 != 0) {
                    int32_t v9 = *(int32_t *)v8; // 0x35866
                    g7 = v9;
                    g9 = *(int32_t *)(v6 - 1 + v9);
                }
                // 0x3586c
                g9 = v7;
                g7 = v7;
                g4 = *(int32_t *)v3;
                *v4 = 0;
                v5 = g6;
            } else {
                v5 = v3;
            }
            int32_t v10 = v5 + 16; // 0x3588d
            g6 = v10;
            int32_t v11 = *(int32_t *)v10; // 0x35890
            g4 = v11;
            if (v11 == 0) {
                // break -> 0x35896
                break;
            }
            v3 = v10;
        }
    }
    // 0x35896
    g4 = function_78d90();
    g4 = function_22f50();
    g6 = v1;
    int32_t result = function_66d60(); // 0x358a5
    g4 = result;
    return result;
}

// Address range: 0x358b0 - 0x359c7
int32_t function_358b0(int32_t a1) {
    int32_t v1 = g6; // 0x358b3
    int32_t v2; // bp-16
    g6 = &v2;
    v2 = 0x359d0;
    g4 = a1;
    g463 = a1;
    g4 = function_66d50(&v2, 1);
    g4 = function_78d30(&v2, 1);
    function_22e90(0, 0);
    int32_t v3 = *(int32_t *)&g276; // 0x358fd
    g4 = v3;
    int32_t v4; // 0x35910
    if (v3 != 0) {
        // 0x35906
        g6 = (int32_t)&g276;
        v4 = (int32_t)&g276;
      lab_0x35919_2:
        while (true) {
          lab_0x35919:;
            char * v5 = (char *)(v4 + 12); // 0x35919
            if (*v5 != 0) {
                goto lab_0x35910;
            } else {
                if (v3 == 0) {
                    goto lab_0x35910;
                } else {
                    int32_t v6 = *(int32_t *)&g278; // 0x35931
                    g9 = v6;
                    g7 = v6;
                    g4 = *(int32_t *)v4;
                    *v5 = 1;
                    int32_t v7 = g6 + 16; // 0x3594c
                    g6 = v7;
                    int32_t v8 = *(int32_t *)v7; // 0x3594f
                    g4 = v8;
                    if (v8 == 0) {
                        // break -> 0x35958
                        break;
                    }
                    v3 = v8;
                    v4 = v7;
                    goto lab_0x35919;
                }
            }
        }
    }
  lab_0x35958:
    // 0x35958
    g463 = 0;
    g4 = function_75190(0x400ccccd, 0x400ccccd, 0, 2, 1, 1, 1, 1);
    function_4e5f0();
    int32_t v9 = (int32_t)g290; // 0x359ab
    g4 = v9;
    if (g290 != NULL) {
        // 0x359b4
        g4 = function_4a500(v9);
    }
    // 0x359bc
    g4 = 1;
    g6 = v1;
    return 1;
  lab_0x35910:;
    int32_t v10 = v4 + 16; // 0x35910
    g6 = v10;
    int32_t v11 = *(int32_t *)v10; // 0x35913
    g4 = v11;
    if (v11 == 0) {
        // break -> 0x35958
        goto lab_0x35958;
    }
    v3 = v11;
    v4 = v10;
    // continue -> 0x35919
    goto lab_0x35919_2;
}

// Address range: 0x359d0 - 0x35a2e
int32_t function_359d0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x359d6
    g6 = a2;
    int32_t v2 = g10; // 0x359dc
    g10 = a1;
    if (a2 != 0) {
        // 0x359e6
        *(int32_t *)a2 = 0;
    }
    // 0x359ec
    g4 = g463;
    if (g463 != 0) {
        // 0x35a02
        g6 = v1;
        g10 = v2;
        return g463;
    }
    int32_t result = function_62320(); // 0x35a10
    g4 = result;
    if (result != 0) {
        // 0x35a02
        g6 = v1;
        g10 = v2;
        return result;
    }
    int32_t result2; // 0x35a0b
    if (a2 != 0) {
        // 0x35a26
        *(int32_t *)a2 = 1;
        result2 = g4;
    } else {
        result2 = result;
    }
    // 0x35a02
    g6 = v1;
    g10 = v2;
    return result2;
}

// Address range: 0x35a30 - 0x35a35
int32_t function_35a30(void) {
    // 0x35a30
    return g4;
}

// Address range: 0x35a40 - 0x35a64
int32_t function_35a40(void) {
    int32_t v1 = function_2cb40((int32_t)&g465); // 0x35a4f
    g4 = v1;
    if (v1 == 0) {
        // 0x35a68
        return 0;
    }
    // 0x35a58
    g4 = &g465;
    return &g465;
}

// Address range: 0x35a6e - 0x35a6f
int32_t function_35a6e(void) {
    // 0x35a6e
    return g4;
}

// Address range: 0x35aab - 0x35aac
int32_t function_35aab(void) {
    // 0x35aab
    return g4;
}

// Address range: 0x35acf - 0x35b1d
int32_t function_35acf(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g5 - 0x38b38b40); // 0x35acf
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x35ad6
    unsigned char v3 = (char)v2 & 4 | 1; // 0x35ad8
    int32_t v4 = (int32_t)v3 | v2 & -256; // 0x35ad8
    g4 = v4;
    char * v5 = (char *)v4; // 0x35ada
    *v5 = *v5 + v3;
    g4 = function_2eb30((int32_t)&g465, (int32_t)&g870);
    int32_t v6 = function_2cb40((int32_t)&g465); // 0x35aef
    g4 = v6;
    int32_t v7 = g6 + v6; // 0x35b00
    g6 = v7;
    int32_t v8 = (int32_t)&g19 - v6; // 0x35b02
    g9 = v8;
    function_2d970(&g465, v7, v8);
    g4 = &g465;
    g6 = a1;
    g10 = a2;
    return &g465;
}

// Address range: 0x35b34 - 0x35b3d
int32_t function_35b34(void) {
    // 0x35b34
    return g4;
}

// Address range: 0x35b40 - 0x35ba3
int32_t function_35b40(void) {
    int32_t v1 = g6; // 0x35b43
    g6 = 0;
    int32_t v2 = *(int32_t *)&g278; // 0x35b49
    g4 = v2;
    int32_t result; // 0x35b6d
    if (v2 == 0) {
        result = 0;
        // 0x35b6a
        g4 = result;
        g6 = v1;
        return result;
    }
    int32_t v3 = (int32_t)g283; // 0x35b52
    g4 = v3;
    if (g283 == NULL) {
        result = 0;
        // 0x35b6a
        g4 = result;
        g6 = v1;
        return result;
    }
    // 0x35b59
    g9 = *(int32_t *)g283;
    g6 = 1;
    if ((char)v3 == 0) {
        // 0x35b8c
        g4 = v3;
        g9 = *(int32_t *)g283;
        g4 = v3;
        g9 = *(int32_t *)g283;
        g6 = v3;
        result = v3;
    } else {
        result = 1;
    }
    // 0x35b6a
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x35bb0 - 0x35bbb
int32_t function_35bb0(int32_t a1) {
    // 0x35bb0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 80); // 0x35bb7
    g4 = result;
    return result;
}

// Address range: 0x35bc0 - 0x35bcb
int32_t function_35bc0(int32_t a1) {
    // 0x35bc0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 84); // 0x35bc7
    g4 = result;
    return result;
}

// Address range: 0x35bd0 - 0x35bdb
int32_t function_35bd0(int32_t a1) {
    // 0x35bd0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 88); // 0x35bd7
    g4 = result;
    return result;
}

// Address range: 0x35be0 - 0x35beb
int32_t function_35be0(int32_t a1) {
    // 0x35be0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 92); // 0x35be7
    g4 = result;
    return result;
}

// Address range: 0x35bf0 - 0x35bfb
int32_t function_35bf0(int32_t a1) {
    // 0x35bf0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 96); // 0x35bf7
    g4 = result;
    return result;
}

// Address range: 0x35c00 - 0x35c0b
int32_t function_35c00(int32_t a1) {
    // 0x35c00
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 104); // 0x35c07
    g4 = result;
    return result;
}

// Address range: 0x35c10 - 0x35c17
int32_t function_35c10(void) {
    // 0x35c10
    g4 = 0;
    return 0;
}

// Address range: 0x35c20 - 0x35c2a
int32_t function_35c20(void) {
    // 0x35c20
    g4 = 2;
    return 2;
}

// Address range: 0x35c30 - 0x35c45
int32_t function_35c30(int32_t a1, int32_t a2) {
    // 0x35c30
    g4 = a1;
    g9 = a2;
    int32_t result = function_35790(a1, a2); // 0x35c40
    g4 = result;
    return result;
}

// Address range: 0x35c50 - 0x35c9b
int32_t function_35c50(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g8; // 0x35c53
    int32_t v3 = g10; // 0x35c54
    int32_t v4 = g6; // 0x35c55
    int32_t v5 = *(int32_t *)&g279; // 0x35c59
    g4 = v5;
    g8 = a1;
    g10 = a2;
    if (v5 == 0) {
        // 0x35c93
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    // 0x35c68
    g6 = (int32_t)&g279;
    int32_t result; // 0x35c8d
    while (true) {
        int32_t v6 = function_2cc30(v5, (char *)a2); // 0x35c77
        g4 = v6;
        if (v6 == 0) {
            int32_t v7 = *(int32_t *)(g6 + 4); // 0x35c80
            g4 = v7;
            g9 = a3;
            *(int32_t *)(v7 + 80 + g8) = a3;
        }
        int32_t v8 = g6 + 8; // 0x35c8a
        g6 = v8;
        result = *(int32_t *)v8;
        g4 = result;
        if (result == 0) {
            // break -> 0x35c93
            break;
        }
        // 0x35c8a
        v5 = result;
        a2 = g10;
    }
    // 0x35c93
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x35ca0 - 0x35d5d
int32_t function_35ca0(int32_t a1) {
    int32_t v1 = g6; // 0x35ca3
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g155;
    int32_t v2 = g6; // 0x35cb0
    g4 = v2 + 24;
    *(int32_t *)(v2 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 32;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    g4 = function_676f0(g4, 0, 32, 1);
    int32_t v3 = g6; // 0x35cf6
    int32_t v4 = v3 + 80; // 0x35cf6
    g9 = v4;
    g7 = 28;
    int32_t v5; // 0x35d49
    int32_t v6; // 0x35d47
    if (v4 % 2 != 0) {
        // 0x35d40
        g9 = v3 + 81;
        *(char *)v4 = 0;
        v6 = g7 & -256 | 27;
        g7 = v6;
        v5 = g9;
        if ((v5 & 2) == 0) {
            goto lab_0x35d08;
        } else {
            goto lab_0x35d50;
        }
    } else {
        if ((v4 & 2) != 0) {
            v5 = v4;
            goto lab_0x35d50;
        } else {
            v5 = v4;
            v6 = 28;
            goto lab_0x35d08;
        }
    }
  lab_0x35d08:
    // 0x35d08
    g4 = 0;
    g6 = v6 & -4;
    *(int32_t *)v5 = 0;
    int32_t v7 = g4 + 4; // 0x35d16
    g4 = v7;
    int32_t v8 = g9;
    while (v7 < g6) {
        // 0x35d0f
        *(int32_t *)(v8 + v7) = 0;
        v7 = g4 + 4;
        g4 = v7;
        v8 = g9;
    }
    int32_t v9 = v8 + v7; // 0x35d1d
    g9 = v9;
    int32_t v10 = g7; // 0x35d1f
    int32_t v11; // 0x35d2c
    int32_t v12; // 0x35d29
    if ((v10 & 2) != 0) {
        // 0x35d24
        *(int16_t *)v9 = 0;
        v12 = g9 + 2;
        g9 = v12;
        v11 = g7;
    } else {
        v12 = v9;
        v11 = v10;
    }
    int32_t v13 = v11 % 2; // 0x35d2c
    g7 = v13;
    if (v13 != 0) {
        // 0x35d31
        *(char *)v12 = 0;
    }
    // 0x35d34
    g6 = v1;
    return g4;
  lab_0x35d50:
    // 0x35d50
    *(int16_t *)v5 = 0;
    int32_t v14 = g7 - 2; // 0x35d55
    g7 = v14;
    int32_t v15 = g9 + 2; // 0x35d58
    g9 = v15;
    v5 = v15;
    v6 = v14;
    goto lab_0x35d08;
}

// Address range: 0x35d5e - 0x35d5f
int32_t function_35d5e(void) {
    // 0x35d5e
    return g4;
}

// Address range: 0x35de5 - 0x35ecc
int32_t function_35de5(int32_t a1, int32_t a2, int32_t a3) {
    // 0x35de5
    g6 += 4;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_36030(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x35df3
    g4 = v1;
    int32_t v2 = function_7ab57(v1, (int32_t)&g870); // 0x35df9
    g4 = v2;
    g6 += 4;
    *(int32_t *)(g5 - 12) = v2;
    g4 = function_35ff0(g6);
    int32_t v3 = *(int32_t *)(g5 - 12); // 0x35e0c
    g4 = v3;
    int32_t result = function_7ab57(v3, (int32_t)&g870); // 0x35e12
    g4 = result;
    int32_t v4 = g5; // bp-4
    g5 = &v4;
    int32_t v5 = g10; // 0x35e26
    g10 = a3;
    int32_t v6 = g6; // 0x35e2c
    g6 = a1;
    int32_t v7 = g8; // 0x35e32
    g8 = a2;
    if (a3 == 0) {
        // 0x35e3c
        g6 = v6;
        g10 = v5;
        g8 = v7;
        return result;
    }
    if (a2 == 0) {
        // 0x35e3c
        g6 = v6;
        g10 = v5;
        g8 = v7;
        return result;
    }
    int32_t v8 = a1 + 4; // 0x35e54
    int32_t v9; // bp-30
    g4 = &v9;
    int32_t v10 = a1 + 24; // 0x35e61
    g9 = v10;
    function_67bb0(&v9, v10, a2);
    int32_t v11 = v9 % 0x10000; // 0x35e70
    g4 = v11;
    int32_t v12 = g6; // 0x35e77
    int32_t v13; // 0x35e94
    if (v11 >= *(int32_t *)(v12 + 16)) {
        // 0x35e7c
        g9 = v8;
        function_36160(v8, v11 + 1);
        g4 = v11;
        v13 = g6;
    } else {
        v13 = v12;
    }
    int32_t v14 = *(int32_t *)(v13 + 4); // 0x35e94
    g9 = v14;
    int32_t v15 = v14 + 8 * v11; // 0x35e97
    g4 = v15;
    int32_t v16 = *(int32_t *)(v15 + 4); // 0x35e9a
    g9 = v16;
    int32_t v17; // 0x35ea4
    if (v16 < 1) {
        // 0x35ec8
        *(int32_t *)v15 = a3;
        v17 = g4;
    } else {
        v17 = v15;
    }
    int32_t v18 = v16 + 1; // 0x35ea1
    g9 = v18;
    *(int32_t *)(v17 + 4) = v18;
    int32_t result2 = function_35c50(g6, a2, a3); // 0x35eb2
    g4 = result2;
    g6 = v6;
    g10 = v5;
    g8 = v7;
    return result2;
}

// Address range: 0x35ed0 - 0x35f3b
int32_t function_35ed0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x35ed9
    int32_t v3; // bp-30
    g4 = &v3;
    g6 = a1;
    int32_t v4 = g10; // 0x35ee2
    int32_t v5 = g8; // 0x35ee5
    int32_t v6 = a1 + 24; // 0x35eef
    g9 = v6;
    g8 = a1 + 4;
    g4 = function_67bb0(&v3, v6, a2);
    int32_t v7 = v3 % 0x10000; // 0x35efe
    g10 = v7;
    int32_t v8 = g6; // 0x35f05
    int32_t v9; // 0x35f19
    int32_t v10; // 0x35f22
    if (v7 >= *(int32_t *)(v8 + 16)) {
        int32_t v11 = v7 + 1; // 0x35f0a
        g4 = v11;
        g4 = function_36160(g8, v11);
        v10 = g6;
        v9 = g10;
    } else {
        v10 = v8;
        v9 = v7;
    }
    int32_t v12 = 8 * v9; // 0x35f19
    g9 = v12;
    g4 = 0;
    int32_t v13 = *(int32_t *)(v10 + 4) + v12; // 0x35f22
    g9 = v13;
    uint32_t v14 = *(int32_t *)(v13 + 4); // 0x35f25
    g7 = v14;
    int32_t result; // 0x35f2c
    if (v14 >= 1) {
        // 0x35f2c
        result = *(int32_t *)v13;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x35f2e
    g6 = v2;
    g10 = v4;
    g8 = v5;
    return result;
}

// Address range: 0x35f40 - 0x35ff0
int32_t function_35f40(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x35f46
    g8 = a3;
    int32_t v2 = g6; // 0x35f4c
    g6 = a1;
    int32_t v3 = g10; // 0x35f52
    g10 = a2;
    if (a3 == 0) {
        // 0x35f5c
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return g4;
    }
    if (a2 == 0) {
        // 0x35f5c
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return g4;
    }
    int32_t v4 = a1 + 4; // 0x35f74
    int32_t v5; // bp-30
    g4 = &v5;
    int32_t v6 = a1 + 24; // 0x35f81
    g9 = v6;
    g4 = function_67bb0(&v5, v6, a2);
    int32_t v7 = v5 % 0x10000; // 0x35f90
    g8 = v7;
    int32_t v8 = g6; // 0x35f97
    int32_t v9; // 0x35fae
    int32_t v10; // 0x35fb5
    if (v7 >= *(int32_t *)(v8 + 16)) {
        // 0x35f9c
        g4 = v4;
        g4 = function_36160(v4, v7 + 1);
        v10 = g6;
        v9 = g8;
    } else {
        v10 = v8;
        v9 = v7;
    }
    int32_t v11 = 8 * v9; // 0x35fae
    g4 = v11;
    int32_t v12 = *(int32_t *)(v10 + 4) + v11; // 0x35fb5
    g4 = v12;
    int32_t * v13 = (int32_t *)(v12 + 4); // 0x35fb8
    int32_t v14 = *v13; // 0x35fb8
    g9 = v14;
    if (v14 < 1) {
        // 0x35f5c
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return g4;
    }
    int32_t v15 = v14 - 1; // 0x35fbf
    g9 = v15;
    *v13 = v15;
    if (v15 != 0) {
        // 0x35f5c
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return g4;
    }
    // 0x35fc9
    *(int32_t *)g4 = 0;
    int32_t result = function_35c50(g6, a2, 0); // 0x35fde
    g4 = result;
    g6 = v2;
    g10 = v3;
    g8 = v1;
    return result;
}

// Address range: 0x35ff0 - 0x36007
int32_t function_35ff0(int32_t a1) {
    // 0x35ff0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x35ffa
    g4 = v1;
    int32_t v2; // 0x36001
    if (v1 < 0) {
        // bb
        g4 = function_36026((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x36001
    g4 = v3;
    int32_t result; // 0x36005
    if (v3 == 0) {
        // bb7
        result = function_3601f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x36007
    return result;
}

// Address range: 0x3601f - 0x36026
int32_t function_3601f(void) {
    // 0x3601f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x36026 - 0x3602c
int32_t function_36026(int32_t a1, int32_t a2) {
    // 0x36026
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x36030 - 0x3604e
int32_t function_36030(int32_t a1) {
    // 0x36030
    g6 = a1;
    g9 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x36044
    g4 = result;
    return result;
}

// Address range: 0x36089 - 0x36094
int32_t function_36089(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x489f445); // 0x36089
    *v1 = *v1 - 1;
    int32_t result = g4 & -24; // 0x3608f
    g4 = result;
    return result;
}

// Address range: 0x360a0 - 0x360f0
int32_t function_360a0(int32_t a1, int32_t a2) {
    // 0x360a0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x360ab
    int64_t v2 = v1; // 0x360ab
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x360b2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x360b8
    g7 = v4;
    int32_t v5; // 0x360d8
    if (v1 == 0) {
        // bb
        g4 = function_36118();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x360be
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x360c6
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x360cb
    g4 = v8;
    int32_t v9; // 0x360e9
    if (v5 > v8) {
        // 0x360d2
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x360d8
        int32_t v11 = v10 < 0; // 0x360dc
        int32_t v12 = (v11 + v10) / 2; // 0x360e1
        while (v5 > v12) {
            // 0x360d8
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x360e7
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x360e7
    int32_t v14 = *(int32_t *)v13; // 0x360e7
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x360ee
    if (v14 == 0) {
        // bb20
        result = function_3613f();
        g4 = result;
    } else {
        // 0x360e7
        result = g4;
    }
    // 0x360f0
    return result;
}

// Address range: 0x36118 - 0x3613f
int32_t function_36118(void) {
    int32_t v1 = g4; // 0x36118
    g9 = 4;
    int32_t v2 = v1 == 0 ? 4 : v1; // 0x3611f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x36130
    while (g7 > v3) {
        // 0x36130
        v3 *= 2;
    }
    // 0x36136
    g4 = v3;
    int32_t v4 = g6; // 0x36136
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x3613f - 0x36140
int32_t function_3613f(void) {
    // 0x3613f
    return g4;
}

// Address range: 0x36160 - 0x36219
int32_t function_36160(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x36163
    int32_t v2 = g10; // 0x36164
    int32_t v3 = g6; // 0x36165
    g6 = a1;
    g4 = a2;
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x3616f
    g8 = v4;
    if (v4 >= a2) {
        // 0x361cd
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v5 = a2 - v4; // 0x36178
    g10 = v5;
    if (v5 == 0) {
        // 0x361cd
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v6 = *(int32_t *)(a1 + 4); // 0x3617c
    g7 = v6;
    g9 = v4;
    int32_t v7 = a2 - v6; // 0x36181
    int32_t v8; // 0x361eb
    int32_t v9; // 0x361eb
    if (v6 < a2) {
        // 0x361d8
        g9 = v7;
        g4 = function_360a0(a1, v7);
        v8 = g6;
        v9 = *(int32_t *)(v8 + 12);
        g9 = v9;
        g4 = a2;
    } else {
        v8 = a1;
        v9 = v4;
    }
    int32_t v10 = v9 + v5; // 0x36185
    g9 = v10;
    g7 = *(int32_t *)v8;
    *(int32_t *)(v8 + 12) = v10;
    int32_t v11 = g9 - g8 - v5; // 0x3618e
    g9 = v11;
    *(int32_t *)(g6 + 16) = g7;
    if (v11 >= 0 == (v11 != 0)) {
        if (v5 < 0) {
            // 0x361cd
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        int32_t v12 = g7; // 0x361fe
        int32_t v13 = 8 * g4 + v12; // 0x361fe
        g4 = v13;
        int32_t v14 = 8 * g8 + v12; // 0x36208
        g9 = v14;
        g4 = function_2cb20(v13, v14, 8 * v11);
    } else {
        if (v5 < 0) {
            // 0x361cd
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
    }
    int32_t v15 = 8 * g8; // 0x361a3
    g8 = v15;
    g4 = 0;
    g10 = v5;
    int32_t v16 = v5; // 0x361c98
    int32_t v17 = 0; // 0x361c35
    while (true) {
        // 0x361b0
        g9 = v15;
        int32_t v18 = *(int32_t *)g6 + v15; // 0x361b2
        g9 = v18;
        int32_t v19; // 0x361c3
        int32_t v20; // 0x361c6
        int32_t v21; // 0x361c9
        if (v18 != 0) {
            // 0x361b6
            *(int32_t *)v18 = 0;
            *(int32_t *)(g9 + 4) = 0;
            v21 = g10;
            v20 = g8;
            v19 = g4;
        } else {
            v21 = v16;
            v20 = v15;
            v19 = v17;
        }
        int32_t v22 = v19 + 1; // 0x361c3
        g4 = v22;
        int32_t v23 = v20 + 8; // 0x361c6
        g8 = v23;
        if (v21 <= v22) {
            // break -> 0x361cd
            break;
        }
        v16 = v21;
        v17 = v22;
        v15 = v23;
    }
    // 0x361cd
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x36220 - 0x362a3
int32_t function_36220(void) {
    // 0x36220
    g472 = 0;
    int32_t result = g473 | g474; // 0x36233
    g4 = result;
    if (result == 0) {
        // 0x3623b
        return result;
    }
    int32_t v1 = (int32_t)g283; // 0x3624d
    g4 = v1;
    g9 = *(int32_t *)g283;
    if ((char)v1 != 0) {
        // bb
        g4 = function_363e0((int32_t)&g870, (int32_t)&g870);
    }
    int32_t v2 = *(int32_t *)0xa402c; // 0x36260
    g4 = v2;
    if (v2 != 0) {
        // 0x36269
        if (*(char *)(v2 + 64) != 0) {
            // bb11
            g4 = function_363e0((int32_t)&g870, (int32_t)&g870);
        }
    }
    // 0x36273
    int32_t result2; // 0x36289
    if (g544 != 0) {
        // 0x36289
        result2 = g473;
        g4 = result2;
        g9 = g474;
        return result2;
    }
    // 0x3627c
    if ((g469 & 2) != 0) {
        // bb12
        g4 = function_363e0((int32_t)&g870, (int32_t)&g870);
    }
    // 0x36289
    result2 = g473;
    g4 = result2;
    g9 = g474;
    return result2;
}

// Address range: 0x362c7 - 0x362c8
int32_t function_362c7(void) {
    // 0x362c7
    return g4;
}

// Address range: 0x36312 - 0x3632c
int32_t function_36312(int32_t a1) {
    char * v1 = (char *)(g4 - 0x38fff58f); // 0x36312
    *v1 = (char)(g7 / 256) | *v1;
    int32_t v2 = g4 & -252; // 0x36319
    g4 = v2;
    int32_t v3 = g7; // 0x3631c
    unsigned char v4 = (char)v3 | *(char *)v2; // 0x3631c
    int32_t v5 = (int32_t)v4 | v3 & -256; // 0x3631c
    g7 = v5;
    char * v6 = (char *)(v5 + 0x79e8241c); // 0x3631e
    unsigned char v7 = *v6; // 0x3631e
    unsigned char v8 = v7 + v4; // 0x3631e
    *v6 = v8;
    uint32_t v9 = g6; // 0x36324
    unsigned char v10 = (char)(2 * v9 / 256); // 0x36324
    g6 = 256 * (int32_t)(v10 | (char)(v8 < v7)) | v9 & -0xff01;
    return g4;
}

// Address range: 0x3635c - 0x363e0
int32_t function_3635c(void) {
    // 0x3635c
    g8++;
    int32_t v1 = g4; // 0x3635f
    unsigned char v2 = (char)v1 & 8; // 0x3635f
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x3635f
    g4 = v3;
    char * v4 = (char *)v3; // 0x36361
    *v4 = *v4 + v2;
    int32_t v5 = g4; // 0x36363
    char * v6 = (char *)v5; // 0x36363
    *v6 = *v6 + (char)v5;
    int32_t v7 = function_2a500("settings", " system {  network LIVE  }  options {  action joinsession  } "); // 0x36374
    g9 = g474;
    g6 = v7;
    int32_t v8 = g473; // 0x36389
    g4 = v8;
    g4 = function_27600(v7, "options/sessionid", v8, g474);
    function_2cb00(&g473, 0, 8);
    g4 = (int32_t)g450;
    g9 = *(int32_t *)g450;
    int32_t result = function_28600(v7); // 0x363d6
    g4 = result;
    return result;
}

// Address range: 0x363e0 - 0x363ed
int32_t function_363e0(int32_t a1, int32_t a2) {
    // 0x363e0
    g472 = 1;
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x363fc - 0x36401
int32_t function_363fc(void) {
    // 0x363fc
    return g4;
}

// Address range: 0x36401 - 0x364f2
int32_t function_36401(int32_t a1, int32_t a2) {
    // 0x36401
    int32_t v1; // ebp
    *(int32_t *)(v1 - 12) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 12); // 0x3640c
    g4 = v2;
    int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x36412
    g4 = v3;
    int32_t v4; // 0x36426
    if (g6 != 0) {
        // 0x3641b
        *(int32_t *)(g5 - 12) = v3;
        g4 = function_28600(g6);
        v4 = *(int32_t *)(g5 - 12);
        g4 = v4;
    } else {
        v4 = v3;
    }
    // 0x36429
    g4 = function_7ab57(v4, (int32_t)&g870);
    g9 = 0;
    g7 = 0;
    int32_t v5 = g10; // 0x36447
    int32_t v6 = g6; // 0x36448
    g10 = a2;
    g6 = a1;
    int32_t v7 = *(int32_t *)(a2 + 8); // 0x36452
    g4 = v7;
    int32_t v8 = *(int32_t *)(a2 + 12) & v7; // 0x36455
    g4 = v8;
    char v9; // 0x36461
    int32_t v10; // 0x36467
    int32_t v11; // 0x3646d
    if (v8 == -1) {
        // bb
        g4 = function_365b8();
        v11 = g6;
        v10 = g7;
        v9 = g9;
    } else {
        v11 = a1;
        v10 = 0;
        v9 = 0;
    }
    // 0x36461
    g469 = v9;
    g470 = v10;
    *(int32_t *)(v11 + 24) = 0;
    *(char *)(g6 + 28) = 0;
    *(char *)(g6 + 29) = 0;
    *(char *)(g6 + 30) = 0;
    *(char *)(g6 + 36) = 0;
    *(char *)(g6 + 37) = 0;
    *(char *)(g6 + 38) = 0;
    *(char *)(g6 + 31) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(char *)(g6 + 39) = 0;
    int32_t v12 = g10; // 0x3649b
    int32_t result = *(int32_t *)v12; // 0x3649b
    g4 = result;
    g472 = 0;
    int32_t v13 = *(int32_t *)(v12 + 4); // 0x364a4
    g473 = result;
    g474 = v13;
    int32_t v14 = v13 | result; // 0x364b2
    g9 = v14;
    if (v14 == 0) {
        // 0x364b6
        g6 = v6;
        g10 = v5;
        return result;
    }
    int32_t v15 = (int32_t)g283; // 0x364c5
    g4 = v15;
    g9 = *(int32_t *)g283;
    if ((char)v15 != 0) {
        int32_t v16 = function_365c8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x364d2
        g4 = v16;
    }
    // 0x364d8
    g4 = g297;
    if (g297 == 0) {
        // 0x364eb
        return 0;
    }
    // 0x364e1
    int32_t result2; // 0x364e5
    if (*(char *)(g297 + 64) != 0) {
        // bb243
        result2 = function_365c8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result2;
    } else {
        result2 = g297;
    }
    // 0x364eb
    return result2;
}

// Address range: 0x36522 - 0x36523
int32_t function_36522(void) {
    // 0x36522
    return g4;
}

// Address range: 0x3656d - 0x36587
int32_t function_3656d(int32_t a1) {
    char * v1 = (char *)(g4 - 0x38fff58f); // 0x3656d
    *v1 = (char)(g7 / 256) | *v1;
    int32_t v2 = g4 & -252; // 0x36574
    g4 = v2;
    int32_t v3 = g7; // 0x36577
    unsigned char v4 = (char)v3 | *(char *)v2; // 0x36577
    int32_t v5 = (int32_t)v4 | v3 & -256; // 0x36577
    g7 = v5;
    char * v6 = (char *)(v5 + 0x1ee8241c); // 0x36579
    unsigned char v7 = *v6; // 0x36579
    unsigned char v8 = v7 + v4; // 0x36579
    *v6 = v8;
    uint32_t v9 = g6; // 0x3657f
    unsigned char v10 = (char)(2 * v9 / 256); // 0x3657f
    g6 = 256 * (int32_t)(v10 | (char)(v8 < v7)) | v9 & -0xff01;
    return g4;
}

// Address range: 0x365a7 - 0x365b3
int32_t function_365a7(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b10c4); // 0x365a7
    *v1 = *v1 + 1;
    g5 = a1;
    int32_t result = function_36220(); // 0x365ae
    g4 = result;
    return result;
}

// Address range: 0x365b8 - 0x365c4
int32_t function_365b8(void) {
    // 0x365b8
    g9 = 2;
    g7 = 0;
    return g4;
}

// Address range: 0x365c8 - 0x365e6
int32_t function_365c8(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x365c8
    g4 = v1;
    *(int32_t *)(g6 + 24) = v1;
    int32_t v2 = *(int32_t *)(g10 + 4); // 0x365cd
    g4 = v2;
    *(int32_t *)(g6 + 28) = v2;
    int32_t v3 = *(int32_t *)(g10 + 8); // 0x365d3
    g4 = v3;
    *(int32_t *)(g6 + 32) = v3;
    int32_t v4 = *(int32_t *)(g10 + 12); // 0x365d9
    g4 = v4;
    *(int32_t *)(g6 + 36) = v4;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x36620 - 0x36621
int32_t function_36620(int32_t * a1) {
    // 0x36620
    return g4;
}

// Address range: 0x36634 - 0x36635
int32_t function_36634(void) {
    // 0x36634
    return g4;
}

// Address range: 0x36654 - 0x3665b
int32_t function_36654(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x5d5b14c4); // 0x36654
    *v1 = *v1 + 1;
    return g4;
}

// Address range: 0x36668 - 0x3666a
int32_t function_36668(void) {
    int32_t result = function_36634(); // 0x36668
    g4 = result;
    return result;
}

// Address range: 0x36670 - 0x3668c
int32_t function_36670(int32_t a1) {
    // 0x36670
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g151;
    *(int32_t *)(g4 + 4) = (int32_t)&g152;
    *(int32_t *)(g4 + 8) = 0;
    return g4;
}

// Address range: 0x36690 - 0x366a5
int32_t function_36690(int32_t a1) {
    // 0x36690
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g151;
    *(int32_t *)(g4 + 4) = (int32_t)&g152;
    return g4;
}

// Address range: 0x366b0 - 0x366dc
int32_t function_366b0(void) {
    int32_t v1; // ebp
    int32_t result = function_1fc50(v1); // 0x366b6
    g4 = result;
    if (result != 1) {
        // 0x366c0
        return result;
    }
    // 0x366c8
    function_36620(&g468);
    g4 = result;
    return result;
}

// Address range: 0x366e0 - 0x36723
int32_t function_366e0(void) {
    // 0x366e0
    g4 = g297;
    g4 = function_5b130(g297);
    function_1fc70();
    int32_t v1 = *(int32_t *)&g291; // 0x366f8
    g4 = v1;
    g9 = v1;
    int32_t result = *(int32_t *)0xa401c; // 0x3670c
    g4 = result;
    g9 = *(int32_t *)result;
    return result;
}

// Address range: 0x36730 - 0x3673a
int32_t function_36730(void) {
    int32_t result = *(int32_t *)&g278; // 0x36731
    g4 = result;
    return result;
}

// Address range: 0x36740 - 0x3674a
int32_t function_36740(void) {
    // 0x36740
    g4 = g297;
    return g297;
}

// Address range: 0x36750 - 0x3675a
int32_t function_36750(void) {
    int32_t result = g337; // 0x36751
    g4 = result;
    return result;
}

// Address range: 0x36760 - 0x3676a
int32_t function_36760(void) {
    int32_t result = *(int32_t *)&g252; // 0x36761
    g4 = result;
    return result;
}

// Address range: 0x36770 - 0x3677a
int32_t function_36770(void) {
    int32_t result = *(int32_t *)&g285; // 0x36771
    g4 = result;
    return result;
}

// Address range: 0x36780 - 0x3678a
int32_t function_36780(void) {
    int32_t result = *(int32_t *)0xa4024; // 0x36781
    g4 = result;
    return result;
}

// Address range: 0x36790 - 0x367a6
int32_t function_36790(int32_t a1) {
    // 0x36790
    if (g472 == 0) {
        // 0x3679c
        return g4;
    }
    int32_t result = function_36220(); // 0x367a1
    g4 = result;
    return result;
}

// Address range: 0x367b0 - 0x367b5
int32_t function_367b0(void) {
    // 0x367b0
    return g4;
}

// Address range: 0x367c0 - 0x3688c
int32_t function_367c0(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g5; // 0x367c0
    g9 = v1;
    char * v3 = (char *)(v1 + 30); // 0x367c9
    unsigned char v4 = *v3; // 0x367c9
    int32_t result = v4; // 0x367c9
    g4 = result;
    int32_t v5 = result & 240; // 0x367cf
    char v6 = v5; // 0x367cf
    g7 = v5;
    if (v5 == 0) {
        // 0x367db
        g5 = v2;
        return result;
    }
    if (v4 >= 176) {
        // 0x367db
        g5 = v2;
        return result;
    }
    int32_t result2 = (int32_t)*(char *)(v1 + 31) - 1; // 0x367e4
    g4 = result2;
    if ((char)result2 >= 4) {
        // 0x367db
        g5 = v2;
        return result2;
    }
    int32_t v7; // bp-28
    int32_t result4; // 0x36815
    if (v6 == 16) {
        int32_t v8 = *(int32_t *)(v1 + 24); // 0x36838
        g4 = v8;
        if (v8 == 0) {
            // 0x367db
            g5 = v2;
            return 0;
        }
        int32_t v9 = (int32_t)*(char *)(v1 + 29); // 0x3683f
        g7 = v9;
        int32_t v10 = (int32_t)*(char *)(v1 + 28); // 0x36843
        g4 = v10;
        int32_t v11 = v10 | 256 * v9; // 0x3684a
        g7 = v11;
        int32_t result3 = 0x10000 * (int32_t)*v3 & 0xf0000 | v11; // 0x36856
        g4 = result3;
        if (result3 >= 5) {
            // 0x3685d
            g5 = v2;
            return result3;
        }
        // 0x367fa
        result4 = &v7;
        g4 = result4;
        g5 = v2;
        return result4;
    }
    if (v6 == 112) {
        int32_t v12 = *(int32_t *)(v1 + 24); // 0x36860
        g4 = v12;
        if (v12 == 0) {
            // 0x367db
            g5 = v2;
            return 0;
        }
        int32_t v13 = (int32_t)*(char *)(v1 + 29); // 0x3686b
        g4 = v13;
        int32_t v14 = (int32_t)*(char *)(v1 + 28); // 0x3686f
        g7 = v14;
        int32_t result5 = v14 | 256 * v13; // 0x36876
        g4 = result5;
        int32_t v15 = 0x10000 * (int32_t)*v3 & 0xf0000 | result5; // 0x36882
        g7 = v15;
        if (v15 != 0) {
            // 0x3688a
            g5 = v2;
            return result5;
        }
    } else {
        if (v6 != 48) {
            // 0x367fa
            result4 = &v7;
            g4 = result4;
            g5 = v2;
            return result4;
        }
        int32_t result6 = *(int32_t *)(v1 + 24); // 0x36828
        g4 = result6;
        if (result6 == 0) {
            // 0x3682f
            g5 = v2;
            return result6;
        }
    }
    // 0x367fa
    result4 = &v7;
    g4 = result4;
    g5 = v2;
    return result4;
}

// Address range: 0x36890 - 0x3693c
int32_t function_36890(int32_t a1) {
    // 0x36890
    g4 = g471;
    int32_t v1 = g6; // 0x3689b
    int32_t v2 = g10; // 0x3689e
    g6 = a1;
    int32_t v3 = g8; // 0x368a4
    int32_t v4 = *(int32_t *)(g471 + 48); // 0x368a7
    g4 = v4;
    int32_t v5; // 0x368e4
    if (v4 != 0) {
        // 0x368ae
        g4 = g297;
        g8 = *(int32_t *)(g297 + 8);
        int32_t v6 = function_26cf0(); // 0x368bf
        g4 = v6;
        g10 = v6;
        function_26330(v6);
        g4 = g297;
        v5 = g6;
    } else {
        v5 = a1;
    }
    // 0x368e4
    g4 = function_36790(v5);
    function_367c0(&g468);
    g4 = g284;
    function_37850(g284);
    g4 = g295;
    g4 = function_595e0(g295);
    int32_t v7 = *(int32_t *)(g6 + 8); // 0x36912
    g4 = v7;
    if (v7 != 0) {
        // 0x36919
        g9 = *(int32_t *)v7;
    }
    int32_t v8 = g337; // 0x36921
    g4 = v8;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    int32_t v9 = *(int32_t *)v8; // 0x3692f
    g9 = v9;
    int32_t result = *(int32_t *)(v9 + 52); // 0x36934
    g4 = result;
    return result;
}

// Address range: 0x3693c - 0x3695b
int32_t function_3693c(int32_t a1) {
    // 0x3693c
    g6 = g4;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x36957
    g4 = result;
    return result;
}

// Address range: 0x36960 - 0x36a0c
int32_t function_36960(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x36966
    g8 = a2;
    int32_t v2 = g6; // 0x3696c
    g6 = a1;
    int32_t v3 = g10; // 0x36972
    if (a2 == 0) {
        // 0x369e1
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return g4;
    }
    int32_t v4 = function_27c00(a2, "system/network", (int32_t *)"offline"); // 0x3698c
    g10 = v4;
    int32_t v5 = (int32_t)g290; // 0x36997
    g4 = v5;
    g4 = function_4a5d0(v5, v4);
    int32_t v6 = function_2cc30((int32_t)"offline", (char *)g10); // 0x369af
    g4 = v6;
    int32_t v7;
    if (v6 == 0) {
        int32_t v8 = function_1bc00(24); // 0x369f7
        g4 = v8;
        g10 = v8;
        v7 = function_395c0(v8, a2);
    } else {
        int32_t v9 = function_1bc00(40); // 0x369bf
        g4 = v9;
        g10 = v9;
        v7 = function_3cee0(v9, a2);
    }
    // 0x369d2
    g4 = v7;
    int32_t v10 = g10; // 0x369d2
    if (v10 != 0) {
        int32_t v11 = g6; // 0x369d6
        g4 = *(int32_t *)v11;
        *(int32_t *)(v11 + 8) = v10;
    }
    // 0x369e1
    g6 = v2;
    g10 = v3;
    g8 = v1;
    return g4;
}

// Address range: 0x36a0c - 0x36a20
int32_t function_36a0c(void) {
    // 0x36a0c
    g6 = g4;
    g4 = function_1bc40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t result = function_36a0c(); // 0x36a1e
    g4 = result;
    return result;
}

// Address range: 0x36a20 - 0x36b00
int32_t function_36a20(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x36a26
    g8 = a2;
    int32_t v2 = g6; // 0x36a2c
    g6 = a1;
    int32_t v3 = g10; // 0x36a32
    if (a2 == 0) {
        // 0x36ac3
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return g4;
    }
    int32_t v4 = function_27c00(a2, "system/network", (int32_t *)"LIVE"); // 0x36a50
    g4 = v4;
    int32_t v5 = function_27c00(a2, "options/action", (int32_t *)&g129); // 0x36a6b
    g9 = v4;
    g10 = v5;
    int32_t v6 = (int32_t)g290; // 0x36a75
    g4 = v6;
    g4 = function_4a5d0(v6, v4);
    int32_t v7 = function_2cc30((int32_t)"joinsession", (char *)g10); // 0x36a91
    g4 = v7;
    int32_t v8;
    if (v7 != 0) {
        int32_t v9 = function_2cc30((int32_t)"joininvitesession", (char *)g10); // 0x36adb
        g4 = v9;
        if (v9 == 0) {
            // 0x36ac3
            g6 = v2;
            g10 = v3;
            g8 = v1;
            return g4;
        }
        int32_t v10 = function_1bc00(48); // 0x36aeb
        g4 = v10;
        g10 = v10;
        v8 = function_3e940(v10, a2);
    } else {
        int32_t v11 = function_1bc00(32); // 0x36aa1
        g4 = v11;
        g10 = v11;
        v8 = function_3aa40(v11, a2);
    }
    // 0x36ab4
    g4 = v8;
    int32_t v12 = g10; // 0x36ab4
    if (v12 != 0) {
        int32_t v13 = g6; // 0x36ab8
        g4 = *(int32_t *)v13;
        *(int32_t *)(v13 + 8) = v12;
    }
    // 0x36ac3
    g6 = v2;
    g10 = v3;
    g8 = v1;
    return g4;
}

// Address range: 0x36b00 - 0x36b14
int32_t function_36b00(void) {
    // 0x36b00
    g6 = g4;
    g4 = function_1bc40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t result = function_36b00(); // 0x36b12
    g4 = result;
    return result;
}

// Address range: 0x36b20 - 0x36b95
int32_t function_36b20(int32_t a1) {
    g9 = a1;
    int32_t v1 = g6; // 0x36b29
    int32_t v2 = g10; // 0x36b2c
    int32_t * v3 = (int32_t *)(a1 + 8); // 0x36b2f
    int32_t v4 = *v3; // 0x36b2f
    g4 = v4;
    int32_t result; // 0x36b94
    if (v4 != 0) {
        // 0x36b36
        *v3 = 0;
        g9 = *(int32_t *)g4;
        g4 = g297;
        g10 = *(int32_t *)(g297 + 8);
        int32_t v5 = function_26cf0(); // 0x36b56
        g4 = v5;
        g6 = v5;
        function_27a20(v5, "OnMatchSessionUpdate", "state", "closed");
        g4 = g297;
        result = g297;
    } else {
        result = 0;
    }
    // 0x36b8b
    g6 = v1;
    g10 = v2;
    return result;
}

// Address range: 0x36b95 - 0x36de8
int32_t function_36b95(int32_t a1, int32_t a2) {
    // 0x36b95
    g10 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x36bc6
    g6 = a2;
    int32_t v3 = g10; // 0x36bcc
    int32_t v4 = g8; // 0x36bcf
    g8 = a1 - 4;
    int32_t v5 = function_25190(a2); // 0x36bd8
    g4 = v5;
    g10 = v5;
    int32_t v6 = function_2cc30((int32_t)"mmF->CloseSession", (char *)v5); // 0x36bea
    g4 = v6;
    if (v6 == 0) {
        int32_t result = *(int32_t *)g8; // 0x36d00
        g4 = result;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result;
    }
    int32_t v7 = function_2cc30((int32_t)"OnInvite", (char *)g10); // 0x36c02
    g4 = v7;
    int32_t result3; // 0x36d5f
    if (v7 == 0) {
        int32_t v8 = function_27c00(g6, "action", (int32_t *)&g129); // 0x36ccb
        g4 = v8;
        int32_t result2 = function_2cc30((int32_t)"join", (char *)v8); // 0x36cdb
        g4 = result2;
        if (result2 == 0) {
            // 0x36ce4
            g6 = v2;
            g472 = 1;
            g10 = v3;
            g8 = v4;
            return result2;
        }
        int32_t v9 = function_27c00(g6, "action", (int32_t *)&g129); // 0x36d2b
        g4 = v9;
        int32_t v10 = function_2cc30((int32_t)"deny", (char *)v9); // 0x36d3b
        g4 = v10;
        if (v10 == 0) {
            // 0x36d48
            result3 = function_2cb00(&g473, 0, 8);
            g4 = result3;
            g472 = 0;
        } else {
            result3 = v10;
        }
        // 0x36ca5
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result3;
    }
    int32_t v11 = function_2cc30((int32_t)"OnSteamOverlayCall::LobbyJoin", (char *)g10); // 0x36c1a
    g4 = v11;
    if (v11 == 0) {
        int32_t v12 = function_27ea0(g6, "sessionid", 0, 0); // bp-44
        int32_t result4 = &v12; // 0x36dc6
        g4 = result4;
        // 0x36ca5
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result4;
    }
    int32_t v13 = (int32_t)g290; // 0x36c27
    g4 = v13;
    if (g290 != NULL) {
        // 0x36c30
        g9 = v13;
    }
    int32_t v14 = *(int32_t *)&g291; // 0x36c3c
    g4 = v14;
    if (v14 != 0) {
        // 0x36c45
        g9 = v14;
    }
    // 0x36c51
    g4 = g293;
    if (g293 != 0) {
        // 0x36c5a
        g9 = g293;
    }
    int32_t v15 = *(int32_t *)&g296; // 0x36c66
    g4 = v15;
    if (v15 != 0) {
        // 0x36c6f
        g9 = v15;
    }
    // 0x36c7b
    g4 = g336;
    if (g336 != 0) {
        // 0x36c84
        g9 = *(int32_t *)g336;
    }
    int32_t v16 = *(int32_t *)(g8 + 8); // 0x36c8f
    g4 = v16;
    if (v16 != 0) {
        int32_t v17 = v16 + 4; // 0x36c96
        g9 = v17;
        int32_t v18 = *(int32_t *)v17; // 0x36c99
        g4 = v18;
        result3 = v18;
    } else {
        result3 = 0;
    }
    // 0x36ca5
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result3;
}

// Address range: 0x36df0 - 0x36dfe
int32_t function_36df0(int32_t a1, int32_t a2) {
    // 0x36df0
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 8) = a2;
    return g4;
}

// Address range: 0x36e00 - 0x36e10
int32_t function_36e00(int32_t a1) {
    int32_t result = g469; // 0x36e01
    g4 = result;
    g9 = g470;
    return result;
}

// Address range: 0x36e10 - 0x36e17
int32_t function_36e10(void) {
    // 0x36e10
    g4 = 0;
    return 0;
}

// Address range: 0x36e20 - 0x36e2a
int32_t function_36e20(void) {
    // 0x36e20
    g4 = 4;
    return 4;
}

// Address range: 0x36e30 - 0x36e35
int32_t function_36e30(void) {
    // 0x36e30
    return g4;
}

// Address range: 0x36e40 - 0x36e68
int32_t function_36e40(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x36e43
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x36e4a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x36e4d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x36e50
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x36e58
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x36e5e
    g6 = v1;
    return result;
}

// Address range: 0x36e70 - 0x36e7d
int32_t function_36e70(int32_t a1) {
    // 0x36e70
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x36e77
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x36e79
    g4 = result;
    return result;
}

// Address range: 0x36e80 - 0x36e8a
int32_t function_36e80(void) {
    // 0x36e80
    g4 = 16;
    return 16;
}

// Address range: 0x36e90 - 0x36e97
int32_t function_36e90(void) {
    // 0x36e90
    g4 = 0;
    return 0;
}

// Address range: 0x36ea0 - 0x36eaa
int32_t function_36ea0(void) {
    // 0x36ea0
    g4 = 1;
    return 1;
}

// Address range: 0x36eb0 - 0x36eba
int32_t function_36eb0(void) {
    // 0x36eb0
    g4 = 1;
    return 1;
}

// Address range: 0x36ec0 - 0x36ec5
int32_t function_36ec0(void) {
    // 0x36ec0
    return g4;
}

// Address range: 0x36ed0 - 0x36eda
int32_t function_36ed0(void) {
    // 0x36ed0
    g4 = 1;
    return 1;
}

// Address range: 0x36ee0 - 0x36ee5
int32_t function_36ee0(void) {
    // 0x36ee0
    return g4;
}

// Address range: 0x36ef0 - 0x36efa
int32_t function_36ef0(void) {
    // 0x36ef0
    g4 = 4;
    return 4;
}

// Address range: 0x36f00 - 0x36f19
int32_t function_36f00(int32_t a1) {
    // 0x36f00
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g156;
    return g4;
}

// Address range: 0x36f1d - 0x36f3a
int32_t function_36f1d(void) {
    // 0x36f1d
    if (g4 == 0) {
        // 0x36f38
        return 0;
    }
    int32_t result = function_22f50(); // 0x36f2d
    g4 = result;
    return result;
}

// Address range: 0x36f40 - 0x36f6b
int32_t function_36f40(void) {
    // 0x36f40
    g9 = g454;
    if (g454 != 0) {
        // 0x36f50
        g4 = function_22e90(0, 0);
    }
    // 0x36f64
    g4 = 1;
    return 1;
}

// Address range: 0x36f70 - 0x36f79
int32_t function_36f70(void) {
    int32_t result = function_66d60(); // 0x36f74
    g4 = result;
    return result;
}

// Address range: 0x36f80 - 0x36fa0
int32_t function_36f80(void) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2;
    g4 = &v2;
    function_66d50(&v2, 1);
    g4 = 1;
    return 1;
}

// Address range: 0x36fa0 - 0x36fb1
int32_t function_36fa0(void) {
    // 0x36fa0
    g4 = function_78d90();
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_66d60(); // 0x36fac
    g4 = result;
    return result;
}

// Address range: 0x36fc0 - 0x36ff9
int32_t function_36fc0(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = &a1;
    function_66d50(&a1, 1);
    g4 = &a1;
    function_78d30(&a1, 1);
    g4 = 1;
    return 1;
}

// Address range: 0x37000 - 0x3701a
int32_t function_37000(void) {
    // 0x37000
    g7 = g454;
    if (g454 == 0) {
        // 0x37018
        return g4;
    }
    int32_t result = function_22f50(); // 0x3700e
    g4 = result;
    return result;
}

// Address range: 0x37020 - 0x3704a
int32_t function_37020(void) {
    // 0x37020
    g4 = g454;
    if (g454 != 0) {
        // 0x3702f
        g4 = function_22e90(0, 0);
    }
    // 0x37043
    g4 = 1;
    return 1;
}

// Address range: 0x37050 - 0x37051
int32_t function_37050(int32_t a1) {
    // 0x37050
    return g4;
}

// Address range: 0x3709a - 0x370cf
int32_t function_3709a(int32_t a1) {
    // 0x3709a
    *(int32_t *)g6 = (int32_t)&g158;
    g4 = function_7ab57(g4, (int32_t)&g870);
    int32_t v1 = g6; // 0x370b3
    g6 = a1;
    g4 = function_37050(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x370ca
    g4 = result;
    return result;
}

// Address range: 0x370d0 - 0x37109
int32_t function_370d0(int32_t a1) {
    int32_t v1 = g6; // 0x370d3
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g157;
    g4 = g6 + 4;
    int32_t result = function_331e0(); // 0x370fe
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x37109 - 0x37769
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_37109(int32_t a1, int32_t a2) {
    // 0x37109
    *(int32_t *)g6 = (int32_t)&g158;
    g4 = function_7ab57(g4, (int32_t)&g870);
    int32_t v1 = g8; // 0x37123
    int32_t v2 = g10; // 0x37124
    int32_t v3 = g6; // 0x37125
    g6 = a2;
    g10 = a1;
    int32_t result;
    if (a2 == 0) {
        result = 0;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v4 = *(int32_t *)(a2 + 64); // 0x37137
    g7 = v4;
    if (v4 == 0) {
        result = 0;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v5 = *(int32_t *)(a2 + 24); // 0x37142
    g9 = v5;
    if (v5 == 0) {
        result = 0;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t * v6 = (int32_t *)(a2 + 48); // 0x3714d
    int32_t v7 = *v6; // 0x3714d
    g4 = v7;
    int32_t v8; // 0x374e4
    if (v7 > 31) {
        // 0x37159
        g8 = -1;
        int32_t v9 = v7 - 32; // 0x3715f
        g4 = v9;
        *v6 = v9;
        int32_t * v10 = (int32_t *)(a2 + 44); // 0x37165
        g8 &= *v10;
        if (v9 != 0) {
            // 0x37189
            *v10 = 0;
            goto lab_0x37190;
        } else {
            int32_t * v11 = (int32_t *)(a2 + 52); // 0x3716c
            g9 = *v11;
            *v6 = 32;
            uint32_t v12 = g9; // 0x37176
            uint32_t v13 = *(int32_t *)(a2 + 56); // 0x37176
            if (v12 == v13) {
                // 0x37690
                g9 = v12 + 4;
                *v6 = 1;
                *v10 = 0;
                *v11 = g9;
                goto lab_0x37190;
            } else {
                if (v12 < v13) {
                    // 0x37600
                    g4 = *(int32_t *)v12;
                    int32_t v14 = v12 + 4; // 0x37602
                    g9 = v14;
                    *v11 = v14;
                    *v10 = g4;
                    goto lab_0x37190;
                } else {
                    // 0x37185
                    *(char *)(a2 + 32) = 1;
                    // 0x37189
                    *v10 = 0;
                    goto lab_0x37190;
                }
            }
        }
    } else {
        int32_t * v15 = (int32_t *)(a2 + 44); // 0x373b0
        int32_t v16 = *v15; // 0x373b0
        g9 = v16;
        uint32_t v17 = *(int32_t *)(a2 + 56); // 0x373b3
        g7 = v17;
        int32_t * v18 = (int32_t *)(a2 + 52); // 0x373b9
        uint32_t v19 = *v18; // 0x373b9
        g9 = v19;
        if (v19 == v17) {
            // 0x37620
            g9 = v19 + 4;
            *v6 = 1;
            g4 = 1;
            *v15 = 0;
            *v18 = g9;
            *(char *)(a2 + 32) = 1;
            v8 = 0;
            goto lab_0x373dc;
        } else {
            if (v19 < v17) {
                // 0x374d8
                g8 = *(int32_t *)v19;
                int32_t v20 = v19 + 4; // 0x374da
                g9 = v20;
                *v18 = v20;
                v8 = g8;
                *v15 = v8;
                if (*(char *)(a2 + 32) != 0) {
                    goto lab_0x373dc;
                } else {
                    // 0x374f0
                    g9 = 32;
                    int32_t v21 = g4; // 0x374f5
                    g7 = v21;
                    *v6 = v21;
                    int32_t v22 = g9 - g4; // 0x374fa
                    g9 = v22;
                    g4 = v8;
                    int32_t v23 = *(int32_t *)(4 * v22 + (int32_t)&Generic_bitmask_table_at_87960); // 0x374ff
                    int32_t v24 = v23 & g8; // 0x374ff
                    g8 = v24;
                    uint32_t v25 = g7 & (int32_t)&g862 & 31; // 0x37506
                    int32_t v26; // 0x37506
                    if (v25 != 0) {
                        // bb287
                        v26 = v24 << v25;
                        g8 = v26;
                    } else {
                        v26 = v24;
                    }
                    // bb289
                    g7 = v22;
                    uint32_t v27 = v22 & (int32_t)&g862 & 31; // 0x3750a
                    int32_t v28; // 0x3750a
                    if (v27 != 0) {
                        // bb290
                        v28 = v8 >> v27;
                        g4 = v28;
                    } else {
                        v28 = v8;
                    }
                    // bb291
                    g8 = v26 | v16;
                    *v15 = v28;
                    goto lab_0x37190;
                }
            } else {
                // 0x373ca
                *(char *)(a2 + 32) = 1;
                *v15 = 0;
                v8 = 0;
                goto lab_0x373dc;
            }
        }
    }
  lab_0x37190:
    // 0x37190
    if (g8 != 0) {
        result = 0;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v29 = *v6; // 0x37198
    g4 = v29;
    int32_t * v30 = (int32_t *)(a2 + 44); // 0x3719b
    int32_t v31 = *v30; // 0x3719b
    g8 = v31;
    if (v29 > 31) {
        int32_t v32 = v29 - 32; // 0x371ad
        g4 = v32;
        *v6 = v32;
        if (v32 == 0) {
            int32_t * v33 = (int32_t *)(a2 + 52); // 0x374b0
            g4 = *v33;
            *v6 = 32;
            uint32_t v34 = g4; // 0x374ba
            uint32_t v35 = *(int32_t *)(a2 + 56); // 0x374ba
            if (v34 == v35) {
                // 0x376f0
                g4 = v34 + 4;
                *v6 = 1;
                *v30 = 0;
                *v33 = g4;
                goto lab_0x371c8;
            } else {
                if (v34 < v35) {
                    // 0x37610
                    g9 = *(int32_t *)v34;
                    int32_t v36 = v34 + 4; // 0x37612
                    g4 = v36;
                    *v33 = v36;
                    *v30 = g9;
                    goto lab_0x371c8;
                } else {
                    // 0x374c9
                    *(char *)(a2 + 32) = 1;
                    // 0x371c1
                    *v30 = 0;
                    goto lab_0x371c8;
                }
            }
        } else {
            // 0x371c1
            *v30 = 0;
            goto lab_0x371c8;
        }
    } else {
        // 0x375f0
        g9 = *(int32_t *)(a2 + 52);
        g7 = *(int32_t *)(a2 + 56);
        v8 = v31;
        goto lab_0x373dc;
    }
  lab_0x373dc:;
    uint32_t v37 = g9; // 0x373dc
    uint32_t v38 = g7; // 0x373dc
    if (v37 == v38) {
        // 0x37670
        g9 = v37 + 4;
        *v6 = 1;
        g8 = 0;
        *(int32_t *)(a2 + 44) = 0;
        *(int32_t *)(a2 + 52) = g9;
        *(char *)(a2 + 32) = 1;
        goto lab_0x371c8;
    } else {
        if (v37 < v38) {
            // 0x375b0
            g8 = *(int32_t *)v37;
            int32_t v39 = v37 + 4; // 0x375b2
            g9 = v39;
            *(int32_t *)(a2 + 52) = v39;
            int32_t v40 = g8; // 0x375bc
            int32_t * v41 = (int32_t *)(a2 + 44); // 0x375bf
            *v41 = v40;
            if (*(char *)(a2 + 32) != 0) {
                // 0x373f5
                g8 = 0;
                goto lab_0x371c8;
            } else {
                // 0x375c8
                g9 = 32;
                g7 = *v6;
                *v6 = g4;
                int32_t v42 = g9 - g4; // 0x375d3
                g9 = v42;
                g4 = v40;
                int32_t v43 = *(int32_t *)(4 * v42 + (int32_t)&Generic_bitmask_table_at_87960); // 0x375d8
                int32_t v44 = v43 & g8; // 0x375d8
                g8 = v44;
                uint32_t v45 = g7 & (int32_t)&g862 & 31; // 0x375df
                int32_t v46; // 0x375df
                if (v45 != 0) {
                    // bb300
                    v46 = v44 << v45;
                    g8 = v46;
                } else {
                    v46 = v44;
                }
                // bb302
                g7 = v42;
                uint32_t v47 = v42 & (int32_t)&g862 & 31; // 0x375e3
                int32_t v48; // 0x375e3
                if (v47 != 0) {
                    // bb303
                    v48 = v40 >> v47;
                    g4 = v48;
                } else {
                    v48 = v40;
                }
                // bb304
                g8 = v46 | v8;
                *v41 = v48;
                goto lab_0x371c8;
            }
        } else {
            // 0x373ea
            *(char *)(a2 + 32) = 1;
            *(int32_t *)(a2 + 44) = 0;
            // 0x373f5
            g8 = 0;
            goto lab_0x371c8;
        }
    }
  lab_0x371c8:
    // 0x371c8
    g4 = g281;
    g9 = *(int32_t *)g281;
    if (g281 != g8) {
        result = 0;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v49 = *v6; // 0x371e0
    g7 = v49;
    int32_t v50;
    int32_t * v51; // 0x371f7
    if (v49 > 31) {
        // 0x371ec
        g4 = -1;
        int32_t v52 = v49 - 32; // 0x371f1
        g7 = v52;
        *v6 = v52;
        v51 = (int32_t *)(a2 + 44);
        g4 &= *v51;
        if (v52 == 0) {
            int32_t * v53 = (int32_t *)(a2 + 52); // 0x37520
            g9 = *v53;
            *v6 = 32;
            uint32_t v54 = g9; // 0x3752a
            uint32_t v55 = *(int32_t *)(a2 + 56); // 0x3752a
            if (v54 == v55) {
                // 0x37730
                g9 = v54 + 4;
                *v6 = 1;
                *v51 = 0;
                *v53 = g9;
                v50 = g4;
                goto lab_0x3720c;
            } else {
                if (v54 < v55) {
                    // 0x37648
                    g7 = *(int32_t *)v54;
                    int32_t v56 = v54 + 4; // 0x3764a
                    g9 = v56;
                    *v53 = v56;
                    *v51 = g7;
                    v50 = g4;
                    goto lab_0x3720c;
                } else {
                    // 0x37539
                    *(char *)(a2 + 32) = 1;
                    goto lab_0x37202;
                }
            }
        } else {
            goto lab_0x37202;
        }
    } else {
        int32_t * v57 = (int32_t *)(a2 + 52); // 0x37418
        uint32_t v58 = *v57; // 0x37418
        g4 = v58;
        int32_t * v59 = (int32_t *)(a2 + 44); // 0x3741b
        int32_t v60 = *v59; // 0x3741b
        g8 = v60;
        uint32_t v61 = *(int32_t *)(a2 + 56); // 0x3741e
        if (v58 == v61) {
            // 0x376b0
            g4 = v58 + 4;
            *v6 = 1;
            *v59 = 0;
            *v57 = g4;
            *(char *)(a2 + 32) = 1;
            v50 = 0;
        } else {
            if (v58 < v61) {
                // 0x37548
                g9 = *(int32_t *)v58;
                int32_t v62 = v58 + 4; // 0x3754a
                g4 = v62;
                *v57 = v62;
                *v59 = g9;
                if (*(char *)(a2 + 32) == 0) {
                    // 0x3755d
                    g4 = 32;
                    *v6 = g7;
                    int32_t v63 = g7; // 0x37565
                    int32_t v64 = g4 - v63; // 0x37565
                    g4 = v64;
                    int32_t v65 = *(int32_t *)(4 * v64 + (int32_t)&Generic_bitmask_table_at_87960); // 0x37567
                    int32_t v66 = g9; // 0x3756e
                    int32_t v67 = v66 & v65; // 0x3756e
                    uint32_t v68 = v63 & (int32_t)&g862 & 31; // 0x37570
                    int32_t v69;
                    if (v68 != 0) {
                        // bb293
                        v69 = v67 << v68;
                    } else {
                        v69 = v67;
                    }
                    // bb295
                    g8 = v69;
                    g7 = v64;
                    g4 = v60;
                    uint32_t v70 = v64 & (int32_t)&g862 & 31; // 0x37577
                    int32_t v71; // 0x37577
                    if (v70 != 0) {
                        // bb296
                        v71 = v66 >> v70;
                        g9 = v71;
                    } else {
                        v71 = v66;
                    }
                    // bb297
                    *v59 = v71;
                    int32_t v72 = g4 | g8; // 0x3757c
                    g8 = v72;
                    v50 = v72;
                } else {
                    v50 = 0;
                }
            } else {
                // 0x37430
                *(char *)(a2 + 32) = 1;
                *v59 = 0;
                v50 = 0;
            }
        }
        goto lab_0x3720c;
    }
  lab_0x37202:
    // 0x37202
    *v51 = 0;
    v50 = g4;
    goto lab_0x3720c;
  lab_0x3720c:;
    int32_t v73 = g10; // 0x3720c
    g8 = v73 + 4;
    *(int32_t *)(v73 + 16) = 0;
    *(int32_t *)(g10 + 20) = 0;
    *(char *)(g10 + 24) = 0;
    *(int32_t *)(g10 + 36) = 0;
    *(int32_t *)(g10 + 32) = -1;
    g4 = function_321d0(g8, 0);
    g9 = v50;
    g4 = function_307d0(g8, v50);
    g9 = v50;
    int32_t v74 = a2 + 28; // 0x37251
    g7 = v74;
    int32_t v75 = *(int32_t *)(g10 + 4); // 0x3725b
    g4 = v75;
    g4 = function_64ff0(v74, v75, v50);
    g9 = v50;
    g4 = function_32240(g8, 0, v50);
    g4 = function_32160(g8, 1);
    int32_t result2 = function_26cf0(); // 0x3729e
    g4 = result2;
    function_26330(result2);
    g4 = result2;
    int32_t v76 = function_28e90(result2, g8); // 0x372c0
    g4 = v76;
    if ((char)v76 == 0) {
        // 0x37710
        g4 = result2;
        g4 = function_28600(result2);
        result = 0;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v77 = *v6; // 0x372cd
    g7 = v77;
    if (v77 > 31) {
        // 0x372d9
        g9 = -1;
        int32_t v78 = v77 - 32; // 0x372df
        g7 = v78;
        *v6 = v78;
        int32_t * v79 = (int32_t *)(a2 + 44); // 0x372e5
        g9 &= *v79;
        if (v78 != 0) {
            // 0x37309
            *v79 = 0;
            goto lab_0x37310;
        } else {
            int32_t * v80 = (int32_t *)(a2 + 52); // 0x372ec
            g4 = *v80;
            *v6 = 32;
            uint32_t v81 = g4; // 0x372f6
            uint32_t v82 = *(int32_t *)(a2 + 56); // 0x372f6
            if (v81 == v82) {
                // 0x37750
                g4 = v81 + 4;
                *v6 = 1;
                *v79 = 0;
                *v80 = g4;
                goto lab_0x37310;
            } else {
                if (v81 < v82) {
                    // 0x37660
                    g7 = *(int32_t *)v81;
                    int32_t v83 = v81 + 4; // 0x37662
                    g4 = v83;
                    *v80 = v83;
                    *v79 = g7;
                    goto lab_0x37310;
                } else {
                    // 0x37305
                    *(char *)(a2 + 32) = 1;
                    // 0x37309
                    *v79 = 0;
                    goto lab_0x37310;
                }
            }
        }
    } else {
        int32_t * v84 = (int32_t *)(a2 + 52); // 0x37450
        uint32_t v85 = *v84; // 0x37450
        g4 = v85;
        int32_t * v86 = (int32_t *)(a2 + 44); // 0x37453
        int32_t v87 = *v86; // 0x37453
        g9 = v87;
        uint32_t v88 = *(int32_t *)(a2 + 56); // 0x37456
        if (v85 == v88) {
            // 0x376d0
            g4 = v85 + 4;
            *v6 = 1;
            *v86 = 0;
            *v84 = g4;
            *(char *)(a2 + 32) = 1;
            result = result2;
            // 0x37407
            g4 = result;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        if (v85 >= v88) {
            // 0x37590
            *(char *)(a2 + 32) = 1;
            g4 = result2;
            *v86 = 0;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        // 0x37468
        g9 = *(int32_t *)v85;
        int32_t v89 = v85 + 4; // 0x3746a
        g4 = v89;
        *v84 = v89;
        int32_t v90 = g9; // 0x37474
        *v86 = v90;
        if (*(char *)(a2 + 32) != 0) {
            result = result2;
            // 0x37407
            g4 = result;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        int32_t v91 = g7; // 0x37483
        int32_t v92 = 32 - v91; // 0x37483
        *v6 = v91;
        g4 = v92;
        int32_t v93 = *(int32_t *)(4 * v92 + (int32_t)&Generic_bitmask_table_at_87960); // 0x3748c
        int32_t v94 = v93 & g9; // 0x3748c
        g9 = v94;
        g4 = v90;
        uint32_t v95 = g7 & (int32_t)&g862 & 31; // 0x37496
        int32_t v96; // 0x37496
        if (v95 != 0) {
            // bb
            v96 = v94 << v95;
            g9 = v96;
        } else {
            v96 = v94;
        }
        // bb283
        g7 = v92 % 256;
        g9 = v96 | v87;
        uint32_t v97 = v92 & (int32_t)&g862 & 31; // 0x3749f
        int32_t v98; // 0x3749f
        if (v97 != 0) {
            // bb284
            v98 = v90 >> v97;
            g4 = v98;
        } else {
            v98 = v90;
        }
        // bb285
        *v86 = v98;
        goto lab_0x37310;
    }
  lab_0x37310:
    // 0x37310
    if (g9 == 0) {
        result = result2;
        // 0x37407
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x37318
    *(int32_t *)(g10 + 16) = 0;
    *(int32_t *)(g10 + 20) = 0;
    *(char *)(g10 + 24) = 0;
    *(int32_t *)(g10 + 36) = 0;
    *(int32_t *)(g10 + 32) = -1;
    int32_t v99 = g9; // 0x3733b
    g4 = function_321d0(g8, 0);
    g9 = v99;
    g4 = function_307d0(g8, v99);
    g9 = v99;
    g7 = v74;
    int32_t v100 = *(int32_t *)(g10 + 4); // 0x37364
    g4 = v100;
    g4 = function_64ff0(v74, v100, v99);
    g9 = v99;
    g4 = function_32240(g8, 0, v99);
    g4 = result2;
    function_275a0(result2, "binary/ptr", *(int32_t *)(g10 + 4));
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x37769 - 0x3782f
int32_t function_37769(int32_t a1, int32_t a2) {
    // 0x37769
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 44);
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = a1;
    int32_t v2 = g8; // 0x37789
    g8 = a2;
    int32_t v3 = g10; // 0x3778f
    int32_t v4 = g6; // 0x37792
    g10 = a1;
    if (a1 == 0) {
        // 0x37820
        g4 = 0;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    int32_t v5 = function_26cf0(); // 0x377ae
    g4 = v5;
    g6 = v5;
    g4 = function_26330(v5);
    int32_t v6 = function_2c4e0(g8, 0); // 0x377d0
    g4 = v6;
    g4 = function_27920(g6, "from", (char *)v6);
    function_25fb0(g6, g10);
    g9 = g297;
    g6 = v4;
    g4 = 1;
    g10 = v3;
    g8 = v2;
    return 1;
}

// Address range: 0x37850 - 0x37855
int32_t function_37850(int32_t a1) {
    // 0x37850
    return g4;
}

// Address range: 0x37860 - 0x37861
int32_t function_37860(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x37860
    return g4;
}

// Address range: 0x378f2 - 0x378f5
int32_t function_378f2(void) {
    // 0x378f2
    return g4;
}

// Address range: 0x378fe - 0x378ff
int32_t function_378fe(void) {
    // 0x378fe
    return g4;
}

// Address range: 0x3790f - 0x37913
int32_t function_3790f(void) {
    // 0x3790f
    g4 &= -24;
    int32_t result = function_378fe(); // 0x37911
    g4 = result;
    return result;
}

// Address range: 0x37984 - 0x37985
int32_t function_37984(void) {
    // 0x37984
    return g4;
}

// Address range: 0x37994 - 0x37995
int32_t function_37994(void) {
    // 0x37994
    return g4;
}

// Address range: 0x379f5 - 0x379f6
int32_t function_379f5(void) {
    // 0x379f5
    return g4;
}

// Address range: 0x37a06 - 0x37a07
int32_t function_37a06(void) {
    // 0x37a06
    return g4;
}

// Address range: 0x37a4d - 0x37a4e
int32_t function_37a4d(void) {
    // 0x37a4d
    return g4;
}

// Address range: 0x37a80 - 0x37af3
int32_t function_37a80(void) {
    int32_t v1 = *(int32_t *)(g5 - 1324); // 0x37a80
    g4 = v1;
    int32_t v2 = function_27e60(v1, 0, 0); // 0x37a99
    g4 = v2;
    g8 = v2;
    int32_t v3 = function_27fc0(g10, NULL, 0); // 0x37ab3
    g4 = v3;
    g10 = v3;
    int32_t v4; // 0x37abc
    if (v3 == 0) {
        // bb
        v4 = function_37984();
        g4 = v4;
    } else {
        v4 = v3;
    }
    int32_t v5; // 0x37ac4
    if (v2 == 0) {
        // bb237
        v5 = function_37984();
        g4 = v5;
    } else {
        v5 = v4;
    }
    // 0x37aca
    g4 = function_5fd80(g6, v5);
    int32_t v6 = function_5ff30(g6, v2, g10); // 0x37ae1
    g4 = v6;
    if ((char)v6 == 0) {
        // bb238
        g4 = function_37a4d();
    }
    int32_t result = function_37994(); // 0x37aee
    g4 = result;
    return result;
}

// Address range: 0x37b30 - 0x37b44
int32_t function_37b30(void) {
    int32_t v1 = g4 & (int32_t)&g863; // 0x37b33
    g4 = v1;
    g4 = function_2c870((int32_t *)g6, v1);
    int32_t result = function_379f5(); // 0x37b3f
    g4 = result;
    return result;
}

// Address range: 0x37b48 - 0x37b5d
int32_t function_37b48(void) {
    // 0x37b48
    g4 = g475;
    int32_t v1 = *(int32_t *)(g475 + 48); // 0x37b4d
    g10 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_37a4d();
    }
    int32_t result = function_37a06(); // 0x37b58
    g4 = result;
    return result;
}

// Address range: 0x37b60 - 0x37b85
int32_t function_37b60(void) {
    // 0x37b60
    g4 = function_2c6d0((int32_t *)g6, 2);
    g4 = function_2c870((int32_t *)g6, 0);
    int32_t result = function_379f5(); // 0x37b80
    g4 = result;
    return result;
}

// Address range: 0x37b8a - 0x37b8b
int32_t function_37b8a(void) {
    // 0x37b8a
    return g4;
}

// Address range: 0x37bc0 - 0x37bd2
int32_t function_37bc0(int32_t a1) {
    // 0x37bc0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g158;
    int32_t result = function_1bc40(); // 0x37bcd
    g4 = result;
    return result;
}

// Address range: 0x37be0 - 0x37bee
int32_t function_37be0(int32_t a1) {
    // 0x37be0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g159;
    return g4;
}

// Address range: 0x37bf0 - 0x37c51
int32_t function_37bf0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x37bfe
    g6 = g4;
    int32_t v3 = g8; // 0x37c06
    g8 = g9;
    int32_t result = function_2a500("settings", " system {  network #empty#  access #empty#  netflag #empty#  }  options {  server #empty#  }  members {  numSlots #int#0  numPlayers #int#0  } "); // 0x37c1a
    g9 = *(int32_t *)&g273;
    g4 = result;
    g6 = v2;
    g8 = v3;
    g5 = v1;
    return result;
}

// Address range: 0x37c60 - 0x37cae
int32_t function_37c60(int32_t a1) {
    // 0x37c60
    int32_t v1; // ebp
    int32_t v2 = v1; // bp-4
    g4 = (int32_t)"reserve";
    g5 = &v2;
    int32_t v3 = g6; // 0x37c6b
    g6 = a1;
    int32_t v4 = g10; // 0x37c71
    g9 = a1;
    int32_t v5 = function_37bf0(v3, v4, v1); // 0x37c76
    g4 = v5;
    g10 = v5;
    g4 = function_35a40();
    g4 = function_262d0(g10);
    function_2a090(g10, g6, 3);
    int32_t result = g10; // 0x37ca2
    g4 = result;
    g6 = v3;
    g10 = v4;
    return result;
}

// Address range: 0x37cb0 - 0x37cce
int32_t function_37cb0(int32_t a1) {
    int32_t v1 = g6; // 0x37cb3
    g6 = a1;
    function_594b0(a1);
    int32_t result = g6; // 0x37cc2
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x37cd0 - 0x37fab
int32_t function_37cd0(int32_t a1) {
    int32_t v1 = g8; // 0x37cd3
    int32_t v2 = g10; // 0x37cd4
    int32_t v3; // bp-64
    int32_t v4 = &v3; // 0x37cd5
    g8 = v4;
    int32_t v5 = g6; // bp-16
    int32_t v6; // bp-76
    int32_t v7 = &v6; // 0x37cd9
    g10 = v7;
    g4 = function_2c6c0(&v6, 0);
    g4 = function_2c870(&v6, 0);
    g4 = function_2c6d0(&v6, 3);
    g4 = function_2c6c0(&v3, 0);
    g4 = function_2c870(&v3, 0);
    function_2c6d0(&v3, 3);
    g4 = g281;
    g9 = *(int32_t *)g281;
    int32_t v8;
    char v9;
    if (v9 != 0) {
        int32_t v10 = function_2a500("GameDetailsServer", " system {  network LIVE  access public  }  server {  name =  server =  adronline =  adrlocal =  }  members {  numSlots #int#0  numPlayers #int#0  } "); // 0x37e07
        g4 = v10;
        g6 = v10;
        char v11;
        int32_t v12; // 0x37e23
        if (v11 == 0) {
            int32_t v13 = (int32_t)g450; // 0x37f68
            g4 = v13;
            g9 = *(int32_t *)g450;
            if (g450 != NULL) {
                // 0x37f7d
                g4 = v13;
                g9 = *(int32_t *)g450;
                g9 = *(int32_t *)g450;
                g4 = function_2a090(v10, v13, 3);
                v12 = g6;
            } else {
                v12 = v10;
            }
        } else {
            v12 = v10;
        }
        // 0x37e18
        int32_t v14;
        function_27920(v12, "server/name", (char *)v14);
        g9 = (int32_t)"listen";
        int32_t v15 = v11 == 0 ? (int32_t)"listen" : (int32_t)"dedicated"; // 0x37e48
        g4 = v15;
        g4 = function_27920(g6, "server/server", (char *)v15);
        int32_t v16 = function_2c4e0(v4, 0); // 0x37e5f
        g4 = v16;
        g4 = function_27920(g6, "server/adronline", (char *)v16);
        int32_t v17 = function_2c4e0(v7, 0); // 0x37e83
        g4 = v17;
        g4 = function_27920(g6, "server/adrlocal", (char *)v17);
        if (v11 != 0) {
            char v18;
            if (v18 != 0) {
                char v19;
                if (v19 != 0) {
                    // 0x37f46
                    g4 = function_27920(g6, "system/access", "friends");
                }
            }
        }
        uint32_t v20 = *(int32_t *)&g273; // 0x37ea6
        g4 = v20;
        uint32_t v21;
        int32_t v22 = v20 >= v21 ? v21 : 0; // 0x37ec2
        g10 = v22;
        g7 = 0;
        g8 = v20 >= v21;
        int32_t v23; // 0x37ed3
        if (v21 >= 0) {
            // 0x37ecf
            v23 = v20 < v21 ? v20 : 0;
            g7 = v23;
        } else {
            v23 = 0;
        }
        uint32_t v24 = v23 | v22; // 0x37ed5
        g7 = v24;
        function_27680(g6, "members/numSlots", v24);
        g10 = v24;
        uint32_t v25;
        int32_t v26 = v24 >= v25 ? v25 : 0; // 0x37ef8
        g7 = v26;
        g9 = 0;
        g8 = v24 >= v25;
        int32_t v27; // 0x37f09
        if (v25 >= 0) {
            // 0x37f05
            v27 = v24 < v25 ? v24 : 0;
            g9 = v27;
        } else {
            v27 = 0;
        }
        int32_t v28 = v27 | v26; // 0x37f0b
        g9 = v28;
        v8 = function_27680(g6, "members/numPlayers", v28);
        goto lab_0x37daa;
    } else {
        // 0x37d5d
        g4 = *(int32_t *)&g278;
        g6 = (int32_t)g283;
        if (g283 == NULL) {
            goto lab_0x37de0;
        } else {
            int32_t v29 = *(int32_t *)g283; // 0x37d69
            g4 = v29;
            if ((char)v29 != 0) {
                goto lab_0x37de0;
            } else {
                int32_t v30 = *(int32_t *)g283; // 0x37d78
                g4 = v30;
                if (v30 == 0) {
                    goto lab_0x37de0;
                } else {
                    // 0x37d87
                    if (*(char *)v30 == 0) {
                        goto lab_0x37de0;
                    } else {
                        int32_t v31 = function_26cf0(); // 0x37d93
                        g4 = v31;
                        g6 = v31;
                        v8 = function_26330(v31);
                        goto lab_0x37daa;
                    }
                }
            }
        }
    }
  lab_0x37daa:
    // 0x37daa
    g4 = v8;
    int32_t result = g6; // 0x37daa
    if (result != 0) {
        int32_t v32 = *(int32_t *)&g273; // 0x37dae
        g4 = v32;
        g7 = a1;
        g9 = v32;
    }
    // 0x37dcd
    g4 = result;
    g6 = v5;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x37de0:
    // 0x37de0
    g4 = 0;
    g6 = v5;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x37fab - 0x3824c
int32_t function_37fab(int32_t a1, int32_t a2) {
    // 0x37fab
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    g4 = (int32_t)"qos";
    int32_t v1 = g8; // 0x37fc8
    int32_t v2 = g10; // 0x37fc9
    int32_t v3 = g6; // 0x37fca
    g8 = a1;
    g6 = a2;
    g9 = a1;
    int32_t v4 = function_37bf0(v3, v2, v1); // 0x37fd6
    g4 = v4;
    g10 = v4;
    function_2a090(v4, g8, 3);
    g4 = g281;
    g9 = *(int32_t *)g281;
    int32_t v5 = g6; // 0x38001
    g8 = g281;
    char v6;
    char v7; // bp-32
    int32_t v8; // bp-36
    char v9;
    if (*(char *)(v5 + 21) % 2 != 0) {
        // 0x381f0
        g4 = function_32570(v5, "%d");
        v6 = v9;
    } else {
        // 0x3800d
        v8 = g281;
        int32_t v10 = function_320f0(v5, 4); // 0x3801b
        g4 = v10;
        if ((char)v10 != 0) {
            int32_t v11 = g6; // 0x38024
            int32_t v12 = *(int32_t *)(v11 + 16); // 0x38028
            g4 = v12;
            char v13;
            int32_t v14; // 0x38218
            int32_t v15; // 0x38218
            if (*(char *)(v11 + 52) % 2 == 0) {
                int32_t v16 = v12 - *(int32_t *)(v11 + 32); // 0x38210
                g4 = v16;
                int32_t v17 = *(int32_t *)v11; // 0x38213
                g9 = v17;
                *(int32_t *)(v17 + v16) = g8;
                v14 = g6;
                v15 = *(int32_t *)(v14 + 16);
                g4 = v15;
                v13 = v9;
            } else {
                // 0x38031
                g9 = v12;
                int32_t v18 = v12 - *(int32_t *)(v11 + 32); // 0x38033
                g9 = v18;
                int32_t v19 = *(int32_t *)v11 + v18; // 0x38036
                g9 = v19;
                if (v19 != 0) {
                    int32_t v20 = &v7; // 0x38061
                    g4 = v20;
                    g4 = function_2cb10(v19, v20, 4);
                    int32_t v21 = g6; // 0x3806d
                    int32_t v22 = *(int32_t *)(v21 + 16); // 0x3806d
                    g4 = v22;
                    v14 = v21;
                    v15 = v22;
                    v13 = v8;
                } else {
                    v14 = v11;
                    v15 = v12;
                    v13 = v9;
                }
            }
            int32_t v23 = v15 + 4; // 0x38070
            g4 = v23;
            *(int32_t *)(v14 + 16) = v23;
            g4 = function_321d0(g6, g4);
            v6 = v13;
        } else {
            v6 = v9;
        }
    }
    int32_t v24 = g6; // 0x38082
    char v25;
    char v26;
    if (*(char *)(v24 + 21) % 2 != 0) {
        // 0x381d0
        g4 = function_32570(v24, "%d");
        v25 = v26;
    } else {
        // 0x3808c
        v7 = 0;
        int32_t v27 = function_320f0(v24, 4); // 0x3809e
        g4 = v27;
        if ((char)v27 != 0) {
            int32_t v28 = g6; // 0x380a7
            int32_t v29 = *(int32_t *)(v28 + 16); // 0x380ab
            g4 = v29;
            char v30;
            int32_t v31; // 0x3822c
            int32_t v32; // 0x3822c
            if (*(char *)(v28 + 52) % 2 == 0) {
                int32_t v33 = v29 - *(int32_t *)(v28 + 32); // 0x38220
                g4 = v33;
                int32_t v34 = *(int32_t *)v28; // 0x38223
                g9 = v34;
                *(int32_t *)(v34 + v33) = 0;
                v31 = g6;
                v32 = *(int32_t *)(v31 + 16);
                g4 = v32;
                v30 = v26;
            } else {
                // 0x380b4
                g9 = v29;
                int32_t v35 = v29 - *(int32_t *)(v28 + 32); // 0x380b6
                g9 = v35;
                int32_t v36 = *(int32_t *)v28 + v35; // 0x380b9
                g9 = v36;
                if (v36 != 0) {
                    // 0x380bd
                    v8 = v6;
                    int32_t v37 = &v8; // 0x380e4
                    g4 = v37;
                    g4 = function_2cb10(v36, v37, 4);
                    int32_t v38 = g6; // 0x380f0
                    int32_t v39 = *(int32_t *)(v38 + 16); // 0x380f0
                    g4 = v39;
                    v31 = v38;
                    v32 = v39;
                    v30 = v7;
                } else {
                    v31 = v28;
                    v32 = v29;
                    v30 = v26;
                }
            }
            int32_t v40 = v32 + 4; // 0x380f3
            g4 = v40;
            *(int32_t *)(v31 + 16) = v40;
            g4 = function_321d0(g6, g4);
            v25 = v30;
        } else {
            v25 = v26;
        }
    }
    int32_t v41 = g6; // 0x38105
    int32_t v42; // 0x381c3
    if (*(char *)(v41 + 21) % 2 != 0) {
        // 0x381b0
        v42 = function_32570(v41, "%d");
        g4 = v42;
    } else {
        // 0x3811b
        v8 = 0;
        int32_t v43 = function_320f0(v41, 4); // 0x3812d
        g4 = v43;
        if ((char)v43 != 0) {
            int32_t v44 = g6; // 0x38136
            int32_t v45 = *(int32_t *)(v44 + 16); // 0x3813a
            g4 = v45;
            int32_t v46; // 0x38244
            int32_t v47; // 0x38244
            if (*(char *)(v44 + 52) % 2 == 0) {
                int32_t v48 = v45 - *(int32_t *)(v44 + 32); // 0x38238
                g4 = v48;
                int32_t v49 = *(int32_t *)v44; // 0x3823b
                g9 = v49;
                *(int32_t *)(v49 + v48) = 0;
                v46 = g6;
                v47 = *(int32_t *)(v46 + 16);
                g4 = v47;
            } else {
                // 0x38143
                g9 = v45;
                int32_t v50 = v45 - *(int32_t *)(v44 + 32); // 0x38145
                g9 = v50;
                int32_t v51 = *(int32_t *)v44 + v50; // 0x38148
                g9 = v51;
                if (v51 != 0) {
                    // 0x3814c
                    v7 = v25;
                    int32_t v52 = &v7; // 0x38173
                    g4 = v52;
                    g4 = function_2cb10(v51, v52, 4);
                    int32_t v53 = g6; // 0x3817f
                    int32_t v54 = *(int32_t *)(v53 + 16); // 0x3817f
                    g4 = v54;
                    v46 = v53;
                    v47 = v54;
                } else {
                    v46 = v44;
                    v47 = v45;
                }
            }
            int32_t v55 = v47 + 4; // 0x38182
            g4 = v55;
            *(int32_t *)(v46 + 16) = v55;
            int32_t v56 = function_321d0(g6, g4); // 0x3818f
            g4 = v56;
            v42 = v56;
        } else {
            v42 = v43;
        }
    }
    int32_t result; // 0x3819b
    if (v4 != 0) {
        // 0x38198
        result = function_28600(v4);
        g4 = result;
    } else {
        result = v42;
    }
    // 0x381a0
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x3824f - 0x38250
int32_t function_3824f(void) {
    // 0x3824f
    return g4;
}

// Address range: 0x3829b - 0x3829e
int32_t function_3829b(void) {
    // 0x3829b
    return g4;
}

// Address range: 0x382e9 - 0x382ea
int32_t function_382e9(void) {
    // 0x382e9
    return g4;
}

// Address range: 0x382f3 - 0x382f4
int32_t function_382f3(void) {
    // 0x382f3
    return g4;
}

// Address range: 0x38334 - 0x38335
int32_t function_38334(void) {
    // 0x38334
    return g4;
}

// Address range: 0x38344 - 0x38345
int32_t function_38344(void) {
    // 0x38344
    return g4;
}

// Address range: 0x3836d - 0x3836e
int32_t function_3836d(void) {
    // 0x3836d
    return g4;
}

// Address range: 0x38376 - 0x38377
int32_t function_38376(void) {
    // 0x38376
    return g4;
}

// Address range: 0x38390 - 0x3839c
int32_t function_38390(void) {
    int32_t v1 = g4; // 0x38390
    unsigned char v2 = (char)v1 & 36; // 0x38390
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x38390
    g4 = v3;
    char * v4 = (char *)v3; // 0x38392
    *v4 = *v4 + v2;
    int32_t v5 = g4; // 0x38394
    g4 = g7 / 256 + v5 & 255 | v5 & -256;
    int32_t result = function_c68d839a(g10); // 0x38397
    g4 = result;
    return result;
}

// Address range: 0x383ca - 0x383cb
int32_t function_383ca(void) {
    // 0x383ca
    return g4;
}

// Address range: 0x383f8 - 0x38566
int32_t function_383f8(void) {
    int32_t v1 = g5 - 28; // 0x383f8
    g9 = v1;
    *(int32_t *)v1 = 128;
    *(int32_t *)(g5 - 92) = g9;
    int32_t v2 = function_30bf0(g6, 0, (int32_t *)g9); // 0x38414
    g4 = v2;
    int32_t v3 = g5; // 0x38548
    if ((char)v2 != 0) {
        int32_t v4 = *(int32_t *)(v3 - 76); // 0x38548
        g10 = v4;
        g4 = *(int32_t *)(v3 - 92);
        int32_t v5 = v4 - *(int32_t *)(v3 - 56); // 0x38556
        g10 = v5;
        int32_t v6 = *(int32_t *)(v3 - 88) + v5; // 0x3855d
        g10 = v6;
        *(int32_t *)(v3 - 28) = v6;
        return g4;
    }
    // 0x38421
    *(int32_t *)(v3 - 32) = 0;
    g8 = 0;
    if (*(char *)(g5 - 67) % 2 != 0) {
        // bb
        g4 = function_38344();
    }
    int32_t v7 = function_309b0(g6, 4); // 0x3843f
    g4 = v7;
    if ((char)v7 == 0) {
        // bb234
        g4 = function_3836d();
    }
    int32_t v8 = *(int32_t *)(g5 - 76); // 0x38450
    g4 = v8;
    int32_t v9; // 0x3845c
    int32_t v10; // 0x38453
    if (*(char *)(g5 - 36) % 2 == 0) {
        // bb235
        v10 = function_38610();
        g4 = v10;
        v9 = g5;
    } else {
        v9 = g5;
        v10 = v8;
    }
    // 0x38459
    g4 = v10 - *(int32_t *)(v9 - 56);
    int32_t v11 = v9 - 28; // 0x3845c
    g9 = v11;
    *(int32_t *)(v9 - 92) = v11;
    int32_t v12 = *(int32_t *)(g5 - 88) + g4; // 0x38462
    g4 = v12;
    int32_t v13; // 0x3846b
    if (v12 == 0) {
        // bb236
        g4 = function_386a0();
        v13 = g5;
    } else {
        v13 = g5;
    }
    int32_t v14 = *(int32_t *)(v13 - 28); // 0x3846b
    g9 = v14;
    *(int32_t *)(v13 - 32) = v14;
    unsigned char v15 = *(char *)(g4 + 3); // 0x38471
    g9 = v15;
    *(char *)(g5 - 32) = v15;
    unsigned char v16 = *(char *)(g4 + 2); // 0x38478
    g9 = v16;
    *(char *)(g5 - 31) = v16;
    unsigned char v17 = *(char *)(g4 + 1); // 0x3847f
    g9 = v17;
    *(char *)(g5 - 30) = v17;
    int32_t v18 = *(int32_t *)(g5 - 92); // 0x38486
    g9 = v18;
    *(char *)(g5 - 29) = *(char *)g4;
    int32_t v19 = g5 - 32; // 0x3849a
    g4 = v19;
    g4 = function_2cb10(v18, v19, 4);
    g4 = *(int32_t *)(g5 - 76);
    g10 = *(int32_t *)(g5 - 28);
    int32_t result = function_3861e(); // 0x384ac
    g4 = result;
    return result;
}

// Address range: 0x3856a - 0x3857f
int32_t function_3856a(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x1bba7439); // 0x3856a
    *v1 = *v1 - 1;
    int32_t v2 = g4 - g10; // 0x38570
    g4 = v2;
    int32_t v3; // ebp
    if (v2 != 0) {
        int32_t * v4 = (int32_t *)(v3 - 76); // 0x38574
        *v4 = *v4 + v2;
    }
    // 0x38577
    *(int32_t *)(v3 - 32) = g8;
    return g4;
}

// Address range: 0x385a5 - 0x385bd
int32_t function_385a5(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x397663ab); // 0x385a5
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    int32_t v3 = *(int32_t *)(v2 - 32) - g9; // 0x385ae
    g4 = v3;
    if (v3 != 0) {
        int32_t * v4 = (int32_t *)(v2 - 76); // 0x385b2
        *v4 = *v4 + v3;
    }
    // 0x385b5
    *(int32_t *)(v2 - 28) = g10;
    int32_t result = function_38376(); // 0x385b8
    g4 = result;
    return result;
}

// Address range: 0x385c0 - 0x385e5
int32_t function_385c0(void) {
    int32_t v1 = g5 - 28; // 0x385c0
    g9 = v1;
    *(int32_t *)v1 = 128;
    *(int32_t *)(g5 - 92) = g9;
    int32_t result = function_30bf0(g6, 0, (int32_t *)g9); // 0x385dc
    g4 = result;
    return result;
}

// Address range: 0x385e5 - 0x385f1
int32_t function_385e5(void) {
    // 0x385e5
    *(int32_t *)(g5 - 32) = 0;
    int32_t result = function_383ca(); // 0x385ec
    g4 = result;
    return result;
}

// Address range: 0x385f8 - 0x3860b
int32_t function_385f8(void) {
    int32_t v1 = g4; // 0x385f8
    g9 = v1;
    int32_t v2; // ebp
    int32_t v3 = *(int32_t *)(v2 - 88); // 0x385fa
    g7 = v3;
    int32_t v4 = v1 - *(int32_t *)(v2 - 56); // 0x385fd
    g9 = v4;
    int32_t v5 = *(int32_t *)(v4 + v3); // 0x38600
    g8 = v5;
    *(int32_t *)(v2 - 32) = v5;
    int32_t result = function_38334(); // 0x38606
    g4 = result;
    return result;
}

// Address range: 0x38610 - 0x3861e
int32_t function_38610(void) {
    int32_t v1 = g4; // 0x38610
    g9 = v1;
    int32_t v2 = *(int32_t *)(g5 - 88); // 0x38612
    g7 = v2;
    int32_t v3 = v1 - *(int32_t *)(g5 - 56); // 0x38615
    g9 = v3;
    int32_t v4 = *(int32_t *)(v3 + v2); // 0x38618
    g10 = v4;
    *(int32_t *)(g5 - 28) = v4;
    return g4;
}

// Address range: 0x3861e - 0x38629
int32_t function_3861e(void) {
    int32_t v1 = g4 + 4; // 0x3861e
    g4 = v1;
    *(int32_t *)(g5 - 76) = v1;
    int32_t result = function_38376(); // 0x38624
    g4 = result;
    return result;
}

// Address range: 0x38630 - 0x38631
int32_t function_38630(void) {
    // 0x38630
    return g4;
}

// Address range: 0x38660 - 0x3866f
int32_t function_38660(void) {
    int32_t v1 = g4; // 0x38660
    int32_t result; // 0x38662
    if (v1 == 0) {
        // bb
        result = function_383ca();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x38668
    return result;
}

// Address range: 0x38674 - 0x38679
int32_t function_38674(void) {
    int32_t result = function_383ca(); // 0x38674
    g4 = result;
    return result;
}

// Address range: 0x38680 - 0x38696
int32_t function_38680(void) {
    int32_t v1 = *(int32_t *)(g5 - 76); // 0x38680
    g9 = v1;
    int32_t v2 = *(int32_t *)(g5 - 88); // 0x38683
    g7 = v2;
    g4 = v1;
    int32_t v3 = v1 - *(int32_t *)(g5 - 56); // 0x38688
    g4 = v3;
    int32_t v4 = *(int32_t *)(v3 + v2); // 0x3868b
    g4 = v4;
    *(int32_t *)(g5 - 32) = v4;
    return g4;
}

// Address range: 0x386a0 - 0x386a7
int32_t function_386a0(void) {
    int32_t result = g9; // 0x386a0
    g4 = result;
    return result;
}

// Address range: 0x386b0 - 0x386bb
int32_t function_386b0(void) {
    // 0x386b0
    int32_t v1; // ebp
    int32_t v2 = v1 - 32; // 0x386b0
    g4 = v2;
    *(int32_t *)(v1 - 96) = v2;
    int32_t result = function_382f3(); // 0x386b6
    g4 = result;
    return result;
}

// Address range: 0x386bb - 0x386c2
int32_t function_386bb(void) {
    int32_t result = g9; // 0x386bb
    g4 = result;
    return result;
}

// Address range: 0x386c3 - 0x386c4
int32_t function_386c3(void) {
    // 0x386c3
    return g4;
}

// Address range: 0x386cc - 0x386d9
int32_t function_386cc(void) {
    // 0x386cc
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 88);
    return g4;
}

// Address range: 0x38700 - 0x3870e
int32_t function_38700(int32_t a1) {
    // 0x38700
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g159;
    return g4;
}

// Address range: 0x38710 - 0x38749
int32_t function_38710(int32_t a1) {
    // 0x38710
    g8 = g9;
    g10 = g4;
    g9 = a1;
    int32_t v1 = function_261f0(a1); // 0x3872c
    g4 = v1;
    g6 = v1;
    if (v1 == 0) {
        int32_t v2 = function_38820((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x38735
        g4 = v2;
    }
    int32_t result = function_38777(); // 0x38747
    g4 = result;
    return result;
}

// Address range: 0x38750 - 0x38760
int32_t function_38750(void) {
    int32_t v1 = g4; // 0x38750
    int32_t result; // 0x38753
    if (v1 == 2) {
        // bb
        result = function_38890();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x38759
    return result;
}

// Address range: 0x38765 - 0x38766
int32_t function_38765(void) {
    // 0x38765
    return g4;
}

// Address range: 0x38770 - 0x38771
int32_t function_38770(void) {
    // 0x38770
    return g4;
}

// Address range: 0x38777 - 0x38820
int32_t function_38777(void) {
    // 0x38777
    g4 = g292;
    int32_t v1 = *(int32_t *)(g292 + 16); // 0x3877c
    g10 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x3877f
    g4 = v2;
    g8 = *(int32_t *)(v2 + 76);
    g4 = function_25190(g6);
    int32_t v3 = g5; // 0x3878c
    int32_t v4 = v3 - 560; // 0x3878c
    g9 = v4;
    g4 = *(int32_t *)(v3 - 572);
    function_1e010(v4, "%s%s");
    int32_t v5 = g5; // 0x387b0
    g4 = v5 - 555;
    g9 = *(int32_t *)(v5 - 580);
    int32_t v6 = *(int32_t *)(v5 - 584); // 0x387c3
    g4 = v6;
    g10 = v6;
    int32_t v7; // 0x387f1
    if (v6 != 1) {
        // bb
        g4 = function_38750();
        v7 = g10;
    } else {
        v7 = v6;
    }
    // 0x387ee
    g4 = function_27920(g6, (char *)&g129, (char *)v7);
    int32_t v8 = function_26220(g6); // 0x38805
    g4 = v8;
    g6 = v8;
    int32_t result; // 0x3880e
    if (v8 != 0) {
        // bb11
        result = function_38777();
        g4 = result;
    } else {
        result = v8;
    }
    // 0x38814
    g10 = *(int32_t *)(g5 - 584);
    g8 = *(int32_t *)(g5 - 580);
    return result;
}

// Address range: 0x38820 - 0x3888f
int32_t function_38820(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x38820
    g9 = v1;
    int32_t v2 = function_26190(v1); // 0x38826
    g4 = v2;
    g6 = v2;
    if (v2 == 0) {
        // 0x38884
        g6 = a1;
        g10 = a2;
        g8 = a3;
        g5 = a4;
        return 0;
    }
    g4 = function_25190(v2);
    int32_t v3 = g5; // 0x38840
    int32_t v4 = v3 - 292; // 0x38840
    g9 = v4;
    g4 = *(int32_t *)(v3 - 572);
    function_1e010(v4, "%s%s:");
    g7 = g5 - 287;
    g4 = g10;
    g9 = g8;
    g4 = function_38710(g6);
    int32_t result = function_261c0(g6); // 0x38879
    g4 = result;
    g6 = result;
    while (result != 0) {
        // 0x38838
        g4 = function_25190(result);
        v3 = g5;
        v4 = v3 - 292;
        g9 = v4;
        g4 = *(int32_t *)(v3 - 572);
        function_1e010(v4, "%s%s:");
        g7 = g5 - 287;
        g4 = g10;
        g9 = g8;
        g4 = function_38710(g6);
        result = function_261c0(g6);
        g4 = result;
        g6 = result;
    }
    // 0x38884
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x38890 - 0x388a3
int32_t function_38890(void) {
    // 0x38890
    return g4;
}

// Address range: 0x388a7 - 0x388c1
int32_t function_388a7(int32_t a1) {
    // 0x388a7
    g8++;
    g4 &= -252;
    uint32_t v1 = g6; // 0x388ac
    g6 = 256 * (int32_t)((char)(v1 / 512) % 128) | v1 & -0xff01;
    int32_t v2 = g7; // 0x388af
    char * v3 = (char *)(v2 - 0x76f7dbbc); // 0x388af
    unsigned char v4 = *v3; // 0x388af
    unsigned char v5 = v4 + (char)v2; // 0x388af
    *v3 = v5;
    int32_t v6 = g4; // 0x388b5
    g4 = (int32_t)((char)v6 - (v5 < v4 ? 37 : 36)) | v6 & -256;
    g4 = function_27680((int32_t)&g870, (char *)&g870, (int32_t)&g870);
    int32_t result = function_38765(); // 0x388bc
    g4 = result;
    return result;
}

// Address range: 0x388d0 - 0x38a52
int32_t function_388d0(int32_t a1, int32_t a2) {
    // 0x388d0
    g7 = (int32_t)"system:network";
    int32_t v1 = g8; // 0x388d8
    int32_t v2 = g10; // 0x388d9
    int32_t v3 = g6; // 0x388da
    g6 = 0;
    g10 = a1;
    g8 = a2;
    int32_t v4 = -1; // 0x38923
    int32_t v5; // 0x389d1
    int32_t result; // 0x3893f
    int32_t v6; // 0x3896e
    int32_t v7; // 0x389b8
    while (true) {
        // 0x388f4
        g4 = g292;
        int32_t v8 = *(int32_t *)(g292 + 16); // 0x388f9
        g4 = v8;
        int32_t v9 = *(int32_t *)v8; // 0x388fc
        g9 = v9;
        g9 = *(int32_t *)(v9 + 76);
        if (v8 == 0) {
            // break -> 0x38a40
            break;
        }
        // 0x3891a
        if (*(char *)v8 == 0) {
            // break -> 0x38a40
            break;
        }
        if (v4 == 0) {
            // 0x38938
            g9 = 0;
            g4 = (int32_t)&g129;
            result = function_37bf0(v8, a1, a2);
            g7 = (int32_t)&g129;
            g9 = g8;
            g4 = g10;
            function_38710(result);
            g4 = result;
            v6 = function_27340(result, (int32_t)"members", 1);
            g4 = v6;
            if (v6 == 0) {
                goto lab_0x38a31;
            } else {
                // 0x3897e
                g4 = g292;
                g6 = 0;
                uint32_t v10 = *(int32_t *)(g292 + 16); // 0x38985
                uint32_t v11 = *(int32_t *)&g273; // 0x389a0
                g4 = v11;
                v7 = v11 >= v10 ? v10 : 0;
                g6 = v7;
                g7 = 0;
                g9 = v11 >= v10;
                if (v10 < 0) {
                    v5 = 0;
                    goto lab_0x389ce;
                } else {
                    int32_t v12 = v11 < v10 ? v11 : 0; // 0x389cc
                    g7 = v12;
                    v5 = v12;
                    goto lab_0x389ce;
                }
            }
        }
        // 0x38928
        g7 = (int32_t)"system:access";
        g6 = 1;
        v4 = 0;
    }
    // 0x38a40
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
  lab_0x38a31:
    // 0x38a31
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x389ce:
    // 0x389ce
    g4 = v6;
    int32_t v13 = v5 | v7; // 0x389d1
    g6 = v13;
    function_27680(v6, "numSlots", v13);
    g4 = g292;
    int32_t v14 = *(int32_t *)(g292 + 16); // 0x389ec
    g9 = v14;
    int32_t v15 = *(int32_t *)v14; // 0x389ef
    g4 = v15;
    uint32_t v16 = *(int32_t *)(v15 + 68); // 0x389f1
    g4 = v16;
    uint32_t v17 = g6; // 0x38a03
    int32_t v18 = v17 >= v16 ? v16 : 0; // 0x38a05
    g7 = v18;
    g9 = 0;
    g10 = v17 >= v16;
    int32_t v19; // 0x38a1b
    if (v16 < 0) {
        v19 = 0;
        goto lab_0x38a18;
    } else {
        int32_t v20 = v17 < v16 ? v17 : 0; // 0x38a16
        g9 = v20;
        v19 = v20;
        goto lab_0x38a18;
    }
  lab_0x38a18:
    // 0x38a18
    g4 = v6;
    int32_t v21 = v19 | v18; // 0x38a1b
    g7 = v21;
    g4 = function_27680(v6, "numPlayers", v21);
    goto lab_0x38a31;
}

// Address range: 0x38a60 - 0x38a90
int32_t function_38a60(void) {
    int32_t v1 = *(int32_t *)&g273; // 0x38a66
    g4 = v1;
    g9 = v1;
    if (v1 == 0) {
        // 0x38a88
        return 0;
    }
    // 0x38a77
    g9 = v1;
    g4 = g275;
    return g275;
}

// Address range: 0x38a94 - 0x38b59
int32_t function_38a94(void) {
    // 0x38a94
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x72ffd98c); // 0x38a94
    *v2 = *v2 - 1;
    char * v3 = (char *)(v1 - 119); // 0x38a9f
    *v3 = (char)g9 + *v3;
    g4 = __asm_in(86);
    *(int32_t *)(g11 - 4) = g6;
    g10 = *(int32_t *)(v1 + 8);
    *(int32_t *)(g11 - 20) = 36;
    g4 = function_26cf0();
    *(int32_t *)(g11 + 4) = (int32_t)"OnMatchSessionUpdate";
    int32_t v4 = g4; // 0x38abf
    g6 = v4;
    *(int32_t *)g11 = v4;
    g4 = function_26330((int32_t)&g870);
    *(int32_t *)(g11 + 8) = (int32_t)"updated";
    *(int32_t *)(g11 + 4) = (int32_t)"state";
    *(int32_t *)g11 = g6;
    g4 = function_27920((int32_t)&g870, (char *)&g870, (char *)&g870);
    *(int32_t *)(g11 + 8) = 0;
    *(int32_t *)(g11 + 4) = (int32_t)"update";
    *(int32_t *)g11 = g10;
    int32_t v5 = function_27340((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x38af4
    g4 = v5;
    if (v5 != 0) {
        // 0x38afd
        *(int32_t *)g11 = v5;
        g4 = function_26d60((int32_t)&g870);
        *(int32_t *)g11 = g6;
        *(int32_t *)(g11 + 4) = g4;
        g4 = function_25fb0((int32_t)&g870, (int32_t)&g870);
    }
    // 0x38b11
    *(int32_t *)(g11 + 8) = 0;
    *(int32_t *)(g11 + 4) = (int32_t)"delete";
    *(int32_t *)g11 = g10;
    int32_t v6 = function_27340((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x38b24
    g4 = v6;
    if (v6 != 0) {
        // 0x38b2d
        *(int32_t *)g11 = v6;
        g4 = function_26d60((int32_t)&g870);
        *(int32_t *)g11 = g6;
        *(int32_t *)(g11 + 4) = g4;
        g4 = function_25fb0((int32_t)&g870, (int32_t)&g870);
    }
    // 0x38b41
    g4 = g297;
    g9 = g297;
    *(int32_t *)(g11 + 4) = g6;
    *(int32_t *)g11 = g4;
    g6 = *(int32_t *)(g11 + 16);
    g10 = *(int32_t *)(g11 + 20);
    return g4;
}

// Address range: 0x38b70 - 0x38b71
int32_t function_38b70(int32_t a1) {
    // 0x38b70
    return g4;
}

// Address range: 0x38bc5 - 0x38bf8
int32_t function_38bc5(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 - 0x38fbdba4); // 0x38bc5
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x38bcb
    g4 = v2 + 36 & 255 | v2 & -256;
    function_229d0(&g870);
    int32_t result = (int32_t)g450; // 0x38bd6
    g4 = result;
    g9 = *(int32_t *)g450;
    g7 = *(int32_t *)(g5 + 8);
    g9 = *(int32_t *)g450;
    g6 = a1;
    return result;
}

// Address range: 0x38c00 - 0x38d71
int32_t function_38c00(int32_t a1, int32_t a2, int32_t * a3, int32_t a4) {
    int32_t v1 = (int32_t)a3;
    g9 = a4;
    int32_t v2 = g6; // 0x38c09
    int32_t v3 = g10; // 0x38c0c
    g6 = v1;
    int32_t v4 = g8; // 0x38c12
    g10 = a1;
    g8 = a2;
    int32_t v5; // 0x38cb3
    if ((a4 & 9) != 0) {
        int32_t v6 = function_27c00(a1, "server/adronline", (int32_t *)"0.0.0.0"); // 0x38c56
        int32_t v7 = g6 + (int32_t)&g17; // 0x38c67
        g4 = v7;
        g4 = function_2d970((int32_t *)v7, v6, (int32_t)"GNU");
        int32_t v8 = function_27c00(g10, "server/adrlocal", (int32_t *)"0.0.0.0"); // 0x38c88
        int32_t v9 = g6 + (int32_t)&g66; // 0x38c99
        g4 = v9;
        g4 = function_2d970((int32_t *)v9, v8, (int32_t)"GNU");
        int32_t v10 = a4 & 2; // 0x38caa
        g9 = v10;
        if (v10 == 0) {
            // 0x38c29
            g6 = v2;
            g4 = 1;
            g10 = v3;
            g8 = v4;
            return 1;
        }
        // 0x38c40
        v5 = g6;
    } else {
        int32_t v11 = a4 & 2; // 0x38c20
        g9 = v11;
        if (v11 == 0) {
            // 0x38c29
            g6 = v2;
            g4 = 1;
            g10 = v3;
            g8 = v4;
            return 1;
        }
        v5 = v1;
    }
    int32_t v12 = v5 + (int32_t)&g81; // 0x38ccf
    g4 = v12;
    g4 = function_2da40(v12, (int32_t)"GNU", "connect %s %s\n");
    int32_t v13 = function_27ea0(g10, "server/xuid", 0, 0); // 0x38d00
    g4 = v13;
    *(int32_t *)(g6 + (int32_t)&g94) = v13;
    *(int32_t *)(g6 + (int32_t)&g95) = g9;
    int32_t v14 = function_27ea0(g10, "server/reservationid", 0, 0); // 0x38d2c
    g4 = v14;
    int32_t v15 = g9 | v14; // 0x38d33
    g7 = v15;
    int32_t v16; // 0x38d3e
    if (v15 == 0) {
        if (a2 == 0) {
            // 0x38d58
            *(int32_t *)(g6 + (int32_t)&g96) = 0;
            *(int32_t *)(g6 + (int32_t)&g97) = 0;
            // 0x38c29
            g6 = v2;
            g4 = 1;
            g10 = v3;
            g8 = v4;
            return 1;
        }
        // 0x38d3b
        v16 = function_50390(a2);
        g4 = v16;
    } else {
        v16 = v14;
    }
    // 0x38d43
    *(int32_t *)(g6 + (int32_t)&g96) = v16;
    *(int32_t *)(g6 + (int32_t)&g97) = g9;
    // 0x38c29
    g6 = v2;
    g4 = 1;
    g10 = v3;
    g8 = v4;
    return 1;
}

// Address range: 0x38d71 - 0x38d73
int32_t function_38d71(void) {
    int32_t result = function_38d80(); // 0x38d71
    g4 = result;
    return result;
}

// Address range: 0x38d80 - 0x38d89
int32_t function_38d80(void) {
    // 0x38d80
    g4 = 0;
    g9 = 0;
    return 0;
}

// Address range: 0x38d90 - 0x38db5
int32_t function_38d90(void) {
    // 0x38d90
    g4 = (int32_t)"FCVAR_NEVER_AS_STRING";
    int32_t result; // 0x38db0
    if ((g478 & 16) == 0) {
        // 0x38da1
        g4 = g479;
        g9 = (int32_t)&g129;
        int32_t v1 = *(int32_t *)(g479 + 36); // 0x38dab
        result = v1 == 0 ? (int32_t)&g129 : v1;
        g4 = result;
    } else {
        result = (int32_t)"FCVAR_NEVER_AS_STRING";
    }
    // 0x38db3
    return result;
}

// Address range: 0x38dc0 - 0x38dcb
int32_t function_38dc0(int32_t a1) {
    // 0x38dc0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x38dc7
    g4 = result;
    return result;
}

// Address range: 0x38dd0 - 0x38edf
int32_t function_38dd0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x38de6
    g6 = a2;
    int32_t v3 = g10; // 0x38dec
    int32_t v4 = g8; // 0x38def
    g8 = a1 - 4;
    int32_t v5 = function_25190(a2); // 0x38df8
    g4 = v5;
    g10 = v5;
    int32_t v6 = function_2cc30((int32_t)"OnEngineClientSignonStateChange", (char *)v5); // 0x38e0a
    g4 = v6;
    int32_t result; // 0x38ecb
    if (v6 != 0) {
        int32_t v7 = function_2cc30((int32_t)"OnEngineClientSignonStatePrepareChange", (char *)g10); // 0x38e6b
        g4 = v7;
        if (v7 == 0) {
            int32_t v8 = function_27c00(g6, "reason", (int32_t *)&g129); // 0x38e87
            g4 = v8;
            g6 = v8;
            int32_t v9 = function_2cc30((int32_t)"reload", (char *)v8); // 0x38e99
            g4 = v9;
            if (v9 != 0) {
                // bb249
                g4 = function_38f98();
            }
            // 0x38ea6
            *(char *)(g8 + 20) = 1;
            g6 = v2;
            g10 = v3;
            g8 = v4;
            return g4;
        }
        // 0x38ec0
        result = function_2cc30((int32_t)"OnEngineEndGame", (char *)g10);
        g4 = result;
        if (result == 0) {
            // 0x38ed8
            return result;
        }
    } else {
        int32_t v10 = function_27fc0(g6, "old", 0); // 0x38e26
        g4 = v10;
        g10 = v10;
        int32_t v11 = function_27fc0(g6, "new", 0); // 0x38e40
        g4 = v11;
        if (v11 <= 1) {
            int32_t v12 = function_38f30(); // 0x38e48
            g4 = v12;
            result = v12;
        } else {
            result = v11;
        }
    }
    // 0x38e4e
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result;
}

// Address range: 0x38ee3 - 0x38ee9
int32_t function_38ee3(void) {
    // 0x38ee3
    return g4;
}

// Address range: 0x38ee9 - 0x38f29
int32_t function_38ee9(void) {
    int32_t v1 = *(int32_t *)(g4 + 92); // 0x38ee9
    g4 = v1;
    g9 = *(int32_t *)v1;
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v2 = function_26cf0(); // 0x38f10
    g4 = v2;
    g6 = v2;
    g4 = function_26330(v2);
    int32_t result = function_38f77(); // 0x38f27
    g4 = result;
    return result;
}

// Address range: 0x38f30 - 0x38f40
int32_t function_38f30(void) {
    // 0x38f30
    return g4;
}

// Address range: 0x38f6e - 0x38f6f
int32_t function_38f6e(void) {
    // 0x38f6e
    return g4;
}

// Address range: 0x38f77 - 0x38f92
int32_t function_38f77(void) {
    // 0x38f77
    g4 = g297;
    *(int32_t *)(g5 + 12) = g6;
    g8 = *(int32_t *)(g5 - 4);
    g6 = *(int32_t *)(g5 - 12);
    *(int32_t *)(g5 + 8) = g4;
    int32_t result = g10; // 0x38f88
    g4 = result;
    g10 = *(int32_t *)(g5 - 8);
    return result;
}

// Address range: 0x38f98 - 0x38ff1
int32_t function_38f98(void) {
    // 0x38f98
    function_2cc30((int32_t)"load", (char *)g6);
    int32_t result = (int32_t)g283; // 0x38fb5
    g4 = result;
    g9 = *(int32_t *)g283;
    g4 = result;
    g9 = *(int32_t *)g283;
    return result;
}

// Address range: 0x39013 - 0x390ad
int32_t function_39013(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 + 0x241c89c6); // 0x39013
    *v1 = *v1 - 1;
    g4 = function_26d40();
    int32_t v2 = function_7ab57(g10, (int32_t)&g870); // 0x39021
    g4 = v2;
    g10 = v2;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    g4 = a1;
    int32_t v3 = g6; // 0x39049
    int32_t v4 = g10; // 0x3904c
    int32_t * v5 = (int32_t *)(a1 + 16); // 0x3904f
    int32_t v6 = *v5; // 0x3904f
    g9 = v6;
    int32_t result; // 0x390ac
    if (v6 == 0) {
        // 0x39056
        *v5 = 1;
        g4 = g297;
        g10 = *(int32_t *)(g297 + 8);
        int32_t v7 = function_26cf0(); // 0x3906e
        g4 = v7;
        g6 = v7;
        function_27a20(v7, "OnMatchSessionUpdate", "state", "ready");
        g4 = g297;
        result = g297;
    } else {
        result = a1;
    }
    // 0x390a3
    g6 = v3;
    g10 = v4;
    return result;
}

// Address range: 0x390ad - 0x3911a
int32_t function_390ad(int32_t a1, int32_t a2) {
    // 0x390ad
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = *(int32_t *)&g273; // 0x390c6
    g4 = v2;
    int32_t v3 = g6; // 0x390cb
    int32_t v4 = g10; // 0x390ce
    g6 = a2;
    g10 = a1;
    g9 = v2;
    int32_t * v5 = (int32_t *)(a1 + 8); // 0x390e5
    g7 = *v5;
    int32_t v6 = *v5; // 0x390fe
    g4 = v6;
    int32_t result = function_2a090(v6, a2, 0); // 0x39104
    g4 = result;
    g10 = v4;
    g6 = v3;
    return result;
}

// Address range: 0x3913d - 0x3916b
int32_t function_3913d(int32_t a1, int32_t a2) {
    // 0x3913d
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x39140
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    g6 = a1;
    return g4;
}

// Address range: 0x39170 - 0x39171
int32_t function_39170(int32_t a1) {
    // 0x39170
    return g4;
}

// Address range: 0x39193 - 0x391d0
int32_t function_39193(int32_t a1, int32_t a2) {
    // 0x39193
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1 = g5 - 16; // 0x39196
    g9 = v1;
    *(int32_t *)v1 = (int32_t)&g132;
    *(int32_t *)(g5 - 12) = 1;
    int32_t v2 = *(int32_t *)(g6 + 12); // 0x391bb
    g4 = v2;
    int32_t result; // 0x391c5
    if (v2 != 0) {
        // 0x391c2
        result = function_28600(v2);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x391ca
    g6 = a1;
    return result;
}

// Address range: 0x391d0 - 0x39297
int32_t function_391d0(int32_t a1) {
    // 0x391d0
    g6 += 12;
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_1fc30(g6);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x391de
    g4 = v1;
    g4 = function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g6; // 0x391f6
    g6 = a1;
    int32_t v3 = g10; // 0x391fc
    int32_t v4 = g8; // 0x391ff
    int32_t v5; // 0x39208
    if (*(int32_t *)(a1 + 16) == 2) {
        // 0x39228
        g4 = (int32_t)g283;
        g9 = *(int32_t *)g283;
        int32_t v6 = (int32_t)g450; // 0x39243
        g4 = v6;
        g9 = *(int32_t *)g450;
        g10 = v6;
        int32_t v7 = *(int32_t *)g450; // 0x39252
        g4 = v7;
        g4 = *(int32_t *)(v7 + 8);
        int32_t v8 = function_26cf0(); // 0x39261
        g4 = v8;
        g8 = v8;
        g4 = function_27a20(v8, "OnProfilesWriteOpportunity", "reason", "sessionend");
        v5 = g6;
    } else {
        v5 = a1;
    }
    // 0x39208
    g4 = function_39170(v5);
    g10 = v3;
    g6 = v2;
    g8 = v4;
    int32_t result = function_1bc40(); // 0x3921f
    g4 = result;
    return result;
}

// Address range: 0x39298 - 0x39299
int32_t function_39298(void) {
    // 0x39298
    return g4;
}

// Address range: 0x392b0 - 0x392b1
int32_t function_392b0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x392b0
    return g4;
}

// Address range: 0x392ca - 0x392ee
int32_t function_392ca(void) {
    int32_t v1 = g4; // 0x392ca
    g4 = (int32_t)((char)v1 > 75) + v1 + 188 & 255 | v1 & -256;
    char * v2 = (char *)(g6 + 0x4890843); // 0x392ce
    *v2 = (char)g7 + *v2;
    int32_t v3 = g4; // 0x392d4
    unsigned char v4 = (char)v3 & -24; // 0x392d4
    g4 = (int32_t)v4 | v3 & -256;
    int32_t v5 = g7 - 1; // 0x392d6
    g7 = v5;
    if (v4 != 0 && v5 != 0) {
        // bb
        g4 = function_ffff92d7();
    }
    // 0x392d9
    int32_t v6; // ebp
    int32_t * v7 = (int32_t *)(v6 + 0x74c689c0); // 0x392d9
    *v7 = *v7 + 1;
    uint32_t v8 = g6; // 0x392df
    int32_t v9 = g4; // 0x392df
    int32_t v10 = v8 / 256 ^ v9; // 0x392df1
    int32_t v11 = v8 & -0xff01; // 0x392df
    g6 = 256 * v10 & 0xff00 | v11;
    g4 = v9 & -248 | 1;
    int32_t v12 = g8; // 0x392e5
    g6 = 256 * (v12 + v10) & 0xff00 | v11;
    g4 = v12 & -252;
    int32_t result = g4 & -256 | (int32_t)__asm_in_1653((int16_t)g9); // 0x392ec
    g4 = result;
    return result;
}

// Address range: 0x39313 - 0x3931f
int32_t function_39313(void) {
    // 0x39313
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x39315
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x39317
    int32_t v3 = g4; // 0x39317
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    int32_t result = v3 & -252; // 0x3931a
    g4 = result;
    return result;
}

// Address range: 0x39368 - 0x3936d
int32_t function_39368(void) {
    int32_t result = function_8903936e(); // 0x39368
    g4 = result;
    return result;
}

// Address range: 0x393ba - 0x393c6
int32_t function_393ba(int32_t a1) {
    // 0x393ba
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x393bc
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x393be
    int32_t v3 = g4; // 0x393be
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    int32_t result = v3 & -252; // 0x393c1
    g4 = result;
    return result;
}

// Address range: 0x39436 - 0x39444
int32_t function_39436(void) {
    int32_t v1 = g7; // 0x39436
    char * v2 = (char *)(v1 + 0x41e82434); // 0x39436
    *v2 = *v2 + (char)v1;
    g7 = 0;
    return g4;
}

// Address range: 0x39467 - 0x39480
int32_t function_39467(int32_t a1) {
    int32_t v1 = g4; // 0x39467
    int32_t v2 = v1 & ((int32_t)&g862 | -256); // 0x39467
    g4 = v2;
    char * v3 = (char *)v2; // 0x39469
    *v3 = *v3 + (char)(v1 & (int32_t)&g862);
    int32_t v4 = g6; // 0x3946b
    int32_t v5 = g4; // 0x3946b
    g6 = 256 * v5 + v4 & 0xff00 | v4 & -0xff01;
    g4 = v5 & -252 & g9;
    int32_t v6 = g7; // 0x39473
    char * v7 = (char *)(v6 + 0x24e82404); // 0x39473
    *v7 = *v7 + (char)v6;
    int32_t result = function_44c7fffe(); // 0x39479
    g4 = result;
    return result;
}

// Address range: 0x39547 - 0x39548
int32_t function_39547(void) {
    // 0x39547
    return g4;
}

// Address range: 0x3954c - 0x3955a
int32_t function_3954c(void) {
    int32_t v1 = g7; // 0x3954c
    char * v2 = (char *)(v1 - 0x3417dbc4); // 0x3954c
    *v2 = *v2 | (char)v1;
    bool v3 = g7 == 0; // 0x39552
    while (v3) {
        // 0x39552
        v3 = true;
    }
    // 0x39554
    return g4;
}

// Address range: 0x39584 - 0x395b8
int32_t function_39584(int16_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x39584
    *v1 = *v1 - 1;
    int32_t v2 = g7 - 2; // 0x3958d
    g7 = v2;
    int32_t v3; // ebp
    if (v2 != 0 && v3 != -1) {
        // bb
        g4 = function_39547();
    }
    int32_t v4 = __asm_hlt(); // 0x3958f
    g4 = v4;
    uint32_t v5 = g6; // 0x39591
    g6 = 256 * (v5 / 256 + v4 & 255) | v5 & -0xff01;
    char v6 = __asm_in_1658(1); // 0x39594
    int32_t v7 = g4 & -256 | (int32_t)v6; // 0x39594
    g4 = v7;
    char * v8 = (char *)v7; // 0x39596
    *v8 = *v8 + v6;
    int32_t v9 = g6; // 0x39598
    int32_t v10 = g4; // 0x39598
    g6 = 256 * v10 + v9 & 0xff00 | v9 & -0xff01;
    int32_t v11 = v10 & -248; // 0x3959b
    g4 = v11;
    int32_t * v12 = (int32_t *)v11; // 0x3959d
    *v12 = *v12 + v11;
    int32_t v13 = g4; // 0x3959f
    char * v14 = (char *)v13; // 0x3959f
    *v14 = *v14 + (char)v13;
    return g4;
}

// Address range: 0x395c0 - 0x395fa
int32_t function_395c0(int32_t a1, int32_t a2) {
    // 0x395c0
    g6 = a1;
    g4 = a2;
    *(int32_t *)a1 = (int32_t)&g160;
    *(int32_t *)(g6 + 4) = (int32_t)&g161;
    g4 = function_26d60(g4);
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 8) = g4;
    *(int32_t *)(g6 + 12) = g4;
    *(char *)(g6 + 20) = 0;
    return g4;
}

// Address range: 0x395ff - 0x39635
int32_t function_395ff(int32_t a1, int32_t a2) {
    // 0x395ff
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x39602
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    int32_t result = function_392b0(g6, g9, 1); // 0x3962a
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x39636 - 0x39637
int32_t function_39636(void) {
    // 0x39636
    return g4;
}

// Address range: 0x39669 - 0x3969f
int32_t function_39669(void) {
    int32_t v1 = g4; // 0x39669
    *(char *)v1 = (char)v1 | *(char *)&g4;
    int32_t v2 = g4; // 0x3966b
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x3966d
    int32_t v4 = g4; // 0x3966d
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    g4 = v4 & -252;
    int32_t v5; // eflags
    __asm_into(v5);
    uint32_t v6 = g6; // 0x39675
    int32_t v7 = g4; // 0x39675
    g6 = 256 * (v6 / 256 + v7 & 255) | v6 & -0xff01;
    char * v8 = (char *)v7; // 0x3967a
    *v8 = *v8 + (char)v7;
    uint32_t v9 = g6; // 0x3967c
    int32_t v10 = g4; // 0x3967c
    g6 = 256 * (v9 / 256 + v10 & 255) | v9 & -0xff01;
    char * v11 = (char *)v10; // 0x39681
    *v11 = *v11 + (char)v10;
    char * v12 = (char *)(g6 + 0x45c70846); // 0x39683
    *v12 = (char)g7 + *v12;
    g7--;
    int32_t v13 = g4; // 0x3968b
    char * v14 = (char *)v13; // 0x3968b
    *v14 = *v14 + (char)v13;
    uint32_t v15 = g6; // 0x3968d
    g6 = 256 * (v15 / 256 + g4 & 255) | v15 & -0xff01;
    char v16 = __asm_in_1658(0); // 0x39690
    int32_t v17 = g4 & -256 | (int32_t)v16; // 0x39690
    g4 = v17;
    char * v18 = (char *)v17; // 0x39692
    *v18 = *v18 + v16;
    int32_t v19 = g7; // 0x39694
    char * v20 = (char *)(v19 + 0x23e82404); // 0x39694
    *v20 = *v20 + (char)v19;
    int32_t result = function_448d969d(); // 0x3969a
    g4 = result;
    return result;
}

// Address range: 0x396c5 - 0x396cb
int32_t function_396c5(void) {
    // 0x396c5
    return g4;
}

// Address range: 0x396cb - 0x397c2
int32_t function_396cb(void) {
    int32_t v1 = g4; // 0x396cb
    g9 = v1;
    int32_t v2 = g5; // 0x396d3
    int32_t * v3 = (int32_t *)(v2 - 44); // 0x396d3
    g7 = *v3;
    g9 = v1;
    g7 = *(int32_t *)(g10 + 8);
    uint32_t v4 = *(int32_t *)(v2 - 32); // 0x396e9
    g4 = v4;
    int32_t v5; // 0x3979f
    if (v4 >= 1) {
        int32_t v6 = *v3; // 0x396f4
        g4 = v6;
        int32_t v7 = *(int32_t *)v6; // 0x396f7
        g4 = v7;
        if (v7 != 0) {
            // 0x39701
            g8 = 0;
            g10 = 0;
            while (true) {
                int32_t v8 = function_26cf0(); // 0x39727
                g4 = v8;
                *(int32_t *)(g5 - 60) = v8;
                function_26330(g4);
                int32_t v9 = g6; // 0x39757
                g4 = v9;
                int32_t v10 = *(int32_t *)(g8 + v9); // 0x39759
                g4 = v10;
                int32_t v11 = function_27ea0(v10, "xuid", 0, 0); // 0x3975f
                g4 = v11;
                int32_t v12 = *(int32_t *)(g5 - 60); // 0x39768
                g4 = v12;
                function_27600(v12, "xuid", v11, g9);
                g4 = g297;
                g7 = *(int32_t *)(g5 - 60);
                g9 = g297;
                int32_t v13 = g10 + 1; // 0x39793
                g10 = v13;
                int32_t v14 = g6; // 0x39796
                if (*(int32_t *)(v14 + 12) <= v13) {
                    v5 = g5;
                    // break -> 0x3979f
                    break;
                }
                // 0x39710
                g4 = v14;
                int32_t v15 = 4 * v13; // 0x39712
                g8 = v15;
                int32_t v16 = *(int32_t *)(v15 + v14); // 0x39719
                g4 = v16;
                if (v16 == 0) {
                    v5 = g5;
                    // break -> 0x3979f
                    break;
                }
            }
        } else {
            v5 = v2;
        }
    } else {
        v5 = v2;
    }
    int32_t v17 = *(int32_t *)(v5 + 8); // 0x3979f
    g10 = v17;
    int32_t v18 = *(int32_t *)(v17 + 8); // 0x397a2
    g4 = v18;
    g4 = function_38b70(v18);
    g6 = *(int32_t *)(g5 - 36);
    *(int32_t *)(g5 - 32) = 0;
    int32_t result = *(int32_t *)(g5 - 44); // 0x397bb
    g4 = result;
    return result;
}

// Address range: 0x397de - 0x397fe
int32_t function_397de(void) {
    // 0x397de
    g4 = function_2bac0(g6);
    int32_t result = function_7ab57(g10, (int32_t)&g870); // 0x397e9
    g4 = result;
    g7 = *(int32_t *)(g5 - 36);
    g6 = result;
    g7 = *(int32_t *)(g5 - 44);
    return result;
}

// Address range: 0x398d1 - 0x398d7
int32_t function_398d1(void) {
    // 0x398d1
    return g4;
}

// Address range: 0x398d7 - 0x39a56
int32_t function_398d7(void) {
    int32_t v1 = g4; // 0x398d7
    g9 = v1;
    g8 = v1;
    int32_t v2 = *(int32_t *)(g10 + 8); // 0x398e3
    g7 = v2;
    int32_t v3 = g5; // 0x398e6
    g9 = *(int32_t *)(v3 - 56);
    g4 = *(int32_t *)(v1 + 40);
    *(int32_t *)(v3 - 336) = v2;
    *(int32_t *)(g5 - 340) = g9;
    *(int32_t *)(g5 - 332) = g4;
    g4 = g10;
    int32_t v4 = g5; // 0x39905
    g9 = *(int32_t *)(v4 - 340);
    g7 = *(int32_t *)(v4 - 336);
    g4 = *(int32_t *)(v4 + 12);
    uint32_t v5 = *(int32_t *)(v4 - 44); // 0x3992d
    g7 = v5;
    int32_t v6; // 0x399ec
    if (v5 >= 1) {
        int32_t v7 = *(int32_t *)(v4 - 56); // 0x39938
        g4 = v7;
        int32_t v8 = *(int32_t *)v7; // 0x3993b
        g9 = v8;
        if (v8 != 0) {
            // 0x39945
            g8 = 0;
            g10 = 0;
            while (true) {
                int32_t v9 = function_26cf0(); // 0x3996b
                g4 = v9;
                *(int32_t *)(g5 - 332) = v9;
                function_26330(g4);
                int32_t v10 = g6; // 0x3999e
                g4 = v10;
                int32_t v11 = *(int32_t *)(g8 + v10); // 0x399a0
                g4 = v11;
                int32_t v12 = function_27ea0(v11, "xuid", 0, 0); // 0x399a6
                g4 = v12;
                int32_t v13 = *(int32_t *)(g5 - 332); // 0x399af
                g4 = v13;
                function_27600(v13, "xuid", v12, g9);
                g4 = g297;
                int32_t v14 = g5; // 0x399ce
                g7 = *(int32_t *)(v14 - 332);
                g9 = g297;
                int32_t v15 = g10 + 1; // 0x399e0
                g10 = v15;
                int32_t v16 = g6; // 0x399e3
                if (*(int32_t *)(v16 + 12) <= v15) {
                    v6 = v14;
                    // break -> 0x399ec
                    break;
                }
                // 0x39950
                g4 = v16;
                int32_t v17 = 4 * v15; // 0x39952
                g8 = v17;
                int32_t v18 = *(int32_t *)(v17 + v16); // 0x39959
                g4 = v18;
                if (v18 == 0) {
                    v6 = v14;
                    // break -> 0x399ec
                    break;
                }
            }
        } else {
            v6 = v4;
        }
    } else {
        v6 = v4;
    }
    int32_t v19 = *(int32_t *)(v6 + 12); // 0x399ec
    g4 = v19;
    int32_t v20 = function_26d60(v19); // 0x399f2
    g4 = v20;
    int32_t v21 = *(int32_t *)(g5 + 12); // 0x399f7
    g9 = v21;
    g10 = v20;
    function_25190(v21);
    int32_t v22 = g5 - 324; // 0x39a08
    g4 = v22;
    function_1e010(v22, "Command::%s");
    g4 = g5 - 319;
    function_262d0(g10);
    g4 = g297;
    g9 = g297;
    g4 = *(int32_t *)(g5 - 48);
    *(int32_t *)(g5 - 44) = 0;
    int32_t result = *(int32_t *)(g5 - 56); // 0x39a4f
    g4 = result;
    return result;
}

// Address range: 0x39ab0 - 0x39abd
int32_t function_39ab0(void) {
    int32_t v1 = g4 & -256 | (int32_t)__asm_in_1658(-123); // 0x39ab1
    g4 = v1;
    char * v2 = (char *)(v1 - 119 + g7); // 0x39ab3
    *v2 = 16 * *v2;
    g4 &= -24;
    g9++;
    while (true) {
        // continue -> 0x39abb
    }
}

// Address range: 0x39abd - 0x39ac3
int32_t function_39abd(void) {
    // 0x39abd
    return g4;
}

// Address range: 0x39acc - 0x39acd
int32_t function_39acc(void) {
    // 0x39acc
    return g4;
}

// Address range: 0x39b12 - 0x39b18
int32_t function_39b12(void) {
    // 0x39b12
    return g4;
}

// Address range: 0x39b42 - 0x39bcc
int32_t function_39b42(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0846); // 0x39b42
    *v1 = *v1 - 1;
    int32_t result = g4; // 0x39b4f
    int32_t v2 = g7 - 1; // 0x39b56
    g7 = v2;
    int32_t v3; // ebp
    if (v2 == 0 || v3 == -2) {
        // 0x39b58
        return result;
    }
    // 0x39b59
    *(char *)result = 2 * (char)result;
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v4 = function_26cf0(); // 0x39b7c
    g4 = v4;
    g6 = v4;
    function_27970(v4, "OnMatchSessionUpdate", "state", "error", "error", "nomap");
    g4 = g297;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g297;
}

// Address range: 0x39bcd - 0x39bce
int32_t function_39bcd(void) {
    // 0x39bcd
    return g4;
}

// Address range: 0x39bd9 - 0x39c05
int32_t function_39bd9(void) {
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x39bdc
    g4 = v1;
    g10 = v1;
    g4 = *(int32_t *)(g5 - 332);
    g4 = function_26d40();
    while (true) {
        // 0x39bf1
        g4 = function_2bac0(g6);
        int32_t v2 = function_7ab57(g10, (int32_t)&g870); // 0x39bfc
        g4 = v2;
        g10 = v2;
    }
}

// Address range: 0x39c06 - 0x39c07
int32_t function_39c06(void) {
    // 0x39c06
    return g4;
}

// Address range: 0x39c0d - 0x39c0e
int32_t function_39c0d(int32_t a1) {
    // 0x39c0d
    return g4;
}

// Address range: 0x39c29 - 0x39c57
int32_t function_39c29(void) {
    // 0x39c29
    g10 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x39c36
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = 0;
    return 0;
}

// Address range: 0x39c60 - 0x39c6a
int32_t function_39c60(void) {
    // 0x39c60
    g4 = 1;
    return 1;
}

// Address range: 0x39c70 - 0x39d07
int32_t function_39c70(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g10; // 0x39c76
    g10 = a2;
    int32_t v3 = g6; // 0x39c7c
    g6 = v1;
    int32_t v4 = g8; // 0x39c82
    *(int32_t *)(v1 + 12) = 0;
    if (a2 == 0) {
        // 0x39c9f
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return g4;
    }
    int32_t v5 = g6; // 0x39c90
    uint32_t v6 = *(int32_t *)(v5 + 4); // 0x39c90
    g4 = v6;
    int32_t v7 = a2 - v6; // 0x39c93
    if (v6 >= a2) {
        // 0x39c97
        g4 = *(int32_t *)v5;
        *(int32_t *)(v5 + 12) = a2;
        *(int32_t *)(g6 + 16) = g4;
        // 0x39c9f
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return g4;
    }
    // 0x39cb0
    g9 = v7;
    int32_t v8 = function_2bcf0(v5, v7); // 0x39cbb
    g4 = v8;
    int32_t * v9 = (int32_t *)(g6 + 12); // 0x39cc0
    int32_t v10 = *v9; // 0x39cc0
    g9 = v10;
    g7 = (int32_t)(v10 >= 0 == (v10 != 0)) | g7 & -256;
    g8 = v8 & -256 | (int32_t)(a2 >= 0);
    int32_t v11 = v10 + a2; // 0x39ccf
    g4 = v11;
    *v9 = v11;
    int32_t v12 = g6; // 0x39cd5
    int32_t v13 = *(int32_t *)v12; // 0x39cd5
    g4 = v13;
    *(int32_t *)(v12 + 16) = v13;
    int32_t v14 = g8; // 0x39cda
    g6 = v14;
    if ((char)v14 == 0 || (char)g7 == 0) {
        // 0x39c9f
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return g4;
    }
    int32_t v15 = g4; // 0x39ce4
    int32_t v16 = v15 + 4 * a2; // 0x39ce8
    g4 = v16;
    int32_t v17 = 4 * v10; // 0x39ceb
    g9 = v17;
    int32_t result = function_2cb20(v16, v15, v17); // 0x39cf5
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v4;
    return result;
}

// Address range: 0x39d10 - 0x39d1b
int32_t function_39d10(int32_t a1) {
    // 0x39d10
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x39d17
    g4 = result;
    return result;
}

// Address range: 0x39d20 - 0x39d2a
int32_t function_39d20(void) {
    // 0x39d20
    g4 = 1;
    return 1;
}

// Address range: 0x39d30 - 0x39e24
int32_t function_39d30(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x39d36
    g10 = a1;
    int32_t v3 = g6; // 0x39d3c
    int32_t v4 = g8; // 0x39d3f
    int32_t * v5 = (int32_t *)(a1 + 24); // 0x39d42
    int32_t result = *v5; // 0x39d42
    g4 = result;
    int32_t v6; // 0x39e10
    if (result != 0) {
        // 0x39e10
        v6 = *(int32_t *)(a1 + 28);
        g6 = v6;
        if (v6 == 0) {
            // 0x39e17
            g6 = v3;
            g10 = v2;
            g8 = v4;
            return result;
        }
    } else {
        // 0x39d4d
        g4 = *(int32_t *)&g273;
        *v5 = 1;
        int32_t v7 = function_36e00(g4); // 0x39d5c
        g4 = v7;
        int32_t v8 = *(int32_t *)(g10 + 8); // 0x39d71
        g4 = v8;
        function_27600(v8, "members/joinflags", v7, g9);
        g4 = g297;
        g8 = *(int32_t *)(g297 + 8);
        int32_t v9 = function_26cf0(); // 0x39d8d
        g4 = v9;
        g6 = v9;
        function_27970(v9, "OnMatchSessionUpdate", "state", "progress", "progress", "joining");
        g4 = g297;
        int32_t v10 = function_1bc00(192); // 0x39dd9
        g4 = v10;
        g6 = v10;
        int32_t v11 = *(int32_t *)(g10 + 8); // 0x39de0
        g4 = v11;
        g4 = function_55f40(v10, v11);
        int32_t v12 = g6; // 0x39def
        *(int32_t *)(g10 + 28) = v12;
        if (v12 == 0) {
            // 0x39e17
            g6 = v3;
            g10 = v2;
            g8 = v4;
            return g4;
        }
        // 0x39d4d
        v6 = g6;
    }
    int32_t v13 = *(int32_t *)v6; // 0x39df6
    g4 = v13;
    g10 = v2;
    g6 = v3;
    g8 = v4;
    int32_t result2 = *(int32_t *)(v13 + 8); // 0x39e04
    g4 = result2;
    return result2;
}

// Address range: 0x39e68 - 0x39f8b
int32_t function_39e68(int32_t a1) {
    int32_t v1 = g4; // 0x39e6e
    *(char *)v1 = (char)v1 + *(char *)&g4;
    g4 = 0;
    g9 = 0;
    int32_t v2 = g6; // 0x39e7a
    g6 = a1;
    int32_t v3 = g10; // 0x39e80
    int32_t v4 = g8; // 0x39e83
    int32_t v5 = *(int32_t *)(a1 + 28); // 0x39e86
    g7 = v5;
    int32_t v6; // 0x39e95
    int32_t v7; // 0x39ea9
    int32_t v8; // 0x39e90
    if (v5 != 0) {
        // 0x39e8d
        v8 = function_50390(v5);
        g4 = v8;
        v7 = g6;
        v6 = g9;
    } else {
        v7 = a1;
        v8 = 0;
        v6 = 0;
    }
    // 0x39e95
    g10 = 0;
    g8 = 0;
    int32_t v9 = *(int32_t *)(v7 + 16); // 0x39ea9
    g4 = v9;
    g4 = function_27600(v9, "xuidReserve", v8, v6);
    int32_t v10 = g6; // 0x39eb4
    int32_t v11 = *(int32_t *)(v10 + 28); // 0x39eb4
    g9 = v11;
    int32_t v12; // 0x39ed7
    int32_t v13; // 0x39edb
    if (v11 == 0) {
        // 0x39e95
        v13 = g8;
        v12 = g10;
    } else {
        int32_t v14 = *(int32_t *)v11; // 0x39ebb
        g4 = v14;
        g10 = v14;
        g8 = v11;
        v13 = v11;
        v12 = v14;
    }
    int32_t v15 = *(int32_t *)(v10 + 16); // 0x39ee7
    g4 = v15;
    g4 = function_27600(v15, "xuidHost", v12, v13);
    int32_t v16 = g6; // 0x39ef2
    int32_t v17 = *(int32_t *)(v16 + 24); // 0x39ef2
    g4 = v17;
    if (v17 == 2) {
        int32_t v18 = *(int32_t *)(v16 + 16); // 0x39f40
        g4 = v18;
        g4 = function_27920(v18, "state", "lobby");
        int32_t result = *(int32_t *)(g6 + 16); // 0x39f4b
        g4 = result;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result;
    }
    int32_t v19 = *(int32_t *)(v16 + 16); // 0x39f70
    g4 = v19;
    if (v17 == 3) {
        // 0x39f60
        g4 = function_27920(v19, "state", "game");
        int32_t result2 = *(int32_t *)(g6 + 16); // 0x39f7b
        g4 = result2;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result2;
    }
    // 0x39eff
    g4 = function_27920(v19, "state", (char *)&g129);
    int32_t result3 = *(int32_t *)(g6 + 16); // 0x39f1a
    g4 = result3;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result3;
}

// Address range: 0x39ff1 - 0x3a03f
int32_t function_39ff1(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 + 0x241c8903); // 0x39ff1
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    *(int32_t *)(v2 - 16) = (int32_t)&g132;
    *(int32_t *)(v2 - 12) = 1;
    int32_t result = *(int32_t *)(g6 + 28); // 0x3a01c
    g4 = result;
    if (result == 0) {
        // 0x3a038
        return 0;
    }
    // 0x3a023
    g9 = *(int32_t *)result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x3a043 - 0x3a04b
int32_t function_3a043(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b20c4); // 0x3a043
    *v1 = *v1 + 1;
    return g4;
}

// Address range: 0x3a0be - 0x3a0ed
int32_t function_3a0be(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3a0be
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x3a0c1
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x3a0ed - 0x3a111
int32_t function_3a0ed(void) {
    // 0x3a0ed
    g10 = g4;
    while (true) {
        int32_t v1 = g6 + 12; // 0x3a0ef
        g6 = v1;
        g4 = function_1fc30(v1);
        g10 = function_7ab57(g10, (int32_t)&g870);
        int32_t v2 = g6 + 20; // 0x3a104
        g4 = v2;
        g4 = function_1fc30(v2);
    }
}

// Address range: 0x3a111 - 0x3a123
int32_t function_3a111(void) {
    // 0x3a111
    int32_t v1; // ebp
    *(int32_t *)(v1 - 28) = g4;
    g4 = function_26d40();
    int32_t result = *(int32_t *)(g5 - 28); // 0x3a11c
    g4 = result;
    g10 = result;
    return result;
}

// Address range: 0x3a130 - 0x3a131
int32_t function_3a130(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3a130
    return g4;
}

// Address range: 0x3a173 - 0x3a174
int32_t function_3a173(int32_t a1) {
    // 0x3a173
    return g4;
}

// Address range: 0x3a1c9 - 0x3a1cf
int32_t function_3a1c9(void) {
    // 0x3a1c9
    return g4;
}

// Address range: 0x3a214 - 0x3a215
int32_t function_3a214(void) {
    // 0x3a214
    return g4;
}

// Address range: 0x3a251 - 0x3a291
int32_t function_3a251(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x3a251
    *v1 = *v1 - 1;
    int32_t result = g4; // 0x3a25a
    int32_t v2; // ebp
    int32_t v3 = v2 + 2; // 0x3a260
    g5 = v3;
    int32_t v4 = g7 - 1; // 0x3a261
    g7 = v4;
    if (v3 == 0 || v4 == 0) {
        // 0x3a263
        return result;
    }
    // 0x3a264
    *(char *)result = 2 * (char)result;
    int32_t v5 = *(int32_t *)(g5 - 28); // 0x3a27a
    g4 = v5;
    int32_t result2; // 0x3a284
    if (v5 != 0) {
        // 0x3a281
        result2 = function_28600(v5);
        g4 = result2;
    } else {
        result2 = 0;
    }
    // 0x3a289
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result2;
}

// Address range: 0x3a298 - 0x3a2bc
int32_t function_3a298(void) {
    int32_t v1 = function_2cc30(g10, "ending"); // 0x3a2a3
    g4 = v1;
    if (v1 != 0) {
        // bb
        g4 = function_3a214();
    }
    // 0x3a2b0
    *(int32_t *)(g6 + 24) = 4;
    int32_t result = function_3a214(); // 0x3a2b7
    g4 = result;
    return result;
}

// Address range: 0x3a2bc - 0x3a2f5
int32_t function_3a2bc(void) {
    // 0x3a2bc
    g8 = g4;
    g4 = function_1bc40();
    g10 = g8;
    while (true) {
        int32_t v1 = g5 - 28; // 0x3a2c8
        g4 = v1;
        function_1fc30(v1);
        int32_t v2 = g6 + 20; // 0x3a2d3
        g4 = v2;
        g4 = function_1fc30(v2);
        int32_t v3 = g6 + 12; // 0x3a2de
        g6 = v3;
        g4 = function_1fc30(v3);
        int32_t v4 = function_7ab57(g10, (int32_t)&g870); // 0x3a2ec
        g4 = v4;
        g10 = v4;
    }
}

// Address range: 0x3a2f5 - 0x3a2f9
int32_t function_3a2f5(void) {
    int32_t result = g4; // 0x3a2f5
    g10 = result;
    return result;
}

// Address range: 0x3a2f9 - 0x3a307
int32_t function_3a2f9(void) {
    // 0x3a2f9
    g8 = g4;
    int32_t result = function_26d40(); // 0x3a2fe
    g4 = result;
    g10 = g8;
    return result;
}

// Address range: 0x3a307 - 0x3a30b
int32_t function_3a307(void) {
    int32_t result = g4; // 0x3a307
    g10 = result;
    return result;
}

// Address range: 0x3a310 - 0x3a311
int32_t function_3a310(int32_t a1) {
    // 0x3a310
    return g4;
}

// Address range: 0x3a333 - 0x3a37f
int32_t function_3a333(int32_t a1, int32_t a2) {
    // 0x3a333
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1 = g5 - 16; // 0x3a336
    g9 = v1;
    *(int32_t *)v1 = (int32_t)&g132;
    *(int32_t *)(g5 - 12) = 1;
    int32_t v2 = g6; // 0x3a35b
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x3a35b
    g4 = v3;
    int32_t v4; // 0x3a36a
    if (v3 != 0) {
        // 0x3a362
        g4 = function_28600(v3);
        v4 = g6;
    } else {
        v4 = v2;
    }
    int32_t v5 = *(int32_t *)(v4 + 12); // 0x3a36a
    g4 = v5;
    int32_t result; // 0x3a374
    if (v5 != 0) {
        // 0x3a371
        result = function_28600(v5);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x3a379
    g6 = a1;
    return result;
}

// Address range: 0x3a37f - 0x3a3ab
int32_t function_3a37f(void) {
    // 0x3a37f
    g9 = g6 + 20;
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_1fc30(g9);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x3a38d
    g4 = v1;
    while (true) {
        // 0x3a390
        g6 += 12;
        *(int32_t *)(g5 - 28) = v1;
        g4 = function_1fc30(g6);
        int32_t v2 = *(int32_t *)(g5 - 28); // 0x3a39e
        g4 = v2;
        int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x3a3a4
        g4 = v3;
        v1 = v3;
    }
}

// Address range: 0x3a3b0 - 0x3a454
int32_t function_3a3b0(int32_t a1) {
    int32_t v1 = g6; // 0x3a3b3
    g6 = a1;
    int32_t * v2 = (int32_t *)(a1 + 24); // 0x3a3ba
    int32_t v3; // 0x3a40a
    if (*v2 != 5) {
        // 0x3a3c0
        g4 = g281;
        g9 = *(int32_t *)g281;
        int32_t v4 = *v2; // 0x3a3f0
        int32_t v5 = v4 - 3; // 0x3a3f3
        g4 = v5;
        if (v5 == 0 || v4 == 4) {
            // 0x3a430
            *v2 = 0;
            g4 = (int32_t)g283;
            g9 = *(int32_t *)g283;
            v3 = g6;
        } else {
            v3 = a1;
        }
    } else {
        v3 = a1;
    }
    int32_t * v6 = (int32_t *)(v3 + 28); // 0x3a3fb
    int32_t v7 = *v6; // 0x3a3fb
    g4 = v7;
    int32_t v8; // 0x3a411
    if (v7 != 0) {
        // 0x3a402
        g9 = *(int32_t *)v7;
        *v6 = 0;
        v8 = g6;
    } else {
        v8 = v3;
    }
    // 0x3a411
    g4 = function_3a310(v8);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x3a421
    g4 = result;
    return result;
}

// Address range: 0x3a460 - 0x3a4ad
int32_t function_3a460(int32_t a1) {
    int32_t v1 = g6; // 0x3a463
    g6 = a1;
    *(int32_t *)(a1 + 24) = 4;
    g4 = (int32_t)g283;
    g9 = *(int32_t *)g283;
    int32_t v2 = *(int32_t *)(g6 + 28); // 0x3a49c
    g4 = v2;
    int32_t result = function_52a80(v2, 0, 0); // 0x3a4a2
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x3a4b0 - 0x3a5eb
int32_t function_3a4b0(int32_t a1) {
    int32_t v1 = g8; // 0x3a4b3
    int32_t v2 = g10; // 0x3a4b4
    int32_t v3; // bp-1076
    int32_t v4 = &v3; // 0x3a4b5
    g8 = v4;
    int32_t v5 = g6; // bp-16
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 24) = 3;
    function_38b70(g4);
    g4 = 0;
    g7 = &g21;
    __asm_rep_stosd_memset((char *)&v3, 0, (int32_t)&g21);
    int32_t v6 = g3 ? -4 * (int32_t)&g21 : 4 * (int32_t)&g21; // 0x3a4de
    g8 = v6 + v4;
    g7 = 0;
    g4 = v4;
    int32_t v7 = g6; // 0x3a4f2
    int32_t v8 = *(int32_t *)(v7 + 28); // 0x3a4f2
    g4 = v8;
    int32_t v9 = *(int32_t *)(v7 + 8); // 0x3a4f9
    g4 = v9;
    int32_t v10 = function_38c00(v9, v8, &v3, 11); // 0x3a4ff
    g4 = v10;
    if ((char)v10 != 0) {
        // 0x3a580
        g4 = g281;
        g9 = *(int32_t *)g281;
        int32_t v11 = *(int32_t *)(g6 + 28); // 0x3a5bb
        g4 = v11;
        int32_t v12;
        function_52a80(v11, 1, v12);
        int32_t v13; // bp-306
        g7 = &v13;
        int32_t result = (int32_t)g283; // 0x3a5d1
        g4 = result;
        g9 = *(int32_t *)g283;
        g6 = v5;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t * v14 = (int32_t *)(g6 + 28); // 0x3a508
    int32_t v15 = *v14; // 0x3a508
    g4 = v15;
    g9 = *(int32_t *)v15;
    *v14 = 0;
    g4 = g297;
    g8 = *(int32_t *)(g297 + 8);
    int32_t v16 = function_26cf0(); // 0x3a52b
    g4 = v16;
    g6 = v16;
    function_27970(v16, "OnMatchSessionUpdate", "state", "error", "error", "connect");
    g4 = g297;
    g6 = v5;
    g10 = v2;
    g8 = v1;
    return g297;
}

// Address range: 0x3a5eb - 0x3a6e3
int32_t function_3a5eb(int32_t a1) {
    // 0x3a5eb
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g6; // 0x3a60b
    int32_t v2 = g10; // 0x3a60e
    g6 = a1;
    int32_t v3 = g8; // 0x3a614
    g4 = g297;
    g8 = *(int32_t *)(g297 + 8);
    int32_t v4 = function_26cf0(); // 0x3a623
    g4 = v4;
    g10 = v4;
    function_27a20(v4, "OnMatchSessionUpdate", "state", "created");
    g4 = g297;
    int32_t v5 = *(int32_t *)(g6 + 8); // 0x3a668
    g4 = v5;
    int32_t v6 = function_27340(v5, (int32_t)"server", 0); // 0x3a66e
    g4 = v6;
    if (v6 != 0) {
        int32_t v7 = g6; // 0x3a677
        g10 = v2;
        g6 = v1;
        g8 = v3;
        int32_t result = function_3a4b0(v7); // 0x3a686
        g4 = result;
        return result;
    }
    // 0x3a690
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v8 = function_26cf0(); // 0x3a6a1
    g4 = v8;
    g6 = v8;
    function_27a20(v8, "OnMatchSessionUpdate", "state", "ready");
    g4 = g297;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g297;
}

// Address range: 0x3a6f6 - 0x3a6f7
int32_t function_3a6f6(void) {
    // 0x3a6f6
    return g4;
}

// Address range: 0x3a710 - 0x3a711
int32_t function_3a710(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3a710
    return g4;
}

// Address range: 0x3a743 - 0x3a74e
int32_t function_3a743(void) {
    int32_t v1 = g4; // 0x3a743
    *(char *)v1 = (char)v1 | *(char *)&g4;
    int32_t v2 = g4; // 0x3a745
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x3a747
    int32_t v4 = g4; // 0x3a747
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    g4 = v4 & -252;
    int32_t result = g4 & -256 | (int32_t)__asm_in_1653((int16_t)g9); // 0x3a74c
    g4 = result;
    return result;
}

// Address range: 0x3a74e - 0x3a756
int32_t function_3a74e(int16_t a1, int32_t a2) {
    int32_t v1 = g7; // 0x3a74f
    char * v2 = (char *)(v1 - 0x1717dbfc); // 0x3a74f
    *v2 = *v2 + (char)v1;
    return g4;
}

// Address range: 0x3a760 - 0x3a761
int32_t function_3a760(void) {
    // 0x3a760
    return g4;
}

// Address range: 0x3a763 - 0x3a776
int32_t function_3a763(int32_t a1) {
    int32_t v1 = g4; // 0x3a763
    *(char *)v1 = (char)v1 | *(char *)&g4;
    int32_t v2 = g4; // 0x3a765
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x3a767
    int32_t v4 = g4; // 0x3a767
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    int32_t v5 = v4 & -252; // 0x3a76a
    g4 = v5;
    int32_t * v6 = (int32_t *)v5; // 0x3a76d
    *v6 = g7 + *v6;
    int32_t v7 = g7; // 0x3a76f
    char * v8 = (char *)(v7 - 0x3717dbcc); // 0x3a76f
    *v8 = *v8 + (char)v7;
    return g4;
}

// Address range: 0x3a780 - 0x3a781
int32_t function_3a780(void) {
    // 0x3a780
    return g4;
}

// Address range: 0x3a783 - 0x3a799
int32_t function_3a783(int32_t a1) {
    // 0x3a783
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x3a785
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x3a787
    int32_t v3 = g4; // 0x3a787
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    int32_t v4; // ebp
    g4 = v4;
    *(int32_t *)v4 = g7 + (v3 & -252);
    char * v5 = (char *)(g6 + 0x4890843); // 0x3a78f
    *v5 = (char)g7 + *v5;
    g4 &= -24;
    *(int32_t *)g8 = g10;
    bool v6; // df
    int32_t v7 = v6 ? -4 : 4; // 0x3a797
    g8 += v7;
    g10 += v7;
    return g4;
}

// Address range: 0x3a7a1 - 0x3a7a6
int32_t function_3a7a1(void) {
    int32_t result = function_8903a7a7(); // 0x3a7a1
    g4 = result;
    return result;
}

// Address range: 0x3a7ab - 0x3a7ba
int32_t function_3a7ab(void) {
    // 0x3a7ab
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x3a7ad
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x3a7af
    int32_t v3 = g4; // 0x3a7af
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    g4 = v3 & -252;
    int32_t v4 = g8; // 0x3a7b5
    int32_t result = g7 / 256 + v4 & 255 | v4 & -256; // 0x3a7b7
    g4 = result;
    return result;
}

// Address range: 0x3a7f3 - 0x3a7ff
int32_t function_3a7f3(int32_t a1) {
    // 0x3a7f3
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x3a7f5
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x3a7f7
    int32_t v3 = g4; // 0x3a7f7
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    int32_t result = v3 & -252; // 0x3a7fa
    g4 = result;
    return result;
}

// Address range: 0x3a802 - 0x3a803
int32_t function_3a802(int32_t a1) {
    // 0x3a802
    return g4;
}

// Address range: 0x3a877 - 0x3a87d
int32_t function_3a877(void) {
    // 0x3a877
    return g4;
}

// Address range: 0x3a888 - 0x3a889
int32_t function_3a888(void) {
    // 0x3a888
    return g4;
}

// Address range: 0x3a8af - 0x3a8b3
int32_t function_3a8af(void) {
    // 0x3a8af
    g4 &= -24;
    int32_t result = function_3a888(); // 0x3a8b1
    g4 = result;
    return result;
}

// Address range: 0x3a933 - 0x3a936
int32_t function_3a933(int32_t a1) {
    // 0x3a933
    return g4;
}

// Address range: 0x3a980 - 0x3a981
int32_t function_3a980(void) {
    // 0x3a980
    return g4;
}

// Address range: 0x3a98c - 0x3a98d
int32_t function_3a98c(void) {
    // 0x3a98c
    return g4;
}

// Address range: 0x3a98d - 0x3a993
int32_t function_3a98d(void) {
    // 0x3a98d
    return g4;
}

// Address range: 0x3a9bd - 0x3a9f1
int32_t function_3a9bd(int16_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x3a9bd
    int32_t v2 = *v1 - 1; // 0x3a9bd
    *v1 = v2;
    int32_t v3 = g7 - 1; // 0x3a9c3
    g7 = v3;
    int32_t v4; // 0x3a9c6
    if (v2 != 0 && v3 != 0) {
        // bb
        g4 = function_3a98c();
        v4 = g7;
    } else {
        v4 = v3;
    }
    int32_t v5 = v4 - 1; // 0x3a9c6
    g7 = v5;
    int32_t v6; // ebp
    if (v5 != 0 && v6 != -1) {
        // bb240
        g4 = function_3a980();
    }
    int32_t v7 = __asm_hlt(); // 0x3a9c8
    g4 = v7;
    uint32_t v8 = g6; // 0x3a9ca
    g6 = 256 * (v8 / 256 + v7 & 255) | v8 & -0xff01;
    char v9 = __asm_in_1658(1); // 0x3a9cd
    int32_t v10 = g4 & -256 | (int32_t)v9; // 0x3a9cd
    g4 = v10;
    char * v11 = (char *)v10; // 0x3a9cf
    *v11 = *v11 + v9;
    int32_t v12 = g6; // 0x3a9d1
    int32_t v13 = g4; // 0x3a9d1
    g6 = 256 * v13 + v12 & 0xff00 | v12 & -0xff01;
    int32_t v14 = v13 & -248; // 0x3a9d4
    g4 = v14;
    int32_t * v15 = (int32_t *)v14; // 0x3a9d6
    *v15 = *v15 + v14;
    int32_t v16 = g4; // 0x3a9d8
    char * v17 = (char *)v16; // 0x3a9d8
    *v17 = *v17 + (char)v16;
    return g4;
}

// Address range: 0x3a9f8 - 0x3aa15
int32_t function_3a9f8(void) {
    // 0x3a9f8
    g4 = function_27920(g10, "access", "public");
    int32_t result = function_3a780(); // 0x3aa10
    g4 = result;
    return result;
}

// Address range: 0x3aa18 - 0x3aa35
int32_t function_3aa18(void) {
    // 0x3aa18
    g4 = function_27920(g10, "network", "LIVE");
    int32_t result = function_3a760(); // 0x3aa30
    g4 = result;
    return result;
}

// Address range: 0x3aa40 - 0x3aab2
int32_t function_3aa40(int32_t a1, int32_t a2) {
    // 0x3aa40
    g6 = a1;
    g4 = a2;
    *(int32_t *)a1 = (int32_t)&g162;
    *(int32_t *)(g6 + 4) = (int32_t)&g163;
    int32_t v1 = function_26d60(g4); // 0x3aa5e
    g4 = v1;
    *(int32_t *)(g6 + 8) = v1;
    *(int32_t *)(g6 + 12) = g4;
    int32_t v2 = function_26cf0(); // 0x3aa70
    g4 = v2;
    g10 = v2;
    g4 = function_27a20(v2, "SysSessionData", "type", "client");
    *(int32_t *)(g6 + 16) = g10;
    *(int32_t *)(g6 + 20) = g10;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 28) = 0;
    return g4;
}

// Address range: 0x3aab7 - 0x3aaee
int32_t function_3aab7(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3aab7
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x3aaba
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    int32_t result = function_3a710(g6, g9, 1); // 0x3aae2
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x3aaee - 0x3ab12
int32_t function_3aaee(void) {
    // 0x3aaee
    g10 = g4;
    while (true) {
        int32_t v1 = g6 + 12; // 0x3aaf0
        g6 = v1;
        g4 = function_1fc30(v1);
        g10 = function_7ab57(g10, (int32_t)&g870);
        int32_t v2 = g6 + 20; // 0x3ab05
        g4 = v2;
        g4 = function_1fc30(v2);
    }
}

// Address range: 0x3ab12 - 0x3ab24
int32_t function_3ab12(void) {
    // 0x3ab12
    int32_t v1; // ebp
    *(int32_t *)(v1 - 28) = g4;
    g4 = function_26d40();
    int32_t result = *(int32_t *)(g5 - 28); // 0x3ab1d
    g4 = result;
    g10 = result;
    return result;
}

// Address range: 0x3ab30 - 0x3abef
int32_t function_3ab30(void) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x3ab39
    int32_t v3 = g4; // 0x3ab3c
    g6 = v3;
    int32_t v4 = *(int32_t *)&g273; // 0x3ab3e
    g4 = v4;
    int32_t v5 = g10; // 0x3ab43
    int32_t v6 = g9; // 0x3ab46
    g10 = v6;
    int32_t v7 = g8; // 0x3ab48
    g9 = v4;
    g9 = *(int32_t *)(v3 + 8);
    g8 = v4;
    g4 = g277;
    int32_t v8 = function_26d60(v6); // 0x3ab96
    g4 = v8;
    g6 = v8;
    function_25190(g10);
    int32_t v9; // bp-296
    int32_t v10 = &v9; // 0x3abb1
    g4 = v10;
    function_1e010(v10, "Command::%s");
    int32_t v11; // bp-291
    g4 = &v11;
    function_262d0(g6);
    g4 = g297;
    g9 = g297;
    g6 = v2;
    g10 = v5;
    g8 = v7;
    g5 = v1;
    return g297;
}

// Address range: 0x3abf0 - 0x3ac52
int32_t function_3abf0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g10; // 0x3abf6
    g10 = a2;
    int32_t v3 = g6; // 0x3abfc
    g6 = a1;
    int32_t v4 = function_25190(a2); // 0x3ac05
    g4 = v4;
    int32_t v5 = function_2cc30((int32_t)"Migrate", (char *)v4); // 0x3ac15
    g4 = v5;
    int32_t v6 = g6;
    if (v5 == 0) {
        int32_t v7 = *(int32_t *)(v6 + 28); // 0x3ac1e
        g4 = v7;
        if (v7 != 0) {
            int32_t v8 = g10; // 0x3ac25
            g6 = v3;
            g10 = v2;
            g5 = v1;
            int32_t result = function_51290(v7, v8); // 0x3ac34
            g4 = result;
            return result;
        }
    }
    // 0x3ac40
    g9 = g10;
    g4 = v6;
    g10 = v2;
    g6 = v3;
    g5 = v1;
    int32_t result2 = function_3ab30(); // 0x3ac4d
    g4 = result2;
    return result2;
}

// Address range: 0x3ac60 - 0x3ad51
int32_t function_3ac60(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x3ac76
    g6 = a2;
    int32_t v3 = g10; // 0x3ac7c
    g10 = a1 - 4;
    int32_t v4 = g8; // 0x3ac82
    int32_t v5 = function_25190(a2); // 0x3ac88
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_2cc30((int32_t)"OnEngineClientSignonStateChange", (char *)v5); // 0x3ac9a
    g4 = v6;
    int32_t result2; // 0x3ad00
    if (v6 != 0) {
        int32_t v7 = function_2cc30((int32_t)"OnEngineDisconnectReason", (char *)g8); // 0x3ad13
        g4 = v7;
        int32_t v8; // 0x3ad1a
        if (v7 != 0) {
            // bb257
            v8 = function_3ae30();
            g4 = v8;
        } else {
            v8 = v7;
        }
        // 0x3ad20
        if (*(int32_t *)(g10 + 24) == 3) {
            // 0x3ad26
            g8 = 1;
            int32_t result = function_27c00(g6, "reason", (int32_t *)&g129); // 0x3ad3e
            g4 = result;
            return result;
        }
        result2 = v8;
    } else {
        int32_t v9 = function_27fc0(g6, "old", 0); // 0x3acb6
        g4 = v9;
        g8 = v9;
        int32_t v10 = function_27fc0(g6, "new", 0); // 0x3acd0
        g4 = v10;
        if (v10 <= 1) {
            // 0x3acda
            if (g8 > 1) {
                int32_t v11 = *(int32_t *)(g10 + 24); // 0x3acdf
                g4 = v11;
                int32_t v12; // 0x3ace5
                if (v11 == 3) {
                    // bb
                    v12 = function_3af90();
                    g4 = v12;
                } else {
                    v12 = v11;
                }
                if (v12 == 4) {
                    int32_t v13 = function_3ae60(); // 0x3acee
                    g4 = v13;
                    result2 = v13;
                } else {
                    result2 = v12;
                }
            } else {
                result2 = v10;
            }
        } else {
            result2 = v10;
        }
    }
    // 0x3acf4
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result2;
}

// Address range: 0x3ad55 - 0x3ae2b
int32_t function_3ad55(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x44c7d445); // 0x3ad55
    *v1 = *v1 - 1;
    g4 &= -252;
    char v2 = __asm_in_1658(24); // 0x3ad5d
    int32_t v3 = g4 & -256 | (int32_t)v2; // 0x3ad5d
    g4 = v3;
    char * v4 = (char *)v3; // 0x3ad5f
    *v4 = *v4 | v2;
    int32_t v5 = function_2cfa0(g4, (char *)&g870); // 0x3ad64
    g4 = v5;
    if (v5 == 0) {
        // bb
        g4 = function_3b074();
    }
    int32_t v6 = *(int32_t *)&g273; // 0x3ad71
    char * v7 = (char *)v6;
    g4 = v6;
    g9 = v6;
    g7 = *(int32_t *)(g10 + 8);
    if (v6 != 0) {
        // 0x3ad95
        *(int32_t *)(g5 - 28) = v6;
        int32_t v8 = function_27c00(*(int32_t *)&v7, "disconnecthdlr", (int32_t *)&g129); // 0x3adab
        g4 = v8;
        *(int32_t *)(g5 - 44) = v8;
        int32_t v9 = function_2cc30(g4, "destroy"); // 0x3adbe
        g4 = v9;
        if (v9 == 0) {
            // bb247
            g4 = function_3afd0();
        }
        int32_t v10 = *(int32_t *)(g5 - 44); // 0x3adcb
        g4 = v10;
        int32_t v11 = function_2cc30(v10, "lobby"); // 0x3add9
        g4 = 1;
        g8 = v11 == 0 ? 1 : g8;
        int32_t v12 = *(int32_t *)(g5 - 28); // 0x3ade8
        g4 = v12;
        if (v12 != 0) {
            // 0x3adef
            g4 = function_28600(v12);
        }
    }
    int32_t v13 = g8; // 0x3adf7
    g4 = v13;
    if ((char)v13 != 0) {
        // bb248
        g4 = function_3aec0();
    }
    // 0x3ae01
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v14 = function_26cf0(); // 0x3ae12
    g4 = v14;
    g6 = v14;
    int32_t result = function_26330(v14); // 0x3ae24
    g4 = result;
    return result;
}

// Address range: 0x3ae30 - 0x3ae5f
int32_t function_3ae30(void) {
    int32_t v1 = function_2cc30((int32_t)"OnEngineEndGame", (char *)g8); // 0x3ae3b
    g4 = v1;
    if (v1 != 0) {
        // bb
        g4 = function_3af08();
    }
    int32_t result = function_3a460(g10); // 0x3ae55
    g4 = result;
    return result;
}

// Address range: 0x3ae52 - 0x3ae53
int32_t function_3ae52(void) {
    // 0x3ae52
    return g4;
}

// Address range: 0x3ae60 - 0x3aeba
int32_t function_3ae60(void) {
    // 0x3ae60
    *(int32_t *)(g10 + 24) = 2;
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v1 = function_26cf0(); // 0x3ae78
    g4 = v1;
    g6 = v1;
    function_27a20(v1, "OnMatchSessionUpdate", "state", "ready");
    g4 = g297;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g297;
}

// Address range: 0x3aec0 - 0x3af05
int32_t function_3aec0(void) {
    // 0x3aec0
    function_27920(g6, "disconnecthdlr", "lobby");
    g4 = g297;
    g8 = *(int32_t *)(g297 + 12);
    function_26d60(g6);
    g4 = g297;
    int32_t result = function_3a460(g10); // 0x3aefb
    g4 = result;
    return result;
}

// Address range: 0x3af08 - 0x3af8a
int32_t function_3af08(void) {
    int32_t v1 = function_2cc30((int32_t)"OnMatchSessionUpdate", (char *)g8); // 0x3af13
    g4 = v1;
    if (v1 != 0) {
        // bb
        g4 = function_3afe0();
    }
    int32_t v2 = function_27c00(g6, "state", (int32_t *)&g129); // 0x3af33
    g4 = v2;
    g4 = function_2cc30((int32_t)"updated", (char *)v2);
    int32_t v3 = *(int32_t *)(g10 + 24); // 0x3af50
    g4 = v3;
    if (v3 == 2) {
        // bb14
        g4 = function_3b093();
    }
    int32_t v4 = function_27340(g6, (int32_t)"delete/server", 0); // 0x3af78
    g4 = v4;
    int32_t result; // 0x3af7f
    if (v4 != 0) {
        // bb16
        result = function_3ae52();
        g4 = result;
    } else {
        result = v4;
    }
    // 0x3af85
    return result;
}

// Address range: 0x3af90 - 0x3af97
int32_t function_3af90(void) {
    // 0x3af90
    return g4;
}

// Address range: 0x3af9b - 0x3afa1
int32_t function_3af9b(void) {
    // 0x3af9b
    return g4;
}

// Address range: 0x3afa1 - 0x3afc9
int32_t function_3afa1(void) {
    // 0x3afa1
    g10 = *(int32_t *)(g4 + 8);
    int32_t v1 = function_26cf0(); // 0x3afad
    g4 = v1;
    g6 = v1;
    int32_t result = function_26330(v1); // 0x3afbf
    g4 = result;
    return result;
}

// Address range: 0x3afd0 - 0x3afd7
int32_t function_3afd0(void) {
    // 0x3afd0
    g8 = 0;
    return g4;
}

// Address range: 0x3afe0 - 0x3b074
int32_t function_3afe0(void) {
    int32_t v1 = function_2cc30((int32_t)"OnNetLanConnectionlessPacket", (char *)g8); // 0x3afeb
    g4 = v1;
    if (v1 != 0) {
        int32_t v2 = function_2cc30((int32_t)"OnSysMuteListChanged", (char *)g8); // 0x3b053
        g4 = v2;
        if (v2 != 0) {
            // bb
            g4 = function_3b0c0();
        }
        int32_t result = *(int32_t *)(g10 + 28); // 0x3b05c
        g4 = result;
        g9 = *(int32_t *)result;
        return result;
    }
    int32_t v3 = function_26190(g6); // 0x3aff7
    g4 = v3;
    int32_t v4 = function_25190(v3); // 0x3afff
    g4 = v4;
    g7 = *(int32_t *)(g10 + 28);
    g4 = function_2cc30(v4, "LanSearch");
    int32_t v5 = *(int32_t *)(g10 + 28); // 0x3b035
    g4 = v5;
    int32_t result2 = function_51390(v5, g6); // 0x3b03b
    g4 = result2;
    return result2;
}

// Address range: 0x3b074 - 0x3b093
int32_t function_3b074(void) {
    int32_t v1 = *(int32_t *)(g5 - 44); // 0x3b074
    g4 = v1;
    int32_t v2 = function_2cfa0(v1, "Server shutting down"); // 0x3b082
    int32_t result = (int32_t)(v2 != 0) | v2 & -256; // 0x3b089
    g4 = result;
    g8 = result;
    return result;
}

// Address range: 0x3b093 - 0x3b0c0
int32_t function_3b093(void) {
    // 0x3b093
    g4 = function_27340(g6, (int32_t)"update/server", 0);
    int32_t result = function_3a4b0(g10); // 0x3b0b6
    g4 = result;
    return result;
}

// Address range: 0x3b0c0 - 0x3b226
int32_t function_3b0c0(void) {
    int32_t v1 = function_2cc30((int32_t)"mmF->SysSessionUpdate", (char *)g8); // 0x3b0cb
    g4 = v1;
    if (v1 != 0) {
        // 0x3b185
        g4 = function_2cc30((int32_t)"mmF->SysSessionCommand", (char *)g8);
        g4 = function_27e60(g6, (int32_t)"syssession", 0);
        int32_t v2 = function_26190(g6); // 0x3b1cb
        g4 = v2;
        int32_t result = function_3abf0(g10, v2); // 0x3b1df
        g4 = result;
        return result;
    }
    // 0x3b0d8
    g9 = *(int32_t *)(g10 + 28);
    g4 = function_27e60(g6, (int32_t)"syssession", 0);
    int32_t v3 = function_27c00(g6, "error", NULL); // 0x3b117
    g4 = v3;
    int32_t v4 = g10; // 0x3b1e9
    if (v3 == 0) {
        // 0x3b1e9
        if (*(int32_t *)(v4 + 24) == 1) {
            // bb
            g4 = function_3b230();
        }
        int32_t v5 = function_27c00(g6, "action", NULL); // 0x3b202
        g4 = v5;
        if (v5 == 0) {
            // 0x3b21f
            return 0;
        }
        int32_t v6 = function_2cc30((int32_t)"host", (char *)v5); // 0x3b216
        g4 = v6;
        int32_t result2; // 0x3b21d
        if (v6 == 0) {
            // bb16
            result2 = function_3b244();
            g4 = result2;
        } else {
            result2 = v6;
        }
        // 0x3b21f
        return result2;
    }
    int32_t * v7 = (int32_t *)(v4 + 28); // 0x3b124
    int32_t v8 = *v7; // 0x3b124
    g4 = v8;
    g9 = *(int32_t *)v8;
    *v7 = 0;
    *(int32_t *)(g10 + 24) = 1;
    int32_t v9 = function_26d60(g6); // 0x3b140
    g4 = v9;
    g6 = v9;
    g4 = function_262d0(v9);
    function_27920(g6, "state", "error");
    g4 = g297;
    g9 = g297;
    return g297;
}

// Address range: 0x3b22b - 0x3b230
int32_t function_3b22b(void) {
    // 0x3b22b
    return g4;
}

// Address range: 0x3b230 - 0x3b244
int32_t function_3b230(void) {
    // 0x3b230
    *(int32_t *)(g10 + 24) = 2;
    return g4;
}

// Address range: 0x3b244 - 0x3b361
int32_t function_3b244(void) {
    int32_t v1 = function_26cf0(); // 0x3b24b
    g4 = v1;
    g6 = v1;
    g4 = function_26330(v1);
    int32_t v2 = *(int32_t *)(g10 + 24); // 0x3b262
    g4 = (int32_t)"lobby";
    int32_t v3 = v2 - 3; // 0x3b26a
    g9 = v3;
    int32_t v4; // 0x3b355
    if (v3 == 0 || v2 == 4) {
        // 0x3b355
        v4 = *(int32_t *)(4 * v3 + (int32_t)&g164);
        g4 = v4;
    } else {
        v4 = (int32_t)"lobby";
    }
    // 0x3b276
    g4 = function_27920(g6, "state", (char *)v4);
    int32_t v5 = *(int32_t *)(g10 + 8); // 0x3b28a
    g4 = v5;
    g4 = function_25fb0(g6, v5);
    int32_t v6 = g10; // 0x3b299
    g8 = *(int32_t *)(v6 + 28);
    *(int32_t *)(v6 + 8) = 0;
    g4 = *(int32_t *)&g273;
    *(int32_t *)(g10 + 12) = 0;
    *(int32_t *)(g10 + 28) = 0;
    *(int32_t *)(g10 + 24) = 5;
    function_36df0(g4, 0);
    g4 = g10;
    int32_t v7 = function_1bc00(40); // 0x3b2dc
    g4 = v7;
    g10 = v7;
    int32_t result = function_3c7e0(v7, g8, g6); // 0x3b2ee
    g4 = result;
    return result;
}

// Address range: 0x3b361 - 0x3b422
int32_t function_3b361(int32_t a1, int32_t a2) {
    // 0x3b361
    g10 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g9 = a1;
    int32_t v2 = g6; // 0x3b389
    g6 = a2;
    int32_t v3 = g10; // 0x3b38f
    int32_t v4 = g8; // 0x3b392
    int32_t v5 = function_25190(a2); // 0x3b39b
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_27c00(g6, "run", (int32_t *)&g129); // 0x3b3b5
    g4 = v6;
    g10 = v6;
    int32_t v7 = function_2cc30(v6, "host"); // 0x3b3c7
    g4 = v7;
    if (v7 != 0) {
        // bb
        g4 = function_3b430();
    }
    // 0x3b3d0
    g9 = a1;
    int32_t v8 = *(int32_t *)(a1 + 28); // 0x3b3d3
    g4 = v8;
    if (v8 == 0) {
        // 0x3b40c
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return 0;
    }
    int32_t v9 = *(int32_t *)v8; // 0x3b3da
    g9 = v9;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    int32_t result = *(int32_t *)(v9 + 16); // 0x3b3eb
    g4 = result;
    return result;
}

// Address range: 0x3b430 - 0x3b47b
int32_t function_3b430(void) {
    // 0x3b430
    g4 = function_2cc30(g10, "all");
    g4 = function_2cc30(g10, "xuid");
    int32_t v1 = g5; // 0x3b461
    g9 = *(int32_t *)(v1 - 28);
    *(int32_t *)(v1 + 12) = g6;
    int32_t v2 = g5; // 0x3b467
    g10 = *(int32_t *)(v2 - 8);
    g6 = *(int32_t *)(v2 - 12);
    g8 = *(int32_t *)(v2 - 4);
    *(int32_t *)(v2 + 8) = g9;
    int32_t result = function_3abf0((int32_t)&g870, (int32_t)&g870); // 0x3b476
    g4 = result;
    return result;
}

// Address range: 0x3b461 - 0x3b462
int32_t function_3b461(void) {
    // 0x3b461
    return g4;
}

// Address range: 0x3b480 - 0x3b48b
int32_t function_3b480(int32_t a1) {
    // 0x3b480
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x3b487
    g4 = result;
    return result;
}

// Address range: 0x3b490 - 0x3b49a
int32_t function_3b490(void) {
    // 0x3b490
    g4 = 1;
    return 1;
}

// Address range: 0x3b4a0 - 0x3b5bb
int32_t function_3b4a0(int32_t a1) {
    // 0x3b4a0
    g4 = 0;
    g9 = 0;
    int32_t v1 = g6; // 0x3b4aa
    g6 = a1;
    int32_t v2 = g10; // 0x3b4b0
    int32_t v3 = g8; // 0x3b4b3
    int32_t v4 = *(int32_t *)(a1 + 28); // 0x3b4b6
    g7 = v4;
    int32_t v5; // 0x3b4c5
    int32_t v6; // 0x3b4d9
    int32_t v7; // 0x3b4c0
    if (v4 != 0) {
        // 0x3b4bd
        v7 = function_50390(v4);
        g4 = v7;
        v6 = g6;
        v5 = g9;
    } else {
        v6 = a1;
        v7 = 0;
        v5 = 0;
    }
    // 0x3b4c5
    g10 = 0;
    g8 = 0;
    int32_t v8 = *(int32_t *)(v6 + 16); // 0x3b4d9
    g4 = v8;
    g4 = function_27600(v8, "xuidReserve", v7, v5);
    int32_t v9 = g6; // 0x3b4e4
    int32_t v10 = *(int32_t *)(v9 + 28); // 0x3b4e4
    g9 = v10;
    int32_t v11; // 0x3b507
    int32_t v12; // 0x3b50b
    if (v10 == 0) {
        // 0x3b4c5
        v12 = g8;
        v11 = g10;
    } else {
        int32_t v13 = *(int32_t *)v10; // 0x3b4eb
        g4 = v13;
        g10 = v13;
        g8 = v10;
        v12 = v10;
        v11 = v13;
    }
    int32_t v14 = *(int32_t *)(v9 + 16); // 0x3b517
    g4 = v14;
    g4 = function_27600(v14, "xuidHost", v11, v12);
    int32_t v15 = g6; // 0x3b522
    int32_t v16 = *(int32_t *)(v15 + 24); // 0x3b522
    g4 = v16;
    if (v16 == 2) {
        int32_t v17 = *(int32_t *)(v15 + 16); // 0x3b570
        g4 = v17;
        g4 = function_27920(v17, "state", "lobby");
        int32_t result = *(int32_t *)(g6 + 16); // 0x3b57b
        g4 = result;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v18 = *(int32_t *)(v15 + 16); // 0x3b5a0
    g4 = v18;
    if (v16 == 7) {
        // 0x3b590
        g4 = function_27920(v18, "state", "game");
        int32_t result2 = *(int32_t *)(g6 + 16); // 0x3b5ab
        g4 = result2;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result2;
    }
    // 0x3b52f
    g4 = function_27920(v18, "state", (char *)&g129);
    int32_t result3 = *(int32_t *)(g6 + 16); // 0x3b54a
    g4 = result3;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result3;
}

// Address range: 0x3b5c0 - 0x3b640
int32_t function_3b5c0(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x3b5c3
    int32_t v2 = g6; // 0x3b5c4
    g6 = a1;
    g10 = a2;
    uint32_t result = *(int32_t *)(a1 + 24); // 0x3b5ce
    g4 = result;
    if (result <= 1) {
        // 0x3b630
        g6 = v2;
        g10 = v1;
        return result;
    }
    int32_t v3 = *(int32_t *)&g273; // 0x3b5d6
    g4 = v3;
    g9 = v3;
    int32_t * v4 = (int32_t *)(a1 + 8); // 0x3b5e9
    g7 = *v4;
    int32_t v5 = *v4; // 0x3b602
    g4 = v5;
    g4 = function_2a090(v5, a2, 0);
    int32_t v6 = *(int32_t *)(g6 + 28); // 0x3b60d
    g4 = v6;
    int32_t result2; // 0x3b61b
    if (v6 != 0) {
        // 0x3b614
        result2 = function_53b30(v6, g10);
        g4 = result2;
    } else {
        result2 = 0;
    }
    // 0x3b620
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x3b6ee - 0x3b71f
int32_t function_3b6ee(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7ae3bd); // 0x3b6ee
    int32_t v2 = *v1 - 1; // 0x3b6ee
    *v1 = v2;
    int32_t v3; // 0x3b6f4
    if (v2 == 0) {
        // bb
        v3 = function_3b730();
        g4 = v3;
    } else {
        // 0x3b6ee
        v3 = g4;
    }
    // 0x3b6f6
    g9 = v3;
    int32_t result = *(int32_t *)(g6 + 36); // 0x3b6fe
    g4 = result;
    if (result == 0) {
        // 0x3b718
        return 0;
    }
    // 0x3b705
    g9 = *(int32_t *)result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x3b723 - 0x3b72b
int32_t function_3b723(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b20c4); // 0x3b723
    *v1 = *v1 + 1;
    return g4;
}

// Address range: 0x3b730 - 0x3b737
int32_t function_3b730(void) {
    // 0x3b730
    return g4;
}

// Address range: 0x3b73c - 0x3b73e
int32_t function_3b73c(void) {
    // 0x3b73c
    return g4;
}

// Address range: 0x3b74c - 0x3b74e
int32_t function_3b74c(void) {
    // 0x3b74c
    return g4;
}

// Address range: 0x3b750 - 0x3b751
int32_t function_3b750(int32_t a1, char * a2) {
    // 0x3b750
    return g4;
}

// Address range: 0x3b773 - 0x3b7bf
int32_t function_3b773(int32_t a1, int32_t a2) {
    // 0x3b773
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1 = g5 - 16; // 0x3b776
    g9 = v1;
    *(int32_t *)v1 = (int32_t)&g132;
    *(int32_t *)(g5 - 12) = 1;
    int32_t v2 = g6; // 0x3b79b
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x3b79b
    g4 = v3;
    int32_t v4; // 0x3b7aa
    if (v3 != 0) {
        // 0x3b7a2
        g4 = function_28600(v3);
        v4 = g6;
    } else {
        v4 = v2;
    }
    int32_t v5 = *(int32_t *)(v4 + 12); // 0x3b7aa
    g4 = v5;
    int32_t result; // 0x3b7b4
    if (v5 != 0) {
        // 0x3b7b1
        result = function_28600(v5);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x3b7b9
    g6 = a1;
    return result;
}

// Address range: 0x3b7bf - 0x3b7eb
int32_t function_3b7bf(void) {
    // 0x3b7bf
    g9 = g6 + 20;
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_1fc30(g9);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x3b7cd
    g4 = v1;
    while (true) {
        // 0x3b7d0
        g6 += 12;
        *(int32_t *)(g5 - 28) = v1;
        g4 = function_1fc30(g6);
        int32_t v2 = *(int32_t *)(g5 - 28); // 0x3b7de
        g4 = v2;
        int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x3b7e4
        g4 = v3;
        v1 = v3;
    }
}

// Address range: 0x3b7f0 - 0x3b967
int32_t function_3b7f0(int32_t a1) {
    int32_t v1 = g10; // 0x3b7f3
    int32_t v2 = g6; // 0x3b7f4
    g6 = a1;
    g4 = g281;
    g9 = *(int32_t *)g281;
    char * v3;
    int32_t v4; // 0x3b840
    if (*(int32_t *)(a1 + 24) > 2) {
        int32_t v5 = *(int32_t *)(a1 + 8); // 0x3b8c0
        g4 = v5;
        int32_t v6 = function_27c00(v5, "server/server", (int32_t *)"listen"); // 0x3b8c6
        g4 = v6;
        int32_t v7 = function_2cc30(v6, "listen"); // 0x3b8d6
        g4 = v7;
        if (v7 == 0) {
            int16_t * v8 = g286; // 0x3b905
            int32_t v9 = (int32_t)v8; // 0x3b905
            g4 = v9;
            g9 = *(int32_t *)v8;
            g10 = v9;
            if (v8 != NULL) {
                // 0x3b92e
                g4 = v9;
                g9 = *(int32_t *)v8;
            }
        }
        // 0x3b8df
        g4 = (int32_t)g283;
        g9 = *(int32_t *)g283;
        v4 = g6;
        v3 = "disconnect";
    } else {
        v4 = a1;
        v3 = NULL;
    }
    int32_t * v10 = (int32_t *)(v4 + 36); // 0x3b831
    int32_t v11 = *v10; // 0x3b831
    g4 = v11;
    int32_t v12; // 0x3b856
    if (v11 != 0) {
        // 0x3b838
        g9 = *(int32_t *)v11;
        *v10 = 0;
        v12 = g6;
    } else {
        v12 = v4;
    }
    int32_t * v13 = (int32_t *)(v12 + 32); // 0x3b847
    int32_t v14 = *v13; // 0x3b847
    g4 = v14;
    int32_t v15; // 0x3b86c
    if (v14 != 0) {
        // 0x3b84e
        g9 = *(int32_t *)v14;
        *v13 = 0;
        v15 = g6;
    } else {
        v15 = v12;
    }
    int32_t * v16 = (int32_t *)(v15 + 28); // 0x3b85d
    int32_t v17 = *v16; // 0x3b85d
    g4 = v17;
    int32_t v18; // 0x3b873
    if (v17 != 0) {
        // 0x3b864
        g9 = *(int32_t *)v17;
        *v16 = 0;
        v18 = g6;
    } else {
        v18 = v15;
    }
    // 0x3b873
    g4 = function_3b750(v18, v3);
    function_1bc40();
    g4 = g281;
    g9 = *(int32_t *)g281;
    g6 = v2;
    g10 = v1;
    return g281;
}

// Address range: 0x3b970 - 0x3ba18
int32_t function_3b970(int32_t a1) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x3b976
    g6 = a1;
    int32_t v3 = g10; // 0x3b97c
    int32_t v4 = g8; // 0x3b97f
    g4 = *(int32_t *)a1;
    *(int32_t *)(a1 + 24) = 5;
    g10 = *(int32_t *)(g4 + 8);
    int32_t v5 = function_2a500("update", " update {  system {  lock starting  }  } "); // 0x3b9a5
    int32_t v6 = g6; // 0x3b9aa
    g4 = v5;
    int32_t v7; // 0x3b9c5
    if (v5 != 0) {
        // 0x3b9bd
        g4 = function_28600(v5);
        v7 = g6;
    } else {
        v7 = v6;
    }
    // 0x3b9c5
    g4 = *(int32_t *)v7;
    int32_t v8 = *(int32_t *)(v7 + 28); // 0x3b9cd
    g4 = v8;
    int32_t v9 = function_50390(v8); // 0x3b9d3
    g4 = v9;
    g10 = v9;
    g8 = g9;
    int32_t v10 = function_1bc00((int32_t)&g82); // 0x3b9e3
    g4 = v10;
    g4 = v10;
    function_573b0(v10, *(int32_t *)(g6 + 8), g10, g8);
    g4 = v10;
    *(int32_t *)(g6 + 32) = v10;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return g4;
}

// Address range: 0x3ba18 - 0x3bae7
int32_t function_3ba18(int32_t a1) {
    // 0x3ba18
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x3ba1a
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x3ba28
    g4 = v2;
    g6 = v2;
    g4 = *(int32_t *)(g5 - 44);
    g4 = function_1bc40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // bp-4
    g5 = &v3;
    int32_t v4 = g10; // 0x3ba53
    int32_t v5 = g6; // 0x3ba54
    g6 = a1;
    g4 = *(int32_t *)a1;
    *(int32_t *)(a1 + 24) = 3;
    g10 = *(int32_t *)(g4 + 8);
    int32_t v6 = function_2a500("update", " update {  system {  lock matching  }  } "); // 0x3ba7e
    int32_t v7 = g6; // 0x3ba83
    g4 = v6;
    int32_t v8; // 0x3bab5
    if (v6 != 0) {
        // 0x3ba96
        g4 = function_28600(v6);
        v8 = g6;
    } else {
        v8 = v7;
    }
    // 0x3ba9e
    g4 = *(int32_t *)v8;
    int32_t * v9 = (int32_t *)(v8 + 36); // 0x3baa6
    int32_t v10 = *v9; // 0x3baa6
    g4 = v10;
    if (v10 != 0) {
        // 0x3baad
        g9 = *(int32_t *)v10;
        *v9 = 0;
    }
    int32_t v11 = function_1bc00(96); // 0x3bac3
    g4 = v11;
    int32_t v12 = g6; // 0x3bac8
    g10 = v11;
    int32_t v13 = *(int32_t *)(v12 + 8); // 0x3bace
    g4 = v13;
    g4 = function_43740(v11, v13, v12);
    *(int32_t *)(g6 + 36) = g10;
    g6 = v5;
    g10 = v4;
    return g4;
}

// Address range: 0x3bae7 - 0x3bb7b
int32_t function_3bae7(int32_t a1) {
    // 0x3bae7
    g6 = g4;
    int32_t v1 = g5 - 12; // 0x3bae9
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x3baf7
    g4 = v2;
    g6 = v2;
    g4 = function_1bc40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g10; // 0x3bb13
    int32_t v4 = g6; // 0x3bb14
    g6 = a1;
    int32_t * v5 = (int32_t *)(a1 + 36); // 0x3bb1b
    int32_t v6 = *v5; // 0x3bb1b
    g4 = v6;
    int32_t v7; // 0x3bb31
    if (v6 != 0) {
        // 0x3bb22
        g9 = *(int32_t *)v6;
        *v5 = 0;
        v7 = g6;
    } else {
        v7 = a1;
    }
    // 0x3bb31
    g4 = *(int32_t *)v7;
    *(int32_t *)(v7 + 24) = 2;
    g10 = *(int32_t *)(g4 + 8);
    int32_t v8 = function_2a500("update", " update {  system {  lock #empty#  }  } "); // 0x3bb54
    g4 = v8;
    int32_t result; // 0x3bb6f
    if (v8 != 0) {
        // 0x3bb6c
        result = function_28600(v8);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x3bb74
    g6 = v4;
    g10 = v3;
    return result;
}

// Address range: 0x3bb7b - 0x3bbfb
int32_t function_3bb7b(int32_t a1) {
    // 0x3bb7b
    g6 = g4;
    int32_t v1 = g5 - 12; // 0x3bb7d
    g4 = v1;
    g4 = function_1fc30(v1);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g10; // 0x3bb93
    int32_t v3 = g6; // 0x3bb94
    g6 = a1;
    int32_t * v4 = (int32_t *)(a1 + 32); // 0x3bb9b
    int32_t v5 = *v4; // 0x3bb9b
    g4 = v5;
    int32_t v6; // 0x3bbb1
    if (v5 != 0) {
        // 0x3bba2
        g9 = *(int32_t *)v5;
        *v4 = 0;
        v6 = g6;
    } else {
        v6 = a1;
    }
    // 0x3bbb1
    g4 = *(int32_t *)v6;
    *(int32_t *)(v6 + 24) = 2;
    g10 = *(int32_t *)(g4 + 8);
    int32_t v7 = function_2a500("update", " update {  system {  lock #empty#  }  } "); // 0x3bbd4
    g4 = v7;
    int32_t result; // 0x3bbef
    if (v7 != 0) {
        // 0x3bbec
        result = function_28600(v7);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x3bbf4
    g6 = v3;
    g10 = v2;
    return result;
}

// Address range: 0x3bbfb - 0x3bc97
int32_t function_3bbfb(int32_t a1) {
    // 0x3bbfb
    g6 = g4;
    int32_t v1 = g5 - 12; // 0x3bbfd
    g4 = v1;
    g4 = function_1fc30(v1);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g10; // 0x3bc13
    int32_t v3 = g6; // 0x3bc14
    g6 = a1;
    int32_t v4 = *(int32_t *)a1; // 0x3bc1b
    g4 = v4;
    g10 = *(int32_t *)(v4 + 8);
    int32_t v5 = function_2a500("update", " update {  system {  lock loading  }  }  delete {  server delete  } "); // 0x3bc37
    int32_t v6 = g6; // 0x3bc3c
    g4 = v5;
    int32_t v7; // 0x3bc57
    if (v5 != 0) {
        // 0x3bc4f
        g4 = function_28600(v5);
        v7 = g6;
    } else {
        v7 = v6;
    }
    int32_t v8 = *(int32_t *)(v7 + 8); // 0x3bc57
    g4 = v8;
    function_38b70(v8);
    int32_t result = (int32_t)g450; // 0x3bc62
    g4 = result;
    g9 = *(int32_t *)g450;
    g7 = *(int32_t *)(g6 + 8);
    g9 = *(int32_t *)g450;
    if ((char)result == 0) {
        // 0x3bc90
        return result;
    }
    // 0x3bc82
    g6 = v3;
    g10 = v2;
    return result;
}

// Address range: 0x3bc9b - 0x3bd21
int32_t function_3bc9b(int32_t a1, int32_t a2, int32_t a3) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x3bc9b
    *v1 = *v1 - 1;
    __asm_in_1653((int16_t)g9);
    int32_t v2; // ebp
    *(int32_t *)(v2 - 20) = (int32_t)&g132;
    *(int32_t *)(v2 - 16) = 1;
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v3 = function_26cf0(); // 0x3bcd5
    g4 = v3;
    g6 = v3;
    function_27970(v3, "OnMatchSessionUpdate", "state", "error", "error", "nomap");
    g4 = g297;
    g6 = a1;
    g10 = a2;
    return g297;
}

// Address range: 0x3bd21 - 0x3bda4
int32_t function_3bd21(int32_t a1, unsigned char a2, int32_t a3) {
    int32_t v1 = a2;
    g10 = g4;
    g4 = function_26d40();
    g6 = function_7ab57(g10, (int32_t)&g870);
    int32_t v2 = g5 - 12; // 0x3bd35
    g4 = v2;
    g4 = function_1fc30(v2);
    function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // 0x3bd50
    int32_t v4 = g6; // 0x3bd56
    g6 = a1;
    int32_t v5 = g10; // 0x3bd5c
    g4 = v1;
    g10 = a3;
    int32_t * v6 = (int32_t *)(a1 + 36); // 0x3bd66
    int32_t v7 = *v6; // 0x3bd66
    g9 = v7;
    int32_t v8; // 0x3bd93
    int32_t v9; // 0x3bd9e
    if (v7 != 0) {
        if (a2 == 0) {
            // 0x3bd71
            g7 = *(int32_t *)v7;
            *v6 = 0;
            g4 = v1;
            v9 = v3;
            v8 = g6;
        } else {
            v9 = v3;
            v8 = a1;
        }
    } else {
        v9 = v3;
        v8 = a1;
    }
    // 0x3bd87
    g4 = v1 & (int32_t)&g862;
    g10 = v5;
    g4 = *(int32_t *)(v8 + 28);
    g6 = v4;
    g5 = v9;
    int32_t result = function_52a80(v4, v5, v9); // 0x3bd9f
    g4 = result;
    return result;
}

// Address range: 0x3bdb0 - 0x3be58
int32_t function_3bdb0(int32_t a1) {
    int32_t v1 = g10; // 0x3bdb3
    int32_t v2 = g6; // 0x3bdb4
    g6 = a1;
    g4 = *(int32_t *)a1;
    *(int32_t *)(a1 + 24) = 8;
    g10 = *(int32_t *)(g4 + 8);
    int32_t v3 = function_2a500("updatedelete", " update {  system {  lock endgame  }  }  delete {  server delete  } "); // 0x3bdde
    g4 = v3;
    if (v3 != 0) {
        // 0x3bdf6
        g4 = function_28600(v3);
    }
    // 0x3bdfe
    g4 = (int32_t)g283;
    g9 = *(int32_t *)g283;
    g4 = g281;
    g9 = *(int32_t *)g281;
    g6 = v2;
    g10 = v1;
    return g281;
}

// Address range: 0x3be58 - 0x3c00d
int32_t function_3be58(int32_t a1, int32_t a2) {
    // 0x3be58
    g6 = g4;
    int32_t v1 = g5 - 12; // 0x3be5a
    g4 = v1;
    g4 = function_1fc30(v1);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g8; // 0x3be73
    int32_t v3 = g10; // 0x3be74
    int32_t v4 = g6; // bp-16
    g6 = a1;
    g10 = a2;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 24) = 7;
    function_38b70(g4);
    int32_t v5; // bp-1076
    int32_t v6 = &v5; // 0x3be94
    g9 = v6;
    g4 = 0;
    g7 = &g21;
    g8 = v6;
    __asm_rep_stosd_memset((char *)&v5, 0, (int32_t)&g21);
    g7 = 0;
    g8 = 11;
    int32_t v7; // 0x3bed0
    if (a2 != 0) {
        // 0x3beae
        g7 = 192;
        g8 = v6;
        __asm_rep_movsd_memcpy((char *)&v5, (char *)a2, 192);
        int32_t v8 = (g3 ? -768 : 768) + v6; // 0x3beb2
        g8 = v8;
        g10 = v8;
        g7 = 0;
        int16_t * v9 = (int16_t *)v8; // 0x3beb4
        uint16_t v10 = *v9; // 0x3beb4
        g4 = v10;
        *v9 = v10;
        g8 = 10;
        v7 = 10;
    } else {
        v7 = 11;
    }
    int32_t v11 = g6; // 0x3bebf
    int32_t v12 = *(int32_t *)(v11 + 36); // 0x3bebf
    g4 = v12;
    int32_t v13; // 0x3bee1
    int32_t v14; // 0x3bee5
    int32_t v15; // 0x3bf90
    if (v12 == 0) {
        // 0x3bf90
        v15 = *(int32_t *)(v11 + 28);
        g4 = v15;
        v14 = g9;
        v13 = v7;
    } else {
        // 0x3beca
        g8 = v7 | 4;
        int32_t v16 = function_43b70(v12); // 0x3bed6
        g4 = v16;
        g9 = v6;
        v15 = v16;
        v14 = v6;
        v13 = g8;
    }
    int32_t v17 = *(int32_t *)(g6 + 8); // 0x3beed
    g4 = v17;
    int32_t v18 = function_38c00(v17, v15, (int32_t *)v14, v13); // 0x3bef3
    g4 = v18;
    if ((char)v18 != 0) {
        // 0x3bf20
        g4 = g281;
        g9 = *(int32_t *)g281;
        int32_t v19; // bp-306
        g7 = &v19;
        int32_t result = (int32_t)g283; // 0x3bf6e
        g4 = result;
        g9 = *(int32_t *)g283;
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result;
    }
    int32_t v20 = g6; // 0x3befc
    int32_t v21 = *(int32_t *)(v20 + 36); // 0x3befc
    g9 = v21;
    int32_t result2; // 0x3bf18
    if (v21 == 0) {
        int32_t * v22 = (int32_t *)(v20 + 28); // 0x3bfa0
        int32_t v23 = *v22; // 0x3bfa0
        g4 = v23;
        g9 = *(int32_t *)v23;
        *v22 = 0;
        g4 = g297;
        g10 = *(int32_t *)(g297 + 8);
        int32_t v24 = function_26cf0(); // 0x3bfc3
        g4 = v24;
        g6 = v24;
        function_27970(v24, "OnMatchSessionUpdate", "state", "error", "error", "connect");
        g4 = g297;
        result2 = g297;
    } else {
        // 0x3bf07
        *(int32_t *)(v20 + 24) = 4;
        result2 = g4;
    }
    // 0x3bf0e
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result2;
}

// Address range: 0x3c00d - 0x3c219
int32_t function_3c00d(int32_t a1) {
    // 0x3c00d
    g10 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g6; // 0x3c029
    g6 = a1;
    int32_t v2 = g10; // 0x3c02f
    int32_t v3 = g8; // 0x3c032
    int32_t v4 = *(int32_t *)(a1 + 32); // 0x3c035
    char v5; // bp-802
    int32_t v6 = &v5; // 0x3c040
    g8 = v6;
    int32_t v7;
    g9 = &v7;
    g10 = v4;
    g4 = &g81;
    int32_t v8; // 0x3c063
    int32_t v9; // 0x3c1d9
    int32_t v10; // 0x3c1d3
    if ((v6 & 2) != 0) {
        // 0x3c1d0
        int32_t v11; // bp-800
        v10 = &v11;
        g8 = v10;
        v9 = v4 + 2;
        g10 = v9;
        v5 = (char)*(int16_t *)v4;
        g4 = &g80;
        v8 = &g80;
    } else {
        v10 = v6;
        v9 = v4;
        v8 = &g81;
    }
    int32_t v12 = v8 / 4; // 0x3c060
    g7 = v12;
    __asm_rep_movsd_memcpy((char *)v10, (char *)v9, v12);
    int32_t v13 = (g3 ? -4 : 4) * v12 + v10; // 0x3c065
    g8 = v13;
    g10 = v13;
    g7 = 0;
    if ((v8 & 2) != 0) {
        int16_t * v14 = (int16_t *)v13; // 0x3c069
        uint16_t v15 = *v14; // 0x3c069
        g4 = v15;
        *v14 = v15;
    }
    // 0x3c06f
    if (v5 != 0) {
        // 0x3c120
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    int32_t * v16 = (int32_t *)(g6 + 32); // 0x3c07c
    int32_t v17 = *v16; // 0x3c07c
    g4 = v17;
    g9 = *(int32_t *)v17;
    *v16 = 0;
    char v18;
    if (v18 != 0) {
        int32_t v19 = function_2a500("update", " update {  system {  lock #empty#  }  server {  server dedicated  }  } "); // 0x3c0b2
        g4 = v19;
        g10 = v19;
        int32_t v20 = function_27340(v19, (int32_t)"update/server", 0); // 0x3c0cf
        g4 = v6;
        function_56ef0((int32_t *)&v5, v20);
        g9 = v6;
        g4 = v19;
        int32_t result; // 0x3c10e
        if (v19 != 0) {
            // 0x3c10b
            result = function_28600(v19);
            g4 = result;
        } else {
            result = 0;
        }
        // 0x3c113
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v21 = *(int32_t *)(g6 + 8); // 0x3c148
    g4 = v21;
    int32_t v22 = function_27c00(v21, "server/server", NULL); // 0x3c14e
    g4 = v22;
    if (v22 == 0) {
        // 0x3c1fd
        *(int32_t *)(g6 + 24) = 6;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    int32_t v23 = function_26cf0(); // 0x3c162
    g4 = v23;
    g10 = v23;
    g4 = function_26330(v23);
    int32_t v24 = *(int32_t *)(g6 + 28); // 0x3c179
    g4 = v24;
    g4 = function_275a0(g10, "syssession", v24);
    function_27920(g10, "error", "n/a");
    g4 = g297;
    g9 = g297;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g297;
}

// Address range: 0x3c219 - 0x3c3ab
int32_t function_3c219(int32_t a1) {
    // 0x3c219
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x3c21b
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x3c229
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g10; // 0x3c246
    g10 = a1;
    int32_t v4 = g6; // 0x3c24c
    int32_t v5 = g8; // 0x3c24f
    int32_t * v6 = (int32_t *)(a1 + 24); // 0x3c252
    int32_t v7 = *v6; // 0x3c252
    g4 = v7;
    int32_t result2; // 0x3c390
    if (v7 == 3) {
        // 0x3c390
        result2 = *(int32_t *)(a1 + 36);
        g4 = result2;
        if (result2 != 0) {
            // 0x3c39b
            g9 = *(int32_t *)result2;
        } else {
            result2 = 0;
        }
        goto lab_0x3c279;
    } else {
        if (v7 > 3) {
            if (v7 == 4) {
                result2 = v7;
            } else {
                if (v7 == 5) {
                    int32_t * v8 = (int32_t *)(a1 + 32); // 0x3c340
                    int32_t v9 = *v8; // 0x3c340
                    g4 = v9;
                    if (v9 != 0) {
                        // 0x3c34b
                        g9 = *(int32_t *)v9;
                        int32_t result = *v8; // 0x3c353
                        g4 = result;
                        g9 = *(int32_t *)result;
                        if ((char)result != 0) {
                            // 0x3c366
                            g10 = v3;
                            return result;
                        }
                        result2 = result;
                    } else {
                        result2 = 0;
                    }
                } else {
                    result2 = v7;
                }
            }
            goto lab_0x3c279;
        } else {
            if (v7 != 0) {
                result2 = v7;
                goto lab_0x3c279;
            } else {
                // 0x3c2a4
                *v6 = 1;
                g4 = g297;
                g8 = *(int32_t *)(g297 + 8);
                int32_t v10 = function_26cf0(); // 0x3c2bc
                g4 = v10;
                g6 = v10;
                function_27970(v10, "OnMatchSessionUpdate", "state", "progress", "progress", "creating");
                g4 = g297;
                int32_t v11 = function_1bc00(220); // 0x3c308
                g4 = v11;
                g6 = v11;
                int32_t v12 = *(int32_t *)(g10 + 8); // 0x3c30f
                g4 = v12;
                g4 = function_55d30(v11, v12);
                int32_t v13 = g6; // 0x3c31e
                *(int32_t *)(g10 + 28) = v13;
                if (v13 == 0) {
                    // 0x3c329
                    g6 = v4;
                    g10 = v3;
                    g8 = v5;
                    return g4;
                }
                goto lab_0x3c281;
            }
        }
    }
  lab_0x3c279:;
    int32_t v14 = *(int32_t *)(a1 + 28);
    g6 = v14;
    if (v14 == 0) {
        // 0x3c329
        g6 = v4;
        g10 = v3;
        g8 = v5;
        return result2;
    }
    g6 = v14;
    goto lab_0x3c281;
  lab_0x3c281:;
    int32_t v15 = *(int32_t *)g6; // 0x3c281
    g4 = v15;
    g10 = v3;
    g6 = v4;
    g8 = v5;
    int32_t result3 = *(int32_t *)(v15 + 8); // 0x3c28f
    g4 = result3;
    return result3;
}

// Address range: 0x3c3ab - 0x3c5ff
int32_t function_3c3ab(int32_t a1) {
    // 0x3c3ab
    g10 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x3c3b8
    g4 = v1;
    g10 = v1;
    g4 = function_1bc40();
    function_7ab57(g10, (int32_t)&g870);
    int32_t v2 = g8; // 0x3c3d3
    int32_t v3 = g10; // 0x3c3d4
    int32_t v4 = g6; // 0x3c3d5
    g4 = a1;
    *(int32_t *)(a1 + 24) = 7;
    int32_t v5 = function_2a500("update", " update {  system {  lock #empty#  }  server {  server listen  }  } "); // 0x3c3fa
    g4 = v5;
    int32_t v6 = function_27340(v5, (int32_t)"update/server", 0); // 0x3c418
    g4 = v6;
    int32_t v7; // bp-80
    int32_t v8 = &v7; // 0x3c41d
    g10 = v8;
    g4 = function_2c6c0(&v7, 0);
    g4 = function_2c870(&v7, 0);
    g4 = function_2c6d0(&v7, 3);
    int32_t v9; // bp-68
    g6 = &v9;
    g4 = function_2c6c0(&v9, 0);
    g4 = function_2c870(&v9, 0);
    function_2c6d0(&v9, 3);
    g4 = 0;
    g7 = 12;
    g8 = v8;
    __asm_rep_stosd_memset((char *)&v7, 0, 12);
    g8 = (g3 ? -48 : 48) + v8;
    g7 = 0;
    g4 = g281;
    g9 = *(int32_t *)g281;
    int32_t v10 = function_2c4e0(v8, 0); // 0x3c4b0
    g4 = v6;
    g4 = function_27920(v6, "adrlocal", (char *)v10);
    int32_t v11 = function_2c4e0(v8, 0); // 0x3c4d7
    g4 = v6;
    function_27920(v6, "adronline", (char *)v11);
    int32_t v12 = (int32_t)g290; // 0x3c4f3
    g9 = v12;
    g4 = v6;
    g4 = function_27600(v6, "xuid", v12, v12);
    g9 = a1;
    int32_t v13 = *(int32_t *)(a1 + 28); // 0x3c52d
    g4 = v13;
    int32_t v14 = function_50390(v13); // 0x3c533
    g10 = v14;
    int32_t v15 = g9; // 0x3c53f
    g8 = v15;
    g4 = g281;
    g9 = *(int32_t *)g281;
    g4 = v6;
    g4 = function_27600(v6, "reservationid", v14, v15);
    g9 = a1;
    int32_t * v16 = (int32_t *)(a1 + 36); // 0x3c572
    int32_t v17 = *v16; // 0x3c572
    g7 = v17;
    if (v17 != 0) {
        // 0x3c579
        g4 = v6;
        g4 = function_27680(v6, "team", 1);
        g9 = a1;
        int32_t v18 = *v16; // 0x3c597
        g4 = v18;
        if (v18 != 0) {
            // 0x3c59e
            g4 = function_43b70(v18);
        }
    }
    // 0x3c5a6
    g4 = a1;
    g9 = a1;
    int32_t v19 = *v16; // 0x3c5d9
    g4 = v19;
    if (v19 != 0) {
        // 0x3c5e0
        g9 = *(int32_t *)v19;
    }
    // 0x3c5e8
    g4 = v5;
    int32_t result; // 0x3c5f2
    if (v5 != 0) {
        // 0x3c5ef
        result = function_28600(v5);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x3c5f7
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x3c600 - 0x3c601
int32_t function_3c600(void) {
    // 0x3c600
    return g4;
}

// Address range: 0x3c620 - 0x3c64c
int32_t function_3c620(int32_t a1) {
    int32_t v1 = (int32_t)g450; // 0x3c626
    g4 = v1;
    g6 = a1;
    g9 = *(int32_t *)g450;
    g10 = v1;
    int32_t result; // 0x3c643
    if (v1 == a1) {
        // bb
        result = function_3c660();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x3c645
    return result;
}

// Address range: 0x3c651 - 0x3c65e
int32_t function_3c651(void) {
    // 0x3c651
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x3c660 - 0x3c7ac
int32_t function_3c660(void) {
    int32_t v1 = *(int32_t *)(g4 + 24); // 0x3c660
    g4 = v1;
    int32_t v2; // 0x3c77d
    if (v1 == 2) {
        int32_t v3 = *(int32_t *)(g6 + 8); // 0x3c6d0
        g4 = v3;
        int32_t v4 = function_27c00(v3, "server/server", NULL); // 0x3c6d6
        g4 = v4;
        g8 = v4;
        int32_t v5 = *(int32_t *)(g6 + 8); // 0x3c6ed
        g4 = v5;
        int32_t v6 = function_27c00(v5, "system/lock", (int32_t *)&g129); // 0x3c6f3
        g4 = v6;
        *(int32_t *)(g5 - 44) = v6;
        int32_t v7 = function_2a500("updatedelete", " update {  system {  lock #empty#  }  }  delete {  server delete  } "); // 0x3c712
        g4 = v7;
        g9 = 1;
        g10 = v7;
        int32_t v8; // 0x3c7a4
        if (v4 == 0) {
            int32_t v9 = *(int32_t *)(g5 - 44); // 0x3c78d
            g4 = v9;
            int32_t v10 = function_2cc30(v9, "endgame"); // 0x3c79b
            g4 = v10;
            v8 = v10 == 0;
            g9 = v8;
        } else {
            v8 = 1;
        }
        int32_t v11 = *(int32_t *)&g273; // 0x3c722
        g4 = v11;
        g7 = v11;
        *(int32_t *)(g5 - 48) = v8;
        g8 = g4;
        g4 = g274;
        *(int32_t *)(g5 - 44) = g274;
        g4 = function_27340(g10, (int32_t)"update", 0);
        int32_t v12 = g5; // 0x3c754
        g9 = *(int32_t *)(v12 - 48);
        g4 = g6;
        *(int32_t *)(v12 - 32) = g10;
        g4 += 8;
        v2 = *(int32_t *)(g5 - 32);
        g4 = v2;
        if (v2 == 0) {
            int32_t result = function_3c651(); // 0x3c788
            g4 = result;
            return result;
        }
    } else {
        if (v1 != 8) {
            // bb
            g4 = function_3c651();
        }
        int32_t v13 = g10; // 0x3c66d
        g4 = v13;
        g6 = *(int32_t *)(v13 + 8);
        int32_t v14 = function_2a500("updatedelete", " update {  system {  lock endgame  }  }  delete {  server delete  } "); // 0x3c689
        g4 = v14;
        *(int32_t *)(g5 - 28) = v14;
        int32_t v15 = *(int32_t *)(g5 - 28); // 0x3c69a
        g4 = v15;
        if (v15 == 0) {
            int32_t v16 = function_3c651(); // 0x3c69f
            g4 = v16;
            v2 = v16;
        } else {
            v2 = v15;
        }
    }
    int32_t result2 = function_28600(v2); // 0x3c6a4
    g4 = result2;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result2;
}

// Address range: 0x3c7ad - 0x3c7ae
int32_t function_3c7ad(void) {
    // 0x3c7ad
    return g4;
}

// Address range: 0x3c7c2 - 0x3c7c3
int32_t function_3c7c2(void) {
    // 0x3c7c2
    return g4;
}

// Address range: 0x3c7e0 - 0x3c907
int32_t function_3c7e0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3c7e0
    g6 = a1;
    g8 = a3;
    *(int32_t *)a1 = (int32_t)&g165;
    *(int32_t *)(g6 + 4) = (int32_t)&g166;
    int32_t v1 = function_27340(g8, (int32_t)"settings", 0); // 0x3c80f
    g4 = v1;
    *(int32_t *)(g6 + 8) = v1;
    *(int32_t *)(g6 + 12) = g4;
    int32_t v2 = function_26cf0(); // 0x3c821
    g4 = v2;
    g10 = v2;
    g4 = function_27a20(v2, "SysSessionData", "type", "host");
    int32_t v3 = g6; // 0x3c848
    g4 = *(int32_t *)(v3 + 8);
    *(int32_t *)(v3 + 16) = g10;
    *(int32_t *)(g6 + 20) = g10;
    *(int32_t *)(g6 + 24) = 2;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 36) = 0;
    function_25fe0(g8, g4);
    int32_t v4 = *(int32_t *)&g273; // 0x3c87c
    g4 = v4;
    g4 = function_36df0(v4, g6);
    int32_t v5 = function_27c00(g8, "state", (int32_t *)&g129); // 0x3c8a0
    g4 = v5;
    g10 = v5;
    int32_t v6 = function_2cc30(v5, "game"); // 0x3c8b2
    g4 = v6;
    if (v6 != 0) {
        // bb
        g4 = function_3c950();
    }
    // 0x3c8bf
    *(int32_t *)(g6 + 24) = 7;
    int32_t v7 = function_1bc00(220); // 0x3c8cd
    g4 = v7;
    g10 = v7;
    g4 = a2;
    g4 = function_55fb0(v7, a2, *(int32_t *)(g6 + 8));
    g9 = a2;
    *(int32_t *)(g6 + 28) = g10;
    g4 = *(int32_t *)g9;
    int32_t result = function_3c620(g6); // 0x3c8fb
    g4 = result;
    return result;
}

// Address range: 0x3c90b - 0x3c94b
int32_t function_3c90b(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x3c90b
    *v1 = *v1 - 1;
    int32_t result = g4; // 0x3c914
    int32_t v2; // ebp
    int32_t v3 = v2 + 2; // 0x3c91a
    g5 = v3;
    int32_t v4 = g7 - 1; // 0x3c91b
    g7 = v4;
    if (v3 == 0 || v4 == 0) {
        // 0x3c91d
        return result;
    }
    // 0x3c91e
    *(char *)result = 2 * (char)result;
    int32_t v5 = *(int32_t *)(g5 - 28); // 0x3c934
    g4 = v5;
    int32_t result2; // 0x3c93e
    if (v5 != 0) {
        // 0x3c93b
        result2 = function_28600(v5);
        g4 = result2;
    } else {
        result2 = 0;
    }
    // 0x3c943
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result2;
}

// Address range: 0x3c950 - 0x3c974
int32_t function_3c950(void) {
    int32_t result = function_2cc30(g10, "ending"); // 0x3c95b
    g4 = result;
    *(int32_t *)(g6 + 24) = 8;
    return result;
}

// Address range: 0x3c974 - 0x3c9ad
int32_t function_3c974(void) {
    // 0x3c974
    g8 = g4;
    g4 = function_1bc40();
    g10 = g8;
    while (true) {
        int32_t v1 = g5 - 28; // 0x3c980
        g4 = v1;
        function_1fc30(v1);
        int32_t v2 = g6 + 20; // 0x3c98b
        g4 = v2;
        g4 = function_1fc30(v2);
        int32_t v3 = g6 + 12; // 0x3c996
        g6 = v3;
        g4 = function_1fc30(v3);
        int32_t v4 = function_7ab57(g10, (int32_t)&g870); // 0x3c9a4
        g4 = v4;
        g10 = v4;
    }
}

// Address range: 0x3c9ad - 0x3c9bb
int32_t function_3c9ad(void) {
    // 0x3c9ad
    g8 = g4;
    int32_t result = function_26d40(); // 0x3c9b2
    g4 = result;
    g10 = g8;
    return result;
}

// Address range: 0x3c9bb - 0x3c9bf
int32_t function_3c9bb(void) {
    int32_t result = g4; // 0x3c9bb
    g10 = result;
    return result;
}

// Address range: 0x3c9bf - 0x3c9c3
int32_t function_3c9bf(void) {
    int32_t result = g4; // 0x3c9bf
    g10 = result;
    return result;
}

// Address range: 0x3c9d0 - 0x3ce33
int32_t function_3c9d0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3c9d0
    g6 = a1;
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x3c9e7
    int32_t v2 = *v1; // 0x3c9e7
    g4 = v2;
    g4 = function_262d0(v2);
    int32_t v3 = *(int32_t *)(g6 + 8); // 0x3c9f2
    g4 = v3;
    int32_t v4 = function_26140(v3); // 0x3ca1b
    g4 = v4;
    g8 = v4;
    if (v4 != 0) {
        while (true) {
            // 0x3ca30
            g6 = 0;
            int32_t v5 = function_26160(v4); // 0x3ca35
            g4 = v5;
            int32_t v6 = function_25190(g8); // 0x3ca43
            g10 = v6;
            g4 = (int32_t)"system";
            int32_t v7 = function_2cc30((int32_t)"system", (char *)v6); // 0x3ca56
            g4 = v7;
            if (v7 == 0) {
              lab_0x3ca7b:
                // 0x3ca7b
                g6 = v5;
                if (v5 == 0) {
                    // break -> 0x3cab4
                    break;
                }
            } else {
                while (true) {
                    int32_t v8 = g6; // 0x3ca5f
                    int32_t v9 = v8 + 1; // 0x3ca5f
                    g6 = v9;
                    if (v8 == 4) {
                        // break -> 0x3ca90
                        break;
                    }
                    int32_t v10 = *(int32_t *)(4 * v9 - 52 + g5); // 0x3ca67
                    g4 = v10;
                    int32_t v11 = function_2cc30(v10, (char *)g10); // 0x3ca72
                    g4 = v11;
                    if (v11 == 0) {
                        goto lab_0x3ca7b;
                    }
                }
                // 0x3ca90
                g6 = a1;
                int32_t v12 = *v1; // 0x3ca97
                g4 = v12;
                g4 = function_25fe0(v12, g8);
                g4 = function_28600(g8);
                g6 = v5;
                if (v5 == 0) {
                    // break -> 0x3cab4
                    break;
                }
            }
            // 0x3ca88
            g8 = v5;
            v4 = v5;
        }
    }
    // 0x3cab4
    g6 = a1;
    int32_t v13 = *v1; // 0x3cac7
    g4 = v13;
    int32_t v14 = function_27340(v13, (int32_t)"system", 1); // 0x3cacd
    g4 = v14;
    g6 = v14;
    if (v14 != 0) {
        int32_t v15 = function_27340(v14, (int32_t)"network", 0); // 0x3caeb
        g4 = v15;
        if (v15 == 0) {
            // bb
            g4 = function_3cea5();
        }
        int32_t v16 = function_27340(g6, (int32_t)"access", 0); // 0x3cb0b
        g4 = v16;
        if (v16 == 0) {
            // bb54
            g4 = function_3ce88();
        }
    }
    // 0x3cb18
    g6 = a1;
    int32_t v17 = *v1; // 0x3cb2b
    g4 = v17;
    int32_t v18 = function_27340(v17, (int32_t)"options", 1); // 0x3cb31
    g4 = v18;
    g6 = v18;
    if (v18 != 0) {
        // 0x3cb40
        g9 = a1;
        g10 = (int32_t)"dedicated";
        int32_t v19 = *v1; // 0x3cb58
        g4 = v19;
        int32_t v20 = function_27c00(v19, "system/network", (int32_t *)&g129); // 0x3cb5e
        g4 = v20;
        int32_t v21 = function_2cc30((int32_t)"LIVE", (char *)v20); // 0x3cb6e
        g4 = (int32_t)"listen";
        g10 = v21 != 0 ? (int32_t)"listen" : g10;
        int32_t v22 = function_27340(g6, (int32_t)"server", 0); // 0x3cb90
        g4 = v22;
        if (v22 == 0) {
            // bb55
            g4 = function_3cec2();
        }
        int32_t v23 = function_27340(g6, (int32_t)"action", 0); // 0x3cbb0
        g4 = v23;
        g10 = v23;
        if (v23 != 0) {
            int32_t v24 = function_27c00(v23, NULL, (int32_t *)&g129); // 0x3cbce
            g4 = v24;
            if (v24 != 0) {
                // 0x3cbd7
                if (*(char *)v24 != 0) {
                    // bb56
                    g4 = function_3ce6b();
                }
            }
            // 0x3cbe0
            g4 = function_25fe0(g6, g10);
            g4 = function_28600(g10);
        }
    }
    // 0x3cbf4
    g6 = a1;
    int32_t v25 = *v1; // 0x3cc07
    g4 = v25;
    int32_t v26 = function_27340(v25, (int32_t)"members", 1); // 0x3cc0d
    g4 = v26;
    g6 = v26;
    if (v26 != 0) {
        // 0x3cc1c
        g4 = function_27680(v26, "numMachines", 1);
        g4 = function_27680(g6, "numPlayers", 1);
        g4 = function_27680(g6, "numSlots", 1);
        int32_t v27 = function_27340(g6, (int32_t)"machine0", 1); // 0x3cc77
        g4 = v27;
        g6 = v27;
        if (v27 != 0) {
            int32_t v28 = (int32_t)g290; // 0x3cc86
            g4 = v28;
            g9 = v28;
            g4 = function_27600(v27, "id", v28, v28);
            int32_t v29 = function_38d80(); // 0x3ccba
            g4 = v29;
            g4 = function_27600(g6, "flags", v29, g9);
            function_27680(g6, "numPlayers", 1);
            int32_t v30 = (int32_t)g450; // 0x3ccef
            g4 = v30;
            g9 = *(int32_t *)g450;
            g9 = *(int32_t *)g450;
            g9 = *(int32_t *)g450;
            int32_t v31 = function_27ea0(v30, "@info/installed", 0, 0); // 0x3cd27
            g4 = v31;
            g4 = function_27600(g6, "dlcmask", v31, g9);
            int32_t v32 = function_38d90(); // 0x3cd44
            g4 = v32;
            g4 = function_27920(g6, "tuver", (char *)v32);
            function_27680(g6, "ping", 0);
            int32_t v33; // bp-324
            int32_t v34 = &v33; // 0x3cd75
            g4 = v34;
            function_1e010(v34, "player%d");
            int32_t v35; // bp-319
            int32_t v36 = &v35; // 0x3cd93
            g4 = v36;
            int32_t v37 = function_27340(g6, v36, 1); // 0x3cda8
            g4 = v37;
            g10 = v37;
            if (v37 != 0) {
                int32_t v38 = (int32_t)g290; // 0x3cdb3
                g9 = v38;
                g6 = v38;
                g4 = v38;
                function_27600(v37, "xuid", v38, v38);
                g4 = (int32_t)g290;
                g4 = function_27920(g10, "name", g290);
            }
        }
    }
    int32_t result = *(int32_t *)&g273; // 0x3ce05
    g4 = result;
    g6 = a1;
    g9 = result;
    g7 = *v1;
    return result;
}

// Address range: 0x3ce37 - 0x3ce6b
int32_t function_3ce37(int16_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x3ce37
    *v1 = *v1 - 1;
    g7 -= 2;
    int32_t v2 = __asm_hlt(); // 0x3ce42
    g4 = v2;
    uint32_t v3 = g6; // 0x3ce44
    g6 = 256 * (v3 / 256 + v2 & 255) | v3 & -0xff01;
    char v4 = __asm_in_1658(1); // 0x3ce47
    int32_t v5 = g4 & -256 | (int32_t)v4; // 0x3ce47
    g4 = v5;
    char * v6 = (char *)v5; // 0x3ce49
    *v6 = *v6 + v4;
    int32_t v7 = g6; // 0x3ce4b
    int32_t v8 = g4; // 0x3ce4b
    g6 = 256 * v8 + v7 & 0xff00 | v7 & -0xff01;
    int32_t v9 = v8 & -248; // 0x3ce4e
    g4 = v9;
    int32_t * v10 = (int32_t *)v9; // 0x3ce50
    *v10 = *v10 + v9;
    int32_t v11 = g4; // 0x3ce52
    char * v12 = (char *)v11; // 0x3ce52
    *v12 = *v12 + (char)v11;
    return g4;
}

// Address range: 0x3ce6b - 0x3ce88
int32_t function_3ce6b(void) {
    int32_t result = function_2cc30((int32_t)"create", (char *)g4); // 0x3ce76
    g4 = result;
    return result;
}

// Address range: 0x3ce88 - 0x3cea5
int32_t function_3ce88(void) {
    int32_t result = function_27920(g6, "access", "public"); // 0x3ce9b
    g4 = result;
    return result;
}

// Address range: 0x3cea5 - 0x3cec2
int32_t function_3cea5(void) {
    int32_t result = function_27920(g6, "network", "LIVE"); // 0x3ceb8
    g4 = result;
    return result;
}

// Address range: 0x3cec2 - 0x3cedb
int32_t function_3cec2(void) {
    int32_t result = function_27920(g6, "server", (char *)g10); // 0x3ced1
    g4 = result;
    return result;
}

// Address range: 0x3cee0 - 0x3cf60
int32_t function_3cee0(int32_t a1, int32_t a2) {
    // 0x3cee0
    g6 = a1;
    g4 = a2;
    *(int32_t *)a1 = (int32_t)&g165;
    *(int32_t *)(g6 + 4) = (int32_t)&g166;
    int32_t v1 = function_26d60(g4); // 0x3cefe
    g4 = v1;
    *(int32_t *)(g6 + 8) = v1;
    *(int32_t *)(g6 + 12) = g4;
    int32_t v2 = function_26cf0(); // 0x3cf10
    g4 = v2;
    g10 = v2;
    g4 = function_27a20(v2, "SysSessionData", "type", "host");
    *(int32_t *)(g6 + 16) = g10;
    *(int32_t *)(g6 + 20) = g10;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 36) = 0;
    return g4;
}

// Address range: 0x3cf65 - 0x3cf9c
int32_t function_3cf65(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3cf65
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1 = g5 - 16; // 0x3cf68
    g9 = v1;
    *(int32_t *)v1 = (int32_t)&g132;
    *(int32_t *)(g5 - 12) = 1;
    int32_t result = function_3c9d0(g6, g9, 1); // 0x3cf90
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x3cf9c - 0x3cfc0
int32_t function_3cf9c(void) {
    // 0x3cf9c
    g10 = g4;
    while (true) {
        int32_t v1 = g6 + 12; // 0x3cf9e
        g6 = v1;
        g4 = function_1fc30(v1);
        g10 = function_7ab57(g10, (int32_t)&g870);
        int32_t v2 = g6 + 20; // 0x3cfb3
        g4 = v2;
        g4 = function_1fc30(v2);
    }
}

// Address range: 0x3cfc0 - 0x3cfd2
int32_t function_3cfc0(void) {
    // 0x3cfc0
    int32_t v1; // ebp
    *(int32_t *)(v1 - 28) = g4;
    g4 = function_26d40();
    int32_t result = *(int32_t *)(g5 - 28); // 0x3cfcb
    g4 = result;
    g10 = result;
    return result;
}

// Address range: 0x3cfe0 - 0x3d065
int32_t function_3cfe0(int32_t a1) {
    int32_t v1 = g6; // 0x3cfe6
    g6 = a1;
    if (*(int32_t *)(a1 + 24) != 7) {
        // 0x3cff5
        g6 = v1;
        return g4;
    }
    // 0x3d000
    int32_t result; // bp-32
    g10 = &result;
    int32_t v2 = *(int32_t *)(a1 + 8); // 0x3d013
    g4 = v2;
    result = 0;
    int32_t v3 = function_27fc0(v2, "members/numPlayers", 0); // 0x3d03c
    g4 = v3;
    function_39c70(&result, v3);
    g4 = result;
    return result;
}

// Address range: 0x3d069 - 0x3d06f
int32_t function_3d069(void) {
    // 0x3d069
    return g4;
}

// Address range: 0x3d0cb - 0x3d0cc
int32_t function_3d0cb(void) {
    // 0x3d0cb
    return g4;
}

// Address range: 0x3d153 - 0x3d157
int32_t function_3d153(int16_t a1, int32_t a2) {
    int32_t result = g4 & -24; // 0x3d153
    g4 = result;
    return result;
}

// Address range: 0x3d175 - 0x3d17b
int32_t function_3d175(void) {
    // 0x3d175
    return g4;
}

// Address range: 0x3d17b - 0x3d1e6
int32_t function_3d17b(void) {
    int32_t v1 = g4; // 0x3d17b
    g9 = v1;
    int32_t v2 = g5; // 0x3d183
    int32_t * v3 = (int32_t *)(v2 - 44); // 0x3d183
    g7 = *v3;
    g9 = v1;
    g7 = *(int32_t *)(g8 + 8);
    int32_t v4 = *(int32_t *)(v2 - 32); // 0x3d199
    g4 = v4;
    int32_t v5 = *v3; // 0x3d19c
    g9 = v5;
    int32_t v6; // 0x3d1d4
    int32_t result; // 0x3d1d4
    if (v4 < 1) {
        v6 = v2;
        // 0x3d1d4
        result = *(int32_t *)(v6 - 36);
        g4 = result;
        *(int32_t *)(v6 - 32) = 0;
        return result;
    }
    int32_t v7 = *(int32_t *)v5; // 0x3d1a3
    g4 = v7;
    g6 = 0;
    if (v7 == 0) {
        v6 = v2;
        // 0x3d1d4
        result = *(int32_t *)(v6 - 36);
        g4 = result;
        *(int32_t *)(v6 - 32) = 0;
        return result;
    }
    int32_t v8 = 0; // 0x3d1ca4
    while (true) {
        int32_t v9 = *(int32_t *)(g8 + 28); // 0x3d1b7
        g9 = v9;
        int32_t v10; // 0x3d1ca
        if (v9 != 0) {
            // 0x3d1be
            g4 = function_53960(v9, v7);
            v10 = g6;
        } else {
            v10 = v8;
        }
        int32_t v11 = v10 + 1; // 0x3d1ca
        g6 = v11;
        int32_t v12 = g10; // 0x3d1cd
        g9 = v12;
        if (*(int32_t *)(v12 + 12) <= v11) {
            // break -> 0x3d1d4
            break;
        }
        int32_t v13 = *(int32_t *)(4 * v11 + v12); // 0x3d1b0
        g4 = v13;
        if (v13 == 0) {
            // break -> 0x3d1d4
            break;
        }
        // 0x3d1b0
        v8 = v11;
        v7 = v13;
    }
    // 0x3d1d4
    v6 = g5;
    // 0x3d1d4
    result = *(int32_t *)(v6 - 36);
    g4 = result;
    *(int32_t *)(v6 - 32) = 0;
    return result;
}

// Address range: 0x3d200 - 0x3d201
int32_t function_3d200(void) {
    // 0x3d200
    return g4;
}

// Address range: 0x3d209 - 0x3d221
int32_t function_3d209(void) {
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x3d20c
    g4 = v1;
    int32_t v2 = g5; // 0x3d211
    int32_t v3 = *(int32_t *)(v2 - 36); // 0x3d211
    g8 = v3;
    g6 = v1;
    int32_t v4; // 0x3d21a
    int32_t v5; // 0x3d218
    if (v3 < 0) {
        // bb
        v5 = function_3d209();
        g4 = v5;
        v4 = g5;
    } else {
        v5 = v1;
        v4 = v2;
    }
    int32_t v6 = *(int32_t *)(v4 - 44); // 0x3d21a
    g7 = v6;
    int32_t result; // 0x3d21f
    if (v6 == 0) {
        // bb6
        result = function_3d209();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x3d221
    return result;
}

// Address range: 0x3d240 - 0x3d300
int32_t function_3d240(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x3d243
    int32_t v2 = g6; // 0x3d245
    g4 = a2;
    g8 = a1;
    int32_t v3 = function_25190(a2); // 0x3d255
    g4 = v3;
    g6 = v3;
    int32_t v4 = function_2cc30((int32_t)"Start", (char *)v3); // 0x3d267
    g4 = v4;
    if (v4 == 0) {
        // 0x3d270
        if (*(int32_t *)(g8 + 24) == 2) {
            // bb
            g4 = function_3d4f0();
        }
    }
    int32_t v5 = function_2cc30((int32_t)"Match", (char *)g6); // 0x3d285
    g4 = v5;
    if (v5 == 0) {
        // 0x3d28e
        if (*(int32_t *)(g8 + 24) == 2) {
            // bb18
            g4 = function_3d500();
        }
    }
    int32_t v6 = function_2cc30((int32_t)"Cancel", (char *)g6); // 0x3d2a3
    g4 = v6;
    if (v6 == 0) {
        int32_t result = *(int32_t *)(g8 + 24); // 0x3d2ac
        g4 = result;
        if (result == 3) {
            // 0x3d2f8
            return result;
        }
        if (result == 5) {
            int32_t v7 = function_3d4b8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3d2b7
            g4 = v7;
        }
    }
    int32_t v8 = function_2cc30((int32_t)"Kick", (char *)g6); // 0x3d2c8
    g4 = v8;
    if (v8 != 0) {
        // bb22
        g4 = function_3d310();
    }
    int32_t v9 = *(int32_t *)(g8 + 28); // 0x3d2d1
    g4 = v9;
    int32_t v10; // 0x3d2d6
    if (v9 == 0) {
        // bb23
        v10 = function_3d310();
        g4 = v10;
    } else {
        v10 = v9;
    }
    // 0x3d2d8
    g9 = a2;
    int32_t result2 = function_53c30(v10, a2); // 0x3d2e2
    g4 = result2;
    g6 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x3d300 - 0x3d30b
int32_t function_3d300(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x3d300
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x3d310 - 0x3d38d
int32_t function_3d310(void) {
    int32_t v1 = function_2cc30((int32_t)"Migrate", (char *)g6); // 0x3d31b
    g4 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_3d4d0();
    }
    int32_t v2 = g5 - 44; // 0x3d330
    g10 = v2;
    g4 = *(int32_t *)(g8 + 8);
    *(int32_t *)v2 = 0;
    *(int32_t *)(g5 - 40) = 0;
    *(int32_t *)(g5 - 36) = 0;
    *(int32_t *)(g5 - 32) = 0;
    *(int32_t *)(g5 - 28) = 0;
    int32_t v3 = function_27fc0(g4, "members/numPlayers", 0); // 0x3d364
    g4 = v3;
    g4 = function_39c70((int32_t *)g10, v3);
    g4 = 4 * *(int32_t *)(g5 - 32);
    int32_t result = *(int32_t *)(g5 - 44); // 0x3d387
    g4 = result;
    return result;
}

// Address range: 0x3d391 - 0x3d397
int32_t function_3d391(void) {
    // 0x3d391
    return g4;
}

// Address range: 0x3d397 - 0x3d49e
int32_t function_3d397(void) {
    int32_t v1 = g4; // 0x3d397
    g9 = v1;
    g6 = v1;
    int32_t v2 = *(int32_t *)(g8 + 8); // 0x3d3a3
    g9 = v2;
    g4 = *(int32_t *)(v1 + 40);
    *(int32_t *)(g5 - 320) = v2;
    *(int32_t *)(g5 - 316) = g4;
    int32_t v3 = g5; // 0x3d3b5
    *(int32_t *)(v3 - 324) = *(int32_t *)(v3 - 44);
    g4 = g8;
    int32_t v4 = g5; // 0x3d3c5
    g9 = *(int32_t *)(v4 - 324);
    g4 = *(int32_t *)(v4 + 12);
    g9 = *(int32_t *)(v4 - 320);
    uint32_t v5 = *(int32_t *)(v4 - 32); // 0x3d3ed
    g4 = v5;
    int32_t v6; // 0x3d42c
    if (v5 >= 1) {
        int32_t v7 = *(int32_t *)(v4 - 44); // 0x3d3f4
        g4 = v7;
        g6 = 0;
        int32_t v8 = *(int32_t *)v7; // 0x3d3f9
        g4 = v8;
        if (v8 != 0) {
            int32_t v9 = 0; // 0x3d4245
            while (true) {
                int32_t v10 = *(int32_t *)(g8 + 28); // 0x3d411
                g9 = v10;
                int32_t v11; // 0x3d424
                if (v10 != 0) {
                    // 0x3d418
                    g4 = function_53960(v10, v8);
                    v11 = g6;
                } else {
                    v11 = v9;
                }
                int32_t v12 = v11 + 1; // 0x3d424
                g6 = v12;
                int32_t v13 = g10; // 0x3d427
                if (*(int32_t *)(v13 + 12) <= v12) {
                    // break -> 0x3d42c
                    break;
                }
                // 0x3d408
                g4 = v13;
                int32_t v14 = *(int32_t *)(4 * v12 + v13); // 0x3d40a
                g4 = v14;
                if (v14 == 0) {
                    // break -> 0x3d42c
                    break;
                }
                // 0x3d408
                v9 = v12;
                v8 = v14;
            }
            // 0x3d42c
            v6 = g5;
        } else {
            v6 = v4;
        }
    } else {
        v6 = v4;
    }
    int32_t v15 = *(int32_t *)(v6 + 12); // 0x3d42c
    g9 = v15;
    int32_t v16 = function_26d60(v15); // 0x3d432
    g4 = v16;
    g6 = v16;
    int32_t v17 = *(int32_t *)(g5 + 12); // 0x3d439
    g4 = v17;
    function_25190(v17);
    int32_t v18 = g5 - 312; // 0x3d448
    g4 = v18;
    function_1e010(v18, "Command::%s");
    g4 = g5 - 307;
    function_262d0(g6);
    g4 = g297;
    g9 = g297;
    int32_t v19 = g5; // 0x3d481
    int32_t v20 = *(int32_t *)(v19 - 36); // 0x3d481
    g4 = v20;
    *(int32_t *)(v19 - 32) = 0;
    if (v20 < 0) {
        int32_t v21 = function_3d300((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3d48d
        g4 = v21;
    }
    int32_t v22 = *(int32_t *)(g5 - 44); // 0x3d493
    g4 = v22;
    int32_t result; // 0x3d498
    if (v22 == 0) {
        // bb245
        result = function_3d300((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v22;
    }
    // 0x3d49e
    return result;
}

// Address range: 0x3d4b8 - 0x3d4cb
int32_t function_3d4b8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x3d4b8
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x3d4d0 - 0x3d4ef
int32_t function_3d4d0(void) {
    int32_t v1 = *(int32_t *)(g8 + 28); // 0x3d4d0
    g4 = v1;
    int32_t v2 = *(int32_t *)(g5 + 12); // 0x3d4db
    g9 = v2;
    g4 = function_50930(v1, v2);
    int32_t result = function_3d300((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3d4ea
    g4 = result;
    return result;
}

// Address range: 0x3d4f0 - 0x3d4fd
int32_t function_3d4f0(void) {
    // 0x3d4f0
    g4 = function_3b970(g8);
    int32_t result = function_3d300((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3d4f8
    g4 = result;
    return result;
}

// Address range: 0x3d500 - 0x3d50d
int32_t function_3d500(void) {
    int32_t result = function_3d300(g8, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3d508
    g4 = result;
    return result;
}

// Address range: 0x3d50e - 0x3d50f
int32_t function_3d50e(void) {
    // 0x3d50e
    return g4;
}

// Address range: 0x3d517 - 0x3d52e
int32_t function_3d517(void) {
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x3d51a
    g4 = v1;
    int32_t v2 = g5; // 0x3d51f
    g6 = v1;
    int32_t v3; // 0x3d527
    int32_t v4; // 0x3d525
    if (*(int32_t *)(v2 - 36) < 0) {
        // bb
        v4 = function_3d517();
        g4 = v4;
        v3 = g5;
    } else {
        v4 = v1;
        v3 = v2;
    }
    int32_t v5 = *(int32_t *)(v3 - 44); // 0x3d527
    g7 = v5;
    int32_t result; // 0x3d52c
    if (v5 == 0) {
        // bb5
        result = function_3d517();
        g4 = result;
    } else {
        result = v4;
    }
    // 0x3d52e
    return result;
}

// Address range: 0x3d550 - 0x3d669
int32_t function_3d550(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x3d563
    int32_t v2 = g10; // 0x3d564
    int32_t v3 = g6; // 0x3d565
    g10 = a2;
    g6 = a1 - 4;
    int32_t v4 = function_25190(a2); // 0x3d575
    g4 = v4;
    g8 = v4;
    int32_t v5 = g6; // 0x3d57c
    int32_t v6 = *(int32_t *)(v5 + 32); // 0x3d57c
    g4 = v6;
    if (v6 != 0) {
        // 0x3d583
        g9 = *(int32_t *)v6;
    }
    int32_t v7 = *(int32_t *)(v5 + 36); // 0x3d58f
    g4 = v7;
    if (v7 != 0) {
        // 0x3d596
        g9 = *(int32_t *)v7;
    }
    int32_t v8 = function_2cc30((int32_t)"OnEngineClientSignonStateChange", (char *)v4); // 0x3d5ad
    g4 = v8;
    if (v8 != 0) {
        int32_t v9 = function_2cc30((int32_t)"OnEngineDisconnectReason", (char *)g8); // 0x3d623
        g4 = v9;
        if (v9 != 0) {
            // bb258
            g4 = function_3d750();
        }
        int32_t v10 = *(int32_t *)(g6 + 24); // 0x3d630
        int32_t result2 = v10 - 6; // 0x3d633
        g4 = result2;
        if (result2 == 0 || v10 == 7) {
            // 0x3d63b
            g8 = 1;
            int32_t result = function_27c00(g10, "reason", (int32_t *)&g129); // 0x3d653
            g4 = result;
            return result;
        }
        // 0x3d60a
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result2;
    }
    int32_t v11 = function_27fc0(g10, "old", 0); // 0x3d5c9
    g4 = v11;
    g8 = v11;
    int32_t result3 = function_27fc0(g10, "new", 0); // 0x3d5e3
    g4 = result3;
    if (result3 > 1 || g8 <= 1) {
        // 0x3d60a
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result3;
    }
    int32_t v12 = *(int32_t *)(g6 + 24); // 0x3d5f2
    g4 = v12;
    int32_t v13 = v12 - 6; // 0x3d5f5
    g9 = v13;
    int32_t v14; // 0x3d5fb
    if (v13 == 0 || v12 == 7) {
        // bb
        v14 = function_3d8e0();
        g4 = v14;
    } else {
        v14 = v12;
    }
    int32_t result4; // 0x3d604
    if (v14 == 8) {
        // bb257
        result4 = function_3d7a0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result4;
    } else {
        result4 = v14;
    }
    // 0x3d60a
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result4;
}

// Address range: 0x3d66d - 0x3d74f
int32_t function_3d66d(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x24b7b); // 0x3d66d
    *v1 = *v1 - 1;
    g8++;
    g4 &= -252;
    char v2 = __asm_in_1658(24); // 0x3d678
    int32_t v3 = g4 & -256 | (int32_t)v2; // 0x3d678
    g4 = v3;
    char * v4 = (char *)v3; // 0x3d67a
    *v4 = *v4 | v2;
    function_2cfa0(g4, (char *)&g870);
    int32_t v5 = *(int32_t *)&g273; // 0x3d68c
    char * v6 = (char *)v5;
    g4 = v5;
    g9 = v5;
    g7 = *(int32_t *)(g6 + 8);
    if (v5 != 0) {
        // 0x3d6b0
        *(int32_t *)(g5 - 32) = v5;
        int32_t v7 = function_27c00(*(int32_t *)&v6, "disconnecthdlr", (int32_t *)&g129); // 0x3d6c6
        g4 = v7;
        *(int32_t *)(g5 - 588) = v7;
        g4 = function_2cc30(g4, "destroy");
        int32_t v8 = *(int32_t *)(g5 - 588); // 0x3d6e9
        g4 = v8;
        int32_t v9 = function_2cc30(v8, "lobby"); // 0x3d6fa
        g4 = 1;
        g8 = v9 == 0 ? 1 : g8;
        int32_t v10 = *(int32_t *)(g5 - 32); // 0x3d709
        g4 = v10;
        if (v10 != 0) {
            // 0x3d710
            g4 = function_28600(v10);
        }
    }
    int32_t v11 = g8; // 0x3d718
    g9 = v11;
    if ((char)v11 != 0) {
        // bb
        g4 = function_3d898();
    }
    // 0x3d722
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v12 = function_26cf0(); // 0x3d733
    g4 = v12;
    g6 = v12;
    int32_t result = function_26330(v12); // 0x3d745
    g4 = result;
    return result;
}

// Address range: 0x3d750 - 0x3d797
int32_t function_3d750(void) {
    int32_t v1 = function_2cc30((int32_t)"OnEngineEndGame", (char *)g8); // 0x3d75b
    g4 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_3d888();
    }
    int32_t v2 = function_2cc30((int32_t)"OnEngineListenServerStarted", (char *)g8); // 0x3d773
    g4 = v2;
    int32_t result; // 0x3d77a
    if (v2 != 0) {
        // bb8
        result = function_3d920();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x3d780
    return result;
}

// Address range: 0x3d7a0 - 0x3d884
int32_t function_3d7a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x3d7a0
    *(int32_t *)(g6 + 24) = 2;
    int32_t v1 = function_2a500("update", " update {  system {  lock #empty#  }  } "); // 0x3d7be
    g10 = v1;
    int32_t v2 = *(int32_t *)&g273; // 0x3d7c5
    g9 = v2;
    g8 = v2;
    g4 = g274;
    *(int32_t *)(g5 - 588) = g274;
    function_27340(v1, (int32_t)"update", 0);
    g4 = g6;
    *(int32_t *)(g5 - 36) = g10;
    g4 += 8;
    int32_t v3 = *(int32_t *)(g5 - 36); // 0x3d824
    g4 = v3;
    if (v3 != 0) {
        // 0x3d82b
        g4 = function_28600(v3);
    }
    // 0x3d833
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v4 = function_26cf0(); // 0x3d844
    g4 = v4;
    g6 = v4;
    function_27a20(v4, "OnMatchSessionUpdate", "state", "ready");
    g4 = g297;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g297;
}

// Address range: 0x3d888 - 0x3d895
int32_t function_3d888(void) {
    int32_t result = function_3bdb0(g6); // 0x3d88b
    g4 = result;
    return result;
}

// Address range: 0x3d898 - 0x3d8dd
int32_t function_3d898(void) {
    // 0x3d898
    function_27920(g10, "disconnecthdlr", "lobby");
    g4 = g297;
    g8 = *(int32_t *)(g297 + 12);
    function_26d60(g10);
    g4 = g297;
    int32_t result = function_3bdb0(g6); // 0x3d8d3
    g4 = result;
    return result;
}

// Address range: 0x3d8e0 - 0x3d8e7
int32_t function_3d8e0(void) {
    // 0x3d8e0
    return g4;
}

// Address range: 0x3d8eb - 0x3d8f1
int32_t function_3d8eb(void) {
    // 0x3d8eb
    return g4;
}

// Address range: 0x3d8f1 - 0x3d919
int32_t function_3d8f1(void) {
    // 0x3d8f1
    g10 = *(int32_t *)(g4 + 8);
    int32_t v1 = function_26cf0(); // 0x3d8fd
    g4 = v1;
    g6 = v1;
    int32_t result = function_26330(v1); // 0x3d90f
    g4 = result;
    return result;
}

// Address range: 0x3d920 - 0x3e0e8
int32_t function_3d920(void) {
    int32_t v1 = function_2cc30((int32_t)"OnPlayerMachinesConnected", (char *)g8); // 0x3d92b
    g4 = v1;
    if (v1 == 0) {
        int32_t v2 = g6; // 0x3d9a7
        g4 = v2;
        g8 = *(int32_t *)(v2 + 40);
        int32_t result = function_27fc0(g10, "numMachines", 0); // 0x3d9bf
        g4 = result;
        return result;
    }
    int32_t v3 = function_2cc30((int32_t)"OnNetLanConnectionlessPacket", (char *)g8); // 0x3d93f
    g4 = v3;
    if (v3 == 0) {
        int32_t v4 = function_26190(g10); // 0x3d94f
        g4 = v4;
        int32_t v5 = function_25190(v4); // 0x3d957
        g4 = v5;
        g9 = *(int32_t *)(g6 + 28);
        g4 = function_2cc30(v5, "LanSearch");
        int32_t v6 = *(int32_t *)(g6 + 28); // 0x3d98d
        g4 = v6;
        int32_t result2 = function_51390(v6, g10); // 0x3d993
        g4 = result2;
        return result2;
    }
    int32_t v7 = function_2cc30((int32_t)"OnSysMuteListChanged", (char *)g8); // 0x3d9dd
    g4 = v7;
    if (v7 == 0) {
        int32_t result3 = *(int32_t *)(g6 + 28); // 0x3d9e6
        g4 = result3;
        g9 = *(int32_t *)result3;
        return result3;
    }
    int32_t v8 = function_2cc30((int32_t)"OnMatchSessionUpdate", (char *)g8); // 0x3da2b
    g4 = v8;
    if (v8 == 0) {
        int32_t v9 = function_27c00(g10, "state", (int32_t *)&g129); // 0x3da4b
        g4 = v9;
        g4 = function_2cc30((int32_t)"progress", (char *)v9);
        int32_t v10 = function_27c00(g10, "progress", (int32_t *)&g129); // 0x3da8f
        g4 = v10;
        g8 = v10;
        int32_t v11 = function_27fc0(g10, "numResults", 0); // 0x3daa9
        g4 = v11;
        g10 = v11;
        int32_t result4 = function_2cc30((int32_t)"restart", (char *)g8); // 0x3dabb
        g4 = result4;
        if (result4 == 0) {
            // 0x3dac8
            *(int32_t *)(g6 + 24) = 4;
            return result4;
        }
        int32_t v12 = function_2a500("update", " update {  system {  lock =  }  } "); // 0x3dc04
        g4 = v12;
        *(int32_t *)(g5 - 588) = v12;
        int32_t v13 = g5; // 0x3e0c3
        int32_t v14;
        int32_t v15; // 0x3dc3f
        if (v11 < 1) {
            int32_t v16 = v13 - 304; // 0x3e0c3
            g4 = v16;
            g4 = function_1e010(v16, "matching%s");
            int32_t v17 = g5; // 0x3e0dd
            v15 = v17;
            v14 = v17 - 299;
        } else {
            int32_t v18 = v13 - 572; // 0x3dc17
            g4 = v18;
            g4 = function_1e010(v18, "matching%s%d");
            int32_t v19 = g5; // 0x3dc35
            v15 = v19;
            v14 = v19 - 567;
        }
        // 0x3dc3b
        g4 = v14;
        int32_t v20 = *(int32_t *)(v15 - 588); // 0x3dc3f
        g4 = v20;
        function_27920(v20, "update/system/lock", (char *)v14);
        g4 = g6;
        int32_t v21 = g5; // 0x3dc57
        int32_t v22 = *(int32_t *)(v21 - 588); // 0x3dc57
        g9 = v22;
        *(int32_t *)(v21 - 28) = v22;
        int32_t v23 = g5 - 28; // 0x3dc6c
        g4 = v23;
        int32_t result5 = function_1fc30(v23); // 0x3dc72
        g4 = result5;
        return result5;
    }
    int32_t v24 = function_2cc30((int32_t)"TeamSearchResult::ListenHost", (char *)g8); // 0x3dadf
    g4 = v24;
    if (v24 == 0) {
        // 0x3dbd9
        *(int32_t *)(g6 + 24) = 6;
        return 0;
    }
    int32_t v25 = function_2cc30((int32_t)"TeamSearchResult::Dedicated", (char *)g8); // 0x3daf7
    g4 = v25;
    if (v25 != 0) {
        int32_t v26 = function_2cc30((int32_t)"TeamSearchResult::ListenClient", (char *)g8); // 0x3dc87
        g4 = v26;
        if (v26 != 0) {
            int32_t v27 = function_2cc30((int32_t)"mmF->SysSessionUpdate", (char *)g8); // 0x3dc9f
            g4 = v27;
            if (v27 != 0) {
                // 0x3ddb7
                g4 = function_2cc30((int32_t)"mmF->SysSessionCommand", (char *)g8);
                g4 = function_27e60(g10, (int32_t)"syssession", 0);
                int32_t v28 = function_26190(g10); // 0x3ddfd
                g4 = v28;
                int32_t result6 = function_3d240(g6, v28); // 0x3de11
                g4 = result6;
                return result6;
            }
            // 0x3dcac
            g4 = function_27e60(g10, (int32_t)"syssession", 0);
            int32_t v29 = function_27c00(g10, "error", NULL); // 0x3dcea
            g4 = v29;
            g8 = v29;
            int32_t v30 = *(int32_t *)(g6 + 24); // 0x3de42
            if (v29 != 0) {
                // 0x3dcf9
                g4 = v30;
                *(int32_t *)(g5 - 588) = v30;
                int32_t * v31 = (int32_t *)(g6 + 28); // 0x3dd02
                int32_t v32 = *v31; // 0x3dd02
                g4 = v32;
                g9 = *(int32_t *)v32;
                *v31 = 0;
                *(int32_t *)(g6 + 24) = 1;
                g4 = g297;
                g10 = *(int32_t *)(g297 + 8);
                int32_t v33 = function_26cf0(); // 0x3dd2c
                g4 = v33;
                g6 = v33;
                function_27970(v33, "OnMatchSessionUpdate", "state", "error", "error", (char *)g8);
                g4 = g297;
                g4 = function_2cc30(g8, "migrate");
                int32_t result7 = (int32_t)g283; // 0x3dd9c
                g4 = result7;
                g9 = *(int32_t *)g283;
                return result7;
            }
            if (v30 == 1) {
                // 0x3df4d
                g4 = g297;
                g8 = *(int32_t *)(g297 + 8);
                int32_t v34 = function_26cf0(); // 0x3df5e
                g4 = v34;
                g10 = v34;
                function_27a20(v34, "OnMatchSessionUpdate", "state", "created");
                g4 = g297;
                int32_t v35 = *(int32_t *)(g6 + 8); // 0x3dfa3
                g4 = v35;
                int32_t v36 = function_27c00(v35, "server/server", NULL); // 0x3dfa9
                g4 = v36;
                int32_t v37 = g6; // 0x3dfd6
                if (v36 != 0) {
                    int32_t result8 = function_3b970(v37); // 0x3dfb5
                    g4 = result8;
                    return result8;
                }
                // 0x3dfd1
                *(int32_t *)(v37 + 24) = 2;
                g4 = g297;
                g10 = *(int32_t *)(g297 + 8);
                int32_t v38 = function_26cf0(); // 0x3dfe9
                g4 = v38;
                g6 = v38;
                int32_t result9 = function_27a20(v38, "OnMatchSessionUpdate", "state", "ready"); // 0x3e00b
                g4 = result9;
                return result9;
            }
            int32_t v39 = function_27c00(g10, "action", NULL); // 0x3de5f
            g4 = v39;
            g4 = function_2cc30((int32_t)"client", (char *)v39);
            int32_t v40 = function_26cf0(); // 0x3de8b
            g4 = v40;
            g10 = v40;
            g4 = function_26330(v40);
            int32_t v41 = *(int32_t *)(g6 + 24); // 0x3dea2
            g4 = (int32_t)"lobby";
            int32_t v42 = v41 - 7; // 0x3deaa
            g9 = v42;
            int32_t v43; // 0x3deb2
            if (v42 == 0 || v41 == 8) {
                // 0x3deb2
                v43 = *(int32_t *)(4 * v42 + (int32_t)&g167);
                g4 = v43;
            } else {
                v43 = (int32_t)"lobby";
            }
            // 0x3deb9
            g4 = function_27920(g10, "state", (char *)v43);
            int32_t v44 = *(int32_t *)(g6 + 8); // 0x3decd
            g4 = v44;
            g4 = function_25fb0(g10, v44);
            int32_t v45 = g6; // 0x3dedc
            g8 = *(int32_t *)(v45 + 28);
            *(int32_t *)(v45 + 8) = 0;
            g4 = *(int32_t *)&g273;
            *(int32_t *)(g6 + 12) = 0;
            *(int32_t *)(g6 + 28) = 0;
            *(int32_t *)(g6 + 24) = 9;
            function_36df0(g4, 0);
            g4 = g6;
            int32_t v46 = function_1bc00(32); // 0x3df1f
            g4 = v46;
            g6 = v46;
            int32_t result10 = function_3a130(v46, g8, g10); // 0x3df31
            g4 = result10;
            return result10;
        }
    }
    int32_t v47 = function_27340(g10, (int32_t)"server", 0); // 0x3db17
    g4 = v47;
    *(int32_t *)(g5 - 588) = v47;
    int32_t v48 = function_2a500("update", " update {  system {  lock #empty#  }  server {  server dedicated  }  } "); // 0x3db55
    g4 = v48;
    g8 = v48;
    *(int32_t *)(g5 - 32) = v48;
    int32_t v49 = function_27340(g4, (int32_t)"update/server", 0); // 0x3db72
    g4 = v49;
    int32_t v50 = *(int32_t *)(g5 - 588); // 0x3db77
    g9 = v50;
    function_2a090(v49, v50, 1);
    g4 = g6;
    function_27e60(g10, (int32_t)"dsresult", 0);
    int32_t v51 = g5 - 32; // 0x3dbc9
    g4 = v51;
    int32_t result11 = function_1fc30(v51); // 0x3dbcf
    g4 = result11;
    return result11;
}

// Address range: 0x3e0f0 - 0x3e1a6
int32_t function_3e0f0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g9 = a1;
    int32_t v2 = g6; // 0x3e0f9
    g6 = a2;
    int32_t v3 = g10; // 0x3e0ff
    int32_t v4 = g8; // 0x3e102
    int32_t v5 = function_25190(a2); // 0x3e10b
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_27c00(g6, "run", (int32_t *)&g129); // 0x3e125
    g4 = v6;
    g10 = v6;
    int32_t v7 = function_2cc30(v6, "all"); // 0x3e137
    g4 = v7;
    if (v7 != 0) {
        // bb
        g4 = function_3e1b0();
    }
    // 0x3e140
    g9 = a1;
    int32_t v8 = *(int32_t *)(a1 + 28); // 0x3e143
    g4 = v8;
    if (v8 == 0) {
        // 0x3e190
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return 0;
    }
    int32_t v9 = *(int32_t *)v8; // 0x3e14a
    g9 = v9;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    int32_t result = *(int32_t *)(v9 + 16); // 0x3e15b
    g4 = result;
    return result;
}

// Address range: 0x3e1b0 - 0x3e202
int32_t function_3e1b0(void) {
    // 0x3e1b0
    g4 = function_2cc30(g10, "clients");
    g4 = function_2cc30(g10, "xuid");
    int32_t v1 = g5; // 0x3e1e8
    g9 = *(int32_t *)(v1 - 28);
    *(int32_t *)(v1 + 12) = g6;
    int32_t v2 = g5; // 0x3e1ee
    g10 = *(int32_t *)(v2 - 8);
    g6 = *(int32_t *)(v2 - 12);
    g8 = *(int32_t *)(v2 - 4);
    *(int32_t *)(v2 + 8) = g9;
    int32_t result = function_3d240((int32_t)&g870, (int32_t)&g870); // 0x3e1fd
    g4 = result;
    return result;
}

// Address range: 0x3e210 - 0x3e21b
int32_t function_3e210(int32_t a1) {
    // 0x3e210
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x3e217
    g4 = result;
    return result;
}

// Address range: 0x3e220 - 0x3e265
int32_t function_3e220(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x3e223
    g6 = a1;
    int32_t * v2 = (int32_t *)(a1 + 16); // 0x3e22a
    int32_t v3 = *v2; // 0x3e22a
    g4 = v3;
    int32_t v4; // 0x3e24f
    if (v3 != 0) {
        // 0x3e231
        g9 = *(int32_t *)v3;
        *v2 = 0;
        v4 = g6;
    } else {
        v4 = a1;
    }
    int32_t * v5 = (int32_t *)(v4 + 44); // 0x3e240
    int32_t v6 = *v5; // 0x3e240
    g4 = v6;
    int32_t v7; // 0x3e256
    if (v6 != 0) {
        // 0x3e247
        g9 = *(int32_t *)v6;
        *v5 = 0;
        v7 = g6;
    } else {
        v7 = v4;
    }
    int32_t v8 = *(int32_t *)v7; // 0x3e256
    g4 = v8;
    int32_t result = *(int32_t *)(v8 + 40); // 0x3e25b
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x3e270 - 0x3e283
int32_t function_3e270(void) {
    // 0x3e270
    g4 = g297;
    g9 = g297;
    int32_t result = *(int32_t *)(g297 + 8); // 0x3e27e
    g4 = result;
    return result;
}

// Address range: 0x3e290 - 0x3e2a4
int32_t function_3e290(int32_t a1) {
    // 0x3e290
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 100); // 0x3e296
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x3e299
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 56); // 0x3e29f
    g4 = result;
    return result;
}

// Address range: 0x3e2b0 - 0x3e324
int32_t function_3e2b0(int32_t a1) {
    int32_t v1 = g10; // 0x3e2b3
    int32_t v2 = g6; // 0x3e2b4
    g6 = a1;
    int32_t v3 = function_27340(a1, (int32_t)"options", 0); // 0x3e2ce
    g4 = v3;
    g10 = v3;
    if (v3 != 0) {
        // 0x3e2d9
        g4 = function_25fe0(g6, v3);
        g4 = function_28600(g10);
    }
    // 0x3e2ed
    function_27920(g6, "options/createreason", "searchempty");
    int32_t v4 = (int32_t)g450; // 0x3e305
    g4 = v4;
    g9 = *(int32_t *)g450;
    g6 = v2;
    g10 = v1;
    int32_t result = function_28600(v4); // 0x3e31f
    g4 = result;
    return result;
}

// Address range: 0x3e350 - 0x3e35c
int32_t function_3e350(void) {
    // 0x3e350
    g4 = g4 & -256 | (int32_t)__asm_in_1658(-24);
    int32_t result = g4 & -256 | (int32_t)__asm_in_1658(-119); // 0x3e359
    g4 = result;
    return result;
}

// Address range: 0x3e36b - 0x3e371
int32_t function_3e36b(void) {
    // 0x3e36b
    return g4;
}

// Address range: 0x3e390 - 0x3e3a5
int32_t function_3e390(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x758b085d); // 0x3e390
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x3e3a5 - 0x3e3ef
int32_t function_3e3a5(int32_t a1) {
    // 0x3e3a5
    g10 = g4;
    g4 = function_1bc40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g6; // 0x3e3c3
    int32_t v2 = function_1bc00(192); // 0x3e3ce
    g6 = v2;
    g4 = a1;
    int32_t v3 = *(int32_t *)(a1 + 8); // 0x3e3d8
    g4 = v3;
    function_55f40(v2, v3);
    int32_t result = g6; // 0x3e3ea
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x3e438 - 0x3e447
int32_t function_3e438(int32_t a1) {
    int32_t * v1 = (int32_t *)(g5 + (int32_t)&g72); // 0x3e438
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x3e43e
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t result = function_3e450(a1 - 4, (int32_t)&g870); // 0x3e445
    g4 = result;
    return result;
}

// Address range: 0x3e450 - 0x3e52f
int32_t function_3e450(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g10; // 0x3e456
    g10 = a2;
    int32_t v3 = g6; // 0x3e45c
    g6 = a1;
    int32_t v4 = function_25190(a2); // 0x3e465
    g4 = v4;
    int32_t result = function_2cc30((int32_t)"mmF->SysSessionUpdate", (char *)v4); // 0x3e475
    g4 = result;
    if (result != 0) {
        // 0x3e4a2
        g6 = v3;
        g10 = v2;
        return result;
    }
    int32_t v5 = *(int32_t *)(g6 + 44); // 0x3e47e
    g4 = v5;
    if (v5 == 0) {
        // 0x3e4a2
        g6 = v3;
        g10 = v2;
        return 0;
    }
    int32_t result2 = function_27e60(g10, (int32_t)"syssession", 0); // 0x3e498
    g4 = result2;
    int32_t v6 = g6; // 0x3e49d
    if (result2 != *(int32_t *)(v6 + 44) || *(int32_t *)(v6 + 20) != 3) {
        // 0x3e4a2
        g6 = v3;
        g10 = v2;
        return result2;
    }
    int32_t v7 = function_27c00(g10, "error", NULL); // 0x3e4c9
    g4 = v7;
    int32_t v8 = g6; // 0x3e4f8
    int32_t * v9 = (int32_t *)(v8 + 44); // 0x3e4f8
    int32_t v10 = *v9; // 0x3e4f8
    if (v7 != 0) {
        // 0x3e4d2
        g4 = v10;
        g9 = *(int32_t *)v10;
        *v9 = 0;
        *(int32_t *)(g6 + 20) = 2;
        g6 = v3;
        g10 = v2;
        return g4;
    }
    // 0x3e4f8
    g9 = v10;
    *(int32_t *)(v8 + 20) = 4;
    int32_t v11 = g6; // 0x3e502
    g7 = *(int32_t *)(v11 + 8);
    *(int32_t *)(v11 + 44) = 0;
    int32_t v12 = g6; // 0x3e50c
    g4 = *(int32_t *)v12;
    *(int32_t *)(v12 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    // 0x3e4a2
    g6 = v3;
    g10 = v2;
    return g4;
}

// Address range: 0x3e53b - 0x3e55b
int32_t function_3e53b(void) {
    char * v1 = (char *)(g6 + 0x4890846); // 0x3e53b
    *v1 = (char)g7 | *v1;
    int32_t v2 = g4 & -24; // 0x3e541
    g4 = v2;
    int32_t * v3 = (int32_t *)(v2 + 0x4c7fffe); // 0x3e543
    *v3 = *v3 - g7;
    int32_t v4 = g4; // 0x3e549
    unsigned char v5 = (char)v4 & 104; // 0x3e549
    int32_t v6 = (int32_t)v5 | v4 & -256; // 0x3e549
    g4 = v6;
    char * v7 = (char *)v6; // 0x3e54b
    *v7 = *v7 + v5;
    int32_t v8 = g7; // 0x3e54d
    char * v9 = (char *)(v8 - 0x29541739); // 0x3e54d
    *v9 = *v9 + (char)v8;
    int32_t * v10 = (int32_t *)(g7 - 0x76fbdb84); // 0x3e554
    *v10 = *v10 - 1;
    return g4;
}

// Address range: 0x3e5a4 - 0x3e5dc
int32_t function_3e5a4(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x241c8903); // 0x3e5a4
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    int32_t v3 = v2 - 32; // 0x3e5ad
    g9 = v3;
    *(int32_t *)v3 = (int32_t)&g132;
    *(int32_t *)(v2 - 28) = 1;
    int32_t result = g6; // 0x3e5d5
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x3e68b - 0x3e68c
int32_t function_3e68b(void) {
    // 0x3e68b
    return g4;
}

// Address range: 0x3e69d - 0x3e6a5
int32_t function_3e69d(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b20c4); // 0x3e69d
    *v1 = *v1 + 1;
    return g4;
}

// Address range: 0x3e6b4 - 0x3e6b6
int32_t function_3e6b4(void) {
    int32_t result = function_3e68b(); // 0x3e6b4
    g4 = result;
    return result;
}

// Address range: 0x3e6c0 - 0x3e709
int32_t function_3e6c0(int32_t a1) {
    // 0x3e6c0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g89;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int16_t *)(g4 + 16) = (int16_t)&g863;
    *(int16_t *)(g4 + 18) = 0;
    *(int16_t *)(g4 + 20) = (int16_t)&g863;
    *(int16_t *)(g4 + 22) = (int16_t)&g863;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    return g4;
}

// Address range: 0x3e710 - 0x3e7bf
int32_t function_3e710(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x3e713
    int32_t v2 = g10; // 0x3e714
    int32_t v3 = g6; // 0x3e715
    g6 = a1;
    g4 = a2;
    g9 = a3;
    uint16_t v4 = *(int16_t *)(a1 + 16); // 0x3e722
    int32_t v5 = v4; // 0x3e722
    g8 = v5;
    g4 = 0;
    if (v4 == -1) {
      lab_0x3e7a9:
        // 0x3e7a9
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t result = &a2; // 0x3e768
    while (true) {
        int32_t * v6 = (int32_t *)(a1 + 4); // 0x3e756
        char v7 = g532; // 0x3e740
        int32_t v8 = v5; // 0x3e759
        int32_t v9; // 0x3e75c
        while (true) {
            // 0x3e756
            v9 = 28 * (v8 & (int32_t)&g863);
            g10 = v9;
            g4 = result;
            if ((char)result == 0) {
                // break -> 0x3e774
                break;
            }
            if (v7 == 0) {
                return result;
            }
            int32_t v10 = *v6; // 0x3e749
            g4 = v10;
            uint16_t v11 = *(int16_t *)(v10 + v9); // 0x3e74c
            int32_t v12 = v11; // 0x3e74c
            g8 = v12;
            if (v11 == -1) {
                goto lab_0x3e7a7_2;
            }
            v8 = v12;
        }
        // 0x3e774
        g4 = result;
        int32_t v13 = (v9 | 8) + *v6; // 0x3e780
        g4 = v13;
        char v14; // 0x3e790
        if ((char)v13 == 0) {
            int32_t v15 = function_3e838((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3e78a
            g4 = v15;
            v14 = g532;
        } else {
            v14 = v7;
        }
        if (v14 == 0) {
            // bb252
            g4 = function_3e7f8();
        }
        int32_t v16 = g6; // 0x3e799
        int32_t v17 = *(int32_t *)(v16 + 4); // 0x3e799
        g4 = v17;
        uint16_t v18 = *(int16_t *)(v17 + 2 + g10); // 0x3e79c
        int32_t v19 = v18; // 0x3e79c
        g8 = v19;
        if (v18 == -1) {
            goto lab_0x3e7a7_2;
        }
        v5 = v19;
        a1 = v16;
    }
    // 0x3e7b8
    return result;
  lab_0x3e7a7_2:
    // 0x3e7a7
    g4 = 0;
    goto lab_0x3e7a9;
}

// Address range: 0x3e7d2 - 0x3e7da
int32_t function_3e7d2(void) {
    int32_t v1 = g4; // 0x3e7d2
    char * v2 = (char *)(v1 + 10); // 0x3e7d2
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3e7d5
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3e7db - 0x3e7e3
int32_t function_3e7db(void) {
    int32_t v1 = g4; // 0x3e7db
    char v2 = *(char *)(v1 + 10); // 0x3e7db
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3e7db
    g4 = result;
    uint32_t v3 = g6; // 0x3e7de
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3e7ef - 0x3e7f4
int32_t function_3e7ef(void) {
    // 0x3e7ef
    return g4;
}

// Address range: 0x3e7f8 - 0x3e7ff
int32_t function_3e7f8(void) {
    // 0x3e7f8
    return g4;
}

// Address range: 0x3e812 - 0x3e81a
int32_t function_3e812(void) {
    int32_t v1 = g4; // 0x3e812
    char * v2 = (char *)(v1 + 10); // 0x3e812
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3e815
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3e81b - 0x3e823
int32_t function_3e81b(void) {
    int32_t v1 = g4; // 0x3e81b
    char v2 = *(char *)(v1 + 10); // 0x3e81b
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3e81b
    g4 = result;
    uint32_t v3 = g6; // 0x3e81e
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3e82f - 0x3e834
int32_t function_3e82f(void) {
    // 0x3e82f
    return g4;
}

// Address range: 0x3e838 - 0x3e847
int32_t function_3e838(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = (int32_t)((int16_t)g8 != -1) | g4 & -256; // 0x3e83c
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x3e850 - 0x3e8ab
int32_t function_3e850(int32_t a1) {
    // 0x3e850
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g169;
    *(int32_t *)(g4 + 4) = (int32_t)&g170;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(int32_t *)(g4 + 36) = 0;
    *(int32_t *)(g4 + 40) = 0;
    *(int32_t *)(g4 + 44) = 0;
    return g4;
}

// Address range: 0x3e8b0 - 0x3e8db
int32_t function_3e8b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x3e8b3
    g6 = a1;
    g4 = a3;
    function_59fd0(a1, a3);
    g4 = a2;
    *(int32_t *)g6 = (int32_t)&g171;
    *(int32_t *)(g6 + 100) = g4;
    g6 = v1;
    return g4;
}

// Address range: 0x3e8e0 - 0x3e8f3
int32_t function_3e8e0(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    g4 = v1;
    *(int32_t *)(v1 + 28) = 0;
    int32_t result = function_3f380((int32_t)&g870); // 0x3e8ee
    g4 = result;
    return result;
}

// Address range: 0x3e900 - 0x3e940
int32_t function_3e900(int32_t a1) {
    int32_t v1 = g6; // 0x3e903
    g6 = a1;
    *(int32_t *)(a1 + 20) = 4;
    g4 = function_3e8e0(&g529);
    int32_t v2 = g6; // 0x3e91d
    g9 = *(int32_t *)(v2 + 8);
    *(int32_t *)(v2 + 12) = 0;
    int32_t v3 = g6; // 0x3e927
    g4 = *(int32_t *)v3;
    *(int32_t *)(v3 + 8) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x3e940 - 0x3e9a7
int32_t function_3e940(int32_t a1, int32_t a2) {
    // 0x3e940
    g6 = a1;
    g4 = a2;
    *(int32_t *)a1 = (int32_t)&g169;
    *(int32_t *)(g6 + 4) = (int32_t)&g170;
    g4 = function_26d60(g4);
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 8) = g4;
    *(int32_t *)(g6 + 12) = g4;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 36) = 0;
    *(int32_t *)(g6 + 40) = 0;
    *(int32_t *)(g6 + 44) = 0;
    return g4;
}

// Address range: 0x3e9ac - 0x3e9da
int32_t function_3e9ac(int32_t a1, int32_t a2) {
    // 0x3e9ac
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x3e9af
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    g6 = a1;
    return g4;
}

// Address range: 0x3e9de - 0x3e9df
int32_t function_3e9de(void) {
    // 0x3e9de
    return g4;
}

// Address range: 0x3ea00 - 0x3ea01
int32_t function_3ea00(void) {
    // 0x3ea00
    return g4;
}

// Address range: 0x3eabb - 0x3eae7
int32_t function_3eabb(void) {
    // 0x3eabb
    g9 = g6 + 24;
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_3f920(g9);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x3eac9
    g4 = v1;
    while (true) {
        // 0x3eacc
        g6 += 12;
        *(int32_t *)(g5 - 28) = v1;
        g4 = function_1fc30(g6);
        int32_t v2 = *(int32_t *)(g5 - 28); // 0x3eada
        g4 = v2;
        int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x3eae0
        g4 = v3;
        v1 = v3;
    }
}

// Address range: 0x3eae7 - 0x3eafa
int32_t function_3eae7(void) {
    // 0x3eae7
    g9 = g6 + 24;
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_3f8e0(g9);
    int32_t result = *(int32_t *)(g5 - 28); // 0x3eaf5
    g4 = result;
    return result;
}

// Address range: 0x3eb00 - 0x3eb1f
int32_t function_3eb00(int32_t a1) {
    int32_t v1 = g6; // 0x3eb03
    g6 = a1;
    g4 = function_3ea00();
    g6 = v1;
    int32_t result = function_1bc40(); // 0x3eb1a
    g4 = result;
    return result;
}

// Address range: 0x3eb20 - 0x3ec56
int32_t function_3eb20(int32_t a1) {
    // 0x3eb20
    g10 = a1;
    g4 = function_596a0(0x1000000 * a1 / 0x1000000);
    int32_t v1 = g10; // 0x3eb34
    int32_t v2 = *(int32_t *)v1; // 0x3eb34
    g4 = v2;
    int32_t v3; // 0x3ec3d
    if (v2 >= 1) {
        // 0x3eb47
        int32_t v4; // 0x3eb69
        g6 = &v4;
        int32_t v5 = v1; // 0x3eb85
        int32_t v6 = 0;
        while (true) {
            // 0x3eb58
            g9 = v6;
            int32_t v7 = *(int32_t *)v5; // 0x3eb5b
            g4 = v7;
            g8 = v7;
            v4 = *(int32_t *)v7;
            g4 = v4;
            g9 = *(int32_t *)(v7 + 4);
            int32_t v8 = g531; // 0x3eb71
            g4 = v8;
            int32_t v9; // 0x3ec09
            if (g531 != -1) {
                // 0x3eb85
                g10 = v7;
                char v10 = g530; // 0x3ebcd
                while (true) {
                    int32_t v11 = 28 * (v8 & (int32_t)&g863); // 0x3ebb7
                    g8 = v11;
                    int32_t v12 = (int32_t)v10 + 8 + v11; // 0x3ebbc
                    g4 = v12;
                    if ((char)v12 == 0) {
                        // 0x3ebcd
                        g4 = v12;
                        if ((char)v12 == 0) {
                            // bb262
                            g4 = function_3ecf0();
                        }
                        // 0x3ebec
                        if (g532 == 0) {
                            // bb263
                            g4 = function_3ecb0();
                        }
                        int32_t v13 = g530; // 0x3ebf9
                        g4 = v13;
                        uint16_t v14 = *(int16_t *)(v13 + 2 + g8); // 0x3ebfe
                        int32_t v15 = v14; // 0x3ebfe
                        g4 = v15;
                        if (v14 == -1) {
                            // break -> 0x3ec09
                            break;
                        }
                        v10 = g530;
                        v8 = v15;
                        // continue -> 0x3ebac
                        continue;
                    }
                    // 0x3eb90
                    char v16; // 0x3eb9d
                    int32_t v17; // 0x3eba2
                    if (g532 == 0) {
                        // bb
                        g4 = function_3ec70();
                        v17 = g8;
                        v16 = g530;
                    } else {
                        v17 = v11;
                        v16 = v10;
                    }
                    int32_t v18 = v16; // 0x3eb9d
                    g4 = v18;
                    uint16_t v19 = *(int16_t *)(v18 + v17); // 0x3eba2
                    int32_t v20 = v19; // 0x3eba2
                    g4 = v20;
                    if (v19 == -1) {
                        // break -> 0x3ec09
                        break;
                    }
                    v10 = v16;
                    v8 = v20;
                }
                // 0x3ec09
                v9 = g10;
                g8 = v9;
                g10 = v5;
            } else {
                v9 = v7;
            }
            int32_t v21 = *(int32_t *)(v5 + 100); // 0x3ec0e
            g4 = v21;
            int32_t v22; // bp-32
            g9 = &v22;
            v22 = v9;
            int32_t v23 = *(int32_t *)(v21 + 36); // 0x3ec1b
            g9 = v23;
            int32_t v24 = v21 + 24; // 0x3ec1e
            g4 = v24;
            function_3fa50(0x1000000 * v24 / 0x1000000, 0x1000000 * v23 / 0x1000000, &v22);
            int32_t v25 = v6 + 1; // 0x3ec2d
            g4 = v2;
            int32_t v26 = g10;
            if (v25 == v2) {
                v3 = v26;
                // break -> 0x3ec3d
                break;
            }
            v5 = v26;
            v6 = v25;
        }
    } else {
        v3 = v1;
    }
    int32_t v27 = *(int32_t *)(v3 + 100); // 0x3ec3d
    g9 = v27;
    int32_t v28 = *(int32_t *)(v27 + 36); // 0x3ec40
    g4 = v28;
    int32_t result; // 0x3ec45
    if (v28 == 0) {
        // bb265
        result = function_3ecf8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v28;
    }
    // 0x3ec4b
    return result;
}

// Address range: 0x3ec5a - 0x3ec6d
int32_t function_3ec5a(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x40c76446); // 0x3ec5a
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x3ec60
    bool v3; // cf
    unsigned char v4 = (char)v2 + 2 + (char)v3; // 0x3ec60
    int32_t v5 = (int32_t)v4 | v2 & -256; // 0x3ec60
    g4 = v5;
    char * v6 = (char *)v5; // 0x3ec62
    *v6 = *v6 + v4;
    char * v7 = (char *)(g6 + 0x5e5b4cc4); // 0x3ec64
    *v7 = (char)g4 + *v7;
    g8 = a1;
    return g4;
}

// Address range: 0x3ec70 - 0x3ec77
int32_t function_3ec70(void) {
    // 0x3ec70
    return g4;
}

// Address range: 0x3ec8e - 0x3ec96
int32_t function_3ec8e(void) {
    int32_t v1 = g4; // 0x3ec8e
    char * v2 = (char *)(v1 + 10); // 0x3ec8e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3ec91
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3ec97 - 0x3ec9f
int32_t function_3ec97(void) {
    int32_t v1 = g4; // 0x3ec97
    char v2 = *(char *)(v1 + 10); // 0x3ec97
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3ec97
    g4 = result;
    uint32_t v3 = g6; // 0x3ec9a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3ecab - 0x3ecb0
int32_t function_3ecab(void) {
    // 0x3ecab
    return g4;
}

// Address range: 0x3ecb0 - 0x3ecb7
int32_t function_3ecb0(void) {
    // 0x3ecb0
    return g4;
}

// Address range: 0x3ecce - 0x3ecd6
int32_t function_3ecce(void) {
    int32_t v1 = g4; // 0x3ecce
    char * v2 = (char *)(v1 + 10); // 0x3ecce
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3ecd1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3ecd7 - 0x3ecdf
int32_t function_3ecd7(void) {
    int32_t v1 = g4; // 0x3ecd7
    char v2 = *(char *)(v1 + 10); // 0x3ecd7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3ecd7
    g4 = result;
    uint32_t v3 = g6; // 0x3ecda
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3eceb - 0x3ecf0
int32_t function_3eceb(void) {
    // 0x3eceb
    return g4;
}

// Address range: 0x3ecf0 - 0x3ecf8
int32_t function_3ecf0(void) {
    // 0x3ecf0
    g10 = *(int32_t *)(g5 - 64);
    return g4;
}

// Address range: 0x3ecf8 - 0x3ed0d
int32_t function_3ecf8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = function_3e900(g9); // 0x3ed00
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x3ed10 - 0x3ed11
int32_t function_3ed10(int32_t * a1) {
    // 0x3ed10
    return g4;
}

// Address range: 0x3ed24 - 0x3ed2a
int32_t function_3ed24(void) {
    // 0x3ed24
    return g4;
}

// Address range: 0x3ed2a - 0x3eda5
int32_t function_3ed2a(void) {
    // 0x3ed2a
    float80_t v1; // st7
    *(float64_t *)(g5 - 48) = (float64_t)v1;
    g8 = (int32_t)*(int16_t *)(g6 + 16);
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x3ed31
    g4 = g528;
    int32_t v3 = __asm_movsd(__asm_cvtps2pd(v2)); // 0x3ed3e
    int32_t v4 = g5; // 0x3ed3e
    *(int64_t *)(v4 - 56) = (int64_t)v3;
    *(int32_t *)(v4 - 60) = *(int32_t *)(g4 + 48);
    unsigned char v5 = g532; // 0x3ed49
    g4 = v5;
    int32_t v6 = g8;
    int32_t v7 = v6 & (int32_t)&g863; // 0x3ed92238
    g10 = v7;
    g9 = v7;
    if (v5 == 0) {
        // 0x3ed9b
        *(int32_t *)(g5 - 64) = v7;
        return g4;
    }
    int32_t v8; // 0x3ed92
    while (true) {
        // 0x3ed58
        g4 = (int32_t)&g286;
        int32_t v9; // 0x3ed66
        if ((int16_t)v6 != -1) {
            int32_t v10 = 28 * v7; // 0x3ed63
            g4 = v10;
            v9 = *(int32_t *)(g6 + 4) + v10;
            g4 = v9;
        } else {
            v9 = (int32_t)&g286;
        }
        // 0x3ed69
        if (*(int16_t *)v9 == -1) {
            int32_t v11 = function_3ee00((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3ed6d
            g4 = v11;
        }
        unsigned char v12 = g532; // 0x3ed73
        int32_t v13 = v12; // 0x3ed73
        g4 = v13;
        int32_t v14; // 0x3ed7c
        if (v12 == 0) {
            // bb237
            v14 = function_3ede0();
            g4 = v14;
        } else {
            v14 = v13;
        }
        // 0x3ed7e
        g9 = (int32_t)&g286;
        int32_t v15; // 0x3ed8c
        if ((int16_t)g8 != -1) {
            int32_t v16 = 28 * g10; // 0x3ed89
            g9 = v16;
            v15 = *(int32_t *)(g6 + 4) + v16;
            g9 = v15;
        } else {
            v15 = (int32_t)&g286;
        }
        int32_t v17 = (int32_t)*(int16_t *)v15; // 0x3ed8f
        g8 = v17;
        v8 = v17 & (int32_t)&g863;
        g10 = v8;
        g9 = v8;
        if ((char)v14 == 0) {
            // break -> 0x3ed9b
            break;
        }
        v7 = v8;
        v6 = v17;
    }
    // 0x3ed9b
    *(int32_t *)(g5 - 64) = v8;
    return g4;
}

// Address range: 0x3edb4 - 0x3edbc
int32_t function_3edb4(void) {
    int32_t v1 = g4; // 0x3edb4
    char * v2 = (char *)(v1 + 10); // 0x3edb4
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3edb7
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3edbd - 0x3edc5
int32_t function_3edbd(void) {
    int32_t v1 = g4; // 0x3edbd
    char v2 = *(char *)(v1 + 10); // 0x3edbd
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3edbd
    g4 = result;
    uint32_t v3 = g6; // 0x3edc0
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3edd8 - 0x3ede0
int32_t function_3edd8(void) {
    // 0x3edd8
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 64);
    return g4;
}

// Address range: 0x3ede0 - 0x3ede7
int32_t function_3ede0(void) {
    // 0x3ede0
    return g4;
}

// Address range: 0x3edec - 0x3ee00
int32_t function_3edec(void) {
    // 0x3edec
    if (g4 != 0) {
        // bb
        g4 = function_3eeb8();
    }
    int32_t result = g532; // 0x3edf4
    g4 = result;
    return result;
}

// Address range: 0x3ee00 - 0x3eeb3
int32_t function_3ee00(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g10; // 0x3ee00
    g4 = v1;
    int32_t v2 = g9; // 0x3ee02
    g10 = v2;
    int32_t result; // 0x3eeb2
    if (v1 != (int32_t)&g863) {
        // 0x3ee0f
        *(int32_t *)(g5 - 28) = v2;
        while (true) {
            int32_t v3 = (int32_t)*(int16_t *)(g5 - 28); // 0x3ee1b
            g8 = v3;
            uint32_t v4 = *(int32_t *)(g6 + 4); // 0x3ee1f
            int32_t v5 = 28 * v3; // 0x3ee22
            g10 = v5;
            int32_t v6 = v4 + v5; // 0x3ee25
            g4 = v6;
            int128_t v7 = __asm_movsd_1649(*(int64_t *)(v6 + 16)); // 0x3ee27
            g4 += 24;
            int32_t v8 = __asm_movsd(v7); // 0x3ee33
            int32_t v9 = g5; // 0x3ee33
            *(int64_t *)(v9 - 40) = (int64_t)v8;
            *(int32_t *)(v9 - 32) = g4;
            int128_t v10 = __asm_movsd_1649(*(int64_t *)(g5 - 48)); // 0x3ee43
            g4 &= (int32_t)&g863;
            int128_t v11 = __asm_andpd(__asm_subsd_1656(v10, *(int64_t *)(g5 - 40)), g127); // 0x3ee50
            __asm_ucomisd_1652(v11, *(int64_t *)(g5 - 56));
            if (v6 >= v4 && v6 != 0) {
                int32_t v12 = *(int32_t *)(g6 + 28); // 0x3ee5f
                g9 = v12;
                int32_t v13 = g5; // 0x3ee62
                int32_t v14 = v12 - *(int32_t *)(v13 - 32); // 0x3ee62
                g9 = v14;
                if (v14 > *(int32_t *)(v13 - 60)) {
                    // 0x3ee6a
                    *(int32_t *)(v13 - 64) = g4;
                    g4 = function_416f0(g6, g8);
                    int32_t v15 = *(int32_t *)(g6 + 4); // 0x3ee79
                    g9 = v15;
                    uint16_t v16 = *(int16_t *)(g5 - 28); // 0x3ee7c
                    g7 = v16;
                    *(int16_t *)(g10 + v15) = v16;
                    int32_t v17 = g6; // 0x3ee84
                    uint16_t v18 = *(int16_t *)(v17 + 20); // 0x3ee84
                    g7 = v18;
                    int32_t v19 = *(int32_t *)(v17 + 4); // 0x3ee88
                    g9 = v19;
                    *(int16_t *)(v19 + 2 + g10) = v18;
                    g9 = (int32_t)*(int16_t *)(g5 - 28);
                    int16_t * v20 = (int16_t *)(g6 + 18); // 0x3ee94
                    *v20 = *v20 - 1;
                    *(int16_t *)(g6 + 20) = (int16_t)g9;
                    g4 = *(int32_t *)(g5 - 64);
                }
            }
            int32_t v21 = g4; // 0x3eea0
            if (v21 == (int32_t)&g863) {
                result = v21;
                // break -> 0x3eeab
                break;
            }
            // 0x3ee18
            *(int32_t *)(g5 - 28) = v21;
        }
    } else {
        result = v1;
    }
    // 0x3eeab
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x3eeb8 - 0x3eeda
int32_t function_3eeb8(void) {
    // 0x3eeb8
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3eedf - 0x3eee4
int32_t function_3eedf(void) {
    // 0x3eedf
    return g4;
}

// Address range: 0x3eef0 - 0x3ef15
int32_t function_3eef0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x3eef5
    g6 = a1;
    int32_t result = a3 | a2; // 0x3ef08
    g4 = result;
    if (result != 0) {
        // 0x3ef18
        return result;
    }
    // 0x3ef0d
    g6 = v1;
    return result;
}

// Address range: 0x3ef1d - 0x3efef
int32_t function_3ef1d(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x3ef1d
    int32_t v2 = *(int32_t *)(v1 + 28); // 0x3ef1d
    g4 = v2;
    int32_t v3 = g5; // 0x3ef20
    g8 = v3 - 44;
    g10 = (int32_t)*(int16_t *)(v1 + 16);
    float80_t v4; // st7
    *(float64_t *)(v3 - 72) = (float64_t)v4;
    *(int32_t *)(v3 - 76) = v2;
    int32_t v5 = g5; // 0x3ef2d
    int32_t v6 = *(int32_t *)(v5 - 60); // 0x3ef2d
    g4 = v6;
    *(int32_t *)(v5 - 44) = v6;
    int32_t v7 = g5; // 0x3ef37
    int32_t v8 = *(int32_t *)(v7 - 64); // 0x3ef37
    g4 = v8;
    *(int32_t *)(v7 - 40) = v8;
    if ((int16_t)g10 == -1) {
        goto lab_0x3efb1_2;
      lab_0x3efb1_2:
        // 0x3efb1
        g4 = *(int32_t *)(g5 - 60);
        int64_t v9 = *(int64_t *)(g5 - 72); // 0x3efb8
        *(int64_t *)(g5 - 36) = (int64_t)__asm_movsd(__asm_movsd_1649(v9));
        *(int32_t *)(g5 - 44) = g4;
        int32_t v10 = *(int32_t *)(g5 - 64); // 0x3efc8
        g4 = v10;
        *(int32_t *)(g5 - 40) = v10;
        int32_t v11 = *(int32_t *)(g5 - 76); // 0x3efce
        g4 = v11;
        *(int32_t *)(g5 - 28) = v11;
        int32_t result = function_43000((int32_t)&g870, (int32_t)&g870); // 0x3efd4
        g4 = result;
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return result;
    }
    int32_t v12 = g10;
    int32_t v13 = g6;
    int32_t result2; // 0x3ef70
    while (true) {
        int32_t * v14 = (int32_t *)(v13 + 4); // 0x3ef62
        char v15 = g532; // 0x3ef48
        int32_t v16 = v12; // 0x3ef65
        int32_t v17; // 0x3ef6e
        while (true) {
            int32_t v18 = 28 * (v16 & (int32_t)&g863); // 0x3ef6b
            g10 = v18;
            v17 = v18 | 8;
            result2 = v17 + *v14;
            g4 = result2;
            if ((char)result2 == 0) {
                // break -> 0x3ef7d
                break;
            }
            if (v15 == 0) {
                return result2;
            }
            int32_t v19 = *v14; // 0x3ef55
            g4 = v19;
            uint16_t v20 = *(int16_t *)(v19 + v18); // 0x3ef58
            int32_t v21 = v20; // 0x3ef58
            g10 = v21;
            if (v20 == -1) {
                goto lab_0x3efb1_2;
            }
            v16 = v21;
        }
        int32_t v22 = v17 + *v14; // 0x3ef86
        g4 = v22;
        char v23; // 0x3ef96
        if ((char)v22 == 0) {
            int32_t v24 = function_3f070((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3ef90
            g4 = v24;
            v23 = g532;
        } else {
            v23 = v15;
        }
        if (v23 == 0) {
            // bb242
            g4 = function_3f030();
        }
        int32_t v25 = g6; // 0x3efa3
        int32_t v26 = *(int32_t *)(v25 + 4); // 0x3efa3
        g4 = v26;
        uint16_t v27 = *(int16_t *)(v26 + 2 + g10); // 0x3efa6
        int32_t v28 = v27; // 0x3efa6
        g10 = v28;
        if (v27 == -1) {
            goto lab_0x3efb1_2;
        }
        v12 = v28;
        v13 = v25;
    }
    // 0x3efe8
    return result2;
}

// Address range: 0x3f006 - 0x3f00e
int32_t function_3f006(void) {
    int32_t v1 = g4; // 0x3f006
    char * v2 = (char *)(v1 + 10); // 0x3f006
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3f009
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3f00f - 0x3f017
int32_t function_3f00f(void) {
    int32_t v1 = g4; // 0x3f00f
    char v2 = *(char *)(v1 + 10); // 0x3f00f
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3f00f
    g4 = result;
    uint32_t v3 = g6; // 0x3f012
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3f023 - 0x3f028
int32_t function_3f023(void) {
    // 0x3f023
    return g4;
}

// Address range: 0x3f030 - 0x3f037
int32_t function_3f030(void) {
    // 0x3f030
    return g4;
}

// Address range: 0x3f04e - 0x3f056
int32_t function_3f04e(void) {
    int32_t v1 = g4; // 0x3f04e
    char * v2 = (char *)(v1 + 10); // 0x3f04e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3f051
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3f057 - 0x3f05f
int32_t function_3f057(void) {
    int32_t v1 = g4; // 0x3f057
    char v2 = *(char *)(v1 + 10); // 0x3f057
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3f057
    g4 = result;
    uint32_t v3 = g6; // 0x3f05a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3f06b - 0x3f070
int32_t function_3f06b(void) {
    // 0x3f06b
    return g4;
}

// Address range: 0x3f070 - 0x3f08b
int32_t function_3f070(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x3f070
    g10 += *(int32_t *)(g6 + 4);
    g4 = *(int32_t *)(g5 - 76);
    int32_t v1 = __asm_movsd(__asm_movsd_1649(*(int64_t *)(g5 - 72))); // 0x3f07b
    int32_t v2 = g10; // 0x3f07b
    *(int64_t *)(v2 + 16) = (int64_t)v1;
    *(int32_t *)(v2 + 24) = g4;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x3f090 - 0x3f091
int32_t function_3f090(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3f090
    return g4;
}

// Address range: 0x3f152 - 0x3f15e
int32_t function_3f152(void) {
    // 0x3f152
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x3f154
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x3f156
    int32_t v3 = g4; // 0x3f156
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    int32_t result = v3 & -252; // 0x3f159
    g4 = result;
    return result;
}

// Address range: 0x3f1c8 - 0x3f1e3
int32_t function_3f1c8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x1443c703); // 0x3f1c8
    *v1 = *v1 - 1;
    int32_t v2 = 2 * g4; // 0x3f1ce
    g4 = v2;
    char * v3 = (char *)v2; // 0x3f1d0
    *v3 = *v3 + (char)v2;
    *(int32_t *)(g6 + 44) = g4;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x3f1e8 - 0x3f1f4
int32_t function_3f1e8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x3f1e8
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    int32_t result = function_3e900((int32_t)&g870); // 0x3f1ef
    g4 = result;
    return result;
}

// Address range: 0x3f1f4 - 0x3f2ca
int32_t function_3f1f4(int32_t a1) {
    // 0x3f1f4
    g6 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5; // 0x3f210
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x3f213
    g6 = a1;
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x3f21a
    int32_t result2 = *v4; // 0x3f21a
    g4 = result2;
    int32_t v5; // 0x3f296
    if (result2 != 1) {
        if (result2 > 1) {
            if (result2 == 2) {
                // 0x3f240
                g6 = v3;
                int32_t result = function_3f090(v3, v1, a1); // 0x3f248
                g4 = result;
                return result;
            }
            if (result2 != 3) {
                // 0x3f232
                g6 = v3;
                return result2;
            }
            int32_t v6 = *(int32_t *)(a1 + 44); // 0x3f2b0
            g4 = v6;
            if (v6 == 0) {
                // 0x3f232
                g6 = v3;
                return 0;
            }
            int32_t v7 = *(int32_t *)v6; // 0x3f2bb
            g9 = v7;
            int32_t result3 = *(int32_t *)(v7 + 8); // 0x3f2c0
            g4 = result3;
            g6 = v3;
            return result3;
        }
        if (result2 != 0) {
            // 0x3f232
            g6 = v3;
            return result2;
        }
        // 0x3f254
        *v4 = 1;
        g4 = function_3ed10(&g529);
        int32_t v8 = g6; // 0x3f267
        int32_t v9 = *(int32_t *)v8; // 0x3f267
        g4 = v9;
        *(int32_t *)(v8 + 16) = v9;
        int32_t v10 = *(int32_t *)(g6 + 8); // 0x3f272
        g4 = v10;
        g4 = function_28600(v10);
        int32_t v11 = *(int32_t *)(g6 + 16); // 0x3f27d
        g4 = v11;
        g9 = *(int32_t *)v11;
        int32_t v12 = function_26d60(v11); // 0x3f28b
        g4 = v12;
        *(int32_t *)(g6 + 8) = v12;
        *(int32_t *)(g6 + 12) = g4;
        v5 = g6;
    } else {
        v5 = a1;
    }
    int32_t v13 = *(int32_t *)(v5 + 16); // 0x3f296
    g4 = v13;
    int32_t v14 = *(int32_t *)v13; // 0x3f299
    g9 = v14;
    int32_t result4 = *(int32_t *)(v14 + 8); // 0x3f29e
    g4 = result4;
    g6 = v3;
    return result4;
}

// Address range: 0x3f2d0 - 0x3f2d7
int32_t function_3f2d0(void) {
    // 0x3f2d0
    g4 = 0;
    return 0;
}

// Address range: 0x3f2e0 - 0x3f2ea
int32_t function_3f2e0(void) {
    // 0x3f2e0
    g4 = 1;
    return 1;
}

// Address range: 0x3f2f0 - 0x3f32e
int32_t function_3f2f0(int32_t a1, int32_t a2) {
    // 0x3f2f0
    g4 = 1;
    g7 = a2;
    int32_t v1 = g6; // 0x3f2fe
    int32_t v2 = g10; // 0x3f301
    g9 = a1;
    uint32_t v3 = *(int32_t *)(a2 + 4); // 0x3f307
    g10 = v3;
    uint32_t v4 = *(int32_t *)a1; // 0x3f30a
    g6 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x3f30c
    if (v5 < v3) {
        // 0x3f315
        g6 = v1;
        g10 = v2;
        return 1;
    }
    if (v5 == v3) {
        // 0x3f320
        if (v4 < *(int32_t *)a2) {
            // 0x3f324
            g6 = v1;
            g10 = v2;
            return 1;
        }
    }
    // 0x3f313
    g4 = 0;
    // 0x3f315
    g6 = v1;
    g10 = v2;
    return 0;
}

// Address range: 0x3f330 - 0x3f342
int32_t function_3f330(int32_t a1) {
    // 0x3f330
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g171;
    int32_t result = function_5a110((int32_t)&g870); // 0x3f33d
    g4 = result;
    return result;
}

// Address range: 0x3f350 - 0x3f375
int32_t function_3f350(int32_t a1) {
    int32_t v1 = g6; // 0x3f353
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g171;
    g4 = function_5a110(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x3f370
    g4 = result;
    return result;
}

// Address range: 0x3f380 - 0x3f42a
int32_t function_3f380(int32_t a1) {
    int32_t v1 = g8; // 0x3f383
    int32_t v2 = g10; // 0x3f384
    int32_t v3 = g6; // 0x3f385
    g10 = a1;
    uint16_t v4 = *(int16_t *)(a1 + 22); // 0x3f38c
    int32_t v5 = v4; // 0x3f38c
    g7 = v5;
    if (v4 == -1) {
        // 0x3f3d1
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t result = *(int32_t *)(a1 + 8); // 0x3f396
    g4 = result;
    int32_t v6; // 0x3f3c5
    if (result >= 1) {
        // 0x3f39d
        g9 = 0;
        g8 = 0;
        int32_t v7 = 0; // 0x3f3fc
        int32_t v8 = a1; // 0x3f403
        int32_t v9 = 0; // 0x3f3fe
        int32_t v10; // 0x3f3b8
        while (true) {
            // 0x3f3a8
            g6 = v9;
            int32_t v11; // 0x3f3b3
            int32_t v12; // 0x3f3bb
            if (v9 < result) {
                uint16_t v13 = (int16_t)v9; // 0x3f3ae
                if (v13 <= (int16_t)v5) {
                    if (g532 == 0) {
                        // 0x3f420
                        return result;
                    }
                    int32_t v14 = *(int32_t *)(v8 + 4) + v7; // 0x3f3fc
                    g7 = v14;
                    int32_t v15; // 0x3f416
                    int32_t v16;
                    if (v13 != *(int16_t *)v14) {
                        uint16_t v17 = *(int16_t *)(v8 + 20); // 0x3f403
                        g4 = v17;
                        *(int16_t *)(v14 + 2) = v17;
                        int32_t v18 = *(int32_t *)(g10 + 4); // 0x3f40b
                        g4 = v18;
                        *(int16_t *)(g9 + v18) = (int16_t)g6;
                        *(int16_t *)(g10 + 20) = (int16_t)g6;
                        v16 = g6;
                        v15 = g10;
                    } else {
                        v16 = v9;
                        v15 = v8;
                    }
                    int32_t v19 = (int32_t)*(int16_t *)(v15 + 22); // 0x3f416
                    g7 = v19;
                    v10 = v15;
                    v12 = v16;
                    v11 = v19;
                } else {
                    v10 = v8;
                    v12 = v9;
                    v11 = v5;
                }
            } else {
                v10 = v8;
                v12 = v9;
                v11 = v5;
            }
            if ((int16_t)v11 == (int16_t)v12) {
                // break -> 0x3f3c5
                break;
            }
            int32_t v20 = *(int32_t *)(v10 + 8); // 0x3f3b8
            g4 = v20;
            int32_t v21 = v12 + 1 & (int32_t)&g863; // 0x3f3be
            g6 = v21;
            if (v21 >= v20) {
                // break -> 0x3f3c5
                break;
            }
            int32_t v22 = g8 + 1; // 0x3f3e0
            g8 = v22;
            int32_t v23 = g9 + 28; // 0x3f3e3
            g9 = v23;
            if (v22 == (int32_t)&g863) {
                // break -> 0x3f3c5
                break;
            }
            v7 = v23;
            v8 = v10;
            v5 = v11;
            result = v20;
            v9 = v22;
        }
        v6 = v10;
    } else {
        v6 = a1;
    }
    // 0x3f3c5
    *(int16_t *)(v6 + 16) = (int16_t)&g863;
    *(int16_t *)(g10 + 18) = 0;
    // 0x3f3d1
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x3f435 - 0x3f436
int32_t function_3f435(void) {
    // 0x3f435
    return g4;
}

// Address range: 0x3f439 - 0x3f441
int32_t function_3f439(void) {
    int32_t v1 = g4; // 0x3f439
    char * v2 = (char *)(v1 + 10); // 0x3f439
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3f43c
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3f442 - 0x3f44a
int32_t function_3f442(void) {
    int32_t v1 = g4; // 0x3f442
    char v2 = *(char *)(v1 + 10); // 0x3f442
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3f442
    g4 = result;
    uint32_t v3 = g6; // 0x3f445
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3f45d - 0x3f462
int32_t function_3f45d(void) {
    // 0x3f45d
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x3f4e3 - 0x3f4ea
int32_t function_3f4e3(void) {
    // 0x3f4e3
    *(int32_t *)(g6 + 8) = 0;
    return g4;
}

// Address range: 0x3f4ea - 0x3f4f1
int32_t function_3f4ea(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3f4ea
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x3f4f8 - 0x3f505
int32_t function_3f4f8(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3f4f8
    *(int16_t *)(g6 + 22) = (int16_t)&g863;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x3f5fe - 0x3f606
int32_t function_3f5fe(void) {
    int32_t v1 = g4; // 0x3f5fe
    char * v2 = (char *)(v1 + 10); // 0x3f5fe
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3f601
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3f607 - 0x3f60f
int32_t function_3f607(void) {
    int32_t v1 = g4; // 0x3f607
    char v2 = *(char *)(v1 + 10); // 0x3f607
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3f607
    g4 = result;
    uint32_t v3 = g6; // 0x3f60a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3f61b - 0x3f61d
int32_t function_3f61b(void) {
    // 0x3f61b
    return g4;
}

// Address range: 0x3f620 - 0x3f627
int32_t function_3f620(void) {
    // 0x3f620
    return g4;
}

// Address range: 0x3f62c - 0x3f639
int32_t function_3f62c(void) {
    // 0x3f62c
    if (g4 != 0) {
        // bb
        g4 = function_3f658();
    }
    int32_t result = g532; // 0x3f630
    g4 = result;
    return result;
}

// Address range: 0x3f640 - 0x3f648
int32_t function_3f640(void) {
    // 0x3f640
    g6 = -1;
    return g4;
}

// Address range: 0x3f648 - 0x3f652
int32_t function_3f648(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g6; // 0x3f64b
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x3f658 - 0x3f67a
int32_t function_3f658(void) {
    // 0x3f658
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3f67f - 0x3f681
int32_t function_3f67f(void) {
    // 0x3f67f
    return g4;
}

// Address range: 0x3f688 - 0x3f68f
int32_t function_3f688(void) {
    // 0x3f688
    return g4;
}

// Address range: 0x3f694 - 0x3f6a8
int32_t function_3f694(void) {
    // 0x3f694
    if (g4 != 0) {
        // bb
        g4 = function_3f880();
    }
    int32_t result = g532; // 0x3f69c
    g4 = result;
    return result;
}

// Address range: 0x3f6b0 - 0x3f739
int32_t function_3f6b0(void) {
    int32_t v1 = g4; // 0x3f6b0
    int32_t v2; // 0x3f6b2
    if ((char)v1 == 0) {
        // bb
        v2 = function_3f838();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3 = g8; // 0x3f6b8
    g9 = (int32_t)&g286;
    int32_t v4; // 0x3f6db
    int32_t result; // 0x3f6e4
    int32_t v5; // 0x3f6c9
    if ((int16_t)v3 != -1) {
        int32_t v6 = 28 * (v3 & (int32_t)&g863); // 0x3f6c6
        g9 = v6;
        v5 = *(int32_t *)(g10 + 4) + v6;
        g9 = v5;
        v4 = v3;
        result = v2;
    } else {
        v4 = v3;
        v5 = (int32_t)&g286;
        result = v2;
    }
    while (true) {
        int32_t v7 = (int32_t)*(int16_t *)(v5 + 4); // 0x3f72c
        g6 = v7;
        if ((char)result == 0) {
            // break -> 0x3f732
            break;
        }
        int16_t v8 = v4; // 0x3f6d0
        g9 = (int32_t)&g286;
        int32_t v9; // 0x3f6e1
        if (v8 != -1) {
            int32_t v10 = 28 * (v4 & (int32_t)&g863); // 0x3f6de
            g9 = v10;
            v9 = *(int32_t *)(g10 + 4) + v10;
            g9 = v9;
        } else {
            v9 = (int32_t)&g286;
        }
        uint16_t v11 = *(int16_t *)(v9 + 4); // 0x3f6e6
        int32_t v12 = v11; // 0x3f6e6
        g9 = v12;
        g4 = (int32_t)&g286;
        int32_t v13; // 0x3f6fd
        if (v11 != -1) {
            int32_t v14 = v12 & (int32_t)&g863; // 0x3f6f7
            g9 = v14;
            int32_t v15 = 28 * v14; // 0x3f6fa
            g4 = v15;
            v13 = *(int32_t *)(g10 + 4) + v15;
            g4 = v13;
        } else {
            v13 = (int32_t)&g286;
        }
        // 0x3f700
        int32_t v16; // 0x3f70a
        if (v8 != *(int16_t *)(v13 + 2)) {
            int32_t v17 = function_3f648((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x3f704
            g4 = v17;
            v16 = g6;
        } else {
            v16 = v7;
        }
        if ((int16_t)v16 == -1) {
            // bb246
            g4 = function_3f640();
        }
        unsigned char v18 = g532; // 0x3f714
        int32_t v19 = v18; // 0x3f714
        g4 = v19;
        int32_t v20; // 0x3f71d
        if (v18 == 0) {
            // bb247
            v20 = function_3f798();
            g4 = v20;
        } else {
            v20 = v19;
        }
        int32_t v21 = g6; // 0x3f71f
        g8 = v21;
        int32_t v22 = 28 * (v21 & (int32_t)&g863); // 0x3f724
        g9 = v22;
        int32_t v23 = *(int32_t *)(g10 + 4) + v22; // 0x3f727
        g9 = v23;
        v4 = v21;
        v5 = v23;
        result = v20;
    }
    // 0x3f732
    return result;
}

// Address range: 0x3f73e - 0x3f74b
int32_t function_3f73e(void) {
    // 0x3f73e
    if (g4 != 0) {
        // bb
        g4 = function_3f7b8();
    }
    int32_t result = g532; // 0x3f742
    g4 = result;
    return result;
}

// Address range: 0x3f750 - 0x3f75a
int32_t function_3f750(void) {
    // 0x3f750
    *(int32_t *)(g5 - 28) = g9;
    return g4;
}

// Address range: 0x3f769 - 0x3f771
int32_t function_3f769(void) {
    int32_t v1 = g4; // 0x3f769
    char * v2 = (char *)(v1 + 10); // 0x3f769
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3f76c
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3f772 - 0x3f77a
int32_t function_3f772(void) {
    int32_t v1 = g4; // 0x3f772
    char v2 = *(char *)(v1 + 10); // 0x3f772
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3f772
    g4 = result;
    uint32_t v3 = g6; // 0x3f775
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3f78d - 0x3f795
int32_t function_3f78d(void) {
    // 0x3f78d
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x3f798 - 0x3f79f
int32_t function_3f798(void) {
    // 0x3f798
    return g4;
}

// Address range: 0x3f7a4 - 0x3f7b4
int32_t function_3f7a4(void) {
    // 0x3f7a4
    if (g4 != 0) {
        // bb
        g4 = function_3f7e8();
    }
    int32_t result = g532; // 0x3f7a8
    g4 = result;
    return result;
}

// Address range: 0x3f7b8 - 0x3f7da
int32_t function_3f7b8(void) {
    // 0x3f7b8
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3f7df - 0x3f7e4
int32_t function_3f7df(void) {
    // 0x3f7df
    return g4;
}

// Address range: 0x3f7e8 - 0x3f80a
int32_t function_3f7e8(void) {
    // 0x3f7e8
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3f80f - 0x3f811
int32_t function_3f80f(void) {
    // 0x3f80f
    return g4;
}

// Address range: 0x3f818 - 0x3f81f
int32_t function_3f818(void) {
    // 0x3f818
    return g4;
}

// Address range: 0x3f824 - 0x3f834
int32_t function_3f824(void) {
    // 0x3f824
    if (g4 != 0) {
        // bb
        g4 = function_3f854();
    }
    int32_t result = g532; // 0x3f828
    g4 = result;
    return result;
}

// Address range: 0x3f838 - 0x3f83f
int32_t function_3f838(void) {
    // 0x3f838
    return g4;
}

// Address range: 0x3f844 - 0x3f854
int32_t function_3f844(void) {
    // 0x3f844
    if (g4 != 0) {
        // bb
        g4 = function_3f8ac();
    }
    int32_t result = g532; // 0x3f848
    g4 = result;
    return result;
}

// Address range: 0x3f854 - 0x3f876
int32_t function_3f854(void) {
    // 0x3f854
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3f87b - 0x3f87d
int32_t function_3f87b(void) {
    // 0x3f87b
    return g4;
}

// Address range: 0x3f880 - 0x3f8a2
int32_t function_3f880(void) {
    // 0x3f880
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3f8a7 - 0x3f8ac
int32_t function_3f8a7(void) {
    // 0x3f8a7
    return g4;
}

// Address range: 0x3f8ac - 0x3f8ce
int32_t function_3f8ac(void) {
    // 0x3f8ac
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3f8d3 - 0x3f8d8
int32_t function_3f8d3(void) {
    // 0x3f8d3
    return g4;
}

// Address range: 0x3f8e0 - 0x3f8f7
int32_t function_3f8e0(int32_t a1) {
    // 0x3f8e0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x3f8ea
    g9 = v1;
    int32_t v2; // 0x3f8f1
    if (v1 < 0) {
        // bb
        g4 = function_3f916((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x3f8f1
    g4 = v3;
    int32_t result; // 0x3f8f5
    if (v3 == 0) {
        // bb7
        result = function_3f90f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x3f8f7
    return result;
}

// Address range: 0x3f90f - 0x3f916
int32_t function_3f90f(void) {
    // 0x3f90f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x3f916 - 0x3f91c
int32_t function_3f916(int32_t a1, int32_t a2) {
    // 0x3f916
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x3f920 - 0x3f93e
int32_t function_3f920(int32_t a1) {
    // 0x3f920
    g6 = a1;
    g7 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x3f934
    g4 = result;
    return result;
}

// Address range: 0x3f990 - 0x3f9e0
int32_t function_3f990(int32_t a1, int32_t a2) {
    // 0x3f990
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x3f99b
    int64_t v2 = v1; // 0x3f99b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x3f9a2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x3f9a8
    g7 = v4;
    int32_t v5; // 0x3f9c8
    if (v1 == 0) {
        // bb
        g4 = function_3fa08();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x3f9ae
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x3f9b6
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x3f9bb
    g4 = v8;
    int32_t v9; // 0x3f9d9
    if (v5 > v8) {
        // 0x3f9c2
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x3f9c8
        int32_t v11 = v10 < 0; // 0x3f9cc
        int32_t v12 = (v11 + v10) / 2; // 0x3f9d1
        while (v5 > v12) {
            // 0x3f9c8
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x3f9d7
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x3f9d7
    int32_t v14 = *(int32_t *)v13; // 0x3f9d7
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x3f9de
    if (v14 == 0) {
        // bb20
        result = function_3fa2f();
        g4 = result;
    } else {
        // 0x3f9d7
        result = g4;
    }
    // 0x3f9e0
    return result;
}

// Address range: 0x3fa08 - 0x3fa2f
int32_t function_3fa08(void) {
    int32_t v1 = g4; // 0x3fa08
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x3fa0f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x3fa20
    while (g7 > v3) {
        // 0x3fa20
        v3 *= 2;
    }
    // 0x3fa26
    g4 = v3;
    int32_t v4 = g6; // 0x3fa26
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x3fa2f - 0x3fa30
int32_t function_3fa2f(void) {
    // 0x3fa2f
    return g4;
}

// Address range: 0x3fa50 - 0x3fad6
int32_t function_3fa50(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x3fa56
    g6 = a1;
    int32_t v2 = g10; // 0x3fa5c
    g10 = a2;
    int32_t v3 = g8; // 0x3fa62
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x3fa65
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x3fa68
    g9 = v5;
    int32_t v6; // 0x3fa71
    int32_t v7; // 0x3fad1
    int32_t v8; // 0x3fad1
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x3fac6
        g4 = v9;
        g4 = function_3f990(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x3fa6f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x3fa78
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x3fa80
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x3faa6
    if (v11 < 1) {
        // 0x3fa6f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x3fa91
        int32_t v14 = v13 + 4 + 4 * g10; // 0x3fa98
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x3faa4
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x3faa6
    g9 = v16;
    if (v16 != 0) {
        // 0x3faaa
        g4 = (int32_t)a3;
        int32_t v17 = *a3; // 0x3faad
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x3fab1
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x3fae0 - 0x3fcb7
int32_t function_3fae0(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x3fae3
    int32_t v2 = g10; // 0x3fae4
    int32_t v3 = g6; // 0x3fae5
    unsigned char v4 = g532; // 0x3fae9
    g4 = v4;
    g6 = a1;
    int32_t v5 = a2 % 0x10000; // 0x3faf3
    g10 = v5;
    int32_t v6; // 0x3fb14
    if (v4 == 0) {
        // bb
        g4 = function_3fd30();
        v6 = g10;
    } else {
        v6 = v5;
    }
    // 0x3fb02
    g7 = (int32_t)&g286;
    int32_t v7; // 0x3fb20
    int32_t v8; // 0x3fb1a
    if ((int16_t)v6 != -1) {
        int32_t v9 = v6 & (int32_t)&g863; // 0x3fb14
        g9 = v9;
        v8 = 28 * v9;
        g9 = v8;
        v7 = *(int32_t *)(g6 + 4) + v8;
        g7 = v7;
    } else {
        v7 = (int32_t)&g286;
        v8 = 0x1bffe4;
    }
    int32_t v10 = (int32_t)*(int16_t *)(v7 + 2); // 0x3fb26
    g8 = v10;
    int32_t v11; // 0x3fb30
    if (v4 == 0) {
        // bb36
        g4 = function_3fcf0();
        v11 = g8;
    } else {
        v11 = v10;
    }
    int32_t v12 = *(int32_t *)(g6 + 4); // 0x3fb34
    g9 = v12;
    int32_t v13; // 0x3fb3d
    int32_t v14; // 0x3fb52
    if ((int16_t)v11 == -1) {
        // bb37
        g4 = function_3fd1b();
        v14 = g9;
        v13 = g8;
    } else {
        v14 = v12;
        v13 = v11;
    }
    int32_t v15 = 28 * (v13 & (int32_t)&g863); // 0x3fb40
    int32_t v16 = v15 + v14; // 0x3fb46
    g7 = v16;
    uint16_t v17 = *(int16_t *)v16; // 0x3fb48
    g7 = v17;
    g4 = v8;
    *(int16_t *)((v8 | 2) + v14) = v17;
    if (v4 == 0) {
        // 0x3fcb0
        return g4;
    }
    int32_t v18 = g8; // 0x3fb5d
    g4 = (int32_t)&g286;
    int32_t v19; // 0x3fb6b
    if ((int16_t)v18 != -1) {
        // 0x3fb68
        g4 = v15;
        v19 = *(int32_t *)(g6 + 4) + v15;
        g4 = v19;
    } else {
        v19 = (int32_t)&g286;
    }
    // 0x3fb6e
    int32_t v20; // 0x3fb9f
    if (*(int16_t *)v19 != -1) {
        // 0x3fb74
        int32_t v21; // 0x3fb81
        if (g532 == 0) {
            // bb38
            g4 = function_3fd90();
            v21 = g8;
        } else {
            v21 = v18;
        }
        int32_t v22 = *(int32_t *)(g6 + 4); // 0x3fb85
        g7 = v22;
        int32_t v23; // 0x3fb92
        if ((int16_t)v21 != -1) {
            // 0x3fb8f
            v23 = v22 + v15;
        } else {
            v23 = (int32_t)&g286;
        }
        // 0x3fb94
        g4 = v23;
        int32_t v24 = 28 * (int32_t)*(int16_t *)v23; // 0x3fb97
        g4 = v24;
        *(int16_t *)(v22 + 4 + v24) = (int16_t)g10;
        v20 = g8;
    } else {
        v20 = v18;
    }
    if ((int16_t)v20 != -1) {
        // 0x3fba5
        if (g532 == 0) {
            // bb39
            g4 = function_3fdd0();
        }
        // 0x3fbb2
        if ((int16_t)g10 == -1) {
            // bb40
            g4 = function_3fe40();
        }
        int32_t v25 = *(int32_t *)(g6 + 4); // 0x3fbbc
        g7 = v25;
        int32_t v26 = v25 + v8; // 0x3fbc5
        g4 = v26;
        uint16_t v27 = *(int16_t *)(v26 + 4); // 0x3fbc7
        g4 = v27;
        g7 = v25;
        g9 = v15;
        *(int16_t *)(v25 + (v15 | 4)) = v27;
    }
    int32_t v28 = g10; // 0x3fbd6
    int16_t * v29 = (int16_t *)(g6 + 16); // 0x3fbd6
    if ((int16_t)v28 == *v29) {
        // 0x3fca0
        *v29 = (int16_t)g8;
    } else {
        unsigned char v30 = g532; // 0x3fbe0
        g7 = v30;
        int32_t v31; // 0x3fbef
        if (v30 == 0) {
            // bb41
            g4 = function_3fe10();
            v31 = g10;
        } else {
            v31 = v28;
        }
        // 0x3fbef
        g4 = (int32_t)&g286;
        int32_t v32; // 0x3fbfd
        if ((int16_t)v31 != -1) {
            // 0x3fbfa
            g4 = v8;
            v32 = *(int32_t *)(g6 + 4) + v8;
            g4 = v32;
        } else {
            v32 = (int32_t)&g286;
        }
        int32_t v33 = (int32_t)*(int16_t *)(v32 + 4); // 0x3fc02
        g9 = v33;
        int32_t v34; // 0x3fc17
        if ((char)g7 == 0) {
            // bb42
            g4 = function_3fd58();
            v34 = g9;
        } else {
            v34 = v33;
        }
        // 0x3fc0c
        g4 = (int32_t)&g286;
        int32_t v35; // 0x3fc1d
        if ((int16_t)v34 != -1) {
            int32_t v36 = 28 * (v34 & (int32_t)&g863); // 0x3fc1a
            g4 = v36;
            v35 = *(int32_t *)(g6 + 4) + v36;
            g4 = v35;
        } else {
            v35 = (int32_t)&g286;
        }
        int32_t v37 = g10; // 0x3fc20
        int32_t v38 = g7; // 0x3fc70
        if ((int16_t)v37 != *(int16_t *)v35) {
            int32_t v39; // 0x3fc78
            if ((char)v38 == 0) {
                // bb45
                g4 = function_3fe90();
                v39 = g10;
            } else {
                v39 = v37;
            }
            int32_t v40 = *(int32_t *)(g6 + 4); // 0x3fc7c
            g7 = v40;
            int32_t v41; // 0x3fc89
            if ((int16_t)v39 != -1) {
                // 0x3fc86
                v41 = v40 + v8;
            } else {
                v41 = (int32_t)&g286;
            }
            // 0x3fc8b
            g4 = v41;
            int32_t v42 = 28 * (int32_t)*(int16_t *)(v41 + 4); // 0x3fc8f
            g4 = v42;
            *(int16_t *)((v42 | 2) + v40) = (int16_t)g8;
        } else {
            int32_t v43; // 0x3fc2d
            if ((char)v38 == 0) {
                // bb43
                g4 = function_3fe50();
                v43 = g10;
            } else {
                v43 = v37;
            }
            int32_t v44 = *(int32_t *)(g6 + 4); // 0x3fc31
            g7 = v44;
            int32_t v45; // 0x3fc3e
            if ((int16_t)v43 != -1) {
                // 0x3fc3b
                v45 = v44 + v8;
            } else {
                v45 = (int32_t)&g286;
            }
            // 0x3fc40
            g4 = v45;
            int32_t v46 = 28 * (int32_t)*(int16_t *)(v45 + 4); // 0x3fc44
            g4 = v46;
            *(int16_t *)(v46 + v44) = (int16_t)g8;
        }
    }
    int32_t v47 = *(int32_t *)(g6 + 4); // 0x3fc4b
    g4 = v47;
    int16_t v48 = g10; // 0x3fc4e
    g9 = v15;
    *(int16_t *)(v47 + v15) = v48;
    if (v48 != -1) {
        int32_t v49 = *(int32_t *)(g6 + 4); // 0x3fc5b
        g4 = v49;
        g7 = v8;
        *(int16_t *)(v8 + 4 + v49) = (int16_t)g8;
    }
    // 0x3fc66
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x3fcce - 0x3fcd6
int32_t function_3fcce(void) {
    int32_t v1 = g4; // 0x3fcce
    char * v2 = (char *)(v1 + 10); // 0x3fcce
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3fcd1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3fcd7 - 0x3fcdf
int32_t function_3fcd7(void) {
    int32_t v1 = g4; // 0x3fcd7
    char v2 = *(char *)(v1 + 10); // 0x3fcd7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3fcd7
    g4 = result;
    uint32_t v3 = g6; // 0x3fcda
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3fceb - 0x3fcf0
int32_t function_3fceb(void) {
    // 0x3fceb
    return g4;
}

// Address range: 0x3fcf0 - 0x3fcf7
int32_t function_3fcf0(void) {
    // 0x3fcf0
    return g4;
}

// Address range: 0x3fd1b - 0x3fd2c
int32_t function_3fd1b(void) {
    // 0x3fd1b
    *(int32_t *)(g5 - 28) = 0x1bffe4;
    g7 = (int32_t)&g286;
    return g4;
}

// Address range: 0x3fd30 - 0x3fd37
int32_t function_3fd30(void) {
    // 0x3fd30
    return g4;
}

// Address range: 0x3fd3c - 0x3fd53
int32_t function_3fd3c(void) {
    // 0x3fd3c
    if (g4 != 0) {
        // bb
        g4 = function_3ff10();
    }
    unsigned char v1 = g532; // 0x3fd44
    g9 = v1;
    int32_t v2; // ebp
    *(char *)(v2 - 41) = v1;
    return g4;
}

// Address range: 0x3fd58 - 0x3fd62
int32_t function_3fd58(void) {
    // 0x3fd58
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x3fd66 - 0x3fd8d
int32_t function_3fd66(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x3fd66
    int32_t v2 = *v1 - 1; // 0x3fd66
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_3ff50();
    }
    // 0x3fd72
    g7 = g532;
    g4 = (int32_t)&g286;
    return (int32_t)&g286;
}

// Address range: 0x3fd90 - 0x3fd97
int32_t function_3fd90(void) {
    // 0x3fd90
    return g4;
}

// Address range: 0x3fdae - 0x3fdb6
int32_t function_3fdae(void) {
    int32_t v1 = g4; // 0x3fdae
    char * v2 = (char *)(v1 + 10); // 0x3fdae
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3fdb1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3fdb7 - 0x3fdbf
int32_t function_3fdb7(void) {
    int32_t v1 = g4; // 0x3fdb7
    char v2 = *(char *)(v1 + 10); // 0x3fdb7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3fdb7
    g4 = result;
    uint32_t v3 = g6; // 0x3fdba
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3fdcb - 0x3fdd0
int32_t function_3fdcb(void) {
    // 0x3fdcb
    return g4;
}

// Address range: 0x3fdd0 - 0x3fdd7
int32_t function_3fdd0(void) {
    // 0x3fdd0
    return g4;
}

// Address range: 0x3fdee - 0x3fdf6
int32_t function_3fdee(void) {
    int32_t v1 = g4; // 0x3fdee
    char * v2 = (char *)(v1 + 10); // 0x3fdee
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3fdf1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3fdf7 - 0x3fdff
int32_t function_3fdf7(void) {
    int32_t v1 = g4; // 0x3fdf7
    char v2 = *(char *)(v1 + 10); // 0x3fdf7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3fdf7
    g4 = result;
    uint32_t v3 = g6; // 0x3fdfa
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3fe0b - 0x3fe10
int32_t function_3fe0b(void) {
    // 0x3fe0b
    return g4;
}

// Address range: 0x3fe10 - 0x3fe17
int32_t function_3fe10(void) {
    // 0x3fe10
    return g4;
}

// Address range: 0x3fe1c - 0x3fe3f
int32_t function_3fe1c(void) {
    // 0x3fe1c
    if (g4 != 0) {
        // bb
        g4 = function_3ff90();
    }
    // 0x3fe24
    g7 = g532;
    g4 = (int32_t)&g286;
    return (int32_t)&g286;
}

// Address range: 0x3fe40 - 0x3fe50
int32_t function_3fe40(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x3fe40
    g9 = v1;
    g4 = (int32_t)&g286;
    *(int32_t *)(g5 - 32) = v1;
    return g4;
}

// Address range: 0x3fe50 - 0x3fe57
int32_t function_3fe50(void) {
    // 0x3fe50
    return g4;
}

// Address range: 0x3fe6e - 0x3fe76
int32_t function_3fe6e(void) {
    int32_t v1 = g4; // 0x3fe6e
    char * v2 = (char *)(v1 + 10); // 0x3fe6e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3fe71
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3fe77 - 0x3fe7f
int32_t function_3fe77(void) {
    int32_t v1 = g4; // 0x3fe77
    char v2 = *(char *)(v1 + 10); // 0x3fe77
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3fe77
    g4 = result;
    uint32_t v3 = g6; // 0x3fe7a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3fe8b - 0x3fe90
int32_t function_3fe8b(void) {
    // 0x3fe8b
    return g4;
}

// Address range: 0x3fe90 - 0x3fe97
int32_t function_3fe90(void) {
    // 0x3fe90
    return g4;
}

// Address range: 0x3feae - 0x3feb6
int32_t function_3feae(void) {
    int32_t v1 = g4; // 0x3feae
    char * v2 = (char *)(v1 + 10); // 0x3feae
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3feb1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3feb7 - 0x3febf
int32_t function_3feb7(void) {
    int32_t v1 = g4; // 0x3feb7
    char v2 = *(char *)(v1 + 10); // 0x3feb7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3feb7
    g4 = result;
    uint32_t v3 = g6; // 0x3feba
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3fecb - 0x3fed0
int32_t function_3fecb(void) {
    // 0x3fecb
    return g4;
}

// Address range: 0x3fed3 - 0x3fedb
int32_t function_3fed3(void) {
    int32_t v1 = g4; // 0x3fed3
    char * v2 = (char *)(v1 + 10); // 0x3fed3
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x3fed6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x3fedc - 0x3fee4
int32_t function_3fedc(void) {
    int32_t v1 = g4; // 0x3fedc
    char v2 = *(char *)(v1 + 10); // 0x3fedc
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x3fedc
    g4 = result;
    uint32_t v3 = g6; // 0x3fedf
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x3fef7 - 0x3ff06
int32_t function_3fef7(void) {
    unsigned char v1 = g532; // 0x3fef7
    g9 = v1;
    int32_t v2; // ebp
    *(char *)(v2 - 41) = v1;
    return g4;
}

// Address range: 0x3ff10 - 0x3ff32
int32_t function_3ff10(void) {
    // 0x3ff10
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3ff37 - 0x3ff46
int32_t function_3ff37(void) {
    unsigned char v1 = g532; // 0x3ff37
    g7 = v1;
    int32_t v2; // ebp
    *(char *)(v2 - 41) = v1;
    return g4;
}

// Address range: 0x3ff50 - 0x3ff75
int32_t function_3ff50(void) {
    // 0x3ff50
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3ff7a - 0x3ff89
int32_t function_3ff7a(void) {
    // 0x3ff7a
    g7 = (unsigned char)g532;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x3ff90 - 0x3ffb2
int32_t function_3ff90(void) {
    // 0x3ff90
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x3ffb7 - 0x3ffbc
int32_t function_3ffb7(void) {
    // 0x3ffb7
    return g4;
}

// Address range: 0x3ffc0 - 0x40197
int32_t function_3ffc0(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x3ffc3
    int32_t v2 = g10; // 0x3ffc4
    int32_t v3 = g6; // 0x3ffc5
    unsigned char v4 = g532; // 0x3ffc9
    int32_t v5 = v4; // 0x3ffc9
    g4 = v5;
    g6 = a1;
    int32_t v6 = a2 % 0x10000; // 0x3ffd3
    g10 = v6;
    int32_t v7; // 0x3fff1
    int32_t v8; // 0x3ffd9
    if (v4 == 0) {
        // bb
        v8 = function_40210();
        g4 = v8;
        v7 = g10;
    } else {
        v8 = v5;
        v7 = v6;
    }
    // 0x3ffdf
    g7 = (int32_t)&g286;
    int32_t v9; // 0x3fffd
    int32_t v10; // 0x3fff7
    if ((int16_t)v7 != -1) {
        int32_t v11 = v7 & (int32_t)&g863; // 0x3fff1
        g9 = v11;
        v10 = 28 * v11;
        g9 = v10;
        v9 = *(int32_t *)(g6 + 4) + v10;
        g7 = v9;
    } else {
        v9 = (int32_t)&g286;
        v10 = 0x1bffe4;
    }
    int32_t v12 = (int32_t)*(int16_t *)v9; // 0x40001
    g8 = v12;
    int32_t v13; // 0x4000a
    if ((char)v8 == 0) {
        // bb41
        g4 = function_401d0();
        v13 = g8;
    } else {
        v13 = v12;
    }
    int32_t v14 = *(int32_t *)(g6 + 4); // 0x4000e
    g9 = v14;
    int32_t v15; // 0x40017
    int32_t v16; // 0x4002b
    if ((int16_t)v13 == -1) {
        // bb42
        g4 = function_403b0();
        v16 = g9;
        v15 = g8;
    } else {
        v16 = v14;
        v15 = v13;
    }
    int32_t v17 = 28 * (v15 & (int32_t)&g863); // 0x4001a
    g7 = v17;
    int32_t v18 = v17 + v16; // 0x40022
    g4 = v18;
    uint16_t v19 = *(int16_t *)(v18 + 2); // 0x40024
    g4 = v19;
    g7 = v10;
    *(int16_t *)(v16 + v10) = v19;
    if (g532 == 0) {
        // 0x40190
        return g4;
    }
    int32_t v20 = g8; // 0x4003c
    g4 = (int32_t)&g286;
    int32_t v21; // 0x4004a
    if ((int16_t)v20 != -1) {
        // 0x40047
        g4 = v17;
        v21 = *(int32_t *)(g6 + 4) + v17;
        g4 = v21;
    } else {
        v21 = (int32_t)&g286;
    }
    // 0x4004d
    int32_t v22; // 0x40080
    if (*(int16_t *)(v21 + 2) != -1) {
        int32_t v23 = *(int32_t *)(g6 + 4); // 0x40065
        g9 = v23;
        int32_t v24; // 0x40072
        if ((int16_t)v20 != -1) {
            // 0x4006f
            v24 = v23 + v17;
        } else {
            v24 = (int32_t)&g286;
        }
        // 0x40074
        g4 = v24;
        int32_t v25 = 28 * (int32_t)*(int16_t *)(v24 + 2); // 0x40078
        g4 = v25;
        *(int16_t *)(v23 + 4 + v25) = (int16_t)g10;
        v22 = g8;
    } else {
        v22 = v20;
    }
    if ((int16_t)v22 != -1) {
        // 0x40093
        if ((int16_t)g10 == -1) {
            // bb43
            g4 = function_40320();
        }
        int32_t v26 = *(int32_t *)(g6 + 4); // 0x4009d
        g9 = v26;
        int32_t v27 = v26 + v10; // 0x400a6
        g4 = v27;
        uint16_t v28 = *(int16_t *)(v27 + 4); // 0x400a8
        g4 = v28;
        g9 = v26;
        g7 = v17;
        *(int16_t *)(v26 + (v17 | 4)) = v28;
    }
    int32_t v29 = g10; // 0x400b7
    int16_t * v30 = (int16_t *)(g6 + 16); // 0x400b7
    if ((int16_t)v29 == *v30) {
        // 0x40180
        *v30 = (int16_t)g8;
    } else {
        unsigned char v31 = g532; // 0x400c1
        g7 = v31;
        int32_t v32; // 0x400d0
        if (v31 == 0) {
            // bb44
            g4 = function_402f0();
            v32 = g10;
        } else {
            v32 = v29;
        }
        // 0x400d0
        g4 = (int32_t)&g286;
        int32_t v33; // 0x400de
        if ((int16_t)v32 != -1) {
            // 0x400db
            g4 = v10;
            v33 = *(int32_t *)(g6 + 4) + v10;
            g4 = v33;
        } else {
            v33 = (int32_t)&g286;
        }
        int32_t v34 = (int32_t)*(int16_t *)(v33 + 4); // 0x400e3
        g9 = v34;
        int32_t v35; // 0x400f8
        if ((char)g7 == 0) {
            // bb45
            g4 = function_40230();
            v35 = g9;
        } else {
            v35 = v34;
        }
        // 0x400ed
        g4 = (int32_t)&g286;
        int32_t v36; // 0x400fe
        if ((int16_t)v35 != -1) {
            int32_t v37 = 28 * (v35 & (int32_t)&g863); // 0x400fb
            g4 = v37;
            v36 = *(int32_t *)(g6 + 4) + v37;
            g4 = v36;
        } else {
            v36 = (int32_t)&g286;
        }
        int32_t v38 = g10; // 0x40101
        int32_t v39 = g7; // 0x40158
        if ((int16_t)v38 != *(int16_t *)(v36 + 2)) {
            int32_t v40; // 0x40160
            if ((char)v39 == 0) {
                // bb48
                g4 = function_40370();
                v40 = g10;
            } else {
                v40 = v38;
            }
            int32_t v41 = *(int32_t *)(g6 + 4); // 0x40164
            g7 = v41;
            int32_t v42; // 0x40171
            if ((int16_t)v40 != -1) {
                // 0x4016e
                v42 = v41 + v10;
            } else {
                v42 = (int32_t)&g286;
            }
            // 0x40173
            g4 = v42;
            int32_t v43 = 28 * (int32_t)*(int16_t *)(v42 + 4); // 0x40177
            g4 = v43;
            *(int16_t *)(v43 + v41) = (int16_t)g8;
        } else {
            int32_t v44; // 0x4010f
            if ((char)v39 == 0) {
                // bb46
                g4 = function_40330();
                v44 = g10;
            } else {
                v44 = v38;
            }
            int32_t v45 = *(int32_t *)(g6 + 4); // 0x40113
            g7 = v45;
            int32_t v46; // 0x40120
            if ((int16_t)v44 != -1) {
                // 0x4011d
                v46 = v45 + v10;
            } else {
                v46 = (int32_t)&g286;
            }
            // 0x40122
            g4 = v46;
            int32_t v47 = 28 * (int32_t)*(int16_t *)(v46 + 4); // 0x40126
            g4 = v47;
            *(int16_t *)((v47 | 2) + v45) = (int16_t)g8;
        }
    }
    int32_t v48 = *(int32_t *)(g6 + 4); // 0x4012e
    g4 = v48;
    int16_t v49 = g10; // 0x40131
    g7 = v17;
    *(int16_t *)(v48 + (v17 | 2)) = v49;
    if (v49 != -1) {
        int32_t v50 = *(int32_t *)(g6 + 4); // 0x4013f
        g4 = v50;
        g9 = v10;
        *(int16_t *)(v10 + 4 + v50) = (int16_t)g8;
    }
    // 0x4014a
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x401ae - 0x401b6
int32_t function_401ae(void) {
    int32_t v1 = g4; // 0x401ae
    char * v2 = (char *)(v1 + 10); // 0x401ae
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x401b1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x401b7 - 0x401bf
int32_t function_401b7(void) {
    int32_t v1 = g4; // 0x401b7
    char v2 = *(char *)(v1 + 10); // 0x401b7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x401b7
    g4 = result;
    uint32_t v3 = g6; // 0x401ba
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x401cb - 0x401d0
int32_t function_401cb(void) {
    // 0x401cb
    return g4;
}

// Address range: 0x401d0 - 0x401d7
int32_t function_401d0(void) {
    // 0x401d0
    return g4;
}

// Address range: 0x401ee - 0x401f6
int32_t function_401ee(void) {
    int32_t v1 = g4; // 0x401ee
    char * v2 = (char *)(v1 + 10); // 0x401ee
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x401f1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x401f7 - 0x401ff
int32_t function_401f7(void) {
    int32_t v1 = g4; // 0x401f7
    char v2 = *(char *)(v1 + 10); // 0x401f7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x401f7
    g4 = result;
    uint32_t v3 = g6; // 0x401fa
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x4020b - 0x40210
int32_t function_4020b(void) {
    // 0x4020b
    return g4;
}

// Address range: 0x40210 - 0x40217
int32_t function_40210(void) {
    // 0x40210
    return g4;
}

// Address range: 0x4021c - 0x40230
int32_t function_4021c(void) {
    // 0x4021c
    if (g4 != 0) {
        // bb
        g4 = function_403c8();
    }
    int32_t result = g532; // 0x40224
    g4 = result;
    return result;
}

// Address range: 0x40230 - 0x4023a
int32_t function_40230(void) {
    // 0x40230
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x4023e - 0x40265
int32_t function_4023e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x4023e
    int32_t v2 = *v1 - 1; // 0x4023e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_403f8();
    }
    // 0x4024a
    g7 = g532;
    g4 = (int32_t)&g286;
    return (int32_t)&g286;
}

// Address range: 0x40268 - 0x4026f
int32_t function_40268(void) {
    // 0x40268
    return g4;
}

// Address range: 0x40286 - 0x4028e
int32_t function_40286(void) {
    int32_t v1 = g4; // 0x40286
    char * v2 = (char *)(v1 + 10); // 0x40286
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40289
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x4028f - 0x40297
int32_t function_4028f(void) {
    int32_t v1 = g4; // 0x4028f
    char v2 = *(char *)(v1 + 10); // 0x4028f
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x4028f
    g4 = result;
    uint32_t v3 = g6; // 0x40292
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x402a3 - 0x402a8
int32_t function_402a3(void) {
    // 0x402a3
    return g4;
}

// Address range: 0x402b0 - 0x402b7
int32_t function_402b0(void) {
    // 0x402b0
    return g4;
}

// Address range: 0x402ce - 0x402d6
int32_t function_402ce(void) {
    int32_t v1 = g4; // 0x402ce
    char * v2 = (char *)(v1 + 10); // 0x402ce
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x402d1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x402d7 - 0x402df
int32_t function_402d7(void) {
    int32_t v1 = g4; // 0x402d7
    char v2 = *(char *)(v1 + 10); // 0x402d7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x402d7
    g4 = result;
    uint32_t v3 = g6; // 0x402da
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x402eb - 0x402f0
int32_t function_402eb(void) {
    // 0x402eb
    return g4;
}

// Address range: 0x402f0 - 0x402f7
int32_t function_402f0(void) {
    // 0x402f0
    return g4;
}

// Address range: 0x402fc - 0x4031f
int32_t function_402fc(void) {
    // 0x402fc
    if (g4 != 0) {
        // bb
        g4 = function_40438();
    }
    // 0x40304
    g7 = g532;
    g4 = (int32_t)&g286;
    return (int32_t)&g286;
}

// Address range: 0x40320 - 0x40330
int32_t function_40320(void) {
    // 0x40320
    *(int32_t *)(g5 - 28) = *(int32_t *)(g6 + 4);
    g4 = (int32_t)&g286;
    return (int32_t)&g286;
}

// Address range: 0x40330 - 0x40337
int32_t function_40330(void) {
    // 0x40330
    return g4;
}

// Address range: 0x4033d - 0x40341
int32_t function_4033d(int32_t a1) {
    unsigned char v1 = *(char *)&g8; // 0x4033d
    *(char *)g8 = v1 / 16 | 16 * v1;
    return g4;
}

// Address range: 0x4034e - 0x40356
int32_t function_4034e(void) {
    int32_t v1 = g4; // 0x4034e
    char * v2 = (char *)(v1 + 10); // 0x4034e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40351
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x40357 - 0x4035f
int32_t function_40357(void) {
    int32_t v1 = g4; // 0x40357
    char v2 = *(char *)(v1 + 10); // 0x40357
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x40357
    g4 = result;
    uint32_t v3 = g6; // 0x4035a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x4036b - 0x40370
int32_t function_4036b(void) {
    // 0x4036b
    return g4;
}

// Address range: 0x40370 - 0x40377
int32_t function_40370(void) {
    // 0x40370
    return g4;
}

// Address range: 0x4038e - 0x40396
int32_t function_4038e(void) {
    int32_t v1 = g4; // 0x4038e
    char * v2 = (char *)(v1 + 10); // 0x4038e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40391
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x40397 - 0x4039f
int32_t function_40397(void) {
    int32_t v1 = g4; // 0x40397
    char v2 = *(char *)(v1 + 10); // 0x40397
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x40397
    g4 = result;
    uint32_t v3 = g6; // 0x4039a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x403ab - 0x403b0
int32_t function_403ab(void) {
    // 0x403ab
    return g4;
}

// Address range: 0x403b0 - 0x403c1
int32_t function_403b0(void) {
    // 0x403b0
    *(int32_t *)(g5 - 52) = 0x1bffe4;
    g4 = (int32_t)&g286;
    return (int32_t)&g286;
}

// Address range: 0x403c8 - 0x403ea
int32_t function_403c8(void) {
    // 0x403c8
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x403ef - 0x403f4
int32_t function_403ef(void) {
    // 0x403ef
    return g4;
}

// Address range: 0x403f8 - 0x4041d
int32_t function_403f8(void) {
    // 0x403f8
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x40422 - 0x40431
int32_t function_40422(void) {
    // 0x40422
    g7 = (unsigned char)g532;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x40438 - 0x4045a
int32_t function_40438(void) {
    // 0x40438
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4045f - 0x40464
int32_t function_4045f(void) {
    // 0x4045f
    return g4;
}

// Address range: 0x40470 - 0x406a7
int32_t function_40470(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x40473
    int32_t v2 = g10; // 0x40474
    int32_t v3 = g6; // 0x40475
    g6 = a1;
    int32_t v4 = a2 % 0x10000; // 0x4047c
    g10 = v4;
    uint16_t v5 = *(int16_t *)(a1 + 16); // 0x40480
    g4 = v5;
    g10 = v4;
    int32_t v6; // 0x40688
    int32_t v7; // 0x4068e
    if ((int16_t)a2 != v5) {
        // 0x40491
        int32_t v8; // 0x404a9
        if (g532 == 0) {
            // bb
            g4 = function_40a20();
            v8 = g10;
        } else {
            v8 = v4;
        }
        // 0x4049e
        g4 = (int32_t)&g286;
        int32_t v9; // 0x404af
        if ((int16_t)v8 != -1) {
            int32_t v10 = 28 * (v8 & (int32_t)&g863); // 0x404ac
            g4 = v10;
            v9 = *(int32_t *)(g6 + 4) + v10;
            g4 = v9;
        } else {
            v9 = (int32_t)&g286;
        }
        // 0x404b2
        if (*(int16_t *)(v9 + 6) != 1) {
            // 0x404b2
            v7 = g6;
            v6 = v8;
        } else {
            unsigned char v11 = g532; // 0x404bd
            int32_t v12 = v11; // 0x404bd
            g4 = v12;
            int32_t v13; // 0x40504
            int32_t result; // 0x404c6
            if (v11 == 0) {
                // bb61
                result = function_406c0();
                g4 = result;
                v13 = g10;
            } else {
                result = v12;
                v13 = v8;
            }
            int16_t v14 = v13; // 0x404cc
            g9 = (int32_t)&g286;
            int32_t v15; // 0x404dd
            if (v14 != -1) {
                int32_t v16 = 28 * (v13 & (int32_t)&g863); // 0x404da
                g9 = v16;
                v15 = *(int32_t *)(g6 + 4) + v16;
                g9 = v15;
            } else {
                v15 = (int32_t)&g286;
            }
            uint16_t v17 = *(int16_t *)(v15 + 4); // 0x404e0
            int32_t v18 = v17; // 0x404e0
            g8 = v18;
            int32_t v19 = v18 & (int32_t)&g863; // 0x404e6
            g9 = v19;
            if ((char)result == 0) {
                // 0x406a0
                return result;
            }
            // 0x404f2
            g9 = (int32_t)&g286;
            int32_t v20; // 0x40501
            if (v17 != -1) {
                int32_t v21 = 28 * v19; // 0x404fd
                g9 = v21;
                v20 = *(int32_t *)(g6 + 4) + v21;
                g9 = v20;
            } else {
                v20 = (int32_t)&g286;
            }
            // 0x40504
            int32_t v22; // 0x40507
            if (v14 == *(int16_t *)v20) {
                // bb63
                v22 = function_406e0();
                g4 = v22;
            } else {
                v22 = result;
            }
            int32_t v23; // 0x4050f
            if ((char)v22 == 0) {
                // bb64
                v23 = function_409b0();
                g4 = v23;
            } else {
                v23 = v22;
            }
            // 0x40515
            g9 = (int32_t)&g286;
            int32_t v24; // 0x40524
            if ((int16_t)g8 != -1) {
                int32_t v25 = 28 * v19; // 0x40520
                g9 = v25;
                v24 = *(int32_t *)(g6 + 4) + v25;
                g9 = v24;
            } else {
                v24 = (int32_t)&g286;
            }
            int32_t v26 = (int32_t)*(int16_t *)v24; // 0x40529
            g9 = v26;
            int32_t v27; // 0x4053d
            if ((char)v23 == 0) {
                // bb66
                g4 = function_409d0();
                v27 = g9;
            } else {
                v27 = v26;
            }
            // 0x40532
            g4 = (int32_t)&g286;
            int32_t v28; // 0x40543
            if ((int16_t)v27 != -1) {
                int32_t v29 = 28 * (v27 & (int32_t)&g863); // 0x40540
                g4 = v29;
                v28 = *(int32_t *)(g6 + 4) + v29;
                g4 = v28;
            } else {
                v28 = (int32_t)&g286;
            }
            // 0x40546
            if (*(int16_t *)(v28 + 6) == 0) {
                // bb67
                g4 = function_40930();
            }
            unsigned char v30 = g532; // 0x40551
            int32_t v31 = v30; // 0x40551
            g4 = v31;
            int32_t v32; // 0x4055a
            if (v30 == 0) {
                // bb68
                v32 = function_40900();
                g4 = v32;
            } else {
                v32 = v31;
            }
            int32_t v33 = g9; // 0x40560
            g7 = (int32_t)&g286;
            int32_t v34; // 0x40571
            if ((int16_t)v33 != -1) {
                int32_t v35 = 28 * (v33 & (int32_t)&g863); // 0x4056e
                g7 = v35;
                v34 = *(int32_t *)(g6 + 4) + v35;
                g7 = v34;
            } else {
                v34 = (int32_t)&g286;
            }
            uint16_t v36 = *(int16_t *)(v34 + 2); // 0x40574
            int32_t v37 = v36; // 0x40574
            g7 = v37;
            int32_t v38; // 0x4057e
            if ((char)v32 == 0) {
                // bb69
                v38 = function_408d0();
                g4 = v38;
            } else {
                v38 = v32;
            }
            // 0x40584
            g7 = (int32_t)&g286;
            int32_t v39; // 0x40597
            if (v36 != -1) {
                int32_t v40 = 28 * v37; // 0x40594
                g7 = v40;
                v39 = *(int32_t *)(g6 + 4) + v40;
                g7 = v39;
            } else {
                v39 = (int32_t)&g286;
            }
            // 0x4059a
            int32_t v41; // 0x4059f
            if (*(int16_t *)(v39 + 6) == 1) {
                // bb72
                v41 = function_40850();
                g4 = v41;
            } else {
                v41 = v38;
            }
            int32_t v42; // 0x405a7
            if ((char)v41 == 0) {
                // bb73
                v42 = function_408a8();
                g4 = v42;
            } else {
                v42 = v41;
            }
            int32_t v43 = g9; // 0x405ad
            g7 = (int32_t)&g286;
            int32_t v44;
            int32_t v45; // 0x405c8
            if ((int16_t)v43 != -1) {
                int32_t v46 = v43 & (int32_t)&g863; // 0x405bf
                int32_t v47 = 28 * v46; // 0x405c2
                g7 = v47;
                v45 = *(int32_t *)(g6 + 4) + v47;
                g7 = v45;
                v44 = 0x1c0000 * v46 / 0x10000;
            } else {
                v45 = (int32_t)&g286;
                v44 = -28;
            }
            uint16_t v48 = *(int16_t *)v45; // 0x405cb
            int32_t v49 = v48; // 0x405cb
            g7 = v49;
            int32_t v50; // 0x405d4
            if ((char)v42 == 0) {
                // bb74
                v50 = function_40d10();
                g4 = v50;
            } else {
                v50 = v42;
            }
            // 0x405da
            g7 = (int32_t)&g286;
            int32_t v51; // 0x405ed
            if (v48 != -1) {
                int32_t v52 = 28 * v49; // 0x405ea
                g7 = v52;
                v51 = *(int32_t *)(g6 + 4) + v52;
                g7 = v51;
            } else {
                v51 = (int32_t)&g286;
            }
            // 0x405f0
            int32_t v53; // 0x405f5
            if (*(int16_t *)(v51 + 6) == 1) {
                // bb77
                v53 = function_40ec8();
                g4 = v53;
            } else {
                v53 = v50;
            }
            int32_t v54 = g8; // 0x405fb
            int32_t v55 = v54 & (int32_t)&g863; // 0x405fb
            g7 = v55;
            int32_t v56 = 28 * v55; // 0x405fe
            g10 = v56;
            int32_t v57; // 0x4060f
            int32_t v58; // 0x40609
            if ((char)v53 == 0) {
                // bb78
                v58 = function_40e88();
                g4 = v58;
                v57 = g8;
            } else {
                v58 = v53;
                v57 = v54;
            }
            int32_t v59; // 0x40613
            if ((int16_t)v57 == -1) {
                // bb79
                v59 = function_40eb3();
                g4 = v59;
            } else {
                v59 = v58;
            }
            int32_t v60 = *(int32_t *)(g6 + 4); // 0x40619
            int32_t v61 = v60 + v56; // 0x4061f
            g8 = v61;
            g10 = v60;
            g7 = v44;
            *(int16_t *)(v44 + 6 + v60) = *(int16_t *)(v61 + 6);
            g8 = v56;
            int32_t v62 = *(int32_t *)(g6 + 4); // 0x40636
            g10 = v62;
            *(int16_t *)(v62 + (v56 | 6)) = 1;
            if ((char)v59 == 0) {
                // bb80
                g4 = function_40d40();
            }
            int32_t v63 = *(int32_t *)(g6 + 4); // 0x4064a
            g4 = v63;
            int32_t v64; // 0x4064d
            if ((int16_t)g9 == -1) {
                // bb81
                v64 = function_40d98();
                g4 = v64;
            } else {
                v64 = v63;
            }
            int32_t v65 = v64 + v44; // 0x40656
            g9 = v65;
            *(int16_t *)(v64 + 6 + 28 * (int32_t)*(int16_t *)v65) = 1;
            g9 = v55;
            g4 = function_3ffc0(0x1000000 * g6 / 0x1000000, v55);
            int32_t v66 = g6; // 0x40674
            int32_t v67 = (int32_t)*(int16_t *)(v66 + 16); // 0x40674
            g10 = v67;
            g4 = v67;
            v7 = v66;
            v6 = v67;
        }
    } else {
        v7 = a1;
        v6 = v4;
    }
    int32_t v68 = 28 * (v6 & (int32_t)&g863); // 0x4068b
    g10 = v68;
    *(int16_t *)((v68 | 6) + *(int32_t *)(v7 + 4)) = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x406ac - 0x406c0
int32_t function_406ac(void) {
    // 0x406ac
    if (g4 != 0) {
        // bb
        g4 = function_40ab0();
    }
    int32_t result = g532; // 0x406b4
    g4 = result;
    return result;
}

// Address range: 0x406c0 - 0x406c7
int32_t function_406c0(void) {
    // 0x406c0
    return g4;
}

// Address range: 0x406cc - 0x406e0
int32_t function_406cc(void) {
    // 0x406cc
    if (g4 != 0) {
        // bb
        g4 = function_40a80();
    }
    int32_t result = g532; // 0x406d4
    g4 = result;
    return result;
}

// Address range: 0x406e0 - 0x4084d
int32_t function_406e0(void) {
    int32_t v1 = g4; // 0x406e0
    int32_t v2; // 0x406e2
    if ((char)v1 == 0) {
        // bb
        v2 = function_40b20();
        g4 = v2;
    } else {
        v2 = v1;
    }
    // 0x406e8
    g9 = (int32_t)&g286;
    int32_t v3; // 0x406f7
    if ((int16_t)g8 != -1) {
        int32_t v4 = 28 * *(int32_t *)(g5 - 56); // 0x406f3
        g9 = v4;
        v3 = *(int32_t *)(g6 + 4) + v4;
        g9 = v3;
    } else {
        v3 = (int32_t)&g286;
    }
    uint16_t v5 = *(int16_t *)(v3 + 2); // 0x406fa
    g9 = v5;
    *(int16_t *)(g5 - 50) = v5;
    if ((char)v2 == 0) {
        // bb23
        g4 = function_40ae0();
    }
    int16_t * v6 = (int16_t *)(g5 - 50); // 0x4070a
    g4 = (int32_t)&g286;
    int32_t v7; // 0x4071d
    if (*v6 != -1) {
        int32_t v8 = 28 * (int32_t)*v6; // 0x4071a
        g4 = v8;
        v7 = *(int32_t *)(g6 + 4) + v8;
        g4 = v7;
    } else {
        v7 = (int32_t)&g286;
    }
    // 0x40720
    if (*(int16_t *)(v7 + 6) == 0) {
        // bb25
        g4 = function_40c00();
    }
    unsigned char v9 = g532; // 0x4072b
    int32_t v10 = v9; // 0x4072b
    g4 = v10;
    int32_t v11; // 0x40734
    if (v9 == 0) {
        // bb26
        v11 = function_40be0();
        g4 = v11;
    } else {
        v11 = v10;
    }
    int16_t * v12 = (int16_t *)(g5 - 50); // 0x4073a
    g7 = (int32_t)&g286;
    int32_t v13; // 0x4074d
    if (*v12 != -1) {
        int32_t v14 = 28 * (int32_t)*v12; // 0x4074a
        g7 = v14;
        v13 = *(int32_t *)(g6 + 4) + v14;
        g7 = v13;
    } else {
        v13 = (int32_t)&g286;
    }
    int32_t v15 = (int32_t)*(int16_t *)v13; // 0x40752
    g9 = v15;
    int32_t v16; // 0x40766
    int32_t v17; // 0x40755
    if ((char)v11 == 0) {
        // bb28
        v17 = function_40bb0();
        g4 = v17;
        v16 = g9;
    } else {
        v17 = v11;
        v16 = v15;
    }
    // 0x4075b
    g7 = (int32_t)&g286;
    int32_t v18; // 0x4076c
    if ((int16_t)v16 != -1) {
        int32_t v19 = 28 * (v16 & (int32_t)&g863); // 0x40769
        g7 = v19;
        v18 = *(int32_t *)(g6 + 4) + v19;
        g7 = v18;
    } else {
        v18 = (int32_t)&g286;
    }
    // 0x4076f
    int32_t v20; // 0x40774
    if (*(int16_t *)(v18 + 6) == 1) {
        // bb30
        v20 = function_40b40();
        g4 = v20;
    } else {
        v20 = v17;
    }
    if ((char)v20 == 0) {
        // bb31
        g4 = function_40f80();
    }
    // 0x40782
    *(int32_t *)(g5 - 28) = 0x1bffe4;
    g7 = (int32_t)&g286;
    int32_t v21; // 0x4079f
    if (*(int16_t *)(g5 - 50) != -1) {
        int32_t v22 = 28 * (int32_t)*(int16_t *)(g5 - 50); // 0x40799
        g7 = v22;
        *(int32_t *)(g5 - 28) = v22;
        v21 = *(int32_t *)(g6 + 4) + g7;
        g7 = v21;
    } else {
        v21 = (int32_t)&g286;
    }
    int32_t v23 = (int32_t)*(int16_t *)(v21 + 2); // 0x407a4
    g9 = v23;
    int32_t v24; // 0x407b9
    if ((char)g4 == 0) {
        // bb32
        g4 = function_41088();
        v24 = g9;
    } else {
        v24 = v23;
    }
    // 0x407ae
    g7 = (int32_t)&g286;
    int32_t v25; // 0x407bf
    if ((int16_t)v24 != -1) {
        int32_t v26 = 28 * (v24 & (int32_t)&g863); // 0x407bc
        g7 = v26;
        v25 = *(int32_t *)(g6 + 4) + v26;
        g7 = v25;
    } else {
        v25 = (int32_t)&g286;
    }
    // 0x407c2
    if (*(int16_t *)(v25 + 6) == 1) {
        // bb34
        g4 = function_40fe0();
    }
    int32_t v27 = g8 & (int32_t)&g863; // 0x407cd
    g10 = v27;
    g7 = 28 * v27;
    *(int32_t *)(g5 - 56) = v27;
    if ((char)g4 == 0) {
        // bb35
        g4 = function_40fa0();
    }
    // 0x407de
    if ((int16_t)g8 == -1) {
        // bb36
        g4 = function_40fcb();
    }
    int32_t v28 = *(int32_t *)(g6 + 4); // 0x407e8
    g8 = v28;
    *(int32_t *)(g5 - 48) = v28;
    int32_t v29 = g7 + g8; // 0x407ee
    g8 = v29;
    uint16_t v30 = *(int16_t *)(v29 + 6); // 0x407f0
    g8 = v30;
    int32_t v31 = *(int32_t *)(g5 - 48); // 0x407f6
    g10 = v31;
    int32_t v32 = *(int32_t *)(g5 - 28); // 0x407f9
    g9 = v32;
    *(int16_t *)(v31 + 6 + v32) = v30;
    int32_t v33 = *(int32_t *)(g6 + 4); // 0x40801
    g10 = v33;
    *(int16_t *)(v33 + 6 + g7) = 1;
    if ((char)g4 == 0) {
        // bb37
        g4 = function_410e0();
    }
    // 0x40811
    g9 = (int32_t)&g286;
    int32_t v34 = *(int32_t *)(g6 + 4); // 0x4081b
    g4 = v34;
    int32_t v35; // 0x40823
    if (*(int16_t *)(g5 - 50) != -1) {
        // 0x40820
        v35 = *(int32_t *)(g5 - 28) + v34;
        g9 = v35;
    } else {
        v35 = (int32_t)&g286;
    }
    int32_t v36 = (int32_t)*(int16_t *)(v35 + 2); // 0x40825
    g9 = v36;
    g8 = *(int32_t *)(g5 - 56);
    int32_t v37 = 28 * v36; // 0x4082c
    g9 = v37;
    *(int16_t *)(v34 + 6 + v37) = 1;
    g4 = function_3fae0(g6, g8);
    int32_t result = (int32_t)*(int16_t *)(g6 + 16); // 0x40842
    g10 = result;
    g4 = result;
    return result;
}

// Address range: 0x40850 - 0x408a8
int32_t function_40850(void) {
    int32_t v1 = g4; // 0x40850
    int32_t v2; // 0x40852
    if ((char)v1 == 0) {
        // bb
        v2 = function_40de8();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3 = g9; // 0x40858
    g7 = (int32_t)&g286;
    int32_t v4; // 0x40869
    if ((int16_t)v3 != -1) {
        int32_t v5 = 28 * (v3 & (int32_t)&g863); // 0x40866
        g7 = v5;
        v4 = *(int32_t *)(g6 + 4) + v5;
        g7 = v4;
    } else {
        v4 = (int32_t)&g286;
    }
    int32_t v6 = (int32_t)*(int16_t *)v4; // 0x4086e
    g7 = v6;
    int32_t v7; // 0x40882
    if ((char)v2 == 0) {
        // bb7
        g4 = function_40e30();
        v7 = g7;
    } else {
        v7 = v6;
    }
    // 0x40877
    g4 = (int32_t)&g286;
    int32_t v8; // 0x40888
    if ((int16_t)v7 != -1) {
        int32_t v9 = v7 & (int32_t)&g863; // 0x40882
        g7 = v9;
        int32_t v10 = 28 * v9; // 0x40885
        g4 = v10;
        v8 = *(int32_t *)(g6 + 4) + v10;
        g4 = v8;
    } else {
        v8 = (int32_t)&g286;
    }
    // 0x4088b
    if (*(int16_t *)(v8 + 6) == 1) {
        // bb8
        g4 = function_40a60();
    }
    int32_t result = g532; // 0x40896
    g4 = result;
    return result;
}

// Address range: 0x408a8 - 0x408b2
int32_t function_408a8(void) {
    // 0x408a8
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x408b6 - 0x408ce
int32_t function_408b6(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x408b6
    int32_t v2 = *v1 - 1; // 0x408b6
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_41240();
    }
    int32_t result = g532; // 0x408c2
    g4 = result;
    return result;
}

// Address range: 0x408d0 - 0x408da
int32_t function_408d0(void) {
    // 0x408d0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x408de - 0x408f6
int32_t function_408de(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x408de
    int32_t v2 = *v1 - 1; // 0x408de
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_40da8();
    }
    int32_t result = g532; // 0x408ea
    g4 = result;
    return result;
}

// Address range: 0x40900 - 0x4090a
int32_t function_40900(void) {
    // 0x40900
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x4090e - 0x40926
int32_t function_4090e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x4090e
    int32_t v2 = *v1 - 1; // 0x4090e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_40c80();
    }
    int32_t result = g532; // 0x4091a
    g4 = result;
    return result;
}

// Address range: 0x40930 - 0x409a6
int32_t function_40930(void) {
    // 0x40930
    g4 = 28 * *(int32_t *)(g5 - 56);
    int32_t v1 = 28 * (g9 & (int32_t)&g863); // 0x40937
    g9 = v1;
    int32_t v2 = *(int32_t *)(g6 + 4) + v1; // 0x4093a
    g9 = v2;
    *(int16_t *)(v2 + 6) = 1;
    g9 = *(int32_t *)(g5 - 56);
    int32_t v3 = *(int32_t *)(g6 + 4) + g4; // 0x40946
    g4 = v3;
    *(int16_t *)(v3 + 6) = 0;
    function_3ffc0(g6, g9);
    unsigned char v4 = g532; // 0x4095b
    int32_t v5 = v4; // 0x4095b
    g4 = v5;
    int32_t v6; // 0x40964
    if (v4 == 0) {
        // bb
        v6 = function_40e10();
        g4 = v6;
    } else {
        v6 = v5;
    }
    int32_t v7 = g10; // 0x4096a
    g9 = (int32_t)&g286;
    int32_t v8; // 0x4097b
    if ((int16_t)v7 != -1) {
        int32_t v9 = 28 * (v7 & (int32_t)&g863); // 0x40978
        g9 = v9;
        v8 = *(int32_t *)(g6 + 4) + v9;
        g9 = v8;
    } else {
        v8 = (int32_t)&g286;
    }
    int32_t v10 = (int32_t)*(int16_t *)(v8 + 4); // 0x40980
    g8 = v10;
    int32_t v11; // 0x40995
    int32_t result; // 0x40984
    if ((char)v6 == 0) {
        // bb8
        result = function_40cf0();
        g4 = result;
        v11 = g8;
    } else {
        result = v6;
        v11 = v10;
    }
    // 0x4098a
    g9 = (int32_t)&g286;
    int32_t v12; // 0x4099b
    if ((int16_t)v11 != -1) {
        int32_t v13 = 28 * (v11 & (int32_t)&g863); // 0x40998
        g9 = v13;
        v12 = *(int32_t *)(g6 + 4) + v13;
        g9 = v12;
    } else {
        v12 = (int32_t)&g286;
    }
    // 0x4099e
    g9 = (int32_t)*(int16_t *)v12;
    return result;
}

// Address range: 0x409b0 - 0x409b7
int32_t function_409b0(void) {
    // 0x409b0
    return g4;
}

// Address range: 0x409bc - 0x409d0
int32_t function_409bc(void) {
    // 0x409bc
    if (g4 != 0) {
        // bb
        g4 = function_40cc0();
    }
    int32_t result = g532; // 0x409c4
    g4 = result;
    return result;
}

// Address range: 0x409d0 - 0x409da
int32_t function_409d0(void) {
    // 0x409d0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x409e9 - 0x409ec
int32_t function_409e9(void) {
    // 0x409e9
    return g4;
}

// Address range: 0x409ed - 0x409f5
int32_t function_409ed(void) {
    int32_t v1 = g4; // 0x409ed
    char * v2 = (char *)(v1 + 10); // 0x409ed
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x409f0
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x409f6 - 0x409fe
int32_t function_409f6(void) {
    int32_t v1 = g4; // 0x409f6
    char v2 = *(char *)(v1 + 10); // 0x409f6
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x409f6
    g4 = result;
    uint32_t v3 = g6; // 0x409f9
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x40a11 - 0x40a19
int32_t function_40a11(void) {
    // 0x40a11
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x40a20 - 0x40a27
int32_t function_40a20(void) {
    // 0x40a20
    return g4;
}

// Address range: 0x40a3e - 0x40a46
int32_t function_40a3e(void) {
    int32_t v1 = g4; // 0x40a3e
    char * v2 = (char *)(v1 + 10); // 0x40a3e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40a41
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x40a47 - 0x40a4f
int32_t function_40a47(void) {
    int32_t v1 = g4; // 0x40a47
    char v2 = *(char *)(v1 + 10); // 0x40a47
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x40a47
    g4 = result;
    uint32_t v3 = g6; // 0x40a4a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x40a5b - 0x40a60
int32_t function_40a5b(void) {
    // 0x40a5b
    return g4;
}

// Address range: 0x40a60 - 0x40a80
int32_t function_40a60(void) {
    int32_t v1 = g9; // 0x40a60
    if ((int16_t)v1 != -1) {
        int32_t v2 = 28 * (v1 & (int32_t)&g863); // 0x40a69
        g9 = v2;
        int32_t v3 = *(int32_t *)(g6 + 4) + v2; // 0x40a6c
        g9 = v3;
        *(int16_t *)(v3 + 6) = 0;
    }
    int32_t result = (int32_t)*(int16_t *)(g6 + 16); // 0x40a75
    g4 = result;
    g10 = g8;
    return result;
}

// Address range: 0x40a80 - 0x40aa2
int32_t function_40a80(void) {
    // 0x40a80
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x40aa7 - 0x40aac
int32_t function_40aa7(void) {
    // 0x40aa7
    return g4;
}

// Address range: 0x40ab0 - 0x40ad2
int32_t function_40ab0(void) {
    // 0x40ab0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x40ad7 - 0x40adc
int32_t function_40ad7(void) {
    // 0x40ad7
    return g4;
}

// Address range: 0x40ae0 - 0x40ae7
int32_t function_40ae0(void) {
    // 0x40ae0
    return g4;
}

// Address range: 0x40afe - 0x40b06
int32_t function_40afe(void) {
    int32_t v1 = g4; // 0x40afe
    char * v2 = (char *)(v1 + 10); // 0x40afe
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40b01
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x40b07 - 0x40b0f
int32_t function_40b07(void) {
    int32_t v1 = g4; // 0x40b07
    char v2 = *(char *)(v1 + 10); // 0x40b07
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x40b07
    g4 = result;
    uint32_t v3 = g6; // 0x40b0a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x40b1b - 0x40b20
int32_t function_40b1b(void) {
    // 0x40b1b
    return g4;
}

// Address range: 0x40b20 - 0x40b27
int32_t function_40b20(void) {
    // 0x40b20
    return g4;
}

// Address range: 0x40b2b - 0x40b40
int32_t function_40b2b(void) {
    // 0x40b2b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x7c850fc0); // 0x40b2b
    *v2 = *v2 + 1;
    int32_t result = g4 + (int32_t)&g532 - 0x49f10000; // 0x40b36
    g4 = result;
    return result;
}

// Address range: 0x40b40 - 0x40baf
int32_t function_40b40(void) {
    int32_t v1 = g4; // 0x40b40
    int32_t v2; // 0x40b42
    if ((char)v1 == 0) {
        // bb
        v2 = function_41170();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int16_t * v3 = (int16_t *)(g5 - 50); // 0x40b48
    g7 = (int32_t)&g286;
    int32_t v4; // 0x40b5b
    if (*v3 != -1) {
        int32_t v5 = 28 * (int32_t)*v3; // 0x40b58
        g7 = v5;
        v4 = *(int32_t *)(g6 + 4) + v5;
        g7 = v4;
    } else {
        v4 = (int32_t)&g286;
    }
    int32_t v6 = (int32_t)*(int16_t *)(v4 + 2); // 0x40b60
    g7 = v6;
    int32_t v7; // 0x40b75
    if ((char)v2 == 0) {
        // bb7
        g4 = function_41120();
        v7 = g7;
    } else {
        v7 = v6;
    }
    // 0x40b6a
    g4 = (int32_t)&g286;
    int32_t v8; // 0x40b7b
    if ((int16_t)v7 != -1) {
        int32_t v9 = 28 * (v7 & (int32_t)&g863); // 0x40b78
        g4 = v9;
        v8 = *(int32_t *)(g6 + 4) + v9;
        g4 = v8;
    } else {
        v8 = (int32_t)&g286;
    }
    // 0x40b7e
    if (*(int16_t *)(v8 + 6) != 1) {
        // bb9
        g4 = function_40f70();
    }
    // 0x40b89
    g10 = g8;
    int32_t v10 = 28 * (int32_t)*(int16_t *)(g5 - 50); // 0x40b9a
    g9 = v10;
    int32_t v11 = *(int32_t *)(g6 + 4) + v10; // 0x40b9d
    g9 = v11;
    *(int16_t *)(v11 + 6) = 0;
    int32_t result = (int32_t)*(int16_t *)(g6 + 16); // 0x40ba6
    g4 = result;
    return result;
}

// Address range: 0x40bb0 - 0x40bba
int32_t function_40bb0(void) {
    // 0x40bb0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x40bbe - 0x40bd6
int32_t function_40bbe(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x40bbe
    int32_t v2 = *v1 - 1; // 0x40bbe
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_41200();
    }
    int32_t result = g532; // 0x40bca
    g4 = result;
    return result;
}

// Address range: 0x40be0 - 0x40be7
int32_t function_40be0(void) {
    // 0x40be0
    return g4;
}

// Address range: 0x40beb - 0x40c00
int32_t function_40beb(void) {
    // 0x40beb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x237af040); // 0x40beb
    *v2 = *v2 + 1;
    int32_t result = g4 + (int32_t)&g532 - 0x49f10000; // 0x40bf6
    g4 = result;
    return result;
}

// Address range: 0x40c00 - 0x40c7c
int32_t function_40c00(void) {
    int32_t v1 = (int32_t)*(int16_t *)(g5 - 50); // 0x40c00
    g9 = v1;
    int32_t * v2 = (int32_t *)(g5 - 56); // 0x40c04
    g4 = 28 * *v2;
    g7 = *v2;
    int32_t v3 = 28 * v1; // 0x40c0b
    g9 = v3;
    int32_t v4 = *(int32_t *)(g6 + 4) + v3; // 0x40c0e
    g9 = v4;
    *(int16_t *)(v4 + 6) = 1;
    int32_t v5 = *(int32_t *)(g6 + 4) + g4; // 0x40c17
    g4 = v5;
    *(int16_t *)(v5 + 6) = 0;
    function_3fae0(g6, g7);
    unsigned char v6 = g532; // 0x40c2c
    int32_t v7 = v6; // 0x40c2c
    g4 = v7;
    int32_t v8; // 0x40c35
    if (v6 == 0) {
        // bb
        v8 = function_411b0();
        g4 = v8;
    } else {
        v8 = v7;
    }
    int32_t v9 = g10; // 0x40c3b
    g9 = (int32_t)&g286;
    int32_t v10; // 0x40c4c
    if ((int16_t)v9 != -1) {
        int32_t v11 = 28 * (v9 & (int32_t)&g863); // 0x40c49
        g9 = v11;
        v10 = *(int32_t *)(g6 + 4) + v11;
        g9 = v10;
    } else {
        v10 = (int32_t)&g286;
    }
    int32_t v12 = (int32_t)*(int16_t *)(v10 + 4); // 0x40c51
    g8 = v12;
    int32_t v13; // 0x40c66
    if ((char)v8 == 0) {
        // bb7
        g4 = function_41190();
        v13 = g8;
    } else {
        v13 = v12;
    }
    // 0x40c5b
    g9 = (int32_t)&g286;
    int32_t v14; // 0x40c6c
    if ((int16_t)v13 != -1) {
        int32_t v15 = 28 * (v13 & (int32_t)&g863); // 0x40c69
        g9 = v15;
        v14 = *(int32_t *)(g6 + 4) + v15;
        g9 = v14;
    } else {
        v14 = (int32_t)&g286;
    }
    uint16_t v16 = *(int16_t *)(v14 + 2); // 0x40c6f
    g9 = v16;
    *(int16_t *)(g5 - 50) = v16;
    return g4;
}

// Address range: 0x40c80 - 0x40ca5
int32_t function_40c80(void) {
    // 0x40c80
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x40caa - 0x40cb9
int32_t function_40caa(void) {
    int32_t result = (unsigned char)g532; // 0x40caa
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x40cc0 - 0x40ce2
int32_t function_40cc0(void) {
    // 0x40cc0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x40ce7 - 0x40cec
int32_t function_40ce7(void) {
    // 0x40ce7
    return g4;
}

// Address range: 0x40cf0 - 0x40cf7
int32_t function_40cf0(void) {
    // 0x40cf0
    return g4;
}

// Address range: 0x40cfb - 0x40d10
int32_t function_40cfb(void) {
    // 0x40cfb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x5c850fc0); // 0x40cfb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x40d02
    *(char *)v3 = (char)v3 + *(char *)&g4;
    int32_t result = g532; // 0x40d04
    g4 = result;
    return result;
}

// Address range: 0x40d10 - 0x40d1a
int32_t function_40d10(void) {
    // 0x40d10
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x40d1e - 0x40d36
int32_t function_40d1e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x40d1e
    int32_t v2 = *v1 - 1; // 0x40d1e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_41398();
    }
    int32_t result = g532; // 0x40d2a
    g4 = result;
    return result;
}

// Address range: 0x40d40 - 0x40d4a
int32_t function_40d40(void) {
    // 0x40d40
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x40d59 - 0x40d5c
int32_t function_40d59(void) {
    // 0x40d59
    return g4;
}

// Address range: 0x40d5d - 0x40d65
int32_t function_40d5d(void) {
    int32_t v1 = g4; // 0x40d5d
    char * v2 = (char *)(v1 + 10); // 0x40d5d
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40d60
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x40d66 - 0x40d6e
int32_t function_40d66(void) {
    int32_t v1 = g4; // 0x40d66
    char v2 = *(char *)(v1 + 10); // 0x40d66
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x40d66
    g4 = result;
    uint32_t v3 = g6; // 0x40d69
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x40d8d - 0x40d90
int32_t function_40d8d(void) {
    // 0x40d8d
    return g4;
}

// Address range: 0x40d98 - 0x40da2
int32_t function_40d98(void) {
    // 0x40d98
    g9 = (int32_t)&g286;
    return g4;
}

// Address range: 0x40da8 - 0x40dcd
int32_t function_40da8(void) {
    // 0x40da8
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x40dd2 - 0x40de1
int32_t function_40dd2(void) {
    int32_t result = (unsigned char)g532; // 0x40dd2
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x40de8 - 0x40df2
int32_t function_40de8(void) {
    // 0x40de8
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x40df6 - 0x40e0e
int32_t function_40df6(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x40df6
    int32_t v2 = *v1 - 1; // 0x40df6
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_41428();
    }
    int32_t result = g532; // 0x40e02
    g4 = result;
    return result;
}

// Address range: 0x40e10 - 0x40e17
int32_t function_40e10(void) {
    // 0x40e10
    return g4;
}

// Address range: 0x40e1c - 0x40e30
int32_t function_40e1c(void) {
    // 0x40e1c
    if (g4 != 0) {
        // bb
        g4 = function_412c0();
    }
    int32_t result = g532; // 0x40e24
    g4 = result;
    return result;
}

// Address range: 0x40e30 - 0x40e3d
int32_t function_40e30(void) {
    // 0x40e30
    *(int32_t *)(g5 - 36) = g9;
    *(int32_t *)(g5 - 40) = g7;
    return g4;
}

// Address range: 0x40e4f - 0x40e52
int32_t function_40e4f(void) {
    // 0x40e4f
    return g4;
}

// Address range: 0x40e53 - 0x40e5b
int32_t function_40e53(void) {
    int32_t v1 = g4; // 0x40e53
    char * v2 = (char *)(v1 + 10); // 0x40e53
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x40e56
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x40e5c - 0x40e64
int32_t function_40e5c(void) {
    int32_t v1 = g4; // 0x40e5c
    char v2 = *(char *)(v1 + 10); // 0x40e5c
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x40e5c
    g4 = result;
    uint32_t v3 = g6; // 0x40e5f
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x40e77 - 0x40e82
int32_t function_40e77(void) {
    // 0x40e77
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x40e88 - 0x40e92
int32_t function_40e88(void) {
    // 0x40e88
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x40eb3 - 0x40ec3
int32_t function_40eb3(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x40eb3
    g10 = v1;
    g8 = (int32_t)&g286;
    *(int32_t *)(g5 - 48) = v1;
    return g4;
}

// Address range: 0x40ec8 - 0x40f68
int32_t function_40ec8(void) {
    // 0x40ec8
    if ((char)g4 == 0) {
        // bb
        g4 = function_413d8();
    }
    int32_t v1 = g9; // 0x40ed0
    int32_t v2 = *(int32_t *)(g6 + 4); // 0x40ed4
    g4 = v2;
    g7 = (int32_t)&g286;
    int32_t * v3 = (int32_t *)(g5 - 28);
    int32_t v4; // 0x40ee1
    if ((int16_t)v1 != -1) {
        // 0x40ede
        v4 = *v3 + v2;
        g7 = v4;
    } else {
        v4 = (int32_t)&g286;
    }
    int32_t v5 = (int32_t)*(int16_t *)(v4 + 2); // 0x40ee3
    g7 = v5;
    g9 = v1 & (int32_t)&g863;
    g8 = *v3;
    int32_t v6 = 28 * v5; // 0x40eed
    g7 = v6;
    *(int16_t *)(v2 + 6 + v6) = 1;
    int32_t v7 = *(int32_t *)(g6 + 4); // 0x40ef7
    g4 = v7;
    *(int16_t *)(v7 + 6 + g8) = 0;
    function_3fae0(g6, g9);
    unsigned char v8 = g532; // 0x40f0d
    int32_t v9 = v8; // 0x40f0d
    g4 = v9;
    int32_t v10; // 0x40f16
    if (v8 == 0) {
        // bb13
        v10 = function_412f8();
        g4 = v10;
    } else {
        v10 = v9;
    }
    int32_t v11 = g10; // 0x40f1c
    g9 = (int32_t)&g286;
    int32_t v12; // 0x40f2d
    if ((int16_t)v11 != -1) {
        int32_t v13 = 28 * (v11 & (int32_t)&g863); // 0x40f2a
        g9 = v13;
        v12 = *(int32_t *)(g6 + 4) + v13;
        g9 = v12;
    } else {
        v12 = (int32_t)&g286;
    }
    int32_t v14 = (int32_t)*(int16_t *)(v12 + 4); // 0x40f32
    g8 = v14;
    int32_t v15; // 0x40f3c
    if ((char)v10 == 0) {
        // bb14
        g4 = function_41330();
        v15 = g8;
    } else {
        v15 = v14;
    }
    int32_t v16; // 0x40f46
    if ((int16_t)v15 == -1) {
        // bb15
        g4 = function_41468();
        v16 = g8;
    } else {
        v16 = v15;
    }
    int32_t v17 = v16 & (int32_t)&g863; // 0x40f46
    g9 = v17;
    g7 = 28 * v17;
    *(int32_t *)(g5 - 56) = v17;
    g9 = *(int32_t *)(g6 + 4);
    *(int32_t *)(g5 - 32) = g7;
    int32_t v18 = g7 + g9; // 0x40f55
    g9 = v18;
    int32_t v19 = (int32_t)*(int16_t *)v18; // 0x40f57
    g9 = v19;
    int32_t v20 = 28 * (v19 & (int32_t)&g863); // 0x40f5d
    g10 = v20;
    *(int32_t *)(g5 - 28) = v20;
    return g4;
}

// Address range: 0x40f70 - 0x40f80
int32_t function_40f70(void) {
    int32_t result = (unsigned char)g532; // 0x40f70
    g4 = result;
    return result;
}

// Address range: 0x40f80 - 0x40f87
int32_t function_40f80(void) {
    // 0x40f80
    return g4;
}

// Address range: 0x40f8c - 0x40fa0
int32_t function_40f8c(void) {
    // 0x40f8c
    if (g4 != 0) {
        // bb
        g4 = function_41480();
    }
    int32_t result = g532; // 0x40f94
    g4 = result;
    return result;
}

// Address range: 0x40fa0 - 0x40faa
int32_t function_40fa0(void) {
    // 0x40fa0
    *(int32_t *)(g5 - 40) = g7;
    return g4;
}

// Address range: 0x40fcb - 0x40fdb
int32_t function_40fcb(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x40fcb
    g10 = v1;
    g8 = (int32_t)&g286;
    *(int32_t *)(g5 - 48) = v1;
    return g4;
}

// Address range: 0x40fe0 - 0x41083
int32_t function_40fe0(void) {
    // 0x40fe0
    if ((char)g4 == 0) {
        // bb
        g4 = function_414ec();
    }
    int16_t * v1 = (int16_t *)(g5 - 50); // 0x40fe8
    g7 = (int32_t)&g286;
    int32_t v2 = *(int32_t *)(g6 + 4); // 0x40ff2
    g4 = v2;
    int32_t * v3 = (int32_t *)(g5 - 28);
    int32_t v4; // 0x40ffa
    if (*v1 != -1) {
        // 0x40ff7
        v4 = *v3 + v2;
        g7 = v4;
    } else {
        v4 = (int32_t)&g286;
    }
    int32_t v5 = (int32_t)*(int16_t *)v4; // 0x40ffc
    g7 = v5;
    g8 = *v3;
    g9 = (int32_t)*v1;
    int32_t v6 = 28 * v5; // 0x41006
    g7 = v6;
    *(int16_t *)(v2 + 6 + v6) = 1;
    int32_t v7 = *(int32_t *)(g6 + 4); // 0x41010
    g4 = v7;
    *(int16_t *)(v7 + 6 + g8) = 0;
    function_3ffc0(g6, g9);
    unsigned char v8 = g532; // 0x41026
    int32_t v9 = v8; // 0x41026
    g4 = v9;
    int32_t v10; // 0x4102f
    if (v8 == 0) {
        // bb10
        v10 = function_414cc();
        g4 = v10;
    } else {
        v10 = v9;
    }
    int32_t v11 = g10; // 0x41035
    g9 = (int32_t)&g286;
    int32_t v12; // 0x41046
    if ((int16_t)v11 != -1) {
        int32_t v13 = 28 * (v11 & (int32_t)&g863); // 0x41043
        g9 = v13;
        v12 = *(int32_t *)(g6 + 4) + v13;
        g9 = v12;
    } else {
        v12 = (int32_t)&g286;
    }
    int32_t v14 = (int32_t)*(int16_t *)(v12 + 4); // 0x4104b
    g8 = v14;
    int32_t v15; // 0x41055
    if ((char)v10 == 0) {
        // bb11
        g4 = function_414ac();
        v15 = g8;
    } else {
        v15 = v14;
    }
    int32_t v16; // 0x4105f
    if ((int16_t)v15 == -1) {
        // bb12
        g4 = function_4167a();
        v16 = g8;
    } else {
        v16 = v15;
    }
    int32_t v17 = v16 & (int32_t)&g863; // 0x4105f
    g9 = v17;
    g7 = 28 * v17;
    *(int32_t *)(g5 - 56) = v17;
    int32_t v18 = g7 + *(int32_t *)(g6 + 4); // 0x4106b
    g9 = v18;
    uint16_t v19 = *(int16_t *)(v18 + 2); // 0x4106d
    int32_t v20 = v19; // 0x4106d
    g9 = v20;
    g10 = v20 & (int32_t)&g863;
    *(int16_t *)(g5 - 50) = v19;
    int32_t v21 = 28 * g10; // 0x41078
    g10 = v21;
    *(int32_t *)(g5 - 28) = v21;
    return g4;
}

// Address range: 0x41088 - 0x41092
int32_t function_41088(void) {
    // 0x41088
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x41096 - 0x410ae
int32_t function_41096(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x41096
    int32_t v2 = *v1 - 1; // 0x41096
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_41565();
    }
    int32_t result = g532; // 0x410a2
    g4 = result;
    return result;
}

// Address range: 0x410ba - 0x410c2
int32_t function_410ba(void) {
    int32_t v1 = g4; // 0x410ba
    char * v2 = (char *)(v1 + 10); // 0x410ba
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x410bd
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x410c3 - 0x410cb
int32_t function_410c3(void) {
    int32_t v1 = g4; // 0x410c3
    char v2 = *(char *)(v1 + 10); // 0x410c3
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x410c3
    g4 = result;
    uint32_t v3 = g6; // 0x410c6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x410d7 - 0x410dc
int32_t function_410d7(void) {
    // 0x410d7
    return g4;
}

// Address range: 0x410e0 - 0x410e7
int32_t function_410e0(void) {
    // 0x410e0
    return g4;
}

// Address range: 0x410fe - 0x41106
int32_t function_410fe(void) {
    int32_t v1 = g4; // 0x410fe
    char * v2 = (char *)(v1 + 10); // 0x410fe
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41101
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41107 - 0x4110f
int32_t function_41107(void) {
    int32_t v1 = g4; // 0x41107
    char v2 = *(char *)(v1 + 10); // 0x41107
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41107
    g4 = result;
    uint32_t v3 = g6; // 0x4110a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x4111b - 0x41120
int32_t function_4111b(void) {
    // 0x4111b
    return g4;
}

// Address range: 0x41120 - 0x4112a
int32_t function_41120(void) {
    // 0x41120
    *(int32_t *)(g5 - 40) = g7;
    return g4;
}

// Address range: 0x41139 - 0x4113c
int32_t function_41139(void) {
    // 0x41139
    return g4;
}

// Address range: 0x4113d - 0x41145
int32_t function_4113d(void) {
    int32_t v1 = g4; // 0x4113d
    char * v2 = (char *)(v1 + 10); // 0x4113d
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41140
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41146 - 0x4114e
int32_t function_41146(void) {
    int32_t v1 = g4; // 0x41146
    char v2 = *(char *)(v1 + 10); // 0x41146
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41146
    g4 = result;
    uint32_t v3 = g6; // 0x41149
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41161 - 0x41169
int32_t function_41161(void) {
    // 0x41161
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    return g4;
}

// Address range: 0x41170 - 0x41177
int32_t function_41170(void) {
    // 0x41170
    return g4;
}

// Address range: 0x4117c - 0x41190
int32_t function_4117c(void) {
    // 0x4117c
    if (g4 != 0) {
        // bb
        g4 = function_415f6();
    }
    int32_t result = g532; // 0x41184
    g4 = result;
    return result;
}

// Address range: 0x41190 - 0x41197
int32_t function_41190(void) {
    // 0x41190
    return g4;
}

// Address range: 0x4119c - 0x411b0
int32_t function_4119c(void) {
    // 0x4119c
    if (g4 != 0) {
        // bb
        g4 = function_415ca();
    }
    int32_t result = g532; // 0x411a4
    g4 = result;
    return result;
}

// Address range: 0x411b0 - 0x411b7
int32_t function_411b0(void) {
    // 0x411b0
    return g4;
}

// Address range: 0x411bc - 0x411d0
int32_t function_411bc(void) {
    // 0x411bc
    if (g4 != 0) {
        // bb
        g4 = function_4159e();
    }
    int32_t result = g532; // 0x411c4
    g4 = result;
    return result;
}

// Address range: 0x411da - 0x411e2
int32_t function_411da(void) {
    int32_t v1 = g4; // 0x411da
    char * v2 = (char *)(v1 + 10); // 0x411da
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x411dd
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x411e3 - 0x411eb
int32_t function_411e3(void) {
    int32_t v1 = g4; // 0x411e3
    char v2 = *(char *)(v1 + 10); // 0x411e3
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x411e3
    g4 = result;
    uint32_t v3 = g6; // 0x411e6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x411f7 - 0x411fc
int32_t function_411f7(void) {
    // 0x411f7
    return g4;
}

// Address range: 0x41200 - 0x41225
int32_t function_41200(void) {
    // 0x41200
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4122a - 0x41239
int32_t function_4122a(void) {
    int32_t result = (unsigned char)g532; // 0x4122a
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x41240 - 0x41265
int32_t function_41240(void) {
    // 0x41240
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4126a - 0x41279
int32_t function_4126a(void) {
    int32_t result = (unsigned char)g532; // 0x4126a
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x41286 - 0x4128e
int32_t function_41286(void) {
    int32_t v1 = g4; // 0x41286
    char * v2 = (char *)(v1 + 10); // 0x41286
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41289
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x4128f - 0x41297
int32_t function_4128f(void) {
    int32_t v1 = g4; // 0x4128f
    char v2 = *(char *)(v1 + 10); // 0x4128f
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x4128f
    g4 = result;
    uint32_t v3 = g6; // 0x41292
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x412aa - 0x412b9
int32_t function_412aa(void) {
    int32_t result = (unsigned char)g532; // 0x412aa
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x412c0 - 0x412e2
int32_t function_412c0(void) {
    // 0x412c0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x412e7 - 0x412f3
int32_t function_412e7(void) {
    int32_t result = (unsigned char)g532; // 0x412e7
    g4 = result;
    return result;
}

// Address range: 0x412f8 - 0x412ff
int32_t function_412f8(void) {
    // 0x412f8
    return g4;
}

// Address range: 0x41304 - 0x41327
int32_t function_41304(void) {
    // 0x41304
    if (g4 != 0) {
        // bb
        g4 = function_41622();
    }
    int32_t result = g532; // 0x41310
    g4 = result;
    g9 = (int32_t)&g286;
    return result;
}

// Address range: 0x41330 - 0x41337
int32_t function_41330(void) {
    // 0x41330
    return g4;
}

// Address range: 0x4133c - 0x4135a
int32_t function_4133c(void) {
    // 0x4133c
    if (g4 != 0) {
        // bb
        g4 = function_4164e();
    }
    // 0x41344
    g4 = g532;
    int32_t result = function_41468(); // 0x41355
    g4 = result;
    return result;
}

// Address range: 0x41363 - 0x4136b
int32_t function_41363(void) {
    int32_t v1 = g4; // 0x41363
    char * v2 = (char *)(v1 + 10); // 0x41363
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41366
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x4136c - 0x41374
int32_t function_4136c(void) {
    int32_t v1 = g4; // 0x4136c
    char v2 = *(char *)(v1 + 10); // 0x4136c
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x4136c
    g4 = result;
    uint32_t v3 = g6; // 0x4136f
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41387 - 0x41393
int32_t function_41387(void) {
    int32_t result = (unsigned char)g532; // 0x41387
    g4 = result;
    return result;
}

// Address range: 0x41398 - 0x413bd
int32_t function_41398(void) {
    // 0x41398
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x413c2 - 0x413d1
int32_t function_413c2(void) {
    int32_t result = (unsigned char)g532; // 0x413c2
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x413d8 - 0x413e2
int32_t function_413d8(void) {
    // 0x413d8
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x413f1 - 0x413f4
int32_t function_413f1(void) {
    // 0x413f1
    return g4;
}

// Address range: 0x413f5 - 0x413fd
int32_t function_413f5(void) {
    int32_t v1 = g4; // 0x413f5
    char * v2 = (char *)(v1 + 10); // 0x413f5
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x413f8
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x413fe - 0x41406
int32_t function_413fe(void) {
    int32_t v1 = g4; // 0x413fe
    char v2 = *(char *)(v1 + 10); // 0x413fe
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x413fe
    g4 = result;
    uint32_t v3 = g6; // 0x41401
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41419 - 0x41421
int32_t function_41419(void) {
    // 0x41419
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x41428 - 0x4144d
int32_t function_41428(void) {
    // 0x41428
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41452 - 0x41461
int32_t function_41452(void) {
    int32_t result = (unsigned char)g532; // 0x41452
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x41468 - 0x41480
int32_t function_41468(void) {
    // 0x41468
    *(int32_t *)(g5 - 32) = 0x1bffe4;
    g9 = (int32_t)&g286;
    *(int32_t *)(g5 - 56) = (int32_t)&g863;
    return g4;
}

// Address range: 0x41480 - 0x414a2
int32_t function_41480(void) {
    // 0x41480
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x414a7 - 0x414ac
int32_t function_414a7(void) {
    // 0x414a7
    return g4;
}

// Address range: 0x414ac - 0x414b3
int32_t function_414ac(void) {
    // 0x414ac
    return g4;
}

// Address range: 0x414b8 - 0x414cc
int32_t function_414b8(void) {
    // 0x414b8
    if (g4 != 0) {
        // bb
        g4 = function_416bc();
    }
    int32_t result = g532; // 0x414c0
    g4 = result;
    return result;
}

// Address range: 0x414cc - 0x414d3
int32_t function_414cc(void) {
    // 0x414cc
    return g4;
}

// Address range: 0x414d8 - 0x414ec
int32_t function_414d8(void) {
    // 0x414d8
    if (g4 != 0) {
        // bb
        g4 = function_41690();
    }
    int32_t result = g532; // 0x414e0
    g4 = result;
    return result;
}

// Address range: 0x414ec - 0x414f3
int32_t function_414ec(void) {
    // 0x414ec
    return g4;
}

// Address range: 0x4150a - 0x41512
int32_t function_4150a(void) {
    int32_t v1 = g4; // 0x4150a
    char * v2 = (char *)(v1 + 10); // 0x4150a
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x4150d
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41513 - 0x4151b
int32_t function_41513(void) {
    int32_t v1 = g4; // 0x41513
    char v2 = *(char *)(v1 + 10); // 0x41513
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41513
    g4 = result;
    uint32_t v3 = g6; // 0x41516
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41527 - 0x4152c
int32_t function_41527(void) {
    // 0x41527
    return g4;
}

// Address range: 0x41532 - 0x4153a
int32_t function_41532(void) {
    int32_t v1 = g4; // 0x41532
    char * v2 = (char *)(v1 + 10); // 0x41532
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41535
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x4153b - 0x41543
int32_t function_4153b(void) {
    int32_t v1 = g4; // 0x4153b
    char v2 = *(char *)(v1 + 10); // 0x4153b
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x4153b
    g4 = result;
    uint32_t v3 = g6; // 0x4153e
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41556 - 0x41565
int32_t function_41556(void) {
    int32_t result = (unsigned char)g532; // 0x41556
    g4 = result;
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    return result;
}

// Address range: 0x41565 - 0x4158a
int32_t function_41565(void) {
    // 0x41565
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4158f - 0x4159e
int32_t function_4158f(void) {
    int32_t result = (unsigned char)g532; // 0x4158f
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x4159e - 0x415c0
int32_t function_4159e(void) {
    // 0x4159e
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x415c5 - 0x415ca
int32_t function_415c5(void) {
    // 0x415c5
    return g4;
}

// Address range: 0x415ca - 0x415ec
int32_t function_415ca(void) {
    // 0x415ca
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x415f1 - 0x415f6
int32_t function_415f1(void) {
    // 0x415f1
    return g4;
}

// Address range: 0x415f6 - 0x41618
int32_t function_415f6(void) {
    // 0x415f6
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4161d - 0x41622
int32_t function_4161d(void) {
    // 0x4161d
    return g4;
}

// Address range: 0x41622 - 0x41644
int32_t function_41622(void) {
    // 0x41622
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41649 - 0x4164e
int32_t function_41649(void) {
    // 0x41649
    return g4;
}

// Address range: 0x4164e - 0x41670
int32_t function_4164e(void) {
    // 0x4164e
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41675 - 0x4167a
int32_t function_41675(void) {
    // 0x41675
    return g4;
}

// Address range: 0x4167a - 0x41690
int32_t function_4167a(void) {
    // 0x4167a
    g7 = 0x1bffe4;
    g9 = (int32_t)&g286;
    *(int32_t *)(g5 - 56) = (int32_t)&g863;
    return g4;
}

// Address range: 0x41690 - 0x416b2
int32_t function_41690(void) {
    // 0x41690
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x416b7 - 0x416bc
int32_t function_416b7(void) {
    // 0x416b7
    return g4;
}

// Address range: 0x416bc - 0x416de
int32_t function_416bc(void) {
    // 0x416bc
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x416e3 - 0x416e8
int32_t function_416e3(void) {
    // 0x416e3
    return g4;
}

// Address range: 0x416f0 - 0x4179c
int32_t function_416f0(int32_t a1, uint32_t a2) {
    int32_t v1 = (uint32_t)(a2 % 0x10000); // 0x416f9
    g9 = v1;
    g10 = a1;
    if ((int16_t)a2 == -1) {
        int32_t v2 = function_417b8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x41708
        g4 = v2;
    }
    unsigned char v3 = g532; // 0x4170e
    int32_t v4 = v3; // 0x4170e
    g4 = v4;
    int32_t v5; // 0x41717
    if (v3 == 0) {
        // bb31
        v5 = function_41940();
        g4 = v5;
    } else {
        v5 = v4;
    }
    int32_t v6 = 28 * v1; // 0x41721
    g9 = v6;
    int32_t v7 = *(int32_t *)(g10 + 4) + v6; // 0x41727
    g9 = v7;
    int32_t v8; // 0x4172e
    if (*(int16_t *)v7 == -1) {
        // bb32
        v8 = function_417e0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v8;
    } else {
        v8 = v5;
    }
    int32_t v9; // 0x41736
    if ((char)v8 == 0) {
        // bb33
        v9 = function_41cc0();
        g4 = v9;
    } else {
        v9 = v8;
    }
    uint16_t v10 = *(int16_t *)(g9 + 2); // 0x4173c
    g6 = v10;
    int32_t v11; // 0x41744
    if (v10 == -1) {
        // bb34
        v11 = function_417e0((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v11;
    } else {
        v11 = v9;
    }
    int32_t v12; // 0x4174c
    if ((char)v11 == 0) {
        // bb35
        v12 = function_41960();
        g4 = v12;
    } else {
        v12 = v11;
    }
    int32_t v13 = v12; // 0x4177616
    int32_t v14 = g6; // 0x41763
    int32_t result; // 0x41778
    while (true) {
        // 0x41758
        g9 = (int32_t)&g286;
        int32_t v15; // 0x41769
        if ((int16_t)v14 != -1) {
            int32_t v16 = 28 * (v14 & (int32_t)&g863); // 0x41766
            g9 = v16;
            v15 = *(int32_t *)(g10 + 4) + v16;
            g9 = v15;
        } else {
            v15 = (int32_t)&g286;
        }
        // 0x4176c
        int32_t v17; // 0x41770
        if (*(int16_t *)v15 == -1) {
            // bb36
            v17 = function_41b70();
            g4 = v17;
        } else {
            v17 = v13;
        }
        if ((char)v17 == 0) {
            // bb37
            result = function_417c0();
            g4 = result;
        } else {
            result = v17;
        }
        int32_t v18 = g6; // 0x4177a
        g9 = (int32_t)&g286;
        int32_t v19; // 0x4178b
        if ((int16_t)v18 != -1) {
            int32_t v20 = v18 & (int32_t)&g863; // 0x41785
            g6 = v20;
            int32_t v21 = 28 * v20; // 0x41788
            g9 = v21;
            v19 = *(int32_t *)(g10 + 4) + v21;
            g9 = v19;
        } else {
            v19 = (int32_t)&g286;
        }
        int32_t v22 = (int32_t)*(int16_t *)v19; // 0x4178e
        g6 = v22;
        if ((char)result == 0) {
            // break -> 0x41795
            break;
        }
        v13 = result;
        v14 = v22;
    }
    // 0x41795
    return result;
}

// Address range: 0x417a1 - 0x417b2
int32_t function_417a1(void) {
    // 0x417a1
    if (g4 != 0) {
        // bb
        g4 = function_41bb0();
    }
    int32_t result = g532; // 0x417a9
    g4 = result;
    return result;
}

// Address range: 0x417b8 - 0x417c0
int32_t function_417b8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x417b8
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x417c0 - 0x417c7
int32_t function_417c0(void) {
    // 0x417c0
    return g4;
}

// Address range: 0x417cc - 0x417dd
int32_t function_417cc(void) {
    // 0x417cc
    if (g4 != 0) {
        // bb
        g4 = function_41c30();
    }
    int32_t result = g532; // 0x417d4
    g4 = result;
    return result;
}

// Address range: 0x417e0 - 0x4193a
int32_t function_417e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5; // 0x417e0
    int32_t v2 = *(int32_t *)(v1 - 32); // 0x417e0
    g7 = v2;
    g6 = (int32_t)*(int16_t *)(v1 - 26);
    *(int32_t *)(v1 - 56) = v2;
    int32_t v3 = g4; // 0x417ea
    int32_t v4; // 0x417ec
    if ((char)v3 == 0) {
        // bb
        v4 = function_41b50();
        g4 = v4;
    } else {
        v4 = v3;
    }
    // 0x417f2
    g9 = (int32_t)&g286;
    int32_t v5; // 0x41800
    if ((int16_t)g6 != -1) {
        int32_t v6 = *(int32_t *)(g5 - 56); // 0x417fd
        g9 = v6;
        v5 = *(int32_t *)(g10 + 4) + v6;
        g9 = v5;
    } else {
        v5 = (int32_t)&g286;
    }
    // 0x41803
    int32_t v7; // 0x41807
    if (*(int16_t *)v5 == -1) {
        // bb27
        v7 = function_41b80();
        g4 = v7;
    } else {
        v7 = v4;
    }
    if ((char)v7 == 0) {
        // bb28
        g4 = function_41c60();
    }
    // 0x41815
    g9 = (int32_t)&g286;
    int32_t v8 = g5;
    int32_t v9; // 0x41823
    if ((int16_t)g6 != -1) {
        int32_t v10 = *(int32_t *)(v8 - 56); // 0x41820
        g9 = v10;
        v9 = *(int32_t *)(g10 + 4) + v10;
        g9 = v9;
    } else {
        v9 = (int32_t)&g286;
    }
    uint16_t v11 = *(int16_t *)v9; // 0x41826
    g9 = v11;
    *(int16_t *)(v8 - 28) = v11;
    if (*(int16_t *)(g5 - 28) != -1) {
        // 0x41834
        if ((char)g4 == 0) {
            // bb29
            g4 = function_41df0();
        }
        // 0x4183c
        if ((int16_t)g6 == -1) {
            // bb30
            g4 = function_41e88();
        }
        int32_t v12 = *(int32_t *)(g10 + 4); // 0x41846
        g8 = v12;
        int32_t v13 = g5; // 0x41849
        g9 = *(int32_t *)(v13 - 56);
        *(int32_t *)(v13 - 52) = v12;
        int32_t v14 = g8 + g9; // 0x4184f
        g9 = v14;
        uint16_t v15 = *(int16_t *)(v14 + 4); // 0x41851
        g9 = v15;
        int32_t v16 = g5; // 0x41855
        g7 = *(int32_t *)(v16 - 52);
        *(int16_t *)(v16 - 36) = v15;
        int32_t v17 = g5; // 0x4185c
        int32_t v18 = (int32_t)*(int16_t *)(v17 - 28); // 0x4185c
        g9 = v18;
        uint16_t v19 = *(int16_t *)(v17 - 36); // 0x41860
        g8 = v19;
        int32_t v20 = 28 * v18; // 0x41864
        g9 = v20;
        *(int16_t *)(v20 + 4 + g7) = v19;
    }
    // 0x4186c
    int32_t v21; // 0x41870
    if ((int16_t)g6 == *(int16_t *)(g10 + 16)) {
        // bb31
        v21 = function_41af8();
        g4 = v21;
    } else {
        // 0x4186c
        v21 = g4;
    }
    int32_t v22; // 0x41878
    if ((char)v21 == 0) {
        // bb32
        v22 = function_41e40();
        g4 = v22;
    } else {
        v22 = v21;
    }
    // 0x4187e
    g9 = (int32_t)&g286;
    int32_t v23; // 0x4188c
    if ((int16_t)g6 != -1) {
        int32_t v24 = *(int32_t *)(g5 - 56); // 0x41889
        g9 = v24;
        v23 = *(int32_t *)(g10 + 4) + v24;
        g9 = v23;
    } else {
        v23 = (int32_t)&g286;
    }
    int32_t v25 = (int32_t)*(int16_t *)(v23 + 4); // 0x41891
    g7 = v25;
    int32_t v26; // 0x418a6
    int32_t v27; // 0x41895
    if ((char)v22 == 0) {
        // bb33
        v27 = function_41e10();
        g4 = v27;
        v26 = g7;
    } else {
        v27 = v22;
        v26 = v25;
    }
    // 0x4189b
    g9 = (int32_t)&g286;
    int32_t v28; // 0x418ac
    if ((int16_t)v26 != -1) {
        int32_t v29 = 28 * (v26 & (int32_t)&g863); // 0x418a9
        g9 = v29;
        v28 = *(int32_t *)(g10 + 4) + v29;
        g9 = v28;
    } else {
        v28 = (int32_t)&g286;
    }
    // 0x418af
    int32_t v30; // 0x418b2
    if ((int16_t)g6 != *(int16_t *)v28) {
        // bb34
        v30 = function_41be0();
        g4 = v30;
    } else {
        v30 = v27;
    }
    if ((char)v30 == 0) {
        // bb35
        g4 = function_42050();
    }
    int32_t v31 = *(int32_t *)(g10 + 4); // 0x418c4
    g9 = v31;
    g4 = (int32_t)&g286;
    int32_t v32 = g5;
    int32_t v33; // 0x418d1
    if ((int16_t)g6 != -1) {
        // 0x418ce
        v33 = *(int32_t *)(v32 - 56) + v31;
        g4 = v33;
    } else {
        v33 = (int32_t)&g286;
    }
    int32_t v34 = (int32_t)*(int16_t *)(v33 + 4); // 0x418d3
    g4 = v34;
    uint16_t v35 = *(int16_t *)(v32 - 28); // 0x418d7
    g7 = v35;
    *(int16_t *)(28 * v34 + v31) = v35;
    unsigned char v36 = g532; // 0x418e2
    g4 = v36;
    if (v36 == 0) {
        // bb36
        g4 = function_41b08();
    }
    int32_t v37 = g6; // 0x418f1
    int32_t v38; // 0x41901
    if ((int16_t)v37 == -1) {
        // bb37
        g4 = function_41990();
        v38 = g6;
    } else {
        v38 = v37;
    }
    int32_t v39 = *(int32_t *)(g10 + 4); // 0x418fb
    g4 = v39;
    int32_t v40 = g5; // 0x418fe
    int32_t v41 = *(int32_t *)(v40 - 56); // 0x418fe
    g7 = v41;
    g8 = (int32_t)*(int16_t *)(v39 + 6 + v41);
    int32_t v42; // 0x41910
    if ((int16_t)v38 != *(int16_t *)(v40 - 26)) {
        // bb38
        g4 = function_41997();
        v42 = g5;
    } else {
        v42 = v40;
    }
    // 0x41910
    if (*(int16_t *)(v42 - 28) == -1) {
        int32_t v43 = function_417b8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x41915
        g4 = v43;
    }
    // 0x4191b
    if (g8 != 1) {
        int32_t v44 = function_417b8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x4191e
        g4 = v44;
    }
    // 0x41924
    g4 = (int32_t)*(int16_t *)(g5 - 28);
    *(int32_t *)(g5 + 8) = g10;
    *(int32_t *)(g5 + 12) = g4;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    int32_t result = function_40470((int32_t)&g870, (int32_t)&g870); // 0x41935
    g4 = result;
    return result;
}

// Address range: 0x41940 - 0x41947
int32_t function_41940(void) {
    // 0x41940
    return g4;
}

// Address range: 0x4194b - 0x41960
int32_t function_4194b(void) {
    // 0x4194b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x4c850fc0); // 0x4194b
    *v2 = *v2 + 1;
    int32_t result = g4 + (int32_t)&g532 - 0x49f10000; // 0x41956
    g4 = result;
    return result;
}

// Address range: 0x41960 - 0x41967
int32_t function_41960(void) {
    // 0x41960
    return g4;
}

// Address range: 0x4196b - 0x4198b
int32_t function_4196b(void) {
    // 0x4196b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x577af040); // 0x4196b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x41971
    int32_t v4 = v3 + 139 & 255 | v3 + 0x468b0000 & -256; // 0x41976
    g4 = v4;
    g6 = (int32_t)*(int16_t *)(v4 + 2 + g8);
    int32_t result = g532; // 0x4197f
    g4 = result;
    return result;
}

// Address range: 0x41990 - 0x41997
int32_t function_41990(void) {
    // 0x41990
    g8 = (uint16_t)g289;
    return g4;
}

// Address range: 0x41997 - 0x41af1
int32_t function_41997(void) {
    // 0x41997
    if (g532 == 0) {
        // bb
        g4 = function_41cf0();
    }
    int32_t v1 = *(int32_t *)(g10 + 4); // 0x419a4
    g4 = v1;
    int32_t v2 = *(int32_t *)(g5 - 32); // 0x419a7
    g7 = v2;
    int32_t v3 = v1 + 4; // 0x419aa
    uint16_t v4 = *(int16_t *)(v3 + v2); // 0x419aa
    g9 = v4;
    int32_t v5 = *(int32_t *)(g5 - 56); // 0x419af
    g7 = v5;
    *(int16_t *)(v3 + v5) = v4;
    int32_t v6 = *(int32_t *)(g10 + 4); // 0x419b7
    g4 = v6;
    int32_t v7 = *(int32_t *)(g5 - 32); // 0x419ba
    g7 = v7;
    int32_t v8 = v6 + 2; // 0x419bd
    uint16_t v9 = *(int16_t *)(v8 + v7); // 0x419bd
    g9 = v9;
    int32_t v10 = *(int32_t *)(g5 - 56); // 0x419c2
    g7 = v10;
    *(int16_t *)(v8 + v10) = v9;
    int32_t v11 = *(int32_t *)(g10 + 4); // 0x419ca
    g4 = v11;
    int32_t v12 = *(int32_t *)(g5 - 32); // 0x419cd
    g7 = v12;
    uint16_t v13 = *(int16_t *)(v12 + v11); // 0x419d0
    g9 = v13;
    int32_t v14 = *(int32_t *)(g5 - 56); // 0x419d4
    g7 = v14;
    *(int16_t *)(v14 + v11) = v13;
    uint16_t v15 = *(int16_t *)(g5 - 26); // 0x419db
    g9 = v15;
    if (v15 == *(int16_t *)(g10 + 16)) {
        // bb19
        g4 = function_41c20();
    }
    unsigned char v16 = g532; // 0x419e9
    int32_t v17 = v16; // 0x419e9
    g4 = v17;
    int32_t v18; // 0x419f2
    if (v16 == 0) {
        // bb20
        v18 = function_41fd0();
        g4 = v18;
    } else {
        v18 = v17;
    }
    int32_t * v19 = (int32_t *)(g10 + 4); // 0x419f8
    int32_t v20 = *v19; // 0x419f8
    g7 = v20;
    int32_t v21 = *(int32_t *)(g5 - 32); // 0x419fb
    g9 = v21;
    uint16_t v22 = *(int16_t *)(v20 + 4 + v21); // 0x419fe
    int32_t v23 = v22; // 0x419fe
    g7 = v23;
    g9 = (int32_t)&g286;
    int32_t v24; // 0x41a14
    if (v22 != -1) {
        int32_t v25 = 28 * (v23 & (int32_t)&g863); // 0x41a11
        g9 = v25;
        v24 = *v19 + v25;
        g9 = v24;
    } else {
        v24 = (int32_t)&g286;
    }
    uint16_t v26 = *(int16_t *)(g5 - 26); // 0x41a17
    g7 = v26;
    int32_t v27; // 0x41a1e
    if (v26 != *(int16_t *)v24) {
        // bb21
        v27 = function_41e60();
        g4 = v27;
    } else {
        v27 = v18;
    }
    if ((char)v27 == 0) {
        // bb22
        g4 = function_422a0();
    }
    int32_t v28 = *(int32_t *)(g10 + 4); // 0x41a2c
    g9 = v28;
    int32_t v29 = *(int32_t *)(g5 - 32); // 0x41a2f
    g7 = v29;
    uint16_t v30 = *(int16_t *)(v28 + 4 + v29); // 0x41a32
    *(int16_t *)(28 * (int32_t)v30 + v28) = (int16_t)g6;
    unsigned char v31 = g532; // 0x41a3e
    int32_t v32 = v31; // 0x41a3e
    g4 = v32;
    int32_t v33; // 0x41a47
    if (v31 == 0) {
        // bb23
        v33 = function_41ca0();
        g4 = v33;
    } else {
        v33 = v32;
    }
    int32_t v34 = g6; // 0x41a4d
    g9 = (int32_t)&g286;
    int32_t v35; // 0x41a5b
    if ((int16_t)v34 != -1) {
        int32_t v36 = *(int32_t *)(g5 - 56); // 0x41a58
        g9 = v36;
        v35 = *(int32_t *)(g10 + 4) + v36;
        g9 = v35;
    } else {
        v35 = (int32_t)&g286;
    }
    // 0x41a5e
    int32_t v37; // 0x41a8a
    if (*(int16_t *)v35 != -1) {
        int32_t v38; // 0x41a85
        if ((char)v33 == 0) {
            // bb24
            g4 = function_41fb0();
            v38 = g6;
        } else {
            v38 = v34;
        }
        int16_t v39 = v38; // 0x41a6c
        int32_t v40 = *(int32_t *)(g10 + 4); // 0x41a70
        g7 = v40;
        g9 = (int32_t)&g286;
        int32_t v41; // 0x41a7d
        if (v39 != -1) {
            // 0x41a7a
            v41 = *(int32_t *)(g5 - 56) + v40;
            g9 = v41;
        } else {
            v41 = (int32_t)&g286;
        }
        int32_t v42 = 28 * (int32_t)*(int16_t *)v41; // 0x41a82
        g9 = v42;
        *(int16_t *)(v40 + 4 + v42) = v39;
        v37 = g4;
    } else {
        v37 = v33;
    }
    int32_t v43; // 0x41a8c
    if ((char)v37 == 0) {
        // bb25
        v43 = function_41c80();
        g4 = v43;
    } else {
        v43 = v37;
    }
    int32_t v44 = g6; // 0x41a92
    g9 = (int32_t)&g286;
    int32_t v45; // 0x41aa0
    if ((int16_t)v44 != -1) {
        int32_t v46 = *(int32_t *)(g5 - 56); // 0x41a9d
        g9 = v46;
        v45 = *(int32_t *)(g10 + 4) + v46;
        g9 = v45;
    } else {
        v45 = (int32_t)&g286;
    }
    // 0x41aa3
    int32_t v47; // 0x41ad1
    if (*(int16_t *)(v45 + 2) != -1) {
        int32_t v48; // 0x41acc
        if ((char)v43 == 0) {
            // bb26
            g4 = function_41f88();
            v48 = g6;
        } else {
            v48 = v44;
        }
        int16_t v49 = v48; // 0x41ab2
        int32_t v50 = *(int32_t *)(g10 + 4); // 0x41ab6
        g7 = v50;
        g9 = (int32_t)&g286;
        int32_t v51; // 0x41ac3
        if (v49 != -1) {
            // 0x41ac0
            v51 = *(int32_t *)(g5 - 56) + v50;
            g9 = v51;
        } else {
            v51 = (int32_t)&g286;
        }
        int32_t v52 = 28 * (int32_t)*(int16_t *)(v51 + 2); // 0x41ac9
        g9 = v52;
        *(int16_t *)(v50 + 4 + v52) = v49;
        v47 = g4;
    } else {
        v47 = v43;
    }
    if ((char)v47 == 0) {
        // bb27
        g4 = function_41db0();
    }
    int32_t v53 = *(int32_t *)(g10 + 4); // 0x41ad9
    g4 = v53;
    int32_t v54 = *(int32_t *)(g5 - 32); // 0x41adc
    g7 = v54;
    int32_t v55 = v53 + 6; // 0x41adf
    uint16_t v56 = *(int16_t *)(v55 + v54); // 0x41adf
    g9 = v56;
    int32_t v57 = *(int32_t *)(g5 - 56); // 0x41ae4
    g7 = v57;
    *(int16_t *)(v55 + v57) = v56;
    return g4;
}

// Address range: 0x41af8 - 0x41b08
int32_t function_41af8(void) {
    uint16_t v1 = *(int16_t *)(g5 - 28); // 0x41af8
    g9 = v1;
    *(int16_t *)(g10 + 16) = v1;
    return g4;
}

// Address range: 0x41b08 - 0x41b0f
int32_t function_41b08(void) {
    // 0x41b08
    return g4;
}

// Address range: 0x41b26 - 0x41b2e
int32_t function_41b26(void) {
    int32_t v1 = g4; // 0x41b26
    char * v2 = (char *)(v1 + 10); // 0x41b26
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41b29
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41b2f - 0x41b37
int32_t function_41b2f(void) {
    int32_t v1 = g4; // 0x41b2f
    char v2 = *(char *)(v1 + 10); // 0x41b2f
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41b2f
    g4 = result;
    uint32_t v3 = g6; // 0x41b32
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41b43 - 0x41b48
int32_t function_41b43(void) {
    // 0x41b43
    return g4;
}

// Address range: 0x41b50 - 0x41b57
int32_t function_41b50(void) {
    // 0x41b50
    return g4;
}

// Address range: 0x41b5c - 0x41b70
int32_t function_41b5c(void) {
    // 0x41b5c
    if (g4 != 0) {
        // bb
        g4 = function_41ed0();
    }
    int32_t result = g532; // 0x41b64
    g4 = result;
    return result;
}

// Address range: 0x41b70 - 0x41b7e
int32_t function_41b70(void) {
    int32_t v1 = 28 * (g6 & (int32_t)&g863); // 0x41b73
    g8 = v1;
    *(int32_t *)(g5 - 56) = v1;
    return g4;
}

// Address range: 0x41b80 - 0x41ba6
int32_t function_41b80(void) {
    // 0x41b80
    if ((char)g4 == 0) {
        // bb
        g4 = function_41f00();
    }
    // 0x41b88
    g9 = (int32_t)&g286;
    int32_t v1; // 0x41b96
    if ((int16_t)g6 != -1) {
        int32_t v2 = *(int32_t *)(g5 - 56); // 0x41b93
        g9 = v2;
        v1 = *(int32_t *)(g10 + 4) + v2;
        g9 = v1;
    } else {
        v1 = (int32_t)&g286;
    }
    uint16_t v3 = *(int16_t *)(v1 + 2); // 0x41b99
    g9 = v3;
    *(int16_t *)(g5 - 28) = v3;
    return g4;
}

// Address range: 0x41bb0 - 0x41bd2
int32_t function_41bb0(void) {
    // 0x41bb0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41bd7 - 0x41bdc
int32_t function_41bd7(void) {
    // 0x41bd7
    return g4;
}

// Address range: 0x41be0 - 0x41c17
int32_t function_41be0(void) {
    // 0x41be0
    if ((char)g4 == 0) {
        // bb
        g4 = function_42028();
    }
    // 0x41be8
    if ((int16_t)g6 == -1) {
        // bb2
        g4 = function_420c0();
    }
    int32_t v1 = *(int32_t *)(g10 + 4); // 0x41bf6
    g9 = v1;
    *(int32_t *)(g5 - 44) = v1;
    int32_t v2 = *(int32_t *)(g5 - 56) + g9; // 0x41bfc
    g9 = v2;
    int32_t v3 = (int32_t)*(int16_t *)(v2 + 4); // 0x41bff
    g9 = v3;
    uint16_t v4 = *(int16_t *)(g5 - 28); // 0x41c03
    g8 = v4;
    int32_t v5 = *(int32_t *)(g5 - 44); // 0x41c07
    g7 = v5;
    int32_t v6 = 28 * v3; // 0x41c0a
    g9 = v6;
    *(int16_t *)(v5 + (v6 | 2)) = v4;
    return g4;
}

// Address range: 0x41c20 - 0x41c30
int32_t function_41c20(void) {
    // 0x41c20
    *(int16_t *)(g10 + 16) = (int16_t)g6;
    int32_t result = g532; // 0x41c24
    g4 = result;
    return result;
}

// Address range: 0x41c30 - 0x41c52
int32_t function_41c30(void) {
    // 0x41c30
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41c57 - 0x41c5c
int32_t function_41c57(void) {
    // 0x41c57
    return g4;
}

// Address range: 0x41c60 - 0x41c67
int32_t function_41c60(void) {
    // 0x41c60
    return g4;
}

// Address range: 0x41c6c - 0x41c80
int32_t function_41c6c(void) {
    // 0x41c6c
    if (g4 != 0) {
        // bb
        g4 = function_42090();
    }
    int32_t result = g532; // 0x41c74
    g4 = result;
    return result;
}

// Address range: 0x41c80 - 0x41c87
int32_t function_41c80(void) {
    // 0x41c80
    return g4;
}

// Address range: 0x41c8c - 0x41ca0
int32_t function_41c8c(void) {
    // 0x41c8c
    if (g4 != 0) {
        // bb
        g4 = function_420d0();
    }
    int32_t result = g532; // 0x41c94
    g4 = result;
    return result;
}

// Address range: 0x41ca0 - 0x41ca7
int32_t function_41ca0(void) {
    // 0x41ca0
    return g4;
}

// Address range: 0x41cab - 0x41cc0
int32_t function_41cab(void) {
    // 0x41cab
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x637af040); // 0x41cab
    *v2 = *v2 + 1;
    int32_t result = g4 + (int32_t)&g532 - 0x49f10000; // 0x41cb6
    g4 = result;
    return result;
}

// Address range: 0x41cc0 - 0x41cc7
int32_t function_41cc0(void) {
    // 0x41cc0
    return g4;
}

// Address range: 0x41ccc - 0x41ce6
int32_t function_41ccc(void) {
    // 0x41ccc
    if (g4 != 0) {
        // bb
        g4 = function_42220();
    }
    // 0x41cd4
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 - 32); // 0x41cd4
    g9 = v2;
    int32_t result = g532; // 0x41cd7
    g4 = result;
    g9 = *(int32_t *)(g10 + 4) + v2;
    return result;
}

// Address range: 0x41cf0 - 0x41cf7
int32_t function_41cf0(void) {
    // 0x41cf0
    return g4;
}

// Address range: 0x41d0e - 0x41d0f
int32_t function_41d0e(void) {
    // 0x41d0e
    return g4;
}

// Address range: 0x41d49 - 0x41d4a
int32_t function_41d49(void) {
    // 0x41d49
    return g4;
}

// Address range: 0x41d84 - 0x41d8c
int32_t function_41d84(void) {
    int32_t v1 = g4; // 0x41d84
    char * v2 = (char *)(v1 + 10); // 0x41d84
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41d87
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41d8d - 0x41d95
int32_t function_41d8d(void) {
    int32_t v1 = g4; // 0x41d8d
    char v2 = *(char *)(v1 + 10); // 0x41d8d
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41d8d
    g4 = result;
    uint32_t v3 = g6; // 0x41d90
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41da1 - 0x41da6
int32_t function_41da1(void) {
    // 0x41da1
    return g4;
}

// Address range: 0x41db0 - 0x41db7
int32_t function_41db0(void) {
    // 0x41db0
    return g4;
}

// Address range: 0x41dce - 0x41dd6
int32_t function_41dce(void) {
    int32_t v1 = g4; // 0x41dce
    char * v2 = (char *)(v1 + 10); // 0x41dce
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41dd1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41dd7 - 0x41ddf
int32_t function_41dd7(void) {
    int32_t v1 = g4; // 0x41dd7
    char v2 = *(char *)(v1 + 10); // 0x41dd7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41dd7
    g4 = result;
    uint32_t v3 = g6; // 0x41dda
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41deb - 0x41df0
int32_t function_41deb(void) {
    // 0x41deb
    return g4;
}

// Address range: 0x41df0 - 0x41df7
int32_t function_41df0(void) {
    // 0x41df0
    return g4;
}

// Address range: 0x41dfc - 0x41e10
int32_t function_41dfc(void) {
    // 0x41dfc
    if (g4 != 0) {
        // bb
        g4 = function_42140();
    }
    int32_t result = g532; // 0x41e04
    g4 = result;
    return result;
}

// Address range: 0x41e10 - 0x41e1a
int32_t function_41e10(void) {
    // 0x41e10
    *(int32_t *)(g5 - 40) = g7;
    return g4;
}

// Address range: 0x41e1e - 0x41e36
int32_t function_41e1e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a27b3); // 0x41e1e
    int32_t v2 = *v1 - 1; // 0x41e1e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_42100();
    }
    int32_t result = g532; // 0x41e2a
    g4 = result;
    return result;
}

// Address range: 0x41e40 - 0x41e47
int32_t function_41e40(void) {
    // 0x41e40
    return g4;
}

// Address range: 0x41e4c - 0x41e60
int32_t function_41e4c(void) {
    // 0x41e4c
    if (g4 != 0) {
        // bb
        g4 = function_42170();
    }
    int32_t result = g532; // 0x41e54
    g4 = result;
    return result;
}

// Address range: 0x41e60 - 0x41e83
int32_t function_41e60(void) {
    // 0x41e60
    if ((char)g4 == 0) {
        // bb
        g4 = function_42280();
    }
    int32_t v1 = *(int32_t *)(g10 + 4); // 0x41e68
    g7 = v1;
    int32_t v2 = *(int32_t *)(g5 - 32); // 0x41e6b
    g9 = v2;
    int32_t v3 = (int32_t)*(int16_t *)(v1 + 4 + v2); // 0x41e6e
    g9 = v3;
    *(int32_t *)(g5 - 44) = v3;
    int32_t v4 = 28 * g9; // 0x41e76
    g9 = v4;
    *(int16_t *)(g7 + (v4 | 2)) = (int16_t)g6;
    return g4;
}

// Address range: 0x41e88 - 0x41e98
int32_t function_41e88(void) {
    int32_t v1 = *(int32_t *)(g10 + 4); // 0x41e88
    g7 = v1;
    g9 = (int32_t)&g286;
    *(int32_t *)(g5 - 52) = v1;
    return g4;
}

// Address range: 0x41eaa - 0x41eb2
int32_t function_41eaa(void) {
    int32_t v1 = g4; // 0x41eaa
    char * v2 = (char *)(v1 + 10); // 0x41eaa
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41ead
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41eb3 - 0x41ebb
int32_t function_41eb3(void) {
    int32_t v1 = g4; // 0x41eb3
    char v2 = *(char *)(v1 + 10); // 0x41eb3
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41eb3
    g4 = result;
    uint32_t v3 = g6; // 0x41eb6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41ec7 - 0x41ecc
int32_t function_41ec7(void) {
    // 0x41ec7
    return g4;
}

// Address range: 0x41ed0 - 0x41ef2
int32_t function_41ed0(void) {
    // 0x41ed0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41ef7 - 0x41efc
int32_t function_41ef7(void) {
    // 0x41ef7
    return g4;
}

// Address range: 0x41f00 - 0x41f07
int32_t function_41f00(void) {
    // 0x41f00
    return g4;
}

// Address range: 0x41f0c - 0x41f1c
int32_t function_41f0c(void) {
    // 0x41f0c
    if (g4 != 0) {
        // bb
        g4 = function_41f5a();
    }
    int32_t result = g532; // 0x41f10
    g4 = result;
    return result;
}

// Address range: 0x41f1f - 0x41f27
int32_t function_41f1f(void) {
    int32_t v1 = g4; // 0x41f1f
    char * v2 = (char *)(v1 + 10); // 0x41f1f
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x41f22
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x41f28 - 0x41f30
int32_t function_41f28(void) {
    int32_t v1 = g4; // 0x41f28
    char v2 = *(char *)(v1 + 10); // 0x41f28
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x41f28
    g4 = result;
    uint32_t v3 = g6; // 0x41f2b
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x41f42 - 0x41f55
int32_t function_41f42(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x558b0446); // 0x41f42
    int32_t v2 = *v1 - 1; // 0x41f42
    *v1 = v2;
    int32_t v3 = g7 - 1; // 0x41f48
    g7 = v3;
    if (v2 == 0 || v3 == 0) {
        // 0x41f4a
        g6 = g6 & -0xff01 | (int32_t)&g106;
        unsigned char v4 = (char)g4 + *(char *)&g9; // 0x41f4c
        bool v5; // cf
        *(char *)g9 = v4 + (char)v5;
        int32_t result = g532; // 0x41f4e
        g4 = result;
        return result;
    }
    // 0x41f59
    return g4;
}

// Address range: 0x41f5a - 0x41f7c
int32_t function_41f5a(void) {
    // 0x41f5a
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x41f81 - 0x41f83
int32_t function_41f81(void) {
    // 0x41f81
    return g4;
}

// Address range: 0x41f88 - 0x41f8f
int32_t function_41f88(void) {
    // 0x41f88
    return g4;
}

// Address range: 0x41f94 - 0x41fa8
int32_t function_41f94(void) {
    // 0x41f94
    if (g4 != 0) {
        // bb
        g4 = function_42345();
    }
    int32_t result = g532; // 0x41f9c
    g4 = result;
    return result;
}

// Address range: 0x41fb0 - 0x41fb7
int32_t function_41fb0(void) {
    // 0x41fb0
    return g4;
}

// Address range: 0x41fbc - 0x41fd0
int32_t function_41fbc(void) {
    // 0x41fbc
    if (g4 != 0) {
        // bb
        g4 = function_42371();
    }
    int32_t result = g532; // 0x41fc4
    g4 = result;
    return result;
}

// Address range: 0x41fd0 - 0x41fd7
int32_t function_41fd0(void) {
    // 0x41fd0
    return g4;
}

// Address range: 0x41fe4 - 0x41fe5
int32_t function_41fe4(void) {
    // 0x41fe4
    return g4;
}

// Address range: 0x4200c - 0x42024
int32_t function_4200c(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a27b3); // 0x4200c
    int32_t v2 = *v1 - 1; // 0x4200c
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_422e0();
    }
    int32_t result = g532; // 0x42018
    g4 = result;
    return result;
}

// Address range: 0x42028 - 0x4202f
int32_t function_42028(void) {
    // 0x42028
    return g4;
}

// Address range: 0x42034 - 0x42048
int32_t function_42034(void) {
    // 0x42034
    if (g4 != 0) {
        // bb
        g4 = function_4239d();
    }
    int32_t result = g532; // 0x4203c
    g4 = result;
    return result;
}

// Address range: 0x42050 - 0x42057
int32_t function_42050(void) {
    // 0x42050
    return g4;
}

// Address range: 0x4206e - 0x42076
int32_t function_4206e(void) {
    int32_t v1 = g4; // 0x4206e
    char * v2 = (char *)(v1 + 10); // 0x4206e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42071
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42077 - 0x4207f
int32_t function_42077(void) {
    int32_t v1 = g4; // 0x42077
    char v2 = *(char *)(v1 + 10); // 0x42077
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42077
    g4 = result;
    uint32_t v3 = g6; // 0x4207a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x4208b - 0x42090
int32_t function_4208b(void) {
    // 0x4208b
    return g4;
}

// Address range: 0x42090 - 0x420b2
int32_t function_42090(void) {
    // 0x42090
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x420b7 - 0x420bc
int32_t function_420b7(void) {
    // 0x420b7
    return g4;
}

// Address range: 0x420c0 - 0x420d0
int32_t function_420c0(void) {
    int32_t v1 = *(int32_t *)(g10 + 4); // 0x420c0
    g8 = v1;
    g9 = (int32_t)&g286;
    *(int32_t *)(g5 - 44) = v1;
    return g4;
}

// Address range: 0x420d0 - 0x420f2
int32_t function_420d0(void) {
    // 0x420d0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x420f7 - 0x420fc
int32_t function_420f7(void) {
    // 0x420f7
    return g4;
}

// Address range: 0x42100 - 0x42125
int32_t function_42100(void) {
    // 0x42100
    *(int32_t *)(g5 - 40) = g7;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4212a - 0x42139
int32_t function_4212a(void) {
    int32_t result = (unsigned char)g532; // 0x4212a
    g4 = result;
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    return result;
}

// Address range: 0x42140 - 0x42162
int32_t function_42140(void) {
    // 0x42140
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42167 - 0x4216c
int32_t function_42167(void) {
    // 0x42167
    return g4;
}

// Address range: 0x42170 - 0x42192
int32_t function_42170(void) {
    // 0x42170
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42197 - 0x4219c
int32_t function_42197(void) {
    // 0x42197
    return g4;
}

// Address range: 0x421a3 - 0x421ab
int32_t function_421a3(void) {
    int32_t v1 = g4; // 0x421a3
    char * v2 = (char *)(v1 + 10); // 0x421a3
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x421a6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x421ac - 0x421b4
int32_t function_421ac(void) {
    int32_t v1 = g4; // 0x421ac
    char v2 = *(char *)(v1 + 10); // 0x421ac
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x421ac
    g4 = result;
    uint32_t v3 = g6; // 0x421af
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x421c7 - 0x421d6
int32_t function_421c7(void) {
    unsigned char v1 = g532; // 0x421c7
    g4 = v1;
    int32_t v2; // ebp
    *(char *)(v2 - 44) = v1;
    int32_t result = function_41d49(); // 0x421d1
    g4 = result;
    return result;
}

// Address range: 0x421e3 - 0x421eb
int32_t function_421e3(void) {
    int32_t v1 = g4; // 0x421e3
    char * v2 = (char *)(v1 + 10); // 0x421e3
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x421e6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x421ec - 0x421f4
int32_t function_421ec(void) {
    int32_t v1 = g4; // 0x421ec
    char v2 = *(char *)(v1 + 10); // 0x421ec
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x421ec
    g4 = result;
    uint32_t v3 = g6; // 0x421ef
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42207 - 0x42216
int32_t function_42207(void) {
    unsigned char v1 = g532; // 0x42207
    g9 = v1;
    int32_t v2; // ebp
    *(char *)(v2 - 44) = v1;
    int32_t result = function_41d0e(); // 0x42211
    g4 = result;
    return result;
}

// Address range: 0x42220 - 0x42242
int32_t function_42220(void) {
    // 0x42220
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42247 - 0x4224c
int32_t function_42247(void) {
    // 0x42247
    return g4;
}

// Address range: 0x4225a - 0x42262
int32_t function_4225a(void) {
    int32_t v1 = g4; // 0x4225a
    char * v2 = (char *)(v1 + 10); // 0x4225a
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x4225d
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42263 - 0x4226b
int32_t function_42263(void) {
    int32_t v1 = g4; // 0x42263
    char v2 = *(char *)(v1 + 10); // 0x42263
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42263
    g4 = result;
    uint32_t v3 = g6; // 0x42266
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42277 - 0x4227c
int32_t function_42277(void) {
    // 0x42277
    return g4;
}

// Address range: 0x42280 - 0x42287
int32_t function_42280(void) {
    // 0x42280
    return g4;
}

// Address range: 0x4228c - 0x422a0
int32_t function_4228c(void) {
    // 0x4228c
    if (g4 != 0) {
        // bb
        g4 = function_423c9();
    }
    int32_t result = g532; // 0x42294
    g4 = result;
    return result;
}

// Address range: 0x422a0 - 0x422a7
int32_t function_422a0(void) {
    // 0x422a0
    return g4;
}

// Address range: 0x422be - 0x422c6
int32_t function_422be(void) {
    int32_t v1 = g4; // 0x422be
    char * v2 = (char *)(v1 + 10); // 0x422be
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x422c1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x422c7 - 0x422cf
int32_t function_422c7(void) {
    int32_t v1 = g4; // 0x422c7
    char v2 = *(char *)(v1 + 10); // 0x422c7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x422c7
    g4 = result;
    uint32_t v3 = g6; // 0x422ca
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x422db - 0x422e0
int32_t function_422db(void) {
    // 0x422db
    return g4;
}

// Address range: 0x422e0 - 0x42305
int32_t function_422e0(void) {
    // 0x422e0
    *(int32_t *)(g5 - 40) = g7;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4230a - 0x42319
int32_t function_4230a(void) {
    int32_t result = (unsigned char)g532; // 0x4230a
    g4 = result;
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    return result;
}

// Address range: 0x42323 - 0x4232b
int32_t function_42323(void) {
    int32_t v1 = g4; // 0x42323
    char * v2 = (char *)(v1 + 10); // 0x42323
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42326
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x4232c - 0x42334
int32_t function_4232c(void) {
    int32_t v1 = g4; // 0x4232c
    char v2 = *(char *)(v1 + 10); // 0x4232c
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x4232c
    g4 = result;
    uint32_t v3 = g6; // 0x4232f
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42340 - 0x42345
int32_t function_42340(void) {
    int32_t result = function_41fe4(); // 0x42340
    g4 = result;
    return result;
}

// Address range: 0x42345 - 0x42367
int32_t function_42345(void) {
    // 0x42345
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x4236c - 0x42371
int32_t function_4236c(void) {
    // 0x4236c
    return g4;
}

// Address range: 0x42371 - 0x42393
int32_t function_42371(void) {
    // 0x42371
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42398 - 0x4239d
int32_t function_42398(void) {
    // 0x42398
    return g4;
}

// Address range: 0x4239d - 0x423bf
int32_t function_4239d(void) {
    // 0x4239d
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x423c4 - 0x423c9
int32_t function_423c4(void) {
    // 0x423c4
    return g4;
}

// Address range: 0x423c9 - 0x423eb
int32_t function_423c9(void) {
    // 0x423c9
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x423f0 - 0x423f5
int32_t function_423f0(void) {
    // 0x423f0
    return g4;
}

// Address range: 0x42400 - 0x42451
int32_t function_42400(int32_t a1, int32_t a2) {
    // 0x42400
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4240b
    int64_t v2 = v1; // 0x4240b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x42412
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x42418
    g7 = v4;
    int32_t v5; // 0x42431
    if (v1 == 0) {
        // bb
        g4 = function_42478();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x4241e
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x42426
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x4242b
    g4 = v8;
    int32_t v9 = v8 & (int32_t)&g863; // 0x4242e
    g10 = v9;
    int32_t v10; // 0x4244a
    if (v5 > v9) {
        int32_t v11; // 0x42438
        if ((int16_t)v8 != 0) {
            // bb22
            v11 = function_424a0();
            g4 = v11;
        } else {
            v11 = v8;
        }
        int32_t v12 = v11 - 1; // 0x4243a
        g4 = v12;
        v10 = v12;
    } else {
        v10 = v8;
    }
    int32_t v13 = g6; // 0x42448
    int32_t v14 = *(int32_t *)v13; // 0x42448
    g9 = v14;
    *(int32_t *)(v13 + 4) = v10;
    int32_t result; // 0x4244f
    if (v14 == 0) {
        // bb23
        result = function_424d0();
        g4 = result;
    } else {
        // 0x42448
        result = g4;
    }
    // 0x42451
    return result;
}

// Address range: 0x42478 - 0x42498
int32_t function_42478(void) {
    int32_t v1 = g4; // 0x42478
    g9 = 2;
    int32_t v2 = v1 == 0 ? 2 : v1; // 0x4247f
    g4 = v2;
    int32_t result = 2 * v2; // 0x42490
    while (g7 > result) {
        // 0x42490
        result *= 2;
    }
    // 0x42496
    g4 = result;
    return result;
}

// Address range: 0x424a0 - 0x424d0
int32_t function_424a0(void) {
    int32_t v1 = g7 & (int32_t)&g863; // 0x424a0
    g9 = v1;
    int32_t v2 = g4 + v1; // 0x424b0
    int32_t v3 = ((int32_t)(v2 < 0) + v2) / 2; // 0x424b9
    int32_t v4 = v3 & (int32_t)&g863; // 0x424bb
    while (v1 > v4) {
        // 0x424b0
        v2 = v3 + v1;
        v3 = ((int32_t)(v2 < 0) + v2) / 2;
        v4 = v3 & (int32_t)&g863;
    }
    // 0x424c2
    g4 = v3;
    g7 = v4;
    int32_t v5 = g6; // 0x424c2
    g9 = v5;
    *(int32_t *)(v5 + 4) = v3;
    return g4;
}

// Address range: 0x424d0 - 0x424d1
int32_t function_424d0(void) {
    // 0x424d0
    return g4;
}

// Address range: 0x424f0 - 0x425a5
int32_t function_424f0(int32_t a1) {
    int32_t v1 = g6; // 0x424f6
    g6 = a1;
    int32_t v2 = g10; // 0x424fc
    uint16_t v3 = *(int16_t *)(a1 + 20); // 0x424ff
    int32_t v4 = v3; // 0x424ff
    g4 = v4;
    if (v3 != -1) {
        int32_t v5 = *(int32_t *)(a1 + 4); // 0x42509
        g9 = v5;
        int32_t v6 = 28 * (v4 & (int32_t)&g863); // 0x4250f
        g7 = v6;
        g7 = (int32_t)*(int16_t *)(v5 + (v6 | 2));
        *(int32_t *)(a1 + 24) = v5;
        *(int16_t *)(g6 + 20) = (int16_t)g7;
        g6 = v1;
        g10 = v2;
        return g4;
    }
    int32_t v7 = (int32_t)*(int16_t *)(a1 + 22); // 0x42530
    g7 = v7;
    int32_t v8 = *(int32_t *)(a1 + 8); // 0x42534
    g9 = v8;
    int32_t v9 = v7 & (int32_t)&g863; // 0x42537
    g10 = v9;
    if (v9 < v8) {
        // bb
        g4 = function_425c8();
    }
    int32_t v10 = v8 >= 0 == (v8 != 0) ? 0 : (int32_t)&g863; // 0x4254e
    g7 = v10;
    g4 = -1;
    if (v8 > v10) {
        // bb31
        g4 = function_425ad();
    }
    int32_t v11 = g6 + 4; // 0x4255e
    g4 = v11;
    g4 = function_42400(v11, 1);
    int32_t v12 = g6; // 0x42571
    int32_t v13 = (int32_t)*(int16_t *)(v12 + 22); // 0x42571
    g4 = v13;
    int32_t v14 = *(int32_t *)(v12 + 8); // 0x42575
    g9 = v14;
    int32_t v15 = v13 & (int32_t)&g863; // 0x42578
    g7 = v15;
    if (v15 < v14) {
        // bb32
        g4 = function_425e0();
    }
    int32_t v16 = v14 >= 0 == (v14 != 0) ? 0 : (int32_t)&g863; // 0x4258b
    g7 = v16;
    g4 = -1;
    int32_t result; // 0x42599
    if (v14 > v16) {
        // bb33
        result = function_425ad();
        g4 = result;
    } else {
        result = -1;
    }
    // 0x4259b
    return result;
}

// Address range: 0x425ad - 0x425c1
int32_t function_425ad(void) {
    int32_t v1 = g6; // 0x425ad
    g9 = *(int32_t *)(v1 + 4);
    *(int16_t *)(v1 + 22) = (int16_t)g4;
    *(int32_t *)(g6 + 24) = g9;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x425c8 - 0x425e0
int32_t function_425c8(void) {
    int32_t v1 = g7 + 1; // 0x425c8
    int32_t v2 = v1 & (int32_t)&g863; // 0x425cb
    g10 = v2;
    int32_t v3 = g9; // 0x425ce
    int32_t v4 = v3 - v2; // 0x425ce
    int32_t result = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v1 : g4; // 0x425d0
    g4 = result;
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v2 : (int32_t)&g863; // 0x425d8
    g7 = v5;
    return result;
}

// Address range: 0x425e0 - 0x425fa
int32_t function_425e0(void) {
    int32_t v1 = g4 + 1; // 0x425e0
    int32_t v2 = v1 & (int32_t)&g863; // 0x425e8
    g10 = v2;
    int32_t v3 = g9; // 0x425eb
    int32_t v4 = v3 - v2; // 0x425eb
    int32_t result = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v1 : -1; // 0x425ed
    g4 = result;
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v2 : (int32_t)&g863; // 0x425f5
    g7 = v5;
    return result;
}

// Address range: 0x42600 - 0x4285f
int32_t function_42600(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x42603
    int32_t v2 = g10; // 0x42604
    int32_t v3 = g6; // 0x42605
    g6 = a1;
    int32_t v4 = a2 % 0x10000; // 0x4260c
    g10 = v4;
    int32_t v5; // 0x4275f
    int32_t v6; // 0x42762
    int32_t v7; // 0x4266d
    int32_t v8; // 0x426a9
    int32_t v9; // 0x42610
    while (true) {
      lab_0x42610_2:;
        uint16_t v10 = *(int16_t *)(a1 + 16); // 0x42610
        v9 = v10;
        g4 = v9;
        if ((int16_t)v4 == v10) {
            v7 = a1;
            // break -> 0x42667
            break;
        }
        unsigned char v11 = g532; // 0x42619
        g9 = v11;
        int32_t v12; // 0x42633
        if (v11 == 0) {
            // bb
            g4 = function_42940();
            v12 = g10;
        } else {
            v12 = v4;
        }
        // 0x42628
        g4 = (int32_t)&g286;
        int32_t v13; // 0x42639
        if ((int16_t)v12 != -1) {
            int32_t v14 = 28 * (v12 & (int32_t)&g863); // 0x42636
            g4 = v14;
            v13 = *(int32_t *)(g6 + 4) + v14;
            g4 = v13;
        } else {
            v13 = (int32_t)&g286;
        }
        int32_t v15 = (int32_t)*(int16_t *)(v13 + 4); // 0x4263e
        g8 = v15;
        int32_t v16; // 0x42653
        if ((char)g9 == 0) {
            // bb74
            g4 = function_42900();
            v16 = g8;
        } else {
            v16 = v15;
        }
        // 0x42648
        g4 = (int32_t)&g286;
        int32_t v17; // 0x42659
        if ((int16_t)v16 != -1) {
            int32_t v18 = v16 & (int32_t)&g863; // 0x42653
            g8 = v18;
            int32_t v19 = 28 * v18; // 0x42656
            g4 = v19;
            v17 = *(int32_t *)(g6 + 4) + v19;
            g4 = v17;
        } else {
            v17 = (int32_t)&g286;
        }
        // 0x4265c
        if (*(int16_t *)(v17 + 6) != 0) {
            int32_t v20 = g6; // 0x42663
            int32_t v21 = (int32_t)*(int16_t *)(v20 + 16); // 0x42663
            g4 = v21;
            v7 = v20;
            v9 = v21;
            goto lab_0x42667;
        }
        unsigned char v22 = g532; // 0x42680
        int32_t v23 = v22; // 0x42680
        g4 = v23;
        int32_t result; // 0x42689
        if (v22 == 0) {
            // bb76
            result = function_42880();
            g4 = result;
        } else {
            result = v23;
        }
        int32_t v24 = g10; // 0x4268f
        g9 = (int32_t)&g286;
        int32_t v25; // 0x426a0
        if ((int16_t)v24 != -1) {
            int32_t v26 = 28 * (v24 & (int32_t)&g863); // 0x4269d
            g9 = v26;
            v25 = *(int32_t *)(g6 + 4) + v26;
            g9 = v25;
        } else {
            v25 = (int32_t)&g286;
        }
        uint16_t v27 = *(int16_t *)(v25 + 4); // 0x426a3
        int32_t v28 = v27; // 0x426a3
        g8 = v28;
        v8 = v28 & (int32_t)&g863;
        g9 = v8;
        if ((char)result == 0) {
            // 0x42858
            return result;
        }
        // 0x426b5
        g9 = (int32_t)&g286;
        int32_t v29; // 0x426c4
        if (v27 != -1) {
            int32_t v30 = 28 * v8; // 0x426c0
            g9 = v30;
            v29 = *(int32_t *)(g6 + 4) + v30;
            g9 = v29;
        } else {
            v29 = (int32_t)&g286;
        }
        uint16_t v31 = *(int16_t *)(v29 + 4); // 0x426c9
        int32_t v32 = v31; // 0x426c9
        g9 = v32;
        g7 = (int32_t)&g286;
        int32_t v33; // 0x426e2
        if (v27 != -1) {
            int32_t v34 = 28 * v8; // 0x426de
            g7 = v34;
            v33 = *(int32_t *)(g6 + 4) + v34;
            g7 = v33;
        } else {
            v33 = (int32_t)&g286;
        }
        uint16_t v35 = *(int16_t *)(v33 + 4); // 0x426e5
        g7 = (int32_t)&g286;
        int32_t v36; // 0x42708
        if (v35 != -1) {
            int32_t v37 = 28 * (int32_t)v35; // 0x42705
            g7 = v37;
            v36 = *(int32_t *)(g6 + 4) + v37;
            g7 = v36;
        } else {
            v36 = (int32_t)&g286;
        }
        // 0x4270b
        g7 = (int32_t)&g286;
        if (v27 != *(int16_t *)v36) {
            int32_t v38; // 0x427a9
            if (v31 != -1) {
                int32_t v39 = 28 * (v32 & (int32_t)&g863); // 0x427a6
                g7 = v39;
                v38 = *(int32_t *)(g6 + 4) + v39;
                g7 = v38;
            } else {
                v38 = (int32_t)&g286;
            }
            uint16_t v40 = *(int16_t *)v38; // 0x427ae
            int32_t v41 = v40; // 0x427ae
            g7 = v41;
            g4 = (int32_t)&g286;
            int32_t v42; // 0x427c8
            if (v40 != -1) {
                int32_t v43 = 28 * (v41 & (int32_t)&g863); // 0x427c5
                g4 = v43;
                v42 = *(int32_t *)(g6 + 4) + v43;
                g4 = v42;
            } else {
                v42 = (int32_t)&g286;
            }
            // 0x427cb
            if (*(int16_t *)(v42 + 6) == 0) {
                v6 = v32;
                v5 = v41;
                goto lab_0x4275b;
            } else {
                unsigned char v44 = g532; // 0x427d2
                g7 = v44;
                int32_t v45; // 0x427e1
                if (v44 == 0) {
                    // bb85
                    g4 = function_42cf0();
                    v45 = g10;
                } else {
                    v45 = v24;
                }
                // 0x427e1
                g4 = (int32_t)&g286;
                int32_t v46; // 0x427f2
                if ((int16_t)v45 != -1) {
                    int32_t v47 = 28 * (v45 & (int32_t)&g863); // 0x427ef
                    g4 = v47;
                    v46 = *(int32_t *)(g6 + 4) + v47;
                    g4 = v46;
                } else {
                    v46 = (int32_t)&g286;
                }
                uint16_t v48 = *(int16_t *)(v46 + 4); // 0x427f5
                int32_t v49 = v48; // 0x427f5
                g4 = v49;
                if ((char)g7 == 0) {
                    // bb86
                    g4 = function_42ca0();
                }
                // 0x42805
                g4 = (int32_t)&g286;
                int32_t v50; // 0x42818
                if (v48 != -1) {
                    int32_t v51 = 28 * v49; // 0x42815
                    g4 = v51;
                    v50 = *(int32_t *)(g6 + 4) + v51;
                    g4 = v50;
                } else {
                    v50 = (int32_t)&g286;
                }
                // 0x4281b
                if ((int16_t)g10 == *(int16_t *)v50) {
                    // bb88
                    g4 = function_42c00();
                }
                int32_t v52 = 28 * v8; // 0x42824
                g4 = v52;
                g9 &= (int32_t)&g863;
                *(int16_t *)((v52 | 6) + *(int32_t *)(g6 + 4)) = 1;
                int32_t v53 = 28 * g9; // 0x42834
                g4 = v53;
                int32_t v54 = *(int32_t *)(g6 + 4) + v53; // 0x42837
                g4 = v54;
                *(int16_t *)(v54 + 6) = 0;
                g4 = function_3fae0(0x1000000 * g6 / 0x1000000, g9);
                goto lab_0x42610;
            }
        } else {
            int32_t v55; // 0x4272d
            if (v31 != -1) {
                int32_t v56 = 28 * (v32 & (int32_t)&g863); // 0x4272a
                g7 = v56;
                v55 = *(int32_t *)(g6 + 4) + v56;
                g7 = v55;
            } else {
                v55 = (int32_t)&g286;
            }
            uint16_t v57 = *(int16_t *)(v55 + 2); // 0x42732
            int32_t v58 = v57; // 0x42732
            g7 = v58;
            g4 = (int32_t)&g286;
            int32_t v59; // 0x4274d
            if (v57 != -1) {
                int32_t v60 = 28 * (v58 & (int32_t)&g863); // 0x4274a
                g4 = v60;
                v59 = *(int32_t *)(g6 + 4) + v60;
                g4 = v59;
            } else {
                v59 = (int32_t)&g286;
            }
            // 0x42750
            if (*(int16_t *)(v59 + 6) != 0) {
                // bb82
                g4 = function_42a70();
                v6 = g9;
                v5 = g7;
            } else {
                v6 = v32;
                v5 = v58;
            }
            goto lab_0x4275b;
        }
    }
    goto lab_0x42667;
  lab_0x4275b:;
    int32_t v63 = 28 * v8; // 0x4275b
    g4 = v63;
    g10 = v6;
    g7 = 28 * (v5 & (int32_t)&g863);
    *(int16_t *)((v63 | 6) + *(int32_t *)(g6 + 4)) = 1;
    int32_t v64 = g9 & (int32_t)&g863; // 0x42770
    g4 = v64;
    int32_t v65 = *(int32_t *)(g6 + 4) + g7; // 0x42773
    g7 = v65;
    g4 = 28 * v64;
    *(int16_t *)(v65 + 6) = 1;
    int32_t v66 = *(int32_t *)(g6 + 4) + g4; // 0x4277f
    g4 = v66;
    *(int16_t *)(v66 + 6) = 0;
    goto lab_0x42610;
  lab_0x42610:
    // 0x42610
    v4 = g10;
    a1 = g6;
    goto lab_0x42610_2;
  lab_0x42667:;
    int32_t v61 = 28 * (v9 & (int32_t)&g863); // 0x4266a
    g4 = v61;
    int32_t v62 = *(int32_t *)(v7 + 4) + v61; // 0x4266d
    g4 = v62;
    *(int16_t *)(v62 + 6) = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x42864 - 0x42878
int32_t function_42864(void) {
    // 0x42864
    if (g4 != 0) {
        // bb
        g4 = function_42b30();
    }
    int32_t result = g532; // 0x4286c
    g4 = result;
    return result;
}

// Address range: 0x42880 - 0x42887
int32_t function_42880(void) {
    // 0x42880
    return g4;
}

// Address range: 0x4288c - 0x428a0
int32_t function_4288c(void) {
    // 0x4288c
    if (g4 != 0) {
        // bb
        g4 = function_42b60();
    }
    int32_t result = g532; // 0x42894
    g4 = result;
    return result;
}

// Address range: 0x428a0 - 0x428aa
int32_t function_428a0(void) {
    // 0x428a0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x428ae - 0x428c6
int32_t function_428ae(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x428ae
    int32_t v2 = *v1 - 1; // 0x428ae
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_42b90();
    }
    int32_t result = g532; // 0x428ba
    g4 = result;
    return result;
}

// Address range: 0x428d0 - 0x428da
int32_t function_428d0(void) {
    // 0x428d0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x428de - 0x428f6
int32_t function_428de(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x428de
    int32_t v2 = *v1 - 1; // 0x428de
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_42af0();
    }
    int32_t result = g532; // 0x428ea
    g4 = result;
    return result;
}

// Address range: 0x42900 - 0x42907
int32_t function_42900(void) {
    // 0x42900
    return g4;
}

// Address range: 0x4291e - 0x42926
int32_t function_4291e(void) {
    int32_t v1 = g4; // 0x4291e
    char * v2 = (char *)(v1 + 10); // 0x4291e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42921
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42927 - 0x4292f
int32_t function_42927(void) {
    int32_t v1 = g4; // 0x42927
    char v2 = *(char *)(v1 + 10); // 0x42927
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42927
    g4 = result;
    uint32_t v3 = g6; // 0x4292a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x4293b - 0x42940
int32_t function_4293b(void) {
    // 0x4293b
    return g4;
}

// Address range: 0x42940 - 0x42947
int32_t function_42940(void) {
    // 0x42940
    return g4;
}

// Address range: 0x4294c - 0x42960
int32_t function_4294c(void) {
    int32_t v1 = g4; // 0x4294c
    int32_t result; // 0x4294e
    if (v1 != 0) {
        // bb
        result = function_42bd0();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x42954
    g9 = g532;
    return result;
}

// Address range: 0x42960 - 0x4296a
int32_t function_42960(void) {
    // 0x42960
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x4296e - 0x42986
int32_t function_4296e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x4296e
    int32_t v2 = *v1 - 1; // 0x4296e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_42c60();
    }
    int32_t result = g532; // 0x4297a
    g4 = result;
    return result;
}

// Address range: 0x42990 - 0x4299d
int32_t function_42990(void) {
    // 0x42990
    *(int32_t *)(g5 - 36) = g9;
    *(int32_t *)(g5 - 40) = g7;
    return g4;
}

// Address range: 0x429af - 0x429b2
int32_t function_429af(void) {
    // 0x429af
    return g4;
}

// Address range: 0x429b3 - 0x429bb
int32_t function_429b3(void) {
    int32_t v1 = g4; // 0x429b3
    char * v2 = (char *)(v1 + 10); // 0x429b3
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x429b6
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x429bc - 0x429c4
int32_t function_429bc(void) {
    int32_t v1 = g4; // 0x429bc
    char v2 = *(char *)(v1 + 10); // 0x429bc
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x429bc
    g4 = result;
    uint32_t v3 = g6; // 0x429bf
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x429d7 - 0x429e2
int32_t function_429d7(void) {
    // 0x429d7
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x429e8 - 0x429f5
int32_t function_429e8(void) {
    // 0x429e8
    *(int32_t *)(g5 - 36) = g9;
    *(int32_t *)(g5 - 40) = g7;
    return g4;
}

// Address range: 0x42a07 - 0x42a0a
int32_t function_42a07(void) {
    // 0x42a07
    return g4;
}

// Address range: 0x42a0b - 0x42a13
int32_t function_42a0b(void) {
    int32_t v1 = g4; // 0x42a0b
    char * v2 = (char *)(v1 + 10); // 0x42a0b
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42a0e
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42a14 - 0x42a1c
int32_t function_42a14(void) {
    int32_t v1 = g4; // 0x42a14
    char v2 = *(char *)(v1 + 10); // 0x42a14
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42a14
    g4 = result;
    uint32_t v3 = g6; // 0x42a17
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42a2f - 0x42a3a
int32_t function_42a2f(void) {
    // 0x42a2f
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 40);
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x42a40 - 0x42a4a
int32_t function_42a40(void) {
    // 0x42a40
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x42a4e - 0x42a66
int32_t function_42a4e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x42a4e
    int32_t v2 = *v1 - 1; // 0x42a4e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_42e00();
    }
    int32_t result = g532; // 0x42a5a
    g4 = result;
    return result;
}

// Address range: 0x42a70 - 0x42af0
int32_t function_42a70(void) {
    unsigned char v1 = g532; // 0x42a70
    g7 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_42dd0();
    }
    int32_t v2 = g10; // 0x42a7f
    g4 = (int32_t)&g286;
    int32_t v3; // 0x42a90
    if ((int16_t)v2 != -1) {
        int32_t v4 = 28 * (v2 & (int32_t)&g863); // 0x42a8d
        g4 = v4;
        v3 = *(int32_t *)(g6 + 4) + v4;
        g4 = v3;
    } else {
        v3 = (int32_t)&g286;
    }
    uint16_t v5 = *(int16_t *)(v3 + 4); // 0x42a93
    g4 = v5;
    *(int16_t *)(g5 - 30) = v5;
    if ((char)g7 == 0) {
        // bb8
        g4 = function_42d80();
    }
    int16_t * v6 = (int16_t *)(g5 - 30); // 0x42aa3
    g4 = (int32_t)&g286;
    int32_t v7; // 0x42ab6
    if (*v6 != -1) {
        int32_t v8 = 28 * (int32_t)*v6; // 0x42ab3
        g4 = v8;
        v7 = *(int32_t *)(g6 + 4) + v8;
        g4 = v7;
    } else {
        v7 = (int32_t)&g286;
    }
    // 0x42ab9
    if ((int16_t)g10 == *(int16_t *)(v7 + 2)) {
        // bb10
        g4 = function_42d20();
    }
    int32_t v9 = 28 * *(int32_t *)(g5 - 28); // 0x42ac3
    g4 = v9;
    g9 &= (int32_t)&g863;
    *(int16_t *)(v9 + 6 + *(int32_t *)(g6 + 4)) = 1;
    int32_t v10 = 28 * g9; // 0x42ad3
    g4 = v10;
    int32_t v11 = *(int32_t *)(g6 + 4) + v10; // 0x42ad6
    g4 = v11;
    *(int16_t *)(v11 + 6) = 0;
    int32_t result = function_3ffc0(g6, g9); // 0x42ae6
    g4 = result;
    return result;
}

// Address range: 0x42af0 - 0x42b15
int32_t function_42af0(void) {
    // 0x42af0
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42b1a - 0x42b29
int32_t function_42b1a(void) {
    int32_t result = (unsigned char)g532; // 0x42b1a
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x42b30 - 0x42b52
int32_t function_42b30(void) {
    // 0x42b30
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42b57 - 0x42b5c
int32_t function_42b57(void) {
    // 0x42b57
    return g4;
}

// Address range: 0x42b60 - 0x42b82
int32_t function_42b60(void) {
    // 0x42b60
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42b87 - 0x42b8c
int32_t function_42b87(void) {
    // 0x42b87
    return g4;
}

// Address range: 0x42b90 - 0x42bb5
int32_t function_42b90(void) {
    // 0x42b90
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42bba - 0x42bc9
int32_t function_42bba(void) {
    int32_t result = (unsigned char)g532; // 0x42bba
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x42bd0 - 0x42bf2
int32_t function_42bd0(void) {
    // 0x42bd0
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42bf7 - 0x42bfc
int32_t function_42bf7(void) {
    // 0x42bf7
    return g4;
}

// Address range: 0x42c00 - 0x42c5c
int32_t function_42c00(void) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x42c00
    g9 = v1;
    g4 = function_3ffc0(g6, v1);
    unsigned char v2 = g532; // 0x42c0f
    g9 = v2;
    if (v2 == 0) {
        // bb
        g4 = function_42f20();
    }
    // 0x42c1e
    g4 = (int32_t)&g286;
    int32_t v3; // 0x42c2d
    if ((int16_t)g8 != -1) {
        int32_t v4 = 28 * *(int32_t *)(g5 - 28); // 0x42c29
        g4 = v4;
        v3 = *(int32_t *)(g6 + 4) + v4;
        g4 = v3;
    } else {
        v3 = (int32_t)&g286;
    }
    int32_t v5 = (int32_t)*(int16_t *)(v3 + 4); // 0x42c32
    g10 = v5;
    int32_t v6; // 0x42c3c
    if ((char)g9 == 0) {
        // bb6
        g4 = function_42ee0();
        v6 = g10;
    } else {
        v6 = v5;
    }
    int32_t v7; // 0x42c46
    if ((int16_t)v6 == -1) {
        // bb7
        g4 = function_42f8b();
        v7 = g10;
    } else {
        v7 = v6;
    }
    int32_t v8 = 28 * (v7 & (int32_t)&g863); // 0x42c49
    g4 = v8;
    int32_t result = *(int32_t *)(g6 + 4) + v8; // 0x42c4c
    g4 = result;
    g9 = result;
    g9 = (int32_t)*(int16_t *)(result + 4);
    g10 = g8;
    return result;
}

// Address range: 0x42c60 - 0x42c85
int32_t function_42c60(void) {
    // 0x42c60
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42c8a - 0x42c99
int32_t function_42c8a(void) {
    int32_t result = (unsigned char)g532; // 0x42c8a
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x42ca0 - 0x42caa
int32_t function_42ca0(void) {
    // 0x42ca0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x42cb9 - 0x42cbc
int32_t function_42cb9(void) {
    // 0x42cb9
    return g4;
}

// Address range: 0x42cbd - 0x42cc5
int32_t function_42cbd(void) {
    int32_t v1 = g4; // 0x42cbd
    char * v2 = (char *)(v1 + 10); // 0x42cbd
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42cc0
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42cc6 - 0x42cce
int32_t function_42cc6(void) {
    int32_t v1 = g4; // 0x42cc6
    char v2 = *(char *)(v1 + 10); // 0x42cc6
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42cc6
    g4 = result;
    uint32_t v3 = g6; // 0x42cc9
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42ce1 - 0x42ce9
int32_t function_42ce1(void) {
    // 0x42ce1
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x42cf0 - 0x42cfa
int32_t function_42cf0(void) {
    // 0x42cf0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x42cfe - 0x42d16
int32_t function_42cfe(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x42cfe
    int32_t v2 = *v1 - 1; // 0x42cfe
    *v1 = v2;
    int32_t result; // 0x42d04
    if (v2 != 0) {
        // bb
        result = function_42e40();
        g4 = result;
    } else {
        // 0x42cfe
        result = g4;
    }
    // 0x42d0a
    g7 = g532;
    return result;
}

// Address range: 0x42d20 - 0x42d7c
int32_t function_42d20(void) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x42d20
    g9 = v1;
    g4 = function_3fae0(g6, v1);
    unsigned char v2 = g532; // 0x42d2f
    g9 = v2;
    if (v2 == 0) {
        // bb
        g4 = function_42ec0();
    }
    // 0x42d3e
    g4 = (int32_t)&g286;
    int32_t v3; // 0x42d4d
    if ((int16_t)g8 != -1) {
        int32_t v4 = 28 * *(int32_t *)(g5 - 28); // 0x42d49
        g4 = v4;
        v3 = *(int32_t *)(g6 + 4) + v4;
        g4 = v3;
    } else {
        v3 = (int32_t)&g286;
    }
    int32_t v5 = (int32_t)*(int16_t *)(v3 + 4); // 0x42d52
    g10 = v5;
    int32_t v6; // 0x42d5c
    if ((char)g9 == 0) {
        // bb6
        g4 = function_42e80();
        v6 = g10;
    } else {
        v6 = v5;
    }
    int32_t v7; // 0x42d66
    if ((int16_t)v6 == -1) {
        // bb7
        g4 = function_42f79();
        v7 = g10;
    } else {
        v7 = v6;
    }
    int32_t v8 = 28 * (v7 & (int32_t)&g863); // 0x42d69
    g10 = v8;
    int32_t result = *(int32_t *)(g6 + 4) + v8; // 0x42d6c
    g10 = result;
    g4 = result;
    g9 = (int32_t)*(int16_t *)(result + 4);
    g10 = g8;
    return result;
}

// Address range: 0x42d80 - 0x42d8a
int32_t function_42d80(void) {
    // 0x42d80
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x42d99 - 0x42d9c
int32_t function_42d99(void) {
    // 0x42d99
    return g4;
}

// Address range: 0x42d9d - 0x42da5
int32_t function_42d9d(void) {
    int32_t v1 = g4; // 0x42d9d
    char * v2 = (char *)(v1 + 10); // 0x42d9d
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42da0
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42da6 - 0x42dae
int32_t function_42da6(void) {
    int32_t v1 = g4; // 0x42da6
    char v2 = *(char *)(v1 + 10); // 0x42da6
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42da6
    g4 = result;
    uint32_t v3 = g6; // 0x42da9
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42dc1 - 0x42dc9
int32_t function_42dc1(void) {
    // 0x42dc1
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x42dd0 - 0x42dda
int32_t function_42dd0(void) {
    // 0x42dd0
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x42dde - 0x42df6
int32_t function_42dde(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x42dde
    int32_t v2 = *v1 - 1; // 0x42dde
    *v1 = v2;
    int32_t result; // 0x42de4
    if (v2 != 0) {
        // bb
        result = function_42f40();
        g4 = result;
    } else {
        // 0x42dde
        result = g4;
    }
    // 0x42dea
    g7 = g532;
    return result;
}

// Address range: 0x42e00 - 0x42e25
int32_t function_42e00(void) {
    // 0x42e00
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42e2a - 0x42e39
int32_t function_42e2a(void) {
    int32_t result = (unsigned char)g532; // 0x42e2a
    g4 = result;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return result;
}

// Address range: 0x42e40 - 0x42e65
int32_t function_42e40(void) {
    // 0x42e40
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42e6a - 0x42e79
int32_t function_42e6a(void) {
    // 0x42e6a
    g7 = (unsigned char)g532;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x42e80 - 0x42e87
int32_t function_42e80(void) {
    // 0x42e80
    return g4;
}

// Address range: 0x42e9e - 0x42ea6
int32_t function_42e9e(void) {
    int32_t v1 = g4; // 0x42e9e
    char * v2 = (char *)(v1 + 10); // 0x42e9e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42ea1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42ea7 - 0x42eaf
int32_t function_42ea7(void) {
    int32_t v1 = g4; // 0x42ea7
    char v2 = *(char *)(v1 + 10); // 0x42ea7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42ea7
    g4 = result;
    uint32_t v3 = g6; // 0x42eaa
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42ebb - 0x42ec0
int32_t function_42ebb(void) {
    // 0x42ebb
    return g4;
}

// Address range: 0x42ec0 - 0x42ec7
int32_t function_42ec0(void) {
    // 0x42ec0
    return g4;
}

// Address range: 0x42ecc - 0x42ee0
int32_t function_42ecc(void) {
    int32_t v1 = g4; // 0x42ecc
    int32_t result; // 0x42ece
    if (v1 != 0) {
        // bb
        result = function_42f9d();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x42ed4
    g9 = g532;
    return result;
}

// Address range: 0x42ee0 - 0x42ee7
int32_t function_42ee0(void) {
    // 0x42ee0
    return g4;
}

// Address range: 0x42efe - 0x42f06
int32_t function_42efe(void) {
    int32_t v1 = g4; // 0x42efe
    char * v2 = (char *)(v1 + 10); // 0x42efe
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x42f01
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x42f07 - 0x42f0f
int32_t function_42f07(void) {
    int32_t v1 = g4; // 0x42f07
    char v2 = *(char *)(v1 + 10); // 0x42f07
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x42f07
    g4 = result;
    uint32_t v3 = g6; // 0x42f0a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x42f1b - 0x42f20
int32_t function_42f1b(void) {
    // 0x42f1b
    return g4;
}

// Address range: 0x42f20 - 0x42f27
int32_t function_42f20(void) {
    // 0x42f20
    return g4;
}

// Address range: 0x42f2c - 0x42f40
int32_t function_42f2c(void) {
    int32_t v1 = g4; // 0x42f2c
    int32_t result; // 0x42f2e
    if (v1 != 0) {
        // bb
        result = function_42fc9();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x42f34
    g9 = g532;
    return result;
}

// Address range: 0x42f40 - 0x42f65
int32_t function_42f40(void) {
    // 0x42f40
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42f6a - 0x42f79
int32_t function_42f6a(void) {
    // 0x42f6a
    g7 = (unsigned char)g532;
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x42f79 - 0x42f8b
int32_t function_42f79(void) {
    // 0x42f79
    g10 = (int32_t)&g286;
    int32_t result = *(int32_t *)(g6 + 4) + 0x1bffe4; // 0x42f81
    g4 = result;
    return result;
}

// Address range: 0x42f8b - 0x42f9d
int32_t function_42f8b(void) {
    // 0x42f8b
    g9 = (int32_t)&g286;
    int32_t result = *(int32_t *)(g6 + 4) + 0x1bffe4; // 0x42f93
    g4 = result;
    return result;
}

// Address range: 0x42f9d - 0x42fbf
int32_t function_42f9d(void) {
    // 0x42f9d
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42fc4 - 0x42fc9
int32_t function_42fc4(void) {
    // 0x42fc4
    return g4;
}

// Address range: 0x42fc9 - 0x42feb
int32_t function_42fc9(void) {
    // 0x42fc9
    *(int16_t *)&g286 = (int16_t)&g863;
    *(int16_t *)&g287 = (int16_t)&g863;
    *(int16_t *)&g288 = (int16_t)&g863;
    return g4;
}

// Address range: 0x42ff0 - 0x42ff5
int32_t function_42ff0(void) {
    // 0x42ff0
    return g4;
}

// Address range: 0x43000 - 0x43147
int32_t function_43000(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x43003
    int32_t v2 = g10; // 0x43004
    int32_t v3 = g6; // 0x43005
    g6 = a1;
    g10 = a2;
    uint16_t v4 = *(int16_t *)(a1 + 16); // 0x4300f
    int32_t v5 = v4; // 0x4300f
    g9 = v5;
    int32_t v6; // 0x43021
    int32_t v7;
    if (v4 == -1) {
        // bb
        g4 = function_431c9();
        v7 = g6;
        v6 = g10;
    } else {
        v7 = a1;
        v6 = a2;
    }
    int32_t v8 = v7;
    int32_t v9; // 0x4308c
    int32_t v10; // 0x43093
    int32_t v11; // 0x43096
    int32_t v12; // 0x43099
    int32_t result; // 0x4305f
    while (true) {
        int32_t * v13 = (int32_t *)(v8 + 4); // 0x43051
        char v14 = g532; // 0x43030
        int32_t v15 = v5;
        int32_t v16; // 0x43057
        while (true) {
            // 0x43051
            g10 = v15;
            v16 = 28 * (v15 & (int32_t)&g863);
            g8 = v16;
            g9 = v6;
            result = (v16 | 8) + *v13;
            g4 = result;
            if ((char)result == 0) {
                // break -> 0x4306f
                break;
            }
            if (v14 == 0) {
                return result;
            }
            int32_t v17 = *v13; // 0x4303d
            g4 = v17;
            g9 = 1;
            uint16_t v18 = *(int16_t *)(v17 + v16); // 0x43045
            int32_t v19 = v18; // 0x43045
            g4 = v19;
            if (v18 == -1) {
                v12 = v8;
                v10 = v16;
                v9 = v15;
                v11 = 1;
                goto lab_0x4308c_2;
            }
            v15 = v19;
        }
        int32_t v20; // 0x4307c
        int32_t v21; // 0x43081
        if (v14 == 0) {
            // bb39
            g4 = function_43180();
            v21 = g8;
            v20 = g6;
        } else {
            v21 = v16;
            v20 = v8;
        }
        int32_t v22 = *(int32_t *)(v20 + 4); // 0x4307c
        g4 = v22;
        g9 = 0;
        uint16_t v23 = *(int16_t *)(v21 + 2 + v22); // 0x43081
        int32_t v24 = v23; // 0x43081
        g4 = v24;
        if (v23 == -1) {
            // 0x4307c
            v12 = v20;
            v10 = v21;
            v9 = g10;
            v11 = 0;
            goto lab_0x4308c_2;
        }
        v8 = v20;
        v5 = v24;
    }
    // 0x43140
    return result;
  lab_0x4308c_2:
    // 0x4308c
    g10 = v6;
    int32_t v25 = function_424f0(0x1000000 * v12 / 0x1000000); // 0x4309c
    g4 = v25;
    int32_t v26 = v25 & (int32_t)&g863; // 0x430a1
    g8 = v26;
    int32_t v27 = 28 * v26; // 0x430ab
    g7 = v27;
    g8 = v9 % 0x10000;
    int32_t v28 = *(int32_t *)(g6 + 4) + v27; // 0x430b5
    g4 = v28;
    *(int16_t *)(v28 + 4) = (int16_t)v9;
    *(int16_t *)(g4 + 2) = (int16_t)&g863;
    *(int16_t *)g4 = (int16_t)&g863;
    *(int16_t *)(g4 + 6) = 0;
    g9 = v11;
    int32_t v29; // 0x430da
    if ((int16_t)g8 == -1) {
        // bb40
        g4 = function_431fa();
        v29 = g9;
        goto lab_0x430da;
    } else {
        v29 = v11;
        goto lab_0x430da;
    }
  lab_0x430da:;
    int32_t v30 = *(int32_t *)(g6 + 4); // 0x430dc
    g4 = v30;
    int32_t result2 = v25 % 0x10000; // 0x430df
    g8 = result2;
    g9 = v10;
    int32_t v31; // 0x430ec
    int32_t v32; // 0x430e6
    int32_t v33; // 0x430ec
    if ((char)v29 != 0) {
        // bb41
        v32 = function_431c0();
        g4 = v32;
        v33 = g9;
        v31 = g8;
        goto lab_0x430ec;
    } else {
        v33 = v10;
        v32 = v30;
        v31 = result2;
        goto lab_0x430ec;
    }
  lab_0x430ec:
    // 0x430ec
    *(int16_t *)(v33 + 2 + v32) = (int16_t)v31;
    g9 = v26;
    g4 = function_42600(0x1000000 * g6 / 0x1000000, v26);
    int16_t * v34 = (int16_t *)(g6 + 18); // 0x43103
    *v34 = *v34 + 1;
    int32_t v35 = 0x1000000 * g7 / 0x1000000; // 0x43108
    g7 = v35;
    int32_t v36 = *(int32_t *)(g6 + 4) + v35; // 0x4310b
    g7 = v36;
    int32_t v37 = v36 + 8; // 0x4310e
    if (v37 == 0) {
        goto lab_0x43130;
    } else {
        int32_t v38 = g10; // 0x43113
        int32_t v39 = *(int32_t *)v38; // 0x43113
        g4 = v39;
        g9 = *(int32_t *)(v38 + 4);
        *(int32_t *)v37 = v39;
        *(int32_t *)(g7 + 12) = g9;
        int32_t v40 = *(int32_t *)(g10 + 8); // 0x4311e
        g4 = v40;
        *(int32_t *)(g7 + 16) = v40;
        int32_t v41 = *(int32_t *)(g10 + 12); // 0x43124
        g4 = v41;
        *(int32_t *)(g7 + 20) = v41;
        int32_t v42 = *(int32_t *)(g10 + 16); // 0x4312a
        g4 = v42;
        *(int32_t *)(g7 + 24) = v42;
        goto lab_0x43130;
    }
  lab_0x43130:
    // 0x43130
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x4314d - 0x43155
int32_t function_4314d(void) {
    unsigned char v1 = *(char *)&g8; // 0x4314d
    *(char *)g8 = v1 / 16 | 16 * v1;
    int32_t result = function_c8043153(); // 0x43150
    g4 = result;
    return result;
}

// Address range: 0x4315e - 0x43166
int32_t function_4315e(void) {
    int32_t v1 = g4; // 0x4315e
    char * v2 = (char *)(v1 + 10); // 0x4315e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x43161
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x43167 - 0x4316f
int32_t function_43167(void) {
    int32_t v1 = g4; // 0x43167
    char v2 = *(char *)(v1 + 10); // 0x43167
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x43167
    g4 = result;
    uint32_t v3 = g6; // 0x4316a
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x4317b - 0x43180
int32_t function_4317b(void) {
    // 0x4317b
    return g4;
}

// Address range: 0x43180 - 0x43187
int32_t function_43180(void) {
    // 0x43180
    return g4;
}

// Address range: 0x4319e - 0x431a6
int32_t function_4319e(void) {
    int32_t v1 = g4; // 0x4319e
    char * v2 = (char *)(v1 + 10); // 0x4319e
    *v2 = *v2 | (char)v1;
    uint32_t v3 = g6; // 0x431a1
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return g4;
}

// Address range: 0x431a7 - 0x431af
int32_t function_431a7(void) {
    int32_t v1 = g4; // 0x431a7
    char v2 = *(char *)(v1 + 10); // 0x431a7
    int32_t result = (int32_t)((char)v1 | v2) | v1 & -256; // 0x431a7
    g4 = result;
    uint32_t v3 = g6; // 0x431aa
    g6 = 512 * v3 / 256 & 0xfe00 | v3 & -0xff01;
    return result;
}

// Address range: 0x431bb - 0x431c0
int32_t function_431bb(void) {
    // 0x431bb
    return g4;
}

// Address range: 0x431c0 - 0x431c9
int32_t function_431c0(void) {
    // 0x431c0
    *(int16_t *)(g9 + g4) = (int16_t)g8;
    return g4;
}

// Address range: 0x431c9 - 0x431fa
int32_t function_431c9(void) {
    int32_t v1 = function_424f0(g6); // 0x431cc
    g4 = v1;
    g8 = v1 & (int32_t)&g863;
    *(int16_t *)(g5 - 28) = (int16_t)v1;
    g4 = *(int32_t *)(g6 + 4);
    int32_t v2 = g8; // 0x431db
    g7 = 28 * v2;
    *(int32_t *)(g5 - 36) = v2;
    int32_t v3 = g7 + g4; // 0x431e1
    g4 = v3;
    *(int16_t *)(v3 + 4) = (int16_t)&g863;
    *(int16_t *)(g4 + 2) = (int16_t)&g863;
    *(int16_t *)g4 = (int16_t)&g863;
    *(int16_t *)(g4 + 6) = 0;
    return g4;
}

// Address range: 0x431fa - 0x43207
int32_t function_431fa(void) {
    uint16_t v1 = *(int16_t *)(g5 - 28); // 0x431fa
    g4 = v1;
    *(int16_t *)(g6 + 16) = v1;
    return g4;
}

// Address range: 0x43210 - 0x4324e
int32_t function_43210(int32_t result, int32_t a2) {
    int32_t v1 = g6; // 0x43213
    g6 = a2;
    g4 = result;
    if (a2 == 0) {
        // 0x43248
        g6 = v1;
        return result;
    }
    int32_t v2 = *(int32_t *)(result + 64); // 0x43221
    g4 = v2;
    if (v2 != 0) {
        // 0x43228
        g9 = *(int32_t *)v2;
    }
    // 0x43234
    g6 = v1;
    int32_t v3; // ebp
    g5 = v3;
    int32_t result2 = function_28600(v1); // 0x4323c
    g4 = result2;
    return result2;
}

// Address range: 0x43250 - 0x432f6
int32_t function_43250(int32_t a1, int32_t a2, int32_t a3) {
    g4 = a2;
    int32_t v1 = g6; // 0x43259
    g9 = a3;
    int32_t v2 = g10; // 0x4325f
    g6 = a1;
    int32_t v3 = g8; // 0x43265
    *(int32_t *)(a1 + 8) = a3;
    *(int32_t *)(g6 + 12) = g9;
    *(int32_t *)(g6 + 72) = g4;
    *(int32_t *)(g6 + 48) = 4;
    int32_t v4 = g4; // 0x43278
    g9 = *(int32_t *)v4;
    *(int32_t *)(g6 + 56) = v4;
    int32_t v5 = g6; // 0x43293
    g4 = *(int32_t *)v5;
    *(int32_t *)(v5 + 60) = g9;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v6 = function_26cf0(); // 0x432a2
    g4 = v6;
    g10 = v6;
    g4 = function_27970(v6, "OnMatchSessionUpdate", "state", "progress", "progress", "searchlinked");
    *(int32_t *)(g6 + 52) = 5;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x432f6 - 0x43369
int32_t function_432f6(int32_t a1) {
    // 0x432f6
    g6 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    int32_t v2 = g6; // 0x43313
    g6 = a1;
    int32_t * v3 = (int32_t *)(a1 + 68); // 0x4331a
    int32_t v4 = *v3; // 0x4331a
    g4 = v4;
    int32_t v5; // 0x4333f
    if (v4 != 0) {
        // 0x43321
        g9 = *(int32_t *)v4;
        *v3 = 0;
        v5 = g6;
    } else {
        v5 = a1;
    }
    int32_t * v6 = (int32_t *)(v5 + 72); // 0x43330
    int32_t v7 = *v6; // 0x43330
    g4 = v7;
    int32_t v8; // 0x43355
    if (v7 != 0) {
        // 0x43337
        g9 = *(int32_t *)v7;
        *v6 = 0;
        v8 = g6;
    } else {
        v8 = v5;
    }
    int32_t * v9 = (int32_t *)(v8 + 76); // 0x43346
    int32_t v10 = *v9; // 0x43346
    g4 = v10;
    int32_t v11; // 0x4335c
    if (v10 != 0) {
        // 0x4334d
        g9 = *(int32_t *)v10;
        *v9 = 0;
        v11 = g6;
    } else {
        v11 = v8;
    }
    // 0x4335c
    g6 = v2;
    g5 = v1;
    int32_t result = function_3e220(v2, v1, v11); // 0x43364
    g4 = result;
    return result;
}

// Address range: 0x43370 - 0x433ca
int32_t function_43370(int32_t a1, int32_t a2) {
    int32_t v1 = a1 - 4; // 0x43370
    int32_t v2; // ebp
    g5 = &v2;
    int32_t v3 = g6; // 0x43386
    g6 = v1;
    int32_t v4 = g10; // 0x4338c
    g10 = a2;
    g4 = function_3e450(v1, a2);
    int32_t v5 = *(int32_t *)(g6 + 76); // 0x4339e
    g4 = v5;
    if (v5 == 0) {
        // 0x433c0
        g6 = v3;
        g10 = v4;
        return 0;
    }
    int32_t v6 = *(int32_t *)v5; // 0x433a5
    g9 = v6;
    g6 = v3;
    g10 = v4;
    int32_t result = *(int32_t *)(v6 + 12); // 0x433b3
    g4 = result;
    return result;
}

// Address range: 0x43442 - 0x43443
int32_t function_43442(void) {
    // 0x43442
    return g4;
}

// Address range: 0x4346b - 0x4346c
int32_t function_4346b(void) {
    // 0x4346b
    return g4;
}

// Address range: 0x43486 - 0x43487
int32_t function_43486(void) {
    // 0x43486
    return g4;
}

// Address range: 0x43491 - 0x434a8
int32_t function_43491(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7ab7bd); // 0x43491
    int32_t v2 = *v1 - 1; // 0x43491
    *v1 = v2;
    int32_t v3; // 0x43497
    if (v2 == 0) {
        // bb
        v3 = function_434d8((int32_t)&g870, (int32_t)&g870);
        g4 = v3;
    } else {
        // 0x43491
        v3 = g4;
    }
    // 0x43499
    g9 = v3;
    *(int32_t *)(g5 + 8) = v3;
    int32_t result = *(int32_t *)(g9 + 24); // 0x4349e
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x434b9 - 0x434d2
int32_t function_434b9(void) {
    // 0x434b9
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 40)); // 0x434bb
    float80_t v3; // st7
    *(float64_t *)(v1 - 16) = (float64_t)v3;
    int128_t v4 = __asm_cvtps2pd(__asm_unpcklps(v2, v2)); // 0x434c5
    __asm_subsd_1656(v4, *(int64_t *)(v1 - 16));
    int32_t result = function_43442(); // 0x434cd
    g4 = result;
    return result;
}

// Address range: 0x434d8 - 0x434e4
int32_t function_434d8(int32_t a1, int32_t a2) {
    // 0x434d8
    *(int32_t *)(g5 + 8) = (int32_t)"SysSession is NULL\n";
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x434fc - 0x434fe
int32_t function_434fc(void) {
    int32_t result = function_43486(); // 0x434fc
    g4 = result;
    return result;
}

// Address range: 0x4350c - 0x43511
int32_t function_4350c(void) {
    int32_t result = function_4346b(); // 0x4350c
    g4 = result;
    return result;
}

// Address range: 0x43520 - 0x435c7
int32_t function_43520(int32_t a1, int32_t a2) {
    g4 = a2;
    int32_t v1 = g10; // 0x43529
    g10 = a1;
    int32_t v2 = g6; // 0x4352f
    int32_t v3 = g8; // 0x43532
    *(int32_t *)(a1 + 8) = a2;
    *(int32_t *)(g10 + 12) = g4;
    int32_t v4 = g10; // 0x4353b
    g4 = *(int32_t *)v4;
    *(int32_t *)(v4 + 48) = 1;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v5 = function_26cf0(); // 0x4354e
    g4 = v5;
    g6 = v5;
    g4 = function_27970(v5, "OnMatchSessionUpdate", "state", "progress", "progress", "searchidle");
    int32_t v6 = function_1bc00(224); // 0x43595
    g4 = v6;
    g6 = v6;
    int32_t v7 = *(int32_t *)(g10 + 8); // 0x4359c
    g4 = v7;
    g4 = function_55d30(v6, v7);
    *(int32_t *)g6 = (int32_t)&g175;
    *(int32_t *)(g6 + 220) = g10;
    *(int32_t *)(g10 + 68) = g6;
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return g4;
}

// Address range: 0x435c7 - 0x43634
int32_t function_435c7(int32_t a1) {
    // 0x435c7
    g10 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x435d4
    g4 = v1;
    g10 = v1;
    g4 = function_1bc40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g10; // 0x435f6
    g10 = a1;
    int32_t v4 = g6; // 0x435fc
    int32_t v5 = function_1bc00(196); // 0x43606
    g4 = v5;
    g6 = v5;
    int32_t v6 = *(int32_t *)(g10 + 8); // 0x4360d
    g4 = v6;
    function_55f40(v5, v6);
    *(int32_t *)g6 = (int32_t)&g174;
    int32_t v7 = g6; // 0x43622
    g4 = v7;
    *(int32_t *)(v7 + 192) = g10;
    g6 = v4;
    g10 = v3;
    return g4;
}

// Address range: 0x43634 - 0x436aa
int32_t function_43634(int32_t a1, int32_t a2) {
    // 0x43634
    g10 = g4;
    g4 = function_1bc40();
    function_7ab57(g10, (int32_t)&g870);
    g4 = (int32_t)"FCVAR_NEVER_AS_STRING";
    int32_t v1 = g6; // 0x43662
    int32_t v2 = g10; // 0x43665
    g6 = a2;
    g10 = a1;
    int32_t v3; // 0x4367f
    if ((g533 & 16) == 0) {
        // 0x43670
        g4 = g534;
        g9 = (int32_t)&g129;
        int32_t v4 = *(int32_t *)(g534 + 36); // 0x4367a
        v3 = v4 == 0 ? (int32_t)&g129 : v4;
        g4 = v3;
    } else {
        v3 = (int32_t)"FCVAR_NEVER_AS_STRING";
    }
    // 0x43682
    g4 = function_27920(a2, "Filter=/options:searchteamkey", (char *)v3);
    int32_t v5 = g6; // 0x43696
    g6 = v1;
    int32_t v6 = g10; // 0x4369c
    g10 = v2;
    int32_t result = function_597e0(v6, v5); // 0x436a5
    g4 = result;
    return result;
}

// Address range: 0x436b0 - 0x436b1
int32_t function_436b0(int32_t a1) {
    // 0x436b0
    return g4;
}

// Address range: 0x436d2 - 0x436ef
int32_t function_436d2(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7aa7bd); // 0x436d2
    int32_t v2 = *v1 - 1; // 0x436d2
    *v1 = v2;
    if (v2 != 0) {
        // 0x436da
        g4 = function_28600(g4);
    }
    // 0x436e2
    *(int32_t *)(g5 + 8) = g6;
    g6 = a1;
    int32_t result = function_3ea00(); // 0x436ea
    g4 = result;
    return result;
}

// Address range: 0x436ef - 0x43718
int32_t function_436ef(void) {
    // 0x436ef
    g9 = g6 + 88;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_1fc30(g9);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x436fd
    g4 = v1;
    while (true) {
        // 0x43700
        *(int32_t *)(g5 - 12) = v1;
        g4 = function_3ea00();
        int32_t v2 = *(int32_t *)(g5 - 12); // 0x4370b
        g4 = v2;
        int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x43711
        g4 = v3;
        v1 = v3;
    }
}

// Address range: 0x43720 - 0x4373f
int32_t function_43720(int32_t a1) {
    int32_t v1 = g6; // 0x43723
    g6 = a1;
    g4 = function_436b0(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x4373a
    g4 = result;
    return result;
}

// Address range: 0x43740 - 0x437ab
int32_t function_43740(int32_t a1, int32_t a2, int32_t a3) {
    // 0x43740
    g6 = a1;
    function_3e850(a1);
    g4 = a2;
    *(int32_t *)g6 = (int32_t)&g172;
    *(int32_t *)(g6 + 4) = (int32_t)&g173;
    *(int32_t *)(g6 + 48) = 0;
    *(int32_t *)(g6 + 52) = 0;
    *(int32_t *)(g6 + 56) = 0;
    *(int32_t *)(g6 + 60) = 0;
    *(int32_t *)(g6 + 64) = g4;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    *(int32_t *)(g6 + 88) = 0;
    return g4;
}

// Address range: 0x437cb - 0x437d6
int32_t function_437cb(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x6845f7bd); // 0x437cb
    *v1 = *v1 - 1;
    int32_t result = function_438d37dd(); // 0x437d1
    g4 = result;
    return result;
}

// Address range: 0x4385d - 0x4388b
int32_t function_4385d(int32_t a1, int32_t a2) {
    // 0x4385d
    g4 = *(int32_t *)(g6 + 8);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x43860
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    g6 = a1;
    return g4;
}

// Address range: 0x4388f - 0x43897
float80_t function_4388f(void) {
    // 0x4388f
    float80_t v1; // st7
    return v1 * (float80_t)*(float64_t *)(g7 - 0x6817dbec);
}

// Address range: 0x438b0 - 0x438b1
int32_t function_438b0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x438b0
    return g4;
}

// Address range: 0x43926 - 0x4392c
int32_t function_43926(void) {
    // 0x43926
    return g4;
}

// Address range: 0x43952 - 0x43958
int32_t function_43952(void) {
    // 0x43952
    return g4;
}

// Address range: 0x43983 - 0x439b1
int32_t function_43983(int32_t a1, int32_t a2) {
    // 0x43983
    g4 = *(int32_t *)(g6 + 36);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x43986
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    g6 = a1;
    return g4;
}

// Address range: 0x439b1 - 0x43a1c
int32_t function_439b1(int32_t a1) {
    // 0x439b1
    *(int32_t *)g6 = (int32_t)&g171;
    *(int32_t *)(g5 - 28) = g4;
    g4 = function_5a110(g6);
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x439c2
    g4 = v1;
    g4 = function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g10; // 0x439d6
    g10 = a1;
    int32_t v4 = g6; // 0x439dc
    int32_t v5 = g8; // 0x439df
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x439e2
    g4 = v6;
    int32_t v7 = function_26d60(v6); // 0x439e8
    g4 = v7;
    g8 = v7;
    int32_t v8 = function_1bc00(104); // 0x439f6
    g4 = v8;
    g6 = v8;
    function_438b0(v8, g10, g8);
    int32_t result = g6; // 0x43a0d
    g4 = result;
    g10 = v3;
    g6 = v4;
    g8 = v5;
    return result;
}

// Address range: 0x43a1c - 0x43aa9
int32_t function_43a1c(int32_t a1) {
    // 0x43a1c
    g10 = g4;
    g4 = function_1bc40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g6; // 0x43a36
    g6 = a1;
    int32_t v2 = g10; // 0x43a3c
    int32_t v3 = g8; // 0x43a3f
    g4 = *(int32_t *)a1;
    *(int32_t *)(a1 + 48) = 5;
    *(int32_t *)(g6 + 80) = 0;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v4 = function_26cf0(); // 0x43a5c
    g4 = v4;
    g10 = v4;
    int32_t result = function_27970(v4, "OnMatchSessionUpdate", "state", "progress", "progress", "restart"); // 0x43a8e
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x43aa9 - 0x43af1
int32_t function_43aa9(int32_t a1, int32_t a2) {
    // 0x43aa9
    g6 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g6; // 0x43ac6
    g6 = a1;
    int32_t v2 = g10; // 0x43acc
    g10 = a2;
    int32_t v3 = *(int32_t *)(a1 + 84); // 0x43ad2
    g4 = v3;
    int32_t v4; // 0x43ae1
    int32_t v5; // 0x43ae1
    if (v3 != 0) {
        // 0x43ad9
        g4 = function_28600(v3);
        v5 = g6;
        v4 = g10;
    } else {
        v5 = a1;
        v4 = a2;
    }
    // 0x43ae1
    *(int32_t *)(v5 + 84) = v4;
    *(int32_t *)(g6 + 88) = g10;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x43b00 - 0x43b46
int32_t function_43b00(int32_t result) {
    int32_t v1 = g6; // 0x43b03
    g4 = result;
    int32_t * v2 = (int32_t *)(result + 84); // 0x43b0a
    int32_t v3 = *v2; // 0x43b0a
    g6 = v3;
    if (v3 == 0) {
        // 0x43b40
        g6 = v1;
        return result;
    }
    // 0x43b11
    *v2 = 0;
    *(int32_t *)(g4 + 88) = 0;
    int32_t v4 = *(int32_t *)(g4 + 64); // 0x43b1f
    g4 = v4;
    g9 = *(int32_t *)v4;
    g6 = v1;
    int32_t result2 = function_28600(v4); // 0x43b36
    g4 = result2;
    return result2;
}

// Address range: 0x43b50 - 0x43b58
int32_t function_43b50(int32_t result) {
    // 0x43b50
    g4 = result;
    return result;
}

// Address range: 0x43b60 - 0x43b68
int32_t function_43b60(int32_t result) {
    // 0x43b60
    g4 = result;
    return result;
}

// Address range: 0x43b70 - 0x43b9d
int32_t function_43b70(int32_t a1) {
    // 0x43b70
    g9 = a1;
    int32_t v1 = *(int32_t *)(a1 + 48); // 0x43b76
    g4 = v1;
    if (v1 == 3) {
        int32_t result = *(int32_t *)(a1 + 68); // 0x43b98
        g4 = result;
        return result;
    }
    int32_t result2; // 0x43b90
    if (v1 == 4) {
        // 0x43b90
        result2 = *(int32_t *)(a1 + 72);
        g4 = result2;
        return result2;
    }
    int32_t result3 = *(int32_t *)(a1 + 68); // 0x43b83
    g4 = result3;
    if (result3 != 0) {
        // 0x43b8a
        return result3;
    }
    // 0x43b90
    result2 = *(int32_t *)(a1 + 72);
    g4 = result2;
    return result2;
}

// Address range: 0x43ba0 - 0x43c58
int32_t function_43ba0(int32_t a1) {
    // 0x43ba0
    g4 = g535;
    int32_t v1 = g6; // 0x43bab
    int32_t v2 = g10; // 0x43bae
    g6 = a1;
    int32_t v3 = g8; // 0x43bb4
    int32_t v4 = *(int32_t *)(g535 + 48); // 0x43bb7
    g9 = v4;
    if (v4 == 0) {
        // 0x43c10
        *(int32_t *)(a1 + 52) = 0;
        g4 = function_43b00(g6);
        int32_t v5 = *(int32_t *)g6; // 0x43c1f
        g4 = v5;
        g8 = *(int32_t *)(v5 + 56);
        int32_t v6 = function_26cf0(); // 0x43c2b
        g4 = v6;
        g10 = v6;
        int32_t result = function_26330(v6); // 0x43c3d
        g4 = result;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v7 = *(int32_t *)(a1 + 64); // 0x43bbe
    g4 = v7;
    int32_t v8 = *(int32_t *)v7; // 0x43bc1
    g4 = v8;
    g8 = *(int32_t *)(v8 + 12);
    int32_t v9 = function_26cf0(); // 0x43bcd
    g4 = v9;
    g10 = v9;
    g4 = function_26330(v9);
    int32_t v10 = g10; // 0x43be7
    g4 = v10;
    int32_t result2; // 0x43bfd
    if (v10 != 0) {
        // 0x43bfa
        result2 = function_28600(v10);
        g4 = result2;
    } else {
        result2 = 0;
    }
    // 0x43c02
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x43c58 - 0x43dcd
int32_t function_43c58(int32_t a1) {
    // 0x43c58
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x43c5a
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x43c68
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x43c7a
    g4 = v3;
    g6 = v3;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = g535;
    int32_t v4 = g6; // 0x43cab
    int32_t v5 = g10; // 0x43cae
    g6 = a1;
    int32_t v6 = g8; // 0x43cb4
    int32_t v7 = *(int32_t *)(g535 + 48); // 0x43cb7
    g7 = v7;
    if (v7 != 0) {
        int32_t v8 = *(int32_t *)(a1 + 64); // 0x43cbe
        g4 = v8;
        int32_t v9 = *(int32_t *)v8; // 0x43cc1
        g4 = v9;
        g8 = *(int32_t *)(v9 + 12);
        int32_t v10 = function_26cf0(); // 0x43ccd
        g4 = v10;
        g10 = v10;
        g4 = function_26330((int32_t)(v10 % 2 != 0));
        int32_t v11 = g10; // 0x43ce7
        g4 = v11;
        int32_t result; // 0x43cfd
        if (v11 != 0) {
            // 0x43cfa
            result = function_28600((int32_t)(v11 % 2 != 0));
            g4 = result;
        } else {
            result = 0;
        }
        // 0x43d02
        g6 = v4;
        g10 = v5;
        g8 = v6;
        return result;
    }
    // 0x43d10
    g4 = *(int32_t *)a1;
    *(int32_t *)(a1 + 52) = 2;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v12 = function_26cf0(); // 0x43d23
    g4 = v12;
    g10 = v12;
    g4 = function_27970((int32_t)(v12 % 2 != 0), "OnMatchSessionUpdate", "state", "progress", "progress", "dedicated");
    uint32_t v13 = *(int32_t *)(g6 + 64); // 0x43d63
    g4 = v13;
    g9 = *(int32_t *)v13;
    int32_t v14 = function_27ea0((int32_t)(v13 % 2 != 0), "xuidReserve", 0, 0); // 0x43d88
    g4 = v14;
    g10 = v14;
    g8 = g9;
    int32_t v15 = function_1bc00((int32_t)(bool)&g82); // 0x43d98
    g4 = v15;
    g4 = v15;
    function_573b0((int32_t)(v15 % 2 != 0), *(int32_t *)(g6 + 8), g10, g8);
    g4 = v15;
    *(int32_t *)(g6 + 76) = v15;
    g6 = v4;
    g10 = v5;
    g8 = v6;
    return g4;
}

// Address range: 0x43dcd - 0x44065
int32_t function_43dcd(int32_t a1) {
    // 0x43e58
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x43dcf
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x43ddd
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x43def
    g4 = v3;
    g6 = v3;
    g4 = *(int32_t *)(g5 - 44);
    g4 = function_1bc40();
    int32_t v4 = function_7ab57(g6, (int32_t)&g870); // 0x43e04
    g4 = v4;
    g6 = v4;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v5 = g5; // bp-4
    g5 = &v5;
    int32_t v6 = g8; // 0x43e23
    int32_t v7 = g10; // 0x43e24
    int32_t v8 = g6; // 0x43e25
    g6 = a1;
    int32_t v9 = *(int32_t *)(a1 + 76); // 0x43e2f
    int32_t v10; // bp-802
    int32_t v11 = &v10; // 0x43e3a
    g8 = v11;
    int32_t v12;
    g9 = &v12;
    g10 = v9;
    g4 = &g81;
    g7 = (int32_t)&g81 >> 2;
    __asm_rep_movsd_memcpy((char *)&v10, (char *)v9, (int32_t)&g81 >> 2);
    int32_t v13 = g3 ? -4 * ((int32_t)&g81 >> 2) : 4 * ((int32_t)&g81 >> 2); // 0x43e5f
    int32_t v14 = v13 + v11; // 0x43e5f
    g8 = v14;
    g10 = v14;
    g7 = 0;
    if (((int32_t)&g81 & 2) != 0) {
        int16_t * v15 = (int16_t *)v14; // 0x43e63
        uint16_t v16 = *v15; // 0x43e63
        g4 = v16;
        *v15 = v16;
    }
    int32_t * v17 = (int32_t *)(g6 + 76); // 0x43e69
    int32_t v18 = *v17; // 0x43e69
    g4 = v18;
    g9 = *(int32_t *)v18;
    *v17 = 0;
    char v19;
    if (v19 == 0) {
        int32_t result = function_43ba0(g6); // 0x44033
        g4 = result;
        g6 = v8;
        g10 = v7;
        g8 = v6;
        return result;
    }
    int32_t v20 = function_26cf0(); // 0x43e8f
    g4 = v20;
    g8 = v20;
    function_26330(v20);
    g4 = v11;
    g4 = function_56ef0(&v10, g8);
    int32_t v21 = *(int32_t *)(g6 + 64); // 0x43eb8
    g4 = v21;
    g9 = *(int32_t *)v21;
    int32_t v22 = function_27ea0(v21, "xuidReserve", 0, 0); // 0x43edd
    g4 = v22;
    g4 = function_27600(g8, "reservationid", v22, g9);
    g4 = function_43b00(g6);
    int32_t v23 = function_26cf0(); // 0x43f09
    g4 = v23;
    g10 = v23;
    g4 = function_26330(v23);
    if (v23 != 0) {
        // 0x43fa8
        g4 = function_27920(v23, "run", "xuid");
        int32_t v24 = g6; // 0x43f43
        int32_t v25 = *(int32_t *)(v24 + 56); // 0x43f43
        g4 = v25;
        int32_t v26 = *(int32_t *)(v24 + 60); // 0x43f46
        g9 = v26;
        g4 = function_27600(v23, "runxuid", v25, v26);
        g4 = function_27680(g8, "team", 2);
        int32_t v27 = function_26d60(g8); // 0x43f7c
        g4 = v27;
        g4 = function_25fb0(v23, v27);
        int32_t v28 = function_43b70(g6); // 0x43f90
        g4 = v28;
        g9 = *(int32_t *)v28;
        g4 = v23;
        g4 = function_28600(v23);
    }
    int32_t v29 = function_26cf0(); // 0x43fb7
    g4 = v29;
    g10 = v29;
    g4 = function_26330(v29);
    int32_t v30; // 0x4401c
    if (v29 == 0) {
        // 0x43fb0
        v30 = g6;
    } else {
        // 0x43fd2
        g9 = v11;
        g4 = function_275a0(v29, "dsresult", v11);
        g4 = function_27680(g8, "team", 1);
        g4 = function_25fb0(v29, g8);
        int32_t v31 = g6; // 0x44010
        g4 = *(int32_t *)v31;
        v30 = v31;
    }
    // 0x4401c
    *(int32_t *)(v30 + 52) = 3;
    g6 = v8;
    g10 = v7;
    g8 = v6;
    return g4;
}

// Address range: 0x44065 - 0x44205
int32_t function_44065(int32_t a1) {
    // 0x44065
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x44072
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g5 - 28; // 0x4408b
    g4 = v2;
    g4 = function_1fc30(v2);
    int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x44099
    g4 = v3;
    g6 = v3;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v4 = g6; // 0x440b6
    g6 = a1;
    int32_t v5 = g10; // 0x440bc
    int32_t v6 = g8; // 0x440bf
    int32_t result = *(int32_t *)(a1 + 52); // 0x440c2
    g4 = result;
    if (result != 0) {
        if (result != 2) {
            // 0x441c7
            g6 = v4;
            g10 = v5;
            g8 = v6;
            return result;
        }
        int32_t * v7 = (int32_t *)(a1 + 76); // 0x441dd
        int32_t v8 = *v7; // 0x441dd
        g4 = v8;
        if (v8 == 0) {
            // 0x441c7
            g6 = v4;
            g10 = v5;
            g8 = v6;
            return 0;
        }
        // 0x441e4
        g9 = *(int32_t *)v8;
        int32_t result2 = *v7; // 0x441ec
        g4 = result2;
        g9 = *(int32_t *)result2;
        if ((char)result2 != 0) {
            // branch -> 0x441c7
        }
        // 0x441c7
        g6 = v4;
        g10 = v5;
        g8 = v6;
        return result2;
    }
    int32_t v9 = *(int32_t *)(a1 + 64); // 0x440cd
    g4 = v9;
    g9 = *(int32_t *)v9;
    int32_t v10 = function_27340(v9, (int32_t)"server", 0); // 0x440eb
    g4 = v10;
    g8 = v10;
    if (v10 == 0) {
        // 0x441c7
        g6 = v4;
        g10 = v5;
        g8 = v6;
        return 0;
    }
    int32_t v11 = function_26cf0(); // 0x44101
    g4 = v11;
    g10 = v11;
    g4 = function_26330(v11);
    if (v11 != 0) {
        // 0x441b8
        g4 = function_27920(v11, "run", "xuid");
        int32_t v12 = g6; // 0x4413b
        int32_t v13 = *(int32_t *)(v12 + 56); // 0x4413b
        g4 = v13;
        int32_t v14 = *(int32_t *)(v12 + 60); // 0x4413e
        g9 = v14;
        g4 = function_27600(v11, "runxuid", v13, v14);
        int32_t v15 = function_26d60(g8); // 0x4415c
        g4 = v15;
        g4 = function_25fb0(v11, v15);
        g4 = function_27920(v11, "server/server", "externalpeer");
        g4 = function_27680(v11, "server/team", 2);
        int32_t v16 = function_43b70(g6); // 0x441a0
        g4 = v16;
        g9 = *(int32_t *)v16;
        g4 = v11;
        g4 = function_28600(v11);
    }
    // 0x441c0
    *(int32_t *)(g6 + 52) = 3;
    // 0x441c7
    g6 = v4;
    g10 = v5;
    g8 = v6;
    return g4;
}

// Address range: 0x44205 - 0x442a2
int32_t function_44205(int32_t a1) {
    // 0x44205
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x44207
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x44215
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g6; // 0x44236
    g6 = a1;
    int32_t v4 = g10; // 0x4423c
    int32_t v5 = g8; // 0x4423f
    g4 = *(int32_t *)a1;
    *(int32_t *)(a1 + 52) = 1;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v6 = function_26cf0(); // 0x44255
    g4 = v6;
    g10 = v6;
    int32_t result = function_27970(v6, "OnMatchSessionUpdate", "state", "progress", "progress", "peerserver"); // 0x44287
    g4 = result;
    g6 = v3;
    g10 = v4;
    g8 = v5;
    return result;
}

// Address range: 0x442a2 - 0x442cf
int32_t function_442a2(int32_t a1) {
    // 0x442a2
    g6 = g4;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = a1;
    *(int32_t *)(a1 + 52) = 5;
    return g4;
}

// Address range: 0x442d0 - 0x4432a
int32_t function_442d0(int32_t a1) {
    int32_t v1 = g10; // 0x442d3
    int32_t v2 = g6; // 0x442d4
    g6 = a1;
    int32_t v3 = *(int32_t *)(a1 + 52); // 0x442db
    g4 = v3;
    int32_t v4; // 0x442e1
    if (v3 == 6) {
        // bb
        v4 = function_44450((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v4;
    } else {
        v4 = v3;
    }
    int32_t result; // 0x442ea
    if (v4 == 7) {
        // bb15
        result = function_44398((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v4;
    }
    if (result != 5) {
        // 0x442f5
        g6 = v2;
        g10 = v1;
        return result;
    }
    int32_t v5 = function_26cf0(); // 0x4430f
    g4 = v5;
    g10 = v5;
    int32_t v6 = function_26330(v5); // 0x44321
    g4 = v6;
    int32_t result2; // 0x44328
    if (v5 == 0) {
        // bb18
        result2 = function_4437c((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result2;
    } else {
        result2 = v6;
    }
    // 0x4432a
    return result2;
}

// Address range: 0x4437c - 0x44392
int32_t function_4437c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4437c
    *(int32_t *)(g6 + 52) = 6;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x44398 - 0x44446
int32_t function_44398(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = function_26cf0(); // 0x4439f
    g4 = v1;
    g10 = v1;
    g4 = function_26330(v1);
    if (v1 != 0) {
        // 0x443ba
        *(int32_t *)(g5 - 12) = v1;
        g4 = function_27920(v1, "run", "xuid");
        int32_t v2 = g6; // 0x443d5
        int32_t v3 = *(int32_t *)(v2 + 56); // 0x443d5
        g4 = v3;
        int32_t v4 = *(int32_t *)(v2 + 60); // 0x443d8
        g9 = v4;
        g4 = function_27600(v1, "runxuid", v3, v4);
        int32_t v5 = *(int32_t *)(g6 + 64); // 0x443f3
        g4 = v5;
        g9 = *(int32_t *)v5;
        int32_t v6 = function_26d60(v5); // 0x44401
        g4 = v6;
        g4 = function_25fb0(v1, v6);
        int32_t v7 = *(int32_t *)(g6 + 68); // 0x44412
        g4 = v7;
        g9 = *(int32_t *)v7;
        int32_t v8 = *(int32_t *)(g5 - 12); // 0x44421
        g4 = v8;
        if (v8 != 0) {
            // 0x44428
            g4 = function_28600(v8);
        }
    }
    // 0x44430
    *(int32_t *)(g6 + 52) = 8;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x44450 - 0x44466
int32_t function_44450(int32_t a1, int32_t a2, int32_t a3) {
    // 0x44450
    *(int32_t *)(g6 + 52) = 7;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x44466 - 0x444af
int32_t function_44466(int32_t a1) {
    // 0x44466
    g6 = g4;
    int32_t v1 = g5 - 12; // 0x44468
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x44476
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x44488
    g4 = v3;
    g6 = v3;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = a1;
    *(int32_t *)(a1 + 52) = 5;
    return g4;
}

// Address range: 0x444b0 - 0x44631
int32_t function_444b0(int32_t a1) {
    int32_t v1 = g5; // 0x444b0
    int32_t v2 = g6; // 0x444b6
    g6 = a1;
    int32_t v3 = g10; // 0x444bc
    int32_t v4 = g8; // 0x444bf
    int32_t result = *(int32_t *)(a1 + 52); // 0x444c2
    g4 = result;
    if (result == 5) {
        // 0x444d7
        g6 = v2;
        g5 = v1;
        return result;
    }
    if (result != 6) {
        // 0x444d7
        g6 = v2;
        g5 = v1;
        return result;
    }
    int32_t v5 = *(int32_t *)(a1 + 8); // 0x444f8
    g4 = v5;
    int32_t v6 = function_27c00(v5, "options/server", (int32_t *)&g129); // 0x444fe
    g4 = v6;
    g10 = v6;
    int32_t v7 = *(int32_t *)(g6 + 64); // 0x44505
    g4 = v7;
    g9 = *(int32_t *)v7;
    int32_t v8 = function_27c00(v7, "options/server", (int32_t *)&g129); // 0x44523
    g4 = v8;
    g8 = v8;
    int32_t v9 = function_2cc30(g10, "listen"); // 0x44535
    g4 = v9;
    if (v9 != 0) {
        int32_t v10 = function_2cc30(g8, "listen"); // 0x445bb
        g4 = v10;
        if (v10 == 0) {
            int32_t v11 = *(int32_t *)(g6 + 72); // 0x445c8
            g4 = v11;
            int32_t v12 = *(int32_t *)v11; // 0x445cb
            g4 = v12;
            g8 = *(int32_t *)(v12 + 16);
            int32_t v13 = function_26cf0(); // 0x445d7
            g4 = v13;
            g10 = v13;
            g4 = function_27a20(v13, "TeamSearchLink::ClientHosting", "run", "host");
            int32_t v14 = g6; // 0x445fe
            int32_t v15 = g10; // 0x44601
            g4 = v15;
            int32_t v16; // 0x4461c
            if (v15 != 0) {
                // 0x44614
                g4 = function_28600(v15);
                v16 = g6;
            } else {
                v16 = v14;
            }
            int32_t result2 = function_43ba0(v16); // 0x4461f
            g4 = result2;
            g6 = v2;
            g10 = v3;
            g8 = v4;
            return result2;
        }
    }
    int32_t v17 = *(int32_t *)(g6 + 72); // 0x4453e
    g4 = v17;
    int32_t v18 = *(int32_t *)v17; // 0x44541
    g4 = v18;
    g8 = *(int32_t *)(v18 + 16);
    int32_t v19 = function_26cf0(); // 0x4454d
    g4 = v19;
    g10 = v19;
    g4 = function_27a20(v19, "TeamSearchLink::HostHosting", "run", "host");
    int32_t v20 = g10; // 0x44577
    g4 = v20;
    int32_t result3; // 0x4458d
    if (v20 != 0) {
        // 0x4458a
        result3 = function_28600(v20);
        g4 = result3;
    } else {
        result3 = 0;
    }
    // 0x44592
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result3;
}

// Address range: 0x44631 - 0x446f3
int32_t function_44631(int32_t a1) {
    // 0x44631
    g6 = g4;
    int32_t v1 = g5 - 32; // 0x44633
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x44641
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x44653
    g4 = v3;
    g6 = v3;
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v4 = g5 - 28; // 0x4466c
    g4 = v4;
    g4 = function_1fc30(v4);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v5 = g6; // 0x44686
    g6 = a1;
    int32_t v6 = g10; // 0x4468c
    int32_t v7 = g8; // 0x4468f
    int32_t v8 = *(int32_t *)(a1 + 48); // 0x44692
    g4 = v8;
    int32_t v9; // 0x44698
    if (v8 == 4) {
        // bb
        v9 = function_44770();
        g4 = v9;
    } else {
        v9 = v8;
    }
    int32_t v10 = v9 - 5; // 0x4469e
    bool v11 = llvm_ctpop_i8((char)v10) % 2 == 0; // pf
    if (v10 == 0) {
        int128_t v12; // xmm0
        int128_t v13 = __asm_xorps(v12, v12); // 0x446e8
        __asm_ucomiss(v13, *(int32_t *)(g6 + 80));
        if (v11 || v10 != 0) {
            // 0x446f3
            return g4;
        }
        // 0x446c4
        g6 = v5;
        g10 = v6;
        g8 = v7;
        return g4;
    }
    // 0x446a3
    if (v9 == 3) {
        // 0x446d8
        g4 = function_442d0(g6);
    }
    int32_t result = function_43b70(g6); // 0x446b3
    g4 = result;
    if (result != 0) {
        // 0x446bc
        g9 = *(int32_t *)result;
    } else {
        result = 0;
    }
    // 0x446c4
    g6 = v5;
    g10 = v6;
    g8 = v7;
    return result;
}

// Address range: 0x446f7 - 0x44766
int32_t function_446f7(void) {
    int128_t v1 = __asm_movups(*(int128_t *)(g6 + 80)); // 0x446f9
    int32_t v2; // ebp
    float80_t v3; // st7
    *(float64_t *)(v2 - 48) = (float64_t)v3;
    int128_t v4 = __asm_cvtps2pd(v1); // 0x44700
    __asm_ucomisd(__asm_movsd_1649(*(int64_t *)(v2 - 48)), v4);
    int32_t v5 = g6; // 0x4470e
    int32_t v6 = *(int32_t *)(v5 + 64); // 0x4470e
    g4 = v6;
    *(int32_t *)(v5 + 80) = 0;
    int32_t v7 = *(int32_t *)v6; // 0x4471c
    g4 = v7;
    g8 = *(int32_t *)(v7 + 12);
    int32_t v8 = function_26cf0(); // 0x44728
    g4 = v8;
    g10 = v8;
    g4 = function_26330(v8);
    g4 = *(int32_t *)(g6 + 64);
    *(int32_t *)(g5 - 28) = g10;
    int32_t v9 = *(int32_t *)(g5 - 28); // 0x4474e
    g4 = v9;
    int32_t result = function_28600(v9); // 0x4475c
    g4 = result;
    return result;
}

// Address range: 0x44770 - 0x4477d
int32_t function_44770(void) {
    int32_t result = function_444b0(g6); // 0x44773
    g4 = result;
    return result;
}

// Address range: 0x4477d - 0x448b7
int32_t function_4477d(int32_t a1, int32_t a2) {
    // 0x4477d
    g6 = g4;
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5 - 28; // 0x44791
    g4 = v1;
    g4 = function_1fc30(v1);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x447b9
    g8 = a2;
    int32_t v4 = g6; // 0x447bf
    int32_t v5 = g10; // 0x447c2
    g10 = a1;
    int32_t v6 = function_25190(a2); // 0x447cb
    g4 = v6;
    g6 = v6;
    int32_t v7 = function_2cc30((int32_t)"TeamSearchLink::Dedicated", (char *)v6); // 0x447dd
    g4 = v7;
    if (v7 != 0) {
        int32_t result = function_2cc30((int32_t)"TeamSearchLink::ListenClient", (char *)g6); // 0x44893
        g4 = result;
        if (result != 0) {
            // 0x448a0
            g6 = v4;
            g10 = v5;
            g8 = v3;
            return result;
        }
    }
    int32_t v8 = function_27340(g8, (int32_t)"server", 0); // 0x447fd
    g4 = v8;
    int32_t v9 = g10; // 0x44802
    g8 = v8;
    if (v8 == 0) {
        // 0x44875
        g6 = v4;
        g10 = v5;
        g8 = v3;
        return 0;
    }
    // 0x4480f
    function_43b00(v9);
    g6 += 16;
    int32_t v10; // bp-296
    int32_t v11 = &v10; // 0x4481f
    g4 = v11;
    g4 = function_1e010(v11, "TeamSearchResult::%s");
    int32_t v12 = function_26cf0(); // 0x44838
    g6 = v12;
    int32_t v13; // bp-291
    g4 = &v13;
    int32_t v14 = function_26330(v12); // 0x4484c
    g4 = v14;
    int32_t result2; // 0x44869
    if (v12 != 0) {
        int32_t v15 = function_26d60(g8); // 0x44858
        g4 = v15;
        g4 = function_25fb0(v12, v15);
        result2 = *(int32_t *)g10;
        g4 = result2;
    } else {
        result2 = v14;
    }
    // 0x44875
    g6 = v4;
    g10 = v5;
    g8 = v3;
    return result2;
}

// Address range: 0x448b7 - 0x44a1c
int32_t function_448b7(int32_t a1, int32_t a2) {
    // 0x448b7
    g10 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g10; // 0x448d6
    g10 = a2;
    int32_t v3 = g6; // 0x448dc
    g6 = a1;
    int32_t v4 = g8; // 0x448e2
    int32_t v5 = function_25190(a2); // 0x448e8
    g4 = v5;
    int32_t result = function_2cc30((int32_t)"TeamSearchLink::HostConfirmJoinReady", (char *)v5); // 0x448f8
    g4 = result;
    if (result != 0) {
        // 0x449e8
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return result;
    }
    // 0x44905
    g8 = function_26190(g10);
    int32_t v6 = g6; // 0x4490f
    int32_t v7 = *(int32_t *)&g273; // 0x4491c
    g4 = v7;
    g9 = v7;
    g10 = v7;
    int32_t v8; // 0x44a08
    int32_t result2; // 0x449be
    if (v7 != 0) {
        int32_t v9 = function_26cf0(); // 0x4494a
        g4 = v9;
        g8 = v9;
        g4 = function_27a20(v9, "TeamSearchLink::TeamLinkSessionUpdate", "run", "host");
        if (v9 != 0) {
            int32_t v10 = function_26d60(g10); // 0x44978
            g4 = v10;
            g4 = function_25fb0(v9, v10);
            int32_t v11 = *(int32_t *)(g6 + 72); // 0x44989
            g4 = v11;
            int32_t v12 = *(int32_t *)v11; // 0x4498c
            g9 = v12;
            g9 = *(int32_t *)(v12 + 16);
            g4 = v9;
            g4 = function_28600(v9);
        }
        int32_t v13 = *(int32_t *)(g6 + 8); // 0x449b8
        g4 = v13;
        result2 = function_2a090(v13, g10, 0);
        g4 = result2;
        v8 = g6;
    } else {
        result2 = 0;
        v8 = v6;
    }
    int32_t * v14 = (int32_t *)(v8 + 52); // 0x449cf
    if (*v14 != 5) {
        // 0x449d5
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return result2;
    }
    // 0x44a08
    *v14 = 6;
    g6 = v3;
    g10 = v2;
    g8 = v4;
    return g4;
}

// Address range: 0x44a1c - 0x44b71
int32_t function_44a1c(int32_t a1, int32_t a2) {
    // 0x44a1c
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x44a1e
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x44a2c
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // bp-4
    g5 = &v3;
    int32_t v4 = g6; // 0x44a56
    g6 = a2;
    int32_t v5 = g10; // 0x44a5c
    g10 = a1;
    int32_t v6 = g8; // 0x44a62
    int32_t v7 = function_25190(a2); // 0x44a68
    g4 = v7;
    g8 = v7;
    int32_t v8 = function_2cc30((int32_t)"TeamSearchLink::TeamLinkSessionUpdate", (char *)v7); // 0x44a7a
    g4 = v8;
    if (v8 == 0) {
        int32_t v9 = function_26190(g6); // 0x44a86
        g4 = v9;
        g8 = v9;
        int32_t result; // 0x44aab
        if (v9 != 0) {
            int32_t v10 = *(int32_t *)(g10 + 8); // 0x44a9d
            g4 = v10;
            g4 = function_2a090(v10, v9, 0);
            result = function_26d60(g8);
            g4 = result;
        } else {
            result = 0;
        }
        // 0x44abc
        g8 = v6;
        g6 = v4;
        g10 = v5;
        return result;
    }
    int32_t v11 = function_2cc30((int32_t)"TeamSearchLink::HostHosting", (char *)g8); // 0x44ae3
    g4 = v11;
    if (v11 != 0) {
        int32_t result2 = function_2cc30((int32_t)"TeamSearchLink::ClientHosting", (char *)g8); // 0x44b3b
        g4 = result2;
        if (result2 == 0) {
            // 0x44b48
            g6 = v4;
            g10 = v5;
            g8 = v6;
            return result2;
        }
        // 0x44abc
        g8 = v6;
        g6 = v4;
        g10 = v5;
        return result2;
    }
    int32_t v12 = *(int32_t *)(g10 + 8); // 0x44afc
    g4 = v12;
    int32_t v13 = function_27c00(v12, "options/server", (int32_t *)&g129); // 0x44b02
    g4 = v13;
    int32_t result3 = function_2cc30(v13, "listen"); // 0x44b12
    g4 = result3;
    int32_t v14 = g10; // 0x44b17
    g6 = v4;
    g10 = v5;
    g8 = v6;
    g5 = v3;
    if (result3 != 0) {
        // 0x44b60
        return result3;
    }
    int32_t result4 = function_43ba0(v14); // 0x44b2a
    g4 = result4;
    return result4;
}

// Address range: 0x44b80 - 0x44bbc
int32_t function_44b80(int32_t a1, int32_t a2) {
    // 0x44b80
    g9 = a1;
    g7 = a2;
    int32_t result = *(int32_t *)(a1 + 48); // 0x44b89
    g4 = result;
    if (result == 3) {
        // 0x44ba0
        return result;
    }
    // 0x44b91
    return result;
}

// Address range: 0x44bc0 - 0x44c77
int32_t function_44bc0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x44bc6
    g6 = a1;
    int32_t v2 = g10; // 0x44bcc
    g10 = a2;
    int32_t v3 = g8; // 0x44bd2
    g4 = *(int32_t *)a1;
    int32_t result = *(int32_t *)(a1 + 48); // 0x44be1
    g4 = result;
    if (result == 0) {
        // 0x44be8
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v4 = function_25190(a2); // 0x44bfb
    g4 = v4;
    g8 = v4;
    int32_t v5 = function_2cc30((int32_t)"mmF->SysSessionUpdate", (char *)v4); // 0x44c0d
    g4 = v5;
    if (v5 != 0) {
        // bb
        g4 = function_44cf8();
    }
    int32_t v6 = *(int32_t *)(g6 + 68); // 0x44c1a
    g4 = v6;
    if (v6 == 0) {
        // 0x44be8
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    int32_t result2 = function_27e60(g10, (int32_t)"syssession", 0); // 0x44c34
    g4 = result2;
    if (result2 != *(int32_t *)(g6 + 68)) {
        // 0x44be8
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result2;
    }
    int32_t v7 = function_27c00(g10, "error", NULL); // 0x44c51
    g4 = v7;
    if (v7 == 0) {
        // bb243
        g4 = function_44e95();
    }
    int32_t * v8 = (int32_t *)(g6 + 68); // 0x44c5e
    int32_t v9 = *v8; // 0x44c5e
    g4 = v9;
    g9 = *(int32_t *)v9;
    *v8 = 0;
    *(int32_t *)(g6 + 48) = 5;
    return g4;
}

// Address range: 0x44c7b - 0x44c81
int32_t function_44c7b(void) {
    // 0x44c7b
    return g4;
}

// Address range: 0x44ce5 - 0x44cf3
int32_t function_44ce5(void) {
    // 0x44ce5
    return g4;
}

// Address range: 0x44cf8 - 0x44e95
int32_t function_44cf8(void) {
    int32_t v1 = function_2cc30((int32_t)"mmF->SysSessionCommand", (char *)g8); // 0x44d03
    g4 = v1;
    if (v1 == 0) {
        int32_t v2 = *(int32_t *)(g6 + 68); // 0x44d10
        g4 = v2;
        if (v2 != 0) {
            int32_t v3 = function_27e60(g10, (int32_t)"syssession", 0); // 0x44d2a
            g4 = v3;
            if (v3 == *(int32_t *)(g6 + 68)) {
                int32_t v4 = function_26190(g10); // 0x44d84
                g4 = v4;
                if (v4 != 0) {
                    // 0x44d8d
                    g4 = function_44b80(g6, v4);
                }
            }
        }
        // 0x44d34
        g8 = *(int32_t *)(g6 + 72);
        g4 = function_27e60(g10, (int32_t)"syssession", 0);
        int32_t v5 = function_26190(g10); // 0x44d63
        g4 = v5;
        int32_t result = function_44b80(g6, v5); // 0x44d77
        g4 = result;
        return result;
    }
    int32_t v6 = function_2cc30((int32_t)"OnPlayerMachinesConnected", (char *)g8); // 0x44dab
    g4 = v6;
    if (v6 != 0) {
        // bb
        g4 = function_44ef0();
    }
    // 0x44db8
    *(int32_t *)(g6 + 48) = 3;
    int32_t v7 = function_27ea0(g10, "id", 0, 0); // 0x44dda
    *(int32_t *)(g6 + 56) = v7;
    int32_t v8 = g6; // 0x44de2
    g4 = v8;
    *(int32_t *)(v8 + 60) = g9;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v9 = function_26cf0(); // 0x44df1
    g4 = v9;
    g10 = v9;
    g4 = function_27970(v9, "OnMatchSessionUpdate", "state", "progress", "progress", "searchlinked");
    int32_t v10 = *(int32_t *)(g6 + 8); // 0x44e41
    g4 = v10;
    g4 = function_27920(v10, "system/lock", "linked");
    int32_t v11 = function_2a500("update", " update {  system {  lock linked  }  } "); // 0x44e63
    g4 = v11;
    *(int32_t *)(g5 - 28) = v11;
    int32_t v12 = *(int32_t *)(g6 + 68); // 0x44e6f
    g4 = v12;
    g4 = function_53b30(v12, v11);
    int32_t v13 = *(int32_t *)(g5 - 28); // 0x44e7a
    g4 = v13;
    if (v13 != 0) {
        // 0x44e81
        g4 = function_28600(v13);
    }
    // 0x44e89
    *(int32_t *)(g6 + 52) = 5;
    return g4;
}

// Address range: 0x44e95 - 0x44eee
int32_t function_44e95(void) {
    int32_t v1 = g6; // 0x44e95
    g4 = v1;
    *(int32_t *)(v1 + 48) = 2;
    g8 = *(int32_t *)(g4 + 56);
    int32_t v2 = function_26cf0(); // 0x44eb2
    g4 = v2;
    g10 = v2;
    g4 = function_27970(v2, "OnMatchSessionUpdate", "state", "progress", "progress", "searchawaitingpeer");
    int32_t result = function_44ce5(); // 0x44ee9
    g4 = result;
    return result;
}

// Address range: 0x44ef0 - 0x44f15
int32_t function_44ef0(void) {
    int32_t result = function_2cc30((int32_t)"OnPlayerRemoved", (char *)g8); // 0x44efb
    g4 = result;
    return result;
}

// Address range: 0x44f15 - 0x44f65
int32_t function_44f15(void) {
    // 0x44f15
    g6 = g4;
    int32_t v1 = g5 - 28; // 0x44f17
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x44f25
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x44f37
    g4 = v3;
    g6 = v3;
    g4 = function_26d40();
    int32_t v4 = function_7ab57(g6, (int32_t)&g870); // 0x44f49
    g4 = v4;
    g6 = v4;
    g4 = function_26d40();
    int32_t result = function_7ab57(g6, (int32_t)&g870); // 0x44f5b
    g4 = result;
    return result;
}

// Address range: 0x44f70 - 0x44f75
int32_t function_44f70(void) {
    // 0x44f70
    return g4;
}

// Address range: 0x44f80 - 0x44f85
int32_t function_44f80(void) {
    // 0x44f80
    return g4;
}

// Address range: 0x44f90 - 0x44f95
int32_t function_44f90(void) {
    // 0x44f90
    return g4;
}

// Address range: 0x44fa0 - 0x44fa5
int32_t function_44fa0(void) {
    // 0x44fa0
    return g4;
}

// Address range: 0x44fb0 - 0x44fb5
int32_t function_44fb0(void) {
    // 0x44fb0
    return g4;
}

// Address range: 0x44fc0 - 0x44fc5
int32_t function_44fc0(void) {
    // 0x44fc0
    return g4;
}

// Address range: 0x44fd0 - 0x44fd5
int32_t function_44fd0(void) {
    // 0x44fd0
    return g4;
}

// Address range: 0x44fe0 - 0x44fe5
int32_t function_44fe0(void) {
    // 0x44fe0
    return g4;
}

// Address range: 0x44ff0 - 0x44ff5
int32_t function_44ff0(void) {
    // 0x44ff0
    return g4;
}

// Address range: 0x45000 - 0x45005
int32_t function_45000(void) {
    // 0x45000
    return g4;
}

// Address range: 0x45010 - 0x45015
int32_t function_45010(void) {
    // 0x45010
    return g4;
}

// Address range: 0x45020 - 0x45032
int32_t function_45020(int32_t a1) {
    // 0x45020
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g171;
    int32_t result = function_5a110((int32_t)&g870); // 0x4502d
    g4 = result;
    return result;
}

// Address range: 0x45040 - 0x4507e
int32_t function_45040(int32_t result, int32_t a2) {
    int32_t v1 = g6; // 0x45043
    g6 = a2;
    g4 = result;
    if (a2 == 0) {
        // 0x45078
        g6 = v1;
        return result;
    }
    int32_t v2 = *(int32_t *)(result + 192); // 0x45051
    g4 = v2;
    if (v2 != 0) {
        // 0x4505b
        g9 = *(int32_t *)v2;
    }
    // 0x45067
    g6 = v1;
    int32_t v3; // ebp
    g5 = v3;
    int32_t result2 = function_28600(v1); // 0x4506f
    g4 = result2;
    return result2;
}

// Address range: 0x45080 - 0x450be
int32_t function_45080(int32_t result, int32_t a2) {
    int32_t v1 = g6; // 0x45083
    g6 = a2;
    g4 = result;
    if (a2 == 0) {
        // 0x450b8
        g6 = v1;
        return result;
    }
    int32_t v2 = *(int32_t *)(result + 220); // 0x45091
    g4 = v2;
    if (v2 != 0) {
        // 0x4509b
        g9 = *(int32_t *)v2;
    }
    // 0x450a7
    g6 = v1;
    int32_t v3; // ebp
    g5 = v3;
    int32_t result2 = function_28600(v1); // 0x450af
    g4 = result2;
    return result2;
}

// Address range: 0x450c0 - 0x450d2
int32_t function_450c0(int32_t a1) {
    // 0x450c0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g174;
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_500b0((int32_t)&g870); // 0x450cd
    g4 = result;
    return result;
}

// Address range: 0x450e0 - 0x450f2
int32_t function_450e0(int32_t a1) {
    // 0x450e0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g175;
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_55c40((int32_t)&g870); // 0x450ed
    g4 = result;
    return result;
}

// Address range: 0x45100 - 0x45125
int32_t function_45100(int32_t a1) {
    int32_t v1 = g6; // 0x45103
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g171;
    g4 = function_5a110(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x45120
    g4 = result;
    return result;
}

// Address range: 0x45130 - 0x45155
int32_t function_45130(int32_t a1) {
    int32_t v1 = g6; // 0x45133
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g175;
    g4 = function_55c40(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x45150
    g4 = result;
    return result;
}

// Address range: 0x45160 - 0x45185
int32_t function_45160(int32_t a1) {
    int32_t v1 = g6; // 0x45163
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g174;
    g4 = function_500b0(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x45180
    g4 = result;
    return result;
}

// Address range: 0x45190 - 0x4519b
int32_t function_45190(int32_t a1) {
    int32_t result = a1 + 60; // 0x45197
    g4 = result;
    return result;
}

// Address range: 0x451a0 - 0x451ae
int32_t function_451a0(int32_t a1) {
    // 0x451a0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + (int32_t)&g41); // 0x451a7
    g4 = result;
    return result;
}

// Address range: 0x451b0 - 0x451c7
int32_t function_451b0(int32_t a1) {
    // 0x451b0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + (int32_t)L"Fb"); // 0x451b7
    g9 = v1;
    int32_t v2 = *(int32_t *)(a1 + (int32_t)&g33) | v1; // 0x451bd
    g9 = v2;
    int32_t result = (int32_t)(v2 != 0) | a1 & -256; // 0x451c3
    g4 = result;
    return result;
}

// Address range: 0x451d0 - 0x451db
int32_t function_451d0(int32_t a1) {
    int32_t result = a1 + 64; // 0x451d7
    g4 = result;
    return result;
}

// Address range: 0x451e0 - 0x451ff
int32_t function_451e0(int32_t a1, uint32_t a2) {
    // 0x451e0
    g4 = 0;
    g9 = a2;
    int32_t result; // 0x451f6
    if (a2 < 3) {
        int32_t v1 = a2 * (int32_t)&g88; // 0x451f0
        g9 = v1;
        result = a1 + 172 + v1;
        g4 = result;
    } else {
        result = 0;
    }
    // 0x451fd
    return result;
}

// Address range: 0x45241 - 0x45251
int32_t function_45241(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x85d8903); // 0x45241
    *v1 = *v1 - 1;
    int32_t result = *(int32_t *)(g4 + 48); // 0x45247
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x45251 - 0x4526f
int32_t function_45251(void) {
    // 0x45251
    return g4;
}

// Address range: 0x452ab - 0x452b1
int32_t function_452ab(void) {
    // 0x452ab
    return g4;
}

// Address range: 0x452e2 - 0x452e8
int32_t function_452e2(void) {
    // 0x452e2
    return g4;
}

// Address range: 0x452e8 - 0x4531a
int32_t function_452e8(void) {
    int32_t v1 = g4; // 0x452e8
    g9 = v1;
    int32_t v2; // 0x452fa
    if (v1 == 0) {
        // bb
        v2 = function_45356((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v2;
    } else {
        v2 = v1;
    }
    // 0x452fc
    g9 = v2;
    g6 = v2;
    int32_t v3; // 0x45308
    if (v2 == 0) {
        int32_t v4 = function_45356((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x45302
        g4 = v4;
        v3 = g6;
    } else {
        v3 = v2;
    }
    int32_t v5 = *(int32_t *)(v3 + 8) - 8; // 0x4530b
    g4 = v5;
    int32_t result; // 0x45311
    if (v5 >= 57) {
        // bb233
        result = function_4534b();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x45313
    return result;
}

// Address range: 0x45335 - 0x45336
int32_t function_45335(int32_t a1, int32_t a2) {
    // 0x45335
    return g4;
}

// Address range: 0x4534b - 0x45356
int32_t function_4534b(void) {
    int32_t v1 = g6 + 16; // 0x4534b
    g6 = v1;
    int32_t v2; // 0x45350
    if (v1 == 0) {
        int32_t v3 = function_45356((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x4534e
        g4 = v3;
        v2 = g6;
    } else {
        v2 = v1;
    }
    int32_t result = *(int32_t *)v2; // 0x45350
    g4 = result;
    return result;
}

// Address range: 0x45356 - 0x45363
int32_t function_45356(int32_t a1, int32_t a2, int32_t a3) {
    // 0x45356
    *(int32_t *)(g5 + 8) = (int32_t)"        ms_player_dump_properties finished.\n";
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return g4;
}

// Address range: 0x453a4 - 0x453a6
int32_t function_453a4(void) {
    int32_t result = function_4534b(); // 0x453a4
    g4 = result;
    return result;
}

// Address range: 0x453e2 - 0x453e7
int32_t function_453e2(void) {
    int32_t result = function_4534b(); // 0x453e2
    g4 = result;
    return result;
}

// Address range: 0x453f0 - 0x4540b
int32_t function_453f0(void) {
    int32_t v1 = g6; // 0x453f0
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x453f0
    g9 = v2;
    int32_t v3 = g10; // 0x453f3
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 12); // 0x453ff
    g9 = v4;
    g4 = (int32_t)*(int16_t *)(v4 + v3);
    int32_t result = function_45335(v3, v2); // 0x45406
    g4 = result;
    return result;
}

// Address range: 0x45410 - 0x4544a
int32_t function_45410(void) {
    int32_t v1 = g6; // 0x45410
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x45410
    g9 = v2;
    int32_t v3 = g10; // 0x45413
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 12); // 0x4541f
    g7 = v4;
    int32_t v5 = (v4 >= 0 ? v4 : v4 + 7) / 8; // 0x4542a
    g9 = v5;
    int32_t v6 = (int32_t)*(char *)(v5 + v3); // 0x4542d
    g4 = v6;
    int32_t v7 = v4 % 8; // 0x4543e
    g7 = v7;
    uint32_t v8 = v7 & (int32_t)&g862 & 31; // 0x45440
    int32_t v9; // 0x45440
    if (v8 != 0) {
        // bb
        v9 = v6 >> v8;
        g4 = v9;
    } else {
        v9 = v6;
    }
    // bb230
    g4 = v9 % 2;
    int32_t result = function_45335(v3, v2); // 0x45445
    g4 = result;
    return result;
}

// Address range: 0x45450 - 0x4546b
int32_t function_45450(void) {
    int32_t v1 = g6; // 0x45450
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x45450
    g9 = v2;
    int32_t v3 = g10; // 0x45453
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 12); // 0x4545f
    g9 = v4;
    g4 = (int32_t)*(char *)(v4 + v3);
    int32_t result = function_45335(v3, v2); // 0x45466
    g4 = result;
    return result;
}

// Address range: 0x45470 - 0x45694
int32_t function_45470(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x45473
    int32_t v2 = g10; // 0x45474
    int32_t v3 = g6; // 0x45475
    g4 = a2;
    g10 = a1;
    int32_t result = function_261f0(a2); // 0x45482
    g4 = result;
    g6 = result;
    if (result == 0) {
        // 0x45568
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
  lab_0x454b8_2:;
    int32_t result2; // 0x4556f
    int32_t v4; // 0x4562d
    int32_t v5; // 0x454bb
    int32_t v6; // 0x45646
    while (true) {
      lab_0x454b8:
        // 0x454b8
        v5 = function_25190(result);
        g4 = v5;
        g8 = v5;
        char * v7 = (char *)v5; // 0x454c9
        int32_t v8 = function_2cc30((int32_t)"@achievements", v7); // 0x454cd
        g4 = v8;
        if (v8 == 0) {
            int32_t v9 = *(int32_t *)(g10 + 144); // 0x45498
            g8 = v9;
            if (v9 >= 0 == (v9 != 0)) {
                // 0x45570
                g8 = 0;
                int32_t v10 = function_26cf0(); // 0x45579
                g4 = v10;
                g4 = function_26330(v10);
                int32_t v11 = *(int32_t *)(g10 + 132); // 0x45591
                g4 = v11;
                int32_t v12 = g8; // 0x45597
                g8 = v12 + 1;
                g4 = v10;
                function_27680(v10, NULL, *(int32_t *)(4 * v12 + v11));
                g4 = v10;
                g4 = function_25fb0(g6, v10);
                while (*(int32_t *)(g10 + 144) > g8) {
                    // 0x45572
                    v10 = function_26cf0();
                    g4 = v10;
                    g4 = function_26330(v10);
                    v11 = *(int32_t *)(g10 + 132);
                    g4 = v11;
                    v12 = g8;
                    g8 = v12 + 1;
                    g4 = v10;
                    function_27680(v10, NULL, *(int32_t *)(4 * v12 + v11));
                    g4 = v10;
                    g4 = function_25fb0(g6, v10);
                }
            }
            goto lab_0x454a6;
        } else {
            int32_t v13 = function_2cc30((int32_t)"@awards", v7); // 0x454e1
            g4 = v13;
            if (v13 != 0) {
                int32_t v14 = (int32_t)g450; // 0x455d8
                g4 = v14;
                g9 = *(int32_t *)g450;
                g9 = *(int32_t *)g450;
                if (g450 != NULL) {
                    int32_t v15 = *(int32_t *)g450; // 0x455f1
                    g7 = v15;
                    g9 = v14;
                    if (v15 != 0) {
                        while (true) {
                            int32_t v16 = function_2cc30(v5, (char *)v15); // 0x45610
                            g4 = v16;
                            g9 = v14;
                            int32_t v17; // 0x45620
                            if (v16 == 0) {
                                // bb
                                g4 = function_456a0();
                                v17 = g9;
                            } else {
                                v17 = v14;
                            }
                            int32_t v18 = v17 + 12; // 0x45620
                            g9 = v18;
                            if (v18 == 0) {
                                // break -> 0x45625
                                break;
                            }
                            int32_t v19 = *(int32_t *)v18; // 0x45600
                            g7 = v19;
                            if (v19 == 0) {
                                // break -> 0x45625
                                break;
                            }
                            v15 = v19;
                            v14 = v18;
                        }
                    }
                }
                if (v5 != 0) {
                    // 0x4562d
                    v4 = (int32_t)g450;
                    g4 = v4;
                    g9 = *(int32_t *)g450;
                    g9 = *(int32_t *)g450;
                    if (g450 == NULL) {
                        goto lab_0x4567d;
                    } else {
                        // 0x45646
                        v6 = *(int32_t *)g450;
                        g7 = v6;
                        g9 = v4;
                        if (v6 != 0) {
                            goto lab_0x4565e;
                        } else {
                            goto lab_0x4567d;
                        }
                    }
                }
                goto lab_0x454a6;
            } else {
                int32_t v20 = *(int32_t *)(g10 + 164); // 0x454ee
                g7 = v20;
                if (v20 < 1) {
                    goto lab_0x454a6;
                } else {
                    // 0x454f8
                    g8 = 0;
                    int32_t v21 = function_26cf0(); // 0x45501
                    g4 = v21;
                    g4 = function_26330(v21);
                    int32_t v22 = *(int32_t *)(g10 + 152); // 0x45519
                    g4 = v22;
                    int32_t v23 = g8; // 0x4551f
                    g8 = v23 + 1;
                    g4 = v21;
                    function_27680(v21, NULL, *(int32_t *)(4 * v23 + v22));
                    g4 = v21;
                    g4 = function_25fb0(g6, v21);
                    while (*(int32_t *)(g10 + 164) > g8) {
                        // 0x454fa
                        v21 = function_26cf0();
                        g4 = v21;
                        g4 = function_26330(v21);
                        v22 = *(int32_t *)(g10 + 152);
                        g4 = v22;
                        v23 = g8;
                        g8 = v23 + 1;
                        g4 = v21;
                        function_27680(v21, NULL, *(int32_t *)(4 * v23 + v22));
                        g4 = v21;
                        g4 = function_25fb0(g6, v21);
                    }
                    int32_t v24 = function_26220(g6); // 0x45556
                    g4 = v24;
                    g6 = v24;
                    if (v24 == 0) {
                        result2 = v24;
                        // break -> 0x45568
                        break;
                    }
                    result = v24;
                    goto lab_0x454b8;
                }
            }
        }
    }
  lab_0x45568:
    // 0x45568
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x454a6:;
    int32_t v25 = function_26220(g6); // 0x454a9
    g4 = v25;
    g6 = v25;
    if (v25 == 0) {
        result2 = 0;
        // break -> 0x45568
        goto lab_0x45568;
    }
    result = v25;
    // continue -> 0x454b8
    goto lab_0x454b8_2;
  lab_0x4567d:;
    int32_t result3 = *(int32_t *)g10; // 0x4567d
    g4 = result3;
    return result3;
  lab_0x4565e:;
    int32_t v26 = function_2cc30(v5, (char *)v6); // 0x45668
    g4 = v26;
    g9 = v4;
    int32_t v27; // 0x45678
    if (v26 == 0) {
        // bb286
        g4 = function_45700();
        v27 = g9;
        goto lab_0x45678;
    } else {
        v27 = v4;
        goto lab_0x45678;
    }
  lab_0x45678:;
    int32_t v28 = v27 + 12; // 0x45678
    g9 = v28;
    if (v28 != 0) {
        int32_t v29 = *(int32_t *)v28; // 0x45658
        g7 = v29;
        if (v29 == 0) {
            goto lab_0x4567d;
        } else {
            v6 = v29;
            v4 = v28;
            goto lab_0x4565e;
        }
    } else {
        goto lab_0x4567d;
    }
}

// Address range: 0x45699 - 0x4569e
int32_t function_45699(void) {
    // 0x45699
    return g4;
}

// Address range: 0x456a0 - 0x456fc
int32_t function_456a0(void) {
    int32_t v1 = g10; // 0x456a0
    int32_t v2 = *(int32_t *)(v1 + 144); // 0x456a0
    g4 = v2;
    g8 = 0;
    int32_t result; // 0x456e5
    if (v2 < 1) {
        // 0x456d6
        result = function_27680(g6, (char *)&g129, 0);
        g4 = result;
        return result;
    }
    int32_t v3 = *(int32_t *)(v1 + 132); // 0x456ac
    g7 = v3;
    g8 = 1;
    int32_t v4 = *(int32_t *)(g9 + 4); // 0x456b6
    g9 = v4;
    if (*(int32_t *)v3 == v4) {
        // 0x456d6
        result = function_27680(g6, (char *)&g129, 1);
        g4 = result;
        return result;
    }
    // 0x456bd
    g8 = 0;
    int32_t v5 = 0; // 0x456cd
    int32_t v6; // 0x456d6
    while (true) {
        int32_t v7 = v5 + 1; // 0x456cd
        g8 = v7;
        if (v7 == v2) {
            // break -> 0x456d4
            break;
        }
        // 0x456c8
        if (*(int32_t *)(4 * v7 + v3) == v4) {
            int32_t v8 = v5 != -2; // 0x456f5
            g4 = v8;
            g8 = v8;
            v6 = v8;
            goto lab_0x456d6;
        }
        v5 = v7;
    }
    // 0x456d4
    g8 = 0;
    v6 = 0;
  lab_0x456d6:
    // 0x456d6
    result = function_27680(g6, (char *)&g129, v6);
    g4 = result;
    return result;
}

// Address range: 0x45700 - 0x45736
int32_t function_45700(void) {
    int32_t v1 = g10; // 0x45700
    int32_t result = *(int32_t *)(v1 + 164); // 0x45700
    g4 = result;
    g8 = 0;
    g7 = *(int32_t *)(v1 + 152);
    g8 = 1;
    g9 += 4;
    g8 = 0;
    int32_t v2 = 1; // 0x4572d
    while (v2 != result) {
        // 0x4572d
        v2++;
    }
    // 0x45734
    g8 = v2;
    return result;
}

// Address range: 0x45736 - 0x45818
int32_t function_45736(int32_t a1, int32_t a2) {
    // 0x45736
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 28);
    g4 = function_26d40();
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x45746
    g4 = v2;
    g6 = v2;
    g4 = *(int32_t *)(g5 - 28);
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // bp-4
    g5 = &v3;
    int32_t v4 = g8; // 0x45763
    int32_t v5 = g10; // 0x45764
    int32_t v6 = g6; // 0x45765
    g4 = a2;
    g8 = a1;
    int32_t v7 = function_26190(a2); // 0x45772
    g4 = v7;
    g6 = v7;
    int32_t v8; // 0x457be
    int32_t result; // 0x45817
    int32_t v9; // 0x457db
    if (v7 != 0) {
        v8 = v7;
        while (true) {
          lab_0x457be:;
            int32_t v10 = function_25190(v8); // 0x457c1
            g4 = v10;
            int32_t v11 = *(int32_t *)(g8 + (int32_t)&g835); // 0x457d2
            g4 = v11;
            v9 = function_27340(v11, v10, 0);
            g4 = v9;
            g10 = v9;
            int32_t v12 = function_27fc0(g6, ":refresh", 0); // 0x457f5
            g4 = v12;
            if (v12 != 0) {
                goto lab_0x45788;
            } else {
                if (v9 != 0) {
                    goto lab_0x4579c;
                } else {
                    goto lab_0x45788;
                }
            }
        }
    } else {
        result = v7;
    }
  lab_0x45810:
    // 0x45810
    g6 = v6;
    g10 = v5;
    g8 = v4;
    return result;
  lab_0x45788:;
    int32_t v13 = *(int32_t *)&g294; // 0x45788
    g4 = v13;
    if (v13 != 0) {
        // 0x45791
        g9 = v13;
    }
    goto lab_0x4579c;
  lab_0x4579c:
    // 0x4579c
    g4 = function_2a090(g6, v9, 3);
    int32_t v14 = function_261c0(g6); // 0x457b3
    g4 = v14;
    g6 = v14;
    if (v14 == 0) {
        result = 0;
        // break -> 0x45810
        goto lab_0x45810;
    }
    v8 = v14;
    goto lab_0x457be;
}

// Address range: 0x45820 - 0x458e8
int32_t function_45820(int32_t a1, int32_t result) {
    // 0x45820
    g7 = g292;
    int32_t v1 = g6; // 0x4582c
    int32_t v2 = g10; // 0x4582f
    g4 = result;
    int32_t v3 = g8; // 0x45835
    if (g292 == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v4 = *(int32_t *)(g292 + 12); // 0x4583c
    g6 = v4;
    if (v4 == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v5 = *(int32_t *)(g292 + 8); // 0x45843
    g9 = v5;
    if (v5 == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v6 = *(int32_t *)(g292 + 4); // 0x4584a
    g7 = v6;
    if (v6 == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    if (result == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    // 0x45855
    g6 = a1;
    int32_t v7 = *(int32_t *)(a1 + 4); // 0x45858
    g7 = v7;
    int32_t v8 = *(int32_t *)(a1 + 8); // 0x4585b
    g6 = v8;
    int32_t v9 = v8 | v7; // 0x45860
    g10 = v9;
    if (v9 == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v10 = *(int32_t *)(result + 4); // 0x45864
    g8 = v10;
    int32_t v11 = *(int32_t *)result ^ v7; // 0x4586b
    g10 = v11;
    int32_t v12 = v11 | v10 ^ v8; // 0x4586d
    g8 = v12;
    if (v12 != 0 || *(char *)(result + 8) % 2 == 0) {
        // 0x45878
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v13 = *(int32_t *)v5; // 0x4588e
    g4 = v13;
    if (v13 != 0) {
        int32_t v14 = a1 + 20; // 0x458b1
        g4 = v14;
        g4 = function_2d970((int32_t *)v14, v13, 32);
    }
    // 0x458bc
    g4 = g545;
    int32_t v15 = *(int32_t *)(g545 + 48); // 0x458c1
    g4 = v15;
    int32_t result2; // 0x458e1
    if (v15 != 0) {
        int32_t v16 = a1 + 20; // 0x458db
        g4 = v16;
        result2 = function_2d970((int32_t *)v16, (int32_t)"WWWWWWWWWWWWWWW", 32);
        g4 = result2;
    } else {
        result2 = 0;
    }
    // 0x45878
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x45901 - 0x459de
int32_t function_45901(void) {
    int32_t v1 = g4; // 0x45901
    g9 = v1;
    int32_t v2; // 0x45913
    if (v1 == 0) {
        // bb
        v2 = function_45a60();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3; // 0x4592b
    if (v2 == 0) {
        // bb240
        v3 = function_45ab0();
        g4 = v3;
    } else {
        v3 = v2;
    }
    int32_t v4 = function_2cc30((int32_t)"everything", (char *)v3); // 0x4594c
    g4 = g292;
    int32_t v5; // 0x45974
    int32_t v6; // 0x45958
    if (v4 != 0) {
        // bb241
        v6 = function_45a10();
        g4 = v6;
        v5 = g292;
    } else {
        v5 = g292;
        v6 = g292;
    }
    int32_t v7 = *(int32_t *)(v6 + 20); // 0x4595e
    g4 = v7;
    g8 = g5 - 28;
    g9 = *(int32_t *)v7;
    g4 = v5;
    int32_t * v8 = (int32_t *)(v5 + 20); // 0x45979
    int32_t v9 = *v8; // 0x45979
    g4 = v9;
    g9 = *(int32_t *)v9;
    g4 = v5;
    int32_t * v10 = (int32_t *)(v5 + 36); // 0x459b8
    int32_t v11 = *v10; // 0x459b8242
    g4 = v11;
    g9 = *(int32_t *)v11;
    g4 = v5;
    int32_t result; // 0x459cc
    if (v11 >= 0 != v11 != 0) {
        // 0x459cc
        result = *v8;
        g4 = result;
        g9 = *(int32_t *)result;
        return result;
    }
    int32_t v12 = *v10; // 0x45990
    g6 = v12;
    int32_t v13 = *(int32_t *)v12; // 0x45993
    g4 = v13;
    g10 = *(int32_t *)(v13 + 24);
    g4 = v5;
    int32_t v14 = *v10; // 0x459b8
    g4 = v14;
    g9 = *(int32_t *)v14;
    g4 = v5;
    while (v14 >= 0 == (v14 != 0)) {
        // 0x45990
        v12 = *v10;
        g6 = v12;
        v13 = *(int32_t *)v12;
        g4 = v13;
        g10 = *(int32_t *)(v13 + 24);
        g4 = v5;
        v14 = *v10;
        g4 = v14;
        g9 = *(int32_t *)v14;
        g4 = v5;
    }
    // 0x459cc
    result = *v8;
    g4 = result;
    g9 = *(int32_t *)result;
    return result;
}

// Address range: 0x459e2 - 0x459e8
int32_t function_459e2(void) {
    // 0x459e2
    return g4;
}

// Address range: 0x459e8 - 0x45a06
int32_t function_459e8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = *(int32_t *)(g4 + 92); // 0x459e8
    g4 = result;
    g9 = *(int32_t *)result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x45a10 - 0x45a50
int32_t function_45a10(void) {
    int32_t v1 = *(int32_t *)(g4 + 20); // 0x45a10
    g10 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x45a13
    g4 = v2;
    g8 = *(int32_t *)(v2 + 32);
    int32_t result; // 0x45a33
    if ((char)v2 != 0) {
        // bb
        result = function_45a78();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x45a35
    return result;
}

// Address range: 0x45a54 - 0x45a5d
int32_t function_45a54(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b2cc4); // 0x45a54
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x45a60 - 0x45a67
int32_t function_45a60(void) {
    // 0x45a60
    return g4;
}

// Address range: 0x45a6b - 0x45a74
int32_t function_45a6b(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b2cc4); // 0x45a6b
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x45a78 - 0x45aa3
int32_t function_45a78(void) {
    // 0x45a78
    g4 = g292;
    int32_t result = *(int32_t *)(g292 + 20); // 0x45a7d
    g4 = result;
    g9 = *(int32_t *)result;
    return result;
}

// Address range: 0x45aa7 - 0x45ab0
int32_t function_45aa7(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b2cc4); // 0x45aa7
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x45ab0 - 0x45ab7
int32_t function_45ab0(void) {
    // 0x45ab0
    return g4;
}

// Address range: 0x45abc - 0x45ac1
int32_t function_45abc(void) {
    // 0x45abc
    return g4;
}

// Address range: 0x45ad0 - 0x45b27
int32_t function_45ad0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x45ad6
    g6 = a2;
    int32_t v2 = g10; // 0x45adc
    g10 = a1;
    int32_t v3 = g8; // 0x45ae2
    int32_t result = *(int32_t *)a2; // 0x45ae5
    g4 = result;
    int32_t v4 = *(int32_t *)(a2 + 4); // 0x45ae7
    g9 = v4;
    int32_t v5 = *(int32_t *)(a2 + 12); // 0x45aea
    g8 = v5;
    int32_t v6 = *(int32_t *)(a2 + 8) ^ result; // 0x45af2
    g7 = v6;
    int32_t v7 = v6 | v5 ^ v4; // 0x45af4
    g8 = v7;
    if (v7 != 0) {
        // 0x45af8
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v8 = *(int32_t *)(a1 + (int32_t)&g33) ^ v4; // 0x45b08
    g9 = v8;
    int32_t result2 = *(int32_t *)(a1 + (int32_t)L"Fb") ^ result; // 0x45b0e
    g4 = result2;
    int32_t v9 = result2 | v8; // 0x45b14
    g9 = v9;
    if (v9 != 0) {
        // 0x45af8
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result2;
    }
    int32_t result3 = a1 + (int32_t)&g50; // 0x45b18
    g4 = result3;
    g8 = a1 + (int32_t)&g34;
    return result3;
}

// Address range: 0x45b2b - 0x45cf1
int32_t function_45b2b(void) {
    // 0x45b2b
    *(int32_t *)g7 = -0x46000000;
    int32_t v1 = g4; // 0x45b33
    char v2 = 2 * (char)v1; // 0x45b35
    *(char *)v1 = v2;
    int32_t v3; // 0x45ce4
    if (v2 != 0) {
        // 0x45cdd
        *(char *)(g10 + (int32_t)&g34) = 0;
        v3 = g10 + (int32_t)&g35;
        g8 = v3;
        g9 = g9 & -256 | 59;
    } else {
        // 0x45b2b
        v3 = g8;
    }
    // 0x45b3d
    int32_t v4; // 0x45cd2
    int32_t v5; // 0x45cd5
    if ((v3 & 2) != 0) {
        // 0x45ccd
        *(int16_t *)v3 = 0;
        v4 = g9 - 2;
        g9 = v4;
        v5 = g8 + 2;
        g8 = v5;
    } else {
        // 0x45b3d
        v5 = v3;
        v4 = g9;
    }
    // 0x45b49
    g4 = 0;
    int32_t v6 = v4 / 4; // 0x45b4d
    g7 = v6;
    __asm_rep_stosd_memset((char *)v5, 0, v6);
    int32_t v7 = (g3 ? -4 : 4) * v6 + v5; // 0x45b53
    g8 = v7;
    g7 = 0;
    int32_t v8; // 0x45cc5
    if ((v4 & 2) != 0) {
        // 0x45cc0
        *(int16_t *)v7 = 0;
        v8 = g8 + 2;
        g8 = v8;
    } else {
        v8 = v7;
    }
    int32_t v9 = g9 % 2; // 0x45b5b
    g9 = v9;
    if (v9 != 0) {
        // 0x45cb0
        *(char *)v8 = 0;
    }
    int32_t v10 = g10; // 0x45b64
    int32_t v11 = *(int32_t *)(v10 + (int32_t)L"Fb"); // 0x45b64
    g4 = v11;
    g9 = *(int32_t *)(v10 + (int32_t)&g33);
    *(int32_t *)(v10 + (int32_t)&g34) = v11;
    int32_t v12 = g10; // 0x45b76
    int32_t v13 = *(int32_t *)(v12 + (int32_t)&g41); // 0x45b76
    g4 = v13;
    *(int32_t *)(v12 + (int32_t)&g37) = g9;
    if (v13 != 0) {
        // 0x45b86
        g4 = function_28600(v13);
    }
    // 0x45b8e
    *(int32_t *)(g10 + (int32_t)&g41) = 0;
    int32_t v14 = (int32_t)g450; // 0x45b98
    g4 = v14;
    int32_t v15 = g6; // 0x45ba5
    g9 = v15;
    g7 = *(int32_t *)(v15 + 4);
    g8 = *(int32_t *)g450;
    *(int32_t *)(g10 + (int32_t)&g41) = v14;
    if (g450 == NULL) {
        // 0x45c9b
        *(int32_t *)(g10 + (int32_t)&g49) = 3;
        return g4;
    }
    int32_t v16 = function_27340(g4, (int32_t)"options", 1); // 0x45bdb
    g4 = v16;
    if (v16 != 0) {
        int32_t v17 = g6; // 0x45be4
        g7 = v17;
        int32_t v18 = *(int32_t *)(v17 + 4); // 0x45be6
        g6 = v18;
        g4 = function_27600(v16, "sessionid", v17, v18);
    }
    int32_t v19 = *(int32_t *)(g10 + (int32_t)&g41); // 0x45c11
    g4 = v19;
    int32_t v20 = function_27340(v19, (int32_t)"player", 1); // 0x45c1a
    g4 = v20;
    g6 = v20;
    if (v20 != 0) {
        int32_t v21 = g10; // 0x45c25
        g4 = v21;
        function_27600(v20, "xuid", v21, g9);
        int32_t v22 = g10; // 0x45c44
        g4 = v22;
        function_27600(g6, "xuidOnline", v22, g9);
        int32_t v23 = g10; // 0x45c63
        g4 = v23;
        function_27920(g6, "name", (char *)v23);
        g4 = g10;
        g4 = function_277f0(g6, (int32_t)"richpresence");
    }
    // 0x45c9b
    *(int32_t *)(g10 + (int32_t)&g49) = 3;
    return g4;
}

// Address range: 0x45d00 - 0x45dbf
int32_t function_45d00(int32_t a1) {
    int32_t v1 = g10; // 0x45d03
    int32_t v2 = g6; // 0x45d04
    g10 = a1;
    int32_t v3 = function_2a500("settings", " system {  network LIVE  }  options {  action joinsession  } "); // 0x45d22
    g4 = v3;
    g6 = v3;
    int32_t v4 = g10; // 0x45d29
    int32_t v5 = *(int32_t *)(v4 + (int32_t)&g49); // 0x45d29
    g4 = v5;
    int32_t v6; // 0x45d33
    int32_t v7; // 0x45d47
    if (v5 == 0) {
        int32_t v8 = *(int32_t *)(v4 + (int32_t)&g41); // 0x45d98
        g4 = v8;
        int32_t v9 = function_27c00(v8, "system/network", (int32_t *)"LIVE"); // 0x45da1
        g4 = v9;
        g4 = function_27920(g6, "system/network", (char *)v9);
        v7 = g6;
        v6 = g10;
    } else {
        v7 = v3;
        v6 = v4;
    }
    int32_t v10 = *(int32_t *)(v6 + (int32_t)L"Fb"); // 0x45d33
    g4 = v10;
    int32_t v11 = *(int32_t *)(v6 + (int32_t)&g33); // 0x45d39
    g9 = v11;
    function_27600(v7, "options/sessionid", v10, v11);
    g4 = (int32_t)g450;
    int32_t v12 = g6; // 0x45d5c
    g9 = *(int32_t *)g450;
    g4 = v12;
    int32_t result; // 0x45d75
    if (v12 != 0) {
        // 0x45d72
        result = function_28600(v12);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x45d7a
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x45dc0 - 0x45dc1
int32_t function_45dc0(void) {
    // 0x45dc0
    return g4;
}

// Address range: 0x45e03 - 0x45f3b
int32_t function_45e03(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x4890c45); // 0x45e03
    *v1 = *v1 - 1;
    g4 &= -24;
    int32_t v2 = g6; // 0x45e0b
    int32_t v3 = v2 - 0x3f7a0002; // 0x45e0b
    *(int32_t *)v2 = v3;
    int32_t v4 = g4; // 0x45e11
    g10 = v4;
    if (v3 == 0) {
        int32_t result = function_45f80(); // 0x45e15
        g4 = result;
        return result;
    }
    while (true) {
        int32_t v5 = function_25190(v4); // 0x45e44
        g4 = v5;
        g8 = v5;
        int32_t v6 = function_26cf0(); // 0x45e52
        g4 = v6;
        g6 = v6;
        g4 = function_26330(v6);
        *(int32_t *)(g5 - 32) = g6;
        function_27920(g6, "name", (char *)g8);
        int32_t v7 = *(int32_t *)&g273; // 0x45e80
        g4 = v7;
        g9 = v7;
        if ((char)v7 != 0) {
            // 0x45e9d
            g4 = v7;
            g9 = v7;
            char * v8 = (char *)v7;
            g6 = v7;
            if (v7 == 0) {
                // break -> 0x45f30
                break;
            }
            int32_t v9 = g5; // 0x45ebc
            g9 = *(int32_t *)(v9 + 8);
            *(int32_t *)(v9 - 28) = v7;
            int32_t v10 = *(int32_t *)(g9 + (int32_t)&g835); // 0x45ece
            g4 = v10;
            int32_t v11 = function_27340(v10, g8, 0); // 0x45ed7
            g4 = v11;
            *(int32_t *)(g5 - 44) = v11;
            int32_t v12 = *(int32_t *)&v8; // 0x45eef7
            int32_t v13 = function_27fc0(v12, ":nocache", 0); // 0x45ef2
            g4 = v13;
            if (v13 == 0) {
                int32_t v14 = *(int32_t *)(g5 - 44); // 0x45efb
                g4 = v14;
                if (v14 == 0) {
                    // bb253
                    g4 = function_45f48();
                }
            }
            if (v12 != 0) {
                // 0x45f06
                g4 = function_4efc0(v12, g10);
            }
            int32_t v15 = *(int32_t *)(g5 - 28); // 0x45f12
            g4 = v15;
            if (v15 != 0) {
                // 0x45f1d
                g4 = function_28600(v15);
            }
        }
        int32_t v16 = *(int32_t *)(g5 - 32); // 0x45e20
        g4 = v16;
        if (v16 != 0) {
            // 0x45e27
            g4 = function_28600(v16);
        }
        int32_t v17 = function_261c0(g10); // 0x45e32
        g4 = v17;
        g10 = v17;
        if (v17 == 0) {
            // bb
            g4 = function_45f80();
            v4 = g10;
        } else {
            v4 = v17;
        }
    }
    // 0x45f30
    return 0;
}

// Address range: 0x45f40 - 0x45f45
int32_t function_45f40(void) {
    // 0x45f40
    return g4;
}

// Address range: 0x45f48 - 0x45f7d
int32_t function_45f48(void) {
    int32_t v1 = function_26cf0(); // 0x45f4f
    g4 = v1;
    *(int32_t *)(g5 - 44) = v1;
    g4 = function_26330(g4);
    int32_t v2 = *(int32_t *)(g5 - 44); // 0x45f63
    g4 = v2;
    int32_t v3 = *(int32_t *)(g5 + 8); // 0x45f66
    g9 = v3;
    int32_t v4 = *(int32_t *)(v3 + (int32_t)&g835); // 0x45f6d
    g4 = v4;
    int32_t result = function_25fb0(v4, v2); // 0x45f76
    g4 = result;
    return result;
}

// Address range: 0x45f80 - 0x45f96
int32_t function_45f80(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x45f80
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x45f83
    g4 = result;
    return result;
}

// Address range: 0x45f9a - 0x45fa3
int32_t function_45f9a(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b3cc4); // 0x45f9a
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x45fa3 - 0x45fe4
int32_t function_45fa3(void) {
    // 0x45fa3
    g10 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x45fb0
    g4 = v1;
    g6 = v1;
    g4 = *(int32_t *)(g5 - 44);
    g4 = function_26d40();
    while (true) {
        int32_t v2 = g5 - 28; // 0x45fc2
        g4 = v2;
        function_1fc30(v2);
        int32_t v3 = g5 - 32; // 0x45fcd
        g4 = v3;
        g4 = function_1fc30(v3);
        int32_t v4 = function_7ab57(g6, (int32_t)&g870); // 0x45fdb
        g4 = v4;
        g6 = v4;
    }
}

// Address range: 0x45fe4 - 0x45fe8
int32_t function_45fe4(void) {
    int32_t result = g4; // 0x45fe4
    g6 = result;
    return result;
}

// Address range: 0x4603c - 0x46159
int32_t function_4603c(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    uint32_t v1 = g4; // 0x4603e
    int32_t v2 = v1 + (int32_t)&g541; // 0x4603e
    g4 = v2;
    uint32_t v3 = g6; // 0x46043
    char * v4 = (char *)(v3 + (int32_t)"FCVAR_NEVER_AS_STRING"); // 0x46043
    char v5 = (char)(v3 / 256) + *v4 + (char)(v2 < v1); // 0x46043
    *v4 = v5;
    int32_t v6; // 0x4605d
    if (v5 != 0) {
        // 0x4603c
        v6 = g6;
    } else {
        // 0x4604b
        g4 = g542;
        int32_t v7 = *(int32_t *)(g542 + 36); // 0x46050
        g4 = (int32_t)&g129;
        int32_t v8 = v7 == 0 ? (int32_t)&g129 : v7; // 0x4605a
        g6 = v8;
        v6 = v8;
    }
    // 0x4605d
    if (*(char *)v6 == 0) {
        // 0x46062
        int32_t v9; // ebp
        int32_t result = (int32_t)*(char *)(v9 - 45); // 0x46062
        g4 = result;
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return result;
    }
    int32_t v10 = function_26cf0(); // 0x46077
    g4 = v10;
    g8 = v10;
    function_26330(v10);
    g9 = g452;
    g4 = 0;
    *(int32_t *)(g5 - 28) = g8;
    int32_t v11 = g452 + 4; // 0x460ad
    g7 = v11;
    int32_t v12 = g452 != 0 ? v11 : g4; // 0x460b5
    g4 = v12;
    int32_t v13 = function_2b2b0(g8, v12, (int32_t *)g6, 0, 0); // 0x460bc
    g4 = v13;
    if ((char)v13 == 0) {
        int32_t v14 = function_4616e((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x460c3
        g4 = v14;
    }
    int32_t v15 = function_27340(g8, (int32_t)"items", 0); // 0x460dc
    g4 = v15;
    int32_t v16 = *(int32_t *)(g5 - 56); // 0x460e1
    g9 = v16;
    int32_t v17 = function_27340(v15, v16, 0); // 0x460f3
    g4 = v17;
    *(int32_t *)(g5 - 52) = v17;
    if (v17 == 0) {
        // bb250
        g4 = function_461d8();
    }
    int32_t v18 = g5; // 0x46103
    int32_t v19; // 0x46126
    int32_t v20; // 0x46107
    if (*(char *)(v18 - 44) % 2 != 0) {
        // bb251
        v20 = function_46190();
        g4 = v20;
        v19 = g5;
    } else {
        // 0x46103
        v19 = v18;
        v20 = g4;
    }
    // 0x4610d
    g4 = *(int32_t *)(v19 - 64) + v20;
    g4 = *(int32_t *)(v19 - 52);
    *(float32_t *)g10 = (float32_t)g868;
    g4 = function_27c00(g4, (char *)&g129, (int32_t *)&g129);
    int32_t result2 = *(int32_t *)(g5 - 56); // 0x46147
    g4 = result2;
    return result2;
}

// Address range: 0x4615d - 0x46163
int32_t function_4615d(void) {
    // 0x4615d
    return g4;
}

// Address range: 0x4616e - 0x4618d
int32_t function_4616e(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x4616e
    g4 = v1;
    g4 = function_28600(v1);
    int32_t result = (int32_t)*(char *)(g5 - 45); // 0x46181
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x46190 - 0x461a7
int32_t function_46190(void) {
    int32_t v1 = *(int32_t *)(g5 - 52); // 0x46190
    g4 = v1;
    int32_t v2 = *(int32_t *)(g5 - 44); // 0x46193
    g7 = v2;
    int32_t v3 = *(int32_t *)(g5 - 64) + v1; // 0x46196
    g4 = v3;
    int32_t v4 = *(int32_t *)v3; // 0x46199
    g9 = v4;
    int32_t v5 = *(int32_t *)(v2 - 1 + v4); // 0x4619b
    g9 = v5;
    *(int32_t *)(g5 - 60) = v5;
    return g4;
}

// Address range: 0x461b0 - 0x461d3
int32_t function_461b0(void) {
    // 0x461b0
    g4 = g292;
    int32_t v1 = g10; // 0x461b5
    g7 = v1;
    int32_t v2 = *(int32_t *)(g292 + 20); // 0x461b7
    g4 = v2;
    g9 = *(int32_t *)v2;
    int32_t v3 = g5; // 0x461c0
    int32_t v4 = *(int32_t *)(v3 - 56); // 0x461c0
    g7 = v4;
    *(char *)(v3 - 45) = 1;
    int32_t result = function_4616e(v2, v4, v1, (int32_t)&g870); // 0x461d1
    g4 = result;
    return result;
}

// Address range: 0x461d8 - 0x462ba
int32_t function_461d8(void) {
    int32_t v1 = function_27340(g8, (int32_t)"wildcards", 0); // 0x461eb
    g4 = v1;
    int32_t v2 = function_261f0(v1);
    int32_t v3; // 0x46265
    while (true) {
        // 0x46208
        g4 = v2;
        g8 = v2;
        int32_t v4; // 0x4620c
        if (v2 == 0) {
            // bb
            v4 = function_4616e((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
            g4 = v4;
        } else {
            v4 = v2;
        }
        int32_t v5 = function_25190(v4); // 0x46215
        g4 = v5;
        *(int32_t *)(g5 - 52) = v5;
        int32_t v6 = function_2cb40(g4); // 0x46220
        g4 = v6;
        if (v6 != 0) {
            int32_t v7 = g5; // 0x46229
            int32_t v8 = *(int32_t *)(v7 - 52); // 0x46229
            g9 = v8;
            int32_t v9 = v6 - 1; // 0x4622c
            if (*(char *)(v8 + v9) == 42) {
                if (v6 <= 1) {
                    v3 = v7;
                    // break -> 0x46252
                    break;
                }
                // 0x46238
                g4 = v9;
                int32_t v10 = *(int32_t *)(v7 - 56); // 0x46242
                g4 = v10;
                int32_t v11 = function_2cf90(v8, v10, v9); // 0x46249
                g4 = v11;
                if (v11 == 0) {
                    // 0x46238
                    v3 = g5;
                    goto lab_0x46252;
                }
            }
        }
        // 0x46200
        v2 = function_26220(g8);
    }
    goto lab_0x46252;
  lab_0x46252:;
    int32_t v12 = v3 - 44; // 0x46252
    int32_t v13; // 0x46268
    if (*(char *)v12 % 2 != 0) {
        int32_t v14 = *(int32_t *)(v3 - 64); // 0x46258
        g9 = v14;
        int32_t v15 = *(int32_t *)v12; // 0x4625b
        g7 = v15;
        int32_t v16 = *(int32_t *)(g8 + v14); // 0x4625e
        g4 = v16;
        int32_t v17 = *(int32_t *)(v15 - 1 + v16); // 0x46261
        g4 = v17;
        *(int32_t *)(v3 - 60) = v17;
        v13 = g5;
    } else {
        v13 = v3;
    }
    // 0x46268
    g4 = g8 + *(int32_t *)(v13 - 64);
    *(float32_t *)g10 = (float32_t)g868;
    g13++;
    g4 = function_27c00(g8, (char *)&g129, (int32_t *)&g129);
    g9 = *(int32_t *)(g5 - 52);
    int32_t result = *(int32_t *)(g5 - 56); // 0x462a4
    g4 = result;
    return result;
}

// Address range: 0x462bf - 0x462c4
int32_t function_462bf(void) {
    // 0x462bf
    return g4;
}

// Address range: 0x462c5 - 0x462c6
int32_t function_462c5(void) {
    // 0x462c5
    return g4;
}

// Address range: 0x462d7 - 0x462d8
int32_t function_462d7(void) {
    // 0x462d7
    return g4;
}

// Address range: 0x462f0 - 0x462f1
int32_t function_462f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x462f0
    return g4;
}

// Address range: 0x46338 - 0x46459
int32_t function_46338(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    uint32_t v1 = g4; // 0x4633a
    int32_t v2 = v1 + (int32_t)&g541; // 0x4633a
    g4 = v2;
    uint32_t v3 = g6; // 0x4633f
    char * v4 = (char *)(v3 + (int32_t)"FCVAR_NEVER_AS_STRING"); // 0x4633f
    char v5 = (char)(v3 / 256) + *v4 + (char)(v2 < v1); // 0x4633f
    *v4 = v5;
    int32_t v6; // 0x46359
    if (v5 != 0) {
        // 0x46338
        v6 = g6;
    } else {
        // 0x46347
        g4 = g542;
        int32_t v7 = *(int32_t *)(g542 + 36); // 0x4634c
        g4 = (int32_t)&g129;
        int32_t v8 = v7 == 0 ? (int32_t)&g129 : v7; // 0x46356
        g6 = v8;
        v6 = v8;
    }
    // 0x46359
    if (*(char *)v6 == 0) {
        // 0x4635e
        int32_t v9; // ebp
        int32_t result = (int32_t)*(char *)(v9 - 45); // 0x4635e
        g4 = result;
        g6 = a1;
        g10 = a2;
        g8 = a3;
        return result;
    }
    int32_t v10 = function_26cf0(); // 0x46377
    g4 = v10;
    g8 = v10;
    function_26330(v10);
    g9 = g452;
    g4 = 0;
    *(int32_t *)(g5 - 28) = g8;
    int32_t v11 = g452 + 4; // 0x463ad
    g7 = v11;
    int32_t v12 = g452 != 0 ? v11 : g4; // 0x463b5
    g4 = v12;
    int32_t v13 = function_2b2b0(g8, v12, (int32_t *)g6, 0, 0); // 0x463bc
    g4 = v13;
    if ((char)v13 == 0) {
        int32_t v14 = function_4646e((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x463c3
        g4 = v14;
    }
    int32_t v15 = function_27340(g8, (int32_t)"items", 0); // 0x463dc
    g4 = v15;
    int32_t v16 = *(int32_t *)(g5 - 56); // 0x463e1
    g9 = v16;
    int32_t v17 = function_27340(v15, v16, 0); // 0x463f3
    g4 = v17;
    *(int32_t *)(g5 - 52) = v17;
    if (v17 == 0) {
        // bb250
        g4 = function_464d8();
    }
    int32_t v18 = g5; // 0x46403
    int32_t v19; // 0x4640d
    int32_t v20; // 0x46407
    if (*(char *)(v18 - 44) % 2 != 0) {
        // bb251
        v20 = function_46490();
        g4 = v20;
        v19 = g5;
    } else {
        // 0x46403
        v19 = v18;
        v20 = g4;
    }
    int32_t v21 = *(int32_t *)(v19 - 64) + v20; // 0x4640d
    g4 = v21;
    *(int32_t *)g10 = v21;
    int32_t v22 = *(int32_t *)(g5 - 52); // 0x46428
    g4 = v22;
    g4 = function_27c00(v22, (char *)&g129, (int32_t *)&g129);
    int32_t result2 = *(int32_t *)(g5 - 56); // 0x46447
    g4 = result2;
    return result2;
}

// Address range: 0x4645d - 0x46463
int32_t function_4645d(void) {
    // 0x4645d
    return g4;
}

// Address range: 0x4646e - 0x4648d
int32_t function_4646e(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x4646e
    g4 = v1;
    g4 = function_28600(v1);
    int32_t result = (int32_t)*(char *)(g5 - 45); // 0x46481
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x46490 - 0x464a7
int32_t function_46490(void) {
    int32_t v1 = *(int32_t *)(g5 - 52); // 0x46490
    g4 = v1;
    int32_t v2 = *(int32_t *)(g5 - 44); // 0x46493
    g7 = v2;
    int32_t v3 = *(int32_t *)(g5 - 64) + v1; // 0x46496
    g4 = v3;
    int32_t v4 = *(int32_t *)v3; // 0x46499
    g9 = v4;
    int32_t v5 = *(int32_t *)(v2 - 1 + v4); // 0x4649b
    g9 = v5;
    *(int32_t *)(g5 - 60) = v5;
    return g4;
}

// Address range: 0x464b0 - 0x464d3
int32_t function_464b0(void) {
    // 0x464b0
    g4 = g292;
    int32_t v1 = g10; // 0x464b5
    g7 = v1;
    int32_t v2 = *(int32_t *)(g292 + 20); // 0x464b7
    g4 = v2;
    g9 = *(int32_t *)v2;
    int32_t v3 = g5; // 0x464c0
    int32_t v4 = *(int32_t *)(v3 - 56); // 0x464c0
    g7 = v4;
    *(char *)(v3 - 45) = 1;
    int32_t result = function_4646e(v2, v4, v1, (int32_t)&g870); // 0x464d1
    g4 = result;
    return result;
}

// Address range: 0x464d8 - 0x465ba
int32_t function_464d8(void) {
    int32_t v1 = function_27340(g8, (int32_t)"wildcards", 0); // 0x464eb
    g4 = v1;
    int32_t v2 = function_261f0(v1);
    int32_t v3; // 0x46565
    while (true) {
        // 0x46508
        g4 = v2;
        g8 = v2;
        int32_t v4; // 0x4650c
        if (v2 == 0) {
            // bb
            v4 = function_4646e((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
            g4 = v4;
        } else {
            v4 = v2;
        }
        int32_t v5 = function_25190(v4); // 0x46515
        g4 = v5;
        *(int32_t *)(g5 - 52) = v5;
        int32_t v6 = function_2cb40(g4); // 0x46520
        g4 = v6;
        if (v6 != 0) {
            int32_t v7 = g5; // 0x46529
            int32_t v8 = *(int32_t *)(v7 - 52); // 0x46529
            g9 = v8;
            int32_t v9 = v6 - 1; // 0x4652c
            if (*(char *)(v8 + v9) == 42) {
                if (v6 <= 1) {
                    v3 = v7;
                    // break -> 0x46552
                    break;
                }
                // 0x46538
                g4 = v9;
                int32_t v10 = *(int32_t *)(v7 - 56); // 0x46542
                g4 = v10;
                int32_t v11 = function_2cf90(v8, v10, v9); // 0x46549
                g4 = v11;
                if (v11 == 0) {
                    // 0x46538
                    v3 = g5;
                    goto lab_0x46552;
                }
            }
        }
        // 0x46500
        v2 = function_26220(g8);
    }
    goto lab_0x46552;
  lab_0x46552:;
    int32_t v12 = v3 - 44; // 0x46552
    int32_t v13; // 0x46568
    if (*(char *)v12 % 2 != 0) {
        int32_t v14 = *(int32_t *)(v3 - 64); // 0x46558
        g9 = v14;
        int32_t v15 = *(int32_t *)v12; // 0x4655b
        g7 = v15;
        int32_t v16 = *(int32_t *)(g8 + v14); // 0x4655e
        g4 = v16;
        int32_t v17 = *(int32_t *)(v15 - 1 + v16); // 0x46561
        g4 = v17;
        *(int32_t *)(v3 - 60) = v17;
        v13 = g5;
    } else {
        v13 = v3;
    }
    int32_t v18 = g8 + *(int32_t *)(v13 - 64); // 0x4657b
    g4 = v18;
    *(int32_t *)g10 = v18;
    g4 = function_27c00(g8, (char *)&g129, (int32_t *)&g129);
    g9 = *(int32_t *)(g5 - 52);
    int32_t result = *(int32_t *)(g5 - 56); // 0x465a4
    g4 = result;
    return result;
}

// Address range: 0x465bf - 0x465c4
int32_t function_465bf(void) {
    // 0x465bf
    return g4;
}

// Address range: 0x465c4 - 0x4663d
int32_t function_465c4(void) {
    // 0x465c4
    g6 = g4;
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5 - 28; // 0x465d8
    g4 = v1;
    g4 = function_1fc30(v1);
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x465e6
    int32_t v3 = g6; // 0x465f6
    g6 = v2;
    g4 = g292;
    int32_t v4 = g10; // 0x46600
    int32_t v5 = g9; // 0x46603
    g10 = v5;
    g7 = *(int32_t *)(g292 + 20) & (int32_t)&g862;
    g4 = v2;
    int32_t result = function_462f0(0x27fc0, 0, v5, v3, v4, g5); // 0x4662e
    g4 = result;
    g6 = v3;
    g10 = v4;
    return result;
}

// Address range: 0x46640 - 0x46641
int32_t function_46640(int32_t a1) {
    // 0x46640
    return g4;
}

// Address range: 0x4665e - 0x46685
int32_t function_4665e(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g4; // 0x46667
    char v2 = (char)v1 + 123; // 0x46667
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x46667
    g4 = v3;
    int32_t v4; // 0x46669
    if (v2 < 0) {
        // bb
        v4 = function_466e4((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v4;
    } else {
        v4 = v3;
    }
    unsigned char v5 = (char)v4 | *(char *)v4; // 0x4666b
    int32_t v6 = (int32_t)v5 | v4 & -256; // 0x4666b
    g4 = v6;
    int32_t v7; // 0x46676
    if (v5 >= 1) {
        // 0x4666f
        *(int32_t *)(4 * v6 + (int32_t)&g546) = g6;
        v7 = g4;
    } else {
        v7 = v6;
    }
    int32_t result = v7 + 1; // 0x46676
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x466a2 - 0x466d2
int32_t function_466a2(void) {
    int32_t result = (int32_t)g290; // 0x466a2
    g4 = result;
    g9 = result;
    return result;
}

// Address range: 0x466e4 - 0x46702
int32_t function_466e4(int32_t a1, int32_t a2, int32_t a3) {
    int128_t v1 = __asm_movsd_1649(*(int64_t *)(g5 - 16)); // 0x466e4
    *(int32_t *)(g10 + 56) = __asm_movss_1646(__asm_cvtpd2ps(v1));
    int32_t v2 = g6; // 0x466f3
    g6 = v2 + 1;
    int32_t result; // 0x466f9
    if (v2 != 3) {
        // bb
        result = function_466a2();
        g4 = result;
    } else {
        // 0x466e4
        result = g4;
    }
    // 0x466fb
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x46710 - 0x46731
int32_t function_46710(uint32_t a1) {
    g4 = 0;
    g9 = a1;
    int32_t result; // 0x46730
    if (a1 < 4) {
        int32_t * v1 = (int32_t *)(4 * a1 + (int32_t)&g546); // 0x4671d
        g4 = *v1;
        *v1 = 0;
        result = g4;
    } else {
        result = 0;
    }
    // 0x4672f
    return result;
}

// Address range: 0x46740 - 0x4674e
int32_t function_46740(int32_t a1, int32_t a2) {
    // 0x46740
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 52) = a2;
    return g4;
}

// Address range: 0x46750 - 0x4675b
int32_t function_46750(int32_t a1) {
    // 0x46750
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 52); // 0x46757
    g4 = result;
    return result;
}

// Address range: 0x46760 - 0x4676e
int32_t function_46760(int32_t a1, int32_t a2) {
    // 0x46760
    g9 = a2;
    g4 = a1;
    *(char *)(a1 + 56) = (char)a2;
    return g4;
}

// Address range: 0x46770 - 0x4677c
int32_t function_46770(int32_t a1) {
    // 0x46770
    g4 = a1;
    int32_t result = (int32_t)*(char *)(a1 + 56); // 0x46777
    g4 = result;
    return result;
}

// Address range: 0x46780 - 0x46793
int32_t function_46780(int32_t a1) {
    // 0x46780
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + (int32_t)&g49); // 0x46787
    g9 = v1;
    int32_t result = (int32_t)(v1 != 0) | a1 & -256; // 0x4678f
    g4 = result;
    return result;
}

// Address range: 0x467a0 - 0x468bc
int32_t function_467a0(int32_t a1) {
    int32_t v1 = g6; // 0x467a6
    g6 = a1;
    int32_t v2 = g10; // 0x467ac
    int32_t v3 = g8; // 0x467af
    if ((*(int32_t *)(a1 + (int32_t)&g49) || 1) != 1) {
        // 0x467bb
        g6 = v1;
        return g4;
    }
    // 0x467d0
    g4 = g292;
    int32_t v4 = *(int32_t *)(g292 + 16); // 0x467d5
    g4 = v4;
    int32_t * v5;
    if (v4 == 0) {
        // 0x467d0
        v5 = (int32_t *)(a1 + (int32_t)L"Fb");
    } else {
        int32_t v6 = *(int32_t *)(a1 + (int32_t)&g33); // 0x467dc
        g9 = v6;
        int32_t * v7 = (int32_t *)(a1 + (int32_t)L"Fb"); // 0x467e2
        int32_t v8 = *v7; // 0x467e2
        g7 = v8;
        int32_t v9 = v8 | v6; // 0x467ea
        g10 = v9;
        if (v9 != 0) {
            int32_t v10 = *(int32_t *)v4; // 0x46890
            g8 = v10;
            g8 = *(int32_t *)(v10 + 112);
            if ((char)v4 != 0) {
                // 0x468aa
                g8 = a1 + (int32_t)&g50;
                int32_t result; // 0x468b7
                if (*(char *)(a1 + (int32_t)&g51) % 2 == 0) {
                    // bb22
                    result = function_468c1();
                    g4 = result;
                } else {
                    result = v4;
                }
                // 0x468b9
                return result;
            }
            v5 = v7;
        } else {
            v5 = v7;
        }
    }
    uint32_t v11 = a1 + (int32_t)&g34; // 0x467f2
    g8 = v11;
    g9 = 60;
    *v5 = 0;
    *(int32_t *)(g6 + (int32_t)&g33) = 0;
    if (v11 % 2 != 0) {
        // bb
        g4 = function_46910();
    }
    // 0x4681d
    if ((v11 & 2) != 0) {
        // bb20
        g4 = function_46928();
    }
    uint32_t v12 = g9; // 0x46829
    g4 = 0;
    int32_t v13 = v12 / 4; // 0x4682d
    g7 = v13;
    __asm_rep_stosd_memset((char *)v11, 0, v13);
    int32_t v14 = (g3 ? -4 : 4) * v13 + v11; // 0x46833
    g8 = v14;
    g7 = 0;
    if ((v12 & 2) != 0) {
        // 0x46878
        *(int16_t *)v14 = 0;
        int32_t v15 = g8 + 2; // 0x4687d
        g8 = v15;
        int32_t v16 = g9 % 2; // 0x46880
        g9 = v16;
        if (v16 == 0) {
            goto lab_0x4683c;
        } else {
            // 0x46870
            *(char *)v15 = 0;
            goto lab_0x4683c;
        }
    } else {
        int32_t v17 = g9 % 2; // 0x46837
        g9 = v17;
        if (v17 != 0) {
            // 0x46870
            *(char *)v14 = 0;
            goto lab_0x4683c;
        } else {
            goto lab_0x4683c;
        }
    }
  lab_0x4683c:;
    int32_t v18 = g6; // 0x4683c
    int32_t v19 = *(int32_t *)(v18 + (int32_t)&g41); // 0x4683c
    g4 = v19;
    int32_t v20; // 0x4684e
    if (v19 != 0) {
        // 0x46846
        g4 = function_28600(v19);
        v20 = g6;
    } else {
        v20 = v18;
    }
    // 0x4684e
    *(int32_t *)(v20 + (int32_t)&g41) = 0;
    *(int32_t *)(g6 + (int32_t)&g49) = 0;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x468c1 - 0x468e6
int32_t function_468c1(void) {
    int32_t v1 = g6; // 0x468c1
    *(int32_t *)(v1 + (int32_t)&g56) = v1;
    *(int32_t *)(g6 + (int32_t)&g57) = 0x45ad0;
    *(int32_t *)(g6 + (int32_t)&g58) = 0;
    return g4;
}

// Address range: 0x468ea - 0x46909
int32_t function_468ea(void) {
    // 0x468ea
    g8++;
    char * v1 = (char *)(g6 + 0x758bf45d); // 0x468f4
    *v1 = (char)g7 + *v1;
    int32_t v2; // ebp
    g8 = *(int32_t *)(v2 - 4);
    g549++;
    return g4;
}

// Address range: 0x46910 - 0x46924
int32_t function_46910(void) {
    // 0x46910
    *(char *)(g6 + (int32_t)&g34) = 0;
    g8 = g6 + (int32_t)&g35;
    g9 = g9 & -256 | 59;
    return g4;
}

// Address range: 0x46928 - 0x46938
int32_t function_46928(void) {
    // 0x46928
    *(int16_t *)g8 = 0;
    g9 -= 2;
    g8 += 2;
    return g4;
}

// Address range: 0x46940 - 0x46a46
int32_t function_46940(int32_t a1) {
    // 0x46940
    g4 = g292;
    int32_t v1 = g6; // 0x4694b
    int32_t v2 = g10; // 0x4694e
    g6 = a1;
    int32_t v3 = g8; // 0x46954
    int32_t v4 = *(int32_t *)(g292 + 4); // 0x46957
    g4 = v4;
    if (v4 == 0) {
        // 0x46a10
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    // 0x46962
    g9 = *(int32_t *)v4;
    int32_t v5; // bp-36
    g10 = &v5;
    *(int32_t *)(a1 + 16) = (char)v4 == 0 ? 0 : 2;
    g4 = g292;
    int32_t v6 = *(int32_t *)(g292 + 4); // 0x4697e
    g4 = v6;
    g9 = *(int32_t *)v6;
    int32_t v7 = g6; // 0x46990
    int32_t v8 = *(int32_t *)(v7 + 8); // 0x46990
    g8 = v8;
    int32_t v9 = v5; // 0x46996
    g9 = v9;
    uint32_t result;
    int32_t v10 = result % 0x100000; // 0x4699b
    g7 = v10;
    int32_t * v11 = (int32_t *)(v7 + 4); // 0x469a1
    int32_t v12 = *v11 | v8; // 0x469a1
    g8 = v12;
    if (v12 != 0) {
        // 0x46a10
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v13 = result / 0x10000; // 0x469ab
    g8 = v13;
    int32_t v14 = v13 & 240; // 0x469b0
    char v15 = v14; // 0x469b0
    g7 = v14;
    if (v14 == 0) {
        // 0x46a10
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    uint32_t v16 = result / 0x100000; // 0x469bd
    g8 = v16;
    int32_t v17 = v16 % 16; // 0x469c7
    g7 = v17;
    if ((char)v17 >= 11) {
        // 0x46a10
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t result2 = result / 0x1000000 - 1; // 0x469d2
    g4 = result2;
    if ((char)result2 >= 4) {
        // 0x46a10
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result2;
    }
    if (v15 == 16) {
        if (v9 == 0) {
            // 0x46a10
            g6 = v1;
            g10 = v2;
            g8 = v3;
            return result2;
        }
        if (v10 >= 5) {
            // 0x46a10
            g6 = v1;
            g10 = v2;
            g8 = v3;
            return result2;
        }
    } else {
        if (v15 == 112) {
            if (v9 == 0) {
                // 0x46a10
                g6 = v1;
                g10 = v2;
                g8 = v3;
                return result2;
            }
            // 0x46a24
            g7 = v10;
            if (v10 != 0) {
                // 0x46a10
                g6 = v1;
                g10 = v2;
                g8 = v3;
                return result2;
            }
        } else {
            if (v15 == 48) {
                if (v9 == 0) {
                    // 0x46a10
                    g6 = v1;
                    g10 = v2;
                    g8 = v3;
                    return result2;
                }
            }
        }
    }
    // 0x469eb
    g4 = v9;
    *v11 = v9;
    *(int32_t *)(g6 + 8) = g9;
    // 0x46a10
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x46a55 - 0x46a62
int32_t function_46a55(int32_t a1) {
    char v1 = __asm_in_1653((int16_t)g9); // 0x46a55
    bool v2; // cf
    unsigned char v3 = v1 - 117 + (char)v2; // 0x46a56
    int32_t v4 = g6; // 0x46a59
    g6 = v4 & 0xff00 | 256 * (int32_t)v3 | v4 & -0xff01;
    g4 = (int32_t)(v3 + 36) | (g4 | (int32_t)v1) & -256;
    int32_t result = function_e8047294(); // 0x46a5d
    g4 = result;
    return result;
}

// Address range: 0x46a65 - 0x46a73
int32_t function_46a65(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 - 0x3b7cf7a3); // 0x46a65
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x46a6b
    bool v3; // cf
    unsigned char v4 = (char)v2 + 91 + (char)v3; // 0x46a6b
    g4 = (int32_t)v4 | v2 & -256;
    g5 = a1;
    int32_t result = function_46940((int32_t)&g870); // 0x46a6e
    g4 = result;
    return result;
}

// Address range: 0x46a95 - 0x46aa3
int32_t function_46a95(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 - 0x3b7cf7a3); // 0x46a95
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x46a9b
    bool v3; // cf
    unsigned char v4 = (char)v2 + 91 + (char)v3; // 0x46a9b
    g4 = (int32_t)v4 | v2 & -256;
    g5 = a1;
    int32_t result = function_46940((int32_t)&g870); // 0x46a9e
    g4 = result;
    return result;
}

// Address range: 0x46ab0 - 0x46abe
int32_t function_46ab0(int32_t a1, int32_t a2) {
    // 0x46ab0
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 56) = a2;
    return g4;
}

// Address range: 0x46ac0 - 0x46ac1
int32_t function_46ac0(int32_t a1) {
    // 0x46ac0
    return g4;
}

// Address range: 0x46af0 - 0x46af1
int32_t function_46af0(void) {
    // 0x46af0
    return g4;
}

// Address range: 0x46b0d - 0x46b13
int32_t function_46b0d(void) {
    // 0x46b0d
    return g4;
}

// Address range: 0x46b23 - 0x46b24
int32_t function_46b23(void) {
    // 0x46b23
    return g4;
}

// Address range: 0x46b2e - 0x46b34
int32_t function_46b2e(void) {
    // 0x46b2e
    return g4;
}

// Address range: 0x46b34 - 0x46b81
int32_t function_46b34(void) {
    // 0x46b34
    g10 = *(int32_t *)(g4 + 8);
    int32_t v1 = function_26cf0(); // 0x46b40
    g4 = v1;
    g6 = v1;
    int32_t v2 = *(int32_t *)(g8 + 12); // 0x46b47
    g4 = v2;
    function_27760(v1, "OnProfileDataSaved", "iController", v2);
    g4 = g297;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g297;
}

// Address range: 0x46b88 - 0x46b9d
int32_t function_46b88(void) {
    int32_t v1 = g4; // 0x46b88
    int32_t result; // 0x46b8a
    if (v1 != 0) {
        // bb
        result = function_46af0();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x46b90
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return result;
}

// Address range: 0x46ba0 - 0x46bb0
int32_t function_46ba0(void) {
    // 0x46ba0
    *(int32_t *)(4 * g4 + (int32_t)&g546) = 0;
    int32_t result = function_46b23(); // 0x46bab
    g4 = result;
    return result;
}

// Address range: 0x46bd0 - 0x46bd5
int32_t function_46bd0(int32_t a1, int32_t a2) {
    // 0x46bd0
    return g4;
}

// Address range: 0x46be0 - 0x46be5
int32_t function_46be0(void) {
    // 0x46be0
    return g4;
}

// Address range: 0x46bf0 - 0x46bf1
int32_t function_46bf0(int32_t a1) {
    // 0x46bf0
    return g4;
}

// Address range: 0x46c0b - 0x46c0e
int32_t function_46c0b(void) {
    // 0x46c0b
    g7--;
    return g4;
}

// Address range: 0x46c10 - 0x46ca6
int32_t function_46c10(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g8; // 0x46c16
    g8 = a2;
    int32_t v3 = g10; // 0x46c1c
    g10 = a1;
    int32_t v4 = g6; // 0x46c22
    int32_t v5 = *(int32_t *)(a1 + (int32_t)&g835); // 0x46c31
    g4 = v5;
    g4 = function_2a090(v5, a2, 1);
    int32_t v6 = function_26cf0(); // 0x46c46
    g4 = v6;
    g6 = v6;
    g4 = function_26330(v6);
    int32_t v7 = *(int32_t *)(g10 + 12); // 0x46c5d
    g4 = v7;
    g4 = function_27680(g6, "iController", v7);
    function_2a090(g6, g8, 1);
    g4 = g297;
    g10 = v3;
    g8 = v2;
    g9 = g297;
    g6 = v4;
    int32_t result = *(int32_t *)(g297 + 8); // 0x46c9e
    g4 = result;
    return result;
}

// Address range: 0x46ca6 - 0x46cc5
int32_t function_46ca6(void) {
    // 0x46ca6
    g10 = g4;
    g4 = function_26d40();
    int32_t result = function_7ab57(g10, (int32_t)&g870); // 0x46cb3
    g4 = result;
    return result;
}

// Address range: 0x46cd0 - 0x46dde
int32_t function_46cd0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x46cdb
    int32_t v2 = g10; // 0x46cde
    g9 = a2;
    int32_t v3 = g8; // 0x46ce4
    g6 = a1;
    g4 = g297;
    g8 = *(int32_t *)(g297 + 8);
    int32_t v4 = function_26cf0(); // 0x46d58
    g4 = v4;
    if (a2 == 0) {
        // 0x46d58
        g10 = v4;
        int32_t v5 = *(int32_t *)(g6 + 12); // 0x46d5f
        g4 = v5;
        function_27760(v4, "OnProfileDataLoaded", "iController", v5);
    } else {
        // 0x46cfa
        g9 = a2;
        g10 = v4;
        int32_t v6 = *(int32_t *)(g6 + 12); // 0x46d13
        g4 = v6;
        function_276b0(v4, "OnProfileDataLoadFailed", "iController", v6, "error", a2);
    }
    // 0x46d32
    g4 = g297;
    int32_t * v7 = (int32_t *)(g6 + 60); // 0x46d40
    uint32_t result = *v7; // 0x46d40
    g4 = result;
    if (result % 2 == 0) {
        // 0x46d47
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    // 0x46d80
    *v7 = result & -2;
    int32_t v8 = (int32_t)g450; // 0x46d86
    g4 = v8;
    g9 = *(int32_t *)g450;
    g10 = v8;
    int32_t v9 = *(int32_t *)g450; // 0x46d95
    g4 = v9;
    g6 = *(int32_t *)(v9 + 8);
    int32_t v10 = function_26cf0(); // 0x46da1
    g4 = v10;
    g8 = v10;
    function_27a20(v10, "OnInvite", "action", "join");
    int32_t result2 = g6; // 0x46dcb
    g4 = result2;
    g8 = v3;
    g6 = v1;
    g10 = v2;
    return result2;
}

// Address range: 0x46dde - 0x46e48
int32_t function_46dde(void) {
    // 0x46dde
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x46deb
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x46dfd
    g4 = v2;
    g6 = v2;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = g292;
    int32_t v3 = *(int32_t *)(g292 + 4); // 0x46e2b
    g9 = v3;
    g4 = 1;
    int32_t result; // 0x46e43
    if (v3 != 0) {
        // 0x46e37
        result = (int32_t)((char)*(int32_t *)v3 == 0) + 2;
        g4 = result;
    } else {
        result = 1;
    }
    // 0x46e46
    return result;
}

// Address range: 0x46e50 - 0x46ebf
int32_t function_46e50(int32_t a1) {
    int32_t v1 = g6; // 0x46e56
    g6 = a1;
    int32_t v2 = g10; // 0x46e5c
    int32_t * v3 = (int32_t *)(a1 + 52); // 0x46e5f
    uint32_t v4 = *v3; // 0x46e5f
    g10 = v4;
    int32_t v5 = v4 - 2; // 0x46e62
    g882 = v5 == 0;
    g865 = llvm_ctpop_i8((char)v5) % 2 == 0;
    if (v5 == 0) {
        // 0x46e73
        g6 = v1;
        g10 = v2;
        return g4;
    }
    int32_t result = g4; // 0x46e6f
    int32_t v6 = v4 - result; // 0x46e6f
    g882 = v6 == 0;
    g865 = llvm_ctpop_i8((char)v6) % 2 == 0;
    if (v4 >= result) {
        // 0x46e73
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x46e80
    g10 = a1 + (int32_t)&g837;
    unsigned char v7 = *(char *)(a1 + (int32_t)&g838); // 0x46e8e
    g882 = v7 % 2 == 0;
    g865 = v7 % 2 == 0;
    *v3 = result;
    if (v7 % 2 != 0) {
        // bb
        g4 = function_46f18();
    }
    int32_t v8 = g6; // 0x46e9a
    *(int32_t *)(v8 + (int32_t)&g839) = v8;
    *(int32_t *)(g6 + (int32_t)&g840) = 0x49410;
    *(int32_t *)(g6 + (int32_t)&g841) = 0;
    return g4;
}

// Address range: 0x46ec3 - 0x46ec9
int32_t function_46ec3(void) {
    // 0x46ec3
    return g4;
}

// Address range: 0x46f0e - 0x46f13
int32_t function_46f0e(void) {
    // 0x46f0e
    return g4;
}

// Address range: 0x46f18 - 0x46f1b
int32_t function_46f18(void) {
    // 0x46f18
    return g4;
}

// Address range: 0x46f20 - 0x46f25
int32_t function_46f20(void) {
    // 0x46f20
    return g4;
}

// Address range: 0x46f30 - 0x46f5e
int32_t function_46f30(int32_t a1) {
    int32_t v1 = g6; // 0x46f33
    g6 = a1;
    g4 = function_46e50(a1);
    g4 = function_46ac0(g6);
    int128_t v2; // xmm0
    int128_t v3 = __asm_xorps(v2, v2); // 0x46f4a
    __asm_ucomiss(v3, (int32_t)g550);
    if (g865 || !g882) {
        // 0x46f60
        return g4;
    }
    // 0x46f58
    g6 = v1;
    return g4;
}

// Address range: 0x46fb3 - 0x46fb9
int32_t function_46fb3(void) {
    // 0x46fb3
    return g4;
}

// Address range: 0x46fc8 - 0x46fe2
int32_t function_46fc8(int32_t a1, int32_t a2) {
    // 0x46fc8
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x46fc8
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_cvtpd2ps(__asm_movsd_1649(*(int64_t *)v2)); // 0x46fd0
    g550 = __asm_movss_1646(v4);
    g6 = a1;
    return g4;
}

// Address range: 0x46ff0 - 0x47069
int32_t function_46ff0(void) {
    int32_t v1 = g8; // 0x46ff3
    int32_t v2 = g10; // 0x46ff4
    g10 = g548;
    if (g548 < 1) {
        // 0x4701a
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t result; // 0x47020
    while (true) {
        // 0x4700a
        g4 = g543;
        uint32_t v3 = *(int32_t *)(g543 + 48); // 0x4700f
        g9 = v3;
        if (g549 >= v3) {
            result = g543;
            // break -> 0x4701a
            break;
        }
        int32_t v4 = g547; // 0x47028
        g4 = v4;
        g10 = *(int32_t *)v4;
        g8 = *(int32_t *)(v4 + 4);
        function_49890(&g547, 0);
        int32_t v5 = (int32_t)g290; // 0x47046
        g4 = v5;
        int32_t v6 = function_4a110(v5, g10, g8); // 0x47056
        g4 = v6;
        int32_t v7; // 0x47062
        if (v6 != 0) {
            // 0x4705f
            v7 = function_467a0(v6);
            g4 = v7;
        } else {
            v7 = 0;
        }
        // 0x47000
        g10 = g548;
        if (g548 < 1) {
            result = v7;
            // break -> 0x4701a
            break;
        }
    }
    // 0x4701a
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x47070 - 0x47084
int32_t function_47070(int32_t a1) {
    int32_t result = a1 + (int32_t)&g50; // 0x4707c
    g4 = result;
    return result;
}

// Address range: 0x47088 - 0x4708e
int32_t function_47088(void) {
    // 0x47088
    return g4;
}

// Address range: 0x4708e - 0x4714a
int32_t function_4708e(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    uint32_t v1 = g4; // 0x4708e
    *(int32_t *)(g5 - 28) = v1;
    int32_t v2 = g5;
    int32_t * v3 = (int32_t *)(v2 + 8);
    if (v1 >= 1) {
        int32_t v4 = *v3; // 0x47095
        g4 = v4;
        int32_t v5 = g547; // 0x47098
        g9 = v5;
        int32_t v6 = *(int32_t *)(v4 + 4); // 0x4709e
        g10 = v6;
        int32_t v7 = *(int32_t *)(v4 + 8); // 0x470a1
        g8 = v7;
        int32_t v8 = v5 + 4; // 0x470a4
        int32_t v9 = *(int32_t *)v8; // 0x470a4
        g7 = v9;
        int32_t v10 = *(int32_t *)v5 ^ v6 | v9 ^ v7; // 0x470ad
        g7 = v10;
        g4 = 0;
        int32_t v11; // 0x47135
        if (v10 == 0) {
            v11 = 0;
          lab_0x47135:;
            int32_t result = function_49890(&g547, v11); // 0x47140
            g4 = result;
            return result;
        }
        int32_t v12 = 0; // 0x470cf
        while (true) {
            int32_t v13 = v12 + 1; // 0x470cf
            g4 = v13;
            if (v13 == *(int32_t *)(v2 - 28)) {
                // break -> 0x470d7
                break;
            }
            int32_t v14 = 8 * v13; // 0x470c0
            int32_t v15 = *(int32_t *)(v14 + v8); // 0x470c0
            g6 = v15;
            int32_t v16 = *(int32_t *)(v14 + v5) ^ v6; // 0x470c9
            g7 = v16;
            int32_t v17 = v16 | v15 ^ v7; // 0x470cb
            g6 = v17;
            if (v17 == 0) {
                if (v12 == -2) {
                    goto lab_0x470d7;
                } else {
                    v11 = v13;
                    goto lab_0x47135;
                }
            }
            v12 = v13;
        }
    }
    goto lab_0x470d7;
  lab_0x470d7:;
    int32_t v18 = *v3; // 0x470d7
    g9 = v18;
    int32_t v19 = *(int32_t *)(v18 + (int32_t)&g49); // 0x470da
    int32_t v20 = v19 - 2; // 0x470e0
    g4 = v20;
    int32_t v21; // 0x470f4
    if (v20 == 0 || v19 == 3) {
        // 0x470e8
        g549--;
        g4 = function_46ff0();
        v21 = g5;
    } else {
        v21 = v2;
    }
    int32_t v22 = *(int32_t *)(v21 + 8); // 0x470f4
    g4 = v22;
    *(int32_t *)(v22 + (int32_t)&g49) = 0;
    int32_t v23 = *(int32_t *)(g4 + (int32_t)&g41); // 0x47101
    g4 = v23;
    if (v23 != 0) {
        // 0x4710b
        g4 = function_28600(v23);
    }
    int32_t v24 = *(int32_t *)(g5 + 8); // 0x47113
    g4 = v24;
    *(int32_t *)(v24 + (int32_t)&g41) = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x47150 - 0x4717e
int32_t function_47150(int32_t a1) {
    int32_t v1 = g6; // bp-8
    g6 = a1;
    int32_t result = function_47070(a1); // 0x4715d
    g4 = result;
    if (a1 == 0) {
        // 0x47178
        g6 = v1;
        return result;
    }
    int32_t v2 = *(int32_t *)a1; // 0x47166
    g4 = v2;
    int32_t result2 = *(int32_t *)(v2 + 36); // 0x4716b
    g4 = result2;
    g6 = v1;
    return result2;
}

// Address range: 0x47180 - 0x47181
int32_t function_47180(int32_t a1, int32_t a2) {
    // 0x47180
    return g4;
}

// Address range: 0x471c3 - 0x471c8
int32_t function_471c3(void) {
    uint32_t v1 = g9; // 0x471c3
    g9 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x471cd - 0x471ce
int32_t function_471cd(void) {
    // 0x471cd
    return g4;
}

// Address range: 0x471ce - 0x471cf
int32_t function_471ce(int32_t a1) {
    // 0x471ce
    return g4;
}

// Address range: 0x471e3 - 0x471e6
int32_t function_471e3(void) {
    // 0x471e3
    return g4;
}

// Address range: 0x471ef - 0x471f2
int32_t function_471ef(void) {
    // 0x471ef
    return g4;
}

// Address range: 0x47285 - 0x47286
int32_t function_47285(void) {
    // 0x47285
    return g4;
}

// Address range: 0x4734a - 0x473b0
int32_t function_4734a(void) {
    int32_t v1 = g4; // 0x4734a
    int32_t v2 = v1 & ((int32_t)&g862 | -256); // 0x4734a
    g4 = v2;
    char * v3 = (char *)v2; // 0x4734c
    *v3 = *v3 + (char)(v1 & (int32_t)&g862);
    int32_t v4 = g4; // 0x4734e
    char * v5 = (char *)v4; // 0x4734e
    *v5 = *v5 + (char)v4;
    uint32_t v6 = g6; // 0x47350
    uint32_t v7 = g4; // 0x47350
    g6 = 256 * (v6 / 256 + v7 & 255) | v6 & -0xff01;
    char * v8 = (char *)(v7 + 0x1800000c); // 0x47352
    *v8 = (char)(v7 / 256);
    int32_t v9 = g4; // 0x47352
    g4 = v9 & -0xff01 | 256 * (int32_t)*v8;
    uint32_t v10 = g9; // 0x4735a
    g9 = 256 * (v10 / 256 + v9 & 255) | v10 & -0xff01;
    char * v11 = (char *)(g7 - 0x39000000 + g11); // 0x4735c
    *v11 = (char)(g6 / 256);
    g6 = g6 & -0xff01 | 256 * (int32_t)*v11;
    int32_t v12 = g4; // 0x47363
    int32_t v13 = v12 & (((int32_t)&g862 | -256) & (int32_t)&g862 | -256); // 0x47365
    g4 = v13;
    char * v14 = (char *)v13; // 0x47367
    char v15 = *v14; // 0x47367
    *v14 = v15 + (char)(v12 & ((int32_t)&g862 | -256) & (int32_t)&g862);
    int32_t v16 = g4; // 0x47369
    char * v17 = (char *)v16; // 0x47369
    *v17 = *v17 + (char)v16;
    int32_t v18 = g6; // 0x4736b
    uint32_t v19 = g4; // 0x4736b
    g6 = 256 * v19 + v18 & 0xff00 | v18 & -0xff01;
    uint32_t v20 = v19 / 256; // 0x4736d
    int32_t v21 = (256 * (v19 & (int32_t)&g862) | v19 & -0x10000 | v20 & (int32_t)&g862) & ((int32_t)&g862 | -256); // 0x4736f
    g4 = v21;
    char * v22 = (char *)v21; // 0x47371
    char v23 = *v22; // 0x47371
    *v22 = v23 + (char)(v20 & (int32_t)&g862 & (int32_t)&g862);
    int32_t v24 = g4; // 0x47373
    char * v25 = (char *)v24; // 0x47373
    *v25 = *v25 + (char)v24;
    int32_t v26 = g6; // 0x47375
    int32_t v27 = g4; // 0x47375
    g6 = 256 * v27 + v26 & 0xff00 | v26 & -0xff01;
    int32_t v28 = g7; // 0x47377
    g7 = v28 & -256 | v27 & (int32_t)&g862;
    int32_t v29 = (v28 & (int32_t)&g862 | v27 & -256) & ((int32_t)&g862 | -256); // 0x47379
    g4 = v29;
    char * v30 = (char *)v29; // 0x4737b
    char v31 = *v30; // 0x4737b
    *v30 = v31 + (char)(v28 & (int32_t)&g862 & (int32_t)&g862);
    int32_t v32 = g4; // 0x4737d
    char * v33 = (char *)v32; // 0x4737d
    *v33 = *v33 + (char)v32;
    int32_t v34 = g6; // 0x4737f
    uint32_t v35 = g4; // 0x4737f
    g6 = 256 * v35 + v34 & 0xff00 | v34 & -0xff01;
    int32_t v36 = g7; // 0x47381
    g7 = v36 & -256 | v35 / 256 & (int32_t)&g862;
    int32_t v37 = (256 * (v36 & (int32_t)&g862) | v35 & -0xff04) & ((int32_t)&g862 | -1024); // 0x47383
    g4 = v37;
    char * v38 = (char *)v37; // 0x47385
    *v38 = *v38 + (char)(v35 & (int32_t)&g862);
    int32_t v39 = g4; // 0x47387
    char * v40 = (char *)v39; // 0x47387
    *v40 = *v40 + (char)v39;
    uint32_t v41 = g6; // 0x47389
    int32_t v42 = g4; // 0x47389
    unsigned char v43 = (char)(v41 / 256) + (char)v42; // 0x47389
    g6 = 256 * (int32_t)v43 | v41 & -0xff01;
    char * v44 = (char *)(v42 + 0x6000000c); // 0x4738b
    *v44 = v43;
    g6 = g6 & -0xff01 | 256 * (int32_t)*v44;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    int32_t v45 = g4; // 0x47397
    g4 = *(int32_t *)v45 + v45;
    int32_t v46 = g6; // 0x47399
    int32_t v47 = g9; // 0x47399
    g6 = (v47 & 0xff00) + v46 & 0xff00 | v46 & -0xff01;
    *(int32_t *)v47 = 0xf000000;
    int32_t v48 = g4; // 0x473a1
    g4 = *(int32_t *)v48 + v48;
    int32_t v49 = g7; // 0x473a5
    char * v50 = (char *)(v49 - 0x3e3fce2f); // 0x473a5
    *v50 = *v50 + (char)v49;
    int32_t result = function_2c769b2(); // 0x473ab
    g4 = result;
    return result;
}

// Address range: 0x473cb - 0x473f1
int32_t function_473cb(void) {
    // 0x473cb
    g4 = -0x8fffff5;
    *(int32_t *)g7 = 0xf000000;
    *(int32_t *)g9 = 0xf000000;
    int32_t v1 = g7; // 0x473e2
    int32_t v2 = g4; // 0x473e4
    g4 = *(int32_t *)v2 + v2;
    char * v3 = (char *)(v1 - 0x3e3fce2f); // 0x473e6
    *v3 = *v3 + (char)v1;
    int32_t result = function_2c769f3(); // 0x473ec
    g4 = result;
    return result;
}

// Address range: 0x47483 - 0x47486
int32_t function_47483(void) {
    // 0x47483
    return g4;
}

// Address range: 0x47486 - 0x47491
int32_t function_47486(void) {
    char * v1 = (char *)(g7 + (int32_t)&g853); // 0x47486
    bool v2; // cf
    *v1 = (char)g4 + *v1 + (char)v2;
    char * v3 = (char *)(g7 - 119 + 2 * g4); // 0x4748c
    *v3 = (char)(g9 / 256) + *v3;
    return g4;
}

// Address range: 0x47492 - 0x47494
int32_t function_47492(void) {
    int32_t result = function_474a8(); // 0x47492
    g4 = result;
    return result;
}

// Address range: 0x4749b - 0x4749e
int32_t function_4749b(void) {
    int32_t result = g4 ^ 137; // 0x4749b
    g4 = result;
    return result;
}

// Address range: 0x4749f - 0x474a1
int32_t function_4749f(void) {
    // 0x4749f
    return g4;
}

// Address range: 0x474a2 - 0x474a6
int32_t function_474a2(void) {
    int32_t result = __asm_sti(); // 0x474a5
    g4 = result;
    return result;
}

// Address range: 0x474a8 - 0x4758d
int32_t function_474a8(void) {
    int32_t v1 = g4; // 0x474a8
    unsigned char v2 = (char)v1; // 0x474a8
    bool v3 = v2 > 153 | g2; // 0x474a8
    int32_t v4;
    if (g1 || (v2 & 14) > 9) {
        // bb
        v4 = ((v3 ? 102 : 6) + v1) % 256 | v1 & -256;
    } else {
        // bb19
        v4 = (v3 ? v1 + 96 : v1) % 256 | v1 & -256;
    }
    // bb20
    g4 = v4;
    int32_t v5 = g9; // 0x474a9
    int32_t v6; // 0x474b2
    if ((char)v5 == 16) {
        // bb22
        g4 = function_47788();
        v6 = g9;
    } else {
        v6 = v5;
    }
    int32_t v7; // 0x474bb
    if ((char)v6 == 112) {
        // bb24
        g4 = function_477c8();
        v7 = g9;
    } else {
        v7 = v6;
    }
    if ((char)v7 == 48) {
        // bb26
        g4 = function_47770();
    }
    // 0x474c6
    *(int32_t *)(g5 - 40) = g8;
    *(int32_t *)(g5 - 36) = g4;
    int32_t v8 = g5; // 0x474d0
    int32_t v9 = *(int32_t *)(v8 - 40); // 0x474d0
    g7 = v9;
    g6 = *(int32_t *)(v8 - 36);
    *(int32_t *)(g10 + 4) = v9;
    *(int32_t *)(g10 + 8) = g6;
    int32_t v10 = g9; // 0x474dc
    char v11 = v10; // 0x474dc
    if (v11 != 0) {
        uint32_t v12 = g4; // 0x474e0
        int32_t v13 = v12 / 0x100000 % 16; // 0x474e5
        g6 = v13;
        if ((char)v13 < 11) {
            int32_t v14 = v12 / 0x1000000 - 1; // 0x474f2
            g6 = v14;
            if ((char)v14 < 4) {
                int32_t v15; // 0x47503
                int32_t v16; // 0x474fd
                if (v11 == 16) {
                    // bb29
                    v16 = function_47728();
                    g4 = v16;
                    v15 = g9;
                } else {
                    v16 = v12;
                    v15 = v10;
                }
                int32_t v17; // 0x4750c
                int32_t v18; // 0x47506
                if ((char)v15 == 112) {
                    // bb31
                    v18 = function_47750();
                    g4 = v18;
                    v17 = g9;
                } else {
                    v18 = v16;
                    v17 = v15;
                }
                int32_t v19; // 0x47510
                if ((char)v17 == 48) {
                    // bb33
                    v19 = function_477b0();
                    g4 = v19;
                } else {
                    v19 = v18;
                }
                // 0x47516
                g9 = g292;
                int32_t v20 = *(int32_t *)(g292 + 4); // 0x4751c
                g7 = v20;
                if (v20 != 0) {
                    int32_t v21 = *(int32_t *)(g292 + 8); // 0x47523
                    g9 = v21;
                    if (v21 != 0) {
                        // 0x4752a
                        g6 = *(int32_t *)v21;
                        if (v19 != 0) {
                            int32_t v22 = *(int32_t *)(g5 - 44); // 0x4753e
                            g6 = v22;
                            g4 = function_2d970((int32_t *)v22, (int32_t)(v19 % 2 != 0), 32);
                        }
                    }
                }
            }
        }
    }
    int32_t v23 = g10; // 0x47555
    g6 = v23 + (int32_t)&g842;
    int32_t v24; // 0x47568
    if (*(char *)(v23 + (int32_t)&g843) % 2 != 0) {
        // bb35
        g4 = function_47678();
        v24 = g10;
    } else {
        v24 = v23;
    }
    // 0x47568
    *(int32_t *)(v24 + (int32_t)&g844) = v24;
    *(int32_t *)(g10 + (int32_t)&g845) = 0x45820;
    *(int32_t *)(g10 + (int32_t)&g846) = 0;
    return g4;
}

// Address range: 0x475a5 - 0x475a6
int32_t function_475a5(void) {
    // 0x475a5
    return g4;
}

// Address range: 0x475e2 - 0x475e3
int32_t function_475e2(void) {
    // 0x475e2
    return g4;
}

// Address range: 0x4760c - 0x47653
int32_t function_4760c(void) {
    // 0x4760c
    function_46bf0(g10);
    g4 = g545;
    int32_t v1 = *(int32_t *)(g545 + 48); // 0x47619
    g6 = v1;
    int32_t v2; // ebp
    if (v1 == 0) {
        // 0x47620
        g6 = *(int32_t *)(v2 - 12);
        g10 = *(int32_t *)(v2 - 8);
        g8 = *(int32_t *)(v2 - 4);
        return g545;
    }
    int32_t v3 = *(int32_t *)(v2 - 44); // 0x47630
    g6 = v3;
    int32_t result = function_2d970((int32_t *)v3, (int32_t)"WWWWWWWWWWWWWWW", 32); // 0x47646
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x47658 - 0x47674
int32_t function_47658(void) {
    // 0x47658
    *(int32_t *)(g10 + 4) = 1;
    g9 = 0;
    *(int32_t *)(g10 + 8) = 0;
    *(int32_t *)(g10 + 16) = 0;
    return g4;
}

// Address range: 0x47678 - 0x4767b
int32_t function_47678(void) {
    // 0x47678
    return g4;
}

// Address range: 0x47680 - 0x47685
int32_t function_47680(void) {
    // 0x47680
    return g4;
}

// Address range: 0x47690 - 0x47695
int32_t function_47690(void) {
    int32_t result = function_475e2(); // 0x47690
    g4 = result;
    return result;
}

// Address range: 0x476a0 - 0x476a5
int32_t function_476a0(void) {
    int32_t result = function_475a5(); // 0x476a0
    g4 = result;
    return result;
}

// Address range: 0x476a8 - 0x476b8
int32_t function_476a8(void) {
    // 0x476a8
    *(int16_t *)g8 = 0;
    g9 -= 2;
    g8 += 2;
    return g4;
}

// Address range: 0x476c0 - 0x476ce
int32_t function_476c0(void) {
    // 0x476c0
    *(char *)(g10 + 64) = 0;
    g8 = g10 + 65;
    g9 = g9 & -256 | 67;
    return g4;
}

// Address range: 0x476d0 - 0x476f8
int32_t function_476d0(void) {
    int32_t v1 = g10; // 0x476d0
    g9 = v1 + 21;
    *(char *)(v1 + 20) = 0;
    g7 = g7 & -256 | 31;
    int32_t v2 = g9; // 0x476d9
    int32_t v3; // 0x476e8
    if ((v2 & 2) == 0) {
        // bb
        g4 = function_471cd();
        v3 = g9;
    } else {
        v3 = v2;
    }
    // 0x476e2
    *(int16_t *)v3 = 0;
    g7 -= 2;
    g9 += 2;
    int32_t result = function_471cd(); // 0x476f3
    g4 = result;
    return result;
}

// Address range: 0x47700 - 0x47710
int32_t function_47700(void) {
    // 0x47700
    *(int16_t *)g8 = 0;
    g9 -= 2;
    g8 += 2;
    return g4;
}

// Address range: 0x47710 - 0x47724
int32_t function_47710(void) {
    // 0x47710
    *(char *)(g10 + 172) = 0;
    g8 = g10 + 173;
    g9 = g9 & -256 | 183;
    return g4;
}

// Address range: 0x47728 - 0x47746
int32_t function_47728(void) {
    uint32_t result = g4; // 0x47730
    g9 = result % 0x100000;
    return result;
}

// Address range: 0x47750 - 0x4776b
int32_t function_47750(void) {
    // 0x47750
    return g4;
}

// Address range: 0x47770 - 0x47785
int32_t function_47770(void) {
    // 0x47770
    return g4;
}

// Address range: 0x47788 - 0x477a6
int32_t function_47788(void) {
    uint32_t result = g4; // 0x47790
    g6 = result % 0x100000;
    return result;
}

// Address range: 0x477b0 - 0x477c5
int32_t function_477b0(void) {
    // 0x477b0
    return g4;
}

// Address range: 0x477c8 - 0x477e0
int32_t function_477c8(void) {
    // 0x477c8
    return g4;
}

// Address range: 0x477e1 - 0x477e2
int32_t function_477e1(void) {
    // 0x477e1
    return g4;
}

// Address range: 0x477e2 - 0x477e3
int32_t function_477e2(void) {
    // 0x477e2
    return g4;
}

// Address range: 0x47801 - 0x47815
int32_t function_47801(void) {
    int32_t v1 = g7; // 0x47801
    char * v2 = (char *)(v1 + 0x4be8241c); // 0x47803
    *v2 = *v2 + (char)v1;
    uint32_t v3 = g6; // 0x47809
    g4 ^= v3;
    uint32_t v4 = g9; // 0x4780b
    g9 = 512 * v4 / 256 & 0xfe00 | v4 & -0xff01;
    char * v5 = (char *)(g11 - 0x76ff0000 + g7); // 0x4780d
    *v5 = (char)(v3 / 256);
    g6 = g6 & -0xff01 | 256 * (int32_t)*v5;
    return g4;
}

// Address range: 0x47870 - 0x478dc
int32_t function_47870(void) {
    // 0x47870
    g8++;
    char * v1 = (char *)(g4 + 12); // 0x47872
    *v1 = (char)(g9 / 256);
    g9 = g9 & -0xff01 | 256 * (int32_t)*v1;
    char v2 = *(char *)&g4; // 0x47875
    int32_t v3 = g4; // 0x47875
    char v4 = v3; // 0x47875
    char v5 = v4 + v2; // 0x47875
    *(char *)v3 = v5;
    if (((v5 ^ v2) & (v5 ^ v4)) < 0) {
        int32_t v6 = *(int32_t *)(g5 + 8); // 0x478b7
        g6 = v6;
        *(int32_t *)v6 = (int32_t)&g178;
        *(int32_t *)(g6 + (int32_t)&g849) = (int32_t)&g186;
        if (*(char *)(v6 + (int32_t)&g850) % 2 == 0) {
            // bb
            g4 = function_478e1();
        }
        int32_t result = g6 + (int32_t)&g849; // 0x478d3
        g4 = result;
        return result;
    }
    int32_t v7 = g4; // 0x47879
    *(char *)v7 = (char)v7 | *(char *)&g4;
    int32_t v8 = g10 + (int32_t)&g837; // 0x4787b
    g4 = v8;
    function_498e0(v8);
    int32_t v9 = g10 + (int32_t)&g836; // 0x47889
    g4 = v9;
    g4 = function_1fc30(v9);
    int32_t result2 = function_477e2(); // 0x47897
    g4 = result2;
    return result2;
}

// Address range: 0x478e1 - 0x47956
int32_t function_478e1(void) {
    int32_t v1 = g6; // 0x478e1
    *(int32_t *)(v1 + (int32_t)&g847) = (int32_t)&g185;
    if (*(char *)(v1 + (int32_t)&g848) % 2 != 0) {
        // bb
        g4 = function_47a00();
    }
    int32_t v2 = g6; // 0x478f8
    *(int32_t *)(v2 + (int32_t)&g842) = (int32_t)&g184;
    if (*(char *)(v2 + (int32_t)&g843) % 2 != 0) {
        // bb5
        g4 = function_47a30();
    }
    int32_t v3 = g6; // 0x4790f
    *(int32_t *)(v3 + (int32_t)&g837) = (int32_t)&g180;
    if (*(char *)(v3 + (int32_t)&g838) % 2 != 0) {
        // bb6
        g4 = function_47a18();
    }
    int32_t v4 = g6; // 0x47926
    int32_t v5 = *(int32_t *)(v4 + (int32_t)&g836); // 0x47926
    g4 = v5;
    int32_t v6; // 0x47938
    if (v5 != 0) {
        // 0x47930
        g4 = function_28600(v5);
        v6 = g6;
    } else {
        v6 = v4;
    }
    // 0x47938
    *(int32_t *)(v6 + 164) = 0;
    int32_t v7 = g6; // 0x47942
    g4 = *(int32_t *)(v7 + 160);
    int32_t result = *(int32_t *)(v7 + 152); // 0x4794a
    g4 = result;
    return result;
}

// Address range: 0x479cc - 0x479d8
int32_t function_479cc(void) {
    // 0x479cc
    *(int32_t *)(g6 + 136) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x479d8 - 0x479f8
int32_t function_479d8(int32_t a1, int32_t a2) {
    // 0x479d8
    *(int32_t *)(g6 + 148) = g4;
    int32_t v1 = g6 + 132; // 0x479de
    g4 = v1;
    g4 = function_2bf50(v1);
    *(int32_t *)g6 = (int32_t)&g183;
    g6 = a1;
    return g4;
}

// Address range: 0x47a00 - 0x47a09
int32_t function_47a00(void) {
    int32_t result = g6 + (int32_t)&g847; // 0x47a00
    g4 = result;
    return result;
}

// Address range: 0x47a0e - 0x47a13
int32_t function_47a0e(void) {
    // 0x47a0e
    return g4;
}

// Address range: 0x47a18 - 0x47a21
int32_t function_47a18(void) {
    int32_t result = g6 + (int32_t)&g837; // 0x47a18
    g4 = result;
    return result;
}

// Address range: 0x47a26 - 0x47a2b
int32_t function_47a26(void) {
    // 0x47a26
    return g4;
}

// Address range: 0x47a30 - 0x47a39
int32_t function_47a30(void) {
    int32_t result = g6 + (int32_t)&g842; // 0x47a30
    g4 = result;
    return result;
}

// Address range: 0x47a3e - 0x47a43
int32_t function_47a3e(void) {
    // 0x47a3e
    return g4;
}

// Address range: 0x47a43 - 0x47a44
int32_t function_47a43(void) {
    // 0x47a43
    return g4;
}

// Address range: 0x47a66 - 0x47ad4
int32_t function_47a66(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x7c380bbb); // 0x47a66
    int32_t v2 = *v1; // 0x47a66
    *v1 = v2 - 1;
    int32_t v3;
    int32_t v4; // 0x47a8e
    if ((v2 & -v2) < 0) {
        goto lab_0x47a7a;
    } else {
        char v5 = *(char *)&g4; // 0x47a6e
        int32_t v6 = g4; // 0x47a6e
        char v7 = v6; // 0x47a6e
        char v8 = v7 + v5; // 0x47a6e
        *(char *)v6 = v8;
        if (((v8 ^ v5) & (v8 ^ v7)) < 0) {
            char * v9 = (char *)(g6 - 0x6c720bbb); // 0x47aac
            *v9 = (char)g7 + *v9;
            int32_t v10 = g4; // 0x47ab2
            *(char *)v10 = 2 * (char)v10;
            *(int32_t *)(g5 - 12) = g4;
            g4 = function_49960(g9);
            g4 = *(int32_t *)(g5 - 12);
            *(int32_t *)g6 = (int32_t)&g183;
            int32_t v11 = function_7ab57(g4, (int32_t)&g870); // 0x47acd
            v4 = g5;
            v3 = v11;
            goto lab_0x47a88;
        } else {
            int32_t v12 = g4; // 0x47a72
            *(char *)v12 = (char)v12 | *(char *)&g4;
            g9 = g6 + (int32_t)&g837;
            goto lab_0x47a7a;
        }
    }
  lab_0x47a7a:
    // 0x47a7a
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_498e0(g9);
    int32_t v13 = g5; // 0x47a85
    v4 = v13;
    v3 = *(int32_t *)(v13 - 12);
    goto lab_0x47a88;
  lab_0x47a88:
    // 0x47a88
    g4 = v3;
    g9 = g6 + (int32_t)&g836;
    *(int32_t *)(v4 - 12) = v3;
    g4 = function_1fc30(g9);
    int32_t * v14 = (int32_t *)(g5 - 12); // 0x47a99
    int32_t v15 = *v14; // 0x47a99
    g4 = v15;
    g9 = g6 + 152;
    *v14 = v15;
    return g4;
}

// Address range: 0x47ad4 - 0x47ad6
int32_t function_47ad4(void) {
    // 0x47ad4
    return g4;
}

// Address range: 0x47ad6 - 0x47aec
int32_t function_47ad6(void) {
    // 0x47ad6
    g9 = g6 + 152;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_2bf50(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x47ae7
    g4 = result;
    return result;
}

// Address range: 0x47aec - 0x47aee
int32_t function_47aec(void) {
    // 0x47aec
    return g4;
}

// Address range: 0x47b16 - 0x47b1e
int32_t function_47b16(void) {
    // 0x47b16
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 12);
    int32_t result = function_47a43(); // 0x47b19
    g4 = result;
    return result;
}

// Address range: 0x47b1e - 0x47b20
int32_t function_47b1e(void) {
    // 0x47b1e
    return g4;
}

// Address range: 0x47b20 - 0x47b36
int32_t function_47b20(void) {
    // 0x47b20
    g9 = g6 + 132;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_2bf50(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x47b31
    g4 = result;
    return result;
}

// Address range: 0x47b36 - 0x47b3b
int32_t function_47b36(void) {
    // 0x47b36
    return g4;
}

// Address range: 0x47b40 - 0x47b5f
int32_t function_47b40(int32_t a1) {
    int32_t result = function_1bc40(); // 0x47b5a
    g4 = result;
    return result;
}

// Address range: 0x47b60 - 0x47c1f
int32_t function_47b60(int32_t result) {
    int32_t v1 = g5; // 0x47b60
    g4 = result;
    int32_t v2 = g6; // 0x47b69
    int32_t v3 = g10; // 0x47b6c
    int32_t v4 = g8; // 0x47b6f
    int32_t v5 = *(int32_t *)(result + 8); // 0x47b72
    g8 = v5;
    int32_t v6 = result + 4; // 0x47b78
    int32_t v7 = *(int32_t *)v6; // 0x47b78
    g10 = v7;
    int32_t v8 = v7 | v5; // 0x47b7d
    g4 = v8;
    if (v8 == 0) {
        // 0x47c08
        g10 = v3;
        g8 = v4;
        g5 = v1;
        return 0;
    }
    // 0x47b85
    g4 = result;
    int32_t * v9 = (int32_t *)(result + (int32_t)&g49); // 0x47b88
    int32_t v10 = *v9; // 0x47b88
    g9 = v10;
    if (v10 != 0) {
        // 0x47c08
        g10 = v3;
        g8 = v4;
        g5 = v1;
        return result;
    }
    // 0x47b92
    *v9 = 1;
    g4 = g548;
    if (g548 < 1) {
        goto lab_0x47bd7;
    } else {
        int32_t v11 = g547; // 0x47ba8
        g9 = v11;
        int32_t v12 = v11 + 4; // 0x47bae
        int32_t v13 = *(int32_t *)v12; // 0x47bae
        g7 = v13;
        int32_t v14 = g8; // 0x47bb3
        int32_t v15 = g10; // 0x47bb5
        int32_t v16 = v15 ^ *(int32_t *)v11; // 0x47bb5
        g4 = v16;
        int32_t v17 = v16 | v14 ^ v13; // 0x47bb7
        g7 = v17;
        if (v17 == 0) {
            goto lab_0x47bf4;
        } else {
            // 0x47bbb
            g4 = 0;
            int32_t v18 = 0; // 0x47bcf
            while (true) {
                int32_t v19 = v18 + 1; // 0x47bcf
                g4 = v19;
                if (v19 == g548) {
                    // break -> 0x47bd7
                    break;
                }
                int32_t v20 = 8 * v19; // 0x47bc0
                int32_t v21 = *(int32_t *)(v20 + v12); // 0x47bc0
                g6 = v21;
                int32_t v22 = *(int32_t *)(v20 + v11) ^ v15; // 0x47bc9
                g7 = v22;
                int32_t v23 = v22 | v21 ^ v14; // 0x47bcb
                g6 = v23;
                if (v23 == 0) {
                    if (v18 != -2) {
                        goto lab_0x47bf4;
                    } else {
                        goto lab_0x47bd7;
                    }
                }
                v18 = v19;
            }
            goto lab_0x47bd7;
        }
    }
  lab_0x47bd7:
    // 0x47bd7
    g4 = g548;
    g4 = function_49a90(&g547, g548, v6);
    goto lab_0x47bf4;
  lab_0x47bf4:
    // 0x47bf4
    g6 = v2;
    g10 = v3;
    g8 = v4;
    int32_t result2 = function_46ff0(); // 0x47c00
    g4 = result2;
    return result2;
}

// Address range: 0x47c20 - 0x47e40
int32_t function_47c20(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x47c23
    int32_t v2 = g10; // 0x47c24
    int32_t v3 = g6; // 0x47c25
    g6 = a2;
    g10 = a1;
    if (a2 == 0) {
        // 0x47dde
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v4 = *(int32_t *)a2; // 0x47c37
    g4 = v4;
    if (v4 != 0) {
        int32_t v5 = a1 + 20; // 0x47c41
        g4 = v5;
        g4 = function_2d970((int32_t *)v5, v4, 32);
    }
    int32_t v6 = *(int32_t *)(a2 + 4); // 0x47c54
    g4 = v6;
    if (v6 != 0) {
        int32_t v7 = g10 + 60; // 0x47c5f
        g4 = v7;
        g4 = function_2d9b0(v7, v6, 64);
    }
    // 0x47c72
    g4 = g545;
    int32_t v8 = *(int32_t *)(g545 + 48); // 0x47c77
    g4 = v8;
    if (v8 != 0) {
        int32_t v9 = g10 + 20; // 0x47e20
        g4 = v9;
        g4 = function_2d970((int32_t *)v9, (int32_t)"WWWWWWWWWWWWWWW", 32);
    }
    int32_t * v10 = (int32_t *)(a2 + 24); // 0x47c82
    int32_t v11 = *v10; // 0x47c82
    g8 = v11;
    if (v11 != 0) {
        // 0x47c8d
        g4 = function_47070(g10);
        int32_t v12 = *(int32_t *)(g10 + (int32_t)&g41); // 0x47c95
        g4 = v12;
        if (v12 != 0) {
            // 0x47c9f
            g4 = function_28600(v12);
        }
        int32_t v13 = *v10; // 0x47ca7
        g4 = v13;
        int32_t v14 = function_26d60(v13); // 0x47cad
        g4 = v14;
        *(int32_t *)(g10 + (int32_t)&g41) = v14;
        int32_t v15 = function_27ea0(g4, "options/sessionid", 0, 0); // 0x47cd3
        g4 = v15;
        *(int32_t *)(g10 + (int32_t)L"Fb") = v15;
        *(int32_t *)(g10 + (int32_t)&g33) = g9;
        int32_t v16 = function_26cf0(); // 0x47ceb
        g4 = v16;
        g6 = v16;
        g4 = function_27a20(v16, "OnMatchPlayerMgrUpdate", "update", "friend");
        int32_t v17 = *(int32_t *)g10; // 0x47d12
        g4 = v17;
        function_27600(g6, "xuid", v17, g9);
        g4 = (int32_t)g450;
        g9 = *(int32_t *)g450;
        int32_t v18 = *(int32_t *)g450; // 0x47d3e
        g9 = v18;
        int32_t result = *(int32_t *)(v18 + 8); // 0x47d46
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t * v19 = (int32_t *)(a2 + 20); // 0x47d58
    int32_t v20 = *v19; // 0x47d58
    g8 = v20;
    int32_t * v21 = (int32_t *)(a2 + 16); // 0x47d5b
    int32_t v22 = *v21; // 0x47d5b
    g7 = v22;
    int32_t v23 = v22 | v20; // 0x47d60
    g4 = v23;
    if (v23 != 0) {
        int32_t v24 = (int32_t)g450; // 0x47d68
        g4 = v24;
        g9 = *(int32_t *)g450;
        g7 = v22;
        int32_t v25 = v24 ^ v22; // 0x47d84
        g4 = v25;
        int32_t v26 = *(int32_t *)g450 ^ v20 | v25; // 0x47d86
        g9 = v26;
        if (v26 != 0) {
            int32_t v27 = *(int32_t *)(g10 + (int32_t)&g41); // 0x47d8a
            g4 = v27;
            if (v27 != 0) {
                // 0x47d94
                g4 = function_28600(v27);
            }
            int32_t v28 = function_26cf0(); // 0x47da3
            g4 = v28;
            g8 = v28;
            g4 = function_26330(v28);
            *(int32_t *)(g10 + (int32_t)&g41) = g8;
            int32_t v29 = *v21; // 0x47dc0
            g4 = v29;
            int32_t v30 = *v19; // 0x47dc3
            g9 = v30;
            g4 = function_27600(g8, "titleid", v29, v30);
            // 0x47dde
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
    }
    int32_t v31 = g10; // 0x47df0
    int32_t v32 = *(int32_t *)(v31 + (int32_t)&g49); // 0x47df0
    g7 = v32;
    int32_t v33 = *(int32_t *)(a2 + 8); // 0x47df6
    g4 = v33;
    g9 = *(int32_t *)(a2 + 12);
    *(int32_t *)(v31 + (int32_t)L"Fb") = v33;
    *(int32_t *)(g10 + (int32_t)&g33) = g9;
    if (v32 != 0) {
        // 0x47dde
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v34 = g10; // 0x47e0c
    g6 = v3;
    g10 = v2;
    g8 = v1;
    int32_t result2 = function_47b60(v34); // 0x47e16
    g4 = result2;
    return result2;
}

// Address range: 0x47e41 - 0x47e42
int32_t function_47e41(void) {
    // 0x47e41
    return g4;
}

// Address range: 0x47e70 - 0x48098
int32_t function_47e70(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x47e70
    g7 = 32;
    int32_t v1 = g6; // 0x47e7e
    g6 = a1;
    int32_t v2 = g10; // 0x47e84
    g4 = a2;
    int32_t v3 = g8; // 0x47e8a
    g9 = a1 + 20;
    *(int32_t *)a1 = (int32_t)&g179;
    int32_t v4 = g4; // 0x47e9c
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = (int32_t)&g861;
    *(int32_t *)(g6 + 16) = 0;
    int32_t v5; // 0x48029
    int32_t v6; // 0x48027
    if (g9 % 2 != 0) {
        int32_t v7 = g6; // 0x48020
        g9 = v7 + 21;
        *(char *)(v7 + 20) = 0;
        v6 = g7 & -256 | 31;
        g7 = v6;
        v5 = g9;
        if ((v5 & 2) == 0) {
            goto lab_0x47eca;
        } else {
            goto lab_0x48038;
        }
    } else {
        int32_t v8 = g9; // 0x47ec1
        if ((v8 & 2) != 0) {
            v5 = v8;
            goto lab_0x48038;
        } else {
            // 0x47ec1
            v5 = v8;
            v6 = g7;
            goto lab_0x47eca;
        }
    }
  lab_0x47eca:
    // 0x47eca
    g4 = 0;
    g10 = v6 & -4;
    *(int32_t *)v5 = 0;
    int32_t v9 = g4 + 4; // 0x47ed8
    g4 = v9;
    int32_t v10 = g9;
    while (v9 < g10) {
        // 0x47ed1
        *(int32_t *)(v10 + v9) = 0;
        v9 = g4 + 4;
        g4 = v9;
        v10 = g9;
    }
    int32_t v11 = v10 + v9; // 0x47edf
    g9 = v11;
    int32_t v12 = g7; // 0x47ee1
    int32_t v13; // 0x47eee
    int32_t v14; // 0x47eeb
    if ((v12 & 2) != 0) {
        // 0x47ee6
        *(int16_t *)v11 = 0;
        v14 = g9 + 2;
        g9 = v14;
        v13 = g7;
    } else {
        v14 = v11;
        v13 = v12;
    }
    int32_t v15 = v13 % 2; // 0x47eee
    g7 = v15;
    if (v15 != 0) {
        // 0x47ef3
        *(char *)v14 = 0;
    }
    int32_t v16 = g6; // 0x47ef6
    g8 = v16 + 60;
    *(int32_t *)v16 = (int32_t)&g177;
    g9 = (int32_t)"GNU";
    *(int32_t *)(g6 + 52) = 0;
    *(char *)(g6 + 56) = 0;
    *(int32_t *)(g6 + (int32_t)&g41) = 0;
    *(int32_t *)(g6 + (int32_t)&g49) = 0;
    *(char *)(g6 + (int32_t)&g51) = 0;
    *(int32_t *)(g6 + (int32_t)&g55) = 0;
    *(int32_t *)(g6 + (int32_t)&g56) = 0;
    *(int32_t *)(g6 + (int32_t)&g57) = 0;
    *(int32_t *)(g6 + (int32_t)&g58) = 0;
    *(int32_t *)(g6 + (int32_t)&g50) = (int32_t)&g182;
    int32_t v17; // 0x48054
    if (g8 % 2 != 0) {
        // 0x48050
        *(char *)(g6 + 60) = 0;
        v17 = g6 + 61;
        g8 = v17;
        g9 = g9 & -0x10000 | (int32_t)&g862;
    } else {
        // 0x47ef6
        v17 = g8;
    }
    // 0x47f68
    int32_t v18; // 0x4808d
    int32_t v19; // 0x48090
    if ((v17 & 2) != 0) {
        // 0x48088
        *(int16_t *)v17 = 0;
        v18 = g9 - 2;
        g9 = v18;
        v19 = g8 + 2;
        g8 = v19;
    } else {
        // 0x47f68
        v19 = v17;
        v18 = g9;
    }
    // 0x47f74
    g4 = 0;
    int32_t v20 = v18 / 4; // 0x47f78
    g7 = v20;
    __asm_rep_stosd_memset((char *)v19, 0, v20);
    int32_t v21 = (g3 ? -4 : 4) * v20 + v19; // 0x47f7e
    g8 = v21;
    g7 = 0;
    int32_t v22; // 0x47f87
    if ((v18 & 2) != 0) {
        // 0x47f82
        *(int16_t *)v21 = 0;
        v22 = g8 + 2;
        g8 = v22;
    } else {
        v22 = v21;
    }
    int32_t v23 = g9 % 2; // 0x47f8a
    g9 = v23;
    if (v23 != 0) {
        // 0x47f8f
        *(char *)v22 = 0;
    }
    int32_t v24 = g6; // 0x47f92
    g8 = v24 + (int32_t)&g34;
    g9 = 60;
    *(int32_t *)(v24 + (int32_t)L"Fb") = 0;
    *(int32_t *)(g6 + (int32_t)&g33) = 0;
    uint32_t v25 = g8; // 0x47fb1
    int32_t v26; // 0x48077
    if (v25 % 2 != 0) {
        // 0x48070
        *(char *)(g6 + (int32_t)&g34) = 0;
        v26 = g6 + (int32_t)&g35;
        g8 = v26;
        g9 = g9 & -256 | 59;
    } else {
        v26 = v25;
    }
    // 0x47fbd
    int32_t v27; // 0x48065
    int32_t v28; // 0x48068
    if ((v26 & 2) != 0) {
        // 0x48060
        *(int16_t *)v26 = 0;
        v27 = g9 - 2;
        g9 = v27;
        v28 = g8 + 2;
        g8 = v28;
    } else {
        // 0x47fbd
        v28 = v26;
        v27 = g9;
    }
    // 0x47fc9
    g4 = 0;
    int32_t v29 = v27 / 4; // 0x47fcd
    g7 = v29;
    __asm_rep_stosd_memset((char *)v28, 0, v29);
    int32_t v30 = (g3 ? -4 : 4) * v29 + v28; // 0x47fd3
    g8 = v30;
    g7 = 0;
    int32_t v31; // 0x47fdc
    if ((v27 & 2) != 0) {
        // 0x47fd7
        *(int16_t *)v30 = 0;
        v31 = g8 + 2;
        g8 = v31;
    } else {
        v31 = v30;
    }
    int32_t v32 = g9 % 2; // 0x47fdf
    g9 = v32;
    if (v32 != 0) {
        // 0x47fe4
        *(char *)v31 = 0;
    }
    // 0x47fe7
    g4 = v4;
    *(int32_t *)(g6 + 16) = 2;
    g9 = a3;
    *(int32_t *)(g6 + 4) = g4;
    g4 = a4;
    *(int32_t *)(g6 + 8) = g9;
    int32_t result = function_47c20(g6, g4); // 0x48004
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
  lab_0x48038:
    // 0x48038
    *(int16_t *)v5 = 0;
    int32_t v33 = g7 - 2; // 0x4803d
    g7 = v33;
    int32_t v34 = g9 + 2; // 0x48040
    g9 = v34;
    v5 = v34;
    v6 = v33;
    goto lab_0x47eca;
}

// Address range: 0x48098 - 0x481aa
int32_t function_48098(int32_t a1) {
    // 0x48098
    *(int32_t *)(g6 + (int32_t)&g50) = (int32_t)&g181;
    g10 = g4;
    int32_t v1 = g6 + (int32_t)&g50; // 0x480a4
    g4 = v1;
    g4 = function_498e0(v1);
    *(int32_t *)g6 = (int32_t)&g179;
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v2 = g6; // 0x480c6
    g6 = a1;
    int32_t v3 = g10; // 0x480cc
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x480cf
    g4 = v4;
    int32_t result = *(int32_t *)(a1 + 4) | v4; // 0x480d2
    g4 = result;
    if (result == 0) {
        // 0x480e0
        g6 = v2;
        return result;
    }
    int32_t * v5 = (int32_t *)(a1 + (int32_t)&g49); // 0x480d7
    if (*v5 != 3) {
        // 0x480e0
        g6 = v2;
        return result;
    }
    // 0x480f0
    *v5 = 0;
    g549--;
    function_46ff0();
    int32_t v6 = g6; // 0x4810e
    int32_t v7 = v6 + (int32_t)&g34; // 0x48118
    g4 = v7;
    int32_t v8 = function_2cb30((int32_t *)v7, (char *)(v6 + (int32_t)L"Fb"), 8); // 0x48121
    g4 = v8;
    if (v8 != 0) {
        // 0x481a0
        g4 = function_47b60(g6);
    }
    int32_t v9 = function_26cf0(); // 0x48131
    g4 = v9;
    g10 = v9;
    g4 = function_27a20(v9, "OnMatchPlayerMgrUpdate", "update", "friend");
    int32_t v10 = *(int32_t *)g6; // 0x48158
    g4 = v10;
    function_27600(g10, "xuid", v10, g9);
    int32_t result2 = (int32_t)g450; // 0x48177
    g4 = result2;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g6 = v2;
    g10 = v3;
    return result2;
}

// Address range: 0x481aa - 0x4851a
int32_t function_481aa(int32_t a1) {
    // 0x481aa
    g6 = g4;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g8; // 0x481c3
    int32_t v2 = g10; // 0x481c4
    int32_t v3 = g6; // 0x481c5
    int32_t v4 = (int32_t)g450; // 0x481cc
    g4 = v4;
    g8 = a1;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g4 = v4;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    int32_t v5; // 0x48208
    if (g450 == NULL) {
        // bb
        v5 = function_485d5();
        g4 = v5;
    } else {
        v5 = v4;
    }
    // 0x4820e
    g10 = v5;
    int32_t v6 = *(int32_t *)v5; // 0x4821a
    g4 = v6;
    if (v6 == 0) {
        goto lab_0x483af_3;
    } else {
        int32_t v7 = v5; // 0x483a0
        while (true) {
            // 0x48228
            if (*(int32_t *)(v7 + 8) > 1) {
                int32_t v8 = g8; // 0x48232
                int32_t v9 = *(int32_t *)(v8 + 144); // 0x48232
                g9 = v9;
                if (v9 < 1) {
                    // break -> 0x48262
                    break;
                }
                int32_t v10 = *(int32_t *)(v8 + 132); // 0x4823c
                g7 = v10;
                g4 = 0;
                int32_t v11 = *(int32_t *)(v7 + 4); // 0x48244
                g6 = v11;
                if (*(int32_t *)v10 != v11) {
                    int32_t v12 = 0; // 0x48259
                    while (true) {
                        int32_t v13 = v12 + 1; // 0x48259
                        g4 = v13;
                        if (v13 == v9) {
                            goto lab_0x48262_2;
                        }
                        // 0x48250
                        if (*(int32_t *)(4 * v13 + v10) == v11) {
                            // break -> 0x484e8
                            break;
                        }
                        v12 = v13;
                    }
                    if (v12 == -2) {
                        // break -> 0x48262
                        break;
                    }
                }
            }
            int32_t v14 = v7 + 12; // 0x483a0
            g10 = v14;
            if (v14 == 0) {
                goto lab_0x483af_3;
            }
            int32_t v15 = *(int32_t *)v14; // 0x483a5
            g4 = v15;
            if (v15 == 0) {
                goto lab_0x483af_3;
            }
            v7 = v14;
        }
        goto lab_0x48262_2;
    }
  lab_0x483af_3:
    // 0x483af
    g4 = (int32_t)g450;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if (g450 != NULL) {
        int32_t v16 = g8 + 152; // 0x483c8
        g9 = v16;
        int32_t v17 = *(int32_t *)g450; // 0x483da
        g4 = v17;
        if (v17 != 0) {
            char * v18 = g450;
            while (true) {
                int32_t v19 = (int32_t)v18; // 0x483e0
                g9 = v19;
                int32_t v20 = *(int32_t *)(v19 + 8); // 0x483e6
                g10 = v20;
                if (v20 != 0) {
                    // 0x483ed
                    g4 = v4;
                    if (g450 != NULL) {
                        // 0x483f7
                        g9 = v4;
                        int32_t v21 = *(int32_t *)g450; // 0x483fd
                        g4 = v21;
                        g6 = v4;
                        if (v21 != 0) {
                            int32_t v22; // 0x48470
                            while (true) {
                                int32_t v23 = function_2cc30(v21, (char *)v20); // 0x4841d
                                g4 = v23;
                                v22 = g6;
                                if (v23 == 0) {
                                    // break -> 0x48470
                                    break;
                                }
                                int32_t v24 = v22 + 16; // 0x48426
                                g6 = v24;
                                if (v24 == 0) {
                                    goto lab_0x4842b_2;
                                }
                                int32_t v25 = *(int32_t *)v24; // 0x48410
                                g4 = v25;
                                if (v25 == 0) {
                                    goto lab_0x4842b_2;
                                }
                                v21 = v25;
                            }
                            // 0x48470
                            g9 = *(int32_t *)(v22 + 4);
                            int32_t v26 = *(int32_t *)g8; // 0x48473
                            g4 = v26;
                            int32_t v27 = *(int32_t *)(v22 + 12); // 0x4847f
                            g6 = v27;
                            int32_t v28 = (v27 >= 0 ? v27 : v27 + 7) / 8; // 0x4848a
                            g9 = v28;
                            int32_t v29 = (int32_t)*(char *)(v28 + v26); // 0x4848d
                            g7 = v29;
                            int32_t v30 = v27 % 8; // 0x4849f
                            g4 = v30;
                            if ((v29 & 1 << v30 % 32) != 0) {
                                // 0x484a6
                                g4 = v16;
                                int32_t v31 = (int32_t)v18 + 4; // 0x484b2
                                g6 = v31;
                                g4 = function_49900(v16, v31);
                                g9 = v16;
                                int32_t v32 = *(int32_t *)(g8 + 164); // 0x484cb
                                g4 = v32;
                                g4 = function_49b30(v16, v32, g6);
                            }
                        }
                    }
                }
              lab_0x4842b_2:;
                int32_t v33 = (int32_t)v18 + 12; // 0x4842b
                if (v33 == 0) {
                    // break -> 0x48440
                    break;
                }
                // 0x48434
                g4 = v33;
                int32_t v34 = *(int32_t *)v33; // 0x4843a
                g4 = v34;
                if (v34 == 0) {
                    // break -> 0x48440
                    break;
                }
                v18 = (char *)v33;
            }
        }
    }
    // 0x48440
    g9 = 0;
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
  lab_0x48262_2:;
    // 0x48262
    int32_t v35; // bp-300
    int32_t v36 = &v35; // 0x48270
    g4 = v36;
    function_1e010(v36, "%s[1]");
    g4 = v4;
    if (g450 != NULL) {
        // 0x48288
        g9 = v4;
        int32_t v37 = *(int32_t *)g450; // 0x4828e
        g4 = v37;
        g6 = v4;
        if (v37 != 0) {
            while (true) {
                // 0x482a6
                int32_t v38; // bp-295
                g9 = &v38;
                int32_t v39 = function_2cc30(v37, (char *)&v38); // 0x482b3
                g4 = v39;
                if (v39 == 0) {
                    // bb318
                    g4 = function_48524();
                }
                int32_t v40 = g6 + 16; // 0x482c0
                g6 = v40;
                if (v40 == 0) {
                    // break -> 0x482c5
                    break;
                }
                int32_t v41 = *(int32_t *)v40; // 0x482a0
                g4 = v41;
                if (v41 == 0) {
                    // break -> 0x482c5
                    break;
                }
                v37 = v41;
            }
        }
    }
    int32_t v42 = *(int32_t *)(g10 + 8); // 0x482cf
    g4 = v42;
    if (v42 < 1) {
        // bb321
        g4 = function_48535();
    }
    // 0x482da
    g4 = 0;
    function_48594();
    g4 = 0;
    abort();
    // UNREACHABLE
}

// Address range: 0x4851f - 0x48524
int32_t function_4851f(void) {
    // 0x4851f
    return g4;
}

// Address range: 0x48524 - 0x48535
int32_t function_48524(void) {
    int32_t result = *(int32_t *)(g10 + 8); // 0x48524
    g4 = result;
    *(int32_t *)(g5 - 304) = g6;
    return result;
}

// Address range: 0x48535 - 0x4854b
int32_t function_48535(void) {
    // 0x48535
    *(int32_t *)(g5 - 300) = 0;
    return g4;
}

// Address range: 0x4854b - 0x4856e
int32_t function_4854b(void) {
    int32_t v1 = *(int32_t *)(g5 - 312); // 0x4854b
    g4 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_485a8();
    }
    int32_t result = g8; // 0x48555
    g4 = result;
    g6 = g10;
    return result;
}

// Address range: 0x48572 - 0x48594
int32_t function_48572(void) {
    // 0x48572
    g8++;
    int32_t v1 = g4 & -248; // 0x48575
    g4 = v1;
    int32_t * v2 = (int32_t *)v1; // 0x48577
    *v2 = *v2 + v1;
    int32_t v3 = g4; // 0x48579
    char * v4 = (char *)v3; // 0x48579
    *v4 = *v4 + (char)v3;
    int32_t v5 = g10; // 0x4857b
    g4 = v5;
    int32_t v6 = *(int32_t *)(g5 - 312); // 0x48581
    g4 = v6;
    int32_t result = function_27680(v6, (char *)v5, (int32_t)&g870); // 0x4858a
    g4 = result;
    return result;
}

// Address range: 0x48594 - 0x485a8
int32_t function_48594(void) {
    // 0x48594
    *(int32_t *)(g5 - 300) = 0;
    g4 = 1;
    return 1;
}

// Address range: 0x485a8 - 0x485d5
int32_t function_485a8(void) {
    int32_t v1 = function_26cf0(); // 0x485af
    g4 = v1;
    *(int32_t *)(g5 - 312) = v1;
    g4 = function_26330(g4);
    int32_t v2 = *(int32_t *)(g5 - 312); // 0x485ca
    g4 = v2;
    *(int32_t *)(g5 - 28) = v2;
    return g4;
}

// Address range: 0x485d5 - 0x485e4
int32_t function_485d5(void) {
    // 0x485d5
    *(int32_t *)(g5 - 312) = 0;
    return g4;
}

// Address range: 0x485e4 - 0x4860b
int32_t function_485e4(void) {
    // 0x485e4
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 312);
    g4 = function_26d40();
    while (true) {
        int32_t v2 = g5 - 28; // 0x485f4
        g4 = v2;
        g4 = function_1fc30(v2);
        int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x48602
        g4 = v3;
        g6 = v3;
    }
}

// Address range: 0x48610 - 0x4873b
int32_t function_48610(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x48619
    g6 = a2;
    int32_t v2 = g8; // 0x4861f
    g9 = a4;
    g8 = a3;
    if (a2 == 0) {
        // 0x4864a
        g6 = v1;
        g8 = v2;
        return g4;
    }
    if (a3 == 0) {
        // 0x4864a
        g6 = v1;
        g8 = v2;
        return g4;
    }
    int32_t * v3 = (int32_t *)(a2 + 8); // 0x48633
    int32_t v4 = *v3; // 0x48633
    g4 = v4;
    if (v4 == 0) {
        // 0x4864a
        g6 = v1;
        g8 = v2;
        return g4;
    }
    if (a4 < 1) {
        // 0x4864a
        g6 = v1;
        g8 = v2;
        return g4;
    }
    int32_t * v5 = (int32_t *)a2; // 0x4863e
    int32_t v6 = *v5; // 0x4863e
    g4 = v6;
    if (v6 == 0) {
        // 0x4864a
        g6 = v1;
        g8 = v2;
        return g4;
    }
    int32_t * v7 = (int32_t *)(a2 + 4); // 0x48644
    if (*v7 >= 3) {
        // 0x4864a
        g6 = v1;
        g8 = v2;
        return g4;
    }
    // 0x48660
    g4 = g292;
    int32_t v8 = *(int32_t *)(g292 + 12); // 0x48665
    g4 = v8;
    g7 = *(int32_t *)v8;
    int32_t v9 = *v3; // 0x48676
    g4 = v9;
    g9 = a4;
    int32_t v10 = (v9 >= 0 ? v9 : v9 + 7) / 8; // 0x48687
    g10 = v10;
    int32_t v11; // 0x4868c
    if (v10 != a4) {
        // bb
        v11 = function_48830();
        g4 = v11;
    } else {
        v11 = v9;
    }
    int32_t v12 = v11 - 8; // 0x48692
    g4 = v12;
    if (v12 < 57) {
        // bb257
        g4 = function_48850();
    }
    int32_t v13 = function_26cf0(); // 0x486a5
    g4 = v13;
    function_26330(v13);
    g4 = v13;
    g4 = v13;
    function_27920(v13, "name", (char *)*v5);
    int32_t v14 = *(int32_t *)&g273; // 0x486e5
    g4 = v14;
    g7 = v13;
    g9 = v14;
    if ((char)v14 == 0) {
        // bb258
        g4 = function_48818();
    }
    int32_t v15 = *v7 * (int32_t)&g88; // 0x4870c
    g4 = v15;
    g7 = a1;
    int32_t v16 = a1 + 172 + v15; // 0x4871a
    g9 = v16;
    int32_t v17; // 0x48727
    int32_t result; // 0x48721
    if (*v3 == 9) {
        // bb260
        result = function_48860();
        g4 = result;
        v17 = g9;
    } else {
        result = v15;
        v17 = v16;
    }
    // 0x48727
    g9 = *(int32_t *)(a2 + 12) + v17;
    return result;
}

// Address range: 0x48747 - 0x4874d
int32_t function_48747(int32_t a1) {
    unsigned char v1 = *(char *)&g8; // 0x48747
    *(char *)g8 = v1 / 16 | 16 * v1;
    return g4;
}

// Address range: 0x4875d - 0x48818
int32_t function_4875d(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x758b0443); // 0x4875d
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x48763
    g9 |= 256 * v2 & 0xff00;
    g4 = v2 & ((int32_t)&g862 | -256);
    char v3 = *(char *)&g7; // 0x4876a
    *(char *)g7 = v3 + (char)(v2 & (int32_t)&g862);
    int32_t v4 = g6; // 0x4876c
    int32_t v5 = *(int32_t *)(v4 + 8); // 0x4876c
    g10 = v5;
    int32_t result = v5 - 8; // 0x4876f
    g4 = result;
    if (result < 57) {
        // 0x48777
        return result;
    }
    // 0x487f0
    g4 = v4;
    int32_t v6 = function_2cb40(v4); // 0x487f5
    g4 = v6;
    int32_t v7; // 0x487fc
    if (v6 < 1) {
        // bb
        v7 = function_48818();
        g4 = v7;
    } else {
        v7 = v6;
    }
    int32_t v8 = g6; // 0x487fe
    g9 = v8;
    int32_t result2; // 0x48805
    if (*(char *)(v7 - 1 + v8) != 93) {
        // bb247
        result2 = function_48818();
        g4 = result2;
    } else {
        result2 = v7;
    }
    // 0x48807
    g10 = *(int32_t *)(g5 + 8);
    return result2;
}

// Address range: 0x48818 - 0x48830
int32_t function_48818(void) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x48818
    g4 = v1;
    int32_t result = function_28600(v1); // 0x48826
    g4 = result;
    return result;
}

// Address range: 0x48830 - 0x48845
int32_t function_48830(void) {
    int32_t result = g6; // 0x48838
    g4 = result;
    return result;
}

// Address range: 0x4884a - 0x4884f
int32_t function_4884a(void) {
    // 0x4884a
    return g4;
}

// Address range: 0x48850 - 0x48857
int32_t function_48850(void) {
    // 0x48850
    return g4;
}

// Address range: 0x48860 - 0x488c6
int32_t function_48860(void) {
    int32_t v1 = g11 - (g10 + 31 & -16) + 43 & -16; // 0x4886f
    g4 = v1;
    char v2 = *(char *)&g8; // 0x48872
    int32_t v3 = *(int32_t *)(g6 + 12); // 0x48875
    g8 = v3;
    *(int32_t *)(g5 - 368) = v1;
    *(int32_t *)(g5 - 396) = g9;
    *(int32_t *)(g11 + 8) = g10;
    *(char *)(g5 - 369) = (char)(v2 != 0);
    int32_t v4 = v3 % 8; // 0x4889d
    g7 = v4;
    g4 = 1;
    uint32_t v5 = v4 & (int32_t)&g862 & 31; // 0x488a4
    char v6; // 0x488a8
    if (v5 != 0) {
        int32_t v7 = 1 << v5; // 0x488a4
        g4 = v7;
        v6 = v7;
    } else {
        v6 = 1;
    }
    // bb3
    *(char *)(g5 - 392) = v6;
    int32_t v8 = v3 >= 0 ? v3 : v3 + 7; // 0x488b1
    g4 = v8;
    int32_t v9 = *(int32_t *)(g5 - 368); // 0x488b4
    g8 = v9;
    g4 = g9 + v8 / 8;
    *(int32_t *)g11 = v9;
    *(int32_t *)(g11 + 4) = g4;
    return g4;
}

// Address range: 0x48915 - 0x48916
int32_t function_48915(void) {
    // 0x48915
    return g4;
}

// Address range: 0x4893b - 0x48940
int32_t function_4893b(void) {
    // 0x4893b
    return g4;
}

// Address range: 0x4899a - 0x4899f
int32_t function_4899a(void) {
    // 0x4899a
    return g4;
}

// Address range: 0x489ef - 0x489f4
int32_t function_489ef(void) {
    // 0x489ef
    return g4;
}

// Address range: 0x48a40 - 0x48a45
int32_t function_48a40(void) {
    // 0x48a40
    return g4;
}

// Address range: 0x48a92 - 0x48a97
int32_t function_48a92(void) {
    // 0x48a92
    return g4;
}

// Address range: 0x48ae4 - 0x48ae9
int32_t function_48ae4(void) {
    // 0x48ae4
    return g4;
}

// Address range: 0x48ae9 - 0x48aea
int32_t function_48ae9(void) {
    // 0x48ae9
    return g4;
}

// Address range: 0x48b30 - 0x48b75
int32_t function_48b30(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x97a4fbb); // 0x48b30
    int32_t v2 = *v1 - 1; // 0x48b30
    *v1 = v2;
    int32_t v3 = g10; // 0x48b36
    int32_t v4 = v3 + 15; // 0x48b36
    g7 = v4;
    g10 = v2 < 0 ? v4 : v3;
    int32_t v5; // ebp
    *(int32_t *)(v5 - 92) = g4;
    int32_t v6 = (int32_t)*(int16_t *)(v5 - 80); // 0x48b3f
    g4 = v6;
    g10 /= -16;
    *(int32_t *)(v5 - 88) = v6;
    unsigned char v7 = *(char *)(v5 - 80); // 0x48b4b
    *(int32_t *)(v5 - 84) = (int32_t)v7;
    g4 = g292;
    g7 = *(int32_t *)(v5 - 84 + 4 * g10);
    int32_t result = *(int32_t *)(g292 + 20); // 0x48b5b
    g4 = result;
    g9 = *(int32_t *)result;
    g7 = g6;
    return result;
}

// Address range: 0x48b75 - 0x48ba8
int32_t function_48b75(void) {
    // 0x48b75
    g4 = g292;
    int32_t v1; // ebp
    g10 = *(int32_t *)(v1 + 8);
    int32_t v2 = *(int32_t *)(g292 + 20); // 0x48b7d
    g9 = v2;
    int32_t result = g6; // 0x48b80
    int32_t v3 = *(int32_t *)(result + 4) * (int32_t)&g88; // 0x48b80
    g4 = v3;
    g4 = *(int32_t *)(result + 12) + v3;
    g7 = *(int32_t *)v2;
    g4 = result;
    return result;
}

// Address range: 0x48ba8 - 0x48c36
int32_t function_48ba8(void) {
    // 0x48ba8
    int32_t v1; // ebp
    g10 = *(int32_t *)(v1 + 8);
    int32_t v2 = v1 - 348; // 0x48bab
    g8 = v2;
    g7 = 64;
    g4 = *(int32_t *)(g6 + 4) * (int32_t)&g88;
    *(int32_t *)(v1 - 364) = v2;
    int32_t v3 = g4 + 160 + *(int32_t *)(g6 + 12) + g10; // 0x48bc6
    g4 = v3;
    g10 = 0;
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x48bcf
    g9 = v4;
    g4 = *(int32_t *)(v3 + 16);
    *(int32_t *)(v1 - 92) = v4;
    *(int32_t *)(v1 - 88) = g4;
    g4 = 0;
    __asm_rep_stosd_memset((char *)v2, 0, 64);
    bool v5; // df
    g8 = (v5 ? -256 : 256) + v2;
    g7 = 0;
    int32_t v6 = v1 - 348; // 0x48bf9
    g4 = v6;
    function_2da40(v6, (int32_t)"GNU", "%s.%d");
    g4 = g292;
    int32_t v7 = g10; // 0x48c0c
    g7 = *(int32_t *)(g5 - 92 + 4 * v7);
    int32_t result = *(int32_t *)(g292 + 20); // 0x48c10
    g4 = result;
    g9 = *(int32_t *)result;
    g7 = g5 - 348;
    g10 = v7 + 1;
    while (v7 != 1) {
        // 0x48bdf
        v6 = g5 - 348;
        g4 = v6;
        function_2da40(v6, (int32_t)"GNU", "%s.%d");
        g4 = g292;
        v7 = g10;
        g7 = *(int32_t *)(g5 - 92 + 4 * v7);
        result = *(int32_t *)(g292 + 20);
        g4 = result;
        g9 = *(int32_t *)result;
        g7 = g5 - 348;
        g10 = v7 + 1;
    }
    // 0x48c31
    return result;
}

// Address range: 0x48c36 - 0x48c47
int32_t function_48c36(void) {
    int32_t v1 = g8 & -1 - g4; // 0x48c38
    g4 = v1;
    int32_t v2; // ebp
    int32_t v3 = *(int32_t *)(v2 - 368); // 0x48c3a
    g8 = v3;
    *(char *)v3 = (char)v1;
    int32_t result = function_48915(); // 0x48c42
    g4 = result;
    return result;
}

// Address range: 0x48c47 - 0x48e19
int32_t function_48c47(int32_t a1, int32_t a2) {
    // 0x48c47
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 368);
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g5 - 28; // 0x48c61
    g4 = v2;
    g4 = function_1fc30(v2);
    function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // bp-4
    g5 = &v3;
    int32_t v4 = g8; // 0x48c83
    int32_t v5 = g10; // 0x48c84
    int32_t v6 = g6; // 0x48c85
    g4 = a2;
    int32_t v7 = function_261f0(a2); // 0x48c8f
    g4 = v7;
    g6 = v7;
    int32_t result; // 0x48d66
    int32_t v8; // 0x48cc5
    int32_t v9; // 0x48dd0
    if (v7 != 0) {
        // 0x48c9e
        g4 = a1 + 132;
      lab_0x48cc2_2:
        while (true) {
          lab_0x48cc2:
            // 0x48cc2
            v8 = function_25190(v7);
            g4 = v8;
            g10 = v8;
            int32_t v10 = function_27fc0(g6, (char *)&g129, 0); // 0x48cdf
            g4 = v10;
            if (v10 == 0) {
                goto lab_0x48cb0;
            } else {
                int32_t v11 = function_26cf0(); // 0x48cef
                g4 = v11;
                g8 = v11;
                g4 = function_26330(v11);
                int32_t v12 = g8; // 0x48d06
                function_27920(v12, "name", (char *)v8);
                int32_t v13 = *(int32_t *)&g273; // 0x48d1d
                g4 = v13;
                g9 = v13;
                if ((char)v13 != 0) {
                    int32_t v14 = (int32_t)g450; // 0x48d70
                    g4 = v14;
                    g9 = *(int32_t *)g450;
                    g9 = *(int32_t *)g450;
                    if (g450 != NULL) {
                        int32_t v15 = *(int32_t *)g450; // 0x48d89
                        g9 = v15;
                        g8 = v14;
                        if (v15 != 0) {
                            while (true) {
                                int32_t v16 = function_2cc30(v8, (char *)v15); // 0x48da5
                                g4 = v16;
                                if (v16 == 0) {
                                    // bb
                                    g4 = function_48e28();
                                }
                                int32_t v17 = g8 + 12; // 0x48dae
                                g8 = v17;
                                if (v17 == 0) {
                                    // break -> 0x48db3
                                    break;
                                }
                                int32_t v18 = *(int32_t *)v17; // 0x48d98
                                g9 = v18;
                                if (v18 == 0) {
                                    // break -> 0x48db3
                                    break;
                                }
                                v15 = v18;
                            }
                        }
                    }
                    if (v8 != 0) {
                        int32_t v19 = (int32_t)g450; // 0x48db7
                        g4 = v19;
                        g9 = *(int32_t *)g450;
                        g9 = *(int32_t *)g450;
                        if (g450 == NULL) {
                            goto lab_0x48dff;
                        } else {
                            // 0x48dd0
                            v9 = *(int32_t *)g450;
                            g9 = v9;
                            g8 = v19;
                            if (v9 != 0) {
                                goto lab_0x48de6;
                            } else {
                                goto lab_0x48dff;
                            }
                        }
                    }
                }
                // 0x48d3a
                g4 = v12;
                if (v12 == 0) {
                    goto lab_0x48cb0;
                } else {
                    // 0x48d45
                    g4 = function_28600(v12);
                    int32_t v20 = function_26220(g6); // 0x48d50
                    g4 = v20;
                    g6 = v20;
                    if (v20 == 0) {
                        result = v20;
                        // break -> 0x48d5f
                        break;
                    }
                    v7 = v20;
                    goto lab_0x48cc2;
                }
            }
        }
    } else {
        result = 0;
    }
  lab_0x48d5f:
    // 0x48d5f
    g6 = v6;
    g10 = v5;
    g8 = v4;
    return result;
  lab_0x48cb0:;
    int32_t v21 = function_26220(g6); // 0x48cb3
    g4 = v21;
    g6 = v21;
    if (v21 == 0) {
        result = 0;
        // break -> 0x48d5f
        goto lab_0x48d5f;
    }
    v7 = v21;
    // continue -> 0x48cc2
    goto lab_0x48cc2_2;
  lab_0x48dff:
    // 0x48dff
    g9 = a1;
    int32_t result2 = *(int32_t *)a1; // 0x48e02
    g4 = result2;
    return result2;
  lab_0x48de6:;
    int32_t v22 = function_2cc30(v8, (char *)v9); // 0x48ded
    g4 = v22;
    if (v22 == 0) {
        // bb280
        g4 = function_48f60();
        goto lab_0x48dfa;
    } else {
        goto lab_0x48dfa;
    }
  lab_0x48dfa:;
    int32_t v23 = g8 + 12; // 0x48dfa
    g8 = v23;
    if (v23 != 0) {
        int32_t v24 = *(int32_t *)v23; // 0x48de0
        g9 = v24;
        if (v24 == 0) {
            goto lab_0x48dff;
        } else {
            v9 = v24;
            goto lab_0x48de6;
        }
    } else {
        goto lab_0x48dff;
    }
}

// Address range: 0x48e1e - 0x48e23
int32_t function_48e1e(void) {
    // 0x48e1e
    return g4;
}

// Address range: 0x48e28 - 0x48ec2
int32_t function_48e28(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x48e28
    g9 = v1;
    uint32_t v2 = *(int32_t *)(v1 + 144); // 0x48e2b
    g10 = v2;
    if (v2 >= 1) {
        int32_t v3 = *(int32_t *)(v1 + 132); // 0x48e35
        g9 = v3;
        g4 = 0;
        int32_t v4 = *(int32_t *)(g8 + 4); // 0x48e3d
        g7 = v4;
        if (*(int32_t *)v3 == v4) {
            int32_t result = function_48f30(); // 0x48e44
            g4 = result;
            return result;
        }
        int32_t v5 = 0; // 0x48e59
        while (true) {
            int32_t v6 = v5 + 1; // 0x48e59
            g4 = v6;
            if (v6 == v2) {
                // break -> 0x48e62
                break;
            }
            // 0x48e50
            if (*(int32_t *)(g9 + 4 * v6) == g7) {
                int32_t v7 = function_48fb8(); // 0x48e53
                g4 = v7;
                v5 = v7;
            } else {
                v5 = v6;
            }
        }
    }
    // 0x48e62
    g4 = g292;
    int32_t v8 = g8; // 0x48e67
    g7 = v8;
    int32_t v9 = *(int32_t *)(g292 + 20); // 0x48e69
    g4 = v9;
    g9 = *(int32_t *)v9;
    int32_t v10; // 0x48e83
    if ((char)v9 == 0) {
        // bb11
        g4 = function_48fd0();
        v10 = g8;
    } else {
        v10 = v8;
    }
    int32_t v11 = *(int32_t *)(g5 + 8); // 0x48e80
    g9 = v11;
    g4 = v10 + 4;
    *(char *)(v11 + (int32_t)&g834) = 1;
    int32_t v12 = g4; // 0x48e8d
    int32_t v13 = *(int32_t *)(g9 + 144); // 0x48e91
    g4 = v13;
    int32_t v14 = *(int32_t *)(g5 - 44); // 0x48e9b
    g4 = v14;
    g4 = function_49b30(v14, v13, v12);
    int32_t v15 = *(int32_t *)(g5 + 8); // 0x48ea6
    g9 = v15;
    g10 = g8;
    int32_t result2 = *(int32_t *)v15; // 0x48eab
    g4 = result2;
    return result2;
}

// Address range: 0x48ec6 - 0x48f2b
int32_t function_48ec6(void) {
    // 0x48ec6
    g8++;
    g4 &= -256;
    int32_t v1 = function_26cf0(); // 0x48ece
    g4 = v1;
    g10 = v1;
    g4 = function_26330(v1);
    int32_t v2 = *(int32_t *)(g5 + 8); // 0x48ee5
    g9 = v2;
    int32_t v3 = *(int32_t *)(v2 + 12); // 0x48ee8
    g4 = v3;
    g4 = function_27680(g10, "iController", v3);
    int32_t v4 = *(int32_t *)g8; // 0x48eff
    g4 = v4;
    function_27920(g10, "award", (char *)v4);
    g4 = g297;
    g9 = g297;
    return g297;
}

// Address range: 0x48f2b - 0x48f30
int32_t function_48f2b(void) {
    // 0x48f2b
    return g4;
}

// Address range: 0x48f30 - 0x48f4c
int32_t function_48f30(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x48f30
    g9 = v1;
    g10 = g8;
    int32_t result = *(int32_t *)v1; // 0x48f35
    g4 = result;
    return result;
}

// Address range: 0x48f51 - 0x48f56
int32_t function_48f51(void) {
    // 0x48f51
    return g4;
}

// Address range: 0x48f60 - 0x48fa8
int32_t function_48f60(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x48f60
    g4 = v1;
    uint32_t v2 = *(int32_t *)(v1 + 164); // 0x48f63
    g10 = v2;
    if (v2 >= 1) {
        int32_t v3 = *(int32_t *)(v1 + 152); // 0x48f6d
        g9 = v3;
        g4 = 0;
        int32_t v4 = *(int32_t *)(g8 + 4); // 0x48f75
        g7 = v4;
        if (*(int32_t *)v3 == v4) {
            int32_t result = function_48f30(); // 0x48f7c
            g4 = result;
            return result;
        }
        int32_t v5 = 0; // 0x48f85
        while (true) {
            int32_t v6 = v5 + 1; // 0x48f85
            g4 = v6;
            if (v6 == v2) {
                // break -> 0x48f8c
                break;
            }
            // 0x48f80
            if (*(int32_t *)(g9 + 4 * v6) == g7) {
                int32_t v7 = function_48f2b(); // 0x48f83
                g4 = v7;
                v5 = v7;
            } else {
                v5 = v6;
            }
        }
    }
    int32_t v8 = *(int32_t *)(g5 + 8); // 0x48f8c
    g9 = v8;
    g10 = g8;
    int32_t result2 = *(int32_t *)v8; // 0x48f91
    g4 = result2;
    return result2;
}

// Address range: 0x48fad - 0x48fb2
int32_t function_48fad(void) {
    // 0x48fad
    return g4;
}

// Address range: 0x48fb8 - 0x48fc6
int32_t function_48fb8(void) {
    int32_t v1 = g4; // 0x48fb8
    int32_t result; // 0x48fbb
    if (v1 != -1) {
        // bb
        result = function_48f30();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x48fc1
    return result;
}

// Address range: 0x48fd0 - 0x48fec
int32_t function_48fd0(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x48fd0
    g9 = v1;
    g10 = g8;
    int32_t result = *(int32_t *)v1; // 0x48fd5
    g4 = result;
    return result;
}

// Address range: 0x48ff1 - 0x48ff6
int32_t function_48ff1(void) {
    // 0x48ff1
    return g4;
}

// Address range: 0x48ff6 - 0x49017
int32_t function_48ff6(void) {
    // 0x48ff6
    g6 = g4;
    g4 = function_26d40();
    while (true) {
        int32_t v1 = g5 - 28; // 0x49000
        g4 = v1;
        g4 = function_1fc30(v1);
        int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x4900e
        g4 = v2;
        g6 = v2;
    }
}

// Address range: 0x49017 - 0x491fb
int32_t function_49017(void) {
    // 0x49017
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x49024
    int32_t v2 = (int32_t)g450; // 0x49042
    g4 = v2;
    g544 = 1;
    g551 = 0;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    char * v3; // 0x490f4
    if (g450 != NULL) {
        int32_t v4 = *(int32_t *)g450; // 0x4906d
        g9 = v4;
        char v5; // bp-32
        g10 = &v5;
        g6 = v2;
        int32_t v6 = v1 + 132; // 0x4907a
        g4 = v6;
        if (v4 != 0) {
            while (true) {
                // 0x49096
                g4 = g292;
                int32_t v7 = *(int32_t *)(g292 + 20); // 0x4909b
                g4 = v7;
                g7 = *(int32_t *)v7;
                int32_t v8; // 0x490ef
                if ((char)v7 != 0) {
                    // 0x490b2
                    if (v5 != 0) {
                        // 0x490b8
                        g9 = v6;
                        int32_t v9 = v2 + 4; // 0x490be
                        g8 = v9;
                        g4 = function_49900(v6, v9);
                        g7 = v1;
                        g9 = v6;
                        int32_t v10 = *(int32_t *)(v1 + 144); // 0x490dd
                        g4 = v10;
                        g4 = function_49b30(v6, v10, g8);
                        v8 = g6;
                    } else {
                        v8 = v2;
                    }
                } else {
                    v8 = v2;
                }
                int32_t v11 = v8 + 12; // 0x490ef
                g6 = v11;
                if (v11 == 0) {
                    // break -> 0x490f4
                    break;
                }
                int32_t v12 = *(int32_t *)v11; // 0x49090
                g9 = v12;
                if (v12 == 0) {
                    // break -> 0x490f4
                    break;
                }
                v2 = v11;
            }
            // 0x490f4
            v3 = g450;
        } else {
            v3 = g450;
        }
    } else {
        v3 = NULL;
    }
    int32_t v13 = (int32_t)v3; // 0x490f4
    g4 = v13;
    g9 = *(int32_t *)v3;
    g9 = *(int32_t *)v3;
    if (v3 != NULL) {
        // 0x49111
        int32_t v14; // bp-96
        g9 = &v14;
        g6 = v13;
        while (true) {
            int32_t v15 = *(int32_t *)v13; // 0x4911c
            g9 = v15;
            if (v15 == 0) {
                // break -> 0x491c9
                break;
            }
            int32_t result = *(int32_t *)(v13 + 8) - 8; // 0x49129
            g4 = result;
            if (result < 57) {
                // 0x49135
                return result;
            }
            int32_t v16 = v13 + 16; // 0x491c0
            g6 = v16;
            if (v16 == 0) {
                // break -> 0x491c9
                break;
            }
            v13 = v16;
        }
    }
    // 0x491c9
    g4 = g540;
    int32_t v17 = *(int32_t *)(g540 + 48); // 0x491dc
    g4 = v17;
    if (v17 != 0) {
        // bb
        g4 = function_493f8();
    }
    // 0x491e7
    g7 = v1;
    int32_t result2 = *(int32_t *)(v1 + 12); // 0x491ed
    g4 = result2;
    return result2;
}

// Address range: 0x491ff - 0x49221
int32_t function_491ff(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x1737b); // 0x491ff
    *v1 = *v1 - 1;
    g8++;
    int32_t v2 = g4; // 0x49208
    unsigned char v3 = (char)v2 & 4; // 0x49208
    int32_t v4 = (int32_t)v3 | v2 & -256; // 0x49208
    g4 = v4;
    char * v5 = (char *)v4; // 0x4920a
    *v5 = *v5 + v3;
    int32_t v6 = g4; // 0x4920c
    char * v7 = (char *)v6; // 0x4920c
    *v7 = *v7 + (char)v6;
    int32_t result = function_46cd0(g4, (int32_t)&g870); // 0x49211
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x492d2 - 0x492e0
int32_t function_492d2(void) {
    // 0x492d2
    g6 += 16;
    return g4;
}

// Address range: 0x49327 - 0x4932a
int32_t function_49327(void) {
    // 0x49327
    return g4;
}

// Address range: 0x49360 - 0x4936e
int32_t function_49360(void) {
    // 0x49360
    g6 += 16;
    return g4;
}

// Address range: 0x49370 - 0x49371
int32_t function_49370(void) {
    // 0x49370
    return g4;
}

// Address range: 0x4939f - 0x493a2
int32_t function_4939f(void) {
    // 0x4939f
    return g4;
}

// Address range: 0x493e7 - 0x493f5
int32_t function_493e7(void) {
    // 0x493e7
    g6 += 16;
    return g4;
}

// Address range: 0x493f8 - 0x4940d
int32_t function_493f8(void) {
    // 0x493f8
    g4 = g292;
    int32_t result = *(int32_t *)(g292 + 20); // 0x493fd
    g4 = result;
    g9 = *(int32_t *)result;
    return result;
}

// Address range: 0x49410 - 0x4945f
int32_t function_49410(int32_t a1, int32_t a2) {
    bool v1 = g551 == 0; // zf
    bool v2 = llvm_ctpop_i8(g551) % 2 == 0; // pf
    int32_t v3 = g6; // 0x4941d
    int32_t v4 = g10; // 0x49420
    g6 = a2;
    g10 = a1;
    if (g551 != 0) {
        int32_t v5 = *(int32_t *)(a2 + 8); // 0x4942b
        g9 = v5;
        int32_t v6 = v5 - 1; // 0x4942e
        v1 = v6 == 0;
        v2 = llvm_ctpop_i8((char)v6) % 2 == 0;
        if (v6 != 0) {
            // 0x49433
            g550 = 0;
            int32_t result = function_49476(v3, v4, g5); // 0x4943d
            g4 = result;
            return result;
        }
    }
    int128_t v7; // xmm0
    int128_t v8 = __asm_xorps(v7, v7); // 0x49440
    __asm_ucomiss(v8, (int32_t)g550);
    if (v2) {
        // bb
        g4 = function_494b0();
    }
    // 0x4944c
    if (!v1) {
        // bb240
        g4 = function_494b0();
    }
    // 0x4944e
    __asm_movsd(__asm_xorpd(v8, v8));
    return g4;
}

// Address range: 0x49476 - 0x4948a
int32_t function_49476(int32_t a1, int32_t a2, int32_t a3) {
    // 0x49476
    int32_t result; // 0x4947d
    if (g551 != 0) {
        // bb
        result = function_49496();
        g4 = result;
    } else {
        // 0x49476
        result = g4;
    }
    // 0x4947f
    return result;
}

// Address range: 0x49496 - 0x494a7
int32_t function_49496(void) {
    // 0x49496
    *(int32_t *)(g10 + 52) = 0;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x494b0 - 0x494b1
int32_t function_494b0(void) {
    // 0x494b0
    return g4;
}

// Address range: 0x494b4 - 0x494ce
int32_t function_494b4(void) {
    int128_t v1 = __asm_movups(g550); // 0x494b6
    int32_t v2; // ebp
    float80_t v3; // st7
    *(float64_t *)(v2 - 16) = (float64_t)v3;
    int128_t v4 = __asm_cvtps2pd(v1); // 0x494c0
    __asm_subsd(__asm_movsd_1649(*(int64_t *)(v2 - 16)), v4);
    return g4;
}

// Address range: 0x494d0 - 0x494e0
int32_t function_494d0(void) {
    // 0x494d0
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 8);
    int32_t result = g10; // 0x494d3
    g4 = result;
    g10 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x494e0 - 0x494ee
int32_t function_494e0(int32_t a1) {
    // 0x494e0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g179;
    return g4;
}

// Address range: 0x494f0 - 0x494fe
int32_t function_494f0(int32_t a1) {
    // 0x494f0
    g4 = a1;
    g9 = *(int32_t *)(a1 + 8);
    int32_t result = *(int32_t *)(a1 + 4); // 0x494fa
    g4 = result;
    return result;
}

// Address range: 0x49500 - 0x4950b
int32_t function_49500(int32_t a1) {
    int32_t result = a1 + 20; // 0x49507
    g4 = result;
    return result;
}

// Address range: 0x49510 - 0x4951e
int32_t function_49510(int32_t a1) {
    // 0x49510
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g183;
    return g4;
}

// Address range: 0x49520 - 0x4952b
int32_t function_49520(int32_t a1) {
    int32_t result = a1 + 20; // 0x49527
    g4 = result;
    return result;
}

// Address range: 0x49530 - 0x4953e
int32_t function_49530(int32_t a1) {
    // 0x49530
    g4 = a1;
    g9 = *(int32_t *)(a1 + 8);
    int32_t result = *(int32_t *)(a1 + 4); // 0x4953a
    g4 = result;
    return result;
}

// Address range: 0x49540 - 0x4954b
int32_t function_49540(int32_t a1) {
    // 0x49540
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x49547
    g4 = result;
    return result;
}

// Address range: 0x49550 - 0x4955b
int32_t function_49550(int32_t a1) {
    // 0x49550
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 16); // 0x49557
    g4 = result;
    return result;
}

// Address range: 0x49560 - 0x4956b
int32_t function_49560(int32_t a1) {
    // 0x49560
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x49567
    g4 = result;
    return result;
}

// Address range: 0x49570 - 0x4957b
int32_t function_49570(int32_t a1) {
    // 0x49570
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 16); // 0x49577
    g4 = result;
    return result;
}

// Address range: 0x49580 - 0x495a8
int32_t function_49580(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x49583
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x4958a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x4958d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x49590
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x49598
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x4959e
    g6 = v1;
    return result;
}

// Address range: 0x495b0 - 0x495bd
int32_t function_495b0(int32_t a1) {
    // 0x495b0
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x495b7
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x495b9
    g4 = result;
    return result;
}

// Address range: 0x495c0 - 0x495ca
int32_t function_495c0(void) {
    // 0x495c0
    g4 = 4;
    return 4;
}

// Address range: 0x495d0 - 0x495f8
int32_t function_495d0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x495d3
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x495da
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x495dd
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x495e0
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x495e8
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x495ee
    g6 = v1;
    return result;
}

// Address range: 0x49600 - 0x4960d
int32_t function_49600(int32_t a1) {
    // 0x49600
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x49607
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x49609
    g4 = result;
    return result;
}

// Address range: 0x49610 - 0x4961a
int32_t function_49610(void) {
    // 0x49610
    g4 = 1;
    return 1;
}

// Address range: 0x49620 - 0x49648
int32_t function_49620(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x49623
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x4962a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x4962d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x49630
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x49638
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x4963e
    g6 = v1;
    return result;
}

// Address range: 0x49650 - 0x4965d
int32_t function_49650(int32_t a1) {
    // 0x49650
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x49657
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x49659
    g4 = result;
    return result;
}

// Address range: 0x49660 - 0x4966a
int32_t function_49660(void) {
    // 0x49660
    g4 = 12;
    return 12;
}

// Address range: 0x49670 - 0x49698
int32_t function_49670(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x49673
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x4967a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x4967d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x49680
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x49688
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x4968e
    g6 = v1;
    return result;
}

// Address range: 0x496a0 - 0x496ad
int32_t function_496a0(int32_t a1) {
    // 0x496a0
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x496a7
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x496a9
    g4 = result;
    return result;
}

// Address range: 0x496b0 - 0x496ba
int32_t function_496b0(void) {
    // 0x496b0
    g4 = 20;
    return 20;
}

// Address range: 0x496c0 - 0x496e8
int32_t function_496c0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x496c3
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x496ca
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x496cd
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x496d0
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x496d8
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x496de
    g6 = v1;
    return result;
}

// Address range: 0x49748 - 0x49757
int32_t function_49748(void) {
    int32_t v1 = g6; // 0x49748
    g4 = v1;
    *(int32_t *)(v1 + 16) = v1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 8);
    g10 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x497b0 - 0x497c2
int32_t function_497b0(int32_t a1) {
    // 0x497b0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g179;
    int32_t result = function_1bc40(); // 0x497bd
    g4 = result;
    return result;
}

// Address range: 0x497d0 - 0x49819
int32_t function_497d0(int32_t a1) {
    int32_t v1 = g6; // 0x497d3
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g177;
    *(int32_t *)(g6 + (int32_t)&g50) = (int32_t)&g180;
    int32_t v2 = g6; // 0x49810
    if (*(char *)(a1 + (int32_t)&g51) % 2 != 0) {
        int32_t result = v2 + (int32_t)&g50; // 0x49810
        g4 = result;
        return result;
    }
    // 0x497f3
    *(int32_t *)v2 = (int32_t)&g179;
    g6 = v1;
    int32_t result2 = function_1bc40(); // 0x49801
    g4 = result2;
    return result2;
}

// Address range: 0x4981e - 0x49820
int32_t function_4981e(void) {
    // 0x4981e
    return g4;
}

// Address range: 0x49820 - 0x49869
int32_t function_49820(int32_t a1) {
    // 0x49820
    *(int32_t *)g6 = (int32_t)&g179;
    g4 = function_7ab57(g4, (int32_t)&g870);
    int32_t v1 = g6; // 0x49833
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g177;
    *(int32_t *)(g6 + (int32_t)&g50) = (int32_t)&g180;
    int32_t v2 = g6; // 0x49860
    if (*(char *)(a1 + (int32_t)&g51) % 2 != 0) {
        int32_t result = v2 + (int32_t)&g50; // 0x49860
        g4 = result;
        return result;
    }
    // 0x49853
    *(int32_t *)v2 = (int32_t)&g179;
    g6 = v1;
    return g4;
}

// Address range: 0x4986d - 0x4987a
int32_t function_4986d(int32_t a1, int32_t a2) {
    // 0x4986d
    g8++;
    int32_t v1 = g4; // 0x4986f
    g7 += *(int32_t *)(v1 + 57);
    *(char *)v1 = (char)v1;
    g6 = a1;
    return g4;
}

// Address range: 0x49890 - 0x498d6
int32_t function_49890(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g6; // 0x49893
    g6 = v1;
    g9 = a2;
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x4989d
    g4 = v3;
    int32_t v4 = v3 - a2 - 1; // 0x498a4
    g7 = v4;
    int32_t v5; // 0x498c7
    int32_t v6; // 0x498c7
    if (v4 >= 1) {
        int32_t v7 = *a1; // 0x498ab
        int32_t v8 = 8 * a2; // 0x498b4
        int32_t v9 = v8 + 8 + v7; // 0x498b4
        g7 = v9;
        int32_t v10 = v7 + v8; // 0x498b8
        g4 = v10;
        g4 = function_2cb20(v10, v9, 8 * v4);
        v5 = g6;
        v6 = *(int32_t *)(v5 + 12);
        g4 = v6;
    } else {
        v5 = v1;
        v6 = v3;
    }
    int32_t v11 = v6 - 1; // 0x498ca
    g4 = v11;
    *(int32_t *)(v5 + 12) = v11;
    g6 = v2;
    return g4;
}

// Address range: 0x498e0 - 0x498f9
int32_t function_498e0(int32_t a1) {
    // 0x498e0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g180;
    return g4;
}

// Address range: 0x49900 - 0x4995c
int32_t function_49900(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x49900
    g4 = 0;
    int32_t v2 = g10; // 0x49905
    g10 = a1;
    int32_t v3 = g6; // 0x49909
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x4990a
    g9 = v4;
    if (v4 < 1) {
        // 0x4992e
        g6 = v3;
        g10 = v2;
        g5 = v1;
        return 0;
    }
    // 0x49911
    g4 = a2;
    int32_t v5 = *(int32_t *)a1; // 0x49914
    g7 = v5;
    int32_t v6 = *(int32_t *)a2; // 0x49916
    g6 = v6;
    g4 = 0;
    int32_t v7; // 0x49925
    if (*(int32_t *)v5 != v6) {
        int32_t v8 = 0; // 0x49925
        while (true) {
            // 0x49925
            v7 = v8 + 1;
            g4 = v7;
            if (v7 == v4) {
                // break -> 0x4992c
                break;
            }
            // 0x49920
            if (*(int32_t *)(4 * v7 + v5) == v6) {
                if (v8 == -2) {
                    goto lab_0x4992c;
                } else {
                    goto lab_0x4993d;
                }
            }
            v8 = v7;
        }
      lab_0x4992c:
        // 0x4992c
        g4 = 0;
        // 0x4992e
        g6 = v3;
        g10 = v2;
        g5 = v1;
        return 0;
    }
    v7 = 0;
    goto lab_0x4993d;
  lab_0x4993d:;
    int32_t v9 = v4 - 1; // 0x4993d
    g9 = v9;
    int32_t v10; // 0x4994a
    int32_t v11; // 0x4994d
    if (v7 != v9) {
        int32_t v12 = *(int32_t *)(v5 + 4 * v9); // 0x49944
        g9 = v12;
        *(int32_t *)(4 * v7 + v5) = v12;
        v10 = g10;
        v11 = *(int32_t *)(v10 + 12) - 1;
        g9 = v11;
    } else {
        v10 = a1;
        v11 = v9;
    }
    // 0x49950
    *(int32_t *)(v10 + 12) = v11;
    g4 = 1;
    g6 = v3;
    g10 = v2;
    return 1;
}

// Address range: 0x49960 - 0x4997e
int32_t function_49960(int32_t a1) {
    // 0x49960
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x49976
    g4 = result;
    return result;
}

// Address range: 0x499d0 - 0x49a20
int32_t function_499d0(int32_t a1, int32_t a2) {
    // 0x499d0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x499db
    int64_t v2 = v1; // 0x499db
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x499e2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x499e8
    g7 = v4;
    int32_t v5; // 0x49a08
    if (v1 == 0) {
        // bb
        g4 = function_49a48();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x499ee
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x499f6
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x499fb
    g4 = v8;
    int32_t v9; // 0x49a19
    if (v5 > v8) {
        // 0x49a02
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x49a08
        int32_t v11 = v10 < 0; // 0x49a0c
        int32_t v12 = (v11 + v10) / 2; // 0x49a11
        while (v5 > v12) {
            // 0x49a08
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x49a17
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x49a17
    int32_t v14 = *(int32_t *)v13; // 0x49a17
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x49a1e
    if (v14 == 0) {
        // bb20
        result = function_49a6f();
        g4 = result;
    } else {
        // 0x49a17
        result = g4;
    }
    // 0x49a20
    return result;
}

// Address range: 0x49a48 - 0x49a6f
int32_t function_49a48(void) {
    int32_t v1 = g4; // 0x49a48
    g9 = 4;
    int32_t v2 = v1 == 0 ? 4 : v1; // 0x49a4f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x49a60
    while (g7 > v3) {
        // 0x49a60
        v3 *= 2;
    }
    // 0x49a66
    g4 = v3;
    int32_t v4 = g6; // 0x49a66
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x49a6f - 0x49a70
int32_t function_49a6f(void) {
    // 0x49a6f
    return g4;
}

// Address range: 0x49a90 - 0x49b26
int32_t function_49a90(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g6; // 0x49a96
    g6 = v1;
    int32_t v3 = g10; // 0x49a9c
    g10 = a2;
    int32_t v4 = g8; // 0x49aa2
    int32_t v5 = *(int32_t *)(v1 + 12); // 0x49aa5
    g4 = v5;
    uint32_t v6 = *(int32_t *)(v1 + 4); // 0x49aa8
    g9 = v6;
    int32_t v7; // 0x49ab1
    int32_t v8; // 0x49b21
    int32_t v9; // 0x49b21
    if (v5 >= v6) {
        int32_t v10 = v5 + 1 - v6; // 0x49b16
        g4 = v10;
        g4 = function_499d0(v1, v10);
        v8 = g6;
        v9 = *(int32_t *)(v8 + 12);
        g4 = v9;
        v7 = g10;
    } else {
        v9 = v5;
        v7 = a2;
        v8 = v1;
    }
    // 0x49aaf
    g9 = *(int32_t *)v8;
    g8 = 8 * v7;
    int32_t v11 = v9 + 1; // 0x49ab8
    g4 = v11;
    *(int32_t *)(v8 + 12) = v11;
    int32_t v12 = g4 - g10 - 1; // 0x49ac0
    g4 = v12;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v13; // 0x49ae6
    if (v12 < 1) {
        // 0x49aaf
        v13 = g9;
    } else {
        int32_t v14 = g9; // 0x49ad1
        int32_t v15 = v14 + 8 + 8 * g10; // 0x49ad8
        g4 = v15;
        g4 = function_2cb20(v15, g8 + v14, 8 * v12);
        int32_t v16 = *(int32_t *)g6; // 0x49ae4
        g9 = v16;
        v13 = v16;
    }
    int32_t v17 = g8 + v13; // 0x49ae6
    g9 = v17;
    if (v17 != 0) {
        // 0x49aea
        g4 = a3;
        int32_t v18 = *(int32_t *)a3; // 0x49aed
        g7 = v18;
        g6 = *(int32_t *)(a3 + 4);
        *(int32_t *)v17 = v18;
        *(int32_t *)(g9 + 4) = g6;
    }
    int32_t result = g10; // 0x49af7
    g4 = result;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result;
}

// Address range: 0x49b30 - 0x49bb6
int32_t function_49b30(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x49b36
    g6 = a1;
    int32_t v2 = g10; // 0x49b3c
    g10 = a2;
    int32_t v3 = g8; // 0x49b42
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x49b45
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x49b48
    g9 = v5;
    int32_t v6; // 0x49b51
    int32_t v7; // 0x49bb1
    int32_t v8; // 0x49bb1
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x49ba6
        g4 = v9;
        g4 = function_2be40(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x49b4f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x49b58
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x49b60
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x49b86
    if (v11 < 1) {
        // 0x49b4f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x49b71
        int32_t v14 = v13 + 4 + 4 * g10; // 0x49b78
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x49b84
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x49b86
    g9 = v16;
    if (v16 != 0) {
        // 0x49b8a
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x49b8d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x49b91
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x49bc0 - 0x49bd6
int32_t function_49bc0(int32_t a1, uint32_t a2) {
    // 0x49bc0
    g4 = 0;
    g9 = a2;
    int32_t result; // 0x49bd0
    if (a2 < 4) {
        // 0x49bcd
        g4 = a1;
        result = *(int32_t *)(a1 + 8 + 4 * a2);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x49bd4
    return result;
}

// Address range: 0x49be0 - 0x49beb
int32_t function_49be0(int32_t a1) {
    // 0x49be0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 36); // 0x49be7
    g4 = result;
    return result;
}

// Address range: 0x49bf0 - 0x49c0c
int32_t function_49bf0(int32_t a1, int32_t a2) {
    // 0x49bf0
    g4 = 0;
    g9 = a2;
    g7 = a1;
    if (a2 < 0) {
        // 0x49c0a
        return 0;
    }
    // 0x49bff
    int32_t result; // 0x49c07
    if (*(int32_t *)(a1 + 36) > a2) {
        int32_t v1 = *(int32_t *)(a1 + 24); // 0x49c04
        g4 = v1;
        result = *(int32_t *)(v1 + 4 * a2);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x49c0a
    return result;
}

// Address range: 0x49c10 - 0x49c78
int32_t function_49c10(int32_t a1, unsigned char a2) {
    int32_t v1 = g6; // 0x49c13
    int32_t v2 = a2; // 0x49c17
    g7 = v2;
    g6 = a1;
    int32_t v3; // 0x49c73
    if (a2 != 0) {
        int32_t v4 = (int32_t)g450; // 0x49c50
        g4 = v4;
        g9 = *(int32_t *)g450;
        g9 = *(int32_t *)g450;
        g4 = 0;
        v3 = (v4 & 4) != 0 ? 0 : v2;
        g7 = v3;
    } else {
        v3 = v2;
    }
    // 0x49c22
    *(char *)(a1 + 44) = (char)v3;
    *(int32_t *)(g6 + 48) = 0;
    *(int32_t *)(g6 + 152) = 0;
    *(int32_t *)(g6 + 156) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x49c80 - 0x49f65
int32_t function_49c80(int32_t a1) {
    int32_t v1 = g6; // 0x49c86
    int32_t v2 = g7; // 0x49c89
    g6 = v2;
    int32_t v3 = g10; // 0x49c8b
    g10 = g9;
    g9 = a1;
    int32_t v4 = g8; // 0x49c93
    int32_t v5 = g4; // 0x49c96
    g8 = v5;
    int32_t v6 = *(int32_t *)(v2 + 8); // 0x49c98
    int32_t result7 = v6 - 8; // 0x49c9b
    g4 = result7;
    g875 = result7;
    char v7; // bp-36
    int32_t v8;
    int32_t v9; // 0x49cfa4
    switch (v6) {
        case 8: {
            if (a1 != 0) {
                int32_t v10 = *(int32_t *)(v2 + 4); // 0x49e18
                g9 = v10;
                g4 = v10;
                int32_t v11 = *(int32_t *)(v2 + 12); // 0x49e27
                g9 = v11;
                int32_t v12 = (int32_t)*(char *)(v11 + v10); // 0x49e2a
                g4 = v12;
                int32_t result = function_27680(v5, (char *)&g129, v12); // 0x49e3d
                g4 = result;
                // 0x49cee
                g6 = v1;
                g10 = v3;
                g8 = v4;
                return result;
            }
            // 0x49cb8
            v8 = function_27fc0(v5, (char *)&g129, 0);
            goto lab_0x49cd0;
        }
        case 9: {
            if (a1 != 0) {
                int32_t v13 = *(int32_t *)(v2 + 4); // 0x49e50
                g9 = v13;
                g4 = v13;
                int32_t v14 = *(int32_t *)(v2 + 12); // 0x49e5f
                g7 = v14;
                int32_t v15 = (v14 >= 0 ? v14 : v14 + 7) / 8; // 0x49e6a
                g9 = v15;
                int32_t v16 = (int32_t)*(char *)(v15 + v13); // 0x49e6d
                g4 = v16;
                int32_t v17 = v14 % 8; // 0x49e89
                g7 = v17;
                uint32_t v18 = v17 & (int32_t)&g862 & 31; // 0x49e8b
                int32_t v19; // 0x49e8b
                if (v18 != 0) {
                    // bb
                    v19 = v16 >> v18;
                    g4 = v19;
                } else {
                    v19 = v16;
                }
                int32_t v20 = v19 % 2; // 0x49e8d
                g4 = v20;
                int32_t result2 = function_27680(v5, (char *)&g129, v20); // 0x49e94
                g4 = result2;
                // 0x49cee
                g6 = v1;
                g10 = v3;
                g8 = v4;
                return result2;
            }
            int32_t v21 = function_27fc0(v5, (char *)&g129, 0); // 0x49d5b
            g4 = v21;
            v8 = v21 != 0;
            goto lab_0x49cd0;
        }
        case 16: {
            if (a1 != 0) {
                int32_t v22 = *(int32_t *)(v2 + 4); // 0x49ea0
                g9 = v22;
                g4 = v22;
                int32_t v23 = *(int32_t *)(v2 + 12); // 0x49eaf
                g9 = v23;
                int32_t v24 = (int32_t)*(int16_t *)(v23 + v22); // 0x49eb2
                g4 = v24;
                int32_t result3 = function_27680(v5, (char *)&g129, v24); // 0x49ec5
                g4 = result3;
                // 0x49cee
                g6 = v1;
                g10 = v3;
                g8 = v4;
                return result3;
            }
            // 0x49db0
            v7 = function_27fc0(v5, (char *)&g129, 0);
            g4 = a1;
            v9 = a1;
            goto lab_0x49cdd;
        }
        case 32: {
            if (a1 != 0) {
                int32_t v25 = *(int32_t *)(v2 + 4); // 0x49ed0
                g9 = v25;
                g4 = v25;
                int32_t v26 = *(int32_t *)(v2 + 12); // 0x49edf
                g9 = v26;
                int32_t v27 = *(int32_t *)(v26 + v25); // 0x49ee2
                g4 = v27;
                int32_t result4 = function_27680(v5, (char *)&g129, v27); // 0x49ef4
                g4 = result4;
                // 0x49cee
                g6 = v1;
                g10 = v3;
                g8 = v4;
                return result4;
            }
            // 0x49d78
            v7 = function_27fc0(v5, (char *)&g129, 0);
            g4 = a1;
            v9 = a1;
            goto lab_0x49cdd;
        }
        case 33: {
            if (a1 != 0) {
                int32_t v28 = *(int32_t *)(v2 + 4); // 0x49f00
                g9 = v28;
                g4 = v28;
                int32_t v29 = *(int32_t *)(v2 + 12); // 0x49f0f
                g9 = v29;
                int32_t v30 = __asm_cvttss2si(*(int32_t *)(v29 + v28)); // 0x49f12
                g4 = v30;
                int32_t result5 = function_27680(g8, (char *)&g129, v30); // 0x49f26
                g4 = result5;
                // 0x49cee
                g6 = v1;
                g10 = v3;
                g8 = v4;
                return result5;
            }
            float80_t v31 = function_27d60(v5, (char *)&g129, 0); // 0x49dfb
            g868 = v31;
            g4 = a1;
            v7 = (float32_t)v31;
            g13++;
            v9 = a1;
            goto lab_0x49cdd;
        }
        case 64: {
            if (a1 != 0) {
                int32_t v32 = *(int32_t *)(v2 + 4); // 0x49d08
                g9 = v32;
                g4 = v32;
                int32_t v33 = *(int32_t *)(v2 + 12) + v32; // 0x49d1a
                g9 = v33;
                int32_t v34 = *(int32_t *)v33; // 0x49d1d
                g4 = v34;
                int32_t v35 = *(int32_t *)(v33 + 4); // 0x49d1f
                g9 = v35;
                int32_t result6 = function_27600(v5, (char *)&g129, v34, v35); // 0x49d35
                g4 = result6;
                // 0x49cee
                g6 = v1;
                g10 = v3;
                g8 = v4;
                return result6;
            }
            // 0x49f30
            v7 = function_27ea0(v5, (char *)&g129, 0, 0);
            g4 = 0;
            v9 = 0;
            goto lab_0x49cdd;
        }
        default: {
            goto lab_0x49cee;
        }
    }
  lab_0x49cd0:
    // 0x49cd0
    v7 = v8;
    g4 = a1;
    v9 = a1;
    goto lab_0x49cdd;
  lab_0x49cdd:
    // 0x49cdd
    g9 = &v7;
    result7 = v9;
  lab_0x49cee:
    // 0x49cee
    g6 = v1;
    g10 = v3;
    g8 = v4;
    return result7;
}

// Address range: 0x49f70 - 0x4a10e
int32_t function_49f70(int32_t a1) {
    int32_t v1 = g8; // 0x49f73
    int32_t v2 = g10; // 0x49f74
    int32_t v3 = g6; // 0x49f75
    g7 = a1;
    g4 = a1 + 52;
    *(int32_t *)a1 = (int32_t)&g187;
    int32_t v4 = g4; // 0x49f85
    g8 = v4;
    int32_t v5 = g7; // 0x49f8a
    g4 = v5 + 148;
    *(int32_t *)(v5 + 4) = (int32_t)&g188;
    *(int32_t *)(g7 + 24) = 0;
    *(int32_t *)(g7 + 28) = 0;
    *(int32_t *)(g7 + 32) = 0;
    *(int32_t *)(g7 + 36) = 0;
    *(int32_t *)(g7 + 40) = 0;
    *(char *)(g7 + 44) = 1;
    *(int32_t *)(g7 + 48) = 0;
    int32_t v6 = g4; // bp-24
    int32_t v7 = g8; // 0x4a0e0
  lab_0x49fc8_2:;
    int32_t v8; // 0x4a0bd
    while (true) {
      lab_0x49fc8:
        // 0x49fc8
        g9 = v7;
        g6 = 24;
        int32_t v9; // 0x4a0e3
        int32_t v10; // 0x4a0e6
        if (v7 % 2 != 0) {
            // 0x4a0e0
            *(char *)v7 = 0;
            v9 = g8 + 1;
            g9 = v9;
            v10 = g6 & -256 | 23;
            g6 = v10;
        } else {
            v10 = 24;
            v9 = v7;
        }
        // 0x49fdb
        int32_t v11; // 0x4a0d5
        int32_t v12; // 0x4a0d8
        if ((v9 & 2) != 0) {
            // 0x4a0d0
            *(int16_t *)v9 = 0;
            v11 = g6 - 2;
            g6 = v11;
            v12 = g9 + 2;
            g9 = v12;
        } else {
            v12 = v9;
            v11 = v10;
        }
        // 0x49fe4
        g4 = 0;
        g10 = v11 & -4;
        *(int32_t *)v12 = 0;
        int32_t v13 = g4 + 4; // 0x49ff2
        g4 = v13;
        int32_t v14 = g9;
        while (v13 < g10) {
            // 0x49feb
            *(int32_t *)(v14 + v13) = 0;
            v13 = g4 + 4;
            g4 = v13;
            v14 = g9;
        }
        int32_t v15 = v14 + v13; // 0x49ff9
        g9 = v15;
        uint32_t v16 = g6; // 0x49ffb
        if ((v16 & 2) != 0) {
            // 0x4a0b8
            *(int16_t *)v15 = 0;
            v8 = g9 + 2;
            g9 = v8;
            int32_t v17 = g6 % 2; // 0x4a0c0
            g6 = v17;
            if (v17 == 0) {
                goto lab_0x4a00d;
            } else {
                goto lab_0x4a0a0;
            }
        } else {
            int32_t v18 = v16 % 2; // 0x4a004
            g6 = v18;
            if (v18 != 0) {
                v8 = v15;
                goto lab_0x4a0a0;
            } else {
                goto lab_0x4a00d;
            }
        }
    }
  lab_0x4a015_2:
    // 0x4a015
    *(int32_t *)(g7 + 148) = 0;
    g9 = 96;
    *(int32_t *)(g8 + 4) = 0;
    *(int32_t *)(g8 + 8) = 0;
    g8 = v4;
    *(int32_t *)(g7 + 160) = 0;
    *(char *)(g7 + 164) = 0;
    *(int32_t *)(g7 + 8) = 0;
    *(int32_t *)(g7 + 12) = 0;
    *(int32_t *)(g7 + 16) = 0;
    *(int32_t *)(g7 + 20) = 0;
    int32_t v19; // 0x4a104
    if (g8 % 2 != 0) {
        // 0x4a100
        *(char *)(g7 + 52) = 0;
        v19 = g8 + 1;
        g8 = v19;
        g9 = g9 & -256 | 95;
    } else {
        // 0x4a015
        v19 = g8;
    }
    // 0x4a06e
    int32_t v20; // 0x4a0f5
    int32_t v21; // 0x4a0f8
    if ((v19 & 2) != 0) {
        // 0x4a0f0
        *(int16_t *)v19 = 0;
        v20 = g9 - 2;
        g9 = v20;
        v21 = g8 + 2;
        g8 = v21;
    } else {
        // 0x4a06e
        v21 = v19;
        v20 = g9;
    }
    // 0x4a076
    g4 = 0;
    int32_t v22 = v20 / 4; // 0x4a07a
    g7 = v22;
    __asm_rep_stosd_memset((char *)v21, 0, v22);
    bool v23; // df
    int32_t v24 = (v23 ? -4 : 4) * v22 + v21; // 0x4a080
    g8 = v24;
    g7 = 0;
    int32_t v25; // 0x4a089
    if ((v20 & 2) != 0) {
        // 0x4a084
        *(int16_t *)v24 = 0;
        v25 = g8 + 2;
        g8 = v25;
    } else {
        v25 = v24;
    }
    int32_t v26 = g9 % 2; // 0x4a08c
    g9 = v26;
    if (v26 != 0) {
        // 0x4a091
        *(char *)v25 = 0;
    }
    // 0x4a094
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
  lab_0x4a00d:;
    int32_t v27 = g8 + 24; // 0x4a00d
    g8 = v27;
    if (v27 == v6) {
        // break -> 0x4a015
        goto lab_0x4a015_2;
    }
    v7 = v27;
    // continue -> 0x49fc8
    goto lab_0x49fc8_2;
  lab_0x4a0a0:
    // 0x4a0a0
    *(char *)v8 = 0;
    int32_t v28 = g8 + 24; // 0x4a0a3
    g8 = v28;
    if (v28 == v6) {
        // break -> 0x4a015
        goto lab_0x4a015_2;
    }
    v7 = v28;
    goto lab_0x49fc8;
}

// Address range: 0x4a110 - 0x4a16a
int32_t function_4a110(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x4a113
    int32_t v2 = g10; // 0x4a114
    int32_t v3 = g6; // 0x4a115
    g6 = 0;
    g8 = a1;
    g4 = a3;
    int32_t * v4 = (int32_t *)(a1 + 36); // 0x4a12a
    int32_t v5 = *v4; // 0x4a12a
    g4 = v5;
    int32_t result; // 0x4a163
    if (v5 < 1) {
        result = 0;
        // 0x4a160
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x4a131
    g10 = 0;
    int32_t v6 = 0; // 0x4a153
    while (true) {
        int32_t v7 = *(int32_t *)(a1 + 24); // 0x4a138
        g4 = v7;
        int32_t v8 = *(int32_t *)(4 * v6 + v7); // 0x4a13b
        g6 = v8;
        if (v8 != 0) {
            int32_t v9 = *(int32_t *)v8 ^ a2; // 0x4a14c
            g4 = v9;
            int32_t v10 = g9 ^ a3 | v9; // 0x4a14f
            g9 = v10;
            if (v10 == 0) {
                result = v8;
                goto lab_0x4a160_2;
            }
        }
        int32_t v11 = v6 + 1; // 0x4a153
        g10 = v11;
        if (*v4 <= v11) {
            // break -> 0x4a15b
            break;
        }
        v6 = v11;
    }
    // 0x4a15b
    g6 = 0;
    result = 0;
  lab_0x4a160_2:
    // 0x4a160
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x4a170 - 0x4a179
int32_t function_4a170(void) {
    int32_t result = function_4a110((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x4a174
    g4 = result;
    return result;
}

// Address range: 0x4a180 - 0x4a1c7
int32_t function_4a180(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x4a183
    int32_t v2 = g10; // 0x4a184
    g10 = 0;
    int32_t v3 = g6; // 0x4a187
    g8 = a1;
    g4 = a3;
    int32_t v4 = 0; // 0x4a1b3
    int32_t result; // 0x4a19a
    while (true) {
        // 0x4a19a
        result = *(int32_t *)(a1 + 8 + 4 * v4);
        g6 = result;
        if (result != 0) {
            int32_t v5 = *(int32_t *)result ^ a2; // 0x4a1ac
            g4 = v5;
            int32_t v6 = g9 ^ a3 | v5; // 0x4a1af
            g9 = v6;
            if (v6 == 0) {
                goto lab_0x4a1bd_2;
            }
        }
        int32_t v7 = v4 + 1; // 0x4a1b3
        g10 = v7;
        if (v4 == 3) {
            // break -> 0x4a1bb
            break;
        }
        v4 = v7;
    }
    // 0x4a1bb
    g6 = 0;
    result = 0;
  lab_0x4a1bd_2:
    // 0x4a1bd
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x4a1d0 - 0x4a22a
int32_t function_4a1d0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x4a1d6
    g6 = a1;
    int32_t v2 = g10; // 0x4a1dc
    g10 = a2;
    int32_t v3 = g8; // 0x4a1e2
    g8 = a3;
    int32_t result = function_4a180(a1, a2, a3); // 0x4a1f3
    g4 = result;
    if (result != 0) {
        // 0x4a1fc
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v4 = g10; // 0x4a210
    g10 = v2;
    int32_t v5 = g8; // 0x4a216
    g8 = v3;
    int32_t v6 = g6; // 0x4a21c
    g6 = v1;
    int32_t result2 = function_4a110(v6, v4, v5); // 0x4a225
    g4 = result2;
    return result2;
}

// Address range: 0x4a230 - 0x4a27e
int32_t function_4a230(int32_t a1) {
    int32_t v1 = g8; // 0x4a233
    int32_t v2 = g10; // 0x4a234
    int32_t v3 = g6; // 0x4a235
    g8 = a1;
    int32_t v4 = *(int32_t *)(a1 + 36); // 0x4a23c
    g9 = v4;
    if (v4 < 1) {
        // 0x4a276
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x4a243
    g6 = 0;
    int32_t v5 = 0; // 0x4a24b
    int32_t v6 = *(int32_t *)(a1 + 24); // 0x4a248
    g4 = v6;
    int32_t v7 = *(int32_t *)(v6 + 4 * v5); // 0x4a24b
    g10 = v7;
    g6 = v5 + 1;
    g4 = function_46760(v7, 1);
    int32_t result = function_46740(g10, 0); // 0x4a26c
    g4 = result;
    int32_t v8 = g8; // 0x4a271
    while (*(int32_t *)(v8 + 36) > g6) {
        // 0x4a248
        v5 = g6;
        v6 = *(int32_t *)(v8 + 24);
        g4 = v6;
        v7 = *(int32_t *)(v6 + 4 * v5);
        g10 = v7;
        g6 = v5 + 1;
        g4 = function_46760(v7, 1);
        result = function_46740(g10, 0);
        g4 = result;
        v8 = g8;
    }
    // 0x4a276
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x4a280 - 0x4a2ba
int32_t function_4a280(int32_t a1) {
    // 0x4a280
    g6 = a1;
    char v1 = *(char *)(a1 + 148); // 0x4a28a
    g882 = v1 == 0;
    g865 = llvm_ctpop_i8(v1) % 2 == 0;
    if (v1 == 0) {
        // bb
        g4 = function_4a380((int32_t)&g870, (int32_t)&g870);
    }
    int128_t v2 = g878; // 0x4a297
    int128_t v3 = __asm_xorps(v2, v2); // 0x4a297
    g878 = v3;
    __asm_ucomiss(v3, *(int32_t *)(g6 + 152));
    if (!g865) {
        // bb8
        g4 = function_4a390();
    }
    // 0x4a2a7
    __asm_ucomiss(v3, *(int32_t *)(g6 + 156));
    if (g865) {
        // bb9
        g4 = function_4a340();
    }
    // 0x4a2b4
    int32_t result; // 0x4a2b4
    if (!g882) {
        // bb10
        result = function_4a340();
        g4 = result;
    } else {
        // 0x4a2b4
        result = g4;
    }
    // 0x4a2ba
    return result;
}

// Address range: 0x4a2d3 - 0x4a2d4
int32_t function_4a2d3(void) {
    // 0x4a2d3
    return g4;
}

// Address range: 0x4a2d8 - 0x4a33c
int32_t function_4a2d8(int32_t a1, int32_t a2) {
    // 0x4a2d8
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x4a2d8
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4a2db
    *(int32_t *)(g6 + 156) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    int32_t v5 = function_26cf0(); // 0x4a2f3
    g4 = v5;
    g6 = v5;
    function_26330(v5);
    g4 = g284;
    g4 = function_37860(g284, v5, 0, 0);
    if (v5 == 0) {
        // bb
        g4 = function_4a380((int32_t)&g870, (int32_t)&g870);
    }
    // 0x4a32f
    *(int32_t *)(g5 + 8) = v5;
    g6 = a1;
    g5 = a2;
    int32_t result = function_28600((int32_t)&g870); // 0x4a337
    g4 = result;
    return result;
}

// Address range: 0x4a340 - 0x4a341
int32_t function_4a340(void) {
    // 0x4a340
    return g4;
}

// Address range: 0x4a344 - 0x4a34a
int32_t function_4a344(void) {
    // 0x4a344
    return g4;
}

// Address range: 0x4a380 - 0x4a386
int32_t function_4a380(int32_t a1, int32_t a2) {
    int32_t v1 = g11 + 52; // 0x4a380
    g882 = v1 == 0;
    g865 = llvm_ctpop_i8((char)v1) % 2 == 0;
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x4a390 - 0x4a39b
int32_t function_4a390(void) {
    // 0x4a390
    return g4;
}

// Address range: 0x4a3a4 - 0x4a3aa
int32_t function_4a3a4(void) {
    // 0x4a3a4
    return g4;
}

// Address range: 0x4a3aa - 0x4a3cd
int32_t function_4a3aa(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 156)); // 0x4a3aa
    int32_t v2; // ebp
    float80_t v3; // st7
    *(float64_t *)(v2 - 16) = (float64_t)v3;
    int128_t v4 = __asm_addss(v1, *(int32_t *)(g4 + 44)); // 0x4a3b5
    int128_t v5 = __asm_cvtps2pd(__asm_unpcklps(v4, v4)); // 0x4a3bd
    __asm_ucomisd_1652(v5, *(int64_t *)(v2 - 16));
    bool v6; // cf
    bool v7; // zf
    if (v6 || v7) {
        // bb
        g4 = function_4a2d3();
    }
    int32_t result = function_4a380((int32_t)&g870, (int32_t)&g870); // 0x4a3cb
    g4 = result;
    return result;
}

// Address range: 0x4a3cd - 0x4a40a
int32_t function_4a3cd(void) {
    // 0x4a3cd
    int32_t v1; // ebp
    *(int32_t *)(v1 - 20) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 20); // 0x4a3d8
    g4 = v2;
    int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x4a3de
    g4 = v3;
    int32_t v4; // 0x4a3f2
    if (g6 != 0) {
        // 0x4a3e7
        *(int32_t *)(g5 - 20) = v3;
        g4 = function_28600(g6);
        v4 = *(int32_t *)(g5 - 20);
        g4 = v4;
    } else {
        v4 = v3;
    }
    // 0x4a3f5
    function_7ab57(v4, (int32_t)&g870);
    g4 = 1;
    return 1;
}

// Address range: 0x4a410 - 0x4a415
int32_t function_4a410(void) {
    // 0x4a410
    return g4;
}

// Address range: 0x4a420 - 0x4a4ea
int32_t function_4a420(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x4a423
    int32_t v3 = g6; // 0x4a424
    g4 = a1;
    g7 = (int32_t)*(char *)(a1 + 44);
    g9 = *(int32_t *)a1;
    int32_t result = (int32_t)g450; // 0x4a43a
    g4 = result;
    g9 = *(int32_t *)g450;
    if (g450 == NULL) {
        // 0x4a47f
        g6 = v3;
        g10 = v2;
        return result;
    }
    // 0x4a44b
    g9 = *(int32_t *)g450;
    int32_t v4 = function_27c00(result, "system/network", (int32_t *)"LIVE"); // 0x4a466
    g4 = v4;
    int32_t result2 = function_2cc30(v4, "LIVE"); // 0x4a476
    g4 = result2;
    if (result2 != 0) {
        // 0x4a47f
        g6 = v3;
        g10 = v2;
        return result2;
    }
    // 0x4a490
    g4 = (int32_t)g450;
    g9 = *(int32_t *)g450;
    g4 = g297;
    g10 = *(int32_t *)(g297 + 8);
    int32_t v5 = function_26cf0(); // 0x4a4ae
    g4 = v5;
    g6 = v5;
    function_27a20(v5, "OnEngineDisconnectReason", "reason", "Lost connection to LIVE");
    g4 = g297;
    g6 = v3;
    g10 = v2;
    return g297;
}

// Address range: 0x4a500 - 0x4a513
int32_t function_4a500(int32_t a1) {
    // 0x4a500
    g6 = a1;
    return g4;
}

// Address range: 0x4a517 - 0x4a5af
int32_t function_4a517(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x367adbb5); // 0x4a517
    int32_t v2 = *v1; // 0x4a517
    *v1 = v2 - 1;
    int32_t v3; // 0x4a54e
    if (v2 > 1) {
        // 0x4a51f
        g8 = 0;
        int32_t v4 = g6; // 0x4a52f
        int32_t v5 = 0; // 0x4a528
        int32_t v6; // 0x4a549
        while (true) {
            int32_t v7 = 4 * v5; // 0x4a528
            g10 = v7;
            int32_t v8 = *(int32_t *)(v4 + 24) + v7; // 0x4a52f
            g10 = v8;
            int32_t * v9 = (int32_t *)v8; // 0x4a532
            int32_t v10 = *v9; // 0x4a532
            g4 = v10;
            if (v10 != 0) {
                // 0x4a538
                g9 = *(int32_t *)v10;
            }
            // 0x4a540
            *v9 = 0;
            int32_t v11 = g8 + 1; // 0x4a546
            g8 = v11;
            v6 = g6;
            if (*(int32_t *)(v6 + 36) <= v11) {
                // break -> 0x4a54e
                break;
            }
            v4 = v6;
            v5 = v11;
        }
        v3 = v6;
    } else {
        // 0x4a517
        v3 = g6;
    }
    // 0x4a54e
    *(int32_t *)(v3 + 36) = 0;
    g10 = 0;
    int32_t v12 = 0; // 0x4a567
    while (true) {
        int32_t * v13 = (int32_t *)(g6 + 8 + 4 * v12); // 0x4a557
        int32_t v14 = *v13; // 0x4a557
        g4 = v14;
        if (v14 != 0) {
            // 0x4a55f
            g9 = *(int32_t *)v14;
        }
        // 0x4a567
        *v13 = 0;
        int32_t v15 = g10; // 0x4a56f
        int32_t v16 = v15 + 1; // 0x4a56f
        g10 = v16;
        if (v15 == 3) {
            // break -> 0x4a577
            break;
        }
        v12 = v16;
    }
    int32_t v17 = function_1bc00((int32_t)&g851); // 0x4a57e
    g4 = v17;
    g10 = v17;
    function_47180(v17, 0);
    int32_t v18 = g6; // 0x4a595
    g4 = v18;
    *(int32_t *)(v18 + 8) = g10;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x4a5b0 - 0x4a5b1
int32_t function_4a5b0(void) {
    // 0x4a5b0
    return g4;
}

// Address range: 0x4a5d0 - 0x4a610
int32_t function_4a5d0(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x4a5d6
    g10 = a1;
    int32_t v2 = g8; // 0x4a5dc
    g8 = a2;
    int32_t v3 = g6; // 0x4a5e2
    g6 = 0;
    int32_t v4 = 0; // 0x4a5e7
    int32_t result; // 0x4a5f6
    while (true) {
        int32_t v5 = *(int32_t *)(a1 + 8 + 4 * v4); // 0x4a5e7
        g4 = v5;
        int32_t v6; // 0x4a5fb
        if (v5 != 0) {
            // 0x4a5ef
            result = function_46bd0(v5, g8);
            g4 = result;
            v6 = g6;
        } else {
            result = 0;
            v6 = v4;
        }
        int32_t v7 = v6 + 1; // 0x4a5fb
        g6 = v7;
        if (v6 == 3) {
            // break -> 0x4a603
            break;
        }
        // 0x4a5fb
        v4 = v7;
        a1 = g10;
    }
    // 0x4a603
    g6 = v3;
    g10 = v1;
    g8 = v2;
    return result;
}

// Address range: 0x4a610 - 0x4a61f
int32_t function_4a610(int32_t a1) {
    // 0x4a610
    g4 = a1;
    *(char *)(a1 + 164) = 1;
    return g4;
}

// Address range: 0x4a620 - 0x4a652
int32_t function_4a620(int32_t result) {
    // 0x4a620
    g4 = result;
    char * v1 = (char *)(result + 164); // 0x4a626
    if (*v1 == 0) {
        // 0x4a62f
        return result;
    }
    // 0x4a638
    *v1 = 0;
    g4 = g292;
    int32_t v2 = *(int32_t *)(g292 + 20); // 0x4a644
    g4 = v2;
    int32_t v3 = *(int32_t *)v2; // 0x4a647
    g9 = v3;
    int32_t result2 = *(int32_t *)(v3 + 40); // 0x4a64d
    g4 = result2;
    return result2;
}

// Address range: 0x4a660 - 0x4a6c0
int32_t function_4a660(int32_t a1) {
    int32_t v1 = g6; // 0x4a663
    int32_t result = (int32_t)g450; // 0x4a667
    g4 = result;
    g6 = a1;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if ((result & 4) != 0) {
        // 0x4a6a0
        g6 = v1;
        return result;
    }
    // 0x4a683
    int32_t v2; // 0x4a68c
    if (*(char *)(a1 + 148) == 0) {
        int32_t * v3 = (int32_t *)(a1 + 160); // 0x4a6b0
        *v3 = *v3 + 1;
        *(char *)(g6 + 148) = 1;
        v2 = g6;
    } else {
        v2 = a1;
    }
    // 0x4a68c
    *(int32_t *)(v2 + 152) = 0;
    *(int32_t *)(g6 + 156) = 0;
    // 0x4a6a0
    g6 = v1;
    return g4;
}

// Address range: 0x4a6c0 - 0x4a71a
int32_t function_4a6c0(int32_t a1, int32_t a2) {
    int32_t result = (int32_t)g450; // 0x4a6c6
    g4 = result;
    int32_t v1 = g6; // 0x4a6cb
    int32_t v2 = g10; // 0x4a6ce
    g6 = a1;
    g10 = a2;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if ((result & 4) != 0) {
        // 0x4a710
        g6 = v1;
        g10 = v2;
        return result;
    }
    int32_t result2 = a1 + 48 + 24 * a2; // 0x4a6ee
    g4 = result2;
    char * v3 = (char *)(result2 + 4); // 0x4a6f2
    if (*v3 != 0) {
        // 0x4a710
        g6 = v1;
        g10 = v2;
        return result2;
    }
    // 0x4a6f8
    g9 = g292;
    int32_t v4 = *(int32_t *)(g292 + 8); // 0x4a6fe
    g10 = v4;
    int32_t result3; // 0x4a719
    if (v4 != 0) {
        // 0x4a705
        *v3 = 1;
        int32_t * v5 = (int32_t *)(g6 + 160); // 0x4a709
        *v5 = *v5 + 1;
        result3 = g4;
    } else {
        result3 = result2;
    }
    // 0x4a710
    g6 = v1;
    g10 = v2;
    return result3;
}

// Address range: 0x4a720 - 0x4a7b1
int32_t function_4a720(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g8; // 0x4a723
    int32_t v3 = g10; // 0x4a724
    int32_t v4 = g6; // 0x4a725
    g6 = a1;
    int32_t v5 = *(int32_t *)(a1 + 36); // 0x4a72c
    g8 = v5;
    if (v5 < 1) {
        // 0x4a7a9
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return g4;
    }
    // 0x4a733
    g7 = a2;
    g10 = -2;
    g8 = 0;
    uint32_t v6 = a2 & (int32_t)&g862 & 31; // 0x4a73d
    if (v6 != 0) {
        // bb
        g10 = 0xfffffffe >> 32 - v6 | -2 << v6;
    }
    int32_t v7 = a1 + 24; // 0x4a73f
    g7 = v7;
    int32_t v8 = 0; // 0x4a77e
    int32_t result; // 0x4a753
    while (true) {
        int32_t v9 = *(int32_t *)(a1 + 24); // 0x4a77b
        g4 = v9;
        int32_t v10 = *(int32_t *)(v9 + 4 * v8); // 0x4a77e
        g9 = v10;
        int32_t v11 = function_46750(v10); // 0x4a787
        g9 = v10;
        int32_t v12 = g10 & v11; // 0x4a78f
        g4 = v12;
        if (v12 == 0) {
            // 0x4a750
            g7 = v7;
            int32_t v13 = g8; // 0x4a753
            result = v13 - 1;
            g4 = result;
            g4 = function_4b8e0(v7, v13);
            g9 = v10;
            g7 = *(int32_t *)v10;
            g4 = result;
            g8 = v13;
            int32_t v14 = g6; // 0x4a776
            if (*(int32_t *)(v14 + 36) <= v13) {
                // break -> 0x4a7a9
                break;
            }
            v8 = v13;
            a1 = v14;
        } else {
            // 0x4a793
            function_46740(v10, v12);
            int32_t v15 = g8; // 0x4a79f
            g4 = v15;
            int32_t v16 = v15 + 1; // 0x4a7a1
            g8 = v16;
            int32_t v17 = g6; // 0x4a7a4
            if (*(int32_t *)(v17 + 36) <= v16) {
                result = v15;
                // break -> 0x4a7a9
                break;
            }
            v8 = v16;
            a1 = v17;
        }
    }
    // 0x4a7a9
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x4a7c0 - 0x4a836
int32_t function_4a7c0(int32_t a1) {
    int32_t v1 = g5; // 0x4a7c0
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x4a7c3
    int32_t v4 = g10; // 0x4a7c4
    int32_t v5 = g6; // 0x4a7c5
    g8 = a1;
    int32_t result = *(int32_t *)(a1 + 36); // 0x4a7cc
    g4 = result;
    if (result < 1) {
        // 0x4a82e
        g6 = v5;
        g10 = v4;
        g8 = v3;
        g5 = v1;
        return result;
    }
    int32_t v6 = a1 + 24; // 0x4a7d3
    g4 = v6;
    g6 = 0;
    int32_t v7 = 0; // 0x4a80b
  lab_0x4a808_2:;
    int32_t result2; // 0x4a81d
    while (true) {
      lab_0x4a808:;
        int32_t v8 = *(int32_t *)(a1 + 24); // 0x4a808
        g4 = v8;
        int32_t v9 = *(int32_t *)(v8 + 4 * v7); // 0x4a80b
        g10 = v9;
        int32_t v10 = function_46770(v9); // 0x4a811
        g4 = v10;
        if ((char)v10 != 0) {
            goto lab_0x4a7e0;
        } else {
            // 0x4a81a
            result2 = function_46750(g10);
            g4 = result2;
            if (result2 == 0) {
                goto lab_0x4a7e0;
            } else {
                int32_t v11 = g6 + 1; // 0x4a826
                g6 = v11;
                int32_t v12 = g8; // 0x4a829
                if (*(int32_t *)(v12 + 36) <= v11) {
                    // break -> 0x4a82e
                    break;
                }
                v7 = v11;
                a1 = v12;
                goto lab_0x4a808;
            }
        }
    }
  lab_0x4a82e:
    // 0x4a82e
    g6 = v5;
    g10 = v4;
    g8 = v3;
    g5 = v2;
    return result2;
  lab_0x4a7e0:;
    int32_t v13 = g6; // 0x4a7e0
    g4 = v6;
    g4 = function_4b8e0(v6, v13);
    int32_t v14 = *(int32_t *)g10; // 0x4a7f5
    g4 = v14;
    g6 = v13;
    int32_t v15 = g8; // 0x4a803
    if (*(int32_t *)(v15 + 36) <= v13) {
        result2 = v14;
        // break -> 0x4a82e
        goto lab_0x4a82e;
    }
    v7 = v13;
    a1 = v15;
    // continue -> 0x4a808
    goto lab_0x4a808_2;
}

// Address range: 0x4a840 - 0x4a841
int32_t function_4a840(int32_t a1) {
    // 0x4a840
    return g4;
}

// Address range: 0x4a890 - 0x4a89e
int32_t function_4a890(void) {
    unsigned char v1 = *(char *)&g10; // 0x4a890
    int32_t v2 = g4 & -256 | (int32_t)v1; // 0x4a890
    g4 = v2;
    bool v3; // df
    g10 += (v3 ? -1 : 1);
    char * v4 = (char *)v2; // 0x4a891
    *v4 = *v4 + v1;
    int32_t v5 = g7; // 0x4a893
    char * v6 = (char *)(v5 - 0x3e3fce2f); // 0x4a893
    *v6 = *v6 + (char)v5;
    int32_t result = function_2c79ea0(); // 0x4a899
    g4 = result;
    return result;
}

// Address range: 0x4a920 - 0x4a925
int32_t function_4a920(void) {
    int32_t result = *(int32_t *)(g6 + 24); // 0x4a920
    g4 = result;
    return result;
}

// Address range: 0x4a928 - 0x4a950
int32_t function_4a928(void) {
    int32_t v1 = g6; // 0x4a928
    g8 = v1 + 53;
    *(char *)(v1 + 52) = 0;
    g9 = g9 & -256 | 95;
    *(int16_t *)g8 = 0;
    g9 -= 2;
    g8 += 2;
    return g4;
}

// Address range: 0x4a9ad - 0x4a9b0
int32_t function_4a9ad(void) {
    // 0x4a9ad
    return g4;
}

// Address range: 0x4a9b0 - 0x4a9cf
int32_t function_4a9b0(int32_t a1) {
    int32_t v1 = g6; // 0x4a9b3
    g6 = a1;
    g4 = function_4a840(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x4a9ca
    g4 = result;
    return result;
}

// Address range: 0x4a9d0 - 0x4ad05
int32_t function_4a9d0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x4a9e9
    g10 = a2;
    int32_t v3 = g6; // 0x4a9ef
    g6 = a1 - 4;
    int32_t v4 = g8; // 0x4a9f5
    int32_t v5 = function_25190(a2); // 0x4a9fb
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_2cc30(v5, "OnNetLanConnectionlessPacket"); // 0x4aa0d
    g4 = v6;
    int32_t result2; // 0x4aa2f
    if (v6 != 0) {
        int32_t v7 = function_2cc30(g8, "OnSysSigninChange"); // 0x4ac6b
        g4 = v7;
        if (v7 != 0) {
            int32_t v8 = function_2cc30(g8, "OnProfilesChanged"); // 0x4ac83
            g4 = v8;
            if (v8 == 0) {
                // bb283
                g4 = function_4ade0();
            }
            int32_t v9 = function_2cc30(g8, "OnSysProfileSettingsChanged"); // 0x4ac9b
            g4 = v9;
            if (v9 != 0) {
                // bb284
                g4 = function_4ad68();
            }
            // 0x4aca8
            g8 = 0;
            int32_t v10 = *(int32_t *)(g6 + 8); // 0x4acaa
            g4 = v10;
            if (v10 == 0) {
                // bb285
                g4 = function_4ad16();
            }
            // 0x4acb2
            int32_t v11; // bp-340
            int32_t v12 = &v11; // 0x4acb2
            g7 = v12;
            function_1e010(v12, "user%d");
            int32_t v13; // bp-335
            g4 = &v13;
            int32_t v14 = function_27fc0(g10, (char *)&v13, 0); // 0x4ace1
            g4 = v14;
            if (v14 == 0) {
                // bb288
                g4 = function_4ad16();
            }
            int32_t result = *(int32_t *)(g6 + 8 + 4 * g8); // 0x4acea
            g4 = result;
            g9 = *(int32_t *)result;
            return result;
        }
        result2 = 0;
    } else {
        // 0x4aa1a
        if (*(char *)(g6 + 148) != 0) {
            int32_t v15 = function_35b40(); // 0x4aa30
            g4 = v15;
            if ((char)v15 == 0) {
                int32_t v16 = function_27340(g10, (int32_t)"GameDetailsPlayer", 0); // 0x4aa4c
                g4 = v16;
                g8 = v16;
                if (v16 != 0) {
                    int32_t v17 = function_27ea0(v16, "player/xuidOnline", 0, 0); // 0x4aa72
                    g4 = v17;
                    int32_t v18 = g9; // 0x4aa77
                    int32_t v19 = v18 | v17; // 0x4aa7d
                    g9 = v19;
                    if (v19 == 0) {
                        // bb
                        g4 = function_4ad28();
                    }
                    // 0x4aa8b
                    g10 = 0;
                    int32_t v20 = 0; // 0x4aab0
                    while (true) {
                        int32_t v21 = *(int32_t *)(g6 + 8 + 4 * v20); // 0x4aa8d
                        g4 = v21;
                        if (v21 != 0) {
                            int32_t v22 = v21 ^ v17; // 0x4aaa2
                            g4 = v22;
                            int32_t v23 = *(int32_t *)v21 ^ v18 | v22; // 0x4aaa8
                            g9 = v23;
                            if (v23 == 0) {
                                result2 = v22;
                                goto lab_0x4aa23_2;
                            }
                        }
                        int32_t v24 = v20 + 1; // 0x4aab0
                        g10 = v24;
                        if (v20 == 3) {
                            // break -> 0x4aab8
                            break;
                        }
                        v20 = v24;
                    }
                    int32_t v25 = function_27e60(g8, (int32_t)"binary/ptr", 0); // 0x4aae0
                    g4 = v25;
                    function_27fc0(g8, "binary/size", 0);
                    int32_t v26 = (int32_t)g450; // 0x4ab03
                    g7 = &v25;
                    g9 = v18;
                    g10 = v26;
                    g4 = v17;
                    int32_t v27 = function_4a110(g6, v17, v18); // 0x4ab38
                    g4 = v27;
                    int32_t v28; // 0x4ab42
                    if (v27 == 0) {
                        // bb278
                        v28 = function_4ae7e();
                        g4 = v28;
                    } else {
                        v28 = v27;
                    }
                    // 0x4ab48
                    function_46760(v28, 0);
                    g4 = v27;
                    g4 = function_46740(v27, -1);
                    if (g450 != NULL) {
                        int32_t v29 = function_27340(g8, (int32_t)"options", 0); // 0x4ab86
                        g4 = v29;
                        g6 = v29;
                        if (v29 != 0) {
                            int32_t v30 = function_27340(v26, (int32_t)"options", 1); // 0x4aba4
                            g4 = v30;
                            g4 = function_2a090(v30, g6, 1);
                        }
                        int32_t v31 = function_27340(g8, (int32_t)"player", 0); // 0x4abd0
                        g4 = v31;
                        g6 = v31;
                        if (v31 != 0) {
                            int32_t v32 = function_27340(v26, (int32_t)"player", 1); // 0x4abee
                            g4 = v32;
                            g4 = function_2a090(v32, g6, 1);
                        }
                    }
                    // 0x4ac07
                    g4 = 0;
                    *(int32_t *)(g5 - 68) = 0;
                    int32_t v33 = g4 + 4; // 0x4ac11
                    g4 = v33;
                    while (v33 < 28) {
                        // 0x4ac09
                        *(int32_t *)(v33 - 68 + g5) = 0;
                        v33 = g4 + 4;
                        g4 = v33;
                    }
                    int32_t v34 = function_27c00(g8, "player/name", (int32_t *)&g129); // bp-72
                    g4 = v27;
                    int32_t v35 = &v34; // 0x4ac37
                    g9 = v35;
                    int32_t v36 = function_47c20(v27, v35); // 0x4ac44
                    g4 = v36;
                    if (g450 != NULL) {
                        int32_t v37 = function_28600(v26); // 0x4ac54
                        g4 = v37;
                        result2 = v37;
                    } else {
                        result2 = v36;
                    }
                } else {
                    result2 = 0;
                }
            } else {
                result2 = v15;
            }
        } else {
            result2 = v6;
        }
    }
    goto lab_0x4aa23_2;
  lab_0x4aa23_2:
    // 0x4aa23
    g6 = v3;
    g10 = v2;
    g8 = v4;
    return result2;
}

// Address range: 0x4ad16 - 0x4ad23
int32_t function_4ad16(void) {
    // 0x4ad16
    g8++;
    return g4;
}

// Address range: 0x4ad28 - 0x4ad61
int32_t function_4ad28(void) {
    // 0x4ad28
    g4 = function_27ea0(g8, "player/xuid", 0, 0);
    *(int32_t *)(g5 - 352) = g9;
    int32_t v1 = g4; // 0x4ad4e
    g9 |= v1;
    *(int32_t *)(g5 - 348) = v1;
    return g4;
}

// Address range: 0x4ad68 - 0x4add8
int32_t function_4ad68(void) {
    int32_t v1 = function_2cc30(g8, "OnProfilesWriteOpportunity"); // 0x4ad73
    g4 = v1;
    if (v1 != 0) {
        // bb
        g4 = function_4aded();
    }
    int32_t v2 = function_27c00(g10, "reason", (int32_t *)&g129); // 0x4ad8f
    g4 = v2;
    g10 = v2;
    int32_t v3 = function_2cc30((int32_t)"checkpoint", (char *)v2); // 0x4ada1
    g4 = v3;
    if (v3 == 0) {
        // bb13
        g4 = function_4af91();
    }
    int32_t v4 = function_2cc30((int32_t)"sessionstart", (char *)g10); // 0x4adb9
    g4 = v4;
    g9 = 2;
    int32_t v5; // 0x4adcb
    if (v4 != 0) {
        // bb14
        g4 = function_4af9b();
        v5 = g9;
    } else {
        v5 = 2;
    }
    int32_t result = function_46640(v5); // 0x4adce
    g4 = result;
    return result;
}

// Address range: 0x4ade0 - 0x4aded
int32_t function_4ade0(void) {
    int32_t result = function_4a500(g6); // 0x4ade3
    g4 = result;
    return result;
}

// Address range: 0x4aded - 0x4ae7e
int32_t function_4aded(void) {
    int32_t v1 = function_2cc30(g8, "Client::CmdKeyValues"); // 0x4adf8
    g4 = v1;
    if (v1 != 0) {
        // bb
        g4 = function_4aee4();
    }
    int32_t v2 = function_26190(g10); // 0x4ae08
    g4 = v2;
    g8 = v2;
    g10 = function_27fc0(g10, "slot", 0);
    int32_t result = g6; // 0x4ae31
    g4 = result;
    int32_t v3 = function_25190(g8); // 0x4ae42
    g4 = v3;
    *(int32_t *)(g5 - 348) = v3;
    int32_t v4 = function_2cc30((int32_t)"write_awards", (char *)g4); // 0x4ae58
    g4 = v4;
    if (v4 != 0) {
        // bb11
        g4 = function_4b014();
    }
    if (result == 0) {
        // bb12
        g4 = function_4b1b0();
    }
    // 0x4ae6d
    g4 = result;
    return result;
}

// Address range: 0x4ae7e - 0x4aee4
int32_t function_4ae7e(void) {
    int32_t v1 = function_1bc00((int32_t)&g59); // 0x4ae85
    g4 = v1;
    *(int32_t *)(g5 - 356) = v1;
    int32_t v2 = g5; // 0x4ae90
    int32_t v3 = *(int32_t *)(v2 - 348); // 0x4ae90
    g4 = v3;
    int32_t v4 = *(int32_t *)(v2 - 352); // 0x4ae96
    g9 = v4;
    int32_t v5 = *(int32_t *)(v2 - 356); // 0x4aea8
    g4 = v5;
    g4 = function_47e70(v5, v3, v4, 0);
    *(int32_t *)(g5 - 28) = *(int32_t *)(g5 - 356);
    int32_t v6 = g5 - 28; // 0x4aec3
    g4 = v6;
    int32_t v7 = g6; // 0x4aeca
    int32_t v8 = *(int32_t *)(v7 + 36); // 0x4aeca
    g4 = v8;
    int32_t v9 = v7 + 24; // 0x4aecd
    g6 = v9;
    g4 = function_4ba10(v9, v8, v6);
    int32_t result = *(int32_t *)(g5 - 28); // 0x4aedc
    g4 = result;
    return result;
}

// Address range: 0x4aee4 - 0x4af91
int32_t function_4aee4(void) {
    // 0x4aee4
    function_2cc30(g8, "OnProfileLeaderboardData");
    int32_t v1 = (int32_t)g283; // 0x4af01
    g4 = v1;
    g9 = *(int32_t *)g283;
    g4 = v1;
    g9 = *(int32_t *)g283;
    g6 = v1;
    g4 = v1;
    g9 = *(int32_t *)g283;
    int32_t v2 = function_26d60(g10); // 0x4af47
    g4 = v2;
    g10 = v2;
    function_262d0(v2);
    int32_t result = (int32_t)g283; // 0x4af63
    g9 = result;
    g4 = result;
    g9 = *(int32_t *)g283;
    return result;
}

// Address range: 0x4af91 - 0x4af9b
int32_t function_4af91(void) {
    // 0x4af91
    g9 = 3;
    return g4;
}

// Address range: 0x4af9b - 0x4b014
int32_t function_4af9b(void) {
    // 0x4af9b
    g4 = function_2cc30((int32_t)"sessionend", (char *)g10);
    g9 = 4;
    g4 = function_2cc30((int32_t)"settings", (char *)g10);
    g9 = 1;
    g4 = function_2cc30((int32_t)"deactivation", (char *)g10);
    g10 = 0;
    int32_t v1 = 0; // 0x4afef
    while (true) {
        int32_t v2 = *(int32_t *)(g6 + 8 + 4 * v1); // 0x4afef
        g4 = v2;
        int32_t v3; // 0x4afff
        if (v2 != 0) {
            // 0x4aff7
            g4 = function_46ac0(v2);
            v3 = g10;
        } else {
            v3 = v1;
        }
        int32_t v4 = v3 + 1; // 0x4afff
        g10 = v4;
        if (v3 == 3) {
            // break -> 0x4b007
            break;
        }
        v1 = v4;
    }
    int32_t result = function_4a620(g6); // 0x4b00a
    g4 = result;
    return result;
}

// Address range: 0x4b014 - 0x4b156
int32_t function_4b014(void) {
    int32_t v1 = *(int32_t *)(g5 - 348); // 0x4b014
    g4 = v1;
    int32_t v2 = function_2cc30((int32_t)"read_awards", (char *)v1); // 0x4b025
    g4 = v2;
    if (v2 == 0) {
        int32_t v3 = function_26d60(g8); // 0x4b031
        g4 = v3;
        g8 = v3;
        if (g6 == 0) {
            // bb
            g4 = function_4b383();
        }
        int32_t result = (int32_t)g283; // 0x4b051
        g4 = result;
        g9 = *(int32_t *)g283;
        g6 = result;
        g4 = result;
        g9 = *(int32_t *)g283;
        g4 = result;
        g9 = *(int32_t *)g283;
        return result;
    }
    int32_t v4 = *(int32_t *)(g5 - 348); // 0x4b094
    g4 = v4;
    int32_t v5 = function_2cc30((int32_t)"write_stats", (char *)v4); // 0x4b0a5
    g4 = v5;
    if (v5 != 0) {
        // bb17
        g4 = function_4b1c5();
    }
    // 0x4b0b2
    if (g6 == 0) {
        // bb18
        g4 = function_4b3aa();
    }
    int32_t v6 = (int32_t)g450; // 0x4b0ba
    g4 = v6;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    *(int32_t *)(g5 - 352) = v6;
    int32_t v7 = function_261f0(g8); // 0x4b0d8
    g4 = v7;
    g10 = v7;
    int32_t v8 = function_25190(v7); // 0x4b0ea
    g4 = v8;
    *(int32_t *)(g5 - 348) = v8;
    if (v8 == 0) {
        // bb19
        g4 = function_4b15b();
    }
    int32_t v9 = g5; // 0x4b0f9
    int32_t * v10 = (int32_t *)(v9 - 352); // 0x4b0f9
    int32_t v11 = *v10; // 0x4b0f9
    g4 = v11;
    int32_t result2; // 0x4b139
    if (v11 == 0) {
        // 0x4b139
        result2 = g6;
        g4 = result2;
        g9 = *(int32_t *)(v9 - 348);
        return result2;
    }
    int32_t v12 = *v10; // 0x4b103
    g9 = v12;
    int32_t v13 = *(int32_t *)v12; // 0x4b109
    g4 = v13;
    g8 = v12;
    if (v13 == 0) {
        // 0x4b139
        result2 = g6;
        g4 = result2;
        g9 = *(int32_t *)(v9 - 348);
        return result2;
    }
    while (true) {
        int32_t v14 = *(int32_t *)(g5 - 348); // 0x4b11e
        g7 = v14;
        int32_t v15 = function_2cc30(v13, (char *)v14); // 0x4b12b
        g4 = v15;
        if (v15 == 0) {
            // bb20
            g4 = function_4b172();
        }
        int32_t v16 = g8 + 16; // 0x4b134
        g8 = v16;
        if (v16 == 0) {
            // break -> 0x4b139
            break;
        }
        int32_t v17 = *(int32_t *)v16; // 0x4b118
        g4 = v17;
        if (v17 == 0) {
            // break -> 0x4b139
            break;
        }
        // 0x4b118
        v13 = v17;
    }
    // 0x4b139
    result2 = g6;
    g4 = result2;
    g9 = *(int32_t *)(g5 - 348);
    return result2;
}

// Address range: 0x4b15b - 0x4b172
int32_t function_4b15b(void) {
    int32_t result = function_26220(g10); // 0x4b15e
    g4 = result;
    g10 = result;
    return result;
}

// Address range: 0x4b172 - 0x4b197
int32_t function_4b172(void) {
    int32_t v1 = g8; // 0x4b172
    g9 = v1;
    g4 = g6;
    *(int32_t *)(g5 - 368) = v1;
    g9 = *(int32_t *)(g5 - 368);
    return g4;
}

// Address range: 0x4b19c - 0x4b1b0
int32_t function_4b19c(void) {
    // 0x4b19c
    g7 = g8;
    g9 = g6;
    g4 = g10;
    g4 = function_49c80(0);
    int32_t result = function_4b15b(); // 0x4b1ae
    g4 = result;
    return result;
}

// Address range: 0x4b1b0 - 0x4b1bb
int32_t function_4b1b0(void) {
    // 0x4b1b0
    return g4;
}

// Address range: 0x4b1c0 - 0x4b1c5
int32_t function_4b1c0(void) {
    // 0x4b1c0
    return g4;
}

// Address range: 0x4b1c5 - 0x4b2b6
int32_t function_4b1c5(void) {
    int32_t v1 = *(int32_t *)(g5 - 348); // 0x4b1c5
    g4 = v1;
    int32_t v2 = function_2cc30((int32_t)"read_stats", (char *)v1); // 0x4b1d6
    g4 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_4b350();
    }
    int32_t v3 = function_26d60(g8); // 0x4b1e6
    g4 = v3;
    *(int32_t *)(g5 - 364) = v3;
    if (g6 == 0) {
        // bb14
        g4 = function_4b2f2();
    }
    int32_t v4 = (int32_t)g450; // 0x4b1f9
    g4 = v4;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    *(int32_t *)(g5 - 352) = v4;
    int32_t v5 = *(int32_t *)(g5 - 364); // 0x4b214
    g4 = v5;
    int32_t v6 = function_261f0(v5); // 0x4b21d
    g4 = v6;
    *(int32_t *)(g5 - 348) = v6;
    int32_t v7 = g5; // 0x4b228
    int32_t v8; // 0x4b235
    if (*(int32_t *)(v7 - 348) == 0) {
        // bb15
        g4 = function_4b302();
        v8 = g5;
    } else {
        v8 = v7;
    }
    int32_t v9 = *(int32_t *)(v8 - 348); // 0x4b235
    g4 = v9;
    int32_t v10 = function_25190(v9); // 0x4b23e
    g4 = v10;
    *(int32_t *)(g5 - 356) = v10;
    if (v10 == 0) {
        // bb16
        g4 = function_4b2bb();
    }
    int32_t v11 = g5; // 0x4b24d
    int32_t v12 = *(int32_t *)(v11 - 352); // 0x4b24d
    int32_t v13; // 0x4b2a1
    if (v12 != 0) {
        // 0x4b256
        g9 = v12;
        int32_t v14 = *(int32_t *)v12; // 0x4b25c
        g4 = v14;
        g8 = v12;
        if (v14 != 0) {
            // 0x4b264
            *(int32_t *)(v11 - 360) = g6;
            int32_t v15 = *(int32_t *)(g5 - 356); // 0x4b26a
            g6 = v15;
            int32_t v16 = g4; // 0x4b282
            while (true) {
                int32_t v17 = function_2cc30(v16, (char *)v15); // 0x4b285
                g4 = v17;
                if (v17 == 0) {
                    // bb17
                    g4 = function_4b2d4();
                }
                int32_t v18 = g8 + 16; // 0x4b28e
                g8 = v18;
                if (v18 == 0) {
                    // break -> 0x4b293
                    break;
                }
                int32_t v19 = *(int32_t *)v18; // 0x4b278
                g4 = v19;
                if (v19 == 0) {
                    // break -> 0x4b293
                    break;
                }
                // 0x4b278
                v16 = v19;
                v15 = g6;
            }
            // 0x4b293
            g6 = *(int32_t *)(g5 - 360);
            v13 = g5;
        } else {
            v13 = v11;
        }
    } else {
        v13 = v11;
    }
    int32_t result = *(int32_t *)g6; // 0x4b299
    g4 = result;
    g7 = *(int32_t *)(v13 - 356);
    return result;
}

// Address range: 0x4b2bb - 0x4b2d4
int32_t function_4b2bb(void) {
    int32_t v1 = *(int32_t *)(g5 - 348); // 0x4b2bb
    g4 = v1;
    int32_t v2 = function_26220(v1); // 0x4b2c4
    g4 = v2;
    *(int32_t *)(g5 - 348) = v2;
    return g4;
}

// Address range: 0x4b2d4 - 0x4b2f2
int32_t function_4b2d4(void) {
    int32_t v1 = g5; // 0x4b2d4
    int32_t v2 = *(int32_t *)(v1 - 360); // 0x4b2d4
    g6 = v2;
    g7 = g8;
    g4 = *(int32_t *)(v1 - 348);
    g9 = v2;
    g4 = function_49c80(1);
    int32_t result = function_4b2bb(); // 0x4b2f0
    g4 = result;
    return result;
}

// Address range: 0x4b2f2 - 0x4b2fd
int32_t function_4b2f2(void) {
    // 0x4b2f2
    return g4;
}

// Address range: 0x4b302 - 0x4b350
int32_t function_4b302(void) {
    int32_t result = (int32_t)g283; // 0x4b307
    g4 = result;
    g9 = *(int32_t *)g283;
    g6 = result;
    g4 = result;
    g9 = *(int32_t *)g283;
    g4 = *(int32_t *)&g278;
    g7 = *(int32_t *)(g5 - 364);
    g4 = result;
    g9 = *(int32_t *)g283;
    return result;
}

// Address range: 0x4b350 - 0x4b383
int32_t function_4b350(void) {
    int32_t v1 = *(int32_t *)(g5 - 348); // 0x4b350
    g4 = v1;
    int32_t v2 = function_2cc30((int32_t)"write_leaderboard", (char *)v1); // 0x4b361
    g4 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_4b3ee();
    }
    int32_t v3 = g6; // 0x4b36e
    int32_t result; // 0x4b372
    if (v3 == 0) {
        // bb8
        g4 = function_4b3d9();
        result = g6;
    } else {
        result = v3;
    }
    // 0x4b372
    g4 = result;
    return result;
}

// Address range: 0x4b383 - 0x4b38e
int32_t function_4b383(void) {
    // 0x4b383
    return g4;
}

// Address range: 0x4b393 - 0x4b398
int32_t function_4b393(void) {
    // 0x4b393
    return g4;
}

// Address range: 0x4b399 - 0x4b39a
int32_t function_4b399(void) {
    // 0x4b399
    return g4;
}

// Address range: 0x4b39a - 0x4b39b
int32_t function_4b39a(void) {
    // 0x4b39a
    return g4;
}

// Address range: 0x4b3a2 - 0x4b3a3
int32_t function_4b3a2(void) {
    // 0x4b3a2
    return g4;
}

// Address range: 0x4b3aa - 0x4b3b5
int32_t function_4b3aa(void) {
    // 0x4b3aa
    return g4;
}

// Address range: 0x4b3ba - 0x4b3bf
int32_t function_4b3ba(void) {
    // 0x4b3ba
    return g4;
}

// Address range: 0x4b3bf - 0x4b3c7
int32_t function_4b3bf(void) {
    // 0x4b3bf
    g6 = g4;
    if (g10 != 0) {
        // bb
        g4 = function_4b39a();
    }
    int32_t result = function_4b3a2(); // 0x4b3c5
    g4 = result;
    return result;
}

// Address range: 0x4b3c7 - 0x4b3d9
int32_t function_4b3c7(void) {
    // 0x4b3c7
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 356);
    int32_t result = function_1bc40(); // 0x4b3d2
    g4 = result;
    return result;
}

// Address range: 0x4b3d9 - 0x4b3e4
int32_t function_4b3d9(void) {
    // 0x4b3d9
    return g4;
}

// Address range: 0x4b3e9 - 0x4b3ee
int32_t function_4b3e9(void) {
    // 0x4b3e9
    return g4;
}

// Address range: 0x4b3ee - 0x4b436
int32_t function_4b3ee(void) {
    int32_t v1 = *(int32_t *)(g5 - 348); // 0x4b3ee
    g4 = v1;
    g4 = function_2cc30((int32_t)"read_leaderboard", (char *)v1);
    int32_t result = function_26d60(g8); // 0x4b40f
    g4 = result;
    int32_t result2 = g6; // 0x4b414
    g8 = result;
    if (result2 == 0) {
        // 0x4b42b
        return result;
    }
    // 0x4b41a
    g4 = result2;
    return result2;
}

// Address range: 0x4b43b - 0x4b440
int32_t function_4b43b(void) {
    // 0x4b43b
    return g4;
}

// Address range: 0x4b440 - 0x4b74a
int32_t function_4b440(int32_t a1) {
    int32_t v1 = g8; // 0x4b443
    int32_t v2 = g10; // 0x4b444
    int32_t v3 = g6; // 0x4b445
    g10 = a1;
    int32_t * v4 = (int32_t *)(a1 + 160); // 0x4b44f
    int32_t v5 = *v4; // 0x4b44f
    g9 = v5;
    int32_t v6;
    int32_t v7;
    int32_t v8; // 0x4b4a5
    int32_t v9; // 0x4b526
    if (v5 == 0) {
        // 0x4b740
        if (*(char *)(a1 + 44) != 0) {
            // 0x4b74a
            return g4;
        }
    } else {
        // 0x4b45d
        int32_t v10; // bp-100
        int32_t v11 = &v10; // 0x4b464
        g8 = v11;
        int32_t v12; // bp-56
        int32_t v13 = &v12; // 0x4b54c
        int32_t v14; // bp-32
        int32_t v15 = &v14; // 0x4b713
        int32_t v16; // bp-84
        int32_t v17 = &v16; // 0x4b60d
        for (int32_t i = 0; i < 4; i++) {
            // 0x4b46a
            g9 = i;
            g7 = a1;
            int32_t v18 = a1 + 48 + 24 * i; // 0x4b473
            g4 = v18;
            int32_t v19;
            int32_t v20;
            if (*(char *)(v18 + 4) != 0) {
                // 0x4b484
                g9 = g292;
                int32_t v21 = *(int32_t *)(g292 + 8); // 0x4b48a
                g4 = v21;
                int32_t v22; // 0x4b48f
                if (v21 == 0) {
                    // bb
                    v22 = function_4b828();
                    g4 = v22;
                } else {
                    v22 = v21;
                }
                // 0x4b495
                g9 = *(int32_t *)v22;
                *(int32_t *)(g11 + 4) = 4;
                *(int32_t *)g11 = g4;
                v8 = g4;
                g10 = v8;
                g4 = g292;
                int32_t v23 = *(int32_t *)(g292 + 12); // 0x4b4ac
                g4 = v23;
                g9 = *(int32_t *)v23;
                *(int32_t *)g11 = v23;
                int32_t v24 = g4; // 0x4b4b9
                if (v8 >= 1) {
                    // 0x4b4c2
                    g6 = 0;
                    v6 = v20;
                    while (true) {
                      lab_0x4b4db:
                        // 0x4b4db
                        g4 = g292;
                        *(int32_t *)(g11 + 4) = *(int32_t *)(g292 + 8);
                        *(int32_t *)(g11 + 12) = 4;
                        *(int32_t *)(g11 + 8) = g6;
                        *(int32_t *)g11 = v11;
                        int32_t v25 = v10; // 0x4b4fb
                        v12 &= -0x1000000;
                        g4 = g292;
                        v9 = v6 & -0x100000;
                        int32_t v26 = *(int32_t *)(g292 + 8); // 0x4b537
                        g4 = v26;
                        int32_t v27 = *(int32_t *)v26; // 0x4b53d
                        g9 = v27;
                        g9 = *(int32_t *)(v27 + 32);
                        *(int32_t *)g11 = g4;
                        int32_t v28 = g9; // 0x4b549
                        *(int32_t *)(g11 + 12) = v13;
                        g9 = v25;
                        *(int32_t *)(g11 + 4) = v25;
                        if ((char)g4 == 0) {
                            goto lab_0x4b4d0;
                        } else {
                            int32_t v29 = v12 % 0x1000000; // 0x4b568
                            g4 = v29;
                            if (v24 != v29) {
                                goto lab_0x4b4d0;
                            } else {
                                // 0x4b576
                                g4 = v25;
                                g9 = a1;
                                *(int32_t *)(g11 + 4) = g4;
                                *(int32_t *)g11 = g9;
                                int32_t v30 = function_4a110(v28, (int32_t)&g870, (int32_t)&g870); // 0x4b58a
                                g4 = v30;
                                v14 = v30;
                                int32_t v31; // 0x4b734
                                if (v30 == 0) {
                                    // 0x4b6e0
                                    *(int32_t *)g11 = (int32_t)&g59;
                                    g4 = function_1bc00(v14);
                                    *(int32_t *)(g11 + 12) = 0;
                                    int32_t v32 = g4; // 0x4b6f7
                                    g4 = v25;
                                    *(int32_t *)(g11 + 8) = g9;
                                    *(int32_t *)(g11 + 4) = g4;
                                    g4 = v32;
                                    *(int32_t *)g11 = v32;
                                    function_47e70((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
                                    g4 = v32;
                                    g9 = v15;
                                    g7 = a1;
                                    *(int32_t *)(g11 + 8) = v15;
                                    v14 = g4;
                                    *(int32_t *)(g11 + 4) = *(int32_t *)(g7 + 36);
                                    int32_t v33 = g7 + 24; // 0x4b729
                                    g4 = v33;
                                    *(int32_t *)g11 = v33;
                                    function_4ba10(v14, (int32_t)&g870, (int32_t)&g870);
                                    v31 = v14;
                                    g4 = v31;
                                } else {
                                    v31 = v30;
                                }
                                // 0x4b59a
                                *(int32_t *)g11 = v31;
                                *(int32_t *)(g11 + 4) = 0;
                                function_46760((int32_t)&g870, (int32_t)&g870);
                                g4 = 0;
                                *(int32_t *)(g5 - 80) = 0;
                                int32_t v34 = g4 + 4; // 0x4b5b4
                                g4 = v34;
                                while (v34 < 28) {
                                    // 0x4b5ac
                                    *(int32_t *)(v34 - 80 + g5) = 0;
                                    v34 = g4 + 4;
                                    g4 = v34;
                                }
                                // 0x4b5bc
                                g4 = g292;
                                g6++;
                                g7 = v9;
                                g9 = 0;
                                int32_t v35 = *(int32_t *)(g292 + 8); // 0x4b5ca
                                g4 = v35;
                                g9 = v25;
                                int32_t v36 = *(int32_t *)v35; // 0x4b5df
                                g4 = v36;
                                g4 = *(int32_t *)(v36 + 28);
                                g7 = v35;
                                *(int32_t *)(g11 + 4) = g9;
                                *(int32_t *)g11 = g7;
                                g9 = 0;
                                v16 = g4;
                                g4 = v14;
                                g7 = v17;
                                *(int32_t *)(g11 + 4) = v17;
                                *(int32_t *)g11 = g4;
                                function_47c20(v16, (int32_t)&g131);
                                g4 = v14;
                                *(int32_t *)g11 = v14;
                                *(int32_t *)(g11 + 4) = function_46750((int32_t)&g870) | 1;
                                g4 = v14;
                                *(int32_t *)g11 = v14;
                                g4 = function_46740((int32_t)&g870, (int32_t)&g870);
                                if (g6 != v8) {
                                    v6 = v9;
                                    // continue -> 0x4b4db
                                    continue;
                                }
                                // 0x4b644
                                g10 = v8;
                                v7 = v9;
                                goto lab_0x4b648_2;
                            }
                        }
                    }
                } else {
                    v7 = v20;
                }
              lab_0x4b648_2:
                // 0x4b648
                g4 = a1;
                g9 = v18;
                *v4 = *v4 - 1;
                *(char *)(g9 + 4) = 0;
                v19 = v7;
            } else {
                v19 = v20;
            }
            // 0x4b659
            v20 = v19;
        }
        // 0x4b667
        g10 = a1;
        *(int32_t *)g11 = a1;
        g4 = function_4a280(4);
        int32_t v37 = *(int32_t *)(g10 + 160); // 0x4b672
        g4 = v37;
        if (v37 == 0) {
            // bb59
            g4 = function_4b838();
        }
    }
    // 0x4b680
    g6 = 0;
    int32_t v38 = 0; // 0x4b688
    int32_t v39; // 0x4b698
    while (true) {
        int32_t v40 = *(int32_t *)(g10 + 8 + 4 * v38); // 0x4b688
        g4 = v40;
        int32_t v41; // 0x4b698
        if (v40 != 0) {
            // 0x4b690
            g9 = *(int32_t *)v40;
            *(int32_t *)g11 = v40;
            v41 = g6;
        } else {
            v41 = v38;
        }
        // 0x4b698
        v39 = v41 + 1;
        g6 = v39;
        if (v41 == 3) {
            // break -> 0x4b6a0
            break;
        }
        v38 = v39;
    }
    int32_t v42 = g10; // 0x4b6a0
    uint32_t v43 = *(int32_t *)(v42 + 36); // 0x4b6a0
    g4 = v43;
    int32_t v44; // 0x4b6ca
    if (v43 >= 1) {
        int32_t v45 = v39 & -256; // 0x4b6a7
        g6 = v45;
        int32_t v46 = v42; // 0x4b6b0
        int32_t v47; // 0x4b6c5
        while (true) {
            int32_t v48 = *(int32_t *)(v46 + 24); // 0x4b6b0
            g4 = v48;
            int32_t v49 = *(int32_t *)(v48 + 4 * v45); // 0x4b6b3
            g4 = v49;
            int32_t v50; // 0x4b6c2
            if (v49 != 0) {
                // 0x4b6ba
                g9 = *(int32_t *)v49;
                *(int32_t *)g11 = v49;
                v47 = g10;
                v50 = g6;
            } else {
                v47 = v46;
                v50 = v45;
            }
            int32_t v51 = v50 + 1; // 0x4b6c2
            g6 = v51;
            if (*(int32_t *)(v47 + 36) <= v51) {
                // break -> 0x4b6ca
                break;
            }
            v45 = v51;
            v46 = v47;
        }
        v44 = v47;
    } else {
        v44 = v42;
    }
    // 0x4b6ca
    *(int32_t *)g11 = v44;
    int32_t result = function_4a620((int32_t)&g870); // 0x4b6cd
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x4b4d0:;
    int32_t v52 = g6 + 1; // 0x4b4d0
    g6 = v52;
    if (v52 == v8) {
        v7 = v9;
        // break -> 0x4b648
        goto lab_0x4b648_2;
    }
    v6 = v9;
    goto lab_0x4b4db;
}

// Address range: 0x4b764 - 0x4b767
int32_t function_4b764(void) {
    // 0x4b764
    return g4;
}

// Address range: 0x4b77b - 0x4b788
int32_t function_4b77b(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x5317dbcc); // 0x4b77b
    *v1 = *v1 - 1;
    int32_t result = function_44c7ffff(); // 0x4b781
    g4 = result;
    return result;
}

// Address range: 0x4b79b - 0x4b7a1
int32_t function_4b79b(void) {
    // 0x4b79b
    return g4;
}

// Address range: 0x4b7aa - 0x4b7ab
int32_t function_4b7aa(void) {
    // 0x4b7aa
    return g4;
}

// Address range: 0x4b7ac - 0x4b7c5
int32_t function_4b7ac(void) {
    char * v1 = (char *)(g6 + 0x4c70840); // 0x4b7ac
    *v1 = (char)g7 + *v1;
    int32_t v2 = g4; // 0x4b7b2
    unsigned char v3 = (char)v2 & 36; // 0x4b7b2
    int32_t v4 = (int32_t)v3 | v2 & -256; // 0x4b7b2
    g4 = v4;
    char * v5 = (char *)v4; // 0x4b7b4
    *v5 = *v5 + v3;
    int32_t v6 = g7; // 0x4b7b6
    char * v7 = (char *)(v6 + 0x31e89845); // 0x4b7b6
    *v7 = *v7 + (char)v6;
    g7 = g7 & -0xff01 | (int32_t)&g859;
    g8++;
    g2 = false;
    g4 &= -244;
    int32_t result = function_4b805(); // 0x4b7c3
    g4 = result;
    return result;
}

// Address range: 0x4b7c6 - 0x4b7e1
int32_t function_4b7c6(void) {
    int32_t v1 = g7; // 0x4b7c6
    char * v2 = (char *)(v1 + 0x2444c7c7); // 0x4b7c6
    *v2 = *v2 + (char)v1;
    char * v3 = (char *)(g11 + 7 + 8 * g4); // 0x4b7cc
    *v3 = (char)(g6 / 256) | *v3;
    int32_t v4 = g6; // 0x4b7d0
    int32_t v5 = g4; // 0x4b7d0
    int32_t v6 = 256 * v5 + v4 & 0xff00 | v4 & -0xff01; // 0x4b7d0
    g6 = v6;
    g4 = v5 & -252;
    int32_t * v7 = (int32_t *)v6; // 0x4b7d5
    *v7 = *v7 ^ 0x4890008;
    int32_t result = g4 & -248; // 0x4b7dd
    g4 = result;
    return result;
}

// Address range: 0x4b7eb - 0x4b7ec
int32_t function_4b7eb(void) {
    // 0x4b7eb
    return g4;
}

// Address range: 0x4b7ef - 0x4b7f5
int32_t function_4b7ef(void) {
    // 0x4b7ef
    return g4;
}

// Address range: 0x4b805 - 0x4b821
int32_t function_4b805(void) {
    char * v1 = (char *)(g4 + 44); // 0x4b805
    *v1 = (char)g7 + *v1 + (char)g2;
    int128_t v2 = __asm_cvtps2pd(g879); // 0x4b808
    int128_t v3 = __asm_addsd(g878, v2); // 0x4b80b
    int128_t v4 = __asm_unpcklpd(v3, v3); // 0x4b80f
    *(int32_t *)(g10 + 48) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    return g4;
}

// Address range: 0x4b828 - 0x4b838
int32_t function_4b828(void) {
    int32_t result = *(int32_t *)(g9 + 12); // 0x4b828
    g4 = result;
    g9 = *(int32_t *)result;
    return result;
}

// Address range: 0x4b838 - 0x4b8a7
int32_t function_4b838(void) {
    // 0x4b838
    function_4a7c0(g10);
    int32_t v1 = (int32_t)g450; // 0x4b840
    g4 = v1;
    g9 = *(int32_t *)g450;
    g6 = v1;
    int32_t v2 = *(int32_t *)g450; // 0x4b84f
    g4 = v2;
    int32_t v3 = *(int32_t *)(v2 + 8); // 0x4b851
    g4 = v3;
    *(int32_t *)(g5 - 104) = v3;
    int32_t v4 = function_26cf0(); // 0x4b85e
    g4 = v4;
    g8 = v4;
    g4 = function_27a20(v4, "OnMatchPlayerMgrUpdate", "update", "searchfinished");
    int128_t v5 = __asm_xorps(g878, g878); // 0x4b88f
    __asm_ucomiss(v5, *(int32_t *)(g10 + 48));
    if (g865) {
        // bb
        g4 = function_4b7eb();
    }
    int32_t result = function_4b7eb(); // 0x4b8a2
    g4 = result;
    return result;
}

// Address range: 0x4b8a8 - 0x4b8a9
int32_t function_4b8a8(void) {
    // 0x4b8a8
    return g4;
}

// Address range: 0x4b8bd - 0x4b8be
int32_t function_4b8bd(void) {
    // 0x4b8bd
    return g4;
}

// Address range: 0x4b8cf - 0x4b8d0
int32_t function_4b8cf(void) {
    // 0x4b8cf
    return g4;
}

// Address range: 0x4b8e0 - 0x4b90c
int32_t function_4b8e0(int32_t result, int32_t a2) {
    int32_t v1 = g5; // bp-4
    int32_t v2 = g6; // 0x4b8e3
    g4 = result;
    g7 = a2;
    int32_t v3 = *(int32_t *)(result + 12); // 0x4b8ea
    g9 = v3;
    if (v3 < 1) {
        // 0x4b909
        g6 = v2;
        return result;
    }
    int32_t v4 = v3 - 1; // 0x4b8f1
    g9 = v4;
    int32_t v5; // 0x4b900
    int32_t v6; // 0x4b903
    if (v4 != a2) {
        int32_t v7 = *(int32_t *)result; // 0x4b8f8
        g6 = v7;
        int32_t v8 = *(int32_t *)(v7 + 4 * v4); // 0x4b8fa
        g9 = v8;
        *(int32_t *)(v7 + 4 * a2) = v8;
        v5 = g4;
        v6 = *(int32_t *)(v5 + 12) - 1;
        g9 = v6;
    } else {
        v5 = result;
        v6 = v4;
    }
    // 0x4b906
    *(int32_t *)(v5 + 12) = v6;
    // 0x4b909
    g6 = v2;
    g5 = v1;
    return g4;
}

// Address range: 0x4b910 - 0x4b927
int32_t function_4b910(int32_t a1) {
    // 0x4b910
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4b91a
    g4 = v1;
    int32_t v2; // 0x4b921
    if (v1 < 0) {
        // bb
        g4 = function_4b946((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x4b921
    g4 = v3;
    int32_t result; // 0x4b925
    if (v3 == 0) {
        // bb233
        result = function_4b93f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x4b927
    return result;
}

// Address range: 0x4b93f - 0x4b946
int32_t function_4b93f(void) {
    // 0x4b93f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x4b946 - 0x4b94c
int32_t function_4b946(int32_t a1, int32_t a2) {
    // 0x4b946
    g6 = a1;
    return g4;
}

// Address range: 0x4b950 - 0x4b9a0
int32_t function_4b950(int32_t a1, int32_t a2) {
    // 0x4b950
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4b95b
    int64_t v2 = v1; // 0x4b95b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x4b962
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x4b968
    g7 = v4;
    int32_t v5; // 0x4b988
    if (v1 == 0) {
        // bb
        g4 = function_4b9c8();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x4b96e
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x4b976
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x4b97b
    g4 = v8;
    int32_t v9; // 0x4b999
    if (v5 > v8) {
        // 0x4b982
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x4b988
        int32_t v11 = v10 < 0; // 0x4b98c
        int32_t v12 = (v11 + v10) / 2; // 0x4b991
        while (v5 > v12) {
            // 0x4b988
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x4b997
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x4b997
    int32_t v14 = *(int32_t *)v13; // 0x4b997
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x4b99e
    if (v14 == 0) {
        // bb20
        result = function_4b9ef();
        g4 = result;
    } else {
        // 0x4b997
        result = g4;
    }
    // 0x4b9a0
    return result;
}

// Address range: 0x4b9c8 - 0x4b9ef
int32_t function_4b9c8(void) {
    int32_t v1 = g4; // 0x4b9c8
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x4b9cf
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x4b9e0
    while (g7 > v3) {
        // 0x4b9e0
        v3 *= 2;
    }
    // 0x4b9e6
    g4 = v3;
    int32_t v4 = g6; // 0x4b9e6
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x4b9ef - 0x4b9f0
int32_t function_4b9ef(void) {
    // 0x4b9ef
    return g4;
}

// Address range: 0x4ba10 - 0x4ba96
int32_t function_4ba10(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x4ba16
    g6 = a1;
    int32_t v2 = g10; // 0x4ba1c
    g10 = a2;
    int32_t v3 = g8; // 0x4ba22
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x4ba25
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x4ba28
    g9 = v5;
    int32_t v6; // 0x4ba31
    int32_t v7; // 0x4ba91
    int32_t v8; // 0x4ba91
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x4ba86
        g4 = v9;
        g4 = function_4b950(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x4ba2f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x4ba38
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x4ba40
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x4ba66
    if (v11 < 1) {
        // 0x4ba2f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x4ba51
        int32_t v14 = v13 + 4 + 4 * g10; // 0x4ba58
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x4ba64
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x4ba66
    g9 = v16;
    if (v16 != 0) {
        // 0x4ba6a
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x4ba6d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x4ba71
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x4baa0 - 0x4baae
int32_t function_4baa0(int32_t a1) {
    // 0x4baa0
    g4 = a1;
    g9 = *(int32_t *)(a1 + 12);
    int32_t result = *(int32_t *)(a1 + 8); // 0x4baaa
    g4 = result;
    return result;
}

// Address range: 0x4bab0 - 0x4babb
int32_t function_4bab0(int32_t a1) {
    // 0x4bab0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 16); // 0x4bab7
    g4 = result;
    return result;
}

// Address range: 0x4bac0 - 0x4bad0
int32_t function_4bac0(int32_t a1) {
    // 0x4bac0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 16); // 0x4bac7
    int32_t result = (int32_t)(v1 != 0) | v1 & -256; // 0x4bacc
    g4 = result;
    return result;
}

// Address range: 0x4bad0 - 0x4badb
int32_t function_4bad0(int32_t a1) {
    // 0x4bad0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 40); // 0x4bad7
    g4 = result;
    return result;
}

// Address range: 0x4bae0 - 0x4bafc
int32_t function_4bae0(int32_t a1, int32_t a2) {
    // 0x4bae0
    g4 = 0;
    g9 = a2;
    g7 = a1;
    if (a2 < 0) {
        // 0x4bafa
        return 0;
    }
    // 0x4baef
    int32_t result; // 0x4baf7
    if (*(int32_t *)(a1 + 40) > a2) {
        int32_t v1 = *(int32_t *)(a1 + 28); // 0x4baf4
        g4 = v1;
        result = *(int32_t *)(v1 + 4 * a2);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x4bafa
    return result;
}

// Address range: 0x4bb00 - 0x4bb4b
int32_t function_4bb00(int32_t a1) {
    int32_t v1 = a1 - 4; // 0x4bb00
    int32_t v2 = g6; // 0x4bb13
    g6 = v1;
    int32_t * v3 = (int32_t *)(a1 + 64); // 0x4bb1a
    int32_t v4; // 0x4bb3e
    if (*v3 == 3) {
        // 0x4bb20
        *v3 = 4;
        v4 = g6;
    } else {
        v4 = v1;
    }
    // 0x4bb27
    g4 = g292;
    int32_t * v5 = (int32_t *)(v4 + 12); // 0x4bb2c
    g7 = *v5;
    int32_t v6 = *(int32_t *)(g292 + 28); // 0x4bb2f
    g4 = v6;
    g9 = *(int32_t *)v6;
    *v5 = 0;
    g6 = v2;
    return g4;
}

// Address range: 0x4bb50 - 0x4bb7c
int32_t function_4bb50(int32_t a1) {
    int32_t v1 = g6; // 0x4bb53
    g6 = a1;
    g4 = *(int32_t *)(a1 + 16);
    *(int32_t *)a1 = (int32_t)&g189;
    int32_t v2 = g4; // 0x4bb63
    if (v2 != 0) {
        // 0x4bb67
        g4 = function_28600(v2);
    }
    // 0x4bb6f
    *(int32_t *)(g6 + 16) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x4bb80 - 0x4bb9f
int32_t function_4bb80(int32_t a1) {
    int32_t v1 = g6; // 0x4bb83
    g6 = a1;
    g4 = function_4bb50(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x4bb9a
    g4 = result;
    return result;
}

// Address range: 0x4bba0 - 0x4bba1
int32_t function_4bba0(int32_t a1) {
    // 0x4bba0
    return g4;
}

// Address range: 0x4bbb4 - 0x4bbf4
int32_t function_4bbb4(int32_t a1) {
    // 0x4bbb4
    g8++;
    g6++;
    int32_t v1 = g4; // 0x4bbb7
    *(char *)v1 = (char)v1 | *(char *)&g4;
    int32_t v2 = g4; // 0x4bbb9
    *(char *)v2 = (char)v2 + *(char *)&g4;
    uint32_t v3 = g7; // 0x4bbbb
    g7 = 256 * (v3 / 256 + g6 & 255) | v3 & -0xff01;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)(a1 - 16)); // 0x4bbbe
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    int128_t v5 = __asm_cvtpd2ps(v4); // 0x4bbd2
    *(int16_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v5);
    *(int16_t *)(g6 + 22) = 0;
    *(int32_t *)(g6 + 24) = 0;
    return g4;
}

// Address range: 0x4bc00 - 0x4bc5a
int32_t function_4bc00(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x4bc03
    int32_t v2 = g10; // 0x4bc04
    int32_t v3 = g6; // 0x4bc05
    g6 = 0;
    g8 = a1;
    g4 = a2;
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x4bc11
    int32_t v5 = *v4; // 0x4bc11
    g9 = v5;
    g4 = a3;
    int32_t result; // 0x4bc53
    if (v5 < 1) {
        result = 0;
        // 0x4bc50
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x4bc21
    g10 = 0;
    int32_t v6 = 0; // 0x4bc42
    while (true) {
        int32_t v7 = *(int32_t *)a1; // 0x4bc28
        g4 = v7;
        int32_t v8 = *(int32_t *)(4 * v6 + v7); // 0x4bc2a
        g6 = v8;
        int32_t v9; // 0x4bc3e
        if (v8 != 0) {
            int32_t v10 = *(int32_t *)v8 ^ a2; // 0x4bc3b
            g4 = v10;
            v9 = v10 | v5 ^ a3;
            g9 = v9;
            if (v9 == 0) {
                result = v8;
                goto lab_0x4bc50_2;
            }
        } else {
            v9 = v5;
        }
        int32_t v11 = v6 + 1; // 0x4bc42
        g10 = v11;
        if (*v4 <= v11) {
            // break -> 0x4bc4a
            break;
        }
        v5 = v9;
        v6 = v11;
    }
    // 0x4bc4a
    g6 = 0;
    result = 0;
  lab_0x4bc50_2:
    // 0x4bc50
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x4bc60 - 0x4bc8d
int32_t function_4bc60(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x4bc63
    g4 = a1;
    g6 = a3;
    g7 = a2;
    int32_t v2 = a1 + 28; // 0x4bc70
    g9 = v2;
    int32_t result = function_4bc00(a1, v2, a2, a3); // 0x4bc82
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x4bc90 - 0x4bc91
int32_t function_4bc90(int32_t a1) {
    // 0x4bc90
    return g4;
}

// Address range: 0x4bcaf - 0x4bcb5
int32_t function_4bcaf(void) {
    // 0x4bcaf
    return g4;
}

// Address range: 0x4bcc0 - 0x4bd3c
int32_t function_4bcc0(void) {
    char * v1 = (char *)(g6 + 0x4c70840); // 0x4bcc0
    *v1 = (char)g7 + *v1;
    int32_t v2 = g4; // 0x4bcc6
    unsigned char v3 = (char)v2 & 36; // 0x4bcc6
    int32_t v4 = (int32_t)v3 | v2 & -256; // 0x4bcc6
    g4 = v4;
    char * v5 = (char *)v4; // 0x4bcc8
    *v5 = *v5 + v3;
    int32_t v6 = g7; // 0x4bcca
    char * v7 = (char *)(v6 + 0x1de8d445); // 0x4bcca
    *v7 = *v7 + (char)v6;
    int32_t v8 = g8; // 0x4bcd2
    g8 = v8 + 1;
    g4 = g4 & -256 | (int32_t)&g860 & -256 | (int32_t)((char)&g860 & 12);
    int32_t v9 = g6;
    int32_t v10 = g10;
    while (true) {
        int32_t v11 = *(int32_t *)(v9 + 48); // 0x4bd1f
        g9 = v11;
        int32_t v12 = v10; // 0x4bd22
        int32_t v13; // 0x4bd22
        int32_t v14; // 0x4bd10
        while (true) {
            // 0x4bd22
            v13 = v12 + 1;
            g10 = v13;
            if (v13 >= *(int32_t *)(v8 + 13)) {
                // break (via goto) -> 0x4bd2a
                goto lab_0x4bd2a;
            }
            // 0x4bd10
            v14 = *(int32_t *)(4 * v13 + v11);
            g4 = v14;
            if (v14 != 0) {
                // break -> 0x4bd17
                break;
            }
            v12 = v13;
        }
        // 0x4bd17
        g9 = *(int32_t *)v14;
        v10 = v13;
    }
  lab_0x4bd2a:
    // 0x4bd2a
    g10 = *(int32_t *)(v9 + 56);
    *(int32_t *)(v9 + 60) = 0;
    return g4;
}

// Address range: 0x4bdab - 0x4bdac
int32_t function_4bdab(void) {
    // 0x4bdab
    return g4;
}

// Address range: 0x4bdc0 - 0x4bdc1
int32_t function_4bdc0(int32_t a1) {
    // 0x4bdc0
    return g4;
}

// Address range: 0x4bdd1 - 0x4be6b
int32_t function_4bdd1(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4bdd1
    int32_t v1; // ebp
    int32_t v2 = v1 - 32; // 0x4bdd1
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4bdd4
    g9 = *(int32_t *)(g6 + 40);
    int128_t v5 = __asm_cvtpd2ps(v4); // xmm2
    int32_t v6; // 0x4bdff
    int32_t v7; // 0x4be2c
    if (g9 >= 1) {
        // 0x4bde4
        g4 = 0;
        v6 = 0;
      lab_0x4bdfc_2:
        while (true) {
          lab_0x4bdfc:;
            int32_t v8 = *(int32_t *)(g6 + 28); // 0x4bdfc
            g10 = v8;
            int32_t v9 = v8 + 4 * v6; // 0x4bdff
            g8 = v9;
            int32_t v10 = *(int32_t *)v9; // 0x4be02
            g7 = v10;
            if (v10 == 0) {
                v7 = v6;
                goto lab_0x4be20;
            } else {
                int128_t v11 = __asm_movaps(v5); // 0x4be08
                int128_t v12 = __asm_subss_1651(v11, *(int32_t *)(v10 + 4)); // 0x4be0b
                g7 = g560;
                __asm_ucomiss_1648(__asm_movss(*(int32_t *)(g560 + 44)), v12);
                if (false || v10 == 0) {
                    // 0x4be08
                    v7 = g4;
                    goto lab_0x4be20;
                } else {
                    uint32_t v13 = *(int32_t *)(g6 + 40); // 0x4bdf0
                    g9 = v13;
                    int32_t v14 = g4; // 0x4bdf3
                    g7 = v14;
                    int32_t v15 = v14 + 1; // 0x4bdf5
                    g4 = v15;
                    if (v15 >= v13) {
                        // break -> 0x4be63
                        break;
                    }
                    v6 = v15;
                    goto lab_0x4bdfc;
                }
            }
        }
    }
  lab_0x4be63:
    // 0x4be63
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
  lab_0x4be20:;
    int32_t v16 = v7 - 1; // 0x4be20
    g7 = v16;
    int32_t v17 = g9 - v7 - 1; // 0x4be25
    g9 = v17;
    int32_t v18; // 0x4be56
    if (v17 >= 1) {
        // 0x4be2c
        g4 = 4 * v7 + 4 + g10;
        g9 = 4 * v17;
        *(int32_t *)(v1 - 36) = v16;
        *(int32_t *)(v1 - 56) = __asm_movss_1646(v5);
        g4 = function_2cb20(g8, g4, g9);
        g7 = *(int32_t *)(v1 - 36);
        v5 = __asm_movss(*(int32_t *)(v1 - 56));
        v18 = g7;
    } else {
        v18 = v16;
    }
    int32_t * v19 = (int32_t *)(g6 + 40); // 0x4be53
    uint32_t v20 = v18 + 1; // 0x4be56
    g4 = v20;
    uint32_t v21 = *v19 - 1; // 0x4be59
    g9 = v21;
    *v19 = v21;
    if (v20 >= v21) {
        // break -> 0x4be63
        goto lab_0x4be63;
    }
    // 0x4be53
    v6 = g4;
    // continue -> 0x4bdfc
    goto lab_0x4bdfc_2;
}

// Address range: 0x4be70 - 0x4be8b
int32_t function_4be70(int32_t a1) {
    // 0x4be70
    g10 = a1;
    return g4;
}

// Address range: 0x4beb8 - 0x4bec4
int32_t function_4beb8(void) {
    int32_t v1 = g7; // 0x4beb8
    char * v2 = (char *)(v1 + 0x52ff2404); // 0x4beb8
    unsigned char v3 = *v2; // 0x4beb8
    unsigned char v4 = v3 + (char)v1; // 0x4beb8
    bool v5; // cf
    unsigned char v6 = (char)v5 + v4; // 0x4beb8
    v5 = v5 ? v6 <= v3 : v4 < v3;
    *v2 = v6;
    int32_t v7 = g4; // 0x4bebe
    unsigned char v8 = (char)v7; // 0x4bebe
    unsigned char v9 = v8 - 117 + (char)v5; // 0x4bebe
    unsigned char v10 = v9 - (v5 ? v9 <= v8 : v8 > 116 ? -124 : -125); // 0x4bec1
    int32_t result = (int32_t)v10 | v7 & -256; // 0x4bec1
    g4 = result;
    return result;
}

// Address range: 0x4bf54 - 0x4bf5d
int32_t function_4bf54(void) {
    // 0x4bf54
    *(int32_t *)(g10 + 52) = 0;
    g9 = 0;
    return g4;
}

// Address range: 0x4bf5d - 0x4bfb3
int32_t function_4bf5d(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4bf5d
    *(int32_t *)(g10 + 64) = g9;
    int32_t v1 = (int32_t)g450; // 0x4bf60
    g4 = v1;
    g9 = *(int32_t *)g450;
    g6 = v1;
    int32_t v2 = *(int32_t *)g450; // 0x4bf6f
    g4 = v2;
    g8 = *(int32_t *)(v2 + 8);
    int32_t v3 = function_26cf0(); // 0x4bf7b
    g4 = v3;
    g10 = v3;
    int32_t result = function_27a20(v3, "OnMatchServerMgrUpdate", "update", "searchfinished"); // 0x4bf9d
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x4bfb8 - 0x4bfc2
int32_t function_4bfb8(void) {
    int32_t result = function_4bdc0(g10); // 0x4bfbb
    g4 = result;
    return result;
}

// Address range: 0x4bfc3 - 0x4bfc4
int32_t function_4bfc3(void) {
    // 0x4bfc3
    return g4;
}

// Address range: 0x4bfc6 - 0x4c03c
int32_t function_4bfc6(void) {
    // 0x4bfc6
    g4 &= -24;
    int32_t * v1 = (int32_t *)(g7 - 0x7c17dbe4); // 0x4bfcb
    *v1 = *v1 - 1;
    g9 &= -0xff01;
    int32_t v2 = g4; // 0x4bfd7
    char * v3 = (char *)v2; // 0x4bfd7
    *v3 = *v3 + (char)v2;
    int32_t v4; // ebp
    char * v5 = (char *)(v4 + 191); // 0x4bfd9
    *v5 = (char)g7 + *v5;
    char * v6 = (char *)(v4 - 119); // 0x4bfdf
    *v6 = (char)g9 + *v6;
    g4 = __asm_in(87);
    int32_t v7 = *(int32_t *)(v4 + 8); // 0x4bfed
    g6 = v7;
    int32_t v8 = *(int32_t *)(v7 + 40); // 0x4bff6
    g10 = v8;
    *(char *)(v7 + 16) = 0;
    int32_t v9 = g6; // 0x4bffd
    g8 = v9 + 28;
    *(int32_t *)(v9 + 20) = 0;
    int32_t v10 = g6; // 0x4c007
    int32_t * v11 = (int32_t *)(v10 + 28); // 0x4c007
    int32_t v12 = *v11; // 0x4c007
    g9 = v12;
    if (v8 < 1) {
        // 0x4c02a
        g7 = *(int32_t *)(v10 + 36);
        *(int32_t *)(v10 + 40) = 0;
        return g4;
    }
    // 0x4c00e
    g10 = 0;
    int32_t v13 = 0; // 0x4c022
    while (true) {
        int32_t v14 = *(int32_t *)(4 * v13 + v12); // 0x4c010
        g4 = v14;
        int32_t v15; // 0x4c01f
        if (v14 != 0) {
            // 0x4c017
            g9 = *(int32_t *)v14;
            v15 = *v11;
            g9 = v15;
        } else {
            v15 = v12;
        }
        int32_t v16 = v13 + 1; // 0x4c022
        g10 = v16;
        if (v16 >= *(int32_t *)(g8 + 12)) {
            // break -> 0x4c02a
            break;
        }
        v13 = v16;
        v12 = v15;
    }
    // 0x4c02a
    g7 = *(int32_t *)(v10 + 36);
    *(int32_t *)(v10 + 40) = 0;
    return g4;
}

// Address range: 0x4c0b4 - 0x4c0bd
int32_t function_4c0b4(void) {
    // 0x4c0b4
    *(int32_t *)(g6 + 52) = 0;
    g9 = 0;
    return g4;
}

// Address range: 0x4c0bd - 0x4c135
int32_t function_4c0bd(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x4c0bd
    *(int32_t *)(v1 + 64) = g9;
    if (*(int32_t *)(v1 + 68) == 3) {
        int32_t * v2 = (int32_t *)(g6 + 12); // 0x4c110
        int32_t v3 = *v2; // 0x4c110
        g4 = v3;
        if (v3 != 0) {
            // 0x4c117
            g9 = g292;
            int32_t v4 = *(int32_t *)(g292 + 28); // 0x4c11d
            g9 = v4;
            g7 = *(int32_t *)v4;
            *v2 = 0;
        }
    }
    // 0x4c0c6
    int32_t v5; // ebp
    *(int32_t *)(v5 + 8) = g6;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    int32_t result = function_4be70((int32_t)&g870); // 0x4c0d0
    g4 = result;
    return result;
}

// Address range: 0x4c140 - 0x4c141
int32_t function_4c140(int32_t a1) {
    // 0x4c140
    return g4;
}

// Address range: 0x4c15c - 0x4c15d
int32_t function_4c15c(void) {
    // 0x4c15c
    return g4;
}

// Address range: 0x4c16c - 0x4c16d
int32_t function_4c16c(void) {
    // 0x4c16c
    return g4;
}

// Address range: 0x4c182 - 0x4c185
int32_t function_4c182(void) {
    // 0x4c182
    return g4;
}

// Address range: 0x4c18c - 0x4c18d
int32_t function_4c18c(void) {
    // 0x4c18c
    return g4;
}

// Address range: 0x4c19e - 0x4c1a1
int32_t function_4c19e(void) {
    // 0x4c19e
    return g4;
}

// Address range: 0x4c1ce - 0x4c2f7
int32_t function_4c1ce(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5 - 336; // 0x4c1ce
    float80_t v2; // st7
    *(float64_t *)v1 = (float64_t)v2;
    int128_t v3 = __asm_movsd_1649(*(int64_t *)v1); // 0x4c1d4
    int32_t v4 = __asm_movss_1646(__asm_cvtpd2ps(v3)); // 0x4c1eb
    function_275d0(v4, (char *)&g870, (float80_t)(int80_t)&g870);
    g4 = (int32_t)"FCVAR_NEVER_AS_STRING";
    int32_t v5 = g558 & 0x1000; // 0x4c201
    g9 = v5;
    int32_t v6; // 0x4c2cf
    if (v5 == 0) {
        // 0x4c2c0
        g4 = g559;
        g7 = (int32_t)&g129;
        int32_t v7 = *(int32_t *)(g559 + 36); // 0x4c2ca
        v6 = v7 == 0 ? (int32_t)&g129 : v7;
        g4 = v6;
    } else {
        v6 = (int32_t)"FCVAR_NEVER_AS_STRING";
    }
    // 0x4c20d
    if (*(char *)v6 != 0) {
        // 0x4c216
        g4 = (int32_t)"FCVAR_NEVER_AS_STRING";
        int32_t v8; // 0x4c2ef
        if (v5 == 0) {
            // 0x4c2e0
            g4 = g559;
            g9 = (int32_t)&g129;
            int32_t v9 = *(int32_t *)(g559 + 36); // 0x4c2ea
            v8 = v9 == 0 ? (int32_t)&g129 : v9;
            g4 = v8;
        } else {
            v8 = (int32_t)"FCVAR_NEVER_AS_STRING";
        }
        int32_t v10 = g5 - 52; // 0x4c223
        g10 = v10;
        g4 = function_66bc0(v10, v8, &g134);
        int32_t v11 = *(int32_t *)(g5 - 40); // 0x4c23a
        g4 = v11;
        int32_t v12; // 0x4c29e
        if (v11 < 1) {
            // 0x4c223
            v12 = g10;
        } else {
            // 0x4c241
            g6 = 0;
            int32_t v13 = 0; // 0x4c24a
            int32_t v14 = g10; // 0x4c248
            while (true) {
                int32_t v15 = *(int32_t *)v14; // 0x4c248
                g4 = v15;
                int32_t v16 = *(int32_t *)(v15 + 4 * v13); // 0x4c24a
                g4 = v16;
                int32_t v17 = function_2d3e0(v16); // 0x4c250
                g4 = v17;
                if (v17 >= 1) {
                    int32_t v18 = g5 - 320; // 0x4c25d
                    g4 = v18;
                    function_1e010(v18, "*:%d");
                    g4 = g284;
                    g4 = function_37860(g284, g8, g5 - 315, 0);
                }
                int32_t v19 = g6 + 1; // 0x4c296
                g6 = v19;
                int32_t v20 = g10; // 0x4c299
                if (*(int32_t *)(v20 + 12) <= v19) {
                    v12 = v20;
                    // break -> 0x4c29e
                    break;
                }
                v13 = v19;
                v14 = v20;
            }
        }
        // 0x4c29e
        g4 = function_669e0(v12);
    }
    int32_t v21 = *(int32_t *)(g5 - 28); // 0x4c2a6
    g4 = v21;
    int32_t result; // 0x4c2b0
    if (v21 != 0) {
        // 0x4c2ad
        result = function_28600(v21);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x4c2b5
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x4c304 - 0x4c30a
int32_t function_4c304(void) {
    // 0x4c304
    return g4;
}

// Address range: 0x4c30a - 0x4c350
int32_t function_4c30a(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 72)); // 0x4c30a
    int128_t v2 = __asm_addss(v1, *(int32_t *)(g4 + 44)); // 0x4c30f
    int32_t v3; // ebp
    int32_t v4 = v3 - 344; // 0x4c314
    float80_t v5; // st7
    *(float64_t *)v4 = (float64_t)v5;
    int128_t v6 = __asm_movsd_1649(*(int64_t *)v4); // 0x4c31a
    int128_t v7 = __asm_unpcklps(v2, v2); // 0x4c322
    __asm_ucomisd(v6, __asm_cvtps2pd(v7));
    bool v8; // cf
    bool v9; // zf
    if (v8 || v9) {
        // 0x4c34b
        return g4;
    }
    // 0x4c32e
    *(int32_t *)(g6 + 68) = 2;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x4c354 - 0x4c35a
int32_t function_4c354(void) {
    // 0x4c354
    return g4;
}

// Address range: 0x4c35a - 0x4c383
int32_t function_4c35a(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 76)); // 0x4c35a
    int32_t v2; // ebp
    float80_t v3; // st7
    *(float64_t *)(v2 - 336) = (float64_t)v3;
    int128_t v4 = __asm_addss(v1, *(int32_t *)(g4 + 44)); // 0x4c365
    int128_t v5 = __asm_cvtps2pd(__asm_unpcklps(v4, v4)); // 0x4c36d
    __asm_ucomisd_1652(v5, *(int64_t *)(v2 - 336));
    bool v6; // cf
    int32_t result; // 0x4c378
    bool v7; // zf
    if (v6 || v7) {
        // bb
        result = function_4c18c();
        g4 = result;
    } else {
        // 0x4c35a
        result = g4;
    }
    // 0x4c37e
    return result;
}

// Address range: 0x4c383 - 0x4c3a4
int32_t function_4c383(void) {
    // 0x4c383
    g6 = g4;
    g4 = function_669e0(g10);
    while (true) {
        int32_t v1 = g5 - 28; // 0x4c38d
        g4 = v1;
        g4 = function_1fc30(v1);
        int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x4c39b
        g4 = v2;
        g6 = v2;
    }
}

// Address range: 0x4c3a4 - 0x4c437
int32_t function_4c3a4(int32_t a1) {
    // 0x4c3a4
    g6 = g4;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g6; // 0x4c3cc
    int32_t v3 = g10; // 0x4c3cf
    int32_t v4 = *(int32_t *)(a1 + 16); // 0x4c3e2
    g4 = v4;
    int32_t v5 = function_27c00(v4, "server/connectstring", NULL); // 0x4c3e8
    g4 = v5;
    if (v5 == 0) {
        // 0x4c42d
        g6 = v2;
        g10 = v3;
        return 0;
    }
    // 0x4c3f1
    int32_t result; // 0x4c41e
    if (*(char *)v5 != 0) {
        // 0x4c3f6
        g9 = *(int32_t *)&g278;
        g6 = (int32_t)g283;
        int32_t v6 = *(int32_t *)g283; // 0x4c3ff
        g9 = v6;
        g10 = *(int32_t *)(v6 + 28);
        int32_t v7; // bp-280
        int32_t v8 = &v7; // 0x4c408
        g4 = v8;
        function_1e010(v8, "connect %s\n");
        int32_t v9; // bp-275
        result = &v9;
        g4 = result;
    } else {
        result = v5;
    }
    // 0x4c42d
    g6 = v2;
    g10 = v3;
    return result;
}

// Address range: 0x4c440 - 0x4c471
int32_t function_4c440(int32_t a1) {
    // 0x4c440
    g6 = a1;
    uint32_t v1 = *(int32_t *)(a1 + 80); // 0x4c456
    g9 = v1;
    if (*(int32_t *)(a1 + 96) <= v1) {
        // bb
        g4 = function_4c4f0();
    }
    // 0x4c462
    int32_t v2; // bp-423
    g10 = &v2;
    g4 = 0;
    g8 = 115;
    int32_t result = function_4c4b9(); // 0x4c46f
    g4 = result;
    return result;
}

// Address range: 0x4c4a6 - 0x4c4a9
int32_t function_4c4a6(void) {
    // 0x4c4a6
    return g4;
}

// Address range: 0x4c4b9 - 0x4c4e7
int32_t function_4c4b9(void) {
    int32_t v1 = *(int32_t *)(g6 + 84); // 0x4c4b9
    g7 = v1;
    int32_t v2 = g4; // 0x4c4bc
    g4 = (int32_t)",grp:%ui";
    g9 = *(int32_t *)(4 * g9 + v1);
    g7 = (int32_t)"grp:%ui";
    int32_t v3 = g5 - 424; // 0x4c4d2
    g4 = v3;
    int32_t result = function_1e010(v3, (char)v2 == 0 ? "grp:%ui" : ",grp:%ui"); // 0x4c4df
    g4 = result;
    return result;
}

// Address range: 0x4c4f0 - 0x4c510
int32_t function_4c4f0(void) {
    int32_t result = function_35a40(); // 0x4c4f0
    g4 = result;
    g10 = g5 - 1448;
    g8 = result;
    return result;
}

// Address range: 0x4c5ab - 0x4c5ae
int32_t function_4c5ab(void) {
    // 0x4c5ab
    return g4;
}

// Address range: 0x4c5cc - 0x4c63b
int32_t function_4c5cc(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7af3bd); // 0x4c5cc
    int32_t v2 = *v1 - 1; // 0x4c5cc
    *v1 = v2;
    if (v2 != 0) {
        // 0x4c5d4
        g9 = g292;
        int32_t v3 = *(int32_t *)(g292 + 28); // 0x4c5da
        g9 = v3;
        g7 = *(int32_t *)v3;
    }
    // 0x4c5e9
    g4 = g292;
    int32_t v4; // ebp
    g9 = v4 - 28;
    *(int32_t *)(g6 + 12) = (int32_t)g450;
    g4 = 1;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return 1;
}

// Address range: 0x4c640 - 0x4c641
int32_t function_4c640(void) {
    // 0x4c640
    return g4;
}

// Address range: 0x4c690 - 0x4c691
int32_t function_4c690(void) {
    // 0x4c690
    return g4;
}

// Address range: 0x4c6c0 - 0x4c6d8
int32_t function_4c6c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a1fbb); // 0x4c6c0
    int32_t v2 = *v1 - 1; // 0x4c6c0
    *v1 = v2;
    int32_t v3 = g4;
    int32_t result; // 0x4c6cb
    if (v2 != 0) {
        // 0x4c6c8
        result = function_28600(v3);
        g4 = result;
    } else {
        result = v3;
    }
    // 0x4c6d0
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x4c6d8 - 0x4c6d9
int32_t function_4c6d8(void) {
    // 0x4c6d8
    return g4;
}

// Address range: 0x4c6fe - 0x4c6ff
int32_t function_4c6fe(void) {
    // 0x4c6fe
    return g4;
}

// Address range: 0x4c702 - 0x4c801
int32_t function_4c702(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x5dddd045); // 0x4c702
    *v1 = *v1 - 1;
    int32_t v2; // bp-3
    int32_t v3 = &v2; // bp-4090
    g5 = &v3;
    int32_t v4 = g4; // 0x4c711
    unsigned char v5 = (char)v4 + 81; // 0x4c711
    int32_t v6 = (int32_t)v5 | v4 & -256; // 0x4c711
    g4 = v6;
    g10++;
    char * v7 = (char *)v6; // 0x4c714
    *v7 = *v7 | v5;
    int128_t v8; // xmm0
    int128_t v9 = __asm_cvtpd2ps(v8); // 0x4c716
    int32_t v10 = __asm_movss_1646(v9); // 0x4c71a
    g4 = function_275d0(g4, (char *)v10, (float80_t)(int80_t)&g870);
    int32_t v11 = g6; // 0x4c728
    int32_t v12 = *(int32_t *)(v11 + 8); // 0x4c728
    g4 = v12;
    int32_t v13 = *(int32_t *)(v11 + 12); // 0x4c72b
    g9 = v13;
    int32_t v14;
    g4 = function_27600(v14, "pingxuid", v12, v13);
    uint32_t v15 = *(int32_t *)(g6 + 24); // 0x4c749
    g9 = v15 / 256 & (int32_t)&g862;
    g7 = v15 / 0x10000 & (int32_t)&g862;
    int32_t v16 = 64 * g561 + (int32_t)&g562; // 0x4c790
    g4 = v16;
    function_2da40(v16, 64, "%u.%u.%u.%u:%i");
    int32_t v17 = g561; // 0x4c79d
    int32_t v18 = 64 * v17 + (int32_t)&g562; // 0x4c7b4
    bool v19 = llvm_ctpop_i8((char)v18) % 2 == 0; // pf
    g9 = v18;
    g561 = (v17 + 1) % 4;
    g4 = g284;
    g4 = function_37860(g284, v14, v18, 0);
    int128_t v20 = __asm_xorps(v9, v9); // 0x4c7d7
    __asm_ucomiss(v20, *(int32_t *)(g6 + (int32_t)&g55));
    g9 = 1;
    int32_t v21 = v18 != 0 ? 1 : g4 & -256 | (int32_t)v19; // 0x4c7e9
    g4 = v21;
    if ((char)v21 == 0) {
        // bb
        g4 = function_4c850();
    }
    int32_t v22 = g8 + 1; // 0x4c7f0
    g8 = v22;
    if (*(int32_t *)(g10 + 60) <= v22) {
        // bb258
        g4 = function_4c690();
    }
    int32_t result = function_4c6d8(); // 0x4c7fc
    g4 = result;
    return result;
}

// Address range: 0x4c80c - 0x4c846
int32_t function_4c80c(void) {
    int128_t v1 = __asm_movups(*(int128_t *)(g6 + (int32_t)&g55)); // 0x4c80e
    int32_t v2 = g5 - 72; // 0x4c815
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4c818
    __asm_ucomisd(v4, __asm_cvtps2pd(v1));
    bool v5; // cf
    bool v6; // zf
    if (v5 || v6) {
        // bb
        g4 = function_4c6fe();
    }
    int32_t v7 = *(int32_t *)(g5 - 60); // 0x4c82a
    g4 = v7;
    function_4e220(v7, g8);
    int32_t result = g6; // 0x4c839
    g4 = result;
    g8--;
    return result;
}

// Address range: 0x4c850 - 0x4c851
int32_t function_4c850(void) {
    // 0x4c850
    return g4;
}

// Address range: 0x4c854 - 0x4c85a
int32_t function_4c854(void) {
    // 0x4c854
    return g4;
}

// Address range: 0x4c85a - 0x4c883
int32_t function_4c85a(void) {
    // 0x4c85a
    int32_t v1; // ebp
    int32_t v2 = v1 - 72; // 0x4c85a
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4c85d
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x4c862
    int128_t v6 = __asm_addsd(v4, __asm_cvtps2pd(v5)); // 0x4c86a
    int128_t v7 = __asm_unpcklpd(v6, v6); // 0x4c86e
    int32_t v8 = __asm_movss_1646(__asm_cvtpd2ps(v7)); // 0x4c876
    *(int32_t *)(g6 + (int32_t)&g55) = v8;
    return g4;
}

// Address range: 0x4c884 - 0x4c885
int32_t function_4c884(void) {
    // 0x4c884
    return g4;
}

// Address range: 0x4c892 - 0x4c89a
int32_t function_4c892(void) {
    int32_t result = g4 & -24; // 0x4c892
    g4 = result;
    g8 = -0x76fffd1e;
    return result;
}

// Address range: 0x4c8b0 - 0x4c8b1
int32_t function_4c8b0(int32_t a1) {
    // 0x4c8b0
    return g4;
}

// Address range: 0x4c8be - 0x4c8c4
int32_t function_4c8be(void) {
    // 0x4c8be
    return g4;
}

// Address range: 0x4c8f5 - 0x4c913
int32_t function_4c8f5(int32_t a1, int32_t a2) {
    // 0x4c8f5
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x4c8f5
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4c8f8
    *(int32_t *)(g6 + 72) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    *(int32_t *)(v1 + 8) = g6;
    g6 = a1;
    int32_t result = function_4c640(); // 0x4c90e
    g4 = result;
    return result;
}

// Address range: 0x4c918 - 0x4c925
int32_t function_4c918(int32_t a1, int32_t a2) {
    // 0x4c918
    int32_t v1; // ebp
    *(int32_t *)(v1 + 8) = g6;
    g6 = a1;
    int32_t result = function_4be70((int32_t)&g870); // 0x4c920
    g4 = result;
    return result;
}

// Address range: 0x4c930 - 0x4c96d
int32_t function_4c930(int32_t a1) {
    int32_t v1 = g5; // 0x4c930
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x4c933
    g6 = a1;
    int32_t result; // 0x4c968
    if (*(char *)(a1 + 16) == 0) {
        // 0x4c960
        g6 = v3;
        g5 = v1;
        result = function_4c8b0(a1);
        g4 = result;
        return result;
    }
    int32_t v4 = *(int32_t *)(a1 + 80); // 0x4c940
    g4 = v4;
    if (v4 < 0 || v4 >= *(int32_t *)(a1 + 96)) {
        // 0x4c960
        g6 = v3;
        g5 = v1;
        result = function_4c8b0(a1);
        g4 = result;
        return result;
    }
    int32_t result2 = function_4c440(a1); // 0x4c94f
    g4 = result2;
    if ((char)result2 != 0) {
        // 0x4c958
        g6 = v3;
        g5 = v2;
        return result2;
    }
    int32_t v5 = g6;
    // 0x4c960
    g6 = v3;
    g5 = v2;
    result = function_4c8b0(v5);
    g4 = result;
    return result;
}

// Address range: 0x4c970 - 0x4c971
int32_t function_4c970(int32_t a1) {
    // 0x4c970
    return g4;
}

// Address range: 0x4c9a0 - 0x4c9c5
int32_t function_4c9a0(int32_t a1, int32_t a2) {
    // 0x4c9a0
    int32_t v1; // ebp
    int32_t v2 = v1 - 24; // 0x4c9a0
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4c9a3
    __asm_ucomisd_1652(v4, *(int64_t *)(v1 - 16));
    bool v5; // cf
    bool v6; // zf
    if (v5 || v6) {
        // 0x4c9af
        g6 = a1;
        return g4;
    }
    // 0x4c9b8
    *(int32_t *)(v1 + 8) = g6;
    g6 = a1;
    int32_t result = function_4c640(); // 0x4c9c0
    g4 = result;
    return result;
}

// Address range: 0x4ca10 - 0x4cac4
int32_t function_4ca10(int32_t a1) {
    // 0x4ca10
    g9 = 0;
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g190;
    *(int32_t *)(g4 + 4) = (int32_t)&g191;
    *(int32_t *)(g4 + 8) = (int32_t)&g192;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(int32_t *)(g4 + 36) = 0;
    *(int32_t *)(g4 + 40) = 0;
    *(int32_t *)(g4 + 44) = 0;
    *(int32_t *)(g4 + 48) = 0;
    *(int32_t *)(g4 + 52) = 0;
    *(int32_t *)(g4 + 56) = 0;
    *(int32_t *)(g4 + 60) = 0;
    *(int32_t *)(g4 + 64) = 0;
    *(int32_t *)(g4 + 72) = 0;
    *(int32_t *)(g4 + 76) = 0;
    *(int32_t *)(g4 + 80) = 0;
    *(int32_t *)(g4 + 84) = 0;
    *(int32_t *)(g4 + 88) = 0;
    *(int32_t *)(g4 + 92) = 0;
    *(int32_t *)(g4 + 96) = 0;
    *(int32_t *)(g4 + 100) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(char *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = g9;
    *(int32_t *)(g4 + 24) = g9;
    *(int32_t *)(g4 + 68) = 0;
    return g4;
}

// Address range: 0x4cad0 - 0x4cad1
int32_t function_4cad0(int32_t a1) {
    // 0x4cad0
    return g4;
}

// Address range: 0x4cbb4 - 0x4cbbd
int32_t function_4cbb4(void) {
    // 0x4cbb4
    *(int32_t *)(g6 + 52) = 0;
    g9 = 0;
    return g4;
}

// Address range: 0x4cbbd - 0x4cbf8
int32_t function_4cbbd(void) {
    int32_t v1 = g6; // 0x4cbbd
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x4cbbd
    g4 = v2;
    *(int32_t *)(v1 + 64) = g9;
    if (v2 != 0) {
        // 0x4cbc7
        g9 = g292;
        int32_t v3 = *(int32_t *)(g292 + 28); // 0x4cbcd
        g9 = v3;
        g7 = *(int32_t *)v3;
    }
    int32_t v4 = g6; // 0x4cbdc
    int32_t v5 = *(int32_t *)(v4 + 92); // 0x4cbdc
    g9 = v5;
    *(int32_t *)(v4 + 12) = 0;
    *(int32_t *)(g6 + 96) = 0;
    int32_t v6 = *(int32_t *)(g6 + 84); // 0x4cbed
    g4 = v6;
    int32_t v7; // 0x4cbf2
    if (v5 < 0) {
        // bb
        v7 = function_4cc1a();
        g4 = v7;
    } else {
        v7 = v6;
    }
    int32_t result; // 0x4cbf6
    if (v7 == 0) {
        // bb232
        result = function_4cc11();
        g4 = result;
    } else {
        result = v7;
    }
    // 0x4cbf8
    return result;
}

// Address range: 0x4cc11 - 0x4cc1a
int32_t function_4cc11(void) {
    // 0x4cc11
    *(int32_t *)(g6 + 88) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x4cc1a - 0x4cc3d
int32_t function_4cc1a(void) {
    // 0x4cc1a
    *(int32_t *)(g6 + 100) = g4;
    int32_t v1 = g6 + 84; // 0x4cc1d
    g4 = v1;
    g4 = function_4e250(v1);
    int32_t v2 = g6; // 0x4cc28
    int32_t v3 = *(int32_t *)(v2 + 56); // 0x4cc28
    g4 = v3;
    *(int32_t *)(v2 + 60) = 0;
    int32_t v4 = *(int32_t *)(g6 + 48); // 0x4cc34
    g4 = v4;
    int32_t v5; // 0x4cc37
    if (v3 < 0) {
        // bb
        v5 = function_4cc5f();
        g4 = v5;
    } else {
        v5 = v4;
    }
    int32_t result; // 0x4cc3b
    if (v5 == 0) {
        // bb4
        result = function_4cc56();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x4cc3d
    return result;
}

// Address range: 0x4cc56 - 0x4cc5f
int32_t function_4cc56(void) {
    // 0x4cc56
    *(int32_t *)(g6 + 52) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x4cc5f - 0x4cc7f
int32_t function_4cc5f(void) {
    // 0x4cc5f
    *(int32_t *)(g6 + 64) = g4;
    g4 = function_4e290(g8);
    int32_t v1 = g6; // 0x4cc6a
    int32_t v2 = *(int32_t *)(v1 + 36); // 0x4cc6a
    g4 = v2;
    *(int32_t *)(v1 + 40) = 0;
    int32_t v3 = *(int32_t *)(g6 + 28); // 0x4cc76
    g4 = v3;
    int32_t v4; // 0x4cc79
    if (v2 < 0) {
        // bb
        v4 = function_4cca1((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v4;
    } else {
        v4 = v3;
    }
    int32_t result; // 0x4cc7d
    if (v4 == 0) {
        // bb4
        result = function_4cc98();
        g4 = result;
    } else {
        result = v4;
    }
    // 0x4cc7f
    return result;
}

// Address range: 0x4cc98 - 0x4cca1
int32_t function_4cc98(void) {
    // 0x4cc98
    *(int32_t *)(g6 + 32) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x4cca1 - 0x4ccb6
int32_t function_4cca1(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4cca1
    *(int32_t *)(g6 + 44) = g4;
    int32_t v1 = g5; // 0x4cca4
    int32_t v2 = *(int32_t *)(v1 - 28); // 0x4cca4
    g4 = v2;
    *(int32_t *)(v1 + 8) = v2;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    int32_t result = function_4e290((int32_t)&g870); // 0x4ccb1
    g4 = result;
    return result;
}

// Address range: 0x4cd22 - 0x4cd23
int32_t function_4cd22(void) {
    // 0x4cd22
    return g4;
}

// Address range: 0x4cd37 - 0x4cd38
int32_t function_4cd37(void) {
    // 0x4cd37
    return g4;
}

// Address range: 0x4cd45 - 0x4cd4c
int32_t function_4cd45(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x7640143d); // 0x4cd45
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x4cd4c - 0x4cd56
int32_t function_4cd4c(void) {
    int32_t result = function_4e290(g8); // 0x4cd4f
    g4 = result;
    return result;
}

// Address range: 0x4cd56 - 0x4cd5a
int32_t function_4cd56(void) {
    int32_t result = g4; // 0x4cd56
    g10 = result;
    return result;
}

// Address range: 0x4cd5a - 0x4cd69
int32_t function_4cd5a(void) {
    int32_t v1 = g6 + 84; // 0x4cd5a
    g6 = v1;
    g10 = g4;
    int32_t result = function_4e250(v1); // 0x4cd62
    g4 = result;
    return result;
}

// Address range: 0x4cd70 - 0x4cd8f
int32_t function_4cd70(int32_t a1) {
    int32_t v1 = g6; // 0x4cd73
    g6 = a1;
    g4 = function_4cad0(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x4cd8a
    g4 = result;
    return result;
}

// Address range: 0x4cd90 - 0x4cdd2
int32_t function_4cd90(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4cd90
    g4 = g292;
    g7 = a3;
    int32_t v1 = *(int32_t *)(g292 + 28); // 0x4cdb1
    g4 = v1;
    g9 = *(int32_t *)v1;
    g7 = a2;
    int32_t result; // 0x4cdcc
    if (v1 == 0) {
        // bb
        result = function_4d17b((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v1;
    }
    // 0x4cdd2
    return result;
}

// Address range: 0x4cdf4 - 0x4cdfd
int32_t function_4cdf4(void) {
    int32_t v1 = g4; // 0x4cdf4
    int32_t v2 = v1 & ((int32_t)&g862 | -256); // 0x4cdf4
    g4 = v2;
    char * v3 = (char *)v2; // 0x4cdf6
    *v3 = *v3 + (char)(v1 & (int32_t)&g862);
    int32_t v4 = g4; // 0x4cdf8
    int32_t result = g7 / 256 + v4 & 255 | v4 & -256; // 0x4cdf8
    g4 = result;
    return result;
}

// Address range: 0x4ce5f - 0x4ce62
int32_t function_4ce5f(void) {
    // 0x4ce5f
    return g4;
}

// Address range: 0x4ce75 - 0x4ce7e
int32_t function_4ce75(void) {
    int32_t v1 = g7; // 0x4ce75
    g7 = g4 + v1 & 255 | v1 & -256;
    int32_t result = function_d2b60f10(); // 0x4ce77
    g4 = result;
    return result;
}

// Address range: 0x4ceac - 0x4ceaf
int32_t function_4ceac(void) {
    // 0x4ceac
    return g4;
}

// Address range: 0x4d17b - 0x4d183
int32_t function_4d17b(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4d17b
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x4d188 - 0x4d510
int32_t function_4d188(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = function_1bc00((int32_t)&g56); // 0x4d18f
    g4 = v1;
    *(int32_t *)(g5 - 72) = v1;
    g4 = function_4bba0(g4);
    int32_t v2 = *(int32_t *)(g5 - 72); // 0x4d19f
    g4 = v2;
    *(char *)(v2 + (int32_t)&g51) = 0;
    *(char *)(g4 + (int32_t)&g52) = 0;
    *(char *)(g4 + (int32_t)&g53) = 0;
    g9 = *(int32_t *)(g5 - 60);
    *(int32_t *)(g4 + 8) = g10;
    *(int32_t *)(g4 + 12) = g6;
    g7 = *(int32_t *)(g5 - 72);
    *(int32_t *)g4 = (int32_t)&g193;
    *(int16_t *)(g4 + 28) = 0;
    *(int16_t *)(g4 + 30) = 0;
    g10 = g9;
    *(int32_t *)(g4 + 32) = 0;
    g8 = g7;
    int32_t v3 = g10 + 236; // 0x4d1e0
    g10 = v3;
    *(int32_t *)(g4 + (int32_t)&g50) = 0;
    int32_t v4 = g8 + (int32_t)&g23; // 0x4d1f0
    g8 = v4;
    *(char *)(g4 + 399) = 0;
    *(char *)(g4 + 200) = 0;
    *(char *)(g4 + 106) = 0;
    *(char *)(g4 + 74) = 0;
    *(char *)(g4 + 42) = 0;
    *(char *)(g4 + 189) = 0;
    *(char *)(g4 + 188) = 0;
    *(char *)(g4 + 41) = 0;
    *(char *)(g4 + 40) = 0;
    *(int32_t *)(g4 + 196) = 0;
    *(int32_t *)(g4 + 192) = 0;
    *(int32_t *)(g4 + 184) = 0;
    *(int32_t *)(g4 + 180) = 0;
    *(int32_t *)(g4 + 176) = 0;
    *(int32_t *)(g4 + 172) = 0;
    *(int32_t *)(g4 + 36) = 0;
    *(char *)(g4 + (int32_t)&g23) = 0;
    *(int32_t *)(g4 + (int32_t)&g55) = 0;
    uint16_t v5 = *(int16_t *)g9; // 0x4d27a
    g4 = v5;
    *(int16_t *)(g7 + 28) = v5;
    uint16_t v6 = *(int16_t *)(g9 + 2); // 0x4d281
    g4 = v6;
    *(int16_t *)(g7 + 30) = v6;
    int32_t v7 = *(int32_t *)(g9 + 4); // 0x4d289
    g4 = v7;
    *(int32_t *)(g7 + 32) = v7;
    int32_t v8 = *(int32_t *)(g9 + 8); // 0x4d28f
    g4 = v8;
    *(int32_t *)(g7 + 36) = v8;
    unsigned char v9 = *(char *)(g9 + 12); // 0x4d295
    g4 = v9;
    *(char *)(g7 + 40) = v9;
    unsigned char v10 = *(char *)(g9 + 13); // 0x4d29c
    g4 = v10;
    *(char *)(g7 + 41) = v10;
    int32_t v11 = *(int32_t *)(g9 + 14); // 0x4d2a3
    g4 = v11;
    *(int32_t *)(g7 + 42) = v11;
    int32_t v12 = *(int32_t *)(g9 + 18); // 0x4d2a9
    g4 = v12;
    *(int32_t *)(g7 + 46) = v12;
    int32_t v13 = *(int32_t *)(g9 + 22); // 0x4d2af
    g4 = v13;
    *(int32_t *)(g7 + 50) = v13;
    int32_t v14 = *(int32_t *)(g9 + 26); // 0x4d2b5
    g4 = v14;
    *(int32_t *)(g7 + 54) = v14;
    int32_t v15 = *(int32_t *)(g9 + 30); // 0x4d2bb
    g4 = v15;
    *(int32_t *)(g7 + 58) = v15;
    int32_t v16 = *(int32_t *)(g9 + 34); // 0x4d2c1
    g4 = v16;
    *(int32_t *)(g7 + 62) = v16;
    int32_t v17 = *(int32_t *)(g9 + 38); // 0x4d2c7
    g4 = v17;
    *(int32_t *)(g7 + 66) = v17;
    int32_t v18 = *(int32_t *)(g9 + 42); // 0x4d2cd
    g4 = v18;
    *(int32_t *)(g7 + 70) = v18;
    int32_t v19 = *(int32_t *)(g9 + 46); // 0x4d2d3
    g4 = v19;
    *(int32_t *)(g7 + 74) = v19;
    int32_t v20 = *(int32_t *)(g9 + 50); // 0x4d2d9
    g4 = v20;
    *(int32_t *)(g7 + 78) = v20;
    int32_t v21 = *(int32_t *)(g9 + 54); // 0x4d2df
    g4 = v21;
    *(int32_t *)(g7 + 82) = v21;
    int32_t v22 = *(int32_t *)(g9 + 58); // 0x4d2e5
    g4 = v22;
    *(int32_t *)(g7 + 86) = v22;
    int32_t v23 = *(int32_t *)(g9 + 62); // 0x4d2eb
    g4 = v23;
    *(int32_t *)(g7 + 90) = v23;
    int32_t v24 = *(int32_t *)(g9 + 66); // 0x4d2f1
    g4 = v24;
    *(int32_t *)(g7 + 94) = v24;
    int32_t v25 = *(int32_t *)(g9 + 70); // 0x4d2f7
    g4 = v25;
    *(int32_t *)(g7 + 98) = v25;
    int32_t v26 = *(int32_t *)(g9 + 74); // 0x4d2fd
    g4 = v26;
    *(int32_t *)(g7 + 102) = v26;
    int32_t v27 = *(int32_t *)(g9 + 78); // 0x4d303
    g4 = v27;
    *(int32_t *)(g7 + 106) = v27;
    int32_t v28 = *(int32_t *)(g9 + 82); // 0x4d309
    g4 = v28;
    *(int32_t *)(g7 + 110) = v28;
    int32_t v29 = *(int32_t *)(g9 + 86); // 0x4d30f
    g4 = v29;
    *(int32_t *)(g7 + 114) = v29;
    int32_t v30 = *(int32_t *)(g9 + 90); // 0x4d315
    g4 = v30;
    *(int32_t *)(g7 + 118) = v30;
    int32_t v31 = *(int32_t *)(g9 + 94); // 0x4d31b
    g4 = v31;
    *(int32_t *)(g7 + 122) = v31;
    int32_t v32 = *(int32_t *)(g9 + 98); // 0x4d321
    g4 = v32;
    *(int32_t *)(g7 + 126) = v32;
    int32_t v33 = *(int32_t *)(g9 + 102); // 0x4d327
    g4 = v33;
    *(int32_t *)(g7 + 130) = v33;
    int32_t v34 = *(int32_t *)(g9 + 106); // 0x4d330
    g4 = v34;
    *(int32_t *)(g7 + 134) = v34;
    int32_t v35 = *(int32_t *)(g9 + 110); // 0x4d339
    g4 = v35;
    *(int32_t *)(g7 + 138) = v35;
    int32_t v36 = *(int32_t *)(g9 + 114); // 0x4d342
    g4 = v36;
    *(int32_t *)(g7 + 142) = v36;
    int32_t v37 = *(int32_t *)(g9 + 118); // 0x4d34b
    g4 = v37;
    *(int32_t *)(g7 + 146) = v37;
    int32_t v38 = *(int32_t *)(g9 + 122); // 0x4d354
    g4 = v38;
    *(int32_t *)(g7 + 150) = v38;
    int32_t v39 = *(int32_t *)(g9 + 126); // 0x4d35d
    g4 = v39;
    *(int32_t *)(g7 + 154) = v39;
    int32_t v40 = *(int32_t *)(g9 + 130); // 0x4d366
    g4 = v40;
    *(int32_t *)(g7 + 158) = v40;
    int32_t v41 = *(int32_t *)(g9 + 134); // 0x4d372
    g4 = v41;
    *(int32_t *)(g7 + 162) = v41;
    int32_t v42 = *(int32_t *)(g9 + 138); // 0x4d37e
    g4 = v42;
    *(int32_t *)(g7 + 166) = v42;
    int32_t v43 = *(int32_t *)(g9 + 144); // 0x4d38a
    g4 = v43;
    *(int32_t *)(g7 + 172) = v43;
    int32_t v44 = *(int32_t *)(g9 + 148); // 0x4d396
    g4 = v44;
    *(int32_t *)(g7 + 176) = v44;
    int32_t v45 = *(int32_t *)(g9 + 152); // 0x4d3a2
    g4 = v45;
    *(int32_t *)(g7 + 180) = v45;
    int32_t v46 = *(int32_t *)(g9 + 156); // 0x4d3ae
    g4 = v46;
    *(int32_t *)(g7 + 184) = v46;
    unsigned char v47 = *(char *)(g9 + 160); // 0x4d3ba
    g4 = v47;
    *(char *)(g7 + 188) = v47;
    unsigned char v48 = *(char *)(g9 + 161); // 0x4d3c7
    g4 = v48;
    *(char *)(g7 + 189) = v48;
    int32_t v49 = *(int32_t *)(g9 + 164); // 0x4d3d4
    g4 = v49;
    *(int32_t *)(g7 + 192) = v49;
    int32_t v50 = *(int32_t *)(g9 + 168); // 0x4d3e0
    g4 = v50;
    *(int32_t *)(g7 + 196) = v50;
    int32_t v51 = *(int32_t *)(g9 + 172); // 0x4d3ec
    g4 = v51;
    *(int32_t *)(g7 + 200) = v51;
    int32_t v52 = *(int32_t *)(g9 + 176); // 0x4d3f8
    g4 = v52;
    *(int32_t *)(g7 + 204) = v52;
    int32_t v53 = *(int32_t *)(g9 + 180); // 0x4d404
    g4 = v53;
    *(int32_t *)(g7 + 208) = v53;
    int32_t v54 = *(int32_t *)(g9 + 184); // 0x4d410
    g4 = v54;
    *(int32_t *)(g7 + 212) = v54;
    int32_t v55 = *(int32_t *)(g9 + 188); // 0x4d41c
    g4 = v55;
    *(int32_t *)(g7 + 216) = v55;
    int32_t v56 = *(int32_t *)(g9 + 192); // 0x4d428
    g4 = v56;
    *(int32_t *)(g7 + 220) = v56;
    int32_t v57 = *(int32_t *)(g9 + 196); // 0x4d434
    g4 = v57;
    *(int32_t *)(g7 + 224) = v57;
    int32_t v58 = *(int32_t *)(g9 + 200); // 0x4d440
    g4 = v58;
    *(int32_t *)(g7 + 228) = v58;
    int32_t v59 = *(int32_t *)(g9 + 204); // 0x4d44c
    g4 = v59;
    *(int32_t *)(g7 + 232) = v59;
    int32_t v60 = *(int32_t *)(g9 + 208); // 0x4d458
    g4 = v60;
    *(int32_t *)(g7 + 236) = v60;
    int32_t v61 = *(int32_t *)(g9 + 212); // 0x4d464
    g4 = v61;
    *(int32_t *)(g7 + 240) = v61;
    int32_t v62 = *(int32_t *)(g9 + 216); // 0x4d470
    g4 = v62;
    *(int32_t *)(g7 + (int32_t)&g855) = v62;
    int32_t v63 = *(int32_t *)(g9 + 220); // 0x4d47c
    g4 = v63;
    *(int32_t *)(g7 + (int32_t)&g856) = v63;
    int32_t v64 = *(int32_t *)(g9 + 224); // 0x4d488
    g4 = v64;
    *(int32_t *)(g7 + (int32_t)&g858) = v64;
    int32_t v65 = *(int32_t *)(g9 + 228); // 0x4d494
    g4 = v65;
    *(int32_t *)(g7 + (int32_t)"GNU") = v65;
    int32_t v66 = *(int32_t *)(g9 + 232); // 0x4d4a0
    g4 = v66;
    *(int32_t *)(g7 + (int32_t)&g19) = v66;
    g7 = 32;
    __asm_rep_movsd_memcpy((char *)v4, (char *)v3, 32);
    bool v67; // df
    int32_t v68 = (v67 ? -128 : 128) + v4; // 0x4d4b1
    g8 = v68;
    g10 = v68;
    g7 = 0;
    int32_t v69 = *(int32_t *)(g5 - 60); // 0x4d4b3
    g7 = v69;
    g4 = *(int32_t *)(v69 + (int32_t)&g39);
    int32_t v70 = *(int32_t *)(v69 + (int32_t)&g40); // 0x4d4bc
    g9 = v70;
    int32_t v71 = *(int32_t *)(g5 - 72); // 0x4d4c2
    g7 = v71;
    *(int32_t *)(v71 + (int32_t)&g51) = v70;
    g9 = *(int32_t *)(g5 - 60);
    *(int32_t *)(g7 + (int32_t)&g50) = g4;
    uint16_t v72 = *(int16_t *)g9; // 0x4d4d4
    g4 = v72;
    *(int16_t *)(g7 + 20) = v72;
    uint16_t v73 = *(int16_t *)(g9 + 2); // 0x4d4db
    g4 = v73;
    *(int16_t *)(g7 + 22) = v73;
    *(int32_t *)(g7 + 24) = *(int32_t *)(g9 + 4);
    int32_t v74 = g5 - 32; // 0x4d4e9
    g4 = v74;
    *(int32_t *)v74 = g7;
    int32_t v75 = *(int32_t *)(g5 + 8); // 0x4d4ef
    g7 = v75;
    int32_t v76 = g4; // 0x4d4f2
    int32_t v77 = *(int32_t *)(v75 + 60); // 0x4d4f6
    g4 = v77;
    int32_t v78 = *(int32_t *)(g5 - 64); // 0x4d4fd
    g4 = v78;
    int32_t result = function_4e400(v78, v77, v76); // 0x4d503
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x4d510 - 0x4d6e2
int32_t function_4d510(int32_t a1, int32_t a2) {
    // 0x4d510
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 72);
    g4 = function_1bc40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x4d543
    int32_t v4 = g10; // 0x4d544
    int32_t v5 = g6; // 0x4d545
    g6 = a2;
    int32_t v6 = function_25190(a2); // 0x4d552
    g4 = v6;
    g10 = v6;
    int32_t v7 = function_2cc30(v6, "OnNetLanConnectionlessPacket"); // 0x4d564
    g4 = v7;
    if (v7 != 0) {
        // bb
        g4 = function_4d9f8();
    }
    // 0x4d571
    g8 = (int32_t)"LanSearchServerPing";
    g10 = 0;
    int32_t v8 = (int32_t)"LanSearchServerPing"; // 0x4d595
    int32_t result; // 0x4d658
    int32_t v9; // 0x4d59c
    while (true) {
        // 0x4d58d
        v9 = function_27340(g6, v8, 0);
        g4 = v9;
        if (v9 != 0) {
            // break -> 0x4d5a9
            break;
        }
        int32_t v10 = g10; // 0x4d670
        int32_t v11 = v10 + 1; // 0x4d670
        g10 = v11;
        if (v10 == 2) {
            int32_t v12 = function_27340(g6, (int32_t)"GameDetailsServer", 0); // 0x4d69b
            g4 = v12;
            g10 = v12;
            if (v12 != 0) {
                float80_t v13 = function_27d60(v12, "LanSearchServerPing/timestamp", 0); // 0x4d6b9
                g868 = v13;
                g4 = (float32_t)v13;
                int128_t v14; // xmm1
                int128_t v15 = __asm_xorps(v14, v14); // 0x4d6be
                g879 = v15;
                g13++;
                int128_t v16 = __asm_movss((int32_t)(float32_t)g868); // 0x4d6c7
                __asm_ucomiss_1648(v16, v15);
                if (g865) {
                    // 0x4d6da
                    __asm_movss_1646(v16);
                    return g4;
                }
                // 0x4d6d4
                if (g882) {
                    // bb271
                    g4 = function_4daa0();
                    // 0x4d6da
                    __asm_movss_1646(v16);
                    return g4;
                }
                // 0x4d6da
                __asm_movss_1646(v16);
                return g4;
            }
            result = 0;
            goto lab_0x4d65d;
        }
        int32_t v17 = *(int32_t *)(4 * v11 - 52 + g5); // 0x4d678
        g8 = v17;
        v8 = v17;
    }
    int32_t v18 = (int32_t)g450; // 0x4d5ac
    g4 = v18;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g10 = v18;
    if (g450 != NULL) {
        int32_t v19 = function_27340(v18, (int32_t)"server", 0); // 0x4d5e5
        g4 = v19;
        if (v19 != 0) {
            int32_t v20 = function_27340(g10, g8, 1); // 0x4d5fd
            g4 = v20;
            g9 = v9;
            g4 = function_2a090(v20, v9, 1);
            int32_t v21 = function_27c00(g6, "from", (int32_t *)&g129); // 0x4d62c
            g4 = g284;
            g4 = function_37860(g284, g10, v21, 1);
        }
        // 0x4d655
        g4 = v18;
        result = function_28600(v18);
        g4 = result;
    } else {
        result = 0;
    }
    goto lab_0x4d65d;
  lab_0x4d65d:
    // 0x4d65d
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result;
}

// Address range: 0x4d737 - 0x4d975
int32_t function_4d737(void) {
    int32_t v1 = function_27c00(g10, "server/adronline", NULL); // 0x4d74a
    g4 = v1;
    int32_t v2 = g5; // 0x4d760
    g8 = v2 - 40;
    *(int32_t *)(v2 - 128) = v1;
    g4 = function_2c6c0((int32_t *)g8, 0);
    g4 = function_2c870((int32_t *)g8, 0);
    g4 = function_2c6d0((int32_t *)g8, 3);
    g4 = function_2c6d0((int32_t *)g8, 3);
    g4 = function_2c870((int32_t *)g8, (int32_t)&g109);
    int32_t v3 = *(int32_t *)(g5 - 128); // 0x4d7b6
    g4 = v3;
    function_2c890(g8, v3, 0);
    int32_t v4 = g5 - 100; // 0x4d7cd
    g4 = v4;
    g4 = function_2c6c0((int32_t *)v4, 0);
    int32_t v5 = g5 - 100; // 0x4d7e0
    g9 = v5;
    g4 = function_2c870((int32_t *)v5, 0);
    int32_t v6 = g5 - 100; // 0x4d7f3
    g7 = v6;
    function_2c6d0((int32_t *)v6, 3);
    int32_t v7 = g5 - 88; // 0x4d806
    g4 = v7;
    g4 = function_2c6c0((int32_t *)v7, 0);
    int32_t v8 = g5 - 88; // 0x4d819
    g9 = v8;
    g4 = function_2c870((int32_t *)v8, 0);
    int32_t v9 = g5 - 88; // 0x4d82c
    g7 = v9;
    function_2c6d0((int32_t *)v9, 3);
    g7 = g5 - 100;
    g4 = g281;
    g9 = *(int32_t *)g281;
    int32_t v10 = function_2c700(g8); // 0x4d863
    g4 = v10;
    *(int32_t *)(g5 - 120) = v10;
    int32_t v11 = function_2c6f0(g8) & (int32_t)&g863; // 0x4d876
    g4 = v11;
    *(int32_t *)(g5 - 124) = v11;
    int32_t v12 = function_26d60(g10); // 0x4d87c
    g4 = v12;
    g10 = v12;
    g4 = function_262d0(v12);
    int32_t v13 = function_27340(g10, (int32_t)"LanSearch", 0); // 0x4d8a6
    g4 = v13;
    if (v13 != 0) {
        // 0x4d8af
        *(int32_t *)(g5 - 128) = v13;
        g4 = function_25fe0(g10, v13);
        int32_t v14 = *(int32_t *)(g5 - 128); // 0x4d8be
        g4 = v14;
        g4 = function_28600(v14);
    }
    int32_t v15 = *(int32_t *)(g5 - 116); // 0x4d8c9
    g7 = v15;
    g4 = function_27680(g10, "server/ping", v15);
    int32_t v16 = function_27c00(g6, "from", NULL); // 0x4d8f3
    g4 = v16;
    if (v16 != 0) {
        // 0x4d8fc
        g4 = function_27920(g10, "server/connectstring", (char *)v16);
    }
    int32_t v17 = g5; // 0x4d910
    int32_t * v18 = (int32_t *)(v17 + 8); // 0x4d910
    int32_t v19 = *v18; // 0x4d910
    g9 = v19;
    g7 = *(int32_t *)(v17 - 120);
    int32_t v20 = *(int32_t *)v19; // 0x4d916
    g4 = v20;
    g9 = *(int32_t *)(v17 - 124);
    g7 = *v18;
    g6 = v20;
    *(int32_t *)(v17 - 28) = v20;
    if (v20 == 0) {
        // bb
        g4 = function_4dcc2();
    }
    int32_t v21 = g6; // 0x4d939
    int32_t v22 = *(int32_t *)(v21 + 16); // 0x4d939
    g4 = v22;
    if (v22 == 0) {
        // 0x4d972
        *(int32_t *)(v21 + 16) = g10;
        return g4;
    }
    int32_t v23 = function_27fc0(v22, "server/ping", 0); // 0x4d953
    g4 = v23;
    int32_t v24 = g5; // 0x4d958
    int32_t v25; // 0x4d961
    if (*(int32_t *)(v24 - 116) > v23) {
        // bb18
        g4 = function_4dc86();
        v25 = g5;
    } else {
        v25 = v24;
    }
    int32_t v26 = *(int32_t *)(v25 - 28); // 0x4d961
    g4 = v26;
    int32_t v27 = *(int32_t *)(v26 + 16); // 0x4d964
    g4 = v27;
    g4 = function_28600(v27);
    int32_t v28 = *(int32_t *)(g5 - 28); // 0x4d96f
    g6 = v28;
    // 0x4d972
    *(int32_t *)(v28 + 16) = g10;
    return g4;
}

// Address range: 0x4d97a - 0x4d9f5
int32_t function_4d97a(void) {
    // 0x4d97a
    int32_t v1; // ebp
    int32_t v2 = v1 - 112; // 0x4d97a
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4d97d
    *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    int32_t v5 = function_26cf0(); // 0x4d992
    g4 = v5;
    g6 = v5;
    g4 = function_27a20(v5, "OnMatchServerMgrUpdate", "update", "server");
    int32_t v6 = g5; // 0x4d9b9
    int32_t v7 = *(int32_t *)(v6 - 120); // 0x4d9b9
    g4 = v7;
    int32_t v8 = *(int32_t *)(v6 - 124); // 0x4d9c4
    g9 = v8;
    function_27600(g6, "xuid", v7, v8);
    int32_t result = (int32_t)g450; // 0x4d9d7
    g4 = result;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    return result;
}

// Address range: 0x4d9f8 - 0x4da97
int32_t function_4d9f8(void) {
    // 0x4d9f8
    g4 = function_2cc30((int32_t)"Client::ResendGameDetailsRequest", (char *)g10);
    int32_t v1 = function_26cf0(); // 0x4da17
    g4 = v1;
    g10 = v1;
    g4 = function_26330(v1);
    *(int32_t *)(g5 - 40) = g10;
    int32_t v2 = function_27c00(g6, "to", (int32_t *)&g129); // 0x4da44
    g4 = v2;
    g4 = function_27920(g10, "server", (char *)v2);
    int32_t v3 = function_27c00(g6, "to", (int32_t *)&g129); // 0x4da70
    g4 = g284;
    int32_t result = function_37860(g284, g10, v3, 0); // 0x4da8d
    g4 = result;
    return result;
}

// Address range: 0x4daa0 - 0x4dc30
int32_t function_4daa0(void) {
    int32_t v1 = function_27ea0(g10, "InetSearchServerDetails/pingxuid", 0, 0); // 0x4dabb
    g4 = v1;
    int32_t v2 = g9; // 0x4dac0
    int32_t v3 = v2 | v1; // 0x4dac2
    g7 = v3;
    if (v3 == 0) {
        // 0x4db70
        function_27c00(g10, "ConnectServerDetailsRequest/server", (int32_t *)&g129);
        g4 = g281;
        g9 = *(int32_t *)g281;
        return g281;
    }
    int32_t v4 = g5; // 0x4daca
    int32_t * v5 = (int32_t *)(v4 + 8); // 0x4daca
    int32_t v6 = *v5; // 0x4daca
    g7 = v6;
    g4 = *v5;
    int32_t v7 = v6 + 48; // 0x4dad8
    g7 = v7;
    *(int32_t *)(v4 - 120) = v7;
    int32_t v8 = function_4bc00(g4, g7, v1, v2); // 0x4dae5
    g4 = v8;
    g8 = v8;
    float80_t v9 = function_27d60(g10, "InetSearchServerDetails/timestamp", 0); // 0x4db07
    g4 = (float32_t)v9;
    int128_t v10 = __asm_xorps(g879, g879); // 0x4db0c
    *(float32_t *)(g5 - 156) = (float32_t)v9;
    int128_t v11 = __asm_movss(*(int32_t *)(g5 - 156)); // 0x4db15
    __asm_ucomiss_1648(v11, v10);
    if (g865 || !g882) {
        // 0x4dc28
        *(int32_t *)(g5 - 152) = __asm_movss_1646(v11);
        return g4;
    }
    int32_t v12 = *(int32_t *)(g8 + 36); // 0x4db2c
    g9 = v12;
    *(int32_t *)(g5 - 116) = v12;
    int32_t v13 = g5; // 0x4db32
    int32_t v14 = *(int32_t *)(v13 + 8); // 0x4db32
    g7 = v14;
    int32_t v15 = *(int32_t *)(v14 + 60); // 0x4db35
    g4 = v15;
    int32_t v16; // 0x4db55
    if (v15 < 1) {
        goto lab_0x4db5c;
    } else {
        int32_t v17 = *(int32_t *)(v14 + 48); // 0x4db3c
        g7 = v17;
        g9 = 0;
        int32_t v18 = g8; // 0x4db41
        if (v18 != *(int32_t *)v17) {
            int32_t v19 = 0; // 0x4db55
            while (true) {
                // 0x4db55
                v16 = v19 + 1;
                g9 = v16;
                if (v16 == v15) {
                    // break -> 0x4db5c
                    break;
                }
                // 0x4db50
                if (v18 == *(int32_t *)(4 * v16 + v17)) {
                    if (v19 == -2) {
                        goto lab_0x4db5c;
                    } else {
                        goto lab_0x4dbc5;
                    }
                }
                v19 = v16;
            }
            goto lab_0x4db5c;
        } else {
            v16 = 0;
            goto lab_0x4dbc5;
        }
    }
  lab_0x4db5c:
    // 0x4db5c
    g4 = *(int32_t *)g8;
    int32_t result = function_4d737(); // 0x4db64
    g4 = result;
    return result;
  lab_0x4dbc5:;
    int32_t v20 = *(int32_t *)(v13 - 120); // 0x4dbc5
    g7 = v20;
    g4 = function_4e220(v20, v16);
    goto lab_0x4db5c;
}

// Address range: 0x4dc34 - 0x4dc86
int32_t function_4dc34(void) {
    int128_t v1 = __asm_movups(*(int128_t *)(g5 - 152)); // 0x4dc36
    int32_t v2 = g5 - 168; // 0x4dc3d
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x4dc43
    int128_t v5 = __asm_unpcklps(v1, v1); // 0x4dc4b
    int128_t v6 = __asm_subsd(v4, __asm_cvtps2pd(v5)); // 0x4dc51
    int128_t v7 = __asm_cvtpd2ps(__asm_unpcklpd(v6, v6)); // 0x4dc59
    int32_t v8 = __asm_cvttss2si_1647(__asm_mulss_1654(v7, 0x447a0000)); // 0x4dc65
    g4 = v8;
    *(int32_t *)(g5 - 116) = v8;
    int32_t v9; // 0x4dc6e
    if (v8 < 0) {
        // bb
        v9 = function_4dcb6();
        g4 = v9;
    } else {
        // 0x4dc34
        v9 = g4;
    }
    int32_t v10 = v9 - (int32_t)&g88; // 0x4dc70
    g4 = &g87;
    int32_t * v11 = (int32_t *)(g5 - 116); // 0x4dc7a
    int32_t v12 = *v11; // 0x4dc7a
    int32_t v13 = v10 < 0 != ((v10 ^ v9) & (v9 ^ (int32_t)&g88)) < 0 ? v12 : (int32_t)&g87; // 0x4dc7a
    g4 = v13;
    *v11 = v13;
    return g4;
}

// Address range: 0x4dc86 - 0x4dcb6
int32_t function_4dc86(void) {
    int32_t v1 = 9 * g4; // 0x4dc86
    g7 = v1;
    g9 = 0x66666667;
    int32_t v2 = (*(int32_t *)(g5 - 116) + v1) / 10; // 0x4dca6
    g9 = v2;
    int32_t result = function_27680(g10, "server/ping", v2); // 0x4dcac
    g4 = result;
    return result;
}

// Address range: 0x4dcb6 - 0x4dcc2
int32_t function_4dcb6(void) {
    // 0x4dcb6
    *(int32_t *)(g5 - 116) = 0;
    return g4;
}

// Address range: 0x4dcc2 - 0x4dd3f
int32_t function_4dcc2(void) {
    int32_t v1 = function_1bc00(28); // 0x4dcc9
    g4 = v1;
    g6 = v1;
    g4 = function_4bba0(v1);
    g9 = *(int32_t *)(g5 - 124);
    *(int32_t *)(g5 - 28) = g6;
    g4 = *(int32_t *)(g5 - 120);
    *(int32_t *)(g6 + 12) = g9;
    *(int32_t *)(g6 + 8) = g4;
    int32_t v2 = function_2c6f0(g8); // 0x4dcea
    g4 = v2;
    g6 = v2;
    int32_t v3 = function_2c6f0(g8); // 0x4dcf4
    g4 = v3;
    g7 = v3;
    *(int32_t *)(g5 - 128) = v3;
    int32_t v4 = function_2c720(g8); // 0x4dd01
    g4 = v4;
    g9 = v4;
    int32_t v5 = *(int32_t *)(g5 - 28); // 0x4dd08
    g4 = v5;
    *(int16_t *)(v5 + 20) = (int16_t)g6;
    g7 = *(int32_t *)(g5 - 128);
    *(int32_t *)(g4 + 24) = g9;
    *(int16_t *)(g4 + 22) = (int16_t)g7;
    int32_t v6 = *(int32_t *)(g5 + 8); // 0x4dd19
    g7 = v6;
    int32_t v7 = g5 - 28; // 0x4dd1c
    g4 = v7;
    int32_t v8 = v6 + 28; // 0x4dd2c
    g4 = v8;
    int32_t result = function_4e400(v8, *(int32_t *)(v6 + 40), v7); // 0x4dd32
    g4 = result;
    g6 = *(int32_t *)(g5 - 28);
    return result;
}

// Address range: 0x4dd3f - 0x4de4f
int32_t function_4dd3f(int32_t a1) {
    // 0x4dd3f
    g10 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x4dd4c
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g5 - 40; // 0x4dd65
    g4 = v2;
    g4 = function_1fc30(v2);
    g6 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5 - 40; // 0x4dd7a
    g4 = v3;
    g4 = function_1fc30(v3);
    int32_t v4 = function_7ab57(g6, (int32_t)&g870); // 0x4dd88
    g4 = v4;
    g10 = v4;
    g4 = function_1bc40();
    function_7ab57(g10, (int32_t)&g870);
    g4 = g292;
    int32_t v5 = g10; // 0x4ddab
    int32_t v6 = g6; // 0x4ddae
    g10 = a1;
    int32_t v7 = g8; // 0x4ddb4
    int32_t v8 = *(int32_t *)(g292 + 8); // 0x4ddb7
    g6 = v8;
    if (v8 == 0) {
        // 0x4ddbe
        g6 = v6;
        g4 = 0;
        g10 = v5;
        return 0;
    }
    int32_t v9 = *(int32_t *)(g292 + 4); // 0x4ddd0
    g4 = v9;
    if (v9 == 0) {
        // 0x4ddbe
        g6 = v6;
        g4 = 0;
        g10 = v5;
        return 0;
    }
    int32_t v10 = *(int32_t *)v8; // 0x4ddd7
    g4 = v10;
    if (v10 == 0) {
        // 0x4ddbe
        g6 = v6;
        g4 = 0;
        g10 = v5;
        return 0;
    }
    int32_t v11 = a1 + 84; // 0x4ddea
    g4 = v11;
    function_4e550(v11, v10);
    g4 = v10;
    int32_t v12 = g10;
    if (v10 >= 1) {
        // 0x4ddfc
        g8 = 0;
        g10 = v8;
        int32_t v13; // bp-36
        int32_t v14 = &v13; // 0x4de12
        int32_t v15 = 0; // 0x4de1a
        g4 = v12;
        int32_t v16 = 4 * v15; // 0x4de0b
        g6 = v16;
        g9 = v14;
        g6 = *(int32_t *)(v12 + 84) + v16;
        *(int32_t *)(g11 + 8) = v15;
        g8++;
        *(int32_t *)(g11 + 4) = g10;
        *(int32_t *)g11 = v14;
        g4 = v13;
        *(int32_t *)g6 = v13;
        while (g8 != v10) {
            // 0x4de08
            v15 = g8;
            g4 = v12;
            v16 = 4 * v15;
            g6 = v16;
            g9 = v14;
            g6 = *(int32_t *)(v12 + 84) + v16;
            *(int32_t *)(g11 + 8) = v15;
            g8++;
            *(int32_t *)(g11 + 4) = g10;
            *(int32_t *)g11 = v14;
            g4 = v13;
            *(int32_t *)g6 = v13;
        }
        // 0x4de38
        g10 = v12;
    }
    // 0x4de3b
    g6 = v6;
    g10 = v5;
    g8 = v7;
    int32_t result = function_4c440(v12); // 0x4de4a
    g4 = result;
    return result;
}

// Address range: 0x4de50 - 0x4de62
int32_t function_4de50(int32_t a1) {
    // 0x4de50
    int32_t v1; // bp-4
    g5 = &v1;
    g6 = a1;
    return g4;
}

// Address range: 0x4de67 - 0x4de77
int32_t function_4de67(void) {
    int32_t v1 = g6; // 0x4de67
    int32_t v2; // 0x4de6d
    if (*(int32_t *)(v1 + 68) >= 6) {
        // bb
        g4 = function_4ded8();
        v2 = g6;
    } else {
        v2 = v1;
    }
    int32_t result = *(int32_t *)(v2 + 68); // 0x4de6d
    g4 = result;
    return result;
}

// Address range: 0x4de86 - 0x4de8c
int32_t function_4de86(void) {
    // 0x4de86
    return g4;
}

// Address range: 0x4de8c - 0x4ded1
int32_t function_4de8c(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 76)); // 0x4de8c
    int128_t v2 = __asm_addss(v1, *(int32_t *)(g4 + 44)); // 0x4de91
    int32_t v3 = g5 - 80; // 0x4de96
    float80_t v4; // st7
    *(float64_t *)v3 = (float64_t)v4;
    int128_t v5 = __asm_movsd_1649(*(int64_t *)v3); // 0x4de99
    int128_t v6 = __asm_unpcklps(v2, v2); // 0x4de9e
    __asm_ucomisd(v5, __asm_cvtps2pd(v6));
    bool v7; // cf
    bool v8; // zf
    if (v7 || v8) {
        // bb
        g4 = function_4def0();
    }
    // 0x4deaa
    g4 = g292;
    int32_t * v9 = (int32_t *)(g6 + 12); // 0x4deaf
    g7 = *v9;
    int32_t v10 = *(int32_t *)(g292 + 28); // 0x4deb2
    g4 = v10;
    g9 = *(int32_t *)v10;
    *v9 = 0;
    *(int32_t *)(g6 + 68) = 4;
    int32_t result = function_4def0(); // 0x4decf
    g4 = result;
    return result;
}

// Address range: 0x4ded8 - 0x4dedc
int32_t function_4ded8(void) {
    int32_t result = function_4def0(); // 0x4deda
    g4 = result;
    return result;
}

// Address range: 0x4dee0 - 0x4dee4
int32_t function_4dee0(void) {
    // 0x4dee0
    g13++;
    int32_t result = function_4def0(); // 0x4dee2
    g4 = result;
    return result;
}

// Address range: 0x4dee8 - 0x4dee9
int32_t function_4dee8(void) {
    // 0x4dee8
    return g4;
}

// Address range: 0x4def0 - 0x4defd
int32_t function_4def0(void) {
    // 0x4def0
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x4df00 - 0x4df10
int32_t function_4df00(void) {
    // 0x4df00
    if ((char)g4 != 0) {
        // bb
        g4 = function_4def0();
    }
    int32_t result = function_4df12(); // 0x4df0e
    g4 = result;
    return result;
}

// Address range: 0x4df10 - 0x4df12
float80_t function_4df10(void) {
    // 0x4df10
    float80_t result; // st7
    return result;
}

// Address range: 0x4df12 - 0x4df27
int32_t function_4df12(void) {
    int32_t result = function_4c930(g6); // 0x4df15
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x4df30 - 0x4df47
int32_t function_4df30(void) {
    int32_t result = function_4c970(g6); // 0x4df35
    g4 = result;
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x4df50 - 0x4e198
int32_t function_4df50(void) {
    // 0x4df50
    if (*(char *)(g6 + 16) == 0) {
        // bb
        g4 = function_4dee0();
    }
    // 0x4df56
    float80_t v1; // st7
    *(float64_t *)(g5 - 72) = (float64_t)v1;
    int32_t v2 = function_35b40(); // 0x4df59
    g4 = v2;
    bool v3 = false; // cf
    bool v4 = (char)v2 == 0; // zf
    if ((char)v2 != 0) {
        // bb252
        g4 = function_4dee8();
    }
    int32_t v5 = g5 - 80; // 0x4df65
    *(float64_t *)v5 = (float64_t)(float80_t)*(float64_t *)(g5 - 72);
    int128_t v6 = __asm_movsd_1649(*(int64_t *)v5); // 0x4df68
    int128_t v7 = __asm_cvtpd2ps(__asm_unpcklpd(v6, v6)); // 0x4df71
    __asm_ucomiss(v7, *(int32_t *)(g6 + 20));
    *(int32_t *)(g5 - 48) = __asm_movss_1646(v7);
    if (!v3 && !v4) {
        // 0x4e18b
        g4 = function_4bc90(g6);
        int32_t result = function_4def0(); // 0x4e193
        g4 = result;
        return result;
    }
    int128_t v8 = __asm_movss(*(int32_t *)(g5 - 48)); // 0x4df84
    __asm_ucomiss(v8, *(int32_t *)(g6 + 24));
    if (v3 || v4) {
        // bb253
        g4 = function_4def0();
    }
    // 0x4df93
    g4 = g557;
    int128_t v9 = __asm_movss(*(int32_t *)(g557 + 44)); // 0x4df98
    int128_t v10 = v9; // xmm0
    uint32_t v11 = *(int32_t *)(g6 + 40); // 0x4df9d
    g4 = v11;
    *(int32_t *)(g5 - 44) = __asm_movss_1646(v9);
    if (v11 >= 1) {
        int32_t v12 = g6 + 48; // 0x4dfad
        g4 = v12;
        v3 = false;
        v4 = true;
        g10 = 0;
        *(int32_t *)(g5 - 56) = v12;
        while (true) {
            // 0x4dfe8
            g4 = *(int32_t *)(g6 + 28);
            g8 = 4 * g10;
            int128_t v13 = __asm_movss(*(int32_t *)(g5 - 48)); // 0x4dff2
            int32_t v14 = *(int32_t *)(4 * g10 + g4); // 0x4dff7
            g4 = v14;
            int128_t v15 = __asm_subss_1651(v13, *(int32_t *)(v14 + 4)); // 0x4dffa
            __asm_ucomiss_1648(v15, v10);
            if (v3 || v4) {
                int128_t v16 = __asm_subss(v10, v15); // 0x4dfc0
                int128_t v17 = __asm_movss(*(int32_t *)(g5 - 44)); // 0x4dfc4
                *(int32_t *)(g5 - 44) = __asm_movss_1646(__asm_minss(v17, v16));
            } else {
                int32_t v18 = g4; // 0x4e004
                int32_t v19 = *(int32_t *)v18; // 0x4e004
                g9 = v19;
                int32_t v20 = *(int32_t *)(g5 - 56); // 0x4e012
                g9 = v20;
                int32_t v21 = function_4bc00(g6, v20, v18, v19); // 0x4e01d
                g4 = v21;
                if (v21 == 0) {
                    int32_t v22 = function_1bc00((int32_t)&g56); // 0x4e02d
                    g4 = v22;
                    *(int32_t *)(g5 - 52) = v22;
                    g4 = function_4bba0(g4);
                    int32_t v23 = *(int32_t *)(g5 - 52); // 0x4e03d
                    g4 = v23;
                    *(int32_t *)v23 = (int32_t)&g193;
                    *(int16_t *)(g4 + 28) = 0;
                    *(int16_t *)(g4 + 30) = 0;
                    *(int32_t *)(g4 + 32) = 0;
                    *(int32_t *)(g4 + (int32_t)&g50) = 0;
                    *(char *)(g4 + (int32_t)&g54) = 0;
                    *(char *)(g4 + (int32_t)&g51) = 0;
                    *(char *)(g4 + (int32_t)&g52) = 0;
                    *(char *)(g4 + (int32_t)&g53) = 0;
                    *(char *)(g4 + 200) = 0;
                    *(char *)(g4 + 106) = 0;
                    *(char *)(g4 + 74) = 0;
                    *(char *)(g4 + 42) = 0;
                    *(char *)(g4 + 189) = 0;
                    *(char *)(g4 + 188) = 0;
                    *(char *)(g4 + 41) = 0;
                    *(char *)(g4 + 40) = 0;
                    *(int32_t *)(g4 + 196) = 0;
                    *(int32_t *)(g4 + 192) = 0;
                    *(int32_t *)(g4 + 184) = 0;
                    *(int32_t *)(g4 + 180) = 0;
                    *(int32_t *)(g4 + 176) = 0;
                    *(int32_t *)(g4 + 172) = 0;
                    *(int32_t *)(g4 + 36) = 0;
                    *(char *)(g4 + (int32_t)&g23) = 0;
                    *(int32_t *)(g4 + (int32_t)&g55) = 0;
                    int32_t v24 = *(int32_t *)(g6 + 28); // 0x4e0fc
                    g4 = v24;
                    int32_t v25 = *(int32_t *)(g8 + v24); // 0x4e0ff
                    g4 = v25;
                    g9 = *(int32_t *)v25;
                    int32_t v26 = *(int32_t *)(g5 - 52); // 0x4e109
                    g7 = v26;
                    *(int32_t *)(v26 + 8) = v25;
                    *(int32_t *)(g7 + 12) = g9;
                    int32_t v27 = *(int32_t *)(g6 + 28); // 0x4e112
                    g4 = v27;
                    g4 = *(int32_t *)(g8 + v27);
                    *(int32_t *)(g5 - 28) = g7;
                    uint16_t v28 = *(int16_t *)(g4 + 20); // 0x4e11b
                    g9 = v28;
                    *(int16_t *)(g7 + 20) = v28;
                    uint16_t v29 = *(int16_t *)(g4 + 22); // 0x4e123
                    g9 = v29;
                    *(int16_t *)(g7 + 22) = v29;
                    g9 = *(int32_t *)(g5 - 56);
                    *(int32_t *)(g7 + 24) = *(int32_t *)(g4 + 24);
                    int32_t v30 = g5 - 28; // 0x4e134
                    g4 = v30;
                    int32_t v31 = *(int32_t *)(g6 + 60); // 0x4e13b
                    g4 = v31;
                    g4 = function_4e400(g9, v31, v30);
                }
            }
            uint32_t v32 = g10 + 1; // 0x4dfd2
            g10 = v32;
            uint32_t v33 = *(int32_t *)(g6 + 40); // 0x4dfd5
            v3 = v33 < v32;
            v4 = v33 == v32;
            if (v33 <= v32) {
                // break -> 0x4e170
                break;
            }
            // 0x4dfde
            g4 = g557;
            v10 = __asm_movss(*(int32_t *)(g557 + 44));
        }
    }
    int128_t v34 = __asm_movss(*(int32_t *)(g5 - 48)); // 0x4e170
    *(int32_t *)(g6 + 68) = 5;
    int128_t v35 = __asm_addss(v34, *(int32_t *)(g5 - 44)); // 0x4e17c
    *(int32_t *)(g6 + 24) = __asm_movss_1646(v35);
    int32_t result2 = function_4def0(); // 0x4e186
    g4 = result2;
    return result2;
}

// Address range: 0x4e198 - 0x4e1c5
int32_t function_4e198(int32_t a1) {
    // 0x4e198
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 52);
    g4 = function_1bc40();
    int32_t result = function_7ab57(g6, (int32_t)&g870); // 0x4e1a8
    g4 = result;
    return result;
}

// Address range: 0x4e1d0 - 0x4e1e2
int32_t function_4e1d0(int32_t a1) {
    // 0x4e1d0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g193;
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_4bb50((int32_t)&g870); // 0x4e1dd
    g4 = result;
    return result;
}

// Address range: 0x4e1f0 - 0x4e215
int32_t function_4e1f0(int32_t a1) {
    int32_t v1 = g6; // 0x4e1f3
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g193;
    g4 = function_4bb50(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x4e210
    g4 = result;
    return result;
}

// Address range: 0x4e220 - 0x4e24c
int32_t function_4e220(int32_t result, int32_t a2) {
    int32_t v1 = g5; // bp-4
    int32_t v2 = g6; // 0x4e223
    g4 = result;
    g7 = a2;
    int32_t v3 = *(int32_t *)(result + 12); // 0x4e22a
    g9 = v3;
    if (v3 < 1) {
        // 0x4e249
        g6 = v2;
        return result;
    }
    int32_t v4 = v3 - 1; // 0x4e231
    g9 = v4;
    int32_t v5; // 0x4e240
    int32_t v6; // 0x4e243
    if (v4 != a2) {
        int32_t v7 = *(int32_t *)result; // 0x4e238
        g6 = v7;
        int32_t v8 = *(int32_t *)(v7 + 4 * v4); // 0x4e23a
        g9 = v8;
        *(int32_t *)(v7 + 4 * a2) = v8;
        v5 = g4;
        v6 = *(int32_t *)(v5 + 12) - 1;
        g9 = v6;
    } else {
        v5 = result;
        v6 = v4;
    }
    // 0x4e246
    *(int32_t *)(v5 + 12) = v6;
    // 0x4e249
    g6 = v2;
    g5 = v1;
    return g4;
}

// Address range: 0x4e250 - 0x4e267
int32_t function_4e250(int32_t a1) {
    // 0x4e250
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4e25a
    g4 = v1;
    int32_t v2; // 0x4e261
    if (v1 < 0) {
        // bb
        g4 = function_4e286((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x4e261
    g4 = v3;
    int32_t result; // 0x4e265
    if (v3 == 0) {
        // bb7
        result = function_4e27f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x4e267
    return result;
}

// Address range: 0x4e27f - 0x4e286
int32_t function_4e27f(void) {
    // 0x4e27f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x4e286 - 0x4e28c
int32_t function_4e286(int32_t a1, int32_t a2) {
    // 0x4e286
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x4e290 - 0x4e2a7
int32_t function_4e290(int32_t a1) {
    // 0x4e290
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4e29a
    g4 = v1;
    int32_t v2; // 0x4e2a1
    if (v1 < 0) {
        // bb
        g4 = function_4e2c6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x4e2a1
    g4 = v3;
    int32_t result; // 0x4e2a5
    if (v3 == 0) {
        // bb7
        result = function_4e2bf();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x4e2a7
    return result;
}

// Address range: 0x4e2bf - 0x4e2c6
int32_t function_4e2bf(void) {
    // 0x4e2bf
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x4e2c6 - 0x4e2cc
int32_t function_4e2c6(int32_t a1, int32_t a2) {
    // 0x4e2c6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x4e2d0 - 0x4e2ee
int32_t function_4e2d0(int32_t a1) {
    // 0x4e2d0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4e2da
    g4 = v1;
    *(int32_t *)(a1 + 12) = 0;
    int32_t v2 = *(int32_t *)g6; // 0x4e2e6
    g4 = v2;
    int32_t v3; // 0x4e2e8
    if (v1 < 0) {
        // bb
        v3 = function_4e30f((int32_t)&g870, (int32_t)&g870);
        g4 = v3;
    } else {
        v3 = v2;
    }
    int32_t result; // 0x4e2ec
    if (v3 == 0) {
        // bb233
        result = function_4e306();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x4e2ee
    return result;
}

// Address range: 0x4e306 - 0x4e30f
int32_t function_4e306(void) {
    // 0x4e306
    *(int32_t *)(g6 + 4) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x4e30f - 0x4e31f
int32_t function_4e30f(int32_t a1, int32_t a2) {
    // 0x4e30f
    *(int32_t *)(g6 + 16) = g4;
    *(int32_t *)(g5 + 8) = g6;
    g6 = a1;
    g5 = a2;
    int32_t result = function_4e290((int32_t)&g870); // 0x4e31a
    g4 = result;
    return result;
}

// Address range: 0x4e340 - 0x4e390
int32_t function_4e340(int32_t a1, int32_t a2) {
    // 0x4e340
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4e34b
    int64_t v2 = v1; // 0x4e34b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x4e352
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x4e358
    g7 = v4;
    int32_t v5; // 0x4e378
    if (v1 == 0) {
        // bb
        g4 = function_4e3b8();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x4e35e
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x4e366
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x4e36b
    g4 = v8;
    int32_t v9; // 0x4e389
    if (v5 > v8) {
        // 0x4e372
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x4e378
        int32_t v11 = v10 < 0; // 0x4e37c
        int32_t v12 = (v11 + v10) / 2; // 0x4e381
        while (v5 > v12) {
            // 0x4e378
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x4e387
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x4e387
    int32_t v14 = *(int32_t *)v13; // 0x4e387
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x4e38e
    if (v14 == 0) {
        // bb20
        result = function_4e3df();
        g4 = result;
    } else {
        // 0x4e387
        result = g4;
    }
    // 0x4e390
    return result;
}

// Address range: 0x4e3b8 - 0x4e3df
int32_t function_4e3b8(void) {
    int32_t v1 = g4; // 0x4e3b8
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x4e3bf
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x4e3d0
    while (g7 > v3) {
        // 0x4e3d0
        v3 *= 2;
    }
    // 0x4e3d6
    g4 = v3;
    int32_t v4 = g6; // 0x4e3d6
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x4e3df - 0x4e3e0
int32_t function_4e3df(void) {
    // 0x4e3df
    return g4;
}

// Address range: 0x4e400 - 0x4e486
int32_t function_4e400(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x4e406
    g6 = a1;
    int32_t v2 = g10; // 0x4e40c
    g10 = a2;
    int32_t v3 = g8; // 0x4e412
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x4e415
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x4e418
    g9 = v5;
    int32_t v6; // 0x4e421
    int32_t v7; // 0x4e481
    int32_t v8; // 0x4e481
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x4e476
        g4 = v9;
        g4 = function_4e340(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x4e41f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x4e428
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x4e430
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x4e456
    if (v11 < 1) {
        // 0x4e41f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x4e441
        int32_t v14 = v13 + 4 + 4 * g10; // 0x4e448
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x4e454
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x4e456
    g9 = v16;
    if (v16 != 0) {
        // 0x4e45a
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x4e45d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x4e461
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x4e490 - 0x4e4e0
int32_t function_4e490(int32_t a1, int32_t a2) {
    // 0x4e490
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x4e49b
    int64_t v2 = v1; // 0x4e49b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x4e4a2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x4e4a8
    g7 = v4;
    int32_t v5; // 0x4e4c8
    if (v1 == 0) {
        // bb
        g4 = function_4e508();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x4e4ae
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x4e4b6
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x4e4bb
    g4 = v8;
    int32_t v9; // 0x4e4d9
    if (v5 > v8) {
        // 0x4e4c2
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x4e4c8
        int32_t v11 = v10 < 0; // 0x4e4cc
        int32_t v12 = (v11 + v10) / 2; // 0x4e4d1
        while (v5 > v12) {
            // 0x4e4c8
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x4e4d7
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x4e4d7
    int32_t v14 = *(int32_t *)v13; // 0x4e4d7
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x4e4de
    if (v14 == 0) {
        // bb20
        result = function_4e52f();
        g4 = result;
    } else {
        // 0x4e4d7
        result = g4;
    }
    // 0x4e4e0
    return result;
}

// Address range: 0x4e508 - 0x4e52f
int32_t function_4e508(void) {
    int32_t v1 = g4; // 0x4e508
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x4e50f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x4e520
    while (g7 > v3) {
        // 0x4e520
        v3 *= 2;
    }
    // 0x4e526
    g4 = v3;
    int32_t v4 = g6; // 0x4e526
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x4e52f - 0x4e530
int32_t function_4e52f(void) {
    // 0x4e52f
    return g4;
}

// Address range: 0x4e550 - 0x4e5e7
int32_t function_4e550(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x4e556
    g10 = a2;
    int32_t v2 = g6; // 0x4e55c
    g6 = a1;
    int32_t v3 = g8; // 0x4e562
    *(int32_t *)(a1 + 12) = 0;
    if (a2 == 0) {
        // 0x4e57f
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return g4;
    }
    int32_t v4 = g6; // 0x4e570
    uint32_t v5 = *(int32_t *)(v4 + 4); // 0x4e570
    g4 = v5;
    int32_t v6 = a2 - v5; // 0x4e573
    if (v5 >= a2) {
        // 0x4e577
        g4 = *(int32_t *)v4;
        *(int32_t *)(v4 + 12) = a2;
        *(int32_t *)(g6 + 16) = g4;
        // 0x4e57f
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return g4;
    }
    // 0x4e590
    g9 = v6;
    int32_t v7 = function_4e490(v4, v6); // 0x4e59b
    g4 = v7;
    int32_t * v8 = (int32_t *)(g6 + 12); // 0x4e5a0
    int32_t v9 = *v8; // 0x4e5a0
    g9 = v9;
    g7 = (int32_t)(v9 >= 0 == (v9 != 0)) | g7 & -256;
    g8 = v7 & -256 | (int32_t)(a2 >= 0);
    int32_t v10 = v9 + a2; // 0x4e5af
    g4 = v10;
    *v8 = v10;
    int32_t v11 = g6; // 0x4e5b5
    int32_t v12 = *(int32_t *)v11; // 0x4e5b5
    g4 = v12;
    *(int32_t *)(v11 + 16) = v12;
    int32_t v13 = g8; // 0x4e5ba
    g6 = v13;
    if ((char)v13 == 0 || (char)g7 == 0) {
        // 0x4e57f
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return g4;
    }
    int32_t v14 = g4; // 0x4e5c4
    int32_t v15 = v14 + 4 * a2; // 0x4e5c8
    g4 = v15;
    int32_t v16 = 4 * v9; // 0x4e5cb
    g9 = v16;
    int32_t result = function_2cb20(v15, v14, v16); // 0x4e5d5
    g4 = result;
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return result;
}

// Address range: 0x4e5f0 - 0x4e5ff
int32_t function_4e5f0(void) {
    // 0x4e5f0
    return g4;
}

// Address range: 0x4e603 - 0x4e615
int32_t function_4e603(void) {
    int32_t v1 = g4; // 0x4e603
    int32_t * v2 = (int32_t *)(v1 + 0x5d8b1075 + 8 * v1); // 0x4e603
    *v2 = *v2 + 1;
    int32_t result = __asm_hlt(); // 0x4e60a
    g4 = result;
    int32_t v3; // ebp
    g10 = *(int32_t *)(v3 - 8);
    g8 = *(int32_t *)(v3 - 4);
    return result;
}

// Address range: 0x4e63c - 0x4e943
int32_t function_4e63c(void) {
    // 0x4e63c
    *(int32_t *)g6 = g4;
    *(int32_t *)(g6 + 4) = g4;
    int32_t v1 = g6; // 0x4e661
    *(int32_t *)(v1 + 8) = v1;
    int32_t v2 = g6; // 0x4e682
    *(int32_t *)(v2 + 12) = v2;
    int32_t v3 = g6; // 0x4e6a3
    *(int32_t *)(v3 + 16) = v3;
    int32_t v4 = g6; // 0x4e6c8
    *(int32_t *)(v4 + 28) = v4;
    int32_t v5 = g6; // 0x4e6ed
    *(int32_t *)(v5 + 20) = v5;
    int32_t v6 = g6; // 0x4e712
    *(int32_t *)(v6 + 24) = v6;
    int32_t v7 = g6; // 0x4e737
    *(int32_t *)(v7 + 32) = v7;
    int32_t v8 = g6; // 0x4e75c
    *(int32_t *)(v8 + 36) = v8;
    int32_t v9 = g6; // 0x4e781
    *(int32_t *)(v9 + 40) = v9;
    int32_t v10 = g6; // 0x4e7a6
    *(int32_t *)(v10 + 44) = v10;
    int32_t v11 = g6; // 0x4e7cb
    *(int32_t *)(v11 + 48) = v11;
    int32_t v12 = g6; // 0x4e7f0
    *(int32_t *)(v12 + 52) = v12;
    int32_t v13 = g6; // 0x4e815
    *(int32_t *)(v13 + 56) = v13;
    int32_t v14 = g6; // 0x4e83a
    *(int32_t *)(v14 + 60) = v14;
    int32_t v15 = g6; // 0x4e85f
    *(int32_t *)(v15 + 64) = v15;
    int32_t v16 = g6; // 0x4e884
    *(int32_t *)(v16 + 68) = v16;
    int32_t v17 = g6; // 0x4e8a9
    *(int32_t *)(v17 + 72) = v17;
    int32_t v18 = g6; // 0x4e8ce
    *(int32_t *)(v18 + 76) = v18;
    int32_t v19 = g6; // 0x4e8f6
    *(int32_t *)(v19 + 80) = v19;
    int32_t v20 = g6; // 0x4e91e
    g4 = v20;
    g9 = v20;
    *(int32_t *)(v20 + 84) = v20;
    return g4;
}

// Address range: 0x4e950 - 0x4e9f3
int32_t function_4e950(int32_t a1, int32_t a2) {
    // 0x4e950
    g4 = g292;
    *(int32_t *)g292 = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(int32_t *)(g4 + 36) = 0;
    *(int32_t *)(g4 + 44) = 0;
    *(int32_t *)(g4 + 40) = 0;
    *(int32_t *)(g4 + 64) = 0;
    *(int32_t *)(g4 + 48) = 0;
    *(int32_t *)(g4 + 52) = 0;
    *(int32_t *)(g4 + 56) = 0;
    *(int32_t *)(g4 + 60) = 0;
    *(int32_t *)(g4 + 68) = 0;
    *(int32_t *)(g4 + 72) = 0;
    *(int32_t *)(g4 + 76) = 0;
    *(int32_t *)(g4 + 80) = 0;
    *(int32_t *)(g4 + 84) = 0;
    return g4;
}

// Address range: 0x4ea00 - 0x4ea01
int32_t function_4ea00(void) {
    // 0x4ea00
    return g4;
}

// Address range: 0x4ea8b - 0x4eaa0
int32_t function_4ea8b(void) {
    // 0x4ea8b
    g8++;
    g6++;
    int32_t v1 = g4; // 0x4ea8e
    int32_t v2 = v1 & ((int32_t)&g862 | -256); // 0x4ea8e
    g4 = v2;
    char * v3 = (char *)v2; // 0x4ea90
    *v3 = *v3 + (char)(v1 & (int32_t)&g862);
    uint32_t v4 = g6; // 0x4ea92
    unsigned char v5 = (char)(v4 / 256); // 0x4ea92
    int32_t v6 = g4; // 0x4ea92
    char v7 = v6; // 0x4ea92
    unsigned char v8 = v5 + v7; // 0x4ea92
    g6 = (256 * (int32_t)v8 | v4 & -0xff01) + 1;
    char * v9 = (char *)v6; // 0x4ea95
    *v9 = *v9 + v7 + (char)(v8 < v5);
    int32_t v10 = g4; // 0x4ea97
    char * v11 = (char *)v10; // 0x4ea97
    *v11 = *v11 + (char)v10;
    char * v12 = (char *)(g6 + 0x5d5b24c4); // 0x4ea99
    *v12 = (char)g4 + *v12;
    return g4;
}

// Address range: 0x4eab2 - 0x4eaec
int32_t function_4eab2(void) {
    // 0x4eab2
    g8++;
    g6++;
    int32_t v1 = g4; // 0x4eab5
    int32_t v2 = v1 & ((int32_t)&g862 | -256); // 0x4eab5
    g4 = v2;
    char * v3 = (char *)v2; // 0x4eab7
    *v3 = *v3 + (char)(v1 & (int32_t)&g862);
    uint32_t v4 = g6; // 0x4eab9
    int32_t v5 = g4; // 0x4eab9
    g6 = (256 * (v4 / 256 + v5 & 255) | v4 & -0xff01) + 1;
    char * v6 = (char *)v5; // 0x4eabc
    *v6 = *v6 ^ (char)v5;
    int32_t v7 = g4; // 0x4eabe
    char * v8 = (char *)v7; // 0x4eabe
    *v8 = *v8 + (char)v7;
    int32_t v9 = g6; // 0x4eac0
    g6 = (g7 / 256 + v9) % 256 | v9 & -256;
    int32_t v10 = g3 ? -4 : 4; // 0x4eac2
    g8 += v10;
    g10 += v10;
    int32_t v11 = g4; // 0x4eac3
    while (true) {
        // 0x4eac3
        *(int32_t *)(g5 - 12) = v11;
        g4 = function_4f1f0(g6);
        int32_t v12 = *(int32_t *)(g5 - 12); // 0x4eace
        g4 = v12;
        int32_t v13 = function_7ab57(v12, (int32_t)&g870); // 0x4ead4
        g4 = v13;
        g9 = g6 + 32;
        *(int32_t *)(g5 - 12) = v13;
        g4 = function_4f230(g9);
        int32_t v14 = *(int32_t *)(g5 - 12); // 0x4eae7
        g4 = v14;
        v11 = v14;
    }
}

// Address range: 0x4eb46 - 0x4eb67
int32_t function_4eb46(void) {
    // 0x4eb46
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x76bb8b25); // 0x4eb46
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x4eb4c
    bool v4; // cf
    unsigned char v5 = v4 ? 37 : 36; // 0x4eb4c
    g4 = (int32_t)((char)v3 - v5) | v3 & -256;
    g4 = function_4ea00();
    *(int32_t *)(v1 + 8) = g6;
    g10 = *(int32_t *)(v1 - 8);
    g6 = *(int32_t *)(v1 - 12);
    g8 = *(int32_t *)(v1 - 4);
    int32_t result = function_1bc40(); // 0x4eb62
    g4 = result;
    return result;
}

// Address range: 0x4eb8a - 0x4eb9c
int32_t function_4eb8a(int32_t a1) {
    // 0x4eb8a
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x74438a25); // 0x4eb8a
    *v2 = *v2 + 1;
    int32_t result = __asm_hlt(); // 0x4eb91
    g4 = result;
    g10 = *(int32_t *)(a1 - 8);
    g8 = *(int32_t *)(a1 - 4);
    return result;
}

// Address range: 0x4ebbb - 0x4ebbd
int32_t function_4ebbb(void) {
    // 0x4ebbb
    return g4;
}

// Address range: 0x4ebdb - 0x4ebe0
int32_t function_4ebdb(void) {
    // 0x4ebdb
    return g4;
}

// Address range: 0x4ec72 - 0x4ec75
int32_t function_4ec72(void) {
    // 0x4ec72
    return g4;
}

// Address range: 0x4ec9e - 0x4eca4
int32_t function_4ec9e(void) {
    // 0x4ec9e
    return g4;
}

// Address range: 0x4eca4 - 0x4ed36
int32_t function_4eca4(void) {
    int32_t v1 = *(int32_t *)(g4 + 20); // 0x4eca4
    g8 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x4eca7
    g4 = v2;
    int32_t v3 = *(int32_t *)(v2 + 124); // 0x4eca9
    g4 = v3;
    *(int32_t *)(g5 - 32) = v3;
    int32_t v4 = *(int32_t *)(g6 + 64); // 0x4ecbf
    g4 = v4;
    g4 = function_27fc0(v4, ":upload", 0);
    g9 = *(int32_t *)(g5 - 40);
    int32_t v5 = *(int32_t *)(g5 - 28); // 0x4eccd
    g7 = v5;
    g9 = *(int32_t *)(g5 - 36);
    g7 = (v5 + 3) / 4;
    int32_t v6 = g10; // 0x4ece9
    g4 = v6;
    int32_t v7 = *(int32_t *)(v6 + 4); // 0x4eceb
    g9 = v7;
    int32_t v8 = g6; // 0x4ecfc
    int32_t v9 = *(int32_t *)(v8 + 48); // 0x4ecfc
    g7 = v9;
    int32_t v10 = *(int32_t *)(v8 + 44); // 0x4ecff
    g10 = v10;
    int32_t v11 = v10 | v9; // 0x4ed04
    g8 = v11;
    int32_t v12; // 0x4ed0c
    int32_t v13; // 0x4ed0e
    int32_t v14; // 0x4ed06
    if (v11 != 0) {
        // bb
        v14 = function_4edc0();
        g4 = v14;
        v13 = g6;
        v12 = g9;
    } else {
        v13 = v8;
        v14 = v6;
        v12 = v7;
    }
    // 0x4ed0c
    g7 = v12;
    *(int32_t *)(v13 + 44) = v14;
    int32_t v15 = g4 | g7; // 0x4ed11
    g7 = v15;
    *(int32_t *)(g6 + 48) = g9;
    int32_t v16 = g6; // 0x4ed16
    *(int32_t *)(v16 + 52) = v16;
    *(int32_t *)(g6 + 56) = 0x4eaf0;
    *(int32_t *)(g6 + 60) = 0;
    int32_t result; // 0x4ed27
    if (v15 != 0) {
        // bb239
        result = function_4eda0();
        g4 = result;
    } else {
        // 0x4ed0c
        result = g4;
    }
    // 0x4ed29
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x4ed5b - 0x4ed77
int32_t function_4ed5b(void) {
    // 0x4ed5b
    g4 = function_4ea00();
    *(int32_t *)(g5 + 8) = g6;
    int32_t v1 = g5; // 0x4ed66
    g10 = *(int32_t *)(v1 - 8);
    g6 = *(int32_t *)(v1 - 12);
    g8 = *(int32_t *)(v1 - 4);
    int32_t result = function_1bc40(); // 0x4ed72
    g4 = result;
    return result;
}

// Address range: 0x4ed9b - 0x4ed9d
int32_t function_4ed9b(void) {
    int32_t result = function_4ed5b(); // 0x4ed9b
    g4 = result;
    return result;
}

// Address range: 0x4eda0 - 0x4edb8
int32_t function_4eda0(void) {
    // 0x4eda0
    g6 += 32;
    *(int32_t *)(g5 + 12) = g4;
    g10 = *(int32_t *)(g5 - 8);
    *(int32_t *)(g5 + 8) = g6;
    g8 = *(int32_t *)(g5 - 4);
    *(int32_t *)(g5 + 16) = g9;
    g6 = *(int32_t *)(g5 - 12);
    return g4;
}

// Address range: 0x4edc0 - 0x4edd4
int32_t function_4edc0(void) {
    // 0x4edc0
    g7 = g6 + 32;
    *(int32_t *)(g5 - 44) = g4;
    *(int32_t *)(g5 - 40) = g9;
    return g4;
}

// Address range: 0x4edd9 - 0x4ede4
int32_t function_4edd9(void) {
    // 0x4edd9
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 40);
    int32_t result = *(int32_t *)(v1 - 44); // 0x4eddc
    g4 = result;
    return result;
}

// Address range: 0x4edf0 - 0x4eefd
int32_t function_4edf0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4edf0
    g8 = a1;
    g4 = a2;
    *(char *)(a1 + 4) = 0;
    *(int32_t *)g8 = (int32_t)&g194;
    *(int32_t *)(g8 + 12) = 0;
    *(int32_t *)(g8 + 16) = 0;
    *(int32_t *)(g8 + 20) = 0;
    *(int32_t *)(g8 + 24) = 0;
    *(int32_t *)(g8 + 28) = 0;
    *(int32_t *)(g8 + 8) = (int32_t)&g99;
    *(char *)(g8 + 36) = 0;
    *(int32_t *)(g8 + 32) = (int32_t)&g195;
    *(int32_t *)(g8 + 44) = 0;
    *(int32_t *)(g8 + 48) = 0;
    *(int32_t *)(g8 + 52) = 0;
    *(int32_t *)(g8 + 56) = 0;
    *(int32_t *)(g8 + 60) = 0;
    *(int32_t *)(g8 + 40) = (int32_t)&g101;
    int32_t v1 = function_26d60(g4); // 0x4ee6b
    *(int32_t *)(g8 + 64) = v1;
    g4 = a3;
    int32_t v2 = function_26d60(a3); // 0x4ee79
    g4 = v2;
    *(int32_t *)(g8 + 68) = v2;
    int32_t v3 = *(int32_t *)(g8 + 64); // 0x4ee91
    g4 = v3;
    int32_t v4 = function_27fc0(v3, ":nocreate", 0); // 0x4ee97
    g4 = g292;
    int32_t v5 = *(int32_t *)(g292 + 20); // 0x4eea3
    g6 = v5;
    int32_t v6 = *(int32_t *)v5; // 0x4eea6
    g4 = v6;
    int32_t v7; // 0x4eea8
    if (v4 == 0) {
        // bb
        v7 = function_4ef18();
        g4 = v7;
    } else {
        v7 = v6;
    }
    // 0x4eeaa
    g10 = *(int32_t *)(v7 + 92);
    int32_t v8 = *(int32_t *)(g8 + 68); // 0x4eead
    g4 = v8;
    int32_t v9 = function_25190(v8); // 0x4eeb3
    g4 = v9;
    g6 = v9;
    int32_t v10 = g8; // 0x4eec3
    int32_t v11 = *(int32_t *)(v10 + 16); // 0x4eec3
    g4 = v11;
    int32_t v12 = g9; // 0x4eec6
    g10 = v12;
    int32_t v13 = *(int32_t *)(v10 + 12); // 0x4eec8
    g9 = v13;
    int32_t v14 = v13 | v11; // 0x4eecd
    g7 = v14;
    int32_t v15; // 0x4eed5
    int32_t v16; // 0x4eed7
    int32_t v17; // 0x4eed7
    if (v14 != 0) {
        // bb19
        g4 = function_4ef8d();
        v17 = g8;
        v16 = g6;
        v15 = g10;
    } else {
        v17 = v10;
        v16 = v9;
        v15 = v12;
    }
    // 0x4eed5
    g4 = v15;
    *(int32_t *)(v17 + 12) = v16;
    int32_t v18 = g6 | g4; // 0x4eeda
    g4 = v18;
    *(int32_t *)(g8 + 16) = g10;
    int32_t v19 = g8; // 0x4eedf
    *(int32_t *)(v19 + 20) = v19;
    *(int32_t *)(g8 + 24) = 0x4ebe0;
    *(int32_t *)(g8 + 28) = 0;
    int32_t result; // 0x4eef0
    if (v18 == 0) {
        // bb20
        result = function_4ef02((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        // 0x4eed5
        result = g4;
    }
    // 0x4eef2
    return result;
}

// Address range: 0x4ef02 - 0x4ef12
int32_t function_4ef02(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4ef02
    g601++;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x4ef18 - 0x4ef8d
int32_t function_4ef18(void) {
    int32_t v1 = *(int32_t *)(g4 + 88); // 0x4ef18
    g4 = v1;
    *(int32_t *)(g5 - 28) = v1;
    int32_t v2 = *(int32_t *)(g8 + 64); // 0x4ef2e
    g4 = v2;
    int32_t v3 = function_27fc0(v2, ":format", 0); // 0x4ef34
    g4 = v3;
    g10 = v3;
    int32_t v4 = *(int32_t *)(g8 + 64); // 0x4ef4b
    g4 = v4;
    int32_t v5 = function_27fc0(v4, ":sort", 0); // 0x4ef51
    g4 = v5;
    *(int32_t *)(g5 - 32) = v5;
    int32_t v6 = *(int32_t *)(g8 + 68); // 0x4ef59
    g4 = v6;
    int32_t v7 = function_25190(v6); // 0x4ef5f
    g4 = v7;
    int32_t v8 = *(int32_t *)(g5 - 32); // 0x4ef64
    g9 = v8;
    g6 = v7;
    int32_t v9 = g8; // 0x4ef7b
    int32_t result = *(int32_t *)(v9 + 16); // 0x4ef7b
    g4 = result;
    g10 = v8;
    int32_t v10 = *(int32_t *)(v9 + 12); // 0x4ef80
    g9 = v10;
    g7 = v10 | result;
    return result;
}

// Address range: 0x4ef8d - 0x4ef98
int32_t function_4ef8d(void) {
    // 0x4ef8d
    return g4;
}

// Address range: 0x4ef9d - 0x4efa2
int32_t function_4ef9d(void) {
    // 0x4ef9d
    return g4;
}

// Address range: 0x4efa3 - 0x4efa4
int32_t function_4efa3(void) {
    // 0x4efa3
    return g4;
}

// Address range: 0x4efc0 - 0x4eff1
int32_t function_4efc0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x4efc3
    int32_t v2 = function_1bc00(72); // 0x4efce
    g6 = v2;
    g4 = a1;
    int32_t result = function_4edf0(v2, a1, a2); // 0x4efe6
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x4eff1 - 0x4f059
int32_t function_4eff1(int32_t a1, int32_t a2) {
    // 0x4eff1
    int32_t v1; // ebp
    *(int32_t *)(v1 - 12) = g4;
    g4 = function_1bc40();
    int32_t v2 = *(int32_t *)(g5 - 12); // 0x4effc
    g4 = v2;
    function_7ab57(v2, (int32_t)&g870);
    int32_t v3 = g6; // 0x4f013
    g4 = a1;
    g9 = *(int32_t *)(a1 + 24);
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v4 = g4; // 0x4f02b
    int32_t v5 = *(int32_t *)(v4 + 20); // 0x4f02b
    g7 = v5;
    int32_t v6 = *(int32_t *)(v4 + 28); // 0x4f02e
    g4 = v6;
    uint32_t v7 = g9; // 0x4f031
    int32_t result = v6 + v5;
    if (v7 % 2 != 0) {
        int32_t v8 = *(int32_t *)result; // 0x4f036
        g6 = v8;
        g9 = *(int32_t *)(v7 - 1 + v8);
    }
    // 0x4f03d
    g4 = result;
    g6 = v3;
    return result;
}

// Address range: 0x4f060 - 0x4f06a
int32_t function_4f060(void) {
    // 0x4f060
    g4 = 28;
    return 28;
}

// Address range: 0x4f070 - 0x4f0b9
int32_t function_4f070(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x4f073
    g4 = a1;
    g9 = *(int32_t *)(a1 + 24);
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v2 = g4; // 0x4f08b
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x4f08b
    g7 = v3;
    int32_t v4 = *(int32_t *)(v2 + 28); // 0x4f08e
    g4 = v4;
    uint32_t v5 = g9; // 0x4f091
    int32_t result = v4 + v3;
    if (v5 % 2 != 0) {
        int32_t v6 = *(int32_t *)result; // 0x4f096
        g6 = v6;
        g9 = *(int32_t *)(v5 - 1 + v6);
    }
    // 0x4f09d
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x4f0c0 - 0x4f0ca
int32_t function_4f0c0(void) {
    // 0x4f0c0
    g4 = 12;
    return 12;
}

// Address range: 0x4f0d0 - 0x4f152
int32_t function_4f0d0(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5) {
    // 0x4f0d0
    g4 = result;
    int32_t v1 = g6; // 0x4f0d9
    g9 = a4;
    int32_t v2 = g10; // 0x4f0df
    g7 = a5;
    int32_t v3 = g8; // 0x4f0e5
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(result + 12); // 0x4f0ef
    int32_t v5 = *v4 ^ a4; // 0x4f0ef
    g9 = v5;
    int32_t v6 = *(int32_t *)(result + 16) ^ a5 | v5; // 0x4f0f5
    g7 = v6;
    if (v6 != 0) {
        // 0x4f0f9
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x4f110
    g9 = *(int32_t *)(result + 24);
    *v4 = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v7 = g4; // 0x4f121
    int32_t v8 = *(int32_t *)(v7 + 20); // 0x4f121
    g7 = v8;
    int32_t v9 = *(int32_t *)(v7 + 28); // 0x4f124
    g4 = v9;
    uint32_t v10 = g9; // 0x4f127
    int32_t result2 = v9 + v8;
    if (v10 % 2 != 0) {
        int32_t v11 = *(int32_t *)result2; // 0x4f12c
        g8 = v11;
        g9 = *(int32_t *)(v10 - 1 + v11);
    }
    // 0x4f133
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x4f160 - 0x4f1e2
int32_t function_4f160(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5) {
    // 0x4f160
    g4 = result;
    int32_t v1 = g6; // 0x4f169
    g9 = a4;
    int32_t v2 = g10; // 0x4f16f
    g7 = a5;
    int32_t v3 = g8; // 0x4f175
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(result + 12); // 0x4f17f
    int32_t v5 = *v4 ^ a4; // 0x4f17f
    g9 = v5;
    int32_t v6 = *(int32_t *)(result + 16) ^ a5 | v5; // 0x4f185
    g7 = v6;
    if (v6 != 0) {
        // 0x4f189
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x4f1a0
    g9 = *(int32_t *)(result + 24);
    *v4 = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v7 = g4; // 0x4f1b1
    int32_t v8 = *(int32_t *)(v7 + 20); // 0x4f1b1
    g7 = v8;
    int32_t v9 = *(int32_t *)(v7 + 28); // 0x4f1b4
    g4 = v9;
    uint32_t v10 = g9; // 0x4f1b7
    int32_t result2 = v9 + v8;
    if (v10 % 2 != 0) {
        int32_t v11 = *(int32_t *)result2; // 0x4f1bc
        g8 = v11;
        g9 = *(int32_t *)(v10 - 1 + v11);
    }
    // 0x4f1c3
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x4f1f0 - 0x4f217
int32_t function_4f1f0(int32_t a1) {
    // 0x4f1f0
    g6 = a1;
    g4 = *(int32_t *)(a1 + 16);
    *(int32_t *)a1 = (int32_t)&g194;
    int32_t v1 = *(int32_t *)(g6 + 12); // 0x4f203
    g9 = v1;
    int32_t v2 = g4; // 0x4f206
    int32_t v3 = v2 | v1; // 0x4f208
    g7 = v3;
    int32_t result; // 0x4f20a
    if (v3 == 0) {
        // bb
        result = function_4f22a((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v2;
    }
    // 0x4f20c
    return result;
}

// Address range: 0x4f22a - 0x4f230
int32_t function_4f22a(int32_t a1, int32_t a2) {
    // 0x4f22a
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x4f230 - 0x4f257
int32_t function_4f230(int32_t a1) {
    // 0x4f230
    g6 = a1;
    g4 = *(int32_t *)(a1 + 16);
    *(int32_t *)a1 = (int32_t)&g195;
    int32_t v1 = *(int32_t *)(g6 + 12); // 0x4f243
    g9 = v1;
    int32_t v2 = g4; // 0x4f246
    int32_t v3 = v2 | v1; // 0x4f248
    g7 = v3;
    int32_t result; // 0x4f24a
    if (v3 == 0) {
        // bb
        result = function_4f26a((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v2;
    }
    // 0x4f24c
    return result;
}

// Address range: 0x4f26a - 0x4f270
int32_t function_4f26a(int32_t a1, int32_t a2) {
    // 0x4f26a
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x4f270 - 0x4f283
int32_t function_4f270(void) {
    // 0x4f270
    g4 = g297;
    g9 = g297;
    int32_t result = *(int32_t *)(g297 + 8); // 0x4f27e
    g4 = result;
    return result;
}

// Address range: 0x4f290 - 0x4f295
int32_t function_4f290(void) {
    // 0x4f290
    return g4;
}

// Address range: 0x4f2a0 - 0x4f2a5
int32_t function_4f2a0(void) {
    // 0x4f2a0
    return g4;
}

// Address range: 0x4f2b0 - 0x4f2ff
int32_t function_4f2b0(int32_t a1) {
    // 0x4f2b0
    g9 = 1;
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 140); // 0x4f2be
    g4 = v1;
    int32_t result; // 0x4f2fc
    if (v1 == 0) {
        result = 1;
        // 0x4f2fb
        g4 = result;
        return result;
    }
    int32_t v2 = function_27c00(v1, "system/netflag", NULL); // 0x4f2db
    g4 = v2;
    g9 = 0;
    if (v2 != 0) {
        int32_t v3 = function_2cc30((int32_t)"teamlink", (char *)v2); // 0x4f2f1
        g4 = v3;
        int32_t v4 = g9 & -256 | (int32_t)(v3 == 0); // 0x4f2f8
        g9 = v4;
        result = v4;
    } else {
        result = 0;
    }
    // 0x4f2fb
    g4 = result;
    return result;
}

// Address range: 0x4f300 - 0x4f3fb
int32_t function_4f300(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x4f306
    g10 = a2;
    int32_t v2 = g6; // 0x4f30c
    g6 = a1;
    int32_t v3 = g8; // 0x4f312
    int32_t v4 = *(int32_t *)a2; // 0x4f315
    g4 = v4;
    int32_t v5 = *(int32_t *)(a2 + 4); // 0x4f317
    g9 = v5;
    int32_t result = *(int32_t *)(a1 + 124) ^ v4; // 0x4f31a
    g4 = result;
    int32_t v6 = *(int32_t *)(a1 + 128) ^ v5 | result; // 0x4f323
    g9 = v6;
    if (v6 != 0 || (*(char *)(a2 + 24) & 30) == 0) {
        // 0x4f327
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return result;
    }
    int32_t v7 = (int32_t)g290; // 0x4f33e
    g4 = v7;
    g9 = v7;
    int32_t v8 = *(int32_t *)(a2 + 8); // 0x4f35a
    g7 = v8;
    int32_t v9 = *(int32_t *)(a2 + 12); // 0x4f360
    int32_t v10 = v8 ^ v7; // 0x4f36d
    g7 = v10;
    int32_t v11 = v9 ^ v7 | v10; // 0x4f36f
    g8 = v11;
    if (v11 != 0) {
        // 0x4f3e0
        g9 = v8;
        g7 = v9;
        int32_t result2 = *(int32_t *)a1; // 0x4f3e6
        g4 = result2;
        // 0x4f327
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return result2;
    }
    int32_t v12 = *(int32_t *)(a2 + 20) ^ v7; // 0x4f373
    g9 = v12;
    int32_t result3 = *(int32_t *)(a2 + 16) ^ v7; // 0x4f376
    g4 = result3;
    int32_t v13 = result3 | v12; // 0x4f379
    g9 = v13;
    if (v13 == 0) {
        // 0x4f327
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return result3;
    }
    int32_t v14 = function_26cf0(); // 0x4f384
    g4 = v14;
    g10 = v14;
    g4 = function_26330(v14);
    g4 = function_275a0(g10, "syssession", g6);
    g4 = function_27920(g10, "error", "kicked");
    int32_t v15 = *(int32_t *)g6; // 0x4f3c7
    g4 = v15;
    g10 = v1;
    g6 = v2;
    g8 = v3;
    int32_t result4 = *(int32_t *)(v15 + 40); // 0x4f3d8
    g4 = result4;
    return result4;
}

// Address range: 0x4f3fc - 0x4f3fd
int32_t function_4f3fc(void) {
    // 0x4f3fc
    return g4;
}

// Address range: 0x4f443 - 0x4f4ab
int32_t function_4f443(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4f443
    g8++;
    int32_t v1 = g4; // 0x4f445
    int32_t v2 = g9; // 0x4f445
    int32_t v3 = v2 & (int32_t)&g862; // 0x4f445
    int32_t v4 = v3 | v1 & -256; // 0x4f445
    g4 = v4;
    g9 = v2 & -256 | v1 & (int32_t)&g862;
    char * v5 = (char *)v4; // 0x4f447
    *v5 = *v5 + (char)v3;
    *(char *)g6 = (char)g4 + *(char *)&g6;
    int32_t v6 = g4; // 0x4f44b
    char * v7 = (char *)v6; // 0x4f44b
    *v7 = *v7 + (char)v6;
    int32_t v8 = g6; // 0x4f44d
    int32_t v9 = g4; // 0x4f44d
    g6 = 256 * v9 + v8 & 0xff00 | v8 & -0xff01;
    g4 = v9 & -256;
    int32_t v10 = function_26cf0(); // 0x4f455
    g4 = v10;
    g6 = v10;
    g4 = function_26330(v10);
    g4 = function_275a0(g6, "syssession", g10);
    function_27920(g6, "error", "create");
    g4 = g10;
    *(int32_t *)(g5 + 12) = g6;
    *(int32_t *)(g5 + 8) = g10;
    int32_t result = *(int32_t *)(g4 + 40); // 0x4f4a0
    g4 = result;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x4f4ce - 0x4f4cf
int32_t function_4f4ce(void) {
    // 0x4f4ce
    return g4;
}

// Address range: 0x4f508 - 0x4f50a
int32_t function_4f508(void) {
    int32_t result = function_4f4ce(); // 0x4f508
    g4 = result;
    return result;
}

// Address range: 0x4f50a - 0x4f68d
int32_t function_4f50a(int32_t a1, int32_t a2) {
    // 0x4f50a
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g6; // 0x4f529
    g6 = a2;
    int32_t v3 = g10; // 0x4f52f
    int32_t v4 = g8; // 0x4f532
    int32_t v5 = function_27ea0(a2, "xuid", 0, 0); // 0x4f553
    g4 = v5;
    g8 = g9;
    g10 = v5;
    int32_t v6 = function_27e60(g6, (int32_t)"binary/ptr", 0); // 0x4f56f
    g4 = v6;
    int32_t result = function_27fc0(g6, "binary/size", 0); // 0x4f58a
    g4 = result;
    g6 = result;
    if (result == 0) {
        // 0x4f680
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return 0;
    }
    // 0x4f599
    g9 = v6;
    if (v6 == 0) {
        // 0x4f680
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result;
    }
    // 0x4f5a4
    g4 = g618;
    int32_t v7 = *(int32_t *)(g618 + 48); // 0x4f5a9
    g4 = v7;
    if (v7 == 0) {
        int32_t result2 = (int32_t)g283; // 0x4f64d
        g4 = result2;
        g9 = *(int32_t *)g283;
        if ((char)result2 != 0) {
            // 0x4f680
            g6 = v2;
            g10 = v3;
            g8 = v4;
            return result2;
        }
        // 0x4f65c
        g4 = result2;
        g9 = *(int32_t *)g283;
        if ((char)result2 != 0) {
            // 0x4f680
            g6 = v2;
            g10 = v3;
            g8 = v4;
            return result2;
        }
    }
    // 0x4f5b4
    g7 = v6;
    g4 = g282;
    g9 = *(int32_t *)g282;
    int32_t v8 = function_26cf0(); // 0x4f5e6
    g4 = v8;
    g6 = v8;
    int32_t result3 = function_27a20(v8, "OnPlayerActivity", "act", "voice"); // 0x4f608
    g4 = result3;
    if (v8 == 0) {
        // 0x4f680
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result3;
    }
    // 0x4f611
    g4 = function_27600(v8, "xuid", g10, g8);
    g9 = a1;
    g10 = v3;
    g8 = v4;
    int32_t v9 = *(int32_t *)a1; // 0x4f632
    g4 = v9;
    g6 = v2;
    int32_t result4 = *(int32_t *)(v9 + 40); // 0x4f63d
    g4 = result4;
    return result4;
}

// Address range: 0x4f68d - 0x4f889
int32_t function_4f68d(int32_t a1, int32_t a2) {
    // 0x4f68d
    g10 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x4f6a6
    g6 = a2;
    int32_t v3 = g10; // 0x4f6ac
    g10 = a1;
    int32_t v4 = g8; // 0x4f6b2
    int32_t v5 = function_25190(a2); // 0x4f6b8
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_2cc30((int32_t)"SysSession::Quit", (char *)v5); // 0x4f6ca
    g4 = v6;
    if (v6 == 0) {
        int32_t result = function_27ea0(g6, "id", 0, 0); // 0x4f7eb
        g4 = result;
        g6 = g9;
        g9 = *(int32_t *)a1;
        g7 = result;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result;
    }
    int32_t v7 = function_2cc30((int32_t)"SysSession::Command", (char *)g8); // 0x4f6e2
    g4 = v7;
    if (v7 != 0) {
        int32_t result2 = function_2cc30((int32_t)"SysSession::Voice", (char *)g8); // 0x4f7b3
        g4 = result2;
        if (result2 != 0) {
            // 0x4f7bc
            g6 = v2;
            g10 = v3;
            g8 = v4;
            return result2;
        }
        int32_t v8 = *(int32_t *)a1; // 0x4f818
        g4 = v8;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        int32_t result3 = *(int32_t *)(v8 + 52); // 0x4f829
        g4 = result3;
        return result3;
    }
    int32_t v9 = function_26190(g6); // 0x4f6f2
    g4 = v9;
    g8 = v9;
    if (v9 == 0) {
        // 0x4f7bc
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return 0;
    }
    int32_t v10 = function_27c00(v9, "run", (int32_t *)&g129); // 0x4f714
    g4 = v10;
    int32_t v11 = function_2cc30(v10, "all"); // 0x4f727
    g4 = v11;
    if (v11 == 0) {
        int32_t v12 = function_26cf0(); // 0x4f73b
        g4 = v12;
        function_26330(v12);
        g4 = v12;
        g4 = function_275a0(v12, "syssession", a1);
        function_25fe0(g6, g8);
        g4 = v12;
        g4 = function_25fb0(v12, g8);
        g9 = v12;
        int32_t v13 = *(int32_t *)a1; // 0x4f788
        g4 = v13;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        int32_t result4 = *(int32_t *)(v13 + 40); // 0x4f799
        g4 = result4;
        return result4;
    }
    // 0x4f838
    g4 = v10;
    int32_t v14 = function_2cc30(v10, "host"); // 0x4f846
    g4 = v14;
    if (v14 == 0) {
        // bb
        g4 = function_4f900();
    }
    // 0x4f853
    g4 = v10;
    int32_t v15 = function_2cc30(v10, "clients"); // 0x4f861
    g4 = v15;
    int32_t v16; // 0x4f868
    if (v15 != 0) {
        // bb253
        v16 = function_4f8a0();
        g4 = v16;
    } else {
        v16 = v15;
    }
    int32_t result5; // 0x4f86c
    if (a1 == 0) {
        // bb254
        result5 = function_4f8a0();
        g4 = result5;
    } else {
        result5 = v16;
    }
    // 0x4f86e
    return result5;
}

// Address range: 0x4f8a0 - 0x4f900
int32_t function_4f8a0(void) {
    int32_t v1 = *(int32_t *)(g5 - 28); // 0x4f8a0
    g4 = v1;
    g4 = function_2cc30(v1, "xuid");
    int32_t v2 = g10; // 0x4f8bb
    int32_t v3 = *(int32_t *)(v2 + 144); // 0x4f8bb
    g9 = v3;
    g4 = *(int32_t *)(v2 + 148);
    *(int32_t *)(g5 - 28) = v3;
    *(int32_t *)(g5 - 32) = g4;
    int32_t v4 = function_27ea0(g8, "runxuid", 0, 0); // 0x4f8e8
    g4 = v4;
    int32_t v5 = *(int32_t *)(g5 - 32) ^ g9; // 0x4f8ed
    g9 = v5;
    int32_t result = *(int32_t *)(g5 - 28) ^ v4; // 0x4f8f0
    g4 = result;
    g9 = result | v5;
    return result;
}

// Address range: 0x4f900 - 0x4f923
int32_t function_4f900(void) {
    // 0x4f900
    return g4;
}

// Address range: 0x4f928 - 0x4f935
int32_t function_4f928(void) {
    // 0x4f928
    return g4;
}

// Address range: 0x4f935 - 0x4fa9b
int32_t function_4f935(int32_t a1) {
    // 0x4f935
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 28);
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g8; // 0x4f953
    int32_t v3 = g10; // 0x4f954
    int32_t v4 = g6; // 0x4f955
    int32_t v5; // bp-92
    int32_t v6 = &v5; // 0x4f956
    g6 = a1;
    int32_t * v7 = (int32_t *)a1; // 0x4f95c
    g4 = *v7;
    v5 = a1;
    int32_t * v8 = (int32_t *)(a1 + 128); // 0x4f974
    int32_t v9 = *v8; // 0x4f974
    g4 = v9;
    int32_t * v10 = (int32_t *)(a1 + 124); // 0x4f97a
    int32_t v11 = *v10 | v9; // 0x4f97a
    g4 = v11;
    int32_t v12; // 0x4f97f
    if (v11 != 0) {
        int32_t v13 = *v7; // 0x4f9c0
        g4 = v13;
        v5 = a1;
        int32_t v14; // 0x4f9d1
        int32_t v15; // 0x4f9e2
        if ((char)v13 == 0) {
            // 0x4f9f8
            g4 = g292;
            g10 = *v10;
            g8 = *v8;
            int32_t v16 = *(int32_t *)(g292 + 16); // 0x4fa06
            g4 = v16;
            int32_t v17 = *(int32_t *)v16; // 0x4fa09
            g9 = v17;
            g9 = *(int32_t *)(v17 + 68);
            v5 = v16;
            if (v16 >= 1) {
                // 0x4fa22
                int32_t v18; // bp-52
                int32_t v19 = &v18; // 0x4fa22
                g10 = 0;
                g8 = v19;
                int32_t v20 = g292; // 0x4fa30
                g4 = v20;
                int32_t v21 = *(int32_t *)(v20 + 16); // 0x4fa35
                g4 = v21;
                int32_t v22 = *(int32_t *)v21; // 0x4fa38
                g9 = v22;
                g9 = *(int32_t *)(v22 + 72);
                *(int32_t *)(v6 + 16) = 0;
                g10++;
                int32_t v23 = g6; // 0x4fa44
                int32_t v24 = *(int32_t *)(v23 + 128); // 0x4fa44
                g7 = v24;
                g9 = *(int32_t *)(v23 + 124);
                *(int32_t *)(g11 + 12) = v24;
                *(int32_t *)(g11 + 4) = g4;
                *(int32_t *)g11 = v19;
                *(int32_t *)(g11 + 8) = g9;
                g4 = g292;
                g9 = v18;
                int32_t v25 = *(int32_t *)(g292 + 32); // 0x4fa6d
                g4 = v25;
                g7 = *(int32_t *)v25;
                *(int32_t *)(g11 + 8) = 2;
                *(int32_t *)(g11 + 4) = g9;
                *(int32_t *)g11 = g4;
                int32_t v26 = g10; // 0x4fa91
                while (v26 != v16) {
                    // 0x4fa30
                    v20 = g292;
                    g4 = v20;
                    v21 = *(int32_t *)(v20 + 16);
                    g4 = v21;
                    v22 = *(int32_t *)v21;
                    g9 = v22;
                    g9 = *(int32_t *)(v22 + 72);
                    *(int32_t *)(g11 + 16) = v26;
                    g10++;
                    v23 = g6;
                    v24 = *(int32_t *)(v23 + 128);
                    g7 = v24;
                    g9 = *(int32_t *)(v23 + 124);
                    *(int32_t *)(g11 + 12) = v24;
                    *(int32_t *)(g11 + 4) = g4;
                    *(int32_t *)g11 = v19;
                    *(int32_t *)(g11 + 8) = g9;
                    g4 = g292;
                    g9 = v18;
                    v25 = *(int32_t *)(g292 + 32);
                    g4 = v25;
                    g7 = *(int32_t *)v25;
                    *(int32_t *)(g11 + 8) = 2;
                    *(int32_t *)(g11 + 4) = g9;
                    *(int32_t *)g11 = g4;
                    v26 = g10;
                }
                // 0x4f9cc
                v15 = g11;
                v14 = g6;
            } else {
                v15 = v6;
                v14 = a1;
            }
        } else {
            v15 = v6;
            v14 = a1;
        }
        // 0x4f9cc
        g4 = g292;
        int32_t v27 = *(int32_t *)(v14 + 124); // 0x4f9d1
        g10 = v27;
        g8 = *(int32_t *)(v14 + 128);
        int32_t v28 = *(int32_t *)(g292 + 16); // 0x4f9da
        g4 = v28;
        int32_t v29 = *(int32_t *)v28; // 0x4f9dd
        g9 = v29;
        g9 = *(int32_t *)(v29 + 60);
        *(int32_t *)(v15 + 4) = v27;
        *(int32_t *)(g11 + 8) = g8;
        *(int32_t *)g11 = g4;
        v12 = g6;
    } else {
        v12 = a1;
    }
    // 0x4f97f
    g4 = *(int32_t *)v12;
    *(int32_t *)(v12 + 124) = 0;
    *(int32_t *)(g6 + 128) = 0;
    *(int32_t *)(g6 + 132) = 0;
    int32_t result = *(int32_t *)(g4 + 4); // 0x4f9a6
    g4 = result;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x4faa0 - 0x4faa1
int32_t function_4faa0(void) {
    // 0x4faa0
    return g4;
}

// Address range: 0x4face - 0x4faff
int32_t function_4face(void) {
    int128_t v1 = __asm_movups(g621); // 0x4fad0
    g4 = 0;
    int32_t v2; // ebp
    float80_t v3; // st7
    *(float64_t *)(v2 - 16) = (float64_t)v3;
    int128_t v4 = __asm_cvtps2pd(v1); // 0x4fadc
    int128_t v5 = __asm_movss(*(int32_t *)(v2 - 40)); // 0x4fadf
    __asm_ucomisd_1652(v4, *(int64_t *)(v2 - 16));
    // 0x4faf0
    g621 = __asm_movss_1646(v5);
    g4 = 1;
    return 1;
    // 0x4faeb
    return g4;
}

// Address range: 0x4fb09 - 0x4fb35
int32_t function_4fb09(void) {
    // 0x4fb09
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 40)); // 0x4fb0b
    g4 = 0;
    int32_t v3 = v1 - 48; // 0x4fb11
    float80_t v4; // st7
    *(float64_t *)v3 = (float64_t)v4;
    int128_t v5 = __asm_movsd_1649(*(int64_t *)v3); // 0x4fb14
    int128_t v6 = __asm_unpcklps(v2, v2); // 0x4fb19
    int128_t v7 = __asm_addsd(v5, __asm_cvtps2pd(v6)); // 0x4fb1f
    int128_t v8 = __asm_cvtpd2ps(__asm_unpcklpd(v7, v7)); // 0x4fb27
    g621 = __asm_movss_1646(v8);
    return g4;
}

// Address range: 0x4fb40 - 0x4fbaf
int32_t function_4fb40(int32_t a1) {
    // 0x4fb40
    g4 = a1;
    int32_t v1 = g6; // 0x4fb49
    int32_t v2 = *(int32_t *)(a1 + 128); // 0x4fb4f
    g9 = v2;
    int32_t v3 = *(int32_t *)(a1 + 124); // 0x4fb55
    g7 = v3;
    int32_t v4 = v3 | v2; // 0x4fb5a
    g6 = v4;
    if (v4 != 0) {
        // 0x4fb78
        g6 = v1;
        int32_t result;
        return result;
    }
    // 0x4fb5e
    g9 = *(int32_t *)(a1 + 148);
    g6 = v1;
    int32_t result2 = *(int32_t *)(a1 + 144); // 0x4fb67
    g4 = result2;
    return result2;
}

// Address range: 0x4fbb0 - 0x4fc1f
int32_t function_4fbb0(int32_t a1) {
    // 0x4fbb0
    g4 = a1;
    int32_t v1 = g6; // 0x4fbb9
    int32_t v2 = *(int32_t *)(a1 + 128); // 0x4fbbf
    g9 = v2;
    int32_t v3 = *(int32_t *)(a1 + 124); // 0x4fbc5
    g7 = v3;
    int32_t v4 = v3 | v2; // 0x4fbca
    g6 = v4;
    if (v4 != 0) {
        // 0x4fbe8
        g6 = v1;
        int32_t result;
        return result;
    }
    // 0x4fbce
    g9 = *(int32_t *)(a1 + 148);
    g6 = v1;
    int32_t result2 = *(int32_t *)(a1 + 144); // 0x4fbd7
    g4 = result2;
    return result2;
}

// Address range: 0x4fc20 - 0x4fc21
int32_t function_4fc20(void) {
    // 0x4fc20
    return g4;
}

// Address range: 0x4fc8a - 0x4fd0f
int32_t function_4fc8a(void) {
    int32_t * v1 = (int32_t *)(g6 + (int32_t)&g154); // 0x4fc8a
    *v1 = *v1 - 1;
    char * v2 = (char *)(g6 - 0x3e7683ad); // 0x4fc90
    *v2 = (char)g7 + *v2;
    int32_t v3 = g9 | g7; // 0x4fc96
    g7 = v3;
    int32_t v4; // ebp
    if (v3 == 0) {
        // 0x4fc9a
        g6 = *(int32_t *)(v4 - 12);
        g10 = *(int32_t *)(v4 - 8);
        g8 = *(int32_t *)(v4 - 4);
        return g4;
    }
    // 0x4fca8
    g7 = g292;
    g8 = v4 - 32;
    int32_t v5 = *(int32_t *)(g292 + 16); // 0x4fcb1
    g7 = v5;
    int32_t v6 = *(int32_t *)v5; // 0x4fcb4
    g10 = v6;
    g10 = *(int32_t *)(v6 + 68);
    g7 = *(int32_t *)(g6 + 128);
    *(int32_t *)(v4 - 36) = g4;
    g4 = g292;
    int32_t v7 = *(int32_t *)(g292 + 16); // 0x4fcd4
    g4 = v7;
    int32_t v8 = *(int32_t *)v7; // 0x4fcd7
    g9 = v8;
    int32_t v9 = *(int32_t *)(v8 + 140); // 0x4fcd9
    g9 = v9;
    *(int32_t *)(v4 - 40) = v9;
    g9 = *(int32_t *)(g6 + 124);
    int32_t result = *(int32_t *)(v4 - 32); // 0x4fcf7
    g4 = result;
    g9 = *(int32_t *)(v4 - 28);
    return result;
}

// Address range: 0x4fd13 - 0x4fd19
int32_t function_4fd13(void) {
    // 0x4fd13
    return g4;
}

// Address range: 0x4fdf2 - 0x4fdfb
int32_t function_4fdf2(int32_t a1, int32_t a2) {
    // 0x4fdf2
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x5e5bf465); // 0x4fdf2
    *v2 = *v2 - 1;
    g8 = a1;
    return g4;
}

// Address range: 0x4fe27 - 0x4fe54
int32_t function_4fe27(void) {
    int32_t * v1 = (int32_t *)(g6 + (int32_t)&g832); // 0x4fe27
    *v1 = *v1 + 1;
    char v2 = (char)g4 + *(char *)&g9; // 0x4fe2d
    *(char *)g9 = v2;
    int32_t v3 = g6; // 0x4fe48
    if (v2 == 0) {
        // 0x4fe48
        g10 = *(int32_t *)(v3 + 176);
        g8 = *(int32_t *)(v3 + 180);
        return g4;
    }
    // 0x4fe31
    int32_t v4; // ebp
    *(int32_t *)(v4 + 8) = v3;
    g10 = *(int32_t *)(v4 - 8);
    g6 = *(int32_t *)(v4 - 12);
    g8 = *(int32_t *)(v4 - 4);
    int32_t result = function_4fc20(); // 0x4fe40
    g4 = result;
    return result;
}

// Address range: 0x4fe8a - 0x4fe8c
int32_t function_4fe8a(void) {
    // 0x4fe8a
    return g4;
}

// Address range: 0x4feaf - 0x4febd
int32_t function_4feaf(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 - 0x3b7cf7a3); // 0x4feaf
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x4feb5
    bool v3; // cf
    unsigned char v4 = (char)v2 + 91 + (char)v3; // 0x4feb5
    g4 = (int32_t)v4 | v2 & -256;
    int32_t result = function_4fc20(); // 0x4feb8
    g4 = result;
    return result;
}

// Address range: 0x4fec0 - 0x4fee8
int32_t function_4fec0(int32_t result) {
    // 0x4fec0
    g4 = result;
    if (*(int32_t *)(result + 188) != 5) {
        // 0x4fecf
        return result;
    }
    int32_t v1 = *(int32_t *)result; // 0x4fee0
    g9 = v1;
    int32_t result2 = *(int32_t *)(v1 + 4); // 0x4fee3
    g4 = result2;
    return result2;
}

// Address range: 0x4fef0 - 0x4ff18
int32_t function_4fef0(int32_t result) {
    // 0x4fef0
    g4 = result;
    if (*(int32_t *)(result + 208) != 4) {
        // 0x4feff
        return result;
    }
    int32_t v1 = *(int32_t *)result; // 0x4ff10
    g9 = v1;
    int32_t result2 = *(int32_t *)(v1 + 4); // 0x4ff13
    g4 = result2;
    return result2;
}

// Address range: 0x4ff20 - 0x4ff36
int32_t function_4ff20(void) {
    int32_t v1 = g5; // 0x4ff20
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g4; // 0x4ff28
    int32_t result; // 0x4ff2f
    if (v3 != 0) {
        // 0x4ff2c
        result = function_28600(v3);
        g4 = result;
    } else {
        result = 0;
        v2 = v1;
    }
    // 0x4ff34
    g5 = v2;
    return result;
}

// Address range: 0x4ff40 - 0x4ff63
int32_t function_4ff40(int32_t a1) {
    // 0x4ff40
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g196;
    *(int32_t *)(g6 + 100) = (int32_t)&g204;
    if (*(char *)(a1 + 104) % 2 == 0) {
        // bb
        g4 = function_4ff68((int32_t)&g870, (int32_t)&g870);
    }
    int32_t result = g6 + 100; // 0x4ff5d
    g4 = result;
    return result;
}

// Address range: 0x4ff68 - 0x4ffae
int32_t function_4ff68(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x4ff68
    *(int32_t *)(v1 + 76) = (int32_t)&g186;
    int32_t v2 = g6; // 0x4ffa8
    if (*(char *)(v1 + 80) % 2 != 0) {
        int32_t result = v2 + 76; // 0x4ffa8
        g4 = result;
        return result;
    }
    // 0x4ff75
    *(int32_t *)(v2 + 52) = (int32_t)&g185;
    if (*(char *)(v2 + 56) % 2 != 0) {
        // bb
        g4 = function_4ffc0();
    }
    int32_t v3 = g6; // 0x4ff82
    *(int32_t *)(v3 + 28) = (int32_t)&g201;
    if (*(char *)(v3 + 32) % 2 != 0) {
        // bb5
        g4 = function_4ffd8();
    }
    int32_t v4 = g6; // 0x4ff8f
    *(int32_t *)(v4 + 4) = (int32_t)&g199;
    int32_t result2; // 0x4ff9a
    if (*(char *)(v4 + 8) % 2 != 0) {
        // bb6
        result2 = function_4fff0((int32_t)&g870, (int32_t)&g870);
        g4 = result2;
    } else {
        // 0x4ff8f
        result2 = g4;
    }
    // 0x4ff9c
    g6 = a1;
    g5 = a2;
    return result2;
}

// Address range: 0x4ffc0 - 0x4ffc6
int32_t function_4ffc0(void) {
    int32_t result = g6 + 52; // 0x4ffc0
    g4 = result;
    return result;
}

// Address range: 0x4ffd8 - 0x4ffde
int32_t function_4ffd8(void) {
    int32_t result = g6 + 28; // 0x4ffd8
    g4 = result;
    return result;
}

// Address range: 0x4fff0 - 0x4fffb
int32_t function_4fff0(int32_t a1, int32_t a2) {
    // 0x4fff0
    *(int32_t *)(g5 + 8) = g6 + 4;
    g6 = a1;
    return g4;
}

// Address range: 0x50000 - 0x50001
int32_t function_50000(void) {
    // 0x50000
    return g4;
}

// Address range: 0x5001e - 0x5001f
int32_t function_5001e(void) {
    // 0x5001e
    return g4;
}

// Address range: 0x5003c - 0x5003d
int32_t function_5003c(void) {
    // 0x5003c
    return g4;
}

// Address range: 0x50046 - 0x5004b
int32_t function_50046(void) {
    uint32_t v1 = g9; // 0x50046
    char * v2 = (char *)(g7 - 125 + v1); // 0x50046
    *v2 = (char)(v1 / 256) + *v2;
    return g4;
}

// Address range: 0x50056 - 0x50064
int32_t function_50056(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x489f445); // 0x50056
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x5005c
    unsigned char v3 = (char)v2 & -24; // 0x5005c
    g4 = (int32_t)v3 | v2 & -256;
    *(char *)g8 = v3;
    bool v4; // df
    g8 += (v4 ? -1 : 1);
    int32_t v5 = g4; // 0x50060
    g4 = (int32_t)((char)v5 + *(char *)v5) | v5 & -256;
    int32_t result = function_5003c(); // 0x50062
    g4 = result;
    return result;
}

// Address range: 0x50064 - 0x50066
int32_t function_50064(void) {
    int32_t result = function_5001e(); // 0x50064
    g4 = result;
    return result;
}

// Address range: 0x50081 - 0x50089
int32_t function_50081(void) {
    // 0x50081
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 12);
    int32_t result = function_50000(); // 0x50084
    g4 = result;
    return result;
}

// Address range: 0x50090 - 0x500af
int32_t function_50090(int32_t a1) {
    int32_t v1 = g6; // 0x50093
    g6 = a1;
    g4 = function_4ff40(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x500aa
    g4 = result;
    return result;
}

// Address range: 0x500b0 - 0x500e9
int32_t function_500b0(int32_t a1) {
    int32_t v1 = g6; // bp-8
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g198;
    *(int32_t *)(g6 + 152) = (int32_t)&g180;
    if (*(char *)(a1 + 156) % 2 != 0) {
        int32_t result = g6 + 152; // 0x500e0
        g4 = result;
        return result;
    }
    // 0x500d3
    g6 = v1;
    int32_t result2 = function_4ff40(v1); // 0x500db
    g4 = result2;
    return result2;
}

// Address range: 0x500ed - 0x500fb
int32_t function_500ed(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 - 0x3b7cf7a3); // 0x500ed
    *v1 = *v1 - 1;
    g4 &= -165;
    g5 = a1;
    int32_t result = function_4ff40((int32_t)&g870); // 0x500f6
    g4 = result;
    return result;
}

// Address range: 0x500fb - 0x5013f
int32_t function_500fb(int32_t a1) {
    // 0x500fb
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_4ff40(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x50106
    g4 = v1;
    g4 = function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x50123
    g6 = a1;
    g4 = function_500b0(a1);
    g6 = v3;
    int32_t result = function_1bc40(); // 0x5013a
    g4 = result;
    return result;
}

// Address range: 0x50140 - 0x501d4
int32_t function_50140(int32_t a1, int32_t a2) {
    // 0x50140
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g196;
    int32_t v1 = g6; // 0x50152
    g4 = v1 + 52;
    *(char *)(v1 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 4) = (int32_t)&g200;
    *(char *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 36) = 0;
    *(int32_t *)(g6 + 40) = 0;
    *(int32_t *)(g6 + 44) = 0;
    *(int32_t *)(g6 + 48) = 0;
    *(int32_t *)(g6 + 28) = (int32_t)&g202;
    *(char *)(g6 + 56) = 0;
    *(int32_t *)(g6 + 60) = 0;
    *(int32_t *)(g6 + 52) = (int32_t)&g203;
    *(int32_t *)(g6 + 72) = 0;
    int32_t v2 = g6; // 0x501bc
    *(int32_t *)(v2 + 64) = v2;
    *(int32_t *)(g6 + 68) = 0x4f290;
    return g4;
}

// Address range: 0x50244 - 0x502a3
int32_t function_50244(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g6 + 0x43c70c45); // 0x50244
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x5024c
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x5024e
    int32_t v4 = g4; // 0x5024e
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    *(int32_t *)v4 = v4;
    int32_t v5 = g4; // 0x50257
    *(char *)v5 = (char)v5 + *(char *)&g4;
    *(int32_t *)(g6 + 132) = 0;
    *(int32_t *)(g6 + 136) = -0x40800000;
    *(int32_t *)(g6 + 140) = g4;
    int32_t v6 = (int32_t)g290; // 0x50273
    g4 = v6;
    g9 = v6;
    *(int32_t *)(g6 + 144) = v6;
    *(int32_t *)(g6 + 148) = g9;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x502bd - 0x502be
int32_t function_502bd(void) {
    // 0x502bd
    return g4;
}

// Address range: 0x502df - 0x502e4
int32_t function_502df(void) {
    char * v1 = (char *)(g6 - 125 + g7); // 0x502df
    *v1 = (char)(g9 / 256) + *v1;
    return g4;
}

// Address range: 0x50310 - 0x50311
int32_t function_50310(void) {
    // 0x50310
    return g4;
}

// Address range: 0x50327 - 0x50328
int32_t function_50327(void) {
    // 0x50327
    return g4;
}

// Address range: 0x5033f - 0x50344
int32_t function_5033f(void) {
    int32_t result = function_502bd(); // 0x5033f
    g4 = result;
    return result;
}

// Address range: 0x5035c - 0x50361
int32_t function_5035c(void) {
    // 0x5035c
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 32);
    int32_t result = function_50310(); // 0x5035f
    g4 = result;
    return result;
}

// Address range: 0x50378 - 0x5037a
int32_t function_50378(void) {
    int32_t result = function_50327(); // 0x50378
    g4 = result;
    return result;
}

// Address range: 0x50380 - 0x5038e
int32_t function_50380(int32_t a1) {
    // 0x50380
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x50387
    g9 = v1;
    int32_t result = *(int32_t *)(v1 + 40); // 0x50389
    g4 = result;
    return result;
}

// Address range: 0x50390 - 0x503d5
int32_t function_50390(int32_t a1) {
    int32_t v1 = g6; // 0x50393
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 140); // 0x503b2
    g4 = v2;
    int32_t v3 = function_27ea0(v2, "server/reservationid", 0, 0); // 0x503bb
    g4 = v3;
    int32_t v4 = g9 | v3; // 0x503c2
    g7 = v4;
    int32_t result; // 0x503c6
    if (v4 == 0) {
        int32_t v5 = g6; // 0x503c6
        result = *(int32_t *)(v5 + 124);
        g4 = result;
        g9 = *(int32_t *)(v5 + 128);
    } else {
        result = v3;
    }
    // 0x503cf
    g6 = v1;
    return result;
}

// Address range: 0x503e0 - 0x503f1
int32_t function_503e0(int32_t a1) {
    // 0x503e0
    g4 = a1;
    g9 = *(int32_t *)(a1 + 128);
    int32_t result = *(int32_t *)(a1 + 124); // 0x503ed
    g4 = result;
    return result;
}

// Address range: 0x50400 - 0x5041f
int32_t function_50400(int32_t a1) {
    // 0x50400
    g4 = a1;
    g4 = (int32_t)"create";
    int32_t v1 = *(int32_t *)(a1 + 16) - 2; // 0x5040e
    g9 = v1;
    int32_t result; // 0x50416
    if (v1 < 5) {
        // 0x50416
        result = *(int32_t *)(4 * v1 + (int32_t)&g205);
        g4 = result;
    } else {
        result = (int32_t)"create";
    }
    // 0x5041d
    return result;
}

// Address range: 0x50420 - 0x504d7
int32_t function_50420(int32_t a1, int32_t a2, int32_t * a3, char * a4) {
    int32_t v1 = g8; // 0x50426
    g8 = a1;
    int32_t v2 = g6; // 0x5042c
    g6 = (int32_t)a3;
    int32_t v3 = g10; // 0x50432
    g10 = a2;
    int32_t v4 = g4; // 0x50448
    int32_t v5; // 0x5044b
    if (v4 == 2) {
        // bb
        v5 = function_50530();
        g4 = v5;
    } else {
        v5 = v4;
    }
    if (v4 > 2) {
        int32_t v6; // 0x50456
        if (v5 == 3) {
            // bb25
            v6 = function_504e0();
            g4 = v6;
        } else {
            v6 = v5;
        }
        if (v6 == 7) {
            // 0x50462
            g4 = function_27ea0(g8, NULL, 0, 0);
            int32_t result = function_2da40(g10, g6, "%llX"); // 0x50499
            g4 = result;
            g6 = v2;
            g10 = v3;
            g8 = v1;
            return result;
        }
    } else {
        if (v5 == 1) {
            // bb28
            g4 = function_50570();
        }
    }
    int32_t result2 = function_25190(g8); // 0x504bc
    g4 = result2;
    g6 = v2;
    g10 = v3;
    g8 = v1;
    return result2;
}

// Address range: 0x504e0 - 0x5052d
int32_t function_504e0(void) {
    float80_t v1 = function_27d60(g8, NULL, 0); // 0x504f3
    g868 = v1;
    float32_t v2 = v1; // 0x504f3
    g4 = v2;
    *(float32_t *)(g5 - 28) = v2;
    g13++;
    int128_t v3 = __asm_movss(*(int32_t *)(g5 - 28)); // 0x504ff
    int128_t v4 = __asm_unpcklps(v3, v3); // 0x5050f
    int32_t v5 = __asm_movsd(__asm_cvtps2pd(v4)); // 0x50515
    int32_t result = function_2da40(v5, (int32_t)&g870, (char *)&g870); // 0x5051b
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x50530 - 0x50569
int32_t function_50530(void) {
    // 0x50530
    g4 = function_27fc0(g8, NULL, 0);
    *(int32_t *)(g5 + 16) = (int32_t)"%d";
    *(int32_t *)(g5 + 20) = g4;
    *(int32_t *)(g5 + 12) = g6;
    int32_t v1 = g5; // 0x50555
    g8 = *(int32_t *)(v1 - 4);
    *(int32_t *)(v1 + 8) = g10;
    int32_t v2 = g5; // 0x5055b
    g6 = *(int32_t *)(v2 - 12);
    g10 = *(int32_t *)(v2 - 8);
    int32_t result = function_2da40((int32_t)&g870, (int32_t)&g870, (char *)&g870); // 0x50564
    g4 = result;
    return result;
}

// Address range: 0x50570 - 0x50594
int32_t function_50570(void) {
    // 0x50570
    g4 = function_27c00(g8, NULL, (int32_t *)&g129);
    *(int32_t *)(g5 + 16) = (int32_t)"%s";
    *(int32_t *)(g5 + 20) = g4;
    return g4;
}

// Address range: 0x505a0 - 0x506d1
int32_t function_505a0(uint32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x505a3
    int32_t v2 = g10; // 0x505a4
    int32_t v3 = g6; // 0x505a5
    int32_t v4 = g7; // 0x505a6
    g6 = v4;
    int32_t v5 = g4; // 0x505ae
    int32_t v6 = g9; // 0x505b4
    g8 = a1 % 256;
    if (v5 != 0) {
        // 0x50698
        int32_t v7; // bp-284
        g10 = &v7;
        int32_t result = function_50420(v5, v4, &v7, "GNU"); // 0x506b7
        g4 = result;
        g8 = v6;
        return result;
    }
    int32_t v8 = function_26140(v4); // 0x505d9
    g4 = v8;
    g6 = v8;
    if (v8 == 0) {
        // 0x50688
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x505e8
    int32_t v9; // bp-540
    int32_t v10 = &v9; // 0x505e8
    g10 = v10;
    int32_t v11 = g8; // 0x505ee
    int32_t v12 = v11 & (int32_t)&g862; // 0x505f0
    g4 = v12;
    int32_t result2; // 0x50679
    while (true) {
      lab_0x5065c_2:
        // 0x5065c
        g4 = v11;
        if ((char)v11 != 0) {
            goto lab_0x50600;
        } else {
            if (v11 != 0) {
                goto lab_0x50600;
            } else {
                // 0x50676
                result2 = function_26160(v8);
                g4 = result2;
                g6 = result2;
                if (result2 == 0) {
                    // 0x50684
                    g10 = v10;
                    goto lab_0x50688_2;
                }
                goto lab_0x5065c;
            }
        }
    }
  lab_0x50688_2:
    // 0x50688
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x50600:
    // 0x50600
    function_25190(v8);
    g4 = v6;
    function_2da40(v10, (int32_t)"GNU", "%s:%s");
    g4 = v5;
    g4 = function_50720(v5, &v9, g6, v12);
    int32_t v13 = function_26160(g6); // 0x50651
    g4 = v13;
    g6 = v13;
    if (v13 == 0) {
        // break -> 0x50688
        goto lab_0x50688_2;
    }
    result2 = v13;
    goto lab_0x5065c;
  lab_0x5065c:
    // 0x5065c
    v8 = result2;
    v11 = g8;
    goto lab_0x5065c_2;
}

// Address range: 0x506d5 - 0x506db
int32_t function_506d5(void) {
    // 0x506d5
    return g4;
}

// Address range: 0x506db - 0x50718
int32_t function_506db(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x506db
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 - 540); // 0x506db
    g8 = v2;
    int32_t result = *(int32_t *)(g4 + 16); // 0x506e1
    g4 = result;
    g6 = *(int32_t *)(v2 + 128);
    g7 = *(int32_t *)(v2 + 124);
    int32_t v3 = *(int32_t *)result; // 0x506ed
    g9 = v3;
    g9 = *(int32_t *)(v3 + 80);
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x50720 - 0x50751
int32_t function_50720(int32_t result, int32_t * a2, int32_t a3, uint32_t a4) {
    int32_t v1 = g5; // 0x50720
    int32_t v2 = g6; // 0x50723
    g7 = a3;
    g4 = result;
    g9 = (int32_t)a2;
    g6 = a4 % 256;
    if (a3 == 0) {
        // 0x50735
        g6 = v2;
        g5 = v1;
        return result;
    }
    if (a2 == NULL) {
        // 0x50735
        g6 = v2;
        g5 = v1;
        return result;
    }
    // 0x50744
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_505a0(v2, v1, a4 & (int32_t)&g862 & 255); // 0x5074c
    g4 = result2;
    return result2;
}

// Address range: 0x50760 - 0x50839
int32_t function_50760(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x50760
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x5076a
    int32_t v4 = g10; // 0x5076d
    g6 = a1;
    g10 = a2;
    if ((char)a3 == 0) {
        // 0x5082f
        g6 = v3;
        g10 = v4;
        g5 = v1;
        return g4;
    }
    int32_t v5 = *(int32_t *)(a1 + 128); // 0x5077c
    g4 = v5;
    int32_t v6 = *(int32_t *)(a1 + 124) | v5; // 0x50782
    g4 = v6;
    if (v6 == 0) {
        // 0x5082f
        g6 = v3;
        g10 = v4;
        g5 = v1;
        return 0;
    }
    int32_t result; // 0x5082a
    if (a2 != 0) {
        int32_t v7 = function_27340(a2, (int32_t)"system", 0); // 0x507a6
        g4 = v7;
        g4 = function_50720(g6, (int32_t *)"system", v7, 1);
        int32_t v8 = function_27340(a2, (int32_t)"game", 0); // 0x507da
        g4 = v8;
        g4 = function_50720(g6, (int32_t *)"game", v8, 1);
        int32_t v9 = function_27340(a2, (int32_t)"options", 0); // 0x5080e
        g4 = v9;
        result = function_50720(g6, (int32_t *)"options", v9, 1);
        g4 = result;
    } else {
        result = v6;
        v2 = v1;
    }
    // 0x5082f
    g6 = v3;
    g10 = v4;
    g5 = v2;
    return result;
}

// Address range: 0x50840 - 0x50841
int32_t function_50840(int32_t a1) {
    // 0x50840
    return g4;
}

// Address range: 0x5089f - 0x508a0
int32_t function_5089f(void) {
    // 0x5089f
    return g4;
}

// Address range: 0x508e0 - 0x508f8
int32_t function_508e0(void) {
    // 0x508e0
    g8++;
    bool v1; // cf
    int32_t v2 = (int32_t)v1 + g4; // 0x508e2
    g4 = v2;
    char * v3 = (char *)v2; // 0x508e5
    *v3 = *v3 + (char)v2;
    int32_t v4 = g4; // 0x508e7
    int32_t * v5 = (int32_t *)v4; // 0x508e7
    *v5 = *v5 + v4;
    int32_t v6 = g4; // 0x508e9
    char * v7 = (char *)v6; // 0x508e9
    *v7 = *v7 + (char)v6;
    int32_t v8; // ebp
    g6 = *(int32_t *)(v8 - 12);
    g10 = *(int32_t *)(v8 - 8);
    g8 = *(int32_t *)(v8 - 4);
    return g4;
}

// Address range: 0x5091c - 0x50927
int32_t function_5091c(void) {
    // 0x5091c
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 32);
    g4 = *(int32_t *)(v1 - 28);
    int32_t result = function_5089f(); // 0x50922
    g4 = result;
    return result;
}

// Address range: 0x50930 - 0x50a49
int32_t function_50930(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g9 = a2;
    int32_t v2 = g10; // 0x50939
    int32_t v3 = g6; // 0x5093c
    g10 = a1;
    int32_t v4 = g8; // 0x50942
    int32_t v5 = function_27c00(a2, "migrate", (int32_t *)&g129); // 0x5095b
    g4 = v5;
    int32_t result = function_2cc30(v5, "host>client"); // 0x5096b
    g4 = result;
    g9 = a2;
    if (result != 0) {
        // 0x50977
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return result;
    }
    // 0x50988
    g4 = g292;
    int32_t v6 = *(int32_t *)(g292 + 16); // 0x5098d
    g4 = v6;
    int32_t v7 = *(int32_t *)v6; // 0x50993
    g4 = v7;
    g8 = *(int32_t *)(v7 + 144);
    g4 = function_27ea0(a2, "xuid", 0, 0);
    g7 = v6;
    int32_t v8 = g10; // 0x509c6
    g9 = *(int32_t *)(v8 + 128);
    g4 = *(int32_t *)(v8 + 124);
    int32_t v9 = function_26cf0(); // 0x509e3
    g4 = v9;
    g6 = v9;
    g4 = function_26330(v9);
    g4 = function_275a0(g6, "syssession", g10);
    *(int32_t *)(g10 + 208) = 4;
    g4 = function_27920(g6, "action", "client");
    int32_t v10 = *(int32_t *)g10; // 0x50a30
    g4 = v10;
    g6 = v3;
    g10 = v2;
    g8 = v4;
    int32_t result2 = *(int32_t *)(v10 + 40); // 0x50a41
    g4 = result2;
    return result2;
}

// Address range: 0x50a60 - 0x50bce
int32_t function_50a60(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4) {
    int32_t v1 = g6; // 0x50a66
    g6 = (int32_t)a4;
    int32_t v2 = g10; // 0x50a6c
    g10 = a2;
    int32_t v3 = g8; // 0x50a72
    g8 = (int32_t)a3;
    if (a4 != NULL) {
        if (a3 != NULL) {
            int32_t v4 = function_27c00(a2, "system/lock", NULL); // 0x50aa7
            g4 = v4;
            int32_t v5 = function_27c00(g10, "system/access", NULL); // 0x50ac2
            g4 = v5;
            g9 = v4;
            g10 = v5;
            g7 = g7 & -256 | (int32_t)(v5 == 0);
            int32_t v6; // 0x50b5e
            if (v4 == 0) {
                // 0x50b38
                g4 = 0;
                if (v5 == 0) {
                    // 0x50a7e
                    g6 = v1;
                    g10 = v2;
                    g8 = v3;
                    return 0;
                }
                // 0x50b42
                g9 = a1;
                int32_t v7 = *(int32_t *)(a1 + 140); // 0x50b55
                g4 = v7;
                v6 = function_27c00(v7, "system/lock", (int32_t *)&g129);
                g4 = v6;
                g9 = v6;
            } else {
                if (v5 == 0) {
                    // 0x50ba0
                    g7 = a1;
                    int32_t v8 = *(int32_t *)(a1 + 140); // 0x50bb3
                    g4 = v8;
                    int32_t v9 = function_27c00(v8, "system/access", (int32_t *)"public"); // 0x50bbf
                    g4 = v9;
                    g9 = v4;
                    g10 = v9;
                    v6 = v4;
                } else {
                    v6 = v4;
                }
            }
            // 0x50add
            *(char *)a4 = (char)(*(char *)v6 == 0);
            int32_t v10 = function_2cc30((int32_t)"public", (char *)g10); // 0x50aee
            g4 = v10;
            if (v10 == 0) {
                // 0x50af7
                *a3 = 2;
                g4 = 1;
                g6 = v1;
                g10 = v2;
                g8 = v3;
                return 1;
            }
            int32_t v11 = function_2cc30((int32_t)"friends", (char *)g10); // 0x50b1b
            g4 = v11;
            if (v11 == 0) {
                // 0x50b24
                *a3 = 1;
                g4 = 1;
                // 0x50a7e
                g6 = v1;
                g10 = v2;
                g8 = v3;
                return 1;
            }
            int32_t v12 = function_2cc30((int32_t)"private", (char *)g10); // 0x50b7b
            g9 = v12;
            g4 = 0;
            int32_t result; // 0x50a8a
            if (v12 == 0) {
                // 0x50b8c
                *a3 = 0;
                g4 = 1;
                result = 1;
            } else {
                result = 0;
            }
            // 0x50a7e
            g6 = v1;
            g10 = v2;
            g8 = v3;
            return result;
        }
    }
    // 0x50a7c
    g4 = 0;
    // 0x50a7e
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return 0;
}

// Address range: 0x50bd0 - 0x50c9d
int32_t function_50bd0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x50bd6
    g6 = a2;
    int32_t v2 = g10; // 0x50bdc
    g10 = a1;
    int32_t v3 = g8; // 0x50be2
    if (a2 == 0) {
        // 0x50c90
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    // 0x50bed
    function_50760(a1, a2, 1);
    int32_t v4 = 2; // bp-36
    g4 = &v4;
    int32_t v5 = 1; // bp-29
    int32_t result = function_50a60(g10, a2, &v4, &v5); // 0x50c21
    g4 = result;
    if ((char)result == 0) {
        // 0x50c90
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v6 = g10; // 0x50c2a
    int32_t * v7 = (int32_t *)(v6 + 128); // 0x50c2a
    int32_t v8 = *v7; // 0x50c2a
    g4 = v8;
    int32_t * v9 = (int32_t *)(v6 + 124); // 0x50c30
    int32_t v10 = *v9; // 0x50c30
    g9 = v10;
    int32_t v11 = v10 | v8; // 0x50c35
    g7 = v11;
    int32_t result2; // 0x50c70
    if (v11 != 0) {
        // 0x50c39
        g7 = g292;
        g8 = v4;
        int32_t * v12 = (int32_t *)(g292 + 16); // 0x50c42
        int32_t v13 = *v12; // 0x50c42
        g7 = v13;
        int32_t v14 = *(int32_t *)v13; // 0x50c45
        g6 = v14;
        g6 = *(int32_t *)(v14 + 132);
        g4 = g292;
        g8 = *v7;
        g7 = v5 % 256;
        g10 = *v9;
        result2 = *v12;
        g4 = result2;
        int32_t v15 = *(int32_t *)result2; // 0x50c73
        g9 = v15;
        g9 = *(int32_t *)(v15 + 136);
    } else {
        result2 = v8;
    }
    // 0x50c90
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x50ca0 - 0x50d5b
int32_t function_50ca0(int32_t a1) {
    int32_t v1 = g6; // 0x50ca6
    g6 = a1;
    int32_t v2 = g10; // 0x50cac
    int32_t v3 = g8; // 0x50caf
    int32_t v4 = *(int32_t *)(a1 + 128); // 0x50cb2
    g4 = v4;
    int32_t v5 = *(int32_t *)(a1 + 124) | v4; // 0x50cb8
    g4 = v5;
    int32_t v6; // 0x50ce8
    if (v5 != 0) {
        // 0x50cbd
        g4 = g292;
        int32_t v7 = *(int32_t *)(g292 + 16); // 0x50cc2
        g10 = v7;
        int32_t v8 = *(int32_t *)v7; // 0x50cc5
        g4 = v8;
        g8 = *(int32_t *)(v8 + 124);
        int32_t v9 = *(int32_t *)(a1 + 140); // 0x50cda
        g4 = v9;
        g4 = function_27fc0(v9, "members/numSlots", 1);
        v6 = g6;
        g9 = *(int32_t *)(v6 + 124);
        g7 = *(int32_t *)(v6 + 128);
    } else {
        v6 = a1;
    }
    int32_t v10 = *(int32_t *)(v6 + 140); // 0x50d12
    g4 = v10;
    int32_t v11 = function_27340(v10, (int32_t)"members", 0); // 0x50d1b
    g4 = v11;
    g4 = function_50720(g6, (int32_t *)"members", v11, 0);
    int32_t v12 = g6; // 0x50d3c
    int32_t v13 = *(int32_t *)(v12 + 140); // 0x50d3c
    g4 = v13;
    int32_t result = function_50bd0(v12, v13); // 0x50d49
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x50d60 - 0x50da1
int32_t function_50d60(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x50d66
    g10 = a2;
    int32_t v2 = g6; // 0x50d6c
    g6 = a1;
    int32_t v3 = *(int32_t *)a2; // 0x50d75
    g4 = v3;
    int32_t v4 = *(int32_t *)(a2 + 4); // 0x50d77
    g9 = v4;
    int32_t result2 = *(int32_t *)(a1 + 124) ^ v3; // 0x50d7a
    g4 = result2;
    int32_t v5 = *(int32_t *)(a1 + 128) ^ v4 | result2; // 0x50d83
    g9 = v5;
    if (v5 == 0) {
        int32_t result = a1 + 184; // 0x50d98
        g4 = result;
        return result;
    }
    // 0x50d87
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x50dc1 - 0x50e42
int32_t function_50dc1(void) {
    // 0x50dc1
    g8++;
    bool v1; // cf
    int32_t v2 = (int32_t)v1 + g4; // 0x50dc3
    g4 = v2;
    char * v3 = (char *)v2; // 0x50dc6
    *v3 = *v3 + (char)v2;
    uint32_t v4 = g4; // 0x50dc8
    int32_t v5 = *(int32_t *)v4 + v4; // 0x50dc8
    g4 = v5;
    char * v6 = (char *)v5; // 0x50dca
    *v6 = *v6 + (char)v5;
    int32_t v7 = function_26cf0(); // 0x50dd3
    g4 = v7;
    g8 = v7;
    g4 = function_26330(v7);
    g4 = function_275a0(g8, "syssession", g6);
    g4 = (int32_t)"create";
    uint32_t v8 = *(int32_t *)(g10 + 16) - 2; // 0x50e06
    g9 = v8;
    int32_t v9; // 0x50e0e
    if (v8 < 5) {
        // 0x50e0e
        v9 = *(int32_t *)(4 * v8 + (int32_t)&g205);
        g4 = v9;
    } else {
        v9 = (int32_t)"create";
    }
    // 0x50e15
    function_27920(g8, "error", (char *)v9);
    g4 = g6;
    *(int32_t *)(g5 + 12) = g8;
    *(int32_t *)(g5 + 8) = g6;
    g10 = *(int32_t *)(g5 - 8);
    g6 = *(int32_t *)(g5 - 12);
    g8 = *(int32_t *)(g5 - 4);
    int32_t result = *(int32_t *)(g4 + 40); // 0x50e3a
    g4 = result;
    return result;
}

// Address range: 0x50e5d - 0x50e5e
int32_t function_50e5d(void) {
    // 0x50e5d
    return g4;
}

// Address range: 0x50e8b - 0x50e8c
int32_t function_50e8b(void) {
    // 0x50e8b
    return g4;
}

// Address range: 0x50eab - 0x50f0a
int32_t function_50eab(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x2444c703); // 0x50eab
    *v1 = *v1 - 1;
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v2 = g4; // 0x50eb3
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x50eb5
    int32_t v4 = g4; // 0x50eb5
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    unsigned char v5 = (char)v4 & 4; // 0x50eb8
    int32_t v6 = (int32_t)v5 | v4 & -256; // 0x50eb8
    g4 = v6;
    char * v7 = (char *)v6; // 0x50eba
    *v7 = *v7 + v5;
    int32_t v8 = g4; // 0x50ebc
    char * v9 = (char *)v8; // 0x50ebc
    *v9 = *v9 + (char)v8;
    *(int32_t *)(g6 + 208) = 2;
    int32_t v10 = function_26cf0(); // 0x50ed5
    g4 = v10;
    g10 = v10;
    g4 = function_26330(v10);
    g4 = function_275a0(g10, "syssession", g6);
    g4 = *(int32_t *)g6;
    *(int32_t *)(g5 + 12) = g10;
    return g4;
}

// Address range: 0x50f18 - 0x50f1d
int32_t function_50f18(void) {
    int32_t result = function_50e5d(); // 0x50f18
    g4 = result;
    return result;
}

// Address range: 0x50f28 - 0x50f2d
int32_t function_50f28(void) {
    int32_t result = function_50e8b(); // 0x50f28
    g4 = result;
    return result;
}

// Address range: 0x50f2e - 0x50f2f
int32_t function_50f2e(void) {
    // 0x50f2e
    return g4;
}

// Address range: 0x50f40 - 0x50f41
int32_t function_50f40(void) {
    // 0x50f40
    return g4;
}

// Address range: 0x50f60 - 0x50f61
int32_t function_50f60(int32_t a1) {
    // 0x50f60
    return g4;
}

// Address range: 0x50fb0 - 0x50fb1
int32_t function_50fb0(void) {
    // 0x50fb0
    return g4;
}

// Address range: 0x50fd9 - 0x50fdf
int32_t function_50fd9(void) {
    // 0x50fd9
    return g4;
}

// Address range: 0x50fdf - 0x51014
int32_t function_50fdf(void) {
    int32_t v1 = g6; // 0x50fdf
    g10 = *(int32_t *)(v1 + 124);
    g8 = *(int32_t *)(v1 + 128);
    int32_t v2 = *(int32_t *)(g4 + 16); // 0x50fe8
    g4 = v2;
    int32_t v3 = *(int32_t *)v2; // 0x50feb
    g9 = v3;
    g9 = *(int32_t *)(v3 + 56);
    *(int32_t *)(v1 + 188) = 1;
    int32_t v4; // ebp
    g6 = *(int32_t *)(v4 - 12);
    g10 = *(int32_t *)(v4 - 8);
    g8 = *(int32_t *)(v4 - 4);
    return g4;
}

// Address range: 0x51020 - 0x51022
int32_t function_51020(void) {
    int32_t result = function_50fb0(); // 0x51020
    g4 = result;
    return result;
}

// Address range: 0x51030 - 0x51056
int32_t function_51030(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a2;
    int32_t result; // 0x5104f
    if (a2 != 0) {
        // 0x5103d
        g4 = a1;
        result = function_50760(a1, a2, 0);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x51054
    return result;
}

// Address range: 0x51060 - 0x51069
int32_t function_51060(void) {
    int32_t result = function_51030((int32_t)&g870, (int32_t)&g870); // 0x51064
    g4 = result;
    return result;
}

// Address range: 0x51070 - 0x511ec
int32_t function_51070(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x51073
    int32_t v2 = g10; // 0x51074
    int32_t v3 = g6; // 0x51075
    g10 = a2;
    g6 = a1;
    int32_t v4 = function_27340(a2, (int32_t)"settings", 0); // 0x51092
    g4 = v4;
    g8 = v4;
    int32_t v5 = function_27c00(g10, "error", NULL); // 0x510ac
    g4 = v5;
    g9 = v5;
    if (v5 != 0) {
        goto lab_0x51190;
    } else {
        if (v4 == 0) {
            goto lab_0x51190;
        } else {
            // 0x510c3
            *(int32_t *)(g6 + 188) = 3;
            int32_t v6 = *(int32_t *)(g6 + 140); // 0x510cd
            g4 = v6;
            g4 = function_28e50(v6);
            g4 = function_25190(v4);
            int32_t v7 = *(int32_t *)(g6 + 140); // 0x510e7
            g4 = v7;
            g4 = function_262d0(v7);
            int32_t v8 = *(int32_t *)(g6 + 140); // 0x51101
            g4 = v8;
            g4 = function_2a090(v8, v4, 1);
            int32_t v9 = g6; // 0x5110f
            int32_t v10 = *(int32_t *)(v9 + 140); // 0x5110f
            g4 = v10;
            g4 = function_51030(v9, v10);
            int32_t * v11 = (int32_t *)g6; // 0x51121
            g4 = *v11;
            g4 = *v11;
            int32_t v12 = function_26cf0(); // 0x51148
            g4 = v12;
            g10 = v12;
            g4 = function_26330(v12);
            g4 = function_275a0(g10, "syssession", g6);
            goto lab_0x51173;
        }
    }
  lab_0x51190:
    // 0x51190
    *(int32_t *)(g6 + 188) = 4;
    int32_t v13 = g9; // 0x5119a
    int32_t v14 = function_26d60(g10); // 0x511a0
    g4 = v14;
    g10 = v14;
    g4 = function_262d0(v14);
    g4 = function_275a0(g10, "syssession", g6);
    g9 = v13;
    if (v13 == 0) {
        // 0x511d2
        g4 = function_27920(g10, "error", "n/a");
    }
    goto lab_0x51173;
  lab_0x51173:;
    int32_t v15 = *(int32_t *)g6; // 0x51173
    g4 = v15;
    int32_t result = *(int32_t *)(v15 + 40); // 0x5117b
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x511ec - 0x51272
int32_t function_511ec(int32_t a1) {
    // 0x511ec
    g6 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g10; // 0x51203
    int32_t v2 = g6; // 0x51204
    g6 = a1;
    *(int32_t *)(a1 + 188) = 4;
    int32_t v3 = function_26cf0(); // 0x5121c
    g4 = v3;
    g10 = v3;
    g4 = function_26330(v3);
    g4 = function_275a0(g10, "syssession", g6);
    g4 = function_27920(g10, "error", "kicked");
    int32_t v4 = *(int32_t *)g6; // 0x5125f
    g4 = v4;
    int32_t result = *(int32_t *)(v4 + 40); // 0x51267
    g4 = result;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x51273 - 0x51274
int32_t function_51273(void) {
    // 0x51273
    return g4;
}

// Address range: 0x51290 - 0x5137d
int32_t function_51290(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a2;
    int32_t v2 = g6; // 0x51299
    int32_t v3 = g10; // 0x5129c
    g6 = a1;
    int32_t v4 = g8; // 0x512a2
    int32_t v5 = function_27c00(a2, "migrate", (int32_t *)&g129); // 0x512b8
    g4 = v5;
    int32_t result = function_2cc30(v5, "client>host"); // 0x512c8
    g4 = result;
    if (result != 0) {
        // 0x512d1
        g6 = v2;
        g10 = v3;
        g8 = v4;
        g5 = v1;
        return result;
    }
    // 0x512e0
    g4 = g292;
    int32_t v6; // bp-36
    g7 = &v6;
    int32_t v7 = g6; // 0x512e8
    g10 = *(int32_t *)(v7 + 124);
    g8 = *(int32_t *)(v7 + 128);
    int32_t v8 = *(int32_t *)(g292 + 16); // 0x512f1
    g4 = v8;
    int32_t v9 = *(int32_t *)v8; // 0x512f4
    g9 = v9;
    g9 = *(int32_t *)(v9 + 140);
    int32_t v10 = function_26cf0(); // 0x51317
    g4 = v10;
    g10 = v10;
    g4 = function_26330(v10);
    g4 = function_275a0(g10, "syssession", g6);
    *(int32_t *)(g6 + 188) = 5;
    g4 = function_27920(g10, "action", "host");
    int32_t v11 = *(int32_t *)g6; // 0x51364
    g4 = v11;
    g10 = v3;
    g6 = v2;
    g8 = v4;
    int32_t result2 = *(int32_t *)(v11 + 40); // 0x51375
    g4 = result2;
    g5 = v1;
    return result2;
}

// Address range: 0x5137e - 0x5137f
int32_t function_5137e(void) {
    // 0x5137e
    return g4;
}

// Address range: 0x51390 - 0x51524
int32_t function_51390(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x51393
    int32_t v2 = g10; // 0x51394
    int32_t v3 = g6; // 0x51395
    g8 = a1;
    int32_t v4 = function_26cf0(); // 0x513a3
    g4 = v4;
    g10 = v4;
    g4 = function_26330(v4);
    int32_t v5 = g8; // 0x513ba
    int32_t v6 = *(int32_t *)(v5 + 124); // 0x513ba
    g4 = v6;
    int32_t v7 = g10; // 0x513bd
    int32_t v8 = *(int32_t *)(v5 + 128); // 0x513c0
    g9 = v8;
    function_27600(v7, "options/sessionid", v6, v8);
    int32_t v9 = (int32_t)g290; // 0x513de
    g4 = v9;
    g9 = v9;
    g6 = v9;
    if (g290 != NULL) {
        // 0x513f9
        g4 = v9;
        function_27920(g10, "player/name", g290);
        int32_t v10 = (int32_t)g290; // 0x51415
        g4 = v10;
        g4 = function_27600(g10, "player/xuid", v10, g9);
    }
    // 0x51434
    int32_t v11; // bp-92
    int32_t v12 = &v11; // 0x51434
    g6 = v12;
    g4 = function_331e0();
    function_32160(v12, 1);
    g4 = (int32_t)g450;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g7 = *(int32_t *)(g8 + 140);
    int32_t v13 = v11; // 0x51490
    g4 = v13;
    function_275a0(g10, "binary/ptr", v13);
    int32_t v14;
    function_27680(g10, "binary/size", v14);
    g4 = a2;
    int32_t v15;
    if (a2 == 0) {
        v15 = 0;
    } else {
        // 0x514c5
        g4 = a2;
        v15 = function_27c00(a2, "from", NULL);
    }
    // 0x514e0
    g4 = g284;
    g4 = function_37860(g284, g10, v15, 0);
    function_564c0(&v11);
    g4 = v7;
    int32_t result; // 0x5150f
    if (v7 != 0) {
        // 0x5150c
        result = function_28600(v7);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x51514
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x51524 - 0x51556
int32_t function_51524(void) {
    // 0x51524
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x51531
    g4 = v1;
    g10 = v1;
    g4 = function_564c0((int32_t *)g6);
    g6 = g10;
    while (true) {
        // 0x51542
        g4 = g5 - 32;
        g4 = function_4ff20();
        int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x5154d
        g4 = v2;
        g6 = v2;
    }
}

// Address range: 0x51560 - 0x5177e
int32_t function_51560(int32_t a1, int32_t * a2, int32_t result) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    g4 = result;
    int32_t v3 = g6; // 0x5156c
    int32_t v4 = g10; // 0x5156f
    int32_t v5 = g8; // 0x51572
    if (result < 1) {
        // 0x51602
        g6 = v3;
        g10 = v4;
        g8 = v5;
        return result;
    }
    // 0x5157d
    g4 = v1;
    int32_t v6; // bp-100
    int32_t v7 = &v6; // 0x51584
    g6 = v7;
    g4 = function_32c50(&v6, v1, result, 8);
    int32_t * v8 = (int32_t *)1; // bp-32
    g4 = function_32160(v7, 1);
    int32_t v9;
    int32_t v10;
    unsigned char v11;
    int32_t v12; // 0x515f6
    if (v11 % 2 == 0) {
        int32_t v13 = function_309b0(v7, 4); // 0x5161b
        g4 = v13;
        if ((char)v13 == 0) {
            // 0x515dd
            g10 = 0;
            v12 = 0;
            goto lab_0x515e6;
        } else {
            unsigned char v14;
            int32_t v15; // 0x5162b
            if (v14 % 2 != 0) {
                // bb
                v15 = function_517a0();
                g4 = v15;
            } else {
                v15 = v10;
            }
            int32_t v16 = v6 + v15 - v9; // 0x51636
            g9 = v16;
            int32_t v17 = *(int32_t *)v16; // 0x51639
            g10 = v17;
            g4 = v15 + 4;
            v12 = v17;
            goto lab_0x515e6;
        }
    } else {
        // 0x515b7
        int32_t v18; // bp-36
        g4 = &v18;
        v18 = 128;
        int32_t v19 = function_30bf0(v7, 0, &v18); // 0x515d0
        g4 = v19;
        if ((char)v19 != 0) {
            int32_t result2 = (int32_t)&v8; // 0x51763
            g4 = result2;
            g8 = v6 + v10 - v9;
            return result2;
        }
        // 0x515dd
        g10 = 0;
        v12 = 0;
        goto lab_0x515e6;
    }
  lab_0x515e6:
    // 0x515e6
    g4 = g281;
    g9 = *(int32_t *)g281;
    if (g281 == v12) {
        int32_t v20 = function_26cf0(); // 0x51657
        g4 = v20;
        g10 = v20;
        g4 = function_26330(v20);
        int32_t v21 = g10; // 0x5166e
        int32_t v22 = function_28e90(v21, v7); // 0x51678
        g4 = v22;
        if ((char)v22 != 0) {
            int32_t v23 = function_27340(g10, (int32_t)"binary/ptr", 0); // 0x51698
            g4 = v23;
            int32_t v24 = function_27340(g10, (int32_t)"binary/size", 0); // 0x516b3
            g4 = v24;
            g8 = v24;
            if (v24 != 0) {
                // 0x516be
                g7 = v23;
                if (v23 != 0) {
                    // 0x516c5
                    g4 = v23;
                    int32_t v25 = function_27e60(v23, 0, 0); // 0x516db
                    g4 = v25;
                    int32_t v26 = function_27fc0(g8, NULL, 0); // 0x516f6
                    g4 = v26;
                    if (v26 != 0) {
                        // 0x516ff
                        g9 = v25;
                        if (v25 != 0) {
                            // 0x51706
                            function_311a0(v7, (int32_t)&g619, v26);
                            g4 = v23;
                            g4 = function_275a0(v23, NULL, (int32_t)&g619);
                        }
                    }
                }
            }
            // 0x51738
            g9 = a1;
            g4 = *(int32_t *)a1;
        }
        // 0x51747
        g4 = v21;
        if (v21 != 0) {
            // 0x51752
            g4 = function_28600(v21);
        }
    }
    int32_t result3 = function_564c0(&v6); // 0x515fd
    g4 = result3;
    // 0x51602
    g6 = v3;
    g10 = v4;
    g8 = v5;
    return result3;
}

// Address range: 0x51782 - 0x5179b
int32_t function_51782(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x23ba763a); // 0x51782
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    int32_t v3 = *(int32_t *)(v2 - 28) - g8; // 0x5178b
    g4 = v3;
    int32_t * v4 = (int32_t *)(v2 - 84); // 0x51793
    *v4 = *v4 + v3;
    return g4;
}

// Address range: 0x517a0 - 0x517f4
int32_t function_517a0(void) {
    int32_t v1 = g4 - *(int32_t *)(g5 - 64); // 0x517a0
    g4 = v1;
    int32_t v2 = g5 - 36; // 0x517a3
    g9 = v2;
    int32_t v3 = *(int32_t *)(g5 - 96) + v1; // 0x517a6
    g4 = v3 == 0 ? v2 : v3;
    int32_t v4 = *(int32_t *)v2; // 0x517ab
    g7 = v4;
    *(int32_t *)(g5 - 28) = v4;
    unsigned char v5 = *(char *)(g4 + 3); // 0x517b1
    g7 = v5;
    *(char *)(g5 - 28) = v5;
    unsigned char v6 = *(char *)(g4 + 2); // 0x517b8
    g7 = v6;
    *(char *)(g5 - 27) = v6;
    unsigned char v7 = *(char *)(g4 + 1); // 0x517bf
    g7 = v7;
    *(char *)(g5 - 26) = v7;
    *(char *)(g5 - 25) = *(char *)g4;
    int32_t v8 = g5 - 28; // 0x517d7
    g4 = v8;
    g4 = function_2cb10(g9, v8, 4);
    int32_t result = *(int32_t *)(g5 - 84); // 0x517e3
    g4 = result;
    g10 = *(int32_t *)(g5 - 36);
    return result;
}

// Address range: 0x517f4 - 0x51812
int32_t function_517f4(void) {
    // 0x517f4
    g10 = g4;
    while (true) {
        // 0x517f6
        g4 = function_564c0((int32_t *)g6);
        g10 = function_7ab57(g10, (int32_t)&g870);
        g4 = g5 - 40;
        g4 = function_4ff20();
    }
}

// Address range: 0x51812 - 0x51820
int32_t function_51812(void) {
    // 0x51812
    g8 = g4;
    int32_t result = function_26d40(); // 0x51817
    g4 = result;
    g10 = g8;
    return result;
}

// Address range: 0x51820 - 0x518d7
int32_t function_51820(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x51826
    g6 = a1;
    int32_t v2 = g8; // 0x5182c
    g8 = a2;
    int32_t v3 = g10; // 0x51832
    int32_t v4 = *(int32_t *)(a1 + 128); // 0x51835
    g10 = v4;
    int32_t v5 = *(int32_t *)a2; // 0x5183b
    g9 = v5;
    int32_t result = *(int32_t *)(a2 + 4); // 0x5183d
    g4 = result;
    int32_t v6 = *(int32_t *)(a1 + 124) ^ v5; // 0x51845
    g7 = v6;
    int32_t v7 = v6 | result ^ v4; // 0x51847
    g10 = v7;
    if (v7 != 0) {
        // 0x5184b
        g6 = v1;
        g10 = v3;
        g8 = v2;
        return result;
    }
    // 0x51860
    g7 = g292;
    int32_t v8 = 0; // bp-40
    int32_t v9 = *(int32_t *)(g292 + 16); // 0x5187c
    g7 = v9;
    g8 = *(int32_t *)(a2 + 20);
    int32_t v10 = *(int32_t *)v9; // 0x51882
    g10 = v10;
    g10 = *(int32_t *)(v10 + 108);
    g8 = &v8;
    int32_t result2 = function_51560(a1, &g620, result); // 0x518c5
    g4 = result2;
    g6 = v1;
    g10 = v3;
    g8 = v2;
    return result2;
}

// Address range: 0x518e0 - 0x51936
int32_t function_518e0(int32_t a1) {
    // 0x518e0
    g9 = a1;
    int32_t result = *(int32_t *)a1; // 0x518ec
    g4 = result;
    int32_t v1; // bp-32
    g6 = &v1;
    int32_t v2; // bp-40
    g10 = &v2;
    return result;
}

// Address range: 0x51940 - 0x51959
int32_t function_51940(void) {
    // 0x51940
    int32_t v1; // ebp
    g8 = *(int32_t *)(v1 - 40);
    g4 = *(int32_t *)(v1 - 48);
    *(int32_t *)(v1 - 44) = g9;
    int32_t v2 = g4; // 0x51951
    int32_t result; // 0x51953
    if (v2 == 0) {
        // bb
        result = function_519e0();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x51959
    return result;
}

// Address range: 0x519e0 - 0x519e1
int32_t function_519e0(void) {
    // 0x519e0
    return g4;
}

// Address range: 0x519f8 - 0x51a26
int32_t function_519f8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5 - 48; // 0x519f8
    g9 = v1;
    g4 = function_564c0((int32_t *)v1);
    int32_t * v2 = (int32_t *)(g5 + 8); // 0x51a03
    int32_t v3 = *v2; // 0x51a03
    g9 = v3;
    g4 = *(int32_t *)v3;
    g9 = *v2;
    g4 = 1;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return 1;
}

// Address range: 0x51a30 - 0x51a4e
int32_t function_51a30(void) {
    int32_t v1 = g5; // 0x51a30
    int32_t v2 = *(int32_t *)(v1 - 28); // 0x51a30
    g4 = v2;
    int32_t v3 = *(int32_t *)(v1 - 48); // 0x51a37
    g4 = v3;
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x51a3e
    g4 = v4;
    int32_t result = function_51560(v4, (int32_t *)v3, v2); // 0x51a44
    g4 = result;
    return result;
}

// Address range: 0x51a4e - 0x51ae4
int32_t function_51a4e(int32_t a1) {
    // 0x51a4e
    g6 = g4;
    int32_t v1 = g5 - 48; // 0x51a50
    g4 = v1;
    g4 = function_564c0((int32_t *)v1);
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x51a76
    g6 = a1;
    int32_t v4 = g10; // 0x51a7c
    int32_t v5 = function_518e0(a1); // 0x51a82
    g4 = v5;
    if ((char)v5 == 0) {
        // 0x51ad8
        g6 = v3;
        g4 = 0;
        g10 = v4;
        return 0;
    }
    int32_t result = *(int32_t *)(g6 + 188); // 0x51a8b
    g4 = result;
    if (result != 0) {
        if (result == 2) {
            // 0x51ae8
            return result;
        }
        // 0x51a9a
        g4 = 1;
        // 0x51a9f
        g6 = v3;
        g10 = v4;
        return 1;
    }
    int32_t v6 = function_4faa0(); // 0x51ab0
    g9 = v6;
    g4 = 1;
    if ((char)v6 != 0) {
        // 0x51ac0
        function_50f60(g6);
        g4 = 1;
    }
    // 0x51a9f
    g6 = v3;
    g10 = v4;
    return 1;
}

// Address range: 0x51aec - 0x51af2
int32_t function_51aec(void) {
    // 0x51aec
    return g4;
}

// Address range: 0x51af2 - 0x51b7d
int32_t function_51af2(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 184)); // 0x51af2
    int128_t v2 = __asm_addss(v1, *(int32_t *)(g4 + 44)); // 0x51afa
    int32_t v3; // ebp
    int32_t v4 = v3 - 24; // 0x51aff
    float80_t v5; // st7
    *(float64_t *)v4 = (float64_t)v5;
    int128_t v6 = __asm_movsd_1649(*(int64_t *)v4); // 0x51b02
    int128_t v7 = __asm_unpcklps(v2, v2); // 0x51b07
    __asm_ucomisd(v6, __asm_cvtps2pd(v7));
    *(int32_t *)(g6 + 188) = 4;
    int32_t v8 = function_26cf0(); // 0x51b24
    g4 = v8;
    g10 = v8;
    g4 = function_26330(v8);
    g4 = function_275a0(g10, "syssession", g6);
    function_27920(g10, "error", "n/a");
    g4 = 1;
    return 1;
}

// Address range: 0x51b7e - 0x51b7f
int32_t function_51b7e(void) {
    // 0x51b7e
    return g4;
}

// Address range: 0x51bc3 - 0x51bc6
int32_t function_51bc3(void) {
    // 0x51bc3
    return g4;
}

// Address range: 0x51bc6 - 0x51bc9
int32_t function_51bc6(void) {
    // 0x51bc6
    return g4;
}

// Address range: 0x51bcb - 0x51bcc
int32_t function_51bcb(void) {
    // 0x51bcb
    return g4;
}

// Address range: 0x51bcf - 0x51bd5
int32_t function_51bcf(void) {
    // 0x51bcf
    return g4;
}

// Address range: 0x51bd5 - 0x51c20
int32_t function_51bd5(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movss(*(int32_t *)(g6 + 216)); // 0x51bd5
    int128_t v2 = __asm_addss(v1, *(int32_t *)(g4 + 44)); // 0x51bdd
    int32_t v3; // ebp
    int32_t v4 = v3 - 24; // 0x51be2
    float80_t v5; // st7
    *(float64_t *)v4 = (float64_t)v5;
    int128_t v6 = __asm_movsd_1649(*(int64_t *)v4); // 0x51be5
    int128_t v7 = __asm_unpcklps(v2, v2); // 0x51bea
    __asm_ucomisd(v6, __asm_cvtps2pd(v7));
    bool v8; // cf
    if (!v8) {
        int32_t v9 = function_4faa0(); // 0x51c08
        g4 = v9;
        if ((char)v9 != 0) {
            // 0x51c11
            g4 = function_50840(g6);
        }
    }
    // 0x51bfb
    g9 = 1;
    g4 = 1;
    g6 = a1;
    return 1;
}

// Address range: 0x51c25 - 0x51c3b
int32_t function_51c25(void) {
    // 0x51c25
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x51c25
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x51c28
    *(int32_t *)(g6 + 216) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    int32_t result = function_51bcb(); // 0x51c39
    g4 = result;
    return result;
}

// Address range: 0x51c40 - 0x51cb6
int32_t function_51c40(int32_t result, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g9 = a2;
    int32_t v2 = g10; // 0x51c49
    g4 = result;
    int32_t v3 = g8; // 0x51c4f
    int32_t v4 = *(int32_t *)a2; // 0x51c52
    g10 = v4;
    int32_t v5 = *(int32_t *)(a2 + 4); // 0x51c54
    g8 = v5;
    int32_t v6 = *(int32_t *)(result + 128); // 0x51c57
    g9 = v6;
    int32_t v7 = *(int32_t *)(result + 124) | v6; // 0x51c5d
    g9 = v7;
    if (v7 == 0) {
        // 0x51c62
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v8 = *(int32_t *)(result + 140); // 0x51c80
    g4 = v8;
    int32_t v9 = function_1e0a0(v8, v4, v5, NULL); // 0x51c89
    g4 = v9;
    if (v9 == 0) {
        // 0x51c62
        g10 = v2;
        g8 = v3;
        return 0;
    }
    // 0x51c92
    g4 = g292;
    int32_t result2 = *(int32_t *)(g292 + 32); // 0x51c97
    g4 = result2;
    int32_t v10 = *(int32_t *)result2; // 0x51c9a
    g9 = v10;
    g9 = *(int32_t *)(v10 + 12);
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x51cc0 - 0x51fcf
int32_t function_51cc0(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x51cc3
    int32_t v2 = g10; // 0x51cc4
    int32_t v3 = g6; // bp-16
    g6 = a2;
    int32_t v4 = function_27c00(a2, "error", NULL); // 0x51ce2
    g4 = v4;
    g8 = v4;
    int32_t result = function_27340(g6, (int32_t)"settings", 0); // 0x51cfc
    g4 = result;
    g10 = result;
    if (v4 != 0) {
        // 0x51d07
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    if (result == 0) {
        // 0x51d07
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v5 = function_27340(result, (int32_t)"members", 0); // 0x51d29
    g4 = v5;
    if (v5 == 0) {
        // 0x51d07
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x51d38
    g9 = a1;
    int32_t * v6 = (int32_t *)(a1 + 140); // 0x51d4b
    int32_t v7 = *v6; // 0x51d4b
    g4 = v7;
    int32_t v8 = function_27fc0(v7, "members/numMachines", 0); // 0x51d54
    g4 = v8;
    g9 = a1;
    g6 = v8;
    int32_t v9 = *v6; // 0x51d5e
    g4 = v9;
    g4 = function_28e50(v9);
    g4 = function_25190(g10);
    g9 = a1;
    int32_t v10 = *v6; // 0x51d7b
    g4 = v10;
    g4 = function_262d0(v10);
    g9 = a1;
    int32_t v11 = *v6; // 0x51d98
    g4 = v11;
    g4 = function_2a090(v11, g10, 1);
    g9 = a1;
    int32_t v12 = *v6; // 0x51db9
    g4 = v12;
    int32_t v13 = function_27fc0(v12, "members/numMachines", 0); // 0x51dc2
    g4 = v13;
    int32_t v14 = g6; // 0x51dc7
    int32_t * v15;
    if (v14 < v13) {
        // 0x51dd5
        int32_t v16; // bp-564
        int32_t v17 = &v16; // 0x51de6
        int32_t * v18 = (int32_t *)a1; // 0x51e31
        int32_t v19; // bp-296
        int32_t v20 = &v19; // 0x51e8f
        while (true) {
            // 0x51de0
            g4 = v14;
            g9 = v17;
            function_1e010(v17, "machine%d");
            g4 = v5;
            int32_t v21; // bp-559
            int32_t v22 = function_27340(v5, (int32_t)&v21, 0); // 0x51e1b
            g4 = v22;
            if (v22 != 0) {
                // 0x51e2e
                g9 = a1;
                g4 = v22;
                int32_t v23 = function_27fc0(v22, "numPlayers", 0); // 0x51e67
                g4 = v23;
                if (v23 >= 1) {
                    // 0x51e7a
                    g8 = 0;
                    while (true) {
                      lab_0x51e8f:
                        // 0x51e8f
                        g9 = v20;
                        function_1e010(v20, "player%d");
                        g4 = v22;
                        int32_t v24; // bp-291
                        int32_t v25 = function_27340(v22, (int32_t)&v24, 0); // 0x51ec4
                        g4 = v25;
                        int32_t v26 = function_27ea0(v25, "xuid", 0, 0); // 0x51eea
                        g4 = v26;
                        g6 = v26;
                        g10 = v20;
                        int32_t v27 = g9 | v26; // 0x51ef3
                        g9 = v27;
                        if (v27 == 0) {
                            int32_t v28 = g8 + 1; // 0x51e80
                            g8 = v28;
                            if (v28 == v23) {
                                // break -> 0x51fa0
                                break;
                            }
                            goto lab_0x51e8f;
                        } else {
                            int32_t v29 = function_26cf0(); // 0x51efe
                            g4 = v29;
                            function_26330(v29);
                            g4 = v29;
                            g8++;
                            function_27920(v29, "state", "joined");
                            g4 = v29;
                            function_27600(v29, "xuid", g6, v20);
                            g4 = v29;
                            g4 = function_275a0(v29, "player", v25);
                            g9 = a1;
                            g4 = *v18;
                            g9 = a1;
                            if (g8 != v23) {
                                // continue -> 0x51e8f
                                continue;
                            }
                            // 0x51f9c
                            g10 = v20;
                            goto lab_0x51fa0;
                        }
                    }
                }
            }
          lab_0x51fa0:;
            int32_t v30 = v14 + 1; // 0x51fa0
            g4 = v13;
            if (v30 == v13) {
                v15 = v18;
                // break -> 0x51fb9
                break;
            }
            v14 = v30;
        }
    } else {
        // 0x51d38
        v15 = (int32_t *)a1;
    }
    // 0x51fb9
    g9 = a1;
    int32_t result2 = *v15; // 0x51fbc
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x51fd0 - 0x51fd1
int32_t function_51fd0(void) {
    // 0x51fd0
    return g4;
}

// Address range: 0x51ff0 - 0x523c8
int32_t function_51ff0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x51ff0
    g4 = a2;
    g9 = a1;
    int32_t v1 = *(int32_t *)(a1 + 140); // 0x52021
    g4 = v1;
    int32_t v2 = function_27340(v1, (int32_t)"members", 0); // 0x5202a
    g4 = v2;
    g8 = v2;
    int32_t v3; // 0x52033
    if (v2 == 0) {
        // bb
        v3 = function_52451((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = v3;
    } else {
        v3 = v2;
    }
    int32_t v4 = function_27fc0(v3, "numMachines", 0); // 0x5204c
    g4 = v4;
    int32_t v5 = function_27fc0(g8, "numPlayers", 0); // 0x5206a
    g4 = v5;
    g6 = v4;
    if (v4 < 1) {
        int32_t v6 = function_52451((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x5207d
        g4 = v6;
    }
    // 0x52083
    int32_t v7; // bp-1104
    int32_t v8 = &v7; // 0x5208d
    g10 = v8;
    int32_t v9 = g8; // 0x52093
    g4 = 0;
    int32_t v10; // bp-1372
    int32_t v11 = &v10; // 0x5209f
    g9 = v11;
    function_1e010(v11, "machine%d");
    g4 = v9;
    int32_t v12; // bp-1367
    int32_t v13 = function_27340(v9, (int32_t)&v12, 0); // 0x520d4
    g4 = v13;
    g8 = v13;
    int32_t v14; // 0x520dd
    if (v13 == 0) {
        // bb41
        v14 = function_52438();
        g4 = v14;
    } else {
        v14 = v13;
    }
    int32_t result = function_27fc0(v14, "numPlayers", 0); // 0x520f6
    g4 = result;
    if (result < 1) {
        // bb43
        g4 = function_52438();
    }
    // 0x52109
    g6 = 0;
    while (true) {
        // 0x5211f
        g4 = function_1e010(v8, "player%d/xuid");
        int32_t v15; // bp-1099
        g9 = &v15;
        int32_t v16 = function_27ea0(g8, (char *)&v15, 0, 0) ^ a2; // 0x5215b
        g4 = v16;
        int32_t v17 = g9 ^ a3 | v16; // 0x52161
        g9 = v17;
        if (v17 == 0) {
            // break -> 0x52165
            break;
        }
        int32_t v18 = g6 + 1; // 0x52110
        g6 = v18;
        if (v18 == result) {
            // bb45
            g4 = function_52438();
        }
    }
    int32_t v19 = g8; // 0x52168
    g8 = v9;
    g9 = a1;
    g4 = v19;
    g4 = function_25fe0(v9, v19);
    g10 = 1;
    int32_t v20 = v4 - 1; // 0x521af
    if (v4 > 1) {
        // 0x521c0
        int32_t v21; // bp-836
        int32_t v22 = &v21; // 0x521c0
        int32_t v23; // bp-831
        int32_t v24 = &v23; // 0x521da
        int32_t v25; // bp-568
        int32_t v26 = &v25; // 0x52205
        while (true) {
            // 0x521c0
            g9 = v22;
            function_1e010(v22, "machine%d");
            g4 = v24;
            int32_t v27 = function_27340(g8, v24, 0); // 0x521ef
            g4 = v27;
            g6 = v27;
            if (v27 != 0) {
                // 0x521fa
                g4 = g10 - 1;
                g9 = v26;
                function_1e010(v26, "machine%d");
                int32_t v28; // bp-563
                g4 = &v28;
                g4 = function_262d0(g6);
            }
            int32_t v29 = g10 + 1; // 0x52229
            g10 = v29;
            if (v29 == v4) {
                // break -> 0x52234
                break;
            }
        }
    }
    // 0x52234
    g4 = v20;
    function_27680(g8, "numMachines", v20);
    int32_t v30 = v5 - result; // 0x52264
    g9 = v30;
    int32_t v31 = v30 >= 0 ? v30 : 0; // 0x5226a
    g4 = v31;
    g4 = function_27680(g8, "numPlayers", v31);
    int32_t v32; // bp-300
    int32_t v33 = &v32; // 0x52286
    int32_t v34 = 0;
    while (true) {
        // 0x52280
        g4 = v34;
        g9 = v33;
        function_1e010(v33, "player%d");
        g4 = v19;
        int32_t v35; // bp-295
        int32_t v36 = function_27340(v19, (int32_t)&v35, 0); // 0x522bb
        g4 = v36;
        int32_t v37 = function_27ea0(v36, "xuid", 0, 0); // 0x522e1
        g4 = v37;
        g10 = v37;
        g8 = v33;
        int32_t v38 = function_26cf0(); // 0x522f1
        g4 = v38;
        g6 = v38;
        g4 = function_26330(v38);
        g4 = function_27600(g6, "xuid", g10, v33);
        g7 = v36;
        if (v36 != 0) {
            // 0x5232a
            g4 = v36;
            int32_t v39 = function_26d60(v36); // 0x52333
            g4 = v39;
            g10 = v39;
            g4 = function_262d0(v39);
            g4 = function_25fb0(g6, g10);
        }
        // 0x52356
        g4 = v19;
        int32_t v40 = function_26d60(v19); // 0x5235f
        g4 = v40;
        g10 = v40;
        g4 = function_262d0(v40);
        function_25fb0(g6, g10);
        g9 = a1;
        int32_t v41 = v34 + 1; // 0x52391
        g4 = result;
        if (v41 == result) {
            // break -> 0x523aa
            break;
        }
        v34 = v41;
    }
    // 0x523aa
    g9 = a1;
    return result;
}

// Address range: 0x523cc - 0x52432
int32_t function_523cc(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g5 - 0x74bf8b40); // 0x523cc
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x523d3
    g6 |= 256 * v2 & 0xff00;
    unsigned char v3 = (char)v2 & 8; // 0x523d6
    int32_t v4 = (int32_t)v3 | v2 & -256; // 0x523d6
    g4 = v4;
    char * v5 = (char *)v4; // 0x523d8
    *v5 = *v5 + v3;
    int32_t v6 = g4; // 0x523da
    char * v7 = (char *)v6; // 0x523da
    *v7 = *v7 + (char)v6;
    int32_t v8 = *(int32_t *)(g9 + 140); // 0x523e4
    g4 = v8;
    int32_t v9 = function_27340(g5, v8, (int32_t)"Members"); // 0x523ed
    g4 = v9;
    int32_t v10 = *(int32_t *)(g5 + 8); // 0x523f6
    g4 = v10;
    g4 = function_50720(v10, (int32_t *)"members", v9, 0);
    int32_t v11 = *(int32_t *)(g5 - 28); // 0x52411
    g4 = v11;
    g6 = 1;
    int32_t result; // 0x5242b
    if (v11 != 0) {
        // 0x5241d
        g4 = function_28600(v11);
        result = g6;
    } else {
        result = 1;
    }
    // 0x52425
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x52438 - 0x52451
int32_t function_52438(void) {
    int32_t * v1 = (int32_t *)(g5 - 1388); // 0x52438
    *v1 = *v1 + 1;
    int32_t result = *(int32_t *)(g5 - 1372); // 0x5243f
    g4 = result;
    return result;
}

// Address range: 0x52451 - 0x52460
int32_t function_52451(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x52451
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return 0;
}

// Address range: 0x52460 - 0x52480
int32_t function_52460(void) {
    // 0x52460
    g10 = g4;
    g4 = function_26d40();
    g6 = g10;
    while (true) {
        // 0x5246c
        g4 = g5 - 28;
        g4 = function_4ff20();
        int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x52477
        g4 = v1;
        g6 = v1;
    }
}

// Address range: 0x52480 - 0x526fb
int32_t function_52480(int32_t a1) {
    int32_t v1 = g8; // 0x52483
    int32_t v2 = g4; // 0x52484
    g8 = v2;
    int32_t v3 = g10; // 0x52486
    int32_t v4 = g6; // 0x52487
    int32_t v5 = g9; // 0x5248e
    uint32_t v6 = g7; // 0x52496
    char v7 = v6; // 0x52496
    if (v5 == 0) {
        int32_t v8 = *(int32_t *)(v2 + 140); // 0x52648
        g4 = v8;
        uint32_t v9 = function_27fc0(v8, "members/numMachines", 0); // 0x52651
        g4 = v9;
        if (v9 >= 1) {
            int32_t v10 = v6 % 256; // 0x52660
            g7 = v10;
            int32_t v11; // bp-291
            int32_t v12 = &v11; // 0x52667
            g6 = 0;
            g10 = v12;
            int32_t v13; // bp-296
            int32_t v14 = &v13; // 0x52678
            while (true) {
                // 0x52678
                g4 = v14;
                g4 = function_1e010(v14, "members/machine%d");
                int32_t v15 = *(int32_t *)(g8 + 140); // 0x5269e
                g4 = v15;
                int32_t v16 = function_27340(v15, v12, 0); // 0x526a7
                g4 = v16;
                if (v16 != 0) {
                    // 0x526b0
                    g7 = v10;
                    g9 = v16;
                }
                int32_t v17 = g6 + 1; // 0x526c6
                g6 = v17;
                if (v17 == v9) {
                    // break -> 0x526d1
                    break;
                }
            }
        }
        // 0x526d1
        if (v7 != 0) {
            int128_t v18 = __asm_xorps(g878, g878); // 0x526de
            __asm_ucomiss(v18, *(int32_t *)(g8 + 136));
            if (true && v7 != 0) {
                // 0x526ee
                *(int32_t *)(g8 + 136) = __asm_movss_1646(v18);
            }
        }
    } else {
        // 0x524aa
        g6 = v5;
        int32_t v19 = function_27ea0(v5, "id", 0, 0); // 0x524c3
        g4 = v19;
        int32_t v20 = g9; // 0x524c8
        int32_t v21 = v20 | v19; // 0x524d0
        g7 = v21;
        if (v21 != 0) {
            int32_t v22 = function_27fc0(g6, "numPlayers", 0); // 0x524fb
            g4 = v22;
            int32_t v23 = function_27ea0(g6, "flags", 0, 0); // 0x52521
            g4 = v23;
            g10 = v22;
            if (v22 >= 1) {
                int32_t v24 = v23 % 2; // 0x52530
                g4 = v24;
                g10 = 0;
                int32_t v25 = g8; // 0x52535
                int32_t v26; // bp-564
                int32_t v27 = &v26; // 0x525a8
                while (true) {
                    // 0x525a8
                    g6 = v27;
                    int32_t v28; // bp-559
                    g8 = &v28;
                    function_1e010(v27, "player%d/xuid");
                    g4 = v5;
                    int32_t v29 = function_27ea0(v5, (char *)&v28, 0, 0); // 0x525e5
                    g4 = v29;
                    int32_t v30 = g9 | v29; // 0x525ec
                    g7 = v30;
                    if (v30 != 0) {
                        // 0x525f0
                        g8 = v25;
                        g6 = v20;
                        g7 = v19;
                        int32_t v31 = *(int32_t *)(v25 + 148) ^ v20; // 0x52602
                        g6 = v31;
                        int32_t v32 = *(int32_t *)(v25 + 144) ^ v19; // 0x52608
                        g7 = v32;
                        int32_t v33 = v32 | v31; // 0x5260e
                        g6 = v33;
                        if (v33 != 0) {
                            // 0x52548
                            g8 = -1;
                        } else {
                            // 0x52616
                            g8 = g10;
                            g4 = 0;
                            g9 = 0;
                        }
                        // 0x5254d
                        g7 = g282;
                        if (g282 != 0) {
                            int32_t v34 = *(int32_t *)g282; // 0x52561
                            g6 = v34;
                            if (v7 != 0) {
                                // 0x52569
                                g6 = v24;
                                g8 = v34;
                            }
                        }
                    }
                    int32_t v35 = g10 + 1; // 0x52599
                    g10 = v35;
                    if (v35 == v22) {
                        // break -> 0x524da
                        break;
                    }
                }
            }
        }
    }
    // 0x524da
    g6 = v4;
    g10 = v3;
    g8 = v1;
    return g4;
}

// Address range: 0x52700 - 0x5274d
int32_t function_52700(int32_t a1, int32_t a2, unsigned char a3) {
    int32_t v1 = g6; // 0x52706
    g6 = a1;
    int32_t v2 = g10; // 0x5270c
    g10 = a2;
    int32_t v3 = g8; // 0x52712
    int32_t v4 = a3; // 0x52715
    g8 = v4;
    int32_t result = *(int32_t *)a1; // 0x52719
    g4 = result;
    if ((char)result != 0) {
        // 0x52740
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    // 0x52725
    g9 = a2;
    g8 = v3;
    g10 = v2;
    g7 = v4 & (int32_t)&g862;
    g4 = a1;
    g6 = v1;
    int32_t v5; // ebp
    g5 = v5;
    int32_t result2 = function_52480(a1); // 0x5273a
    g4 = result2;
    return result2;
}

// Address range: 0x52750 - 0x529af
int32_t function_52750(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x52753
    int32_t v2 = g10; // 0x52754
    int32_t v3 = g6; // 0x52755
    int32_t v4 = g4; // 0x52756
    g6 = v4;
    *(int32_t *)(v4 + 132) = 2;
    g4 = g292;
    int32_t v5 = g6; // 0x5276d
    int32_t * v6 = (int32_t *)(v5 + 124); // 0x5276d
    g10 = *v6;
    g8 = *(int32_t *)(v5 + 128);
    int32_t v7 = *(int32_t *)(g292 + 16); // 0x52776
    g4 = v7;
    int32_t v8 = *(int32_t *)v7; // 0x52779
    g9 = v8;
    g9 = *(int32_t *)(v8 + 60);
    *v6 = 0;
    *(int32_t *)(g6 + 128) = 0;
    int32_t v9 = *(int32_t *)(g6 + 140); // 0x527ac
    g4 = v9;
    g4 = function_27920(v9, "system/lock", "SteamServersDisconnected");
    int32_t v10 = *(int32_t *)(g6 + 140); // 0x527ca
    g4 = v10;
    int32_t v11 = function_27c00(v10, "system/netflag", (int32_t *)&g129); // 0x527d3
    g4 = v11;
    int32_t v12 = function_2cc30(v11, "noleave"); // 0x527e3
    g4 = v12;
    if (v12 == 0) {
        // 0x529a8
        return 0;
    }
    int32_t v13 = (int32_t)g290; // 0x527f0
    g4 = v13;
    g9 = v13;
    int32_t v14 = *(int32_t *)(g6 + 140); // 0x52822
    g4 = v14;
    int32_t v15 = function_27340(v14, (int32_t)"members", 0); // 0x52831
    g4 = v15;
    g8 = v15;
    if (v15 == 0) {
        // 0x52998
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v16 = function_27fc0(v15, "numMachines", 0); // 0x52853
    g4 = v16;
    if (v16 >= 1) {
        // 0x52866
        g10 = 0;
        int32_t v17; // bp-296
        int32_t v18 = &v17; // 0x52893
        int32_t v19; // bp-291
        int32_t v20 = &v19; // 0x528ad
      lab_0x52893_2:
        while (true) {
          lab_0x52893:
            // 0x52893
            g4 = v18;
            function_1e010(v18, "machine%d");
            g4 = v20;
            int32_t v21 = function_27340(g8, v20, 0); // 0x528c2
            g4 = v21;
            g6 = v21;
            if (v21 == 0) {
                goto lab_0x52884;
            } else {
                int32_t v22 = function_27ea0(v21, "id", 0, 0) ^ v13; // 0x528f3
                g4 = v22;
                int32_t v23 = g9 ^ v13 | v22; // 0x528f9
                g9 = v23;
                if (v23 != 0) {
                    // 0x52870
                    g4 = function_25fe0(g8, g6);
                    g4 = function_28600(g6);
                    goto lab_0x52884;
                } else {
                    // 0x52901
                    g10++;
                    g4 = function_262d0(g6);
                    int32_t v24 = function_27fc0(g6, "numPlayers", 1); // 0x52927
                    g4 = v24;
                    g4 = function_27680(g8, "numPlayers", v24);
                    int32_t v25 = function_27fc0(g6, "numPlayers", 1); // 0x52953
                    g4 = v25;
                    g4 = function_27680(g8, "numSlots", v25);
                    if (g10 == v16) {
                        // break -> 0x52980
                        break;
                    }
                    goto lab_0x52893;
                }
            }
        }
    }
  lab_0x52980:;
    int32_t result = function_27680(g8, "numMachines", 1); // 0x52993
    g4 = result;
    // 0x52998
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x52884:;
    int32_t v26 = g10 + 1; // 0x52884
    g10 = v26;
    if (v26 == v16) {
        // break -> 0x52980
        goto lab_0x52980;
    }
    // continue -> 0x52893
    goto lab_0x52893_2;
}

// Address range: 0x529b3 - 0x529bf
int32_t function_529b3(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g32); // 0x529b3
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x529b9
    char * v3 = (char *)(v2 + 94); // 0x529b9
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x529c0 - 0x52a60
int32_t function_529c0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x529c0
    int32_t v2 = g6; // 0x529c6
    g6 = a1;
    int32_t v3 = g10; // 0x529cc
    int32_t result = *(int32_t *)(a1 + 132); // 0x529cf
    g4 = result;
    if (result != 0) {
        if (result == 2) {
            // 0x529f0
            g6 = v2;
            g5 = v1;
            return result;
        }
        // 0x529de
        g4 = a1;
        g6 = v2;
        g5 = v1;
        int32_t result2 = function_52750(v2, v3, v1); // 0x529e9
        g4 = result2;
        return result2;
    }
    int32_t v4 = function_26cf0(); // 0x52a07
    g4 = v4;
    g10 = v4;
    g4 = function_26330(v4);
    g4 = function_275a0(g10, "syssession", g6);
    g4 = function_27920(g10, "error", "SteamServersDisconnected");
    int32_t v5 = *(int32_t *)g6; // 0x52a4a
    g4 = v5;
    g10 = v3;
    g6 = v2;
    int32_t result3 = *(int32_t *)(v5 + 40); // 0x52a58
    g4 = result3;
    return result3;
}

// Address range: 0x52a61 - 0x52a62
int32_t function_52a61(void) {
    // 0x52a61
    return g4;
}

// Address range: 0x52a80 - 0x52af0
int32_t function_52a80(int32_t a1, uint32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x52a80
    int32_t v2 = v1; // bp-4
    g9 = a1;
    g7 = a2 % 256;
    int32_t * v3 = (int32_t *)(a1 + 132); // 0x52a8a
    int32_t result = *v3; // 0x52a8a
    g4 = result;
    if (result == 1) {
        if ((char)a2 != 0) {
            // 0x52ab0
            g5 = v1;
            return result;
        }
        // 0x52ae4
        *v3 = 0;
        g5 = v2;
        return result;
    }
    if (result == 2) {
        if ((char)a2 != 0) {
            // 0x52ab0
            g5 = v1;
            return result;
        }
        // 0x52abc
        *v3 = 0;
        g5 = v2;
        int32_t result2 = function_529c0(v2, g9, 0); // 0x52ad1
        g4 = result2;
        return result2;
    }
    if (result != 0) {
        // 0x52ab0
        g5 = v1;
        return result;
    }
    if ((char)a2 != 0) {
        // 0x52aa2
        *v3 = 1;
    }
    // 0x52ab0
    g5 = v1;
    return result;
}

// Address range: 0x52af0 - 0x52f18
int32_t function_52af0(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x52af3
    int32_t v2 = g10; // 0x52af4
    int32_t v3; // bp-92
    int32_t v4 = &v3; // 0x52af5
    g4 = v4;
    int32_t v5 = g6; // 0x52af8
    g10 = a1;
    g4 = function_331e0();
    g9 = v4;
    int16_t v6 = 1; // bp-32
    function_32160(v4, 1);
    g4 = g281;
    g9 = *(int32_t *)g281;
    g6 = g281;
    unsigned char v7;
    if (v7 % 2 != 0) {
        // 0x52e1d
        g4 = v4;
        g4 = function_32570(v4, "%d");
    } else {
        // 0x52b57
        g7 = v4;
        int32_t v8 = function_320f0(v4, 4); // 0x52b68
        g4 = v8;
        if ((char)v8 != 0) {
            // 0x52e39
            int32_t v9;
            int32_t v10;
            int32_t v11 = v10 - v9; // 0x52ed1
            unsigned char v12;
            if (v12 % 2 != 0) {
                int32_t v13 = v3 + v11; // 0x52ed4
                g9 = v13;
                if (v13 != 0) {
                    int32_t v14 = &v6; // 0x52f04
                    g4 = v14;
                    function_2cb10(v13, v14, 4);
                }
            } else {
                g9 = v3;
                *(int32_t *)(v3 + v11) = g6;
            }
            // 0x52e52
            g8 = v4;
            int32_t v15 = v10 + 4; // 0x52e55
            g4 = v15;
            g4 = function_321d0(v4, v15);
        }
    }
    // 0x52b75
    g8 = a2;
    g9 = v4;
    int32_t v16 = function_27340(a2, (int32_t)"binary/ptr", 0); // 0x52b9a
    g4 = v16;
    g6 = v16;
    int32_t v17 = function_27340(g8, (int32_t)"binary/size", 0); // 0x52bb4
    g4 = v17;
    g8 = v17;
    if (v17 != 0) {
        if (v16 != 0) {
            int32_t v18 = function_27e60(v16, 0, 0); // 0x52dd6
            g4 = v18;
            g6 = v18;
            int32_t v19 = function_27fc0(g8, NULL, 0); // 0x52df0
            g4 = v19;
            if (v19 != 0) {
                if (v18 != 0) {
                    // 0x52e05
                    g4 = v4;
                    g4 = function_322a0(v4, v18, v19);
                }
            }
        }
    }
    // 0x52bc7
    g8 = a2;
    int32_t v20 = function_27c00(a2, "p2p", NULL); // 0x52bdd
    g4 = v20;
    g6 = v20;
    if (v20 == 0) {
        int32_t v21 = g10; // 0x52e8f
        int32_t v22 = *(int32_t *)(v21 + 128); // 0x52e8f
        g9 = v22;
        int32_t v23 = *(int32_t *)(v21 + 124); // 0x52e95
        g7 = v23;
        int32_t v24 = v23 | v22; // 0x52e9a
        g4 = v24;
        if (v24 == 0) {
            goto lab_0x52d9e;
        } else {
            // 0x52ea2
            g4 = g292;
            int32_t v25 = *(int32_t *)(g292 + 16); // 0x52eaa
            g4 = v25;
            int32_t v26 = *(int32_t *)v25; // 0x52ead
            g6 = v26;
            g6 = *(int32_t *)(v26 + 104);
            g10 = v3;
            goto lab_0x52dad;
        }
    } else {
        int32_t v27 = function_2cc30(v20, "reliable"); // 0x52bf7
        g4 = v27;
        if (v27 != 0) {
            int32_t v28 = function_2cc30(g6, "buffer"); // 0x52c15
            g4 = v28;
            if (v28 != 0) {
                // 0x52e6c
                g4 = function_2cc30(g6, "unreliable") & (int32_t)&g862 & -256;
            }
        }
        int32_t v29 = *(int32_t *)(g10 + 140); // 0x52c3c
        g4 = v29;
        int32_t v30 = function_27fc0(v29, "members/numMachines", 0); // 0x52c45
        g4 = v30;
        if (v30 >= 1) {
            // 0x52c68
            int32_t v31; // bp-628
            int32_t v32 = &v31; // 0x52c6e
            int32_t v33; // bp-360
            int32_t v34 = &v33; // 0x52cc6
            int32_t v35; // bp-355
            int32_t v36 = &v35; // 0x52ce4
            int32_t v37 = 0;
            while (true) {
                // 0x52c68
                g8 = v37;
                g4 = v32;
                g4 = function_1e010(v32, "members/machine%d/numPlayers");
                int32_t v38; // bp-623
                g9 = &v38;
                int32_t v39 = *(int32_t *)(g10 + 140); // 0x52c9a
                g4 = v39;
                int32_t v40 = function_27fc0(v39, (char *)&v38, 0); // 0x52ca3
                g4 = v40;
                if (v40 >= 1) {
                    // 0x52cb6
                    g6 = 0;
                    while (true) {
                        // 0x52cc0
                        g8 = v37;
                        g4 = v34;
                        g4 = function_1e010(v34, "members/machine%d/player%d/xuid");
                        g9 = v36;
                        int32_t v41 = *(int32_t *)(g10 + 140); // 0x52cfe
                        g4 = v41;
                        int32_t v42 = function_27ea0(v41, (char *)&v35, 0, 0); // 0x52d07
                        g4 = v42;
                        int32_t v43 = v42 | v36; // 0x52d0e
                        g7 = v43;
                        if (v43 != 0) {
                            int32_t v44 = g10; // 0x52d12
                            int32_t v45 = *(int32_t *)(v44 + 148); // 0x52d12
                            g8 = v45;
                            int32_t v46 = *(int32_t *)(v44 + 144) ^ v42; // 0x52d20
                            g7 = v46;
                            int32_t v47 = g9 ^ v45 | v46; // 0x52d22
                            g8 = v47;
                            if (v47 != 0) {
                                // 0x52d26
                                g7 = g292;
                                g7 = v3;
                                g8 = *(int32_t *)(g292 + 32);
                            }
                        }
                        int32_t v48 = g6 + 1; // 0x52d76
                        g6 = v48;
                        if (v48 == v40) {
                            // break -> 0x52d85
                            break;
                        }
                    }
                }
                int32_t v49 = v37 + 1; // 0x52d85
                g4 = v30;
                if (v49 == v30) {
                    // break -> 0x52d9e
                    break;
                }
                v37 = v49;
            }
        }
        goto lab_0x52d9e;
    }
  lab_0x52d9e:
    // 0x52d9e
    g8 = a2;
    g4 = *(int32_t *)g10;
    goto lab_0x52dad;
  lab_0x52dad:
    // 0x52dad
    g4 = v4;
    int32_t result = function_564c0(&v3); // 0x52db3
    g4 = result;
    g6 = v5;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x52f19 - 0x52f1d
int32_t function_52f19(void) {
    // 0x52f19
    return g4;
}

// Address range: 0x52f30 - 0x52f31
int32_t function_52f30(void) {
    // 0x52f30
    return g4;
}

// Address range: 0x52fa1 - 0x52fa9
int32_t function_52fa1(void) {
    int32_t result = g4 & -24; // 0x52fa1
    g4 = result;
    g7 = -0x760002c3;
    return result;
}

// Address range: 0x52fd6 - 0x52fd7
int32_t function_52fd6(void) {
    // 0x52fd6
    return g4;
}

// Address range: 0x53000 - 0x53001
int32_t function_53000(void) {
    // 0x53000
    return g4;
}

// Address range: 0x53020 - 0x53044
int32_t function_53020(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g7 - 0x76fbdb84); // 0x53020
    *v1 = *v1 - 1;
    g4 ^= 36;
    g4 = function_52af0((int32_t)&g870, (int32_t)&g870);
    int32_t v2 = *(int32_t *)(g5 - 28); // 0x5302d
    g4 = v2;
    int32_t result; // 0x53037
    if (v2 != 0) {
        // 0x53034
        result = function_28600(v2);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x5303c
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x53050 - 0x53052
int32_t function_53050(void) {
    int32_t result = function_52fd6(); // 0x53050
    g4 = result;
    return result;
}

// Address range: 0x53060 - 0x53062
int32_t function_53060(void) {
    int32_t result = function_53000(); // 0x53060
    g4 = result;
    return result;
}

// Address range: 0x53062 - 0x531f7
int32_t function_53062(int32_t a1, int32_t a2, int32_t a3) {
    // 0x53062
    g6 = g4;
    g4 = g5 - 28;
    g4 = function_4ff20();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x5306f
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g8; // 0x53093
    int32_t v3 = g10; // 0x53094
    int32_t v4 = g6; // 0x53095
    g10 = a1;
    g8 = a2;
    g6 = a3;
    int32_t v5 = *(int32_t *)(a1 + 140); // 0x530b2
    g4 = v5;
    int32_t v6 = function_27c00(v5, "system/netflag", (int32_t *)&g129); // 0x530bb
    g4 = v6;
    int32_t v7 = function_2cc30(v6, "noleave"); // 0x530cb
    g4 = v7;
    if (v7 == 0) {
        // 0x531e8
        return 0;
    }
    int32_t v8 = g10; // 0x530d8
    int32_t v9 = *(int32_t *)v8; // 0x530d8
    g4 = v9;
    int32_t v10 = *(int32_t *)(v8 + 188); // 0x530eb
    g4 = v10;
    int32_t v11 = g9; // 0x530f1
    int32_t v12; // 0x530f7
    if (v10 == 5) {
        // bb
        v12 = function_53208();
        g4 = v12;
    } else {
        v12 = v10;
    }
    if (v12 == 3) {
        // bb257
        g4 = function_53208();
    }
    int32_t v13 = g10; // 0x5310b
    int32_t v14; // bp-52
    g7 = &v14;
    g4 = v14;
    int32_t v15 = *(int32_t *)(v13 + 144); // 0x53140
    g7 = v15;
    int32_t v16 = v15 ^ v14; // 0x53152
    g7 = v16;
    int32_t v17;
    int32_t v18 = *(int32_t *)(v13 + 148) ^ v17 | v16; // 0x53154
    g9 = v18;
    int32_t v19; // 0x5315c
    if (v18 == 0) {
        // bb259
        g4 = function_53220();
        v19 = g10;
    } else {
        v19 = v13;
    }
    // 0x5315c
    if (*(int32_t *)(v19 + 188) == 2) {
        // bb261
        g4 = function_532a0();
    }
    int32_t v20 = v14 ^ v9; // 0x53172
    g4 = v20;
    int32_t v21 = v20 | v11 ^ v17; // 0x53175
    g9 = v21;
    int32_t result; // 0x531cd
    if (v21 != 0) {
        int32_t v22 = function_26cf0(); // 0x53180
        g4 = v22;
        g6 = v22;
        g4 = function_26330(v22);
        function_27920(g6, "state", "client");
        g4 = v14;
        g4 = function_27600(g6, "xuid", v14, v17);
        result = *(int32_t *)g10;
        g4 = result;
    } else {
        result = v20;
    }
    // 0x531d9
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x531fb - 0x53204
int32_t function_531fb(int32_t a1, int32_t a2) {
    // 0x531fb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x5e5bf465); // 0x531fb
    *v2 = *v2 - 1;
    g8 = a1;
    return g4;
}

// Address range: 0x53208 - 0x5321d
int32_t function_53208(void) {
    int32_t result = function_51ff0(g10, g8, g6); // 0x53213
    g4 = result;
    return result;
}

// Address range: 0x53220 - 0x53297
int32_t function_53220(void) {
    int32_t v1 = *(int32_t *)(g10 + 188) == 3 ? g9 : (int32_t)"n/a"; // 0x53233
    char * v2 = (char *)v1;
    g6 = v1;
    int32_t v3 = function_26cf0(); // 0x53236
    g4 = v3;
    g8 = v3;
    g4 = function_26330(v3);
    g4 = function_275a0(g8, "syssession", g10);
    if (v1 == 0) {
        // bb
        g4 = function_532d0();
    }
    // 0x53265
    *(int32_t *)(g10 + 188) = 4;
    function_27920(g8, "error", (char *)*(int32_t *)&v2);
    int32_t result = g10; // 0x53283
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    g5 = *(int32_t *)g5;
    return result;
}

// Address range: 0x532a0 - 0x532d0
int32_t function_532a0(void) {
    int32_t v1 = g10; // 0x532a0
    int32_t v2 = *(int32_t *)(v1 + 180) ^ g6; // 0x532a0
    g6 = v2;
    int32_t * v3 = (int32_t *)(v1 + 176); // 0x532a6
    int32_t v4 = *v3 ^ g8; // 0x532a6
    g8 = v4;
    g6 = v4 | v2;
    g7 = *(int32_t *)(g5 - 52);
    *v3 = g4;
    *(int32_t *)(g10 + 180) = g7;
    int32_t result = function_52f30(); // 0x532c6
    g4 = result;
    return result;
}

// Address range: 0x532d0 - 0x533f3
int32_t function_532d0(void) {
    int32_t v1 = *(int32_t *)(g10 + 140); // 0x532e0
    g4 = v1;
    int32_t v2 = function_27c00(v1, "system/netflag", (int32_t *)&g129); // 0x532e9
    g4 = v2;
    int32_t v3 = function_2cc30((int32_t)"teamlink", (char *)v2); // 0x532f9
    g4 = v3;
    if (v3 == 0) {
        // 0x53302
        *(int32_t *)(g10 + 188) = 4;
        int32_t result = function_27920(g8, "error", "migrate"); // 0x5331f
        g4 = result;
        return result;
    }
    int32_t v4 = *(int32_t *)&g273; // 0x53330
    char * v5 = (char *)v4;
    g4 = v4;
    g9 = v4;
    g7 = *(int32_t *)(g10 + 140);
    if (v4 != 0) {
        // 0x5335b
        *(int32_t *)(g5 - 28) = v4;
        int32_t v6 = function_27c00(*(int32_t *)&v5, "error", NULL); // 0x53371
        g4 = v6;
        if (v6 != 0) {
            // 0x5337a
            *(int32_t *)(g10 + 188) = 4;
            function_27920(g8, "error", (char *)v6);
            g4 = (int32_t)g283;
            g9 = *(int32_t *)g283;
        }
        int32_t v7 = *(int32_t *)(g5 - 28); // 0x533b0
        g4 = v7;
        if (v7 != 0) {
            // 0x533b7
            g4 = function_28600(v7);
        }
    }
    // 0x533bf
    *(int32_t *)(g10 + 188) = 5;
    int32_t result2 = function_27920(g8, "action", "host"); // 0x533e9
    g4 = result2;
    return result2;
}

// Address range: 0x533f3 - 0x53471
int32_t function_533f3(int32_t a1, int32_t a2) {
    // 0x533f3
    g6 = g4;
    g4 = g5 - 28;
    g4 = function_4ff20();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x53400
    g4 = v1;
    g6 = v1;
    g4 = function_26d40();
    int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x53412
    g4 = v2;
    g10 = v2;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v3 = g6; // 0x53436
    g6 = a2;
    int32_t v4 = g10; // 0x5343c
    g10 = a1;
    int32_t v5 = *(int32_t *)a2; // 0x53445
    g4 = v5;
    int32_t v6 = *(int32_t *)(a2 + 4); // 0x53447
    g9 = v6;
    int32_t result2 = *(int32_t *)(a1 + 124) ^ v5; // 0x5344a
    g4 = result2;
    int32_t v7 = *(int32_t *)(a1 + 128) ^ v6 | result2; // 0x53453
    g9 = v7;
    if (v7 == 0) {
        int32_t result = a1 + 152; // 0x53468
        g4 = result;
        return result;
    }
    // 0x53457
    g6 = v3;
    g10 = v4;
    return result2;
}

// Address range: 0x53491 - 0x53512
int32_t function_53491(void) {
    // 0x53491
    g8++;
    char * v1 = (char *)(2 * g4 + 0x40000); // 0x53493
    *v1 = (char)(g6 / 256);
    g6 = g6 & -0xff01 | 256 * (int32_t)*v1;
    int32_t v2 = g4; // 0x5349a
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = function_26cf0(); // 0x534a3
    g4 = v3;
    g8 = v3;
    g4 = function_26330(v3);
    g4 = function_275a0(g8, "syssession", g10);
    g4 = (int32_t)"create";
    int32_t v4 = *(int32_t *)(g6 + 16) - 2; // 0x534d6
    g9 = v4;
    int32_t v5; // 0x534de
    if (v4 < 5) {
        // 0x534de
        v5 = *(int32_t *)(4 * v4 + (int32_t)&g205);
        g4 = v5;
    } else {
        v5 = (int32_t)"create";
    }
    // 0x534e5
    function_27920(g8, "error", (char *)v5);
    g4 = g10;
    *(int32_t *)(g5 + 12) = g8;
    *(int32_t *)(g5 + 8) = g10;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    int32_t result = *(int32_t *)(g4 + 40); // 0x5350a
    g4 = result;
    return result;
}

// Address range: 0x53542 - 0x53562
float80_t function_53542(int32_t a1) {
    int32_t v1 = a1;
    char * v2 = (char *)(g6 + 0x5d8be07d); // 0x53544
    unsigned char v3 = *v2; // 0x53544
    unsigned char v4 = (char)g7 % 32; // 0x53544
    int32_t v5; // 0x53551
    if (v4 != 0) {
        // bb
        *v2 = v3 << 8 - v4 | v3 >> v4;
        v5 = v1;
    } else {
        v5 = a1;
    }
    // bb229
    g4 = g4 & -256 | (int32_t)__asm_in_1658(-125);
    char v6 = __asm_in_1653((int16_t)g9); // 0x5354c
    g10 = (g4 | (int32_t)v6) & -256 | (int32_t)(v6 - 117);
    int32_t v7 = &v1; // 0x53550
    g4 = v7;
    v1 = (char)v5 + (char)v7;
    int32_t v8 = g7; // 0x53553
    char * v9 = (char *)(v8 - 0x6f79cc08); // 0x53553
    *v9 = *v9 + (char)v8;
    *(char *)g7 = (char)(g9 / 256) + *(char *)&g7;
    float80_t v10; // st7
    return v10 * (float80_t)g7;
}

// Address range: 0x53570 - 0x535a5
int32_t function_53570(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g755); // 0x53570
    *v1 = *v1 - 1;
    uint32_t v2 = g7; // 0x53576
    g7 = 256 * (v2 / 256 + g6 & 255) | v2 & -0xff01;
    int128_t v3 = __asm_movups(*(int128_t *)(a1 - 40)); // 0x5357b
    *(int32_t *)(g10 + 180) = g6;
    *(int32_t *)(g10 + 184) = __asm_movss_1646(__asm_cvtpd2ps(v3));
    g6 = *(int32_t *)(a1 - 12);
    *(int32_t *)(a1 + 8) = g10;
    g8 = *(int32_t *)(a1 - 4);
    g10 = *(int32_t *)(a1 - 8);
    int32_t result = function_52f30(); // 0x535a0
    g4 = result;
    return result;
}

// Address range: 0x535a8 - 0x535fc
int32_t function_535a8(void) {
    int32_t v1 = function_26cf0(); // 0x535af
    g4 = v1;
    g6 = v1;
    g4 = function_26330(v1);
    g4 = function_275a0(g6, "syssession", g10);
    function_27920(g6, "error", "n/a");
    g4 = g10;
    *(int32_t *)(g5 + 12) = g6;
    return g4;
}

// Address range: 0x535fc - 0x53777
int32_t function_535fc(int32_t a1, int32_t a2, int32_t a3) {
    // 0x535fc
    g6 = g4;
    g4 = function_26d40();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x53609
    g4 = v1;
    g10 = v1;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x53626
    g6 = a1;
    int32_t v4 = g10; // 0x5362c
    g10 = a2;
    int32_t v5 = g8; // 0x53632
    g8 = a3;
    int32_t v6 = *(int32_t *)(a1 + 140); // 0x53648
    g4 = v6;
    int32_t v7 = function_27c00(v6, "system/netflag", (int32_t *)&g129); // 0x53651
    g4 = v7;
    int32_t v8 = function_2cc30(v7, "noleave"); // 0x53661
    g4 = v8;
    if (v8 == 0) {
        // 0x53770
        return 0;
    }
    int32_t result = function_51ff0(g6, g10, g8); // 0x53679
    g4 = result;
    if ((char)result == 0) {
        // 0x53682
        g6 = v3;
        g10 = v4;
        g8 = v5;
        return result;
    }
    int32_t v9 = function_26cf0(); // 0x53697
    g4 = v9;
    function_26330(v9);
    g4 = v9;
    function_27600(v9, "xuid", g10, g8);
    g4 = v9;
    g4 = function_52af0(g6, v9);
    int32_t v10 = function_26cf0(); // 0x536e3
    g4 = v10;
    function_26330(v10);
    g4 = v10;
    if (v10 != 0) {
        // 0x53702
        g4 = v10;
        function_27680(v10, "numMachines", 1);
        g4 = v10;
        g4 = function_27600(v10, "id", g10, g8);
        g9 = v10;
        g4 = *(int32_t *)g6;
    }
    // 0x53747
    g4 = v9;
    if (v9 == 0) {
        // 0x53682
        g6 = v3;
        g10 = v4;
        g8 = v5;
        return 0;
    }
    int32_t result2 = function_28600(v9); // 0x53755
    g4 = result2;
    g6 = v3;
    g10 = v4;
    g8 = v5;
    return result2;
}

// Address range: 0x5377b - 0x53789
int32_t function_5377b(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x758bf45d); // 0x5377b
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x53789 - 0x537bf
int32_t function_53789(void) {
    // 0x53789
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 44);
    g4 = function_26d40();
    while (true) {
        // 0x53796
        g4 = g5 - 28;
        g4 = function_4ff20();
        int32_t v2 = function_7ab57(g6, (int32_t)&g870); // 0x537a1
        g4 = v2;
        g6 = v2;
        g4 = *(int32_t *)(g5 - 44);
        g4 = function_26d40();
        int32_t v3 = function_7ab57(g6, (int32_t)&g870); // 0x537b6
        g4 = v3;
        g6 = v3;
    }
}

// Address range: 0x537c0 - 0x53823
int32_t function_537c0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x537c3
    int32_t v2 = function_26cf0(); // 0x537ce
    g4 = v2;
    g6 = v2;
    function_26330(v2);
    g4 = a2;
    int32_t v3 = g6; // 0x537e8
    function_2a090(v3, a2, 1);
    g4 = a1;
    function_52af0(a1, g6);
    g4 = v3;
    int32_t result; // 0x53818
    if (v3 != 0) {
        // 0x53815
        result = function_28600(v3);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x5381d
    g6 = v1;
    return result;
}

// Address range: 0x53823 - 0x53952
int32_t function_53823(int32_t a1, int32_t a2) {
    // 0x53823
    int32_t v1; // ebp
    *(int32_t *)(v1 - 28) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 28); // 0x5382e
    g4 = v2;
    g6 = function_7ab57(v2, (int32_t)&g870);
    g4 = g5 - 12;
    g4 = function_4ff20();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // bp-4
    g5 = &v3;
    int32_t v4 = g10; // 0x53856
    g10 = a2;
    int32_t v5 = g6; // 0x5385c
    g6 = a1;
    int32_t v6 = g8; // 0x53862
    int32_t v7 = function_27ea0(a2, "xuid", 0, 0); // 0x53880
    g4 = v7;
    int32_t v8; // bp-32
    g7 = &v8;
    v8 = 0;
    int32_t v9 = *(int32_t *)(g6 + 140); // 0x5389b
    g4 = v9;
    function_1e0a0(v9, v7, g9, &v8);
    g4 = v8;
    int32_t result; // 0x53940
    if (v8 != 0) {
        int32_t v10 = function_27340(v8, (int32_t)"Mutelist", 0); // 0x538c7
        g4 = v10;
        g8 = v10;
        if (v10 != 0) {
            g4 = v8;
            g4 = function_25fe0(v8, v10);
            g4 = function_28600(g8);
        }
        int32_t v11 = function_27340(g10, (int32_t)"Mutelist", 0); // 0x538fc
        g4 = v11;
        g10 = v11;
        if (v11 != 0) {
            g4 = v8;
            int32_t v12 = function_27340(v8, (int32_t)"Mutelist", 1); // 0x5391d
            g4 = v12;
            g4 = function_2a090(v12, g10, 1);
        }
        g4 = v8;
        result = function_537c0(g6, v8);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x53945
    g6 = v5;
    g10 = v4;
    g8 = v6;
    return result;
}

// Address range: 0x53960 - 0x53a3d
int32_t function_53960(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x53963
    int32_t v2 = g10; // 0x53964
    int32_t v3 = g6; // 0x53965
    g10 = a1;
    g8 = a2;
    int32_t v4 = function_26cf0(); // 0x53976
    g4 = v4;
    g6 = v4;
    g4 = function_26330(v4);
    int32_t v5 = function_27ea0(g8, "xuid", 0, 0); // 0x539a8
    g4 = v5;
    g4 = function_27600(g6, "xuid", v5, g9);
    g4 = function_275a0(g6, "player", g8);
    g4 = *(int32_t *)g10;
    int32_t v6 = function_26cf0(); // 0x539ec
    g4 = v6;
    g6 = v6;
    g4 = function_26330(v6);
    int32_t v7 = g6; // 0x53a03
    g4 = function_2a090(v7, g8, 1);
    function_52af0(g10, g6);
    g4 = v7;
    int32_t result; // 0x53a30
    if (v7 != 0) {
        // 0x53a2d
        result = function_28600(v7);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x53a35
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x53a3d - 0x53b2d
int32_t function_53a3d(int32_t a1, int32_t a2) {
    // 0x53a3d
    g10 = g4;
    g4 = function_26d40();
    g6 = function_7ab57(g10, (int32_t)&g870);
    g4 = g5 - 28;
    g4 = function_4ff20();
    int32_t v1 = function_7ab57(g6, (int32_t)&g870); // 0x53a5c
    g4 = v1;
    g10 = v1;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g10; // 0x53a86
    g10 = a2;
    int32_t v4 = g6; // 0x53a8c
    g6 = a1;
    int32_t v5 = g8; // 0x53a92
    int32_t v6 = function_27ea0(a2, "xuid", 0, 0); // 0x53ab0
    g4 = v6;
    int32_t v7 = *(int32_t *)(g6 + 140); // 0x53ac5
    g4 = v7;
    int32_t v8 = function_1e0a0(v7, v6, g9, NULL); // 0x53ace
    g4 = v8;
    g8 = v8;
    if (v8 == 0) {
        // 0x53b20
        g6 = v4;
        g10 = v3;
        g8 = v5;
        return 0;
    }
    int32_t v9 = function_27c00(g10, "voice", (int32_t *)&g129); // 0x53aec
    g4 = v9;
    g4 = function_27920(g8, "voice", (char *)v9);
    int32_t v10 = g8; // 0x53b05
    g10 = v3;
    int32_t v11 = g6; // 0x53b0b
    g8 = v5;
    g6 = v4;
    g5 = v2;
    int32_t result = function_53960(v11, v10); // 0x53b17
    g4 = result;
    return result;
}

// Address range: 0x53b30 - 0x53c07
int32_t function_53b30(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x53b33
    int32_t v2 = g10; // 0x53b34
    int32_t v3 = g6; // 0x53b35
    g10 = a2;
    g8 = a1;
    int32_t v4 = function_27340(a2, (int32_t)"update", 0); // 0x53b52
    g4 = v4;
    g4 = function_50bd0(g8, v4);
    int32_t v5 = function_26cf0(); // 0x53b6a
    g4 = v5;
    g6 = v5;
    g4 = function_26330(v5);
    int32_t v6 = g6; // 0x53b81
    int32_t v7 = function_27340(g10, (int32_t)"update", 0); // 0x53b97
    g4 = v7;
    if (v7 != 0) {
        int32_t v8 = function_26d60(v7); // 0x53ba3
        g4 = v8;
        g4 = function_25fb0(g6, v8);
    }
    int32_t v9 = function_27340(g10, (int32_t)"delete", 0); // 0x53bc7
    g4 = v9;
    if (v9 != 0) {
        int32_t v10 = function_26d60(v9); // 0x53bd3
        g4 = v10;
        g4 = function_25fb0(g6, v10);
    }
    // 0x53be4
    function_52af0(g8, g6);
    g4 = v6;
    int32_t result; // 0x53bfa
    if (v6 != 0) {
        // 0x53bf7
        result = function_28600(v6);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x53bff
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x53c1a - 0x53c1b
int32_t function_53c1a(void) {
    // 0x53c1a
    return g4;
}

// Address range: 0x53c1c - 0x53c23
int32_t function_53c1c(void) {
    int32_t result = g4 & -256 | (int32_t)__asm_in_1658(-24); // 0x53c1d
    g4 = result;
    return result;
}

// Address range: 0x53c30 - 0x53d57
int32_t function_53c30(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x53c33
    int32_t v2 = g10; // 0x53c34
    int32_t v3 = g6; // 0x53c35
    g4 = a2;
    g6 = a1;
    int32_t v4 = function_27ea0(a2, "xuid", 0, 0); // 0x53c5a
    g4 = v4;
    int32_t v5; // bp-36
    g7 = &v5;
    v5 = 0;
    int32_t v6 = *(int32_t *)(g6 + 140); // 0x53c75
    g4 = v6;
    function_1e0a0(v6, v4, g9, &v5);
    g4 = v5;
    if (v5 == 0) {
        // 0x53d3e
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v7 = function_27ea0(v5, "id", 0, 0); // 0x53ca9
    g4 = v7;
    g8 = v7;
    int32_t v8 = g9; // 0x53cb2
    int32_t v9 = *(int32_t *)g6 ^ v7; // 0x53cce
    g4 = v9;
    g9 = v9;
    if (v9 == 0) {
        // 0x53d50
        return 0;
    }
    int32_t v10 = function_26cf0(); // 0x53cdb
    g4 = v10;
    g10 = v10;
    function_26330(v10);
    g4 = v8;
    int32_t v11 = g10; // 0x53cf5
    g4 = function_27600(v11, "xuid", g8, v8);
    function_52af0(g6, g10);
    g4 = v8;
    function_51ff0(g6, g8, v8);
    g4 = v11;
    int32_t result; // 0x53d39
    if (v11 != 0) {
        // 0x53d36
        result = function_28600(v11);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x53d3e
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x53d5b - 0x53d64
int32_t function_53d5b(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b3cc4); // 0x53d5b
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x53d64 - 0x53f88
int32_t function_53d64(int32_t a1) {
    // 0x53d64
    g6 = g4;
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    g4 = g5 - 28;
    g4 = function_4ff20();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g8; // 0x53d93
    int32_t v2 = g10; // 0x53d94
    int32_t v3 = g6; // 0x53d95
    g9 = a1;
    int32_t result = *(int32_t *)a1; // 0x53d9c
    g4 = result;
    if ((char)result != 0) {
        // 0x53f4c
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x53dac
    g4 = g282;
    if (g282 == 0) {
        // 0x53f4c
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v4 = (int32_t)g450; // 0x53dbf
    g4 = v4;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if ((v4 & 32) != 0) {
        // 0x53dd8
        g4 = a1;
        int32_t result2 = *(int32_t *)(a1 + 132); // 0x53ddb
        g4 = result2;
        if (result2 != 0) {
            // 0x53f4c
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result2;
        }
    }
    // 0x53de9
    g9 = g282;
    int32_t * v5 = (int32_t *)g282; // 0x53dec
    int32_t result3 = *v5; // 0x53dec
    g4 = result3;
    if ((char)result3 == 0) {
        // 0x53f4c
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result3;
    }
    // 0x53e04
    g9 = g282;
    g4 = g618;
    int32_t v6 = *(int32_t *)(g618 + 48); // 0x53e3b
    g4 = v6;
    if (v6 == 0) {
        int32_t v7 = (int32_t)g283; // 0x53f5d
        g4 = v7;
        g9 = *(int32_t *)g283;
        if ((char)v7 != 0) {
            goto lab_0x53f39;
        } else {
            // 0x53f6c
            g4 = v7;
            g9 = *(int32_t *)g283;
            goto lab_0x53f2a;
        }
    } else {
        goto lab_0x53f2a;
    }
  lab_0x53f2a:;
    int32_t v8 = function_26cf0(); // 0x53e4d
    g4 = v8;
    function_26330(v8);
    g4 = v8;
    function_27920(v8, "p2p", "nodelay");
    int32_t v9 = (int32_t)g290; // 0x53e83
    g9 = v9;
    g4 = v8;
    function_27600(v8, "xuid", v9, v9);
    g6 = 0;
    g4 = v8;
    if (v8 != 0) {
        // 0x53f31
        g4 = function_28600(v8);
    }
    goto lab_0x53f39;
  lab_0x53f39:
    // 0x53f39
    g9 = g282;
    int32_t result4 = *v5; // 0x53f3c
    g4 = result4;
    // 0x53f4c
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result4;
}

// Address range: 0x53f88 - 0x54013
int32_t function_53f88(int32_t a1, int32_t a2) {
    // 0x53f88
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 44);
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    g4 = g5 - 28;
    g4 = function_4ff20();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g6; // 0x53fb3
    int32_t v3 = function_26cf0(); // 0x53fbe
    g4 = v3;
    g6 = v3;
    function_26330(v3);
    g4 = a2;
    int32_t v4 = g6; // 0x53fd8
    int32_t v5 = function_26d60(a2); // 0x53fde
    g4 = v5;
    function_25fb0(g6, v5);
    g4 = a1;
    function_52af0(a1, g6);
    g4 = v4;
    int32_t result; // 0x54008
    if (v4 != 0) {
        // 0x54005
        result = function_28600(v4);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x5400d
    g6 = v2;
    return result;
}

// Address range: 0x54013 - 0x5424d
int32_t function_54013(int32_t a1, int32_t a2) {
    // 0x54013
    int32_t v1; // ebp
    *(int32_t *)(v1 - 28) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 28); // 0x5401e
    g4 = v2;
    g6 = function_7ab57(v2, (int32_t)&g870);
    g4 = g5 - 12;
    g4 = function_4ff20();
    function_7ab57(g6, (int32_t)&g870);
    int32_t v3 = g5; // bp-4
    g5 = &v3;
    int32_t v4 = g8; // 0x54043
    int32_t v5 = g10; // 0x54044
    int32_t v6 = g6; // bp-16
    g4 = a2;
    int32_t v7 = function_27ea0(a2, "id", 0, 0); // 0x5406a
    g4 = a1;
    int32_t v8 = *(int32_t *)(a1 + 140); // 0x5407e
    g4 = v8;
    int32_t result2; // 0x541f0
    if (v8 != 0) {
        int32_t v9 = function_27340(v8, (int32_t)"Members", 0); // 0x5409f
        g4 = v9;
        if (v9 != 0) {
            int32_t v10 = function_27fc0(v9, "numMachines", 0); // 0x540c5
            g4 = v10;
            if (v10 >= 1) {
                // 0x540d8
                int32_t v11; // bp-360
                g8 = &v11;
                int32_t v12; // bp-628
                int32_t v13 = &v12; // 0x540fa
                int32_t v14; // bp-355
                int32_t v15 = &v14; // 0x54174
                char * v16 = NULL;
                while (true) {
                    // 0x540e8
                    g4 = v13;
                    function_1e010(v13, "machine%d");
                    g4 = v9;
                    int32_t v17; // bp-623
                    int32_t v18 = function_27340(v9, (int32_t)&v17, 0); // 0x54123
                    g4 = v18;
                    g10 = v18;
                    if (v18 != 0) {
                        int32_t v19 = function_27fc0(v18, "numPlayers", 0); // 0x54145
                        g4 = v19;
                        if (v19 >= 1) {
                            // 0x54154
                            g6 = 0;
                            while (true) {
                                // 0x54160
                                function_1e010(g8, "player%d");
                                g4 = v15;
                                int32_t v20 = function_27340(g10, v15, 0); // 0x54189
                                g4 = v20;
                                if (v20 != 0) {
                                    int32_t v21 = function_27ea0(v20, "xuid", 0, 0) ^ v7; // 0x541b8
                                    g4 = v21;
                                    g9 = v21;
                                    if (v21 == 0) {
                                        // 0x541f8
                                        int32_t v22; // bp-92
                                        int32_t v23 = &v22; // 0x541f8
                                        g6 = v23;
                                        int32_t v24 = function_25190(g10); // 0x541fe
                                        g4 = v24;
                                        g4 = function_2da40(v23, 64, (char *)v24);
                                        g4 = function_28e50(g10);
                                        function_262d0(g10);
                                        g4 = a2;
                                        int32_t result = function_2a090(g10, a2, 1); // 0x5423d
                                        g4 = result;
                                        g6 = v6;
                                        g10 = v5;
                                        g8 = v4;
                                        return result;
                                    }
                                }
                                int32_t v25 = g6 + 1; // 0x541c2
                                g6 = v25;
                                if (v25 == v19) {
                                    // break -> 0x541cd
                                    break;
                                }
                            }
                        }
                    }
                    int32_t v26 = (int32_t)v16 + 1; // 0x541cd
                    g4 = v10;
                    if (v26 == v10) {
                        result2 = v10;
                        // break -> 0x541e6
                        break;
                    }
                    v16 = (char *)v26;
                }
            } else {
                result2 = v10;
            }
        } else {
            result2 = 0;
        }
    } else {
        result2 = 0;
    }
    // 0x541e6
    g6 = v6;
    g10 = v5;
    g8 = v4;
    return result2;
}

// Address range: 0x54250 - 0x544ce
int32_t function_54250(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x54253
    int32_t v2 = g10; // 0x54254
    int32_t v3 = g6; // bp-16
    g4 = a2;
    int32_t v4 = function_27ea0(a2, "xuid", 0, 0); // 0x5427a
    g4 = v4;
    g9 = a1;
    int32_t v5 = *(int32_t *)(a1 + 140); // 0x5428e
    g4 = v5;
    if (v5 == 0) {
        // 0x543ee
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v6 = function_27340(v5, (int32_t)"Members", 0); // 0x542af
    g4 = v6;
    if (v6 == 0) {
        // 0x543ee
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t result = function_27fc0(v6, "numMachines", 0); // 0x542d5
    g4 = result;
    if (result < 1) {
        // 0x543ee
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x542f2
    int32_t v7; // bp-628
    int32_t v8 = &v7; // 0x542f8
    int32_t v9; // bp-360
    int32_t v10 = &v9; // 0x54360
    int32_t v11; // bp-355
    int32_t v12 = &v11; // 0x5437a
    int32_t v13 = 0;
    while (true) {
        // 0x542f2
        g4 = v13;
        g9 = v8;
        function_1e010(v8, "machine%d");
        g4 = v6;
        int32_t v14; // bp-623
        int32_t v15 = function_27340(v6, (int32_t)&v14, 0); // 0x5432d
        g4 = v15;
        g8 = v15;
        if (v15 != 0) {
            int32_t v16 = function_27fc0(v15, "numPlayers", 0); // 0x5434f
            g4 = v16;
            if (v16 >= 1) {
                // 0x5435e
                g10 = 0;
                while (true) {
                    // 0x54360
                    g9 = v10;
                    function_1e010(v10, "player%d");
                    g4 = v12;
                    int32_t v17 = function_27340(g8, v12, 0); // 0x5438f
                    g4 = v17;
                    g6 = v17;
                    if (v17 != 0) {
                        int32_t v18 = function_27ea0(v17, "xuid", 0, 0) ^ v4; // 0x543c0
                        g4 = v18;
                        g9 = v18;
                        if (v18 == 0) {
                            // 0x54400
                            int32_t v19; // bp-92
                            int32_t v20 = &v19; // 0x54400
                            g10 = v20;
                            int32_t v21 = function_25190(g6); // 0x54406
                            g4 = v21;
                            g4 = function_2da40(v20, 64, (char *)v21);
                            g4 = function_28e50(g6);
                            function_262d0(g6);
                            g4 = a2;
                            g4 = function_2a090(g6, a2, 1);
                            int32_t v22 = function_26cf0(); // 0x54451
                            g4 = v22;
                            g10 = v22;
                            g4 = function_26330(v22);
                            int32_t v23 = function_27ea0(g6, "xuid", 0, 0); // 0x54483
                            g4 = v23;
                            g4 = function_27600(g10, "xuid", v23, g9);
                            g4 = function_275a0(g10, "player", g6);
                            g9 = a1;
                            int32_t result2 = *(int32_t *)a1; // 0x544b7
                            g4 = result2;
                            g6 = v3;
                            g10 = v2;
                            g8 = v1;
                            return result2;
                        }
                    }
                    int32_t v24 = g10 + 1; // 0x543ca
                    g10 = v24;
                    if (v24 == v16) {
                        // break -> 0x543d5
                        break;
                    }
                }
            }
        }
        int32_t v25 = v13 + 1; // 0x543d5
        g4 = result;
        if (v25 == result) {
            // break -> 0x543ee
            break;
        }
        v13 = v25;
    }
    // 0x543ee
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x544ce - 0x54769
int32_t function_544ce(int32_t a1, int32_t a2) {
    // 0x544ce
    g6 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g10; // 0x544e6
    g10 = a2;
    int32_t v3 = g6; // 0x544ec
    g6 = a1;
    int32_t v4 = g8; // 0x544f2
    int32_t v5 = function_25190(a2); // 0x544f8
    g4 = v5;
    g8 = v5;
    int32_t result4 = *(int32_t *)(g6 + 188); // 0x544ff
    g4 = result4;
    if (result4 == 2) {
        int32_t result = function_2cc30(v5, "SysSession::ReplyJoinData"); // 0x5452b
        g4 = result;
        if (result != 0) {
            // 0x5450f
            g6 = v3;
            g10 = v2;
            g8 = v4;
            return result;
        }
        int32_t v6 = function_27ea0(g10, "id", 0, 0); // 0x5454f
        g4 = v6;
        int32_t v7 = g6; // 0x54554
        int32_t v8 = *(int32_t *)(v7 + 148) ^ g9; // 0x54554
        g9 = v8;
        int32_t result2 = *(int32_t *)(v7 + 144) ^ v6; // 0x5455a
        g4 = result2;
        int32_t v9 = result2 | v8; // 0x54560
        g9 = v9;
        if (v9 != 0) {
            // 0x5450f
            g6 = v3;
            g10 = v2;
            g8 = v4;
            return result2;
        }
        int32_t v10 = g10; // 0x54564
        g8 = v4;
        g10 = v2;
        g6 = v3;
        g5 = v1;
        int32_t result3 = function_51070(v7, v10); // 0x54576
        g4 = result3;
        return result3;
    }
    if (result4 != 3) {
        // 0x5450f
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return result4;
    }
    int32_t v11 = function_2cc30(v5, "SysSession::ReplyJoinData"); // 0x5458b
    g4 = v11;
    if (v11 == 0) {
        int32_t v12 = g10; // 0x54650
        g8 = v4;
        int32_t v13 = g6; // 0x54656
        g10 = v2;
        g6 = v3;
        g5 = v1;
        int32_t result5 = function_51cc0(v13, v12); // 0x54662
        g4 = result5;
        return result5;
    }
    int32_t v14 = function_2cc30(g8, "SysSession::OnPlayerRemoved"); // 0x545a3
    g4 = v14;
    if (v14 == 0) {
        int32_t v15 = function_27ea0(g10, "xuid", 0, 0); // 0x54633
        g4 = v15;
        int32_t result6 = function_51ff0(g6, v15, g9); // 0x54643
        g4 = result6;
        // 0x5450f
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return result6;
    }
    int32_t v16 = function_2cc30(g8, "SysSession::OnPlayerKicked"); // 0x545b7
    g4 = v16;
    if (v16 == 0) {
        int32_t result7 = function_27ea0(g10, "xuid", 0, 0); // 0x545df
        g4 = result7;
        int32_t v17 = g6; // 0x545e4
        int32_t v18 = *(int32_t *)(v17 + 148); // 0x545e4
        g8 = v18;
        int32_t v19 = g9; // 0x545f0
        int32_t v20 = *(int32_t *)(v17 + 144) ^ result7; // 0x545f2
        g7 = v20;
        int32_t v21 = v19 ^ v18 | v20; // 0x545f4
        g8 = v21;
        if (v21 == 0) {
            // 0x546e0
            g8 = v4;
            g10 = v2;
            g6 = v3;
            return result7;
        }
        int32_t result8 = function_51ff0(v17, result7, v19); // 0x54607
        g4 = result8;
        // 0x5450f
        g6 = v3;
        g10 = v2;
        g8 = v4;
        return result8;
    }
    int32_t v22 = function_2cc30(g8, "SysSession::OnPlayerUpdated"); // 0x5467b
    g4 = v22;
    if (v22 == 0) {
        int32_t v23 = g10; // 0x546c8
        g8 = v4;
        int32_t v24 = g6; // 0x546ce
        g10 = v2;
        g6 = v3;
        g5 = v1;
        int32_t result9 = function_54250(v24, v23); // 0x546da
        g4 = result9;
        return result9;
    }
    int32_t v25 = function_2cc30(g8, "SysSession::OnMachineUpdated"); // 0x5468f
    g4 = v25;
    if (v25 == 0) {
        // 0x54700
        g8 = v4;
        g10 = v2;
        g6 = v3;
        return 0;
    }
    int32_t result10 = function_2cc30(g8, "SysSession::OnUpdate"); // 0x546a3
    g4 = result10;
    if (result10 != 0) {
        // 0x546ac
        g8 = v4;
        g10 = v2;
        g6 = v3;
        return result10;
    }
    int32_t v26 = *(int32_t *)(g6 + 140); // 0x54723
    g4 = v26;
    g4 = function_2a090(v26, g10, 0);
    int32_t v27 = function_27340(g10, (int32_t)"update", 0); // 0x54744
    g4 = v27;
    int32_t result11 = function_51030(g6, v27); // 0x54750
    g4 = result11;
    g6 = v3;
    g10 = v2;
    g8 = v4;
    return result11;
}

// Address range: 0x54770 - 0x552f1
int32_t function_54770(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x54773
    int32_t v2 = g10; // 0x54774
    int32_t v3 = g6; // 0x54775
    g4 = a2;
    g9 = a1;
    int32_t * v4 = (int32_t *)(a1 + 140); // 0x54791
    int32_t v5 = *v4; // 0x54791
    g4 = v5;
    int32_t result; // 0x54ad7
    if (v5 != 0) {
        int32_t v6 = function_27340(v5, (int32_t)"Members", 0); // 0x547b2
        g4 = v6;
        if (v6 != 0) {
            int32_t v7 = function_27fc0(v6, "numMachines", 0); // 0x547d8
            g4 = v7;
            if (v7 >= 1) {
                // 0x547eb
                int32_t v8; // bp-316
                int32_t v9 = &v8; // 0x547f5
                g8 = v9;
                int32_t v10; // bp-584
                int32_t v11 = &v10; // 0x54801
                int32_t v12; // bp-311
                int32_t v13 = &v12; // 0x54884
                int32_t v14 = 0;
                while (true) {
                    // 0x547fb
                    g4 = v14;
                    g9 = v11;
                    function_1e010(v11, "machine%d");
                    g4 = v6;
                    int32_t v15; // bp-579
                    int32_t v16 = function_27340(v6, (int32_t)&v15, 0); // 0x54836
                    g4 = v16;
                    g10 = v16;
                    if (v16 != 0) {
                        int32_t v17 = function_27fc0(v16, "numPlayers", 0); // 0x54858
                        g4 = v17;
                        if (v17 >= 1) {
                            // 0x54867
                            g6 = 0;
                            while (true) {
                                // 0x54870
                                g4 = function_1e010(v9, "player%d");
                                g9 = v13;
                                int32_t v18 = function_27340(g10, v13, 0); // 0x54899
                                g4 = v18;
                                if (v18 != 0) {
                                    int32_t v19 = function_27ea0(v18, "xuid", 0, 0) ^ a2; // 0x548c8
                                    g4 = v19;
                                    int32_t v20 = g9 ^ a3 | v19; // 0x548ce
                                    g9 = v20;
                                    if (v20 == 0) {
                                        // 0x54ac8
                                        g4 = 1;
                                        result = 1;
                                        goto lab_0x54acd;
                                    }
                                }
                                int32_t v21 = g6 + 1; // 0x548d6
                                g6 = v21;
                                if (v21 == v17) {
                                    // break -> 0x548e1
                                    break;
                                }
                            }
                        }
                    }
                    int32_t v22 = v14 + 1; // 0x548e1
                    g4 = v7;
                    if (v22 == v7) {
                        // break -> 0x548fa
                        break;
                    }
                    v14 = v22;
                }
            }
        }
    }
    // 0x548fa
    g9 = a4;
    int32_t v23 = function_27fc0(a4, "members/numPlayers", 0); // 0x54910
    g4 = a4;
    int32_t v24 = function_27fc0(a4, "members/numMachines", 0); // 0x54931
    g4 = v24;
    g9 = a1;
    int32_t v25 = *v4; // 0x5494f
    g4 = v25;
    int32_t v26 = function_27fc0(v25, "members/numSlots", 0); // 0x54958
    g4 = v26;
    g9 = a1;
    g6 = v26;
    int32_t v27 = *v4; // 0x54972
    g4 = v27;
    int32_t v28 = function_27fc0(v27, "members/numPlayers", 0); // 0x5497b
    g4 = v28;
    g9 = a1;
    int32_t v29 = *v4; // 0x54999
    g4 = v29;
    int32_t v30 = function_27fc0(v29, "members/numMachines", 0); // 0x549a2
    int32_t v31 = 0; // bp-48
    g7 = &v31;
    g4 = g281;
    g9 = *(int32_t *)g281;
    g4 = 0;
    int32_t v32 = function_26cf0(); // 0x549f2
    g4 = v32;
    function_26330(v32);
    g9 = a2;
    g4 = v32;
    function_27600(v32, "id", a2, a3);
    g4 = v24;
    int32_t v33;
    int32_t v34; // 0x54aac
    int32_t v35; // 0x54d1c
    int32_t v36; // 0x551e3
    int32_t v37; // 0x551ec
    int32_t v38; // 0x55218
    int32_t v39; // 0x54c26
    if (v24 == 0) {
        goto lab_0x54a70;
    } else {
        // 0x54a4a
        g4 = v23;
        if (v23 == 0) {
            goto lab_0x54a70;
        } else {
            // 0x54a54
            g4 = v28;
            if (v28 == 0) {
                goto lab_0x54a70;
            } else {
                if (v26 == 0) {
                    goto lab_0x54a70;
                } else {
                    // 0x54a62
                    g8 = v30;
                    if (v30 != 0) {
                        // 0x54b1d
                        g9 = a1;
                        int32_t v40 = *v4; // 0x54b30
                        g4 = v40;
                        int32_t v41 = function_27c00(v40, "system/lock", (int32_t *)&g129); // 0x54b39
                        g4 = v41;
                        if (*(char *)v41 != 0) {
                            // 0x54b80
                            g4 = v32;
                            g4 = function_27920(v32, "error", "lock");
                            goto lab_0x54a8e;
                        } else {
                            int32_t v42 = (v28 >= 0 ? v28 : 0) + v23; // 0x54b53
                            g4 = v42;
                            if (v26 < v42) {
                                // 0x54b5d
                                g4 = v32;
                                g4 = function_27920(v32, "error", "full");
                                goto lab_0x54a8e;
                            } else {
                                // 0x54ba3
                                g9 = a1;
                                int32_t v43 = *v4; // 0x54bb6
                                g4 = v43;
                                int32_t v44 = function_27340(v43, (int32_t)"members", 0); // 0x54bbf
                                g4 = v44;
                                g6 = v44;
                                if (v44 == 0) {
                                    v34 = 0;
                                    goto lab_0x54aa5;
                                } else {
                                    // 0x54bce
                                    g4 = a4;
                                    int32_t v45 = function_27340(a4, (int32_t)"members", 0); // 0x54be4
                                    g4 = v45;
                                    if (v45 == 0) {
                                        v34 = 0;
                                        goto lab_0x54aa5;
                                    } else {
                                        // 0x54bf7
                                        g10 = v24;
                                        if (v24 >= 1) {
                                            // 0x54c05
                                            g8 = 0;
                                            int32_t v46; // bp-1924
                                            int32_t v47 = &v46; // 0x54c43
                                            while (true) {
                                                // 0x54c43
                                                g9 = v47;
                                                function_1e010(v47, "machine%d");
                                                g4 = v45;
                                                int32_t v48; // bp-1919
                                                int32_t v49 = function_27340(v45, (int32_t)&v48, 0); // 0x54c78
                                                g4 = v49;
                                                g10 = v49;
                                                if (v49 != 0) {
                                                    int32_t v50 = function_27c00(v49, "tuver", (int32_t *)&g129); // 0x54c96
                                                    g4 = v50;
                                                    int32_t v51 = function_27ea0(g10, "dlcmask", 0, 0); // 0x54cbc
                                                    g4 = v51;
                                                    int32_t v52 = function_27c00(g6, "machine0/tuver", (int32_t *)&g129); // 0x54ce0
                                                    g4 = v52;
                                                    g9 = a1;
                                                    int32_t v53 = *v4; // 0x54d06
                                                    g4 = v53;
                                                    g10 = function_27ea0(v53, "game/dlcrequired", 0, 0);
                                                    v35 = g9;
                                                    g4 = v50;
                                                    int32_t v54 = function_2cbd0(v50, v52); // 0x54d2f
                                                    g4 = v54;
                                                    if (v54 != 0) {
                                                        // 0x54d3c
                                                        g4 = v32;
                                                        function_27920(v32, "error", "turequired");
                                                        g4 = v32;
                                                        g4 = function_27920(v32, "turequired", (char *)v52);
                                                        goto lab_0x54a8e;
                                                    }
                                                    // 0x54c10
                                                    v33 = -1 - v51;
                                                    int32_t v55 = g10 & v33; // 0x54c24
                                                    g4 = v55;
                                                    v39 = v35 & -1 - v47;
                                                    int32_t v56 = v55 | v39; // 0x54c2c
                                                    g9 = v56;
                                                    if (v56 != 0) {
                                                        // 0x551c0
                                                        g4 = a4;
                                                        v36 = function_27ea0(a4, "members/machine0/flags", 0, 0) % 2;
                                                        v37 = (int32_t)g450;
                                                        g4 = v37;
                                                        g9 = *(int32_t *)g450;
                                                        g9 = *(int32_t *)g450;
                                                        int32_t v57 = *(int32_t *)(v37 + 12); // 0x55201
                                                        g6 = v57;
                                                        if (v57 == 0) {
                                                            goto lab_0x55274;
                                                        } else {
                                                            // 0x55208
                                                            v38 = g10 & v33;
                                                            g6 = v38;
                                                            g8 = v39;
                                                            goto lab_0x55232;
                                                        }
                                                    }
                                                }
                                                int32_t v58 = g8 + 1; // 0x54c34
                                                g8 = v58;
                                                if (v58 == v24) {
                                                    // break -> 0x54d7f
                                                    break;
                                                }
                                            }
                                            // 0x54d7f
                                            g10 = 0;
                                            int32_t v59; // bp-1656
                                            int32_t v60 = &v59; // 0x54d81
                                            int32_t v61; // bp-1651
                                            int32_t v62 = &v61; // 0x54da1
                                            int32_t v63; // bp-1388
                                            int32_t v64 = &v63; // 0x54dc7
                                            while (true) {
                                                // 0x54d81
                                                g4 = v60;
                                                function_1e010(v60, "machine%d");
                                                g4 = v45;
                                                g9 = v62;
                                                int32_t v65 = function_27340(v45, v62, 0); // 0x54db6
                                                g4 = v65;
                                                if (v65 != 0) {
                                                    // 0x54dbf
                                                    g9 = v64;
                                                    g8 = function_26d60(v65);
                                                    g4 = g10 + v30;
                                                    function_1e010(v64, "machine%d");
                                                    int32_t v66; // bp-1383
                                                    g4 = &v66;
                                                    g4 = function_262d0(g8);
                                                    g4 = function_25fb0(g6, g8);
                                                    g9 = a1;
                                                    g4 = *(int32_t *)a1;
                                                }
                                                int32_t v67 = g10 + 1; // 0x54e20
                                                g10 = v67;
                                                if (v67 == v24) {
                                                    // break -> 0x54e2f
                                                    break;
                                                }
                                            }
                                        }
                                        int32_t v68 = v30 + v24; // 0x54e40
                                        g4 = v68;
                                        function_27680(g6, "numMachines", v68);
                                        int32_t v69 = v28 + v23; // 0x54e60
                                        g4 = v69;
                                        function_27680(g6, "numPlayers", v69);
                                        g4 = v45;
                                        int32_t v70 = function_27ea0(v45, "joinflags", 0, 0); // 0x54e90
                                        g4 = v70;
                                        g4 = function_27600(g6, "joinflags", v70, g9);
                                        int32_t v71 = function_26cf0(); // 0x54eb4
                                        g4 = v71;
                                        g6 = v71;
                                        g4 = function_26330(v71);
                                        if (v71 != 0) {
                                            // 0x54ecf
                                            g4 = v24;
                                            function_27680(v71, "numMachines", v24);
                                            g9 = a2;
                                            g4 = a3;
                                            g4 = function_27600(v71, "id", a2, a3);
                                            g9 = a1;
                                            g4 = *(int32_t *)a1;
                                        }
                                        // 0x54f1c
                                        g4 = v24;
                                        int32_t * v72;
                                        if (v24 < 1) {
                                            // 0x54f1c
                                            v72 = (int32_t *)a1;
                                        } else {
                                            // 0x54f34
                                            int32_t v73; // bp-1120
                                            int32_t v74 = &v73; // 0x54f3a
                                            int32_t v75; // bp-852
                                            int32_t v76 = &v75; // 0x54fbf
                                            int32_t * v77 = (int32_t *)a1; // 0x550b6
                                            int32_t v78 = 0;
                                            while (true) {
                                                // 0x54f34
                                                g4 = v78;
                                                g9 = v74;
                                                function_1e010(v74, "machine%d");
                                                g4 = v45;
                                                int32_t v79; // bp-1115
                                                int32_t v80 = function_27340(v45, (int32_t)&v79, 0); // 0x54f6f
                                                g4 = v80;
                                                if (v80 != 0) {
                                                    int32_t v81 = function_27fc0(v80, "numPlayers", 0); // 0x54f95
                                                    g4 = v81;
                                                    if (v81 >= 1) {
                                                        // 0x54fa8
                                                        g8 = 0;
                                                        while (true) {
                                                            // 0x54fbf
                                                            g9 = v76;
                                                            function_1e010(v76, "player%d");
                                                            g4 = v80;
                                                            int32_t v82; // bp-847
                                                            int32_t v83 = function_27340(v80, (int32_t)&v82, 0); // 0x54ff4
                                                            g4 = v83;
                                                            int32_t v84 = function_27ea0(v83, "xuid", 0, 0); // 0x5501a
                                                            g4 = v84;
                                                            g6 = v84;
                                                            g10 = v76;
                                                            int32_t v85 = g9 | v84; // 0x55023
                                                            g9 = v85;
                                                            if (v85 != 0) {
                                                                int32_t v86 = function_26cf0(); // 0x5502e
                                                                g4 = v86;
                                                                function_26330(v86);
                                                                g4 = v86;
                                                                if (v86 != 0) {
                                                                    // 0x55057
                                                                    g4 = v86;
                                                                    function_27600(v86, "xuid", g6, v76);
                                                                    g4 = v86;
                                                                    function_27920(v86, "state", "joined");
                                                                    g4 = v86;
                                                                    g4 = function_275a0(v86, "player", v83);
                                                                    g9 = a1;
                                                                    g4 = *v77;
                                                                    g9 = a1;
                                                                }
                                                            }
                                                            int32_t v87 = g8 + 1; // 0x54fb0
                                                            g8 = v87;
                                                            if (v87 == v81) {
                                                                // break -> 0x550d0
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                int32_t v88 = v78 + 1; // 0x550d0
                                                g4 = v24;
                                                if (v88 == v24) {
                                                    v72 = v77;
                                                    // break -> 0x550e9
                                                    break;
                                                }
                                                v78 = v88;
                                            }
                                        }
                                        // 0x550e9
                                        g9 = a1;
                                        int32_t v89 = *v4; // 0x550ec
                                        g4 = v89;
                                        int32_t v90 = function_26d60(v89); // 0x550f5
                                        g4 = v32;
                                        function_25fb0(v32, v90);
                                        g4 = v32;
                                        g9 = a1;
                                        g4 = function_52af0(a1, v32);
                                        g9 = a1;
                                        g4 = *v72;
                                        g9 = a1;
                                        int32_t v91 = *v4; // 0x5513f
                                        g4 = v91;
                                        int32_t v92 = function_27340(v91, (int32_t)"members", 0); // 0x55148
                                        g4 = a1;
                                        function_50720(a1, (int32_t *)"members", v92, 0);
                                        v34 = 1;
                                        goto lab_0x54aa5;
                                    }
                                }
                            }
                        }
                    } else {
                        goto lab_0x54a70;
                    }
                }
            }
        }
    }
  lab_0x54a70:
    // 0x54a70
    g4 = v32;
    g4 = function_27920(v32, "error", "n/a");
    goto lab_0x54a8e;
  lab_0x54a8e:
    // 0x54a8e
    g4 = v32;
    g9 = a1;
    g4 = function_52af0(a1, v32);
    v34 = 0;
    goto lab_0x54aa5;
  lab_0x54aa5:
    // 0x54aa5
    g4 = v34;
    g9 = v32;
    if (v32 != 0) {
        // 0x54aac
        function_28600(v32);
        g4 = v34;
        result = v34;
    } else {
        result = v34;
    }
  lab_0x54acd:
    // 0x54acd
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x55274:
    // 0x55274
    g4 = v32;
    function_27920(v32, "error", "dlcrequired");
    g9 = v39;
    g4 = v32;
    function_27600(v32, "dlcrequired", g10 & v33, v39);
    g9 = v35;
    g4 = v32;
    g4 = function_27600(v32, "dlcmask", g10, v35);
    goto lab_0x54a8e;
  lab_0x55232:;
    int32_t v93 = *(int32_t *)v37; // 0x55232
    g9 = v93;
    int32_t v94 = v93 & v38; // 0x55237
    g9 = v94;
    int32_t v95 = *(int32_t *)(v37 + 4) & v39 | v94; // 0x5523b
    g7 = v95;
    if (v95 == 0) {
        goto lab_0x55228;
    } else {
        // 0x5523f
        g7 = v36;
        int32_t v96 = *(int32_t *)(v37 + 16); // 0x55245
        g9 = v96;
        if (v36 == 0) {
            goto lab_0x55228;
        } else {
            int32_t v97 = v96 & 4; // 0x5524c
            g9 = v97;
            if (v97 != 0) {
                goto lab_0x55228;
            } else {
                // 0x55251
                g4 = v32;
                g4 = function_27920(v32, "error", "nomap");
                goto lab_0x54a8e;
            }
        }
    }
  lab_0x55228:;
    int32_t v98 = v37 + 24; // 0x55228
    g4 = v98;
    int32_t v99 = *(int32_t *)(v37 + 36); // 0x5522b
    g9 = v99;
    if (v99 == 0) {
        goto lab_0x55274;
    } else {
        v37 = v98;
        goto lab_0x55232;
    }
}

// Address range: 0x55300 - 0x55431
int32_t function_55300(int32_t result, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = result;
    int32_t v2 = g6; // 0x55309
    g6 = a2;
    int32_t v3 = g10; // 0x5530f
    int32_t v4 = g8; // 0x55312
    int32_t v5 = function_25190(a2); // 0x5531b
    g10 = v5;
    g4 = result;
    if (*(int32_t *)(result + 208) != 2) {
        // 0x5532e
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result;
    }
    int32_t v6 = function_2cc30((int32_t)"SysSession::RequestJoinData", (char *)v5); // 0x5534b
    g4 = v6;
    if (v6 == 0) {
        int32_t v7 = function_27ea0(g6, "id", 0, 0); // 0x553db
        g4 = v7;
        g8 = g9;
        g10 = v7;
        int32_t v8 = function_27340(g6, (int32_t)"settings", 0); // 0x553f7
        g4 = result;
        int32_t result2 = function_54770(result, g10, g8, v8); // 0x5540e
        g4 = result2;
        g6 = v2;
        g10 = v3;
        g8 = v4;
        return result2;
    }
    int32_t v9 = function_2cc30((int32_t)"SysSession::VoiceStatus", (char *)g10); // 0x5535f
    g4 = v9;
    if (v9 == 0) {
        // 0x553a0
        g4 = result;
        g10 = v3;
        g6 = v2;
        g8 = v4;
        return result;
    }
    // 0x55368
    function_2cc30((int32_t)"SysSession::VoiceMutelist", (char *)g10);
    g4 = result;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return result;
}

// Address range: 0x55440 - 0x55897
int32_t function_55440(int32_t a1) {
    int32_t v1 = g8; // 0x55443
    int32_t v2 = g10; // 0x55444
    int32_t v3 = g6; // 0x55445
    g9 = a1;
    int32_t result = *(int32_t *)a1; // 0x5544f
    g4 = result;
    if ((char)result != 0) {
        // 0x5545b
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v4 = function_26cf0(); // 0x55477
    g4 = v4;
    function_26330(v4);
    g4 = v4;
    g7 = a1;
    int32_t * v5 = (int32_t *)(a1 + 144); // 0x5549e
    int32_t v6 = *v5; // 0x5549e
    g4 = v6;
    int32_t * v7 = (int32_t *)(a1 + 148); // 0x554a4
    int32_t v8 = *v7; // 0x554a4
    g9 = v8;
    g4 = v4;
    g4 = function_27600(v4, "xuid", v6, v8);
    g9 = a1;
    int32_t * v9 = (int32_t *)(a1 + 140); // 0x554cb
    int32_t v10 = *v9; // 0x554cb
    g4 = v10;
    int32_t v11;
    int32_t v12; // 0x557e6
    if (v10 != 0) {
        int32_t v13 = function_27340(v10, (int32_t)"members", 0); // 0x554ec
        g4 = v13;
        if (v13 == 0) {
            // 0x55889
            g7 = a1;
        } else {
            // 0x554ff
            g4 = v13;
            int32_t v14 = function_27fc0(v13, "numMachines", 0); // 0x55518
            g4 = v14;
            if (v14 >= 1) {
                // 0x5552b
                g6 = 0;
                int32_t v15; // bp-836
                int32_t v16 = &v15; // 0x5559e
                int32_t v17; // bp-1104
                int32_t v18 = &v17; // 0x5553f
                while (true) {
                    // 0x5553f
                    g7 = v18;
                    function_1e010(v18, "machine%d/id");
                    g4 = v13;
                    int32_t v19; // bp-1099
                    g10 = function_27ea0(v13, (char *)&v19, 0, 0);
                    int32_t v20 = *(int32_t *)&g298; // 0x55583
                    g4 = v20;
                    g8 = g9;
                    g9 = v20;
                    if ((char)v20 == 0) {
                        int32_t v21 = g6 + 1; // 0x55530
                        g6 = v21;
                        if (v21 == v14) {
                            // break -> 0x555e7
                            break;
                        }
                    } else {
                        // 0x5559e
                        g9 = v16;
                        function_1e010(v16, "Mutelist/%d");
                        g4 = v4;
                        int32_t v22; // bp-831
                        g4 = function_27600(v4, (char *)&v22, g10, g8);
                        int32_t v23 = g6 + 1; // 0x555d8
                        g6 = v23;
                        if (v23 == v14) {
                            // break -> 0x555e7
                            break;
                        }
                    }
                }
            }
            // 0x555e7
            g9 = a1;
        }
        int32_t v24 = *v9;
        g4 = v24;
        g7 = a1;
        g9 = a1;
        int32_t v25 = *v5; // 0x555f8
        g7 = v25;
        int32_t v26 = *v7; // 0x555fe
        g9 = v26;
        if (v24 != 0) {
            int32_t v27 = function_27340(v24, (int32_t)"Members", 0); // 0x55629
            g4 = v27;
            if (v27 != 0) {
                int32_t v28 = function_27fc0(v27, "numMachines", 0); // 0x5564f
                g4 = v28;
                if (v28 >= 1) {
                    // 0x5566c
                    int32_t v29; // bp-568
                    int32_t v30 = &v29; // 0x55672
                    int32_t v31; // bp-563
                    int32_t v32 = &v31; // 0x55692
                    int32_t v33; // bp-295
                    int32_t v34 = &v33; // 0x556d8
                    int32_t v35; // bp-300
                    int32_t v36 = &v35; // 0x556e0
                    int32_t v37 = 0;
                    while (true) {
                        // 0x5566c
                        g7 = v37;
                        g4 = v30;
                        function_1e010(v30, "machine%d");
                        g4 = v27;
                        g9 = v32;
                        int32_t v38 = function_27340(v27, v32, 0); // 0x556a7
                        g4 = v38;
                        g6 = v38;
                        if (v38 != 0) {
                            int32_t v39 = function_27fc0(v38, "numPlayers", 0); // 0x556c9
                            g4 = v39;
                            if (v39 >= 1) {
                                // 0x556d8
                                g8 = v34;
                                g10 = 0;
                                while (true) {
                                    // 0x556e0
                                    g9 = v36;
                                    g4 = function_1e010(v36, "player%d");
                                    int32_t v40 = function_27340(g6, v34, 0); // 0x55709
                                    g4 = v40;
                                    if (v40 != 0) {
                                        int32_t v41 = function_27ea0(v40, "xuid", 0, 0) ^ v25; // 0x55738
                                        g4 = v41;
                                        int32_t v42 = g9 ^ v26 | v41; // 0x5573e
                                        g9 = v42;
                                        if (v42 == 0) {
                                            // 0x557a8
                                            g10 = function_27340(g6, (int32_t)"Mutelist", 0);
                                            g4 = v4;
                                            int32_t v43 = function_27340(v4, (int32_t)"Mutelist", 0); // 0x557db
                                            g4 = v43;
                                            g6 = v43;
                                            if (v43 != 0) {
                                                int32_t v44 = g10; // 0x557f2
                                                if (v44 == 0) {
                                                    v12 = v43;
                                                    goto lab_0x557e6;
                                                } else {
                                                    int32_t v45 = function_261f0(v44); // 0x557f9
                                                    g4 = v45;
                                                    g10 = v45;
                                                    int32_t v46 = function_261f0(g6); // 0x55803
                                                    g4 = v46;
                                                    g6 = v46;
                                                    if (v46 != 0) {
                                                        v11 = v46;
                                                        goto lab_0x55810;
                                                    } else {
                                                        v12 = v46;
                                                        goto lab_0x557e6;
                                                    }
                                                }
                                            } else {
                                                v12 = v43;
                                                goto lab_0x557e6;
                                            }
                                        }
                                    }
                                    int32_t v47 = g10 + 1; // 0x55742
                                    g10 = v47;
                                    if (v47 == v39) {
                                        // break -> 0x5574d
                                        break;
                                    }
                                }
                            }
                        }
                        int32_t v48 = v37 + 1; // 0x5574d
                        g4 = v28;
                        if (v48 == v28) {
                            // break -> 0x55770
                            break;
                        }
                        v37 = v48;
                    }
                }
            }
        }
    }
    goto lab_0x55770;
  lab_0x55770:
    // 0x55770
    g4 = v4;
    g9 = a1;
    g4 = function_52af0(a1, v4);
    goto lab_0x55785;
  lab_0x55785:
    // 0x55785
    g4 = v4;
    if (v4 != 0) {
        int32_t result2 = function_28600(v4); // 0x55793
        g4 = result2;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result2;
    }
    // 0x5545b
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
  lab_0x557e6:
    if (v12 != 0) {
        goto lab_0x55770;
    } else {
        // 0x557ea
        if (g10 != 0) {
            goto lab_0x55770;
        } else {
            goto lab_0x55785;
        }
    }
  lab_0x55810:;
    int32_t v49 = g10; // 0x55810
    if (v49 == 0) {
        v12 = v11;
        goto lab_0x557e6;
    } else {
        int32_t v50 = function_27ea0(v49, NULL, 0, 0); // 0x5582f
        g4 = v50;
        g8 = g9;
        int32_t v51 = function_27ea0(g6, NULL, 0, 0) ^ v50; // 0x5585c
        g4 = v51;
        int32_t v52 = g8 ^ g9 | v51; // 0x55864
        g9 = v52;
        if (v52 != 0) {
            // 0x55814
            v12 = g6;
            goto lab_0x557e6;
        } else {
            int32_t v53 = function_26220(g10); // 0x5586f
            g4 = v53;
            g10 = v53;
            int32_t v54 = function_26220(g6); // 0x55879
            g4 = v54;
            g6 = v54;
            if (v54 != 0) {
                v11 = v54;
                goto lab_0x55810;
            } else {
                v12 = v54;
                goto lab_0x557e6;
            }
        }
    }
}

// Address range: 0x55897 - 0x55902
int32_t function_55897(int32_t a1) {
    // 0x55897
    g6 = g4;
    int32_t v1; // ebp
    g4 = *(int32_t *)(v1 - 1128);
    g4 = function_26d40();
    g6 = function_7ab57(g6, (int32_t)&g870);
    g4 = g5 - 28;
    g4 = function_4ff20();
    g4 = function_7ab57(g6, (int32_t)&g870);
    int32_t v2 = g8; // 0x558d3
    g8 = a1;
    int32_t v3 = *(int32_t *)a1; // 0x558df
    g4 = v3;
    int32_t result; // 0x55901
    if ((char)v3 == 0) {
        int128_t v4; // xmm0
        int128_t v5 = __asm_xorps(v4, v4); // 0x558eb
        __asm_ucomiss(v5, *(int32_t *)(g8 + 136));
        if (false || (char)v3 == 0) {
            // 0x55908
            return g4;
        }
        // 0x558eb
        result = g4;
    } else {
        result = v3;
    }
    // 0x558f7
    g8 = v2;
    return result;
}

// Address range: 0x5593c - 0x55c1c
int32_t function_5593c(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + (int32_t)&g248); // 0x5593c
    *v1 = *v1 - 1;
    int32_t v2 = g7; // 0x55942
    g7 = 256 * g6 + v2 & 0xff00 | v2 & -0xff01;
    g3 = (a1 & (int32_t)&g93) != 0;
    g4 = g4 & -256 | (int32_t)*(char *)-0xd000005;
    int128_t v3 = __asm_movups(*(int128_t *)(g5 - 1120)); // 0x5594a
    *(int32_t *)(g8 + 136) = __asm_movss_1646(__asm_cvtpd2ps(v3));
    *(int32_t *)(g5 - 1120) = g4;
    int32_t v4 = *(int32_t *)(g8 + 148); // 0x55963
    g4 = v4;
    *(int32_t *)(g5 - 1124) = v4;
    int32_t v5 = *(int32_t *)(g8 + 140); // 0x5596f
    g4 = v5;
    int32_t v6 = function_27340(v5, (int32_t)"Members", 0); // 0x55990
    g4 = v6;
    *(int32_t *)(g5 - 1132) = v6;
    int32_t v7 = function_27fc0(v6, "numMachines", 0); // 0x559b6
    g4 = v7;
    *(int32_t *)(g5 - 1136) = v7;
    *(int32_t *)(g5 - 1128) = 0;
    *(int32_t *)(g5 - 1140) = g8;
    int32_t v8 = g5; // 0x559d9
    int32_t result2; // 0x55abe
    while (true) {
        int32_t v9 = v8 - 564; // 0x559eb
        g4 = v9;
        function_1e010(v9, "machine%d");
        int32_t v10 = g5; // 0x559f9
        int32_t v11 = v10 - 559; // 0x559f9
        g4 = v11;
        int32_t v12 = *(int32_t *)(v10 - 1132); // 0x55a0b
        g4 = v12;
        int32_t v13 = function_27340(v12, v11, 0); // 0x55a14
        g4 = v13;
        g10 = v13;
        if (v13 != 0) {
            int32_t v14 = function_27fc0(v13, "numPlayers", 0); // 0x55a36
            g4 = v14;
            g8 = v14;
            if (v14 >= 1) {
                // 0x55a41
                g6 = 0;
                while (true) {
                    int32_t v15 = g5 - 296; // 0x55a48
                    g4 = v15;
                    function_1e010(v15, "player%d");
                    int32_t v16 = g5 - 291; // 0x55a62
                    g4 = v16;
                    int32_t v17 = function_27340(g10, v16, 0); // 0x55a77
                    g4 = v17;
                    if (v17 != 0) {
                        int32_t v18 = function_27ea0(v17, "xuid", 0, 0); // 0x55a9b
                        g4 = v18;
                        int32_t v19 = g5; // 0x55aa0
                        int32_t v20 = *(int32_t *)(v19 - 1124) ^ g9; // 0x55aa0
                        g9 = v20;
                        int32_t v21 = *(int32_t *)(v19 - 1120) ^ v18; // 0x55aa6
                        g4 = v21;
                        int32_t v22 = v21 | v20; // 0x55aac
                        g9 = v22;
                        if (v22 == 0) {
                            // 0x55ad8
                            g4 = *(int32_t *)&g278;
                            g8 = *(int32_t *)(v19 - 1140);
                            g4 = g282;
                            g9 = *(int32_t *)g282;
                            g6 = g282;
                            int32_t v23 = v19 - 1100; // 0x55b07
                            g4 = v23;
                            function_1e010(v23, "player%d/voice");
                            int32_t v24 = g5 - 1095; // 0x55b15
                            g4 = v24;
                            g4 = function_27c00(g10, (char *)v24, (int32_t *)&g129);
                            g7 = (int32_t)&g129;
                            *(int32_t *)(g5 - 1120) = (int32_t)"headset";
                            g9 = (char)g6 == 0 ? 0 : 104;
                            int32_t * v25 = (int32_t *)(g5 - 1120); // 0x55b4a
                            int32_t v26 = (char)g6 != 0 ? *v25 : g7; // 0x55b4a
                            g7 = v26;
                            *v25 = v26;
                            int32_t v27 = function_26cf0(); // 0x55b66
                            g4 = v27;
                            g6 = v27;
                            function_26330(v27);
                            int32_t v28 = g5; // 0x55b7d
                            g4 = v28 - 832;
                            *(int32_t *)(v28 - 28) = g6;
                            function_1e010(g4, "player%d/xuid");
                            int32_t v29 = g5 - 827; // 0x55b9e
                            g4 = v29;
                            int32_t v30 = function_27ea0(g10, (char *)v29, 0, 0); // 0x55bbb
                            g4 = v30;
                            g4 = function_27600(g6, "xuid", v30, g9);
                            int32_t v31 = *(int32_t *)(g5 - 1120); // 0x55bd8
                            g4 = v31;
                            g4 = function_27920(g6, "voice", (char *)v31);
                            g4 = function_52af0(g8, g6);
                            int32_t v32 = *(int32_t *)(g5 - 28); // 0x55bfe
                            g4 = v32;
                            int32_t result = function_28600(v32); // 0x55c0c
                            g4 = result;
                            return result;
                        }
                    }
                    int32_t v33 = g6 + 1; // 0x55ab0
                    g6 = v33;
                    if (v33 == g8) {
                        // break -> 0x55ab7
                        break;
                    }
                }
            }
        }
        int32_t * v34 = (int32_t *)(g5 - 1128); // 0x55ab7
        *v34 = *v34 + 1;
        int32_t v35 = g5; // 0x55abe
        result2 = *(int32_t *)(v35 - 1136);
        g4 = result2;
        if (*(int32_t *)(v35 - 1128) == result2) {
            // break -> 0x55ad0
            break;
        }
        v8 = v35;
    }
    // 0x55ad0
    return result2;
}

// Address range: 0x55c2f - 0x55c30
int32_t function_55c2f(void) {
    // 0x55c2f
    return g4;
}

// Address range: 0x55c40 - 0x55c99
int32_t function_55c40(int32_t a1) {
    int32_t v1 = g6; // 0x55c43
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g197;
    *(int32_t *)(g6 + 184) = (int32_t)&g180;
    int32_t v2 = g6; // 0x55c90
    if (*(char *)(a1 + 188) % 2 != 0) {
        int32_t result = v2 + 184; // 0x55c90
        g4 = result;
        return result;
    }
    // 0x55c63
    *(int32_t *)(v2 + 152) = (int32_t)&g206;
    int32_t v3 = g6; // 0x55c6d
    int32_t v4 = *(int32_t *)(v3 + 168); // 0x55c6d
    g4 = v4;
    int32_t v5 = *(int32_t *)(v3 + 164); // 0x55c73
    g9 = v5;
    int32_t v6 = v5 | v4; // 0x55c7b
    g7 = v6;
    int32_t v7; // 0x55c7f
    if (v6 != 0) {
        // bb
        g4 = function_55ca0();
        v7 = g6;
    } else {
        v7 = v3;
    }
    // 0x55c7f
    g6 = v1;
    int32_t result2 = function_4ff40(v7); // 0x55c87
    g4 = result2;
    return result2;
}

// Address range: 0x55c9e - 0x55ca0
int32_t function_55c9e(void) {
    // 0x55c9e
    return g4;
}

// Address range: 0x55ca0 - 0x55cb1
int32_t function_55ca0(void) {
    int32_t result = g6 + 152; // 0x55ca4
    g4 = result;
    return result;
}

// Address range: 0x55cb5 - 0x55cd7
int32_t function_55cb5(int32_t a1, int32_t a2) {
    // 0x55cb5
    g8++;
    *(int32_t *)(2 * g4) = 0;
    int32_t v1 = g6; // 0x55cbf
    int32_t v2 = g4; // 0x55cbf
    g6 = 256 * v2 + v1 & 0xff00 | v1 & -0xff01;
    *(int32_t *)v2 = v2;
    int32_t v3 = g4; // 0x55cc8
    *(char *)v3 = (char)v3 + *(char *)&g4;
    int32_t v4; // ebp
    *(int32_t *)(v4 + 8) = g6;
    g6 = a1;
    g5 = a2;
    int32_t result = function_4ff40((int32_t)&g870); // 0x55cd2
    g4 = result;
    return result;
}

// Address range: 0x55cd7 - 0x55d03
int32_t function_55cd7(void) {
    // 0x55cd7
    g9 = g6 + 152;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_56500(g9);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x55ce8
    g4 = v1;
    while (true) {
        // 0x55ceb
        *(int32_t *)(g5 - 12) = v1;
        g4 = function_4ff40(g6);
        int32_t v2 = *(int32_t *)(g5 - 12); // 0x55cf6
        g4 = v2;
        int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x55cfc
        g4 = v3;
        v1 = v3;
    }
}

// Address range: 0x55d10 - 0x55d2f
int32_t function_55d10(int32_t a1) {
    int32_t v1 = g6; // 0x55d13
    g6 = a1;
    g4 = function_55c40(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x55d2a
    g4 = result;
    return result;
}

// Address range: 0x55d30 - 0x55df3
int32_t function_55d30(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x55d33
    g6 = a1;
    g4 = a2;
    function_50140(a1, a2);
    g4 = 0;
    *(int32_t *)g6 = (int32_t)&g197;
    *(char *)(g6 + 156) = 0;
    *(int32_t *)(g6 + 152) = (int32_t)&g206;
    *(int32_t *)(g6 + 164) = 0;
    *(int32_t *)(g6 + 168) = 0;
    *(int32_t *)(g6 + 172) = 0;
    *(int32_t *)(g6 + 176) = 0;
    *(int32_t *)(g6 + 180) = 0;
    *(int32_t *)(g6 + 160) = (int32_t)&g65;
    *(char *)(g6 + 188) = 0;
    *(int32_t *)(g6 + 192) = 0;
    *(int32_t *)(g6 + 196) = 0;
    *(int32_t *)(g6 + 200) = 0;
    *(int32_t *)(g6 + 204) = 0;
    *(int32_t *)(g6 + 184) = (int32_t)&g208;
    *(int32_t *)(g6 + 208) = 0;
    *(int32_t *)(g6 + 212) = g4;
    *(int32_t *)(g6 + 216) = g4;
    g6 = v1;
    return g4;
}

// Address range: 0x55e9d - 0x55e9e
int32_t function_55e9d(void) {
    // 0x55e9d
    return g4;
}

// Address range: 0x55ec7 - 0x55ec8
int32_t function_55ec7(void) {
    // 0x55ec7
    return g4;
}

// Address range: 0x55ee7 - 0x55eef
int32_t function_55ee7(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b10c4); // 0x55ee7
    *v1 = *v1 + 1;
    return g4;
}

// Address range: 0x55ef8 - 0x55efa
int32_t function_55ef8(void) {
    int32_t result = function_55e9d(); // 0x55ef8
    g4 = result;
    return result;
}

// Address range: 0x55f08 - 0x55f0a
int32_t function_55f08(void) {
    int32_t result = function_55ec7(); // 0x55f08
    g4 = result;
    return result;
}

// Address range: 0x55f15 - 0x55f16
int32_t function_55f15(void) {
    // 0x55f15
    return g4;
}

// Address range: 0x55f40 - 0x55fa8
int32_t function_55f40(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x55f43
    g6 = a1;
    g4 = a2;
    g4 = function_50140(a1, a2);
    *(int32_t *)g6 = (int32_t)&g198;
    *(char *)(g6 + 156) = 0;
    *(int32_t *)(g6 + 160) = 0;
    *(int32_t *)(g6 + 164) = 0;
    *(int32_t *)(g6 + 168) = 0;
    *(int32_t *)(g6 + 172) = 0;
    *(int32_t *)(g6 + 152) = (int32_t)&g209;
    *(int32_t *)(g6 + 188) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x55fb0 - 0x560ce
int32_t function_55fb0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x55fb0
    g10 = a1;
    g4 = a3;
    g6 = a2;
    g4 = function_50140(a1, a3);
    *(int32_t *)a1 = (int32_t)&g197;
    *(char *)(a1 + 156) = 0;
    *(int32_t *)(a1 + 152) = (int32_t)&g206;
    *(int32_t *)(a1 + 164) = 0;
    *(int32_t *)(a1 + 168) = 0;
    *(int32_t *)(a1 + 172) = 0;
    *(int32_t *)(a1 + 176) = 0;
    *(int32_t *)(a1 + 180) = 0;
    *(int32_t *)(a1 + 160) = (int32_t)&g65;
    *(char *)(a1 + 188) = 0;
    *(int32_t *)(a1 + 192) = 0;
    *(int32_t *)(a1 + 196) = 0;
    *(int32_t *)(a1 + 200) = 0;
    *(int32_t *)(a1 + 204) = 0;
    *(int32_t *)(a1 + 184) = (int32_t)&g208;
    *(int32_t *)(a1 + 208) = 2;
    *(int32_t *)(a1 + 212) = 0;
    *(int32_t *)(a1 + 216) = 0;
    int32_t v1 = *(int32_t *)(g6 + 124); // 0x56079
    g4 = v1;
    *(int32_t *)(a1 + 124) = v1;
    int32_t v2 = *(int32_t *)(g6 + 128); // 0x5607f
    g4 = v2;
    *(int32_t *)(a1 + 128) = v2;
    int32_t v3 = *(int32_t *)(g6 + 132); // 0x5608b
    g4 = v3;
    *(int32_t *)(a1 + 132) = v3;
    int32_t v4 = *(int32_t *)(g6 + 136); // 0x56097
    g4 = v4;
    *(int32_t *)(a1 + 136) = v4;
    if (a1 == 0) {
        int32_t v5 = function_56101((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x560a3
        g4 = v5;
    }
    // 0x560a5
    g6 = a1 + 4;
    if (*(char *)(a1 + 8) % 2 != 0) {
        // bb10
        g4 = function_561b0();
    }
    // 0x560b2
    *(int32_t *)(a1 + 16) = a1;
    *(int32_t *)(a1 + 20) = 0x51820;
    *(int32_t *)(a1 + 24) = 0;
    return g4;
}

// Address range: 0x560e0 - 0x560e1
int32_t function_560e0(void) {
    // 0x560e0
    return g4;
}

// Address range: 0x56101 - 0x561a8
int32_t function_56101(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = *(int32_t *)(g10 + 140); // 0x56111
    g4 = v1;
    int32_t v2 = function_27340(v1, (int32_t)"members", 0); // 0x5611a
    g4 = v2;
    g4 = function_50720(g10, (int32_t *)"members", v2, 0);
    int32_t v3 = function_26cf0(); // 0x56142
    g4 = v3;
    g6 = v3;
    g4 = function_26330(v3);
    g4 = function_27920(g6, "state", "host");
    int32_t v4 = g10; // 0x56171
    int32_t v5 = *(int32_t *)(v4 + 144); // 0x56171
    g4 = v5;
    int32_t v6 = *(int32_t *)(v4 + 148); // 0x56177
    g9 = v6;
    function_27600(g6, "xuid", v5, v6);
    int32_t result = g10; // 0x56195
    g4 = result;
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return result;
}

// Address range: 0x561b0 - 0x561b3
int32_t function_561b0(void) {
    // 0x561b0
    return g4;
}

// Address range: 0x561b8 - 0x561bd
int32_t function_561b8(void) {
    // 0x561b8
    return g4;
}

// Address range: 0x561c8 - 0x561cd
int32_t function_561c8(void) {
    int32_t result = function_560e0(); // 0x561c8
    g4 = result;
    return result;
}

// Address range: 0x561cd - 0x56217
int32_t function_561cd(void) {
    // 0x561cd
    int32_t v1; // ebp
    *(int32_t *)(v1 - 12) = g4;
    g4 = function_26d40();
    int32_t v2 = *(int32_t *)(g5 - 12); // 0x561d8
    g4 = v2;
    g6 = v2;
    while (true) {
        // 0x561dd
        *(int32_t *)(g10 + 184) = (int32_t)&g207;
        int32_t v3 = g10 + 184; // 0x561e7
        g4 = v3;
        function_498e0(v3);
        int32_t v4 = g10 + 152; // 0x561f5
        g4 = v4;
        g4 = function_56500(v4);
        g4 = function_4ff40(g10);
        int32_t v5 = function_7ab57(g6, (int32_t)&g870); // 0x5620e
        g4 = v5;
        g6 = v5;
    }
}

// Address range: 0x56220 - 0x56248
int32_t function_56220(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56223
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x5622a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5622d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x56230
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x56238
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x5623e
    g6 = v1;
    return result;
}

// Address range: 0x56250 - 0x56278
int32_t function_56250(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56253
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x5625a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5625d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x56260
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x56268
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x5626e
    g6 = v1;
    return result;
}

// Address range: 0x56280 - 0x562c9
int32_t function_56280(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56283
    g4 = a1;
    g9 = *(int32_t *)(a1 + 24);
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v2 = g4; // 0x5629b
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x5629b
    g7 = v3;
    int32_t v4 = *(int32_t *)(v2 + 28); // 0x5629e
    g4 = v4;
    uint32_t v5 = g9; // 0x562a1
    int32_t result = v4 + v3;
    if (v5 % 2 != 0) {
        int32_t v6 = *(int32_t *)result; // 0x562a6
        g6 = v6;
        g9 = *(int32_t *)(v5 - 1 + v6);
    }
    // 0x562ad
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x562d0 - 0x562da
int32_t function_562d0(void) {
    // 0x562d0
    g4 = 12;
    return 12;
}

// Address range: 0x562e0 - 0x56308
int32_t function_562e0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x562e3
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x562ea
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x562ed
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x562f0
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x562f8
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x562fe
    g6 = v1;
    return result;
}

// Address range: 0x56310 - 0x5631d
int32_t function_56310(int32_t a1) {
    // 0x56310
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x56317
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x56319
    g4 = result;
    return result;
}

// Address range: 0x56320 - 0x5632a
int32_t function_56320(void) {
    // 0x56320
    g4 = 8;
    return 8;
}

// Address range: 0x56330 - 0x56358
int32_t function_56330(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56333
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x5633a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5633d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x56340
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x56348
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x5634e
    g6 = v1;
    return result;
}

// Address range: 0x56360 - 0x56388
int32_t function_56360(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56363
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x5636a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5636d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x56370
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x56378
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x5637e
    g6 = v1;
    return result;
}

// Address range: 0x56390 - 0x563b8
int32_t function_56390(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56393
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x5639a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5639d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x563a0
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x563a8
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x563ae
    g6 = v1;
    return result;
}

// Address range: 0x563c0 - 0x563cd
int32_t function_563c0(int32_t a1) {
    // 0x563c0
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x563c7
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x563c9
    g4 = result;
    return result;
}

// Address range: 0x563d0 - 0x563da
int32_t function_563d0(void) {
    // 0x563d0
    g4 = 28;
    return 28;
}

// Address range: 0x563e0 - 0x56408
int32_t function_563e0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x563e3
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x563ea
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x563ed
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x563f0
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x563f8
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x563fe
    g6 = v1;
    return result;
}

// Address range: 0x56410 - 0x5641d
int32_t function_56410(int32_t a1) {
    // 0x56410
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x56417
    g9 = v1;
    int32_t result = *(int32_t *)v1; // 0x56419
    g4 = result;
    return result;
}

// Address range: 0x56420 - 0x5642a
int32_t function_56420(void) {
    // 0x56420
    g4 = 24;
    return 24;
}

// Address range: 0x56430 - 0x564b2
int32_t function_56430(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5) {
    // 0x56430
    g4 = result;
    int32_t v1 = g6; // 0x56439
    g9 = a4;
    int32_t v2 = g10; // 0x5643f
    g7 = a5;
    int32_t v3 = g8; // 0x56445
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(result + 12); // 0x5644f
    int32_t v5 = *v4 ^ a4; // 0x5644f
    g9 = v5;
    int32_t v6 = *(int32_t *)(result + 16) ^ a5 | v5; // 0x56455
    g7 = v6;
    if (v6 != 0) {
        // 0x56459
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x56470
    g9 = *(int32_t *)(result + 24);
    *v4 = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v7 = g4; // 0x56481
    int32_t v8 = *(int32_t *)(v7 + 20); // 0x56481
    g7 = v8;
    int32_t v9 = *(int32_t *)(v7 + 28); // 0x56484
    g4 = v9;
    uint32_t v10 = g9; // 0x56487
    int32_t result2 = v9 + v8;
    if (v10 % 2 != 0) {
        int32_t v11 = *(int32_t *)result2; // 0x5648c
        g8 = v11;
        g9 = *(int32_t *)(v10 - 1 + v11);
    }
    // 0x56493
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x564c0 - 0x564d7
int32_t function_564c0(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    g6 = v1;
    int32_t v2 = *(int32_t *)(v1 + 8); // 0x564ca
    g4 = v2;
    int32_t v3; // 0x564d1
    if (v2 < 0) {
        // bb
        g4 = function_564f6((int32_t)&g870, (int32_t)&g870);
        v3 = g6;
    } else {
        v3 = v1;
    }
    int32_t v4 = *(int32_t *)v3; // 0x564d1
    g4 = v4;
    int32_t result; // 0x564d5
    if (v4 == 0) {
        // bb8
        result = function_564ef();
        g4 = result;
    } else {
        result = v4;
    }
    // 0x564d7
    return result;
}

// Address range: 0x564ef - 0x564f6
int32_t function_564ef(void) {
    // 0x564ef
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x564f6 - 0x564fc
int32_t function_564f6(int32_t a1, int32_t a2) {
    // 0x564f6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x56500 - 0x56527
int32_t function_56500(int32_t a1) {
    // 0x56500
    g6 = a1;
    g4 = *(int32_t *)(a1 + 16);
    *(int32_t *)a1 = (int32_t)&g206;
    int32_t v1 = *(int32_t *)(g6 + 12); // 0x56513
    g9 = v1;
    int32_t v2 = g4; // 0x56516
    int32_t v3 = v2 | v1; // 0x56518
    g7 = v3;
    int32_t result; // 0x5651a
    if (v3 == 0) {
        // bb
        result = function_5653a((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v2;
    }
    // 0x5651c
    return result;
}

// Address range: 0x5653a - 0x56540
int32_t function_5653a(int32_t a1, int32_t a2) {
    // 0x5653a
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x56540 - 0x5654b
int32_t function_56540(int32_t a1) {
    // 0x56540
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x56547
    g4 = result;
    return result;
}

// Address range: 0x56550 - 0x5655a
int32_t function_56550(void) {
    // 0x56550
    g4 = 1;
    return 1;
}

// Address range: 0x56560 - 0x56567
int32_t function_56560(void) {
    // 0x56560
    g4 = 0;
    return 0;
}

// Address range: 0x56570 - 0x56577
int32_t function_56570(void) {
    // 0x56570
    g4 = 0;
    return 0;
}

// Address range: 0x56580 - 0x5658e
int32_t function_56580(int32_t a1, int32_t a2) {
    // 0x56580
    g9 = a2;
    g4 = a1;
    *(char *)(a1 + 36) = (char)a2;
    return g4;
}

// Address range: 0x56590 - 0x5659e
int32_t function_56590(int32_t a1, int32_t a2) {
    // 0x56590
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 28) = a2;
    return g4;
}

// Address range: 0x565a0 - 0x565ae
int32_t function_565a0(int32_t a1, int32_t a2) {
    // 0x565a0
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 32) = a2;
    return g4;
}

// Address range: 0x565b0 - 0x5661d
int32_t function_565b0(void) {
    // 0x565b0
    g4 = g293;
    g9 = g293;
    return g293;
}

// Address range: 0x56620 - 0x5664c
int32_t function_56620(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = *(int32_t *)(a1 + 12); // 0x56629
    g9 = v2;
    g4 = 0;
    int32_t result; // 0x56645
    if (v2 != 0) {
        // 0x56632
        result = function_27340(v2, (int32_t)"stat", 0);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x5664a
    return result;
}

// Address range: 0x56650 - 0x56668
int32_t function_56650(int32_t result) {
    // 0x56650
    g4 = result;
    if (*(char *)(result + 36) == 0) {
        // 0x5665c
        return result;
    }
    int32_t v1 = *(int32_t *)result; // 0x56660
    g9 = v1;
    int32_t result2 = *(int32_t *)(v1 + 16); // 0x56663
    g4 = result2;
    return result2;
}

// Address range: 0x56670 - 0x566c4
int32_t function_56670(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x56683
    g6 = a2;
    int32_t v2 = function_25190(a2); // 0x5668d
    g4 = v2;
    int32_t v3 = function_2cc30(v2, "OnProfileStorageAvailable"); // 0x5669d
    g4 = v3;
    int32_t result; // 0x566b9
    if (v3 == 0) {
        // 0x566a6
        result = function_27fc0(g6, "iController", 0);
        g4 = result;
    } else {
        result = v3;
    }
    // 0x566be
    g6 = v1;
    return result;
}

// Address range: 0x566d0 - 0x56724
int32_t function_566d0(int32_t a1) {
    // 0x566d0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g210;
    *(int32_t *)(g4 + 4) = (int32_t)&g211;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(int32_t *)(g4 + 36) = 0;
    *(int32_t *)(g4 + 40) = 0;
    return g4;
}

// Address range: 0x56730 - 0x56731
int32_t function_56730(void) {
    // 0x56730
    return g4;
}

// Address range: 0x5673e - 0x56744
int32_t function_5673e(void) {
    // 0x5673e
    return g4;
}

// Address range: 0x56744 - 0x56771
int32_t function_56744(int32_t a1, int32_t a2) {
    // 0x56744
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x56744
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x56747
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x5674c
    int128_t v6 = __asm_addsd(v4, __asm_cvtps2pd(v5)); // 0x56754
    int128_t v7 = __asm_cvtpd2ps(__asm_unpcklpd(v6, v6)); // 0x5675c
    __asm_ucomiss(v7, *(int32_t *)(g6 + 16));
    bool v8; // cf
    bool v9; // zf
    if (!v8 && !v9) {
        // 0x56766
        *(int32_t *)(g6 + 16) = __asm_movss_1646(v7);
    }
    // 0x5676b
    g6 = a1;
    return g4;
}

// Address range: 0x567a5 - 0x567a8
int32_t function_567a5(void) {
    // 0x567a5
    return g4;
}

// Address range: 0x567ae - 0x567c5
int32_t function_567ae(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x74c084f0); // 0x567ae
    *v1 = *v1 - 1;
    int32_t v2 = *(int32_t *)(g6 + 0x7403147b); // 0x567b4
    bool v3; // cf
    int32_t result = v2 + g4 + (int32_t)v3 & -0x7407a275; // 0x567ba
    g4 = result;
    return result;
}

// Address range: 0x567c8 - 0x567d9
int32_t function_567c8(void) {
    // 0x567c8
    *(int32_t *)(g6 + 20) = 3;
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x567e0 - 0x567f8
int32_t function_567e0(void) {
    // 0x567e0
    *(int32_t *)(g6 + 20) = 0;
    int32_t v1; // ebp
    g10 = *(int32_t *)(v1 - 4);
    *(int32_t *)(v1 + 8) = g6;
    g6 = *(int32_t *)(v1 - 8);
    int32_t result = function_56730(); // 0x567f3
    g4 = result;
    return result;
}

// Address range: 0x56800 - 0x56872
int32_t function_56800(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x56803
    int32_t v2 = g6; // 0x56804
    g10 = a1;
    g6 = a2;
    int32_t v3 = *(int32_t *)(a1 + 36); // 0x5680e
    g9 = v3;
    if (v3 < 1) {
        // 0x5682c
        g6 = v2;
        g10 = v1;
        return g4;
    }
    int32_t v4 = *(int32_t *)(a1 + 24); // 0x56815
    g7 = v4;
    g4 = 0;
    int32_t result; // 0x56825
    if (*(int32_t *)v4 != a2) {
        int32_t v5 = 0; // 0x56825
        while (true) {
            // 0x56825
            result = v5 + 1;
            g4 = result;
            if (result == v3) {
                // break -> 0x5682c
                break;
            }
            // 0x56820
            if (*(int32_t *)(4 * result + v4) == a2) {
                if (v5 == -2) {
                    goto lab_0x5682c;
                } else {
                    goto lab_0x5683d;
                }
            }
            v5 = result;
        }
      lab_0x5682c:
        // 0x5682c
        g6 = v2;
        g10 = v1;
        return result;
    }
    result = 0;
    goto lab_0x5683d;
  lab_0x5683d:;
    int32_t v6 = v3 - result - 1; // 0x56841
    g6 = v6;
    int32_t v7; // 0x56862
    int32_t v8; // 0x56862
    if (v6 >= 1) {
        int32_t v9 = 4 * result; // 0x56848
        int32_t v10 = v4 + 4 + v9; // 0x56848
        g9 = v10;
        int32_t v11 = 4 * v6; // 0x5684c
        g6 = v11;
        int32_t v12 = v9 + v4; // 0x5684f
        g4 = v12;
        g4 = function_2cb20(v12, v10, v11);
        v7 = g10;
        v8 = *(int32_t *)(v7 + 36);
        g9 = v8;
    } else {
        v7 = a1;
        v8 = v3;
    }
    int32_t v13 = v8 - 1; // 0x56865
    g9 = v13;
    *(int32_t *)(v7 + 36) = v13;
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x56880 - 0x56885
int32_t function_56880(void) {
    // 0x56880
    return g4;
}

// Address range: 0x56890 - 0x56895
int32_t function_56890(void) {
    // 0x56890
    return g4;
}

// Address range: 0x568a0 - 0x568a5
int32_t function_568a0(void) {
    // 0x568a0
    return g4;
}

// Address range: 0x568b0 - 0x568c3
int32_t function_568b0(int32_t a1) {
    // 0x568b0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 20); // 0x568bb
    g4 = v1;
    g864 = false;
    g866 = v1 < 0;
    int32_t result; // 0x568c1
    if (v1 != 0) {
        // bb
        result = function_56910();
        g4 = result;
    } else {
        result = v1;
    }
    // 0x568c3
    return result;
}

// Address range: 0x568de - 0x5690d
int32_t function_568de(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x568de
    int32_t * v2 = (int32_t *)(v1 + 36); // 0x568de
    int32_t result = *v2; // 0x568de
    g4 = result;
    g10 = 0;
    if (result < 1) {
        // 0x56906
        g6 = a1;
        g10 = a2;
        return result;
    }
    int32_t v3 = 0; // 0x568f3
    int32_t v4 = *(int32_t *)(v1 + 24); // 0x568f0
    g4 = v4;
    int32_t result2 = *(int32_t *)(4 * v3 + v4); // 0x568f3
    g4 = result2;
    int32_t v5 = v3 + 1; // 0x568f6
    g10 = v5;
    g9 = *(int32_t *)result2;
    while (*v2 > v5) {
        // 0x568f0
        v3 = v5;
        v4 = *(int32_t *)(v1 + 24);
        g4 = v4;
        result2 = *(int32_t *)(4 * v3 + v4);
        g4 = result2;
        v5 = v3 + 1;
        g10 = v5;
        g9 = *(int32_t *)result2;
    }
    // 0x56906
    g6 = a1;
    g10 = a2;
    return result2;
}

// Address range: 0x56910 - 0x56920
int32_t function_56910(void) {
    // 0x56910
    int32_t v1; // 0x56912
    if (g866 == g864) {
        // 0x56912
        v1 = g4;
    } else {
        int32_t v2 = function_568de((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x56910
        g4 = v2;
        v1 = v2;
    }
    if (v1 > 2) {
        int32_t v3 = function_568de((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x56915
        g4 = v3;
    }
    // 0x56917
    *(int32_t *)(g6 + 20) = 0;
    int32_t result = function_568de((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x5691e
    g4 = result;
    return result;
}

// Address range: 0x56920 - 0x56932
int32_t function_56920(void) {
    int32_t v1 = function_35b40(); // 0x56920
    g4 = v1;
    if ((char)v1 != 0) {
        int32_t v2 = function_568de((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x56927
        g4 = v2;
    }
    // 0x56929
    *(int32_t *)(g6 + 20) = 1;
    int32_t result = function_568de((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x56930
    g4 = result;
    return result;
}

// Address range: 0x56940 - 0x5694f
int32_t function_56940(int32_t a1) {
    // 0x56940
    g4 = a1;
    *(int32_t *)(a1 + 20) = 1;
    return g4;
}

// Address range: 0x56950 - 0x5695f
int32_t function_56950(int32_t a1) {
    // 0x56950
    g4 = a1;
    *(int32_t *)(a1 + 20) = 0;
    return g4;
}

// Address range: 0x56960 - 0x5696f
int32_t function_56960(int32_t a1) {
    // 0x56960
    g4 = a1;
    *(int32_t *)(a1 + 20) = 0;
    return g4;
}

// Address range: 0x56970 - 0x569e6
int32_t function_56970(int32_t a1) {
    int32_t v1 = g10; // 0x56973
    int32_t v2 = g6; // 0x56974
    g4 = a1;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5698b
    g4 = v3;
    int32_t v4 = function_27fc0(v3, "version", 0); // 0x56991
    g4 = v4;
    g10 = v4;
    int32_t v5 = function_26cf0(); // 0x5699f
    g4 = v5;
    g6 = v5;
    int32_t v6 = function_27760(v5, "OnDatacenterUpdate", "version", g10); // 0x569bd
    g4 = v6;
    int32_t result; // 0x569c6
    if (v5 != 0) {
        // 0x569c6
        result = (int32_t)g450;
        g4 = result;
        g9 = *(int32_t *)g450;
        g9 = *(int32_t *)g450;
    } else {
        result = v6;
    }
    // 0x569df
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x569e6 - 0x56a49
int32_t function_569e6(int32_t a1, int32_t a2) {
    // 0x569e6
    g10 = g4;
    g4 = function_26d40();
    function_7ab57(g10, (int32_t)&g870);
    g4 = a1;
    g9 = a2;
    *(int32_t *)a1 = (int32_t)&g212;
    *(int32_t *)(g4 + 4) = g9;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(char *)(g4 + 36) = 1;
    return g4;
}

// Address range: 0x56a50 - 0x56a51
int32_t function_56a50(int32_t a1) {
    // 0x56a50
    return g4;
}

// Address range: 0x56b51 - 0x56b7f
int32_t function_56b51(int32_t a1) {
    // 0x56b51
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + (int32_t)&g72); // 0x56b51
    *v2 = *v2 - 1;
    int32_t v3 = g4; // 0x56b57
    *(char *)v3 = (char)v3 + *(char *)&g4;
    int32_t v4 = g6; // 0x56b63
    g6 = a1;
    g4 = function_56a50(a1);
    g6 = v4;
    int32_t result = function_1bc40(); // 0x56b7a
    g4 = result;
    return result;
}

// Address range: 0x56bb7 - 0x56bb8
int32_t function_56bb7(void) {
    // 0x56bb7
    return g4;
}

// Address range: 0x56bc2 - 0x56bcc
int32_t function_56bc2(int32_t a1) {
    // 0x56bc2
    g10 = a1;
    int32_t v1 = g4; // 0x56bc3
    bool v2; // cf
    unsigned char v3 = (char)v1 + 127 + (char)v2; // 0x56bc3
    g4 = (int32_t)v3 | v1 & -256;
    int32_t result = function_c710468b(); // 0x56bc5
    g4 = result;
    return result;
}

// Address range: 0x56c30 - 0x56c3b
int32_t function_56c30(void) {
    int32_t v1 = g10; // 0x56c30
    g4 = *(int32_t *)(v1 + 8);
    *(int32_t *)v1 = (int32_t)&g212;
    return g4;
}

// Address range: 0x56c40 - 0x56c92
int32_t function_56c40(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x56c46
    g6 = a1;
    int32_t v3 = g10; // 0x56c4c
    int32_t result = function_1bc00(40); // 0x56c56
    g10 = result;
    g4 = &result;
    int32_t v4 = g6; // 0x56c73
    int32_t v5 = *(int32_t *)(v4 + 36); // 0x56c73
    g4 = v5;
    int32_t v6 = v4 + 24; // 0x56c76
    g6 = v6;
    function_56e20(v6, v5, &result);
    g4 = result;
    g6 = v2;
    g10 = v3;
    return result;
}

// Address range: 0x56ca0 - 0x56cdb
int32_t function_56ca0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x56ca3
    g4 = a2;
    g6 = a1;
    int32_t result; // 0x56cd0
    if (a2 != 0) {
        int32_t v3 = function_26d60(a2); // bp-16
        int32_t v4 = &v3; // 0x56cbc
        g4 = v4;
        int32_t v5 = g6; // 0x56cc3
        int32_t v6 = *(int32_t *)(v5 + 20); // 0x56cc3
        g4 = v6;
        int32_t v7 = v5 + 8; // 0x56cc6
        g6 = v7;
        result = function_2bdb0(v7, v6, v4);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x56cd5
    g6 = v2;
    return result;
}

// Address range: 0x56ce0 - 0x56cf7
int32_t function_56ce0(int32_t a1) {
    // 0x56ce0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x56cea
    g9 = v1;
    int32_t v2; // 0x56cf1
    if (v1 < 0) {
        // bb
        g4 = function_56d16((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x56cf1
    g4 = v3;
    int32_t result; // 0x56cf5
    if (v3 == 0) {
        // bb233
        result = function_56d0f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x56cf7
    return result;
}

// Address range: 0x56d0f - 0x56d16
int32_t function_56d0f(void) {
    // 0x56d0f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x56d16 - 0x56d1c
int32_t function_56d16(int32_t a1, int32_t a2) {
    // 0x56d16
    g6 = a1;
    return g4;
}

// Address range: 0x56d20 - 0x56d37
int32_t function_56d20(int32_t a1) {
    // 0x56d20
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x56d2a
    g4 = v1;
    int32_t v2; // 0x56d31
    if (v1 < 0) {
        // bb
        g4 = function_56d56((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x56d31
    g4 = v3;
    int32_t result; // 0x56d35
    if (v3 == 0) {
        // bb7
        result = function_56d4f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x56d37
    return result;
}

// Address range: 0x56d4f - 0x56d56
int32_t function_56d4f(void) {
    // 0x56d4f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x56d56 - 0x56d5c
int32_t function_56d56(int32_t a1, int32_t a2) {
    // 0x56d56
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x56d60 - 0x56db0
int32_t function_56d60(int32_t a1, int32_t a2) {
    // 0x56d60
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x56d6b
    int64_t v2 = v1; // 0x56d6b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x56d72
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x56d78
    g7 = v4;
    int32_t v5; // 0x56d98
    if (v1 == 0) {
        // bb
        g4 = function_56dd8();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x56d7e
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x56d86
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x56d8b
    g4 = v8;
    int32_t v9; // 0x56da9
    if (v5 > v8) {
        // 0x56d92
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x56d98
        int32_t v11 = v10 < 0; // 0x56d9c
        int32_t v12 = (v11 + v10) / 2; // 0x56da1
        while (v5 > v12) {
            // 0x56d98
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x56da7
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x56da7
    int32_t v14 = *(int32_t *)v13; // 0x56da7
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x56dae
    if (v14 == 0) {
        // bb20
        result = function_56dff();
        g4 = result;
    } else {
        // 0x56da7
        result = g4;
    }
    // 0x56db0
    return result;
}

// Address range: 0x56dd8 - 0x56dff
int32_t function_56dd8(void) {
    int32_t v1 = g4; // 0x56dd8
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x56ddf
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x56df0
    while (g7 > v3) {
        // 0x56df0
        v3 *= 2;
    }
    // 0x56df6
    g4 = v3;
    int32_t v4 = g6; // 0x56df6
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x56dff - 0x56e00
int32_t function_56dff(void) {
    // 0x56dff
    return g4;
}

// Address range: 0x56e20 - 0x56ea6
int32_t function_56e20(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x56e26
    g6 = a1;
    int32_t v2 = g10; // 0x56e2c
    g10 = a2;
    int32_t v3 = g8; // 0x56e32
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x56e35
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x56e38
    g9 = v5;
    int32_t v6; // 0x56e41
    int32_t v7; // 0x56ea1
    int32_t v8; // 0x56ea1
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x56e96
        g4 = v9;
        g4 = function_56d60(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x56e3f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x56e48
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x56e50
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x56e76
    if (v11 < 1) {
        // 0x56e3f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x56e61
        int32_t v14 = v13 + 4 + 4 * g10; // 0x56e68
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x56e74
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x56e76
    g9 = v16;
    if (v16 != 0) {
        // 0x56e7a
        g4 = (int32_t)a3;
        int32_t v17 = *a3; // 0x56e7d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x56e81
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x56eb0 - 0x56ebf
int32_t function_56eb0(int32_t a1) {
    // 0x56eb0
    g4 = a1;
    int32_t result = (int32_t)(*(int32_t *)(a1 + 64) == 5) | a1 & -256; // 0x56ebb
    g4 = result;
    return result;
}

// Address range: 0x56ec0 - 0x56ecb
int32_t function_56ec0(int32_t a1) {
    int32_t result = a1 + 68; // 0x56ec7
    g4 = result;
    return result;
}

// Address range: 0x56ed0 - 0x56eef
int32_t function_56ed0(int32_t a1, int32_t a2) {
    // 0x56ed0
    g4 = a2;
    int32_t result = function_25190(a2); // 0x56eea
    g4 = result;
    return result;
}

// Address range: 0x56ef0 - 0x56f61
int32_t function_56ef0(int32_t * a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x56ef6
    g6 = a2;
    int32_t v3 = g10; // 0x56efc
    g10 = (int32_t)a1;
    function_27920(a2, "server", "dedicated");
    int32_t v4 = g10 + (int32_t)&g17; // 0x56f1a
    g4 = v4;
    int32_t v5 = function_27920(g6, "adronline", (char *)v4); // 0x56f2f
    g4 = v5;
    int32_t v6 = g10 + (int32_t)&g66; // 0x56f34
    char * v7 = (char *)v6; // 0x56f34
    int32_t result; // 0x56f52
    if (*v7 != 0) {
        // 0x56f3d
        g10 = v6;
        result = function_27920(g6, "adrlocal", v7);
        g4 = result;
    } else {
        result = v5;
    }
    // 0x56f57
    g6 = v2;
    g10 = v3;
    g5 = v1;
    return result;
}

// Address range: 0x56f70 - 0x56f71
int32_t function_56f70(int32_t a1, int32_t a2, int32_t a3) {
    // 0x56f70
    return g4;
}

// Address range: 0x56fb0 - 0x56fb6
int32_t function_56fb0(void) {
    // 0x56fb0
    return g4;
}

// Address range: 0x56fb6 - 0x57000
int32_t function_56fb6(void) {
    // 0x56fb6
    g8 += 12;
    int32_t v1 = *(int32_t *)(g4 + 28); // 0x56fb9
    g10 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x56fbc
    g4 = v2;
    int32_t v3; // ebp
    *(int32_t *)(v3 - 44) = *(int32_t *)v2;
    int32_t v4 = (int32_t)g450; // 0x56fc3
    g4 = v4;
    g9 = v3 - 28;
    *(int32_t *)(g6 + 8) = v4;
    g6 = *(int32_t *)(v3 - 12);
    g10 = *(int32_t *)(v3 - 8);
    g8 = *(int32_t *)(v3 - 4);
    return g4;
}

// Address range: 0x57000 - 0x57041
int32_t function_57000(int32_t a1) {
    int32_t v1 = g6; // 0x57003
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 8); // 0x5700a
    g4 = v2;
    *(int32_t *)(a1 + 4) = 0;
    if (v2 != 0) {
        // 0x57018
        g9 = g292;
        int32_t v3 = *(int32_t *)(g292 + 28); // 0x5701e
        g9 = v3;
        g7 = *(int32_t *)v3;
    }
    // 0x5702d
    *(int32_t *)(g6 + 8) = 0;
    g6 = v1;
    int32_t result = function_1bc40(); // 0x5703c
    g4 = result;
    return result;
}

// Address range: 0x57050 - 0x57095
int32_t function_57050(int32_t a1) {
    int32_t v1 = g6; // 0x57053
    g6 = a1;
    int32_t * v2 = (int32_t *)(a1 + 12); // 0x5705a
    int32_t v3 = *v2; // 0x5705a
    g4 = v3;
    int32_t v4; // 0x57070
    if (v3 != 0) {
        // 0x57061
        g9 = *(int32_t *)v3;
        *v2 = 0;
        v4 = g6;
    } else {
        v4 = a1;
    }
    int32_t v5 = *(int32_t *)(v4 + 20); // 0x57070
    g4 = v5;
    int32_t v6; // 0x57086
    if (v5 != 0) {
        // 0x57077
        g4 = function_57000(v5);
        *(int32_t *)(g6 + 20) = 0;
        v6 = g6;
    } else {
        v6 = v4;
    }
    int32_t v7 = *(int32_t *)v6; // 0x57086
    g4 = v7;
    int32_t result = *(int32_t *)(v7 + 8); // 0x5708b
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x570a0 - 0x57266
int32_t function_570a0(int32_t a1) {
    int32_t v1 = g8; // 0x570a3
    int32_t v2 = g10; // 0x570a4
    int32_t v3 = g6; // 0x570a5
    g6 = a1;
    int32_t v4 = *(int32_t *)(a1 + 36); // 0x570af
    g9 = v4;
    *(int32_t *)(a1 + 64) = 4;
    if (v4 == 0) {
        // 0x57270
        return g4;
    }
    int32_t v5 = *(int32_t *)(g6 + 24); // 0x570c1
    int32_t v6 = v4 - 1; // 0x570c4
    g9 = v6;
    g7 = 129;
    int32_t v7; // bp-568
    int32_t v8 = &v7; // 0x570d4
    g4 = v8;
    g10 = v5;
    g8 = v8;
    __asm_rep_movsd_memcpy((char *)&v7, (char *)v5, 129);
    int32_t v9 = (g3 ? -516 : 516) + v8; // 0x570e2
    g8 = v9;
    g10 = v9;
    g7 = 0;
    int32_t v10 = g9;
    int32_t v11; // 0x57122
    int32_t v12; // 0x57122
    if (v6 == 0 || v6 < 0) {
        // 0x570c1
        v12 = g6;
        v11 = v10;
    } else {
        // 0x570e6
        g7 = 512 * v10;
        g9 = v5;
        g4 = function_2cb20(v5, v5 + (int32_t)&g68, 516 * v10);
        int32_t v13 = g6; // 0x57116
        g4 = v8;
        int32_t v14 = *(int32_t *)(v13 + 36) - 1; // 0x5711f
        g9 = v14;
        v12 = v13;
        v11 = v14;
    }
    // 0x57122
    *(int32_t *)(v12 + 36) = v11;
    int32_t v15 = g6 + (int32_t)&g36; // 0x57125
    g9 = v15;
    int32_t v16 = g4; // 0x5712b
    int32_t v17; // bp-52
    int32_t v18 = &v17; // 0x5712f
    g10 = v18;
    int32_t v19; // bp-40
    int32_t v20 = &v19; // 0x57138
    g8 = v20;
    g4 = function_2d970((int32_t *)v15, v16, (int32_t)"GNU");
    char v21; // bp-312
    int32_t v22 = &v21; // 0x5714b
    g9 = v22;
    int32_t v23 = g6 + (int32_t)&g71; // 0x57159
    g7 = v23;
    g4 = function_2d970((int32_t *)v23, v22, (int32_t)"GNU");
    g4 = function_2c6c0(&v17, 0);
    g4 = function_2c870(&v17, 0);
    g4 = function_2c6d0(&v17, 3);
    g4 = function_2c6c0(&v19, 0);
    g4 = function_2c870(&v19, 0);
    function_2c6d0(&v19, 3);
    g4 = v16;
    g4 = function_2c890(v18, v16, 0);
    g9 = v22;
    if (v21 != 0) {
        // 0x57250
        function_2c890(v20, v22, 0);
    } else {
        // 0x571fa
        function_2c6d0(&v19, 0);
    }
    int32_t v24 = g6; // 0x5720f
    g7 = v24 + 12;
    g4 = g281;
    g9 = *(int32_t *)g281;
    g7 = *(int32_t *)(v24 + 56);
    g7 = *(int32_t *)(v24 + 48);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g281;
}

// Address range: 0x57274 - 0x572a2
int32_t function_57274(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int128_t v1 = __asm_movups(*(int128_t *)(g6 + 8)); // 0x57276
    g4 = 0;
    int32_t v2; // ebp
    float80_t v3; // st7
    *(float64_t *)(v2 - 576) = (float64_t)v3;
    int128_t v4 = __asm_cvtps2pd(v1); // 0x57282
    __asm_ucomisd_1652(v4, *(int64_t *)(v2 - 576));
    int32_t v5 = 2 * (g4 & -256 | (int32_t)1) + 3; // 0x57290
    g4 = v5;
    *(int32_t *)(g6 + 64) = v5;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x572b0 - 0x5732f
int32_t function_572b0(int32_t a1) {
    int32_t v1 = g6; // 0x572b6
    g6 = a1;
    int32_t v2 = g10; // 0x572bc
    int32_t v3 = g8; // 0x572bf
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x572c2
    int32_t v5 = *v4; // 0x572c2
    g4 = v5;
    int32_t v6 = *(int32_t *)v5; // 0x572c5
    g9 = v6;
    g10 = v5;
    int32_t v7 = *v4; // 0x572cf
    g4 = v7;
    g8 = v6;
    g9 = *(int32_t *)v7;
    if (v7 != 3) {
        int32_t v8 = v6 | v5; // 0x572e1
        g8 = v8;
        if (v8 != 0) {
            // 0x57300
            *(char *)(a1 + 69) = 1;
            int32_t v9 = g6 + 70; // 0x57304
            g4 = v9;
            g4 = function_2d970((int32_t *)v9, g10, (int32_t)"GNU");
            *(int32_t *)(g6 + 64) = 5;
            g6 = v1;
            g10 = v2;
            g8 = v3;
            return g4;
        }
    }
    // 0x572e5
    g10 = v2;
    g6 = v1;
    g8 = v3;
    int32_t v10; // ebp
    g5 = v10;
    int32_t result = function_570a0(v7); // 0x572f4
    g4 = result;
    return result;
}

// Address range: 0x57330 - 0x57331
int32_t function_57330(void) {
    // 0x57330
    return g4;
}

// Address range: 0x5736a - 0x57378
int32_t function_5736a(int32_t a1) {
    int32_t * v1 = (int32_t *)(g7 - 0x3b7cf7a3); // 0x5736a
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x57370
    bool v3; // cf
    unsigned char v4 = (char)v2 + 91 + (char)v3; // 0x57370
    g4 = (int32_t)v4 | v2 & -256;
    g5 = a1;
    int32_t result = function_570a0((int32_t)&g870); // 0x57373
    g4 = result;
    return result;
}

// Address range: 0x57380 - 0x573a2
int32_t function_57380(int32_t a1) {
    // 0x57380
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x57386
    g4 = v1;
    if (v1 == 0) {
        // 0x573a0
        return 0;
    }
    int32_t result = function_57330(); // 0x57391
    g4 = result;
    return result;
}

// Address range: 0x573b0 - 0x574a5
int32_t function_573b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x573b3
    int32_t v2 = g6; // 0x573b4
    g6 = a1;
    g4 = a2;
    g9 = a4;
    *(int32_t *)a1 = (int32_t)&g213;
    *(int32_t *)(g6 + 44) = g4;
    g4 = a3;
    *(int32_t *)(g6 + 4) = (int32_t)&g214;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 48) = g4;
    g4 = (int32_t)g450;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 36) = 0;
    *(int32_t *)(g6 + 40) = 0;
    *(int32_t *)(g6 + 52) = g9;
    int32_t v3 = g4; // 0x5741e
    g9 = *(int32_t *)v3;
    int32_t v4 = g6; // 0x57426
    g7 = *(int32_t *)(v4 + 44);
    g8 = v4 + 68;
    *(int32_t *)(v4 + 56) = v3;
    g9 = &g81;
    *(int32_t *)(g6 + 60) = g4;
    *(int32_t *)(g6 + 64) = 0;
    int32_t v5; // 0x57489
    int32_t v6; // 0x57487
    if (g8 % 2 != 0) {
        int32_t v7 = g6; // 0x57480
        g8 = v7 + 69;
        *(char *)(v7 + 68) = 0;
        v6 = g9 & -256 | 1;
        g9 = v6;
        v5 = g8;
        if ((v5 & 2) == 0) {
            goto lab_0x5745a;
        } else {
            goto lab_0x57498;
        }
    } else {
        int32_t v8 = g8; // 0x57452
        if ((v8 & 2) != 0) {
            v5 = v8;
            goto lab_0x57498;
        } else {
            // 0x57452
            v5 = v8;
            v6 = g9;
            goto lab_0x5745a;
        }
    }
  lab_0x5745a:
    // 0x5745a
    g4 = 0;
    int32_t v9 = v6 / 4; // 0x5745e
    g7 = v9;
    __asm_rep_stosd_memset((char *)v5, 0, v9);
    int32_t v10 = (g3 ? -4 : 4) * v9 + v5; // 0x57464
    g8 = v10;
    g7 = 0;
    int32_t v11; // 0x5746d
    if ((v6 & 2) != 0) {
        // 0x57468
        *(int16_t *)v10 = 0;
        v11 = g8 + 2;
        g8 = v11;
    } else {
        v11 = v10;
    }
    int32_t v12 = g9 % 2; // 0x57470
    g9 = v12;
    if (v12 != 0) {
        // 0x57475
        *(char *)v11 = 0;
    }
    // 0x57478
    g6 = v2;
    g8 = v1;
    return 0;
  lab_0x57498:
    // 0x57498
    *(int16_t *)v5 = 0;
    int32_t v13 = g9 - 2; // 0x5749d
    g9 = v13;
    int32_t v14 = g8 + 2; // 0x574a0
    g8 = v14;
    v5 = v14;
    v6 = v13;
    goto lab_0x5745a;
}

// Address range: 0x574a8 - 0x574a9
int32_t function_574a8(void) {
    // 0x574a8
    return g4;
}

// Address range: 0x574c0 - 0x574c1
int32_t function_574c0(int32_t a1) {
    // 0x574c0
    return g4;
}

// Address range: 0x57530 - 0x5758f
int32_t function_57530(int32_t a1) {
    // 0x57530
    g6 += 24;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_584e0(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x5753e
    g4 = v1;
    int32_t v2 = function_7ab57(v1, (int32_t)&g870); // 0x57544
    g4 = v2;
    g6 += 24;
    *(int32_t *)(g5 - 12) = v2;
    g4 = function_584a0(g6);
    int32_t v3 = *(int32_t *)(g5 - 12); // 0x57557
    g4 = v3;
    g4 = function_7ab57(v3, (int32_t)&g870);
    int32_t v4 = g6; // 0x57573
    g6 = a1;
    g4 = function_574c0(a1);
    g6 = v4;
    int32_t result = function_1bc40(); // 0x5758a
    g4 = result;
    return result;
}

// Address range: 0x57590 - 0x57990
int32_t function_57590(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x57593
    int32_t v2 = g10; // 0x57594
    int32_t v3 = g6; // 0x57595
    g4 = g292;
    g10 = a2;
    g7 = a3;
    g8 = a1;
    int32_t v4 = *(int32_t *)(g292 + 28); // 0x575aa
    g4 = v4;
    g9 = (int32_t)"FCVAR_NEVER_AS_STRING";
    g6 = v4;
    int32_t v5; // 0x575dc
    if ((g624 & 16) == 0) {
        // 0x575cd
        g4 = g625;
        int32_t v6 = *(int32_t *)(g625 + 36); // 0x575d2
        g4 = (int32_t)&g129;
        v5 = v6 == 0 ? (int32_t)&g129 : v6;
        g9 = v5;
    } else {
        v5 = (int32_t)"FCVAR_NEVER_AS_STRING";
    }
    char * v7 = (char *)v5; // 0x575df
    if (*v7 != 0) {
        // 0x57850
        g4 = (int32_t)*(int16_t *)v4;
        g7 = *(int32_t *)(v4 + 4) / 0x10000 % 256;
        int32_t v8 = 64 * g561 + (int32_t)&g562; // 0x578ae
        g4 = v8;
        function_2da40(v8, 64, "%u.%u.%u.%u:%i");
        int32_t v9 = g561; // 0x578bf
        g9 = v5;
        int32_t v10 = (v9 + 1) % 4; // 0x578d1
        g4 = v10;
        int32_t v11 = 64 * v9 + (int32_t)&g562; // 0x578d4
        g7 = v11;
        g561 = v10;
        int32_t v12 = function_2cfa0(v11, v7); // 0x578e6
        g4 = v12;
        g9 = v5;
        if (v12 == 0) {
            goto lab_0x57908;
        } else {
            unsigned char v13 = *(char *)v12; // 0x578f5
            g4 = v13;
            if (v13 == 58) {
                goto lab_0x575e8;
            } else {
                if (v13 == 0) {
                    goto lab_0x575e8;
                } else {
                    goto lab_0x57908;
                }
            }
        }
    } else {
        goto lab_0x575e8;
    }
  lab_0x575e8:;
    int32_t v14 = g6; // 0x575e8
    int32_t v15 = *(int32_t *)(v14 + 148); // 0x575e8
    g4 = v15;
    int32_t result = v15 - *(int32_t *)(v14 + 156); // 0x575ee
    g4 = result;
    if (result >= 1) {
        // 0x575f8
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x57608
    g4 = g623;
    int32_t v16 = *(int32_t *)(g623 + 48); // 0x5760d
    g9 = v16;
    if (*(int32_t *)(v14 + 8) > v16) {
        // 0x575f8
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g623;
    }
    int32_t v17 = *(int32_t *)(g8 + 4); // 0x57615
    g4 = v17;
    if (v17 == 0) {
        // 0x575f8
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x5761c
    int32_t v18; // bp-44
    int32_t v19 = &v18; // 0x5761c
    g7 = v19;
    function_2c6c0(&v18, 0);
    g4 = v19;
    g4 = function_2c870(&v18, 0);
    g9 = v19;
    g4 = function_2c6d0(&v18, 3);
    uint32_t v20 = *(int32_t *)(g6 + 4); // 0x57655
    g9 = v20 / 256 & (int32_t)&g862;
    g7 = v20 / 0x10000 & (int32_t)&g862;
    int32_t v21 = 64 * g561 + (int32_t)&g562; // 0x5769b
    g4 = v21;
    function_2da40(v21, 64, "%u.%u.%u.%u:%i");
    int32_t v22 = g561; // 0x576a8
    g7 = v19;
    int32_t v23 = 64 * v22 + (int32_t)&g562; // 0x576c2
    g9 = v23;
    int32_t v24 = (v22 + 1) % 4; // 0x576c8
    g4 = v24;
    g561 = v24;
    function_2c890(v19, v23, 0);
    g4 = v19;
    g4 = function_2c700(v19);
    g9 = v19;
    function_2c6f0(v19);
    int32_t v25 = *(int32_t *)&g291; // 0x576f5
    g7 = v25;
    g4 = v25;
    g9 = (int32_t)&g129;
    int32_t v26; // 0x5773d
    if (v25 != 0) {
        // 0x57722
        g9 = v25;
        v26 = function_27c00(v25, "server/adrlocal", (int32_t *)&g129);
        g4 = v26;
        g9 = v26;
    } else {
        v26 = (int32_t)&g129;
    }
    int32_t v27 = g6; // 0x57744
    int32_t v28 = *(int32_t *)(v27 + 8); // 0x57744
    g7 = v28;
    g4 = (int32_t)*(int16_t *)v27;
    uint32_t v29 = *(int32_t *)(v27 + 4); // 0x5774a
    g7 = v29 / 0x10000;
    g6 = v29 / 0x1000000;
    int32_t v30 = 64 * g561 + (int32_t)&g562; // 0x57799
    g4 = v30;
    function_2da40(v30, 64, "%u.%u.%u.%u:%i");
    int32_t v31 = g561; // 0x577a6
    g7 = v28;
    int32_t v32 = (v31 + 1) % 4; // 0x577c6
    g4 = v32;
    int32_t v33; // bp-560
    g6 = &v33;
    g561 = v32;
    function_2d970(&v33, 64 * v31 + (int32_t)&g562, (int32_t)"GNU");
    g9 = v26;
    int32_t v34; // bp-304
    g4 = &v34;
    g4 = function_2d970(&v34, v26, (int32_t)"GNU");
    int32_t v35 = *(int32_t *)(g8 + 4); // 0x57803
    g4 = v35;
    int32_t v36 = *(int32_t *)(v35 + 36); // 0x5780a
    g9 = v36;
    int32_t v37 = v35 + 24; // 0x5780d
    g4 = v37;
    function_58620(v37, v36, &v33);
    g4 = g622;
    int32_t v38 = *(int32_t *)(g8 + 4); // 0x57821
    g9 = v38;
    uint32_t v39 = *(int32_t *)(g622 + 48); // 0x57824
    g7 = v39;
    if (*(int32_t *)(v38 + 36) <= v39) {
        // bb
        g4 = function_579a0();
    }
    // 0x57830
    g4 = g292;
    int32_t result2 = *(int32_t *)(g292 + 28); // 0x57835
    g4 = result2;
    g9 = *(int32_t *)result2;
    // 0x575f8
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x57908:;
    int32_t v40 = g6; // 0x57908
    uint32_t v41 = *(int32_t *)(v40 + 4); // 0x57908
    g4 = v41;
    g10 = (int32_t)*(int16_t *)v40;
    g6 = v41 / 256 & (int32_t)&g862;
    g7 = v41 / 0x10000 & (int32_t)&g862;
    int32_t v42 = 64 * g561 + (int32_t)&g562; // 0x57954
    g4 = v42;
    function_2da40(v42, 64, "%u.%u.%u.%u:%i");
    g9 = v5;
    int32_t result3 = (g561 + 1) % 4; // 0x5797a
    g4 = result3;
    g7 = 64 * g561 + (int32_t)&g562;
    g561 = result3;
    return result3;
}

// Address range: 0x57994 - 0x579a0
int32_t function_57994(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g73); // 0x57994
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5799a
    char * v3 = (char *)(v2 + 94); // 0x5799a
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x579a0 - 0x579a1
int32_t function_579a0(void) {
    // 0x579a0
    return g4;
}

// Address range: 0x579a4 - 0x579cd
int32_t function_579a4(void) {
    int32_t * v1 = (int32_t *)(g6 + 0xff30447); // 0x579a4
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x579aa
    char * v3 = (char *)(v2 + 8); // 0x579aa
    bool v4; // cf
    *v3 = (char)v4 + *v3 + (char)v2;
    int32_t v5; // ebp
    int32_t v6 = v5 - 592; // 0x579ad
    float80_t v7; // st7
    *(float64_t *)v6 = (float64_t)v7;
    int128_t v8 = __asm_movsd_1649(*(int64_t *)v6); // 0x579b3
    int128_t v9; // xmm0
    __asm_ucomisd(v8, __asm_cvtps2pd(v9));
    return g4;
}

// Address range: 0x579d0 - 0x57a83
int32_t function_579d0(int32_t a1) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x579d9
    g6 = a1;
    int32_t v3 = g10; // 0x579df
    int32_t v4 = g8; // 0x579e2
    int32_t v5; // bp-544
    g8 = &v5;
    int32_t v6 = *(int32_t *)(a1 + 44); // 0x579fb
    g4 = v6;
    int32_t v7 = function_27c00(v6, "server/adrlocal", (int32_t *)&g129); // 0x57a01
    g4 = v7;
    g10 = v7;
    int32_t v8 = *(int32_t *)(g6 + 44); // 0x57a18
    g4 = v8;
    int32_t v9 = function_27c00(v8, "server/adronline", (int32_t *)&g129); // 0x57a1e
    g4 = v9;
    function_2d970(&v5, v9, (int32_t)"GNU");
    int32_t v10; // bp-288
    g4 = &v10;
    g4 = function_2d970(&v10, g10, (int32_t)"GNU");
    int32_t v11 = g6; // 0x57a5c
    int32_t v12 = v11 + 24; // 0x57a63
    g4 = v12;
    g4 = function_58620(v12, *(int32_t *)(v11 + 36), &v5);
    int32_t result = function_570a0(g6); // 0x57a71
    g4 = result;
    g6 = v2;
    g10 = v3;
    g8 = v4;
    g5 = v1;
    return result;
}

// Address range: 0x57a90 - 0x57a91
int32_t function_57a90(void) {
    // 0x57a90
    return g4;
}

// Address range: 0x57a92 - 0x57a98
int32_t function_57a92(void) {
    int32_t v1 = g4; // 0x57a92
    g4 = g8;
    g8 = v1;
    int32_t result = function_e58e7a9f(); // 0x57a93
    g4 = result;
    return result;
}

// Address range: 0x57acd - 0x57ad3
int32_t function_57acd(void) {
    int32_t v1 = g4; // 0x57acd
    g4 = g8;
    g8 = v1;
    int32_t result = function_84147ada(); // 0x57ace
    g4 = result;
    return result;
}

// Address range: 0x57ad7 - 0x57ad8
int32_t function_57ad7(void) {
    // 0x57ad7
    return g4;
}

// Address range: 0x57b10 - 0x57b11
int32_t function_57b10(void) {
    // 0x57b10
    return g4;
}

// Address range: 0x57b38 - 0x57e69
int32_t function_57b38(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g5 - 0x39f68b40); // 0x57b38
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x57b3e
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g4 + 1; // 0x57b40
    g4 = v3;
    *(int32_t *)(g5 - 36) = v3;
    int32_t v4 = g5 - 108; // 0x57b46
    g7 = v4;
    function_2c6c0((int32_t *)v4, 0);
    int32_t v5 = g5 - 108; // 0x57b59
    g4 = v5;
    g4 = function_2c870((int32_t *)v5, 0);
    int32_t v6 = g5 - 108; // 0x57b6c
    g9 = v6;
    g4 = function_2c6d0((int32_t *)v6, 3);
    int32_t v7 = g5 - 96; // 0x57b7f
    g7 = v7;
    function_2c6c0((int32_t *)v7, 0);
    int32_t v8 = g5 - 96; // 0x57b92
    g4 = v8;
    g4 = function_2c870((int32_t *)v8, 0);
    int32_t v9 = g5 - 96; // 0x57ba5
    g9 = v9;
    g4 = function_2c6d0((int32_t *)v9, 3);
    int32_t v10 = g5 - 108; // 0x57bb8
    g7 = v10;
    g4 = function_2c890(v10, g6, 0);
    int32_t v11 = g5; // 0x57bcf
    int32_t v12 = *(int32_t *)(v11 - 36); // 0x57bcf
    g10 = v12;
    int32_t v13 = v11 - 96; // 0x57bd2
    g4 = v13;
    function_2c890(v13, v12, 0);
    int32_t v14 = *(int32_t *)&g291; // 0x57be9
    g4 = v14;
    g9 = v14;
    *(int32_t *)(g5 - 2708) = v14;
    int32_t v15; // 0x57d63
    int32_t v16; // 0x57d69
    int32_t v17; // 0x57d6d
    if (v14 < 1) {
        // 0x57b38
        v17 = g5;
        v16 = g6;
        goto lab_0x57d69;
    } else {
        // 0x57c04
        *(int32_t *)(g5 - 2704) = 0;
        int32_t v18 = g5; // 0x57c41
        while (true) {
            int32_t v19 = *(int32_t *)&g291; // 0x57c10
            g4 = v19;
            g6 = *(int32_t *)(v18 - 2704);
            g9 = v19;
            int32_t v20; // 0x57d4a
            if (v19 != 0) {
                // 0x57c2f
                g9 = v19;
                g6 = v19;
                int32_t v21 = v18 - 84; // 0x57c41
                g4 = v21;
                g4 = function_2c6c0((int32_t *)v21, 0);
                int32_t v22 = g5 - 84; // 0x57c4c
                g9 = v22;
                g4 = function_2c870((int32_t *)v22, 0);
                int32_t v23 = g5 - 84; // 0x57c5f
                g7 = v23;
                function_2c6d0((int32_t *)v23, 3);
                int32_t v24 = g5 - 72; // 0x57c72
                g4 = v24;
                g4 = function_2c6c0((int32_t *)v24, 0);
                int32_t v25 = g5 - 72; // 0x57c85
                g9 = v25;
                g4 = function_2c870((int32_t *)v25, 0);
                int32_t v26 = g5 - 72; // 0x57c98
                g7 = v26;
                g4 = function_2c6d0((int32_t *)v26, 3);
                int32_t v27 = function_27c00(g6, "server/adronline", (int32_t *)&g129); // 0x57cbe
                g4 = v27;
                g10 = v27;
                *(int32_t *)(g5 - 32) = v27;
                int32_t v28 = function_27c00(g6, "server/adrlocal", (int32_t *)&g129); // 0x57cdb
                g6 = v28;
                *(int32_t *)(g5 - 28) = v28;
                int32_t v29 = g5 - 84; // 0x57ce5
                g4 = v29;
                g4 = function_2c890(v29, g10, 0);
                int32_t v30 = g5 - 72; // 0x57cfc
                g9 = v30;
                g4 = function_2c890(v30, g6, 0);
                g8 = 0;
                int32_t v31 = 0; // 0x57d15
                while (true) {
                    // 0x57d15
                    g10 = 0;
                    int32_t v32 = g5; // 0x57d1a
                    int32_t v33 = 12 * v31 - 108 + v32; // 0x57d1a
                    g4 = v33;
                    *(int32_t *)(v32 - 2700) = v33;
                    while (true) {
                        int32_t v34 = *(int32_t *)(g5 - 2700); // 0x57d24
                        g6 = v34;
                        int32_t v35 = function_2c700(v34); // 0x57d2d
                        g4 = v35;
                        if (v35 != 0) {
                            int32_t v36 = g10; // 0x57e00
                            g4 = 3 * v36;
                            int32_t v37 = 12 * v36 - 84 + g5; // 0x57e03
                            g6 = v37;
                            int32_t v38 = function_2c700(v37); // 0x57e0a
                            g4 = v38;
                            if (0x1000000 * v38 != 0) {
                                int32_t v39 = g5; // 0x57e1b
                                g6 = *(int32_t *)(v39 - 2700);
                                if ((char)v38 != 0) {
                                    int32_t v40 = g8 ^ 1; // 0x57e39
                                    g8 = v40;
                                    int32_t v41 = v39 - 108 + 12 * v40; // 0x57e3f
                                    g4 = v41;
                                    int32_t v42 = function_2c700(v41); // 0x57e46
                                    g4 = v42;
                                    if (v42 != 0) {
                                        // 0x57e39
                                        v15 = g5;
                                        goto lab_0x57d63;
                                    } else {
                                        int32_t v43 = g10 ^ 1; // 0x57e53
                                        g10 = v43;
                                        int32_t v44 = g5; // 0x57e56
                                        int32_t v45 = *(int32_t *)(4 * v43 - 32 + v44); // 0x57e56
                                        g4 = v45;
                                        *(int32_t *)(v44 - 40 + 4 * g8) = v45;
                                        int32_t v46 = g5; // 0x57e5e
                                        g10 = *(int32_t *)(v46 - 36);
                                        int32_t v47 = *(int32_t *)(v46 - 40); // 0x57e61
                                        g6 = v47;
                                        v17 = v46;
                                        v16 = v47;
                                        goto lab_0x57d69;
                                    }
                                }
                            }
                        }
                        int32_t v48 = g10; // 0x57d3a
                        g10 = v48 + 1;
                        if (v48 == 1) {
                            // break -> 0x57d42
                            break;
                        }
                    }
                    int32_t v49 = g8; // 0x57d42
                    int32_t v50 = v49 + 1; // 0x57d42
                    g8 = v50;
                    if (v49 == 1) {
                        // break -> 0x57d4a
                        break;
                    }
                    v31 = v50;
                }
                // 0x57d4a
                v20 = g5;
            } else {
                v20 = v18;
            }
            int32_t * v51 = (int32_t *)(v20 - 2704); // 0x57d4a
            *v51 = *v51 + 1;
            int32_t v52 = g5; // 0x57d51
            int32_t v53 = *(int32_t *)(v52 - 2708); // 0x57d51
            g4 = v53;
            if (*(int32_t *)(v52 - 2704) == v53) {
                v15 = v52;
                // break -> 0x57d63
                break;
            }
            v18 = v52;
        }
        goto lab_0x57d63;
    }
  lab_0x57d69:
    // 0x57d69
    g6 = v17 - 2696;
    *(int32_t *)(v17 - 2184) = 0;
    function_2d970((int32_t *)g6, v16, (int32_t)"GNU");
    int32_t v54 = g5 - 2440; // 0x57d8d
    g4 = v54;
    g4 = function_2d970((int32_t *)v54, g10, (int32_t)"GNU");
    int32_t v55 = g6; // 0x57da7
    int32_t v56 = *(int32_t *)(g5 + 8); // 0x57dab
    g6 = v56;
    int32_t v57 = v56 + 24; // 0x57db7
    g4 = v57;
    g4 = function_58620(v57, *(int32_t *)(v56 + 36), (int32_t *)v55);
    int32_t * v58 = (int32_t *)(g5 - 2712); // 0x57dc2
    *v58 = *v58 + 1;
    int32_t v59 = g5; // 0x57dc9
    int32_t v60 = *(int32_t *)(v59 - 2712); // 0x57dc9
    g6 = v60;
    int32_t v61; // 0x57dd8
    if (*(int32_t *)(v59 - 120) > v60) {
        // bb
        g4 = function_57b10();
        v61 = g5;
    } else {
        v61 = v59;
    }
    // 0x57dd8
    g6 = *(int32_t *)(v61 + 8);
    function_57330();
    int32_t v62 = g5 - 132; // 0x57de3
    g4 = v62;
    int32_t result = function_669e0(v62); // 0x57dec
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
  lab_0x57d63:
    // 0x57d63
    g10 = *(int32_t *)(v15 - 36);
    int32_t v63 = *(int32_t *)(v15 - 40); // 0x57d66
    g6 = v63;
    v17 = v15;
    v16 = v63;
    goto lab_0x57d69;
}

// Address range: 0x57fe5 - 0x580b2
int32_t function_57fe5(void) {
    int32_t v1 = g5; // 0x57fe5
    g4 = *(int32_t *)(v1 - 48);
    *(char *)(v1 - 645) = 0;
    function_587a0(g8, g4, g6);
    int32_t v2 = *(int32_t *)&g273; // 0x57fff
    g4 = v2;
    g9 = v2;
    int32_t v3 = g5; // 0x5800c
    int32_t v4 = *(int32_t *)(v3 + 8); // 0x5800c
    g6 = v4;
    g9 = v2;
    g7 = *(int32_t *)(v4 + 44);
    *(int32_t *)(v3 - 2700) = v2;
    if (v2 == 0) {
        // bb
        g4 = function_5810b();
    }
    // 0x5802c
    g4 = (int32_t)"FCVAR_NEVER_AS_STRING";
    if ((g624 & 16) == 0) {
        // bb242
        g4 = function_58173();
    }
    // 0x5803e
    g4 = function_580fd();
    int32_t v5 = *(int32_t *)(g5 - 2700); // 0x58047
    g4 = v5;
    int32_t v6 = function_261f0(v5);
    while (true) {
        // 0x58068
        g4 = v6;
        g10 = v6;
        int32_t v7; // 0x5806c
        if (v6 == 0) {
            // bb243
            v7 = function_580fd();
            g4 = v7;
        } else {
            v7 = v6;
        }
        int32_t v8 = function_27c00(v7, NULL, (int32_t *)&g129); // 0x58085
        g4 = v8;
        g6 = v8;
        if (v8 != 0) {
            // 0x58090
            if (*(char *)v8 != 0) {
                // break -> 0x58095
                break;
            }
        }
        // 0x58060
        v6 = function_26220(g10);
    }
    int32_t result = function_25190(g10); // 0x58098
    g4 = result;
    g9 = g5 - 644;
    return result;
}

// Address range: 0x580de - 0x580fd
int32_t function_580de(void) {
    // 0x580de
    g4 = *(int32_t *)(g5 - 48);
    *(char *)(g5 - 133) = 0;
    int32_t result = function_587a0(g8, g4, g6); // 0x580f3
    g4 = result;
    return result;
}

// Address range: 0x580fd - 0x5810b
int32_t function_580fd(void) {
    int32_t v1 = *(int32_t *)(g5 - 2700); // 0x580fd
    g4 = v1;
    int32_t result = function_28600(v1); // 0x58106
    g4 = result;
    return result;
}

// Address range: 0x5810b - 0x58157
int32_t function_5810b(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x5810b
    g6 = v1;
    *(int32_t *)(v1 + 64) = 2;
    int32_t v2 = function_1bc00(12); // 0x5811c
    g4 = v2;
    g10 = v2;
    g4 = function_56f70(v2, g6, g8);
    int32_t result = *(int32_t *)(g5 - 52); // 0x58133
    g4 = result;
    *(int32_t *)(g6 + 20) = g10;
    int32_t * v3 = (int32_t *)(g6 + 16); // 0x58139
    *v3 = *v3 + 1;
    *(int32_t *)(g5 - 48) = 0;
    g9 = *(int32_t *)(g5 - 60);
    return result;
}

// Address range: 0x58173 - 0x58193
int32_t function_58173(void) {
    // 0x58173
    g4 = g625;
    g9 = (int32_t)&g129;
    int32_t v1 = *(int32_t *)(g625 + 36); // 0x5817d
    int32_t v2 = v1 == 0 ? (int32_t)&g129 : v1; // 0x58182
    g4 = v2;
    int32_t result; // 0x58188
    if (*(char *)v2 != 0) {
        // bb
        result = function_580fd();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x5818e
    return result;
}

// Address range: 0x58193 - 0x581aa
int32_t function_58193(void) {
    // 0x58193
    g4 = g626;
    g9 = (int32_t)&g129;
    int32_t v1 = *(int32_t *)(g626 + 36); // 0x5819d
    g4 = v1 == 0 ? (int32_t)&g129 : v1;
    int32_t result = function_57ad7(); // 0x581a5
    g4 = result;
    return result;
}

// Address range: 0x581ae - 0x581af
int32_t function_581ae(void) {
    // 0x581ae
    return g4;
}

// Address range: 0x581fe - 0x5820a
int32_t function_581fe(void) {
    // 0x581fe
    g6 = g4;
    int32_t result = function_1bc40(); // 0x58203
    g4 = result;
    return result;
}

// Address range: 0x5820a - 0x5821c
int32_t function_5820a(void) {
    // 0x5820a
    g6 = g4;
    int32_t v1 = g5 - 132; // 0x5820c
    g4 = v1;
    int32_t result = function_669e0(v1); // 0x58215
    g4 = result;
    return result;
}

// Address range: 0x58240 - 0x58241
int32_t function_58240(void) {
    // 0x58240
    return g4;
}

// Address range: 0x5825a - 0x58260
int32_t function_5825a(void) {
    // 0x5825a
    return g4;
}

// Address range: 0x58260 - 0x5828e
int32_t function_58260(int32_t a1, int32_t a2) {
    // 0x58260
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x58260
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x58263
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x58268
    int128_t v6 = __asm_addsd(v4, __asm_cvtps2pd(v5)); // 0x58270
    int128_t v7 = __asm_unpcklpd(v6, v6); // 0x58274
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_cvtpd2ps(v7));
    *(int32_t *)(v1 + 8) = g6;
    g6 = a1;
    int32_t result = function_57a90(); // 0x58289
    g4 = result;
    return result;
}

// Address range: 0x58294 - 0x5829a
int32_t function_58294(void) {
    // 0x58294
    return g4;
}

// Address range: 0x5829a - 0x582cc
int32_t function_5829a(int32_t a1, int32_t a2) {
    // 0x5829a
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x5829a
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x5829d
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x582a2
    *(int32_t *)(g6 + 64) = 1;
    int128_t v6 = __asm_addsd(v4, __asm_cvtps2pd(v5)); // 0x582b1
    *(char *)(g6 + 68) = 1;
    int128_t v7 = __asm_unpcklpd(v6, v6); // 0x582b9
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_cvtpd2ps(v7));
    g6 = a1;
    return g4;
}

// Address range: 0x582d0 - 0x58307
int32_t function_582d0(int32_t a1) {
    int32_t v1 = g6; // 0x582d6
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 64); // 0x582e2
    g4 = v2;
    int32_t v3; // 0x582e8
    if (v2 == 1) {
        // bb
        v3 = function_58368();
        g4 = v3;
    } else {
        v3 = v2;
    }
    int32_t result; // 0x582ea
    if (v2 <= 1) {
        // bb239
        result = function_583a0();
        g4 = result;
    } else {
        result = v3;
    }
    if (result == 2) {
        // 0x58310
        return result;
    }
    int32_t result2; // 0x582f8
    if (result == 3) {
        // bb242
        result2 = function_58350();
        g4 = result2;
    } else {
        result2 = result;
    }
    // 0x582fa
    g6 = v1;
    return result2;
}

// Address range: 0x58336 - 0x5834b
int32_t function_58336(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x758b085d); // 0x58336
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g8 = *(int32_t *)(v2 - 4);
    int32_t result = function_57330(); // 0x58346
    g4 = result;
    return result;
}

// Address range: 0x58350 - 0x58364
int32_t function_58350(void) {
    // 0x58350
    *(int32_t *)(g5 + 8) = g6;
    g10 = *(int32_t *)(g5 - 8);
    g6 = *(int32_t *)(g5 - 12);
    g8 = *(int32_t *)(g5 - 4);
    int32_t result = function_57a90(); // 0x5835f
    g4 = result;
    return result;
}

// Address range: 0x58368 - 0x58369
int32_t function_58368(void) {
    // 0x58368
    return g4;
}

// Address range: 0x58387 - 0x5839b
int32_t function_58387(void) {
    // 0x58387
    *(int32_t *)(g6 + 64) = 5;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x583a0 - 0x58489
int32_t function_583a0(void) {
    int32_t v1 = *(int32_t *)(g6 + 44); // 0x583b8
    g4 = v1;
    int32_t v2 = function_27c00(v1, "system/network", (int32_t *)&g129); // 0x583be
    g4 = v2;
    g10 = v2;
    int32_t v3 = *(int32_t *)(g6 + 44); // 0x583d5
    g4 = v3;
    int32_t v4 = function_27c00(v3, "options/server", (int32_t *)"listen"); // 0x583db
    g4 = v4;
    g8 = v4;
    int32_t v5 = *(int32_t *)(g6 + 44); // 0x583f2
    g4 = v5;
    int32_t v6 = function_27c00(v5, "server/server", NULL); // 0x583f8
    g4 = v6;
    if (v6 != 0) {
        // 0x58401
        *(int32_t *)(g5 + 8) = g6;
        int32_t v7 = g5; // 0x58404
        g10 = *(int32_t *)(v7 - 8);
        g6 = *(int32_t *)(v7 - 12);
        g8 = *(int32_t *)(v7 - 4);
        int32_t result = function_579d0((int32_t)&g870); // 0x58410
        g4 = result;
        return result;
    }
    // 0x58418
    g4 = g627;
    int32_t v8 = *(int32_t *)(g627 + 48); // 0x5841d
    g4 = v8;
    if (v8 == 0) {
        // bb
        g4 = function_58387();
    }
    int32_t v9 = function_2cc30((int32_t)"LIVE", (char *)g10); // 0x58433
    g4 = v9;
    if (v9 != 0) {
        // bb13
        g4 = function_58387();
    }
    int32_t v10 = function_2cc30((int32_t)"listen", (char *)g8); // 0x5844b
    g4 = v10;
    if (v10 == 0) {
        // bb14
        g4 = function_58387();
    }
    int32_t v11 = (int32_t)g450; // 0x58458
    g4 = v11;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if ((v11 & 2) != 0) {
        // bb15
        g4 = function_58387();
    }
    // 0x58475
    *(int32_t *)(g5 + 8) = g6;
    g10 = *(int32_t *)(g5 - 8);
    g6 = *(int32_t *)(g5 - 12);
    g8 = *(int32_t *)(g5 - 4);
    int32_t result2 = function_58240(); // 0x58484
    g4 = result2;
    return result2;
}

// Address range: 0x58490 - 0x58495
int32_t function_58490(void) {
    // 0x58490
    return g4;
}

// Address range: 0x584a0 - 0x584b7
int32_t function_584a0(int32_t a1) {
    // 0x584a0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x584aa
    g4 = v1;
    int32_t v2; // 0x584b1
    if (v1 < 0) {
        // bb
        g4 = function_584d6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x584b1
    g4 = v3;
    int32_t result; // 0x584b5
    if (v3 == 0) {
        // bb7
        result = function_584cf();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x584b7
    return result;
}

// Address range: 0x584cf - 0x584d6
int32_t function_584cf(void) {
    // 0x584cf
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x584d6 - 0x584dc
int32_t function_584d6(int32_t a1, int32_t a2) {
    // 0x584d6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x584e0 - 0x584fe
int32_t function_584e0(int32_t a1) {
    // 0x584e0
    g6 = a1;
    g9 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x584f4
    g4 = result;
    return result;
}

// Address range: 0x58550 - 0x585a0
int32_t function_58550(int32_t a1, int32_t a2) {
    // 0x58550
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x5855c
    int64_t v2 = v1; // 0x5855c
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x58563
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x58569
    g7 = v4;
    int32_t v5; // 0x58588
    if (v1 == 0) {
        // bb
        g4 = function_585d0();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x5856f
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x58577
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x5857c
    g4 = v8;
    int32_t v9; // 0x58599
    if (v5 > v8) {
        // 0x58583
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x58588
        int32_t v11 = v10 < 0; // 0x5858c
        int32_t v12 = (v11 + v10) / 2; // 0x58591
        while (v5 > v12) {
            // 0x58588
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x58597
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x58597
    int32_t v14 = *(int32_t *)v13; // 0x58597
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x5859e
    if (v14 == 0) {
        // bb21
        result = function_585ef();
        g4 = result;
    } else {
        // 0x58597
        result = g4;
    }
    // 0x585a0
    return result;
}

// Address range: 0x585d0 - 0x585ef
int32_t function_585d0(void) {
    int32_t v1 = g4; // 0x585d0
    g9 = 1;
    int32_t v2 = v1 == 0 ? 1 : v1; // 0x585d7
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x585e0
    while (g7 > v3) {
        // 0x585e0
        v3 *= 2;
    }
    // 0x585e6
    g4 = v3;
    int32_t v4 = g6; // 0x585e6
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x585ef - 0x585f0
int32_t function_585ef(void) {
    // 0x585ef
    return g4;
}

// Address range: 0x58620 - 0x586d1
int32_t function_58620(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g10; // 0x58626
    g10 = a1;
    int32_t v2 = g6; // 0x5862c
    g6 = a2;
    int32_t v3 = g8; // 0x58632
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x58635
    g9 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x58638
    g4 = v5;
    int32_t v6; // 0x586c9
    int32_t v7; // 0x586c9
    if (v4 >= v5) {
        int32_t v8 = v4 + 1 - v5; // 0x586be
        g9 = v8;
        g4 = function_58550(a1, v8);
        v6 = g10;
        v7 = *(int32_t *)(v6 + 12);
        g9 = v7;
    } else {
        v6 = a1;
        v7 = v4;
    }
    int32_t v9 = v7 + 1; // 0x5863f
    g9 = v9;
    g4 = *(int32_t *)v6;
    *(int32_t *)(v6 + 12) = v9;
    int32_t v10 = g9 - g6 - 1; // 0x58649
    g9 = v10;
    *(int32_t *)(g10 + 16) = g4;
    int32_t v11 = g6; // 0x586a8
    int32_t v12; // 0x58685
    int32_t v13; // 0x586ad
    if (v10 < 1) {
        // 0x586a8
        g9 = 512 * v11;
        v13 = 516 * v11;
        g8 = v13;
        v12 = g4;
    } else {
        int32_t v14 = 516 * v11; // 0x58658
        g8 = v14;
        int32_t v15 = g4; // 0x58667
        int32_t v16 = v11 + 1; // 0x5866e
        g7 = 512 * v16;
        int32_t v17 = 516 * v16; // 0x58676
        g9 = v17;
        int32_t v18 = v15 + v17; // 0x58679
        g4 = v18;
        g4 = function_2cb20(v18, v15 + v14, 516 * v10);
        int32_t v19 = *(int32_t *)g10; // 0x58683
        g4 = v19;
        v13 = g8;
        v12 = v19;
    }
    int32_t v20 = v12 + v13; // 0x58685
    g4 = v20;
    if (v20 != 0) {
        // 0x58689
        g10 = (int32_t)a3;
        g7 = 129;
        g8 = v20;
        __asm_rep_movsd_memcpy((char *)v20, (char *)a3, 129);
        int32_t v21 = (g3 ? -516 : 516) + v20; // 0x58693
        g8 = v21;
        g10 = v21;
        g7 = 0;
    }
    int32_t result = g6; // 0x58695
    g4 = result;
    g10 = v1;
    g6 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x586e0 - 0x58730
int32_t function_586e0(int32_t a1, int32_t a2) {
    // 0x586e0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x586eb
    int64_t v2 = v1; // 0x586eb
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x586f2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x586f8
    g7 = v4;
    int32_t v5; // 0x58718
    if (v1 == 0) {
        // bb
        g4 = function_58758();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x586fe
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x58706
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x5870b
    g4 = v8;
    int32_t v9; // 0x58729
    if (v5 > v8) {
        // 0x58712
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x58718
        int32_t v11 = v10 < 0; // 0x5871c
        int32_t v12 = (v11 + v10) / 2; // 0x58721
        while (v5 > v12) {
            // 0x58718
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x58727
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x58727
    int32_t v14 = *(int32_t *)v13; // 0x58727
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x5872e
    if (v14 == 0) {
        // bb20
        result = function_5877f();
        g4 = result;
    } else {
        // 0x58727
        result = g4;
    }
    // 0x58730
    return result;
}

// Address range: 0x58758 - 0x5877f
int32_t function_58758(void) {
    int32_t v1 = g4; // 0x58758
    g9 = 1;
    int32_t v2 = v1 == 0 ? 1 : v1; // 0x5875f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x58770
    while (g7 > v3) {
        // 0x58770
        v3 *= 2;
    }
    // 0x58776
    g4 = v3;
    int32_t v4 = g6; // 0x58776
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x5877f - 0x58780
int32_t function_5877f(void) {
    // 0x5877f
    return g4;
}

// Address range: 0x587a0 - 0x588b5
int32_t function_587a0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x587a3
    int32_t v2 = g10; // 0x587a4
    int32_t v3 = g6; // 0x587a5
    g10 = a1;
    g6 = a2;
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x587af
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x587b2
    g9 = v5;
    int32_t v6; // 0x587c2
    int32_t v7; // 0x58879
    int32_t v8; // 0x58879
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x5886e
        g4 = v9;
        g4 = function_586e0(a1, v9);
        v7 = g10;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g6;
    } else {
        v6 = a2;
        v7 = a1;
        v8 = v4;
    }
    int32_t v10 = v8 + 1; // 0x587bd
    g9 = v10;
    g4 = *(int32_t *)v7;
    g8 = v6;
    *(int32_t *)(v7 + 12) = v10;
    g8 *= 512;
    int32_t v11 = g9 - g6 - 1; // 0x587cc
    g9 = v11;
    *(int32_t *)(g10 + 16) = g4;
    int32_t v12; // 0x587f6
    if (v11 < 1) {
        // 0x587bd
        v12 = g4;
    } else {
        int32_t v13 = g4; // 0x587dd
        int32_t v14 = 512 * g6 + 512; // 0x587e7
        g9 = v14;
        int32_t v15 = v14 + v13; // 0x587ea
        g4 = v15;
        g4 = function_2cb20(v15, g8 + v13, 512 * v11);
        int32_t v16 = *(int32_t *)g10; // 0x587f4
        g4 = v16;
        v12 = v16;
    }
    int32_t v17 = g8 + v12; // 0x587f6
    g8 = v17;
    int32_t v18; // 0x58838
    int32_t v19; // 0x5883c
    int32_t v20; // 0x5883c
    if (v17 == 0) {
        goto lab_0x58827;
    } else {
        // 0x587fa
        g10 = a3;
        g4 = &g64;
        int32_t v21; // 0x5888b
        int32_t v22; // 0x588a8
        if (v17 % 2 != 0) {
            // 0x588a0
            g10 = a3 + 1;
            *(char *)v17 = *(char *)a3;
            v22 = g8 + 1;
            g8 = v22;
            g4 = &g61;
            v21 = &g61;
        } else {
            v22 = v17;
            v21 = &g64;
        }
        // 0x5880e
        int32_t v23; // 0x5881d
        int32_t v24; // 0x58894
        if ((v22 & 2) != 0) {
            int32_t v25 = g10; // 0x58888
            uint16_t v26 = *(int16_t *)v25; // 0x58888
            g9 = v26;
            g4 = v21 - 2;
            g10 = v25 + 2;
            *(int16_t *)v22 = v26;
            v24 = g8 + 2;
            g8 = v24;
            v23 = g4;
        } else {
            v24 = v22;
            v23 = v21;
        }
        // 0x58816
        g9 = 0;
        int32_t v27 = v23 / 4; // 0x5881a
        g7 = v27;
        __asm_rep_movsd_memcpy((char *)v24, (char *)g10, v27);
        int32_t v28 = (g3 ? -4 : 4) * v27 + v24; // 0x5881f
        g8 = v28;
        g10 = v28;
        g7 = 0;
        uint32_t v29 = g4; // 0x58853
        if ((v23 & 2) != 0) {
            // 0x58850
            g9 = 2;
            if (v29 % 2 == 0) {
                goto lab_0x58827;
            } else {
                // 0x58850
                v19 = g8;
                v18 = g10;
                v20 = 2;
                goto lab_0x58838;
            }
        } else {
            if (v29 % 2 != 0) {
                // 0x58823
                v19 = v28;
                v18 = v28;
                v20 = g9;
                goto lab_0x58838;
            } else {
                goto lab_0x58827;
            }
        }
    }
  lab_0x58827:;
    int32_t result = g6; // 0x5882a
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x58838:
    // 0x58838
    *(char *)(v20 + v19) = *(char *)(v18 + v20);
    int32_t result2 = g6; // 0x58842
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x588c0 - 0x5896d
int32_t function_588c0(int32_t a1) {
    // 0x588c0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g215;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(char *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(char *)(g4 + 40) = 0;
    *(int32_t *)(g4 + 36) = (int32_t)&g216;
    *(int32_t *)(g4 + 48) = 0;
    *(int32_t *)(g4 + 52) = 0;
    *(int32_t *)(g4 + 56) = 0;
    *(int32_t *)(g4 + 60) = 0;
    *(int32_t *)(g4 + 64) = 0;
    *(int32_t *)(g4 + 44) = (int32_t)&g99;
    *(char *)(g4 + 72) = 0;
    *(int32_t *)(g4 + 68) = (int32_t)&g217;
    *(int32_t *)(g4 + 80) = 0;
    *(int32_t *)(g4 + 84) = 0;
    *(int32_t *)(g4 + 88) = 0;
    *(int32_t *)(g4 + 92) = 0;
    *(int32_t *)(g4 + 96) = 0;
    *(int32_t *)(g4 + 76) = (int32_t)&g100;
    return g4;
}

// Address range: 0x58970 - 0x5897b
int32_t function_58970(int32_t a1) {
    // 0x58970
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 28); // 0x58977
    g4 = result;
    return result;
}

// Address range: 0x58980 - 0x589d5
int32_t function_58980(int32_t a1, int32_t a2) {
    // 0x58980
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 32); // 0x5898a
    g4 = v1;
    int32_t v2; // 0x58999
    if (v1 != 0) {
        // 0x58991
        g4 = function_28600(v1);
        v2 = g6;
    } else {
        v2 = a1;
    }
    // 0x58999
    *(int32_t *)(v2 + 32) = 0;
    int32_t v3 = g6; // 0x589a0
    int32_t v4 = *(int32_t *)(v3 + 16); // 0x589a0
    g4 = v4;
    int32_t v5;
    if (v4 != 0) {
        int32_t v6 = v3; // 0x589a811
        while (true) {
            int32_t v7 = *(int32_t *)(v6 + 4); // 0x589a8
            g4 = v7;
            int32_t v8 = *(int32_t *)v7; // 0x589ab
            g4 = v8;
            g4 = function_28600(v8);
            int32_t v9 = g6; // 0x589b5
            int32_t v10 = *(int32_t *)(v9 + 16); // 0x589b5
            g4 = v10;
            int32_t v11; // 0x589a8
            int32_t v12; // 0x589ba
            if (v10 >= 0 == (v10 != 0)) {
                // bb
                v12 = function_58a20();
                g4 = v12;
                v11 = g6;
            } else {
                v11 = v9;
                v12 = v10;
            }
            if (v12 == 0) {
                v5 = v11;
                // break -> 0x589c0
                break;
            }
            v6 = v11;
        }
    } else {
        v5 = v3;
    }
    // 0x589c0
    g4 = *(int32_t *)(v5 + 12);
    *(int32_t *)(v5 + 16) = 0;
    int32_t result = *(int32_t *)(g6 + 4); // 0x589cc
    g4 = result;
    return result;
}

// Address range: 0x58a20 - 0x58a41
int32_t function_58a20(void) {
    int32_t v1 = g4; // 0x58a20
    g9 = 1;
    int32_t v2 = g6;
    int32_t v3; // 0x58a33
    int32_t v4; // 0x58a36
    if (v1 != 1) {
        int32_t v5 = *(int32_t *)(v2 + 4); // 0x58a2a
        g9 = v5;
        int32_t v6 = *(int32_t *)(4 * v1 - 4 + v5); // 0x58a2d
        g4 = v6;
        *(int32_t *)v5 = v6;
        v3 = g6;
        int32_t v7 = *(int32_t *)(v3 + 16); // 0x58a33
        g9 = v7;
        v4 = v7 - 1;
    } else {
        v3 = v2;
        v4 = 0;
    }
    // 0x58a36
    g4 = v4;
    *(int32_t *)(v3 + 16) = v4;
    return g4;
}

// Address range: 0x58a50 - 0x58a8f
int32_t function_58a50(int32_t a1) {
    int32_t v1 = g6; // 0x58a55
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 28); // 0x58a5c
    g4 = v2;
    int32_t v3; // 0x58a70
    if (v2 != 0) {
        // 0x58a63
        g4 = function_28600(v2);
        v3 = g6;
    } else {
        v3 = a1;
    }
    // 0x58a6b
    g4 = g601;
    *(int32_t *)(v3 + 28) = 0;
    if (g601 == 0) {
        // 0x58a88
        return 0;
    }
    // 0x58a7b
    g6 = v1;
    return g601;
}

// Address range: 0x58aaa - 0x58aab
int32_t function_58aaa(void) {
    // 0x58aaa
    return g4;
}

// Address range: 0x58aae - 0x58ab4
int32_t function_58aae(void) {
    // 0x58aae
    return g4;
}

// Address range: 0x58adf - 0x58ae0
int32_t function_58adf(void) {
    // 0x58adf
    return g4;
}

// Address range: 0x58b01 - 0x58b29
int32_t function_58b01(void) {
    int32_t v1 = g4; // 0x58b01
    unsigned char v2 = (char)(v1 & (int32_t)&g862) & -124; // 0x58b04
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x58b04
    g4 = v3;
    char * v4 = (char *)v3; // 0x58b0d
    *v4 = *v4 + v2;
    int32_t v5 = g7; // 0x58b0f
    char * v6 = (char *)(v5 - 0x38f7db8c); // 0x58b0f
    *v6 = *v6 + (char)v5;
    g4 &= -252;
    int32_t v7 = g7; // 0x58b1b
    char * v8 = (char *)(v7 - 0x317dbfc); // 0x58b1b
    *v8 = *v8 + (char)v7;
    int32_t result = __asm_in_1659((int16_t)g9); // 0x58b21
    g4 = result;
    return result;
}

// Address range: 0x58b49 - 0x58b4a
int32_t function_58b49(void) {
    // 0x58b49
    return g4;
}

// Address range: 0x58b67 - 0x58b68
int32_t function_58b67(void) {
    // 0x58b67
    return g4;
}

// Address range: 0x58ba6 - 0x58ba8
int32_t function_58ba6(void) {
    int32_t result = function_58b67(); // 0x58ba6
    g4 = result;
    return result;
}

// Address range: 0x58bb0 - 0x58bb7
int32_t function_58bb0(void) {
    // 0x58bb0
    g4 = 0;
    int32_t result = function_58adf(); // 0x58bb2
    g4 = result;
    return result;
}

// Address range: 0x58bd3 - 0x58bd8
int32_t function_58bd3(void) {
    int32_t result = function_58b49(); // 0x58bd3
    g4 = result;
    return result;
}

// Address range: 0x58bf0 - 0x58c05
int32_t function_58bf0(void) {
    int32_t v1 = g8; // 0x58bf0
    int32_t v2; // 0x58bf8
    if (v1 == 0) {
        // bb
        g4 = function_58aaa();
        v2 = g8;
    } else {
        v2 = v1;
    }
    // 0x58bf8
    g4 = function_28600(v2);
    int32_t result = function_58aaa(); // 0x58c00
    g4 = result;
    return result;
}

// Address range: 0x58c05 - 0x58c56
int32_t function_58c05(int32_t result) {
    int32_t v1 = g8; // 0x58c05
    int32_t v2 = g4; // 0x58c07
    g6 = v2;
    int32_t v3; // 0x58c13
    if (v1 != 0) {
        // 0x58c0b
        g4 = function_28600(v1);
        v3 = g6;
    } else {
        v3 = v2;
    }
    // 0x58c13
    function_7ab57(v3, (int32_t)&g870);
    int32_t v4 = g5; // 0x58c20
    g4 = result;
    if (*(char *)(result + 24) != 0) {
        // 0x58c3a
        return result;
    }
    int32_t v5 = *(int32_t *)(result + 16); // 0x58c2c
    g7 = v5;
    if (v5 != 0) {
        // 0x58c50
        g5 = v4;
        int32_t result2 = function_58a50(v4); // 0x58c51
        g4 = result2;
        return result2;
    }
    int32_t v6 = *(int32_t *)(result + 8); // 0x58c33
    g9 = v6;
    if (v6 == 0) {
        // 0x58c3a
        return result;
    }
    // 0x58c40
    g5 = v4;
    int32_t result3 = function_58980(v4, result); // 0x58c44
    g4 = result3;
    return result3;
}

// Address range: 0x58c60 - 0x58c65
int32_t function_58c60(void) {
    // 0x58c60
    return g4;
}

// Address range: 0x58c70 - 0x58c71
int32_t function_58c70(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t * a5, int32_t a6, int32_t a7) {
    // 0x58c70
    return g4;
}

// Address range: 0x58ce0 - 0x58ce1
int32_t function_58ce0(void) {
    // 0x58ce0
    return g4;
}

// Address range: 0x58d3b - 0x58d3f
int32_t function_58d3b(void) {
    int32_t result = g4 & -24; // 0x58d3b
    g4 = result;
    return result;
}

// Address range: 0x58d8c - 0x58d98
int32_t function_58d8c(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g38); // 0x58d8c
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x58d92
    char * v3 = (char *)(v2 + 94); // 0x58d92
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x58da0 - 0x58dd0
int32_t function_58da0(void) {
    int32_t v1 = function_26cf0(); // 0x58da7
    g4 = v1;
    *(int32_t *)(g5 - 304) = v1;
    g4 = function_26330(g4);
    int32_t v2 = *(int32_t *)(g5 - 304); // 0x58dc2
    g4 = v2;
    *(int32_t *)(g10 + 28) = v2;
    int32_t result = function_58ce0(); // 0x58dcb
    g4 = result;
    return result;
}

// Address range: 0x58ddb - 0x58de7
int32_t function_58ddb(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g38); // 0x58ddb
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x58de1
    char * v3 = (char *)(v2 + 94); // 0x58de1
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x58de8 - 0x58de9
int32_t function_58de8(void) {
    // 0x58de8
    return g4;
}

// Address range: 0x58e00 - 0x58e01
int32_t function_58e00(void) {
    // 0x58e00
    return g4;
}

// Address range: 0x58e1e - 0x58ed5
int32_t function_58e1e(int32_t a1, int32_t a2, int32_t a3) {
    // 0x58e1e
    *(int32_t *)(g5 - 16) = (int32_t)&g132;
    *(int32_t *)(g5 - 12) = 1;
    int32_t result = (int32_t)g290; // 0x58e46
    g4 = result;
    g9 = result;
    g6 = result;
    if (g290 == NULL) {
        // 0x58e6e
        g6 = a1;
        g10 = a2;
        return result;
    }
    // 0x58e61
    g7 = result;
    int32_t v1 = g5 - 284; // 0x58e84
    g4 = v1;
    function_1e010(v1, "%llx");
    int32_t v2 = g5 - 279; // 0x58e9e
    g4 = v2;
    int32_t v3 = *(int32_t *)(g10 + 28); // 0x58eb0
    g4 = v3;
    int32_t v4 = function_27340(v3, v2, 0); // 0x58eb6
    g4 = v4;
    if (v4 == 0) {
        // 0x58e6e
        g6 = a1;
        g10 = a2;
        return 0;
    }
    int32_t result2 = function_46c10(g6, v4); // 0x58ec6
    g4 = result2;
    g6 = a1;
    g10 = a2;
    return result2;
}

// Address range: 0x58ee0 - 0x58f82
int32_t function_58ee0(int32_t a1, int32_t a2, char a3) {
    int32_t v1 = g6; // 0x58eee
    g7 = a2;
    g6 = a1;
    int32_t v2 = g10; // 0x58ef7
    int32_t v3 = 0; // bp-56
    int32_t v4 = g8; // 0x58f0c
    if (a3 == 0) {
        // 0x58f11
        if (*(int32_t *)(a2 + 16) == 1) {
            // 0x58f30
            g4 = g292;
            int32_t v5 = &v3; // 0x58f35
            g10 = v5;
            int32_t v6 = *(int32_t *)(g292 + 20); // 0x58f38
            g4 = v6;
            g9 = *(int32_t *)v6;
            g10 = *(int32_t *)(a2 + 8);
            int32_t v7 = *(int32_t *)(a2 + 12); // 0x58f5c
            g8 = v7;
            if ((char)v6 != 0) {
                // 0x58f71
                g8 = v5;
                g4 = function_58c70(a1, &v3, v7, 0, &v3, 0, 0);
            }
        }
    }
    int32_t result = function_58e00(); // 0x58f1a
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v4;
    return result;
}

// Address range: 0x58fbc - 0x58fd1
int32_t function_58fbc(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x758b085d); // 0x58fbc
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 12);
    g8 = *(int32_t *)(v2 - 4);
    int32_t result = function_58e00(); // 0x58fcc
    g4 = result;
    return result;
}

// Address range: 0x58fd8 - 0x59060
int32_t function_58fd8(void) {
    // 0x58fd8
    g4 = g292;
    int32_t v1 = *(int32_t *)(g292 + 20); // 0x58fdd
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x58fe0
    g9 = v2;
    int32_t v3 = g7; // 0x58ffa
    g10 = v3;
    g8 = *(int32_t *)(v3 + 4);
    int32_t v4 = g6; // 0x5900d
    int32_t v5 = *(int32_t *)(v4 + 84); // 0x5900d
    g7 = v5;
    int32_t v6 = *(int32_t *)(v4 + 80); // 0x59010
    g10 = v6;
    int32_t v7 = v6 | v5; // 0x59015
    g8 = v7;
    int32_t v8; // 0x59019
    int32_t v9; // 0x5901b
    int32_t v10; // 0x59017
    if (v7 != 0) {
        // bb
        v10 = function_59068();
        g4 = v10;
        v9 = g6;
        v8 = g9;
    } else {
        v9 = v4;
        v10 = v1;
        v8 = v2;
    }
    // 0x59019
    g7 = v8;
    *(int32_t *)(v9 + 80) = v10;
    int32_t v11 = g4 | g7; // 0x5901e
    g7 = v11;
    *(int32_t *)(g6 + 84) = g9;
    int32_t v12 = g6; // 0x59023
    *(int32_t *)(v12 + 88) = v12;
    *(int32_t *)(g6 + 92) = 0x58ee0;
    *(int32_t *)(g6 + 96) = 0;
    if (v11 == 0) {
        // 0x59036
        g6 = *(int32_t *)(g5 - 12);
        g10 = *(int32_t *)(g5 - 8);
        g8 = *(int32_t *)(g5 - 4);
        return g4;
    }
    // 0x59048
    g6 += 68;
    *(int32_t *)(g5 + 12) = g4;
    g10 = *(int32_t *)(g5 - 8);
    *(int32_t *)(g5 + 8) = g6;
    g8 = *(int32_t *)(g5 - 4);
    *(int32_t *)(g5 + 16) = g9;
    g6 = *(int32_t *)(g5 - 12);
    return g4;
}

// Address range: 0x59068 - 0x5907c
int32_t function_59068(void) {
    // 0x59068
    g7 = g6 + 68;
    *(int32_t *)(g5 - 28) = g4;
    *(int32_t *)(g5 - 32) = g9;
    return g4;
}

// Address range: 0x59081 - 0x59089
int32_t function_59081(void) {
    // 0x59081
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 32);
    int32_t result = *(int32_t *)(v1 - 28); // 0x59084
    g4 = result;
    return result;
}

// Address range: 0x590c0 - 0x590c1
int32_t function_590c0(int32_t a1) {
    // 0x590c0
    return g4;
}

// Address range: 0x59152 - 0x59166
int32_t function_59152(void) {
    // 0x59152
    g8++;
    g6++;
    int32_t v1 = g4; // 0x59155
    *(char *)v1 = 2 * (char)v1;
    int32_t v2 = g4; // 0x59158
    *(char *)v2 = (char)v2 + *(char *)&g4;
    *(int32_t *)(g6 + 84) = 0;
    int32_t result = function_590c0(v1); // 0x59161
    g4 = result;
    return result;
}

// Address range: 0x59168 - 0x59169
int32_t function_59168(int32_t a1) {
    // 0x59168
    return g4;
}

// Address range: 0x5919c - 0x591b0
int32_t function_5919c(void) {
    // 0x5919c
    *(int32_t *)(g6 + 16) = 0;
    g9 = *(int32_t *)(g6 + 4);
    return g4;
}

// Address range: 0x5922c - 0x59240
int32_t function_5922c(void) {
    // 0x5922c
    g8++;
    g6++;
    int32_t v1 = g4; // 0x5922f
    *(char *)v1 = 2 * (char)v1;
    int32_t v2 = g4; // 0x59232
    *(char *)v2 = (char)v2 + *(char *)&g4;
    *(int32_t *)(g6 + 84) = 0;
    int32_t result = function_59168(v1); // 0x5923b
    g4 = result;
    return result;
}

// Address range: 0x59241 - 0x59242
int32_t function_59241(void) {
    // 0x59241
    return g4;
}

// Address range: 0x59271 - 0x592c5
int32_t function_59271(void) {
    // 0x59271
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x45c7ec45); // 0x59271
    *v2 = *v2 - 1;
    __asm_in_1653((int16_t)g9);
    g4 = -0x38fff80c;
    g5 = v1 + 1;
    *(int32_t *)-0x38fff80c = *(int32_t *)-0x38fff80c - 0x38fff80c;
    int32_t v3 = g4; // 0x59281
    char * v4 = (char *)v3; // 0x59281
    *v4 = *v4 + (char)v3;
    int32_t v5 = function_26d60(g6); // 0x5929a
    *(int32_t *)(g5 - 12) = v5;
    int32_t v6 = g5 - 12; // 0x592a2
    g4 = v6;
    int32_t v7 = g10; // 0x592a9
    int32_t v8 = *(int32_t *)(v7 + 16); // 0x592a9
    g4 = v8;
    int32_t v9 = v7 + 4; // 0x592ac
    g10 = v9;
    int32_t result = function_2bdb0(v9, v8, v6); // 0x592b6
    g4 = result;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x592d0 - 0x59319
int32_t function_592d0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x592d3
    g4 = a1;
    g9 = *(int32_t *)(a1 + 24);
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v2 = g4; // 0x592eb
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x592eb
    g7 = v3;
    int32_t v4 = *(int32_t *)(v2 + 28); // 0x592ee
    g4 = v4;
    uint32_t v5 = g9; // 0x592f1
    int32_t result = v4 + v3;
    if (v5 % 2 != 0) {
        int32_t v6 = *(int32_t *)result; // 0x592f6
        g6 = v6;
        g9 = *(int32_t *)(v5 - 1 + v6);
    }
    // 0x592fd
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x59320 - 0x5932a
int32_t function_59320(void) {
    // 0x59320
    g4 = 20;
    return 20;
}

// Address range: 0x59330 - 0x59379
int32_t function_59330(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x59333
    g4 = a1;
    g9 = *(int32_t *)(a1 + 24);
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v2 = g4; // 0x5934b
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x5934b
    g7 = v3;
    int32_t v4 = *(int32_t *)(v2 + 28); // 0x5934e
    g4 = v4;
    uint32_t v5 = g9; // 0x59351
    int32_t result = v4 + v3;
    if (v5 % 2 != 0) {
        int32_t v6 = *(int32_t *)result; // 0x59356
        g6 = v6;
        g9 = *(int32_t *)(v5 - 1 + v6);
    }
    // 0x5935d
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x59380 - 0x5938a
int32_t function_59380(void) {
    // 0x59380
    g4 = 12;
    return 12;
}

// Address range: 0x59390 - 0x59412
int32_t function_59390(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5) {
    // 0x59390
    g4 = result;
    int32_t v1 = g6; // 0x59399
    g9 = a4;
    int32_t v2 = g10; // 0x5939f
    g7 = a5;
    int32_t v3 = g8; // 0x593a5
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(result + 12); // 0x593af
    int32_t v5 = *v4 ^ a4; // 0x593af
    g9 = v5;
    int32_t v6 = *(int32_t *)(result + 16) ^ a5 | v5; // 0x593b5
    g7 = v6;
    if (v6 != 0) {
        // 0x593b9
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x593d0
    g9 = *(int32_t *)(result + 24);
    *v4 = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v7 = g4; // 0x593e1
    int32_t v8 = *(int32_t *)(v7 + 20); // 0x593e1
    g7 = v8;
    int32_t v9 = *(int32_t *)(v7 + 28); // 0x593e4
    g4 = v9;
    uint32_t v10 = g9; // 0x593e7
    int32_t result2 = v9 + v8;
    if (v10 % 2 != 0) {
        int32_t v11 = *(int32_t *)result2; // 0x593ec
        g8 = v11;
        g9 = *(int32_t *)(v10 - 1 + v11);
    }
    // 0x593f3
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x59420 - 0x594a2
int32_t function_59420(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5) {
    // 0x59420
    g4 = result;
    int32_t v1 = g6; // 0x59429
    g9 = a4;
    int32_t v2 = g10; // 0x5942f
    g7 = a5;
    int32_t v3 = g8; // 0x59435
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(result + 12); // 0x5943f
    int32_t v5 = *v4 ^ a4; // 0x5943f
    g9 = v5;
    int32_t v6 = *(int32_t *)(result + 16) ^ a5 | v5; // 0x59445
    g7 = v6;
    if (v6 != 0) {
        // 0x59449
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x59460
    g9 = *(int32_t *)(result + 24);
    *v4 = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v7 = g4; // 0x59471
    int32_t v8 = *(int32_t *)(v7 + 20); // 0x59471
    g7 = v8;
    int32_t v9 = *(int32_t *)(v7 + 28); // 0x59474
    g4 = v9;
    uint32_t v10 = g9; // 0x59477
    int32_t result2 = v9 + v8;
    if (v10 % 2 != 0) {
        int32_t v11 = *(int32_t *)result2; // 0x5947c
        g8 = v11;
        g9 = *(int32_t *)(v10 - 1 + v11);
    }
    // 0x59483
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x594b0 - 0x594e6
int32_t function_594b0(int32_t a1) {
    // 0x594b0
    g4 = a1;
    *(int32_t *)a1 = g629;
    *(int32_t *)(g4 + 4) = g630;
    *(int32_t *)(g4 + 8) = g631;
    *(int32_t *)(g4 + 12) = g632;
    g9 = g633;
    *(int32_t *)(g4 + 16) = g633;
    return g4;
}

// Address range: 0x594f0 - 0x594fe
int32_t function_594f0(int32_t a1) {
    // 0x594f0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g218;
    return g4;
}

// Address range: 0x59500 - 0x5950a
int32_t function_59500(void) {
    int32_t result = (int32_t)g290; // 0x59501
    g4 = result;
    return result;
}

// Address range: 0x59510 - 0x5951a
int32_t function_59510(void) {
    int32_t result = *(int32_t *)&g298; // 0x59511
    g4 = result;
    return result;
}

// Address range: 0x59520 - 0x5952a
int32_t function_59520(void) {
    int32_t result = *(int32_t *)&g291; // 0x59521
    g4 = result;
    return result;
}

// Address range: 0x59530 - 0x5953a
int32_t function_59530(void) {
    // 0x59530
    g4 = g293;
    return g293;
}

// Address range: 0x59540 - 0x5954a
int32_t function_59540(void) {
    int32_t result = *(int32_t *)&g296; // 0x59541
    g4 = result;
    return result;
}

// Address range: 0x59550 - 0x5957c
int32_t function_59550(int32_t a1) {
    int32_t v1 = g6; // 0x59553
    int32_t v2 = function_1bc00(44); // 0x5955e
    g6 = v2;
    g4 = a1;
    function_5d060(v2, a1);
    int32_t result = g6; // 0x59577
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x5957c - 0x595c7
int32_t function_5957c(void) {
    // 0x5957c
    int32_t v1; // ebp
    *(int32_t *)(v1 - 12) = g4;
    g4 = function_1bc40();
    int32_t v2 = *(int32_t *)(g5 - 12); // 0x59587
    g4 = v2;
    function_7ab57(v2, (int32_t)&g870);
    int32_t v3;
    int32_t v4 = &v3; // 0x595a3
    g4 = v4;
    int32_t v5; // bp+12
    int32_t v6 = &v5; // 0x595a6
    g9 = v6;
    while (true) {
        // 0x595b0
        if (*(char *)v4 != 0) {
            // break -> 0x595c0
            break;
        }
        int32_t v7 = v4 + 1; // 0x595b5
        g4 = v7;
        if (v7 == v6) {
            // 0x595bc
            g4 = 0;
            return 0;
        }
        v4 = v7;
    }
    // 0x595c0
    g4 = 1;
    return 1;
}

// Address range: 0x595d0 - 0x595de
int32_t function_595d0(int32_t a1) {
    // 0x595d0
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g218;
    return g4;
}

// Address range: 0x595e0 - 0x5964a
int32_t function_595e0(int32_t a1) {
    int32_t v1 = (int32_t)g290; // 0x595e6
    g4 = v1;
    if (g290 != NULL) {
        // 0x595ef
        g4 = function_4b440(v1);
    }
    int32_t v2 = *(int32_t *)&g291; // 0x595f7
    g4 = v2;
    if (v2 != 0) {
        // 0x59600
        g4 = function_4de50(v2);
    }
    // 0x59608
    function_5cd50();
    int32_t v3 = *(int32_t *)&g294; // 0x5960d
    g4 = v3;
    if (v3 != 0) {
        // 0x59616
        g9 = v3;
    }
    // 0x5961e
    g4 = g293;
    if (g293 != 0) {
        // 0x59627
        g4 = function_568b0(g293);
    }
    int32_t v4 = *(int32_t *)&g296; // 0x5962f
    g4 = v4;
    if (v4 == 0) {
        // 0x59648
        return 0;
    }
    int32_t result = function_5af40(v4); // 0x5963c
    g4 = result;
    return result;
}

// Address range: 0x59650 - 0x5965b
int32_t function_59650(int32_t a1) {
    // 0x59650
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 36); // 0x59657
    g4 = result;
    return result;
}

// Address range: 0x59660 - 0x5967a
int32_t function_59660(int32_t a1) {
    // 0x59660
    g4 = a1;
    if (a1 == 0) {
        // 0x59678
        return 0;
    }
    int32_t v1 = *(int32_t *)a1; // 0x5966a
    g9 = v1;
    int32_t result = *(int32_t *)(v1 + 4); // 0x5966d
    g4 = result;
    return result;
}

// Address range: 0x59680 - 0x59693
int32_t function_59680(void) {
    // 0x59680
    g4 = g297;
    g9 = g297;
    int32_t result = *(int32_t *)(g297 + 8); // 0x5968e
    g4 = result;
    return result;
}

// Address range: 0x596a0 - 0x596af
int32_t function_596a0(int32_t a1) {
    // 0x596a0
    g4 = a1;
    *(int32_t *)(a1 + 56) = 2;
    return g4;
}

// Address range: 0x596b0 - 0x596bf
int32_t function_596b0(int32_t a1) {
    // 0x596b0
    g4 = a1;
    int32_t result = (int32_t)(*(int32_t *)(a1 + 56) == 2) | a1 & -256; // 0x596bb
    g4 = result;
    return result;
}

// Address range: 0x596c0 - 0x596e3
int32_t function_596c0(int32_t a1) {
    int32_t v1 = g6; // 0x596c3
    g6 = a1;
    int32_t v2 = *(int32_t *)a1; // 0x596ca
    g4 = v2;
    g9 = 0;
    int32_t result; // 0x596d8
    if ((char)v2 != 0) {
        // 0x596d8
        result = *(int32_t *)(a1 + 92);
        g9 = result;
    } else {
        result = 0;
    }
    // 0x596db
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x596f0 - 0x59731
int32_t function_596f0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x596f6
    g6 = a1;
    int32_t v2 = g10; // 0x596fc
    g10 = a2;
    int32_t v3 = *(int32_t *)a1; // 0x59702
    g4 = v3;
    g9 = &g651;
    int32_t result; // 0x59728
    if ((char)v3 == 0) {
        result = &g651;
        // 0x59725
        g6 = v1;
        g4 = result;
        g10 = v2;
        return result;
    }
    if (a2 < 0) {
        result = &g651;
        // 0x59725
        g6 = v1;
        g4 = result;
        g10 = v2;
        return result;
    }
    // 0x59717
    if (*(int32_t *)(a1 + 92) > a2) {
        int32_t v4 = *(int32_t *)(a1 + 80); // 0x5971c
        g4 = v4;
        int32_t v5 = v4 + 12 * a2; // 0x59722
        g9 = v5;
        result = v5;
    } else {
        result = &g651;
    }
    // 0x59725
    g6 = v1;
    g4 = result;
    g10 = v2;
    return result;
}

// Address range: 0x59740 - 0x597d3
int32_t function_59740(int32_t a1, int32_t a2) {
    // 0x59740
    g4 = g650;
    int32_t v1 = g6; // 0x5974b
    int32_t v2 = g10; // 0x5974e
    g6 = a1;
    g10 = a2;
    uint32_t v3 = *(int32_t *)(g650 + 48); // 0x59757
    g9 = v3;
    if (*(int32_t *)(a1 + 92) >= v3) {
        int32_t v4 = *(int32_t *)a1; // 0x597b0
        g4 = v4;
        g10 = v2;
        g6 = v1;
        int32_t result = *(int32_t *)(v4 + 32); // 0x597b8
        g4 = result;
        return result;
    }
    // 0x5975f
    g4 = function_27340(a2, (int32_t)"nextpass?", 0);
    int32_t v5 = function_27340(g10, (int32_t)"nextpass", 0); // 0x5978a
    g4 = v5;
    int32_t v6 = *(int32_t *)g6; // 0x597c0
    if (v5 == 0) {
        // 0x597c0
        g4 = v6;
        g10 = v2;
        g6 = v1;
        int32_t result2 = *(int32_t *)(v6 + 32); // 0x597cb
        g4 = result2;
        return result2;
    }
    // 0x59793
    g9 = v6;
    g6 = v1;
    g10 = v2;
    int32_t result3 = *(int32_t *)(v6 + 24); // 0x597a1
    g4 = result3;
    return result3;
}

// Address range: 0x597e0 - 0x5980e
int32_t function_597e0(int32_t a1, int32_t a2) {
    // 0x597e0
    g7 = a1;
    g6 = a2;
    int32_t v1 = *(int32_t *)(a1 + 68); // 0x597ef
    g9 = v1;
    *(int32_t *)(a1 + 72) = 0;
    *(int32_t *)(g7 + 52) = g6;
    if (v1 < 0) {
        // bb
        g4 = function_59b44();
    }
    // 0x59804
    g10 = a1;
    g4 = *(int32_t *)(a1 + 60);
    int32_t result = function_5980e(); // 0x5980c
    g4 = result;
    return result;
}

// Address range: 0x5980e - 0x5980f
int32_t function_5980e(void) {
    // 0x5980e
    return g4;
}

// Address range: 0x5984b - 0x59ac7
int32_t function_5984b(int16_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x458d0c75); // 0x5984b
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    int32_t v3 = v2 + 1; // 0x59853
    int32_t v4 = g7 - 2; // 0x59854
    g7 = v4;
    if (v4 != 0 && v3 != 0) {
        // bb
        g4 = function_5980e();
    }
    int32_t v5 = __asm_hlt(); // 0x59856
    g4 = v5;
    uint32_t v6 = g6; // 0x59858
    g6 = 256 * (v6 / 256 + v5 & 255) | v6 & -0xff01;
    g5 = v3 + 1;
    char v7 = __asm_in_1658(1); // 0x5985b
    int32_t v8 = g4 & -256 | (int32_t)v7; // 0x5985b
    g4 = v8;
    char * v9 = (char *)v8; // 0x5985d
    *v9 = *v9 + v7;
    int32_t v10 = g6; // 0x5985f
    int32_t v11 = g4; // 0x5985f
    g6 = 256 * v11 + v10 & 0xff00 | v10 & -0xff01;
    int32_t v12 = v11 & -248; // 0x59862
    g4 = v12;
    int32_t * v13 = (int32_t *)v12; // 0x59864
    *v13 = *v13 + v12;
    int32_t v14 = g4; // 0x59866
    char * v15 = (char *)v14; // 0x59866
    *v15 = *v15 + (char)v14;
    int32_t v16 = g10; // 0x59868
    g4 = g292;
    g8 = *(int32_t *)(g292 + 16);
    g10 = 0;
    g4 = function_27fc0(v16, "numPlayers", 0);
    g9 = *(int32_t *)g8;
    *(int32_t *)(g5 - 80) = (int32_t)"Filter<";
    g4 = (int32_t)"Filter<";
    *(int32_t *)(g5 - 76) = (int32_t)"Filter<=";
    *(int32_t *)(g5 - 72) = (int32_t)"Filter=";
    *(int32_t *)(g5 - 68) = (int32_t)"Filter<>";
    *(int32_t *)(g5 - 64) = (int32_t)"Filter>=";
    *(int32_t *)(g5 - 60) = (int32_t)"Filter>";
    *(int32_t *)(g5 - 56) = -1;
    *(int32_t *)(g5 - 52) = -2;
    *(int32_t *)(g5 - 48) = 0;
    *(int32_t *)(g5 - 44) = 3;
    *(int32_t *)(g5 - 40) = 2;
    *(int32_t *)(g5 - 36) = 1;
    int32_t v17 = g4; // 0x5990b
    int32_t v18 = g5; // 0x59900
    int32_t v19; // 0x59a18
    while (true) {
        int32_t v20 = *(int32_t *)(v18 + 12); // 0x59900
        g9 = v20;
        int32_t v21 = function_27340(v20, v17, 0); // 0x59912
        g4 = v21;
        if (v21 != 0) {
            int32_t v22 = function_261f0(v21); // 0x59922
            g4 = v22;
            g6 = v22;
            if (v22 != 0) {
                // 0x59931
                *(int32_t *)(g5 - 96) = g10;
                int32_t v23 = g4; // 0x59950
                int32_t v24 = g6; // 0x59a04
                while (true) {
                    char * v25 = (char *)v24; // 0x5996f
                    int32_t v26;
                    if (v23 != 1) {
                        // 0x59940
                        if (v23 != 2) {
                            int32_t v27 = function_26220(v24); // 0x5995c
                            g4 = v27;
                            g6 = v27;
                            if (v27 == 0) {
                                // break -> 0x599d1
                                break;
                            }
                            v23 = v27;
                            v24 = v27;
                            // continue -> 0x59967
                            continue;
                        }
                        int32_t v28 = *(int32_t *)g8; // 0x599e8
                        g4 = v28;
                        int32_t v29 = g5; // 0x599ea
                        int32_t v30 = *(int32_t *)(v29 - 96); // 0x599ea
                        g9 = v30;
                        int32_t v31 = *(int32_t *)(v28 + 24); // 0x599ed
                        g4 = v31;
                        g10 = *(int32_t *)(v29 - 56 + 4 * v30);
                        *(int32_t *)(v29 - 92) = v31;
                        v26 = function_27fc0((int32_t)v25, NULL, 0);
                    } else {
                        int32_t v32 = *(int32_t *)g8; // 0x5997c
                        g4 = v32;
                        int32_t v33 = g5; // 0x5997e
                        int32_t v34 = *(int32_t *)(v33 - 96); // 0x5997e
                        g7 = v34;
                        int32_t v35 = *(int32_t *)(v32 + 20); // 0x59981
                        g4 = v35;
                        g10 = *(int32_t *)(v33 - 56 + 4 * v34);
                        *(int32_t *)(v33 - 92) = v35;
                        v26 = function_27c00((int32_t)v25, NULL, (int32_t *)&g129);
                    }
                    // 0x599a3
                    g4 = v26;
                    *(int32_t *)(g5 - 100) = v26;
                    g4 = function_25190((int32_t)(char *)g6);
                    g9 = *(int32_t *)(g5 - 100);
                    int32_t v36 = function_26220(g6); // 0x599c6
                    g4 = v36;
                    g6 = v36;
                    if (v36 == 0) {
                        // break -> 0x599d1
                        break;
                    }
                    v23 = v36;
                    v24 = v36;
                }
                // 0x599d1
                g10 = *(int32_t *)(g5 - 96);
            }
        }
        int32_t v37 = g10; // 0x599d4
        int32_t v38 = v37 + 1; // 0x599d4
        g10 = v38;
        v19 = g5;
        if (v37 == 5) {
            // break -> 0x59a18
            break;
        }
        int32_t v39 = *(int32_t *)(4 * v38 - 80 + v19); // 0x599dc
        g4 = v39;
        v17 = v39;
        v18 = v19;
    }
    int32_t v40 = *(int32_t *)(v19 + 12); // 0x59a18
    g7 = v40;
    int32_t v41 = function_27340(v40, (int32_t)"Near", 0); // 0x59a2e
    g4 = v41;
    if (v41 == 0) {
        // 0x59ac0
        return 0;
    }
    int32_t result = function_261f0(v41); // 0x59a3e
    g4 = result;
    g6 = result;
    if (result == 0) {
        // 0x59ac0
        return result;
    }
    int32_t result2; // 0x59ac0
    while (true) {
        // 0x59a5e
        if (result != 2) {
            int32_t v42 = function_26220(result); // 0x59a53
            g4 = v42;
            g6 = v42;
            if (v42 == 0) {
                result2 = 0;
                // break -> 0x59ac0
                break;
            }
            result = v42;
        } else {
            int32_t v43 = *(int32_t *)g8; // 0x59a73
            g4 = v43;
            g10 = *(int32_t *)(v43 + 28);
            int32_t v44 = function_27fc0(result, NULL, 0); // 0x59a8b
            g4 = v44;
            *(int32_t *)(g5 - 100) = v44;
            g4 = function_25190((int32_t)(char *)g6);
            g9 = *(int32_t *)(g5 - 100);
            int32_t v45 = function_26220(g6); // 0x59aae
            g4 = v45;
            g6 = v45;
            if (v45 == 0) {
                result2 = v45;
                // break -> 0x59ac0
                break;
            }
            result = v45;
        }
    }
    // 0x59ac0
    return result2;
}

// Address range: 0x59ad0 - 0x59aea
int32_t function_59ad0(void) {
    int32_t v1 = g4 & ((int32_t)&g862 | -256); // 0x59ad0
    g4 = v1;
    char * v2 = (char *)(g6 + 0x4e8b0875); // 0x59ad3
    unsigned char v3 = *v2; // 0x59ad3
    unsigned char v4 = (char)g7 + v3; // 0x59ad3
    *v2 = v4;
    int32_t v5 = g4; // 0x59ad9
    unsigned char v6 = (char)v5; // 0x59ad9
    bool v7 = v4 < v3; // 0x59ad9
    unsigned char v8 = v6 - 117 + (char)v7; // 0x59ad9
    bool v9 = v7 ? v8 <= v6 : v6 > 116; // 0x59ad9
    g4 = (int32_t)v8 | v5 & -256;
    g10 = v1;
    int32_t v10 = g7; // 0x59adc
    char * v11 = (char *)(v10 + 0x75de09ce); // 0x59adc
    *v11 = (char)v10 + (char)v9 + *v11;
    uint32_t v12 = g7; // 0x59ae7
    uint32_t v13 = v12 & (int32_t)&g862 & 31; // 0x59ae7
    if (v13 != 0) {
        // bb
        *(int32_t *)v12 = v12 << 32 - v13 | v12 >> v13;
    }
    // bb229
    return g4;
}

// Address range: 0x59b17 - 0x59b20
int32_t function_59b17(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b6cc4); // 0x59b17
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x59b3b - 0x59b44
int32_t function_59b3b(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x458b9c55); // 0x59b3b
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x59b44 - 0x59b4c
int32_t function_59b44(void) {
    int32_t result = *(int32_t *)(g7 + 60); // 0x59b44
    g4 = result;
    return result;
}

// Address range: 0x59b50 - 0x59bb2
int32_t function_59b50(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x59b56
    g6 = a1;
    int32_t v2 = g10; // 0x59b5c
    int32_t v3 = g8; // 0x59b5f
    int32_t * v4 = (int32_t *)(a1 + 8); // 0x59b62
    int32_t result = *v4; // 0x59b62
    g4 = result;
    if (result != 0) {
        // 0x59b69
        g6 = v1;
        return result;
    }
    int32_t v5 = (int32_t)g450; // 0x59b80
    g4 = v5;
    g9 = *(int32_t *)g450;
    g10 = *(int32_t *)a1;
    g8 = *(int32_t *)(a1 + 4);
    g9 = *(int32_t *)g450;
    *v4 = v5;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x59bc0 - 0x59c0f
int32_t function_59bc0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x59bc3
    int32_t result = *(int32_t *)&g273; // 0x59bc7
    g4 = result;
    g6 = a1;
    g9 = result;
    g7 = *(int32_t *)(a1 + 36);
    g9 = result;
    *(int32_t *)(a1 + 44) = result;
    *(int32_t *)(g6 + 48) = result;
    if (result == 0) {
        // 0x59c08
        return 0;
    }
    // 0x59bf0
    g9 = *(int32_t *)g6;
    g6 = v1;
    return result;
}

// Address range: 0x59c13 - 0x59c23
int32_t function_59c13(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x85d8903); // 0x59c13
    *v1 = *v1 - 1;
    int32_t result = *(int32_t *)(g4 + 32); // 0x59c19
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x59c30 - 0x59cbd
int32_t function_59c30(int32_t a1) {
    int32_t v1 = g6; // 0x59c36
    g6 = a1;
    int32_t v2 = g10; // 0x59c3c
    int32_t v3 = g8; // 0x59c3f
    int32_t * v4 = (int32_t *)(a1 + 56); // 0x59c42
    int32_t v5 = *v4; // 0x59c42
    g7 = v5;
    if (v5 != 0) {
        // 0x59cb0
        g6 = v1;
        return g4;
    }
    // 0x59c49
    g4 = *(int32_t *)a1;
    *v4 = 1;
    g8 = *(int32_t *)(g4 + 20);
    int32_t v6 = function_26cf0(); // 0x59c5c
    g4 = v6;
    g10 = v6;
    g4 = function_27970(v6, "OnMatchSessionUpdate", "state", "progress", "progress", "searching");
    int32_t v7 = g10; // 0x59c93
    int32_t v8 = g6; // 0x59c97
    g10 = v2;
    g6 = v1;
    g8 = v3;
    int32_t result = function_59bc0(v8, v7); // 0x59cab
    g4 = result;
    return result;
}

// Address range: 0x59cbe - 0x59cbf
int32_t function_59cbe(void) {
    // 0x59cbe
    return g4;
}

// Address range: 0x59cd0 - 0x59cd1
int32_t function_59cd0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x59cd0
    return g4;
}

// Address range: 0x59cfd - 0x59cfe
int32_t function_59cfd(void) {
    // 0x59cfd
    return g4;
}

// Address range: 0x59d03 - 0x59d0e
int32_t function_59d03(void) {
    int32_t v1 = g4; // 0x59d03
    *(char *)v1 = (char)v1 | *(char *)&g4;
    int32_t v2 = g4; // 0x59d05
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x59d07
    int32_t v4 = g4; // 0x59d07
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    g4 = v4 & -252;
    int32_t result = g4 & -256 | (int32_t)__asm_in_1653((int16_t)g9); // 0x59d0c
    g4 = result;
    return result;
}

// Address range: 0x59d20 - 0x59d21
int32_t function_59d20(void) {
    // 0x59d20
    return g4;
}

// Address range: 0x59d40 - 0x59d41
int32_t function_59d40(void) {
    // 0x59d40
    return g4;
}

// Address range: 0x59d5e - 0x59d5f
int32_t function_59d5e(void) {
    // 0x59d5e
    return g4;
}

// Address range: 0x59d61 - 0x59d66
int32_t function_59d61(void) {
    int32_t result = function_89059d67(); // 0x59d61
    g4 = result;
    return result;
}

// Address range: 0x59d6b - 0x59d6c
int32_t function_59d6b(void) {
    // 0x59d6b
    return g4;
}

// Address range: 0x59d83 - 0x59d93
int32_t function_59d83(void) {
    // 0x59d83
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x59d85
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x59d87
    int32_t v3 = g4; // 0x59d87
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    g4 = v3 & -252;
    int32_t result = function_59d6b(); // 0x59d91
    g4 = result;
    return result;
}

// Address range: 0x59db3 - 0x59dbf
int32_t function_59db3(int32_t a1) {
    // 0x59db3
    *(char *)g7 = (char)g4 | *(char *)&g7;
    int32_t v1 = g4; // 0x59db5
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g6; // 0x59db7
    int32_t v3 = g4; // 0x59db7
    g6 = 256 * v3 + v2 & 0xff00 | v2 & -0xff01;
    int32_t result = v3 & -252; // 0x59dba
    g4 = result;
    return result;
}

// Address range: 0x59dc8 - 0x59dc9
int32_t function_59dc8(void) {
    // 0x59dc8
    return g4;
}

// Address range: 0x59e2f - 0x59e3d
float80_t function_59e2f(void) {
    int32_t v1 = g7; // 0x59e2f
    char * v2 = (char *)(v1 + 0x48e8241c); // 0x59e2f
    *v2 = *v2 + (char)v1;
    return 1.0;
}

// Address range: 0x59eb8 - 0x59ebd
int32_t function_59eb8(void) {
    int32_t result = g4 & -24; // 0x59eb8
    g4 = result;
    return result;
}

// Address range: 0x59efd - 0x59f13
int32_t function_59efd(void) {
    int32_t v1 = g4; // 0x59efd
    char * v2 = (char *)(v1 + 10); // 0x59efd
    bool v3; // cf
    *v2 = (char)v3 + *v2 + (char)v1;
    char * v4 = (char *)(g6 + 0x2444c710); // 0x59f00
    *v4 = (char)g7 + *v4;
    int32_t v5 = g4; // 0x59f06
    int32_t v6 = v5 & ((int32_t)&g862 | -256); // 0x59f06
    g4 = v6;
    char * v7 = (char *)v6; // 0x59f08
    *v7 = *v7 + (char)(v5 & (int32_t)&g862);
    int32_t v8 = g7; // 0x59f0a
    char * v9 = (char *)(v8 + 0x52ff2404); // 0x59f0a
    *v9 = *v9 + (char)v8;
    int32_t v10 = g4; // 0x59f10
    int32_t result = v10 + 137 & 255 | v10 & -256; // 0x59f10
    g4 = result;
    return result;
}

// Address range: 0x59f1c - 0x59f1d
int32_t function_59f1c(void) {
    // 0x59f1c
    return g4;
}

// Address range: 0x59f28 - 0x59f29
int32_t function_59f28(void) {
    // 0x59f28
    return g4;
}

// Address range: 0x59f59 - 0x59f8d
int32_t function_59f59(int16_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d2446); // 0x59f59
    int32_t v2 = *v1 - 1; // 0x59f59
    *v1 = v2;
    int32_t v3 = g7 - 1; // 0x59f5f
    g7 = v3;
    int32_t v4; // 0x59f62
    if (v2 != 0 && v3 != 0) {
        // bb
        g4 = function_59f28();
        v4 = g7;
    } else {
        v4 = v3;
    }
    int32_t v5 = v4 - 1; // 0x59f62
    g7 = v5;
    int32_t v6; // ebp
    if (v5 != 0 && v6 != -1) {
        // bb240
        g4 = function_59f1c();
    }
    int32_t v7 = __asm_hlt(); // 0x59f64
    g4 = v7;
    uint32_t v8 = g6; // 0x59f66
    g6 = 256 * (v8 / 256 + v7 & 255) | v8 & -0xff01;
    char v9 = __asm_in_1658(1); // 0x59f69
    int32_t v10 = g4 & -256 | (int32_t)v9; // 0x59f69
    g4 = v10;
    char * v11 = (char *)v10; // 0x59f6b
    *v11 = *v11 + v9;
    int32_t v12 = g6; // 0x59f6d
    int32_t v13 = g4; // 0x59f6d
    g6 = 256 * v13 + v12 & 0xff00 | v12 & -0xff01;
    int32_t v14 = v13 & -248; // 0x59f70
    g4 = v14;
    int32_t * v15 = (int32_t *)v14; // 0x59f72
    *v15 = *v15 + v14;
    int32_t v16 = g4; // 0x59f74
    char * v17 = (char *)v16; // 0x59f74
    *v17 = *v17 + (char)v16;
    return g4;
}

// Address range: 0x59f90 - 0x59fad
int32_t function_59f90(void) {
    // 0x59f90
    g4 = function_27920(g6, "access", "public");
    int32_t result = function_59d40(); // 0x59fa8
    g4 = result;
    return result;
}

// Address range: 0x59fb0 - 0x59fcd
int32_t function_59fb0(void) {
    // 0x59fb0
    g4 = function_27920(g6, "network", "LIVE");
    int32_t result = function_59d20(); // 0x59fc8
    g4 = result;
    return result;
}

// Address range: 0x59fd0 - 0x5a087
int32_t function_59fd0(int32_t a1, int32_t a2) {
    // 0x59fd0
    g6 = a1;
    g4 = a2;
    *(int32_t *)a1 = (int32_t)&g219;
    *(char *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 4) = (int32_t)&g220;
    *(int32_t *)(g6 + 16) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 12) = (int32_t)&g60;
    *(int32_t *)(g6 + 36) = g4;
    *(int32_t *)(g6 + 40) = g4;
    *(int32_t *)(g6 + 44) = 0;
    *(int32_t *)(g6 + 48) = 0;
    *(int32_t *)(g6 + 52) = 0;
    *(int32_t *)(g6 + 56) = 0;
    *(int32_t *)(g6 + 60) = 0;
    *(int32_t *)(g6 + 64) = 0;
    *(int32_t *)(g6 + 68) = 0;
    *(int32_t *)(g6 + 72) = 0;
    *(int32_t *)(g6 + 76) = 0;
    *(int32_t *)(g6 + 80) = 0;
    *(int32_t *)(g6 + 84) = 0;
    *(int32_t *)(g6 + 88) = 0;
    *(int32_t *)(g6 + 92) = 0;
    *(int32_t *)(g6 + 96) = 0;
    return g4;
}

// Address range: 0x5a08c - 0x5a0c2
int32_t function_5a08c(int32_t a1, int32_t a2) {
    // 0x5a08c
    g4 = *(int32_t *)(g6 + 36);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x5a08f
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    int32_t result = function_59cd0(g6, g9, 1); // 0x5a0b7
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x5a0ea - 0x5a0eb
int32_t function_5a0ea(void) {
    // 0x5a0ea
    return g4;
}

// Address range: 0x5a0f9 - 0x5a0fa
int32_t function_5a0f9(void) {
    // 0x5a0f9
    return g4;
}

// Address range: 0x5a110 - 0x5a135
int32_t function_5a110(int32_t a1) {
    // 0x5a110
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g219;
    int32_t result = g4; // 0x5a122
    g9 = result + 60;
    g7 = result + 80;
    return result;
}

// Address range: 0x5a139 - 0x5a20f
int32_t function_5a139(int16_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x45c70855); // 0x5a139
    int32_t v2 = *v1 - 1; // 0x5a139
    *v1 = v2;
    int32_t v3 = g7 - 1; // 0x5a13f
    g7 = v3;
    if (v2 != 0 && v3 != 0) {
        // bb
        g4 = function_5a0f9();
    }
    // 0x5a141
    g4 = __asm_hlt();
    char * v4 = (char *)(g6 + 0x45c7084d); // 0x5a143
    *v4 = (char)g7 + *v4;
    char v5 = __asm_in_1658(1); // 0x5a149
    int32_t v6 = g4 & -256 | (int32_t)v5; // 0x5a149
    g4 = v6;
    char * v7 = (char *)v6; // 0x5a14b
    *v7 = *v7 + v5;
    char * v8 = (char *)(g6 + 0x558d2442); // 0x5a14d
    *v8 = (char)g7 + *v8;
    g7--;
    int32_t v9 = g4 & -248; // 0x5a156
    g4 = v9;
    int32_t * v10 = (int32_t *)v9; // 0x5a158
    *v10 = *v10 + v9;
    int32_t v11 = g4; // 0x5a15a
    char * v12 = (char *)v11; // 0x5a15a
    *v12 = *v12 + (char)v11;
    int32_t v13 = g7 + 60; // 0x5a15c
    g7 = v13;
    *(int32_t *)(g5 - 48) = v13;
    int32_t v14 = g5; // 0x5a169
    int32_t v15 = *(int32_t *)(v14 + 8) + 80; // 0x5a16c
    g4 = v15;
    *(int32_t *)(v14 - 52) = v15;
    int32_t v16 = g5; // 0x5a177
    g9 = *(int32_t *)(v16 + 8);
    *(int32_t *)(v16 - 56) = 0;
    int32_t v17 = g5; // 0x5a181
    int32_t v18 = g9 + 60; // 0x5a184
    g9 = v18;
    g7 = *(int32_t *)(v17 + 8) + 80;
    *(int32_t *)(v17 - 48) = v18;
    int32_t v19 = g9; // 0x5a18d
    g10 = v19;
    *(int32_t *)(g5 - 40) = v19;
    *(int32_t *)(g5 - 52) = g7;
    *(int32_t *)(g5 - 36) = g7;
    int32_t v20; // 0x5a1f0
    while (true) {
        int32_t v21 = *(int32_t *)(g10 + 12); // 0x5a198
        g4 = v21;
        g8 = 0;
        *(int32_t *)(g5 - 44) = 0;
        if (v21 < 1) {
            // 0x5a198
            v20 = g5;
        } else {
            int32_t v22 = g8; // 0x5a1b2
            int32_t v23 = g10; // 0x5a1b0
            while (true) {
                int32_t v24 = *(int32_t *)v23 + v22; // 0x5a1b2
                g6 = v24;
                int32_t v25 = *(int32_t *)(v24 + 8); // 0x5a1b4
                g4 = v25;
                if (v25 != 0) {
                    // 0x5a1bb
                    g4 = function_28600(v25);
                    *(int32_t *)(g6 + 8) = 0;
                }
                int32_t * v26 = (int32_t *)(g5 - 44); // 0x5a1ca
                *v26 = *v26 + 1;
                int32_t v27 = g8 + 12; // 0x5a1ce
                g8 = v27;
                int32_t v28 = g5; // 0x5a1d1
                uint32_t v29 = *(int32_t *)(v28 - 44); // 0x5a1d1
                g4 = v29;
                int32_t v30 = g10; // 0x5a1d4
                if (*(int32_t *)(v30 + 12) <= v29) {
                    v20 = v28;
                    // break -> 0x5a1d9
                    break;
                }
                v22 = v27;
                v23 = v30;
            }
        }
        int32_t * v31 = (int32_t *)(v20 - 56); // 0x5a1d9
        if (*v31 == 1) {
            // break -> 0x5a1f0
            break;
        }
        // 0x5a1df
        g10 = *(int32_t *)(v20 - 36);
        *v31 = 1;
    }
    int32_t v32 = *(int32_t *)(v20 + 8); // 0x5a1f0
    g9 = v32;
    int32_t v33 = *(int32_t *)(v32 + 88); // 0x5a1f3
    g4 = v33;
    *(int32_t *)(v32 + 92) = 0;
    if (v33 < 0) {
        // bb243
        g4 = function_5a30e();
    }
    int32_t v34 = *(int32_t *)(g5 + 8); // 0x5a205
    g7 = v34;
    int32_t result = *(int32_t *)(v34 + 80); // 0x5a208
    g4 = result;
    return result;
}

// Address range: 0x5a283 - 0x5a2eb
int32_t function_5a283(void) {
    // 0x5a283
    *(int32_t *)(*(int32_t *)(g5 + 8) + 64) = 0;
    g4 = 0;
    int32_t v1 = g5; // 0x5a28f
    int32_t v2 = *(int32_t *)(v1 + 8); // 0x5a28f
    g9 = v2;
    g7 = *(int32_t *)(v1 - 48);
    *(int32_t *)(v2 + 76) = 0;
    g4 = function_5a6c0(g7);
    int32_t v3 = g5; // 0x5a2a0
    int32_t v4 = *(int32_t *)(v3 + 8); // 0x5a2a0
    g9 = v4;
    int32_t v5 = *(int32_t *)(v4 + 48); // 0x5a2a3
    g4 = v5;
    int32_t v6; // 0x5a2b2
    if (v5 != 0) {
        // 0x5a2aa
        g4 = function_28600(v5);
        v6 = g5;
    } else {
        v6 = v3;
    }
    int32_t v7 = *(int32_t *)(v6 + 8); // 0x5a2b2
    g7 = v7;
    int32_t v8 = *(int32_t *)(v7 + 40); // 0x5a2b5
    g4 = v8;
    int32_t v9; // 0x5a2c4
    if (v8 != 0) {
        // 0x5a2bc
        g4 = function_28600(v8);
        v9 = g5;
    } else {
        v9 = v6;
    }
    int32_t v10 = *(int32_t *)(v9 + 8); // 0x5a2c4
    g4 = v10;
    g9 = *(int32_t *)(v10 + 16);
    *(int32_t *)(v10 + 4) = (int32_t)&g220;
    int32_t v11 = *(int32_t *)(g4 + 20); // 0x5a2d1
    g4 = v11;
    int32_t v12 = g9 | v11; // 0x5a2d6
    g7 = v12;
    if (v12 == 0) {
        int32_t v13 = function_5a301((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x5a2d8
        g4 = v13;
    }
    int32_t result = *(int32_t *)(g5 + 8) + 4; // 0x5a2e5
    g4 = result;
    return result;
}

// Address range: 0x5a301 - 0x5a309
int32_t function_5a301(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x5a301
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x5a309 - 0x5a30e
int32_t function_5a309(void) {
    int32_t result = *(int32_t *)(g7 + 60); // 0x5a309
    g4 = result;
    return result;
}

// Address range: 0x5a30e - 0x5a316
int32_t function_5a30e(void) {
    int32_t result = *(int32_t *)(g9 + 80); // 0x5a30e
    g4 = result;
    return result;
}

// Address range: 0x5a316 - 0x5a364
int32_t function_5a316(void) {
    int32_t v1 = *(int32_t *)(g5 - 52); // 0x5a316
    g9 = v1;
    g6 = g4;
    g4 = function_5a700(v1);
    int32_t v2 = *(int32_t *)(g5 - 48); // 0x5a323
    g7 = v2;
    g4 = function_5a700(v2);
    int32_t v3 = *(int32_t *)(g5 + 8) + 48; // 0x5a331
    g4 = v3;
    g4 = function_1fc30(v3);
    int32_t v4 = *(int32_t *)(g5 + 8) + 40; // 0x5a33f
    g4 = v4;
    g4 = function_1fc30(v4);
    while (true) {
        int32_t v5 = *(int32_t *)(g5 + 8) + 4; // 0x5a34d
        g4 = v5;
        g4 = function_5a680(v5);
        int32_t v6 = function_7ab57(g6, (int32_t)&g870); // 0x5a35b
        g4 = v6;
        g6 = v6;
    }
}

// Address range: 0x5a364 - 0x5a373
int32_t function_5a364(void) {
    // 0x5a364
    g6 = g4;
    int32_t v1 = *(int32_t *)(g5 - 48); // 0x5a366
    g4 = v1;
    int32_t result = function_5a6c0(v1); // 0x5a36c
    g4 = result;
    return result;
}

// Address range: 0x5a373 - 0x5a377
int32_t function_5a373(void) {
    int32_t result = g4; // 0x5a373
    g6 = result;
    return result;
}

// Address range: 0x5a377 - 0x5a382
int32_t function_5a377(void) {
    int32_t result = g4; // 0x5a377
    g6 = result;
    return result;
}

// Address range: 0x5a382 - 0x5a386
int32_t function_5a382(void) {
    int32_t result = g4; // 0x5a382
    g6 = result;
    return result;
}

// Address range: 0x5a386 - 0x5a395
int32_t function_5a386(void) {
    int32_t v1 = *(int32_t *)(g5 - 52); // 0x5a386
    g9 = v1;
    g6 = g4;
    int32_t result = function_5a6c0(v1); // 0x5a38e
    g4 = result;
    return result;
}

// Address range: 0x5a3a0 - 0x5a3bf
int32_t function_5a3a0(int32_t a1) {
    int32_t v1 = g6; // 0x5a3a3
    g6 = a1;
    g4 = function_5a110(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x5a3ba
    g4 = result;
    return result;
}

// Address range: 0x5a3c0 - 0x5a3c1
int32_t function_5a3c0(void) {
    // 0x5a3c0
    return g4;
}

// Address range: 0x5a3d9 - 0x5a3da
int32_t function_5a3d9(void) {
    // 0x5a3d9
    return g4;
}

// Address range: 0x5a420 - 0x5a49d
int32_t function_5a420(void) {
    // 0x5a420
    g4 = g6 + 80;
    *(int32_t *)(g5 - 32) = g9;
    int32_t v1 = g4; // 0x5a426
    *(int32_t *)(g5 - 36) = v1;
    g4 = function_5a880(v1, g8);
    int32_t v2 = g5; // 0x5a435
    int32_t v3 = *(int32_t *)(v2 - 32); // 0x5a435
    g9 = v3;
    int32_t v4 = *(int32_t *)(v2 - 36); // 0x5a43c
    g4 = v4;
    g4 = function_5a770(v4, v3, g8);
    int32_t v5 = *(int32_t *)(g5 - 32); // 0x5a44d
    g9 = v5;
    if (g10 != 0) {
        uint32_t v6 = g8; // 0x5a452
        if (v6 >= 1) {
            // 0x5a456
            g9 = -12 * v5;
            g7 = 0;
            g4 = 12 * v5;
            *(int32_t *)(g5 - 28) = v6;
            g10 += g9;
            int32_t v7 = g4; // 0x5a477
            while (true) {
                // 0x5a470
                g9 = v7;
                int32_t v8 = *(int32_t *)(g6 + 80) + v7; // 0x5a472
                g9 = v8;
                int32_t v9; // 0x5a48d
                if (v8 != 0) {
                    int32_t v10 = *(int32_t *)(g10 + v7); // 0x5a477
                    g8 = v10;
                    *(int32_t *)v8 = v10;
                    int32_t v11 = *(int32_t *)(g10 + 4 + g4); // 0x5a47c
                    g8 = v11;
                    *(int32_t *)(g9 + 4) = v11;
                    int32_t v12 = *(int32_t *)(g10 + 8 + g4); // 0x5a483
                    g8 = v12;
                    *(int32_t *)(g9 + 8) = v12;
                    v9 = g4;
                } else {
                    v9 = v7;
                }
                int32_t v13 = g7 + 1; // 0x5a48a
                g7 = v13;
                int32_t v14 = v9 + 12; // 0x5a48d
                g4 = v14;
                if (v13 == *(int32_t *)(g5 - 28)) {
                    // break -> 0x5a495
                    break;
                }
                v7 = v14;
            }
        }
    }
    // 0x5a495
    g10 = *(int32_t *)(g6 + 60);
    int32_t result = function_5a3d9(); // 0x5a498
    g4 = result;
    return result;
}

// Address range: 0x5a4d5 - 0x5a58b
int32_t function_5a4d5(void) {
    int32_t * v1 = (int32_t *)(g5 + 0x45893c47); // 0x5a4d5
    int32_t v2 = *v1 - 1; // 0x5a4d5
    *v1 = v2;
    int32_t v3; // 0x5a545
    if (v2 >= 0) {
        // 0x5a4d5
        v3 = g4;
        goto lab_0x5a545;
    } else {
        goto lab_0x5a4e0;
    }
  lab_0x5a545:
    // 0x5a545
    *(int32_t *)(v3 + 8) = 0;
    g7 = *(int32_t *)(g5 - 44);
    *(int32_t *)g4 = g9;
    *(int32_t *)(g4 + 4) = g7;
    goto lab_0x5a554;
  lab_0x5a4e0:
    // 0x5a4e0
    g4 = g292;
    int32_t v9 = g5 - 32; // 0x5a4e5
    g7 = v9;
    int32_t v10 = *(int32_t *)(g292 + 16); // 0x5a4e8
    g4 = v10;
    g9 = *(int32_t *)v10;
    *(int32_t *)g11 = v9;
    *(int32_t *)(g11 + 4) = g4;
    *(int32_t *)(g11 + 8) = g6;
    int32_t v11 = g5; // 0x5a4fb
    g9 = *(int32_t *)(v11 - 28);
    g4 = *(int32_t *)(v11 - 32);
    g10 = *(int32_t *)(g8 + 72);
    *(int32_t *)g11 = 1;
    *(int32_t *)(g5 - 44) = g9;
    int32_t v12 = g5; // 0x5a512
    g9 = *(int32_t *)(v12 - 36);
    *(int32_t *)(v12 - 48) = g4;
    *(int32_t *)g11 = g9;
    g4 = function_5a880((int32_t)&g870, (int32_t)&g870);
    g7 = *(int32_t *)(g5 - 36);
    *(int32_t *)(g11 + 8) = 1;
    *(int32_t *)(g11 + 4) = g10;
    *(int32_t *)g11 = g7;
    function_5a770((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
    int32_t v13 = 12 * g10; // 0x5a53a
    g4 = v13;
    int32_t v14 = *(int32_t *)(g8 + 60) + v13; // 0x5a53d
    g4 = v14;
    if (v14 == 0) {
        goto lab_0x5a554;
    } else {
        // 0x5a542
        g9 = *(int32_t *)(g5 - 48);
        v3 = v14;
        goto lab_0x5a545;
    }
  lab_0x5a554:;
    int32_t v4 = g6 + 1; // 0x5a554
    g6 = v4;
    g4 = 0;
    int32_t v5 = g5; // 0x5a559
    int32_t v6; // 0x5a562
    if (*(char *)(v5 - 37) == 0) {
        int32_t v7 = *(int32_t *)(v5 - 52); // 0x5a55f
        g7 = v7;
        v6 = *(int32_t *)v7;
        g4 = v6;
    } else {
        v6 = 0;
    }
    if (v4 >= v6) {
        // 0x5a56c
        *(int32_t *)g11 = g8;
        g4 = function_5a3c0();
        int32_t v8 = g8; // 0x5a574
        g9 = *(int32_t *)(v8 + 52);
        g4 = v8;
        *(int32_t *)(g5 + 8) = v8;
        *(int32_t *)(g5 + 12) = g9;
        int32_t result = *(int32_t *)(g4 + 28); // 0x5a57f
        g4 = result;
        g6 = *(int32_t *)(g5 - 12);
        g10 = *(int32_t *)(g5 - 8);
        g8 = *(int32_t *)(g5 - 4);
        return result;
    }
    g5 = v5;
    goto lab_0x5a4e0;
}

// Address range: 0x5a590 - 0x5a5d9
int32_t function_5a590(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x5a593
    g4 = a1;
    g9 = *(int32_t *)(a1 + 24);
    *(int32_t *)(a1 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v2 = g4; // 0x5a5ab
    int32_t v3 = *(int32_t *)(v2 + 20); // 0x5a5ab
    g7 = v3;
    int32_t v4 = *(int32_t *)(v2 + 28); // 0x5a5ae
    g4 = v4;
    uint32_t v5 = g9; // 0x5a5b1
    int32_t result = v4 + v3;
    if (v5 % 2 != 0) {
        int32_t v6 = *(int32_t *)result; // 0x5a5b6
        g6 = v6;
        g9 = *(int32_t *)(v5 - 1 + v6);
    }
    // 0x5a5bd
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x5a5e0 - 0x5a5ea
int32_t function_5a5e0(void) {
    // 0x5a5e0
    g4 = 4;
    return 4;
}

// Address range: 0x5a5f0 - 0x5a672
int32_t function_5a5f0(int32_t result, int32_t a2, unsigned char a3, int32_t a4, int32_t a5) {
    // 0x5a5f0
    g4 = result;
    int32_t v1 = g6; // 0x5a5f9
    g9 = a4;
    int32_t v2 = g10; // 0x5a5ff
    g7 = a5;
    int32_t v3 = g8; // 0x5a605
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(result + 12); // 0x5a60f
    int32_t v5 = *v4 ^ a4; // 0x5a60f
    g9 = v5;
    int32_t v6 = *(int32_t *)(result + 16) ^ a5 | v5; // 0x5a615
    g7 = v6;
    if (v6 != 0) {
        // 0x5a619
        g6 = v1;
        g10 = v2;
        return result;
    }
    // 0x5a630
    g9 = *(int32_t *)(result + 24);
    *v4 = 0;
    *(int32_t *)(g4 + 16) = 0;
    int32_t v7 = g4; // 0x5a641
    int32_t v8 = *(int32_t *)(v7 + 20); // 0x5a641
    g7 = v8;
    int32_t v9 = *(int32_t *)(v7 + 28); // 0x5a644
    g4 = v9;
    uint32_t v10 = g9; // 0x5a647
    int32_t result2 = v9 + v8;
    if (v10 % 2 != 0) {
        int32_t v11 = *(int32_t *)result2; // 0x5a64c
        g8 = v11;
        g9 = *(int32_t *)(v10 - 1 + v11);
    }
    // 0x5a653
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x5a680 - 0x5a6a7
int32_t function_5a680(int32_t a1) {
    // 0x5a680
    g6 = a1;
    g4 = *(int32_t *)(a1 + 16);
    *(int32_t *)a1 = (int32_t)&g220;
    int32_t v1 = *(int32_t *)(g6 + 12); // 0x5a693
    g9 = v1;
    int32_t v2 = g4; // 0x5a696
    int32_t v3 = v2 | v1; // 0x5a698
    g7 = v3;
    int32_t result; // 0x5a69a
    if (v3 == 0) {
        // bb
        result = function_5a6ba((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = v2;
    }
    // 0x5a69c
    return result;
}

// Address range: 0x5a6ba - 0x5a6c0
int32_t function_5a6ba(int32_t a1, int32_t a2) {
    // 0x5a6ba
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x5a6c0 - 0x5a6d7
int32_t function_5a6c0(int32_t a1) {
    // 0x5a6c0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x5a6ca
    g4 = v1;
    int32_t v2; // 0x5a6d1
    if (v1 < 0) {
        // bb
        g4 = function_5a6f6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x5a6d1
    g4 = v3;
    int32_t result; // 0x5a6d5
    if (v3 == 0) {
        // bb7
        result = function_5a6ef();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x5a6d7
    return result;
}

// Address range: 0x5a6ef - 0x5a6f6
int32_t function_5a6ef(void) {
    // 0x5a6ef
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x5a6f6 - 0x5a6fc
int32_t function_5a6f6(int32_t a1, int32_t a2) {
    // 0x5a6f6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x5a700 - 0x5a71e
int32_t function_5a700(int32_t a1) {
    // 0x5a700
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x5a716
    g4 = result;
    return result;
}

// Address range: 0x5a770 - 0x5a7ba
int32_t function_5a770(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x5a770
    int32_t v2 = g6; // 0x5a773
    g6 = a1;
    g9 = a2;
    g7 = a3;
    int32_t result = *(int32_t *)(a1 + 12) - a2 - a3; // 0x5a782
    g4 = result;
    if (result >= 0 != result != 0) {
        // 0x5a788
        g6 = v2;
        g5 = v1;
        return result;
    }
    if (a3 < 1) {
        // 0x5a788
        g6 = v2;
        g5 = v1;
        return result;
    }
    int32_t v3 = a3 + a2; // 0x5a7a2
    g9 = v3;
    int32_t v4 = *(int32_t *)a1 + 12 * v3; // 0x5a7ad
    g4 = v4;
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_2cb20(v2, v1, v4); // 0x5a7b5
    g4 = result2;
    return result2;
}

// Address range: 0x5a7c0 - 0x5a810
int32_t function_5a7c0(int32_t a1, int32_t a2) {
    // 0x5a7c0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x5a7cb
    int64_t v2 = v1; // 0x5a7cb
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x5a7d2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x5a7d8
    g7 = v4;
    int32_t v5; // 0x5a7f8
    if (v1 == 0) {
        // bb
        g4 = function_5a838();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x5a7de
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x5a7e6
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x5a7eb
    g4 = v8;
    int32_t v9; // 0x5a809
    if (v5 > v8) {
        // 0x5a7f2
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x5a7f8
        int32_t v11 = v10 < 0; // 0x5a7fc
        int32_t v12 = (v11 + v10) / 2; // 0x5a801
        while (v5 > v12) {
            // 0x5a7f8
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x5a807
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x5a807
    int32_t v14 = *(int32_t *)v13; // 0x5a807
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x5a80e
    if (v14 == 0) {
        // bb20
        result = function_5a85f();
        g4 = result;
    } else {
        // 0x5a807
        result = g4;
    }
    // 0x5a810
    return result;
}

// Address range: 0x5a838 - 0x5a85f
int32_t function_5a838(void) {
    int32_t v1 = g4; // 0x5a838
    g9 = 3;
    int32_t v2 = v1 == 0 ? 3 : v1; // 0x5a83f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x5a850
    while (g7 > v3) {
        // 0x5a850
        v3 *= 2;
    }
    // 0x5a856
    g4 = v3;
    int32_t v4 = g6; // 0x5a856
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x5a85f - 0x5a860
int32_t function_5a85f(void) {
    // 0x5a85f
    return g4;
}

// Address range: 0x5a880 - 0x5a8c3
int32_t function_5a880(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x5a886
    g6 = a1;
    int32_t v2 = g10; // 0x5a88c
    g10 = a2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5a892
    g4 = v3;
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x5a895
    g9 = v4;
    int32_t v5 = v3 + a2; // 0x5a898
    g4 = v5;
    int32_t v6 = v5 - v4; // 0x5a89a
    int32_t v7; // 0x5a8ac
    int32_t v8; // 0x5a8af
    if (v5 > v4) {
        // 0x5a89e
        g4 = v6;
        g4 = function_5a7c0(a1, v6);
        v7 = g6;
        v8 = g10 + *(int32_t *)(v7 + 12);
        g4 = v8;
    } else {
        v7 = a1;
        v8 = v5;
    }
    // 0x5a8b1
    *(int32_t *)(v7 + 12) = v8;
    int32_t v9 = g6; // 0x5a8b4
    int32_t v10 = *(int32_t *)v9; // 0x5a8b4
    g4 = v10;
    *(int32_t *)(v9 + 16) = v10;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x5a8d0 - 0x5a8db
int32_t function_5a8d0(int32_t a1) {
    // 0x5a8d0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x5a8d7
    g4 = result;
    return result;
}

// Address range: 0x5a8e0 - 0x5a8f5
int32_t function_5a8e0(int32_t a1) {
    // 0x5a8e0
    return g4;
}

// Address range: 0x5a900 - 0x5a93a
int32_t function_5a900(void) {
    int32_t result = *(int32_t *)&g296; // 0x5a906
    g4 = result;
    int32_t v1; // bp-20
    g9 = &v1;
    return result;
}

// Address range: 0x5a940 - 0x5acdf
int32_t function_5a940(int32_t a1) {
    int32_t v1 = g8; // 0x5a943
    int32_t v2 = g10; // 0x5a944
    int32_t v3 = g6; // 0x5a945
    *(char *)(a1 + 40) = 0;
    int32_t v4 = (int32_t)g450; // 0x5a950
    g4 = v4;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    if (g450 == NULL) {
        // 0x5ab27
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x5a970
    g4 = v4;
    g9 = a1;
    int32_t * v5 = (int32_t *)(a1 + 8); // 0x5a9a3
    int32_t v6 = *v5; // 0x5a9a3
    g4 = v6;
    int32_t v7 = function_27ea0(v6, "@info/installed", 0, 0); // 0x5a9a9
    g4 = v7;
    g7 = a1;
    int32_t v8 = g9; // 0x5a9b4
    int32_t v9 = *v5; // 0x5a9b7
    g7 = v9;
    if (v9 == 0) {
        int32_t v10 = function_26cf0(); // 0x5ac81
        g4 = v10;
        g6 = v10;
        function_26330(v10);
        g4 = a1;
        *v5 = g6;
        g4 = function_27600(g6, "@info/installed", 0, 0);
    }
    int32_t v11 = (int32_t)g450; // 0x5a9c2
    g4 = v11;
    g9 = v4;
    int32_t v12 = *(int32_t *)g450; // 0x5a9ec
    g4 = v12;
    int32_t v13 = *(int32_t *)(v4 + 4); // 0x5a9ee
    g9 = v13;
    int32_t v14 = v13 | v12; // 0x5a9f3
    g7 = v14;
    int16_t * v15; // bp-29
    int32_t v16; // 0x5aa25
    int32_t v17; // 0x5aa71
    int32_t v18; // 0x5aa7115
    int32_t v19; // 0x5a9fe
    int32_t v20; // 0x5ac5a
    if (v14 != 0) {
        // 0x5a9fb
        g6 = v4;
        v19 = v4 + 24;
        g7 = v19;
        v20 = (int32_t)&v15;
        v16 = v4;
        while (true) {
          lab_0x5aa08:;
            int32_t v21 = v12 & -1 - v7; // 0x5aa12
            g7 = v21;
            int32_t v22 = v21 | v13 & -1 - v8; // 0x5aa16
            g10 = v22;
            if (v22 == 0) {
                goto lab_0x5aa83;
            } else {
                int32_t v23 = *(int32_t *)(v16 + 8); // 0x5aa1a
                g4 = v23;
                if (v23 < 0) {
                    // 0x5ab88
                    g9 = g452;
                    g4 = v23 % 0x80000000;
                    g7 = *(int32_t *)g452;
                    if ((char)v23 == 0) {
                        goto lab_0x5aa83;
                    } else {
                        goto lab_0x5abaa;
                    }
                } else {
                    int32_t v24 = *(int32_t *)(v16 + 20); // 0x5aa25
                    g10 = v24;
                    if (v24 == 0) {
                        v18 = v23;
                        goto lab_0x5aa62;
                    } else {
                        // 0x5aa33
                        g9 = v4;
                        g7 = v4;
                        int32_t v25 = *(int32_t *)g450; // 0x5aa36
                        g9 = v25;
                        g8 = v4;
                        if (v25 != 0) {
                            while (true) {
                                int32_t v26 = function_2cc30(v25, (char *)v24); // 0x5aa4d
                                g4 = v26;
                                if (v26 == 0) {
                                    // break -> 0x5ab30
                                    break;
                                }
                                int32_t v27 = g8 + 16; // 0x5aa5a
                                g8 = v27;
                                if (v27 == 0) {
                                    goto lab_0x5aa5f_2;
                                }
                                int32_t v28 = *(int32_t *)v27; // 0x5aa40
                                g9 = v28;
                                if (v28 == 0) {
                                    goto lab_0x5aa5f_2;
                                }
                                v25 = v28;
                            }
                            // 0x5ab30
                            g4 = v11;
                            if (g450 == NULL) {
                                int32_t v29 = *(int32_t *)(g6 + 8); // 0x5acd5
                                g4 = v29;
                                g10 = 0;
                                v17 = v29;
                                goto lab_0x5aa66;
                            } else {
                                // 0x5ab3b
                                g9 = v11;
                                g7 = v11;
                                int32_t v30 = *(int32_t *)g450; // 0x5ab41
                                g4 = v30;
                                int32_t v31 = g8; // 0x5ab43
                                g9 = *(int32_t *)(v31 + 4);
                                int32_t v32 = *(int32_t *)(v31 + 12); // 0x5ab50
                                g10 = v32;
                                int32_t v33 = (v32 >= 0 ? v32 : v32 + 7) / 8; // 0x5ab5b
                                g9 = v33;
                                int32_t v34 = (int32_t)*(char *)(v33 + v30); // 0x5ab5e
                                g7 = v34;
                                int32_t v35 = v32 % 8; // 0x5ab70
                                g4 = v35;
                                if ((v34 & 1 << v35 % 32) == 0) {
                                    int32_t v36 = *(int32_t *)(g6 + 8); // 0x5ab77
                                    g4 = v36;
                                    g10 = 1;
                                    v17 = v36;
                                    goto lab_0x5aa66;
                                } else {
                                    goto lab_0x5abaa;
                                }
                            }
                        } else {
                            v18 = v23;
                            goto lab_0x5aa62;
                        }
                    }
                }
            }
        }
    }
  lab_0x5aaa0:
    // 0x5aaa0
    g9 = a1;
    int32_t v37 = *v5; // 0x5aabb
    g4 = v37;
    int32_t v38 = function_27ea0(v37, "@info/installed", 0, 0); // 0x5aac1
    g10 = v38;
    g8 = g9;
    int32_t v39 = v38 ^ v7; // 0x5aad0
    g4 = v39;
    g9 = v39;
    int32_t result; // 0x5ab0e
    if (v39 != 0) {
        int32_t v40 = function_26cf0(); // 0x5aadf
        g4 = v40;
        g6 = v40;
        g4 = function_26330(v40);
        function_27600(g6, "installed", g10, g8);
        result = (int32_t)g450;
        g4 = result;
        g9 = *(int32_t *)g450;
        g9 = *(int32_t *)g450;
    } else {
        result = v39;
    }
    // 0x5ab27
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x5aa5f_2:;
    int32_t v41 = *(int32_t *)(g6 + 8); // 0x5aa5f
    g4 = v41;
    v18 = v41;
    goto lab_0x5aa62;
  lab_0x5aa83:;
    int32_t v50 = g6; // 0x5aa83
    int32_t v51 = v50 + 24; // 0x5aa83
    g6 = v51;
    g7 = v19;
    g9 = v51 - v4;
    int32_t v52 = *(int32_t *)v51; // 0x5aa8e
    g4 = v52;
    int32_t v53 = *(int32_t *)(v50 + 28); // 0x5aa92
    g9 = v53;
    int32_t v54 = v53 | v52; // 0x5aa98
    g7 = v54;
    if (v54 == 0) {
        // break -> 0x5aaa0
        goto lab_0x5aaa0;
    }
    v16 = v51;
    v13 = v53;
    v12 = v52;
    goto lab_0x5aa08;
  lab_0x5abaa:
    // 0x5abaa
    g9 = a1;
    int32_t v55 = *v5; // 0x5abc5
    g4 = v55;
    int32_t v56 = function_27ea0(v55, "@info/installed", 0, 0); // 0x5abcb
    g4 = v56;
    g7 = a1;
    int32_t v57 = g6; // 0x5abd3
    int32_t v58 = *(int32_t *)v57 | v56; // 0x5abd3
    g4 = v58;
    int32_t v59 = *(int32_t *)(v57 + 4) | g9; // 0x5abd5
    g9 = v59;
    int32_t v60 = *v5; // 0x5abe8
    g4 = v60;
    g4 = function_27600(v60, "@info/installed", v58, v59);
    goto lab_0x5aa83;
  lab_0x5aa62:
    // 0x5aa62
    g10 = 0;
    g8 = 0;
    v17 = v18;
    goto lab_0x5aa66;
  lab_0x5aa66:
    // 0x5aa66
    g9 = g292;
    int32_t v42 = *(int32_t *)(g292 + 24); // 0x5aa6c
    g9 = v42;
    g7 = *(int32_t *)v42;
    if ((char)v17 != 0) {
        // 0x5ac00
        g9 = a1;
        int32_t v43 = *v5; // 0x5ac1b
        g4 = v43;
        int32_t v44 = function_27ea0(v43, "@info/installed", 0, 0); // 0x5ac21
        g4 = v44;
        g7 = a1;
        int32_t v45 = g6; // 0x5ac29
        int32_t v46 = *(int32_t *)v45 | v44; // 0x5ac29
        g4 = v46;
        int32_t v47 = *(int32_t *)(v45 + 4) | g9; // 0x5ac2b
        g9 = v47;
        int32_t v48 = *v5; // 0x5ac3e
        g4 = v48;
        function_27600(v48, "@info/installed", v46, v47);
        int32_t v49 = g10; // 0x5ac49
        g4 = v49;
        if ((char)v49 != 0) {
            // 0x5ac53
            g9 = v11;
            v15 = (int16_t *)(char)&g862;
            g7 = v20;
            g4 = *(int32_t *)g450;
        }
    }
    goto lab_0x5aa83;
}

// Address range: 0x5acdf - 0x5ad4b
int32_t function_5acdf(int32_t a1) {
    // 0x5acdf
    g10 = g4;
    g4 = function_26d40();
    g4 = function_7ab57(g10, (int32_t)&g870);
    int32_t v1 = g6; // 0x5ad03
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)a1 = (int32_t)&g221;
    *(int32_t *)(g6 + 4) = (int32_t)&g222;
    int32_t v2 = g4; // 0x5ad1a
    if (v2 != 0) {
        // 0x5ad1e
        g4 = function_28600(v2);
    }
    // 0x5ad26
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = (int32_t)&g186;
    g6 = v1;
    return g4;
}

// Address range: 0x5ad53 - 0x5ad5f
int32_t function_5ad53(void) {
    int32_t v1 = g4; // 0x5ad53
    g8 += v1;
    g6++;
    g4 = v1 | 48;
    uint32_t v2 = g9; // 0x5ad5a
    char * v3 = (char *)(g7 - 125 + v2); // 0x5ad5a
    *v3 = (char)(v2 / 256) + *v3;
    return g4;
}

// Address range: 0x5ad6a - 0x5ad9f
int32_t function_5ad6a(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x489f445); // 0x5ad6a
    *v1 = *v1 - 1;
    int32_t v2 = g4 & -24; // 0x5ad70
    g4 = v2;
    g7--;
    int32_t * v3 = (int32_t *)v2; // 0x5ad74
    *v3 = *v3 + v2;
    int32_t result = function_1bc40(); // 0x5ad9a
    g4 = result;
    return result;
}

// Address range: 0x5ada0 - 0x5adc6
int32_t function_5ada0(int32_t a1, unsigned char a2) {
    // 0x5ada0
    g4 = 1;
    int32_t v1 = g6; // 0x5ada8
    g6 = a1;
    g9 = a2;
    int32_t v2 = *(int32_t *)(a1 + 36); // 0x5adb3
    g7 = v2;
    if (v2 == 0) {
        // 0x5adc0
        g6 = v1;
        return 1;
    }
    // 0x5adba
    g4 = 0;
    if (a2 != 0) {
        // 0x5add0
        return 0;
    }
    // 0x5adc0
    g6 = v1;
    return 0;
}

// Address range: 0x5ae30 - 0x5ae3c
int32_t function_5ae30(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x1b824c4); // 0x5ae30
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x5ae36
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x5ae38
    char * v4 = (char *)(v3 + 93); // 0x5ae38
    *v4 = *v4 + (char)v3;
    return g4;
}

// Address range: 0x5ae40 - 0x5ae8d
int32_t function_5ae40(int32_t a1) {
    int32_t v1 = g6; // 0x5ae46
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 36); // 0x5ae4f
    if (v2 > 0) {
        // 0x5ae55
        g6 = v1;
        return g4;
    }
    int32_t v3; // 0x5ae6c
    if (v2 == 0) {
        // 0x5ae62
        if (*(char *)(a1 + 40) == 0) {
            // bb
            g4 = function_5aec0();
            v3 = g6;
        } else {
            v3 = a1;
        }
    } else {
        v3 = a1;
    }
    // 0x5ae68
    g10 = v3 + 12;
    int32_t v4; // 0x5ae71
    if (*(char *)(v3 + 16) % 2 != 0) {
        // bb237
        g4 = function_5aeb0();
        v4 = g6;
    } else {
        v4 = v3;
    }
    // 0x5ae71
    *(int32_t *)(v4 + 24) = v4;
    *(int32_t *)(g6 + 28) = 0x5a940;
    *(int32_t *)(g6 + 32) = 0;
    return g4;
}

// Address range: 0x5ae91 - 0x5aeac
int32_t function_5ae91(void) {
    int32_t * v1 = (int32_t *)(g7 + 0x44c7241c); // 0x5ae91
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x5ae97
    unsigned char v3 = (char)v2 & 4; // 0x5ae97
    int32_t v4 = (int32_t)v3 | v2 & -256; // 0x5ae97
    g4 = v4;
    char * v5 = (char *)v4; // 0x5ae99
    *v5 = *v5 + v3;
    int32_t v6 = g4; // 0x5ae9b
    char * v7 = (char *)v6; // 0x5ae9b
    *v7 = *v7 + (char)v6;
    int32_t result = function_5a940((int32_t)&g870); // 0x5ae9d
    g4 = result;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x5aeb0 - 0x5aeb3
int32_t function_5aeb0(void) {
    // 0x5aeb0
    return g4;
}

// Address range: 0x5aeb8 - 0x5aeba
int32_t function_5aeb8(void) {
    // 0x5aeb8
    return g4;
}

// Address range: 0x5aec0 - 0x5aed0
int32_t function_5aec0(void) {
    // 0x5aec0
    *(int32_t *)(g5 + 8) = (int32_t)"DLCMANAGER: RequestDlcUpdate has no new content.\n";
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x5aed4 - 0x5af35
int32_t function_5aed4(void) {
    // 0x5aed4
    int32_t v1; // ebp
    char * v2 = (char *)(v1 - 119); // 0x5aedf
    *v2 = (char)g9 + *v2;
    int32_t v3 = __asm_in(139); // 0x5aee2
    g4 = v3;
    uint32_t v4 = g6; // 0x5aee5
    g6 = 256 * (v4 / 256 | v3) & 0xff00 | v4 & -0xff01;
    char * v5 = (char *)(v3 - 0x38fff791); // 0x5aee7
    *v5 = (char)(g7 / 256) + *v5;
    int32_t v6 = g4; // 0x5aeed
    g4 = v6 + 201 & 255 | v6 + 1 & -256;
    __asm_outsd((int16_t)g9, g10);
    int32_t v7 = g4; // 0x5aef1
    char * v8 = (char *)v7; // 0x5aef1
    *v8 = *v8 | (char)v7;
    *(int32_t *)(g4 + 8) = 0;
    *(char *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(int32_t *)(g4 + 12) = (int32_t)&g223;
    *(int32_t *)(g4 + 36) = 0;
    *(char *)(g4 + 40) = 1;
    *(int32_t *)(g4 + 44) = 0;
    return g4;
}

// Address range: 0x5af40 - 0x5af45
int32_t function_5af40(int32_t a1) {
    // 0x5af40
    return g4;
}

// Address range: 0x5af50 - 0x5af78
int32_t function_5af50(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x5af53
    g9 = a1;
    g6 = a2;
    uint32_t v2 = *(int32_t *)(a1 + 16); // 0x5af5a
    g7 = v2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x5af5d
    g4 = v3;
    int32_t result = *(int32_t *)(a1 + 20) + v3; // 0x5af60
    g4 = result;
    if (v2 % 2 != 0) {
        int32_t v4 = *(int32_t *)result; // 0x5af68
        g9 = v4;
        g7 = *(int32_t *)(v2 - 1 + v4);
    }
    // 0x5af6e
    g6 = v1;
    return result;
}

// Address range: 0x5af80 - 0x5b07d
int32_t function_5af80(int32_t a1, int32_t result) {
    int32_t v1 = g8; // 0x5af83
    int32_t v2 = g10; // 0x5af84
    int32_t v3 = g6; // 0x5af85
    g4 = result;
    g10 = a1;
    if (result == 0) {
        // 0x5afb4
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    int32_t v4 = *(int32_t *)(a1 + 16); // 0x5af93
    g9 = v4;
    if (v4 < 1) {
        // 0x5afb4
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v5 = *(int32_t *)(a1 + 4); // 0x5af9a
    g7 = v5;
    g6 = 0;
    int32_t result3; // 0x5afbb
    int32_t v6; // 0x5afad
    if (*(int32_t *)v5 != result) {
        int32_t v7 = 0; // 0x5afad
        while (true) {
            // 0x5afad
            v6 = v7 + 1;
            g6 = v6;
            if (v6 == v4) {
                // break -> 0x5afb4
                break;
            }
            // 0x5afa8
            if (*(int32_t *)(4 * v6 + v5) == result) {
                if (v6 < 0) {
                    result3 = result;
                    goto lab_0x5afb4;
                } else {
                    if (v6 < v4) {
                        goto lab_0x5afc8;
                    } else {
                        result3 = result;
                        goto lab_0x5afb4;
                    }
                }
            }
            v7 = v6;
        }
        // 0x5afb4
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    v6 = 0;
    goto lab_0x5afc8;
  lab_0x5afc8:;
    int32_t v8 = 4 * v6; // 0x5afcb
    g8 = v8;
    int32_t v9 = v8 + *(int32_t *)(a1 + 24); // 0x5afd2
    g4 = v9;
    int32_t * v10 = (int32_t *)v9; // 0x5afd4
    *v10 = *v10 - 1;
    int32_t v11 = g10; // 0x5afd7
    int32_t result2 = *(int32_t *)(v11 + 24); // 0x5afd7
    g4 = result2;
    int32_t v12 = g6; // 0x5afda
    int32_t v13 = 4 * v12; // 0x5afda
    int32_t v14 = *(int32_t *)(v13 + result2); // 0x5afda
    g9 = v14;
    if (v14 >= 0 == (v14 != 0)) {
        // 0x5afb4
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result2;
    }
    int32_t v15 = *(int32_t *)(v11 + 16); // 0x5afe1
    g4 = v15;
    int32_t v16 = v15 - v12 - 1; // 0x5afe8
    g9 = v16;
    int32_t v17; // 0x5b00b
    int32_t v18; // 0x5b00b
    if (v16 >= 1) {
        int32_t v19 = *(int32_t *)(v11 + 4); // 0x5afef
        int32_t v20 = v13 + 4 + v19; // 0x5aff9
        g9 = v20;
        int32_t v21 = g8 + v19; // 0x5affd
        g4 = v21;
        g4 = function_2cb20(v21, v20, 4 * v16);
        v17 = g10;
        v18 = *(int32_t *)(v17 + 16);
        g4 = v18;
    } else {
        v17 = v11;
        v18 = v15;
    }
    int32_t v22 = v18 - 1; // 0x5b00e
    g4 = v22;
    *(int32_t *)(v17 + 16) = v22;
    int32_t v23 = g10; // 0x5b014
    int32_t v24 = *(int32_t *)(v23 + 36); // 0x5b014
    g4 = v24;
    int32_t v25 = g6; // 0x5b019
    int32_t v26 = v24 - v25 - 1; // 0x5b01b
    g9 = v26;
    int32_t v27; // 0x5b03e
    int32_t v28; // 0x5b03e
    if (v26 >= 1) {
        int32_t v29 = *(int32_t *)(v23 + 24); // 0x5b022
        int32_t v30 = 4 * v25 + 4 + v29; // 0x5b02c
        g9 = v30;
        int32_t v31 = g8 + v29; // 0x5b030
        g4 = v31;
        g4 = function_2cb20(v31, v30, 4 * v26);
        v27 = g10;
        v28 = *(int32_t *)(v27 + 36);
        g4 = v28;
    } else {
        v27 = v23;
        v28 = v24;
    }
    int32_t v32 = v28 - 1; // 0x5b041
    g4 = v32;
    *(int32_t *)(v27 + 36) = v32;
    int32_t v33 = g10; // 0x5b047
    int32_t v34 = *(int32_t *)(v33 + 56); // 0x5b047
    g4 = v34;
    if (v34 < 1) {
        result3 = v34;
      lab_0x5afb4:
        // 0x5afb4
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result3;
    }
    // 0x5b052
    g9 = 0;
    int32_t v35 = 0; // 0x5b058
    while (true) {
        int32_t v36 = 4 * v35; // 0x5b058
        g4 = v36;
        int32_t v37 = *(int32_t *)(v33 + 44) + v36; // 0x5b05f
        g4 = v37;
        int32_t * v38 = (int32_t *)v37; // 0x5b062
        uint32_t v39 = *v38; // 0x5b062
        g7 = v39;
        int32_t v40; // 0x5b06d
        int32_t v41; // 0x5b070
        if (v39 >= g6) {
            int32_t v42 = v39 - 1; // 0x5b068
            g7 = v42;
            *v38 = v42;
            v41 = g10;
            v40 = g9;
        } else {
            v41 = v33;
            v40 = v35;
        }
        int32_t v43 = v40 + 1; // 0x5b06d
        g9 = v43;
        if (*(int32_t *)(v41 + 56) <= v43) {
            // break -> 0x5b075
            break;
        }
        v33 = v41;
        v35 = v43;
    }
    // 0x5b075
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x5b080 - 0x5b124
int32_t function_5b080(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x5b083
    int32_t v2 = g10; // 0x5b084
    int32_t v3 = g6; // 0x5b085
    g10 = a1;
    int32_t v4 = *(int32_t *)(a1 + 100); // 0x5b08c
    g6 = v4;
    if (v4 < 1) {
      lab_0x5b0d8:;
        uint32_t v5 = *(int32_t *)(a1 + 120); // 0x5b0d8
        g7 = v5;
        g8 = 0;
        if (v5 >= 1) {
            // 0x5b0e1
            g6 = 0;
            int32_t v6 = 0; // 0x5b0f3
            int32_t v7 = a1; // 0x5b0f0
            while (true) {
                int32_t v8 = *(int32_t *)(v7 + 108); // 0x5b0f0
                g4 = v8;
                int32_t v9 = *(int32_t *)(v8 + 4 * v6); // 0x5b0f3
                g8 = v9;
                int32_t v10 = function_25190(v9); // 0x5b0f9
                g4 = a2;
                int32_t v11 = function_2cc30(a2, (char *)v10); // 0x5b108
                g4 = v11;
                if (v11 == 0) {
                    // break -> 0x5b0c9
                    break;
                }
                int32_t v12 = g6 + 1; // 0x5b0e8
                g6 = v12;
                int32_t v13 = g10; // 0x5b0eb
                if (v12 >= *(int32_t *)(v13 + 120)) {
                    // 0x5b118
                    g6 = v3;
                    g4 = 0;
                    g10 = v2;
                    g8 = v1;
                    return 0;
                }
                v6 = v12;
                v7 = v13;
            }
        }
    } else {
        // 0x5b093
        g6 = 0;
        int32_t v14 = 0; // 0x5b0ab
        while (true) {
            int32_t v15 = *(int32_t *)(a1 + 88); // 0x5b0a8
            g4 = v15;
            int32_t v16 = *(int32_t *)(v15 + 4 * v14); // 0x5b0ab
            g8 = v16;
            int32_t v17 = function_25190(v16); // 0x5b0b1
            g4 = a2;
            int32_t v18 = function_2cc30(a2, (char *)v17); // 0x5b0c0
            g4 = v18;
            if (v18 == 0) {
                // break -> 0x5b0c9
                break;
            }
            int32_t v19 = g6 + 1; // 0x5b0a0
            g6 = v19;
            int32_t v20 = g10; // 0x5b0a3
            if (*(int32_t *)(v20 + 100) <= v19) {
                a1 = v20;
                goto lab_0x5b0d8;
            }
            v14 = v19;
            a1 = v20;
        }
    }
    int32_t result = g8; // 0x5b0cc
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x5b130 - 0x5b13c
int32_t function_5b130(int32_t a1) {
    // 0x5b130
    g4 = a1;
    *(char *)(a1 + 64) = 1;
    return g4;
}

// Address range: 0x5b140 - 0x5b228
int32_t function_5b140(int32_t a1) {
    // 0x5b140
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g224;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)(g4 + 24) = 0;
    *(int32_t *)(g4 + 28) = 0;
    *(int32_t *)(g4 + 32) = 0;
    *(int32_t *)(g4 + 36) = 0;
    *(int32_t *)(g4 + 40) = 0;
    *(int32_t *)(g4 + 44) = 0;
    *(int32_t *)(g4 + 48) = 0;
    *(int32_t *)(g4 + 52) = 0;
    *(int32_t *)(g4 + 56) = 0;
    *(int32_t *)(g4 + 60) = 0;
    *(char *)(g4 + 64) = 0;
    *(char *)(g4 + 65) = 0;
    *(int32_t *)(g4 + 68) = 0;
    *(int32_t *)(g4 + 72) = 0;
    *(int32_t *)(g4 + 76) = 0;
    *(int32_t *)(g4 + 80) = 0;
    *(int32_t *)(g4 + 84) = 0;
    *(int32_t *)(g4 + 88) = 0;
    *(int32_t *)(g4 + 92) = 0;
    *(int32_t *)(g4 + 96) = 0;
    *(int32_t *)(g4 + 100) = 0;
    *(int32_t *)(g4 + 104) = 0;
    *(int32_t *)(g4 + 108) = 0;
    *(int32_t *)(g4 + 112) = 0;
    *(int32_t *)(g4 + 116) = 0;
    *(int32_t *)(g4 + 120) = 0;
    *(int32_t *)(g4 + 124) = 0;
    return g4;
}

// Address range: 0x5b2b3 - 0x5b2bc
int32_t function_5b2b3(void) {
    // 0x5b2b3
    *(int32_t *)(g6 + 92) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x5b2bc - 0x5b2df
int32_t function_5b2bc(void) {
    // 0x5b2bc
    *(int32_t *)(g6 + 104) = g4;
    int32_t v1 = g6 + 88; // 0x5b2bf
    g4 = v1;
    g4 = function_56d20(v1);
    int32_t v2 = g6; // 0x5b2ca
    int32_t v3 = *(int32_t *)(v2 + 76); // 0x5b2ca
    g4 = v3;
    *(int32_t *)(v2 + 80) = 0;
    int32_t v4 = *(int32_t *)(g6 + 68); // 0x5b2d6
    g4 = v4;
    int32_t v5; // 0x5b2d9
    if (v3 < 0) {
        // bb
        v5 = function_5b301();
        g4 = v5;
    } else {
        v5 = v4;
    }
    int32_t result; // 0x5b2dd
    if (v5 == 0) {
        // bb230
        result = function_5b2f8();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x5b2df
    return result;
}

// Address range: 0x5b2f8 - 0x5b301
int32_t function_5b2f8(void) {
    // 0x5b2f8
    *(int32_t *)(g6 + 72) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x5b301 - 0x5b324
int32_t function_5b301(void) {
    // 0x5b301
    *(int32_t *)(g6 + 84) = g4;
    int32_t v1 = g6 + 68; // 0x5b304
    g4 = v1;
    g4 = function_56d20(v1);
    int32_t v2 = g6; // 0x5b30f
    int32_t v3 = *(int32_t *)(v2 + 52); // 0x5b30f
    g4 = v3;
    *(int32_t *)(v2 + 56) = 0;
    int32_t v4 = *(int32_t *)(g6 + 44); // 0x5b31b
    g4 = v4;
    int32_t v5; // 0x5b31e
    if (v3 < 0) {
        // bb
        v5 = function_5b346();
        g4 = v5;
    } else {
        v5 = v4;
    }
    int32_t result; // 0x5b322
    if (v5 == 0) {
        // bb4
        result = function_5b33d();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x5b324
    return result;
}

// Address range: 0x5b33d - 0x5b346
int32_t function_5b33d(void) {
    // 0x5b33d
    *(int32_t *)(g6 + 48) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x5b346 - 0x5b369
int32_t function_5b346(void) {
    // 0x5b346
    *(int32_t *)(g6 + 60) = g4;
    int32_t v1 = g6 + 44; // 0x5b349
    g4 = v1;
    g4 = function_2bf50(v1);
    int32_t v2 = g6; // 0x5b354
    int32_t v3 = *(int32_t *)(v2 + 32); // 0x5b354
    g7 = v3;
    *(int32_t *)(v2 + 36) = 0;
    int32_t v4 = *(int32_t *)(g6 + 24); // 0x5b35e
    g4 = v4;
    int32_t v5; // 0x5b363
    if (v3 < 0) {
        // bb
        v5 = function_5b38b();
        g4 = v5;
    } else {
        v5 = v4;
    }
    int32_t result; // 0x5b367
    if (v5 == 0) {
        // bb4
        result = function_5b382();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x5b369
    return result;
}

// Address range: 0x5b382 - 0x5b38b
int32_t function_5b382(void) {
    // 0x5b382
    *(int32_t *)(g6 + 28) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x5b38b - 0x5b3ae
int32_t function_5b38b(void) {
    // 0x5b38b
    *(int32_t *)(g6 + 40) = g4;
    int32_t v1 = g6 + 24; // 0x5b38e
    g4 = v1;
    g4 = function_2bf50(v1);
    int32_t v2 = g6; // 0x5b399
    int32_t v3 = *(int32_t *)(v2 + 12); // 0x5b399
    g9 = v3;
    *(int32_t *)(v2 + 16) = 0;
    int32_t v4 = *(int32_t *)(g6 + 4); // 0x5b3a3
    g4 = v4;
    int32_t v5; // 0x5b3a8
    if (v3 < 0) {
        // bb
        v5 = function_5b3d0((int32_t)&g870, (int32_t)&g870);
        g4 = v5;
    } else {
        v5 = v4;
    }
    int32_t result; // 0x5b3ac
    if (v5 == 0) {
        // bb4
        result = function_5b3c7();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x5b3ae
    return result;
}

// Address range: 0x5b3c7 - 0x5b3d0
int32_t function_5b3c7(void) {
    // 0x5b3c7
    *(int32_t *)(g6 + 8) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x5b3d0 - 0x5b3e3
int32_t function_5b3d0(int32_t a1, int32_t a2) {
    // 0x5b3d0
    *(int32_t *)(g6 + 20) = g4;
    *(int32_t *)(g5 + 8) = g6 + 4;
    g6 = a1;
    g5 = a2;
    int32_t result = function_5b870((int32_t)&g870); // 0x5b3de
    g4 = result;
    return result;
}

// Address range: 0x5b3e3 - 0x5b46c
int32_t function_5b3e3(void) {
    // 0x5b3e3
    g9 = g6 + 108;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_56d20(g9);
    int32_t * v1 = (int32_t *)(g5 - 12); // 0x5b3f1
    int32_t v2 = *v1; // 0x5b3f1
    g4 = v2;
    g9 = g6 + 88;
    *v1 = v2;
    g4 = function_2bac0(g9);
    int32_t * v3 = (int32_t *)(g5 - 12); // 0x5b402
    int32_t v4 = *v3; // 0x5b402
    g4 = v4;
    g9 = g6 + 68;
    *v3 = v4;
    g4 = function_2bac0(g9);
    int32_t * v5 = (int32_t *)(g5 - 12); // 0x5b413
    int32_t v6 = *v5; // 0x5b413
    g4 = v6;
    g9 = g6 + 44;
    *v5 = v6;
    g4 = function_49960(g9);
    int32_t * v7 = (int32_t *)(g5 - 12); // 0x5b424
    int32_t v8 = *v7; // 0x5b424
    g4 = v8;
    g9 = g6 + 24;
    *v7 = v8;
    g4 = function_49960(g9);
    int32_t v9 = *(int32_t *)(g5 - 12); // 0x5b435
    g4 = v9;
    while (true) {
        // 0x5b438
        g6 += 4;
        *(int32_t *)(g5 - 12) = v9;
        g4 = function_5b8b0(g6);
        int32_t v10 = *(int32_t *)(g5 - 12); // 0x5b446
        g4 = v10;
        int32_t v11 = function_7ab57(v10, (int32_t)&g870); // 0x5b44c
        g4 = v11;
        g6 += 4;
        *(int32_t *)(g5 - 12) = v11;
        g4 = function_5b870(g6);
        int32_t v12 = *(int32_t *)(g5 - 12); // 0x5b45f
        g4 = v12;
        int32_t v13 = function_7ab57(v12, (int32_t)&g870); // 0x5b465
        g4 = v13;
        v9 = v13;
    }
}

// Address range: 0x5b46c - 0x5b47f
int32_t function_5b46c(void) {
    // 0x5b46c
    g9 = g6 + 24;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_2bf50(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x5b47a
    g4 = result;
    return result;
}

// Address range: 0x5b47f - 0x5b481
int32_t function_5b47f(void) {
    // 0x5b47f
    return g4;
}

// Address range: 0x5b481 - 0x5b494
int32_t function_5b481(void) {
    // 0x5b481
    g9 = g6 + 44;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_2bf50(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x5b48f
    g4 = result;
    return result;
}

// Address range: 0x5b494 - 0x5b496
int32_t function_5b494(void) {
    // 0x5b494
    return g4;
}

// Address range: 0x5b496 - 0x5b4ac
int32_t function_5b496(void) {
    // 0x5b496
    g9 = g6 + 68;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_56d20(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x5b4a4
    g4 = result;
    return result;
}

// Address range: 0x5b4ac - 0x5b4b1
int32_t function_5b4ac(void) {
    // 0x5b4ac
    return g4;
}

// Address range: 0x5b4b1 - 0x5b4c7
int32_t function_5b4b1(void) {
    // 0x5b4b1
    g9 = g6 + 88;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_56d20(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x5b4bf
    g4 = result;
    return result;
}

// Address range: 0x5b4c7 - 0x5b4cc
int32_t function_5b4c7(void) {
    // 0x5b4c7
    return g4;
}

// Address range: 0x5b4d0 - 0x5b560
int32_t function_5b4d0(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t v2; // ebp
    g5 = &v2;
    int32_t v3 = g10; // 0x5b4d3
    int32_t v4 = g6; // 0x5b4d4
    g7 = a2;
    g6 = a1;
    if (a2 == 0) {
        // 0x5b53a
        g6 = v4;
        g10 = v3;
        return g4;
    }
    int32_t v5 = *(int32_t *)(a1 + 16); // 0x5b4e2
    g9 = v5;
    int32_t v6 = a1 + 4;
    int32_t v7; // 0x5b4fd
    if (v5 < 1) {
        goto lab_0x5b504;
    } else {
        int32_t v8 = *(int32_t *)v6; // 0x5b4e9
        g10 = v8;
        g4 = 0;
        if (*(int32_t *)v8 != a2) {
            int32_t v9 = 0; // 0x5b4fd
            while (true) {
                // 0x5b4fd
                v7 = v9 + 1;
                g4 = v7;
                if (v7 == v5) {
                    // break -> 0x5b504
                    break;
                }
                // 0x5b4f8
                if (*(int32_t *)(4 * v7 + v8) == a2) {
                    if (v7 < 0) {
                        goto lab_0x5b504;
                    } else {
                        if (v7 < v5) {
                            goto lab_0x5b550;
                        } else {
                            goto lab_0x5b504;
                        }
                    }
                }
                v9 = v7;
            }
            goto lab_0x5b504;
        } else {
            v7 = 0;
            goto lab_0x5b550;
        }
    }
  lab_0x5b504:
    // 0x5b504
    g4 = v6;
    function_5b9e0(v6, v5, &v1);
    int32_t v10; // bp-16
    int32_t v11 = &v10; // 0x5b51a
    g4 = v11;
    v10 = 1;
    int32_t v12 = g6; // 0x5b528
    int32_t v13 = *(int32_t *)(v12 + 36); // 0x5b528
    g4 = v13;
    int32_t v14 = v12 + 24; // 0x5b52b
    g6 = v14;
    int32_t result = function_49b30(v14, v13, v11); // 0x5b535
    g4 = result;
    // 0x5b53a
    g6 = v4;
    g10 = v3;
    return result;
  lab_0x5b550:;
    int32_t v15 = *(int32_t *)(a1 + 24); // 0x5b550
    g9 = v15;
    int32_t v16 = 4 * v7 + v15; // 0x5b553
    g4 = v16;
    int32_t * v17 = (int32_t *)v16; // 0x5b556
    *v17 = *v17 + 1;
    g6 = v4;
    g10 = v3;
    return g4;
}

// Address range: 0x5b560 - 0x5b5fe
int32_t function_5b560(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t v2 = g8; // 0x5b563
    int32_t v3 = g10; // 0x5b564
    int32_t v4 = g6; // 0x5b565
    g4 = a2;
    g8 = a1;
    if (a2 == 0) {
        // 0x5b5d8
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    int32_t result = function_25190(a2); // 0x5b576
    g4 = result;
    if (result == 0) {
        // 0x5b5d8
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    // 0x5b582
    if (*(char *)result == 0) {
        // 0x5b5d8
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result;
    }
    int32_t v5 = g8; // 0x5b587
    int32_t v6 = *(int32_t *)(v5 + 100); // 0x5b587
    g4 = v6;
    if (v6 < 1) {
      lab_0x5b5e0:;
        int32_t v7 = &v1; // 0x5b5e0
        g9 = v7;
        int32_t v8 = v5 + 88; // 0x5b5e3
        g8 = v8;
        int32_t result2 = function_2bdb0(v8, v6, v7); // 0x5b5f1
        g4 = result2;
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result2;
    }
    // 0x5b58e
    g10 = 0;
    int32_t v9 = 0; // 0x5b5a2
    while (true) {
        int32_t v10 = 4 * v9; // 0x5b5a2
        g6 = v10;
        int32_t v11 = *(int32_t *)(v5 + 88) + v10; // 0x5b5a9
        g6 = v11;
        int32_t v12 = *(int32_t *)v11; // 0x5b5ac
        g4 = v12;
        int32_t v13 = function_25190(v12); // 0x5b5b1
        g4 = result;
        int32_t v14 = function_2cc30(result, (char *)v13); // 0x5b5c0
        g4 = v14;
        if (v14 == 0) {
            // break -> 0x5b5c9
            break;
        }
        int32_t v15 = g8; // 0x5b598
        int32_t v16 = *(int32_t *)(v15 + 100); // 0x5b598
        g4 = v16;
        int32_t v17 = g10 + 1; // 0x5b59b
        g10 = v17;
        if (v16 <= v17) {
            v6 = v16;
            v5 = v15;
            goto lab_0x5b5e0;
        }
        v5 = v15;
        v9 = v17;
    }
    int32_t v18 = *(int32_t *)g6; // 0x5b5c9
    g4 = v18;
    function_28600(v18);
    g4 = v1;
    *(int32_t *)g6 = v1;
    // 0x5b5d8
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return g4;
}

// Address range: 0x5b600 - 0x5b724
int32_t function_5b600(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    g4 = a2;
    g6 = a1;
    int32_t v2 = function_25190(a2); // 0x5b612
    g4 = v2;
    int32_t v3 = function_2cc30((int32_t)"OnNetLanConnectionlessPacket", (char *)v2); // 0x5b622
    g4 = v3;
    if (v3 == 0) {
        int32_t v4 = function_5b738((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x5b629
        g4 = v4;
    }
    int32_t v5 = g6; // 0x5b62f
    int32_t v6; // 0x5b642
    if (*(char *)(v5 + 64) != 0) {
        // 0x5b635
        if (*(char *)(v5 + 65) == 0) {
            int32_t v7 = function_5b785((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x5b639
            g4 = v7;
            v6 = g6;
        } else {
            v6 = v5;
        }
    } else {
        v6 = v5;
    }
    // 0x5b63f
    *(char *)(v6 + 64) = 1;
    g8 = v1;
    int32_t v8 = g6 + 108; // 0x5b64d
    g4 = v8;
    function_2bdb0(v8, 0, (int32_t)&v1);
    g7 = v1;
    g9 = *(int32_t *)&g273;
    int32_t v9; // bp-32
    int32_t v10 = &v9; // 0x5b674
    g4 = v10;
    v9 = 0;
    int32_t v11 = g6; // 0x5b682
    int32_t v12 = v11 + 44; // 0x5b689
    g4 = v12;
    g4 = function_49b30(v12, *(int32_t *)(v11 + 56), v10);
    int32_t v13 = g6; // 0x5b6c4
    int32_t * v14 = (int32_t *)(v13 + 56); // 0x5b6c4
    int32_t v15 = *v14; // 0x5b6c4
    g9 = v15;
    int32_t * v16 = (int32_t *)(v13 + 44); // 0x5b6c7
    int32_t v17 = *v16; // 0x5b6c7
    g4 = v17;
    int32_t v18 = v15 - 1; // 0x5b6ca
    g9 = v18;
    uint32_t v19 = *(int32_t *)(v17 + 4 * v18); // 0x5b6cd
    g4 = v19;
    while (v19 < *(int32_t *)(v13 + 16)) {
        int32_t v20 = *(int32_t *)(v13 + 4); // 0x5b6a0
        g9 = v20;
        g7 = v1;
        int32_t v21 = *(int32_t *)(v20 + 4 * v19); // 0x5b6a6
        g4 = v21;
        g9 = *(int32_t *)v21;
        int32_t v22 = 4 * *v14 - 4; // 0x5b6b7
        g4 = v22;
        int32_t v23 = *v16 + v22; // 0x5b6be
        g4 = v23;
        int32_t * v24 = (int32_t *)v23; // 0x5b6c1
        *v24 = *v24 + 1;
        v13 = g6;
        v14 = (int32_t *)(v13 + 56);
        v15 = *v14;
        g9 = v15;
        v16 = (int32_t *)(v13 + 44);
        v17 = *v16;
        g4 = v17;
        v18 = v15 - 1;
        g9 = v18;
        v19 = *(int32_t *)(v17 + 4 * v18);
        g4 = v19;
    }
    // 0x5b6d5
    g4 = *(int32_t *)(v13 + 80);
    *v14 = v18;
    *(char *)(g6 + 64) = 0;
    int32_t v25 = g4; // 0x5b6df
    int32_t v26; // 0x5b6e1
    if (v25 < 1) {
        // bb250
        v26 = function_5b7b0();
        g4 = v26;
    } else {
        v26 = v25;
    }
    int32_t v27 = *(int32_t *)(g6 + 68); // 0x5b6e7
    g9 = v27;
    int32_t v28 = v26 - 1; // 0x5b6ea
    g4 = v28;
    g10 = *(int32_t *)v27;
    int32_t v29; // 0x5b6f8
    int32_t v30; // 0x5b6ef
    if (v28 == 0) {
        // bb252
        v30 = function_5b781();
        g4 = v30;
        v29 = g9;
    } else {
        v29 = v27;
        v30 = v28;
    }
    int32_t v31 = v29 + 4; // 0x5b6ff
    g4 = v31;
    g4 = function_2cb20(v29, v31, 4 * v30);
    int32_t * v32 = (int32_t *)(g6 + 80); // 0x5b70b
    int32_t v33 = *v32 - 1; // 0x5b70e
    g4 = v33;
    *v32 = v33;
    int32_t result = *(int32_t *)g6; // 0x5b714
    g4 = result;
    return result;
}

// Address range: 0x5b724 - 0x5b72c
int32_t function_5b724(void) {
    int32_t result = function_28600(g8); // 0x5b727
    g4 = result;
    return result;
}

// Address range: 0x5b72c - 0x5b734
int32_t function_5b72c(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x5b72c
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x5b738 - 0x5b781
int32_t function_5b738(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = *(int32_t *)(g5 + 12); // 0x5b738
    g4 = v1;
    int32_t v2 = function_27e60(v1, (int32_t)"rawpkt", 0); // 0x5b74e
    g4 = v2;
    g10 = v2;
    int32_t v3 = *(int32_t *)(g5 + 12); // 0x5b75d
    g4 = v3;
    function_28600(v3);
    g4 = g284;
    g9 = g284;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g284;
}

// Address range: 0x5b781 - 0x5b785
int32_t function_5b781(void) {
    // 0x5b781
    g864 = false;
    g4 = 0;
    return 0;
}

// Address range: 0x5b785 - 0x5b7a6
int32_t function_5b785(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5 + 12; // 0x5b785
    g4 = v1;
    int32_t v2 = g6; // 0x5b78c
    int32_t v3 = *(int32_t *)(v2 + 80); // 0x5b78c
    g4 = v3;
    int32_t v4 = v2 + 68; // 0x5b78f
    g6 = v4;
    int32_t result = function_2bdb0(v4, v3, v1); // 0x5b799
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x5b7b0 - 0x5b7eb
int32_t function_5b7b0(void) {
    int32_t v1 = g6; // 0x5b7b0
    uint32_t v2 = *(int32_t *)(v1 + 100); // 0x5b7b0
    g4 = v2;
    g10 = 0;
    int32_t v3; // 0x5b7d6
    if (v2 >= 1) {
        int32_t v4 = *(int32_t *)(v1 + 88); // 0x5b7c0
        g4 = v4;
        int32_t v5 = *(int32_t *)v4; // 0x5b7c3
        g4 = v5;
        g4 = function_28600(v5);
        int32_t v6 = g10 + 1; // 0x5b7ce
        g10 = v6;
        int32_t v7 = g6; // 0x5b7d1
        v3 = v7;
        while (*(int32_t *)(v7 + 100) > v6) {
            // 0x5b7c0
            v4 = *(int32_t *)(v7 + 88);
            g4 = v4;
            v5 = *(int32_t *)(v4 + 4 * v6);
            g4 = v5;
            g4 = function_28600(v5);
            v6 = g10 + 1;
            g10 = v6;
            v7 = g6;
            v3 = v7;
        }
    } else {
        v3 = v1;
    }
    // 0x5b7d6
    g10 = *(int32_t *)(v3 + 96);
    *(int32_t *)(v3 + 100) = 0;
    int32_t result = *(int32_t *)(g6 + 88); // 0x5b7e0
    g4 = result;
    return result;
}

// Address range: 0x5b83e - 0x5b847
int32_t function_5b83e(void) {
    // 0x5b83e
    *(int32_t *)(g6 + 112) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x5b847 - 0x5b857
int32_t function_5b847(void) {
    // 0x5b847
    *(int32_t *)(g6 + 124) = g4;
    if (g8 != 0) {
        // bb
        g4 = function_5b724();
    }
    int32_t result = function_5b72c((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x5b852
    g4 = result;
    return result;
}

// Address range: 0x5b85a - 0x5b85b
int32_t function_5b85a(void) {
    // 0x5b85a
    return g4;
}

// Address range: 0x5b867 - 0x5b870
int32_t function_5b867(void) {
    // 0x5b867
    g4 &= -24;
    int32_t result = function_900001f2(); // 0x5b869
    g4 = result;
    return result;
}

// Address range: 0x5b870 - 0x5b887
int32_t function_5b870(int32_t a1) {
    // 0x5b870
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x5b87a
    g4 = v1;
    int32_t v2; // 0x5b881
    if (v1 < 0) {
        // bb
        g4 = function_5b8a6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x5b881
    g4 = v3;
    int32_t result; // 0x5b885
    if (v3 == 0) {
        // bb7
        result = function_5b89f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x5b887
    return result;
}

// Address range: 0x5b89f - 0x5b8a6
int32_t function_5b89f(void) {
    // 0x5b89f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x5b8a6 - 0x5b8ac
int32_t function_5b8a6(int32_t a1, int32_t a2) {
    // 0x5b8a6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x5b8b0 - 0x5b8ce
int32_t function_5b8b0(int32_t a1) {
    // 0x5b8b0
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x5b8c6
    g4 = result;
    return result;
}

// Address range: 0x5b920 - 0x5b95f
int32_t function_5b920(int32_t a1, int32_t a2) {
    // 0x5b920
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x5b92b
    g10 = v1;
    int32_t v2 = *(int32_t *)(a1 + 4); // 0x5b932
    g4 = v2;
    int32_t v3 = v2 + a2; // 0x5b938
    g7 = v3;
    int32_t v4; // 0x5b952
    int32_t v5; // 0x5b93c
    if (v1 != 0) {
        // bb
        v5 = function_5b988();
        g4 = v5;
        v4 = g7;
    } else {
        v4 = v3;
        v5 = v2;
    }
    // 0x5b93e
    g9 = 8;
    int32_t v6 = v5 == 0 ? 8 : v5; // 0x5b945
    g4 = v6;
    int32_t v7; // 0x5b958
    if (v4 > v6) {
        // 0x5b94c
        g10 = v1;
        int32_t v8 = 2 * v6; // 0x5b950
        while (v4 > v8) {
            // 0x5b950
            v8 *= 2;
        }
        // 0x5b956
        g4 = v8;
        v7 = v8;
    } else {
        v7 = v6;
    }
    int32_t v9 = g6; // 0x5b956
    int32_t v10 = *(int32_t *)v9; // 0x5b956
    g9 = v10;
    *(int32_t *)(v9 + 4) = v7;
    int32_t result; // 0x5b95d
    if (v10 == 0) {
        // bb18
        result = function_5b9b8();
        g4 = result;
    } else {
        // 0x5b956
        result = g4;
    }
    // 0x5b95f
    return result;
}

// Address range: 0x5b988 - 0x5b9b8
int32_t function_5b988(void) {
    uint32_t v1 = g7; // 0x5b988
    int32_t v2 = v1 - 1; // 0x5b988
    uint32_t v3 = g10; // 0x5b990
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x5b990
    int64_t v5 = v3; // 0x5b990
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x5b995
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x5b9a0
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x5b9a9
    while (v1 > v8) {
        // 0x5b9a0
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x5b9af
    g4 = v8;
    int32_t v9 = g6; // 0x5b9af
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x5b9b8 - 0x5b9b9
int32_t function_5b9b8(void) {
    // 0x5b9b8
    return g4;
}

// Address range: 0x5b9e0 - 0x5ba66
int32_t function_5b9e0(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x5b9e6
    g6 = a1;
    int32_t v2 = g10; // 0x5b9ec
    g10 = a2;
    int32_t v3 = g8; // 0x5b9f2
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x5b9f5
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x5b9f8
    g9 = v5;
    int32_t v6; // 0x5ba01
    int32_t v7; // 0x5ba61
    int32_t v8; // 0x5ba61
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x5ba56
        g4 = v9;
        g4 = function_5b920(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x5b9ff
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x5ba08
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x5ba10
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x5ba36
    if (v11 < 1) {
        // 0x5b9ff
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x5ba21
        int32_t v14 = v13 + 4 + 4 * g10; // 0x5ba28
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x5ba34
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x5ba36
    g9 = v16;
    if (v16 != 0) {
        // 0x5ba3a
        g4 = (int32_t)a3;
        int32_t v17 = *a3; // 0x5ba3d
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x5ba41
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x5bad0 - 0x5bae0
int32_t function_5bad0(void) {
    int32_t v1 = g6; // 0x5bad0
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x5bad0
    g4 = v2;
    *(int32_t *)(v1 + 20) = v2;
    int32_t v3; // ebp
    g6 = *(int32_t *)(v3 - 8);
    g10 = *(int32_t *)(v3 - 4);
    return g4;
}

// Address range: 0x5bb30 - 0x5bb70
int32_t function_5bb30(void) {
    // 0x5bb30
    g4 = g292;
    uint32_t v1 = *(int32_t *)(g292 + 4); // 0x5bb3b
    g4 = v1;
    g9 = 0;
    int32_t result; // 0x5bb65
    if (v1 < 4) {
        // 0x5bb65
        result = (int32_t)*(char *)(v1 + (int32_t)&g226);
        g9 = result;
    } else {
        result = 0;
    }
    // 0x5bb6c
    g4 = result;
    return result;
}

// Address range: 0x5bbd5 - 0x5bbe3
int32_t function_5bbd5(void) {
    int32_t result = g4 & ((int32_t)&g862 | -256); // 0x5bbd5
    g4 = result;
    int32_t v1 = g7; // 0x5bbd7
    char v2 = *(char *)(v1 - 0xb37b); // 0x5bbd7
    g7 = (int32_t)((char)v1 + v2) | v1 & -256;
    return result;
}

// Address range: 0x5bc63 - 0x5bc64
int32_t function_5bc63(void) {
    // 0x5bc63
    return g4;
}

// Address range: 0x5bc7b - 0x5bc83
int32_t function_5bc7b(void) {
    // 0x5bc7b
    bool v1; // of
    if (!v1) {
        // 0x5bc85
        return g4;
    }
    int32_t v2 = g7; // 0x5bc7d
    char * v3 = (char *)(v2 - 0x72fbdba4); // 0x5bc7d
    *v3 = *v3 + (char)v2;
    return g4;
}

// Address range: 0x5bc87 - 0x5bc9c
int32_t function_5bc87(void) {
    int32_t v1 = g4; // 0x5bc87
    int32_t * v2 = (int32_t *)(v1 + 0x87183b8 + 8 * v1); // 0x5bc87
    *v2 = *v2 + 1;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    char * v3 = (char *)(g7 - 0x38f3dbb4); // 0x5bc91
    unsigned char v4 = *v3; // 0x5bc91
    *v3 = v4 / 2 | 128 * v4;
    int32_t v5 = g4; // 0x5bc97
    int32_t result = v5 + 36 & 255 | v5 & -256; // 0x5bc97
    g4 = result;
    return result;
}

// Address range: 0x5bcb1 - 0x5bcb2
int32_t function_5bcb1(void) {
    // 0x5bcb1
    return g4;
}

// Address range: 0x5bcd3 - 0x5bcdf
int32_t function_5bcd3(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g833); // 0x5bcd3
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5bcd9
    char * v3 = (char *)(v2 + 94); // 0x5bcd9
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x5bcf8 - 0x5bd10
int32_t function_5bcf8(void) {
    // 0x5bcf8
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 164);
    *(char *)(v1 - 173) = 1;
    g4 = *(int32_t *)(v1 - 160);
    int32_t result = function_5bc63(); // 0x5bd0b
    g4 = result;
    return result;
}

// Address range: 0x5bd1b - 0x5bd27
int32_t function_5bd1b(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g833); // 0x5bd1b
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5bd21
    char * v3 = (char *)(v2 + 94); // 0x5bd21
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x5bd44 - 0x5bd45
int32_t function_5bd44(void) {
    // 0x5bd44
    return g4;
}

// Address range: 0x5bd4f - 0x5bd5b
int32_t function_5bd4f(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g38); // 0x5bd4f
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5bd55
    char * v3 = (char *)(v2 + 94); // 0x5bd55
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x5bdd7 - 0x5bddc
int32_t function_5bdd7(void) {
    int32_t result = function_5bd44(); // 0x5bdd7
    g4 = result;
    return result;
}

// Address range: 0x5bdf9 - 0x5be07
int32_t function_5bdf9(void) {
    int32_t result = g4 & ((int32_t)&g862 | -256); // 0x5bdf9
    g4 = result;
    int32_t v1 = g7; // 0x5bdfb
    char v2 = *(char *)(v1 - 0x13f7b); // 0x5bdfb
    g7 = (int32_t)((char)v1 + v2) | v1 & -256;
    return result;
}

// Address range: 0x5be89 - 0x5be92
int32_t function_5be89(void) {
    int32_t v1 = g7; // 0x5be89
    char * v2 = (char *)(v1 + 0x57ff240c); // 0x5be89
    *v2 = *v2 | (char)v1;
    int32_t v3 = g4; // 0x5be8f
    int32_t result = (int32_t)((char)v3 - 125 + (char)false) | v3 & -256; // 0x5be8f
    g4 = result;
    return result;
}

// Address range: 0x5bea6 - 0x5beb2
int32_t function_5bea6(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g38); // 0x5bea6
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5beac
    char * v3 = (char *)(v2 + 94); // 0x5beac
    *v3 = *v3 + (char)v2;
    g8 = a1;
    return g4;
}

// Address range: 0x5beec - 0x5bef1
int32_t function_5beec(void) {
    // 0x5beec
    return g4;
}

// Address range: 0x5bef1 - 0x5bf19
int32_t function_5bef1(int32_t a1) {
    // 0x5bef1
    g4 = a1;
    int32_t result; // 0x5bf10
    if (*(int32_t *)a1 == 2) {
        // bb
        result = function_5bf30();
        g4 = result;
    } else {
        result = a1;
    }
    // 0x5bf12
    return result;
}

// Address range: 0x5bf1d - 0x5bf27
int32_t function_5bf1d(void) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g395); // 0x5bf1d
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5bf23
    char * v3 = (char *)(v2 + 93); // 0x5bf23
    *v3 = *v3 + (char)v2;
    return g4;
}

// Address range: 0x5bf30 - 0x5bf68
int32_t function_5bf30(void) {
    int32_t v1 = *(int32_t *)(g4 + (int32_t)&g95); // 0x5bf30
    g4 = v1;
    g6 = g5 - 148;
    int32_t v2 = function_2d3e0(v1); // 0x5bf3f
    g4 = v2;
    g9 = (int32_t)g283;
    g7 = *(int32_t *)g283;
    int32_t result; // 0x5bf5f
    if ((char)v2 != 0) {
        // bb
        result = function_5bf70();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x5bf61
    return result;
}

// Address range: 0x5bf6d - 0x5bf6f
int32_t function_5bf6d(void) {
    // 0x5bf6d
    return g4;
}

// Address range: 0x5bf70 - 0x5bfb1
int32_t function_5bf70(void) {
    // 0x5bf70
    g4 = *(int32_t *)(g5 - 144);
    g9 = *(int32_t *)(g5 - 148);
    int32_t v1 = *(int32_t *)&g298; // 0x5bf82
    g7 = v1;
    g6 = v1;
    int32_t result = g5 - 140; // 0x5bfa0
    g4 = result;
    return result;
}

// Address range: 0x5bfb5 - 0x5bfbf
int32_t function_5bfb5(void) {
    int32_t * v1 = (int32_t *)(g7 + (int32_t)&g395); // 0x5bfb5
    *v1 = *v1 + 1;
    int32_t v2 = g6; // 0x5bfbb
    char * v3 = (char *)(v2 + 93); // 0x5bfbb
    *v3 = *v3 + (char)v2;
    return g4;
}

// Address range: 0x5bfc0 - 0x5bfe6
int32_t function_5bfc0(char a1) {
    // 0x5bfc0
    g4 = g292;
    int32_t v1 = *(int32_t *)(g292 + 4); // 0x5bfcc
    g4 = v1;
    int32_t v2 = *(int32_t *)v1; // 0x5bfcf
    g9 = v2;
    if (a1 != 0) {
        int32_t result = *(int32_t *)(v2 + 28); // 0x5bfe0
        g4 = result;
        return result;
    }
    int32_t result2 = *(int32_t *)(v2 + 32); // 0x5bfd6
    g4 = result2;
    return result2;
}

// Address range: 0x5bff0 - 0x5c122
int32_t function_5bff0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x5bff3
    int32_t v2 = g10; // 0x5bff4
    int32_t v3 = g6; // 0x5bff5
    g4 = g292;
    g6 = a2;
    g10 = a3;
    int32_t * v4 = (int32_t *)(g292 + 8); // 0x5c004
    int32_t v5 = *v4; // 0x5c004
    g4 = v5;
    int32_t v6 = *(int32_t *)v5; // 0x5c007
    g9 = v6;
    g9 = *(int32_t *)(v6 + 20);
    int32_t result; // 0x5c111
    int32_t * v7; // 0x5c03b
    if (v5 == (int32_t)&g64) {
        // 0x5c109
        g8 = 1;
        result = 1;
        goto lab_0x5c10e;
    } else {
        if (v5 == (int32_t)&g93) {
            // 0x5c109
            g8 = 1;
            result = 1;
            goto lab_0x5c10e;
        } else {
            if (v5 == 1) {
                // 0x5c109
                g8 = 1;
                result = 1;
                goto lab_0x5c10e;
            } else {
                // 0x5c038
                g4 = a1;
                v7 = (int32_t *)(a1 + 16);
                int32_t v8 = *v7; // 0x5c03b
                g4 = v8;
                if (v8 < 1) {
                    goto lab_0x5c083;
                } else {
                    // 0x5c045
                    g4 = a1;
                    g8 = 1;
                    int32_t v9 = *(int32_t *)(a1 + 4); // 0x5c04d
                    g9 = v9;
                    int32_t v10 = v9 + 4; // 0x5c050
                    int32_t v11 = *(int32_t *)v10; // 0x5c050
                    g7 = v11;
                    int32_t v12 = *(int32_t *)v9 ^ a2; // 0x5c057
                    g4 = v12;
                    int32_t v13 = v12 | v11 ^ a3; // 0x5c059
                    g7 = v13;
                    if (v13 == 0) {
                        result = 1;
                        goto lab_0x5c10e;
                    } else {
                        // 0x5c061
                        g4 = 0;
                        int32_t v14 = 0; // 0x5c07b
                        while (true) {
                            int32_t v15 = v14 + 1; // 0x5c07b
                            g4 = v15;
                            if (v15 == v8) {
                                // break -> 0x5c083
                                break;
                            }
                            int32_t v16 = 8 * v15; // 0x5c068
                            int32_t v17 = *(int32_t *)(v16 + v10); // 0x5c068
                            g8 = v17;
                            int32_t v18 = *(int32_t *)(v16 + v9) ^ a2; // 0x5c071
                            g7 = v18;
                            int32_t v19 = v18 | v17 ^ a3; // 0x5c073
                            g8 = v19;
                            if (v19 == 0) {
                                if (v14 == -2) {
                                    goto lab_0x5c083;
                                } else {
                                    // 0x5c109
                                    g8 = 1;
                                    result = 1;
                                    goto lab_0x5c10e;
                                }
                            }
                            v14 = v15;
                        }
                        goto lab_0x5c083;
                    }
                }
            }
        }
    }
  lab_0x5c10e:
    // 0x5c10e
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x5c083:
    // 0x5c083
    g4 = g292;
    int32_t v20 = *v4; // 0x5c088
    g4 = v20;
    int32_t v21 = *(int32_t *)v20; // 0x5c08b
    g9 = v21;
    g9 = *(int32_t *)(v21 + 20);
    if (v20 == (int32_t)&g64) {
        // 0x5c109
        g8 = 1;
        result = 1;
        goto lab_0x5c10e;
    } else {
        if (v20 == (int32_t)&g93) {
            // 0x5c109
            g8 = 1;
            result = 1;
            goto lab_0x5c10e;
        } else {
            if (v20 == 1) {
                // 0x5c109
                g8 = 1;
                result = 1;
                goto lab_0x5c10e;
            } else {
                // 0x5c0b0
                g4 = a1;
                g8 = 0;
                uint32_t v22 = *v7; // 0x5c0b5
                g4 = v22;
                if (v22 >= 1) {
                    // 0x5c0bf
                    g4 = a1;
                    g8 = 1;
                    int32_t v23 = *(int32_t *)(a1 + 4); // 0x5c0c7
                    g9 = v23;
                    int32_t v24 = v23 + 4; // 0x5c0ca
                    int32_t v25 = *(int32_t *)v24; // 0x5c0ca
                    g7 = v25;
                    int32_t v26 = *(int32_t *)v23 ^ a2; // 0x5c0d1
                    g4 = v26;
                    int32_t v27 = v26 | v25 ^ a3; // 0x5c0d3
                    g7 = v27;
                    if (v27 != 0) {
                        // 0x5c0d7
                        g4 = 0;
                        int32_t v28 = 0; // 0x5c0ef
                        while (true) {
                            int32_t v29 = v28 + 1; // 0x5c0ef
                            g4 = v29;
                            if (v29 == v22) {
                                // break -> 0x5c0f7
                                break;
                            }
                            int32_t v30 = 8 * v29; // 0x5c0e0
                            int32_t v31 = *(int32_t *)(v30 + v24); // 0x5c0e0
                            g8 = v31;
                            int32_t v32 = *(int32_t *)(v30 + v23) ^ a2; // 0x5c0e9
                            g7 = v32;
                            int32_t v33 = v32 | v31 ^ a3; // 0x5c0eb
                            g8 = v33;
                            if (v33 == 0) {
                                int32_t v34 = (int32_t)(v28 != -2) | v29 & -256; // 0x5c11b
                                g4 = v34;
                                g8 = v34;
                                result = v34;
                                goto lab_0x5c10e;
                            }
                            v28 = v29;
                        }
                        // 0x5c0f7
                        g8 = 0;
                        result = 0;
                    } else {
                        result = 1;
                    }
                } else {
                    result = 0;
                }
                goto lab_0x5c10e;
            }
        }
    }
}

// Address range: 0x5c130 - 0x5c161
int32_t function_5c130(int32_t a1) {
    // 0x5c130
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g225;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 0;
    return g4;
}

// Address range: 0x5c170 - 0x5c17b
int32_t function_5c170(int32_t result, int32_t a2) {
    // 0x5c170
    g4 = result;
    g9 = a2;
    return result;
}

// Address range: 0x5c180 - 0x5c1f8
int32_t function_5c180(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x5c183
    int32_t v2 = g10; // 0x5c184
    int32_t v3 = g6; // 0x5c185
    g6 = 0;
    g4 = a1;
    g10 = a2;
    g8 = a3;
    uint32_t v4 = *(int32_t *)(a1 + 16); // 0x5c194
    g9 = v4;
    int32_t result2; // 0x5c1dc
    if (v4 >= 1) {
        int32_t v5 = *(int32_t *)(a1 + 4); // 0x5c19e
        g9 = v5;
        g6 = 1;
        int32_t v6 = v5 + 4; // 0x5c1a6
        int32_t v7 = *(int32_t *)v6; // 0x5c1a6
        g7 = v7;
        int32_t v8 = *(int32_t *)v5 ^ a2; // 0x5c1ad
        g4 = v8;
        int32_t v9 = v8 | v7 ^ a3; // 0x5c1af
        g7 = v9;
        if (v9 != 0) {
            // 0x5c1b3
            g4 = 0;
            int32_t v10 = 0; // 0x5c1cf
            while (true) {
                int32_t v11 = v10 + 1; // 0x5c1cf
                g4 = v11;
                if (v11 == v4) {
                    // break -> 0x5c1d7
                    break;
                }
                int32_t v12 = 8 * v11; // 0x5c1c0
                int32_t v13 = *(int32_t *)(v12 + v6); // 0x5c1c0
                g6 = v13;
                int32_t v14 = *(int32_t *)(v12 + v5) ^ a2; // 0x5c1c9
                g7 = v14;
                int32_t v15 = v14 | v13 ^ a3; // 0x5c1cb
                g6 = v15;
                if (v15 == 0) {
                    int32_t result = v10 != -2; // 0x5c1eb
                    g4 = result;
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
                v10 = v11;
            }
            // 0x5c1d7
            g6 = 0;
            result2 = 0;
        } else {
            result2 = 1;
        }
    } else {
        result2 = 0;
    }
    // 0x5c1d9
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x5c200 - 0x5c68b
int32_t function_5c200(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x5c203
    int32_t v2 = g10; // 0x5c204
    int32_t v3 = g6; // 0x5c205
    g6 = 0;
    int32_t v4 = (int32_t)g450; // 0x5c220
    g4 = v4;
    g9 = *(int32_t *)g450;
    int32_t v5;
    int32_t v6; // 0x5c3c0
    int32_t v7; // 0x5c448
    int32_t v8; // 0x5c460
    int32_t v9; // 0x5c4d4
    int32_t v10; // 0x5c2e8
    int32_t v11; // 0x5c403
    int32_t v12; // 0x5c42b
    if (g450 != NULL) {
        // 0x5c24b
        g9 = *(int32_t *)g450;
        int32_t v13 = function_27340(v4, (int32_t)"Members", 0); // 0x5c25e
        g4 = v13;
        if (v13 != 0) {
            int32_t v14 = function_27fc0(v13, "numMachines", 0); // 0x5c284
            g4 = v14;
            if (v14 >= 1) {
                // 0x5c297
                int32_t v15; // bp-1100
                int32_t v16 = &v15; // 0x5c2a1
                g10 = v16;
                int32_t v17; // bp-1095
                int32_t v18 = &v17; // 0x5c2a7
                g8 = v18;
                int32_t v19; // bp-832
                int32_t v20 = &v19; // 0x5c2bf
                int32_t v21 = 0;
                while (true) {
                    // 0x5c2ad
                    g4 = v20;
                    function_1e010(v20, "machine%d");
                    g4 = v13;
                    int32_t v22; // bp-827
                    v10 = function_27340(v13, (int32_t)&v22, 0);
                    g4 = v10;
                    if (v10 != 0) {
                        int32_t v23 = function_27fc0(v10, "numPlayers", 0); // 0x5c30e
                        g4 = v23;
                        if (v23 >= 1) {
                            // 0x5c31d
                            g6 = 0;
                            while (true) {
                                // 0x5c320
                                function_1e010(v16, "player%d");
                                g4 = v10;
                                int32_t v24 = function_27340(v10, v18, 0); // 0x5c349
                                g4 = v24;
                                if (v24 != 0) {
                                    int32_t v25 = function_27ea0(v24, "xuid", 0, 0) ^ a1; // 0x5c378
                                    g4 = v25;
                                    int32_t v26 = g9 ^ a2 | v25; // 0x5c37e
                                    g9 = v26;
                                    if (v26 == 0) {
                                        // 0x5c3c0
                                        v6 = (int32_t)g290;
                                        g6 = 0;
                                        g9 = v6;
                                        g4 = v4;
                                        v11 = function_27340(v4, (int32_t)"Members", 0);
                                        g4 = v11;
                                        if (v11 == 0) {
                                            goto lab_0x5c3b0;
                                        } else {
                                            // 0x5c412
                                            g4 = v11;
                                            v12 = function_27fc0(v11, "numMachines", 0);
                                            g4 = v12;
                                            if (v12 < 1) {
                                                goto lab_0x5c3b0;
                                            } else {
                                                // 0x5c43e
                                                int32_t v27; // bp-564
                                                v7 = &v27;
                                                g8 = v7;
                                                int32_t v28; // bp-296
                                                v8 = &v28;
                                                int32_t v29; // bp-559
                                                v9 = &v29;
                                                v5 = 0;
                                                goto lab_0x5c44e;
                                            }
                                        }
                                    }
                                }
                                int32_t v30 = g6 + 1; // 0x5c382
                                g6 = v30;
                                if (v30 == v23) {
                                    // break -> 0x5c38d
                                    break;
                                }
                            }
                        }
                    }
                    int32_t v31 = v21 + 1; // 0x5c38d
                    g4 = v14;
                    if (v31 == v14) {
                        // break -> 0x5c3a6
                        break;
                    }
                    v21 = v31;
                }
                // 0x5c3a6
                g6 = 0;
                g10 = v16;
            }
        }
    }
    goto lab_0x5c3b0;
  lab_0x5c3b0:;
    int32_t result = g6; // 0x5c3b6
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x5c44e:
    // 0x5c44e
    g4 = v8;
    function_1e010(v8, "machine%d");
    g4 = v11;
    int32_t v32; // bp-291
    int32_t v33 = function_27340(v11, (int32_t)&v32, 0); // 0x5c489
    g4 = v33;
    g10 = v33;
    int32_t v34; // 0x5c4ab
    if (v33 == 0) {
        goto lab_0x5c52d;
    } else {
        // 0x5c498
        v34 = function_27fc0(v33, "numPlayers", 0);
        g4 = v34;
        if (v34 < 1) {
            goto lab_0x5c52d;
        } else {
            // 0x5c4ba
            g6 = 0;
            goto lab_0x5c4c0;
        }
    }
  lab_0x5c52d:;
    int32_t v35 = v5 + 1; // 0x5c52d
    g4 = v12;
    if (v35 != v12) {
        v5 = v35;
        goto lab_0x5c44e;
    } else {
        // 0x5c546
        g6 = 0;
        goto lab_0x5c3b0;
    }
  lab_0x5c4c0:
    // 0x5c4c0
    function_1e010(v7, "player%d");
    g4 = v9;
    int32_t v36 = function_27340(g10, v9, 0); // 0x5c4e9
    g4 = v36;
    int32_t v37; // 0x5c5a5
    int32_t v38; // 0x5c60b
    int32_t v39; // 0x5c571
    if (v36 == 0) {
        goto lab_0x5c522;
    } else {
        int32_t v40 = function_27ea0(v36, "xuid", 0, 0) ^ v6; // 0x5c518
        g4 = v40;
        int32_t v41 = g9 ^ v6 | v40; // 0x5c51e
        g9 = v41;
        if (v41 == 0) {
            // 0x5c550
            g6 = 0;
            int32_t v42 = g10; // 0x5c552
            if (v10 == v42) {
                goto lab_0x5c3b0;
            } else {
                // 0x5c55e
                v39 = function_27fc0(v42, "numPlayers", 0);
                g4 = v10;
                int32_t v43 = function_27340(v10, (int32_t)"Mutelist", 0); // 0x5c595
                g4 = v43;
                if (v43 == 0) {
                    goto lab_0x5c3b0;
                } else {
                    // 0x5c5a2
                    v37 = function_261f0(v43);
                    g4 = v37;
                    if (v37 == 0) {
                        goto lab_0x5c3b0;
                    } else {
                        // 0x5c5b8
                        int32_t v44; // bp-1368
                        v38 = &v44;
                        goto lab_0x5c5b8_2;
                    }
                }
            }
        } else {
            goto lab_0x5c522;
        }
    }
  lab_0x5c522:;
    int32_t v45 = g6 + 1; // 0x5c522
    g6 = v45;
    if (v45 != v34) {
        goto lab_0x5c4c0;
    } else {
        goto lab_0x5c52d;
    }
  lab_0x5c5b8_2:
    // 0x5c5b8
    g4 = v37;
    int32_t v46 = function_27ea0(v37, NULL, 0, 0); // 0x5c5d9
    int32_t v47 = g9; // 0x5c5e4
    int32_t v48 = v47 | v46; // 0x5c5e4
    g4 = v48;
    g8 = v47;
    if (v48 == 0) {
        goto lab_0x5c668;
    } else {
        // 0x5c5ea
        g4 = v39;
        if (v39 < 1) {
            goto lab_0x5c668;
        } else {
            // 0x5c5f4
            g6 = 0;
            goto lab_0x5c60b;
        }
    }
  lab_0x5c668:
    // 0x5c668
    g4 = v37;
    int32_t v49 = function_26220(v37); // 0x5c671
    g4 = v49;
    if (v49 != 0) {
        v37 = v49;
        goto lab_0x5c5b8_2;
    } else {
        // 0x5c684
        g6 = 0;
        goto lab_0x5c3b0;
    }
  lab_0x5c60b:
    // 0x5c60b
    g4 = v38;
    function_1e010(v38, "player%d/xuid");
    int32_t v50; // bp-1363
    g4 = &v50;
    int32_t v51 = function_27ea0(g10, (char *)&v50, 0, 0) ^ v46; // 0x5c647
    g4 = v51;
    int32_t v52 = g8 ^ g9 | v51; // 0x5c64f
    g9 = v52;
    if (v52 == 0) {
        // 0x5c653
        g4 = 1;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 1;
    }
    int32_t v53 = g6 + 1; // 0x5c600
    g6 = v53;
    if (v53 == v39) {
        goto lab_0x5c668;
    } else {
        goto lab_0x5c60b;
    }
}

// Address range: 0x5c690 - 0x5c6e2
int32_t function_5c690(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x5c696
    g6 = a1;
    int32_t v3 = g10; // 0x5c69c
    g10 = a2;
    int32_t v4 = g8; // 0x5c6a2
    g8 = a3;
    int32_t v5 = function_5c200(a1, a2, a3); // 0x5c6b3
    g4 = v5;
    g9 = 0;
    int32_t result; // 0x5c6d0
    if ((char)v5 == 0) {
        int32_t v6 = *(int32_t *)g6; // 0x5c6be
        g4 = v6;
        result = v6 ^ 1;
        g9 = result;
    } else {
        result = 0;
    }
    // 0x5c6d3
    g6 = v2;
    g4 = result;
    g10 = v3;
    g8 = v4;
    return result;
}

// Address range: 0x5c7a0 - 0x5c7d2
int32_t function_5c7a0(void) {
    // 0x5c7a0
    g10 = g6 + 4;
    *(char *)(g5 - 36) = (char)g9;
    int32_t v1 = g5 - 32; // 0x5c7a6
    g8 = v1;
    g4 = function_5c7f0(g10, v1);
    g9 = (int32_t)*(char *)(g5 - 36);
    int32_t v2 = *(int32_t *)(g6 + 16); // 0x5c7c1
    g4 = v2;
    int32_t result = function_49a90((int32_t *)g10, v2, g8); // 0x5c7cb
    g4 = result;
    return result;
}

// Address range: 0x5c7d3 - 0x5c7d4
int32_t function_5c7d3(void) {
    // 0x5c7d3
    return g4;
}

// Address range: 0x5c7f0 - 0x5c893
int32_t function_5c7f0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x5c7f0
    int32_t v2 = g8; // 0x5c7f3
    int32_t v3 = g10; // 0x5c7f4
    int32_t v4 = g6; // 0x5c7f5
    g4 = a1;
    g7 = a2;
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x5c7ff
    int32_t v6 = *v5; // 0x5c7ff
    g4 = 0;
    g9 = v6;
    if (v6 < 1) {
        // 0x5c849
        g6 = v4;
        g10 = v3;
        g8 = v2;
        g5 = v1;
        return 0;
    }
    // 0x5c80e
    g4 = a1;
    int32_t v7 = *(int32_t *)a2; // 0x5c811
    g10 = v7;
    int32_t v8 = *(int32_t *)(a2 + 4); // 0x5c813
    g8 = v8;
    int32_t v9 = *(int32_t *)a1; // 0x5c816
    g9 = v9;
    int32_t v10 = v9 + 4; // 0x5c818
    int32_t v11 = *(int32_t *)v10; // 0x5c818
    g7 = v11;
    int32_t v12 = *(int32_t *)v9 ^ v7 | v11 ^ v8; // 0x5c821
    g7 = v12;
    g4 = 0;
    int32_t v13; // 0x5c83f
    if (v12 != 0) {
        int32_t v14 = 0; // 0x5c83f
        while (true) {
            // 0x5c83f
            v13 = v14 + 1;
            g4 = v13;
            if (v13 == v6) {
                // break -> 0x5c847
                break;
            }
            int32_t v15 = 8 * v13; // 0x5c830
            int32_t v16 = *(int32_t *)(v15 + v10); // 0x5c830
            g6 = v16;
            int32_t v17 = *(int32_t *)(v15 + v9) ^ v7; // 0x5c839
            g7 = v17;
            int32_t v18 = v17 | v16 ^ v8; // 0x5c83b
            g6 = v18;
            if (v18 == 0) {
                if (v14 == -2) {
                    goto lab_0x5c847;
                } else {
                    goto lab_0x5c85d;
                }
            }
            v14 = v13;
        }
        goto lab_0x5c847;
    } else {
        v13 = 0;
        goto lab_0x5c85d;
    }
  lab_0x5c85d:;
    int32_t v19 = v6 - 1; // 0x5c860
    g7 = v19;
    int32_t v20; // 0x5c87d
    if (v13 != v19) {
        int32_t v21 = 8 * v13 + v9; // 0x5c867
        g4 = v21;
        int32_t v22 = v9 + 8 * v19; // 0x5c86a
        g9 = v22;
        int32_t v23 = *(int32_t *)v22; // 0x5c86d
        g7 = v23;
        *(int32_t *)v21 = v23;
        int32_t v24 = *(int32_t *)(g9 + 4); // 0x5c871
        g9 = v24;
        *(int32_t *)(g4 + 4) = v24;
        g4 = a1;
        v20 = *v5 - 1;
        g7 = v20;
    } else {
        v20 = v19;
    }
    // 0x5c880
    *v5 = v20;
    g4 = 1;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return 1;
  lab_0x5c847:
    // 0x5c847
    g4 = 0;
    // 0x5c849
    g6 = v4;
    g10 = v3;
    g8 = v2;
    g5 = v1;
    return 0;
}

// Address range: 0x5c8a0 - 0x5c8ab
int32_t function_5c8a0(int32_t a1) {
    // 0x5c8a0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 32); // 0x5c8a7
    g4 = result;
    return result;
}

// Address range: 0x5c8b0 - 0x5c8cc
int32_t function_5c8b0(int32_t a1, int32_t a2) {
    // 0x5c8b0
    g4 = 0;
    g9 = a2;
    g7 = a1;
    if (a2 < 0) {
        // 0x5c8ca
        return 0;
    }
    // 0x5c8bf
    int32_t result; // 0x5c8c7
    if (*(int32_t *)(a1 + 32) > a2) {
        int32_t v1 = *(int32_t *)(a1 + 20); // 0x5c8c4
        g4 = v1;
        result = *(int32_t *)(v1 + 4 * a2);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x5c8ca
    return result;
}

// Address range: 0x5c8d0 - 0x5c8ff
int32_t function_5c8d0(int32_t a1) {
    int32_t v1 = g6; // 0x5c8d3
    g6 = a1;
    int32_t * v2 = (int32_t *)(a1 + 12); // 0x5c8da
    int32_t v3 = *v2; // 0x5c8da
    g4 = v3;
    if (v3 != 0) {
        // 0x5c8e1
        g9 = *(int32_t *)v3;
    }
    // 0x5c8e9
    g4 = *(int32_t *)a1;
    *v2 = 0;
    int32_t result = *(int32_t *)(g4 + 24); // 0x5c8f5
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x5c900 - 0x5c915
int32_t function_5c900(int32_t a1) {
    // 0x5c900
    return g4;
}

// Address range: 0x5c920 - 0x5c966
int32_t function_5c920(int32_t result) {
    int32_t v1 = g6; // 0x5c923
    g4 = result;
    int32_t * v2 = (int32_t *)(result + 12); // 0x5c92a
    int32_t v3 = *v2; // 0x5c92a
    g6 = v3;
    if (v3 == 0) {
        // 0x5c960
        g6 = v1;
        return result;
    }
    // 0x5c931
    *v2 = 0;
    int32_t v4 = (int32_t)g450; // 0x5c938
    g4 = v4;
    g9 = *(int32_t *)g450;
    g6 = v1;
    int32_t result2 = function_28600(v4); // 0x5c951
    g4 = result2;
    return result2;
}

// Address range: 0x5c970 - 0x5c97f
int32_t function_5c970(int32_t a1) {
    // 0x5c970
    g4 = a1;
    int32_t result = function_28600(a1); // 0x5c97a
    g4 = result;
    return result;
}

// Address range: 0x5c980 - 0x5ca00
int32_t function_5c980(int32_t a1, char a2, int32_t a3) {
    int32_t v1 = g6; // 0x5c98a
    int32_t v2 = g10; // 0x5c98d
    g6 = a1;
    g10 = a3;
    int32_t v3; // 0x5c9b6
    int32_t v4; // 0x5c9c3
    int32_t v5; // 0x5c9e7
    if (a2 == 0) {
        int32_t v6 = *(int32_t *)(a1 + 8); // 0x5c9d8
        g4 = v6;
        if (v6 == 0) {
            v3 = a1;
            goto lab_0x5c9b6;
        } else {
            // 0x5c9df
            g4 = function_28600(v6);
            int32_t v7 = g6; // 0x5c9e7
            v5 = *(int32_t *)(v7 + 40);
            g4 = v5;
            if (v5 == 1) {
                // 0x5c9ef
                *(int32_t *)(v7 + 40) = 2;
                g6 = v1;
                g10 = v2;
                return g4;
            }
            v4 = v7;
            goto lab_0x5c9be;
        }
    } else {
        if (a3 != 0) {
            int32_t v8 = *(int32_t *)(a1 + 8); // 0x5c99c
            g4 = v8;
            if (v8 != 0) {
                // 0x5c9a3
                g4 = function_28600(v8);
            }
            int32_t v9 = function_26d60(a3); // 0x5c9ae
            g4 = v9;
            *(int32_t *)(g6 + 8) = v9;
            v3 = g6;
        } else {
            v3 = a1;
        }
        goto lab_0x5c9b6;
    }
  lab_0x5c9b6:;
    int32_t v10 = *(int32_t *)(v3 + 40); // 0x5c9b6
    g4 = v10;
    if (v10 == 1) {
        // 0x5c9ef
        *(int32_t *)(v3 + 40) = 2;
        g6 = v1;
        g10 = v2;
        return g4;
    }
    v4 = v3;
    v5 = v10;
    goto lab_0x5c9be;
  lab_0x5c9be:;
    int32_t result; // 0x5c9d3
    if (v5 == 3) {
        // 0x5c9c3
        *(int32_t *)(v4 + 40) = 0;
        result = g4;
    } else {
        result = v5;
    }
    // 0x5c9ca
    g6 = v1;
    g10 = v2;
    return result;
}

// Address range: 0x5ca00 - 0x5ca09
int32_t function_5ca00(void) {
    int32_t result = function_597e0((int32_t)&g870, (int32_t)&g870); // 0x5ca04
    g4 = result;
    return result;
}

// Address range: 0x5ca10 - 0x5ca37
int32_t function_5ca10(int32_t a1) {
    // 0x5ca10
    if (g654 == 0) {
        // 0x5ca30
        return g4;
    }
    // 0x5ca1f
    g4 = &g655;
    return &g655;
}

// Address range: 0x5ca9a - 0x5caa1
int32_t function_5ca9a(void) {
    // 0x5ca9a
    g4 = &g655;
    return &g655;
}

// Address range: 0x5cab0 - 0x5cb0a
int32_t function_5cab0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x5cab3
    int32_t v2 = g10; // 0x5cab4
    int32_t v3 = g6; // 0x5cab5
    g6 = 0;
    g8 = a1;
    g4 = a2;
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x5cac1
    int32_t v5 = *v4; // 0x5cac1
    g9 = v5;
    g4 = a3;
    int32_t result; // 0x5cb03
    if (v5 < 1) {
        result = 0;
        // 0x5cb00
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x5cad1
    g10 = 0;
    int32_t v6 = 0; // 0x5caf2
    while (true) {
        int32_t v7 = *(int32_t *)a1; // 0x5cad8
        g4 = v7;
        int32_t v8 = *(int32_t *)(4 * v6 + v7); // 0x5cada
        g6 = v8;
        int32_t v9; // 0x5caee
        if (v8 != 0) {
            int32_t v10 = *(int32_t *)v8 ^ a2; // 0x5caeb
            g4 = v10;
            v9 = v10 | v5 ^ a3;
            g9 = v9;
            if (v9 == 0) {
                result = v8;
                goto lab_0x5cb00_2;
            }
        } else {
            v9 = v5;
        }
        int32_t v11 = v6 + 1; // 0x5caf2
        g10 = v11;
        if (*v4 <= v11) {
            // break -> 0x5cafa
            break;
        }
        v5 = v9;
        v6 = v11;
    }
    // 0x5cafa
    g6 = 0;
    result = 0;
  lab_0x5cb00_2:
    // 0x5cb00
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x5cb10 - 0x5cb3d
int32_t function_5cb10(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x5cb13
    g4 = a1;
    g6 = a3;
    g7 = a2;
    int32_t v2 = a1 + 20; // 0x5cb20
    g9 = v2;
    int32_t result = function_5cab0(a1, v2, a2, a3); // 0x5cb32
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x5cb40 - 0x5cb91
int32_t function_5cb40(int32_t a1, int32_t a2, int32_t a3) {
    // 0x5cb40
    g6 = a1;
    g4 = a3;
    function_59fd0(a1, a3);
    g4 = a2;
    *(int32_t *)g6 = (int32_t)&g230;
    *(int32_t *)(g6 + 100) = g4;
    int32_t result = *(int32_t *)&g273; // 0x5cb66
    g4 = result;
    g9 = result;
    g7 = *(int32_t *)(g6 + 36);
    return result;
}

// Address range: 0x5cb96 - 0x5cc23
int32_t function_5cb96(int32_t a1, int32_t a2, int32_t a3) {
    // 0x5cb96
    g4 = *(int32_t *)(g6 + 36);
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x5cb99
    g9 = v2;
    *(int32_t *)v2 = (int32_t)&g132;
    *(int32_t *)(v1 - 12) = 1;
    int32_t v3 = function_26cf0(); // 0x5cbc5
    g4 = v3;
    g10 = v3;
    g4 = function_27a20(v3, "OnMatchSearchMgrUpdate", "update", "searchstarted");
    int32_t v4 = *(int32_t *)(g6 + 100); // 0x5cbec
    g4 = v4;
    function_275a0(g10, "mgr", v4);
    int32_t result = (int32_t)g450; // 0x5cc03
    g4 = result;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g6 = a1;
    g10 = a2;
    return result;
}

// Address range: 0x5cc23 - 0x5cc47
int32_t function_5cc23(void) {
    // 0x5cc23
    g10 = g4;
    while (true) {
        // 0x5cc25
        g4 = function_5a110(g6);
        int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x5cc30
        g4 = v1;
        *(int32_t *)(g5 - 28) = v1;
        g4 = function_26d40();
        int32_t v2 = *(int32_t *)(g5 - 28); // 0x5cc40
        g4 = v2;
        g10 = v2;
    }
}

// Address range: 0x5cc50 - 0x5cca2
int32_t function_5cc50(int32_t a1) {
    int32_t v1 = g5; // 0x5cc50
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x5cc56
    g6 = a1;
    int32_t result = *(int32_t *)(a1 + 40); // 0x5cc62
    g4 = result;
    if (result > 2) {
        if (result == 3) {
            // 0x5cca8
            return result;
        }
        // 0x5cc95
        g6 = v3;
        g5 = v1;
        return result;
    }
    int32_t v4; // 0x5cc6f
    if (result < 1) {
        // bb
        g4 = function_5ccd8();
        v4 = g6;
    } else {
        v2 = v1;
        v4 = a1;
    }
    int32_t v5 = *(int32_t *)(v4 + 12); // 0x5cc6f
    g4 = v5;
    g6 = v3;
    int32_t v6 = *(int32_t *)v5; // 0x5cc7b
    g9 = v6;
    int32_t result2 = *(int32_t *)(v6 + 8); // 0x5cc80
    g4 = result2;
    g5 = v2;
    return result2;
}

// Address range: 0x5ccac - 0x5ccd5
int32_t function_5ccac(void) {
    int128_t v1 = __asm_movups(*(int128_t *)(g6 + 16)); // 0x5ccae
    float80_t v2; // st7
    *(float64_t *)(g5 - 32) = (float64_t)v2;
    int128_t v3 = __asm_cvtps2pd(v1); // 0x5ccb5
    __asm_ucomisd(__asm_movsd_1649(*(int64_t *)(g5 - 32)), v3);
    g4 = function_35b40();
    *(int32_t *)(g6 + 40) = 0;
    return g4;
}

// Address range: 0x5ccd8 - 0x5cd34
int32_t function_5ccd8(void) {
    int32_t v1 = g6; // 0x5ccdc
    g4 = *(int32_t *)(v1 + 8);
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x5cce3
    g9 = v2;
    *(int32_t *)(v1 + 40) = 1;
    int32_t v3; // 0x5ccfc
    if (v2 == 0) {
        // 0x5ccd8
        v3 = g4;
    } else {
        // 0x5ccf1
        g4 = *(int32_t *)v2;
        int32_t v4 = *(int32_t *)(g6 + 8); // 0x5ccf9
        g4 = v4;
        v3 = v4;
    }
    int32_t v5 = function_26d60(v3); // 0x5ccff
    g4 = v5;
    g8 = v5;
    int32_t v6 = function_1bc00(104); // 0x5cd0d
    g4 = v6;
    g10 = v6;
    g4 = function_5cb40(v6, g6, g8);
    *(int32_t *)(g6 + 12) = g10;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x5cd35 - 0x5cd36
int32_t function_5cd35(void) {
    // 0x5cd35
    return g4;
}

// Address range: 0x5cd50 - 0x5cdb2
int32_t function_5cd50(void) {
    int32_t v1 = g8; // 0x5cd53
    int32_t v2 = g10; // 0x5cd54
    int32_t v3 = g6; // 0x5cd55
    g6 = 0;
    int32_t v4 = function_5ca10(v3); // 0x5cd5b
    g4 = v4;
    g10 = v4;
    int32_t v5 = *(int32_t *)(v4 + 12); // 0x5cd62
    g4 = v5;
    g10 = v4;
    int32_t v6 = g6; // 0x5cd78
    int32_t result; // 0x5cd95
    while (true) {
        if ((int16_t *)v6 >= (int16_t *)v5) {
            result = v5;
            // break -> 0x5cd8e
            break;
        }
        int32_t v7 = 4 * v6; // 0x5cd6c
        g4 = v7;
        int32_t v8 = *(int32_t *)v4; // 0x5cd76
        g4 = v8;
        int32_t v9 = *(int32_t *)(v8 + v7); // 0x5cd78
        g8 = v9;
        g4 = function_5cc50(v9);
        int32_t v10 = g6; // 0x5cd83
        int32_t v11 = g10; // 0x5cd85
        int32_t v12 = *(int32_t *)(v11 + 12); // 0x5cd85
        g4 = v12;
        if (v10 < 0) {
            v4 = v11;
            v5 = v12;
            v6 = v10;
            // continue -> 0x5cd68
            continue;
        }
        if ((int16_t *)v10 >= (int16_t *)v12) {
            result = v12;
            // break -> 0x5cd8e
            break;
        }
        // 0x5cda0
        g7 = v7;
        int32_t v13 = *(int32_t *)v11 & (int32_t)&g862 & -256; // 0x5cdab
        g9 = v13;
        int32_t v14 = v13 + v10; // 0x5cdae
        g6 = v14;
        v4 = v11;
        v5 = v12;
        v6 = v14;
    }
    // 0x5cd8e
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x5cdc0 - 0x5ce05
int32_t function_5cdc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x5cdc0
    g4 = 0;
    g9 = a4;
    int32_t v1 = g6; // 0x5cdcb
    int32_t v2 = g10; // 0x5cdce
    g6 = a1;
    int32_t v3 = g8; // 0x5cdd4
    g10 = a2;
    g8 = a3;
    *(int32_t *)a1 = (int32_t)&g232;
    *(int32_t *)(g6 + 4) = g10;
    *(int32_t *)(g6 + 8) = g8;
    int32_t v4; // 0x5cdf5
    if (a4 == 0) {
        // 0x5cdc0
        v4 = g4;
    } else {
        int32_t v5 = function_26d60(a4); // 0x5cdf0
        g4 = v5;
        v4 = v5;
    }
    // 0x5cdf5
    *(int32_t *)(g6 + 12) = v4;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x5ce10 - 0x5ce3c
int32_t function_5ce10(int32_t a1) {
    int32_t v1 = g6; // 0x5ce13
    g6 = a1;
    g4 = *(int32_t *)(a1 + 12);
    *(int32_t *)a1 = (int32_t)&g232;
    int32_t v2 = g4; // 0x5ce23
    if (v2 != 0) {
        // 0x5ce27
        g4 = function_28600(v2);
    }
    // 0x5ce2f
    *(int32_t *)(g6 + 12) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x5ce40 - 0x5ce88
int32_t function_5ce40(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x5ce43
    int32_t v2 = g10; // 0x5ce44
    int32_t v3 = g6; // 0x5ce45
    g8 = a1;
    uint32_t v4 = *(int32_t *)(a1 + 12); // 0x5ce4c
    g7 = v4;
    int32_t v5; // 0x5ce79
    if (v4 >= 1) {
        // 0x5ce53
        g6 = 0;
        int32_t v6 = 0; // 0x5ce5a
        int32_t v7 = a1; // 0x5ce58
        while (true) {
            int32_t v8 = *(int32_t *)v7; // 0x5ce58
            g4 = v8;
            int32_t v9 = *(int32_t *)(v8 + 4 * v6); // 0x5ce5a
            g10 = v9;
            int32_t v10; // 0x5ce71
            int32_t v11; // 0x5ce74
            if (v9 != 0) {
                // 0x5ce61
                g4 = function_5ce10(v9);
                g4 = function_1bc40();
                v11 = g8;
                v10 = g6;
            } else {
                v11 = v7;
                v10 = v6;
            }
            int32_t v12 = v10 + 1; // 0x5ce71
            g6 = v12;
            if (*(int32_t *)(v11 + 12) <= v12) {
                v5 = v11;
                // break -> 0x5ce79
                break;
            }
            v6 = v12;
            v7 = v11;
        }
    } else {
        v5 = a1;
    }
    // 0x5ce79
    *(int32_t *)(v5 + 12) = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x5ce90 - 0x5cee6
int32_t function_5ce90(int32_t a1) {
    // 0x5ce90
    g10 = a1;
    *(int32_t *)a1 = (int32_t)&g228;
    *(int32_t *)(g10 + 4) = (int32_t)&g229;
    int32_t result = function_5ca10(g6); // 0x5cea9
    g4 = result;
    int32_t v1 = *(int32_t *)(result + 12); // 0x5ceae
    g9 = v1;
    g8 = result;
    if (v1 < 1) {
        // 0x5ced8
        g6 = g10 + 20;
        return result;
    }
    int32_t v2 = *(int32_t *)result; // 0x5ceb7
    g7 = v2;
    g4 = 0;
    if (g10 == *(int32_t *)v2) {
        int32_t result2 = function_5cfa9(); // 0x5cebf
        g4 = result2;
        return result2;
    }
    int32_t v3 = 0; // 0x5ced1
    int32_t result3; // 0x5ced1
    while (true) {
        // 0x5ced1
        result3 = v3 + 1;
        g4 = result3;
        if (result3 == v1) {
            // break -> 0x5ced8
            break;
        }
        // 0x5cec8
        if (g10 == *(int32_t *)(g7 + 4 * result3)) {
            int32_t v4 = function_5cfa0(); // 0x5cecb
            g4 = v4;
            v3 = v4;
        } else {
            v3 = result3;
        }
    }
    // 0x5ced8
    g6 = g10 + 20;
    return result3;
}

// Address range: 0x5cfa0 - 0x5cfa9
int32_t function_5cfa0(void) {
    // 0x5cfa0
    return g4;
}

// Address range: 0x5cfa9 - 0x5cfdf
int32_t function_5cfa9(void) {
    int32_t v1 = g9; // 0x5cfa9
    int32_t v2 = g4; // 0x5cfab
    int32_t v3 = v1 - v2 - 1; // 0x5cfad
    g6 = v3;
    int32_t v4; // 0x5cfd7
    if (v3 < 1) {
        // 0x5cfa9
        v4 = g8;
    } else {
        int32_t v5 = g7; // 0x5cfb4
        int32_t v6 = 4 * v2; // 0x5cfb4
        int32_t v7 = v6 + 4 + v5; // 0x5cfb4
        g9 = v7;
        int32_t v8 = v5 + v6; // 0x5cfbb
        g4 = v8;
        g6 = g10 + 20;
        g4 = function_2cb20(v8, v7, 4 * v3);
        int32_t v9 = g8; // 0x5cfd1
        int32_t v10 = *(int32_t *)(v9 + 12); // 0x5cfd1
        g9 = v10;
        v4 = v9;
        v1 = v10;
    }
    int32_t v11 = v1 - 1; // 0x5cfd4
    g9 = v11;
    *(int32_t *)(v4 + 12) = v11;
    return g4;
}

// Address range: 0x5cfe0 - 0x5cfee
int32_t function_5cfe0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g10; // 0x5cfe0
    int32_t v2 = *(int32_t *)(v1 + 20); // 0x5cfe0
    g4 = v2;
    *(int32_t *)(v1 + 36) = v2;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x5d002 - 0x5d005
int32_t function_5d002(void) {
    int32_t v1 = g4; // 0x5d002
    bool v2; // cf
    unsigned char v3 = (char)v1 - (v2 ? -118 : -119); // 0x5d002
    int32_t result = (int32_t)v3 | v1 & -256; // 0x5d002
    g4 = result;
    return result;
}

// Address range: 0x5d060 - 0x5d0e5
int32_t function_5d060(int32_t a1, int32_t a2) {
    // 0x5d060
    g4 = 0;
    g9 = a2;
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g228;
    *(int32_t *)(g6 + 4) = (int32_t)&g229;
    int32_t v1; // 0x5d088
    if (a2 == 0) {
        // 0x5d060
        v1 = g4;
    } else {
        int32_t v2 = function_26d60(a2); // 0x5d083
        g4 = v2;
        v1 = v2;
    }
    // 0x5d088
    *(int32_t *)(g6 + 8) = v1;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 20) = 0;
    *(int32_t *)(g6 + 24) = 0;
    *(int32_t *)(g6 + 28) = 0;
    *(int32_t *)(g6 + 32) = 0;
    *(int32_t *)(g6 + 36) = 0;
    *(int32_t *)(g6 + 40) = 0;
    int32_t v3 = g6; // 0x5d0bc
    int32_t v4 = v3; // bp-16
    int32_t v5 = function_5ca10(v3); // 0x5d0bf
    g4 = v5;
    g9 = &v4;
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x5d0cb
    g9 = v6;
    int32_t result = function_5d840(v5, v6, &v4); // 0x5d0d5
    g4 = result;
    return result;
}

// Address range: 0x5d0e9 - 0x5d118
int32_t function_5d0e9(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x558d0843); // 0x5d0e9
    *v1 = *v1 - 1;
    g4 = g4 & -256 | (int32_t)__asm_in_1653((int16_t)g9);
    int32_t v2; // ebp
    *(int32_t *)(v2 - 20) = (int32_t)&g132;
    *(int32_t *)(v2 - 16) = 1;
    g6 = a1;
    return g4;
}

// Address range: 0x5d119 - 0x5d11a
int32_t function_5d119(void) {
    // 0x5d119
    return g4;
}

// Address range: 0x5d140 - 0x5d141
int32_t function_5d140(int32_t a1) {
    // 0x5d140
    return g4;
}

// Address range: 0x5d161 - 0x5d167
int32_t function_5d161(void) {
    // 0x5d161
    return g4;
}

// Address range: 0x5d167 - 0x5d447
int32_t function_5d167(void) {
    int32_t v1 = g5 - 96; // 0x5d167
    float80_t v2; // st7
    *(float64_t *)v1 = (float64_t)v2;
    int128_t v3 = __asm_movsd_1649(*(int64_t *)v1); // 0x5d16a
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x5d16f
    int128_t v5 = __asm_addsd(v3, __asm_cvtps2pd(v4)); // 0x5d177
    int128_t v6 = __asm_unpcklpd(v5, v5); // 0x5d17b
    *(int32_t *)(g6 + 16) = __asm_movss_1646(__asm_cvtpd2ps(v6));
    int32_t v7 = *(int32_t *)&g273; // 0x5d188
    g4 = v7;
    int32_t v8 = g5 - 48; // 0x5d18d
    g10 = v8;
    g9 = v7;
    *(int32_t *)v8 = 0;
    *(int32_t *)(g5 - 68) = g4;
    uint32_t v9 = *(int32_t *)(g6 + 12); // 0x5d1a2
    g4 = v9;
    *(int32_t *)(g5 - 44) = 0;
    *(int32_t *)(g5 - 40) = 0;
    *(int32_t *)(g5 - 36) = 0;
    *(int32_t *)(g5 - 32) = 0;
    g9 = *(int32_t *)v9;
    *(int32_t *)(g5 - 80) = v9;
    int32_t v10; // 0x5d1fd
    int32_t v11; // 0x5d202
    if (v9 >= 1) {
        // 0x5d1d4
        g8 = 0;
        v11 = 0;
        v10 = g5;
      lab_0x5d1fa_2:
        while (true) {
          lab_0x5d1fa:;
            int32_t v12 = *(int32_t *)(g6 + 12); // 0x5d1fa
            g9 = v12;
            g10 = v10 - 48;
            int32_t v13 = *(int32_t *)v12; // 0x5d200
            g4 = v13;
            int32_t v14 = function_59b50(v13, v11); // 0x5d20f
            g4 = v14;
            *(int32_t *)(g5 - 64) = v14;
            if (v14 == 0) {
                goto lab_0x5d1ee;
            } else {
                int32_t v15 = g5; // 0x5d21b
                int32_t v16 = *(int32_t *)(v15 - 68); // 0x5d21b
                g9 = v16;
                int32_t v17 = *(int32_t *)v16; // 0x5d21e
                g4 = v17;
                g9 = *(int32_t *)(g6 + 12);
                int32_t v18 = *(int32_t *)(v17 + 16); // 0x5d223
                g4 = v18;
                *(int32_t *)(v15 - 60) = v18;
                g4 = *(int32_t *)g9;
                int32_t v19 = g5; // 0x5d235
                g4 = *(int32_t *)(v19 - 64);
                int32_t v20 = *(int32_t *)(v19 - 68); // 0x5d244
                g4 = v20;
                *(int32_t *)(v19 - 60) = v20;
                if (v20 == 0) {
                    goto lab_0x5d1ee;
                } else {
                    // 0x5d254
                    g4 = function_27ea0(v20, "rollupkey", 0, 0);
                    *(int32_t *)(g5 - 76) = g9;
                    int32_t v21 = g4; // 0x5d277
                    int32_t v22 = v21 | g9; // 0x5d277
                    g9 = v22;
                    *(int32_t *)(g5 - 72) = v21;
                    int32_t v23 = g5; // 0x5d1e0
                    if (v22 == 0) {
                        int32_t v24 = *(int32_t *)(v23 - 60); // 0x5d1e0
                        g4 = v24;
                        g10 = v23 - 48;
                        g4 = function_28600(v24);
                        goto lab_0x5d1ee;
                    } else {
                        int32_t v25 = *(int32_t *)(v23 - 76); // 0x5d282
                        g9 = v25;
                        int32_t v26 = function_5cab0(g6, g10, g4, v25); // 0x5d294
                        g4 = v26;
                        *(int32_t *)(g5 - 28) = v26;
                        if (v26 == 0) {
                            // bb
                            g4 = function_5d468();
                        }
                        int32_t v27 = g5; // 0x5d2a4
                        int32_t v28 = *(int32_t *)(v27 - 68); // 0x5d2a4
                        g9 = v28;
                        int32_t v29 = *(int32_t *)v28; // 0x5d2a7
                        g4 = v29;
                        int32_t v30 = *(int32_t *)(v29 + 16); // 0x5d2a9
                        g4 = v30;
                        *(int32_t *)(v27 - 72) = v30;
                        int32_t v31 = *(int32_t *)(g6 + 12); // 0x5d2af
                        g4 = v31;
                        g9 = *(int32_t *)v31;
                        *(int32_t *)(g5 - 76) = v31;
                        int32_t v32 = g5; // 0x5d2bd
                        int32_t v33 = *(int32_t *)(v32 - 28); // 0x5d2bd
                        g4 = v33;
                        g9 = *(int32_t *)v33;
                        g4 = *(int32_t *)(v32 - 64);
                        g9 = *(int32_t *)(v32 - 76);
                        g4 = *(int32_t *)(v32 - 68);
                        int32_t v34 = *(int32_t *)(v32 - 60); // 0x5d2e3
                        g4 = v34;
                        g4 = function_28600(v34);
                        int32_t v35 = g8 + 1; // 0x5d2ee
                        g8 = v35;
                        int32_t v36 = g5; // 0x5d2f1
                        if (v35 == *(int32_t *)(v36 - 80)) {
                            // break -> 0x5d300
                            break;
                        }
                        v11 = v35;
                        v10 = v36;
                        goto lab_0x5d1fa;
                    }
                }
            }
        }
    }
  lab_0x5d300:;
    int32_t v37 = g6; // 0x5d300
    uint32_t v38 = *(int32_t *)(v37 + 32); // 0x5d300
    g4 = v38;
    int32_t v39; // 0x5d326
    int32_t v40;
    int32_t v41; // 0x5d329
    int32_t v42; // 0x5d3b6
    int32_t v43; // 0x5d3de
    if (v38 >= 1) {
        // 0x5d30b
        g10 = g5 - 48;
        g8 = 0;
        v41 = 0;
        v39 = v37;
        while (true) {
          lab_0x5d326_2:
            // 0x5d326
            g4 = *(int32_t *)(v39 + 20);
            int32_t v44 = 4 * v41; // 0x5d329
            g9 = v44;
            *(int32_t *)(g5 - 64) = v44;
            int32_t v45 = *(int32_t *)(4 * g8 + g4); // 0x5d333
            g4 = v45;
            *(int32_t *)(g5 - 28) = v45;
            int32_t v46 = g4; // 0x5d339
            int32_t v47 = *(int32_t *)v46; // 0x5d339
            g9 = v47;
            int32_t v48 = function_5cab0(g6, g10, v46, v47); // 0x5d34f
            g4 = v48;
            if (v48 != 0) {
                goto lab_0x5d318;
            } else {
                int32_t v49 = g5; // 0x5d358
                int32_t v50 = *(int32_t *)(v49 - 68); // 0x5d358
                g9 = v50;
                int32_t v51 = *(int32_t *)v50; // 0x5d35b
                g4 = v51;
                int32_t v52 = *(int32_t *)(v51 + 16); // 0x5d35d
                g4 = v52;
                *(int32_t *)(v49 - 60) = v52;
                int32_t v53 = *(int32_t *)(g6 + 12); // 0x5d363
                g4 = v53;
                g9 = *(int32_t *)v53;
                *(int32_t *)(g5 - 72) = v53;
                int32_t v54 = g5; // 0x5d371
                int32_t v55 = v54 - 28; // 0x5d371
                int32_t v56 = *(int32_t *)v55; // 0x5d371
                g4 = v56;
                g9 = *(int32_t *)v56;
                g9 = *(int32_t *)(v54 - 72);
                int32_t v57 = *(int32_t *)(v54 - 68); // 0x5d383
                g4 = v57;
                if (v57 == 0) {
                    goto lab_0x5d318;
                } else {
                    int32_t v58 = *(int32_t *)(v54 - 36); // 0x5d3a0
                    g4 = v58;
                    g9 = v55;
                    g4 = function_5d990(g10, v58, v55);
                    v42 = g6;
                    int32_t v59 = *(int32_t *)(v42 + 32); // 0x5d3b6
                    g4 = v59;
                    int32_t v60 = g8; // 0x5d3b9
                    int32_t v61 = v60 - 1; // 0x5d3b9
                    g9 = v61;
                    if (v59 < 1) {
                        // break -> 0x5d3f0
                        break;
                    }
                    int32_t v62 = v59 - 1; // 0x5d3c0
                    g4 = v62;
                    int32_t v63; // 0x5d3d3
                    int32_t v64; // 0x5d3d9
                    int32_t v65; // 0x5d3d6
                    if (v60 != v62) {
                        int32_t v66 = *(int32_t *)(v42 + 20); // 0x5d3c7
                        g7 = v66;
                        int32_t v67 = *(int32_t *)(g5 - 64); // 0x5d3ca
                        g8 = v67;
                        int32_t v68 = *(int32_t *)(v66 + 4 * v62); // 0x5d3cd
                        g4 = v68;
                        *(int32_t *)(v67 + v66) = v68;
                        v63 = g6;
                        v65 = *(int32_t *)(v63 + 32) - 1;
                        g4 = v65;
                        v64 = g9;
                    } else {
                        v63 = v42;
                        v65 = v62;
                        v64 = v61;
                    }
                    // 0x5d3d9
                    g8 = v64;
                    *(int32_t *)(v63 + 32) = v65;
                    v43 = g8 + 1;
                    g8 = v43;
                    v40 = g6;
                    if (v43 >= g4) {
                        v42 = v40;
                        // break -> 0x5d3f0
                        break;
                    }
                    goto lab_0x5d326;
                }
            }
        }
    } else {
        v42 = v37;
    }
  lab_0x5d3f0:;
    int32_t v69 = v42 + 20; // 0x5d3f0
    g4 = v69;
    g10 = g5 - 48;
    g4 = function_5ce40(v42, v69);
    int32_t v70 = *(int32_t *)(g5 - 40); // 0x5d402
    g4 = v70;
    g7 = *(int32_t *)(g5 - 48);
    int32_t * v71 = (int32_t *)(g6 + 28); // 0x5d408
    int32_t v72 = *v71; // 0x5d408
    g9 = v72;
    g10 = *(int32_t *)(g5 - 44);
    *v71 = v70;
    int32_t * v73 = (int32_t *)(g6 + 20); // 0x5d411
    int32_t result = *v73; // 0x5d411
    g4 = result;
    *v73 = g7;
    g7 = *(int32_t *)(g6 + 24);
    *(int32_t *)(g5 - 40) = v72;
    *(int32_t *)(g6 + 24) = g10;
    g10 = *(int32_t *)(g5 - 32);
    *(int32_t *)(g5 - 48) = result;
    *(int32_t *)(g5 - 44) = g7;
    int32_t * v74 = (int32_t *)(g5 - 36); // 0x5d42b
    g7 = *v74;
    *v74 = 0;
    *(int32_t *)(g6 + 32) = g7;
    int32_t * v75 = (int32_t *)(g6 + 36); // 0x5d438
    g7 = *v75;
    *v75 = g10;
    *(int32_t *)(g5 - 32) = g7;
    return result;
  lab_0x5d318:;
    int32_t v76 = g6; // 0x5d318
    uint32_t v77 = *(int32_t *)(v76 + 32); // 0x5d318
    g4 = v77;
    int32_t v78 = g8 + 1; // 0x5d31b
    g8 = v78;
    if (v78 >= v77) {
        v42 = v76;
        // break -> 0x5d3f0
        goto lab_0x5d3f0;
    }
    v40 = v76;
    v43 = v78;
    goto lab_0x5d326;
  lab_0x5d326:
    // 0x5d326
    v41 = v43;
    v39 = v40;
    goto lab_0x5d326_2;
  lab_0x5d1ee:;
    int32_t v79 = g8 + 1; // 0x5d1ee
    g8 = v79;
    int32_t v80 = g5; // 0x5d1f1
    if (v79 == *(int32_t *)(v80 - 80)) {
        // break -> 0x5d300
        goto lab_0x5d300;
    }
    v11 = v79;
    v10 = v80;
    // continue -> 0x5d1fa
    goto lab_0x5d1fa_2;
}

// Address range: 0x5d468 - 0x5d4b8
int32_t function_5d468(void) {
    int32_t v1 = function_1bc00(16); // 0x5d46f
    g4 = v1;
    *(int32_t *)(g5 - 84) = v1;
    int32_t v2 = g5; // 0x5d477
    int32_t v3 = *(int32_t *)(v2 - 60); // 0x5d477
    g4 = v3;
    int32_t v4 = *(int32_t *)(v2 - 76); // 0x5d47a
    g9 = v4;
    int32_t v5 = *(int32_t *)(v2 - 72); // 0x5d481
    g4 = v5;
    int32_t v6 = *(int32_t *)(v2 - 84); // 0x5d48c
    g4 = v6;
    g4 = function_5cdc0(v6, v5, v4, v3);
    int32_t v7 = *(int32_t *)(g5 - 84); // 0x5d497
    g4 = v7;
    int32_t v8 = g5 - 28; // 0x5d49a
    g9 = v8;
    *(int32_t *)v8 = v7;
    int32_t v9 = *(int32_t *)(g5 - 36); // 0x5d4a7
    g4 = v9;
    int32_t result = function_5d990(g10, v9, v8); // 0x5d4ae
    g4 = result;
    return result;
}

// Address range: 0x5d4b8 - 0x5d4c4
int32_t function_5d4b8(void) {
    // 0x5d4b8
    *(int32_t *)(g6 + 40) = 0;
    return g4;
}

// Address range: 0x5d4c5 - 0x5d4c6
int32_t function_5d4c5(void) {
    // 0x5d4c5
    return g4;
}

// Address range: 0x5d510 - 0x5d514
int32_t function_5d510(void) {
    int32_t result = g4; // 0x5d510
    g6 = result;
    return result;
}

// Address range: 0x5d514 - 0x5d518
int32_t function_5d514(void) {
    int32_t result = g4; // 0x5d514
    g6 = result;
    return result;
}

// Address range: 0x5d520 - 0x5d5a3
int32_t function_5d520(int32_t a1) {
    int32_t v1 = g10; // 0x5d523
    int32_t v2 = g6; // 0x5d524
    g6 = a1;
    g4 = function_596a0(a1);
    int32_t v3 = *(int32_t *)(g6 + 100); // 0x5d533
    g4 = v3;
    g4 = function_5d140(v3);
    int32_t v4 = function_26cf0(); // 0x5d545
    g4 = v4;
    g10 = v4;
    g4 = function_27a20(v4, "OnMatchSearchMgrUpdate", "update", "searchfinished");
    int32_t v5 = *(int32_t *)(g6 + 100); // 0x5d56c
    g4 = v5;
    function_275a0(g10, "mgr", v5);
    int32_t result = (int32_t)g450; // 0x5d583
    g4 = result;
    g9 = *(int32_t *)g450;
    g9 = *(int32_t *)g450;
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x5d5a3 - 0x5d5ce
int32_t function_5d5a3(int32_t a1) {
    // 0x5d5a3
    g6 = g4;
    g4 = function_26d40();
    function_7ab57(g6, (int32_t)&g870);
    g4 = a1;
    g9 = *(int32_t *)(a1 + 8);
    int32_t result = *(int32_t *)(a1 + 4); // 0x5d5ca
    g4 = result;
    return result;
}

// Address range: 0x5d5d0 - 0x5d5db
int32_t function_5d5d0(int32_t a1) {
    // 0x5d5d0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 12); // 0x5d5d7
    g4 = result;
    return result;
}

// Address range: 0x5d5e0 - 0x5d5f0
int32_t function_5d5e0(int32_t a1) {
    // 0x5d5e0
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 12); // 0x5d5e7
    int32_t result = (int32_t)(v1 != 0) | v1 & -256; // 0x5d5ec
    g4 = result;
    return result;
}

// Address range: 0x5d648 - 0x5d657
int32_t function_5d648(void) {
    int32_t v1 = g6; // 0x5d648
    g4 = v1;
    *(int32_t *)(v1 + 16) = v1;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 8);
    g10 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x5d6b0 - 0x5d6d5
int32_t function_5d6b0(int32_t a1) {
    int32_t v1 = g6; // 0x5d6b3
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g230;
    g4 = function_5a110(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x5d6d0
    g4 = result;
    return result;
}

// Address range: 0x5d6e0 - 0x5d703
int32_t function_5d6e0(int32_t a1) {
    // 0x5d6e0
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t v1 = g4; // 0x5d6f9
    int32_t v2; // 0x5d6fb
    if (v1 < 0) {
        // bb
        v2 = function_5d738();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3 = *(int32_t *)g6; // 0x5d6fd
    g9 = v3;
    int32_t result; // 0x5d701
    if (v3 == 0) {
        // bb234
        result = function_5d71a();
        g4 = result;
    } else {
        result = v2;
    }
    // 0x5d703
    return result;
}

// Address range: 0x5d71a - 0x5d732
int32_t function_5d71a(void) {
    // 0x5d71a
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 16) = 0;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x5d738 - 0x5d747
int32_t function_5d738(void) {
    int32_t v1 = g6; // 0x5d738
    g4 = v1;
    *(int32_t *)(v1 + 16) = v1;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x5d7eb - 0x5d7f2
int32_t function_5d7eb(int32_t a1, int32_t a2, int32_t a3) {
    // 0x5d7eb
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x5d7f8 - 0x5d81f
int32_t function_5d7f8(void) {
    int32_t v1 = g4; // 0x5d7f8
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x5d7ff
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x5d810
    while (g7 > v3) {
        // 0x5d810
        v3 *= 2;
    }
    // 0x5d816
    g4 = v3;
    int32_t v4 = g6; // 0x5d816
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x5d81f - 0x5d820
int32_t function_5d81f(void) {
    // 0x5d81f
    return g4;
}

// Address range: 0x5d840 - 0x5d8c6
int32_t function_5d840(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x5d846
    g6 = a1;
    int32_t v2 = g10; // 0x5d84c
    g10 = a2;
    int32_t v3 = g8; // 0x5d852
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x5d855
    int32_t v5 = *v4; // 0x5d855
    g4 = v5;
    uint32_t v6 = *(int32_t *)(a1 + 4); // 0x5d858
    g9 = v6;
    int32_t v7; // 0x5d8c1
    if (v5 >= v6) {
        // 0x5d8b0
        g4 = v5 + 1 - v6;
        v7 = *v4;
        g4 = v7;
    } else {
        v7 = v5;
    }
    // 0x5d85f
    g9 = *(int32_t *)a1;
    g8 = 4 * a2;
    int32_t v8 = v7 + 1; // 0x5d868
    g4 = v8;
    *v4 = v8;
    int32_t v9 = g4 - g10 - 1; // 0x5d870
    g4 = v9;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v10; // 0x5d896
    if (v9 < 1) {
        // 0x5d85f
        v10 = g9;
    } else {
        int32_t v11 = g9; // 0x5d881
        int32_t v12 = v11 + 4 + 4 * g10; // 0x5d888
        g4 = v12;
        g4 = function_2cb20(v12, g8 + v11, 4 * v9);
        int32_t v13 = *(int32_t *)g6; // 0x5d894
        g9 = v13;
        v10 = v13;
    }
    int32_t v14 = g8 + v10; // 0x5d896
    g9 = v14;
    if (v14 != 0) {
        // 0x5d89a
        g4 = (int32_t)a3;
        int32_t v15 = *a3; // 0x5d89d
        g4 = v15;
        *(int32_t *)v14 = v15;
    }
    int32_t result = g10; // 0x5d8a1
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x5d8d0 - 0x5d920
int32_t function_5d8d0(int32_t a1, int32_t a2) {
    // 0x5d8d0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x5d8db
    int64_t v2 = v1; // 0x5d8db
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x5d8e2
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x5d8e8
    g7 = v4;
    int32_t v5; // 0x5d908
    if (v1 == 0) {
        // bb
        g4 = function_5d948();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x5d8ee
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x5d8f6
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x5d8fb
    g4 = v8;
    int32_t v9; // 0x5d919
    if (v5 > v8) {
        // 0x5d902
        g10 = v1;
        int32_t v10 = v8 + v5; // 0x5d908
        int32_t v11 = v10 < 0; // 0x5d90c
        int32_t v12 = (v11 + v10) / 2; // 0x5d911
        while (v5 > v12) {
            // 0x5d908
            v10 = v12 + v5;
            v11 = v10 < 0;
            v12 = (v11 + v10) / 2;
        }
        // 0x5d917
        g4 = v12;
        g9 = v11;
        v9 = v12;
    } else {
        v9 = v8;
    }
    int32_t v13 = g6; // 0x5d917
    int32_t v14 = *(int32_t *)v13; // 0x5d917
    g9 = v14;
    *(int32_t *)(v13 + 4) = v9;
    int32_t result; // 0x5d91e
    if (v14 == 0) {
        // bb20
        result = function_5d96f();
        g4 = result;
    } else {
        // 0x5d917
        result = g4;
    }
    // 0x5d920
    return result;
}

// Address range: 0x5d948 - 0x5d96f
int32_t function_5d948(void) {
    int32_t v1 = g4; // 0x5d948
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x5d94f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x5d960
    while (g7 > v3) {
        // 0x5d960
        v3 *= 2;
    }
    // 0x5d966
    g4 = v3;
    int32_t v4 = g6; // 0x5d966
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x5d96f - 0x5d970
int32_t function_5d96f(void) {
    // 0x5d96f
    return g4;
}

// Address range: 0x5d990 - 0x5da16
int32_t function_5d990(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x5d996
    g6 = a1;
    int32_t v2 = g10; // 0x5d99c
    g10 = a2;
    int32_t v3 = g8; // 0x5d9a2
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x5d9a5
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x5d9a8
    g9 = v5;
    int32_t v6; // 0x5d9b1
    int32_t v7; // 0x5da11
    int32_t v8; // 0x5da11
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x5da06
        g4 = v9;
        g4 = function_5d8d0(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x5d9af
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x5d9b8
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x5d9c0
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x5d9e6
    if (v11 < 1) {
        // 0x5d9af
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x5d9d1
        int32_t v14 = v13 + 4 + 4 * g10; // 0x5d9d8
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x5d9e4
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x5d9e6
    g9 = v16;
    if (v16 != 0) {
        // 0x5d9ea
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x5d9ed
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x5d9f1
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x5da20 - 0x5da32
int32_t function_5da20(void) {
    // 0x5da20
    g4 = g675;
    return g675;
}

// Address range: 0x5da40 - 0x5da4d
int32_t function_5da40(int32_t result) {
    // 0x5da40
    g4 = result;
    g675 = result;
    return result;
}

// Address range: 0x5da50 - 0x5da82
int32_t function_5da50(int32_t a1) {
    // 0x5da50
    g4 = a1;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = -1;
    *(int32_t *)(g4 + 12) = 0;
    *(char *)(g4 + 16) = 0;
    *(char *)(g4 + 17) = 1;
    *(int32_t *)(g4 + 20) = 0;
    return g4;
}

// Address range: 0x5da90 - 0x5dae4
int32_t function_5da90(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // bp-8
    g4 = a1;
    g6 = a2;
    g9 = a4;
    g7 = a5;
    *(char *)(a1 + 17) = 1;
    *(int32_t *)(g4 + 20) = g6;
    g6 = a3;
    int32_t v2 = g9 & -4; // 0x5daaa
    g9 = v2;
    *(int32_t *)(g4 + 4) = v2;
    *(int32_t *)g4 = g6;
    if (g7 != -1) {
        // 0x5dab7
        *(int32_t *)(g4 + 8) = g7;
        *(int32_t *)(g4 + 12) = 0;
        *(char *)(g4 + 16) = 0;
        g6 = v1;
        return g4;
    }
    // 0x5dad0
    g9 *= 8;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 8) = g9;
    *(char *)(g4 + 16) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x5daf0 - 0x5db44
int32_t function_5daf0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // bp-8
    g7 = a4;
    g4 = a1;
    g6 = a2;
    g9 = a3 & -4;
    *(char *)(a1 + 17) = 1;
    *(int32_t *)(g4 + 20) = 0;
    *(int32_t *)g4 = g6;
    *(int32_t *)(g4 + 4) = g9;
    if (a4 != -1) {
        // 0x5db18
        *(int32_t *)(g4 + 8) = g7;
        *(int32_t *)(g4 + 12) = 0;
        *(char *)(g4 + 16) = 0;
        g6 = v1;
        return g4;
    }
    // 0x5db30
    g9 *= 8;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 8) = g9;
    *(char *)(g4 + 16) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x5db50 - 0x5db93
int32_t function_5db50(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // bp-8
    g7 = a5;
    g4 = a1;
    g6 = a2;
    int32_t v2 = a3 & -4; // 0x5db60
    g9 = v2;
    *(int32_t *)(a1 + 4) = v2;
    *(int32_t *)g4 = g6;
    if (a5 != -1) {
        // 0x5db6d
        g9 = a4;
        *(int32_t *)(g4 + 8) = g7;
        *(char *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 12) = g9;
        g6 = v1;
        return g4;
    }
    // 0x5db80
    g9 *= 8;
    *(char *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 8) = g9;
    g9 = a4;
    *(int32_t *)(g4 + 12) = a4;
    g6 = v1;
    return g4;
}

// Address range: 0x5dba0 - 0x5dbb3
int32_t function_5dba0(int32_t a1) {
    // 0x5dba0
    g4 = a1;
    *(int32_t *)(a1 + 12) = 0;
    *(char *)(g4 + 16) = 0;
    return g4;
}

// Address range: 0x5dbc0 - 0x5dbce
int32_t function_5dbc0(int32_t a1, int32_t a2) {
    // 0x5dbc0
    g9 = a2;
    g4 = a1;
    *(char *)(a1 + 17) = (char)a2;
    return g4;
}

// Address range: 0x5dbd0 - 0x5dbdb
int32_t function_5dbd0(int32_t a1) {
    // 0x5dbd0
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 20); // 0x5dbd7
    g4 = result;
    return result;
}

// Address range: 0x5dbe0 - 0x5dbee
int32_t function_5dbe0(int32_t a1, int32_t a2) {
    // 0x5dbe0
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 20) = a2;
    return g4;
}

// Address range: 0x5dbf0 - 0x5dbfe
int32_t function_5dbf0(int32_t a1, int32_t a2) {
    // 0x5dbf0
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 12) = a2;
    return g4;
}

// Address range: 0x5dc00 - 0x5dda2
int32_t function_5dc00(int32_t a1, int32_t a2, int32_t a3) {
    // 0x5dc00
    g4 = a1;
    int32_t v1 = g10; // 0x5dc09
    int32_t v2 = g8; // 0x5dc0c
    g9 = a3;
    int32_t v3 = g6; // 0x5dc12
    g8 = a2;
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x5dc18
    int32_t v5 = *v4; // 0x5dc18
    g7 = v5;
    int32_t v6 = a3 - 1; // 0x5dc1b
    g9 = v6;
    int32_t v7 = *(int32_t *)(a1 + 8); // 0x5dc1e
    g6 = v7;
    int32_t v8 = v5 + v6; // 0x5dc23
    g10 = v8;
    if (a2 < 0) {
        if (v8 > v7) {
            // 0x5dcd8
            *v4 = v7;
            goto lab_0x5dcdb;
        } else {
            // 0x5dcf4
            g6 = a2;
            int32_t v9 = v5 % 32; // 0x5dcf9
            g7 = v9;
            int32_t v10 = v5 / 32; // 0x5dcfc
            g8 = v10;
            int32_t v11 = 32 - v9; // 0x5dd06
            g10 = v10;
            int32_t v12 = a2 ^ -0x80000000; // 0x5dd10
            g6 = v12;
            int32_t v13 = 4 * v10; // 0x5dd19
            int32_t v14 = *(int32_t *)a1 + v13; // 0x5dd19
            g10 = v14;
            g8 = v9;
            int32_t * v15 = (int32_t *)v14; // 0x5dd1e
            int32_t v16 = *v15; // 0x5dd1e
            g6 = v16;
            int32_t v17 = 33 * v9 + v6; // 0x5dd25
            g8 = v17;
            int32_t v18 = *(int32_t *)(4 * v17 + (int32_t)&g665) & v16; // 0x5dd27
            g6 = v18;
            uint32_t v19 = v5 & (int32_t)&g862 & 31; // 0x5dd31
            int32_t v20; // 0x5dd31
            if (v19 != 0) {
                // bb45
                v20 = v12 << v19;
            } else {
                v20 = v12;
            }
            // bb47
            g8 = v20;
            int32_t v21 = v20 | v18; // 0x5dd33
            g6 = v21;
            *v15 = v21;
            if (v6 > v11) {
                // 0x5dd3c
                g6 = v10;
                int32_t v22 = g9 - v11; // 0x5dd41
                g7 = v22;
                g8 = v12;
                int32_t v23 = v13 + 4; // 0x5dd47
                g10 = v23;
                int32_t v24 = *(int32_t *)g4 + v23; // 0x5dd4e
                g10 = v24;
                int32_t * v25 = (int32_t *)v24; // 0x5dd50
                int32_t v26 = *v25; // 0x5dd50
                g6 = v26;
                int32_t v27 = *(int32_t *)(4 * v22 + (int32_t)&g665) & v26; // 0x5dd52
                g6 = v27;
                g7 = v11 % 256;
                uint32_t v28 = v11 & (int32_t)&g862 & 31; // 0x5dd5d
                int32_t v29; // 0x5dd5d
                if (v28 != 0) {
                    // bb49
                    v29 = v12 >> v28;
                    g8 = v29;
                } else {
                    v29 = v12;
                }
                int32_t v30 = v29 | v27; // 0x5dd5f
                g6 = v30;
                *v25 = v30;
            }
            int32_t v31 = g4; // 0x5dd63
            int32_t * v32 = (int32_t *)(v31 + 12); // 0x5dd63
            int32_t v33 = *v32 + g9; // 0x5dd63
            g9 = v33;
            *v32 = v33;
            if (*(int32_t *)(v31 + 8) > v33) {
                int32_t result = g4; // 0x5dd72
                if (*(char *)(result + 16) != 0) {
                    // 0x5dcc5
                    g6 = v3;
                    g10 = v1;
                    g8 = v2;
                    return result;
                }
                int32_t v34 = g9; // 0x5dd7c
                g9 = 1;
                int32_t v35 = v34 / 8; // 0x5dd85
                g6 = v35;
                g7 = v34 % 8;
                int32_t v36 = *(int32_t *)result + v35; // 0x5dd8b
                g6 = v36;
                uint32_t v37 = v34 & (int32_t)&g862 & 7; // 0x5dd8d
                char v38; // 0x5dd8f
                if (v37 != 0) {
                    int32_t v39 = 1 << v37; // 0x5dd8d
                    g9 = v39;
                    v38 = v39;
                } else {
                    v38 = 1;
                }
                char * v40 = (char *)v36; // 0x5dd8f
                *v40 = *v40 | v38;
                int32_t * v41 = (int32_t *)(g4 + 12); // 0x5dd91
                *v41 = *v41 + 1;
                g6 = v3;
                g10 = v1;
                g8 = v2;
                return g4;
            }
            goto lab_0x5dcdb;
        }
    } else {
        if (v8 > v7) {
            // 0x5dcd8
            *v4 = v7;
            goto lab_0x5dcdb;
        } else {
            int32_t v42 = v5 % 32; // 0x5dc36
            g7 = v42;
            int32_t v43 = 32 - v42; // 0x5dc40
            int32_t v44 = v5 / 32; // 0x5dc43
            g6 = v44;
            g8 = v42;
            g10 = v44;
            int32_t v45 = *(int32_t *)a1; // 0x5dc4d
            g6 = v45;
            int32_t v46 = 33 * v42 + v6; // 0x5dc54
            g8 = v46;
            int32_t v47 = 4 * v44; // 0x5dc56
            int32_t v48 = v45 + v47; // 0x5dc56
            g10 = v48;
            int32_t * v49 = (int32_t *)v48; // 0x5dc59
            int32_t v50 = *v49; // 0x5dc59
            g6 = v50;
            int32_t v51 = *(int32_t *)(4 * v46 + (int32_t)&g665) & v50; // 0x5dc5b
            g6 = v51;
            uint32_t v52 = v5 & (int32_t)&g862 & 31; // 0x5dc65
            int32_t v53; // 0x5dc65
            if (v52 != 0) {
                // bb
                v53 = a2 << v52;
            } else {
                v53 = a2;
            }
            // bb38
            g8 = v53;
            int32_t v54 = v53 | v51; // 0x5dc67
            g6 = v54;
            *v49 = v54;
            if (v6 > v43) {
                int32_t v55 = g9 - v43; // 0x5dc75
                g7 = v55;
                int32_t v56 = v47 + 4; // 0x5dc78
                g10 = v56;
                g8 = a2;
                int32_t v57 = *(int32_t *)g4 + v56; // 0x5dc82
                g10 = v57;
                int32_t * v58 = (int32_t *)v57; // 0x5dc84
                int32_t v59 = *v58; // 0x5dc84
                g6 = v59;
                int32_t v60 = *(int32_t *)(4 * v55 + (int32_t)&g665) & v59; // 0x5dc86
                g6 = v60;
                g7 = v43;
                uint32_t v61 = v43 & (int32_t)&g862 & 31; // 0x5dc91
                int32_t v62; // 0x5dc91
                if (v61 != 0) {
                    // bb40
                    v62 = a2 >> v61;
                    g8 = v62;
                } else {
                    v62 = a2;
                }
                int32_t v63 = v62 | v60; // 0x5dc93
                g6 = v63;
                *v58 = v63;
            }
            int32_t v64 = g4; // 0x5dc97
            int32_t * v65 = (int32_t *)(v64 + 12); // 0x5dc97
            int32_t v66 = *v65 + g9; // 0x5dc97
            g9 = v66;
            *v65 = v66;
            if (v66 < *(int32_t *)(v64 + 8)) {
                int32_t result2 = g4; // 0x5dca2
                if (*(char *)(result2 + 16) != 0) {
                    // 0x5dcc5
                    g6 = v3;
                    g10 = v1;
                    g8 = v2;
                    return result2;
                }
                int32_t v67 = g9; // 0x5dca8
                g10 = 1;
                int32_t v68 = v67 / 8; // 0x5dcb1
                g6 = v68;
                g7 = v67 % 8;
                int32_t v69 = *(int32_t *)result2 + v68; // 0x5dcb7
                g6 = v69;
                uint32_t v70 = v67 & (int32_t)&g862 & 7; // 0x5dcb9
                int32_t v71; // 0x5dcbb
                if (v70 != 0) {
                    int32_t v72 = 1 << v70; // 0x5dcb9
                    g10 = v72;
                    v71 = -1 - v72;
                } else {
                    v71 = -2;
                }
                // bb43
                g9 = v71;
                char * v73 = (char *)v69; // 0x5dcbf
                *v73 = *v73 & (char)v71;
                int32_t * v74 = (int32_t *)(g4 + 12); // 0x5dcc1
                *v74 = *v74 + 1;
                // 0x5dcc5
                g6 = v3;
                g10 = v1;
                g8 = v2;
                return g4;
            }
            goto lab_0x5dcdb;
        }
    }
  lab_0x5dcdb:
    // 0x5dcdb
    *(char *)(g4 + 16) = 1;
    g6 = v3;
    g10 = v1;
    g8 = v2;
    return g4;
}

// Address range: 0x5ddb0 - 0x5e0ce
int32_t function_5ddb0(int32_t a1, uint32_t a2) {
    // 0x5ddb0
    g9 = a2;
    int32_t v1 = g6; // 0x5ddb9
    int32_t v2 = g10; // 0x5ddbc
    g4 = a1;
    int32_t v3 = g8; // 0x5ddc2
    uint32_t v4 = a2 % 16; // 0x5ddc5
    int32_t v5; // 0x5df45
    int32_t v6; // 0x5df3b
    if (a2 < 16) {
        int32_t v7 = *(int32_t *)(a1 + 12); // 0x5df38
        g7 = v7;
        v6 = *(int32_t *)(a1 + 8);
        g6 = v6;
        int32_t v8 = v7 + 6; // 0x5df3e
        g10 = v8;
        if (v8 <= v6) {
            int32_t v9 = v7 % 32; // 0x5df64
            g7 = v9;
            int32_t v10 = v7 / 32; // 0x5df67
            g6 = v10;
            int32_t v11 = 4 * v10; // 0x5df6d
            int32_t v12 = *(int32_t *)a1 + v11; // 0x5df6d
            g10 = v12;
            g8 = v9;
            int32_t * v13 = (int32_t *)v12; // 0x5df72
            int32_t v14 = *v13; // 0x5df72
            g6 = v14;
            int32_t v15 = 128 * v9; // 0x5df74
            g8 = v15;
            int32_t v16 = *(int32_t *)(v15 + (int32_t)&g667 + 4 * v9); // 0x5df77
            int32_t v17 = v16 & v14; // 0x5df77
            g6 = v17;
            uint32_t v18 = v7 & (int32_t)&g862 & 31; // 0x5df80
            int32_t v19; // 0x5df80
            if (v18 != 0) {
                // bb290
                v19 = a2 << v18;
            } else {
                v19 = a2;
            }
            // bb292
            g8 = v19;
            int32_t v20 = v19 | v17; // 0x5df82
            g6 = v20;
            g8 = 32 - v9;
            *v13 = v20;
            int32_t v21 = g8; // 0x5df8d
            if (v21 <= 5) {
                // 0x5df92
                g6 = v10;
                int32_t v22 = 6 - v21; // 0x5df9a
                g7 = v22;
                int32_t v23 = v11 + 4; // 0x5df9c
                g10 = v23;
                int32_t v24 = *(int32_t *)g4 + v23; // 0x5dfa3
                g10 = v24;
                int32_t * v25 = (int32_t *)v24; // 0x5dfa5
                int32_t v26 = *v25; // 0x5dfa5
                g6 = v26;
                int32_t v27 = *(int32_t *)(4 * v22 + (int32_t)&g665) & v26; // 0x5dfa7
                g6 = v27;
                g7 = v21;
                int32_t v28 = g9; // 0x5dfb0
                uint32_t v29 = v21 & (int32_t)&g862 & 31; // 0x5dfb0
                int32_t v30; // 0x5dfb0
                if (v29 != 0) {
                    // bb294
                    v30 = v28 >> v29;
                    g9 = v30;
                } else {
                    v30 = v28;
                }
                int32_t v31 = v30 | v27; // 0x5dfb2
                g6 = v31;
                *v25 = v31;
            }
            int32_t * v32 = (int32_t *)(g4 + 12); // 0x5dfb6
            *v32 = *v32 + 6;
            g6 = v1;
            g10 = v2;
            g8 = v3;
            return g4;
        }
        v5 = a1;
    } else {
        if (a2 > (int32_t)&g862) {
            int32_t * v33 = (int32_t *)(a1 + 12); // 0x5dea8
            int32_t v34 = *v33; // 0x5dea8
            if (a2 > (int32_t)"odeToUTF8") {
                // 0x5dde6
                g6 = v34;
                int32_t v35 = *(int32_t *)(a1 + 8); // 0x5dde9
                g7 = v35;
                int32_t v36 = v34 + 6; // 0x5ddec
                g10 = v36;
                if (v36 > v35) {
                    // 0x5e0c0
                    *v33 = v35;
                    g6 = g7;
                    *(char *)(g4 + 16) = 1;
                } else {
                    // 0x5ddf7
                    g8 = a2;
                    int32_t v37 = *(int32_t *)a1; // 0x5ddf9
                    g10 = v37;
                    int32_t v38 = v34 % 32; // 0x5de00
                    g7 = v38;
                    int32_t v39 = 32 - v38; // 0x5de0a
                    int32_t v40 = v4 | 48; // 0x5de0d
                    int32_t v41 = v34 / 32; // 0x5de15
                    int32_t v42 = 4 * v41; // 0x5de18
                    int32_t v43 = v37 + v42; // 0x5de18
                    g6 = v43;
                    g8 = v38;
                    int32_t * v44 = (int32_t *)v43; // 0x5de20
                    int32_t v45 = *v44; // 0x5de20
                    g10 = v45;
                    int32_t v46 = 128 * v38; // 0x5de22
                    g8 = v46;
                    int32_t v47 = *(int32_t *)(v46 + (int32_t)&g667 + 4 * v38); // 0x5de25
                    int32_t v48 = v47 & v45; // 0x5de25
                    g10 = v48;
                    uint32_t v49 = v34 & (int32_t)&g862 & 31; // 0x5de2f
                    int32_t v50; // 0x5de31
                    if (v49 != 0) {
                        // bb
                        v50 = v40 << v49;
                    } else {
                        v50 = v40;
                    }
                    int32_t v51 = v50 | v48; // 0x5de31
                    g8 = v51;
                    *v44 = v51;
                    if (v39 <= 5) {
                        // 0x5dfd0
                        g6 = v41;
                        int32_t v52 = 6 - v39; // 0x5dfd8
                        g7 = v52;
                        g8 = v40;
                        int32_t v53 = v42 + 4; // 0x5dfde
                        g10 = v53;
                        int32_t v54 = *(int32_t *)g4 + v53; // 0x5dfe5
                        g10 = v54;
                        int32_t * v55 = (int32_t *)v54; // 0x5dfe7
                        int32_t v56 = *v55; // 0x5dfe7
                        g6 = v56;
                        int32_t v57 = *(int32_t *)(4 * v52 + (int32_t)&g665) & v56; // 0x5dfe9
                        g6 = v57;
                        g7 = v39 % 256;
                        uint32_t v58 = v39 & (int32_t)&g862 & 31; // 0x5dff4
                        int32_t v59; // 0x5dff4
                        if (v58 != 0) {
                            // bb297
                            v59 = v40 >> v58;
                            g8 = v59;
                        } else {
                            v59 = v40;
                        }
                        int32_t v60 = v59 | v57; // 0x5dff6
                        g6 = v60;
                        *v55 = v60;
                    }
                    int32_t v61 = g4; // 0x5de3f
                    int32_t * v62 = (int32_t *)(v61 + 12); // 0x5de3f
                    int32_t v63 = *v62; // 0x5de3f
                    g7 = v63;
                    g6 = *(int32_t *)(v61 + 8);
                    int32_t v64 = v63 + 6; // 0x5de45
                    g7 = v64;
                    *v62 = v64;
                }
                int32_t v65 = g7; // 0x5de4b
                int32_t v66 = v65 + 28; // 0x5de4b
                g10 = v66;
                int32_t v67 = g6; // 0x5de4e
                if (v66 <= v67) {
                    int32_t v68 = g9 / 16; // 0x5de58
                    g9 = v68;
                    int32_t v69 = v65 % 32; // 0x5de5b
                    g7 = v69;
                    int32_t v70 = v65 / 32; // 0x5de5e
                    g10 = v70;
                    int32_t v71 = 4 * v70; // 0x5de66
                    g6 = v71;
                    int32_t v72 = 128 * v69; // 0x5de6d
                    g8 = v72;
                    int32_t v73 = *(int32_t *)g4 + v71; // 0x5de70
                    g6 = v73;
                    int32_t * v74 = (int32_t *)v73; // 0x5de72
                    int32_t v75 = *v74; // 0x5de72
                    g9 = v75;
                    int32_t v76 = *(int32_t *)(v72 + (int32_t)&g673 + 4 * v69); // 0x5de74
                    int32_t v77 = v76 & v75; // 0x5de74
                    g9 = v77;
                    uint32_t v78 = v65 & (int32_t)&g862 & 31; // 0x5de7e
                    int32_t v79; // 0x5de7e
                    if (v78 != 0) {
                        // bb278
                        v79 = v68 << v78;
                    } else {
                        v79 = v68;
                    }
                    // bb280
                    g8 = v79;
                    *v74 = v79 | v77;
                    int32_t v80 = 32 - g7; // 0x5de89
                    g9 = v80;
                    if (v80 <= 27) {
                        int32_t v81 = 4 * g10 + 4; // 0x5e000
                        g10 = v81;
                        g7 = 28;
                        g8 = v68;
                        int32_t v82 = *(int32_t *)g4 + v81; // 0x5e00f
                        g10 = v82;
                        int32_t v83 = 28 - v80; // 0x5e011
                        g7 = v83;
                        int32_t * v84 = (int32_t *)v82; // 0x5e013
                        int32_t v85 = *v84; // 0x5e013
                        g6 = v85;
                        int32_t v86 = *(int32_t *)(4 * v83 + (int32_t)&g665) & v85; // 0x5e015
                        g6 = v86;
                        g7 = v80;
                        uint32_t v87 = v80 & (int32_t)&g862 & 31; // 0x5e01e
                        int32_t v88; // 0x5e01e
                        if (v87 != 0) {
                            // bb299
                            v88 = v68 >> v87;
                            g8 = v88;
                        } else {
                            v88 = v68;
                        }
                        int32_t v89 = v88 | v86; // 0x5e020
                        g6 = v89;
                        *v84 = v89;
                    }
                    int32_t * v90 = (int32_t *)(g4 + 12); // 0x5de94
                    *v90 = *v90 + 28;
                    g6 = v1;
                    g10 = v2;
                    g8 = v3;
                    return g4;
                }
                // 0x5de4b
                v5 = g4;
                v6 = v67;
            } else {
                // 0x5dea8
                g7 = v34;
                int32_t v91 = *(int32_t *)(a1 + 8); // 0x5deab
                g6 = v91;
                int32_t v92 = v34 + 14; // 0x5deae
                g10 = v92;
                if (v92 <= v91) {
                    int32_t v93 = v34 / 32; // 0x5dec6
                    g8 = v93;
                    int32_t v94 = v34 % 32; // 0x5dec9
                    g7 = v94;
                    int32_t v95 = v4 | 4 * (a2 & (int32_t)"esSystem") | 32; // 0x5ded5
                    g6 = v95;
                    g9 = v93;
                    int32_t v96 = 4 * v93; // 0x5dedb
                    int32_t v97 = *(int32_t *)a1 + v96; // 0x5dedb
                    g9 = v97;
                    g8 = v94;
                    int32_t * v98 = (int32_t *)v97; // 0x5dee0
                    int32_t v99 = *v98; // 0x5dee0
                    g10 = v99;
                    int32_t v100 = 128 * v94; // 0x5dee2
                    g8 = v100;
                    int32_t v101 = *(int32_t *)(v100 + (int32_t)&g671 + 4 * v94); // 0x5dee5
                    int32_t v102 = v101 & v99; // 0x5dee5
                    g10 = v102;
                    uint32_t v103 = v34 & (int32_t)&g862 & 31; // 0x5deee
                    int32_t v104; // 0x5deee
                    if (v103 != 0) {
                        // bb283
                        v104 = v95 << v103;
                    } else {
                        v104 = v95;
                    }
                    // bb285
                    g8 = v104;
                    *v98 = v104 | v102;
                    int32_t v105 = 32 - g7; // 0x5def9
                    g8 = v105;
                    if (v105 <= 13) {
                        // 0x5df00
                        g9 = v93;
                        int32_t v106 = 14 - v105; // 0x5df08
                        g7 = v106;
                        int32_t v107 = v96 + 4; // 0x5df0a
                        g10 = v107;
                        int32_t v108 = *(int32_t *)g4 + v107; // 0x5df11
                        g10 = v108;
                        int32_t * v109 = (int32_t *)v108; // 0x5df13
                        int32_t v110 = *v109; // 0x5df13
                        g9 = v110;
                        int32_t v111 = *(int32_t *)(4 * v106 + (int32_t)&g665) & v110; // 0x5df15
                        g9 = v111;
                        g7 = v105;
                        int32_t v112 = g6; // 0x5df1e
                        uint32_t v113 = v105 & (int32_t)&g862 & 31; // 0x5df1e
                        int32_t v114; // 0x5df1e
                        if (v113 != 0) {
                            // bb287
                            v114 = v112 >> v113;
                            g6 = v114;
                        } else {
                            v114 = v112;
                        }
                        int32_t v115 = v114 | v111; // 0x5df20
                        g9 = v115;
                        *v109 = v115;
                    }
                    int32_t * v116 = (int32_t *)(g4 + 12); // 0x5df24
                    *v116 = *v116 + 14;
                    g6 = v1;
                    g10 = v2;
                    g8 = v3;
                    return g4;
                }
                v5 = a1;
                v6 = v91;
            }
        } else {
            int32_t v117 = *(int32_t *)(a1 + 12); // 0x5e030
            g7 = v117;
            int32_t v118 = *(int32_t *)(a1 + 8); // 0x5e033
            g6 = v118;
            int32_t v119 = v117 + 10; // 0x5e036
            g10 = v119;
            if (v119 <= v118) {
                int32_t v120 = *(int32_t *)a1; // 0x5e041
                g10 = v120;
                int32_t v121 = v117 / 32; // 0x5e050
                int32_t v122 = v117 % 32; // 0x5e059
                g7 = v122;
                int32_t v123 = v4 | 4 * a2 & 960 | 16; // 0x5e05c
                g6 = v123;
                int32_t v124 = 4 * v121; // 0x5e061
                int32_t v125 = v120 + v124; // 0x5e061
                g9 = v125;
                g8 = v122;
                int32_t * v126 = (int32_t *)v125; // 0x5e066
                int32_t v127 = *v126; // 0x5e066
                g10 = v127;
                int32_t v128 = 128 * v122; // 0x5e068
                g8 = v128;
                int32_t v129 = *(int32_t *)(v128 + (int32_t)&g669 + 4 * v122); // 0x5e06b
                int32_t v130 = v129 & v127; // 0x5e06b
                g10 = v130;
                uint32_t v131 = v117 & (int32_t)&g862 & 31; // 0x5e074
                int32_t v132; // 0x5e074
                if (v131 != 0) {
                    // bb301
                    v132 = v123 << v131;
                } else {
                    v132 = v123;
                }
                // bb303
                g8 = v132;
                *v126 = v132 | v130;
                int32_t v133 = 32 - g7; // 0x5e07f
                g8 = v133;
                if (v133 <= 9) {
                    // 0x5e086
                    g9 = v121;
                    int32_t v134 = 10 - v133; // 0x5e08e
                    g7 = v134;
                    int32_t v135 = v124 + 4; // 0x5e090
                    g10 = v135;
                    int32_t v136 = *(int32_t *)g4 + v135; // 0x5e097
                    g10 = v136;
                    int32_t * v137 = (int32_t *)v136; // 0x5e099
                    int32_t v138 = *v137; // 0x5e099
                    g9 = v138;
                    int32_t v139 = *(int32_t *)(4 * v134 + (int32_t)&g665) & v138; // 0x5e09b
                    g9 = v139;
                    g7 = v133;
                    int32_t v140 = g6; // 0x5e0a4
                    uint32_t v141 = v133 & (int32_t)&g862 & 31; // 0x5e0a4
                    int32_t v142; // 0x5e0a4
                    if (v141 != 0) {
                        // bb305
                        v142 = v140 >> v141;
                        g6 = v142;
                    } else {
                        v142 = v140;
                    }
                    int32_t v143 = v142 | v139; // 0x5e0a6
                    g9 = v143;
                    *v137 = v143;
                }
                int32_t * v144 = (int32_t *)(g4 + 12); // 0x5e0aa
                *v144 = *v144 + 10;
                g6 = v1;
                g10 = v2;
                g8 = v3;
                return g4;
            }
            v5 = a1;
            v6 = v118;
        }
    }
    // 0x5df45
    *(int32_t *)(v5 + 12) = v6;
    *(char *)(g4 + 16) = 1;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x5e0d0 - 0x5e1a9
int32_t function_5e0d0(int32_t a1, int32_t a2, int32_t a3, char a4) {
    int32_t v1 = g6; // 0x5e0d9
    int32_t v2 = g10; // 0x5e0e0
    int32_t v3 = g8; // 0x5e0e3
    g4 = a1;
    g9 = a3;
    if (a4 != 0) {
        // 0x5e198
        int32_t v4; // ebp
        g5 = v4;
        int32_t result = function_5dc00(a2, (int32_t)&g870, (int32_t)&g870); // 0x5e1a4
        g4 = result;
        return result;
    }
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x5e0f5
    int32_t v6 = *v5; // 0x5e0f5
    g7 = v6;
    int32_t v7 = *(int32_t *)(a1 + 8); // 0x5e0f8
    g6 = v7;
    int32_t v8 = v6 + a3; // 0x5e0fb
    g10 = v8;
    if (v8 > v7) {
        // 0x5e180
        *v5 = v7;
        *(char *)(g4 + 16) = 1;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    int32_t v9 = *(int32_t *)a1; // 0x5e102
    g6 = v9;
    int32_t v10 = v6 % 32; // 0x5e106
    int32_t v11 = v6 / 32; // 0x5e10c
    int32_t v12 = 32 * v10 | v10; // 0x5e112
    g7 = v12;
    g8 = a2;
    int32_t v13 = 4 * v11; // 0x5e11b
    int32_t v14 = v9 + v13; // 0x5e11b
    g10 = v14;
    int32_t * v15 = (int32_t *)v14; // 0x5e11e
    int32_t v16 = *v15; // 0x5e11e
    g6 = v16;
    int32_t v17 = v12 + a3; // 0x5e120
    g7 = v17;
    int32_t v18 = *(int32_t *)(4 * v17 + (int32_t)&g665) & v16; // 0x5e122
    g6 = v18;
    g7 = v10;
    uint32_t v19 = v6 & (int32_t)&g862 & 31; // 0x5e12d
    int32_t v20; // 0x5e12d
    if (v19 != 0) {
        // bb
        v20 = a2 << v19;
        g8 = v20;
    } else {
        v20 = a2;
    }
    // bb247
    g7 = 32 - v10;
    int32_t v21 = v20 | v18; // 0x5e137
    g6 = v21;
    *v15 = v21;
    int32_t v22 = g9; // 0x5e13b
    int32_t v23 = g7; // 0x5e13b
    int32_t v24 = v22 - v23; // 0x5e13b
    int32_t v25; // 0x5e169
    if (v22 > v23) {
        // 0x5e13f
        g6 = v11;
        g8 = a2;
        int32_t v26 = v13 + 4 + *(int32_t *)g4; // 0x5e14e
        g6 = v26;
        g10 = v22;
        int32_t * v27 = (int32_t *)v26; // 0x5e155
        int32_t v28 = *v27; // 0x5e155
        g6 = v28;
        g10 = v24;
        uint32_t v29 = v23 & (int32_t)&g862 & 31; // 0x5e159
        int32_t v30; // 0x5e159
        if (v29 != 0) {
            // bb248
            v30 = a2 >> v29;
            g8 = v30;
        } else {
            v30 = a2;
        }
        int32_t v31 = *(int32_t *)(4 * v24 + (int32_t)&g665); // 0x5e15b
        g10 = v26;
        int32_t v32 = v31 & v28 | v30; // 0x5e165
        g6 = v32;
        *v27 = v32;
        v25 = g9;
    } else {
        v25 = v22;
    }
    int32_t * v33 = (int32_t *)(g4 + 12); // 0x5e169
    *v33 = *v33 + v25;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x5e1b0 - 0x5e5f4
int32_t function_5e1b0(int32_t a1, int32_t * a2, int32_t a3) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g8; // 0x5e1b3
    int32_t v3 = g10; // 0x5e1b4
    int32_t v4 = g6; // 0x5e1b5
    g6 = a1;
    g9 = a3;
    g10 = v1;
    int32_t v5 = *(int32_t *)(a1 + 12); // 0x5e1c2
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x5e1c5
    g4 = v6;
    int32_t v7 = v5 + a3; // 0x5e1c8
    g9 = v7;
    if (v7 > v6) {
        // 0x5e500
        *(char *)(a1 + 16) = 1;
        g4 = 0;
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    // 0x5e1d2
    int32_t v8; // 0x5e27f
    if (v1 % 4 != 0) {
        // 0x5e1de
        if (a3 > 7) {
            int32_t v9 = a3;
            while (true) {
                int32_t v10 = v5 + 8; // 0x5e271
                g9 = v10;
                int32_t v11 = (int32_t)*(char *)v1; // 0x5e274
                g8 = v11;
                if (v10 > v6) {
                    // 0x5e27f
                    v8 = v9 - 8;
                    g10 = v1 + 1;
                    *(int32_t *)(a1 + 12) = v6;
                    *(char *)(g6 + 16) = 1;
                    if (g10 % 4 == 0) {
                        // break -> 0x5e298
                        break;
                    }
                } else {
                    // 0x5e1f0
                    g4 = v11;
                    g9 = v5;
                    int32_t v12 = v5 % 32; // 0x5e1f4
                    g7 = v12;
                    int32_t v13 = v11 & (int32_t)&g862; // 0x5e1f7
                    g8 = v13;
                    int32_t v14 = *(int32_t *)a1; // 0x5e1fa
                    g4 = v14;
                    int32_t v15 = v5 / 32; // 0x5e1fc
                    int32_t v16 = 128 * v12; // 0x5e207
                    g8 = v16;
                    int32_t v17 = 4 * v15; // 0x5e20a
                    int32_t v18 = v14 + v17; // 0x5e20a
                    g9 = v18;
                    int32_t * v19 = (int32_t *)v18; // 0x5e20d
                    int32_t v20 = *v19; // 0x5e20d
                    g4 = v20;
                    int32_t v21 = *(int32_t *)(v16 + (int32_t)&g668 + 4 * v12); // 0x5e20f
                    int32_t v22 = v21 & v20; // 0x5e20f
                    g4 = v22;
                    g8 = v13;
                    uint32_t v23 = v5 & (int32_t)&g862 & 31; // 0x5e219
                    int32_t v24; // 0x5e219
                    if (v23 != 0) {
                        // bb
                        v24 = v13 << v23;
                        g8 = v24;
                    } else {
                        v24 = v13;
                    }
                    int32_t v25 = v24 | v22; // 0x5e21b
                    g4 = v25;
                    g8 = 32 - v12;
                    *v19 = v25;
                    int32_t v26 = g8; // 0x5e226
                    g7 = v26;
                    if (v26 <= 7) {
                        // 0x5e22d
                        g4 = v15;
                        int32_t v27 = 8 - v26; // 0x5e235
                        g8 = v27;
                        int32_t v28 = v17 + 4; // 0x5e237
                        g9 = v28;
                        int32_t v29 = *(int32_t *)g6 + v28; // 0x5e23e
                        g9 = v29;
                        int32_t * v30 = (int32_t *)v29; // 0x5e240
                        int32_t v31 = *v30; // 0x5e240
                        g4 = v31;
                        int32_t v32 = *(int32_t *)(4 * v27 + (int32_t)&g665) & v31; // 0x5e242
                        g4 = v32;
                        g8 = v13;
                        uint32_t v33 = v26 & (int32_t)&g862 & 31; // 0x5e24c
                        int32_t v34; // 0x5e24c
                        if (v33 != 0) {
                            // bb94
                            v34 = v13 >> v33;
                            g8 = v34;
                        } else {
                            v34 = v13;
                        }
                        int32_t v35 = v34 | v32; // 0x5e24e
                        g4 = v35;
                        *v30 = v35;
                    }
                    int32_t * v36 = (int32_t *)(g6 + 12); // 0x5e252
                    *v36 = *v36 + 8;
                    uint32_t v37 = g10 + 1; // 0x5e256
                    g10 = v37;
                    int32_t v38 = v9 - 8; // 0x5e259
                    if (v37 % 4 == 0) {
                        v8 = v38;
                        // break -> 0x5e298
                        break;
                    }
                    v8 = v38;
                }
                // 0x5e265
                if (v8 <= 7) {
                    // break -> 0x5e298
                    break;
                }
                int32_t v39 = g6; // 0x5e26b
                int32_t v40 = *(int32_t *)(v39 + 12); // 0x5e26b
                g7 = v40;
                int32_t v41 = *(int32_t *)(v39 + 8); // 0x5e26e
                g4 = v41;
                a1 = v39;
                v6 = v41;
                v1 = g10;
                v5 = v40;
                v9 = v8;
            }
        } else {
            v8 = a3;
        }
    } else {
        v8 = a3;
    }
    // 0x5e298
    int32_t v42;
    int32_t v43;
    if (v8 > 31) {
        int32_t v44 = g6; // 0x5e398
        int32_t v45 = *(int32_t *)(v44 + 12); // 0x5e398
        g4 = v45;
        if ((char)v45 % 8 == 0) {
            int32_t v46 = g10; // 0x5e59b
            int32_t v47 = v45 / 8; // 0x5e59f
            g4 = v47;
            int32_t v48 = v8 / 8; // 0x5e5a2
            g8 = v48;
            int32_t v49 = 8 * v48; // 0x5e5a9
            g9 = v49;
            g10 = v46 + v48;
            int32_t v50 = *(int32_t *)v44 + v47; // 0x5e5b2
            g4 = v50;
            g4 = function_2cb10(v50, v46, v48);
            g9 = v49;
            int32_t * v51 = (int32_t *)(g6 + 12); // 0x5e5c5
            *v51 = *v51 + v49;
            v42 = v8 - v49;
            goto lab_0x5e2a2;
        } else {
            int32_t v52 = *(int32_t *)v44; // 0x5e3a3
            g8 = v52;
            int32_t v53 = v45 / 32; // 0x5e3a7
            int32_t v54 = 4 * v53; // 0x5e3ad
            g4 = v54;
            int32_t v55 = v45 % 32; // 0x5e3b0
            int32_t v56 = 64 - v55; // 0x5e3bd
            int32_t v57 = v52 + v54; // 0x5e3c5
            g9 = v57;
            int32_t v58 = 128 * v55; // 0x5e3c7
            g7 = v58;
            int32_t * v59 = (int32_t *)v57; // 0x5e3ca
            g8 = v55;
            int32_t v60 = *(int32_t *)(4 * v55 + (int32_t)&g674 + v58); // 0x5e3d2
            int32_t v61 = v60 & *v59; // 0x5e3d9
            g8 = v8;
            if (v8 < v56) {
                // 0x5e5ea
                g8 = v61;
                *v59 = v61;
                v43 = v8;
                goto lab_0x5e480;
            } else {
                int32_t v62 = g10; // 0x5e3eb
                g7 = v55;
                int32_t v63 = v62 + -4 * v53; // 0x5e3fd
                g9 = v63;
                int32_t v64 = v8; // 0x5e418
                int32_t v65; // 0x5e43c
                while (true) {
                    // 0x5e415
                    g10 = v63;
                    g8 = v64 - 32;
                    g7 = v55;
                    int32_t v66 = *(int32_t *)(v54 + v63); // 0x5e41f
                    g9 = v66;
                    int32_t v67 = v66 << (v45 & (int32_t)&g862 & 31) | v61; // 0x5e429
                    g10 = v67;
                    *(int32_t *)(v54 + v52) = v67;
                    g7 = 32 - v55;
                    g4 += 4;
                    int32_t * v68 = (int32_t *)(g6 + 12); // 0x5e438
                    *v68 = *v68 + 32;
                    uint32_t v69 = g7 & (int32_t)&g862 & 31; // 0x5e43c
                    int32_t v70 = g9;
                    if (v69 != 0) {
                        // bb108
                        v65 = v70 >> v69;
                        g9 = v65;
                    } else {
                        v65 = v70;
                    }
                    int32_t v71 = g8; // 0x5e43e
                    if (v56 > v71) {
                        // break -> 0x5e446
                        break;
                    }
                    // 0x5e410
                    v54 = g4;
                    v64 = v71;
                    v61 = v65;
                    v52 = *(int32_t *)g6;
                }
                int32_t v72 = (v8 - v56) / 32; // 0x5e452
                g4 = v72;
                g10 = 4 * v72 + 4 + v62;
                int32_t v73 = v8 - 32 + -32 * v72; // 0x5e460
                g8 = v53;
                int32_t v74 = v53 + 1 + v72; // 0x5e46e
                g9 = v74;
                int32_t v75 = *(int32_t *)g6; // 0x5e472
                g4 = v75;
                g8 = v65;
                *(int32_t *)(v75 + 4 * v74) = v65;
                if (v73 > 31) {
                    v43 = v73;
                    goto lab_0x5e480;
                } else {
                    v42 = v73;
                    goto lab_0x5e2a2;
                }
            }
        }
    } else {
        v42 = v8;
        goto lab_0x5e2a2;
    }
  lab_0x5e2a2:;
    // 0x5e2a2
    int32_t v76; // 0x5e371
    if (v42 > 7) {
        // 0x5e2ac
        g4 = v42;
        int32_t v77 = g10; // 0x5e2af
        g9 = v77;
        int32_t v78 = v77; // 0x5e34d
        int32_t v79 = v42;
        while (true) {
            int32_t v80 = g6; // 0x5e335
            int32_t * v81 = (int32_t *)(v80 + 12); // 0x5e335
            int32_t v82 = *v81; // 0x5e335
            g7 = v82;
            int32_t v83 = *(int32_t *)(v80 + 8); // 0x5e338
            g4 = v83;
            int32_t v84 = (int32_t)*(char *)v78; // 0x5e33b
            g8 = v84;
            int32_t v85 = v82 + 8; // 0x5e33e
            g10 = v85;
            int32_t v86; // 0x5e349
            if (v85 > v83) {
                // 0x5e349
                v86 = v79 - 8;
                g9 = v78 + 1;
                *v81 = v83;
                *(char *)(g6 + 16) = 1;
                if (v86 <= 7) {
                    // break -> 0x5e35d
                    break;
                }
            } else {
                int32_t v87 = v82 % 32; // 0x5e2c4
                g7 = v87;
                int32_t v88 = v82 / 32; // 0x5e2c7
                g10 = v88;
                int32_t v89 = v84 & (int32_t)&g862; // 0x5e2ca
                g8 = v89;
                g4 = v88;
                int32_t v90 = *(int32_t *)v80; // 0x5e2d2
                g10 = v90;
                int32_t v91 = 128 * v87; // 0x5e2d9
                g8 = v91;
                int32_t v92 = 4 * v88; // 0x5e2dc
                int32_t v93 = v90 + v92; // 0x5e2dc
                g4 = v93;
                int32_t * v94 = (int32_t *)v93; // 0x5e2df
                int32_t v95 = *v94; // 0x5e2df
                g10 = v95;
                int32_t v96 = *(int32_t *)(v91 + (int32_t)&g668 + 4 * v87); // 0x5e2e1
                int32_t v97 = v96 & v95; // 0x5e2e1
                g10 = v97;
                g8 = v89;
                uint32_t v98 = v82 & (int32_t)&g862 & 31; // 0x5e2eb
                int32_t v99; // 0x5e2eb
                if (v98 != 0) {
                    // bb99
                    v99 = v89 << v98;
                    g8 = v99;
                } else {
                    v99 = v89;
                }
                // bb101
                *v94 = v99 | v97;
                int32_t v100 = 32 - g7; // 0x5e2f6
                g8 = v100;
                g7 = v100;
                if (v100 <= 7) {
                    // 0x5e2ff
                    g10 = v88;
                    int32_t v101 = 8 - v100; // 0x5e307
                    g8 = v101;
                    int32_t v102 = v92 + 4; // 0x5e309
                    g4 = v102;
                    int32_t v103 = *(int32_t *)g6 + v102; // 0x5e310
                    g4 = v103;
                    int32_t * v104 = (int32_t *)v103; // 0x5e312
                    int32_t v105 = *v104; // 0x5e312
                    g10 = v105;
                    int32_t v106 = *(int32_t *)(4 * v101 + (int32_t)&g665) & v105; // 0x5e314
                    g10 = v106;
                    g8 = v89;
                    uint32_t v107 = v100 & (int32_t)&g862 & 31; // 0x5e31e
                    int32_t v108; // 0x5e31e
                    if (v107 != 0) {
                        // bb103
                        v108 = v89 >> v107;
                        g8 = v108;
                    } else {
                        v108 = v89;
                    }
                    int32_t v109 = v108 | v106; // 0x5e320
                    g8 = v109;
                    *v104 = v109;
                }
                int32_t v110 = v79 - 8; // 0x5e324
                g9++;
                int32_t * v111 = (int32_t *)(g6 + 12); // 0x5e32b
                *v111 = *v111 + 8;
                if (v110 <= 7) {
                    // break -> 0x5e35d
                    break;
                }
                v86 = v110;
            }
            // 0x5e335
            v78 = g9;
            v79 = v86;
        }
        uint32_t v112 = v42 - 8; // 0x5e363
        g4 = v112;
        uint32_t v113 = v112 / 8; // 0x5e368
        g10 = v113 + 1 + v77;
        v76 = -8 * v113 + v112;
        g9 = v76;
    } else {
        v76 = v42;
    }
    // 0x5e377
    g8 = v76;
    int32_t result; // 0x5e390
    if (v76 != 0) {
        int32_t v114 = g6; // 0x5e510
        int32_t * v115 = (int32_t *)(v114 + 12); // 0x5e510
        int32_t v116 = *v115; // 0x5e510
        g7 = v116;
        g9 = v76;
        int32_t v117 = *(int32_t *)(v114 + 8); // 0x5e516
        g4 = v117;
        int32_t v118 = (int32_t)*(char *)g10; // 0x5e519
        g10 = v118;
        int32_t v119 = v116 + v76; // 0x5e51c
        g9 = v119;
        if (v119 > v117) {
            // 0x5e5d0
            *v115 = v117;
            g4 = 0;
            *(char *)(g6 + 16) = 1;
            result = g4;
            goto lab_0x5e389;
        } else {
            int32_t v120 = v116 % 32; // 0x5e52a
            g7 = v120;
            int32_t v121 = v116 / 32; // 0x5e52d
            g8 = v121;
            int32_t v122 = v118 & (int32_t)&g862; // 0x5e530
            int32_t v123 = 4 * v121; // 0x5e533
            g4 = v123;
            g10 = v120;
            int32_t v124 = *(int32_t *)v114 + v123; // 0x5e53f
            g4 = v124;
            int32_t v125 = 33 * v120 + v76; // 0x5e546
            g10 = v125;
            int32_t * v126 = (int32_t *)v124; // 0x5e549
            int32_t v127 = *v126; // 0x5e549
            g9 = v127;
            int32_t v128 = *(int32_t *)(4 * v125 + (int32_t)&g665) & v127; // 0x5e54b
            g9 = v128;
            g10 = v122;
            uint32_t v129 = v116 & (int32_t)&g862 & 31; // 0x5e555
            int32_t v130; // 0x5e555
            if (v129 != 0) {
                // bb118
                v130 = v122 << v129;
                g10 = v130;
            } else {
                v130 = v122;
            }
            // bb120
            *v126 = v130 | v128;
            int32_t v131 = 32 - g7; // 0x5e560
            g10 = v131;
            int32_t v132 = v76 - v131; // 0x5e562
            if (v76 > v131) {
                int32_t v133 = 4 * g8 + 4; // 0x5e567
                g9 = v133;
                g7 = v76;
                int32_t v134 = *(int32_t *)g6 + v133; // 0x5e571
                g9 = v134;
                g8 = v122;
                g7 = v132;
                int32_t * v135 = (int32_t *)v134; // 0x5e578
                int32_t v136 = *v135; // 0x5e578
                g4 = v136;
                int32_t v137 = *(int32_t *)(4 * v132 + (int32_t)&g665) & v136; // 0x5e57a
                g4 = v137;
                g7 = v131;
                uint32_t v138 = v131 & (int32_t)&g862 & 31; // 0x5e583
                int32_t v139; // 0x5e583
                if (v138 != 0) {
                    // bb121
                    v139 = v122 >> v138;
                    g8 = v139;
                } else {
                    v139 = v122;
                }
                int32_t v140 = v139 | v137; // 0x5e585
                g4 = v140;
                *v135 = v140;
            }
            // 0x5e589
            g4 = v76;
            int32_t * v141 = (int32_t *)(g6 + 12); // 0x5e58c
            *v141 = *v141 + v76;
            goto lab_0x5e382;
        }
    } else {
        goto lab_0x5e382;
    }
  lab_0x5e382:;
    int32_t v142 = (int32_t)*(char *)(g6 + 16) ^ 1; // 0x5e386
    g4 = v142;
    result = v142;
    goto lab_0x5e389;
  lab_0x5e389:
    // 0x5e389
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
  lab_0x5e480:;
    int32_t v143 = *(int32_t *)g10; // 0x5e480
    g4 = v143;
    int32_t v144 = g6; // 0x5e482
    int32_t * v145 = (int32_t *)(v144 + 12); // 0x5e482
    int32_t v146 = *v145; // 0x5e482
    g7 = v146;
    int32_t v147 = *(int32_t *)(v144 + 8); // 0x5e488
    g4 = v147;
    int32_t v148 = v146 + 32; // 0x5e48b
    g9 = v148;
    if (v148 > v147) {
        // 0x5e5de
        *v145 = v147;
        *(char *)(g6 + 16) = 1;
    } else {
        int32_t v149 = *(int32_t *)v144; // 0x5e496
        g8 = v149;
        int32_t v150 = v146 % 32; // 0x5e49a
        g7 = v150;
        int32_t v151 = v146 / 32; // 0x5e49d
        int32_t v152 = 4 * v151; // 0x5e4a3
        int32_t v153 = v149 + v152; // 0x5e4a3
        g4 = v153;
        g9 = v150;
        int32_t * v154 = (int32_t *)v153; // 0x5e4a8
        int32_t v155 = *v154; // 0x5e4a8
        g8 = v155;
        int32_t v156 = 128 * v150; // 0x5e4aa
        g9 = v156;
        int32_t v157 = *(int32_t *)(v156 + (int32_t)&g674 + 4 * v150); // 0x5e4ad
        int32_t v158 = v157 & v155; // 0x5e4ad
        g8 = v158;
        g9 = v143;
        uint32_t v159 = v146 & (int32_t)&g862 & 31; // 0x5e4b7
        int32_t v160; // 0x5e4b7
        if (v159 != 0) {
            // bb110
            v160 = v143 << v159;
            g9 = v160;
        } else {
            v160 = v143;
        }
        // bb112
        *v154 = v160 | v158;
        g9 = 32;
        int32_t v161 = g7; // 0x5e4c4
        int32_t v162 = 32 - v161; // 0x5e4c4
        g8 = v162;
        g7 = v162;
        if (v161 != 0) {
            // 0x5e4cd
            g8 = v151;
            g9 = v161;
            int32_t v163 = v152 + 4; // 0x5e4d2
            g4 = v163;
            int32_t v164 = *(int32_t *)g6 + v163; // 0x5e4d9
            g4 = v164;
            int32_t * v165 = (int32_t *)v164; // 0x5e4db
            int32_t v166 = *v165; // 0x5e4db
            g8 = v166;
            int32_t v167 = *(int32_t *)(4 * v161 + (int32_t)&g665) & v166; // 0x5e4dd
            g8 = v167;
            g9 = v143;
            uint32_t v168 = v162 & (int32_t)&g862 & 31; // 0x5e4e7
            int32_t v169; // 0x5e4e7
            if (v168 != 0) {
                // bb114
                v169 = v143 >> v168;
                g9 = v169;
            } else {
                v169 = v143;
            }
            int32_t v170 = v169 | v167; // 0x5e4e9
            g9 = v170;
            *v165 = v170;
        }
        int32_t * v171 = (int32_t *)(g6 + 12); // 0x5e4ed
        *v171 = *v171 + 32;
    }
    // 0x5e4f1
    g10 += 4;
    v42 = v43 - 32;
    goto lab_0x5e2a2;
}

// Address range: 0x5e600 - 0x5e9be
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_5e600(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x5e603
    int32_t v2 = g10; // 0x5e604
    int32_t v3 = g6; // 0x5e605
    g6 = a1;
    g9 = a2;
    int32_t v4;
    int32_t v5; // 0x5e98b
    int32_t v6; // 0x5e631
    int32_t v7; // 0x5e745
    if (a3 > 32) {
        // 0x5e619
        g7 = a3;
        v6 = a2;
        v4 = a3;
        while (true) {
          lab_0x5e6e4_2:;
            int32_t * v8 = (int32_t *)(v6 + 20); // 0x5e6e4
            int32_t v9 = *v8; // 0x5e6e4
            g7 = v9;
            if (v9 > 31) {
                // 0x5e628
                g10 = -1;
                int32_t v10 = v9 - 32; // 0x5e62e
                g7 = v10;
                *v8 = v10;
                int32_t v11 = g10; // 0x5e634
                int32_t v12 = g9; // 0x5e634
                int32_t v13 = *(int32_t *)(v12 + 16); // 0x5e634
                g10 = v13 & v11;
                int32_t v14; // 0x5e658
                if (v10 != 0) {
                    v14 = v12;
                    // 0x5e658
                    *(int32_t *)(v14 + 16) = 0;
                    goto lab_0x5e65f;
                } else {
                    int32_t v15 = *(int32_t *)(v12 + 24); // 0x5e63b
                    g4 = v15;
                    *(int32_t *)(v12 + 20) = 32;
                    uint32_t v16 = g4; // 0x5e645
                    int32_t v17 = g9; // 0x5e645
                    uint32_t v18 = *(int32_t *)(v17 + 28); // 0x5e645
                    if (v16 == v18) {
                        // 0x5e910
                        g4 = v16 + 4;
                        *(int32_t *)(v17 + 20) = 1;
                        int32_t v19 = g9; // 0x5e91a
                        *(int32_t *)(v19 + 16) = 0;
                        int32_t v20 = g4; // 0x5e921
                        int32_t v21 = g9; // 0x5e921
                        *(int32_t *)(v21 + 24) = v20;
                        goto lab_0x5e65f;
                    } else {
                        if (v16 < v18) {
                            int32_t v22 = *(int32_t *)v16; // 0x5e808
                            g7 = v22;
                            int32_t v23 = v16 + 4; // 0x5e80a
                            g4 = v23;
                            *(int32_t *)(v17 + 24) = v23;
                            int32_t v24 = g7; // 0x5e810
                            int32_t v25 = g9; // 0x5e810
                            *(int32_t *)(v25 + 16) = v24;
                            goto lab_0x5e65f;
                        } else {
                            // 0x5e654
                            *(char *)(v17 + 4) = 1;
                            int32_t v26 = g9;
                            v14 = v26;
                            // 0x5e658
                            *(int32_t *)(v14 + 16) = 0;
                            goto lab_0x5e65f;
                        }
                    }
                }
            } else {
                int32_t * v27 = (int32_t *)(v6 + 24); // 0x5e6f0
                uint32_t v28 = *v27; // 0x5e6f0
                g4 = v28;
                int32_t v29 = *(int32_t *)(v6 + 16); // 0x5e6f3
                g10 = v29;
                uint32_t v30 = *(int32_t *)(v6 + 28); // 0x5e6f6
                if (v28 == v30) {
                    // 0x5e820
                    g4 = v28 + 4;
                    *v8 = 1;
                    g10 = 0;
                    *(int32_t *)(g9 + 16) = 0;
                    *(int32_t *)(g9 + 24) = g4;
                    *(char *)(g9 + 4) = 1;
                    goto lab_0x5e715;
                } else {
                    if (v28 < v30) {
                        // 0x5e7c8
                        g8 = *(int32_t *)v28;
                        int32_t v31 = v28 + 4; // 0x5e7ca
                        g4 = v31;
                        *v27 = v31;
                        *(int32_t *)(g9 + 16) = g8;
                        if (*(char *)(v6 + 4) != 0) {
                            // 0x5e713
                            g10 = 0;
                            goto lab_0x5e715;
                        } else {
                            // 0x5e7dd
                            g4 = 32;
                            *(int32_t *)(g9 + 20) = g7;
                            int32_t v32 = g7; // 0x5e7e5
                            int32_t v33 = g4 - v32; // 0x5e7e5
                            g4 = v33;
                            int32_t v34 = *(int32_t *)(4 * v33 + (int32_t)&Generic_bitmask_table_at_87960); // 0x5e7e7
                            int32_t v35 = g8; // 0x5e7ee
                            int32_t v36 = v35 & v34; // 0x5e7ee
                            uint32_t v37 = v32 & (int32_t)&g862 & 31; // 0x5e7f0
                            int32_t v38; // 0x5e7f0
                            if (v37 != 0) {
                                // bb298
                                v38 = v36 << v37;
                            } else {
                                v38 = v36;
                            }
                            // bb300
                            g10 = v38;
                            g7 = v33;
                            uint32_t v39 = v33 & (int32_t)&g862 & 31; // 0x5e7f4
                            int32_t v40; // 0x5e7f4
                            if (v39 != 0) {
                                // bb301
                                v40 = v35 >> v39;
                                g8 = v40;
                            } else {
                                v40 = v35;
                            }
                            // bb302
                            g10 = v38 | v29;
                            *(int32_t *)(g9 + 16) = v40;
                            goto lab_0x5e65f;
                        }
                    } else {
                        // 0x5e708
                        *(char *)(v6 + 4) = 1;
                        *(int32_t *)(g9 + 16) = 0;
                        // 0x5e713
                        g10 = 0;
                        goto lab_0x5e715;
                    }
                }
            }
        }
      lab_0x5e737_2:;
        int32_t v41 = a3 - 33 & -32; // 0x5e740
        g4 = -v41;
        v7 = -32 - v41 + a3;
        g7 = v7;
        v5 = g9;
    } else {
        v5 = a2;
        v7 = a3;
    }
    int32_t * v42 = (int32_t *)(v5 + 20); // 0x5e74c
    int32_t v43 = *v42; // 0x5e74c
    g7 = v43;
    int32_t v44 = v43 - v7; // 0x5e74f
    int32_t v45;
    int32_t v46;
    int32_t v47; // 0x5e79e
    int32_t v48; // 0x5e79e
    int32_t v49; // 0x5e7a1
    if (v43 < v7) {
        int32_t * v50 = (int32_t *)(v5 + 24); // 0x5e840
        uint32_t v51 = *v50; // 0x5e840
        g4 = v51;
        int32_t v52 = *(int32_t *)(v5 + 16); // 0x5e843
        g10 = v52;
        uint32_t v53 = *(int32_t *)(v5 + 28); // 0x5e846
        if (v51 == v53) {
            // 0x5e988
            g4 = v51 + 4;
            *v42 = 1;
            *(int32_t *)(g9 + 16) = 0;
            *(int32_t *)(g9 + 24) = g4;
            *(char *)(g9 + 4) = 1;
            v45 = 0;
        } else {
            if (v51 < v53) {
                // 0x5e930
                g10 = *(int32_t *)v51;
                int32_t v54 = v51 + 4; // 0x5e932
                g4 = v54;
                *v50 = v54;
                *(int32_t *)(g9 + 16) = g10;
                if (*(char *)(v5 + 4) == 0) {
                    int32_t v55 = g7; // 0x5e948
                    int32_t v56 = v7 - v55; // 0x5e948
                    g4 = v56;
                    int32_t v57 = *(int32_t *)(4 * v56 + (int32_t)&Generic_bitmask_table_at_87960); // 0x5e94a
                    int32_t v58 = g10 & v57; // 0x5e951
                    uint32_t v59 = v55 & (int32_t)&g862 & 31; // 0x5e953
                    int32_t v60; // 0x5e958
                    if (v59 != 0) {
                        // bb314
                        v60 = v58 << v59;
                    } else {
                        v60 = v58;
                    }
                    int32_t v61 = v60 | v52; // 0x5e958
                    g8 = v61;
                    *(int32_t *)(g9 + 20) = 32 - v56;
                    int32_t v62 = g4; // 0x5e967
                    g7 = v62;
                    int32_t v63 = g10; // 0x5e969
                    uint32_t v64 = v62 & (int32_t)&g862 & 31; // 0x5e969
                    int32_t v65; // 0x5e969
                    if (v64 != 0) {
                        // bb317
                        v65 = v63 >> v64;
                        g10 = v65;
                    } else {
                        v65 = v63;
                    }
                    // bb318
                    *(int32_t *)(g9 + 16) = v65;
                    v45 = v61;
                } else {
                    v45 = 0;
                }
            } else {
                // 0x5e858
                *(char *)(v5 + 4) = 1;
                *(int32_t *)(g9 + 16) = 0;
                v45 = 0;
            }
        }
        goto lab_0x5e86a;
    } else {
        // 0x5e758
        g10 = v7;
        g4 = *(int32_t *)(v5 + 16);
        g8 = *(int32_t *)(4 * v7 + (int32_t)&Generic_bitmask_table_at_87960);
        g7 = v44;
        *v42 = v44;
        int32_t v66 = g4; // 0x5e76a
        int32_t v67 = v66 & g8; // 0x5e76a
        g8 = v67;
        if (v44 != 0) {
            int32_t v68 = g10; // 0x5e900
            g7 = v68;
            uint32_t v69 = v68 & (int32_t)&g862 & 31; // 0x5e902
            int32_t v70; // 0x5e902
            if (v69 != 0) {
                // bb310
                v70 = v66 >> v69;
                g4 = v70;
            } else {
                v70 = v66;
            }
            // bb311
            *(int32_t *)(g9 + 16) = v70;
            v45 = v67;
            goto lab_0x5e86a;
        } else {
            int32_t v71 = g9; // 0x5e777
            g4 = *(int32_t *)(v71 + 24);
            *(int32_t *)(v71 + 20) = 32;
            uint32_t v72 = g4; // 0x5e781
            int32_t v73 = g9; // 0x5e781
            uint32_t v74 = *(int32_t *)(v73 + 28); // 0x5e781
            if (v72 == v74) {
                // 0x5e9a5
                g4 = v72 + 4;
                *(int32_t *)(v73 + 20) = 1;
                *(int32_t *)(g9 + 16) = 0;
                *(int32_t *)(g9 + 24) = g4;
                v45 = v67;
                goto lab_0x5e86a;
            } else {
                if (v72 < v74) {
                    // 0x5e978
                    g7 = *(int32_t *)v72;
                    int32_t v75 = v72 + 4; // 0x5e97a
                    g4 = v75;
                    *(int32_t *)(v73 + 24) = v75;
                    *(int32_t *)(g9 + 16) = g7;
                    v45 = v67;
                    goto lab_0x5e86a;
                } else {
                    // 0x5e790
                    *(char *)(v73 + 4) = 1;
                    g10 = v7;
                    *(int32_t *)(g9 + 16) = 0;
                    v47 = g6;
                    v48 = *(int32_t *)(v47 + 12);
                    g7 = v48;
                    v49 = *(int32_t *)(v47 + 8);
                    g4 = v49;
                    int32_t v76 = g10 + v48; // 0x5e7a4
                    g10 = v76;
                    if (v76 > v49) {
                        goto lab_0x5e7b0;
                    } else {
                        v46 = v67;
                        goto lab_0x5e87d;
                    }
                }
            }
        }
    }
  lab_0x5e65f:;
    int32_t v77 = g6; // 0x5e65f
    int32_t v78 = *(int32_t *)(v77 + 12); // 0x5e65f
    g7 = v78;
    int32_t v79 = *(int32_t *)(v77 + 8); // 0x5e662
    g4 = v79;
    int32_t v80 = v78 + 32; // 0x5e665
    g8 = v80;
    if (v80 > v79) {
        goto lab_0x5e726;
    } else {
        goto lab_0x5e670;
    }
  lab_0x5e715:;
    int32_t v81 = g6; // 0x5e715
    int32_t v82 = *(int32_t *)(v81 + 12); // 0x5e715
    g7 = v82;
    int32_t v83 = *(int32_t *)(v81 + 8); // 0x5e718
    g4 = v83;
    int32_t v84 = v82 + 32; // 0x5e71b
    g8 = v84;
    if (v84 > v83) {
        v77 = v81;
        v79 = v83;
        goto lab_0x5e726;
    } else {
        v77 = v81;
        v78 = v82;
        goto lab_0x5e670;
    }
  lab_0x5e726:;
    int32_t v85 = v4 - 32; // 0x5e726
    *(int32_t *)(v77 + 12) = v79;
    *(char *)(g6 + 16) = 1;
    if (v85 <= 32) {
        // break -> 0x5e737
        goto lab_0x5e737_2;
    }
    goto lab_0x5e6e4;
  lab_0x5e670:;
    int32_t v115 = v78 % 32; // 0x5e672
    g7 = v115;
    int32_t v116 = v78 / 32; // 0x5e675
    g8 = v116;
    g4 = v116;
    int32_t v117 = *(int32_t *)v77; // 0x5e67d
    g8 = v117;
    int32_t v118 = 4 * v116; // 0x5e67f
    int32_t v119 = v117 + v118; // 0x5e67f
    g4 = v119;
    int32_t * v120 = (int32_t *)v119; // 0x5e682
    int32_t v121 = 128 * v115; // 0x5e689
    g8 = v121;
    int32_t v122 = *(int32_t *)(v121 + (int32_t)&g674 + 4 * v115); // 0x5e68c
    int32_t v123 = g10; // 0x5e696
    uint32_t v124 = v78 & (int32_t)&g862 & 31; // 0x5e698
    int32_t v125; // 0x5e69a
    if (v124 != 0) {
        // bb
        v125 = v123 << v124;
    } else {
        v125 = v123;
    }
    int32_t v126 = v125 | v122 & *v120; // 0x5e69a
    g8 = v126;
    *v120 = v126;
    int32_t v127 = g7; // 0x5e6a4
    int32_t v128 = 32 - v127; // 0x5e6a4
    g4 = v128;
    g7 = v128;
    if (v127 != 0) {
        // 0x5e6ad
        g8 = v116;
        int32_t v129 = g10; // 0x5e6b0
        uint32_t v130 = v128 & (int32_t)&g862 & 31; // 0x5e6b0
        int32_t v131; // 0x5e6b0
        if (v130 != 0) {
            // bb291
            v131 = v129 >> v130;
            g10 = v131;
        } else {
            v131 = v129;
        }
        int32_t v132 = v118 + 4; // 0x5e6b2
        g4 = v132;
        int32_t v133 = *(int32_t *)g6 + v132; // 0x5e6b9
        g4 = v133;
        int32_t * v134 = (int32_t *)v133; // 0x5e6bb
        g8 = v127;
        int32_t v135 = *(int32_t *)(4 * v127 + (int32_t)&g665); // 0x5e6c7
        g8 = v135;
        int32_t v136 = v135 & *v134 | v131; // 0x5e6d1
        g10 = v136;
        *v134 = v136;
    }
    int32_t v137 = v4 - 32; // 0x5e6d6
    int32_t * v138 = (int32_t *)(g6 + 12); // 0x5e6da
    *v138 = *v138 + 32;
    if (v137 <= 32) {
        // break -> 0x5e737
        goto lab_0x5e737_2;
    }
    v85 = v137;
    goto lab_0x5e6e4;
  lab_0x5e6e4:
    // 0x5e6e4
    v6 = g9;
    v4 = v85;
    goto lab_0x5e6e4_2;
  lab_0x5e86a:;
    int32_t v86 = g6; // 0x5e86a
    int32_t v87 = *(int32_t *)(v86 + 12); // 0x5e86a
    g7 = v87;
    g10 = v7;
    int32_t v88 = *(int32_t *)(v86 + 8); // 0x5e870
    g4 = v88;
    int32_t v89 = v87 + v7; // 0x5e873
    g10 = v89;
    if (v89 > v88) {
        v47 = v86;
        v49 = v88;
        goto lab_0x5e7b0;
    } else {
        v47 = v86;
        v48 = v87;
        v46 = v45;
        goto lab_0x5e87d;
    }
  lab_0x5e7b0:
    // 0x5e7b0
    *(int32_t *)(v47 + 12) = v49;
    g4 = 0;
    *(char *)(g6 + 16) = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x5e87d:;
    int32_t v90 = v48 % 32; // 0x5e87f
    g7 = v90;
    int32_t v91 = 32 - v90; // 0x5e889
    int32_t v92 = v48 / 32; // 0x5e88c
    g10 = v92;
    g8 = v90;
    g4 = v92;
    int32_t v93 = *(int32_t *)v47; // 0x5e896
    g10 = v93;
    int32_t v94 = 33 * v90 + v7; // 0x5e89d
    g8 = v94;
    int32_t v95 = 4 * v92; // 0x5e8a0
    int32_t v96 = v93 + v95; // 0x5e8a0
    g4 = v96;
    int32_t * v97 = (int32_t *)v96; // 0x5e8a3
    int32_t v98 = *v97; // 0x5e8a3
    g10 = v98;
    int32_t v99 = *(int32_t *)(4 * v94 + (int32_t)&g665) & v98; // 0x5e8a5
    g10 = v99;
    uint32_t v100 = v48 & (int32_t)&g862 & 31; // 0x5e8af
    int32_t v101; // 0x5e8af
    if (v100 != 0) {
        // bb304
        v101 = v46 << v100;
    } else {
        v101 = v46;
    }
    // bb306
    g8 = v101;
    g7 = v7;
    int32_t v102 = v101 | v99; // 0x5e8b4
    g8 = v102;
    *v97 = v102;
    int32_t v103 = g7; // 0x5e8b8
    if (v103 > v91) {
        int32_t v104 = v103 - v91; // 0x5e8c0
        g7 = v104;
        int32_t v105 = v95 + 4; // 0x5e8c3
        g4 = v105;
        g10 = v46;
        int32_t v106 = *(int32_t *)g6 + v105; // 0x5e8cd
        g4 = v106;
        int32_t * v107 = (int32_t *)v106; // 0x5e8cf
        int32_t v108 = *v107; // 0x5e8cf
        g8 = v108;
        int32_t v109 = *(int32_t *)(4 * v104 + (int32_t)&g665) & v108; // 0x5e8d1
        g8 = v109;
        g7 = v91;
        uint32_t v110 = v91 & (int32_t)&g862 & 31; // 0x5e8dc
        int32_t v111; // 0x5e8dc
        if (v110 != 0) {
            // bb307
            v111 = v46 >> v110;
            g10 = v111;
        } else {
            v111 = v46;
        }
        int32_t v112 = v111 | v109; // 0x5e8de
        g10 = v112;
        *v107 = v112;
    }
    // 0x5e8e2
    g7 = v7;
    g4 = 0;
    int32_t * v113 = (int32_t *)(g6 + 12); // 0x5e8e7
    *v113 = *v113 + v7;
    int32_t result; // 0x5e8fe
    if (*(char *)(g6 + 16) != 0) {
        // 0x5e8e2
        result = g4;
    } else {
        int32_t v114 = (int32_t)*(char *)(g9 + 4) ^ 1; // 0x5e8f4
        g4 = v114;
        result = v114;
    }
    // 0x5e8f7
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x5e9c0 - 0x5eab4
int32_t function_5e9c0(int32_t a1, int32_t a2, uint32_t a3) {
    // 0x5e9c0
    g9 = a3;
    int32_t v1 = g10; // 0x5e9c9
    g4 = a1;
    int32_t v2 = g8; // 0x5e9cf
    int32_t v3 = g6; // 0x5e9d2
    int32_t v4 = a3 % 32; // 0x5e9d7
    g7 = v4;
    int32_t v5 = *(int32_t *)(a1 + 8); // 0x5e9da
    g6 = v5;
    int32_t v6 = *(int32_t *)(4 * v4 + (int32_t)&g299); // 0x5e9dd
    g10 = v6;
    int32_t * v7 = (int32_t *)(a1 + 12); // 0x5e9e4
    int32_t v8 = *v7; // 0x5e9e4
    g7 = v8;
    int32_t v9 = v8 + a3; // 0x5e9e7
    g8 = v9;
    if (v9 > v5) {
        // 0x5eaa0
        *v7 = v5;
        *(char *)(g4 + 16) = 1;
        g6 = v3;
        g10 = v1;
        g8 = v2;
        return g4;
    }
    int32_t v10 = v6 ^ -0x80000000; // 0x5e9f2
    g6 = v10;
    int128_t v11 = __asm_movss(a2); // 0x5e9f8
    g10--;
    int128_t v12 = __asm_cvtsi2sd(v10); // 0x5ea00
    int128_t v13 = __asm_divsd_1660(__asm_cvtps2pd(v11), 0x4076800000000000); // 0x5ea07
    int128_t v14 = __asm_mulsd(v13, __asm_addsd_1657(v12, 0x41e0000000000000)); // 0x5ea1e
    int32_t v15 = g10 & __asm_cvttsd2si(v14); // 0x5ea26
    int32_t v16 = g7; // 0x5ea28
    int32_t v17 = v16 % 32; // 0x5ea2a
    g7 = v17;
    int32_t v18 = v16 / 32; // 0x5ea2d
    g10 = v18;
    g8 = v17;
    g6 = v18;
    int32_t v19 = *(int32_t *)g4; // 0x5ea3a
    g10 = v19;
    int32_t v20 = 32 - v17; // 0x5ea3c
    int32_t v21 = g9; // 0x5ea44
    int32_t v22 = v21 + 33 * v17; // 0x5ea44
    g8 = v22;
    int32_t v23 = 4 * v18; // 0x5ea46
    int32_t v24 = v19 + v23; // 0x5ea46
    g6 = v24;
    int32_t * v25 = (int32_t *)v24; // 0x5ea49
    int32_t v26 = *v25; // 0x5ea49
    g10 = v26;
    int32_t v27 = *(int32_t *)(4 * v22 + (int32_t)&g665) & v26; // 0x5ea4b
    g10 = v27;
    uint32_t v28 = v16 & (int32_t)&g862 & 31; // 0x5ea55
    int32_t v29; // 0x5ea57
    if (v28 != 0) {
        // bb
        v29 = v15 << v28;
    } else {
        v29 = v15;
    }
    int32_t v30 = v29 | v27; // 0x5ea57
    g8 = v30;
    *v25 = v30;
    if (v21 > v20) {
        int32_t v31 = g9 - v20; // 0x5ea75
        g7 = v31;
        int32_t v32 = v23 + 4; // 0x5ea78
        g6 = v32;
        g10 = v15;
        int32_t v33 = *(int32_t *)g4 + v32; // 0x5ea82
        g6 = v33;
        int32_t * v34 = (int32_t *)v33; // 0x5ea84
        int32_t v35 = *v34; // 0x5ea84
        g8 = v35;
        int32_t v36 = *(int32_t *)(4 * v31 + (int32_t)&g665) & v35; // 0x5ea86
        g8 = v36;
        g7 = v20;
        uint32_t v37 = v20 & (int32_t)&g862 & 31; // 0x5ea91
        int32_t v38; // 0x5ea91
        if (v37 != 0) {
            // bb256
            v38 = v15 >> v37;
            g10 = v38;
        } else {
            v38 = v15;
        }
        int32_t v39 = v38 | v36; // 0x5ea93
        g10 = v39;
        *v34 = v39;
    }
    int32_t * v40 = (int32_t *)(g4 + 12); // 0x5ea60
    *v40 = g9 + *v40;
    g6 = v3;
    g10 = v1;
    g8 = v2;
    return g4;
}

// Address range: 0x5eac0 - 0x5f06c
int32_t function_5eac0(int32_t a1, int32_t a2, uint32_t a3) {
    int32_t v1 = g8; // 0x5eac3
    int32_t v2 = g10; // 0x5eac4
    int32_t v3 = g6; // 0x5eac5
    int128_t v4 = __asm_movss(a2); // 0x5eacd
    g4 = a1;
    int128_t v5 = __asm_unpcklps(v4, v4); // 0x5ead5
    int128_t v6 = __asm_movsd_1649(-0x4060000000000000); // xmm1
    int128_t v7 = __asm_cvtps2pd(v5); // 0x5eae0
    bool v8 = a3 == 1; // 0x5eae3
    int128_t v9; // 0x5eaf7
    if (!v8) {
        // 0x5eac0
        v9 = v6;
    } else {
        int128_t v10 = __asm_movsd_1649(-0x4040000000000000); // 0x5eaed
        v6 = v10;
        v9 = v10;
    }
    bool v11 = false; // cf
    g9 = 0;
    __asm_ucomisd(v9, v7);
    int128_t v12 = v6; // 0x5eafb
    g9 = g9 & -256 | (int32_t)!v11;
    __asm_ucomiss_1648(__asm_xorps(v12, v12), v5);
    int32_t v13 = g9; // 0x5eb04
    int128_t v14;
    if (v11 || true) {
        // 0x5ee78
        v14 = __asm_movaps(v5);
    } else {
        // 0x5eb0d
        v14 = __asm_xorps(__asm_movss((int32_t)g233), v5);
    }
    // 0x5eb18
    g9 = __asm_cvttss2si_1647(v14);
    int32_t v15;
    if (!v8) {
        int32_t v16 = __asm_cvttss2si_1647(__asm_mulss_1654(v5, 0x42000000)); // 0x5ee60
        int32_t v17 = v16 >> 31; // 0x5ee66
        g7 = v17;
        int32_t v18 = (v17 ^ v16) - v17; // 0x5ee6b
        g6 = v18;
        v15 = v18 % 32;
    } else {
        int32_t v19 = __asm_cvttss2si_1647(__asm_mulss_1654(v5, 0x41000000)); // 0x5eb2e
        int32_t v20 = v19 >> 31; // 0x5eb34
        g7 = v20;
        int32_t v21 = (v20 ^ v19) - v20; // 0x5eb39
        g6 = v21;
        v15 = v21 % 8;
    }
    // 0x5eb3e
    g6 = v15;
    int32_t v22 = g4; // 0x5eb3e
    int32_t v23 = *(int32_t *)(v22 + 12); // 0x5eb3e
    g7 = v23;
    int32_t v24 = g9; // 0x5eb41
    int32_t v25 = v24 - (int32_t)&g143; // 0x5eb41
    bool v26 = v25 == 0 | v25 < 0 != ((v25 ^ v24) & (v24 ^ (int32_t)&g143)) < 0; // 0x5eb47
    int32_t v27 = *(int32_t *)(v22 + 8); // 0x5eb4b
    g10 = v27;
    if (v23 < v27) {
        // 0x5eb56
        if (*(char *)(v22 + 16) == 0) {
            int32_t v28 = *(int32_t *)v22; // 0x5eb5c
            g10 = v28;
            if (v26) {
                // 0x5ee90
                g8 = v23;
                g7 = v23 % 8;
                uint32_t v29 = v23 & (int32_t)&g862 & 7; // 0x5ee9c
                int32_t v30;
                if (v29 != 0) {
                    // bb368
                    v30 = 1 << v29;
                } else {
                    v30 = 1;
                }
                int32_t v31 = v23 / 8; // 0x5ee9f
                g8 = v31;
                g7 = v30 % 256;
                char * v32 = (char *)(v28 + v31); // 0x5eea9
                *v32 = *v32 | (char)v30;
            } else {
                // 0x5eb6b
                g7 = v23 % 8;
                int32_t v33 = v23 / 8; // 0x5eb70
                g10 = 1;
                uint32_t v34 = v23 & (int32_t)&g862 & 7; // 0x5eb7b
                int32_t v35; // 0x5eb7b
                if (v34 != 0) {
                    // bb
                    v35 = 1 << v34;
                    g10 = v35;
                } else {
                    v35 = 1;
                }
                // bb331
                g8 = v33;
                g10 = v28;
                int32_t v36 = -1 - v35; // 0x5eb85
                g7 = v36;
                char * v37 = (char *)(v28 + v33); // 0x5eb87
                *v37 = *v37 & (char)v36;
            }
            int32_t v38 = g4; // 0x5eb8a
            int32_t * v39 = (int32_t *)(v38 + 12); // 0x5eb8a
            int32_t v40 = *v39; // 0x5eb8a
            g7 = v40;
            g10 = *(int32_t *)(v38 + 8);
            int32_t v41 = v40 + 1; // 0x5eb90
            g7 = v41;
            *v39 = v41;
        }
        // 0x5eb96
        if (a3 == 2) {
            goto lab_0x5ed5e;
        } else {
            goto lab_0x5eba0;
        }
    } else {
        // 0x5ed50
        *(char *)(v22 + 16) = 1;
        if (a3 != 2) {
            goto lab_0x5eba0;
        } else {
            goto lab_0x5ed5e;
        }
    }
  lab_0x5ed5e:;
    int32_t v42 = g7; // 0x5ed5e
    int32_t v43 = g4; // 0x5ed66
    char * v44 = (char *)(v43 + 16); // 0x5ed66
    if (g10 > v42) {
        // 0x5ed66
        if (*v44 == 0) {
            // 0x5ed6c
            g8 = v42;
            g10 = 1;
            g7 = v42 % 8;
            uint32_t v45 = v42 & (int32_t)&g862 & 7; // 0x5ed76
            int32_t v46; // 0x5ed76
            if (v45 != 0) {
                // bb355
                v46 = 1 << v45;
                g10 = v46;
            } else {
                v46 = 1;
            }
            int32_t v47 = v42 / 8; // 0x5ed78
            g8 = v47;
            int32_t v48 = *(int32_t *)v43; // 0x5ed7d
            g6 = v48;
            g7 = v46;
            if (g9 == 0) {
                int32_t v49 = -1 - v46; // 0x5efc0
                g7 = v49;
                char * v50 = (char *)(v48 + v47); // 0x5efc2
                *v50 = *v50 & (char)v49;
            } else {
                char * v51 = (char *)(v48 + v47); // 0x5ed87
                *v51 = *v51 | (char)v46;
            }
            int32_t * v52 = (int32_t *)(g4 + 12); // 0x5ed8a
            *v52 = *v52 + 1;
        }
    } else {
        // 0x5ef98
        *v44 = 1;
    }
    // 0x5ed8e
    int32_t v53; // 0x5efe3
    if (g9 == 0) {
        goto lab_0x5ed45;
    } else {
        int32_t v54 = g4; // 0x5ed92
        int32_t v55 = *(int32_t *)(v54 + 12); // 0x5ed92
        g7 = v55;
        int32_t v56 = *(int32_t *)(v54 + 8); // 0x5ed95
        g6 = v56;
        char * v57 = (char *)(v54 + 16); // 0x5eda0
        if (v55 < v56) {
            // 0x5eda0
            if (*v57 == 0) {
                // 0x5eda6
                g8 = v55;
                g10 = 1;
                g7 = v55 % 8;
                uint32_t v58 = v55 & (int32_t)&g862 & 7; // 0x5edb0
                int32_t v59; // 0x5edb0
                if (v58 != 0) {
                    // bb358
                    v59 = 1 << v58;
                    g10 = v59;
                } else {
                    v59 = 1;
                }
                int32_t v60 = v55 / 8; // 0x5edb2
                g8 = v60;
                int32_t v61 = *(int32_t *)v54; // 0x5edb5
                g6 = v61;
                g7 = v59;
                g10 = v13;
                if (v13 != 0) {
                    char * v62 = (char *)(v61 + v60); // 0x5f050
                    *v62 = *v62 | (char)v59;
                } else {
                    int32_t v63 = -1 - v59; // 0x5edc4
                    g7 = v63;
                    char * v64 = (char *)(v61 + v60); // 0x5edc6
                    *v64 = *v64 & (char)v63;
                }
                int32_t v65 = g4; // 0x5edc9
                int32_t * v66 = (int32_t *)(v65 + 12); // 0x5edc9
                int32_t v67 = *v66; // 0x5edc9
                g7 = v67;
                g6 = *(int32_t *)(v65 + 8);
                int32_t v68 = v67 + 1; // 0x5edcf
                g7 = v68;
                *v66 = v68;
            }
        } else {
            // 0x5efd0
            *v57 = 1;
        }
        int32_t v69 = g9 - 1; // 0x5edd5
        g9 = v69;
        int32_t v70 = g7; // 0x5efe0
        if (!v26) {
            int32_t v71 = v70 + 14; // 0x5efe0
            g9 = v71;
            v53 = g6;
            if (v71 > v53) {
                goto lab_0x5f060;
            } else {
                int32_t v72 = v70 % 32; // 0x5efe9
                g7 = v72;
                int32_t v73 = v70 / 32; // 0x5efec
                g6 = v73;
                int32_t v74 = 4 * v73; // 0x5eff1
                g10 = v74;
                int32_t v75 = 128 * v72; // 0x5eff8
                g8 = v75;
                int32_t v76 = *(int32_t *)g4 + v74; // 0x5effb
                g10 = v76;
                int32_t * v77 = (int32_t *)v76; // 0x5effd
                int32_t v78 = *v77; // 0x5effd
                g9 = v78;
                int32_t v79 = *(int32_t *)(v75 + (int32_t)&g671 + 4 * v72); // 0x5efff
                int32_t v80 = v79 & v78; // 0x5efff
                g9 = v80;
                g8 = v69;
                uint32_t v81 = v70 & (int32_t)&g862 & 31; // 0x5f009
                int32_t v82; // 0x5f009
                if (v81 != 0) {
                    // bb383
                    v82 = v69 << v81;
                    g8 = v82;
                } else {
                    v82 = v69;
                }
                // bb385
                *v77 = v82 | v80;
                int32_t v83 = 32 - g7; // 0x5f014
                g9 = v83;
                if (v83 <= 13) {
                    int32_t v84 = 4 * g6 + 4; // 0x5f01b
                    g10 = v84;
                    g7 = 14;
                    g8 = v69;
                    int32_t v85 = *(int32_t *)g4 + v84; // 0x5f02a
                    g10 = v85;
                    int32_t v86 = 14 - v83; // 0x5f02c
                    g7 = v86;
                    int32_t * v87 = (int32_t *)v85; // 0x5f02e
                    int32_t v88 = *v87; // 0x5f02e
                    g6 = v88;
                    int32_t v89 = *(int32_t *)(4 * v86 + (int32_t)&g665) & v88; // 0x5f030
                    g6 = v89;
                    g7 = v83;
                    uint32_t v90 = v83 & (int32_t)&g862 & 31; // 0x5f039
                    int32_t v91; // 0x5f039
                    if (v90 != 0) {
                        // bb387
                        v91 = v69 >> v90;
                        g8 = v91;
                    } else {
                        v91 = v69;
                    }
                    int32_t v92 = v91 | v89; // 0x5f03b
                    g6 = v92;
                    *v87 = v92;
                }
                int32_t * v93 = (int32_t *)(g4 + 12); // 0x5f03f
                *v93 = *v93 + 14;
                goto lab_0x5ed45;
            }
        } else {
            int32_t v94 = v70 + 11; // 0x5ede5
            g9 = v94;
            int32_t v95 = g6; // 0x5ede8
            if (v94 > v95) {
                v53 = v95;
                goto lab_0x5f060;
            } else {
                int32_t v96 = v70 % 32; // 0x5edf2
                g7 = v96;
                int32_t v97 = v70 / 32; // 0x5edf5
                g6 = v97;
                int32_t v98 = 4 * v97; // 0x5edfa
                g10 = v98;
                int32_t v99 = 128 * v96; // 0x5ee01
                g8 = v99;
                int32_t v100 = *(int32_t *)g4 + v98; // 0x5ee04
                g10 = v100;
                int32_t * v101 = (int32_t *)v100; // 0x5ee06
                int32_t v102 = *v101; // 0x5ee06
                g9 = v102;
                int32_t v103 = *(int32_t *)(v99 + (int32_t)&g670 + 4 * v96); // 0x5ee08
                int32_t v104 = v103 & v102; // 0x5ee08
                g9 = v104;
                g8 = v69;
                uint32_t v105 = v70 & (int32_t)&g862 & 31; // 0x5ee12
                int32_t v106; // 0x5ee12
                if (v105 != 0) {
                    // bb361
                    v106 = v69 << v105;
                    g8 = v106;
                } else {
                    v106 = v69;
                }
                // bb363
                *v101 = v106 | v104;
                int32_t v107 = 32 - g7; // 0x5ee1d
                g9 = v107;
                if (v107 <= 10) {
                    int32_t v108 = 4 * g6 + 4; // 0x5ee24
                    g10 = v108;
                    g7 = 11;
                    g8 = v69;
                    int32_t v109 = *(int32_t *)g4 + v108; // 0x5ee33
                    g10 = v109;
                    int32_t v110 = 11 - v107; // 0x5ee35
                    g7 = v110;
                    int32_t * v111 = (int32_t *)v109; // 0x5ee37
                    int32_t v112 = *v111; // 0x5ee37
                    g6 = v112;
                    int32_t v113 = *(int32_t *)(4 * v110 + (int32_t)&g665) & v112; // 0x5ee39
                    g6 = v113;
                    g7 = v107;
                    uint32_t v114 = v107 & (int32_t)&g862 & 31; // 0x5ee42
                    int32_t v115; // 0x5ee42
                    if (v114 != 0) {
                        // bb365
                        v115 = v69 >> v114;
                        g8 = v115;
                    } else {
                        v115 = v69;
                    }
                    int32_t v116 = v115 | v113; // 0x5ee44
                    g6 = v116;
                    *v111 = v116;
                }
                int32_t * v117 = (int32_t *)(g4 + 12); // 0x5ee48
                *v117 = *v117 + 11;
                goto lab_0x5ed45;
            }
        }
    }
  lab_0x5eba0:;
    int32_t v118 = g7; // 0x5eba0
    int32_t v119; // 0x5ebf3
    if (g10 > v118) {
        int32_t v120 = g4; // 0x5eba8
        if (*(char *)(v120 + 16) != 0) {
            v119 = v120;
            goto lab_0x5ebeb;
        } else {
            int32_t v121 = *(int32_t *)v120; // 0x5ebae
            g10 = v121;
            if (g9 == 0) {
                // 0x5eed0
                g7 = v118 % 8;
                int32_t v122 = v118 / 8; // 0x5eed5
                v11 = (v118 & 4) != 0;
                g10 = 1;
                uint32_t v123 = v118 & (int32_t)&g862 & 7; // 0x5eee0
                int32_t v124; // 0x5eee5
                if (v123 != 0) {
                    int32_t v125 = 1 << v123; // 0x5eee0
                    g10 = v125;
                    v11 = false;
                    v124 = v125;
                } else {
                    v124 = 1;
                }
                // bb372
                g8 = v122;
                g10 = v121;
                int32_t v126 = -1 - v124; // 0x5eeea
                g7 = v126;
                char * v127 = (char *)(v121 + v122); // 0x5eeec
                char v128 = *v127; // 0x5eeec
                char v129 = v128 & (char)v126; // 0x5eeec
                v11 = false;
                *v127 = v129;
            } else {
                // 0x5ebbb
                g8 = v118;
                g7 = v118 % 8;
                uint32_t v130 = v118 & (int32_t)&g862 & 7; // 0x5ebc7
                int32_t v131;
                if (v130 != 0) {
                    // bb334
                    v131 = 1 << v130;
                } else {
                    v131 = 1;
                }
                int32_t v132 = v118 / 8; // 0x5ebca
                g8 = v132;
                g7 = v131 % 256;
                char * v133 = (char *)(v121 + v132); // 0x5ebd4
                *v133 = *v133 | (char)v131;
            }
            int32_t v134 = g4; // 0x5ebd7
            int32_t * v135 = (int32_t *)(v134 + 12); // 0x5ebd7
            int32_t v136 = *v135; // 0x5ebd7
            g7 = v136;
            int32_t v137 = *(int32_t *)(v134 + 8); // 0x5ebda
            g10 = v137;
            int32_t v138 = v136 + 1; // 0x5ebdd
            g7 = v138;
            *v135 = v138;
            if (v138 < v137) {
                // 0x5ebd7
                v119 = g4;
                goto lab_0x5ebeb;
            } else {
                // 0x5ee80
                *(char *)(g4 + 16) = 1;
                goto lab_0x5ec28;
            }
        }
    } else {
        // 0x5ee80
        *(char *)(g4 + 16) = 1;
        goto lab_0x5ec28;
    }
  lab_0x5ed45:
    // 0x5ed45
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x5ebeb:
    // 0x5ebeb
    if (*(char *)(v119 + 16) == 0) {
        int32_t v139 = g7; // 0x5ebf1
        g10 = v139;
        int32_t v140 = *(int32_t *)v119; // 0x5ebf3
        g8 = v140;
        g7 = v139 % 8;
        int32_t v141 = v139 / 8; // 0x5ebf8
        g10 = v141;
        if (v13 == 0) {
            // 0x5eef8
            g10 = 1;
            g8 = v141;
            uint32_t v142 = v139 & (int32_t)&g862 & 7; // 0x5ef00
            int32_t v143; // 0x5ef02
            if (v142 != 0) {
                int32_t v144 = 1 << v142; // 0x5ef00
                g10 = v144;
                v143 = -1 - v144;
            } else {
                v143 = -2;
            }
            // bb374
            g10 = v140;
            g7 = v143;
            char * v145 = (char *)(v140 + v141); // 0x5ef09
            *v145 = *v145 & (char)v143;
        } else {
            uint32_t v146 = v139 & (int32_t)&g862 & 7; // 0x5ec12
            int32_t v147;
            if (v146 != 0) {
                // bb336
                v147 = 1 << v146;
            } else {
                v147 = 1;
            }
            // bb337
            g7 = v147 % 256;
            char * v148 = (char *)(v140 + v141); // 0x5ec19
            *v148 = *v148 | (char)v147;
        }
        int32_t v149 = g4; // 0x5ec1c
        int32_t * v150 = (int32_t *)(v149 + 12); // 0x5ec1c
        int32_t v151 = *v150; // 0x5ec1c
        g7 = v151;
        g10 = *(int32_t *)(v149 + 8);
        int32_t v152 = v151 + 1; // 0x5ec22
        g7 = v152;
        *v150 = v152;
    }
    goto lab_0x5ec28;
  lab_0x5ec28:;
    int32_t v153 = g9; // 0x5ec28
    int32_t v154; // 0x5ef1b
    if (v153 == 0) {
        goto lab_0x5ecc0;
    } else {
        int32_t v155 = v153 - 1; // 0x5ec30
        g9 = v155;
        int32_t v156 = g7; // 0x5ef18
        if (!v26) {
            int32_t v157 = v156 + 14; // 0x5ef18
            g9 = v157;
            v154 = g10;
            if (v154 < v157) {
                goto lab_0x5efa8;
            } else {
                int32_t v158 = v156 % 32; // 0x5ef27
                int32_t v159 = 128 * v158; // 0x5ef30
                g7 = v159;
                int32_t v160 = 4 * v156 / 32; // 0x5ef36
                int32_t v161 = *(int32_t *)g4 + v160; // 0x5ef36
                g10 = v161;
                g8 = v158;
                int32_t * v162 = (int32_t *)v161; // 0x5ef3c
                int32_t v163 = *v162; // 0x5ef3c
                g9 = v163;
                int32_t v164 = *(int32_t *)(4 * v158 + (int32_t)&g671 + v159); // 0x5ef3e
                int32_t v165 = v164 & v163; // 0x5ef3e
                g9 = v165;
                g7 = v158;
                g8 = v155;
                uint32_t v166 = v156 & (int32_t)&g862 & 31; // 0x5ef4c
                int32_t v167; // 0x5ef4c
                if (v166 != 0) {
                    // bb375
                    v167 = v155 << v166;
                    g8 = v167;
                } else {
                    v167 = v155;
                }
                // bb377
                g7 = 32 - v158;
                int32_t v168 = v167 | v165; // 0x5ef56
                g9 = v168;
                *v162 = v168;
                uint32_t v169 = g7; // 0x5ef5a
                if ((char)v169 <= 13) {
                    int32_t v170 = v160 + 4; // 0x5ef62
                    g8 = v170;
                    g9 = 14;
                    int32_t v171 = *(int32_t *)g4 + v170; // 0x5ef6e
                    g8 = v171;
                    int32_t v172 = 14 - v169; // 0x5ef70
                    g9 = v172;
                    int32_t * v173 = (int32_t *)v171; // 0x5ef72
                    int32_t v174 = *v173; // 0x5ef72
                    g10 = v174;
                    int32_t v175 = *(int32_t *)(4 * v172 + (int32_t)&g665) & v174; // 0x5ef74
                    g10 = v175;
                    g9 = v155;
                    uint32_t v176 = v169 & (int32_t)&g862 & 31; // 0x5ef7e
                    int32_t v177; // 0x5ef7e
                    if (v176 != 0) {
                        // bb380
                        v177 = v155 >> v176;
                        g9 = v177;
                    } else {
                        v177 = v155;
                    }
                    int32_t v178 = v177 | v175; // 0x5ef80
                    g10 = v178;
                    *v173 = v178;
                }
                int32_t v179 = g4; // 0x5ef84
                int32_t * v180 = (int32_t *)(v179 + 12); // 0x5ef84
                uint32_t v181 = *v180; // 0x5ef84
                g7 = v181;
                g10 = *(int32_t *)(v179 + 8);
                int32_t v182 = v181 + 14; // 0x5ef8a
                g7 = v182;
                *v180 = v182;
                goto lab_0x5ecc0;
            }
        } else {
            int32_t v183 = v156 + 11; // 0x5ec40
            g9 = v183;
            int32_t v184 = g10; // 0x5ec43
            if (v184 < v183) {
                v154 = v184;
                goto lab_0x5efa8;
            } else {
                int32_t v185 = *(int32_t *)g4; // 0x5ec4b
                g9 = v185;
                int32_t v186 = v156 % 32; // 0x5ec4f
                int32_t v187 = 128 * v186; // 0x5ec58
                g7 = v187;
                int32_t v188 = 4 * v156 / 32; // 0x5ec5e
                int32_t v189 = v185 + v188; // 0x5ec5e
                g10 = v189;
                g8 = v186;
                int32_t * v190 = (int32_t *)v189; // 0x5ec64
                int32_t v191 = *v190; // 0x5ec64
                g9 = v191;
                int32_t v192 = *(int32_t *)(4 * v186 + (int32_t)&g670 + v187); // 0x5ec66
                int32_t v193 = v192 & v191; // 0x5ec66
                g9 = v193;
                g7 = v186;
                g8 = v155;
                uint32_t v194 = v156 & (int32_t)&g862 & 31; // 0x5ec74
                int32_t v195; // 0x5ec74
                if (v194 != 0) {
                    // bb339
                    v195 = v155 << v194;
                    g8 = v195;
                } else {
                    v195 = v155;
                }
                // bb341
                g7 = 32 - v186;
                int32_t v196 = v195 | v193; // 0x5ec7e
                g9 = v196;
                *v190 = v196;
                uint32_t v197 = g7; // 0x5ec82
                if ((char)v197 <= 10) {
                    int32_t v198 = v188 + 4; // 0x5ec8a
                    g8 = v198;
                    g9 = 11;
                    int32_t v199 = *(int32_t *)g4 + v198; // 0x5ec96
                    g8 = v199;
                    int32_t v200 = 11 - v197; // 0x5ec98
                    g9 = v200;
                    int32_t * v201 = (int32_t *)v199; // 0x5ec9a
                    int32_t v202 = *v201; // 0x5ec9a
                    g10 = v202;
                    int32_t v203 = *(int32_t *)(4 * v200 + (int32_t)&g665) & v202; // 0x5ec9c
                    g10 = v203;
                    g9 = v155;
                    uint32_t v204 = v197 & (int32_t)&g862 & 31; // 0x5eca6
                    int32_t v205; // 0x5eca6
                    if (v204 != 0) {
                        // bb344
                        v205 = v155 >> v204;
                        g9 = v205;
                    } else {
                        v205 = v155;
                    }
                    int32_t v206 = v205 | v203; // 0x5eca8
                    g10 = v206;
                    *v201 = v206;
                }
                int32_t v207 = g4; // 0x5ecac
                int32_t * v208 = (int32_t *)(v207 + 12); // 0x5ecac
                uint32_t v209 = *v208; // 0x5ecac
                g7 = v209;
                g10 = *(int32_t *)(v207 + 8);
                int32_t v210 = v209 + 11; // 0x5ecb2
                g7 = v210;
                *v208 = v210;
                goto lab_0x5ecc0;
            }
        }
    }
  lab_0x5f060:
    // 0x5f060
    *(int32_t *)(g4 + 12) = v53;
    *(char *)(g4 + 16) = 1;
    goto lab_0x5ed45;
  lab_0x5ecc0:;
    uint32_t v211 = !v8 ? 5 : 3; // 0x5ecc9
    g9 = v211;
    int32_t v212 = g7; // 0x5eccc
    int32_t v213 = v212 + v211; // 0x5eccc
    g8 = v213;
    int32_t v214 = g10; // 0x5eccf
    int32_t v215 = g4; // 0x5eeb8
    if (v214 < v213) {
        // 0x5eeb8
        *(int32_t *)(v215 + 12) = v214;
        *(char *)(g4 + 16) = 1;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v216 = v212 % 32; // 0x5ecdb
    int32_t v217 = v212 / 32; // 0x5ecde
    int32_t v218 = 33 * v216; // 0x5eced
    g7 = v218;
    int32_t v219 = *(int32_t *)v215 + 4 * v217; // 0x5ecf0
    g10 = v219;
    int32_t v220 = g6; // 0x5ecf2
    g8 = v220;
    int32_t * v221 = (int32_t *)v219; // 0x5ecf7
    int32_t v222 = *v221; // 0x5ecf7
    g10 = v222;
    int32_t v223 = v211 + v218; // 0x5ecf9
    g7 = v223;
    int32_t v224 = *(int32_t *)(4 * v223 + (int32_t)&g665) & v222; // 0x5ecfb
    g10 = v224;
    g7 = v216;
    uint32_t v225 = v212 & (int32_t)&g862 & 31; // 0x5ed06
    int32_t v226; // 0x5ed06
    if (v225 != 0) {
        // bb347
        v226 = v220 << v225;
        g8 = v226;
    } else {
        v226 = v220;
    }
    uint32_t v227 = 32 - v216; // 0x5ed0d
    g7 = v227;
    int32_t v228 = v226 | v224; // 0x5ed10
    g10 = v228;
    g8 = v219;
    *v221 = v228;
    if (v211 > v227) {
        int32_t v229 = 0x1000000 * v217 / 0x1000000; // 0x5ed1b
        g10 = v229;
        int32_t v230 = g6; // 0x5ed1e
        int32_t v231 = g7; // 0x5ed1e
        uint32_t v232 = v231 & (int32_t)&g862 & 31; // 0x5ed1e
        int32_t v233; // 0x5ed1e
        if (v232 != 0) {
            // bb351
            v233 = v230 >> v232;
            g6 = v233;
        } else {
            v233 = v230;
        }
        int32_t v234 = 4 * v229 + 4 + *(int32_t *)g4; // 0x5ed29
        g10 = v234;
        int32_t v235 = g9; // 0x5ed2b
        g8 = v235;
        int32_t * v236 = (int32_t *)v234; // 0x5ed30
        int32_t v237 = *v236; // 0x5ed30
        g10 = v237;
        int32_t v238 = v235 - v231; // 0x5ed32
        g8 = v238;
        int32_t v239 = *(int32_t *)(4 * v238 + (int32_t)&g665); // 0x5ed34
        g8 = v234;
        int32_t v240 = v239 & v237 | v233; // 0x5ed3e
        g10 = v240;
        *v236 = v240;
    }
    int32_t * v241 = (int32_t *)(g4 + 12); // 0x5ed42
    *v241 = g9 + *v241;
    goto lab_0x5ed45;
  lab_0x5efa8:
    // 0x5efa8
    *(int32_t *)(g4 + 12) = v154;
    g7 = g10;
    *(char *)(g4 + 16) = 1;
    goto lab_0x5ecc0;
}

// Address range: 0x5f070 - 0x5f2dc
int32_t function_5f070(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int128_t v1; // xmm1
    int128_t v2 = __asm_xorps(v1, v1); // 0x5f071
    int32_t v3 = g8; // 0x5f076
    int32_t v4 = g10; // 0x5f077
    int32_t v5 = g6; // bp-16
    g7 = a4;
    int128_t v6 = __asm_movss(a2); // 0x5f07f
    g4 = a1;
    g9 = a3;
    int32_t v7 = g7; // 0x5f08a
    __asm_ucomiss_1648(v2, v6);
    int32_t v8; // 0x5f1ff
    if (v7 == 0 || v7 == 1) {
        // 0x5f1f8
        v8 = __asm_cvttss2si_1647(__asm_movaps(v6));
        g6 = v8;
        if (v7 == 1) {
            goto lab_0x5f0b6;
        } else {
            goto lab_0x5f20c;
        }
    } else {
        int128_t v9 = __asm_movss((int32_t)g233); // 0x5f09a
        int32_t v10 = __asm_cvttss2si_1647(__asm_xorps(v9, v6)); // 0x5f0a9
        g6 = v10;
        if (v7 != 1) {
            v8 = v10;
            goto lab_0x5f20c;
        } else {
            v8 = v10;
            goto lab_0x5f0b6;
        }
    }
  lab_0x5f0b6:;
    int32_t v11 = __asm_cvttss2si_1647(__asm_mulss_1654(v6, 0x41000000)); // 0x5f0be
    int32_t v12 = v11 >> 31; // 0x5f0c4
    g10 = v12;
    g6 = ((v12 ^ v11) - v12) % 8;
    uint32_t v13 = g7; // 0x5f0ce
    int32_t v14 = g4; // 0x5f0d1
    int32_t v15 = *(int32_t *)(v14 + 12); // 0x5f0d1
    g7 = v15;
    int32_t v16;
    int32_t v17;
    if (v13 == 2) {
        v17 = v8;
        goto lab_0x5f230;
    } else {
        v16 = v8;
        goto lab_0x5f0da;
    }
  lab_0x5f20c:;
    int32_t v18 = __asm_cvttss2si_1647(__asm_mulss_1654(v6, 0x42000000)); // 0x5f214
    int32_t v19 = v18 >> 31; // 0x5f21a
    g10 = v19;
    g6 = ((v19 ^ v18) - v19) % 32;
    uint32_t v20 = g7; // 0x5f224
    int32_t v21 = g4; // 0x5f227
    int32_t v22 = *(int32_t *)(v21 + 12); // 0x5f227
    g7 = v22;
    if (v20 != 2) {
        v15 = v22;
        v14 = v21;
        v16 = v8;
        goto lab_0x5f0da;
    } else {
        v15 = v22;
        v14 = v21;
        v17 = v8;
        goto lab_0x5f230;
    }
  lab_0x5f230:;
    int32_t v23 = *(int32_t *)(v14 + 8); // 0x5f230
    g6 = v23;
    int32_t v24 = g9; // 0x5f233
    int32_t v25 = v24 + v15; // 0x5f233
    g10 = v25;
    if (v25 > v23) {
        // 0x5f2d0
        *(int32_t *)(v14 + 12) = v23;
        *(char *)(g4 + 16) = 1;
        goto lab_0x5f1eb;
    } else {
        int32_t v26 = v15 % 32; // 0x5f240
        g7 = v26;
        int32_t v27 = 32 - v26; // 0x5f24a
        int32_t v28 = v15 / 32; // 0x5f24d
        g10 = v28;
        g6 = v28;
        int32_t v29 = *(int32_t *)v14 + 4 * v28; // 0x5f257
        g6 = v29;
        g10 = v26;
        int32_t * v30 = (int32_t *)v29; // 0x5f25c
        int32_t v31 = *v30; // 0x5f25c
        g8 = v31;
        int32_t v32 = v24 + 33 * v26; // 0x5f263
        g10 = v32;
        int32_t v33 = *(int32_t *)(4 * v32 + (int32_t)&g665) & v31; // 0x5f265
        g8 = v33;
        g10 = v17;
        uint32_t v34 = v15 & (int32_t)&g862 & 31; // 0x5f26f
        int32_t v35; // 0x5f26f
        if (v34 != 0) {
            // bb300
            v35 = v17 << v34;
            g10 = v35;
        } else {
            v35 = v17;
        }
        int32_t v36 = v35 | v33; // 0x5f271
        g10 = v36;
        *v30 = v36;
        if (v24 > v27) {
            int32_t v37 = 0x1000000 * v28 / 0x1000000; // 0x5f27e
            g8 = v37;
            int32_t v38 = g9 - v27; // 0x5f283
            g7 = v38;
            g10 = v17;
            int32_t v39 = 4 * v37 + 4; // 0x5f289
            g6 = v39;
            int32_t v40 = *(int32_t *)g4 + v39; // 0x5f290
            g6 = v40;
            int32_t * v41 = (int32_t *)v40; // 0x5f292
            int32_t v42 = *v41; // 0x5f292
            g8 = v42;
            int32_t v43 = *(int32_t *)(4 * v38 + (int32_t)&g665) & v42; // 0x5f294
            g8 = v43;
            g7 = v27;
            uint32_t v44 = v27 & (int32_t)&g862 & 31; // 0x5f29f
            int32_t v45; // 0x5f29f
            if (v44 != 0) {
                // bb304
                v45 = v17 >> v44;
                g10 = v45;
            } else {
                v45 = v17;
            }
            int32_t v46 = v45 | v43; // 0x5f2a1
            g10 = v46;
            *v41 = v46;
        }
        goto lab_0x5f1e8;
    }
  lab_0x5f0da:;
    int32_t v47 = *(int32_t *)(v14 + 8); // 0x5f0da
    g10 = v47;
    int32_t v48 = g9; // 0x5f0dd
    int32_t v49 = v48 + v15; // 0x5f0dd
    g8 = v49;
    if (v49 > v47) {
        // 0x5f2b0
        *(int32_t *)(v14 + 12) = v47;
        g7 = g10;
        *(char *)(g4 + 16) = 1;
    } else {
        int32_t v50 = v15 % 32; // 0x5f0ea
        g7 = v50;
        int32_t v51 = 32 - v50; // 0x5f0f4
        int32_t v52 = v15 / 32; // 0x5f0f7
        g8 = v52;
        g10 = v52;
        int32_t v53 = *(int32_t *)v14; // 0x5f0ff
        g8 = v53;
        int32_t v54 = 4 * v52; // 0x5f101
        int32_t v55 = v53 + v54; // 0x5f101
        g10 = v55;
        int32_t * v56 = (int32_t *)v55; // 0x5f104
        int32_t v57 = v48 + 33 * v50; // 0x5f110
        g8 = v57;
        int32_t v58 = *(int32_t *)(4 * v57 + (int32_t)&g665); // 0x5f112
        g8 = v16;
        uint32_t v59 = v15 & (int32_t)&g862 & 31; // 0x5f11f
        int32_t v60; // 0x5f11f
        if (v59 != 0) {
            // bb
            v60 = v16 << v59;
            g8 = v60;
        } else {
            v60 = v16;
        }
        int32_t v61 = v60 | v58 & *v56; // 0x5f121
        g8 = v61;
        *v56 = v61;
        if (v48 > v51) {
            // 0x5f12b
            g8 = v52;
            int32_t v62 = v54 + 4; // 0x5f12e
            g10 = v62;
            int32_t v63 = *(int32_t *)g4 + v62; // 0x5f135
            g10 = v63;
            int32_t * v64 = (int32_t *)v63; // 0x5f137
            int32_t v65 = g9 - v51; // 0x5f13e
            g8 = v65;
            int32_t v66 = *(int32_t *)(4 * v65 + (int32_t)&g665); // 0x5f141
            g8 = v16;
            int32_t v67 = v66 & *v64; // 0x5f14b
            g7 = v51 % 256;
            uint32_t v68 = v51 & (int32_t)&g862 & 31; // 0x5f152
            int32_t v69; // 0x5f152
            if (v68 != 0) {
                // bb290
                v69 = v16 >> v68;
                g8 = v69;
            } else {
                v69 = v16;
            }
            // bb291
            g7 = v67;
            int32_t v70 = v69 | v67; // 0x5f157
            g8 = v70;
            *v64 = v70;
        }
        int32_t v71 = g4; // 0x5f15b
        int32_t * v72 = (int32_t *)(v71 + 12); // 0x5f15b
        uint32_t v73 = *v72; // 0x5f15b
        g7 = v73;
        g10 = *(int32_t *)(v71 + 8);
        int32_t v74 = g9 + v73; // 0x5f161
        g7 = v74;
        *v72 = v74;
    }
    uint32_t v75 = v7 != 1 ? 5 : 3; // 0x5f16f
    g9 = v75;
    int32_t v76 = g7; // 0x5f172
    int32_t v77 = v76 + v75; // 0x5f172
    g8 = v77;
    int32_t v78 = g10; // 0x5f175
    int32_t v79 = g4; // 0x5f2c0
    if (v78 < v77) {
        // 0x5f2c0
        *(int32_t *)(v79 + 12) = v78;
        *(char *)(g4 + 16) = 1;
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return g4;
    }
    int32_t v80 = v76 % 32; // 0x5f181
    int32_t v81 = v76 / 32; // 0x5f184
    int32_t v82 = 33 * v80; // 0x5f193
    g7 = v82;
    int32_t v83 = *(int32_t *)v79 + 4 * v81; // 0x5f196
    g10 = v83;
    int32_t v84 = g6; // 0x5f198
    g8 = v84;
    int32_t * v85 = (int32_t *)v83; // 0x5f19d
    int32_t v86 = *v85; // 0x5f19d
    g10 = v86;
    int32_t v87 = v75 + v82; // 0x5f19f
    g7 = v87;
    int32_t v88 = *(int32_t *)(4 * v87 + (int32_t)&g665) & v86; // 0x5f1a1
    g10 = v88;
    g7 = v80;
    uint32_t v89 = v76 & (int32_t)&g862 & 31; // 0x5f1ac
    int32_t v90; // 0x5f1ac
    if (v89 != 0) {
        // bb292
        v90 = v84 << v89;
        g8 = v90;
    } else {
        v90 = v84;
    }
    uint32_t v91 = 32 - v80; // 0x5f1b3
    g7 = v91;
    int32_t v92 = v90 | v88; // 0x5f1b6
    g10 = v92;
    g8 = v83;
    *v85 = v92;
    if (v75 > v91) {
        // 0x5f1c1
        g10 = v81;
        int32_t v93 = g6; // 0x5f1c4
        int32_t v94 = g7; // 0x5f1c4
        uint32_t v95 = v94 & (int32_t)&g862 & 31; // 0x5f1c4
        int32_t v96; // 0x5f1c4
        if (v95 != 0) {
            // bb296
            v96 = v93 >> v95;
            g6 = v96;
        } else {
            v96 = v93;
        }
        int32_t v97 = 4 * v81 + 4 + *(int32_t *)g4; // 0x5f1cf
        g10 = v97;
        int32_t v98 = g9; // 0x5f1d1
        g8 = v98;
        int32_t v99 = *(int32_t *)v97; // 0x5f1d6
        g10 = v99;
        int32_t v100 = v98 - v94; // 0x5f1d8
        g8 = v100;
        int32_t v101 = *(int32_t *)(4 * v100 + (int32_t)&g665); // 0x5f1da
        int32_t v102 = v101 & v99 | v96; // 0x5f1e1
        g10 = v102;
        int32_t v103 = 0x1000000 * v97 / 0x1000000; // 0x5f1e3
        g6 = v103;
        *(int32_t *)v103 = v102;
    }
    goto lab_0x5f1e8;
  lab_0x5f1e8:;
    int32_t * v104 = (int32_t *)(g4 + 12); // 0x5f1e8
    *v104 = g9 + *v104;
    goto lab_0x5f1eb;
  lab_0x5f1eb:
    // 0x5f1eb
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
}

// Address range: 0x5f2e0 - 0x5f59c
int32_t function_5f2e0(int32_t a1, int32_t a2) {
    int128_t v1 = g879; // 0x5f2e1
    int128_t v2 = __asm_xorps(v1, v1); // 0x5f2e1
    int32_t v3 = g8; // 0x5f2e6
    int32_t v4 = g10; // 0x5f2e7
    int32_t v5 = g6; // bp-16
    int128_t v6 = __asm_movss(a2); // 0x5f2ec
    g4 = a1;
    __asm_ucomiss_1648(v2, v6);
    int128_t v7;
    if (&v5 < (int32_t *)12 || &v5 == (int32_t *)12) {
        // 0x5f3b0
        v7 = __asm_movaps(v6);
    } else {
        // 0x5f2fd
        v7 = __asm_xorps(__asm_movss((int32_t)g233), v6);
    }
    int32_t v8 = __asm_cvttss2si_1647(v7); // 0x5f308
    g6 = v8;
    int128_t v9 = __asm_mulss(__asm_movss(0x42000000), v6); // 0x5f314
    g879 = v9;
    int32_t v10 = __asm_cvttss2si_1647(v9); // 0x5f318
    int32_t v11 = v10 >> 31; // 0x5f31e
    g7 = v11;
    int32_t v12 = (v11 ^ v10) - v11; // 0x5f323
    g9 = v12;
    int32_t v13 = g4; // 0x5f325
    int32_t v14 = *(int32_t *)(v13 + 12); // 0x5f325
    g7 = v14;
    g9 = v12 % 32;
    int32_t v15;
    int32_t v16; // 0x5f379
    if (v14 < *(int32_t *)(v13 + 8)) {
        // 0x5f334
        if (*(char *)(v13 + 16) != 0) {
            v16 = v13;
            goto lab_0x5f36e;
        } else {
            // 0x5f33a
            g8 = v14;
            g7 = v14 % 8;
            int32_t v17 = *(int32_t *)v13; // 0x5f33f
            g10 = v17;
            int32_t v18 = v14 / 8; // 0x5f341
            g8 = v18;
            if (v8 != 0) {
                uint32_t v19 = v14 & (int32_t)&g862 & 7; // 0x5f4b7
                int32_t v20;
                if (v19 != 0) {
                    // bb66
                    v20 = 1 << v19;
                } else {
                    v20 = 1;
                }
                // bb67
                g7 = v20 % 256;
                char * v21 = (char *)(v17 + v18); // 0x5f4be
                *v21 = *v21 | (char)v20;
            } else {
                // 0x5f34f
                g8 = 1;
                uint32_t v22 = v14 & (int32_t)&g862 & 7; // 0x5f354
                int32_t v23; // 0x5f354
                if (v22 != 0) {
                    // bb
                    v23 = 1 << v22;
                    g8 = v23;
                } else {
                    v23 = 1;
                }
                // bb49
                g8 = v18;
                int32_t v24 = -1 - v23; // 0x5f35b
                g7 = v24;
                char * v25 = (char *)(v17 + v18); // 0x5f35d
                *v25 = *v25 & (char)v24;
            }
            int32_t v26 = g4; // 0x5f360
            int32_t * v27 = (int32_t *)(v26 + 12); // 0x5f360
            int32_t v28 = *v27 + 1; // 0x5f363
            g7 = v28;
            *v27 = v28;
            v15 = g4;
            if (v28 < *(int32_t *)(v26 + 8)) {
                v16 = v15;
                goto lab_0x5f36e;
            } else {
                goto lab_0x5f3c0;
            }
        }
    } else {
        v15 = v13;
        goto lab_0x5f3c0;
    }
  lab_0x5f3c0:
    // 0x5f3c0
    g7 = v8;
    *(char *)(v15 + 16) = 1;
    int32_t v29 = g9 | g7; // 0x5f3c6
    g7 = v29;
    if (v29 == 0) {
        goto lab_0x5f3a4;
    } else {
        goto lab_0x5f3ca;
    }
  lab_0x5f36e:
    // 0x5f36e
    if (*(char *)(v16 + 16) == 0) {
        int32_t v30 = g7; // 0x5f374
        g8 = v30;
        g7 = v30 % 8;
        int32_t v31 = *(int32_t *)v16; // 0x5f379
        g10 = v31;
        int32_t v32 = v30 / 8; // 0x5f37b
        g8 = v32;
        if (g9 != 0) {
            uint32_t v33 = v30 & (int32_t)&g862 & 7; // 0x5f497
            int32_t v34;
            if (v33 != 0) {
                // bb64
                v34 = 1 << v33;
            } else {
                v34 = 1;
            }
            // bb65
            g7 = v34 % 256;
            char * v35 = (char *)(v31 + v32); // 0x5f49e
            *v35 = *v35 | (char)v34;
        } else {
            // 0x5f389
            g8 = 1;
            uint32_t v36 = v30 & (int32_t)&g862 & 7; // 0x5f38e
            int32_t v37; // 0x5f38e
            if (v36 != 0) {
                // bb50
                v37 = 1 << v36;
                g8 = v37;
            } else {
                v37 = 1;
            }
            // bb51
            g8 = v32;
            int32_t v38 = -1 - v37; // 0x5f395
            g7 = v38;
            char * v39 = (char *)(v31 + v32); // 0x5f397
            *v39 = *v39 & (char)v38;
        }
        int32_t * v40 = (int32_t *)(g4 + 12); // 0x5f39a
        *v40 = *v40 + 1;
    }
    int32_t v41 = g9 | v8; // 0x5f3a0
    g7 = v41;
    if (v41 != 0) {
        goto lab_0x5f3ca;
    } else {
        goto lab_0x5f3a4;
    }
  lab_0x5f3a4:
    // 0x5f3a4
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
  lab_0x5f3ca:;
    int32_t v42 = g4; // 0x5f3ca
    int32_t v43 = *(int32_t *)(v42 + 12); // 0x5f3ca
    g7 = v43;
    if (v43 < *(int32_t *)(v42 + 8)) {
        // 0x5f3d6
        if (*(char *)(v42 + 16) == 0) {
            int128_t v44 = __asm_movss(-0x43000000); // 0x5f3dc
            g879 = v44;
            int32_t v45 = g7; // 0x5f3e4
            g7 = v45 % 8;
            g8 = v45 / 8;
            g10 = *(int32_t *)g4;
            __asm_ucomiss_1648(v44, v6);
            int32_t v46 = g8; // 0x5f3f1
            if ((v45 & 4) != 0) {
                // 0x5f560
                g8 = 1;
                uint32_t v47 = g7 & (int32_t)&g862 & 31; // 0x5f565
                int32_t v48; // 0x5f567
                if (v47 != 0) {
                    int32_t v49 = 1 << v47; // 0x5f565
                    g8 = v49;
                    v48 = -1 - v49;
                } else {
                    v48 = -2;
                }
                // bb75
                g8 = v46;
                g7 = v48;
                char * v50 = (char *)(g10 + v46); // 0x5f56e
                *v50 = *v50 & (char)v48;
            } else {
                uint32_t v51 = g7 & (int32_t)&g862 & 31; // 0x5f401
                int32_t v52;
                if (v51 != 0) {
                    // bb54
                    v52 = 1 << v51;
                } else {
                    v52 = 1;
                }
                // bb55
                g7 = v52 % 256;
                char * v53 = (char *)(g10 + v46); // 0x5f408
                *v53 = *v53 | (char)v52;
            }
            int32_t * v54 = (int32_t *)(g4 + 12); // 0x5f40b
            *v54 = *v54 + 1;
        }
        // 0x5f40f
        if (v8 != 0) {
            goto lab_0x5f4dc;
        } else {
            goto lab_0x5f417;
        }
    } else {
        // 0x5f4d0
        *(char *)(v42 + 16) = 1;
        if (v8 == 0) {
            goto lab_0x5f417;
        } else {
            goto lab_0x5f4dc;
        }
    }
  lab_0x5f4dc:;
    int32_t v55 = g4; // 0x5f4dc
    int32_t * v56 = (int32_t *)(v55 + 12); // 0x5f4dc
    int32_t v57 = *v56; // 0x5f4dc
    g7 = v57;
    int32_t v58 = *(int32_t *)(v55 + 8); // 0x5f4df
    g10 = v58;
    int32_t v59 = v57 + 14; // 0x5f4e2
    g8 = v59;
    if (v59 > v58) {
        // 0x5f590
        *v56 = v58;
        *(char *)(g4 + 16) = 1;
    } else {
        int32_t v60 = *(int32_t *)v55; // 0x5f4ed
        g10 = v60;
        int32_t v61 = v8 - 1; // 0x5f4ef
        int32_t v62 = v57 % 32; // 0x5f4fe
        g7 = v62;
        uint32_t v63 = 32 - v62; // 0x5f501
        int32_t v64 = v57 / 32; // 0x5f504
        int32_t v65 = 128 * v62; // 0x5f50c
        g8 = v65;
        int32_t v66 = 4 * v64; // 0x5f50f
        int32_t v67 = v60 + v66; // 0x5f50f
        g6 = v67;
        int32_t * v68 = (int32_t *)v67; // 0x5f512
        int32_t v69 = *v68; // 0x5f512
        g10 = v69;
        int32_t v70 = *(int32_t *)(v65 + (int32_t)&g671 + 4 * v62); // 0x5f514
        int32_t v71 = v70 & v69; // 0x5f514
        g10 = v71;
        g8 = v61;
        uint32_t v72 = v57 & (int32_t)&g862 & 31; // 0x5f51e
        int32_t v73; // 0x5f51e
        if (v72 != 0) {
            // bb68
            v73 = v61 << v72;
            g8 = v73;
        } else {
            v73 = v61;
        }
        int32_t v74 = v73 | v71; // 0x5f520
        g8 = v74;
        *v68 = v74;
        if (v63 <= 13) {
            // 0x5f52a
            g8 = v64;
            int32_t v75 = 14 - v63; // 0x5f532
            g7 = v75;
            g6 = v61;
            int32_t v76 = v66 + 4; // 0x5f538
            g10 = v76;
            int32_t v77 = *(int32_t *)g4 + v76; // 0x5f53f
            g10 = v77;
            int32_t * v78 = (int32_t *)v77; // 0x5f541
            int32_t v79 = *v78; // 0x5f541
            g8 = v79;
            int32_t v80 = *(int32_t *)(4 * v75 + (int32_t)&g665) & v79; // 0x5f543
            g8 = v80;
            g7 = v63 % 256;
            uint32_t v81 = v63 & (int32_t)&g862 & 31; // 0x5f54e
            int32_t v82; // 0x5f54e
            if (v81 != 0) {
                // bb71
                v82 = v61 >> v81;
                g6 = v82;
            } else {
                v82 = v61;
            }
            int32_t v83 = v82 | v80; // 0x5f550
            g6 = v83;
            *v78 = v83;
        }
        int32_t * v84 = (int32_t *)(g4 + 12); // 0x5f554
        *v84 = *v84 + 14;
    }
    goto lab_0x5f417;
  lab_0x5f417:;
    int32_t v85 = g9; // 0x5f417
    if (v85 != 0) {
        int32_t v86 = g4; // 0x5f41b
        int32_t * v87 = (int32_t *)(v86 + 12); // 0x5f41b
        int32_t v88 = *v87; // 0x5f41b
        g7 = v88;
        int32_t v89 = *(int32_t *)(v86 + 8); // 0x5f41e
        g6 = v89;
        int32_t v90 = v88 + 5; // 0x5f421
        g10 = v90;
        if (v90 > v89) {
            // 0x5f580
            *v87 = v89;
            *(char *)(g4 + 16) = 1;
        } else {
            int32_t v91 = v88 % 32; // 0x5f42e
            g7 = v91;
            int32_t v92 = v88 / 32; // 0x5f431
            g8 = v92;
            g6 = v92;
            int32_t v93 = 4 * v92; // 0x5f43b
            int32_t v94 = *(int32_t *)v86 + v93; // 0x5f43b
            g6 = v94;
            g8 = v91;
            int32_t * v95 = (int32_t *)v94; // 0x5f440
            int32_t v96 = *v95; // 0x5f440
            g10 = v96;
            int32_t v97 = 128 * v91; // 0x5f442
            g8 = v97;
            int32_t v98 = *(int32_t *)(v97 + (int32_t)&g666 + 4 * v91); // 0x5f445
            int32_t v99 = v98 & v96; // 0x5f445
            g10 = v99;
            g8 = v85;
            uint32_t v100 = v88 & (int32_t)&g862 & 31; // 0x5f44e
            int32_t v101; // 0x5f44e
            if (v100 != 0) {
                // bb57
                v101 = v85 << v100;
                g8 = v101;
            } else {
                v101 = v85;
            }
            // bb59
            *v95 = v101 | v99;
            int32_t v102 = 32 - g7; // 0x5f459
            g8 = v102;
            if (v102 <= 4) {
                int32_t v103 = v93 + 4; // 0x5f463
                g6 = v103;
                g7 = 5;
                int32_t v104 = *(int32_t *)g4 + v103; // 0x5f46f
                g6 = v104;
                int32_t v105 = 5 - v102; // 0x5f471
                g7 = v105;
                int32_t * v106 = (int32_t *)v104; // 0x5f473
                int32_t v107 = *v106; // 0x5f473
                g10 = v107;
                int32_t v108 = *(int32_t *)(4 * v105 + (int32_t)&g665) & v107; // 0x5f475
                g10 = v108;
                g7 = v102;
                int32_t v109 = g9; // 0x5f47e
                uint32_t v110 = v102 & (int32_t)&g862 & 31; // 0x5f47e
                int32_t v111; // 0x5f47e
                if (v110 != 0) {
                    // bb61
                    v111 = v109 >> v110;
                    g9 = v111;
                } else {
                    v111 = v109;
                }
                int32_t v112 = v111 | v108; // 0x5f480
                g9 = v112;
                *v106 = v112;
            }
            int32_t * v113 = (int32_t *)(g4 + 12); // 0x5f484
            *v113 = *v113 + 5;
        }
    }
    goto lab_0x5f3a4;
}

// Address range: 0x5f5a0 - 0x5f644
int32_t function_5f5a0(int32_t a1, int32_t a2) {
    // 0x5f5a0
    g4 = a1;
    int32_t v1 = g6; // 0x5f5a9
    int32_t v2 = g10; // 0x5f5ac
    int32_t v3 = g8; // 0x5f5af
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x5f5b2
    int32_t v5 = *v4; // 0x5f5b2
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x5f5b5
    g9 = v6;
    int32_t v7 = v5 + 32; // 0x5f5b8
    g6 = v7;
    if (v7 > v6) {
        // 0x5f630
        *v4 = v6;
        *(char *)(g4 + 16) = 1;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    int32_t v8 = v5 % 32; // 0x5f5c4
    g7 = v8;
    int32_t v9 = v5 / 32; // 0x5f5c7
    g10 = v9;
    int32_t v10 = 128 * v8; // 0x5f5cc
    g8 = v10;
    int32_t v11 = 4 * v9; // 0x5f5d2
    g9 = v11;
    int32_t v12 = *(int32_t *)a1 + v11; // 0x5f5d9
    g9 = v12;
    int32_t * v13 = (int32_t *)v12; // 0x5f5db
    int32_t v14 = *v13; // 0x5f5db
    g6 = v14;
    int32_t v15 = *(int32_t *)(v10 + (int32_t)&g674 + 4 * v8); // 0x5f5dd
    int32_t v16 = v15 & v14; // 0x5f5dd
    g6 = v16;
    uint32_t v17 = v5 & (int32_t)&g862 & 31; // 0x5f5e7
    int32_t v18; // 0x5f5e7
    if (v17 != 0) {
        // bb
        v18 = a2 << v17;
    } else {
        v18 = a2;
    }
    // bb240
    g8 = v18;
    *v13 = v18 | v16;
    g8 = 32;
    int32_t v19 = g7; // 0x5f5f4
    int32_t v20 = 32 - v19; // 0x5f5f4
    g9 = v20;
    g7 = v20;
    if (v19 != 0) {
        int32_t v21 = 4 * g10 + 4; // 0x5f610
        g6 = v21;
        g8 = v19;
        g10 = a2;
        int32_t v22 = *(int32_t *)g4 + v21; // 0x5f61c
        g6 = v22;
        uint32_t v23 = v20 & (int32_t)&g862 & 31; // 0x5f61e
        int32_t v24; // 0x5f61e
        if (v23 != 0) {
            // bb243
            v24 = a2 >> v23;
            g10 = v24;
        } else {
            v24 = a2;
        }
        int32_t * v25 = (int32_t *)v22; // 0x5f620
        int32_t v26 = *v25; // 0x5f620
        g9 = v26;
        int32_t v27 = *(int32_t *)(4 * v19 + (int32_t)&g665); // 0x5f622
        int32_t v28 = v27 & v26 | v24; // 0x5f629
        g9 = v28;
        *v25 = v28;
    }
    int32_t * v29 = (int32_t *)(g4 + 12); // 0x5f5fd
    *v29 = *v29 + 32;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x5f650 - 0x5f856
int32_t function_5f650(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g8; // 0x5f653
    int32_t v2 = g10; // 0x5f654
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)32; // cf
    g10 = (int32_t)a2;
    g6 = a1;
    int128_t v5 = __asm_movss(*a2); // 0x5f666
    __asm_ucomiss(v5, 0x3d000000);
    int32_t v6; // 0x5f680
    if (v4) {
        int128_t v7 = __asm_movss(-0x43000000); // 0x5f673
        g879 = v7;
        v4 = false;
        g4 = 0;
        __asm_ucomiss_1648(v7, v5);
        v6 = g4 & -256 | (int32_t)!v4;
        g4 = v6;
    } else {
        v6 = 1;
    }
    int128_t v8 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x5f686
    g8 = 1;
    __asm_ucomiss(v8, 0x3d000000);
    if (v4) {
        int128_t v9 = __asm_movss(-0x43000000); // 0x5f699
        g879 = v9;
        v4 = false;
        g9 = 0;
        __asm_ucomiss_1648(v9, v8);
        int32_t v10 = g9 & -256 | (int32_t)!v4; // 0x5f6a6
        g9 = v10;
        g8 = v10;
    }
    int128_t v11 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x5f6ab
    __asm_ucomiss(v11, 0x3d000000);
    int32_t v12; // 0x5f6cd
    if (v4) {
        int128_t v13 = __asm_movss(-0x43000000); // 0x5f6c0
        g879 = v13;
        g4 = 0;
        __asm_ucomiss_1648(v13, v11);
        v12 = g4 & -256 | (int32_t)true;
        g4 = v12;
    } else {
        v12 = 1;
    }
    int32_t v14 = g6; // 0x5f6d3
    int32_t v15 = *(int32_t *)(v14 + 12); // 0x5f6d3
    g7 = v15;
    int32_t v16; // 0x5f72b
    if (v15 < *(int32_t *)(v14 + 8)) {
        // 0x5f6df
        if (*(char *)(v14 + 16) != 0) {
            v16 = v14;
            goto lab_0x5f725;
        } else {
            // 0x5f6e5
            g4 = v15;
            int32_t v17 = *(int32_t *)v14; // 0x5f6e7
            g9 = v17;
            g7 = v15 % 8;
            int32_t v18 = v15 / 8; // 0x5f6ec
            g4 = v18;
            if (v6 != 0) {
                uint32_t v19 = v15 & (int32_t)&g862 & 7; // 0x5f847
                int32_t v20;
                if (v19 != 0) {
                    // bb54
                    v20 = 1 << v19;
                } else {
                    v20 = 1;
                }
                // bb55
                g7 = v20 % 256;
                char * v21 = (char *)(v17 + v18); // 0x5f84e
                *v21 = *v21 | (char)v20;
            } else {
                // 0x5f6ff
                g4 = 1;
                g9 = v18;
                uint32_t v22 = v15 & (int32_t)&g862 & 7; // 0x5f707
                int32_t v23; // 0x5f709
                if (v22 != 0) {
                    int32_t v24 = 1 << v22; // 0x5f707
                    g4 = v24;
                    v23 = -1 - v24;
                } else {
                    v23 = -2;
                }
                // bb43
                g4 = v17;
                g7 = v23;
                char * v25 = (char *)(v17 + v18); // 0x5f710
                *v25 = *v25 & (char)v23;
            }
            int32_t v26 = g6; // 0x5f713
            int32_t * v27 = (int32_t *)(v26 + 12); // 0x5f713
            int32_t v28 = *v27 + 1; // 0x5f716
            g7 = v28;
            *v27 = v28;
            if (v28 < *(int32_t *)(v26 + 8)) {
                // 0x5f713
                v16 = g6;
                goto lab_0x5f725;
            } else {
                // 0x5f7e0
                *(char *)(g6 + 16) = 1;
                goto lab_0x5f7e4;
            }
        }
    } else {
        // 0x5f7e0
        *(char *)(g6 + 16) = 1;
        goto lab_0x5f7e4;
    }
  lab_0x5f725:;
    // 0x5f725
    int32_t v29; // 0x5f76d
    if (*(char *)(v16 + 16) != 0) {
        v29 = v16;
        goto lab_0x5f765;
    } else {
        int32_t v30 = *(int32_t *)v16; // 0x5f72b
        g9 = v30;
        int32_t v31 = g7; // 0x5f72d
        g7 = v31 % 8;
        int32_t v32 = v31 / 8; // 0x5f732
        g4 = v32;
        if (g8 != 0) {
            uint32_t v33 = v31 & (int32_t)&g862 & 7; // 0x5f827
            int32_t v34;
            if (v33 != 0) {
                // bb52
                v34 = 1 << v33;
            } else {
                v34 = 1;
            }
            // bb53
            g7 = v34 % 256;
            char * v35 = (char *)(v32 + v30); // 0x5f82e
            *v35 = *v35 | (char)v34;
        } else {
            // 0x5f743
            g4 = 1;
            g9 = v32;
            uint32_t v36 = v31 & (int32_t)&g862 & 7; // 0x5f74b
            int32_t v37; // 0x5f74d
            if (v36 != 0) {
                int32_t v38 = 1 << v36; // 0x5f74b
                g4 = v38;
                v37 = -1 - v38;
            } else {
                v37 = -2;
            }
            // bb45
            g4 = v30;
            g7 = v37;
            char * v39 = (char *)(v32 + v30); // 0x5f754
            *v39 = *v39 & (char)v37;
        }
        int32_t v40 = g6; // 0x5f757
        int32_t * v41 = (int32_t *)(v40 + 12); // 0x5f757
        int32_t v42 = *v41 + 1; // 0x5f75a
        g7 = v42;
        *v41 = v42;
        if (v42 < *(int32_t *)(v40 + 8)) {
            // 0x5f757
            v29 = g6;
            goto lab_0x5f765;
        } else {
            // 0x5f7e0
            *(char *)(g6 + 16) = 1;
            goto lab_0x5f7e4;
        }
    }
  lab_0x5f7e4:
    // 0x5f7e4
    g4 = v6;
    int32_t v43; // 0x5f7fd8
    if (v6 != 0) {
        goto lab_0x5f7a0;
    } else {
        v43 = v6;
        goto lab_0x5f7eb;
    }
  lab_0x5f765:
    // 0x5f765
    if (*(char *)(v29 + 16) != 0) {
        goto lab_0x5f7e4;
    } else {
        int32_t v44 = g7; // 0x5f76b
        g4 = v44;
        int32_t v45 = *(int32_t *)v29; // 0x5f76d
        g9 = v45;
        g7 = v44 % 8;
        int32_t v46 = v44 / 8; // 0x5f772
        g4 = v46;
        if (v12 != 0) {
            uint32_t v47 = v44 & (int32_t)&g862 & 7; // 0x5f807
            int32_t v48;
            if (v47 != 0) {
                // bb50
                v48 = 1 << v47;
            } else {
                v48 = 1;
            }
            // bb51
            g7 = v48 % 256;
            char * v49 = (char *)(v45 + v46); // 0x5f80e
            *v49 = *v49 | (char)v48;
        } else {
            // 0x5f781
            g4 = 1;
            g9 = v46;
            uint32_t v50 = v44 & (int32_t)&g862 & 7; // 0x5f789
            int32_t v51; // 0x5f78b
            if (v50 != 0) {
                int32_t v52 = 1 << v50; // 0x5f789
                g4 = v52;
                v51 = -1 - v52;
            } else {
                v51 = -2;
            }
            // bb47
            g4 = v45;
            g7 = v51;
            char * v53 = (char *)(v45 + v46); // 0x5f792
            *v53 = *v53 & (char)v51;
        }
        // 0x5f795
        g4 = v6;
        int32_t * v54 = (int32_t *)(g6 + 12); // 0x5f798
        *v54 = *v54 + 1;
        if (g4 == 0) {
            v43 = 0;
            goto lab_0x5f7eb;
        } else {
            goto lab_0x5f7a0;
        }
    }
  lab_0x5f7a0:;
    int32_t v55 = *(int32_t *)g10; // 0x5f7a0
    g4 = v55;
    int32_t v56 = function_5f2e0(g6, v55); // 0x5f7a9
    g4 = v56;
    if (g8 == 0) {
        goto lab_0x5f7ef;
    } else {
        goto lab_0x5f7b2;
    }
  lab_0x5f7eb:
    // 0x5f7eb
    if (g8 != 0) {
        goto lab_0x5f7b2;
    } else {
        v56 = v43;
        goto lab_0x5f7ef;
    }
  lab_0x5f7ef:
    // 0x5f7ef
    g8 = v12;
    int32_t result2; // 0x5f7fd
    if (v12 != 0) {
        goto lab_0x5f7c8;
    } else {
        result2 = v56;
        goto lab_0x5f7f6;
    }
  lab_0x5f7b2:;
    int32_t v57 = *(int32_t *)(g10 + 4); // 0x5f7b2
    g4 = v57;
    int32_t v58 = function_5f2e0(g6, v57); // 0x5f7bc
    g4 = v58;
    g8 = v12;
    if (v12 == 0) {
        result2 = v58;
        goto lab_0x5f7f6;
    } else {
        goto lab_0x5f7c8;
    }
  lab_0x5f7c8:;
    int32_t v59 = *(int32_t *)(g10 + 8); // 0x5f7c8
    g4 = v59;
    int32_t v60 = g6; // 0x5f7cb
    g6 = v3;
    g10 = v2;
    g8 = v1;
    int32_t result = function_5f2e0(v60, v59); // 0x5f7d8
    g4 = result;
    return result;
  lab_0x5f7f6:
    // 0x5f7f6
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x5f860 - 0x5f9a9
int32_t function_5f860(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g4 = a1;
    int32_t v2 = g6; // 0x5f869
    int32_t v3 = g10; // 0x5f86c
    int128_t v4 = __asm_movss(a2); // xmm0
    int32_t v5 = g8; // 0x5f874
    int32_t v6 = g4; // 0x5f877
    int32_t v7 = *(int32_t *)(v6 + 12); // 0x5f877
    g7 = v7;
    int32_t v8 = *(int32_t *)(v6 + 8); // 0x5f87a
    g9 = v8;
    int32_t v9; // 0x5f943
    if (v7 < v8) {
        // 0x5f885
        int32_t v10; // 0x5f8c5
        int32_t v11; // 0x5f8c8
        if (*(char *)(v6 + 16) == 0) {
            int128_t v12 = __asm_movsd_1649(-0x40bffdffbff7ff00); // 0x5f88b
            int128_t v13 = v4; // 0x5f893
            int128_t v14 = __asm_unpcklps(v13, v13); // 0x5f893
            v4 = v14;
            int128_t v15 = __asm_cvtps2pd(v14); // 0x5f896
            g9 = *(int32_t *)g4;
            __asm_ucomisd(v12, v15);
            int32_t v16 = g7; // 0x5f990
            // 0x5f990
            g6 = v16;
            g10 = 1;
            g7 = v16 % 8;
            uint32_t v17 = v16 & (int32_t)&g862 & 7; // 0x5f99a
            int32_t v18; // 0x5f99a
            if (v17 != 0) {
                // bb43
                v18 = 1 << v17;
                g10 = v18;
            } else {
                v18 = 1;
            }
            int32_t v19 = v16 / 8; // 0x5f99c
            g6 = v19;
            g7 = v18;
            char * v20 = (char *)(g9 + v19); // 0x5f9a1
            *v20 = *v20 | (char)v18;
            int32_t v21 = g4; // 0x5f8b9
            int32_t * v22 = (int32_t *)(v21 + 12); // 0x5f8b9
            int32_t v23 = *v22; // 0x5f8b9
            g7 = v23;
            g9 = *(int32_t *)(v21 + 8);
            int32_t v24 = v23 + 1; // 0x5f8bf
            g7 = v24;
            *v22 = v24;
            v11 = g9;
            v10 = g7;
        } else {
            v11 = v8;
            v10 = v7;
        }
        int32_t v25 = v10 + 11; // 0x5f8c5
        g6 = v25;
        if (v25 > v11) {
            v9 = v11;
            goto lab_0x5f943;
        } else {
            goto lab_0x5f8cc;
        }
    } else {
        // 0x5f938
        g6 = v7 + 11;
        *(char *)(v6 + 16) = 1;
        int32_t v26 = g9; // 0x5f93f
        if (g6 > v26) {
            v9 = v26;
            goto lab_0x5f943;
        } else {
            goto lab_0x5f8cc;
        }
    }
  lab_0x5f943:
    // 0x5f943
    *(int32_t *)(g4 + 12) = v9;
    *(char *)(g4 + 16) = 1;
    g6 = v2;
    g10 = v3;
    g8 = v5;
    g5 = v1;
    return g4;
  lab_0x5f8cc:;
    int128_t v27 = __asm_mulss_1654(v4, 0x44ffe000); // 0x5f8cc
    g10 = &g143;
    int32_t v28 = __asm_cvttss2si_1647(v27); // 0x5f8d9
    int32_t v29 = v28 >> 31; // 0x5f8df
    uint32_t v30 = (v29 ^ v28) - v29; // 0x5f8e4
    int32_t v31 = v30 <= (int32_t)&g143 ? v30 : g10; // 0x5f8ec
    g10 = v31;
    int32_t v32 = g7; // 0x5f8ef
    int32_t v33 = v32 % 32; // 0x5f8f1
    g7 = v33;
    int32_t v34 = v32 / 32; // 0x5f8f4
    g9 = v34;
    g8 = v33;
    g6 = v34;
    int32_t v35 = *(int32_t *)g4; // 0x5f8fe
    g9 = v35;
    int32_t v36 = 128 * v33; // 0x5f900
    g8 = v36;
    int32_t v37 = 4 * v34; // 0x5f903
    int32_t v38 = v35 + v37; // 0x5f903
    g6 = v38;
    int32_t * v39 = (int32_t *)v38; // 0x5f906
    int32_t v40 = *v39; // 0x5f906
    g9 = v40;
    int32_t v41 = *(int32_t *)(v36 + (int32_t)&g670 + 4 * v33); // 0x5f908
    int32_t v42 = v41 & v40; // 0x5f908
    g9 = v42;
    g8 = v31;
    uint32_t v43 = v32 & (int32_t)&g862 & 31; // 0x5f911
    int32_t v44; // 0x5f911
    if (v43 != 0) {
        // bb36
        v44 = v31 << v43;
        g8 = v44;
    } else {
        v44 = v31;
    }
    int32_t v45 = v44 | v42; // 0x5f913
    g9 = v45;
    g8 = 32 - v33;
    *v39 = v45;
    uint32_t v46 = g8; // 0x5f91e
    if (v46 <= 10) {
        // 0x5f960
        g9 = v34;
        int32_t v47 = 11 - v46; // 0x5f968
        g7 = v47;
        int32_t v48 = v37 + 4; // 0x5f96a
        g6 = v48;
        int32_t v49 = *(int32_t *)g4 + v48; // 0x5f971
        g6 = v49;
        int32_t * v50 = (int32_t *)v49; // 0x5f973
        int32_t v51 = *v50; // 0x5f973
        g9 = v51;
        int32_t v52 = *(int32_t *)(4 * v47 + (int32_t)&g665) & v51; // 0x5f975
        g9 = v52;
        g7 = v46;
        int32_t v53 = g10; // 0x5f97e
        uint32_t v54 = v46 & (int32_t)&g862 & 31; // 0x5f97e
        int32_t v55; // 0x5f97e
        if (v54 != 0) {
            // bb41
            v55 = v53 >> v54;
            g10 = v55;
        } else {
            v55 = v53;
        }
        int32_t v56 = v55 | v52; // 0x5f980
        g9 = v56;
        *v50 = v56;
    }
    int32_t * v57 = (int32_t *)(g4 + 12); // 0x5f923
    *v57 = *v57 + 11;
    g6 = v2;
    g10 = v3;
    g8 = v5;
    g5 = v1;
    return g4;
}

// Address range: 0x5f9b0 - 0x5fb81
int32_t function_5f9b0(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x5f9b3
    int32_t v2 = g10; // 0x5f9b4
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)28; // cf
    g10 = a2;
    int128_t v5 = __asm_movsd_1649(0x3f40020040080100); // 0x5f9c3
    g6 = a1;
    int128_t v6 = __asm_cvtps2pd(__asm_movss(*(int32_t *)g10)); // 0x5f9d2
    __asm_ucomisd(v6, v5);
    int32_t v7; // 0x5f9e9
    if (v4) {
        // 0x5f9db
        v4 = false;
        g4 = 0;
        __asm_ucomisd(__asm_movsd_1649(-0x40bffdffbff7ff00), v6);
        v7 = g4 & -256 | (int32_t)!v4;
        g4 = v7;
    } else {
        v7 = 1;
    }
    // 0x5f9ef
    g8 = 1;
    int128_t v8 = __asm_cvtps2pd(__asm_movss(*(int32_t *)(g10 + 4))); // 0x5f9f9
    __asm_ucomisd(v8, v5);
    if (v4) {
        // 0x5fa02
        g9 = 0;
        __asm_ucomisd(__asm_movsd_1649(-0x40bffdffbff7ff00), v8);
        int32_t v9 = g9 & -256 | (int32_t)true; // 0x5fa10
        g9 = v9;
        g8 = v9;
    }
    int32_t v10 = g6; // 0x5fa15
    int32_t v11 = *(int32_t *)(v10 + 12); // 0x5fa15
    g7 = v11;
    int32_t v12; // 0x5fa67
    if (v11 < *(int32_t *)(v10 + 8)) {
        // 0x5fa21
        if (*(char *)(v10 + 16) != 0) {
            v12 = v10;
            goto lab_0x5fa61;
        } else {
            // 0x5fa27
            g9 = v7;
            int32_t v13 = *(int32_t *)v10; // 0x5fa2a
            g4 = v13;
            if (v7 != 0) {
                // 0x5fb60
                g9 = v11;
                g7 = v11 % 8;
                uint32_t v14 = v11 & (int32_t)&g862 & 7; // 0x5fb6c
                int32_t v15;
                if (v14 != 0) {
                    // bb289
                    v15 = 1 << v14;
                } else {
                    v15 = 1;
                }
                int32_t v16 = v11 / 8; // 0x5fb6f
                g9 = v16;
                g7 = v15 % 256;
                char * v17 = (char *)(v13 + v16); // 0x5fb79
                *v17 = *v17 | (char)v15;
            } else {
                // 0x5fa37
                g4 = v11;
                g9 = 1;
                g7 = v11 % 8;
                uint32_t v18 = v11 & (int32_t)&g862 & 7; // 0x5fa41
                int32_t v19; // 0x5fa46
                if (v18 != 0) {
                    int32_t v20 = 1 << v18; // 0x5fa41
                    g9 = v20;
                    v19 = -1 - v20;
                } else {
                    v19 = -2;
                }
                int32_t v21 = v11 / 8; // 0x5fa43
                g4 = v21;
                g9 = v13;
                g7 = v19;
                char * v22 = (char *)(v13 + v21); // 0x5fa50
                *v22 = *v22 & (char)v19;
            }
            int32_t v23 = g6; // 0x5fa53
            int32_t * v24 = (int32_t *)(v23 + 12); // 0x5fa53
            int32_t v25 = *v24 + 1; // 0x5fa56
            g7 = v25;
            *v24 = v25;
            int32_t v26 = g6;
            if (*(int32_t *)(v23 + 8) > v25) {
                v12 = v26;
                goto lab_0x5fa61;
            } else {
                // 0x5fab0
                *(char *)(v26 + 16) = 1;
                goto lab_0x5fab4;
            }
        }
    } else {
        // 0x5fab0
        *(char *)(v10 + 16) = 1;
        goto lab_0x5fab4;
    }
  lab_0x5fa61:
    // 0x5fa61
    if (*(char *)(v12 + 16) != 0) {
        goto lab_0x5fab4;
    } else {
        int32_t v27 = *(int32_t *)v12; // 0x5fa67
        g4 = v27;
        int32_t v28 = g7; // 0x5fb30
        if (g8 != 0) {
            // 0x5fb30
            g9 = v28;
            g7 = v28 % 8;
            uint32_t v29 = v28 & (int32_t)&g862 & 7; // 0x5fb3c
            int32_t v30;
            if (v29 != 0) {
                // bb287
                v30 = 1 << v29;
            } else {
                v30 = 1;
            }
            int32_t v31 = v28 / 8; // 0x5fb3f
            g9 = v31;
            g7 = v30 % 256;
            char * v32 = (char *)(v31 + v27); // 0x5fb49
            *v32 = *v32 | (char)v30;
        } else {
            // 0x5fa74
            g4 = v28;
            g9 = 1;
            g7 = v28 % 8;
            uint32_t v33 = v28 & (int32_t)&g862 & 7; // 0x5fa7e
            int32_t v34; // 0x5fa83
            if (v33 != 0) {
                int32_t v35 = 1 << v33; // 0x5fa7e
                g9 = v35;
                v34 = -1 - v35;
            } else {
                v34 = -2;
            }
            int32_t v36 = v28 / 8; // 0x5fa80
            g4 = v36;
            g9 = v27;
            g7 = v34;
            char * v37 = (char *)(v36 + v27); // 0x5fa8d
            *v37 = *v37 & (char)v34;
        }
        // 0x5fa90
        g7 = v7;
        int32_t * v38 = (int32_t *)(g6 + 12); // 0x5fa93
        *v38 = *v38 + 1;
        if (v7 == 0) {
            goto lab_0x5fabb;
        } else {
            goto lab_0x5fa9b;
        }
    }
  lab_0x5fab4:
    // 0x5fab4
    g7 = v7;
    if (v7 != 0) {
        goto lab_0x5fa9b;
    } else {
        goto lab_0x5fabb;
    }
  lab_0x5fa9b:;
    int32_t v39 = *(int32_t *)g10; // 0x5fa9b
    g4 = v39;
    g4 = function_5f860(g6, v39);
    goto lab_0x5fabb;
  lab_0x5fabb:
    // 0x5fabb
    if (g8 != 0) {
        int32_t v40 = *(int32_t *)(g10 + 4); // 0x5fabf
        g4 = v40;
        g4 = function_5f860(g6, v40);
    }
    // 0x5face
    g7 = *(int32_t *)(g6 + 12);
    int128_t v41 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x5fad1
    int32_t v42 = g6; // 0x5fad6
    char * v43 = (char *)(v42 + 16); // 0x5fadb
    if (g7 >= *(int32_t *)(v42 + 8)) {
        // 0x5fb20
        *v43 = 1;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x5fadb
    if (*v43 == 0) {
        int128_t v44 = __asm_movsd_1649(-0x40bffdffbff7ff00); // 0x5fae1
        int32_t v45 = g7; // 0x5fae9
        g10 = v45;
        g9 = 1;
        g7 = v45 % 8;
        int32_t v46 = g10; // 0x5faf6
        g10 = v46 / 8;
        v4 = (v46 & 4) != 0;
        int128_t v47 = __asm_cvtps2pd(__asm_unpcklps(v41, v41)); // 0x5faf9
        int32_t v48 = g9; // 0x5fafc
        uint32_t v49 = g7 & (int32_t)&g862 & 31; // 0x5fafc
        if (v49 != 0) {
            // bb281
            g9 = v48 << v49;
            v4 = (0x80000000 >> v49 - 1 & v48) != 0;
        }
        // bb283
        __asm_ucomisd(v44, v47);
        int32_t v50 = *(int32_t *)g6; // 0x5fb02
        g4 = v50;
        if (!v4) {
            char * v51 = (char *)(g10 + v50); // 0x5fb58
            *v51 = (char)g9 | *v51;
        } else {
            int32_t v52 = -1 - g9; // 0x5fb06
            g9 = v52;
            char * v53 = (char *)(g10 + v50); // 0x5fb08
            *v53 = *v53 & (char)v52;
        }
        int32_t * v54 = (int32_t *)(g6 + 12); // 0x5fb0b
        *v54 = *v54 + 1;
    }
    // 0x5fb0f
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x5fb90 - 0x5fbbe
int32_t function_5fb90(int32_t a1, int32_t a2) {
    // 0x5fb90
    int32_t v1; // ebp
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    g4 = a2;
    int32_t v3 = *(int32_t *)(a2 + 8); // 0x5fb99
    g9 = v3;
    int32_t v4 = *(int32_t *)(a2 + 4); // 0x5fb9c
    g7 = v4;
    int32_t v5 = *(int32_t *)a2; // 0x5fb9f
    int32_t v6 = v5; // bp-16
    g4 = a1;
    int32_t result = function_5f650(a1, &v6, v5, v4, v3, v1); // 0x5fbb7
    g4 = result;
    return result;
}

// Address range: 0x5fbc0 - 0x5fbe2
int32_t function_5fbc0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_5dc00(a1, a2, 8); // 0x5fbdb
    g4 = result;
    g5 = v1;
    return result;
}

// Address range: 0x5fbf0 - 0x5fc94
int32_t function_5fbf0(int32_t a1, int32_t a2) {
    // 0x5fbf0
    g4 = a1;
    int32_t v1 = g6; // bp-16
    int32_t v2 = g10; // 0x5fbfc
    int32_t v3 = g8; // 0x5fbff
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x5fc02
    int32_t v5 = *v4; // 0x5fc02
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x5fc05
    g9 = v6;
    int32_t v7 = v5 + 8; // 0x5fc08
    g6 = v7;
    if (v7 > v6) {
        // 0x5fc80
        *v4 = v6;
        *(char *)(g4 + 16) = 1;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    int32_t v8 = v5 % 32; // 0x5fc11
    g7 = v8;
    int32_t v9 = v5 / 32; // 0x5fc14
    g10 = v9;
    int32_t v10 = 4 * v9; // 0x5fc19
    g6 = v10;
    int32_t v11 = 128 * v8; // 0x5fc20
    g8 = v11;
    int32_t v12 = *(int32_t *)a1 + v10; // 0x5fc23
    g6 = v12;
    int32_t * v13 = (int32_t *)v12; // 0x5fc25
    int32_t v14 = *v13; // 0x5fc25
    g9 = v14;
    int32_t v15 = *(int32_t *)(v11 + (int32_t)&g668 + 4 * v8); // 0x5fc27
    int32_t v16 = v15 & v14; // 0x5fc27
    g9 = v16;
    uint32_t v17 = v5 & (int32_t)&g862 & 31; // 0x5fc31
    int32_t v18; // 0x5fc31
    if (v17 != 0) {
        // bb
        v18 = a2 << v17;
    } else {
        v18 = a2;
    }
    // bb241
    g8 = v18;
    int32_t v19 = v18 | v16; // 0x5fc33
    g9 = v19;
    g8 = 32 - v8;
    *v13 = v19;
    int32_t v20 = g8; // 0x5fc3e
    if (v20 <= 7) {
        int32_t v21 = 4 * g10 + 4; // 0x5fc58
        g6 = v21;
        g7 = 8;
        g10 = a2;
        int32_t v22 = *(int32_t *)g4 + v21; // 0x5fc67
        g6 = v22;
        int32_t v23 = 8 - v20; // 0x5fc69
        g7 = v23;
        int32_t * v24 = (int32_t *)v22; // 0x5fc6b
        int32_t v25 = *v24; // 0x5fc6b
        g9 = v25;
        int32_t v26 = *(int32_t *)(4 * v23 + (int32_t)&g665) & v25; // 0x5fc6d
        g9 = v26;
        g7 = v20;
        uint32_t v27 = v20 & (int32_t)&g862 & 31; // 0x5fc76
        int32_t v28; // 0x5fc76
        if (v27 != 0) {
            // bb244
            v28 = a2 >> v27;
            g10 = v28;
        } else {
            v28 = a2;
        }
        int32_t v29 = v28 | v26; // 0x5fc78
        g9 = v29;
        *v24 = v29;
    }
    int32_t * v30 = (int32_t *)(g4 + 12); // 0x5fc43
    *v30 = *v30 + 8;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x5fca0 - 0x5fcc2
int32_t function_5fca0(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_5dc00(a1, a2, 16); // 0x5fcbb
    g4 = result;
    g5 = v1;
    return result;
}

// Address range: 0x5fcd0 - 0x5fd74
int32_t function_5fcd0(int32_t a1, int32_t a2) {
    // 0x5fcd0
    g4 = a1;
    int32_t v1 = g6; // bp-16
    int32_t v2 = g10; // 0x5fcdc
    int32_t v3 = g8; // 0x5fcdf
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x5fce2
    int32_t v5 = *v4; // 0x5fce2
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x5fce5
    g9 = v6;
    int32_t v7 = v5 + 16; // 0x5fce8
    g6 = v7;
    if (v7 > v6) {
        // 0x5fd60
        *v4 = v6;
        *(char *)(g4 + 16) = 1;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    int32_t v8 = v5 % 32; // 0x5fcf1
    g7 = v8;
    int32_t v9 = v5 / 32; // 0x5fcf4
    g10 = v9;
    int32_t v10 = 4 * v9; // 0x5fcf9
    g6 = v10;
    int32_t v11 = 128 * v8; // 0x5fd00
    g8 = v11;
    int32_t v12 = *(int32_t *)a1 + v10; // 0x5fd03
    g6 = v12;
    int32_t * v13 = (int32_t *)v12; // 0x5fd05
    int32_t v14 = *v13; // 0x5fd05
    g9 = v14;
    int32_t v15 = *(int32_t *)(v11 + (int32_t)&g672 + 4 * v8); // 0x5fd07
    int32_t v16 = v15 & v14; // 0x5fd07
    g9 = v16;
    uint32_t v17 = v5 & (int32_t)&g862 & 31; // 0x5fd11
    int32_t v18; // 0x5fd11
    if (v17 != 0) {
        // bb
        v18 = a2 << v17;
    } else {
        v18 = a2;
    }
    // bb241
    g8 = v18;
    int32_t v19 = v18 | v16; // 0x5fd13
    g9 = v19;
    g8 = 32 - v8;
    *v13 = v19;
    int32_t v20 = g8; // 0x5fd1e
    if (v20 <= 15) {
        int32_t v21 = 4 * g10 + 4; // 0x5fd38
        g6 = v21;
        g7 = 16;
        g10 = a2;
        int32_t v22 = *(int32_t *)g4 + v21; // 0x5fd47
        g6 = v22;
        int32_t v23 = 16 - v20; // 0x5fd49
        g7 = v23;
        int32_t * v24 = (int32_t *)v22; // 0x5fd4b
        int32_t v25 = *v24; // 0x5fd4b
        g9 = v25;
        int32_t v26 = *(int32_t *)(4 * v23 + (int32_t)&g665) & v25; // 0x5fd4d
        g9 = v26;
        g7 = v20;
        uint32_t v27 = v20 & (int32_t)&g862 & 31; // 0x5fd56
        int32_t v28; // 0x5fd56
        if (v27 != 0) {
            // bb244
            v28 = a2 >> v27;
            g10 = v28;
        } else {
            v28 = a2;
        }
        int32_t v29 = v28 | v26; // 0x5fd58
        g9 = v29;
        *v24 = v29;
    }
    int32_t * v30 = (int32_t *)(g4 + 12); // 0x5fd23
    *v30 = *v30 + 16;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x5fd80 - 0x5fda2
int32_t function_5fd80(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int32_t result = function_5dc00(a1, a2, 32); // 0x5fd9b
    g4 = result;
    g5 = v1;
    return result;
}

// Address range: 0x5fdb0 - 0x5fefe
int32_t function_5fdb0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x5fdb3
    int32_t v2 = g10; // 0x5fdb4
    int32_t v3 = g6; // 0x5fdb5
    g4 = a1;
    g9 = a3;
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x5fdcb
    g7 = v4;
    g10 = a2;
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x5fdd4
    int32_t v6 = *v5; // 0x5fdd4
    g9 = v6;
    int32_t v7 = v6 + 32; // 0x5fdd7
    g6 = v7;
    if (v7 > v4) {
        // 0x5fef0
        *v5 = v4;
        g9 = g7;
        *(char *)(g4 + 16) = 1;
    } else {
        int32_t v8 = v6 / 32; // 0x5fde4
        g7 = v6;
        int32_t v9 = *(int32_t *)a1; // 0x5fdec
        g9 = v9;
        int32_t v10 = v6 % 32; // 0x5fdf1
        g7 = v10;
        int32_t v11 = 128 * v10; // 0x5fdf6
        g8 = v11;
        int32_t v12 = 4 * v8; // 0x5fdf9
        int32_t v13 = v9 + v12; // 0x5fdf9
        g6 = v13;
        int32_t * v14 = (int32_t *)v13; // 0x5fdfc
        int32_t v15 = *v14; // 0x5fdfc
        g9 = v15;
        int32_t v16 = *(int32_t *)(v11 + (int32_t)&g674 + 4 * v10); // 0x5fdfe
        int32_t v17 = v16 & v15; // 0x5fdfe
        g9 = v17;
        uint32_t v18 = v6 & (int32_t)&g862 & 31; // 0x5fe07
        int32_t v19; // 0x5fe09
        if (v18 != 0) {
            // bb
            v19 = a2 << v18;
        } else {
            v19 = a2;
        }
        // bb253
        g8 = 32;
        *v14 = v19 | v17;
        int32_t v20 = g7; // 0x5fe14
        int32_t v21 = g8 - v20; // 0x5fe14
        g9 = v21;
        g7 = v21;
        if (v21 != 32) {
            // 0x5feb0
            g9 = v8;
            g8 = v20;
            int32_t v22 = g10; // 0x5feb5
            uint32_t v23 = v21 & (int32_t)&g862 & 31; // 0x5feb5
            int32_t v24; // 0x5feb5
            if (v23 != 0) {
                // bb263
                v24 = v22 >> v23;
                g10 = v24;
            } else {
                v24 = v22;
            }
            int32_t v25 = v12 + 4; // 0x5feb7
            g6 = v25;
            int32_t v26 = *(int32_t *)g4 + v25; // 0x5febe
            g6 = v26;
            int32_t * v27 = (int32_t *)v26; // 0x5fec0
            int32_t v28 = *v27; // 0x5fec0
            g9 = v28;
            int32_t v29 = *(int32_t *)(4 * v20 + (int32_t)&g665); // 0x5fec2
            int32_t v30 = v29 & v28 | v24; // 0x5fec9
            g9 = v30;
            *v27 = v30;
        }
        int32_t v31 = g4; // 0x5fe21
        int32_t * v32 = (int32_t *)(v31 + 12); // 0x5fe21
        int32_t v33 = *v32; // 0x5fe21
        g7 = v33;
        g9 = *(int32_t *)(v31 + 8);
        int32_t v34 = v33 + 32; // 0x5fe27
        g7 = v34;
        *v32 = v34;
    }
    // 0x5fe2d
    unsigned char v35;
    int32_t v36 = v35; // 0x5fe2d
    g6 = v36;
    int32_t v37; // ebp
    int32_t v38 = *(int32_t *)(4 * v36 - 40 + v37); // 0x5fe31
    g10 = v38;
    int32_t v39 = g7; // 0x5fe35
    int32_t v40 = v39 + 32; // 0x5fe35
    g6 = v40;
    int32_t v41 = g9; // 0x5fe38
    int32_t v42 = g4; // 0x5fed8
    if (v41 < v40) {
        // 0x5fed8
        *(int32_t *)(v42 + 12) = v41;
        *(char *)(g4 + 16) = 1;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v43 = v39 % 32; // 0x5fe44
    g7 = v43;
    int32_t v44 = v39 / 32; // 0x5fe47
    g9 = v44;
    int32_t v45 = 4 * v44; // 0x5fe4d
    int32_t v46 = *(int32_t *)v42 + v45; // 0x5fe4d
    g6 = v46;
    g8 = v43;
    int32_t * v47 = (int32_t *)v46; // 0x5fe52
    int32_t v48 = *v47; // 0x5fe52
    g9 = v48;
    int32_t v49 = 128 * v43; // 0x5fe54
    g8 = v49;
    int32_t v50 = *(int32_t *)(v49 + (int32_t)&g674 + 4 * v43); // 0x5fe57
    int32_t v51 = v50 & v48; // 0x5fe57
    g9 = v51;
    uint32_t v52 = v39 & (int32_t)&g862 & 31; // 0x5fe60
    int32_t v53; // 0x5fe62
    if (v52 != 0) {
        // bb256
        v53 = v38 << v52;
    } else {
        v53 = v38;
    }
    // bb258
    g8 = 32;
    *v47 = v53 | v51;
    int32_t v54 = g7; // 0x5fe6d
    int32_t v55 = g8 - v54; // 0x5fe6d
    g9 = v55;
    g7 = v55;
    if (v55 != 32) {
        // 0x5fe88
        g9 = v44;
        g8 = v54;
        int32_t v56 = g10; // 0x5fe8d
        uint32_t v57 = v55 & (int32_t)&g862 & 31; // 0x5fe8d
        int32_t v58; // 0x5fe8d
        if (v57 != 0) {
            // bb261
            v58 = v56 >> v57;
            g10 = v58;
        } else {
            v58 = v56;
        }
        int32_t v59 = v45 + 4; // 0x5fe8f
        g6 = v59;
        int32_t v60 = *(int32_t *)g4 + v59; // 0x5fe96
        g6 = v60;
        int32_t * v61 = (int32_t *)v60; // 0x5fe98
        int32_t v62 = *v61; // 0x5fe98
        g9 = v62;
        int32_t v63 = *(int32_t *)(4 * v54 + (int32_t)&g665); // 0x5fe9a
        int32_t v64 = v63 & v62 | v58; // 0x5fea1
        g9 = v64;
        *v61 = v64;
    }
    int32_t * v65 = (int32_t *)(g4 + 12); // 0x5fe76
    *v65 = *v65 + 32;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x5ff00 - 0x5ff22
int32_t function_5ff00(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2;
    int32_t result = function_5e1b0(a1, &v2, 32); // 0x5ff1b
    g4 = result;
    return result;
}

// Address range: 0x5ff30 - 0x5ff3d
int32_t function_5ff30(int32_t a1, int32_t a2, int32_t a3) {
    int32_t result = function_5e1b0(8 * a1, &g870, (int32_t)&g870); // 0x5ff38
    g4 = result;
    return result;
}

// Address range: 0x5ff40 - 0x5ff92
int32_t function_5ff40(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x5ff43
    int32_t v2 = g6; // 0x5ff44
    g6 = a2;
    g10 = a1;
    if (a2 == 0) {
        // 0x5ff80
        g4 = function_5fbc0(a1, 0);
    } else {
        int32_t v3 = (int32_t)*(char *)a2; // 0x5ff58
        g4 = v3;
        g6 = a2 + 1;
        g4 = function_5fbc0(a1, v3);
        int32_t v4 = g6; // 0x5ff6a
        while (*(char *)(v4 - 1) != 0) {
            // 0x5ff58
            a2 = v4;
            v3 = (int32_t)*(char *)a2;
            g4 = v3;
            g6 = a2 + 1;
            g4 = function_5fbc0(g10, v3);
            v4 = g6;
        }
    }
    // 0x5ff70
    g6 = v2;
    int32_t result = (int32_t)*(char *)(g10 + 16) ^ 1; // 0x5ff78
    g4 = result;
    g10 = v1;
    return result;
}

// Address range: 0x5ffa0 - 0x5fff2
int32_t function_5ffa0(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x5ffa3
    int32_t v2 = g6; // 0x5ffa4
    g6 = a2;
    g10 = a1;
    if (a2 == 0) {
        // 0x5ffe0
        g4 = function_5fca0(a1, 0);
    } else {
        int32_t v3 = *(int32_t *)a2; // 0x5ffb8
        g4 = v3;
        g6 = a2 + 4;
        g4 = function_5fca0(a1, v3);
        int32_t v4 = g6; // 0x5ffc9
        int32_t v5 = *(int32_t *)(v4 - 4); // 0x5ffc9
        g7 = v5;
        while (v5 != 0) {
            // 0x5ffb8
            a2 = v4;
            v3 = *(int32_t *)a2;
            g4 = v3;
            g6 = a2 + 4;
            g4 = function_5fca0(g10, v3);
            v4 = g6;
            v5 = *(int32_t *)(v4 - 4);
            g7 = v5;
        }
    }
    // 0x5ffd0
    g6 = v2;
    int32_t result = (int32_t)*(char *)(g10 + 16) ^ 1; // 0x5ffd8
    g4 = result;
    g10 = v1;
    return result;
}

// Address range: 0x60000 - 0x60032
int32_t function_60000(int32_t a1) {
    // 0x60000
    g4 = a1;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = -1;
    *(int32_t *)(g4 + 12) = 0;
    *(char *)(g4 + 16) = 0;
    *(char *)(g4 + 17) = 1;
    *(int32_t *)(g4 + 20) = 0;
    return g4;
}

// Address range: 0x60040 - 0x60084
int32_t function_60040(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // bp-8
    g9 = a4;
    g4 = a1;
    g7 = a3;
    g6 = a2;
    *(char *)(a1 + 17) = 1;
    *(int32_t *)(g4 + 4) = g7;
    *(int32_t *)g4 = g6;
    if (a4 != -1) {
        // 0x6005e
        *(int32_t *)(g4 + 8) = g9;
        *(int32_t *)(g4 + 12) = 0;
        *(char *)(g4 + 16) = 0;
        g6 = v1;
        return g4;
    }
    // 0x60070
    g7 *= 8;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 8) = g7;
    *(char *)(g4 + 16) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x60090 - 0x600dc
int32_t function_60090(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // bp-8
    g4 = a1;
    g6 = a2;
    g9 = a5;
    g7 = a4;
    *(char *)(a1 + 17) = 1;
    *(int32_t *)(g4 + 20) = g6;
    g6 = a3;
    *(int32_t *)(g4 + 4) = g7;
    *(int32_t *)g4 = g6;
    if (g9 != -1) {
        // 0x600b4
        *(int32_t *)(g4 + 8) = g9;
        *(int32_t *)(g4 + 12) = 0;
        *(char *)(g4 + 16) = 0;
        g6 = v1;
        return g4;
    }
    // 0x600c8
    g7 *= 8;
    *(int32_t *)(g4 + 12) = 0;
    *(int32_t *)(g4 + 8) = g7;
    *(char *)(g4 + 16) = 0;
    g6 = v1;
    return g4;
}

// Address range: 0x600e0 - 0x60123
int32_t function_600e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // bp-8
    g9 = a5;
    g4 = a1;
    g7 = a3;
    g6 = a2;
    *(int32_t *)(a1 + 4) = a3;
    *(int32_t *)g4 = g6;
    if (a5 != -1) {
        // 0x600fa
        *(int32_t *)(g4 + 8) = g9;
        g9 = a4;
        *(char *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 12) = g9;
        g6 = v1;
        return g4;
    }
    // 0x60110
    g9 = a4;
    g7 *= 8;
    *(char *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 8) = g7;
    *(int32_t *)(g4 + 12) = g9;
    g6 = v1;
    return g4;
}

// Address range: 0x60130 - 0x60143
int32_t function_60130(int32_t a1) {
    // 0x60130
    g4 = a1;
    *(int32_t *)(a1 + 12) = 0;
    *(char *)(g4 + 16) = 0;
    return g4;
}

// Address range: 0x60150 - 0x6015e
int32_t function_60150(int32_t a1, int32_t a2) {
    // 0x60150
    g9 = a2;
    g4 = a1;
    *(char *)(a1 + 17) = (char)a2;
    return g4;
}

// Address range: 0x60160 - 0x6016b
int32_t function_60160(int32_t a1) {
    // 0x60160
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 20); // 0x60167
    g4 = result;
    return result;
}

// Address range: 0x60170 - 0x6017e
int32_t function_60170(int32_t a1, int32_t a2) {
    // 0x60170
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 20) = a2;
    return g4;
}

// Address range: 0x60180 - 0x60203
int32_t function_60180(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x60183
    int32_t v2 = g10; // 0x60184
    int32_t v3 = g6; // 0x60185
    g6 = a2;
    g8 = a1;
    int32_t v4; // 0x601ef
    int32_t v5; // 0x601fc
    if (a2 < 1) {
        // 0x601fc
        v5 = *(int32_t *)(a1 + 12);
        g4 = v5;
        g10 = 0;
        v4 = a1;
    } else {
        int32_t v6 = *(int32_t *)a1; // 0x60193
        g4 = v6;
        g10 = 0;
        g6 = 0;
        int32_t v7 = *(int32_t *)(a1 + 12); // 0x60199
        g9 = v7;
        int32_t v8 = 0; // 0x601c3
        int32_t v9 = v7; // 0x601b5
        while (true) {
            // 0x601a8
            g8 = v6;
            int32_t v10 = v9 / 8; // 0x601af
            g4 = v10;
            g7 = v9 % 8;
            int32_t v11 = v9 + 1; // 0x601b5
            g9 = v11;
            g4 = (int32_t)*(char *)(v10 + v6);
            uint32_t v12 = v9 & (int32_t)&g862 & 7; // 0x601c1
            int32_t v13;
            if (v12 != 0) {
                // bb
                v13 = 1 << v12;
            } else {
                v13 = 1;
            }
            // bb248
            g8 = v13;
            g7 = v8;
            g8 = a1;
            *(int32_t *)(a1 + 12) = v11;
            int32_t v14 = g6 + 1; // 0x601d4
            g6 = v14;
            int32_t v15 = g4 & (int32_t)&g862 & -256; // 0x601d7
            g4 = v15;
            uint32_t v16 = g7 & (int32_t)&g862 & 31; // 0x601da
            int32_t v17; // 0x601da
            if (v16 != 0) {
                // bb250
                v17 = v15 << v16;
                g4 = v17;
            } else {
                v17 = v15;
            }
            // bb252
            g10 |= v17;
            if (v14 == a2) {
                // break -> 0x601e3
                break;
            }
            // .dec_label_pc_601a8_crit_edge
            v8 = v14;
            v9 = g9;
        }
        // 0x601e3
        g7 = v7;
        g9 = a2;
        int32_t v18 = v7 + a2; // 0x601e9
        g4 = v18;
        v4 = g8;
        v5 = v18;
    }
    // 0x601ec
    *(int32_t *)(v4 + 12) = v5 - a2;
    int32_t result = g10; // 0x601f5
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x60210 - 0x604b1
int32_t function_60210(int32_t a1, int32_t * a2, int32_t a3) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g8; // 0x60213
    int32_t v3 = g10; // 0x60214
    int32_t v4 = g6; // 0x60215
    g9 = v1;
    g7 = a3;
    g4 = a1;
    int32_t v5;
    int32_t v6;
    if ((char)v1 % 4 != 0) {
        if (a3 > 7) {
            int32_t v7 = a3;
            while (true) {
                int32_t * v8 = (int32_t *)(a1 + 12); // 0x6029f
                int32_t v9 = *v8; // 0x6029f
                g7 = v9;
                int32_t v10 = *(int32_t *)(a1 + 8); // 0x602a2
                g10 = v10;
                int32_t v11 = v9 + 8; // 0x602a5
                g6 = v11;
                int32_t v12; // 0x602bb
                int32_t v13; // 0x602b1
                if (v11 > v10) {
                    // 0x602ac
                    g6 = 0;
                    *v8 = v10;
                    v13 = v7 - 8;
                    *(char *)(g4 + 16) = 1;
                    *(char *)g9 = (char)g6;
                    v12 = g9 + 1;
                    g9 = v12;
                    if ((char)v12 % 4 == 0) {
                        v6 = v12;
                        v5 = v13;
                        // break -> 0x602c6
                        break;
                    }
                } else {
                    int32_t v14 = *(int32_t *)a1; // 0x60240
                    g8 = v14;
                    int32_t v15 = v9 / 32; // 0x60244
                    g10 = v15;
                    int32_t v16 = 4 * v15; // 0x6024a
                    g10 = *(int32_t *)(v14 + v16);
                    *v8 = v11;
                    int32_t v17 = g10; // 0x60253
                    int32_t v18 = g7; // 0x60253
                    uint32_t v19 = v18 & (int32_t)&g862 & 31; // 0x60253
                    int32_t v20; // 0x60253
                    if (v19 != 0) {
                        // bb
                        v20 = v17 >> v19;
                        g10 = v20;
                    } else {
                        v20 = v17;
                    }
                    int32_t v21 = (v18 + 7) / 32; // 0x60258
                    g7 = v21;
                    int32_t v22;
                    if (v15 == v21) {
                        // 0x60350
                        g6 = g660;
                        v22 = g660 & v20;
                    } else {
                        // 0x60267
                        g8 = v15;
                        g10 = v14;
                        int32_t v23 = g6 % 32; // 0x6026f
                        g7 = v23;
                        int32_t v24 = *(int32_t *)(v16 + 4 + v14); // 0x60272
                        g6 = v24;
                        int32_t v25 = 8 - v23; // 0x6027b
                        g8 = v25;
                        int32_t v26 = *(int32_t *)(4 * v23 + (int32_t)&g656) & v24; // 0x6027d
                        g6 = v26;
                        g7 = v25;
                        uint32_t v27 = v25 & (int32_t)&g862 & 31; // 0x60286
                        int32_t v28; // 0x60286
                        if (v27 != 0) {
                            // bb63
                            v28 = v26 << v27;
                            g6 = v28;
                        } else {
                            v28 = v26;
                        }
                        // bb65
                        v22 = v28 | v20;
                    }
                    // 0x6028b
                    g6 = v22;
                    int32_t v29 = v7 - 8; // 0x6028b
                    *(char *)g9 = (char)v22;
                    int32_t v30 = g9 + 1; // 0x60291
                    g9 = v30;
                    if ((char)v30 % 4 == 0) {
                        v6 = v30;
                        v5 = v29;
                        // break -> 0x602c6
                        break;
                    }
                    v12 = v30;
                    v13 = v29;
                }
                if (v13 <= 7) {
                    v6 = v12;
                    v5 = v13;
                    // break -> 0x602c6
                    break;
                }
                // 0x60299
                a1 = g4;
                v7 = v13;
            }
        } else {
            v6 = v1;
            v5 = a3;
        }
    } else {
        v6 = v1;
        v5 = a3;
    }
    int32_t v31; // bp-40
    int32_t v32; // 0x60375
    int32_t v33; // 0x6036e
    if (v5 > 31) {
        // 0x602d0
        g8 = v5;
        g6 = v6;
        v31 = v5;
        int32_t v34 = v6;
        while (true) {
            int32_t v35 = g4; // 0x60333
            int32_t * v36 = (int32_t *)(v35 + 12); // 0x60333
            int32_t v37 = *v36; // 0x60333
            g7 = v37;
            int32_t v38 = *(int32_t *)(v35 + 8); // 0x60336
            g9 = v38;
            int32_t v39 = v37 + 32; // 0x60339
            g10 = v39;
            int32_t v40; // 0x60325
            if (v39 > v38) {
                // 0x60340
                *v36 = v38;
                g9 = 0;
                *(char *)(g4 + 16) = 1;
                v40 = g9;
            } else {
                int32_t v41 = *(int32_t *)v35; // 0x602e0
                g6 = v41;
                int32_t v42 = v37 / 32; // 0x602e4
                g9 = v42;
                g8 = v42;
                g9 = *(int32_t *)(v41 + 4 * v42);
                *v36 = v39;
                int32_t v43 = g9; // 0x602f5
                int32_t v44 = g7; // 0x602f5
                uint32_t v45 = v44 & (int32_t)&g862 & 31; // 0x602f5
                int32_t v46; // 0x602f5
                if (v45 != 0) {
                    // bb68
                    v46 = v43 >> v45;
                    g9 = v46;
                } else {
                    v46 = v43;
                }
                int32_t v47 = (v44 + 31) / 32; // 0x602fa
                g7 = v47;
                int32_t v48 = g8; // 0x602fd
                if (v48 != v47) {
                    int32_t v49 = g10; // 0x60301
                    g7 = v49;
                    int32_t v50 = *(int32_t *)(4 * v48 + 4 + g6); // 0x60303
                    g10 = v50;
                    int32_t v51 = v49 % 32; // 0x6030c
                    g7 = v51;
                    int32_t v52 = 32 - v51; // 0x6030f
                    g6 = v52;
                    int32_t v53 = *(int32_t *)(4 * v51 + (int32_t)&g656) & v50; // 0x60311
                    g10 = v53;
                    g7 = v52;
                    uint32_t v54 = v52 & (int32_t)&g862 & 31; // 0x6031a
                    int32_t v55; // 0x6031a
                    if (v54 != 0) {
                        // bb70
                        v55 = v53 << v54;
                        g10 = v55;
                    } else {
                        v55 = v53;
                    }
                    int32_t v56 = v55 | v46; // 0x6031c
                    g9 = v56;
                    v40 = v56;
                } else {
                    v40 = v46;
                }
            }
            // 0x6031e
            g10 = v34;
            v31 -= 32;
            *(int32_t *)v34 = v40;
            int32_t v57 = g10 + 4; // 0x60327
            g10 = v57;
            if (v31 <= 31) {
                // break -> 0x60360
                break;
            }
            v34 = v57;
        }
        uint32_t v58 = v5 - 32; // 0x60366
        uint32_t v59 = v58 / 32; // 0x6036b
        v33 = v6 + 4 + 4 * v59;
        g8 = v33;
        int32_t v60 = 32 * v59; // 0x60372
        g7 = v60;
        v32 = v58 - v60;
        g9 = v32;
    } else {
        v33 = v6;
        v32 = v5;
    }
    int32_t v61; // 0x6040d
    int32_t v62; // 0x60407
    if (v32 > 7) {
        // 0x60387
        g6 = v32;
        g9 = v33;
        v31 = v32;
        while (true) {
            int32_t v63 = g4; // 0x60390
            int32_t * v64 = (int32_t *)(v63 + 12); // 0x60390
            int32_t v65 = *v64; // 0x60390
            g7 = v65;
            int32_t v66 = *(int32_t *)(v63 + 8); // 0x60393
            g8 = v66;
            int32_t v67 = v65 + 8; // 0x60396
            g10 = v67;
            int32_t v68; // 0x603ee
            if (v67 > v66) {
                // 0x60428
                *v64 = v66;
                g7 = 0;
                *(char *)(g4 + 16) = 1;
                v68 = g7;
            } else {
                int32_t v69 = *(int32_t *)v63; // 0x603a1
                g8 = v69;
                int32_t v70 = v65 / 32; // 0x603a5
                g6 = v70;
                int32_t v71 = 4 * v70; // 0x603ab
                g6 = *(int32_t *)(v69 + v71);
                *v64 = v67;
                int32_t v72 = g6; // 0x603b4
                int32_t v73 = g7; // 0x603b4
                uint32_t v74 = v73 & (int32_t)&g862 & 31; // 0x603b4
                int32_t v75; // 0x603b4
                if (v74 != 0) {
                    // bb75
                    v75 = v72 >> v74;
                    g6 = v75;
                } else {
                    v75 = v72;
                }
                int32_t v76 = (v73 + 7) / 32; // 0x603b9
                g7 = v76;
                int32_t v77;
                if (v70 == v76) {
                    // 0x60438
                    g10 = g660;
                    v77 = g660 & v75;
                } else {
                    // 0x603c4
                    g8 = v70;
                    g6 = v69;
                    int32_t v78 = g10 % 32; // 0x603cc
                    g7 = v78;
                    int32_t v79 = *(int32_t *)(v71 + 4 + v69); // 0x603cf
                    g10 = v79;
                    int32_t v80 = 8 - v78; // 0x603d8
                    g8 = v80;
                    int32_t v81 = *(int32_t *)(4 * v78 + (int32_t)&g656) & v79; // 0x603da
                    g10 = v81;
                    g7 = v80;
                    uint32_t v82 = v80 & (int32_t)&g862 & 31; // 0x603e3
                    int32_t v83; // 0x603e3
                    if (v82 != 0) {
                        // bb77
                        v83 = v81 << v82;
                        g10 = v83;
                    } else {
                        v83 = v81;
                    }
                    // bb79
                    v77 = v83 | v75;
                }
                // 0x603e8
                g10 = v77;
                g7 = v77;
                v68 = v77;
            }
            // 0x603ea
            v31 -= 8;
            *(char *)g9 = (char)v68;
            g9++;
            if (v31 <= 7) {
                // break -> 0x603f9
                break;
            }
        }
        int32_t v84 = v32 - 8; // 0x603ff
        g9 = v84;
        uint32_t v85 = v84 / 8; // 0x60404
        v62 = v33 + 1 + v85;
        g6 = v62;
        v61 = -8 * v85 + v84;
        g7 = v61;
    } else {
        v62 = v33;
        v61 = v32;
    }
    // 0x60416
    g10 = v61;
    if (v61 == 0) {
        // 0x6041d
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return g4;
    }
    int32_t v86 = g4; // 0x60448
    int32_t * v87 = (int32_t *)(v86 + 12); // 0x60448
    int32_t v88 = *v87; // 0x60448
    g7 = v88;
    g9 = v61;
    int32_t v89 = *(int32_t *)(v86 + 8); // 0x6044e
    g6 = v89;
    int32_t v90 = v88 + v61; // 0x60451
    g9 = v90;
    int32_t v91; // 0x6048a
    if (v90 > v89) {
        // 0x60498
        *v87 = v89;
        *(char *)(g4 + 16) = 1;
        g4 = 0;
        v91 = 0;
    } else {
        int32_t v92 = *(int32_t *)v86; // 0x60457
        g8 = v92;
        int32_t v93 = v88 / 32; // 0x6045b
        g10 = v93;
        g6 = *(int32_t *)(v92 + 4 * v93);
        *v87 = v90;
        uint32_t v94 = g9; // 0x60464
        int32_t v95 = (v94 - 1) / 32; // 0x60467
        g4 = v95;
        int32_t v96 = g6; // 0x6046a
        uint32_t v97 = g7 & (int32_t)&g862 & 31; // 0x6046a
        int32_t v98; // 0x6046a
        if (v97 != 0) {
            // bb82
            v98 = v96 >> v97;
            g6 = v98;
        } else {
            v98 = v96;
        }
        int32_t v99 = g10; // 0x6046c
        if (v99 == v95) {
            // 0x604a3
            g10 = v61;
            g4 = v98;
            int32_t v100 = *(int32_t *)(4 * v61 + (int32_t)&g656) & v98; // 0x604a8
            g4 = v100;
            v91 = v100;
        } else {
            int32_t v101 = *(int32_t *)(4 * v99 + 4 + g8); // 0x60470
            g4 = v101;
            int32_t v102 = v94 % 32; // 0x60474
            g9 = v102;
            g7 = v61;
            int32_t v103 = *(int32_t *)(4 * v102 + (int32_t)&g656) & v101; // 0x6047a
            g4 = v103;
            int32_t v104 = v61 - v102; // 0x60481
            g7 = v104;
            uint32_t v105 = v104 & (int32_t)&g862 & 31; // 0x60483
            int32_t v106; // 0x60483
            if (v105 != 0) {
                // bb85
                v106 = v103 << v105;
                g4 = v106;
            } else {
                v106 = v103;
            }
            int32_t v107 = v106 | v98; // 0x60485
            g4 = v107;
            v91 = v107;
        }
    }
    // 0x60487
    *(char *)v62 = (char)v91;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return g4;
}

// Address range: 0x604c0 - 0x60592
float80_t function_604c0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x604c9
    g4 = a1;
    int32_t v2 = g10; // 0x604cf
    int32_t v3 = g8; // 0x604d2
    g6 = a2;
    int32_t v4 = a2 % 32; // 0x604d8
    g7 = v4;
    int32_t v5 = *(int32_t *)(4 * v4 + (int32_t)&g299); // 0x604db
    int128_t v6 = __asm_cvtsi2ss(v5); // 0x604db
    int32_t v7 = g4; // 0x604e4
    int32_t * v8 = (int32_t *)(v7 + 12); // 0x604e4
    int32_t v9 = *v8; // 0x604e4
    g7 = v9;
    int32_t v10 = *(int32_t *)(v7 + 8); // 0x604e7
    g10 = v10;
    int32_t v11 = g6 + v9; // 0x604ea
    g6 = v11;
    int128_t v12; // xmm1
    if (v11 > v10) {
        // 0x60570
        *v8 = v10;
        int128_t v13 = v12; // 0x60573
        v12 = __asm_xorpd(v13, v13);
        *(char *)(g4 + 16) = 1;
    } else {
        int32_t v14 = *(int32_t *)v7; // 0x604f4
        g10 = v14;
        int32_t v15 = v9 / 32; // 0x604f8
        g9 = v15;
        int32_t v16 = 4 * v15; // 0x60501
        g10 = *(int32_t *)(v14 + v16);
        *v8 = v11;
        uint32_t v17 = g6; // 0x60507
        int32_t v18 = (v17 - 1) / 32; // 0x6050a
        g4 = v18;
        int32_t v19 = g10; // 0x6050d
        uint32_t v20 = g7 & (int32_t)&g862 & 31; // 0x6050d
        int32_t v21; // 0x6050d
        if (v20 != 0) {
            // bb
            v21 = v19 >> v20;
            g10 = v21;
        } else {
            v21 = v19;
        }
        // bb258
        int32_t v22; // 0x60589
        if (g9 == v18) {
            if (a2 != 32) {
                // 0x60586
                g4 = a2;
                v22 = *(int32_t *)(4 * a2 + (int32_t)&g656) & v21;
                g10 = v22;
            } else {
                v22 = v21;
            }
        } else {
            // 0x60513
            g9 = v15;
            int32_t v23 = v17 % 32; // 0x60516
            g6 = v23;
            g8 = v14;
            int32_t v24 = *(int32_t *)(v16 + 4 + v14); // 0x6051c
            g4 = v24;
            g9 = a2;
            int32_t v25 = *(int32_t *)(4 * v23 + (int32_t)&g656) & v24; // 0x60523
            g4 = v25;
            int32_t v26 = a2 - v23; // 0x6052a
            g9 = v26;
            g7 = v26;
            uint32_t v27 = v26 & (int32_t)&g862 & 31; // 0x6052e
            int32_t v28; // 0x6052e
            if (v27 != 0) {
                // bb260
                v28 = v25 << v27;
                g4 = v28;
            } else {
                v28 = v25;
            }
            int32_t v29 = v28 | v21; // 0x60530
            g10 = v29;
            v22 = v29;
        }
        int128_t v30 = __asm_cvtsi2ss(v22); // 0x60532
        v12 = __asm_cvtps2pd(__asm_unpcklps(v30, v30));
    }
    int128_t v31 = __asm_movsd_1649(0x4076800000000000); // 0x6053c
    int128_t v32 = __asm_cvtps2pd(__asm_unpcklps(v6, v6)); // 0x60547
    g6 = v1;
    g10 = v2;
    g8 = v3;
    int128_t v33 = __asm_mulsd(__asm_divsd(v31, v32), v12); // 0x60557
    int128_t v34 = __asm_cvtpd2ps(__asm_unpcklpd(v33, v33)); // 0x6055f
    return __asm_movss_1646(v34);
}

// Address range: 0x605a0 - 0x6068d
int32_t function_605a0(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x605a3
    int32_t v2 = g10; // 0x605a4
    int32_t v3 = g6; // 0x605a5
    g9 = a1;
    g7 = a2;
    int32_t v4 = *(int32_t *)a1; // 0x605af
    g4 = v4;
    int32_t v5 = *(int32_t *)(a1 + 4); // 0x605b1
    g8 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x605ba
    g4 = v6;
    int32_t v7 = *(int32_t *)(a1 + 12); // 0x605c3
    g8 = v7;
    int32_t v8 = a1 + 16; // 0x605cc
    int32_t v9 = *(int32_t *)v8; // 0x605cc
    g4 = v9;
    int32_t v10 = *(int32_t *)(a1 + 20); // 0x605d8
    g4 = v10;
    int32_t v11 = (int32_t)*(char *)v8; // 0x605e1
    g4 = v11;
    g4 = 0;
    int32_t v12; // 0x6065a
    if (a2 >= 1) {
        // 0x605f5
        g6 = v7;
        g10 = 0;
        int32_t v13 = a1; // 0x60622
        int32_t v14 = 0; // 0x60648
        int32_t v15 = v7; // 0x6061a
        while (true) {
            int32_t v16; // 0x60638
            if (v6 > v15) {
                // 0x60600
                int32_t v17; // 0x60638
                if (*(char *)(v13 + 16) == 0) {
                    // 0x60606
                    g8 = v4;
                    int32_t v18 = v15 / 8; // 0x6060b
                    g7 = v18;
                    g8 = 1;
                    int32_t v19 = v15 + 1; // 0x6061c
                    g6 = v19;
                    g7 = v15 % 8;
                    *(int32_t *)(v13 + 12) = v19;
                    int32_t v20 = g8; // 0x60625
                    uint32_t v21 = g7 & (int32_t)&g862 & 31; // 0x60625
                    int32_t v22; // 0x60625
                    if (v21 != 0) {
                        // bb
                        v22 = v20 << v21;
                        g8 = v22;
                    } else {
                        v22 = v20;
                    }
                    int32_t v23 = g10;
                    if (((int32_t)*(char *)(v18 + v4) & v22) != 0) {
                        int32_t v24 = v23 % 32; // 0x6062e
                        g7 = v24;
                        g4 |= *(int32_t *)(4 * v24 + (int32_t)&g299);
                        v17 = v23;
                    } else {
                        v17 = v23;
                    }
                } else {
                    v17 = v14;
                }
                // 0x60638
                v16 = v17 + 1;
                g10 = v16;
                if (v16 == a2) {
                    // break -> 0x60654
                    break;
                }
            } else {
                // 0x60648
                g10 = v14 + 1;
                *(char *)(v13 + 16) = 1;
                int32_t v25 = g10; // 0x6064f
                if (v25 == a2) {
                    // break -> 0x60654
                    break;
                }
                v16 = v25;
            }
            int32_t v26 = g9; // 0x60640
            int32_t v27 = *(int32_t *)(v26 + 12); // 0x60640
            g6 = v27;
            v13 = v26;
            v14 = v16;
            v15 = v27;
        }
        // 0x60654
        v12 = g9;
    } else {
        v12 = a1;
    }
    // 0x60654
    g7 = v9;
    *(int32_t *)v12 = v4;
    g8 = v5;
    *(int32_t *)(g9 + 16) = g7;
    g7 = v11;
    *(int32_t *)(g9 + 4) = g8;
    g8 = v6;
    *(char *)(g9 + 16) = (char)g7;
    g7 = (int32_t)*(char *)(a1 + 17);
    *(int32_t *)(g9 + 8) = g8;
    g8 = v7;
    *(char *)(g9 + 17) = (char)g7;
    *(int32_t *)(g9 + 12) = g8;
    *(int32_t *)(g9 + 20) = v10;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x60690 - 0x60782
int32_t function_60690(int32_t a1, int32_t a2, int32_t a3) {
    // 0x60690
    g9 = a1;
    int32_t v1 = g10; // 0x60699
    g10 = a2;
    int32_t v2 = g6; // 0x6069f
    int32_t v3 = g8; // 0x606a2
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x606a5
    int32_t v5 = *v4; // 0x606a5
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x606a8
    g4 = v6;
    int32_t v7 = a2 - 1; // 0x606ab
    g10 = v7;
    int32_t v8 = v5 + v7; // 0x606b3
    g6 = v8;
    if (v8 > v6) {
        // 0x60750
        *v4 = v6;
        g4 = 0;
    } else {
        int32_t v9 = *(int32_t *)a1; // 0x606c0
        g8 = v9;
        int32_t v10 = v5 / 32; // 0x606c4
        g10 = v10;
        int32_t v11 = 4 * v10; // 0x606ca
        g4 = *(int32_t *)(v9 + v11);
        *v4 = v8;
        int32_t v12 = g4; // 0x606d3
        uint32_t v13 = g7 & (int32_t)&g862 & 31; // 0x606d3
        int32_t v14; // 0x606d3
        if (v13 != 0) {
            // bb
            v14 = v12 >> v13;
            g4 = v14;
        } else {
            v14 = v12;
        }
        int32_t v15 = g6; // 0x606d5
        int32_t v16 = (v15 - 1) / 32; // 0x606d8
        g7 = v16;
        int32_t result; // 0x60779
        if (g10 == v16) {
            if (a2 != 33) {
                // 0x60776
                g10 = v7;
                result = *(int32_t *)(4 * v7 + (int32_t)&g656) & v14;
                g4 = result;
            } else {
                result = v14;
            }
        } else {
            // 0x606e3
            g8 = v10;
            g10 = v9;
            int32_t v17 = v15 % 32; // 0x606eb
            g7 = v17;
            int32_t v18 = *(int32_t *)(v11 + 4 + v9); // 0x606ee
            g8 = v18;
            int32_t v19 = *(int32_t *)(4 * v17 + (int32_t)&g656); // 0x606f2
            g10 = v19;
            int32_t v20 = v19 & v18; // 0x606f9
            int32_t v21 = v7 - v17; // 0x60701
            g8 = v21;
            g7 = v21;
            uint32_t v22 = v21 & (int32_t)&g862 & 31; // 0x60705
            int32_t v23;
            if (v22 != 0) {
                // bb22
                v23 = v20 << v22;
            } else {
                v23 = v20;
            }
            int32_t v24 = v23 | v14; // 0x60708
            g4 = v24;
            result = v24;
        }
        // 0x6070b
        if (v15 < v6) {
            int32_t v25 = g9; // 0x60710
            if (*(char *)(v25 + 16) != 0) {
                // 0x6073e
                g6 = v2;
                g10 = v1;
                g8 = v3;
                return result;
            }
            int32_t v26 = *(int32_t *)v25; // 0x60716
            g8 = v26;
            int32_t v27 = v15 / 8; // 0x6071a
            g7 = v27;
            g8 = (int32_t)*(char *)(v26 + v27);
            int32_t v28 = v15 + 1; // 0x60723
            g6 = v28;
            g7 = v15 % 8;
            *(int32_t *)(v25 + 12) = v28;
            int32_t result2; // 0x6074a
            if ((1 << g7 % 32 & g8) == 0) {
                // 0x60716
                result2 = g4;
            } else {
                int32_t v29 = v7 % 32; // 0x60734
                g10 = v29;
                int32_t v30 = g4 - *(int32_t *)(4 * v29 + (int32_t)&g299); // 0x60737
                g4 = v30;
                result2 = v30;
            }
            // 0x6073e
            g6 = v2;
            g10 = v1;
            g8 = v3;
            return result2;
        }
    }
    // 0x60755
    *(char *)(g9 + 16) = 1;
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return g4;
}

// Address range: 0x60790 - 0x609be
int32_t function_60790(int32_t a1) {
    // 0x60790
    g9 = a1;
    int32_t v1 = g10; // 0x60799
    int32_t v2 = g6; // 0x6079c
    int32_t v3 = g8; // 0x6079f
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x607a2
    int32_t v5 = *v4; // 0x607a2
    g6 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x607a5
    g8 = v6;
    int32_t v7 = v5 + 6; // 0x607a8
    g10 = v7;
    if (v7 > v6) {
        // 0x60828
        *v4 = v6;
        g4 = 0;
        *(char *)(g9 + 16) = 1;
        g6 = v2;
        g10 = v1;
        g8 = v3;
        return g4;
    }
    int32_t v8 = *(int32_t *)a1; // 0x607af
    g7 = v8;
    int32_t v9 = v5 / 32; // 0x607b3
    g4 = v9;
    g7 = *(int32_t *)(v8 + 4 * v9);
    *v4 = v7;
    int32_t v10 = g7; // 0x607bf
    int32_t v11 = g6; // 0x607c2
    g7 = v11;
    uint32_t v12 = v11 & (int32_t)&g862 & 31; // 0x607c4
    int32_t v13;
    if (v12 != 0) {
        // bb
        v13 = v10 >> v12;
    } else {
        v13 = v10;
    }
    int32_t v14 = (v11 + 5) / 32; // 0x607ca
    g7 = v14;
    int32_t v15 = g4; // 0x607cd
    uint32_t result; // 0x608d0
    if (v15 == v14) {
        // 0x60930
        g4 = v13;
        result = g659 & v13;
    } else {
        int32_t v16 = g10 % 32; // 0x607d7
        g7 = v8;
        int32_t v17 = *(int32_t *)(v8 + 4 + 4 * v15); // 0x607e0
        g4 = v17;
        g7 = v16;
        int32_t v18 = *(int32_t *)(4 * v16 + (int32_t)&g656) & v17; // 0x607e7
        g4 = v18;
        int32_t v19 = 6 - v16; // 0x607f3
        g7 = v19;
        uint32_t v20 = v19 & (int32_t)&g862 & 31; // 0x607f6
        int32_t v21; // 0x607f6
        if (v20 != 0) {
            // bb264
            v21 = v18 << v20;
            g4 = v21;
        } else {
            v21 = v18;
        }
        // bb266
        result = v21 | v13;
    }
    // 0x607fb
    g4 = result;
    int32_t v22 = result & 48; // 0x607fd
    g7 = v22;
    int32_t v23;
    int32_t v24;
    int32_t v25; // 0x608d9
    int32_t v26; // 0x6098b
    if (v22 == 32) {
        int32_t v27 = result % 16; // 0x608d0
        int32_t v28 = v11 + 14; // 0x608d6
        g4 = v28;
        v25 = g8;
        if (v25 < v28) {
            v23 = v27;
            goto lab_0x608b1;
        } else {
            // 0x608dd
            g7 = v8;
            int32_t v29 = g10 / 32; // 0x608e5
            g8 = v29;
            g6 = (v11 + 13) / 32;
            int32_t v30 = 4 * v29; // 0x608ee
            g7 = *(int32_t *)(v30 + v8);
            *(int32_t *)(g9 + 12) = v28;
            int32_t v31 = g7; // 0x608f4
            int32_t v32 = g10; // 0x608f7
            g7 = v32;
            uint32_t v33 = v32 & (int32_t)&g862 & 31; // 0x608f9
            int32_t v34; // 0x60988
            if (v33 != 0) {
                // bb274
                v34 = v31 >> v33;
            } else {
                v34 = v31;
            }
            // bb275
            if (g8 == g6) {
                // 0x60988
                v26 = g660 & v34;
                g9 = v26;
                v24 = v27;
            } else {
                // 0x60904
                g6 = v29;
                int32_t v35 = g4 % 32; // 0x60907
                g4 = v35;
                g8 = v8;
                int32_t v36 = 8 - v35; // 0x60912
                g7 = v36;
                int32_t v37 = *(int32_t *)(v8 + 4 + v30); // 0x60914
                g9 = v37;
                int32_t v38 = *(int32_t *)(4 * v35 + (int32_t)&g656) & v37; // 0x60918
                uint32_t v39 = v36 & (int32_t)&g862 & 31; // 0x6091f
                int32_t v40; // 0x60921
                if (v39 != 0) {
                    // bb276
                    v40 = v38 << v39;
                } else {
                    v40 = v38;
                }
                int32_t v41 = v40 | v34; // 0x60921
                g9 = v41;
                v26 = v41;
                v24 = v27;
            }
            goto lab_0x60924;
        }
    } else {
        if (v22 == 48) {
            int32_t v42 = result % 16; // 0x608a0
            int32_t v43 = v11 + 34; // 0x608a6
            g4 = v43;
            int32_t v44 = g8; // 0x608a9
            if (v44 < v43) {
                v25 = v44;
                v23 = v42;
                goto lab_0x608b1;
            } else {
                // 0x60940
                g7 = v8;
                int32_t v45 = g10 / 32; // 0x60948
                g8 = v45;
                g6 = (v11 + 33) / 32;
                int32_t v46 = 4 * v45; // 0x60951
                g7 = *(int32_t *)(v46 + v8);
                *(int32_t *)(g9 + 12) = v43;
                int32_t v47 = g7; // 0x60957
                int32_t v48 = g10; // 0x6095a
                g7 = v48;
                uint32_t v49 = v48 & (int32_t)&g862 & 31; // 0x6095c
                int32_t v50; // 0x609b0
                if (v49 != 0) {
                    // bb281
                    v50 = v47 >> v49;
                } else {
                    v50 = v47;
                }
                // bb282
                if (g8 == g6) {
                    int32_t v51 = g664 & v50; // 0x609b3
                    g9 = v51;
                    v26 = v51;
                    v24 = v42;
                } else {
                    // 0x60963
                    g6 = v45;
                    int32_t v52 = g4 % 32; // 0x60966
                    g4 = v52;
                    g8 = v8;
                    int32_t v53 = 28 - v52; // 0x60971
                    g7 = v53;
                    int32_t v54 = *(int32_t *)(v8 + 4 + v46); // 0x60973
                    g9 = v54;
                    int32_t v55 = *(int32_t *)(4 * v52 + (int32_t)&g656) & v54; // 0x60977
                    uint32_t v56 = v53 & (int32_t)&g862 & 31; // 0x6097e
                    int32_t v57; // 0x60980
                    if (v56 != 0) {
                        // bb283
                        v57 = v55 << v56;
                    } else {
                        v57 = v55;
                    }
                    int32_t v58 = v57 | v50; // 0x60980
                    g9 = v58;
                    v26 = v58;
                    v24 = v42;
                }
                goto lab_0x60924;
            }
        } else {
            if (v22 != 16) {
                // 0x60817
                g6 = v2;
                g10 = v1;
                g8 = v3;
                return result;
            }
            int32_t v59 = result % 16; // 0x60840
            int32_t v60 = v11 + 10; // 0x60846
            g4 = v60;
            int32_t v61 = g8; // 0x60849
            if (v61 < v60) {
                v25 = v61;
                v23 = v59;
                goto lab_0x608b1;
            } else {
                // 0x6084d
                g7 = v8;
                int32_t v62 = g10 / 32; // 0x60855
                g8 = v62;
                g6 = (v11 + 9) / 32;
                int32_t v63 = 4 * v62; // 0x6085e
                g7 = *(int32_t *)(v63 + v8);
                *(int32_t *)(g9 + 12) = v60;
                int32_t v64 = g7; // 0x60864
                int32_t v65 = g10; // 0x60867
                g7 = v65;
                uint32_t v66 = v65 & (int32_t)&g862 & 31; // 0x60869
                int32_t v67; // 0x60998
                if (v66 != 0) {
                    // bb268
                    v67 = v64 >> v66;
                } else {
                    v67 = v64;
                }
                // bb269
                if (g8 == g6) {
                    int32_t v68 = g657 & v67; // 0x6099b
                    g9 = v68;
                    v26 = v68;
                    v24 = v59;
                } else {
                    // 0x60874
                    g6 = v62;
                    int32_t v69 = g4 % 32; // 0x60877
                    g4 = v69;
                    g8 = v8;
                    int32_t v70 = 4 - v69; // 0x60882
                    g7 = v70;
                    int32_t v71 = *(int32_t *)(v8 + 4 + v63); // 0x60884
                    g9 = v71;
                    int32_t v72 = *(int32_t *)(4 * v69 + (int32_t)&g656) & v71; // 0x60888
                    uint32_t v73 = v70 & (int32_t)&g862 & 31; // 0x6088f
                    int32_t v74; // 0x60891
                    if (v73 != 0) {
                        // bb270
                        v74 = v72 << v73;
                    } else {
                        v74 = v72;
                    }
                    int32_t v75 = v74 | v67; // 0x60891
                    g9 = v75;
                    v26 = v75;
                    v24 = v59;
                }
                goto lab_0x60924;
            }
        }
    }
  lab_0x608b1:
    // 0x608b1
    *(int32_t *)(g9 + 12) = v25;
    g4 = 0;
    *(char *)(g9 + 16) = 1;
    int32_t v76 = g4; // 0x608ba
    int32_t v77 = v23;
    goto lab_0x608ba;
  lab_0x608ba:;
    int32_t result2 = v77 | v76; // 0x608ba
    g4 = result2;
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return result2;
  lab_0x60924:;
    int32_t v78 = 16 * v26; // 0x60926
    g4 = v78;
    v76 = v78;
    v77 = v24;
    goto lab_0x608ba;
}

// Address range: 0x609c0 - 0x60a86
int32_t function_609c0(int32_t a1, int32_t a2, char a3) {
    int32_t v1 = g6; // 0x609ca
    int32_t v2 = g10; // 0x609cd
    g9 = a1;
    int32_t v3 = g8; // 0x609d3
    g6 = a2;
    if (a3 != 0) {
        // 0x60a60
        g6 = v1;
        int32_t v4; // ebp
        g5 = v4;
        int32_t result = function_60690(v1, v2, v3); // 0x60a6c
        g4 = result;
        return result;
    }
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x609df
    int32_t v6 = *v5; // 0x609df
    g7 = v6;
    int32_t v7 = *(int32_t *)(a1 + 8); // 0x609e2
    g4 = v7;
    int32_t v8 = v6 + a2; // 0x609ea
    g10 = v8;
    if (v8 > v7) {
        // 0x60a40
        *v5 = v7;
        g4 = 0;
        *(char *)(g9 + 16) = 1;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return g4;
    }
    // 0x609f0
    g8 = v6;
    int32_t v9 = *(int32_t *)a1; // 0x609f3
    g4 = v9;
    g7 = v6 % 256;
    int32_t v10 = v6 / 32; // 0x609f9
    g8 = v10;
    g4 = *(int32_t *)(v9 + 4 * v10);
    *v5 = v8;
    uint32_t v11 = g10; // 0x60a05
    int32_t v12 = (v11 - 1) / 32; // 0x60a08
    g9 = v12;
    int32_t v13 = g8; // 0x60a0b
    int32_t v14 = g4; // 0x60a0e
    uint32_t v15 = g7 & (int32_t)&g862 & 31; // 0x60a0e
    int32_t v16; // 0x60a0e
    if (v15 != 0) {
        // bb
        v16 = v14 >> v15;
        g4 = v16;
    } else {
        v16 = v14;
    }
    if (v13 == v12) {
        int32_t v17 = g6; // 0x60a78
        int32_t result2; // 0x60a7d
        if (v17 != 32) {
            // 0x60a7d
            result2 = *(int32_t *)(4 * v17 + (int32_t)&g656) & v16;
            g4 = result2;
        } else {
            result2 = v16;
        }
        // 0x60a30
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result2;
    }
    // 0x60a14
    g7 = v9;
    int32_t v18 = v11 % 32; // 0x60a17
    g10 = v18;
    int32_t v19 = *(int32_t *)(v9 + 4 + 4 * v13); // 0x60a1d
    g9 = v19;
    int32_t v20 = g6 - v18; // 0x60a23
    g7 = v20;
    int32_t v21 = *(int32_t *)(4 * v18 + (int32_t)&g656) & v19; // 0x60a25
    uint32_t v22 = v20 & (int32_t)&g862 & 31; // 0x60a2c
    int32_t v23; // 0x60a2c
    if (v22 != 0) {
        // bb244
        v23 = v21 << v22;
    } else {
        v23 = v21;
    }
    // bb246
    g9 = v23;
    int32_t result3 = v23 | v16; // 0x60a2e
    g4 = result3;
    // 0x60a30
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result3;
}

// Address range: 0x60a90 - 0x60d2a
int32_t function_60a90(int32_t a1) {
    int32_t v1 = g8; // 0x60a93
    int32_t v2 = g10; // 0x60a94
    int32_t v3 = g6; // 0x60a95
    g6 = 0;
    g4 = a1;
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x60a9e
    int32_t v5 = *v4; // 0x60a9e
    g9 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x60aa1
    g8 = v6;
    int32_t v7;
    int32_t v8; // 0x60b32
    unsigned char v9; // 0x60aac
    if (v5 < v6) {
        // 0x60aac
        v9 = *(char *)(a1 + 16);
        g7 = v9;
        if (v9 != 0) {
            // 0x60d23
            v7 = 0;
            goto lab_0x60b10;
        } else {
            int32_t v10 = *(int32_t *)a1; // 0x60abb
            g6 = v10;
            int32_t v11 = v5 / 8; // 0x60abf
            g7 = v11;
            g10 = (int32_t)*(char *)(v10 + v11);
            g7 = v5 % 8;
            g6 = 1;
            int32_t v12 = v5 + 1; // 0x60ad3
            g9 = v12;
            uint32_t v13 = v5 & (int32_t)&g862 & 7; // 0x60ad6
            if (v13 != 0) {
                // bb
                g6 = 1 << v13;
            }
            // bb60
            *v4 = v12;
            int32_t v14 = g9; // 0x60ae0
            g6 &= (int32_t)&g862 & -256;
            if (g8 > v14) {
                // 0x60ae7
                g10 = v10;
                int32_t v15 = v14 / 8; // 0x60aec
                g7 = v15;
                int32_t v16 = (int32_t)*(char *)(v15 + v10); // 0x60aef
                g10 = 1;
                g7 = v14 % 8;
                *(int32_t *)(g4 + 12) = v14 + 1;
                g9 = 0;
                int32_t v17 = g10; // 0x60b08
                uint32_t v18 = g7 & (int32_t)&g862 & 31; // 0x60b08
                int32_t v19; // 0x60b08
                if (v18 != 0) {
                    // bb61
                    v19 = v17 << v18;
                    g10 = v19;
                } else {
                    v19 = v17;
                }
                // bb63
                v7 = (v19 & v16) != 0;
                goto lab_0x60b10;
            } else {
                // .dec_label_pc_60b30_crit_edge
                v8 = g4;
                goto lab_0x60b30;
            }
        }
    } else {
        v8 = a1;
        goto lab_0x60b30;
    }
  lab_0x60b30:
    // 0x60b30
    g9 = 0;
    *(char *)(v8 + 16) = 1;
    int128_t v20 = g878; // 0x60b36
    int128_t v21 = __asm_xorps(v20, v20); // 0x60b36
    g878 = v21;
    int32_t v22 = g6; // 0x60b3f
    int32_t v23 = v22 | g9; // 0x60b3f
    g7 = v23;
    if (v23 == 0) {
        goto lab_0x60b19;
    } else {
        v9 = 1;
        goto lab_0x60b43;
    }
  lab_0x60b19:
    // 0x60b19
    g13--;
    g868 = __asm_movss_1646(v21);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x60b43:;
    int32_t v24 = g4; // 0x60b43
    int32_t * v25 = (int32_t *)(v24 + 12); // 0x60b43
    int32_t v26 = *v25; // 0x60b43
    g10 = v26;
    if (g8 > v26) {
        // 0x60b51
        int32_t v27;
        int32_t v28; // 0x60b8a
        if (v9 != 0) {
            // 0x60d1c
            v28 = v22;
            v27 = 0;
        } else {
            // 0x60b5b
            g7 = v26;
            int32_t v29 = *(int32_t *)v24; // 0x60b5e
            g10 = v29;
            int32_t v30 = v26 / 8; // 0x60b60
            g7 = v30;
            g10 = 1;
            g7 = v26 % 8;
            uint32_t v31 = v26 & (int32_t)&g862 & 7; // 0x60b75
            if (v31 != 0) {
                // bb65
                g10 = 1 << v31;
            }
            // bb66
            *v25 = v26 + 1;
            int32_t v32 = (g10 & (int32_t)*(char *)(v29 + v30)) != 0; // 0x60b85
            g7 = v32;
            v28 = g6;
            v27 = v32;
        }
        // 0x60b8a
        g10 = v27;
        int128_t v33 = g879; // 0x60b8c
        g879 = __asm_xorpd(v33, v33);
        if (v28 != 0) {
            goto lab_0x60bde;
        } else {
            goto lab_0x60b92;
        }
    } else {
        // 0x60bd0
        g10 = 0;
        *(char *)(v24 + 16) = 1;
        int128_t v34 = g879; // 0x60bd8
        g879 = __asm_xorpd(v34, v34);
        if (v22 == 0) {
            goto lab_0x60b92;
        } else {
            goto lab_0x60bde;
        }
    }
  lab_0x60b10:
    // 0x60b10
    g9 = v7;
    g7 = v7;
    int128_t v35 = g878; // 0x60b12
    int128_t v36 = __asm_xorps(v35, v35); // 0x60b12
    g878 = v36;
    int32_t v37 = g6; // 0x60b15
    int32_t v38 = v37 | g7; // 0x60b15
    g7 = v38;
    if (v38 != 0) {
        v22 = v37;
        goto lab_0x60b43;
    } else {
        v21 = v36;
        goto lab_0x60b19;
    }
  lab_0x60bde:;
    int32_t v39 = g4; // 0x60bde
    int32_t * v40 = (int32_t *)(v39 + 12); // 0x60bde
    uint32_t v41 = *v40; // 0x60bde
    int32_t v42 = v41 + 14; // 0x60be4
    g7 = v42;
    int32_t v43 = g8; // 0x60be7
    if (v43 < v42) {
        // 0x60d08
        *v40 = v43;
        g879 = __asm_movsd_1649(*(int64_t *)&g176);
        *(char *)(g4 + 16) = 1;
    } else {
        int32_t v44 = v41 / 32; // 0x60bf5
        g6 = v44;
        int32_t v45 = *(int32_t *)v39; // 0x60bfb
        g6 = v45;
        int32_t v46 = 0x1000000 * v44 / 0x1000000; // 0x60bfd
        g7 = v46;
        int32_t v47 = 4 * v46; // 0x60c03
        uint32_t v48 = *(int32_t *)(v45 + v47); // 0x60c03
        g6 = v42;
        g7 = v41 % 256;
        *v40 = v42;
        uint32_t v49 = g7 & (int32_t)&g862 & 31; // 0x60c13
        int32_t v50;
        if (v49 != 0) {
            // bb68
            v50 = v48 >> v49;
        } else {
            v50 = v48;
        }
        int32_t v51 = (v41 + 13) / 32; // 0x60c1c
        g7 = v51;
        int32_t v52;
        if (v46 == v51) {
            // 0x60ce0
            g6 = v50;
            v52 = g662 & v50;
        } else {
            // 0x60c28
            g7 = v45;
            int32_t v53 = v42 % 32; // 0x60c2e
            g6 = v46;
            int32_t v54 = *(int32_t *)(v47 + 4 + v45); // 0x60c37
            g6 = v54;
            g7 = v53;
            int32_t v55 = *(int32_t *)(4 * v53 + (int32_t)&g656) & v54; // 0x60c45
            g6 = v55;
            int32_t v56 = 14 - v53; // 0x60c4c
            g7 = v56;
            uint32_t v57 = v56 & (int32_t)&g862 & 31; // 0x60c4f
            int32_t v58; // 0x60c4f
            if (v57 != 0) {
                // bb70
                v58 = v55 << v57;
                g6 = v58;
            } else {
                v58 = v55;
            }
            // bb72
            g7 = v50;
            v52 = v58 | v50;
        }
        int32_t v59 = 0x1000000 * v52 / 0x1000000 + 1; // 0x60c5c
        g6 = v59;
        g879 = __asm_cvtsi2sd(v59);
    }
    goto lab_0x60b92;
  lab_0x60b92:;
    int128_t v60 = g878; // 0x60b94
    int128_t v61 = __asm_xorpd(v60, v60); // 0x60b94
    int128_t v62; // 0x60b9e
    if (g9 != 0) {
        int32_t v63 = g4; // 0x60c70
        int32_t * v64 = (int32_t *)(v63 + 12); // 0x60c70
        int32_t v65 = *v64; // 0x60c70
        g7 = v65;
        int32_t v66 = v65 + 5; // 0x60c73
        g9 = v66;
        int32_t v67 = g8; // 0x60c76
        if (v66 > v67) {
            // 0x60cf8
            *v64 = v67;
            *(char *)(g4 + 16) = 1;
            v62 = v61;
        } else {
            int32_t v68 = *(int32_t *)v63; // 0x60c7a
            g8 = v68;
            int32_t v69 = v65 / 32; // 0x60c7e
            g6 = v69;
            g6 = *(int32_t *)(v68 + 4 * v69);
            *v64 = v66;
            g4 = g658;
            int32_t v70 = g8; // 0x60c8f
            int32_t v71 = g6; // 0x60c92
            int32_t v72 = g7; // 0x60c92
            uint32_t v73 = v72 & (int32_t)&g862 & 31; // 0x60c92
            int32_t v74; // 0x60c92
            if (v73 != 0) {
                // bb74
                v74 = v71 >> v73;
                g6 = v74;
            } else {
                v74 = v71;
            }
            int32_t v75 = (v72 + 4) / 32; // 0x60c97
            g7 = v75;
            int32_t v76 = v74 & g658; // 0x60c9a
            g4 = v76;
            int32_t v77 = 0x1000000 * v69 / 0x1000000; // 0x60c9f
            int32_t v78; // 0x60cc1
            if (v77 != v75) {
                // 0x60ca4
                g8 = v77;
                int32_t v79 = g9 % 32; // 0x60ca7
                g9 = v79;
                g6 = v70;
                int32_t v80 = 5 - v79; // 0x60cb2
                g7 = v80;
                int32_t v81 = *(int32_t *)(4 * v77 + 4 + v70); // 0x60cb4
                g4 = v81;
                int32_t v82 = *(int32_t *)(4 * v79 + (int32_t)&g656) & v81; // 0x60cb8
                g4 = v82;
                uint32_t v83 = v80 & (int32_t)&g862 & 31; // 0x60cbf
                int32_t v84; // 0x60cbf
                if (v83 != 0) {
                    // bb76
                    v84 = v82 << v83;
                    g4 = v84;
                } else {
                    v84 = v82;
                }
                // bb78
                v78 = v84 | v74;
                g4 = v78;
            } else {
                v78 = v76;
            }
            int128_t v85 = __asm_cvtsi2ss(v78); // 0x60cc4
            int128_t v86 = __asm_unpcklps(v85, v85); // 0x60cc8
            v62 = __asm_mulsd_1655(__asm_cvtps2pd(v86), 0x3fa0000000000000);
        }
    } else {
        v62 = v61;
    }
    int128_t v87 = __asm_addsd(v62, g879); // 0x60b9e
    int128_t v88 = __asm_cvtpd2ps(__asm_unpcklpd(v87, v87)); // 0x60ba8
    g878 = v88;
    if (g10 != 0) {
        int128_t v89 = __asm_movss((int32_t)g233); // 0x60bb2
        g879 = v89;
        int128_t v90 = __asm_xorps(g878, v89); // 0x60bba
        g878 = v90;
        g13--;
        g868 = __asm_movss_1646(v90);
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    v21 = v88;
    goto lab_0x60b19;
}

// Address range: 0x60d30 - 0x611bb
int32_t function_60d30(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x60d33
    int32_t v2 = g10; // 0x60d34
    int32_t v3 = g6; // 0x60d35
    g9 = a1;
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x60d3c
    g8 = v4;
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x60d3f
    int32_t v6 = *v5; // 0x60d3f
    g4 = v6;
    char * v7 = (char *)(a1 + 16); // 0x60d4d
    char v8;
    char v9;
    char v10;
    char v11;
    char v12;
    if (v6 < v4) {
        char v13 = *v7; // 0x60d4d
        g7 = v13;
        if (v13 != 0) {
            v9 = v13;
            goto lab_0x60e78;
        } else {
            int32_t v14 = *(int32_t *)a1; // 0x60d5c
            g8 = v14;
            g6 = 1;
            int32_t v15 = v6 / 8; // 0x60d65
            g7 = v15;
            g10 = (int32_t)*(char *)(v14 + v15);
            int32_t v16 = v6 + 1; // 0x60d6e
            g4 = v16;
            g7 = v6 % 8;
            *v5 = v16;
            int32_t v17 = g6; // 0x60d77
            uint32_t v18 = g7 & (int32_t)&g862 & 31; // 0x60d77
            int32_t v19; // 0x60d77
            if (v18 != 0) {
                // bb
                v19 = v17 << v18;
                g6 = v19;
            } else {
                v19 = v17;
            }
            char v20 = (g10 & v19) != 0; // 0x60d7b
            if (a2 == 2) {
                v10 = v13;
                v12 = v20;
                goto lab_0x60e86;
            } else {
                v8 = v13;
                v11 = v20;
                goto lab_0x60d89;
            }
        }
    } else {
        // 0x60e70
        *v7 = 1;
        v9 = 1;
        goto lab_0x60e78;
    }
  lab_0x60e78:
    // 0x60e78
    if (a2 != 2) {
        v8 = v9;
        v11 = 0;
        goto lab_0x60d89;
    } else {
        v10 = v9;
        v12 = 0;
        goto lab_0x60e86;
    }
  lab_0x60d89:;
    int32_t v21 = g4; // 0x60d89
    char v22;
    int32_t v23; // 0x60dc4
    char v24; // 0x60df8
    if (v4 > v21) {
        // 0x60d99
        if (v8 != 0) {
            v22 = 0;
            goto lab_0x60f76;
        } else {
            int32_t v25 = g9; // 0x60da3
            int32_t v26 = *(int32_t *)v25; // 0x60da3
            g8 = v26;
            g6 = 1;
            int32_t v27 = v21 / 8; // 0x60dac
            g7 = v27;
            g10 = (int32_t)*(char *)(v26 + v27);
            int32_t v28 = v21 + 1; // 0x60db5
            g4 = v28;
            g7 = v21 % 8;
            *(int32_t *)(v25 + 12) = v28;
            int32_t v29 = g6; // 0x60dbe
            uint32_t v30 = g7 & (int32_t)&g862 & 31; // 0x60dbe
            int32_t v31; // 0x60dbe
            if (v30 != 0) {
                // bb316
                v31 = v29 << v30;
                g6 = v31;
            } else {
                v31 = v29;
            }
            int32_t v32 = g10; // 0x60dc2
            v23 = (v32 & v31) != 0;
            g7 = v23;
            int32_t v33 = g4; // 0x60dc7
            if (v4 > v33) {
                // 0x60dd3
                g6 = 1;
                int32_t v34 = v33 / 8; // 0x60dda
                g7 = v34;
                g10 = (int32_t)*(char *)(g8 + v34);
                int32_t v35 = v33 + 1; // 0x60de3
                g4 = v35;
                g7 = v33 % 8;
                *(int32_t *)(g9 + 12) = v35;
                int32_t v36 = g6; // 0x60dec
                uint32_t v37 = g7 & (int32_t)&g862 & 31; // 0x60dec
                int32_t v38; // 0x60dec
                if (v37 != 0) {
                    // bb319
                    v38 = v36 << v37;
                    g6 = v38;
                } else {
                    v38 = v36;
                }
                int32_t v39 = g10; // 0x60df0
                g10 = v23;
                g7 = (v39 & v38) != 0;
                v24 = (v39 & v38) != 0;
                if ((v32 & v31) == 0) {
                    v22 = v24;
                    goto lab_0x60f76;
                } else {
                    goto lab_0x60e03;
                }
            } else {
                goto lab_0x60f60;
            }
        }
    } else {
        v23 = 0;
        goto lab_0x60f60;
    }
  lab_0x60e86:;
    uint32_t v40 = g4; // 0x60e86
    int128_t v41; // xmm0
    if (v4 <= v40) {
        // 0x610a8
        *(char *)(g9 + 16) = 1;
        __asm_movss_1646(__asm_xorps(v41, v41));
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x60e8f
    char v42;
    char v43;
    int32_t v44; // 0x61146
    if (v10 != 0) {
        int128_t v45 = v41; // 0x611b3
        v41 = __asm_xorps(v45, v45);
        goto lab_0x61026;
    } else {
        // 0x60e99
        g8 = *(int32_t *)g9;
        g7 = v40 / 8;
        g6 = v40 % 8;
        int128_t v46 = v41; // 0x60ea5
        __asm_xorps(v46, v46);
        g10 = (int32_t)*(char *)(g7 + g8);
        int32_t v47 = g4 + 1; // 0x60eac
        g7 = v47;
        *(int32_t *)(g9 + 12) = v47;
        if ((1 << g6 % 32 & g10) == 0) {
            goto lab_0x61026;
        } else {
            int32_t v48 = g7; // 0x60ebb
            if (v4 > v48) {
                // 0x60ec4
                g6 = v48;
                *(char *)(g9 + 16) = 0;
                uint32_t v49 = g7; // 0x60eca
                g7 = v49 % 8;
                int32_t v50 = g6 / 8; // 0x60ecd
                g6 = v50;
                g10 = (int32_t)*(char *)(g8 + v50);
                g6 = 1;
                uint32_t v51 = v49 & (int32_t)&g862 & 7; // 0x60ed9
                if (v51 != 0) {
                    // bb330
                    g6 = 1 << v51;
                }
                int32_t v52 = g4 + 2; // 0x60edb
                g7 = v52;
                g4 = 0;
                *(int32_t *)(g9 + 12) = v52;
                int32_t v53 = g10; // 0x60ee3
                int32_t v54 = g6; // 0x60ee3
                g4 = g4 & -256 | (int32_t)((v54 & v53) != 0);
                v43 = (v54 & v53) != 0;
            } else {
                // 0x610f0
                *(char *)(g9 + 16) = 1;
                v43 = 0;
            }
            int32_t v55 = g7; // 0x61100
            if (v12 == 0) {
                int32_t v56 = v55 + 14; // 0x61100
                g4 = v56;
                if (v4 < v56) {
                    // 0x61190
                    g4 = v4;
                    *(char *)(g9 + 16) = 1;
                    v41 = __asm_movss(0x3f800000);
                    *(int32_t *)(g9 + 12) = g4;
                    v42 = v43;
                    goto lab_0x61014;
                } else {
                    int32_t v57 = v55 / 32; // 0x6110e
                    g10 = v57;
                    g6 = *(int32_t *)(g8 + 4 * v57);
                    *(int32_t *)(g9 + 12) = v56;
                    g9 = g662;
                    int32_t v58 = g6; // 0x6111d
                    int32_t v59 = g7; // 0x6111d
                    uint32_t v60 = v59 & (int32_t)&g862 & 31; // 0x6111d
                    int32_t v61; // 0x6111d
                    if (v60 != 0) {
                        // bb351
                        v61 = v58 >> v60;
                        g6 = v61;
                    } else {
                        v61 = v58;
                    }
                    int32_t v62 = (v59 + 13) / 32; // 0x61122
                    g7 = v62;
                    int32_t v63 = v61 & g662; // 0x61125
                    g9 = v63;
                    int32_t v64 = g10; // 0x61127
                    if (v64 != v62) {
                        int32_t v65 = *(int32_t *)(4 * v64 + 4 + g8); // 0x6112f
                        g9 = v65;
                        int32_t v66 = g4 % 32; // 0x61133
                        g4 = v66;
                        int32_t v67 = 14 - v66; // 0x6113b
                        g7 = v67;
                        int32_t v68 = *(int32_t *)(4 * v66 + (int32_t)&g656) & v65; // 0x6113d
                        g9 = v68;
                        uint32_t v69 = v67 & (int32_t)&g862 & 31; // 0x61144
                        int32_t v70; // 0x61144
                        if (v69 != 0) {
                            // bb353
                            v70 = v68 << v69;
                            g9 = v70;
                        } else {
                            v70 = v68;
                        }
                        // bb355
                        v44 = v70 | v61;
                        g9 = v44;
                    } else {
                        v44 = v63;
                    }
                    goto lab_0x60f39;
                }
            } else {
                int32_t v71 = v55 + 11; // 0x60ef5
                g4 = v71;
                if (v4 < v71) {
                    // 0x61170
                    g8 = v4;
                    *(char *)(g9 + 16) = 1;
                    v41 = __asm_movss(0x3f800000);
                    *(int32_t *)(g9 + 12) = g8;
                    v42 = v43;
                    goto lab_0x61014;
                } else {
                    int32_t v72 = v55 / 32; // 0x60f03
                    g10 = v72;
                    g6 = *(int32_t *)(g8 + 4 * v72);
                    *(int32_t *)(g9 + 12) = v71;
                    g9 = g661;
                    int32_t v73 = g6; // 0x60f12
                    int32_t v74 = g7; // 0x60f12
                    uint32_t v75 = v74 & (int32_t)&g862 & 31; // 0x60f12
                    int32_t v76; // 0x60f12
                    if (v75 != 0) {
                        // bb332
                        v76 = v73 >> v75;
                        g6 = v76;
                    } else {
                        v76 = v73;
                    }
                    int32_t v77 = (v74 + 10) / 32; // 0x60f17
                    g7 = v77;
                    int32_t v78 = v76 & g661; // 0x60f1a
                    g9 = v78;
                    int32_t v79 = g10; // 0x60f1c
                    if (v79 != v77) {
                        int32_t v80 = *(int32_t *)(4 * v79 + 4 + g8); // 0x60f20
                        g9 = v80;
                        int32_t v81 = g4 % 32; // 0x60f24
                        g4 = v81;
                        int32_t v82 = 11 - v81; // 0x60f2c
                        g7 = v82;
                        int32_t v83 = *(int32_t *)(4 * v81 + (int32_t)&g656) & v80; // 0x60f2e
                        g9 = v83;
                        uint32_t v84 = v82 & (int32_t)&g862 & 31; // 0x60f35
                        int32_t v85; // 0x60f35
                        if (v84 != 0) {
                            // bb334
                            v85 = v83 << v84;
                            g9 = v85;
                        } else {
                            v85 = v83;
                        }
                        int32_t v86 = v85 | v76; // 0x60f37
                        g9 = v86;
                        v44 = v86;
                    } else {
                        v44 = v78;
                    }
                    goto lab_0x60f39;
                }
            }
        }
    }
  lab_0x60f60:
    // 0x60f60
    g10 = v23;
    *(char *)(g9 + 16) = 1;
    if (v23 != 0) {
        v24 = 0;
        goto lab_0x60e03;
    } else {
        v22 = 0;
        goto lab_0x60f76;
    }
  lab_0x60f76:;
    // 0x60f76
    int128_t v87; // xmm2
    int128_t v88 = v87; // 0x60f76
    v87 = __asm_xorpd(v88, v88);
    int32_t v89 = g4; // 0x60f9a
    char v90 = v22;
    goto lab_0x60f7a;
  lab_0x60e03:;
    int32_t v125 = g4; // 0x61050
    int32_t v119; // 0x61155
    if (v11 != 0) {
        int32_t v126 = v125 + 11; // 0x61050
        g6 = v126;
        if (v4 < v126) {
            goto lab_0x610c0;
        } else {
            int32_t v127 = g9; // 0x61058
            int32_t v128 = *(int32_t *)v127; // 0x61058
            g8 = v128;
            g7 = v125;
            int32_t v129 = v125 / 32; // 0x6105e
            g10 = v129;
            g4 = (v125 + 10) / 32;
            g8 = *(int32_t *)(v128 + 4 * v129);
            *(int32_t *)(v127 + 12) = v126;
            int32_t v130 = g8; // 0x61070
            uint32_t v131 = g7 & (int32_t)&g862 & 31; // 0x61070
            int32_t v132; // 0x61070
            if (v131 != 0) {
                // bb345
                v132 = v130 >> v131;
                g8 = v132;
            } else {
                v132 = v130;
            }
            int32_t v133 = g10; // 0x61072
            if (v133 == g4) {
                // 0x61150
                v119 = g661 & v132;
                g4 = v119;
            } else {
                // 0x6107a
                g7 = v128;
                int32_t v134 = g6 % 32; // 0x6107f
                g4 = v134;
                int32_t v135 = *(int32_t *)(v128 + 4 + 4 * v133); // 0x61085
                g4 = v135;
                g7 = v134;
                int32_t v136 = *(int32_t *)(4 * v134 + (int32_t)&g656) & v135; // 0x6108c
                g4 = v136;
                int32_t v137 = 11 - v134; // 0x61098
                g7 = v137;
                uint32_t v138 = v137 & (int32_t)&g862 & 31; // 0x6109b
                int32_t v139; // 0x6109b
                if (v138 != 0) {
                    // bb347
                    v139 = v136 << v138;
                    g4 = v139;
                } else {
                    v139 = v136;
                }
                int32_t v140 = v139 | v132; // 0x6109d
                g4 = v140;
                v119 = v140;
            }
            goto lab_0x60e60;
        }
    } else {
        int32_t v141 = v125 + 14; // 0x60e0d
        g6 = v141;
        if (v4 < v141) {
            goto lab_0x610c0;
        } else {
            int32_t v142 = g9; // 0x60e19
            int32_t v143 = *(int32_t *)v142; // 0x60e19
            g8 = v143;
            g7 = v125;
            int32_t v144 = v125 / 32; // 0x60e1f
            g10 = v144;
            g4 = (v125 + 13) / 32;
            g8 = *(int32_t *)(v143 + 4 * v144);
            *(int32_t *)(v142 + 12) = v141;
            int32_t v145; // 0x61165
            if ((g7 & (int32_t)&g862 & 31) != 0) {
                // bb323
                int32_t v146; // 0x60e31
                uint32_t v147; // 0x60e31
                int32_t v148 = v146 >> v147; // 0x60e31
                g8 = v148;
                v145 = v148;
            } else {
                v145 = g8;
            }
            int32_t v149 = g10; // 0x60e33
            if (v149 == g4) {
                int32_t v150 = g662 & v145; // 0x61165
                g4 = v150;
                v119 = v150;
            } else {
                // 0x60e3b
                g7 = v143;
                int32_t v151 = g6 % 32; // 0x60e40
                g4 = v151;
                int32_t v152 = *(int32_t *)(v143 + 4 + 4 * v149); // 0x60e46
                g4 = v152;
                g7 = v151;
                int32_t v153 = *(int32_t *)(4 * v151 + (int32_t)&g656) & v152; // 0x60e4d
                g4 = v153;
                int32_t v154 = 14 - v151; // 0x60e59
                g7 = v154;
                uint32_t v155 = v154 & (int32_t)&g862 & 31; // 0x60e5c
                int32_t v156; // 0x60e5c
                if (v155 != 0) {
                    // bb325
                    v156 = v153 << v155;
                    g4 = v156;
                } else {
                    v156 = v153;
                }
                int32_t v157 = v156 | v145; // 0x60e5e
                g4 = v157;
                v119 = v157;
            }
            goto lab_0x60e60;
        }
    }
  lab_0x61026:
    // 0x61026
    __asm_movss_1646(v41);
    int3_t v116; // fpu_stat_TOP
    v116--;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x60f7a:;
    int32_t v91 = a2 != 1 ? 5 : 3; // 0x60f8b
    g6 = v91;
    int32_t v92 = v89 + v91; // 0x60f8e
    g10 = v92;
    if (v4 < v92) {
        // 0x61040
        g8 = v4;
        *(char *)(g9 + 16) = 1;
        int128_t v93 = v41; // 0x61047
        v41 = __asm_xorpd(v93, v93);
        *(int32_t *)(g9 + 12) = g8;
    } else {
        int32_t v94 = v89 / 32; // 0x60f9c
        g8 = v94;
        int32_t v95 = g9; // 0x60fa2
        int32_t v96 = *(int32_t *)v95; // 0x60fa2
        g8 = v96;
        g7 = v94;
        int32_t v97 = 4 * v94; // 0x60faa
        g7 = *(int32_t *)(v96 + v97);
        *(int32_t *)(v95 + 12) = v92;
        int32_t v98 = g7; // 0x60fb0
        int32_t v99 = g4; // 0x60fb3
        g7 = v99;
        uint32_t v100 = v99 & (int32_t)&g862 & 31; // 0x60fb5
        int32_t v101;
        if (v100 != 0) {
            // bb338
            v101 = v98 >> v100;
        } else {
            v101 = v98;
        }
        uint32_t v102 = g10; // 0x60fb8
        int32_t v103 = (v102 - 1) / 32; // 0x60fbb
        g4 = v103;
        int32_t v104;
        if (v94 == v103) {
            // 0x610e0
            g4 = v101;
            int32_t v105 = *(int32_t *)(4 * g6 + (int32_t)&g656); // 0x610e3
            v104 = v105 & v101;
        } else {
            // 0x60fc7
            g8 = v94;
            int32_t v106 = v102 % 32; // 0x60fca
            g10 = v106;
            g9 = v96;
            int32_t v107 = g6 - v106; // 0x60fd2
            g7 = v107;
            int32_t v108 = *(int32_t *)(v97 + 4 + v96); // 0x60fd4
            g4 = v108;
            int32_t v109 = *(int32_t *)(4 * v106 + (int32_t)&g656) & v108; // 0x60fd8
            g4 = v109;
            uint32_t v110 = v107 & (int32_t)&g862 & 31; // 0x60fdf
            int32_t v111; // 0x60fdf
            if (v110 != 0) {
                // bb340
                v111 = v109 << v110;
                g4 = v111;
            } else {
                v111 = v109;
            }
            // bb342
            v104 = v111 | v101;
        }
        // 0x60fe4
        g4 = v104;
        int128_t v112 = __asm_cvtsi2ss(v104); // 0x60fe4
        v41 = __asm_cvtps2pd(__asm_unpcklps(v112, v112));
    }
    int128_t v113 = __asm_movsd_1649(0x3fa0000000000000); // 0x60ff2
    int128_t v114; // 0x61004
    if (a2 == 1) {
        // 0x60ffc
        v114 = __asm_movsd_1649(0x3fc0000000000000);
    } else {
        v114 = v113;
    }
    int128_t v115 = __asm_addsd(__asm_mulsd(v41, v114), v87); // 0x61008
    v41 = __asm_cvtpd2ps(__asm_unpcklpd(v115, v115));
    v42 = v90;
    goto lab_0x61014;
  lab_0x61014:
    // 0x61014
    g6 = v42;
    if (v42 != 0) {
        // 0x6101b
        v41 = __asm_xorps(v41, __asm_movss((int32_t)g233));
    }
    goto lab_0x61026;
  lab_0x610c0:
    // 0x610c0
    g8 = v4;
    *(char *)(g9 + 16) = 1;
    v87 = __asm_movsd_1649(*(int64_t *)&g176);
    *(int32_t *)(g9 + 12) = g8;
    int32_t v117 = g8; // 0x610d2
    g4 = v117;
    v89 = v117;
    v90 = v24;
    goto lab_0x60f7a;
  lab_0x60e60:;
    int32_t v118 = v119 + 1; // 0x60e60
    g4 = v118;
    v87 = __asm_cvtsi2sd(v118);
    int32_t v120 = g6; // 0x60e67
    g4 = v120;
    v89 = v120;
    v90 = v24;
    goto lab_0x60f7a;
  lab_0x60f39:;
    uint32_t v121 = v44 + 1; // 0x60f39
    g4 = v121 & (int32_t)&g863;
    int32_t v122 = v121 / 0x10000; // 0x60f3f
    g9 = v122;
    int128_t v123 = __asm_cvtsi2ss(v122); // 0x60f42
    int128_t v124 = __asm_cvtsi2ss(g4); // 0x60f46
    v41 = __asm_addss_1661(__asm_mulss_1654(v123, 0x47800000), v124);
    v42 = v43;
    goto lab_0x61014;
}

// Address range: 0x611c0 - 0x613d5
int32_t function_611c0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x611c3
    int32_t v2 = g10; // 0x611c4
    int32_t v3 = g6; // 0x611c5
    g4 = a1;
    g6 = a2;
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x611cf
    int32_t v5 = *v4; // 0x611cf
    g7 = v5;
    int32_t v6 = v5 + a2; // 0x611d2
    g6 = v6;
    int32_t v7 = *(int32_t *)(a1 + 8); // 0x61310
    int128_t v8; // 0x612d4
    int128_t v9; // xmm0
    if (a3 == 2) {
        // 0x61310
        g9 = v7;
        if (v6 <= v7) {
            int32_t v10 = *(int32_t *)a1; // 0x6131b
            g8 = v10;
            int32_t v11 = v5 / 32; // 0x6131f
            g10 = v11;
            g9 = *(int32_t *)(v10 + 4 * v11);
            *v4 = v6;
            uint32_t v12 = g6; // 0x61328
            int32_t v13 = (v12 - 1) / 32; // 0x6132b
            g4 = v13;
            int32_t v14 = g9; // 0x6132e
            uint32_t v15 = g7 & (int32_t)&g862 & 31; // 0x6132e
            int32_t v16; // 0x6132e
            if (v15 != 0) {
                // bb293
                v16 = v14 >> v15;
                g9 = v16;
            } else {
                v16 = v14;
            }
            int32_t v17 = g10; // 0x61330
            int32_t v18; // 0x613c9
            if (v17 == v13) {
                // 0x613c0
                if (a2 != 32) {
                    // 0x613c6
                    g4 = a2;
                    v18 = *(int32_t *)(4 * a2 + (int32_t)&g656) & v16;
                    g9 = v18;
                } else {
                    v18 = v16;
                }
            } else {
                int32_t v19 = *(int32_t *)(4 * v17 + 4 + g8); // 0x61338
                g4 = v19;
                int32_t v20 = v12 % 32; // 0x6133c
                g6 = v20;
                g7 = a2;
                int32_t v21 = *(int32_t *)(4 * v20 + (int32_t)&g656) & v19; // 0x61342
                g4 = v21;
                int32_t v22 = a2 - v20; // 0x61349
                g7 = v22;
                uint32_t v23 = v22 & (int32_t)&g862 & 31; // 0x6134b
                int32_t v24; // 0x6134b
                if (v23 != 0) {
                    // bb296
                    v24 = v21 << v23;
                    g4 = v24;
                } else {
                    v24 = v21;
                }
                int32_t v25 = v24 | v16; // 0x6134d
                g9 = v25;
                v18 = v25;
            }
            int32_t result = v18 & (int32_t)&g863; // 0x6134f
            g4 = result;
            int32_t v26 = v18 / 0x10000; // 0x61352
            g9 = v26;
            int128_t v27 = __asm_cvtsi2ss(v26); // 0x61355
            int128_t v28 = __asm_cvtsi2ss(result); // 0x61359
            int128_t v29 = __asm_mulss_1654(v27, 0x47800000); // 0x6135d
            __asm_movss_1646(__asm_addss_1661(v29, v28));
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        // 0x613b0
        *v4 = v7;
        int128_t v30 = v9; // 0x613b3
        v9 = __asm_xorps(v30, v30);
        *(char *)(g4 + 16) = 1;
        v8 = v9;
    } else {
        // 0x611de
        g10 = v7;
        int128_t v31; // xmm2
        if (v6 > v7) {
            // 0x612e8
            *v4 = v7;
            g6 = g10;
            int128_t v32 = v31; // 0x612ed
            v31 = __asm_xorpd(v32, v32);
            *(char *)(g4 + 16) = 1;
        } else {
            int32_t v33 = *(int32_t *)a1; // 0x611e9
            g8 = v33;
            int32_t v34 = v5 / 32; // 0x611ed
            g9 = v34;
            int32_t v35 = 4 * v34; // 0x611f3
            g9 = *(int32_t *)(v33 + v35);
            *v4 = v6;
            int32_t v36 = g9; // 0x611fc
            uint32_t v37 = g7 & (int32_t)&g862 & 31; // 0x611fc
            int32_t v38; // 0x611fc
            if (v37 != 0) {
                // bb
                v38 = v36 >> v37;
                g9 = v38;
            } else {
                v38 = v36;
            }
            uint32_t v39 = g6; // 0x611fe
            int32_t v40 = (v39 - 1) / 32; // 0x61204
            g7 = v40;
            int32_t v41; // 0x61394
            if (v34 == v40) {
                // 0x61380
                if (a2 != 32) {
                    // 0x6138a
                    g8 = a2;
                    int32_t v42 = *(int32_t *)(4 * a2 + (int32_t)&g656); // 0x6138d
                    g8 = v42;
                    v41 = v42 & v38;
                    g9 = v41;
                } else {
                    v41 = v38;
                }
            } else {
                // 0x61210
                g7 = v33;
                int32_t v43 = v39 % 32; // 0x61215
                g9 = v34;
                int32_t v44 = *(int32_t *)(v35 + 4 + v33); // 0x6121e
                g8 = v44;
                g9 = v43;
                g7 = a2;
                int32_t v45 = *(int32_t *)(4 * v43 + (int32_t)&g656) & v44; // 0x61228
                g8 = v45;
                int32_t v46 = a2 - v43; // 0x6122f
                g7 = v46;
                uint32_t v47 = v46 & (int32_t)&g862 & 31; // 0x61231
                int32_t v48; // 0x61231
                if (v47 != 0) {
                    // bb284
                    v48 = v45 << v47;
                    g8 = v48;
                } else {
                    v48 = v45;
                }
                // bb286
                v41 = v48 | v38;
            }
            // 0x61236
            v31 = __asm_cvtsi2sd(v41);
        }
        int32_t v49 = a3 != 1 ? 5 : 3; // 0x6124c
        g9 = v49;
        int32_t v50 = g6; // 0x6124f
        int32_t v51 = v50 + v49; // 0x6124f
        g8 = v51;
        int32_t v52 = g10; // 0x61252
        if (v52 < v51) {
            // 0x61300
            *(int32_t *)(g4 + 12) = v52;
            int128_t v53 = v9; // 0x61303
            v9 = __asm_xorpd(v53, v53);
            *(char *)(g4 + 16) = 1;
        } else {
            int32_t v54 = v50 / 32; // 0x6125c
            g10 = v54;
            int32_t v55 = g4; // 0x61262
            int32_t v56 = *(int32_t *)v55; // 0x61262
            g10 = v56;
            g7 = v54;
            int32_t v57 = 4 * v54; // 0x6126a
            g7 = *(int32_t *)(v56 + v57);
            *(int32_t *)(v55 + 12) = v51;
            uint32_t v58 = g8; // 0x61270
            int32_t v59 = (v58 - 1) / 32; // 0x61273
            g4 = v59;
            int32_t v60 = g7; // 0x61276
            int32_t v61 = g6; // 0x61279
            g7 = v61;
            uint32_t v62 = v61 & (int32_t)&g862 & 31; // 0x6127b
            int32_t v63;
            if (v62 != 0) {
                // bb287
                v63 = v60 >> v62;
            } else {
                v63 = v60;
            }
            // bb288
            int32_t v64;
            if (v54 == v59) {
                // 0x613a0
                g4 = v63;
                int32_t v65 = *(int32_t *)(4 * g9 + (int32_t)&g656); // 0x613a3
                v64 = v65 & v63;
            } else {
                // 0x61287
                g6 = v54;
                int32_t v66 = v58 % 32; // 0x6128a
                g8 = v66;
                g10 = v56;
                int32_t v67 = g9 - v66; // 0x61290
                g9 = v67;
                g7 = v67;
                int32_t v68 = *(int32_t *)(v57 + 4 + v56); // 0x61294
                g4 = v68;
                int32_t v69 = *(int32_t *)(4 * v66 + (int32_t)&g656) & v68; // 0x61298
                g4 = v69;
                uint32_t v70 = v67 & (int32_t)&g862 & 31; // 0x6129f
                int32_t v71; // 0x6129f
                if (v70 != 0) {
                    // bb289
                    v71 = v69 << v70;
                    g4 = v71;
                } else {
                    v71 = v69;
                }
                // bb291
                v64 = v71 | v63;
            }
            // 0x612a4
            g4 = v64;
            int128_t v72 = __asm_cvtsi2ss(v64); // 0x612a4
            v9 = __asm_cvtps2pd(__asm_unpcklps(v72, v72));
        }
        int128_t v73 = __asm_movsd_1649(0x3fa0000000000000); // 0x612b2
        int128_t v74; // 0x612c4
        if (a3 == 1) {
            // 0x612bc
            v74 = __asm_movsd_1649(0x3fc0000000000000);
        } else {
            v74 = v73;
        }
        int128_t v75 = __asm_addsd(__asm_mulsd(v9, v74), v31); // 0x612c8
        v8 = __asm_cvtpd2ps(__asm_unpcklpd(v75, v75));
    }
    // 0x612d4
    __asm_movss_1646(v8);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x613e0 - 0x61506
int32_t function_613e0(int32_t a1, int32_t * a2) {
    int32_t v1 = g8; // 0x613e3
    int32_t v2 = g10; // 0x613e4
    int32_t v3 = g6; // 0x613e5
    g8 = (int32_t)a2;
    g6 = a1;
    *a2 = 0;
    *(int32_t *)(g8 + 4) = 0;
    *(int32_t *)(g8 + 8) = 0;
    int32_t v4 = g6; // 0x6140a
    int32_t v5 = *(int32_t *)(v4 + 8); // 0x6140a
    g9 = v5;
    int32_t * v6 = (int32_t *)(v4 + 12); // 0x6140d
    int32_t result = *v6; // 0x6140d
    g4 = result;
    int16_t * v7;
    int32_t v8; // 0x614ab
    if (result < v5) {
        // 0x6141b
        if (*(char *)(v4 + 16) != 0) {
            // 0x614c5
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        int32_t v9 = *(int32_t *)v4; // 0x61425
        g7 = v9;
        int32_t v10 = result / 8; // 0x61429
        g9 = v10;
        g10 = (int32_t)*(char *)(v9 + v10);
        g7 = result % 8;
        g9 = 1;
        int32_t v11 = result + 1; // 0x6143d
        g4 = v11;
        uint32_t v12 = result & (int32_t)&g862 & 7; // 0x61440
        if (v12 != 0) {
            // bb
            g9 = 1 << v12;
        }
        // bb33
        *v6 = v11;
        int32_t v13 = g4; // 0x6144a
        int32_t v14 = g9 & (int32_t)&g862 & -256; // 0x6144d
        g9 = v14;
        int16_t * v15 = (int16_t *)v14; // 0x61450
        if (v5 > v13) {
            // 0x61455
            g7 = v9;
            int32_t v16 = v13 / 8; // 0x6145a
            g9 = v16;
            g10 = (int32_t)*(char *)(v16 + v9);
            g9 = 1;
            g7 = v13 % 8;
            int32_t v17 = v13 + 1; // 0x6146b
            g4 = v17;
            uint32_t v18 = v13 & (int32_t)&g862 & 7; // 0x6146e
            if (v18 != 0) {
                // bb35
                g9 = 1 << v18;
            }
            // bb36
            *(int32_t *)(g6 + 12) = v17;
            int32_t v19 = g4; // 0x61478
            int32_t v20 = g9 & (int32_t)&g862 & -256; // 0x6147b
            g9 = v20;
            g10 = v20;
            if (v5 > v19) {
                // 0x61482
                g7 = v9;
                int32_t v21 = v19 / 8; // 0x61487
                g9 = v21;
                g9 = (int32_t)*(char *)(v21 + v9);
                g7 = v19 % 8;
                *(int32_t *)(g6 + 12) = v19 + 1;
                g4 = 0;
                int32_t v22 = g9; // 0x6149b
                g9 = 1;
                uint32_t v23 = g7 & (int32_t)&g862 & 31; // 0x614a3
                int32_t v24; // 0x614a3
                if (v23 != 0) {
                    // bb37
                    v24 = 1 << v23;
                    g9 = v24;
                } else {
                    v24 = 1;
                }
                // bb38
                g9 = v14;
                v8 = (v24 & v22) != 0;
                g4 = v8;
                if (v14 != 0) {
                    goto lab_0x614df;
                } else {
                    goto lab_0x614b2;
                }
            } else {
                v7 = v15;
                goto lab_0x614d2;
            }
        } else {
            // 0x614d0
            g10 = 0;
            v7 = v15;
            goto lab_0x614d2;
        }
    } else {
        // 0x614d0
        g10 = 0;
        v7 = NULL;
        goto lab_0x614d2;
    }
  lab_0x614d2:
    // 0x614d2
    g9 = (int32_t)v7;
    g4 = 0;
    *(char *)(g6 + 16) = 1;
    int32_t v25 = g4;
    if (v7 == NULL) {
        v8 = v25;
        goto lab_0x614b2;
    } else {
        v8 = v25;
        goto lab_0x614df;
    }
  lab_0x614b2:;
    // 0x614b2
    int32_t v26; // 0x614b6
    int32_t v27; // 0x614f3
    if (g10 != 0) {
        v27 = v8;
        goto lab_0x614f3;
    } else {
        v26 = v8;
        goto lab_0x614b6;
    }
  lab_0x614df:
    // 0x614df
    function_60a90(g6);
    *(float32_t *)g8 = (float32_t)g868;
    g13++;
    g4 = v8;
    if (g10 == 0) {
        v26 = v8;
        goto lab_0x614b6;
    } else {
        v27 = v8;
        goto lab_0x614f3;
    }
  lab_0x614f3:
    // 0x614f3
    function_60a90(g6);
    *(float32_t *)(g8 + 4) = (float32_t)g868;
    g13++;
    g4 = v27;
    v26 = v27;
    goto lab_0x614b6;
  lab_0x614b6:;
    int32_t result2; // 0x614cc
    if (v26 != 0) {
        // 0x614ba
        g4 = function_60a90(g6);
        *(float32_t *)(g8 + 8) = (float32_t)g868;
        result2 = g4;
    } else {
        result2 = 0;
    }
    // 0x614c5
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x61510 - 0x6163c
float80_t function_61510(int32_t a1) {
    // 0x61510
    g9 = a1;
    int32_t v1 = g6; // 0x61519
    int32_t v2 = g10; // 0x6151c
    int32_t v3 = g8; // 0x6151f
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x61522
    int32_t v5 = *v4; // 0x61522
    g4 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x61525
    g8 = v6;
    char * v7 = (char *)(a1 + 16); // 0x61530
    int32_t v8;
    int32_t v9;
    int32_t v10; // 0x61579
    int32_t v11; // 0x6160c
    int32_t v12; // 0x6161e
    int32_t v13; // 0x6155b
    if (v5 < v6) {
        // 0x61530
        if (*v7 != 0) {
            v11 = v5;
            goto lab_0x6160c;
        } else {
            int32_t v14 = *(int32_t *)a1; // 0x6153a
            g6 = v14;
            int32_t v15 = v5 / 8; // 0x6153e
            g7 = v15;
            g10 = (int32_t)*(char *)(v14 + v15);
            g6 = 1;
            g7 = v5 % 8;
            int32_t v16 = v5 + 1; // 0x6154f
            g4 = v16;
            uint32_t v17 = v5 & (int32_t)&g862 & 7; // 0x61552
            if (v17 != 0) {
                // bb
                g6 = 1 << v17;
            }
            // bb47
            g7 = 0;
            *v4 = v16;
            int32_t v18 = g6; // 0x61559
            int32_t v19 = g4; // 0x6155b
            v13 = v19 + 11;
            g6 = v13;
            int32_t v20 = g7 & -256 | (int32_t)((v18 & g10) != 0); // 0x6155e
            g7 = v20;
            int32_t v21 = g8; // 0x61561
            if (v21 < v13) {
                v12 = v21;
                v9 = v20;
                goto lab_0x6161e;
            } else {
                v10 = v19;
                v8 = v20;
                goto lab_0x6156c;
            }
        }
    } else {
        // 0x61608
        *v7 = 1;
        v6 = g8;
        v11 = g4;
        goto lab_0x6160c;
    }
  lab_0x6160c:;
    int32_t v22 = v11 + 11; // 0x6160c
    g6 = v22;
    if (v6 < v22) {
        v12 = v6;
        v9 = 0;
        goto lab_0x6161e;
    } else {
        v13 = v22;
        v10 = v11;
        v8 = 0;
        goto lab_0x6156c;
    }
  lab_0x6161e:
    // 0x6161e
    *(int32_t *)(g9 + 12) = v12;
    int128_t v23 = g878; // 0x61621
    g878 = __asm_xorps(v23, v23);
    *(char *)(g9 + 16) = 1;
    int32_t v24 = v9;
    goto lab_0x615da;
  lab_0x6156c:;
    int32_t v26 = g9; // 0x6156c
    int32_t v27 = *(int32_t *)v26; // 0x6156c
    g7 = v27;
    int32_t v28 = v10 / 32; // 0x61570
    g8 = v28;
    g10 = *(int32_t *)(v27 + 4 * v28);
    g7 = v10;
    g4 = v10 + 10;
    *(int32_t *)(v26 + 12) = v13;
    int32_t v29 = g4 / 32; // 0x61581
    g4 = v29;
    int32_t v30 = g10; // 0x61584
    uint32_t v31 = g7 & (int32_t)&g862 & 31; // 0x61584
    int32_t v32; // 0x61584
    if (v31 != 0) {
        // bb49
        v32 = v30 >> v31;
        g10 = v32;
    } else {
        v32 = v30;
    }
    int32_t v33 = g8; // 0x61586
    uint32_t v34;
    if (v33 == v29) {
        // 0x61630
        g4 = g661;
        v34 = g661 & v32;
    } else {
        // 0x6158e
        g9 = v27;
        int32_t v35 = g6 % 32; // 0x61591
        g6 = v35;
        int32_t v36 = 11 - v35; // 0x61599
        g7 = v36;
        int32_t v37 = *(int32_t *)(v27 + 4 + 4 * v33); // 0x6159b
        g4 = v37;
        int32_t v38 = *(int32_t *)(4 * v35 + (int32_t)&g656) & v37; // 0x6159f
        uint32_t v39 = v36 & (int32_t)&g862 & 31; // 0x615a6
        int32_t v40; // 0x615a6
        if (v39 != 0) {
            // bb51
            v40 = v38 << v39;
        } else {
            v40 = v38;
        }
        // bb53
        g4 = v40;
        v34 = v40 | v32;
    }
    int32_t v41 = v34 % 0x10000; // 0x615aa
    g9 = v41;
    int32_t v42 = v34 / 0x10000; // 0x615ad
    g4 = v42;
    int128_t v43 = __asm_cvtsi2ss(v42); // 0x615b0
    int128_t v44 = __asm_cvtsi2ss(v41); // 0x615b4
    int128_t v45 = __asm_addss_1661(__asm_mulss_1654(v43, 0x47800000), v44); // 0x615c0
    int128_t v46 = __asm_unpcklps(v45, v45); // 0x615c4
    int128_t v47 = __asm_mulsd_1655(__asm_cvtps2pd(v46), 0x3f40020040080100); // 0x615ca
    g878 = __asm_cvtpd2ps(__asm_unpcklpd(v47, v47));
    v24 = v8;
    goto lab_0x615da;
  lab_0x615da:
    // 0x615da
    g7 = v24;
    int128_t v25; // 0x615e9
    if (v24 == 0) {
        // branch -> 0x615ec
    } else {
        // 0x615e1
        v25 = __asm_xorps(g878, __asm_movss((int32_t)g233));
        g878 = v25;
    }
    // 0x615ec
    g6 = v1;
    g13--;
    g10 = v2;
    g8 = v3;
    return __asm_movss_1646(v25);
}

// Address range: 0x61640 - 0x617c7
int32_t function_61640(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x61643
    int32_t v2 = g10; // 0x61644
    int32_t v3 = g6; // 0x61645
    g6 = a1;
    g10 = a2;
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x6164f
    g4 = v4;
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x61652
    int32_t v6 = *v5; // 0x61652
    g8 = v6;
    g4 = 0;
    int32_t v7; // 0x616d2
    bool v8; // 0x61792
    int32_t v9; // 0x61794
    if (v6 < v4) {
        // 0x61663
        if (*(char *)(a1 + 16) != 0) {
            // 0x617c0
            g8 = 0;
            v7 = 0;
            goto lab_0x616d2;
        } else {
            int32_t v10 = *(int32_t *)a1; // 0x6166d
            g9 = v10;
            int32_t v11 = v6 / 8; // 0x61673
            g4 = v11;
            g7 = v6 % 8;
            int32_t v12 = v6 + 1; // 0x61679
            g8 = v12;
            g9 = (int32_t)*(char *)(v10 + v11);
            g4 = 1;
            uint32_t v13 = v6 & (int32_t)&g862 & 7; // 0x61688
            if (v13 != 0) {
                // bb
                g4 = 1 << v13;
            }
            // bb264
            *v5 = v12;
            uint32_t v14 = g8; // 0x61692
            int32_t v15 = g4 & (int32_t)&g862 & -256; // 0x61695
            g4 = v15;
            if (v4 > v14) {
                // 0x6169e
                g7 = v10;
                int32_t v16 = v14 + 1; // 0x616ac
                g8 = v16;
                g7 = v14 % 8;
                *(int32_t *)(g6 + 12) = v16;
                g9 = 1;
                uint32_t v17 = g7 & (int32_t)&g862 & 31; // 0x616bd
                int32_t v18; // 0x616bd
                if (v17 != 0) {
                    // bb265
                    v18 = 1 << v17;
                    g9 = v18;
                } else {
                    v18 = 1;
                }
                int32_t v19 = v18 & (int32_t)&g862 & -256; // 0x616c7
                g9 = v19;
                g8 = v19;
                if (g4 != 0) {
                    goto lab_0x6179e;
                } else {
                    v7 = v19;
                    goto lab_0x616d2;
                }
            } else {
                // .dec_label_pc_61790_crit_edge
                v9 = g6;
                v8 = v15 == 0;
                goto lab_0x61790;
            }
        }
    } else {
        v9 = a1;
        v8 = true;
        goto lab_0x61790;
    }
  lab_0x61790:
    // 0x61790
    g8 = 0;
    *(char *)(v9 + 16) = 1;
    if (v8) {
        // 0x61790
        v7 = g8;
        goto lab_0x616d2;
    } else {
        goto lab_0x6179e;
    }
  lab_0x6179e:;
    float32_t v20 = function_61510(g6); // 0x617a1
    g4 = v20;
    *(float32_t *)g10 = v20;
    g13++;
    if (g8 == 0) {
        // 0x616e0
        *(int32_t *)(g10 + 4) = 0;
        goto lab_0x616e7;
    } else {
        goto lab_0x617b0;
    }
  lab_0x616d2:
    // 0x616d2
    *(int32_t *)g10 = 0;
    if (v7 != 0) {
        goto lab_0x617b0;
    } else {
        // 0x616e0
        *(int32_t *)(g10 + 4) = 0;
        goto lab_0x616e7;
    }
  lab_0x617b0:;
    float32_t v21 = function_61510(g6); // 0x617b3
    g4 = v21;
    *(float32_t *)(g10 + 4) = v21;
    goto lab_0x616e7;
  lab_0x616e7:;
    int32_t v22 = g6; // 0x616e7
    int32_t * v23 = (int32_t *)(v22 + 12); // 0x616e7
    int32_t v24 = *v23; // 0x616e7
    g4 = v24;
    char * v25 = (char *)(v22 + 16); // 0x616f3
    int32_t v26;
    bool v27; // zf
    if (v24 < *(int32_t *)(v22 + 8)) {
        // 0x616f3
        if (*v25 != 0) {
            goto lab_0x6178c;
        } else {
            int32_t v28 = *(int32_t *)v22; // 0x616fd
            g7 = v28;
            int32_t v29 = v24 / 8; // 0x61701
            g9 = v29;
            g8 = (int32_t)*(char *)(v28 + v29);
            g9 = 1;
            g7 = v24 % 8;
            int32_t v30 = v24 + 1; // 0x61712
            g4 = v30;
            uint32_t v31 = v24 & (int32_t)&g862 & 7; // 0x61715
            if (v31 != 0) {
                // bb268
                g9 = 1 << v31;
            }
            // bb269
            *v23 = v30;
            g4 = 0;
            int32_t v32 = g8; // 0x6171c
            int32_t v33 = g9; // 0x6171c
            v27 = (v33 & v32) == 0;
            v26 = (v33 & v32) != 0;
            goto lab_0x61721;
        }
    } else {
        // 0x61788
        *v25 = 1;
        goto lab_0x6178c;
    }
  lab_0x6178c:
    // 0x6178c
    v27 = true;
    v26 = 0;
    goto lab_0x61721;
  lab_0x61721:
    // 0x61721
    g4 = v26;
    int128_t v34 = __asm_movss(*(int32_t *)g10); // 0x61721
    int128_t v35 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x61725
    int128_t v36 = __asm_mulss(v34, v34); // 0x6172a
    int128_t v37 = __asm_addss_1661(v36, __asm_mulss(v35, v35)); // 0x61732
    int128_t v38 = __asm_movss(0x3f800000); // 0x61736
    __asm_ucomiss_1648(v38, v37);
    if (false || v27) {
        // 0x61778
        *(int32_t *)(g10 + 8) = 0;
    } else {
        int128_t v39 = __asm_subss(v38, v37); // 0x61743
        *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_sqrtss(v39));
    }
    // 0x61750
    int32_t result; // 0x61770
    if (g4 != 0) {
        int128_t v40 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x61754
        int128_t v41 = __asm_movss((int32_t)g233); // 0x61759
        *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_xorps(v40, v41));
        result = g4;
    } else {
        result = 0;
    }
    // 0x61769
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x617d0 - 0x61803
int32_t function_617d0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x617d3
    g4 = a1;
    g6 = a2;
    int32_t v2; // bp-24
    function_613e0(a1, &v2);
    *(int32_t *)g6 = v2;
    g6 = v1;
    return g4;
}

// Address range: 0x61810 - 0x6182b
int32_t function_61810(int32_t a1) {
    int32_t v1 = g5; // 0x61810
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    g4 = a1;
    int32_t result = function_60690(a1, 8, v1); // 0x61824
    g4 = result;
    g5 = v2;
    return result;
}

// Address range: 0x61830 - 0x618ae
int32_t function_61830(int32_t a1) {
    // 0x61830
    g4 = a1;
    int32_t v1 = g6; // bp-16
    int32_t v2 = g10; // 0x6183c
    int32_t v3 = g8; // 0x6183f
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x61842
    int32_t v5 = *v4; // 0x61842
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x61845
    g6 = v6;
    int32_t v7 = v5 + 8; // 0x61848
    g9 = v7;
    if (v7 > v6) {
        // 0x61898
        *v4 = v6;
        *(char *)(g4 + 16) = 1;
        g4 = 0;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    int32_t v8 = *(int32_t *)a1; // 0x6184f
    g8 = v8;
    int32_t v9 = v5 / 32; // 0x61853
    g10 = v9;
    g6 = *(int32_t *)(v8 + 4 * v9);
    *v4 = v7;
    g4 = g660;
    int32_t v10 = g6; // 0x61861
    int32_t v11 = g7; // 0x61861
    uint32_t v12 = v11 & (int32_t)&g862 & 31; // 0x61861
    int32_t v13; // 0x61861
    if (v12 != 0) {
        // bb
        v13 = v10 >> v12;
        g6 = v13;
    } else {
        v13 = v10;
    }
    int32_t v14 = (v11 + 7) / 32; // 0x61866
    g7 = v14;
    int32_t result = v13 & g660; // 0x61869
    g4 = result;
    int32_t v15 = g10; // 0x6186b
    if (v15 == v14) {
        // 0x61888
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v16 = *(int32_t *)(4 * v15 + 4 + g8); // 0x6186f
    g4 = v16;
    int32_t v17 = g9 % 32; // 0x61873
    g9 = v17;
    int32_t v18 = 8 - v17; // 0x6187b
    g7 = v18;
    int32_t v19 = *(int32_t *)(4 * v17 + (int32_t)&g656) & v16; // 0x6187d
    uint32_t v20 = v18 & (int32_t)&g862 & 31; // 0x61884
    int32_t v21; // 0x61886
    if (v20 != 0) {
        // bb239
        v21 = v19 << v20;
    } else {
        v21 = v19;
    }
    int32_t result2 = v21 | v13; // 0x61886
    g4 = result2;
    // 0x61888
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x618b0 - 0x618cb
int32_t function_618b0(int32_t a1) {
    int32_t v1 = g5; // 0x618b0
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    g4 = a1;
    int32_t result = function_60690(a1, 16, v1); // 0x618c4
    g4 = result;
    g5 = v2;
    return result;
}

// Address range: 0x618d0 - 0x6194e
int32_t function_618d0(int32_t a1) {
    // 0x618d0
    g4 = a1;
    int32_t v1 = g6; // bp-16
    int32_t v2 = g10; // 0x618dc
    int32_t v3 = g8; // 0x618df
    int32_t * v4 = (int32_t *)(a1 + 12); // 0x618e2
    int32_t v5 = *v4; // 0x618e2
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 8); // 0x618e5
    g6 = v6;
    int32_t v7 = v5 + 16; // 0x618e8
    g9 = v7;
    if (v7 > v6) {
        // 0x61938
        *v4 = v6;
        *(char *)(g4 + 16) = 1;
        g4 = 0;
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return 0;
    }
    int32_t v8 = *(int32_t *)a1; // 0x618ef
    g8 = v8;
    int32_t v9 = v5 / 32; // 0x618f3
    g10 = v9;
    g6 = *(int32_t *)(v8 + 4 * v9);
    *v4 = v7;
    g4 = g663;
    int32_t v10 = g6; // 0x61901
    int32_t v11 = g7; // 0x61901
    uint32_t v12 = v11 & (int32_t)&g862 & 31; // 0x61901
    int32_t v13; // 0x61901
    if (v12 != 0) {
        // bb
        v13 = v10 >> v12;
        g6 = v13;
    } else {
        v13 = v10;
    }
    int32_t v14 = (v11 + 15) / 32; // 0x61906
    g7 = v14;
    int32_t result = v13 & g663; // 0x61909
    g4 = result;
    int32_t v15 = g10; // 0x6190b
    if (v15 == v14) {
        // 0x61928
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    int32_t v16 = *(int32_t *)(4 * v15 + 4 + g8); // 0x6190f
    g4 = v16;
    int32_t v17 = g9 % 32; // 0x61913
    g9 = v17;
    int32_t v18 = 16 - v17; // 0x6191b
    g7 = v18;
    int32_t v19 = *(int32_t *)(4 * v17 + (int32_t)&g656) & v16; // 0x6191d
    uint32_t v20 = v18 & (int32_t)&g862 & 31; // 0x61924
    int32_t v21; // 0x61926
    if (v20 != 0) {
        // bb239
        v21 = v19 << v20;
    } else {
        v21 = v19;
    }
    int32_t result2 = v21 | v13; // 0x61926
    g4 = result2;
    // 0x61928
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x61950 - 0x6196b
int32_t function_61950(int32_t a1) {
    // 0x61950
    int32_t v1; // ebp
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    g4 = a1;
    int32_t result = function_60690(a1, 32, v1); // 0x61964
    g4 = result;
    return result;
}

// Address range: 0x61970 - 0x61a80
int32_t function_61970(int32_t a1) {
    // 0x61970
    g4 = a1;
    int32_t v1 = g6; // 0x61979
    int32_t v2; // bp-36
    int32_t v3 = &v2; // 0x6197c
    g9 = v3;
    int32_t v4 = g10; // 0x6197f
    int32_t v5 = g8; // 0x61982
    int32_t * v6 = (int32_t *)(a1 + 12); // 0x61988
    int32_t v7 = *v6; // 0x61988
    g7 = v7;
    int32_t v8 = *(int32_t *)(a1 + 8); // 0x61991
    g6 = v8;
    int32_t v9 = v7 + 32; // 0x61999
    g9 = v9;
    int32_t v10; // 0x619fd
    if (v9 > v8) {
        // 0x61a70
        *v6 = v8;
        g9 = g6;
        g10 = 0;
        *(char *)(g4 + 16) = 1;
        v10 = g10;
    } else {
        // 0x619a4
        g10 = v7;
        int32_t v11 = *(int32_t *)a1; // 0x619a7
        g8 = v11;
        g7 = v7 % 256;
        int32_t v12 = v7 / 32; // 0x619ad
        g10 = v12;
        g10 = *(int32_t *)(v11 + 4 * v12);
        *v6 = v9;
        int32_t v13 = g10; // 0x619bc
        uint32_t v14 = g7 & (int32_t)&g862 & 31; // 0x619bc
        int32_t v15; // 0x619bc
        if (v14 != 0) {
            // bb
            v15 = v13 >> v14;
            g10 = v15;
        } else {
            v15 = v13;
        }
        int32_t v16 = (v7 + 31) / 32; // 0x619c4
        g7 = v16;
        if (v12 != v16) {
            // 0x619cc
            g7 = v11;
            int32_t v17 = g9 % 32; // 0x619d1
            g8 = v12;
            int32_t v18 = *(int32_t *)(v11 + 4 + 4 * v12); // 0x619da
            g8 = v18;
            g7 = v17;
            int32_t v19 = *(int32_t *)(4 * v17 + (int32_t)&g656) & v18; // 0x619e8
            g8 = v19;
            int32_t v20 = 32 - v17; // 0x619ef
            g7 = v20;
            uint32_t v21 = v20 & (int32_t)&g862 & 31; // 0x619f2
            int32_t v22; // 0x619f2
            if (v21 != 0) {
                // bb256
                v22 = v19 << v21;
                g8 = v22;
            } else {
                v22 = v19;
            }
            int32_t v23 = v22 | v15; // 0x619f4
            g10 = v23;
            v10 = v23;
        } else {
            v10 = v15;
        }
    }
    // 0x619f6
    g8 = v3;
    v2 = v10;
    int32_t v24 = g9; // 0x619ff
    int32_t v25 = v24 + 32; // 0x619ff
    g10 = v25;
    int32_t v26; // ebp
    unsigned char v27;
    int32_t v28 = 4 * (int32_t)v27 - 32 + v26; // 0x61a02
    g7 = v28;
    int32_t v29 = g6; // 0x61a06
    int32_t v30 = g4; // 0x61a60
    int32_t v31; // 0x61a4a
    if (v29 < v25) {
        // 0x61a60
        *(int32_t *)(v30 + 12) = v29;
        g6 = 0;
        *(char *)(g4 + 16) = 1;
        v31 = g6;
    } else {
        int32_t v32 = *(int32_t *)v30; // 0x61a0d
        g7 = v32;
        int32_t v33 = v24 / 32; // 0x61a11
        g8 = v33;
        g6 = *(int32_t *)(v32 + 4 * v33);
        g7 = v24;
        g9 = v24 + 31;
        *(int32_t *)(v30 + 12) = v25;
        int32_t v34 = g9 / 32; // 0x61a22
        g9 = v34;
        int32_t v35 = g6; // 0x61a25
        uint32_t v36 = g7 & (int32_t)&g862 & 31; // 0x61a25
        int32_t v37; // 0x61a25
        if (v36 != 0) {
            // bb260
            v37 = v35 >> v36;
            g6 = v37;
        } else {
            v37 = v35;
        }
        int32_t v38 = g8; // 0x61a27
        if (v38 != v34) {
            // 0x61a2b
            g9 = v32;
            int32_t v39 = g10 % 32; // 0x61a2e
            g10 = v39;
            int32_t v40 = 32 - v39; // 0x61a36
            g7 = v40;
            int32_t v41 = *(int32_t *)(v32 + 4 + 4 * v38); // 0x61a38
            g4 = v41;
            int32_t v42 = *(int32_t *)(4 * v39 + (int32_t)&g656) & v41; // 0x61a3c
            uint32_t v43 = v40 & (int32_t)&g862 & 31; // 0x61a43
            int32_t v44; // 0x61a43
            if (v43 != 0) {
                // bb262
                v44 = v42 << v43;
            } else {
                v44 = v42;
            }
            // bb264
            g4 = v44;
            int32_t v45 = v44 | v37; // 0x61a45
            g6 = v45;
            v31 = v45;
        } else {
            v31 = v37;
        }
    }
    // 0x61a47
    *(int32_t *)v28 = v31;
    int32_t result = v2; // 0x61a4c
    g4 = result;
    g6 = v1;
    g10 = v4;
    g8 = v5;
    return result;
}

// Address range: 0x61a80 - 0x61aa5
int32_t function_61a80(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    float32_t v2; // bp-8
    int32_t result = function_60210(a1, (int32_t *)&v2, 32); // 0x61a9b
    g4 = result;
    return result;
}

// Address range: 0x61ab0 - 0x61ae0
int32_t function_61ab0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x61ab3
    g6 = a1;
    g4 = a2;
    g4 = function_60210(a1, (int32_t *)a2, 8 * a3);
    unsigned char v2 = *(char *)(g6 + 16); // 0x61ad3
    g6 = v1;
    int32_t result = (int32_t)v2 ^ 1; // 0x61adb
    g4 = result;
    return result;
}

// Address range: 0x61ae0 - 0x61b5b
int32_t function_61ae0(int32_t a1, int32_t * a2, int32_t * a3, uint32_t a4, int32_t * a5) {
    int32_t v1 = (int32_t)a5;
    int32_t v2 = (int32_t)a2;
    int32_t v3 = g8; // 0x61ae3
    g8 = 0;
    int32_t v4 = g10; // 0x61ae6
    int32_t v5 = g6; // 0x61ae7
    g6 = 0;
    g9 = a4 % 256;
    g10 = a1;
    int32_t v6 = (int32_t)a3 - 1; // 0x61af7
    g4 = v6;
    while (true) {
        int32_t v7 = function_61810(a1); // 0x61b1f
        g4 = v7;
        char v8 = v7; // 0x61b24
        if (v8 == 0) {
            // break -> 0x61b28
            break;
        }
        // 0x61b08
        if ((char)a4 != 0) {
            // 0x61b0e
            if (v8 == 10) {
                // break -> 0x61b28
                break;
            }
        }
        int32_t v9 = g6; // 0x61b12
        if (v6 > v9) {
            // 0x61b50
            g9 = v2;
            *(char *)(v9 + v2) = v8;
            g6++;
        } else {
            // 0x61b17
            g8 = 1;
        }
        // 0x61b1c
        a1 = g10;
    }
    // 0x61b28
    g4 = v1;
    g9 = v2;
    *(char *)(g6 + v2) = 0;
    if (a5 != NULL) {
        // 0x61b36
        g9 = v1;
        *a5 = g6;
    }
    int32_t v10 = g8 ^ 1; // 0x61b3b
    g8 = v10;
    g4 = 0;
    int32_t result = *(char *)(g10 + 16) == 0 ? v10 : 0; // 0x61b44
    g4 = result;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result;
}

// Address range: 0x61b60 - 0x61be3
int32_t function_61b60(int32_t a1, int32_t a2, int32_t a3, unsigned char a4, int32_t a5) {
    int32_t v1 = g8; // 0x61b63
    g8 = 0;
    int32_t v2 = g10; // 0x61b66
    int32_t v3 = g6; // 0x61b67
    g6 = 0;
    g9 = a4;
    g10 = a1;
    int32_t v4 = a3 - 1; // 0x61b77
    g4 = v4;
    while (true) {
        int32_t v5 = function_618b0(a1); // 0x61ba0
        g4 = v5;
        if (v5 == 0) {
            // break -> 0x61ba9
            break;
        }
        if (a4 != 0) {
            if (v5 == 10) {
                // break -> 0x61ba9
                break;
            }
        }
        int32_t v6 = g6; // 0x61b93
        if (v4 > v6) {
            // 0x61bd8
            g9 = a2;
            *(int32_t *)(4 * v6 + a2) = v5;
            g6++;
        } else {
            // 0x61b98
            g8 = 1;
        }
        // 0x61b9d
        a1 = g10;
    }
    // 0x61ba9
    g4 = a5;
    g9 = a2;
    *(int32_t *)(4 * g6 + a2) = 0;
    if (a5 != 0) {
        // 0x61bba
        g9 = a5;
        *(int32_t *)a5 = g6;
    }
    int32_t v7 = g8 ^ 1; // 0x61bbf
    g8 = v7;
    g4 = 0;
    int32_t result = *(char *)(g10 + 16) == 0 ? v7 : 0; // 0x61bc8
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x61bf0 - 0x61c69
int32_t function_61bf0(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x61bf3
    int32_t v2 = g6; // 0x61bf4
    int32_t v3; // bp-2064
    g6 = &v3;
    g10 = a2;
    g4 = a1;
    int32_t v4; // bp-16
    int32_t v5 = function_61ae0(a1, &v3, &g148, 0, &v4); // 0x61c25
    g4 = v5;
    if (a2 != 0) {
        int32_t v6 = v5 ^ 1; // 0x61c2e
        g4 = v6;
        *(char *)a2 = (char)v6;
    }
    // 0x61c33
    g4 = v4 + 1;
    int32_t result = function_1bc60(); // 0x61c3c
    g4 = result;
    int32_t v7 = v4; // 0x61c41
    g9 = v7;
    if (v7 < 0) {
        // 0x61c5f
        g6 = v2;
        g10 = v1;
        return result;
    }
    // 0x61c48
    g9 = 0;
    g10 = a2;
    int32_t v8 = 0; // 0x61c54
    unsigned char v9 = *(char *)(g6 + v8); // 0x61c50
    g7 = v9;
    *(char *)(v8 + result) = v9;
    int32_t v10 = g9 + 1; // 0x61c57
    g9 = v10;
    int32_t result2 = g4;
    while (v4 >= v10) {
        // 0x61c50
        v8 = v10;
        v9 = *(char *)(g6 + v8);
        g7 = v9;
        *(char *)(v8 + result2) = v9;
        v10 = g9 + 1;
        g9 = v10;
        result2 = g4;
    }
    // 0x61c5f
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x61c70 - 0x61dc0
int32_t function_61c70(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x61c73
    int32_t v2 = g10; // 0x61c74
    int32_t v3 = g6; // 0x61c75
    g4 = a1;
    g9 = a2;
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x61c7f
    int32_t v5 = a3 + a2; // 0x61c82
    g9 = v5;
    int32_t v6 = v4 - v5; // 0x61c88
    g8 = v6;
    int32_t v7 = *(int32_t *)a1; // 0x61c8d
    int32_t v8 = 64 * v4; // 0x61c95
    g8 = v8;
    if (v5 < 0) {
        goto lab_0x61ca8;
    } else {
        if (v4 < v5) {
            goto lab_0x61ca8;
        } else {
            // 0x61db8
            *(int32_t *)(a1 + 12) = v5;
            goto lab_0x61cb2;
        }
    }
  lab_0x61d46:
    // 0x61d46
    g9 = 0;
    int32_t v9; // 0x61d0c
    int32_t v10; // 0x61d0e
    int32_t v11; // 0x61d48
    if (v8 > v11) {
        v9 = 0;
        v10 = v11;
        // break -> 0x61d06
        goto lab_0x61d06;
    }
    int32_t v12 = v11; // 0x61d4812
    goto lab_0x61d4d;
  lab_0x61d4d:;
    int32_t v13 = g10 + 1; // 0x61d4d
    g10 = v13;
    int32_t v14;
    int32_t v15;
    if (v13 == v6) {
        v15 = v14;
        // break (via goto) -> 0x61d59
        goto lab_0x61d59;
    }
    int32_t v16 = v12; // 0x61d489
    char v17 = 1;
    goto lab_0x61d3a;
  lab_0x61ca8:
    // 0x61ca8
    g9 = v4;
    *(char *)(a1 + 16) = 1;
    *(int32_t *)(g4 + 12) = g9;
    goto lab_0x61cb2;
  lab_0x61cb2:
    // 0x61cb2
    g6 = v6;
    if (v6 >= 1) {
        // 0x61cbd
        g6 = a2;
        g10 = 0;
        int32_t v29 = a2; // 0x61d4810
        v14 = v4;
        char v30 = 0;
        while (true) {
            v16 = v29;
            v17 = v30;
            while (true) {
              lab_0x61d3a:;
                int32_t v18 = g4; // 0x61d3a
                int32_t * v19 = (int32_t *)(v18 + 12); // 0x61d3a
                int32_t v20 = *v19; // 0x61d3a
                g9 = v20;
                char * v21 = (char *)(v18 + 16); // 0x61cd0
                if (v20 < v14) {
                    // 0x61cd0
                    if (*v21 != 0) {
                        v11 = v16;
                        goto lab_0x61d46;
                    } else {
                        int32_t v22 = *(int32_t *)v18; // 0x61cd6
                        g8 = v22;
                        int32_t v23 = v20 / 8; // 0x61cda
                        g7 = v23;
                        g8 = (int32_t)*(char *)(v22 + v23);
                        g7 = v20;
                        *v19 = v20 + 1;
                        uint32_t v24 = g7; // 0x61ce9
                        g7 = v24 % 8;
                        int32_t v25 = g8; // 0x61cec
                        g8 = 1;
                        g9 = v25;
                        uint32_t v26 = v24 & (int32_t)&g862 & 7; // 0x61cf7
                        if (v26 != 0) {
                            // bb
                            g8 = 1 << v26;
                        }
                        int32_t v27 = g6; // 0x61cfe
                        int32_t v28 = v25 & (int32_t)&g862 & -256; // 0x61d01
                        g9 = v28;
                        if (v8 > v27) {
                            v9 = v28;
                            v10 = v27;
                            // break -> 0x61d06
                            break;
                        }
                        v12 = v27;
                        goto lab_0x61d4d;
                    }
                } else {
                    // 0x61d42
                    *v21 = 1;
                    v11 = g6;
                    goto lab_0x61d46;
                }
            }
          lab_0x61d06:;
            int32_t v31; // 0x61d2c
            int32_t v32; // 0x61d29
            if (v17 == 0) {
                // 0x61d0c
                g8 = 1;
                int32_t v33 = v10 / 8; // 0x61d77
                g9 = v33;
                g7 = v10 % 8;
                uint32_t v34 = v10 & (int32_t)&g862 & 7; // 0x61d7d
                if (v9 == 0) {
                    int32_t v35; // 0x61d7d
                    if (v34 != 0) {
                        // bb276
                        v35 = 1 << v34;
                        g8 = v35;
                    } else {
                        v35 = 1;
                    }
                    // bb277
                    g8 = v7;
                    int32_t v36 = -1 - v35; // 0x61d84
                    g7 = v36;
                    char * v37 = (char *)(v33 + v7); // 0x61d86
                    *v37 = *v37 & (char)v36;
                } else {
                    int32_t v38; // 0x61d1f
                    if (v34 != 0) {
                        // bb273
                        v38 = 1 << v34;
                        g8 = v38;
                    } else {
                        v38 = 1;
                    }
                    // bb274
                    g7 = v38;
                    g8 = v7;
                    char * v39 = (char *)(v33 + v7); // 0x61d26
                    *v39 = *v39 | (char)v38;
                }
                // 0x61d29
                v32 = *(int32_t *)(g4 + 8);
                g9 = v32;
                v31 = g6 + 1;
                g6 = v31;
            } else {
                v31 = v10;
                v32 = v14;
            }
            int32_t v40 = g10 + 1; // 0x61d32
            g10 = v40;
            if (v40 == v6) {
                v15 = v32;
                // break -> 0x61d59
                break;
            }
            v29 = v31;
            v14 = v32;
            v30 = v17;
        }
    } else {
        v15 = v4;
    }
  lab_0x61d59:
    // 0x61d59
    g7 = a2;
    if (a2 < 0) {
        goto lab_0x61d90;
    } else {
        // 0x61d60
        g8 = v15;
        if (v15 < a2) {
            goto lab_0x61d90;
        } else {
            // 0x61d68
            g8 = a2;
            *(int32_t *)(g4 + 12) = a2;
            goto lab_0x61d9a;
        }
    }
  lab_0x61d90:
    // 0x61d90
    g9 = v15;
    *(char *)(g4 + 16) = 1;
    *(int32_t *)(g4 + 12) = g9;
    goto lab_0x61d9a;
  lab_0x61d9a:;
    int32_t v41 = v15 - a3; // 0x61d9d
    g9 = v41;
    *(int32_t *)(g4 + 8) = v41;
    int32_t v42 = g9 / 8; // 0x61da3
    g9 = v42;
    *(int32_t *)(g4 + 4) = v42;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x61dc0 - 0x61dc1
int32_t function_61dc0(void) {
    // 0x61dc0
    return g4;
}

// Address range: 0x61e04 - 0x61e05
int32_t function_61e04(void) {
    // 0x61e04
    return g4;
}

// Address range: 0x61e23 - 0x61e39
int32_t function_61e23(void) {
    // 0x61e23
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x74c689c0); // 0x61e23
    *v2 = *v2 + 1;
    int32_t result = g10; // 0x61e2a
    g4 = result;
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return result;
}

// Address range: 0x61e5e - 0x61e5f
int32_t function_61e5e(int32_t a1) {
    // 0x61e5e
    return g4;
}

// Address range: 0x61e87 - 0x61e89
int32_t function_61e87(void) {
    // 0x61e87
    return g4;
}

// Address range: 0x61e90 - 0x61eb5
int32_t function_61e90(void) {
    // 0x61e90
    g4 = function_2db40(g6, (int32_t)".so", (int32_t)&g93);
    int32_t result = function_61e04(); // 0x61eb0
    g4 = result;
    return result;
}

// Address range: 0x61ec0 - 0x61ec1
int32_t function_61ec0(void) {
    // 0x61ec0
    return g4;
}

// Address range: 0x61f13 - 0x61f56
int32_t function_61f13(void) {
    // 0x61f13
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x39fc8b40); // 0x61f13
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x61f19
    *(char *)v3 = (char)v3 + *(char *)&g4;
    function_2db40(g6, g8, (int32_t)&g19);
    g4 = g6;
    int32_t v4 = function_61dc0(); // 0x61f39
    g4 = v4;
    int32_t result; // 0x61f44
    if (v4 == 0) {
        // 0x61f42
        g4 = g10;
        result = function_61dc0();
        g4 = result;
    } else {
        result = v4;
    }
    // 0x61f49
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x61f64 - 0x61f90
int32_t function_61f64(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x2444c710); // 0x61f64
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x61f6a
    char v3 = (char)v2 - 120; // 0x61f6a
    g4 = (int32_t)v3 | v2 & -256;
    uint32_t v4 = g7; // 0x61f7d
    if (v3 < 0) {
        // 0x61f7d
        g7 = v4 / 256 + v4 & 255 | v4 & -256;
        __asm_outsd((int16_t)g9, g10);
        return g4;
    }
    char * v5 = (char *)(v4 + 0x52ff2404); // 0x61f6e
    *v5 = *v5 + (char)v4;
    return g4;
}

// Address range: 0x61f90 - 0x61fc1
int32_t function_61f90(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x61f93
    int32_t v2 = g10; // 0x61f94
    int32_t v3 = g6; // 0x61f95
    int32_t v4 = __readNullptrDword(); // 0x61f99
    g6 = v4;
    g10 = a1;
    g8 = a2;
    if (v4 != 0) {
        int32_t result = *(int32_t *)(v4 + 4); // 0x61fbb
        g4 = result;
        return result;
    }
    int32_t result2 = function_61fe0(v3, v2, v1, g5); // 0x61fa9
    g4 = result2;
    return result2;
}

// Address range: 0x61fc5 - 0x61fdf
int32_t function_61fc5(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x61fc5
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x7a198a40); // 0x61fc5
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x61fcb
    *(char *)v3 = 2 * (char)v3;
    int32_t v4 = g4; // 0x61fd2
    *(char *)v4 = (char)v4 + *(char *)&g4;
    int32_t result = g6; // 0x61fd4
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x61fe0 - 0x61ff4
int32_t function_61fe0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x61fe0
    if (v1 != 0) {
        // 0x61fe4
        *(int32_t *)v1 = 1;
    }
    // 0x61fea
    g4 = 0;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return 0;
}

// Address range: 0x62000 - 0x62021
int32_t function_62000(int32_t * a1, int32_t a2, char * a3) {
    int32_t v1 = (int32_t)a1;
    g4 = v1;
    *(int32_t *)(v1 + 4) = (int32_t)a3;
    g9 = a2;
    *(int32_t *)g4 = a2;
    g9 = __readNullptrDword();
    __writeNullptrDword(g4);
    *(int32_t *)(g4 + 8) = g9;
    return g4;
}

// Address range: 0x62021 - 0x62023
int32_t function_62021(void) {
    int32_t result = CreateInterface(); // 0x62021
    g4 = result;
    return result;
}

// Address range: 0x62030 - 0x62039
int32_t CreateInterface(void) {
    int32_t result = function_61f90((int32_t)&g870, (int32_t)&g870); // 0x62034
    g4 = result;
    return result;
}

// Address range: 0x62063 - 0x62064
int32_t function_62063(void) {
    // 0x62063
    return g4;
}

// Address range: 0x6206d - 0x62076
int32_t function_6206d(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 - 0x2776eb3c); // 0x6206d
    *v1 = *v1 + 1;
    g6 = a1;
    return g4;
}

// Address range: 0x62095 - 0x62097
int32_t function_62095(void) {
    // 0x62095
    return g4;
}

// Address range: 0x620b0 - 0x620b1
int32_t function_620b0(int32_t a1) {
    // 0x620b0
    return g4;
}

// Address range: 0x620d1 - 0x620d2
int32_t function_620d1(void) {
    // 0x620d1
    return g4;
}

// Address range: 0x620da - 0x620db
int32_t function_620da(void) {
    // 0x620da
    return g4;
}

// Address range: 0x620f6 - 0x620f7
int32_t function_620f6(void) {
    // 0x620f6
    return g4;
}

// Address range: 0x62105 - 0x62125
int32_t function_62105(void) {
    int32_t * v1 = (int32_t *)(g4 + 0xac1dc3d); // 0x62105
    *v1 = *v1 + 1;
    int32_t v2 = g4; // 0x6210b
    char v3 = (char)v2 + *(char *)&g4; // 0x6210b
    *(char *)v2 = v3;
    if (v3 == 0) {
        // 0x6210f
        g684 = 1;
    }
    int32_t result = g10; // 0x62116
    g4 = result;
    int32_t v4; // ebp
    g6 = *(int32_t *)(v4 - 12);
    g10 = *(int32_t *)(v4 - 8);
    g8 = *(int32_t *)(v4 - 4);
    return result;
}

// Address range: 0x62150 - 0x6215a
int32_t function_62150(void) {
    char * v1 = (char *)(g4 - 0x158b7f80); // 0x62150
    *v1 = *v1 - 119;
    return g4;
}

// Address range: 0x6215f - 0x62165
int32_t function_6215f(void) {
    // 0x6215f
    *(char *)g8 = (char)g7 + *(char *)&g8;
    return g4;
}

// Address range: 0x6218b - 0x6218c
int32_t function_6218b(void) {
    // 0x6218b
    return g4;
}

// Address range: 0x6219b - 0x621f7
int32_t function_6219b(void) {
    // 0x6219b
    if (g6 == g4) {
        // bb
        g4 = function_6228e();
    }
    int32_t v1 = g5; // 0x621a3
    int32_t v2 = g10; // 0x621a3
    int32_t v3; // 0x621bb
    if (*(char *)(v1 - 1049 + v2) == 110) {
        // 0x621ad
        if (*(char *)(v1 - 1050 + v2) == 105) {
            // bb237
            g4 = function_62280();
            v3 = g5;
        } else {
            v3 = v1;
        }
    } else {
        v3 = v1;
    }
    int32_t v4 = v3 - 2072; // 0x621bb
    g10 = v4;
    function_2da40(v4, (int32_t)&g93, "%s/bin/%s");
    g4 = g10;
    int32_t v5 = function_61ec0(); // 0x621e3
    g4 = v5;
    g10 = v5;
    if (v5 != 0) {
        // bb238
        g4 = function_620da();
    }
    int32_t result = function_620d1(); // 0x621f2
    g4 = result;
    return result;
}

// Address range: 0x6223a - 0x6223f
int32_t function_6223a(void) {
    int32_t result = function_620f6(); // 0x6223a
    g4 = result;
    return result;
}

// Address range: 0x62240 - 0x6227f
int32_t function_62240(void) {
    // 0x62240
    int32_t v1; // ebp
    *(char *)(v1 - 1048 + g9) = 0;
    int32_t v2 = g8; // 0x62248
    g10 = v2;
    int32_t v3 = v2; // 0x6224a
    int32_t v4 = *(int32_t *)v3; // 0x6224a
    int32_t v5 = v3 + 4; // 0x6224c
    g10 = v5;
    int32_t v6 = -1 - v4; // 0x62255
    g9 = v6;
    int32_t v7 = v4 - 0x1010101 & v6; // 0x62257
    int32_t v8 = v7 & -0x7f7f7f80; // 0x62259
    g4 = v8;
    while (v8 == 0) {
        // 0x6224a
        v3 = v5;
        v4 = *(int32_t *)v3;
        v5 = v3 + 4;
        g10 = v5;
        v6 = -1 - v4;
        g9 = v6;
        v7 = v4 - 0x1010101 & v6;
        v8 = v7 & -0x7f7f7f80;
        g4 = v8;
    }
    int32_t v9 = (v7 & (int32_t)&g153 & -0x7f7f7f80) == 0 ? v8 / 0x10000 : v8; // 0x6226a
    int32_t v10 = v3 + 6; // 0x6226d
    g9 = v10;
    int32_t v11 = (v7 & (int32_t)&g153 & -0x7f7f7f80) == 0 ? v10 : v5; // 0x62270
    g4 = v9 & -0x7f7f8000;
    g10 = v11 - ((char)v9 != 0 ? 4 : 3) - v2;
    int32_t result = function_6218b(); // 0x6227a
    g4 = result;
    return result;
}

// Address range: 0x62280 - 0x6228e
int32_t function_62280(void) {
    // 0x62280
    return g4;
}

// Address range: 0x6228e - 0x622b9
int32_t function_6228e(void) {
    int32_t v1 = g5 - 2072; // 0x6228e
    g10 = v1;
    int32_t result = function_2da40(v1, (int32_t)&g93, "%s/%s"); // 0x622af
    g4 = result;
    return result;
}

// Address range: 0x622c0 - 0x622cc
int32_t function_622c0(void) {
    int32_t result = (unsigned char)g684; // 0x622c1
    g4 = result;
    return result;
}

// Address range: 0x622d0 - 0x622d1
int32_t function_622d0(int32_t a1) {
    // 0x622d0
    return g4;
}

// Address range: 0x622e0 - 0x622e2
int32_t function_622e0(int32_t a1) {
    // 0x622e0
    return g4;
}

// Address range: 0x622f0 - 0x622f1
int32_t function_622f0(int32_t a1) {
    // 0x622f0
    return g4;
}

// Address range: 0x6230e - 0x62311
int32_t function_6230e(void) {
    // 0x6230e
    g7--;
    return g4;
}

// Address range: 0x62311 - 0x62313
int32_t function_62311(void) {
    int32_t result = function_62320(); // 0x62311
    g4 = result;
    return result;
}

// Address range: 0x62320 - 0x6232a
int32_t function_62320(void) {
    // 0x62320
    g4 = 0x61f90;
    return 0x61f90;
}

// Address range: 0x62350 - 0x62353
int32_t function_62350(void) {
    // 0x62350
    g7--;
    return g4;
}

// Address range: 0x62360 - 0x623df
int32_t function_62360(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x62360
    g4 = a1;
    int32_t v1 = g6; // 0x62369
    int32_t v2 = g10; // 0x6236c
    g10 = 0;
    int32_t v3 = g8; // 0x62371
    g8 = a3;
    int32_t v4 = function_620b0(a1); // 0x6237a
    g4 = v4;
    g6 = v4;
    if (v4 != 0) {
        int32_t v5 = function_622f0(v4); // 0x62388
        g4 = v5;
        if (v5 == 0) {
            // 0x623c8
            function_622d0(g6);
            int32_t result = g10; // 0x623d0
            g4 = result;
            g6 = v1;
            g10 = v2;
            g8 = v3;
            return result;
        }
        // 0x623aa
        g9 = a4;
        *(int32_t *)a4 = v5;
        g10 = 1;
        if (a3 != 0) {
            // 0x623b3
            *(int32_t *)a3 = g6;
        }
    }
    int32_t result2 = g10; // 0x623b5
    g4 = result2;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result2;
}

// Address range: 0x623e0 - 0x623ff
int32_t function_623e0(int32_t a1, int32_t a2) {
    // 0x623e0
    g4 = a1;
    g9 = a2;
    *(int32_t *)a1 = (int32_t)&g234;
    *(int32_t *)(g4 + 4) = g9;
    *(int32_t *)(g4 + 8) = 0;
    *(char *)(g4 + 12) = 0;
    return g4;
}

// Address range: 0x62400 - 0x62448
int32_t function_62400(int32_t a1) {
    int32_t v1 = g6; // 0x62403
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 8); // 0x6240a
    g4 = v2;
    int32_t result; // 0x62419
    if (v2 != 0) {
        // 0x62411
        g6 = v1;
        result = function_622f0(v2);
        g4 = result;
        return result;
    }
    char * v3 = (char *)(a1 + 12); // 0x62420
    if (*v3 != 0) {
        // 0x62426
        g4 = 0;
        g6 = v1;
        return 0;
    }
    // 0x62430
    g4 = *(int32_t *)(a1 + 4);
    *v3 = 1;
    int32_t v4 = function_620b0(g4); // 0x6243a
    g4 = v4;
    *(int32_t *)(g6 + 8) = v4;
    if (v4 == 0) {
        // 0x62426
        g4 = 0;
        g6 = v1;
        return 0;
    }
    // 0x62411
    g6 = v1;
    result = function_622f0(g4);
    g4 = result;
    return result;
}

// Address range: 0x62450 - 0x62476
int32_t function_62450(int32_t a1) {
    int32_t v1 = g6; // 0x62453
    g6 = a1;
    int32_t v2 = *(int32_t *)(a1 + 8); // 0x6245a
    g4 = v2;
    int32_t result; // 0x62475
    if (v2 != 0) {
        // 0x62461
        g4 = function_622d0(v2);
        *(int32_t *)(g6 + 8) = 0;
        result = g4;
    } else {
        result = 0;
    }
    // 0x62470
    g6 = v1;
    return result;
}

// Address range: 0x62480 - 0x62492
int32_t function_62480(int32_t a1) {
    // 0x62480
    g4 = a1;
    *(int32_t *)a1 = (int32_t)&g234;
    int32_t v1; // ebp
    g5 = v1;
    int32_t result = function_62450((int32_t)&g870); // 0x6248d
    g4 = result;
    return result;
}

// Address range: 0x624a0 - 0x624c5
int32_t function_624a0(int32_t a1) {
    int32_t v1 = g6; // 0x624a3
    g6 = a1;
    *(int32_t *)a1 = (int32_t)&g234;
    g4 = function_62450(g6);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x624c0
    g4 = result;
    return result;
}

// Address range: 0x624d0 - 0x6251c
int32_t function_624d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x624d3
    g6 = a4;
    g4 = a1;
    g9 = a2;
    g7 = a3;
    *(int32_t *)(a1 + 32) = a2;
    *(int32_t *)(g4 + 24) = g9;
    *(int32_t *)(g4 + 12) = g7;
    if (a4 == -1) {
        int32_t v2 = 8 * g7; // 0x62510
        g6 = v2;
        *(int32_t *)(g4 + 8) = v2;
    } else {
        // 0x624ee
        *(int32_t *)(g4 + 8) = g6;
    }
    // 0x624f1
    g7 &= -4;
    *(char *)(g4 + 4) = 0;
    g9 += g7;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 32;
    *(int32_t *)(g4 + 28) = g9;
    g6 = v1;
    return g4;
}

// Address range: 0x62520 - 0x626a2
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_62520(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x62523
    int32_t v2 = g10; // 0x62524
    int32_t v3 = g6; // 0x62525
    g8 = a2;
    g6 = a1;
    int32_t v4 = *(int32_t *)(a1 + 20); // 0x62531
    g9 = v4;
    g4 = *(int32_t *)(a1 + 16);
    int32_t v5; // 0x625a8
    if (a2 != 0) {
        unsigned char v6 = *(char *)a2; // 0x62540275
        int32_t v7 = v6; // 0x62540276
        g7 = v7;
        if (v6 != 0) {
            while (true) {
                int32_t v8 = v7; // 0x62559
                int32_t v9 = a2; // 0x62547
                int32_t v10; // bp-20
                uint32_t v11; // 0x6254d
                while (true) {
                    // 0x62547
                    g8 = v9 + 1;
                    v11 = g9;
                    v10 = v8;
                    if (v11 <= 7) {
                        // break -> 0x625f0
                        break;
                    }
                    int32_t v12 = v8 & (int32_t)&g862; // 0x62559
                    g10 = v12;
                    int32_t v13 = 32 - v11; // 0x62561
                    g7 = v13;
                    int32_t v14 = v11 - 8; // 0x62563
                    g9 = v14;
                    uint32_t v15 = v13 & (int32_t)&g862 & 31; // 0x62566
                    if (v15 != 0) {
                        // bb
                        g10 = v12 << v15;
                    }
                    // bb259
                    *(int32_t *)(g6 + 20) = v14;
                    int32_t v16 = g10 | g4; // 0x6256b
                    g4 = v16;
                    *(int32_t *)(g6 + 16) = v16;
                    if (g9 != 0) {
                        goto lab_0x62540;
                    }
                    int32_t v17 = g6; // 0x62574
                    int32_t * v18 = (int32_t *)(v17 + 24); // 0x62574
                    int32_t v19 = *v18; // 0x62574
                    g9 = v19;
                    if (v19 == *(int32_t *)(v17 + 28)) {
                        // 0x62670
                        *(char *)(v17 + 4) = 1;
                    } else {
                        int32_t v20 = v19 + 4; // 0x62580
                        g7 = v20;
                        *v18 = v20;
                        *(int32_t *)g9 = g4;
                    }
                    // 0x62588
                    *(int32_t *)(g6 + 16) = 0;
                    g4 = 0;
                    g9 = 32;
                    *(int32_t *)(g6 + 20) = 32;
                    int32_t v21 = g8; // 0x6259d
                    unsigned char v22 = *(char *)v21; // 0x6259d
                    int32_t v23 = v22; // 0x6259d
                    g7 = v23;
                    if (v22 == 0) {
                        // break (via goto) -> 0x625a8
                        goto lab_0x625a8;
                    }
                    v8 = v23;
                    v9 = v21;
                }
                // 0x625f0
                g10 = v8;
                int32_t v24 = 32 - v11; // 0x625f8
                g7 = v24;
                int32_t v25 = *(int32_t *)(4 * v11 + (int32_t)&Generic_bitmask_table_at_87960); // 0x625fa
                int32_t v26 = v25 & v8; // 0x625fa
                uint32_t v27 = v24 & (int32_t)&g862 & 31; // 0x62601
                int32_t v28; // 0x62601
                if (v27 != 0) {
                    // bb262
                    v28 = v26 << v27;
                } else {
                    v28 = v26;
                }
                // bb264
                g10 = v28;
                int32_t v29 = g4 | v28; // 0x62603
                g10 = v29;
                int32_t v30 = g6; // 0x62605
                g4 = *(int32_t *)(v30 + 24);
                *(int32_t *)(v30 + 16) = v29;
                int32_t v31 = g4; // 0x6260b
                int32_t v32 = g6; // 0x6260b
                if (v31 == *(int32_t *)(v32 + 28)) {
                    // 0x62630
                    *(char *)(v32 + 4) = 1;
                } else {
                    int32_t v33 = v31 + 4; // 0x62610
                    g7 = v33;
                    *(int32_t *)(v32 + 24) = v33;
                    *(int32_t *)g4 = g10;
                }
                // 0x62618
                g4 = v10;
                int32_t v34 = g9; // 0x6261b
                g7 = v34;
                int32_t v35 = v34 + 24; // 0x6261d
                g9 = v35;
                *(int32_t *)(g6 + 20) = v35;
                int32_t v36 = g4; // 0x62623
                uint32_t v37 = g7 & (int32_t)&g862 & 31; // 0x62623
                int32_t v38; // 0x62623
                if (v37 != 0) {
                    // bb266
                    v38 = v36 >> v37;
                    g4 = v38;
                } else {
                    v38 = v36;
                }
                // bb267
                *(int32_t *)(g6 + 16) = v38;
              lab_0x62540:;
                int32_t v39 = g8;
                unsigned char v40 = *(char *)v39; // 0x62540
                int32_t v41 = v40; // 0x62540
                g7 = v41;
                if (v40 == 0) {
                    // break -> 0x625a8
                    break;
                }
                v7 = v41;
                a2 = v39;
            }
        }
      lab_0x625a8:
        // 0x625a8
        v5 = g9;
    } else {
        v5 = v4;
    }
    if (v5 <= 7) {
        int32_t v42 = g6; // 0x62640
        int32_t * v43 = (int32_t *)(v42 + 24); // 0x62640
        int32_t v44 = *v43; // 0x62640
        g7 = v44;
        int32_t v45;
        int32_t v46; // 0x6265a
        if (v44 == *(int32_t *)(v42 + 28)) {
            // 0x6268f
            *(char *)(v42 + 4) = 1;
            v46 = g6;
            v45 = 0;
        } else {
            int32_t v47 = v44 + 4; // 0x62648
            g10 = v47;
            *v43 = v47;
            *(int32_t *)g7 = g4;
            int32_t v48 = g6; // 0x62650
            int32_t v49 = (int32_t)*(char *)(v48 + 4); // 0x62650
            g4 = v49;
            v46 = v48;
            v45 = v49 ^ 1;
        }
        // 0x62657
        g4 = v45;
        g9 += 24;
        *(int32_t *)(v46 + 16) = 0;
        *(int32_t *)(g6 + 20) = g9;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v50 = v5 - 8; // 0x625b1
    g9 = v50;
    *(int32_t *)(g6 + 20) = v50;
    int32_t v51 = g6; // 0x62680
    if (v50 != 0) {
        // 0x62680
        g6 = v3;
        int32_t result = (int32_t)*(char *)(v51 + 4) ^ 1; // 0x62688
        g4 = result;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t * v52 = (int32_t *)(v51 + 24); // 0x625bf
    int32_t v53 = *v52; // 0x625bf
    g9 = v53;
    int32_t v54;
    int32_t v55; // 0x625da
    if (v53 == *(int32_t *)(v51 + 28)) {
        // 0x62697
        *(char *)(v51 + 4) = 1;
        v55 = g6;
        v54 = 0;
    } else {
        int32_t v56 = v53 + 4; // 0x625cb
        g7 = v56;
        *v52 = v56;
        *(int32_t *)g9 = g4;
        int32_t v57 = g6; // 0x625d3
        int32_t v58 = (int32_t)*(char *)(v57 + 4); // 0x625d3
        g4 = v58;
        v55 = v57;
        v54 = v58 ^ 1;
    }
    // 0x625da
    g4 = v54;
    *(int32_t *)(v55 + 16) = 0;
    *(int32_t *)(g6 + 20) = 32;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x626b0 - 0x62863
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_626b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x626b3
    int32_t v2 = g10; // 0x626b4
    int32_t v3 = g6; // 0x626b5
    g4 = a1;
    g9 = a3;
    g8 = a2;
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x626d1
    int32_t v5 = *v4; // 0x626d1
    g9 = v5;
    int32_t v6; // ebp
    int32_t v7;
    unsigned char v8;
    int32_t v9; // 0x6280d
    int32_t v10; // 0x626e7
    int32_t v11; // 0x6280d
    int32_t v12; // 0x62853
    int32_t v13; // 0x627e7
    if (v5 > 31) {
        // 0x626d9
        g10 = a2;
        int32_t v14 = 32 - v5; // 0x626e0
        g7 = v14;
        uint32_t v15 = v14 & (int32_t)&g862 & 31; // 0x626e2
        int32_t v16; // 0x626e2
        if (v15 != 0) {
            // bb
            v16 = a2 << v15;
            g10 = v16;
        } else {
            v16 = a2;
        }
        // bb266
        g10 = *(int32_t *)(a1 + 16) | v16;
        v10 = v5 - 32;
        g7 = v10;
        *v4 = v10;
        *(int32_t *)(g4 + 16) = g10;
        if (v10 != 0) {
            int32_t v17 = v8; // 0x627e0
            g6 = v17;
            v13 = *(int32_t *)(4 * v17 - 40 + v6);
            g6 = v13;
            if (v10 > 31) {
                int32_t v18 = g9; // 0x627f0
                int32_t v19 = v18 - 64; // 0x627f0
                g6 = v19;
                g7 = 64 - v18;
                g9 = v13;
                *(int32_t *)(g4 + 20) = v19;
                int32_t v20 = g9; // 0x62800
                uint32_t v21 = g7 & (int32_t)&g862 & 31; // 0x62800
                int32_t v22; // 0x62800
                if (v21 != 0) {
                    // bb280
                    v22 = v20 << v21;
                    g9 = v22;
                } else {
                    v22 = v20;
                }
                int32_t v23 = g10 | v22; // 0x62804
                g7 = v23;
                *(int32_t *)(g4 + 16) = v23;
                if (v19 != 0) {
                    // 0x627cf
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return g4;
                }
                // 0x6280d
                v9 = g4;
                v11 = *(int32_t *)(v9 + 24);
                g9 = v11;
                goto lab_0x62721;
            } else {
                int32_t v24 = g4; // 0x62850
                g6 = *(int32_t *)(v24 + 24);
                v12 = 64 - g9;
                g9 = v10;
                v7 = *(int32_t *)(v24 + 28);
                goto lab_0x627a0;
            }
        } else {
            int32_t v25 = g4; // 0x626f8
            int32_t * v26 = (int32_t *)(v25 + 24); // 0x626f8
            int32_t v27 = *v26; // 0x626f8
            g9 = v27;
            int32_t v28; // 0x62713
            if (v27 == *(int32_t *)(v25 + 28)) {
                // 0x62840
                *(char *)(v25 + 4) = 1;
                v28 = g4;
            } else {
                int32_t v29 = v27 + 4; // 0x62704
                g7 = v29;
                *v26 = v29;
                *(int32_t *)g9 = g10;
                int32_t v30 = g4; // 0x6270c
                g9 = *(int32_t *)(v30 + 24);
                v28 = v30;
            }
            // 0x6270f
            g7 = v8;
            *(int32_t *)(v28 + 20) = 0;
            int32_t v31 = *(int32_t *)(v6 - 40 + 4 * g7); // 0x6271a
            g7 = v31;
            *(int32_t *)(g4 + 16) = v31;
            v9 = g4;
            v11 = g9;
            goto lab_0x62721;
        }
    } else {
        int32_t v32 = *(int32_t *)(4 * v5 + (int32_t)&Generic_bitmask_table_at_87960); // 0x62757
        g10 = v32;
        int32_t v33 = 32 - v5; // 0x6275e
        int32_t v34 = *(int32_t *)(a1 + 24); // 0x62761
        g6 = v34;
        int32_t v35 = v32 & a2; // 0x62764
        g10 = v35;
        g7 = v33 % 256;
        uint32_t v36 = v33 & (int32_t)&g862 & 31; // 0x6276a
        int32_t v37; // 0x6276a
        if (v36 != 0) {
            // bb268
            v37 = v35 << v36;
            g10 = v37;
        } else {
            v37 = v35;
        }
        int32_t * v38 = (int32_t *)(a1 + 16); // 0x6276c
        int32_t v39 = *v38 | v37; // 0x6276c
        g10 = v39;
        *v38 = v39;
        int32_t v40;
        int32_t v41; // 0x62790
        if (v34 == *(int32_t *)(a1 + 28)) {
            // 0x62818
            *(char *)(g4 + 4) = 1;
            v41 = g4;
            v40 = g6;
        } else {
            int32_t v42 = g6 + 4; // 0x6277b
            g7 = v42;
            *(int32_t *)(g4 + 24) = v42;
            *(int32_t *)g6 = g10;
            int32_t v43 = g4; // 0x62783
            int32_t v44 = *(int32_t *)(v43 + 28); // 0x62783
            g7 = v44;
            g6 = *(int32_t *)(v43 + 24);
            v41 = v43;
            v40 = v44;
        }
        int32_t v45 = g9; // 0x6278c
        g7 = v45;
        g10 = g8;
        *(int32_t *)(v41 + 20) = v45;
        uint32_t v46 = g7 & (int32_t)&g862 & 31; // 0x62793
        if (v46 != 0) {
            // bb271
            g10 >>= v46;
        }
        int32_t v47 = v8; // 0x62795
        g7 = v47;
        int32_t v48 = *(int32_t *)(4 * v47 - 40 + v6); // 0x62799
        g7 = v48;
        v10 = g9;
        v12 = v33;
        v7 = v40;
        v13 = v48;
        goto lab_0x627a0;
    }
  lab_0x627a0:
    // 0x627a0
    g8 = v13;
    g7 = v12 % 256;
    int32_t v49 = *(int32_t *)(4 * v10 + (int32_t)&Generic_bitmask_table_at_87960); // 0x627a7
    int32_t v50 = v49 & v13; // 0x627a7
    uint32_t v51 = v12 & (int32_t)&g862 & 31; // 0x627ae
    int32_t v52; // 0x627ae
    if (v51 != 0) {
        // bb273
        v52 = v50 << v51;
    } else {
        v52 = v50;
    }
    // bb275
    g8 = v52;
    int32_t v53 = g10 | v52; // 0x627b0
    g8 = v53;
    *(int32_t *)(g4 + 16) = v53;
    if (g6 == v7) {
        // 0x62828
        *(char *)(g4 + 4) = 1;
    } else {
        int32_t v54 = g6 + 4; // 0x627ba
        g7 = v54;
        *(int32_t *)(g4 + 24) = v54;
        *(int32_t *)g6 = g8;
    }
    // 0x627c2
    g6 = v13;
    int32_t v55 = g9; // 0x627c5
    g7 = v55;
    *(int32_t *)(g4 + 20) = v55;
    int32_t v56 = g6; // 0x627ca
    uint32_t v57 = g7 & (int32_t)&g862 & 31; // 0x627ca
    int32_t v58; // 0x627ca
    if (v57 != 0) {
        // bb276
        v58 = v56 >> v57;
        g6 = v58;
    } else {
        v58 = v56;
    }
    // bb277
    *(int32_t *)(g4 + 16) = v58;
    // 0x627cf
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x62721:
    // 0x62721
    if (v11 == *(int32_t *)(v9 + 28)) {
        // 0x62830
        *(char *)(v9 + 4) = 1;
    } else {
        int32_t v59 = v11 + 4; // 0x6272a
        g6 = v59;
        *(int32_t *)(v9 + 24) = v59;
        *(int32_t *)g9 = g7;
    }
    // 0x62732
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 32;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x62870 - 0x62a71
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_62870(int32_t a1, int32_t a2, int32_t a3) {
    // 0x62870
    g7 = 32;
    int32_t v1 = g8; // 0x62878
    int32_t v2 = g10; // 0x62879
    int32_t v3 = g6; // 0x6287a
    g9 = a1;
    int32_t v4 = *(int32_t *)(a1 + 24); // 0x62881
    g6 = v4;
    int32_t v5 = *(int32_t *)(a1 + 20); // 0x62884
    g4 = v5;
    int32_t v6 = v4 - *(int32_t *)(a1 + 32); // 0x62887
    g6 = v6;
    int32_t v7 = a3 + 32 - v5 + 8 * v6; // 0x6288f
    g7 = v7;
    if (v7 > *(int32_t *)(a1 + 8)) {
        // 0x629f0
        *(char *)(a1 + 4) = 1;
        g4 = 0;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x6289b
    g6 = a3;
    g7 = a2;
    g8 = a3;
    g10 = a2;
    int32_t v8; // 0x6296b
    int32_t v9; // 0x62965
    if (a3 > 7) {
        int32_t v10 = a2; // 0x628fb
        while (true) {
            int32_t v11 = (int32_t)*(char *)v10; // 0x628fb
            g6 = v11;
            int32_t v12 = 32 - v5; // 0x628b5
            g7 = v12;
            int32_t v13; // 0x628f0
            if (v5 > 7) {
                int32_t v14 = v5 - 8; // 0x628b7
                g4 = v14;
                uint32_t v15 = v12 & (int32_t)&g862 & 31; // 0x628ba
                if (v15 != 0) {
                    // bb
                    g6 = v11 << v15;
                }
                // bb46
                g7 = *(int32_t *)(a1 + 16);
                *(int32_t *)(a1 + 20) = v14;
                int32_t v16 = g6 | g7; // 0x628c2
                g7 = v16;
                *(int32_t *)(g9 + 16) = v16;
                if (v14 == 0) {
                    int32_t v17 = g9; // 0x628cb
                    int32_t * v18 = (int32_t *)(v17 + 24); // 0x628cb
                    int32_t v19 = *v18; // 0x628cb
                    g4 = v19;
                    if (v19 == *(int32_t *)(v17 + 28)) {
                        // 0x62a00
                        *(char *)(v17 + 4) = 1;
                    } else {
                        int32_t v20 = v19 + 4; // 0x628d7
                        g6 = v20;
                        *v18 = v20;
                        *(int32_t *)g4 = g7;
                    }
                    // 0x628df
                    *(int32_t *)(g9 + 16) = 0;
                    *(int32_t *)(g9 + 20) = 32;
                }
                int32_t v21 = g8 - 8; // 0x628ed
                g8 = v21;
                v13 = g10 + 1;
                g10 = v13;
                if (v21 <= 7) {
                    // break -> 0x62957
                    break;
                }
            } else {
                int32_t v22 = *(int32_t *)(4 * v5 + (int32_t)&Generic_bitmask_table_at_87960); // 0x62910
                int32_t v23 = v22 & v11; // 0x62910
                uint32_t v24 = v12 & (int32_t)&g862 & 31; // 0x62917
                int32_t v25; // 0x62917
                if (v24 != 0) {
                    // bb48
                    v25 = v23 << v24;
                } else {
                    v25 = v23;
                }
                // bb50
                g6 = v25;
                int32_t v26 = *(int32_t *)(a1 + 24); // 0x62919
                g7 = v26;
                int32_t * v27 = (int32_t *)(a1 + 16); // 0x6291c
                int32_t v28 = *v27 | v25; // 0x6291c
                g6 = v28;
                *v27 = v28;
                if (v26 == *(int32_t *)(a1 + 28)) {
                    // 0x629e0
                    *(char *)(g9 + 4) = 1;
                } else {
                    // 0x6292e
                    *(int32_t *)(g9 + 24) = v26 + 4;
                    g7 = v26;
                    *(int32_t *)v26 = g6;
                }
                // 0x6293c
                g6 = v11;
                int32_t v29 = g4; // 0x6293f
                g7 = v29;
                g8 -= 8;
                int32_t v30 = v29 + 24; // 0x62944
                g4 = v30;
                g10++;
                *(int32_t *)(g9 + 20) = v30;
                int32_t v31 = g6; // 0x6294d
                uint32_t v32 = g7 & (int32_t)&g862 & 31; // 0x6294d
                int32_t v33; // 0x6294d
                if (v32 != 0) {
                    // bb53
                    v33 = v31 >> v32;
                    g6 = v33;
                } else {
                    v33 = v31;
                }
                // bb54
                *(int32_t *)(g9 + 16) = v33;
                if (g8 <= 7) {
                    // break -> 0x62957
                    break;
                }
                // .dec_label_pc_628f8_crit_edge
                v13 = g10;
            }
            int32_t v34 = g9; // 0x628f8
            int32_t v35 = *(int32_t *)(v34 + 20); // 0x628f8
            g4 = v35;
            a1 = v34;
            v10 = v13;
            v5 = v35;
        }
        // 0x62957
        g10 = a2;
        int32_t v36 = a3 - 8; // 0x6295d
        g4 = v36;
        uint32_t v37 = v36 / 8; // 0x62962
        v9 = a2 + 1 + v37;
        g7 = v9;
        v8 = -8 * v37 + v36;
        g6 = v8;
    } else {
        v9 = a2;
        v8 = a3;
    }
    if (v8 != 0) {
        int32_t v38 = g9; // 0x62988
        int32_t * v39 = (int32_t *)(v38 + 20); // 0x62988
        int32_t v40 = *v39; // 0x62988
        g10 = v40;
        int32_t v41 = (int32_t)*(char *)v9; // 0x6298b
        g8 = v41;
        int32_t v42 = v40 - v8; // 0x6298e
        if (v40 < v8) {
            int32_t v43 = *(int32_t *)(4 * v40 + (int32_t)&Generic_bitmask_table_at_87960); // 0x62a10
            int32_t v44 = v8 - v40; // 0x62a1c
            g6 = v44;
            int32_t v45 = 32 - v40; // 0x62a1e
            g7 = v45;
            int32_t v46 = v43 & v41; // 0x62a23
            uint32_t v47 = v45 & (int32_t)&g862 & 31; // 0x62a25
            int32_t v48; // 0x62a25
            if (v47 != 0) {
                // bb60
                v48 = v46 << v47;
            } else {
                v48 = v46;
            }
            // bb62
            g4 = v48;
            int32_t v49 = *(int32_t *)(v38 + 24); // 0x62a27
            g7 = v49;
            int32_t * v50 = (int32_t *)(v38 + 16); // 0x62a2a
            int32_t v51 = *v50 | v48; // 0x62a2a
            g4 = v51;
            *v50 = v51;
            int32_t v52;
            if (v49 == *(int32_t *)(v38 + 28)) {
                // 0x62a5e
                *(char *)(g9 + 4) = 1;
                v52 = 0;
            } else {
                int32_t v53 = g7 + 4; // 0x62a35
                g6 = v53;
                *(int32_t *)(g9 + 24) = v53;
                *(int32_t *)g7 = g4;
                int32_t v54 = (int32_t)*(char *)(g9 + 4); // 0x62a3d
                g4 = v54;
                v52 = v54 ^ 1;
            }
            // 0x62a44
            g4 = v52;
            int32_t v55 = g10; // 0x62a44
            g7 = v55;
            int32_t v56 = g8; // 0x62a46
            uint32_t v57 = v55 & (int32_t)&g862 & 31; // 0x62a46
            int32_t v58; // 0x62a46
            if (v57 != 0) {
                // bb63
                v58 = v56 >> v57;
                g8 = v58;
            } else {
                v58 = v56;
            }
            // bb64
            g7 = 32 - v44;
            *(int32_t *)(g9 + 16) = v58;
            *(int32_t *)(g9 + 20) = g7;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        int32_t v59 = *(int32_t *)(4 * v8 + (int32_t)&Generic_bitmask_table_at_87960); // 0x62992
        g8 = v59 & v41;
        g7 = 32 - v40;
        g10 = v42;
        *v39 = v42;
        int32_t v60 = g8; // 0x629a5
        uint32_t v61 = g7 & (int32_t)&g862 & 31; // 0x629a5
        int32_t v62; // 0x629a5
        if (v61 != 0) {
            // bb57
            v62 = v60 << v61;
            g8 = v62;
        } else {
            v62 = v60;
        }
        int32_t * v63 = (int32_t *)(g9 + 16); // 0x629a7
        int32_t v64 = *v63 | v62; // 0x629a7
        g8 = v64;
        *v63 = v64;
        if (v42 == 0) {
            int32_t v65 = g9; // 0x629b1
            int32_t * v66 = (int32_t *)(v65 + 24); // 0x629b1
            int32_t v67 = *v66; // 0x629b1
            g4 = v67;
            int32_t v68;
            int32_t v69; // 0x629cc
            if (v67 == *(int32_t *)(v65 + 28)) {
                // 0x62a66
                *(char *)(v65 + 4) = 1;
                v69 = g9;
                v68 = 0;
            } else {
                int32_t v70 = v67 + 4; // 0x629bd
                g7 = v70;
                *v66 = v70;
                *(int32_t *)g4 = g8;
                int32_t v71 = g9; // 0x629c5
                int32_t v72 = (int32_t)*(char *)(v71 + 4); // 0x629c5
                g4 = v72;
                v69 = v71;
                v68 = v72 ^ 1;
            }
            // 0x629cc
            g4 = v68;
            *(int32_t *)(v69 + 16) = 0;
            *(int32_t *)(g9 + 20) = 32;
            // 0x62979
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
    }
    int32_t result = (int32_t)*(char *)(g9 + 4) ^ 1; // 0x62976
    g4 = result;
    // 0x62979
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x62a80 - 0x62a8d
int32_t function_62a80(int32_t a1) {
    int32_t result = function_62870(8 * a1, (int32_t)&g870, (int32_t)&g870); // 0x62a88
    g4 = result;
    return result;
}

// Address range: 0x62a90 - 0x62d89
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_62a90(int32_t a1, int32_t a2) {
    int128_t v1 = g879; // 0x62a91
    int128_t v2 = __asm_xorps(v1, v1); // 0x62a91
    int32_t v3 = g8; // 0x62a96
    int32_t v4 = g10; // 0x62a97
    int32_t v5 = g6; // bp-16
    int128_t v6 = __asm_movss(a2); // 0x62a9c
    g4 = a1;
    __asm_ucomiss_1648(v2, v6);
    int128_t v7;
    if (&v5 < (int32_t *)4 || &v5 == (int32_t *)4) {
        // 0x62c30
        v7 = __asm_movaps(v6);
    } else {
        // 0x62aad
        v7 = __asm_xorps(__asm_movss((int32_t)g233), v6);
    }
    int32_t v8 = __asm_cvttss2si_1647(v7); // 0x62ab8
    g8 = v8;
    g10 = *(int32_t *)(g4 + 20);
    g7 = 32;
    int128_t v9 = __asm_mulss(__asm_movss(0x42000000), v6); // 0x62acc
    g879 = v9;
    g7 -= g10;
    int32_t v10 = __asm_cvttss2si_1647(v9); // 0x62ad2
    int32_t v11 = v10 >> 31; // 0x62ad8
    int32_t v12 = (v11 ^ v10) - v11; // 0x62add
    g6 = v12;
    int32_t v13 = v12 % 32; // bp-20
    int32_t v14 = v8 % 2; // 0x62ae9
    g9 = v14;
    uint32_t v15 = g7 & (int32_t)&g862 & 31; // 0x62aec
    int32_t v16; // 0x62aec
    if (v15 != 0) {
        // bb
        v16 = v14 << v15;
        g9 = v16;
    } else {
        v16 = v14;
    }
    int32_t v17 = g4; // 0x62aee
    g9 = *(int32_t *)(v17 + 16) | v16;
    int32_t v18 = g10 - 1; // 0x62af1
    g7 = v18;
    *(int32_t *)(v17 + 20) = v18;
    *(int32_t *)(g4 + 16) = g9;
    if (v18 != 0) {
        int32_t v19 = g6 % 2; // 0x62c45
        g6 = v19;
        uint32_t v20 = g10; // 0x62c48
        int32_t v21 = 33 - v20; // 0x62c48
        g7 = v21;
        int32_t v22 = v20 - 2; // 0x62c4a
        g10 = v22;
        uint32_t v23 = v21 & (int32_t)&g862 & 31; // 0x62c4d
        if (v23 != 0) {
            // bb61
            g6 = v19 << v23;
        }
        // bb63
        *(int32_t *)(g4 + 20) = v22;
        int32_t v24 = g9 | g6; // 0x62c52
        g6 = v24;
        *(int32_t *)(g4 + 16) = v24;
        if (g10 == 0) {
            int32_t v25 = g4; // 0x62c5f
            int32_t * v26 = (int32_t *)(v25 + 24); // 0x62c5f
            uint32_t v27 = *v26; // 0x62c5f
            g9 = v27;
            if (v27 == *(int32_t *)(v25 + 28)) {
                // 0x62d30
                *(char *)(v25 + 4) = 1;
            } else {
                int32_t v28 = v27 + 4; // 0x62c6b
                g7 = v28;
                *v26 = v28;
                *(int32_t *)g9 = g6;
            }
            // 0x62c73
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 20) = 32;
        }
    } else {
        int32_t v29 = g4; // 0x62b02
        int32_t * v30 = (int32_t *)(v29 + 24); // 0x62b02
        uint32_t v31 = *v30; // 0x62b02
        g7 = v31;
        if (v31 == *(int32_t *)(v29 + 28)) {
            // 0x62d20
            *(char *)(v29 + 4) = 1;
        } else {
            int32_t v32 = v31 + 4; // 0x62b0e
            g6 = v32;
            *v30 = v32;
            *(int32_t *)g7 = g9;
        }
        // 0x62b16
        g9 = v13;
        *(int32_t *)(g4 + 20) = 31;
        int32_t v33 = g9 % 2; // 0x62b20
        g9 = v33;
        *(int32_t *)(g4 + 16) = v33;
    }
    int32_t v34 = v13 | v8; // 0x62b29
    g6 = v34;
    int32_t v35; // 0x62c9a
    if (v34 == 0) {
        goto lab_0x62c28;
    } else {
        int128_t v36 = __asm_movss(-0x43000000); // 0x62b31
        g879 = v36;
        g9 = 0;
        g7 = 32;
        g6 = *(int32_t *)(g4 + 20);
        __asm_ucomiss_1648(v36, v6);
        int32_t v37 = g9 & -256 | (int32_t)true; // 0x62b46
        g9 = v37;
        int32_t v38 = g6; // 0x62b49
        int32_t v39 = g7 - v38; // 0x62b49
        g7 = v39;
        int32_t v40 = v38 - 1; // 0x62b4b
        g6 = v40;
        uint32_t v41 = v39 & (int32_t)&g862 & 31; // 0x62b4e
        if (v41 != 0) {
            // bb47
            g9 = v37 << v41;
        }
        // bb49
        *(int32_t *)(g4 + 20) = v40;
        int32_t * v42 = (int32_t *)(g4 + 16); // 0x62b53
        int32_t v43 = *v42 | g9; // 0x62b53
        g9 = v43;
        *v42 = v43;
        if (v40 == 0) {
            int32_t v44 = g4; // 0x62b5d
            int32_t * v45 = (int32_t *)(v44 + 24); // 0x62b5d
            uint32_t v46 = *v45; // 0x62b5d
            g7 = v46;
            if (v46 == *(int32_t *)(v44 + 28)) {
                // 0x62d40
                *(char *)(v44 + 4) = 1;
            } else {
                int32_t v47 = v46 + 4; // 0x62b69
                g6 = v47;
                *v45 = v47;
                *(int32_t *)g7 = g9;
            }
            // 0x62b71
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 20) = 32;
        }
        // 0x62b7f
        if (v8 == 0) {
            goto lab_0x62bd0;
        } else {
            int32_t v48 = g4; // 0x62b83
            int32_t * v49 = (int32_t *)(v48 + 20); // 0x62b83
            int32_t v50 = *v49; // 0x62b83
            g9 = v50;
            int32_t v51 = v8 - 1; // 0x62b86
            g8 = v51;
            if (v50 > 13) {
                int32_t v52 = 32 - v50; // 0x62b97
                g7 = v52;
                int32_t v53 = v50 - 14; // 0x62b99
                g9 = v53;
                uint32_t v54 = v52 & (int32_t)&g862 & 31; // 0x62b9c
                if (v54 != 0) {
                    // bb52
                    g8 = v51 << v54;
                }
                // bb54
                *v49 = v53;
                int32_t * v55 = (int32_t *)(g4 + 16); // 0x62ba1
                int32_t v56 = *v55 | g8; // 0x62ba1
                g8 = v56;
                *v55 = v56;
                if (v53 == 0) {
                    int32_t v57 = g4; // 0x62bab
                    int32_t * v58 = (int32_t *)(v57 + 24); // 0x62bab
                    uint32_t v59 = *v58; // 0x62bab
                    g9 = v59;
                    if (v59 == *(int32_t *)(v57 + 28)) {
                        // 0x62d80
                        *(char *)(v57 + 4) = 1;
                    } else {
                        int32_t v60 = v59 + 4; // 0x62bb7
                        g7 = v60;
                        *v58 = v60;
                        *(int32_t *)g9 = g8;
                    }
                    // 0x62bbf
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)(g4 + 20) = 32;
                }
                goto lab_0x62bd0;
            } else {
                int32_t v61 = *(int32_t *)(4 * v50 + (int32_t)&Generic_bitmask_table_at_87960); // 0x62cd8
                int32_t v62 = 32 - v50; // 0x62ce4
                g7 = v62;
                int32_t v63 = v61 & v51; // 0x62ce6
                g6 = v63;
                uint32_t v64 = v62 & (int32_t)&g862 & 31; // 0x62ce8
                int32_t v65; // 0x62ce8
                if (v64 != 0) {
                    // bb71
                    v65 = v63 << v64;
                    g6 = v65;
                } else {
                    v65 = v63;
                }
                uint32_t v66 = *(int32_t *)(v48 + 24); // 0x62cea
                g7 = v66;
                int32_t * v67 = (int32_t *)(v48 + 16); // 0x62ced
                int32_t v68 = *v67 | v65; // 0x62ced
                g6 = v68;
                *v67 = v68;
                if (v66 == *(int32_t *)(v48 + 28)) {
                    // 0x62d60
                    *(char *)(g4 + 4) = 1;
                } else {
                    int32_t v69 = g7 + 4; // 0x62cf8
                    g10 = v69;
                    *(int32_t *)(g4 + 24) = v69;
                    *(int32_t *)g7 = g6;
                }
                int32_t v70 = g9; // 0x62d00
                g7 = v70;
                *(int32_t *)(g4 + 20) = v70 + 18;
                g9 = v13;
                int32_t v71 = g8; // 0x62d0b
                uint32_t v72 = g7 & (int32_t)&g862 & 31; // 0x62d0b
                int32_t v73; // 0x62d0b
                if (v72 != 0) {
                    // bb75
                    v73 = v71 >> v72;
                    g8 = v73;
                } else {
                    v73 = v71;
                }
                // bb76
                *(int32_t *)(g4 + 16) = v73;
                if (v13 != 0) {
                    // .dec_label_pc_62bd7_crit_edge
                    v35 = v13;
                    goto lab_0x62bd7;
                } else {
                    goto lab_0x62c28;
                }
            }
        }
    }
  lab_0x62c28:
    // 0x62c28
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
  lab_0x62bd0:
    // 0x62bd0
    g9 = v13;
    if (v13 == 0) {
        goto lab_0x62c28;
    } else {
        v35 = v13;
        goto lab_0x62bd7;
    }
  lab_0x62bd7:;
    int32_t v74 = g4; // 0x62bd7
    int32_t * v75 = (int32_t *)(v74 + 20); // 0x62bd7
    uint32_t v76 = *v75; // 0x62bd7
    g9 = v76;
    g6 = v35;
    int32_t v77 = 32 - v76; // 0x62beb
    g7 = v77;
    if (v76 <= 4) {
        int32_t v78 = *(int32_t *)(4 * v76 + (int32_t)&Generic_bitmask_table_at_87960); // 0x62c9a
        int32_t v79 = v78 & v35; // 0x62c9a
        g6 = v79;
        uint32_t v80 = v77 & (int32_t)&g862 & 31; // 0x62ca1
        int32_t v81; // 0x62ca1
        if (v80 != 0) {
            // bb64
            v81 = v79 << v80;
            g6 = v81;
        } else {
            v81 = v79;
        }
        uint32_t v82 = *(int32_t *)(v74 + 24); // 0x62ca3
        g7 = v82;
        int32_t * v83 = (int32_t *)(v74 + 16); // 0x62ca6
        int32_t v84 = *v83 | v81; // 0x62ca6
        g6 = v84;
        *v83 = v84;
        if (v82 == *(int32_t *)(v74 + 28)) {
            // 0x62d50
            *(char *)(g4 + 4) = 1;
        } else {
            int32_t v85 = g7 + 4; // 0x62cb5
            g10 = v85;
            *(int32_t *)(g4 + 24) = v85;
            *(int32_t *)g7 = g6;
        }
        // 0x62cbd
        g6 = v13;
        int32_t v86 = g9; // 0x62cc0
        g7 = v86;
        int32_t v87 = v86 + 27; // 0x62cc2
        g9 = v87;
        *(int32_t *)(g4 + 20) = v87;
        int32_t v88 = g6; // 0x62cc8
        uint32_t v89 = g7 & (int32_t)&g862 & 31; // 0x62cc8
        int32_t v90; // 0x62cc8
        if (v89 != 0) {
            // bb68
            v90 = v88 >> v89;
            g6 = v90;
        } else {
            v90 = v88;
        }
        // bb69
        *(int32_t *)(g4 + 16) = v90;
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return g4;
    }
    int32_t v91 = v76 - 5; // 0x62bed
    g9 = v91;
    *v75 = v91;
    int32_t v92 = g6; // 0x62bf3
    uint32_t v93 = g7 & (int32_t)&g862 & 31; // 0x62bf3
    int32_t v94; // 0x62bf3
    if (v93 != 0) {
        // bb56
        v94 = v92 << v93;
        g6 = v94;
    } else {
        v94 = v92;
    }
    int32_t * v95 = (int32_t *)(g4 + 16); // 0x62bf5
    int32_t v96 = *v95 | v94; // 0x62bf8
    g7 = v96;
    *v95 = v96;
    if (v91 == 0) {
        int32_t v97 = g4; // 0x62c01
        int32_t * v98 = (int32_t *)(v97 + 24); // 0x62c01
        uint32_t v99 = *v98; // 0x62c01
        g9 = v99;
        if (v99 == *(int32_t *)(v97 + 28)) {
            // 0x62d70
            *(char *)(v97 + 4) = 1;
        } else {
            int32_t v100 = v99 + 4; // 0x62c0d
            g6 = v100;
            *v98 = v100;
            *(int32_t *)g9 = g7;
        }
        // 0x62c15
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 20) = 32;
    }
    goto lab_0x62c28;
}

// Address range: 0x62d90 - 0x6336b
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_62d90(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x62d93
    int32_t v2 = g10; // 0x62d94
    int32_t v3 = g6; // 0x62d95
    int128_t v4 = __asm_movss(a2); // 0x62d9d
    g4 = a1;
    int128_t v5 = __asm_unpcklps(v4, v4); // 0x62da5
    int128_t v6 = __asm_movsd_1649(-0x4060000000000000); // xmm1
    int128_t v7 = __asm_cvtps2pd(v5); // 0x62db0
    bool v8 = a3 == 1; // 0x62db3
    int128_t v9; // 0x62dc7
    if (!v8) {
        // 0x62d90
        v9 = v6;
    } else {
        int128_t v10 = __asm_movsd_1649(-0x4040000000000000); // 0x62dbd
        v6 = v10;
        v9 = v10;
    }
    bool v11 = false; // cf
    g9 = 0;
    __asm_ucomisd(v9, v7);
    int128_t v12 = v6; // 0x62dcb
    g9 = g9 & -256 | (int32_t)!v11;
    __asm_ucomiss_1648(__asm_xorps(v12, v12), v5);
    int32_t v13 = g9; // 0x62dd4
    int32_t v14; // 0x62f17
    if (v11 || true) {
        // 0x62f10
        v14 = __asm_cvttss2si_1647(__asm_movaps(v5));
        g8 = v14;
        if (v8) {
            goto lab_0x62df9;
        } else {
            goto lab_0x62f24;
        }
    } else {
        int128_t v15 = __asm_movss((int32_t)g233); // 0x62ddd
        int32_t v16 = __asm_cvttss2si_1647(__asm_xorps(v15, v5)); // 0x62dec
        g8 = v16;
        if (!v8) {
            v14 = v16;
            goto lab_0x62f24;
        } else {
            v14 = v16;
            goto lab_0x62df9;
        }
    }
  lab_0x62df9:;
    int32_t v17 = __asm_cvttss2si_1647(__asm_mulss_1654(v5, 0x41000000)); // 0x62e01
    int32_t v18 = v17 >> 31; // 0x62e07
    g9 = v18;
    int32_t v19 = (v18 ^ v17) - v18; // 0x62e0c
    g6 = v19;
    int32_t v20 = v19 % 8;
    int32_t v21 = v14;
    goto lab_0x62e11;
  lab_0x62f24:;
    int32_t v183 = __asm_cvttss2si_1647(__asm_mulss_1654(v5, 0x42000000)); // 0x62f2c
    int32_t v184 = v183 >> 31; // 0x62f32
    g9 = v184;
    int32_t v185 = (v184 ^ v183) - v184; // 0x62f37
    g6 = v185;
    v20 = v185 % 32;
    v21 = v14;
    goto lab_0x62e11;
  lab_0x62e11:
    // 0x62e11
    g6 = v20;
    int32_t v22 = v21 - (int32_t)&g143; // 0x62e11
    g7 = 32;
    int32_t * v23 = (int32_t *)(g4 + 20); // 0x62e1d
    uint32_t v24 = *v23; // 0x62e1d
    g8 = v24;
    bool v25 = v22 == 0 | v22 < 0 != ((v22 ^ v21) & (v21 ^ (int32_t)&g143)) < 0; // 0x62e20
    g10 = v25;
    int32_t v26 = v24 - 1; // 0x62e28
    g9 = v26;
    g7 = 32 - v24;
    *v23 = v26;
    int32_t v27 = g10; // 0x62e30
    uint32_t v28 = g7 & (int32_t)&g862 & 31; // 0x62e30
    int32_t v29; // 0x62e30
    if (v28 != 0) {
        // bb
        v29 = v27 << v28;
        g10 = v29;
    } else {
        v29 = v27;
    }
    int32_t * v30 = (int32_t *)(g4 + 16); // 0x62e32
    int32_t v31 = *v30 | v29; // 0x62e32
    g10 = v31;
    *v30 = v31;
    int32_t v32; // 0x62e4d
    if (v26 == 0) {
        int32_t v33 = g4; // 0x62f48
        int32_t * v34 = (int32_t *)(v33 + 24); // 0x62f48
        uint32_t v35 = *v34; // 0x62f48
        g9 = v35;
        if (v35 == *(int32_t *)(v33 + 28)) {
            // 0x63178
            *(char *)(v33 + 4) = 1;
        } else {
            int32_t v36 = v35 + 4; // 0x62f54
            g7 = v36;
            *v34 = v36;
            *(int32_t *)g9 = g10;
        }
        // 0x62f5c
        *(int32_t *)(g4 + 16) = 0;
        g8 = 31;
        g7 = 0;
        *(int32_t *)(g4 + 20) = 32;
        g10 = 0;
        v32 = g8;
    } else {
        uint32_t v37 = g8; // 0x62e45
        g7 = 33 - v37;
        int32_t v38 = v37 - 2; // 0x62e47
        g8 = v38;
        v32 = v38;
    }
    // 0x62e4a
    g9 = v21;
    *(int32_t *)(g4 + 20) = v32;
    int32_t v39 = g9 % 2; // 0x62e50
    g9 = v39;
    uint32_t v40 = g7 & (int32_t)&g862 & 31; // 0x62e53
    int32_t v41; // 0x62e53
    if (v40 != 0) {
        // bb310
        v41 = v39 << v40;
        g9 = v41;
    } else {
        v41 = v39;
    }
    int32_t v42 = g10 | v41; // 0x62e55
    g9 = v42;
    *(int32_t *)(g4 + 16) = v42;
    uint32_t v43 = g8; // 0x63068
    if (a3 == 2) {
        if (v43 == 0) {
            int32_t v44 = g4; // 0x6306c
            int32_t * v45 = (int32_t *)(v44 + 24); // 0x6306c
            uint32_t v46 = *v45; // 0x6306c
            g7 = v46;
            if (v46 == *(int32_t *)(v44 + 28)) {
                // 0x63310
                *(char *)(v44 + 4) = 1;
            } else {
                int32_t v47 = v46 + 4; // 0x63078
                g6 = v47;
                *v45 = v47;
                *(int32_t *)g7 = g9;
            }
            // 0x63080
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 20) = 32;
        }
        // 0x6308e
        g6 = v21;
        if (v21 == 0) {
            goto lab_0x62f08;
        } else {
            int32_t * v48 = (int32_t *)(g4 + 20); // 0x63099
            int32_t v49 = *v48; // 0x63099
            g10 = v13;
            int32_t v50 = 32 - v49; // 0x630a4
            g7 = v50;
            int32_t v51 = v49 - 1; // 0x630a6
            g9 = v51;
            uint32_t v52 = v50 & (int32_t)&g862 & 31; // 0x630a9
            if (v52 != 0) {
                // bb331
                g10 = v13 << v52;
            }
            // bb333
            *v48 = v51;
            int32_t * v53 = (int32_t *)(g4 + 16); // 0x630ae
            int32_t v54 = *v53 | g10; // 0x630ae
            g10 = v54;
            *v53 = v54;
            if (g9 == 0) {
                int32_t v55 = g4; // 0x630b8
                int32_t * v56 = (int32_t *)(v55 + 24); // 0x630b8
                uint32_t v57 = *v56; // 0x630b8
                g9 = v57;
                if (v57 == *(int32_t *)(v55 + 28)) {
                    // 0x63350
                    *(char *)(v55 + 4) = 1;
                } else {
                    int32_t v58 = v57 + 4; // 0x630c4
                    g7 = v58;
                    *v56 = v58;
                    *(int32_t *)g9 = g10;
                }
                // 0x630cc
                *(int32_t *)(g4 + 16) = 0;
                g10 = 0;
                g9 = 32;
                *(int32_t *)(g4 + 20) = 32;
            }
            int32_t v59 = v21 - 1; // 0x630e4
            g6 = v59;
            int32_t v60 = g9; // 0x63228
            if (!v25) {
                // 0x63228
                if (v60 > 13) {
                    int32_t v61 = 32 - v60; // 0x632b5
                    g7 = v61;
                    int32_t v62 = v60 - 14; // 0x632b7
                    g9 = v62;
                    uint32_t v63 = v61 & (int32_t)&g862 & 31; // 0x632ba
                    if (v63 != 0) {
                        // bb362
                        g6 = v59 << v63;
                    }
                    // bb364
                    *(int32_t *)(g4 + 20) = v62;
                    int32_t v64 = g10 | g6; // 0x632bf
                    g6 = v64;
                    *(int32_t *)(g4 + 16) = v64;
                    if (v62 == 0) {
                        goto lab_0x62ee6;
                    } else {
                        goto lab_0x62f08;
                    }
                } else {
                    int32_t v65 = *(int32_t *)(4 * v60 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63231
                    int32_t v66 = 32 - v60; // 0x6323d
                    g7 = v66;
                    int32_t v67 = v65 & v59; // 0x6323f
                    g8 = v67;
                    uint32_t v68 = v66 & (int32_t)&g862 & 31; // 0x63241
                    int32_t v69; // 0x63241
                    if (v68 != 0) {
                        // bb355
                        v69 = v67 << v68;
                        g8 = v69;
                    } else {
                        v69 = v67;
                    }
                    int32_t v70 = g4; // 0x63243
                    g7 = *(int32_t *)(v70 + 24);
                    int32_t v71 = g10 | v69; // 0x63246
                    g8 = v71;
                    *(int32_t *)(v70 + 16) = v71;
                    uint32_t v72 = g7; // 0x6324b
                    int32_t v73 = g4; // 0x6324b
                    if (v72 == *(int32_t *)(v73 + 28)) {
                        // 0x63359
                        *(char *)(v73 + 4) = 1;
                    } else {
                        int32_t v74 = v72 + 4; // 0x63254
                        g10 = v74;
                        *(int32_t *)(v73 + 24) = v74;
                        *(int32_t *)g7 = g8;
                    }
                    int32_t v75 = g9; // 0x6325c
                    g7 = v75;
                    int32_t v76 = v75 + 18; // 0x6325e
                    g9 = v76;
                    uint32_t v77 = g6; // 0x63261
                    uint32_t v78 = v75 & (int32_t)&g862 & 31; // 0x63261
                    if (v78 != 0) {
                        // bb359
                        g6 = v77 >> v78;
                    }
                    // bb360
                    *(int32_t *)(g4 + 20) = v76;
                    *(int32_t *)(g4 + 16) = g6;
                    goto lab_0x62f08;
                }
            } else {
                // 0x630f1
                if (v60 > 10) {
                    int32_t v79 = 32 - v60; // 0x632dd
                    g7 = v79;
                    int32_t v80 = v60 - 11; // 0x632df
                    g9 = v80;
                    uint32_t v81 = v79 & (int32_t)&g862 & 31; // 0x632e2
                    if (v81 != 0) {
                        // bb366
                        g6 = v59 << v81;
                    }
                    // bb368
                    *(int32_t *)(g4 + 20) = v80;
                    int32_t v82 = g10 | g6; // 0x632e7
                    g6 = v82;
                    *(int32_t *)(g4 + 16) = v82;
                    if (v80 == 0) {
                        goto lab_0x62ee6;
                    } else {
                        goto lab_0x62f08;
                    }
                } else {
                    int32_t v83 = *(int32_t *)(4 * v60 + (int32_t)&Generic_bitmask_table_at_87960); // 0x630fa
                    int32_t v84 = 32 - v60; // 0x63106
                    g7 = v84;
                    int32_t v85 = v83 & v59; // 0x63108
                    g8 = v85;
                    uint32_t v86 = v84 & (int32_t)&g862 & 31; // 0x6310a
                    int32_t v87; // 0x6310a
                    if (v86 != 0) {
                        // bb335
                        v87 = v85 << v86;
                        g8 = v87;
                    } else {
                        v87 = v85;
                    }
                    int32_t v88 = g4; // 0x6310c
                    g7 = *(int32_t *)(v88 + 24);
                    int32_t v89 = g10 | v87; // 0x6310f
                    g8 = v89;
                    *(int32_t *)(v88 + 16) = v89;
                    uint32_t v90 = g7; // 0x63114
                    int32_t v91 = g4; // 0x63114
                    if (v90 == *(int32_t *)(v91 + 28)) {
                        // 0x63362
                        *(char *)(v91 + 4) = 1;
                    } else {
                        int32_t v92 = v90 + 4; // 0x6311d
                        g10 = v92;
                        *(int32_t *)(v91 + 24) = v92;
                        *(int32_t *)g7 = g8;
                    }
                    int32_t v93 = g9; // 0x63125
                    g7 = v93;
                    int32_t v94 = v93 + 21; // 0x63127
                    g9 = v94;
                    uint32_t v95 = g6; // 0x6312a
                    uint32_t v96 = v93 & (int32_t)&g862 & 31; // 0x6312a
                    if (v96 != 0) {
                        // bb339
                        g6 = v95 >> v96;
                    }
                    // bb340
                    *(int32_t *)(g4 + 20) = v94;
                    *(int32_t *)(g4 + 16) = g6;
                    goto lab_0x62f08;
                }
            }
        }
    } else {
        if (v43 == 0) {
            int32_t v97 = g4; // 0x62f80
            int32_t * v98 = (int32_t *)(v97 + 24); // 0x62f80
            uint32_t v99 = *v98; // 0x62f80
            g7 = v99;
            if (v99 == *(int32_t *)(v97 + 28)) {
                // 0x63290
                *(char *)(v97 + 4) = 1;
            } else {
                int32_t v100 = v99 + 4; // 0x62f8c
                g10 = v100;
                *v98 = v100;
                *(int32_t *)g7 = g9;
            }
            // 0x62f94
            g7 = v21;
            *(int32_t *)(g4 + 20) = 31;
            g9 = 31;
            g10 = v13;
            *(int32_t *)(g4 + 16) = v13;
            if (v21 == 0) {
                goto lab_0x62ebb;
            } else {
                goto lab_0x62fb1;
            }
        } else {
            // 0x62e6c
            g10 = v13;
            int32_t v101 = 32 - v43; // 0x62e74
            g7 = v101;
            uint32_t v102 = v101 & (int32_t)&g862 & 31; // 0x62e76
            int32_t v103; // 0x62e76
            if (v102 != 0) {
                // bb313
                v103 = v13 << v102;
                g10 = v103;
            } else {
                v103 = v13;
            }
            int32_t v104 = g9 | v103; // 0x62e78
            g10 = v104;
            g9 = v43 - 1;
            *(int32_t *)(g4 + 16) = v104;
            int32_t v105 = g9; // 0x62e80
            *(int32_t *)(g4 + 20) = v105;
            if (v105 == 0) {
                int32_t v106 = g4; // 0x62e87
                int32_t * v107 = (int32_t *)(v106 + 24); // 0x62e87
                uint32_t v108 = *v107; // 0x62e87
                g9 = v108;
                if (v108 == *(int32_t *)(v106 + 28)) {
                    // 0x63270
                    *(char *)(v106 + 4) = 1;
                } else {
                    int32_t v109 = v108 + 4; // 0x62e93
                    g7 = v109;
                    *v107 = v109;
                    *(int32_t *)g9 = g10;
                }
                // 0x62e9b
                *(int32_t *)(g4 + 16) = 0;
                g10 = 0;
                g9 = 32;
                *(int32_t *)(g4 + 20) = 32;
            }
            // 0x62eb0
            g7 = v21;
            if (v21 != 0) {
                goto lab_0x62fb1;
            } else {
                goto lab_0x62ebb;
            }
        }
    }
  lab_0x62f08:
    // 0x62f08
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x62ebb:;
    int32_t v110 = g9; // 0x62ec0
    g7 = 32 - v110;
    goto lab_0x62ec2;
  lab_0x62fb1:;
    int32_t v138 = v21 - 1; // 0x62fb4
    g8 = v138;
    uint32_t v139 = g9; // 0x63140
    if (!v25) {
        // 0x63140
        g8 = v138;
        int32_t v140 = 32 - v139; // 0x6314d
        g7 = v140;
        if (v139 > 13) {
            uint32_t v141 = v140 & (int32_t)&g862 & 31; // 0x6314f
            int32_t v142; // 0x6314f
            if (v141 != 0) {
                // bb341
                v142 = v138 << v141;
                g8 = v142;
            } else {
                v142 = v138;
            }
            int32_t v143 = g10 | v142; // 0x63151
            g10 = v143;
            g8 = v139 - 14;
            *(int32_t *)(g4 + 16) = v143;
            int32_t v144 = g8; // 0x63159
            *(int32_t *)(g4 + 20) = v144;
            if (v144 == 0) {
                goto lab_0x62fe9;
            } else {
                // 0x63164
                g7 = 46 - g9;
                int32_t v145 = g8; // 0x6316b
                g9 = v145;
                v110 = v145;
                goto lab_0x62ec2;
            }
        } else {
            int32_t v146 = *(int32_t *)(4 * v139 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63192
            int32_t v147 = v146 & v138; // 0x63192
            g8 = v147;
            uint32_t v148 = v140 & (int32_t)&g862 & 31; // 0x63199
            int32_t v149; // 0x63199
            if (v148 != 0) {
                // bb344
                v149 = v147 << v148;
                g8 = v149;
            } else {
                v149 = v147;
            }
            int32_t v150 = g4; // 0x6319b
            g7 = *(int32_t *)(v150 + 24);
            int32_t v151 = g10 | v149; // 0x6319e
            g8 = v151;
            *(int32_t *)(v150 + 16) = v151;
            uint32_t v152 = g7; // 0x631a3
            int32_t v153 = g4; // 0x631a3
            if (v152 == *(int32_t *)(v153 + 28)) {
                // 0x63320
                *(char *)(v153 + 4) = 1;
            } else {
                int32_t v154 = v152 + 4; // 0x631ac
                g10 = v154;
                *(int32_t *)(v153 + 24) = v154;
                *(int32_t *)g7 = g8;
            }
            // 0x631b4
            g10 = v138;
            int32_t v155 = g9; // 0x631b7
            int32_t v156 = v155 + 18; // 0x631b7
            g8 = v156;
            g7 = v155;
            *(int32_t *)(g4 + 20) = v156;
            int32_t v157 = g10; // 0x631bf
            uint32_t v158 = g7 & (int32_t)&g862 & 31; // 0x631bf
            int32_t v159; // 0x631bf
            if (v158 != 0) {
                // bb347
                v159 = v157 >> v158;
                g10 = v159;
            } else {
                v159 = v157;
            }
            // bb348
            g7 = 14 - g9;
            *(int32_t *)(g4 + 16) = v159;
            int32_t v160 = g8; // 0x631cb
            g9 = v160;
            v110 = v160;
            goto lab_0x62ec2;
        }
    } else {
        // 0x62fc4
        if (v139 > 10) {
            int32_t v161 = 32 - v139; // 0x62fd2
            g7 = v161;
            uint32_t v162 = v161 & (int32_t)&g862 & 31; // 0x62fd4
            int32_t v163; // 0x62fd4
            if (v162 != 0) {
                // bb321
                v163 = v138 << v162;
                g8 = v163;
            } else {
                v163 = v138;
            }
            int32_t v164 = g10 | v163; // 0x62fd6
            g10 = v164;
            g8 = v139 - 11;
            *(int32_t *)(g4 + 16) = v164;
            int32_t v165 = g8; // 0x62fde
            *(int32_t *)(g4 + 20) = v165;
            if (v165 != 0) {
                // 0x632a0
                g7 = 43 - g9;
                int32_t v166 = g8; // 0x632a7
                g9 = v166;
                v110 = v166;
                goto lab_0x62ec2;
            } else {
                goto lab_0x62fe9;
            }
        } else {
            // 0x631d8
            g8 = v138;
            int32_t v167 = 32 - v139; // 0x631e0
            g7 = v167;
            int32_t v168 = *(int32_t *)(4 * v139 + (int32_t)&Generic_bitmask_table_at_87960); // 0x631e2
            int32_t v169 = v168 & v138; // 0x631e2
            g8 = v169;
            uint32_t v170 = v167 & (int32_t)&g862 & 31; // 0x631e9
            int32_t v171; // 0x631e9
            if (v170 != 0) {
                // bb349
                v171 = v169 << v170;
                g8 = v171;
            } else {
                v171 = v169;
            }
            int32_t v172 = g4; // 0x631eb
            g7 = *(int32_t *)(v172 + 24);
            int32_t v173 = g10 | v171; // 0x631ee
            g8 = v173;
            *(int32_t *)(v172 + 16) = v173;
            uint32_t v174 = g7; // 0x631f3
            int32_t v175 = g4; // 0x631f3
            if (v174 == *(int32_t *)(v175 + 28)) {
                // 0x63330
                *(char *)(v175 + 4) = 1;
            } else {
                int32_t v176 = v174 + 4; // 0x631fc
                g10 = v176;
                *(int32_t *)(v175 + 24) = v176;
                *(int32_t *)g7 = g8;
            }
            // 0x63204
            g10 = v138;
            int32_t v177 = g9; // 0x63207
            int32_t v178 = v177 + 21; // 0x63207
            g8 = v178;
            g7 = v177;
            *(int32_t *)(g4 + 20) = v178;
            int32_t v179 = g10; // 0x6320f
            uint32_t v180 = g7 & (int32_t)&g862 & 31; // 0x6320f
            int32_t v181; // 0x6320f
            if (v180 != 0) {
                // bb352
                v181 = v179 >> v180;
                g10 = v181;
            } else {
                v181 = v179;
            }
            // bb353
            g7 = 11 - g9;
            *(int32_t *)(g4 + 16) = v181;
            int32_t v182 = g8; // 0x6321b
            g9 = v182;
            v110 = v182;
            goto lab_0x62ec2;
        }
    }
  lab_0x62ec2:;
    int32_t v111 = !v8 ? 5 : 3; // 0x62ecb
    g8 = v111;
    int32_t v112 = v111 - v110; // 0x62ece
    if (v111 > v110) {
        // 0x63020
        g8 = v112;
        int32_t v113 = *(int32_t *)(4 * v110 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63025
        int32_t v114 = g6 & v113; // 0x6302c
        g8 = v114;
        uint32_t v115 = g7 & (int32_t)&g862 & 31; // 0x6302e
        int32_t v116; // 0x6302e
        if (v115 != 0) {
            // bb324
            v116 = v114 << v115;
            g8 = v116;
        } else {
            v116 = v114;
        }
        int32_t v117 = g4; // 0x63030
        g7 = *(int32_t *)(v117 + 24);
        int32_t v118 = g10 | v116; // 0x63033
        g8 = v118;
        *(int32_t *)(v117 + 16) = v118;
        uint32_t v119 = g7; // 0x63038
        int32_t v120 = g4; // 0x63038
        if (v119 == *(int32_t *)(v120 + 28)) {
            // 0x63280
            *(char *)(v120 + 4) = 1;
        } else {
            int32_t v121 = v119 + 4; // 0x63041
            g10 = v121;
            *(int32_t *)(v120 + 24) = v121;
            *(int32_t *)g7 = g8;
        }
        int32_t v122 = g9; // 0x63049
        g7 = v122;
        g9 = 32 - v112;
        int32_t v123 = g6; // 0x63053
        uint32_t v124 = v122 & (int32_t)&g862 & 31; // 0x63053
        int32_t v125; // 0x63053
        if (v124 != 0) {
            // bb327
            v125 = v123 >> v124;
            g6 = v125;
        } else {
            v125 = v123;
        }
        // bb328
        *(int32_t *)(g4 + 16) = v125;
        *(int32_t *)(g4 + 20) = g9;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v126 = g6; // 0x62ed6
    uint32_t v127 = g7 & (int32_t)&g862 & 31; // 0x62ed6
    int32_t v128; // 0x62ed6
    if (v127 != 0) {
        // bb316
        v128 = v126 << v127;
        g6 = v128;
    } else {
        v128 = v126;
    }
    int32_t v129 = v110 - v111; // 0x62ed8
    g9 = v129;
    g6 = g10 | v128;
    *(int32_t *)(g4 + 20) = v129;
    *(int32_t *)(g4 + 16) = g6;
    if (v129 != 0) {
        goto lab_0x62f08;
    } else {
        goto lab_0x62ee6;
    }
  lab_0x62ee6:;
    int32_t v130 = g4; // 0x62ee6
    int32_t * v131 = (int32_t *)(v130 + 24); // 0x62ee6
    uint32_t v132 = *v131; // 0x62ee6
    g9 = v132;
    if (v132 == *(int32_t *)(v130 + 28)) {
        // 0x63300
        *(char *)(v130 + 4) = 1;
    } else {
        int32_t v133 = v132 + 4; // 0x62ef2
        g7 = v133;
        *v131 = v133;
        *(int32_t *)g9 = g6;
    }
    // 0x62efa
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 32;
    goto lab_0x62f08;
  lab_0x62fe9:;
    int32_t v134 = g4; // 0x62fe9
    int32_t * v135 = (int32_t *)(v134 + 24); // 0x62fe9
    uint32_t v136 = *v135; // 0x62fe9
    g9 = v136;
    if (v136 == *(int32_t *)(v134 + 28)) {
        // 0x63340
        *(char *)(v134 + 4) = 1;
    } else {
        int32_t v137 = v136 + 4; // 0x62ff5
        g7 = v137;
        *v135 = v137;
        *(int32_t *)g9 = g10;
    }
    // 0x62ffd
    *(int32_t *)(g4 + 16) = 0;
    g7 = 0;
    g10 = 0;
    *(int32_t *)(g4 + 20) = 32;
    g9 = 32;
    v110 = 32;
    goto lab_0x62ec2;
}

// Address range: 0x63370 - 0x63646
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_63370(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int128_t v1; // xmm1
    int128_t v2 = __asm_xorps(v1, v1); // 0x63371
    int32_t v3 = g8; // 0x63376
    int32_t v4 = g10; // 0x63377
    int32_t v5 = g6; // bp-16
    g7 = a4;
    int128_t v6 = __asm_movss(a2); // 0x6337f
    g4 = a1;
    g10 = a3;
    int32_t v7 = g7; // 0x6338a
    __asm_ucomiss_1648(v2, v6);
    bool v8 = v7 != 1; // zf
    if (v7 == 0 || v7 == 1) {
        // 0x63480
        g8 = __asm_cvttss2si_1647(__asm_movaps(v6));
        if (!v8) {
            goto lab_0x633b3;
        } else {
            goto lab_0x63491;
        }
    } else {
        int128_t v9 = __asm_movss((int32_t)g233); // 0x6339e
        g8 = __asm_cvttss2si_1647(__asm_xorps(v9, v6));
        if (v8) {
            goto lab_0x63491;
        } else {
            goto lab_0x633b3;
        }
    }
  lab_0x633b3:;
    int32_t v10 = __asm_cvttss2si_1647(__asm_mulss_1654(v6, 0x41000000)); // 0x633bb
    int32_t v11 = v10 >> 31; // 0x633c1
    g6 = v11;
    g9 = ((v11 ^ v10) - v11) % 8;
    int32_t v12 = g7; // 0x633cb
    if (v12 == 2) {
        goto lab_0x634b2;
    } else {
        goto lab_0x633d4;
    }
  lab_0x63491:;
    int32_t v13 = __asm_cvttss2si_1647(__asm_mulss_1654(v6, 0x42000000)); // 0x63499
    int32_t v14 = v13 >> 31; // 0x6349f
    g6 = v14;
    g9 = ((v14 ^ v13) - v14) % 32;
    int32_t v15 = g7; // 0x634a9
    if (v15 != 2) {
        goto lab_0x633d4;
    } else {
        v12 = v15;
        goto lab_0x634b2;
    }
  lab_0x634b2:;
    int32_t v16 = g4; // 0x634b2
    int32_t * v17 = (int32_t *)(v16 + 20); // 0x634b2
    uint32_t v18 = *v17; // 0x634b2
    g9 = v18;
    uint32_t v19 = g10; // 0x634b5
    int32_t v20 = v19 - v18; // 0x634b5
    if (v19 > v18) {
        int32_t v21 = *(int32_t *)(4 * v18 + (int32_t)&Generic_bitmask_table_at_87960); // 0x635b0
        g10 = v20;
        int32_t v22 = 32 - v18; // 0x635be
        g7 = v22;
        int32_t v23 = g8 & v21; // 0x635c3
        g6 = v23;
        uint32_t v24 = v22 & (int32_t)&g862 & 31; // 0x635c5
        int32_t v25; // 0x635c5
        if (v24 != 0) {
            // bb312
            v25 = v23 << v24;
            g6 = v25;
        } else {
            v25 = v23;
        }
        uint32_t v26 = *(int32_t *)(v16 + 24); // 0x635c7
        g7 = v26;
        int32_t * v27 = (int32_t *)(v16 + 16); // 0x635ca
        int32_t v28 = *v27 | v25; // 0x635ca
        g6 = v28;
        *v27 = v28;
        if (v26 == *(int32_t *)(v16 + 28)) {
            // 0x63640
            *(char *)(g4 + 4) = 1;
        } else {
            int32_t v29 = g7 + 4; // 0x635d5
            g10 = v29;
            *(int32_t *)(g4 + 24) = v29;
            *(int32_t *)g7 = g6;
        }
        int32_t v30 = g9; // 0x635dd
        g7 = v30;
        g9 = 32 - v20;
        int32_t v31 = g8; // 0x635e7
        uint32_t v32 = v30 & (int32_t)&g862 & 31; // 0x635e7
        int32_t v33; // 0x635e7
        if (v32 != 0) {
            // bb315
            v33 = v31 >> v32;
            g8 = v33;
        } else {
            v33 = v31;
        }
        // bb316
        *(int32_t *)(g4 + 16) = v33;
        *(int32_t *)(g4 + 20) = g9;
        g6 = v5;
        g10 = v4;
        g8 = v3;
        return g4;
    }
    int32_t v34 = (v12 & -256 | 32) - v18; // 0x634bf
    g7 = v34;
    int32_t v35 = v18 - v19; // 0x634c1
    g9 = v35;
    int32_t v36 = g8; // 0x634c3
    uint32_t v37 = v34 & (int32_t)&g862 & 31; // 0x634c3
    if (v37 != 0) {
        // bb300
        g8 = v36 << v37;
    }
    // bb302
    *v17 = v35;
    int32_t * v38 = (int32_t *)(g4 + 16); // 0x634c8
    int32_t v39 = *v38 | g8; // 0x634c8
    g8 = v39;
    *v38 = v39;
    if (v35 != 0) {
        goto lab_0x63475;
    } else {
        int32_t v40 = g4; // 0x634d2
        int32_t * v41 = (int32_t *)(v40 + 24); // 0x634d2
        uint32_t v42 = *v41; // 0x634d2
        g9 = v42;
        if (v42 == *(int32_t *)(v40 + 28)) {
            // 0x63620
            *(char *)(v40 + 4) = 1;
            goto lab_0x63467;
        } else {
            int32_t v43 = v42 + 4; // 0x634de
            g7 = v43;
            *v41 = v43;
            *(int32_t *)g9 = g8;
            goto lab_0x63467;
        }
    }
  lab_0x633d4:;
    int32_t v44 = g4; // 0x633d4
    int32_t * v45 = (int32_t *)(v44 + 20); // 0x633d4
    uint32_t v46 = *v45; // 0x633d4
    g6 = v46;
    uint32_t v47 = g10; // 0x633d7
    int32_t v48 = v47 - v46; // 0x633d7
    int32_t v49;
    int32_t v50;
    int32_t v51; // 0x63443
    int32_t v52; // 0x63559
    int32_t v53; // 0x63437
    int32_t v54; // 0x63545
    if (v47 > v46) {
        // 0x633df
        g10 = v48;
        g7 = 32;
        int32_t v55 = *(int32_t *)(4 * v46 + (int32_t)&Generic_bitmask_table_at_87960); // 0x633e9
        int32_t v56 = 32 - v46; // 0x633f0
        g7 = v56;
        int32_t v57 = g8 & v55; // 0x633f2
        g10 = v57;
        uint32_t v58 = v56 & (int32_t)&g862 & 31; // 0x633f4
        int32_t v59; // 0x633f4
        if (v58 != 0) {
            // bb
            v59 = v57 << v58;
            g10 = v59;
        } else {
            v59 = v57;
        }
        int32_t v60 = *(int32_t *)(v44 + 24); // 0x633f6
        g7 = v60;
        int32_t * v61 = (int32_t *)(v44 + 16); // 0x633f9
        int32_t v62 = *v61 | v59; // 0x633f9
        g10 = v62;
        *v61 = v62;
        if (v60 == *(int32_t *)(v44 + 28)) {
            // 0x63610
            *(char *)(g4 + 4) = 1;
        } else {
            // 0x6340b
            *(int32_t *)(g4 + 24) = v60 + 4;
            g7 = v60;
            *(int32_t *)v60 = g10;
        }
        int32_t v63 = g6; // 0x63419
        g7 = v63;
        g6 = 32 - v48;
        int32_t v64 = g8; // 0x63423
        uint32_t v65 = v63 & (int32_t)&g862 & 31; // 0x63423
        int32_t v66; // 0x63423
        if (v65 != 0) {
            // bb292
            v66 = v64 >> v65;
            g8 = v66;
        } else {
            v66 = v64;
        }
        // bb293
        *(int32_t *)(g4 + 16) = v66;
        *(int32_t *)(g4 + 20) = g6;
        v53 = g6;
        goto lab_0x6342b;
    } else {
        int32_t v67 = 32 - v46; // 0x634f5
        g7 = v67;
        int32_t v68 = v46 - v47; // 0x634f7
        g6 = v68;
        int32_t v69 = g8; // 0x634f9
        uint32_t v70 = v67 & (int32_t)&g862 & 31; // 0x634f9
        if (v70 != 0) {
            // bb303
            g8 = v69 << v70;
        }
        // bb305
        *v45 = v68;
        int32_t * v71 = (int32_t *)(g4 + 16); // 0x634fe
        int32_t v72 = *v71 | g8; // 0x634fe
        g8 = v72;
        *v71 = v72;
        if (g6 != 0) {
            int32_t v73 = g6; // 0x635a5
            int32_t v74 = 32 - v73; // 0x635a5
            g7 = v74;
            v53 = v73;
            v48 = v74;
            goto lab_0x6342b;
        } else {
            int32_t v75 = g4; // 0x6350c
            int32_t * v76 = (int32_t *)(v75 + 24); // 0x6350c
            uint32_t v77 = *v76; // 0x6350c
            g7 = v77;
            if (v77 == *(int32_t *)(v75 + 28)) {
                // 0x63630
                *(char *)(v75 + 4) = 1;
            } else {
                int32_t v78 = v77 + 4; // 0x63518
                g6 = v78;
                *v76 = v78;
                *(int32_t *)g7 = g8;
            }
            // 0x63520
            g8 = 0;
            g6 = 32;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 20) = 32;
            v54 = v7 != 1 ? 5 : 3;
            g10 = v54;
            int32_t v79 = g6; // 0x63548
            if (v54 > v79) {
                v52 = v79;
                v50 = 0;
                goto lab_0x63550;
            } else {
                v51 = v79;
                v49 = 0;
                goto lab_0x6343f;
            }
        }
    }
  lab_0x63475:
    // 0x63475
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
  lab_0x6342b:;
    int32_t v80 = v7 != 1 ? 5 : 3; // 0x63434
    g10 = v80;
    if (v80 > v53) {
        v52 = v53;
        v54 = v80;
        v50 = v48;
        goto lab_0x63550;
    } else {
        v54 = v80;
        v51 = v53;
        v49 = v48;
        goto lab_0x6343f;
    }
  lab_0x63467:
    // 0x63467
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 20) = 32;
    goto lab_0x63475;
  lab_0x63550:;
    int32_t v81 = v54 - v52; // 0x63550
    g10 = v81;
    g7 = v50 % 256;
    int32_t v82 = *(int32_t *)(4 * v52 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63559
    int32_t v83 = g9 & v82; // 0x63560
    g10 = v83;
    uint32_t v84 = v50 & (int32_t)&g862 & 31; // 0x63562
    int32_t v85; // 0x63562
    if (v84 != 0) {
        // bb306
        v85 = v83 << v84;
        g10 = v85;
    } else {
        v85 = v83;
    }
    int32_t v86 = g4; // 0x63564
    g7 = *(int32_t *)(v86 + 24);
    int32_t v87 = g8 | v85; // 0x63567
    g10 = v87;
    *(int32_t *)(v86 + 16) = v87;
    uint32_t v88 = g7; // 0x6356c
    int32_t v89 = g4; // 0x6356c
    if (v88 == *(int32_t *)(v89 + 28)) {
        // 0x63600
        *(char *)(v89 + 4) = 1;
    } else {
        int32_t v90 = v88 + 4; // 0x63575
        g8 = v90;
        *(int32_t *)(v89 + 24) = v90;
        *(int32_t *)g7 = g10;
    }
    int32_t v91 = g6; // 0x6357d
    g7 = v91;
    int32_t v92 = g9; // 0x6357f
    uint32_t v93 = v91 & (int32_t)&g862 & 31; // 0x6357f
    int32_t v94; // 0x6357f
    if (v93 != 0) {
        // bb309
        v94 = v92 >> v93;
        g9 = v94;
    } else {
        v94 = v92;
    }
    // bb310
    *(int32_t *)(g4 + 16) = v94;
    int32_t v95 = 32 - v81; // 0x63589
    g9 = v95;
    *(int32_t *)(g4 + 20) = v95;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return g4;
  lab_0x6343f:
    // 0x6343f
    g7 = v49 % 256;
    int32_t v96 = v51 - v54; // 0x63443
    g6 = v96;
    *(int32_t *)(g4 + 20) = v96;
    int32_t v97 = g9; // 0x63448
    uint32_t v98 = g7 & (int32_t)&g862 & 31; // 0x63448
    int32_t v99; // 0x63448
    if (v98 != 0) {
        // bb295
        v99 = v97 << v98;
        g9 = v99;
    } else {
        v99 = v97;
    }
    int32_t v100 = g8 | v99; // 0x6344a
    g9 = v100;
    *(int32_t *)(g4 + 16) = v100;
    if (v96 != 0) {
        goto lab_0x63475;
    } else {
        int32_t v101 = g4; // 0x63453
        int32_t * v102 = (int32_t *)(v101 + 24); // 0x63453
        uint32_t v103 = *v102; // 0x63453
        g7 = v103;
        if (v103 == *(int32_t *)(v101 + 28)) {
            // 0x63620
            *(char *)(v101 + 4) = 1;
            goto lab_0x63467;
        } else {
            int32_t v104 = v103 + 4; // 0x6345f
            g6 = v104;
            *v102 = v104;
            *(int32_t *)g7 = g9;
            goto lab_0x63467;
        }
    }
}

// Address range: 0x63650 - 0x636b6
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_63650(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x63653
    g4 = a1;
    int32_t v2 = g6; // 0x63657
    g7 = a2;
    int32_t v3 = *(int32_t *)(a1 + 20); // 0x6365b
    g10 = v3;
    if (v3 != 32) {
        int32_t v4 = *(int32_t *)(a1 + 24); // 0x63663
        g6 = v4;
        if (v4 - *(int32_t *)(a1 + 28) == 0) {
            // 0x636b0
            *(char *)(a1 + 4) = 1;
        } else {
            int32_t v5 = 32 - v3; // 0x63670
            g9 = v5;
            int32_t v6 = *(int32_t *)(4 * v5 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63672
            int32_t v7 = -1 - v6; // 0x63679
            g9 = v7;
            int32_t * v8 = (int32_t *)v4; // 0x6367b
            int32_t v9 = *v8 & v7; // 0x6367b
            g9 = v9;
            int32_t v10 = *(int32_t *)(a1 + 16) | v9; // 0x6367d
            g9 = v10;
            *v8 = v10;
        }
    }
    int32_t v11 = g4; // 0x63684
    g10 = *(int32_t *)(v11 + 32);
    *(char *)(v11 + 36) = 1;
    g7 = a2 % 32;
    int32_t v12 = 4 * (a2 >= 0 ? a2 : a2 + 31) / 32 + g10; // 0x63697
    g9 = v12;
    *(int32_t *)(g4 + 24) = v12;
    *(int32_t *)(g4 + 16) = *(int32_t *)g9;
    int32_t v13 = 32 - g7; // 0x636a7
    g9 = v13;
    *(int32_t *)(g4 + 20) = v13;
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x636c0 - 0x638b6
int32_t function_636c0(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g8; // 0x636c3
    int32_t v2 = g10; // 0x636c4
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)24; // cf
    g10 = (int32_t)a2;
    g6 = a1;
    int128_t v5 = __asm_movss(*a2); // 0x636d6
    __asm_ucomiss(v5, 0x3d000000);
    int32_t v6; // 0x636f0
    if (v4) {
        int128_t v7 = __asm_movss(-0x43000000); // 0x636e3
        g879 = v7;
        v4 = false;
        g4 = 0;
        __asm_ucomiss_1648(v7, v5);
        v6 = g4 & -256 | (int32_t)!v4;
        g4 = v6;
    } else {
        v6 = 1;
    }
    int128_t v8 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x636f6
    __asm_ucomiss(v8, 0x3d000000);
    int32_t v9; // 0x63718
    if (v4) {
        int128_t v10 = __asm_movss(-0x43000000); // 0x6370b
        g879 = v10;
        v4 = false;
        g9 = 0;
        __asm_ucomiss_1648(v10, v8);
        v9 = g9 & -256 | (int32_t)!v4;
        g9 = v9;
    } else {
        v9 = 1;
    }
    int128_t v11 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6371e
    __asm_ucomiss(v11, 0x3d000000);
    int32_t v12; // 0x63740
    if (v4) {
        int128_t v13 = __asm_movss(-0x43000000); // 0x63733
        g879 = v13;
        g4 = 0;
        __asm_ucomiss_1648(v13, v11);
        v12 = g4 & -256 | (int32_t)true;
        g4 = v12;
    } else {
        v12 = 1;
    }
    int32_t v14 = g6; // 0x63746
    int32_t * v15 = (int32_t *)(v14 + 20); // 0x63746
    uint32_t v16 = *v15; // 0x63746
    g9 = v16;
    g4 = v6;
    int32_t v17 = 32 - v16; // 0x63751
    g7 = v17;
    uint32_t v18 = v17 & (int32_t)&g862 & 31; // 0x63753
    int32_t v19; // 0x63753
    if (v18 != 0) {
        // bb
        v19 = v6 << v18;
        g4 = v19;
    } else {
        v19 = v6;
    }
    // bb40
    g4 = *(int32_t *)(v14 + 16) | v19;
    int32_t v20 = v16 - 1; // 0x63758
    g7 = v20;
    *v15 = v20;
    *(int32_t *)(g6 + 16) = g4;
    if (v20 != 0) {
        // 0x637e0
        g8 = v9;
        uint32_t v21 = g9; // 0x637ea
        uint32_t v22 = 33 - v21; // 0x637ea
        g7 = v22 % 256;
        uint32_t v23 = v22 & (int32_t)&g862 & 31; // 0x637f1
        int32_t v24; // 0x637f1
        if (v23 != 0) {
            // bb42
            v24 = v9 << v23;
            g8 = v24;
        } else {
            v24 = v9;
        }
        int32_t v25 = g4 | v24; // 0x637f3
        g8 = v25;
        int32_t v26 = v21 - 2; // 0x637f5
        g4 = v26;
        *(int32_t *)(g6 + 16) = v25;
        *(int32_t *)(g6 + 20) = v26;
        if (v26 != 0) {
            uint32_t v27 = g9; // 0x63869
            int32_t v28 = v27 - 3; // 0x63869
            g4 = v28;
            g7 = 34 - v27;
            g9 = v12;
            *(int32_t *)(g6 + 20) = v28;
            int32_t v29 = g9; // 0x63879
            uint32_t v30 = g7 & (int32_t)&g862 & 31; // 0x63879
            int32_t v31; // 0x63879
            if (v30 != 0) {
                // bb46
                v31 = v29 << v30;
                g9 = v31;
            } else {
                v31 = v29;
            }
            int32_t v32 = v31 | v25; // 0x6387e
            g7 = v32;
            *(int32_t *)(g6 + 16) = v32;
            if (v28 == 0) {
                int32_t v33 = g6; // 0x63887
                int32_t * v34 = (int32_t *)(v33 + 24); // 0x63887
                uint32_t v35 = *v34; // 0x63887
                g4 = v35;
                if (v35 == *(int32_t *)(v33 + 28)) {
                    // 0x638b0
                    *(char *)(v33 + 4) = 1;
                } else {
                    int32_t v36 = v35 + 4; // 0x6388f
                    g9 = v36;
                    *v34 = v36;
                    *(int32_t *)g4 = g7;
                }
                // 0x63897
                *(int32_t *)(g6 + 16) = 0;
                *(int32_t *)(g6 + 20) = 32;
            }
        } else {
            int32_t v37 = g6; // 0x63805
            int32_t * v38 = (int32_t *)(v37 + 24); // 0x63805
            uint32_t v39 = *v38; // 0x63805
            g4 = v39;
            if (v39 == *(int32_t *)(v37 + 28)) {
                // 0x63850
                *(char *)(v37 + 4) = 1;
            } else {
                // 0x6380d
                *v38 = v39 + 4;
                g9 = v25;
                *(int32_t *)g4 = v25;
            }
            // 0x63818
            g4 = v12;
            *(int32_t *)(g6 + 20) = 31;
            *(int32_t *)(g6 + 16) = g4;
        }
        // 0x63825
        g4 = v6;
        if (v6 != 0) {
            goto lab_0x63796;
        } else {
            goto lab_0x63830;
        }
    } else {
        int32_t v40 = g6; // 0x63765
        int32_t * v41 = (int32_t *)(v40 + 24); // 0x63765
        uint32_t v42 = *v41; // 0x63765
        g9 = v42;
        if (v42 == *(int32_t *)(v40 + 28)) {
            // 0x63860
            *(char *)(v40 + 4) = 1;
        } else {
            int32_t v43 = v42 + 4; // 0x63771
            g7 = v43;
            *v41 = v43;
            *(int32_t *)g9 = g4;
        }
        // 0x63779
        g4 = v12;
        *(int32_t *)(g6 + 20) = 30;
        *(int32_t *)(g6 + 16) = 2 * g4 | v9;
        g4 = v6;
        if (v6 == 0) {
            goto lab_0x63830;
        } else {
            goto lab_0x63796;
        }
    }
  lab_0x63796:;
    int32_t v44 = *(int32_t *)g10; // 0x63796
    g4 = v44;
    function_62a90(g6, v44);
    g4 = v9;
    int32_t v45; // 0x6384d8
    if (v9 == 0) {
        v45 = 0;
        goto lab_0x6383b;
    } else {
        goto lab_0x637af;
    }
  lab_0x63830:
    // 0x63830
    g4 = v9;
    if (v9 != 0) {
        goto lab_0x637af;
    } else {
        v45 = v9;
        goto lab_0x6383b;
    }
  lab_0x6383b:
    // 0x6383b
    g8 = v12;
    int32_t result2; // 0x6384d
    if (v12 != 0) {
        goto lab_0x637c9;
    } else {
        result2 = v45;
        goto lab_0x63846;
    }
  lab_0x637af:;
    int32_t v46 = *(int32_t *)(g10 + 4); // 0x637af
    g4 = v46;
    int32_t v47 = function_62a90(g6, v46); // 0x637b9
    g4 = v47;
    g8 = v12;
    if (v12 == 0) {
        result2 = v47;
        goto lab_0x63846;
    } else {
        goto lab_0x637c9;
    }
  lab_0x637c9:;
    int32_t v48 = *(int32_t *)(g10 + 8); // 0x637c9
    g4 = v48;
    int32_t v49 = g6; // 0x637cc
    g6 = v3;
    g10 = v2;
    g8 = v1;
    int32_t result = function_62a90(v49, v48); // 0x637d9
    g4 = result;
    return result;
  lab_0x63846:
    // 0x63846
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x638c0 - 0x639fe
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_638c0(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x638c3
    int32_t v2 = g10; // 0x638c4
    int32_t v3 = g6; // bp-16
    g6 = &g143;
    int128_t v4 = __asm_movss(a2); // 0x638ce
    g4 = a1;
    int128_t v5 = __asm_mulss(__asm_movss(0x44ffe000), v4); // 0x638de
    int128_t v6 = __asm_cvtps2pd(__asm_unpcklps(v4, v4)); // 0x638e5
    g8 = *(int32_t *)(g4 + 20);
    g9 = __asm_cvttss2si_1647(v5);
    int128_t v7 = __asm_movsd_1649(-0x40bffdffbff7ff00); // 0x638ef
    int32_t v8 = g8 - 1; // 0x638f7
    g10 = v8;
    g7 = g9;
    *(int32_t *)(g4 + 20) = v8;
    int32_t v9 = g7 >> 31; // 0x638ff
    uint32_t v10 = (g9 ^ v9) - v9; // 0x63904
    g7 = 32;
    g6 = v10 <= (int32_t)&g143 ? v10 : g6;
    g9 = 0;
    __asm_ucomisd(v7, v6);
    int32_t v11 = g9 & -256 | 1; // 0x6391a
    g9 = v11;
    int32_t v12 = g7 - g8; // 0x6391d
    g7 = v12;
    uint32_t v13 = v12 & (int32_t)&g862 & 31; // 0x6391f
    int32_t v14; // 0x6391f
    if (v13 != 0) {
        // bb
        v14 = v11 << v13;
        g9 = v14;
    } else {
        v14 = v11;
    }
    int32_t * v15 = (int32_t *)(g4 + 16); // 0x63921
    int32_t v16 = *v15 | v14; // 0x63921
    g9 = v16;
    *v15 = v16;
    if (v8 == 0) {
        int32_t v17 = g4; // 0x6392b
        int32_t * v18 = (int32_t *)(v17 + 24); // 0x6392b
        int32_t v19 = *v18; // 0x6392b
        g7 = v19;
        if (v19 == *(int32_t *)(v17 + 28)) {
            // 0x639a0
            *(char *)(v17 + 4) = 1;
        } else {
            int32_t v20 = v19 + 4; // 0x63933
            g10 = v20;
            *v18 = v20;
            *(int32_t *)g7 = g9;
        }
        // 0x6393b
        *(int32_t *)(g4 + 16) = g6;
        *(int32_t *)(g4 + 20) = 21;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    if (v8 > 10) {
        int32_t v21 = g8; // 0x639b6
        int32_t v22 = v21 - 12; // 0x639b6
        g10 = v22;
        g7 = 33 - v21;
        *(int32_t *)(g4 + 20) = v22;
        int32_t v23 = g6; // 0x639c3
        uint32_t v24 = g7 & (int32_t)&g862 & 31; // 0x639c3
        int32_t v25; // 0x639c3
        if (v24 != 0) {
            // bb39
            v25 = v23 << v24;
            g6 = v25;
        } else {
            v25 = v23;
        }
        int32_t v26 = g9 | v25; // 0x639c5
        g6 = v26;
        *(int32_t *)(g4 + 16) = v26;
        if (v22 == 0) {
            int32_t v27 = g4; // 0x639ce
            int32_t * v28 = (int32_t *)(v27 + 24); // 0x639ce
            int32_t v29 = *v28; // 0x639ce
            g9 = v29;
            if (v29 == *(int32_t *)(v27 + 28)) {
                // 0x639f8
                *(char *)(v27 + 4) = 1;
            } else {
                int32_t v30 = v29 + 4; // 0x639d6
                g7 = v30;
                *v28 = v30;
                *(int32_t *)g9 = g6;
            }
            // 0x639de
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 20) = 32;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
    } else {
        int32_t v31 = *(int32_t *)(4 * v8 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63955
        int32_t v32 = g6 & v31; // 0x6395c
        int32_t v33 = 33 - g8; // 0x63966
        g7 = v33;
        uint32_t v34 = v33 & (int32_t)&g862 & 31; // 0x63968
        int32_t v35;
        if (v34 != 0) {
            // bb32
            v35 = v32 << v34;
        } else {
            v35 = v32;
        }
        int32_t v36 = g9 | v35; // 0x6396b
        g9 = v36;
        *(int32_t *)(g4 + 16) = v36;
        int32_t v37 = g4; // 0x63974
        int32_t * v38 = (int32_t *)(v37 + 24); // 0x63974
        int32_t v39 = *v38; // 0x63974
        g9 = v39;
        if (v39 == *(int32_t *)(v37 + 28)) {
            // 0x639b0
            *(char *)(v37 + 4) = 1;
        } else {
            // 0x6397c
            *v38 = v39 + 4;
            g7 = v36;
            *(int32_t *)g9 = v36;
        }
        // 0x63987
        g7 = v8;
        int32_t v40 = g8 + 20; // 0x63989
        g8 = v40;
        uint32_t v41 = v8 & (int32_t)&g862 & 31; // 0x6398c
        if (v41 != 0) {
            // bb36
            g6 >>= v41;
        }
        // bb37
        *(int32_t *)(g4 + 20) = v40;
        *(int32_t *)(g4 + 16) = g6;
    }
    // 0x63994
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x63a00 - 0x63bd9
int32_t function_63a00(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x63a03
    int32_t v2 = g10; // 0x63a04
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)44; // cf
    g10 = a2;
    int128_t v5 = __asm_movsd_1649(0x3f40020040080100); // 0x63a13
    g6 = a1;
    int128_t v6 = __asm_movsd_1649(-0x40bffdffbff7ff00); // xmm0
    int128_t v7 = __asm_cvtps2pd(__asm_movss(*(int32_t *)g10)); // 0x63a2a
    __asm_ucomisd(v7, v5);
    int32_t v8; // 0x63a39
    if (v4) {
        // 0x63a33
        v4 = false;
        g4 = 0;
        __asm_ucomisd(v6, v7);
        v8 = g4 & -256 | (int32_t)!v4;
        g4 = v8;
    } else {
        v8 = 1;
    }
    int128_t v9 = __asm_cvtps2pd(__asm_movss(*(int32_t *)(g10 + 4))); // 0x63a4b
    __asm_ucomisd(v9, v5);
    int32_t v10; // 0x63a5a
    if (v4) {
        // 0x63a54
        g9 = 0;
        __asm_ucomisd(v6, v9);
        v10 = g9 & -256 | (int32_t)true;
        g9 = v10;
    } else {
        v10 = 1;
    }
    int32_t v11 = g6; // 0x63a60
    int32_t * v12 = (int32_t *)(v11 + 20); // 0x63a60
    uint32_t v13 = *v12; // 0x63a60
    g9 = v13;
    g4 = v8;
    int32_t v14 = 32 - v13; // 0x63a6b
    g7 = v14;
    uint32_t v15 = v14 & (int32_t)&g862 & 31; // 0x63a6d
    int32_t v16; // 0x63a6d
    if (v15 != 0) {
        // bb
        v16 = v8 << v15;
        g4 = v16;
    } else {
        v16 = v8;
    }
    // bb264
    g4 = *(int32_t *)(v11 + 16) | v16;
    int32_t v17 = v13 - 1; // 0x63a72
    g7 = v17;
    *v12 = v17;
    *(int32_t *)(g6 + 16) = g4;
    if (v17 != 0) {
        // 0x63b18
        g8 = v10;
        uint32_t v18 = g9; // 0x63b22
        uint32_t v19 = 33 - v18; // 0x63b22
        int32_t v20 = v18 - 2; // 0x63b25
        g9 = v20;
        *(int32_t *)(g6 + 20) = v20;
        g7 = v19 % 256;
        int32_t v21 = g8; // 0x63b2f
        uint32_t v22 = v19 & (int32_t)&g862 & 31; // 0x63b2f
        int32_t v23; // 0x63b2f
        if (v22 != 0) {
            // bb271
            v23 = v21 << v22;
            g8 = v23;
        } else {
            v23 = v21;
        }
        int32_t v24 = g4 | v23; // 0x63b31
        g8 = v24;
        *(int32_t *)(g6 + 16) = v24;
        if (v20 != 0) {
            goto lab_0x63aa4;
        } else {
            int32_t v25 = g6; // 0x63b41
            int32_t * v26 = (int32_t *)(v25 + 24); // 0x63b41
            uint32_t v27 = *v26; // 0x63b41
            g4 = v27;
            if (v27 == *(int32_t *)(v25 + 28)) {
                // 0x63bb0
                *(char *)(v25 + 4) = 1;
            } else {
                // 0x63b49
                *v26 = v27 + 4;
                g9 = v24;
                *(int32_t *)g4 = v24;
            }
            // 0x63b54
            g4 = v8;
            *(int32_t *)(g6 + 16) = 0;
            *(int32_t *)(g6 + 20) = 32;
            if (v8 == 0) {
                goto lab_0x63aaf;
            } else {
                goto lab_0x63b6d;
            }
        }
    } else {
        int32_t v28 = g6; // 0x63a83
        int32_t * v29 = (int32_t *)(v28 + 24); // 0x63a83
        uint32_t v30 = *v29; // 0x63a83
        g9 = v30;
        if (v30 == *(int32_t *)(v28 + 28)) {
            // 0x63bc0
            *(char *)(v28 + 4) = 1;
        } else {
            int32_t v31 = v30 + 4; // 0x63a8f
            g7 = v31;
            *v29 = v31;
            *(int32_t *)g9 = g4;
        }
        // 0x63a97
        g4 = v10;
        *(int32_t *)(g6 + 20) = 31;
        *(int32_t *)(g6 + 16) = g4;
        goto lab_0x63aa4;
    }
  lab_0x63aa4:
    // 0x63aa4
    g4 = v8;
    if (v8 != 0) {
        goto lab_0x63b6d;
    } else {
        goto lab_0x63aaf;
    }
  lab_0x63b6d:
    // 0x63b6d
    g4 = *(int32_t *)g10;
    int32_t v32 = __asm_movsd(v6); // 0x63b6f
    function_638c0(g6, g4);
    g4 = v10;
    int128_t v33 = __asm_movsd_1649((int64_t)v32); // 0x63b83
    v6 = v33;
    if (v10 == 0) {
        goto lab_0x63aba;
    } else {
        goto lab_0x63b90;
    }
  lab_0x63aaf:
    // 0x63aaf
    g4 = v10;
    if (v10 != 0) {
        // 0x63aaf
        v33 = v6;
        goto lab_0x63b90;
    } else {
        goto lab_0x63aba;
    }
  lab_0x63aba:
    // 0x63aba
    g9 = *(int32_t *)(g6 + 20);
    int128_t v34 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x63abd
    g4 = 0;
    __asm_ucomisd(v6, __asm_cvtps2pd(v34));
    int32_t v35 = g4 & -256 | (int32_t)true; // 0x63ad0
    g4 = v35;
    int32_t v36 = g9; // 0x63ad3
    int32_t v37 = 32 - v36; // 0x63ad3
    g7 = v37;
    int32_t v38 = v36 - 1; // 0x63ad5
    g9 = v38;
    uint32_t v39 = v37 & (int32_t)&g862 & 31; // 0x63ad8
    if (v39 != 0) {
        // bb266
        g4 = v35 << v39;
    }
    // bb268
    *(int32_t *)(g6 + 20) = v38;
    int32_t * v40 = (int32_t *)(g6 + 16); // 0x63add
    int32_t v41 = *v40 | g4; // 0x63add
    g4 = v41;
    *v40 = v41;
    if (v38 == 0) {
        int32_t v42 = g6; // 0x63ae7
        int32_t * v43 = (int32_t *)(v42 + 24); // 0x63ae7
        uint32_t v44 = *v43; // 0x63ae7
        g9 = v44;
        if (v44 == *(int32_t *)(v42 + 28)) {
            // 0x63bd0
            *(char *)(v42 + 4) = 1;
        } else {
            int32_t v45 = v44 + 4; // 0x63af3
            g7 = v45;
            *v43 = v45;
            *(int32_t *)g9 = g4;
        }
        // 0x63afb
        *(int32_t *)(g6 + 16) = 0;
        *(int32_t *)(g6 + 20) = 32;
    }
    // 0x63b09
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x63b90:
    // 0x63b90
    g4 = *(int32_t *)(g10 + 4);
    int32_t v46 = __asm_movsd(v33); // 0x63b93
    g4 = function_638c0(g6, g4);
    v6 = __asm_movsd_1649((int64_t)v46);
    goto lab_0x63aba;
}

// Address range: 0x63be0 - 0x63ce9
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_63be0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x63be6
    g10 = a3;
    int128_t v2 = __asm_movss(a2); // 0x63bec
    int128_t v3 = __asm_divsd_1660(__asm_cvtps2pd(v2), 0x4076800000000000); // 0x63bf4
    int32_t v4 = g6; // 0x63bfc
    g4 = a1;
    int32_t v5 = g8; // 0x63c02
    int32_t v6 = g10 % 32; // 0x63c07
    g9 = v6;
    int32_t v7 = *(int32_t *)(4 * v6 + (int32_t)&g299); // 0x63c0a
    int32_t v8 = v7 ^ -0x80000000; // 0x63c11
    g7 = v8;
    g9 = v7 - 1;
    int128_t v9 = __asm_cvtsi2sd(v8); // 0x63c1a
    int128_t v10 = __asm_mulsd(v3, __asm_addsd_1657(v9, 0x41e0000000000000)); // 0x63c26
    int32_t v11 = g9 & __asm_cvttsd2si(v10); // 0x63c2e
    g6 = v11;
    int32_t v12 = g4; // 0x63c30
    int32_t * v13 = (int32_t *)(v12 + 20); // 0x63c30
    int32_t v14 = *v13; // 0x63c30
    g9 = v14;
    int32_t v15 = g10; // 0x63c33
    int32_t v16 = v15 - v14; // 0x63c33
    if (v15 <= v14) {
        int32_t v17 = 32 - v14; // 0x63c3c
        g7 = v17;
        int32_t v18 = v14 - v15; // 0x63c3e
        g9 = v18;
        uint32_t v19 = v17 & (int32_t)&g862 & 31; // 0x63c40
        if (v19 != 0) {
            // bb
            g6 = v11 << v19;
        }
        // bb253
        *v13 = v18;
        int32_t * v20 = (int32_t *)(g4 + 16); // 0x63c45
        int32_t v21 = *v20 | g6; // 0x63c45
        g6 = v21;
        *v20 = v21;
        if (v18 == 0) {
            int32_t v22 = g4; // 0x63c4f
            int32_t * v23 = (int32_t *)(v22 + 24); // 0x63c4f
            int32_t v24 = *v23; // 0x63c4f
            g9 = v24;
            if (v24 == *(int32_t *)(v22 + 28)) {
                // 0x63ce0
                *(char *)(v22 + 4) = 1;
            } else {
                int32_t v25 = v24 + 4; // 0x63c5b
                g7 = v25;
                *v23 = v25;
                *(int32_t *)g9 = g6;
            }
            // 0x63c63
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 20) = 32;
        }
        // 0x63c71
        g6 = v4;
        g10 = v1;
        g8 = v5;
        return g4;
    }
    // 0x63c80
    g10 = v16;
    g7 = 32;
    int32_t v26 = *(int32_t *)(4 * v14 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63c8a
    int32_t v27 = 32 - v14; // 0x63c91
    g7 = v27;
    int32_t v28 = v26 & v11; // 0x63c93
    uint32_t v29 = v27 & (int32_t)&g862 & 31; // 0x63c95
    int32_t v30; // 0x63c95
    if (v29 != 0) {
        // bb254
        v30 = v28 << v29;
    } else {
        v30 = v28;
    }
    // bb256
    g10 = v30;
    int32_t v31 = *(int32_t *)(v12 + 24); // 0x63c97
    g7 = v31;
    int32_t * v32 = (int32_t *)(v12 + 16); // 0x63c9a
    int32_t v33 = *v32 | v30; // 0x63c9a
    g10 = v33;
    *v32 = v33;
    if (v31 == *(int32_t *)(v12 + 28)) {
        // 0x63cd0
        *(char *)(g4 + 4) = 1;
    } else {
        int32_t v34 = g7 + 4; // 0x63ca5
        g8 = v34;
        *(int32_t *)(g4 + 24) = v34;
        *(int32_t *)g7 = g10;
    }
    int32_t v35 = g9; // 0x63cad
    g7 = v35;
    g9 = 32 - v16;
    int32_t v36 = g6; // 0x63cb7
    uint32_t v37 = v35 & (int32_t)&g862 & 31; // 0x63cb7
    int32_t v38; // 0x63cb7
    if (v37 != 0) {
        // bb257
        v38 = v36 >> v37;
        g6 = v38;
    } else {
        v38 = v36;
    }
    // bb258
    *(int32_t *)(g4 + 16) = v38;
    *(int32_t *)(g4 + 20) = g9;
    g6 = v4;
    g10 = v1;
    g8 = v5;
    return g4;
}

// Address range: 0x63cf0 - 0x640f4
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_63cf0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x63cf3
    int32_t v2 = g10; // 0x63cf4
    int32_t v3 = g6; // 0x63cf5
    g4 = a1;
    g9 = a2;
    int32_t v4;
    int32_t v5; // 0x640a3
    int32_t v6; // 0x63d20
    int32_t v7; // 0x63e36
    if (a3 > 32) {
        // 0x63d09
        g7 = a3;
        v6 = a2;
        v4 = a3;
        while (true) {
          lab_0x63d9e_2:;
            int32_t * v8 = (int32_t *)(v6 + 20); // 0x63d9e
            int32_t v9 = *v8; // 0x63d9e
            g7 = v9;
            if (v9 > 31) {
                int32_t v10 = v9 - 32; // 0x63d18
                g7 = v10;
                g8 = *(int32_t *)(v6 + 16);
                *v8 = v10;
                if (v10 != 0) {
                    // 0x63d42
                    *(int32_t *)(g9 + 16) = 0;
                    goto lab_0x63d49;
                } else {
                    int32_t v11 = g9; // 0x63d25
                    g7 = *(int32_t *)(v11 + 24);
                    *(int32_t *)(v11 + 20) = 32;
                    uint32_t v12 = g7; // 0x63d2f
                    int32_t v13 = g9; // 0x63d2f
                    uint32_t v14 = *(int32_t *)(v13 + 28); // 0x63d2f
                    if (v12 == v14) {
                        // 0x64000
                        g7 = v12 + 4;
                        *(int32_t *)(v13 + 20) = 1;
                        *(int32_t *)(g9 + 16) = 0;
                        *(int32_t *)(g9 + 24) = g7;
                        goto lab_0x63d49;
                    } else {
                        if (v12 < v14) {
                            // 0x63ef0
                            g6 = *(int32_t *)v12;
                            int32_t v15 = v12 + 4; // 0x63ef2
                            g7 = v15;
                            *(int32_t *)(v13 + 24) = v15;
                            *(int32_t *)(g9 + 16) = g6;
                            goto lab_0x63d49;
                        } else {
                            // 0x63d3e
                            *(char *)(v13 + 4) = 1;
                            // 0x63d42
                            *(int32_t *)(g9 + 16) = 0;
                            goto lab_0x63d49;
                        }
                    }
                }
            } else {
                int32_t v16 = *(int32_t *)(v6 + 16); // 0x63daa
                g6 = v16;
                int32_t * v17 = (int32_t *)(v6 + 24); // 0x63db0
                uint32_t v18 = *v17; // 0x63db0
                g6 = v18;
                uint32_t v19 = *(int32_t *)(v6 + 28); // 0x63db3
                if (v18 == v19) {
                    // 0x63f10
                    g6 = v18 + 4;
                    *v8 = 1;
                    g8 = 0;
                    *(int32_t *)(g9 + 16) = 0;
                    *(int32_t *)(g9 + 24) = g6;
                    *(char *)(g9 + 4) = 1;
                    goto lab_0x63dcf;
                } else {
                    if (v18 < v19) {
                        // 0x63eb0
                        g10 = *(int32_t *)v18;
                        int32_t v20 = v18 + 4; // 0x63eb2
                        g6 = v20;
                        *v17 = v20;
                        *(int32_t *)(g9 + 16) = g10;
                        if (*(char *)(v6 + 4) != 0) {
                            // 0x63dcd
                            g8 = 0;
                            goto lab_0x63dcf;
                        } else {
                            // 0x63ec5
                            g6 = 32;
                            *(int32_t *)(g9 + 20) = g7;
                            int32_t v21 = g7; // 0x63ecd
                            int32_t v22 = g6 - v21; // 0x63ecd
                            g6 = v22;
                            int32_t v23 = *(int32_t *)(4 * v22 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63ecf
                            int32_t v24 = g10; // 0x63ed6
                            int32_t v25 = v24 & v23; // 0x63ed6
                            uint32_t v26 = v21 & (int32_t)&g862 & 31; // 0x63ed8
                            int32_t v27; // 0x63ed8
                            if (v26 != 0) {
                                // bb313
                                v27 = v25 << v26;
                            } else {
                                v27 = v25;
                            }
                            // bb315
                            g8 = v27;
                            g7 = v22;
                            uint32_t v28 = v22 & (int32_t)&g862 & 31; // 0x63edc
                            int32_t v29; // 0x63edc
                            if (v28 != 0) {
                                // bb316
                                v29 = v24 >> v28;
                                g10 = v29;
                            } else {
                                v29 = v24;
                            }
                            // bb317
                            g8 = v27 | v16;
                            *(int32_t *)(g9 + 16) = v29;
                            goto lab_0x63d49;
                        }
                    } else {
                        // 0x63dc2
                        *(char *)(v6 + 4) = 1;
                        *(int32_t *)(g9 + 16) = 0;
                        // 0x63dcd
                        g8 = 0;
                        goto lab_0x63dcf;
                    }
                }
            }
        }
      lab_0x63e28_2:;
        int32_t v30 = a3 - 33 & -32; // 0x63e31
        g7 = -v30;
        v7 = -32 - v30 + a3;
        g6 = v7;
        v5 = g9;
    } else {
        v5 = a2;
        v7 = a3;
    }
    int32_t * v31 = (int32_t *)(v5 + 20); // 0x63e3d
    int32_t v32 = *v31; // 0x63e3d
    g7 = v32;
    int32_t v33 = *(int32_t *)(v5 + 16); // 0x63e40
    g6 = v33;
    int32_t v34 = v32 - v7; // 0x63e43
    if (v32 < v7) {
        int32_t * v35 = (int32_t *)(v5 + 24); // 0x63f33
        uint32_t v36 = *v35; // 0x63f33
        g6 = v36;
        uint32_t v37 = *(int32_t *)(v5 + 28); // 0x63f36
        if (v36 == v37) {
            // 0x640a0
            g6 = v36 + 4;
            *v31 = 1;
            g8 = 0;
            *(int32_t *)(g9 + 16) = 0;
            *(int32_t *)(g9 + 24) = g6;
            *(char *)(g9 + 4) = 1;
            goto lab_0x63f52;
        } else {
            if (v36 < v37) {
                // 0x64050
                g10 = *(int32_t *)v36;
                int32_t v38 = v36 + 4; // 0x64052
                g6 = v38;
                *v35 = v38;
                *(int32_t *)(g9 + 16) = g10;
                if (*(char *)(v5 + 4) != 0) {
                    // 0x63f50
                    g8 = 0;
                    goto lab_0x63f52;
                } else {
                    int32_t v39 = g7; // 0x64068
                    int32_t v40 = v7 - v39; // 0x64068
                    g6 = v40;
                    int32_t v41 = *(int32_t *)(4 * v40 + (int32_t)&Generic_bitmask_table_at_87960); // 0x6406a
                    int32_t v42 = g10 & v41; // 0x64071
                    uint32_t v43 = v39 & (int32_t)&g862 & 31; // 0x64073
                    int32_t v44; // 0x6407c
                    if (v43 != 0) {
                        // bb327
                        v44 = v42 << v43;
                    } else {
                        v44 = v42;
                    }
                    // bb329
                    g8 = v44 | v33;
                    *(int32_t *)(g9 + 20) = 32 - v40;
                    int32_t v45 = g6; // 0x64082
                    g7 = v45;
                    int32_t v46 = g10; // 0x64084
                    uint32_t v47 = v45 & (int32_t)&g862 & 31; // 0x64084
                    int32_t v48; // 0x64084
                    if (v47 != 0) {
                        // bb330
                        v48 = v46 >> v47;
                        g10 = v48;
                    } else {
                        v48 = v46;
                    }
                    // bb331
                    *(int32_t *)(g9 + 16) = v48;
                    goto lab_0x63e6c;
                }
            } else {
                // 0x63f45
                *(char *)(v5 + 4) = 1;
                *(int32_t *)(g9 + 16) = 0;
                // 0x63f50
                g8 = 0;
                goto lab_0x63f52;
            }
        }
    } else {
        // 0x63e4c
        g10 = v7;
        g8 = v33;
        g7 = v34;
        int32_t v49 = *(int32_t *)(4 * v7 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63e53
        g8 = v49 & v33;
        *v31 = v34;
        if (v34 == 0) {
            int32_t v50 = g9; // 0x63fc0
            g7 = *(int32_t *)(v50 + 24);
            *(int32_t *)(v50 + 20) = 32;
            uint32_t v51 = g7; // 0x63fca
            int32_t v52 = g9; // 0x63fca
            uint32_t v53 = *(int32_t *)(v52 + 28); // 0x63fca
            if (v51 == v53) {
                // 0x640cd
                g7 = v51 + 4;
                *(int32_t *)(v52 + 20) = 1;
                *(int32_t *)(g9 + 16) = 0;
                *(int32_t *)(g9 + 24) = g7;
            } else {
                if (v51 < v53) {
                    // 0x64090
                    g6 = *(int32_t *)v51;
                    int32_t v54 = v51 + 4; // 0x64092
                    g7 = v54;
                    *(int32_t *)(v52 + 24) = v54;
                    *(int32_t *)(g9 + 16) = g6;
                } else {
                    // 0x63fd9
                    *(char *)(v52 + 4) = 1;
                    *(int32_t *)(g9 + 16) = 0;
                }
            }
        } else {
            int32_t v55 = g10; // 0x63e65
            g7 = v55;
            int32_t v56 = g6; // 0x63e67
            uint32_t v57 = v55 & (int32_t)&g862 & 31; // 0x63e67
            int32_t v58; // 0x63e67
            if (v57 != 0) {
                // bb306
                v58 = v56 >> v57;
                g6 = v58;
            } else {
                v58 = v56;
            }
            // bb307
            *(int32_t *)(g9 + 16) = v58;
        }
        goto lab_0x63e6c;
    }
  lab_0x63d49:;
    int32_t v59 = g4; // 0x63d49
    int32_t v60 = *(int32_t *)(v59 + 20); // 0x63d49
    g6 = v60;
    if (v60 > 31) {
        goto lab_0x63d55;
    } else {
        goto lab_0x63ddb;
    }
  lab_0x63dcf:;
    int32_t v61 = g4; // 0x63dcf
    int32_t v62 = *(int32_t *)(v61 + 20); // 0x63dcf
    g6 = v62;
    if (v62 > 31) {
        v59 = v61;
        v60 = v62;
        goto lab_0x63d55;
    } else {
        v59 = v61;
        v60 = v62;
        goto lab_0x63ddb;
    }
  lab_0x63d55:;
    int32_t v63 = 32 - v60; // 0x63d5a
    g7 = v63;
    int32_t v64 = v60 - 32; // 0x63d5c
    g6 = v64;
    uint32_t v65 = v63 & (int32_t)&g862 & 31; // 0x63d5f
    if (v65 != 0) {
        // bb
        g8 <<= v65;
    }
    // bb294
    *(int32_t *)(v59 + 20) = v64;
    int32_t * v66 = (int32_t *)(g4 + 16); // 0x63d64
    int32_t v67 = *v66 | g8; // 0x63d64
    g8 = v67;
    *v66 = v67;
    if (v64 == 0) {
        int32_t v68 = g4; // 0x63d6e
        int32_t * v69 = (int32_t *)(v68 + 24); // 0x63d6e
        int32_t v70 = *v69; // 0x63d6e
        g7 = v70;
        if (v70 == *(int32_t *)(v68 + 28)) {
            // 0x63ff0
            *(char *)(v68 + 4) = 1;
        } else {
            int32_t v71 = v70 + 4; // 0x63d7a
            g6 = v71;
            *v69 = v71;
            *(int32_t *)g7 = g8;
        }
        // 0x63d82
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 20) = 32;
    }
    int32_t v72 = v4 - 32; // 0x63d90
    if (v72 <= 32) {
        // break -> 0x63e28
        goto lab_0x63e28_2;
    }
    goto lab_0x63d9e;
  lab_0x63ddb:;
    int32_t v107 = *(int32_t *)(4 * v60 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63ddb
    int32_t v108 = 32 - v60; // 0x63de7
    g7 = v108;
    int32_t v109 = g8 & v107; // 0x63de9
    uint32_t v110 = v108 & (int32_t)&g862 & 31; // 0x63deb
    int32_t v111; // 0x63deb
    if (v110 != 0) {
        // bb298
        v111 = v109 << v110;
    } else {
        v111 = v109;
    }
    // bb300
    g10 = v111;
    int32_t v112 = *(int32_t *)(v59 + 24); // 0x63ded
    g7 = v112;
    int32_t * v113 = (int32_t *)(v59 + 16); // 0x63df0
    int32_t v114 = *v113 | v111; // 0x63df0
    g10 = v114;
    *v113 = v114;
    if (v112 == *(int32_t *)(v59 + 28)) {
        // 0x63f00
        *(char *)(g4 + 4) = 1;
    } else {
        // 0x63e02
        *(int32_t *)(g4 + 24) = v112 + 4;
        g7 = v112;
        *(int32_t *)v112 = g10;
    }
    int32_t v115 = v4 - 32; // 0x63e10
    int32_t v116 = g6; // 0x63e14
    g7 = v116;
    *(int32_t *)(g4 + 20) = v116;
    int32_t v117 = g8; // 0x63e19
    uint32_t v118 = g7 & (int32_t)&g862 & 31; // 0x63e19
    int32_t v119; // 0x63e19
    if (v118 != 0) {
        // bb303
        v119 = v117 >> v118;
        g8 = v119;
    } else {
        v119 = v117;
    }
    // bb304
    *(int32_t *)(g4 + 16) = v119;
    if (v115 <= 32) {
        // break -> 0x63e28
        goto lab_0x63e28_2;
    }
    v72 = v115;
    goto lab_0x63d9e;
  lab_0x63d9e:
    // 0x63d9e
    v6 = g9;
    v4 = v72;
    goto lab_0x63d9e_2;
  lab_0x63e6c:;
    int32_t v73 = g4; // 0x63e6c
    int32_t v74 = *(int32_t *)(v73 + 20); // 0x63e6c
    g6 = v74;
    if (v74 < v7) {
        goto lab_0x63f5e;
    } else {
        goto lab_0x63e78;
    }
  lab_0x63f52:;
    int32_t v75 = g4; // 0x63f52
    int32_t v76 = *(int32_t *)(v75 + 20); // 0x63f52
    g6 = v76;
    if (v76 < v7) {
        v73 = v75;
        v74 = v76;
        goto lab_0x63f5e;
    } else {
        v73 = v75;
        v74 = v76;
        goto lab_0x63e78;
    }
  lab_0x63f5e:;
    int32_t v77 = 32 - v74; // 0x63f66
    g7 = v77;
    int32_t v78 = v7 - v74; // 0x63f68
    g10 = v78;
    int32_t v79 = *(int32_t *)(4 * v74 + (int32_t)&Generic_bitmask_table_at_87960); // 0x63f6d
    int32_t v80 = g8 & v79; // 0x63f74
    uint32_t v81 = v77 & (int32_t)&g862 & 31; // 0x63f76
    int32_t v82; // 0x63f76
    if (v81 != 0) {
        // bb319
        v82 = v80 << v81;
    } else {
        v82 = v80;
    }
    // bb321
    g10 = v82;
    int32_t v83 = *(int32_t *)(v73 + 24); // 0x63f78
    g7 = v83;
    int32_t * v84 = (int32_t *)(v73 + 16); // 0x63f7b
    int32_t v85 = *v84 | v82; // 0x63f7b
    g10 = v85;
    *v84 = v85;
    int32_t v86;
    if (v83 == *(int32_t *)(v73 + 28)) {
        // 0x640bf
        *(char *)(g4 + 4) = 1;
        v86 = 1;
    } else {
        // 0x63f8d
        *(int32_t *)(g4 + 24) = v83 + 4;
        g7 = v83;
        *(int32_t *)v83 = g10;
        v86 = (int32_t)*(char *)(g4 + 4);
    }
    // 0x63f9f
    g10 = v86;
    int32_t v87 = g6; // 0x63f9f
    g7 = v87;
    int32_t v88 = g8; // 0x63fa1
    uint32_t v89 = v87 & (int32_t)&g862 & 31; // 0x63fa1
    int32_t v90; // 0x63fa1
    if (v89 != 0) {
        // bb323
        v90 = v88 >> v89;
        g8 = v90;
    } else {
        v90 = v88;
    }
    // bb324
    g7 = 32 - v78;
    *(int32_t *)(g4 + 16) = v90;
    *(int32_t *)(g4 + 20) = g7;
    goto lab_0x63e99;
  lab_0x63e78:;
    int32_t v95 = 32 - v74; // 0x63e7d
    g7 = v95;
    int32_t v96 = v74 - v7; // 0x63e7f
    g6 = v96;
    int32_t v97 = g8; // 0x63e82
    uint32_t v98 = v95 & (int32_t)&g862 & 31; // 0x63e82
    int32_t v99; // 0x63e82
    if (v98 != 0) {
        // bb308
        v99 = v97 << v98;
        g8 = v99;
    } else {
        v99 = v97;
    }
    // bb310
    g8 = *(int32_t *)(v73 + 16) | v99;
    *(int32_t *)(v73 + 20) = v96;
    *(int32_t *)(g4 + 16) = g8;
    int32_t v100 = g4; // 0x64020
    if (v96 == 0) {
        int32_t * v101 = (int32_t *)(v100 + 24); // 0x64020
        int32_t v102 = *v101; // 0x64020
        g7 = v102;
        int32_t v103;
        int32_t v104; // 0x64038
        if (v102 == *(int32_t *)(v100 + 28)) {
            // 0x640e6
            *(char *)(v100 + 4) = 1;
            v104 = g4;
            v103 = 1;
        } else {
            int32_t v105 = v102 + 4; // 0x6402c
            g6 = v105;
            *v101 = v105;
            *(int32_t *)g7 = g8;
            int32_t v106 = g4; // 0x64034
            v104 = v106;
            v103 = (int32_t)*(char *)(v106 + 4);
        }
        // 0x64038
        g10 = v103;
        *(int32_t *)(v104 + 16) = 0;
        *(int32_t *)(g4 + 20) = 32;
    } else {
        // 0x63e95
        g10 = (int32_t)*(char *)(v100 + 4);
    }
    goto lab_0x63e99;
  lab_0x63e99:;
    int32_t v91 = g10; // 0x63e99
    g6 = v91;
    g4 = 0;
    if ((char)v91 == 0) {
        int32_t v92 = g9; // 0x63ea1
        unsigned char v93 = *(char *)(v92 + 4); // 0x63ea1
        int32_t v94 = (int32_t)v93 ^ 1; // 0x63ea5
        g4 = v94;
    }
    // 0x63ea8
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x64100 - 0x6412e
int32_t function_64100(int32_t a1, int32_t a2) {
    // 0x64100
    int32_t v1; // ebp
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    g4 = a2;
    int32_t v3 = *(int32_t *)(a2 + 8); // 0x64109
    g9 = v3;
    int32_t v4 = *(int32_t *)(a2 + 4); // 0x6410c
    g7 = v4;
    int32_t v5 = *(int32_t *)a2; // 0x6410f
    int32_t v6 = v5; // bp-16
    g4 = a1;
    int32_t result = function_636c0(a1, &v6, v5, v4, v3, v1); // 0x64127
    g4 = result;
    return result;
}

// Address range: 0x64130 - 0x642bf
int32_t function_64130(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x64133
    int32_t v2 = g10; // 0x64134
    int32_t v3 = g6; // 0x64135
    g7 = a2;
    g4 = a1;
    int32_t v4 = *(int32_t *)(a1 + 8); // 0x64141
    g9 = v4;
    char v5;
    char v6;
    int32_t v7; // 0x64184
    int32_t v8; // 0x6415b
    if (a2 < 0) {
        goto lab_0x641e8;
    } else {
        if (v4 < a2) {
            goto lab_0x641e8;
        } else {
            uint32_t v9 = *(int32_t *)(a1 + 12); // 0x64156
            g6 = v9;
            v8 = v9 % 4;
            g9 = v8;
            if (v9 < 4) {
                v6 = 1;
                goto lab_0x64203;
            } else {
                v7 = a2;
                v5 = 1;
                goto lab_0x64167;
            }
        }
    }
  lab_0x641e8:
    // 0x641e8
    g6 = *(int32_t *)(a1 + 12);
    g7 = v4;
    *(char *)(a1 + 4) = 1;
    uint32_t v10 = g6; // 0x641f5
    int32_t v11 = v10 % 4; // 0x641f7
    g9 = v11;
    if (v10 < 4) {
        v8 = v11;
        v6 = 0;
        goto lab_0x64203;
    } else {
        // 0x641e8
        v8 = v11;
        v7 = g7;
        v5 = 0;
        goto lab_0x64167;
    }
  lab_0x64203:;
    int32_t v12 = g4; // 0x64203
    int32_t v13 = *(int32_t *)(v12 + 32); // 0x64203
    g6 = v13;
    int32_t v14; // 0x6423b
    if (v13 != 0) {
        int32_t v15 = (int32_t)*(char *)v13; // 0x6420a
        g8 = v15;
        *(int32_t *)(v12 + 16) = v15;
        int32_t v16 = g6 + 1; // 0x64215
        if (v8 > 1) {
            int32_t v17 = 256 * (int32_t)*(char *)v16 | g8; // 0x6421c
            g10 = v17;
            *(int32_t *)(g4 + 16) = v17;
            int32_t v18 = g6; // 0x64290
            int32_t v19 = v18 + 2; // 0x64290
            if (g9 != 3) {
                // 0x64290
                g6 = v19;
                v14 = v19;
            } else {
                // 0x64226
                g6 = v18 + 3;
                int32_t v20 = g10 | 0x10000 * (int32_t)*(char *)v19; // 0x64230
                g8 = v20;
                *(int32_t *)(g4 + 16) = v20;
                v14 = g6;
            }
        } else {
            // 0x64268
            g6 = v16;
            v14 = v16;
        }
    } else {
        v14 = 0;
    }
    // 0x64235
    g7 %= 32;
    g9 *= 8;
    *(int32_t *)(g4 + 24) = v14;
    int32_t v21 = g4; // 0x6423e
    int32_t * v22 = (int32_t *)(v21 + 16); // 0x6423e
    int32_t v23 = g7; // 0x6423e
    uint32_t v24 = v23 & (int32_t)&g862 & 31; // 0x6423e
    int32_t v25; // 0x64241
    int32_t v26; // 0x64243
    if (v24 != 0) {
        // bb
        *v22 = *v22 >> v24;
        v26 = g4;
        v25 = g7;
    } else {
        v26 = v21;
        v25 = v23;
    }
    int32_t v27 = g9 - v25; // 0x64241
    g9 = v27;
    *(int32_t *)(v26 + 20) = v27;
    int32_t result = v6; // 0x64246
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x64167:;
    int32_t v28 = (v7 >= 0 ? v7 : v7 + 7) / 8; // 0x6416f
    g6 = v28;
    if (v28 < v8) {
        if (v8 == 0) {
            goto lab_0x6417a;
        } else {
            v6 = v5;
            goto lab_0x64203;
        }
    } else {
        goto lab_0x6417a;
    }
  lab_0x6417a:;
    int32_t v29 = 8 * v8; // 0x6417a
    g6 = v29;
    int32_t v30 = g4; // 0x64181
    int32_t v31 = *(int32_t *)(v30 + 32); // 0x64181
    g10 = v31;
    uint32_t v32 = v7 - v29; // 0x64184
    g7 = v32;
    int32_t v33 = v31 + (4 * (v32 >= 0 ? v32 : v32 + 31) / 32 | v8); // 0x64194
    g6 = v33;
    *(int32_t *)(v30 + 24) = v33;
    int32_t v34; // 0x641c5
    if (v31 == 0) {
        // 0x642b0
        g7 = v32 % 32;
        g6 = 1;
        g9 = 0;
        v34 = 0;
    } else {
        uint32_t v35 = g6; // 0x641a1
        int32_t v36 = g4; // 0x641a1
        uint32_t v37 = *(int32_t *)(v36 + 28); // 0x641a1
        *(int32_t *)(v36 + 20) = 32;
        if (v35 == v37) {
            // 0x64298
            g7 = v32 % 32;
            g9 = 0;
            *(int32_t *)(g4 + 24) = g6 + 4;
            g6 = 1;
            v34 = g9;
        } else {
            if (v35 < v37) {
                int32_t v38 = g6; // 0x64270
                g9 = *(int32_t *)v38;
                g7 = v32 % 32;
                *(int32_t *)(g4 + 24) = v38 + 4;
                g6 = 32;
                int32_t v39 = g9; // 0x64280
                uint32_t v40 = g7 & (int32_t)&g862 & 31; // 0x64280
                if (v40 != 0) {
                    int32_t v41 = v39 >> v40; // 0x64280
                    g9 = v41;
                    v34 = v41;
                } else {
                    v34 = v39;
                }
            } else {
                // 0x641b7
                *(char *)(g4 + 4) = 1;
                g7 = v32 % 32;
                g6 = 32;
                g9 = 0;
                v34 = 0;
            }
        }
    }
    // 0x641c5
    *(int32_t *)(g4 + 16) = v34;
    int32_t v42 = 32 - g7; // 0x641cd
    int32_t v43 = g6; // 0x641cf
    int32_t v44 = v42 - v43; // 0x641cf
    int32_t v45 = v44 < 0 == ((v44 ^ v42) & (v43 ^ v42)) < 0 == (v44 != 0) ? v43 : v42; // 0x641d1
    g9 = v45;
    *(int32_t *)(g4 + 20) = v45;
    int32_t result2 = v5; // 0x641d7
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x642c0 - 0x64331
int32_t function_642c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // bp-12
    g6 = a5;
    g4 = a1;
    int32_t v2 = g10; // 0x642cf
    g9 = a2;
    g7 = a3;
    g10 = a4;
    *(int32_t *)(a1 + 32) = a2;
    *(int32_t *)(g4 + 24) = a2;
    *(int32_t *)(g4 + 12) = g7;
    int32_t v3 = g7; // 0x64310
    if (a5 == -1) {
        int32_t v4 = 8 * v3; // 0x64310
        g6 = v4;
        g7 = v3 + a2;
        *(int32_t *)(g4 + 8) = v4;
        *(char *)(g4 + 4) = 0;
        *(int32_t *)(g4 + 28) = g7;
        if (a2 == 0) {
            // 0x64327
            g6 = v1;
            g10 = v2;
            return g4;
        }
    } else {
        // 0x642e9
        g7 = v3 + a2;
        *(int32_t *)(g4 + 8) = g6;
        *(char *)(g4 + 4) = 0;
        *(int32_t *)(g4 + 28) = g7;
        if (a2 == 0) {
            // 0x64327
            g6 = v1;
            g10 = v2;
            return g4;
        }
    }
    // 0x642f9
    g6 = v1;
    g10 = v2;
    int32_t result = function_64130(v1, v2); // 0x64308
    g4 = result;
    return result;
}

// Address range: 0x64340 - 0x644d1
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_64340(int32_t a1, int32_t * a2, int32_t * a3, uint32_t a4, int32_t * a5) {
    int32_t v1 = (int32_t)a5;
    int32_t v2 = (int32_t)a2;
    int32_t v3 = g8; // 0x64343
    int32_t v4 = g10; // 0x64344
    int32_t v5 = g6; // 0x64345
    g6 = 0;
    g9 = a1;
    g10 = a4 % 256;
    int32_t v6 = (int32_t)a3 - 1; // 0x6435c
    g4 = v6;
    int32_t v7 = 0; // 0x644c3
    int32_t * v8; // 0x643a1
    uint32_t v9; // 0x643af
    while (true) {
        char v10; // 0x64382
        while (true) {
            int32_t v11 = g9; // 0x643a1
            v8 = (int32_t *)(v11 + 20);
            int32_t v12 = *v8; // 0x643a1
            g7 = v12;
            int32_t v13 = *(int32_t *)(v11 + 16); // 0x64368
            if (v12 > 7) {
                // 0x64368
                g8 = v13;
                int32_t v14 = v12 - 8; // 0x6436b
                g7 = v14;
                *v8 = v14;
                uint32_t v15 = g8; // 0x64371
                g4 = v15 & (int32_t)&g862;
                if (v14 == 0) {
                    int32_t v16 = g9; // 0x643f8
                    g7 = *(int32_t *)(v16 + 24);
                    *(int32_t *)(v16 + 20) = 32;
                    uint32_t v17 = g7; // 0x64402
                    int32_t v18 = g9; // 0x64402
                    uint32_t v19 = *(int32_t *)(v18 + 28); // 0x64402
                    if (v17 == v19) {
                        // 0x644a0
                        g7 = v17 + 4;
                        *(int32_t *)(v18 + 20) = 1;
                        *(int32_t *)(g9 + 16) = 0;
                        *(int32_t *)(g9 + 24) = g7;
                    } else {
                        if (v17 < v19) {
                            // 0x64470
                            g8 = *(int32_t *)v17;
                            int32_t v20 = v17 + 4; // 0x64472
                            g7 = v20;
                            *(int32_t *)(v18 + 24) = v20;
                            *(int32_t *)(g9 + 16) = g8;
                        } else {
                            // 0x6440d
                            *(char *)(v18 + 4) = 1;
                            *(int32_t *)(g9 + 16) = 0;
                        }
                    }
                } else {
                    int32_t v21 = v15 / 256; // 0x6437c
                    g8 = v21;
                    *(int32_t *)(g9 + 16) = v21;
                }
            } else {
                // 0x643a9
                g4 = v13;
                int32_t * v22 = (int32_t *)(v11 + 24); // 0x643af
                v9 = *v22;
                g4 = v9;
                uint32_t v23 = *(int32_t *)(v11 + 28); // 0x643b2
                if (v9 == v23) {
                    // break (via goto) -> 0x64480
                    goto lab_0x64480;
                }
                if (v9 >= v23) {
                    // 0x643bd
                    *(char *)(v11 + 4) = 1;
                    *(int32_t *)(g9 + 16) = 0;
                    goto lab_0x643c8_3;
                }
                // 0x64420
                g8 = *(int32_t *)v9;
                int32_t v24 = v9 + 4; // 0x64422
                g4 = v24;
                *v22 = v24;
                int32_t v25 = g8; // 0x6442c
                *(int32_t *)(g9 + 16) = v25;
                if (*(char *)(v11 + 4) != 0) {
                    goto lab_0x643c8_3;
                }
                int32_t v26 = g7; // 0x64439
                int32_t v27 = 8 - v26; // 0x64439
                int32_t v28 = g8; // 0x6443e
                g4 = v28;
                g8 = v27;
                int32_t v29 = *(int32_t *)(4 * v27 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64443
                int32_t v30 = v29 & v28; // 0x64443
                g4 = v30;
                g8 = v25;
                uint32_t v31 = v26 & (int32_t)&g862 & 31; // 0x6444d
                if (v31 != 0) {
                    // bb
                    g4 = v30 << v31;
                }
                // bb43
                *(int32_t *)(g9 + 20) = v26 + 24;
                g7 = v27 % 256;
                g4 |= v13;
                int32_t v32 = g8; // 0x6445c
                uint32_t v33 = v27 & (int32_t)&g862 & 31; // 0x6445c
                int32_t v34; // 0x6445c
                if (v33 != 0) {
                    // bb44
                    v34 = v32 >> v33;
                    g8 = v34;
                } else {
                    v34 = v32;
                }
                // bb45
                *(int32_t *)(g9 + 16) = v34;
            }
            // 0x64382
            v10 = g4;
            if (v10 == 0) {
                goto lab_0x643c8_3;
            }
            int32_t v35 = g10; // 0x64386
            g7 = v35;
            if ((char)v35 != 0) {
                if (v10 == 10) {
                    goto lab_0x643c8_3;
                }
            }
            // 0x64390
            g8 = v7;
            if (v6 > v7) {
                // break -> 0x644c0
                break;
            }
            // 0x6439c
            g6 = 1;
        }
        // 0x644c0
        g7 = v2;
        *(char *)(v7 + v2) = v10;
        int32_t v36 = g8 + 1; // 0x644c6
        g8 = v36;
        v7 = v36;
    }
  lab_0x64480:
    // 0x64480
    g4 = v9 + 4;
    *v8 = 1;
    *(int32_t *)(g9 + 16) = 0;
    *(int32_t *)(g9 + 24) = g4;
    *(char *)(g9 + 4) = 1;
    goto lab_0x643c8_3;
  lab_0x643c8_3:
    // 0x643c8
    g8 = v7;
    *(char *)(v7 + v2) = 0;
    g4 = v1;
    if (a5 != NULL) {
        // 0x643d9
        g4 = v1;
        *a5 = g8;
    }
    int32_t v37 = g6 ^ 1; // 0x643de
    g6 = v37;
    g4 = 0;
    int32_t result = *(char *)(g9 + 4) == 0 ? v37 : 0; // 0x643e7
    g4 = result;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result;
}

// Address range: 0x644e0 - 0x64669
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_644e0(int32_t a1, int32_t a2, int32_t a3, unsigned char a4, int32_t a5) {
    // 0x644e0
    g6 = 0;
    g9 = a1;
    g10 = a4;
    g4 = a3 - 1;
    while (true) {
        // continue -> 0x6453f
    }
  lab_0x64630:;
    // 0x64630
    int32_t v1; // 0x6454d
    g4 = v1 + 4;
    int32_t * v2; // 0x6453f
    *v2 = 1;
    int32_t v3 = g9; // 0x6463a
    *(int32_t *)(v3 + 16) = 0;
    int32_t v4 = g4; // 0x64641
    int32_t v5 = g9; // 0x64641
    *(int32_t *)(v5 + 24) = v4;
    int32_t v6 = g9; // 0x64644
    *(char *)(v6 + 4) = 1;
    goto lab_0x64566_3;
  lab_0x64566_3:;
    int32_t v7 = g6; // 0x64569
    *(int32_t *)(4 * v7 + a2) = 0;
    g4 = a5;
    if (a5 != 0) {
        // 0x64577
        g8 = a5;
        int32_t v8 = g6; // 0x6457a
        *(int32_t *)a5 = v8;
    }
    // 0x6457c
    g4 = 0;
    int32_t v9;
    g7 = v9;
    int32_t v10 = g9; // 0x64585
    char v11 = *(char *)(v10 + 4); // 0x64585
    int32_t result = v11 == 0 ? v9 : 0; // 0x64589
    g4 = result;
    int32_t v12; // 0x644e5
    g6 = v12;
    int32_t v13; // 0x644e4
    g10 = v13;
    int32_t v14; // 0x644e3
    g8 = v14;
    return result;
}

// Address range: 0x64670 - 0x646e9
int32_t function_64670(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x64673
    int32_t v2 = g6; // 0x64674
    int32_t v3; // bp-2064
    g6 = &v3;
    g10 = a2;
    g4 = a1;
    int32_t v4; // bp-16
    int32_t v5 = function_64340(a1, &v3, &g148, 0, &v4); // 0x646a5
    g4 = v5;
    if (a2 != 0) {
        int32_t v6 = v5 ^ 1; // 0x646ae
        g4 = v6;
        *(char *)a2 = (char)v6;
    }
    // 0x646b3
    g4 = v4 + 1;
    int32_t result = function_1bc60(); // 0x646bc
    g4 = result;
    int32_t v7 = v4; // 0x646c1
    g9 = v7;
    if (v7 < 0) {
        // 0x646df
        g6 = v2;
        g10 = v1;
        return result;
    }
    // 0x646c8
    g9 = 0;
    g10 = a2;
    int32_t v8 = 0; // 0x646d4
    unsigned char v9 = *(char *)(g6 + v8); // 0x646d0
    g7 = v9;
    *(char *)(v8 + result) = v9;
    int32_t v10 = g9 + 1; // 0x646d7
    g9 = v10;
    int32_t result2 = g4;
    while (v4 >= v10) {
        // 0x646d0
        v8 = v10;
        v9 = *(char *)(g6 + v8);
        g7 = v9;
        *(char *)(v8 + result2) = v9;
        v10 = g9 + 1;
        g9 = v10;
        result2 = g4;
    }
    // 0x646df
    g6 = v2;
    g10 = v1;
    return result2;
}

// Address range: 0x646f0 - 0x649ca
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_646f0(int32_t a1) {
    int32_t v1 = g8; // 0x646f3
    int32_t v2 = g10; // 0x646f4
    int32_t v3; // bp-36
    g8 = &v3;
    int32_t v4 = g6; // 0x646f8
    g4 = a1;
    int32_t * v5 = (int32_t *)(a1 + 20); // 0x64705
    int32_t v6 = *v5; // 0x64705
    g9 = v6;
    int32_t v7; // ebp
    int32_t v8;
    int32_t v9;
    int32_t v10;
    int32_t v11;
    unsigned char v12;
    int32_t v13; // 0x647dd
    int32_t v14; // 0x64803
    int32_t v15; // 0x64806
    int32_t v16; // 0x64948
    int32_t v17; // 0x64769
    if (v6 > 31) {
        int32_t v18 = v6 - 32; // 0x6470d
        g7 = v18;
        g10 = *(int32_t *)(a1 + 16);
        *v5 = v18;
        if (v18 == 0) {
            int32_t v19 = g4; // 0x647d0
            g9 = *(int32_t *)(v19 + 28);
            *(int32_t *)(v19 + 20) = 32;
            int32_t v20 = g4; // 0x647da
            int32_t * v21 = (int32_t *)(v20 + 24); // 0x647da
            uint32_t v22 = *v21; // 0x647da
            g7 = v22;
            v13 = g9;
            if (v22 == v13) {
                // 0x64968
                g7 = v22 + 4;
                *(int32_t *)(v20 + 20) = 1;
                g9 = 1;
                *(int32_t *)(g4 + 16) = 0;
                *(int32_t *)(g4 + 24) = g7;
                v8 = v13;
                v10 = 0;
                goto lab_0x64791;
            } else {
                if (v22 < v13) {
                    // 0x647ee
                    g6 = *(int32_t *)v22;
                    int32_t v23 = v22 + 4; // 0x647f0
                    g7 = v23;
                    *v21 = v23;
                    *(int32_t *)(g4 + 16) = g6;
                } else {
                    // 0x648d8
                    *(char *)(v20 + 4) = 1;
                    g6 = 0;
                    *(int32_t *)(g4 + 16) = 0;
                }
                int32_t v24 = v12; // 0x647f9
                g9 = v24;
                v3 = g10;
                g8 = 4 * v24 - 32 + v7;
                v15 = g4;
                v14 = g7;
                goto lab_0x64803;
            }
        } else {
            // 0x6471e
            g6 = v12;
            v3 = g10;
            *(int32_t *)(g4 + 16) = 0;
            g8 = v7 - 32 + 4 * g6;
            if (v18 > 31) {
                int32_t v25 = g9 - 64; // 0x64738
                g9 = v25;
                *(int32_t *)(g4 + 20) = v25;
                if (v25 != 0) {
                    // 0x64746
                    g6 = 0;
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)g8 = g6;
                    int32_t result = v3; // 0x64751
                    g4 = result;
                    g6 = v4;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
                int32_t v26 = g4; // 0x648f0
                int32_t v27 = *(int32_t *)(v26 + 28); // 0x648f0
                g9 = v27;
                g6 = 0;
                int32_t v28 = *(int32_t *)(v26 + 24); // 0x648f5
                g7 = v28;
                v15 = v26;
                v14 = v28;
                v13 = v27;
                goto lab_0x64803;
            } else {
                int32_t v29 = g4; // 0x649a9
                int32_t v30 = *(int32_t *)(v29 + 28); // 0x649a9
                g6 = v30;
                g9 = v18;
                int32_t v31 = *(int32_t *)(v29 + 24); // 0x649b5
                g7 = v31;
                v16 = v31;
                v9 = v30;
                v11 = 0;
                goto lab_0x6479b;
            }
        }
    } else {
        int32_t v32 = *(int32_t *)(a1 + 16); // 0x64760
        g6 = v32;
        int32_t * v33 = (int32_t *)(a1 + 24); // 0x64763
        uint32_t v34 = *v33; // 0x64763
        g7 = v34;
        v17 = *(int32_t *)(a1 + 28);
        g6 = v17;
        if (v34 == v17) {
            // 0x64900
            g7 = v34 + 4;
            *v5 = 1;
            g9 = 1;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 24) = g7;
            *(char *)(g4 + 4) = 1;
            goto lab_0x64788;
        } else {
            if (v34 < v17) {
                // 0x64888
                g6 = *(int32_t *)v34;
                int32_t v35 = v34 + 4; // 0x6488a
                g7 = v35;
                *v33 = v35;
                int32_t v36 = g6; // 0x64897
                *(int32_t *)(g4 + 16) = v36;
                if (*(char *)(a1 + 4) != 0) {
                    // 0x649c0
                    g10 = 0;
                    g7 = v35;
                    v8 = v17;
                    v10 = v36;
                } else {
                    // 0x648a3
                    g10 = v36;
                    int32_t v37 = g9; // 0x648ab
                    g7 = v37;
                    g6 = 32 - v37;
                    *(int32_t *)(g4 + 20) = v37;
                    int32_t v38 = g6; // 0x648b2
                    int32_t v39 = *(int32_t *)(4 * v38 + (int32_t)&Generic_bitmask_table_at_87960); // 0x648b2
                    int32_t v40 = v39 & g10; // 0x648b2
                    g10 = v40;
                    uint32_t v41 = g7 & (int32_t)&g862 & 31; // 0x648b9
                    int32_t v42; // 0x648b9
                    if (v41 != 0) {
                        // bb271
                        v42 = v40 << v41;
                        g10 = v42;
                    } else {
                        v42 = v40;
                    }
                    // bb273
                    g7 = v38;
                    uint32_t v43 = v38 & (int32_t)&g862 & 31; // 0x648bd
                    int32_t v44;
                    if (v43 != 0) {
                        // bb274
                        v44 = v36 >> v43;
                    } else {
                        v44 = v36;
                    }
                    // bb275
                    g10 = v42 | v32;
                    g7 = v35;
                    g6 = v44;
                    *(int32_t *)(g4 + 16) = v44;
                    v8 = v17;
                    v10 = v44;
                }
                goto lab_0x64791;
            } else {
                // 0x6477d
                *(char *)(a1 + 4) = 1;
                *(int32_t *)(g4 + 16) = 0;
                goto lab_0x64788;
            }
        }
    }
  lab_0x64788:
    // 0x64788
    g10 = 0;
    v8 = v17;
    v10 = 0;
    goto lab_0x64791;
  lab_0x64791:;
    int32_t v45 = v12; // 0x64791
    g6 = v45;
    v3 = g10;
    g8 = 4 * v45 - 32 + v7;
    v16 = g7;
    v9 = v8;
    v11 = v10;
    goto lab_0x6479b;
  lab_0x64803:
    // 0x64803
    *(int32_t *)(v15 + 20) = 32;
    if (v14 != v13) {
        if (v14 >= v13) {
            // 0x64819
            *(int32_t *)g8 = g6;
            *(char *)(g4 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
            int32_t result4 = v3; // 0x64829
            g4 = result4;
            g6 = v4;
            g10 = v2;
            g8 = v1;
            return result4;
        }
        // 0x64928
        g9 = *(int32_t *)g7;
        *(int32_t *)g8 = g6;
        int32_t v58 = g7 + 4; // 0x6492c
        g7 = v58;
        *(int32_t *)(g4 + 24) = v58;
        *(int32_t *)(g4 + 16) = g9;
        int32_t result5 = v3; // 0x64935
        g4 = result5;
        g6 = v4;
        g10 = v2;
        g8 = v1;
        return result5;
    }
    // 0x64990
    g7 += 4;
    *(int32_t *)(g4 + 20) = 1;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 24) = g7;
    int32_t v57 = g6; // 0x647b7
    goto lab_0x647b7;
  lab_0x6479b:
    if (v16 == v9) {
        // 0x64948
        g7 = v16 + 4;
        *(int32_t *)(g4 + 20) = 1;
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 24) = g7;
        *(char *)(g4 + 4) = 1;
    } else {
        if (v16 < v9) {
            // 0x64838
            g6 = *(int32_t *)v16;
            int32_t v46 = v16 + 4; // 0x6483a
            g7 = v46;
            int32_t v47 = g4; // 0x6483d
            *(int32_t *)(v47 + 24) = v46;
            int32_t v48 = g6; // 0x64844
            *(int32_t *)(g4 + 16) = v48;
            if (*(char *)(v47 + 4) == 0) {
                // 0x64850
                g10 = 32;
                int32_t * v49 = (int32_t *)(g4 + 20); // 0x64855
                g7 = *v49;
                *v49 = g9;
                int32_t v50 = g10 - g9; // 0x6485b
                g10 = v50;
                g9 = v48;
                int32_t v51 = *(int32_t *)(4 * v50 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64860
                int32_t v52 = v51 & g6; // 0x64860
                g6 = v52;
                uint32_t v53 = g7 & (int32_t)&g862 & 31; // 0x64867
                int32_t v54; // 0x64867
                if (v53 != 0) {
                    // bb
                    v54 = v52 << v53;
                    g6 = v54;
                } else {
                    v54 = v52;
                }
                // bb266
                g7 = v50;
                g6 = v54 | v11;
                uint32_t v55 = v50 & (int32_t)&g862 & 31; // 0x6486e
                int32_t v56; // 0x6486e
                if (v55 != 0) {
                    // bb267
                    v56 = v48 >> v55;
                    g9 = v56;
                } else {
                    v56 = v48;
                }
                // bb268
                *(int32_t *)(g4 + 16) = v56;
                *(int32_t *)g8 = g6;
                int32_t result2 = v3; // 0x64875
                g4 = result2;
                g6 = v4;
                g10 = v2;
                g8 = v1;
                return result2;
            }
        } else {
            // 0x647aa
            *(char *)(g4 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
        }
    }
    // 0x647b5
    g6 = 0;
    v57 = 0;
    goto lab_0x647b7;
  lab_0x647b7:
    // 0x647b7
    *(int32_t *)g8 = v57;
    int32_t result3 = v3; // 0x647b9
    g4 = result3;
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return result3;
}

// Address range: 0x649d0 - 0x64f5d
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_649d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x649d3
    int32_t v2 = g10; // 0x649d4
    int32_t v3 = g6; // 0x649d5
    g9 = a2;
    g4 = a1;
    g7 = a3;
    int32_t v4;
    int32_t v5; // 0x64a5d
    int32_t v6; // 0x64a80
    int32_t v7; // 0x64a0d
    if ((char)a2 % 4 != 0) {
        if (a3 > 7) {
            // 0x649f4
            g6 = a3;
            v7 = a1;
            while (true) {
              lab_0x64a30:;
                int32_t * v8 = (int32_t *)(v7 + 20); // 0x64a30
                int32_t v9 = *v8; // 0x64a30
                g7 = v9;
                uint32_t v10 = *(int32_t *)(v7 + 16); // 0x64a33
                g10 = v10;
                if (v9 > 7) {
                    int32_t v11 = v9 - 8; // 0x64a00
                    g7 = v11;
                    g8 = v10 & (int32_t)&g862;
                    *v8 = v11;
                    if (v11 == 0) {
                        int32_t v12 = g4; // 0x64c40
                        g7 = *(int32_t *)(v12 + 24);
                        *(int32_t *)(v12 + 20) = 32;
                        uint32_t v13 = g7; // 0x64c4a
                        int32_t v14 = g4; // 0x64c4a
                        uint32_t v15 = *(int32_t *)(v14 + 28); // 0x64c4a
                        if (v13 == v15) {
                            // 0x64ec0
                            g7 = v13 + 4;
                            *(int32_t *)(v14 + 20) = 1;
                            *(int32_t *)(g4 + 24) = g7;
                            g7 = g8;
                            *(int32_t *)(g4 + 16) = 0;
                        } else {
                            if (v13 < v15) {
                                // 0x64d20
                                g10 = *(int32_t *)v13;
                                *(int32_t *)(v14 + 24) = v13 + 4;
                                g7 = g8;
                                *(int32_t *)(g4 + 16) = g10;
                            } else {
                                // 0x64c59
                                *(char *)(v14 + 4) = 1;
                                g7 = g8;
                                *(int32_t *)(g4 + 16) = 0;
                            }
                        }
                    } else {
                        int32_t v16 = g10 / 256; // 0x64a16
                        g10 = v16;
                        g7 = g8;
                        *(int32_t *)(g4 + 16) = v16;
                    }
                    goto lab_0x64a1e;
                } else {
                    int32_t * v17 = (int32_t *)(v7 + 24); // 0x64a3b
                    uint32_t v18 = *v17; // 0x64a3b
                    g8 = v18;
                    uint32_t v19 = *(int32_t *)(v7 + 28); // 0x64a41
                    if (v18 == v19) {
                        // 0x64df0
                        g8 = v18 + 4;
                        *v8 = 1;
                        g7 = 0;
                        *(int32_t *)(g4 + 16) = 0;
                        *(int32_t *)(g4 + 24) = g8;
                        *(char *)(g4 + 4) = 1;
                        v5 = g7;
                        goto lab_0x64a5d;
                    } else {
                        if (v18 < v19) {
                            // 0x64c70
                            g10 = *(int32_t *)v18;
                            int32_t v20 = v18 + 4; // 0x64c72
                            g8 = v20;
                            *v17 = v20;
                            int32_t v21 = g10; // 0x64c7c
                            *(int32_t *)(g4 + 16) = v21;
                            if (*(char *)(v7 + 4) != 0) {
                                // 0x64a5b
                                g7 = 0;
                                v5 = 0;
                                goto lab_0x64a5d;
                            } else {
                                int32_t v22 = g7; // 0x64c8d
                                int32_t v23 = 8 - v22; // 0x64c8d
                                g8 = v23;
                                int32_t v24 = *(int32_t *)(4 * v23 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64c8f
                                int32_t v25 = v24 & g10; // 0x64c8f
                                uint32_t v26 = v22 & (int32_t)&g862 & 31; // 0x64c96
                                int32_t v27; // 0x64c9b
                                if (v26 != 0) {
                                    // bb94
                                    v27 = v25 << v26;
                                } else {
                                    v27 = v25;
                                }
                                // bb96
                                g10 = v21;
                                *(int32_t *)(g4 + 20) = v22 + 24;
                                int32_t v28 = g8; // 0x64ca4
                                g7 = v28;
                                int32_t v29 = g10; // 0x64ca6
                                uint32_t v30 = v28 & (int32_t)&g862 & 31; // 0x64ca6
                                int32_t v31; // 0x64ca6
                                if (v30 != 0) {
                                    // bb98
                                    v31 = v29 >> v30;
                                    g10 = v31;
                                } else {
                                    v31 = v29;
                                }
                                // bb99
                                g7 = v10 % 256;
                                *(int32_t *)(g4 + 16) = v31;
                                g7 |= v27 % 256;
                                goto lab_0x64a1e;
                            }
                        } else {
                            // 0x64a50
                            *(char *)(v7 + 4) = 1;
                            *(int32_t *)(g4 + 16) = 0;
                            // 0x64a5b
                            g7 = 0;
                            v5 = 0;
                            goto lab_0x64a5d;
                        }
                    }
                }
            }
        } else {
            v6 = a2;
            v4 = a3;
        }
    } else {
        v6 = a2;
        v4 = a3;
    }
  lab_0x64a73_3:;
    int32_t v32; // 0x64afe
    int32_t v33; // 0x64b1d
    int32_t v34; // 0x64b16
    if (v4 > 31) {
        // 0x64a7d
        g10 = v4;
        g8 = v6;
      lab_0x64ace_2:
        while (true) {
          lab_0x64ace:;
            int32_t v35 = g4; // 0x64ace
            int32_t * v36 = (int32_t *)(v35 + 20); // 0x64ace
            int32_t v37 = *v36; // 0x64ace
            g7 = v37;
            if (v37 > 31) {
                int32_t v38 = v37 - 32; // 0x64a90
                g7 = v38;
                g9 = *(int32_t *)(v35 + 16);
                *v36 = v38;
                if (v38 != 0) {
                    // 0x64aba
                    *(int32_t *)(g4 + 16) = 0;
                    goto lab_0x64ac1;
                } else {
                    int32_t v39 = g4; // 0x64a9d
                    g7 = *(int32_t *)(v39 + 24);
                    *(int32_t *)(v39 + 20) = 32;
                    uint32_t v40 = g7; // 0x64aa7
                    int32_t v41 = g4; // 0x64aa7
                    uint32_t v42 = *(int32_t *)(v41 + 28); // 0x64aa7
                    if (v40 == v42) {
                        // 0x64ea0
                        g7 = v40 + 4;
                        *(int32_t *)(v41 + 20) = 1;
                        *(int32_t *)(g4 + 16) = 0;
                        *(int32_t *)(g4 + 24) = g7;
                        goto lab_0x64ac1;
                    } else {
                        if (v40 < v42) {
                            // 0x64d10
                            g6 = *(int32_t *)v40;
                            int32_t v43 = v40 + 4; // 0x64d12
                            g7 = v43;
                            *(int32_t *)(v41 + 24) = v43;
                            *(int32_t *)(g4 + 16) = g6;
                            goto lab_0x64ac1;
                        } else {
                            // 0x64ab6
                            *(char *)(v41 + 4) = 1;
                            // 0x64aba
                            *(int32_t *)(g4 + 16) = 0;
                            goto lab_0x64ac1;
                        }
                    }
                }
            } else {
                uint32_t v44 = *(int32_t *)(v35 + 24); // 0x64ad6
                g9 = v44;
                g6 = *(int32_t *)(v35 + 16);
                uint32_t v45 = *(int32_t *)(v35 + 28); // 0x64adc
                if (v44 == v45) {
                    // 0x64e10
                    g9 = v44 + 4;
                    *v36 = 1;
                    *(int32_t *)(g4 + 24) = g9;
                    g9 = 0;
                    *(int32_t *)(g4 + 16) = 0;
                    *(char *)(g4 + 4) = 1;
                    v32 = g9;
                    goto lab_0x64afb;
                } else {
                    if (v44 < v45) {
                        int32_t v46 = *(int32_t *)v44; // 0x64cc0
                        g6 = v46;
                        int32_t v47 = v44 + 4; // 0x64cc2
                        g9 = v47;
                        char v48 = *(char *)(v35 + 4); // 0x64cc5
                        int32_t * v49; // 0x64ad6
                        *v49 = v47;
                        int32_t v50 = g6; // 0x64ccc
                        int32_t v51 = g4; // 0x64ccf
                        *(int32_t *)(v51 + 16) = v50;
                        if (v48 != 0) {
                            // 0x64af9
                            g9 = 0;
                            v32 = 0;
                            goto lab_0x64afb;
                        } else {
                            // 0x64cd8
                            g9 = 32;
                            int32_t v52 = g7; // 0x64cdd
                            int32_t v53 = g4; // 0x64cdd
                            *(int32_t *)(v53 + 20) = v52;
                            int32_t v54 = g9; // 0x64ce0
                            int32_t v55 = g7; // 0x64ce0
                            uint32_t v56 = v54 - v55; // 0x64ce0
                            int32_t v57 = g6; // 0x64ce5
                            g9 = v57;
                            int32_t v58 = 0x1000000 * v56 / 0x1000000; // 0x64ce7
                            g6 = v58;
                            int32_t v59 = *(int32_t *)(4 * v58 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64cea
                            int32_t v60 = v59 & v57; // 0x64cea
                            g9 = v60;
                            g6 = v50;
                            uint32_t v61 = v55 & (int32_t)&g862 & 31; // 0x64cf4
                            int32_t v62; // 0x64cfa
                            if (v61 != 0) {
                                int32_t v63 = v60 << v61; // 0x64cf4
                                g9 = v63;
                                v62 = v63;
                            } else {
                                v62 = v60;
                            }
                            // bb104
                            g7 = v56 % 256;
                            int32_t v64; // 0x64ad9
                            g9 = v62 | 0x1000000 * v64 / 0x1000000;
                            uint32_t v65 = v56 & (int32_t)&g862 & 31; // 0x64cfd
                            int32_t v66; // 0x64cff
                            if (v65 != 0) {
                                int32_t v67 = v50 >> v65; // 0x64cfd
                                g6 = v67;
                                v66 = v67;
                            } else {
                                v66 = v50;
                            }
                            int32_t v68 = g4; // 0x64cff
                            *(int32_t *)(v68 + 16) = v66;
                            goto lab_0x64ac1;
                        }
                    } else {
                        // 0x64aee
                        *(char *)(v35 + 4) = 1;
                        *(int32_t *)(g4 + 16) = 0;
                        // 0x64af9
                        g9 = 0;
                        v32 = 0;
                        goto lab_0x64afb;
                    }
                }
            }
        }
      lab_0x64b08_2:;
        uint32_t v69 = v4 - 32; // 0x64b0e
        uint32_t v70 = v69 / 32; // 0x64b13
        v34 = v6 + 4 + 4 * v70;
        g9 = v34;
        int32_t v71 = 32 * v70; // 0x64b1a
        g6 = v71;
        v33 = v69 - v71;
        g7 = v33;
    } else {
        v34 = v6;
        v33 = v4;
    }
    int32_t v72; // 0x64b99
    int32_t v73; // 0x64bb7
    if (v33 > 7) {
        // 0x64b2c
        g10 = v33;
        g6 = v34;
      lab_0x64b69_2:
        while (true) {
          lab_0x64b69:;
            int32_t v74 = g4; // 0x64b69
            int32_t * v75 = (int32_t *)(v74 + 20); // 0x64b69
            int32_t v76 = *v75; // 0x64b69
            g7 = v76;
            int32_t v77 = *(int32_t *)(v74 + 16); // 0x64b40
            if (v76 > 7) {
                // 0x64b40
                g9 = v77;
                int32_t v78 = v76 - 8; // 0x64b43
                g7 = v78;
                *v75 = v78;
                uint32_t v79 = g9; // 0x64b49
                g8 = v79 & (int32_t)&g862;
                if (v78 == 0) {
                    int32_t v80 = g4; // 0x64d38
                    g9 = *(int32_t *)(v80 + 24);
                    *(int32_t *)(v80 + 20) = 32;
                    uint32_t v81 = g9; // 0x64d42
                    int32_t v82 = g4; // 0x64d42
                    uint32_t v83 = *(int32_t *)(v82 + 28); // 0x64d42
                    if (v81 == v83) {
                        // 0x64e80
                        g9 = v81 + 4;
                        *(int32_t *)(v82 + 20) = 1;
                        *(int32_t *)(g4 + 24) = g9;
                        g9 = g8;
                        *(int32_t *)(g4 + 16) = 0;
                    } else {
                        if (v81 < v83) {
                            // 0x64db0
                            g7 = *(int32_t *)v81;
                            *(int32_t *)(v82 + 24) = v81 + 4;
                            g9 = g8;
                            *(int32_t *)(g4 + 16) = g7;
                        } else {
                            // 0x64d4d
                            *(char *)(v82 + 4) = 1;
                            g9 = g8;
                            *(int32_t *)(g4 + 16) = 0;
                        }
                    }
                } else {
                    // 0x64b54
                    *(int32_t *)(g4 + 16) = v79 / 256;
                    g9 = g8;
                }
                goto lab_0x64b5c;
            } else {
                // 0x64b71
                g8 = v77;
                uint32_t v84 = *(int32_t *)(v74 + 24); // 0x64b77
                g8 = v84;
                uint32_t v85 = *(int32_t *)(v74 + 28); // 0x64b7a
                if (v84 == v85) {
                    // 0x64dc8
                    g8 = v84 + 4;
                    *v75 = 1;
                    g9 = 0;
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)(g4 + 24) = g8;
                    *(char *)(g4 + 4) = 1;
                    v72 = g9;
                    goto lab_0x64b96;
                } else {
                    if (v84 < v85) {
                        int32_t v86 = *(int32_t *)v84; // 0x64d60
                        g9 = v86;
                        int32_t v87 = v84 + 4; // 0x64d62
                        g8 = v87;
                        char v88 = *(char *)(v74 + 4); // 0x64d65
                        int32_t * v89; // 0x64b77
                        *v89 = v87;
                        int32_t v90 = g9; // 0x64d6c
                        int32_t v91 = v90; // bp-40
                        int32_t v92 = g4; // 0x64d6f
                        *(int32_t *)(v92 + 16) = v90;
                        if (v88 != 0) {
                            // 0x64b94
                            g9 = 0;
                            v72 = 0;
                            goto lab_0x64b96;
                        } else {
                            int32_t v93 = g7; // 0x64d7d
                            int32_t v94 = 8 - v93; // 0x64d7d
                            g8 = v94;
                            int32_t v95 = g9; // 0x64d7f
                            int32_t v96 = *(int32_t *)(4 * v94 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64d7f
                            int32_t v97 = v96 & v95; // 0x64d7f
                            uint32_t v98 = v93 & (int32_t)&g862 & 31; // 0x64d86
                            int32_t v99;
                            int32_t v100; // 0x64d8b
                            if (v98 != 0) {
                                int32_t v101 = v97 << v98; // 0x64d86
                                v99 = v101;
                                v100 = v101;
                            } else {
                                v99 = v97;
                                v100 = v97;
                            }
                            // bb112
                            g9 = v99;
                            int32_t v102 = v91; // 0x64d8e
                            g9 = v102;
                            int32_t v103 = g4; // 0x64d91
                            *(int32_t *)(v103 + 20) = v93 + 24;
                            int32_t v104 = g8; // 0x64d94
                            g7 = v104;
                            int32_t v105 = g9; // 0x64d96
                            uint32_t v106 = v104 & (int32_t)&g862 & 31; // 0x64d96
                            int32_t v107; // 0x64d98
                            if (v106 != 0) {
                                int32_t v108 = v105 >> v106; // 0x64d96
                                g9 = v108;
                                v107 = v108;
                            } else {
                                v107 = v105;
                            }
                            int32_t v109 = g4; // 0x64d98
                            *(int32_t *)(v109 + 16) = v107;
                            g9 = (v100 | v77) % 256;
                            goto lab_0x64b5c;
                        }
                    } else {
                        // 0x64b89
                        *(char *)(v74 + 4) = 1;
                        *(int32_t *)(g4 + 16) = 0;
                        // 0x64b94
                        g9 = 0;
                        v72 = 0;
                        goto lab_0x64b96;
                    }
                }
            }
        }
      lab_0x64ba3_2:;
        int32_t v110 = v33 - 8; // 0x64ba9
        g7 = v110;
        uint32_t v111 = v110 / 8; // 0x64bae
        g9 = v34 + 1 + v111;
        v73 = -8 * v111 + v110;
        g6 = v73;
    } else {
        v73 = v33;
    }
    // 0x64bbd
    g7 = v73;
    if (v73 == 0) {
        // 0x64c30
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t v112 = g4; // 0x64bc4
    int32_t * v113 = (int32_t *)(v112 + 20); // 0x64bc4
    uint32_t v114 = *v113; // 0x64bc4
    g7 = v114;
    int32_t v115 = *(int32_t *)(v112 + 16); // 0x64bc7
    g6 = v115;
    int32_t v116 = v114 - v73; // 0x64bca
    if (v114 >= v73) {
        // 0x64e30
        g8 = v73;
        g10 = v115;
        g7 = v116;
        int32_t v117 = *(int32_t *)(4 * v73 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64e37
        g10 = v117 & v115;
        *v113 = v116;
        if (v116 != 0) {
            int32_t v118 = g8; // 0x64ee0
            g7 = v118;
            int32_t v119 = g6; // 0x64ee2
            uint32_t v120 = v118 & (int32_t)&g862 & 31; // 0x64ee2
            int32_t v121; // 0x64ee2
            if (v120 != 0) {
                // bb120
                v121 = v119 >> v120;
                g6 = v121;
            } else {
                v121 = v119;
            }
            // bb121
            *(int32_t *)(g4 + 16) = v121;
            int32_t v122 = g10; // 0x64ee7
            g4 = v122;
            *(char *)g9 = (char)v122;
            // 0x64c30
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        int32_t v123 = g4; // 0x64e49
        g7 = *(int32_t *)(v123 + 24);
        *(int32_t *)(v123 + 20) = 32;
        uint32_t v124 = g7; // 0x64e53
        int32_t v125 = g4; // 0x64e53
        uint32_t v126 = *(int32_t *)(v125 + 28); // 0x64e53
        if (v124 == v126) {
            // 0x64f40
            g7 = v124 + 4;
            *(int32_t *)(v125 + 20) = 1;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 24) = g7;
            int32_t v127 = g10; // 0x64f54
            g4 = v127;
            *(char *)g9 = (char)v127;
            // 0x64c30
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return g4;
        }
        if (v124 < v126) {
            // 0x64f10
            g6 = *(int32_t *)v124;
            int32_t v128 = v124 + 4; // 0x64f12
            g7 = v128;
            *(int32_t *)(v125 + 24) = v128;
            *(int32_t *)(g4 + 16) = g6;
            int32_t v129 = g10; // 0x64f1b
            g4 = v129;
            *(char *)g9 = (char)v129;
        } else {
            // 0x64e62
            *(char *)(v125 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
            int32_t v130 = g10; // 0x64e6d
            g4 = v130;
            *(char *)g9 = (char)v130;
        }
        // 0x64c30
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    int32_t * v131 = (int32_t *)(v112 + 24); // 0x64bd6
    uint32_t v132 = *v131; // 0x64bd6
    g6 = v132;
    uint32_t v133 = *(int32_t *)(v112 + 28); // 0x64bd9
    if (v132 == v133) {
        // 0x64f24
        g6 = v132 + 4;
        *v113 = 1;
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 24) = g6;
        *(char *)(g4 + 4) = 1;
    } else {
        if (v132 < v133) {
            // 0x64be8
            g8 = *(int32_t *)v132;
            int32_t v134 = v132 + 4; // 0x64bea
            g6 = v134;
            *v131 = v134;
            *(int32_t *)(g4 + 16) = g8;
            if (*(char *)(v112 + 4) == 0) {
                int32_t v135 = g7; // 0x64c00
                int32_t v136 = v73 - v135; // 0x64c00
                g6 = v136;
                int32_t v137 = *(int32_t *)(4 * v136 + (int32_t)&Generic_bitmask_table_at_87960); // 0x64c02
                int32_t v138 = g8 & v137; // 0x64c09
                uint32_t v139 = v135 & (int32_t)&g862 & 31; // 0x64c0b
                int32_t v140;
                if (v139 != 0) {
                    // bb
                    v140 = v138 << v139;
                } else {
                    v140 = v138;
                }
                // bb89
                g10 = v140;
                *(int32_t *)(g4 + 20) = 32 - v136;
                int32_t v141 = g6; // 0x64c17
                g7 = v141;
                int32_t v142 = g8; // 0x64c19
                uint32_t v143 = v141 & (int32_t)&g862 & 31; // 0x64c19
                int32_t v144; // 0x64c19
                if (v143 != 0) {
                    // bb90
                    v144 = v142 >> v143;
                    g8 = v144;
                } else {
                    v144 = v142;
                }
                // bb91
                *(int32_t *)(g4 + 16) = v144;
                int32_t v145 = g10 | v115 % 256; // 0x64c22
                g4 = v145;
                *(char *)g9 = (char)v145;
                // 0x64c30
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return g4;
            }
        } else {
            // 0x64ef0
            *(char *)(v112 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
        }
    }
    // 0x64efd
    g4 = 0;
    *(char *)g9 = 0;
    // 0x64c30
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x64b5c:
    // 0x64b5c
    g10 -= 8;
    *(char *)g6 = (char)g9;
    g6++;
    if (g10 <= 7) {
        // break -> 0x64ba3
        goto lab_0x64ba3_2;
    }
    // continue -> 0x64b69
    goto lab_0x64b69_2;
  lab_0x64b96:
    // 0x64b96
    g10 -= 8;
    *(char *)g6 = (char)v72;
    g6++;
    if (g10 <= 7) {
        // break -> 0x64ba3
        goto lab_0x64ba3_2;
    }
    goto lab_0x64b69;
  lab_0x64ac1:
    // 0x64ac1
    g10 -= 32;
    *(int32_t *)g8 = g9;
    g8 += 4;
    if (g10 <= 31) {
        // break -> 0x64b08
        goto lab_0x64b08_2;
    }
    // continue -> 0x64ace
    goto lab_0x64ace_2;
  lab_0x64afb:
    // 0x64afb
    g10 -= 32;
    *(int32_t *)g8 = v32;
    g8 += 4;
    if (g10 <= 31) {
        // break -> 0x64b08
        goto lab_0x64b08_2;
    }
    goto lab_0x64ace;
  lab_0x64a1e:
    // 0x64a1e
    *(char *)g9 = (char)g7;
    int32_t v146 = g9 + 1; // 0x64a20
    g9 = v146;
    int32_t v147 = g6 - 8; // 0x64a23
    g6 = v147;
    if ((char)v146 % 4 == 0) {
        v6 = v146;
        v4 = v147;
        // break -> 0x64a73
        goto lab_0x64a73_3;
    }
    goto lab_0x64a2b;
  lab_0x64a2b:
    if (v147 <= 7) {
        v6 = v146;
        v4 = v147;
        // break -> 0x64a73
        goto lab_0x64a73_3;
    }
    // 0x64a2b
    v7 = g4;
    goto lab_0x64a30;
  lab_0x64a5d:
    // 0x64a5d
    *(char *)g9 = (char)v5;
    int32_t v148 = g9 + 1; // 0x64a5f
    g9 = v148;
    int32_t v149 = g6 - 8; // 0x64a62
    g6 = v149;
    if ((char)v148 % 4 == 0) {
        v6 = v148;
        v4 = v149;
        // break -> 0x64a73
        goto lab_0x64a73_3;
    }
    v146 = v148;
    v147 = v149;
    goto lab_0x64a2b;
}

// Address range: 0x64f60 - 0x64fe7
int32_t function_64f60(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x64f69
    g6 = a4;
    int32_t v2 = g8; // 0x64f6f
    g8 = 0;
    int32_t v3 = g10; // 0x64f74
    g10 = a1;
    int32_t v4 = 8 * a3; // 0x64f7a
    g4 = v4;
    if (v4 < a4) {
        // 0x64f81
        g6 = v4;
        g8 = a4 - v4;
    } else {
        v4 = a4;
    }
    // 0x64f87
    g4 = a2;
    g4 = function_649d0(a1, a2, v4, v1, v3);
    int32_t v5 = g10; // 0x64f9a
    int32_t v6 = *(int32_t *)(v5 + 32); // 0x64f9a
    g9 = v6;
    g4 = 0;
    int32_t v7; // 0x64fc7
    if (v6 != 0) {
        int32_t v8 = *(int32_t *)(v5 + 24) - v6; // 0x64fa6
        int32_t v9 = v8 + 3; // 0x64fa8
        g9 = v9;
        int32_t v10 = v8 < 0 ? v9 : v8; // 0x64fad
        g4 = v10;
        uint32_t v11 = *(int32_t *)(v5 + 12); // 0x64fb0
        g9 = v11;
        int32_t v12 = 32 * v10 / 4; // 0x64fb6
        g4 = v12;
        int32_t v13 = v12 - *(int32_t *)(v5 + 20); // 0x64fb9
        g4 = v13;
        int32_t v14 = v13 + 8 * (v11 % 4); // 0x64fbf
        g9 = v14;
        int32_t v15 = *(int32_t *)(v5 + 8); // 0x64fc2
        int32_t v16 = v14 - v15; // 0x64fc5
        v7 = v16 == 0 | v16 < 0 != ((v16 ^ v14) & (v15 ^ v14)) < 0 ? v14 : v15;
        g4 = v7;
    } else {
        v7 = 0;
    }
    int32_t v17 = g8 + v7; // 0x64fca
    g8 = v17;
    function_64130(v5, v17);
    int32_t result = g6; // 0x64fd8
    g4 = result;
    g10 = v3;
    g6 = v1;
    g8 = v2;
    return result;
}

// Address range: 0x64ff0 - 0x65020
int32_t function_64ff0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x64ff3
    g6 = a1;
    g4 = a2;
    g4 = function_649d0(a1, a2, 8 * a3, v1, g5);
    unsigned char v2 = *(char *)(g6 + 4); // 0x65013
    g6 = v1;
    int32_t result = (int32_t)v2 ^ 1; // 0x6501b
    g4 = result;
    return result;
}

// Address range: 0x65020 - 0x651c4
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
float80_t function_65020(int32_t a1, uint32_t a2) {
    // 0x65020
    g4 = a1;
    int32_t v1 = g6; // 0x65029
    int32_t v2 = g10; // 0x6502c
    g6 = a2;
    int32_t v3 = g8; // 0x65032
    g8 = *(int32_t *)(a1 + 20);
    int32_t v4 = a2 % 32; // 0x6503a
    g9 = v4;
    int32_t v5 = *(int32_t *)(4 * v4 + (int32_t)&g299); // 0x6503d
    int128_t v6 = __asm_cvtsi2ss(v5); // 0x6503d
    int32_t v7 = g6; // 0x65046
    int32_t v8 = g8; // 0x65046
    int32_t v9 = g4; // 0x65048
    int32_t v10 = *(int32_t *)(v9 + 16); // 0x65048
    g9 = v10;
    int32_t v11; // 0x65059
    int128_t v12; // xmm1
    if (v8 < v7) {
        int32_t * v13 = (int32_t *)(v9 + 24); // 0x6509b
        uint32_t v14 = *v13; // 0x6509b
        g9 = v14;
        uint32_t v15 = *(int32_t *)(v9 + 28); // 0x6509e
        if (v14 == v15) {
            // 0x65180
            g9 = v14 + 4;
            *(char *)(v9 + 4) = 1;
            int128_t v16 = v12; // 0x65187
            v12 = __asm_xorpd(v16, v16);
            *(int32_t *)(g4 + 20) = 1;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 24) = g9;
        } else {
            if (v14 < v15) {
                // 0x650f8
                g10 = *(int32_t *)v14;
                int32_t v17 = v14 + 4; // 0x650fa
                g9 = v17;
                *v13 = v17;
                *(int32_t *)(g4 + 16) = g10;
                if (*(char *)(v9 + 4) != 0) {
                    int128_t v18 = v12; // 0x651bb
                    v12 = __asm_xorpd(v18, v18);
                } else {
                    int32_t v19 = g8; // 0x6510d
                    int32_t v20 = g6 - v19; // 0x6510d
                    g6 = v20;
                    g7 = v19;
                    int32_t v21 = *(int32_t *)(4 * v20 + (int32_t)&Generic_bitmask_table_at_87960); // 0x65111
                    int32_t v22 = g10 & v21; // 0x65118
                    uint32_t v23 = v19 & (int32_t)&g862 & 31; // 0x6511a
                    int32_t v24; // 0x65121
                    if (v23 != 0) {
                        // bb
                        v24 = v22 << v23;
                    } else {
                        v24 = v22;
                    }
                    int32_t v25 = v24 | v10; // 0x65121
                    g9 = v25;
                    *(int32_t *)(g4 + 20) = 32 - v20;
                    int32_t v26 = g6; // 0x65129
                    g7 = v26;
                    int32_t v27 = g10; // 0x6512b
                    uint32_t v28 = v26 & (int32_t)&g862 & 31; // 0x6512b
                    int32_t v29; // 0x6512b
                    if (v28 != 0) {
                        // bb274
                        v29 = v27 >> v28;
                        g10 = v29;
                    } else {
                        v29 = v27;
                    }
                    // bb275
                    *(int32_t *)(g4 + 16) = v29;
                    int128_t v30 = __asm_cvtsi2ss(v25); // 0x65130
                    v12 = __asm_cvtps2pd(__asm_unpcklps(v30, v30));
                }
            } else {
                // 0x650a9
                *(char *)(v9 + 4) = 1;
                int128_t v31 = v12; // 0x650ad
                v12 = __asm_xorpd(v31, v31);
                *(int32_t *)(g4 + 16) = 0;
            }
        }
        goto lab_0x650c0;
    } else {
        // 0x6504d
        g10 = *(int32_t *)(4 * v7 + (int32_t)&Generic_bitmask_table_at_87960);
        int32_t v32 = v8 - v7; // 0x65054
        g8 = v32;
        *(int32_t *)(v9 + 20) = v32;
        v11 = g9 & g10;
        g10 = v11;
        if (v32 != 0) {
            int128_t v33 = __asm_cvtsi2ss(v11); // 0x65140
            int32_t v34 = g6; // 0x65144
            g7 = v34;
            int32_t v35 = g9; // 0x65146
            uint32_t v36 = v34 & (int32_t)&g862 & 31; // 0x65146
            int32_t v37; // 0x65146
            if (v36 != 0) {
                // bb276
                v37 = v35 >> v36;
                g9 = v37;
            } else {
                v37 = v35;
            }
            // bb277
            *(int32_t *)(g4 + 16) = v37;
            v12 = __asm_cvtps2pd(__asm_unpcklps(v33, v33));
            goto lab_0x650c0;
        } else {
            int32_t v38 = g4; // 0x65063
            g9 = *(int32_t *)(v38 + 24);
            *(int32_t *)(v38 + 20) = 32;
            uint32_t v39 = g9; // 0x6506d
            int32_t v40 = g4; // 0x6506d
            uint32_t v41 = *(int32_t *)(v40 + 28); // 0x6506d
            if (v39 == v41) {
                // 0x651a8
                *(int32_t *)(v40 + 20) = 1;
                *(int32_t *)(g4 + 16) = 0;
                goto lab_0x65081;
            } else {
                if (v39 < v41) {
                    int32_t v42 = *(int32_t *)v39; // 0x6507c
                    g7 = v42;
                    *(int32_t *)(v40 + 16) = v42;
                    goto lab_0x65081;
                } else {
                    int128_t v43 = __asm_cvtsi2ss(v11); // 0x65160
                    *(char *)(g4 + 4) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    v12 = __asm_cvtps2pd(__asm_unpcklps(v43, v43));
                    goto lab_0x650c0;
                }
            }
        }
    }
  lab_0x650c0:;
    int128_t v44 = __asm_movsd_1649(0x4076800000000000); // 0x650c0
    int128_t v45 = __asm_cvtps2pd(__asm_unpcklps(v6, v6)); // 0x650cb
    g6 = v1;
    g10 = v2;
    g8 = v3;
    int128_t v46 = __asm_mulsd(__asm_divsd(v44, v45), v12); // 0x650db
    int128_t v47 = __asm_cvtpd2ps(__asm_unpcklpd(v46, v46)); // 0x650e3
    return __asm_movss_1646(v47);
  lab_0x65081:;
    int128_t v48 = __asm_cvtsi2ss(v11); // 0x65081
    int32_t v49 = g9 + 4; // 0x65085
    g9 = v49;
    *(int32_t *)(g4 + 24) = v49;
    v12 = __asm_cvtps2pd(__asm_unpcklps(v48, v48));
    goto lab_0x650c0;
}

// Address range: 0x651d0 - 0x65638
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_651d0(int32_t a1) {
    int32_t v1 = g8; // 0x651d3
    int32_t v2 = g10; // 0x651d4
    int32_t v3 = g6; // 0x651d5
    g4 = a1;
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x651dc
    int32_t v5 = *v4; // 0x651dc
    g6 = v5;
    int32_t v6 = *(int32_t *)(a1 + 16); // 0x651df
    g7 = v6;
    int32_t v7 = v5 - 1; // 0x651e2
    g9 = v7;
    g10 = v6;
    *v4 = v7;
    g10 %= 2;
    int32_t v8; // 0x65318
    if (v7 != 0) {
        int32_t v9 = g7 / 2; // 0x65300
        g7 = v9;
        int32_t v10 = g6 - 2; // 0x65302
        g6 = v10;
        g9 = v9;
        *(int32_t *)(g4 + 16) = v9;
        g9 %= 2;
        *(int32_t *)(g4 + 20) = v10;
        if (v10 != 0) {
            goto lab_0x6521f;
        } else {
            // 0x65318
            v8 = g4;
            g7 = *(int32_t *)(v8 + 28);
            goto lab_0x6531b;
        }
    } else {
        int32_t v11 = g4; // 0x651f5
        g9 = *(int32_t *)(v11 + 24);
        *(int32_t *)(v11 + 20) = 32;
        int32_t v12 = g4; // 0x651ff
        uint32_t v13 = *(int32_t *)(v12 + 28); // 0x651ff
        g7 = v13;
        uint32_t v14 = g9; // 0x65202
        if (v14 == v13) {
            // 0x65400
            g9 = v13 + 4;
            *(int32_t *)(v12 + 16) = 0;
            *(int32_t *)(g4 + 24) = g9;
            g9 = 0;
            v8 = g4;
            goto lab_0x6531b;
        } else {
            if (v14 < v13) {
                // 0x65380
                g7 = *(int32_t *)v14;
                *(int32_t *)(v12 + 24) = v14 + 4;
                g9 = g7 % 2;
            } else {
                // 0x65210
                *(char *)(v12 + 4) = 1;
                g9 = 0;
                g7 = 0;
            }
            // 0x65218
            *(int32_t *)(g4 + 20) = 31;
            goto lab_0x6521f;
        }
    }
  lab_0x6521f:;
    int32_t v15 = g7 / 2; // 0x6521f
    g7 = v15;
    *(int32_t *)(g4 + 16) = v15;
    goto lab_0x65224;
  lab_0x65224:
    // 0x65224
    g7 = g9;
    int128_t v16 = g878; // 0x65226
    int128_t v17 = __asm_xorps(v16, v16); // 0x65226
    g878 = v17;
    int32_t v18 = g10 | g7; // 0x65229
    g7 = v18;
    int32_t v19; // 0x6523f
    if (v18 == 0) {
        goto lab_0x652eb;
    } else {
        int32_t v20 = g4; // 0x65231
        int32_t * v21 = (int32_t *)(v20 + 20); // 0x65231
        int32_t v22 = *v21; // 0x65231
        g7 = v22;
        int32_t v23 = *(int32_t *)(v20 + 16); // 0x65234
        g8 = v23;
        int32_t v24 = v22 - 1; // 0x65237
        g7 = v24;
        g6 = v23;
        *v21 = v24;
        v19 = g6 % 2;
        g6 = v19;
        if (v24 == 0) {
            int32_t v25 = g4; // 0x65340
            g7 = *(int32_t *)(v25 + 24);
            *(int32_t *)(v25 + 20) = 32;
            uint32_t v26 = g7; // 0x6534a
            int32_t v27 = g4; // 0x6534a
            uint32_t v28 = *(int32_t *)(v27 + 28); // 0x6534a
            if (v26 == v28) {
                // 0x65590
                g7 = v26 + 4;
                *(int32_t *)(v27 + 20) = 1;
                *(int32_t *)(g4 + 16) = 0;
                *(int32_t *)(g4 + 24) = g7;
            } else {
                if (v26 < v28) {
                    // 0x653f0
                    g8 = *(int32_t *)v26;
                    int32_t v29 = v26 + 4; // 0x653f2
                    g7 = v29;
                    *(int32_t *)(v27 + 24) = v29;
                    *(int32_t *)(g4 + 16) = g8;
                } else {
                    // 0x65359
                    *(char *)(v27 + 4) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                }
            }
        } else {
            int32_t v30 = g8 / 2; // 0x6524a
            g8 = v30;
            *(int32_t *)(g4 + 16) = v30;
        }
        int128_t v31 = g879; // 0x65251
        g879 = __asm_xorpd(v31, v31);
        if (g10 == 0) {
            goto lab_0x65290;
        } else {
            int32_t v32 = g4; // 0x65257
            int32_t * v33 = (int32_t *)(v32 + 20); // 0x65257
            int32_t v34 = *v33; // 0x65257
            g7 = v34;
            int32_t v35 = *(int32_t *)(v32 + 16); // 0x6525a
            g10 = v35;
            if (v34 > 13) {
                int32_t v36 = v34 - 14; // 0x653c8
                g7 = v36;
                g8 = v35 & (int32_t)&g92;
                *v33 = v36;
                if (v36 == 0) {
                    int32_t v37 = g4; // 0x65418
                    g7 = *(int32_t *)(v37 + 24);
                    *(int32_t *)(v37 + 20) = 32;
                    uint32_t v38 = g7; // 0x65422
                    int32_t v39 = g4; // 0x65422
                    uint32_t v40 = *(int32_t *)(v39 + 28); // 0x65422
                    if (v38 == v40) {
                        // 0x65618
                        g7 = v38 + 4;
                        g8++;
                        *(int32_t *)(v39 + 20) = 1;
                        g879 = __asm_cvtsi2sd(g8);
                        *(int32_t *)(g4 + 16) = 0;
                        *(int32_t *)(g4 + 24) = g7;
                    } else {
                        if (v38 < v40) {
                            // 0x65570
                            g10 = *(int32_t *)v38;
                            int32_t v41 = g8 + 1; // 0x65572
                            g8 = v41;
                            g7 = v38 + 4;
                            g879 = __asm_cvtsi2sd(v41);
                            *(int32_t *)(g4 + 24) = g7;
                            *(int32_t *)(g4 + 16) = g10;
                        } else {
                            // 0x65431
                            g8++;
                            *(char *)(v39 + 4) = 1;
                            g879 = __asm_cvtsi2sd(g8);
                            *(int32_t *)(g4 + 16) = 0;
                        }
                    }
                } else {
                    // 0x653da
                    g10 /= 0x4000;
                    int32_t v42 = g8 + 1; // 0x653dd
                    g8 = v42;
                    g879 = __asm_cvtsi2sd(v42);
                    *(int32_t *)(g4 + 16) = g10;
                }
                goto lab_0x65290;
            } else {
                int32_t * v43 = (int32_t *)(v32 + 24); // 0x65269
                uint32_t v44 = *v43; // 0x65269
                g10 = v44;
                uint32_t v45 = *(int32_t *)(v32 + 28); // 0x6526c
                if (v44 == v45) {
                    // 0x655d0
                    g10 = v44 + 4;
                    *v33 = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)(g4 + 24) = g10;
                    *(char *)(g4 + 4) = 1;
                    goto lab_0x65286;
                } else {
                    if (v44 < v45) {
                        // 0x654a8
                        g8 = *(int32_t *)v44;
                        int32_t v46 = v44 + 4; // 0x654aa
                        g10 = v46;
                        *v43 = v46;
                        int32_t v47 = g8; // 0x654b4
                        *(int32_t *)(g4 + 16) = v47;
                        if (*(char *)(v32 + 4) != 0) {
                            goto lab_0x65286;
                        } else {
                            int32_t v48 = g8; // 0x654c7
                            g10 = v48;
                            int32_t v49 = g7; // 0x654c9
                            int32_t v50 = 14 - v49; // 0x654c9
                            g8 = v50;
                            int32_t v51 = *(int32_t *)(4 * v50 + (int32_t)&Generic_bitmask_table_at_87960); // 0x654cf
                            int32_t v52 = v51 & v48; // 0x654cf
                            g10 = v52;
                            g8 = v47;
                            uint32_t v53 = v49 & (int32_t)&g862 & 31; // 0x654d9
                            int32_t v54; // 0x654d9
                            if (v53 != 0) {
                                // bb
                                v54 = v52 << v53;
                                g10 = v54;
                            } else {
                                v54 = v52;
                            }
                            // bb57
                            g10 = v54 | v35;
                            *(int32_t *)(g4 + 20) = v49 + 18;
                            g7 = v50 % 256;
                            int32_t v55 = g10 + 1; // 0x654e8
                            g10 = v55;
                            g879 = __asm_cvtsi2sd(v55);
                            int32_t v56 = g8; // 0x654ef
                            uint32_t v57 = g7 & (int32_t)&g862 & 31; // 0x654ef
                            int32_t v58; // 0x654ef
                            if (v57 != 0) {
                                // bb59
                                v58 = v56 >> v57;
                                g8 = v58;
                            } else {
                                v58 = v56;
                            }
                            // bb60
                            *(int32_t *)(g4 + 16) = v58;
                            goto lab_0x65290;
                        }
                    } else {
                        // 0x6527b
                        *(char *)(v32 + 4) = 1;
                        *(int32_t *)(g4 + 16) = 0;
                        goto lab_0x65286;
                    }
                }
            }
        }
    }
  lab_0x6531b:
    // 0x6531b
    g6 = *(int32_t *)(v8 + 24);
    *(int32_t *)(v8 + 20) = 32;
    uint32_t v59 = g6; // 0x65325
    uint32_t v60 = g7; // 0x65325
    if (v59 == v60) {
        // 0x65488
        g7 = v60 + 4;
        *(int32_t *)(g4 + 20) = 1;
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 24) = g7;
    } else {
        if (v59 < v60) {
            // 0x65370
            g7 = *(int32_t *)v59;
            int32_t v61 = v59 + 4; // 0x65372
            g6 = v61;
            *(int32_t *)(g4 + 24) = v61;
            *(int32_t *)(g4 + 16) = g7;
        } else {
            // 0x6532f
            *(char *)(g4 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
        }
    }
    goto lab_0x65224;
  lab_0x652eb:
    // 0x652eb
    g13--;
    g868 = __asm_movss_1646(v17);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x65290:;
    int128_t v62 = g878; // 0x65292
    int128_t v63 = __asm_xorpd(v62, v62); // xmm0
    if (g9 != 0) {
        int32_t v64 = g4; // 0x65298
        int32_t * v65 = (int32_t *)(v64 + 20); // 0x65298
        int32_t v66 = *v65; // 0x65298
        g7 = v66;
        uint32_t v67 = *(int32_t *)(v64 + 16); // 0x6529b
        g9 = v67;
        if (v66 > 4) {
            int32_t v68 = v66 - 5; // 0x65398
            g7 = v68;
            int32_t v69 = v67 % 32; // 0x6539d
            g10 = v69;
            *v65 = v68;
            if (v68 == 0) {
                int32_t v70 = g4; // 0x65450
                g9 = *(int32_t *)(v70 + 24);
                *(int32_t *)(v70 + 20) = 32;
                uint32_t v71 = g9; // 0x6545a
                uint32_t v72 = *(int32_t *)(g4 + 28); // 0x6545a
                int128_t v73 = __asm_cvtsi2sd(v69); // 0x655f0
                if (v71 == v72) {
                    // 0x655f0
                    g9 += 4;
                    *(int32_t *)(g4 + 20) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)(g4 + 24) = g9;
                    v63 = __asm_mulsd_1655(v73, 0x3fa0000000000000);
                } else {
                    if (v71 < v72) {
                        int32_t v74 = g9; // 0x65554
                        g7 = *(int32_t *)v74;
                        int32_t v75 = v74 + 4; // 0x65556
                        g9 = v75;
                        *(int32_t *)(g4 + 24) = v75;
                        *(int32_t *)(g4 + 16) = g7;
                        v63 = __asm_mulsd_1655(v73, 0x3fa0000000000000);
                    } else {
                        // 0x65469
                        *(char *)(g4 + 4) = 1;
                        *(int32_t *)(g4 + 16) = 0;
                        v63 = __asm_mulsd_1655(v73, 0x3fa0000000000000);
                    }
                }
            } else {
                int128_t v76 = __asm_cvtsi2sd(v69); // 0x653ab
                int32_t v77 = g9 / 32; // 0x653af
                g9 = v77;
                *(int32_t *)(g4 + 16) = v77;
                v63 = __asm_mulsd_1655(v76, 0x3fa0000000000000);
            }
        } else {
            int32_t * v78 = (int32_t *)(v64 + 24); // 0x652aa
            uint32_t v79 = *v78; // 0x652aa
            g9 = v79;
            uint32_t v80 = *(int32_t *)(v64 + 28); // 0x652ad
            if (v79 == v80) {
                // 0x655b0
                g9 = v79 + 4;
                *v65 = 1;
                *(int32_t *)(g4 + 16) = 0;
                *(int32_t *)(g4 + 24) = g9;
                *(char *)(g4 + 4) = 1;
            } else {
                if (v79 < v80) {
                    // 0x65500
                    g8 = *(int32_t *)v79;
                    int32_t v81 = v79 + 4; // 0x65502
                    g9 = v81;
                    *v78 = v81;
                    *(int32_t *)(g4 + 16) = g8;
                    if (*(char *)(v64 + 4) == 0) {
                        int32_t v82 = g7; // 0x6551a
                        int32_t v83 = 5 - v82; // 0x6551a
                        g10 = v83;
                        int32_t v84 = *(int32_t *)(4 * v83 + (int32_t)&Generic_bitmask_table_at_87960); // 0x6551c
                        int32_t v85 = g8 & v84; // 0x65523
                        g9 = v85;
                        uint32_t v86 = v82 & (int32_t)&g862 & 31; // 0x65525
                        int32_t v87; // 0x65525
                        if (v86 != 0) {
                            // bb62
                            v87 = v85 << v86;
                            g9 = v87;
                        } else {
                            v87 = v85;
                        }
                        int32_t v88 = v87 | v67; // 0x6552a
                        g9 = v88;
                        *(int32_t *)(g4 + 20) = v82 + 27;
                        int32_t v89 = g10; // 0x65530
                        g7 = v89;
                        int32_t v90 = g8; // 0x65532
                        uint32_t v91 = v89 & (int32_t)&g862 & 31; // 0x65532
                        int32_t v92; // 0x65532
                        if (v91 != 0) {
                            // bb65
                            v92 = v90 >> v91;
                            g8 = v92;
                        } else {
                            v92 = v90;
                        }
                        // bb66
                        *(int32_t *)(g4 + 16) = v92;
                        int128_t v93 = __asm_cvtsi2ss(v88); // 0x65537
                        int128_t v94 = __asm_unpcklps(v93, v93); // 0x6553b
                        v63 = __asm_mulsd_1655(__asm_cvtps2pd(v94), 0x3fa0000000000000);
                    }
                } else {
                    // 0x652bc
                    *(char *)(v64 + 4) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                }
            }
        }
    }
    int128_t v95 = __asm_addsd(v63, g879); // 0x652d0
    int128_t v96 = __asm_cvtpd2ps(__asm_unpcklpd(v95, v95)); // 0x652da
    g878 = v96;
    if (v19 != 0) {
        int128_t v97 = __asm_movss((int32_t)g233); // 0x652e0
        g879 = v97;
        int128_t v98 = __asm_xorps(g878, v97); // 0x652e8
        g878 = v98;
        v17 = v98;
    } else {
        v17 = v96;
    }
    goto lab_0x652eb;
  lab_0x65286:
    // 0x65286
    g879 = __asm_movsd_1649(*(int64_t *)&g176);
    goto lab_0x65290;
}

// Address range: 0x65640 - 0x65eb4
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_65640(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x65643
    int32_t v2 = g10; // 0x65644
    int32_t v3 = g6; // 0x65645
    g4 = a1;
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x6564c
    int32_t v5 = *v4; // 0x6564c
    g9 = v5;
    int32_t v6 = *(int32_t *)(a1 + 16); // 0x6564f
    g6 = v6;
    int32_t v7 = v5 - 1; // 0x65652
    g7 = v7;
    g10 = v6;
    *v4 = v7;
    g10 %= 2;
    if (g7 != 0) {
        int32_t v8 = g6 / 2; // 0x65728
        g6 = v8;
        g9 -= 2;
        g7 = v8;
        *(int32_t *)(g4 + 16) = v8;
        g7 %= 2;
        goto lab_0x65735;
    } else {
        int32_t v9 = g4; // 0x65665
        g9 = *(int32_t *)(v9 + 24);
        *(int32_t *)(v9 + 20) = 32;
        uint32_t v10 = g9; // 0x6566f
        int32_t v11 = g4; // 0x6566f
        uint32_t v12 = *(int32_t *)(v11 + 28); // 0x6566f
        if (v10 == v12) {
            // 0x65a38
            g9 = v10 + 4;
            *(int32_t *)(v11 + 20) = 1;
            g6 = 0;
            *(int32_t *)(g4 + 24) = g9;
            g9 = 0;
            *(int32_t *)(g4 + 16) = 0;
            goto lab_0x65735;
        } else {
            if (v10 < v12) {
                // 0x65970
                g6 = *(int32_t *)v10;
                *(int32_t *)(v11 + 24) = v10 + 4;
                g9 = 31;
                int32_t v13 = g6; // 0x6597d
                g7 = v13;
                *(int32_t *)(g4 + 16) = v13;
                g7 %= 2;
                goto lab_0x65735;
            } else {
                // 0x6567e
                g6 = 0;
                g7 = 0;
                g9 = 31;
                *(char *)(v11 + 4) = 1;
                *(int32_t *)(g4 + 16) = 0;
                *(int32_t *)(g4 + 20) = g9;
                if (a2 != 2) {
                    goto lab_0x65742;
                } else {
                    goto lab_0x6569f;
                }
            }
        }
    }
  lab_0x65735:
    // 0x65735
    *(int32_t *)(g4 + 20) = g9;
    if (a2 == 2) {
        goto lab_0x6569f;
    } else {
        goto lab_0x65742;
    }
  lab_0x6569f:
    // 0x6569f
    if (g9 != 0) {
        int32_t v14 = g6 / 2; // 0x65a28
        g6 = v14;
        *(int32_t *)(g4 + 16) = v14;
    } else {
        int32_t v15 = g4; // 0x656a7
        g9 = *(int32_t *)(v15 + 24);
        *(int32_t *)(v15 + 20) = 32;
        uint32_t v16 = g9; // 0x656b1
        int32_t v17 = g4; // 0x656b1
        uint32_t v18 = *(int32_t *)(v17 + 28); // 0x656b1
        if (v16 == v18) {
            // 0x65dd0
            g9 = v16 + 4;
            *(int32_t *)(v17 + 20) = 1;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 24) = g9;
        } else {
            if (v16 < v18) {
                // 0x65be0
                g6 = *(int32_t *)v16;
                int32_t v19 = v16 + 4; // 0x65be2
                g9 = v19;
                *(int32_t *)(v17 + 24) = v19;
                *(int32_t *)(g4 + 16) = g6;
            } else {
                // 0x656c0
                *(char *)(v17 + 4) = 1;
                *(int32_t *)(g4 + 16) = 0;
            }
        }
    }
    // 0x656cb
    int128_t v20; // xmm0
    int128_t v21 = v20; // 0x656cd
    int128_t v22 = __asm_xorps(v21, v21); // 0x656cd
    int32_t v23;
    int32_t v24; // 0x65b69
    int32_t v25; // 0x65b87
    int32_t v26; // 0x65b98
    int32_t v27; // 0x65e50
    int32_t v28; // 0x65e53
    int32_t v29; // 0x656db
    int32_t v30; // 0x65b9d
    if (g7 == 0) {
        goto lab_0x65838;
    } else {
        int32_t v31 = g4; // 0x656d6
        uint32_t v32 = *(int32_t *)(v31 + 16); // 0x656d6
        g6 = v32;
        v29 = v32 % 2;
        g9 = v29;
        int32_t * v33 = (int32_t *)(v31 + 20); // 0x656e1
        int32_t v34 = *v33 - 1; // 0x656e4
        g9 = v34;
        *v33 = v34;
        if (v34 != 0) {
            int32_t v35 = g6 / 2; // 0x65b08
            g6 = v35;
            *(int32_t *)(g4 + 16) = v35;
        } else {
            int32_t v36 = g4; // 0x656f2
            g9 = *(int32_t *)(v36 + 24);
            *(int32_t *)(v36 + 20) = 32;
            uint32_t v37 = g9; // 0x656fc
            int32_t v38 = g4; // 0x656fc
            uint32_t v39 = *(int32_t *)(v38 + 28); // 0x656fc
            if (v37 == v39) {
                // 0x65e30
                g9 = v37 + 4;
                *(int32_t *)(v38 + 20) = 1;
                g6 = 0;
                *(int32_t *)(g4 + 24) = g9;
                g9 = 1;
                *(int32_t *)(g4 + 16) = 0;
            } else {
                if (v37 < v39) {
                    // 0x65d30
                    g6 = *(int32_t *)v37;
                    *(int32_t *)(v38 + 24) = v37 + 4;
                    g9 = 32;
                    *(int32_t *)(g4 + 16) = g6;
                } else {
                    // 0x6570b
                    *(char *)(v38 + 4) = 1;
                    g6 = 0;
                    g9 = 32;
                    *(int32_t *)(g4 + 16) = 0;
                }
            }
        }
        int32_t v40 = g10; // 0x65b0d
        g7 = v40;
        int32_t v41 = g9; // 0x65b60
        if ((char)v40 == 0) {
            // 0x65b60
            if (v41 > 13) {
                int32_t v42 = v41 - 14; // 0x65d10
                g9 = v42;
                g7 = g6 & (int32_t)&g92;
                *(int32_t *)(g4 + 20) = v42;
                if (v42 == 0) {
                    goto lab_0x65d48;
                } else {
                    int32_t v43 = g6 / 0x4000; // 0x65d22
                    g6 = v43;
                    *(int32_t *)(g4 + 16) = v43;
                    goto lab_0x65ce8;
                }
            } else {
                // 0x65b69
                v24 = g4;
                int32_t * v44 = (int32_t *)(v24 + 24); // 0x65b69
                int32_t v45 = *v44; // 0x65b69
                g7 = v45;
                uint32_t v46 = *(int32_t *)(v24 + 28); // 0x65b6c
                if (v45 == v46) {
                    v28 = v24;
                    v27 = v45;
                    goto lab_0x65e50;
                } else {
                    if (v45 < v46) {
                        // 0x65b7b
                        g10 = *(int32_t *)v45;
                        int32_t v47 = v45 + 4; // 0x65b7d
                        g7 = v47;
                        *v44 = v47;
                        v25 = g10;
                        *(int32_t *)(g4 + 16) = v25;
                        if (*(char *)(v24 + 4) != 0) {
                            goto lab_0x65e8e;
                        } else {
                            // 0x65b93
                            g8 = 14;
                            v26 = g4;
                            int32_t v48 = *(int32_t *)(v26 + 20); // 0x65b98
                            g7 = v48;
                            int32_t v49 = g9; // 0x65b9b
                            int32_t v50 = 14 - v49; // 0x65b9b
                            g8 = v50;
                            v30 = v49 + 18;
                            g9 = v30;
                            int32_t v51 = *(int32_t *)(4 * v50 + (int32_t)&Generic_bitmask_table_at_87960); // 0x65ba0
                            int32_t v52 = v51 & g10; // 0x65ba0
                            g10 = v52;
                            uint32_t v53 = v48 & (int32_t)&g862 & 31; // 0x65ba7
                            int32_t v54; // 0x65ba7
                            if (v53 != 0) {
                                // bb354
                                v54 = v52 << v53;
                                g10 = v54;
                            } else {
                                v54 = v52;
                            }
                            v23 = g6 | v54;
                            goto lab_0x65bab;
                        }
                    } else {
                        goto lab_0x65d78;
                    }
                }
            }
        } else {
            // 0x65b13
            if (v41 > 10) {
                int32_t v55 = v41 - 11; // 0x65cd0
                g9 = v55;
                g7 = g6 & (int32_t)&g143;
                *(int32_t *)(g4 + 20) = v55;
                if (v55 == 0) {
                    goto lab_0x65d48;
                } else {
                    int32_t v56 = g6 / 2048; // 0x65ce2
                    g6 = v56;
                    *(int32_t *)(g4 + 16) = v56;
                    goto lab_0x65ce8;
                }
            } else {
                int32_t v57 = g4; // 0x65b1c
                int32_t * v58 = (int32_t *)(v57 + 24); // 0x65b1c
                int32_t v59 = *v58; // 0x65b1c
                g7 = v59;
                uint32_t v60 = *(int32_t *)(v57 + 28); // 0x65b1f
                if (v59 == v60) {
                    v28 = v57;
                    v27 = v59;
                    goto lab_0x65e50;
                } else {
                    if (v59 < v60) {
                        // 0x65b2e
                        g10 = *(int32_t *)v59;
                        int32_t v61 = v59 + 4; // 0x65b30
                        g7 = v61;
                        *v58 = v61;
                        int32_t v62 = g10; // 0x65b3a
                        *(int32_t *)(g4 + 16) = v62;
                        if (*(char *)(v57 + 4) != 0) {
                            goto lab_0x65e8e;
                        } else {
                            // 0x65b46
                            g8 = 11;
                            int32_t v63 = g4; // 0x65b4b
                            int32_t v64 = *(int32_t *)(v63 + 20); // 0x65b4b
                            g7 = v64;
                            int32_t v65 = g9; // 0x65b4e
                            int32_t v66 = 11 - v65; // 0x65b4e
                            g8 = v66;
                            int32_t v67 = v65 + 21; // 0x65b50
                            g9 = v67;
                            int32_t v68 = *(int32_t *)(4 * v66 + (int32_t)&Generic_bitmask_table_at_87960); // 0x65b53
                            int32_t v69 = v68 & g10; // 0x65b53
                            g10 = v69;
                            uint32_t v70 = v64 & (int32_t)&g862 & 31; // 0x65b5a
                            int32_t v71; // 0x65b5a
                            if (v70 != 0) {
                                // bb349
                                v71 = v69 << v70;
                                g10 = v71;
                            } else {
                                v71 = v69;
                            }
                            // bb351
                            v26 = v63;
                            v30 = v67;
                            v23 = g6 | v71;
                            v25 = v62;
                            goto lab_0x65bab;
                        }
                    } else {
                        v24 = v57;
                        goto lab_0x65d78;
                    }
                }
            }
        }
    }
  lab_0x65742:;
    int32_t v72 = g9; // 0x65742
    int32_t v73;
    int32_t v74;
    int32_t v75; // 0x65768
    if (v72 == 0) {
        int32_t v76 = g4; // 0x65850
        g8 = *(int32_t *)(v76 + 24);
        *(int32_t *)(v76 + 20) = 32;
        int32_t v77 = g4; // 0x6585a
        uint32_t v78 = *(int32_t *)(v77 + 28); // 0x6585a
        g9 = v78;
        uint32_t v79 = g8; // 0x6585d
        if (v79 == v78) {
            // 0x65bf0
            g6 = v78 + 4;
            *(int32_t *)(v77 + 16) = 0;
            *(int32_t *)(g4 + 24) = g6;
            v75 = g4;
            v73 = 0;
            goto lab_0x65768;
        } else {
            int32_t v80; // 0x65875
            if (v79 < v78) {
                // 0x6586b
                g6 = *(int32_t *)v79;
                *(int32_t *)(v77 + 24) = v79 + 4;
                v80 = g6 % 2;
                g8 = v80;
            } else {
                // 0x659e0
                *(char *)(v77 + 4) = 1;
                g6 = 0;
                v80 = 0;
            }
            // 0x6587b
            *(int32_t *)(g4 + 20) = 31;
            g9 = 31;
            v74 = v80;
            goto lab_0x65887;
        }
    } else {
        int32_t v81 = g6 / 2; // 0x6574a
        g6 = v81;
        g9 = v72 - 1;
        g8 = v81;
        *(int32_t *)(g4 + 16) = v81;
        g8 %= 2;
        int32_t v82 = g9; // 0x65757
        *(int32_t *)(g4 + 20) = v82;
        int32_t v83 = g8; // 0x6575c
        if (v82 != 0) {
            v74 = v83;
            goto lab_0x65887;
        } else {
            int32_t v84 = g4; // 0x65765
            g9 = *(int32_t *)(v84 + 28);
            v75 = v84;
            v73 = v83;
            goto lab_0x65768;
        }
    }
  lab_0x65838:
    // 0x65838
    __asm_movss_1646(v22);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x65887:;
    int32_t v85 = g6 / 2; // 0x65887
    g6 = v85;
    *(int32_t *)(g4 + 16) = v85;
    int32_t v86 = v74;
    goto lab_0x6588c;
  lab_0x65768:
    // 0x65768
    g8 = *(int32_t *)(v75 + 24);
    *(int32_t *)(v75 + 20) = 32;
    uint32_t v198 = g8; // 0x65772
    uint32_t v199 = g9; // 0x65772
    int32_t v89;
    int32_t v90;
    int128_t v88; // xmm1
    if (v198 == v199) {
        // 0x65c38
        g9 = v199 + 4;
        *(int32_t *)(g4 + 20) = 1;
        g6 = 0;
        *(int32_t *)(g4 + 24) = g9;
        g9 = 1;
        *(int32_t *)(g4 + 16) = 0;
        v86 = v73;
        goto lab_0x6588c;
    } else {
        if (v198 < v199) {
            // 0x659f8
            g6 = *(int32_t *)v198;
            int32_t v200 = v198 + 4; // 0x659fa
            g8 = v200;
            g9 = 32;
            *(int32_t *)(g4 + 24) = v200;
            *(int32_t *)(g4 + 16) = g6;
            v86 = v73;
            goto lab_0x6588c;
        } else {
            // 0x65780
            g6 = 0;
            *(char *)(g4 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
            g9 = 32;
            int128_t v201 = v88; // 0x65794
            v88 = __asm_xorpd(v201, v201);
            if (g7 != 0) {
                v90 = v73;
                goto lab_0x65898;
            } else {
                v89 = v73;
                goto lab_0x657a0;
            }
        }
    }
  lab_0x6588c:;
    int128_t v87 = v88; // 0x6588e
    v88 = __asm_xorpd(v87, v87);
    if (g7 == 0) {
        v89 = v86;
        goto lab_0x657a0;
    } else {
        v90 = v86;
        goto lab_0x65898;
    }
  lab_0x65d48:;
    int32_t v91 = g4; // 0x65d48
    g9 = *(int32_t *)(v91 + 24);
    *(int32_t *)(v91 + 20) = 32;
    uint32_t v92 = g9; // 0x65d52
    int32_t v93 = g4; // 0x65d52
    uint32_t v94 = *(int32_t *)(v93 + 28); // 0x65d52
    if (v92 == v94) {
        // 0x65e75
        g9 = v92 + 4;
        *(int32_t *)(v93 + 20) = 1;
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 24) = g9;
    } else {
        if (v92 < v94) {
            // 0x65df0
            g6 = *(int32_t *)v92;
            int32_t v95 = v92 + 4; // 0x65df2
            g9 = v95;
            *(int32_t *)(v93 + 24) = v95;
            *(int32_t *)(g4 + 16) = g6;
        } else {
            // 0x65d61
            *(char *)(v93 + 4) = 1;
            *(int32_t *)(g4 + 16) = 0;
        }
    }
    goto lab_0x65ce8;
  lab_0x65e50:
    // 0x65e50
    g7 = v27 + 4;
    *(char *)(v28 + 4) = 1;
    v20 = __asm_movss(0x3f800000);
    *(int32_t *)(g4 + 20) = 1;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 24) = g7;
    int32_t v101 = v29;
    goto lab_0x65826;
  lab_0x657a0:
    // 0x657a0
    g10 = g7 & -256 | (int32_t)(a2 == 1);
    int32_t v118 = a2 != 1 ? 5 : 3; // 0x657b1
    g7 = v118;
    int32_t v119 = g9; // 0x657b4
    int32_t v120; // 0x657c8
    if (v119 < v118) {
        int32_t v121 = g4; // 0x65900
        uint32_t v122 = *(int32_t *)(v121 + 24); // 0x65900
        g8 = v122;
        uint32_t v123 = *(int32_t *)(v121 + 28); // 0x65903
        if (v122 == v123) {
            // 0x65c10
            g8 = v122 + 4;
            *(char *)(v121 + 4) = 1;
            int128_t v124 = v20; // 0x65c17
            v20 = __asm_xorpd(v124, v124);
            *(int32_t *)(g4 + 20) = 1;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 24) = g8;
        } else {
            if (v122 < v123) {
                int32_t v125 = *(int32_t *)v122; // 0x65918
                *(int32_t *)(v121 + 16) = v125;
                int32_t v126 = v122 + 4; // 0x65923
                g8 = v126;
                int32_t v127 = g4; // 0x65926
                *(int32_t *)(v127 + 24) = v126;
                if (*(char *)(v127 + 4) != 0) {
                    int128_t v128 = v20; // 0x65e9b
                    v20 = __asm_xorpd(v128, v128);
                } else {
                    int32_t v129 = g7; // 0x65933
                    g8 = v129;
                    int32_t v130 = *(int32_t *)(g4 + 20); // 0x65935
                    g7 = v130;
                    int32_t v131 = v129 - g9; // 0x65938
                    g8 = v131;
                    g9 = v125;
                    int32_t v132 = *(int32_t *)(4 * v131 + (int32_t)&Generic_bitmask_table_at_87960); // 0x6593d
                    int32_t v133 = v132 & v125; // 0x6593d
                    g9 = v133;
                    uint32_t v134 = v130 & (int32_t)&g862 & 31; // 0x65944
                    int32_t v135; // 0x65944
                    if (v134 != 0) {
                        // bb
                        v135 = v133 << v134;
                        g9 = v135;
                    } else {
                        v135 = v133;
                    }
                    int32_t v136 = g6 | v135; // 0x6594b
                    g9 = v136;
                    g6 = v125;
                    g7 = 32 - v131;
                    int128_t v137 = __asm_cvtsi2ss(v136); // 0x65952
                    *(int32_t *)(g4 + 20) = g7;
                    int32_t v138 = g8; // 0x65959
                    g7 = v138;
                    uint32_t v139 = v138 & (int32_t)&g862 & 31; // 0x6595b
                    if (v139 != 0) {
                        // bb332
                        g6 >>= v139;
                    }
                    int128_t v140 = __asm_unpcklps(v137, v137); // 0x6595d
                    *(int32_t *)(g4 + 16) = g6;
                    v20 = __asm_cvtps2pd(v140);
                }
            } else {
                // 0x65a10
                *(char *)(v121 + 4) = 1;
                int128_t v141 = v20; // 0x65a14
                v20 = __asm_xorpd(v141, v141);
                *(int32_t *)(g4 + 16) = 0;
            }
        }
        goto lab_0x65800;
    } else {
        // 0x657bc
        g8 = *(int32_t *)(4 * v118 + (int32_t)&Generic_bitmask_table_at_87960);
        int32_t v142 = v119 - v118; // 0x657c3
        g9 = v142;
        *(int32_t *)(g4 + 20) = v142;
        v120 = g6 & g8;
        g8 = v120;
        if (v142 != 0) {
            int128_t v143 = __asm_cvtsi2ss(v120); // 0x65990
            v20 = v143;
            int32_t v144 = g6; // 0x65994
            int32_t v145 = g7; // 0x65994
            uint32_t v146 = v145 & (int32_t)&g862 & 31; // 0x65994
            int32_t v147; // 0x65996
            if (v146 != 0) {
                int32_t v148 = v144 >> v146; // 0x65994
                g6 = v148;
                v147 = v148;
            } else {
                v147 = v144;
            }
            int32_t v149 = g4; // 0x65996
            *(int32_t *)(v149 + 16) = v147;
            int128_t v150 = __asm_unpcklps(v143, v143); // 0x65999
            v20 = v150;
            v20 = __asm_cvtps2pd(v150);
            goto lab_0x65800;
        } else {
            int32_t v151 = g4; // 0x657d2
            g9 = *(int32_t *)(v151 + 24);
            *(int32_t *)(v151 + 20) = 32;
            uint32_t v152 = g9; // 0x657dc
            int32_t v153 = g4; // 0x657dc
            uint32_t v154 = *(int32_t *)(v153 + 28); // 0x657dc
            if (v152 == v154) {
                // 0x65db8
                *(int32_t *)(v153 + 20) = 1;
                *(int32_t *)(g4 + 16) = 0;
                goto lab_0x65aed;
            } else {
                if (v152 < v154) {
                    int32_t v155 = *(int32_t *)v152; // 0x65ae8
                    g7 = v155;
                    *(int32_t *)(v153 + 16) = v155;
                    goto lab_0x65aed;
                } else {
                    int128_t v156 = __asm_cvtsi2ss(v120); // 0x657eb
                    *(char *)(g4 + 4) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    v20 = __asm_cvtps2pd(__asm_unpcklps(v156, v156));
                    goto lab_0x65800;
                }
            }
        }
    }
  lab_0x65898:;
    int32_t v157 = g10; // 0x65898
    g7 = v157;
    int32_t v158 = g9; // 0x659a8
    int32_t v159; // 0x65a88
    int32_t v160; // 0x65c84
    int32_t v161; // 0x65d90
    int32_t v162; // 0x65c9a
    int32_t v163; // 0x65ca8
    if ((char)v157 == 0) {
        // 0x659a8
        if (v158 > 13) {
            int32_t v164 = v158 - 14; // 0x659b1
            g9 = v164;
            g7 = g6 & (int32_t)&g92;
            *(int32_t *)(g4 + 20) = v164;
            if (v164 == 0) {
                goto lab_0x658c1;
            } else {
                // 0x659c7
                g6 /= 0x4000;
                int32_t v165 = g7 + 1; // 0x659ca
                g7 = v165;
                v88 = __asm_cvtsi2sd(v165);
                *(int32_t *)(g4 + 16) = g6;
                v89 = v90;
                goto lab_0x657a0;
            }
        } else {
            // 0x65a88
            v159 = g4;
            int32_t v166 = *(int32_t *)(v159 + 24); // 0x65a88
            g7 = v166;
            uint32_t v167 = *(int32_t *)(v159 + 28); // 0x65a8b
            if (v166 == v167) {
                v161 = v166;
                goto lab_0x65d90;
            } else {
                if (v166 < v167) {
                    int32_t v168 = *(int32_t *)v166; // 0x65a96
                    g10 = v168;
                    int32_t v169 = v166 + 4; // 0x65a98
                    g7 = v169;
                    char v170 = *(char *)(v159 + 4); // 0x65a9b
                    int32_t * v171; // 0x65a88
                    *v171 = v169;
                    int32_t v172 = g10; // 0x65aa2
                    int32_t v173 = g4; // 0x65aa5
                    *(int32_t *)(v173 + 16) = v172;
                    if (v170 != 0) {
                        goto lab_0x65ea4;
                    } else {
                        // 0x65aae
                        g8 = v172;
                        int32_t v174 = g9; // 0x65ab6
                        g7 = v174;
                        int32_t v175 = 14 - v174; // 0x65ab8
                        g10 = v175;
                        g9 = v174 + 18;
                        int32_t v176 = *(int32_t *)(4 * v175 + (int32_t)&Generic_bitmask_table_at_87960); // 0x65abd
                        int32_t v177 = v176 & v172; // 0x65abd
                        g8 = v177;
                        uint32_t v178 = v174 & (int32_t)&g862 & 31; // 0x65ac4
                        if (v178 != 0) {
                            int32_t v179 = v177 << v178; // 0x65ac4
                            g8 = v179;
                        }
                        // bb342
                        goto lab_0x65ac8;
                    }
                } else {
                    goto lab_0x65a6a;
                }
            }
        }
    } else {
        // 0x658a2
        if (v158 > 10) {
            int32_t v180 = v158 - 11; // 0x658ab
            g9 = v180;
            g7 = g6 & (int32_t)&g143;
            *(int32_t *)(g4 + 20) = v180;
            if (v180 != 0) {
                // 0x65c60
                g6 /= 2048;
                int32_t v181 = g7 + 1; // 0x65c63
                g7 = v181;
                v88 = __asm_cvtsi2sd(v181);
                *(int32_t *)(g4 + 16) = g6;
                v89 = v90;
                goto lab_0x657a0;
            } else {
                goto lab_0x658c1;
            }
        } else {
            int32_t v182 = g4; // 0x65a58
            int32_t * v183 = (int32_t *)(v182 + 24); // 0x65a58
            int32_t v184 = *v183; // 0x65a58
            g7 = v184;
            uint32_t v185 = *(int32_t *)(v182 + 28); // 0x65a5b
            if (v184 == v185) {
                v159 = v182;
                v161 = v184;
                goto lab_0x65d90;
            } else {
                if (v184 < v185) {
                    // 0x65c78
                    g10 = *(int32_t *)v184;
                    int32_t v186 = v184 + 4; // 0x65c7a
                    g7 = v186;
                    *v183 = v186;
                    v160 = g10;
                    *(int32_t *)(g4 + 16) = v160;
                    if (*(char *)(v182 + 4) != 0) {
                        goto lab_0x65ea4;
                    } else {
                        // 0x65c90
                        g8 = v160;
                        int32_t v187 = g9; // 0x65c98
                        g7 = v187;
                        v162 = 11 - v187;
                        g10 = v162;
                        g9 = v187 + 21;
                        int32_t v188 = *(int32_t *)(4 * v162 + (int32_t)&Generic_bitmask_table_at_87960); // 0x65c9f
                        int32_t v189 = v188 & v160; // 0x65c9f
                        g8 = v189;
                        uint32_t v190 = v187 & (int32_t)&g862 & 31; // 0x65ca6
                        int32_t v191; // 0x65ca6
                        if (v190 != 0) {
                            // bb363
                            v191 = v189 << v190;
                            g8 = v191;
                        } else {
                            v191 = v189;
                        }
                        // bb365
                        v163 = g6 | v191;
                        goto lab_0x65ac8;
                    }
                } else {
                    v159 = v182;
                    goto lab_0x65a6a;
                }
            }
        }
    }
  lab_0x65ce8:;
    int32_t v96 = g7 + 1; // 0x65ce8
    g7 = v96;
    int32_t v97 = v96 % 2 != 0; // 0x65ceb
    g4 = v97;
    int128_t v98 = __asm_cvtsi2ss(v97); // 0x65ced
    int32_t v99 = g4 / 0x10000; // 0x65cf1
    g4 = v99;
    int128_t v100 = __asm_cvtsi2ss(v99); // 0x65cf4
    v20 = __asm_addss_1661(__asm_mulss_1654(v100, 0x47800000), v98);
    v101 = v29;
    goto lab_0x65826;
  lab_0x65826:
    // 0x65826
    g6 = v101;
    if (v101 == 0) {
        // 0x65826
        v22 = v20;
    } else {
        // 0x6582d
        v22 = __asm_xorps(v20, __asm_movss((int32_t)g233));
    }
    goto lab_0x65838;
  lab_0x65d78:
    // 0x65d78
    *(char *)(v24 + 4) = 1;
    v20 = __asm_movss(0x3f800000);
    *(int32_t *)(g4 + 16) = 0;
    v101 = v29;
    goto lab_0x65826;
  lab_0x65e8e:
    // 0x65e8e
    v20 = __asm_movss(0x3f800000);
    v101 = v29;
    goto lab_0x65826;
  lab_0x65800:
    // 0x65800
    g4 = g10;
    int128_t v102 = __asm_movsd_1649(0x3fa0000000000000); // 0x65802
    int128_t v103; // 0x65816
    if ((char)g4 != 0) {
        // 0x6580e
        v103 = __asm_movsd_1649(0x3fc0000000000000);
    } else {
        v103 = v102;
    }
    int128_t v104 = __asm_addsd(__asm_mulsd(v20, v103), v88); // 0x6581a
    v20 = __asm_cvtpd2ps(__asm_unpcklpd(v104, v104));
    v101 = v89;
    goto lab_0x65826;
  lab_0x65bab:
    // 0x65bab
    g10 = v23;
    *(int32_t *)(v26 + 20) = v30;
    g9 = v25;
    int32_t v105 = g8; // 0x65bb1
    g7 = v105;
    uint32_t v106 = v105 & (int32_t)&g862 & 31; // 0x65bb3
    int32_t v107; // 0x65bb3
    if (v106 != 0) {
        // bb357
        v107 = v25 >> v106;
        g9 = v107;
    } else {
        v107 = v25;
    }
    // bb358
    *(int32_t *)(g4 + 16) = v107;
    uint32_t v108 = g10 + 1; // 0x65bb8
    int32_t v109 = v108 & (int32_t)&g863; // 0x65bbb
    g9 = v109;
    int32_t v110 = v108 / 0x10000; // 0x65bbe
    g4 = v110;
    int128_t v111 = __asm_cvtsi2ss(v110); // 0x65bc1
    int128_t v112 = __asm_cvtsi2ss(v109); // 0x65bc5
    v20 = __asm_addss_1661(__asm_mulss_1654(v111, 0x47800000), v112);
    v101 = v29;
    goto lab_0x65826;
  lab_0x658c1:;
    int32_t v113 = g4; // 0x658c1
    g9 = *(int32_t *)(v113 + 24);
    *(int32_t *)(v113 + 20) = 32;
    uint32_t v114 = g9; // 0x658cb
    int32_t v115 = g4; // 0x658cb
    uint32_t v116 = *(int32_t *)(v115 + 28); // 0x658cb
    if (v114 == v116) {
        // 0x65e00
        g9 = v114 + 4;
        g7++;
        *(int32_t *)(v115 + 20) = 1;
        v88 = __asm_cvtsi2sd(g7);
        *(int32_t *)(g4 + 24) = g9;
        g9 = 1;
        *(int32_t *)(g4 + 16) = 0;
        g6 = 0;
        v89 = v90;
    } else {
        if (v114 < v116) {
            // 0x65cb0
            g6 = *(int32_t *)v114;
            int32_t v117 = g7 + 1; // 0x65cb2
            g7 = v117;
            g9 = v114 + 4;
            v88 = __asm_cvtsi2sd(v117);
            *(int32_t *)(g4 + 24) = g9;
            g9 = 32;
            *(int32_t *)(g4 + 16) = g6;
            v89 = v90;
        } else {
            // 0x658da
            g7++;
            *(char *)(v115 + 4) = 1;
            g9 = 32;
            v88 = __asm_cvtsi2sd(g7);
            *(int32_t *)(g4 + 16) = 0;
            g6 = 0;
            v89 = v90;
        }
    }
    goto lab_0x657a0;
  lab_0x65d90:
    // 0x65d90
    g7 = v161 + 4;
    *(int32_t *)(v159 + 20) = 1;
    g9 = 1;
    *(int32_t *)(g4 + 16) = 0;
    *(int32_t *)(g4 + 24) = g7;
    *(char *)(g4 + 4) = 1;
    goto lab_0x65a75;
  lab_0x65aed:;
    int128_t v196 = __asm_cvtsi2ss(v120); // 0x65aed
    int32_t v197 = g9 + 4; // 0x65af1
    g9 = v197;
    *(int32_t *)(g4 + 24) = v197;
    v20 = __asm_cvtps2pd(__asm_unpcklps(v196, v196));
    goto lab_0x65800;
  lab_0x65a75:
    // 0x65a75
    g6 = 0;
    v88 = __asm_movsd_1649(*(int64_t *)&g176);
    v89 = v90;
    goto lab_0x657a0;
  lab_0x65a6a:
    // 0x65a6a
    *(char *)(v159 + 4) = 1;
    *(int32_t *)(g4 + 16) = 0;
    goto lab_0x65a75;
  lab_0x65ea4:
    // 0x65ea4
    g6 = v160;
    v88 = __asm_movsd_1649(*(int64_t *)&g176);
    v89 = v90;
    goto lab_0x657a0;
  lab_0x65ac8:
    // 0x65ac8
    g6 = v160;
    g7 = v162;
    int32_t v192 = v163 + 1; // 0x65acd
    g8 = v192;
    v88 = __asm_cvtsi2sd(v192);
    *(int32_t *)(g4 + 20) = g9;
    int32_t v193 = g6; // 0x65ad7
    uint32_t v194 = g7 & (int32_t)&g862 & 31; // 0x65ad7
    int32_t v195; // 0x65ad7
    if (v194 != 0) {
        // bb344
        v195 = v193 >> v194;
        g6 = v195;
    } else {
        v195 = v193;
    }
    // bb345
    *(int32_t *)(g4 + 16) = v195;
    v89 = v90;
    goto lab_0x657a0;
}

// Address range: 0x65ec0 - 0x66313
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
int32_t function_65ec0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x65ec3
    int32_t v2 = g10; // 0x65ec4
    int32_t v3 = g6; // 0x65ec5
    g6 = a3;
    g4 = a1;
    g7 = a2;
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x66038
    int32_t v5 = *v4; // 0x66038
    int32_t v6; // 0x65f26
    int128_t v7; // xmm0
    int128_t v8; // xmm2
    if (a3 == 2) {
        // 0x66038
        g10 = v5;
        int32_t v9 = *(int32_t *)(a1 + 16); // 0x66138
        if (v5 < a2) {
            // 0x66138
            g9 = v9;
            int32_t * v10 = (int32_t *)(a1 + 24); // 0x6613e
            uint32_t v11 = *v10; // 0x6613e
            g9 = v11;
            uint32_t v12 = *(int32_t *)(a1 + 28); // 0x66141
            if (v11 - v12 == 0) {
                // 0x662c0
                g9 = v11 + 4;
                *(char *)(a1 + 4) = 1;
                int128_t v13 = v7; // 0x662c7
                v7 = __asm_xorps(v13, v13);
                *(int32_t *)(g4 + 20) = 1;
                *(int32_t *)(g4 + 16) = 0;
                *(int32_t *)(g4 + 24) = g9;
                goto lab_0x65fb4;
            } else {
                if (v11 < v12) {
                    // 0x661d8
                    g8 = *(int32_t *)v11;
                    int32_t v14 = v11 + 4; // 0x661da
                    g9 = v14;
                    *v10 = v14;
                    *(int32_t *)(g4 + 16) = g8;
                    if (*(char *)(a1 + 4) != 0) {
                        // 0x66302
                    } else {
                        int32_t v15 = g7; // 0x661ed
                        int32_t v16 = g10; // 0x661ef
                        g7 = v16;
                        int32_t v17 = v15 - v16; // 0x661f1
                        g6 = v17;
                        int32_t v18 = *(int32_t *)(4 * v17 + (int32_t)&Generic_bitmask_table_at_87960); // 0x661f3
                        int32_t v19 = g8 & v18; // 0x661fa
                        g9 = v19;
                        uint32_t v20 = v16 & (int32_t)&g862 & 31; // 0x661fc
                        int32_t v21; // 0x661fc
                        if (v20 != 0) {
                            // bb313
                            v21 = v19 << v20;
                            g9 = v21;
                        } else {
                            v21 = v19;
                        }
                        // bb315
                        g9 = v21 | v9;
                        *(int32_t *)(g4 + 20) = 32 - v17;
                        int32_t v22 = g6; // 0x6620b
                        g7 = v22;
                        int32_t v23 = g8; // 0x6620d
                        uint32_t v24 = v22 & (int32_t)&g862 & 31; // 0x6620d
                        int32_t v25; // 0x6620d
                        if (v24 != 0) {
                            // bb316
                            v25 = v23 >> v24;
                            g8 = v25;
                        } else {
                            v25 = v23;
                        }
                        // bb317
                        *(int32_t *)(g4 + 16) = v25;
                        goto lab_0x66061;
                    }
                } else {
                    // 0x66150
                    *(char *)(a1 + 4) = 1;
                    int128_t v26 = v7; // 0x66154
                    v7 = __asm_xorps(v26, v26);
                    *(int32_t *)(g4 + 16) = 0;
                    goto lab_0x65fb4;
                }
            }
        } else {
            // 0x66043
            g6 = v9;
            int32_t v27 = v5 - a2; // 0x66046
            g10 = v27;
            g9 = *(int32_t *)(4 * a2 + (int32_t)&Generic_bitmask_table_at_87960);
            *v4 = v27;
            int32_t v28 = g6; // 0x66052
            g9 &= v28;
            if (v27 == 0) {
                int32_t v29 = g4; // 0x661a8
                g7 = *(int32_t *)(v29 + 24);
                *(int32_t *)(v29 + 20) = 32;
                uint32_t v30 = g7; // 0x661b2
                int32_t v31 = g4; // 0x661b2
                uint32_t v32 = *(int32_t *)(v31 + 28); // 0x661b2
                if (v30 - v32 == 0) {
                    // 0x662e0
                    g7 = v30 + 4;
                    *(int32_t *)(v31 + 20) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)(g4 + 24) = g7;
                } else {
                    if (v30 < v32) {
                        // 0x66270
                        g6 = *(int32_t *)v30;
                        int32_t v33 = v30 + 4; // 0x66272
                        g7 = v33;
                        *(int32_t *)(v31 + 24) = v33;
                        *(int32_t *)(g4 + 16) = g6;
                    } else {
                        // 0x661c1
                        *(char *)(v31 + 4) = 1;
                        *(int32_t *)(g4 + 16) = 0;
                    }
                }
            } else {
                uint32_t v34 = g7 & (int32_t)&g862 & 31; // 0x6605c
                int32_t v35; // 0x6605c
                if (v34 != 0) {
                    // bb301
                    v35 = v28 >> v34;
                    g6 = v35;
                } else {
                    v35 = v28;
                }
                // bb302
                *(int32_t *)(g4 + 16) = v35;
            }
            goto lab_0x66061;
        }
    } else {
        // 0x65edb
        g9 = v5;
        int32_t v36 = *(int32_t *)(a1 + 16); // 0x65ede
        g10 = v36;
        if (v5 < a2) {
            int32_t * v37 = (int32_t *)(a1 + 24); // 0x65ee5
            uint32_t v38 = *v37; // 0x65ee5
            g8 = v38;
            uint32_t v39 = *(int32_t *)(a1 + 28); // 0x65eeb
            if (v38 - v39 == 0) {
                // 0x66220
                g8 = v38 + 4;
                *v4 = 1;
                g9 = 1;
                *(int32_t *)(g4 + 16) = 0;
                *(int32_t *)(g4 + 24) = g8;
                *(char *)(g4 + 4) = 1;
                goto lab_0x65f05;
            } else {
                if (v38 < v39) {
                    // 0x660e0
                    g10 = *(int32_t *)v38;
                    int32_t v40 = v38 + 4; // 0x660e2
                    g8 = v40;
                    *v37 = v40;
                    *(int32_t *)(g4 + 16) = g10;
                    if (*(char *)(a1 + 4) != 0) {
                        int128_t v41 = v8; // 0x662f9
                        v8 = __asm_xorpd(v41, v41);
                        goto lab_0x65f2f;
                    } else {
                        int32_t v42 = g9; // 0x660f5
                        int32_t v43 = g7 - v42; // 0x660f5
                        g7 = v43;
                        int32_t v44 = *(int32_t *)(4 * v43 + (int32_t)&Generic_bitmask_table_at_87960); // 0x660f7
                        g7 = v42;
                        int32_t v45 = 32 - v43; // 0x66108
                        g9 = v45;
                        int32_t v46 = g10 & v44; // 0x6610b
                        g8 = v46;
                        uint32_t v47 = v42 & (int32_t)&g862 & 31; // 0x6610d
                        int32_t v48; // 0x6610d
                        if (v47 != 0) {
                            // bb307
                            v48 = v46 << v47;
                            g8 = v48;
                        } else {
                            v48 = v46;
                        }
                        // bb309
                        g7 = v43 % 256;
                        g8 = v48 | v36;
                        *(int32_t *)(g4 + 20) = v45;
                        v6 = g8;
                        goto lab_0x65f26;
                    }
                } else {
                    // 0x65efa
                    *(char *)(a1 + 4) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    goto lab_0x65f05;
                }
            }
        } else {
            // 0x65f10
            g8 = *(int32_t *)(4 * a2 + (int32_t)&Generic_bitmask_table_at_87960);
            int32_t v49 = v5 - a2; // 0x65f17
            g9 = v49;
            *v4 = v49;
            int32_t v50 = g10 & g8; // 0x65f1c
            g8 = v50;
            if (g9 == 0) {
                int32_t v51 = g4; // 0x660a8
                g9 = *(int32_t *)(v51 + 24);
                *(int32_t *)(v51 + 20) = 32;
                uint32_t v52 = g9; // 0x660b2
                int32_t v53 = g4; // 0x660b2
                uint32_t v54 = *(int32_t *)(v53 + 28); // 0x660b2
                if (v52 - v54 == 0) {
                    // 0x66280
                    g9 = v52 + 4;
                    *(int32_t *)(v53 + 20) = 1;
                    g10 = 0;
                    v8 = __asm_cvtsi2sd(g8);
                    *(int32_t *)(g4 + 24) = g9;
                    g9 = 1;
                    *(int32_t *)(g4 + 16) = 0;
                } else {
                    if (v52 < v54) {
                        // 0x66188
                        v8 = __asm_cvtsi2sd(g8);
                        int32_t v55 = g9; // 0x6618c
                        g10 = *(int32_t *)v55;
                        *(int32_t *)(g4 + 24) = v55 + 4;
                        g9 = 32;
                        *(int32_t *)(g4 + 16) = g10;
                    } else {
                        // 0x660c1
                        *(char *)(v53 + 4) = 1;
                        g10 = 0;
                        g9 = 32;
                        v8 = __asm_cvtsi2sd(g8);
                        *(int32_t *)(g4 + 16) = 0;
                    }
                }
                goto lab_0x65f2f;
            } else {
                v6 = v50;
                goto lab_0x65f26;
            }
        }
    }
  lab_0x66061:;
    uint32_t v56 = g9; // 0x66061
    int32_t result = v56 % 0x10000; // 0x66061
    g4 = result;
    int32_t v57 = v56 / 0x10000; // 0x66064
    g9 = v57;
    int128_t v58 = __asm_cvtsi2ss(v57); // 0x66067
    int128_t v59 = __asm_cvtsi2ss(result); // 0x6606b
    int128_t v60 = __asm_mulss_1654(v58, 0x47800000); // 0x6606f
    __asm_movss_1646(__asm_addss_1661(v60, v59));
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x65f26:
    // 0x65f26
    v8 = __asm_cvtsi2sd(v6);
    int32_t v61 = g10; // 0x65f2a
    uint32_t v62 = g7 & (int32_t)&g862 & 31; // 0x65f2a
    int32_t v63; // 0x65f2a
    if (v62 != 0) {
        // bb
        v63 = v61 >> v62;
        g10 = v63;
    } else {
        v63 = v61;
    }
    // bb293
    *(int32_t *)(g4 + 16) = v63;
    goto lab_0x65f2f;
  lab_0x65fb4:
    // 0x65fb4
    __asm_movss_1646(v7);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x65f05:
    // 0x65f05
    g10 = 0;
    int128_t v103 = v8; // 0x65f07
    v8 = __asm_xorpd(v103, v103);
    goto lab_0x65f2f;
  lab_0x65f2f:;
    int32_t v64 = g6; // 0x65f2f
    g6 = (int32_t)(v64 == 1) | v64 & -256;
    int32_t v65 = v64 != 1 ? 5 : 3; // 0x65f3d
    g7 = v65;
    int32_t v66 = g9; // 0x65f40
    int32_t v67; // 0x65f54
    if (v65 > v66) {
        int32_t v68 = g4; // 0x65fc8
        uint32_t v69 = *(int32_t *)(v68 + 24); // 0x65fc8
        g8 = v69;
        uint32_t v70 = *(int32_t *)(v68 + 28); // 0x65fcb
        if (v69 - v70 == 0) {
            // 0x66248
            g8 = v69 + 4;
            *(char *)(v68 + 4) = 1;
            int128_t v71 = v7; // 0x6624f
            v7 = __asm_xorpd(v71, v71);
            *(int32_t *)(g4 + 20) = 1;
            *(int32_t *)(g4 + 16) = 0;
            *(int32_t *)(g4 + 24) = g8;
        } else {
            if (v69 < v70) {
                int32_t v72 = *(int32_t *)v69; // 0x65fe0
                *(int32_t *)(v68 + 16) = v72;
                int32_t v73 = v69 + 4; // 0x65feb
                g8 = v73;
                int32_t v74 = g4; // 0x65fee
                *(int32_t *)(v74 + 24) = v73;
                if (*(char *)(v74 + 4) != 0) {
                    int128_t v75 = v7; // 0x6630a
                    v7 = __asm_xorpd(v75, v75);
                } else {
                    int32_t v76 = g7; // 0x65ffb
                    g8 = v76;
                    int32_t v77 = *(int32_t *)(g4 + 20); // 0x65ffd
                    g7 = v77;
                    int32_t v78 = v76 - g9; // 0x66000
                    g8 = v78;
                    g9 = v72;
                    int32_t v79 = *(int32_t *)(4 * v78 + (int32_t)&Generic_bitmask_table_at_87960); // 0x66005
                    int32_t v80 = v79 & v72; // 0x66005
                    g9 = v80;
                    uint32_t v81 = v77 & (int32_t)&g862 & 31; // 0x6600c
                    int32_t v82; // 0x6600c
                    if (v81 != 0) {
                        // bb296
                        v82 = v80 << v81;
                        g9 = v82;
                    } else {
                        v82 = v80;
                    }
                    int32_t v83 = g10 | v82; // 0x66013
                    g9 = v83;
                    g10 = v72;
                    g7 = 32 - v78;
                    int128_t v84 = __asm_cvtsi2ss(v83); // 0x6601a
                    *(int32_t *)(g4 + 20) = g7;
                    int32_t v85 = g8; // 0x66021
                    g7 = v85;
                    uint32_t v86 = v85 & (int32_t)&g862 & 31; // 0x66023
                    if (v86 != 0) {
                        // bb299
                        g10 >>= v86;
                    }
                    int128_t v87 = __asm_unpcklps(v84, v84); // 0x66025
                    *(int32_t *)(g4 + 16) = g10;
                    v7 = __asm_cvtps2pd(v87);
                }
            } else {
                // 0x66120
                *(char *)(v68 + 4) = 1;
                int128_t v88 = v7; // 0x66124
                v7 = __asm_xorpd(v88, v88);
                *(int32_t *)(g4 + 16) = 0;
            }
        }
        goto lab_0x65f90;
    } else {
        // 0x65f48
        g8 = *(int32_t *)(4 * v65 + (int32_t)&Generic_bitmask_table_at_87960);
        int32_t v89 = v66 - v65; // 0x65f4f
        g9 = v89;
        *(int32_t *)(g4 + 20) = v89;
        v67 = g10 & g8;
        g8 = v67;
        if (v89 != 0) {
            int128_t v90 = __asm_cvtsi2ss(v67); // 0x66090
            int32_t v91 = g10; // 0x66094
            uint32_t v92 = g7 & (int32_t)&g862 & 31; // 0x66094
            int32_t v93; // 0x66094
            if (v92 != 0) {
                // bb304
                v93 = v91 >> v92;
                g10 = v93;
            } else {
                v93 = v91;
            }
            // bb305
            *(int32_t *)(g4 + 16) = v93;
            v7 = __asm_cvtps2pd(__asm_unpcklps(v90, v90));
            goto lab_0x65f90;
        } else {
            int32_t v94 = g4; // 0x65f5e
            g9 = *(int32_t *)(v94 + 24);
            *(int32_t *)(v94 + 20) = 32;
            uint32_t v95 = g9; // 0x65f68
            int32_t v96 = g4; // 0x65f68
            uint32_t v97 = *(int32_t *)(v96 + 28); // 0x65f68
            if (v95 - v97 == 0) {
                // 0x662a8
                *(int32_t *)(v96 + 20) = 1;
                *(int32_t *)(g4 + 16) = 0;
                goto lab_0x6616d;
            } else {
                if (v95 < v97) {
                    int32_t v98 = *(int32_t *)v95; // 0x66168
                    g7 = v98;
                    *(int32_t *)(v96 + 16) = v98;
                    goto lab_0x6616d;
                } else {
                    int128_t v99 = __asm_cvtsi2ss(v67); // 0x65f77
                    *(char *)(g4 + 4) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    v7 = __asm_cvtps2pd(__asm_unpcklps(v99, v99));
                    goto lab_0x65f90;
                }
            }
        }
    }
  lab_0x65f90:;
    int128_t v100 = __asm_movsd_1649(0x3fa0000000000000); // 0x65f92
    int128_t v101; // 0x65fa4
    if ((char)g6 != 0) {
        // 0x65f9c
        v101 = __asm_movsd_1649(0x3fc0000000000000);
    } else {
        v101 = v100;
    }
    int128_t v102 = __asm_addsd(__asm_mulsd(v7, v101), v8); // 0x65fa8
    v7 = __asm_cvtpd2ps(__asm_unpcklpd(v102, v102));
    goto lab_0x65fb4;
  lab_0x6616d:;
    int128_t v104 = __asm_cvtsi2ss(v67); // 0x6616d
    int32_t v105 = g9 + 4; // 0x66171
    g9 = v105;
    *(int32_t *)(g4 + 24) = v105;
    v7 = __asm_cvtps2pd(__asm_unpcklps(v104, v104));
    goto lab_0x65f90;
}

// Address range: 0x66320 - 0x664f1
int32_t function_66320(int32_t a1, int32_t * a2) {
    int32_t v1 = g8; // 0x66323
    int32_t v2 = g10; // 0x66324
    int32_t v3 = g6; // 0x66325
    g10 = (int32_t)a2;
    g6 = a1;
    *a2 = 0;
    *(int32_t *)(g10 + 4) = 0;
    *(int32_t *)(g10 + 8) = 0;
    int32_t v4 = g6; // 0x66343
    uint32_t v5 = *(int32_t *)(v4 + 16); // 0x66343
    g4 = v5;
    int32_t * v6 = (int32_t *)(v4 + 20); // 0x66346
    int32_t v7 = *v6; // 0x66346
    g7 = v7;
    int32_t v8 = v5 % 2; // 0x6634b
    int32_t v9 = v7 - 1; // 0x66351
    g9 = v9;
    *v6 = v9;
    int32_t v10; // 0x66387
    int32_t v11; // 0x66389
    int32_t v12; // 0x66418
    if (v9 != 0) {
        int32_t v13 = g4 / 2; // 0x66400
        g4 = v13;
        g7 -= 2;
        g8 = v13;
        *(int32_t *)(g6 + 16) = v13;
        g8 %= 2;
        int32_t v14 = g7; // 0x6640d
        *(int32_t *)(g6 + 20) = v14;
        if (v14 != 0) {
            // 0x66400
            v11 = g7 - 1;
            v10 = g4;
            goto lab_0x66387;
        } else {
            // 0x66418
            v12 = g6;
            g4 = *(int32_t *)(v12 + 28);
            goto lab_0x6641b;
        }
    } else {
        int32_t v15 = g6; // 0x6635f
        g9 = *(int32_t *)(v15 + 24);
        *(int32_t *)(v15 + 20) = 32;
        int32_t v16 = g6; // 0x66369
        uint32_t v17 = *(int32_t *)(v16 + 28); // 0x66369
        g4 = v17;
        uint32_t v18 = g9; // 0x6636c
        if (v18 == v17) {
            // 0x664a8
            g9 = v17 + 4;
            *(int32_t *)(v16 + 16) = 0;
            g8 = 0;
            *(int32_t *)(g6 + 24) = g9;
            v12 = g6;
            goto lab_0x6641b;
        } else {
            int32_t v19; // 0x66498
            if (v18 < v17) {
                // 0x66490
                g4 = *(int32_t *)v18;
                int32_t v20 = v18 + 4; // 0x66492
                g9 = v20;
                *(int32_t *)(v16 + 24) = v20;
                v19 = g4;
                g8 = v19 % 2;
            } else {
                // 0x6637a
                *(char *)(v16 + 4) = 1;
                g8 = 0;
                g4 = 0;
                v19 = 0;
            }
            // 0x66382
            g7 = 31;
            v11 = 30;
            v10 = v19;
            goto lab_0x66387;
        }
    }
  lab_0x66387:;
    int32_t v21 = v10 / 2; // 0x66387
    g4 = v21;
    g7 = v11;
    g9 = v21;
    *(int32_t *)(g6 + 16) = v21;
    g9 %= 2;
    *(int32_t *)(g6 + 20) = v11;
    int32_t v22; // 0x6639f
    if (v11 != 0) {
        goto lab_0x6643e;
    } else {
        // 0x6639f
        v22 = g6;
        g4 = *(int32_t *)(v22 + 28);
        goto lab_0x663a2;
    }
  lab_0x6641b:
    // 0x6641b
    g9 = *(int32_t *)(v12 + 24);
    *(int32_t *)(v12 + 20) = 32;
    uint32_t v23 = g9; // 0x66425
    uint32_t v24 = g4; // 0x66425
    if (v23 == v24) {
        // 0x664c0
        g9 = v24 + 4;
        *(int32_t *)(g6 + 16) = 0;
        *(int32_t *)(g6 + 24) = g9;
        g9 = 0;
        v22 = g6;
        goto lab_0x663a2;
    } else {
        if (v23 < v24) {
            // 0x66478
            g4 = *(int32_t *)v23;
            *(int32_t *)(g6 + 24) = v23 + 4;
            g9 = g4 % 2;
        } else {
            // 0x6642f
            *(char *)(g6 + 4) = 1;
            g9 = 0;
            g4 = 0;
        }
        // 0x66437
        *(int32_t *)(g6 + 20) = 31;
        goto lab_0x6643e;
    }
  lab_0x6643e:;
    int32_t v25 = g4 / 2; // 0x6643e
    g4 = v25;
    *(int32_t *)(g6 + 16) = v25;
    goto lab_0x66443;
  lab_0x66443:
    // 0x66443
    g4 = v8;
    if (v8 != 0) {
        goto lab_0x663cc;
    } else {
        goto lab_0x6644a;
    }
  lab_0x663a2:
    // 0x663a2
    g7 = *(int32_t *)(v22 + 24);
    *(int32_t *)(v22 + 20) = 32;
    uint32_t v26 = g7; // 0x663ac
    uint32_t v27 = g4; // 0x663ac
    if (v26 == v27) {
        // 0x664d8
        g4 = v27 + 4;
        *(int32_t *)(g6 + 20) = 1;
        *(int32_t *)(g6 + 16) = 0;
        *(int32_t *)(g6 + 24) = g4;
        goto lab_0x66443;
    } else {
        if (v26 < v27) {
            // 0x66468
            g4 = *(int32_t *)v26;
            int32_t v28 = v26 + 4; // 0x6646a
            g7 = v28;
            *(int32_t *)(g6 + 24) = v28;
            *(int32_t *)(g6 + 16) = g4;
            goto lab_0x66443;
        } else {
            // 0x663ba
            g4 = v8;
            *(char *)(g6 + 4) = 1;
            *(int32_t *)(g6 + 16) = 0;
            if (g4 == 0) {
                goto lab_0x6644a;
            } else {
                goto lab_0x663cc;
            }
        }
    }
  lab_0x663cc:;
    int32_t v29 = g9; // 0x663cc
    g4 = function_651d0(g6);
    *(float32_t *)g10 = (float32_t)g868;
    g13++;
    g9 = v29;
    if (g8 == 0) {
        goto lab_0x6644e;
    } else {
        goto lab_0x663e0;
    }
  lab_0x6644a:;
    int32_t v30 = g9;
    if (g8 != 0) {
        v29 = v30;
        goto lab_0x663e0;
    } else {
        v29 = v30;
        goto lab_0x6644e;
    }
  lab_0x6644e:
    if (v29 == 0) {
        // 0x663f5
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    goto lab_0x66452;
  lab_0x663e0:
    // 0x663e0
    g4 = function_651d0(g6);
    *(float32_t *)(g10 + 4) = (float32_t)g868;
    g13++;
    g9 = v29;
    if (v29 == 0) {
        // 0x663f5
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    goto lab_0x66452;
  lab_0x66452:
    // 0x66452
    g4 = function_651d0(g6);
    *(float32_t *)(g10 + 8) = (float32_t)g868;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x66500 - 0x66721
// Used cryptographic patterns:
//  - Generic_bitmask_table (32-bit, little endian)
float80_t function_66500(int32_t a1) {
    // 0x66500
    g4 = a1;
    int32_t v1 = g10; // 0x66509
    int32_t v2 = g6; // 0x6650c
    int32_t v3 = g8; // 0x6650f
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x66512
    int32_t v5 = *v4; // 0x66512
    g7 = v5;
    int32_t v6 = *(int32_t *)(a1 + 16); // 0x66515
    g6 = v6;
    int32_t v7 = v5 - 1; // 0x66518
    g9 = v7;
    g10 = v6;
    *v4 = v7;
    int32_t v8 = g10 % 2; // 0x66520
    g10 = v8;
    int32_t v9 = g9; // 0x66523
    int128_t v10; // 0x6656a
    int32_t v11; // 0x6659e
    int32_t v12; // 0x6659e
    int128_t v13; // xmm1
    if (v9 != 0) {
        int32_t v14 = g6 / 2; // 0x66590
        g6 = v14;
        *(int32_t *)(g4 + 16) = v14;
        if (v9 > 10) {
            int32_t v15 = g7 - 12; // 0x66670
            g7 = v15;
            g9 = g6 & (int32_t)&g143;
            *(int32_t *)(g4 + 20) = v15;
            if (v15 != 0) {
                goto lab_0x66557;
            } else {
                int32_t v16 = g4; // 0x66686
                g7 = *(int32_t *)(v16 + 24);
                *(int32_t *)(v16 + 20) = 32;
                uint32_t v17 = g7; // 0x66690
                int32_t v18 = g4; // 0x66690
                uint32_t v19 = *(int32_t *)(v18 + 28); // 0x66690
                if (v17 == v19) {
                    // 0x66700
                    g7 = v17 + 4;
                    *(int32_t *)(v18 + 20) = 1;
                    *(int32_t *)(g4 + 16) = 0;
                    *(int32_t *)(g4 + 24) = g7;
                    goto lab_0x6655d;
                } else {
                    if (v17 < v19) {
                        // 0x666b8
                        g6 = *(int32_t *)v17;
                        g7 = v17 + 4;
                        v13 = __asm_cvtsi2ss(g9);
                        *(int32_t *)(g4 + 24) = g7;
                        *(int32_t *)(g4 + 16) = g6;
                        int32_t v20 = g9 / 0x10000; // 0x666c9
                        g4 = v20;
                        v10 = __asm_cvtsi2ss(v20);
                    } else {
                        // 0x66697
                        *(char *)(v18 + 4) = 1;
                        v13 = __asm_cvtsi2ss(g9);
                        *(int32_t *)(g4 + 16) = 0;
                        int32_t v21 = g9 / 0x10000; // 0x666a8
                        g4 = v21;
                        v10 = __asm_cvtsi2ss(v21);
                    }
                    goto lab_0x6656a;
                }
            }
        } else {
            // 0x6659e
            v11 = g4;
            v12 = *(int32_t *)(v11 + 28);
            g8 = v12;
            goto lab_0x665a1;
        }
    } else {
        int32_t v22 = g4; // 0x66527
        g9 = *(int32_t *)(v22 + 24);
        *(int32_t *)(v22 + 20) = 32;
        int32_t v23 = g4; // 0x66531
        uint32_t v24 = *(int32_t *)(v23 + 28); // 0x66531
        g8 = v24;
        uint32_t v25 = g9; // 0x66534
        if (v25 == v24) {
            // 0x66650
            g9 = v24 + 4;
            *(int32_t *)(v23 + 20) = 1;
            g6 = 0;
            *(int32_t *)(g4 + 24) = g9;
            g9 = 1;
            *(int32_t *)(g4 + 16) = 0;
            v12 = g8;
            v11 = g4;
            goto lab_0x665a1;
        } else {
            int32_t v26; // 0x66548
            if (v25 < v24) {
                // 0x665e0
                g6 = *(int32_t *)v25;
                int32_t v27 = v25 + 4; // 0x665e2
                g9 = v27;
                *(int32_t *)(v23 + 24) = v27;
                v26 = g6;
            } else {
                // 0x66542
                *(char *)(v23 + 4) = 1;
                g6 = 0;
                v26 = 0;
            }
            // 0x66548
            g9 = v26;
            *(int32_t *)(g4 + 20) = 21;
            g9 &= (int32_t)&g143;
            goto lab_0x66557;
        }
    }
  lab_0x66557:;
    int32_t v28 = g6 / 2048; // 0x66557
    g6 = v28;
    *(int32_t *)(g4 + 16) = v28;
    goto lab_0x6655d;
  lab_0x665a1:;
    int32_t * v37 = (int32_t *)(v11 + 24); // 0x665a1
    uint32_t v38 = *v37; // 0x665a1
    g7 = v38;
    if (v38 == v12) {
        // 0x666d8
        g8 = v12 + 4;
        *(char *)(v11 + 4) = 1;
        int128_t v39 = g878; // 0x666df
        g878 = __asm_xorps(v39, v39);
        *(int32_t *)(g4 + 20) = 1;
        *(int32_t *)(g4 + 16) = 0;
        *(int32_t *)(g4 + 24) = g8;
        goto lab_0x665bc;
    } else {
        if (v38 < v12) {
            // 0x665f0
            g8 = *(int32_t *)v38;
            int32_t v40 = v38 + 4; // 0x665f2
            g7 = v40;
            *v37 = v40;
            int32_t v41 = g8; // 0x665fc
            *(int32_t *)(g4 + 16) = v41;
            if (*(char *)(v11 + 4) != 0) {
                int128_t v42 = g878; // 0x66719
                g878 = __asm_xorps(v42, v42);
                goto lab_0x665bc;
            } else {
                int32_t v43 = g9; // 0x6660f
                int32_t v44 = 11 - v43; // 0x6660f
                int32_t v45 = v43 + 21; // 0x66612
                g9 = v45;
                g7 = v44;
                g8 &= *(int32_t *)(4 * v44 + (int32_t)&Generic_bitmask_table_at_87960);
                int32_t * v46 = (int32_t *)(g4 + 20); // 0x6661f
                g7 = *v46;
                *v46 = v45;
                g9 = v41;
                int32_t v47 = g8; // 0x66628
                uint32_t v48 = g7 & (int32_t)&g862 & 31; // 0x66628
                int32_t v49; // 0x66628
                if (v48 != 0) {
                    // bb
                    v49 = v47 << v48;
                    g8 = v49;
                } else {
                    v49 = v47;
                }
                // bb45
                g7 = v44 % 256;
                g8 = g6 | v49;
                uint32_t v50 = v44 & (int32_t)&g862 & 31; // 0x66630
                int32_t v51; // 0x66630
                if (v50 != 0) {
                    // bb46
                    v51 = v41 >> v50;
                    g9 = v51;
                } else {
                    v51 = v41;
                }
                // bb47
                *(int32_t *)(g4 + 16) = v51;
                uint32_t v52 = g8; // 0x66635
                int32_t v53 = v52 / 0x10000; // 0x66637
                g8 = v53;
                int32_t v54 = v52 & (int32_t)&g863; // 0x6663a
                g4 = v54;
                int128_t v55 = __asm_cvtsi2ss(v53); // 0x6663f
                v13 = __asm_cvtsi2ss(v54);
                v10 = v55;
                goto lab_0x6656a;
            }
        } else {
            // 0x665ae
            *(char *)(v11 + 4) = 1;
            int128_t v56 = g878; // 0x665b2
            g878 = __asm_xorps(v56, v56);
            *(int32_t *)(g4 + 16) = 0;
            goto lab_0x665bc;
        }
    }
  lab_0x6655d:;
    int32_t v29 = g9; // 0x6655d
    g4 = v29;
    v13 = __asm_cvtsi2ss(v29);
    int32_t v30 = g4 / 0x10000; // 0x66563
    g4 = v30;
    v10 = __asm_cvtsi2ss(v30);
    goto lab_0x6656a;
  lab_0x6656a:;
    int128_t v31 = __asm_addss_1661(__asm_mulss_1654(v10, 0x47800000), v13); // 0x66572
    int128_t v32 = __asm_unpcklps(v31, v31); // 0x66576
    int128_t v33 = __asm_mulsd_1655(__asm_cvtps2pd(v32), 0x3f40020040080100); // 0x6657c
    g878 = __asm_cvtpd2ps(__asm_unpcklpd(v33, v33));
    goto lab_0x665bc;
  lab_0x665bc:;
    int128_t v34; // 0x665cb
    if (v8 == 0) {
        // 0x665bc
        v34 = g878;
    } else {
        int128_t v35 = __asm_movss((int32_t)g233); // 0x665c0
        int128_t v36 = __asm_xorps(g878, v35); // 0x665c8
        g878 = v36;
        v34 = v36;
    }
    // 0x665cb
    g6 = v2;
    g13--;
    g10 = v1;
    g8 = v3;
    return __asm_movss_1646(v34);
}

// Address range: 0x66730 - 0x66949
int32_t function_66730(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x66733
    int32_t v2 = g10; // 0x66734
    int32_t v3 = g6; // 0x66735
    g6 = a1;
    g10 = a2;
    int32_t * v4 = (int32_t *)(a1 + 20); // 0x6673f
    int32_t v5 = *v4; // 0x6673f
    g9 = v5;
    int32_t v6 = *(int32_t *)(a1 + 16); // 0x66742
    g8 = v6;
    int32_t v7 = v5 - 1; // 0x66745
    g4 = v7;
    g7 = v6;
    *v4 = v7;
    int32_t v8 = g7 % 2; // 0x6674d
    g7 = v8;
    int32_t v9; // 0x667fe
    if (v7 != 0) {
        int32_t v10 = g9 - 2; // 0x667ea
        g9 = v10;
        g4 = g8 / 2;
        *(int32_t *)(g6 + 20) = v10;
        int32_t v11 = g4; // 0x667f2
        g8 = v11;
        *(int32_t *)(g6 + 16) = v11;
        g8 %= 2;
        if (v10 != 0) {
            goto lab_0x66782;
        } else {
            // 0x667fe
            v9 = g6;
            g4 = *(int32_t *)(v9 + 28);
            goto lab_0x66801;
        }
    } else {
        int32_t v12 = g6; // 0x66758
        g9 = *(int32_t *)(v12 + 24);
        *(int32_t *)(v12 + 20) = 32;
        int32_t v13 = g6; // 0x66762
        uint32_t v14 = *(int32_t *)(v13 + 28); // 0x66762
        g4 = v14;
        uint32_t v15 = g9; // 0x66765
        if (v15 == v14) {
            // 0x66918
            g9 = v14 + 4;
            *(int32_t *)(v13 + 16) = 0;
            g8 = 0;
            *(int32_t *)(g6 + 24) = g9;
            v9 = g6;
            goto lab_0x66801;
        } else {
            if (v15 < v14) {
                // 0x668e0
                g4 = *(int32_t *)v15;
                int32_t v16 = v15 + 4; // 0x668e2
                g9 = v16;
                *(int32_t *)(v13 + 24) = v16;
                g8 = g4 % 2;
            } else {
                // 0x66773
                *(char *)(v13 + 4) = 1;
                g8 = 0;
                g4 = 0;
            }
            // 0x6677b
            *(int32_t *)(g6 + 20) = 31;
            goto lab_0x66782;
        }
    }
  lab_0x66782:;
    int32_t v17 = g4 / 2; // 0x66782
    g4 = v17;
    *(int32_t *)(g6 + 16) = v17;
    goto lab_0x66787;
  lab_0x66787:
    // 0x66787
    if (v8 != 0) {
        goto lab_0x6682c;
    } else {
        goto lab_0x6678f;
    }
  lab_0x66801:
    // 0x66801
    g9 = *(int32_t *)(v9 + 24);
    *(int32_t *)(v9 + 20) = 32;
    uint32_t v18 = g9; // 0x6680b
    uint32_t v19 = g4; // 0x6680b
    if (v18 == v19) {
        // 0x66930
        g4 = v19 + 4;
        *(int32_t *)(g6 + 20) = 1;
        *(int32_t *)(g6 + 16) = 0;
        *(int32_t *)(g6 + 24) = g4;
        goto lab_0x66787;
    } else {
        if (v18 < v19) {
            // 0x668c8
            g4 = *(int32_t *)v18;
            int32_t v20 = v18 + 4; // 0x668ca
            g9 = v20;
            *(int32_t *)(g6 + 24) = v20;
            *(int32_t *)(g6 + 16) = g4;
            goto lab_0x66787;
        } else {
            // 0x66819
            *(char *)(g6 + 4) = 1;
            *(int32_t *)(g6 + 16) = 0;
            if (v8 == 0) {
                goto lab_0x6678f;
            } else {
                goto lab_0x6682c;
            }
        }
    }
  lab_0x6682c:;
    float32_t v21 = function_66500(g6); // 0x6682f
    g4 = v21;
    *(float32_t *)g10 = v21;
    g13++;
    if (g8 == 0) {
        // 0x6679d
        *(int32_t *)(g10 + 4) = 0;
        goto lab_0x667a4;
    } else {
        goto lab_0x6683e;
    }
  lab_0x6678f:
    // 0x6678f
    *(int32_t *)g10 = 0;
    if (g8 != 0) {
        goto lab_0x6683e;
    } else {
        // 0x6679d
        *(int32_t *)(g10 + 4) = 0;
        goto lab_0x667a4;
    }
  lab_0x6683e:;
    float32_t v22 = function_66500(g6); // 0x66841
    g4 = v22;
    *(float32_t *)(g10 + 4) = v22;
    goto lab_0x667a4;
  lab_0x667a4:;
    int32_t v23 = g6; // 0x667a4
    int32_t * v24 = (int32_t *)(v23 + 20); // 0x667a4
    int32_t v25 = *v24; // 0x667a4
    g4 = v25;
    int32_t v26 = *(int32_t *)(v23 + 16); // 0x667a7
    g9 = v26;
    int32_t v27 = v25 - 1; // 0x667aa
    g4 = v27;
    g7 = v26;
    *v24 = v27;
    int32_t v28 = g7 % 2; // 0x667b2
    g7 = v28;
    bool v29; // cf
    bool v30; // zf
    if (g4 != 0) {
        uint32_t v31 = g9; // 0x66850
        int32_t v32 = v31 / 2; // 0x66850
        v30 = v31 < 2;
        g9 = v32;
        v29 = v31 % 2 != 0;
        *(int32_t *)(g6 + 16) = v32;
    } else {
        int32_t v33 = g6; // 0x667bd
        g4 = *(int32_t *)(v33 + 24);
        *(int32_t *)(v33 + 20) = 32;
        uint32_t v34 = g4; // 0x667c7
        int32_t v35 = g6; // 0x667c7
        uint32_t v36 = *(int32_t *)(v35 + 28); // 0x667c7
        v29 = v34 < v36;
        v30 = v34 == v36;
        if (v34 == v36) {
            int32_t v37 = v34 + 4; // 0x668f8
            v29 = v34 > 0xfffffffb;
            v30 = v37 == 0;
            g4 = v37;
            *(int32_t *)(v35 + 20) = 1;
            *(int32_t *)(g6 + 16) = 0;
            *(int32_t *)(g6 + 24) = g4;
        } else {
            if (v34 < v36) {
                // 0x668b8
                g9 = *(int32_t *)v34;
                int32_t v38 = v34 + 4; // 0x668ba
                v29 = v34 > 0xfffffffb;
                v30 = v38 == 0;
                g4 = v38;
                *(int32_t *)(v35 + 24) = v38;
                *(int32_t *)(g6 + 16) = g9;
            } else {
                // 0x667d6
                *(char *)(v35 + 4) = 1;
                *(int32_t *)(g6 + 16) = 0;
            }
        }
    }
    int128_t v39 = __asm_movss(*(int32_t *)g10); // 0x66855
    int128_t v40 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x66859
    int128_t v41 = __asm_mulss(v39, v39); // 0x6685e
    int128_t v42 = __asm_addss_1661(v41, __asm_mulss(v40, v40)); // 0x66866
    int128_t v43 = __asm_movss(0x3f800000); // 0x6686a
    __asm_ucomiss_1648(v43, v42);
    if (v29 || v30) {
        // 0x668a8
        *(int32_t *)(g10 + 8) = 0;
    } else {
        int128_t v44 = __asm_subss(v43, v42); // 0x66877
        *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_sqrtss(v44));
    }
    // 0x66884
    if (v28 != 0) {
        int128_t v45 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x66888
        int128_t v46 = __asm_movss((int32_t)g233); // 0x6688d
        *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_xorps(v45, v46));
    }
    // 0x6689d
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x66950 - 0x66983
int32_t function_66950(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x66953
    g4 = a1;
    g6 = a2;
    int32_t v2; // bp-24
    function_66320(a1, &v2);
    *(int32_t *)g6 = v2;
    g6 = v1;
    return g4;
}

// Address range: 0x669e0 - 0x66a0d
int32_t function_669e0(int32_t a1) {
    // 0x669e0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 20); // 0x669ea
    g4 = v1;
    int32_t v2; // 0x669f9
    if (v1 != 0) {
        // 0x669f1
        g4 = function_1bca0(v1);
        v2 = g6;
    } else {
        v2 = a1;
    }
    // 0x669f9
    g4 = *(int32_t *)(v2 + 8);
    *(int32_t *)(v2 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x66a05
    g4 = result;
    return result;
}

// Address range: 0x66a60 - 0x66a93
int32_t function_66a60(int32_t a1, int32_t a2, int32_t * a3, int32_t a4) {
    // 0x66a60
    g9 = a2;
    int32_t v1 = function_2cb40(a2); // 0x66a6f
    g4 = v1;
    g6 = v1 + 1;
    int32_t v2 = function_1bc60(); // 0x66a7a
    g4 = v2;
    g7 = a1;
    g9 = a2;
    *(int32_t *)(a1 + 20) = v2;
    return g4;
}

// Address range: 0x66af4 - 0x66b23
int32_t function_66af4(int32_t a1) {
    // 0x66af4
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x74dd8b40); // 0x66af4
    *v2 = *v2 + 1;
    char * v3 = (char *)(v1 + 0x7d2be445); // 0x66afb
    *v3 = (char)g7 | *v3;
    int32_t v4 = g4; // 0x66b01
    unsigned char v5 = (char)v4 | 3; // 0x66b01
    unsigned char v6 = llvm_ctpop_i8(v5); // 0x66b01
    g4 = (int32_t)v5 | v4 & -256;
    if (v6 % 2 != 0) {
        // 0x66b05
        g4 = *(int32_t *)(g9 + 12);
        *(int32_t *)(v1 - 28) = g8;
        return g4;
    }
    int32_t * v7 = (int32_t *)(g6 + 0x5e5b3cc4); // 0x66b1a
    *v7 = *v7 + 1;
    g8 = v1;
    return g4;
}

// Address range: 0x66b23 - 0x66b33
int32_t function_66b23(void) {
    int32_t v1 = *(int32_t *)(g5 - 44); // 0x66b27
    g7 = v1;
    int32_t v2 = *(int32_t *)(g5 + 16); // 0x66b2a
    g9 = v2;
    int32_t result = *(int32_t *)(v2 + 4 * v1); // 0x66b2d
    g4 = result;
    return result;
}

// Address range: 0x66b3b - 0x66b3c
int32_t function_66b3b(void) {
    // 0x66b3b
    return g4;
}

// Address range: 0x66b3e - 0x66b3f
int32_t function_66b3e(void) {
    // 0x66b3e
    return g4;
}

// Address range: 0x66b41 - 0x66b81
int32_t function_66b41(void) {
    // 0x66b41
    g6 = 0;
    g10 = 0;
    *(int32_t *)(g5 - 44) = -1;
    int32_t v1 = g6; // 0x66b53
    int32_t v2; // 0x66b5d
    while (true) {
      lab_0x66b50:;
        int32_t v3 = *(int32_t *)(g5 + 16); // 0x66b50
        g9 = v3;
        int32_t v4 = *(int32_t *)(v3 + 4 * v1); // 0x66b53
        g4 = v4;
        v2 = function_2d690(g8, v4);
        g4 = v2;
        if (v2 == 0) {
            goto lab_0x66b77;
        } else {
            uint32_t v5 = g10; // 0x66b66
            if (v5 > v2) {
                goto lab_0x66b72;
            } else {
                if (v5 != 0) {
                    goto lab_0x66b77;
                } else {
                    goto lab_0x66b72;
                }
            }
        }
    }
  lab_0x66b7f:;
    int32_t result = function_66b23(); // 0x66b7f
    g4 = result;
    return result;
  lab_0x66b77:;
    int32_t v6 = g6 + 1; // 0x66b77
    g6 = v6;
    if (v6 == *(int32_t *)(g5 + 20)) {
        // break -> 0x66b7f
        goto lab_0x66b7f;
    }
    v1 = v6;
    goto lab_0x66b50;
  lab_0x66b72:
    // 0x66b72
    g10 = v2;
    *(int32_t *)(g5 - 44) = g6;
    goto lab_0x66b77;
}

// Address range: 0x66b88 - 0x66bb6
int32_t function_66b88(void) {
    int32_t v1 = g8; // 0x66b88
    g4 = v1;
    int32_t v2 = *(int32_t *)(g5 + 8); // 0x66b8a
    g7 = v2;
    int32_t v3 = g10; // 0x66b8d
    g9 = v3;
    int32_t v4 = v1 - *(int32_t *)(g5 + 12); // 0x66b8f
    g4 = v4;
    g9 = v3 - v1;
    int32_t v5 = *(int32_t *)(v2 + 20) + v4; // 0x66b94
    g4 = v5;
    *(int32_t *)(g5 - 28) = v5;
    *(char *)(g9 + g4) = 0;
    int32_t v6 = g5 - 28; // 0x66b9e
    g4 = v6;
    int32_t v7 = g7; // 0x66ba5
    int32_t v8 = *(int32_t *)(v7 + 12); // 0x66ba5
    g4 = v8;
    g4 = function_30330(v7, v8, v6);
    int32_t result = function_66b3e(); // 0x66bb4
    g4 = result;
    return result;
}

// Address range: 0x66bb6 - 0x66bbd
int32_t function_66bb6(void) {
    int32_t result = g7; // 0x66bb6
    g4 = result;
    return result;
}

// Address range: 0x66bc0 - 0x66c10
int32_t function_66bc0(int32_t a1, int32_t a2, int32_t * a3) {
    int32_t v1 = g6; // 0x66bc3
    g6 = a1;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    g4 = a2;
    int32_t v2; // bp+12
    int32_t result = function_66a60(g6, a2, &v2, 1); // 0x66c05
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x66c10 - 0x66c7f
int32_t function_66c10(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x66c10
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_66ce0(g6);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x66c1b
    g4 = v1;
    function_7ab57(v1, (int32_t)&g870);
    int32_t v2 = g5; // bp-4
    g5 = &v2;
    int32_t v3 = g6; // 0x66c33
    g6 = a1;
    g4 = a4;
    *(int32_t *)a1 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)(g6 + 12) = 0;
    *(int32_t *)(g6 + 16) = 0;
    int32_t v4 = g4; // 0x66c5f
    g4 = a2;
    int32_t result = function_66a60(g6, a2, (int32_t *)a3, v4); // 0x66c74
    g4 = result;
    g6 = v3;
    return result;
}

// Address range: 0x66c84 - 0x66c94
int32_t function_66c84(void) {
    int32_t v1 = g4; // 0x66c84
    unsigned char v2 = (char)v1 & -24; // 0x66c84
    int32_t v3 = (int32_t)v2 | v1 & -256; // 0x66c84
    g4 = v3;
    char * v4 = (char *)v3; // 0x66c87
    *v4 = *v4 + v2;
    char * v5 = (char *)(g6 + 0x489f445); // 0x66c89
    *v5 = (char)g7 + *v5;
    int32_t result = g4 & -24; // 0x66c8f
    g4 = result;
    return result;
}

// Address range: 0x66ca0 - 0x66cb7
int32_t function_66ca0(int32_t a1) {
    // 0x66ca0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x66caa
    g9 = v1;
    int32_t v2; // 0x66cb1
    if (v1 < 0) {
        // bb
        g4 = function_66cd6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x66cb1
    g4 = v3;
    int32_t result; // 0x66cb5
    if (v3 == 0) {
        // bb233
        result = function_66ccf();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x66cb7
    return result;
}

// Address range: 0x66ccf - 0x66cd6
int32_t function_66ccf(void) {
    // 0x66ccf
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x66cd6 - 0x66cdc
int32_t function_66cd6(int32_t a1, int32_t a2) {
    // 0x66cd6
    g6 = a1;
    return g4;
}

// Address range: 0x66ce0 - 0x66cfe
int32_t function_66ce0(int32_t a1) {
    // 0x66ce0
    g6 = a1;
    g7 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x66cf4
    g4 = result;
    return result;
}

// Address range: 0x66d50 - 0x66d59
int32_t function_66d50(int32_t * a1, int32_t a2) {
    int32_t result = function_35640((int32_t)&g870, (int32_t)&g870); // 0x66d54
    g4 = result;
    return result;
}

// Address range: 0x66d60 - 0x66d69
int32_t function_66d60(void) {
    int32_t result = function_35740(); // 0x66d64
    g4 = result;
    return result;
}

// Address range: 0x66d7c - 0x66d7f
int32_t function_66d7c(void) {
    // 0x66d7c
    return g4;
}

// Address range: 0x66daa - 0x66dab
int32_t function_66daa(void) {
    // 0x66daa
    return g4;
}

// Address range: 0x66db1 - 0x66dbc
int32_t function_66db1(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x758bf85d); // 0x66db1
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x66dc1 - 0x66dc2
int32_t function_66dc1(void) {
    // 0x66dc1
    return g4;
}

// Address range: 0x66dcb - 0x66dcd
int32_t function_66dcb(void) {
    int32_t result = function_66daa(); // 0x66dcb
    g4 = result;
    return result;
}

// Address range: 0x66dd0 - 0x66ddc
int32_t function_66dd0(void) {
    // 0x66dd0
    *(char *)&g300 = 0;
    return g4;
}

// Address range: 0x66de0 - 0x66e7a
int32_t function_66de0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x66de0
    g4 = a2;
    int32_t v1 = g6; // 0x66de9
    int32_t v2 = g10; // 0x66dec
    g9 = a1;
    int32_t v3 = g8; // 0x66df2
    g7 = a3;
    uint16_t v4 = *(int16_t *)a2; // 0x66df8
    int32_t v5 = v4; // 0x66df8
    g6 = v5;
    uint16_t v6 = *(int16_t *)(a2 + 2); // 0x66dfb
    int32_t v7 = v6; // 0x66dfb
    g4 = v7;
    int32_t v8; // 0x66e59
    if (v4 == -1) {
        if (v6 != -1) {
            goto lab_0x66e05;
        } else {
            // 0x66e56
            g6 = *(int32_t *)(a1 + 32);
            v8 = (int32_t)*(int16_t *)(a1 + 30);
            g10 = v8;
            goto lab_0x66e18;
        }
    } else {
        goto lab_0x66e05;
    }
  lab_0x66e05:;
    int32_t v9 = *(int32_t *)(a1 + 36); // 0x66e05
    g10 = v9;
    int32_t v10 = v5 & (int32_t)&g863; // 0x66e08
    g6 = v10;
    int32_t v11 = v7 & (int32_t)&g863; // 0x66e0b
    g4 = v11;
    int32_t v12 = *(int32_t *)(v9 + 4 * v10) + v11; // 0x66e0e
    g4 = v12;
    int32_t v13 = (int32_t)*(int16_t *)(v12 + 8); // 0x66e11
    g10 = v13;
    g6 = v12 + 10;
    v8 = v13;
    goto lab_0x66e18;
  lab_0x66e18:;
    uint16_t v14 = *(int16_t *)a3; // 0x66e18
    int32_t v15 = v14; // 0x66e18
    g8 = v15;
    int32_t v16 = (int32_t)*(int16_t *)(a3 + 2); // 0x66e1b
    g4 = v16;
    int32_t v17; // 0x66e25
    int32_t v18; // 0x66e28
    int32_t v19; // 0x66e3e
    int32_t v20; // 0x66e23
    if (v14 == -1) {
        // bb
        v20 = function_66e88();
        g4 = v20;
        v19 = g10;
        v18 = g8;
        v17 = g9;
    } else {
        v19 = v8;
        v20 = v16;
        v18 = v15;
        v17 = a1;
    }
    int32_t v21 = *(int32_t *)(v17 + 36); // 0x66e25
    g7 = v21;
    int32_t v22 = v18 & (int32_t)&g863; // 0x66e28
    g8 = v22;
    int32_t v23 = v20 & (int32_t)&g863; // 0x66e2b
    g4 = v23;
    int32_t v24 = *(int32_t *)(v21 + 4 * v22) + v23; // 0x66e2e
    g4 = v24;
    uint16_t v25 = *(int16_t *)(v24 + 8); // 0x66e31
    int32_t v26 = v25; // 0x66e31
    g7 = v26;
    int32_t v27 = v24 + 10; // 0x66e35
    g8 = v27;
    uint16_t v28 = (int16_t)v19; // 0x66e38
    int32_t result = (int32_t)(v28 < v25) | v24 & -256; // 0x66e3b
    g4 = result;
    if (v28 != v25) {
        // 0x66e43
        g6 = v1;
        g10 = v2;
        g8 = v3;
        return result;
    }
    // 0x66e60
    g7 = (int32_t)(g6 == 0) | v26 & 0xff00;
    int32_t v29; // 0x66e67
    if (v27 != 0) {
        // 0x66e69
        v29 = function_66ea0();
    } else {
        // bb22
        v29 = function_66eb0();
    }
    // 0x66e6d
    g4 = v29;
    int32_t result2; // 0x66e78
    if (*(char *)(g9 + 28) != 0) {
        // bb23
        result2 = function_66ec8();
        g4 = result2;
    } else {
        result2 = v29;
    }
    // 0x66e7a
    return result2;
}

// Address range: 0x66e7f - 0x66e84
int32_t function_66e7f(void) {
    int32_t result = g4 < 0; // 0x66e7f
    g4 = result;
    return result;
}

// Address range: 0x66e88 - 0x66e97
int32_t function_66e88(void) {
    int32_t v1 = g9; // 0x66e8e
    g8 = *(int32_t *)(v1 + 32);
    g7 = (int32_t)*(int16_t *)(v1 + 30);
    return g4;
}

// Address range: 0x66ea0 - 0x66eab
int32_t function_66ea0(void) {
    // 0x66ea0
    g4 = 1;
    return 1;
}

// Address range: 0x66eb0 - 0x66ec1
int32_t function_66eb0(void) {
    // 0x66eb0
    g4 = 0;
    return 0;
}

// Address range: 0x66ec8 - 0x66ed5
int32_t function_66ec8(void) {
    int32_t result = function_2cc30((int32_t)&g870, (char *)&g870) < 0; // 0x66ecd
    g4 = result;
    return result;
}

// Address range: 0x66ee0 - 0x66ee9
int32_t function_66ee0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x66ee0
    return g4;
}

// Address range: 0x66f14 - 0x66fa4
int32_t function_66f14(void) {
    int32_t v1 = g10; // 0x66f14
    int32_t v2; // 0x66f20
    if (v1 == 0) {
        // bb
        g4 = function_670fd();
        v2 = g10;
    } else {
        v2 = v1;
    }
    int32_t v3 = g6; // 0x66f1c
    *(int32_t *)(v3 + 32) = v2;
    if (*(char *)(v3 + 28) != 0) {
        // bb237
        g4 = function_66fe0();
    }
    int32_t v4 = function_34eb0((int32_t)&g870); // 0x66f2c
    g4 = v4;
    int32_t v5 = g6; // 0x66f31
    g8 = (int32_t)*(int16_t *)(v5 + 16);
    *(int16_t *)(v5 + 30) = (int16_t)v4;
    *(int16_t *)(g5 - 30) = (int16_t)&g863;
    *(int16_t *)(g5 - 28) = (int16_t)&g863;
    int32_t v6 = g8; // 0x66f48
    int32_t v7 = g5;
    int32_t v8; // 0x66f98
    int32_t v9; // 0x66f9b
    if ((int16_t)v6 != -1) {
        int32_t v10 = v6; // 0x66f51
        int32_t v11 = v7; // 0x66f59
        while (true) {
            // 0x66f4e
            g9 = v11 - 30;
            int32_t v12 = 3 * (v10 & (int32_t)&g863); // 0x66f54
            g4 = v12;
            g10 = v12;
            *(int32_t *)(v11 - 44) = v12;
            int32_t v13 = g6; // 0x66f5c
            int32_t v14 = 4 * g10; // 0x66f5f
            g10 = v14;
            int32_t v15 = v14 + *(int32_t *)(v13 + 4) + 8; // 0x66f6b
            g4 = v15;
            int32_t v16 = function_66de0(v13, g9, v15); // 0x66f72
            g4 = v16;
            if ((char)v16 == 0) {
                // bb239
                g4 = function_66ff0();
            }
            // 0x66f7b
            if (g715 == 0) {
                // bb240
                g4 = function_67028();
            }
            int32_t v17 = *(int32_t *)(g6 + 4); // 0x66f88
            g4 = v17;
            int32_t v18 = g5; // 0x66f8b
            int32_t v19 = *(int32_t *)(v18 - 44); // 0x66f8b
            g9 = v19;
            uint16_t v20 = *(int16_t *)(4 * v19 + v17); // 0x66f8e
            int32_t v21 = v20; // 0x66f8e
            g8 = v21;
            if (v20 == -1) {
                v9 = v21;
                v8 = v18;
                // break -> 0x66f98
                break;
            }
            v10 = v21;
            v11 = v18;
        }
    } else {
        v9 = v6;
        v8 = v7;
    }
    int32_t v22 = *(int32_t *)(v8 + 8); // 0x66f98
    g4 = v22;
    *(int16_t *)v22 = (int16_t)v9;
    int32_t result; // 0x66fa2
    if (*(char *)(g5 - 25) == 0) {
        // bb241
        result = function_66fca((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        // 0x66f98
        result = g4;
    }
    // 0x66fa4
    return result;
}

// Address range: 0x66fc3 - 0x66fc4
int32_t function_66fc3(void) {
    // 0x66fc3
    return g4;
}

// Address range: 0x66fca - 0x66fd7
int32_t function_66fca(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = *(int32_t *)(g5 + 8); // 0x66fca
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x66fe0 - 0x66fea
int32_t function_66fe0(void) {
    int32_t result = function_34f10((int32_t)&g870); // 0x66fe0
    g4 = result;
    return result;
}

// Address range: 0x66ff0 - 0x67025
int32_t function_66ff0(void) {
    int32_t v1 = g5 - 30; // 0x66ff0
    g4 = v1;
    int32_t v2 = g6; // 0x66ff7
    int32_t v3 = g10 + *(int32_t *)(v2 + 4) + 8; // 0x66fff
    g4 = v3;
    g4 = function_66de0(v2, v3, v1);
    if (g715 == 0) {
        // bb
        g4 = function_67070();
    }
    int32_t result = *(int32_t *)(g6 + 4); // 0x67018
    g4 = result;
    g8 = (int32_t)*(int16_t *)(result + 2 + g10);
    return result;
}

// Address range: 0x67028 - 0x6702f
int32_t function_67028(void) {
    // 0x67028
    return g4;
}

// Address range: 0x67037 - 0x67043
int32_t function_67037(void) {
    // 0x67037
    g8++;
    int32_t v1 = g4; // 0x6703d
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x6703f
    g4 = result;
    return result;
}

// Address range: 0x67046 - 0x67049
int32_t function_67046(void) {
    // 0x67046
    return g4;
}

// Address range: 0x67049 - 0x6704e
int32_t function_67049(void) {
    uint32_t v1 = g6; // 0x67049
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6704f - 0x67057
int32_t function_6704f(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x6704f
    g4 = result;
    uint32_t v1 = g6; // 0x67052
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x67063 - 0x67068
int32_t function_67063(void) {
    // 0x67063
    return g4;
}

// Address range: 0x67070 - 0x67077
int32_t function_67070(void) {
    // 0x67070
    return g4;
}

// Address range: 0x6707b - 0x67087
int32_t function_6707b(void) {
    // 0x6707b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38678b40); // 0x6707b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x67081
    int32_t result = ((v3 + 36) % 256 | v3 & -256) + 1; // 0x67083
    g4 = result;
    return result;
}

// Address range: 0x6708a - 0x6708d
int32_t function_6708a(void) {
    // 0x6708a
    return g4;
}

// Address range: 0x6708d - 0x67092
int32_t function_6708d(void) {
    uint32_t v1 = g6; // 0x6708d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x67093 - 0x6709b
int32_t function_67093(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x67093
    g4 = result;
    uint32_t v1 = g6; // 0x67096
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x670a7 - 0x670ac
int32_t function_670a7(void) {
    // 0x670a7
    return g4;
}

// Address range: 0x670e6 - 0x670e9
int32_t function_670e6(void) {
    // 0x670e6
    return g4;
}

// Address range: 0x670fd - 0x6710a
int32_t function_670fd(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x670fd
    g4 = v1;
    *(int16_t *)v1 = (int16_t)&g863;
    return g4;
}

// Address range: 0x67128 - 0x67129
int32_t function_67128(void) {
    // 0x67128
    return g4;
}

// Address range: 0x67141 - 0x671ad
int32_t function_67141(int32_t a1, uint32_t a2) {
    // 0x67141
    g6 = g4;
    int32_t v1 = g5 - 25; // 0x67143
    g4 = v1;
    g4 = function_67ea0(v1);
    function_7ab57(g6, (int32_t)&g870);
    g4 = -1;
    int32_t v2 = g8; // 0x67168
    g9 = a1;
    int32_t v3 = g10; // 0x6716c
    int32_t v4 = g6; // 0x6716d
    g10 = a2;
    int32_t v5 = *(int32_t *)(a1 + 48); // 0x67171
    g6 = v5;
    if (v5 < 1) {
        // 0x671a8
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return -1;
    }
    int32_t v6 = *(int32_t *)(a1 + 36); // 0x67178
    g8 = v6;
    int32_t v7 = *(int32_t *)v6; // 0x6717b
    g4 = v7;
    int32_t v8 = *(int32_t *)v7; // 0x6717d
    g9 = v8;
    int32_t v9 = v8 - *(int32_t *)(v7 + 4); // 0x6717f
    g9 = v9;
    g4 = 0;
    if (v9 >= a2) {
        // 0x671a8
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return 0;
    }
    int32_t v10 = 0; // 0x6719c
    int32_t result; // 0x671ac
    while (true) {
        int32_t v11 = v10 + 1; // 0x6719c
        g4 = v11;
        if (v11 == v5) {
            // break -> 0x671a3
            break;
        }
        int32_t v12 = *(int32_t *)(4 * v11 + v6); // 0x67190
        g7 = v12;
        int32_t v13 = *(int32_t *)v12; // 0x67193
        g9 = v13;
        int32_t v14 = v13 - *(int32_t *)(v12 + 4); // 0x67195
        g9 = v14;
        if (v14 >= a2) {
            result = v11;
            goto lab_0x671a8_2;
        }
        v10 = v11;
    }
    // 0x671a3
    g4 = -1;
    result = -1;
  lab_0x671a8_2:
    // 0x671a8
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result;
}

// Address range: 0x671b0 - 0x671e8
int32_t function_671b0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x671b3
    g4 = a2;
    g7 = a1;
    uint16_t v2 = *(int16_t *)a2; // 0x671ba
    int32_t v3 = v2; // 0x671ba
    g9 = v3;
    g4 = (int32_t)&g129;
    int32_t result; // 0x671e2
    if (v2 != -1) {
        int32_t v4 = v3 & (int32_t)&g863; // 0x671c8
        g9 = v4;
        g4 = 3 * v4;
        int32_t v5 = *(int32_t *)(a1 + 4); // 0x671ce
        g9 = v5;
        int32_t v6 = v5 + 12 * v4; // 0x671d1
        g4 = v6;
        int32_t v7 = *(int32_t *)(a1 + 36); // 0x671d4
        g9 = v7;
        int32_t v8 = (int32_t)*(int16_t *)(v6 + 8); // 0x671d7
        g6 = v8;
        int32_t v9 = (int32_t)*(int16_t *)(v6 + 10); // 0x671db
        g4 = v9;
        result = *(int32_t *)(4 * v8 + v7) + v9 + 10;
        g4 = result;
    } else {
        result = (int32_t)&g129;
    }
    // 0x671e5
    g6 = v1;
    return result;
}

// Address range: 0x671f0 - 0x671f1
int32_t function_671f0(int32_t a1, int32_t a2) {
    // 0x671f0
    return g4;
}

// Address range: 0x67280 - 0x67281
int32_t function_67280(void) {
    // 0x67280
    return g4;
}

// Address range: 0x6728a - 0x672da
int32_t function_6728a(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)(g7 - 0x76fbdb8c); // 0x6728a
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x67290
    bool v3; // cf
    unsigned char v4 = v3 ? 37 : 36; // 0x67290
    g4 = (int32_t)((char)v2 - v4) | v2 & -256;
    int32_t v5 = function_69b70((int32_t)&g870, (int32_t)&g870); // 0x67292
    g10 = v5;
    int32_t v6 = g5 - 284; // 0x6729f
    g4 = v6;
    g8 = (g8 & -0x10000 | v5 & (int32_t)&g863) & (int32_t)&g863;
    int32_t v7 = function_69b70(g6, v6); // 0x672af
    g4 = v7;
    int32_t v8 = 0x10000 * v7; // 0x672b6
    g9 = v8;
    g8 |= v8;
    int32_t * v9 = (int32_t *)(g6 + 56); // 0x672bb
    *v9 = *v9 - 1;
    g9 = 0;
    int32_t result; // 0x672ca
    if ((int16_t)g10 != 0) {
        // 0x672c7
        result = (int16_t)g4 != 0 ? g8 : 0;
        g9 = result;
    } else {
        result = 0;
    }
    // 0x672cd
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x672e0 - 0x672f4
int32_t function_672e0(void) {
    int32_t * v1 = (int32_t *)(g6 + 56); // 0x672e0
    int32_t v2 = *v1 & (int32_t)&g863; // 0x672e3
    g4 = v2;
    int32_t v3 = v2 | 1; // 0x672e8
    g9 = v3;
    int32_t v4 = *v1; // 0x672eb
    *v1 = v2 == v4 ? v3 : v4;
    g4 = v4;
    int32_t result = function_67280(); // 0x672f2
    g4 = result;
    return result;
}

// Address range: 0x67300 - 0x673be
int32_t function_67300(int32_t a1, int32_t a2) {
    g4 = 0;
    int32_t v1 = g8; // 0x6730b
    g8 = a2;
    int32_t v2 = g6; // 0x67311
    g6 = a1;
    int32_t v3 = g10; // 0x67317
    if (a2 == 0) {
        // 0x6732e
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return 0;
    }
    int32_t result = function_671f0(a1, a2); // 0x67325
    g4 = result;
    if (result != 0) {
        // 0x6732e
        g6 = v2;
        g10 = v3;
        g8 = v1;
        return result;
    }
    // 0x67340
    int32_t v4; // bp-808
    int32_t v5 = &v4; // 0x67340
    g10 = v5;
    int32_t v6; // bp-548
    int32_t v7 = &v6; // 0x6734a
    g8 = v7;
    g4 = function_2d970(&v4, a2, (int32_t)&g19);
    g4 = function_2ee80(v5, 47);
    g4 = function_2ecd0(&v4, &v6, (int32_t *)&g19);
    int32_t v8 = function_2cb40(v7); // 0x67387
    int32_t v9 = g10; // 0x67394
    int32_t v10; // bp-288
    g4 = &v10;
    g10 = 0;
    g4 = function_2d970(&v10, v9 + v8, (int32_t)&g19);
    int32_t v11 = g6 + 56; // 0x673aa
    g7 = v11;
    int32_t v12 = *(int32_t *)v11 & (int32_t)&g15; // 0x673b0
    g4 = v12;
    int32_t result2; // 0x673b5
    if (v12 == 0) {
        // bb
        result2 = function_67468();
        g4 = result2;
    } else {
        result2 = v12;
    }
    // 0x673bb
    return result2;
}

// Address range: 0x673c2 - 0x67465
int32_t function_673c2(void) {
    int32_t * v1 = (int32_t *)(g7 - 0x76fbdb84); // 0x673c2
    *v1 = *v1 - 1;
    int32_t v2 = g4; // 0x673c8
    bool v3; // cf
    unsigned char v4 = v3 ? 37 : 36; // 0x673c8
    g4 = (int32_t)((char)v2 - v4) | v2 & -256;
    int32_t v5 = function_69b70((int32_t)&g870, (int32_t)&g870); // 0x673ca
    g9 = v5;
    g10 = g10 & -0x10000 | v5 & (int32_t)&g863;
    int32_t v6 = g5; // 0x673d7
    g4 = v6 - 284;
    *(int32_t *)(v6 - 812) = v5;
    g10 &= (int32_t)&g863;
    int32_t v7 = function_69b70(g6, g4); // 0x673ed
    g4 = v7;
    int32_t v8 = *(int32_t *)(g5 - 812); // 0x673f2
    g9 = v8;
    int32_t v9 = 0x10000 * v7; // 0x673fa
    g7 = v9;
    g10 |= v9;
    if ((int16_t)v8 != 0) {
        // 0x67404
        if ((int16_t)v7 != 0) {
            // 0x67450
            *(int32_t *)(g6 + 60) = 0;
            g4 = g10;
            *(int32_t *)(g6 + 56) = 0;
            return g4;
        }
    }
    int32_t v10 = function_6a690(g6, g8); // 0x67410
    g10 = g10 & -0x10000 | v10 & (int32_t)&g863;
    int32_t v11 = g5 - 284; // 0x6741b
    g4 = v11;
    g4 = function_6a690(g6, v11);
    *(int32_t *)(g6 + 60) = 0;
    g9 = g4;
    g4 = g10;
    *(int32_t *)(g6 + 56) = 0;
    int32_t v12 = 0x10000 * g9; // 0x6743c
    g9 = v12;
    int32_t result = g4 & (int32_t)&g863 | v12; // 0x67444
    g4 = result;
    return result;
}

// Address range: 0x67468 - 0x67477
int32_t function_67468(void) {
    // 0x67468
    g9 = &g15;
    int32_t result = g7; // 0x6746d
    int32_t v1 = g4 == result ? (int32_t)&g15 : result; // 0x6746d
    *(int32_t *)result = v1;
    g4 = result;
    return result;
}

// Address range: 0x6747c - 0x67484
int32_t function_6747c(void) {
    // 0x6747c
    *(int32_t *)(g6 + 60) = g4;
    return g4;
}

// Address range: 0x674bf - 0x674c0
int32_t function_674bf(void) {
    // 0x674bf
    return g4;
}

// Address range: 0x674c9 - 0x6755a
int32_t function_674c9(void) {
    int32_t v1 = g8; // 0x674c9
    *(int32_t *)v1 = v1 - 1;
    int32_t v2 = g6 & -0xff01 | (int32_t)&g107; // 0x674cb
    g6 = v2;
    int32_t v3 = function_69d40(v2, g4); // 0x674d4
    g4 = v3;
    int32_t v4; // ebp
    *(int32_t *)(v4 - 28) = v3;
    int32_t v5 = (int32_t)*(int16_t *)(g10 + 2); // 0x674dc
    g4 = v5;
    int32_t v6 = function_69d40(g6, v5); // 0x674e7
    g4 = v6;
    g10 = v6;
    int32_t * v7 = (int32_t *)(g6 + 56); // 0x674ee
    *v7 = *v7 - 1;
    if (v6 != 0) {
        int32_t * v8 = (int32_t *)(v4 - 28); // 0x67510
        int32_t v9 = *v8; // 0x67510
        g7 = v9;
        if (v9 != 0) {
            int32_t v10 = *(int32_t *)(v4 + 20); // 0x67517
            g4 = v10;
            int32_t v11 = *v8; // 0x67521
            g4 = v11;
            g4 = function_2d970((int32_t *)g8, v11, v10);
            int32_t v12 = *(int32_t *)(g5 + 20); // 0x6752d
            g4 = v12;
            g4 = function_2db40(g8, g10, v12);
            g6 = *(int32_t *)(g5 - 12);
            g4 = 1;
            g10 = *(int32_t *)(g5 - 8);
            g8 = *(int32_t *)(g5 - 4);
            return 1;
        }
    }
    // 0x674f7
    g4 = 0;
    g6 = *(int32_t *)(v4 - 12);
    g10 = *(int32_t *)(v4 - 8);
    g8 = *(int32_t *)(v4 - 4);
    return 0;
}

// Address range: 0x67560 - 0x6757b
int32_t function_67560(void) {
    int32_t * v1 = (int32_t *)(g6 + 56); // 0x67560
    int32_t v2 = *v1 & (int32_t)&g863; // 0x67563
    g4 = v2;
    int32_t v3 = v2 | 1; // 0x67568
    g9 = v3;
    int32_t v4 = *v1; // 0x6756b
    *v1 = v2 == v4 ? v3 : v4;
    g4 = v4;
    int32_t result = function_674bf(); // 0x67576
    g4 = result;
    return result;
}

// Address range: 0x67580 - 0x67589
int32_t function_67580(void) {
    int32_t result = function_6a820((int32_t)&g870); // 0x67584
    g4 = result;
    return result;
}

// Address range: 0x675a4 - 0x675a5
int32_t function_675a4(void) {
    // 0x675a4
    return g4;
}

// Address range: 0x675ae - 0x675c2
int32_t function_675ae(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g7 - 0x5617dbe4); // 0x675ae
    uint32_t v2 = *v1; // 0x675ae
    *v1 = v2 - 1;
    int32_t v3 = g4; // 0x675b4
    unsigned char v4 = (char)v3; // 0x675b4
    bool v5; // cf
    bool v6 = v5 | v4 > 153; // 0x675b4
    int32_t v7;
    if (v2 % 16 > 16 || (v4 & 14) > 9) {
        // bb
        v7 = (v6 ? 102 : 6) + v3 & 255 | v3 & -256;
    } else {
        // bb233
        v7 = (v6 ? v3 + 96 : v3) & 255 | v3 & -256;
    }
    // bb234
    g4 = v7;
    char * v8 = (char *)v7; // 0x675b5
    *v8 = *v8 + (char)v7;
    int32_t * v9 = (int32_t *)(g6 + 56); // 0x675b7
    *v9 = *v9 - 1;
    g6 = a1;
    return g4;
}

// Address range: 0x675c8 - 0x675dc
int32_t function_675c8(void) {
    int32_t * v1 = (int32_t *)(g6 + 56); // 0x675c8
    int32_t v2 = *v1 & (int32_t)&g863; // 0x675cb
    g4 = v2;
    int32_t v3 = v2 | 1; // 0x675d0
    g9 = v3;
    int32_t v4 = *v1; // 0x675d3
    *v1 = v2 == v4 ? v3 : v4;
    g4 = v4;
    int32_t result = function_675a4(); // 0x675da
    g4 = result;
    return result;
}

// Address range: 0x675f4 - 0x675f5
int32_t function_675f4(void) {
    // 0x675f4
    return g4;
}

// Address range: 0x675fe - 0x67619
int32_t function_675fe(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x1c890c45); // 0x675fe
    *v1 = *v1 - 1;
    g4 &= -256;
    g4 = function_69dd0((int32_t)&g870, (int32_t)&g870);
    int32_t * v2 = (int32_t *)(g6 + 56); // 0x6760e
    *v2 = *v2 - 1;
    g6 = a1;
    return g4;
}

// Address range: 0x67620 - 0x67634
int32_t function_67620(void) {
    int32_t * v1 = (int32_t *)(g6 + 56); // 0x67620
    int32_t v2 = *v1 & (int32_t)&g863; // 0x67623
    g4 = v2;
    int32_t v3 = v2 | 1; // 0x67628
    g9 = v3;
    int32_t v4 = *v1; // 0x6762b
    *v1 = v2 == v4 ? v3 : v4;
    g4 = v4;
    int32_t result = function_675f4(); // 0x67632
    g4 = result;
    return result;
}

// Address range: 0x6765e - 0x67682
int32_t function_6765e(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x1c890c45); // 0x6765e
    *v1 = *v1 - 1;
    g4 &= -256;
    g4 = function_6aab0((int32_t)&g870, (int32_t)&g870);
    *(int32_t *)(g6 + 60) = 0;
    *(int32_t *)(g6 + 56) = 0;
    g6 = a1;
    return g4;
}

// Address range: 0x67698 - 0x6769d
int32_t function_67698(void) {
    // 0x67698
    *(int32_t *)(g6 + 60) = g4;
    return g4;
}

// Address range: 0x676c0 - 0x676c3
int32_t function_676c0(void) {
    // 0x676c0
    g7 = *(int32_t *)(g10 + 36);
    return g4;
}

// Address range: 0x676f0 - 0x67718
int32_t function_676f0(int32_t a1, int32_t a2, int32_t a3, uint32_t a4) {
    // 0x676f0
    g6 = a1;
    g7 = a3;
    g4 = a2;
    g9 = a4 % 256;
    *(int32_t *)(a1 + 4) = 0;
    *(int32_t *)(g6 + 8) = a3;
    *(int32_t *)(g6 + 12) = g4;
    g4 = 0;
    return 0;
}

// Address range: 0x67718 - 0x67760
int32_t function_67718(int32_t a1, int32_t a2, int32_t a3) {
    // 0x67718
    *(int16_t *)(g6 + 16) = (int16_t)&g863;
    *(int16_t *)(g6 + 18) = 0;
    *(int16_t *)(g6 + 20) = (int16_t)&g863;
    *(int16_t *)(g6 + 22) = (int16_t)&g863;
    *(int32_t *)(g6 + 24) = g4;
    *(char *)(g6 + 28) = (char)g9;
    *(int32_t *)(g6 + 36) = 0;
    *(int32_t *)(g6 + 40) = 0;
    *(int32_t *)(g6 + 44) = 8;
    *(int32_t *)(g6 + 48) = 0;
    *(int32_t *)(g6 + 52) = 0;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x67760 - 0x67761
int32_t function_67760(void) {
    // 0x67760
    return g4;
}

// Address range: 0x67790 - 0x67791
int32_t function_67790(int32_t a1) {
    // 0x67790
    return g4;
}

// Address range: 0x67817 - 0x6781e
int32_t function_67817(void) {
    // 0x67817
    *(int32_t *)(g6 + 8) = 0;
    return g4;
}

// Address range: 0x6781e - 0x67825
int32_t function_6781e(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6781e
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x6787f - 0x6788e
int32_t function_6787f(void) {
    // 0x6787f
    g10 = g4;
    int32_t v1 = g6 + 36; // 0x67881
    g4 = v1;
    int32_t result = function_67f10(v1); // 0x67887
    g4 = result;
    return result;
}

// Address range: 0x678c0 - 0x678c1
int32_t function_678c0(void) {
    // 0x678c0
    return g4;
}

// Address range: 0x678ce - 0x6792f
int32_t function_678ce(void) {
    char v1 = __asm_in_1653((int16_t)g9); // 0x678d4
    int32_t v2 = g4 & -256 | (int32_t)v1; // 0x678d4
    g4 = v2;
    char * v3 = (char *)v2; // 0x678db
    char v4 = *v3 + v1; // 0x678db
    *v3 = v4;
    int32_t v5; // ebp
    *(int32_t *)(v5 - 12) = g6;
    *(int32_t *)(v5 - 8) = g10;
    *(int32_t *)(v5 - 4) = g8;
    if (v4 != 0) {
        // 0x678e8
        g6 = *(int32_t *)(v5 - 12);
        g10 = *(int32_t *)(v5 - 8);
        g8 = *(int32_t *)(v5 - 4);
        return g4;
    }
    int32_t v6 = function_1bc00((int32_t)(bool)&g25); // 0x678ff
    g4 = v6;
    g6 = v6;
    int32_t result = function_676f0((int32_t)(v6 % 2 != 0), 0, 32, 0); // 0x67921
    g4 = result;
    int32_t v7 = g6; // 0x67926
    g10 = v7 + 80;
    g8 = v7 + 56;
    return result;
}

// Address range: 0x67978 - 0x679b1
int32_t function_67978(void) {
    // 0x67978
    g8++;
    int32_t v1 = g4; // 0x6797e
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g4; // 0x67980
    *(char *)v2 = (char)v2 + *(char *)&g4;
    int32_t v3 = g6; // 0x67982
    int32_t v4 = g4; // 0x67982
    g6 = 256 * v4 + v3 & 0xff00 | v3 & -0xff01;
    *(int32_t *)v4 = v4 | 1;
    int32_t v5 = g4; // 0x67987
    *(char *)v5 = (char)v5 + *(char *)&g4;
    int32_t v6 = g4; // 0x67989
    *(char *)v6 = (char)v6 + *(char *)&g4;
    int32_t v7 = g4; // 0x6798b
    *(char *)v7 = (char)v7 + *(char *)&g4;
    *(int32_t *)(g6 + (int32_t)&g24) = 0;
    g713 = g6;
    int32_t v8; // ebp
    g10 = *(int32_t *)(v8 - 8);
    g6 = *(int32_t *)(v8 - 12);
    *(char *)&g714 = 1;
    g8 = *(int32_t *)(v8 - 4);
    return g4;
}

// Address range: 0x679b3 - 0x679b4
int32_t function_679b3(void) {
    // 0x679b3
    return g4;
}

// Address range: 0x679c5 - 0x679c6
int32_t function_679c5(void) {
    // 0x679c5
    return g4;
}

// Address range: 0x679cd - 0x679d7
int32_t function_679cd(void) {
    // 0x679cd
    g4 = function_67790(g6);
    int32_t result = function_679b3(); // 0x679d5
    g4 = result;
    return result;
}

// Address range: 0x679e1 - 0x679e9
int32_t function_679e1(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x39761bbb); // 0x679e1
    *v1 = *v1 - 1;
    int32_t result = function_679c5(); // 0x679e7
    g4 = result;
    return result;
}

// Address range: 0x679f0 - 0x67a02
int32_t function_679f0(void) {
    // 0x679f0
    g4 = g713;
    return g713;
}

// Address range: 0x67a10 - 0x67a56
int32_t function_67a10(int32_t a1) {
    int32_t v1 = g6; // 0x67a13
    g4 = a1;
    uint16_t v2 = *(int16_t *)a1; // 0x67a1a
    int32_t v3 = v2; // 0x67a1a
    g6 = v3;
    g9 = g713;
    g4 = (int32_t)&g129;
    int32_t result; // 0x67a4d
    if (v2 != -1) {
        int32_t v4 = *(int32_t *)(g713 + 4); // 0x67a33
        g7 = v4;
        int32_t v5 = v3 & (int32_t)&g863; // 0x67a36
        g6 = v5;
        g4 = 3 * v5;
        int32_t v6 = *(int32_t *)(g713 + 36); // 0x67a3c
        g9 = v6;
        int32_t v7 = v4 + 12 * v5; // 0x67a3f
        g4 = v7;
        int32_t v8 = (int32_t)*(int16_t *)(v7 + 8); // 0x67a42
        g7 = v8;
        int32_t v9 = (int32_t)*(int16_t *)(v7 + 10); // 0x67a46
        g4 = v9;
        result = *(int32_t *)(4 * v8 + v6) + v9 + 10;
        g4 = result;
    } else {
        result = (int32_t)&g129;
    }
    // 0x67a50
    g6 = v1;
    return result;
}

// Address range: 0x67a81 - 0x67a84
int32_t function_67a81(void) {
    // 0x67a81
    return g4;
}

// Address range: 0x67ab4 - 0x67ab7
int32_t function_67ab4(void) {
    // 0x67ab4
    return g4;
}

// Address range: 0x67aff - 0x67b00
int32_t function_67aff(void) {
    // 0x67aff
    return g4;
}

// Address range: 0x67b06 - 0x67b16
int32_t function_67b06(void) {
    int32_t * v1 = (int32_t *)(g7 - 0xba27408); // 0x67b06
    *v1 = *v1 - 1;
    int32_t v2; // ebp
    g10 = *(int32_t *)(v2 - 8);
    g8 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x67b21 - 0x67b22
int32_t function_67b21(void) {
    // 0x67b21
    return g4;
}

// Address range: 0x67b2b - 0x67b2d
int32_t function_67b2b(void) {
    int32_t result = function_67aff(); // 0x67b2b
    g4 = result;
    return result;
}

// Address range: 0x67b57 - 0x67b5f
int32_t function_67b57(void) {
    // 0x67b57
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x3f6bf040); // 0x67b57
    *v2 = *v2 + 1;
    return g4;
}

// Address range: 0x67b74 - 0x67b77
int32_t function_67b74(void) {
    // 0x67b74
    return g4;
}

// Address range: 0x67ba2 - 0x67bad
int32_t function_67ba2(void) {
    int32_t * v1 = (int32_t *)(g6 + 0x758bf85d); // 0x67ba2
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x67bb0 - 0x67bb9
int32_t function_67bb0(int32_t * a1, int32_t a2, int32_t a3) {
    // 0x67bb0
    return g4;
}

// Address range: 0x67bd6 - 0x67bd7
int32_t function_67bd6(void) {
    // 0x67bd6
    return g4;
}

// Address range: 0x67bdd - 0x67c1a
int32_t function_67bdd(void) {
    int32_t v1 = *(int32_t *)(g5 + 16); // 0x67bdd
    g4 = v1;
    int32_t v2; // 0x67bf5
    if (v1 == 0) {
        // bb
        g4 = function_67d60();
        v2 = g5;
    } else {
        v2 = g5;
    }
    int32_t v3 = *(int32_t *)(v2 + 16); // 0x67be8
    g9 = v3;
    int32_t v4 = v2 - 28; // 0x67beb
    g4 = v4;
    int32_t v5 = *(int32_t *)(v2 + 12); // 0x67bf5
    g9 = v5;
    g4 = function_66ee0(v4, v5, v3);
    uint16_t v6 = *(int16_t *)(g5 - 28); // 0x67c01
    int32_t v7 = v6; // 0x67c01
    g4 = v7;
    int32_t v8; // 0x67c0c
    if (v6 == -1) {
        // bb235
        v8 = function_67c50();
        g4 = v8;
    } else {
        v8 = v7;
    }
    int32_t v9 = *(int32_t *)(g5 + 8); // 0x67c0e
    g9 = v9;
    *(int16_t *)v9 = (int16_t)v8;
    int32_t result; // 0x67c18
    if (*(char *)(g5 - 25) == 0) {
        // bb236
        result = function_67c40();
        g4 = result;
    } else {
        // 0x67c0e
        result = g4;
    }
    // 0x67c1a
    return result;
}

// Address range: 0x67c39 - 0x67c3a
int32_t function_67c39(void) {
    // 0x67c39
    return g4;
}

// Address range: 0x67c40 - 0x67c4d
int32_t function_67c40(void) {
    int32_t result = *(int32_t *)(g5 + 8); // 0x67c40
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x67c50 - 0x67c56
int32_t function_67c50(void) {
    int32_t result = *(int32_t *)(g5 + 16); // 0x67c50
    g4 = result;
    return result;
}

// Address range: 0x67c5a - 0x67cb0
int32_t function_67c5a(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3976f3ab); // 0x67c5a
    *v1 = *v1 - 1;
    *(int32_t *)(g5 - 44) = g4;
    int32_t v2 = g10 + 4 & -2; // 0x67c66
    g10 = v2;
    int32_t v3 = g9; // 0x67c69
    int32_t v4 = *(int32_t *)(v3 + 48); // 0x67c69
    g7 = v4;
    uint32_t v5; // 0x67c9f
    int32_t v6; // 0x67cad
    if (v4 < 1) {
        // 0x67c9f
        v5 = v2 + 12;
        g4 = &g148;
        v6 = v5 < (int32_t)&g148 ? (int32_t)&g148 : v5;
        g6 = v6;
        return &g148;
    }
    int32_t v7 = *(int32_t *)(v3 + 36); // 0x67c70
    g8 = v7;
    g6 = 0;
    int32_t result = *(int32_t *)v7; // 0x67c75
    g4 = result;
    int32_t v8 = *(int32_t *)result; // 0x67c77
    g9 = v8;
    int32_t v9 = v8 - *(int32_t *)(result + 4); // 0x67c79
    g9 = v9;
    if (v2 <= v9) {
        // 0x67c80
        return result;
    }
    int32_t v10 = 0; // 0x67c98
    while (true) {
        int32_t v11 = v10 + 1; // 0x67c98
        g6 = v11;
        if (v11 == v4) {
            // break -> 0x67c9f
            break;
        }
        int32_t v12 = *(int32_t *)(g8 + 4 * v11); // 0x67c88
        g9 = v12;
        int32_t v13 = *(int32_t *)v12; // 0x67c8b
        g4 = v13;
        int32_t v14 = v13 - *(int32_t *)(v12 + 4); // 0x67c8d
        g4 = v14;
        if (g10 <= v14) {
            // bb
            g4 = function_67e10();
            v10 = g6;
        } else {
            v10 = v11;
        }
    }
    // 0x67c9f
    v5 = g10 + 12;
    g4 = &g148;
    v6 = v5 < (int32_t)&g148 ? (int32_t)&g148 : v5;
    g6 = v6;
    return &g148;
}

// Address range: 0x67d39 - 0x67d5f
int32_t function_67d39(int32_t a1) {
    // 0x67d39
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x76991fbb); // 0x67d39
    int32_t v3 = *v2 - 1; // 0x67d39
    *v2 = v3;
    g5 = a1;
    int32_t v4 = g7 - 1; // 0x67d40
    g7 = v4;
    int32_t result = g4; // 0x67d40
    if (v3 == 0 || v4 == 0) {
        // 0x67d42
        return result;
    }
    // 0x67d43
    g4 = result + 1 & 4 | result & -256;
    int32_t v5 = *(int32_t *)(a1 - 48); // 0x67d48
    g9 = v5;
    *(int16_t *)(a1 - 30) = (int16_t)v5;
    int32_t v6 = *(int32_t *)(g5 + 12); // 0x67d4f
    g9 = v6;
    int32_t result2 = function_69870(v6, (int32_t)&g870); // 0x67d55
    g4 = result2;
    return result2;
}

// Address range: 0x67d60 - 0x67d6d
int32_t function_67d60(void) {
    int32_t v1 = *(int32_t *)(g5 + 8); // 0x67d60
    g4 = v1;
    *(int16_t *)v1 = (int16_t)&g863;
    return g4;
}

// Address range: 0x67d70 - 0x67d7d
int32_t function_67d70(void) {
    int32_t v1 = *(int32_t *)(g5 + 16); // 0x67d70
    g9 = v1;
    int32_t result = function_34f10(v1); // 0x67d76
    g4 = result;
    return result;
}

// Address range: 0x67dba - 0x67dbd
int32_t function_67dba(void) {
    // 0x67dba
    return g4;
}

// Address range: 0x67dee - 0x67def
int32_t function_67dee(void) {
    // 0x67dee
    return g4;
}

// Address range: 0x67e10 - 0x67e2b
int32_t function_67e10(void) {
    // 0x67e10
    g4 = *(int32_t *)(g5 + 12);
    int32_t result = function_67d70(); // 0x67e26
    g4 = result;
    return result;
}

// Address range: 0x67e2c - 0x67e2d
int32_t function_67e2c(void) {
    // 0x67e2c
    return g4;
}

// Address range: 0x67e54 - 0x67e57
int32_t function_67e54(void) {
    // 0x67e54
    return g4;
}

// Address range: 0x67e82 - 0x67e97
int32_t function_67e82(void) {
    int32_t v1 = g8; // 0x67e82
    *(int32_t *)v1 = v1 - 1;
    g6 = g6 & -0xff01 | (int32_t)&g104;
    int32_t v2; // ebp
    g6 = *(int32_t *)(v2 - 8);
    g10 = *(int32_t *)(v2 - 4);
    return g4;
}

// Address range: 0x67ea0 - 0x67eaf
int32_t function_67ea0(int32_t a1) {
    // 0x67ea0
    g4 = a1;
    int32_t result; // 0x67ead
    if (*(char *)a1 == 0) {
        // bb
        result = function_67ed0((int32_t)&g870, (int32_t)&g870);
        g4 = result;
    } else {
        result = a1;
    }
    // 0x67eaf
    return result;
}

// Address range: 0x67ecd - 0x67ece
int32_t function_67ecd(void) {
    // 0x67ecd
    return g4;
}

// Address range: 0x67ed0 - 0x67ed6
int32_t function_67ed0(int32_t a1, int32_t a2) {
    // 0x67ed0
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x67efe - 0x67eff
int32_t function_67efe(void) {
    // 0x67efe
    return g4;
}

// Address range: 0x67f10 - 0x67f27
int32_t function_67f10(int32_t a1) {
    // 0x67f10
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x67f1a
    g4 = v1;
    int32_t v2; // 0x67f21
    if (v1 < 0) {
        // bb
        g4 = function_67f46((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x67f21
    g4 = v3;
    int32_t result; // 0x67f25
    if (v3 == 0) {
        // bb7
        result = function_67f3f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x67f27
    return result;
}

// Address range: 0x67f3f - 0x67f46
int32_t function_67f3f(void) {
    // 0x67f3f
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x67f46 - 0x67f4c
int32_t function_67f46(int32_t a1, int32_t a2) {
    // 0x67f46
    g6 = a1;
    return g4;
}

// Address range: 0x67f50 - 0x67ffa
int32_t function_67f50(int32_t a1) {
    int32_t v1 = g5; // 0x67f50
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x67f53
    int32_t v4 = g10; // 0x67f54
    int32_t v5 = g6; // 0x67f55
    g10 = a1;
    uint16_t v6 = *(int16_t *)(a1 + 22); // 0x67f5c
    int32_t v7 = v6; // 0x67f5c
    g7 = v7;
    if (v6 != -1) {
        int32_t result = *(int32_t *)(a1 + 8); // 0x67f66
        g4 = result;
        int32_t v8; // 0x67f95
        if (result >= 1) {
            // 0x67f6d
            g9 = 0;
            g8 = 0;
            int32_t v9 = 0; // 0x67fcc
            int32_t v10 = a1; // 0x67fd3
            int32_t v11 = 0; // 0x67fce
            int32_t v12; // 0x67f88
            while (true) {
                // 0x67f78
                g6 = v11;
                int32_t v13; // 0x67f83
                int32_t v14; // 0x67f8b
                if (v11 < result) {
                    uint16_t v15 = (int16_t)v11; // 0x67f7e
                    if (v15 <= (int16_t)v7) {
                        if (g715 == 0) {
                            // 0x67ff0
                            return result;
                        }
                        int32_t v16 = *(int32_t *)(v10 + 4) + v9; // 0x67fcc
                        g7 = v16;
                        int32_t v17; // 0x67fe6
                        int32_t v18;
                        if (v15 != *(int16_t *)v16) {
                            uint16_t v19 = *(int16_t *)(v10 + 20); // 0x67fd3
                            g4 = v19;
                            *(int16_t *)(v16 + 2) = v19;
                            int32_t v20 = *(int32_t *)(g10 + 4); // 0x67fdb
                            g4 = v20;
                            *(int16_t *)(g9 + v20) = (int16_t)g6;
                            *(int16_t *)(g10 + 20) = (int16_t)g6;
                            v18 = g6;
                            v17 = g10;
                        } else {
                            v18 = v11;
                            v17 = v10;
                        }
                        int32_t v21 = (int32_t)*(int16_t *)(v17 + 22); // 0x67fe6
                        g7 = v21;
                        v12 = v17;
                        v14 = v18;
                        v13 = v21;
                    } else {
                        v12 = v10;
                        v14 = v11;
                        v13 = v7;
                    }
                } else {
                    v12 = v10;
                    v14 = v11;
                    v13 = v7;
                }
                if ((int16_t)v13 == (int16_t)v14) {
                    // break -> 0x67f95
                    break;
                }
                int32_t v22 = *(int32_t *)(v12 + 8); // 0x67f88
                g4 = v22;
                int32_t v23 = v14 + 1 & (int32_t)&g863; // 0x67f8e
                g6 = v23;
                if (v23 >= v22) {
                    // break -> 0x67f95
                    break;
                }
                int32_t v24 = g8 + 1; // 0x67fb0
                g8 = v24;
                int32_t v25 = g9 + 12; // 0x67fb3
                g9 = v25;
                if (v24 == (int32_t)&g863) {
                    // break -> 0x67f95
                    break;
                }
                v9 = v25;
                v10 = v12;
                v7 = v13;
                result = v22;
                v11 = v24;
            }
            v8 = v12;
        } else {
            v8 = a1;
        }
        // 0x67f95
        *(int16_t *)(v8 + 16) = (int16_t)&g863;
        *(int16_t *)(g10 + 18) = 0;
    } else {
        v2 = v1;
    }
    // 0x67fa1
    g6 = v5;
    g10 = v4;
    g8 = v3;
    g5 = v2;
    return g4;
}

// Address range: 0x68005 - 0x68006
int32_t function_68005(void) {
    // 0x68005
    return g4;
}

// Address range: 0x68009 - 0x6800c
int32_t function_68009(void) {
    // 0x68009
    return g4;
}

// Address range: 0x6800c - 0x68011
int32_t function_6800c(void) {
    uint32_t v1 = g6; // 0x6800c
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68012 - 0x6801a
int32_t function_68012(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68012
    g4 = result;
    uint32_t v1 = g6; // 0x68015
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6801e - 0x68028
int32_t function_6801e(void) {
    int32_t v1 = g6; // 0x6801e
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x68022
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x68024
    g4 = result;
    return result;
}

// Address range: 0x6802d - 0x68032
int32_t function_6802d(void) {
    // 0x6802d
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x68040 - 0x68066
int32_t function_68040(int32_t a1) {
    // 0x68040
    g6 = a1;
    g4 = function_67f50(a1);
    int32_t v1 = g6; // 0x68052
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x68052
    g4 = v2;
    *(int16_t *)(v1 + 20) = (int16_t)&g863;
    if (v2 < 0) {
        // bb
        g4 = function_68086((int32_t)&g870, (int32_t)&g870);
    }
    int32_t v3 = *(int32_t *)(g6 + 4); // 0x6805f
    g4 = v3;
    int32_t result; // 0x68064
    if (v3 == 0) {
        // bb7
        result = function_6807f();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x68066
    return result;
}

// Address range: 0x6807f - 0x68086
int32_t function_6807f(void) {
    // 0x6807f
    *(int32_t *)(g6 + 8) = 0;
    return g4;
}

// Address range: 0x68086 - 0x68092
int32_t function_68086(int32_t a1, int32_t a2) {
    // 0x68086
    *(int16_t *)(g6 + 22) = (int16_t)&g863;
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x680a0 - 0x680c5
int32_t function_680a0(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    g6 = a1;
    g4 = function_68040(a1);
    int32_t v2 = g6; // 0x680b7
    int32_t v3 = *(int32_t *)(v2 + 12); // 0x680b7
    g4 = v3;
    int32_t v4; // 0x680be
    if (v3 < 0) {
        // bb
        g4 = function_680e5();
        v4 = g6;
    } else {
        v4 = v2;
    }
    int32_t v5 = *(int32_t *)(v4 + 4); // 0x680be
    g4 = v5;
    int32_t result; // 0x680c3
    if (v5 == 0) {
        // bb235
        result = function_680de();
        g4 = result;
    } else {
        result = v5;
    }
    // 0x680c5
    return result;
}

// Address range: 0x680de - 0x680e5
int32_t function_680de(void) {
    // 0x680de
    *(int32_t *)(g6 + 8) = 0;
    return g4;
}

// Address range: 0x680e5 - 0x680ef
int32_t function_680e5(void) {
    // 0x680e5
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x6817a - 0x6818e
int32_t function_6817a(void) {
    // 0x6817a
    g713 = 0;
    int32_t v1; // ebp
    g6 = *(int32_t *)(v1 - 8);
    g10 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x6819b - 0x6819c
int32_t function_6819b(void) {
    // 0x6819b
    return g4;
}

// Address range: 0x681a6 - 0x681ba
int32_t function_681a6(void) {
    // 0x681a6
    g4 = function_67790(g6);
    int32_t v1 = function_7ab57(g10, (int32_t)&g870); // 0x681b1
    g4 = v1;
    g10 = v1;
    int32_t result = function_6819b(); // 0x681b8
    g4 = result;
    return result;
}

// Address range: 0x681c0 - 0x68210
int32_t function_681c0(int32_t a1, int32_t a2) {
    // 0x681c0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x681cb
    int64_t v2 = v1; // 0x681cb
    g10 = v1;
    int32_t v3; // 0x681d2
    if (v1 < 0) {
        int32_t v4 = function_6822b((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x681d0
        g4 = v4;
        v3 = g6;
    } else {
        v3 = a1;
    }
    int32_t v5 = *(int32_t *)(v3 + 4); // 0x681d2
    g4 = v5;
    int32_t v6 = v5 + a2; // 0x681d8
    g7 = v6;
    int32_t v7; // 0x681f8
    if (v1 == 0) {
        // bb21
        g4 = function_68238();
        v7 = g7;
    } else {
        v7 = v6;
    }
    int32_t v8 = v7 - 1; // 0x681de
    int64_t v9 = 0x100000000 * (int64_t)(v8 >> 31) | (int64_t)v8; // 0x681e6
    g9 = v9 % v2;
    int32_t v10 = ((int32_t)(v9 / v2) + 1) * v1; // 0x681eb
    g4 = v10;
    int32_t v11; // 0x68209
    if (v7 > v10) {
        // 0x681f2
        g10 = v1;
        int32_t v12 = v10 + v7; // 0x681f8
        int32_t v13 = v12 < 0; // 0x681fc
        int32_t v14 = (v13 + v12) / 2; // 0x68201
        while (v7 > v14) {
            // 0x681f8
            v12 = v14 + v7;
            v13 = v12 < 0;
            v14 = (v13 + v12) / 2;
        }
        // 0x68207
        g4 = v14;
        g9 = v13;
        v11 = v14;
    } else {
        v11 = v10;
    }
    int32_t v15 = g6; // 0x68207
    int32_t v16 = *(int32_t *)v15; // 0x68207
    g9 = v16;
    *(int32_t *)(v15 + 4) = v11;
    int32_t result; // 0x6820e
    if (v16 == 0) {
        // bb22
        result = function_6825f();
        g4 = result;
    } else {
        // 0x68207
        result = g4;
    }
    // 0x68210
    return result;
}

// Address range: 0x6822b - 0x68232
int32_t function_6822b(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6822b
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x68238 - 0x6825f
int32_t function_68238(void) {
    int32_t v1 = g4; // 0x68238
    g9 = 8;
    int32_t v2 = v1 == 0 ? 8 : v1; // 0x6823f
    g4 = v2;
    int32_t v3 = 2 * v2; // 0x68250
    while (g7 > v3) {
        // 0x68250
        v3 *= 2;
    }
    // 0x68256
    g4 = v3;
    int32_t v4 = g6; // 0x68256
    g9 = v4;
    *(int32_t *)(v4 + 4) = v3;
    return g4;
}

// Address range: 0x6825f - 0x68260
int32_t function_6825f(void) {
    // 0x6825f
    return g4;
}

// Address range: 0x68280 - 0x68306
int32_t function_68280(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x68286
    g6 = a1;
    int32_t v2 = g10; // 0x6828c
    g10 = a2;
    int32_t v3 = g8; // 0x68292
    int32_t v4 = *(int32_t *)(a1 + 12); // 0x68295
    g4 = v4;
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x68298
    g9 = v5;
    int32_t v6; // 0x682a1
    int32_t v7; // 0x68301
    int32_t v8; // 0x68301
    if (v4 >= v5) {
        int32_t v9 = v4 + 1 - v5; // 0x682f6
        g4 = v9;
        g4 = function_681c0(a1, v9);
        v7 = g6;
        v8 = *(int32_t *)(v7 + 12);
        g4 = v8;
        v6 = g10;
    } else {
        v8 = v4;
        v6 = a2;
        v7 = a1;
    }
    // 0x6829f
    g9 = *(int32_t *)v7;
    g8 = 4 * v6;
    int32_t v10 = v8 + 1; // 0x682a8
    g4 = v10;
    *(int32_t *)(v7 + 12) = v10;
    int32_t v11 = g4 - g10 - 1; // 0x682b0
    g4 = v11;
    *(int32_t *)(g6 + 16) = g9;
    int32_t v12; // 0x682d6
    if (v11 < 1) {
        // 0x6829f
        v12 = g9;
    } else {
        int32_t v13 = g9; // 0x682c1
        int32_t v14 = v13 + 4 + 4 * g10; // 0x682c8
        g4 = v14;
        g4 = function_2cb20(v14, g8 + v13, 4 * v11);
        int32_t v15 = *(int32_t *)g6; // 0x682d4
        g9 = v15;
        v12 = v15;
    }
    int32_t v16 = g8 + v12; // 0x682d6
    g9 = v16;
    if (v16 != 0) {
        // 0x682da
        g4 = a3;
        int32_t v17 = *(int32_t *)a3; // 0x682dd
        g4 = v17;
        *(int32_t *)v16 = v17;
    }
    int32_t result = g10; // 0x682e1
    g4 = result;
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x68310 - 0x68361
int32_t function_68310(int32_t a1, int32_t a2) {
    // 0x68310
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6831b
    int64_t v2 = v1; // 0x6831b
    g10 = v1;
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x68322
    g4 = v3;
    int32_t v4 = v3 + a2; // 0x68328
    g7 = v4;
    int32_t v5; // 0x68341
    if (v1 == 0) {
        // bb
        g4 = function_68390();
        v5 = g7;
    } else {
        v5 = v4;
    }
    int32_t v6 = v5 - 1; // 0x6832e
    int64_t v7 = 0x100000000 * (int64_t)(v6 >> 31) | (int64_t)v6; // 0x68336
    g9 = v7 % v2;
    int32_t v8 = ((int32_t)(v7 / v2) + 1) * v1; // 0x6833b
    g4 = v8;
    int32_t v9 = v8 & (int32_t)&g863; // 0x6833e
    g10 = v9;
    int32_t v10; // 0x6835a
    if (v5 > v9) {
        int32_t v11; // 0x68348
        if ((int16_t)v8 != 0) {
            // bb22
            v11 = function_683b0();
            g4 = v11;
        } else {
            v11 = v8;
        }
        int32_t v12 = v11 - 1; // 0x6834a
        g4 = v12;
        v10 = v12;
    } else {
        v10 = v8;
    }
    int32_t v13 = g6; // 0x68358
    int32_t v14 = *(int32_t *)v13; // 0x68358
    g9 = v14;
    *(int32_t *)(v13 + 4) = v10;
    int32_t result; // 0x6835f
    if (v14 == 0) {
        // bb23
        result = function_683e0();
        g4 = result;
    } else {
        // 0x68358
        result = g4;
    }
    // 0x68361
    return result;
}

// Address range: 0x68390 - 0x683a8
int32_t function_68390(void) {
    int32_t v1 = g4; // 0x68390
    g9 = 3;
    int32_t v2 = v1 == 0 ? 3 : v1; // 0x68397
    g4 = v2;
    int32_t result = 2 * v2; // 0x683a0
    while (g7 > result) {
        // 0x683a0
        result *= 2;
    }
    // 0x683a6
    g4 = result;
    return result;
}

// Address range: 0x683b0 - 0x683e0
int32_t function_683b0(void) {
    int32_t v1 = g7 & (int32_t)&g863; // 0x683b0
    g9 = v1;
    int32_t v2 = g4 + v1; // 0x683c0
    int32_t v3 = ((int32_t)(v2 < 0) + v2) / 2; // 0x683c9
    int32_t v4 = v3 & (int32_t)&g863; // 0x683cb
    while (v1 > v4) {
        // 0x683c0
        v2 = v3 + v1;
        v3 = ((int32_t)(v2 < 0) + v2) / 2;
        v4 = v3 & (int32_t)&g863;
    }
    // 0x683d2
    g4 = v3;
    g7 = v4;
    int32_t v5 = g6; // 0x683d2
    g9 = v5;
    *(int32_t *)(v5 + 4) = v3;
    return g4;
}

// Address range: 0x683e0 - 0x683e1
int32_t function_683e0(void) {
    // 0x683e0
    return g4;
}

// Address range: 0x68400 - 0x684b5
int32_t function_68400(int32_t a1) {
    int32_t v1 = g6; // 0x68406
    g6 = a1;
    int32_t v2 = g10; // 0x6840c
    uint16_t v3 = *(int16_t *)(a1 + 20); // 0x6840f
    int32_t v4 = v3; // 0x6840f
    g4 = v4;
    if (v3 != -1) {
        int32_t v5 = *(int32_t *)(a1 + 4); // 0x68419
        g9 = v5;
        int32_t v6 = v4 & (int32_t)&g863; // 0x6841c
        g7 = 3 * v6;
        g7 = (int32_t)*(int16_t *)((12 * v6 | 2) + v5);
        *(int32_t *)(a1 + 24) = v5;
        *(int16_t *)(g6 + 20) = (int16_t)g7;
        g6 = v1;
        g10 = v2;
        return g4;
    }
    int32_t v7 = (int32_t)*(int16_t *)(a1 + 22); // 0x68440
    g7 = v7;
    int32_t v8 = *(int32_t *)(a1 + 8); // 0x68444
    g9 = v8;
    int32_t v9 = v7 & (int32_t)&g863; // 0x68447
    g10 = v9;
    if (v9 < v8) {
        // bb
        g4 = function_684d8();
    }
    int32_t v10 = v8 >= 0 == (v8 != 0) ? 0 : (int32_t)&g863; // 0x6845e
    g7 = v10;
    g4 = -1;
    if (v8 > v10) {
        // bb31
        g4 = function_684bd();
    }
    int32_t v11 = g6 + 4; // 0x6846e
    g4 = v11;
    g4 = function_68310(v11, 1);
    int32_t v12 = g6; // 0x68481
    int32_t v13 = (int32_t)*(int16_t *)(v12 + 22); // 0x68481
    g4 = v13;
    int32_t v14 = *(int32_t *)(v12 + 8); // 0x68485
    g9 = v14;
    int32_t v15 = v13 & (int32_t)&g863; // 0x68488
    g7 = v15;
    if (v15 < v14) {
        // bb32
        g4 = function_684f0();
    }
    int32_t v16 = v14 >= 0 == (v14 != 0) ? 0 : (int32_t)&g863; // 0x6849b
    g7 = v16;
    g4 = -1;
    int32_t result; // 0x684a9
    if (v14 > v16) {
        // bb33
        result = function_684bd();
        g4 = result;
    } else {
        result = -1;
    }
    // 0x684ab
    return result;
}

// Address range: 0x684bd - 0x684d1
int32_t function_684bd(void) {
    int32_t v1 = g6; // 0x684bd
    g9 = *(int32_t *)(v1 + 4);
    *(int16_t *)(v1 + 22) = (int16_t)g4;
    *(int32_t *)(g6 + 24) = g9;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x684d8 - 0x684f0
int32_t function_684d8(void) {
    int32_t v1 = g7 + 1; // 0x684d8
    int32_t v2 = v1 & (int32_t)&g863; // 0x684db
    g10 = v2;
    int32_t v3 = g9; // 0x684de
    int32_t v4 = v3 - v2; // 0x684de
    int32_t result = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v1 : g4; // 0x684e0
    g4 = result;
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v2 : (int32_t)&g863; // 0x684e8
    g7 = v5;
    return result;
}

// Address range: 0x684f0 - 0x6850a
int32_t function_684f0(void) {
    int32_t v1 = g4 + 1; // 0x684f0
    int32_t v2 = v1 & (int32_t)&g863; // 0x684f8
    g10 = v2;
    int32_t v3 = g9; // 0x684fb
    int32_t v4 = v3 - v2; // 0x684fb
    int32_t result = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v1 : -1; // 0x684fd
    g4 = result;
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v2 : (int32_t)&g863; // 0x68505
    g7 = v5;
    return result;
}

// Address range: 0x68510 - 0x686f7
int32_t function_68510(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x68513
    int32_t v2 = g10; // 0x68514
    int32_t v3 = g6; // 0x68515
    g4 = g715;
    g6 = a1;
    int32_t v4 = a2 % 0x10000; // 0x68523
    g10 = v4;
    int32_t v5; // 0x68547
    if (g715 == 0) {
        // bb
        g4 = function_68770();
        v5 = g10;
    } else {
        v5 = v4;
    }
    // 0x68532
    g7 = (int32_t)&g301;
    int32_t v6; // 0x6854d
    int32_t v7; // 0x68553
    if ((int16_t)v5 != -1) {
        // 0x68544
        v6 = 12 * (v5 & (int32_t)&g863);
        g9 = v6;
        v7 = *(int32_t *)(g6 + 4) + v6;
        g7 = v7;
    } else {
        v7 = (int32_t)&g301;
        v6 = 0xbfff4;
    }
    int32_t v8 = (int32_t)*(int16_t *)(v7 + 2); // 0x68559
    g8 = v8;
    int32_t v9; // 0x68563
    if (g715 == 0) {
        // bb37
        g4 = function_68730();
        v9 = g8;
    } else {
        v9 = v8;
    }
    int32_t v10 = *(int32_t *)(g6 + 4); // 0x68567
    g9 = v10;
    int32_t v11; // 0x68570
    int32_t v12; // 0x68588
    if ((int16_t)v9 == -1) {
        // bb38
        g4 = function_6875b();
        v12 = g9;
        v11 = g8;
    } else {
        v12 = v10;
        v11 = v9;
    }
    int32_t v13 = 12 * (v11 & (int32_t)&g863); // 0x68576
    int32_t v14 = v13 + v12; // 0x6857c
    g7 = v14;
    uint16_t v15 = *(int16_t *)v14; // 0x6857e
    g7 = v15;
    g4 = v6;
    *(int16_t *)((v6 | 2) + v12) = v15;
    if (g715 == 0) {
        // 0x686f0
        return g4;
    }
    int32_t v16 = g8; // 0x68593
    g4 = (int32_t)&g301;
    int32_t v17; // 0x685a1
    if ((int16_t)v16 != -1) {
        // 0x6859e
        g4 = v13;
        v17 = *(int32_t *)(g6 + 4) + v13;
        g4 = v17;
    } else {
        v17 = (int32_t)&g301;
    }
    // 0x685a4
    int32_t v18; // 0x685d5
    if (*(int16_t *)v17 != -1) {
        // 0x685aa
        int32_t v19; // 0x685b7
        if (g715 == 0) {
            // bb39
            g4 = function_687d0();
            v19 = g8;
        } else {
            v19 = v16;
        }
        int32_t v20 = *(int32_t *)(g6 + 4); // 0x685bb
        g7 = v20;
        int32_t v21; // 0x685c8
        if ((int16_t)v19 != -1) {
            // 0x685c5
            v21 = v20 + v13;
        } else {
            v21 = (int32_t)&g301;
        }
        // 0x685ca
        g4 = v21;
        int32_t v22 = (int32_t)*(int16_t *)v21; // 0x685ca
        g4 = 3 * v22;
        *(int16_t *)(v20 + 4 + 12 * v22) = (int16_t)g10;
        v18 = g8;
    } else {
        v18 = v16;
    }
    if ((int16_t)v18 != -1) {
        // 0x685db
        if (g715 == 0) {
            // bb40
            g4 = function_68810();
        }
        // 0x685e8
        if ((int16_t)g10 == -1) {
            // bb41
            g4 = function_68880();
        }
        int32_t v23 = *(int32_t *)(g6 + 4); // 0x685f2
        g7 = v23;
        int32_t v24 = v23 + v6; // 0x685fb
        g4 = v24;
        uint16_t v25 = *(int16_t *)(v24 + 4); // 0x685fd
        g4 = v25;
        g7 = v23;
        g9 = v13;
        *(int16_t *)(v23 + (v13 | 4)) = v25;
    }
    int32_t v26 = g10; // 0x6860c
    int16_t * v27 = (int16_t *)(g6 + 16); // 0x6860c
    if ((int16_t)v26 == *v27) {
        // 0x686e0
        *v27 = (int16_t)g8;
    } else {
        // 0x68616
        g7 = g715;
        int32_t v28; // 0x68625
        if (g715 == 0) {
            // bb42
            g4 = function_68850();
            v28 = g10;
        } else {
            v28 = v26;
        }
        // 0x68625
        g4 = (int32_t)&g301;
        int32_t v29; // 0x68633
        if ((int16_t)v28 != -1) {
            // 0x68630
            g4 = v6;
            v29 = *(int32_t *)(g6 + 4) + v6;
            g4 = v29;
        } else {
            v29 = (int32_t)&g301;
        }
        int32_t v30 = (int32_t)*(int16_t *)(v29 + 4); // 0x68638
        g9 = v30;
        int32_t v31; // 0x6864d
        if ((char)g7 == 0) {
            // bb43
            g4 = function_68798();
            v31 = g9;
        } else {
            v31 = v30;
        }
        // 0x68642
        g4 = (int32_t)&g301;
        int32_t v32; // 0x68656
        if ((int16_t)v31 != -1) {
            int32_t v33 = v31 & (int32_t)&g863; // 0x6864d
            g4 = v33;
            int32_t v34 = *(int32_t *)(g6 + 4); // 0x68650
            g9 = v34;
            v32 = v34 + 12 * v33;
            g4 = v32;
        } else {
            v32 = (int32_t)&g301;
        }
        int32_t v35 = g10; // 0x68659
        int32_t v36 = g7; // 0x686b0
        if ((int16_t)v35 != *(int16_t *)v32) {
            int32_t v37; // 0x686b8
            if ((char)v36 == 0) {
                // bb46
                g4 = function_688d0();
                v37 = g10;
            } else {
                v37 = v35;
            }
            int32_t v38 = *(int32_t *)(g6 + 4); // 0x686bc
            g7 = v38;
            int32_t v39; // 0x686c9
            if ((int16_t)v37 != -1) {
                // 0x686c6
                v39 = v38 + v6;
            } else {
                v39 = (int32_t)&g301;
            }
            // 0x686cb
            g4 = v39;
            int32_t v40 = (int32_t)*(int16_t *)(v39 + 4); // 0x686cb
            g4 = 3 * v40;
            *(int16_t *)((12 * v40 | 2) + v38) = (int16_t)g8;
        } else {
            int32_t v41; // 0x68666
            if ((char)v36 == 0) {
                // bb44
                g4 = function_68890();
                v41 = g10;
            } else {
                v41 = v35;
            }
            int32_t v42 = *(int32_t *)(g6 + 4); // 0x6866a
            g7 = v42;
            int32_t v43; // 0x68677
            if ((int16_t)v41 != -1) {
                // 0x68674
                v43 = v42 + v6;
            } else {
                v43 = (int32_t)&g301;
            }
            // 0x68679
            g4 = v43;
            int32_t v44 = (int32_t)*(int16_t *)(v43 + 4); // 0x68679
            g4 = 3 * v44;
            *(int16_t *)(12 * v44 + v42) = (int16_t)g8;
        }
    }
    int32_t v45 = *(int32_t *)(g6 + 4); // 0x68684
    g4 = v45;
    int16_t v46 = g10; // 0x68687
    g9 = v13;
    *(int16_t *)(v45 + v13) = v46;
    if (v46 != -1) {
        int32_t v47 = *(int32_t *)(g6 + 4); // 0x68694
        g4 = v47;
        g7 = v6;
        *(int16_t *)(v6 + 4 + v47) = (int16_t)g8;
    }
    // 0x6869f
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x686ff - 0x6870b
int32_t function_686ff(void) {
    int32_t v1 = g4; // 0x68705
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68707
    g4 = result;
    return result;
}

// Address range: 0x6870e - 0x68711
int32_t function_6870e(void) {
    // 0x6870e
    return g4;
}

// Address range: 0x68711 - 0x68716
int32_t function_68711(void) {
    uint32_t v1 = g6; // 0x68711
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68717 - 0x6871f
int32_t function_68717(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68717
    g4 = result;
    uint32_t v1 = g6; // 0x6871a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6872b - 0x68730
int32_t function_6872b(void) {
    // 0x6872b
    return g4;
}

// Address range: 0x68730 - 0x68737
int32_t function_68730(void) {
    // 0x68730
    return g4;
}

// Address range: 0x6873b - 0x6874b
int32_t function_6873b(void) {
    // 0x6873b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x337af040); // 0x6873b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x68741
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x68747
    g4 = result;
    return result;
}

// Address range: 0x6875b - 0x6876c
int32_t function_6875b(void) {
    // 0x6875b
    *(int32_t *)(g5 - 28) = 0xbfff4;
    g7 = (int32_t)&g301;
    return g4;
}

// Address range: 0x68770 - 0x68777
int32_t function_68770(void) {
    // 0x68770
    return g4;
}

// Address range: 0x6877b - 0x6878b
int32_t function_6877b(void) {
    // 0x6877b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x337af040); // 0x6877b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x68781
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x68787
    g4 = result;
    return result;
}

// Address range: 0x6878b - 0x68793
int32_t function_6878b(void) {
    // 0x6878b
    int32_t v1; // ebp
    *(char *)(v1 - 41) = (char)g9;
    return g4;
}

// Address range: 0x68798 - 0x687a2
int32_t function_68798(void) {
    // 0x68798
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x687a6 - 0x687cd
int32_t function_687a6(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x687a6
    int32_t v2 = *v1 - 1; // 0x687a6
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_68990();
    }
    // 0x687b2
    g7 = g715;
    g4 = (int32_t)&g301;
    return (int32_t)&g301;
}

// Address range: 0x687d0 - 0x687d7
int32_t function_687d0(void) {
    // 0x687d0
    return g4;
}

// Address range: 0x687e3 - 0x687eb
int32_t function_687e3(void) {
    // 0x687e3
    g8++;
    int32_t v1 = g4; // 0x687e5
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x687e7
    g4 = result;
    return result;
}

// Address range: 0x687ee - 0x687f1
int32_t function_687ee(void) {
    // 0x687ee
    return g4;
}

// Address range: 0x687f1 - 0x687f6
int32_t function_687f1(void) {
    uint32_t v1 = g6; // 0x687f1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x687f7 - 0x687ff
int32_t function_687f7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x687f7
    g4 = result;
    uint32_t v1 = g6; // 0x687fa
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6880b - 0x68810
int32_t function_6880b(void) {
    // 0x6880b
    return g4;
}

// Address range: 0x68810 - 0x68817
int32_t function_68810(void) {
    // 0x68810
    return g4;
}

// Address range: 0x68823 - 0x6882b
int32_t function_68823(void) {
    // 0x68823
    g8++;
    int32_t v1 = g4; // 0x68825
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68827
    g4 = result;
    return result;
}

// Address range: 0x6882e - 0x68831
int32_t function_6882e(void) {
    // 0x6882e
    return g4;
}

// Address range: 0x68831 - 0x68836
int32_t function_68831(void) {
    uint32_t v1 = g6; // 0x68831
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68837 - 0x6883f
int32_t function_68837(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68837
    g4 = result;
    uint32_t v1 = g6; // 0x6883a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6884b - 0x68850
int32_t function_6884b(void) {
    // 0x6884b
    return g4;
}

// Address range: 0x68850 - 0x68857
int32_t function_68850(void) {
    // 0x68850
    return g4;
}

// Address range: 0x6885c - 0x6887f
int32_t function_6885c(void) {
    // 0x6885c
    if (g4 != 0) {
        // bb
        g4 = function_689d0();
    }
    // 0x68864
    g7 = g715;
    g4 = (int32_t)&g301;
    return (int32_t)&g301;
}

// Address range: 0x68880 - 0x68890
int32_t function_68880(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x68880
    g9 = v1;
    g4 = (int32_t)&g301;
    *(int32_t *)(g5 - 32) = v1;
    return g4;
}

// Address range: 0x68890 - 0x68897
int32_t function_68890(void) {
    // 0x68890
    return g4;
}

// Address range: 0x6889d - 0x688a3
int32_t function_6889d(void) {
    unsigned char v1 = *(char *)&g8; // 0x6889d
    *(char *)g8 = v1 / 16 | 16 * v1;
    return g4;
}

// Address range: 0x688a3 - 0x688ab
int32_t function_688a3(void) {
    // 0x688a3
    g8++;
    int32_t v1 = g4; // 0x688a5
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x688a7
    g4 = result;
    return result;
}

// Address range: 0x688ae - 0x688b1
int32_t function_688ae(void) {
    // 0x688ae
    return g4;
}

// Address range: 0x688b1 - 0x688b6
int32_t function_688b1(void) {
    uint32_t v1 = g6; // 0x688b1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x688b7 - 0x688bf
int32_t function_688b7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x688b7
    g4 = result;
    uint32_t v1 = g6; // 0x688ba
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x688cb - 0x688d0
int32_t function_688cb(void) {
    // 0x688cb
    return g4;
}

// Address range: 0x688d0 - 0x688d7
int32_t function_688d0(void) {
    // 0x688d0
    return g4;
}

// Address range: 0x688e3 - 0x688eb
int32_t function_688e3(void) {
    // 0x688e3
    g8++;
    int32_t v1 = g4; // 0x688e5
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x688e7
    g4 = result;
    return result;
}

// Address range: 0x688ee - 0x688f1
int32_t function_688ee(void) {
    // 0x688ee
    return g4;
}

// Address range: 0x688f1 - 0x688f6
int32_t function_688f1(void) {
    uint32_t v1 = g6; // 0x688f1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x688f7 - 0x688ff
int32_t function_688f7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x688f7
    g4 = result;
    uint32_t v1 = g6; // 0x688fa
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6890b - 0x68910
int32_t function_6890b(void) {
    // 0x6890b
    return g4;
}

// Address range: 0x68913 - 0x68916
int32_t function_68913(void) {
    // 0x68913
    return g4;
}

// Address range: 0x68916 - 0x6891b
int32_t function_68916(void) {
    uint32_t v1 = g6; // 0x68916
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6891c - 0x68924
int32_t function_6891c(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x6891c
    g4 = result;
    uint32_t v1 = g6; // 0x6891f
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68928 - 0x68932
int32_t function_68928(void) {
    int32_t v1 = g6; // 0x68928
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x6892c
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x6892e
    g4 = result;
    return result;
}

// Address range: 0x68936 - 0x6893e
int32_t function_68936(void) {
    int32_t v1 = g8; // 0x68936
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x6893a
    g4 = result;
    return result;
}

// Address range: 0x6893e - 0x68946
int32_t function_6893e(void) {
    // 0x6893e
    int32_t v1; // ebp
    *(char *)(v1 - 41) = (char)g9;
    return g4;
}

// Address range: 0x68953 - 0x68956
int32_t function_68953(void) {
    // 0x68953
    return g4;
}

// Address range: 0x68956 - 0x6895b
int32_t function_68956(void) {
    uint32_t v1 = g6; // 0x68956
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6895c - 0x68964
int32_t function_6895c(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x6895c
    g4 = result;
    uint32_t v1 = g6; // 0x6895f
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68968 - 0x68972
int32_t function_68968(void) {
    int32_t v1 = g6; // 0x68968
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x6896c
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x6896e
    g4 = result;
    return result;
}

// Address range: 0x68976 - 0x6897e
int32_t function_68976(void) {
    int32_t v1 = g8; // 0x68976
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g852;
    int32_t result = g4 + 1; // 0x6897a
    g4 = result;
    return result;
}

// Address range: 0x6897e - 0x68986
int32_t function_6897e(void) {
    // 0x6897e
    int32_t v1; // ebp
    *(char *)(v1 - 41) = (char)g7;
    return g4;
}

// Address range: 0x68990 - 0x689b5
int32_t function_68990(void) {
    // 0x68990
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g301 = (int16_t)&g863;
    *(int16_t *)&g302 = (int16_t)&g863;
    *(int16_t *)&g303 = (int16_t)&g863;
    return g4;
}

// Address range: 0x689b9 - 0x689c1
int32_t function_689b9(void) {
    int32_t v1 = g8; // 0x689b9
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g852;
    int32_t result = g4 + 1; // 0x689bd
    g4 = result;
    return result;
}

// Address range: 0x689c1 - 0x689c9
int32_t function_689c1(void) {
    // 0x689c1
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x689d0 - 0x689f2
int32_t function_689d0(void) {
    // 0x689d0
    *(int16_t *)&g301 = (int16_t)&g863;
    *(int16_t *)&g302 = (int16_t)&g863;
    *(int16_t *)&g303 = (int16_t)&g863;
    return g4;
}

// Address range: 0x689f7 - 0x689fc
int32_t function_689f7(void) {
    // 0x689f7
    return g4;
}

// Address range: 0x68a00 - 0x68bb7
int32_t function_68a00(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x68a03
    int32_t v2 = g10; // 0x68a04
    int32_t v3 = g6; // 0x68a05
    int32_t v4 = g715; // 0x68a09
    g4 = v4;
    g6 = a1;
    int32_t v5 = a2 % 0x10000; // 0x68a13
    g10 = v5;
    int32_t v6; // 0x68a34
    int32_t v7; // 0x68a19
    if (g715 == 0) {
        // bb
        v7 = function_68c30();
        g4 = v7;
        v6 = g10;
    } else {
        v7 = v4;
        v6 = v5;
    }
    // 0x68a1f
    g7 = (int32_t)&g301;
    int32_t v8; // 0x68a3a
    int32_t v9; // 0x68a40
    if ((int16_t)v6 != -1) {
        // 0x68a31
        v8 = 12 * (v6 & (int32_t)&g863);
        g9 = v8;
        v9 = *(int32_t *)(g6 + 4) + v8;
        g7 = v9;
    } else {
        v9 = (int32_t)&g301;
        v8 = 0xbfff4;
    }
    int32_t v10 = (int32_t)*(int16_t *)v9; // 0x68a44
    g8 = v10;
    int32_t v11; // 0x68a4d
    if ((char)v7 == 0) {
        // bb40
        g4 = function_68bf0();
        v11 = g8;
    } else {
        v11 = v10;
    }
    int32_t v12 = *(int32_t *)(g6 + 4); // 0x68a51
    g9 = v12;
    int32_t v13; // 0x68a5a
    int32_t v14; // 0x68a71
    if ((int16_t)v11 == -1) {
        // bb41
        g4 = function_68d80();
        v14 = g9;
        v13 = g8;
    } else {
        v14 = v12;
        v13 = v11;
    }
    int32_t v15 = 12 * (v13 & (int32_t)&g863); // 0x68a60
    g7 = v15;
    int32_t v16 = v15 + v14; // 0x68a68
    g4 = v16;
    uint16_t v17 = *(int16_t *)(v16 + 2); // 0x68a6a
    g4 = v17;
    g7 = v8;
    *(int16_t *)(v14 + v8) = v17;
    if (g715 == 0) {
        // 0x68bb0
        return g4;
    }
    int32_t v18 = g8; // 0x68a82
    g4 = (int32_t)&g301;
    int32_t v19; // 0x68a90
    if ((int16_t)v18 != -1) {
        // 0x68a8d
        g4 = v15;
        v19 = *(int32_t *)(g6 + 4) + v15;
        g4 = v19;
    } else {
        v19 = (int32_t)&g301;
    }
    // 0x68a93
    int32_t v20; // 0x68ac6
    if (*(int16_t *)(v19 + 2) != -1) {
        int32_t v21 = *(int32_t *)(g6 + 4); // 0x68aab
        g9 = v21;
        int32_t v22; // 0x68ab8
        if ((int16_t)v18 != -1) {
            // 0x68ab5
            v22 = v21 + v15;
        } else {
            v22 = (int32_t)&g301;
        }
        // 0x68aba
        g4 = v22;
        int32_t v23 = (int32_t)*(int16_t *)(v22 + 2); // 0x68aba
        g4 = 3 * v23;
        *(int16_t *)(v21 + 4 + 12 * v23) = (int16_t)g10;
        v20 = g8;
    } else {
        v20 = v18;
    }
    if ((int16_t)v20 != -1) {
        // 0x68ad9
        if ((int16_t)g10 == -1) {
            // bb42
            g4 = function_68d70();
        }
        int32_t v24 = *(int32_t *)(g6 + 4); // 0x68ae3
        g9 = v24;
        int32_t v25 = v24 + v8; // 0x68aec
        g4 = v25;
        uint16_t v26 = *(int16_t *)(v25 + 4); // 0x68aee
        g4 = v26;
        g9 = v24;
        g7 = v15;
        *(int16_t *)(v24 + (v15 | 4)) = v26;
    }
    int32_t v27 = g10; // 0x68afd
    int16_t * v28 = (int16_t *)(g6 + 16); // 0x68afd
    if ((int16_t)v27 == *v28) {
        // 0x68ba0
        *v28 = (int16_t)g8;
    } else {
        // 0x68b07
        g7 = g715;
        int32_t v29; // 0x68b16
        if (g715 == 0) {
            // bb43
            g4 = function_68d10();
            v29 = g10;
        } else {
            v29 = v27;
        }
        // 0x68b16
        g4 = (int32_t)&g301;
        int32_t v30; // 0x68b24
        if ((int16_t)v29 != -1) {
            // 0x68b21
            g4 = v8;
            v30 = *(int32_t *)(g6 + 4) + v8;
            g4 = v30;
        } else {
            v30 = (int32_t)&g301;
        }
        int32_t v31 = (int32_t)*(int16_t *)(v30 + 4); // 0x68b29
        g9 = v31;
        int32_t v32; // 0x68b3e
        if ((char)g7 == 0) {
            // bb44
            g4 = function_68c50();
            v32 = g9;
        } else {
            v32 = v31;
        }
        // 0x68b33
        g4 = (int32_t)&g301;
        int32_t v33; // 0x68b47
        if ((int16_t)v32 != -1) {
            int32_t v34 = v32 & (int32_t)&g863; // 0x68b3e
            g4 = v34;
            int32_t v35 = *(int32_t *)(g6 + 4); // 0x68b41
            g9 = v35;
            v33 = v35 + 12 * v34;
            g4 = v33;
        } else {
            v33 = (int32_t)&g301;
        }
        // 0x68b4a
        if ((int16_t)g10 == *(int16_t *)(v33 + 2)) {
            // bb45
            g4 = function_68d40();
        }
        // 0x68b54
        if ((char)g7 == 0) {
            // bb46
            g4 = function_68d98();
        }
        int32_t v36 = *(int32_t *)(g6 + 4); // 0x68b60
        g7 = v36;
        int32_t v37; // 0x68b6d
        if ((int16_t)g10 != -1) {
            // 0x68b6a
            v37 = v36 + v8;
        } else {
            v37 = (int32_t)&g301;
        }
        // 0x68b6f
        g4 = v37;
        int32_t v38 = (int32_t)*(int16_t *)(v37 + 4); // 0x68b6f
        g4 = 3 * v38;
        *(int16_t *)(12 * v38 + v36) = (int16_t)g8;
    }
    int32_t v39 = *(int32_t *)(g6 + 4); // 0x68b7a
    g4 = v39;
    int16_t v40 = g10; // 0x68b7d
    g7 = v15;
    *(int16_t *)(v39 + (v15 | 2)) = v40;
    if (v40 != -1) {
        int32_t v41 = *(int32_t *)(g6 + 4); // 0x68b8b
        g4 = v41;
        g9 = v8;
        *(int16_t *)(v8 + 4 + v41) = (int16_t)g8;
    }
    // 0x68b96
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x68bbd - 0x68bcb
int32_t function_68bbd(void) {
    unsigned char v1 = *(char *)&g8; // 0x68bbd
    *(char *)g8 = v1 / 16 | 16 * v1;
    g10 = -0x38000002;
    int32_t v2 = g4; // 0x68bc5
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x68bc7
    g4 = result;
    return result;
}

// Address range: 0x68bce - 0x68bd1
int32_t function_68bce(void) {
    // 0x68bce
    return g4;
}

// Address range: 0x68bd1 - 0x68bd6
int32_t function_68bd1(void) {
    uint32_t v1 = g6; // 0x68bd1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68bd7 - 0x68bdf
int32_t function_68bd7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68bd7
    g4 = result;
    uint32_t v1 = g6; // 0x68bda
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68beb - 0x68bf0
int32_t function_68beb(void) {
    // 0x68beb
    return g4;
}

// Address range: 0x68bf0 - 0x68bf7
int32_t function_68bf0(void) {
    // 0x68bf0
    return g4;
}

// Address range: 0x68c03 - 0x68c0b
int32_t function_68c03(void) {
    // 0x68c03
    g8++;
    int32_t v1 = g4; // 0x68c05
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68c07
    g4 = result;
    return result;
}

// Address range: 0x68c0e - 0x68c11
int32_t function_68c0e(void) {
    // 0x68c0e
    return g4;
}

// Address range: 0x68c11 - 0x68c16
int32_t function_68c11(void) {
    uint32_t v1 = g6; // 0x68c11
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68c17 - 0x68c1f
int32_t function_68c17(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68c17
    g4 = result;
    uint32_t v1 = g6; // 0x68c1a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68c2b - 0x68c30
int32_t function_68c2b(void) {
    // 0x68c2b
    return g4;
}

// Address range: 0x68c30 - 0x68c37
int32_t function_68c30(void) {
    // 0x68c30
    return g4;
}

// Address range: 0x68c3b - 0x68c4b
int32_t function_68c3b(void) {
    // 0x68c3b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x637af040); // 0x68c3b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x68c41
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x68c47
    g4 = result;
    return result;
}

// Address range: 0x68c4b - 0x68c50
int32_t function_68c4b(void) {
    // 0x68c4b
    return g4;
}

// Address range: 0x68c50 - 0x68c5a
int32_t function_68c50(void) {
    // 0x68c50
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x68c5e - 0x68c85
int32_t function_68c5e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x68c5e
    int32_t v2 = *v1 - 1; // 0x68c5e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_68e10();
    }
    // 0x68c6a
    g7 = g715;
    g4 = (int32_t)&g301;
    return (int32_t)&g301;
}

// Address range: 0x68c88 - 0x68c8f
int32_t function_68c88(void) {
    // 0x68c88
    return g4;
}

// Address range: 0x68c9b - 0x68ca3
int32_t function_68c9b(void) {
    // 0x68c9b
    g8++;
    int32_t v1 = g4; // 0x68c9d
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68c9f
    g4 = result;
    return result;
}

// Address range: 0x68ca6 - 0x68ca9
int32_t function_68ca6(void) {
    // 0x68ca6
    return g4;
}

// Address range: 0x68ca9 - 0x68cae
int32_t function_68ca9(void) {
    uint32_t v1 = g6; // 0x68ca9
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68caf - 0x68cb7
int32_t function_68caf(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68caf
    g4 = result;
    uint32_t v1 = g6; // 0x68cb2
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68cc3 - 0x68cc8
int32_t function_68cc3(void) {
    // 0x68cc3
    return g4;
}

// Address range: 0x68cd0 - 0x68cd7
int32_t function_68cd0(void) {
    // 0x68cd0
    return g4;
}

// Address range: 0x68ce3 - 0x68ceb
int32_t function_68ce3(void) {
    // 0x68ce3
    g8++;
    int32_t v1 = g4; // 0x68ce5
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68ce7
    g4 = result;
    return result;
}

// Address range: 0x68cee - 0x68cf1
int32_t function_68cee(void) {
    // 0x68cee
    return g4;
}

// Address range: 0x68cf1 - 0x68cf6
int32_t function_68cf1(void) {
    uint32_t v1 = g6; // 0x68cf1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68cf7 - 0x68cff
int32_t function_68cf7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68cf7
    g4 = result;
    uint32_t v1 = g6; // 0x68cfa
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68d0b - 0x68d10
int32_t function_68d0b(void) {
    // 0x68d0b
    return g4;
}

// Address range: 0x68d10 - 0x68d17
int32_t function_68d10(void) {
    // 0x68d10
    return g4;
}

// Address range: 0x68d1c - 0x68d3f
int32_t function_68d1c(void) {
    // 0x68d1c
    if (g4 != 0) {
        // bb
        g4 = function_68e50();
    }
    // 0x68d24
    g7 = g715;
    g4 = (int32_t)&g301;
    return (int32_t)&g301;
}

// Address range: 0x68d40 - 0x68d6c
int32_t function_68d40(void) {
    // 0x68d40
    if ((char)g7 == 0) {
        // bb
        g4 = function_68e80();
    }
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x68d4c
    g7 = v1;
    g4 = (int32_t)&g301;
    int32_t v2; // 0x68d59
    if ((int16_t)g10 != -1) {
        // 0x68d56
        v2 = *(int32_t *)(g5 - 56) + v1;
        g4 = v2;
    } else {
        v2 = (int32_t)&g301;
    }
    int32_t v3 = (int32_t)*(int16_t *)(v2 + 4); // 0x68d5b
    g4 = 3 * v3;
    *(int16_t *)((12 * v3 | 2) + v1) = (int16_t)g8;
    return g4;
}

// Address range: 0x68d70 - 0x68d80
int32_t function_68d70(void) {
    // 0x68d70
    *(int32_t *)(g5 - 28) = *(int32_t *)(g6 + 4);
    g4 = (int32_t)&g301;
    return (int32_t)&g301;
}

// Address range: 0x68d80 - 0x68d91
int32_t function_68d80(void) {
    // 0x68d80
    *(int32_t *)(g5 - 52) = 0xbfff4;
    g4 = (int32_t)&g301;
    return (int32_t)&g301;
}

// Address range: 0x68d98 - 0x68d9f
int32_t function_68d98(void) {
    // 0x68d98
    return g4;
}

// Address range: 0x68da7 - 0x68db3
int32_t function_68da7(void) {
    int32_t v1 = g4; // 0x68da7
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68daf
    g4 = result;
    return result;
}

// Address range: 0x68db6 - 0x68db9
int32_t function_68db6(void) {
    // 0x68db6
    return g4;
}

// Address range: 0x68db9 - 0x68dbe
int32_t function_68db9(void) {
    uint32_t v1 = g6; // 0x68db9
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68dbf - 0x68dc7
int32_t function_68dbf(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68dbf
    g4 = result;
    uint32_t v1 = g6; // 0x68dc2
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68dd3 - 0x68dd8
int32_t function_68dd3(void) {
    // 0x68dd3
    return g4;
}

// Address range: 0x68de1 - 0x68de7
int32_t function_68de1(void) {
    int32_t v1 = g4; // 0x68de1
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x68de3
    g4 = result;
    return result;
}

// Address range: 0x68dea - 0x68ded
int32_t function_68dea(void) {
    // 0x68dea
    return g4;
}

// Address range: 0x68ded - 0x68df2
int32_t function_68ded(void) {
    uint32_t v1 = g6; // 0x68ded
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68df3 - 0x68dfb
int32_t function_68df3(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68df3
    g4 = result;
    uint32_t v1 = g6; // 0x68df6
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68e07 - 0x68e0c
int32_t function_68e07(void) {
    // 0x68e07
    return g4;
}

// Address range: 0x68e10 - 0x68e35
int32_t function_68e10(void) {
    // 0x68e10
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g301 = (int16_t)&g863;
    *(int16_t *)&g302 = (int16_t)&g863;
    *(int16_t *)&g303 = (int16_t)&g863;
    return g4;
}

// Address range: 0x68e39 - 0x68e41
int32_t function_68e39(void) {
    int32_t v1 = g8; // 0x68e39
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g852;
    int32_t result = g4 + 1; // 0x68e3d
    g4 = result;
    return result;
}

// Address range: 0x68e41 - 0x68e49
int32_t function_68e41(void) {
    // 0x68e41
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x68e50 - 0x68e72
int32_t function_68e50(void) {
    // 0x68e50
    *(int16_t *)&g301 = (int16_t)&g863;
    *(int16_t *)&g302 = (int16_t)&g863;
    *(int16_t *)&g303 = (int16_t)&g863;
    return g4;
}

// Address range: 0x68e77 - 0x68e7c
int32_t function_68e77(void) {
    // 0x68e77
    return g4;
}

// Address range: 0x68e80 - 0x68e87
int32_t function_68e80(void) {
    // 0x68e80
    return g4;
}

// Address range: 0x68e8f - 0x68e9b
int32_t function_68e8f(void) {
    int32_t result = g4 & -192; // 0x68e96
    g4 = result;
    return result;
}

// Address range: 0x68e9e - 0x68ea1
int32_t function_68e9e(void) {
    // 0x68e9e
    return g4;
}

// Address range: 0x68ea1 - 0x68ea6
int32_t function_68ea1(void) {
    uint32_t v1 = g6; // 0x68ea1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x68ea7 - 0x68eaf
int32_t function_68ea7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x68ea7
    g4 = result;
    uint32_t v1 = g6; // 0x68eaa
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x68ebb - 0x68ec0
int32_t function_68ebb(void) {
    // 0x68ebb
    return g4;
}

// Address range: 0x68ec0 - 0x6915f
int32_t function_68ec0(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x68ec3
    int32_t v2 = g10; // 0x68ec4
    int32_t v3 = g6; // 0x68ec5
    g6 = a1;
    int32_t v4 = a2 % 0x10000; // 0x68ecc
    g8 = v4;
    int32_t v5;
    int32_t v6; // 0x68f2d
    int32_t v7; // 0x69042
    int32_t v8; // 0x69048
    int32_t v9; // 0x68ed0
    int32_t v10; // 0x68f9e
    while (true) {
      lab_0x68ed0_2:;
        uint16_t v11 = *(int16_t *)(a1 + 16); // 0x68ed0
        v9 = v11;
        g4 = v9;
        if ((int16_t)v4 == v11) {
            v6 = a1;
            // break -> 0x68f2d
            break;
        }
        // 0x68ed9
        g9 = g715;
        int32_t v12; // 0x68ef6
        if (g715 == 0) {
            // bb
            g4 = function_69230();
            v12 = g8;
        } else {
            v12 = v4;
        }
        // 0x68ee8
        g4 = (int32_t)&g301;
        int32_t v13; // 0x68efc
        if ((int16_t)v12 != -1) {
            int32_t v14 = *(int32_t *)(g6 + 4); // 0x68ef3
            g7 = v14;
            v13 = v14 + 12 * (v12 & (int32_t)&g863);
            g4 = v13;
        } else {
            v13 = (int32_t)&g301;
        }
        int32_t v15 = (int32_t)*(int16_t *)(v13 + 4); // 0x68f01
        g10 = v15;
        int32_t v16; // 0x68f16
        if ((char)g9 == 0) {
            // bb67
            g4 = function_691f0();
            v16 = g10;
        } else {
            v16 = v15;
        }
        // 0x68f0b
        g4 = (int32_t)&g301;
        int32_t v17; // 0x68f1f
        if ((int16_t)v16 != -1) {
            int32_t v18 = v16 & (int32_t)&g863; // 0x68f16
            g10 = v18;
            g4 = 3 * v18;
            int32_t v19 = *(int32_t *)(g6 + 4); // 0x68f1c
            g10 = v19;
            v17 = v19 + 12 * v18;
            g4 = v17;
        } else {
            v17 = (int32_t)&g301;
        }
        // 0x68f22
        if (*(int16_t *)(v17 + 6) != 0) {
            int32_t v20 = g6; // 0x68f29
            int32_t v21 = (int32_t)*(int16_t *)(v20 + 16); // 0x68f29
            g4 = v21;
            v9 = v21;
            v6 = v20;
            goto lab_0x68f2d;
        }
        int32_t v22 = g715; // 0x68f50
        g4 = v22;
        int32_t result; // 0x68f59
        if (g715 == 0) {
            // bb69
            result = function_69180();
            g4 = result;
        } else {
            result = v22;
        }
        int32_t v23 = g8; // 0x68f5f
        g9 = (int32_t)&g301;
        int32_t v24; // 0x68f73
        if ((int16_t)v23 != -1) {
            int32_t v25 = *(int32_t *)(g6 + 4); // 0x68f6a
            g10 = v25;
            v24 = v25 + 12 * (v23 & (int32_t)&g863);
            g9 = v24;
        } else {
            v24 = (int32_t)&g301;
        }
        uint16_t v26 = *(int16_t *)(v24 + 4); // 0x68f76
        int32_t v27 = v26; // 0x68f76
        g9 = v27;
        int32_t v28 = v27 & (int32_t)&g863; // 0x68f80
        g10 = v28;
        if ((char)result == 0) {
            // 0x69158
            return result;
        }
        // 0x68f89
        g9 = (int32_t)&g301;
        int32_t v29; // 0x68f9b
        if (v26 != -1) {
            int32_t v30 = *(int32_t *)(g6 + 4); // 0x68f95
            g7 = v30;
            v29 = v30 + 12 * v28;
            g9 = v29;
        } else {
            v29 = (int32_t)&g301;
        }
        uint16_t v31 = *(int16_t *)(v29 + 4); // 0x68f9e
        v10 = v31;
        g9 = (int32_t)&g301;
        int32_t v32; // 0x68fc0
        if (v26 != -1) {
            int32_t v33 = *(int32_t *)(g6 + 4); // 0x68fba
            g7 = v33;
            v32 = v33 + 12 * v28;
            g9 = v32;
        } else {
            v32 = (int32_t)&g301;
        }
        uint16_t v34 = *(int16_t *)(v32 + 4); // 0x68fc5
        int32_t v35 = v34; // 0x68fc5
        g7 = v35;
        g9 = (int32_t)&g301;
        int32_t v36; // 0x68fe3
        if (v34 != -1) {
            int32_t v37 = v35 & (int32_t)&g863; // 0x68fda
            g7 = v37;
            g9 = 3 * v37;
            int32_t v38 = *(int32_t *)(g6 + 4); // 0x68fe0
            g7 = v38;
            v36 = v38 + 12 * v37;
            g9 = v36;
        } else {
            v36 = (int32_t)&g301;
        }
        // 0x68fe6
        g7 = v27;
        g9 = (int32_t)&g301;
        if (v26 != *(int16_t *)v36) {
            int32_t v39; // 0x6909e
            if (v31 != -1) {
                // 0x69094
                g9 = v10;
                int32_t v40 = *(int32_t *)(g6 + 4); // 0x69098
                g7 = v40;
                v39 = v40 + 12 * v10;
                g9 = v39;
            } else {
                v39 = (int32_t)&g301;
            }
            uint16_t v41 = *(int16_t *)v39; // 0x690a3
            int32_t v42 = v41; // 0x690a3
            g9 = v42;
            g4 = (int32_t)&g301;
            int32_t v43; // 0x690c0
            if (v41 != -1) {
                int32_t v44 = *(int32_t *)(g6 + 4); // 0x690b7
                g7 = v44;
                v43 = v44 + 12 * (v42 & (int32_t)&g863);
                g4 = v43;
            } else {
                v43 = (int32_t)&g301;
            }
            // 0x690c3
            if (*(int16_t *)(v43 + 6) == 0) {
                v7 = v28;
                v8 = v42;
                goto lab_0x69042;
            } else {
                // 0x690ce
                g9 = g715;
                int32_t v45; // 0x690dd
                if (g715 == 0) {
                    // bb71
                    g4 = function_695a8();
                    v45 = g8;
                } else {
                    v45 = v23;
                }
                // 0x690dd
                g4 = (int32_t)&g301;
                int32_t v46; // 0x690f1
                if ((int16_t)v45 != -1) {
                    int32_t v47 = *(int32_t *)(g6 + 4); // 0x690e8
                    g7 = v47;
                    v46 = v47 + 12 * (v45 & (int32_t)&g863);
                    g4 = v46;
                } else {
                    v46 = (int32_t)&g301;
                }
                int32_t v48 = (int32_t)*(int16_t *)(v46 + 4); // 0x690f6
                g7 = v48;
                int32_t v49; // 0x6910e
                if ((char)g9 == 0) {
                    // bb72
                    g4 = function_69558();
                    v49 = g7;
                } else {
                    v49 = v48;
                }
                // 0x69100
                g4 = (int32_t)&g301;
                int32_t v50; // 0x69114
                if ((int16_t)v49 != -1) {
                    int32_t v51 = *(int32_t *)(g6 + 4); // 0x6910b
                    g9 = v51;
                    int32_t v52 = v49 & (int32_t)&g863; // 0x6910e
                    g7 = v52;
                    v50 = v51 + 12 * v52;
                    g4 = v50;
                } else {
                    v50 = (int32_t)&g301;
                }
                // 0x69117
                if ((int16_t)g8 == *(int16_t *)v50) {
                    // bb73
                    g4 = function_694c0();
                }
                int32_t v53 = g10; // 0x69120
                g4 = 3 * v53;
                int32_t v54 = *(int32_t *)(g6 + 4); // 0x69123
                g10 = v54;
                *(int16_t *)(12 * v53 + 6 + v54) = 1;
                g4 = v10;
                int32_t v55 = *(int32_t *)(g6 + 4); // 0x69133
                g10 = v55;
                int32_t v56 = v55 + 12 * v10; // 0x69139
                g9 = v56;
                *(int16_t *)(v56 + 6) = 0;
                g4 = function_68510(0x1000000 * g6 / 0x1000000, g4);
                v5 = g8;
                goto lab_0x68ed0;
            }
        } else {
            int32_t v57; // 0x69011
            if (v31 != -1) {
                // 0x69007
                g9 = v10;
                int32_t v58 = *(int32_t *)(g6 + 4); // 0x6900b
                g7 = v58;
                v57 = v58 + 12 * v10;
                g9 = v57;
            } else {
                v57 = (int32_t)&g301;
            }
            uint16_t v59 = *(int16_t *)(v57 + 2); // 0x69016
            int32_t v60 = v59; // 0x69016
            g9 = v60;
            g4 = (int32_t)&g301;
            int32_t v61; // 0x69034
            if (v59 != -1) {
                int32_t v62 = *(int32_t *)(g6 + 4); // 0x6902b
                g7 = v62;
                v61 = v62 + 12 * (v60 & (int32_t)&g863);
                g4 = v61;
            } else {
                v61 = (int32_t)&g301;
            }
            // 0x69037
            if (*(int16_t *)(v61 + 6) != 0) {
                // bb70
                g4 = function_69330();
                v7 = g10;
                v8 = g9;
            } else {
                v7 = v28;
                v8 = v60;
            }
            goto lab_0x69042;
        }
    }
    goto lab_0x68f2d;
  lab_0x69042:
    // 0x69042
    g4 = 3 * v7;
    int32_t v65 = *(int32_t *)(g6 + 4); // 0x69045
    g10 = v65;
    g9 = v8 & (int32_t)&g863;
    *(int16_t *)(12 * v7 + 6 + v65) = 1;
    int32_t v66 = g9; // 0x69054
    g4 = 3 * v66;
    int32_t v67 = *(int32_t *)(g6 + 4); // 0x69057
    g8 = v67;
    *(int16_t *)(12 * v66 + 6 + v67) = 1;
    g4 = v10;
    int32_t v68 = *(int32_t *)(g6 + 4); // 0x69067
    g9 = v68;
    int32_t v69 = v68 + 12 * v10; // 0x6906d
    g4 = v69;
    *(int16_t *)(v69 + 6) = 0;
    g8 = v10;
    v5 = v10;
    goto lab_0x68ed0;
  lab_0x68ed0:
    // 0x68ed0
    v4 = v5;
    a1 = g6;
    goto lab_0x68ed0_2;
  lab_0x68f2d:;
    int32_t v63 = *(int32_t *)(v6 + 4); // 0x68f2d
    g7 = v63;
    int32_t v64 = 12 * (v9 & (int32_t)&g863) + v63; // 0x68f36
    g4 = v64;
    *(int16_t *)(v64 + 6) = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x69163 - 0x69173
int32_t function_69163(void) {
    // 0x69163
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x7b7af040); // 0x69163
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69169
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x6916f
    g4 = result;
    return result;
}

// Address range: 0x69173 - 0x69178
int32_t function_69173(void) {
    // 0x69173
    return g4;
}

// Address range: 0x69180 - 0x69187
int32_t function_69180(void) {
    // 0x69180
    return g4;
}

// Address range: 0x6918b - 0x6919b
int32_t function_6918b(void) {
    // 0x6918b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x737af040); // 0x6918b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69191
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x69197
    g4 = result;
    return result;
}

// Address range: 0x6919b - 0x691a0
int32_t function_6919b(void) {
    // 0x6919b
    return g4;
}

// Address range: 0x691a0 - 0x691aa
int32_t function_691a0(void) {
    // 0x691a0
    *(int32_t *)(g5 - 32) = g7;
    return g4;
}

// Address range: 0x691ae - 0x691c6
int32_t function_691ae(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a1fb3); // 0x691ae
    int32_t v2 = *v1 - 1; // 0x691ae
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_69450();
    }
    int32_t result = g715; // 0x691ba
    g4 = result;
    return result;
}

// Address range: 0x691d0 - 0x691d7
int32_t function_691d0(void) {
    // 0x691d0
    return g4;
}

// Address range: 0x691db - 0x691eb
int32_t function_691db(void) {
    // 0x691db
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x237af040); // 0x691db
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x691e1
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x691e7
    g4 = result;
    return result;
}

// Address range: 0x691eb - 0x691f0
int32_t function_691eb(void) {
    // 0x691eb
    return g4;
}

// Address range: 0x691f0 - 0x691f7
int32_t function_691f0(void) {
    // 0x691f0
    return g4;
}

// Address range: 0x69203 - 0x6920b
int32_t function_69203(void) {
    // 0x69203
    g8++;
    int32_t v1 = g4; // 0x69205
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69207
    g4 = result;
    return result;
}

// Address range: 0x6920e - 0x69211
int32_t function_6920e(void) {
    // 0x6920e
    return g4;
}

// Address range: 0x69211 - 0x69216
int32_t function_69211(void) {
    uint32_t v1 = g6; // 0x69211
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69217 - 0x6921f
int32_t function_69217(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69217
    g4 = result;
    uint32_t v1 = g6; // 0x6921a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6922b - 0x69230
int32_t function_6922b(void) {
    // 0x6922b
    return g4;
}

// Address range: 0x69230 - 0x69237
int32_t function_69230(void) {
    // 0x69230
    return g4;
}

// Address range: 0x6923b - 0x6924b
int32_t function_6923b(void) {
    // 0x6923b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x4c850fc0); // 0x6923b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69241
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x69247
    g4 = result;
    return result;
}

// Address range: 0x6924b - 0x69250
int32_t function_6924b(void) {
    // 0x6924b
    return g4;
}

// Address range: 0x69250 - 0x69257
int32_t function_69250(void) {
    // 0x69250
    return g4;
}

// Address range: 0x6925b - 0x6926b
int32_t function_6925b(void) {
    // 0x6925b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x3b7af040); // 0x6925b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69261
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x69267
    g4 = result;
    return result;
}

// Address range: 0x6926b - 0x69270
int32_t function_6926b(void) {
    // 0x6926b
    return g4;
}

// Address range: 0x69270 - 0x6927a
int32_t function_69270(void) {
    // 0x69270
    *(int32_t *)(g5 - 32) = g9;
    return g4;
}

// Address range: 0x69289 - 0x6928c
int32_t function_69289(void) {
    // 0x69289
    return g4;
}

// Address range: 0x6928d - 0x69290
int32_t function_6928d(void) {
    // 0x6928d
    return g4;
}

// Address range: 0x69290 - 0x69295
int32_t function_69290(void) {
    uint32_t v1 = g6; // 0x69290
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69296 - 0x6929e
int32_t function_69296(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69296
    g4 = result;
    uint32_t v1 = g6; // 0x69299
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x692a2 - 0x692ac
int32_t function_692a2(void) {
    int32_t v1 = g6; // 0x692a2
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x692a6
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x692a8
    g4 = result;
    return result;
}

// Address range: 0x692b1 - 0x692b9
int32_t function_692b1(void) {
    // 0x692b1
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x692c0 - 0x692ca
int32_t function_692c0(void) {
    // 0x692c0
    *(int32_t *)(g5 - 32) = g9;
    return g4;
}

// Address range: 0x692d9 - 0x692dc
int32_t function_692d9(void) {
    // 0x692d9
    return g4;
}

// Address range: 0x692dd - 0x692e0
int32_t function_692dd(void) {
    // 0x692dd
    return g4;
}

// Address range: 0x692e0 - 0x692e5
int32_t function_692e0(void) {
    uint32_t v1 = g6; // 0x692e0
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x692e6 - 0x692ee
int32_t function_692e6(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x692e6
    g4 = result;
    uint32_t v1 = g6; // 0x692e9
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x692f2 - 0x692fc
int32_t function_692f2(void) {
    int32_t v1 = g6; // 0x692f2
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x692f6
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x692f8
    g4 = result;
    return result;
}

// Address range: 0x69301 - 0x69309
int32_t function_69301(void) {
    // 0x69301
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x69310 - 0x69317
int32_t function_69310(void) {
    // 0x69310
    return g4;
}

// Address range: 0x6931b - 0x6932b
int32_t function_6931b(void) {
    // 0x6931b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x1c850fc0); // 0x6931b
    *v2 = *v2 + 1;
    g4 *= 2;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x69327
    g4 = result;
    return result;
}

// Address range: 0x6932b - 0x69330
int32_t function_6932b(void) {
    // 0x6932b
    return g4;
}

// Address range: 0x69330 - 0x693b6
int32_t function_69330(void) {
    unsigned char v1 = g715; // 0x69330
    g9 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_69620();
    }
    int32_t v2 = g8; // 0x6933f
    g4 = (int32_t)&g301;
    int32_t v3; // 0x69353
    if ((int16_t)v2 != -1) {
        int32_t v4 = *(int32_t *)(g6 + 4); // 0x6934a
        g7 = v4;
        v3 = v4 + 12 * (v2 & (int32_t)&g863);
        g4 = v3;
    } else {
        v3 = (int32_t)&g301;
    }
    int32_t v5 = (int32_t)*(int16_t *)(v3 + 4); // 0x69358
    g7 = v5;
    int32_t v6; // 0x69370
    if ((char)g9 == 0) {
        // bb6
        g4 = function_695d0();
        v6 = g7;
    } else {
        v6 = v5;
    }
    // 0x69362
    g4 = (int32_t)&g301;
    int32_t v7; // 0x69376
    if ((int16_t)v6 != -1) {
        int32_t v8 = *(int32_t *)(g6 + 4); // 0x6936d
        g9 = v8;
        int32_t v9 = v6 & (int32_t)&g863; // 0x69370
        g7 = v9;
        v7 = v8 + 12 * v9;
        g4 = v7;
    } else {
        v7 = (int32_t)&g301;
    }
    // 0x69379
    if ((int16_t)g8 == *(int16_t *)(v7 + 2)) {
        // bb7
        g4 = function_69670();
    }
    int32_t v10 = g10; // 0x69383
    g4 = 3 * v10;
    int32_t v11 = *(int32_t *)(g6 + 4); // 0x69386
    g10 = v11;
    int32_t v12 = v11 + 12 * v10; // 0x69389
    g4 = v12;
    *(int16_t *)(v12 + 6) = 1;
    int32_t v13 = (int32_t)*(int16_t *)(g5 - 28); // 0x69392
    g4 = v13;
    int32_t v14 = *(int32_t *)(g6 + 4); // 0x69396
    g10 = v14;
    int32_t v15 = v14 + 12 * v13; // 0x6939c
    g9 = v15;
    *(int16_t *)(v15 + 6) = 0;
    int32_t result = function_68a00(g6, g4); // 0x693ac
    g4 = result;
    return result;
}

// Address range: 0x693c1 - 0x693c7
int32_t function_693c1(void) {
    int32_t v1 = g4; // 0x693c1
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x693c3
    g4 = result;
    return result;
}

// Address range: 0x693ca - 0x693cd
int32_t function_693ca(void) {
    // 0x693ca
    return g4;
}

// Address range: 0x693cd - 0x693d2
int32_t function_693cd(void) {
    uint32_t v1 = g6; // 0x693cd
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x693d3 - 0x693db
int32_t function_693d3(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x693d3
    g4 = result;
    uint32_t v1 = g6; // 0x693d6
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x693e7 - 0x693ec
int32_t function_693e7(void) {
    // 0x693e7
    return g4;
}

// Address range: 0x693f1 - 0x693f7
int32_t function_693f1(void) {
    int32_t v1 = g4; // 0x693f1
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x693f3
    g4 = result;
    return result;
}

// Address range: 0x693fa - 0x693fd
int32_t function_693fa(void) {
    // 0x693fa
    return g4;
}

// Address range: 0x693fd - 0x69402
int32_t function_693fd(void) {
    uint32_t v1 = g6; // 0x693fd
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69403 - 0x6940b
int32_t function_69403(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69403
    g4 = result;
    uint32_t v1 = g6; // 0x69406
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69417 - 0x6941c
int32_t function_69417(void) {
    // 0x69417
    return g4;
}

// Address range: 0x69421 - 0x69427
int32_t function_69421(void) {
    int32_t v1 = g4; // 0x69421
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69423
    g4 = result;
    return result;
}

// Address range: 0x6942a - 0x6942d
int32_t function_6942a(void) {
    // 0x6942a
    return g4;
}

// Address range: 0x6942d - 0x69432
int32_t function_6942d(void) {
    uint32_t v1 = g6; // 0x6942d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69433 - 0x6943b
int32_t function_69433(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69433
    g4 = result;
    uint32_t v1 = g6; // 0x69436
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69447 - 0x6944c
int32_t function_69447(void) {
    // 0x69447
    return g4;
}

// Address range: 0x69450 - 0x69475
int32_t function_69450(void) {
    // 0x69450
    *(int32_t *)(g5 - 32) = g7;
    *(int16_t *)&g301 = (int16_t)&g863;
    *(int16_t *)&g302 = (int16_t)&g863;
    *(int16_t *)&g303 = (int16_t)&g863;
    return g4;
}

// Address range: 0x69479 - 0x69481
int32_t function_69479(void) {
    int32_t v1 = g8; // 0x69479
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    int32_t result = g4 + 1; // 0x6947d
    g4 = result;
    return result;
}

// Address range: 0x69481 - 0x69489
int32_t function_69481(void) {
    // 0x69481
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x69491 - 0x69497
int32_t function_69491(void) {
    int32_t v1 = g4; // 0x69491
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69493
    g4 = result;
    return result;
}

// Address range: 0x6949a - 0x6949d
int32_t function_6949a(void) {
    // 0x6949a
    return g4;
}

// Address range: 0x6949d - 0x694a2
int32_t function_6949d(void) {
    uint32_t v1 = g6; // 0x6949d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x694a3 - 0x694ab
int32_t function_694a3(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x694a3
    g4 = result;
    uint32_t v1 = g6; // 0x694a6
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x694b7 - 0x694bc
int32_t function_694b7(void) {
    // 0x694b7
    return g4;
}

// Address range: 0x694c0 - 0x69525
int32_t function_694c0(void) {
    // 0x694c0
    g4 = function_68a00(g6, g10);
    g9 = g715;
    if (g715 == 0) {
        // bb
        g4 = function_69730();
    }
    // 0x694db
    g4 = (int32_t)&g301;
    int32_t v1; // 0x694ed
    if (*(int16_t *)(g5 - 26) != -1) {
        int32_t v2 = *(int32_t *)(g6 + 4); // 0x694e7
        g7 = v2;
        v1 = 12 * g10 + v2;
        g4 = v1;
    } else {
        v1 = (int32_t)&g301;
    }
    int32_t v3 = (int32_t)*(int16_t *)(v1 + 4); // 0x694f2
    g10 = v3;
    int32_t v4; // 0x694fc
    if ((char)g9 == 0) {
        // bb6
        g4 = function_697b0();
        v4 = g10;
    } else {
        v4 = v3;
    }
    int32_t v5; // 0x69509
    if ((int16_t)v4 == -1) {
        // bb7
        g4 = function_697f0();
        v5 = g10;
    } else {
        v5 = v4;
    }
    int32_t v6 = *(int32_t *)(g6 + 4); // 0x69506
    g8 = v6;
    int32_t v7 = v5 & (int32_t)&g863; // 0x69509
    g10 = v7;
    int32_t v8 = 12 * v7 + v6; // 0x6950f
    g4 = v8;
    g9 = v8;
    uint16_t v9 = *(int16_t *)(v8 + 4); // 0x69514
    g9 = v9;
    g8 = (int32_t)*(int16_t *)(g5 - 26);
    *(int16_t *)(g5 - 28) = v9;
    return g4;
}

// Address range: 0x69529 - 0x6952f
int32_t function_69529(void) {
    int32_t v1 = g4; // 0x69529
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x6952b
    g4 = result;
    return result;
}

// Address range: 0x69532 - 0x69535
int32_t function_69532(void) {
    // 0x69532
    return g4;
}

// Address range: 0x69535 - 0x6953a
int32_t function_69535(void) {
    uint32_t v1 = g6; // 0x69535
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6953b - 0x69543
int32_t function_6953b(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x6953b
    g4 = result;
    uint32_t v1 = g6; // 0x6953e
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6954f - 0x69554
int32_t function_6954f(void) {
    // 0x6954f
    return g4;
}

// Address range: 0x69558 - 0x69562
int32_t function_69558(void) {
    // 0x69558
    *(int32_t *)(g5 - 32) = g7;
    return g4;
}

// Address range: 0x69571 - 0x69574
int32_t function_69571(void) {
    // 0x69571
    return g4;
}

// Address range: 0x69575 - 0x69578
int32_t function_69575(void) {
    // 0x69575
    return g4;
}

// Address range: 0x69578 - 0x6957d
int32_t function_69578(void) {
    uint32_t v1 = g6; // 0x69578
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6957e - 0x69586
int32_t function_6957e(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x6957e
    g4 = result;
    uint32_t v1 = g6; // 0x69581
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6958a - 0x69594
int32_t function_6958a(void) {
    int32_t v1 = g6; // 0x6958a
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x6958e
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x69590
    g4 = result;
    return result;
}

// Address range: 0x69599 - 0x695a1
int32_t function_69599(void) {
    // 0x69599
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x695a8 - 0x695af
int32_t function_695a8(void) {
    // 0x695a8
    return g4;
}

// Address range: 0x695b3 - 0x695c3
int32_t function_695b3(void) {
    // 0x695b3
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x3b7af040); // 0x695b3
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x695b9
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x695bf
    g4 = result;
    return result;
}

// Address range: 0x695c3 - 0x695c8
int32_t function_695c3(void) {
    // 0x695c3
    return g4;
}

// Address range: 0x695d0 - 0x695da
int32_t function_695d0(void) {
    // 0x695d0
    *(int32_t *)(g5 - 32) = g7;
    return g4;
}

// Address range: 0x695e9 - 0x695ec
int32_t function_695e9(void) {
    // 0x695e9
    return g4;
}

// Address range: 0x695ed - 0x695f0
int32_t function_695ed(void) {
    // 0x695ed
    return g4;
}

// Address range: 0x695f0 - 0x695f5
int32_t function_695f0(void) {
    uint32_t v1 = g6; // 0x695f0
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x695f6 - 0x695fe
int32_t function_695f6(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x695f6
    g4 = result;
    uint32_t v1 = g6; // 0x695f9
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69602 - 0x6960c
int32_t function_69602(void) {
    int32_t v1 = g6; // 0x69602
    g6 = 2 * v1 & 0xfe00 | v1 & -0xff01;
    g8++;
    int32_t v2 = g4; // 0x69606
    int32_t result = ((v2 + 36) % 256 | v2 & -256) + 1; // 0x69608
    g4 = result;
    return result;
}

// Address range: 0x69611 - 0x69619
int32_t function_69611(void) {
    // 0x69611
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x69620 - 0x69627
int32_t function_69620(void) {
    // 0x69620
    return g4;
}

// Address range: 0x6962b - 0x6963b
int32_t function_6962b(void) {
    // 0x6962b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x1c850fc0); // 0x6962b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69631
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x69637
    g4 = result;
    return result;
}

// Address range: 0x6963b - 0x69640
int32_t function_6963b(void) {
    // 0x6963b
    return g4;
}

// Address range: 0x69641 - 0x69647
int32_t function_69641(void) {
    int32_t v1 = g4; // 0x69641
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69643
    g4 = result;
    return result;
}

// Address range: 0x6964a - 0x6964d
int32_t function_6964a(void) {
    // 0x6964a
    return g4;
}

// Address range: 0x6964d - 0x69652
int32_t function_6964d(void) {
    uint32_t v1 = g6; // 0x6964d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69653 - 0x6965b
int32_t function_69653(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69653
    g4 = result;
    uint32_t v1 = g6; // 0x69656
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69667 - 0x6966c
int32_t function_69667(void) {
    // 0x69667
    return g4;
}

// Address range: 0x69670 - 0x696d4
int32_t function_69670(void) {
    // 0x69670
    g4 = function_68510(0x1000000 * g6 / 0x1000000, g10);
    g9 = g715;
    if (g715 == 0) {
        // bb
        g4 = function_69706();
    }
    // 0x69687
    g4 = (int32_t)&g301;
    int32_t result; // 0x69699
    if (*(int16_t *)(g5 - 26) != -1) {
        int32_t v1 = *(int32_t *)(g6 + 4); // 0x69693
        g7 = v1;
        result = 12 * g10 + v1;
        g4 = result;
    } else {
        result = (int32_t)&g301;
    }
    uint16_t v2 = *(int16_t *)(result + 4); // 0x6969e
    int32_t v3 = v2; // 0x6969e
    g10 = v3;
    if ((char)g9 == 0) {
        // 0x696cd
        return result;
    }
    int32_t v4; // 0x696b1
    int32_t v5; // 0x696c4
    if (v2 == -1) {
        // bb8
        g4 = function_69802();
        v5 = g5;
        v4 = g10;
    } else {
        v5 = g5;
        v4 = v3;
    }
    int32_t v6 = *(int32_t *)(g6 + 4); // 0x696ae
    g8 = v6;
    int32_t v7 = v4 & (int32_t)&g863; // 0x696b1
    g10 = v7;
    int32_t v8 = 12 * v7 + v6; // 0x696b7
    g9 = v8;
    g4 = v8;
    uint16_t v9 = *(int16_t *)(v8 + 4); // 0x696bc
    g9 = v9;
    g8 = (int32_t)*(int16_t *)(v5 - 26);
    *(int16_t *)(v5 - 28) = v9;
    return g4;
}

// Address range: 0x696d8 - 0x696e4
int32_t function_696d8(void) {
    // 0x696d8
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38388b40); // 0x696d8
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x696de
    int32_t result = ((v3 + 36) % 256 | v3 & -256) + 1; // 0x696e0
    g4 = result;
    return result;
}

// Address range: 0x696e7 - 0x696ea
int32_t function_696e7(void) {
    // 0x696e7
    return g4;
}

// Address range: 0x696ea - 0x696ef
int32_t function_696ea(void) {
    uint32_t v1 = g6; // 0x696ea
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x696f0 - 0x696f8
int32_t function_696f0(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x696f0
    g4 = result;
    uint32_t v1 = g6; // 0x696f3
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69704 - 0x69706
int32_t function_69704(void) {
    // 0x69704
    return g4;
}

// Address range: 0x69706 - 0x6970d
int32_t function_69706(void) {
    // 0x69706
    return g4;
}

// Address range: 0x69711 - 0x69721
int32_t function_69711(void) {
    // 0x69711
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x57af040); // 0x69711
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69717
    *(char *)v3 = (char)v3 + *(char *)&g4;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x6971d
    g4 = result;
    return result;
}

// Address range: 0x69721 - 0x69726
int32_t function_69721(void) {
    // 0x69721
    return g4;
}

// Address range: 0x69730 - 0x69737
int32_t function_69730(void) {
    // 0x69730
    return g4;
}

// Address range: 0x6973b - 0x6974b
int32_t function_6973b(void) {
    // 0x6973b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x37af040); // 0x6973b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x69741
    *(char *)v3 = (char)v3 + *(char *)&g4;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    int32_t result = g4 + 1; // 0x69747
    g4 = result;
    return result;
}

// Address range: 0x6974b - 0x69750
int32_t function_6974b(void) {
    // 0x6974b
    return g4;
}

// Address range: 0x69751 - 0x69757
int32_t function_69751(void) {
    int32_t v1 = g4; // 0x69751
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69753
    g4 = result;
    return result;
}

// Address range: 0x6975a - 0x6975d
int32_t function_6975a(void) {
    // 0x6975a
    return g4;
}

// Address range: 0x6975d - 0x69762
int32_t function_6975d(void) {
    uint32_t v1 = g6; // 0x6975d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69763 - 0x6976b
int32_t function_69763(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69763
    g4 = result;
    uint32_t v1 = g6; // 0x69766
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69777 - 0x6977c
int32_t function_69777(void) {
    // 0x69777
    return g4;
}

// Address range: 0x69781 - 0x69787
int32_t function_69781(void) {
    int32_t v1 = g4; // 0x69781
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69783
    g4 = result;
    return result;
}

// Address range: 0x6978a - 0x6978d
int32_t function_6978a(void) {
    // 0x6978a
    return g4;
}

// Address range: 0x6978d - 0x69792
int32_t function_6978d(void) {
    uint32_t v1 = g6; // 0x6978d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69793 - 0x6979b
int32_t function_69793(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69793
    g4 = result;
    uint32_t v1 = g6; // 0x69796
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x697a7 - 0x697ac
int32_t function_697a7(void) {
    // 0x697a7
    return g4;
}

// Address range: 0x697b0 - 0x697b7
int32_t function_697b0(void) {
    // 0x697b0
    return g4;
}

// Address range: 0x697c3 - 0x697cb
int32_t function_697c3(void) {
    // 0x697c3
    g8++;
    int32_t v1 = g4; // 0x697c5
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x697c7
    g4 = result;
    return result;
}

// Address range: 0x697ce - 0x697d1
int32_t function_697ce(void) {
    // 0x697ce
    return g4;
}

// Address range: 0x697d1 - 0x697d6
int32_t function_697d1(void) {
    uint32_t v1 = g6; // 0x697d1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x697d7 - 0x697df
int32_t function_697d7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x697d7
    g4 = result;
    uint32_t v1 = g6; // 0x697da
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x697eb - 0x697f0
int32_t function_697eb(void) {
    // 0x697eb
    return g4;
}

// Address range: 0x697f0 - 0x69802
int32_t function_697f0(void) {
    // 0x697f0
    g9 = (int32_t)&g301;
    int32_t result = *(int32_t *)(g6 + 4) + 0xbfff4; // 0x697f8
    g4 = result;
    return result;
}

// Address range: 0x69802 - 0x69814
int32_t function_69802(void) {
    // 0x69802
    g9 = (int32_t)&g301;
    int32_t result = *(int32_t *)(g6 + 4) + 0xbfff4; // 0x6980a
    g4 = result;
    return result;
}

// Address range: 0x69815 - 0x6981b
int32_t function_69815(void) {
    int32_t v1 = g4; // 0x69815
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69817
    g4 = result;
    return result;
}

// Address range: 0x6981e - 0x69821
int32_t function_6981e(void) {
    // 0x6981e
    return g4;
}

// Address range: 0x69821 - 0x69826
int32_t function_69821(void) {
    uint32_t v1 = g6; // 0x69821
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69827 - 0x6982f
int32_t function_69827(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69827
    g4 = result;
    uint32_t v1 = g6; // 0x6982a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x6983b - 0x69840
int32_t function_6983b(void) {
    // 0x6983b
    return g4;
}

// Address range: 0x69841 - 0x69847
int32_t function_69841(void) {
    int32_t v1 = g4; // 0x69841
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x69843
    g4 = result;
    return result;
}

// Address range: 0x6984a - 0x6984d
int32_t function_6984a(void) {
    // 0x6984a
    return g4;
}

// Address range: 0x6984d - 0x69852
int32_t function_6984d(void) {
    uint32_t v1 = g6; // 0x6984d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x69853 - 0x6985b
int32_t function_69853(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x69853
    g4 = result;
    uint32_t v1 = g6; // 0x69856
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69867 - 0x6986c
int32_t function_69867(void) {
    // 0x69867
    return g4;
}

// Address range: 0x69870 - 0x6998f
int32_t function_69870(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x69873
    int32_t v2 = g10; // 0x69874
    int32_t v3 = g6; // 0x69875
    g6 = a1;
    uint16_t v4 = *(int16_t *)(a1 + 16); // 0x6987c
    int32_t v5 = v4; // 0x6987c
    g10 = v5;
    if (v4 == -1) {
        int32_t result = function_69a19((int32_t)v4); // 0x6988a
        g4 = result;
        return result;
    }
    int32_t result3; // 0x698d7
    while (true) {
        // 0x698b3
        g4 = v5;
        g8 = 3 * v5;
        int32_t v6 = 12 * v5; // 0x698c0
        g10 = v6;
        g4 = a2;
        result3 = function_66de0(0x1000000 * a1 / 0x1000000, a2, *(int32_t *)(a1 + 4) + v6 + 8);
        g4 = result3;
        int32_t v7; // 0x69900
        if ((char)result3 != 0) {
            if (g715 == 0) {
                // break -> 0x69988
                break;
            }
            int32_t v8 = g6; // 0x6989d
            int32_t v9 = *(int32_t *)(v8 + 4); // 0x6989d
            g4 = v9;
            uint16_t v10 = *(int16_t *)(4 * g8 + v9); // 0x698a0
            int32_t v11 = v10; // 0x698a0
            g4 = v11;
            g8 = 1;
            if (v10 != -1) {
                a1 = v8;
                v5 = v11;
                // continue -> 0x698b3
                continue;
            }
            // 0x6989d
            v7 = v8;
          lab_0x698fd:;
            int32_t v12 = function_68400(0x1000000 * v7 / 0x1000000); // 0x69903
            g10 = v5;
            int32_t v13 = v12 & (int32_t)&g863; // 0x6990c
            g9 = v13;
            g7 = v12;
            int32_t v14 = 12 * v13; // 0x69914
            g4 = v14;
            int32_t v15 = *(int32_t *)(g6 + 4) + v14; // 0x6991a
            g4 = v15;
            int16_t v16 = v5; // 0x6991d
            *(int16_t *)(v15 + 4) = v16;
            *(int16_t *)(g4 + 2) = (int16_t)&g863;
            *(int16_t *)g4 = (int16_t)&g863;
            *(int16_t *)(g4 + 6) = 0;
            if (v16 == -1) {
                // bb34
                g4 = function_69a49();
            }
            int32_t v17 = g8; // 0x6993c
            g4 = v17;
            int32_t v18 = *(int32_t *)(g6 + 4); // 0x69943
            g4 = v18;
            int32_t v19; // 0x69946
            if ((char)v17 != 0) {
                // bb35
                v19 = function_69a10();
                g4 = v19;
            } else {
                v19 = v18;
            }
            // 0x6994c
            *(int16_t *)(g10 + 2 + v19) = (int16_t)g7;
            int32_t v20 = g7; // 0x69951
            function_68ec0(0x1000000 * g6 / 0x1000000, g9);
            g4 = v14;
            int16_t * v21 = (int16_t *)(g6 + 18); // 0x69963
            *v21 = *v21 + 1;
            int32_t v22 = *(int32_t *)(g6 + 4) + g4; // 0x69968
            g4 = v22;
            g7 = v20;
            int32_t v23 = v22 + 8; // 0x6996e
            int32_t result2; // 0x6997e
            if (v23 != 0) {
                // 0x69973
                g6 = a2;
                int32_t v24 = *(int32_t *)a2; // 0x69976
                g9 = v24;
                *(int32_t *)v23 = v24;
                result2 = g7;
            } else {
                result2 = v20;
            }
            // 0x6997b
            g4 = result2;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result2;
        }
        if (g715 == 0) {
            // bb
            g4 = function_699d0();
        }
        int32_t v25 = g6; // 0x698ed
        int32_t v26 = *(int32_t *)(v25 + 4); // 0x698ed
        g4 = v26;
        g8 = 0;
        int32_t v27 = g10; // 0x698f2
        uint16_t v28 = *(int16_t *)(v26 + 2 + v27); // 0x698f2
        int32_t v29 = v28; // 0x698f2
        g4 = v29;
        if (v28 == -1) {
            v7 = v25;
            g10 = v27;
            goto lab_0x698fd;
        }
        a1 = v25;
        v5 = v29;
    }
    // 0x69988
    return result3;
}

// Address range: 0x6999b - 0x699a3
int32_t function_6999b(void) {
    // 0x6999b
    g8++;
    int32_t v1 = g4; // 0x6999d
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x6999f
    g4 = result;
    return result;
}

// Address range: 0x699a6 - 0x699a9
int32_t function_699a6(void) {
    // 0x699a6
    return g4;
}

// Address range: 0x699a9 - 0x699ae
int32_t function_699a9(void) {
    uint32_t v1 = g6; // 0x699a9
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x699af - 0x699b7
int32_t function_699af(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x699af
    g4 = result;
    uint32_t v1 = g6; // 0x699b2
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x699c3 - 0x699c8
int32_t function_699c3(void) {
    // 0x699c3
    return g4;
}

// Address range: 0x699d0 - 0x699d7
int32_t function_699d0(void) {
    // 0x699d0
    return g4;
}

// Address range: 0x699e3 - 0x699eb
int32_t function_699e3(void) {
    // 0x699e3
    g8++;
    int32_t v1 = g4; // 0x699e5
    int32_t result = ((v1 + 36) % 256 | v1 & -256) + 1; // 0x699e7
    g4 = result;
    return result;
}

// Address range: 0x699ee - 0x699f1
int32_t function_699ee(void) {
    // 0x699ee
    return g4;
}

// Address range: 0x699f1 - 0x699f6
int32_t function_699f1(void) {
    uint32_t v1 = g6; // 0x699f1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x699f7 - 0x699ff
int32_t function_699f7(void) {
    int32_t result = *(int32_t *)(g4 + 10); // 0x699f7
    g4 = result;
    uint32_t v1 = g6; // 0x699fa
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return result;
}

// Address range: 0x69a0b - 0x69a10
int32_t function_69a0b(void) {
    // 0x69a0b
    return g4;
}

// Address range: 0x69a10 - 0x69a19
int32_t function_69a10(void) {
    // 0x69a10
    *(int16_t *)(g10 + g4) = (int16_t)g7;
    return g4;
}

// Address range: 0x69a19 - 0x69a49
int32_t function_69a19(int32_t a1) {
    int32_t v1 = function_68400(g6); // 0x69a1c
    int32_t v2 = v1 & (int32_t)&g863; // 0x69a21
    g9 = v2;
    g7 = v1;
    int32_t v3 = 12 * v2; // 0x69a29
    g4 = v3;
    *(int32_t *)(g5 - 32) = v3;
    int32_t v4 = *(int32_t *)(g6 + 4) + g4; // 0x69a2f
    g4 = v4;
    *(int16_t *)(v4 + 4) = (int16_t)&g863;
    *(int16_t *)(g4 + 2) = (int16_t)&g863;
    *(int16_t *)g4 = (int16_t)&g863;
    *(int16_t *)(g4 + 6) = 0;
    return g4;
}

// Address range: 0x69a49 - 0x69a52
int32_t function_69a49(void) {
    // 0x69a49
    *(int16_t *)(g6 + 16) = (int16_t)g7;
    return g4;
}

// Address range: 0x69a60 - 0x69a81
int32_t function_69a60(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a2;
    g4 = a1;
    int32_t v2 = *(int32_t *)a1; // 0x69a72
    g4 = v2;
    int32_t result = function_2cc30(v2, (char *)*(int32_t *)a2) < 0; // 0x69a7d
    g4 = result;
    return result;
}

// Address range: 0x69a81 - 0x69ab1
int32_t function_69a81(int32_t a1, int32_t a2) {
    g4 = a2;
    g4 = a1;
    int32_t v1 = *(int32_t *)a1; // 0x69aa2
    g4 = v1;
    int32_t result = function_2cbd0(v1, *(int32_t *)a2) < 0; // 0x69aad
    g4 = result;
    return result;
}

// Address range: 0x69ac2 - 0x69ade
int32_t function_69ac2(void) {
    // 0x69ac2
    *(int32_t *)(g11 - 32) = g8;
    int16_t v1; // cs
    *(int16_t *)(g11 - 36) = v1;
    int32_t v2; // ebp
    int32_t v3;
    g4 = unknown_e5890006(g10, v2, &v3, g6, g9, g7, g4);
    char v4 = __asm_in_1653((int16_t)g9); // 0x69aca
    bool v5; // cf
    g4 = (int32_t)(v4 - 117 + (char)v5) | (g4 | (int32_t)v4) & -256;
    int32_t * v6 = (int32_t *)(g11 - 4); // 0x69acd
    *v6 = v2;
    int32_t v7 = g4; // 0x69ace
    unsigned char v8 = (char)v7 | -117; // 0x69ace
    g4 = (int32_t)v8 | v7 & -256;
    char * v9 = (char *)(*v6 - 0x656f452e); // 0x69ad1
    *v9 = *v9 | v8;
    int16_t v10; // es
    *(int16_t *)(g11 - 2) = v10;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    return g4;
}

// Address range: 0x69b30 - 0x69b3c
int32_t function_69b30(int32_t a1) {
    // 0x69b30
    g4 = a1;
    int32_t result = (int32_t)*(int16_t *)(a1 + 18); // 0x69b37
    g4 = result;
    return result;
}

// Address range: 0x69b40 - 0x69b66
int32_t function_69b40(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // 0x69b40
    g9 = a1;
    g4 = a2;
    int32_t v2 = *(int32_t *)(a1 + 48); // 0x69b49
    g7 = v2;
    g5 = v1;
    if (v2 == 0) {
        int32_t result = function_34f10(v1); // 0x69b61
        g4 = result;
        return result;
    }
    int32_t result2 = function_34eb0(v1); // 0x69b54
    g4 = result2;
    return result2;
}

// Address range: 0x69b70 - 0x69be7
int32_t function_69b70(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x69b73
    int32_t v2 = g10; // 0x69b74
    int32_t v3 = g6; // 0x69b75
    g6 = 0;
    g10 = a2;
    g8 = a1;
    int32_t result; // 0x69be0
    if (a2 == 0) {
        result = 0;
        // 0x69bdd
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x69b85
    g4 = a2;
    int32_t v4 = function_69b40(a1, a2); // 0x69b8f
    g4 = v4;
    int32_t v5 = g8; // 0x69b94
    int32_t v6 = *(int32_t *)(v5 + 4); // 0x69b94
    g9 = v6;
    int32_t v7 = v4 & (int32_t)&g91; // 0x69b97
    g4 = v7;
    uint16_t v8 = *(int16_t *)(v6 + 2 * v7); // 0x69b9c
    int32_t v9 = v8; // 0x69b9c
    g6 = v9;
    if (v8 == 0) {
        result = v9;
        // 0x69bdd
        g4 = result;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v10 = *(int32_t *)(v5 + 24); // 0x69ba5
    g4 = v10;
    g10 = a2;
    while (true) {
        int32_t v11 = v9 & (int32_t)&g863; // 0x69bb0
        g9 = v11;
        int32_t v12 = 8 * v11; // 0x69bb3
        g10 = v12;
        g4 = a2;
        int32_t v13 = function_2cc30(a2, (char *)*(int32_t *)(v12 + v10)); // 0x69bc7
        g4 = v13;
        if (v13 == 0) {
            // break -> 0x69bb0
            break;
        }
        int32_t v14 = *(int32_t *)(g8 + 24); // 0x69bd0
        g4 = v14;
        uint16_t v15 = *(int16_t *)(v14 + 4 + g10); // 0x69bd3
        int32_t v16 = v15; // 0x69bd3
        g6 = v16;
        if (v15 == 0) {
            result = v16;
            // 0x69bdd
            g4 = result;
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        v10 = v14;
        v9 = v16;
    }
    // 0x69bb0
    result = g6;
    // 0x69bdd
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x69bf0 - 0x69c1e
int32_t function_69bf0(int32_t a1, int32_t a2) {
    g4 = 0;
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x69bf5
    g9 = a2;
    g6 = a1;
    int32_t result; // 0x69c15
    if (a2 != 0) {
        int32_t v3 = function_69b70(a1, a2); // 0x69c0a
        g4 = v3;
        int32_t v4 = *(int32_t *)(g6 + 24); // 0x69c0f
        g9 = v4;
        int32_t v5 = v3 & (int32_t)&g863; // 0x69c12
        g4 = v5;
        result = *(int32_t *)(v4 + 8 * v5);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x69c18
    g6 = v2;
    return result;
}

// Address range: 0x69c20 - 0x69d33
int32_t function_69c20(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x69c23
    int32_t v2 = g10; // 0x69c24
    int32_t v3 = g6; // 0x69c25
    g8 = a2;
    g6 = a1;
    if (a2 == 0) {
        // 0x69cc0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x69c37
    g7 = a2;
    uint32_t v4 = function_69b40(a1, a2); // 0x69c41
    g4 = v4;
    g9 = 0;
    int32_t v5 = g6; // 0x69c48
    uint32_t v6 = *(int32_t *)(v5 + 16); // 0x69c48
    g4 = v4 / v6;
    int32_t v7 = v4 % v6;
    g9 = v7;
    int32_t result = *(int32_t *)(v5 + 4); // 0x69c4b
    g4 = result;
    int32_t v8 = v7 & (int32_t)&g863; // 0x69c4e
    g9 = v8;
    int32_t v9 = 2 * v8; // 0x69c51
    uint16_t v10 = *(int16_t *)(result + v9); // 0x69c51
    int32_t v11 = v10; // 0x69c51
    g10 = v11;
    if (v10 == 0) {
        // 0x69cc0
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v12 = *(int32_t *)(v5 + 24); // 0x69c5d
    g4 = v12;
    int16_t v13 = 0;
    int32_t result2; // 0x69cab
    while (true) {
        int32_t v14 = v11 & (int32_t)&g863; // 0x69c76
        g9 = v14;
        g7 = a2;
        int32_t v15 = 8 * v14; // 0x69c7c
        int32_t v16 = *(int32_t *)(v15 + v12); // 0x69c7c
        g4 = v16;
        g8 = v15;
        int32_t v17 = function_2cc30(a2, (char *)v16); // 0x69c8d
        g4 = v17;
        int32_t v18 = *(int32_t *)(g6 + 24); // 0x69c94
        g4 = v18;
        int32_t v19 = g8 + v18; // 0x69c97
        g9 = v19;
        int32_t v20; // 0x69cae
        if (v17 == 0) {
            char * v21 = (char *)(v19 + 6); // 0x69c9c
            unsigned char v22 = *v21; // 0x69c9c
            int32_t v23 = v22; // 0x69c9c
            g7 = v23;
            if (v22 != -1) {
                int32_t v24 = v23 - 1; // 0x69ca5
                g7 = v24;
                *v21 = (char)v24;
                int32_t v25 = g6; // 0x69cab
                result2 = *(int32_t *)(v25 + 24);
                g4 = result2;
                v20 = g8 + result2;
                g9 = v20;
                if (*(char *)(v20 + 6) == 0) {
                    uint16_t v26 = *(int16_t *)(v20 + 4); // 0x69cd5
                    g9 = v26;
                    if (v13 != 0) {
                        int32_t v27 = v13; // 0x69d28
                        g7 = v27;
                        *(int16_t *)(result2 + (8 * v27 | 4)) = v26;
                        goto lab_0x69ce5;
                    } else {
                        int32_t v28 = *(int32_t *)(v25 + 4); // 0x69cdb
                        g4 = v28;
                        g7 = v8;
                        *(int16_t *)(v28 + v9) = v26;
                        goto lab_0x69ce5;
                    }
                }
            } else {
                v20 = v19;
                result2 = v18;
            }
        } else {
            v20 = v19;
            result2 = v18;
        }
        uint16_t v29 = *(int16_t *)(v20 + 4); // 0x69cb7
        int32_t v30 = v29; // 0x69cb7
        g9 = v30;
        if (v29 == 0) {
            // break -> 0x69cc0
            break;
        }
        int16_t v31 = g10; // 0x69c70
        g10 = v30;
        v12 = result2;
        v11 = v30;
        v13 = v31;
    }
    // 0x69cc0
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x69ce5:;
    int32_t v32 = g8 + *(int32_t *)(g6 + 24); // 0x69ce8
    g4 = v32;
    int32_t v33 = *(int32_t *)v32; // 0x69cea
    g9 = v33;
    if (v33 == 0) {
        goto lab_0x69cfd;
    } else {
        // 0x69cf0
        g4 = function_1bca0(v33);
        int32_t v34 = g8 + *(int32_t *)(g6 + 24); // 0x69cfb
        g4 = v34;
        v32 = v34;
        goto lab_0x69cfd;
    }
  lab_0x69cfd:
    // 0x69cfd
    *(int32_t *)v32 = 0;
    int32_t v35 = *(int32_t *)(g6 + 24); // 0x69d03
    g4 = v35;
    *(char *)(v35 + 6 + g8) = 0;
    int32_t v36 = g6; // 0x69d0b
    uint16_t v37 = *(int16_t *)(v36 + 44); // 0x69d0b
    g9 = v37;
    int32_t v38 = *(int32_t *)(v36 + 24); // 0x69d0f
    g4 = v38;
    *(int16_t *)(v38 + 4 + g8) = v37;
    *(int16_t *)(g6 + 44) = (int16_t)g10;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x69d40 - 0x69d52
int32_t function_69d40(int32_t a1, uint32_t a2) {
    // 0x69d40
    g4 = a1;
    int32_t v1 = a2 % 0x10000; // 0x69d46
    g9 = v1;
    int32_t v2 = *(int32_t *)(a1 + 24); // 0x69d4b
    g4 = v2;
    int32_t result = *(int32_t *)(v2 + 8 * v1); // 0x69d4e
    g4 = result;
    return result;
}

// Address range: 0x69d9c - 0x69d9f
int32_t function_69d9c(void) {
    int32_t v1 = g4; // 0x69d9c
    int32_t result = v1 + 131 & 255 | v1 & -256; // 0x69d9c
    g4 = result;
    return result;
}

// Address range: 0x69dc6 - 0x69dcf
int32_t function_69dc6(int32_t a1, int32_t a2) {
    int32_t * v1 = (int32_t *)(g6 + 0x5e5b1cc4); // 0x69dc6
    *v1 = *v1 + 1;
    g8 = a1;
    return g4;
}

// Address range: 0x69dd0 - 0x69faf
int32_t function_69dd0(int32_t a1, int32_t a2) {
    // 0x69dd0
    g4 = 1;
    g10 = a1;
    g6 = a2;
    int32_t v1; // 0x69dee
    if (*(int32_t *)(a1 + 36) <= 1) {
        int32_t v2 = function_6a0d2((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x69de8
        g4 = v2;
        v1 = g6;
    } else {
        v1 = a2;
    }
    // 0x69dee
    int32_t v3; // 0x69e08
    if (*(char *)(v1 + 21) % 2 == 0) {
        // bb51
        g4 = function_6a0e0();
        v3 = g6;
    } else {
        v3 = v1;
    }
    // 0x69df8
    g4 = function_32570(v3, "%d");
    int32_t v4 = g6; // 0x69e10
    g8 = (int32_t)*(int16_t *)(g10 + 44);
    int32_t v5; // 0x69e2a
    if (*(char *)(v4 + 21) % 2 != 0) {
        // bb52
        g4 = function_6a13b();
        v5 = g6;
    } else {
        v5 = v4;
    }
    int32_t v6 = function_320f0(v5, 2); // 0x69e2d
    g4 = v6;
    if ((char)v6 != 0) {
        int32_t v7 = g6; // 0x69e36
        int32_t v8 = *(int32_t *)(v7 + 16); // 0x69e3a
        g4 = v8;
        int32_t v9; // 0x69e46
        int32_t v10; // 0x69e3d
        if (*(char *)(v7 + 52) % 2 != 0) {
            // bb53
            v10 = function_6a2b0();
            g4 = v10;
            v9 = g6;
        } else {
            v9 = v7;
            v10 = v8;
        }
        int32_t v11 = v10 - *(int32_t *)(v9 + 32); // 0x69e43
        g4 = v11;
        int32_t v12 = *(int32_t *)v9; // 0x69e46
        g9 = v12;
        *(int16_t *)(v12 + v11) = (int16_t)g8;
        int32_t * v13 = (int32_t *)(g6 + 16); // 0x69e4c
        int32_t v14 = *v13 + 2; // 0x69e4f
        g4 = v14;
        *v13 = v14;
        g4 = function_321d0(g6, g4);
    }
    int32_t v15 = g6; // 0x69e61
    g8 = *(int32_t *)(g10 + 16);
    int32_t v16; // 0x69e79
    if (*(char *)(v15 + 21) % 2 != 0) {
        // bb55
        g4 = function_6a15f();
        v16 = g6;
    } else {
        v16 = v15;
    }
    int32_t v17 = function_320f0(v16, 4); // 0x69e7c
    g4 = v17;
    if ((char)v17 != 0) {
        int32_t v18 = g6; // 0x69e85
        int32_t v19 = *(int32_t *)(v18 + 16); // 0x69e89
        g4 = v19;
        int32_t v20; // 0x69e95
        int32_t v21; // 0x69e8c
        if (*(char *)(v18 + 52) % 2 != 0) {
            // bb56
            v21 = function_6a2f0();
            g4 = v21;
            v20 = g6;
        } else {
            v20 = v18;
            v21 = v19;
        }
        int32_t v22 = v21 - *(int32_t *)(v20 + 32); // 0x69e92
        g4 = v22;
        int32_t v23 = *(int32_t *)v20; // 0x69e95
        g9 = v23;
        *(int32_t *)(v23 + v22) = g8;
        int32_t * v24 = (int32_t *)(g6 + 16); // 0x69e9a
        int32_t v25 = *v24 + 4; // 0x69e9d
        g4 = v25;
        *v24 = v25;
        g4 = function_321d0(g6, g4);
    }
    int32_t v26 = g10; // 0x69eaf
    int32_t v27 = *(int32_t *)(v26 + 16); // 0x69eaf
    g4 = v27;
    g8 = 0;
    g9 = v26;
    int32_t v28; // 0x69f4f
    if (v27 >= 0 == (v27 != 0)) {
        int32_t v29 = 0;
        int32_t v30 = v26;
        int32_t v31; // 0x69f49
        while (true) {
            int32_t * v32 = (int32_t *)(v30 + 16); // 0x69f44
            int32_t v33 = v29; // 0x69f2a
            int32_t v34; // 0x69f1a
            while (true) {
                int32_t v35 = *(int32_t *)(v30 + 4); // 0x69f17
                g4 = v35;
                v34 = g6;
                int32_t v36 = (int32_t)*(int16_t *)(v35 + 2 * v33); // 0x69f1e
                g10 = v36;
                if (*(char *)(v34 + 21) % 2 == 0) {
                    // break -> 0x69ec0
                    break;
                }
                // 0x69f24
                g10 = v36 & (int32_t)&g863;
                g8 = v33 + 1;
                g4 = function_32570(v34, "%hu");
                g9 = v30;
                int32_t v37 = g8; // 0x69f44
                if (*v32 <= v37) {
                    v31 = v30;
                    // break (via goto) -> 0x69f49
                    goto lab_0x69f49;
                }
                v33 = v37;
            }
            int32_t v38 = function_320f0(v34, 2); // 0x69ed2
            g4 = v38;
            g9 = v30;
            int32_t v39; // 0x69efd
            if ((char)v38 != 0) {
                int32_t v40 = g6; // 0x69ede
                int32_t v41 = *(int32_t *)(v40 + 16); // 0x69ee2
                g4 = v41;
                int32_t v42; // 0x69eee
                int32_t v43; // 0x69ee5
                if (*(char *)(v40 + 52) % 2 != 0) {
                    // bb58
                    v43 = function_6a180();
                    g4 = v43;
                    v42 = g6;
                } else {
                    v42 = v40;
                    v43 = v41;
                }
                int32_t v44 = v43 - *(int32_t *)(v42 + 32); // 0x69eeb
                g4 = v44;
                int32_t v45 = *(int32_t *)v42; // 0x69eee
                g7 = v45;
                *(int16_t *)(v45 + v44) = (int16_t)g10;
                int32_t * v46 = (int32_t *)(g6 + 16); // 0x69ef4
                int32_t v47 = *v46 + 2; // 0x69ef7
                g4 = v47;
                *v46 = v47;
                v39 = g9;
                g4 = function_321d0(g6, g4);
                g9 = v39;
            } else {
                v39 = v30;
            }
            int32_t v48 = g8 + 1; // 0x69f0f
            g8 = v48;
            if (*(int32_t *)(v39 + 16) <= v48) {
                v31 = v39;
                // break -> 0x69f49
                break;
            }
            v29 = v48;
            v30 = v39;
        }
      lab_0x69f49:
        // 0x69f49
        g10 = v31;
        v28 = v31;
    } else {
        v28 = v26;
    }
    int32_t v49 = g6; // 0x69f4b
    g8 = *(int32_t *)(v28 + 36);
    int32_t v50; // 0x69f63
    if (*(char *)(v49 + 21) % 2 != 0) {
        // bb61
        g4 = function_6a240();
        v50 = g6;
    } else {
        v50 = v49;
    }
    int32_t v51 = function_320f0(v50, 4); // 0x69f66
    g4 = v51;
    if ((char)v51 != 0) {
        int32_t v52 = g6; // 0x69f6f
        int32_t v53 = *(int32_t *)(v52 + 16); // 0x69f73
        g4 = v53;
        int32_t v54; // 0x69f7f
        int32_t v55; // 0x69f76
        if (*(char *)(v52 + 52) % 2 != 0) {
            // bb62
            v55 = function_6a260();
            g4 = v55;
            v54 = g6;
        } else {
            v54 = v52;
            v55 = v53;
        }
        int32_t v56 = v55 - *(int32_t *)(v54 + 32); // 0x69f7c
        g4 = v56;
        int32_t v57 = *(int32_t *)v54; // 0x69f7f
        g9 = v57;
        *(int32_t *)(v57 + v56) = g8;
        int32_t * v58 = (int32_t *)(g6 + 16); // 0x69f84
        int32_t v59 = *v58 + 4; // 0x69f87
        g4 = v59;
        *v58 = v59;
        g4 = function_321d0(g6, g4);
    }
    // 0x69f99
    if (*(int32_t *)(g10 + 36) > 1) {
        // bb65
        g4 = function_6a069();
    }
    int32_t result = function_6a228((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x69faa
    g4 = result;
    return result;
}

// Address range: 0x69fb0 - 0x6a00b
int32_t function_69fb0(void) {
    // 0x69fb0
    *(int16_t *)(g5 - 28) = (int16_t)g7;
    *(int32_t *)(g5 - 48) = g7;
    int32_t v1 = function_320f0(g6, 2); // 0x69fc2
    g4 = v1;
    int32_t v2 = *(int32_t *)(g5 - 48); // 0x69fc7
    g7 = v2;
    if ((char)v1 != 0) {
        int32_t v3 = g6; // 0x69fce
        int32_t v4 = *(int32_t *)(v3 + 16); // 0x69fd2
        g4 = v4;
        int32_t v5; // 0x69fe0
        int32_t v6; // 0x69fd5
        int32_t v7; // 0x69fde
        if (*(char *)(v3 + 52) % 2 != 0) {
            // bb
            v6 = function_6a1c0();
            g4 = v6;
            v5 = g7;
            v7 = g6;
        } else {
            v5 = v2;
            v7 = v3;
            v6 = v4;
        }
        int32_t v8 = v6 - *(int32_t *)(v7 + 32); // 0x69fdb
        g4 = v8;
        g9 = v7;
        *(int16_t *)(v8 + v7) = (int16_t)v5;
        int32_t * v9 = (int32_t *)(g6 + 16); // 0x69fe4
        int32_t v10 = *v9 + 2; // 0x69fe7
        g4 = v10;
        *v9 = v10;
        g4 = function_321d0(g6, g4);
    }
    int32_t result = *(int32_t *)(g10 + 24); // 0x69ff9
    g4 = result;
    g7 = (int32_t)*(char *)(result + 6 + g8);
    return result;
}

// Address range: 0x6a00b - 0x6a02a
int32_t function_6a00b(void) {
    // 0x6a00b
    *(char *)(g5 - 48) = (char)g7;
    int32_t result = function_320f0(g6, 1); // 0x6a019
    g4 = result;
    g7 = (int32_t)*(char *)(g5 - 48);
    return result;
}

// Address range: 0x6a02a - 0x6a033
int32_t function_6a02a(void) {
    int32_t result = *(int32_t *)(g10 + 24); // 0x6a02a
    g4 = result;
    g8 += result;
    return result;
}

// Address range: 0x6a069 - 0x6a0c6
int32_t function_6a069(void) {
    int32_t v1 = *(int32_t *)(g5 - 44); // 0x6a069
    g8 = v1;
    int32_t v2 = *(int32_t *)(g10 + 24); // 0x6a06c
    g4 = v2;
    int32_t v3 = 8 * v1; // 0x6a06f
    g8 = v3;
    int32_t v4 = g6; // 0x6a072
    int32_t v5 = (int32_t)*(int16_t *)((v3 | 4) + v2); // 0x6a076
    g7 = v5;
    int32_t v6; // 0x6a081
    int32_t v7; // 0x6a090
    if (*(char *)(v4 + 21) % 2 == 0) {
        // bb
        g4 = function_69fb0();
        v7 = g6;
        v6 = g7;
    } else {
        v7 = v4;
        v6 = v5;
    }
    // 0x6a081
    g7 = v6 & (int32_t)&g863;
    g4 = function_32570(v7, "%hu");
    int32_t v8 = *(int32_t *)(g10 + 24); // 0x6a098
    g4 = v8;
    int32_t v9 = g6; // 0x6a09b
    int32_t v10 = (int32_t)*(char *)(v8 + 6 + g8); // 0x6a09f
    g7 = v10;
    int32_t v11; // 0x6a0aa
    int32_t v12; // 0x6a0b9
    if (*(char *)(v9 + 21) % 2 == 0) {
        // bb12
        g4 = function_6a00b();
        v12 = g6;
        v11 = g7;
    } else {
        v12 = v9;
        v11 = v10;
    }
    // 0x6a0aa
    g7 = v11 & (int32_t)&g862;
    g4 = function_32570(v12, "%hu");
    int32_t result = function_6a02a(); // 0x6a0c1
    g4 = result;
    return result;
}

// Address range: 0x6a0d2 - 0x6a0da
int32_t function_6a0d2(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x6a0d2
    g6 = a1;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return g4;
}

// Address range: 0x6a0e0 - 0x6a13b
int32_t function_6a0e0(void) {
    // 0x6a0e0
    *(int32_t *)(g5 - 32) = 0x31505343;
    g4 = function_320f0(g6, 4);
    int32_t v1 = g6; // 0x6a0ff
    int32_t v2 = *(int32_t *)(v1 + 16); // 0x6a103
    g4 = v2;
    int32_t v3; // 0x6a106
    int32_t v4; // 0x6a10f
    if (*(char *)(v1 + 52) % 2 != 0) {
        // bb
        v3 = function_6a340();
        g4 = v3;
        v4 = g6;
    } else {
        v4 = v1;
        v3 = v2;
    }
    int32_t v5 = v3 - *(int32_t *)(v4 + 32); // 0x6a10c
    g4 = v5;
    g9 = v4;
    *(int32_t *)(v5 + v4) = 0x31505343;
    int32_t * v6 = (int32_t *)(g6 + 16); // 0x6a118
    int32_t v7 = *v6 + 4; // 0x6a11b
    g4 = v7;
    *v6 = v7;
    int32_t result = function_321d0(g6, g4); // 0x6a128
    g4 = result;
    g8 = (int32_t)*(int16_t *)(g10 + 44);
    return result;
}

// Address range: 0x6a13b - 0x6a15f
int32_t function_6a13b(void) {
    // 0x6a13b
    g8 &= (int32_t)&g863;
    int32_t result = function_32570(g6, "%hu"); // 0x6a14d
    g4 = result;
    g8 = *(int32_t *)(g10 + 16);
    return result;
}

// Address range: 0x6a15f - 0x6a178
int32_t function_6a15f(void) {
    int32_t result = function_32570(g6, "%d"); // 0x6a16e
    g4 = result;
    return result;
}

// Address range: 0x6a180 - 0x6a1c0
int32_t function_6a180(void) {
    int32_t v1 = g4; // 0x6a180
    g7 = v1;
    int32_t v2 = g6; // 0x6a182
    g7 = v1 - *(int32_t *)(v2 + 32) + v2;
    g4 = (int32_t)*(char *)(g5 - 31);
    *(int32_t *)(g5 - 48) = g9;
    *(char *)(g5 - 28) = (char)g4;
    *(char *)(g5 - 27) = *(char *)(g5 - 32);
    int32_t v3 = g5 - 28; // 0x6a1a9
    g4 = v3;
    g4 = function_2cb10(g7, v3, 2);
    int32_t result = *(int32_t *)(g6 + 16); // 0x6a1b5
    g4 = result;
    g9 = *(int32_t *)(g5 - 48);
    return result;
}

// Address range: 0x6a1c0 - 0x6a1fa
int32_t function_6a1c0(void) {
    int32_t v1 = g4; // 0x6a1c0
    g9 = v1;
    int32_t v2 = g6; // 0x6a1c2
    int32_t v3 = v1 - *(int32_t *)(v2 + 32) + v2; // 0x6a1c5
    g9 = v3;
    unsigned char v4 = *(char *)(g5 - 27); // 0x6a1cd
    g4 = v4;
    *(char *)(g5 - 32) = v4;
    *(char *)(g5 - 31) = *(char *)(g5 - 28);
    int32_t v5 = g5 - 32; // 0x6a1e6
    g4 = v5;
    g4 = function_2cb10(v3, v5, 2);
    int32_t result = *(int32_t *)(g6 + 16); // 0x6a1f2
    g4 = result;
    return result;
}

// Address range: 0x6a200 - 0x6a225
int32_t function_6a200(void) {
    int32_t v1 = g6; // 0x6a200
    int32_t v2 = *(int32_t *)(v1 + 16); // 0x6a200
    g4 = v2;
    g9 = v1;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32); // 0x6a205
    g4 = v3;
    *(char *)(v3 + v1) = (char)g7;
    int32_t * v4 = (int32_t *)(g6 + 16); // 0x6a20b
    int32_t v5 = *v4 + 1; // 0x6a20e
    g4 = v5;
    *v4 = v5;
    g4 = function_321d0(g6, g4);
    int32_t result = function_6a02a(); // 0x6a220
    g4 = result;
    return result;
}

// Address range: 0x6a228 - 0x6a237
int32_t function_6a228(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g4 & -256 | (int32_t)(*(char *)(g6 + 20) == 0); // 0x6a22c
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x6a240 - 0x6a259
int32_t function_6a240(void) {
    int32_t result = function_32570(g6, "%d"); // 0x6a24f
    g4 = result;
    return result;
}

// Address range: 0x6a260 - 0x6a2a8
int32_t function_6a260(void) {
    int32_t v1 = g4; // 0x6a260
    g9 = v1;
    int32_t v2 = g6; // 0x6a262
    int32_t v3 = v1 - *(int32_t *)(v2 + 32) + v2; // 0x6a265
    g9 = v3;
    unsigned char v4 = *(char *)(g5 - 29); // 0x6a26d
    g4 = v4;
    *(char *)(g5 - 28) = v4;
    unsigned char v5 = *(char *)(g5 - 30); // 0x6a27f
    g4 = v5;
    *(char *)(g5 - 27) = v5;
    unsigned char v6 = *(char *)(g5 - 31); // 0x6a286
    g4 = v6;
    *(char *)(g5 - 26) = v6;
    *(char *)(g5 - 25) = *(char *)(g5 - 32);
    int32_t v7 = g5 - 28; // 0x6a294
    g4 = v7;
    g4 = function_2cb10(v3, v7, 4);
    int32_t result = *(int32_t *)(g6 + 16); // 0x6a2a0
    g4 = result;
    return result;
}

// Address range: 0x6a2b0 - 0x6a2ea
int32_t function_6a2b0(void) {
    int32_t v1 = g4; // 0x6a2b0
    g9 = v1;
    int32_t v2 = g6; // 0x6a2b2
    int32_t v3 = v1 - *(int32_t *)(v2 + 32) + v2; // 0x6a2b5
    g9 = v3;
    unsigned char v4 = *(char *)(g5 - 27); // 0x6a2bd
    g4 = v4;
    *(char *)(g5 - 32) = v4;
    *(char *)(g5 - 31) = *(char *)(g5 - 28);
    int32_t v5 = g5 - 32; // 0x6a2d6
    g4 = v5;
    g4 = function_2cb10(v3, v5, 2);
    int32_t result = *(int32_t *)(g6 + 16); // 0x6a2e2
    g4 = result;
    return result;
}

// Address range: 0x6a2f0 - 0x6a338
int32_t function_6a2f0(void) {
    int32_t v1 = g4; // 0x6a2f0
    g9 = v1;
    int32_t v2 = g6; // 0x6a2f2
    int32_t v3 = v1 - *(int32_t *)(v2 + 32) + v2; // 0x6a2f5
    g9 = v3;
    unsigned char v4 = *(char *)(g5 - 25); // 0x6a2fd
    g4 = v4;
    *(char *)(g5 - 32) = v4;
    unsigned char v5 = *(char *)(g5 - 26); // 0x6a30f
    g4 = v5;
    *(char *)(g5 - 31) = v5;
    unsigned char v6 = *(char *)(g5 - 27); // 0x6a316
    g4 = v6;
    *(char *)(g5 - 30) = v6;
    *(char *)(g5 - 29) = *(char *)(g5 - 28);
    int32_t v7 = g5 - 32; // 0x6a324
    g4 = v7;
    g4 = function_2cb10(v3, v7, 4);
    int32_t result = *(int32_t *)(g6 + 16); // 0x6a330
    g4 = result;
    return result;
}

// Address range: 0x6a340 - 0x6a388
int32_t function_6a340(void) {
    int32_t v1 = g4; // 0x6a340
    g9 = v1;
    int32_t v2 = g6; // 0x6a342
    int32_t v3 = v1 - *(int32_t *)(v2 + 32) + v2; // 0x6a345
    g9 = v3;
    unsigned char v4 = *(char *)(g5 - 29); // 0x6a34d
    g4 = v4;
    *(char *)(g5 - 28) = v4;
    unsigned char v5 = *(char *)(g5 - 30); // 0x6a35f
    g4 = v5;
    *(char *)(g5 - 27) = v5;
    unsigned char v6 = *(char *)(g5 - 31); // 0x6a366
    g4 = v6;
    *(char *)(g5 - 26) = v6;
    *(char *)(g5 - 25) = *(char *)(g5 - 32);
    int32_t v7 = g5 - 28; // 0x6a374
    g4 = v7;
    g4 = function_2cb10(v3, v7, 4);
    int32_t result = *(int32_t *)(g6 + 16); // 0x6a380
    g4 = result;
    return result;
}

// Address range: 0x6a390 - 0x6a417
int32_t function_6a390(int32_t a1) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x6a396
    g6 = a1;
    int32_t v3;
    g4 = &v3;
    int32_t v4 = g10; // 0x6a39f
    int32_t v5 = g8; // 0x6a3a2
    int32_t v6 = function_6b5a0(0x1000000 * a1 / 0x1000000, &v3); // 0x6a3ac
    int32_t v7 = v6 & (int32_t)&g863; // 0x6a3b1
    g10 = v7;
    g8 = v6;
    g4 = 0;
    int32_t v8 = g6; // 0x6a3b8
    if (v7 < *(int32_t *)(v8 + 8)) {
        uint16_t v9 = (int16_t)v6; // 0x6a3bd
        if (v9 <= *(int16_t *)(v8 + 22)) {
            // 0x6a3d0
            if (g724 == 0) {
                // 0x6a410
                return 0;
            }
            // 0x6a3d9
            g4 = (int32_t)&g304;
            int32_t v10; // 0x6a3ea
            if (v9 != -1) {
                int32_t v11 = *(int32_t *)(v8 + 4); // 0x6a3e4
                g7 = v11;
                v10 = v11 + 12 * v7;
                g4 = v10;
            } else {
                v10 = (int32_t)&g304;
            }
            // 0x6a3ed
            int32_t v12; // 0x6a3f2
            int32_t v13; // 0x6a3f5
            if (v9 == *(int16_t *)v10) {
                // bb
                g4 = function_6a449();
                v13 = g10;
                v12 = g6;
            } else {
                v13 = v7;
                v12 = v8;
            }
            int32_t v14 = *(int32_t *)(v12 + 4); // 0x6a3f2
            g9 = v14;
            g6 = v2;
            g10 = v4;
            g8 = v5;
            int32_t v15 = v14 + 12 * v13; // 0x6a401
            g4 = v15;
            int32_t result = *(int32_t *)(v15 + 8); // 0x6a404
            g4 = result;
            return result;
        }
    }
    // 0x6a3c3
    g6 = v2;
    g10 = v4;
    g8 = v5;
    return 0;
}

// Address range: 0x6a41b - 0x6a427
int32_t function_6a41b(void) {
    // 0x6a41b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38468b40); // 0x6a41b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6a421
    g4 = v3 + 36 & 255 | v3 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6a42d - 0x6a432
int32_t function_6a42d(void) {
    uint32_t v1 = g6; // 0x6a42d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6a436 - 0x6a43b
int32_t function_6a436(void) {
    uint32_t v1 = g6; // 0x6a436
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6a447 - 0x6a449
int32_t function_6a447(void) {
    // 0x6a447
    return g4;
}

// Address range: 0x6a449 - 0x6a450
int32_t function_6a449(void) {
    // 0x6a449
    g4 = 0;
    return 0;
}

// Address range: 0x6a450 - 0x6a4c5
int32_t function_6a450(int32_t a1) {
    // 0x6a450
    g10 = a1;
    g9 = g724;
    uint16_t v1 = *(int16_t *)(a1 + 16);
    int32_t v2 = v1;
    g6 = v2;
    if (g724 == 0) {
        // 0x6a4be
        return g4;
    }
    int32_t result; // 0x6a4b4
    while (true) {
        // 0x6a470
        g4 = (int32_t)&g304;
        if (v1 != -1) {
            int32_t v3 = *(int32_t *)(g10 + 4); // 0x6a47b
            g9 = v3;
            g4 = v3 + 12 * (v2 & (int32_t)&g863);
        }
        // 0x6a487
        g9 = g724;
        int32_t v4; // 0x6a4ae
        if (g724 == 0) {
            // bb
            g4 = function_6a548();
            v4 = g6;
        } else {
            v4 = v2;
        }
        // 0x6a4a0
        g4 = (int32_t)&g304;
        if ((int16_t)v4 != -1) {
            int32_t v5 = *(int32_t *)(g10 + 4); // 0x6a4ab
            g7 = v5;
            int32_t v6 = v4 & (int32_t)&g863; // 0x6a4ae
            g6 = v6;
            result = v5 + 12 * v6;
            g4 = result;
        } else {
            result = (int32_t)&g304;
        }
        uint16_t v7 = *(int16_t *)result;
        int32_t v8 = v7;
        g6 = v8;
        if ((char)g9 == 0) {
            // break -> 0x6a4be
            break;
        }
        v2 = v8;
        v1 = v7;
    }
    // 0x6a4be
    return result;
}

// Address range: 0x6a4c9 - 0x6a4d5
int32_t function_6a4c9(void) {
    // 0x6a4c9
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x385d8b40); // 0x6a4c9
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6a4cf
    g4 = v3 + 36 & 255 | v3 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6a4db - 0x6a4e0
int32_t function_6a4db(void) {
    uint32_t v1 = g6; // 0x6a4db
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6a4e4 - 0x6a4e9
int32_t function_6a4e4(void) {
    uint32_t v1 = g6; // 0x6a4e4
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6a4f5 - 0x6a4fa
int32_t function_6a4f5(void) {
    // 0x6a4f5
    return g4;
}

// Address range: 0x6a500 - 0x6a503
int32_t function_6a500(void) {
    // 0x6a500
    g6 &= (int32_t)&g863;
    return g4;
}

// Address range: 0x6a548 - 0x6a54f
int32_t function_6a548(void) {
    // 0x6a548
    return g4;
}

// Address range: 0x6a553 - 0x6a55f
int32_t function_6a553(void) {
    // 0x6a553
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xf1075c0); // 0x6a553
    *v2 = *v2 + 1;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6a55f - 0x6a564
int32_t function_6a55f(void) {
    // 0x6a55f
    return g4;
}

// Address range: 0x6a569 - 0x6a56f
int32_t function_6a569(void) {
    int32_t v1 = g4; // 0x6a569
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6a575 - 0x6a57a
int32_t function_6a575(void) {
    uint32_t v1 = g6; // 0x6a575
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6a57e - 0x6a583
int32_t function_6a57e(void) {
    uint32_t v1 = g6; // 0x6a57e
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6a58f - 0x6a591
int32_t function_6a58f(void) {
    // 0x6a58f
    return g4;
}

// Address range: 0x6a690 - 0x6a7ee
int32_t function_6a690(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x6a693
    int32_t v2 = g10; // 0x6a694
    int32_t v3 = g6; // 0x6a695
    g6 = 0;
    g9 = a2;
    g10 = a1;
    int32_t v4; // 0x6a6c0
    int32_t v5; // 0x6a6b8
    int32_t v6; // 0x6a6c6
    if (a2 == 0) {
        goto lab_0x6a784;
    } else {
        // 0x6a6a9
        g9 = a2;
        v5 = function_69b40(a1, a2) & (int32_t)&g91;
        g4 = v5;
        v4 = g10;
        int32_t v7 = *(int32_t *)(v4 + 4); // 0x6a6c0
        g4 = v7;
        g7 = v5;
        v6 = 2 * v5;
        uint16_t v8 = *(int16_t *)(v7 + v6); // 0x6a6c6
        int32_t v9 = v8; // 0x6a6c6
        g6 = v9;
        if (v8 == 0) {
            goto lab_0x6a713;
        } else {
            int32_t * v10 = (int32_t *)(v4 + 24); // 0x6a6cf
            int32_t v11 = *v10; // 0x6a6cf
            g4 = v11;
            g10 = a2;
            while (true) {
                int32_t v12 = v9 & (int32_t)&g863; // 0x6a6e0
                g9 = v12;
                int32_t v13 = 8 * v12; // 0x6a6e3
                int32_t v14 = *(int32_t *)(v13 + v11); // 0x6a6e3
                g4 = v14;
                g8 = v13;
                int32_t v15 = function_2cc30(a2, (char *)v14); // 0x6a6f4
                g4 = v15;
                if (v15 == 0) {
                    // break -> 0x6a7d0
                    break;
                }
                // 0x6a701
                g9 = v4;
                int32_t v16 = *v10; // 0x6a704
                g4 = v16;
                uint16_t v17 = *(int16_t *)(v16 + 4 + g8); // 0x6a707
                int32_t v18 = v17; // 0x6a707
                g6 = v18;
                if (v17 == 0) {
                    // 0x6a711
                    g10 = v4;
                    goto lab_0x6a713;
                }
                // 0x6a701
                a2 = g10;
                v11 = v16;
                v9 = v18;
            }
            // 0x6a7d0
            g10 = v4;
            int32_t v19 = *v10 + g8; // 0x6a7d3
            g8 = v19;
            char * v20 = (char *)(v19 + 6); // 0x6a7d6
            unsigned char v21 = *v20; // 0x6a7d6
            g4 = v21;
            char v22 = v21 + 1; // 0x6a7da
            if (v22 != 0) {
                // 0x6a7de
                *v20 = v22;
                int32_t result = g6; // 0x6a7e7
                g4 = result;
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return result;
            }
            goto lab_0x6a784;
        }
    }
  lab_0x6a784:;
    int32_t result2 = g6; // 0x6a787
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x6a713:;
    int16_t * v23 = (int16_t *)(v4 + 44); // 0x6a713
    uint16_t v24 = *v23; // 0x6a713
    int32_t v25 = v24; // 0x6a713
    g6 = v25;
    int32_t v26; // 0x6a7c3
    if (v24 == 0) {
        // 0x6a790
        g6 = *(int32_t *)(v4 + 36);
        int32_t v27 = v4 + 24; // 0x6a793
        g8 = v27;
        g4 = function_6c040(v27, 1);
        int32_t v28 = g8; // 0x6a7a6
        int32_t v29 = g6; // 0x6a7b1
        g8 = v29 & (int32_t)&g863;
        g4 = function_6bd30(v28, v29, 1);
        int32_t v30 = 8 * g8; // 0x6a7c0
        g8 = v30;
        v26 = v30 + *(int32_t *)(g10 + 24);
        g4 = v26;
    } else {
        int32_t v31 = 8 * (v25 & (int32_t)&g863); // 0x6a722
        g8 = v31;
        int32_t v32 = *(int32_t *)(v4 + 24) + v31; // 0x6a725
        g4 = v32;
        uint16_t v33 = *(int16_t *)(v32 + 4); // 0x6a727
        g9 = v33;
        *v23 = v33;
        v26 = g4;
    }
    // 0x6a72f
    *(char *)(v26 + 6) = 1;
    g7 = v5;
    int32_t v34 = g10; // 0x6a736
    int32_t v35 = *(int32_t *)(v34 + 4); // 0x6a736
    g4 = v35;
    uint16_t v36 = *(int16_t *)(v35 + v6); // 0x6a739
    g9 = v36;
    int32_t v37 = *(int32_t *)(v34 + 24); // 0x6a73d
    g4 = v37;
    *(int16_t *)(v37 + 4 + g8) = v36;
    int32_t v38 = *(int32_t *)(g10 + 4); // 0x6a745
    g4 = v38;
    *(int16_t *)(2 * g7 + v38) = (int16_t)g6;
    g7 = a2;
    int32_t v39 = g8 + *(int32_t *)(g10 + 24); // 0x6a755
    g9 = v39;
    g4 = function_2cb40(a2) + 1;
    int32_t v40 = function_1bc60(); // 0x6a765
    g4 = v40;
    *(int32_t *)v39 = v40;
    g9 = a2;
    int32_t v41 = *(int32_t *)(g10 + 24); // 0x6a776
    g4 = v41;
    int32_t v42 = *(int32_t *)(g8 + v41); // 0x6a779
    g4 = v42;
    g4 = function_2cb60(v42, a2);
    goto lab_0x6a784;
}

// Address range: 0x6a7f0 - 0x6a81e
int32_t function_6a7f0(int32_t a1, int32_t a2) {
    g4 = 0;
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x6a7f5
    g9 = a2;
    g6 = a1;
    int32_t result; // 0x6a815
    if (a2 != 0) {
        int32_t v3 = function_6a690(a1, a2); // 0x6a80a
        g4 = v3;
        int32_t v4 = *(int32_t *)(g6 + 24); // 0x6a80f
        g9 = v4;
        int32_t v5 = v3 & (int32_t)&g863; // 0x6a812
        g4 = v5;
        result = *(int32_t *)(v4 + 8 * v5);
        g4 = result;
    } else {
        result = 0;
    }
    // 0x6a818
    g6 = v2;
    return result;
}

// Address range: 0x6a820 - 0x6a8f0
int32_t function_6a820(int32_t a1) {
    int32_t v1 = g8; // 0x6a823
    int32_t v2 = g10; // 0x6a824
    int32_t v3 = g6; // 0x6a825
    g6 = a1;
    int32_t v4 = *(int32_t *)(a1 + 16); // 0x6a82c
    g10 = v4;
    int32_t v5; // 0x6a849
    if (v4 >= 1) {
        // 0x6a833
        g4 = 0;
        g10 = v4;
        int32_t v6 = *(int32_t *)(a1 + 4); // 0x6a838
        g9 = v6;
        *(int16_t *)v6 = 0;
        int32_t v7 = g4 + 1; // 0x6a841
        g4 = v7;
        int32_t v8 = g6; // 0x6a844
        while (*(int32_t *)(v8 + 16) > v7) {
            // 0x6a838
            v6 = *(int32_t *)(v8 + 4);
            g9 = v6;
            *(int16_t *)(v6 + 2 * v7) = 0;
            v7 = g4 + 1;
            g4 = v7;
            v8 = g6;
        }
        v5 = v8;
    } else {
        v5 = a1;
    }
    int32_t v9 = *(int32_t *)(v5 + 36); // 0x6a849
    g7 = v9;
    *(int16_t *)(v5 + 44) = 0;
    int32_t v10; // 0x6a89d
    if (v9 < 1) {
        // 0x6a849
        v10 = g6;
    } else {
        // 0x6a856
        g10 = 0;
        int32_t v11 = 0; // 0x6a863
        int32_t v12 = g6; // 0x6a860
        while (true) {
            int32_t v13 = *(int32_t *)(v12 + 24); // 0x6a860
            g4 = v13;
            int32_t v14 = 8 * v11; // 0x6a863
            g8 = v14;
            int32_t v15 = *(int32_t *)(v13 + v14); // 0x6a86a
            g4 = v15;
            int32_t v16; // 0x6a895
            int32_t v17; // 0x6a898
            if (v15 != 0) {
                // 0x6a871
                g4 = function_1bca0(v15);
                int32_t v18 = *(int32_t *)(g6 + 24); // 0x6a879
                g4 = v18;
                *(int32_t *)(8 * g10 + v18) = 0;
                int32_t v19 = *(int32_t *)(g6 + 24); // 0x6a883
                g4 = v19;
                *(char *)(v19 + 6 + g8) = 0;
                int32_t v20 = *(int32_t *)(g6 + 24); // 0x6a88b
                g4 = v20;
                *(int16_t *)(v20 + 4 + g8) = 0;
                v17 = g6;
                v16 = g10;
            } else {
                v17 = v12;
                v16 = v11;
            }
            int32_t v21 = v16 + 1; // 0x6a895
            g10 = v21;
            if (*(int32_t *)(v17 + 36) <= v21) {
                v10 = v17;
                // break -> 0x6a89d
                break;
            }
            v11 = v21;
            v12 = v17;
        }
    }
    // 0x6a89d
    *(int32_t *)(v10 + 36) = 0;
    int32_t v22 = g6 + 24; // 0x6a8a4
    g10 = v22;
    g4 = function_6c040(v22, 1);
    g4 = function_6bd30(g10, 0, 1);
    int32_t v23 = *(int32_t *)(g6 + 24); // 0x6a8cf
    g4 = v23;
    *(int32_t *)v23 = 0;
    int32_t v24 = *(int32_t *)(g6 + 24); // 0x6a8d8
    g4 = v24;
    *(char *)(v24 + 6) = 0;
    int32_t v25 = *(int32_t *)(g6 + 24); // 0x6a8df
    g4 = v25;
    *(int16_t *)(v25 + 4) = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x6a8f0 - 0x6a8f1
int32_t function_6a8f0(int32_t a1) {
    // 0x6a8f0
    return g4;
}

// Address range: 0x6a97b - 0x6a984
int32_t function_6a97b(void) {
    // 0x6a97b
    *(int32_t *)(g6 + 8) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x6a984 - 0x6a997
int32_t function_6a984(int32_t a1, int32_t a2) {
    // 0x6a984
    *(int32_t *)(g6 + 20) = g4;
    int32_t v1; // ebp
    *(int32_t *)(v1 + 8) = g6 + 4;
    g6 = a1;
    g5 = a2;
    int32_t result = function_6bbd0((int32_t)&g870); // 0x6a992
    g4 = result;
    return result;
}

// Address range: 0x6a997 - 0x6a9dc
int32_t function_6a997(void) {
    // 0x6a997
    g9 = g6 + 24;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_6bcc0(g9);
    int32_t v1 = *(int32_t *)(g5 - 12); // 0x6a9a5
    g4 = v1;
    while (true) {
        // 0x6a9a8
        g6 += 4;
        *(int32_t *)(g5 - 12) = v1;
        g4 = function_6bc10(g6);
        int32_t v2 = *(int32_t *)(g5 - 12); // 0x6a9b6
        g4 = v2;
        int32_t v3 = function_7ab57(v2, (int32_t)&g870); // 0x6a9bc
        g4 = v3;
        g6 += 4;
        *(int32_t *)(g5 - 12) = v3;
        g4 = function_6bbd0(g6);
        int32_t v4 = *(int32_t *)(g5 - 12); // 0x6a9cf
        g4 = v4;
        int32_t v5 = function_7ab57(v4, (int32_t)&g870); // 0x6a9d5
        g4 = v5;
        v1 = v5;
    }
}

// Address range: 0x6a9dc - 0x6a9ef
int32_t function_6a9dc(void) {
    // 0x6a9dc
    g9 = g6 + 24;
    *(int32_t *)(g5 - 12) = g4;
    g4 = function_6bc80(g9);
    int32_t result = *(int32_t *)(g5 - 12); // 0x6a9ea
    g4 = result;
    return result;
}

// Address range: 0x6a9f0 - 0x6aa0f
int32_t function_6a9f0(int32_t a1) {
    int32_t v1 = g6; // 0x6a9f3
    g6 = a1;
    g4 = function_6a8f0(a1);
    g6 = v1;
    int32_t result = function_1bc40(); // 0x6aa0a
    g4 = result;
    return result;
}

// Address range: 0x6aa10 - 0x6aa64
int32_t function_6aa10(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x6aa16
    g6 = a1;
    g4 = &a2;
    int32_t v3 = g10; // 0x6aa1f
    int32_t v4 = g8; // 0x6aa22
    int32_t v5 = function_6b5a0(a1, &a2); // 0x6aa2c
    g4 = v5;
    if ((int16_t)v5 == -1) {
        g8 = a2;
        g10 = 0;
        int32_t result; // 0x6aa5f
        if (a2 == 0) {
            // bb
            result = function_6aa8f();
            g4 = result;
        } else {
            result = v5;
        }
        // 0x6aa61
        return result;
    }
    int32_t v6 = *(int32_t *)(g6 + 4); // 0x6aa37
    g6 = v2;
    int32_t v7 = v6 + 12 * (v5 & (int32_t)&g863); // 0x6aa43
    g4 = v7;
    g8 = v4;
    int32_t result2 = *(int32_t *)(v7 + 8); // 0x6aa49
    g4 = result2;
    g10 = v3;
    return result2;
}

// Address range: 0x6aa8f - 0x6aab0
int32_t function_6aa8f(void) {
    int32_t v1 = g5 - 28; // 0x6aa8f
    g4 = v1;
    *(int32_t *)v1 = g10;
    function_6d400(g6, g4);
    int32_t result = g10; // 0x6aaa1
    g4 = result;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return result;
}

// Address range: 0x6aab0 - 0x6abaa
int32_t function_6aab0(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x6aab3
    int32_t v2 = g10; // 0x6aab4
    int32_t v3 = g6; // 0x6aab5
    g6 = a2;
    g10 = a1;
    int32_t v4; // bp-32
    if (*(char *)(a2 + 21) % 2 != 0) {
        int32_t v5 = &v4; // 0x6ab60
        g9 = v5;
        v4 = 128;
        int32_t result = function_30bf0(a2, 0, &v4); // 0x6ab7f
        g4 = result;
        g7 = 0;
        g9 = v5;
        if ((char)result != 0) {
            int32_t v6 = g6; // 0x6ab90
            int32_t v7 = *(int32_t *)(v6 + 12); // 0x6ab90
            g8 = v7;
            int32_t v8 = v7 - *(int32_t *)(v6 + 32); // 0x6ab93
            g8 = v8;
            g8 = *(int32_t *)v6 + v8;
            return result;
        }
    } else {
        int32_t v9 = function_309b0(a2, 4); // 0x6aad7
        g4 = v9;
        g7 = 0;
        if ((char)v9 != 0) {
            int32_t v10 = g6; // 0x6aae2
            int32_t v11; // 0x6aaf5
            if (*(char *)(v10 + 52) % 2 == 0) {
                // bb
                g4 = function_6ac10();
                v11 = g6;
            } else {
                v11 = v10;
            }
            int32_t v12 = *(int32_t *)(v11 + 12); // 0x6aaec
            g4 = v12;
            int32_t v13; // bp-36
            int32_t v14 = &v13; // 0x6aaef
            g8 = v14;
            int32_t v15 = v12 - *(int32_t *)(v11 + 32); // 0x6aaf2
            g4 = v15;
            int32_t v16 = *(int32_t *)v11 + v15; // 0x6aaf5
            g4 = v16;
            int32_t v17; // 0x6aaf7
            if (v16 == 0) {
                // bb20
                v17 = function_6b430();
                g4 = v17;
            } else {
                v17 = v16;
            }
            int32_t v18 = v13; // 0x6aafd
            g9 = v18;
            v4 = v18;
            v4 = (int32_t)*(char *)(v17 + 3);
            int32_t v19 = &v4; // 0x6ab18
            g9 = v19;
            g4 = (int32_t)*(char *)v17;
            g4 = function_2cb10(v14, v19, 4);
            int32_t * v20 = (int32_t *)(g6 + 12); // 0x6ab35
            int32_t v21 = v13; // 0x6ab38
            g4 = v21;
            int32_t v22 = *v20 + 4; // 0x6ab3b
            g9 = v22;
            g7 = 0;
            *v20 = v22;
            if (v21 == 0x31505343) {
                // bb22
                g4 = function_6abc5();
            }
        }
    }
    int32_t result2 = g7; // 0x6ab50
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x6abc5 - 0x6ac0b
int32_t function_6abc5(void) {
    // 0x6abc5
    g4 = function_6a820(g10);
    int32_t v1 = g6; // 0x6abcd
    int32_t v2; // 0x6abdb
    if (*(char *)(v1 + 21) % 2 != 0) {
        // bb
        g4 = function_6ac28();
        v2 = g6;
    } else {
        v2 = v1;
    }
    int32_t v3 = function_309b0(v2, 2); // 0x6abde
    g4 = v3;
    if ((char)v3 == 0) {
        // bb5
        g4 = function_6ac5a();
    }
    int32_t v4 = g6; // 0x6abe7
    int32_t v5; // 0x6abf8
    if (*(char *)(v4 + 52) % 2 != 0) {
        // bb6
        g4 = function_6b0f0();
        v5 = g6;
    } else {
        v5 = v4;
    }
    int32_t v6 = *(int32_t *)(v5 + 12); // 0x6abf1
    g9 = v6;
    g7 = v5;
    g4 = v6;
    int32_t v7 = v6 - *(int32_t *)(v5 + 32); // 0x6abf8
    g4 = v7;
    uint16_t v8 = *(int16_t *)(v7 + v5); // 0x6abfb
    g4 = v8;
    *(int16_t *)(g5 - 32) = v8;
    int32_t v9 = g9 + 2; // 0x6ac03
    g9 = v9;
    *(int32_t *)(g6 + 12) = v9;
    int32_t result = function_6ac62(); // 0x6ac09
    g4 = result;
    return result;
}

// Address range: 0x6ac10 - 0x6ac25
int32_t function_6ac10(void) {
    int32_t v1 = g6; // 0x6ac10
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6ac10
    g9 = v2;
    g7 = v1;
    g4 = v2;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32); // 0x6ac17
    g4 = v3;
    int32_t v4 = *(int32_t *)(v3 + v1); // 0x6ac1a
    g4 = v4;
    *(int32_t *)(g5 - 32) = v4;
    return g4;
}

// Address range: 0x6ac28 - 0x6ac5a
int32_t function_6ac28(void) {
    int32_t v1 = g5 - 28; // 0x6ac28
    g9 = v1;
    *(int32_t *)v1 = 128;
    int32_t v2 = g9; // 0x6ac32
    *(int32_t *)(g5 - 1084) = v2;
    int32_t result = function_30bf0(g6, 0, (int32_t *)v2); // 0x6ac47
    g4 = result;
    g9 = *(int32_t *)(g5 - 1084);
    return result;
}

// Address range: 0x6ac5a - 0x6ac62
int32_t function_6ac5a(void) {
    // 0x6ac5a
    *(int16_t *)(g5 - 32) = 0;
    g4 = 0;
    return 0;
}

// Address range: 0x6ac62 - 0x6ad5a
int32_t function_6ac62(void) {
    // 0x6ac62
    *(int16_t *)(g10 + 44) = (int16_t)g4;
    int32_t v1 = g6; // 0x6ac66
    if (*(char *)(v1 + 21) % 2 != 0) {
        int32_t v2 = g5 - 32; // 0x6aca8
        g8 = v2;
        *(int32_t *)v2 = 128;
        int32_t v3 = function_30bf0(g6, 0, (int32_t *)g8); // 0x6acc1
        g4 = v3;
        if ((char)v3 != 0) {
            // bb12
            g4 = function_6ad70();
        }
    } else {
        int32_t v4 = function_309b0(v1, 4); // 0x6ac77
        g4 = v4;
        if ((char)v4 != 0) {
            int32_t v5 = g6; // 0x6ac80
            int32_t v6 = *(int32_t *)(v5 + 12); // 0x6ac84
            g4 = v6;
            int32_t v7; // 0x6ac87
            int32_t v8; // 0x6ac8f
            if (*(char *)(v5 + 52) % 2 != 0) {
                // bb
                v7 = function_6b140();
                g4 = v7;
                v8 = g6;
            } else {
                v8 = v5;
                v7 = v6;
            }
            // 0x6ac8d
            g9 = v7;
            g7 = v8;
            int32_t v9 = v7 - *(int32_t *)(v8 + 32); // 0x6ac91
            g9 = v9;
            int32_t v10 = *(int32_t *)(v9 + v8); // 0x6ac94
            g8 = v10;
            *(int32_t *)(g5 - 28) = v10;
            int32_t v11 = g4 + 4; // 0x6ac9a
            g4 = v11;
            *(int32_t *)(g6 + 12) = v11;
            int32_t result = function_6adaa(); // 0x6aca0
            g4 = result;
            return result;
        }
    }
    // 0x6acce
    *(int32_t *)(g5 - 28) = 0;
    *(int32_t *)(g10 + 16) = 0;
    int32_t v12 = g6; // 0x6acdc
    if (*(char *)(v12 + 21) % 2 != 0) {
        int32_t v13 = g5 - 28; // 0x6ad28
        g9 = v13;
        *(int32_t *)v13 = 128;
        int32_t v14 = g9; // 0x6ad32
        *(int32_t *)(g5 - 1084) = v14;
        int32_t result2 = function_30bf0(g6, 0, (int32_t *)v14); // 0x6ad47
        g4 = result2;
        g9 = *(int32_t *)(g5 - 1084);
        return result2;
    }
    int32_t v15 = function_309b0(v12, 4); // 0x6aced
    g4 = v15;
    if ((char)v15 == 0) {
        int32_t v16 = function_6ad5a((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6acf4
        g4 = v16;
    }
    int32_t v17 = g6; // 0x6acf6
    int32_t v18 = *(int32_t *)(v17 + 12); // 0x6acfa
    g4 = v18;
    int32_t v19; // 0x6acfd
    int32_t v20; // 0x6ad05
    if (*(char *)(v17 + 52) % 2 != 0) {
        // bb14
        v19 = function_6b198();
        g4 = v19;
        v20 = g6;
    } else {
        v20 = v17;
        v19 = v18;
    }
    // 0x6ad03
    g9 = v19;
    g7 = v20;
    int32_t v21 = v19 - *(int32_t *)(v20 + 32); // 0x6ad07
    g9 = v21;
    int32_t v22 = *(int32_t *)(v21 + v20); // 0x6ad0a
    g7 = v22;
    *(int32_t *)(g5 - 1080) = v22;
    *(int32_t *)(g5 - 32) = g7;
    int32_t v23 = g4 + 4; // 0x6ad16
    g4 = v23;
    *(int32_t *)(g6 + 12) = v23;
    int32_t result3 = function_6aec8(); // 0x6ad1c
    g4 = result3;
    return result3;
}

// Address range: 0x6ad5a - 0x6ad6e
int32_t function_6ad5a(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g7 & -256 | (int32_t)(*(char *)(g6 + 20) == 0); // 0x6ad5e
    g7 = result;
    g6 = a1;
    g4 = result;
    g10 = a2;
    g8 = a3;
    g5 = a4;
    return result;
}

// Address range: 0x6ad70 - 0x6ad90
int32_t function_6ad70(void) {
    int32_t v1 = g6; // 0x6ad70
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6ad70
    g9 = v2;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6ad76
    g9 = v3;
    *(int32_t *)(g5 - 32) = v3;
    *(int32_t *)(g5 - 1084) = g9;
    return g4;
}

// Address range: 0x6adaa - 0x6ae8c
int32_t function_6adaa(void) {
    // 0x6adaa
    *(int32_t *)(g10 + 16) = 0;
    int32_t v1 = g10; // 0x6adb9
    int32_t v2 = *(int32_t *)(v1 + 8); // 0x6adb9
    g4 = v2;
    int32_t v3 = g8; // 0x6adbc
    int32_t v4; // 0x6adc4
    int32_t v5; // 0x6adc7
    if (v3 > v2) {
        // bb
        g4 = function_6b3d0();
        v5 = g8;
        v4 = g10;
    } else {
        v5 = v3;
        v4 = v1;
    }
    // 0x6adc4
    g4 = *(int32_t *)(v4 + 4);
    *(int32_t *)(v4 + 16) = v5;
    *(int32_t *)(g10 + 20) = g4;
    g8 *= 2;
    *(int32_t *)(g5 - 1072) = g10;
    *(int32_t *)(g5 - 1076) = g8;
    g8 = 0;
    int32_t v6 = 0; // 0x6ae3a
  lab_0x6ae34_2:
    while (true) {
      lab_0x6ae34:;
        int32_t v7 = g5; // 0x6ae34
        int32_t v8 = *(int32_t *)(v7 - 1072); // 0x6ae34
        g9 = v8;
        g10 = v6;
        g10 = *(int32_t *)(v8 + 4) + v6;
        int32_t v9 = g6; // 0x6ae3f
        if (*(char *)(v9 + 21) % 2 == 0) {
            int32_t v10 = function_309b0(v9, 2); // 0x6adfb
            g4 = v10;
            if ((char)v10 == 0) {
                goto lab_0x6ae6b;
            } else {
                int32_t v11 = g6; // 0x6ae04
                int32_t v12; // 0x6ae15
                if (*(char *)(v11 + 52) % 2 != 0) {
                    // bb13
                    g4 = function_6b310();
                    v12 = g6;
                } else {
                    v12 = v11;
                }
                int32_t v13 = *(int32_t *)(v12 + 12); // 0x6ae0e
                g7 = v13;
                g9 = v12;
                g4 = v13;
                int32_t v14 = v13 - *(int32_t *)(v12 + 32); // 0x6ae15
                g4 = v14;
                uint16_t v15 = *(int16_t *)(v14 + v12); // 0x6ae18
                g4 = v15;
                *(int16_t *)(g5 - 28) = v15;
                int32_t v16 = g7 + 2; // 0x6ae20
                g7 = v16;
                *(int32_t *)(g6 + 12) = v16;
                g8 += 2;
                *(int16_t *)g10 = (int16_t)g4;
                int32_t v17 = g8; // 0x6ae2c
                int32_t v18 = g5; // 0x6ae2c
                if (v17 == *(int32_t *)(v18 - 1076)) {
                    // 0x6ae81
                    g10 = *(int32_t *)(v18 - 1072);
                    return g4;
                }
                v6 = v17;
                goto lab_0x6ae34;
            }
        } else {
            int32_t v19 = v7 - 32; // 0x6ae45
            g9 = v19;
            *(int32_t *)v19 = 128;
            int32_t v20 = function_30bf0(g6, 0, (int32_t *)g9); // 0x6ae5e
            g4 = v20;
            if ((char)v20 != 0) {
                // bb14
                g4 = function_6b278();
            }
            goto lab_0x6ae6b;
        }
    }
  lab_0x6ae6b_2:
    // 0x6ae81
    g10 = *(int32_t *)(g5 - 1072);
    return g4;
  lab_0x6ae6b:
    // 0x6ae6b
    g8 += 2;
    g4 = 0;
    *(int16_t *)(g5 - 28) = 0;
    *(int16_t *)g10 = (int16_t)g4;
    if (g8 == *(int32_t *)(g5 - 1076)) {
        // break -> 0x6ae6b
        goto lab_0x6ae6b_2;
    }
    // 0x6ae6b
    v6 = g8;
    // continue -> 0x6ae34
    goto lab_0x6ae34_2;
}

// Address range: 0x6ae90 - 0x6ae91
int32_t function_6ae90(void) {
    // 0x6ae90
    return g4;
}

// Address range: 0x6aec8 - 0x6af33
int32_t function_6aec8(void) {
    int32_t v1 = g5; // 0x6aec8
    int32_t v2; // 0x6aeeb
    if (*(int32_t *)(v1 - 1080) <= 1) {
        int32_t v3 = function_6ad5a((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6aecf
        g4 = v3;
        v2 = g5;
    } else {
        v2 = v1;
    }
    int32_t v4 = *(int32_t *)(v2 - 1080); // 0x6aed5
    g4 = v4;
    int32_t v5 = g10; // 0x6aedb
    int32_t v6 = v5 + 24; // 0x6aedb
    g8 = v6;
    g9 = *(int32_t *)(v5 + 36);
    int32_t v7 = v4 - 1; // 0x6aee4
    g4 = v7;
    *(int32_t *)(v2 - 1088) = v7;
    *(int32_t *)(g5 - 1084) = g9;
    g4 = function_6c040(v6, v7);
    int32_t v8 = g5; // 0x6aefc
    int32_t v9 = *(int32_t *)(v8 - 1084); // 0x6aefc
    g9 = v9;
    int32_t v10 = *(int32_t *)(v8 - 1088); // 0x6af05
    g4 = v10;
    g4 = function_6bd30(g8, v9, v10);
    g9 = g5 - 1056;
    *(int32_t *)(g5 - 1072) = 1;
    *(int32_t *)(g5 - 1068) = g9;
    return g4;
}

// Address range: 0x6af38 - 0x6af72
int32_t function_6af38(void) {
    // 0x6af38
    g4 = function_309b0(g6, 2);
    int32_t v1 = g6; // 0x6af50
    int32_t v2; // 0x6af61
    if (*(char *)(v1 + 52) % 2 != 0) {
        // bb
        g4 = function_6b2c0();
        v2 = g6;
    } else {
        v2 = v1;
    }
    int32_t v3 = *(int32_t *)(v2 + 12); // 0x6af5a
    g7 = v3;
    g9 = v2;
    g4 = v3;
    int32_t v4 = v3 - *(int32_t *)(v2 + 32); // 0x6af61
    g4 = v4;
    uint16_t v5 = *(int16_t *)(v4 + v2); // 0x6af64
    g4 = v5;
    *(int16_t *)(g5 - 32) = v5;
    int32_t v6 = g7 + 2; // 0x6af6c
    g9 = v6;
    *(int32_t *)(g6 + 12) = v6;
    return g4;
}

// Address range: 0x6af72 - 0x6b010
int32_t function_6af72(void) {
    int32_t v1 = *(int32_t *)(g5 - 1076); // 0x6af72
    g9 = v1;
    *(int16_t *)(v1 + 4) = (int16_t)g4;
    int32_t v2 = g8 + *(int32_t *)(g10 + 24); // 0x6af7f
    g9 = v2;
    int32_t v3; // 0x6af8e
    if (*(char *)(g6 + 21) % 2 == 0) {
        // bb
        g4 = function_6b1f0();
        v3 = g9;
    } else {
        v3 = v2;
    }
    int32_t v4 = g5; // 0x6af8b
    g4 = v4 - 32;
    *(int32_t *)(v4 - 1084) = v3;
    *(int32_t *)(g5 - 32) = 128;
    int32_t v5 = function_30bf0(g6, 0, (int32_t *)g4); // 0x6afaa
    g4 = v5;
    g7 = 0;
    int32_t v6 = *(int32_t *)(g5 - 1084); // 0x6afb1
    g9 = v6;
    char v7; // 0x6afbf
    int32_t v8; // 0x6afbf
    if ((char)v5 != 0) {
        // bb8
        g4 = function_6b360();
        v8 = g9;
        v7 = g7;
    } else {
        v8 = v6;
        v7 = 0;
    }
    // 0x6afbf
    *(char *)(v8 + 6) = v7;
    int32_t v9 = g5 - 1056; // 0x6afc2
    g9 = v9;
    g4 = function_31810(g6, (int32_t *)v9, &g93);
    g8 += *(int32_t *)(g10 + 24);
    int32_t v10 = g5 - 1056; // 0x6afdf
    g9 = v10;
    int32_t v11 = *(int32_t *)v10; // 0x6afe5
    int32_t v12 = v10 + 4; // 0x6afe7
    g9 = v12;
    int32_t v13 = -1 - v11; // 0x6aff0
    g7 = v13;
    int32_t v14 = v11 - 0x1010101 & v13; // 0x6aff2
    int32_t v15 = v14 & -0x7f7f7f80; // 0x6aff4
    g4 = v15;
    while (v15 == 0) {
        // 0x6afe5
        v10 = v12;
        v11 = *(int32_t *)v10;
        v12 = v10 + 4;
        g9 = v12;
        v13 = -1 - v11;
        g7 = v13;
        v14 = v11 - 0x1010101 & v13;
        v15 = v14 & -0x7f7f7f80;
        g4 = v15;
    }
    int32_t v16 = (v14 & (int32_t)&g153 & -0x7f7f7f80) == 0 ? v15 / 0x10000 : v14; // 0x6b005
    int32_t v17 = v10 + 6; // 0x6b008
    g7 = v17;
    g9 = (v14 & (int32_t)&g153 & -0x7f7f7f80) == 0 ? v17 : v12;
    int32_t result = v16 & -0x7f7f8000; // 0x6b00e
    g4 = result;
    return result;
}

// Address range: 0x6b046 - 0x6b0b2
int32_t function_6b046(void) {
    int32_t * v1 = (int32_t *)(g5 - 1072); // 0x6b046
    *v1 = *v1 + 1;
    *(int32_t *)g8 = g4;
    int32_t v2 = g5; // 0x6b04f
    int32_t v3 = *(int32_t *)(v2 - 1080); // 0x6b04f
    g4 = v3;
    int32_t v4; // 0x6b073
    if (*(int32_t *)(v2 - 1072) == v3) {
        int32_t v5 = function_6ad5a((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6b05b
        g4 = v5;
        v4 = g5;
    } else {
        v4 = v2;
    }
    int32_t v6 = *(int32_t *)(v4 - 1072); // 0x6b061
    g8 = v6;
    int32_t v7 = 8 * v6; // 0x6b06a
    g8 = v7;
    int32_t v8 = *(int32_t *)(g10 + 24) + v7; // 0x6b06d
    g9 = v8;
    *(int32_t *)(v4 - 1076) = v8;
    if (*(char *)(g6 + 21) % 2 == 0) {
        // bb232
        g4 = function_6af38();
    }
    int32_t v9 = g5 - 28; // 0x6b07f
    g4 = v9;
    *(int32_t *)v9 = 128;
    int32_t v10 = function_30bf0(g6, 0, (int32_t *)g4); // 0x6b098
    g4 = v10;
    if ((char)v10 != 0) {
        // bb233
        g4 = function_6b230();
    }
    // 0x6b0a5
    *(int16_t *)(g5 - 32) = 0;
    g4 = 0;
    int32_t result = function_6af72(); // 0x6b0ad
    g4 = result;
    return result;
}

// Address range: 0x6b0b8 - 0x6b0b9
int32_t function_6b0b8(void) {
    // 0x6b0b8
    return g4;
}

// Address range: 0x6b0d6 - 0x6b0ea
int32_t function_6b0d6(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x5d61bab); // 0x6b0d6
    int32_t v2 = *v1 - 1; // 0x6b0d6
    *v1 = v2;
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(g6 + 12); // 0x6b0de
        *v3 = g9 + *v3;
    }
    // 0x6b0e1
    *(int16_t *)(g5 - 32) = (int16_t)g4;
    int32_t result = function_6ac62(); // 0x6b0e5
    g4 = result;
    return result;
}

// Address range: 0x6b0f0 - 0x6b139
int32_t function_6b0f0(void) {
    int32_t v1 = g6; // 0x6b0f0
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6b0f0
    g4 = v2;
    g8 = g5 - 32;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6b0f9
    g4 = v3;
    int32_t v4; // 0x6b101
    if (v3 == 0) {
        // bb
        g4 = function_6b445();
        v4 = g5;
    } else {
        v4 = g5;
    }
    uint16_t v5 = *(int16_t *)(v4 - 32); // 0x6b101
    g9 = v5;
    *(int16_t *)(v4 - 28) = v5;
    *(char *)(g5 - 28) = *(char *)(g4 + 1);
    int32_t v6 = g5 - 28; // 0x6b110
    g9 = v6;
    unsigned char v7 = *(char *)g4; // 0x6b113
    g4 = v7;
    *(char *)(g5 - 27) = v7;
    g4 = function_2cb10(g8, v6, 2);
    g9 = *(int32_t *)(g6 + 12);
    int32_t result = (int32_t)*(int16_t *)(g5 - 32); // 0x6b130
    g4 = result;
    return result;
}

// Address range: 0x6b140 - 0x6b191
int32_t function_6b140(void) {
    int32_t v1 = g6; // 0x6b140
    g9 = g5 - 28;
    int32_t v2 = g4 - *(int32_t *)(v1 + 32) + v1; // 0x6b146
    g4 = v2;
    int32_t v3; // 0x6b154
    if (v2 == 0) {
        // bb
        g4 = function_6b44c();
        v3 = g5;
    } else {
        v3 = g5;
    }
    int32_t v4 = *(int32_t *)(v3 - 28); // 0x6b14e
    g7 = v4;
    int32_t v5 = v3 - 32; // 0x6b151
    g8 = v5;
    *(int32_t *)v5 = v4;
    unsigned char v6 = *(char *)(g4 + 3); // 0x6b157
    g7 = v6;
    *(char *)(g5 - 32) = v6;
    unsigned char v7 = *(char *)(g4 + 2); // 0x6b15e
    g7 = v7;
    *(char *)(g5 - 31) = v7;
    unsigned char v8 = *(char *)(g4 + 1); // 0x6b165
    g7 = v8;
    *(char *)(g5 - 30) = v8;
    unsigned char v9 = *(char *)g4; // 0x6b16c
    g4 = v9;
    *(char *)(g5 - 29) = v9;
    g4 = function_2cb10(g9, g8, 4);
    int32_t result = *(int32_t *)(g6 + 12); // 0x6b186
    g4 = result;
    g8 = *(int32_t *)(g5 - 28);
    return result;
}

// Address range: 0x6b198 - 0x6b1ef
int32_t function_6b198(void) {
    int32_t v1 = g6; // 0x6b198
    g8 = g5 - 32;
    int32_t v2 = g4 - *(int32_t *)(v1 + 32) + v1; // 0x6b19e
    g4 = v2;
    int32_t v3; // 0x6b1a6
    if (v2 == 0) {
        // bb
        g4 = function_6b437();
        v3 = g5;
    } else {
        v3 = g5;
    }
    int32_t v4 = *(int32_t *)(v3 - 32); // 0x6b1a6
    g9 = v4;
    *(int32_t *)(v3 - 28) = v4;
    unsigned char v5 = *(char *)(g4 + 3); // 0x6b1ac
    g9 = v5;
    *(char *)(g5 - 28) = v5;
    unsigned char v6 = *(char *)(g4 + 2); // 0x6b1b3
    g9 = v6;
    *(char *)(g5 - 27) = v6;
    unsigned char v7 = *(char *)(g4 + 1); // 0x6b1ba
    g9 = v7;
    *(char *)(g5 - 26) = v7;
    *(char *)(g5 - 25) = *(char *)g4;
    int32_t v8 = g5 - 28; // 0x6b1d2
    g4 = v8;
    g4 = function_2cb10(g8, v8, 4);
    int32_t v9 = *(int32_t *)(g5 - 32); // 0x6b1de
    g9 = v9;
    g4 = *(int32_t *)(g6 + 12);
    *(int32_t *)(g5 - 1080) = v9;
    return g4;
}

// Address range: 0x6b1f0 - 0x6b230
int32_t function_6b1f0(void) {
    // 0x6b1f0
    *(int32_t *)(g5 - 1084) = g9;
    g4 = function_309b0(g6, 1);
    g7 = 0;
    g9 = *(int32_t *)(g5 - 1084);
    int32_t v1 = g6; // 0x6b216
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x6b216
    int32_t v3 = *v2; // 0x6b216
    g4 = v3;
    g7 = v1;
    int32_t v4 = v3 - *(int32_t *)(v1 + 32); // 0x6b21b
    g4 = v4;
    g7 = (int32_t)*(char *)(v4 + v1);
    int32_t v5 = *v2 + 1; // 0x6b225
    g4 = v5;
    *v2 = v5;
    return g4;
}

// Address range: 0x6b230 - 0x6b253
int32_t function_6b230(void) {
    int32_t v1 = g6; // 0x6b230
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6b230
    g9 = v2;
    int32_t v3 = g5 - 32; // 0x6b233
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6b239
    g9 = v4;
    *(int32_t *)v3 = v4;
    *(int32_t *)(g5 - 1084) = g9;
    return g4;
}

// Address range: 0x6b258 - 0x6b271
int32_t function_6b258(void) {
    int32_t v1 = g5; // 0x6b258
    int32_t v2 = *(int32_t *)(v1 - 32); // 0x6b258
    g7 = v2;
    int32_t v3 = *(int32_t *)(v1 - 1084); // 0x6b25b
    g9 = v3;
    int32_t v4 = v2 - v3; // 0x6b261
    g7 = v4;
    int32_t v5; // 0x6b268
    if (v4 != 0) {
        int32_t * v6 = (int32_t *)(g6 + 12); // 0x6b265
        *v6 = *v6 + v4;
        v5 = g5;
    } else {
        v5 = v1;
    }
    // 0x6b268
    *(int16_t *)(v5 - 32) = (int16_t)g4;
    int32_t result = function_6af72(); // 0x6b26c
    g4 = result;
    return result;
}

// Address range: 0x6b278 - 0x6b29b
int32_t function_6b278(void) {
    int32_t v1 = g6; // 0x6b278
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6b278
    g9 = v2;
    int32_t v3 = g5 - 32; // 0x6b27b
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6b281
    g9 = v4;
    *(int32_t *)v3 = v4;
    *(int32_t *)(g5 - 1084) = g9;
    return g4;
}

// Address range: 0x6b2a0 - 0x6b2b9
int32_t function_6b2a0(void) {
    // 0x6b2a0
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 - 32); // 0x6b2a0
    g7 = v2;
    int32_t v3 = *(int32_t *)(v1 - 1084); // 0x6b2a3
    g9 = v3;
    int32_t v4 = v2 - v3; // 0x6b2a9
    g7 = v4;
    if (v4 != 0) {
        int32_t * v5 = (int32_t *)(g6 + 12); // 0x6b2ad
        *v5 = *v5 + v4;
    }
    // 0x6b2b0
    *(int16_t *)(v1 - 28) = (int16_t)g4;
    return g4;
}

// Address range: 0x6b2c0 - 0x6b309
int32_t function_6b2c0(void) {
    int32_t v1 = g6; // 0x6b2c0
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6b2c0
    g4 = v2;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6b2c6
    g4 = v3;
    if (v3 == 0) {
        // bb
        g4 = function_6b3b8();
    }
    uint16_t v4 = *(int16_t *)(g5 - 32); // 0x6b2ce
    g9 = v4;
    *(int16_t *)(g5 - 28) = v4;
    *(char *)(g5 - 28) = *(char *)(g4 + 1);
    int32_t v5 = g5 - 32; // 0x6b2dd
    g9 = v5;
    *(char *)(g5 - 27) = *(char *)g4;
    int32_t v6 = g5 - 28; // 0x6b2f1
    g4 = v6;
    g4 = function_2cb10(v5, v6, 2);
    g7 = *(int32_t *)(g6 + 12);
    int32_t result = (int32_t)*(int16_t *)(g5 - 32); // 0x6b300
    g4 = result;
    return result;
}

// Address range: 0x6b310 - 0x6b359
int32_t function_6b310(void) {
    int32_t v1 = g6; // 0x6b310
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6b310
    g4 = v2;
    g9 = g5 - 28;
    int32_t v3 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6b319
    g4 = v3;
    int32_t v4; // 0x6b321
    if (v3 == 0) {
        // bb
        g4 = function_6b3c0();
        v4 = g5;
    } else {
        v4 = g5;
    }
    uint16_t v5 = *(int16_t *)(v4 - 28); // 0x6b321
    g7 = v5;
    *(int16_t *)(v4 - 32) = v5;
    unsigned char v6 = *(char *)(g4 + 1); // 0x6b329
    g7 = v6;
    *(char *)(g5 - 32) = v6;
    *(char *)(g5 - 31) = *(char *)g4;
    int32_t v7 = g5 - 32; // 0x6b341
    g4 = v7;
    g4 = function_2cb10(g9, v7, 2);
    g7 = *(int32_t *)(g6 + 12);
    int32_t result = (int32_t)*(int16_t *)(g5 - 28); // 0x6b350
    g4 = result;
    return result;
}

// Address range: 0x6b360 - 0x6b383
int32_t function_6b360(void) {
    int32_t v1 = g6; // 0x6b360
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x6b360
    g7 = v2;
    int32_t v3 = g5 - 32; // 0x6b363
    g4 = v3;
    int32_t v4 = v2 - *(int32_t *)(v1 + 32) + v1; // 0x6b369
    g7 = v4;
    *(int32_t *)v3 = v4;
    *(int32_t *)(g5 - 1088) = g7;
    return g4;
}

// Address range: 0x6b387 - 0x6b390
int32_t function_6b387(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x43f73); // 0x6b387
    *v1 = *v1 - 1;
    return g4;
}

// Address range: 0x6b395 - 0x6b3b1
int32_t function_6b395(void) {
    // 0x6b395
    int32_t v1; // ebp
    int32_t v2 = *(int32_t *)(v1 - 32); // 0x6b395
    g4 = v2;
    g9 = *(int32_t *)(v1 - 1084);
    int32_t v3 = v2 - g7; // 0x6b39e
    g4 = v3;
    int32_t result; // 0x6b3ac
    if (v3 != 0) {
        int32_t * v4 = (int32_t *)(g6 + 12); // 0x6b3a2
        *v4 = *v4 + v3;
        result = g4;
    } else {
        result = 0;
    }
    // 0x6b3a5
    g7 = (int32_t)*(char *)(v1 - 1076);
    return result;
}

// Address range: 0x6b3b8 - 0x6b3c0
int32_t function_6b3b8(void) {
    int32_t result = g5 - 32; // 0x6b3b8
    g4 = result;
    return result;
}

// Address range: 0x6b3c0 - 0x6b3c7
int32_t function_6b3c0(void) {
    int32_t result = g9; // 0x6b3c0
    g4 = result;
    return result;
}

// Address range: 0x6b3d0 - 0x6b42f
int32_t function_6b3d0(void) {
    int32_t v1 = g8 - g4; // 0x6b3d2
    g9 = v1;
    int32_t v2 = g10 + 4; // 0x6b3d4
    g4 = v2;
    g4 = function_6d5e0(v2, v1);
    int32_t v3 = *(int32_t *)(g10 + 16); // 0x6b3e3
    g9 = v3;
    g4 = g8 + v3;
    *(char *)(g5 - 1072) = (char)(v3 >= 0 == (v3 != 0));
    *(int32_t *)(g10 + 16) = g4;
    int32_t v4 = g10; // 0x6b3f5
    int32_t v5 = *(int32_t *)(v4 + 4); // 0x6b3f5
    g4 = v5;
    int32_t v6 = g8; // 0x6b3f8
    g7 = (int32_t)(v6 >= 0 == (v6 != 0)) | g7 & -256;
    *(int32_t *)(v4 + 20) = v5;
    int32_t v7 = 2 * v3; // 0x6b415
    g9 = v7;
    int32_t v8 = g4; // 0x6b417
    int32_t v9 = 2 * g8 + v8; // 0x6b41b
    g4 = v9;
    int32_t result = function_2cb20(v9, v8, v7); // 0x6b425
    g4 = result;
    return result;
}

// Address range: 0x6b430 - 0x6b437
int32_t function_6b430(void) {
    int32_t result = g8; // 0x6b430
    g4 = result;
    return result;
}

// Address range: 0x6b437 - 0x6b445
int32_t function_6b437(void) {
    int32_t result = g8; // 0x6b437
    g4 = result;
    return result;
}

// Address range: 0x6b445 - 0x6b44c
int32_t function_6b445(void) {
    int32_t result = g8; // 0x6b445
    g4 = result;
    return result;
}

// Address range: 0x6b44c - 0x6b455
int32_t function_6b44c(void) {
    int32_t result = g9; // 0x6b44c
    g4 = result;
    return result;
}

// Address range: 0x6b460 - 0x6b580
int32_t function_6b460(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x6b463
    int32_t v2 = g10; // 0x6b464
    int32_t v3 = g6; // 0x6b465
    g10 = a1;
    *(int32_t *)a1 = (int32_t)&g235;
    int32_t v4 = g10 + 4; // 0x6b472
    g8 = v4;
    *(int32_t *)v4 = 0;
    int32_t v5 = g10; // 0x6b47c
    g6 = v5 + 24;
    *(int32_t *)(v5 + 8) = 0;
    *(int32_t *)(g10 + 12) = 0;
    *(int32_t *)(g10 + 16) = 0;
    *(int32_t *)(g10 + 20) = 0;
    *(int32_t *)(g10 + 24) = 0;
    *(int32_t *)(g10 + 28) = 0;
    *(int32_t *)(g10 + 32) = 0;
    *(int32_t *)(g10 + 36) = 0;
    *(int32_t *)(g10 + 40) = 0;
    g4 = function_6d5e0(g8, (int32_t)&g93);
    int32_t v6 = g10; // 0x6b4ce
    int32_t * v7 = (int32_t *)(v6 + 16); // 0x6b4ce
    int32_t v8 = *v7; // 0x6b4ce
    g7 = v8;
    g4 = *(int32_t *)(v6 + 4);
    int32_t v9 = v8 + (int32_t)&g93; // 0x6b4d4
    g9 = v9;
    *v7 = v9;
    *(int32_t *)(g10 + 20) = g4;
    int32_t v10; // 0x6b578
    int32_t v11; // 0x6b578
    if (v8 >= 0 == (v8 != 0)) {
        int32_t v12 = g4; // 0x6b55e
        int32_t v13 = 2 * v8; // 0x6b562
        g7 = v13;
        int32_t v14 = v12 + (int32_t)&g148; // 0x6b564
        g4 = v14;
        g6 = g10 + 24;
        g4 = function_2cb20(v14, v12, v13);
        v10 = g10;
        v11 = *(int32_t *)(v10 + 16);
        g9 = v11;
    } else {
        // 0x6b460
        v10 = g10;
        v11 = g9;
    }
    // 0x6b4e4
    g4 = 0;
    int32_t v15; // 0x6b501
    if (v11 >= 1) {
        int32_t v16 = *(int32_t *)(v10 + 4); // 0x6b4f0
        g9 = v16;
        *(int16_t *)v16 = 0;
        int32_t v17 = g4 + 1; // 0x6b4f9
        g4 = v17;
        int32_t v18 = g10; // 0x6b4fc
        while (*(int32_t *)(v18 + 16) > v17) {
            // 0x6b4f0
            v16 = *(int32_t *)(v18 + 4);
            g9 = v16;
            *(int16_t *)(v16 + 2 * v17) = 0;
            v17 = g4 + 1;
            g4 = v17;
            v18 = g10;
        }
        v15 = v18;
    } else {
        v15 = v10;
    }
    // 0x6b501
    g4 = *(int32_t *)(v15 + 36);
    *(int16_t *)(v15 + 44) = 0;
    int32_t v19 = g10 + 24; // 0x6b50a
    g6 = v19;
    int32_t v20 = g4; // 0x6b518
    function_6c040(v19, 1);
    g4 = v20;
    g4 = function_6bd30(g6, v20, 1);
    int32_t v21 = *(int32_t *)(g10 + 24); // 0x6b537
    g4 = v21;
    *(int32_t *)v21 = 0;
    int32_t v22 = *(int32_t *)(g10 + 24); // 0x6b540
    g4 = v22;
    *(char *)(v22 + 6) = 0;
    *(int16_t *)(*(int32_t *)(g10 + 24) + 4) = 0;
    g4 = a2;
    *(int32_t *)(g10 + 48) = a2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x6b5a0 - 0x6b647
int32_t function_6b5a0(int32_t a1, int32_t * a2) {
    int32_t result = (int32_t)a2;
    int32_t v1 = g8; // 0x6b5a3
    int32_t v2 = g10; // 0x6b5a4
    int32_t v3 = g6; // 0x6b5a5
    g6 = a1;
    int32_t v4 = a1; // 0x6b60f
    int32_t v5 = a1 + 16;
    int32_t result2; // 0x6b5fa
    while (true) {
        uint16_t v6 = *(int16_t *)v5;
        int32_t v7 = v6;
        g10 = v7;
        if (v6 == -1) {
            result2 = v7;
            // break -> 0x6b5f7
            break;
        }
        int32_t * v8 = (int32_t *)(v4 + 4); // 0x6b5bc
        int32_t v9 = v7; // 0x6b5b6
        int32_t v10; // 0x6b5bf
        while (true) {
            int32_t v11 = v9 & (int32_t)&g863; // 0x6b5b6
            v10 = 12 * v11;
            g8 = v10;
            g4 = result;
            g9 = 3 * v11;
            if ((char)result == 0) {
                // break -> 0x6b608
                break;
            }
            if (g724 == 0) {
                // 0x6b640
                return result;
            }
            int32_t v12 = *v8; // 0x6b5ea
            g4 = v12;
            uint16_t v13 = *(int16_t *)(v12 + v10); // 0x6b5ed
            int32_t v14 = v13; // 0x6b5ed
            g10 = v14;
            if (v13 == -1) {
                result2 = v14;
                goto lab_0x6b5f7_2;
            }
            v9 = v14;
        }
        // 0x6b608
        g4 = result;
        int32_t v15 = (v10 | 8) + *v8; // 0x6b614
        g4 = v15;
        if ((char)v15 == 0) {
            result2 = v7;
            // break -> 0x6b5f7
            break;
        }
        int32_t v16; // 0x6b629
        int32_t v17; // 0x6b62c
        if (g724 == 0) {
            // bb
            g4 = function_6b688();
            v17 = g8;
            v16 = g6;
        } else {
            v17 = v10;
            v16 = v4;
        }
        int32_t v18 = *(int32_t *)(v16 + 4); // 0x6b629
        g4 = v18;
        v4 = v16;
        v5 = v17 + 2 + v18;
    }
    goto lab_0x6b5f7_2;
  lab_0x6b5f7_2:
    // 0x6b5f7
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x6b659 - 0x6b65e
int32_t function_6b659(void) {
    uint32_t v1 = g6; // 0x6b659
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b662 - 0x6b667
int32_t function_6b662(void) {
    uint32_t v1 = g6; // 0x6b662
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b668 - 0x6b675
int32_t function_6b668(void) {
    char * v1 = (char *)(g4 + 10); // 0x6b668
    unsigned char v2 = *v1; // 0x6b668
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6b66b
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6b66d
    g8 = v4;
    int32_t v5 = g4; // 0x6b66f
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6b67a - 0x6b682
int32_t function_6b67a(void) {
    // 0x6b67a
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x6b688 - 0x6b68f
int32_t function_6b688(void) {
    // 0x6b688
    return g4;
}

// Address range: 0x6b693 - 0x6b69f
int32_t function_6b693(void) {
    // 0x6b693
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x386e8b40); // 0x6b693
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6b699
    g4 = v3 + 36 & 255 | v3 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b6a5 - 0x6b6aa
int32_t function_6b6a5(void) {
    uint32_t v1 = g6; // 0x6b6a5
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b6ae - 0x6b6b3
int32_t function_6b6ae(void) {
    uint32_t v1 = g6; // 0x6b6ae
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b6bf - 0x6b6c4
int32_t function_6b6bf(void) {
    // 0x6b6bf
    return g4;
}

// Address range: 0x6b6d0 - 0x6b791
int32_t function_6b6d0(int32_t a1, uint16_t a2) {
    unsigned char v1 = g724; // 0x6b6d9
    int32_t v2 = v1; // 0x6b6d9
    g4 = v2;
    g10 = a1;
    int32_t v3 = a2; // 0x6b6e3
    g8 = v3;
    int32_t v4; // 0x6b6fd
    int32_t v5; // 0x6b6e9
    if (v1 == 0) {
        // bb
        v5 = function_6b838();
        g4 = v5;
        v4 = g8;
    } else {
        v5 = v2;
        v4 = v3;
    }
    // 0x6b6ef
    g9 = (int32_t)&g304;
    int32_t v6; // 0x6b703
    if ((int16_t)v4 != -1) {
        int32_t v7 = *(int32_t *)(g10 + 4); // 0x6b6fa
        g7 = v7;
        v6 = v7 + 12 * (v4 & (int32_t)&g863);
        g9 = v6;
    } else {
        v6 = (int32_t)&g304;
    }
    // 0x6b706
    int32_t v8; // 0x6b70b
    if (*(int16_t *)(v6 + 2) == -1) {
        // bb247
        v8 = function_6b860();
        g4 = v8;
    } else {
        v8 = v5;
    }
    int32_t result; // 0x6b713
    if ((char)v8 == 0) {
        // bb248
        result = function_6b9d8();
        g4 = result;
    } else {
        result = v8;
    }
    int32_t v9 = g8; // 0x6b719
    g9 = (int32_t)&g304;
    int32_t v10; // 0x6b72d
    if ((int16_t)v9 != -1) {
        int32_t v11 = *(int32_t *)(g10 + 4); // 0x6b724
        g6 = v11;
        int32_t v12 = v9 & (int32_t)&g863; // 0x6b727
        g8 = v12;
        v10 = v11 + 12 * v12;
        g9 = v10;
    } else {
        v10 = (int32_t)&g304;
    }
    uint16_t v13 = *(int16_t *)(v10 + 2);
    int32_t v14 = v13;
    g6 = v14;
    if ((char)result == 0) {
        // 0x6b78a
        return result;
    }
    int32_t result2; // 0x6b76a
    while (true) {
        // 0x6b740
        g4 = (int32_t)&g304;
        int32_t v15; // 0x6b754
        if (v13 != -1) {
            int32_t v16 = *(int32_t *)(g10 + 4); // 0x6b74b
            g8 = v16;
            v15 = v16 + 12 * (v14 & (int32_t)&g863);
            g4 = v15;
        } else {
            v15 = (int32_t)&g304;
        }
        // 0x6b757
        if (*(int16_t *)v15 == -1) {
            int32_t v17 = function_6b7f8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6b75b
            g4 = v17;
        }
        int32_t v18 = g724; // 0x6b761
        g4 = v18;
        if (g724 == 0) {
            // bb250
            result2 = function_6b7d0();
            g4 = result2;
        } else {
            result2 = v18;
        }
        int32_t v19 = g6; // 0x6b76c
        g9 = (int32_t)&g304;
        int32_t v20; // 0x6b780
        if ((int16_t)v19 != -1) {
            int32_t v21 = *(int32_t *)(g10 + 4); // 0x6b777
            g7 = v21;
            int32_t v22 = v19 & (int32_t)&g863; // 0x6b77a
            g6 = v22;
            v20 = v21 + 12 * v22;
            g9 = v20;
        } else {
            v20 = (int32_t)&g304;
        }
        uint16_t v23 = *(int16_t *)v20;
        int32_t v24 = v23;
        g6 = v24;
        if ((char)result2 == 0) {
            // break -> 0x6b78a
            break;
        }
        v14 = v24;
        v13 = v23;
    }
    // 0x6b78a
    return result2;
}

// Address range: 0x6b795 - 0x6b7a1
int32_t function_6b795(void) {
    // 0x6b795
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x38598b40); // 0x6b795
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6b79b
    g4 = v3 + 36 & 255 | v3 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b7a7 - 0x6b7ac
int32_t function_6b7a7(void) {
    uint32_t v1 = g6; // 0x6b7a7
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b7b0 - 0x6b7b5
int32_t function_6b7b0(void) {
    uint32_t v1 = g6; // 0x6b7b0
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b7c1 - 0x6b7c6
int32_t function_6b7c1(void) {
    // 0x6b7c1
    return g4;
}

// Address range: 0x6b7d0 - 0x6b7d7
int32_t function_6b7d0(void) {
    // 0x6b7d0
    return g4;
}

// Address range: 0x6b7db - 0x6b7e7
int32_t function_6b7db(void) {
    // 0x6b7db
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xf2875c0); // 0x6b7db
    *v2 = *v2 + 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b7e7 - 0x6b7e9
int32_t function_6b7e7(void) {
    // 0x6b7e7
    return g4;
}

// Address range: 0x6b7f0 - 0x6b7f8
int32_t function_6b7f0(void) {
    // 0x6b7f0
    g6 = -1;
    return g4;
}

// Address range: 0x6b7f8 - 0x6b802
int32_t function_6b7f8(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t result = g6; // 0x6b7fb
    g4 = result;
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x6b809 - 0x6b80f
int32_t function_6b809(void) {
    int32_t v1 = g4; // 0x6b809
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b815 - 0x6b81a
int32_t function_6b815(void) {
    uint32_t v1 = g6; // 0x6b815
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b81e - 0x6b823
int32_t function_6b81e(void) {
    uint32_t v1 = g6; // 0x6b81e
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b82f - 0x6b831
int32_t function_6b82f(void) {
    // 0x6b82f
    return g4;
}

// Address range: 0x6b838 - 0x6b83f
int32_t function_6b838(void) {
    // 0x6b838
    return g4;
}

// Address range: 0x6b843 - 0x6b853
int32_t function_6b843(void) {
    // 0x6b843
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0xb7af040); // 0x6b843
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6b849
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b853 - 0x6b858
int32_t function_6b853(void) {
    // 0x6b853
    return g4;
}

// Address range: 0x6b860 - 0x6b8fa
int32_t function_6b860(void) {
    int32_t v1 = g4; // 0x6b860
    int32_t v2; // 0x6b862
    if ((char)v1 == 0) {
        // bb
        v2 = function_6b9f8();
        g4 = v2;
    } else {
        v2 = v1;
    }
    int32_t v3 = g8; // 0x6b868
    g9 = (int32_t)&g304;
    int32_t v4; // 0x6b896
    int32_t result; // 0x6b89f
    int32_t v5; // 0x6b87c
    if ((int16_t)v3 != -1) {
        int32_t v6 = *(int32_t *)(g10 + 4); // 0x6b873
        g7 = v6;
        v5 = v6 + 12 * (v3 & (int32_t)&g863);
        g9 = v5;
        v4 = v3;
        result = v2;
    } else {
        v4 = v3;
        v5 = (int32_t)&g304;
        result = v2;
    }
    while (true) {
        int32_t v7 = (int32_t)*(int16_t *)(v5 + 4); // 0x6b8ed
        g6 = v7;
        if ((char)result == 0) {
            // break -> 0x6b8f3
            break;
        }
        int16_t v8 = v4; // 0x6b888
        g9 = (int32_t)&g304;
        int32_t v9; // 0x6b89c
        if (v8 != -1) {
            int32_t v10 = *(int32_t *)(g10 + 4); // 0x6b893
            g7 = v10;
            v9 = v10 + 12 * (v4 & (int32_t)&g863);
            g9 = v9;
        } else {
            v9 = (int32_t)&g304;
        }
        uint16_t v11 = *(int16_t *)(v9 + 4); // 0x6b8a1
        int32_t v12 = v11; // 0x6b8a1
        g9 = v12;
        g4 = (int32_t)&g304;
        int32_t v13; // 0x6b8bb
        if (v11 != -1) {
            int32_t v14 = v12 & (int32_t)&g863; // 0x6b8b2
            g9 = v14;
            g4 = 3 * v14;
            int32_t v15 = *(int32_t *)(g10 + 4); // 0x6b8b8
            g9 = v15;
            v13 = v15 + 12 * v14;
            g4 = v13;
        } else {
            v13 = (int32_t)&g304;
        }
        // 0x6b8be
        int32_t v16; // 0x6b8c8
        if (v8 != *(int16_t *)(v13 + 2)) {
            int32_t v17 = function_6b7f8((int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6b8c2
            g4 = v17;
            v16 = g6;
        } else {
            v16 = v7;
        }
        if ((int16_t)v16 == -1) {
            // bb19
            g4 = function_6b7f0();
        }
        int32_t v18 = g724; // 0x6b8d2
        g4 = v18;
        int32_t v19; // 0x6b8db
        if (g724 == 0) {
            // bb20
            v19 = function_6b958();
            g4 = v19;
        } else {
            v19 = v18;
        }
        int32_t v20 = g6; // 0x6b8e0
        int32_t v21 = 12 * (v20 & (int32_t)&g863) + *(int32_t *)(g10 + 4); // 0x6b8e6
        g9 = v21;
        g8 = v20;
        v4 = v20;
        v5 = v21;
        result = v19;
    }
    // 0x6b8f3
    return result;
}

// Address range: 0x6b8fe - 0x6b90a
int32_t function_6b8fe(void) {
    // 0x6b8fe
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xf7575c0); // 0x6b8fe
    *v2 = *v2 + 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b90a - 0x6b90f
int32_t function_6b90a(void) {
    // 0x6b90a
    return g4;
}

// Address range: 0x6b910 - 0x6b91a
int32_t function_6b910(void) {
    // 0x6b910
    *(int32_t *)(g5 - 28) = g9;
    return g4;
}

// Address range: 0x6b925 - 0x6b931
int32_t function_6b925(void) {
    int32_t * v1 = (int32_t *)(g10 - 57); // 0x6b925
    *v1 = *v1 & 0xa40cc05;
    uint32_t v2 = g6; // 0x6b92c
    g6 = 512 * v2 / 256 & 0xfe00 | v2 & -0xff01;
    return g4;
}

// Address range: 0x6b935 - 0x6b93a
int32_t function_6b935(void) {
    uint32_t v1 = g6; // 0x6b935
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b93b - 0x6b948
int32_t function_6b93b(void) {
    char * v1 = (char *)(g4 + 10); // 0x6b93b
    unsigned char v2 = *v1; // 0x6b93b
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6b93e
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6b940
    g8 = v4;
    int32_t v5 = g4; // 0x6b942
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6b94d - 0x6b955
int32_t function_6b94d(void) {
    // 0x6b94d
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x6b958 - 0x6b95f
int32_t function_6b958(void) {
    // 0x6b958
    return g4;
}

// Address range: 0x6b963 - 0x6b96f
int32_t function_6b963(void) {
    // 0x6b963
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xf4075c0); // 0x6b963
    *v2 = *v2 + 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b96f - 0x6b974
int32_t function_6b96f(void) {
    // 0x6b96f
    return g4;
}

// Address range: 0x6b979 - 0x6b97f
int32_t function_6b979(void) {
    int32_t v1 = g4; // 0x6b979
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b985 - 0x6b98a
int32_t function_6b985(void) {
    uint32_t v1 = g6; // 0x6b985
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b98e - 0x6b993
int32_t function_6b98e(void) {
    uint32_t v1 = g6; // 0x6b98e
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b99f - 0x6b9a4
int32_t function_6b99f(void) {
    // 0x6b99f
    return g4;
}

// Address range: 0x6b9a9 - 0x6b9af
int32_t function_6b9a9(void) {
    int32_t v1 = g4; // 0x6b9a9
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b9b5 - 0x6b9ba
int32_t function_6b9b5(void) {
    uint32_t v1 = g6; // 0x6b9b5
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b9be - 0x6b9c3
int32_t function_6b9be(void) {
    uint32_t v1 = g6; // 0x6b9be
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6b9cf - 0x6b9d1
int32_t function_6b9cf(void) {
    // 0x6b9cf
    return g4;
}

// Address range: 0x6b9d8 - 0x6b9df
int32_t function_6b9d8(void) {
    // 0x6b9d8
    return g4;
}

// Address range: 0x6b9e3 - 0x6b9ef
int32_t function_6b9e3(void) {
    // 0x6b9e3
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xf2c75c0); // 0x6b9e3
    *v2 = *v2 + 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6b9ef - 0x6b9f4
int32_t function_6b9ef(void) {
    // 0x6b9ef
    return g4;
}

// Address range: 0x6b9f8 - 0x6b9ff
int32_t function_6b9f8(void) {
    // 0x6b9f8
    return g4;
}

// Address range: 0x6ba03 - 0x6ba0f
int32_t function_6ba03(void) {
    // 0x6ba03
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0xf6475c0); // 0x6ba03
    *v2 = *v2 + 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6ba0f - 0x6ba14
int32_t function_6ba0f(void) {
    // 0x6ba0f
    return g4;
}

// Address range: 0x6ba15 - 0x6ba1b
int32_t function_6ba15(void) {
    int32_t v1 = g4; // 0x6ba15
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6ba21 - 0x6ba26
int32_t function_6ba21(void) {
    uint32_t v1 = g6; // 0x6ba21
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ba2a - 0x6ba2f
int32_t function_6ba2a(void) {
    uint32_t v1 = g6; // 0x6ba2a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ba3b - 0x6ba3d
int32_t function_6ba3b(void) {
    // 0x6ba3b
    return g4;
}

// Address range: 0x6ba41 - 0x6ba47
int32_t function_6ba41(void) {
    int32_t v1 = g4; // 0x6ba41
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6ba4d - 0x6ba52
int32_t function_6ba4d(void) {
    uint32_t v1 = g6; // 0x6ba4d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ba56 - 0x6ba5b
int32_t function_6ba56(void) {
    uint32_t v1 = g6; // 0x6ba56
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ba67 - 0x6ba6c
int32_t function_6ba67(void) {
    // 0x6ba67
    return g4;
}

// Address range: 0x6ba6d - 0x6ba73
int32_t function_6ba6d(void) {
    int32_t v1 = g4; // 0x6ba6d
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6ba79 - 0x6ba7e
int32_t function_6ba79(void) {
    uint32_t v1 = g6; // 0x6ba79
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ba82 - 0x6ba87
int32_t function_6ba82(void) {
    uint32_t v1 = g6; // 0x6ba82
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ba93 - 0x6ba98
int32_t function_6ba93(void) {
    // 0x6ba93
    return g4;
}

// Address range: 0x6baa0 - 0x6bb4a
int32_t function_6baa0(int32_t a1) {
    int32_t v1 = g8; // 0x6baa3
    int32_t v2 = g10; // 0x6baa4
    int32_t v3 = g6; // 0x6baa5
    g10 = a1;
    uint16_t v4 = *(int16_t *)(a1 + 22); // 0x6baac
    int32_t v5 = v4; // 0x6baac
    g7 = v5;
    if (v4 != -1) {
        int32_t result = *(int32_t *)(a1 + 8); // 0x6bab6
        g4 = result;
        int32_t v6; // 0x6bae5
        if (result >= 1) {
            // 0x6babd
            g9 = 0;
            g8 = 0;
            int32_t v7 = 0; // 0x6bb1c
            int32_t v8 = a1; // 0x6bb23
            int32_t v9 = 0; // 0x6bb1e
            int32_t v10; // 0x6bad8
            while (true) {
                // 0x6bac8
                g6 = v9;
                int32_t v11; // 0x6bad3
                int32_t v12; // 0x6badb
                if (v9 < result) {
                    uint16_t v13 = (int16_t)v9; // 0x6bace
                    if (v13 <= (int16_t)v5) {
                        if (g724 == 0) {
                            // 0x6bb40
                            return result;
                        }
                        int32_t v14 = *(int32_t *)(v8 + 4) + v7; // 0x6bb1c
                        g7 = v14;
                        int32_t v15; // 0x6bb36
                        int32_t v16;
                        if (v13 != *(int16_t *)v14) {
                            uint16_t v17 = *(int16_t *)(v8 + 20); // 0x6bb23
                            g4 = v17;
                            *(int16_t *)(v14 + 2) = v17;
                            int32_t v18 = *(int32_t *)(g10 + 4); // 0x6bb2b
                            g4 = v18;
                            *(int16_t *)(g9 + v18) = (int16_t)g6;
                            *(int16_t *)(g10 + 20) = (int16_t)g6;
                            v16 = g6;
                            v15 = g10;
                        } else {
                            v16 = v9;
                            v15 = v8;
                        }
                        int32_t v19 = (int32_t)*(int16_t *)(v15 + 22); // 0x6bb36
                        g7 = v19;
                        v10 = v15;
                        v12 = v16;
                        v11 = v19;
                    } else {
                        v10 = v8;
                        v12 = v9;
                        v11 = v5;
                    }
                } else {
                    v10 = v8;
                    v12 = v9;
                    v11 = v5;
                }
                if ((int16_t)v11 == (int16_t)v12) {
                    // break -> 0x6bae5
                    break;
                }
                int32_t v20 = *(int32_t *)(v10 + 8); // 0x6bad8
                g4 = v20;
                int32_t v21 = v12 + 1 & (int32_t)&g863; // 0x6bade
                g6 = v21;
                if (v21 >= v20) {
                    // break -> 0x6bae5
                    break;
                }
                int32_t v22 = g8 + 1; // 0x6bb00
                g8 = v22;
                int32_t v23 = g9 + 12; // 0x6bb03
                g9 = v23;
                if (v22 == (int32_t)&g863) {
                    // break -> 0x6bae5
                    break;
                }
                v7 = v23;
                v8 = v10;
                v5 = v11;
                result = v20;
                v9 = v22;
            }
            v6 = v10;
        } else {
            v6 = a1;
        }
        // 0x6bae5
        *(int16_t *)(v6 + 16) = (int16_t)&g863;
        *(int16_t *)(g10 + 18) = 0;
    }
    // 0x6baf1
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x6bb55 - 0x6bb56
int32_t function_6bb55(void) {
    // 0x6bb55
    return g4;
}

// Address range: 0x6bb5c - 0x6bb61
int32_t function_6bb5c(void) {
    uint32_t v1 = g6; // 0x6bb5c
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6bb65 - 0x6bb6a
int32_t function_6bb65(void) {
    uint32_t v1 = g6; // 0x6bb65
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6bb6b - 0x6bb78
int32_t function_6bb6b(void) {
    char * v1 = (char *)(g4 + 10); // 0x6bb6b
    unsigned char v2 = *v1; // 0x6bb6b
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6bb6e
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6bb70
    g8 = v4;
    int32_t v5 = g4; // 0x6bb72
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6bb7d - 0x6bb82
int32_t function_6bb7d(void) {
    // 0x6bb7d
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 28);
    return g4;
}

// Address range: 0x6bb90 - 0x6bba7
int32_t function_6bb90(int32_t a1) {
    // 0x6bb90
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6bb9a
    g4 = v1;
    int32_t v2; // 0x6bba1
    if (v1 < 0) {
        // bb
        g4 = function_6bbc6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x6bba1
    g4 = v3;
    int32_t result; // 0x6bba5
    if (v3 == 0) {
        // bb233
        result = function_6bbbf();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x6bba7
    return result;
}

// Address range: 0x6bbbf - 0x6bbc6
int32_t function_6bbbf(void) {
    // 0x6bbbf
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x6bbc6 - 0x6bbcc
int32_t function_6bbc6(int32_t a1, int32_t a2) {
    // 0x6bbc6
    g6 = a1;
    return g4;
}

// Address range: 0x6bbd0 - 0x6bbe7
int32_t function_6bbd0(int32_t a1) {
    // 0x6bbd0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6bbda
    g4 = v1;
    int32_t v2; // 0x6bbe1
    if (v1 < 0) {
        // bb
        g4 = function_6bc06((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x6bbe1
    g4 = v3;
    int32_t result; // 0x6bbe5
    if (v3 == 0) {
        // bb7
        result = function_6bbff();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x6bbe7
    return result;
}

// Address range: 0x6bbff - 0x6bc06
int32_t function_6bbff(void) {
    // 0x6bbff
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x6bc06 - 0x6bc0c
int32_t function_6bc06(int32_t a1, int32_t a2) {
    // 0x6bc06
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x6bc10 - 0x6bc2e
int32_t function_6bc10(int32_t a1) {
    // 0x6bc10
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x6bc26
    g4 = result;
    return result;
}

// Address range: 0x6bc80 - 0x6bc97
int32_t function_6bc80(int32_t a1) {
    // 0x6bc80
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6bc8a
    g4 = v1;
    int32_t v2; // 0x6bc91
    if (v1 < 0) {
        // bb
        g4 = function_6bcb6((int32_t)&g870, (int32_t)&g870);
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v3 = *(int32_t *)v2; // 0x6bc91
    g4 = v3;
    int32_t result; // 0x6bc95
    if (v3 == 0) {
        // bb7
        result = function_6bcaf();
        g4 = result;
    } else {
        result = v3;
    }
    // 0x6bc97
    return result;
}

// Address range: 0x6bcaf - 0x6bcb6
int32_t function_6bcaf(void) {
    // 0x6bcaf
    *(int32_t *)(g6 + 4) = 0;
    return g4;
}

// Address range: 0x6bcb6 - 0x6bcbc
int32_t function_6bcb6(int32_t a1, int32_t a2) {
    // 0x6bcb6
    g6 = a1;
    g5 = a2;
    return g4;
}

// Address range: 0x6bcc0 - 0x6bcde
int32_t function_6bcc0(int32_t a1) {
    // 0x6bcc0
    g6 = a1;
    g4 = *(int32_t *)(a1 + 8);
    *(int32_t *)(a1 + 12) = 0;
    int32_t result = *(int32_t *)g6; // 0x6bcd6
    g4 = result;
    return result;
}

// Address range: 0x6bd30 - 0x6bd71
int32_t function_6bd30(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // 0x6bd30
    int32_t v2 = g6; // 0x6bd33
    g6 = a1;
    g7 = a2;
    g9 = a3;
    int32_t result = *(int32_t *)(a1 + 12) - a2 - a3; // 0x6bd42
    g4 = result;
    if (result >= 0 != result != 0) {
        // 0x6bd48
        g6 = v2;
        g5 = v1;
        return result;
    }
    if (a3 < 1) {
        // 0x6bd48
        g6 = v2;
        g5 = v1;
        return result;
    }
    int32_t v3 = a3 + a2; // 0x6bd59
    g9 = v3;
    int32_t v4 = *(int32_t *)a1 + 8 * v3; // 0x6bd64
    g4 = v4;
    g6 = v2;
    g5 = v1;
    int32_t result2 = function_2cb20(v2, v1, v4); // 0x6bd6c
    g4 = result2;
    return result2;
}

// Address range: 0x6bd80 - 0x6bdf1
int32_t function_6bd80(int32_t a1, int32_t a2) {
    // 0x6bd80
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6bd8b
    g10 = v1;
    int32_t v2; // 0x6bd92
    if (v1 < 0) {
        int32_t v3 = function_6be0f((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6bd90
        g4 = v3;
        v2 = g6;
    } else {
        v2 = a1;
    }
    int32_t v4 = *(int32_t *)(v2 + 4); // 0x6bd92
    g4 = v4;
    int32_t v5 = v4 + a2; // 0x6bd98
    g7 = v5;
    int32_t v6; // 0x6bdb9
    int32_t v7; // 0x6bd9c
    if (v1 != 0) {
        // bb39
        v7 = function_6be20();
        g4 = v7;
        v6 = g7;
    } else {
        v6 = v5;
        v7 = v4;
    }
    // 0x6bda2
    g9 = 3;
    int32_t v8 = v7 == 0 ? 3 : v7; // 0x6bda9
    g4 = v8;
    int32_t v9; // 0x6bdbd
    if (v6 > v8) {
        int32_t v10 = 2 * v8; // 0x6bdb0
        while (v6 > v10) {
            // 0x6bdb0
            v10 *= 2;
        }
        // 0x6bdb6
        g4 = v10;
        v9 = v10;
    } else {
        v9 = v8;
    }
    int32_t v11 = v9 & (int32_t)&g863; // 0x6bdb6
    g10 = v11;
    int32_t v12; // 0x6bdea
    if (v6 > v11) {
        int32_t v13; // 0x6bdc2
        int32_t v14; // 0x6bdc0
        if ((int16_t)v9 == 0) {
            // bb40
            v14 = function_6be38();
            g4 = v14;
            v13 = g7;
        } else {
            v14 = v9;
            v13 = v6;
        }
        int32_t v15 = v13 & (int32_t)&g863; // 0x6bdc2
        g9 = v15;
        int32_t v16; // 0x6bdc9
        int32_t v17; // 0x6bdc7
        if (v15 != v13) {
            // bb41
            v17 = function_6be0f((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
            g4 = v17;
            v16 = g7;
        } else {
            v17 = v14;
            v16 = v13;
        }
        // 0x6bdc9
        if (g10 < v16) {
            uint32_t v18 = g9; // 0x6bdd0
            int32_t v19 = v17 + v18; // 0x6bdd0
            int32_t v20 = ((int32_t)(v19 < 0) + v19) / 2; // 0x6bdd9
            int32_t v21 = v20 & (int32_t)&g863; // 0x6bddb
            while (v18 > v21) {
                // 0x6bdd0
                v19 = v20 + v18;
                v20 = ((int32_t)(v19 < 0) + v19) / 2;
                v21 = v20 & (int32_t)&g863;
            }
            // 0x6bde8
            g4 = v20;
            g7 = v21;
            v12 = v20;
        } else {
            v12 = v17;
        }
    } else {
        v12 = v9;
    }
    int32_t v22 = g6; // 0x6bde8
    int32_t v23 = *(int32_t *)v22; // 0x6bde8
    g9 = v23;
    *(int32_t *)(v22 + 4) = v12;
    int32_t result; // 0x6bdef
    if (v23 == 0) {
        // bb42
        result = function_6be48();
        g4 = result;
    } else {
        // 0x6bde8
        result = g4;
    }
    // 0x6bdf1
    return result;
}

// Address range: 0x6be0f - 0x6be16
int32_t function_6be0f(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6be0f
    g6 = a1;
    g10 = a2;
    g5 = a3;
    return g4;
}

// Address range: 0x6be20 - 0x6be32
int32_t function_6be20(void) {
    int32_t v1 = g7 - 1; // 0x6be20
    uint32_t v2 = g10; // 0x6be28
    int64_t v3 = 0x100000000 * (int64_t)(v1 >> 31) | (int64_t)v1; // 0x6be28
    int64_t v4 = v2; // 0x6be28
    g9 = v3 % v4;
    int32_t result = ((int32_t)(v3 / v4) + 1) * v2; // 0x6be2d
    g4 = result;
    return result;
}

// Address range: 0x6be38 - 0x6be45
int32_t function_6be38(void) {
    // 0x6be38
    g4--;
    int32_t result = function_6be0f((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6be43
    g4 = result;
    return result;
}

// Address range: 0x6be48 - 0x6be49
int32_t function_6be48(void) {
    // 0x6be48
    return g4;
}

// Address range: 0x6be70 - 0x6bf25
int32_t function_6be70(int32_t a1) {
    int32_t v1 = g6; // 0x6be76
    g6 = a1;
    int32_t v2 = g10; // 0x6be7c
    uint16_t v3 = *(int16_t *)(a1 + 20); // 0x6be7f
    int32_t v4 = v3; // 0x6be7f
    g4 = v4;
    if (v3 != -1) {
        int32_t v5 = *(int32_t *)(a1 + 4); // 0x6be89
        g9 = v5;
        int32_t v6 = v4 & (int32_t)&g863; // 0x6be8c
        g7 = 3 * v6;
        g7 = (int32_t)*(int16_t *)((12 * v6 | 2) + v5);
        *(int32_t *)(a1 + 24) = v5;
        *(int16_t *)(g6 + 20) = (int16_t)g7;
        g6 = v1;
        g10 = v2;
        return g4;
    }
    int32_t v7 = (int32_t)*(int16_t *)(a1 + 22); // 0x6beb0
    g7 = v7;
    int32_t v8 = *(int32_t *)(a1 + 8); // 0x6beb4
    g9 = v8;
    int32_t v9 = v7 & (int32_t)&g863; // 0x6beb7
    g10 = v9;
    if (v9 < v8) {
        // bb
        g4 = function_6bf48();
    }
    int32_t v10 = v8 >= 0 == (v8 != 0) ? 0 : (int32_t)&g863; // 0x6bece
    g7 = v10;
    g4 = -1;
    if (v8 > v10) {
        // bb31
        g4 = function_6bf2d();
    }
    int32_t v11 = g6 + 4; // 0x6bede
    g4 = v11;
    g4 = function_6bd80(v11, 1);
    int32_t v12 = g6; // 0x6bef1
    int32_t v13 = (int32_t)*(int16_t *)(v12 + 22); // 0x6bef1
    g4 = v13;
    int32_t v14 = *(int32_t *)(v12 + 8); // 0x6bef5
    g9 = v14;
    int32_t v15 = v13 & (int32_t)&g863; // 0x6bef8
    g7 = v15;
    if (v15 < v14) {
        // bb32
        g4 = function_6bf60();
    }
    int32_t v16 = v14 >= 0 == (v14 != 0) ? 0 : (int32_t)&g863; // 0x6bf0b
    g7 = v16;
    g4 = -1;
    int32_t result; // 0x6bf19
    if (v14 > v16) {
        // bb33
        result = function_6bf2d();
        g4 = result;
    } else {
        result = -1;
    }
    // 0x6bf1b
    return result;
}

// Address range: 0x6bf2d - 0x6bf41
int32_t function_6bf2d(void) {
    int32_t v1 = g6; // 0x6bf2d
    g9 = *(int32_t *)(v1 + 4);
    *(int16_t *)(v1 + 22) = (int16_t)g4;
    *(int32_t *)(g6 + 24) = g9;
    g6 = *(int32_t *)(g5 - 8);
    g10 = *(int32_t *)(g5 - 4);
    return g4;
}

// Address range: 0x6bf48 - 0x6bf60
int32_t function_6bf48(void) {
    int32_t v1 = g7 + 1; // 0x6bf48
    int32_t v2 = v1 & (int32_t)&g863; // 0x6bf4b
    g10 = v2;
    int32_t v3 = g9; // 0x6bf4e
    int32_t v4 = v3 - v2; // 0x6bf4e
    int32_t result = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v1 : g4; // 0x6bf50
    g4 = result;
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v2 : (int32_t)&g863; // 0x6bf58
    g7 = v5;
    return result;
}

// Address range: 0x6bf60 - 0x6bf7a
int32_t function_6bf60(void) {
    int32_t v1 = g4 + 1; // 0x6bf60
    int32_t v2 = v1 & (int32_t)&g863; // 0x6bf68
    g10 = v2;
    int32_t v3 = g9; // 0x6bf6b
    int32_t v4 = v3 - v2; // 0x6bf6b
    int32_t result = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v1 : -1; // 0x6bf6d
    g4 = result;
    int32_t v5 = v4 < 0 == ((v4 ^ v3) & (v3 ^ v2)) < 0 == (v4 != 0) ? v2 : (int32_t)&g863; // 0x6bf75
    g7 = v5;
    return result;
}

// Address range: 0x6bf80 - 0x6bfbf
int32_t function_6bf80(int32_t a1, int32_t a2) {
    // 0x6bf80
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6bf8b
    g10 = v1;
    int32_t v2 = *(int32_t *)(a1 + 4); // 0x6bf92
    g4 = v2;
    int32_t v3 = v2 + a2; // 0x6bf98
    g7 = v3;
    int32_t v4; // 0x6bfb2
    int32_t v5; // 0x6bf9c
    if (v1 != 0) {
        // bb
        v5 = function_6bfe8();
        g4 = v5;
        v4 = g7;
    } else {
        v4 = v3;
        v5 = v2;
    }
    // 0x6bf9e
    g9 = 4;
    int32_t v6 = v5 == 0 ? 4 : v5; // 0x6bfa5
    g4 = v6;
    int32_t v7; // 0x6bfb8
    if (v4 > v6) {
        // 0x6bfac
        g10 = v1;
        int32_t v8 = 2 * v6; // 0x6bfb0
        while (v4 > v8) {
            // 0x6bfb0
            v8 *= 2;
        }
        // 0x6bfb6
        g4 = v8;
        v7 = v8;
    } else {
        v7 = v6;
    }
    int32_t v9 = g6; // 0x6bfb6
    int32_t v10 = *(int32_t *)v9; // 0x6bfb6
    g9 = v10;
    *(int32_t *)(v9 + 4) = v7;
    int32_t result; // 0x6bfbd
    if (v10 == 0) {
        // bb18
        result = function_6c018();
        g4 = result;
    } else {
        // 0x6bfb6
        result = g4;
    }
    // 0x6bfbf
    return result;
}

// Address range: 0x6bfe8 - 0x6c018
int32_t function_6bfe8(void) {
    uint32_t v1 = g7; // 0x6bfe8
    int32_t v2 = v1 - 1; // 0x6bfe8
    uint32_t v3 = g10; // 0x6bff0
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x6bff0
    int64_t v5 = v3; // 0x6bff0
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x6bff5
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x6c000
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x6c009
    while (v1 > v8) {
        // 0x6c000
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x6c00f
    g4 = v8;
    int32_t v9 = g6; // 0x6c00f
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x6c018 - 0x6c019
int32_t function_6c018(void) {
    // 0x6c018
    return g4;
}

// Address range: 0x6c040 - 0x6c083
int32_t function_6c040(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x6c046
    g6 = a1;
    int32_t v2 = g10; // 0x6c04c
    g10 = a2;
    int32_t v3 = *(int32_t *)(a1 + 12); // 0x6c052
    g4 = v3;
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x6c055
    g9 = v4;
    int32_t v5 = v3 + a2; // 0x6c058
    g4 = v5;
    int32_t v6 = v5 - v4; // 0x6c05a
    int32_t v7; // 0x6c06c
    int32_t v8; // 0x6c06f
    if (v5 > v4) {
        // 0x6c05e
        g4 = v6;
        g4 = function_6bf80(a1, v6);
        v7 = g6;
        v8 = g10 + *(int32_t *)(v7 + 12);
        g4 = v8;
    } else {
        v7 = a1;
        v8 = v5;
    }
    // 0x6c071
    *(int32_t *)(v7 + 12) = v8;
    int32_t v9 = g6; // 0x6c074
    int32_t v10 = *(int32_t *)v9; // 0x6c074
    g4 = v10;
    *(int32_t *)(v9 + 16) = v10;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x6c090 - 0x6c277
int32_t function_6c090(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x6c093
    int32_t v2 = g10; // 0x6c094
    int32_t v3 = g6; // 0x6c095
    g4 = g724;
    g6 = a1;
    int32_t v4 = a2 % 0x10000; // 0x6c0a3
    g10 = v4;
    int32_t v5; // 0x6c0c7
    if (g724 == 0) {
        // bb
        g4 = function_6c2f0();
        v5 = g10;
    } else {
        v5 = v4;
    }
    // 0x6c0b2
    g7 = (int32_t)&g304;
    int32_t v6; // 0x6c0cd
    int32_t v7; // 0x6c0d3
    if ((int16_t)v5 != -1) {
        // 0x6c0c4
        v6 = 12 * (v5 & (int32_t)&g863);
        g9 = v6;
        v7 = *(int32_t *)(g6 + 4) + v6;
        g7 = v7;
    } else {
        v7 = (int32_t)&g304;
        v6 = 0xbfff4;
    }
    int32_t v8 = (int32_t)*(int16_t *)(v7 + 2); // 0x6c0d9
    g8 = v8;
    int32_t v9; // 0x6c0e3
    if (g724 == 0) {
        // bb37
        g4 = function_6c2b0();
        v9 = g8;
    } else {
        v9 = v8;
    }
    int32_t v10 = *(int32_t *)(g6 + 4); // 0x6c0e7
    g9 = v10;
    int32_t v11; // 0x6c0f0
    int32_t v12; // 0x6c108
    if ((int16_t)v9 == -1) {
        // bb38
        g4 = function_6c2db();
        v12 = g9;
        v11 = g8;
    } else {
        v12 = v10;
        v11 = v9;
    }
    int32_t v13 = 12 * (v11 & (int32_t)&g863); // 0x6c0f6
    int32_t v14 = v13 + v12; // 0x6c0fc
    g7 = v14;
    uint16_t v15 = *(int16_t *)v14; // 0x6c0fe
    g7 = v15;
    g4 = v6;
    *(int16_t *)((v6 | 2) + v12) = v15;
    if (g724 == 0) {
        // 0x6c270
        return g4;
    }
    int32_t v16 = g8; // 0x6c113
    g4 = (int32_t)&g304;
    int32_t v17; // 0x6c121
    if ((int16_t)v16 != -1) {
        // 0x6c11e
        g4 = v13;
        v17 = *(int32_t *)(g6 + 4) + v13;
        g4 = v17;
    } else {
        v17 = (int32_t)&g304;
    }
    // 0x6c124
    int32_t v18; // 0x6c155
    if (*(int16_t *)v17 != -1) {
        // 0x6c12a
        int32_t v19; // 0x6c137
        if (g724 == 0) {
            // bb39
            g4 = function_6c350();
            v19 = g8;
        } else {
            v19 = v16;
        }
        int32_t v20 = *(int32_t *)(g6 + 4); // 0x6c13b
        g7 = v20;
        int32_t v21; // 0x6c148
        if ((int16_t)v19 != -1) {
            // 0x6c145
            v21 = v20 + v13;
        } else {
            v21 = (int32_t)&g304;
        }
        // 0x6c14a
        g4 = v21;
        int32_t v22 = (int32_t)*(int16_t *)v21; // 0x6c14a
        g4 = 3 * v22;
        *(int16_t *)(v20 + 4 + 12 * v22) = (int16_t)g10;
        v18 = g8;
    } else {
        v18 = v16;
    }
    if ((int16_t)v18 != -1) {
        // 0x6c15b
        if (g724 == 0) {
            // bb40
            g4 = function_6c390();
        }
        // 0x6c168
        if ((int16_t)g10 == -1) {
            // bb41
            g4 = function_6c400();
        }
        int32_t v23 = *(int32_t *)(g6 + 4); // 0x6c172
        g7 = v23;
        int32_t v24 = v23 + v6; // 0x6c17b
        g4 = v24;
        uint16_t v25 = *(int16_t *)(v24 + 4); // 0x6c17d
        g4 = v25;
        g7 = v23;
        g9 = v13;
        *(int16_t *)(v23 + (v13 | 4)) = v25;
    }
    int32_t v26 = g10; // 0x6c18c
    int16_t * v27 = (int16_t *)(g6 + 16); // 0x6c18c
    if ((int16_t)v26 == *v27) {
        // 0x6c260
        *v27 = (int16_t)g8;
    } else {
        // 0x6c196
        g7 = g724;
        int32_t v28; // 0x6c1a5
        if (g724 == 0) {
            // bb42
            g4 = function_6c3d0();
            v28 = g10;
        } else {
            v28 = v26;
        }
        // 0x6c1a5
        g4 = (int32_t)&g304;
        int32_t v29; // 0x6c1b3
        if ((int16_t)v28 != -1) {
            // 0x6c1b0
            g4 = v6;
            v29 = *(int32_t *)(g6 + 4) + v6;
            g4 = v29;
        } else {
            v29 = (int32_t)&g304;
        }
        int32_t v30 = (int32_t)*(int16_t *)(v29 + 4); // 0x6c1b8
        g9 = v30;
        int32_t v31; // 0x6c1cd
        if ((char)g7 == 0) {
            // bb43
            g4 = function_6c318();
            v31 = g9;
        } else {
            v31 = v30;
        }
        // 0x6c1c2
        g4 = (int32_t)&g304;
        int32_t v32; // 0x6c1d6
        if ((int16_t)v31 != -1) {
            int32_t v33 = v31 & (int32_t)&g863; // 0x6c1cd
            g4 = v33;
            int32_t v34 = *(int32_t *)(g6 + 4); // 0x6c1d0
            g9 = v34;
            v32 = v34 + 12 * v33;
            g4 = v32;
        } else {
            v32 = (int32_t)&g304;
        }
        int32_t v35 = g10; // 0x6c1d9
        int32_t v36 = g7; // 0x6c230
        if ((int16_t)v35 != *(int16_t *)v32) {
            int32_t v37; // 0x6c238
            if ((char)v36 == 0) {
                // bb46
                g4 = function_6c450();
                v37 = g10;
            } else {
                v37 = v35;
            }
            int32_t v38 = *(int32_t *)(g6 + 4); // 0x6c23c
            g7 = v38;
            int32_t v39; // 0x6c249
            if ((int16_t)v37 != -1) {
                // 0x6c246
                v39 = v38 + v6;
            } else {
                v39 = (int32_t)&g304;
            }
            // 0x6c24b
            g4 = v39;
            int32_t v40 = (int32_t)*(int16_t *)(v39 + 4); // 0x6c24b
            g4 = 3 * v40;
            *(int16_t *)((12 * v40 | 2) + v38) = (int16_t)g8;
        } else {
            int32_t v41; // 0x6c1e6
            if ((char)v36 == 0) {
                // bb44
                g4 = function_6c410();
                v41 = g10;
            } else {
                v41 = v35;
            }
            int32_t v42 = *(int32_t *)(g6 + 4); // 0x6c1ea
            g7 = v42;
            int32_t v43; // 0x6c1f7
            if ((int16_t)v41 != -1) {
                // 0x6c1f4
                v43 = v42 + v6;
            } else {
                v43 = (int32_t)&g304;
            }
            // 0x6c1f9
            g4 = v43;
            int32_t v44 = (int32_t)*(int16_t *)(v43 + 4); // 0x6c1f9
            g4 = 3 * v44;
            *(int16_t *)(12 * v44 + v42) = (int16_t)g8;
        }
    }
    int32_t v45 = *(int32_t *)(g6 + 4); // 0x6c204
    g4 = v45;
    int16_t v46 = g10; // 0x6c207
    g9 = v13;
    *(int16_t *)(v45 + v13) = v46;
    if (v46 != -1) {
        int32_t v47 = *(int32_t *)(g6 + 4); // 0x6c214
        g4 = v47;
        g7 = v6;
        *(int16_t *)(v6 + 4 + v47) = (int16_t)g8;
    }
    // 0x6c21f
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x6c27f - 0x6c28b
int32_t function_6c27f(void) {
    int32_t v1 = g4; // 0x6c285
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c291 - 0x6c296
int32_t function_6c291(void) {
    uint32_t v1 = g6; // 0x6c291
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c29a - 0x6c29f
int32_t function_6c29a(void) {
    uint32_t v1 = g6; // 0x6c29a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c2ab - 0x6c2b0
int32_t function_6c2ab(void) {
    // 0x6c2ab
    return g4;
}

// Address range: 0x6c2b0 - 0x6c2b7
int32_t function_6c2b0(void) {
    // 0x6c2b0
    return g4;
}

// Address range: 0x6c2bb - 0x6c2cb
int32_t function_6c2bb(void) {
    // 0x6c2bb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x337af040); // 0x6c2bb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6c2c1
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c2db - 0x6c2ec
int32_t function_6c2db(void) {
    // 0x6c2db
    *(int32_t *)(g5 - 28) = 0xbfff4;
    g7 = (int32_t)&g304;
    return g4;
}

// Address range: 0x6c2f0 - 0x6c2f7
int32_t function_6c2f0(void) {
    // 0x6c2f0
    return g4;
}

// Address range: 0x6c2fb - 0x6c30b
int32_t function_6c2fb(void) {
    // 0x6c2fb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x337af040); // 0x6c2fb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6c301
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c30b - 0x6c313
int32_t function_6c30b(void) {
    // 0x6c30b
    int32_t v1; // ebp
    *(char *)(v1 - 41) = (char)g9;
    return g4;
}

// Address range: 0x6c318 - 0x6c322
int32_t function_6c318(void) {
    // 0x6c318
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x6c326 - 0x6c34d
int32_t function_6c326(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x6c326
    int32_t v2 = *v1 - 1; // 0x6c326
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_6c510();
    }
    // 0x6c332
    g7 = g724;
    g4 = (int32_t)&g304;
    return (int32_t)&g304;
}

// Address range: 0x6c350 - 0x6c357
int32_t function_6c350(void) {
    // 0x6c350
    return g4;
}

// Address range: 0x6c363 - 0x6c36b
int32_t function_6c363(void) {
    int32_t v1 = g8 + 1; // 0x6c363
    g8 = v1;
    int32_t v2 = g4; // 0x6c365
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c371 - 0x6c376
int32_t function_6c371(void) {
    uint32_t v1 = g6; // 0x6c371
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c37a - 0x6c37f
int32_t function_6c37a(void) {
    uint32_t v1 = g6; // 0x6c37a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c38b - 0x6c390
int32_t function_6c38b(void) {
    // 0x6c38b
    return g4;
}

// Address range: 0x6c390 - 0x6c397
int32_t function_6c390(void) {
    // 0x6c390
    return g4;
}

// Address range: 0x6c3a3 - 0x6c3ab
int32_t function_6c3a3(void) {
    int32_t v1 = g8 + 1; // 0x6c3a3
    g8 = v1;
    int32_t v2 = g4; // 0x6c3a5
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c3b1 - 0x6c3b6
int32_t function_6c3b1(void) {
    uint32_t v1 = g6; // 0x6c3b1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c3ba - 0x6c3bf
int32_t function_6c3ba(void) {
    uint32_t v1 = g6; // 0x6c3ba
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c3cb - 0x6c3d0
int32_t function_6c3cb(void) {
    // 0x6c3cb
    return g4;
}

// Address range: 0x6c3d0 - 0x6c3d7
int32_t function_6c3d0(void) {
    // 0x6c3d0
    return g4;
}

// Address range: 0x6c3dc - 0x6c3ff
int32_t function_6c3dc(void) {
    // 0x6c3dc
    if (g4 != 0) {
        // bb
        g4 = function_6c550();
    }
    // 0x6c3e4
    g7 = g724;
    g4 = (int32_t)&g304;
    return (int32_t)&g304;
}

// Address range: 0x6c400 - 0x6c410
int32_t function_6c400(void) {
    int32_t v1 = *(int32_t *)(g6 + 4); // 0x6c400
    g9 = v1;
    g4 = (int32_t)&g304;
    *(int32_t *)(g5 - 32) = v1;
    return g4;
}

// Address range: 0x6c410 - 0x6c417
int32_t function_6c410(void) {
    // 0x6c410
    return g4;
}

// Address range: 0x6c41d - 0x6c423
int32_t function_6c41d(void) {
    unsigned char v1 = *(char *)&g8; // 0x6c41d
    *(char *)g8 = v1 / 16 | 16 * v1;
    return g4;
}

// Address range: 0x6c423 - 0x6c42b
int32_t function_6c423(void) {
    int32_t v1 = g8 + 1; // 0x6c423
    g8 = v1;
    int32_t v2 = g4; // 0x6c425
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c431 - 0x6c436
int32_t function_6c431(void) {
    uint32_t v1 = g6; // 0x6c431
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c43a - 0x6c43f
int32_t function_6c43a(void) {
    uint32_t v1 = g6; // 0x6c43a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c44b - 0x6c450
int32_t function_6c44b(void) {
    // 0x6c44b
    return g4;
}

// Address range: 0x6c450 - 0x6c457
int32_t function_6c450(void) {
    // 0x6c450
    return g4;
}

// Address range: 0x6c463 - 0x6c46b
int32_t function_6c463(void) {
    int32_t v1 = g8 + 1; // 0x6c463
    g8 = v1;
    int32_t v2 = g4; // 0x6c465
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c471 - 0x6c476
int32_t function_6c471(void) {
    uint32_t v1 = g6; // 0x6c471
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c47a - 0x6c47f
int32_t function_6c47a(void) {
    uint32_t v1 = g6; // 0x6c47a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c48b - 0x6c490
int32_t function_6c48b(void) {
    // 0x6c48b
    return g4;
}

// Address range: 0x6c496 - 0x6c49b
int32_t function_6c496(void) {
    uint32_t v1 = g6; // 0x6c496
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c49f - 0x6c4a4
int32_t function_6c49f(void) {
    uint32_t v1 = g6; // 0x6c49f
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c4a5 - 0x6c4b2
int32_t function_6c4a5(void) {
    char * v1 = (char *)(g4 + 10); // 0x6c4a5
    unsigned char v2 = *v1; // 0x6c4a5
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6c4a8
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6c4aa
    g8 = v4;
    int32_t v5 = g4; // 0x6c4ac
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6c4b6 - 0x6c4be
int32_t function_6c4b6(void) {
    int32_t v1 = g8; // 0x6c4b6
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c4be - 0x6c4c6
int32_t function_6c4be(void) {
    // 0x6c4be
    int32_t v1; // ebp
    *(char *)(v1 - 41) = (char)g9;
    return g4;
}

// Address range: 0x6c4d6 - 0x6c4db
int32_t function_6c4d6(void) {
    uint32_t v1 = g6; // 0x6c4d6
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c4df - 0x6c4e4
int32_t function_6c4df(void) {
    uint32_t v1 = g6; // 0x6c4df
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c4e5 - 0x6c4f2
int32_t function_6c4e5(void) {
    char * v1 = (char *)(g4 + 10); // 0x6c4e5
    unsigned char v2 = *v1; // 0x6c4e5
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6c4e8
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6c4ea
    g8 = v4;
    int32_t v5 = g4; // 0x6c4ec
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6c4f6 - 0x6c4fe
int32_t function_6c4f6(void) {
    int32_t v1 = g8; // 0x6c4f6
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g852;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c4fe - 0x6c506
int32_t function_6c4fe(void) {
    // 0x6c4fe
    int32_t v1; // ebp
    *(char *)(v1 - 41) = (char)g7;
    return g4;
}

// Address range: 0x6c510 - 0x6c535
int32_t function_6c510(void) {
    // 0x6c510
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g304 = (int16_t)&g863;
    *(int16_t *)&g305 = (int16_t)&g863;
    *(int16_t *)&g306 = (int16_t)&g863;
    return g4;
}

// Address range: 0x6c539 - 0x6c541
int32_t function_6c539(void) {
    int32_t v1 = g8; // 0x6c539
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g852;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c541 - 0x6c549
int32_t function_6c541(void) {
    // 0x6c541
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x6c550 - 0x6c572
int32_t function_6c550(void) {
    // 0x6c550
    *(int16_t *)&g304 = (int16_t)&g863;
    *(int16_t *)&g305 = (int16_t)&g863;
    *(int16_t *)&g306 = (int16_t)&g863;
    return g4;
}

// Address range: 0x6c577 - 0x6c57c
int32_t function_6c577(void) {
    // 0x6c577
    return g4;
}

// Address range: 0x6c580 - 0x6c767
int32_t function_6c580(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x6c583
    int32_t v2 = g10; // 0x6c584
    int32_t v3 = g6; // 0x6c585
    int32_t v4 = g724; // 0x6c589
    g4 = v4;
    g6 = a1;
    int32_t v5 = a2 % 0x10000; // 0x6c593
    g10 = v5;
    int32_t v6; // 0x6c5b4
    int32_t v7; // 0x6c599
    if (g724 == 0) {
        // bb
        v7 = function_6c7e0();
        g4 = v7;
        v6 = g10;
    } else {
        v7 = v4;
        v6 = v5;
    }
    // 0x6c59f
    g7 = (int32_t)&g304;
    int32_t v8; // 0x6c5ba
    int32_t v9; // 0x6c5c0
    if ((int16_t)v6 != -1) {
        // 0x6c5b1
        v8 = 12 * (v6 & (int32_t)&g863);
        g9 = v8;
        v9 = *(int32_t *)(g6 + 4) + v8;
        g7 = v9;
    } else {
        v9 = (int32_t)&g304;
        v8 = 0xbfff4;
    }
    int32_t v10 = (int32_t)*(int16_t *)v9; // 0x6c5c4
    g8 = v10;
    int32_t v11; // 0x6c5cd
    if ((char)v7 == 0) {
        // bb42
        g4 = function_6c7a0();
        v11 = g8;
    } else {
        v11 = v10;
    }
    int32_t v12 = *(int32_t *)(g6 + 4); // 0x6c5d1
    g9 = v12;
    int32_t v13; // 0x6c5da
    int32_t v14; // 0x6c5f1
    if ((int16_t)v11 == -1) {
        // bb43
        g4 = function_6c980();
        v14 = g9;
        v13 = g8;
    } else {
        v14 = v12;
        v13 = v11;
    }
    int32_t v15 = 12 * (v13 & (int32_t)&g863); // 0x6c5e0
    g7 = v15;
    int32_t v16 = v15 + v14; // 0x6c5e8
    g4 = v16;
    uint16_t v17 = *(int16_t *)(v16 + 2); // 0x6c5ea
    g4 = v17;
    g7 = v8;
    *(int16_t *)(v14 + v8) = v17;
    if (g724 == 0) {
        // 0x6c760
        return g4;
    }
    int32_t v18 = g8; // 0x6c602
    g4 = (int32_t)&g304;
    int32_t v19; // 0x6c610
    if ((int16_t)v18 != -1) {
        // 0x6c60d
        g4 = v15;
        v19 = *(int32_t *)(g6 + 4) + v15;
        g4 = v19;
    } else {
        v19 = (int32_t)&g304;
    }
    // 0x6c613
    int32_t v20; // 0x6c646
    if (*(int16_t *)(v19 + 2) != -1) {
        int32_t v21 = *(int32_t *)(g6 + 4); // 0x6c62b
        g9 = v21;
        int32_t v22; // 0x6c638
        if ((int16_t)v18 != -1) {
            // 0x6c635
            v22 = v21 + v15;
        } else {
            v22 = (int32_t)&g304;
        }
        // 0x6c63a
        g4 = v22;
        int32_t v23 = (int32_t)*(int16_t *)(v22 + 2); // 0x6c63a
        g4 = 3 * v23;
        *(int16_t *)(v21 + 4 + 12 * v23) = (int16_t)g10;
        v20 = g8;
    } else {
        v20 = v18;
    }
    if ((int16_t)v20 != -1) {
        // 0x6c659
        if ((int16_t)g10 == -1) {
            // bb44
            g4 = function_6c8f0();
        }
        int32_t v24 = *(int32_t *)(g6 + 4); // 0x6c663
        g9 = v24;
        int32_t v25 = v24 + v8; // 0x6c66c
        g4 = v25;
        uint16_t v26 = *(int16_t *)(v25 + 4); // 0x6c66e
        g4 = v26;
        g9 = v24;
        g7 = v15;
        *(int16_t *)(v24 + (v15 | 4)) = v26;
    }
    int32_t v27 = g10; // 0x6c67d
    int16_t * v28 = (int16_t *)(g6 + 16); // 0x6c67d
    if ((int16_t)v27 == *v28) {
        // 0x6c750
        *v28 = (int16_t)g8;
    } else {
        // 0x6c687
        g7 = g724;
        int32_t v29; // 0x6c696
        if (g724 == 0) {
            // bb45
            g4 = function_6c8c0();
            v29 = g10;
        } else {
            v29 = v27;
        }
        // 0x6c696
        g4 = (int32_t)&g304;
        int32_t v30; // 0x6c6a4
        if ((int16_t)v29 != -1) {
            // 0x6c6a1
            g4 = v8;
            v30 = *(int32_t *)(g6 + 4) + v8;
            g4 = v30;
        } else {
            v30 = (int32_t)&g304;
        }
        int32_t v31 = (int32_t)*(int16_t *)(v30 + 4); // 0x6c6a9
        g9 = v31;
        int32_t v32; // 0x6c6be
        if ((char)g7 == 0) {
            // bb46
            g4 = function_6c800();
            v32 = g9;
        } else {
            v32 = v31;
        }
        // 0x6c6b3
        g4 = (int32_t)&g304;
        int32_t v33; // 0x6c6c7
        if ((int16_t)v32 != -1) {
            int32_t v34 = v32 & (int32_t)&g863; // 0x6c6be
            g4 = v34;
            int32_t v35 = *(int32_t *)(g6 + 4); // 0x6c6c1
            g9 = v35;
            v33 = v35 + 12 * v34;
            g4 = v33;
        } else {
            v33 = (int32_t)&g304;
        }
        int32_t v36 = g10; // 0x6c6ca
        int32_t v37 = g7; // 0x6c720
        if ((int16_t)v36 != *(int16_t *)(v33 + 2)) {
            int32_t v38; // 0x6c728
            if ((char)v37 == 0) {
                // bb49
                g4 = function_6c940();
                v38 = g10;
            } else {
                v38 = v36;
            }
            int32_t v39 = *(int32_t *)(g6 + 4); // 0x6c72c
            g7 = v39;
            int32_t v40; // 0x6c739
            if ((int16_t)v38 != -1) {
                // 0x6c736
                v40 = v39 + v8;
            } else {
                v40 = (int32_t)&g304;
            }
            // 0x6c73b
            g4 = v40;
            int32_t v41 = (int32_t)*(int16_t *)(v40 + 4); // 0x6c73b
            g4 = 3 * v41;
            *(int16_t *)(12 * v41 + v39) = (int16_t)g8;
        } else {
            int32_t v42; // 0x6c6d8
            if ((char)v37 == 0) {
                // bb47
                g4 = function_6c900();
                v42 = g10;
            } else {
                v42 = v36;
            }
            int32_t v43 = *(int32_t *)(g6 + 4); // 0x6c6dc
            g7 = v43;
            int32_t v44; // 0x6c6e9
            if ((int16_t)v42 != -1) {
                // 0x6c6e6
                v44 = v43 + v8;
            } else {
                v44 = (int32_t)&g304;
            }
            // 0x6c6eb
            g4 = v44;
            int32_t v45 = (int32_t)*(int16_t *)(v44 + 4); // 0x6c6eb
            g4 = 3 * v45;
            *(int16_t *)((12 * v45 | 2) + v43) = (int16_t)g8;
        }
    }
    int32_t v46 = *(int32_t *)(g6 + 4); // 0x6c6f7
    g4 = v46;
    int16_t v47 = g10; // 0x6c6fa
    g7 = v15;
    *(int16_t *)(v46 + (v15 | 2)) = v47;
    if (v47 != -1) {
        int32_t v48 = *(int32_t *)(g6 + 4); // 0x6c708
        g4 = v48;
        g9 = v8;
        *(int16_t *)(v8 + 4 + v48) = (int16_t)g8;
    }
    // 0x6c713
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x6c76f - 0x6c77b
int32_t function_6c76f(void) {
    int32_t v1 = g4; // 0x6c775
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c781 - 0x6c786
int32_t function_6c781(void) {
    uint32_t v1 = g6; // 0x6c781
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c78a - 0x6c78f
int32_t function_6c78a(void) {
    uint32_t v1 = g6; // 0x6c78a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c79b - 0x6c7a0
int32_t function_6c79b(void) {
    // 0x6c79b
    return g4;
}

// Address range: 0x6c7a0 - 0x6c7a7
int32_t function_6c7a0(void) {
    // 0x6c7a0
    return g4;
}

// Address range: 0x6c7b3 - 0x6c7bb
int32_t function_6c7b3(void) {
    int32_t v1 = g8 + 1; // 0x6c7b3
    g8 = v1;
    int32_t v2 = g4; // 0x6c7b5
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c7c1 - 0x6c7c6
int32_t function_6c7c1(void) {
    uint32_t v1 = g6; // 0x6c7c1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c7ca - 0x6c7cf
int32_t function_6c7ca(void) {
    uint32_t v1 = g6; // 0x6c7ca
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c7db - 0x6c7e0
int32_t function_6c7db(void) {
    // 0x6c7db
    return g4;
}

// Address range: 0x6c7e0 - 0x6c7e7
int32_t function_6c7e0(void) {
    // 0x6c7e0
    return g4;
}

// Address range: 0x6c7eb - 0x6c7fb
int32_t function_6c7eb(void) {
    // 0x6c7eb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x5b7af040); // 0x6c7eb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6c7f1
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c7fb - 0x6c800
int32_t function_6c7fb(void) {
    // 0x6c7fb
    return g4;
}

// Address range: 0x6c800 - 0x6c80a
int32_t function_6c800(void) {
    // 0x6c800
    *(int32_t *)(g5 - 36) = g9;
    return g4;
}

// Address range: 0x6c80e - 0x6c835
int32_t function_6c80e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a23ab); // 0x6c80e
    int32_t v2 = *v1 - 1; // 0x6c80e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_6c9c8();
    }
    // 0x6c81a
    g7 = g724;
    g4 = (int32_t)&g304;
    return (int32_t)&g304;
}

// Address range: 0x6c838 - 0x6c83f
int32_t function_6c838(void) {
    // 0x6c838
    return g4;
}

// Address range: 0x6c84b - 0x6c853
int32_t function_6c84b(void) {
    int32_t v1 = g8 + 1; // 0x6c84b
    g8 = v1;
    int32_t v2 = g4; // 0x6c84d
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c859 - 0x6c85e
int32_t function_6c859(void) {
    uint32_t v1 = g6; // 0x6c859
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c862 - 0x6c867
int32_t function_6c862(void) {
    uint32_t v1 = g6; // 0x6c862
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c873 - 0x6c878
int32_t function_6c873(void) {
    // 0x6c873
    return g4;
}

// Address range: 0x6c880 - 0x6c887
int32_t function_6c880(void) {
    // 0x6c880
    return g4;
}

// Address range: 0x6c893 - 0x6c89b
int32_t function_6c893(void) {
    int32_t v1 = g8 + 1; // 0x6c893
    g8 = v1;
    int32_t v2 = g4; // 0x6c895
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c8a1 - 0x6c8a6
int32_t function_6c8a1(void) {
    uint32_t v1 = g6; // 0x6c8a1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c8aa - 0x6c8af
int32_t function_6c8aa(void) {
    uint32_t v1 = g6; // 0x6c8aa
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c8bb - 0x6c8c0
int32_t function_6c8bb(void) {
    // 0x6c8bb
    return g4;
}

// Address range: 0x6c8c0 - 0x6c8c7
int32_t function_6c8c0(void) {
    // 0x6c8c0
    return g4;
}

// Address range: 0x6c8cc - 0x6c8ef
int32_t function_6c8cc(void) {
    // 0x6c8cc
    if (g4 != 0) {
        // bb
        g4 = function_6ca08();
    }
    // 0x6c8d4
    g7 = g724;
    g4 = (int32_t)&g304;
    return (int32_t)&g304;
}

// Address range: 0x6c8f0 - 0x6c900
int32_t function_6c8f0(void) {
    // 0x6c8f0
    *(int32_t *)(g5 - 28) = *(int32_t *)(g6 + 4);
    g4 = (int32_t)&g304;
    return (int32_t)&g304;
}

// Address range: 0x6c900 - 0x6c907
int32_t function_6c900(void) {
    // 0x6c900
    return g4;
}

// Address range: 0x6c913 - 0x6c91b
int32_t function_6c913(void) {
    int32_t v1 = g8 + 1; // 0x6c913
    g8 = v1;
    int32_t v2 = g4; // 0x6c915
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c921 - 0x6c926
int32_t function_6c921(void) {
    uint32_t v1 = g6; // 0x6c921
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c92a - 0x6c92f
int32_t function_6c92a(void) {
    uint32_t v1 = g6; // 0x6c92a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c93b - 0x6c940
int32_t function_6c93b(void) {
    // 0x6c93b
    return g4;
}

// Address range: 0x6c940 - 0x6c947
int32_t function_6c940(void) {
    // 0x6c940
    return g4;
}

// Address range: 0x6c953 - 0x6c95b
int32_t function_6c953(void) {
    int32_t v1 = g8 + 1; // 0x6c953
    g8 = v1;
    int32_t v2 = g4; // 0x6c955
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6c961 - 0x6c966
int32_t function_6c961(void) {
    uint32_t v1 = g6; // 0x6c961
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c96a - 0x6c96f
int32_t function_6c96a(void) {
    uint32_t v1 = g6; // 0x6c96a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c97b - 0x6c980
int32_t function_6c97b(void) {
    // 0x6c97b
    return g4;
}

// Address range: 0x6c980 - 0x6c991
int32_t function_6c980(void) {
    // 0x6c980
    *(int32_t *)(g5 - 52) = 0xbfff4;
    g4 = (int32_t)&g304;
    return (int32_t)&g304;
}

// Address range: 0x6c999 - 0x6c99f
int32_t function_6c999(void) {
    int32_t v1 = g4; // 0x6c999
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c9a5 - 0x6c9aa
int32_t function_6c9a5(void) {
    uint32_t v1 = g6; // 0x6c9a5
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c9ae - 0x6c9b3
int32_t function_6c9ae(void) {
    uint32_t v1 = g6; // 0x6c9ae
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6c9bf - 0x6c9c4
int32_t function_6c9bf(void) {
    // 0x6c9bf
    return g4;
}

// Address range: 0x6c9c8 - 0x6c9ed
int32_t function_6c9c8(void) {
    // 0x6c9c8
    *(int32_t *)(g5 - 36) = g9;
    *(int16_t *)&g304 = (int16_t)&g863;
    *(int16_t *)&g305 = (int16_t)&g863;
    *(int16_t *)&g306 = (int16_t)&g863;
    return g4;
}

// Address range: 0x6c9f1 - 0x6c9f9
int32_t function_6c9f1(void) {
    int32_t v1 = g8; // 0x6c9f1
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g852;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6c9f9 - 0x6ca01
int32_t function_6c9f9(void) {
    // 0x6c9f9
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 36);
    return g4;
}

// Address range: 0x6ca08 - 0x6ca2a
int32_t function_6ca08(void) {
    // 0x6ca08
    *(int16_t *)&g304 = (int16_t)&g863;
    *(int16_t *)&g305 = (int16_t)&g863;
    *(int16_t *)&g306 = (int16_t)&g863;
    return g4;
}

// Address range: 0x6ca2f - 0x6ca34
int32_t function_6ca2f(void) {
    // 0x6ca2f
    return g4;
}

// Address range: 0x6ca40 - 0x6ccdf
int32_t function_6ca40(int32_t a1, uint32_t a2) {
    int32_t v1 = g8; // 0x6ca43
    int32_t v2 = g10; // 0x6ca44
    int32_t v3 = g6; // 0x6ca45
    g6 = a1;
    int32_t v4 = a2 % 0x10000; // 0x6ca4c
    g8 = v4;
    int32_t v5;
    int32_t v6; // 0x6caad
    int32_t v7; // 0x6cbc2
    int32_t v8; // 0x6cc23
    int32_t v9; // 0x6ca50
    int32_t v10; // 0x6cb1e
    while (true) {
      lab_0x6ca50_2:;
        uint16_t v11 = *(int16_t *)(a1 + 16); // 0x6ca50
        v9 = v11;
        g4 = v9;
        if ((int16_t)v4 == v11) {
            v6 = a1;
            // break -> 0x6caad
            break;
        }
        // 0x6ca59
        g9 = g724;
        int32_t v12; // 0x6ca76
        if (g724 == 0) {
            // bb
            g4 = function_6cdb0();
            v12 = g8;
        } else {
            v12 = v4;
        }
        // 0x6ca68
        g4 = (int32_t)&g304;
        int32_t v13; // 0x6ca7c
        if ((int16_t)v12 != -1) {
            int32_t v14 = *(int32_t *)(g6 + 4); // 0x6ca73
            g7 = v14;
            v13 = v14 + 12 * (v12 & (int32_t)&g863);
            g4 = v13;
        } else {
            v13 = (int32_t)&g304;
        }
        int32_t v15 = (int32_t)*(int16_t *)(v13 + 4); // 0x6ca81
        g10 = v15;
        int32_t v16; // 0x6ca96
        if ((char)g9 == 0) {
            // bb67
            g4 = function_6cd70();
            v16 = g10;
        } else {
            v16 = v15;
        }
        // 0x6ca8b
        g4 = (int32_t)&g304;
        int32_t v17; // 0x6ca9f
        if ((int16_t)v16 != -1) {
            int32_t v18 = v16 & (int32_t)&g863; // 0x6ca96
            g10 = v18;
            g4 = 3 * v18;
            int32_t v19 = *(int32_t *)(g6 + 4); // 0x6ca9c
            g10 = v19;
            v17 = v19 + 12 * v18;
            g4 = v17;
        } else {
            v17 = (int32_t)&g304;
        }
        // 0x6caa2
        if (*(int16_t *)(v17 + 6) != 0) {
            int32_t v20 = g6; // 0x6caa9
            int32_t v21 = (int32_t)*(int16_t *)(v20 + 16); // 0x6caa9
            g4 = v21;
            v9 = v21;
            v6 = v20;
            goto lab_0x6caad;
        }
        int32_t v22 = g724; // 0x6cad0
        g4 = v22;
        int32_t result; // 0x6cad9
        if (g724 == 0) {
            // bb69
            result = function_6cd00();
            g4 = result;
        } else {
            result = v22;
        }
        int32_t v23 = g8; // 0x6cadf
        g9 = (int32_t)&g304;
        int32_t v24; // 0x6caf3
        if ((int16_t)v23 != -1) {
            int32_t v25 = *(int32_t *)(g6 + 4); // 0x6caea
            g10 = v25;
            v24 = v25 + 12 * (v23 & (int32_t)&g863);
            g9 = v24;
        } else {
            v24 = (int32_t)&g304;
        }
        uint16_t v26 = *(int16_t *)(v24 + 4); // 0x6caf6
        int32_t v27 = v26; // 0x6caf6
        g9 = v27;
        int32_t v28 = v27 & (int32_t)&g863; // 0x6cb00
        g10 = v28;
        if ((char)result == 0) {
            // 0x6ccd8
            return result;
        }
        // 0x6cb09
        g9 = (int32_t)&g304;
        int32_t v29; // 0x6cb1b
        if (v26 != -1) {
            int32_t v30 = *(int32_t *)(g6 + 4); // 0x6cb15
            g7 = v30;
            v29 = v30 + 12 * v28;
            g9 = v29;
        } else {
            v29 = (int32_t)&g304;
        }
        uint16_t v31 = *(int16_t *)(v29 + 4); // 0x6cb1e
        v10 = v31;
        g9 = (int32_t)&g304;
        int32_t v32; // 0x6cb40
        if (v26 != -1) {
            int32_t v33 = *(int32_t *)(g6 + 4); // 0x6cb3a
            g7 = v33;
            v32 = v33 + 12 * v28;
            g9 = v32;
        } else {
            v32 = (int32_t)&g304;
        }
        uint16_t v34 = *(int16_t *)(v32 + 4); // 0x6cb45
        int32_t v35 = v34; // 0x6cb45
        g7 = v35;
        g9 = (int32_t)&g304;
        int32_t v36; // 0x6cb63
        if (v34 != -1) {
            int32_t v37 = v35 & (int32_t)&g863; // 0x6cb5a
            g7 = v37;
            g9 = 3 * v37;
            int32_t v38 = *(int32_t *)(g6 + 4); // 0x6cb60
            g7 = v38;
            v36 = v38 + 12 * v37;
            g9 = v36;
        } else {
            v36 = (int32_t)&g304;
        }
        // 0x6cb66
        g7 = v27;
        g9 = (int32_t)&g304;
        if (v26 != *(int16_t *)v36) {
            int32_t v39; // 0x6cc1e
            if (v31 != -1) {
                // 0x6cc14
                g9 = v10;
                int32_t v40 = *(int32_t *)(g6 + 4); // 0x6cc18
                g7 = v40;
                v39 = v40 + 12 * v10;
                g9 = v39;
            } else {
                v39 = (int32_t)&g304;
            }
            uint16_t v41 = *(int16_t *)v39; // 0x6cc23
            v8 = v41;
            g9 = v8;
            g4 = (int32_t)&g304;
            int32_t v42; // 0x6cc40
            if (v41 != -1) {
                int32_t v43 = *(int32_t *)(g6 + 4); // 0x6cc37
                g7 = v43;
                v42 = v43 + 12 * (v8 & (int32_t)&g863);
                g4 = v42;
            } else {
                v42 = (int32_t)&g304;
            }
            // 0x6cc43
            if (*(int16_t *)(v42 + 6) == 0) {
                v7 = v28;
                goto lab_0x6cbc2;
            } else {
                // 0x6cc4e
                g9 = g724;
                int32_t v44; // 0x6cc5d
                if (g724 == 0) {
                    // bb71
                    g4 = function_6d128();
                    v44 = g8;
                } else {
                    v44 = v23;
                }
                // 0x6cc5d
                g4 = (int32_t)&g304;
                int32_t v45; // 0x6cc71
                if ((int16_t)v44 != -1) {
                    int32_t v46 = *(int32_t *)(g6 + 4); // 0x6cc68
                    g7 = v46;
                    v45 = v46 + 12 * (v44 & (int32_t)&g863);
                    g4 = v45;
                } else {
                    v45 = (int32_t)&g304;
                }
                int32_t v47 = (int32_t)*(int16_t *)(v45 + 4); // 0x6cc76
                g7 = v47;
                int32_t v48; // 0x6cc8e
                if ((char)g9 == 0) {
                    // bb72
                    g4 = function_6d0d8();
                    v48 = g7;
                } else {
                    v48 = v47;
                }
                // 0x6cc80
                g4 = (int32_t)&g304;
                int32_t v49; // 0x6cc94
                if ((int16_t)v48 != -1) {
                    int32_t v50 = *(int32_t *)(g6 + 4); // 0x6cc8b
                    g9 = v50;
                    int32_t v51 = v48 & (int32_t)&g863; // 0x6cc8e
                    g7 = v51;
                    v49 = v50 + 12 * v51;
                    g4 = v49;
                } else {
                    v49 = (int32_t)&g304;
                }
                // 0x6cc97
                if ((int16_t)g8 == *(int16_t *)v49) {
                    // bb73
                    g4 = function_6d040();
                }
                int32_t v52 = g10; // 0x6cca0
                g4 = 3 * v52;
                int32_t v53 = *(int32_t *)(g6 + 4); // 0x6cca3
                g10 = v53;
                *(int16_t *)(12 * v52 + 6 + v53) = 1;
                g4 = v10;
                int32_t v54 = *(int32_t *)(g6 + 4); // 0x6ccb3
                g10 = v54;
                int32_t v55 = v54 + 12 * v10; // 0x6ccb9
                g9 = v55;
                *(int16_t *)(v55 + 6) = 0;
                g4 = function_6c090(0x1000000 * g6 / 0x1000000, g4);
                v5 = g8;
                goto lab_0x6ca50;
            }
        } else {
            int32_t v56; // 0x6cb91
            if (v31 != -1) {
                // 0x6cb87
                g9 = v10;
                int32_t v57 = *(int32_t *)(g6 + 4); // 0x6cb8b
                g7 = v57;
                v56 = v57 + 12 * v10;
                g9 = v56;
            } else {
                v56 = (int32_t)&g304;
            }
            uint16_t v58 = *(int16_t *)(v56 + 2); // 0x6cb96
            int32_t v59 = v58; // 0x6cb96
            g9 = v59;
            g4 = (int32_t)&g304;
            int32_t v60; // 0x6cbb4
            if (v58 != -1) {
                int32_t v61 = *(int32_t *)(g6 + 4); // 0x6cbab
                g7 = v61;
                v60 = v61 + 12 * (v59 & (int32_t)&g863);
                g4 = v60;
            } else {
                v60 = (int32_t)&g304;
            }
            // 0x6cbb7
            if (*(int16_t *)(v60 + 6) != 0) {
                // bb70
                g4 = function_6ceb0();
                v7 = g10;
                v8 = g9;
            } else {
                v7 = v28;
                v8 = v59;
            }
            goto lab_0x6cbc2;
        }
    }
    goto lab_0x6caad;
  lab_0x6cbc2:
    // 0x6cbc2
    g4 = 3 * v7;
    int32_t v64 = *(int32_t *)(g6 + 4); // 0x6cbc5
    g10 = v64;
    g9 = v8 & (int32_t)&g863;
    *(int16_t *)(12 * v7 + 6 + v64) = 1;
    int32_t v65 = g9; // 0x6cbd4
    g4 = 3 * v65;
    int32_t v66 = *(int32_t *)(g6 + 4); // 0x6cbd7
    g8 = v66;
    *(int16_t *)(12 * v65 + 6 + v66) = 1;
    g4 = v10;
    int32_t v67 = *(int32_t *)(g6 + 4); // 0x6cbe7
    g9 = v67;
    int32_t v68 = v67 + 12 * v10; // 0x6cbed
    g4 = v68;
    *(int16_t *)(v68 + 6) = 0;
    g8 = v10;
    v5 = v10;
    goto lab_0x6ca50;
  lab_0x6ca50:
    // 0x6ca50
    v4 = v5;
    a1 = g6;
    goto lab_0x6ca50_2;
  lab_0x6caad:;
    int32_t v62 = *(int32_t *)(v6 + 4); // 0x6caad
    g7 = v62;
    int32_t v63 = 12 * (v9 & (int32_t)&g863) + v62; // 0x6cab6
    g4 = v63;
    *(int16_t *)(v63 + 6) = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x6cce3 - 0x6ccf3
int32_t function_6cce3(void) {
    // 0x6cce3
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x7b7af040); // 0x6cce3
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6cce9
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6ccf3 - 0x6ccf8
int32_t function_6ccf3(void) {
    // 0x6ccf3
    return g4;
}

// Address range: 0x6cd00 - 0x6cd07
int32_t function_6cd00(void) {
    // 0x6cd00
    return g4;
}

// Address range: 0x6cd0b - 0x6cd1b
int32_t function_6cd0b(void) {
    // 0x6cd0b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x737af040); // 0x6cd0b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6cd11
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cd1b - 0x6cd20
int32_t function_6cd1b(void) {
    // 0x6cd1b
    return g4;
}

// Address range: 0x6cd20 - 0x6cd2a
int32_t function_6cd20(void) {
    // 0x6cd20
    *(int32_t *)(g5 - 32) = g7;
    return g4;
}

// Address range: 0x6cd2e - 0x6cd46
int32_t function_6cd2e(void) {
    int32_t * v1 = (int32_t *)(g6 - 0x3f7a1fb3); // 0x6cd2e
    int32_t v2 = *v1 - 1; // 0x6cd2e
    *v1 = v2;
    if (v2 != 0) {
        // bb
        g4 = function_6cfd0();
    }
    int32_t result = g724; // 0x6cd3a
    g4 = result;
    return result;
}

// Address range: 0x6cd50 - 0x6cd57
int32_t function_6cd50(void) {
    // 0x6cd50
    return g4;
}

// Address range: 0x6cd5b - 0x6cd6b
int32_t function_6cd5b(void) {
    // 0x6cd5b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x237af040); // 0x6cd5b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6cd61
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cd6b - 0x6cd70
int32_t function_6cd6b(void) {
    // 0x6cd6b
    return g4;
}

// Address range: 0x6cd70 - 0x6cd77
int32_t function_6cd70(void) {
    // 0x6cd70
    return g4;
}

// Address range: 0x6cd83 - 0x6cd8b
int32_t function_6cd83(void) {
    int32_t v1 = g8 + 1; // 0x6cd83
    g8 = v1;
    int32_t v2 = g4; // 0x6cd85
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6cd91 - 0x6cd96
int32_t function_6cd91(void) {
    uint32_t v1 = g6; // 0x6cd91
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cd9a - 0x6cd9f
int32_t function_6cd9a(void) {
    uint32_t v1 = g6; // 0x6cd9a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cdab - 0x6cdb0
int32_t function_6cdab(void) {
    // 0x6cdab
    return g4;
}

// Address range: 0x6cdb0 - 0x6cdb7
int32_t function_6cdb0(void) {
    // 0x6cdb0
    return g4;
}

// Address range: 0x6cdbb - 0x6cdcb
int32_t function_6cdbb(void) {
    // 0x6cdbb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x4c850fc0); // 0x6cdbb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6cdc1
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cdcb - 0x6cdd0
int32_t function_6cdcb(void) {
    // 0x6cdcb
    return g4;
}

// Address range: 0x6cdd0 - 0x6cdd7
int32_t function_6cdd0(void) {
    // 0x6cdd0
    return g4;
}

// Address range: 0x6cddb - 0x6cdeb
int32_t function_6cddb(void) {
    // 0x6cddb
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x3b7af040); // 0x6cddb
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6cde1
    g4 = 2 * v3 & 254 | v3 & -256;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cdeb - 0x6cdf0
int32_t function_6cdeb(void) {
    // 0x6cdeb
    return g4;
}

// Address range: 0x6cdf0 - 0x6cdfa
int32_t function_6cdf0(void) {
    // 0x6cdf0
    *(int32_t *)(g5 - 32) = g9;
    return g4;
}

// Address range: 0x6ce09 - 0x6ce0c
int32_t function_6ce09(void) {
    // 0x6ce09
    return g4;
}

// Address range: 0x6ce10 - 0x6ce15
int32_t function_6ce10(void) {
    uint32_t v1 = g6; // 0x6ce10
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ce19 - 0x6ce1e
int32_t function_6ce19(void) {
    uint32_t v1 = g6; // 0x6ce19
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ce1f - 0x6ce2c
int32_t function_6ce1f(void) {
    char * v1 = (char *)(g4 + 10); // 0x6ce1f
    unsigned char v2 = *v1; // 0x6ce1f
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6ce22
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6ce24
    g8 = v4;
    int32_t v5 = g4; // 0x6ce26
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6ce31 - 0x6ce39
int32_t function_6ce31(void) {
    // 0x6ce31
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x6ce40 - 0x6ce4a
int32_t function_6ce40(void) {
    // 0x6ce40
    *(int32_t *)(g5 - 32) = g9;
    return g4;
}

// Address range: 0x6ce59 - 0x6ce5c
int32_t function_6ce59(void) {
    // 0x6ce59
    return g4;
}

// Address range: 0x6ce60 - 0x6ce65
int32_t function_6ce60(void) {
    uint32_t v1 = g6; // 0x6ce60
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ce69 - 0x6ce6e
int32_t function_6ce69(void) {
    uint32_t v1 = g6; // 0x6ce69
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6ce6f - 0x6ce7c
int32_t function_6ce6f(void) {
    char * v1 = (char *)(g4 + 10); // 0x6ce6f
    unsigned char v2 = *v1; // 0x6ce6f
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6ce72
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6ce74
    g8 = v4;
    int32_t v5 = g4; // 0x6ce76
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6ce81 - 0x6ce89
int32_t function_6ce81(void) {
    // 0x6ce81
    int32_t v1; // ebp
    g9 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x6ce90 - 0x6ce97
int32_t function_6ce90(void) {
    // 0x6ce90
    return g4;
}

// Address range: 0x6ce9b - 0x6ceab
int32_t function_6ce9b(void) {
    // 0x6ce9b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x737af040); // 0x6ce9b
    *v2 = *v2 + 1;
    g4 *= 2;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6ceab - 0x6ceb0
int32_t function_6ceab(void) {
    // 0x6ceab
    return g4;
}

// Address range: 0x6ceb0 - 0x6cf36
int32_t function_6ceb0(void) {
    unsigned char v1 = g724; // 0x6ceb0
    g9 = v1;
    if (v1 == 0) {
        // bb
        g4 = function_6d208();
    }
    int32_t v2 = g8; // 0x6cebf
    g4 = (int32_t)&g304;
    int32_t v3; // 0x6ced3
    if ((int16_t)v2 != -1) {
        int32_t v4 = *(int32_t *)(g6 + 4); // 0x6ceca
        g7 = v4;
        v3 = v4 + 12 * (v2 & (int32_t)&g863);
        g4 = v3;
    } else {
        v3 = (int32_t)&g304;
    }
    int32_t v5 = (int32_t)*(int16_t *)(v3 + 4); // 0x6ced8
    g7 = v5;
    int32_t v6; // 0x6cef0
    if ((char)g9 == 0) {
        // bb6
        g4 = function_6d1b8();
        v6 = g7;
    } else {
        v6 = v5;
    }
    // 0x6cee2
    g4 = (int32_t)&g304;
    int32_t v7; // 0x6cef6
    if ((int16_t)v6 != -1) {
        int32_t v8 = *(int32_t *)(g6 + 4); // 0x6ceed
        g9 = v8;
        int32_t v9 = v6 & (int32_t)&g863; // 0x6cef0
        g7 = v9;
        v7 = v8 + 12 * v9;
        g4 = v7;
    } else {
        v7 = (int32_t)&g304;
    }
    // 0x6cef9
    if ((int16_t)g8 == *(int16_t *)(v7 + 2)) {
        // bb7
        g4 = function_6d150();
    }
    int32_t v10 = g10; // 0x6cf03
    g4 = 3 * v10;
    int32_t v11 = *(int32_t *)(g6 + 4); // 0x6cf06
    g10 = v11;
    int32_t v12 = v11 + 12 * v10; // 0x6cf09
    g4 = v12;
    *(int16_t *)(v12 + 6) = 1;
    int32_t v13 = (int32_t)*(int16_t *)(g5 - 28); // 0x6cf12
    g4 = v13;
    int32_t v14 = *(int32_t *)(g6 + 4); // 0x6cf16
    g10 = v14;
    int32_t v15 = v14 + 12 * v13; // 0x6cf1c
    g9 = v15;
    *(int16_t *)(v15 + 6) = 0;
    int32_t result = function_6c580(g6, g4); // 0x6cf2c
    g4 = result;
    return result;
}

// Address range: 0x6cf41 - 0x6cf47
int32_t function_6cf41(void) {
    int32_t v1 = g4; // 0x6cf41
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cf4d - 0x6cf52
int32_t function_6cf4d(void) {
    uint32_t v1 = g6; // 0x6cf4d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cf56 - 0x6cf5b
int32_t function_6cf56(void) {
    uint32_t v1 = g6; // 0x6cf56
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cf67 - 0x6cf6c
int32_t function_6cf67(void) {
    // 0x6cf67
    return g4;
}

// Address range: 0x6cf71 - 0x6cf77
int32_t function_6cf71(void) {
    int32_t v1 = g4; // 0x6cf71
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cf7d - 0x6cf82
int32_t function_6cf7d(void) {
    uint32_t v1 = g6; // 0x6cf7d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cf86 - 0x6cf8b
int32_t function_6cf86(void) {
    uint32_t v1 = g6; // 0x6cf86
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cf97 - 0x6cf9c
int32_t function_6cf97(void) {
    // 0x6cf97
    return g4;
}

// Address range: 0x6cfa1 - 0x6cfa7
int32_t function_6cfa1(void) {
    int32_t v1 = g4; // 0x6cfa1
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6cfad - 0x6cfb2
int32_t function_6cfad(void) {
    uint32_t v1 = g6; // 0x6cfad
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cfb6 - 0x6cfbb
int32_t function_6cfb6(void) {
    uint32_t v1 = g6; // 0x6cfb6
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6cfc7 - 0x6cfcc
int32_t function_6cfc7(void) {
    // 0x6cfc7
    return g4;
}

// Address range: 0x6cfd0 - 0x6cff5
int32_t function_6cfd0(void) {
    // 0x6cfd0
    *(int32_t *)(g5 - 32) = g7;
    *(int16_t *)&g304 = (int16_t)&g863;
    *(int16_t *)&g305 = (int16_t)&g863;
    *(int16_t *)&g306 = (int16_t)&g863;
    return g4;
}

// Address range: 0x6cff9 - 0x6d001
int32_t function_6cff9(void) {
    int32_t v1 = g8; // 0x6cff9
    *(int32_t *)v1 = v1 - 1;
    g9 = g9 & -0xff01 | (int32_t)&g102;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d001 - 0x6d009
int32_t function_6d001(void) {
    // 0x6d001
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x6d011 - 0x6d017
int32_t function_6d011(void) {
    int32_t v1 = g4; // 0x6d011
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d01d - 0x6d022
int32_t function_6d01d(void) {
    uint32_t v1 = g6; // 0x6d01d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d026 - 0x6d02b
int32_t function_6d026(void) {
    uint32_t v1 = g6; // 0x6d026
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d037 - 0x6d03c
int32_t function_6d037(void) {
    // 0x6d037
    return g4;
}

// Address range: 0x6d040 - 0x6d0a5
int32_t function_6d040(void) {
    // 0x6d040
    g4 = function_6c580(g6, g10);
    g9 = g724;
    if (g724 == 0) {
        // bb
        g4 = function_6d330();
    }
    // 0x6d05b
    g4 = (int32_t)&g304;
    int32_t v1; // 0x6d06d
    if (*(int16_t *)(g5 - 26) != -1) {
        int32_t v2 = *(int32_t *)(g6 + 4); // 0x6d067
        g7 = v2;
        v1 = 12 * g10 + v2;
        g4 = v1;
    } else {
        v1 = (int32_t)&g304;
    }
    int32_t v3 = (int32_t)*(int16_t *)(v1 + 4); // 0x6d072
    g10 = v3;
    int32_t v4; // 0x6d07c
    if ((char)g9 == 0) {
        // bb6
        g4 = function_6d2f0();
        v4 = g10;
    } else {
        v4 = v3;
    }
    int32_t v5; // 0x6d089
    if ((int16_t)v4 == -1) {
        // bb7
        g4 = function_6d38e();
        v5 = g10;
    } else {
        v5 = v4;
    }
    int32_t v6 = *(int32_t *)(g6 + 4); // 0x6d086
    g8 = v6;
    int32_t v7 = v5 & (int32_t)&g863; // 0x6d089
    g10 = v7;
    int32_t v8 = 12 * v7 + v6; // 0x6d08f
    g4 = v8;
    g9 = v8;
    uint16_t v9 = *(int16_t *)(v8 + 4); // 0x6d094
    g9 = v9;
    g8 = (int32_t)*(int16_t *)(g5 - 26);
    *(int16_t *)(g5 - 28) = v9;
    return g4;
}

// Address range: 0x6d0a9 - 0x6d0af
int32_t function_6d0a9(void) {
    int32_t v1 = g4; // 0x6d0a9
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d0b5 - 0x6d0ba
int32_t function_6d0b5(void) {
    uint32_t v1 = g6; // 0x6d0b5
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d0be - 0x6d0c3
int32_t function_6d0be(void) {
    uint32_t v1 = g6; // 0x6d0be
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d0cf - 0x6d0d4
int32_t function_6d0cf(void) {
    // 0x6d0cf
    return g4;
}

// Address range: 0x6d0d8 - 0x6d0e2
int32_t function_6d0d8(void) {
    // 0x6d0d8
    *(int32_t *)(g5 - 32) = g7;
    return g4;
}

// Address range: 0x6d0f1 - 0x6d0f4
int32_t function_6d0f1(void) {
    // 0x6d0f1
    return g4;
}

// Address range: 0x6d0f8 - 0x6d0fd
int32_t function_6d0f8(void) {
    uint32_t v1 = g6; // 0x6d0f8
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d101 - 0x6d106
int32_t function_6d101(void) {
    uint32_t v1 = g6; // 0x6d101
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d107 - 0x6d114
int32_t function_6d107(void) {
    char * v1 = (char *)(g4 + 10); // 0x6d107
    unsigned char v2 = *v1; // 0x6d107
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6d10a
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6d10c
    g8 = v4;
    int32_t v5 = g4; // 0x6d10e
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6d119 - 0x6d121
int32_t function_6d119(void) {
    // 0x6d119
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x6d128 - 0x6d12f
int32_t function_6d128(void) {
    // 0x6d128
    return g4;
}

// Address range: 0x6d133 - 0x6d143
int32_t function_6d133(void) {
    // 0x6d133
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x24850fc0); // 0x6d133
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6d139
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d143 - 0x6d148
int32_t function_6d143(void) {
    // 0x6d143
    return g4;
}

// Address range: 0x6d150 - 0x6d1b5
int32_t function_6d150(void) {
    // 0x6d150
    g4 = function_6c090(g6, g10);
    g9 = g724;
    if (g724 == 0) {
        // bb
        g4 = function_6d2d0();
    }
    // 0x6d16b
    g4 = (int32_t)&g304;
    int32_t v1; // 0x6d17d
    if (*(int16_t *)(g5 - 26) != -1) {
        int32_t v2 = *(int32_t *)(g6 + 4); // 0x6d177
        g7 = v2;
        v1 = 12 * g10 + v2;
        g4 = v1;
    } else {
        v1 = (int32_t)&g304;
    }
    int32_t v3 = (int32_t)*(int16_t *)(v1 + 4); // 0x6d182
    g10 = v3;
    int32_t v4; // 0x6d18c
    if ((char)g9 == 0) {
        // bb6
        g4 = function_6d290();
        v4 = g10;
    } else {
        v4 = v3;
    }
    int32_t v5; // 0x6d199
    if ((int16_t)v4 == -1) {
        // bb7
        g4 = function_6d37c();
        v5 = g10;
    } else {
        v5 = v4;
    }
    int32_t v6 = *(int32_t *)(g6 + 4); // 0x6d196
    g8 = v6;
    int32_t v7 = v5 & (int32_t)&g863; // 0x6d199
    g10 = v7;
    int32_t v8 = 12 * v7 + v6; // 0x6d19f
    g9 = v8;
    g4 = v8;
    uint16_t v9 = *(int16_t *)(v8 + 4); // 0x6d1a4
    g9 = v9;
    g8 = (int32_t)*(int16_t *)(g5 - 26);
    *(int16_t *)(g5 - 28) = v9;
    return g4;
}

// Address range: 0x6d1b8 - 0x6d1c2
int32_t function_6d1b8(void) {
    // 0x6d1b8
    *(int32_t *)(g5 - 32) = g7;
    return g4;
}

// Address range: 0x6d1d1 - 0x6d1d4
int32_t function_6d1d1(void) {
    // 0x6d1d1
    return g4;
}

// Address range: 0x6d1d8 - 0x6d1dd
int32_t function_6d1d8(void) {
    uint32_t v1 = g6; // 0x6d1d8
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d1e1 - 0x6d1e6
int32_t function_6d1e1(void) {
    uint32_t v1 = g6; // 0x6d1e1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d1e7 - 0x6d1f4
int32_t function_6d1e7(void) {
    char * v1 = (char *)(g4 + 10); // 0x6d1e7
    unsigned char v2 = *v1; // 0x6d1e7
    *v1 = v2 / 128 | 2 * v2;
    int32_t v3 = g6; // 0x6d1ea
    g6 = 2 * v3 & 0xfe00 | v3 & -0xff01;
    int32_t v4 = g8 + 1; // 0x6d1ec
    g8 = v4;
    int32_t v5 = g4; // 0x6d1ee
    g4 = v5 + 36 & 255 | v5 & -256;
    *(int32_t *)(g11 - 32) = v4;
    return g4;
}

// Address range: 0x6d1f9 - 0x6d201
int32_t function_6d1f9(void) {
    // 0x6d1f9
    int32_t v1; // ebp
    g7 = *(int32_t *)(v1 - 32);
    return g4;
}

// Address range: 0x6d208 - 0x6d20f
int32_t function_6d208(void) {
    // 0x6d208
    return g4;
}

// Address range: 0x6d213 - 0x6d223
int32_t function_6d213(void) {
    // 0x6d213
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 + 0x34850fc0); // 0x6d213
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6d219
    *(int32_t *)v3 = 2 * v3;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d223 - 0x6d228
int32_t function_6d223(void) {
    // 0x6d223
    return g4;
}

// Address range: 0x6d231 - 0x6d237
int32_t function_6d231(void) {
    int32_t v1 = g4; // 0x6d231
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d23d - 0x6d242
int32_t function_6d23d(void) {
    uint32_t v1 = g6; // 0x6d23d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d246 - 0x6d24b
int32_t function_6d246(void) {
    uint32_t v1 = g6; // 0x6d246
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d257 - 0x6d25c
int32_t function_6d257(void) {
    // 0x6d257
    return g4;
}

// Address range: 0x6d261 - 0x6d267
int32_t function_6d261(void) {
    int32_t v1 = g4; // 0x6d261
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d26d - 0x6d272
int32_t function_6d26d(void) {
    uint32_t v1 = g6; // 0x6d26d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d276 - 0x6d27b
int32_t function_6d276(void) {
    uint32_t v1 = g6; // 0x6d276
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d287 - 0x6d28c
int32_t function_6d287(void) {
    // 0x6d287
    return g4;
}

// Address range: 0x6d290 - 0x6d297
int32_t function_6d290(void) {
    // 0x6d290
    return g4;
}

// Address range: 0x6d29d - 0x6d2ab
int32_t function_6d29d(void) {
    unsigned char v1 = *(char *)&g8; // 0x6d29d
    *(char *)g8 = v1 / 16 | 16 * v1;
    int32_t v2 = unknown_c806d2a3(); // 0x6d2a0
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d2b1 - 0x6d2b6
int32_t function_6d2b1(void) {
    uint32_t v1 = g6; // 0x6d2b1
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d2ba - 0x6d2bf
int32_t function_6d2ba(void) {
    uint32_t v1 = g6; // 0x6d2ba
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d2cb - 0x6d2d0
int32_t function_6d2cb(void) {
    // 0x6d2cb
    return g4;
}

// Address range: 0x6d2d0 - 0x6d2d7
int32_t function_6d2d0(void) {
    // 0x6d2d0
    return g4;
}

// Address range: 0x6d2db - 0x6d2eb
int32_t function_6d2db(void) {
    // 0x6d2db
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x437af040); // 0x6d2db
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6d2e1
    *(char *)v3 = (char)v3 + *(char *)&g4;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d2eb - 0x6d2f0
int32_t function_6d2eb(void) {
    // 0x6d2eb
    return g4;
}

// Address range: 0x6d2f0 - 0x6d2f7
int32_t function_6d2f0(void) {
    // 0x6d2f0
    return g4;
}

// Address range: 0x6d303 - 0x6d30b
int32_t function_6d303(void) {
    int32_t v1 = g8 + 1; // 0x6d303
    g8 = v1;
    int32_t v2 = g4; // 0x6d305
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6d311 - 0x6d316
int32_t function_6d311(void) {
    uint32_t v1 = g6; // 0x6d311
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d31a - 0x6d31f
int32_t function_6d31a(void) {
    uint32_t v1 = g6; // 0x6d31a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d32b - 0x6d330
int32_t function_6d32b(void) {
    // 0x6d32b
    return g4;
}

// Address range: 0x6d330 - 0x6d337
int32_t function_6d330(void) {
    // 0x6d330
    return g4;
}

// Address range: 0x6d33b - 0x6d34b
int32_t function_6d33b(void) {
    // 0x6d33b
    int32_t v1; // ebp
    int32_t * v2 = (int32_t *)(v1 - 0x777af040); // 0x6d33b
    *v2 = *v2 + 1;
    int32_t v3 = g4; // 0x6d341
    *(char *)v3 = (char)v3 + *(char *)&g4;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    g9 = g9 & -0xff01 | (int32_t)"lockWriteEv";
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d34b - 0x6d350
int32_t function_6d34b(void) {
    // 0x6d34b
    return g4;
}

// Address range: 0x6d351 - 0x6d357
int32_t function_6d351(void) {
    int32_t v1 = g4; // 0x6d351
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d35d - 0x6d362
int32_t function_6d35d(void) {
    uint32_t v1 = g6; // 0x6d35d
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d366 - 0x6d36b
int32_t function_6d366(void) {
    uint32_t v1 = g6; // 0x6d366
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d377 - 0x6d37c
int32_t function_6d377(void) {
    // 0x6d377
    return g4;
}

// Address range: 0x6d37c - 0x6d38e
int32_t function_6d37c(void) {
    // 0x6d37c
    g9 = (int32_t)&g304;
    int32_t result = *(int32_t *)(g6 + 4) + 0xbfff4; // 0x6d384
    g4 = result;
    return result;
}

// Address range: 0x6d38e - 0x6d3a0
int32_t function_6d38e(void) {
    // 0x6d38e
    g9 = (int32_t)&g304;
    int32_t result = *(int32_t *)(g6 + 4) + 0xbfff4; // 0x6d396
    g4 = result;
    return result;
}

// Address range: 0x6d3a1 - 0x6d3a7
int32_t function_6d3a1(void) {
    int32_t v1 = g4; // 0x6d3a1
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d3ad - 0x6d3b2
int32_t function_6d3ad(void) {
    uint32_t v1 = g6; // 0x6d3ad
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d3b6 - 0x6d3bb
int32_t function_6d3b6(void) {
    uint32_t v1 = g6; // 0x6d3b6
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d3c7 - 0x6d3cc
int32_t function_6d3c7(void) {
    // 0x6d3c7
    return g4;
}

// Address range: 0x6d3cd - 0x6d3d3
int32_t function_6d3cd(void) {
    int32_t v1 = g4; // 0x6d3cd
    g4 = v1 + 36 & 255 | v1 & -256;
    *(int32_t *)(g11 - 32) = g8;
    return g4;
}

// Address range: 0x6d3d9 - 0x6d3de
int32_t function_6d3d9(void) {
    uint32_t v1 = g6; // 0x6d3d9
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d3e2 - 0x6d3e7
int32_t function_6d3e2(void) {
    uint32_t v1 = g6; // 0x6d3e2
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d3f3 - 0x6d3f8
int32_t function_6d3f3(void) {
    // 0x6d3f3
    return g4;
}

// Address range: 0x6d400 - 0x6d517
int32_t function_6d400(int32_t a1, int32_t result2) {
    int32_t v1 = g8; // 0x6d403
    int32_t v2 = g10; // 0x6d404
    int32_t v3 = g6; // 0x6d405
    g6 = a1;
    uint16_t v4 = *(int16_t *)(a1 + 16); // 0x6d40c
    int32_t v5 = v4; // 0x6d40c
    g10 = v5;
    if (v4 == -1) {
        int32_t result = function_6d599((int32_t)v4); // 0x6d41a
        g4 = result;
        return result;
    }
    int32_t v6;
    int32_t v7; // 0x6d486
    int32_t v8; // 0x6d489
    while (true) {
        int32_t * v9 = (int32_t *)(a1 + 4); // 0x6d44a
        int32_t v10 = v5;
        int32_t v11; // 0x6d44d
        while (true) {
            // 0x6d443
            g8 = 3 * v10;
            v11 = 12 * v10;
            g10 = v11;
            g4 = result2;
            if ((char)result2 == 0) {
                // break -> 0x6d469
                break;
            }
            if (g724 == 0) {
                return result2;
            }
            int32_t v12 = *v9; // 0x6d42d
            g4 = v12;
            uint16_t v13 = *(int16_t *)(v12 + v11); // 0x6d430
            int32_t v14 = v13; // 0x6d430
            g4 = v14;
            g8 = 1;
            if (v13 == -1) {
                v6 = v10;
                v8 = a1;
                v7 = v11;
                goto lab_0x6d486_2;
            }
            v10 = v14;
        }
        int32_t v15; // 0x6d476
        int32_t v16; // 0x6d47b
        if (g724 == 0) {
            // bb
            g4 = function_6d550();
            v16 = g10;
            v15 = g6;
        } else {
            v16 = v11;
            v15 = a1;
        }
        int32_t v17 = *(int32_t *)(v15 + 4); // 0x6d476
        g4 = v17;
        g8 = 0;
        uint16_t v18 = *(int16_t *)(v16 + 2 + v17); // 0x6d47b
        int32_t v19 = v18; // 0x6d47b
        g4 = v19;
        if (v18 == -1) {
            v6 = v5;
            v8 = v15;
            v7 = v16;
            goto lab_0x6d486_2;
        }
        a1 = v15;
        v5 = v19;
    }
    // 0x6d510
    return result2;
  lab_0x6d486_2:;
    int32_t v20 = function_6be70(0x1000000 * v8 / 0x1000000); // 0x6d48c
    g10 = v6;
    int32_t v21 = v20 & (int32_t)&g863; // 0x6d495
    g9 = v21;
    g7 = v20;
    int32_t v22 = 12 * v21; // 0x6d49d
    g4 = v22;
    int32_t v23 = *(int32_t *)(g6 + 4) + v22; // 0x6d4a3
    g4 = v23;
    int16_t v24 = v6; // 0x6d4a6
    *(int16_t *)(v23 + 4) = v24;
    *(int16_t *)(g4 + 2) = (int16_t)&g863;
    *(int16_t *)g4 = (int16_t)&g863;
    *(int16_t *)(g4 + 6) = 0;
    if (v24 == -1) {
        // bb33
        g4 = function_6d5c9();
        goto lab_0x6d4c5;
    } else {
        goto lab_0x6d4c5;
    }
  lab_0x6d4c5:;
    int32_t v25 = g8; // 0x6d4c5
    g4 = v25;
    g10 = v7;
    int32_t v26 = *(int32_t *)(g6 + 4); // 0x6d4cc
    g4 = v26;
    int32_t v27; // 0x6d4cf
    int32_t v28; // 0x6d4d5
    if ((char)v25 != 0) {
        // bb34
        v27 = function_6d590();
        g4 = v27;
        v28 = g10;
        goto lab_0x6d4d5;
    } else {
        v28 = v7;
        v27 = v26;
        goto lab_0x6d4d5;
    }
  lab_0x6d4d5:
    // 0x6d4d5
    *(int16_t *)(v28 + 2 + v27) = (int16_t)g7;
    int32_t result3 = g7; // 0x6d4da
    function_6ca40(0x1000000 * g6 / 0x1000000, g9);
    g4 = v22;
    int16_t * v29 = (int16_t *)(g6 + 18); // 0x6d4ec
    *v29 = *v29 + 1;
    int32_t v30 = *(int32_t *)(g6 + 4) + g4; // 0x6d4f1
    g4 = v30;
    g7 = result3;
    int32_t v31 = v30 + 8; // 0x6d4f7
    if (v31 == 0) {
        goto lab_0x6d504;
    } else {
        // 0x6d4fc
        g6 = result2;
        int32_t v32 = *(int32_t *)result2; // 0x6d4ff
        g9 = v32;
        *(int32_t *)v31 = v32;
        result3 = g7;
        goto lab_0x6d504;
    }
  lab_0x6d504:
    // 0x6d504
    g4 = result3;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result3;
}

// Address range: 0x6d523 - 0x6d52b
int32_t function_6d523(void) {
    int32_t v1 = g8 + 1; // 0x6d523
    g8 = v1;
    int32_t v2 = g4; // 0x6d525
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6d531 - 0x6d536
int32_t function_6d531(void) {
    uint32_t v1 = g6; // 0x6d531
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d53a - 0x6d53f
int32_t function_6d53a(void) {
    uint32_t v1 = g6; // 0x6d53a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d54b - 0x6d550
int32_t function_6d54b(void) {
    // 0x6d54b
    return g4;
}

// Address range: 0x6d550 - 0x6d557
int32_t function_6d550(void) {
    // 0x6d550
    return g4;
}

// Address range: 0x6d563 - 0x6d56b
int32_t function_6d563(void) {
    int32_t v1 = g8 + 1; // 0x6d563
    g8 = v1;
    int32_t v2 = g4; // 0x6d565
    g4 = v2 + 36 & 255 | v2 & -256;
    *(int32_t *)(g11 - 32) = v1;
    return g4;
}

// Address range: 0x6d571 - 0x6d576
int32_t function_6d571(void) {
    uint32_t v1 = g6; // 0x6d571
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d57a - 0x6d57f
int32_t function_6d57a(void) {
    uint32_t v1 = g6; // 0x6d57a
    g6 = 512 * v1 / 256 & 0xfe00 | v1 & -0xff01;
    return g4;
}

// Address range: 0x6d58b - 0x6d590
int32_t function_6d58b(void) {
    // 0x6d58b
    return g4;
}

// Address range: 0x6d590 - 0x6d599
int32_t function_6d590(void) {
    // 0x6d590
    *(int16_t *)(g10 + g4) = (int16_t)g7;
    return g4;
}

// Address range: 0x6d599 - 0x6d5c9
int32_t function_6d599(int32_t a1) {
    int32_t v1 = function_6be70(g6); // 0x6d59c
    int32_t v2 = v1 & (int32_t)&g863; // 0x6d5a1
    g9 = v2;
    g7 = v1;
    int32_t v3 = 12 * v2; // 0x6d5a9
    g4 = v3;
    *(int32_t *)(g5 - 32) = v3;
    int32_t v4 = *(int32_t *)(g6 + 4) + g4; // 0x6d5af
    g4 = v4;
    *(int16_t *)(v4 + 4) = (int16_t)&g863;
    *(int16_t *)(g4 + 2) = (int16_t)&g863;
    *(int16_t *)g4 = (int16_t)&g863;
    *(int16_t *)(g4 + 6) = 0;
    return g4;
}

// Address range: 0x6d5c9 - 0x6d5d2
int32_t function_6d5c9(void) {
    // 0x6d5c9
    *(int16_t *)(g6 + 16) = (int16_t)g7;
    return g4;
}

// Address range: 0x6d5e0 - 0x6d61f
int32_t function_6d5e0(int32_t a1, int32_t a2) {
    // 0x6d5e0
    g6 = a1;
    int32_t v1 = *(int32_t *)(a1 + 8); // 0x6d5eb
    g10 = v1;
    int32_t v2 = *(int32_t *)(a1 + 4); // 0x6d5f2
    g4 = v2;
    int32_t v3 = v2 + a2; // 0x6d5f8
    g7 = v3;
    int32_t v4; // 0x6d612
    int32_t v5; // 0x6d5fc
    if (v1 != 0) {
        // bb
        v5 = function_6d640();
        g4 = v5;
        v4 = g7;
    } else {
        v4 = v3;
        v5 = v2;
    }
    // 0x6d5fe
    g9 = 16;
    int32_t v6 = v5 == 0 ? 16 : v5; // 0x6d605
    g4 = v6;
    int32_t v7; // 0x6d618
    if (v4 > v6) {
        // 0x6d60c
        g10 = v1;
        int32_t v8 = 2 * v6; // 0x6d610
        while (v4 > v8) {
            // 0x6d610
            v8 *= 2;
        }
        // 0x6d616
        g4 = v8;
        v7 = v8;
    } else {
        v7 = v6;
    }
    int32_t v9 = g6; // 0x6d616
    int32_t v10 = *(int32_t *)v9; // 0x6d616
    g9 = v10;
    *(int32_t *)(v9 + 4) = v7;
    int32_t result; // 0x6d61d
    if (v10 == 0) {
        // bb18
        result = function_6d670();
        g4 = result;
    } else {
        // 0x6d616
        result = g4;
    }
    // 0x6d61f
    return result;
}

// Address range: 0x6d640 - 0x6d670
int32_t function_6d640(void) {
    uint32_t v1 = g7; // 0x6d640
    int32_t v2 = v1 - 1; // 0x6d640
    uint32_t v3 = g10; // 0x6d648
    int64_t v4 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x6d648
    int64_t v5 = v3; // 0x6d648
    g9 = v4 % v5;
    int32_t v6 = ((int32_t)(v4 / v5) + 1) * v3; // 0x6d64d
    g4 = v6;
    int32_t v7 = v6 + v1; // 0x6d658
    int32_t v8 = ((int32_t)(v7 < 0) + v7) / 2; // 0x6d661
    while (v1 > v8) {
        // 0x6d658
        v7 = v8 + v1;
        v8 = ((int32_t)(v7 < 0) + v7) / 2;
    }
    // 0x6d667
    g4 = v8;
    int32_t v9 = g6; // 0x6d667
    g9 = v9;
    *(int32_t *)(v9 + 4) = v8;
    return g4;
}

// Address range: 0x6d670 - 0x6d671
int32_t function_6d670(void) {
    // 0x6d670
    return g4;
}

// Address range: 0x6d690 - 0x6d6f5
int32_t function_6d690(int32_t a1) {
    // 0x6d690
    g4 = a1;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x6d696
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6d69a
    int128_t v3 = __asm_movaps(v1); // 0x6d69f
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6d6a2
    int128_t v5 = __asm_mulss(v3, v1); // 0x6d6a7
    int128_t v6 = __asm_movaps(v2); // 0x6d6ab
    int128_t v7 = __asm_addss_1661(v5, __asm_mulss(v6, v2)); // 0x6d6b2
    int128_t v8 = __asm_movaps(v4); // 0x6d6b6
    int128_t v9 = __asm_addss_1661(v7, __asm_mulss(v8, v4)); // 0x6d6bd
    int128_t v10 = __asm_movss(0x3f800000); // 0x6d6c1
    int128_t v11 = __asm_sqrtss(v9); // 0x6d6c9
    int128_t v12 = __asm_divss(v10, __asm_addss(v11, 0x34000000)); // 0x6d6d5
    int128_t v13 = __asm_mulss(v1, v12); // 0x6d6d9
    int128_t v14 = __asm_mulss(v2, v12); // 0x6d6dd
    int128_t v15 = __asm_mulss(v12, v4); // 0x6d6e1
    *(int32_t *)g4 = __asm_movss_1646(v13);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v14);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v15);
    return g4;
}

// Address range: 0x6d700 - 0x6d715
float80_t function_6d700(int32_t a1) {
    int128_t v1 = __asm_sqrtss_1662(a1); // 0x6d706
    return __asm_movss_1646(v1);
}

// Address range: 0x6d720 - 0x6d741
float80_t function_6d720(int32_t a1) {
    int128_t v1 = __asm_sqrtss_1662(a1); // 0x6d726
    int128_t v2 = __asm_divss(__asm_movss(0x3f800000), v1); // 0x6d733
    return __asm_movss_1646(v2);
}

// Address range: 0x6d741 - 0x6d743
int32_t function_6d741(void) {
    float80_t v1 = function_6d750((int32_t)&g870); // 0x6d741
    g4 = (float32_t)v1;
    return (float32_t)v1;
}

// Address range: 0x6d750 - 0x6d7c4
float80_t function_6d750(int32_t a1) {
    // 0x6d750
    g4 = a1;
    int128_t v1 = __asm_movss(0x34000000); // 0x6d759
    int128_t v2 = __asm_movss(*(int32_t *)g4); // 0x6d761
    int128_t v3 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6d765
    int128_t v4 = __asm_movaps(v2); // 0x6d76a
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6d76d
    int128_t v6 = __asm_mulss(v4, v2); // 0x6d772
    int128_t v7 = __asm_movaps(v3); // 0x6d776
    int128_t v8 = __asm_addss_1661(v6, __asm_mulss(v7, v3)); // 0x6d77d
    int128_t v9 = __asm_movaps(v5); // 0x6d781
    int128_t v10 = __asm_addss_1661(v8, __asm_mulss(v9, v5)); // 0x6d788
    int128_t v11 = __asm_movss(0x3f800000); // 0x6d78c
    int128_t v12 = __asm_sqrtss(v10); // 0x6d794
    int128_t v13 = __asm_divss(v11, __asm_addss_1661(v1, v12)); // 0x6d79c
    int128_t v14 = __asm_mulss(v2, v13); // 0x6d7a0
    int128_t v15 = __asm_mulss(v3, v13); // 0x6d7a4
    int128_t v16 = __asm_mulss(v13, v5); // 0x6d7a8
    *(int32_t *)g4 = __asm_movss_1646(v14);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v15);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v16);
    g13--;
    return __asm_movss_1646(v12);
}

// Address range: 0x6d7d0 - 0x6d816
float80_t function_6d7d0(int32_t a1) {
    g4 = a1;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x6d7d9
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6d7dd
    int128_t v3 = __asm_mulss(v1, v1); // 0x6d7e2
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6d7e6
    int128_t v5 = __asm_mulss(v2, v2); // 0x6d7eb
    int128_t v6 = __asm_mulss(v4, v4); // 0x6d7ef
    int128_t v7 = __asm_addss_1661(__asm_addss_1661(v3, v5), v6); // 0x6d7f7
    int128_t v8 = __asm_movss(0x3f800000); // 0x6d7fb
    __asm_ucomiss_1648(v8, v7);
    int32_t v9; // ebp
    int128_t v10; // 0x6d80c
    if (&v9 < (int32_t *)4 || &v9 == (int32_t *)4) {
        // 0x6d808
        v10 = __asm_divss(v8, v7);
    } else {
        v10 = v8;
    }
    // 0x6d80c
    return __asm_movss_1646(v10);
}

// Address range: 0x6d820 - 0x6d834
int32_t function_6d820(void) {
    // 0x6d820
    g6 = 0;
    int128_t v1; // xmm0
    int32_t v2 = __asm_movsd(__asm_xorpd(v1, v1)); // 0x6d82d
    int32_t result = function_6d85d(v2, (int32_t)&g870); // 0x6d832
    g4 = result;
    return result;
}

// Address range: 0x6d838 - 0x6d855
int32_t function_6d838(void) {
    int128_t v1 = __asm_cvtsi2sd(g6); // 0x6d838
    int128_t v2 = __asm_mulsd_1655(__asm_addsd(v1, v1), 0x400921fb54442d18); // 0x6d840
    __asm_movsd(__asm_mulsd_1655(v2, 0x3f70000000000000));
    return g4;
}

// Address range: 0x6d85d - 0x6d880
int32_t function_6d85d(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movsd_1649(*(int64_t *)(g5 - 16)); // 0x6d85d
    int32_t v2 = __asm_movss_1646(__asm_cvtpd2ps(v1)); // 0x6d866
    *(int32_t *)(4 * g6 + (int32_t)&g725) = v2;
    int32_t v3 = g6 + 1; // 0x6d86f
    g6 = v3;
    int32_t result; // 0x6d878
    if (v3 != (int32_t)"GNU") {
        // bb
        result = function_6d838();
        g4 = result;
    } else {
        // 0x6d85d
        result = g4;
    }
    // 0x6d87a
    g6 = a1;
    return result;
}

// Address range: 0x6d880 - 0x6d8c2
int32_t function_6d880(int32_t a1, int32_t a2) {
    // 0x6d880
    g4 = a1;
    g9 = a2;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x6d889
    __asm_ucomiss(v1, *(int32_t *)g9);
    bool v2; // pf
    bool v3; // zf
    if (v2 || !v3) {
        // 0x6d89f
        g4 = 0;
        return 0;
    }
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6d894
    __asm_ucomiss(v4, *(int32_t *)(g9 + 4));
    if (v2 || !v3) {
        // 0x6d89f
        g4 = 0;
        return 0;
    }
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6d8aa
    g7 = 0;
    g4 = 0;
    __asm_ucomiss(v5, *(int32_t *)(g9 + 8));
    int32_t result = g7 & -256 | (int32_t)false; // 0x6d8bb
    g7 = result;
    g4 = result;
    return result;
}

// Address range: 0x6d8d0 - 0x6d8d1
int32_t function_6d8d0(int32_t a1, int32_t a2) {
    // 0x6d8d0
    return g4;
}

// Address range: 0x6d8f0 - 0x6d8f3
int32_t function_6d8f0(void) {
    // 0x6d8f0
    return g4;
}

// Address range: 0x6d8f8 - 0x6d8fc
int32_t function_6d8f8(int32_t a1) {
    // 0x6d8f8
    g7 = a1;
    return g4;
}

// Address range: 0x6d95d - 0x6d961
int32_t function_6d95d(int32_t a1, int32_t a2) {
    // 0x6d95d
    g7 = a1;
    return g4;
}

// Address range: 0x6d989 - 0x6d9b3
int32_t function_6d989(void) {
    // 0x6d989
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 40)); // 0x6d98b
    float80_t v3; // st7
    *(float32_t *)(v1 - 76) = (float32_t)v3;
    int128_t v4 = __asm_movss(*(int32_t *)(v1 - 76)); // 0x6d992
    *(int32_t *)(g6 + 8) = 0;
    *(int32_t *)g6 = __asm_movss_1646(__asm_mulss(v4, v2));
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x6da2c - 0x6da4e
int32_t function_6da2c(void) {
    // 0x6da2c
    int32_t v1; // ebp
    float80_t v2; // st7
    *(float32_t *)(v1 - 76) = (float32_t)v2;
    int128_t v3 = __asm_movss(*(int32_t *)(v1 - 76)); // 0x6da2f
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_mulss_1654(v3, 0x42652ee0));
    g6 = *(int32_t *)(v1 - 12);
    g10 = *(int32_t *)(v1 - 8);
    g8 = *(int32_t *)(v1 - 4);
    return g4;
}

// Address range: 0x6da50 - 0x6daaf
int32_t function_6da50(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x6da53
    g4 = a1;
    g9 = a3;
    g6 = a2;
    int32_t v2 = *(int32_t *)(a1 + 12); // 0x6da60
    g7 = v2;
    *(int32_t *)a3 = v2;
    int32_t v3 = *(int32_t *)(g4 + 28); // 0x6da65
    g7 = v3;
    *(int32_t *)(g9 + 4) = v3;
    int32_t v4 = *(int32_t *)(g4 + 44); // 0x6da6b
    g7 = v4;
    *(int32_t *)(g9 + 8) = v4;
    g4 = function_6d8d0(g4, g6);
    int128_t v5 = __asm_movss(0x3c8efa35); // 0x6da7d
    int128_t v6 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6da85
    int128_t v7 = __asm_movss(*(int32_t *)g6); // 0x6da8a
    int128_t v8 = __asm_mulss(v6, v5); // 0x6da8e
    int128_t v9 = __asm_mulss(v7, v5); // 0x6da92
    int128_t v10 = __asm_mulss_1654(v5, *(int32_t *)(g6 + 8)); // 0x6da96
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v8);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v9);
    *(int32_t *)g6 = __asm_movss_1646(v10);
    g6 = v1;
    return g4;
}

// Address range: 0x6dab0 - 0x6db45
int32_t function_6dab0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6dab0
    g4 = a2;
    g7 = a1;
    g9 = a3;
    int128_t v1 = __asm_movss(*(int32_t *)a2); // 0x6dabc
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6dac0
    int128_t v3 = __asm_movss(*(int32_t *)g7); // 0x6dac5
    int128_t v4 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6dac9
    int128_t v5 = __asm_mulss(v1, v3); // 0x6dace
    int128_t v6 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x6dad2
    int128_t v7 = __asm_addss_1661(v5, __asm_mulss(v2, v4)); // 0x6dadb
    int128_t v8 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6dadf
    int128_t v9 = __asm_addss_1661(v7, __asm_mulss(v8, v6)); // 0x6dae8
    *(int32_t *)g9 = __asm_movss_1646(__asm_addss(v9, *(int32_t *)(g4 + 12)));
    int128_t v10 = __asm_movss(*(int32_t *)(g4 + 16)); // 0x6daf5
    int128_t v11 = __asm_movss(*(int32_t *)(g4 + 20)); // 0x6dafa
    int128_t v12 = __asm_mulss(v10, v3); // 0x6daff
    int128_t v13 = __asm_addss_1661(v12, __asm_mulss(v11, v4)); // 0x6db07
    int128_t v14 = __asm_movss(*(int32_t *)(g4 + 24)); // 0x6db0b
    int128_t v15 = __asm_addss_1661(v13, __asm_mulss(v14, v6)); // 0x6db14
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss(v15, *(int32_t *)(g4 + 28)));
    int128_t v16 = __asm_mulss_1654(v3, *(int32_t *)(g4 + 32)); // 0x6db22
    int128_t v17 = __asm_mulss_1654(v4, *(int32_t *)(g4 + 36)); // 0x6db27
    int128_t v18 = __asm_mulss_1654(v6, *(int32_t *)(g4 + 40)); // 0x6db2c
    int128_t v19 = __asm_addss_1661(__asm_addss_1661(v16, v17), v18); // 0x6db35
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss(v19, *(int32_t *)(g4 + 44)));
    return g4;
}

// Address range: 0x6db50 - 0x6dbe5
int32_t function_6db50(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6db50
    g7 = a1;
    g4 = a2;
    g9 = a3;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x6db5c
    int128_t v2 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6db60
    int128_t v3 = __asm_subss_1651(v1, *(int32_t *)(g4 + 12)); // 0x6db65
    int128_t v4 = __asm_subss_1651(v2, *(int32_t *)(g4 + 28)); // 0x6db6a
    int128_t v5 = __asm_movss(*(int32_t *)g4); // 0x6db6f
    int128_t v6 = __asm_movss(*(int32_t *)(g4 + 16)); // 0x6db73
    int128_t v7 = __asm_mulss(v5, v3); // 0x6db78
    int128_t v8 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x6db7c
    int128_t v9 = __asm_mulss(v6, v4); // 0x6db81
    int128_t v10 = __asm_subss_1651(v8, *(int32_t *)(g4 + 44)); // 0x6db85
    int128_t v11 = __asm_addss_1661(v7, v9); // 0x6db8a
    int128_t v12 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 32)), v10); // 0x6db93
    *(int32_t *)g9 = __asm_movss_1646(__asm_addss_1661(v11, v12));
    int128_t v13 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6db9f
    int128_t v14 = __asm_movss(*(int32_t *)(g4 + 20)); // 0x6dba4
    int128_t v15 = __asm_mulss(v13, v3); // 0x6dba9
    int128_t v16 = __asm_addss_1661(v15, __asm_mulss(v14, v4)); // 0x6dbb1
    int128_t v17 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 36)), v10); // 0x6dbba
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss_1661(v16, v17));
    int128_t v18 = __asm_mulss_1654(v3, *(int32_t *)(g4 + 8)); // 0x6dbc7
    int128_t v19 = __asm_mulss_1654(v4, *(int32_t *)(g4 + 24)); // 0x6dbcc
    int128_t v20 = __asm_mulss_1654(v10, *(int32_t *)(g4 + 40)); // 0x6dbd1
    int128_t v21 = __asm_addss_1661(v18, v19); // 0x6dbd6
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss_1661(v21, v20));
    return g4;
}

// Address range: 0x6dbf0 - 0x6dc76
int32_t function_6dbf0(int32_t a1, int32_t * a2, int32_t a3) {
    // 0x6dbf0
    g4 = (int32_t)a2;
    g7 = a1;
    g9 = a3;
    int128_t v1 = __asm_movss(*a2); // 0x6dbfc
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6dc00
    int128_t v3 = __asm_movss(*(int32_t *)g7); // 0x6dc05
    int128_t v4 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6dc09
    int128_t v5 = __asm_mulss(v1, v3); // 0x6dc0e
    int128_t v6 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x6dc12
    int128_t v7 = __asm_addss_1661(v5, __asm_mulss(v2, v4)); // 0x6dc1b
    int128_t v8 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 8)), v6); // 0x6dc24
    *(int32_t *)g9 = __asm_movss_1646(__asm_addss_1661(v7, v8));
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 16)); // 0x6dc30
    int128_t v10 = __asm_movss(*(int32_t *)(g4 + 20)); // 0x6dc35
    int128_t v11 = __asm_mulss(v9, v3); // 0x6dc3a
    int128_t v12 = __asm_addss_1661(v11, __asm_mulss(v10, v4)); // 0x6dc42
    int128_t v13 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 24)), v6); // 0x6dc4b
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss_1661(v12, v13));
    int128_t v14 = __asm_mulss_1654(v3, *(int32_t *)(g4 + 32)); // 0x6dc58
    int128_t v15 = __asm_mulss_1654(v4, *(int32_t *)(g4 + 36)); // 0x6dc5d
    int128_t v16 = __asm_mulss_1654(v6, *(int32_t *)(g4 + 40)); // 0x6dc62
    int128_t v17 = __asm_addss_1661(v14, v15); // 0x6dc67
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss_1661(v17, v16));
    return g4;
}

// Address range: 0x6dc80 - 0x6dddf
int32_t function_6dc80(int32_t a1, int32_t a2, int32_t a3) {
    g4 = a2;
    int128_t v1 = __asm_movss((int32_t)g233); // 0x6dc89
    g7 = a1;
    g9 = a3;
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6dc97
    int128_t v3 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6dc9c
    int128_t v4 = __asm_movss(*(int32_t *)g7); // 0x6dca1
    int32_t v5 = __asm_movss_1646(v3); // 0x6dca5
    int128_t v6 = __asm_xorps(v3, v1); // 0x6dcaa
    int128_t v7 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x6dcad
    int32_t v8 = __asm_movss_1646(v6); // 0x6dcb2
    int128_t v9 = __asm_movaps(v2); // 0x6dcb7
    int128_t v10 = __asm_movss(*(int32_t *)g4); // 0x6dcba
    int32_t v11 = __asm_movss_1646(__asm_xorps(v9, v1)); // bp-24
    int128_t v12 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x6dcc6
    int128_t v13 = __asm_xorps(v1, v10); // 0x6dccb
    int32_t v14 = __asm_movss_1646(v12); // 0x6dcce
    int128_t v15 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6dcd3
    int128_t v16 = __asm_movss(v14); // 0x6dcd8
    int32_t v17 = __asm_movss_1646(v15); // 0x6dcdd
    int128_t v18 = __asm_mulss_1654(v15, v5); // 0x6dce2
    int128_t v19 = __asm_mulss(v16, v2); // 0x6dce7
    int128_t v20 = __asm_mulss(__asm_movss(v14), v13); // 0x6dcf0
    int128_t v21 = __asm_subss(v19, v18); // 0x6dcf4
    int128_t v22 = __asm_movaps(v4); // 0x6dcf8
    int128_t v23 = __asm_addss_1661(v21, __asm_mulss(v22, v7)); // 0x6dcff
    int128_t v24 = __asm_movss(v5); // 0x6dd03
    int128_t v25 = __asm_addss_1661(v20, __asm_mulss(v24, v4)); // 0x6dd0c
    int128_t v26 = __asm_movss(v17); // 0x6dd10
    int128_t v27 = __asm_addss_1661(v25, __asm_mulss(v26, v7)); // 0x6dd19
    int128_t v28 = __asm_mulss(__asm_movss(v17), v10); // 0x6dd22
    int128_t v29 = __asm_mulss(__asm_movaps(v4), v2); // 0x6dd29
    int128_t v30 = __asm_mulss(v4, v13); // 0x6dd2d
    int128_t v31 = __asm_mulss_1654(v2, v17); // 0x6dd31
    int128_t v32 = __asm_subss(v28, v29); // 0x6dd36
    int128_t v33 = __asm_movss(v14); // 0x6dd3a
    int128_t v34 = __asm_subss(v30, v31); // 0x6dd3f
    int128_t v35 = __asm_movss(v14); // 0x6dd43
    int128_t v36 = __asm_mulss(v33, v7); // 0x6dd48
    int128_t v37 = __asm_mulss_1654(v35, v5); // 0x6dd4c
    int128_t v38 = __asm_addss_1661(v32, v36); // 0x6dd51
    int128_t v39 = __asm_movss(v8); // 0x6dd55
    int128_t v40 = __asm_subss(v34, v37); // 0x6dd5a
    int128_t v41 = __asm_mulss(v39, v27); // 0x6dd5e
    int128_t v42 = __asm_movaps(v23); // 0x6dd62
    int128_t v43 = __asm_addss_1661(__asm_mulss(v42, v7), v41); // 0x6dd69
    int128_t v44 = __asm_movss(v11); // 0x6dd6d
    int128_t v45 = __asm_subss(v43, __asm_mulss(v44, v38)); // 0x6dd76
    int128_t v46 = __asm_movaps(v40); // 0x6dd7a
    int128_t v47 = __asm_addss_1661(v45, __asm_mulss(v46, v13)); // 0x6dd81
    int128_t v48 = __asm_mulss(__asm_movss(v8), v23); // 0x6dd8a
    *(int32_t *)g9 = __asm_movss_1646(v47);
    int128_t v49 = __asm_mulss(__asm_movaps(v27), v7); // 0x6dd95
    int128_t v50 = __asm_mulss(v27, v13); // 0x6dd99
    int128_t v51 = __asm_subss(v49, v48); // 0x6dd9d
    int128_t v52 = __asm_mulss(__asm_movaps(v38), v13); // 0x6dda4
    int128_t v53 = __asm_mulss(v38, v7); // 0x6dda8
    int128_t v54 = __asm_addss_1661(v51, v52); // 0x6ddac
    int128_t v55 = __asm_mulss(__asm_movss(v11), v40); // 0x6ddb5
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss_1661(v54, v55));
    int128_t v56 = __asm_mulss_1654(v23, v11); // 0x6ddc2
    int128_t v57 = __asm_mulss_1654(v40, v8); // 0x6ddc7
    int128_t v58 = __asm_addss_1661(__asm_subss(v56, v50), v53); // 0x6ddd0
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss_1661(v58, v57));
    return g4;
}

// Address range: 0x6dde0 - 0x6de66
int32_t function_6dde0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6dde0
    g4 = a2;
    g7 = a1;
    g9 = a3;
    int128_t v1 = __asm_movss(*(int32_t *)a2); // 0x6ddec
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 16)); // 0x6ddf0
    int128_t v3 = __asm_movss(*(int32_t *)g7); // 0x6ddf5
    int128_t v4 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6ddf9
    int128_t v5 = __asm_mulss(v1, v3); // 0x6ddfe
    int128_t v6 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x6de02
    int128_t v7 = __asm_addss_1661(v5, __asm_mulss(v2, v4)); // 0x6de0b
    int128_t v8 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 32)), v6); // 0x6de14
    *(int32_t *)g9 = __asm_movss_1646(__asm_addss_1661(v7, v8));
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6de20
    int128_t v10 = __asm_movss(*(int32_t *)(g4 + 20)); // 0x6de25
    int128_t v11 = __asm_mulss(v9, v3); // 0x6de2a
    int128_t v12 = __asm_addss_1661(v11, __asm_mulss(v10, v4)); // 0x6de32
    int128_t v13 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 36)), v6); // 0x6de3b
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss_1661(v12, v13));
    int128_t v14 = __asm_mulss_1654(v3, *(int32_t *)(g4 + 8)); // 0x6de48
    int128_t v15 = __asm_mulss_1654(v4, *(int32_t *)(g4 + 24)); // 0x6de4d
    int128_t v16 = __asm_mulss_1654(v6, *(int32_t *)(g4 + 40)); // 0x6de52
    int128_t v17 = __asm_addss_1661(v14, v15); // 0x6de57
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss_1661(v17, v16));
    return g4;
}

// Address range: 0x6de70 - 0x6dede
int32_t function_6de70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g10; // 0x6de76
    g10 = a3;
    int32_t v2 = g6; // 0x6de7c
    g4 = a1;
    int32_t v3 = g8; // 0x6de82
    g6 = a4;
    g7 = a5;
    int32_t v4 = *(int32_t *)a3; // 0x6de8b
    g8 = v4;
    g9 = a2;
    *(int32_t *)a1 = v4;
    int32_t v5 = *(int32_t *)(g10 + 4); // 0x6de92
    g8 = v5;
    *(int32_t *)(g4 + 16) = v5;
    int32_t v6 = *(int32_t *)(g10 + 8); // 0x6de98
    g10 = v6;
    *(int32_t *)(g4 + 32) = v6;
    int32_t v7 = *(int32_t *)g6; // 0x6de9e
    g10 = v7;
    *(int32_t *)(g4 + 4) = v7;
    int32_t v8 = *(int32_t *)(g6 + 4); // 0x6dea3
    g10 = v8;
    *(int32_t *)(g4 + 20) = v8;
    int32_t v9 = *(int32_t *)(g6 + 8); // 0x6dea9
    g6 = v9;
    *(int32_t *)(g4 + 36) = v9;
    int32_t v10 = *(int32_t *)g7; // 0x6deaf
    g6 = v10;
    *(int32_t *)(g4 + 8) = v10;
    int32_t v11 = *(int32_t *)(g7 + 4); // 0x6deb4
    g6 = v11;
    *(int32_t *)(g4 + 24) = v11;
    int32_t v12 = *(int32_t *)(g7 + 8); // 0x6deba
    g7 = v12;
    *(int32_t *)(g4 + 40) = v12;
    int32_t v13 = *(int32_t *)g9; // 0x6dec0
    g7 = v13;
    *(int32_t *)(g4 + 12) = v13;
    int32_t v14 = *(int32_t *)(g9 + 4); // 0x6dec5
    g7 = v14;
    *(int32_t *)(g4 + 28) = v14;
    int32_t v15 = *(int32_t *)(g9 + 8); // 0x6decb
    g9 = v15;
    *(int32_t *)(g4 + 44) = v15;
    g6 = v2;
    g10 = v1;
    g8 = v3;
    return g4;
}

// Address range: 0x6dee0 - 0x6df31
int32_t function_6dee0(int32_t a1, int32_t a2) {
    // 0x6dee0
    g9 = a1;
    g4 = a2;
    int32_t v1 = *(int32_t *)a1; // 0x6dee9
    g7 = v1;
    *(int32_t *)a2 = v1;
    int32_t v2 = *(int32_t *)(g9 + 4); // 0x6deed
    g7 = v2;
    *(int32_t *)(g4 + 4) = v2;
    int32_t v3 = *(int32_t *)(g9 + 8); // 0x6def3
    g7 = v3;
    *(int32_t *)(g4 + 8) = v3;
    int32_t v4 = *(int32_t *)(g9 + 12); // 0x6def9
    g7 = v4;
    *(int32_t *)(g4 + 12) = v4;
    int32_t v5 = *(int32_t *)(g9 + 16); // 0x6deff
    g7 = v5;
    *(int32_t *)(g4 + 16) = v5;
    int32_t v6 = *(int32_t *)(g9 + 20); // 0x6df05
    g7 = v6;
    *(int32_t *)(g4 + 20) = v6;
    int32_t v7 = *(int32_t *)(g9 + 24); // 0x6df0b
    g7 = v7;
    *(int32_t *)(g4 + 24) = v7;
    int32_t v8 = *(int32_t *)(g9 + 28); // 0x6df11
    g7 = v8;
    *(int32_t *)(g4 + 28) = v8;
    int32_t v9 = *(int32_t *)(g9 + 32); // 0x6df17
    g7 = v9;
    *(int32_t *)(g4 + 32) = v9;
    int32_t v10 = *(int32_t *)(g9 + 36); // 0x6df1d
    g7 = v10;
    *(int32_t *)(g4 + 36) = v10;
    int32_t v11 = *(int32_t *)(g9 + 40); // 0x6df23
    g7 = v11;
    *(int32_t *)(g4 + 40) = v11;
    int32_t v12 = *(int32_t *)(g9 + 44); // 0x6df29
    g9 = v12;
    *(int32_t *)(g4 + 44) = v12;
    return g4;
}

// Address range: 0x6df31 - 0x6dfa7
int32_t function_6df31(int32_t a1, int32_t a2, int32_t a3) {
    int128_t v1 = __asm_movsd_1649(*(int64_t *)&g127); // 0x6df41
    int32_t v2 = g8; // 0x6df4b
    int32_t v3 = g10; // bp-12
    g8 = a1;
    g10 = a2;
    int32_t v4 = g6; // bp-16
    g6 = 0;
    int128_t v5 = __asm_cvtps2pd(__asm_movss(a3)); // 0x6df5b
    int32_t v6 = g6; // 0x6df5e
    while (true) {
        // 0x6df5e
        g4 = 0;
        uint32_t v7 = 16 * v6; // 0x6df62
        int32_t v8 = g8 + v7; // 0x6df65
        g7 = v8;
        int32_t v9 = g10 + v7; // 0x6df68
        bool v10 = v9 < v7; // cf
        bool v11 = v9 == 0; // zf
        g9 = v9;
        int32_t v12 = 0; // 0x6df6a
        while (true) {
            int128_t v13 = __asm_movss(*(int32_t *)(v8 + v12)); // 0x6df6a
            int128_t v14 = __asm_subss_1651(v13, *(int32_t *)(g4 + g9)); // 0x6df6f
            int128_t v15 = __asm_cvtps2pd(__asm_unpcklps(v14, v14)); // 0x6df77
            __asm_ucomisd(__asm_andpd(v15, v1), v5);
            if (!v10 && !v11) {
                // break (via goto) -> 0x6dfa0
                goto lab_0x6dfa0;
            }
            int32_t v16 = g4; // 0x6df84
            int32_t v17 = v16 + 4; // 0x6df84
            g4 = v17;
            v10 = v17 < 16;
            v11 = v16 == 12;
            if (v16 == 12) {
                // break -> 0x6df8c
                break;
            }
            // 0x6df84
            v12 = v17;
            v8 = g7;
        }
        int32_t v18 = g6; // 0x6df8c
        int32_t v19 = v18 + 1; // 0x6df8c
        g6 = v19;
        if (v18 == 2) {
            // 0x6df94
            g6 = v4;
            g4 = 1;
            g10 = v3;
            g8 = v2;
            return 1;
        }
        v6 = v19;
    }
  lab_0x6dfa0:
    // 0x6dfa0
    g6 = v4;
    g4 = 0;
    g10 = v3;
    g8 = v2;
    return 0;
}

// Address range: 0x6dfb0 - 0x6e10d
int32_t function_6dfb0(int32_t a1, int32_t * a2) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g8; // 0x6dfb3
    int32_t v3 = g10; // 0x6dfb4
    int32_t v4 = g6; // 0x6dfb5
    g4 = a1;
    g9 = v1;
    int32_t v5;
    int32_t v6; // bp-32
    int32_t v7; // 0x6e0bb
    int32_t v8; // 0x6e0e3
    int128_t v9; // xmm0
    int128_t v10; // xmm4
    int128_t v11; // xmm5
    int128_t v12; // xmm6
    int128_t v13; // xmm7
    if (v1 == a1) {
        int128_t v14 = __asm_movss(*(int32_t *)(a1 + 24)); // 0x6e0b0
        int32_t v15 = g4; // 0x6e0b5
        int32_t v16 = *(int32_t *)(v15 + 4); // 0x6e0b5
        g6 = v16;
        int32_t v17 = *(int32_t *)(v15 + 16); // 0x6e0b8
        g8 = v17;
        v7 = __asm_movss_1646(v14);
        int32_t v18 = g4; // 0x6e0c0
        int32_t v19 = *(int32_t *)(v18 + 32); // 0x6e0c0
        g10 = v19;
        g7 = *(int32_t *)(v18 + 36);
        *(int32_t *)(g4 + 36) = __asm_movss_1646(v14);
        int128_t v20 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6e0cb
        *(int32_t *)(g4 + 16) = v16;
        v11 = __asm_movd(v16);
        int128_t v21 = __asm_movss(*(int32_t *)(g4 + 40)); // 0x6e0d7
        *(int32_t *)(g4 + 4) = v17;
        v13 = __asm_movd(v17);
        v8 = __asm_movss_1646(v20);
        v12 = __asm_movd(v19);
        v10 = __asm_movss(*(int32_t *)(g4 + 20));
        *(int32_t *)(g4 + 32) = __asm_movss_1646(v20);
        v9 = __asm_movss(*(int32_t *)g4);
        *(int32_t *)(g4 + 8) = v19;
        *(int32_t *)(g4 + 24) = g7;
        v6 = __asm_movss_1646(v21);
        v5 = g7;
    } else {
        int128_t v22 = __asm_movss(*(int32_t *)a1); // 0x6dfc7
        v9 = v22;
        *(int32_t *)g9 = __asm_movss_1646(v22);
        int128_t v23 = __asm_movss(*(int32_t *)(g4 + 16)); // 0x6dfcf
        v13 = v23;
        *(int32_t *)(g9 + 4) = __asm_movss_1646(v23);
        int128_t v24 = __asm_movss(*(int32_t *)(g4 + 32)); // 0x6dfd9
        v12 = v24;
        *(int32_t *)(g9 + 8) = __asm_movss_1646(v24);
        int128_t v25 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6dfe3
        v11 = v25;
        *(int32_t *)(g9 + 16) = __asm_movss_1646(v25);
        int128_t v26 = __asm_movss(*(int32_t *)(g4 + 20)); // 0x6dfed
        v10 = v26;
        *(int32_t *)(g9 + 20) = __asm_movss_1646(v26);
        int128_t v27 = __asm_movss(*(int32_t *)(g4 + 36)); // 0x6dff7
        *(int32_t *)(g9 + 24) = __asm_movss_1646(v27);
        int32_t v28 = __asm_movss_1646(v27); // 0x6e001
        int128_t v29 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6e006
        *(int32_t *)(g9 + 32) = __asm_movss_1646(v29);
        int32_t v30 = __asm_movss_1646(v29); // 0x6e010
        int128_t v31 = __asm_movss(*(int32_t *)(g4 + 24)); // 0x6e015
        *(int32_t *)(g9 + 36) = __asm_movss_1646(v31);
        int32_t v32 = __asm_movss_1646(v31); // 0x6e01f
        int128_t v33 = __asm_movss(*(int32_t *)(g4 + 40)); // 0x6e024
        v6 = __asm_movss_1646(v33);
        *(int32_t *)(g9 + 40) = __asm_movss_1646(v33);
        v5 = v28;
        v8 = v30;
        v7 = v32;
    }
    int128_t v34 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x6e033
    int128_t v35 = __asm_movss(*(int32_t *)(g4 + 28)); // 0x6e038
    int128_t v36 = __asm_mulss(v9, v34); // 0x6e03d
    int128_t v37 = __asm_movss(*(int32_t *)(g4 + 44)); // 0x6e041
    int128_t v38 = __asm_mulss(v13, v35); // 0x6e046
    int128_t v39 = __asm_mulss(v12, v37); // 0x6e04a
    int128_t v40 = __asm_mulss(v11, v34); // 0x6e04e
    int128_t v41 = __asm_mulss(v10, v35); // 0x6e052
    int128_t v42 = __asm_addss_1661(v36, v38); // 0x6e056
    int128_t v43 = __asm_mulss_1654(v34, v8); // 0x6e05a
    int128_t v44 = __asm_mulss_1654(v35, v7); // 0x6e05f
    int128_t v45 = __asm_addss_1661(v42, v39); // 0x6e064
    int128_t v46 = __asm_movss((int32_t)g233); // 0x6e068
    int128_t v47 = __asm_addss_1661(v40, v41); // 0x6e070
    int128_t v48 = __asm_addss_1661(v43, v44); // 0x6e074
    int128_t v49 = __asm_xorps(v45, v46); // 0x6e078
    *(int32_t *)(g9 + 12) = __asm_movss_1646(v49);
    int128_t v50 = __asm_mulss(__asm_movss(v5), v37); // 0x6e085
    int128_t v51 = __asm_mulss_1654(v37, v6); // 0x6e089
    int128_t v52 = __asm_addss_1661(v47, v50); // 0x6e08e
    int128_t v53 = __asm_addss_1661(v48, v51); // 0x6e092
    int128_t v54 = __asm_xorps(v52, v46); // 0x6e096
    *(int32_t *)(g9 + 28) = __asm_movss_1646(v54);
    *(int32_t *)(g9 + 44) = __asm_movss_1646(__asm_xorps(v53, v46));
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return g4;
}

// Address range: 0x6e110 - 0x6e13a
int32_t function_6e110(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x6e113
    g9 = a1;
    g6 = a2;
    g4 = a3;
    int32_t v2 = 4 * a2; // 0x6e11d
    g7 = v2;
    int32_t v3 = *(int32_t *)(v2 + a1); // 0x6e124
    g6 = v3;
    *(int32_t *)a3 = v3;
    int32_t v4 = *(int32_t *)(g9 + 16 + g7); // 0x6e129
    g6 = v4;
    *(int32_t *)(g4 + 4) = v4;
    int32_t v5 = *(int32_t *)(g9 + 32 + g7); // 0x6e130
    g9 = v5;
    *(int32_t *)(g4 + 8) = v5;
    g6 = v1;
    return g4;
}

// Address range: 0x6e140 - 0x6e179
int32_t function_6e140(int32_t a1, int32_t a2, int32_t a3) {
    g9 = a1;
    int32_t v1 = g6; // 0x6e149
    int32_t v2 = g10; // 0x6e14c
    g6 = a2;
    g4 = a3;
    int32_t v3 = *(int32_t *)a1; // 0x6e155
    g10 = v3;
    int32_t v4 = 4 * a2; // 0x6e157
    g7 = v4;
    *(int32_t *)(v4 + a3) = v3;
    int32_t v5 = *(int32_t *)(g9 + 4); // 0x6e161
    g6 = v5;
    *(int32_t *)(g4 + 16 + g7) = v5;
    int32_t v6 = *(int32_t *)(g9 + 8); // 0x6e168
    g9 = v6;
    *(int32_t *)(g4 + 32 + g7) = v6;
    g6 = v1;
    g10 = v2;
    return g4;
}

// Address range: 0x6e180 - 0x6e1ac
int32_t function_6e180(int32_t a1, int32_t a2) {
    bool v1 = true; // zf
    bool v2 = true; // pf
    g4 = 0;
    g7 = a1;
    g9 = a2;
    int32_t v3 = 0; // 0x6e18b
    while (true) {
        int128_t v4 = __asm_movss(*(int32_t *)(4 * v3 + a1)); // 0x6e18b
        __asm_ucomiss(v4, *(int32_t *)(4 * g4 + g9));
        if (v2 || !v1) {
            // break -> 0x6e1a8
            break;
        }
        int32_t v5 = g4; // 0x6e198
        int32_t v6 = v5 + 1; // 0x6e198
        g4 = v6;
        int32_t v7 = v5 - 2; // 0x6e19b
        v1 = v7 == 0;
        v2 = llvm_ctpop_i8((char)v7) % 2 == 0;
        if (v7 == 0) {
            int32_t result = v6 & -256 | 1; // 0x6e1a0
            g4 = result;
            return result;
        }
        // 0x6e198
        v3 = v6;
        a1 = g7;
    }
    // 0x6e1a8
    g4 = 0;
    return 0;
}

// Address range: 0x6e1b0 - 0x6e210
int32_t function_6e1b0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6e1b0
    g9 = a1;
    g4 = a2;
    g7 = a3;
    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x6e1bc
    int128_t v2 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x6e1c1
    int128_t v3 = __asm_mulss_1654(v1, *(int32_t *)(g4 + 8)); // 0x6e1c6
    int128_t v4 = __asm_mulss_1654(v2, *(int32_t *)(g4 + 4)); // 0x6e1cb
    *(int32_t *)g7 = __asm_movss_1646(__asm_subss(v3, v4));
    int128_t v5 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x6e1d8
    int128_t v6 = __asm_movss(*(int32_t *)g9); // 0x6e1dd
    int128_t v7 = __asm_mulss_1654(v5, *(int32_t *)g4); // 0x6e1e1
    int128_t v8 = __asm_mulss_1654(v6, *(int32_t *)(g4 + 8)); // 0x6e1e5
    *(int32_t *)(g7 + 4) = __asm_movss_1646(__asm_subss(v7, v8));
    int128_t v9 = __asm_movss(*(int32_t *)g9); // 0x6e1f3
    int128_t v10 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6e1f7
    int128_t v11 = __asm_mulss_1654(v9, *(int32_t *)(g4 + 4)); // 0x6e1fc
    int128_t v12 = __asm_mulss_1654(v10, *(int32_t *)g4); // 0x6e201
    *(int32_t *)(g7 + 8) = __asm_movss_1646(__asm_subss(v11, v12));
    return g4;
}

// Address range: 0x6e210 - 0x6e229
int32_t function_6e210(uint32_t a1) {
    // 0x6e210
    g4 = 0;
    int32_t v1 = a1 / 2; // 0x6e218
    g9 = v1;
    if (a1 < 2) {
        // 0x6e227
        return 0;
    }
    int32_t result = 1; // 0x6e220
    int32_t v2 = v1 / 2; // 0x6e223
    while (v1 >= 2) {
        // 0x6e220
        v1 = v2;
        result++;
        v2 = v1 / 2;
    }
    // 0x6e227
    g4 = result;
    g9 = v2;
    // 0x6e227
    return result;
}

// Address range: 0x6e230 - 0x6e2a4
int32_t function_6e230(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int128_t v1 = __asm_movss((int32_t)g233); // 0x6e231
    int32_t v2 = g10; // 0x6e23b
    g9 = a1;
    int32_t v3 = g6; // 0x6e23f
    g6 = a2;
    g4 = a3;
    g7 = a4;
    int32_t v4 = *(int32_t *)a1; // 0x6e249
    g10 = v4;
    *(int32_t *)a2 = v4;
    int32_t v5 = *(int32_t *)(g9 + 16); // 0x6e24d
    g10 = v5;
    *(int32_t *)(g6 + 4) = v5;
    int32_t v6 = *(int32_t *)(g9 + 32); // 0x6e253
    g10 = v6;
    *(int32_t *)(g6 + 8) = v6;
    int32_t v7 = *(int32_t *)(g9 + 4); // 0x6e259
    g6 = v7;
    *(int32_t *)g4 = v7;
    int32_t v8 = *(int32_t *)(g9 + 20); // 0x6e25e
    g6 = v8;
    *(int32_t *)(g4 + 4) = v8;
    int32_t v9 = *(int32_t *)(g9 + 36); // 0x6e264
    g6 = v9;
    *(int32_t *)(g4 + 8) = v9;
    int32_t v10 = *(int32_t *)(g9 + 8); // 0x6e26a
    g6 = v10;
    *(int32_t *)g7 = v10;
    int32_t v11 = *(int32_t *)(g9 + 24); // 0x6e26f
    g6 = v11;
    *(int32_t *)(g7 + 4) = v11;
    int32_t v12 = *(int32_t *)(g9 + 40); // 0x6e275
    g9 = v12;
    *(int32_t *)(g7 + 8) = v12;
    int128_t v13 = __asm_movss(*(int32_t *)g4); // 0x6e27b
    *(int32_t *)g4 = __asm_movss_1646(__asm_xorps(v13, v1));
    int128_t v14 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6e286
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_xorps(v14, v1));
    int128_t v15 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6e293
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_xorps(v15, v1));
    g6 = v3;
    g10 = v2;
    return g4;
}

// Address range: 0x6e2b0 - 0x6e3fb
int32_t function_6e2b0(int32_t a1, int32_t * a2, int32_t * a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    bool v2 = &v1 < (int32_t *)20; // cf
    bool v3 = &v1 == (int32_t *)20; // zf
    int32_t v4 = g6; // 0x6e2b6
    g6 = a1;
    int32_t v5 = g10; // 0x6e2bc
    int128_t v6 = __asm_movsd_1649(*(int64_t *)&g127); // 0x6e2bf
    int32_t v7 = g8; // 0x6e2c7
    int128_t v8 = __asm_movsd_1649(0x3eb0c6f7a0b5ed8d); // 0x6e2ca
    g10 = (int32_t)a2;
    int128_t v9 = __asm_movss(*(int32_t *)g6); // 0x6e2d5
    g8 = (int32_t)a3;
    int128_t v10 = __asm_andpd(__asm_cvtps2pd(v9), v6); // 0x6e2df
    int128_t v11 = v10; // xmm0
    __asm_ucomisd(v8, v10);
    int128_t v12 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6e2e7
    int128_t v13 = v12; // xmm3
    if (!v2 && !v3) {
        int128_t v14 = __asm_unpcklps(v12, v12); // 0x6e2ee
        v13 = v14;
        int128_t v15 = __asm_andpd(__asm_cvtps2pd(v14), v6); // 0x6e2f4
        v11 = v15;
        __asm_ucomisd(v8, v15);
        if (!v2 && !v3) {
            // 0x6e3b8
            *(int32_t *)g10 = 0;
            int128_t v16 = __asm_movss((int32_t)g233); // 0x6e3be
            *(int32_t *)(g10 + 4) = -0x40800000;
            *(int32_t *)(g10 + 8) = 0;
            int128_t v17 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6e3d4
            *(int32_t *)(g8 + 4) = 0;
            *(int32_t *)(g8 + 8) = 0;
            int128_t v18 = __asm_xorps(v17, v16); // 0x6e3e7
            *(int32_t *)g8 = __asm_movss_1646(v18);
            g6 = v4;
            g10 = v5;
            g8 = v7;
            return g4;
        }
    }
    int128_t v19 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6e302
    int128_t v20 = __asm_xorps(v11, v11); // 0x6e307
    int128_t v21 = __asm_subss(v13, __asm_mulss(v19, v20)); // 0x6e30e
    *(int32_t *)g10 = __asm_movss_1646(v21);
    int128_t v22 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v20); // 0x6e31b
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_subss_1651(v22, *(int32_t *)g6));
    int128_t v23 = __asm_mulss(__asm_movss(*(int32_t *)g6), v20); // 0x6e32c
    int128_t v24 = __asm_mulss_1654(v20, *(int32_t *)(g6 + 4)); // 0x6e330
    *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_subss(v23, v24));
    g4 = (float32_t)function_6d750(g10);
    g13++;
    int128_t v25 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x6e348
    int128_t v26 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6e34d
    int128_t v27 = __asm_mulss_1654(v25, *(int32_t *)(g6 + 8)); // 0x6e352
    int128_t v28 = __asm_subss(v27, __asm_mulss_1654(v26, *(int32_t *)(g6 + 4))); // 0x6e35c
    *(int32_t *)g8 = __asm_movss_1646(v28);
    int128_t v29 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6e364
    int128_t v30 = __asm_movss(*(int32_t *)g10); // 0x6e369
    int128_t v31 = __asm_mulss_1654(v29, *(int32_t *)g6); // 0x6e36d
    int128_t v32 = __asm_subss(v31, __asm_mulss_1654(v30, *(int32_t *)(g6 + 8))); // 0x6e376
    *(int32_t *)(g8 + 4) = __asm_movss_1646(v32);
    int128_t v33 = __asm_movss(*(int32_t *)g10); // 0x6e37f
    int128_t v34 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x6e383
    int128_t v35 = __asm_mulss_1654(v33, *(int32_t *)(g6 + 4)); // 0x6e388
    int128_t v36 = __asm_subss(v35, __asm_mulss_1654(v34, *(int32_t *)g6)); // 0x6e391
    *(int32_t *)(g8 + 8) = __asm_movss_1646(v36);
    float80_t v37 = function_6d750(g8); // 0x6e39d
    g4 = (float32_t)v37;
    g6 = v4;
    g10 = v5;
    g8 = v7;
    return (float32_t)v37;
}

// Address range: 0x6e400 - 0x6e47c
int32_t function_6e400(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x6e403
    int32_t v2 = g6; // 0x6e404
    g10 = a1;
    int32_t v3; // bp-36
    g4 = &v3;
    g6 = a2;
    int32_t v4; // bp-24
    g4 = function_6e2b0(a1, &v3, &v4);
    g4 = *(int32_t *)g10;
    int128_t v5 = __asm_movss((int32_t)g233); // 0x6e426
    int32_t v6;
    int128_t v7 = __asm_movss(v6); // 0x6e42e
    int32_t v8;
    int128_t v9 = __asm_movss(v8); // 0x6e433
    int128_t v10 = __asm_movss(v3); // 0x6e438
    int128_t v11 = __asm_xorps(v7, v5); // 0x6e43d
    *(int32_t *)g6 = g4;
    int128_t v12 = __asm_xorps(v9, v5); // 0x6e442
    g4 = *(int32_t *)(g10 + 4);
    int128_t v13 = __asm_xorps(v10, v5); // 0x6e448
    *(int32_t *)(g6 + 16) = g4;
    g4 = *(int32_t *)(g10 + 8);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v13);
    *(int32_t *)(g6 + 20) = __asm_movss_1646(v12);
    *(int32_t *)(g6 + 36) = __asm_movss_1646(v11);
    *(int32_t *)(g6 + 32) = g4;
    *(int32_t *)(g6 + 8) = v4;
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x6e480 - 0x6e549
int32_t function_6e480(int32_t a1, int32_t a2) {
    int32_t v1 = g10; // 0x6e483
    int32_t v2 = g6; // 0x6e484
    g10 = a1;
    int128_t v3 = __asm_movss(0x3f800000); // 0x6e48b
    g6 = a2;
    int128_t v4 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x6e496
    int128_t v5 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6e49b
    int128_t v6 = __asm_mulss(v4, v4); // 0x6e4a0
    *(int32_t *)(g6 + 4) = 0;
    int128_t v7 = __asm_mulss(v6, __asm_subss(v3, v5)); // 0x6e4af
    int128_t v8 = __asm_movss((int32_t)g233); // 0x6e4b3
    *(int32_t *)g6 = __asm_movss_1646(__asm_addss_1661(v7, v5));
    int128_t v9 = __asm_movss(*(int32_t *)g10); // 0x6e4c3
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_xorps(v9, v8));
    g4 = (float32_t)function_6d750(g6);
    g13++;
    int128_t v10 = __asm_movss(*(int32_t *)g6); // 0x6e4d9
    int128_t v11 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6e4dd
    int128_t v12 = __asm_movss(*(int32_t *)g10); // 0x6e4e2
    int128_t v13 = __asm_movaps(v10); // 0x6e4e6
    int128_t v14 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x6e4e9
    int128_t v15 = __asm_movaps(v11); // 0x6e4ee
    int128_t v16 = __asm_mulss(v13, v12); // 0x6e4f1
    int128_t v17 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6e4f5
    int128_t v18 = __asm_mulss(v15, v14); // 0x6e4fa
    int128_t v19 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6e4fe
    int128_t v20 = __asm_addss_1661(v16, v18); // 0x6e503
    int128_t v21 = __asm_movaps(v17); // 0x6e507
    int128_t v22 = __asm_addss_1661(v20, __asm_mulss(v21, v19)); // 0x6e50e
    int128_t v23 = __asm_mulss(v12, v22); // 0x6e512
    int128_t v24 = __asm_mulss(v14, v22); // 0x6e516
    int128_t v25 = __asm_mulss(v22, v19); // 0x6e51a
    int128_t v26 = __asm_subss(v10, v23); // 0x6e51e
    int128_t v27 = __asm_subss(v11, v24); // 0x6e522
    int128_t v28 = __asm_subss(v17, v25); // 0x6e526
    *(int32_t *)g6 = __asm_movss_1646(v26);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v27);
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v28);
    float80_t v29 = function_6d750(g6); // 0x6e53b
    g4 = (float32_t)v29;
    g6 = v2;
    g10 = v1;
    return (float32_t)v29;
}

// Address range: 0x6e57a - 0x6e57b
int32_t function_6e57a(void) {
    // 0x6e57a
    return g4;
}

// Address range: 0x6e588 - 0x6e58e
int32_t function_6e588(int32_t a1) {
    // 0x6e588
    *(char *)g8 = (char)g7 | *(char *)&g8;
    g9 = a1;
    return g4;
}

// Address range: 0x6e5d7 - 0x6e5df
float80_t function_6e5d7(int32_t a1) {
    // 0x6e5d7
    float80_t v1; // st7
    return v1 * (float80_t)*(float32_t *)&g8;
}

// Address range: 0x6e615 - 0x6e621
int32_t function_6e615(void) {
    int32_t result = unknown_5d17f60e(); // 0x6e616
    g4 = result;
    return result;
}

// Address range: 0x6e638 - 0x6e689
int32_t function_6e638(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6e638
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 56)); // 0x6e63a
    float80_t v3; // st7
    *(float64_t *)(v1 - 80) = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)(v1 - 72)); // 0x6e641
    int128_t v5 = __asm_movsd_1649(*(int64_t *)(v1 - 80)); // 0x6e646
    int128_t v6 = __asm_movss(*(int32_t *)(v1 - 24)); // 0x6e64b
    int128_t v7 = __asm_mulsd(v5, v2); // 0x6e650
    int128_t v8 = __asm_movss(*(int32_t *)(v1 - 40)); // 0x6e654
    int128_t v9 = __asm_divsd(v7, v4); // 0x6e659
    int128_t v10 = __asm_cvtpd2ps(__asm_unpcklpd(v9, v9)); // 0x6e661
    __asm_ucomiss_1648(v6, v10);
    bool v11; // cf
    int128_t v12; // 0x6e672
    bool v13; // zf
    if (!v11 && !v13) {
        // 0x6e66a
        v12 = __asm_addss(v10, 0x43b40000);
    } else {
        v12 = v10;
    }
    // 0x6e672
    *(int32_t *)g6 = __asm_movss_1646(v12);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v8);
    *(int32_t *)(g6 + 8) = 0;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x6e690 - 0x6e6c1
int32_t function_6e690(void) {
    // 0x6e690
    bool v1; // zf
    if (!v1) {
        // bb
        g4 = function_6e57a();
    }
    int128_t v2 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6e696
    int128_t v3; // xmm1
    __asm_movaps(v3);
    int128_t v4 = __asm_movss(0x43870000); // 0x6e69e
    int128_t v5 = __asm_cmpltss(v3, v2); // 0x6e6a6
    int128_t v6 = __asm_movaps(v5); // 0x6e6ab
    int128_t v7 = __asm_andps(v4, v5); // 0x6e6ae
    int128_t v8 = __asm_movss(0x42b40000); // 0x6e6b1
    __asm_orps(__asm_andnps(v6, v8), v7);
    return g4;
}

// Address range: 0x6e6c1 - 0x6e85a
int32_t function_6e6c1(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6e6c1
    g9 = a1;
    g4 = a2;
    g7 = a3;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x6e6dc
    int128_t v2 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6e6e0
    int128_t v3 = __asm_mulss_1654(v1, *(int32_t *)g4); // 0x6e6e5
    int128_t v4 = __asm_addss_1661(v3, __asm_mulss_1654(v2, *(int32_t *)(g4 + 12))); // 0x6e6ee
    int128_t v5 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x6e6f2
    int128_t v6 = __asm_mulss_1654(v5, *(int32_t *)(g4 + 24)); // 0x6e6f7
    *(int32_t *)g7 = __asm_movss_1646(__asm_addss_1661(v4, v6));
    int128_t v7 = __asm_movss(*(int32_t *)g9); // 0x6e704
    int128_t v8 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6e708
    int128_t v9 = __asm_mulss_1654(v7, *(int32_t *)(g4 + 4)); // 0x6e70d
    int128_t v10 = __asm_addss_1661(v9, __asm_mulss_1654(v8, *(int32_t *)(g4 + 16))); // 0x6e717
    int128_t v11 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x6e71b
    int128_t v12 = __asm_mulss_1654(v11, *(int32_t *)(g4 + 28)); // 0x6e720
    *(int32_t *)(g7 + 4) = __asm_movss_1646(__asm_addss_1661(v10, v12));
    int128_t v13 = __asm_movss(*(int32_t *)g9); // 0x6e72e
    int128_t v14 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6e732
    int128_t v15 = __asm_mulss_1654(v13, *(int32_t *)(g4 + 8)); // 0x6e737
    int128_t v16 = __asm_addss_1661(v15, __asm_mulss_1654(v14, *(int32_t *)(g4 + 20))); // 0x6e741
    int128_t v17 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x6e745
    int128_t v18 = __asm_mulss_1654(v17, *(int32_t *)(g4 + 32)); // 0x6e74a
    *(int32_t *)(g7 + 8) = __asm_movss_1646(__asm_addss_1661(v16, v18));
    int128_t v19 = __asm_movss(*(int32_t *)(g9 + 12)); // 0x6e758
    int128_t v20 = __asm_movss(*(int32_t *)(g9 + 16)); // 0x6e75d
    int128_t v21 = __asm_mulss_1654(v19, *(int32_t *)g4); // 0x6e762
    int128_t v22 = __asm_addss_1661(v21, __asm_mulss_1654(v20, *(int32_t *)(g4 + 12))); // 0x6e76b
    int128_t v23 = __asm_movss(*(int32_t *)(g9 + 20)); // 0x6e76f
    int128_t v24 = __asm_mulss_1654(v23, *(int32_t *)(g4 + 24)); // 0x6e774
    *(int32_t *)(g7 + 12) = __asm_movss_1646(__asm_addss_1661(v22, v24));
    int128_t v25 = __asm_movss(*(int32_t *)(g9 + 12)); // 0x6e782
    int128_t v26 = __asm_movss(*(int32_t *)(g9 + 16)); // 0x6e787
    int128_t v27 = __asm_mulss_1654(v25, *(int32_t *)(g4 + 4)); // 0x6e78c
    int128_t v28 = __asm_addss_1661(v27, __asm_mulss_1654(v26, *(int32_t *)(g4 + 16))); // 0x6e796
    int128_t v29 = __asm_movss(*(int32_t *)(g9 + 20)); // 0x6e79a
    int128_t v30 = __asm_mulss_1654(v29, *(int32_t *)(g4 + 28)); // 0x6e79f
    *(int32_t *)(g7 + 16) = __asm_movss_1646(__asm_addss_1661(v28, v30));
    int128_t v31 = __asm_movss(*(int32_t *)(g9 + 12)); // 0x6e7ad
    int128_t v32 = __asm_movss(*(int32_t *)(g9 + 16)); // 0x6e7b2
    int128_t v33 = __asm_mulss_1654(v31, *(int32_t *)(g4 + 8)); // 0x6e7b7
    int128_t v34 = __asm_addss_1661(v33, __asm_mulss_1654(v32, *(int32_t *)(g4 + 20))); // 0x6e7c1
    int128_t v35 = __asm_movss(*(int32_t *)(g9 + 20)); // 0x6e7c5
    int128_t v36 = __asm_mulss_1654(v35, *(int32_t *)(g4 + 32)); // 0x6e7ca
    *(int32_t *)(g7 + 20) = __asm_movss_1646(__asm_addss_1661(v34, v36));
    int128_t v37 = __asm_movss(*(int32_t *)(g9 + 24)); // 0x6e7d8
    int128_t v38 = __asm_movss(*(int32_t *)(g9 + 28)); // 0x6e7dd
    int128_t v39 = __asm_mulss_1654(v37, *(int32_t *)g4); // 0x6e7e2
    int128_t v40 = __asm_addss_1661(v39, __asm_mulss_1654(v38, *(int32_t *)(g4 + 12))); // 0x6e7eb
    int128_t v41 = __asm_movss(*(int32_t *)(g9 + 32)); // 0x6e7ef
    int128_t v42 = __asm_mulss_1654(v41, *(int32_t *)(g4 + 24)); // 0x6e7f4
    *(int32_t *)(g7 + 24) = __asm_movss_1646(__asm_addss_1661(v40, v42));
    int128_t v43 = __asm_movss(*(int32_t *)(g9 + 24)); // 0x6e802
    int128_t v44 = __asm_movss(*(int32_t *)(g9 + 28)); // 0x6e807
    int128_t v45 = __asm_mulss_1654(v43, *(int32_t *)(g4 + 4)); // 0x6e80c
    int128_t v46 = __asm_addss_1661(v45, __asm_mulss_1654(v44, *(int32_t *)(g4 + 16))); // 0x6e816
    int128_t v47 = __asm_movss(*(int32_t *)(g9 + 32)); // 0x6e81a
    int128_t v48 = __asm_mulss_1654(v47, *(int32_t *)(g4 + 28)); // 0x6e81f
    *(int32_t *)(g7 + 28) = __asm_movss_1646(__asm_addss_1661(v46, v48));
    int128_t v49 = __asm_movss(*(int32_t *)(g9 + 24)); // 0x6e82d
    int128_t v50 = __asm_movss(*(int32_t *)(g9 + 28)); // 0x6e832
    int128_t v51 = __asm_mulss_1654(v49, *(int32_t *)(g4 + 8)); // 0x6e837
    int128_t v52 = __asm_addss_1661(v51, __asm_mulss_1654(v50, *(int32_t *)(g4 + 20))); // 0x6e841
    int128_t v53 = __asm_movss(*(int32_t *)(g9 + 32)); // 0x6e845
    int128_t v54 = __asm_mulss_1654(v53, *(int32_t *)(g4 + 32)); // 0x6e84a
    *(int32_t *)(g7 + 32) = __asm_movss_1646(__asm_addss_1661(v52, v54));
    return g4;
}

// Address range: 0x6e860 - 0x6e931
int32_t function_6e860(int32_t a1, int32_t a2, int32_t a3) {
    g9 = a2;
    g7 = a1;
    g4 = a3;
    int128_t v1 = __asm_movaps(*(int128_t *)a2); // 0x6e86f
    int128_t v2 = __asm_movaps(*(int128_t *)g7); // 0x6e872
    int128_t v3 = __asm_movaps_1663(v1); // 0x6e875
    int128_t v4 = __asm_movaps(*(int128_t *)(g9 + 16)); // 0x6e879
    int128_t v5 = __asm_movaps(v2); // 0x6e87d
    int128_t v6 = __asm_movaps(v2); // 0x6e880
    int128_t v7 = __asm_movaps(*(int128_t *)(g7 + 16)); // 0x6e883
    int128_t v8 = __asm_movaps_1663(v4); // 0x6e887
    int128_t v9 = __asm_movaps(*(int128_t *)(g9 + 32)); // 0x6e88b
    int128_t v10 = __asm_shufps(v5, v2, 170); // 0x6e88f
    int128_t v11 = __asm_mulps(__asm_shufps(v6, v2, 0), v3); // 0x6e897
    int128_t v12 = __asm_movaps(v7); // 0x6e89b
    int128_t v13 = __asm_movaps_1663(v9); // 0x6e89e
    int128_t v14 = __asm_movaps(v2); // 0x6e8a2
    int128_t v15 = __asm_shufps(v12, v7, 170); // 0x6e8a5
    int128_t v16 = __asm_mulps(v10, v13); // 0x6e8a9
    int128_t v17 = __asm_shufps(v14, v2, 85); // 0x6e8ad
    int128_t v18 = __asm_andps(v2, g239); // 0x6e8b1
    int128_t v19 = __asm_mulps(v17, v8); // 0x6e8b8
    int128_t v20 = __asm_mulps(v15, v13); // 0x6e8bc
    int128_t v21 = __asm_movaps(*(int128_t *)(g7 + 32)); // 0x6e8c0
    int128_t v22 = __asm_addps(v19, v16); // 0x6e8c4
    int128_t v23 = __asm_movaps(v7); // 0x6e8c7
    int128_t v24 = __asm_movaps(v21); // 0x6e8ca
    int128_t v25 = __asm_mulps(__asm_shufps(v23, v7, 0), v3); // 0x6e8d1
    int128_t v26 = __asm_mulps(__asm_shufps(v24, v21, 170), v13); // 0x6e8d9
    int128_t v27 = __asm_addps(v11, v22); // 0x6e8dd
    int128_t v28 = __asm_movaps(v7); // 0x6e8e0
    int128_t v29 = __asm_mulps(__asm_shufps(v28, v7, 85), v8); // 0x6e8e7
    int128_t v30 = __asm_andps(v7, g239); // 0x6e8eb
    int128_t v31 = __asm_addps(v27, v18); // 0x6e8f2
    int128_t v32 = __asm_addps(v29, v20); // 0x6e8f5
    int128_t v33 = __asm_movaps(v21); // 0x6e8f8
    int128_t v34 = __asm_mulps(__asm_shufps(v33, v21, 85), v8); // 0x6e8ff
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v31);
    int128_t v35 = __asm_addps(v25, v32); // 0x6e906
    int128_t v36 = __asm_movaps(v21); // 0x6e909
    int128_t v37 = __asm_mulps(__asm_shufps(v36, v21, 0), v3); // 0x6e910
    int128_t v38 = __asm_andps(v21, g239); // 0x6e914
    int128_t v39 = __asm_addps(v34, v26); // 0x6e91b
    int128_t v40 = __asm_addps(v35, v30); // 0x6e91e
    int128_t v41 = __asm_addps(v37, v39); // 0x6e921
    *(int128_t *)(g4 + 16) = (int128_t)__asm_movaps_1663(v40);
    int32_t v42 = __asm_movaps_1663(__asm_addps(v41, v38)); // 0x6e92b
    int32_t result = g4; // 0x6e92b
    *(int128_t *)(result + 32) = (int128_t)v42;
    return result;
}

// Address range: 0x6e931 - 0x6e933
int32_t function_6e931(void) {
    int32_t result = function_6e940((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x6e931
    g4 = result;
    return result;
}

// Address range: 0x6e940 - 0x6ea11
int32_t function_6e940(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6e940
    g9 = a2;
    g7 = a1;
    g4 = a3;
    int128_t v1 = __asm_movups(*(int128_t *)a2); // 0x6e94f
    int128_t v2 = __asm_movups(*(int128_t *)g7); // 0x6e952
    int128_t v3 = __asm_movups(*(int128_t *)(g7 + 16)); // 0x6e955
    int128_t v4 = __asm_movups(*(int128_t *)(g7 + 32)); // 0x6e959
    int128_t v5 = __asm_movaps_1663(v1); // 0x6e95d
    int128_t v6 = __asm_movaps(v2); // 0x6e961
    int128_t v7 = __asm_movups(*(int128_t *)(g9 + 16)); // 0x6e964
    int128_t v8 = __asm_shufps(v6, v2, 170); // 0x6e968
    int128_t v9 = __asm_movaps(v2); // 0x6e96c
    int128_t v10 = __asm_mulps(__asm_shufps(v9, v2, 0), v5); // 0x6e973
    int128_t v11 = __asm_movaps(v3); // 0x6e977
    int128_t v12 = __asm_movaps_1663(v7); // 0x6e97a
    int128_t v13 = __asm_shufps(v11, v3, 170); // 0x6e97e
    int128_t v14 = __asm_movaps(v4); // 0x6e982
    int128_t v15 = __asm_movups(*(int128_t *)(g9 + 32)); // 0x6e985
    int128_t v16 = __asm_shufps(v14, v4, 170); // 0x6e989
    int128_t v17 = __asm_movaps_1663(v15); // 0x6e98d
    int128_t v18 = __asm_movaps(v2); // 0x6e991
    int128_t v19 = __asm_mulps(v8, v17); // 0x6e994
    int128_t v20 = __asm_shufps(v18, v2, 85); // 0x6e998
    int128_t v21 = __asm_andps(v2, g239); // 0x6e99c
    int128_t v22 = __asm_mulps(v20, v12); // 0x6e9a3
    int128_t v23 = __asm_mulps(v13, v17); // 0x6e9a7
    int128_t v24 = __asm_mulps(v16, v17); // 0x6e9ab
    int128_t v25 = __asm_addps(v22, v19); // 0x6e9af
    int128_t v26 = __asm_movaps(v3); // 0x6e9b2
    int128_t v27 = __asm_mulps(__asm_shufps(v26, v3, 0), v5); // 0x6e9b9
    int128_t v28 = __asm_addps(v10, v25); // 0x6e9bd
    int128_t v29 = __asm_movaps(v3); // 0x6e9c0
    int128_t v30 = __asm_mulps(__asm_shufps(v29, v3, 85), v12); // 0x6e9c7
    int128_t v31 = __asm_andps(v3, g239); // 0x6e9cb
    int128_t v32 = __asm_addps(v28, v21); // 0x6e9d2
    int128_t v33 = __asm_addps(v30, v23); // 0x6e9d5
    int128_t v34 = __asm_movaps(v4); // 0x6e9d8
    int128_t v35 = __asm_mulps(__asm_shufps(v34, v4, 85), v12); // 0x6e9df
    int128_t v36 = __asm_addps(v27, v33); // 0x6e9e3
    int128_t v37 = __asm_movaps(v4); // 0x6e9e6
    int128_t v38 = __asm_mulps(__asm_shufps(v37, v4, 0), v5); // 0x6e9ed
    int128_t v39 = __asm_andps(v4, g239); // 0x6e9f1
    int128_t v40 = __asm_addps(v35, v24); // 0x6e9f8
    __asm_movups_1664(*(int128_t *)g4, v32);
    int128_t v41 = __asm_addps(v36, v31); // 0x6e9fe
    int128_t v42 = __asm_addps(v38, v40); // 0x6ea01
    __asm_movups_1664(*(int128_t *)(g4 + 16), v41);
    int128_t v43 = __asm_addps(v42, v39); // 0x6ea08
    __asm_movups_1664(*(int128_t *)(g4 + 32), v43);
    return g4;
}

// Address range: 0x6ea11 - 0x6eb72
int32_t function_6ea11(int64_t a1, int64_t a2, int32_t a3, int32_t a4) {
    int128_t v1 = __asm_movsd_1649(a1); // 0x6ea26
    int128_t v2 = __asm_movsd_1649(a2); // 0x6ea2b
    __asm_ucomisd_1652(v1, 0);
    int32_t v3; // ebp
    int32_t * v4;
    if (&v3 >= (int32_t *)32) {
        int128_t v5 = __asm_movapd(v1); // 0x6eae8
        int32_t v6 = __asm_movsd(__asm_divsd(v5, v2)); // 0x6eaf0
        int32_t v7 = (int32_t)v4 & (int32_t)&g854 & 0xffff; // 0x6eaff
        g4 = v7 | (int32_t)&g93;
        int128_t v8 = __asm_movsd_1649((int64_t)(float64_t)llvm_round_f80((float80_t)(float64_t)(int64_t)v6)); // 0x6eb18
        int128_t v9 = __asm_mulsd(v2, v8); // 0x6eb1d
        g4 = __asm_cvttsd2si(v8);
        int128_t v10 = __asm_subsd(v1, v9); // 0x6eb25
        int128_t v11 = __asm_cvtpd2ps(__asm_unpcklpd(v10, v10)); // 0x6eb2d
        int128_t v12 = __asm_unpcklps(v11, v11); // 0x6eb31
        int32_t v13 = __asm_movsd(__asm_cvtps2pd(v12)); // 0x6eb37
        g9 = (v7 | (int32_t)&g93 & 0xffff) & (int32_t)&g854 & 0xffff | (int32_t)&g93;
        g7 = a3;
        g9 = __asm_cvttsd2si_1665((int64_t)(float64_t)llvm_round_f80((float80_t)(float64_t)(int64_t)v13));
        *(int32_t *)g7 = g4;
        g4 = a4;
        *(int32_t *)a4 = g9;
        return g4;
    }
    int128_t v14 = __asm_xorpd(v1, __asm_movsd_1649(-0x8000000000000000)); // 0x6ea46
    int128_t v15 = __asm_movapd(v14); // 0x6ea4a
    int32_t v16 = __asm_movsd(__asm_divsd(v15, v2)); // 0x6ea52
    int32_t v17 = (int32_t)v4 & (int32_t)&g854 & 0xffff; // 0x6ea61
    g4 = v17 | (int32_t)&g93;
    int128_t v18 = __asm_movsd_1649((int64_t)(float64_t)llvm_round_f80((float80_t)(float64_t)(int64_t)v16)); // 0x6ea7a
    g4 = __asm_cvttsd2si(v18);
    g4 = -g4;
    int128_t v19 = __asm_subsd(v14, __asm_mulsd(v18, v2)); // 0x6ea89
    int128_t v20 = __asm_cvtpd2ps(__asm_unpcklpd(v19, v19)); // 0x6ea91
    int128_t v21 = __asm_unpcklps(v20, v20); // 0x6ea95
    int32_t v22 = __asm_movsd(__asm_cvtps2pd(v21)); // 0x6ea9b
    g9 = (v17 | (int32_t)&g93 & 0xffff) & (int32_t)&g854 & 0xffff | (int32_t)&g93;
    int32_t v23 = __asm_cvttsd2si_1665((int64_t)(float64_t)llvm_round_f80((float80_t)(float64_t)(int64_t)v22)); // 0x6eac5
    g9 = v23;
    int32_t v24; // 0x6eadc
    if (v23 == 0) {
        // 0x6ea3e
        v24 = g4;
    } else {
        int32_t v25 = g4 - 1; // 0x6ead2
        g4 = v25;
        int32_t v26 = __asm_cvttsd2si(v2) - g9; // 0x6ead5
        g7 = v26;
        g9 = v26;
        v24 = v25;
    }
    // 0x6ead9
    g7 = a3;
    *(int32_t *)a3 = v24;
    g4 = a4;
    *(int32_t *)a4 = g9;
    return g4;
}

// Address range: 0x6eb80 - 0x6ebc7
int32_t function_6eb80(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x6eb83
    g7 = a2;
    g6 = a1;
    int32_t v2; // 0x6eb98
    int32_t result; // 0x6ebc2
    while (true) {
        int32_t v3; // 0x6ebb418
        int32_t v4; // 0x6ebc017
        if (a1 > a2) {
            v2 = a1;
            int32_t v5 = a2; // 0x6eb9c
            while (true) {
                if (v5 == 0) {
                    // break (via goto) -> 0x6ebc2
                    goto lab_0x6ebc2;
                }
                // 0x6eb98
                g6 = v5;
                int64_t v6 = 0x100000000 * (int64_t)(v2 >> 31) | (int64_t)v2; // 0x6eba1
                int64_t v7 = v5; // 0x6eba1
                g4 = v6 / v7;
                int32_t v8 = v6 % v7; // 0x6eba1
                g9 = v8;
                g7 = v8;
                if (v5 <= v8) {
                    v3 = v5;
                    v4 = v8;
                    // break -> 0x6ebad
                    break;
                }
                v2 = v5;
                v5 = v8;
            }
        } else {
            if (a1 == 0) {
                // 0x6ebc0
                g6 = a2;
                result = a2;
                goto lab_0x6ebc2_2;
            }
            v3 = a1;
            v4 = a2;
        }
        int64_t v9 = 0x100000000 * (int64_t)(v4 >> 31) | (int64_t)v4; // 0x6ebb4
        int64_t v10 = v3; // 0x6ebb4
        g4 = v9 / v10;
        int32_t v11 = v9 % v10; // 0x6ebb4
        g9 = v11;
        g7 = v11;
        a2 = v11;
        a1 = v3;
    }
  lab_0x6ebc2:
    result = v2;
  lab_0x6ebc2_2:
    // 0x6ebc2
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x6ebd0 - 0x6ebee
int32_t function_6ebd0(int32_t a1) {
    // 0x6ebd0
    g4 = a1;
    uint32_t v1 = *(int32_t *)a1; // 0x6ebd7
    int32_t v2 = v1 & 0x7f800000; // 0x6ebe2
    int32_t v3 = (int32_t)(v2 == 0) | v2; // 0x6ebe8
    g9 = v3;
    int32_t result = ((int32_t)(v1 % 0x800000 != 0) | a1 & 0x7f800000) & v3; // 0x6ebeb
    g4 = result;
    return result;
}

// Address range: 0x6ebf0 - 0x6ec1c
int32_t function_6ebf0(int32_t a1) {
    // 0x6ebf0
    g7 = 0;
    bool v1 = false; // cf
    bool v2 = true; // zf
    g4 = 0;
    int32_t v3 = g10; // 0x6ebf7
    int128_t v4; // xmm0
    int128_t v5 = __asm_xorps(v4, v4); // 0x6ebf8
    g9 = a1;
    int32_t v6 = g6; // 0x6ebfe
    g6 = 1;
    int32_t v7 = g7; // 0x6ec04
    while (true) {
        // 0x6ec04
        __asm_ucomiss(v5, *(int32_t *)(4 * v7 + a1));
        int32_t v8; // 0x6ec10
        if (v1 || v2) {
            // 0x6ec04
            v8 = g7;
        } else {
            int32_t v9 = g6; // 0x6ec0a
            g10 = v9;
            int32_t v10 = g7; // 0x6ec0c
            uint32_t v11 = v10 & (int32_t)&g862 & 31; // 0x6ec0c
            int32_t v12; // 0x6ec0c
            if (v11 != 0) {
                // bb
                v12 = v9 << v11;
                g10 = v12;
            } else {
                v12 = v9;
            }
            // bb238
            g4 |= v12;
            v8 = v10;
        }
        int32_t v13 = v8 + 1; // 0x6ec10
        g7 = v13;
        v1 = v13 < 3;
        v2 = v8 == 2;
        if (v8 == 2) {
            // break -> 0x6ec18
            break;
        }
        // 0x6ec10
        v7 = v13;
        a1 = g9;
    }
    // 0x6ec18
    g6 = v6;
    g10 = v3;
    return g4;
}

// Address range: 0x6ec20 - 0x6eea9
int32_t function_6ec20(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // bp-8
    g876 = a3;
    g4 = a3;
    g9 = a1;
    g7 = a2;
    unsigned char v2 = *(char *)(a3 + 16); // 0x6ec2d
    int32_t v3 = v2; // 0x6ec2d
    g6 = v3;
    bool v4 = v2 < 2; // cf
    if (v2 <= 2) {
        // 0x6ec36
        g6 = v3 & (int32_t)&g862;
        int128_t v5 = __asm_movss(*(int32_t *)(a3 + 12)); // 0x6ec39
        g4 = 1;
        int128_t v6 = __asm_movss(*(int32_t *)(4 * g6 + g9)); // 0x6ec43
        __asm_ucomiss_1648(v6, v5);
        int32_t result; // 0x6ec5a
        if (!v4) {
            // 0x6ec36
            result = g4;
        } else {
            // 0x6ec4d
            __asm_ucomiss(v5, *(int32_t *)(4 * g6 + g7));
            int32_t v7 = 2 - (int32_t)v4; // 0x6ec55
            g4 = v7;
            result = v7;
        }
        // 0x6ec58
        g6 = v1;
        return result;
    }
    // 0x6ec60
    int128_t v8; // xmm0
    int128_t v9 = v8; // 0x6ec64
    __asm_movaps(__asm_xorps(v9, v9));
    int32_t v10 = g4; // 0x6ec90
    g6 = (int32_t)*(char *)(v10 + 17);
    v8 = __asm_movss(*(int32_t *)v10);
    int128_t v11 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x6ec98
    int128_t v12 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6ec9d
    int128_t v13 = __asm_movaps(v8); // xmm1
    switch (g876) {
        case 0: {
            int128_t v14 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6ee30
            int128_t v15 = __asm_mulss_1654(v13, *(int32_t *)g7); // 0x6ee35
            int128_t v16 = __asm_mulss(v14, v11); // 0x6ee39
            int128_t v17 = __asm_mulss_1654(v8, *(int32_t *)g9); // 0x6ee3d
            int128_t v18 = __asm_mulss_1654(v11, *(int32_t *)(g9 + 4)); // 0x6ee41
            int128_t v19 = __asm_addss_1661(v15, v16); // 0x6ee46
            int128_t v20 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v12); // 0x6ee4f
            int128_t v21 = __asm_addss_1661(v17, v18); // 0x6ee53
            int128_t v22 = __asm_mulss_1654(v12, *(int32_t *)(g9 + 8)); // 0x6ee57
            v13 = __asm_addss_1661(v19, v20);
            v8 = __asm_addss_1661(v21, v22);
            // break -> 0x6ec6c
            break;
        }
        case 1: {
            int128_t v23 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6edf0
            int128_t v24 = __asm_mulss_1654(v13, *(int32_t *)g9); // 0x6edf5
            int128_t v25 = __asm_mulss(v23, v11); // 0x6edf9
            int128_t v26 = __asm_mulss_1654(v8, *(int32_t *)g7); // 0x6edfd
            int128_t v27 = __asm_mulss_1654(v11, *(int32_t *)(g9 + 4)); // 0x6ee01
            int128_t v28 = __asm_addss_1661(v24, v25); // 0x6ee06
            int128_t v29 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v12); // 0x6ee0f
            int128_t v30 = __asm_addss_1661(v26, v27); // 0x6ee13
            int128_t v31 = __asm_mulss_1654(v12, *(int32_t *)(g9 + 8)); // 0x6ee17
            v13 = __asm_addss_1661(v28, v29);
            v8 = __asm_addss_1661(v30, v31);
            // break -> 0x6ec6c
            break;
        }
        case 2: {
            int128_t v32 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6edb0
            int128_t v33 = __asm_mulss_1654(v13, *(int32_t *)g7); // 0x6edb5
            int128_t v34 = __asm_mulss(v32, v11); // 0x6edb9
            int128_t v35 = __asm_mulss_1654(v8, *(int32_t *)g9); // 0x6edbd
            int128_t v36 = __asm_mulss_1654(v11, *(int32_t *)(g7 + 4)); // 0x6edc1
            int128_t v37 = __asm_addss_1661(v33, v34); // 0x6edc6
            int128_t v38 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v12); // 0x6edcf
            int128_t v39 = __asm_addss_1661(v35, v36); // 0x6edd3
            int128_t v40 = __asm_mulss_1654(v12, *(int32_t *)(g9 + 8)); // 0x6edd7
            v13 = __asm_addss_1661(v37, v38);
            v8 = __asm_addss_1661(v39, v40);
            // break -> 0x6ec6c
            break;
        }
        case 3: {
            int128_t v41 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6ed70
            int128_t v42 = __asm_mulss_1654(v13, *(int32_t *)g9); // 0x6ed75
            int128_t v43 = __asm_mulss(v41, v11); // 0x6ed79
            int128_t v44 = __asm_mulss_1654(v8, *(int32_t *)g7); // 0x6ed7d
            int128_t v45 = __asm_mulss_1654(v11, *(int32_t *)(g7 + 4)); // 0x6ed81
            int128_t v46 = __asm_addss_1661(v42, v43); // 0x6ed86
            int128_t v47 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v12); // 0x6ed8f
            int128_t v48 = __asm_addss_1661(v44, v45); // 0x6ed93
            int128_t v49 = __asm_mulss_1654(v12, *(int32_t *)(g9 + 8)); // 0x6ed97
            v13 = __asm_addss_1661(v46, v47);
            v8 = __asm_addss_1661(v48, v49);
            // break -> 0x6ec6c
            break;
        }
        case 4: {
            int128_t v50 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6ed30
            int128_t v51 = __asm_mulss_1654(v13, *(int32_t *)g7); // 0x6ed35
            int128_t v52 = __asm_mulss(v50, v11); // 0x6ed39
            int128_t v53 = __asm_mulss_1654(v8, *(int32_t *)g9); // 0x6ed3d
            int128_t v54 = __asm_mulss_1654(v11, *(int32_t *)(g9 + 4)); // 0x6ed41
            int128_t v55 = __asm_addss_1661(v51, v52); // 0x6ed46
            int128_t v56 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v12); // 0x6ed4f
            int128_t v57 = __asm_addss_1661(v53, v54); // 0x6ed53
            int128_t v58 = __asm_mulss_1654(v12, *(int32_t *)(g7 + 8)); // 0x6ed57
            v13 = __asm_addss_1661(v55, v56);
            v8 = __asm_addss_1661(v57, v58);
            // break -> 0x6ec6c
            break;
        }
        case 5: {
            int128_t v59 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x6ecf0
            int128_t v60 = __asm_mulss_1654(v13, *(int32_t *)g9); // 0x6ecf5
            int128_t v61 = __asm_mulss(v59, v11); // 0x6ecf9
            int128_t v62 = __asm_mulss_1654(v8, *(int32_t *)g7); // 0x6ecfd
            int128_t v63 = __asm_mulss_1654(v11, *(int32_t *)(g9 + 4)); // 0x6ed01
            int128_t v64 = __asm_addss_1661(v60, v61); // 0x6ed06
            int128_t v65 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v12); // 0x6ed0f
            int128_t v66 = __asm_addss_1661(v62, v63); // 0x6ed13
            int128_t v67 = __asm_mulss_1654(v12, *(int32_t *)(g7 + 8)); // 0x6ed17
            v13 = __asm_addss_1661(v64, v65);
            v8 = __asm_addss_1661(v66, v67);
            // break -> 0x6ec6c
            break;
        }
        case 6: {
            int128_t v68 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6ecb0
            int128_t v69 = __asm_mulss_1654(v13, *(int32_t *)g7); // 0x6ecb5
            int128_t v70 = __asm_mulss(v68, v11); // 0x6ecb9
            int128_t v71 = __asm_mulss_1654(v8, *(int32_t *)g9); // 0x6ecbd
            int128_t v72 = __asm_mulss_1654(v11, *(int32_t *)(g7 + 4)); // 0x6ecc1
            int128_t v73 = __asm_addss_1661(v69, v70); // 0x6ecc6
            int128_t v74 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v12); // 0x6eccf
            int128_t v75 = __asm_addss_1661(v71, v72); // 0x6ecd3
            int128_t v76 = __asm_mulss_1654(v12, *(int32_t *)(g7 + 8)); // 0x6ecd7
            v13 = __asm_addss_1661(v73, v74);
            v8 = __asm_addss_1661(v75, v76);
            // break -> 0x6ec6c
            break;
        }
        case 7: {
            int128_t v77 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x6ee70
            int128_t v78 = __asm_mulss_1654(v13, *(int32_t *)g9); // 0x6ee75
            int128_t v79 = __asm_mulss(v77, v11); // 0x6ee79
            int128_t v80 = __asm_mulss_1654(v8, *(int32_t *)g7); // 0x6ee7d
            int128_t v81 = __asm_mulss_1654(v11, *(int32_t *)(g7 + 4)); // 0x6ee81
            int128_t v82 = __asm_addss_1661(v78, v79); // 0x6ee86
            int128_t v83 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v12); // 0x6ee8f
            int128_t v84 = __asm_addss_1661(v80, v81); // 0x6ee93
            int128_t v85 = __asm_mulss_1654(v12, *(int32_t *)(g7 + 8)); // 0x6ee97
            v13 = __asm_addss_1661(v82, v83);
            v8 = __asm_addss_1661(v84, v85);
            // break -> 0x6ec6c
            break;
        }
    }
    int128_t v86 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x6ec6c
    g4 = 0;
    g6 = v1;
    __asm_ucomiss_1648(v13, v86);
    int32_t v87 = g4 & -256; // 0x6ec77
    g4 = v87 | 1;
    g9 = v87 | 3;
    __asm_ucomiss_1648(v86, v8);
    int32_t result2 = g9; // 0x6ec83
    g4 = result2;
    return result2;
}

// Address range: 0x6eeb0 - 0x6ef58
int32_t function_6eeb0(int32_t a1, int32_t a2) {
    g9 = a1;
    int128_t v1 = __asm_movss(0x3c8efa35); // 0x6eeb9
    g4 = a2;
    int128_t v2 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 4)), v1); // 0x6eec9
    int128_t v3 = __asm_cvtps2pd(__asm_unpcklps(v2, v2)); // 0x6eed0
    float80_t v4 = (int64_t)__asm_movsd(v3); // 0x6eed8
    float80_t v5; // 0x6eedb
    float80_t v6; // 0x6eedb
    if (fabsl(v4) < 9223372036854775808.0L) {
        // bb
        v5 = sinl(v4);
        v6 = cosl(v4);
    } else {
        // 0x6eeb0
        v5 = v4;
        float80_t v7; // st6
        v6 = v7;
    }
    int128_t v8 = __asm_mulss_1654(v1, *(int32_t *)g9); // 0x6eedf
    int128_t v9 = __asm_cvtps2pd(__asm_unpcklps(v8, v8)); // 0x6eee9
    float80_t v10 = (int64_t)__asm_movsd(v9); // 0x6eef1
    float80_t v11; // 0x6eef4
    float80_t v12; // 0x6eef4
    if (fabsl(v10) < 9223372036854775808.0L) {
        // bb272
        v11 = sinl(v10);
        v12 = cosl(v10);
    } else {
        // ._crit_edge
        v11 = v10;
        float80_t v13; // st5
        v12 = v13;
    }
    int128_t v14 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)v12); // 0x6eefe
    int128_t v15 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)v6); // 0x6ef06
    int128_t v16 = __asm_movapd(v14); // 0x6ef0b
    int128_t v17 = __asm_movapd(v15); // 0x6ef0f
    int128_t v18 = __asm_cvtpd2ps(__asm_unpcklpd(v16, v16)); // 0x6ef17
    int128_t v19 = __asm_cvtpd2ps(__asm_unpcklpd(v17, v17)); // 0x6ef1f
    *(int32_t *)g4 = __asm_movss_1646(__asm_mulss(v19, v18));
    int128_t v20 = __asm_movsd_1649((int64_t)(float64_t)v5); // 0x6ef2b
    int128_t v21 = __asm_mulss(__asm_cvtpd2ps(v20), v18); // 0x6ef34
    int128_t v22 = __asm_movss((int32_t)g233); // 0x6ef38
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v21);
    int128_t v23 = __asm_cvtpd2ps(__asm_movsd_1649((int64_t)(float64_t)v11)); // 0x6ef4a
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_xorps(v23, v22));
    return g4;
}

// Address range: 0x6ef60 - 0x6f0ed
int32_t function_6ef60(int32_t a1, int32_t * a2, int32_t * a3, int32_t * a4) {
    int32_t result = (int32_t)a4;
    int32_t v1 = (int32_t)a3;
    int32_t v2 = (int32_t)a2;
    int32_t v3 = g6; // 0x6ef63
    g6 = a1;
    int128_t v4 = __asm_movss(0x3c8efa35); // 0x6ef6a
    g7 = v2;
    g9 = v1;
    g4 = result;
    int128_t v5 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 4)), v4); // 0x6ef80
    int128_t v6 = __asm_unpcklps(v5, v5); // 0x6ef84
    int3_t v7 = g13; // 0x6ef8f
    float80_t v8 = (int64_t)__asm_movsd(__asm_cvtps2pd(v6)); // 0x6ef8f
    int3_t v9; // 0x6ef96
    float80_t v10; // 0x6ef92
    float80_t v11; // 0x6ef92
    if (fabsl(v8) < 9223372036854775808.0L) {
        // bb
        v10 = sinl(v8);
        v11 = cosl(v8);
        v9 = v7 - 2;
    } else {
        // 0x6ef60
        v9 = v7 - 1;
        v10 = v8;
        v11 = g867;
    }
    int128_t v12 = __asm_movsd_1649((int64_t)(float64_t)v10); // 0x6ef9c
    int128_t v13 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v11); // 0x6efa1
    int128_t v14 = __asm_cvtpd2ps(v12); // 0x6efa6
    int128_t v15 = __asm_movapd(v13); // 0x6efaa
    int128_t v16 = __asm_movss(*(int32_t *)g6); // 0x6efae
    int128_t v17 = __asm_cvtpd2ps(__asm_unpcklpd(v15, v15)); // 0x6efb6
    int128_t v18 = __asm_mulss(v16, v4); // 0x6efba
    int128_t v19 = __asm_unpcklps(v18, v18); // 0x6efbe
    int3_t v20 = v9 + 2; // 0x6efc9
    float80_t v21 = (int64_t)__asm_movsd(__asm_cvtps2pd(v19)); // 0x6efc9
    int3_t v22; // 0x6efd0
    float80_t v23; // 0x6efcc
    float80_t v24; // 0x6efcc
    if (fabsl(v21) < 9223372036854775808.0L) {
        // bb119
        v23 = sinl(v21);
        v24 = cosl(v21);
        v22 = v20 - 2;
    } else {
        // ._crit_edge
        v22 = v20 - 1;
        v23 = v21;
        v24 = v10;
    }
    int128_t v25 = __asm_movsd_1649((int64_t)(float64_t)v23); // 0x6efd6
    int128_t v26 = __asm_mulss_1654(v4, *(int32_t *)(g6 + 8)); // 0x6efdb
    int128_t v27 = __asm_cvtpd2ps(v25); // 0x6efe0
    int128_t v28 = __asm_movapd(__asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v24)); // 0x6efe9
    int128_t v29 = __asm_unpcklps(v26, v26); // 0x6efed
    float80_t v30 = (int64_t)__asm_movsd(__asm_cvtps2pd(v29)); // 0x6eff8
    int3_t v31 = v22 + 1; // fpu_stat_TOP
    int128_t v32 = __asm_cvtpd2ps(__asm_unpcklpd(v28, v28)); // 0x6efff
    int3_t v33; // 0x6f007
    float80_t v34; // 0x6f003
    float80_t v35; // 0x6f003
    if (fabsl(v30) < 9223372036854775808.0L) {
        // bb122
        v34 = sinl(v30);
        v35 = cosl(v30);
        v33 = v31 - 1;
    } else {
        // ._crit_edge8
        v33 = v31;
        v34 = v30;
        v35 = v23;
    }
    // bb123
    g13 = v33 + 2;
    int128_t v36 = __asm_movsd_1649((int64_t)(float64_t)v34); // 0x6f00f
    int128_t v37 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v35); // 0x6f014
    int32_t v38 = __asm_movss_1646(__asm_cvtpd2ps(v36)); // 0x6f01d
    int128_t v39 = __asm_movapd(v37); // 0x6f022
    int128_t v40 = __asm_cvtpd2ps(__asm_unpcklpd(v39, v39)); // 0x6f02a
    if (a2 != NULL) {
        int128_t v41 = __asm_movaps(v17); // 0x6f030
        *a2 = __asm_movss_1646(__asm_mulss(v41, v32));
        int128_t v42 = __asm_movaps(v14); // 0x6f03b
        *(int32_t *)(v2 + 4) = __asm_movss_1646(__asm_mulss(v42, v32));
        int128_t v43 = __asm_movss((int32_t)g233); // 0x6f047
        *(int32_t *)(v2 + 8) = __asm_movss_1646(__asm_xorps(v43, v27));
    }
    // 0x6f057
    if (a3 != NULL) {
        int128_t v44 = __asm_movss(v38); // 0x6f05b
        int128_t v45 = __asm_movss((int32_t)g233); // 0x6f060
        int128_t v46 = __asm_mulss(__asm_movaps(v14), v40); // 0x6f06b
        int128_t v47 = __asm_xorps(v44, v45); // 0x6f06f
        int32_t v48 = __asm_movss_1646(v47); // 0x6f072
        int128_t v49 = __asm_mulss(v47, v27); // 0x6f077
        int128_t v50 = __asm_mulss(__asm_movaps(v49), v17); // 0x6f07e
        int128_t v51 = __asm_mulss(v49, v14); // 0x6f082
        *a3 = __asm_movss_1646(__asm_addss_1661(v50, v46));
        int128_t v52 = __asm_movaps(v40); // 0x6f08e
        int128_t v53 = __asm_subss(v51, __asm_mulss(v52, v17)); // 0x6f095
        int128_t v54 = __asm_mulss(__asm_movss(v48), v32); // 0x6f09e
        *(int32_t *)(v1 + 4) = __asm_movss_1646(v53);
        *(int32_t *)(v1 + 8) = __asm_movss_1646(v54);
    }
    // 0x6f0ac
    if (a4 != NULL) {
        int128_t v55 = __asm_mulss(v27, v40); // 0x6f0b0
        int128_t v56 = __asm_movss(v38); // 0x6f0b4
        int128_t v57 = __asm_mulss(v40, v32); // 0x6f0b9
        int128_t v58 = __asm_mulss(v56, v14); // 0x6f0bd
        int128_t v59 = __asm_mulss(v14, v55); // 0x6f0c1
        int128_t v60 = __asm_mulss(__asm_movaps(v55), v17); // 0x6f0c8
        *(int32_t *)(result + 8) = __asm_movss_1646(v57);
        int128_t v61 = __asm_mulss_1654(v17, v38); // 0x6f0d1
        int128_t v62 = __asm_addss_1661(v60, v58); // 0x6f0d6
        int128_t v63 = __asm_subss(v59, v61); // 0x6f0da
        *a4 = __asm_movss_1646(v62);
        *(int32_t *)(result + 4) = __asm_movss_1646(v63);
    }
    // 0x6f0e7
    g6 = v3;
    return result;
}

// Address range: 0x6f0f0 - 0x6f269
int32_t function_6f0f0(int32_t a1, int32_t a2, int32_t a3, int32_t result) {
    int32_t v1 = g6; // 0x6f0f3
    g6 = a1;
    int128_t v2 = __asm_movss(0x3c8efa35); // 0x6f0fa
    g7 = a2;
    g9 = a3;
    g4 = result;
    int128_t v3 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 4)), v2); // 0x6f110
    int128_t v4 = __asm_unpcklps(v3, v3); // 0x6f114
    float80_t v5 = (int64_t)__asm_movsd(__asm_cvtps2pd(v4)); // 0x6f11f
    float80_t v6; // 0x6f122
    float80_t v7; // 0x6f122
    if (fabsl(v5) < 9223372036854775808.0L) {
        // bb
        v6 = sinl(v5);
        v7 = cosl(v5);
    } else {
        // 0x6f0f0
        v6 = v5;
        float80_t v8; // st6
        v7 = v8;
    }
    int128_t v9 = __asm_movsd_1649((int64_t)(float64_t)v6); // 0x6f12c
    int128_t v10 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v7); // 0x6f131
    int128_t v11 = __asm_cvtpd2ps(v9); // 0x6f136
    int128_t v12 = __asm_movapd(v10); // 0x6f13a
    int128_t v13 = __asm_movss(*(int32_t *)g6); // 0x6f13e
    int128_t v14 = __asm_cvtpd2ps(__asm_unpcklpd(v12, v12)); // 0x6f146
    int128_t v15 = __asm_mulss(v13, v2); // 0x6f14a
    int128_t v16 = __asm_unpcklps(v15, v15); // 0x6f14e
    float80_t v17 = (int64_t)__asm_movsd(__asm_cvtps2pd(v16)); // 0x6f159
    float80_t v18; // 0x6f15c
    float80_t v19; // 0x6f15c
    if (fabsl(v17) < 9223372036854775808.0L) {
        // bb345
        v18 = sinl(v17);
        v19 = cosl(v17);
    } else {
        // ._crit_edge
        v18 = v17;
        v19 = v6;
    }
    int128_t v20 = __asm_movsd_1649((int64_t)(float64_t)v18); // 0x6f166
    int128_t v21 = __asm_mulss_1654(v2, *(int32_t *)(g6 + 8)); // 0x6f16b
    int128_t v22 = __asm_cvtpd2ps(v20); // 0x6f170
    int128_t v23 = __asm_movapd(__asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v19)); // 0x6f179
    int128_t v24 = __asm_unpcklps(v21, v21); // 0x6f17d
    float80_t v25 = (int64_t)__asm_movsd(__asm_cvtps2pd(v24)); // 0x6f188
    int128_t v26 = __asm_cvtpd2ps(__asm_unpcklpd(v23, v23)); // 0x6f18f
    float80_t v27; // 0x6f193
    float80_t v28; // 0x6f193
    if (fabsl(v25) < 9223372036854775808.0L) {
        // bb348
        v27 = sinl(v25);
        v28 = cosl(v25);
    } else {
        // ._crit_edge8
        v27 = v25;
        v28 = v18;
    }
    int128_t v29 = __asm_movsd_1649((int64_t)(float64_t)v27); // 0x6f19f
    int128_t v30 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v28); // 0x6f1a4
    int128_t v31 = __asm_cvtpd2ps(v29); // 0x6f1a9
    int128_t v32 = __asm_movapd(v30); // 0x6f1ad
    int128_t v33 = __asm_cvtpd2ps(__asm_unpcklpd(v32, v32)); // 0x6f1b5
    if (a2 != 0) {
        int128_t v34 = __asm_movaps(v14); // 0x6f1bb
        int128_t v35 = __asm_movaps(v11); // 0x6f1be
        int128_t v36 = __asm_mulss(v34, v26); // 0x6f1c1
        int128_t v37 = __asm_mulss(v35, v33); // 0x6f1c5
        *(int32_t *)a2 = __asm_movss_1646(v36);
        int128_t v38 = __asm_mulss(__asm_movaps(v22), v31); // 0x6f1d0
        int128_t v39 = __asm_subss(__asm_mulss(v38, v14), v37); // 0x6f1d8
        int128_t v40 = __asm_mulss(__asm_movaps(v11), v31); // 0x6f1df
        *(int32_t *)(a2 + 4) = __asm_movss_1646(v39);
        int128_t v41 = __asm_movaps(v22); // 0x6f1e8
        int128_t v42 = __asm_mulss(__asm_mulss(v41, v33), v14); // 0x6f1ef
        *(int32_t *)(a2 + 8) = __asm_movss_1646(__asm_addss_1661(v42, v40));
    }
    // 0x6f1fc
    if (a3 != 0) {
        int128_t v43 = __asm_movaps(v11); // 0x6f200
        int128_t v44 = __asm_movaps(v14); // 0x6f203
        int128_t v45 = __asm_mulss(v43, v26); // 0x6f206
        int128_t v46 = __asm_mulss(v44, v33); // 0x6f20a
        int128_t v47 = __asm_mulss(v14, v31); // 0x6f20e
        *(int32_t *)a3 = __asm_movss_1646(v45);
        int128_t v48 = __asm_movaps(v22); // 0x6f216
        int128_t v49 = __asm_mulss(__asm_mulss(v48, v31), v11); // 0x6f21d
        *(int32_t *)(a3 + 4) = __asm_movss_1646(__asm_addss_1661(v49, v46));
        int128_t v50 = __asm_movaps(v22); // 0x6f22a
        int128_t v51 = __asm_mulss(__asm_mulss(v50, v33), v11); // 0x6f231
        *(int32_t *)(a3 + 8) = __asm_movss_1646(__asm_subss(v51, v47));
    }
    // 0x6f23e
    if (result != 0) {
        int128_t v52 = __asm_mulss(v31, v26); // 0x6f242
        int128_t v53 = __asm_movss((int32_t)g233); // 0x6f246
        int128_t v54 = __asm_mulss(v33, v26); // 0x6f24e
        *(int32_t *)result = __asm_movss_1646(__asm_xorps(v22, v53));
        *(int32_t *)(result + 4) = __asm_movss_1646(v52);
        *(int32_t *)(result + 8) = __asm_movss_1646(v54);
    }
    // 0x6f263
    g6 = v1;
    return result;
}

// Address range: 0x6f29a - 0x6f29b
int32_t function_6f29a(void) {
    // 0x6f29a
    return g4;
}

// Address range: 0x6f29f - 0x6f2a3
int32_t function_6f29f(int32_t a1) {
    unsigned char v1 = *(char *)&g8; // 0x6f29f
    unsigned char v2 = (char)g7 % 32; // 0x6f29f
    if (v2 != 0) {
        // bb
        *(char *)g8 = v1 << 8 - v2 | v1 >> v2;
    }
    // bb228
    g9 = a1;
    return g4;
}

// Address range: 0x6f2a8 - 0x6f2ae
int32_t function_6f2a8(int32_t a1) {
    // 0x6f2a8
    *(char *)g8 = (char)g7 | *(char *)&g8;
    g9 = a1;
    return g4;
}

// Address range: 0x6f362 - 0x6f3b3
int32_t function_6f362(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6f362
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 56)); // 0x6f364
    float80_t v3; // st7
    *(float64_t *)(v1 - 80) = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)(v1 - 72)); // 0x6f36b
    int128_t v5 = __asm_movsd_1649(*(int64_t *)(v1 - 80)); // 0x6f370
    int128_t v6 = __asm_movss(*(int32_t *)(v1 - 24)); // 0x6f375
    int128_t v7 = __asm_mulsd(v5, v2); // 0x6f37a
    int128_t v8 = __asm_movss(*(int32_t *)(v1 - 40)); // 0x6f37e
    int128_t v9 = __asm_divsd(v7, v4); // 0x6f383
    int128_t v10 = __asm_cvtpd2ps(__asm_unpcklpd(v9, v9)); // 0x6f38b
    __asm_ucomiss_1648(v6, v10);
    bool v11; // cf
    int128_t v12; // 0x6f39c
    bool v13; // zf
    if (!v11 && !v13) {
        // 0x6f394
        v12 = __asm_addss(v10, 0x43b40000);
    } else {
        v12 = v10;
    }
    // 0x6f39c
    *(int32_t *)g6 = __asm_movss_1646(v12);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v8);
    *(int32_t *)(g6 + 8) = 0;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x6f3b8 - 0x6f3e9
int32_t function_6f3b8(void) {
    // 0x6f3b8
    bool v1; // zf
    if (!v1) {
        // bb
        g4 = function_6f29a();
    }
    int128_t v2 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x6f3be
    int128_t v3; // xmm1
    __asm_movaps(v3);
    int128_t v4 = __asm_movss(0x43870000); // 0x6f3c6
    int128_t v5 = __asm_cmpltss(v3, v2); // 0x6f3ce
    int128_t v6 = __asm_movaps(v5); // 0x6f3d3
    int128_t v7 = __asm_andps(v4, v5); // 0x6f3d6
    int128_t v8 = __asm_movss(0x42b40000); // 0x6f3d9
    __asm_orps(__asm_andnps(v6, v8), v7);
    return g4;
}

// Address range: 0x6f449 - 0x6f44c
int32_t function_6f449(void) {
    // 0x6f449
    return g4;
}

// Address range: 0x6f44c - 0x6f450
int32_t function_6f44c(int32_t a1) {
    // 0x6f44c
    g7 = a1;
    return g4;
}

// Address range: 0x6f4ff - 0x6f503
int32_t function_6f4ff(int32_t a1, int32_t a2) {
    // 0x6f4ff
    g7 = a1;
    return g4;
}

// Address range: 0x6f520 - 0x6f522
int32_t function_6f520(void) {
    // 0x6f520
    return g4;
}

// Address range: 0x6f52b - 0x6f54f
int32_t function_6f52b(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6f52b
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 24)); // 0x6f52d
    float80_t v3; // st7
    *(float32_t *)(v1 - 92) = (float32_t)v3;
    int128_t v4 = __asm_movss(*(int32_t *)(v1 - 92)); // 0x6f534
    *(int32_t *)(g10 + 8) = 0;
    *(int32_t *)g10 = __asm_movss_1646(__asm_mulss(v4, v2));
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x6f5ea - 0x6f5ee
int32_t function_6f5ea(int32_t a1, int32_t a2) {
    // 0x6f5ea
    return g4;
}

// Address range: 0x6f5fc - 0x6f618
int32_t function_6f5fc(int32_t a1, int32_t a2, int32_t a3) {
    // 0x6f5fc
    int32_t v1; // ebp
    float80_t v2; // st7
    *(float32_t *)(v1 - 92) = (float32_t)v2;
    int128_t v3 = __asm_movss(*(int32_t *)(v1 - 92)); // 0x6f5ff
    *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_mulss_1654(v3, 0x42652ee0));
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x6f620 - 0x6f69d
int32_t function_6f620(int32_t a1) {
    // 0x6f620
    g9 = a1;
    int32_t v1 = g6; // 0x6f629
    g6 = 48;
    int32_t v2 = g8; // 0x6f631
    g8 = a1;
    int32_t v3; // 0x6f688
    int32_t v4; // 0x6f686
    if (a1 % 2 != 0) {
        // 0x6f680
        g8 = a1 + 1;
        *(char *)a1 = 0;
        v4 = g6 & -256 | 47;
        g6 = v4;
        v3 = g8;
        if ((v3 & 2) == 0) {
            goto lab_0x6f643;
        } else {
            goto lab_0x6f690;
        }
    } else {
        // 0x6f63b
        if ((a1 & 2) != 0) {
            v3 = a1;
            goto lab_0x6f690;
        } else {
            v3 = a1;
            v4 = 48;
            goto lab_0x6f643;
        }
    }
  lab_0x6f643:
    // 0x6f643
    g4 = 0;
    int32_t v5 = v4 / 4; // 0x6f647
    g7 = v5;
    __asm_rep_stosd_memset((char *)v3, 0, v5);
    bool v6; // df
    int32_t v7 = (v6 ? -4 : 4) * v5 + v3; // 0x6f64d
    g8 = v7;
    g7 = 0;
    int32_t v8; // 0x6f656
    if ((v4 & 2) != 0) {
        // 0x6f651
        *(int16_t *)v7 = 0;
        v8 = g8 + 2;
        g8 = v8;
    } else {
        v8 = v7;
    }
    int32_t v9 = g6 % 2; // 0x6f659
    g6 = v9;
    if (v9 != 0) {
        // 0x6f65e
        *(char *)v8 = 0;
    }
    // 0x6f661
    *(int32_t *)g9 = 0x3f800000;
    *(int32_t *)(g9 + 20) = 0x3f800000;
    *(int32_t *)(g9 + 40) = 0x3f800000;
    g6 = v1;
    g8 = v2;
    return 0;
  lab_0x6f690:
    // 0x6f690
    *(int16_t *)v3 = 0;
    int32_t v10 = g6 - 2; // 0x6f695
    g6 = v10;
    int32_t v11 = g8 + 2; // 0x6f698
    g8 = v11;
    v3 = v11;
    v4 = v10;
    goto lab_0x6f643;
}

// Address range: 0x6f6a0 - 0x6f6d6
int32_t function_6f6a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x6f6a0
    g4 = a4;
    g9 = a1;
    *(int32_t *)(a4 + 20) = a2;
    g7 = a3;
    *(int32_t *)g4 = g9;
    g9 = 0;
    *(int32_t *)(g4 + 4) = 0;
    *(int32_t *)(g4 + 8) = g9;
    *(int32_t *)(g4 + 12) = g9;
    *(int32_t *)(g4 + 16) = g9;
    *(int32_t *)(g4 + 24) = g9;
    *(int32_t *)(g4 + 28) = g9;
    *(int32_t *)(g4 + 32) = g9;
    *(int32_t *)(g4 + 36) = g9;
    *(int32_t *)(g4 + 40) = g7;
    *(int32_t *)(g4 + 44) = g9;
    return g4;
}

// Address range: 0x6f71d - 0x6f851
int32_t function_6f71d(int32_t a1, int32_t a2, int32_t a3) {
    int128_t v1 = __asm_movups(*(int128_t *)&g6); // 0x6f71f
    g4 = 0;
    int128_t v2 = __asm_movss(0x3f800000); // 0x6f724
    int128_t v3 = __asm_mulss(v1, v1); // 0x6f72c
    int32_t v4; // ebp
    int128_t v5 = __asm_movss(*(int32_t *)(v4 - 16)); // 0x6f730
    int128_t v6 = __asm_movaps(v2); // 0x6f735
    int128_t v7 = __asm_movss(*(int32_t *)(v4 - 12)); // 0x6f738
    int128_t v8 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6f73d
    int128_t v9 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6f742
    int128_t v10 = __asm_subss(v6, v3); // 0x6f747
    int128_t v11 = __asm_mulss(v8, v8); // 0x6f74b
    int128_t v12 = __asm_mulss(v9, v9); // 0x6f74f
    int128_t v13 = __asm_addss_1661(__asm_mulss(v10, v5), v3); // 0x6f757
    int128_t v14 = __asm_subss(__asm_movaps(v2), v5); // 0x6f75e
    *(int32_t *)g10 = __asm_movss_1646(v13);
    int128_t v15 = __asm_movss(g6); // 0x6f766
    int128_t v16 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6f76a
    int128_t v17 = __asm_mulss_1654(v15, *(int32_t *)(g6 + 4)); // 0x6f76f
    int128_t v18 = __asm_mulss(v16, v7); // 0x6f774
    int128_t v19 = __asm_mulss(v17, v14); // 0x6f778
    *(int32_t *)(g10 + 16) = __asm_movss_1646(__asm_addss_1661(v19, v18));
    int128_t v20 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6f785
    int128_t v21 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6f78a
    int128_t v22 = __asm_mulss_1654(v20, g6); // 0x6f78f
    int128_t v23 = __asm_mulss(v21, v7); // 0x6f793
    int128_t v24 = __asm_mulss(v22, v14); // 0x6f797
    *(int32_t *)(g10 + 32) = __asm_movss_1646(__asm_subss(v24, v23));
    int128_t v25 = __asm_movss(g6); // 0x6f7a4
    int128_t v26 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6f7a8
    int128_t v27 = __asm_mulss_1654(v25, *(int32_t *)(g6 + 4)); // 0x6f7ad
    int128_t v28 = __asm_mulss(v26, v7); // 0x6f7b2
    int128_t v29 = __asm_mulss(v27, v14); // 0x6f7b6
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_subss(v29, v28));
    int128_t v30 = __asm_movaps(v2); // 0x6f7c3
    int128_t v31 = __asm_subss(v2, v12); // 0x6f7c6
    int128_t v32 = __asm_subss(v30, v11); // 0x6f7ca
    int128_t v33 = __asm_mulss(v31, v5); // 0x6f7ce
    int128_t v34 = __asm_mulss(v32, v5); // 0x6f7d2
    int128_t v35 = __asm_addss_1661(v33, v12); // 0x6f7d6
    *(int32_t *)(g10 + 20) = __asm_movss_1646(__asm_addss_1661(v34, v11));
    int128_t v36 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6f7e3
    int128_t v37 = __asm_movss(g6); // 0x6f7e8
    int128_t v38 = __asm_mulss_1654(v36, *(int32_t *)(g6 + 8)); // 0x6f7ec
    int128_t v39 = __asm_mulss(v37, v7); // 0x6f7f1
    int128_t v40 = __asm_mulss(v38, v14); // 0x6f7f5
    *(int32_t *)(g10 + 36) = __asm_movss_1646(__asm_addss_1661(v40, v39));
    int128_t v41 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x6f802
    int128_t v42 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6f807
    int128_t v43 = __asm_mulss_1654(v41, g6); // 0x6f80c
    int128_t v44 = __asm_mulss(v42, v7); // 0x6f810
    int128_t v45 = __asm_mulss(v43, v14); // 0x6f814
    *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_addss_1661(v45, v44));
    int128_t v46 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x6f821
    int128_t v47 = __asm_mulss_1654(v7, g6); // 0x6f826
    int128_t v48 = __asm_mulss_1654(v46, *(int32_t *)(g6 + 8)); // 0x6f82a
    *(int32_t *)(g10 + 40) = __asm_movss_1646(v35);
    int128_t v49 = __asm_mulss(v48, v14); // 0x6f834
    *(int32_t *)(g10 + 24) = __asm_movss_1646(__asm_subss(v49, v47));
    *(int32_t *)(g10 + 12) = g4;
    *(int32_t *)(g10 + 28) = g4;
    *(int32_t *)(g10 + 44) = g4;
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x6f851 - 0x6f88c
int32_t function_6f851(int32_t a1) {
    // 0x6f851
    g4 = a1;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x6f866
    g9 = v1;
    int32_t * v2 = (int32_t *)(a1 + 16); // 0x6f869
    g7 = *v2;
    *v2 = v1;
    int32_t v3 = g4; // 0x6f86f
    g9 = *(int32_t *)(v3 + 8);
    *(int32_t *)(v3 + 4) = g7;
    int32_t * v4 = (int32_t *)(g4 + 32); // 0x6f875
    g7 = *v4;
    *v4 = g9;
    int32_t v5 = g4; // 0x6f87b
    g9 = *(int32_t *)(v5 + 24);
    *(int32_t *)(v5 + 8) = g7;
    int32_t * v6 = (int32_t *)(g4 + 36); // 0x6f881
    g7 = *v6;
    *v6 = g9;
    *(int32_t *)(g4 + 24) = g7;
    return g4;
}

// Address range: 0x6f890 - 0x6f8dc
int32_t function_6f890(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x6f893
    g9 = a1;
    g4 = a2;
    int32_t v2 = *(int32_t *)a1; // 0x6f89a
    g7 = v2;
    *(int32_t *)a2 = v2;
    int32_t v3 = *(int32_t *)(g9 + 16); // 0x6f89e
    g7 = v3;
    *(int32_t *)(g4 + 4) = v3;
    *(int32_t *)(g4 + 8) = *(int32_t *)(g9 + 32);
    g7 = 0;
    *(int32_t *)(g4 + 12) = 0;
    int32_t v4 = *(int32_t *)(g9 + 4); // 0x6f8af
    g6 = v4;
    *(int32_t *)(g4 + 16) = v4;
    int32_t v5 = *(int32_t *)(g9 + 20); // 0x6f8b5
    g6 = v5;
    *(int32_t *)(g4 + 20) = v5;
    g6 = *(int32_t *)(g9 + 36);
    *(int32_t *)(g4 + 28) = g7;
    *(int32_t *)(g4 + 24) = g6;
    int32_t v6 = *(int32_t *)(g9 + 8); // 0x6f8c4
    g6 = v6;
    *(int32_t *)(g4 + 32) = v6;
    int32_t v7 = *(int32_t *)(g9 + 24); // 0x6f8ca
    g6 = v7;
    *(int32_t *)(g4 + 36) = v7;
    g9 += 40;
    *(int32_t *)(g4 + 44) = g7;
    *(int32_t *)(g4 + 40) = g9;
    g6 = v1;
    return g4;
}

// Address range: 0x6f8e0 - 0x6fa53
int32_t function_6f8e0(int32_t a1, int32_t a2) {
    // 0x6f8e0
    g9 = a1;
    int128_t v1 = __asm_movss(0x3c8efa35); // 0x6f8e9
    g4 = a2;
    int128_t v2 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 4)), v1); // 0x6f8f9
    int128_t v3 = __asm_unpcklps(v2, v2); // 0x6f8fd
    float80_t v4 = (int64_t)__asm_movsd(__asm_cvtps2pd(v3)); // 0x6f908
    int3_t v5 = g13 - 1; // 0x6f908
    int3_t v6; // 0x6f90f
    float80_t v7; // 0x6f90b
    float80_t v8; // 0x6f90b
    if (fabsl(v4) < 9223372036854775808.0L) {
        // bb
        v7 = sinl(v4);
        v8 = cosl(v4);
        v6 = g13 - 2;
    } else {
        // 0x6f8e0
        v6 = v5;
        v7 = v4;
        v8 = g867;
    }
    int128_t v9 = __asm_movsd_1649((int64_t)(float64_t)v7); // 0x6f915
    int128_t v10 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v8); // 0x6f91a
    int128_t v11 = __asm_cvtpd2ps(v9); // 0x6f91f
    int128_t v12 = __asm_movapd(v10); // 0x6f923
    int128_t v13 = __asm_movss(*(int32_t *)g9); // 0x6f927
    int128_t v14 = __asm_cvtpd2ps(__asm_unpcklpd(v12, v12)); // 0x6f92f
    int128_t v15 = __asm_mulss(v13, v1); // 0x6f933
    int128_t v16 = __asm_unpcklps(v15, v15); // 0x6f937
    int3_t v17 = v6 + 2; // 0x6f942
    float80_t v18 = (int64_t)__asm_movsd(__asm_cvtps2pd(v16)); // 0x6f942
    int3_t v19; // 0x6f949
    float80_t v20; // 0x6f945
    float80_t v21; // 0x6f945
    if (fabsl(v18) < 9223372036854775808.0L) {
        // bb110
        v20 = sinl(v18);
        v21 = cosl(v18);
        v19 = v17 - 2;
    } else {
        // ._crit_edge
        v19 = v17 - 1;
        v20 = v18;
        v21 = v7;
    }
    int128_t v22 = __asm_movsd_1649((int64_t)(float64_t)v20); // 0x6f94f
    int128_t v23 = __asm_mulss_1654(v1, *(int32_t *)(g9 + 8)); // 0x6f954
    int32_t v24 = __asm_movss_1646(__asm_cvtpd2ps(v22)); // 0x6f95d
    int128_t v25 = __asm_movapd(__asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v21)); // 0x6f967
    int128_t v26 = __asm_unpcklps(v23, v23); // 0x6f96b
    float80_t v27 = (int64_t)__asm_movsd(__asm_cvtps2pd(v26)); // 0x6f976
    int3_t v28 = v19 + 1; // fpu_stat_TOP
    int128_t v29 = __asm_cvtpd2ps(__asm_unpcklpd(v25, v25)); // 0x6f97d
    int3_t v30; // 0x6f985
    float80_t v31; // 0x6f981
    float80_t v32; // 0x6f981
    if (fabsl(v27) < 9223372036854775808.0L) {
        // bb113
        v31 = sinl(v27);
        v32 = cosl(v27);
        v30 = v28 - 1;
    } else {
        // ._crit_edge8
        v30 = v28;
        v31 = v27;
        v32 = v20;
    }
    // bb114
    g867 = v31;
    int128_t v33 = __asm_movss(v24); // 0x6f988
    int128_t v34 = __asm_movaps(v11); // 0x6f98d
    g13 = v30 + 2;
    int128_t v35 = __asm_movsd_1649((int64_t)(float64_t)v31); // 0x6f993
    g9 = 0;
    int128_t v36 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v32); // 0x6f99a
    int128_t v37 = __asm_cvtpd2ps(v35); // 0x6f99f
    int128_t v38 = __asm_movapd(v36); // 0x6f9a3
    int128_t v39 = __asm_mulss(__asm_movaps(v14), v29); // 0x6f9aa
    int128_t v40 = __asm_cvtpd2ps(__asm_unpcklpd(v38, v38)); // 0x6f9b2
    int128_t v41 = __asm_mulss(v34, v40); // 0x6f9b6
    *(int32_t *)g4 = __asm_movss_1646(v39);
    int128_t v42 = __asm_movaps(v11); // 0x6f9be
    *(int32_t *)(g4 + 16) = __asm_movss_1646(__asm_mulss(v42, v29));
    int128_t v43 = __asm_xorps(__asm_movss((int32_t)g233), v33); // 0x6f9d2
    int128_t v44 = __asm_mulss(v33, v37); // 0x6f9d5
    *(int32_t *)(g4 + 32) = __asm_movss_1646(v43);
    int128_t v45 = __asm_mulss(__asm_movaps(v44), v14); // 0x6f9e1
    int128_t v46 = __asm_mulss(v44, v11); // 0x6f9e5
    int128_t v47 = __asm_subss(v45, v41); // 0x6f9e9
    int128_t v48 = __asm_mulss(__asm_movaps(v11), v37); // 0x6f9f0
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v47);
    int128_t v49 = __asm_movaps(v14); // 0x6f9f9
    int128_t v50 = __asm_addss_1661(v46, __asm_mulss(v49, v40)); // 0x6fa00
    int128_t v51 = __asm_mulss(__asm_movaps(v29), v37); // 0x6fa07
    *(int32_t *)(g4 + 20) = __asm_movss_1646(v50);
    int128_t v52 = __asm_movss(v24); // 0x6fa10
    *(int32_t *)(g4 + 12) = g9;
    int128_t v53 = __asm_mulss(v52, v40); // 0x6fa18
    *(int32_t *)(g4 + 36) = __asm_movss_1646(v51);
    int128_t v54 = __asm_mulss(v40, v29); // 0x6fa21
    *(int32_t *)(g4 + 28) = g9;
    *(int32_t *)(g4 + 44) = g9;
    int128_t v55 = __asm_mulss(v11, v53); // 0x6fa2b
    int128_t v56 = __asm_mulss(__asm_movaps(v53), v14); // 0x6fa32
    *(int32_t *)(g4 + 40) = __asm_movss_1646(v54);
    int128_t v57 = __asm_mulss(v14, v37); // 0x6fa3b
    int128_t v58 = __asm_addss_1661(v56, v48); // 0x6fa3f
    int128_t v59 = __asm_subss(v55, v57); // 0x6fa43
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v58);
    *(int32_t *)(g4 + 24) = __asm_movss_1646(v59);
    return g4;
}

// Address range: 0x6fa60 - 0x6fa9c
int32_t function_6fa60(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g6; // 0x6fa69
    int32_t v3 = g10; // 0x6fa6c
    g6 = a3;
    g10 = a2;
    g4 = function_6f8e0(a1, a3);
    int32_t v4 = *(int32_t *)g10; // 0x6fa81
    g4 = v4;
    *(int32_t *)(g6 + 12) = v4;
    int32_t v5 = *(int32_t *)(g10 + 4); // 0x6fa86
    g4 = v5;
    *(int32_t *)(g6 + 28) = v5;
    int32_t v6 = *(int32_t *)(g10 + 8); // 0x6fa8c
    g4 = v6;
    *(int32_t *)(g6 + 44) = v6;
    g6 = v2;
    g10 = v3;
    return g4;
}

// Address range: 0x6faa0 - 0x6faea
int32_t function_6faa0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = a1;
    int128_t v2 = __asm_movss(0x42652ee0); // 0x6faa9
    int128_t v3 = __asm_movss(*(int32_t *)g4); // 0x6fab1
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6fab5
    int128_t v5 = __asm_mulss(v3, v2); // 0x6faba
    int128_t v6 = __asm_mulss(v4, v2); // 0x6fabe
    int128_t v7 = __asm_mulss_1654(v2, *(int32_t *)(g4 + 4)); // 0x6fac2
    g4 = a2;
    __asm_movss_1646(v5);
    __asm_movss_1646(v6);
    int32_t v8 = __asm_movss_1646(v7); // bp-16
    int32_t v9 = g4; // 0x6fad9
    int32_t v10 = &v8; // 0x6fadd
    g4 = v10;
    int32_t result = function_6f8e0(v10, v9); // 0x6fae3
    g4 = result;
    return result;
}

// Address range: 0x6faf0 - 0x6fb2c
int32_t function_6faf0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    g4 = a1;
    int32_t v3 = g6; // 0x6faf9
    int32_t v4 = g10; // 0x6fafc
    g6 = a3;
    g10 = a2;
    g4 = function_6faa0(a1, a3, v3, v4, v1);
    int32_t v5 = *(int32_t *)g10; // 0x6fb11
    g4 = v5;
    *(int32_t *)(g6 + 12) = v5;
    int32_t v6 = *(int32_t *)(g10 + 4); // 0x6fb16
    g4 = v6;
    *(int32_t *)(g6 + 28) = v6;
    int32_t v7 = *(int32_t *)(g10 + 8); // 0x6fb1c
    g4 = v7;
    *(int32_t *)(g6 + 44) = v7;
    g6 = v3;
    g10 = v4;
    return g4;
}

// Address range: 0x6fb30 - 0x6fb8a
int32_t function_6fb30(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a2;
    int32_t v2 = g8; // 0x6fb3c
    int32_t v3; // bp-124
    int32_t v4 = &v3; // 0x6fb3f
    g8 = v4;
    int32_t v5 = g6; // 0x6fb42
    g6 = a1;
    int32_t v6 = g10; // 0x6fb48
    int32_t v7; // bp-76
    int32_t v8 = &v7; // 0x6fb4b
    g10 = v8;
    function_6f8e0(a2, v4);
    g4 = a3;
    g4 = function_6e940(a3, v4, v8);
    function_6d8d0(v8, g6);
    int32_t result = g6; // 0x6fb79
    g4 = result;
    g10 = v6;
    g6 = v5;
    g8 = v2;
    return result;
}

// Address range: 0x6fb90 - 0x6fbc5
int32_t function_6fb90(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x6fb93
    int32_t v2; // bp-60
    int32_t v3 = &v2; // 0x6fb94
    g6 = v3;
    g4 = a2;
    function_6f8e0(a2, v3);
    g4 = a1;
    int32_t result = function_6dbf0(a1, &v2, a3); // 0x6fbba
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x6fbd0 - 0x6fc48
int32_t function_6fbd0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a3;
    int32_t v2 = g8; // 0x6fbdc
    int32_t v3; // bp-124
    int32_t v4 = &v3; // 0x6fbdf
    g8 = v4;
    int32_t v5 = g6; // 0x6fbe2
    g6 = a1;
    int32_t v6 = g10; // 0x6fbe8
    int32_t v7; // bp-76
    int32_t v8 = &v7; // 0x6fbeb
    g10 = v8;
    function_6dfb0(a3, &v3);
    g9 = a2;
    int32_t v9; // bp-172
    int32_t v10 = &v9; // 0x6fbfd
    g4 = v10;
    function_6f8e0(a2, v10);
    g4 = v10;
    g4 = function_6e940(v4, v10, v8);
    function_6d8d0(v8, g6);
    int32_t result = g6; // 0x6fc37
    g4 = result;
    g10 = v6;
    g6 = v5;
    g8 = v2;
    return result;
}

// Address range: 0x6fc50 - 0x6fdc3
int32_t function_6fc50(int32_t * a1, int32_t a2, int32_t a3) {
    // 0x6fc50
    g9 = (int32_t)a1;
    int128_t v1 = __asm_movss(0x3c8efa35); // 0x6fc59
    g4 = a2;
    int128_t v2 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 4)), v1); // 0x6fc69
    int128_t v3 = __asm_unpcklps(v2, v2); // 0x6fc6d
    float80_t v4 = (int64_t)__asm_movsd(__asm_cvtps2pd(v3)); // 0x6fc78
    float80_t v5; // 0x6fc7b
    float80_t v6; // 0x6fc7b
    if (fabsl(v4) < 9223372036854775808.0L) {
        // bb
        v5 = sinl(v4);
        v6 = cosl(v4);
    } else {
        // 0x6fc50
        v5 = v4;
        v6 = g867;
    }
    int128_t v7 = __asm_movsd_1649((int64_t)(float64_t)v5); // 0x6fc85
    int128_t v8 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v6); // 0x6fc8a
    int128_t v9 = __asm_cvtpd2ps(v7); // 0x6fc8f
    int128_t v10 = __asm_movapd(v8); // 0x6fc93
    int128_t v11 = __asm_movss(*(int32_t *)g9); // 0x6fc97
    int128_t v12 = __asm_cvtpd2ps(__asm_unpcklpd(v10, v10)); // 0x6fc9f
    int128_t v13 = __asm_mulss(v11, v1); // 0x6fca3
    int128_t v14 = __asm_unpcklps(v13, v13); // 0x6fca7
    float80_t v15 = (int64_t)__asm_movsd(__asm_cvtps2pd(v14)); // 0x6fcb2
    float80_t v16; // 0x6fcb5
    float80_t v17; // 0x6fcb5
    if (fabsl(v15) < 9223372036854775808.0L) {
        // bb111
        v16 = sinl(v15);
        v17 = cosl(v15);
    } else {
        // ._crit_edge
        v16 = v15;
        v17 = v5;
    }
    int128_t v18 = __asm_movsd_1649((int64_t)(float64_t)v16); // 0x6fcbf
    int128_t v19 = __asm_mulss_1654(v1, *(int32_t *)(g9 + 8)); // 0x6fcc4
    int32_t v20 = __asm_movss_1646(__asm_cvtpd2ps(v18)); // 0x6fccd
    int128_t v21 = __asm_movapd(__asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v17)); // 0x6fcd7
    int128_t v22 = __asm_unpcklps(v19, v19); // 0x6fcdb
    float80_t v23 = (int64_t)__asm_movsd(__asm_cvtps2pd(v22)); // 0x6fce6
    int128_t v24 = __asm_cvtpd2ps(__asm_unpcklpd(v21, v21)); // 0x6fced
    float80_t v25; // 0x6fcf1
    float80_t v26; // 0x6fcf1
    if (fabsl(v23) < 9223372036854775808.0L) {
        // bb114
        v25 = sinl(v23);
        v26 = cosl(v23);
    } else {
        // ._crit_edge8
        v25 = v23;
        v26 = v16;
    }
    int128_t v27 = __asm_movss(v20); // 0x6fcf8
    int128_t v28 = __asm_movaps(v9); // 0x6fcfd
    int128_t v29 = __asm_movsd_1649((int64_t)(float64_t)v25); // 0x6fd03
    g9 = 0;
    int128_t v30 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v26); // 0x6fd0a
    int128_t v31 = __asm_cvtpd2ps(v29); // 0x6fd0f
    int128_t v32 = __asm_movapd(v30); // 0x6fd13
    int128_t v33 = __asm_mulss(__asm_movaps(v12), v24); // 0x6fd1a
    int128_t v34 = __asm_cvtpd2ps(__asm_unpcklpd(v32, v32)); // 0x6fd22
    int128_t v35 = __asm_mulss(v28, v34); // 0x6fd26
    *(int32_t *)g4 = __asm_movss_1646(v33);
    int128_t v36 = __asm_movaps(v9); // 0x6fd2e
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_mulss(v36, v24));
    int128_t v37 = __asm_xorps(__asm_movss((int32_t)g233), v27); // 0x6fd42
    int128_t v38 = __asm_mulss(v27, v31); // 0x6fd45
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v37);
    int128_t v39 = __asm_mulss(__asm_movaps(v38), v12); // 0x6fd51
    int128_t v40 = __asm_mulss(v38, v9); // 0x6fd55
    int128_t v41 = __asm_subss(v39, v35); // 0x6fd59
    int128_t v42 = __asm_mulss(__asm_movaps(v9), v31); // 0x6fd60
    *(int32_t *)(g4 + 16) = __asm_movss_1646(v41);
    int128_t v43 = __asm_movaps(v12); // 0x6fd69
    int128_t v44 = __asm_addss_1661(v40, __asm_mulss(v43, v34)); // 0x6fd70
    int128_t v45 = __asm_mulss(__asm_movaps(v24), v31); // 0x6fd77
    *(int32_t *)(g4 + 20) = __asm_movss_1646(v44);
    int128_t v46 = __asm_movss(v20); // 0x6fd80
    *(int32_t *)(g4 + 12) = g9;
    int128_t v47 = __asm_mulss(v46, v34); // 0x6fd88
    *(int32_t *)(g4 + 24) = __asm_movss_1646(v45);
    int128_t v48 = __asm_mulss(v34, v24); // 0x6fd91
    *(int32_t *)(g4 + 28) = g9;
    *(int32_t *)(g4 + 44) = g9;
    int128_t v49 = __asm_mulss(v9, v47); // 0x6fd9b
    int128_t v50 = __asm_mulss(__asm_movaps(v47), v12); // 0x6fda2
    *(int32_t *)(g4 + 40) = __asm_movss_1646(v48);
    int128_t v51 = __asm_mulss(v12, v31); // 0x6fdab
    int128_t v52 = __asm_addss_1661(v50, v42); // 0x6fdaf
    int128_t v53 = __asm_subss(v49, v51); // 0x6fdb3
    *(int32_t *)(g4 + 32) = __asm_movss_1646(v52);
    *(int32_t *)(g4 + 36) = __asm_movss_1646(v53);
    return g4;
}

// Address range: 0x6fdd0 - 0x6fe1a
int32_t function_6fdd0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int128_t v2 = __asm_movss(0x42652ee0); // 0x6fdd9
    int128_t v3 = __asm_movss(*(int32_t *)g4); // 0x6fde1
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x6fde5
    int128_t v5 = __asm_mulss(v3, v2); // 0x6fdea
    int128_t v6 = __asm_mulss(v4, v2); // 0x6fdee
    int128_t v7 = __asm_mulss_1654(v2, *(int32_t *)(g4 + 4)); // 0x6fdf2
    g4 = a2;
    __asm_movss_1646(v5);
    __asm_movss_1646(v6);
    int32_t v8 = __asm_movss_1646(v7); // 0x6fe04
    int32_t v9 = v8; // bp-16
    int32_t v10 = g4; // 0x6fe09
    g4 = &v9;
    int32_t result = function_6fc50(&v9, v10, v8); // 0x6fe13
    g4 = result;
    return result;
}

// Address range: 0x6fe20 - 0x6fe84
int32_t function_6fe20(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g6; // 0x6fe23
    g6 = a3;
    g4 = a1;
    function_6fc50((int32_t *)a1, a3, (int32_t)&g870);
    g4 = a2;
    int32_t v2; // bp-24
    g4 = function_6dbf0(a2, (int32_t *)g6, (int32_t)&v2);
    int32_t v3;
    int128_t v4 = __asm_movss(v3); // 0x6fe4f
    int128_t v5 = __asm_movss((int32_t)g233); // 0x6fe54
    int32_t v6;
    int128_t v7 = __asm_movss(v6); // 0x6fe5c
    int128_t v8 = __asm_movss(v2); // 0x6fe61
    *(int32_t *)(g6 + 28) = __asm_movss_1646(__asm_xorps(v4, v5));
    *(int32_t *)(g6 + 44) = __asm_movss_1646(__asm_xorps(v7, v5));
    *(int32_t *)(g6 + 12) = __asm_movss_1646(__asm_xorps(v8, v5));
    g6 = v1;
    return g4;
}

// Address range: 0x6fe90 - 0x6feb5
int32_t function_6fe90(int32_t a1, int32_t a2) {
    // 0x6fe90
    g7 = 0x7f7fffff;
    g9 = a1;
    g4 = a2;
    *(int32_t *)(a1 + 8) = 0x7f7fffff;
    *(int32_t *)(g9 + 4) = g7;
    *(int32_t *)g9 = g7;
    g9 = -0x800001;
    *(int32_t *)(g4 + 8) = -0x800001;
    *(int32_t *)(g4 + 4) = g9;
    *(int32_t *)g4 = g9;
    return g4;
}

// Address range: 0x6fec0 - 0x6fefd
int32_t function_6fec0(int32_t a1, int32_t a2, int32_t a3) {
    bool v1 = false; // cf
    bool v2 = true; // zf
    g4 = 0;
    int32_t v3 = g10; // 0x6fec5
    int32_t v4 = g6; // 0x6fec6
    g10 = a1;
    g6 = a2;
    g7 = a3;
    int32_t v5 = 0; // 0x6fed0
    int32_t result; // 0x6fef1
    while (true) {
        // 0x6fed0
        g9 = a2 + v5;
        int128_t v6 = __asm_movss(*(int32_t *)(v5 + a1)); // 0x6fed3
        __asm_ucomiss_1648(__asm_movss(*(int32_t *)g9), v6);
        if (!v1 && !v2) {
            // 0x6fee1
            *(int32_t *)g9 = __asm_movss_1646(v6);
        }
        int32_t v7 = g4 + g7; // 0x6fee5
        g9 = v7;
        __asm_ucomiss(v6, *(int32_t *)v7);
        if (!v1 && !v2) {
            // 0x6feed
            *(int32_t *)g9 = __asm_movss_1646(v6);
        }
        int32_t v8 = g4; // 0x6fef1
        result = v8 + 4;
        g4 = result;
        v1 = result < 12;
        v2 = v8 == 8;
        if (v8 == 8) {
            // break -> 0x6fef9
            break;
        }
        // 0x6fef1
        a1 = g10;
        v5 = result;
        a2 = g6;
    }
    // 0x6fef9
    g6 = v4;
    g10 = v3;
    return result;
}

// Address range: 0x6ff00 - 0x6ff2c
int32_t function_6ff00(int32_t a1, int32_t a2) {
    bool v1 = false; // cf
    bool v2 = true; // zf
    g4 = 0;
    g7 = a1;
    g9 = a2;
    int32_t v3 = 0; // 0x6ff0b
    while (true) {
        int128_t v4 = __asm_movss(*(int32_t *)(4 * v3 + a1)); // 0x6ff0b
        __asm_ucomiss(v4, *(int32_t *)(4 * g4 + g9));
        if (!v1 && !v2) {
            // break -> 0x6ff28
            break;
        }
        int32_t v5 = g4; // 0x6ff16
        int32_t v6 = v5 + 1; // 0x6ff16
        g4 = v6;
        v1 = v6 < 3;
        v2 = v5 == 2;
        if (v5 == 2) {
            // 0x6ff1e
            g4 = 1;
            return 1;
        }
        // 0x6ff16
        v3 = v6;
        a1 = g7;
    }
    // 0x6ff28
    g4 = 0;
    return 0;
}

// Address range: 0x6ff30 - 0x6ff6d
int32_t function_6ff30(int32_t a1, int32_t a2, int32_t a3) {
    bool v1 = false; // cf
    bool v2 = true; // zf
    g4 = 0;
    int32_t v3 = g6; // bp-8
    g7 = a1;
    g9 = a2;
    g6 = a3;
    int32_t v4 = 0; // 0x6ff3f
    while (true) {
        int128_t v5 = __asm_movss(*(int32_t *)(4 * v4 + a1)); // 0x6ff3f
        __asm_ucomiss_1648(__asm_movss(*(int32_t *)(4 * g4 + g9)), v5);
        if (!v1 && !v2) {
            // break -> 0x6ff68
            break;
        }
        // 0x6ff4e
        __asm_ucomiss(v5, *(int32_t *)(4 * g4 + g6));
        if (!v1 && !v2) {
            // break -> 0x6ff68
            break;
        }
        int32_t v6 = g4; // 0x6ff54
        int32_t v7 = v6 + 1; // 0x6ff54
        g4 = v7;
        v1 = v7 < 3;
        v2 = v6 == 2;
        if (v6 == 2) {
            // 0x6ff5c
            g6 = v3;
            g4 = 1;
            return 1;
        }
        // 0x6ff54
        v4 = v7;
        a1 = g7;
    }
    // 0x6ff68
    g6 = v3;
    g4 = 0;
    return 0;
}

// Address range: 0x6ff70 - 0x70044
int32_t function_6ff70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int128_t v1; // xmm0
    int128_t v2 = __asm_xorps(v1, v1); // 0x6ff71
    int128_t v3 = __asm_movss(a1); // 0x6ff76
    int128_t v4 = __asm_movss(a2); // 0x6ff7b
    __asm_ucomiss_1648(v3, v2);
    int128_t v5 = __asm_movss(a3); // 0x6ff83
    g7 = a4;
    g9 = a5;
    bool v6; // pf
    bool v7; // zf
    if (v6 || !v7) {
        int128_t v8 = __asm_movss(0x40800000); // 0x6ffc8
        g4 = 0;
        int128_t v9 = __asm_mulss(__asm_movaps(v4), v4); // 0x6ffd5
        int128_t v10 = __asm_mulss(v8, v3); // 0x6ffd9
        int128_t v11 = __asm_subss(v9, __asm_mulss(v10, v5)); // 0x6ffe1
        __asm_ucomiss_1648(v2, v11);
        int128_t v12 = __asm_sqrtss(v11); // 0x6ffea
        int128_t v13 = __asm_addss_1661(v3, v3); // 0x6ffee
        g4 = 1;
        int128_t v14 = __asm_movaps(v12); // 0x6fff7
        int128_t v15 = __asm_divss(__asm_subss(v14, v4), v13); // 0x6fffe
        *(int32_t *)g7 = __asm_movss_1646(v15);
        int128_t v16 = __asm_movss((int32_t)g233); // 0x70006
        int128_t v17 = __asm_subss(__asm_xorps(v4, v16), v12); // 0x70011
        *(int32_t *)g9 = __asm_movss_1646(__asm_divss(v17, v13));
        return g4;
        // 0x6ffc3
        return g4;
    }
    // 0x6ff92
    __asm_ucomiss_1648(v4, v2);
    if (v6 || !v7) {
        int128_t v18 = __asm_movss((int32_t)g233); // 0x70020
        g4 = 1;
        int128_t v19 = __asm_divss(__asm_xorps(v5, v18), v4); // 0x70030
        *(int32_t *)g9 = __asm_movss_1646(v19);
        *(int32_t *)g7 = __asm_movss_1646(v19);
        return g4;
    }
    // 0x6ffa2
    __asm_ucomiss_1648(v5, v2);
    if (v6 || !v7) {
        // 0x70040
        g4 = 0;
        return 0;
    }
    // 0x6ffb6
    *(int32_t *)g9 = __asm_movss_1646(v2);
    g4 = 1;
    *(int32_t *)g7 = __asm_movss_1646(v2);
    // 0x6ffc3
    return g4;
}

// Address range: 0x70050 - 0x70195
int32_t function_70050(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    int32_t v1 = g5; // bp-4
    int32_t v2 = (int32_t)&v1 - 12; // 0x70053
    bool v3 = llvm_ctpop_i8((char)v2) % 2 == 0; // pf
    int128_t v4 = __asm_movss(a1); // 0x70056
    int128_t v5 = __asm_movss(a3); // 0x7005b
    int128_t v6 = __asm_movss(a5); // 0x70060
    int128_t v7 = __asm_movaps(v4); // 0x70065
    int128_t v8 = __asm_movaps(v4); // 0x70068
    int128_t v9 = __asm_subss(v7, v5); // 0x7006b
    int128_t v10 = __asm_movss(a2); // 0x7006f
    int128_t v11 = __asm_subss(v8, v6); // 0x70074
    int128_t v12 = __asm_movss(a6); // 0x70078
    int128_t v13 = __asm_mulss(v9, v11); // 0x7007d
    int128_t v14 = __asm_movaps(v5); // 0x70081
    int128_t v15 = __asm_mulss(v13, __asm_subss(v14, v6)); // 0x70088
    __asm_ucomiss(v15, 0);
    if (!v3) {
        // 0x70188
        g4 = 0;
        if (v2 == 0) {
            // 0x70193
            g5 = v1;
            return 0;
        }
    }
    int128_t v16 = __asm_movss(a4); // 0x70099
    int128_t v17 = __asm_subss(__asm_movaps(v10), v12); // 0x700a1
    g4 = a7;
    int128_t v18 = __asm_subss(v16, v10); // 0x700a8
    int128_t v19 = __asm_mulss(v17, v5); // 0x700ac
    int128_t v20 = __asm_addss_1661(__asm_mulss(v18, v6), v19); // 0x700b4
    int128_t v21 = __asm_subss_1651(__asm_movaps(v12), a4); // 0x700bb
    int128_t v22 = __asm_addss_1661(v20, __asm_mulss(v21, v4)); // 0x700c4
    int128_t v23 = __asm_subss(__asm_movss(a4), v12); // 0x700cd
    *(int32_t *)g4 = __asm_movss_1646(__asm_divss(v22, v15));
    int128_t v24 = __asm_movaps(v6); // 0x700d9
    g4 = a8;
    int32_t v25 = __asm_movss_1646(__asm_mulss(v24, v6)); // 0x700e3
    int128_t v26 = __asm_movaps(v4); // 0x700e8
    int32_t v27 = __asm_movss_1646(__asm_mulss(v26, v4)); // 0x700ef
    int128_t v28 = __asm_mulss(__asm_movaps(v5), v5); // 0x700f7
    int128_t v29 = __asm_mulss_1654(v23, v27); // 0x700fb
    int32_t v30 = __asm_movss_1646(v28); // bp-16
    int128_t v31 = __asm_subss_1651(__asm_movaps(v10), a4); // 0x70108
    int128_t v32 = __asm_addss_1661(__asm_mulss_1654(v31, v25), v29); // 0x70112
    int128_t v33 = __asm_subss(__asm_movaps(v12), v10); // 0x70119
    int128_t v34 = __asm_addss_1661(v32, __asm_mulss_1654(v33, v30)); // 0x70122
    int128_t v35 = __asm_subss(__asm_movaps(v6), v4); // 0x70129
    *(int32_t *)g4 = __asm_movss_1646(__asm_divss(v34, v15));
    g4 = a9;
    int128_t v36 = __asm_mulss(__asm_movaps(v4), v6); // 0x7013b
    int128_t v37 = __asm_mulss(v4, v12); // 0x7013f
    int128_t v38 = __asm_mulss(v6, v10); // 0x70143
    int128_t v39 = __asm_mulss_1654(v12, v27); // 0x70147
    int128_t v40 = __asm_mulss_1654(v10, v25); // 0x7014c
    int128_t v41 = __asm_mulss(v36, v35); // 0x70151
    int128_t v42 = __asm_subss(v38, v37); // 0x70155
    int128_t v43 = __asm_subss(v39, v40); // 0x70159
    int128_t v44 = __asm_mulss_1654(v41, a4); // 0x7015d
    int128_t v45 = __asm_mulss_1654(v42, v30); // 0x70162
    int128_t v46 = __asm_mulss(v43, v5); // 0x70167
    int128_t v47 = __asm_addss_1661(__asm_addss_1661(v44, v45), v46); // 0x7016f
    *(int32_t *)g4 = __asm_movss_1646(__asm_divss(v47, v15));
    g4 = 1;
    g5 = v1;
    return 1;
}

// Address range: 0x701a0 - 0x7039a
int32_t function_701a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    int32_t v1 = g8; // 0x701a3
    int32_t v2 = g10; // 0x701a4
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)112; // cf
    bool v5 = &v3 == (int32_t *)112; // zf
    int128_t v6 = __asm_movss(a1); // 0x701a9
    int128_t v7 = __asm_movss(a2); // xmm3
    __asm_ucomiss(v6, a3);
    int128_t v8 = __asm_movss(a4); // xmm1
    int128_t v9 = __asm_movss(a6); // xmm4
    g10 = a7;
    g8 = a8;
    int32_t v10;
    int32_t v11; // 0x701d2
    if (!v4 && !v5) {
        int128_t v12 = __asm_movss(a3); // 0x701c9
        int32_t v13 = __asm_movd_1650(v7); // 0x701ce
        g4 = v13;
        v11 = __asm_movss_1646(v6);
        v7 = __asm_movaps(v8);
        v8 = __asm_movd(v13);
        v10 = __asm_movss_1646(v12);
    } else {
        v11 = a3;
        v10 = a1;
    }
    int128_t v14 = __asm_movss(v11); // 0x701e3
    __asm_ucomiss(v14, a5);
    int32_t v15;
    int32_t v16; // 0x701f7
    if (!v4 && !v5) {
        int128_t v17 = __asm_movss(a5); // 0x701ee
        int32_t v18 = __asm_movd_1650(v8); // 0x701f3
        g4 = v18;
        v16 = __asm_movss_1646(v14);
        v8 = __asm_movaps(v9);
        v9 = __asm_movd(v18);
        v15 = __asm_movss_1646(v17);
    } else {
        v15 = v11;
        v16 = a5;
    }
    int128_t v19 = __asm_movss(v10); // 0x70208
    __asm_ucomiss(v19, v15);
    int32_t v20;
    int32_t v21; // 0x7021c
    if (!v4 && !v5) {
        int128_t v22 = __asm_movss(v15); // 0x70213
        int32_t v23 = __asm_movd_1650(v7); // 0x70218
        g4 = v23;
        v21 = __asm_movss_1646(v19);
        v7 = __asm_movaps(v8);
        v8 = __asm_movd(v23);
        v20 = __asm_movss_1646(v22);
    } else {
        v21 = v15;
        v20 = v10;
    }
    int128_t v24 = __asm_movaps(v9); // 0x7022d
    g6 = 20;
    int32_t v25 = __asm_movss_1646(__asm_subss(v24, v7)); // 0x70239
    int128_t v26 = __asm_subss_1651(__asm_movss(v21), v20); // 0x70243
    int32_t v27 = __asm_movss_1646(__asm_mulss_1654(v26, v25)); // 0x7024d
    int128_t v28 = __asm_movss(v16); // 0x70252
    int128_t v29 = __asm_movss(v27); // 0x70257
    int128_t v30 = __asm_addss_1661(__asm_divss(v29, __asm_subss_1651(v28, v20)), v7); // 0x70265
    int32_t v31 = __asm_movss_1646(v30); // 0x70269
    int128_t v32 = __asm_xorps(v30, v30); // xmm2
    int128_t v33; // 0x7034d
    int128_t v34; // 0x70358
    int128_t v35; // 0x7032a
    while (true) {
      lab_0x702ac:;
        int128_t v36 = __asm_movss(v16); // 0x702ac
        __asm_movss_1646(v9);
        int128_t v37 = __asm_movss(v31); // 0x702b7
        __asm_movss_1646(v7);
        __asm_movss_1646(v36);
        int128_t v38 = __asm_movss(0x3f800000); // 0x702c8
        int128_t v39 = v32; // 0x702d0
        int128_t v40 = __asm_mulss(v37, v39); // 0x702d0
        g4 = a9;
        int32_t v41 = __asm_movss_1646(v8); // 0x702d7
        int128_t v42 = __asm_subss(v38, v39); // 0x702dc
        int32_t v43 = __asm_movss_1646(v39); // 0x702e0
        int32_t v44 = __asm_movss_1646(v7); // 0x702e5
        int32_t v45 = __asm_movss_1646(v9); // 0x702ea
        int128_t v46 = __asm_addss_1661(__asm_mulss(v42, v8), v40); // 0x702ff
        __asm_movss_1646(__asm_movss(v21));
        __asm_movss_1646(v46);
        int32_t v47 = __asm_movss_1646(__asm_movss(v20)); // 0x70319
        int32_t v48 = function_70050(v47, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x7031e
        g4 = v48;
        v8 = __asm_movss(v41);
        v4 = false;
        v5 = (char)g4 == 0;
        v35 = __asm_movss(v43);
        v7 = __asm_movss(v44);
        v9 = __asm_movss(v45);
        if (v5) {
            // break -> 0x70390
            break;
        }
        int128_t v49 = __asm_movss(*(int32_t *)g10); // 0x7033b
        __asm_ucomiss_1648(v8, v7);
        int128_t v50 = __asm_movss(*(int32_t *)g8); // 0x70342
        int128_t v51 = __asm_cvtps2pd(v49); // 0x70346
        int128_t v52 = __asm_addsd(v51, v51); // 0x70349
        v33 = __asm_cvtps2pd(v50);
        int128_t v53 = __asm_addsd(v52, v33); // 0x70350
        v34 = __asm_cvtpd2ps(__asm_unpcklpd(v53, v53));
        if (v4 || v5) {
            goto lab_0x70362;
        } else {
            // 0x70278
            __asm_ucomiss_1648(v9, v8);
            if (v4 || v5) {
                goto lab_0x70362;
            } else {
                // 0x70281
                __asm_ucomiss_1648(v34, __asm_xorps(v33, v33));
                if (!v4) {
                    goto lab_0x70380_4;
                }
                goto lab_0x7028d;
            }
        }
    }
    // 0x70390
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
  lab_0x70362:
    // 0x70362
    __asm_ucomiss_1648(v7, v8);
    if (v4 || v5) {
        goto lab_0x70380_4;
    }
    // 0x70367
    __asm_ucomiss_1648(v8, v9);
    if (v4 || v5) {
        goto lab_0x70380_4;
    }
    // 0x7036c
    __asm_ucomiss_1648(__asm_xorps(v33, v33), v34);
    if (!v4) {
        goto lab_0x70380_4;
    }
    goto lab_0x7028d;
  lab_0x7028d:;
    int128_t v54 = __asm_unpcklps(v35, v35); // 0x7028d
    int128_t v55 = __asm_addsd_1657(__asm_cvtps2pd(v54), 0x3fa999999999999a); // 0x70293
    int32_t v56 = g6 - 1; // 0x7029b
    g6 = v56;
    v32 = __asm_cvtpd2ps(__asm_unpcklpd(v55, v55));
    if (v56 == 0) {
      lab_0x70380_4:
        // 0x70380
        g4 = 1;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 1;
    }
    goto lab_0x702ac;
}

// Address range: 0x703a0 - 0x7052d
int32_t function_703a0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    int32_t v1; // ebp
    int32_t v2 = (int32_t)&v1 - 20; // 0x703a3
    bool v3 = llvm_ctpop_i8((char)v2) % 2 == 0; // pf
    int128_t v4 = __asm_movss(a5); // 0x703a6
    int128_t v5 = __asm_movss(a3); // 0x703ab
    int128_t v6 = __asm_movss(a1); // 0x703b0
    int128_t v7 = __asm_subss(v5, v4); // 0x703b5
    int128_t v8 = __asm_movss(a2); // 0x703b9
    int128_t v9 = __asm_movaps(v6); // 0x703be
    int128_t v10 = __asm_movss(a4); // 0x703c1
    int128_t v11 = __asm_subss(v9, v4); // 0x703c6
    int128_t v12 = __asm_movss(a6); // 0x703ca
    int32_t v13 = __asm_movss_1646(v7); // 0x703cf
    int128_t v14 = __asm_movaps(v6); // 0x703d4
    int128_t v15 = __asm_mulss(__asm_subss_1651(v14, a3), v11); // 0x703dc
    int128_t v16 = __asm_mulss(__asm_mulss_1654(v15, v13), v8); // 0x703e5
    int128_t v17 = __asm_mulss(__asm_mulss(v16, v10), v12); // 0x703ed
    __asm_ucomiss(v17, 0);
    if (!v3) {
        // 0x70520
        g4 = 0;
        if (v2 == 0) {
            // 0x7052b
            return 0;
        }
    }
    int128_t v18 = __asm_movss(a3); // 0x703fe
    int128_t v19 = __asm_subss(__asm_movaps(v10), v12); // 0x70406
    g4 = a7;
    int32_t v20 = __asm_movss_1646(__asm_mulss(v18, v10)); // 0x70411
    int128_t v21 = __asm_movaps(v6); // 0x70416
    int128_t v22 = __asm_mulss(__asm_mulss(v21, v8), v19); // 0x7041d
    int128_t v23 = __asm_movaps(v8); // 0x70421
    int128_t v24 = __asm_mulss(__asm_subss(v23, v10), v4); // 0x70428
    int128_t v25 = __asm_addss_1661(v22, __asm_mulss(v24, v12)); // 0x70430
    int128_t v26 = __asm_subss(__asm_movaps(v12), v8); // 0x70437
    int128_t v27 = __asm_addss_1661(v25, __asm_mulss_1654(v26, v20)); // 0x70440
    int128_t v28 = __asm_movss(a3); // 0x70444
    int128_t v29 = __asm_mulss(v28, v28); // 0x70449
    int128_t v30 = __asm_divss(v27, v17); // 0x7044d
    int32_t v31 = __asm_movss_1646(v29); // 0x70451
    int128_t v32 = __asm_mulss(__asm_movaps(v6), v6); // 0x70459
    int32_t v33 = __asm_movss_1646(__asm_mulss(v32, v8)); // 0x70461
    int128_t v34 = __asm_subss(__asm_movaps(v8), v12); // 0x70469
    *(int32_t *)g4 = __asm_movss_1646(v30);
    int128_t v35 = __asm_movaps(v4); // 0x70471
    g4 = a8;
    int32_t v36 = __asm_movss_1646(__asm_mulss(v35, v4)); // 0x7047b
    int128_t v37 = __asm_movss(v31); // 0x70480
    int128_t v38 = __asm_mulss(__asm_mulss(v37, v10), v34); // 0x70489
    int128_t v39 = __asm_movaps(v10); // 0x7048d
    int128_t v40 = __asm_mulss_1654(__asm_subss(v39, v8), v36); // 0x70494
    int128_t v41 = __asm_addss_1661(v38, __asm_mulss(v40, v12)); // 0x7049d
    int128_t v42 = __asm_subss(__asm_movaps(v12), v10); // 0x704a4
    int128_t v43 = __asm_addss_1661(v41, __asm_mulss_1654(v42, v33)); // 0x704ad
    int128_t v44 = __asm_movss(v20); // 0x704b1
    *(int32_t *)g4 = __asm_movss_1646(__asm_divss(v43, v17));
    int128_t v45 = __asm_movss(a3); // 0x704be
    g4 = a9;
    int128_t v46 = __asm_mulss(__asm_mulss_1654(v45, v13), v4); // 0x704cb
    int128_t v47 = __asm_mulss(v4, v12); // 0x704cf
    int128_t v48 = __asm_mulss(v46, v10); // 0x704d3
    int128_t v49 = __asm_subss(v44, v47); // 0x704d7
    int128_t v50 = __asm_movss(v33); // 0x704db
    int128_t v51 = __asm_mulss(v48, v12); // 0x704e0
    int128_t v52 = __asm_addss_1661(v51, __asm_mulss(v50, v49)); // 0x704e8
    int128_t v53 = __asm_mulss(__asm_movss(v36), v8); // 0x704f1
    int128_t v54 = __asm_mulss_1654(v8, v31); // 0x704f5
    int128_t v55 = __asm_mulss(v53, v12); // 0x704fa
    int128_t v56 = __asm_subss(v55, __asm_mulss(v54, v10)); // 0x70502
    int128_t v57 = __asm_addss_1661(v52, __asm_mulss(v56, v6)); // 0x7050a
    *(int32_t *)g4 = __asm_movss_1646(__asm_divss(v57, v17));
    g4 = 1;
    return 1;
}

// Address range: 0x70530 - 0x705e0
int32_t function_70530(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    g4 = (int32_t)a1;
    g9 = a3;
    int128_t v2 = __asm_movss(a2); // 0x7053c
    int32_t v3 = g4; // 0x70541
    if (v3 == g9) {
        int32_t v4 = *(int32_t *)v3; // 0x705b8
        g9 = v4;
        g9 = *(int32_t *)(v3 + 4);
        g9 = *(int32_t *)(v3 + 8);
        g4 = &v4;
        int32_t v5 = __asm_movss_1646(v2); // 0x705cd
        int32_t result = function_70530(&v4, v5, (int32_t)&g870); // 0x705d9
        g4 = result;
        return result;
    }
    int128_t v6 = __asm_mulss_1654(v2, 0x3c8efa35); // 0x70545
    int128_t v7 = __asm_cvtps2pd(__asm_unpcklps(v6, v6)); // 0x70550
    float80_t v8 = (int64_t)__asm_movsd(v7); // 0x70558
    float80_t v9; // 0x7055d
    float80_t v10; // 0x7055d
    if (fabsl(v8) < 9223372036854775808.0L) {
        // bb
        v10 = sinl(v8);
        v9 = cosl(v8);
    } else {
        // 0x70545
        v10 = v8;
        v9 = g867;
    }
    int128_t v11 = __asm_movsd_1649((int64_t)(float64_t)v10); // 0x70565
    int128_t v12 = __asm_movsd_1649((int64_t)(float64_t)v9); // 0x7056a
    int128_t v13 = __asm_cvtpd2ps(v11); // 0x7056f
    int128_t v14 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x70573
    int128_t v15 = __asm_movapd(v12); // 0x70578
    int128_t v16 = __asm_movss(*(int32_t *)g4); // 0x7057c
    int128_t v17 = __asm_mulss(v14, v13); // 0x70580
    int128_t v18 = __asm_cvtpd2ps(__asm_unpcklpd(v15, v15)); // 0x70588
    int128_t v19 = __asm_mulss(v16, v18); // 0x7058c
    *(int32_t *)g9 = __asm_movss_1646(__asm_subss(v19, v17));
    int128_t v20 = __asm_mulss_1654(v13, *(int32_t *)g4); // 0x70598
    int128_t v21 = __asm_mulss_1654(v18, *(int32_t *)(g4 + 4)); // 0x7059c
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss_1661(v20, v21));
    int32_t v22 = *(int32_t *)(g4 + 8); // 0x705aa
    g4 = v22;
    *(int32_t *)(g9 + 8) = v22;
    return g4;
}

// Address range: 0x705e0 - 0x705e1
int32_t function_705e0(int32_t a1) {
    // 0x705e0
    return g4;
}

// Address range: 0x705f4 - 0x705f5
int32_t function_705f4(void) {
    // 0x705f4
    return g4;
}

// Address range: 0x70624 - 0x70625
int32_t function_70624(void) {
    // 0x70624
    return g4;
}

// Address range: 0x70642 - 0x70658
float80_t function_70642(void) {
    // 0x70642
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x70642
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x70645
    *(int32_t *)(v1 - 28) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    return (float80_t)*(float32_t *)(v1 - 28);
}

// Address range: 0x70660 - 0x7066c
int32_t function_70660(void) {
    // 0x70660
    bool v1; // zf
    if (!v1) {
        // bb
        g4 = function_705f4();
    }
    // 0x70662
    __asm_movss(g740);
    int32_t result = function_70624(); // 0x7066a
    g4 = result;
    return result;
}

// Address range: 0x70670 - 0x70728
float80_t function_70670(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    int128_t v2 = __asm_movss(a1); // 0x70676
    int128_t v3 = __asm_movss(0x3f000000); // 0x7067b
    int128_t v4 = __asm_movss(a2); // 0x70683
    __asm_ucomiss_1648(v3, v2);
    int128_t v5 = __asm_movss(0x3f800000); // 0x7068b
    if (&v1 < (int32_t *)72 || &v1 == (int32_t *)72) {
        int128_t v6 = __asm_movaps(v5); // 0x70695
        int128_t v7 = __asm_addss_1661(v2, v2); // 0x70698
        int32_t v8 = __asm_movss_1646(v3); // 0x7069c
        int128_t v9 = __asm_subss(v6, v4); // 0x706a1
        int128_t v10 = __asm_movss(0x40000000); // 0x706a5
        int32_t v11 = __asm_movss_1646(v5); // 0x706ad
        int128_t v12 = __asm_subss(v10, v7); // 0x706b2
        __asm_movss_1646(v9);
        g4 = function_705e0(__asm_movss_1646(v12));
        int128_t v13 = __asm_movss(v8); // 0x706c6
        int128_t v14 = __asm_movss(v11); // 0x706ce
        int128_t v15 = __asm_movss((int32_t)(float32_t)g868); // 0x706d3
        int128_t v16 = __asm_movaps(v14); // 0x706d8
        int128_t v17 = __asm_subss(v16, __asm_mulss(v15, v13)); // 0x706df
        return __asm_movss_1646(v17);
    }
    int128_t v18 = __asm_addss_1661(v2, v2); // 0x706f0
    int32_t v19 = __asm_movss_1646(v3); // 0x706f4
    int128_t v20 = __asm_subss(v5, v4); // 0x706f9
    __asm_movss_1646(v18);
    g4 = function_705e0(__asm_movss_1646(v20));
    int128_t v21 = __asm_movss(v19); // 0x7070d
    int128_t v22 = __asm_mulss(__asm_movss((int32_t)(float32_t)g868), v21); // 0x7071a
    return __asm_movss_1646(v22);
}

// Address range: 0x70730 - 0x70731
int32_t function_70730(float80_t a1) {
    // 0x70730
    return g4;
}

// Address range: 0x7074f - 0x7077a
float80_t function_7074f(void) {
    int128_t v1 = __asm_movups(g176); // 0x70751
    int32_t v2; // ebp
    int32_t v3 = v2 - 16; // 0x70758
    float80_t v4; // st7
    *(float64_t *)v3 = (float64_t)v4;
    int128_t v5 = __asm_mulsd_1655(__asm_subsd_1656(v1, *(int64_t *)v3), 0x3fe0000000000000); // 0x70760
    int128_t v6 = __asm_unpcklpd(v5, v5); // 0x70768
    *(int32_t *)(v2 - 20) = __asm_movss_1646(__asm_cvtpd2ps(v6));
    return (float80_t)*(float32_t *)(v2 - 20);
}

// Address range: 0x70780 - 0x707fe
int32_t function_70780(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    int128_t v2 = __asm_movss(a1); // 0x70786
    int128_t v3 = __asm_movss(a2); // 0x7078b
    g4 = a3;
    __asm_ucomiss_1648(v3, v2);
    int128_t v4;
    if (&v1 > (int32_t *)24) {
        // 0x707f0
        v4 = __asm_divss(__asm_mulss_1654(v2, 0x3f000000), v3);
    } else {
        int128_t v5 = __asm_subss(v2, v3); // 0x70798
        int128_t v6 = __asm_movsd_1649(0x3fe0000000000000); // 0x7079c
        int128_t v7 = __asm_movss(0x3f800000); // 0x707a4
        int128_t v8 = __asm_unpcklps(v5, v5); // 0x707ac
        int128_t v9 = __asm_mulsd(__asm_cvtps2pd(v8), v6); // 0x707b2
        int128_t v10 = __asm_subss(v7, v3); // 0x707b6
        int128_t v11 = __asm_cvtps2pd(__asm_unpcklps(v10, v10)); // 0x707bd
        int128_t v12 = __asm_addsd(__asm_divsd(v9, v11), v6); // 0x707c4
        v4 = __asm_cvtpd2ps(__asm_unpcklpd(v12, v12));
    }
    int32_t v13 = __asm_movss_1646(v4); // 0x707d4
    float80_t v14 = function_70670(v13, (int32_t)&g870); // 0x707d9
    g4 = (float32_t)v14;
    int32_t result = function_70730(v14); // 0x707e2
    g4 = result;
    return result;
}

// Address range: 0x70800 - 0x70887
int32_t function_70800(int32_t a1, int32_t a2, int32_t * a3) {
    int128_t v1 = g881; // 0x70801
    int128_t v2 = __asm_xorps(v1, v1); // 0x70801
    g881 = v2;
    g4 = 0;
    int32_t v3 = g6; // 0x70808
    int128_t v4 = __asm_movaps(v2); // xmm4
    g6 = a1;
    g9 = a2;
    g7 = (int32_t)a3;
    int128_t v5 = __asm_movss(*(int32_t *)(4 * g4 + a1)); // 0x70815
    int128_t v6 = __asm_movss(*(int32_t *)(4 * g4 + g9)); // 0x7081a
    g4++;
    int128_t v7 = __asm_subss(__asm_movaps(v5), v6); // 0x70828
    int128_t v8 = __asm_addss_1661(v6, v5); // 0x7082c
    int128_t v9 = __asm_mulss(v7, v7); // 0x70830
    int128_t v10 = __asm_mulss(v8, v8); // 0x70834
    v4 = __asm_addss_1661(v4, v9);
    int128_t v11 = __asm_addss_1661(g881, v10); // 0x7083c
    g881 = v11;
    while (g4 != 4) {
        // 0x70815
        v5 = __asm_movss(*(int32_t *)(4 * g4 + g6));
        v6 = __asm_movss(*(int32_t *)(4 * g4 + g9));
        g4++;
        v7 = __asm_subss(__asm_movaps(v5), v6);
        v8 = __asm_addss_1661(v6, v5);
        v9 = __asm_mulss(v7, v7);
        v10 = __asm_mulss(v8, v8);
        v4 = __asm_addss_1661(v4, v9);
        v11 = __asm_addss_1661(g881, v10);
        g881 = v11;
    }
    // 0x70842
    g4 &= -256;
    __asm_ucomiss_1648(v4, v11);
    int128_t v12 = __asm_movss((int32_t)g233); // 0x70847
    uint32_t v13 = g7; // 0x70851
    uint32_t v14 = g9; // 0x70851
    if (v13 == v14) {
        // 0x70865
        g6 = v3;
        return g4;
    }
    // 0x70855
    g4 = 0;
    int32_t v15 = *(int32_t *)v14; // 0x7085735
    g6 = v15;
    *(int32_t *)v13 = v15;
    int32_t v16 = g4; // 0x7085d37
    int32_t v17 = v16 + 4; // 0x7085d38
    g4 = v17;
    int32_t result;
    if (v16 != 12) {
        int32_t v18 = v17; // 0x7085d42
        int32_t v19 = *(int32_t *)(g9 + v18); // 0x70857
        g6 = v19;
        *(int32_t *)(v18 + g7) = v19;
        int32_t v20 = g4; // 0x7085d
        int32_t v21 = v20 + 4; // 0x7085d
        g4 = v21;
        result = v21;
        while (v20 != 12) {
            // 0x70857
            v18 = v21;
            v19 = *(int32_t *)(g9 + v18);
            g6 = v19;
            *(int32_t *)(v18 + g7) = v19;
            v20 = g4;
            v21 = v20 + 4;
            g4 = v21;
            result = v21;
        }
    } else {
        result = v17;
    }
    // 0x70865
    g6 = v3;
    return result;
}

// Address range: 0x70890 - 0x70891
int32_t function_70890(int32_t a1, int32_t * a2, int32_t a3, int32_t a4) {
    // 0x70890
    return g4;
}

// Address range: 0x708b6 - 0x708ba
int32_t function_708b6(int32_t a1, int32_t a2) {
    // 0x708b6
    g7 = a1;
    return g4;
}

// Address range: 0x7098a - 0x709d6
int32_t function_7098a(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x7098a
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 88)); // 0x7098c
    float80_t v3; // st7
    *(float64_t *)(v1 - 96) = (float64_t)v3;
    int128_t v4 = __asm_movss(*(int32_t *)(v1 - 72)); // 0x70993
    int128_t v5 = __asm_divsd(__asm_movsd_1649(*(int64_t *)(v1 - 96)), v2); // 0x7099d
    int128_t v6 = __asm_cvtpd2ps(__asm_unpcklpd(v5, v5)); // 0x709a5
    g4 = 0;
    int128_t v7 = __asm_movss(*(int32_t *)g10); // 0x709ab
    int128_t v8 = __asm_movss(*(int32_t *)(g4 + g6)); // 0x709b0
    int128_t v9 = __asm_mulss(v7, v4); // 0x709b5
    int128_t v10 = __asm_mulss(v8, v6); // 0x709b9
    *(int32_t *)(g4 + g8) = __asm_movss_1646(__asm_addss_1661(v9, v10));
    int32_t v11 = g4; // 0x709c6
    int32_t result = v11 + 4; // 0x709c6
    g4 = result;
    while (v11 != 12) {
        // 0x709ab
        v7 = __asm_movss(*(int32_t *)(g10 + result));
        v8 = __asm_movss(*(int32_t *)(g4 + g6));
        v9 = __asm_mulss(v7, v4);
        v10 = __asm_mulss(v8, v6);
        *(int32_t *)(g4 + g8) = __asm_movss_1646(__asm_addss_1661(v9, v10));
        v11 = g4;
        result = v11 + 4;
        g4 = result;
    }
    // 0x709ce
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x70a06 - 0x70a0a
int32_t function_70a06(int32_t a1, int32_t a2) {
    // 0x70a06
    g7 = a1;
    return g4;
}

// Address range: 0x70a0e - 0x70a13
int32_t function_70a0e(void) {
    // 0x70a0e
    g6++;
    int32_t result = g4 | 15; // 0x70a0f
    g4 = result;
    return result;
}

// Address range: 0x70a3f - 0x70a43
int32_t function_70a3f(int32_t a1) {
    // 0x70a3f
    g7 = a1;
    return g4;
}

// Address range: 0x70a58 - 0x70a98
int32_t function_70a58(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x70a58
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 72)); // 0x70a5a
    g4 = 0;
    int32_t v3 = v1 - 32; // 0x70a60
    float80_t v4; // st7
    *(float64_t *)v3 = (float64_t)v4;
    int128_t v5 = __asm_cvtpd2ps(__asm_movsd_1649(*(int64_t *)v3)); // 0x70a68
    int32_t v6 = g4; // 0x70a6c
    g9 = v6 + g8;
    int128_t v7 = __asm_movss(*(int32_t *)(g10 + v6)); // 0x70a6f
    g4 += 4;
    int128_t v8 = __asm_movss(*(int32_t *)g9); // 0x70a77
    int128_t v9 = __asm_mulss(v7, v2); // 0x70a7e
    int128_t v10 = __asm_mulss(v8, v5); // 0x70a82
    *(int32_t *)g9 = __asm_movss_1646(__asm_addss_1661(v9, v10));
    while (g4 != 12) {
        // 0x70a6c
        v6 = g4;
        g9 = v6 + g8;
        v7 = __asm_movss(*(int32_t *)(g10 + v6));
        g4 += 4;
        v8 = __asm_movss(*(int32_t *)g9);
        v9 = __asm_mulss(v7, v2);
        v10 = __asm_mulss(v8, v5);
        *(int32_t *)g9 = __asm_movss_1646(__asm_addss_1661(v9, v10));
    }
    // 0x70a90
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x70aa0 - 0x70ab2
int32_t function_70aa0(void) {
    // 0x70aa0
    int128_t v1; // xmm1
    int128_t v2 = __asm_movaps(v1); // 0x70aa0
    int32_t v3; // ebp
    __asm_movss(*(int32_t *)(v3 + 16));
    __asm_subss_1651(v2, *(int32_t *)(v3 + 16));
    return g4;
}

// Address range: 0x70ac0 - 0x70b09
int32_t function_70ac0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a2;
    int32_t v2 = g6; // 0x70ac9
    g6 = a1;
    int32_t v3 = g10; // 0x70acf
    int32_t v4; // bp-28
    g10 = &v4;
    function_70800(a1, a2, &v4);
    g4 = a3;
    int32_t result = function_70890(g6, &v4, a3, a4); // 0x70afa
    g4 = result;
    g6 = v2;
    g10 = v3;
    return result;
}

// Address range: 0x70b10 - 0x70b4e
int32_t function_70b10(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movss((int32_t)g233); // 0x70b11
    g9 = a1;
    g4 = a2;
    int128_t v2 = __asm_movss(*(int32_t *)a1); // 0x70b21
    *(int32_t *)g4 = __asm_movss_1646(__asm_xorps(v2, v1));
    int128_t v3 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x70b2c
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_xorps(v3, v1));
    int128_t v4 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x70b39
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_xorps(v4, v1));
    int32_t v5 = *(int32_t *)(g9 + 12); // 0x70b46
    g9 = v5;
    *(int32_t *)(g4 + 12) = v5;
    return g4;
}

// Address range: 0x70b50 - 0x70c04
int32_t function_70b50(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movss((int32_t)g233); // 0x70b51
    g4 = a1;
    g9 = a2;
    int128_t v2 = __asm_xorps(__asm_movss(*(int32_t *)a1), v1); // 0x70b65
    *(int32_t *)g9 = __asm_movss_1646(v2);
    int128_t v3 = __asm_xorps(__asm_movss(*(int32_t *)(g4 + 4)), v1); // 0x70b71
    *(int32_t *)(g9 + 4) = __asm_movss_1646(v3);
    int128_t v4 = __asm_xorps(__asm_movss(*(int32_t *)(g4 + 8)), v1); // 0x70b7e
    *(int32_t *)(g9 + 8) = __asm_movss_1646(v4);
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x70b86
    *(int32_t *)(g9 + 12) = __asm_movss_1646(v5);
    int128_t v6 = __asm_movss(*(int32_t *)g4); // 0x70b90
    int128_t v7 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x70b94
    int128_t v8 = __asm_mulss(v6, v6); // 0x70b99
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x70b9d
    int128_t v10 = __asm_mulss(v7, v7); // 0x70ba2
    int128_t v11 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x70ba6
    int128_t v12 = __asm_mulss(v9, v9); // 0x70bab
    int128_t v13 = __asm_mulss(v11, v11); // 0x70baf
    int128_t v14 = __asm_addss_1661(v8, v10); // 0x70bb3
    int128_t v15 = __asm_addss_1661(__asm_addss_1661(v14, v12), v13); // 0x70bbb
    __asm_ucomiss(v15, 0);
    bool v16; // pf
    bool v17; // zf
    if (v16 || !v17) {
        int128_t v18 = __asm_divss(__asm_movss(0x3f800000), v15); // 0x70bd0
        int128_t v19 = __asm_mulss(v2, v18); // 0x70bd4
        int128_t v20 = __asm_mulss(v3, v18); // 0x70bd8
        int128_t v21 = __asm_mulss(v4, v18); // 0x70bdc
        int128_t v22 = __asm_mulss(v5, v18); // 0x70be0
        *(int32_t *)g9 = __asm_movss_1646(v19);
        *(int32_t *)(g9 + 4) = __asm_movss_1646(v20);
        *(int32_t *)(g9 + 8) = __asm_movss_1646(v21);
        *(int32_t *)(g9 + 12) = __asm_movss_1646(v22);
        return g4;
    }
    // 0x70c02
    return g4;
}

// Address range: 0x70c10 - 0x70cac
float80_t function_70c10(int32_t a1) {
    int32_t v1 = g5; // bp-4
    int32_t v2 = (int32_t)&v1 - 4; // 0x70c13
    bool v3 = llvm_ctpop_i8((char)v2) % 2 == 0; // pf
    g4 = a1;
    int128_t v4 = __asm_movss(*(int32_t *)a1); // 0x70c19
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x70c1d
    int128_t v6 = __asm_movaps(v4); // 0x70c22
    int128_t v7 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x70c25
    int128_t v8 = __asm_mulss(v6, v4); // 0x70c2a
    int128_t v9 = __asm_movaps(v5); // 0x70c2e
    int128_t v10 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x70c31
    int128_t v11 = __asm_addss_1661(v8, __asm_mulss(v9, v5)); // 0x70c3a
    int128_t v12 = __asm_movaps(v7); // 0x70c3e
    int128_t v13 = __asm_addss_1661(v11, __asm_mulss(v12, v7)); // 0x70c45
    int128_t v14 = __asm_movaps(v10); // 0x70c49
    int128_t v15 = __asm_addss_1661(v13, __asm_mulss(v14, v10)); // 0x70c50
    __asm_ucomiss(v15, 0);
    if (v3 || v2 != 0) {
        int128_t v16 = __asm_sqrtss(v15); // 0x70c5d
        int128_t v17 = __asm_divss(__asm_movss(0x3f800000), v16); // 0x70c69
        int128_t v18 = __asm_mulss(v10, v17); // 0x70c6d
        int128_t v19 = __asm_mulss(v7, v17); // 0x70c71
        int128_t v20 = __asm_mulss(v5, v17); // 0x70c75
        int128_t v21 = __asm_mulss(v17, v4); // 0x70c79
        *(int32_t *)(g4 + 12) = __asm_movss_1646(v18);
        *(int32_t *)(g4 + 8) = __asm_movss_1646(v19);
        *(int32_t *)(g4 + 4) = __asm_movss_1646(v20);
        *(int32_t *)g4 = __asm_movss_1646(v21);
        g13--;
        return __asm_movss_1646(v16);
    }
    // 0x70ca2
    g13--;
    return __asm_movss_1646(v15);
}

// Address range: 0x70cb0 - 0x70d35
int32_t function_70cb0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g9 = a1;
    int128_t v2 = __asm_movss(a2); // 0x70cb9
    g4 = a3;
    int128_t v3 = __asm_subss(__asm_movss(0x3f800000), v2); // 0x70cc9
    int128_t v4 = __asm_movss(*(int32_t *)g9); // 0x70ccd
    *(int32_t *)g4 = __asm_movss_1646(__asm_mulss(v4, v3));
    int128_t v5 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x70cd9
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_mulss(v5, v3));
    int128_t v6 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v3); // 0x70cec
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v6);
    int128_t v7 = __asm_xorps(v6, v6); // 0x70cf5
    __asm_ucomiss(v7, *(int32_t *)(g4 + 12));
    int128_t v8 = __asm_mulss_1654(v3, *(int32_t *)(g9 + 12)); // 0x70cfc
    if (&v1 < (int32_t *)4 || &v1 == (int32_t *)4) {
        // 0x70d03
        *(int32_t *)(g4 + 12) = __asm_movss_1646(__asm_addss_1661(v8, v2));
        float80_t v9 = function_70c10(g4); // 0x70d0f
        g4 = (float32_t)v9;
        return (float32_t)v9;
    }
    // 0x70d20
    *(int32_t *)(g4 + 12) = __asm_movss_1646(__asm_subss(v8, v2));
    float80_t v10 = function_70c10(g4); // 0x70d2c
    g4 = (float32_t)v10;
    return (float32_t)v10;
}

// Address range: 0x70d40 - 0x70d96
int32_t function_70d40(int32_t a1, int32_t * a2, int32_t a3, int32_t a4) {
    // 0x70d40
    g4 = 0;
    int32_t v1 = g6; // 0x70d45
    int128_t v2 = __asm_movss(a3); // 0x70d49
    g6 = a1;
    g7 = (int32_t)a2;
    int128_t v3 = __asm_subss(__asm_movss(0x3f800000), v2); // 0x70d5c
    g9 = a4;
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + g4)); // 0x70d63
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + g7)); // 0x70d68
    int128_t v6 = __asm_mulss(v4, v3); // 0x70d6d
    int128_t v7 = __asm_mulss(v5, v2); // 0x70d71
    *(int32_t *)(g4 + g9) = __asm_movss_1646(__asm_addss_1661(v6, v7));
    int32_t v8 = g4; // 0x70d7e
    int32_t v9 = v8 + 4; // 0x70d7e
    g4 = v9;
    while (v8 != 12) {
        // 0x70d63
        v4 = __asm_movss(*(int32_t *)(g6 + v9));
        v5 = __asm_movss(*(int32_t *)(g4 + g7));
        v6 = __asm_mulss(v4, v3);
        v7 = __asm_mulss(v5, v2);
        *(int32_t *)(g4 + g9) = __asm_movss_1646(__asm_addss_1661(v6, v7));
        v8 = g4;
        v9 = v8 + 4;
        g4 = v9;
    }
    float80_t v10 = function_70c10(g9); // 0x70d89
    g4 = (float32_t)v10;
    g6 = v1;
    return (float32_t)v10;
}

// Address range: 0x70da0 - 0x70de9
int32_t function_70da0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a2;
    int32_t v2 = g6; // 0x70da9
    g6 = a1;
    int32_t v3 = g10; // 0x70daf
    int32_t v4; // bp-28
    g10 = &v4;
    function_70800(a1, a2, &v4);
    g4 = a3;
    int32_t result = function_70d40(g6, &v4, a3, a4); // 0x70dda
    g4 = result;
    g6 = v2;
    g10 = v3;
    return result;
}

// Address range: 0x70df0 - 0x70f62
int32_t function_70df0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x70df3
    int32_t v2 = g6; // bp-12
    bool v3 = &v2 < (int32_t *)4; // cf
    bool v4 = &v2 == (int32_t *)4; // zf
    g6 = a1;
    int128_t v5 = __asm_movss(0x3f800000); // 0x70dfb
    g4 = a2;
    g10 = a3;
    int128_t v6 = __asm_movss(*(int32_t *)g6); // 0x70e09
    int128_t v7 = __asm_movss(*(int32_t *)(g6 + 20)); // 0x70e0d
    int128_t v8 = __asm_movaps(v6); // 0x70e12
    int128_t v9 = __asm_movss(*(int32_t *)(g6 + 40)); // 0x70e15
    int128_t v10 = __asm_addss_1661(v8, v7); // 0x70e1a
    int128_t v11 = __asm_addss_1661(__asm_addss_1661(v10, v9), v5); // 0x70e22
    __asm_ucomiss(v11, 0x3f800001);
    if (v3 || v4) {
        // 0x70e33
        __asm_ucomiss_1648(v6, v7);
        if (v3 || v4) {
            goto lab_0x70e38;
        } else {
            // 0x70ea0
            __asm_ucomiss_1648(v6, v9);
            if (v3 || v4) {
                goto lab_0x70e38;
            } else {
                int128_t v12 = __asm_subss(__asm_addss_1661(v5, v6), v7); // 0x70ea9
                *(int32_t *)g4 = __asm_movss_1646(__asm_subss(v12, v9));
                int128_t v13 = __asm_movss(*(int32_t *)(g6 + 16)); // 0x70eb5
                *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_addss(v13, *(int32_t *)(g6 + 4)));
                int128_t v14 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x70ec4
                *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v14, *(int32_t *)(g6 + 32)));
                int128_t v15 = __asm_movss(*(int32_t *)(g6 + 36)); // 0x70ed3
                int32_t v16 = *(int32_t *)(g6 + 24); // 0x70ed8
                *(int32_t *)(g4 + 12) = __asm_movss_1646(__asm_subss_1651(v15, v16));
                goto lab_0x70e7e;
            }
        }
    } else {
        int128_t v17 = __asm_movss(*(int32_t *)(g6 + 36)); // 0x70ee8
        *(int32_t *)g4 = __asm_movss_1646(__asm_subss_1651(v17, *(int32_t *)(g6 + 24)));
        int128_t v18 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x70ef6
        *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_subss_1651(v18, *(int32_t *)(g6 + 32)));
        int128_t v19 = __asm_movss(*(int32_t *)(g6 + 16)); // 0x70f05
        int128_t v20 = __asm_subss_1651(v19, *(int32_t *)(g6 + 4)); // 0x70f0a
        *(int32_t *)(g4 + 12) = __asm_movss_1646(v11);
        *(int32_t *)(g4 + 8) = __asm_movss_1646(v20);
        goto lab_0x70e7e;
    }
  lab_0x70e38:
    // 0x70e38
    __asm_ucomiss_1648(v7, v9);
    if (v3 || v4) {
        int128_t v21 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x70e41
        int128_t v22 = __asm_addss_1661(v5, v9); // 0x70e46
        int128_t v23 = __asm_addss(v21, *(int32_t *)(g6 + 32)); // 0x70e4a
        int128_t v24 = __asm_subss(v22, v6); // 0x70e4f
        *(int32_t *)g4 = __asm_movss_1646(v23);
        int128_t v25 = __asm_movss(*(int32_t *)(g6 + 36)); // 0x70e57
        int128_t v26 = __asm_subss(v24, v7); // 0x70e5c
        int128_t v27 = __asm_addss(v25, *(int32_t *)(g6 + 24)); // 0x70e60
        *(int32_t *)(g4 + 8) = __asm_movss_1646(v26);
        *(int32_t *)(g4 + 4) = __asm_movss_1646(v27);
        int128_t v28 = __asm_movss(*(int32_t *)(g6 + 16)); // 0x70e6f
        *(int32_t *)(g4 + 12) = __asm_movss_1646(__asm_subss_1651(v28, *(int32_t *)(g6 + 4)));
    } else {
        int128_t v29 = __asm_addss_1661(v5, v7); // 0x70f20
        int128_t v30 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x70f24
        int128_t v31 = __asm_addss(v30, *(int32_t *)(g6 + 16)); // 0x70f29
        int128_t v32 = __asm_subss(v29, v6); // 0x70f2e
        *(int32_t *)g4 = __asm_movss_1646(v31);
        *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_subss(v32, v9));
        int128_t v33 = __asm_movss(*(int32_t *)(g6 + 36)); // 0x70f3f
        *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v33, *(int32_t *)(g6 + 24)));
        int128_t v34 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x70f4e
        int32_t v35 = *(int32_t *)(g6 + 32); // 0x70f53
        *(int32_t *)(g4 + 12) = __asm_movss_1646(__asm_subss_1651(v34, v35));
    }
    goto lab_0x70e7e;
  lab_0x70e7e:
    // 0x70e7e
    g4 = (float32_t)function_70c10(g4);
    int32_t v36 = *(int32_t *)(g6 + 12); // 0x70e88
    g4 = v36;
    *(int32_t *)g10 = v36;
    int32_t v37 = *(int32_t *)(g6 + 28); // 0x70e8d
    g4 = v37;
    *(int32_t *)(g10 + 4) = v37;
    int32_t v38 = *(int32_t *)(g6 + 44); // 0x70e93
    g4 = v38;
    *(int32_t *)(g10 + 8) = v38;
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x70f70 - 0x70f71
int32_t function_70f70(int32_t * a1, int32_t a2, int32_t * a3) {
    // 0x70f70
    return g4;
}

// Address range: 0x70f89 - 0x70f8a
int32_t function_70f89(void) {
    // 0x70f89
    return g4;
}

// Address range: 0x70f91 - 0x70f93
int32_t function_70f91(int32_t a1) {
    // 0x70f91
    g7 = a1;
    return g4;
}

// Address range: 0x70f9d - 0x70fa1
int32_t function_70f9d(int32_t result) {
    // 0x70f9d
    g4 = result;
    return result;
}

// Address range: 0x70ffb - 0x70ffc
int32_t function_70ffb(void) {
    // 0x70ffb
    return g4;
}

// Address range: 0x7100a - 0x7100e
int32_t function_7100a(int32_t a1, int32_t a2) {
    // 0x7100a
    g7 = a1;
    return g4;
}

// Address range: 0x7101a - 0x710bf
int32_t function_7101a(int32_t a1, int32_t a2, int32_t a3) {
    // 0x7101a
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 40)); // 0x7101c
    int32_t v3 = v1 - 16; // 0x71020
    float80_t v4; // st7
    *(float64_t *)v3 = (float64_t)v4;
    int128_t v5 = __asm_cvtpd2ps(__asm_movsd_1649(*(int64_t *)v3)); // 0x71028
    int128_t v6 = __asm_movaps(v5); // 0x7102c
    int128_t v7 = __asm_divss_1666(v6, *(int32_t *)(v1 - 20)); // 0x7102f
    int128_t v8 = __asm_mulss(v2, v7); // 0x71034
    int128_t v9 = __asm_mulss(v5, v5); // 0x71038
    *(int32_t *)g10 = __asm_movss_1646(v8);
    int128_t v10 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x71040
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_mulss(v10, v7));
    int128_t v11 = __asm_mulss_1654(v7, *(int32_t *)(g6 + 8)); // 0x7104e
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v11);
    int128_t v12 = __asm_subss(__asm_movss(*(int32_t *)(v1 - 56)), v9); // 0x7105d
    int128_t v13 = __asm_xorps(v9, v9); // 0x71061
    int128_t v14 = __asm_movaps(v13); // xmm2
    __asm_ucomiss_1648(v13, v12);
    bool v15; // cf
    bool v16; // zf
    if (v15 || v16) {
        // 0x7106c
        v14 = __asm_sqrtss(v12);
    }
    // 0x71070
    __asm_ucomiss(v13, *(int32_t *)(g6 + 12));
    if (v15 || v16) {
        // 0x71076
        *(int32_t *)(g10 + 12) = __asm_movss_1646(v14);
        g6 = a1;
        g10 = a2;
        return g4;
    }
    int128_t v17 = __asm_xorps(v14, __asm_movss((int32_t)g233)); // 0x710b0
    *(int32_t *)(g10 + 12) = __asm_movss_1646(v17);
    g6 = a1;
    g10 = a2;
    return g4;
}

// Address range: 0x710c0 - 0x7112c
int32_t function_710c0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x710c9
    g6 = a1;
    g4 = a2;
    int32_t v3 = g10; // 0x710d6
    g10 = a3;
    int32_t v4; // bp-28
    g4 = function_70800(a1, a2, &v4);
    int128_t v5 = __asm_movss(v4); // 0x710e8
    *(int32_t *)g10 = __asm_movss_1646(__asm_addss(v5, *(int32_t *)g6));
    int32_t v6;
    int128_t v7 = __asm_movss(v6); // 0x710f5
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_addss(v7, *(int32_t *)(g6 + 4)));
    int32_t v8;
    int128_t v9 = __asm_movss(v8); // 0x71104
    *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_addss(v9, *(int32_t *)(g6 + 8)));
    int32_t v10;
    int128_t v11 = __asm_movss(v10); // 0x71113
    *(int32_t *)(g10 + 12) = __asm_movss_1646(__asm_addss(v11, *(int32_t *)(g6 + 12)));
    g6 = v2;
    g10 = v3;
    return g4;
}

// Address range: 0x71130 - 0x71178
float80_t function_71130(int32_t a1, int32_t a2) {
    g9 = a1;
    g4 = a2;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x7113c
    int128_t v2 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x71140
    int128_t v3 = __asm_mulss_1654(v1, *(int32_t *)g4); // 0x71145
    int128_t v4 = __asm_addss_1661(v3, __asm_mulss_1654(v2, *(int32_t *)(g4 + 4))); // 0x7114e
    int128_t v5 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x71152
    int128_t v6 = __asm_addss_1661(v4, __asm_mulss_1654(v5, *(int32_t *)(g4 + 8))); // 0x7115c
    int128_t v7 = __asm_movss(*(int32_t *)(g9 + 12)); // 0x71160
    int128_t v8 = __asm_addss_1661(v6, __asm_mulss_1654(v7, *(int32_t *)(g4 + 12))); // 0x7116a
    return __asm_movss_1646(v8);
}

// Address range: 0x71180 - 0x712c9
int32_t function_71180(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g10; // 0x71183
    int32_t v3 = g6; // 0x71184
    g6 = v1;
    g10 = a3;
    g4 = a2;
    if (v1 == a3) {
        int32_t v4 = *a1; // 0x71298
        g9 = v4;
        g9 = *(int32_t *)(v1 + 4);
        g9 = *(int32_t *)(v1 + 8);
        g9 = *(int32_t *)(v1 + 12);
        g4 = &v4;
        int32_t result = function_71180(&v4, a2, v1); // 0x712bd
        g4 = result;
        g6 = v3;
        g10 = v2;
        return result;
    }
    // 0x71199
    int32_t v5; // bp-28
    g9 = &v5;
    g4 = function_70800(v1, a2, &v5);
    int128_t v6 = __asm_movss(*(int32_t *)g6); // 0x711ac
    int128_t v7 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x711b0
    int32_t v8;
    int128_t v9 = __asm_movss(v8); // 0x711b5
    int32_t v10;
    int128_t v11 = __asm_movss(v10); // 0x711ba
    int128_t v12 = __asm_mulss(v6, v9); // 0x711bf
    int32_t v13;
    int128_t v14 = __asm_movss(v13); // 0x711c3
    int128_t v15 = __asm_mulss(v7, v11); // 0x711c8
    int128_t v16 = __asm_movss(v5); // 0x711cc
    int128_t v17 = __asm_addss_1661(v12, v15); // 0x711d1
    int128_t v18 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x711d5
    int128_t v19 = __asm_subss(v17, __asm_mulss(v18, v14)); // 0x711de
    int128_t v20 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 12)), v16); // 0x711e7
    *(int32_t *)g10 = __asm_movss_1646(__asm_addss_1661(v19, v20));
    int128_t v21 = __asm_movss(*(int32_t *)g6); // 0x711f3
    int128_t v22 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x711f7
    int128_t v23 = __asm_mulss(v21, v11); // 0x711fc
    int128_t v24 = __asm_subss(__asm_mulss(v22, v9), v23); // 0x71204
    int128_t v25 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x71208
    int128_t v26 = __asm_addss_1661(v24, __asm_mulss(v25, v16)); // 0x71211
    int128_t v27 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 12)), v14); // 0x7121a
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_addss_1661(v26, v27));
    int128_t v28 = __asm_movss(*(int32_t *)g6); // 0x71227
    int128_t v29 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x7122b
    int128_t v30 = __asm_mulss(v28, v14); // 0x71230
    int128_t v31 = __asm_subss(v30, __asm_mulss(v29, v16)); // 0x71238
    int128_t v32 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x7123c
    int128_t v33 = __asm_addss_1661(v31, __asm_mulss(v32, v9)); // 0x71245
    int128_t v34 = __asm_movss(*(int32_t *)(g6 + 12)); // 0x71249
    int128_t v35 = __asm_addss_1661(v33, __asm_mulss(v34, v11)); // 0x71252
    int128_t v36 = __asm_movss((int32_t)g233); // 0x71256
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v35);
    int128_t v37 = __asm_movss(*(int32_t *)g6); // 0x71263
    int128_t v38 = __asm_mulss_1654(v14, *(int32_t *)(g6 + 4)); // 0x71267
    int128_t v39 = __asm_mulss(__asm_xorps(v37, v36), v16); // 0x7126f
    int128_t v40 = __asm_mulss_1654(v11, *(int32_t *)(g6 + 8)); // 0x71273
    int128_t v41 = __asm_mulss_1654(v9, *(int32_t *)(g6 + 12)); // 0x71278
    int128_t v42 = __asm_subss(__asm_subss(v39, v38), v40); // 0x71281
    *(int32_t *)(g10 + 12) = __asm_movss_1646(__asm_addss_1661(v42, v41));
    g6 = v3;
    g10 = v2;
    return g4;
}

// Address range: 0x71343 - 0x71347
int32_t function_71343(int32_t result) {
    // 0x71343
    g4 = result;
    return result;
}

// Address range: 0x7137d - 0x713a3
float80_t function_7137d(void) {
    // 0x7137d
    int32_t v1; // ebp
    int32_t v2 = v1 - 48; // 0x7137d
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x71380
    int128_t v5 = __asm_addsd(v4, v4); // 0x71385
    int128_t v6 = __asm_cvtpd2ps(__asm_unpcklpd(v5, v5)); // 0x7138d
    *(int32_t *)(v1 - 52) = __asm_movss_1646(__asm_mulss_1654(v6, 0x42652ee0));
    return (float80_t)*(float32_t *)(v1 - 52);
}

// Address range: 0x713b0 - 0x713b1
int32_t function_713b0(int32_t * a1, int32_t a2) {
    // 0x713b0
    return g4;
}

// Address range: 0x71469 - 0x7146a
int32_t function_71469(void) {
    // 0x71469
    return g4;
}

// Address range: 0x71477 - 0x714c2
int32_t function_71477(int32_t a1, int32_t a2) {
    // 0x71477
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 56)); // 0x71479
    int128_t v3 = __asm_movss(*(int32_t *)(v1 - 12)); // 0x7147d
    int32_t v4 = v1 - 64; // 0x71482
    float80_t v5; // st7
    *(float64_t *)v4 = (float64_t)v5;
    int128_t v6 = __asm_movsd_1649(*(int64_t *)v4); // 0x71485
    int128_t v7 = __asm_mulss(v3, v2); // 0x7148a
    int128_t v8 = __asm_mulsd_1655(v6, *(int64_t *)(v1 - 32)); // 0x7148e
    *(int32_t *)g6 = __asm_movss_1646(v7);
    int128_t v9 = __asm_mulss(__asm_movss(*(int32_t *)(v1 - 16)), v2); // 0x7149c
    int128_t v10 = __asm_cvtpd2ps(__asm_unpcklpd(v8, v8)); // 0x714a4
    int128_t v11 = __asm_mulss_1654(v2, *(int32_t *)(v1 - 20)); // 0x714a8
    *(int32_t *)(g6 + 12) = __asm_movss_1646(v10);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v9);
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v11);
    g6 = a1;
    return g4;
}

// Address range: 0x714c8 - 0x714cd
int32_t function_714c8(void) {
    int128_t v1; // xmm1
    __asm_xorps(v1, v1);
    int32_t result = function_71469(); // 0x714cb
    g4 = result;
    return result;
}

// Address range: 0x714d0 - 0x714d1
int32_t function_714d0(int32_t * a1, int32_t * a2) {
    // 0x714d0
    return g4;
}

// Address range: 0x71503 - 0x71507
int32_t function_71503(int32_t result) {
    // 0x71503
    g4 = result;
    return result;
}

// Address range: 0x7150e - 0x71512
int32_t function_7150e(int32_t result) {
    // 0x7150e
    g4 = result;
    return result;
}

// Address range: 0x7158d - 0x7158e
int32_t function_7158d(void) {
    // 0x7158d
    return g4;
}

// Address range: 0x715b8 - 0x7160d
int32_t function_715b8(int32_t a1, int32_t a2) {
    // 0x715b8
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 72)); // 0x715ba
    int128_t v3 = __asm_movss(*(int32_t *)(v1 - 24)); // 0x715be
    int32_t v4 = v1 - 112; // 0x715c3
    float80_t v5; // st7
    *(float64_t *)v4 = (float64_t)v5;
    int128_t v6 = __asm_movsd_1649(*(int64_t *)v4); // 0x715c6
    int128_t v7 = __asm_mulss(v3, v2); // 0x715cb
    int128_t v8 = __asm_mulsd_1655(v6, 0x3fe0000000000000); // 0x715cf
    *(int32_t *)g6 = __asm_movss_1646(v7);
    int128_t v9 = __asm_movss(*(int32_t *)(v1 - 40)); // 0x715db
    int128_t v10 = __asm_cvtpd2ps(__asm_unpcklpd(v8, v8)); // 0x715e4
    *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_mulss(v9, v2));
    int128_t v11 = __asm_movss(*(int32_t *)(v1 - 56)); // 0x715f1
    *(int32_t *)(g6 + 12) = __asm_movss_1646(v10);
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_mulss(v11, v2));
    g6 = a1;
    return g4;
}

// Address range: 0x71610 - 0x71618
int32_t function_71610(void) {
    int128_t v1; // xmm2
    __asm_xorps(v1, v1);
    int32_t result = function_7158d(); // 0x71613
    g4 = result;
    return result;
}

// Address range: 0x71620 - 0x717b1
int32_t function_71620(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x71623
    int32_t v2 = g10; // 0x71624
    int32_t v3 = g6; // 0x71625
    g7 = a4;
    if (a2 == 1) {
        // 0x7175a
        g9 = a3;
        int32_t v4 = *(int32_t *)a3; // 0x7175d
        g4 = v4;
        *(int32_t *)a1 = v4;
        g9 = a3;
        int32_t v5 = *(int32_t *)(a3 + 4); // 0x71767
        g4 = v5;
        *(int32_t *)(a1 + 4) = v5;
        g9 = a3;
        int32_t v6 = *(int32_t *)(a3 + 8); // 0x71773
        g4 = v6;
        *(int32_t *)(a1 + 8) = v6;
        g9 = a3;
        int32_t v7 = *(int32_t *)(a3 + 12); // 0x7177f
        g4 = v7;
        g9 = a1;
        *(int32_t *)(a1 + 12) = v7;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    // 0x71636
    g9 = a2;
    int32_t v8; // bp-76
    if (a2 < 1) {
        // 0x71790
        v8 = 0;
        g10 = &v8;
    } else {
        int128_t v9; // xmm2
        int128_t v10 = __asm_xorps(v9, v9); // 0x71641
        g4 = 0;
        int128_t v11 = __asm_movaps(v10); // xmm0
        int128_t v12 = __asm_movss(0x3f800000); // 0x71649
        g9 = a2;
        bool v13; // cf
        int128_t v14; // 0x71660
        bool v15; // zf
        while (true) {
            // 0x7166c
            if (a4 != 0) {
                // 0x71660
                v14 = __asm_addss(v11, *(int32_t *)(4 * g4 + a4));
                v11 = v14;
                int32_t v16 = g4 + 1; // 0x71665
                g4 = v16;
                uint32_t v17 = g9; // 0x71668
                v13 = v16 < v17;
                v15 = v16 == v17;
                if (v16 == v17) {
                    // break -> 0x71680
                    break;
                }
            } else {
                // 0x71670
                g4++;
                int128_t v18 = __asm_addss_1661(v11, v12); // 0x71673
                v11 = v18;
                uint32_t v19 = g4; // 0x71677
                uint32_t v20 = g9; // 0x71677
                v13 = v19 < v20;
                v15 = v19 == v20;
                if (v19 == v20) {
                    v14 = v18;
                    // break -> 0x71680
                    break;
                }
            }
        }
        // 0x71680
        __asm_ucomiss_1648(v14, v10);
        int32_t v21;
        if (v13 || v15) {
            // 0x71750
            v21 = __asm_movss_1646(v12);
        } else {
            // 0x71689
            v21 = __asm_movss_1646(__asm_divss(v12, v11));
        }
        // 0x71692
        g4 = a3;
        g8 = 0;
        v8 = 0;
        int32_t v22; // bp-44
        g6 = &v22;
        g10 = &v8;
        g7 = a3;
        int32_t v23; // bp-60
        int32_t v24 = &v23; // 0x716d7
        while (true) {
            // 0x716c0
            g4 = a4;
            int128_t v25 = __asm_movss(v21); // 0x716c3
            int128_t v26; // 0x716e1
            if (a4 != 0) {
                // 0x716cc
                g4 = a4;
                v26 = __asm_mulss_1654(v25, *(int32_t *)(4 * g8 + a4));
            } else {
                v26 = v25;
            }
            // 0x716d4
            g4 = a3;
            g9 = v24;
            int32_t v27 = __asm_movss_1646(v26); // 0x716e1
            g4 = function_70800(g4, v24, &g870);
            g9 = v24;
            function_714d0(&v23, &v22);
            g4 = 0;
            int128_t v28 = __asm_movss(v27); // 0x71706
            int128_t v29 = __asm_movss(*(int32_t *)(g4 + g6)); // 0x7170b
            int32_t v30 = g4; // 0x71710
            g9 = v30 + g10;
            g4 = v30 + 4;
            int128_t v31 = __asm_mulss(v29, v28); // 0x71719
            int128_t v32 = __asm_addss(v31, *(int32_t *)g9); // 0x7171d
            *(int32_t *)g9 = __asm_movss_1646(v32);
            while (v30 != 12) {
                // 0x7170b
                v29 = __asm_movss(*(int32_t *)(g4 + g6));
                v30 = g4;
                g9 = v30 + g10;
                g4 = v30 + 4;
                v31 = __asm_mulss(v29, v28);
                v32 = __asm_addss(v31, *(int32_t *)g9);
                *(int32_t *)g9 = __asm_movss_1646(v32);
            }
            int32_t v33 = g8 + 1; // 0x71727
            g8 = v33;
            g7 += 16;
            if (v33 == a2) {
                // break -> 0x71732
                break;
            }
        }
    }
    // 0x71732
    g4 = a1;
    int32_t result = function_713b0(&v8, a1); // 0x7173c
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x717b1 - 0x7191a
int32_t function_717b1(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x717c3
    int32_t v2 = g6; // 0x717c4
    g4 = a1;
    g10 = a2;
    g6 = a3;
    int32_t v3 = *(int32_t *)a1; // 0x717d1
    g9 = v3;
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x717d6
    g9 = v4;
    int32_t v5 = *(int32_t *)(a1 + 8); // 0x717d9
    int32_t v6 = &v3; // 0x717e2
    g4 = v6;
    g4 = (float32_t)function_6d750(v6);
    g13++;
    int128_t v7 = __asm_movss(v3); // 0x717ef
    int32_t v8; // bp-36
    g4 = &v8;
    int128_t v9 = __asm_movss(v4); // 0x717f7
    int128_t v10 = __asm_movss(*(int32_t *)g10); // 0x717fc
    int128_t v11 = __asm_movaps(v7); // 0x71800
    int128_t v12 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x71803
    int128_t v13 = __asm_movaps(v9); // 0x71808
    int128_t v14 = __asm_mulss(v11, v10); // 0x7180b
    int128_t v15 = __asm_movss(v5); // 0x7180f
    int128_t v16 = __asm_mulss(v13, v12); // 0x71814
    int128_t v17 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x71818
    int128_t v18 = __asm_addss_1661(v14, v16); // 0x71820
    int128_t v19 = __asm_movaps(v15); // 0x71824
    int128_t v20 = __asm_addss_1661(v18, __asm_mulss(v19, v17)); // 0x7182b
    int128_t v21 = __asm_mulss(v7, v20); // 0x7182f
    int128_t v22 = __asm_mulss(v9, v20); // 0x71833
    int128_t v23 = __asm_mulss(v20, v15); // 0x71837
    int128_t v24 = __asm_subss(v10, v21); // 0x7183b
    int128_t v25 = __asm_subss(v12, v22); // 0x7183f
    int128_t v26 = __asm_subss(v17, v23); // 0x71843
    v8 = __asm_movss_1646(v24);
    int32_t v27 = __asm_movss_1646(v25); // 0x7184c
    int32_t v28 = __asm_movss_1646(v26); // 0x71851
    g4 = (float32_t)function_6d750(v28);
    g13++;
    int128_t v29 = __asm_movss(v4); // 0x7185d
    int32_t v30; // bp-24
    g4 = &v30;
    int128_t v31 = __asm_movss(v5); // 0x71865
    int128_t v32 = __asm_movss(v27); // 0x7186d
    int128_t v33 = __asm_movaps(v29); // 0x71872
    int128_t v34 = __asm_movss(v28); // 0x71875
    int128_t v35 = __asm_mulss(__asm_movaps(v31), v32); // 0x7187d
    int128_t v36 = __asm_subss(__asm_mulss(v33, v34), v35); // 0x71885
    int128_t v37 = __asm_movss(v3); // 0x71889
    int128_t v38 = __asm_mulss(v34, v37); // 0x7188e
    v30 = __asm_movss_1646(v36);
    int128_t v39 = __asm_movss(v8); // 0x71897
    int128_t v40 = __asm_mulss(v37, v32); // 0x7189c
    int128_t v41 = __asm_mulss(v31, v39); // 0x718a0
    int128_t v42 = __asm_mulss(v39, v29); // 0x718a4
    int128_t v43 = __asm_subss(v41, v38); // 0x718a8
    int128_t v44 = __asm_subss(v40, v42); // 0x718ac
    int32_t v45 = __asm_movss_1646(v43); // 0x718b0
    int32_t v46 = __asm_movss_1646(v44); // 0x718b5
    g4 = (float32_t)function_6d750(v46);
    g13++;
    int128_t v47 = __asm_movss(v30); // 0x718c1
    int128_t v48 = __asm_movss(v45); // 0x718c6
    int128_t v49 = __asm_addss(v47, v4); // 0x718cb
    int128_t v50 = __asm_movss(v8); // 0x718d0
    int128_t v51 = __asm_movss(v5); // 0x718d5
    int128_t v52 = __asm_addss(v49, v28); // 0x718da
    int128_t v53 = __asm_subss_1651(v48, v3); // 0x718df
    int128_t v54 = __asm_subss_1651(v50, v46); // 0x718e4
    int128_t v55 = __asm_subss_1651(v51, v27); // 0x718e9
    int128_t v56 = __asm_addss(v52, 0x3f800000); // 0x718ee
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v53);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v54);
    *(int32_t *)g6 = __asm_movss_1646(v55);
    *(int32_t *)(g6 + 12) = __asm_movss_1646(v56);
    float80_t v57 = function_70c10(g6); // 0x7190c
    g4 = (float32_t)v57;
    g6 = v2;
    g10 = v1;
    return (float32_t)v57;
}

// Address range: 0x71920 - 0x71af3
int32_t function_71920(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int128_t v1 = __asm_movss(0x3f800000); // 0x71921
    g4 = a1;
    g9 = a2;
    int128_t v2 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x71931
    int128_t v3 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x71936
    int128_t v4 = __asm_cvtps2pd(v2); // 0x7193b
    int128_t v5 = __asm_movapd(v4); // 0x7193e
    int128_t v6 = __asm_cvtps2pd(v3); // 0x71942
    int128_t v7 = __asm_mulsd(__asm_addsd(v5, v4), v4); // 0x71949
    int128_t v8 = __asm_subsd(__asm_movsd_1649(*(int64_t *)&g176), v7); // 0x71955
    int128_t v9 = __asm_addsd(__asm_movapd(v6), v6); // 0x7195d
    int128_t v10 = __asm_subsd(v8, __asm_mulsd(v9, v6)); // 0x71965
    int128_t v11 = __asm_unpcklpd(v10, v10); // 0x71969
    *(int32_t *)g9 = __asm_movss_1646(__asm_cvtpd2ps(v11));
    int128_t v12 = __asm_movss(*(int32_t *)g4); // 0x71975
    int128_t v13 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x71979
    int128_t v14 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x7197e
    int128_t v15 = __asm_cvtps2pd(v12); // 0x71983
    int128_t v16 = __asm_addsd(v15, v15); // 0x71986
    int128_t v17 = __asm_cvtps2pd(v13); // 0x7198a
    int128_t v18 = __asm_cvtps2pd(v14); // 0x7198d
    int128_t v19 = __asm_mulsd(v16, v17); // 0x71990
    int128_t v20 = __asm_cvtps2pd(__asm_movss(*(int32_t *)(g4 + 12))); // 0x71999
    int128_t v21 = __asm_addsd(v20, v20); // 0x7199c
    int128_t v22 = __asm_addsd(v19, __asm_mulsd(v21, v18)); // 0x719a4
    int128_t v23 = __asm_unpcklpd(v22, v22); // 0x719a8
    *(int32_t *)(g9 + 16) = __asm_movss_1646(__asm_cvtpd2ps(v23));
    int128_t v24 = __asm_movss(*(int32_t *)g4); // 0x719b5
    int128_t v25 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x719b9
    int128_t v26 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x719be
    int128_t v27 = __asm_cvtps2pd(v24); // 0x719c3
    int128_t v28 = __asm_addsd(v27, v27); // 0x719c6
    int128_t v29 = __asm_cvtps2pd(v25); // 0x719ca
    int128_t v30 = __asm_cvtps2pd(v26); // 0x719cd
    int128_t v31 = __asm_mulsd(v28, v29); // 0x719d0
    int128_t v32 = __asm_cvtps2pd(__asm_movss(*(int32_t *)(g4 + 12))); // 0x719d9
    int128_t v33 = __asm_addsd(v32, v32); // 0x719dc
    int128_t v34 = __asm_subsd(v31, __asm_mulsd(v33, v30)); // 0x719e4
    int128_t v35 = __asm_unpcklpd(v34, v34); // 0x719e8
    *(int32_t *)(g9 + 32) = __asm_movss_1646(__asm_cvtpd2ps(v35));
    int128_t v36 = __asm_movss(*(int32_t *)g4); // 0x719f5
    int128_t v37 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x719f9
    int128_t v38 = __asm_addss_1661(v36, v36); // 0x719fe
    int128_t v39 = __asm_addss_1661(v37, v37); // 0x71a02
    int128_t v40 = __asm_mulss_1654(v38, *(int32_t *)(g4 + 4)); // 0x71a06
    int128_t v41 = __asm_mulss_1654(v39, *(int32_t *)(g4 + 8)); // 0x71a0b
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_subss(v40, v41));
    int128_t v42 = __asm_movss(*(int32_t *)g4); // 0x71a19
    int128_t v43 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x71a1d
    int128_t v44 = __asm_movaps(v42); // 0x71a22
    int128_t v45 = __asm_mulss(__asm_addss_1661(v44, v42), v42); // 0x71a29
    int128_t v46 = __asm_movaps(v1); // 0x71a2d
    int128_t v47 = __asm_movaps(__asm_subss(v46, v45)); // 0x71a34
    int128_t v48 = __asm_movaps(v43); // 0x71a37
    int128_t v49 = __asm_mulss(__asm_addss_1661(v48, v43), v43); // 0x71a3e
    *(int32_t *)(g9 + 20) = __asm_movss_1646(__asm_subss(v47, v49));
    int128_t v50 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x71a4b
    int128_t v51 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x71a50
    int128_t v52 = __asm_addss_1661(v50, v50); // 0x71a55
    int128_t v53 = __asm_addss_1661(v51, v51); // 0x71a59
    int128_t v54 = __asm_mulss_1654(v52, *(int32_t *)(g4 + 8)); // 0x71a5d
    int128_t v55 = __asm_mulss_1654(v53, *(int32_t *)g4); // 0x71a62
    *(int32_t *)(g9 + 36) = __asm_movss_1646(__asm_addss_1661(v54, v55));
    int128_t v56 = __asm_movss(*(int32_t *)g4); // 0x71a6f
    int128_t v57 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x71a73
    int128_t v58 = __asm_addss_1661(v56, v56); // 0x71a78
    int128_t v59 = __asm_addss_1661(v57, v57); // 0x71a7c
    int128_t v60 = __asm_mulss_1654(v58, *(int32_t *)(g4 + 8)); // 0x71a80
    int128_t v61 = __asm_mulss_1654(v59, *(int32_t *)(g4 + 4)); // 0x71a85
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss_1661(v60, v61));
    int128_t v62 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x71a93
    int128_t v63 = __asm_movss(*(int32_t *)(g4 + 12)); // 0x71a98
    int128_t v64 = __asm_addss_1661(v62, v62); // 0x71a9d
    int128_t v65 = __asm_addss_1661(v63, v63); // 0x71aa1
    int128_t v66 = __asm_mulss_1654(v64, *(int32_t *)(g4 + 8)); // 0x71aa5
    int128_t v67 = __asm_mulss_1654(v65, *(int32_t *)g4); // 0x71aaa
    *(int32_t *)(g9 + 24) = __asm_movss_1646(__asm_subss(v66, v67));
    int128_t v68 = __asm_movss(*(int32_t *)g4); // 0x71ab7
    int128_t v69 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x71abb
    g4 = 0;
    int128_t v70 = __asm_movaps(v68); // 0x71ac2
    *(int32_t *)(g9 + 12) = g4;
    int128_t v71 = __asm_addss_1661(v70, v68); // 0x71ac8
    *(int32_t *)(g9 + 28) = g4;
    *(int32_t *)(g9 + 44) = g4;
    int128_t v72 = __asm_mulss(v71, v68); // 0x71ad2
    int128_t v73 = __asm_addss_1661(__asm_movaps(v69), v69); // 0x71ad9
    int128_t v74 = __asm_subss(v1, v72); // 0x71add
    int128_t v75 = __asm_mulss(v73, v69); // 0x71ae1
    int128_t v76 = __asm_movaps(v74); // 0x71ae5
    *(int32_t *)(g9 + 40) = __asm_movss_1646(__asm_subss(v76, v75));
    return g4;
}

// Address range: 0x71b00 - 0x71b3c
int32_t function_71b00(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g6; // 0x71b09
    int32_t v3 = g10; // 0x71b0c
    g6 = a3;
    g10 = a2;
    g4 = function_71920(a1, a3, v2, v3);
    int32_t v4 = *(int32_t *)g10; // 0x71b21
    g4 = v4;
    *(int32_t *)(g6 + 12) = v4;
    int32_t v5 = *(int32_t *)(g10 + 4); // 0x71b26
    g4 = v5;
    *(int32_t *)(g6 + 28) = v5;
    int32_t v6 = *(int32_t *)(g10 + 8); // 0x71b2c
    g4 = v6;
    *(int32_t *)(g6 + 44) = v6;
    g6 = v2;
    g10 = v3;
    return g4;
}

// Address range: 0x71b40 - 0x71b6e
int32_t function_71b40(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x71b43
    int32_t v2; // bp-60
    int32_t v3 = &v2; // 0x71b44
    g6 = v3;
    g4 = a1;
    function_71920(a1, v3, (int32_t)&g870, (int32_t)&g870);
    g4 = a2;
    int32_t result = function_6d8d0(v3, a2); // 0x71b63
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x71b70 - 0x71b71
int32_t function_71b70(int32_t * a1, int32_t a2, int32_t a3) {
    // 0x71b70
    return g4;
}

// Address range: 0x71b9a - 0x71bf6
int32_t function_71b9a(void) {
    int32_t v1 = g5 - 32; // 0x71b9a
    float80_t v2; // st7
    *(float64_t *)v1 = (float64_t)v2;
    int3_t v3; // fpu_stat_TOP
    g13 = v3 + 1;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v1); // 0x71b9d
    int128_t v5 = __asm_addsd(v4, v4); // 0x71ba2
    int128_t v6 = __asm_unpcklpd(v5, v5); // 0x71ba6
    int128_t v7 = __asm_mulss_1654(__asm_cvtpd2ps(v6), 0x42652ee0); // 0x71bae
    __asm_ucomiss(v7, 0x43340000);
    *(int32_t *)g8 = __asm_movss_1646(v7);
    bool v8; // cf
    bool v9; // zf
    if (!v8 && !v9) {
        // 0x71bc3
        *(int32_t *)g8 = __asm_movss_1646(__asm_subss_1651(v7, 0x43b40000));
    }
    int32_t v10 = g10; // 0x71bcf
    g4 = v10;
    *(int32_t *)g6 = v10;
    int32_t v11 = *(int32_t *)(g10 + 4); // 0x71bd3
    g4 = v11;
    *(int32_t *)(g6 + 4) = v11;
    int32_t v12 = *(int32_t *)(g10 + 8); // 0x71bd9
    g4 = v12;
    *(int32_t *)(g6 + 8) = v12;
    float80_t v13 = function_6d750(g6); // 0x71be2
    g4 = (float32_t)v13;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    return (float32_t)v13;
}

// Address range: 0x71c00 - 0x71c7a
int32_t function_71c00(int32_t a1, int32_t a2, int32_t a3) {
    int128_t v1 = __asm_movss(0x3c8efa35); // 0x71c06
    g9 = a1;
    g4 = a3;
    int128_t v2 = __asm_mulss_1654(__asm_mulss_1654(v1, a2), 0x3f000000); // 0x71c19
    int128_t v3 = __asm_cvtps2pd(__asm_unpcklps(v2, v2)); // 0x71c24
    float80_t v4 = (int64_t)__asm_movsd(v3); // 0x71c2c
    float80_t v5; // 0x71c2f
    float80_t v6; // 0x71c2f
    if (fabsl(v4) < 9223372036854775808.0L) {
        // bb
        v5 = sinl(v4);
        v6 = cosl(v4);
    } else {
        // 0x71c00
        v5 = v4;
        float80_t v7; // st6
        v6 = v7;
    }
    int128_t v8 = __asm_movss(*(int32_t *)g9); // 0x71c33
    int128_t v9 = __asm_cvtpd2ps(__asm_movsd_1649((int64_t)(float64_t)v5)); // 0x71c3f
    *(int32_t *)g4 = __asm_movss_1646(__asm_mulss(v8, v9));
    int128_t v10 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x71c4b
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_mulss(v10, v9));
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_mulss_1654(v9, *(int32_t *)(g9 + 8)));
    int128_t v11 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)v6); // 0x71c66
    int128_t v12 = __asm_unpcklpd(v11, v11); // 0x71c6b
    *(int32_t *)(g4 + 12) = __asm_movss_1646(__asm_cvtpd2ps(v12));
    return g4;
}

// Address range: 0x71c80 - 0x71dbb
int32_t function_71c80(int32_t a1, int32_t a2) {
    g9 = a1;
    int128_t v1 = __asm_movss(0x3f000000); // 0x71c89
    g4 = a2;
    int128_t v2 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v1); // 0x71c99
    int128_t v3 = __asm_unpcklps(v2, v2); // 0x71c9d
    float80_t v4 = (int64_t)__asm_movsd(__asm_cvtps2pd(v3)); // 0x71ca8
    float80_t v5; // 0x71cab
    float80_t v6; // 0x71cab
    if (fabsl(v4) < 9223372036854775808.0L) {
        // bb
        v5 = sinl(v4);
        v6 = cosl(v4);
    } else {
        // 0x71c80
        v5 = v4;
        float80_t v7; // st6
        v6 = v7;
    }
    int128_t v8 = __asm_movsd_1649((int64_t)(float64_t)v5); // 0x71cb5
    int128_t v9 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v6); // 0x71cba
    int128_t v10 = __asm_cvtpd2ps(v8); // 0x71cbf
    int128_t v11 = __asm_movapd(v9); // 0x71cc3
    int128_t v12 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x71cc7
    int128_t v13 = __asm_cvtpd2ps(__asm_unpcklpd(v11, v11)); // 0x71cd0
    int128_t v14 = __asm_mulss(v12, v1); // 0x71cd4
    int128_t v15 = __asm_unpcklps(v14, v14); // 0x71cd8
    float80_t v16 = (int64_t)__asm_movsd(__asm_cvtps2pd(v15)); // 0x71ce3
    float80_t v17; // 0x71ce6
    float80_t v18; // 0x71ce6
    if (fabsl(v16) < 9223372036854775808.0L) {
        // bb321
        v17 = sinl(v16);
        v18 = cosl(v16);
    } else {
        // ._crit_edge
        v17 = v16;
        v18 = v5;
    }
    int128_t v19 = __asm_movsd_1649((int64_t)(float64_t)v17); // 0x71cf0
    int128_t v20 = __asm_mulss_1654(v1, *(int32_t *)g9); // 0x71cf5
    int32_t v21 = __asm_movss_1646(__asm_cvtpd2ps(v19)); // 0x71cfd
    int128_t v22 = __asm_movapd(__asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v18)); // 0x71d07
    int128_t v23 = __asm_unpcklps(v20, v20); // 0x71d0b
    float80_t v24 = (int64_t)__asm_movsd(__asm_cvtps2pd(v23)); // 0x71d16
    int128_t v25 = __asm_cvtpd2ps(__asm_unpcklpd(v22, v22)); // 0x71d1d
    float80_t v26; // 0x71d21
    float80_t v27; // 0x71d21
    if (fabsl(v24) < 9223372036854775808.0L) {
        // bb324
        v26 = sinl(v24);
        v27 = cosl(v24);
    } else {
        // ._crit_edge8
        v26 = v24;
        v27 = v17;
    }
    int128_t v28 = __asm_movss(v21); // 0x71d28
    int128_t v29 = __asm_movsd_1649((int64_t)(float64_t)v26); // 0x71d30
    int32_t v30 = __asm_movss_1646(__asm_cvtpd2ps(v29)); // 0x71d39
    int128_t v31 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v27); // 0x71d3e
    int128_t v32 = __asm_movss(v30); // 0x71d43
    int128_t v33 = __asm_movapd(v31); // 0x71d48
    int128_t v34 = __asm_mulss(v32, v25); // 0x71d4c
    int128_t v35 = __asm_cvtpd2ps(__asm_unpcklpd(v33, v33)); // 0x71d54
    int128_t v36 = __asm_mulss(v28, v35); // 0x71d58
    int128_t v37 = __asm_mulss(v35, v25); // 0x71d5c
    int128_t v38 = __asm_movaps(v34); // 0x71d60
    int128_t v39 = __asm_mulss(v34, v10); // 0x71d63
    int128_t v40 = __asm_movaps(v36); // 0x71d67
    int128_t v41 = __asm_mulss(v36, v13); // 0x71d6a
    int128_t v42 = __asm_mulss(v38, v13); // 0x71d6e
    int128_t v43 = __asm_mulss(v40, v10); // 0x71d72
    int128_t v44 = __asm_addss_1661(v41, v39); // 0x71d76
    int128_t v45 = __asm_mulss_1654(__asm_movss(v21), v30); // 0x71d7f
    int128_t v46 = __asm_subss(v42, v43); // 0x71d84
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v44);
    *(int32_t *)g4 = __asm_movss_1646(v46);
    int128_t v47 = __asm_mulss(__asm_movaps(v37), v10); // 0x71d94
    int128_t v48 = __asm_mulss(__asm_movaps(v45), v13); // 0x71d9b
    int128_t v49 = __asm_mulss(v10, v45); // 0x71d9f
    int128_t v50 = __asm_mulss(v13, v37); // 0x71da3
    int128_t v51 = __asm_subss(v47, v48); // 0x71da7
    int128_t v52 = __asm_addss_1661(v50, v49); // 0x71dab
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v51);
    *(int32_t *)(g4 + 12) = __asm_movss_1646(v52);
    return g4;
}

// Address range: 0x71dc0 - 0x71f0d
int32_t function_71dc0(int32_t * a1, int32_t a2) {
    // 0x71dc0
    g9 = (int32_t)a1;
    int128_t v1 = __asm_movss(0x3c8efa35); // 0x71dc9
    int128_t v2 = __asm_movss(0x3f000000); // 0x71dd1
    g4 = a2;
    int128_t v3 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x71ddc
    int128_t v4 = __asm_mulss(__asm_mulss(v3, v1), v2); // 0x71de5
    int128_t v5 = __asm_unpcklps(v4, v4); // 0x71de9
    float80_t v6 = (int64_t)__asm_movsd(__asm_cvtps2pd(v5)); // 0x71df4
    int3_t v7 = g13 - 1; // 0x71df4
    int3_t v8; // 0x71dfb
    float80_t v9; // 0x71df7
    float80_t v10; // 0x71df7
    if (fabsl(v6) < 9223372036854775808.0L) {
        // bb
        v9 = sinl(v6);
        v10 = cosl(v6);
        v8 = g13 - 2;
    } else {
        // 0x71dc0
        v8 = v7;
        v9 = v6;
        v10 = g867;
    }
    int128_t v11 = __asm_movsd_1649((int64_t)(float64_t)v9); // 0x71e01
    int128_t v12 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v10); // 0x71e06
    int128_t v13 = __asm_cvtpd2ps(v11); // 0x71e0b
    int128_t v14 = __asm_movapd(v12); // 0x71e0f
    int128_t v15 = __asm_movss(*(int32_t *)g9); // 0x71e13
    int128_t v16 = __asm_cvtpd2ps(__asm_unpcklpd(v14, v14)); // 0x71e1b
    int128_t v17 = __asm_mulss(__asm_mulss(v15, v1), v2); // 0x71e23
    int128_t v18 = __asm_unpcklps(v17, v17); // 0x71e27
    int3_t v19 = v8 + 2; // 0x71e32
    float80_t v20 = (int64_t)__asm_movsd(__asm_cvtps2pd(v18)); // 0x71e32
    int3_t v21; // 0x71e39
    float80_t v22; // 0x71e35
    float80_t v23; // 0x71e35
    if (fabsl(v20) < 9223372036854775808.0L) {
        // bb103
        v22 = sinl(v20);
        v23 = cosl(v20);
        v21 = v19 - 2;
    } else {
        // ._crit_edge
        v21 = v19 - 1;
        v22 = v20;
        v23 = v9;
    }
    int128_t v24 = __asm_movsd_1649((int64_t)(float64_t)v22); // 0x71e3f
    int128_t v25 = __asm_mulss_1654(v1, *(int32_t *)(g9 + 8)); // 0x71e44
    int32_t v26 = __asm_movss_1646(__asm_cvtpd2ps(v24)); // 0x71e4d
    int128_t v27 = __asm_movapd(__asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v23)); // 0x71e57
    int128_t v28 = __asm_mulss(v25, v2); // 0x71e5b
    int128_t v29 = __asm_cvtpd2ps(__asm_unpcklpd(v27, v27)); // 0x71e63
    int128_t v30 = __asm_unpcklps(v28, v28); // 0x71e67
    int3_t v31 = v21 + 2; // 0x71e72
    float80_t v32 = (int64_t)__asm_movsd(__asm_cvtps2pd(v30)); // 0x71e72
    int3_t v33; // 0x71e79
    float80_t v34; // 0x71e75
    float80_t v35; // 0x71e75
    if (fabsl(v32) < 9223372036854775808.0L) {
        // bb106
        v34 = sinl(v32);
        v35 = cosl(v32);
        v33 = v31 - 2;
    } else {
        // ._crit_edge8
        v33 = v31 - 1;
        v34 = v32;
        v35 = v22;
    }
    // bb107
    g867 = v34;
    int128_t v36 = __asm_movss(v26); // 0x71e7c
    g13 = v33 + 2;
    int128_t v37 = __asm_movsd_1649((int64_t)(float64_t)v34); // 0x71e84
    int128_t v38 = __asm_movsd_1649((int64_t)(int32_t)(float32_t)(float64_t)v35); // 0x71e89
    int128_t v39 = __asm_cvtpd2ps(v37); // 0x71e8e
    int32_t v40 = __asm_movss_1646(v39); // 0x71e92
    int128_t v41 = __asm_movapd(v38); // 0x71e97
    int128_t v42 = __asm_mulss(__asm_movaps(v39), v29); // 0x71e9e
    int128_t v43 = __asm_cvtpd2ps(__asm_unpcklpd(v41, v41)); // 0x71ea6
    int128_t v44 = __asm_mulss(v36, v43); // 0x71eaa
    int128_t v45 = __asm_mulss(v43, v29); // 0x71eae
    g881 = v45;
    int128_t v46 = __asm_movaps(v42); // 0x71eb2
    int128_t v47 = __asm_mulss(v42, v13); // 0x71eb5
    int128_t v48 = __asm_movaps(v44); // 0x71eb9
    int128_t v49 = __asm_mulss(v44, v16); // 0x71ebc
    int128_t v50 = __asm_mulss(v46, v16); // 0x71ec0
    int128_t v51 = __asm_mulss(v48, v13); // 0x71ec4
    int128_t v52 = __asm_addss_1661(v49, v47); // 0x71ec8
    int128_t v53 = __asm_mulss_1654(__asm_movss(v26), v40); // 0x71ed1
    int128_t v54 = __asm_subss(v50, v51); // 0x71ed6
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v52);
    *(int32_t *)g4 = __asm_movss_1646(v54);
    int128_t v55 = __asm_mulss(__asm_movaps(v45), v13); // 0x71ee6
    int128_t v56 = __asm_mulss(__asm_movaps(v53), v16); // 0x71eed
    int128_t v57 = __asm_mulss(v13, v53); // 0x71ef1
    int128_t v58 = __asm_mulss(v16, v45); // 0x71ef5
    int128_t v59 = __asm_subss(v55, v56); // 0x71ef9
    int128_t v60 = __asm_addss_1661(v58, v57); // 0x71efd
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v59);
    *(int32_t *)(g4 + 12) = __asm_movss_1646(v60);
    return g4;
}

// Address range: 0x71f10 - 0x71f97
int32_t function_71f10(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x71f13
    int32_t v2; // bp-24
    int32_t v3 = &v2; // 0x71f14
    g6 = v3;
    g7 = a2;
    int128_t v4 = __asm_movss((int32_t)g233); // 0x71f1d
    g9 = a1;
    g4 = a3;
    int128_t v5 = __asm_movss(*(int32_t *)g7); // 0x71f2b
    int128_t v6 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x71f2f
    int128_t v7 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x71f34
    __asm_movss_1646(__asm_xorps(v5, v4));
    g7 = *(int32_t *)g9;
    __asm_movss_1646(__asm_xorps(v6, v4));
    __asm_movss_1646(__asm_xorps(v7, v4));
    int32_t v8 = g7; // bp-72
    int32_t v9 = g9; // 0x71f56
    g7 = *(int32_t *)(v9 + 4);
    g9 = *(int32_t *)(v9 + 8);
    int32_t v10 = g4; // 0x71f62
    g9 = *(int32_t *)v10;
    g9 = *(int32_t *)(v10 + 4);
    int32_t v11 = &v8; // 0x71f77
    g4 = v11;
    function_6d8d0(v11, v3);
    g4 = a4;
    int32_t result = function_71dc0(&v2, a4); // 0x71f8c
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x71fa0 - 0x71fce
int32_t function_71fa0(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x71fa3
    int32_t v2; // bp-24
    int32_t v3 = &v2; // 0x71fa4
    g6 = v3;
    g4 = a1;
    function_6d8d0(a1, v3);
    g4 = a2;
    int32_t result = function_71dc0(&v2, a2); // 0x71fc3
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x71fd0 - 0x72033
int32_t function_71fd0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g6; // 0x71fd9
    g6 = a2;
    int32_t v3 = g10; // 0x71fdf
    int32_t v4; // bp-60
    int32_t v5 = &v4; // 0x71fe2
    g10 = v5;
    g4 = function_71920(a1, v5, (int32_t)&g870, (int32_t)&g870);
    g4 = function_6d8d0(v5, g6);
    int128_t v6 = __asm_movss(0x3c8efa35); // 0x71ffd
    int128_t v7 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72005
    int128_t v8 = __asm_movss(*(int32_t *)g6); // 0x7200a
    int128_t v9 = __asm_mulss(v7, v6); // 0x7200e
    int128_t v10 = __asm_mulss(v8, v6); // 0x72012
    int128_t v11 = __asm_mulss_1654(v6, *(int32_t *)(g6 + 8)); // 0x72016
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v9);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v10);
    *(int32_t *)g6 = __asm_movss_1646(v11);
    g6 = v2;
    g10 = v3;
    return g4;
}

// Address range: 0x72040 - 0x721b3
int32_t function_72040(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t * a5, int32_t * a6, int32_t * a7) {
    int32_t v1 = g5; // bp-4
    int32_t v2 = (int32_t)&v1 - 12; // 0x72043
    bool v3 = v2 == 0; // zf
    bool v4 = llvm_ctpop_i8((char)v2) % 2 == 0; // pf
    g9 = a1;
    int32_t v5 = g10; // 0x72049
    g10 = a3;
    int32_t v6 = g6; // bp-16
    int32_t v7 = g8; // 0x72052
    g6 = (int32_t)a5;
    g8 = a2;
    int128_t v8 = __asm_movss(*(int32_t *)a1); // 0x7205b
    int128_t v9 = __asm_movss(*(int32_t *)g10); // 0x7205f
    g4 = a4;
    int128_t v10 = __asm_subss_1651(v9, *(int32_t *)g8); // 0x72066
    g878 = v10;
    *(int32_t *)g6 = __asm_movss_1646(v8);
    g7 = (int32_t)a6;
    *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_movss(*(int32_t *)(g9 + 4)));
    __asm_ucomiss(v10, 0);
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_movss(*(int32_t *)(g9 + 8)));
    *(int32_t *)g7 = __asm_movss_1646(__asm_movss(*(int32_t *)g4));
    int128_t v11 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x72094
    g879 = v11;
    *(int32_t *)(g7 + 4) = __asm_movss_1646(v11);
    *(int32_t *)(g7 + 8) = __asm_movss_1646(__asm_movss(*(int32_t *)(g4 + 8)));
    if (!v4 && v3) {
        // 0x721a6
        g6 = v6;
        g10 = v5;
        g8 = v7;
        g5 = v1;
        return g4;
    }
    int128_t v12 = __asm_movss(*(int32_t *)g9); // 0x720ae
    int128_t v13 = __asm_movss(*(int32_t *)g8); // 0x720b2
    __asm_ucomiss_1648(v12, v13);
    int128_t v14; // xmm2
    if (v4 || !v3) {
        int128_t v15 = __asm_movaps(v13); // 0x720bf
        int128_t v16 = __asm_movaps(v10); // 0x720c2
        int128_t v17 = __asm_subss(v15, v12); // 0x720c5
        int128_t v18 = __asm_subss(v12, v13); // 0x720c9
        int128_t v19 = __asm_divss(v16, v17); // 0x720cd
        int128_t v20 = __asm_addss_1661(__asm_mulss(v18, v19), v13); // 0x720d5
        *(int32_t *)g6 = __asm_movss_1646(v20);
        int128_t v21 = __asm_movss(*(int32_t *)(g8 + 4)); // 0x720dd
        int128_t v22 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x720e2
        int128_t v23 = __asm_mulss(__asm_subss(v22, v21), v19); // 0x720eb
        *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_addss_1661(v23, v21));
        int128_t v24 = __asm_movss(*(int32_t *)(g8 + 8)); // 0x720f8
        int128_t v25 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x720fd
        int128_t v26 = __asm_mulss(__asm_subss(v25, v24), v19); // 0x72106
        *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_addss_1661(v26, v24));
        int128_t v27 = __asm_movss(*(int32_t *)g4); // 0x72113
        v14 = v27;
        int128_t v28 = __asm_movss(*(int32_t *)g10); // 0x72117
        g879 = v28;
        __asm_ucomiss_1648(v27, v28);
        if (v4 || !v3) {
            goto lab_0x72120;
        } else {
            goto lab_0x7216a;
        }
    } else {
        int128_t v29 = __asm_movss(*(int32_t *)g4); // 0x72186
        v14 = v29;
        int128_t v30 = __asm_movss(*(int32_t *)g10); // 0x7218a
        g879 = v30;
        __asm_ucomiss_1648(v29, v30);
        if (v4 || !v3) {
            goto lab_0x72120;
        } else {
            goto lab_0x7216a;
        }
    }
  lab_0x72120:;
    int128_t v31 = __asm_subss(v14, g879); // 0x72120
    int128_t v32 = __asm_divss(v10, v31); // 0x72124
    g878 = v32;
    int128_t v33 = __asm_mulss(v31, v32); // 0x72128
    int128_t v34 = __asm_addss_1661(v33, g879); // 0x7212c
    *(int32_t *)g7 = __asm_movss_1646(v34);
    int128_t v35 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x72134
    int128_t v36 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x72139
    int128_t v37 = __asm_mulss(__asm_subss(v36, v35), v32); // 0x72142
    *(int32_t *)(g7 + 4) = __asm_movss_1646(__asm_addss_1661(v37, v35));
    int128_t v38 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x7214f
    int128_t v39 = __asm_subss(__asm_movss(*(int32_t *)(g4 + 8)), v38); // 0x72159
    int128_t v40 = __asm_addss_1661(__asm_mulss(v39, v32), v38); // 0x72161
    g879 = v40;
    *(int32_t *)(g7 + 8) = __asm_movss_1646(v40);
    goto lab_0x7216a;
  lab_0x7216a:
    // 0x7216a
    g6 = v6;
    g10 = v5;
    g8 = v7;
    g5 = v1;
    return g4;
}

// Address range: 0x721c0 - 0x72457
int32_t function_721c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g10; // 0x721c3
    int32_t v2 = g6; // 0x721c4
    int128_t v3 = __asm_movss(a5); // 0x721c8
    int128_t v4 = __asm_movss(0x3f000000); // 0x721cd
    int128_t v5 = __asm_movaps(v3); // 0x721d5
    g4 = a6;
    int128_t v6 = __asm_movaps(v3); // 0x721db
    int128_t v7 = __asm_mulss(v5, v3); // 0x721de
    g10 = a4;
    int128_t v8 = __asm_mulss(v3, v4); // 0x721e5
    g6 = a3;
    int128_t v9 = __asm_movss(-0x3fc00000); // 0x721ec
    g7 = a1;
    int128_t v10 = __asm_mulss(v7, v4); // 0x721f7
    g9 = a2;
    int32_t v11 = __asm_movss_1646(v8); // 0x721fe
    int128_t v12 = __asm_xorps(v8, v8); // 0x72203
    int128_t v13 = __asm_movss(0x40400000); // 0x72206
    *(int32_t *)g4 = __asm_movss_1646(v12);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v12);
    int128_t v14 = __asm_mulss(v6, v10); // 0x72217
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v12);
    int128_t v15 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x72220
    int128_t v16 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x72225
    int128_t v17 = __asm_mulss(v15, v14); // 0x7222a
    int128_t v18 = __asm_movaps(v14); // 0x7222e
    int128_t v19 = __asm_mulss(v9, v14); // 0x72231
    int128_t v20 = __asm_xorps(v18, g233); // 0x72235
    int128_t v21 = __asm_mulss(v13, v14); // 0x7223c
    int128_t v22 = __asm_mulss(v16, v20); // 0x72240
    int32_t v23 = __asm_movss_1646(v17); // 0x72244
    int128_t v24 = __asm_mulss(__asm_movss(*(int32_t *)(g10 + 8)), v14); // 0x7224e
    int128_t v25 = __asm_addss_1661(v22, v12); // 0x72252
    int128_t v26 = __asm_mulss_1654(v14, *(int32_t *)g10); // 0x72256
    int32_t v27 = __asm_movss_1646(v24); // bp-36
    int128_t v28 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x7225f
    int32_t v29 = __asm_movss_1646(__asm_mulss(v28, v19)); // 0x72268
    int128_t v30 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x7226d
    int128_t v31 = __asm_addss_1661(__asm_mulss(v30, v21), v25); // 0x72276
    int128_t v32 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v20); // 0x7227f
    int128_t v33 = __asm_addss(v31, v29); // 0x72283
    int128_t v34 = __asm_mulss_1654(v20, *(int32_t *)g7); // 0x72288
    int32_t v35 = __asm_movss_1646(v33); // 0x7228c
    int128_t v36 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x72291
    int128_t v37 = __asm_addss_1661(v32, v12); // 0x72296
    int128_t v38 = __asm_mulss(v36, v19); // 0x7229a
    int128_t v39 = __asm_addss_1661(v34, v12); // 0x7229e
    int128_t v40 = __asm_mulss_1654(v19, *(int32_t *)g6); // 0x722a2
    int32_t v41 = __asm_movss_1646(v38); // 0x722a6
    int128_t v42 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v21); // 0x722b0
    int128_t v43 = __asm_mulss_1654(v21, *(int32_t *)g9); // 0x722b4
    int128_t v44 = __asm_addss_1661(v42, v37); // 0x722b8
    int128_t v45 = __asm_addss_1661(v43, v39); // 0x722bc
    int128_t v46 = __asm_addss(v44, v41); // 0x722c0
    int128_t v47 = __asm_addss_1661(__asm_addss_1661(v40, v45), v26); // 0x722c9
    int32_t v48 = __asm_movss_1646(v47); // 0x722cd
    int128_t v49 = __asm_movss(v23); // 0x722d2
    int128_t v50 = __asm_movss(v27); // 0x722d7
    *(int32_t *)g4 = __asm_movss_1646(v47);
    int128_t v51 = __asm_addss(v49, v35); // 0x722e0
    int128_t v52 = __asm_addss_1661(v50, v46); // 0x722e5
    int128_t v53 = __asm_movaps(v10); // 0x722e9
    int128_t v54 = __asm_movss(0x40800000); // 0x722ec
    int128_t v55 = __asm_addss_1661(v53, v10); // 0x722f4
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v51);
    int128_t v56 = __asm_mulss(v54, v10); // 0x722fd
    int32_t v57 = __asm_movss_1646(v51); // 0x72301
    int128_t v58 = __asm_movss(-0x3f600000); // 0x72306
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v52);
    int128_t v59 = __asm_mulss(v58, v10); // 0x72313
    int32_t v60 = __asm_movss_1646(v55); // 0x72317
    int128_t v61 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x7231c
    int128_t v62 = __asm_mulss_1654(v55, *(int32_t *)(g7 + 4)); // 0x72321
    v27 = __asm_movss_1646(v52);
    int128_t v63 = __asm_xorps(v10, g233); // 0x7232b
    int128_t v64 = __asm_movss(v60); // 0x72332
    int128_t v65 = __asm_mulss(v61, v56); // 0x72337
    int128_t v66 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x7233b
    int32_t v67 = __asm_movss_1646(v59); // 0x72340
    int128_t v68 = __asm_mulss_1654(v64, *(int32_t *)(g7 + 8)); // 0x72345
    int128_t v69 = __asm_movss(v67); // 0x7234a
    int128_t v70 = __asm_mulss(v66, v63); // 0x7234f
    int128_t v71 = __asm_addss(v62, v57); // 0x72353
    int128_t v72 = __asm_mulss_1654(v69, *(int32_t *)(g9 + 4)); // 0x72358
    int128_t v73 = __asm_addss(v68, v27); // 0x7235d
    int128_t v74 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x72362
    int128_t v75 = __asm_addss_1661(v72, v71); // 0x72367
    int128_t v76 = __asm_movss(v67); // 0x7236b
    int128_t v77 = __asm_mulss(v74, v63); // 0x72370
    int128_t v78 = __asm_mulss_1654(v63, *(int32_t *)g10); // 0x72374
    int128_t v79 = __asm_mulss_1654(v76, *(int32_t *)(g9 + 8)); // 0x72378
    int128_t v80 = __asm_addss_1661(v65, v75); // 0x7237d
    int128_t v81 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v56); // 0x72386
    int128_t v82 = __asm_addss_1661(v79, v73); // 0x7238a
    int128_t v83 = __asm_movss(v60); // 0x7238e
    int128_t v84 = __asm_mulss_1654(v56, *(int32_t *)g6); // 0x72393
    int128_t v85 = __asm_addss_1661(v70, v80); // 0x72397
    int128_t v86 = __asm_mulss_1654(v83, *(int32_t *)g7); // 0x7239b
    int128_t v87 = __asm_addss_1661(v81, v82); // 0x7239f
    int128_t v88 = __asm_movss(v67); // 0x723a3
    int128_t v89 = __asm_mulss_1654(v88, *(int32_t *)g9); // 0x723a8
    int128_t v90 = __asm_addss(v86, v48); // 0x723ac
    int128_t v91 = __asm_addss_1661(v77, v87); // 0x723b1
    int128_t v92 = __asm_addss_1661(v89, v90); // 0x723b5
    int128_t v93 = __asm_addss_1661(v78, __asm_addss_1661(v84, v92)); // 0x723bd
    *(int32_t *)g4 = __asm_movss_1646(v93);
    int128_t v94 = __asm_movss(v11); // 0x723c5
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v91);
    int128_t v95 = __asm_movss(v11); // 0x723cf
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v85);
    int128_t v96 = __asm_xorps(v94, g233); // 0x723d9
    int128_t v97 = __asm_movss(v11); // 0x723e0
    int128_t v98 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x723e5
    int128_t v99 = __asm_mulss_1654(v95, *(int32_t *)(g6 + 4)); // 0x723ea
    int128_t v100 = __asm_mulss(v98, v96); // 0x723ef
    int128_t v101 = __asm_mulss_1654(v97, *(int32_t *)(g6 + 8)); // 0x723f3
    int128_t v102 = __asm_addss_1661(v100, v85); // 0x723f8
    int128_t v103 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v96); // 0x72401
    int128_t v104 = __asm_mulss_1654(v96, *(int32_t *)g7); // 0x72405
    int128_t v105 = __asm_addss_1661(v99, v102); // 0x72409
    int128_t v106 = __asm_addss_1661(v103, v91); // 0x7240d
    int128_t v107 = __asm_movss(v11); // 0x72411
    int128_t v108 = __asm_addss_1661(v104, v93); // 0x72416
    int128_t v109 = __asm_mulss_1654(v107, *(int32_t *)g6); // 0x7241a
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v105);
    int128_t v110 = __asm_addss_1661(v101, v106); // 0x72423
    int128_t v111 = __asm_addss_1661(v109, v108); // 0x72427
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v110);
    *(int32_t *)g4 = __asm_movss_1646(v111);
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss(v111, *(int32_t *)g9));
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_addss(v105, *(int32_t *)(g9 + 4)));
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v110, *(int32_t *)(g9 + 8)));
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x72460 - 0x726dc
int32_t function_72460(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x72460
    int128_t v1; // xmm2
    int128_t v2 = __asm_xorps(v1, v1); // 0x72461
    int32_t v3 = g10; // 0x72466
    int32_t v4 = g6; // 0x72467
    int128_t v5 = __asm_movss(a5); // 0x7246b
    int128_t v6 = __asm_movss(0x40400000); // 0x72470
    g4 = a6;
    int128_t v7 = __asm_mulss(__asm_movaps(v5), v6); // 0x7247e
    g10 = a4;
    g7 = a3;
    int128_t v8 = __asm_movss(-0x3fc00000); // 0x72488
    *(int32_t *)g4 = __asm_movss_1646(v2);
    g9 = a1;
    int128_t v9 = __asm_mulss(v7, v5); // 0x72497
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v2);
    g6 = a2;
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v2);
    int128_t v10 = __asm_addss_1661(v5, v5); // 0x724a8
    int128_t v11 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x724ac
    int128_t v12 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x724b1
    int128_t v13 = __asm_mulss_1654(v9, 0x3f000000); // 0x724b6
    int128_t v14 = __asm_mulss_1654(v10, 0x3f000000); // 0x724be
    int128_t v15 = __asm_mulss(v11, v13); // 0x724c6
    int128_t v16 = __asm_movaps(v13); // 0x724ca
    int128_t v17 = __asm_mulss(v8, v13); // 0x724cd
    int128_t v18 = __asm_xorps(v16, g233); // 0x724d1
    int128_t v19 = __asm_mulss(v6, v13); // 0x724d8
    int128_t v20 = __asm_mulss(v12, v18); // 0x724dc
    int32_t v21 = __asm_movss_1646(v15); // 0x724e0
    int128_t v22 = __asm_mulss(__asm_movss(*(int32_t *)(g10 + 8)), v13); // 0x724ea
    int128_t v23 = __asm_addss_1661(v20, v2); // 0x724ee
    int128_t v24 = __asm_mulss_1654(v13, *(int32_t *)g10); // 0x724f2
    int32_t v25 = __asm_movss_1646(v22); // bp-32
    int128_t v26 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x724fb
    int32_t v27 = __asm_movss_1646(__asm_mulss(v26, v17)); // 0x72504
    int128_t v28 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72509
    int128_t v29 = __asm_addss_1661(__asm_mulss(v28, v19), v23); // 0x72512
    int128_t v30 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v18); // 0x7251b
    int128_t v31 = __asm_addss(v29, v27); // 0x7251f
    int128_t v32 = __asm_mulss_1654(v18, *(int32_t *)g9); // 0x72524
    int32_t v33 = __asm_movss_1646(v31); // 0x72528
    int128_t v34 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x7252d
    int128_t v35 = __asm_addss_1661(v30, v2); // 0x72532
    int128_t v36 = __asm_mulss(v34, v17); // 0x72536
    int128_t v37 = __asm_addss_1661(v32, v2); // 0x7253a
    int128_t v38 = __asm_mulss_1654(v17, *(int32_t *)g7); // 0x7253e
    int32_t v39 = __asm_movss_1646(v36); // 0x72542
    int128_t v40 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v19); // 0x7254c
    int128_t v41 = __asm_mulss_1654(v19, *(int32_t *)g6); // 0x72550
    int128_t v42 = __asm_addss_1661(v40, v35); // 0x72554
    int128_t v43 = __asm_addss_1661(v41, v37); // 0x72558
    int128_t v44 = __asm_addss(v42, v39); // 0x7255c
    int128_t v45 = __asm_addss_1661(__asm_addss_1661(v38, v43), v24); // 0x72565
    int32_t v46 = __asm_movss_1646(v45); // 0x72569
    int128_t v47 = __asm_movss(v21); // 0x7256e
    int128_t v48 = __asm_movss(v25); // 0x72573
    *(int32_t *)g4 = __asm_movss_1646(v45);
    int128_t v49 = __asm_addss(v47, v33); // 0x7257c
    int128_t v50 = __asm_addss_1661(v48, v44); // 0x72581
    int128_t v51 = __asm_movaps(v14); // 0x72585
    int128_t v52 = __asm_movss(0x40800000); // 0x72588
    int128_t v53 = __asm_addss_1661(v51, v14); // 0x72590
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v49);
    int128_t v54 = __asm_mulss(v52, v14); // 0x72599
    int32_t v55 = __asm_movss_1646(v49); // 0x7259d
    int128_t v56 = __asm_movss(-0x3f600000); // 0x725a2
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v50);
    int128_t v57 = __asm_mulss(v56, v14); // 0x725af
    int32_t v58 = __asm_movss_1646(v53); // 0x725b3
    int128_t v59 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x725b8
    int128_t v60 = __asm_mulss_1654(v53, *(int32_t *)(g9 + 4)); // 0x725bd
    v25 = __asm_movss_1646(v50);
    int128_t v61 = __asm_xorps(v14, g233); // 0x725c7
    int128_t v62 = __asm_movss(v58); // 0x725ce
    int128_t v63 = __asm_mulss(v59, v54); // 0x725d3
    int128_t v64 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x725d7
    int32_t v65 = __asm_movss_1646(v57); // 0x725dc
    int128_t v66 = __asm_mulss_1654(v62, *(int32_t *)(g9 + 8)); // 0x725e1
    int128_t v67 = __asm_movss(v65); // 0x725e6
    int128_t v68 = __asm_mulss(v64, v61); // 0x725eb
    int128_t v69 = __asm_addss(v60, v55); // 0x725ef
    int128_t v70 = __asm_mulss_1654(v67, *(int32_t *)(g6 + 4)); // 0x725f4
    int128_t v71 = __asm_addss(v66, v25); // 0x725f9
    int128_t v72 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x725fe
    int128_t v73 = __asm_addss_1661(v70, v69); // 0x72603
    int128_t v74 = __asm_movss(v65); // 0x72607
    int128_t v75 = __asm_mulss(v72, v61); // 0x7260c
    int128_t v76 = __asm_mulss_1654(v61, *(int32_t *)g10); // 0x72610
    int128_t v77 = __asm_mulss_1654(v74, *(int32_t *)(g6 + 8)); // 0x72614
    int128_t v78 = __asm_addss_1661(v63, v73); // 0x72619
    int128_t v79 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v54); // 0x72622
    int128_t v80 = __asm_addss_1661(v77, v71); // 0x72626
    int128_t v81 = __asm_movss(v58); // 0x7262a
    int128_t v82 = __asm_mulss_1654(v54, *(int32_t *)g7); // 0x7262f
    int128_t v83 = __asm_addss_1661(v68, v78); // 0x72633
    int128_t v84 = __asm_mulss_1654(v81, *(int32_t *)g9); // 0x72637
    int128_t v85 = __asm_addss_1661(v79, v80); // 0x7263b
    int128_t v86 = __asm_movss(v65); // 0x7263f
    int128_t v87 = __asm_mulss_1654(v86, *(int32_t *)g6); // 0x72644
    int128_t v88 = __asm_addss(v84, v46); // 0x72648
    int128_t v89 = __asm_addss_1661(v75, v85); // 0x7264d
    int128_t v90 = __asm_addss_1661(v87, v88); // 0x72651
    int128_t v91 = __asm_addss_1661(v76, __asm_addss_1661(v82, v90)); // 0x72659
    *(int32_t *)g4 = __asm_movss_1646(v91);
    int128_t v92 = __asm_movss(-0x41000000); // 0x72661
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v89);
    int128_t v93 = __asm_movss(0x3f000000); // 0x7266e
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v83);
    int128_t v94 = __asm_movss(0x3f000000); // 0x7267b
    int128_t v95 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x72683
    int128_t v96 = __asm_mulss_1654(v93, *(int32_t *)(g7 + 4)); // 0x72688
    int128_t v97 = __asm_mulss(v95, v92); // 0x7268d
    int128_t v98 = __asm_mulss_1654(v94, *(int32_t *)(g7 + 8)); // 0x72691
    int128_t v99 = __asm_addss_1661(v97, v83); // 0x72696
    int128_t v100 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x7269a
    int128_t v101 = __asm_mulss(v100, v92); // 0x7269f
    int128_t v102 = __asm_mulss_1654(v92, *(int32_t *)g9); // 0x726a3
    int128_t v103 = __asm_addss_1661(v96, v99); // 0x726a7
    int128_t v104 = __asm_addss_1661(v101, v89); // 0x726ab
    int128_t v105 = __asm_movss(0x3f000000); // 0x726af
    int128_t v106 = __asm_addss_1661(v102, v91); // 0x726b7
    int128_t v107 = __asm_mulss_1654(v105, *(int32_t *)g7); // 0x726bb
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v103);
    int128_t v108 = __asm_addss_1661(v98, v104); // 0x726c4
    int128_t v109 = __asm_addss_1661(v107, v106); // 0x726c8
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v108);
    *(int32_t *)g4 = __asm_movss_1646(v109);
    g6 = v4;
    g10 = v3;
    return g4;
}

// Address range: 0x726e0 - 0x7295c
int32_t function_726e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g10; // 0x726e3
    int32_t v2 = g6; // 0x726e4
    g10 = a3;
    g6 = a2;
    g9 = a4;
    g7 = a1;
    int128_t v3 = __asm_movss(*(int32_t *)(a3 + 4)); // 0x726f4
    int128_t v4 = __asm_movss(0x40a00000); // 0x726f9
    int32_t v5 = __asm_movss_1646(v3); // 0x72701
    int128_t v6 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x72706
    int128_t v7 = __asm_movss(*(int32_t *)g7); // 0x7270b
    int32_t v8 = __asm_movss_1646(v6); // 0x7270f
    int128_t v9 = __asm_movss(*(int32_t *)g6); // 0x72714
    int128_t v10 = __asm_movaps(v7); // 0x72718
    int128_t v11 = __asm_movss(*(int32_t *)g10); // 0x7271b
    int32_t v12 = __asm_movss_1646(v9); // 0x7271f
    int128_t v13 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72724
    int128_t v14 = __asm_addss_1661(v10, v7); // 0x72729
    int128_t v15 = __asm_mulss_1654(v4, v12); // 0x7272d
    int32_t v16 = __asm_movss_1646(v13); // 0x72732
    int128_t v17 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x72737
    int128_t v18 = __asm_movss(a5); // 0x7273c
    int32_t v19 = __asm_movss_1646(v17); // 0x72741
    int128_t v20 = __asm_movss(*(int32_t *)g9); // 0x72746
    int128_t v21 = __asm_subss(v14, v15); // 0x7274a
    int128_t v22 = __asm_movss(v12); // 0x7274e
    int32_t v23 = __asm_movss_1646(v20); // 0x72753
    int128_t v24 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x72758
    int128_t v25 = __asm_mulss(v22, v18); // 0x7275d
    g4 = a6;
    int32_t v26 = __asm_movss_1646(v24); // 0x72764
    int128_t v27 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x72769
    int128_t v28 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x7276e
    int32_t v29 = __asm_movss_1646(v27); // bp-44
    int128_t v30 = __asm_movss(0x40800000); // 0x72778
    int128_t v31 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x72780
    int128_t v32 = __asm_addss_1661(__asm_mulss(v30, v11), v21); // 0x72789
    int128_t v33 = __asm_subss(__asm_movaps(v7), v11); // 0x72790
    int128_t v34 = __asm_subss_1651(v32, v23); // 0x72794
    int128_t v35 = __asm_mulss_1654(v33, 0x3e800000); // 0x72799
    int128_t v36 = __asm_mulss_1654(v34, 0x3e2aaaab); // 0x727a1
    int128_t v37 = __asm_mulss(v35, v18); // 0x727a9
    int128_t v38 = __asm_mulss(v36, v18); // 0x727ad
    int128_t v39 = __asm_mulss(v37, v18); // 0x727b1
    int128_t v40 = __asm_mulss(v38, v18); // 0x727b5
    int128_t v41 = __asm_subss(v25, v39); // 0x727b9
    int128_t v42 = __asm_movss(0x40400000); // 0x727bd
    int128_t v43 = __asm_mulss(v40, v18); // 0x727c5
    int128_t v44 = __asm_mulss(v11, v42); // 0x727c9
    int128_t v45 = __asm_addss_1661(v43, v41); // 0x727cd
    int128_t v46 = __asm_mulss(__asm_movss(v12), v42); // 0x727d6
    int128_t v47 = __asm_addss_1661(v44, __asm_subss(v7, v46)); // 0x727de
    int128_t v48 = __asm_movss(0x3e000000); // 0x727e2
    int128_t v49 = __asm_subss_1651(v47, v23); // 0x727ea
    int128_t v50 = __asm_mulss(__asm_mulss(v49, v48), v18); // 0x727f3
    int128_t v51 = __asm_mulss(__asm_mulss(v50, v18), v18); // 0x727fb
    int128_t v52 = __asm_subss(v45, __asm_mulss(v51, v18)); // 0x72803
    int128_t v53 = __asm_addss_1661(__asm_movaps(v28), v28); // 0x7280a
    *(int32_t *)g4 = __asm_movss_1646(v52);
    int128_t v54 = __asm_movss(0x40a00000); // 0x72812
    int128_t v55 = __asm_movss(0x40800000); // 0x7281a
    int128_t v56 = __asm_mulss_1654(v54, v16); // 0x72822
    int128_t v57 = __asm_mulss_1654(v55, v5); // 0x72827
    int128_t v58 = __asm_subss(v53, v56); // 0x7282c
    int128_t v59 = __asm_mulss(__asm_movss(v16), v18); // 0x72835
    int128_t v60 = __asm_addss_1661(v57, v58); // 0x72839
    int128_t v61 = __asm_subss_1651(__asm_movaps(v28), v5); // 0x72840
    int128_t v62 = __asm_subss_1651(v60, v26); // 0x72845
    int128_t v63 = __asm_mulss_1654(v61, 0x3e800000); // 0x7284a
    int128_t v64 = __asm_mulss_1654(v62, 0x3e2aaaab); // 0x72852
    int128_t v65 = __asm_mulss(v63, v18); // 0x7285a
    int128_t v66 = __asm_mulss(v64, v18); // 0x7285e
    int128_t v67 = __asm_mulss(v65, v18); // 0x72862
    int128_t v68 = __asm_mulss(v66, v18); // 0x72866
    int128_t v69 = __asm_subss(v59, v67); // 0x7286a
    int128_t v70 = __asm_movss(v5); // 0x7286e
    int128_t v71 = __asm_mulss(v68, v18); // 0x72873
    int128_t v72 = __asm_mulss(v70, v42); // 0x72877
    int128_t v73 = __asm_addss_1661(v71, v69); // 0x7287b
    int128_t v74 = __asm_mulss(__asm_movss(v16), v42); // 0x72884
    int128_t v75 = __asm_addss_1661(v72, __asm_subss(v28, v74)); // 0x7288c
    int128_t v76 = __asm_addss_1661(__asm_movaps(v31), v31); // 0x72893
    int128_t v77 = __asm_subss_1651(v75, v26); // 0x72897
    int128_t v78 = __asm_mulss(__asm_mulss(v77, v48), v18); // 0x728a0
    int128_t v79 = __asm_mulss(__asm_mulss(v78, v18), v18); // 0x728a8
    int128_t v80 = __asm_subss(v73, __asm_mulss(v79, v18)); // 0x728b0
    int128_t v81 = __asm_mulss_1654(__asm_movss(0x40a00000), v19); // 0x728bc
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v80);
    int128_t v82 = __asm_mulss_1654(__asm_movss(0x40800000), v8); // 0x728ce
    int128_t v83 = __asm_subss(v76, v81); // 0x728d3
    int128_t v84 = __asm_mulss(__asm_movss(v19), v18); // 0x728dc
    int128_t v85 = __asm_addss_1661(v82, v83); // 0x728e0
    int128_t v86 = __asm_subss_1651(__asm_movaps(v31), v8); // 0x728e7
    int128_t v87 = __asm_subss_1651(v85, v29); // 0x728ec
    int128_t v88 = __asm_mulss_1654(v86, 0x3e800000); // 0x728f1
    int128_t v89 = __asm_mulss_1654(v87, 0x3e2aaaab); // 0x728f9
    int128_t v90 = __asm_mulss(v88, v18); // 0x72901
    int128_t v91 = __asm_mulss(v89, v18); // 0x72905
    int128_t v92 = __asm_mulss(v90, v18); // 0x72909
    int128_t v93 = __asm_mulss(v91, v18); // 0x7290d
    int128_t v94 = __asm_subss(v84, v92); // 0x72911
    int128_t v95 = __asm_mulss(__asm_movss(v8), v42); // 0x7291a
    int128_t v96 = __asm_mulss_1654(v42, v19); // 0x7291e
    int128_t v97 = __asm_mulss(v93, v18); // 0x72923
    int128_t v98 = __asm_subss(v31, v96); // 0x72927
    int128_t v99 = __asm_addss_1661(v97, v94); // 0x7292b
    int128_t v100 = __asm_addss_1661(v95, v98); // 0x7292f
    int128_t v101 = __asm_mulss(__asm_subss_1651(v100, v29), v48); // 0x72938
    int128_t v102 = __asm_mulss(__asm_mulss(v101, v18), v18); // 0x72940
    int128_t v103 = __asm_mulss(__asm_mulss(v102, v18), v18); // 0x72948
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_subss(v99, v103));
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x72960 - 0x72a32
int32_t function_72960(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int128_t v1 = __asm_movss(0x40500000); // 0x72961
    int32_t v2 = g10; // 0x7296b
    int128_t v3 = __asm_movss(-0x41800000); // 0x7296c
    int32_t v4 = g6; // 0x72974
    g7 = a1;
    g6 = a2;
    g10 = a3;
    g9 = a4;
    int128_t v5 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x72981
    int128_t v6 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72986
    int128_t v7 = __asm_mulss(v5, v3); // 0x7298b
    int128_t v8 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x7298f
    int128_t v9 = __asm_mulss(v6, v1); // 0x72994
    int128_t v10 = __asm_movss(0x3e800000); // 0x72998
    int128_t v11 = __asm_mulss(v8, v1); // 0x729a0
    int128_t v12 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x729a4
    int128_t v13 = __asm_movss(0x3e2aaaab); // 0x729a9
    int128_t v14 = __asm_mulss(v12, v3); // 0x729b1
    g4 = a5;
    int128_t v15 = __asm_addss_1661(v9, v7); // 0x729b8
    int128_t v16 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x729bc
    int128_t v17 = __asm_mulss_1654(v3, *(int32_t *)g7); // 0x729c1
    int128_t v18 = __asm_mulss(v16, v1); // 0x729c5
    int128_t v19 = __asm_addss_1661(v11, v15); // 0x729c9
    int128_t v20 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 4)), v10); // 0x729d2
    int128_t v21 = __asm_addss_1661(v18, v14); // 0x729d6
    int128_t v22 = __asm_subss(v19, v20); // 0x729da
    int128_t v23 = __asm_mulss(__asm_movss(*(int32_t *)(g10 + 8)), v1); // 0x729e3
    int128_t v24 = __asm_mulss(v22, v13); // 0x729e7
    int128_t v25 = __asm_addss_1661(v23, v21); // 0x729eb
    int128_t v26 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v10); // 0x729f4
    int128_t v27 = __asm_mulss_1654(v10, *(int32_t *)g9); // 0x729f8
    int128_t v28 = __asm_subss(v25, v26); // 0x729fc
    int128_t v29 = __asm_mulss(__asm_movss(*(int32_t *)g10), v1); // 0x72a04
    int128_t v30 = __asm_mulss_1654(v1, *(int32_t *)g6); // 0x72a08
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v24);
    int128_t v31 = __asm_mulss(v28, v13); // 0x72a11
    int128_t v32 = __asm_addss_1661(v30, v17); // 0x72a15
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v31);
    int128_t v33 = __asm_subss(__asm_addss_1661(v29, v32), v27); // 0x72a22
    *(int32_t *)g4 = __asm_movss_1646(__asm_mulss(v33, v13));
    g6 = v4;
    g10 = v2;
    return g4;
}

// Address range: 0x72a40 - 0x72bb7
int32_t function_72a40(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g8; // 0x72a43
    int32_t v2 = g10; // 0x72a44
    int32_t v3; // bp-52
    g8 = &v3;
    int32_t v4 = g6; // 0x72a48
    g10 = a3;
    g6 = a2;
    g9 = a1;
    g4 = a4;
    int128_t v5 = __asm_movss(*(int32_t *)a3); // 0x72a58
    int128_t v6 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x72a5c
    int128_t v7 = __asm_movss(*(int32_t *)g6); // 0x72a61
    int128_t v8 = __asm_movaps(v5); // 0x72a65
    int128_t v9 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72a68
    int128_t v10 = __asm_movaps(v6); // 0x72a6d
    int128_t v11 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x72a70
    int128_t v12 = __asm_subss(v8, v7); // 0x72a75
    int128_t v13 = __asm_subss(v10, v9); // 0x72a79
    int128_t v14 = __asm_movaps(v11); // 0x72a7d
    int128_t v15 = __asm_subss_1651(v14, *(int32_t *)(g6 + 8)); // 0x72a80
    int128_t v16 = __asm_mulss(v12, v12); // 0x72a85
    int128_t v17 = __asm_mulss(v13, v13); // 0x72a89
    int128_t v18 = __asm_mulss(v15, v15); // 0x72a8d
    int128_t v19 = __asm_addss_1661(__asm_addss_1661(v16, v17), v18); // 0x72a95
    int128_t v20 = __asm_movss_1667(__asm_xorps(v18, v18), v19); // 0x72a9c
    __asm_movaps(v20);
    int128_t v21 = __asm_sqrtss(v20); // 0x72aa3
    int128_t v22 = __asm_subss(__asm_movss(*(int32_t *)g9), v7); // 0x72aab
    v3 = __asm_movss_1646(v22);
    int128_t v23 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x72ab4
    int32_t v24 = __asm_movss_1646(__asm_subss(v23, v9)); // 0x72abd
    int128_t v25 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x72ac2
    int32_t v26 = __asm_movss_1646(__asm_subss_1651(v25, *(int32_t *)(g6 + 8))); // 0x72acc
    int128_t v27 = __asm_subss(__asm_movss(*(int32_t *)g4), v5); // 0x72ad5
    int32_t v28 = __asm_movss_1646(v27); // bp-40
    int128_t v29 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x72ade
    int32_t v30 = __asm_movss_1646(__asm_subss(v29, v6)); // 0x72ae7
    int128_t v31 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x72aec
    int32_t v32 = __asm_movss_1646(v21); // 0x72af1
    int32_t v33 = __asm_movss_1646(__asm_subss(v31, v11)); // 0x72afd
    function_6d750(v33);
    g13++;
    int32_t v34 = &v28; // 0x72b09
    g4 = v34;
    g4 = (float32_t)function_6d750(v34);
    int128_t v35 = __asm_movss(v32); // 0x72b19
    g9 = a6;
    int128_t v36 = __asm_mulss(__asm_movss(v3), v35); // 0x72b26
    g4 = v34;
    int128_t v37 = __asm_addss(v36, *(int32_t *)g6); // 0x72b2d
    v3 = __asm_movss_1646(v37);
    int128_t v38 = __asm_mulss(__asm_movss(v24), v35); // 0x72b3b
    __asm_movss_1646(__asm_addss(v38, *(int32_t *)(g6 + 4)));
    int128_t v39 = __asm_mulss(__asm_movss(v26), v35); // 0x72b4e
    __asm_movss_1646(__asm_addss(v39, *(int32_t *)(g6 + 8)));
    int128_t v40 = __asm_mulss(__asm_movss(v28), v35); // 0x72b61
    int128_t v41 = __asm_addss(v40, *(int32_t *)g10); // 0x72b65
    v28 = __asm_movss_1646(v41);
    int128_t v42 = __asm_mulss(__asm_movss(v30), v35); // 0x72b73
    int128_t v43 = __asm_mulss_1654(v35, v33); // 0x72b77
    int128_t v44 = __asm_addss(v42, *(int32_t *)(g10 + 4)); // 0x72b7c
    int128_t v45 = __asm_addss(v43, *(int32_t *)(g10 + 8)); // 0x72b81
    g9 = a5;
    __asm_movss_1646(v44);
    __asm_movss_1646(v45);
    int32_t result = function_721c0(g4, g9, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x72baa
    g4 = result;
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x72bc0 - 0x72d37
int32_t function_72bc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g8; // 0x72bc3
    int32_t v2 = g10; // 0x72bc4
    int32_t v3; // bp-52
    g8 = &v3;
    int32_t v4 = g6; // 0x72bc8
    g10 = a3;
    g6 = a2;
    g9 = a1;
    g4 = a4;
    int128_t v5 = __asm_movss(*(int32_t *)a3); // 0x72bd8
    int128_t v6 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x72bdc
    int128_t v7 = __asm_movss(*(int32_t *)g6); // 0x72be1
    int128_t v8 = __asm_movaps(v5); // 0x72be5
    int128_t v9 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72be8
    int128_t v10 = __asm_movaps(v6); // 0x72bed
    int128_t v11 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x72bf0
    int128_t v12 = __asm_subss(v8, v7); // 0x72bf5
    int128_t v13 = __asm_subss(v10, v9); // 0x72bf9
    int128_t v14 = __asm_movaps(v11); // 0x72bfd
    int128_t v15 = __asm_subss_1651(v14, *(int32_t *)(g6 + 8)); // 0x72c00
    int128_t v16 = __asm_mulss(v12, v12); // 0x72c05
    int128_t v17 = __asm_mulss(v13, v13); // 0x72c09
    int128_t v18 = __asm_mulss(v15, v15); // 0x72c0d
    int128_t v19 = __asm_addss_1661(__asm_addss_1661(v16, v17), v18); // 0x72c15
    int128_t v20 = __asm_movss_1667(__asm_xorps(v18, v18), v19); // 0x72c1c
    __asm_movaps(v20);
    int128_t v21 = __asm_sqrtss(v20); // 0x72c23
    int128_t v22 = __asm_subss(__asm_movss(*(int32_t *)g9), v7); // 0x72c2b
    v3 = __asm_movss_1646(v22);
    int128_t v23 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x72c34
    int32_t v24 = __asm_movss_1646(__asm_subss(v23, v9)); // 0x72c3d
    int128_t v25 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x72c42
    int32_t v26 = __asm_movss_1646(__asm_subss_1651(v25, *(int32_t *)(g6 + 8))); // 0x72c4c
    int128_t v27 = __asm_subss(__asm_movss(*(int32_t *)g4), v5); // 0x72c55
    int32_t v28 = __asm_movss_1646(v27); // bp-40
    int128_t v29 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x72c5e
    int32_t v30 = __asm_movss_1646(__asm_subss(v29, v6)); // 0x72c67
    int128_t v31 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x72c6c
    int32_t v32 = __asm_movss_1646(v21); // 0x72c71
    int32_t v33 = __asm_movss_1646(__asm_subss(v31, v11)); // 0x72c7d
    function_6d750(v33);
    g13++;
    int32_t v34 = &v28; // 0x72c89
    g4 = v34;
    g4 = (float32_t)function_6d750(v34);
    int128_t v35 = __asm_movss(v32); // 0x72c99
    g9 = a6;
    int128_t v36 = __asm_mulss(__asm_movss(v3), v35); // 0x72ca6
    g4 = v34;
    int128_t v37 = __asm_addss(v36, *(int32_t *)g6); // 0x72cad
    v3 = __asm_movss_1646(v37);
    int128_t v38 = __asm_mulss(__asm_movss(v24), v35); // 0x72cbb
    __asm_movss_1646(__asm_addss(v38, *(int32_t *)(g6 + 4)));
    int128_t v39 = __asm_mulss(__asm_movss(v26), v35); // 0x72cce
    __asm_movss_1646(__asm_addss(v39, *(int32_t *)(g6 + 8)));
    int128_t v40 = __asm_mulss(__asm_movss(v28), v35); // 0x72ce1
    int128_t v41 = __asm_addss(v40, *(int32_t *)g10); // 0x72ce5
    v28 = __asm_movss_1646(v41);
    int128_t v42 = __asm_mulss(__asm_movss(v30), v35); // 0x72cf3
    int128_t v43 = __asm_mulss_1654(v35, v33); // 0x72cf7
    int128_t v44 = __asm_addss(v42, *(int32_t *)(g10 + 4)); // 0x72cfc
    int128_t v45 = __asm_addss(v43, *(int32_t *)(g10 + 8)); // 0x72d01
    g9 = a5;
    __asm_movss_1646(v44);
    __asm_movss_1646(v45);
    int32_t result = function_726e0(g4, g9, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x72d2a
    g4 = result;
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x72d40 - 0x72db2
int32_t function_72d40(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x72d49
    int32_t v3; // bp-28
    int32_t v4 = &v3; // 0x72d4c
    g4 = v4;
    g10 = a2;
    int32_t v5 = g8; // 0x72d52
    g8 = a3;
    int32_t v6 = g6; // 0x72d58
    int32_t v7; // bp-40
    int32_t v8 = &v7; // 0x72d5b
    g6 = v8;
    g9 = a1;
    function_72040(a1, a2, a3, a4, &v7, &v3, &v3);
    g4 = v4;
    g9 = a5;
    int32_t result = function_721c0(v8, g10, g8, v4, a5, a6); // 0x72da0
    g4 = result;
    g6 = v6;
    g10 = v2;
    g8 = v5;
    return result;
}

// Address range: 0x72dc0 - 0x72edf
int32_t function_72dc0(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int128_t v1 = __asm_movss(0x40400000); // 0x72dc1
    int32_t v2 = g10; // 0x72dcb
    int128_t v3 = __asm_movss(0x3f800000); // 0x72dcc
    int128_t v4 = __asm_movss(a5); // 0x72dd4
    int32_t v5 = g6; // 0x72dd9
    g10 = (int32_t)a1;
    int128_t v6 = __asm_movaps(v4); // 0x72ddd
    int128_t v7 = __asm_movaps(v4); // 0x72de0
    g4 = a6;
    int128_t v8 = __asm_mulss(v6, v4); // 0x72de6
    g6 = a2;
    g7 = a3;
    g9 = a4;
    int128_t v9 = __asm_mulss(v7, v8); // 0x72df3
    int128_t v10 = __asm_mulss(v1, v8); // 0x72df7
    int128_t v11 = __asm_movaps(v9); // 0x72dfb
    int128_t v12 = __asm_movaps(v9); // 0x72dfe
    int128_t v13 = __asm_addss_1661(v11, v9); // 0x72e01
    int128_t v14 = __asm_subss(v9, v8); // 0x72e05
    int128_t v15 = __asm_subss(v13, v10); // 0x72e09
    int128_t v16 = __asm_addss_1661(__asm_movaps(v8), v8); // 0x72e10
    int128_t v17 = __asm_addss_1661(v15, v3); // 0x72e14
    int128_t v18 = __asm_subss(v12, v16); // 0x72e18
    int128_t v19 = __asm_subss(v3, v17); // 0x72e1c
    int128_t v20 = __asm_addss_1661(__asm_movaps(v18), v4); // 0x72e23
    int128_t v21 = __asm_mulss(__asm_movss(*(int32_t *)g10), v17); // 0x72e2b
    *(int32_t *)g4 = __asm_movss_1646(v21);
    int128_t v22 = __asm_mulss(__asm_movss(*(int32_t *)(g10 + 4)), v17); // 0x72e38
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v22);
    int128_t v23 = __asm_mulss_1654(v17, *(int32_t *)(g10 + 8)); // 0x72e41
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v23);
    int128_t v24 = __asm_movss(*(int32_t *)g6); // 0x72e4b
    int128_t v25 = __asm_addss_1661(__asm_mulss(v24, v19), v21); // 0x72e53
    *(int32_t *)g4 = __asm_movss_1646(v25);
    int128_t v26 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x72e5b
    int128_t v27 = __asm_addss_1661(__asm_mulss(v26, v19), v22); // 0x72e64
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v27);
    int128_t v28 = __asm_addss_1661(__asm_mulss_1654(v19, *(int32_t *)(g6 + 8)), v23); // 0x72e72
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v28);
    int128_t v29 = __asm_movss(*(int32_t *)g7); // 0x72e7b
    int128_t v30 = __asm_addss_1661(__asm_mulss(v29, v20), v25); // 0x72e83
    *(int32_t *)g4 = __asm_movss_1646(v30);
    int128_t v31 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x72e8b
    int128_t v32 = __asm_addss_1661(__asm_mulss(v31, v20), v27); // 0x72e94
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v32);
    int128_t v33 = __asm_addss_1661(__asm_mulss_1654(v20, *(int32_t *)(g7 + 8)), v28); // 0x72ea2
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v33);
    int128_t v34 = __asm_mulss(__asm_movss(*(int32_t *)g9), v14); // 0x72eaf
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss_1661(v34, v30));
    int128_t v35 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 4)), v14); // 0x72ec0
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_addss_1661(v35, v32));
    int128_t v36 = __asm_mulss_1654(v14, *(int32_t *)(g9 + 8)); // 0x72ecd
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss_1661(v36, v33));
    g6 = v5;
    g10 = v2;
    return g4;
}

// Address range: 0x72ee0 - 0x72f67
float80_t function_72ee0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int128_t v1 = __asm_movss(a5); // 0x72ee6
    int128_t v2 = __asm_movss(0x40400000); // 0x72eeb
    int128_t v3 = __asm_movaps(v1); // 0x72ef3
    int128_t v4 = __asm_movaps(v1); // 0x72ef6
    int128_t v5 = __asm_movss(a1); // 0x72ef9
    int128_t v6 = __asm_mulss(v3, v1); // 0x72efe
    int128_t v7 = __asm_mulss(v4, v6); // 0x72f02
    int128_t v8 = __asm_mulss(v2, v6); // 0x72f06
    int128_t v9 = __asm_movaps(v7); // 0x72f0a
    int128_t v10 = __asm_subss(__asm_addss_1661(v9, v7), v8); // 0x72f11
    int128_t v11 = __asm_movss(0x3f800000); // 0x72f15
    int128_t v12 = __asm_addss_1661(v10, v11); // 0x72f1d
    int128_t v13 = __asm_subss(v11, v12); // 0x72f21
    int128_t v14 = __asm_mulss(v5, v12); // 0x72f25
    int128_t v15 = __asm_addss_1661(__asm_movaps(v6), v6); // 0x72f2c
    int128_t v16 = __asm_addss_1661(__asm_mulss_1654(v13, a2), v14); // 0x72f35
    int128_t v17 = __asm_subss(__asm_movaps(v7), v15); // 0x72f3c
    int128_t v18 = __asm_subss(v7, v6); // 0x72f40
    int128_t v19 = __asm_addss_1661(__asm_movaps(v17), v1); // 0x72f47
    int128_t v20 = __asm_mulss_1654(v18, a4); // 0x72f4b
    int128_t v21 = __asm_mulss_1654(v19, a3); // 0x72f50
    int128_t v22 = __asm_addss_1661(v20, __asm_addss_1661(v21, v16)); // 0x72f59
    g13--;
    return __asm_movss_1646(v22);
}

// Address range: 0x72f70 - 0x72fde
int32_t function_72f70(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movss(0x40400000); // 0x72f71
    int128_t v2 = __asm_movss(a1); // 0x72f7b
    g4 = a2;
    int128_t v3 = __asm_movaps(v2); // 0x72f83
    int128_t v4 = __asm_movaps(v2); // 0x72f86
    int128_t v5 = __asm_mulss(v3, v2); // 0x72f89
    int128_t v6 = __asm_mulss(v4, v5); // 0x72f8d
    int128_t v7 = __asm_mulss(v1, v5); // 0x72f91
    int128_t v8 = __asm_movaps(v6); // 0x72f95
    int128_t v9 = __asm_subss(__asm_addss_1661(v8, v6), v7); // 0x72f9c
    int128_t v10 = __asm_movss(0x3f800000); // 0x72fa0
    int128_t v11 = __asm_addss_1661(v9, v10); // 0x72fa8
    int128_t v12 = __asm_subss(v10, v11); // 0x72fac
    *(int32_t *)g4 = __asm_movss_1646(v11);
    int128_t v13 = __asm_addss_1661(__asm_movaps(v5), v5); // 0x72fb7
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v12);
    int128_t v14 = __asm_movaps(v6); // 0x72fc0
    int128_t v15 = __asm_subss(v6, v5); // 0x72fc3
    int128_t v16 = __asm_subss(v14, v13); // 0x72fc7
    *(int32_t *)(g4 + 12) = __asm_movss_1646(v15);
    int128_t v17 = __asm_movaps(v16); // 0x72fd0
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss_1661(v17, v2));
    return g4;
}

// Address range: 0x72fe0 - 0x73076
int32_t function_72fe0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a2;
    g7 = a1;
    g9 = a3;
    int128_t v2 = __asm_movss(*(int32_t *)a2); // 0x72fef
    int128_t v3 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x72ff3
    int128_t v4 = __asm_movaps(v2); // 0x72ff8
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x72ffb
    int128_t v6 = __asm_subss_1651(v4, *(int32_t *)g7); // 0x73000
    int32_t v7 = __asm_movss_1646(v6); // bp-28
    int128_t v8 = __asm_movaps(v3); // 0x73009
    __asm_movss_1646(__asm_subss_1651(v8, *(int32_t *)(g7 + 4)));
    int128_t v9 = __asm_movaps(v5); // 0x73016
    int32_t v10 = *(int32_t *)(g7 + 8); // 0x73019
    g7 = a5;
    __asm_movss_1646(__asm_subss_1651(v9, v10));
    int128_t v11 = __asm_movss(*(int32_t *)g9); // 0x73026
    __asm_movss_1646(__asm_subss(v11, v2));
    int128_t v12 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73033
    __asm_movss_1646(__asm_subss(v12, v3));
    g7 = a4;
    int128_t v13 = __asm_subss(__asm_movss(*(int32_t *)(g9 + 8)), v5); // 0x7304d
    g7 = &v7;
    __asm_movss_1646(v13);
    int32_t result = function_72dc0(&v7, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x7306f
    g4 = result;
    return result;
}

// Address range: 0x73080 - 0x730c4
int32_t function_73080(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int128_t v2 = __asm_movss(a3); // 0x73086
    int128_t v3 = __asm_movss(a2); // 0x7308b
    int128_t v4 = __asm_movaps(v2); // 0x73090
    g4 = a4;
    __asm_movss_1646(v2);
    int128_t v5 = __asm_subss(v4, v3); // 0x7309c
    __asm_movss_1646(v3);
    __asm_movss_1646(v5);
    int128_t v6 = __asm_movaps(v3); // 0x730ab
    int32_t v7 = __asm_movss_1646(__asm_subss_1651(v6, a1)); // 0x730b7
    float80_t v8 = function_72ee0(v7, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x730bd
    g868 = v8;
    g4 = (float32_t)v8;
    g5 = v1;
    return (float32_t)v8;
}

// Address range: 0x730d0 - 0x7319e
int32_t function_730d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x730d3
    int32_t v2 = g10; // 0x730d4
    int32_t v3 = g6; // 0x730d8
    g6 = a3;
    g4 = a1;
    g10 = a5;
    g8 = a4;
    int32_t v4; // bp-48
    function_70800(a3, a1, &v4);
    g4 = a2;
    int32_t v5; // bp-32
    g4 = function_70800(g6, a2, &v5);
    g4 = v4;
    g4 = function_73080(v4, v5, *(int32_t *)g6, g8);
    *(float32_t *)g10 = (float32_t)g868;
    g13++;
    int32_t v6;
    int32_t v7;
    g4 = function_73080(v6, v7, *(int32_t *)(g6 + 4), g8);
    *(float32_t *)(g10 + 4) = (float32_t)g868;
    g13++;
    int32_t v8;
    int32_t v9;
    g4 = function_73080(v8, v9, *(int32_t *)(g6 + 8), g8);
    *(float32_t *)(g10 + 8) = (float32_t)g868;
    g13++;
    int32_t v10;
    int32_t v11;
    g4 = function_73080(v10, v11, *(int32_t *)(g6 + 12), g8);
    *(float32_t *)(g10 + 12) = (float32_t)g868;
    g13++;
    float80_t v12 = function_70c10(g10); // 0x7318f
    g4 = (float32_t)v12;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return (float32_t)v12;
}

// Address range: 0x731a0 - 0x7354e
int32_t function_731a0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    int32_t v1 = g10; // 0x731a3
    int32_t v2 = g6; // 0x731a4
    int128_t v3 = __asm_movss(0x3f800000); // 0x731a8
    int128_t v4 = __asm_movss(a3); // 0x731b0
    int128_t v5 = __asm_movaps(v3); // 0x731b5
    int128_t v6 = __asm_movss(a2); // 0x731b8
    int128_t v7 = __asm_movaps(v4); // 0x731bd
    int128_t v8 = __asm_subss_1651(v5, a1); // 0x731c0
    int128_t v9 = __asm_addss_1661(v7, v3); // 0x731c5
    int128_t v10 = __asm_movaps(v6); // 0x731c9
    int128_t v11 = __asm_movss(a8); // 0x731cc
    int128_t v12 = __asm_addss_1661(v10, v3); // 0x731d1
    g4 = a9;
    g10 = a7;
    int128_t v13 = __asm_mulss(v9, v8); // 0x731db
    g6 = a6;
    g9 = a5;
    g7 = (int32_t)a4;
    int128_t v14 = __asm_movaps(v13); // 0x731e8
    int32_t v15 = __asm_movss_1646(__asm_mulss(v14, v12)); // 0x731ef
    int128_t v16 = __asm_movaps(v3); // 0x731f4
    int128_t v17 = __asm_subss(v3, v6); // 0x731f7
    int128_t v18 = __asm_subss(v16, v4); // 0x731fb
    int128_t v19 = __asm_movaps(v17); // 0x731ff
    int128_t v20 = __asm_movaps(v18); // 0x73202
    int128_t v21 = __asm_movaps(v11); // 0x73205
    int128_t v22 = __asm_mulss(v20, v8); // 0x73208
    int128_t v23 = __asm_movss(0x3f000000); // 0x7320c
    int128_t v24 = __asm_mulss(v12, v22); // 0x73214
    int128_t v25 = __asm_movaps(v22); // 0x73218
    int128_t v26 = __asm_xorps(v22, v22); // 0x7321b
    int128_t v27 = __asm_mulss(v25, v19); // 0x7321e
    *(int32_t *)g4 = __asm_movss_1646(v26);
    int128_t v28 = __asm_mulss(v19, v13); // 0x73226
    int128_t v29 = __asm_movaps(v11); // 0x7322a
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v26);
    int128_t v30 = __asm_mulss(v29, v11); // 0x73232
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v26);
    int128_t v31 = __asm_mulss(v11, v23); // 0x7323b
    int32_t v32 = __asm_movss_1646(v27); // 0x7323f
    int128_t v33 = __asm_movss(v15); // 0x73244
    int128_t v34 = __asm_mulss(v30, v23); // 0x73249
    int128_t v35 = __asm_movss(v15); // 0x7324d
    int32_t v36 = __asm_movss_1646(v31); // 0x73252
    int128_t v37 = __asm_movss(0x40800000); // 0x73257
    int128_t v38 = __asm_xorps(v35, g233); // 0x7325f
    int32_t v39 = __asm_movss_1646(v38); // bp-52
    int128_t v40 = __asm_addss_1661(v33, v37); // 0x7326b
    int128_t v41 = __asm_mulss(v21, v34); // 0x7326f
    int128_t v42 = __asm_subss_1651(v40, v32); // 0x73273
    int128_t v43 = __asm_mulss(v38, v41); // 0x73278
    int128_t v44 = __asm_subss(v42, v24); // 0x7327c
    int32_t v45 = __asm_movss_1646(v43); // 0x73280
    int128_t v46 = __asm_movss(v32); // 0x73285
    int128_t v47 = __asm_mulss(v44, v41); // 0x7328a
    int128_t v48 = __asm_subss(v46, v37); // 0x7328e
    int128_t v49 = __asm_addss_1661(__asm_movaps(v48), v24); // 0x73295
    int128_t v50 = __asm_mulss(__asm_subss(v49, v28), v41); // 0x7329d
    int128_t v51 = __asm_mulss(v41, v28); // 0x732a1
    int32_t v52 = __asm_movss_1646(v51); // 0x732a5
    int32_t v53 = __asm_movss_1646(__asm_mulss_1654(v51, *(int32_t *)(g10 + 4))); // 0x732af
    int128_t v54 = __asm_movss(v52); // 0x732b4
    int32_t v55 = __asm_movss_1646(__asm_mulss_1654(v54, *(int32_t *)(g10 + 8))); // 0x732be
    int128_t v56 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x732c3
    int128_t v57 = __asm_movss(v45); // 0x732c8
    int128_t v58 = __asm_mulss(v56, v50); // 0x732cd
    int128_t v59 = __asm_mulss_1654(v57, *(int32_t *)(g7 + 4)); // 0x732d1
    int32_t v60 = __asm_movss_1646(v58); // 0x732d6
    int128_t v61 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x732db
    int128_t v62 = __asm_addss_1661(v59, v26); // 0x732e0
    int128_t v63 = __asm_addss_1661(__asm_mulss(v61, v47), v62); // 0x732e8
    int128_t v64 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v50); // 0x732f1
    int128_t v65 = __asm_addss(v63, v60); // 0x732f5
    int128_t v66 = __asm_mulss_1654(v50, *(int32_t *)g6); // 0x732fa
    int32_t v67 = __asm_movss_1646(v64); // 0x732fe
    int128_t v68 = __asm_movss(v45); // 0x73303
    int32_t v69 = __asm_movss_1646(v65); // 0x73308
    int128_t v70 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x7330d
    int128_t v71 = __asm_mulss_1654(v68, *(int32_t *)(g7 + 8)); // 0x73312
    int128_t v72 = __asm_mulss(v70, v47); // 0x73317
    int128_t v73 = __asm_mulss_1654(v47, *(int32_t *)g9); // 0x7331b
    int128_t v74 = __asm_addss_1661(v72, __asm_addss_1661(v71, v26)); // 0x73323
    int128_t v75 = __asm_addss(__asm_movss(v53), v69); // 0x7332c
    int32_t v76 = __asm_movss_1646(__asm_addss(v74, v67)); // 0x73336
    int128_t v77 = __asm_movss(v52); // 0x7333b
    int32_t v78 = __asm_movss_1646(__asm_mulss_1654(v77, *(int32_t *)g10)); // 0x73344
    int128_t v79 = __asm_movss(v45); // 0x73349
    int128_t v80 = __asm_mulss_1654(v79, *(int32_t *)g7); // 0x7334e
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v75);
    int128_t v81 = __asm_addss_1661(v80, v26); // 0x73357
    int128_t v82 = __asm_addss_1661(__asm_movaps(v34), v34); // 0x7335e
    int128_t v83 = __asm_addss_1661(v73, v81); // 0x73362
    int128_t v84 = __asm_movss(v32); // 0x73366
    int128_t v85 = __asm_mulss_1654(v82, v15); // 0x7336b
    int128_t v86 = __asm_addss_1661(v84, v84); // 0x73370
    int128_t v87 = __asm_addss_1661(v66, v83); // 0x73374
    int128_t v88 = __asm_addss(__asm_movss(v55), v76); // 0x7337d
    int128_t v89 = __asm_addss(v87, v78); // 0x73382
    int32_t v90 = __asm_movss_1646(v88); // 0x73387
    int32_t v91 = __asm_movss_1646(v89); // 0x7338c
    *(int32_t *)g4 = __asm_movss_1646(v89);
    int128_t v92 = __asm_movss(v15); // 0x73395
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v88);
    int128_t v93 = __asm_movss(-0x3f400000); // 0x7339f
    int128_t v94 = __asm_subss(v93, __asm_addss_1661(v92, v92)); // 0x733ab
    int128_t v95 = __asm_subss(__asm_movss(0x40c00000), v86); // 0x733b7
    int128_t v96 = __asm_addss_1661(v94, v86); // 0x733bb
    int128_t v97 = __asm_subss(v95, v24); // 0x733bf
    int128_t v98 = __asm_addss_1661(v96, v24); // 0x733c3
    int128_t v99 = __asm_addss_1661(v97, v28); // 0x733c7
    int128_t v100 = __asm_mulss(__asm_xorps(v28, g233), v34); // 0x733d2
    int128_t v101 = __asm_mulss(v98, v34); // 0x733d6
    int128_t v102 = __asm_mulss(v99, v34); // 0x733da
    int128_t v103 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x733de
    int32_t v104 = __asm_movss_1646(__asm_mulss(v103, v100)); // 0x733e7
    int128_t v105 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x733ec
    int128_t v106 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x733f1
    int128_t v107 = __asm_mulss(v105, v100); // 0x733f6
    int128_t v108 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x733fa
    int128_t v109 = __asm_mulss(v106, v101); // 0x733ff
    int128_t v110 = __asm_mulss(v108, v102); // 0x73403
    int128_t v111 = __asm_mulss_1654(v100, *(int32_t *)g10); // 0x73407
    int32_t v112 = __asm_movss_1646(v107); // 0x7340b
    int128_t v113 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73410
    int128_t v114 = __asm_addss_1661(__asm_mulss(v113, v85), v75); // 0x73419
    int128_t v115 = __asm_mulss(__asm_movss(*(int32_t *)(g7 + 8)), v85); // 0x73422
    int128_t v116 = __asm_mulss_1654(v85, *(int32_t *)g7); // 0x73426
    int128_t v117 = __asm_addss_1661(v109, v114); // 0x7342a
    int128_t v118 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v101); // 0x73433
    int128_t v119 = __asm_addss(v115, v90); // 0x73437
    int128_t v120 = __asm_mulss_1654(v101, *(int32_t *)g9); // 0x7343c
    int128_t v121 = __asm_addss_1661(v110, v117); // 0x73440
    int128_t v122 = __asm_addss(v116, v91); // 0x73444
    int128_t v123 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x73449
    int128_t v124 = __asm_addss_1661(v118, v119); // 0x7344e
    int128_t v125 = __asm_mulss(v123, v102); // 0x73452
    int128_t v126 = __asm_addss_1661(v120, v122); // 0x73456
    int128_t v127 = __asm_mulss_1654(v102, *(int32_t *)g6); // 0x7345a
    int128_t v128 = __asm_addss(v121, v104); // 0x7345e
    int128_t v129 = __asm_addss_1661(v125, v124); // 0x73463
    int128_t v130 = __asm_movss(v36); // 0x73467
    int128_t v131 = __asm_addss_1661(v127, v126); // 0x7346c
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v128);
    int128_t v132 = __asm_movss(v15); // 0x73475
    int32_t v133 = __asm_movss_1646(v128); // 0x7347a
    int128_t v134 = __asm_movss(v36); // 0x7347f
    int128_t v135 = __asm_addss(v129, v112); // 0x73484
    int128_t v136 = __asm_addss_1661(v111, v131); // 0x73489
    int128_t v137 = __asm_mulss_1654(v134, v39); // 0x7348d
    int128_t v138 = __asm_subss_1651(v132, v32); // 0x73492
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v135);
    int128_t v139 = __asm_mulss_1654(v130, v32); // 0x7349c
    *(int32_t *)g4 = __asm_movss_1646(v136);
    int128_t v140 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x734a5
    int32_t v141 = __asm_movss_1646(v135); // 0x734aa
    int128_t v142 = __asm_mulss_1654(v138, v36); // 0x734af
    int128_t v143 = __asm_mulss(v140, v137); // 0x734b4
    int128_t v144 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x734b8
    int128_t v145 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x734bd
    int128_t v146 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x734c2
    int128_t v147 = __asm_mulss(v144, v142); // 0x734c7
    int128_t v148 = __asm_addss(v143, v133); // 0x734cb
    int128_t v149 = __asm_mulss(v145, v139); // 0x734d0
    int128_t v150 = __asm_mulss(v146, v139); // 0x734d4
    int128_t v151 = __asm_addss_1661(v147, v148); // 0x734d8
    int128_t v152 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v142); // 0x734e1
    int128_t v153 = __asm_addss_1661(v149, v151); // 0x734e5
    int32_t v154 = __asm_movss_1646(v152); // 0x734e9
    int128_t v155 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x734ee
    int128_t v156 = __asm_mulss_1654(v142, *(int32_t *)g9); // 0x734f3
    int128_t v157 = __asm_mulss(v155, v137); // 0x734f7
    int128_t v158 = __asm_mulss_1654(v137, *(int32_t *)g7); // 0x734fb
    int128_t v159 = __asm_mulss_1654(v139, *(int32_t *)g6); // 0x734ff
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v153);
    int128_t v160 = __asm_addss(v157, v141); // 0x73508
    int128_t v161 = __asm_addss_1661(v158, v136); // 0x7350d
    int128_t v162 = __asm_addss(v160, v154); // 0x73511
    int128_t v163 = __asm_addss_1661(v156, v161); // 0x73516
    int128_t v164 = __asm_addss_1661(v150, v162); // 0x7351a
    int128_t v165 = __asm_addss_1661(v159, v163); // 0x7351e
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v164);
    *(int32_t *)g4 = __asm_movss_1646(v165);
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss(v165, *(int32_t *)g9));
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_addss(v153, *(int32_t *)(g9 + 4)));
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v164, *(int32_t *)(g9 + 8)));
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x73550 - 0x735d7
int32_t function_73550(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x73559
    int32_t v3; // bp-28
    int32_t v4 = &v3; // 0x7355c
    g4 = v4;
    g10 = a5;
    int32_t v5 = g8; // 0x73562
    g8 = a6;
    int32_t v6 = g6; // 0x73568
    int32_t v7; // bp-40
    g6 = &v7;
    g9 = a4;
    function_72040(a4, a5, a6, a7, &v7, &v3, &g870);
    g9 = a8;
    g4 = a1;
    int32_t result = function_731a0(a1, a2, a3, &v7, g10, g8, v4, a8, a9); // 0x735c5
    g4 = result;
    g6 = v6;
    g10 = v2;
    g8 = v5;
    return result;
}

// Address range: 0x735e0 - 0x736f2
int32_t function_735e0(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int128_t v1 = __asm_xorps(g878, g878); // 0x735e1
    int128_t v2 = __asm_movss(a3); // 0x735e6
    g4 = a4;
    g9 = (int32_t)a1;
    int128_t v3 = __asm_mulss(__asm_movaps(v2), v2); // 0x735f4
    g7 = a2;
    *(int32_t *)g4 = __asm_movss_1646(v1);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v1);
    int128_t v4 = __asm_mulss(v2, v3); // 0x73604
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v1);
    int128_t v5 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x7360d
    int128_t v6 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x73612
    int128_t v7 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73617
    int128_t v8 = __asm_movaps(v4); // 0x7361c
    int128_t v9 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x7361f
    int128_t v10 = __asm_addss_1661(v8, v4); // 0x73624
    int128_t v11 = __asm_mulss_1654(v4, -0x40000000); // 0x73628
    int128_t v12 = __asm_mulss(v5, v10); // 0x73630
    int128_t v13 = __asm_mulss(v6, v10); // 0x73634
    int128_t v14 = __asm_mulss_1654(v10, *(int32_t *)g9); // 0x73638
    int128_t v15 = __asm_mulss(v7, v11); // 0x7363c
    int128_t v16 = __asm_mulss(v9, v11); // 0x73640
    int128_t v17 = __asm_addss_1661(v12, v1); // 0x73644
    int128_t v18 = __asm_mulss_1654(v11, *(int32_t *)g7); // 0x73648
    int128_t v19 = __asm_addss_1661(v13, v1); // 0x7364c
    int128_t v20 = __asm_addss_1661(v14, v1); // 0x73650
    int128_t v21 = __asm_addss_1661(v15, v17); // 0x73654
    int128_t v22 = __asm_addss_1661(v16, v19); // 0x73658
    int128_t v23 = __asm_addss_1661(v18, v20); // 0x7365c
    int128_t v24 = __asm_movss(-0x3fc00000); // 0x73660
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v21);
    int128_t v25 = __asm_mulss(v24, v3); // 0x7366d
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v22);
    *(int32_t *)g4 = __asm_movss_1646(v23);
    int128_t v26 = __asm_mulss_1654(v3, 0x40400000); // 0x7367a
    int128_t v27 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73682
    int128_t v28 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73687
    int128_t v29 = __asm_mulss(v27, v25); // 0x7368c
    int128_t v30 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x73690
    int128_t v31 = __asm_mulss(v28, v26); // 0x73695
    int128_t v32 = __asm_mulss(v30, v26); // 0x73699
    int128_t v33 = __asm_mulss_1654(v26, *(int32_t *)g7); // 0x7369d
    int128_t v34 = __asm_addss_1661(v29, v21); // 0x736a1
    int128_t v35 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v25); // 0x736aa
    int128_t v36 = __asm_mulss_1654(v25, *(int32_t *)g9); // 0x736ae
    int128_t v37 = __asm_addss_1661(v31, v34); // 0x736b2
    int128_t v38 = __asm_addss_1661(v35, v22); // 0x736b6
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v37);
    int128_t v39 = __asm_addss_1661(v36, v23); // 0x736bf
    int128_t v40 = __asm_addss_1661(v32, v38); // 0x736c3
    int128_t v41 = __asm_addss_1661(v33, v39); // 0x736c7
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v40);
    *(int32_t *)g4 = __asm_movss_1646(v41);
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss(v41, *(int32_t *)g9));
    *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_addss(v37, *(int32_t *)(g9 + 4)));
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v40, *(int32_t *)(g9 + 8)));
    return g4;
}

// Address range: 0x73700 - 0x73772
int32_t function_73700(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x73709
    int32_t v3; // bp-28
    int32_t v4 = &v3; // 0x7370c
    g4 = v4;
    g10 = a2;
    int32_t v5 = g8; // 0x73712
    g8 = a3;
    int32_t v6 = g6; // 0x73718
    int32_t v7; // bp-40
    g6 = &v7;
    g9 = a1;
    function_72040(a1, a2, a3, a4, &v7, &v3, &v3);
    g4 = v4;
    g9 = a5;
    int32_t result = function_735e0(&v7, g10, g8, v4, a5, a6); // 0x73760
    g4 = result;
    g6 = v6;
    g10 = v2;
    g8 = v5;
    return result;
}

// Address range: 0x73780 - 0x73a63
int32_t function_73780(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int128_t v1 = __asm_xorps(g879, g879); // 0x73781
    int32_t v2 = g10; // 0x73786
    int32_t v3 = g6; // 0x73787
    int128_t v4 = __asm_movss(a5); // 0x7378b
    int128_t v5 = __asm_movss((int32_t)g233); // 0x73790
    int128_t v6 = __asm_movss(0x3e2aaaab); // 0x73798
    int128_t v7 = __asm_movaps(v4); // 0x737a0
    int128_t v8 = __asm_movaps(v4); // 0x737a3
    int128_t v9 = __asm_movss(0x40400000); // 0x737a6
    int128_t v10 = __asm_mulss(v7, v4); // 0x737ae
    g4 = a6;
    g10 = a4;
    int128_t v11 = __asm_mulss(v4, v6); // 0x737b8
    g7 = a3;
    g9 = (int32_t)a1;
    int128_t v12 = __asm_mulss(v10, v6); // 0x737c2
    *(int32_t *)g4 = __asm_movss_1646(v1);
    g6 = a2;
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v1);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v1);
    int32_t v13 = __asm_movss_1646(v11); // bp-40
    int128_t v14 = __asm_mulss(v8, v12); // 0x737dc
    int128_t v15 = __asm_mulss(v9, v14); // 0x737e0
    int128_t v16 = __asm_movaps(v14); // 0x737e4
    int32_t v17 = __asm_movss_1646(__asm_xorps(v16, v5)); // 0x737ea
    int128_t v18 = __asm_movss(-0x3fc00000); // 0x737ef
    int128_t v19 = __asm_movss(v17); // 0x737f7
    int128_t v20 = __asm_mulss(v18, v14); // 0x737fc
    int128_t v21 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x73800
    int32_t v22 = __asm_movss_1646(v15); // 0x73805
    int128_t v23 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x7380a
    int128_t v24 = __asm_mulss_1654(v19, *(int32_t *)(g9 + 4)); // 0x7380f
    int128_t v25 = __asm_mulss(v23, v14); // 0x73814
    int128_t v26 = __asm_mulss(v21, v14); // 0x73818
    int128_t v27 = __asm_addss_1661(v24, v1); // 0x7381c
    int32_t v28 = __asm_movss_1646(v25); // 0x73820
    int128_t v29 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73825
    int32_t v30 = __asm_movss_1646(__asm_mulss(v29, v20)); // 0x7382e
    int128_t v31 = __asm_movss(v22); // 0x73833
    int128_t v32 = __asm_addss_1661(__asm_mulss_1654(v31, *(int32_t *)(g6 + 4)), v27); // 0x7383d
    int128_t v33 = __asm_movss(v17); // 0x73841
    int128_t v34 = __asm_mulss_1654(v33, *(int32_t *)(g9 + 8)); // 0x73846
    int32_t v35 = __asm_movss_1646(__asm_addss(v32, v30)); // 0x73850
    int128_t v36 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x73855
    int128_t v37 = __asm_addss_1661(v34, v1); // 0x7385a
    int32_t v38 = __asm_movss_1646(__asm_mulss(v36, v20)); // 0x73862
    int128_t v39 = __asm_movss(v22); // 0x73867
    int128_t v40 = __asm_addss_1661(__asm_mulss_1654(v39, *(int32_t *)(g6 + 8)), v37); // 0x73871
    int32_t v41 = __asm_movss_1646(__asm_addss(v40, v38)); // 0x7387a
    int128_t v42 = __asm_mulss_1654(v14, *(int32_t *)g10); // 0x7387f
    int128_t v43 = __asm_movss(v17); // 0x73883
    int128_t v44 = __asm_mulss_1654(v20, *(int32_t *)g7); // 0x73888
    int128_t v45 = __asm_mulss_1654(v43, *(int32_t *)g9); // 0x7388c
    int32_t v46 = __asm_movss_1646(v42); // 0x73890
    int128_t v47 = __asm_movss(v22); // 0x73895
    int128_t v48 = __asm_addss(v26, v35); // 0x7389a
    int128_t v49 = __asm_mulss_1654(v47, *(int32_t *)g6); // 0x7389f
    int128_t v50 = __asm_addss_1661(v45, v1); // 0x738a3
    int128_t v51 = __asm_movss(v28); // 0x738a7
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v48);
    int128_t v52 = __asm_addss(v51, v41); // 0x738b1
    int128_t v53 = __asm_addss_1661(v49, v50); // 0x738b6
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v52);
    int128_t v54 = __asm_addss_1661(v44, v53); // 0x738bf
    int32_t v55 = __asm_movss_1646(v52); // 0x738c3
    int128_t v56 = __asm_mulss(__asm_movss(0x40400000), v12); // 0x738d0
    int128_t v57 = __asm_addss(v54, v46); // 0x738d4
    int128_t v58 = __asm_mulss_1654(v12, -0x3f400000); // 0x738d9
    *(int32_t *)g4 = __asm_movss_1646(v57);
    int128_t v59 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x738e5
    int32_t v60 = __asm_movss_1646(v57); // 0x738ea
    int128_t v61 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x738ef
    int128_t v62 = __asm_mulss(v59, v56); // 0x738f4
    int128_t v63 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x738f8
    int128_t v64 = __asm_mulss(v61, v58); // 0x738fd
    int128_t v65 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x73901
    int128_t v66 = __asm_mulss(v63, v56); // 0x73906
    int128_t v67 = __asm_mulss(v65, v56); // 0x7390a
    int128_t v68 = __asm_addss_1661(v62, v48); // 0x7390e
    int128_t v69 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v58); // 0x73917
    int128_t v70 = __asm_addss_1661(v64, v68); // 0x7391b
    int128_t v71 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x7391f
    int128_t v72 = __asm_mulss_1654(v58, *(int32_t *)g6); // 0x73924
    int128_t v73 = __asm_mulss(v71, v56); // 0x73928
    int128_t v74 = __asm_addss_1661(v66, v70); // 0x7392c
    int128_t v75 = __asm_mulss_1654(__asm_movss(0x40400000), v13); // 0x73938
    int128_t v76 = __asm_addss_1661(v69, __asm_addss(v73, v55)); // 0x73942
    int128_t v77 = __asm_mulss(__asm_movss(*(int32_t *)g7), v56); // 0x7394a
    int128_t v78 = __asm_mulss_1654(v56, *(int32_t *)g9); // 0x7394e
    int128_t v79 = __asm_addss_1661(v67, v76); // 0x73952
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v74);
    int128_t v80 = __asm_movss(-0x3fc00000); // 0x7395b
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v79);
    int128_t v81 = __asm_mulss_1654(v80, v13); // 0x73968
    int128_t v82 = __asm_addss(v78, v60); // 0x7396d
    int128_t v83 = __asm_addss_1661(v77, __asm_addss_1661(v72, v82)); // 0x73976
    *(int32_t *)g4 = __asm_movss_1646(v83);
    int128_t v84 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x7397e
    int128_t v85 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73983
    int128_t v86 = __asm_mulss(v84, v75); // 0x73988
    int128_t v87 = __asm_mulss(v85, v75); // 0x7398c
    int32_t v88 = __asm_movss_1646(v86); // 0x73990
    int128_t v89 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73995
    int128_t v90 = __asm_mulss_1654(v75, *(int32_t *)g7); // 0x7399a
    int128_t v91 = __asm_addss_1661(__asm_mulss(v89, v81), v74); // 0x739a2
    int128_t v92 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v81); // 0x739ab
    int128_t v93 = __asm_mulss_1654(v81, *(int32_t *)g9); // 0x739af
    int128_t v94 = __asm_addss_1661(v87, v91); // 0x739b3
    int128_t v95 = __asm_addss_1661(v92, v79); // 0x739b7
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v94);
    int128_t v96 = __asm_movss(0x3f2aaaab); // 0x739c0
    int128_t v97 = __asm_addss_1661(v93, v83); // 0x739c8
    int128_t v98 = __asm_addss(v95, v88); // 0x739cc
    int128_t v99 = __asm_addss_1661(v90, v97); // 0x739d1
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v98);
    *(int32_t *)g4 = __asm_movss_1646(v99);
    int32_t v100 = __asm_movss_1646(v98); // 0x739de
    int128_t v101 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x739e3
    int128_t v102 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x739e8
    int128_t v103 = __asm_mulss(v101, v6); // 0x739ed
    int128_t v104 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x739f1
    int128_t v105 = __asm_mulss(v102, v96); // 0x739f6
    int128_t v106 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x739fa
    int128_t v107 = __asm_mulss(v104, v6); // 0x739ff
    int128_t v108 = __asm_mulss(v106, v6); // 0x73a03
    int128_t v109 = __asm_addss_1661(v103, v94); // 0x73a07
    int128_t v110 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v96); // 0x73a10
    int128_t v111 = __asm_addss_1661(v105, v109); // 0x73a14
    int128_t v112 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x73a18
    int128_t v113 = __asm_mulss_1654(v96, *(int32_t *)g6); // 0x73a1d
    int128_t v114 = __asm_mulss(v112, v6); // 0x73a21
    int128_t v115 = __asm_addss_1661(v107, v111); // 0x73a25
    int128_t v116 = __asm_addss_1661(v110, __asm_addss(v114, v100)); // 0x73a2e
    int128_t v117 = __asm_mulss(__asm_movss(*(int32_t *)g7), v6); // 0x73a36
    int128_t v118 = __asm_mulss_1654(v6, *(int32_t *)g9); // 0x73a3a
    int128_t v119 = __asm_addss_1661(v108, v116); // 0x73a3e
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v115);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v119);
    int128_t v120 = __asm_addss_1661(v113, __asm_addss_1661(v118, v99)); // 0x73a50
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss_1661(v117, v120));
    g6 = v3;
    g10 = v2;
    return g4;
}

// Address range: 0x73a70 - 0x73ae2
int32_t function_73a70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x73a79
    int32_t v3; // bp-28
    int32_t v4 = &v3; // 0x73a7c
    g4 = v4;
    g10 = a2;
    int32_t v5 = g8; // 0x73a82
    g8 = a3;
    int32_t v6 = g6; // 0x73a88
    int32_t v7; // bp-40
    g6 = &v7;
    g9 = a1;
    function_72040(a1, a2, a3, a4, &v7, &v3, &v3);
    g4 = v4;
    g9 = a5;
    int32_t result = function_73780(&v7, g10, g8, v4, a5, a6); // 0x73ad0
    g4 = result;
    g6 = v6;
    g10 = v2;
    g8 = v5;
    return result;
}

// Address range: 0x73af0 - 0x73c89
int32_t function_73af0(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g6; // 0x73af3
    int128_t v2 = __asm_movss(a4); // 0x73af7
    int128_t v3 = __asm_movss(0x3f000000); // 0x73afc
    g4 = a5;
    int128_t v4 = __asm_mulss(__asm_movaps(v2), v2); // 0x73b0a
    g6 = a3;
    int128_t v5 = __asm_mulss(v2, v3); // 0x73b11
    g9 = (int32_t)a1;
    g7 = a2;
    int128_t v6 = __asm_movss(-0x40000000); // 0x73b1b
    int128_t v7 = __asm_mulss(v4, v3); // 0x73b23
    int32_t v8 = __asm_movss_1646(v5); // bp-16
    int128_t v9 = __asm_xorps(v5, v5); // 0x73b2c
    *(int32_t *)g4 = __asm_movss_1646(v9);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v9);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v9);
    int128_t v10 = __asm_mulss(v6, v7); // 0x73b3d
    int128_t v11 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x73b41
    int128_t v12 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73b46
    int128_t v13 = __asm_mulss(v11, v7); // 0x73b4b
    int128_t v14 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x73b4f
    int128_t v15 = __asm_mulss(v12, v10); // 0x73b54
    int128_t v16 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x73b58
    int128_t v17 = __asm_mulss(v14, v10); // 0x73b5d
    int128_t v18 = __asm_mulss(v16, v7); // 0x73b61
    int32_t v19 = __asm_movss_1646(v13); // 0x73b65
    int128_t v20 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73b6a
    int128_t v21 = __asm_mulss_1654(v10, *(int32_t *)g7); // 0x73b6f
    int128_t v22 = __asm_mulss(v20, v7); // 0x73b73
    int128_t v23 = __asm_addss_1661(v15, __asm_addss_1661(v22, v9)); // 0x73b7b
    int128_t v24 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v7); // 0x73b84
    int128_t v25 = __asm_addss_1661(v18, v23); // 0x73b88
    int128_t v26 = __asm_mulss_1654(__asm_movss(-0x40000000), v8); // 0x73b94
    int128_t v27 = __asm_addss_1661(v17, __asm_addss_1661(v24, v9)); // 0x73b9d
    int128_t v28 = __asm_mulss(__asm_movss(*(int32_t *)g6), v7); // 0x73ba5
    int128_t v29 = __asm_mulss_1654(v7, *(int32_t *)g9); // 0x73ba9
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v25);
    int128_t v30 = __asm_addss(v27, v19); // 0x73bb2
    int128_t v31 = __asm_addss_1661(v29, v9); // 0x73bb7
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v30);
    int32_t v32 = __asm_movss_1646(v30); // 0x73bc0
    int128_t v33 = __asm_addss_1661(v28, __asm_addss_1661(v21, v31)); // 0x73bc9
    int128_t v34 = __asm_movss(v8); // 0x73bcd
    int128_t v35 = __asm_addss_1661(v34, v34); // 0x73bd2
    *(int32_t *)g4 = __asm_movss_1646(v33);
    int128_t v36 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73bda
    int128_t v37 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73bdf
    int128_t v38 = __asm_mulss(v36, v26); // 0x73be4
    int128_t v39 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x73be8
    int128_t v40 = __asm_mulss(v37, v35); // 0x73bed
    int128_t v41 = __asm_mulss(v39, v35); // 0x73bf1
    int128_t v42 = __asm_mulss_1654(v35, *(int32_t *)g7); // 0x73bf5
    int128_t v43 = __asm_addss_1661(v38, v25); // 0x73bf9
    int128_t v44 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v26); // 0x73c02
    int128_t v45 = __asm_mulss_1654(v26, *(int32_t *)g9); // 0x73c06
    int128_t v46 = __asm_addss_1661(v40, v43); // 0x73c0a
    int128_t v47 = __asm_addss(v44, v32); // 0x73c0e
    int128_t v48 = __asm_addss_1661(v45, v33); // 0x73c13
    int128_t v49 = __asm_addss_1661(v41, v47); // 0x73c17
    int128_t v50 = __asm_addss_1661(v42, v48); // 0x73c1b
    *(int32_t *)g4 = __asm_movss_1646(v50);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v46);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v49);
    int128_t v51 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73c2d
    int128_t v52 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x73c32
    int128_t v53 = __asm_mulss(v51, v3); // 0x73c37
    int128_t v54 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x73c3b
    int128_t v55 = __asm_mulss(v52, v3); // 0x73c40
    int128_t v56 = __asm_mulss(v54, v3); // 0x73c44
    int128_t v57 = __asm_addss_1661(v53, v46); // 0x73c48
    int128_t v58 = __asm_mulss(__asm_movss(*(int32_t *)(g9 + 8)), v3); // 0x73c51
    int128_t v59 = __asm_addss_1661(v55, v57); // 0x73c55
    int128_t v60 = __asm_addss_1661(v58, v49); // 0x73c59
    int128_t v61 = __asm_mulss(__asm_movss(*(int32_t *)g7), v3); // 0x73c61
    int128_t v62 = __asm_mulss_1654(v3, *(int32_t *)g9); // 0x73c65
    int128_t v63 = __asm_addss_1661(v56, v60); // 0x73c69
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v59);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v63);
    int128_t v64 = __asm_addss_1661(v62, v50); // 0x73c77
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss_1661(v61, v64));
    g6 = v1;
    return g4;
}

// Address range: 0x73c90 - 0x73d02
int32_t function_73c90(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x73c99
    int32_t v3; // bp-28
    int32_t v4 = &v3; // 0x73c9c
    g4 = v4;
    g10 = a2;
    int32_t v5 = g8; // 0x73ca2
    g8 = a3;
    int32_t v6 = g6; // 0x73ca8
    int32_t v7; // bp-40
    g6 = &v7;
    g9 = a1;
    function_72040(a1, a2, a3, a4, &v7, &v3, &v3);
    g4 = v4;
    g9 = a5;
    int32_t result = function_73af0(&v7, g10, g8, v4, a5, a6); // 0x73cf0
    g4 = result;
    g6 = v6;
    g10 = v2;
    g8 = v5;
    return result;
}

// Address range: 0x73d10 - 0x73d38
float80_t function_73d10(int32_t a1) {
    int128_t v1 = __asm_subss_1651(__asm_movss(0x3f800000), a1); // 0x73d1e
    int128_t v2 = __asm_movaps(v1); // 0x73d23
    int128_t v3 = __asm_mulss(__asm_mulss(v2, v1), v1); // 0x73d2a
    return __asm_movss_1646(v3);
}

// Address range: 0x73d40 - 0x73d71
float80_t function_73d40(int32_t a1) {
    int128_t v1 = __asm_movss(a1); // 0x73d46
    int128_t v2 = __asm_subss(__asm_movss(0x3f800000), v1); // 0x73d53
    int128_t v3 = __asm_mulss_1654(v1, 0x40400000); // 0x73d57
    int128_t v4 = __asm_mulss(__asm_mulss(v3, v2), v2); // 0x73d63
    return __asm_movss_1646(v4);
}

// Address range: 0x73d71 - 0x73db5
float80_t function_73d71(int32_t a1) {
    int128_t v1 = __asm_movss(a1); // 0x73d86
    int128_t v2 = __asm_movss(0x40400000); // 0x73d8b
    int128_t v3 = __asm_movss(0x3f800000); // 0x73d93
    int128_t v4 = __asm_mulss(v2, v1); // 0x73d9b
    int128_t v5 = __asm_subss(v3, v1); // 0x73d9f
    int128_t v6 = __asm_mulss(__asm_mulss(v4, v1), v5); // 0x73da7
    return __asm_movss_1646(v6);
}

// Address range: 0x73dc0 - 0x73de0
float80_t function_73dc0(int32_t a1) {
    int128_t v1 = __asm_movss(a1); // 0x73dc6
    int128_t v2 = __asm_movaps(v1); // 0x73dcb
    int128_t v3 = __asm_mulss(__asm_mulss(v2, v1), v1); // 0x73dd2
    return __asm_movss_1646(v3);
}

// Address range: 0x73de0 - 0x73f48
float80_t function_73de0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1; // ebp
    g5 = &v1;
    bool v2 = &v1 < (int32_t *)108; // cf
    bool v3 = &v1 == (int32_t *)108; // zf
    int128_t v4 = __asm_movss(a2); // 0x73de6
    int128_t v5 = v4; // xmm1
    int128_t v6 = __asm_movss(a3); // xmm5
    int128_t v7 = __asm_movaps(v4); // 0x73df0
    int128_t v8 = __asm_movsd_1649(*(int64_t *)&g127); // 0x73df3
    int128_t v9 = __asm_maxss(v7, a4); // 0x73dfb
    int128_t v10 = v6; // 0x73e00
    int128_t v11 = __asm_movaps(v10); // 0x73e00
    int128_t v12 = __asm_subss(__asm_movaps(v10), v5); // 0x73e06
    int128_t v13 = __asm_movaps(__asm_minss(v11, v9)); // 0x73e0e
    int128_t v14 = v13; // xmm2
    int128_t v15 = __asm_addss_1661(__asm_movss(a1), v13); // 0x73e16
    int128_t v16 = __asm_divss(__asm_subss(v15, v5), v12); // 0x73e1e
    int128_t v17 = __asm_movss(0x3f800000); // 0x73e22
    int128_t v18 = __asm_subss(__asm_addss_1661(v16, v16), v17); // 0x73e2e
    int128_t v19 = __asm_unpcklps(v18, v18); // 0x73e32
    int128_t v20 = __asm_andpd(__asm_cvtps2pd(v19), v8); // 0x73e38
    int128_t v21 = __asm_movsd_1649(0x3fe8000000000000); // 0x73e3c
    __asm_ucomisd(v20, v21);
    int128_t v22; // 0x73e7b
    int128_t v23; // xmm0
    if (v2 || v3) {
        int128_t v24 = __asm_addss_1661(v19, v17); // 0x73f18
        int128_t v25 = __asm_movaps(v17); // 0x73f1c
        int128_t v26 = __asm_mulss_1654(v24, 0x3f000000); // 0x73f1f
        v23 = v26;
        v22 = __asm_subss(v25, v26);
    } else {
        int128_t v27 = __asm_subsd(v20, v21); // 0x73e4e
        int128_t v28 = __asm_xorps(v21, v21); // 0x73e52
        int128_t v29 = __asm_divsd_1660(v27, 0x3ff4000000000000); // 0x73e55
        int128_t v30 = __asm_cvtpd2ps(__asm_unpcklpd(v29, v29)); // 0x73e61
        __asm_ucomiss_1648(v17, v30);
        if (v2 || v3) {
            int128_t v31 = __asm_cmpltss(v28, v19); // 0x73e6a
            int128_t v32 = __asm_movaps(v17); // 0x73e6f
            int128_t v33 = __asm_movaps(v31); // 0x73e72
            v23 = __asm_andps(v32, v31);
            v22 = __asm_andnps(v33, v17);
        } else {
            // 0x73e98
            __asm_ucomiss_1648(v19, v28);
            __asm_movss_1646(v30);
            __asm_movss_1646(v28);
            __asm_movss_1646(v17);
            int32_t v34 = __asm_movss_1646(v5); // 0x73ebc
            int32_t v35 = __asm_movss_1646(v14); // 0x73ec1
            int32_t v36 = __asm_movss_1646(v17); // 0x73ec6
            int32_t v37 = __asm_movss_1646(v6); // 0x73ecb
            float80_t v38 = function_72ee0(v37, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x73ed2
            g4 = (float32_t)v38;
            int128_t v39 = __asm_movss(v36); // xmm3
            g13++;
            int128_t v40 = __asm_movss((int32_t)(float32_t)v38); // 0x73edf
            int128_t v41 = v39; // 0x73ee4
            int128_t v42;
            if (v2 || v3) {
                // 0x73ed2
                v42 = __asm_movaps(__asm_subss(__asm_movaps(v41), v40));
            } else {
                // 0x73f30
                v42 = __asm_addss_1661(v40, v41);
            }
            // 0x73eee
            v23 = __asm_mulss_1654(v42, 0x3f000000);
            int128_t v43 = __asm_movaps(v39); // 0x73ef6
            v5 = __asm_movss(v34);
            v14 = __asm_movss(v35);
            v6 = __asm_movss(v37);
            v22 = __asm_subss(v43, v23);
        }
    }
    int128_t v44 = __asm_mulss(v5, v22); // 0x73e7b
    int128_t v45 = __asm_mulss(v23, v6); // 0x73e7f
    int128_t v46 = __asm_subss(__asm_addss_1661(v44, v45), v14); // 0x73e87
    return __asm_movss_1646(v46);
}

// Address range: 0x73f50 - 0x740c6
int32_t function_73f50(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x73f53
    int32_t v2 = g10; // 0x73f54
    int32_t v3 = g6; // 0x73f55
    g4 = a2;
    g9 = a3;
    int128_t v4 = __asm_movss(0x3f000000); // 0x73f5f
    g6 = a1;
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x73f6a
    int128_t v6 = __asm_movss(*(int32_t *)g9); // 0x73f6f
    int128_t v7 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x73f73
    int128_t v8 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x73f78
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x73f7d
    int128_t v10 = __asm_addss_1661(v5, v7); // 0x73f82
    int128_t v11 = __asm_movss(*(int32_t *)g4); // 0x73f86
    int32_t v12; // bp-40
    g4 = &v12;
    int128_t v13 = __asm_addss_1661(v9, v8); // 0x73f91
    int32_t v14; // bp-52
    g4 = &v14;
    int128_t v15 = __asm_addss_1661(v11, v6); // 0x73f9c
    int128_t v16 = __asm_mulss(v10, v4); // 0x73fa0
    g8 = a4;
    g10 = a5;
    int128_t v17 = __asm_mulss(v13, v4); // 0x73fad
    int128_t v18 = __asm_mulss(v15, v4); // 0x73fb1
    int128_t v19 = __asm_subss(v7, v16); // 0x73fb5
    __asm_movss_1646(v16);
    int128_t v20 = __asm_subss(v8, v17); // 0x73fbe
    __asm_movss_1646(v17);
    int128_t v21 = __asm_subss(v6, v18); // 0x73fc7
    v14 = __asm_movss_1646(v18);
    int32_t v22 = __asm_movss_1646(v19); // 0x73fd0
    int32_t v23 = __asm_movss_1646(v20); // 0x73fd5
    int32_t v24 = __asm_movss_1646(v21); // 0x73fda
    g4 = function_6dab0(v24, (int32_t)&g870, (int32_t)&g870);
    int128_t v25 = __asm_movss(v24); // 0x73fe4
    int128_t v26 = __asm_movss(0x7fffffff); // 0x73fe9
    int128_t v27 = __asm_movss(v22); // 0x73ff1
    int128_t v28 = __asm_movss(*(int32_t *)g6); // 0x73ff6
    int128_t v29 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x73ffa
    int128_t v30 = __asm_mulss(v28, v25); // 0x73fff
    int128_t v31 = __asm_movss(v23); // 0x74003
    int128_t v32 = __asm_mulss(v29, v27); // 0x74008
    int128_t v33 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 20)), v27); // 0x74011
    int128_t v34 = __asm_andps(v30, v26); // 0x74015
    int128_t v35 = __asm_mulss_1654(v27, *(int32_t *)(g6 + 36)); // 0x74018
    int128_t v36 = __asm_addss_1661(v34, __asm_andps(v32, v26)); // 0x74020
    int128_t v37 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v31); // 0x74029
    int128_t v38 = __asm_andps(v33, v26); // 0x7402d
    int128_t v39 = __asm_andps(v35, v26); // 0x74030
    int128_t v40 = __asm_addss_1661(v36, __asm_andps(v37, v26)); // 0x74036
    int128_t v41 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 16)), v25); // 0x7403f
    int128_t v42 = __asm_mulss_1654(v25, *(int32_t *)(g6 + 32)); // 0x74043
    int128_t v43 = __asm_addss_1661(__asm_andps(v41, v26), v38); // 0x7404b
    int128_t v44 = __asm_movss(*(int32_t *)(g6 + 24)); // 0x7404f
    int128_t v45 = __asm_addss_1661(__asm_andps(v42, v26), v39); // 0x74057
    int128_t v46 = __asm_movss(v12); // 0x7405b
    int128_t v47 = __asm_mulss(v44, v31); // 0x74060
    int128_t v48 = __asm_mulss_1654(v31, *(int32_t *)(g6 + 40)); // 0x74064
    int128_t v49 = __asm_addss_1661(v43, __asm_andps(v47, v26)); // 0x7406c
    int128_t v50 = __asm_andps(v48, v26); // 0x74070
    int128_t v51 = __asm_movaps(v46); // 0x74073
    int128_t v52 = __asm_addss_1661(v45, v50); // 0x74076
    int128_t v53 = __asm_subss(v51, v40); // 0x7407a
    int32_t v54;
    int128_t v55 = __asm_movss(v54); // 0x7407e
    int128_t v56 = __asm_addss_1661(v40, v46); // 0x74083
    *(int32_t *)g8 = __asm_movss_1646(v53);
    int128_t v57 = __asm_subss(__asm_movaps(v55), v49); // 0x7408e
    int128_t v58 = __asm_addss_1661(v49, v55); // 0x74092
    *(int32_t *)(g8 + 4) = __asm_movss_1646(v57);
    int32_t v59;
    int128_t v60 = __asm_movss(v59); // 0x7409b
    int128_t v61 = __asm_subss(__asm_movaps(v60), v52); // 0x740a3
    int128_t v62 = __asm_addss_1661(v52, v60); // 0x740a7
    *(int32_t *)(g8 + 8) = __asm_movss_1646(v61);
    *(int32_t *)g10 = __asm_movss_1646(v56);
    *(int32_t *)(g10 + 4) = __asm_movss_1646(v58);
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v62);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x740d0 - 0x74246
int32_t function_740d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x740d3
    int32_t v2 = g10; // 0x740d4
    int32_t v3 = g6; // 0x740d5
    g4 = a2;
    g9 = a3;
    int128_t v4 = __asm_movss(0x3f000000); // 0x740df
    g6 = a1;
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x740ea
    int128_t v6 = __asm_movss(*(int32_t *)g9); // 0x740ef
    int128_t v7 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x740f3
    int128_t v8 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x740f8
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x740fd
    int128_t v10 = __asm_addss_1661(v5, v7); // 0x74102
    int128_t v11 = __asm_movss(*(int32_t *)g4); // 0x74106
    int32_t v12; // bp-40
    g4 = &v12;
    int128_t v13 = __asm_addss_1661(v9, v8); // 0x74111
    int32_t v14; // bp-52
    g4 = &v14;
    int128_t v15 = __asm_addss_1661(v11, v6); // 0x7411c
    int128_t v16 = __asm_mulss(v10, v4); // 0x74120
    g8 = a4;
    g10 = a5;
    int128_t v17 = __asm_mulss(v13, v4); // 0x7412d
    int128_t v18 = __asm_mulss(v15, v4); // 0x74131
    int128_t v19 = __asm_subss(v7, v16); // 0x74135
    __asm_movss_1646(v16);
    int128_t v20 = __asm_subss(v8, v17); // 0x7413e
    __asm_movss_1646(v17);
    int128_t v21 = __asm_subss(v6, v18); // 0x74147
    v14 = __asm_movss_1646(v18);
    int32_t v22 = __asm_movss_1646(v19); // 0x74150
    int32_t v23 = __asm_movss_1646(v20); // 0x74155
    int32_t v24 = __asm_movss_1646(v21); // 0x7415a
    g4 = function_6db50(v24, (int32_t)&g870, (int32_t)&g870);
    int128_t v25 = __asm_movss(v24); // 0x74164
    int128_t v26 = __asm_movss(0x7fffffff); // 0x74169
    int128_t v27 = __asm_movss(v22); // 0x74171
    int128_t v28 = __asm_movss(*(int32_t *)g6); // 0x74176
    int128_t v29 = __asm_movss(*(int32_t *)(g6 + 16)); // 0x7417a
    int128_t v30 = __asm_mulss(v28, v25); // 0x7417f
    int128_t v31 = __asm_movss(v23); // 0x74183
    int128_t v32 = __asm_mulss(v29, v27); // 0x74188
    int128_t v33 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 20)), v27); // 0x74191
    int128_t v34 = __asm_andps(v30, v26); // 0x74195
    int128_t v35 = __asm_mulss_1654(v27, *(int32_t *)(g6 + 24)); // 0x74198
    int128_t v36 = __asm_addss_1661(v34, __asm_andps(v32, v26)); // 0x741a0
    int128_t v37 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 32)), v31); // 0x741a9
    int128_t v38 = __asm_andps(v33, v26); // 0x741ad
    int128_t v39 = __asm_andps(v35, v26); // 0x741b0
    int128_t v40 = __asm_addss_1661(v36, __asm_andps(v37, v26)); // 0x741b6
    int128_t v41 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 4)), v25); // 0x741bf
    int128_t v42 = __asm_mulss_1654(v25, *(int32_t *)(g6 + 8)); // 0x741c3
    int128_t v43 = __asm_addss_1661(__asm_andps(v41, v26), v38); // 0x741cb
    int128_t v44 = __asm_movss(*(int32_t *)(g6 + 36)); // 0x741cf
    int128_t v45 = __asm_addss_1661(__asm_andps(v42, v26), v39); // 0x741d7
    int128_t v46 = __asm_movss(v12); // 0x741db
    int128_t v47 = __asm_mulss(v44, v31); // 0x741e0
    int128_t v48 = __asm_mulss_1654(v31, *(int32_t *)(g6 + 40)); // 0x741e4
    int128_t v49 = __asm_addss_1661(v43, __asm_andps(v47, v26)); // 0x741ec
    int128_t v50 = __asm_andps(v48, v26); // 0x741f0
    int128_t v51 = __asm_movaps(v46); // 0x741f3
    int128_t v52 = __asm_addss_1661(v45, v50); // 0x741f6
    int128_t v53 = __asm_subss(v51, v40); // 0x741fa
    int32_t v54;
    int128_t v55 = __asm_movss(v54); // 0x741fe
    int128_t v56 = __asm_addss_1661(v40, v46); // 0x74203
    *(int32_t *)g8 = __asm_movss_1646(v53);
    int128_t v57 = __asm_subss(__asm_movaps(v55), v49); // 0x7420e
    int128_t v58 = __asm_addss_1661(v49, v55); // 0x74212
    *(int32_t *)(g8 + 4) = __asm_movss_1646(v57);
    int32_t v59;
    int128_t v60 = __asm_movss(v59); // 0x7421b
    int128_t v61 = __asm_subss(__asm_movaps(v60), v52); // 0x74223
    int128_t v62 = __asm_addss_1661(v52, v60); // 0x74227
    *(int32_t *)(g8 + 8) = __asm_movss_1646(v61);
    *(int32_t *)g10 = __asm_movss_1646(v56);
    *(int32_t *)(g10 + 4) = __asm_movss_1646(v58);
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v62);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x74250 - 0x743c6
int32_t function_74250(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x74253
    int32_t v2 = g10; // 0x74254
    int32_t v3 = g6; // 0x74255
    g4 = a2;
    g9 = a3;
    int128_t v4 = __asm_movss(0x3f000000); // 0x7425f
    g6 = a1;
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x7426a
    int128_t v6 = __asm_movss(*(int32_t *)g9); // 0x7426f
    int128_t v7 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x74273
    int128_t v8 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x74278
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x7427d
    int128_t v10 = __asm_addss_1661(v5, v7); // 0x74282
    int128_t v11 = __asm_movss(*(int32_t *)g4); // 0x74286
    int32_t v12; // bp-40
    g4 = &v12;
    int128_t v13 = __asm_addss_1661(v9, v8); // 0x74291
    int32_t v14; // bp-52
    g4 = &v14;
    int128_t v15 = __asm_addss_1661(v11, v6); // 0x7429c
    int128_t v16 = __asm_mulss(v10, v4); // 0x742a0
    g8 = a4;
    g10 = a5;
    int128_t v17 = __asm_mulss(v13, v4); // 0x742ad
    int128_t v18 = __asm_mulss(v15, v4); // 0x742b1
    int128_t v19 = __asm_subss(v7, v16); // 0x742b5
    __asm_movss_1646(v16);
    int128_t v20 = __asm_subss(v8, v17); // 0x742be
    __asm_movss_1646(v17);
    int128_t v21 = __asm_subss(v6, v18); // 0x742c7
    v14 = __asm_movss_1646(v18);
    int32_t v22 = __asm_movss_1646(v19); // 0x742d0
    int32_t v23 = __asm_movss_1646(v20); // 0x742d5
    int32_t v24 = __asm_movss_1646(v21); // 0x742da
    g4 = function_6dbf0(v24, &g870, (int32_t)&g870);
    int128_t v25 = __asm_movss(v24); // 0x742e4
    int128_t v26 = __asm_movss(0x7fffffff); // 0x742e9
    int128_t v27 = __asm_movss(v22); // 0x742f1
    int128_t v28 = __asm_movss(*(int32_t *)g6); // 0x742f6
    int128_t v29 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x742fa
    int128_t v30 = __asm_mulss(v28, v25); // 0x742ff
    int128_t v31 = __asm_movss(v23); // 0x74303
    int128_t v32 = __asm_mulss(v29, v27); // 0x74308
    int128_t v33 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 20)), v27); // 0x74311
    int128_t v34 = __asm_andps(v30, v26); // 0x74315
    int128_t v35 = __asm_mulss_1654(v27, *(int32_t *)(g6 + 36)); // 0x74318
    int128_t v36 = __asm_addss_1661(v34, __asm_andps(v32, v26)); // 0x74320
    int128_t v37 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v31); // 0x74329
    int128_t v38 = __asm_andps(v33, v26); // 0x7432d
    int128_t v39 = __asm_andps(v35, v26); // 0x74330
    int128_t v40 = __asm_addss_1661(v36, __asm_andps(v37, v26)); // 0x74336
    int128_t v41 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 16)), v25); // 0x7433f
    int128_t v42 = __asm_mulss_1654(v25, *(int32_t *)(g6 + 32)); // 0x74343
    int128_t v43 = __asm_addss_1661(__asm_andps(v41, v26), v38); // 0x7434b
    int128_t v44 = __asm_movss(*(int32_t *)(g6 + 24)); // 0x7434f
    int128_t v45 = __asm_addss_1661(__asm_andps(v42, v26), v39); // 0x74357
    int128_t v46 = __asm_movss(v12); // 0x7435b
    int128_t v47 = __asm_mulss(v44, v31); // 0x74360
    int128_t v48 = __asm_mulss_1654(v31, *(int32_t *)(g6 + 40)); // 0x74364
    int128_t v49 = __asm_addss_1661(v43, __asm_andps(v47, v26)); // 0x7436c
    int128_t v50 = __asm_andps(v48, v26); // 0x74370
    int128_t v51 = __asm_movaps(v46); // 0x74373
    int128_t v52 = __asm_addss_1661(v45, v50); // 0x74376
    int128_t v53 = __asm_subss(v51, v40); // 0x7437a
    int32_t v54;
    int128_t v55 = __asm_movss(v54); // 0x7437e
    int128_t v56 = __asm_addss_1661(v40, v46); // 0x74383
    *(int32_t *)g8 = __asm_movss_1646(v53);
    int128_t v57 = __asm_subss(__asm_movaps(v55), v49); // 0x7438e
    int128_t v58 = __asm_addss_1661(v49, v55); // 0x74392
    *(int32_t *)(g8 + 4) = __asm_movss_1646(v57);
    int32_t v59;
    int128_t v60 = __asm_movss(v59); // 0x7439b
    int128_t v61 = __asm_subss(__asm_movaps(v60), v52); // 0x743a3
    int128_t v62 = __asm_addss_1661(v52, v60); // 0x743a7
    *(int32_t *)(g8 + 8) = __asm_movss_1646(v61);
    *(int32_t *)g10 = __asm_movss_1646(v56);
    *(int32_t *)(g10 + 4) = __asm_movss_1646(v58);
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v62);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x743d0 - 0x74546
int32_t function_743d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x743d3
    int32_t v2 = g10; // 0x743d4
    int32_t v3 = g6; // 0x743d5
    g4 = a2;
    g9 = a3;
    int128_t v4 = __asm_movss(0x3f000000); // 0x743df
    g6 = a1;
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x743ea
    int128_t v6 = __asm_movss(*(int32_t *)g9); // 0x743ef
    int128_t v7 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x743f3
    int128_t v8 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x743f8
    int128_t v9 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x743fd
    int128_t v10 = __asm_addss_1661(v5, v7); // 0x74402
    int128_t v11 = __asm_movss(*(int32_t *)g4); // 0x74406
    int32_t v12; // bp-40
    g4 = &v12;
    int128_t v13 = __asm_addss_1661(v9, v8); // 0x74411
    int32_t v14; // bp-52
    g4 = &v14;
    int128_t v15 = __asm_addss_1661(v11, v6); // 0x7441c
    int128_t v16 = __asm_mulss(v10, v4); // 0x74420
    g8 = a4;
    g10 = a5;
    int128_t v17 = __asm_mulss(v13, v4); // 0x7442d
    int128_t v18 = __asm_mulss(v15, v4); // 0x74431
    int128_t v19 = __asm_subss(v7, v16); // 0x74435
    __asm_movss_1646(v16);
    int128_t v20 = __asm_subss(v8, v17); // 0x7443e
    __asm_movss_1646(v17);
    int128_t v21 = __asm_subss(v6, v18); // 0x74447
    v14 = __asm_movss_1646(v18);
    int32_t v22 = __asm_movss_1646(v19); // 0x74450
    int32_t v23 = __asm_movss_1646(v20); // 0x74455
    int32_t v24 = __asm_movss_1646(v21); // 0x7445a
    g4 = function_6dde0(v24, (int32_t)&g870, (int32_t)&g870);
    int128_t v25 = __asm_movss(v24); // 0x74464
    int128_t v26 = __asm_movss(0x7fffffff); // 0x74469
    int128_t v27 = __asm_movss(v22); // 0x74471
    int128_t v28 = __asm_movss(*(int32_t *)g6); // 0x74476
    int128_t v29 = __asm_movss(*(int32_t *)(g6 + 16)); // 0x7447a
    int128_t v30 = __asm_mulss(v28, v25); // 0x7447f
    int128_t v31 = __asm_movss(v23); // 0x74483
    int128_t v32 = __asm_mulss(v29, v27); // 0x74488
    int128_t v33 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 20)), v27); // 0x74491
    int128_t v34 = __asm_andps(v30, v26); // 0x74495
    int128_t v35 = __asm_mulss_1654(v27, *(int32_t *)(g6 + 24)); // 0x74498
    int128_t v36 = __asm_addss_1661(v34, __asm_andps(v32, v26)); // 0x744a0
    int128_t v37 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 32)), v31); // 0x744a9
    int128_t v38 = __asm_andps(v33, v26); // 0x744ad
    int128_t v39 = __asm_andps(v35, v26); // 0x744b0
    int128_t v40 = __asm_addss_1661(v36, __asm_andps(v37, v26)); // 0x744b6
    int128_t v41 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 4)), v25); // 0x744bf
    int128_t v42 = __asm_mulss_1654(v25, *(int32_t *)(g6 + 8)); // 0x744c3
    int128_t v43 = __asm_addss_1661(__asm_andps(v41, v26), v38); // 0x744cb
    int128_t v44 = __asm_movss(*(int32_t *)(g6 + 36)); // 0x744cf
    int128_t v45 = __asm_addss_1661(__asm_andps(v42, v26), v39); // 0x744d7
    int128_t v46 = __asm_movss(v12); // 0x744db
    int128_t v47 = __asm_mulss(v44, v31); // 0x744e0
    int128_t v48 = __asm_mulss_1654(v31, *(int32_t *)(g6 + 40)); // 0x744e4
    int128_t v49 = __asm_addss_1661(v43, __asm_andps(v47, v26)); // 0x744ec
    int128_t v50 = __asm_andps(v48, v26); // 0x744f0
    int128_t v51 = __asm_movaps(v46); // 0x744f3
    int128_t v52 = __asm_addss_1661(v45, v50); // 0x744f6
    int128_t v53 = __asm_subss(v51, v40); // 0x744fa
    int32_t v54;
    int128_t v55 = __asm_movss(v54); // 0x744fe
    int128_t v56 = __asm_addss_1661(v40, v46); // 0x74503
    *(int32_t *)g8 = __asm_movss_1646(v53);
    int128_t v57 = __asm_subss(__asm_movaps(v55), v49); // 0x7450e
    int128_t v58 = __asm_addss_1661(v49, v55); // 0x74512
    *(int32_t *)(g8 + 4) = __asm_movss_1646(v57);
    int32_t v59;
    int128_t v60 = __asm_movss(v59); // 0x7451b
    int128_t v61 = __asm_subss(__asm_movaps(v60), v52); // 0x74523
    int128_t v62 = __asm_addss_1661(v52, v60); // 0x74527
    *(int32_t *)(g8 + 8) = __asm_movss_1646(v61);
    *(int32_t *)g10 = __asm_movss_1646(v56);
    *(int32_t *)(g10 + 4) = __asm_movss_1646(v58);
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v62);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x74550 - 0x74640
float80_t function_74550(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    bool v2 = &v1 < (int32_t *)4; // cf
    bool v3 = &v1 == (int32_t *)4; // zf
    g4 = a1;
    g9 = a3;
    g7 = a2;
    int128_t v4 = __asm_movss(*(int32_t *)a1); // 0x7455f
    int128_t v5 = __asm_movss(*(int32_t *)g9); // 0x74563
    __asm_ucomiss_1648(v4, v5);
    int128_t v6; // xmm0
    if (v2 || v3) {
        int128_t v7 = __asm_movss(*(int32_t *)g7); // 0x74610
        __asm_ucomiss_1648(v5, v7);
        if (v2 || v3) {
            // 0x74638
            v6 = __asm_xorps(v7, v7);
        } else {
            int128_t v8 = __asm_subss(v5, v7); // 0x74619
            int128_t v9 = __asm_movaps(v8); // 0x7461d
            v6 = __asm_addss(__asm_mulss(v9, v8), 0);
        }
    } else {
        int128_t v10 = __asm_subss(v4, v5); // 0x74570
        v6 = __asm_addss(__asm_mulss(v10, v10), 0);
    }
    int128_t v11 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x74580
    int128_t v12 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x74585
    __asm_ucomiss_1648(v12, v11);
    int128_t v13; // xmm1
    int128_t v14; // xmm2
    if (v2 || v3) {
        int128_t v15 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x745d0
        __asm_ucomiss_1648(v11, v15);
        if (v2 || v3) {
            goto lab_0x7459e;
        } else {
            int128_t v16 = __asm_subss(v11, v15); // 0x745da
            v14 = __asm_movss(*(int32_t *)(g4 + 8));
            v6 = __asm_addss_1661(v6, __asm_mulss(v16, v16));
            int128_t v17 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x745eb
            v13 = v17;
            __asm_ucomiss_1648(v14, v17);
            if (v2 || v3) {
                goto lab_0x745ad;
            } else {
                goto lab_0x745f5;
            }
        }
    } else {
        int128_t v18 = __asm_subss(v12, v11); // 0x7458f
        int128_t v19 = __asm_movaps(v18); // 0x74593
        v6 = __asm_addss_1661(v6, __asm_mulss(v19, v18));
        goto lab_0x7459e;
    }
  lab_0x7459e:
    // 0x7459e
    v13 = __asm_movss(*(int32_t *)(g9 + 8));
    int128_t v20 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x745a3
    v14 = v20;
    __asm_ucomiss_1648(v20, v13);
    if (v2 || v3) {
        goto lab_0x745ad;
    } else {
        goto lab_0x745f5;
    }
  lab_0x745ad:;
    int128_t v21 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x745ad
    __asm_ucomiss_1648(v13, v21);
    int128_t v22; // 0x745c3
    if (v2 || v3) {
        // 0x745ad
        v22 = v6;
    } else {
        int128_t v23 = __asm_subss(v13, v21); // 0x745b7
        v22 = __asm_addss_1661(v6, __asm_mulss(v23, v23));
    }
    // 0x745c3
    return __asm_movss_1646(v22);
  lab_0x745f5:;
    int128_t v24 = __asm_subss(v14, v13); // 0x745f5
    int128_t v25 = __asm_addss_1661(v6, __asm_mulss(v24, v24)); // 0x745fd
    return __asm_movss_1646(v25);
}

// Address range: 0x74640 - 0x746a6
int32_t function_74640(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74643
    g9 = a1;
    g7 = a3;
    g6 = a2;
    g4 = a4;
    int128_t v2 = __asm_movss(*(int32_t *)a1); // 0x74650
    int128_t v3 = __asm_movss(*(int32_t *)g7); // 0x74654
    __asm_ucomiss_1648(v2, v3);
    bool v4; // cf
    int128_t v5; // 0x74665
    bool v6; // zf
    if (v4 || v6) {
        int128_t v7 = __asm_movss(*(int32_t *)g6); // 0x7465d
        v5 = __asm_minss(v7, v3);
    } else {
        // 0x74640
        v5 = v2;
    }
    // 0x74665
    *(int32_t *)g4 = __asm_movss_1646(v5);
    int128_t v8 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x74669
    int128_t v9 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x7466e
    __asm_ucomiss_1648(v9, v8);
    int128_t v10; // 0x74681
    if (v4 || v6) {
        int128_t v11 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74678
        v10 = __asm_minss(v11, v8);
    } else {
        // 0x74665
        v10 = v9;
    }
    // 0x74681
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v10);
    int128_t v12 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x74686
    int128_t v13 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x7468b
    __asm_ucomiss_1648(v13, v12);
    int128_t v14; // 0x7469e
    if (v4 || v6) {
        int128_t v15 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x74695
        v14 = __asm_minss(v15, v12);
    } else {
        // 0x74681
        v14 = v13;
    }
    // 0x7469e
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v14);
    g6 = v1;
    return g4;
}

// Address range: 0x746b0 - 0x7472f
int32_t function_746b0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    bool v1 = false; // cf
    bool v2 = true; // zf
    g4 = 0;
    int32_t v3 = g8; // 0x746b5
    int32_t v4 = g10; // 0x746b6
    g9 = a5;
    int32_t v5 = g6; // 0x746ba
    g7 = a1;
    g8 = a2;
    g6 = a3;
    g10 = a4;
    *(int32_t *)a5 = 0;
    int32_t v6 = g4; // 0x746cd
    int32_t result; // 0x746f2
    while (true) {
        int128_t v7 = __asm_movss(*(int32_t *)(g6 + v6)); // 0x746cd
        int128_t v8 = __asm_movss(*(int32_t *)(g4 + g7)); // 0x746d2
        __asm_ucomiss_1648(v8, v7);
        if (v1 || v2) {
            int128_t v9 = __asm_movss(*(int32_t *)(g4 + g8)); // 0x74700
            __asm_ucomiss_1648(v7, v9);
            if (v1 || v2) {
                // 0x74728
                *(int32_t *)(g4 + g10) = __asm_movss_1646(v7);
            } else {
                // 0x7470a
                *(int32_t *)(g4 + g10) = __asm_movss_1646(v9);
                int128_t v10 = __asm_subss_1651(v9, *(int32_t *)(g4 + g8)); // 0x7470f
                int128_t v11 = __asm_mulss(v10, v10); // 0x74714
                *(int32_t *)g9 = __asm_movss_1646(__asm_addss(v11, *(int32_t *)g9));
            }
        } else {
            // 0x746dc
            *(int32_t *)(g4 + g10) = __asm_movss_1646(v8);
            int128_t v12 = __asm_subss_1651(v8, *(int32_t *)(g4 + g7)); // 0x746e1
            int128_t v13 = __asm_mulss(v12, v12); // 0x746e6
            *(int32_t *)g9 = __asm_movss_1646(__asm_addss(v13, *(int32_t *)g9));
        }
        int32_t v14 = g4; // 0x746f2
        result = v14 + 4;
        g4 = result;
        v1 = result < 12;
        v2 = v14 == 8;
        if (v14 == 8) {
            // break -> 0x746fa
            break;
        }
        v6 = result;
    }
    // 0x746fa
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return result;
}

// Address range: 0x74730 - 0x747e8
int32_t function_74730(int32_t a1, int32_t a2, int32_t a3, int32_t * a4) {
    int32_t v1 = g6; // bp-8
    g7 = a3;
    g4 = a2;
    g9 = (int32_t)a4;
    int128_t v2 = __asm_movss(0x3727c5ac); // 0x74740
    int128_t v3 = __asm_movss(*(int32_t *)g7); // 0x74748
    g6 = a1;
    int128_t v4 = __asm_subss_1651(v3, *(int32_t *)g4); // 0x7474f
    *(int32_t *)g9 = __asm_movss_1646(v4);
    int128_t v5 = __asm_movaps(v4); // 0x74757
    int128_t v6 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x7475a
    int128_t v7 = __asm_mulss(v5, v4); // 0x7475f
    int128_t v8 = __asm_subss_1651(v6, *(int32_t *)(g4 + 4)); // 0x74763
    *(int32_t *)(g9 + 4) = __asm_movss_1646(v8);
    int128_t v9 = __asm_movaps(v8); // 0x7476d
    int128_t v10 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x74770
    int128_t v11 = __asm_mulss(v9, v8); // 0x74775
    int128_t v12 = __asm_subss_1651(v10, *(int32_t *)(g4 + 8)); // 0x74779
    g879 = v12;
    int128_t v13 = __asm_addss_1661(v7, v11); // 0x7477e
    int128_t v14 = __asm_movaps(v12); // 0x74782
    *(int32_t *)(g9 + 8) = __asm_movss_1646(v12);
    int128_t v15 = __asm_mulss(v14, v12); // 0x7478a
    int128_t v16 = __asm_addss_1661(v13, v15); // 0x7478e
    int128_t v17 = __asm_xorps(v15, v15); // xmm0
    __asm_ucomiss_1648(v2, v16);
    int128_t v18; // 0x747da
    if (&v1 < (int32_t *)4 || &v1 == (int32_t *)4) {
        int128_t v19 = __asm_movss(*(int32_t *)g6); // 0x7479a
        int128_t v20 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x7479e
        int128_t v21 = __asm_mulss(v19, v4); // 0x747a3
        int128_t v22 = __asm_mulss(v20, v8); // 0x747a7
        int128_t v23 = __asm_mulss_1654(v4, *(int32_t *)g4); // 0x747ab
        int128_t v24 = __asm_mulss_1654(v8, *(int32_t *)(g4 + 4)); // 0x747af
        int128_t v25 = __asm_addss_1661(v21, v22); // 0x747b4
        int128_t v26 = __asm_mulss(__asm_movss(*(int32_t *)(g6 + 8)), v12); // 0x747bd
        int128_t v27 = __asm_addss_1661(v23, v24); // 0x747c1
        int128_t v28 = __asm_mulss_1654(v12, *(int32_t *)(g4 + 8)); // 0x747c5
        g879 = v28;
        int128_t v29 = __asm_addss_1661(v25, v26); // 0x747ca
        v18 = __asm_divss(__asm_subss(v29, __asm_addss_1661(v27, v28)), v16);
    } else {
        // 0x74730
        v18 = v17;
    }
    // 0x747da
    g13--;
    g868 = __asm_movss_1646(v18);
    g2 = g11 > 0xfffffffb;
    g882 = g11 == -4;
    g6 = v1;
    return g4;
}

// Address range: 0x747f0 - 0x74875
int32_t function_747f0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x747f9
    g6 = a2;
    int32_t v3 = g8; // 0x74806
    g8 = a5;
    int32_t v4 = g10; // 0x7480c
    g10 = (int32_t)a4;
    g4 = a1;
    int32_t v5; // bp-28
    g4 = function_74730(a1, a2, a3, &v5);
    g13++;
    int128_t v6 = __asm_movss((int32_t)(float32_t)g868); // 0x7482a
    if (a5 != 0) {
        // 0x74831
        *(int32_t *)a5 = __asm_movss_1646(v6);
    }
    int128_t v7 = __asm_mulss(__asm_movss(v5), v6); // 0x7483a
    *(int32_t *)g10 = __asm_movss_1646(__asm_addss(v7, *(int32_t *)g6));
    int32_t v8;
    int128_t v9 = __asm_mulss(__asm_movss(v8), v6); // 0x7484b
    int32_t v10;
    int128_t v11 = __asm_mulss_1654(v6, v10); // 0x7484f
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_addss(v9, *(int32_t *)(g6 + 4)));
    *(int32_t *)(g10 + 8) = __asm_movss_1646(__asm_addss(v11, *(int32_t *)(g6 + 8)));
    g6 = v2;
    g10 = v4;
    g8 = v3;
    return g4;
}

// Address range: 0x74880 - 0x748fb
int32_t function_74880(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74883
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-24
    g4 = function_747f0(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x748ae
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x748b2
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x748b7
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x748bc
    int128_t v8 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x748c1
    int128_t v9 = __asm_mulss(v5, v5); // 0x748c6
    int32_t v10;
    int128_t v11 = __asm_subss_1651(v8, v10); // 0x748ca
    int128_t v12 = __asm_mulss(v7, v7); // 0x748cf
    int128_t v13 = __asm_mulss(v11, v11); // 0x748d3
    int128_t v14 = __asm_addss_1661(__asm_addss_1661(v9, v12), v13); // 0x748db
    int128_t v15 = __asm_movss_1667(__asm_xorps(v13, v13), v14); // 0x748e2
    __asm_movaps(v15);
    __asm_movss_1646(__asm_sqrtss(v15));
    g6 = v1;
    return g4;
}

// Address range: 0x74900 - 0x7496d
int32_t function_74900(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74903
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-20
    g4 = function_747f0(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x7492e
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74932
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74937
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x7493c
    int128_t v8 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x74941
    int128_t v9 = __asm_mulss(v5, v5); // 0x74946
    int32_t v10;
    int128_t v11 = __asm_subss_1651(v8, v10); // 0x7494a
    int128_t v12 = __asm_mulss(v7, v7); // 0x7494f
    int128_t v13 = __asm_mulss(v11, v11); // 0x74953
    int128_t v14 = __asm_addss_1661(v9, v12); // 0x74957
    __asm_movss_1646(__asm_addss_1661(v14, v13));
    g6 = v1;
    return g4;
}

// Address range: 0x74970 - 0x74a15
int32_t function_74970(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x74979
    g6 = a2;
    int32_t v3 = g10; // 0x74986
    g10 = (int32_t)a4;
    int32_t v4 = g8; // 0x7498c
    g8 = a5;
    g4 = a1;
    int32_t v5; // bp-28
    g4 = function_74730(a1, a2, a3, &v5);
    int128_t v6 = __asm_xorps(g879, g879); // 0x749a5
    g13++;
    int128_t v7 = __asm_movss((int32_t)(float32_t)g868); // 0x749ab
    __asm_ucomiss_1648(v6, v7);
    int128_t v8; // 0x749c8
    if (g2 || g882) {
        // 0x749b5
        v8 = __asm_movaps(__asm_minss(__asm_movss(0x3f800000), v7));
    } else {
        // 0x74a10
        v8 = __asm_movaps(v6);
    }
    // 0x749c4
    if (a5 != 0) {
        // 0x749c8
        *(int32_t *)a5 = __asm_movss_1646(v8);
    }
    int128_t v9 = __asm_mulss(__asm_movss(v5), v8); // 0x749d1
    *(int32_t *)g10 = __asm_movss_1646(__asm_addss(v9, *(int32_t *)g6));
    int32_t v10;
    int128_t v11 = __asm_mulss(__asm_movss(v10), v8); // 0x749e2
    int32_t v12;
    int128_t v13 = __asm_mulss_1654(v8, v12); // 0x749e6
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_addss(v11, *(int32_t *)(g6 + 4)));
    int128_t v14 = __asm_addss(v13, *(int32_t *)(g6 + 8)); // 0x749f5
    *(int32_t *)(g10 + 8) = __asm_movss_1646(v14);
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return g4;
}

// Address range: 0x74a20 - 0x74a9b
int32_t function_74a20(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74a23
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-24
    g4 = function_74970(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x74a4e
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74a52
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74a57
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x74a5c
    int128_t v8 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x74a61
    int128_t v9 = __asm_mulss(v5, v5); // 0x74a66
    int32_t v10;
    int128_t v11 = __asm_subss_1651(v8, v10); // 0x74a6a
    int128_t v12 = __asm_mulss(v7, v7); // 0x74a6f
    int128_t v13 = __asm_mulss(v11, v11); // 0x74a73
    int128_t v14 = __asm_addss_1661(__asm_addss_1661(v9, v12), v13); // 0x74a7b
    int128_t v15 = __asm_movss_1667(__asm_xorps(v13, v13), v14); // 0x74a82
    __asm_movaps(v15);
    __asm_movss_1646(__asm_sqrtss(v15));
    g6 = v1;
    return g4;
}

// Address range: 0x74aa0 - 0x74b0d
int32_t function_74aa0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74aa3
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-20
    g4 = function_74970(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x74ace
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74ad2
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74ad7
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x74adc
    int128_t v8 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x74ae1
    int128_t v9 = __asm_mulss(v5, v5); // 0x74ae6
    int32_t v10;
    int128_t v11 = __asm_subss_1651(v8, v10); // 0x74aea
    int128_t v12 = __asm_mulss(v7, v7); // 0x74aef
    int128_t v13 = __asm_mulss(v11, v11); // 0x74af3
    int128_t v14 = __asm_addss_1661(v9, v12); // 0x74af7
    __asm_movss_1646(__asm_addss_1661(v14, v13));
    g6 = v1;
    return g4;
}

// Address range: 0x74b10 - 0x74b98
int32_t function_74b10(int32_t a1, int32_t a2, int32_t a3, int32_t * a4) {
    int32_t v1 = g6; // bp-8
    g7 = a3;
    g4 = a2;
    g9 = (int32_t)a4;
    int128_t v2 = __asm_movss(0x3727c5ac); // 0x74b20
    int128_t v3 = __asm_movss(*(int32_t *)g7); // 0x74b28
    g6 = a1;
    int128_t v4 = __asm_subss_1651(v3, *(int32_t *)g4); // 0x74b2f
    g879 = v4;
    *(int32_t *)g9 = __asm_movss_1646(v4);
    int128_t v5 = __asm_movaps(v4); // 0x74b37
    int128_t v6 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x74b3a
    int128_t v7 = __asm_mulss(v5, v4); // 0x74b3f
    int128_t v8 = __asm_subss_1651(v6, *(int32_t *)(g4 + 4)); // 0x74b43
    int128_t v9 = __asm_movaps(v8); // 0x74b48
    *(int32_t *)(g9 + 4) = __asm_movss_1646(v8);
    int128_t v10 = __asm_mulss(v9, v8); // 0x74b50
    int128_t v11 = __asm_addss_1661(v7, v10); // 0x74b54
    int128_t v12 = __asm_xorps(v10, v10); // xmm2
    __asm_ucomiss_1648(v2, v11);
    int128_t v13; // 0x74b8a
    if (&v1 < (int32_t *)4 || &v1 == (int32_t *)4) {
        int128_t v14 = __asm_movss(*(int32_t *)g6); // 0x74b60
        int128_t v15 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74b64
        int128_t v16 = __asm_mulss(v14, v4); // 0x74b69
        int128_t v17 = __asm_mulss(v15, v8); // 0x74b6d
        int128_t v18 = __asm_mulss_1654(v4, *(int32_t *)g4); // 0x74b71
        int128_t v19 = __asm_mulss_1654(v8, *(int32_t *)(g4 + 4)); // 0x74b75
        int128_t v20 = __asm_addss_1661(v16, v17); // 0x74b7a
        int128_t v21 = __asm_addss_1661(v18, v19); // 0x74b7e
        g879 = v21;
        v13 = __asm_divss(__asm_subss(v20, v21), v11);
    } else {
        // 0x74b10
        v13 = v12;
    }
    // 0x74b8a
    g13--;
    g868 = __asm_movss_1646(v13);
    g2 = g11 > 0xfffffffb;
    g882 = g11 == -4;
    g6 = v1;
    return g4;
}

// Address range: 0x74ba0 - 0x74c12
int32_t function_74ba0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x74ba9
    g6 = a2;
    int32_t v3 = g8; // 0x74bb6
    g8 = a5;
    int32_t v4 = g10; // 0x74bbc
    g10 = (int32_t)a4;
    g4 = a1;
    int32_t v5; // bp-24
    g4 = function_74b10(a1, a2, a3, &v5);
    g13++;
    int128_t v6 = __asm_movss((int32_t)(float32_t)g868); // 0x74bda
    if (a5 != 0) {
        // 0x74be1
        *(int32_t *)a5 = __asm_movss_1646(v6);
    }
    int128_t v7 = __asm_mulss(__asm_movss(v5), v6); // 0x74bea
    int32_t v8;
    int128_t v9 = __asm_mulss_1654(v6, v8); // 0x74bee
    *(int32_t *)g10 = __asm_movss_1646(__asm_addss(v7, *(int32_t *)g6));
    *(int32_t *)(g10 + 4) = __asm_movss_1646(__asm_addss(v9, *(int32_t *)(g6 + 4)));
    g6 = v2;
    g10 = v4;
    g8 = v3;
    return g4;
}

// Address range: 0x74c20 - 0x74c89
int32_t function_74c20(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74c23
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-20
    g4 = function_74ba0(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x74c4e
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74c52
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74c57
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x74c5c
    int128_t v8 = __asm_mulss(v5, v5); // 0x74c61
    int128_t v9 = __asm_mulss(v7, v7); // 0x74c65
    int128_t v10 = __asm_addss_1661(v8, v9); // 0x74c69
    int128_t v11 = __asm_movss_1667(__asm_xorps(v9, v9), v10); // 0x74c70
    __asm_movaps(v11);
    __asm_movss_1646(__asm_sqrtss(v11));
    g6 = v1;
    return g4;
}

// Address range: 0x74c90 - 0x74ceb
int32_t function_74c90(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74c93
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-16
    g4 = function_74ba0(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x74cbe
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74cc2
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74cc7
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x74ccc
    int128_t v8 = __asm_mulss(v5, v5); // 0x74cd1
    int128_t v9 = __asm_mulss(v7, v7); // 0x74cd5
    __asm_movss_1646(__asm_addss_1661(v8, v9));
    g6 = v1;
    return g4;
}

// Address range: 0x74cf0 - 0x74d85
int32_t function_74cf0(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t v2 = g6; // 0x74cf9
    g6 = a2;
    int32_t v3 = g10; // 0x74d06
    g10 = (int32_t)a4;
    int32_t v4 = g8; // 0x74d0c
    g8 = a5;
    g4 = a1;
    int32_t v5; // bp-24
    g4 = function_74b10(a1, a2, a3, &v5);
    int128_t v6 = __asm_xorps(g879, g879); // 0x74d25
    g13++;
    int128_t v7 = __asm_movss((int32_t)(float32_t)g868); // 0x74d2b
    __asm_ucomiss_1648(v6, v7);
    int128_t v8; // 0x74d48
    if (g2 || g882) {
        // 0x74d35
        v8 = __asm_movaps(__asm_minss(__asm_movss(0x3f800000), v7));
    } else {
        // 0x74d80
        v8 = __asm_movaps(v6);
    }
    // 0x74d44
    if (a5 != 0) {
        // 0x74d48
        *(int32_t *)a5 = __asm_movss_1646(v8);
    }
    int128_t v9 = __asm_mulss(__asm_movss(v5), v8); // 0x74d51
    int32_t v10;
    int128_t v11 = __asm_mulss_1654(v8, v10); // 0x74d55
    *(int32_t *)g10 = __asm_movss_1646(__asm_addss(v9, *(int32_t *)g6));
    int128_t v12 = __asm_addss(v11, *(int32_t *)(g6 + 4)); // 0x74d62
    *(int32_t *)(g10 + 4) = __asm_movss_1646(v12);
    g6 = v2;
    g10 = v3;
    g8 = v4;
    return g4;
}

// Address range: 0x74d90 - 0x74df9
int32_t function_74d90(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74d93
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-20
    g4 = function_74cf0(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x74dbe
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74dc2
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74dc7
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x74dcc
    int128_t v8 = __asm_mulss(v5, v5); // 0x74dd1
    int128_t v9 = __asm_mulss(v7, v7); // 0x74dd5
    int128_t v10 = __asm_addss_1661(v8, v9); // 0x74dd9
    int128_t v11 = __asm_movss_1667(__asm_xorps(v9, v9), v10); // 0x74de0
    __asm_movaps(v11);
    __asm_movss_1646(__asm_sqrtss(v11));
    g6 = v1;
    return g4;
}

// Address range: 0x74e00 - 0x74e5b
int32_t function_74e00(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x74e03
    g6 = a1;
    g4 = a2;
    int32_t v2; // bp-16
    g4 = function_74cf0(a1, a2, a3, &v2, a4);
    int128_t v3 = __asm_movss(*(int32_t *)g6); // 0x74e2e
    int128_t v4 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74e32
    int128_t v5 = __asm_subss_1651(v3, v2); // 0x74e37
    int32_t v6;
    int128_t v7 = __asm_subss_1651(v4, v6); // 0x74e3c
    int128_t v8 = __asm_mulss(v5, v5); // 0x74e41
    int128_t v9 = __asm_mulss(v7, v7); // 0x74e45
    __asm_movss_1646(__asm_addss_1661(v8, v9));
    g6 = v1;
    return g4;
}

// Address range: 0x74e60 - 0x75185
int32_t function_74e60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = g8; // 0x74e63
    int32_t v2 = g10; // 0x74e64
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)44; // cf
    bool v5 = &v3 == (int32_t *)44; // zf
    g9 = a3;
    g4 = a4;
    g7 = a1;
    g6 = a2;
    int128_t v6 = __asm_movss(*(int32_t *)a3); // 0x74e75
    int128_t v7 = __asm_movss(*(int32_t *)g4); // 0x74e79
    int128_t v8 = __asm_movss(*(int32_t *)g7); // 0x74e7d
    int32_t v9 = __asm_movss_1646(v6); // 0x74e81
    int128_t v10 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x74e86
    int128_t v11 = __asm_subss_1651(v7, v9); // 0x74e8b
    int32_t v12 = __asm_movss_1646(v8); // 0x74e90
    int32_t v13 = __asm_movss_1646(v10); // 0x74e95
    int128_t v14 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x74e9a
    int128_t v15 = __asm_movsd_1649(0x3eb0c6f7a0000000); // 0x74e9f
    int32_t v16 = __asm_movss_1646(v14); // 0x74ea7
    int128_t v17 = __asm_unpcklps(v11, v11); // 0x74eac
    int128_t v18 = __asm_cvtps2pd(v17); // 0x74eaf
    int128_t v19 = g127; // 0x74eb2
    __asm_ucomisd(v15, __asm_andpd(v18, v19));
    int128_t v20 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x74ebe
    int128_t v21 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x74ec3
    int128_t v22 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x74ec8
    int32_t v23 = __asm_movss_1646(v20); // 0x74ecd
    int128_t v24 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x74ed2
    int32_t v25 = __asm_movss_1646(v21); // 0x74ed7
    g8 = a7;
    int128_t v26 = __asm_subss(v22, v20); // xmm3
    g10 = a8;
    int128_t v27 = __asm_subss(v24, v21); // xmm5
    if (v4 || v5) {
        goto lab_0x74f20;
    } else {
        int128_t v28 = v26; // 0x74eec
        int128_t v29 = __asm_unpcklps(v28, v28); // 0x74eec
        v26 = v29;
        int128_t v30 = __asm_cvtps2pd(v29); // 0x74eef
        __asm_ucomisd(v15, __asm_andpd(v30, v19));
        if (v4 || v5) {
            goto lab_0x74f20;
        } else {
            int128_t v31 = v27; // 0x74f00
            int128_t v32 = __asm_unpcklps(v31, v31); // 0x74f00
            v27 = v32;
            v4 = false;
            v5 = true;
            g4 = 0;
            int128_t v33 = __asm_cvtps2pd(v32); // 0x74f05
            __asm_ucomisd(v15, __asm_andpd(v33, v19));
            goto lab_0x74f20;
        }
    }
  lab_0x74f20:;
    int128_t v34 = __asm_movss(*(int32_t *)g6); // 0x74f20
    int128_t v35 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x74f24
    int128_t v36 = __asm_subss_1651(v34, v12); // 0x74f29
    int128_t v37 = __asm_movsd_1649(0x3eb0c6f7a0000000); // 0x74f2e
    int128_t v38 = __asm_subss_1651(v35, v16); // 0x74f36
    int128_t v39 = __asm_unpcklps(v36, v36); // 0x74f3b
    int128_t v40 = __asm_cvtps2pd(v39); // 0x74f3e
    __asm_ucomisd(v37, __asm_andpd(v40, v19));
    int128_t v41 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x74f4d
    int32_t v42 = __asm_movss_1646(v38); // 0x74f52
    int128_t v43 = __asm_subss_1651(v41, v13); // 0x74f57
    int128_t v44 = v43; // xmm6
    if (v4 || v5) {
        goto lab_0x74f90;
    } else {
        int128_t v45 = __asm_unpcklps(v43, v43); // 0x74f5e
        v44 = v45;
        int128_t v46 = __asm_cvtps2pd(v45); // 0x74f61
        __asm_ucomisd(v37, __asm_andpd(v46, v19));
        if (v4 || v5) {
            goto lab_0x74f90;
        } else {
            // 0x74f72
            g4 = 0;
            int128_t v47 = __asm_cvtps2pd(__asm_movss(v42)); // 0x74f79
            __asm_ucomisd(v37, __asm_andpd(v47, v19));
            goto lab_0x74f90;
        }
    }
  lab_0x74f90:;
    int128_t v48 = __asm_movaps(v17); // 0x74f90
    int128_t v49 = __asm_movaps(v26); // 0x74f93
    int128_t v50 = __asm_movaps(v44); // 0x74f96
    int128_t v51 = __asm_mulss(v49, v44); // 0x74f99
    g4 = 0;
    int128_t v52 = __asm_mulss(v48, v39); // 0x74f9f
    int128_t v53 = __asm_mulss(v50, v44); // 0x74fa3
    int128_t v54 = __asm_addss_1661(v52, v51); // 0x74fa7
    int128_t v55 = __asm_movss(v42); // 0x74fab
    int128_t v56 = __asm_addss_1661(v54, __asm_mulss(v55, v27)); // 0x74fb4
    int128_t v57 = __asm_movaps(v17); // 0x74fb8
    int32_t v58 = __asm_movss_1646(__asm_mulss(v57, v17)); // 0x74fbf
    int128_t v59 = __asm_mulss(__asm_movaps(v26), v26); // 0x74fc7
    int32_t v60 = __asm_movss_1646(__asm_addss(v59, v58)); // 0x74fd0
    int128_t v61 = __asm_mulss(__asm_movaps(v27), v27); // 0x74fd8
    int32_t v62 = __asm_movss_1646(__asm_addss(v61, v60)); // 0x74fe1
    int128_t v63 = __asm_movaps(v39); // 0x74fe6
    int128_t v64 = __asm_addss_1661(__asm_mulss(v63, v39), v53); // 0x74fed
    int128_t v65 = __asm_movss(v42); // 0x74ff1
    int128_t v66 = __asm_addss_1661(v64, __asm_mulss(v65, v65)); // 0x74ffa
    int128_t v67 = __asm_mulss(__asm_movaps(v56), v56); // 0x75001
    int128_t v68 = __asm_subss(__asm_mulss_1654(v66, v62), v67); // 0x7500a
    int128_t v69 = __asm_unpcklps(v68, v68); // 0x7500e
    int128_t v70 = __asm_cvtps2pd(v69); // 0x75011
    int32_t v71 = __asm_movsd(__asm_andpd(v70, v19)); // 0x7501c
    __asm_ucomisd_1652(__asm_movsd_1649(0x3eb0c6f7a0000000), (int64_t)v71);
    int128_t v72 = __asm_movss(v12); // 0x75034
    int32_t v73 = __asm_movss_1646(__asm_subss_1651(v72, v9)); // 0x7503e
    int128_t v74 = __asm_movss(v13); // 0x75043
    int32_t v75 = __asm_movss_1646(__asm_subss_1651(v74, v23)); // 0x7504d
    int128_t v76 = __asm_movss(v16); // 0x75052
    int32_t v77 = __asm_movss_1646(__asm_subss_1651(v76, v25)); // 0x7505c
    int128_t v78 = __asm_movss(v73); // 0x75061
    int32_t v79 = __asm_movss_1646(__asm_mulss(v78, v17)); // 0x7506a
    int128_t v80 = __asm_mulss(__asm_movss(v75), v26); // 0x75074
    int32_t v81 = __asm_movss_1646(__asm_addss(v80, v79)); // 0x7507d
    int128_t v82 = __asm_movss(v77); // 0x75082
    int128_t v83 = __asm_addss(__asm_mulss(v82, v27), v81); // 0x7508b
    int32_t v84 = __asm_movss_1646(v83); // 0x75090
    int32_t v85 = __asm_movss_1646(__asm_mulss(v83, v56)); // 0x75099
    int128_t v86 = __asm_movss(v73); // 0x7509e
    int32_t v87 = __asm_movss_1646(__asm_mulss(v86, v39)); // 0x750a7
    int128_t v88 = __asm_mulss(__asm_movss(v75), v44); // 0x750b1
    int32_t v89 = __asm_movss_1646(__asm_addss(v88, v87)); // 0x750ba
    int128_t v90 = __asm_movss(v77); // 0x750bf
    int128_t v91 = __asm_addss(__asm_mulss_1654(v90, v42), v89); // 0x750c9
    int32_t v92 = __asm_movss_1646(__asm_mulss_1654(v91, v62)); // 0x750d3
    int128_t v93 = __asm_movss(v85); // 0x750d8
    int128_t v94 = __asm_divss(__asm_subss_1651(v93, v92), v69); // 0x750e2
    int128_t v95 = __asm_mulss(v56, v94); // 0x750e6
    *(int32_t *)g8 = __asm_movss_1646(v94);
    int128_t v96 = __asm_addss(v95, v84); // 0x750ee
    *(int32_t *)g10 = __asm_movss_1646(__asm_divss_1666(v96, v62));
    g4 = a6;
    if (a6 == 0) {
        goto lab_0x75178;
    } else {
        // 0x75103
        g6 = a5;
        if (a5 == 0) {
            goto lab_0x75178;
        } else {
            int128_t v97 = __asm_mulss_1654(v39, *(int32_t *)g8); // 0x7510a
            g4 = a5;
            int128_t v98 = __asm_movss(v42); // 0x75111
            *(int32_t *)g4 = __asm_movss_1646(__asm_addss(v97, *(int32_t *)g7));
            int128_t v99 = __asm_mulss_1654(v44, *(int32_t *)g8); // 0x7511e
            int128_t v100 = __asm_addss(v99, *(int32_t *)(g7 + 4)); // 0x75122
            *(int32_t *)(g4 + 4) = __asm_movss_1646(v100);
            int128_t v101 = __asm_mulss_1654(v98, *(int32_t *)g8); // 0x7512c
            *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v101, *(int32_t *)(g7 + 8)));
            g4 = a6;
            int128_t v102 = __asm_mulss_1654(v17, *(int32_t *)g10); // 0x7513d
            *(int32_t *)g4 = __asm_movss_1646(__asm_addss(v102, *(int32_t *)g9));
            int128_t v103 = __asm_mulss_1654(v26, *(int32_t *)g10); // 0x75149
            int128_t v104 = __asm_addss(v103, *(int32_t *)(g9 + 4)); // 0x7514d
            *(int32_t *)(g4 + 4) = __asm_movss_1646(v104);
            int128_t v105 = __asm_mulss_1654(v27, *(int32_t *)g10); // 0x75157
            int128_t v106 = __asm_addss(v105, *(int32_t *)(g9 + 8)); // 0x7515b
            *(int32_t *)(g4 + 8) = __asm_movss_1646(v106);
            g4 = 1;
            goto lab_0x7516a;
        }
    }
  lab_0x7516a:
    // 0x7516a
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x75178:
    // 0x75178
    g4 = 1;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 1;
}

// Address range: 0x75190 - 0x751c4
int32_t function_75190(int32_t a1, int32_t a2, int32_t a3, int32_t result, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    // 0x75190
    g4 = result;
    int32_t v1 = g6; // 0x75199
    int32_t v2 = g10; // 0x751a3
    int32_t v3 = g8; // 0x751a6
    g6 = a1;
    g10 = a2;
    g8 = a3;
    if (g739 == 0) {
        // 0x751c8
        return result;
    }
    // 0x751b7
    g6 = v1;
    g10 = v2;
    g8 = v3;
    return result;
}

// Address range: 0x751e4 - 0x75220
int32_t function_751e4(void) {
    // 0x751e4
    g10++;
    uint32_t v1 = g4 + (int32_t)&g739; // 0x751e6
    int32_t v2 = g5 + v1; // 0x751eb
    unsigned char v3 = (char)v2; // 0x751eb
    g4 = v2;
    bool v4 = v2 < v1 | v3 > 153; // 0x751ed
    int32_t v5;
    if (g5 % 16 + v1 % 16 > 15 || (v3 & 14) > 9) {
        // bb
        v5 = ((v4 ? 154 : 250) + v2) % 256 | v2 & -256;
    } else {
        // bb232
        v5 = (v4 ? v2 + 160 : v2) % 256 | v2 & -256;
    }
    // bb233
    g4 = v5;
    int32_t v6 = g6 & (256 * (int32_t)&g862 | -0xff01); // 0x751ee
    g6 = v6;
    int32_t * v7 = (int32_t *)(v6 + 0x7c89e445); // 0x751f0
    *v7 = *v7 - 1;
    int32_t v8 = g4 & -248; // 0x751f6
    g4 = v8;
    g4 = function_782e0(g6, g10, v8, (int32_t)&g870);
    *(int32_t *)(g5 + 8) = 0x31415926;
    g6 = *(int32_t *)(g5 - 12);
    g10 = *(int32_t *)(g5 - 8);
    g8 = *(int32_t *)(g5 - 4);
    int32_t result = function_77d50((int32_t)&g870); // 0x7521b
    g4 = result;
    return result;
}

// Address range: 0x75220 - 0x7522a
int32_t function_75220(void) {
    // 0x75220
    g4 = 1;
    return 1;
}

// Address range: 0x75230 - 0x7523a
int32_t function_75230(void) {
    // 0x75230
    g4 = 1;
    return 1;
}

// Address range: 0x75240 - 0x7524a
int32_t function_75240(void) {
    // 0x75240
    g4 = 1;
    return 1;
}

// Address range: 0x75250 - 0x75325
float80_t function_75250(int32_t a1, int32_t a2, int32_t a3) {
    int128_t v1; // xmm4
    int128_t v2 = __asm_xorps(v1, v1); // 0x75251
    int128_t v3 = __asm_movss(0x43360b61); // 0x75259
    int128_t v4 = __asm_movss(a1); // 0x75261
    int128_t v5 = __asm_movss(a3); // xmm1
    int128_t v6 = __asm_mulss(v4, v3); // 0x7526b
    int128_t v7 = __asm_mulss_1654(v3, a2); // 0x7526f
    g4 = __asm_cvttss2si_1647(v6);
    int128_t v8 = __asm_movss(0x3bb40000); // 0x75278
    int32_t v9 = g4 & (int32_t)&g863; // 0x75280
    g4 = v9;
    int128_t v10 = __asm_cvtsi2ss(v9); // 0x75285
    g4 = __asm_cvttss2si_1647(v7);
    int128_t v11 = __asm_mulss(v10, v8); // 0x7528d
    int32_t v12 = g4 & (int32_t)&g863; // 0x75291
    bool v13 = false; // cf
    bool v14 = v12 == 0; // zf
    g4 = v12;
    __asm_ucomiss_1648(v2, v5);
    int128_t v15 = __asm_mulss(__asm_cvtsi2ss(v12), v8); // 0x7529d
    int128_t v16 = __asm_subss(__asm_movaps(v11), v15); // xmm0
    if (!v13 && !v14) {
        // 0x752aa
        v5 = __asm_xorps(v5, __asm_movss((int32_t)g233));
    }
    int128_t v17 = v16; // 0x752bd
    __asm_ucomiss_1648(__asm_movss(-0x3ccc0000), v17);
    int128_t v18; // 0x752ca
    if (v13 || v14) {
        // 0x752f0
        __asm_ucomiss(v17, 0x43340000);
        int128_t v19 = v16;
        if (v13 || v14) {
            v18 = v19;
            goto lab_0x752ca;
        } else {
            int128_t v20 = __asm_subss_1651(v19, 0x43b40000); // 0x752f9
            v16 = v20;
            __asm_ucomiss_1648(v20, v5);
            if (v13 || v14) {
                goto lab_0x752cf;
            } else {
                goto lab_0x75306;
            }
        }
    } else {
        int128_t v21 = __asm_addss(v17, 0x43b40000); // 0x752c2
        v16 = v21;
        v18 = v21;
        goto lab_0x752ca;
    }
  lab_0x752ca:
    // 0x752ca
    __asm_ucomiss_1648(v18, v5);
    if (v13 || v14) {
        goto lab_0x752cf;
    } else {
        goto lab_0x75306;
    }
  lab_0x752cf:;
    int128_t v22 = __asm_movss((int32_t)g233); // 0x752cf
    __asm_ucomiss_1648(__asm_xorps(v22, v5), v16);
    if (v13 || v14) {
        int128_t v23 = __asm_movaps(v11); // 0x75318
        return __asm_movss_1646(v23);
    }
    int128_t v24 = __asm_subss(v15, v5); // 0x752df
    return __asm_movss_1646(v24);
  lab_0x75306:;
    int128_t v25 = __asm_addss_1661(v15, v5); // 0x75306
    return __asm_movss_1646(v25);
}

// Address range: 0x75330 - 0x753af
float80_t function_75330(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movss(a1); // 0x75336
    int128_t v2 = __asm_movss(a2); // 0x7533b
    int128_t v3 = __asm_movaps(v1); // 0x75340
    __asm_movss_1646(__asm_subss(v3, v2));
    g4 = __asm_fprem();
    uint32_t v4 = (int32_t)__asm_fnstsw(g12); // 0x75357
    g4 = g4 & -0x10000 | v4;
    uint32_t v5 = v4 / 256; // 0x75359
    char v6 = v5; // 0x75359
    g2 = v5 % 2 != 0;
    g882 = (v6 & 64) != 0;
    while ((v6 & 4) != 0) {
        // 0x75355
        g4 = __asm_fprem();
        v4 = (int32_t)__asm_fnstsw(g12);
        g4 = g4 & -0x10000 | v4;
        v5 = v4 / 256;
        v6 = v5;
        g2 = v5 % 2 != 0;
        g882 = (v6 & 64) != 0;
    }
    // 0x7535c
    __asm_ucomiss_1648(v1, v2);
    int3_t v7 = g13; // fpu_stat_TOP
    int128_t v8 = __asm_movss((int32_t)(float32_t)360.0L); // 0x75364
    int128_t v9 = v8; // xmm0
    if (g2 || g882) {
        // 0x75390
        __asm_ucomiss_1648(__asm_movss(-0x3ccc0000), v9);
        if (!g2) {
            int128_t v10 = __asm_addss(v9, 0x43b40000); // 0x7539d
            float80_t result = __asm_movss_1646(v10); // 0x753aa
            g13 = v7 - 1;
            return result;
        }
    } else {
        // 0x7536b
        __asm_ucomiss(v8, 0x43340000);
        if (!g2) {
            // 0x75374
            v9 = __asm_subss_1651(v9, 0x43b40000);
        }
    }
    float80_t result2 = __asm_movss_1646(v9); // 0x75381
    g13 = v7 - 1;
    return result2;
}

// Address range: 0x753b0 - 0x75402
float80_t function_753b0(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    bool v2 = &v1 < (int32_t *)4; // cf
    bool v3 = &v1 == (int32_t *)4; // zf
    int128_t v4 = __asm_movss(a1); // 0x753b6
    int128_t v5 = __asm_movss(-0x3ccc0000); // 0x753bb
    int128_t v6 = __asm_subss_1651(v4, a2); // 0x753c3
    __asm_ucomiss_1648(v5, v6);
    if (!v2 && !v3) {
        int128_t v7 = __asm_addss(v6, 0x43b40000); // 0x753f0
        return __asm_movss_1646(v7);
    }
    // 0x753cd
    __asm_ucomiss(v6, 0x43340000);
    int128_t v8; // 0x753de
    if (!v2 && !v3) {
        // 0x753d6
        v8 = __asm_subss_1651(v6, 0x43b40000);
    } else {
        v8 = v6;
    }
    // 0x753de
    return __asm_movss_1646(v8);
}

// Address range: 0x75410 - 0x7546a
float80_t function_75410(float32_t a1) {
    g4 = __asm_fprem();
    int32_t v1; // fpsw
    uint32_t v2 = (int32_t)__asm_fnstsw(v1); // 0x75421
    g4 = g4 & -0x10000 | v2;
    uint32_t v3 = v2 / 256; // 0x75423
    char v4 = v3; // 0x75423
    bool v5 = v3 % 2 != 0; // cf
    bool v6 = (v4 & 64) != 0; // zf
    while ((v4 & 4) != 0) {
        // 0x7541f
        g4 = __asm_fprem();
        v2 = (int32_t)__asm_fnstsw(v1);
        g4 = g4 & -0x10000 | v2;
        v3 = v2 / 256;
        v4 = v3;
        v5 = v3 % 2 != 0;
        v6 = (v4 & 64) != 0;
    }
    int128_t v7 = __asm_movss((int32_t)(float32_t)360.0L); // 0x7542b
    int128_t v8 = v7; // xmm0
    __asm_ucomiss(v7, 0x43340000);
    if (!v5 && !v6) {
        // 0x75460
        v8 = __asm_subss_1651(v8, 0x43b40000);
    }
    __asm_ucomiss_1648(__asm_movss(-0x3ccc0000), v8);
    int128_t v9; // 0x7544e
    if (!v5 && !v6) {
        // 0x75446
        v9 = __asm_addss(v8, 0x43b40000);
    } else {
        v9 = v8;
    }
    // 0x7544e
    return __asm_movss_1646(v9);
}

// Address range: 0x75470 - 0x754aa
float80_t function_75470(float32_t a1) {
    g4 = __asm_fprem();
    int32_t v1; // fpsw
    uint32_t v2 = (int32_t)__asm_fnstsw(v1); // 0x75481
    g4 = g4 & -0x10000 | v2;
    uint32_t v3 = v2 / 256; // 0x75483
    char v4 = v3; // 0x75483
    while ((v4 & 4) != 0) {
        // 0x7547f
        g4 = __asm_fprem();
        v2 = (int32_t)__asm_fnstsw(v1);
        g4 = g4 & -0x10000 | v2;
        v3 = v2 / 256;
        v4 = v3;
    }
    int128_t v5; // xmm1
    int128_t v6 = __asm_xorps(v5, v5); // 0x7548b
    int128_t v7 = __asm_movss((int32_t)(float32_t)360.0L); // 0x7548e
    __asm_ucomiss_1648(v6, v7);
    int128_t v8; // 0x754a0
    if (v3 % 2 == 0 && (v4 & 64) == 0) {
        // 0x75498
        v8 = __asm_addss(v7, 0x43b40000);
    } else {
        v8 = v7;
    }
    // 0x754a0
    return __asm_movss_1646(v8);
}

// Address range: 0x754b0 - 0x754f3
int32_t function_754b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    float80_t v2 = function_75330(a1, a2); // 0x754c3
    g4 = (float32_t)v2;
    int128_t v3 = __asm_movsd_1649(*(int64_t *)&g127); // 0x754c8
    int128_t v4 = __asm_cvtps2pd(__asm_movss(a3)); // 0x754d8
    int128_t v5 = __asm_movss((int32_t)(float32_t)v2); // 0x754db
    int128_t v6 = __asm_cvtps2pd(__asm_unpcklps(v5, v5)); // 0x754e4
    __asm_ucomisd(v4, __asm_andpd(v6, v3));
    int32_t result = (int32_t)!((g2 | g882)) | g4 & -256; // 0x754ef
    g4 = result;
    return result;
}

// Address range: 0x75500 - 0x7558a
int32_t function_75500(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g6; // 0x75509
    int32_t v3; // bp-92
    int32_t v4 = &v3; // 0x7550c
    g6 = v4;
    int32_t v5 = g10; // 0x7550f
    int32_t v6; // bp-76
    int32_t v7 = &v6; // 0x75512
    g10 = v7;
    int32_t v8 = g8; // 0x75515
    int32_t v9; // bp-60
    int32_t v10 = &v9; // 0x75518
    g8 = v10;
    function_71dc0((int32_t *)a1, v4);
    g4 = a2;
    g4 = function_71dc0((int32_t *)a2, v7);
    int32_t v11; // bp-44
    int32_t v12 = &v11; // 0x75539
    g6 = v12;
    g4 = function_70f70(&v3, -0x40800000, &v9);
    g4 = function_71180(&v6, v10, v12);
    function_70c10(v12);
    g4 = a3;
    int32_t result = function_71b70(&v11, a3, a4); // 0x75578
    g4 = result;
    g6 = v2;
    g10 = v5;
    g8 = v8;
    return result;
}

// Address range: 0x75590 - 0x75631
int32_t function_75590(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1; // ebp
    g5 = &v1;
    g4 = a1;
    int32_t v2 = g10; // 0x7559c
    int32_t v3; // bp-232
    int32_t v4 = &v3; // 0x7559f
    g10 = v4;
    int32_t v5 = g6; // 0x755a5
    g6 = a3;
    int32_t v6 = g8; // 0x755ab
    int32_t v7; // bp-136
    int32_t v8 = &v7; // 0x755ae
    g8 = v8;
    function_6f8e0(a1, v4);
    g4 = a2;
    function_6f8e0(a2, v8);
    int32_t v9; // bp-184
    int32_t v10 = &v9; // 0x755cf
    g4 = v10;
    int32_t v11; // bp-88
    int32_t v12 = &v11; // 0x755dc
    g10 = v12;
    function_6dfb0(v4, &v9);
    g4 = v10;
    function_6e940(v8, v10, v12);
    int32_t v13; // bp-40
    int32_t v14 = &v13; // 0x75600
    g4 = v14;
    int32_t v15 = function_6d8d0(v12, v14); // 0x7560a
    g4 = v15;
    int32_t result; // 0x75630
    if (a3 != 0) {
        // 0x75613
        *(int32_t *)a3 = v13;
        result = g4;
    } else {
        result = v15;
    }
    // 0x75624
    g6 = v5;
    g10 = v2;
    g8 = v6;
    return result;
}

// Address range: 0x75631 - 0x7583c
int32_t function_75631(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g6; // bp-8
    bool v2 = &v1 < (int32_t *)24; // cf
    g9 = a3;
    g6 = a2;
    g7 = a1;
    g4 = a4;
    int128_t v3 = __asm_movss(*(int32_t *)(a3 + 4)); // 0x75653
    int128_t v4 = __asm_movss(*(int32_t *)g6); // 0x75658
    int32_t v5 = __asm_movss_1646(v3); // 0x7565c
    int128_t v6 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x75661
    int128_t v7 = __asm_movss(*(int32_t *)g9); // 0x75666
    int128_t v8 = __asm_movss(v5); // 0x7566a
    int128_t v9 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x7566f
    int32_t v10 = __asm_movss_1646(v7); // 0x75674
    int128_t v11 = __asm_subss(v7, v4); // 0x75679
    int128_t v12 = __asm_subss(v8, v6); // 0x7567d
    int128_t v13 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x75681
    int32_t v14 = __asm_movss_1646(v9); // 0x75686
    int128_t v15 = __asm_movss(*(int32_t *)g7); // 0x7568b
    int128_t v16 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x7568f
    int128_t v17 = __asm_mulss(v11, v15); // 0x75694
    int128_t v18 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x75698
    int128_t v19 = __asm_addss_1661(v17, __asm_mulss(v12, v13)); // 0x756a1
    int128_t v20 = __asm_subss(__asm_movss(v14), v16); // 0x756aa
    int128_t v21 = __asm_addss_1661(v19, __asm_mulss(v20, v18)); // 0x756b2
    int128_t v22 = __asm_movss(*(int32_t *)g4); // 0x756b6
    int32_t v23 = __asm_movss_1646(v22); // bp-32
    int128_t v24 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x756bf
    int128_t v25 = __asm_addss(v21, a5); // 0x756c4
    int32_t v26 = __asm_movss_1646(v24); // 0x756c9
    int32_t v27 = __asm_movss_1646(__asm_movss(*(int32_t *)(g4 + 8))); // 0x756d3
    int128_t v28 = __asm_movss(v23); // 0x756d8
    int128_t v29 = __asm_movaps(__asm_subss(v28, v4)); // 0x756e1
    int128_t v30 = __asm_movss(v27); // 0x756e4
    int128_t v31 = __asm_mulss(v29, v15); // 0x756e9
    int128_t v32 = __asm_movss(v26); // 0x756ed
    int128_t v33 = __asm_subss(v30, v16); // 0x756f2
    int128_t v34 = __asm_subss(v32, v6); // 0x756f6
    int128_t v35 = __asm_mulss(__asm_movaps(v33), v18); // 0x756fd
    int128_t v36 = __asm_movaps(v34); // 0x75701
    int128_t v37 = __asm_xorps(v18, v18); // 0x75704
    int128_t v38 = __asm_mulss(v36, v13); // 0x75707
    __asm_ucomiss_1648(v25, v37);
    int128_t v39 = __asm_addss_1661(v31, v38); // 0x7570e
    int128_t v40 = __asm_addss(__asm_addss_1661(v39, v35), a5); // 0x75716
    __asm_ucomiss_1648(v40, v37);
    if (v2) {
        if (v2) {
            // 0x75795
            *(int32_t *)g9 = g726;
            *(int32_t *)(g9 + 4) = g727;
            g7 = g728;
            *(int32_t *)(g9 + 8) = g728;
            *(int32_t *)g4 = g726;
            *(int32_t *)(g4 + 4) = g727;
            g9 = g728;
            *(int32_t *)(g4 + 8) = g728;
            g6 = v1;
            return g4;
        }
        int128_t v41 = __asm_subss(__asm_movaps(v40), v25); // 0x757d3
        int128_t v42 = __asm_divss(__asm_movss(0x3f800000), v41); // 0x757df
        int128_t v43 = __asm_subss_1651(__asm_movss(v10), v23); // 0x757e8
        int128_t v44 = __asm_mulss(__asm_mulss(v43, v40), v42); // 0x757f1
        *(int32_t *)g9 = __asm_movss_1646(__asm_addss(v44, v23));
        int128_t v45 = __asm_subss_1651(__asm_movss(v5), v26); // 0x75803
        int128_t v46 = __asm_mulss(__asm_mulss(v45, v40), v42); // 0x7580c
        *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_addss(v46, v26));
        int128_t v47 = __asm_subss_1651(__asm_movss(v14), v27); // 0x7581f
        int128_t v48 = __asm_mulss(__asm_mulss(v47, v40), v42); // 0x75828
        *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_addss(v48, v27));
        g6 = v1;
        return g4;
    }
    if (v2) {
        int128_t v49 = __asm_movaps(v25); // 0x75722
        int128_t v50 = __asm_movss(v23); // 0x75725
        int128_t v51 = __asm_subss(v49, v40); // 0x7572a
        int128_t v52 = __asm_movss(0x3f800000); // 0x7572e
        int128_t v53 = __asm_subss_1651(v50, v10); // 0x75736
        int128_t v54 = __asm_divss(v52, v51); // 0x7573b
        int128_t v55 = __asm_movss(v26); // 0x7573f
        int128_t v56 = __asm_mulss(v53, v25); // 0x75744
        int128_t v57 = __asm_subss_1651(v55, v5); // 0x75748
        int128_t v58 = __asm_mulss(__asm_mulss(v57, v25), v54); // 0x75751
        int128_t v59 = __asm_mulss(v56, v54); // 0x75755
        int128_t v60 = __asm_addss(v58, v5); // 0x75759
        int128_t v61 = __asm_addss(v59, v10); // 0x7575e
        *(int32_t *)(g4 + 4) = __asm_movss_1646(v60);
        int128_t v62 = __asm_movss(v27); // 0x75768
        *(int32_t *)g4 = __asm_movss_1646(v61);
        int128_t v63 = __asm_subss_1651(v62, v14); // 0x75771
        int128_t v64 = __asm_mulss(__asm_mulss(v63, v25), v54); // 0x7577a
        *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v64, v14));
    }
    // 0x75788
    g6 = v1;
    return g4;
}

// Address range: 0x75840 - 0x7590a
int32_t function_75840(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g10; // 0x75843
    int32_t v2 = g6; // 0x75844
    g10 = a1;
    g4 = a3;
    g9 = a2;
    g6 = a4;
    int128_t v3 = __asm_movss(*(int32_t *)a1); // 0x75854
    int128_t v4 = __asm_movss(*(int32_t *)g4); // 0x75858
    int128_t v5 = __asm_movss(*(int32_t *)g9); // 0x7585c
    int128_t v6 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x75860
    int128_t v7 = __asm_subss(v4, v3); // 0x75865
    int128_t v8 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x75869
    int128_t v9 = __asm_subss(v5, v3); // 0x7586e
    int128_t v10 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x75872
    int128_t v11 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x75877
    int128_t v12 = __asm_subss(v8, v6); // 0x7587c
    int128_t v13 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x75880
    int128_t v14 = __asm_subss(v10, v6); // 0x75885
    int128_t v15 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x75889
    int128_t v16 = __asm_subss(v13, v11); // 0x7588e
    int128_t v17 = __asm_subss(v15, v11); // 0x75892
    int128_t v18 = __asm_movaps(v12); // 0x75896
    int128_t v19 = __asm_mulss(__asm_movaps(v16), v14); // 0x7589c
    int128_t v20 = __asm_mulss(v18, v17); // 0x758a0
    int128_t v21 = __asm_mulss(v16, v7); // 0x758a4
    int128_t v22 = __asm_mulss(v17, v9); // 0x758a8
    int128_t v23 = __asm_mulss(v7, v12); // 0x758ac
    int128_t v24 = __asm_mulss(v14, v9); // 0x758b0
    int128_t v25 = __asm_subss(v20, v19); // 0x758b4
    int128_t v26 = __asm_subss(v21, v22); // 0x758b8
    *(int32_t *)g6 = __asm_movss_1646(v25);
    int128_t v27 = __asm_subss(v24, v23); // 0x758c0
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v26);
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v27);
    g4 = (float32_t)function_6d750(g6);
    int128_t v28 = __asm_movss(*(int32_t *)g6); // 0x758d8
    int128_t v29 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x758dc
    int128_t v30 = __asm_mulss_1654(v28, *(int32_t *)g10); // 0x758e1
    g4 = a5;
    int128_t v31 = __asm_addss_1661(v30, __asm_mulss_1654(v29, *(int32_t *)(g10 + 4))); // 0x758ed
    int128_t v32 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x758f1
    int128_t v33 = __asm_mulss_1654(v32, *(int32_t *)(g10 + 8)); // 0x758f6
    *(int32_t *)g4 = __asm_movss_1646(__asm_addss_1661(v31, v33));
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x75910 - 0x759fc
int32_t function_75910(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // bp-8
    g6 = a1;
    g7 = a3;
    g9 = a4;
    g4 = a2;
    int128_t v2 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x75923
    int128_t v3 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x75928
    int32_t v4 = __asm_movss_1646(v2); // 0x7592d
    int128_t v5 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x75932
    int128_t v6 = __asm_movss(*(int32_t *)g6); // 0x75937
    int32_t v7 = __asm_movss_1646(v5); // 0x7593b
    int128_t v8 = __asm_subss(v3, v5); // 0x75940
    int128_t v9 = __asm_movss(*(int32_t *)g9); // 0x75944
    int128_t v10 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x75948
    int128_t v11 = __asm_subss(v9, v6); // 0x7594d
    int128_t v12 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x75951
    int128_t v13 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x75956
    int128_t v14 = __asm_movaps(v8); // 0x7595b
    int128_t v15 = __asm_subss_1651(v10, v4); // 0x7595e
    int32_t v16 = __asm_movss_1646(v11); // 0x75963
    int128_t v17 = __asm_subss_1651(v12, v4); // 0x75968
    int128_t v18 = __asm_subss_1651(v13, v7); // 0x7596d
    int128_t v19 = __asm_movss(*(int32_t *)g7); // 0x75972
    int128_t v20 = __asm_movss(*(int32_t *)g4); // 0x75976
    int128_t v21 = __asm_mulss(v14, v17); // 0x7597a
    int128_t v22 = __asm_subss(v19, v6); // 0x7597e
    int128_t v23 = __asm_mulss_1654(v8, v16); // 0x75982
    int128_t v24 = __asm_subss(v20, v6); // 0x75987
    int128_t v25 = __asm_mulss(__asm_movaps(v15), v18); // 0x7598e
    int128_t v26 = __asm_mulss(v18, v22); // 0x75992
    int128_t v27 = __asm_mulss_1654(v15, v16); // 0x75996
    int128_t v28 = __asm_mulss(v17, v22); // 0x7599b
    int128_t v29 = __asm_subss(v25, v21); // 0x7599f
    int128_t v30 = __asm_subss(v23, v26); // 0x759a3
    int128_t v31 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x759a7
    int128_t v32 = __asm_mulss(v24, v29); // 0x759ac
    int128_t v33 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x759b0
    int128_t v34 = __asm_subss(v28, v27); // 0x759b5
    int128_t v35 = __asm_subss_1651(v31, v7); // 0x759b9
    int128_t v36 = __asm_xorps(v27, v27); // 0x759be
    int128_t v37 = __asm_subss_1651(v33, v4); // 0x759c1
    int128_t v38 = __asm_mulss(v35, v34); // 0x759c6
    int128_t v39 = __asm_addss_1661(v32, __asm_mulss(v37, v30)); // 0x759ce
    int128_t v40 = __asm_mulss_1654(__asm_addss_1661(v39, v38), 0x3e2aaaab); // 0x759d6
    __asm_ucomiss_1648(v36, v40);
    int128_t v41; // 0x759ee
    if (&v1 < (int32_t *)16 || &v1 == (int32_t *)16) {
        // 0x75910
        v41 = v40;
    } else {
        // 0x759e3
        v41 = __asm_xorps(v40, __asm_movss((int32_t)g233));
    }
    // 0x759ee
    __asm_movss_1646(v41);
    g6 = v1;
    return g4;
}

// Address range: 0x75a00 - 0x75aaf
float80_t function_75a00(int32_t a1, int32_t a2, int32_t a3) {
    g7 = a1;
    g9 = a2;
    g4 = a3;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x75a0f
    int128_t v2 = __asm_movss(*(int32_t *)g9); // 0x75a13
    int128_t v3 = __asm_movss(*(int32_t *)g4); // 0x75a17
    int128_t v4 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x75a1b
    int128_t v5 = __asm_subss(v2, v1); // 0x75a20
    int128_t v6 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x75a24
    int128_t v7 = __asm_subss(v3, v1); // 0x75a29
    int128_t v8 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x75a2d
    int128_t v9 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x75a32
    int128_t v10 = __asm_subss(v6, v4); // 0x75a37
    int128_t v11 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x75a3b
    int128_t v12 = __asm_subss(v8, v4); // 0x75a40
    int128_t v13 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x75a44
    int128_t v14 = __asm_subss(v11, v9); // 0x75a49
    int128_t v15 = __asm_subss(v13, v9); // 0x75a4d
    int128_t v16 = __asm_movaps(v10); // 0x75a51
    int128_t v17 = __asm_movaps(v14); // 0x75a54
    int128_t v18 = __asm_mulss(v16, v15); // 0x75a57
    int128_t v19 = __asm_mulss(v17, v12); // 0x75a5b
    int128_t v20 = __asm_mulss(v14, v7); // 0x75a5f
    int128_t v21 = __asm_mulss(v15, v5); // 0x75a63
    int128_t v22 = __asm_mulss(v12, v5); // 0x75a67
    int128_t v23 = __asm_mulss(v7, v10); // 0x75a6b
    int128_t v24 = __asm_subss(v18, v19); // 0x75a6f
    int128_t v25 = __asm_subss(v20, v21); // 0x75a73
    int128_t v26 = __asm_mulss(v24, v24); // 0x75a77
    int128_t v27 = __asm_subss(v22, v23); // 0x75a7b
    int128_t v28 = __asm_mulss(v25, v25); // 0x75a7f
    int128_t v29 = __asm_mulss(v27, v27); // 0x75a83
    int128_t v30 = __asm_addss_1661(__asm_addss_1661(v26, v28), v29); // 0x75a8b
    int128_t v31 = __asm_movss_1667(__asm_xorps(v29, v29), v30); // 0x75a92
    __asm_movaps(v31);
    int128_t v32 = __asm_mulss_1654(__asm_sqrtss(v31), 0x3f000000); // 0x75a9d
    return __asm_movss_1646(v32);
}

// Address range: 0x75ab0 - 0x75d26
int32_t function_75ab0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x75ab0
    g9 = -1;
    g4 = 0;
    int32_t v1 = g10; // 0x75aba
    int32_t v2 = g6; // bp-12
    bool v3 = &v2 < (int32_t *)44; // cf
    bool v4 = (int32_t)&v2 == 44; // zf
    g6 = a1;
    g10 = a2;
    int128_t v5 = __asm_movss(-0x39800000); // xmm1
    int128_t v6 = __asm_movsd_1649(*(int64_t *)&g127); // 0x75acd
    int32_t v7 = g4; // 0x75ad5
    int32_t v8; // 0x75af3
    while (true) {
        int128_t v9 = __asm_movss(*(int32_t *)(4 * v7 + g10)); // 0x75ad5
        int128_t v10 = __asm_andpd(__asm_cvtps2pd(v9), v6); // 0x75add
        int128_t v11 = __asm_cvtpd2ps(__asm_unpcklpd(v10, v10)); // 0x75ae5
        __asm_ucomiss_1648(v11, v5);
        int32_t v12; // 0x75af3
        if (v3 || v4) {
            // 0x75ad5
            v12 = g4;
        } else {
            // 0x75aee
            v5 = __asm_movaps(v11);
            int32_t v13 = g4; // 0x75af1
            g9 = v13;
            v12 = v13;
        }
        // 0x75af3
        v8 = v12 + 1;
        g4 = v8;
        int32_t v14 = v12 - 2; // 0x75af6
        v3 = v8 < 3;
        v4 = v14 == 0;
        if (v14 == 0) {
            // break -> 0x75afb
            break;
        }
        v7 = v8;
    }
    int32_t v15 = v8 & -256; // 0x75afb
    g4 = v15;
    int32_t v16 = g9; // 0x75afd
    int32_t result; // 0x75d0a
    if (v16 != -1) {
        int128_t v17 = __asm_movss(g736); // xmm2
        int128_t v18 = __asm_movss(g737); // 0x75b10
        v5 = __asm_movss(g738);
        if (v16 >= 0) {
            int32_t v19 = g9; // 0x75b22
            if (v19 > 1) {
                // 0x75d10
                if (v19 == 2) {
                    // 0x75d19
                    v17 = __asm_movss(0x3f800000);
                }
            } else {
                // 0x75b2b
                v5 = __asm_movss(0x3f800000);
            }
        }
        int128_t v20 = __asm_movss(*(int32_t *)g10); // 0x75b33
        int32_t v21; // bp-24
        g4 = &v21;
        int128_t v22 = __asm_movaps(v18); // 0x75b3a
        int128_t v23 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x75b3d
        int128_t v24 = __asm_movaps(v20); // 0x75b42
        int128_t v25 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x75b45
        int128_t v26 = __asm_mulss(v24, v17); // 0x75b4d
        int128_t v27 = __asm_addss_1661(v26, __asm_mulss(v22, v23)); // 0x75b55
        int128_t v28 = __asm_movaps(v25); // 0x75b59
        int128_t v29 = __asm_addss_1661(v27, __asm_mulss(v28, v5)); // 0x75b60
        int128_t v30 = __asm_xorps(v29, __asm_movss((int32_t)g233)); // 0x75b6c
        int128_t v31 = __asm_mulss(v20, v30); // 0x75b6f
        int128_t v32 = __asm_mulss(v23, v30); // 0x75b73
        int128_t v33 = __asm_mulss(v30, v25); // 0x75b77
        int128_t v34 = __asm_addss_1661(v31, v17); // 0x75b7b
        int128_t v35 = __asm_addss_1661(v32, v18); // 0x75b7f
        int128_t v36 = __asm_addss_1661(v33, v5); // 0x75b83
        v21 = __asm_movss_1646(v34);
        int32_t v37 = __asm_movss_1646(v35); // 0x75b8c
        int32_t v38 = __asm_movss_1646(v36); // 0x75b91
        g4 = (float32_t)function_6d750(v38);
        int128_t v39 = __asm_movss(*(int32_t *)g10); // 0x75b9d
        g4 = 4;
        int128_t v40 = __asm_movss(a3); // 0x75ba6
        int32_t v41 = __asm_movss_1646(v39); // 0x75bab
        int128_t v42 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x75bb0
        int128_t v43 = __asm_mulss(v40, v39); // 0x75bb5
        int128_t v44 = __asm_movss(a3); // 0x75bb9
        int128_t v45 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x75bbe
        int128_t v46 = __asm_mulss(v44, v42); // 0x75bc3
        int128_t v47 = __asm_movss(v38); // 0x75bc7
        int128_t v48 = __asm_movss(a4); // 0x75bcc
        int32_t v49 = __asm_movss_1646(v43); // 0x75bd1
        int128_t v50 = __asm_movss(a3); // 0x75bd6
        int128_t v51 = __asm_mulss(v48, v47); // 0x75bdb
        int128_t v52 = __asm_movss(a4); // 0x75bdf
        int128_t v53 = __asm_mulss(v50, v45); // 0x75be4
        int32_t v54 = __asm_movss_1646(v46); // 0x75be8
        int128_t v55 = __asm_movss(v37); // 0x75bed
        int128_t v56 = __asm_mulss_1654(v52, v21); // 0x75bf2
        int128_t v57 = __asm_mulss(v55, v45); // 0x75bf7
        int128_t v58 = __asm_movss(a4); // 0x75bfb
        int128_t v59 = __asm_mulss_1654(v45, v21); // 0x75c00
        int32_t v60 = __asm_movss_1646(v53); // 0x75c05
        int128_t v61 = __asm_mulss_1654(v58, v37); // 0x75c0a
        int128_t v62 = __asm_mulss(__asm_movaps(v42), v47); // 0x75c12
        int128_t v63 = __asm_mulss_1654(v47, v41); // 0x75c16
        int128_t v64 = __asm_mulss_1654(v42, v21); // 0x75c1b
        int128_t v65 = __asm_subss(v57, v62); // 0x75c20
        int128_t v66 = __asm_movss(v54); // 0x75c24
        int128_t v67 = __asm_subss(v63, v59); // 0x75c29
        int128_t v68 = __asm_mulss_1654(__asm_movss(v41), v37); // 0x75c32
        int128_t v69 = __asm_mulss_1654(v67, a4); // 0x75c37
        int128_t v70 = __asm_mulss_1654(v65, a4); // 0x75c3c
        int128_t v71 = __asm_subss(v64, v68); // 0x75c41
        int128_t v72 = __asm_movss(v49); // 0x75c45
        int128_t v73 = __asm_subss(v66, v69); // 0x75c4a
        int128_t v74 = __asm_subss(v72, v70); // 0x75c4e
        int128_t v75 = __asm_mulss_1654(v71, a4); // 0x75c52
        int32_t v76 = __asm_movss_1646(v73); // 0x75c57
        int128_t v77 = __asm_movss(v60); // 0x75c5c
        int32_t v78 = __asm_movss_1646(__asm_subss(v77, v75)); // 0x75c65
        int128_t v79 = __asm_addss_1661(__asm_movaps(v56), v74); // 0x75c6d
        int128_t v80 = __asm_subss(v74, v56); // 0x75c71
        *(int32_t *)g6 = __asm_movss_1646(v79);
        int128_t v81 = __asm_movss(v76); // 0x75c79
        *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_addss_1661(v81, v61));
        int128_t v82 = __asm_movss(v78); // 0x75c87
        *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_addss_1661(v82, v51));
        int128_t v83 = __asm_addss(v70, v49); // 0x75c95
        int128_t v84 = __asm_movaps(v56); // 0x75c9a
        int128_t v85 = __asm_addss(v69, v54); // 0x75c9d
        *(int32_t *)(g6 + 36) = __asm_movss_1646(v80);
        int128_t v86 = __asm_addss(v75, v60); // 0x75ca7
        int128_t v87 = __asm_addss_1661(v84, v83); // 0x75cac
        int128_t v88 = __asm_subss(v83, v56); // 0x75cb0
        *(int32_t *)(g6 + 12) = __asm_movss_1646(v87);
        int128_t v89 = __asm_movaps(v61); // 0x75cb9
        *(int32_t *)(g6 + 24) = __asm_movss_1646(v88);
        int128_t v90 = __asm_movss(v76); // 0x75cc1
        int128_t v91 = __asm_addss_1661(v89, v85); // 0x75cc6
        int128_t v92 = __asm_subss(v85, v61); // 0x75cca
        int128_t v93 = __asm_subss(v90, v61); // 0x75cce
        *(int32_t *)(g6 + 16) = __asm_movss_1646(v91);
        int128_t v94 = __asm_addss_1661(__asm_movaps(v51), v86); // 0x75cda
        *(int32_t *)(g6 + 28) = __asm_movss_1646(v92);
        *(int32_t *)(g6 + 40) = __asm_movss_1646(v93);
        int128_t v95 = __asm_movss(v78); // 0x75ce8
        int128_t v96 = __asm_subss(v86, v51); // 0x75ced
        int128_t v97 = __asm_subss(v95, v51); // 0x75cf1
        *(int32_t *)(g6 + 20) = __asm_movss_1646(v94);
        *(int32_t *)(g6 + 32) = __asm_movss_1646(v96);
        *(int32_t *)(g6 + 44) = __asm_movss_1646(v97);
        result = g4;
    } else {
        result = v15;
    }
    // 0x75d04
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x75d30 - 0x75eb8
int32_t function_75d30(int32_t a1, int32_t a2, int32_t a3) {
    g9 = a2;
    int128_t v1 = __asm_movaps(g241); // 0x75d39
    g4 = a1;
    int128_t v2 = __asm_movaps(*(int128_t *)g9); // 0x75d43
    int128_t v3 = __asm_andps(v1, v2); // 0x75d46
    int128_t v4 = __asm_movaps(v3); // 0x75d49
    int128_t v5 = __asm_shufps(__asm_movaps(v3), v3, 85); // 0x75d4f
    int128_t v6 = __asm_maxps(__asm_shufps(v4, v3, 0), v5); // 0x75d57
    int128_t v7 = __asm_movaps(v3); // 0x75d5a
    int128_t v8 = __asm_movaps(g240); // 0x75d5d
    int128_t v9 = __asm_shufps(v7, v3, 170); // 0x75d64
    int128_t v10 = __asm_maxps(v6, v9); // 0x75d68
    int128_t v11 = __asm_andps(v8, v2); // 0x75d6b
    int128_t v12 = __asm_xorps(v9, v9); // 0x75d6e
    int32_t v13 = __asm_movaps_1663(v11); // 0x75d71
    int128_t v14 = __asm_mulps(__asm_shufps(v2, v2, 255), v11); // 0x75d79
    int32_t v15;
    int128_t v16 = __asm_movss(v15); // 0x75d7c
    int128_t v17 = __asm_cmpeqps(v10, v3); // 0x75d81
    int128_t v18 = __asm_shufps(v17, v17, 170); // 0x75d85
    int128_t v19 = __asm_movaps(v18); // 0x75d89
    int128_t v20 = __asm_andps(v18, g237); // 0x75d8c
    int128_t v21 = __asm_orps(v20, __asm_andnps(v19, g238)); // 0x75d9a
    int128_t v22 = __asm_movaps(v21); // 0x75d9d
    int32_t v23 = __asm_movaps_1663(__asm_mulps(v22, v11)); // 0x75da3
    int32_t v24;
    int128_t v25 = __asm_addss(__asm_movss(v23), v24); // 0x75dac
    int32_t v26;
    int128_t v27 = __asm_movss_1667(v12, __asm_addss(v25, v26)); // 0x75db6
    int128_t v28 = __asm_movaps(v27); // 0x75dba
    int128_t v29 = __asm_mulps(__asm_shufps(v28, v27, 0), v11); // 0x75dc1
    int128_t v30 = __asm_xorps(v27, v27); // 0x75dc4
    int128_t v31 = __asm_subps(v21, v29); // 0x75dc7
    int128_t v32 = __asm_movaps(v31); // 0x75dca
    int32_t v33 = __asm_movaps_1663(__asm_mulps(v32, v31)); // 0x75dd0
    int128_t v34 = __asm_addss(__asm_movss(v33), v24); // 0x75de0
    int128_t v35 = __asm_movss_1667(v30, __asm_addss(v34, v26)); // 0x75dea
    int128_t v36 = __asm_shufps(__asm_movaps(v35), v35, 0); // 0x75df1
    int128_t v37 = __asm_rsqrtps(v36); // 0x75df5
    int128_t v38 = __asm_cmpltps(__asm_movaps(g242), v36); // 0x75dff
    int128_t v39 = __asm_movaps(v37); // 0x75e03
    int128_t v40 = __asm_mulps(__asm_mulps(v39, v37), v36); // 0x75e09
    int128_t v41 = __asm_subps(__asm_movaps(g243), v40); // 0x75e13
    int32_t v42;
    int128_t v43 = __asm_movss(v42); // 0x75e16
    int128_t v44 = __asm_mulps(v41, v37); // 0x75e1b
    int128_t v45 = __asm_mulps(v44, g246); // 0x75e1e
    int128_t v46 = __asm_andps(v38, __asm_mulps(v45, v31)); // 0x75e28
    int32_t v47 = __asm_movaps_1663(v46); // bp-60
    int32_t v48;
    int128_t v49 = __asm_movss(v48); // 0x75e2f
    int32_t v50;
    int128_t v51 = __asm_movss(v50); // 0x75e34
    int128_t v52 = __asm_mulss(__asm_movaps(v49), v16); // 0x75e3c
    int128_t v53 = __asm_movaps(v51); // 0x75e40
    int128_t v54 = __asm_subss(v52, __asm_mulss(v53, v43)); // 0x75e47
    int128_t v55 = __asm_movss(v13); // 0x75e4b
    int128_t v56 = __asm_mulss(v51, v55); // 0x75e50
    int32_t v57 = __asm_movss_1646(v54); // 0x75e54
    int128_t v58 = __asm_movss(v47); // 0x75e59
    int128_t v59 = __asm_mulss(v55, v49); // 0x75e5e
    int128_t v60 = __asm_mulss(v16, v58); // 0x75e62
    int128_t v61 = __asm_mulss(v58, v43); // 0x75e66
    int128_t v62 = __asm_subss(v56, v60); // 0x75e6a
    int128_t v63 = __asm_subss(v61, v59); // 0x75e6e
    __asm_movss_1646(v62);
    int128_t v64 = __asm_movaps(v14); // 0x75e77
    __asm_movss_1646(v63);
    int128_t v65 = __asm_movss(a3); // 0x75e7f
    int128_t v66 = __asm_shufps(v65, v65, 0); // 0x75e84
    int128_t v67 = __asm_mulps(v46, v66); // 0x75e88
    int128_t v68 = __asm_mulps(v66, (int128_t)v57); // 0x75e8b
    int128_t v69 = __asm_subps(v64, v68); // 0x75e8f
    int128_t v70 = __asm_addps(v14, v68); // 0x75e92
    int128_t v71 = __asm_movaps(v69); // 0x75e95
    int128_t v72 = __asm_subps(v69, v67); // 0x75e98
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(__asm_addps(v71, v67));
    int128_t v73 = __asm_movaps(v70); // 0x75ea1
    int128_t v74 = __asm_subps(v70, v67); // 0x75ea4
    int128_t v75 = __asm_addps(v73, v67); // 0x75ea7
    *(int128_t *)(g4 + 48) = (int128_t)__asm_movaps_1663(v72);
    *(int128_t *)(g4 + 32) = (int128_t)__asm_movaps_1663(v74);
    int32_t v76 = __asm_movaps_1663(v75); // 0x75eb2
    int32_t result = g4; // 0x75eb2
    *(int128_t *)(result + 16) = (int128_t)v76;
    return result;
}

// Address range: 0x75ec0 - 0x761ec
int32_t function_75ec0(int32_t a1, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g8; // 0x75ec3
    int32_t v2 = g10; // 0x75ec4
    int32_t v3 = g6; // bp-16
    g7 = a2;
    int128_t v4 = __asm_movss(a5); // 0x75eda
    int128_t v5 = __asm_movss(a6); // 0x75ee6
    int32_t v6 = 16 * a2 + 16; // 0x75ef0
    int32_t v7 = g11 - v6; // 0x75ef3
    int32_t v8 = v7 + 15 & -16; // 0x75f04
    g9 = v8;
    g6 = v7 - v6 + 15 & -16;
    g4 = g738;
    if (a2 >= 1) {
        // 0x75f28
        g4 = a4;
        bool v9 = false; // cf
        bool v10 = true; // zf
        g9 = 0;
        g8 = a1;
        int128_t v11 = __asm_xorps(__asm_movss((int32_t)g233), v5); // 0x75f38
        int128_t v12 = __asm_movss(*(int32_t *)g4); // 0x75f3b
        int128_t v13 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x75f3f
        int32_t v14 = g8; // 0x75f44
        int128_t v15 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x75f47
        int32_t v16 = g8; // 0x75f4c
        g4 = v16;
        g8 = v8;
        while (true) {
            int128_t v17 = __asm_movss(*(int32_t *)v16); // 0x75f70
            int128_t v18 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x75f74
            int128_t v19 = __asm_mulss(v17, v12); // 0x75f79
            int128_t v20 = __asm_addss_1661(v19, __asm_mulss(v18, v13)); // 0x75f81
            int128_t v21 = __asm_mulss(__asm_movss(*(int32_t *)(g4 + 8)), v15); // 0x75f8a
            int128_t v22 = __asm_subss(__asm_addss_1661(v20, v21), v4); // 0x75f92
            __asm_ucomiss_1648(v22, v5);
            *(int32_t *)(4 * g9 + g8) = __asm_movss_1646(v22);
            int32_t v23; // ebp
            int32_t v24;
            if (v9 || v10) {
                // 0x75fa0
                __asm_ucomiss_1648(v11, v22);
                int32_t * v25 = (int32_t *)(4 * g9 + g6); // 0x76120
                if (!v9 && !v10) {
                    // 0x75fa9
                    *v25 = 1;
                    g10 = 1;
                    g9++;
                    int32_t * v26 = (int32_t *)(v23 - 44); // 0x75fb8
                    *v26 = *v26 + 1;
                    int32_t v27 = g4 + 12; // 0x75fbd
                    g4 = v27;
                    uint32_t v28 = g9; // 0x75fc0
                    v9 = v28 < a2;
                    v10 = v28 == a2;
                    if (v28 == a2) {
                        // break -> 0x75fc4
                        break;
                    }
                    v16 = v27;
                    // continue -> 0x75f70
                    continue;
                }
                // 0x76120
                *v25 = 2;
                v24 = 2;
            } else {
                // 0x75f58
                *(int32_t *)(4 * g9 + g6) = 0;
                v24 = 0;
            }
            // 0x75f61
            g10 = v24;
            int32_t * v29 = (int32_t *)(4 * v24 - 48 + v23); // 0x75f61
            *v29 = *v29 + 1;
            int32_t v30 = g9 + 1; // 0x75f66
            g9 = v30;
            int32_t v31 = g4 + 12; // 0x75f69
            g4 = v31;
            v9 = v30 < a2;
            v10 = v30 == a2;
            if (v30 == a2) {
                // break -> 0x75fc4
                break;
            }
            v16 = v31;
        }
        int32_t v32 = g6; // 0x75fc4
        int32_t v33 = *(int32_t *)v32; // 0x75fc4
        g4 = v33;
        g9 = v8;
        g8 = v14;
        int32_t v34 = 4 * a2; // 0x75fcc
        *(int32_t *)(v32 + v34) = v33;
        int32_t v35 = g9; // 0x75fcf
        *(int32_t *)(v35 + v34) = *(int32_t *)v35;
        g4 = 0;
    }
    // 0x761e0
    g7 = 0;
    g6 = v3;
    g4 = 0;
    g10 = v2;
    g8 = v1;
    return 0;
}

// Address range: 0x761f0 - 0x764e9
int32_t function_761f0(int32_t a1, int32_t result2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g8; // 0x761f3
    int32_t v2 = g10; // 0x761f4
    int32_t v3 = g6; // bp-16
    g4 = result2;
    g9 = result2;
    g6 = a1;
    int128_t v4 = __asm_movss(a5); // 0x76202
    int32_t v5 = -16 * g4 - 16 + g11; // 0x7620d
    int32_t v6 = v5 + 15 & -16; // 0x76220
    g4 = a4;
    int32_t v7 = v5 - (4 * result2 + 31 & -16) + 15 & -16; // 0x7622f
    g7 = v7;
    int128_t v8 = __asm_movaps(*(int128_t *)a4); // 0x76237
    int128_t v9 = __asm_shufps(__asm_movaps(v8), v8, 255); // 0x7623d
    int32_t result;
    int32_t v10; // 0x76355
    int32_t v11; // 0x76348
    int32_t v12; // 0x764b5
    int128_t v13; // 0x7632c
    int32_t v14; // 0x7645c
    int32_t v15; // 0x763d2
    int32_t v16; // 0x764b5
    if (result2 == 0 || result2 < 0) {
        goto lab_0x764d0;
    } else {
        // 0x76247
        g10 = v7;
        int32_t v17 = g6; // 0x76252
        g7 = v17;
        g8 = 0;
        bool v18 = false; // cf
        bool v19 = true; // zf
        g4 = 0;
        int128_t v20 = __asm_xorps(__asm_movss((int32_t)g233), v4); // 0x7625b
        int32_t v21 = g7; // 0x76260
        int32_t v22; // 0x762c4
        while (true) {
            int128_t v23 = __asm_movaps(*(int128_t *)v21); // 0x76260
            int128_t v24;
            int128_t v25 = __asm_xorps(v24, v24); // 0x76263
            g9 = 1;
            g6 = v6;
            int32_t v26 = __asm_movaps_1663(__asm_mulps(v23, v8)); // 0x76271
            int32_t v27;
            int128_t v28 = __asm_addss(__asm_movss(v26), v27); // 0x7627a
            int32_t v29;
            int128_t v30 = __asm_movss_1667(v25, __asm_addss(v28, v29)); // 0x76284
            int128_t v31 = __asm_movaps(v30); // 0x76288
            int128_t v32 = __asm_subps(__asm_shufps(v31, v30, 0), v9); // 0x7628f
            int128_t v33 = __asm_movss(__asm_movaps_1663(v32)); // 0x76296
            __asm_ucomiss_1648(v33, v4);
            *(int32_t *)(4 * g4 + g6) = __asm_movss_1646(v33);
            g6 = 1;
            int32_t v34; // 0x762b3
            if (v18 || v19) {
                // 0x762aa
                __asm_ucomiss_1648(v20, v33);
                int32_t v35 = g6 & -256 | (int32_t)(v18 | v19); // 0x762b0
                v34 = (v35 | 2) + v35;
                g6 = v34;
                int32_t v36 = g9 & (int32_t)&g862 & -256; // 0x762b7
                g9 = (v36 | 2) + v36;
            } else {
                v34 = 1;
            }
            // 0x762be
            *(char *)(g4 + g10) = (char)v34;
            int32_t v37 = g4 + 1; // 0x762c1
            g4 = v37;
            v22 = g9 | g8;
            g8 = v22;
            int32_t v38 = g7 + 16; // 0x762c6
            g7 = v38;
            int32_t v39 = v37 - result2; // 0x762c9
            v18 = v37 < result2;
            v19 = v39 == 0;
            if (v39 == 0) {
                // break -> 0x762ce
                break;
            }
            v21 = v38;
            v24 = v30;
        }
        // 0x762ce
        g7 = v7;
        g9 = result2;
        g6 = v17;
        unsigned char v40 = *(char *)v7; // 0x762dd
        g4 = v40;
        *(char *)(v7 + result2) = v40;
        g7 = v6;
        int32_t v41 = *(int32_t *)v6; // 0x762e6
        g4 = v41;
        *(int32_t *)(4 * g9 + v6) = v41;
        if (v22 % 2 == 0) {
            goto lab_0x764d0;
        } else {
            int32_t v42 = g8 & 2; // 0x762f1
            g8 = v42;
            if (v42 == 0) {
                // 0x76410
                if (g9 > 3) {
                    // 0x76419
                    g7 = a3;
                    g4 = 0;
                    g9 -= 4;
                    int32_t v43 = __asm_movaps_1663(__asm_movaps(*(int128_t *)g6)); // 0x76427
                    int32_t v44 = g4; // 0x76427
                    *(int128_t *)(v44 + g7) = (int128_t)v43;
                    int32_t v45 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(v44 + 16 + g6))); // 0x76430
                    int32_t v46 = g4; // 0x76430
                    *(int128_t *)(g7 + 16 + v46) = (int128_t)v45;
                    int32_t v47 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(v46 + 32 + g6))); // 0x7643a
                    int32_t v48 = g4; // 0x7643a
                    *(int128_t *)(g7 + 32 + v48) = (int128_t)v47;
                    int32_t v49 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(v48 + 48 + g6))); // 0x76444
                    int32_t v50 = g4; // 0x76444
                    *(int128_t *)(g7 + 48 + v50) = (int128_t)v49;
                    int32_t v51 = v50 + 64; // 0x76449
                    g4 = v51;
                    while (g9 > 3) {
                        // 0x76420
                        g9 -= 4;
                        v43 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(g6 + v51)));
                        v44 = g4;
                        *(int128_t *)(v44 + g7) = (int128_t)v43;
                        v45 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(v44 + 16 + g6)));
                        v46 = g4;
                        *(int128_t *)(g7 + 16 + v46) = (int128_t)v45;
                        v47 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(v46 + 32 + g6)));
                        v48 = g4;
                        *(int128_t *)(g7 + 32 + v48) = (int128_t)v47;
                        v49 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(v48 + 48 + g6)));
                        v50 = g4;
                        *(int128_t *)(g7 + 48 + v50) = (int128_t)v49;
                        v51 = v50 + 64;
                        g4 = v51;
                    }
                    int32_t v52 = result2 - 4; // 0x76454
                    g4 = v52;
                    uint32_t v53 = v52 / 4; // 0x76459
                    v14 = 4 * v53 + 4;
                    g7 = v14;
                    int32_t v54 = -4 * v53 + v52; // 0x76465
                    g9 = v54;
                    if (v54 < 1) {
                        result = result2;
                        goto lab_0x763ff;
                    } else {
                        goto lab_0x7646c;
                    }
                } else {
                    // 0x764e2
                    g9 = result2;
                    g7 = 0;
                    v14 = 0;
                    goto lab_0x7646c;
                }
            } else {
                int128_t v55 = __asm_movaps(g244); // 0x762fa
                int128_t v56 = __asm_movaps(v8); // 0x76301
                g7 = 1;
                int128_t v57 = __asm_movaps(g236); // 0x76309
                g10 = 0;
                int128_t v58 = __asm_cmpeqps(v56, v55); // 0x76315
                g8 = v7;
                int128_t v59 = __asm_cmpeqps(v8, __asm_xorps(v55, v57)); // 0x7631f
                int128_t v60 = __asm_movaps(v58); // 0x76323
                int128_t v61 = __asm_andps(v58, v9); // 0x76326
                int128_t v62 = __asm_xorps(v9, v57); // 0x76329
                v13 = __asm_orps(v60, v59);
                int128_t v63 = __asm_andps(v62, v59); // 0x7632f
                __asm_andps(__asm_orps(v61, v63), v13);
                v11 = g7;
                while (true) {
                  lab_0x763c4:;
                    int32_t v64 = v11 + 0xfffffff; // 0x763c4
                    g9 = v64;
                    int32_t v65 = g8; // 0x763ca
                    unsigned char v66 = *(char *)(v11 - 1 + v65); // 0x763ca
                    int32_t v67 = v66; // 0x763ca
                    g4 = v67;
                    v15 = 16 * v64 + g6;
                    g9 = v15;
                    if (v66 == 4) {
                        // 0x763e0
                        g6 = a3;
                        int32_t v68 = g10; // 0x763e3
                        g4 = v68;
                        g10 = v68 + 1;
                        g4 *= 16;
                        int32_t v69 = __asm_movaps_1663(__asm_movaps(*(int128_t *)v15)); // 0x763ee
                        *(int128_t *)(g4 + g6) = (int128_t)v69;
                        uint32_t v70 = g7; // 0x763f2
                        g6 = v70;
                        int32_t v71 = v70 + 1; // 0x763f4
                        g7 = v71;
                        if (v70 >= result2) {
                            // break -> 0x763fc
                            break;
                        }
                        v11 = v71;
                        // continue -> 0x763c4
                        continue;
                    }
                    // 0x76340
                    if (v66 == 1) {
                        // 0x764a0
                        g9 = v15;
                        int32_t v72 = g10; // 0x764a3
                        g10 = v72 + 1;
                        g6 = 16 * v72;
                        g9 = a3;
                        int32_t v73 = __asm_movaps_1663(__asm_movaps(*(int128_t *)v15)); // 0x764b1
                        *(int128_t *)(g6 + g9) = (int128_t)v73;
                        v12 = g7;
                        unsigned char v74 = *(char *)(v12 + g8); // 0x764b5
                        v16 = v74;
                        g6 = v16;
                        if (v74 != 4) {
                            v10 = g4;
                            goto lab_0x76355;
                        } else {
                            goto lab_0x764c2;
                        }
                    } else {
                        unsigned char v75 = *(char *)(v65 + v11); // 0x76348
                        int32_t v76 = v75; // 0x76348
                        g6 = v76;
                        if (v75 == 4) {
                            v12 = v11;
                            goto lab_0x764c2;
                        } else {
                            v12 = v11;
                            v16 = v76;
                            v10 = v67;
                            goto lab_0x76355;
                        }
                    }
                }
              lab_0x763fc:
                // 0x763fc
                result = g10;
                goto lab_0x763ff;
            }
        }
    }
  lab_0x764c2:
    // 0x764c2
    g6 = v12;
    goto lab_0x763bc;
  lab_0x76355:
    // 0x76355
    g6 = v12;
    if ((char)v10 - (char)v16 != 0) {
        // 0x7635b
        g4 = v6;
        g9 = v12 >> 31;
        int128_t v84 = __asm_movss(*(int32_t *)(v6 - 4 + 4 * v12)); // 0x76363
        int128_t v85 = __asm_movaps(v84); // 0x76369
        int128_t v86 = __asm_subss_1651(v85, *(int32_t *)(4 * g7 + g4)); // 0x7636c
        g4 = v15;
        int128_t v87 = __asm_divss(v84, v86); // 0x76374
        int128_t v88 = __asm_xorps(v86, v86); // 0x76378
        int128_t v89 = __asm_movaps(*(int128_t *)g4); // 0x7637b
        g9 = (0x100000000 * (int64_t)g9 | (int64_t)g7) % (int64_t)result2;
        int32_t v90; // 0x76312
        g4 = v90;
        int128_t v91 = __asm_movss_1667(v88, v87); // 0x76386
        int128_t v92 = __asm_shufps(__asm_movaps(v91), v91, 0); // 0x7638d
        int32_t v93 = 16 * g9; // 0x76391
        g9 = v93;
        int128_t v94 = __asm_movaps(*(int128_t *)(g4 + v93)); // 0x76394
        int32_t v95 = g10; // 0x76398
        g10 = v95 + 1;
        g9 = a3;
        g4 = 16 * v95;
        int128_t v96 = __asm_mulps(v92, __asm_subps(v94, v89)); // 0x763a6
        int128_t v97 = __asm_movaps(v13); // 0x763a9
        int128_t v98 = __asm_addps(v96, v89); // 0x763ac
        int128_t v99 = __asm_movaps(__asm_andnps(v97, v98)); // 0x763b2
        int128_t v100; // 0x76335
        *(int128_t *)(g4 + g9) = (int128_t)__asm_movaps_1663(__asm_orps(v99, v100));
        int32_t v101 = g7; // 0x763bc
        int32_t v102 = g6; // 0x763bf
    }
    goto lab_0x763bc;
  lab_0x763bc:;
    int32_t v77 = v12 + 1; // 0x763bc
    g7 = v77;
    if (v12 >= result2) {
        // break -> 0x763fc
        goto lab_0x763fc;
    }
    v11 = v77;
    goto lab_0x763c4;
  lab_0x764d0:
    // 0x764d0
    g4 = 0;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 0;
  lab_0x763ff:
    // 0x763ff
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x7646c:;
    uint32_t v78 = 16 * v14; // 0x7646c
    g4 = 0;
    int32_t v79 = g6 + v78; // 0x76471
    g6 = v79;
    g7 = v78 + a3;
    int32_t v80 = __asm_movaps_1663(__asm_movaps(*(int128_t *)v79)); // 0x76484
    int32_t v81 = g4; // 0x76484
    *(int128_t *)(v81 + g7) = (int128_t)v80;
    int32_t v82 = v81 + 16; // 0x76488
    g4 = v82;
    int32_t v83 = g9 - 1; // 0x7648b
    g9 = v83;
    while (v83 != 0) {
        // 0x76480
        v80 = __asm_movaps_1663(__asm_movaps(*(int128_t *)(g6 + v82)));
        v81 = g4;
        *(int128_t *)(v81 + g7) = (int128_t)v80;
        v82 = v81 + 16;
        g4 = v82;
        v83 = g9 - 1;
        g9 = v83;
    }
    // 0x76490
    g4 = result2;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x764f0 - 0x767e2
int32_t function_764f0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int64_t a5, int64_t a6) {
    int128_t v1; // xmm0
    int128_t v2 = __asm_xorpd(v1, v1); // 0x764f1
    int32_t v3 = g8; // 0x764f7
    int32_t v4 = g10; // 0x764f8
    int32_t v5 = g6; // bp-16
    __asm_movsd(v2);
    g9 = a2;
    g4 = a4;
    int128_t v6 = __asm_movsd_1649(a5); // 0x76516
    int128_t v7 = __asm_movsd_1649(a6); // 0x76522
    __asm_movsd(v2);
    g9 *= 32;
    __asm_movsd(v2);
    int32_t v8 = g9 + 16; // 0x76534
    int32_t v9 = g11 - v8; // 0x76537
    g9 = a2;
    g10 = v9 + 15 & -16;
    g7 = v9 - v8 + 15 & -16;
    if (a2 >= 1) {
        // 0x76554
        g6 = a1;
        bool v10 = false; // cf
        bool v11 = true; // zf
        g9 = 0;
        int128_t v12 = __asm_movsd_1649(-0x8000000000000000); // 0x76559
        int128_t v13 = __asm_movsd_1649(*(int64_t *)g4); // 0x76561
        int128_t v14 = __asm_movsd_1649(*(int64_t *)(g4 + 8)); // 0x76565
        int128_t v15 = __asm_xorpd(v12, v7); // 0x7656a
        int128_t v16 = __asm_movsd_1649(*(int64_t *)(g4 + 16)); // 0x7656e
        int32_t v17 = g6; // 0x76573
        g4 = v17;
        g8 = a2;
        int32_t v18 = v17; // 0x76598
        while (true) {
            int128_t v19 = __asm_movsd_1649(*(int64_t *)v18); // 0x76598
            int128_t v20 = __asm_movsd_1649(*(int64_t *)(g4 + 8)); // 0x7659c
            int128_t v21 = __asm_mulsd(v19, v13); // 0x765a1
            int128_t v22 = __asm_addsd(v21, __asm_mulsd(v20, v14)); // 0x765a9
            int128_t v23 = __asm_movsd_1649(*(int64_t *)(g4 + 16)); // 0x765ad
            int128_t v24 = __asm_subsd(__asm_addsd(v22, __asm_mulsd(v23, v16)), v6); // 0x765ba
            __asm_ucomisd(v24, v7);
            int32_t v25 = __asm_movsd(v24); // 0x765c2
            int32_t v26 = g9; // 0x765c2
            *(int64_t *)(8 * v26 + g10) = (int64_t)v25;
            int32_t v27; // ebp
            int32_t v28;
            if (v10 || v11) {
                // 0x765c9
                __asm_ucomisd(v15, v24);
                int32_t * v29 = (int32_t *)(4 * g9 + g7); // 0x76740
                if (!v10 && !v11) {
                    // 0x765d3
                    *v29 = 1;
                    g6 = 1;
                    g9++;
                    int32_t * v30 = (int32_t *)(v27 - 32); // 0x765e2
                    *v30 = *v30 + 1;
                    int32_t v31 = g4 + 24; // 0x765e7
                    g4 = v31;
                    uint32_t v32 = g9; // 0x765ea
                    uint32_t v33 = g8; // 0x765ea
                    v10 = v32 < v33;
                    v11 = v32 == v33;
                    if (v32 == v33) {
                        // break -> 0x765ee
                        break;
                    }
                    v18 = v31;
                    // continue -> 0x76598
                    continue;
                }
                // 0x76740
                *v29 = 2;
                v28 = 2;
            } else {
                // 0x76580
                *(int32_t *)(g7 + 4 * v26) = 0;
                v28 = 0;
            }
            // 0x76589
            g6 = v28;
            int32_t * v34 = (int32_t *)(4 * v28 - 36 + v27); // 0x76589
            *v34 = *v34 + 1;
            int32_t v35 = g9 + 1; // 0x7658e
            g9 = v35;
            int32_t v36 = g4 + 24; // 0x76591
            g4 = v36;
            uint32_t v37 = g8; // 0x76594
            v10 = v35 < v37;
            v11 = v35 == v37;
            if (v35 == v37) {
                // break -> 0x765ee
                break;
            }
            v18 = v36;
        }
        // 0x765ee
        g4 = *(int32_t *)g7;
        g9 = a2;
        int128_t v38 = __asm_movsd_1649(*(int64_t *)g10); // 0x765f3
        g6 = v17;
        *(int32_t *)(4 * g9 + g7) = g4;
        g4 = 0;
        *(int64_t *)(8 * g9 + g10) = (int64_t)__asm_movsd(v38);
    }
    // 0x767d0
    g4 = 0;
    g6 = v5;
    g10 = v4;
    g8 = v3;
    return 0;
}

// Address range: 0x767f0 - 0x76808
int32_t function_767f0(uint32_t a1) {
    // 0x767f0
    g4 = 1;
    g9 = a1;
    if (a1 <= 1) {
        // 0x76806
        return 1;
    }
    int32_t result = 2; // 0x76800
    while (result < a1) {
        // 0x76800
        result *= 2;
    }
    // 0x76806
    g4 = result;
    // 0x76806
    return result;
}

// Address range: 0x76810 - 0x7682a
int32_t function_76810(uint32_t a1) {
    // 0x76810
    g4 = 0;
    g9 = a1;
    if (a1 <= 1) {
        // 0x76828
        return 0;
    }
    // 0x7681d
    g4 = 1;
    int32_t v1 = 2; // 0x76820
    while (v1 < a1) {
        // 0x76820
        v1 *= 2;
    }
    int32_t result = v1 / 2; // 0x76826
    g4 = result;
    // 0x76828
    return result;
}

// Address range: 0x76830 - 0x76831
int32_t function_76830(int32_t a1, int32_t a2) {
    // 0x76830
    return g4;
}

// Address range: 0x76859 - 0x7685a
int32_t function_76859(void) {
    // 0x76859
    return g4;
}

// Address range: 0x7686f - 0x76891
float80_t function_7686f(void) {
    // 0x7686f
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x7686f
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x76872
    int128_t v5 = __asm_mulss_1654(__asm_cvtpd2ps(v4), 0x42652ee0); // 0x7687b
    *(int32_t *)(v1 - 28) = __asm_movss_1646(__asm_addss_1661(v5, v5));
    return (float80_t)*(float32_t *)(v1 - 28);
}

// Address range: 0x768b8 - 0x768c2
int32_t function_768b8(void) {
    // 0x768b8
    int32_t v1; // ebp
    int32_t v2 = v1 - 24; // 0x768b8
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    __asm_movsd_1649(*(int64_t *)v2);
    int32_t result = function_76859(); // 0x768c0
    g4 = result;
    return result;
}

// Address range: 0x76919 - 0x7693b
float80_t function_76919(void) {
    // 0x76919
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x76919
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x7691c
    int128_t v5 = __asm_mulss_1654(__asm_cvtpd2ps(v4), 0x42652ee0); // 0x76925
    *(int32_t *)(v1 - 28) = __asm_movss_1646(__asm_addss_1661(v5, v5));
    return (float80_t)*(float32_t *)(v1 - 28);
}

// Address range: 0x76940 - 0x76941
int32_t function_76940(int32_t a1) {
    // 0x76940
    return g4;
}

// Address range: 0x7697e - 0x76982
int32_t function_7697e(int32_t result) {
    // 0x7697e
    g4 = result;
    return result;
}

// Address range: 0x7698b - 0x7698f
int32_t function_7698b(int32_t result) {
    // 0x7698b
    g4 = result;
    return result;
}

// Address range: 0x76991 - 0x7699a
int32_t function_76991(int32_t a1) {
    char * v1 = (char *)(g4 + 8); // 0x76991
    *v1 = (char)(g6 / 256) & *v1;
    *(char *)g8 = (char)g7 + *(char *)&g8;
    return g4;
}

// Address range: 0x7699a - 0x769a1
int32_t function_7699a(void) {
    int32_t result = function_f3e2570f(); // 0x7699a
    g4 = result;
    return result;
}

// Address range: 0x769ef - 0x769f1
int32_t function_769ef(int32_t a1, int32_t a2) {
    // 0x769ef
    g7 = a1;
    return g4;
}

// Address range: 0x76a29 - 0x76a2b
int32_t function_76a29(int32_t a1) {
    // 0x76a29
    g7 = a1;
    return g4;
}

// Address range: 0x76a34 - 0x76c92
int32_t function_76a34(int32_t a1) {
    int32_t * v1 = (int32_t *)(g6 + 0x4d8dc455); // 0x76a34
    *v1 = *v1 - 1;
    uint32_t v2 = g7; // 0x76a3a
    bool v3; // cf
    g7 = v2 / 2 % 128 | v2 & -256 | 256 * v2 & 0xff00 | 128 * (int32_t)v3;
    g5 = a1;
    int128_t v4 = __asm_movss(*(int32_t *)(a1 - 88)); // 0x76a3e
    int128_t v5 = __asm_movss(g8); // 0x76a43
    int128_t v6 = __asm_movss(-0x40000000); // 0x76a47
    int128_t v7 = __asm_mulss(v5, v4); // 0x76a4f
    int128_t v8 = __asm_movss(g9); // 0x76a53
    int128_t v9 = __asm_movss(*(int32_t *)(g8 + 4)); // 0x76a57
    int128_t v10 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x76a5c
    int128_t v11 = __asm_mulss(v9, v4); // 0x76a61
    int128_t v12 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x76a65
    int128_t v13 = __asm_addss_1661(v7, v8); // 0x76a6a
    int128_t v14 = __asm_mulss(v8, v6); // 0x76a6e
    int128_t v15 = __asm_movss(*(int32_t *)(g5 - 112)); // 0x76a72
    int128_t v16 = __asm_mulss_1654(v4, *(int32_t *)(g8 + 8)); // 0x76a77
    *(int32_t *)(g5 - 108) = g7;
    *(int32_t *)(g5 - 48) = __asm_movss_1646(v13);
    int128_t v17 = __asm_addss_1661(v11, v12); // 0x76a87
    int128_t v18 = __asm_mulss(v12, v6); // 0x76a8b
    int128_t v19 = __asm_addss_1661(v14, v13); // 0x76a8f
    int128_t v20 = __asm_movaps(v10); // 0x76a93
    *(int32_t *)(g5 - 88) = __asm_movss_1646(v6);
    int128_t v21 = __asm_mulss(v20, v6); // 0x76a9b
    int128_t v22 = __asm_addss_1661(v16, v10); // 0x76a9f
    *(int32_t *)(g5 - 104) = __asm_movss_1646(v15);
    *(int32_t *)(g5 - 44) = __asm_movss_1646(v17);
    int128_t v23 = __asm_addss_1661(v18, v17); // 0x76aad
    *(int32_t *)(g5 - 36) = __asm_movss_1646(v19);
    *(int32_t *)(g5 - 40) = __asm_movss_1646(v22);
    int128_t v24 = __asm_addss_1661(v21, v22); // 0x76abb
    *(int32_t *)(g5 - 32) = __asm_movss_1646(v23);
    *(int32_t *)(g5 - 28) = __asm_movss_1646(v24);
    g4 = (float32_t)function_6d750((int32_t)&g870);
    g13++;
    int32_t v25 = g5; // 0x76ad0
    int32_t v26 = v25 - 36; // 0x76ad0
    g9 = v26;
    *(int32_t *)(v25 - 60) = v26;
    g4 = (float32_t)function_6d750(v26);
    g13++;
    int128_t v27 = __asm_movss(g10); // 0x76ae0
    int128_t v28 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x76ae4
    int128_t v29 = __asm_movss(*(int32_t *)(g5 - 48)); // 0x76ae9
    int128_t v30 = __asm_movss(*(int32_t *)(g5 - 44)); // 0x76aee
    int128_t v31 = __asm_mulss(v27, v29); // 0x76af3
    int128_t v32 = __asm_movss(*(int32_t *)(g5 - 40)); // 0x76af7
    int128_t v33 = __asm_addss_1661(v31, __asm_mulss(v28, v30)); // 0x76b00
    int128_t v34 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x76b04
    *(int32_t *)(g6 + 16) = __asm_movss_1646(v29);
    *(int32_t *)(g6 + 20) = __asm_movss_1646(v30);
    int128_t v35 = __asm_movss(*(int32_t *)(g5 - 36)); // 0x76b13
    int128_t v36 = __asm_mulss(v34, v32); // 0x76b18
    *(int32_t *)(g6 + 24) = __asm_movss_1646(v32);
    int128_t v37 = __asm_movss(*(int32_t *)(g5 - 32)); // 0x76b21
    int128_t v38 = __asm_movss(*(int32_t *)(g5 - 28)); // 0x76b26
    *(int32_t *)(g6 + 28) = __asm_movss_1646(__asm_addss_1661(v33, v36));
    int128_t v39 = __asm_movss(g10); // 0x76b34
    int128_t v40 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x76b38
    int128_t v41 = __asm_mulss(v39, v35); // 0x76b3d
    int128_t v42 = __asm_addss_1661(v41, __asm_mulss(v40, v37)); // 0x76b45
    int128_t v43 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x76b49
    *(int32_t *)g6 = __asm_movss_1646(v35);
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v37);
    int128_t v44 = __asm_mulss(v43, v38); // 0x76b57
    *(int32_t *)(g6 + 8) = __asm_movss_1646(v38);
    *(int32_t *)(g6 + 12) = __asm_movss_1646(__asm_addss_1661(v42, v44));
    int32_t v45 = g5; // 0x76b69
    g4 = *(int32_t *)(v45 - 64);
    int128_t v46 = __asm_movss(*(int32_t *)(v45 - 104)); // 0x76b6c
    int128_t v47 = __asm_movss(g8); // 0x76b71
    int128_t v48 = __asm_movss(*(int32_t *)(g8 + 4)); // 0x76b75
    int128_t v49 = __asm_movss(*(int32_t *)g4); // 0x76b7a
    int128_t v50 = __asm_mulss(v47, v46); // 0x76b7e
    int128_t v51 = __asm_movss(*(int32_t *)(g8 + 8)); // 0x76b82
    int128_t v52 = __asm_mulss(v48, v46); // 0x76b87
    int128_t v53 = __asm_movss(*(int32_t *)(g5 - 88)); // 0x76b8b
    int128_t v54 = __asm_mulss(v51, v46); // 0x76b90
    int128_t v55 = __asm_movaps(v49); // 0x76b94
    int128_t v56 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x76b97
    int128_t v57 = __asm_mulss(v55, v53); // 0x76b9c
    int128_t v58 = __asm_addss_1661(v50, v49); // 0x76ba0
    int128_t v59 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x76ba4
    int128_t v60 = __asm_addss_1661(v52, v56); // 0x76ba9
    *(int32_t *)(g5 - 48) = __asm_movss_1646(v58);
    int128_t v61 = __asm_addss_1661(v54, v59); // 0x76bb2
    int128_t v62 = __asm_addss_1661(v57, v58); // 0x76bb6
    int128_t v63 = __asm_movaps(v56); // 0x76bba
    *(int32_t *)(g5 - 44) = __asm_movss_1646(v60);
    int128_t v64 = __asm_mulss(v63, v53); // 0x76bc2
    int128_t v65 = __asm_mulss(v53, v59); // 0x76bc6
    *(int32_t *)(g5 - 40) = __asm_movss_1646(v61);
    *(int32_t *)(g5 - 36) = __asm_movss_1646(v62);
    int128_t v66 = __asm_addss_1661(v64, v60); // 0x76bd4
    int128_t v67 = __asm_addss_1661(v65, v61); // 0x76bd8
    *(int32_t *)(g5 - 32) = __asm_movss_1646(v66);
    g7 = *(int32_t *)(g5 - 108);
    *(int32_t *)(g5 - 28) = __asm_movss_1646(v67);
    g4 = (float32_t)function_6d750(g7);
    g13++;
    int32_t v68 = *(int32_t *)(g5 - 60); // 0x76bf3
    g9 = v68;
    g4 = (float32_t)function_6d750(v68);
    int128_t v69 = __asm_movss(g10); // 0x76c00
    int128_t v70 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x76c04
    int128_t v71 = __asm_movss(*(int32_t *)(g5 - 48)); // 0x76c09
    int128_t v72 = __asm_movss(*(int32_t *)(g5 - 44)); // 0x76c0e
    int128_t v73 = __asm_mulss(v69, v71); // 0x76c13
    int128_t v74 = __asm_movss(*(int32_t *)(g5 - 40)); // 0x76c17
    int128_t v75 = __asm_addss_1661(v73, __asm_mulss(v70, v72)); // 0x76c20
    int128_t v76 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x76c24
    *(int32_t *)(g6 + 48) = __asm_movss_1646(v71);
    *(int32_t *)(g6 + 52) = __asm_movss_1646(v72);
    int128_t v77 = __asm_movss(*(int32_t *)(g5 - 36)); // 0x76c33
    int128_t v78 = __asm_mulss(v76, v74); // 0x76c38
    *(int32_t *)(g6 + 56) = __asm_movss_1646(v74);
    int128_t v79 = __asm_movss(*(int32_t *)(g5 - 32)); // 0x76c41
    int128_t v80 = __asm_movss(*(int32_t *)(g5 - 28)); // 0x76c46
    *(int32_t *)(g6 + 60) = __asm_movss_1646(__asm_addss_1661(v75, v78));
    int128_t v81 = __asm_movss(g10); // 0x76c54
    int128_t v82 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x76c58
    int128_t v83 = __asm_mulss(v81, v77); // 0x76c5d
    int128_t v84 = __asm_addss_1661(v83, __asm_mulss(v82, v79)); // 0x76c65
    int128_t v85 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x76c69
    *(int32_t *)(g6 + 32) = __asm_movss_1646(v77);
    *(int32_t *)(g6 + 36) = __asm_movss_1646(v79);
    int128_t v86 = __asm_mulss(v85, v80); // 0x76c78
    *(int32_t *)(g6 + 40) = __asm_movss_1646(v80);
    *(int32_t *)(g6 + 44) = __asm_movss_1646(__asm_addss_1661(v84, v86));
    return g4;
}

// Address range: 0x76ca0 - 0x76e31
int32_t function_76ca0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11) {
    int32_t v1 = g8; // 0x76ca3
    int32_t v2 = g10; // 0x76ca4
    g9 = a1;
    int32_t v3 = g6; // 0x76ca8
    g6 = a2;
    g4 = a11;
    int128_t v4 = __asm_movss(a10); // 0x76caf
    int128_t v5 = __asm_movss(*(int32_t *)g9); // 0x76cb4
    int128_t v6 = __asm_movss(*(int32_t *)g6); // 0x76cb8
    int128_t v7 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x76cbc
    int128_t v8 = __asm_mulss(v5, v6); // 0x76cc1
    g10 = a3;
    int128_t v9 = __asm_mulss_1654(v7, *(int32_t *)(g6 + 4)); // 0x76cc8
    int128_t v10 = __asm_movss(a6); // 0x76ccd
    g7 = a4;
    int128_t v11 = __asm_movss(a8); // 0x76cd5
    int128_t v12 = __asm_addss_1661(v8, v9); // 0x76cda
    int128_t v13 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x76cde
    int128_t v14 = __asm_mulss_1654(v13, *(int32_t *)(g6 + 8)); // 0x76ce3
    *(int32_t *)(g4 + 64) = __asm_movss_1646(v6);
    g8 = *(int32_t *)(g6 + 4);
    int128_t v15 = __asm_addss_1661(v12, v14); // 0x76cf0
    int128_t v16 = __asm_movss(a9); // 0x76cf4
    *(int32_t *)(g4 + 68) = g8;
    g8 = *(int32_t *)(g6 + 8);
    *(int32_t *)(g4 + 76) = __asm_movss_1646(__asm_addss_1661(v16, v15));
    int128_t v17 = __asm_movss((int32_t)g233); // 0x76d08
    *(int32_t *)(g4 + 72) = g8;
    int128_t v18 = __asm_subss(__asm_xorps(v4, v17), v15); // 0x76d16
    int128_t v19 = __asm_movss(*(int32_t *)(g6 + 8)); // 0x76d1a
    int128_t v20 = __asm_xorps(v10, v17); // 0x76d1f
    int128_t v21 = __asm_xorps(v11, v17); // 0x76d22
    int128_t v22 = __asm_movss(*(int32_t *)(g6 + 4)); // 0x76d25
    int128_t v23 = __asm_movss(*(int32_t *)g6); // 0x76d2a
    int128_t v24 = __asm_xorps(v19, v17); // 0x76d2e
    *(int32_t *)(g4 + 92) = __asm_movss_1646(v18);
    *(int32_t *)(g4 + 88) = __asm_movss_1646(v24);
    int128_t v25 = __asm_xorps(v22, v17); // 0x76d3b
    int128_t v26 = __asm_xorps(v23, v17); // 0x76d3e
    *(int32_t *)(g4 + 84) = __asm_movss_1646(v25);
    *(int32_t *)(g4 + 80) = __asm_movss_1646(v26);
    int128_t v27 = __asm_movss(*(int32_t *)g10); // 0x76d4b
    int128_t v28 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x76d4f
    int128_t v29 = __asm_movss(*(int32_t *)g9); // 0x76d54
    int128_t v30 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x76d58
    int128_t v31 = __asm_mulss(v29, v27); // 0x76d5d
    int128_t v32 = __asm_movss(*(int32_t *)(g10 + 8)); // 0x76d61
    int128_t v33 = __asm_xorps(v27, v17); // 0x76d66
    int128_t v34 = __asm_mulss(v30, v28); // 0x76d69
    int128_t v35 = __asm_xorps(v28, v17); // 0x76d6d
    int128_t v36 = __asm_addss_1661(v31, v34); // 0x76d70
    int128_t v37 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x76d74
    *(int32_t *)g4 = __asm_movss_1646(v33);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v35);
    int128_t v38 = __asm_mulss(v37, v32); // 0x76d82
    *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_xorps(v32, v17));
    int128_t v39 = __asm_addss_1661(v36, v38); // 0x76d8e
    int128_t v40 = __asm_subss(v20, v39); // 0x76d92
    int128_t v41 = __asm_addss(v39, a5); // 0x76d96
    *(int32_t *)(g4 + 12) = __asm_movss_1646(v40);
    int32_t v42 = *(int32_t *)g10; // 0x76da0
    g6 = v42;
    *(int32_t *)(g4 + 16) = v42;
    int32_t v43 = *(int32_t *)(g10 + 4); // 0x76da5
    g6 = v43;
    *(int32_t *)(g4 + 20) = v43;
    g6 = *(int32_t *)(g10 + 8);
    *(int32_t *)(g4 + 28) = __asm_movss_1646(v41);
    *(int32_t *)(g4 + 24) = g6;
    int128_t v44 = __asm_movss(*(int32_t *)g7); // 0x76db6
    int128_t v45 = __asm_movss(*(int32_t *)g9); // 0x76dba
    int128_t v46 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x76dbe
    int128_t v47 = __asm_mulss(v45, v44); // 0x76dc3
    int128_t v48 = __asm_addss_1661(v47, __asm_mulss_1654(v46, *(int32_t *)(g7 + 4))); // 0x76dcc
    int128_t v49 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x76dd0
    int128_t v50 = __asm_mulss_1654(v49, *(int32_t *)(g7 + 8)); // 0x76dd5
    *(int32_t *)(g4 + 48) = __asm_movss_1646(v44);
    g9 = *(int32_t *)(g7 + 4);
    int128_t v51 = __asm_addss_1661(v48, v50); // 0x76de2
    int128_t v52 = __asm_movss(a7); // 0x76de6
    *(int32_t *)(g4 + 52) = g9;
    g9 = *(int32_t *)(g7 + 8);
    int128_t v53 = __asm_addss_1661(v52, v51); // 0x76df1
    int128_t v54 = __asm_subss(v21, v51); // 0x76df5
    *(int32_t *)(g4 + 56) = g9;
    *(int32_t *)(g4 + 60) = __asm_movss_1646(v53);
    int128_t v55 = __asm_movss(*(int32_t *)(g7 + 8)); // 0x76e01
    int128_t v56 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x76e06
    int128_t v57 = __asm_movss(*(int32_t *)g7); // 0x76e0b
    int128_t v58 = __asm_xorps(v55, v17); // 0x76e0f
    *(int32_t *)(g4 + 44) = __asm_movss_1646(v54);
    *(int32_t *)(g4 + 40) = __asm_movss_1646(v58);
    int128_t v59 = __asm_xorps(v56, v17); // 0x76e1c
    int128_t v60 = __asm_xorps(v57, v17); // 0x76e1f
    *(int32_t *)(g4 + 36) = __asm_movss_1646(v59);
    *(int32_t *)(g4 + 32) = __asm_movss_1646(v60);
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x76e40 - 0x76e9d
int32_t function_76e40(int32_t a1) {
    int128_t v1 = __asm_movaps(g245); // 0x76e41
    g4 = a1;
    int128_t v2 = __asm_movaps(*(int128_t *)a1); // 0x76e4d
    int128_t v3 = __asm_movaps(*(int128_t *)(g4 + 16)); // 0x76e50
    int128_t v4 = __asm_movaps(v2); // 0x76e54
    int128_t v5 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x76e57
    *(int128_t *)(g4 + 64) = (int128_t)__asm_movaps_1663(__asm_cmpltps(v4, v1));
    int128_t v6 = __asm_movaps(v3); // 0x76e63
    *(int128_t *)(g4 + 80) = (int128_t)__asm_movaps_1663(__asm_cmpltps(v6, v1));
    int128_t v7 = __asm_movaps(v5); // 0x76e6e
    *(int128_t *)(g4 + 96) = (int128_t)__asm_movaps_1663(__asm_cmpltps(v7, v1));
    int128_t v8 = __asm_movaps(g241); // 0x76e79
    int128_t v9 = __asm_andps(v2, v8); // 0x76e80
    int128_t v10 = __asm_andps(v3, v8); // 0x76e83
    *(int128_t *)(g4 + 112) = (int128_t)__asm_movaps_1663(v9);
    *(int128_t *)(g4 + 128) = (int128_t)__asm_movaps_1663(v10);
    int32_t v11 = __asm_movaps_1663(__asm_andps(v8, v5)); // 0x76e94
    int32_t result = g4; // 0x76e94
    *(int128_t *)(result + 144) = (int128_t)v11;
    return result;
}

// Address range: 0x76ea0 - 0x76ed3
int32_t function_76ea0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x76ea3
    g4 = a1;
    g6 = a2;
    g7 = a3;
    int32_t v2 = 4 * a2; // 0x76ead
    g9 = v2;
    int32_t v3 = *(int32_t *)(v2 + a1); // 0x76eb4
    g6 = v3;
    *(int32_t *)a3 = v3;
    int32_t v4 = *(int32_t *)(g4 + 16 + g9); // 0x76eb9
    g6 = v4;
    *(int32_t *)(g7 + 4) = v4;
    int32_t v5 = *(int32_t *)(g4 + 32 + g9); // 0x76ec0
    g6 = v5;
    *(int32_t *)(g7 + 8) = v5;
    int32_t v6 = *(int32_t *)(g4 + 48 + g9); // 0x76ec7
    g9 = v6;
    g4 = a4;
    *(int32_t *)a4 = v6;
    g6 = v1;
    return g4;
}

// Address range: 0x76ee0 - 0x76f24
int32_t function_76ee0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x76ee0
    g7 = a3;
    int32_t v1 = g6; // 0x76ee9
    int32_t v2 = g10; // 0x76eec
    g4 = a1;
    g6 = a2;
    int32_t v3 = *(int32_t *)a3; // 0x76ef5
    g10 = v3;
    int32_t v4 = 4 * a2; // 0x76ef7
    g9 = v4;
    *(int32_t *)(v4 + a1) = v3;
    int32_t v5 = *(int32_t *)(g7 + 4); // 0x76f01
    g6 = v5;
    *(int32_t *)(g4 + 16 + g9) = v5;
    *(int32_t *)(g4 + 32 + g9) = *(int32_t *)(g7 + 8);
    g7 = a4;
    *(int32_t *)(g4 + 48 + g9) = a4;
    g6 = v1;
    g10 = v2;
    int32_t result = function_76e40((int32_t)&g870); // 0x76f1f
    g4 = result;
    return result;
}

// Address range: 0x76f30 - 0x76f8c
int32_t function_76f30(int32_t a1, int32_t a2) {
    // 0x76f30
    g9 = a2;
    g4 = a1;
    int128_t v1 = __asm_movups(*(int128_t *)a2); // 0x76f39
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v1);
    int128_t v2 = __asm_movaps(v1); // 0x76f3f
    int128_t v3 = __asm_movups(*(int128_t *)(g9 + 16)); // 0x76f42
    *(int128_t *)(g4 + 16) = (int128_t)__asm_movaps_1663(v3);
    int128_t v4 = __asm_unpckhps(v1, v3); // 0x76f4a
    int128_t v5 = __asm_unpcklps(v2, v3); // 0x76f4d
    int128_t v6 = __asm_movups(*(int128_t *)(g9 + 32)); // 0x76f50
    int128_t v7 = __asm_movaps(v5); // 0x76f54
    *(int128_t *)(g4 + 32) = (int128_t)__asm_movaps_1663(v6);
    int128_t v8 = __asm_movaps(v6); // 0x76f5b
    int128_t v9 = __asm_movups(*(int128_t *)(g9 + 48)); // 0x76f5e
    int128_t v10 = __asm_unpcklps(v8, v9); // 0x76f62
    int128_t v11 = __asm_movlhps(v7, v10); // 0x76f65
    int128_t v12 = __asm_unpckhps(v6, v9); // 0x76f68
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v11);
    int128_t v13 = __asm_movaps(v4); // 0x76f6e
    int128_t v14 = __asm_movhlps(v10, v5); // 0x76f71
    int128_t v15 = __asm_movlhps(v13, v12); // 0x76f74
    int128_t v16 = __asm_movhlps(v12, v4); // 0x76f77
    *(int128_t *)(g4 + 16) = (int128_t)__asm_movaps_1663(v14);
    *(int128_t *)(g4 + 32) = (int128_t)__asm_movaps_1663(v15);
    *(int128_t *)(g4 + 48) = (int128_t)__asm_movaps_1663(v16);
    int32_t result = function_76e40((int32_t)&g870); // 0x76f87
    g4 = result;
    return result;
}

// Address range: 0x76f90 - 0x76fe3
int32_t function_76f90(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movaps(g245); // 0x76f91
    g9 = a2;
    g4 = a1;
    int128_t v2 = __asm_unpcklps(__asm_movaps(v1), v1); // 0x76fa3
    int128_t v3 = __asm_unpckhps(v1, v1); // 0x76fa6
    int128_t v4 = __asm_movups(*(int128_t *)g9); // 0x76fa9
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v4);
    int128_t v5 = __asm_movaps(v4); // 0x76faf
    int128_t v6 = __asm_movups(*(int128_t *)(g9 + 16)); // 0x76fb2
    int128_t v7 = __asm_unpcklps(v5, v6); // 0x76fb6
    int128_t v8 = __asm_unpckhps(v4, v6); // 0x76fb9
    int128_t v9 = __asm_movlhps(__asm_movaps(v7), v2); // 0x76fbf
    int128_t v10 = __asm_movhlps(v2, v7); // 0x76fc2
    int128_t v11 = __asm_movlhps(__asm_movaps(v8), v3); // 0x76fc8
    int128_t v12 = __asm_movhlps(v3, v8); // 0x76fcb
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v9);
    *(int128_t *)(g4 + 16) = (int128_t)__asm_movaps_1663(v10);
    *(int128_t *)(g4 + 32) = (int128_t)__asm_movaps_1663(v11);
    *(int128_t *)(g4 + 48) = (int128_t)__asm_movaps_1663(v12);
    int32_t result = function_76e40((int32_t)&g870); // 0x76fde
    g4 = result;
    return result;
}

// Address range: 0x76ff0 - 0x7703d
int32_t function_76ff0(int32_t a1, int32_t a2) {
    // 0x76ff0
    g9 = a1;
    g4 = a2;
    int128_t v1 = __asm_movaps(*(int128_t *)a1); // 0x76ff9
    int128_t v2 = __asm_movaps(*(int128_t *)(g9 + 32)); // 0x76ffc
    int128_t v3 = __asm_movaps(*(int128_t *)(g9 + 48)); // 0x77000
    int128_t v4 = __asm_movaps(v1); // 0x77004
    int128_t v5 = __asm_movaps(*(int128_t *)(g9 + 16)); // 0x77007
    int128_t v6 = __asm_unpcklps(__asm_movaps(v2), v3); // 0x7700e
    int128_t v7 = __asm_unpckhps(v2, v3); // 0x77011
    int128_t v8 = __asm_unpcklps(v4, v5); // 0x77014
    int128_t v9 = __asm_movaps(v8); // 0x77017
    int128_t v10 = __asm_unpckhps(v1, v5); // 0x7701a
    int128_t v11 = __asm_movlhps(v9, v6); // 0x7701d
    int128_t v12 = __asm_movhlps(v6, v8); // 0x77020
    int128_t v13 = __asm_movlhps(__asm_movaps(v10), v7); // 0x77026
    int128_t v14 = __asm_movhlps(v7, v10); // 0x77029
    __asm_movups_1664(*(int128_t *)g4, v11);
    __asm_movups_1664(*(int128_t *)(g4 + 16), v12);
    __asm_movups_1664(*(int128_t *)(g4 + 32), v13);
    __asm_movups_1664(*(int128_t *)(g4 + 48), v14);
    return g4;
}

// Address range: 0x77040 - 0x7706a
int32_t function_77040(int32_t a1, int32_t a2) {
    // 0x77040
    g4 = a1;
    g9 = a2;
    int128_t v1 = __asm_movaps(*(int128_t *)a1); // 0x77049
    int128_t v2 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x7704c
    int128_t v3 = __asm_unpcklps(v1, *(int128_t *)(g4 + 16)); // 0x77050
    int128_t v4 = __asm_movaps(v3); // 0x77054
    int128_t v5 = __asm_unpcklps(v2, *(int128_t *)(g4 + 48)); // 0x77057
    int128_t v6 = __asm_movlhps(v4, v5); // 0x7705b
    int128_t v7 = __asm_movhlps(v5, v3); // 0x7705e
    __asm_movups_1664(*(int128_t *)g9, v6);
    __asm_movups_1664(*(int128_t *)(g9 + 16), v7);
    return g4;
}

// Address range: 0x77070 - 0x770cd
int32_t function_77070(int32_t a1) {
    // 0x77070
    g9 = &g33;
    int32_t v1 = g8; // 0x77078
    g8 = a1;
    int32_t v2; // 0x770b3
    int32_t v3; // 0x770b6
    if (a1 % 2 != 0) {
        // 0x770b0
        *(char *)a1 = 0;
        v2 = g8 + 1;
        g8 = v2;
        v3 = g9 & -256 | 63;
        g9 = v3;
        if ((v2 & 2) == 0) {
            goto lab_0x7708c;
        } else {
            goto lab_0x770c0;
        }
    } else {
        // 0x77084
        if ((a1 & 2) != 0) {
            v2 = a1;
            goto lab_0x770c0;
        } else {
            v2 = a1;
            v3 = &g33;
            goto lab_0x7708c;
        }
    }
  lab_0x7708c:
    // 0x7708c
    g4 = 0;
    int32_t v4 = v3 / 4; // 0x77090
    g7 = v4;
    __asm_rep_stosd_memset((char *)v2, 0, v4);
    bool v5; // df
    int32_t v6 = (v5 ? -4 : 4) * v4 + v2; // 0x77096
    g8 = v6;
    g7 = 0;
    int32_t v7; // 0x7709f
    if ((v3 & 2) != 0) {
        // 0x7709a
        *(int16_t *)v6 = 0;
        v7 = g8 + 2;
        g8 = v7;
    } else {
        v7 = v6;
    }
    int32_t v8 = g9 % 2; // 0x770a2
    g9 = v8;
    if (v8 != 0) {
        // 0x770a7
        *(char *)v7 = 0;
    }
    // 0x770aa
    g8 = v1;
    return 0;
  lab_0x770c0:
    // 0x770c0
    *(int16_t *)v2 = 0;
    int32_t v9 = g9 - 2; // 0x770c5
    g9 = v9;
    int32_t v10 = g8 + 2; // 0x770c8
    g8 = v10;
    v2 = v10;
    v3 = v9;
    goto lab_0x7708c;
}

// Address range: 0x770d0 - 0x77101
int32_t function_770d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x770d3
    g4 = a2;
    g9 = a1;
    g7 = a3;
    g6 = a4;
    if (a2 > 3) {
        // 0x770e5
        g4 = a2 - 4;
        g9 = a1 + 160;
    }
    // 0x770fa
    g6 = v1;
    int32_t v2; // ebp
    g5 = v2;
    int32_t result = function_76ee0(v1, v2, (int32_t)&g870, (int32_t)&g870); // 0x770fc
    g4 = result;
    return result;
}

// Address range: 0x77110 - 0x77141
int32_t function_77110(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x77113
    g4 = a2;
    g9 = a1;
    g7 = a3;
    g6 = a4;
    if (a2 > 3) {
        // 0x77125
        g4 = a2 - 4;
        g9 = a1 + 160;
    }
    // 0x7713a
    g6 = v1;
    int32_t v2; // ebp
    g5 = v2;
    int32_t result = function_76ea0(v1, v2, (int32_t)&g870, (int32_t)&g870); // 0x7713c
    g4 = result;
    return result;
}

// Address range: 0x77150 - 0x7718b
int32_t function_77150(int32_t a1, int32_t * a2) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g6; // 0x77156
    int32_t v3 = g10; // 0x7715c
    g6 = a1 + 160;
    g10 = v1 + 64;
    g4 = function_76f30(a1, v1);
    int32_t v4 = g10; // 0x77177
    g10 = v3;
    int32_t v5 = g6; // 0x7717d
    g6 = v2;
    int32_t result = function_76f90(v5, v4); // 0x77186
    g4 = result;
    return result;
}

// Address range: 0x77190 - 0x7723e
int32_t function_77190(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    int32_t v1; // ebp
    g5 = &v1;
    g9 = a2;
    int32_t v2; // bp-40
    int32_t v3 = &v2; // 0x7719c
    g4 = v3;
    int32_t v4 = g10; // 0x7719f
    int32_t v5 = g8; // 0x771a2
    int32_t v6; // bp-64
    g10 = &v6;
    int32_t v7; // bp-52
    g8 = &v7;
    int32_t v8 = g6; // 0x771b5
    int32_t v9; // bp-160
    g6 = &v9;
    g4 = function_6ef60(a2, &v6, &v7, &v2);
    g9 = a6;
    int128_t v10 = __asm_movss(a5); // 0x771d1
    function_76830(__asm_movss_1646(v10), g9);
    g9 = a4;
    g4 = v3;
    g9 = a3;
    g4 = a1;
    __asm_movss_1646(__asm_movss(a5));
    function_76940(g4);
    g4 = a7;
    int32_t result = function_77150(a7, &v9); // 0x7722c
    g4 = result;
    g6 = v8;
    g10 = v4;
    g8 = v5;
    return result;
}

// Address range: 0x77240 - 0x77295
int32_t function_77240(int32_t a1, int32_t a2) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g6; // 0x77246
    g6 = a1;
    int32_t v3 = g10; // 0x7724c
    g10 = a2;
    g4 = function_76ff0(a1, a2);
    int128_t v4 = __asm_movaps(*(int128_t *)(g6 + 160)); // 0x7725e
    int128_t v5 = __asm_movaps(*(int128_t *)(g6 + 192)); // 0x77265
    int128_t v6 = __asm_unpcklps(v4, *(int128_t *)(g6 + 176)); // 0x7726c
    int128_t v7 = __asm_movaps(v6); // 0x77273
    int128_t v8 = __asm_unpcklps(v5, *(int128_t *)(g6 + 208)); // 0x77276
    int128_t v9 = __asm_movlhps(v7, v8); // 0x7727d
    int128_t v10 = __asm_movhlps(v8, v6); // 0x77280
    __asm_movups_1664(*(int128_t *)(g10 + 64), v9);
    __asm_movups_1664(*(int128_t *)(g10 + 80), v10);
    g6 = v2;
    g10 = v3;
    return g4;
}

// Address range: 0x772a0 - 0x7734f
int32_t function_772a0(int32_t a1, int32_t a2, int32_t a3) {
    g9 = 0;
    g4 = a2;
    int128_t v1 = __asm_movups(*(int128_t *)a2); // 0x772ab
    g4 = a3;
    int128_t v2 = __asm_movaps(v1); // 0x772b1
    int128_t v3 = __asm_movaps(v1); // 0x772b4
    int128_t v4 = __asm_shufps(v2, v1, 0); // 0x772b7
    int128_t v5 = __asm_shufps(v3, v1, 85); // 0x772bb
    int128_t v6 = __asm_shufps(v1, v1, 170); // 0x772bf
    int128_t v7 = __asm_movups(*(int128_t *)g4); // 0x772c3
    g4 = a1;
    int128_t v8 = __asm_movaps(v7); // 0x772c9
    int128_t v9 = __asm_shufps(__asm_movaps(v7), v7, 85); // 0x772cf
    int128_t v10 = __asm_shufps(v8, v7, 0); // 0x772d3
    int128_t v11 = __asm_movaps_1663(v9); // 0x772d7
    int128_t v12 = __asm_shufps(v7, v7, 170); // 0x772db
    int128_t v13 = __asm_movaps_1663(v12); // bp-44
    int32_t v14 = g4; // 0x772e3
    while (true) {
        int128_t v15 = __asm_movaps(*(int128_t *)(v14 + 64)); // 0x772e3
        int128_t v16 = __asm_movaps(v15); // 0x772e7
        int128_t v17 = __asm_andps(v15, v4); // 0x772ea
        int128_t v18 = __asm_orps(v17, __asm_andnps(v16, v10)); // 0x772f0
        int128_t v19 = __asm_movaps(*(int128_t *)(g4 + 80)); // 0x772f3
        int128_t v20 = __asm_mulps(v18, *(int128_t *)g4); // 0x772f7
        int128_t v21 = __asm_movaps(v19); // 0x772fa
        int128_t v22 = __asm_andps(v19, v5); // 0x772fd
        int128_t v23 = __asm_orps(v22, __asm_andnps(v21, v11)); // 0x77304
        int128_t v24 = __asm_movaps(*(int128_t *)(g4 + 96)); // 0x77307
        int128_t v25 = __asm_mulps(v23, *(int128_t *)(g4 + 16)); // 0x7730b
        int128_t v26 = __asm_movaps(v24); // 0x7730f
        int128_t v27 = __asm_andps(v24, v6); // 0x77312
        int128_t v28 = __asm_orps(v27, __asm_andnps(v26, v13)); // 0x77319
        int128_t v29 = __asm_mulps(v28, *(int128_t *)(g4 + 32)); // 0x7731c
        int128_t v30 = __asm_addps(v20, __asm_addps(v25, v29)); // 0x77323
        int32_t v31 = __asm_movmskps(__asm_cmpltps(v30, *(int128_t *)(g4 + 48))); // 0x7732b
        g7 = v31;
        if (v31 != 0) {
            // break -> 0x77348
            break;
        }
        int32_t v32 = g9; // 0x77332
        g9 = v32 + 1;
        int32_t v33 = g4 + 160; // 0x77335
        g4 = v33;
        if (v32 == 1) {
            // 0x7733f
            g4 = 0;
            return 0;
        }
        v14 = v33;
    }
    // 0x77348
    g4 = 1;
    return 1;
}

// Address range: 0x77350 - 0x773ff
int32_t function_77350(int32_t a1, int32_t a2, int32_t a3) {
    g9 = 0;
    g4 = a2;
    int128_t v1 = __asm_movaps(*(int128_t *)a2); // 0x7735b
    g4 = a3;
    int128_t v2 = __asm_movaps(v1); // 0x77361
    int128_t v3 = __asm_movaps(v1); // 0x77364
    int128_t v4 = __asm_shufps(v2, v1, 0); // 0x77367
    int128_t v5 = __asm_shufps(v3, v1, 85); // 0x7736b
    int128_t v6 = __asm_shufps(v1, v1, 170); // 0x7736f
    int128_t v7 = __asm_movaps(*(int128_t *)g4); // 0x77373
    g4 = a1;
    int128_t v8 = __asm_movaps(v7); // 0x77379
    int128_t v9 = __asm_shufps(__asm_movaps(v7), v7, 85); // 0x7737f
    int128_t v10 = __asm_shufps(v8, v7, 0); // 0x77383
    int128_t v11 = __asm_movaps_1663(v9); // 0x77387
    int128_t v12 = __asm_shufps(v7, v7, 170); // 0x7738b
    int128_t v13 = __asm_movaps_1663(v12); // bp-44
    int32_t v14 = g4; // 0x77393
    while (true) {
        int128_t v15 = __asm_movaps(*(int128_t *)(v14 + 64)); // 0x77393
        int128_t v16 = __asm_movaps(v15); // 0x77397
        int128_t v17 = __asm_andps(v15, v4); // 0x7739a
        int128_t v18 = __asm_orps(v17, __asm_andnps(v16, v10)); // 0x773a0
        int128_t v19 = __asm_movaps(*(int128_t *)(g4 + 80)); // 0x773a3
        int128_t v20 = __asm_mulps(v18, *(int128_t *)g4); // 0x773a7
        int128_t v21 = __asm_movaps(v19); // 0x773aa
        int128_t v22 = __asm_andps(v19, v5); // 0x773ad
        int128_t v23 = __asm_orps(v22, __asm_andnps(v21, v11)); // 0x773b4
        int128_t v24 = __asm_movaps(*(int128_t *)(g4 + 96)); // 0x773b7
        int128_t v25 = __asm_mulps(v23, *(int128_t *)(g4 + 16)); // 0x773bb
        int128_t v26 = __asm_movaps(v24); // 0x773bf
        int128_t v27 = __asm_andps(v24, v6); // 0x773c2
        int128_t v28 = __asm_orps(v27, __asm_andnps(v26, v13)); // 0x773c9
        int128_t v29 = __asm_mulps(v28, *(int128_t *)(g4 + 32)); // 0x773cc
        int128_t v30 = __asm_addps(v20, __asm_addps(v25, v29)); // 0x773d3
        int32_t v31 = __asm_movmskps(__asm_cmpltps(v30, *(int128_t *)(g4 + 48))); // 0x773db
        g7 = v31;
        if (v31 != 0) {
            // break -> 0x773f8
            break;
        }
        int32_t v32 = g9; // 0x773e2
        g9 = v32 + 1;
        int32_t v33 = g4 + 160; // 0x773e5
        g4 = v33;
        if (v32 == 1) {
            // 0x773ef
            g4 = 0;
            return 0;
        }
        v14 = v33;
    }
    // 0x773f8
    g4 = 1;
    return 1;
}

// Address range: 0x77400 - 0x774a7
int32_t function_77400(int32_t a1, int32_t a2, int32_t a3) {
    g9 = 0;
    g4 = a2;
    int128_t v1 = __asm_movups(*(int128_t *)a2); // 0x7740b
    g4 = a3;
    int128_t v2 = __asm_movaps(v1); // 0x77411
    int128_t v3 = __asm_movaps(v1); // 0x77414
    int128_t v4 = __asm_shufps(v2, v1, 0); // 0x77417
    int128_t v5 = __asm_shufps(v3, v1, 85); // 0x7741b
    int128_t v6 = __asm_shufps(v1, v1, 170); // 0x7741f
    int128_t v7 = __asm_movups(*(int128_t *)g4); // 0x77423
    g4 = a1;
    int128_t v8 = __asm_movaps(v7); // 0x77429
    int128_t v9 = __asm_shufps(__asm_movaps(v7), v7, 85); // 0x7742f
    int128_t v10 = __asm_shufps(v8, v7, 0); // 0x77433
    int128_t v11 = __asm_movaps_1663(v9); // 0x77437
    int128_t v12 = __asm_shufps(v7, v7, 170); // 0x7743b
    int128_t v13 = __asm_movaps_1663(v12); // bp-44
    int32_t v14 = g4; // 0x77443
    while (true) {
        int128_t v15 = __asm_movaps(*(int128_t *)(v14 + 112)); // 0x77443
        int128_t v16 = __asm_movaps(*(int128_t *)g4); // 0x77447
        int128_t v17 = __asm_mulps(v15, v10); // 0x7744a
        int128_t v18 = __asm_movaps(v11); // 0x7744d
        int128_t v19 = __asm_mulps(v16, v4); // 0x77451
        int128_t v20 = __asm_movaps(v13); // 0x77454
        int128_t v21 = __asm_mulps(v18, *(int128_t *)(g4 + 128)); // 0x77458
        int128_t v22 = __asm_mulps(v20, *(int128_t *)(g4 + 144)); // 0x7745f
        int128_t v23 = __asm_addps(v19, v17); // 0x77466
        int128_t v24 = __asm_movaps(*(int128_t *)(g4 + 16)); // 0x77469
        int128_t v25 = __asm_addps(__asm_mulps(v24, v5), v21); // 0x77470
        int128_t v26 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x77473
        int128_t v27 = __asm_addps(__asm_mulps(v26, v6), v22); // 0x7747a
        int128_t v28 = __asm_addps(v23, __asm_addps(v25, v27)); // 0x77480
        int32_t v29 = __asm_movmskps(__asm_cmpltps(v28, *(int128_t *)(g4 + 48))); // 0x77488
        g7 = v29;
        if (v29 != 0) {
            // break -> 0x774a0
            break;
        }
        int32_t v30 = g9; // 0x7748f
        g9 = v30 + 1;
        int32_t v31 = g4 + 160; // 0x77492
        g4 = v31;
        if (v30 == 1) {
            // 0x7749c
            g4 = 0;
            return 0;
        }
        v14 = v31;
    }
    // 0x774a0
    g4 = 1;
    return 1;
}

// Address range: 0x774b0 - 0x77557
int32_t function_774b0(int32_t a1, int32_t a2, int32_t a3) {
    g9 = 0;
    g4 = a2;
    int128_t v1 = __asm_movaps(*(int128_t *)a2); // 0x774bb
    g4 = a3;
    int128_t v2 = __asm_movaps(v1); // 0x774c1
    int128_t v3 = __asm_movaps(v1); // 0x774c4
    int128_t v4 = __asm_shufps(v2, v1, 0); // 0x774c7
    int128_t v5 = __asm_shufps(v3, v1, 85); // 0x774cb
    int128_t v6 = __asm_shufps(v1, v1, 170); // 0x774cf
    int128_t v7 = __asm_movaps(*(int128_t *)g4); // 0x774d3
    g4 = a1;
    int128_t v8 = __asm_movaps(v7); // 0x774d9
    int128_t v9 = __asm_shufps(__asm_movaps(v7), v7, 85); // 0x774df
    int128_t v10 = __asm_shufps(v8, v7, 0); // 0x774e3
    int128_t v11 = __asm_movaps_1663(v9); // 0x774e7
    int128_t v12 = __asm_shufps(v7, v7, 170); // 0x774eb
    int128_t v13 = __asm_movaps_1663(v12); // bp-44
    int32_t v14 = g4; // 0x774f3
    while (true) {
        int128_t v15 = __asm_movaps(*(int128_t *)(v14 + 112)); // 0x774f3
        int128_t v16 = __asm_movaps(*(int128_t *)g4); // 0x774f7
        int128_t v17 = __asm_mulps(v15, v10); // 0x774fa
        int128_t v18 = __asm_movaps(v11); // 0x774fd
        int128_t v19 = __asm_mulps(v16, v4); // 0x77501
        int128_t v20 = __asm_movaps(v13); // 0x77504
        int128_t v21 = __asm_mulps(v18, *(int128_t *)(g4 + 128)); // 0x77508
        int128_t v22 = __asm_mulps(v20, *(int128_t *)(g4 + 144)); // 0x7750f
        int128_t v23 = __asm_addps(v19, v17); // 0x77516
        int128_t v24 = __asm_movaps(*(int128_t *)(g4 + 16)); // 0x77519
        int128_t v25 = __asm_addps(__asm_mulps(v24, v5), v21); // 0x77520
        int128_t v26 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x77523
        int128_t v27 = __asm_addps(__asm_mulps(v26, v6), v22); // 0x7752a
        int128_t v28 = __asm_addps(v23, __asm_addps(v25, v27)); // 0x77530
        int32_t v29 = __asm_movmskps(__asm_cmpltps(v28, *(int128_t *)(g4 + 48))); // 0x77538
        g7 = v29;
        if (v29 != 0) {
            // break -> 0x77550
            break;
        }
        int32_t v30 = g9; // 0x7753f
        g9 = v30 + 1;
        int32_t v31 = g4 + 160; // 0x77542
        g4 = v31;
        if (v30 == 1) {
            // 0x7754c
            g4 = 0;
            return 0;
        }
        v14 = v31;
    }
    // 0x77550
    g4 = 1;
    return 1;
}

// Address range: 0x77560 - 0x77814
int32_t function_77560(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = g8; // 0x77563
    int32_t v2 = g10; // 0x77564
    int32_t v3 = g6; // bp-16
    bool v4 = &v3 < (int32_t *)24; // cf
    bool v5 = &v3 == (int32_t *)24; // zf
    g4 = a7;
    g6 = a8;
    g8 = a2;
    g10 = a4;
    *(int32_t *)a7 = 0;
    g7 = a5;
    *(int32_t *)(g4 + 4) = 0;
    g9 = a6;
    *(int32_t *)(g4 + 8) = 0;
    *(int32_t *)g6 = 0;
    *(int32_t *)(g6 + 4) = 0;
    *(int32_t *)(g6 + 8) = 0;
    int128_t v6 = __asm_movss(*(int32_t *)g8); // 0x775a3
    g8 = a1;
    int128_t v7 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x775aa
    int32_t v8 = __asm_movss_1646(v6); // 0x775af
    int128_t v9 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x775b4
    int128_t v10 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x775b9
    int128_t v11 = __asm_movss(*(int32_t *)g8); // 0x775be
    int128_t v12 = __asm_subss(v9, v7); // 0x775c2
    g8 = a3;
    int128_t v13 = __asm_subss(v10, v7); // 0x775c9
    int128_t v14 = __asm_movss(*(int32_t *)g10); // 0x775cd
    int128_t v15 = __asm_movss(*(int32_t *)g7); // 0x775d1
    int128_t v16 = __asm_movaps(v12); // 0x775d5
    int128_t v17 = __asm_movss(*(int32_t *)g9); // 0x775d8
    int128_t v18 = __asm_subss(v15, v14); // 0x775dc
    int128_t v19 = __asm_subss(v17, v14); // 0x775e0
    int32_t v20 = __asm_movss_1646(__asm_movss(*(int32_t *)g8)); // 0x775e8
    int128_t v21 = __asm_movaps(v18); // 0x775ed
    int128_t v22 = __asm_mulss(v16, v19); // 0x775f0
    int128_t v23 = __asm_subss(__asm_mulss(v21, v13), v22); // 0x775f8
    int128_t v24 = __asm_unpcklps(v23, v23); // 0x775fc
    int128_t v25 = __asm_cvtps2pd(v24); // 0x775ff
    __asm_ucomisd_1652(__asm_andpd(v25, g127), 0x3d719799812dea11);
    if (!v4 && !v5) {
        int128_t v26 = __asm_movss(v8); // 0x77618
        int128_t v27 = __asm_movss(v20); // 0x7761d
        int128_t v28 = __asm_subss(v26, v11); // 0x77622
        g8 = a2;
        int128_t v29 = __asm_subss(v27, v11); // 0x77629
        int128_t v30 = __asm_mulss(v13, v28); // 0x7762d
        int128_t v31 = __asm_mulss(v12, v29); // 0x77631
        int128_t v32 = __asm_mulss(v18, v29); // 0x77635
        int128_t v33 = __asm_mulss(v28, v19); // 0x77639
        int128_t v34 = __asm_subss(v31, v30); // 0x7763d
        int128_t v35 = __asm_movss((int32_t)g233); // 0x77641
        int128_t v36 = __asm_subss(v33, v32); // 0x77649
        int128_t v37 = __asm_divss(__asm_xorps(v34, v35), v24); // 0x77650
        int128_t v38 = __asm_divss(__asm_xorps(v36, v35), v24); // 0x77657
        *(int32_t *)g4 = __asm_movss_1646(__asm_addss(v37, *(int32_t *)g4));
        *(int32_t *)g6 = __asm_movss_1646(__asm_addss(v38, *(int32_t *)g6));
        int128_t v39 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x7766b
        int128_t v40 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x77670
        int128_t v41 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x77675
        int128_t v42 = __asm_movss(*(int32_t *)g10); // 0x7767a
        int128_t v43 = __asm_subss(v40, v39); // 0x7767e
        int128_t v44 = __asm_movss(*(int32_t *)g7); // 0x77682
        int128_t v45 = __asm_subss(v41, v39); // 0x77686
        int128_t v46 = __asm_movss(*(int32_t *)g9); // 0x7768a
        int128_t v47 = __asm_subss(v44, v42); // 0x7768e
        int128_t v48 = __asm_movaps(v43); // 0x77692
        int128_t v49 = __asm_movss(*(int32_t *)(g8 + 4)); // 0x77695
        int128_t v50 = __asm_subss(v46, v42); // 0x7769a
        g8 = a1;
        int32_t v51 = __asm_movss_1646(v49); // 0x776a1
        int128_t v52 = __asm_movaps(v47); // 0x776a6
        int128_t v53 = __asm_mulss(v48, v50); // 0x776a9
        int128_t v54 = __asm_mulss(v52, v45); // 0x776ad
        int32_t v55 = *(int32_t *)(g8 + 4); // 0x776b1
        g8 = a3;
        int32_t v56 = __asm_movss_1646(__asm_movss(v55)); // 0x776b9
        int128_t v57 = __asm_subss(v54, v53); // 0x776be
        int128_t v58 = __asm_movss(*(int32_t *)(g8 + 4)); // 0x776c2
        int128_t v59 = __asm_unpcklps(v57, v57); // 0x776c7
        int128_t v60 = __asm_cvtps2pd(v59); // 0x776ca
        __asm_ucomisd_1652(__asm_andpd(v60, g127), 0x3d719799812dea11);
        int32_t v61 = __asm_movss_1646(v58); // 0x776dd
        if (!v4 && !v5) {
            int128_t v62 = __asm_movss(v51); // 0x776e8
            int128_t v63 = __asm_movss(v61); // 0x776ed
            int128_t v64 = __asm_subss_1651(v62, v56); // 0x776f2
            int128_t v65 = __asm_subss_1651(v63, v56); // 0x776f7
            int128_t v66 = __asm_mulss(v45, v64); // 0x776fc
            int128_t v67 = __asm_mulss(v43, v65); // 0x77700
            int128_t v68 = __asm_mulss(v47, v65); // 0x77704
            int128_t v69 = __asm_mulss(v64, v50); // 0x77708
            int128_t v70 = __asm_subss(v67, v66); // 0x7770c
            int128_t v71 = __asm_subss(v69, v68); // 0x77710
            int128_t v72 = __asm_divss(__asm_xorps(v70, v35), v59); // 0x77717
            int128_t v73 = __asm_divss(__asm_xorps(v71, v35), v59); // 0x7771e
            *(int32_t *)(g4 + 4) = __asm_movss_1646(__asm_addss(v72, *(int32_t *)(g4 + 4)));
            *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_addss(v73, *(int32_t *)(g6 + 4)));
            int128_t v74 = __asm_movss(*(int32_t *)(g10 + 4)); // 0x77736
            int128_t v75 = __asm_movss(*(int32_t *)(g9 + 4)); // 0x7773b
            int128_t v76 = __asm_movss(*(int32_t *)(g7 + 4)); // 0x77740
            int128_t v77 = __asm_movss(*(int32_t *)g10); // 0x77745
            int128_t v78 = __asm_subss(v75, v74); // 0x77749
            int128_t v79 = __asm_movss(*(int32_t *)g7); // 0x7774d
            int128_t v80 = __asm_subss(v76, v74); // 0x77751
            int128_t v81 = __asm_movss(*(int32_t *)g9); // 0x77755
            int128_t v82 = __asm_subss(v79, v77); // 0x77759
            g9 = a2;
            int128_t v83 = __asm_subss(v81, v77); // 0x77760
            int128_t v84 = __asm_movaps(v80); // 0x77764
            int128_t v85 = __asm_movaps(v82); // 0x77767
            int128_t v86 = __asm_mulss(v84, v83); // 0x7776a
            int128_t v87 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x7776e
            int128_t v88 = __asm_mulss(v85, v78); // 0x77773
            g9 = a1;
            int32_t v89 = __asm_movss_1646(v87); // 0x7777a
            int128_t v90 = __asm_subss(v88, v86); // 0x7777f
            int32_t v91 = __asm_movss_1646(__asm_movss(*(int32_t *)(g9 + 8))); // 0x77788
            int128_t v92 = __asm_movss(*(int32_t *)(g8 + 8)); // 0x7778d
            int128_t v93 = __asm_unpcklps(v90, v90); // 0x77792
            int128_t v94 = __asm_cvtps2pd(v93); // 0x77795
            __asm_ucomisd_1652(__asm_andpd(v94, g127), 0x3d719799812dea11);
            __asm_movss_1646(v92);
            if (!v4 && !v5) {
                int128_t v95 = __asm_movss(v89); // 0x777af
                int128_t v96 = __asm_subss_1651(v92, v91); // 0x777b4
                int128_t v97 = __asm_subss_1651(v95, v91); // 0x777b9
                int128_t v98 = __asm_mulss(v80, v96); // 0x777be
                int128_t v99 = __asm_mulss(v78, v97); // 0x777c2
                int128_t v100 = __asm_mulss(v83, v97); // 0x777c6
                int128_t v101 = __asm_mulss(v82, v96); // 0x777ca
                int128_t v102 = __asm_subss(v98, v99); // 0x777ce
                int128_t v103 = __asm_subss(v100, v101); // 0x777d2
                int128_t v104 = __asm_divss(__asm_xorps(v102, v35), v93); // 0x777d9
                int128_t v105 = __asm_divss(__asm_xorps(v103, v35), v93); // 0x777e0
                *(int32_t *)(g4 + 8) = __asm_movss_1646(__asm_addss(v104, *(int32_t *)(g4 + 8)));
                *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_addss(v105, *(int32_t *)(g6 + 8)));
            }
        }
    }
    // 0x777f8
    g4 = (float32_t)function_6d750(g4);
    g13++;
    float80_t v106 = function_6d750(g6); // 0x77805
    g4 = (float32_t)v106;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return (float32_t)v106;
}

// Address range: 0x77820 - 0x7790d
int32_t function_77820(int32_t a1, int32_t a2) {
    // 0x77820
    g4 = a1;
    g9 = a2;
    int128_t v1 = __asm_movss(*(int32_t *)a1); // 0x77829
    int128_t v2 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x7782d
    int128_t v3 = __asm_movaps(v1); // 0x77832
    int128_t v4 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x77835
    int128_t v5 = __asm_maxss_1668(v3, v2); // 0x7783a
    int128_t v6 = __asm_minss(v1, v2); // 0x7783e
    int128_t v7 = __asm_maxss_1668(v5, v4); // 0x77842
    int128_t v8 = __asm_minss(v6, v4); // 0x77846
    int128_t v9 = __asm_xorps(v4, v4); // 0x7784a
    __asm_ucomiss_1648(v7, v9);
    *(int32_t *)(g9 + 8) = __asm_movss_1646(v7);
    bool v10; // pf
    bool v11; // zf
    if (!v10) {
        // 0x77857
        if (v11) {
            // 0x778a8
            *(int32_t *)(g9 + 4) = __asm_movss_1646(v9);
            // 0x778ad
            *(int32_t *)g9 = -0x40800000;
            // 0x778b3
            return g4;
        }
    }
    int128_t v12 = __asm_subss(__asm_movaps(v7), v8); // 0x7785c
    int128_t v13 = __asm_movaps(v12); // 0x77860
    int128_t v14 = __asm_divss(v12, v7); // 0x77863
    __asm_ucomiss_1648(v14, v9);
    *(int32_t *)(g9 + 4) = __asm_movss_1646(v14);
    if (!v10 && v11) {
        // 0x778ad
        *(int32_t *)g9 = -0x40800000;
        // 0x778b3
        return g4;
    }
    int128_t v15 = __asm_movss(*(int32_t *)g4); // 0x77875
    __asm_ucomiss_1648(v7, v15);
    int128_t v16 = __asm_movss(*(int32_t *)(g4 + 4)); // 0x7787e
    int128_t v17; // 0x778c8
    if (v10 || !v11) {
        // 0x7787e
        __asm_ucomiss_1648(v7, v16);
        if (v10 || !v11) {
            int128_t v18 = __asm_movaps(v15); // 0x778f0
            v17 = __asm_addss(__asm_divss(__asm_subss(v18, v16), v13), 0x40800000);
        } else {
            int128_t v19 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x7788a
            v17 = __asm_addss(__asm_divss(__asm_subss(v19, v15), v13), 0x40000000);
        }
    } else {
        int128_t v20 = __asm_subss_1651(v16, *(int32_t *)(g4 + 8)); // 0x778bf
        v17 = __asm_divss(v20, v13);
    }
    int128_t v21 = __asm_mulss_1654(v17, 0x42700000); // 0x778c8
    __asm_ucomiss_1648(v9, v21);
    *(int32_t *)g9 = __asm_movss_1646(v21);
    bool v22; // cf
    if (v22 || v11) {
        // 0x778b3
        return g4;
    }
    // 0x778d9
    *(int32_t *)g9 = __asm_movss_1646(__asm_addss(v21, 0x43b40000));
    return g4;
}

// Address range: 0x77910 - 0x77a40
int32_t function_77910(int32_t a1, int32_t a2) {
    // 0x77910
    g9 = a1;
    g4 = a2;
    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x77919
    __asm_ucomiss(v1, 0);
    int32_t v2 = g9; // 0x7792b
    bool v3; // pf
    bool v4; // zf
    if (!v3 && v4) {
        int32_t v5 = *(int32_t *)(v2 + 8); // 0x779d6
        g9 = v5;
        *(int32_t *)g4 = v5;
        *(int32_t *)(g4 + 4) = g9;
        *(int32_t *)(g4 + 8) = g9;
        return g4;
    }
    int128_t v6 = __asm_movss(*(int32_t *)v2); // 0x7792b
    __asm_ucomiss(v6, 0x43b40000);
    int128_t v7; // xmm0
    int128_t v8; // xmm2
    int128_t v9; // xmm3
    if (v3 || !v4) {
        int128_t v10 = __asm_divss_1666(v6, 0x42700000); // 0x77938
        int32_t v11 = __asm_cvttss2si_1647(v10); // 0x77940
        g7 = v11;
        int128_t v12 = __asm_movaps(v10); // 0x77944
        int128_t v13 = __asm_movaps(v1); // 0x77947
        int128_t v14 = __asm_movss(0x3f800000); // 0x7794a
        int128_t v15 = __asm_movaps(v14); // 0x77952
        int128_t v16 = __asm_movaps(v14); // 0x77955
        int128_t v17 = __asm_cvtsi2ss(v11); // 0x77958
        int128_t v18 = __asm_subss(v16, v1); // 0x7795f
        int128_t v19 = __asm_subss(v12, v17); // 0x77963
        int128_t v20 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x77967
        v8 = v20;
        v7 = __asm_mulss(v18, v20);
        int128_t v21 = __asm_mulss(v13, v19); // 0x77970
        int128_t v22 = __asm_movaps(__asm_subss(v15, v21)); // 0x77978
        int128_t v23 = __asm_subss(__asm_movaps(v14), v19); // 0x7797e
        int128_t v24 = __asm_mulss(v22, v8); // 0x77982
        int128_t v25 = __asm_movaps(v23); // 0x77986
        int128_t v26 = __asm_mulss(__asm_subss(v14, __asm_mulss(v25, v1)), v8); // 0x77991
        v9 = v26;
        g877 = v11;
        switch (v11) {
            case 0: {
                goto lab_0x779ba;
            }
            case 1: {
                // 0x77a20
                *(int32_t *)g4 = __asm_movss_1646(v24);
                *(int32_t *)(g4 + 4) = __asm_movss_1646(v8);
                *(int32_t *)(g4 + 8) = __asm_movss_1646(v7);
                return g4;
            }
            case 2: {
                // 0x77a10
                *(int32_t *)g4 = __asm_movss_1646(v7);
                *(int32_t *)(g4 + 4) = __asm_movss_1646(v8);
                *(int32_t *)(g4 + 8) = __asm_movss_1646(v9);
                return g4;
            }
            case 3: {
                // 0x77a00
                *(int32_t *)g4 = __asm_movss_1646(v7);
                *(int32_t *)(g4 + 4) = __asm_movss_1646(v24);
                *(int32_t *)(g4 + 8) = __asm_movss_1646(v8);
                return g4;
            }
            case 4: {
                // 0x779f0
                *(int32_t *)g4 = __asm_movss_1646(v26);
                *(int32_t *)(g4 + 4) = __asm_movss_1646(v7);
                *(int32_t *)(g4 + 8) = __asm_movss_1646(v8);
                return g4;
            }
            case 5: {
                // 0x77a30
                *(int32_t *)g4 = __asm_movss_1646(v8);
                *(int32_t *)(g4 + 4) = __asm_movss_1646(v7);
                *(int32_t *)(g4 + 8) = __asm_movss_1646(v24);
                return g4;
            }
            default: {
                // 0x77997
                return g4;
            }
        }
    } else {
        int128_t v27 = __asm_movss(0x3f800000); // 0x779a2
        int128_t v28 = __asm_movss(*(int32_t *)(g9 + 8)); // 0x779aa
        v8 = v28;
        int128_t v29 = __asm_mulss(__asm_subss(v27, v1), v28); // 0x779b3
        v7 = v29;
        v9 = __asm_movaps(v29);
        goto lab_0x779ba;
    }
  lab_0x779ba:
    // 0x779ba
    *(int32_t *)g4 = __asm_movss_1646(v8);
    *(int32_t *)(g4 + 4) = __asm_movss_1646(v9);
    *(int32_t *)(g4 + 8) = __asm_movss_1646(v7);
    return g4;
}

// Address range: 0x77a40 - 0x77b46
int32_t function_77a40(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, unsigned char a6, int32_t a7, int32_t a8, int32_t a9) {
    int32_t v1 = g8; // 0x77a43
    g7 = a3;
    int32_t v2 = g10; // 0x77a47
    int32_t v3 = g6; // bp-16
    g10 = a2;
    g6 = a1;
    int128_t v4 = __asm_movss(a5); // 0x77a4f
    g8 = a6;
    if (a3 < 1) {
        goto lab_0x77ab4;
    } else {
        // 0x77a5c
        g9 = 0;
        __asm_ucomiss_1648(__asm_movss(*(int32_t *)g6), v4);
        goto lab_0x77ab4;
    }
  lab_0x77ab4:;
    int32_t v5 = g8; // 0x77ab4
    g4 = v5;
    int32_t * v6;
    int128_t v7; // 0x77ad8
    int128_t v8; // xmm0
    if ((char)v5 == 0) {
        // 0x77b08
        v6 = (int32_t *)g10;
        goto lab_0x77b0a;
    } else {
        int128_t v9 = __asm_cvtsi2ss(a4); // 0x77aba
        g7 = a3 - 1;
        g4 = 0;
        int128_t v10 = __asm_movss(*(int32_t *)g6); // 0x77ac4
        int32_t v11 = 4 * g7; // 0x77ac8
        g8 = v11;
        int128_t v12 = __asm_subss_1651(v9, *(int32_t *)(g6 + v11)); // 0x77acf
        v8 = __asm_addss_1661(v10, v12);
        v7 = __asm_addss_1661(v4, v12);
        goto lab_0x77adc;
    }
  lab_0x77b0a:;
    int32_t v13 = *v6;
    g4 = v13;
    g9 = a8;
    g7 = a7;
    *(int32_t *)a8 = v13;
    *(int32_t *)g7 = g4;
    g4 = a9;
    *(int32_t *)a9 = 0x3f800000;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
  lab_0x77adc:;
    int128_t v14 = __asm_divss(v7, v8); // 0x77adc
    g7 = a7;
    *(int32_t *)a7 = *(int32_t *)(g8 + g10);
    g9 = a8;
    int32_t v15 = *(int32_t *)(g4 + g10); // 0x77aeb
    g4 = v15;
    g7 = a9;
    *(int32_t *)a8 = v15;
    *(int32_t *)g7 = __asm_movss_1646(__asm_addss(v14, 0));
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x77bbb - 0x77c7a
int32_t function_77bbb(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x77bbb
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 32)); // 0x77bbd
    float80_t v3; // st7
    *(float32_t *)(v1 - 48) = (float32_t)v3;
    *(int64_t *)(v1 - 56) = (int64_t)__asm_movsd(__asm_cvtps2pd(v2));
    int128_t v4 = __asm_movss(*(int32_t *)(v1 - 48)); // 0x77bcc
    float80_t v5 = (float80_t)*(float64_t *)(v1 - 56); // 0x77bd1
    float80_t v6; // 0x77bd4
    float80_t v7; // 0x77bd4
    if (fabsl(v5) < 9223372036854775808.0L) {
        // bb
        v6 = sinl(v5);
        v7 = cosl(v5);
    } else {
        // 0x77bbb
        v6 = v5;
        float80_t v8; // st6
        v7 = v8;
    }
    int128_t v9 = __asm_cvtsi2ss(g10); // 0x77bd8
    *(float64_t *)(v1 - 32) = (float64_t)v6;
    int128_t v10 = __asm_divss_1666(v9, 0x46fffe00); // 0x77bdf
    int128_t v11 = __asm_unpcklps(v10, v10); // 0x77be7
    int128_t v12 = __asm_mulsd_1655(__asm_cvtps2pd(v11), 0x401921fb54442d18); // 0x77bed
    int128_t v13 = __asm_cvtpd2ps(__asm_unpcklpd(v12, v12)); // 0x77bf9
    int128_t v14 = __asm_unpcklps(v13, v13); // 0x77bfd
    int32_t v15 = __asm_movsd(__asm_cvtps2pd(v14)); // 0x77c03
    int32_t v16 = v1 - 56; // 0x77c03
    *(int64_t *)v16 = (int64_t)v15;
    float80_t v17 = (float80_t)*(float64_t *)v16; // 0x77c08
    float80_t v18; // 0x77c0b
    float80_t v19; // 0x77c0b
    if (fabsl(v17) < 9223372036854775808.0L) {
        // bb274
        v18 = sinl(v17);
        v19 = cosl(v17);
    } else {
        // ._crit_edge
        v18 = v17;
        float80_t v20; // st5
        v19 = v20;
    }
    // bb275
    *(float64_t *)(v1 - 40) = (float64_t)v18;
    int128_t v21 = __asm_movsd_1649(*(int64_t *)(v1 - 32)); // 0x77c12
    *(float64_t *)(v1 - 56) = (float64_t)v19;
    int128_t v22 = __asm_mulss(__asm_cvtpd2ps(v21), v4); // 0x77c1e
    int128_t v23 = __asm_movapd(__asm_movsd_1649(*(int64_t *)(v1 - 56))); // 0x77c27
    int128_t v24 = __asm_cvtpd2ps(__asm_unpcklpd(v23, v23)); // 0x77c2f
    *(int32_t *)g6 = __asm_movss_1646(__asm_mulss(v24, v22));
    int128_t v25 = __asm_cvtpd2ps(__asm_movsd_1649(*(int64_t *)(v1 - 40))); // 0x77c40
    *(int32_t *)(g6 + 4) = __asm_movss_1646(__asm_mulss(v25, v22));
    int32_t v26 = v1 - 56; // 0x77c4d
    *(float64_t *)v26 = (float64_t)v7;
    int128_t v27 = __asm_movapd(__asm_movsd_1649(*(int64_t *)v26)); // 0x77c55
    int128_t v28 = __asm_cvtpd2ps(__asm_unpcklpd(v27, v27)); // 0x77c5d
    *(int32_t *)(g6 + 8) = __asm_movss_1646(__asm_mulss(v28, v4));
    *(int32_t *)(v1 - 48) = __asm_movss_1646(v4);
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return g4;
}

// Address range: 0x77cb7 - 0x77cbf
int32_t function_77cb7(void) {
    // 0x77cb7
    return g4;
}

// Address range: 0x77cc6 - 0x77d4a
float80_t function_77cc6(void) {
    // 0x77cc6
    int64_t v1; // mm7
    int128_t v2; // xmm1
    int128_t v3 = __asm_cvtpi2ps(v2, v1); // 0x77cc8
    int32_t v4; // ebp
    int128_t v5 = __asm_movss(*(int32_t *)(v4 - 56)); // 0x77ccb
    float80_t v6; // st7
    *(float32_t *)(v4 - 60) = (float32_t)v6;
    int128_t v7 = __asm_movss(*(int32_t *)(v4 - 60)); // 0x77cd3
    int128_t v8 = __asm_divss(v3, v5); // 0x77cd8
    int128_t v9 = __asm_unpcklps(v8, v8); // 0x77cdc
    int128_t v10 = __asm_mulsd_1655(__asm_cvtps2pd(v9), 0x401921fb54442d18); // 0x77ce2
    int128_t v11 = __asm_cvtpd2ps(__asm_unpcklpd(v10, v10)); // 0x77cee
    int128_t v12 = __asm_unpcklps(v11, v11); // 0x77cf2
    int32_t v13 = __asm_movsd(__asm_cvtps2pd(v12)); // 0x77cf8
    int32_t v14 = v4 - 72; // 0x77cf8
    int64_t * v15 = (int64_t *)v14; // 0x77cf8
    *v15 = (int64_t)v13;
    float64_t * v16 = (float64_t *)v14; // 0x77cfd
    float80_t v17 = (float80_t)*v16; // 0x77cfd
    float80_t v18; // 0x77d00
    float80_t v19; // 0x77d00
    if (fabsl(v17) < 9223372036854775808.0L) {
        // bb
        v18 = sinl(v17);
        v19 = cosl(v17);
    } else {
        // 0x77cc6
        v18 = v17;
        float80_t v20; // st6
        v19 = v20;
    }
    // bb255
    *(float64_t *)(v4 - 32) = (float64_t)v18;
    *v16 = (float64_t)v19;
    int128_t v21 = __asm_movapd(__asm_movsd_1649(*v15)); // 0x77d0f
    int128_t v22 = __asm_unpcklpd(v21, v21); // 0x77d13
    int128_t v23 = __asm_mulss(__asm_cvtpd2ps(v22), v7); // 0x77d1b
    *(int32_t *)g6 = __asm_movss_1646(v23);
    int128_t v24 = __asm_movsd_1649(*(int64_t *)(v4 - 32)); // 0x77d23
    int128_t v25 = __asm_mulss(__asm_cvtpd2ps(v24), v7); // 0x77d2c
    *(int32_t *)(g6 + 4) = __asm_movss_1646(v25);
    *(int32_t *)(v4 - 60) = __asm_movss_1646(v7);
    g6 = *(int32_t *)(v4 - 12);
    g10 = *(int32_t *)(v4 - 8);
    g8 = *(int32_t *)(v4 - 4);
    return (float80_t)*(float32_t *)(v4 - 60);
}

// Address range: 0x77d50 - 0x77df8
int32_t function_77d50(int32_t a1) {
    int32_t v1 = g8; // 0x77d53
    int32_t v2 = g10; // 0x77d54
    int32_t v3 = g6; // 0x77d55
    int128_t v4 = __asm_movsd_1649(0x41e0000000000000); // 0x77d60
    int128_t v5 = __asm_movsd_1649(0x3ef0000000000000); // 0x77d68
    int64_t v6 = 0;
    int32_t result; // 0x77dd6
    while (true) {
        int32_t v7 = v6; // 0x77d70
        g10 = 0;
        int32_t v8 = v6 * (int64_t)&g86; // 0x77d75
        g9 = v7 + a1;
        g8 = v8 + (int32_t)&g750;
        *(int32_t *)(v8 + (int32_t)&g750 + (int32_t)&g84) = v8 + (int32_t)&g750 + (int32_t)&g40;
        int32_t v9 = g8; // 0x77d91
        int32_t v10 = v9 + (int32_t)&g83; // 0x77d91
        g4 = v10;
        *(int32_t *)(v9 + (int32_t)&g85) = v10;
        int32_t v11 = g10; // 0x77da0
        while (true) {
            // 0x77da0
            g4 = 0;
            g6 = g8 + 16 * v11;
            uint32_t v12 = g9; // 0x77da9
            g9 = -0x44bf19d3 * v12 - 0x44bf19d3;
            int32_t v13 = v12 / 0x10000 | -0x80000000; // 0x77db73
            g7 = v13;
            int128_t v14 = __asm_cvtsi2sd(v13); // 0x77dbd
            int128_t v15 = __asm_mulsd(__asm_addsd(v14, v4), v5); // 0x77dc5
            int128_t v16 = __asm_unpcklpd(v15, v15); // 0x77dc9
            *(int32_t *)(g4 + g6) = __asm_movss_1646(__asm_cvtpd2ps(v16));
            int32_t v17 = g4; // 0x77dd6
            result = v17 + 4;
            g4 = result;
            while (v17 != 12) {
                // 0x77da9
                v12 = g9;
                g9 = -0x44bf19d3 * v12 - 0x44bf19d3;
                v13 = v12 / 0x10000 | -0x80000000;
                g7 = v13;
                v14 = __asm_cvtsi2sd(v13);
                v15 = __asm_mulsd(__asm_addsd(v14, v4), v5);
                v16 = __asm_unpcklpd(v15, v15);
                *(int32_t *)(g4 + g6) = __asm_movss_1646(__asm_cvtpd2ps(v16));
                v17 = g4;
                result = v17 + 4;
                g4 = result;
            }
            int32_t v18 = g10; // 0x77dde
            int32_t v19 = v18 + 1; // 0x77dde
            g10 = v19;
            if (v18 == 54) {
                // break -> 0x77de6
                break;
            }
            v11 = v19;
        }
        // 0x77de6
        if (v7 == 31) {
            // break -> 0x77df0
            break;
        }
        v6 = v7 + 1;
    }
    // 0x77df0
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x77e00 - 0x77e78
int32_t function_77e00(int32_t a1) {
    int128_t v1 = __asm_movaps(g244); // 0x77e01
    g4 = a1 * (int32_t)&g86;
    int128_t v2 = __asm_movaps(v1); // 0x77e11
    int32_t v3 = g4; // 0x77e14
    g4 = v3 + (int32_t)&g750;
    int32_t v4 = *(int32_t *)(v3 + (int32_t)&g750 + (int32_t)&g85); // 0x77e19
    g9 = v4;
    int32_t v5 = *(int32_t *)(v3 + (int32_t)&g750 + (int32_t)&g84); // 0x77e1f
    g7 = v5;
    int128_t v6 = __asm_movaps(*(int128_t *)v4); // 0x77e25
    int128_t v7 = __asm_addps(v6, *(int128_t *)g7); // 0x77e28
    int128_t v8 = __asm_andps(__asm_cmpleps(v2, v7), v1); // 0x77e2f
    *(int128_t *)g9 = (int128_t)__asm_movaps_1663(__asm_subps(v7, v8));
    uint32_t v9 = g4; // 0x77e38
    int32_t * v10 = (int32_t *)(v9 + (int32_t)&g84); // 0x77e38
    int32_t v11 = *v10 - 16; // 0x77e3e
    g9 = v11;
    *v10 = v11;
    if (v11 < v9) {
        int32_t v12 = g4; // 0x77e4b
        int32_t v13 = v12 + (int32_t)&g83; // 0x77e4b
        g9 = v13;
        *(int32_t *)(v12 + (int32_t)&g84) = v13;
    }
    uint32_t v14 = g4; // 0x77e57
    int32_t * v15 = (int32_t *)(v14 + (int32_t)&g85); // 0x77e57
    int32_t v16 = *v15 - 16; // 0x77e5d
    g9 = v16;
    *v15 = v16;
    if (v14 > v16) {
        int32_t v17 = g4; // 0x77e6a
        int32_t v18 = v17 + (int32_t)&g83; // 0x77e6a
        g9 = v18;
        *(int32_t *)(v17 + (int32_t)&g85) = v18;
    }
    // 0x77e76
    return g4;
}

// Address range: 0x77e80 - 0x77eb7
int32_t function_77e80(void) {
    // 0x77e80
    g9 = 0;
    g6 = 1;
    int32_t v1 = 0; // 0x77e9b
    while (true) {
        if (v1 >= 32) {
            // break -> 0x77eb0
            break;
        }
        int32_t v2 = 4 * v1 + (int32_t)&g749; // 0x77e90
        int32_t * v3 = (int32_t *)v2; // 0x77e90
        int32_t v4 = *v3; // 0x77e90
        g4 = v4;
        if (v4 == 0) {
            // 0x77e9b
            g7 = v2;
            int32_t v5 = *v3; // 0x77ea2
            *v3 = v4 == v5 ? g6 : v5;
            g4 = v5;
            if (v4 == v5) {
                // bb
                g4 = function_77ec0((int32_t)&g870, (int32_t)&g870);
            }
        }
        int32_t v6 = g9 + 1; // 0x77ea8
        g9 = v6;
        v1 = v6;
    }
    // 0x77eb0
    return g4;
}

// Address range: 0x77ebc - 0x77ec0
int32_t function_77ebc(void) {
    // 0x77ebc
    g9 = 0;
    return g4;
}

// Address range: 0x77ec0 - 0x77ec8
int32_t function_77ec0(int32_t a1, int32_t a2) {
    int32_t result = g9; // 0x77ec3
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x77ed0 - 0x77ee3
int32_t function_77ed0(int32_t a1) {
    // 0x77ed0
    g4 = a1;
    *(int32_t *)(4 * a1 + (int32_t)&g749) = 0;
    return g4;
}

// Address range: 0x77ef0 - 0x77f51
int32_t function_77ef0(void) {
    // 0x77ef0
    g4 = (int32_t)g753;
    g9 = (int32_t)g752;
    int128_t v1 = __asm_movaps(g244); // 0x77efe
    int128_t v2 = __asm_movaps(*(int128_t *)g4); // 0x77f05
    int128_t v3 = __asm_movaps(v1); // 0x77f08
    int128_t v4 = __asm_addps(v2, *(int128_t *)g9); // 0x77f0b
    int128_t v5 = __asm_andps(__asm_cmpleps(v3, v4), v1); // 0x77f12
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(__asm_subps(v4, v5));
    uint32_t v6 = (int32_t)g752 - 16; // 0x77f27
    int128_t * v7 = v6 < (int32_t)&g750 ? (int128_t *)&g751 : (int128_t *)v6; // 0x77f33
    g752 = v7;
    int32_t v8 = (int32_t)g753 - 16; // 0x77f3f
    g9 = v8;
    int32_t result = v8 >= (int32_t)&g750 ? v8 : (int32_t)&g751; // 0x77f48
    g4 = result;
    g753 = (int128_t *)result;
    return result;
}

// Address range: 0x77f60 - 0x7804d
int32_t function_77f60(int32_t result, int32_t a2, int32_t a3) {
    g9 = a2;
    g4 = result;
    g7 = a3;
    if (a2 == 0) {
        // 0x77f73
        return result;
    }
    int128_t v1 = __asm_movups(*(int128_t *)a3); // 0x77f78
    g9 = 3 * a2;
    int128_t v2 = __asm_movups(*(int128_t *)(g7 + 16)); // 0x77f7e
    g9 *= 16;
    int128_t v3 = __asm_movaps(v1); // 0x77f85
    int128_t v4 = __asm_movaps(v1); // 0x77f88
    int128_t v5 = __asm_movups(*(int128_t *)(g7 + 32)); // 0x77f8b
    int128_t v6 = __asm_shufps(v3, v1, 0); // 0x77f8f
    int128_t v7 = __asm_shufps(v4, v1, 85); // 0x77f93
    int128_t v8 = __asm_shufps(v1, v1, 170); // 0x77f97
    int128_t v9 = __asm_movaps_1663(v8); // 0x77f9b
    g9 += g4;
    int128_t v10 = __asm_shufps(__asm_movaps(v2), v2, 0); // 0x77fa4
    int128_t v11 = __asm_movaps_1663(v10); // 0x77fa8
    int128_t v12 = __asm_shufps(__asm_movaps(v2), v2, 85); // 0x77faf
    int128_t v13 = __asm_shufps(v2, v2, 170); // 0x77fb5
    int128_t v14 = __asm_movaps_1663(v12); // 0x77fb9
    int128_t v15 = __asm_movaps(v5); // 0x77fbd
    int128_t v16 = __asm_movaps_1663(v13); // 0x77fc0
    int128_t v17 = __asm_movaps(v5); // 0x77fc4
    int128_t v18 = __asm_shufps(v15, v5, 85); // 0x77fc7
    int128_t v19 = __asm_shufps(v17, v5, 0); // 0x77fcb
    int128_t v20 = __asm_movaps_1663(v18); // 0x77fcf
    int128_t v21 = __asm_shufps(v5, v5, 170); // 0x77fd3
    int128_t v22 = __asm_movaps_1663(v19); // 0x77fd7
    int128_t v23 = __asm_movaps_1663(v21); // bp-124
    if (g4 >= g9) {
        // 0x77f73
        return g4;
    }
    int128_t v24 = __asm_movaps(*(int128_t *)(g4 + 16)); // 0x77fe8
    int128_t v25 = __asm_movaps(*(int128_t *)g4); // 0x77fec
    int128_t v26 = __asm_movaps(v24); // 0x77fef
    int128_t v27 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x77ff2
    int128_t v28 = __asm_mulps(v26, v7); // 0x77ff6
    int128_t v29 = __asm_movaps(v25); // 0x77ff9
    int128_t v30 = __asm_movaps(v11); // 0x77ffc
    int128_t v31 = __asm_mulps(v29, v6); // 0x78000
    int128_t v32 = __asm_mulps(v30, v25); // 0x78003
    int128_t v33 = __asm_mulps(v25, v22); // 0x78006
    int128_t v34 = __asm_addps(v31, v28); // 0x7800a
    int128_t v35 = __asm_movaps(v9); // 0x7800d
    int128_t v36 = __asm_addps(__asm_mulps(v35, v27), v34); // 0x78014
    int128_t v37 = __asm_mulps(__asm_movaps(v14), v24); // 0x7801b
    int128_t v38 = __asm_mulps(v24, v20); // 0x7801e
    *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v36);
    int128_t v39 = __asm_addps(v32, v37); // 0x78025
    int128_t v40 = __asm_movaps(v16); // 0x78028
    int128_t v41 = __asm_addps(v33, v38); // 0x7802c
    int128_t v42 = __asm_mulps(v40, v27); // 0x7802f
    int128_t v43 = __asm_mulps(v27, v23); // 0x78032
    int128_t v44 = __asm_addps(v42, v39); // 0x78036
    int128_t v45 = __asm_addps(v43, v41); // 0x78039
    *(int128_t *)(g4 + 16) = (int128_t)__asm_movaps_1663(v44);
    int32_t v46 = __asm_movaps_1663(v45); // 0x78040
    int32_t v47 = g4; // 0x78040
    *(int128_t *)(v47 + 32) = (int128_t)v46;
    int32_t result2 = v47 + 48; // 0x78044
    g4 = result2;
    while (g9 > result2) {
        // 0x77fe8
        v24 = __asm_movaps(*(int128_t *)(result2 + 16));
        v25 = __asm_movaps(*(int128_t *)g4);
        v26 = __asm_movaps(v24);
        v27 = __asm_movaps(*(int128_t *)(g4 + 32));
        v28 = __asm_mulps(v26, v7);
        v29 = __asm_movaps(v25);
        v30 = __asm_movaps(v11);
        v31 = __asm_mulps(v29, v6);
        v32 = __asm_mulps(v30, v25);
        v33 = __asm_mulps(v25, v22);
        v34 = __asm_addps(v31, v28);
        v35 = __asm_movaps(v9);
        v36 = __asm_addps(__asm_mulps(v35, v27), v34);
        v37 = __asm_mulps(__asm_movaps(v14), v24);
        v38 = __asm_mulps(v24, v20);
        *(int128_t *)g4 = (int128_t)__asm_movaps_1663(v36);
        v39 = __asm_addps(v32, v37);
        v40 = __asm_movaps(v16);
        v41 = __asm_addps(v33, v38);
        v42 = __asm_mulps(v40, v27);
        v43 = __asm_mulps(v27, v23);
        v44 = __asm_addps(v42, v39);
        v45 = __asm_addps(v43, v41);
        *(int128_t *)(g4 + 16) = (int128_t)__asm_movaps_1663(v44);
        v46 = __asm_movaps_1663(v45);
        v47 = g4;
        *(int128_t *)(v47 + 32) = (int128_t)v46;
        result2 = v47 + 48;
        g4 = result2;
    }
    // 0x7804b
    return result2;
}

// Address range: 0x78050 - 0x780d8
int32_t function_78050(int32_t a1, int32_t a2, int32_t a3, int32_t * a4) {
    int32_t v1 = g6; // 0x78053
    g6 = a3;
    g9 = (int32_t)a4;
    g4 = a2;
    g7 = a1;
    int128_t v2 = __asm_movaps(*(int128_t *)a3); // 0x78060
    *(int128_t *)g9 = (int128_t)__asm_movaps_1663(v2);
    int128_t v3 = __asm_movaps(*(int128_t *)(g6 + 16)); // 0x78066
    *(int128_t *)(g9 + 16) = (int128_t)__asm_movaps_1663(v3);
    int128_t v4 = __asm_movaps(*(int128_t *)(g6 + 32)); // 0x7806e
    *(int128_t *)(g9 + 32) = (int128_t)__asm_movaps_1663(v4);
    int128_t v5 = __asm_subps(v2, *(int128_t *)g4); // 0x78076
    *(int128_t *)g9 = (int128_t)__asm_movaps_1663(v5);
    int128_t v6 = __asm_movaps(v5); // 0x7807c
    int128_t v7 = __asm_subps(v3, *(int128_t *)(g4 + 16)); // 0x7807f
    int128_t v8 = __asm_mulps(v6, v5); // 0x78083
    int128_t v9 = __asm_movaps(v7); // 0x78086
    *(int128_t *)(g9 + 16) = (int128_t)__asm_movaps_1663(v7);
    int128_t v10 = __asm_mulps(v9, v7); // 0x7808d
    int128_t v11 = __asm_subps(v4, *(int128_t *)(g4 + 32)); // 0x78090
    *(int128_t *)(g9 + 32) = (int128_t)__asm_movaps_1663(v11);
    int128_t v12 = __asm_addps(v10, v8); // 0x78098
    int128_t v13 = __asm_movaps(v11); // 0x7809b
    int128_t v14 = __asm_movaps(*(int128_t *)(g4 + 16)); // 0x7809e
    int128_t v15 = __asm_mulps(v13, v11); // 0x780a2
    g6 = v1;
    int128_t v16 = __asm_mulps(v14, v7); // 0x780a6
    int128_t v17 = __asm_mulps(v7, *(int128_t *)(g7 + 16)); // 0x780a9
    int128_t v18 = __asm_addps(v15, v12); // 0x780ad
    int128_t v19 = __asm_mulps(__asm_movaps(*(int128_t *)g4), v5); // 0x780b4
    int128_t v20 = __asm_mulps(v5, *(int128_t *)g7); // 0x780b7
    int128_t v21 = __asm_addps(v16, v19); // 0x780ba
    int128_t v22 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x780bd
    int128_t v23 = __asm_addps(v17, v20); // 0x780c1
    int128_t v24 = __asm_mulps(v22, v11); // 0x780c4
    int128_t v25 = __asm_mulps(v11, *(int128_t *)(g7 + 32)); // 0x780c7
    int128_t v26 = __asm_addps(v24, v21); // 0x780cb
    g878 = __asm_divps(__asm_subps(__asm_addps(v25, v23), v26), v18);
    return g4;
}

// Address range: 0x780e0 - 0x7815f
int32_t function_780e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1; // ebp
    g5 = &v1;
    int32_t v2 = g10; // 0x780e9
    g10 = a2;
    int32_t v3 = g8; // 0x780f6
    g8 = a5;
    int32_t v4 = g6; // 0x780fc
    g6 = a4;
    g4 = a1;
    int128_t v5; // bp-76
    g4 = function_78050(a1, a2, a3, (int32_t *)&v5);
    if (a5 != 0) {
        // 0x78119
        *(int128_t *)a5 = (int128_t)__asm_movaps_1663(g878);
    }
    // 0x7811c
    int128_t v6;
    int128_t v7 = __asm_movaps(v6); // 0x7811c
    int128_t v8;
    int128_t v9 = __asm_movaps(v8); // 0x78120
    int128_t v10 = __asm_movaps(v5); // 0x78124
    int128_t v11 = __asm_mulps(v7, g878); // 0x78128
    int128_t v12 = __asm_mulps(v9, g878); // 0x7812b
    int128_t v13 = __asm_mulps(v10, g878); // 0x7812e
    *(int128_t *)(g6 + 16) = (int128_t)__asm_movaps_1663(v11);
    *(int128_t *)(g6 + 32) = (int128_t)__asm_movaps_1663(v12);
    *(int128_t *)g6 = (int128_t)__asm_movaps_1663(v13);
    int128_t v14 = *(int128_t *)g10; // 0x7813c
    *(int128_t *)g6 = (int128_t)__asm_movaps_1663(__asm_addps(v13, v14));
    int128_t v15 = *(int128_t *)(g10 + 16); // 0x78142
    *(int128_t *)(g6 + 16) = (int128_t)__asm_movaps_1663(__asm_addps(v11, v15));
    int128_t v16 = *(int128_t *)(g10 + 32); // 0x7814a
    *(int128_t *)(g6 + 32) = (int128_t)__asm_movaps_1663(__asm_addps(v12, v16));
    g6 = v4;
    g10 = v2;
    g8 = v3;
    return g4;
}

// Address range: 0x78160 - 0x7825c
int32_t function_78160(int32_t result, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // 0x78163
    g7 = a2;
    g4 = result;
    g6 = a3;
    g9 = a4;
    if (a2 == 0) {
        // 0x78177
        g6 = v1;
        return result;
    }
    int128_t v2 = __asm_movups(*(int128_t *)a3); // 0x78180
    g7 = 3 * a2;
    int128_t v3 = __asm_movups(*(int128_t *)(g6 + 16)); // 0x78186
    g7 *= 16;
    int128_t v4 = __asm_movaps(v2); // 0x7818d
    int128_t v5 = __asm_movaps(v2); // 0x78190
    int128_t v6 = __asm_movups(*(int128_t *)(g6 + 32)); // 0x78193
    int128_t v7 = __asm_shufps(v4, v2, 0); // 0x78197
    int128_t v8 = __asm_shufps(v5, v2, 85); // 0x7819b
    int128_t v9 = __asm_shufps(v2, v2, 170); // 0x7819f
    int128_t v10 = __asm_movaps_1663(v9); // 0x781a3
    g7 += g4;
    int128_t v11 = __asm_shufps(__asm_movaps(v3), v3, 0); // 0x781ac
    int128_t v12 = __asm_movaps_1663(v11); // 0x781b0
    int128_t v13 = __asm_shufps(__asm_movaps(v3), v3, 85); // 0x781b7
    int128_t v14 = __asm_shufps(v3, v3, 170); // 0x781bd
    int128_t v15 = __asm_movaps_1663(v13); // 0x781c1
    int128_t v16 = __asm_movaps(v6); // 0x781c5
    int128_t v17 = __asm_movaps_1663(v14); // 0x781c8
    int128_t v18 = __asm_movaps(v6); // 0x781cc
    int128_t v19 = __asm_shufps(v16, v6, 85); // 0x781cf
    int128_t v20 = __asm_shufps(v18, v6, 0); // 0x781d3
    int128_t v21 = __asm_movaps_1663(v19); // 0x781d7
    int128_t v22 = __asm_shufps(v6, v6, 170); // 0x781db
    int128_t v23 = __asm_movaps_1663(v20); // 0x781df
    int128_t v24 = __asm_movaps_1663(v22); // bp-124
    if (g4 >= g7) {
        // 0x78177
        g6 = v1;
        return g4;
    }
    int128_t v25 = __asm_movaps(*(int128_t *)(g4 + 16)); // 0x781f0
    int128_t v26 = __asm_movaps(*(int128_t *)g4); // 0x781f4
    int128_t v27 = __asm_movaps(v25); // 0x781f7
    int128_t v28 = __asm_movaps(*(int128_t *)(g4 + 32)); // 0x781fa
    g4 += 48;
    int128_t v29 = __asm_mulps(v27, v8); // 0x78201
    int128_t v30 = __asm_movaps(v26); // 0x78204
    int128_t v31 = __asm_movaps(v12); // 0x78207
    int128_t v32 = __asm_mulps(v30, v7); // 0x7820b
    int128_t v33 = __asm_mulps(v31, v26); // 0x7820e
    int128_t v34 = __asm_mulps(v26, v23); // 0x78211
    int128_t v35 = __asm_addps(v32, v29); // 0x78215
    int128_t v36 = __asm_movaps(v10); // 0x78218
    int128_t v37 = __asm_addps(__asm_mulps(v36, v28), v35); // 0x7821f
    int128_t v38 = __asm_mulps(__asm_movaps(v15), v25); // 0x78226
    int128_t v39 = __asm_mulps(v25, v21); // 0x78229
    *(int128_t *)g9 = (int128_t)__asm_movaps_1663(v37);
    int128_t v40 = __asm_addps(v33, v38); // 0x78230
    int128_t v41 = __asm_movaps(v17); // 0x78233
    int128_t v42 = __asm_addps(v34, v39); // 0x78237
    int128_t v43 = __asm_mulps(v41, v28); // 0x7823a
    int128_t v44 = __asm_mulps(v28, v24); // 0x7823d
    int128_t v45 = __asm_addps(v43, v40); // 0x78241
    int128_t v46 = __asm_addps(v44, v42); // 0x78244
    *(int128_t *)(g9 + 16) = (int128_t)__asm_movaps_1663(v45);
    int32_t v47 = __asm_movaps_1663(v46); // 0x7824b
    int32_t v48 = g9; // 0x7824b
    *(int128_t *)(v48 + 32) = (int128_t)v47;
    g9 = v48 + 48;
    uint32_t result2 = g4; // 0x78252
    while (g7 > result2) {
        // 0x781f0
        v25 = __asm_movaps(*(int128_t *)(result2 + 16));
        v26 = __asm_movaps(*(int128_t *)g4);
        v27 = __asm_movaps(v25);
        v28 = __asm_movaps(*(int128_t *)(g4 + 32));
        g4 += 48;
        v29 = __asm_mulps(v27, v8);
        v30 = __asm_movaps(v26);
        v31 = __asm_movaps(v12);
        v32 = __asm_mulps(v30, v7);
        v33 = __asm_mulps(v31, v26);
        v34 = __asm_mulps(v26, v23);
        v35 = __asm_addps(v32, v29);
        v36 = __asm_movaps(v10);
        v37 = __asm_addps(__asm_mulps(v36, v28), v35);
        v38 = __asm_mulps(__asm_movaps(v15), v25);
        v39 = __asm_mulps(v25, v21);
        *(int128_t *)g9 = (int128_t)__asm_movaps_1663(v37);
        v40 = __asm_addps(v33, v38);
        v41 = __asm_movaps(v17);
        v42 = __asm_addps(v34, v39);
        v43 = __asm_mulps(v41, v28);
        v44 = __asm_mulps(v28, v24);
        v45 = __asm_addps(v43, v40);
        v46 = __asm_addps(v44, v42);
        *(int128_t *)(g9 + 16) = (int128_t)__asm_movaps_1663(v45);
        v47 = __asm_movaps_1663(v46);
        v48 = g9;
        *(int128_t *)(v48 + 32) = (int128_t)v47;
        g9 = v48 + 48;
        result2 = g4;
    }
    // 0x78256
    g6 = v1;
    return result2;
}

// Address range: 0x78286 - 0x7829c
float80_t function_78286(void) {
    // 0x78286
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x78286
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x78289
    *(int32_t *)(v1 - 20) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    return (float80_t)*(float32_t *)(v1 - 20);
}

// Address range: 0x782c6 - 0x782dc
float80_t function_782c6(void) {
    // 0x782c6
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x782c6
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x782c9
    *(int32_t *)(v1 - 20) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    return (float80_t)*(float32_t *)(v1 - 20);
}

// Address range: 0x782e0 - 0x78382
int32_t function_782e0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g6; // bp-16
    g2 = &v1 < (int32_t *)108;
    g882 = &v1 == (int32_t *)108;
    g10 = a4;
    __asm_ucomiss(__asm_movss(a1), 0x40400000);
    if (!g2 && !g882) {
        // bb
        g4 = function_786e8();
    }
    int128_t v2 = __asm_movss(0x3f800000); // 0x782fe
    int128_t v3 = __asm_movaps(v2); // 0x78306
    int32_t v4 = __asm_movss_1646(v2); // 0x78309
    int128_t v5 = __asm_divss_1666(v3, a1); // 0x7830e
    int128_t v6 = __asm_unpcklps(v5, v5); // 0x78313
    __asm_movsd(__asm_cvtps2pd(v6));
    __asm_ucomiss(__asm_xorps(v2, v2), a3);
    int128_t v7 = __asm_mulss_1654(v6, a2); // 0x78325
    if (g2) {
        // bb40
        g4 = function_78692();
    }
    int128_t v8 = __asm_movss(a3); // 0x78330
    int128_t v9 = __asm_movss(0x3e000000); // 0x78335
    __asm_ucomiss(v8, v4);
    __asm_movss_1646(v9);
    int32_t v10 = (int32_t)!((g2 | g882)) | g4 & -256; // 0x78346
    g4 = v10;
    g8 = v10;
    int128_t v11 = __asm_unpcklps(v7, v7); // 0x7834b
    g6 = 0;
    int32_t v12 = __asm_movsd(__asm_cvtps2pd(v11)); // 0x78353
    __asm_movsd(__asm_movsd_1649((int64_t)v12));
    int128_t v13 = __asm_divss_1666(__asm_cvtsi2ss(0), 0x437f0000); // 0x7836f
    int128_t v14 = __asm_unpcklps(v13, v13); // 0x78377
    __asm_movsd(__asm_cvtps2pd(v14));
    return g4;
}

// Address range: 0x78386 - 0x783c9
int32_t function_78386(void) {
    uint32_t v1 = g7; // 0x78386
    uint32_t v2 = v1 / 256; // 0x78388
    unsigned char v3 = (char)v1 % 32; // 0x78388
    bool v4; // of
    bool v5; // 0x78395
    if (v3 == 0) {
        // 0x78386
        v5 = v4;
    } else {
        // bb
        bool v6; // cf
        char v7 = v6; // 0x78388
        g7 = 256 * (int32_t)((int16_t)v2 << (int16_t)(9 - v3) | (int16_t)((char)v2 >> v3) | (int16_t)(v7 << 8 - v3)) | v1 & -0xff01;
        bool v8 = v3 == 1 ? (char)(v1 / 0x8000) % 2 != v7 : v4; // 0x78388
        v5 = v8;
    }
    // bb235
    g5 = v1;
    int32_t v9 = g4 & -256; // 0x7838b
    g4 = v9 | (int32_t)*(char *)0x45100ff2;
    int32_t v10 = (int32_t)*(char *)0x5590ff2 | v9; // 0x78390
    g4 = v10;
    int32_t v11; // 0x78395
    if (v5) {
        // bb236
        v11 = function_78416();
        g4 = v11;
    } else {
        v11 = v10;
    }
    char * v12 = (char *)v11; // 0x78397
    *v12 = *v12 | (char)v11;
    int128_t v13; // xmm0
    int32_t v14 = __asm_cvttsd2si(v13); // 0x78399
    g4 = v14;
    int32_t v15; // 0x783ae
    if (v14 < 0) {
        // 0x78397
        v15 = g9;
    } else {
        int32_t v16 = v14 - (int32_t)&g862; // 0x783a1
        int32_t v17 = v16 == 0 | v16 < 0 != ((v16 ^ v14) & (v14 ^ (int32_t)&g862)) < 0 ? v14 : -1; // 0x783ab
        g9 = v17;
        v15 = v17;
    }
    // 0x783ae
    *(char *)(g6 + (int32_t)&g774) = (char)v15;
    g6 = g6 + 1 & -0x10000;
    g879 = __asm_movss(*(int32_t *)(g5 - 72));
    int32_t result = function_7843c(); // 0x783c7
    g4 = result;
    return result;
}

// Address range: 0x783d0 - 0x783dc
int32_t function_783d0(void) {
    // 0x783d0
    g878 = __asm_mulss_1654(__asm_divss(g878, g879), 0x3e000000);
    return g4;
}

// Address range: 0x783dc - 0x783f7
int32_t function_783dc(void) {
    int128_t v1 = __asm_movsd_1649(*(int64_t *)(g5 - 48)); // 0x783dc
    int128_t v2 = __asm_unpcklps(g878, g878); // 0x783e1
    __asm_movsd(__asm_cvtps2pd(v2));
    __asm_movsd(v1);
    *(int32_t *)(g5 - 88) = __asm_movss_1646(g879);
    return g4;
}

// Address range: 0x78416 - 0x7843c
int32_t function_78416(void) {
    // 0x78416
    *(char *)g8 = -1;
    int32_t v1 = g4; // 0x7841b
    *(char *)v1 = (char)v1 + *(char *)&g4;
    int32_t v2 = g4; // 0x7841d
    int32_t v3 = v2 - (int32_t)"GNU"; // 0x7841d
    g9 = (int32_t)&g862;
    int32_t v4 = v3 < 0 == ((v3 ^ v2) & (v2 ^ (int32_t)"GNU")) < 0 ? (int32_t)&g862 : v2; // 0x78427
    g4 = v4;
    *(int32_t *)(4 * g6 + (int32_t)&g775) = v4;
    g6++;
    return g4;
}

// Address range: 0x7843c - 0x784a1
int32_t function_7843c(void) {
    int32_t v1 = g8; // 0x78440
    g4 = v1;
    int128_t v2 = __asm_divsd_1660(__asm_cvtsi2sd(g6), 0x408ff80000000000); // 0x78444
    int128_t v3 = __asm_cvtpd2ps(__asm_unpcklpd(v2, v2)); // 0x78450
    g878 = v3;
    int128_t v4; // 0x78456
    if ((char)v1 != 0) {
        // 0x78456
        v4 = __asm_mulss_1654(v3, *(int32_t *)(g5 + 16));
        g878 = v4;
    } else {
        v4 = v3;
    }
    // 0x7845b
    __asm_ucomiss_1648(g879, v4);
    // bb
    g4 = function_783d0();
    int128_t v5 = __asm_movsd_1649(*(int64_t *)&g176); // 0x78464
    int128_t v6 = __asm_subss(g878, g879); // 0x7846c
    int128_t v7 = __asm_unpcklps(g879, g879); // 0x78470
    g879 = v7;
    int128_t v8 = __asm_subsd(v5, __asm_cvtps2pd(v7)); // 0x78476
    int128_t v9 = __asm_unpcklps(v6, v6); // 0x7847a
    int128_t v10 = __asm_divsd(__asm_cvtps2pd(v9), v8); // 0x78480
    int128_t v11 = __asm_addsd_1657(__asm_mulsd_1655(v10, 0x3fec000000000000), 0x3fc0000000000000); // 0x7848c
    g878 = __asm_cvtpd2ps(__asm_unpcklpd(v11, v11));
    int32_t result = function_783dc(); // 0x7849c
    g4 = result;
    return result;
}

// Address range: 0x784a8 - 0x784af
int32_t function_784a8(void) {
    // 0x784a8
    g4 = 0;
    return 0;
}

// Address range: 0x784b0 - 0x784b1
int32_t function_784b0(void) {
    // 0x784b0
    return g4;
}

// Address range: 0x784be - 0x784c4
int32_t function_784be(void) {
    // 0x784be
    return g4;
}

// Address range: 0x78527 - 0x7852f
int32_t function_78527(void) {
    int32_t v1 = g4; // 0x78527
    int32_t v2 = v1 & -256; // 0x78527
    bool v3; // cf
    g4 = (int32_t)((char)v1 - (v3 ? -98 : -99)) | v2;
    int32_t result = (int32_t)*(char *)-0x7cfff460 | v2; // 0x78529
    g4 = result;
    return result;
}

// Address range: 0x78553 - 0x78554
int32_t function_78553(void) {
    // 0x78553
    return g4;
}

// Address range: 0x78581 - 0x78589
int32_t function_78581(void) {
    int32_t v1 = g4; // 0x78581
    int32_t v2 = v1 & -256; // 0x78581
    g4 = v1 + 157 & 255 | v2;
    int32_t result = (int32_t)*(char *)-0x7cfff45c | v2; // 0x78583
    g4 = result;
    return result;
}

// Address range: 0x785f0 - 0x785f1
int32_t function_785f0(void) {
    // 0x785f0
    return g4;
}

// Address range: 0x785f3 - 0x785f4
int32_t function_785f3(void) {
    // 0x785f3
    return g4;
}

// Address range: 0x78610 - 0x78692
int32_t function_78610(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x78610
    int32_t v1; // ebp
    int128_t v2 = __asm_movups(*(int128_t *)(v1 - 48)); // 0x78612
    float80_t v3; // st7
    *(float64_t *)(v1 - 56) = (float64_t)v3;
    int128_t v4 = __asm_movss(*(int32_t *)(v1 - 68)); // 0x78619
    int128_t v5 = __asm_movsd_1649(*(int64_t *)(v1 - 56)); // 0x7861e
    int128_t v6 = __asm_movss(0x3f800000); // 0x78623
    int128_t v7 = __asm_cvtpd2ps(v5); // 0x7862b
    int128_t v8 = __asm_mulss(v2, v7); // 0x7862f
    int128_t v9 = __asm_mulss_1654(v7, 0x437f0000); // 0x78633
    int128_t v10 = __asm_cmpnltss(v4, v8); // 0x7863b
    int128_t v11 = __asm_mulss_1654(v9, *(int32_t *)(v1 - 48)); // 0x78640
    int128_t v12 = __asm_andps(v8, v10); // 0x78645
    int128_t v13 = __asm_andnps(v10, v6); // 0x78648
    int32_t v14 = __asm_movss_1646(__asm_orps(v13, v12)); // 0x7864e
    *(int32_t *)(4 * g6 + (int32_t)&g773) = v14;
    *(int32_t *)(v1 - 100) = __asm_movss_1646(v11);
    float32_t v15 = *(float32_t *)(v1 - 100); // 0x7865c
    *(int32_t *)(v1 - 28) = (int32_t)v15;
    int32_t v16 = *(int32_t *)(v1 - 28); // 0x78662
    int32_t v17 = v16 - (int32_t)&g862; // 0x78665
    int32_t v18 = v17 < 0 == ((v17 ^ v16) & (v16 ^ (int32_t)&g862)) < 0 == (v17 != 0) ? g10 : v16; // 0x7866b
    g9 = v18;
    int32_t v19 = v18 >= 0 ? v18 : 0; // 0x78672
    g4 = v19;
    *(char *)(g6 + (int32_t)&g772) = (char)v19;
    int32_t v20 = g6 + 1; // 0x7867b
    g6 = v20;
    int32_t result; // 0x78684
    if (v20 != (int32_t)"deToUTF8") {
        // bb
        result = function_785f0();
        g4 = result;
    } else {
        // 0x78610
        result = g4;
    }
    // 0x7868a
    g6 = a1;
    g10 = a2;
    g8 = a3;
    return result;
}

// Address range: 0x78692 - 0x786e8
int32_t function_78692(void) {
    int128_t v1 = __asm_movss(*(int32_t *)(g5 + 16)); // 0x78692
    g8 = 1;
    int128_t v2 = __asm_movss(0x3d4ccccd); // 0x7869c
    __asm_ucomiss(v1, *(int32_t *)(g5 - 68));
    *(int32_t *)(g5 - 72) = __asm_movss_1646(v2);
    int128_t v3 = __asm_movaps(v1); // 0x786b3
    int128_t v4 = __asm_movsd_1649(0x3fc0000000000000); // 0x786b6
    g2 = false;
    g882 = true;
    g8 = 0;
    int128_t v5 = __asm_mulss(v3, v1); // 0x786c0
    int128_t v6 = __asm_cvtps2pd(__asm_unpcklps(v5, v5)); // 0x786c7
    int128_t v7 = __asm_subsd(v4, __asm_mulsd_1655(v6, 0x3fb3333333333333)); // 0x786d2
    int128_t v8 = __asm_unpcklpd(v7, v7); // 0x786d6
    *(int32_t *)(g5 - 72) = __asm_movss_1646(__asm_cvtpd2ps(v8));
    return g4;
}

// Address range: 0x786e8 - 0x7870f
int32_t function_786e8(void) {
    int128_t v1 = __asm_movsd_1649(0x3fd5555560000000); // 0x786e8
    int128_t v2 = __asm_movss(0x3f800000); // 0x786f0
    *(int64_t *)(g5 - 48) = (int64_t)__asm_movsd(v1);
    __asm_movss(0x3eaaaaab);
    *(int32_t *)(g5 - 68) = __asm_movss_1646(v2);
    return g4;
}

// Address range: 0x78710 - 0x7875d
float80_t function_78710(int32_t a1) {
    int128_t v1; // xmm0
    int128_t v2 = __asm_xorps(v1, v1); // 0x78711
    int128_t v3 = __asm_movss(a1); // 0x78719
    __asm_ucomiss_1648(v2, v3);
    if (g11 >= 25) {
        // 0x78753
        return __asm_movss_1646(v2);
    }
    // 0x78723
    __asm_ucomiss(v3, 0x3f733333);
    int128_t v4 = __asm_movss(0x3f800000); // 0x7872a
    int128_t v5; // 0x78753
    if (g11 < 24) {
        int32_t v6 = __asm_movss_1646(__asm_mulss_1654(v3, 0x437f0000)); // 0x7873c
        g4 = v6;
        v5 = __asm_movss(*(int32_t *)(4 * v6 + (int32_t)&g777));
    } else {
        v5 = v4;
    }
    // 0x78753
    return __asm_movss_1646(v5);
}

// Address range: 0x78760 - 0x787a9
float80_t function_78760(int32_t a1) {
    // 0x78760
    int128_t v1; // xmm0
    int128_t v2 = v1; // 0x78761
    v1 = __asm_xorps(v2, v2);
    int128_t v3 = __asm_movss(a1); // 0x78769
    __asm_ucomiss_1648(v1, v3);
    if (g11 >= 25) {
        // 0x7879f
        return __asm_movss_1646(v1);
    }
    int128_t v4 = __asm_movss(0x3f800000); // 0x78773
    v1 = v4;
    __asm_ucomiss_1648(v3, v4);
    if (g11 < 24 || g11 == 24) {
        int32_t v5 = __asm_movss_1646(__asm_mulss_1654(v3, 0x437f0000)); // 0x78788
        g4 = v5;
        int32_t v6 = *(int32_t *)(4 * v5 + (int32_t)&g776); // 0x78796
        v1 = __asm_movss(v6);
    }
    // 0x7879f
    return __asm_movss_1646(v1);
}

// Address range: 0x787b0 - 0x787b1
int32_t function_787b0(int32_t a1) {
    // 0x787b0
    return g4;
}

// Address range: 0x7880b - 0x78821
float80_t function_7880b(void) {
    // 0x7880b
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x7880b
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x7880e
    *(int32_t *)(v1 - 20) = __asm_movss_1646(__asm_cvtpd2ps(v4));
    return (float80_t)*(float32_t *)(v1 - 20);
}

// Address range: 0x78821 - 0x7882e
int32_t function_78821(void) {
    // 0x78821
    int128_t v1; // xmm1
    __asm_divss_1666(__asm_movaps(v1), 0x414eb852);
    return g4;
}

// Address range: 0x7887f - 0x788a9
float80_t function_7887f(void) {
    // 0x7887f
    int32_t v1; // ebp
    int32_t v2 = v1 - 16; // 0x7887f
    float80_t v3; // st7
    *(float64_t *)v2 = (float64_t)v3;
    int128_t v4 = __asm_movsd_1649(*(int64_t *)v2); // 0x78882
    int128_t v5 = __asm_subsd_1656(__asm_mulsd_1655(v4, 0x3ff0e147a0000000), 0x3fac28f5c0000000); // 0x7888f
    int128_t v6 = __asm_unpcklpd(v5, v5); // 0x78897
    *(int32_t *)(v1 - 20) = __asm_movss_1646(__asm_cvtpd2ps(v6));
    return (float80_t)*(float32_t *)(v1 - 20);
}

// Address range: 0x788a9 - 0x788b7
int32_t function_788a9(void) {
    // 0x788a9
    int128_t v1; // xmm1
    __asm_mulss(__asm_movss(0x414eb852), v1);
    return g4;
}

// Address range: 0x788c0 - 0x78a49
float80_t function_788c0(int32_t a1) {
    int128_t v1; // xmm1
    int128_t v2 = __asm_xorps(v1, v1); // 0x788c1
    bool v3 = g11 < 40; // cf
    bool v4 = g11 == 40; // zf
    int128_t v5 = __asm_movss(a1); // 0x788c9
    int128_t v6 = v5; // xmm0
    __asm_ucomiss_1648(v2, v5);
    int128_t v7;
    int32_t v8;
    int128_t v9; // 0x78953
    int128_t v10; // 0x789c6
    int128_t v11; // 0x788d7
    int32_t v12;
    if (g11 < 41) {
        // 0x788d7
        v11 = __asm_movss(0x3f800000);
        __asm_ucomiss_1648(v6, v11);
        if (v3 || v4) {
            // 0x788e4
            __asm_ucomiss_1648(__asm_movss(0x3ec0c0c1), v6);
            if (v3 || v4) {
                // 0x788f5
                __asm_ucomiss_1648(__asm_movss(0x3f40c0c1), v6);
                int128_t v13 = v6;
                if (v3 || v4) {
                    v9 = v13;
                    goto lab_0x78953;
                } else {
                    int128_t v14 = __asm_mulss_1654(v13, 0x447f0000); // 0x78902
                    int128_t v15 = __asm_movss(0x3b800000); // 0x7890a
                    int128_t v16 = __asm_subss_1651(v14, 0x43800000); // 0x78912
                    v6 = v16;
                    int128_t v17 = __asm_mulss(v15, v16); // 0x7891a
                    v12 = __asm_movsd(__asm_cvtps2pd(__asm_unpcklps(v17, v17)));
                    goto lab_0x7899a;
                }
            } else {
                // 0x78a00
                __asm_ucomiss_1648(__asm_movss(0x3e808081), v6);
                int128_t v18 = v6; // 0x78a0d
                if (v3 || v4) {
                    int128_t v19 = __asm_mulss_1654(v18, 0x43ff0000); // 0x78a0d
                    int128_t v20 = __asm_movss(0x3b000000); // 0x78a15
                    int128_t v21 = __asm_subss_1651(v19, 0x42800000); // 0x78a1d
                    v6 = v21;
                    v7 = __asm_mulss(v20, v21);
                    goto lab_0x7896f;
                } else {
                    int128_t v22 = __asm_mulss_1654(__asm_mulss_1654(v18, 0x437f0000), 0x3a802008); // 0x78a36
                    v6 = v22;
                    __asm_ucomiss_1648(v2, v22);
                    v8 = (int32_t)!((v3 | v4)) | g4 & -256;
                    goto lab_0x789c2;
                }
            }
        } else {
            // 0x78950
            v9 = __asm_movaps(v11);
            goto lab_0x78953;
        }
    } else {
        // 0x789e0
        v6 = __asm_movaps(v2);
        v10 = __asm_movss(0x3f800000);
        goto lab_0x789c6;
    }
  lab_0x789c6:;
    int128_t v23 = __asm_movaps(__asm_minss(v10, v6)); // 0x789ca
    return __asm_movss_1646(v23);
  lab_0x78953:;
    int128_t v24 = __asm_mulss_1654(v9, 0x44ff0000); // 0x78953
    int128_t v25 = __asm_movss(0x3c000000); // 0x7895b
    int128_t v26 = __asm_subss_1651(v24, 0x44800000); // 0x78963
    v6 = v26;
    v7 = __asm_mulss(v25, v26);
    goto lab_0x7896f;
  lab_0x7896f:
    // 0x7896f
    v12 = __asm_movsd(__asm_cvtps2pd(__asm_unpcklps(v7, v7)));
    goto lab_0x7899a;
  lab_0x7899a:;
    // 0x7899a
    int32_t * v27;
    int32_t v28 = (int32_t)v27 & (int32_t)&g854 & 0xffff | (int32_t)&g93; // 0x78938
    g4 = v28;
    float80_t v29 = llvm_round_f80((float80_t)(float64_t)(int64_t)v12); // 0x78944
    int128_t v30 = v6; // 0x7899d
    int128_t v31 = __asm_cvtps2pd(__asm_unpcklps(v30, v30)); // 0x789a0
    int128_t v32 = __asm_addsd(v31, __asm_movsd_1649((int64_t)(float64_t)v29)); // 0x789a8
    int128_t v33 = __asm_unpcklpd(v32, v32); // 0x789ac
    int128_t v34 = __asm_mulss_1654(__asm_cvtpd2ps(v33), 0x3a802008); // 0x789b4
    v6 = v34;
    __asm_ucomiss_1648(v2, v34);
    v8 = (int32_t)!((false | v28 == 0)) | g4 & -256;
    goto lab_0x789c2;
  lab_0x789c2:
    // 0x789c2
    g4 = v8;
    if ((char)v8 != 0) {
        int128_t v35 = __asm_movaps(v2); // 0x789f0
        return __asm_movss_1646(v35);
    }
    // 0x789c2
    v10 = v11;
    goto lab_0x789c6;
}

// Address range: 0x78a50 - 0x78b4e
float80_t function_78a50(float80_t a1) {
    int128_t v1 = __asm_xorps(g880, g880); // 0x78a51
    bool v2 = g11 < 4; // cf
    bool v3 = g11 == 4; // zf
    int128_t v4 = __asm_movss((int32_t)(float32_t)a1); // 0x78a59
    __asm_ucomiss_1648(v1, v4);
    int128_t v5 = __asm_movss(0x3f800000); // 0x78a63
    int128_t v6 = v5; // xmm3
    int128_t v7; // 0x78acb
    if (g11 < 5) {
        // 0x78a63
        __asm_ucomiss_1648(v4, v5);
        int128_t v8 = __asm_movaps(v6); // 0x78a6e
        if (!v2 && !v3) {
            // 0x78ab2
            return __asm_movss_1646(v8);
        }
        // 0x78a73
        __asm_ucomiss_1648(__asm_movss(0x2008), v4);
        int32_t v9; // 0x78afc
        int128_t v10; // xmm0
        if (v2 || v3) {
            // 0x78a84
            __asm_ucomiss_1648(__asm_movss(0x2008), v4);
            if (v2 || v3) {
                int128_t v11 = __asm_movss(0x6061); // 0x78ae0
                int128_t v12 = __asm_addss(__asm_mulss(v11, v4), 0x3f008081); // 0x78aec
                v10 = v12;
                __asm_ucomiss_1648(v12, v6);
                if (!v2 && !v3) {
                    int128_t v13 = __asm_movaps(v6); // 0x78b33
                    // 0x78ab2
                    return __asm_movss_1646(v13);
                }
                // 0x78af9
                __asm_ucomiss_1648(v1, v10);
                v9 = (int32_t)!((v2 | v3)) | g4 & -256;
                g4 = v9;
            } else {
                int128_t v14 = __asm_movss(0x3f806061); // 0x78a91
                int128_t v15 = __asm_addss(__asm_mulss(v14, v4), 0x3e808081); // 0x78a9d
                v10 = v15;
                __asm_ucomiss_1648(v1, v15);
                int32_t v16 = (int32_t)!((v2 | v3)) | g4 & -256; // 0x78aa8
                g4 = v16;
                v9 = v16;
            }
        } else {
            // 0x78b08
            __asm_ucomiss_1648(__asm_movss(0x3d802008), v4);
            int128_t v17 = __asm_movaps(v4); // 0x78b13
            if (v2 || v3) {
                int128_t v18 = __asm_addss(__asm_mulss_1654(v17, 0x6061), 0x3e008081); // 0x78b20
                v10 = v18;
                __asm_ucomiss_1648(v1, v18);
                int32_t v19 = (int32_t)!((v2 | v3)) | g4 & -256; // 0x78b2b
                g4 = v19;
                v9 = v19;
            } else {
                int128_t v20 = __asm_mulss_1654(v17, 0x40806061); // 0x78b3b
                v10 = v20;
                __asm_ucomiss_1648(v1, v20);
                int32_t v21 = (int32_t)!((v2 | v3)) | g4 & -256; // 0x78b46
                g4 = v21;
                v9 = v21;
            }
        }
        // 0x78aab
        if ((char)v9 != 0) {
            int128_t v22 = __asm_movaps(v1); // 0x78aaf
            // 0x78ab2
            return __asm_movss_1646(v22);
        }
        // 0x78aab
        v7 = v10;
    } else {
        // 0x78ac0
        v7 = __asm_movaps(v1);
    }
    int128_t v23 = __asm_movaps(__asm_minss(v6, v7)); // 0x78acf
    return __asm_movss_1646(v23);
}

// Address range: 0x78b50 - 0x78b6a
int32_t function_78b50(int32_t a1) {
    g4 = a1;
    g4 = function_787b0(a1);
    int3_t v1; // fpu_stat_TOP
    g13 = v1 + 1;
    int32_t v2; // ebp
    g5 = v2;
    float80_t v3; // st7
    float80_t v4 = function_78a50(v3); // 0x78b65
    g4 = (float32_t)v4;
    return (float32_t)v4;
}

// Address range: 0x78b70 - 0x78b92
int32_t function_78b70(int32_t result) {
    // 0x78b70
    g4 = result;
    if (result < 0) {
        // 0x78b90
        return result;
    }
    // 0x78b7c
    if ((int16_t *)result <= (int16_t *)&g862) {
        // branch -> 0x78b90
    }
    // 0x78b90
    return result;
}

// Address range: 0x78ba0 - 0x78bdb
int32_t function_78ba0(int32_t a1) {
    int128_t v1 = __asm_movss(0x447fc000); // 0x78ba1
    int32_t v2 = __asm_cvttss2si_1647(__asm_mulss_1654(v1, a1)); // 0x78bb0
    g4 = v2;
    if (v2 < 0) {
        int32_t result = g778; // 0x78bd3
        g4 = result;
        return result;
    }
    int32_t v3 = v2 - (int32_t)&g93; // 0x78bb8
    g9 = &g91;
    int32_t v4 = v3 < 0 == ((v3 ^ v2) & (v2 ^ (int32_t)&g93)) < 0 ? (int32_t)&g91 : v2; // 0x78bc3
    g4 = v4;
    int32_t result2 = *(int32_t *)(4 * v4 + (int32_t)&g778); // 0x78bc6
    g4 = result2;
    return result2;
}

// Address range: 0x78be0 - 0x78c1b
int32_t function_78be0(int32_t a1) {
    int128_t v1 = __asm_movss(0x447fc000); // 0x78be1
    int32_t v2 = __asm_cvttss2si_1647(__asm_mulss_1654(v1, a1)); // 0x78bf0
    g4 = v2;
    if (v2 < 0) {
        int32_t result = g775; // 0x78c13
        g4 = result;
        return result;
    }
    int32_t v3 = v2 - (int32_t)&g93; // 0x78bf8
    g9 = &g91;
    int32_t v4 = v3 < 0 == ((v3 ^ v2) & (v2 ^ (int32_t)&g93)) < 0 ? (int32_t)&g91 : v2; // 0x78c03
    g4 = v4;
    int32_t result2 = *(int32_t *)(4 * v4 + (int32_t)&g775); // 0x78c06
    g4 = result2;
    return result2;
}

// Address range: 0x78c20 - 0x78c8b
int32_t function_78c20(int32_t a1, int32_t a2) {
    int128_t v1 = __asm_movss(0x437f0000); // 0x78c21
    g4 = a1;
    g9 = a2;
    int32_t v2 = (int32_t)*(char *)a1; // 0x78c31
    g7 = v2;
    int128_t v3 = __asm_cvtsi2ss(v2); // 0x78c34
    int32_t v4 = (int32_t)*(char *)(g4 + 3); // 0x78c38
    g7 = v4;
    int32_t v5 = *(int32_t *)(4 * v4 + (int32_t)&g307); // 0x78c3c
    int128_t v6 = __asm_mulss_1654(v3, v5); // 0x78c3c
    *(int32_t *)g9 = __asm_movss_1646(__asm_mulss(v6, v1));
    int32_t v7 = (int32_t)*(char *)(g4 + 1); // 0x78c4d
    g7 = v7;
    int128_t v8 = __asm_cvtsi2ss(v7); // 0x78c51
    int32_t v9 = (int32_t)*(char *)(g4 + 3); // 0x78c55
    g7 = v9;
    int32_t v10 = *(int32_t *)(4 * v9 + (int32_t)&g307); // 0x78c59
    int128_t v11 = __asm_mulss_1654(v8, v10); // 0x78c59
    *(int32_t *)(g9 + 4) = __asm_movss_1646(__asm_mulss(v11, v1));
    int32_t v12 = g4; // 0x78c6b
    int32_t v13 = (int32_t)*(char *)(v12 + 2); // 0x78c6b
    g7 = v13;
    g4 = (int32_t)*(char *)(v12 + 3);
    int128_t v14 = __asm_cvtsi2ss(v13); // 0x78c73
    int32_t v15 = *(int32_t *)(4 * g4 + (int32_t)&g307); // 0x78c77
    int128_t v16 = __asm_mulss_1654(v14, v15); // 0x78c77
    *(int32_t *)(g9 + 8) = __asm_movss_1646(__asm_mulss(v16, v1));
    return g4;
}

// Address range: 0x78c90 - 0x78d27
int32_t function_78c90(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x78c93
    g4 = a1;
    g9 = a2;
    int128_t v2 = __asm_movss(*(int32_t *)a1); // 0x78c9a
    int32_t v3 = g4; // 0x78c9e
    g7 = v3 + 8;
    int128_t v4 = __asm_movss(*(int32_t *)(v3 + 4)); // 0x78ca1
    int128_t v5 = __asm_movss(*(int32_t *)(g4 + 8)); // 0x78ca6
    __asm_ucomiss_1648(v2, v4);
    bool v6; // cf
    bool v7; // pf
    int128_t v8; // xmm0
    bool v9; // zf
    if (v6 || v9) {
        uint32_t v10 = g4; // 0x78d08
        int32_t v11 = v10 + 4; // 0x78d08
        v9 = v11 == 0;
        v7 = llvm_ctpop_i8((char)v11) % 2 == 0;
        g4 = v11;
        __asm_ucomiss_1648(v4, v5);
        int128_t v12 = __asm_xorps(v8, v8); // 0x78d0e
        int32_t v13 = !((v10 > 0xfffffffb | v9)) ? g4 : g7; // 0x78d11
        g7 = v13;
        __asm_ucomiss(v12, *(int32_t *)v13);
        if (v7) {
            goto lab_0x78cbe;
        } else {
            goto lab_0x78d19;
        }
    } else {
        // 0x78cb0
        __asm_ucomiss_1648(v2, v5);
        int128_t v14 = __asm_xorps(v8, v8); // 0x78cb3
        int32_t v15 = !((v6 | v9)) ? g4 : g7; // 0x78cb6
        g7 = v15;
        __asm_ucomiss(v14, *(int32_t *)v15);
        if (!v7) {
            goto lab_0x78d19;
        } else {
            goto lab_0x78cbe;
        }
    }
  lab_0x78cbe:;
    uint32_t v16 = *(int32_t *)g7 / 0x800000 % 256; // 0x78cc5
    g6 = v16 - 134;
    int32_t v17 = 0x800000 * (261 - v16); // 0x78cd5
    g4 = v17;
    goto lab_0x78cd8;
  lab_0x78d19:
    // 0x78d19
    g6 = 0;
    g4 = 0x3f800000;
    if (!v9) {
        goto lab_0x78cbe;
    } else {
        v17 = 0x3f800000;
        goto lab_0x78cd8;
    }
  lab_0x78cd8:;
    int128_t v18 = __asm_movd(v17); // 0x78cd8
    *(char *)(g9 + 3) = (char)g6;
    int128_t v19 = __asm_mulss(v2, v18); // 0x78cdf
    int128_t v20 = __asm_mulss(v4, v18); // 0x78ce3
    int128_t v21 = __asm_mulss(v18, v5); // 0x78ce7
    int32_t v22 = __asm_cvttss2si_1647(v19); // 0x78ceb
    g4 = v22;
    *(char *)g9 = (char)v22;
    int32_t v23 = __asm_cvttss2si_1647(v20); // 0x78cf1
    g4 = v23;
    *(char *)(g9 + 1) = (char)v23;
    int32_t v24 = __asm_cvttss2si_1647(v21); // 0x78cf8
    g4 = v24;
    *(char *)(g9 + 2) = (char)v24;
    g6 = v1;
    return g4;
}

// Address range: 0x78d30 - 0x78d8e
int32_t function_78d30(int32_t * a1, int32_t a2) {
    // 0x78d30
    g4 = g451;
    if (g451 != 0) {
        // 0x78d3f
        if (g788 == 0) {
            // 0x78d80
            g4 = function_78dd0(g5);
            g788 = 1;
        }
    }
    // 0x78d48
    g4 = g453;
    if (g453 == 0 || g789 != 0) {
        // 0x78d5a
        return g453;
    }
    // 0x78d60
    g9 = *(int32_t *)g453;
    g789 = 1;
    int32_t result = function_78e10(g453, &g787); // 0x78d78
    g4 = result;
    return result;
}

// Address range: 0x78d90 - 0x78dc9
int32_t function_78d90(void) {
    // 0x78d90
    g4 = g453;
    if (g453 == 0 || g789 == 0) {
        // 0x78da8
        return g453;
    }
    // 0x78db0
    g9 = *(int32_t *)g453;
    g789 = 0;
    return g453;
}

// Address range: 0x78dd0 - 0x78e03
int32_t function_78dd0(int32_t a1) {
    int32_t v1 = g6; // 0x78dd3
    g6 = 0;
    for (int32_t i = 0; i < 5; i++) {
        // 0x78dd9
        g4 = g451;
        g7 = *(int32_t *)(4 * i + (int32_t)&g806);
        g9 = *(int32_t *)g451;
        g6 = i + 1;
    }
    // 0x78dfd
    g6 = v1;
    return g451;
}

// Address range: 0x78e10 - 0x78e46
int32_t function_78e10(int32_t a1, int32_t * a2) {
    int32_t v1 = g6; // 0x78e13
    g6 = g815;
    if (g815 == 0) {
        // 0x78e40
        g6 = v1;
        return g4;
    }
    // 0x78e28
    g4 = g453;
    g9 = *(int32_t *)g453;
    int32_t v2 = *(int32_t *)(g815 + 12); // 0x78e39
    g6 = v2;
    while (v2 != 0) {
        // 0x78e28
        g4 = g453;
        g9 = *(int32_t *)g453;
        v2 += 12;
        g6 = v2;
    }
    // 0x78e40
    g6 = v1;
    return g453;
}

// Address range: 0x78e50 - 0x78e8d
int32_t function_78e50(int32_t a1) {
    int32_t v1 = g6; // 0x78e53
    g6 = a1;
    int32_t * v2 = (int32_t *)(a1 + 8); // 0x78e5a
    int32_t result = *v2; // 0x78e5a
    g4 = result;
    if (result != 0) {
        // 0x78e61
        g6 = v1;
        return result;
    }
    // 0x78e70
    g4 = g453;
    g7 = *(int32_t *)(a1 + 4);
    g9 = *(int32_t *)g453;
    *v2 = g453;
    g6 = v1;
    return g4;
}

// Address range: 0x78e90 - 0x78feb
int32_t function_78e90(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x78e93
    int32_t v2 = g10; // 0x78e94
    g9 = a2;
    g8 = a4;
    g4 = a1;
    g10 = a4;
    int32_t v3;
    int32_t v4; // 0x78ec0
    int32_t v5; // 0x78ec5
    if (a2 < 0) {
        // 0x78ec0
        v4 = -a1;
        g4 = v4;
        v5 = -(((int32_t)(a1 != 0) + a2));
        g9 = v5;
        v3 = -1;
    } else {
        v4 = a1;
        v5 = a2;
        v3 = 0;
    }
    int32_t v6;
    int32_t v7; // 0x78ee1
    int32_t v8; // 0x78ee6
    if (a4 < 0) {
        // 0x78ed8
        v7 = -a3;
        g4 = v7;
        v8 = -(((int32_t)(a3 != 0) + a4));
        g9 = v8;
        g10 = v8;
        v6 = -1 - v3;
    } else {
        v8 = a4;
        v7 = a3;
        v6 = v3;
    }
    // 0x78eed
    g8 = v7;
    int32_t v9; // 0x78fdd
    int32_t v10; // 0x78fdf
    int32_t v11; // 0x78fa4
    if (v8 != 0) {
        // 0x78f33
        g7 = 0;
        if (v5 < v8) {
            goto lab_0x78fcd;
        } else {
            int32_t v12 = llvm_ctlz_i32(v8, true); // 0x78f3e
            g7 = v12;
            if (v12 != 0) {
                // 0x78f5f
                g7 = v12;
                g9 = v8;
                g10 = v7;
                int32_t v13 = 32 - v12; // 0x78f6c
                g8 = v13;
                g4 = v7;
                uint32_t v14 = v12 & (int32_t)&g862 & 31; // 0x78f72
                int32_t v15; // 0x78f72
                if (v14 != 0) {
                    // bb
                    v15 = v8 << v14;
                    g9 = v15;
                } else {
                    v15 = v8;
                }
                // bb48
                g7 = v13;
                uint32_t v16 = v13 & (int32_t)&g862 & 31; // 0x78f76
                int32_t v17; // 0x78f76
                if (v16 != 0) {
                    // bb49
                    v17 = v7 >> v16;
                    g10 = v17;
                } else {
                    v17 = v7;
                }
                // bb50
                g7 = v12;
                int32_t v18 = v17 | v15; // 0x78f7b
                g10 = v18;
                g9 = v5;
                int32_t v19; // 0x78f80
                if (v14 != 0) {
                    // bb51
                    v19 = v7 << v14;
                    g4 = v19;
                } else {
                    v19 = v7;
                }
                // bb53
                g7 = v13;
                int32_t v20; // 0x78f8a
                if (v16 != 0) {
                    // bb54
                    v20 = v5 >> v16;
                } else {
                    v20 = v5;
                }
                // bb55
                g4 = v20;
                g7 = v12;
                g4 = v4;
                int32_t v21; // 0x78f95
                if (v14 != 0) {
                    // bb56
                    v21 = v5 << v14;
                    g9 = v21;
                } else {
                    v21 = v5;
                }
                // bb58
                g7 = v13;
                int32_t v22; // 0x78f99
                if (v16 != 0) {
                    // bb59
                    v22 = v4 >> v16;
                    g4 = v22;
                } else {
                    v22 = v4;
                }
                int32_t v23 = v22 | v21; // 0x78f9d
                g8 = v23;
                uint64_t v24 = (int64_t)v23 | 0x100000000 * (int64_t)v20; // 0x78fa4
                uint64_t v25 = (int64_t)v18; // 0x78fa4
                uint64_t v26 = v24 / v25; // 0x78fa4
                v11 = v26;
                uint32_t v27 = (int32_t)(v24 % v25); // 0x78fa4
                g10 = v11;
                uint64_t v28 = (v26 & 0xffffffff) * (int64_t)v19; // 0x78fae
                int32_t v29 = v28; // 0x78fae
                int32_t v30 = v28 / 0x100000000; // 0x78fae
                g4 = v29;
                g9 = v30;
                if (v30 > v27) {
                    goto lab_0x78fc7;
                } else {
                    // 0x78fb6
                    g8 = v4;
                    g7 = v12;
                    int32_t v31; // 0x78fbc
                    if (v14 != 0) {
                        // bb61
                        v31 = v4 << v14;
                        g8 = v31;
                    } else {
                        v31 = v4;
                    }
                    if (v29 > v31) {
                        if (v30 != v27) {
                            goto lab_0x78fd1;
                        } else {
                            goto lab_0x78fc7;
                        }
                    } else {
                        goto lab_0x78fd1;
                    }
                }
            } else {
                // 0x78f49
                g8 = v7;
                g7 = 0;
                if (v4 >= v7) {
                    goto lab_0x78f58;
                } else {
                    if (v5 > v8) {
                        goto lab_0x78f58;
                    } else {
                        goto lab_0x78fcd;
                    }
                }
            }
        }
    } else {
        // 0x78ef4
        g4 = v5;
        if (v7 > v5) {
            uint64_t v32 = 0x100000000 * (int64_t)v5 | (int64_t)v4; // 0x78f02
            uint64_t v33 = (int64_t)v7; // 0x78f02
            int32_t v34 = v32 / v33; // 0x78f02
            g4 = v34;
            g9 = v32 % v33;
            g10 = v34;
            v11 = v34;
            goto lab_0x78fd1;
        } else {
            int32_t v35;
            if (v7 == 0) {
                // 0x78f0f
                v35 = v8 == 1;
                g4 = v35;
                g9 = v8 != 1;
                g8 = v35;
            } else {
                v35 = v7;
            }
            int32_t v36 = v5 / v35;
            g7 = v36;
            uint64_t v37 = 0x100000000 * (int64_t)(v5 % v35) | (int64_t)v4; // 0x78f2a
            uint64_t v38 = (int64_t)v35; // 0x78f2a
            int32_t v39 = v37 / v38; // 0x78f2a
            g4 = v39;
            g9 = v37 % v38;
            g10 = v39;
            v10 = v36;
            v9 = v39;
            goto lab_0x78fd3;
        }
    }
  lab_0x78fcd:
    // 0x78fcd
    g10 = 0;
    v10 = 0;
    v9 = 0;
    goto lab_0x78fd3;
  lab_0x78fd3:
    // 0x78fd3
    g4 = v9;
    g9 = v10;
    int32_t result; // 0x78fdd
    if (v6 != 0) {
        // 0x78fdd
        result = -v9;
        g4 = result;
        g9 = -(((int32_t)(v9 != 0) + v10));
    } else {
        result = v9;
    }
    // 0x78fe4
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x78fd1:
    // 0x78fd1
    g7 = 0;
    v10 = 0;
    v9 = v11;
    goto lab_0x78fd3;
  lab_0x78fc7:;
    int32_t v40 = v11 - 1; // 0x78fca
    g10 = v40;
    v11 = v40;
    goto lab_0x78fd1;
  lab_0x78f58:
    // 0x78f58
    g10 = 1;
    v10 = 0;
    v9 = 1;
    goto lab_0x78fd3;
}

// Address range: 0x78fec - 0x79174
int32_t function_78fec(int32_t a1, int32_t a2, int32_t * a3, int32_t a4) {
    int32_t v1 = (int32_t)a3;
    int32_t v2 = g8; // 0x78fef
    int32_t v3 = g10; // 0x78ff0
    g9 = a2;
    g10 = v1;
    g8 = a4;
    g4 = a1;
    int32_t v4;
    int32_t v5; // 0x7901d
    int32_t v6; // 0x79022
    if (a2 < 0) {
        // 0x7901d
        v5 = -a1;
        g4 = v5;
        v6 = -(((int32_t)(a1 != 0) + a2));
        g9 = v6;
        v4 = -1;
    } else {
        v5 = a1;
        v6 = a2;
        v4 = 0;
    }
    int32_t v7; // 0x7903b
    int32_t v8; // 0x79040
    if (a4 < 0) {
        // 0x79035
        v7 = -v1;
        g4 = v7;
        v8 = -(((int32_t)(a3 != NULL) + a4));
        g9 = v8;
        g8 = v8;
    } else {
        v8 = a4;
        v7 = v1;
    }
    // 0x79047
    g4 = v6;
    g7 = v7;
    g10 = v5;
    int32_t v9; // 0x79168
    int32_t v10; // 0x79117
    uint32_t v11; // 0x79111
    int32_t v12; // 0x79097
    uint32_t v13; // 0x790e9
    uint32_t v14; // 0x790e0
    uint32_t v15; // 0x790e4
    int32_t v16; // 0x790a5
    int32_t v17; // 0x790da
    int32_t v18; // 0x790f4
    int32_t v19; // 0x7911a
    int32_t v20; // 0x79117
    if (v8 != 0) {
        if (v6 < v8) {
            // 0x7908c
            g4 = v5;
            g9 = v6;
            v9 = v6;
            goto lab_0x79160;
        } else {
            // 0x79097
            v12 = llvm_ctlz_i32(v8, true);
            g7 = v12;
            if (v12 != 0) {
                // 0x790cd
                g7 = v12;
                g4 = v8;
                g10 = v7;
                v17 = 32 - v12;
                g8 = v17;
                g9 = v6;
                v14 = v12 & (int32_t)&g862 & 31;
                int32_t v21; // 0x790e0
                if (v14 != 0) {
                    // bb
                    v21 = v8 << v14;
                    g4 = v21;
                } else {
                    v21 = v8;
                }
                // bb56
                g7 = v17;
                v15 = v17 & (int32_t)&g862 & 31;
                int32_t v22; // 0x790e4
                if (v15 != 0) {
                    // bb57
                    v22 = v7 >> v15;
                    g10 = v22;
                } else {
                    v22 = v7;
                }
                // bb58
                g7 = v12;
                v13 = v22 | v21;
                g4 = v5;
                if (v14 != 0) {
                    // bb59
                    v18 = v7 << v14;
                } else {
                    v18 = v7;
                }
                // bb61
                g10 = v18;
                g7 = v17;
                int32_t v23; // 0x790f8
                if (v15 != 0) {
                    // bb62
                    v23 = v6 >> v15;
                    g9 = v23;
                } else {
                    v23 = v6;
                }
                // bb63
                g7 = v12;
                int32_t v24; // 0x79103
                if (v14 != 0) {
                    // bb64
                    v24 = v6 << v14;
                } else {
                    v24 = v6;
                }
                // bb66
                g10 = v24;
                g7 = v17;
                int32_t v25; // 0x79107
                if (v15 != 0) {
                    // bb67
                    v25 = v5 >> v15;
                    g4 = v25;
                } else {
                    v25 = v5;
                }
                // bb68
                g7 = v12;
                g10 = v5;
                uint64_t v26 = (int64_t)(v25 | v24) | 0x100000000 * (int64_t)v23; // 0x79111
                uint64_t v27 = (int64_t)v13; // 0x79111
                v11 = (int32_t)(v26 % v27);
                uint64_t v28 = (v26 / v27 & 0xffffffff) * (int64_t)v18; // 0x79117
                v20 = v28;
                v10 = v28 / 0x100000000;
                g4 = v20;
                g9 = v10;
                if (v14 != 0) {
                    // bb69
                    v19 = v5 << v14;
                    g10 = v19;
                } else {
                    v19 = v5;
                }
                // bb71
                g7 = v10;
                g10 = v20;
                if (v10 > v11) {
                    goto lab_0x79132;
                } else {
                    if (v20 > v19) {
                        if (v10 != v11) {
                            goto lab_0x7913c;
                        } else {
                            goto lab_0x79132;
                        }
                    } else {
                        goto lab_0x7913c;
                    }
                }
            } else {
                // 0x790a2
                g4 = v7;
                v16 = v5 - v7;
                if (v5 >= v7) {
                    goto lab_0x790af;
                } else {
                    if (v6 > v8) {
                        goto lab_0x790af;
                    } else {
                        goto lab_0x790c3;
                    }
                }
            }
        }
    } else {
        int32_t v29; // 0x7907c
        int32_t v30; // 0x7907c
        if (v7 > v6) {
            // 0x7905b
            g4 = v5;
            g10 = v6;
            g9 = v6;
            v30 = v6;
            v29 = v7;
        } else {
            int32_t v31;
            if (v7 == 0) {
                uint32_t v32 = v7 & -256 | 1; // 0x79068
                v31 = v32 / v8;
                g4 = v31;
                g9 = v32 % v8;
                g7 = v31;
            } else {
                v31 = v7;
            }
            int32_t v33 = v6 % v31;
            g9 = v33;
            g4 = v5;
            v30 = v33;
            v29 = v31;
        }
        int32_t v34 = (0x100000000 * (int64_t)v30 | (int64_t)v5) % (int64_t)v29; // 0x7907c
        g4 = v34;
        g9 = 0;
        v9 = 0;
        v5 = v34;
        goto lab_0x79160;
    }
  lab_0x79160:;
    int32_t result; // 0x79166
    if (v4 != 0) {
        // 0x79166
        result = -v5;
        g4 = result;
        g9 = -(((int32_t)(v5 != 0) + v9));
    } else {
        result = v5;
    }
    // 0x7916d
    g10 = v3;
    g8 = v2;
    return result;
  lab_0x79132:;
    int32_t v35 = v20 - v18; // 0x79136
    g10 = v35;
    int32_t v36 = v10 - ((int32_t)(v20 < v18) + v13); // 0x79139
    g7 = v36;
    v10 = v36;
    v20 = v35;
    goto lab_0x7913c;
  lab_0x790af:
    // 0x790af
    g10 = v16;
    int32_t v43 = v6 - ((int32_t)(v5 < v7) + v8); // 0x790be
    g4 = v43;
    v5 = v16;
    v6 = v43;
    goto lab_0x790c3;
  lab_0x7913c:;
    int32_t v37 = v19 - v20; // 0x79142
    g4 = v37;
    int32_t v38 = v11 - ((int32_t)(v19 < v20) + v10); // 0x79144
    g9 = v38;
    g7 = v10 & -256 | v12;
    int32_t v39; // 0x7914e
    if (v14 != 0) {
        // bb72
        v39 = v37 >> v14;
    } else {
        v39 = v37;
    }
    // bb73
    g10 = v39;
    g7 = v17;
    int32_t v40; // 0x79152
    if (v15 != 0) {
        // bb74
        v40 = v38 << v15;
        g9 = v40;
    } else {
        v40 = v38;
    }
    // bb76
    g7 = v12;
    int32_t v41 = v40 | v39; // 0x79159
    g4 = v41;
    g9 = v38;
    if (v14 != 0) {
        int32_t v42 = v38 >> v14; // 0x7915e
        g9 = v42;
        v9 = v42;
        v5 = v41;
    } else {
        v9 = v38;
        v5 = v41;
    }
    goto lab_0x79160;
  lab_0x790c3:
    // 0x790c3
    g4 = v5;
    g9 = v6;
    v9 = v6;
    goto lab_0x79160;
}

// Address range: 0x79174 - 0x791a4
int32_t function_79174(void) {
    // 0x79174
    g7 = 0;
    int32_t v1 = g8; // 0x79179
    int32_t v2 = g10; // 0x7917a
    g10 = 0;
    int32_t v3 = g9; // 0x79180
    int32_t v4 = 0; // 0x79191
    int32_t v5 = 0; // 0x7918e
    int32_t v6 = g4; // 0x79183
    int32_t v7; // 0x79191
    while (true) {
        unsigned char v8 = *(char *)v6; // 0x79183
        int32_t v9 = v8; // 0x79183
        g8 = v9;
        int32_t v10 = v6 + 1; // 0x79186
        g4 = v10;
        int32_t v11 = v8 % 128; // 0x79189
        uint32_t v12 = v5 & (int32_t)&g862 & 31; // 0x7918c
        int32_t v13; // 0x7918c
        if (v12 != 0) {
            // bb
            v13 = v11 << v12;
        } else {
            v13 = v11;
        }
        // bb14
        g9 = v13;
        int32_t v14 = v5 + 7; // 0x7918e
        g7 = v14;
        v7 = v13 | v4;
        g10 = v7;
        g9 = v9;
        if (v8 >= 0) {
            // break -> 0x79199
            break;
        }
        v4 = v7;
        v5 = v14;
        v6 = v10;
    }
    // 0x79199
    *(int32_t *)v3 = v7;
    g9 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x791a4 - 0x791ee
int32_t function_791a4(void) {
    // 0x791a4
    g7 = 0;
    int32_t v1 = g8; // 0x791a9
    int32_t v2 = g9; // 0x791aa
    g8 = v2;
    int32_t v3 = g10; // 0x791ac
    g9 = 0;
    int32_t v4 = 0; // 0x791c8
    int32_t v5 = 0; // 0x791c5
    int32_t v6 = 0; // 0x791b5
    int32_t v7 = g4; // 0x791b7
    int32_t v8; // 0x791c5
    int32_t v9; // 0x791b5
    int32_t v10; // 0x791c8
    while (true) {
        unsigned char v11 = *(char *)v7; // 0x791b5
        v9 = v11;
        int32_t v12 = v7 + 1; // 0x791b7
        g4 = v12;
        g10 = (v9 | v6 & -256) & (int32_t)&g862;
        int32_t v13 = v9 & (int32_t)&g862 & 127; // 0x791c0
        uint32_t v14 = v5 & (int32_t)&g862 & 31; // 0x791c3
        int32_t v15; // 0x791c3
        if (v14 != 0) {
            // bb
            v15 = v13 << v14;
        } else {
            v15 = v13;
        }
        // bb16
        g9 = v15;
        v8 = v5 + 7;
        g7 = v8;
        v10 = v15 | v4;
        if (v11 >= 0) {
            // break -> 0x791d1
            break;
        }
        v4 = v10;
        v5 = v8;
        v6 = v15;
        v7 = v12;
    }
    // 0x791d1
    g9 = v10;
    int32_t v16; // 0x791e3
    if (v8 < 32) {
        int32_t v17 = v9 & (int32_t)&g862 & 64; // 0x791d9
        g10 = v17;
        if (v17 != 0) {
            uint32_t v18 = v8 & (int32_t)&g862 & 31; // 0x791e1
            int32_t v19; // 0x791e1
            if (v18 != 0) {
                // bb18
                v19 = -1 << v18;
            } else {
                v19 = -1;
            }
            // bb19
            g10 = v19;
            v16 = v19 | v10;
            g9 = v16;
        } else {
            v16 = v10;
        }
    } else {
        v16 = v10;
    }
    // 0x791e5
    *(int32_t *)v2 = v16;
    g10 = v3;
    g8 = v1;
    return g4;
}

// Address range: 0x791ee - 0x792dc
int32_t function_791ee(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x791f1
    int32_t v2 = g10; // 0x791f2
    int32_t v3 = g6; // 0x791f3
    g10 = a1;
    int32_t v4 = g9; // 0x791fa
    char v5 = v4; // 0x791fa
    g9 = v4 & (int32_t)&g862;
    int32_t v6 = function_1bbc2(0x1000000 * v4 / 0x1000000); // 0x79200
    g4 = v6;
    int32_t v7 = g6; // 0x79205
    int32_t v8 = v7 + 0x2a053; // 0x79205
    g6 = v8;
    uint32_t v9 = g9; // 0x7920f
    if (v5 == -1) {
        // 0x79262
        g8 = 0;
        goto lab_0x79264;
    } else {
        int32_t v10 = v9 & 112; // 0x79214
        g9 = v10;
        if (v10 == 32) {
            // 0x7923e
            g8 = *(int32_t *)(v6 + 84);
            goto lab_0x7924f;
        } else {
            if (v10 > 32) {
                if (v10 == 64) {
                    // 0x79248
                    g8 = *(int32_t *)(v6 + 92);
                    goto lab_0x7924f;
                } else {
                    if (v10 == 80) {
                        // 0x7924d
                        g8 = 0;
                        goto lab_0x7924f;
                    } else {
                        if (v10 != 48) {
                            // 0x792b0
                            abort();
                            // UNREACHABLE
                        }
                        // 0x79243
                        g8 = *(int32_t *)(v6 + 88);
                        goto lab_0x7924f;
                    }
                }
            } else {
                if (v10 != 0) {
                    if (v10 != 16) {
                        // 0x792b0
                        abort();
                        // UNREACHABLE
                    }
                }
                // 0x7924d
                g8 = 0;
                goto lab_0x7924f;
            }
        }
    }
  lab_0x79264:;
    uint32_t v11 = v9 % 16; // 0x79267
    g4 = v11;
    if (v11 < 13) {
        int32_t result = *(int32_t *)(v7 + 0xee2b + 4 * v11) + v8; // 0x79276
        g4 = result;
        return result;
    }
    // 0x792b0
    abort();
    // UNREACHABLE
  lab_0x7924f:
    if (v5 == 80) {
        int32_t v12 = g10 + 3 & -4; // 0x79258
        g10 = v12;
        int32_t v13 = *(int32_t *)v12; // 0x7925b
        g9 = v13;
        g4 = v12 + 4;
        g7 = a2;
        *(int32_t *)a2 = v13;
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return g4;
    }
    goto lab_0x79264;
}

// Address range: 0x792dc - 0x79312
int32_t function_792dc(int32_t * a1) {
    int32_t v1 = g6; // 0x792df
    g4 = function_1bbc2(v1);
    int32_t v2 = g6; // 0x792e5
    g6 = v2 + 0x29f73;
    int32_t result = g7; // bp-12
    g7 = (int32_t)a1;
    if (*(char *)(v2 + 0x4226f) != 4) {
        // 0x79302
        abort();
        // UNREACHABLE
    }
    // 0x792f8
    *a1 = g9;
    int32_t v3 = g4; // 0x792fa
    int32_t v4; // 0x7930b
    if ((*(char *)(v3 + 99) & 64) != 0) {
        // 0x79307
        *(char *)(v3 + 112) = 0;
        v4 = g4;
    } else {
        v4 = v3;
    }
    // 0x7930b
    *(int32_t *)(v4 + 16) = g7;
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x79312 - 0x79392
int32_t function_79312(void) {
    // 0x79312
    g4 = function_7ad5b((int32_t)&g870);
    int32_t v1 = g7; // 0x79317
    g7 = v1 + 0x29f41;
    *(char *)(v1 + 0x42239) = 4;
    *(char *)(g7 + 0x182fa) = 4;
    *(char *)(g7 + 0x182f9) = 4;
    *(char *)(g7 + 0x182fb) = 4;
    *(char *)(g7 + 0x182fe) = 4;
    *(char *)(g7 + 0x182ff) = 4;
    *(char *)(g7 + 0x182fd) = 4;
    *(char *)(g7 + 0x182fc) = 4;
    *(char *)(g7 + 0x18303) = 12;
    *(char *)(g7 + 0x18304) = 12;
    *(char *)(g7 + 0x18305) = 12;
    *(char *)(g7 + 0x18306) = 12;
    *(char *)(g7 + 0x18307) = 12;
    *(char *)(g7 + 0x18308) = 12;
    *(char *)(g7 + 0x18301) = 4;
    *(char *)(g7 + 0x18300) = 4;
    return g4;
}

// Address range: 0x79392 - 0x79810
int32_t function_79392(int32_t a1, int32_t a2) {
    // 0x79392
    g7 = g4;
    int32_t v1 = g8; // 0x79397
    int32_t v2 = g10; // 0x79398
    int32_t v3 = g6; // 0x79399
    g4 = a2;
    int32_t v4 = function_1bbc2(v3); // 0x793a0
    g4 = v4;
    g6 += 0x29eb3;
    *(int32_t *)(v4 + 144) = 0;
    int32_t * v5 = (int32_t *)(a2 + 164); // 0x797f1
    int32_t v6 = g7; // 0x793cd
    while (true) {
        if (v6 >= g9) {
            // break -> 0x797e6
            break;
        }
        // 0x797eb
        g4 = a2;
        g10 = a1;
        uint32_t v7 = *v5; // 0x797f1
        g9 = v7;
        int32_t v8 = *(int32_t *)(a1 + 96) < 0; // 0x797fa
        g4 = v8;
        int32_t result = *(int32_t *)(a1 + 76) + v8; // 0x797fd
        g4 = result;
        if (v7 >= result) {
            // 0x79808
            g6 = v3;
            g10 = v2;
            g8 = v1;
            return result;
        }
        unsigned char v9 = *(char *)v6; // 0x793c4
        int32_t v10 = v9; // 0x793c4
        g10 = v10;
        int32_t result2 = v6 + 1; // 0x793cd
        g4 = result2;
        int32_t v11 = v10 & 192; // 0x793d2
        g8 = v11;
        if (v11 != 64) {
            if (v11 != 128) {
                if (v11 != 192) {
                    if (v9 >= 48) {
                        // 0x797df
                        abort();
                        // UNREACHABLE
                    }
                    int32_t v12 = g6; // 0x7943d
                    g10 = *(int32_t *)(4 * v10 - 0x1b1f4 + v12) + v12;
                    return result2;
                }
                // 0x7941d
                g9 = a2;
                int32_t v13 = v9 % 64; // 0x79420
                g10 = v13;
                *(int32_t *)((8 * v13 | 4) + a2) = 0;
            } else {
                // 0x793ff
                int64_t v14; // bp-44
                g9 = &v14;
                int32_t v15 = v9 % 64; // 0x79402
                g10 = v15;
                g4 = function_79174();
                int32_t v16 = v14; // 0x7940d
                g9 = v16;
                g10 = a2;
                g7 = v15;
                g9 = *(int32_t *)(a2 + 172) * v16;
                *(int32_t *)(a2 + 4 + 8 * v15) = 1;
                *(int32_t *)(8 * g7 + g10) = g9;
            }
        } else {
            // 0x793dd
            g7 = a2;
            int32_t v17 = v9 % 64; // 0x793e0
            g10 = v17;
            int32_t v18 = *(int32_t *)(a2 + 176) * v17 + v7; // 0x793ea
            g10 = v18;
            *v5 = v18;
        }
        int32_t v19 = g4; // 0x797e4
        g7 = v19;
        v6 = v19;
    }
    // 0x79808
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x79810 - 0x79bbc
int32_t function_79810(void) {
    // 0x79810
    g7 = 48;
    int32_t v1 = g8; // 0x79818
    int32_t v2 = g9; // 0x79819
    g8 = v2;
    int32_t v3 = g10; // 0x7981b
    g10 = v2;
    int32_t v4 = g6; // 0x7981e
    int32_t v5 = g4; // 0x79822
    g4 = 0;
    __asm_rep_stosd_memset((char *)v2, 0, 48);
    g8 = (g3 ? -192 : 192) + v2;
    g7 = 0;
    function_1bbc2((int32_t)&g870);
    g6 += (int32_t)&g77;
    g4 = v5;
    int32_t * v6 = (int32_t *)(v5 + 76); // 0x79837
    int32_t v7 = *v6; // 0x79837
    g9 = v7;
    *(int32_t *)(v5 + 104) = 0;
    *(int32_t *)(g4 + 80) = 0;
    int32_t result; // 0x79bb5
    if (v7 == 0) {
        // 0x79bad
        g9 = 5;
        result = 5;
        // 0x79bb2
        g4 = result;
        g6 = v4;
        g10 = v3;
        g8 = v1;
        return result;
    }
    int32_t v8 = g4 + 84; // 0x79851
    g4 = v8;
    g7 = v5;
    int32_t v9 = v7 - 1 + (int32_t)(*(int32_t *)(v5 + 96) < 0); // 0x7985f
    g4 = v9;
    int32_t v10 = function_7c18a(v9, v8); // 0x79864
    g4 = v10;
    char * v11; // bp-60
    *(int32_t *)&v11 = v10;
    char * v12;
    int32_t v13;
    int32_t v14; // 0x79996
    int32_t v15; // 0x7987a
    if (v10 != 0) {
        // 0x7997e
        g9 = v5;
        g7 = v10;
        g7 = v10 + 4;
        *(int32_t *)(g10 + 164) = *(int32_t *)(v5 + 92);
        int32_t v16 = (int32_t)v11; // 0x79990
        g4 = v16;
        v14 = g7 - *(int32_t *)(v16 + 4);
        g4 = 0;
        int32_t v17 = v14 + 9; // 0x7999d
        g9 = v14;
        char * v18 = (char *)v17; // 0x799a3
        g8 = v17;
        g7 = -1;
        int32_t v19 = -1; // 0x799ac
        int32_t v20; // 0x799ae
        while (true) {
            if (v19 == 0) {
                v20 = 0;
                // break -> bb61
                break;
            }
            int32_t v21 = (g3 ? -1 : 1) + v17; // 0x799ac
            g8 = v21;
            int32_t v22 = v19 - 1; // 0x799ac
            g7 = v22;
            if (*(char *)v17 == 0) {
                v20 = v22;
                // break -> bb61
                break;
            }
            v17 = v21;
            v19 = v22;
        }
        int32_t v23 = v14 + -1 - v20; // 0x799b0
        g7 = v23;
        int32_t v24 = v23 + 9; // 0x799b7
        g4 = v24;
        int32_t v25; // 0x799d1
        if (*v18 == 101) {
            // 0x799bc
            if (*(char *)(v14 + 10) == 104) {
                int32_t v26 = v14 + 11; // 0x799c5
                g9 = v26;
                *(int32_t *)(g10 + 188) = *(int32_t *)v24;
                v25 = g7 + 13;
                g4 = v25;
                v12 = (char *)v26;
            } else {
                v25 = v24;
                v12 = v18;
            }
        } else {
            v25 = v24;
            v12 = v18;
        }
        // 0x799d4
        g7 = v14;
        if (*(char *)(v14 + 8) < 4) {
            goto lab_0x799f3;
        } else {
            // 0x799dd
            if (*(char *)v25 != 4) {
                goto lab_0x79ba6;
            } else {
                // 0x799e6
                if (*(char *)(v25 + 1) != 0) {
                    goto lab_0x79ba6;
                } else {
                    // 0x799f0
                    g4 = v25 + 2;
                    goto lab_0x799f3;
                }
            }
        }
    } else {
        // 0x79877
        g8 = v5;
        v15 = *v6;
        g4 = v15;
        if (*(int16_t *)v15 != -0x47a8) {
            goto lab_0x7989a;
        } else {
            // 0x79884
            if (*(int32_t *)(v15 + 2) != 119) {
                goto lab_0x7989a;
            } else {
                // 0x7988a
                if (*(int16_t *)(v15 + 6) != -0x7f33) {
                    goto lab_0x7989a;
                } else {
                    int32_t v27 = *(int32_t *)(v5 + 72); // 0x79892
                    g4 = v27;
                    v13 = v27 + 4;
                    goto lab_0x798cc;
                }
            }
        }
    }
  lab_0x799f3:;
    // 0x799f3
    int32_t v28; // bp-40
    int32_t v29 = &v28; // 0x799f3
    g9 = v29;
    g4 = function_79174();
    *(int32_t *)(g10 + 176) = v28;
    int32_t v30; // bp-32
    g9 = &v30;
    g4 = function_791a4();
    int32_t v31 = v30; // 0x79a0c
    g9 = v31;
    g8 = v14;
    *(int32_t *)(g10 + 172) = v31;
    if (*(char *)(g8 + 8) != 1) {
        // 0x79a2a
        g9 = v29;
        g4 = function_79174();
        int32_t v32 = v28; // 0x79a32
        g9 = v32;
        *(int32_t *)(g10 + 180) = v32;
    } else {
        int32_t v33 = g4; // 0x79a1e
        int32_t v34 = (int32_t)*(char *)v33; // 0x79a1e
        g9 = v34;
        g4 = v33 + 1;
        *(int32_t *)(g10 + 180) = v34;
    }
    int32_t v35 = (int32_t)v12; // 0x79a3b
    g9 = v35;
    g8 = 0;
    *(char *)(g10 + 185) = (char)&g862;
    char * v36;
    if (*(char *)g9 == 122) {
        // 0x79a4c
        g9 = v29;
        g4 = function_79174();
        g8 = v28;
        *(char *)(g10 + 186) = 1;
        g8 += g4;
        v36 = (char *)(v35 + 1);
    } else {
        v36 = v12;
    }
    int32_t v37 = (int32_t)v36 + 1; // 0x79a66
    g7 = v37;
    int32_t v38; // bp-36
    int32_t v39 = &v38; // 0x79a98
    int32_t v40; // 0x79ad2
    int32_t v41; // 0x79ad4
    while (true) {
      lab_0x79ac2:
        // 0x79ac2
        g7 = v37;
        unsigned char v42 = *(char *)(v37 - 1); // 0x79ac5
        int32_t v43 = g9 & -256; // 0x79ac5
        g9 = v43 | (int32_t)v42;
        if (v42 == 0) {
            // break -> 0x79acc
            break;
        }
        if (v42 != 76) {
            if (v42 != 82) {
                if (v42 != 80) {
                    if (v42 != 83) {
                        // 0x79ad2
                        v40 = g8;
                        g4 = v40;
                        v41 = v40;
                        goto lab_0x79ad4;
                    }
                    // 0x79ab8
                    *(char *)(g10 + 187) = 1;
                } else {
                    int32_t v44 = g4; // 0x79a90
                    g9 = (int32_t)*(char *)v44;
                    g7 = v44 + 1;
                    *(int32_t *)(g11 - 4) = v44;
                    *(int32_t *)(g11 - 8) = g4;
                    *(int32_t *)(g11 - 12) = v39;
                    g4 = v5;
                    *(int32_t *)(g11 - 16) = g7;
                    g4 = function_791ee(v37, (int32_t)&g870);
                    int32_t v45 = v38; // 0x79aa5
                    g9 = v45;
                    *(int32_t *)(g10 + 168) = v45;
                }
                // 0x79abf
                v37++;
                goto lab_0x79ac2;
            } else {
                unsigned char v46 = *(char *)g4; // 0x79a80
                g9 = (int32_t)v46 | v43;
                *(char *)(g10 + 184) = v46;
                // 0x79a88
                g4++;
                // 0x79abf
                v37++;
                goto lab_0x79ac2;
            }
        } else {
            unsigned char v47 = *(char *)g4; // 0x79a71
            g9 = (int32_t)v47 | v43;
            *(char *)(g10 + 185) = v47;
            // 0x79a88
            g4++;
            // 0x79abf
            v37++;
            goto lab_0x79ac2;
        }
    }
    int32_t v48 = g8; // 0x79acc
    if (v48 != 0) {
        // 0x79ae3
        g4 = v48;
        goto lab_0x79ae5;
    } else {
        // 0x79acc
        v40 = v48;
        v41 = g4;
        goto lab_0x79ad4;
    }
  lab_0x7989a:
    // 0x7989a
    g9 = 5;
    if (*(char *)v15 != -72 || *(int32_t *)(v15 + 1) != 173 || *(int16_t *)(v15 + 5) != -0x7f33) {
        result = 5;
        // 0x79bb2
        g4 = result;
        g6 = v4;
        g10 = v3;
        g8 = v1;
        return result;
    }
    // 0x798c1
    g9 = v5;
    int32_t v49 = *(int32_t *)(v5 + 72); // 0x798c4
    g4 = v49;
    v13 = v49 + 160;
    goto lab_0x798cc;
  lab_0x79ba6:
    // 0x79ba6
    g9 = 3;
    result = 3;
    // 0x79bb2
    g4 = result;
    g6 = v4;
    g10 = v3;
    g8 = v1;
    return result;
  lab_0x798cc:
    // 0x798cc
    g4 = v13;
    g9 = *(int32_t *)(v13 + 28);
    g8 = v5;
    *(int32_t *)(g10 + 160) = 1;
    *(int32_t *)(g10 + 152) = 4;
    int32_t v50 = g9; // 0x798e6
    g7 = v50;
    g7 = v50 - *(int32_t *)(g8 + 72);
    *(int32_t *)(g10 + 4) = 1;
    *(int32_t *)(g10 + 28) = 1;
    *(int32_t *)(g10 + 148) = g7;
    *(int32_t *)g10 = g4 + 44 - g9;
    *(int32_t *)(g10 + 24) = g4 + 32 - g9;
    *(int32_t *)(g10 + 8) = g4 + 40 - g9;
    *(int32_t *)(g10 + 16) = g4 + 36 - g9;
    *(int32_t *)(g10 + 48) = g4 + 20 - g9;
    *(int32_t *)(g10 + 56) = g4 + 16 - g9;
    int32_t v51 = g4; // 0x7992e
    int32_t v52 = g9; // 0x79934
    g7 = v51 + 24 - v52;
    g4 = v51 + 56 - v52;
    *(int32_t *)(g10 + 12) = 1;
    *(int32_t *)(g10 + 20) = 1;
    *(int32_t *)(g10 + 52) = 1;
    *(int32_t *)(g10 + 60) = 1;
    *(int32_t *)(g10 + 44) = 1;
    *(int32_t *)(g10 + 40) = g7;
    *(int32_t *)(g10 + 68) = 1;
    *(int32_t *)(g10 + 64) = g4;
    *(int32_t *)(g10 + 180) = 8;
    *(char *)(g10 + 187) = 1;
    goto lab_0x79ba2;
  lab_0x79ae5:
    // 0x79ae5
    *(int32_t *)(g11 - 4) = v48;
    *(int32_t *)(g11 - 8) = g8;
    g8 = v14;
    g9 = *(int32_t *)v14;
    *(int32_t *)(g11 - 12) = g10;
    *(int32_t *)(g11 - 16) = v5;
    g9 += g8 + 4;
    int32_t v66 = function_79392((int32_t)&g870, (int32_t)&g870); // 0x79af4
    g4 = v66;
    int32_t v60 = g10; // 0x79af9
    unsigned char v67 = *(char *)(v60 + 184); // 0x79af9
    g4 = (int32_t)v67 | v66 & -256;
    int32_t v55; // 0x79b4a
    if (v67 == -1) {
        // 0x79b35
        g4 = 0;
        v55 = 8;
        goto lab_0x79b3e;
    } else {
        unsigned char v68 = v67 % 8;
        g4 = v68;
        if (v68 == 2) {
            // 0x79b39
            g4 = 2;
            v55 = 12;
            goto lab_0x79b3e;
        } else {
            if (v68 > 2) {
                if (v68 == 3) {
                    // 0x79b22
                    g4 = 4;
                    v55 = 16;
                    goto lab_0x79b3e;
                } else {
                    if (v68 != 4) {
                        // 0x79b30
                        abort();
                        // UNREACHABLE
                    }
                    // 0x79b29
                    g4 = 8;
                    v55 = 24;
                    goto lab_0x79b3e;
                }
            } else {
                if (v68 != 0) {
                    // 0x79b30
                    abort();
                    // UNREACHABLE
                }
                // 0x79b22
                g4 = 4;
                v55 = 16;
                goto lab_0x79b3e;
            }
        }
    }
  lab_0x79ad4:
    // 0x79ad4
    g9 = 3;
    if (v41 == 0) {
        result = 3;
        // 0x79bb2
        g4 = result;
        g6 = v4;
        g10 = v3;
        g8 = v1;
        return result;
    }
    v48 = v40;
    goto lab_0x79ae5;
  lab_0x79ba2:
    // 0x79ba2
    g9 = 0;
    result = 0;
    // 0x79bb2
    g4 = result;
    g6 = v4;
    g10 = v3;
    g8 = v1;
    return result;
  lab_0x79b3e:;
    int32_t v53 = (int32_t)v11; // 0x79b3e
    g9 = v53;
    g8 = 0;
    int32_t v54 = v55 + v53; // 0x79b4a
    g4 = v54;
    int32_t v56; // 0x79b53
    int32_t v57; // 0x79b5d
    int32_t v58; // 0x79b5b
    int32_t v59; // 0x79b5d
    if (*(char *)(v60 + 186) != 0) {
        // 0x79b50
        g9 = v29;
        v56 = function_79174();
        g4 = v56;
        v58 = v28 + v56;
        g8 = v58;
        v59 = g9;
        v57 = g10;
    } else {
        v56 = v54;
        v58 = 0;
        v59 = v53;
        v57 = v60;
    }
    unsigned char v61 = *(char *)(v57 + 185); // 0x79b5d
    g9 = (int32_t)v61 | v59 & -256;
    int32_t v62; // 0x79b88
    int32_t v63; // 0x79b88
    if (v61 != -1) {
        // 0x79b68
        *(int32_t *)(g11 - 4) = g7;
        g9 &= (int32_t)&g862;
        *(int32_t *)(g11 - 8) = g7;
        g7 = v39;
        *(int32_t *)(g11 - 12) = v39;
        *(int32_t *)(g11 - 16) = g4;
        g4 = v5;
        g4 = function_791ee((int32_t)&g870, (int32_t)&g870);
        int32_t v64 = v38; // 0x79b7a
        g9 = v64;
        g7 = v5;
        *(int32_t *)(v5 + 80) = v64;
        v62 = g4;
        v63 = g8;
    } else {
        v62 = v56;
        v63 = v58;
    }
    // 0x79b86
    g4 = v63 != 0 ? v63 : v62;
    *(int32_t *)(g11 - 4) = v63;
    *(int32_t *)(g11 - 8) = g8;
    char * v65 = v11; // 0x79b8d
    g8 = (int32_t)v65;
    g9 = *(int32_t *)v65;
    *(int32_t *)(g11 - 12) = g10;
    *(int32_t *)(g11 - 16) = v5;
    g9 += g8 + 4;
    g4 = function_79392((int32_t)&g870, (int32_t)&g870);
    goto lab_0x79ba2;
}

// Address range: 0x79bbc - 0x79c08
int32_t function_79bbc(int32_t a1, int32_t a2) {
    int32_t v1 = g6; // 0x79bbf
    g9 = a2;
    int32_t v2 = function_1bbc2(v1); // 0x79bc6
    g4 = v2;
    int32_t v3 = g6; // 0x79bcb
    g6 = v3 + 0x2968d;
    g7 = a1;
    int32_t v4 = g9; // 0x79bd4
    if (v4 > 17) {
        // 0x79bfd
        abort();
        // UNREACHABLE
    }
    unsigned char v5 = *(char *)(v3 + (int32_t)&g42 + 0x2968d + v4); // 0x79bd9
    g4 = (int32_t)v5 | v2 & -256;
    int32_t result = *(int32_t *)(4 * v4 + a1); // 0x79be7
    g4 = result;
    if ((*(char *)(a1 + 99) & 64) != 0) {
        // 0x79bec
        if (*(char *)(a1 + 108 + v4) != 0) {
            // 0x79c02
            g6 = v1;
            return result;
        }
    }
    if (v5 != 4) {
        // 0x79bfd
        abort();
        // UNREACHABLE
    }
    int32_t result2 = *(int32_t *)result; // 0x79bf9
    g4 = result2;
    // 0x79c02
    g6 = v1;
    return result2;
}

// Address range: 0x79c08 - 0x79cf5
int32_t function_79c08(void) {
    int32_t v1 = g8; // 0x79c0b
    int32_t v2 = g10; // 0x79c0c
    int32_t v3 = g6; // 0x79c0d
    int32_t v4 = function_1bbc2(v3); // 0x79c11
    g4 = v4;
    g6 += 0x29642;
    int32_t v5 = g9; // 0x79c1c
    int32_t v6;
    if ((*(char *)(v5 + 99) & 64) == 0) {
        // 0x79c35
        v6 = *(int32_t *)(v5 + 16);
        goto lab_0x79c3b;
    } else {
        // 0x79c28
        if (*(char *)(v5 + 112) == 0) {
            // 0x79c35
            v6 = *(int32_t *)(v5 + 16);
            goto lab_0x79c3b;
        } else {
            // 0x79c2e
            g4 = v5;
            v6 = v5 + 16;
            goto lab_0x79c3b;
        }
    }
  lab_0x79c92:;
    int32_t v7; // 0x79c9e
    int32_t v8; // 0x79c63
    int32_t v9; // 0x79c66
    if (v9 != 0) {
        if (v8 != 0) {
            if (v9 != v8) {
                int32_t v10 = (int32_t)*(char *)(v7 + 0x182f8 + g6); // 0x79c9e
                g7 = v10;
                g8 = v8;
                __asm_rep_movsb_memcpy((char *)v8, (char *)v9, v10);
                int32_t v11 = (g3 ? -1 : 1) * v10 + v8; // 0x79ca8
                g8 = v11;
                g10 = v11;
                g7 = 0;
            }
        }
    }
    goto lab_0x79caa;
  lab_0x79caa:;
    int32_t v12 = g4; // 0x79caa
    int32_t v13 = v12 + 1; // 0x79caa
    g4 = v13;
    int32_t v14;
    if (v12 == 16) {
        // 0x79cb0
        g4 = v4;
        if ((*(char *)(v4 + 99) & 64) == 0) {
            goto lab_0x79cc6;
        } else {
            // 0x79cb9
            if (*(char *)(v4 + 112) == 0) {
                goto lab_0x79cc6;
            } else {
                // 0x79cbf
                g9 = v4;
                v14 = v4 + 16;
                goto lab_0x79ccc;
            }
        }
    }
    v7 = v13;
    goto lab_0x79c58;
  lab_0x79c3b:
    // 0x79c3b
    g4 = v6;
    if (v6 == 0) {
        // 0x79c3f
        g7 = v5;
        int32_t v16; // bp-36
        g4 = &v16;
        g9 = *(int32_t *)(v5 + 72);
        g4 = v5;
        g4 = function_792dc(&v16);
    }
    // 0x79c56
    g4 = 0;
    v7 = 0;
    while (true) {
      lab_0x79c58:
        // 0x79c58
        g8 = v4;
        g7 = v5;
        int32_t v15 = 4 * v7; // 0x79c63
        v8 = *(int32_t *)(v15 + v4);
        g9 = v8;
        v9 = *(int32_t *)(v15 + v5);
        g10 = v9;
        if (*(char *)(v4 + 108 + v7) != 0) {
            // break -> 0x79c8d
            break;
        }
        // 0x79c6b
        g7 = (int32_t)(v8 != 0) | v5 & -256;
        if (v8 == 0) {
            goto lab_0x79c92;
        } else {
            // 0x79c72
            g8 = v5;
            if (*(char *)(v5 + 108 + v7) == 0) {
                goto lab_0x79c92;
            } else {
                // 0x79c7c
                if (*(char *)(v7 + 0x182f8 + g6) != 4) {
                    // break -> 0x79c8d
                    break;
                }
                // 0x79c86
                *(int32_t *)v8 = v9;
                goto lab_0x79caa;
            }
        }
    }
    // 0x79c8d
    abort();
    // UNREACHABLE
  lab_0x79cc6:
    // 0x79cc6
    g4 = v4;
    v14 = *(int32_t *)(v4 + 16);
    goto lab_0x79ccc;
  lab_0x79ccc:
    // 0x79ccc
    g9 = v14;
    g4 = 0;
    int32_t result; // 0x79cf4
    if (v14 != 0) {
        result = 0;
        goto lab_0x79ced;
    } else {
        int32_t v17 = function_79bbc(v5, 4); // 0x79cd9
        g4 = v17;
        g9 = v4;
        int32_t v18 = v17 - *(int32_t *)(v4 + 72); // 0x79ce4
        g4 = v18;
        g9 = v5;
        int32_t v19 = *(int32_t *)(v5 + 104) + v18; // 0x79cea
        g4 = v19;
        result = v19;
        goto lab_0x79ced;
    }
  lab_0x79ced:
    // 0x79ced
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x79cf5 - 0x7a2cc
int32_t function_79cf5(int32_t * a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g8; // 0x79cf8
    int32_t v3 = g10; // 0x79cf9
    g10 = 1;
    int32_t v4 = g6; // 0x79cff
    uint32_t v5 = g9; // 0x79d06
    g9 = a2;
    int32_t v6 = function_1bbc2(v5); // 0x79d0f
    g4 = v6;
    g6 += 0x29544;
    int32_t v7; // bp-44
    int32_t v8 = &v7; // 0x79f1f
    int32_t v9; // bp-48
    int32_t v10 = &v9; // 0x79f4f
    int32_t v11; // bp-40
    int32_t v12 = &v11; // 0x79f6e
    int32_t v13;
    char v14;
    int32_t v15; // 0x79d27
    unsigned char v16; // 0x79d25
    int32_t v17; // 0x79f5b
    int32_t v18; // 0x79d25
    while (true) {
      lab_0x7a2a8:
        if (v6 >= v5) {
            // break -> 0x7a2b4
            break;
        }
        // 0x79d25
        v16 = *(char *)v6;
        v18 = g9 & -256 | (int32_t)v16;
        g9 = v18;
        v15 = v6 + 1;
        g8 = v15;
        int32_t v19 = v18 & (int32_t)&g862; // 0x79d2d
        g7 = v19;
        if (v16 < 33) {
            if (v16 >= 31) {
                goto lab_0x7a0d2;
            } else {
                if (v16 == 16) {
                    // 0x79f1d
                    g4 = v15;
                    g9 = v8;
                    g8 = function_79174();
                    int32_t v20 = v7; // 0x79f29
                    g4 = v20;
                    v13 = v20;
                    goto lab_0x7a293;
                } else {
                    if (v16 < 16) {
                        if (v16 == 10) {
                            int32_t v21 = (int32_t)*(int16_t *)v15; // 0x79edb
                            g9 = v21;
                            // 0x79ef1
                            g8 = v6 + 3;
                            v13 = v21;
                            goto lab_0x7a293;
                        } else {
                            if (v16 < 10) {
                                if (v16 == 6) {
                                    goto lab_0x7a0d2;
                                } else {
                                    if (v16 < 6) {
                                        // 0x79d60
                                        v14 = v16 - 3;
                                        goto lab_0x79d96;
                                    } else {
                                        // 0x79d65
                                        g8 = v6 + 2;
                                        if (v16 == 8) {
                                            int32_t v22 = (int32_t)*(char *)v15; // 0x79ec9
                                            g4 = v22;
                                            v13 = v22;
                                        } else {
                                            if (v16 != 9) {
                                                // 0x7a2b8
                                                abort();
                                                // UNREACHABLE
                                            }
                                            int32_t v23 = (int32_t)*(char *)v15; // 0x79ed2
                                            g4 = v23;
                                            v13 = v23;
                                        }
                                        goto lab_0x7a293;
                                    }
                                }
                            } else {
                                if (v16 == 13) {
                                    int32_t v24 = *(int32_t *)v15; // 0x79f04
                                    g7 = v24;
                                    // 0x79f0d
                                    g8 = v6 + 5;
                                    v13 = v24;
                                    goto lab_0x7a293;
                                } else {
                                    if (v16 < 13) {
                                        if (v16 == 11) {
                                            int32_t v25 = (int32_t)*(int16_t *)v15; // 0x79ee7
                                            g7 = v25;
                                            // 0x79ef1
                                            g8 = v6 + 3;
                                            v13 = v25;
                                            goto lab_0x7a293;
                                        } else {
                                            // 0x79d93
                                            v14 = v16 - 12;
                                            goto lab_0x79d96;
                                        }
                                    } else {
                                        // 0x79da1
                                        g8 = v6 + 9;
                                        if (v16 != 14) {
                                            if (v16 != 15) {
                                                // 0x7a2b8
                                                abort();
                                                // UNREACHABLE
                                            }
                                        }
                                        int32_t v26 = *(int32_t *)v15; // 0x79f15
                                        g4 = v26;
                                        v13 = v26;
                                        goto lab_0x7a293;
                                    }
                                }
                            }
                        }
                    } else {
                        if (v16 == 21) {
                            int32_t v27 = (int32_t)*(char *)v15; // 0x79ff1
                            g9 = v27;
                            int32_t v28 = g10 - 1; // 0x79ff5
                            g7 = v28;
                            v11 = v27;
                            if (v28 <= v27) {
                                // 0x7a2b8
                                abort();
                                // UNREACHABLE
                            }
                            int32_t v29 = v28 - v27; // 0x7a003
                            g7 = v29;
                            int32_t v30 = *(int32_t *)(4 * v29 - 300 + g5); // 0x7a005
                            g7 = v30;
                            g8 = v6 + 2;
                            v13 = v30;
                            goto lab_0x7a293;
                        } else {
                            if (v16 < 21) {
                                if (v16 == 18) {
                                    int32_t v31 = g10; // 0x79fcf
                                    if (v31 == 0) {
                                        // 0x7a2b8
                                        abort();
                                        // UNREACHABLE
                                    }
                                    int32_t v32 = *(int32_t *)(4 * v31 - 304 + g5); // 0x79fd7
                                    g4 = v32;
                                    v13 = v32;
                                    goto lab_0x7a293;
                                } else {
                                    if (v16 < 18) {
                                        // 0x79f31
                                        g4 = v15;
                                        int32_t v33; // bp-36
                                        g9 = &v33;
                                        g8 = function_791a4();
                                        int32_t v34 = v33; // 0x79f3d
                                        g4 = v34;
                                        v13 = v34;
                                        goto lab_0x7a293;
                                    } else {
                                        if (v16 == 19) {
                                            int32_t v35 = g10; // 0x79fe3
                                            if (v35 == 0) {
                                                // 0x7a2b8
                                                abort();
                                                // UNREACHABLE
                                            }
                                            // 0x79feb
                                            g10 = v35 - 1;
                                            goto lab_0x7a2a6;
                                        } else {
                                            if (v16 != 20) {
                                                // 0x7a2b8
                                                abort();
                                                // UNREACHABLE
                                            }
                                            uint32_t v36 = g10; // 0x7a01a
                                            if (v36 <= 1) {
                                                // 0x7a2b8
                                                abort();
                                                // UNREACHABLE
                                            }
                                            int32_t v37 = *(int32_t *)(4 * v36 - 308 + g5); // 0x7a023
                                            g4 = v37;
                                            v13 = v37;
                                            goto lab_0x7a293;
                                        }
                                    }
                                }
                            } else {
                                if (v16 == 25) {
                                    goto lab_0x7a0d2;
                                } else {
                                    if (v16 >= 25) {
                                        goto lab_0x7a1b3_4;
                                    }
                                    int32_t v38; // 0x7a03b
                                    if (v16 == 22) {
                                        uint32_t v39 = g10; // 0x7a02f
                                        int32_t v40 = v39 - 1; // 0x7a02f
                                        if (v39 <= 1) {
                                            // 0x7a2b8
                                            abort();
                                            // UNREACHABLE
                                        }
                                        // 0x7a038
                                        g9 = v40;
                                        int32_t v41 = g5 - 300; // 0x7a03b
                                        int32_t * v42 = (int32_t *)(v41 + 4 * v40); // 0x7a03b
                                        v38 = *v42;
                                        g7 = v38;
                                        int32_t v43 = v39 - 2; // 0x7a042
                                        g4 = v43;
                                        int32_t v44 = *(int32_t *)(v41 + 4 * v43); // 0x7a04b
                                        g7 = v44;
                                        *v42 = v44;
                                    } else {
                                        if (v16 != 23) {
                                            // 0x7a2b8
                                            abort();
                                            // UNREACHABLE
                                        }
                                        uint32_t v45 = g10; // 0x7a061
                                        int32_t v46 = v45 - 2; // 0x7a061
                                        if (v45 <= 2) {
                                            // 0x7a2b8
                                            abort();
                                            // UNREACHABLE
                                        }
                                        int32_t v47 = v45 - 1; // 0x7a06a
                                        g7 = v47;
                                        int32_t v48 = g5 - 300; // 0x7a06d
                                        int32_t * v49 = (int32_t *)(v48 + 4 * v47); // 0x7a06d
                                        int32_t v50 = *v49; // 0x7a06d
                                        g4 = v50;
                                        g9 = v46;
                                        int32_t v51 = v45 - 3; // 0x7a07d
                                        g7 = v51;
                                        int32_t v52 = *(int32_t *)(4 * v51 - 300 + g5); // 0x7a08c
                                        g4 = v52;
                                        g7 = v47;
                                        *v49 = *(int32_t *)(v48 + 4 * v46);
                                        g7 = v52;
                                        g4 = v51;
                                        *(int32_t *)(g5 - 300 + 4 * g9) = v52;
                                        v38 = v50;
                                    }
                                    // 0x7a0c6
                                    g9 = v38;
                                    *(int32_t *)(g5 - 300 + 4 * g4) = v38;
                                    goto lab_0x7a2a6;
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (v16 < 80) {
                int32_t v53 = v19 - 48; // 0x79e17
                g7 = v53;
                if (v16 >= 48) {
                    v13 = v53;
                    goto lab_0x7a293;
                } else {
                    if (v16 < 40) {
                        if (v16 >= 36) {
                            goto lab_0x7a1b3_4;
                        }
                        if (v16 < 35) {
                            goto lab_0x7a1b3_4;
                        }
                        goto lab_0x7a0d2;
                    } else {
                        if (v16 < 47) {
                            if (v16 >= 41) {
                                goto lab_0x7a1b3_4;
                            }
                            int32_t v54 = g10; // 0x7a275
                            if (v54 == 0) {
                                // 0x7a2b8
                                abort();
                                // UNREACHABLE
                            }
                            int32_t v55 = (int32_t)*(int16_t *)v15; // 0x7a279
                            int32_t v56 = v6 + 3; // 0x7a27d
                            g8 = v56;
                            int32_t v57 = v54 - 1; // 0x7a280
                            g10 = v57;
                            v11 = v55;
                            int32_t v58 = v55 + v56; // 0x7a284
                            g9 = v58;
                            g8 = *(int32_t *)(4 * v57 - 300 + g5) != 0 ? v58 : v56;
                        } else {
                            int32_t v59 = (int32_t)*(int16_t *)v15; // 0x7a268
                            g9 = v59;
                            v11 = v59;
                            g8 = v6 + 3 + v59;
                        }
                        goto lab_0x7a2a6;
                    }
                }
            } else {
                if (v16 == -112) {
                    // 0x79f4d
                    g4 = v15;
                    g9 = v10;
                    int32_t v60 = function_79174(); // 0x79f52
                    g4 = v60;
                    g8 = v60;
                    *(int32_t *)(g11 - 4) = v60;
                    *(int32_t *)(g11 - 8) = g4;
                    v17 = g11 - 12;
                    *(int32_t *)v17 = v9;
                    goto lab_0x79f5e;
                } else {
                    if (v16 < 144) {
                        if (v16 < 112) {
                            // 0x79f45
                            *(int32_t *)(g11 - 4) = v6;
                            g7 -= 80;
                            *(int32_t *)(g11 - 8) = g4;
                            int32_t v61 = g11 - 12; // 0x79f4a
                            *(int32_t *)v61 = g7;
                            v17 = v61;
                            goto lab_0x79f5e;
                        } else {
                            // 0x79f6e
                            g9 = v12;
                            g4 = v15;
                            int32_t v62 = function_791a4(); // 0x79f79
                            g4 = v62;
                            g7 = v19 - 112;
                            g8 = v62;
                            *(int32_t *)(g11 - 4) = v62;
                            *(int32_t *)(g11 - 8) = g4;
                            *(int32_t *)(g11 - 12) = g7;
                            *(int32_t *)(g11 - 16) = v1;
                            int32_t v63 = function_79bbc((int32_t)&g870, (int32_t)&g870); // 0x79f8f
                            g9 = v11;
                            int32_t v64 = v11 + v63; // 0x79f9a
                            g4 = v64;
                            v13 = v64;
                            goto lab_0x7a293;
                        }
                    } else {
                        if (v16 == -108) {
                            goto lab_0x7a0d2;
                        } else {
                            if (v16 < 148) {
                                if (v16 != -110) {
                                    // 0x7a2b8
                                    abort();
                                    // UNREACHABLE
                                }
                                // 0x79fa1
                                g9 = v10;
                                g4 = v15;
                                g4 = function_79174();
                                g9 = v12;
                                int32_t v65 = function_791a4(); // 0x79fae
                                g4 = v65;
                                g8 = v65;
                                *(int32_t *)(g11 - 4) = v65;
                                *(int32_t *)(g11 - 8) = g4;
                                *(int32_t *)(g11 - 12) = v9;
                                *(int32_t *)(g11 - 16) = v1;
                                int32_t v66 = function_79bbc((int32_t)&g870, (int32_t)&g870); // 0x79fbd
                                g7 = v11;
                                int32_t v67 = v11 + v66; // 0x79fc8
                                g4 = v67;
                                v13 = v67;
                                goto lab_0x7a293;
                            } else {
                                if (v16 == -106) {
                                    goto lab_0x7a2a6;
                                } else {
                                    if (v16 != -15) {
                                        // 0x7a2b8
                                        abort();
                                        // UNREACHABLE
                                    }
                                    // 0x79ea0
                                    g9 = (int32_t)*(char *)v15;
                                    g7 = v6 + 2;
                                    *(int32_t *)(g11 - 4) = v6;
                                    *(int32_t *)(g11 - 8) = g4;
                                    int32_t v68; // bp-32
                                    *(int32_t *)(g11 - 12) = (int32_t)&v68;
                                    g4 = v1;
                                    *(int32_t *)(g11 - 16) = g7;
                                    g8 = function_791ee((int32_t)&g870, (int32_t)&g870);
                                    g4 = v68;
                                    v13 = v68;
                                    goto lab_0x7a293;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    int32_t v69 = g10; // 0x7a2b4
    if (v69 != 0) {
        int32_t result = *(int32_t *)(4 * v69 - 304 + g5); // 0x7a2bd
        g4 = result;
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result;
    }
  lab_0x7a2b8:
    // 0x7a2b8
    abort();
    // UNREACHABLE
  lab_0x7a1b3_4:;
    int32_t v70 = g10; // 0x7a1b3
    if (v70 > 1) {
        int32_t v71 = v18 - 26; // 0x7a1bc
        g9 = v71;
        int32_t v72 = v70 - 2; // 0x7a1bf
        g7 = v72;
        g10 = *(int32_t *)(4 * v70 - 304 + g5);
        int32_t result2 = *(int32_t *)(4 * v72 - 300 + g5); // 0x7a1d2
        g4 = result2;
        if ((char)v71 < 21) {
            int32_t v73 = v71 & (int32_t)&g862; // 0x7a1df
            g9 = v73;
            int32_t v74 = g6; // 0x7a1e2
            g9 = *(int32_t *)(4 * v73 - 0x1b134 + v74) + v74;
            return result2;
        }
        goto lab_0x7a2b8;
    } else {
        goto lab_0x7a2b8;
    }
  lab_0x7a0d2:;
    int32_t v75 = g10; // 0x7a0d2
    if (v75 == 0) {
        // 0x7a2b8
        abort();
        // UNREACHABLE
    }
    int32_t v76 = v75 - 1; // 0x7a0da
    g10 = v76;
    int32_t v77 = *(int32_t *)(4 * v76 - 300 + g5); // 0x7a0de
    g7 = v77;
    if (v16 == 31) {
        // 0x7a183
        v13 = -v77;
        goto lab_0x7a293;
    } else {
        if (v16 < 31) {
            if (v16 == 6) {
                goto lab_0x7a156;
            } else {
                if (v16 != 25) {
                    // 0x7a2b8
                    abort();
                    // UNREACHABLE
                }
                int32_t v78 = v77 >> 31; // 0x7a16f
                g4 = v78;
                v13 = (v78 ^ v77) - v78;
                goto lab_0x7a293;
            }
        } else {
            if (v16 == 35) {
                // 0x7a199
                g9 = v8;
                g4 = v15;
                int32_t v79 = function_79174(); // 0x7a19e
                g4 = v79;
                int32_t v80 = v7; // 0x7a1a3
                g9 = v80;
                g8 = v79;
                v13 = v80 + v77;
                goto lab_0x7a293;
            } else {
                if (v16 == -108) {
                    // 0x7a11c
                    g8 = v6 + 2;
                    unsigned char v81 = *(char *)v15; // 0x7a11f
                    int32_t v82 = v6 & -256; // 0x7a11f
                    g4 = (int32_t)v81 | v82;
                    if (v81 == 2) {
                        // 0x7a14b
                        g4 = v77;
                        int32_t v83 = (int32_t)*(int16_t *)v77; // 0x7a151
                        g4 = v83;
                        v13 = v83;
                        goto lab_0x7a293;
                    } else {
                        if (v81 < 2) {
                            unsigned char v84 = v81 - 1; // 0x7a128
                            g4 = (int32_t)v84 | v82;
                            if (v84 != 0) {
                                // 0x7a2b8
                                abort();
                                // UNREACHABLE
                            }
                            // 0x7a140
                            g4 = v77;
                            int32_t v85 = (int32_t)*(char *)v77; // 0x7a146
                            g4 = v85;
                            v13 = v85;
                            goto lab_0x7a293;
                        } else {
                            if (v81 != 4) {
                                if (v81 != 8) {
                                    // 0x7a2b8
                                    abort();
                                    // UNREACHABLE
                                }
                            }
                            goto lab_0x7a156;
                        }
                    }
                } else {
                    if (v16 != 32) {
                        // 0x7a2b8
                        abort();
                        // UNREACHABLE
                    }
                    // 0x7a18e
                    v13 = -1 - v77;
                    goto lab_0x7a293;
                }
            }
        }
    }
  lab_0x7a293:;
    uint32_t v86 = g10; // 0x7a293
    if (v86 >= 64) {
        // 0x7a2b8
        abort();
        // UNREACHABLE
    }
    // 0x7a298
    g4 = v13;
    *(int32_t *)(4 * v86 - 300 + g5) = v13;
    g10++;
    goto lab_0x7a2a6;
  lab_0x7a2a6:;
    int32_t v87 = g8; // 0x7a2a6
    g4 = v87;
    v6 = v87;
    goto lab_0x7a2a8;
  lab_0x79f5e:
    // 0x79f5e
    *(int32_t *)(v17 - 4) = v1;
    int32_t v88 = function_79bbc((int32_t)&g870, (int32_t)&g870); // 0x79f61
    g4 = v88;
    v13 = v88;
    goto lab_0x7a293;
  lab_0x7a156:
    // 0x7a156
    g4 = v77;
    int32_t v89 = *(int32_t *)v77; // 0x7a15c
    g4 = v89;
    v13 = v89;
    goto lab_0x7a293;
  lab_0x79d96:
    if (v14 != 0) {
        // 0x7a2b8
        abort();
        // UNREACHABLE
    }
    int32_t v90 = *(int32_t *)v15; // 0x79ef9
    g9 = v90;
    // 0x79f0d
    g8 = v6 + 5;
    v13 = v90;
    goto lab_0x7a293;
}

// Address range: 0x7a2cc - 0x7a56a
int32_t function_7a2cc(int32_t a1, int32_t a2, int32_t a3) {
    // 0x7a2cc
    g7 = 32;
    int32_t v1 = g8; // 0x7a2d4
    int32_t v2 = g10; // 0x7a2d5
    int32_t v3 = g4; // 0x7a2d6
    g10 = v3;
    int32_t v4 = g6; // 0x7a2d8
    int32_t v5; // bp-164
    int32_t v6 = &v5; // 0x7a2df
    g8 = v6;
    int32_t v7 = g9; // 0x7a2eb
    __asm_rep_movsd_memcpy((char *)&v5, (char *)v3, 32);
    int32_t v8 = (g3 ? -128 : 128) + v6; // 0x7a2f1
    g8 = v8;
    g10 = v8;
    g7 = 0;
    g4 = function_1bbc2((int32_t)&g870);
    g6 += 0x28f60;
    int32_t v9;
    int32_t v10;
    char v11;
    if ((v11 & 64) == 0) {
        v9 = v10;
        goto lab_0x7a316;
    } else {
        // 0x7a304
        char v12;
        if (v12 != 0) {
            int32_t v13; // bp-148
            v9 = &v13;
            goto lab_0x7a316;
        } else {
            v9 = v10;
            goto lab_0x7a316;
        }
    }
  lab_0x7a316:
    // 0x7a316
    g4 = v9;
    if (v9 == 0) {
        // 0x7a31a
        g4 = v3;
        g9 = *(int32_t *)(v3 + 72);
        g4 = v6;
        int32_t v14; // bp-36
        g4 = function_792dc(&v14);
    }
    // 0x7a338
    g9 = v3;
    if ((*(char *)(v3 + 99) & 64) != 0) {
        // 0x7a344
        *(char *)(v3 + 112) = 0;
    }
    // 0x7a348
    g4 = v3;
    g9 = v7;
    *(int32_t *)(v3 + 16) = 0;
    int32_t v15 = *(int32_t *)(g9 + 160); // 0x7a35b
    g4 = v15;
    int32_t v16;
    if (v15 == 1) {
        // 0x7a371
        g9 = v7;
        g4 = v6;
        int32_t v17 = function_79bbc(v6, *(int32_t *)(v7 + 152)); // 0x7a386
        g4 = v17;
        g9 = v7;
        int32_t v18 = *(int32_t *)(v7 + 148); // 0x7a394
        g9 = v18;
        v16 = v18 + v17;
    } else {
        if (v15 != 2) {
            // 0x7a4e9
            abort();
            // UNREACHABLE
        }
        // 0x7a3a4
        g9 = v7;
        g4 = *(int32_t *)(v7 + 156);
        int32_t v19; // bp-32
        g9 = &v19;
        int32_t v20 = function_79174(); // 0x7a3b3
        g4 = v20;
        int32_t v21 = g7; // 0x7a3bb
        g9 = v19 + v20;
        g7 = v6;
        v16 = function_79cf5(&v5, 0, v21, v21);
    }
    // 0x7a3d6
    g4 = v3;
    g10 = 0;
    g9 = v16;
    g8 = v7;
    g7 = v3;
    *(int32_t *)(v3 + 72) = v16;
    int32_t v22 = g8; // 0x7a4f7
    int32_t v23; // 0x7a3f2
    while (true) {
        // 0x7a3ef
        v23 = *(int32_t *)(v22 + 4) - 1;
        g4 = v23;
        if (v23 < 5) {
            // break -> 0x7a3fc
            break;
        }
        int32_t v24 = g10; // 0x7a4f6
        g10 = v24 + 1;
        int32_t v25 = v22 + 8; // 0x7a4f7
        g8 = v25;
        if (v24 == 17) {
            // 0x7a503
            g9 = v7;
            if (*(char *)(v7 + 187) == 0) {
                // 0x7a521
                g9 = v3;
                int32_t * v26 = (int32_t *)(v3 + 96); // 0x7a527
                *v26 = *v26 % 0x80000000;
                goto lab_0x7a52e;
            } else {
                // 0x7a512
                g4 = v3;
                int32_t * v27 = (int32_t *)(v3 + 96); // 0x7a518
                *v27 = *v27 | -0x80000000;
                goto lab_0x7a52e;
            }
        }
        v22 = v25;
    }
    int32_t v28 = g6; // 0x7a3fc
    int32_t result = *(int32_t *)(4 * v23 - 0x1b0e0 + v28) + v28; // 0x7a403
    g4 = result;
    return result;
  lab_0x7a52e:
    // 0x7a52e
    g9 = v3;
    int32_t v29 = *(int32_t *)(v3 + 76); // 0x7a534
    g4 = v29;
    int32_t result2; // 0x7a569
    if (*(char *)v29 != -72) {
        result2 = v29;
        goto lab_0x7a562;
    } else {
        // 0x7a53c
        if (*(int32_t *)(v29 + 1) != 173) {
            result2 = v29;
            goto lab_0x7a562;
        } else {
            uint16_t v30 = *(int16_t *)(v29 + 5); // 0x7a545
            int32_t v31 = (int32_t)v30 | v29 & -0x10000; // 0x7a545
            g4 = v31;
            if (v30 == (int16_t)&g103) {
                goto lab_0x7a555;
            } else {
                if (v30 != -0x7f33) {
                    result2 = v31;
                    goto lab_0x7a562;
                } else {
                    goto lab_0x7a555;
                }
            }
        }
    }
  lab_0x7a562:
    // 0x7a562
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return result2;
  lab_0x7a555:
    // 0x7a555
    g4 = v3;
    int32_t * v32 = (int32_t *)(v3 + 96); // 0x7a55b
    *v32 = *v32 | -0x80000000;
    result2 = g4;
    goto lab_0x7a562;
}

// Address range: 0x7a56a - 0x7a631
int32_t function_7a56a(int32_t a1, int32_t a2) {
    // 0x7a56a
    g7 = 32;
    int32_t v1 = g8; // 0x7a572
    int32_t v2 = g10; // 0x7a573
    int32_t v3 = g4; // 0x7a574
    g10 = v3;
    int32_t v4 = g6; // 0x7a576
    g4 = 0;
    g8 = v3;
    int32_t v5 = g9; // 0x7a581
    int32_t v6; // bp-224
    int32_t v7 = &v6; // 0x7a587
    g9 = v7;
    __asm_rep_stosd_memset((char *)v3, 0, 32);
    g8 = (g3 ? -128 : 128) + v3;
    g7 = 0;
    function_1bbc2((int32_t)&g870);
    g6 += (int32_t)&g76;
    *(int32_t *)(g10 + 96) = 0x40000000;
    *(int32_t *)(g10 + 76) = a1;
    g4 = g10;
    int32_t v8 = function_79810(); // 0x7a5a9
    g4 = v8;
    if (v8 != 0) {
        // 0x7a5b2
        abort();
        // UNREACHABLE
    }
    int32_t v9 = g6; // 0x7a5b7
    int32_t v10; // 0x7a5dc
    if (*(int32_t *)(v9 - 4) == 0) {
        v10 = v9;
        goto lab_0x7a5dc;
    } else {
        int32_t v11 = v9 + (int32_t)&g43; // 0x7a5c9
        g4 = v11;
        int32_t v12 = pthread_once((int32_t *)v11, (void (*)())(v9 - 0x29f46)); // 0x7a5d0
        g4 = v12;
        if (v12 == 0) {
            goto lab_0x7a5ea;
        } else {
            // 0x7a5c0
            v10 = g6;
            goto lab_0x7a5dc;
        }
    }
  lab_0x7a5dc:
    // 0x7a5dc
    if (*(char *)(v10 + (int32_t)&g42) == 0) {
        // 0x7a5e5
        g4 = function_79312();
    }
    goto lab_0x7a5ea;
  lab_0x7a5ea:
    // 0x7a5ea
    g9 = v5;
    g4 = g10;
    int32_t v13; // bp-32
    function_792dc(&v13);
    g4 = g10;
    g9 = v7;
    function_7a2cc(0, 4, 1);
    g4 = a2;
    *(int32_t *)(g10 + 76) = a2;
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x7a631 - 0x7a66b
int32_t function_7a631(void) {
    int32_t v1 = g8; // 0x7a634
    g8 = g4;
    int32_t v2 = g10; // 0x7a637
    g10 = g9;
    g4 = function_7a2cc(v2, v1, g5);
    int32_t v3 = g10; // 0x7a63f
    int32_t v4 = *(int32_t *)(v3 + 180); // 0x7a63f
    g4 = v4;
    int32_t v5 = g8; // 0x7a658
    if (*(int32_t *)(v3 + 4 + 8 * v4) != 6) {
        int32_t v6 = function_79bbc(v5, v4); // 0x7a659
        g4 = v6;
        *(int32_t *)(g8 + 76) = v6;
    } else {
        // 0x7a64c
        *(int32_t *)(v5 + 76) = 0;
    }
    // 0x7a664
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x7a66b - 0x7a728
int32_t function_7a66b(void) {
    int32_t v1 = g8; // 0x7a66e
    int32_t v2 = g9; // 0x7a66f
    g8 = v2;
    int32_t v3 = g10; // 0x7a671
    int32_t v4 = g4; // 0x7a672
    g10 = v4;
    g4 = *(int32_t *)(v4 + 12);
    int32_t v5; // bp-204
    g9 = &v5;
    g4 = v2;
    int32_t v6 = function_79810(); // 0x7a694
    g4 = v6;
    g9 = v6;
    if (v6 == 5) {
        goto lab_0x7a6a4;
    } else {
        if (v6 != 0) {
            goto lab_0x7a71f;
        } else {
            goto lab_0x7a6a4;
        }
    }
  lab_0x7a6a4:
    // 0x7a6a4
    g7 = 26;
    int32_t v7 = v6 == 5 ? 26 : 10; // 0x7a6b1
    g4 = v7;
    *(int32_t *)(g11 - 4) = 26;
    *(int32_t *)(g11 - 8) = *(int32_t *)(v4 + 16);
    *(int32_t *)(g11 - 12) = g8;
    *(int32_t *)(g11 - 16) = g10;
    *(int32_t *)(g11 - 20) = *(int32_t *)(g10 + 4);
    *(int32_t *)(g11 - 24) = v7;
    *(int32_t *)(g11 - 28) = v7;
    *(int32_t *)(g11 - 32) = 1;
    goto lab_0x7a71f;
  lab_0x7a71f:
    // 0x7a71f
    g9 = 2;
    g4 = 2;
    g10 = v3;
    g8 = v1;
    return 2;
}

// Address range: 0x7a728 - 0x7a7c3
int32_t function_7a728(void) {
    int32_t v1 = g8; // 0x7a72b
    g8 = g4;
    int32_t v2 = g10; // 0x7a72e
    g10 = g9;
    int32_t v3 = g6; // 0x7a731
    g4 = function_1bbc2(v3);
    g6 += 0x28b21;
    int32_t v4; // bp-220
    int32_t v5 = &v4; // 0x7a743
    while (true) {
        // 0x7a743
        g9 = v5;
        g4 = g10;
        int32_t v6 = function_79810(); // 0x7a74b
        g4 = v6;
        int32_t v7 = g10; // 0x7a750
        int32_t v8 = *(int32_t *)(v7 + 96); // 0x7a750
        g7 = v8;
        int32_t v9 = *(int32_t *)(v7 + 72); // 0x7a753
        int32_t v10 = v8 < 0; // 0x7a756
        g7 = v10;
        int32_t v11 = 4 * (v9 - v10 & (int32_t)&g862 & -256); // 0x7a764
        g9 = v11;
        if (v6 != 0) {
            // break -> 0x7a7b6
            break;
        }
        int32_t v12;
        int32_t v13; // 0x7a780
        if (v12 != 0) {
            // 0x7a772
            *(int32_t *)(g11 - 4) = v10;
            *(int32_t *)(g11 - 8) = g7;
            g7 = g9;
            *(int32_t *)(g11 - 12) = g10;
            g7 |= 2;
            *(int32_t *)(g11 - 16) = g8;
            *(int32_t *)(g11 - 20) = *(int32_t *)(g8 + 4);
            *(int32_t *)(g11 - 24) = g4;
            v13 = g9;
            *(int32_t *)(g11 - 28) = g7;
            *(int32_t *)(g11 - 32) = 1;
            g9 = v13;
            int32_t result = g4; // 0x7a794
            if (result == 7) {
                // 0x7a7bb
                g6 = v3;
                g10 = v2;
                g8 = v1;
                return result;
            }
            if (result != 8) {
                // break -> 0x7a7b6
                break;
            }
        } else {
            v13 = v11;
        }
        if (v13 != 0) {
            // 0x7a7a2
            abort();
            // UNREACHABLE
        }
        // 0x7a7a7
        g9 = v5;
        g4 = g10;
        g4 = function_7a631();
    }
    // 0x7a7b6
    g4 = 2;
    // 0x7a7bb
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return 2;
}

// Address range: 0x7a7c3 - 0x7a7ce
int32_t function_7a7c3(int32_t a1) {
    // 0x7a7c3
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 72); // 0x7a7ca
    g4 = result;
    return result;
}

// Address range: 0x7a7ce - 0x7a824
int32_t function_7a7ce(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g10; // 0x7a7d1
    int32_t v2 = g6; // 0x7a7d2
    g4 = a2;
    int32_t v3 = function_1bbc2(v2); // 0x7a7d9
    g4 = v3;
    int32_t v4 = g6; // 0x7a7de
    g6 = v4 + 0x28a7a;
    g9 = a1;
    g10 = a3;
    if (v3 > 17) {
        // 0x7a818
        abort();
        // UNREACHABLE
    }
    unsigned char v5 = *(char *)(v3 + (int32_t)&g42 + 0x28a7a + v4); // 0x7a7ef
    g7 = g7 & -256 | (int32_t)v5;
    if ((*(char *)(a1 + 99) & 64) != 0) {
        // 0x7a7ff
        if (*(char *)(a1 + 108 + v3) != 0) {
            // 0x7a806
            *(int32_t *)(4 * v3 + a1) = a3;
            // 0x7a81d
            g6 = v2;
            g10 = v1;
            return g4;
        }
    }
    int32_t v6 = *(int32_t *)(4 * v3 + a1); // 0x7a80f
    g4 = v6;
    if (v5 != 4) {
        // 0x7a818
        abort();
        // UNREACHABLE
    }
    // 0x7a814
    *(int32_t *)v6 = a3;
    // 0x7a81d
    g6 = v2;
    g10 = v1;
    return g4;
}

// Address range: 0x7a824 - 0x7a82f
int32_t function_7a824(int32_t a1) {
    // 0x7a824
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 76); // 0x7a82b
    g4 = result;
    return result;
}

// Address range: 0x7a82f - 0x7a845
int32_t function_7a82f(int32_t a1, int32_t a2) {
    // 0x7a82f
    g9 = a1;
    g7 = a2;
    int32_t v1 = *(int32_t *)(a1 + 96) < 0; // 0x7a83b
    g4 = v1;
    *(int32_t *)a2 = v1;
    int32_t result = *(int32_t *)(g9 + 76); // 0x7a840
    g4 = result;
    return result;
}

// Address range: 0x7a845 - 0x7a853
int32_t function_7a845(int32_t a1, int32_t a2) {
    // 0x7a845
    g9 = a2;
    g4 = a1;
    *(int32_t *)(a1 + 76) = a2;
    return g4;
}

// Address range: 0x7a853 - 0x7a85e
int32_t function_7a853(int32_t a1) {
    // 0x7a853
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 80); // 0x7a85a
    g4 = result;
    return result;
}

// Address range: 0x7a85e - 0x7a869
int32_t function_7a85e(int32_t a1) {
    // 0x7a85e
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 92); // 0x7a865
    g4 = result;
    return result;
}

// Address range: 0x7a869 - 0x7a89b
int32_t function_7a869(int32_t a1) {
    int32_t v1 = g6; // 0x7a86c
    g4 = a1;
    int32_t v2; // bp-24
    int32_t v3 = function_1bbc2((int32_t)&v2); // 0x7a877
    g6 += 0x289dc;
    int32_t v4 = v3 - 1; // 0x7a882
    g4 = v4;
    int32_t v5 = function_7c18a(v4, (int32_t)&g870); // 0x7a884
    g6 = v1;
    int32_t v6;
    int32_t result = v5 != 0 ? v6 : 0; // 0x7a893
    g9 = result;
    g4 = result;
    return result;
}

// Address range: 0x7a89b - 0x7a8a6
int32_t function_7a89b(int32_t a1) {
    // 0x7a89b
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 88); // 0x7a8a2
    g4 = result;
    return result;
}

// Address range: 0x7a8a6 - 0x7a8b1
int32_t function_7a8a6(int32_t a1) {
    // 0x7a8a6
    g4 = a1;
    int32_t result = *(int32_t *)(a1 + 84); // 0x7a8ad
    g4 = result;
    return result;
}

// Address range: 0x7a8b1 - 0x7a972
int32_t function_7a8b1(int32_t a1, int32_t a2) {
    // 0x7a8b1
    g7 = 32;
    int32_t v1 = g8; // 0x7a8b9
    int32_t v2 = g10; // 0x7a8ba
    int32_t v3; // bp-140
    int32_t v4 = &v3; // 0x7a8bb
    g10 = a2;
    g8 = v4;
    g4 = 0;
    int32_t v5; // bp-332
    g9 = &v5;
    __asm_rep_stosd_memset((char *)&v3, 0, 32);
    g8 = (g3 ? -128 : 128) + v4;
    g7 = 0;
    g4 = v4;
    int32_t v6 = function_79810(); // 0x7a8f4
    g4 = v6;
    int32_t result; // 0x7a96c
    if (v6 != 0) {
        goto lab_0x7a964;
    } else {
        // 0x7a8fd
        int32_t v7;
        if (v7 == 2) {
            goto lab_0x7a964;
        } else {
            while (true) {
              lab_0x7a906:;
                int32_t v8 = *(int32_t *)(g5 - 324 + 8 * v6); // 0x7a906
                g7 = v8;
                char v9 = v8; // 0x7a90d
                *(char *)(v6 + 92 + g10) = v9;
                if (v9 == 1) {
                    goto lab_0x7a91b;
                } else {
                    // 0x7a916
                    if ((char)g7 != 2) {
                        // 0x7a928
                        *(int32_t *)(g10 + 16 + 4 * g4) = 0;
                        goto lab_0x7a930;
                    } else {
                        goto lab_0x7a91b;
                    }
                }
            }
          lab_0x7a936:
            // 0x7a936
            result = g10;
            goto lab_0x7a966;
        }
    }
  lab_0x7a91b:;
    int32_t v10 = g4; // 0x7a91b
    int32_t v11 = *(int32_t *)(g5 - 328 + 8 * v10); // 0x7a91b
    g9 = v11;
    *(int32_t *)(4 * v10 + 16 + g10) = v11;
    goto lab_0x7a930;
  lab_0x7a930:;
    int32_t v12 = g4; // 0x7a930
    int32_t v13 = v12 + 1; // 0x7a930
    g4 = v13;
    if (v12 == 17) {
        // break -> 0x7a936
        goto lab_0x7a936;
    }
    v6 = v13;
    goto lab_0x7a906;
  lab_0x7a964:
    // 0x7a964
    g10 = 0;
    result = 0;
    goto lab_0x7a966;
  lab_0x7a966:
    // 0x7a966
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7a972 - 0x7a977
int32_t function_7a972(void) {
    // 0x7a972
    return g4;
}

// Address range: 0x7a977 - 0x7aaac
int32_t function_7a977(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x7a97a
    int32_t v2 = g10; // 0x7a97b
    int32_t v3 = g6; // 0x7a97c
    int32_t v4 = g9; // 0x7a97d
    int32_t result = g4; // bp-24
    int32_t v5; // bp-284
    int32_t v6 = &v5; // 0x7a988
    g10 = v6;
    g4 = v6;
    g9 = &a2;
    g4 = function_7a56a(a1, (int32_t)&g870);
    int32_t v7; // bp-156
    int32_t v8 = &v7; // 0x7a998
    g8 = v8;
    g7 = 32;
    __asm_rep_movsd_memcpy((char *)&v7, (char *)&v5, 32);
    int32_t v9 = (g3 ? -128 : 128) + v8; // 0x7a9a3
    g8 = v9;
    g10 = v9;
    g7 = 0;
    int32_t v10; // bp-476
    int32_t v11 = &v10; // 0x7a9ae
    int32_t result2; // 0x7aaab
    while (true) {
        // 0x7a9a8
        g4 = v8;
        g9 = v11;
        int32_t v12 = function_79810(); // 0x7a9ba
        g4 = v12;
        if (v12 == 5) {
            result2 = v12;
            // break -> 0x7aaa1
            break;
        }
        if (v12 != 0) {
            // 0x7aa9c
            g4 = 3;
            result2 = 3;
            goto lab_0x7aaa1;
        }
        int32_t v13;
        if (v13 != 0) {
            // 0x7a9da
            *(int32_t *)(g11 - 4) = v11;
            *(int32_t *)(g11 - 8) = v11;
            *(int32_t *)(g11 - 12) = v8;
            int32_t v14 = a2; // 0x7a9e3
            g9 = v14;
            *(int32_t *)(g11 - 16) = v14;
            *(int32_t *)(g11 - 20) = *(int32_t *)(g9 + 4);
            *(int32_t *)(g11 - 24) = *(int32_t *)g9;
            *(int32_t *)(g11 - 28) = 1;
            *(int32_t *)(g11 - 32) = 1;
            if (v13 == 6) {
                // 0x7aa18
                g10 = v6;
                g7 = 32;
                g8 = v8;
                *(int32_t *)(a2 + 12) = 0;
                int32_t v15;
                int32_t v16 = v15 - (int32_t)(g9 < 0); // 0x7aa3c
                g4 = v16;
                *(int32_t *)(a2 + 16) = v16;
                g9 = v8;
                __asm_rep_movsd_memcpy((char *)&v7, (char *)&v5, 32);
                int32_t v17 = (g3 ? -128 : 128) + v8; // 0x7aa4a
                g8 = v17;
                g10 = v17;
                g7 = 0;
                g4 = a2;
                int32_t v18 = function_7a728(); // 0x7aa4f
                g4 = v18;
                if (v18 == 7) {
                    // 0x7aa59
                    g9 = v8;
                    g4 = v6;
                    int32_t v19 = function_79c08(); // 0x7aa65
                    g4 = v19;
                    g8 = v19;
                    *(int32_t *)(g11 - 4) = v19;
                    *(int32_t *)(g11 - 8) = g4;
                    *(int32_t *)(g11 - 12) = g10;
                    function_7a972();
                    int32_t v20 = g8 + 4 + g5; // 0x7aa7f
                    g7 = v20;
                    *(int32_t *)v20 = g10;
                    g4 = result;
                    g9 = v4;
                    g6 = v3;
                    g10 = v2;
                    g8 = v1;
                    return result;
                }
                result2 = v18;
                goto lab_0x7aaa1;
            }
            if (v13 != 8) {
                // 0x7aa9c
                g4 = 3;
                result2 = 3;
                goto lab_0x7aaa1;
            }
        }
        // 0x7aa05
        g9 = v11;
        g4 = v8;
        g4 = function_7a631();
    }
  lab_0x7aaa1:
    // 0x7aaa1
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x7aaac - 0x7ab57
int32_t function_7aaac(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x7aaaf
    int32_t v2 = g10; // 0x7aab0
    int32_t v3 = g6; // 0x7aab1
    int32_t v4 = g9; // 0x7aab2
    int32_t result2 = g4; // bp-24
    int32_t v5; // bp-284
    int32_t v6 = &v5; // 0x7aabd
    g4 = v6;
    g9 = &a2;
    int32_t v7; // bp-156
    int32_t v8 = &v7; // 0x7aacc
    g8 = v8;
    g4 = function_7a56a(a1, (int32_t)&g870);
    g10 = v6;
    g7 = 32;
    __asm_rep_movsd_memcpy((char *)&v7, (char *)&v5, 32);
    int32_t v9 = (g3 ? -128 : 128) + v8; // 0x7aae2
    g8 = v9;
    g10 = v9;
    g7 = 0;
    int32_t v10 = a2; // 0x7aaea
    g9 = v10;
    *(int32_t *)(v10 + 12) = a3;
    *(int32_t *)(g9 + 16) = a4;
    g4 = a2;
    g9 = v8;
    int32_t result = function_7a66b(); // 0x7aaff
    g4 = result;
    if (result != 7) {
        // 0x7ab09
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x7ab14
    g9 = v8;
    g4 = v6;
    int32_t v11 = function_79c08(); // 0x7ab20
    g4 = v11;
    g10 = v11;
    function_7a972();
    int32_t v12 = g10 + 4 + g5; // 0x7ab3a
    g7 = v12;
    *(int32_t *)v12 = g8;
    g4 = result2;
    g9 = v4;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x7ab57 - 0x7abfe
int32_t function_7ab57(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x7ab5a
    int32_t v2 = g10; // 0x7ab5b
    int32_t v3 = g6; // 0x7ab5c
    int32_t v4 = g9; // 0x7ab5d
    int32_t result = function_1bbc2(v4); // 0x7ab5e
    g6 += 0x286f5;
    int32_t v5; // bp-284
    int32_t v6 = &v5; // 0x7ab69
    g10 = v6;
    g4 = v6;
    g9 = &a2;
    int32_t v7; // bp-156
    int32_t v8 = &v7; // 0x7ab7e
    g8 = v8;
    g4 = function_7a56a(a1, (int32_t)&g870);
    g7 = 32;
    __asm_rep_movsd_memcpy((char *)&v7, (char *)&v5, 32);
    int32_t v9 = (g3 ? -128 : 128) + v8; // 0x7ab91
    g8 = v9;
    g10 = v9;
    g7 = 0;
    g9 = v8;
    g4 = a2;
    int32_t v10;
    if (*(int32_t *)(a2 + 12) != 0) {
        // 0x7aba9
        g4 = a2;
        v10 = function_7a66b();
    } else {
        // 0x7aba2
        v10 = function_7a728();
    }
    // 0x7abb1
    g4 = v10;
    if (v10 != 7) {
        // 0x7abb6
        abort();
        // UNREACHABLE
    }
    // 0x7abbb
    g9 = v8;
    g4 = v6;
    int32_t v11 = function_79c08(); // 0x7abc7
    g4 = v11;
    g10 = v11;
    function_7a972();
    int32_t v12 = g10 + 4 + g5; // 0x7abe1
    g7 = v12;
    *(int32_t *)v12 = g8;
    g4 = result;
    g9 = v4;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7abfe - 0x7acbf
int32_t function_7abfe(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t v2 = g8; // 0x7ac01
    int32_t v3 = g10; // 0x7ac02
    int32_t v4 = g6; // 0x7ac03
    int32_t v5 = g9; // 0x7ac04
    int32_t result2 = g4; // 0x7ac05
    g4 = a2;
    int32_t v6 = function_1bbc2(result2); // 0x7ac0f
    g4 = v6;
    g6 += 0x28644;
    if (*(int32_t *)(v6 + 12) == 0) {
        int32_t result = function_7a977(v6, (int32_t)&g870); // 0x7ac24
        g4 = result;
        g6 = v4;
        g10 = v3;
        g8 = v2;
        return result;
    }
    // 0x7ac34
    int32_t v7; // bp-284
    int32_t v8 = &v7; // 0x7ac3a
    g4 = v8;
    g9 = &v1;
    int32_t v9; // bp-156
    int32_t v10 = &v9; // 0x7ac49
    g8 = v10;
    g4 = function_7a56a(a1, (int32_t)&g870);
    g10 = v8;
    g7 = 32;
    __asm_rep_movsd_memcpy((char *)&v9, (char *)&v7, 32);
    int32_t v11 = (g3 ? -128 : 128) + v10; // 0x7ac5f
    g8 = v11;
    g10 = v11;
    g7 = 0;
    g9 = v10;
    g4 = v1;
    int32_t v12 = function_7a66b(); // 0x7ac6d
    g4 = v12;
    if (v12 != 7) {
        // 0x7ac77
        abort();
        // UNREACHABLE
    }
    // 0x7ac7c
    g9 = v10;
    g4 = v8;
    int32_t v13 = function_79c08(); // 0x7ac88
    g4 = v13;
    g10 = v13;
    function_7a972();
    int32_t v14 = g10 + 4 + g5; // 0x7aca2
    g7 = v14;
    *(int32_t *)v14 = g8;
    g4 = result2;
    g9 = v5;
    g6 = v4;
    g10 = v3;
    g8 = v2;
    return result2;
}

// Address range: 0x7acbf - 0x7acdb
int32_t function_7acbf(int32_t a1) {
    // 0x7acbf
    g9 = a1;
    int32_t result = *(int32_t *)(a1 + 8); // 0x7acc8
    g4 = result;
    // 0x7acd9
    return result;
}

// Address range: 0x7acdb - 0x7ad5b
int32_t function_7acdb(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x7acde
    int32_t v2 = g10; // 0x7acdf
    g8 = a2;
    int32_t v3;
    g9 = &v3;
    int32_t v4; // bp-140
    int32_t v5 = &v4; // 0x7acef
    g4 = v5;
    g4 = function_7a56a(a1, (int32_t)&g870);
    int32_t v6; // bp-332
    int32_t v7 = &v6; // 0x7acfd
    int32_t result; // 0x7ad55
    while (true) {
        // 0x7acfd
        g9 = v7;
        g4 = v5;
        int32_t v8 = function_79810(); // 0x7ad09
        g4 = v8;
        g9 = v8;
        if (v8 != 5) {
            if (v8 != 0) {
                // break -> 0x7ad4d
                break;
            }
        }
        // 0x7ad19
        *(int32_t *)(g11 - 4) = v8;
        *(int32_t *)(g11 - 8) = v8;
        *(int32_t *)(g11 - 12) = g8;
        g10 = v5;
        *(int32_t *)(g11 - 16) = v5;
        int32_t v9 = g9; // 0x7ad23
        if (v8 != 0) {
            // break -> 0x7ad4d
            break;
        }
        if (v9 == 5) {
            result = v9;
            // 0x7ad52
            g4 = result;
            g10 = v2;
            g8 = v1;
            return result;
        }
        // 0x7ad3e
        g9 = v7;
        g4 = v5;
        g4 = function_7a631();
    }
    // 0x7ad4d
    g9 = 3;
    result = 3;
    // 0x7ad52
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7ad5b - 0x7ad5f
int32_t function_7ad5b(int32_t a1) {
    // 0x7ad5b
    g7 = a1;
    return g4;
}

// Address range: 0x7ad60 - 0x7ad90
int32_t function_7ad60(void) {
    // 0x7ad60
    g7 = 0;
    int32_t v1 = g8; // 0x7ad65
    int32_t v2 = g10; // 0x7ad66
    g10 = 0;
    int32_t v3 = g9; // 0x7ad6c
    int32_t v4 = 0; // 0x7ad7d
    int32_t v5 = 0; // 0x7ad7a
    int32_t v6 = g4; // 0x7ad6f
    int32_t v7; // 0x7ad7d
    while (true) {
        unsigned char v8 = *(char *)v6; // 0x7ad6f
        int32_t v9 = v8; // 0x7ad6f
        g8 = v9;
        int32_t v10 = v6 + 1; // 0x7ad72
        g4 = v10;
        int32_t v11 = v8 % 128; // 0x7ad75
        uint32_t v12 = v5 & (int32_t)&g862 & 31; // 0x7ad78
        int32_t v13; // 0x7ad78
        if (v12 != 0) {
            // bb
            v13 = v11 << v12;
        } else {
            v13 = v11;
        }
        // bb14
        g9 = v13;
        int32_t v14 = v5 + 7; // 0x7ad7a
        g7 = v14;
        v7 = v13 | v4;
        g10 = v7;
        g9 = v9;
        if (v8 >= 0) {
            // break -> 0x7ad85
            break;
        }
        v4 = v7;
        v5 = v14;
        v6 = v10;
    }
    // 0x7ad85
    *(int32_t *)v3 = v7;
    g9 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x7ad90 - 0x7adda
int32_t function_7ad90(void) {
    // 0x7ad90
    g7 = 0;
    int32_t v1 = g8; // 0x7ad95
    int32_t v2 = g9; // 0x7ad96
    g8 = v2;
    int32_t v3 = g10; // 0x7ad98
    g9 = 0;
    int32_t v4 = 0; // 0x7adb4
    int32_t v5 = 0; // 0x7adb1
    int32_t v6 = 0; // 0x7ada1
    int32_t v7 = g4; // 0x7ada3
    int32_t v8; // 0x7adb1
    int32_t v9; // 0x7ada1
    int32_t v10; // 0x7adb4
    while (true) {
        unsigned char v11 = *(char *)v7; // 0x7ada1
        v9 = v11;
        int32_t v12 = v7 + 1; // 0x7ada3
        g4 = v12;
        g10 = (v9 | v6 & -256) & (int32_t)&g862;
        int32_t v13 = v9 & (int32_t)&g862 & 127; // 0x7adac
        uint32_t v14 = v5 & (int32_t)&g862 & 31; // 0x7adaf
        int32_t v15; // 0x7adaf
        if (v14 != 0) {
            // bb
            v15 = v13 << v14;
        } else {
            v15 = v13;
        }
        // bb16
        g9 = v15;
        v8 = v5 + 7;
        g7 = v8;
        v10 = v15 | v4;
        if (v11 >= 0) {
            // break -> 0x7adbd
            break;
        }
        v4 = v10;
        v5 = v8;
        v6 = v15;
        v7 = v12;
    }
    // 0x7adbd
    g9 = v10;
    int32_t v16; // 0x7adcf
    if (v8 < 32) {
        int32_t v17 = v9 & (int32_t)&g862 & 64; // 0x7adc5
        g10 = v17;
        if (v17 != 0) {
            uint32_t v18 = v8 & (int32_t)&g862 & 31; // 0x7adcd
            int32_t v19; // 0x7adcd
            if (v18 != 0) {
                // bb18
                v19 = -1 << v18;
            } else {
                v19 = -1;
            }
            // bb19
            g10 = v19;
            v16 = v19 | v10;
            g9 = v16;
        } else {
            v16 = v10;
        }
    } else {
        v16 = v10;
    }
    // 0x7add1
    *(int32_t *)v2 = v16;
    g10 = v3;
    g8 = v1;
    return g4;
}

// Address range: 0x7adda - 0x7adff
int32_t function_7adda(int32_t a1, int32_t a2) {
    // 0x7adda
    g4 = 1;
    g9 = a2;
    g7 = a1;
    int32_t v1 = g8; // 0x7ade8
    int32_t v2 = g10; // 0x7ade9
    int32_t * v3 = (int32_t *)(a2 + 8); // 0x7adea
    uint32_t v4 = *v3; // 0x7adea
    g10 = v4;
    int32_t * v5 = (int32_t *)(a1 + 8); // 0x7aded
    uint32_t v6 = *v3; // 0x7adf0
    g8 = v6;
    int32_t v7 = *v5 < v4; // 0x7adf3
    g10 = v7;
    int32_t result = *v5 <= v6 ? v7 : 1; // 0x7adf8
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7adff - 0x7ae8a
int32_t function_7adff(int32_t a1, int32_t a2, uint32_t a3) {
    int32_t v1 = g8; // 0x7ae02
    int32_t v2 = g10; // 0x7ae03
    g9 = a2;
    int32_t v3 = g4; // 0x7ae10
    g8 = a1;
    int32_t v4 = 2 * a2 | 1; // 0x7ae15
    g10 = v4;
    g7 = a2;
    int32_t result;
    if (v4 >= a3) {
        // 0x7ae83
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t result2;
    while (true) {
        int32_t v5 = v4 + 1; // 0x7ae1d
        g9 = v5;
        int32_t v6; // 0x7ae4c
        int32_t v7; // 0x7ae43
        if (v5 < a3) {
            // 0x7ae25
            *(int32_t *)(g11 - 4) = result;
            *(int32_t *)(g11 - 8) = *(int32_t *)(4 * g9 + g8);
            *(int32_t *)(g11 - 12) = *(int32_t *)(4 * g10 + g8);
            *(int32_t *)(g11 - 16) = v3;
            v7 = result < 0 ? g9 : g10;
            g10 = v7;
            v6 = g11;
        } else {
            // 0x7ae1d
            v6 = g11;
            v7 = v4;
        }
        int32_t v8 = g8; // 0x7ae46
        g9 = 4 * v7 + v8;
        g7 = v8 + 4 * g7;
        *(int32_t *)(v6 - 4) = result;
        *(int32_t *)(v6 - 8) = *(int32_t *)g9;
        *(int32_t *)(v6 - 12) = *(int32_t *)g7;
        *(int32_t *)(v6 - 16) = v3;
        if (result >= 0) {
            // break -> 0x7ae46
            break;
        }
        int32_t * v9 = (int32_t *)g7; // 0x7ae6a
        int32_t v10 = *v9; // 0x7ae6a
        g4 = v10;
        *v9 = *(int32_t *)g9;
        g4 = v10;
        int32_t v11 = g10; // 0x7ae76
        g7 = v11;
        g10 = 2 * v11 | 1;
        *(int32_t *)g9 = v10;
        int32_t v12 = g10;
        if (v12 >= a3) {
            result2 = v10;
            goto lab_0x7ae83;
        }
        result = v10;
        v4 = v12;
    }
    result2 = result;
  lab_0x7ae83:
    // 0x7ae83
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x7ae8a - 0x7aefe
int32_t function_7ae8a(int32_t a1) {
    int32_t v1 = g8; // 0x7ae8d
    int32_t v2 = g10; // 0x7ae8e
    g10 = a1;
    int32_t v3 = g4; // 0x7ae95
    int32_t v4 = g9; // 0x7ae98
    uint32_t v5 = *(int32_t *)(a1 + 4); // 0x7ae9b
    g7 = v5;
    int32_t v6 = a1 + 8; // 0x7ae9e
    g4 = v6;
    g8 = v5 / 2 - 1;
    int32_t result; // 0x7aefd14
    int32_t v7; // 0x7aec0
    if (v5 >= 2) {
        int32_t v8; // bp-28
        int32_t v9 = &v8; // 0x7aeab
        *(int32_t *)(v9 - 4) = v6;
        g9 = v4;
        *(int32_t *)(v9 - 8) = g7;
        g4 = v3;
        *(int32_t *)(v9 - 12) = g8;
        g8--;
        *(int32_t *)(v9 - 16) = v6;
        int32_t v10 = g7; // 0x7aeb8
        v8 = v10;
        int32_t v11 = function_7adff(v10, (int32_t)&g870, (int32_t)&g870); // 0x7aebb
        g4 = v11;
        v7 = v8;
        g7 = v7;
        result = v11;
        while (g8 >= 0) {
            // 0x7aeab
            v9 = g11 + 16;
            *(int32_t *)(v9 - 4) = v11;
            g9 = v4;
            *(int32_t *)(v9 - 8) = g7;
            g4 = v3;
            *(int32_t *)(v9 - 12) = g8;
            g8--;
            *(int32_t *)(v9 - 16) = v6;
            v10 = g7;
            v8 = v10;
            v11 = function_7adff(v10, (int32_t)&g870, (int32_t)&g870);
            g4 = v11;
            v7 = v8;
            g7 = v7;
            result = v11;
        }
    } else {
        result = v6;
        v7 = v5;
    }
    int32_t v12 = v7 - 1; // 0x7aeca
    g8 = v12;
    if (v12 >= 0 != v12 != 0) {
        // 0x7aef7
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t v13 = g10 + 8; // 0x7aecf
    int32_t * v14 = (int32_t *)v13; // 0x7aecf
    g4 = *v14;
    *v14 = *(int32_t *)(v13 + 4 * v12);
    g9 = v4;
    *(int32_t *)(g10 + 8 + 4 * g8) = g4;
    *(int32_t *)(g11 - 4) = g4;
    g4 = v3;
    *(int32_t *)(g11 - 8) = g8;
    g8--;
    *(int32_t *)(g11 - 12) = 0;
    *(int32_t *)(g11 - 16) = v6;
    int32_t result2 = function_7adff((int32_t)&g870, (int32_t)&g870, (int32_t)&g870); // 0x7aeeb
    g4 = result2;
    while (g8 >= 0 == (g8 != 0)) {
        // 0x7aecf
        v13 = g10 + 8;
        v14 = (int32_t *)v13;
        g4 = *v14;
        *v14 = *(int32_t *)(v13 + 4 * g8);
        g9 = v4;
        *(int32_t *)(g10 + 8 + 4 * g8) = g4;
        *(int32_t *)(g11 - 4) = g4;
        g4 = v3;
        *(int32_t *)(g11 - 8) = g8;
        g8--;
        *(int32_t *)(g11 - 12) = 0;
        *(int32_t *)(g11 - 16) = v6;
        result2 = function_7adff((int32_t)&g870, (int32_t)&g870, (int32_t)&g870);
        g4 = result2;
    }
    // 0x7aef7
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x7aefe - 0x7af4e
int32_t function_7aefe(void) {
    int32_t v1 = g6; // 0x7af01
    int32_t v2 = function_1bbc2(v1); // 0x7af02
    g4 = v2;
    g6 += 0x28351;
    int32_t v3 = g7; // 0x7af0f
    if ((char)v2 == -1) {
        // 0x7af41
        g4 = 0;
        // 0x7af4a
        g9 = v3;
        g6 = v1;
        return 0;
    }
    uint32_t v4 = v2 % 8; // 0x7af12
    g4 = v4;
    if (v4 == 2) {
        // 0x7af45
        g4 = 2;
        // 0x7af4a
        g9 = v3;
        g6 = v1;
        return 2;
    }
    if (v4 > 2) {
        if (v4 != 3) {
            if (v4 != 4) {
                // 0x7af3c
                abort();
                // UNREACHABLE
            }
            // 0x7af35
            g4 = 8;
            // 0x7af4a
            g9 = v3;
            g6 = v1;
            return 8;
        }
    } else {
        if (v4 != 0) {
            // 0x7af3c
            abort();
            // UNREACHABLE
        }
    }
    // 0x7af2e
    g4 = 4;
    // 0x7af4a
    g9 = v3;
    g6 = v1;
    return 4;
}

// Address range: 0x7af4e - 0x7af96
int32_t function_7af4e(void) {
    int32_t v1 = g6; // 0x7af51
    int32_t v2 = function_1bbc2(v1); // 0x7af52
    g4 = v2;
    g6 += 0x28301;
    int32_t v3 = g7; // 0x7af5f
    int32_t v4;
    if ((char)v2 == -1) {
        goto lab_0x7af90;
    } else {
        int32_t v5 = v2 & 112; // 0x7af62
        g4 = v5;
        if (v5 == 32) {
            int32_t result = *(int32_t *)(g9 + 4); // 0x7af81
            g4 = result;
            // 0x7af92
            g9 = v3;
            g6 = v1;
            return result;
        }
        if (v5 > 32) {
            if (v5 == 48) {
                int32_t result2 = *(int32_t *)(g9 + 8); // 0x7af86
                g4 = result2;
                // 0x7af92
                g9 = v3;
                g6 = v1;
                return result2;
            }
            // 0x7af7a
            v4 = v5 - 80;
            goto lab_0x7af7d;
        } else {
            if (v5 == 0) {
                goto lab_0x7af90;
            } else {
                // 0x7af70
                v4 = v5 - 16;
                goto lab_0x7af7d;
            }
        }
    }
  lab_0x7af90:
    // 0x7af90
    g4 = 0;
    // 0x7af92
    g9 = v3;
    g6 = v1;
    return 0;
  lab_0x7af7d:
    if (v4 != 0) {
        // 0x7af8b
        abort();
        // UNREACHABLE
    }
    goto lab_0x7af90;
}

// Address range: 0x7af96 - 0x7b03f
int32_t function_7af96(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x7af99
    g8 = g9;
    int32_t v2 = g10; // 0x7af9c
    int32_t v3 = g6; // 0x7af9d
    g10 = a1;
    int32_t v4 = function_1bbc2(v3); // 0x7afa4
    g4 = v4;
    int32_t v5 = g6; // 0x7afa9
    int32_t v6 = v5 + 0x282af; // 0x7afa9
    g6 = v6;
    if ((char)v4 != 80) {
        uint32_t v7 = v4 % 16; // 0x7afca
        g4 = v7;
        if (v7 >= 13) {
            // 0x7b013
            abort();
            // UNREACHABLE
        }
        int32_t result = *(int32_t *)(v5 + 0xd1e3 + 4 * v7) + v6; // 0x7afd9
        g4 = result;
        return result;
    }
    int32_t v8 = g10 + 3 & -4; // 0x7afb9
    g10 = v8;
    int32_t v9 = *(int32_t *)v8; // 0x7afbc
    g9 = v9;
    g4 = v8 + 4;
    g7 = a2;
    *(int32_t *)a2 = v9;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return g4;
}

// Address range: 0x7b03f - 0x7b0ec
int32_t function_7b03f(void) {
    // 0x7b03f
    g7 = -1;
    int32_t v1 = g8; // 0x7b045
    int32_t v2 = g10; // 0x7b046
    int32_t v3 = g4; // 0x7b047
    g10 = v3;
    int32_t v4 = v3 + 9; // 0x7b049
    g8 = v4;
    g4 = 0;
    int32_t v5 = v4; // 0x7b051
    int32_t v6 = -1; // 0x7b051
    int32_t v7; // 0x7b057
    while (true) {
        if (v6 == 0) {
            v7 = 0;
            // break -> bb19
            break;
        }
        int32_t v8 = (g3 ? -1 : 1) + v5; // 0x7b051
        g8 = v8;
        int32_t v9 = v6 - 1; // 0x7b051
        g7 = v9;
        if (*(char *)v5 == 0) {
            v7 = v9;
            // break -> bb19
            break;
        }
        v5 = v8;
        v6 = v9;
    }
    int32_t v10 = -1 - v7; // 0x7b057
    g7 = v10;
    int32_t v11 = v3 + v10; // 0x7b059
    g9 = v11;
    int32_t v12 = v11 + 9; // 0x7b05c
    g8 = v12;
    int32_t v13; // 0x7b074
    if (*(char *)(v3 + 8) >= 4) {
        // 0x7b061
        g4 = (int32_t)&g862;
        if (*(char *)(v4 + v10) != 4 || *(char *)(v3 + 10 + v10) != 0) {
            // 0x7b0e5
            g10 = v2;
            g8 = v1;
            return (int32_t)&g862;
        }
        // 0x7b074
        v13 = v11 + 11;
        g8 = v13;
    } else {
        v13 = v12;
    }
    // 0x7b077
    g4 = 0;
    if (*(char *)v4 != 122) {
        // 0x7b0e5
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x7b07f
    int32_t v14; // bp-20
    int32_t v15 = &v14; // 0x7b07f
    g9 = v15;
    g4 = v13;
    g4 = function_7ad60();
    int32_t v16; // bp-16
    g9 = &v16;
    int32_t v17 = function_7ad90(); // 0x7b08c
    g4 = v17;
    int32_t v18 = g10; // 0x7b091
    int32_t v19; // 0x7b09d
    int32_t v20; // 0x7b0a5
    if (*(char *)(v18 + 8) != 1) {
        // 0x7b09a
        g9 = v15;
        v19 = function_7ad60();
        v20 = g10;
    } else {
        // 0x7b097
        v20 = v18;
        v19 = v17 + 1;
    }
    // 0x7b0a2
    g4 = v19;
    g9 = v15;
    g10 = v20 + 10;
    int32_t v21 = function_7ad60(); // 0x7b0a8
    g4 = v21;
    int32_t v22; // bp-24
    int32_t v23 = &v22; // 0x7b0ad
    g8 = v23;
    int32_t v24 = g10; // 0x7b0b0
    int32_t result; // 0x7b0b7
    while (true) {
        unsigned char v25 = *(char *)v24; // 0x7b0b0
        g9 = g9 & -256 | (int32_t)v25;
        if (v25 == 82) {
            // break -> 0x7b0b7
            break;
        }
        int32_t v26; // 0x7b0e0
        int32_t v27; // 0x7b0df
        if (v25 != 80) {
            if (v25 != 76) {
                // 0x7b0e3
                g4 = 0;
                result = 0;
                goto lab_0x7b0e5;
            }
            // 0x7b0df
            v27 = v21 + 1;
            g4 = v27;
            v26 = v24;
        } else {
            // 0x7b0c1
            g9 = v21 + 1;
            g4 = (int32_t)*(char *)v21;
            *(int32_t *)(g11 - 4) = g7;
            *(int32_t *)(g11 - 8) = g7;
            *(int32_t *)(g11 - 12) = v23;
            *(int32_t *)(g11 - 16) = g9;
            g4 %= 128;
            g9 = 0;
            int32_t v28 = function_7af96((int32_t)&g870, (int32_t)&g870); // 0x7b0d0
            g4 = v28;
            v26 = g10;
            v27 = v28;
        }
        int32_t v29 = v26 + 1; // 0x7b0e0
        g10 = v29;
        v21 = v27;
        v24 = v29;
    }
    // 0x7b0b7
    result = (int32_t)*(char *)v21;
    g4 = result;
  lab_0x7b0e5:
    // 0x7b0e5
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7b0ec - 0x7b0fd
int32_t function_7b0ec(void) {
    int32_t v1 = g4 + 4; // 0x7b0ed
    g9 = v1;
    int32_t v2 = v1 - *(int32_t *)v1; // 0x7b0f2
    g9 = v2;
    g4 = v2;
    int32_t result = function_7b03f(); // 0x7b0f8
    g4 = result;
    return result;
}

// Address range: 0x7b0fd - 0x7b21b
int32_t function_7b0fd(int32_t a1) {
    int32_t v1 = g5; // 0x7b0fd
    int32_t v2 = v1; // bp-4
    g5 = &v2;
    int32_t v3 = g8; // 0x7b100
    int32_t v4 = g9; // 0x7b101
    g8 = v4;
    int32_t v5 = g10; // 0x7b103
    int32_t v6 = g4; // 0x7b107
    int32_t result;
    if (*(int32_t *)v4 == 0) {
        result = 0;
        // 0x7b211
        g4 = result;
        g10 = v5;
        g8 = v3;
        g5 = v1;
        return result;
    }
    int32_t v7 = v6 + 16; // 0x7b1a9
    char * v8 = (char *)v7; // 0x7b1a9
    int32_t v9 = 0;
    int32_t v10 = 0;
    int32_t v11 = 0;
    int32_t v12 = 0;
    int32_t v13;
    while (true) {
        int32_t v14 = v4 + 4; // 0x7b12b
        int32_t v15 = *(int32_t *)v14; // 0x7b12b
        g4 = v15;
        int32_t v16;
        int32_t v17;
        int32_t v18;
        int32_t v19;
        if (v15 != 0) {
            int32_t v20 = v14 - v15; // 0x7b139
            g10 = v20;
            int32_t v21;
            int32_t v22;
            int32_t v23;
            if (v20 != v9) {
                // 0x7b140
                g4 = v20;
                int32_t v24 = function_7b03f(); // 0x7b142
                g4 = v24;
                if (v24 == (int32_t)&g862) {
                    v13 = -1;
                    // break -> 0x7b211
                    break;
                }
                // 0x7b155
                g9 = v6;
                int32_t v25 = v24 & (int32_t)&g862; // 0x7b158
                g7 = g7 & -256 | v25;
                g4 = v25;
                int32_t v26 = function_7af4e(); // 0x7b160
                g4 = v26;
                g9 = v6;
                int32_t v27 = g7 & -256 | v24 & (int32_t)&g862 & 255; // 0x7b168
                g7 = v27;
                uint32_t v28 = *(int32_t *)v7; // 0x7b16e
                g4 = v28;
                uint16_t v29 = (int16_t)v28 & (int16_t)&g137; // 0x7b173
                int32_t v30 = v28 & -0x10000; // 0x7b173
                g9 = (int32_t)v29 | v30;
                if (v29 != (int16_t)&g137) {
                    int32_t v31 = (v28 / 8 & 0x1ffc | v30) & (int32_t)&g862; // 0x7b19b
                    g4 = v31;
                    int32_t v32 = g10; // 0x7b1a1
                    if (v31 != v24) {
                        // 0x7b1a6
                        g4 = v6;
                        *v8 = *v8 | 4;
                        v23 = v26;
                        v21 = v24;
                        v22 = v32;
                    } else {
                        v23 = v26;
                        v21 = v24;
                        v22 = v32;
                    }
                } else {
                    // 0x7b17f
                    g9 = v6;
                    int32_t v33 = 8 * (v27 & (int32_t)&g862); // 0x7b189
                    g7 = v33;
                    int32_t v34 = v33 | v28 & -2041; // 0x7b18c
                    g4 = v34;
                    *(int16_t *)v7 = (int16_t)v34;
                    v23 = v26;
                    v21 = v24;
                    v22 = g10;
                }
            } else {
                v23 = v12;
                v21 = v11;
                v22 = v9;
            }
            // 0x7b1ad
            *(int32_t *)(g11 - 4) = g4;
            g10 = v21 % 256;
            *(int32_t *)(g11 - 8) = g4;
            int32_t v35; // bp-16
            *(int32_t *)(g11 - 12) = (int32_t)&v35;
            g9 = v23;
            *(int32_t *)(g11 - 16) = g8 + 8;
            g4 = g10;
            function_7af96((int32_t)&g870, (int32_t)&g870);
            g4 = g10;
            int32_t v36 = function_7aefe(); // 0x7b1c7
            g4 = v36;
            g9 = -1;
            int32_t v37; // 0x7b1e5
            if (v36 < 4) {
                int32_t v38 = 8 * v36; // 0x7b1d7
                g7 = v38;
                uint32_t v39 = v38 & (int32_t)&g862 & 31; // 0x7b1e3
                int32_t v40; // 0x7b1e5
                if (v39 != 0) {
                    // bb
                    v40 = 1 << v39;
                } else {
                    v40 = 1;
                }
                // bb32
                v37 = v40 - 1;
                g9 = v37;
            } else {
                v37 = -1;
            }
            g4 = v35;
            if ((v35 & v37) != 0) {
                // 0x7b1ed
                g9 = v6;
                v19 = v23;
                v16 = v21;
                v17 = v10 + 1;
                v18 = v22;
            } else {
                v19 = v23;
                v16 = v21;
                v17 = v10;
                v18 = v22;
            }
        } else {
            v19 = v12;
            v16 = v11;
            v17 = v10;
            v18 = v9;
        }
        int32_t v41 = g8; // 0x7b1f9
        int32_t v42 = *(int32_t *)v41; // 0x7b1f9
        g4 = v42;
        int32_t v43 = v41 + 4 + v42; // 0x7b1fb
        g8 = v43;
        if (*(int32_t *)v43 == 0) {
            v13 = v17;
            // break -> 0x7b211
            break;
        }
        v4 = v43;
        v9 = v18;
        v10 = v17;
        v11 = v16;
        v12 = v19;
    }
    // 0x7b211
    result = v13;
    // 0x7b211
    g4 = result;
    g10 = v5;
    g8 = v3;
    g5 = v2;
    return result;
}

// Address range: 0x7b21b - 0x7b2fd
int32_t function_7b21b(int32_t a1) {
    int32_t v1 = g8; // 0x7b21e
    int32_t v2 = g10; // 0x7b21f
    g8 = a1;
    int32_t v3 = g9; // 0x7b226
    int32_t v4 = g4; // 0x7b229
    g9 = v4;
    int32_t v5 = v4 + 16; // 0x7b22e
    int32_t v6 = *(int32_t *)v5; // 0x7b22e
    int32_t v7 = ((int32_t)((int16_t)v6 / 8) | v6 & -0x10000) & (int32_t)&g862; // 0x7b235
    g4 = v7;
    int32_t result = function_7af4e(); // 0x7b23b
    g4 = result;
    int32_t v8 = g8; // 0x7b2ed4
    if (*(int32_t *)v8 == 0) {
        // 0x7b2f6
        g10 = v2;
        g8 = v1;
        return result;
    }
    int32_t * v9 = (int32_t *)(v3 + 4); // 0x7b2dc
    int32_t v10 = 0;
    int16_t * v11 = (int16_t *)v7;
    int32_t result2; // 0x7b2e7
    while (true) {
        int32_t v12 = v8 + 4; // 0x7b24f
        int32_t v13 = *(int32_t *)v12; // 0x7b24f
        g4 = v13;
        int16_t * v14;
        int32_t v15;
        int32_t v16;
        if (v13 != 0) {
            // 0x7b25a
            g9 = v4;
            int16_t * v17;
            int32_t v18;
            int32_t v19; // 0x7b27e
            if ((*(char *)v5 & 4) != 0) {
                int32_t v20 = v12 - v13; // 0x7b266
                g10 = v20;
                if (v20 != v10) {
                    // 0x7b26d
                    g4 = v20;
                    uint32_t v21 = function_7b03f(); // 0x7b26f
                    g9 = v4;
                    g4 = v21 % 256;
                    v19 = function_7af4e();
                    g4 = v19;
                    v17 = (int16_t *)v21;
                    v18 = g10;
                } else {
                    v19 = result;
                    v17 = v11;
                    v18 = v10;
                }
            } else {
                v19 = result;
                v17 = v11;
                v18 = v10;
            }
            int32_t v22;
            if (v17 != NULL) {
                // 0x7b295
                g10 = (int32_t)v17 % 256;
                g9 = v19;
                *(int32_t *)(g11 - 4) = v19;
                *(int32_t *)(g11 - 8) = g4;
                int32_t v23; // bp-16
                *(int32_t *)(g11 - 12) = (int32_t)&v23;
                *(int32_t *)(g11 - 16) = g8 + 8;
                g4 = g10;
                function_7af96((int32_t)&g870, (int32_t)&g870);
                g4 = g10;
                int32_t v24 = function_7aefe(); // 0x7b2af
                g4 = v24;
                g9 = -1;
                int32_t v25; // 0x7b2cd
                if (v24 < 4) {
                    int32_t v26 = 8 * v24; // 0x7b2bf
                    g7 = v26;
                    uint32_t v27 = v26 & (int32_t)&g862 & 31; // 0x7b2cb
                    int32_t v28; // 0x7b2cd
                    if (v27 != 0) {
                        // bb
                        v28 = 1 << v27;
                    } else {
                        v28 = 1;
                    }
                    // bb38
                    v25 = v28 - 1;
                    g9 = v25;
                } else {
                    v25 = -1;
                }
                // 0x7b2ce
                v22 = v23 & v25;
            } else {
                // 0x7b28f
                v22 = *(int32_t *)(g8 + 8);
            }
            if (v22 != 0) {
                // 0x7b2d3
                g9 = v3;
                g4 = v3;
                if (v3 != 0) {
                    int32_t v29 = *v9; // 0x7b2dc
                    g9 = v29;
                    *(int32_t *)(v3 + 8 + 4 * v29) = g8;
                    int32_t v30 = g9 + 1; // 0x7b2e3
                    g9 = v30;
                    *v9 = v30;
                    v14 = v17;
                    v15 = v18;
                    v16 = v19;
                } else {
                    v14 = v17;
                    v15 = v18;
                    v16 = v19;
                }
            } else {
                v14 = v17;
                v15 = v18;
                v16 = v19;
            }
        } else {
            v14 = v11;
            v15 = v10;
            v16 = result;
        }
        int32_t v31 = g8; // 0x7b2e7
        result2 = *(int32_t *)v31;
        g4 = result2;
        int32_t v32 = v31 + 4 + result2; // 0x7b2e9
        g8 = v32;
        if (*(int32_t *)v32 == 0) {
            // break -> 0x7b2f6
            break;
        }
        v8 = v32;
        result = v16;
        v10 = v15;
        v11 = v14;
    }
    // 0x7b2f6
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x7b2fd - 0x7b37a
int32_t function_7b2fd(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x7b300
    int32_t v2 = g10; // 0x7b301
    g10 = a1;
    uint32_t v3 = *(int32_t *)(a1 + 16); // 0x7b308
    g9 = a1;
    int32_t v4 = (v3 / 8 & 0x1ffc | v3 & -0x10000) & (int32_t)&g862; // 0x7b311
    g8 = v4;
    g4 = v4;
    int32_t v5 = function_7af4e(); // 0x7b319
    g7 = v5;
    g9 = v5;
    int32_t v6 = a2 + 8; // 0x7b32e
    g4 = g8;
    int32_t v7; // bp-20
    function_7af96(v6, (int32_t)&v7);
    g7 = v5;
    g4 = v6;
    int32_t v8; // bp-16
    int32_t v9 = &v8; // 0x7b33e
    g9 = v9;
    uint32_t v10 = *(int32_t *)(g10 + 16); // 0x7b341
    g4 = (v10 / 8 & 0x1ffc | v10 & -0x10000) & (int32_t)&g862;
    g9 = v5;
    function_7af96(a3 + 8, v9);
    g7 = v8;
    int32_t v11 = v7 < v8; // 0x7b36b
    g9 = v11;
    int32_t result = v7 <= v8 ? v11 : 1; // 0x7b370
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7b37a - 0x7b3f7
int32_t function_7b37a(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x7b37d
    int32_t v2 = g10; // 0x7b37e
    g4 = a2;
    g8 = a2 + 8;
    int32_t v3 = function_7b0ec(); // 0x7b38a
    g9 = a1;
    int32_t v4 = v3 & (int32_t)&g862; // 0x7b392
    g10 = v4;
    g4 = v4;
    g9 = function_7af4e();
    int32_t v5 = g8; // 0x7b3a4
    g4 = g10;
    int32_t v6; // bp-20
    function_7af96(v5, (int32_t)&v6);
    g4 = a3;
    int32_t v7 = function_7b0ec(); // 0x7b3af
    g9 = a1;
    int32_t v8 = v7 & (int32_t)&g862; // 0x7b3b7
    g10 = v8;
    g4 = v8;
    g8 = v5;
    g9 = function_7af4e();
    g4 = g10;
    int32_t v9; // bp-16
    function_7af96(a3 + 8, (int32_t)&v9);
    g7 = v9;
    int32_t v10 = v6 < v9; // 0x7b3e8
    g9 = v10;
    int32_t result = v6 <= v9 ? v10 : 1; // 0x7b3ed
    g4 = result;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7b3f7 - 0x7b4f6
int32_t function_7b3f7(int32_t a1) {
    int32_t v1 = g8; // 0x7b3fa
    int32_t v2 = g4; // 0x7b3fb
    g8 = v2;
    int32_t v3 = g10; // 0x7b3fd
    g10 = g9;
    int32_t v4 = *(int32_t *)(v2 + 16); // 0x7b403
    g9 = v2;
    int32_t v5 = ((int32_t)((int16_t)v4 / 8) | v4 & -0x10000) & (int32_t)&g862; // 0x7b40c
    g4 = v5;
    int32_t v6 = function_7af4e(); // 0x7b412
    g4 = v6;
    int32_t v7 = g10; // 0x7b4e22
    int32_t v8; // bp-16
    int32_t v9; // bp-20
    int16_t * v10;
    int16_t * v11;
    int16_t * v12;
    int32_t v13;
    int32_t v14;
    int32_t v15;
    int32_t v16; // 0x7b454
    int32_t v17; // 0x7b43a
    if (*(int32_t *)v7 != 0) {
        int32_t v18 = &v9; // 0x7b484
        int32_t v19 = &v8; // 0x7b499
        v12 = (int16_t *)v5;
        v14 = 0;
        while (true) {
          lab_0x7b426:;
            int32_t v20 = v7 + 4; // 0x7b426
            int32_t v21 = *(int32_t *)v20; // 0x7b426
            g4 = v21;
            if (v21 == 0) {
                v13 = v14;
                v15 = v6;
                v11 = v12;
                goto lab_0x7b4dc;
            } else {
                // 0x7b431
                if ((*(char *)(g8 + 16) & 4) != 0) {
                    // 0x7b437
                    v17 = v20 - v21;
                    g7 = v17;
                    if (v17 != v14) {
                        // 0x7b441
                        g4 = v17;
                        uint32_t v22 = function_7b03f(); // 0x7b446
                        g9 = g8;
                        g4 = v22 % 256;
                        v16 = function_7af4e();
                        g4 = v16;
                        g7 = v17;
                        v10 = (int16_t *)v22;
                    } else {
                        v17 = v14;
                        v16 = v6;
                        v10 = v12;
                    }
                } else {
                    v17 = v14;
                    v16 = v6;
                    v10 = v12;
                }
                if (v10 != NULL) {
                    // 0x7b478
                    g4 = (int32_t)v10 % 256;
                    *(int32_t *)(g11 - 4) = g7;
                    g9 = v16;
                    *(int32_t *)(g11 - 8) = g7;
                    int32_t v23 = g4; // 0x7b481
                    *(int32_t *)(g11 - 12) = v18;
                    *(int32_t *)(g11 - 16) = g10 + 8;
                    g4 = v23;
                    g4 = function_7af96((int32_t)&g870, (int32_t)&g870);
                    g7 = v23;
                    *(int32_t *)(g11 + 4) = v19;
                    g9 = 0;
                    *(int32_t *)g11 = g4;
                    int32_t v24 = g7 % 16; // 0x7b4a0
                    g7 = v24;
                    g4 = v24;
                    function_7af96((int32_t)&g870, (int32_t)&g870);
                    g4 = v23;
                    int32_t v25 = function_7aefe(); // 0x7b4ad
                    g4 = v25;
                    g9 = -1;
                    int32_t v26; // 0x7b4cb
                    if (v25 < 4) {
                        int32_t v27 = 8 * v25; // 0x7b4bd
                        g7 = v27;
                        uint32_t v28 = v27 & (int32_t)&g862 & 31; // 0x7b4c9
                        int32_t v29; // 0x7b4cb
                        if (v28 != 0) {
                            // bb
                            v29 = 1 << v28;
                        } else {
                            v29 = 1;
                        }
                        // bb40
                        v26 = v29 - 1;
                        g9 = v26;
                    } else {
                        v26 = -1;
                    }
                    if ((v9 & v26) == 0) {
                        v13 = v17;
                        v15 = v16;
                        v11 = v10;
                        goto lab_0x7b4dc;
                    } else {
                        goto lab_0x7b4d1;
                    }
                } else {
                    int32_t v30 = g10; // 0x7b468
                    int32_t v31 = *(int32_t *)(v30 + 8); // 0x7b468
                    g4 = v31;
                    int32_t v32 = *(int32_t *)(v30 + 12); // 0x7b46b
                    g9 = v32;
                    v9 = v31;
                    v8 = v32;
                    if (v31 == 0) {
                        v13 = v17;
                        v15 = v16;
                        v11 = v10;
                        goto lab_0x7b4dc;
                    } else {
                        v8 = v32;
                        v9 = v31;
                        goto lab_0x7b4d1;
                    }
                }
            }
        }
    }
  lab_0x7b4eb:
    // 0x7b4eb
    g10 = 0;
    int32_t result = 0; // 0x7b4f0
  lab_0x7b4ed_2:
    // 0x7b4ed
    g4 = result;
    g10 = v3;
    g8 = v1;
    return result;
  lab_0x7b4dc:;
    int32_t v33 = g10; // 0x7b4dc
    int32_t v34 = *(int32_t *)v33; // 0x7b4dc
    g4 = v34;
    int32_t v35 = v33 + 4 + v34; // 0x7b4de
    g10 = v35;
    if (*(int32_t *)v35 == 0) {
        // break -> 0x7b4eb
        goto lab_0x7b4eb;
    }
    v7 = v35;
    v12 = v11;
    v6 = v15;
    v14 = v13;
    goto lab_0x7b426;
  lab_0x7b4d1:;
    int32_t v36 = a1 - v9; // 0x7b4d4
    g4 = v36;
    if (v36 < v8) {
        // 0x7b4ed
        result = g10;
        goto lab_0x7b4ed_2;
    }
    v13 = v17;
    v15 = v16;
    v11 = v10;
    goto lab_0x7b4dc;
}

// Address range: 0x7b4f6 - 0x7b53e
int32_t function_7b4f6(int32_t a1) {
    int32_t v1 = g6; // 0x7b4f9
    int32_t v2 = function_1bbc2(v1); // 0x7b4fa
    g4 = v2;
    g6 += 0x27d59;
    int32_t v3 = g7; // 0x7b507
    int32_t v4;
    if ((char)v2 == -1) {
        goto lab_0x7b538;
    } else {
        int32_t v5 = v2 & 112; // 0x7b50a
        g4 = v5;
        if (v5 == 32) {
            int32_t result = *(int32_t *)(g9 + 4); // 0x7b529
            g4 = result;
            // 0x7b53a
            g9 = v3;
            g6 = v1;
            return result;
        }
        if (v5 > 32) {
            if (v5 == 48) {
                int32_t result2 = *(int32_t *)(g9 + 8); // 0x7b52e
                g4 = result2;
                // 0x7b53a
                g9 = v3;
                g6 = v1;
                return result2;
            }
            // 0x7b522
            v4 = v5 - 80;
            goto lab_0x7b525;
        } else {
            if (v5 == 0) {
                goto lab_0x7b538;
            } else {
                // 0x7b518
                v4 = v5 - 16;
                goto lab_0x7b525;
            }
        }
    }
  lab_0x7b538:
    // 0x7b538
    g4 = 0;
    // 0x7b53a
    g9 = v3;
    g6 = v1;
    return 0;
  lab_0x7b525:
    if (v4 != 0) {
        // 0x7b533
        abort();
        // UNREACHABLE
    }
    goto lab_0x7b538;
}

// Address range: 0x7b53e - 0x7b9d0
int32_t function_7b53e(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g8; // 0x7b541
    int32_t v2 = g10; // 0x7b542
    int32_t v3 = g6; // 0x7b543
    g9 = a1;
    g7 = a1;
    g4 = a2;
    uint32_t v4 = function_1bbc2(v3); // 0x7b550
    g4 = v4;
    int32_t v5 = g6; // 0x7b555
    g6 = v5 + 0x27d03;
    g8 = a3;
    int32_t v6 = *(int32_t *)(g9 + 8); // 0x7b55e
    g9 = v6;
    int32_t v7 = *(int32_t *)g7; // 0x7b561
    g7 = v7;
    char * v8 = (char *)v7; // 0x7b56d
    int32_t v9;
    int32_t v10;
    int32_t v11;
    char * v12;
    char * v13;
    int32_t v14; // 0x7b6f1
    int32_t v15; // 0x7b6f4
    int32_t v16; // 0x7b7ba
    int32_t v17; // 0x7b583
    int32_t * v18; // 0x7b586
    if (v4 < 32) {
        goto lab_0x7b6c6;
    } else {
        // 0x7b576
        if (*(int32_t *)(a3 + 20) == 0) {
            goto lab_0x7b6c6;
        } else {
            // 0x7b580
            g10 = a1;
            v17 = *(int32_t *)(a1 + 20);
            g4 = v17;
            v18 = (int32_t *)(v5 + 0x28fef);
            int32_t v19 = *(int32_t *)(a1 + 16); // 0x7b58c
            g7 = v19;
            if (v17 != *v18) {
                goto lab_0x7b645;
            } else {
                // 0x7b595
                if (v19 != *(int32_t *)(v5 + 0x28feb)) {
                    goto lab_0x7b645;
                } else {
                    int32_t v20 = *(int32_t *)(a1 + 24); // 0x7b5a1
                    g9 = v20;
                    int32_t v21 = *(int32_t *)(v5 + 0x40037); // 0x7b5a7
                    g9 = v21;
                    if (*(int32_t *)(a1 + 28) != v21) {
                        goto lab_0x7b645;
                    } else {
                        // 0x7b5b6
                        g10 = v20;
                        if (v20 != *(int32_t *)(v5 + 0x40033)) {
                            goto lab_0x7b645;
                        } else {
                            int32_t v22 = *(int32_t *)(v5 + (int32_t)&g47 + 0x27d03); // 0x7b5c5
                            g4 = v22;
                            g7 = 0;
                            g10 = 0;
                            g9 = a1;
                            if (v22 != 0) {
                                int32_t v23 = 0; // 0x7b631
                                int32_t v24 = v22; // 0x7b9c9
                                while (true) {
                                    uint32_t v25 = *(int32_t *)a3; // 0x7b5d7
                                    g7 = v25;
                                    int32_t v26 = *(int32_t *)v24; // 0x7b5dc
                                    g7 = v26;
                                    int32_t * v27;
                                    if (v25 < v26) {
                                        // 0x7b5d7
                                        v27 = (int32_t *)(v24 + 4);
                                    } else {
                                        // 0x7b5e6
                                        g7 = v25;
                                        int32_t * v28 = (int32_t *)(v24 + 4); // 0x7b5e9
                                        if (v25 < *v28) {
                                            // break -> 0x7b5ee
                                            break;
                                        }
                                        v27 = v28;
                                    }
                                    // 0x7b61d
                                    g7 = v26;
                                    int32_t v29 = *v27 | v26; // 0x7b620
                                    g7 = v29;
                                    if (v29 == 0) {
                                        // 0x7b9c6
                                        g7 = v24;
                                        v15 = v24;
                                        v14 = v23;
                                        v9 = a1;
                                        goto lab_0x7b6d3;
                                    }
                                    int32_t v30 = *(int32_t *)(v24 + 20); // 0x7b629
                                    g10 = v30 != 0 ? v24 : v23;
                                    g7 = v24;
                                    g4 = v30;
                                    if (v30 == 0) {
                                        v15 = v24;
                                        v14 = v23;
                                        v9 = a1;
                                        goto lab_0x7b6d3;
                                    }
                                    v23 = v24;
                                    v24 = v30;
                                }
                                int32_t v31 = *(int32_t *)(v24 + 8); // 0x7b5ee
                                g9 = v31;
                                int32_t v32 = *(int32_t *)(v24 + 16); // 0x7b5f1
                                g7 = v32;
                                char * v33 = (char *)v31; // 0x7b5f7
                                int32_t v34 = *(int32_t *)(v24 + 12); // 0x7b5fa
                                g9 = v34;
                                if (v24 == v22) {
                                    v16 = v34;
                                    v12 = v33;
                                    v10 = v32;
                                    goto lab_0x7b7ba_2;
                                } else {
                                    // 0x7b606
                                    g7 = *(int32_t *)(v24 + 20);
                                    *(int32_t *)(v5 + 0x4003b) = v24;
                                    *(int32_t *)(g10 + 20) = g7;
                                    g10 = v22;
                                    *(int32_t *)(g4 + 20) = v22;
                                    v13 = v33;
                                    v11 = v32;
                                    goto lab_0x7b7ba;
                                }
                            } else {
                                v15 = 0;
                                v14 = 0;
                                v9 = a1;
                                goto lab_0x7b6d3;
                            }
                        }
                    }
                }
            }
        }
    }
  lab_0x7b6c6:;
    int32_t v35;
    int32_t v36;
    if (v4 < 14) {
        // 0x7b9ae
        g10 = -1;
        goto lab_0x7b9bc;
    } else {
        // 0x7b6cf
        g7 = 0;
        v36 = 0;
        v35 = a1;
        goto lab_0x7b6d1;
    }
  lab_0x7b9bc:;
    int32_t result = g10; // 0x7b9bf
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x7b6d1:
    // 0x7b6d1
    g10 = 0;
    v15 = v36;
    v14 = 0;
    v9 = v35;
    goto lab_0x7b6d3;
  lab_0x7b645:
    // 0x7b645
    g9 = a1;
    g10 = v5 + 0x4003f;
    *v18 = v17;
    *(int32_t *)(g6 + 0x12e8) = g7;
    g7 = 1;
    int32_t v114 = g10; // 0x7b65f
    int32_t v115 = g9; // 0x7b662
    int32_t v116 = *(int32_t *)(v115 + 24); // 0x7b662
    g4 = v116;
    g9 = *(int32_t *)(v115 + 28);
    *(int32_t *)(g6 + 0x18330) = v116;
    g4 = 0;
    *(int32_t *)(g6 + 0x18334) = g9;
    g9 = a1;
    int32_t v117 = g7; // 0x7b679
    g7 = v117 + 1;
    g10 = 24 * v117 + v114;
    *(int32_t *)(g4 + 0x1833c + g6) = 0;
    *(int32_t *)(g4 + 0x18340 + g6) = 0;
    *(int32_t *)(g4 + 0x18350 + g6) = g10;
    int32_t v118 = g4 + 24; // 0x7b69d
    g4 = v118;
    int32_t v119 = g7; // 0x7b6a0
    while (v119 != 9) {
        // 0x7b679
        v117 = v119;
        g7 = v117 + 1;
        g10 = 24 * v117 + v114;
        *(int32_t *)(v118 + 0x1833c + g6) = 0;
        *(int32_t *)(g4 + 0x18340 + g6) = 0;
        *(int32_t *)(g4 + 0x18350 + g6) = g10;
        v118 = g4 + 24;
        g4 = v118;
        v119 = g7;
    }
    // 0x7b6a5
    g4 = v114;
    g7 = v119 & -256;
    *(int32_t *)(g6 + 0x183f8) = 0;
    *(int32_t *)(g8 + 20) = 0;
    *(int32_t *)(g6 + 0x18338) = g4;
    v36 = g7;
    v35 = g9;
    goto lab_0x7b6d1;
  lab_0x7b6d3:
    // 0x7b6d3
    g9 = v9;
    uint16_t v37 = *(int16_t *)(v9 + 12); // 0x7b6eb
    g9 = 0;
    g4 = 0;
    int32_t v38;
    int32_t v39;
    int32_t v40;
    int32_t v41;
    int32_t v42;
    if (v37 != 0) {
        int32_t v43 = v37;
        int32_t v44 = 0;
        int32_t v45 = 0;
        int32_t v46 = 0;
        int32_t v47 = 0; // 0x7b73d381
        int32_t v48 = 0; // 0x7b7a657380
        while (true) {
            int32_t v49 = v43 - 1;
            g7 = v6;
            int32_t v50 = *(int32_t *)v6; // 0x7b702
            g10 = v50;
            int32_t v51;
            int32_t v52;
            int32_t v53; // 0x7b7a656
            if (v50 != 1) {
                if (v50 == 0x6474e550) {
                    // 0x7b759
                    g9 = v6;
                    v53 = v6;
                    v52 = v46;
                    v51 = v45;
                } else {
                    int32_t v54 = v50 != 2 ? v46 : v6; // 0x7b750
                    g7 = v54;
                    v53 = v48;
                    v52 = v54;
                    v51 = v45;
                }
            } else {
                // 0x7b709
                g10 = v7;
                int32_t v55 = *(int32_t *)(v6 + 8) + v7; // 0x7b70c
                g10 = v55;
                uint32_t v56 = *(int32_t *)g8; // 0x7b70f
                g7 = v56;
                if (v56 >= v55) {
                    // 0x7b71b
                    g7 = v6;
                    uint32_t v57 = *(int32_t *)(v6 + 20) + v55; // 0x7b71e
                    int32_t v58 = v56 >= v57 ? v44 : v55; // 0x7b72e
                    g7 = v58;
                    g10 = 1;
                    int32_t v59 = v56 < v57 ? 1 : v47; // 0x7b73d
                    g4 = v59;
                    v53 = v48;
                    v47 = v59;
                    v52 = v46;
                    v51 = v56 >= v57 ? v45 : v57;
                    v44 = v58;
                } else {
                    v53 = v48;
                    v52 = v46;
                    v51 = v45;
                }
            }
            // 0x7b75c
            if (v49 == 0) {
                v41 = v53;
                v42 = v47;
                v40 = v52;
                v39 = v51;
                v38 = v44;
                // break -> 0x7b769
                break;
            }
            v43 = v49;
            v45 = v51;
            v46 = v52;
            v48 = v53;
            v6 += 32;
        }
    } else {
        v41 = 0;
        v42 = 0;
        v40 = 0;
        v39 = 0;
        v38 = 0;
    }
    // 0x7b769
    g10 = v14;
    g7 = v15;
    if (v42 == 0) {
        // 0x7b9b3
        g10 = 0;
        goto lab_0x7b9bc;
    } else {
        if (v4 >= 32) {
            int32_t v60; // 0x7b7a6
            if (v14 != 0) {
                if (v15 != 0) {
                    int32_t * v61 = (int32_t *)(v15 + 20); // 0x7b785
                    int32_t v62 = *v61; // 0x7b785
                    g4 = v62;
                    *(int32_t *)(v14 + 20) = v62;
                    int32_t * v63 = (int32_t *)(g6 + 0x18338); // 0x7b78b
                    g4 = *v63;
                    *v63 = v15;
                    *v61 = g4;
                    v60 = g9;
                } else {
                    v60 = v41;
                }
            } else {
                v60 = v41;
            }
            int32_t v64 = *(int32_t *)(g6 + 0x18338); // 0x7b79a
            g4 = v64;
            g10 = v7;
            g7 = v40;
            *(int32_t *)(v64 + 12) = v60;
            *(int32_t *)(g4 + 8) = g10;
            g10 = v38;
            *(int32_t *)(g4 + 16) = g7;
            g7 = v39;
            *(int32_t *)g4 = g10;
            *(int32_t *)(g4 + 4) = g7;
            v13 = v8;
            v11 = v40;
        } else {
            v13 = v8;
            v11 = v40;
        }
        goto lab_0x7b7ba;
    }
  lab_0x7b7ba:
    // 0x7b7ba
    v16 = g9;
    v12 = v13;
    v10 = v11;
    goto lab_0x7b7ba_2;
  lab_0x7b7ba_2:;
    int32_t v65; // bp-40
    int32_t v66; // 0x7b804
    int32_t v67; // 0x7b8a3
    int32_t v68; // 0x7b861
    if (v16 == 0) {
        // 0x7b9b3
        g10 = 0;
        goto lab_0x7b9bc;
    } else {
        int32_t v69 = (int32_t)v12; // 0x7b7c2
        g7 = v69;
        g10 = 1;
        int32_t v70 = *(int32_t *)(v16 + 8) + v69; // 0x7b7ca
        g7 = v70;
        if (*(char *)v70 != 1) {
            goto lab_0x7b9bc;
        } else {
            // 0x7b7d6
            *(int32_t *)(g8 + 8) = 0;
            if (v10 != 0) {
                // 0x7b7e3
                g10 = v10;
                g4 = v69;
                int32_t v71 = *(int32_t *)(v10 + 8) + v69; // 0x7b7e9
                g4 = v71;
                int32_t v72 = *(int32_t *)v71; // 0x7b7fe370
                g9 = v72;
                if (v72 != 0) {
                    while (true) {
                        if (v72 == 3) {
                            // break -> 0x7b7f3
                            break;
                        }
                        int32_t v73 = v71 + 8; // 0x7b7fb
                        g4 = v73;
                        int32_t v74 = *(int32_t *)v73; // 0x7b7fe
                        g9 = v74;
                        if (v74 == 0) {
                            goto lab_0x7b804;
                        }
                        v72 = v74;
                        v71 = v73;
                    }
                    int32_t v75 = *(int32_t *)(v71 + 4); // 0x7b7f3
                    g4 = v75;
                    *(int32_t *)(g8 + 8) = v75;
                }
            }
            // 0x7b804
            v66 = g7;
            int32_t v76 = (int32_t)*(char *)(v66 + 1); // 0x7b804
            g10 = v76;
            g9 = g8;
            g4 = v76;
            int32_t v77 = function_7b4f6(v66); // 0x7b80f
            g7 = v66;
            g9 = v77;
            g4 = g10;
            int32_t v78 = function_7af96(v66 + 4, (int32_t)&v65); // 0x7b825
            g4 = v78;
            g7 = v66;
            unsigned char v79 = *(char *)(v66 + 2); // 0x7b833
            int32_t v80 = (int32_t)v79 | v78 & -256; // 0x7b833
            g4 = v80;
            if (v79 == -1) {
                goto lab_0x7b936;
            } else {
                // 0x7b83e
                if (*(char *)(v66 + 3) != 59) {
                    goto lab_0x7b936;
                } else {
                    int32_t v81 = v80 & (int32_t)&g862; // 0x7b848
                    g10 = v81;
                    g9 = g8;
                    g4 = v81;
                    g9 = function_7b4f6(v78);
                    g4 = g10;
                    int32_t v82; // bp-36
                    v68 = function_7af96(v78, (int32_t)&v82);
                    g4 = v68;
                    int32_t v83 = v82; // 0x7b866
                    g9 = v83;
                    g7 = v66;
                    if (v83 == 0) {
                        // 0x7b9b7
                        g10 = 1;
                        goto lab_0x7b9bc;
                    } else {
                        if ((char)v68 % 4 != 0) {
                            goto lab_0x7b936;
                        } else {
                            int32_t v84 = g8; // 0x7b87f
                            uint32_t v85 = *(int32_t *)v84; // 0x7b87f
                            g10 = v85;
                            int32_t v86 = *(int32_t *)v68 + v66; // 0x7b886
                            g10 = v86;
                            if (v85 < v86) {
                                // 0x7b9b7
                                g10 = 1;
                                goto lab_0x7b9bc;
                            } else {
                                int32_t v87 = v83 - 1; // 0x7b891
                                g9 = v87;
                                int32_t v88 = *(int32_t *)(8 * v87 + v68) + v66; // 0x7b895
                                g10 = v88;
                                if (v85 < v88) {
                                    // 0x7b8c3
                                    g10 = 0;
                                    int32_t v89 = 0; // 0x7b8cb59
                                    int32_t v90 = v87;
                                    while (true) {
                                        int32_t v91 = v89; // 0x7b8a1
                                        while (true) {
                                            if (v91 >= v90) {
                                                // break (via goto) -> 0x7b8d0
                                                goto lab_0x7b8d0;
                                            }
                                            // 0x7b89e
                                            v67 = (v91 + v90) / 2;
                                            g9 = v67;
                                            int32_t v92 = *(int32_t *)(8 * v67 + v68) + v66; // 0x7b8a8
                                            g8 = v92;
                                            if (v85 < v92) {
                                                // break -> 0x7b8cb
                                                break;
                                            }
                                            int32_t v93 = v67 + 1; // 0x7b8af
                                            g10 = v93;
                                            int32_t v94 = *(int32_t *)(8 * v93 + v68) + v66; // 0x7b8b5
                                            g8 = v94;
                                            if (v85 < v94) {
                                                // 0x7b8d5
                                                g8 = v84;
                                                goto lab_0x7b8d8;
                                            }
                                            v91 = v93;
                                        }
                                        v89 = v91;
                                        v90 = v67;
                                    }
                                  lab_0x7b8d0:
                                    // 0x7b8d0
                                    abort();
                                    // UNREACHABLE
                                }
                                v67 = v87;
                                goto lab_0x7b8d8;
                            }
                        }
                    }
                }
            }
        }
    }
  lab_0x7b936:;
    int32_t v95 = g8; // 0x7b936
    g4 = *(int32_t *)(v95 + 4);
    g10 = 1;
    g9 = v65;
    int32_t v96 = 0; // bp-64
    g4 = *(int32_t *)(v95 + 8);
    g4 = &v96;
    int32_t v97 = function_7b3f7(*(int32_t *)v95); // 0x7b967
    g4 = v97;
    *(int32_t *)(g8 + 16) = v97;
    int32_t v98; // bp-32
    if (v97 != 0) {
        int32_t v99 = function_7b0ec(); // 0x7b976
        g9 = g8;
        int32_t v100 = v99 & (int32_t)&g862; // 0x7b97d
        g7 = v100;
        g4 = v100;
        int32_t v101 = function_7b4f6(v100); // 0x7b985
        g4 = v101;
        g7 = v100;
        int32_t v102 = &v98; // 0x7b98f
        g9 = v102;
        g9 = v101;
        g4 = v100;
        function_7af96(*(int32_t *)(g8 + 16) + 8, v102);
        int32_t v103 = v98; // 0x7b9a3
        g4 = v103;
        *(int32_t *)(g8 + 12) = v103;
    }
    goto lab_0x7b9bc;
  lab_0x7b8d8:;
    int32_t v104 = 8 * v67 + v68; // 0x7b8d8
    g4 = v104;
    int32_t v105 = *(int32_t *)(v104 + 4) + v66; // 0x7b8e4
    g10 = v105;
    g4 = v105;
    int32_t v106 = function_7b0ec(); // 0x7b8eb
    g4 = v106 & (int32_t)&g862;
    g10 = v106 & (int32_t)&g862 & 15;
    int32_t v107 = function_7aefe(); // 0x7b8f8
    g9 = 0;
    g4 = g10;
    function_7af96(v105 + 8 + v107, (int32_t)&v98);
    g10 = v104;
    g7 = v66;
    int32_t v108 = v98; // 0x7b91d
    g4 = v108;
    int32_t v109 = *(int32_t *)v104 + v66; // 0x7b920
    g7 = v109;
    int32_t v110 = v109 + v108; // 0x7b922
    g4 = v110;
    int32_t v111 = g8; // 0x7b924
    int32_t v112; // 0x7b92e
    int32_t v113; // 0x7b92e
    if (*(int32_t *)v111 < v110) {
        // 0x7b928
        g10 = v105;
        *(int32_t *)(v111 + 16) = v105;
        v113 = g8;
        v112 = g7;
    } else {
        v113 = v111;
        v112 = v109;
    }
    // 0x7b92e
    *(int32_t *)(v113 + 12) = v112;
    // 0x7b9b7
    g10 = 1;
    goto lab_0x7b9bc;
}

// Address range: 0x7b9d0 - 0x7bece
int32_t function_7b9d0(void) {
    int32_t v1 = g8; // 0x7b9d3
    int32_t v2 = g10; // 0x7b9d4
    int32_t v3 = g4; // 0x7b9d5
    g10 = v3;
    int32_t v4 = g6; // 0x7b9d7
    uint32_t v5 = g9; // 0x7b9db
    g4 = (int32_t)*(char *)(v3 + 16) | v3 & -256;
    int32_t v6 = function_1bbc2(v5); // 0x7b9e1
    g4 = v6;
    g6 += 0x27872;
    int32_t v7 = g10;
    int32_t v8;
    int32_t v9; // 0x7bea3
    int32_t v10; // 0x7ba2b
    int32_t v11; // 0x7bce5
    if (v6 % 2 != 0) {
        v11 = v6;
        v9 = v7;
        goto lab_0x7bce5;
    } else {
        uint32_t v12 = *(int32_t *)(v7 + 16); // 0x7b9f4
        int32_t v13 = v12 / 2048; // 0x7b9f7
        g9 = v13;
        if (v12 >= 2048) {
            v8 = v13;
            goto lab_0x7ba83;
        } else {
            int32_t v14 = *(int32_t *)(v7 + 12); // 0x7ba26
            if ((v6 & 2) == 0) {
                // 0x7ba26
                g9 = v14;
                g4 = v7;
                v10 = function_7b0fd(v13);
                int32_t v15 = v10 + 1; // 0x7ba33
                g4 = v15;
                if (v15 != 0) {
                    goto lab_0x7ba51;
                } else {
                    goto lab_0x7ba36;
                }
            } else {
                // 0x7ba1e
                g8 = v14;
                int32_t v16 = *(int32_t *)v14; // 0x7ba1e167
                g9 = v16;
                if (v16 != 0) {
                    int32_t v17 = v13;
                    while (true) {
                        // 0x7ba0c
                        g4 = g10;
                        int32_t v18 = function_7b0fd(v17); // 0x7ba0e
                        g4 = v18;
                        if (v18 == -1) {
                            // break -> 0x7ba36
                            break;
                        }
                        int32_t v19 = v18 + v17; // 0x7ba18
                        int32_t v20 = g8 + 4; // 0x7ba1b
                        g8 = v20;
                        int32_t v21 = *(int32_t *)v20; // 0x7ba1e
                        g9 = v21;
                        if (v21 == 0) {
                            v10 = v19;
                            goto lab_0x7ba51;
                        }
                        // 0x7ba18
                        v17 = v19;
                    }
                    goto lab_0x7ba36;
                } else {
                    v10 = v13;
                    goto lab_0x7ba51;
                }
            }
        }
    }
  lab_0x7beb5_2:;
    int32_t result = g8; // 0x7beb8
    g4 = result;
    g6 = v4;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x7ba51:
    // 0x7ba51
    g9 = v10;
    int32_t * v22 = (int32_t *)(g10 + 16); // 0x7ba54
    g9 = v10 % 0x200000;
    int32_t v23 = 2048 * v10; // 0x7ba64
    g7 = v23;
    int32_t v24 = *v22 & (int32_t)&g143 | v23; // 0x7ba67
    g4 = v24;
    *v22 = v24;
    if (g9 != v10) {
        int32_t v25 = g4 % 2048; // 0x7ba71
        g4 = v25;
        *(int32_t *)(g10 + 16) = v25;
    }
    if (v10 == 0) {
        goto lab_0x7bcd8;
    } else {
        v8 = v10;
        goto lab_0x7ba83;
    }
  lab_0x7bce5:;
    int32_t v26 = v9 + 16; // 0x7bce5
    unsigned char v27 = *(char *)v26; // 0x7bce5
    g4 = (int32_t)v27 | v11 & -256;
    if (v27 % 2 == 0) {
        if ((v27 & 2) == 0) {
            // 0x7bea0
            g9 = *(int32_t *)(v9 + 12);
            g4 = v9;
            *(int32_t *)(g11 - 16) = v5;
            int32_t v28 = function_7b3f7((int32_t)&g870); // 0x7beab
            g4 = v28;
            g8 = v28;
            goto lab_0x7beb5_2;
        } else {
            int32_t v29 = *(int32_t *)(v9 + 12); // 0x7be72
            g7 = v29;
            int32_t v30 = *(int32_t *)v29; // 0x7be96117
            g9 = v30;
            if (v30 != 0) {
                int32_t v31 = v9; // 0x7be7a
                int32_t v32 = g11; // 0x7be77
                while (true) {
                    // 0x7be77
                    g4 = v31;
                    *(int32_t *)(v32 - 16) = v5;
                    int32_t v33 = g7; // 0x7be7f
                    int32_t v34 = function_7b3f7(v33); // 0x7be82
                    g4 = v34;
                    g7 = v33;
                    g8 = v34;
                    if (v34 != 0) {
                        // break -> 0x7beb5
                        break;
                    }
                    int32_t v35 = v33 + 4; // 0x7be93
                    g7 = v35;
                    int32_t v36 = *(int32_t *)v35; // 0x7be96
                    g9 = v36;
                    if (v36 == 0) {
                        // 0x7be9c
                        g8 = 0;
                        goto lab_0x7beb5_2;
                    }
                    // 0x7be93
                    v31 = g10;
                    v32 = g11 + 16;
                }
                goto lab_0x7beb5_2;
            } else {
                // 0x7be9c
                g8 = 0;
                goto lab_0x7beb5_2;
            }
        }
    } else {
        int32_t v37; // bp-32
        int32_t v38; // bp-36
        if ((v27 & 4) == 0) {
            int32_t v39 = *(int32_t *)v26; // 0x7bd8c
            g4 = v39;
            uint16_t v40 = (int16_t)v39; // 0x7bd8f
            int32_t v41 = *(int32_t *)(v9 + 12); // 0x7bde0
            if ((v40 & (int16_t)&g137) != 0) {
                // 0x7bde0
                g7 = v41;
                int32_t v42 = v40 / 8; // 0x7bde3
                g9 = v9;
                int32_t v43 = (v42 | v39 & -0x10000) & (int32_t)&g862; // 0x7bde9
                g4 = v43;
                int32_t v44 = function_7af4e(); // 0x7bdf2
                g4 = v44;
                g10 = v41;
                int32_t v45 = &v37; // 0x7be0c
                int32_t * v46 = (int32_t *)(v41 + 4);
                int32_t v47 = 0;
                while (true) {
                    int32_t * v48 = v46;
                    int32_t v49; // 0x7be27
                    int32_t v50; // 0x7be49
                    while (true) {
                        uint32_t v51 = *v48;
                        g7 = v51;
                        if (v47 >= v51) {
                            // 0x7be9c
                            g8 = 0;
                            goto lab_0x7beb5_2;
                        }
                        // 0x7be09
                        g9 = v45;
                        g4 = v41;
                        int32_t v52 = (v51 + v47) / 2; // 0x7be14
                        g10 = v52;
                        g8 = *(int32_t *)(v41 + 8 + 4 * v52);
                        *(int32_t *)(g11 - 4) = v41;
                        *(int32_t *)(g11 - 8) = g4;
                        *(int32_t *)(g11 - 12) = v45;
                        g9 = v44;
                        *(int32_t *)(g11 - 16) = g8 + 8;
                        g4 = v43;
                        v49 = g7;
                        g4 = function_7af96(v49, (int32_t)&g870);
                        g9 = v43;
                        int32_t * v53 = (int32_t *)(g11 + 4); // 0x7be33
                        g7 = *v53;
                        *v53 = (int32_t)&v38;
                        g9 = 0;
                        *(int32_t *)g11 = g4;
                        g4 = v42 & (int32_t)&g862 & 15;
                        function_7af96((int32_t)&g870, (int32_t)&g870);
                        v50 = v37;
                        g4 = v50;
                        g7 = v49;
                        if (v5 >= v50) {
                            // break -> 0x7be57
                            break;
                        }
                        v48 = &g10;
                    }
                    int32_t v54 = v38 + v50; // 0x7be57
                    g4 = v54;
                    if (v5 < v54) {
                        goto lab_0x7beb5_2;
                    }
                    int32_t v55 = g10 + 1; // 0x7be5f
                    g10 = v49;
                    v46 = &g10;
                    v47 = v55;
                }
                // 0x7be9c
                g8 = 0;
                goto lab_0x7beb5_2;
            } else {
                // 0x7bd95
                g10 = v41;
                g9 = 0;
                int32_t v56 = *(int32_t *)(v41 + 4); // 0x7bd9a
                g7 = v56;
                if (v56 != 0) {
                    int32_t v57 = 0;
                    while (true) {
                        int32_t v58 = v57; // 0x7bda5127
                        int32_t v59; // 0x7bda8
                        while (true) {
                            // 0x7bda2
                            g10 = v41;
                            v59 = (v58 + v56) / 2;
                            g4 = v59;
                            int32_t v60 = *(int32_t *)(v41 + 8 + 4 * v59); // 0x7bdaa
                            g8 = v60;
                            int32_t v61 = *(int32_t *)(v60 + 8); // 0x7bdae
                            g10 = v61;
                            g10 = v61;
                            if (v5 < v61) {
                                // break -> 0x7bdd5
                                break;
                            }
                            int32_t v62 = *(int32_t *)(v60 + 12) + v61; // 0x7bdc5
                            g9 = v62;
                            if (v5 < v62) {
                                goto lab_0x7beb5_2;
                            }
                            int32_t v63 = v59 + 1; // 0x7bdd0
                            g9 = v63;
                            if (v63 >= v56) {
                                // 0x7be9c
                                g8 = 0;
                                goto lab_0x7beb5_2;
                            }
                            v58 = v63;
                        }
                        // 0x7bdd5
                        g7 = v59;
                        if (v58 >= v59) {
                            // break -> 0x7bdd7
                            break;
                        }
                        v57 = v58;
                        v56 = v59;
                    }
                }
                // 0x7be9c
                g8 = 0;
                goto lab_0x7beb5_2;
            }
        } else {
            int32_t v64 = *(int32_t *)(v9 + 12); // 0x7bcf8
            g7 = v64;
            int32_t v65 = *(int32_t *)(v64 + 4); // 0x7bd08
            g7 = v65;
            int16_t * v66 = NULL;
            while (true) {
                uint32_t v67 = (int32_t)v66; // 0x7bd82
                int32_t v68 = v65;
                int32_t v69; // 0x7bd5e
                while (true) {
                    // 0x7bd7f
                    g7 = v68;
                    if (v67 >= v68) {
                        // 0x7be9c
                        g8 = 0;
                        goto lab_0x7beb5_2;
                    }
                    // 0x7bd10
                    g7 = v64;
                    int32_t v70 = (v68 + v67) / 2; // 0x7bd19
                    g10 = v70;
                    int32_t v71 = *(int32_t *)(v64 + 8 + 4 * v70); // 0x7bd1b
                    g8 = v71;
                    g4 = v71;
                    int32_t v72 = function_7b0ec(); // 0x7bd21
                    g9 = v9;
                    int32_t v73 = v72 & (int32_t)&g862; // 0x7bd29
                    g4 = v73;
                    g4 = function_7af4e();
                    *(int32_t *)(g11 - 4) = g9;
                    *(int32_t *)(g11 - 8) = g9;
                    *(int32_t *)(g11 - 12) = (int32_t)&v38;
                    *(int32_t *)(g11 - 16) = g8 + 8;
                    g9 = g4;
                    g4 = v73;
                    g4 = function_7af96((int32_t)&g870, (int32_t)&g870);
                    g7 = v73;
                    *(int32_t *)(g11 + 4) = (int32_t)&v37;
                    g7 %= 16;
                    *(int32_t *)g11 = g4;
                    g9 = 0;
                    g4 = g7;
                    function_7af96((int32_t)&g870, (int32_t)&g870);
                    v69 = v38;
                    g4 = v69;
                    if (v5 >= v69) {
                        // break -> 0x7bd69
                        break;
                    }
                    // 0x7bd10
                    v68 = g10;
                }
                int32_t v74 = v37 + v69; // 0x7bd69
                g4 = v74;
                if (v5 < v74) {
                    goto lab_0x7beb5_2;
                }
                int16_t * v75 = (int16_t *)(g10 + 1); // 0x7bd76
                g10 = v68;
                v66 = v75;
                v65 = v68;
            }
            // 0x7be9c
            g8 = 0;
            goto lab_0x7beb5_2;
        }
    }
  lab_0x7ba83:
    // 0x7ba83
    g4 = v8;
    int32_t size = 4 * v8 + 8; // 0x7ba89
    g8 = size;
    int32_t * mem = malloc(size); // 0x7ba91
    int32_t v76 = (int32_t)mem; // 0x7ba91
    g4 = v76;
    int32_t v77 = v76; // bp-44
    if (mem != NULL) {
        // 0x7baa4
        *(int32_t *)(v76 + 4) = 0;
        int32_t * mem2 = malloc(g8); // 0x7baaf
        int32_t v78 = (int32_t)mem2; // 0x7baaf
        g4 = v78;
        if (mem2 != NULL) {
            // 0x7bac2
            *(int32_t *)(v78 + 4) = 0;
        }
        int32_t v79 = g10; // 0x7bebf
        if ((*(char *)(v79 + 16) & 2) != 0) {
            int32_t v80 = *(int32_t *)(v79 + 12); // 0x7bace
            g8 = v80;
            int32_t v81 = *(int32_t *)v80; // 0x7bae7156
            g4 = v81;
            if (v81 != 0) {
                // 0x7bad3
                g8 = v80 + 4;
                *(int32_t *)(g11 - 16) = v81;
                g4 = g10;
                g9 = &v77;
                g4 = function_7b21b((int32_t)&g870);
                int32_t v82 = g8;
                int32_t v83 = *(int32_t *)v82; // 0x7bae7
                g4 = v83;
                while (v83 != 0) {
                    // 0x7bad3
                    g8 = v82 + 4;
                    *(int32_t *)g11 = v83;
                    g4 = g10;
                    g9 = &v77;
                    g4 = function_7b21b((int32_t)&g870);
                    v82 = g8;
                    v83 = *(int32_t *)v82;
                    g4 = v83;
                }
            }
        } else {
            // 0x7bec9
            g4 = v79;
            g9 = &v77;
            g4 = function_7b21b(*(int32_t *)(v79 + 12));
        }
        int32_t v84 = v77; // 0x7bb02
        g8 = v84;
        if (v84 != 0) {
            // 0x7bb09
            g4 = v8;
            if (*(int32_t *)(v84 + 4) != v8) {
                // 0x7bc14
                abort();
                // UNREACHABLE
            }
        }
        int32_t v85 = g6; // 0x7bb15
        int32_t v86 = v85 - 0x27ede; // 0x7bb15
        g9 = v86;
        int32_t v87 = g10; // 0x7bb1e
        int32_t v88 = v87 + 16; // 0x7bb1e
        int32_t v89; // 0x7bb36
        if ((*(char *)v88 & 4) == 0) {
            int16_t v90 = *(int16_t *)v88; // 0x7bb24
            int32_t v91 = v85 - 0x27f5b; // 0x7bb2a
            g9 = v91;
            v89 = (v90 & (int16_t)&g137) != 0 ? v91 : v85 - 0x2847e;
            g4 = v89;
        } else {
            v89 = v86;
        }
        // 0x7bb3c
        g9 = v78;
        if (mem2 == NULL) {
            // 0x7bcb8
            g9 = v89;
            g4 = v87;
            *(int32_t *)(g11 - 16) = v84;
            function_7ae8a(v89);
        } else {
            int32_t * v92 = (int32_t *)(v84 + 4); // 0x7bb47
            int32_t v93 = *v92; // 0x7bb47
            int32_t v94 = v85 + (int32_t)&g48; // 0x7bb54
            g7 = v94;
            int32_t v95 = v84 + 8; // 0x7bb80
            g4 = v93;
            int32_t v96; // 0x7bbec
            if (v93 != 0) {
                int32_t v97 = 0; // 0x7bbad152
                int16_t * v98 = NULL;
                int32_t v99 = v94; // 0x7bb7543150
                while (true) {
                    int32_t v100 = 4 * v97; // 0x7bb80
                    int32_t v101; // 0x7bb9e
                    int32_t v102; // 0x7bb9e
                    if (v99 == v94) {
                      lab_0x7bb75:
                        // 0x7bb75
                        v102 = g9;
                        v101 = v94;
                    } else {
                        while (true) {
                            // 0x7bb7a
                            *(int32_t *)(g11 - 4) = v93;
                            g4 = v97;
                            *(int32_t *)(g11 - 8) = *(int32_t *)g7;
                            *(int32_t *)(g11 - 12) = *(int32_t *)(v100 + v95);
                            int32_t v103 = g9; // 0x7bb84
                            int32_t v104 = g7; // 0x7bb87
                            *(int32_t *)(g11 - 16) = g10;
                            g9 = v103;
                            g7 = v104;
                            if (v98 >= NULL) {
                                v102 = v103;
                                v101 = v104;
                                // break -> 0x7bb9b
                                break;
                            }
                            int32_t v105 = v104 - v95; // 0x7bb62
                            g7 = v105;
                            int32_t v106 = v105 / 4; // 0x7bb66
                            g4 = v106;
                            int32_t * v107 = (int32_t *)(v103 + 8 + 4 * v106); // 0x7bb69
                            g7 = *v107;
                            *v107 = 0;
                            if (g7 == v94) {
                                goto lab_0x7bb75;
                            }
                            // 0x7bb5f
                            v93 = g4;
                        }
                    }
                    // 0x7bb9b
                    g4 = v97;
                    *(int32_t *)(v100 + 8 + v102) = v101;
                    int32_t v108 = g4; // 0x7bba2
                    int32_t v109 = 4 * v108 + v95; // 0x7bba2
                    g7 = v109;
                    int32_t v110 = v108 + 1; // 0x7bba6
                    g4 = v93;
                    if (v110 == v93) {
                        // break -> 0x7bbaa
                        break;
                    }
                    v97 = v110;
                    v98 = (int16_t *)v110;
                    v99 = v109;
                }
                // 0x7bbaa
                v96 = g10;
            } else {
                v96 = v87;
            }
            // 0x7bbde
            g7 = 0;
            g4 = 0;
            int16_t * v111;
            int32_t ** v112;
            if (v93 != 0) {
                int32_t ** v113 = NULL;
                int16_t * v114 = NULL;
                int32_t v115 = 0; // 0x7bbcf142
                while (true) {
                    int32_t v116 = 4 * v115; // 0x7bbb4
                    int32_t v117 = g9 + 8; // 0x7bbb4
                    int16_t * v118;
                    int32_t ** v119;
                    if (*(int32_t *)(v117 + v116) == 0) {
                        int32_t v120 = (int32_t)v114; // 0x7bbcc
                        g7 = v120;
                        int32_t v121 = *(int32_t *)(v116 + v95); // 0x7bbcf
                        g10 = v121;
                        *(int32_t *)(v117 + 4 * v120) = v121;
                        int32_t v122 = g7 + 1; // 0x7bbd7
                        g7 = v122;
                        v118 = (int16_t *)v122;
                        v119 = v113;
                    } else {
                        int32_t v123 = (int32_t)v113; // 0x7bbbb
                        g10 = v123;
                        int32_t v124 = *(int32_t *)(v116 + v95); // 0x7bbbe
                        g7 = v124;
                        *(int32_t *)(4 * v123 + v95) = v124;
                        int32_t v125 = g10 + 1; // 0x7bbc6
                        g10 = v125;
                        v118 = v114;
                        v119 = (int32_t **)v125;
                    }
                    int32_t v126 = g4 + 1; // 0x7bbdb
                    g4 = v126;
                    if (v126 == v93) {
                        v111 = v118;
                        v112 = v119;
                        // break -> 0x7bbf4
                        break;
                    }
                    v113 = v119;
                    v114 = v118;
                    v115 = v126;
                }
            } else {
                v111 = NULL;
                v112 = NULL;
            }
            // 0x7bbf4
            g4 = (int32_t)v111;
            g10 = v96;
            *v92 = (int32_t)v112;
            g7 = v77;
            *(int32_t *)(g9 + 4) = g4;
            g9 = v78;
            int32_t * v127 = (int32_t *)(v78 + 4); // 0x7bc09
            int32_t v128 = *v127; // 0x7bc09
            g4 = v128;
            int32_t v129 = *(int32_t *)(g7 + 4) + v128; // 0x7bc0c
            g4 = v129;
            if (v129 != v8) {
                // 0x7bc14
                abort();
                // UNREACHABLE
            }
            // 0x7bc19
            g4 = g10;
            *(int32_t *)(g11 - 16) = v78;
            g9 = v89;
            g4 = function_7ae8a((int32_t)&g870);
            g9 = v78;
            int32_t v130 = v77; // 0x7bc2d
            g8 = v130;
            int32_t v131 = *v127; // 0x7bc30
            g7 = v131;
            int32_t v132; // 0x7bcab
            if (v131 != 0) {
                // 0x7bc3a
                g9 = g10;
                int32_t v133 = v131; // 0x7bc4b
                int32_t v134 = *(int32_t *)(v130 + 4);
                int32_t v135 = 4 * v131 + v130;
                while (true) {
                    // 0x7bc48
                    g10 = v78;
                    int32_t v136 = v133 - 1; // 0x7bc4b
                    g7 = v136;
                    int32_t v137 = *(int32_t *)(v78 + 8 + 4 * v136); // 0x7bc4f
                    g10 = v137;
                    int32_t v138;
                    if (v134 != 0) {
                        int32_t v139 = v135 + 8; // 0x7bc62
                        int32_t v140 = v136; // 0x7bc6f
                        int32_t v141 = v134;
                        while (true) {
                            // 0x7bc6c
                            g10 = v141;
                            *(int32_t *)(g11 - 4) = v140;
                            *(int32_t *)(g11 - 8) = v137;
                            int32_t v142 = g10 - 1; // 0x7bc73
                            g10 = v142;
                            *(int32_t *)(g11 - 12) = *(int32_t *)(4 * v142 + 8 + g8);
                            int32_t v143 = g9; // 0x7bc78
                            *(int32_t *)(g11 - 16) = v143;
                            g9 = v143;
                            int32_t v144 = g4; // 0x7bc85
                            if (v144 >= 0 != v144 != 0) {
                                v138 = v141;
                                // break -> 0x7bc89
                                break;
                            }
                            int32_t v145 = g10; // 0x7bc58
                            int32_t v146 = 4 * v145; // 0x7bc58
                            int32_t v147 = *(int32_t *)(g8 + 8 + v146); // 0x7bc58
                            g4 = v147;
                            g7 = v135;
                            *(int32_t *)(v139 + v146) = v147;
                            if (v145 == 0) {
                                v138 = 0;
                                // break -> 0x7bc89
                                break;
                            }
                            // 0x7bc58
                            v140 = g7;
                            v141 = v145;
                        }
                    } else {
                        v138 = 0;
                    }
                    // 0x7bc89
                    g7 = v136;
                    g10 = v137;
                    int32_t v148 = v138 + v136; // 0x7bc96
                    g4 = v148;
                    *(int32_t *)(4 * v148 + 8 + g8) = v137;
                    if (v136 == 0) {
                        // break -> 0x7bca0
                        break;
                    }
                    // 0x7bc89
                    v133 = g7;
                    v134 = v138;
                    v135 -= 4;
                }
                // 0x7bca0
                g10 = g9;
                g9 = v78;
                int32_t v149 = *v127; // 0x7bca5
                g4 = v149;
                int32_t * v150 = (int32_t *)(g8 + 4); // 0x7bca8
                *v150 = *v150 + v149;
                v132 = g11;
            } else {
                v132 = g11 + 16;
            }
            // 0x7bcab
            *(int32_t *)(v132 - 16) = v78;
            free(&g870);
        }
        int32_t v151 = v77; // 0x7bcc6
        g4 = v151;
        int32_t v152 = *(int32_t *)(g10 + 12); // 0x7bccc
        g9 = v152;
        *(int32_t *)v151 = v152;
        char * v153 = (char *)(g10 + 16); // 0x7bcd1
        *v153 = *v153 | 1;
        *(int32_t *)(g10 + 12) = g4;
    }
    goto lab_0x7bcd8;
  lab_0x7bcd8:
    // 0x7bcd8
    g9 = v5;
    g8 = 0;
    int32_t v154 = g10; // 0x7bcdd
    if (v5 < *(int32_t *)v154) {
        goto lab_0x7beb5_2;
    } else {
        // 0x7bcd8
        v11 = g4;
        v9 = v154;
        goto lab_0x7bce5;
    }
  lab_0x7ba36:
    // 0x7ba36
    g4 = g6 + 0x183fc;
    *(int32_t *)(g10 + 16) = 0;
    *(int32_t *)(g10 + 12) = g4;
    *(int16_t *)(g10 + 16) = (int16_t)&g137;
    goto lab_0x7bcd8;
}

// Address range: 0x7bece - 0x7bf5c
int32_t function_7bece(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x7bed1
    int32_t v2 = g10; // 0x7bed2
    int32_t v3 = g6; // 0x7bed3
    g4 = a1;
    int32_t result = function_1bbc2(v3); // 0x7beda
    g4 = result;
    int32_t v4 = g6; // 0x7bedf
    g6 = v4 + (int32_t)&g75;
    g10 = a2;
    if (result == 0) {
        // 0x7bf54
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return 0;
    }
    // 0x7beec
    if (*(int32_t *)result == 0) {
        // 0x7bf54
        g6 = v3;
        g10 = v2;
        g8 = v1;
        return result;
    }
    // 0x7bef1
    g9 = a3;
    int32_t v5 = *(int32_t *)(v4 + (int32_t)&g75 - 4); // 0x7bef4
    g8 = v5;
    *(int32_t *)(a2 + 16) = 0;
    *(int32_t *)g10 = -1;
    *(int32_t *)(g10 + 4) = g9;
    g9 = a4;
    *(int32_t *)(g10 + 12) = g4;
    *(int16_t *)(g10 + 16) = (int16_t)&g137;
    *(int32_t *)(g10 + 8) = g9;
    if (v5 != 0) {
        int32_t v6 = g6 + (int32_t)&g44; // 0x7bf20
        g4 = v6;
        g4 = function_18ee0(v6);
    }
    int32_t * v7 = (int32_t *)(g6 + (int32_t)&g45); // 0x7bf2f
    g4 = *v7;
    *v7 = g10;
    *(int32_t *)(g10 + 20) = g4;
    int32_t result2; // 0x7bf5b
    if (v5 == 0) {
        // 0x7bf2f
        result2 = g4;
    } else {
        int32_t v8 = g6 + (int32_t)&g44; // 0x7bf45
        g4 = v8;
        int32_t v9 = function_18ec0(v8); // 0x7bf4c
        g4 = v9;
        result2 = v9;
    }
    // 0x7bf54
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result2;
}

// Address range: 0x7bf5c - 0x7bf76
int32_t function_7bf5c(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t result = function_7bece(a1, a2, 0, 0); // 0x7bf6c
    g4 = result;
    return result;
}

// Address range: 0x7bf76 - 0x7bfab
int32_t function_7bf76(int32_t a1) {
    int32_t v1 = g10; // 0x7bf79
    g10 = a1;
    int32_t v2 = g6; // 0x7bf7d
    int32_t v3 = function_1bbc2(v2); // 0x7bf7e
    g4 = v3;
    g6 += 0x272d5;
    int32_t result; // 0x7bf9c
    if (*(int32_t *)g10 != 0) {
        int32_t mem = (int32_t)malloc(24); // 0x7bf93
        g4 = mem;
        g9 = 24;
        result = function_7bf5c(g10, mem);
        g4 = result;
    } else {
        result = v3;
    }
    // 0x7bfa4
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x7bfab - 0x7c034
int32_t function_7bfab(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g8; // 0x7bfae
    int32_t v2 = g10; // 0x7bfaf
    int32_t v3 = g6; // 0x7bfb0
    g10 = a2;
    g4 = a3;
    g4 = function_1bbc2(v3);
    g6 += 0x27299;
    *(int32_t *)(g10 + 16) = 0;
    *(int32_t *)(g10 + 4) = g4;
    g4 = a4;
    *(int32_t *)g10 = -1;
    int32_t v4 = *(int32_t *)(g6 - 4); // 0x7bfd8
    g8 = v4;
    *(int32_t *)(g10 + 8) = g4;
    g4 = a1;
    *(char *)(g10 + 16) = 2;
    int16_t * v5 = (int16_t *)(g10 + 16); // 0x7bfe8
    *v5 = *v5 | (int16_t)&g137;
    *(int32_t *)(g10 + 12) = g4;
    if (v4 != 0) {
        int32_t v6 = g6 + 0x18310; // 0x7bff8
        g4 = v6;
        g4 = function_18ee0(v6);
    }
    int32_t * v7 = (int32_t *)(g6 + 0x18328); // 0x7c007
    g4 = *v7;
    *v7 = g10;
    *(int32_t *)(g10 + 20) = g4;
    int32_t result; // 0x7c033
    if (v4 == 0) {
        // 0x7c007
        result = g4;
    } else {
        int32_t v8 = g6 + 0x18310; // 0x7c01d
        g4 = v8;
        int32_t v9 = function_18ec0(v8); // 0x7c024
        g4 = v9;
        result = v9;
    }
    // 0x7c02c
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
}

// Address range: 0x7c034 - 0x7c04e
int32_t function_7c034(int32_t a1, int32_t a2) {
    int32_t v1 = g5; // bp-4
    g5 = &v1;
    int32_t result = function_7bfab(a1, a2, 0, 0); // 0x7c044
    g4 = result;
    return result;
}

// Address range: 0x7c04e - 0x7c07a
int32_t function_7c04e(int32_t a1) {
    int32_t v1 = g6; // 0x7c051
    g4 = function_1bbc2(v1);
    g6 += (int32_t)&g74;
    int32_t mem = (int32_t)malloc(24); // 0x7c062
    g4 = mem;
    g9 = 24;
    int32_t result = function_7c034(a1, mem); // 0x7c06d
    g4 = result;
    g6 = v1;
    return result;
}

// Address range: 0x7c07a - 0x7c150
int32_t function_7c07a(int32_t a1) {
    int32_t v1 = g8; // 0x7c07d
    int32_t v2 = g10; // 0x7c07e
    int32_t v3 = g6; // 0x7c07f
    g8 = a1;
    g4 = function_1bbc2(v3);
    int32_t v4 = g6; // 0x7c08b
    int32_t v5 = v4 + 0x271cd; // 0x7c08b
    g6 = v5;
    int32_t v6; // 0x7c0da
    int32_t v7; // 0x7c10f
    int32_t result; // 0x7c149
    int32_t v8; // 0x7c112
    if (a1 == 0) {
        // 0x7c144
        g10 = 0;
        result = 0;
        goto lab_0x7c146;
    } else {
        // 0x7c099
        if (*(int32_t *)a1 == 0) {
            // 0x7c144
            g10 = 0;
            result = 0;
            goto lab_0x7c146;
        } else {
            // 0x7c0a2
            if (*(int32_t *)(v4 + 0x271c9) != 0) {
                int32_t v9 = v4 + 0x3f4dd; // 0x7c0ae
                g4 = v9;
                g4 = function_18ee0(v9);
                v6 = g6;
            } else {
                v6 = v5;
            }
            int32_t v10 = *(int32_t *)(v6 + (int32_t)&g45); // 0x7c0bd
            g10 = v10;
            int32_t v11 = v6 + 0x18328; // 0x7c0c3
            g4 = v11;
            if (v10 != 0) {
                while (true) {
                    // 0x7c0cb
                    if (*(int32_t *)(v10 + 12) == a1) {
                        // break -> 0x7c10f
                        break;
                    }
                    int32_t v12 = v10 + 20; // 0x7c0d0
                    g4 = v12;
                    int32_t v13 = *(int32_t *)v12; // 0x7c0d3
                    g10 = v13;
                    if (v13 == 0) {
                        goto lab_0x7c0da;
                    }
                    v11 = v12;
                    v10 = v13;
                }
                v8 = v11;
                v7 = v10;
                goto lab_0x7c10f;
            } else {
                goto lab_0x7c0da;
            }
        }
    }
  lab_0x7c120:;
    int32_t v14 = g6; // 0x7c120
    if (*(int32_t *)(v14 - 4) != 0) {
        int32_t v15 = v14 + 0x18310; // 0x7c12c
        g4 = v15;
        g4 = function_18ec0(v15);
    }
    int32_t v16 = g10; // 0x7c13b
    if (v16 == 0) {
        // 0x7c13f
        abort();
        // UNREACHABLE
    }
    result = v16;
    goto lab_0x7c146;
  lab_0x7c146:
    // 0x7c146
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x7c0da:;
    int32_t v17 = *(int32_t *)(v6 + (int32_t)&g46); // 0x7c0da
    g10 = v17;
    int32_t v18 = v6 + 0x1832c; // 0x7c0e0
    g4 = v18;
    if (v17 != 0) {
        while (true) {
            int32_t v19 = *(int32_t *)(v17 + 12); // 0x7c10a
            if (*(char *)(v17 + 16) % 2 == 0) {
                if (v19 == a1) {
                    v8 = v18;
                    v7 = v17;
                    // break -> 0x7c10f
                    break;
                }
            } else {
                // 0x7c0ee
                g9 = v19;
                if (*(int32_t *)v19 == a1) {
                    int32_t v20 = *(int32_t *)(v17 + 20); // 0x7c0f5
                    g9 = v20;
                    *(int32_t *)v18 = v20;
                    free((int32_t *)*(int32_t *)(g10 + 12));
                    g4 = &g870;
                    goto lab_0x7c120;
                }
            }
            int32_t v21 = v17 + 20; // 0x7c116
            g4 = v21;
            int32_t v22 = *(int32_t *)v21; // 0x7c119
            g10 = v22;
            if (v22 == 0) {
                goto lab_0x7c120;
            }
            v18 = v21;
            v17 = v22;
        }
        goto lab_0x7c10f;
    } else {
        goto lab_0x7c120;
    }
  lab_0x7c10f:;
    int32_t v23 = *(int32_t *)(v7 + 20); // 0x7c10f
    g9 = v23;
    *(int32_t *)v8 = v23;
    goto lab_0x7c120;
}

// Address range: 0x7c150 - 0x7c159
int32_t function_7c150(void) {
    int32_t result = function_7c07a((int32_t)&g870); // 0x7c154
    g4 = result;
    return result;
}

// Address range: 0x7c159 - 0x7c18a
int32_t function_7c159(int32_t a1) {
    int32_t v1 = g6; // 0x7c15c
    int32_t v2 = g4; // 0x7c15d
    g4 = a1;
    int32_t v3 = function_1bbc2(v2); // 0x7c161
    g4 = v3;
    g6 += 0x270f2;
    int32_t result; // 0x7c189
    if (*(int32_t *)v3 != 0) {
        int32_t v4 = function_7c07a(v3); // 0x7c175
        g4 = v4;
        free((int32_t *)v4);
        g4 = &g870;
        result = &g870;
    } else {
        result = v3;
    }
    // 0x7c185
    g6 = v1;
    return result;
}

// Address range: 0x7c18a - 0x7c304
int32_t function_7c18a(int32_t a1, int32_t a2) {
    int32_t v1 = g8; // 0x7c18d
    int32_t v2 = g10; // 0x7c18e
    int32_t v3 = g6; // 0x7c18f
    g4 = function_1bbc2(v3);
    int32_t v4 = g6; // 0x7c195
    int32_t v5 = v4 + 0x270c3; // 0x7c195
    g6 = v5;
    int32_t v6; // 0x7c1b9
    if (*(int32_t *)(v4 + 0x270bf) != 0) {
        int32_t v7 = v4 + 0x3f3d3; // 0x7c1aa
        g4 = v7;
        g4 = function_18ee0(v7);
        v6 = g6;
    } else {
        v6 = v5;
    }
    int32_t v8 = *(int32_t *)(v6 + (int32_t)&g46);
    g10 = v8;
    int32_t v9; // 0x7c1cc
    if (v8 != 0) {
        while (true) {
            // 0x7c1c1
            g4 = a1;
            if (*(int32_t *)v8 <= a1) {
                // break -> 0x7c1c8
                break;
            }
            int32_t v10 = *(int32_t *)(v8 + 20);
            g10 = v10;
            if (v10 == 0) {
                goto lab_0x7c21a;
            }
            v8 = v10;
        }
        // 0x7c1c8
        g9 = a1;
        g4 = v8;
        v9 = function_7b9d0();
        g4 = v9;
        g8 = v9;
        goto lab_0x7c216;
    } else {
        goto lab_0x7c21a;
    }
  lab_0x7c21a:;
    int32_t v11 = *(int32_t *)(v6 + (int32_t)&g45); // 0x7c21a
    g10 = v11;
    int32_t v12;
    int32_t v13; // 0x7c211
    int32_t v14; // 0x7c24139
    if (v11 != 0) {
        // 0x7c1de
        g9 = a1;
        *(int32_t *)(v6 + 0x18328) = *(int32_t *)(v11 + 20);
        g4 = g10;
        int32_t v15 = function_7b9d0(); // 0x7c1ec
        g4 = v15;
        int32_t v16 = g6 + 0x1832c; // 0x7c1f1
        int32_t v17 = *(int32_t *)v16; // 0x7c1f1
        g9 = v17;
        g7 = v16;
        g8 = v15;
        v12 = g10;
        if (v17 != 0) {
            int32_t v18 = v17; // 0x7c207
            while (true) {
                uint32_t v19 = *(int32_t *)v12; // 0x7c201
                g4 = v19;
                if (*(int32_t *)v18 < v19) {
                    // break -> 0x7c201
                    break;
                }
                int32_t v20 = v18 + 20; // 0x7c207
                g7 = v20;
                int32_t v21 = *(int32_t *)v20; // 0x7c20a
                g9 = v21;
                if (v21 == 0) {
                    v13 = v21;
                    goto lab_0x7c211;
                }
                v18 = v21;
            }
            v13 = v18;
        } else {
            v13 = v17;
        }
        goto lab_0x7c211;
    } else {
        // 0x7c224
        g8 = 0;
        v14 = 0;
        goto lab_0x7c226;
    }
  lab_0x7c216:;
    int32_t v22 = g6;
    if (v9 != 0) {
        v14 = v9;
        v6 = v22;
        goto lab_0x7c226;
    } else {
        v6 = v22;
        goto lab_0x7c21a;
    }
  lab_0x7c226:;
    // 0x7c226
    int32_t v23; // 0x7c241
    if (*(int32_t *)(v6 - 4) != 0) {
        int32_t v24 = v6 + 0x18310; // 0x7c232
        g4 = v24;
        g4 = function_18ec0(v24);
        v23 = g8;
    } else {
        v23 = v14;
    }
    if (v23 == 0) {
        int32_t v25 = a1; // bp-56
        int32_t v26 = g6 - 0x27d1a; // 0x7c2be
        g4 = v26;
        int32_t v27 = dl_iterate_phdr((int32_t (*)(struct dl_phdr_info *, int32_t, int32_t *))v26, &v25); // 0x7c2d3
        g4 = v27;
        if (v27 >= 0) {
            // 0x7c2df
            g8 = 0;
        }
    } else {
        int32_t v28 = *(int32_t *)(g10 + 4); // 0x7c245
        g4 = v28;
        g9 = a2;
        *(int32_t *)a2 = v28;
        int32_t v29 = *(int32_t *)(g10 + 8); // 0x7c24d
        g4 = v29;
        *(int32_t *)(g9 + 4) = v29;
        int32_t v30 = g10; // 0x7c253
        int32_t v31 = v30 + 16; // 0x7c253
        int32_t v32 = *(int32_t *)v31; // 0x7c253
        int32_t v33 = (int32_t)((int16_t)v32 / 8) | v32 & -0x10000; // 0x7c256
        g4 = v33;
        int32_t v34 = v33 & (int32_t)&g862; // 0x7c25e
        g4 = v34;
        int32_t v35; // 0x7c265
        int32_t v36; // 0x7c26d
        if ((*(char *)v31 & 4) != 0) {
            // 0x7c263
            g4 = g8;
            v35 = function_7b0ec();
            g4 = v35;
            v36 = g10;
        } else {
            v36 = v30;
            v35 = v34;
        }
        int32_t v37 = v35 & (int32_t)&g862; // 0x7c26a
        g7 = v37;
        g9 = v36;
        g4 = v37;
        int32_t v38 = function_7af4e(); // 0x7c274
        g7 = v37;
        g9 = v38;
        g4 = v37;
        int32_t v39; // bp-32
        function_7af96(g8 + 8, (int32_t)&v39);
        g4 = v39;
        g9 = a2;
        *(int32_t *)(a2 + 8) = v39;
    }
    int32_t result = g8; // 0x7c2fd
    g4 = result;
    g6 = v3;
    g10 = v2;
    g8 = v1;
    return result;
  lab_0x7c211:
    // 0x7c211
    *(int32_t *)(v12 + 20) = v13;
    *(int32_t *)g7 = g10;
    v9 = g8;
    goto lab_0x7c216;
}

// Address range: 0x7c304 - 0x7c32c
int32_t function_7c304(void) {
    int32_t v1 = g10; // 0x7c307
    int32_t v2 = g6; // 0x7c308
    g4 = function_1bbc2(v2);
    int32_t v3 = g6; // 0x7c30e
    g6 = v3 + 0x26f4a;
    int32_t v4 = v3 + 0x26e06; // 0x7c31e
    g10 = v4;
    int32_t result = *(int32_t *)v4; // 0x7c321
    g4 = result;
    while (result != -1) {
        // 0x7c321
        v4 -= 4;
        g10 = v4;
        result = *(int32_t *)v4;
        g4 = result;
    }
    // 0x7c328
    g6 = v2;
    g10 = v1;
    return result;
}

// Address range: 0x7c32c - 0x7c346
int32_t _fini(int32_t a1) {
    int32_t v1 = g6; // 0x7c32c
    int32_t v2;
    g6 = v2 + 0x26f23;
    int32_t result = function_1bb1c(v1); // 0x7c33c
    g4 = result;
    g6 = a1;
    return result;
}

// Address range: 0x2c769b2 - 0x2c769b3
int32_t function_2c769b2(void) {
    // 0x2c769b2
    return g4;
}

// Address range: 0x2c769f3 - 0x2c769f4
int32_t function_2c769f3(void) {
    // 0x2c769f3
    return g4;
}

// Address range: 0x2c79ea0 - 0x2c79ea1
int32_t function_2c79ea0(void) {
    // 0x2c79ea0
    return g4;
}

// Address range: 0x4568901 - 0x4568902
int32_t function_4568901(int32_t a1) {
    // 0x4568901
    return g4;
}

// Address range: 0x48b37e2 - 0x48b37e3
int32_t function_48b37e2(void) {
    // 0x48b37e2
    return g4;
}

// Address range: 0x438d37dd - 0x438d37de
int32_t function_438d37dd(void) {
    // 0x438d37dd
    return g4;
}

// Address range: 0x448d969d - 0x448d969e
int32_t function_448d969d(void) {
    // 0x448d969d
    return g4;
}

// Address range: 0x44c7fffe - 0x44c7ffff
int32_t function_44c7fffe(void) {
    // 0x44c7fffe
    return g4;
}

// Address range: 0x44c7ffff - 0x44c80000
int32_t function_44c7ffff(void) {
    // 0x44c7ffff
    return g4;
}

// Address range: 0x548b505f - 0x548b5060
int32_t function_548b505f(void) {
    // 0x548b505f
    return g4;
}

// Address range: 0x84147ada - 0x84147adb
int32_t function_84147ada(void) {
    // 0x84147ada
    return g4;
}

// Address range: 0x85d2febe - 0x85d2febf
int32_t function_85d2febe(void) {
    // 0x85d2febe
    return g4;
}

// Address range: 0x8903936e - 0x8903936f
int32_t function_8903936e(void) {
    // 0x8903936e
    return g4;
}

// Address range: 0x8903a7a7 - 0x8903a7a8
int32_t function_8903a7a7(void) {
    // 0x8903a7a7
    return g4;
}

// Address range: 0x89059d67 - 0x89059d68
int32_t function_89059d67(void) {
    // 0x89059d67
    return g4;
}

// Address range: 0x89ff8501 - 0x89ff8502
int32_t function_89ff8501(void) {
    // 0x89ff8501
    return g4;
}

// Address range: 0x8b000004 - 0x8b000005
int32_t function_8b000004(void) {
    // 0x8b000004
    return g4;
}

// Address range: 0x8d91c232 - 0x8d91c233
int32_t function_8d91c232(void) {
    // 0x8d91c232
    return g4;
}

// Address range: 0x900001f2 - 0x900001f3
int32_t function_900001f2(void) {
    // 0x900001f2
    return g4;
}

// Address range: 0xc68d839a - 0xc68d839b
int32_t function_c68d839a(int32_t a1) {
    // 0xc68d839a
    return g4;
}

// Address range: 0xc701a020 - 0xc701a021
int32_t function_c701a020(void) {
    // 0xc701a020
    return g4;
}

// Address range: 0xc701a32d - 0xc701a32e
int32_t function_c701a32d(void) {
    // 0xc701a32d
    return g4;
}

// Address range: 0xc701a52b - 0xc701a52c
int32_t function_c701a52b(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    // 0xc701a52b
    return g4;
}

// Address range: 0xc701af50 - 0xc701af51
int32_t function_c701af50(void) {
    // 0xc701af50
    return g4;
}

// Address range: 0xc710468b - 0xc710468c
int32_t function_c710468b(void) {
    // 0xc710468b
    return g4;
}

// Address range: 0xc8043153 - 0xc8043154
int32_t function_c8043153(void) {
    // 0xc8043153
    return g4;
}

// Address range: 0xd2b60f10 - 0xd2b60f11
int32_t function_d2b60f10(void) {
    // 0xd2b60f10
    return g4;
}

// Address range: 0xe58e7a9f - 0xe58e7aa0
int32_t function_e58e7a9f(void) {
    // 0xe58e7a9f
    return g4;
}

// Address range: 0xe8047294 - 0xe8047295
int32_t function_e8047294(void) {
    // 0xe8047294
    return g4;
}

// Address range: 0xf3e2570f - 0xf3e25710
int32_t function_f3e2570f(void) {
    // 0xf3e2570f
    return g4;
}

// Address range: 0xfed4bd8d - 0xfed4bd8e
int32_t function_fed4bd8d(void) {
    // 0xfed4bd8d
    return g4;
}

// Address range: 0xffff92d7 - 0xffff92d8
int32_t function_ffff92d7(void) {
    // 0xffff92d7
    return g4;
}

// --------------- Dynamically Linked Functions ---------------

// int32_t __cxa_finalize(void);
// void __gmon_start__(void);
// void abort(void);
// int dl_iterate_phdr(int(*)(struct dl_phdr_info *, size_t, void *), void * data);
// void free(void * ptr);
// void * malloc(size_t size);
// int pthread_once(pthread_once_t * once_control, void(* init_routine)(void));

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (4.6.3)
// Detected language: C++
// Detected functions: 4833
// Decompilation date: 2020-02-01 16:45:41
